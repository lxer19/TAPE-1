URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P745.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts98.htm
Root-URL: http://www.mcs.anl.gov
Title: Newton-Krylov-Schwarz Methods for Aerodynamics Problems: Compressible and Incompressible Flows on Unstructured Grids  
Author: D. K. Kaushik D. E. Keyes B. F. Smith 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> W. K. Anderson and D. L. Bonhaus. </author> <title> An implicit upwind algorithm for computing turbulent flows on unstructured grids. </title> <journal> Computers and Fluids, </journal> <volume> 23, </volume> <year> 1994. </year>
Reference-contexts: We use MeTiS [8] to partition the unstructured grid. 2 3 Incompressible and Compressible Flows Our discretization routines are adapted from FUN3D, a tetrahedral unstructured grid code developed by W. K. Anderson and co-workers at NASA Langley for compressible <ref> [1] </ref> and incompressible [2] Euler and Navier-Stokes equations. It is used in aeronautical and automotive external flow applications for analysis and (recently) design optimization.
Reference: [2] <author> W. K. Anderson, R. D. Rausch, and D. L. Bonhaus. </author> <title> Implicit/multigrid algorithms for incompressible turbulent flows on unstructured grids. </title> <type> AIAA 95-1740, </type> <year> 1995. </year>
Reference-contexts: We use MeTiS [8] to partition the unstructured grid. 2 3 Incompressible and Compressible Flows Our discretization routines are adapted from FUN3D, a tetrahedral unstructured grid code developed by W. K. Anderson and co-workers at NASA Langley for compressible [1] and incompressible <ref> [2] </ref> Euler and Navier-Stokes equations. It is used in aeronautical and automotive external flow applications for analysis and (recently) design optimization.
Reference: [3] <author> S. Balay, W. D. Gropp, L. C. McInnes, and B. F. Smith. </author> <title> The Portable, Extensible Toolkit for Scientific Computing, </title> <note> version 2.0.22. http://www.mcs.anl.gov/petsc, 1998. </note>
Reference-contexts: Scatter/gather operations are created between local sequential vectors and global distributed vectors, based on connectivity patterns determined at runtime. Global NKS operations are thus translated into local tasks and communication tasks. We employ the PETSc package <ref> [3] </ref>, which features distributed data structures | index sets, vectors, and matrices | as fundamental objects. Iterative linear and nonlinear solvers, implemented in as data structure-neutral a manner as possible, are combinable modularly, recursively, and extensibly through a uniform application programmer interface.
Reference: [4] <author> X.-C. Cai. </author> <title> Some domain decomposition algorithms for nonselfadjoint elliptic and parabolic partial differential equations. </title> <type> Courant Institute TR 461, </type> <year> 1989. </year>
Reference-contexts: A good preconditioner saves time and space by permitting fewer iterations in the Krylov loop and smaller storage for the Krylov subspace. An additive Schwarz preconditioner <ref> [4] </ref> accomplishes this in a concurrent, localized manner, with an approximate solve in each subdomain of a partitioning of the global PDE domain.
Reference: [5] <author> X.-C. Cai, D. E. Keyes, and V. Venkatakrishnan. Newton-Krylov-Schwarz: </author> <title> An implicit solver for CFD. </title> <booktitle> In Proceedings of the Eighth International Conference on Domain Decomposition Methods, </booktitle> <pages> pages 387-400. </pages> <publisher> Wiley, </publisher> <year> 1997. </year>
Reference-contexts: Combining a Schwarz pre-conditioner with a Krylov iteration method inside an inexact Newton method leads to a synergistic parallelizable nonlinear boundary value problem solver with a classical name: Newton-Krylov-Schwarz (NKS) <ref> [5, 7] </ref>. Combined with pseudo-timestepping, we write NKS The basic philosophy of any efficient distributed computation is "owner computes," together with message merging and overlapping communication with computation where possible with split transactions. To minimize communication, each processor "ghosts" its stencil dependences on its neighbors' data.
Reference: [6] <author> A. Chorin. </author> <title> A numerical method for solving incompressible viscous flow problems. </title> <journal> J. Comp. Phys., </journal> <volume> 2 </volume> <pages> 12-26, </pages> <year> 1967. </year>
Reference-contexts: The incompressible version of the code employs four unknowns (pressure and three momenta) at each vertex and Chorin's artificial compressibility technique <ref> [6] </ref>. The compressible version uses five unknowns (density, momenta, and internal energy) at each vertex. Roe's flux-difference splitting is used to dis-cretize the convective terms.
Reference: [7] <author> W. D. Gropp, L. C. McInnes, M. D. Tidriri, and D. E. Keyes. </author> <title> Parallel implicit PDE computations: </title> <booktitle> Algorithms and software. In Proceedings of Parallel CFD'97, </booktitle> <pages> pages 333-344. </pages> <publisher> Elsevier, </publisher> <year> 1998. </year>
Reference-contexts: Combining a Schwarz pre-conditioner with a Krylov iteration method inside an inexact Newton method leads to a synergistic parallelizable nonlinear boundary value problem solver with a classical name: Newton-Krylov-Schwarz (NKS) <ref> [5, 7] </ref>. Combined with pseudo-timestepping, we write NKS The basic philosophy of any efficient distributed computation is "owner computes," together with message merging and overlapping communication with computation where possible with split transactions. To minimize communication, each processor "ghosts" its stencil dependences on its neighbors' data.
Reference: [8] <author> G. Karypis and V. Kumar. </author> <title> A fast and high quality multilevel scheme for partitioning irregular graphs. </title> <note> to appear in SIAM J. </note> <institution> Sci. Comput., </institution> <year> 1998. </year>
Reference-contexts: Iterative linear and nonlinear solvers, implemented in as data structure-neutral a manner as possible, are combinable modularly, recursively, and extensibly through a uniform application programmer interface. Portability is achieved through MPI, but message-passing detail is not required in user code. We use MeTiS <ref> [8] </ref> to partition the unstructured grid. 2 3 Incompressible and Compressible Flows Our discretization routines are adapted from FUN3D, a tetrahedral unstructured grid code developed by W. K. Anderson and co-workers at NASA Langley for compressible [1] and incompressible [2] Euler and Navier-Stokes equations.
Reference: [9] <author> D. K. Kaushik, D. E. Keyes, and B. F. Smith. </author> <title> On the interaction of architecture and algorithm in the domain-based parallelization of an unstructured grid incompressible flow code. </title> <booktitle> In Proceedings of the Tenth International Conference on Domain Decomposition Methods, </booktitle> <pages> pages 311-319. </pages> <publisher> AMS, </publisher> <year> 1998. </year>
Reference-contexts: 1 Introduction and Motivation We review and extend to the compressible regime an earlier parallelization of an implicit incompressible unstructured Euler code <ref> [9] </ref>, and solve for flow over an M6 wing in subsonic, transonic, and supersonic regimes. <p> The compressible Jacobian is far more complex to evaluate, but it also concentrates locality, achieving much higher computational rates than the corresponding incompressible Jacobian. 4.3 Memory Hierarchy Aspects As observed in <ref> [9] </ref> for the same unstructured flow code, data structure storage patterns for primary and auxiliary fields should adapt to hierarchical memory through: (1) interlacing, (2) blocking of degrees of freedom (DOFs) that are defined at the same point in point-block operations, and reordering (3) of edges for reuse of vertex data. <p> We are currently studying hardware counter profiles of similar runs to build more detailed causal explanations. 5 Conclusions and Future Directions Unstructured implicit CFD solvers are amenable to scalable implementation, but careful tuning is needed to obtain the best product of per-processor efficiency and parallel efficiency. We <ref> [9] </ref> and others have already solved problems of millions of vertices on hundreds of processors at rates in the tens of gigaflop/s, 6 and we believe such performance is extensible, with further effort, to the ter--aflop/s regime.
Reference: [10] <author> D. E. Keyes. </author> <title> Aerodynamic applications of Newton-Krylov-Schwarz solvers. </title> <booktitle> In Proceedings of the 14th International Conference on Numerical Methods in Fluid Dynamics, </booktitle> <pages> pages 1-20. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: The overall solution process for nonlinear steady states has been found to be competitive with FAS multigrid in execution time when compared in specific 3 two-dimensional external Euler flow contexts on vector computers <ref> [10] </ref>.

References-found: 10

