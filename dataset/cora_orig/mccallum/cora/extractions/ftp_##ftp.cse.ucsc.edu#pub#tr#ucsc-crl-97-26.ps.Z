URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-97-26.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Rapid Decimation for Direct Volume Rendering formal error measure is described based on a three-dimensional
Author: Jonathan Gibbs, Allen Van Gelder, Vivek Verma, and Jane Wilhelms 
Keyword: Computer Graphics, Scientific Visualization, Direct Volume Rendering, Decimation, Level of-detail, Irregular Grids.  
Note: A  reference images.  
Address: Santa Cruz  
Affiliation: University of California,  
Pubnum: UCSC-CRL-97-26  
Date: December 19, 1997  
Abstract: An approach for eliminating unnecessary portions of a volume when producing a direct volume rendering is described. This reduction in volume size sacrifices some image quality in the interest of rendering speed. Since volume visualization is often used as an exploratory visualization technique, it is important to reduce rendering times, so the user can effectively explore the volume. The methods presented can speed up rendering by factors of 2 to 3 with minor image degradation. A family of decimation algorithms to reduce the number of primitives in the volume without altering the volume's grid in any way is introduced. This allows the decimation to be computed rapidly, making it easier to change decimation levels on the fly. Further, because very little extra space is required, this method is suitable for the very large volumes that are becoming common. The method is also grid-independent, so it is suitable for multiple overlapping curvilinear and unstructured, as well as regular, grids. The decimation process can proceed automatically, or can be guided by the user so that important regions of the volume are decimated less than unimportant regions. 
Abstract-found: 1
Intro-found: 1
Reference: [AS96] <author> Maria-Elena Algorri and Francis Schmitt. </author> <title> Mesh simplification. </title> <booktitle> Computer Graphics Forum (EUROGRAPHICS '96), </booktitle> <address> 15(3):C-77-C-86, </address> <year> 1996. </year>
Reference-contexts: Other methods group planar polygons, and replace them with fewer, larger, polygons [HH93, RB93], or remove polygons by iteratively collapsing edges [HDD + 93, Hop96]. Recent edge-collapsing algorithms have addressed edge selection, and allow the mesh to be non-uniformly decimated <ref> [AS96, RR96, XV96] </ref>. Another way to achieve non-uniform decimation is by using simplification envelopes [CVM + 96]. An envelope consists of an inner and outer surface, and the simplification is constrained to fall between these two surfaces.
Reference: [BCFM + 89] <author> P.G. Buning, I.T. Chiu, Jr. F.W. Martin, R.L. Meakin, S. Obayashi, Y.M. Rizk, J.L. Steger, and M. Yarrow. </author> <title> Flowfield simulation of the space shuttle vehicle in ascent. </title> <booktitle> Fourth International Conference on Supercomputing, </booktitle> <volume> 2 </volume> <pages> 20-28, </pages> <year> 1989. </year>
Reference-contexts: Sometimes non-tetrahedral cells are broken into tetrahedra to simplify processing; however, this can lead to artifacts and increases the number of primitives that the renderer has to handle. Multiple, overlapping, and intersecting grids may be used to sample space around very complex shapes <ref> [BCFM + 89] </ref>. Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. <p> We used the following CFD volumes: the blunt fin [HB85], a single curvilinear grid of 40,960 data points; the Space Shuttle launch vehicle <ref> [BCFM + 89] </ref>, consisting of nine curvilinear grids with 941,159 data points; and the Lockheed fighter (courtesy of John Batina of NASA Langley Research Center), an unstructured tetrahedral grid consisting of 13,382 data points and 70,125 tetrahedra. Comparable results were observed on CT data, but are not described further.
Reference: [CCF94] <author> Brian Cabral, Nancy Cam, and Jim Foran. </author> <title> Accelerated volume rendering and tomographic reconstruction using texture mapping hardware. </title> <booktitle> In 1994 Symposium on Volume Visualization, </booktitle> <pages> pages 91-98, </pages> <address> Washington, D.C., </address> <month> October </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: Most research has addressed only rectilinear (regular) grids, and most previously reported acceleration and optimization techniques apply only to such grids. New methods such as Fourier transforms [Lev92, Mal93], shear-warp transforms [LL94], and 3D texture maps <ref> [CCF94] </ref> suffer this limitation. However, many applications create non-rectilinear volume data sets, such as computational fluid dynamics (CFD), finite element analysis (FEM), and atmospheric and oceanographic measurements. <p> Thus the image from the spherically opposing viewpoint is identical, and need not be computed. The absence of opacity allows us to integrate the density (or other field function) through the volume, producing an approximate 3D analog of the Radon transformation <ref> [Mal93, CCF94, LH96] </ref>. 7 Method Blunt Fin Lockheed Fighter Space Shuttle Uniform by Range 0.089 0.056 0.061 Uniform by Histogram 0.117 0.042 0.040 Histogram Curvature 0.062 0.048 0.004 Histogram Features 0.058 0.065 0.031 Transfer Function 0.074 0.071 0.022 Table 1: Errors computed using the image-based error metric, as discussed in section
Reference: [CCMS96] <author> A. Ciampalini, P. Cignoni, C. Montani, and R. Scopigno. </author> <title> Multiresolution decimation based on global error. </title> <note> submitted for publication, </note> <year> 1996. </year>
Reference-contexts: Other algorithms have been presented which are also based on the incremental removal of vertices, followed by a re-triangulation [SZL92, KT96]. Some recent vertex-removal algorithms have focused on more sophisticated error control <ref> [CCMS96, KLS96] </ref>. Other methods group planar polygons, and replace them with fewer, larger, polygons [HH93, RB93], or remove polygons by iteratively collapsing edges [HDD + 93, Hop96]. Recent edge-collapsing algorithms have addressed edge selection, and allow the mesh to be non-uniformly decimated [AS96, RR96, XV96].
Reference: [CDFM + 94] <author> Paolo Cignoni, Leila De Floriani, Claudio Montani, Enrico Puppo, and Roberto Scopigno. </author> <title> Multiresolution modeling and visualization of volume data based on simplicial complexes. </title> <booktitle> In 1994 Symposium on Volume Visualization, </booktitle> <address> Washington, D.C., </address> <month> October </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: Since the running time of most visualization techniques is dependent on the number of cells in the volume, this translates directly to improved performance. Cignoni et al. have presented a method for deriving multiple resolutions of a scattered volume data set <ref> [CDFM + 94] </ref>. The scattered data is visualized by first tetrahedralizing it, and then applying standard visualization techniques for tetrahedral data sets. The multi-resolution model is built by constructing a 3 series of tetrahedralizations based on decreasing tolerance values.
Reference: [Cha92] <author> Judy Challinger. </author> <title> Parallel volume rendering for curvilinear volumes. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference, </booktitle> <pages> pages 14-21. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1992. </year>
Reference-contexts: Multiple, overlapping, and intersecting grids may be used to sample space around very complex shapes [BCFM + 89]. Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully <ref> [Gar90, Cha92, Use93, Ma95] </ref>. Cell projection and splatting have been used for irregular grids in software [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] and hardware [ST90, VGW93, YRL + 96].
Reference: [Cha93] <author> Judy Challinger. </author> <title> Scalable parallel volume raycasting for nonrectilinear computational grids. </title> <booktitle> In IEEE Parallel Visualization Workshop, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: Cell projection and splatting have been used for irregular grids in software [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] and hardware [ST90, VGW93, YRL + 96]. Instead of projecting cells, several algorithms have been developed which project faces <ref> [Luc92, Cha93, WVGTG96] </ref>. 2 2.2 Surface Decimation While there has not been a lot of work in the decimation of volumes, there have been many papers addressing the issue of decimation of surface meshes.
Reference: [CPD + 96] <author> Andrew Certain, Jovan Popovic, Tony DeRose, Tom Duchamp, David H. Salesin, and Werner Stuetzle. </author> <title> Interactive multiresolution surface viewing. </title> <booktitle> In Proceedings of SIGGRAPH, Computer Graphics, Annual Conference Series, </booktitle> <pages> pages 91-98, </pages> <month> August </month> <year> 1996. </year> <month> 10 </month>
Reference-contexts: Volumetric methods can also be employed by voxelizing the original mesh into a multi-resolution hierarchy, and extracting iso-surfaces of varying complexity [HHVW96, SFYC96]. A very different approach to providing many different levels of detail from a complex model is a theoretically sound framework for multi-resolution models <ref> [EDD + 95, CPD + 96] </ref>.
Reference: [CVM + 96] <author> Jonathan Cohen, Amitabh Varshney, Dinesh Manocha, Greg Turk, Hans Weber, Pankaj Agar--wal, Frederick P. Jr. Brooks, and William Wright. </author> <title> Simplification envelopes. </title> <booktitle> In Proceedings of SIGGRAPH, Computer Graphics, Annual Conference Series, </booktitle> <pages> pages 119-128, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Recent edge-collapsing algorithms have addressed edge selection, and allow the mesh to be non-uniformly decimated [AS96, RR96, XV96]. Another way to achieve non-uniform decimation is by using simplification envelopes <ref> [CVM + 96] </ref>. An envelope consists of an inner and outer surface, and the simplification is constrained to fall between these two surfaces. Volumetric methods can also be employed by voxelizing the original mesh into a multi-resolution hierarchy, and extracting iso-surfaces of varying complexity [HHVW96, SFYC96].
Reference: [DZ91] <author> Michael J. DeHaemer, Jr. and Michael J. Zyda. </author> <title> Simplification of objects rendered by polygonal approximations. </title> <journal> Computers and Graphics, </journal> <volume> 15(2) </volume> <pages> 175-184, </pages> <year> 1991. </year>
Reference-contexts: DeHaumer and Zyda proposed two solutions: either start with a coarse grid, and incrementally refine it until a criterion is met (adaptive subdivision), or start with the finest data, and group small polygons into larger ones (polygon growth) <ref> [DZ91] </ref>. Later algorithms have built on these two fundamental concepts. Turk presented a method called re-tiling [Tur92]. Re-tiling re-samples the surface uniformly, and adds new vertices to the original mesh. The old vertices are then removed one by one, making local adjustments to preserve the topology of the surface.
Reference: [EDD + 95] <author> Matthias Eck, Tony DeRose, Tom Duchamp, Hugues Hoppe, Michael Lounsberg, and Werner Stuetzle. </author> <title> Multiresolution analysis of arbitrary meshes. </title> <booktitle> In Proceedings of SIGGRAPH, Computer Graphics, Annual Conference Series, </booktitle> <pages> pages 173-182, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Volumetric methods can also be employed by voxelizing the original mesh into a multi-resolution hierarchy, and extracting iso-surfaces of varying complexity [HHVW96, SFYC96]. A very different approach to providing many different levels of detail from a complex model is a theoretically sound framework for multi-resolution models <ref> [EDD + 95, CPD + 96] </ref>.
Reference: [FDFH90] <author> James D. Foley, Andies Van Dam, Steven Feiner, and John Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Mass., 2nd edition, </address> <year> 1990. </year>
Reference-contexts: Next, we will survey the literature on decimation, covering surface decimation techniques first, and then discussing the volume-related work. 2.1 Volume Rendering Early approaches for direct volume rendering used ray-casting, cell projection, and splatting <ref> [FDFH90] </ref>. Most research has addressed only rectilinear (regular) grids, and most previously reported acceleration and optimization techniques apply only to such grids. New methods such as Fourier transforms [Lev92, Mal93], shear-warp transforms [LL94], and 3D texture maps [CCF94] suffer this limitation.
Reference: [Gar90] <author> Michael P. Garrity. </author> <title> Raytracing irregular volume data. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 35-40, </pages> <month> De-cember </month> <year> 1990. </year>
Reference-contexts: Multiple, overlapping, and intersecting grids may be used to sample space around very complex shapes [BCFM + 89]. Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully <ref> [Gar90, Cha92, Use93, Ma95] </ref>. Cell projection and splatting have been used for irregular grids in software [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] and hardware [ST90, VGW93, YRL + 96].
Reference: [GGSC96] <author> Steven J. Gortler, Radek Grzeszczuk, Richard Szeliski, and Michael F. Cohen. </author> <booktitle> The lumigraph. In Proceedings of SIGGRAPH, Computer Graphics, Annual Conference Series, </booktitle> <pages> pages 43-54, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: If we are to decimate volumes successfully for direct volume rendering, we must be able to analyze the effect of decimation on the light field produced by the volume. The notion of a light field was introduced as an image-based rendering architecture <ref> [LH96, GGSC96] </ref>. Levoy and Hanrahan defined an object's light field as a 4D function of position and direction in regions of free space. This function describes the light emitted by the object. A single rendered image is a 2D slice of this 4D function.
Reference: [GH95] <author> Michael Garland and Paul S. Heckbert. </author> <title> Fast polygonal approximation of terrains and height fields. </title> <type> Technical Report CMU-CS-95-181, </type> <institution> Carnegie Mellon University, School of Computer Science, Carnegie Mellon University, Pittsburg, </institution> <address> PA 15213, </address> <year> 1995. </year>
Reference-contexts: Most methods also require re-meshing, so the new connections are not a subset of the old. The simplest type of surface to decimate is the height field. This is essentially only a 2D problem. Garland and Heckbert present an overview of these techniques <ref> [GH95] </ref>, most of which center around creating a Delauney triangularization of the data at various error levels. More recently, work in this area has involved generating the display in real-time and maintaining continuity between different levels of detail [LKR + 96].
Reference: [Gie92] <author> Christopher Giertsen. </author> <title> Volume visualization of sparse irregular meshes. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 12(2) </volume> <pages> 40-48, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. Cell projection and splatting have been used for irregular grids in software <ref> [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] </ref> and hardware [ST90, VGW93, YRL + 96].
Reference: [GP93] <author> Christopher Giertsen and Johnny Peterson. </author> <title> Parallel volume rendering on a network of workstations. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 16-23, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. Cell projection and splatting have been used for irregular grids in software <ref> [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] </ref> and hardware [ST90, VGW93, YRL + 96].
Reference: [HB85] <author> Ching-Mao Hung and Pieter G. Buning. </author> <title> Simulation of blunt-fin-induced shock-wave and turbulent boundary-layer interaction. </title> <journal> J. Fluid Mechanics, </journal> <volume> 154 </volume> <pages> 163-185, </pages> <year> 1985. </year>
Reference-contexts: We used the following CFD volumes: the blunt fin <ref> [HB85] </ref>, a single curvilinear grid of 40,960 data points; the Space Shuttle launch vehicle [BCFM + 89], consisting of nine curvilinear grids with 941,159 data points; and the Lockheed fighter (courtesy of John Batina of NASA Langley Research Center), an unstructured tetrahedral grid consisting of 13,382 data points and 70,125 tetrahedra.
Reference: [HDD + 93] <author> Hugues Hoppe, Tony DeRose, Tom Duchamp, John McDonald, and Werner Stuetzle. </author> <title> Mesh optimization. </title> <booktitle> Proceedings of SIGGRAPH, </booktitle> <volume> 25(2) </volume> <pages> 19-25, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Some recent vertex-removal algorithms have focused on more sophisticated error control [CCMS96, KLS96]. Other methods group planar polygons, and replace them with fewer, larger, polygons [HH93, RB93], or remove polygons by iteratively collapsing edges <ref> [HDD + 93, Hop96] </ref>. Recent edge-collapsing algorithms have addressed edge selection, and allow the mesh to be non-uniformly decimated [AS96, RR96, XV96]. Another way to achieve non-uniform decimation is by using simplification envelopes [CVM + 96].
Reference: [HH93] <author> Paul Hinker and Charles Hansen. </author> <title> Geometric optimization. </title> <editor> In Gregory Nielson and Dan Bergeron, editors, </editor> <booktitle> Visualization '93, </booktitle> <pages> pages 189-195, </pages> <address> San Jose, Ca, </address> <month> October </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: Other algorithms have been presented which are also based on the incremental removal of vertices, followed by a re-triangulation [SZL92, KT96]. Some recent vertex-removal algorithms have focused on more sophisticated error control [CCMS96, KLS96]. Other methods group planar polygons, and replace them with fewer, larger, polygons <ref> [HH93, RB93] </ref>, or remove polygons by iteratively collapsing edges [HDD + 93, Hop96]. Recent edge-collapsing algorithms have addressed edge selection, and allow the mesh to be non-uniformly decimated [AS96, RR96, XV96]. Another way to achieve non-uniform decimation is by using simplification envelopes [CVM + 96].
Reference: [HHVW96] <author> Taosong He, Lichan Hong, Amitabh Varshney, and Sidney W. Wang. </author> <title> Controlled topology simplification. </title> <journal> IEEE Transactions on Visualization and Computer Graphics, </journal> <volume> 2(2) </volume> <pages> 171-183, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: An envelope consists of an inner and outer surface, and the simplification is constrained to fall between these two surfaces. Volumetric methods can also be employed by voxelizing the original mesh into a multi-resolution hierarchy, and extracting iso-surfaces of varying complexity <ref> [HHVW96, SFYC96] </ref>. A very different approach to providing many different levels of detail from a complex model is a theoretically sound framework for multi-resolution models [EDD + 95, CPD + 96].
Reference: [Hop96] <author> Hugues Hoppe. </author> <title> Progressive meshes. </title> <booktitle> In Proceedings of SIGGRAPH, Computer Graphics, Annual Conference Series, </booktitle> <pages> pages 99-108, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Some recent vertex-removal algorithms have focused on more sophisticated error control [CCMS96, KLS96]. Other methods group planar polygons, and replace them with fewer, larger, polygons [HH93, RB93], or remove polygons by iteratively collapsing edges <ref> [HDD + 93, Hop96] </ref>. Recent edge-collapsing algorithms have addressed edge selection, and allow the mesh to be non-uniformly decimated [AS96, RR96, XV96]. Another way to achieve non-uniform decimation is by using simplification envelopes [CVM + 96].
Reference: [KLS96] <author> Reinhard Klein, Gunther Liebich, and Wolfgang Strasser. </author> <title> Mesh reduction with error control. </title> <booktitle> In Visualization '96, </booktitle> <pages> pages 311-318. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: Other algorithms have been presented which are also based on the incremental removal of vertices, followed by a re-triangulation [SZL92, KT96]. Some recent vertex-removal algorithms have focused on more sophisticated error control <ref> [CCMS96, KLS96] </ref>. Other methods group planar polygons, and replace them with fewer, larger, polygons [HH93, RB93], or remove polygons by iteratively collapsing edges [HDD + 93, Hop96]. Recent edge-collapsing algorithms have addressed edge selection, and allow the mesh to be non-uniformly decimated [AS96, RR96, XV96].
Reference: [Koy92] <author> Koji Koyamada. </author> <title> Fast traversal of irregular volumes. </title> <editor> In T. L. Kunii, editor, </editor> <booktitle> Visual Computing Integrating Computer Graphics and Computer Vision, </booktitle> <pages> pages 295-312. </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. Cell projection and splatting have been used for irregular grids in software <ref> [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] </ref> and hardware [ST90, VGW93, YRL + 96].
Reference: [KT96] <author> Alan D. Kalvin and Russ H. Taylor. Superfaces: </author> <title> Polyhedral approximations with bounded error. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 16(3) </volume> <pages> 64-77, </pages> <month> May </month> <year> 1996. </year> <note> (An erratum with correct figures appears in the July 1996 issue). 11 </note>
Reference-contexts: The old vertices are then removed one by one, making local adjustments to preserve the topology of the surface. Other algorithms have been presented which are also based on the incremental removal of vertices, followed by a re-triangulation <ref> [SZL92, KT96] </ref>. Some recent vertex-removal algorithms have focused on more sophisticated error control [CCMS96, KLS96]. Other methods group planar polygons, and replace them with fewer, larger, polygons [HH93, RB93], or remove polygons by iteratively collapsing edges [HDD + 93, Hop96].
Reference: [Lev92] <author> Marc Levoy. </author> <title> Volume rendering using the fourier projection-slice theorem. </title> <booktitle> In Proceedings of Graphics Interface '92, </booktitle> <address> Vancouver, B.C., </address> <year> 1992. </year> <note> Also Stanford University Technical Report CSL-TR-92-521. </note>
Reference-contexts: Most research has addressed only rectilinear (regular) grids, and most previously reported acceleration and optimization techniques apply only to such grids. New methods such as Fourier transforms <ref> [Lev92, Mal93] </ref>, shear-warp transforms [LL94], and 3D texture maps [CCF94] suffer this limitation. However, many applications create non-rectilinear volume data sets, such as computational fluid dynamics (CFD), finite element analysis (FEM), and atmospheric and oceanographic measurements.
Reference: [LH91] <author> David Laur and Pat Hanrahan. </author> <title> Hierarchical splatting: A progressive refinement algorithm for volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 285-288, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Volume rendering algorithms which are slice-based allow the user to define the number of slices used (for instance [YRL + 96]) and can be seen as a limited form of multi-resolution rendering. We can also achieve multiple levels of detail by modeling the data itself in a hierarchical fashion <ref> [LH91, WVG94, WVGTG96] </ref>. Hierarchical data models allow standard volume rendering methods to work on volumes of different sizes. Building hierarchies is most effective for regular grids, since the hierarchical decomposition can easily follow cell boundaries.
Reference: [LH96] <author> Marc Levoy and Pat Hanrahan. </author> <title> Light field rendering. </title> <booktitle> In Proceedings of SIGGRAPH, Computer Graphics, Annual Conference Series, </booktitle> <pages> pages 31-42, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: If we are to decimate volumes successfully for direct volume rendering, we must be able to analyze the effect of decimation on the light field produced by the volume. The notion of a light field was introduced as an image-based rendering architecture <ref> [LH96, GGSC96] </ref>. Levoy and Hanrahan defined an object's light field as a 4D function of position and direction in regions of free space. This function describes the light emitted by the object. A single rendered image is a 2D slice of this 4D function. <p> Thus the image from the spherically opposing viewpoint is identical, and need not be computed. The absence of opacity allows us to integrate the density (or other field function) through the volume, producing an approximate 3D analog of the Radon transformation <ref> [Mal93, CCF94, LH96] </ref>. 7 Method Blunt Fin Lockheed Fighter Space Shuttle Uniform by Range 0.089 0.056 0.061 Uniform by Histogram 0.117 0.042 0.040 Histogram Curvature 0.062 0.048 0.004 Histogram Features 0.058 0.065 0.031 Transfer Function 0.074 0.071 0.022 Table 1: Errors computed using the image-based error metric, as discussed in section
Reference: [LKR + 96] <author> Peter Lindstrom, David Koller, William Ribarsky, Larry F. Hodges, Nick Faust, and Gre-ogry A. Turner. </author> <title> Real-time, continuous level of detail rendering of height fields. </title> <booktitle> In Proceedings of SIGGRAPH, Computer Graphics, Annual Conference Series, </booktitle> <pages> pages 109-118, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Garland and Heckbert present an overview of these techniques [GH95], most of which center around creating a Delauney triangularization of the data at various error levels. More recently, work in this area has involved generating the display in real-time and maintaining continuity between different levels of detail <ref> [LKR + 96] </ref>. When dealing with an arbitrary surface, the problem becomes more complicated because the surface cannot be easily parameterized in a 2D world space.
Reference: [LL94] <author> Philippe Lacroute and Marc Levoy. </author> <title> Fast volume rendering using a shear-warp factorization of the viewing transformation. </title> <booktitle> In Proceedings of SIGGRAPH, Computer Graphics, Annual Conference Series, </booktitle> <pages> pages 451-458, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Most research has addressed only rectilinear (regular) grids, and most previously reported acceleration and optimization techniques apply only to such grids. New methods such as Fourier transforms [Lev92, Mal93], shear-warp transforms <ref> [LL94] </ref>, and 3D texture maps [CCF94] suffer this limitation. However, many applications create non-rectilinear volume data sets, such as computational fluid dynamics (CFD), finite element analysis (FEM), and atmospheric and oceanographic measurements.
Reference: [Luc92] <author> Bruce Lucas. </author> <title> A scientific visualization renderer. </title> <booktitle> In Visualization '92, </booktitle> <pages> pages 227-233. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: Cell projection and splatting have been used for irregular grids in software [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] and hardware [ST90, VGW93, YRL + 96]. Instead of projecting cells, several algorithms have been developed which project faces <ref> [Luc92, Cha93, WVGTG96] </ref>. 2 2.2 Surface Decimation While there has not been a lot of work in the decimation of volumes, there have been many papers addressing the issue of decimation of surface meshes.
Reference: [Ma95] <author> Kwan-Liu Ma. </author> <title> Parallel volume ray-casting for unstructured grid data on distributed memory architectures. </title> <booktitle> In 1995 Parallel Rendering Symposium, </booktitle> <pages> pages 23-30. </pages> <publisher> ACM, </publisher> <year> 1995. </year>
Reference-contexts: Multiple, overlapping, and intersecting grids may be used to sample space around very complex shapes [BCFM + 89]. Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully <ref> [Gar90, Cha92, Use93, Ma95] </ref>. Cell projection and splatting have been used for irregular grids in software [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] and hardware [ST90, VGW93, YRL + 96].
Reference: [Mal93] <author> Tom Malzbender. </author> <title> Fourier volume rendering. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 12(3) </volume> <pages> 233-250, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Most research has addressed only rectilinear (regular) grids, and most previously reported acceleration and optimization techniques apply only to such grids. New methods such as Fourier transforms <ref> [Lev92, Mal93] </ref>, shear-warp transforms [LL94], and 3D texture maps [CCF94] suffer this limitation. However, many applications create non-rectilinear volume data sets, such as computational fluid dynamics (CFD), finite element analysis (FEM), and atmospheric and oceanographic measurements. <p> Thus the image from the spherically opposing viewpoint is identical, and need not be computed. The absence of opacity allows us to integrate the density (or other field function) through the volume, producing an approximate 3D analog of the Radon transformation <ref> [Mal93, CCF94, LH96] </ref>. 7 Method Blunt Fin Lockheed Fighter Space Shuttle Uniform by Range 0.089 0.056 0.061 Uniform by Histogram 0.117 0.042 0.040 Histogram Curvature 0.062 0.048 0.004 Histogram Features 0.058 0.065 0.031 Transfer Function 0.074 0.071 0.022 Table 1: Errors computed using the image-based error metric, as discussed in section
Reference: [MHC90] <author> Nelson Max, Pat Hanrahan, and Roger Crawfis. </author> <title> Area and volume coherence for efficient visualization of 3d scalar functions. </title> <booktitle> Computer Graphics (ACM Workshop on Volume Visualization), </booktitle> <volume> 24(5) </volume> <pages> 27-33, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. Cell projection and splatting have been used for irregular grids in software <ref> [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] </ref> and hardware [ST90, VGW93, YRL + 96].
Reference: [MHK95] <author> Xiaoyang Mao, Lichan Hong, and A. Kaufman. </author> <title> Splatting of curvilinear volumes. </title> <booktitle> In Visualization '95, </booktitle> <pages> pages 61-68. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1995. </year>
Reference-contexts: Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. Cell projection and splatting have been used for irregular grids in software <ref> [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] </ref> and hardware [ST90, VGW93, YRL + 96].
Reference: [RB93] <author> J. Rossignac and P. Borrel. </author> <title> Multi-resolution 3D approximations for rendering complex scenes. </title> <editor> In B. Falcidieno and T. L. Kunii, editors, </editor> <booktitle> Geometric Modeling in Computer Graphics, </booktitle> <pages> pages 455-465. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Other algorithms have been presented which are also based on the incremental removal of vertices, followed by a re-triangulation [SZL92, KT96]. Some recent vertex-removal algorithms have focused on more sophisticated error control [CCMS96, KLS96]. Other methods group planar polygons, and replace them with fewer, larger, polygons <ref> [HH93, RB93] </ref>, or remove polygons by iteratively collapsing edges [HDD + 93, Hop96]. Recent edge-collapsing algorithms have addressed edge selection, and allow the mesh to be non-uniformly decimated [AS96, RR96, XV96]. Another way to achieve non-uniform decimation is by using simplification envelopes [CVM + 96].
Reference: [RR96] <author> Remi Ronfard and Jarek Rossignac. </author> <title> Full-range approximation of triangulated polyhedra. </title> <journal> Computer Graphics Forum (EUROGRAPHICS '96), </journal> <volume> 15(3), </volume> <year> 1996. </year>
Reference-contexts: Other methods group planar polygons, and replace them with fewer, larger, polygons [HH93, RB93], or remove polygons by iteratively collapsing edges [HDD + 93, Hop96]. Recent edge-collapsing algorithms have addressed edge selection, and allow the mesh to be non-uniformly decimated <ref> [AS96, RR96, XV96] </ref>. Another way to achieve non-uniform decimation is by using simplification envelopes [CVM + 96]. An envelope consists of an inner and outer surface, and the simplification is constrained to fall between these two surfaces.
Reference: [SFYC96] <author> Raj Shekhar, Elias Fayyad, Roni Yagel, and J. Fredrick Cornhill. </author> <title> Octree-based decimation of marchin cubes surfaces. </title> <booktitle> In Visualization '96, </booktitle> <pages> pages 335-344. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: An envelope consists of an inner and outer surface, and the simplification is constrained to fall between these two surfaces. Volumetric methods can also be employed by voxelizing the original mesh into a multi-resolution hierarchy, and extracting iso-surfaces of varying complexity <ref> [HHVW96, SFYC96] </ref>. A very different approach to providing many different levels of detail from a complex model is a theoretically sound framework for multi-resolution models [EDD + 95, CPD + 96].
Reference: [SMK96] <author> Claudio Silva, Joseph S. B. Mitchell, and Arie E. Kaufman. </author> <title> Fast rendering of irregular grids. </title> <booktitle> In 1996 Symposium on Volume Visualization, </booktitle> <pages> pages 15-22. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. Cell projection and splatting have been used for irregular grids in software <ref> [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] </ref> and hardware [ST90, VGW93, YRL + 96].
Reference: [ST90] <author> Peter Shirley and Allan Tuchman. </author> <title> A polygonal approximation to direct scalar volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 63-70, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. Cell projection and splatting have been used for irregular grids in software [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] and hardware <ref> [ST90, VGW93, YRL + 96] </ref>.
Reference: [SZL92] <author> Williams J. Schroeder, Jonathan A. Zarge, and William E. Lorensen. </author> <title> Decimation of triangle meshes. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 24(2) </volume> <pages> 65-70, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The old vertices are then removed one by one, making local adjustments to preserve the topology of the surface. Other algorithms have been presented which are also based on the incremental removal of vertices, followed by a re-triangulation <ref> [SZL92, KT96] </ref>. Some recent vertex-removal algorithms have focused on more sophisticated error control [CCMS96, KLS96]. Other methods group planar polygons, and replace them with fewer, larger, polygons [HH93, RB93], or remove polygons by iteratively collapsing edges [HDD + 93, Hop96].
Reference: [Tur92] <author> Greg Turk. </author> <title> Re-tiling polygonal surfaces. </title> <booktitle> In Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> volume 26, </volume> <pages> pages 55-64, </pages> <month> July </month> <year> 1992. </year> <month> 12 </month>
Reference-contexts: Later algorithms have built on these two fundamental concepts. Turk presented a method called re-tiling <ref> [Tur92] </ref>. Re-tiling re-samples the surface uniformly, and adds new vertices to the original mesh. The old vertices are then removed one by one, making local adjustments to preserve the topology of the surface.
Reference: [Use93] <author> Sam Uselton. </author> <title> Parallelizing VOLVIS for multiprocessor SGI workstations. </title> <type> Technical Report RNR-93-013, </type> <institution> NAS-NASA Ames Research Center, Moffett Field, </institution> <address> CA, </address> <year> 1993. </year>
Reference-contexts: Multiple, overlapping, and intersecting grids may be used to sample space around very complex shapes [BCFM + 89]. Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully <ref> [Gar90, Cha92, Use93, Ma95] </ref>. Cell projection and splatting have been used for irregular grids in software [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] and hardware [ST90, VGW93, YRL + 96].
Reference: [VGK96] <author> Allen Van Gelder and Kwansik Kim. </author> <title> Direct volume rendering with shading via three-dimensional textures. </title> <booktitle> In 1996 Symposium on Volume Visualization, </booktitle> <pages> pages 23-30. </pages> <publisher> ACM, </publisher> <month> Oc-tober </month> <year> 1996. </year>
Reference-contexts: If a single gray-scale ramp were used, the free-stream data would obliterate any interesting features. The sixteen views are generated by tessellating a sphere into 60 congruent triangles <ref> [VGK96] </ref>, and using the vertices of the triangles as the viewing directions. A ray from each vertex through the center of the sphere indicates a viewing direction.
Reference: [VGW93] <author> Allen Van Gelder and Jane Wilhelms. </author> <title> Rapid exploration of curvilinear grids using direct volume rendering. In Visualization '93, </title> <address> San Jose, CA, </address> <month> October </month> <year> 1993. </year> <note> IEEE. (extended abstract) Also, </note> <institution> University of California technical report UCSC-CRL-93-02. </institution>
Reference-contexts: A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. Cell projection and splatting have been used for irregular grids in software [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] and hardware <ref> [ST90, VGW93, YRL + 96] </ref>.
Reference: [Wil92] <author> Peter Williams. </author> <title> Interactive splatting of nonrectilinear volumes. </title> <booktitle> In Visualization '92, </booktitle> <pages> pages 37-44. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: Our research concentrates on rendering such irregular data. A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. Cell projection and splatting have been used for irregular grids in software <ref> [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] </ref> and hardware [ST90, VGW93, YRL + 96].
Reference: [WVG94] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> Multi-dimensional trees for controlled volume rendering and compression. </title> <booktitle> In ACM Symposium on Volume Visualization 1994, </booktitle> <address> Washington, D.C., </address> <month> October </month> <year> 1994. </year> <note> See also technical report UCSC-CRL-94-02. </note>
Reference-contexts: Volume rendering algorithms which are slice-based allow the user to define the number of slices used (for instance [YRL + 96]) and can be seen as a limited form of multi-resolution rendering. We can also achieve multiple levels of detail by modeling the data itself in a hierarchical fashion <ref> [LH91, WVG94, WVGTG96] </ref>. Hierarchical data models allow standard volume rendering methods to work on volumes of different sizes. Building hierarchies is most effective for regular grids, since the hierarchical decomposition can easily follow cell boundaries.
Reference: [WVGTG96] <author> Jane Wilhelms, Allen Van Gelder, Paul Tarantino, and Jonathon Gibbs. </author> <title> Parallel hierarchical direct volume rendering for irregular and multiple grids. </title> <booktitle> In IEEE Visualization '96 Conference Proceedings, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: This requires a direct volume renderer that can handle arbitrary grids. To achieve this, we deal exclusively with polygons instead of cells, using a volume rendering approach described previously <ref> [WVGTG96] </ref>. This polygon-based rendering technique and the general decimation algorithm are described in sections 3 and 3.1. * In section 3.2, we present several methods of guiding the decimation. <p> Cell projection and splatting have been used for irregular grids in software [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] and hardware [ST90, VGW93, YRL + 96]. Instead of projecting cells, several algorithms have been developed which project faces <ref> [Luc92, Cha93, WVGTG96] </ref>. 2 2.2 Surface Decimation While there has not been a lot of work in the decimation of volumes, there have been many papers addressing the issue of decimation of surface meshes. <p> Volume rendering algorithms which are slice-based allow the user to define the number of slices used (for instance [YRL + 96]) and can be seen as a limited form of multi-resolution rendering. We can also achieve multiple levels of detail by modeling the data itself in a hierarchical fashion <ref> [LH91, WVG94, WVGTG96] </ref>. Hierarchical data models allow standard volume rendering methods to work on volumes of different sizes. Building hierarchies is most effective for regular grids, since the hierarchical decomposition can easily follow cell boundaries. <p> Using hierarchies also adds a significant memory overhead. 3 Polygon-Based Volume Rendering and Decimation For rendering decimated volumes, we use a direct volume rendering system which is based on a generalized software scan conversion of polygons, rather than the more conventional ray-casting, projection, or splatting of cells <ref> [WVGTG96] </ref>. This difference is motivated by the fact that any cell type can be decomposed into a set of bounding polygons. This method also solves two key problems which are important to this work. First, it is able to render overlapping cells which occur in multi-grid data sets. <p> The scan conversion algorithm generalizes traditional polygon scan-line methods in that it renders semi-transparent regions of space between polygons, as well as opaque surfaces. This method requires no graphics hardware, and produces excellent quality images. For more details on the rendering algorithm, and comparisons to other methods, see <ref> [WVGTG96] </ref>. The rendering time is based on the number of polygons in the volume, after culling out those which don't lie in the viewing frustum and those smaller than one pixel. To achieve faster rendering times, we need to further reduce the number of polygons used to render the image.
Reference: [XV96] <author> Julie C. Xia and Amitabh Varshney. </author> <title> Dynamic view-dependent simplification for polygonal models. </title> <booktitle> In Visualization '96, </booktitle> <pages> pages 327-334. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: Other methods group planar polygons, and replace them with fewer, larger, polygons [HH93, RB93], or remove polygons by iteratively collapsing edges [HDD + 93, Hop96]. Recent edge-collapsing algorithms have addressed edge selection, and allow the mesh to be non-uniformly decimated <ref> [AS96, RR96, XV96] </ref>. Another way to achieve non-uniform decimation is by using simplification envelopes [CVM + 96]. An envelope consists of an inner and outer surface, and the simplification is constrained to fall between these two surfaces.
Reference: [YRL + 96] <author> Roni Yagel, David M. Reed, Asish Law, Po-Wen Shih, and Naeem Shareef. </author> <title> Hardware assisted volume rendering of unstructured grids by incremental slicing. </title> <booktitle> In 1996 Symposium on Volume Visualization, </booktitle> <pages> pages 55-62. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1996. </year> <month> 13 </month>
Reference-contexts: A number of algorithms have been developed for irregular grids. Ray-casting general irregular grids is complicated and slow, though it does parallelize beautifully [Gar90, Cha92, Use93, Ma95]. Cell projection and splatting have been used for irregular grids in software [MHC90, Gie92, Koy92, Wil92, GP93, MHK95, SMK96] and hardware <ref> [ST90, VGW93, YRL + 96] </ref>. <p> Of course, instead of decimating the volume before it is rendered, some rendering techniques intrinsically allow for multiple levels of detail. Volume rendering algorithms which are slice-based allow the user to define the number of slices used (for instance <ref> [YRL + 96] </ref>) and can be seen as a limited form of multi-resolution rendering. We can also achieve multiple levels of detail by modeling the data itself in a hierarchical fashion [LH91, WVG94, WVGTG96]. Hierarchical data models allow standard volume rendering methods to work on volumes of different sizes.
References-found: 50

