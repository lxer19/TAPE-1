URL: ftp://ftp.mathcs.emory.edu/pub/cstr/CSTR940101.ps
Refering-URL: http://www.mathcs.emory.edu/pious.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: moyer@mathcs.emory.edu  vss@mathcs.emory.edu  
Title: A Parallel I/O System for High-Performance Distributed Computing  
Author: Steven A. Moyer and V. S. Sunderam 
Date: January 1994  
Address: Atlanta, GA 30322, USA  
Affiliation: Department of Math and Computer Science Emory University,  
Pubnum: Computer Science Technical Report CSTR-940101  
Abstract: fl Research supported by the National Science Foundation, under award CCR-9118787, the U. S. Department of Energy, under grant DE-FG05-91ER25105, and the Office of Naval Research, under grant N00014-93-1-0278. y Revised version of this paper to appear in the Proceedings of the IFIP WG10.3 Working Conference on Programming Environments for Massively Parallel Distributed Systems, April, 1994. 
Abstract-found: 1
Intro-found: 1
Reference: [ABC + 90] <author> M. Arango, D. Berndt, N. Carriero, D. Gelernter, and D. Gilmore. </author> <title> Adventures with network Linda. </title> <journal> Supercomputer Review, </journal> <volume> 10(3) </volume> <pages> 42-46, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Programming environments for developing distributed applications with groups of cooperating processes are becoming increasingly important for cost-effective, high-performance computing. Existing parallel-distributed computing environments, such as PVM [Sun90b] and Linda <ref> [ABC + 90] </ref>, provide interprocess communication, synchronization and concur-rency control, fault tolerance, and process management. However, many parallel applications require or could benefit from a unified parallel I/O system that such environments generally lack.
Reference: [BHG87] <author> Philip Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: Furthermore, the architecture is relatively free of assumptions concerning the underlying transport and storage subsystems. 4 Transactions in PIOUS Parallel I/O operations in PIOUS are performed within the context of transactions <ref> [BHG87] </ref>, transparently to the user, to provide sequential consistency [Lam79] of access and tolerance of system failures. <p> Applications requiring fault tolerance can access files in the lower-performance, but guaranteed consistent, stable mode. The current PIOUS implementation does not provide applications with fault tolerance of media failures. Media fault tolerance is achieved by data replication on independent devices, either as multiple file copies <ref> [BHG87] </ref> or as computed parity information [PGK88]. Such techniques are independent of the file system architecture, provided that multiple independent storage devices can be accessed. 5.4 PIOUS Interface Definition A PIOUS user interface can now be defined that supports the file model and usage semantics discussed above.
Reference: [CFPB93] <author> Peter F. Corbett, Dror G. Feitelson, Jean-Pierre Prost, and Sandra J. Baylor. </author> <title> Parallel access to files in the Vesta file system. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 472-481, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Parallel machines commonly provide a parallel file system interface; familiar examples include the Intel CFS [Pie89] and nCUBE Parallel I/O System [DdR92]. Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta <ref> [CFPB93] </ref> multicomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access. Swift [CL91] and Zebra [HO93] are research network file systems that implement disk striping across multiple servers with RAID-4/5 [PGK88] fault tolerance of media failures.
Reference: [CL91] <author> Luis-Felipe Cabrera and Darrell D. E. Long. Swift: </author> <title> Using distributed disk striping to provide high I/O data rates. </title> <journal> Computing Systems, </journal> <volume> 4(4) </volume> <pages> 405-436, </pages> <month> Fall </month> <year> 1991. </year>
Reference-contexts: Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta [CFPB93] multicomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access. Swift <ref> [CL91] </ref> and Zebra [HO93] are research network file systems that implement disk striping across multiple servers with RAID-4/5 [PGK88] fault tolerance of media failures. Zebra is unique in that a log-structured file system is employed to allow striping on a per client basis.
Reference: [Cro89] <author> Thomas W. Crockett. </author> <title> File concepts for parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '89, </booktitle> <pages> pages 574-579, </pages> <year> 1989. </year>
Reference-contexts: The set of file views currently supported in PIOUS is limited, though sufficient to implement a super-set of the common parallel file access patterns identified by Crockett <ref> [Cro89] </ref>. We feel that until further experience is gained with the system, development of a more sophisticated interface is premature. 5.3 Consistency and Fault Tolerance Semantics PIOUS provides all processes sequential consistency of access to files opened under any view.
Reference: [DdR92] <author> Erik DeBenedictis and Juan Miguel del Rosario. </author> <title> nCUBE parallel I/O software. </title> <booktitle> In Eleventh Annual IEEE International Phoenix Conference on Computers and Communications (IPCCC), </booktitle> <pages> pages 0117-0124, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: A brief overview of this related work is presented below. Parallel machines commonly provide a parallel file system interface; familiar examples include the Intel CFS [Pie89] and nCUBE Parallel I/O System <ref> [DdR92] </ref>. Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta [CFPB93] multicomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access.
Reference: [HO93] <author> John H. Hartman and John K. Ousterhout. </author> <title> The Zebra striped network file system. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 29-43, </pages> <year> 1993. </year>
Reference-contexts: Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta [CFPB93] multicomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access. Swift [CL91] and Zebra <ref> [HO93] </ref> are research network file systems that implement disk striping across multiple servers with RAID-4/5 [PGK88] fault tolerance of media failures. Zebra is unique in that a log-structured file system is employed to allow striping on a per client basis.
Reference: [Ins88] <institution> The Institute of Electrical and Electronics Engineers, Inc. </institution> <month> POSIX: </month> <title> IEEE Standard Portable Operating System Interface for Computer Environments, </title> <booktitle> 1988. IEEE Std 1003.1-1988. </booktitle>
Reference-contexts: For portability of sequential programs, a subset of the PIOUS interface is POSIX <ref> [Ins88] </ref> equivalent.
Reference: [Kot93] <author> David Kotz. </author> <title> Multiprocessor file system interfaces. </title> <booktitle> In Proceedings of the Second International Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 194-201, </pages> <year> 1993. </year>
Reference-contexts: Implementing parafiles on top of a conventional file system necessitates representing each parafile segment as a separate file. Because parafiles are two-dimensional, array and tabular data map naturally. Thus developing parallel scientific, database, and sorting applications, among others, should be greatly simplified. Parafiles are based on Kotz's multifiles <ref> [Kot93] </ref> and McElrath's virtual files [McE93], two segmented file schemes proposed independently.
Reference: [Lam79] <author> Leslie Lamport. </author> <title> How to make a multiprocessor computer that correctly executes multiprocess programs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-28(9):690-691, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: Furthermore, the architecture is relatively free of assumptions concerning the underlying transport and storage subsystems. 4 Transactions in PIOUS Parallel I/O operations in PIOUS are performed within the context of transactions [BHG87], transparently to the user, to provide sequential consistency <ref> [Lam79] </ref> of access and tolerance of system failures. Referring to Figure 1, client library routines act as transaction managers for the data servers participating in a distributed transaction satisfying a user request. 3 Emory University CSTR-940101 The PIOUS architecture defines two distinct transaction types: stable and volatile.
Reference: [McE93] <author> Rodney McElrath. MRJ Inc., </author> <type> Personal Communication, </type> <month> June </month> <year> 1993. </year>
Reference-contexts: Because parafiles are two-dimensional, array and tabular data map naturally. Thus developing parallel scientific, database, and sorting applications, among others, should be greatly simplified. Parafiles are based on Kotz's multifiles [Kot93] and McElrath's virtual files <ref> [McE93] </ref>, two segmented file schemes proposed independently.
Reference: [Mes93] <author> The Message Passing Interface Forum. </author> <title> Document for a Standard Message-Passing Interface (Draft), </title> <month> November </month> <year> 1993. </year>
Reference-contexts: In a later version of the PIOUS interface we intend to explore record support to address this issue. A solution will probably involve a form of record descriptor, such as employed in the MPI <ref> [Mes93] </ref> environment. 10 Emory University CSTR-940101 6 Related Work The PIOUS architecture has roots in a number of network and parallel computer file systems. A brief overview of this related work is presented below.
Reference: [PGK88] <author> David Patterson, Garth Gibson, and Randy Katz. </author> <title> A case for redundant arrays of inexpensive disks (RAID). </title> <booktitle> In ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 109-116, </pages> <month> June </month> <year> 1988. </year> <institution> 13 Emory University CSTR-940101 </institution>
Reference-contexts: The current PIOUS implementation does not provide applications with fault tolerance of media failures. Media fault tolerance is achieved by data replication on independent devices, either as multiple file copies [BHG87] or as computed parity information <ref> [PGK88] </ref>. Such techniques are independent of the file system architecture, provided that multiple independent storage devices can be accessed. 5.4 PIOUS Interface Definition A PIOUS user interface can now be defined that supports the file model and usage semantics discussed above. <p> This feature allows the user to choose the set of data servers that best meet the needs of the application; e.g. a set of RAID <ref> [PGK88] </ref> servers for media fault tolerance. Pious open () is a POSIX equivalent open function that results in Unix file semantics in most cases. Pious open ( path, oflag, mode) is equivalent to pious pfopen ( NULL, path, INDEPENDENT, MAPDEFAULT, VOLATILE, oflag, mode). <p> The IBM Vesta [CFPB93] multicomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access. Swift [CL91] and Zebra [HO93] are research network file systems that implement disk striping across multiple servers with RAID-4/5 <ref> [PGK88] </ref> fault tolerance of media failures. Zebra is unique in that a log-structured file system is employed to allow striping on a per client basis. However, Swift and Zebra are not parallel file systems as they lack support for parallel application development.
Reference: [Pie89] <author> Paul Pierce. </author> <title> A concurrent file system for a highly parallel mass storage system. </title> <booktitle> In Fourth Conference on Hypercube Concurrent Computers and Applications, </booktitle> <pages> pages 155-160, </pages> <year> 1989. </year>
Reference-contexts: A brief overview of this related work is presented below. Parallel machines commonly provide a parallel file system interface; familiar examples include the Intel CFS <ref> [Pie89] </ref> and nCUBE Parallel I/O System [DdR92]. Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance.
Reference: [Sal87] <author> John Salmon. CUBIX: </author> <title> Programming hypercubes without programming hosts. </title> <booktitle> In Proceedings of the Second Conference on Hypercube Multiprocessors, </booktitle> <pages> pages 3-9, </pages> <year> 1987. </year>
Reference-contexts: Zebra is unique in that a log-structured file system is employed to allow striping on a per client basis. However, Swift and Zebra are not parallel file systems as they lack support for parallel application development. Express is a CUBIX-model <ref> [Sal87] </ref> parallel computing environment that implements a parallel file system interface. However, in network environments, Express does not employ data declustering to aggregate the performance of distributed resources. PIOUS extends the work of existing parallel file systems by incorporating transactions as a generalized concurrency control and fault tolerance mechanism.
Reference: [Sun90a] <author> Sun Microsystems, Inc. </author> <title> Network Programming Guide, 1990. External Data Representation Standard: Protocol Specification. </title>
Reference-contexts: While this is sufficient in an environment with a homogeneous data representation, in a heterogeneous data environment the burden is placed on the application to convert data to some universal format such as XDR <ref> [Sun90a] </ref>. In a later version of the PIOUS interface we intend to explore record support to address this issue.
Reference: [Sun90b] <author> V. S. Sunderam. </author> <title> PVM: A framework for parallel distributed computing. </title> <journal> Con-currency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year> <month> 14 </month>
Reference-contexts: 1 Introduction Programming environments for developing distributed applications with groups of cooperating processes are becoming increasingly important for cost-effective, high-performance computing. Existing parallel-distributed computing environments, such as PVM <ref> [Sun90b] </ref> and Linda [ABC + 90], provide interprocess communication, synchronization and concur-rency control, fault tolerance, and process management. However, many parallel applications require or could benefit from a unified parallel I/O system that such environments generally lack.
References-found: 17

