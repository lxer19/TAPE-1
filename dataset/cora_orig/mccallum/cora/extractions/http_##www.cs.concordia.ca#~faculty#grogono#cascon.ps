URL: http://www.cs.concordia.ca/~faculty/grogono/cascon.ps
Refering-URL: http://www.cs.concordia.ca/~faculty/grogono/techpubs.html
Root-URL: http://www.cs.concordia.ca
Email: grogono@cs.concordia.ca  
Title: Designing for Change lifetime of a useful program, its users' requirements change and the code
Author: Peter Grogono 
Note: During the  increasingly brittle, and eventually can no  
Address: 1455 de Maisonneuve Blvd West Montreal, Quebec H3G 1M8  
Affiliation: Department of Computer Science Concordia University  
Abstract: The ambition of every designer is the software equivalent of a cathedral. But maintenance programmers are more comfortable in a farmhouse than a cathedral. We argue that current design methodologies are oriented towards cathedrals, and we propose object oriented design techniques and tools that are suitable for farmhouses. We describe a design tool that supports evolutionary object oriented design. Designers can create and modify designs, view them in textual and graphical form, check their internal consistency, and match them to requirements and code. To accomplish this, we use text, tables, and diagrams with multiple levels of formality. The tool processes formal entities completely (as a compiler can process source code completely); it stores, retrieves, and displays informal enti ties (whereas a compiler discards comments); and it can perform limited operations on semiformal entities. Our work borrows from formal specification techniques, but is intended for software that evolves. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mehmet Aksit and Lodewijk Bergmans. </author> <title> Obstacles in object-oriented software development. </title> <booktitle> In Proc. ACM Conf. on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 341-358, </pages> <year> 1992. </year>
Reference-contexts: Although these criticisms cannot simply be dismissed, they are symptomatic of a paradigm shift [15]. In moving to object orientation, we must shed some of the wisdom of earlier paradigms. Aksit and Bergmans describe a number of problems that they encountered while applying published design techniques <ref> [1] </ref>. Several of the problems that they report can be attributed to inadequate design methodologies: difficulties arise in problem decomposition, identifying subsystems, conflicts between inheritance hierarchies and subsystems, and so on.
Reference: [2] <author> Grady Booch. </author> <title> Object Oriented Design with Applications. </title> <address> Benjamin/Cummings, </address> <year> 1991. </year>
Reference-contexts: Messages in object oriented programs are procedure calls with a small overhead caused by dynamic dispatching.) Design methodologies based on these ideas have been proposed by a number of researchers <ref> [2, 5, 6, 7, 14, 16, 17, 19] </ref>. The number of superficially similar notations with common underlying concepts suggests an evolving paradigm that will require several years to reach maturity. The characteristics of object oriented programming that affect design include the following. .
Reference: [3] <author> Frederick P. Brooks. </author> <title> The Mythical Man-Month. </title> <publisher> Addison-Wesley, </publisher> <year> 1978. </year>
Reference-contexts: Textbook techniques for designing software stand in direct contrast to this view of development. The process of requirements, design, and implementation seems more suited to the construction of cathedrals <ref> [3, page 40] </ref> than to farmhouses. The requirements of a cathedral do not change over time, and cathedral maintenance is directed towards keeping the structure standing rather than adapting it to changing user needs.
Reference: [4] <author> Raymond J. A. Buhr and Ronald S. Cas-selman. </author> <title> Architectures with pictures. </title> <booktitle> In 6 Proc. ACM Conf. on Object-Oriented Pro--gramming Systems, Languages and Applications, </booktitle> <pages> pages 466-483, </pages> <year> 1992. </year>
Reference-contexts: Developing methods for describing the dynamic model is one of our current activities. Although state-charts [11] are popular for dynamic modelling, other methods may be more suitable for object oriented systems. We are currently considering time-threads <ref> [4] </ref> and use cases [14]. A design, then, is a collection of classes. Classes may be independent, but are usually components of subsystems, frameworks, and inheritance graphs. A class may be described at any level of detail. The minimal description of a class provides just its name.
Reference: [5] <author> P. Coad and E. Yourdon. </author> <title> Object-Oriented Analysis. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: Messages in object oriented programs are procedure calls with a small overhead caused by dynamic dispatching.) Design methodologies based on these ideas have been proposed by a number of researchers <ref> [2, 5, 6, 7, 14, 16, 17, 19] </ref>. The number of superficially similar notations with common underlying concepts suggests an evolving paradigm that will require several years to reach maturity. The characteristics of object oriented programming that affect design include the following. .
Reference: [6] <author> Derek Coleman et al. </author> <title> Object-Oriented Development: the Fusion Method. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: Messages in object oriented programs are procedure calls with a small overhead caused by dynamic dispatching.) Design methodologies based on these ideas have been proposed by a number of researchers <ref> [2, 5, 6, 7, 14, 16, 17, 19] </ref>. The number of superficially similar notations with common underlying concepts suggests an evolving paradigm that will require several years to reach maturity. The characteristics of object oriented programming that affect design include the following. .
Reference: [7] <author> Dennis de Champeaux, Douglas Lea, and Penelope Faure. </author> <title> Object-Oriented System Development. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: Messages in object oriented programs are procedure calls with a small overhead caused by dynamic dispatching.) Design methodologies based on these ideas have been proposed by a number of researchers <ref> [2, 5, 6, 7, 14, 16, 17, 19] </ref>. The number of superficially similar notations with common underlying concepts suggests an evolving paradigm that will require several years to reach maturity. The characteristics of object oriented programming that affect design include the following. .
Reference: [8] <author> A. Goldberg and D. Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: Objects in the problem domain are mapped to "software objects" in the solution domain. Actions in the problem domain are simulated by messages exchanged by the software objects. (The term "message", introduced with SmallTalk <ref> [8] </ref>, is used metaphorically. Messages in object oriented programs are procedure calls with a small overhead caused by dynamic dispatching.) Design methodologies based on these ideas have been proposed by a number of researchers [2, 5, 6, 7, 14, 16, 17, 19].
Reference: [9] <author> Peter Grogono. </author> <title> Issues in the design of an object oriented programming language. </title> <journal> Structured Programming, </journal> <volume> 12(1) </volume> <pages> 1-15, </pages> <month> Jan-uary </month> <year> 1991. </year>
Reference-contexts: Nevertheless, the ability of the tool to process partial designs is crucial to its flexibility. 4 The text provided by the designer has three levels of formality <ref> [9] </ref>. . The first level is informal. Each feature of the design may be decorated with a comment. Comments are not discarded: the tool maintains the connection between feature and comment and displays the com ments on request. . The second level is formal and syntactic.
Reference: [10] <author> Peter Grogono and Benjamin Cheung. </author> <title> A semantic browser for object oriented program development. </title> <booktitle> In Proc. 25th Hawaii International Conference on System Sciences, </booktitle> <volume> Volume II, </volume> <pages> pages 38-45, </pages> <publisher> IEEE, </publisher> <address> Kaui, HI, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: We are currently building a design tool with features that we believe will meet the requirements outlined above. The tool is a continuation of previous work in the development of object oriented software <ref> [10] </ref>. A browser that provides abstract views of source code is essential for the development and maintenance of object programs. The design tool is a browser in reverse: it maintains the abstract views before the code exists.
Reference: [11] <author> David Harel. Statecharts: </author> <title> a visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 213-274, </pages> <year> 1987. </year>
Reference-contexts: The dynamic model cannot, in general, be extracted from the design and must therefore be described separately. Developing methods for describing the dynamic model is one of our current activities. Although state-charts <ref> [11] </ref> are popular for dynamic modelling, other methods may be more suitable for object oriented systems. We are currently considering time-threads [4] and use cases [14]. A design, then, is a collection of classes. Classes may be independent, but are usually components of subsystems, frameworks, and inheritance graphs.
Reference: [12] <author> Wayne Haythorn. </author> <title> What is object-oriented design? J. </title> <booktitle> Object-Oriented Programming, </booktitle> <volume> 7(1) </volume> <pages> 67-78, </pages> <month> March-April </month> <year> 1994. </year>
Reference-contexts: Haythorn argues that conventional object oriented methods may lead to software that is no easier to maintain than software design by older, structured techniques <ref> [12] </ref>. Although these criticisms cannot simply be dismissed, they are symptomatic of a paradigm shift [15]. In moving to object orientation, we must shed some of the wisdom of earlier paradigms. Aksit and Bergmans describe a number of problems that they encountered while applying published design techniques [1].
Reference: [13] <author> Geir Hoydalsvik and Guttorm Sindre. </author> <title> On the purpose of object-oriented analysis. </title> <booktitle> In Proc. ACM Conf. on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 240-255, </pages> <year> 1993. </year>
Reference-contexts: The close correspondence between the problem and implementation domains, one of the alleged advantages of the method, is seen by some as a weakness. Hoydalsvik and Sindre point out that matching real-world objects to computational objects brings concerns that belong to implementation back into the analysis and design phases <ref> [13] </ref>. Haythorn argues that conventional object oriented methods may lead to software that is no easier to maintain than software design by older, structured techniques [12]. Although these criticisms cannot simply be dismissed, they are symptomatic of a paradigm shift [15].
Reference: [14] <author> I. Jacobson, M. Christerson, P. Jonsson, and G. Overgaard. </author> <title> Object-Oriented Software Engineering. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Messages in object oriented programs are procedure calls with a small overhead caused by dynamic dispatching.) Design methodologies based on these ideas have been proposed by a number of researchers <ref> [2, 5, 6, 7, 14, 16, 17, 19] </ref>. The number of superficially similar notations with common underlying concepts suggests an evolving paradigm that will require several years to reach maturity. The characteristics of object oriented programming that affect design include the following. . <p> Developing methods for describing the dynamic model is one of our current activities. Although state-charts [11] are popular for dynamic modelling, other methods may be more suitable for object oriented systems. We are currently considering time-threads [4] and use cases <ref> [14] </ref>. A design, then, is a collection of classes. Classes may be independent, but are usually components of subsystems, frameworks, and inheritance graphs. A class may be described at any level of detail. The minimal description of a class provides just its name.
Reference: [15] <author> Thomas S. Kuhn. </author> <title> The Structure of Scientific Revolutions. </title> <institution> University of Chicago, </institution> <year> 1962. </year>
Reference-contexts: Haythorn argues that conventional object oriented methods may lead to software that is no easier to maintain than software design by older, structured techniques [12]. Although these criticisms cannot simply be dismissed, they are symptomatic of a paradigm shift <ref> [15] </ref>. In moving to object orientation, we must shed some of the wisdom of earlier paradigms. Aksit and Bergmans describe a number of problems that they encountered while applying published design techniques [1].
Reference: [16] <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, and William Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Messages in object oriented programs are procedure calls with a small overhead caused by dynamic dispatching.) Design methodologies based on these ideas have been proposed by a number of researchers <ref> [2, 5, 6, 7, 14, 16, 17, 19] </ref>. The number of superficially similar notations with common underlying concepts suggests an evolving paradigm that will require several years to reach maturity. The characteristics of object oriented programming that affect design include the following. . <p> Object oriented design and functional design are different paradigms. Combining them into a single methodology, as has been suggested [18], is not feasible because they work in opposite directions. Object designs derive their robustness by being matched to the application domain rather than to any particular problem <ref> [16] </ref>. Any workable object oriented design methodology must respect this difference. Current approaches to object oriented design have been criticized on several grounds. The close correspondence between the problem and implementation domains, one of the alleged advantages of the method, is seen by some as a weakness. <p> Current state of the art favours designs based on textual input. Software tools can present the text in various ways: as text, hypertext, tables, and pictures. 3 The Design Format A design incorporates three models of the desired system <ref> [16] </ref>. . The functional model describes the computations performed. A computation may be carried out by a single object or by an ensemble of objects working in harmony. . The data or object model describes the way in which data are represented and managed within the system.
Reference: [17] <author> Sally Shlaer and Stephen J. Mellor. </author> <title> Object-Oriented Systems Analysis: Modeling the World in Data. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: Messages in object oriented programs are procedure calls with a small overhead caused by dynamic dispatching.) Design methodologies based on these ideas have been proposed by a number of researchers <ref> [2, 5, 6, 7, 14, 16, 17, 19] </ref>. The number of superficially similar notations with common underlying concepts suggests an evolving paradigm that will require several years to reach maturity. The characteristics of object oriented programming that affect design include the following. .
Reference: [18] <author> A. Wasserman, P. Pircher, and R. Muller. </author> <title> The object-oriented structured design notation for software design representation. </title> <journal> IEEE Computer, </journal> <volume> 23(3) </volume> <pages> 50-63, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Dynamic binding encourages a flexible development style in which code can be written and executed without final commit ment to representations. Object oriented design and functional design are different paradigms. Combining them into a single methodology, as has been suggested <ref> [18] </ref>, is not feasible because they work in opposite directions. Object designs derive their robustness by being matched to the application domain rather than to any particular problem [16]. Any workable object oriented design methodology must respect this difference.
Reference: [19] <author> Rebecca Wirfs-Brock, Brian Wilkerson, and Lauren Wiener. </author> <title> Designing Object-Oriented Software. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: Messages in object oriented programs are procedure calls with a small overhead caused by dynamic dispatching.) Design methodologies based on these ideas have been proposed by a number of researchers <ref> [2, 5, 6, 7, 14, 16, 17, 19] </ref>. The number of superficially similar notations with common underlying concepts suggests an evolving paradigm that will require several years to reach maturity. The characteristics of object oriented programming that affect design include the following. .
Reference: [20] <author> Edward Yourdon. </author> <title> Decline and Fall of the American Programmer. </title> <publisher> Yourdon Press, </publisher> <year> 1992. </year>
Reference-contexts: Modern graphical user interfaces are powerful, but they cannot yet provide the required transparency. As Yourdon points out, CASE tools move the emphasis from the user's application to "the artistic elegance of the diagrams drawn by the CASE tool" <ref> [20] </ref>. Although computers can generate a visual representation of data that may help a person, they are not yet capable of extracting useful information from a rough sketch|although we may not have long to wait for this capability. Current state of the art favours designs based on textual input.
References-found: 20

