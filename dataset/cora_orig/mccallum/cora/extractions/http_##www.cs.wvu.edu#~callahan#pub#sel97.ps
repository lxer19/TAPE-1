URL: http://www.cs.wvu.edu/~callahan/pub/sel97.ps
Refering-URL: http://www.cs.wvu.edu/~callahan/presents.htm
Root-URL: http://www.cs.wvu.edu
Email: callahan, steve-@ivv.nasa.gov  
Phone: 304-367-8235  
Title: Verification and Validation in a Rapid Software Development Process  
Author: John R. Callahan and Steve M. Easterbrook 
Address: 100 University Drive Fairmont, WV 26554  
Affiliation: NASA Software IV&V Facility  
Abstract: The high cost of software production is driving development organizations to adopt more automated design and analysis methods such as rapid prototyping, computer-aided software engineering (CASE) tools, and high-level code generators. Even developers of safety-critical software systems have adopted many of these new methods while striving to achieve high levels of quality and reliability. While these new methods may enhance productivity and quality in many cases, we examine some of the risks involved in the use of new methods in safety-critical contexts. We examine a case study involving the use of a CASE tool that automatically generates code from high-level system designs. We show that while high-level testing on the system structure is highly desirable, significant risks exist in the automatically generated code and in re-validating releases of the generated code after subsequent design changes. We identify these risks and suggest process improvements that retain the advantages of rapid, automated development methods within the quality and reliability contexts of safety-critical projects. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> McConnell, S., </author> <title> Rapid Development: Taming Wild Software Schedules. </title> <booktitle> 1996, </booktitle> <address> Redmond, WA: </address> <publisher> Microsoft Press. </publisher>
Reference-contexts: 1. Introduction Rapid software development, or rapid application development (RAD), is a broad term characterized by the use of domainspecific computer-aided software engineering (CASE) tools in an iterative process development lifecycle to achieve functional software within short production schedules <ref> [1] </ref>. First, a basic design is sketched out as a collection of interconnected components using various structured methods . This step defines a basic architecture for a system of interconnected components. Next, the behaviors of some these components and their interactions are defined and implemented.
Reference: 2. <author> McConnell, </author> <title> Daily Smoke and Build Test. </title> <journal> IEEE Software, </journal> <note> 1996. 13(4): p. 144. </note>
Reference-contexts: The complementary role of the test group usually offsets this tendency and provides a corrective force to the process. This "build-and-smoke" <ref> [2] </ref> or synch-and-stabilize [3] approach to development is practiced currently in large software development companies because it can deliver functional but incomplete software quickly. Many problems, however, can arise during the process.
Reference: 3. <author> Cusumano, M. and R. Selby, </author> <title> Microsoft Secrets. 1995: </title> <publisher> The Free Press. </publisher> <pages> 512. </pages>
Reference-contexts: The complementary role of the test group usually offsets this tendency and provides a corrective force to the process. This "build-and-smoke" [2] or synch-and-stabilize <ref> [3] </ref> approach to development is practiced currently in large software development companies because it can deliver functional but incomplete software quickly. Many problems, however, can arise during the process.
Reference: 4. <author> Lewis, R., </author> <title> Independent Verification and Validation: A Life Cycle Engineering Process for Quality Software. </title> <booktitle> 1992, </booktitle> <address> New York: </address> <publisher> John Wiley & Sons. </publisher> <pages> 356. </pages>
Reference-contexts: Verification and Validation IV&V is a systems engineering discipline that applies many technical analysis and testing methods to various development artifacts and processes during all phases of the software development lifecycle <ref> [4] </ref>. Verification is any analysis activity that tries to demonstrate that the product of a phase during development is consistent and complete with respect to the specification before that development phase.
Reference: 5. <author> Garlan, D., G.E. Kaiser, and D. Notkin, </author> <title> Using Tool Abstraction to Compose Systems. j COMPUTER, </title> <booktitle> 1992. 25(6): p. </booktitle> <pages> 30-38. </pages>
Reference-contexts: V&V analysts also play an important role during maintenance because a significant portion of maintenance tasks involve functional enhancements to the behavior, design, and implementation of a system <ref> [5] </ref>. V&Vs primary task is to manage project risk by identifying and monitoring errors throughout the development and maintenance process.
Reference: 6. <author> Callahan, J. and G. Sabolish. </author> <title> A Process Improvement Model for Software Verification and Validation. </title> <booktitle> in The 19th Software Engineering Workshop. </booktitle> <year> 1994. </year> <institution> NASA Goddard Space Flight Center, Greenbelt, Md. </institution>
Reference-contexts: For example, a minor design error may be ignored early in the process if the developer believes that a yet-to-be-designed feature will solve the problem. During development and maintenance, IV&V maintains a list of reports on problems found during the development process <ref> [6, 7] </ref>. It tries to verify solutions to these problems and produces reports on new problems when necessary. Such reports come in a wide variety of formats an include items such as change requests (CRs), discrepancy reports (DRs), problem reports (PRs), issue reports (IRs), and issue tracking requests (ITRs).
Reference: 7. <author> Callahan, J., T. Zhou, and R. Wood. </author> <title> Software Risk Management through Independent Verification and Validation. </title> <booktitle> in 4th International Conference on Software Quality (ICSQ 94). 1994. </booktitle> <address> McLean, Va. </address>
Reference-contexts: For example, a minor design error may be ignored early in the process if the developer believes that a yet-to-be-designed feature will solve the problem. During development and maintenance, IV&V maintains a list of reports on problems found during the development process <ref> [6, 7] </ref>. It tries to verify solutions to these problems and produces reports on new problems when necessary. Such reports come in a wide variety of formats an include items such as change requests (CRs), discrepancy reports (DRs), problem reports (PRs), issue reports (IRs), and issue tracking requests (ITRs).
References-found: 7

