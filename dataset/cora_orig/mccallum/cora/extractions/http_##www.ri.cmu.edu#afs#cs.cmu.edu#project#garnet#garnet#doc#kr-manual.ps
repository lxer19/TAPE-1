URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/garnet/garnet/doc/kr-manual.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/garnet/garnet/doc/
Root-URL: 
Title: KR: Constraint-Based Knowledge Representation  
Author: Dario Giuse 
Affiliation: Carnegie Mellon University  
Note: Copyright 1994  
Date: December 1994  
Abstract: KR is a very efficient knowledge representation language implemented in Common Lisp. It provides powerful frame-based knowledge representation with user-defined inheritance and relations, and an integrated object-oriented programming system. In addition, the system supports a constraint maintenance mechanism which allows any value to be computed from a combination of other values. KR is simple and compact and does not include some of the more complex functionality often found in other knowledge representation systems. Because of its simplicity, however, it is highly optimized and offers good performance. These qualities make it suitable for many applications that require a mixture of good performance and flexible knowledge representation. This research was sponsored by NCCOSC under Contract No. N66001-94-C-6037, Arpa Order No. B326. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of NCCOSC or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [Bobrow et al. 89] <author> Bobrow, D.G.; DeMichiel, L.G.; Gabriel, R.P.; Keene, S.E., Kiczales, G.; and Moon, D.A. </author> <title> Common Lisp Object System Specification. </title> <booktitle> LISP and Symbolic Computation </booktitle> 1(3/4):245-394, January, 1989. 
Reference-contexts: Method combination, however, is not as developed as in full-fledged object-oriented programming systems such as CLOS <ref> [Bobrow et al. 89] </ref>. 4.2. Prototypes vs. Classes The notion of prototype in KR is superficially similar to that of class in conventional object-oriented programming languages, since a prototype object can be used to partially determine the behavior of other objects (its instances).
Reference: [Giuse 87] <author> Dario Giuse. KR: </author> <title> an Efficient Knowledge Representation System. </title> <type> Technical Report CMU-RI-TR-87-23, </type> <institution> Carnegie Mellon University Robotics Institute, </institution> <month> October, </month> <year> 1987. </year>
Reference-contexts: 1. Introduction This document is the reference manual for the KR system. KR implements objects, also known as schemata, which can contain any amount of information and which can be connected in arbitrary ways. All Garnet objects are implemented as KR schemata. KR <ref> [Giuse 87] </ref> can also be used as a very efficient frame-based representation system. Simplicity and efficiency are its main design goals and differentiate it sharply from more conventional frame systems, as discussed in [Giuse 90]. <p> This document describes version 2.3.1 of KR, which is part of release 2.2 of the Garnet system. Several aspects of this version differ from previous versions of the system, such as the ones described in previous reports [Giuse 89] <ref> [Giuse 87] </ref>. The present document overrides all previous descriptions. The orientation of this manual is for users of KR as an object system. Users who are more interested in using KR as a knowledge representation system should consult a previous paper [Giuse 90]. <p> Section 3.1 Main Concepts: Schema, Slot, Value Page 105 3. Basic Concepts This section describes the basic elements of KR, i.e., objects. More details about the design philosophy of the system and some of the internal implementation may be found in <ref> [Giuse 87] </ref>, which describes a previous version of the system that did not support constraint maintenance. 3.1. Main Concepts: Schema, Slot, Value An object in KR is known as a schema.
Reference: [Giuse 88a] <author> Dario Giuse. </author> <title> LISP as a rapid prototyping environment: the Chinese Tutor. </title> <booktitle> LISP and Symbolic Computation 1(2) </booktitle> <pages> 165-184, </pages> <month> September, </month> <year> 1988. </year>
Reference-contexts: In addition to being one of the building blocks of the Garnet project, KR can be used as a self-contained knowledge representation system. Besides Garnet, KR is used in the Chinese Tutor <ref> [Giuse 88a] </ref> [Giuse 88b], an intelligent tutoring system designed to teach Chinese to English speakers, and in speech understanding research [Young 89] currently underway at Carnegie Mellon. This document describes version 2.3.1 of KR, which is part of release 2.2 of the Garnet system.
Reference: [Giuse 88b] <author> Giuse, D.A. </author> <title> Intelligent Tutoring Systems for Foreign Language Acquisition. </title> <booktitle> In Proceedings of the Asia-Pacific Conference on Computer Education (APCCE 88), </booktitle> <pages> pages 33-58. </pages> <institution> Chinese Computer Federation, Shanghai, China, </institution> <year> 1988. </year>
Reference-contexts: In addition to being one of the building blocks of the Garnet project, KR can be used as a self-contained knowledge representation system. Besides Garnet, KR is used in the Chinese Tutor [Giuse 88a] <ref> [Giuse 88b] </ref>, an intelligent tutoring system designed to teach Chinese to English speakers, and in speech understanding research [Young 89] currently underway at Carnegie Mellon. This document describes version 2.3.1 of KR, which is part of release 2.2 of the Garnet system.
Reference: [Giuse 89] <author> Dario Giuse. KR: </author> <title> Constraint-Based Knowledge Representation. </title> <type> Technical Report CMU-CS-89-142, </type> <institution> Carnegie Mellon University Computer Science Department, </institution> <month> April, </month> <year> 1989. </year>
Reference-contexts: This document describes version 2.3.1 of KR, which is part of release 2.2 of the Garnet system. Several aspects of this version differ from previous versions of the system, such as the ones described in previous reports <ref> [Giuse 89] </ref> [Giuse 87]. The present document overrides all previous descriptions. The orientation of this manual is for users of KR as an object system. Users who are more interested in using KR as a knowledge representation system should consult a previous paper [Giuse 90].
Reference: [Giuse 90] <author> Giuse, D.A. </author> <title> Efficient Knowledge Representation Systems. </title> <journal> Knowledge Engineering Review 5(1) </journal> <pages> 35-50, </pages> <year> 1990. </year>
Reference-contexts: All Garnet objects are implemented as KR schemata. KR [Giuse 87] can also be used as a very efficient frame-based representation system. Simplicity and efficiency are its main design goals and differentiate it sharply from more conventional frame systems, as discussed in <ref> [Giuse 90] </ref>. In addition to the basic representation of knowledge as a network of schemata, KR provides object-oriented programming and an integrated constraint maintenance system. Constraint maintenance is implemented through formulas, which constrain certain values to combinations of other values. <p> The present document overrides all previous descriptions. The orientation of this manual is for users of KR as an object system. Users who are more interested in using KR as a knowledge representation system should consult a previous paper <ref> [Giuse 90] </ref>. This manual begins with a description of the features of the system that beginners are most likely to need. Some of the less common features are only presented near the end of the document, in order to avoid obscuring the description with irrelevant details.
Reference: [Lieberman 86] <author> Henry Lieberman. </author> <title> Using Prototypical Objects to Implement Shared Behavior in Object Oriented Systems. </title> <journal> Sigplan Notices 21(11) </journal> <pages> 214-223, </pages> <month> November, </month> <year> 1986. </year> <booktitle> ACM Conference on Object-Oriented Programming; Systems Languages and Applications; OOPSLA'86. </booktitle>
Reference-contexts: Objects can be sent messages, which are implemented as procedural attachments to certain slots; messages are inherited through the same mechanism as values. Instead of the class-instance paradigm, common in object-oriented programming languages, KR implements the more flexible prototype-instance paradigm <ref> [Lieberman 86] </ref>, which allows properties of instances to be determined dynamically by their prototypes. This means that the class structure of a system can be modified dynamically as needed, without any need for recompilation. The second component of KR implements constraint maintenance.
Reference: [Steele 84] <author> Guy L. Steele, Jr. </author> <title> (editor). Common Lisp; The Language. </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference-contexts: This is a complete description of the system and its features. Most application programs will only need a small number of features, described in section 6. Page 104 KR Structure of the System Chapter 2 2. Structure of the System KR is an object system implemented in Common Lisp <ref> [Steele 84] </ref>. It includes three closely integrated components: object-oriented programming, constraint maintenance, and knowledge representation. The first component of KR is an object oriented programming system based on the prototype-instance paradigm. Schemata can be used as objects, and inheritance can be used to determine their properties and behavior.

References-found: 8

