URL: file://ftp.di.unipi.it/pub/Papers/giacobazzi/sas95.ps.gz
Refering-URL: http://www.di.unipi.it/di/groups/lp/papers.html
Root-URL: 
Title: Complementation in Abstract Interpretation  
Author: Agostino Cortesi Gilberto File Roberto Giacobazzi Catuscia Palamidessi Francesco Ranzato 
Abstract: The reduced product of abstract domains is a rather well known operation in abstract interpretation. In this paper we study the inverse operation, which we call complementation. Such an operation allows to systematically decompose domains; it provides a systematic way to design new abstract domains; it allows to simplify domain verification problems, like correctness proofs; and it yields space saving representations for domains. We show that the complement exists in most cases, and we apply complementation to two well known abstract domains, notably to the Cousot and Cousot's comportment domain for analysis of functional languages and to the complex domain Sharing for aliasing analysis of logic languages.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. Armstrong, K. Marriott, P. Schachte, and H. Stndergaard. </author> <title> Boolean functions for dependency analysis: algebraic properties and efficient representation. </title> <booktitle> In Proc. of SAS '94, </booktitle> <volume> LNCS 864, </volume> <pages> pp. 266-280, </pages> <year> 1994. </year>
Reference-contexts: As shown below, this domain coincides exactly with the well known domain Def ([14]). It is well known that Boolean functions can be represented by means of propositional formulae (e.g. see <ref> [1, 22] </ref>). Recall that a Boolean function f is positive if f (true;: : : ; true) = true. <p> Def is the finite lattice (with respect to the usual implication partial order j=) of positive Boolean functions whose models are closed under intersection, plus the bottom element false (for more details see <ref> [1] </ref>). The abstraction and concretization maps between Def and -(Subst) are well known, and can be found, e.g., in [22].
Reference: 2. <author> G. Birkhoff. </author> <title> Lattice Theory. </title> <journal> AMS Colloq. Publ., </journal> <volume> vol. </volume> <pages> XXV, </pages> <note> 3rd edition, </note> <year> 1967. </year>
Reference-contexts: As expected, the complement of Def with respect to Sharing , called Sharing + , captures precisely variable aliasing and no ground-dependency information, and shares with Sharing an elegant representation. 2 Preliminaries Throughout the paper we will assume familiarity with the basic notions of lattice theory (e.g. see <ref> [2] </ref>) and abstract interpretation ([8, 9]). Now, we briefly introduce some notation and recall some well known notions. <p> The following algebraic properties of the complement operation ~ on abstract interpretations can be easily derived from similar properties of pseudo-complemented lattices (see <ref> [2, 17, 29] </ref>). Proposition 8. Let C be a chain inf-distributive lattice, C D; E, and &gt; the most abstract interpretation of C.
Reference: 3. <author> M. Codish, A. Mulkers, M. Bruynooghe, M. Garca de la Banda, and M. Hermenegildo. </author> <title> Improving abstract interpretations by combining domains. </title> <booktitle> In Proc. of ACM PEPM '93, </booktitle> <pages> pp. 194-206, </pages> <year> 1993. </year>
Reference-contexts: The cost/precision tradeoff between separate abstract interpretations and their reduced product has been experimentally evaluated in <ref> [3] </ref> for analysis of logic programs. This operation is also essential in attribute-dependent or relational analysis, where it can be combined with disjunctive completions (e.g. those described in [12, 13]) to generalize the relational tensor product ([27]). <p> The following two sections apply this idea, in particular exploiting factorizations of abstract domains. Very often, abstract domains for analysis are incrementally designed using the reduced product operation of simpler domains (e.g., in logic programs analysis see <ref> [3, 24, 28] </ref>). This introduces modularity in domain design, which is helpful both to design domain dependent abstract operations and to simplify proofs of correctness for complex domains of analysis. Definition 9. <p> The interest of the above theorem is twofold. First, it is an example of the practical impact of the notion of complement presented in the paper. Secondly, it is an example of modularization of abstract domains, that can be easily integrated with the results in <ref> [3] </ref> to improve efficiency and precision of the analysis. 7 Conclusion In this paper we have introduced the notion of complementation in abstract interpretation. Complementation can also be used for semantics related by abstract interpretation.
Reference: 4. <author> M. Comini and G. Levi. </author> <title> An algebraic theory of observables. </title> <booktitle> In Proc. of ILPS '94, </booktitle> <pages> pp. 172-186, </pages> <year> 1994. </year>
Reference-contexts: In particular, both the standard denotational and axiomatic semantics can be derived by abstract interpretation of a generalized SOS operational semantics of the language. This technique has been recently applied in logic programming in <ref> [4, 18] </ref>, where hierarchies of collecting semantics are designed by abstracting SLD resolution. In particular, [18] proved that it is always possible to design "optimal" collecting semantics for analysis of logic programs, by composing (with reduced product) the declarative semantics of Her-brand models with the specific property to model.
Reference: 5. <author> A. Cortesi, G. File, and W. Winsborough. </author> <title> Comparison of abstract interpretations. </title> <booktitle> In Proc. of ICALP '92, </booktitle> <volume> LNCS 623, </volume> <pages> pp. 521-532, </pages> <year> 1992. </year>
Reference-contexts: In the case of Sharing, we use complementation to characterize what is left when we eliminate from it the information useful for ground-dependency analysis. In <ref> [5] </ref> it is proved that the information for ground-dependency analysis of Sharing is expressed by a more abstract domain, which we show to coincide with the domain Def . <p> The ability of this domain to represent, in addition to variable sharing, ground-dependency (also called covering) has already been studied in <ref> [5] </ref>. In particular, in [5] it has been shown that Sharing enjoys a Galois insertion with a more abstract domain that completely captures its ability to express ground-dependency. We show that indeed this domain coincides with the domain Def , introduced by Dart in [14]. <p> The ability of this domain to represent, in addition to variable sharing, ground-dependency (also called covering) has already been studied in <ref> [5] </ref>. In particular, in [5] it has been shown that Sharing enjoys a Galois insertion with a more abstract domain that completely captures its ability to express ground-dependency. We show that indeed this domain coincides with the domain Def , introduced by Dart in [14]. <p> Therefore, f 1 ; 2 g fl (f;; fy; zg; fy; z; ugg). 6.2 Def : an Abstraction of Sharing Expressing its Ground-Dependency Information The ground-dependency information on VI represented by Sharing has been characterized in <ref> [5] </ref> by means of another domain whose elements are Boolean functions on VI . As shown below, this domain coincides exactly with the well known domain Def ([14]). It is well known that Boolean functions can be represented by means of propositional formulae (e.g. see [1, 22]).
Reference: 6. <author> A. Cortesi, G. File, and W. Winsborough. </author> <title> The quotient of an abstract interpretation. </title> <type> Tech. Rep. 12/94, </type> <institution> Dip. di Mat. Pura ed Appl., Univ. di Padova, </institution> <year> 1994. </year>
Reference: 7. <author> P. Cousot. </author> <title> Methodes Iteratives de Construction et d'Approximation de Points Fixes d'Operateurs Monotones sur un Treillis, Analyse Semantique des Programmes. </title> <type> Ph.D. Thesis, </type> <institution> Univ. de Grenoble, </institution> <year> 1978. </year>
Reference-contexts: Obviously, any other lattice isomorphic to C ~ D can be considered in all respects as the complement. From now on, whenever we will speak about complements we will suppose that the conditions for their existence hold. The following result, which is recalled from <ref> [7, Theorem 4.2.0.4.7] </ref>, provides a simple way to generalize the pseudo-complement to arbitrary abstractions in the lattice of abstract interpretations. Proposition 7. Let L be a complete lattice, and 2 uco (L).
Reference: 8. <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Proc. of ACM POPL '77, </booktitle> <pages> pp. 238-252, </pages> <year> 1977. </year>
Reference-contexts: To this aim, it is worth noting that any powerset ordered with the subset (or supset) relation is complete inf-distributive, and hence chain inf-distributive. Moreover, as a remarkable example, the abstract lattice of intervals of integer numbers introduced in <ref> [8] </ref> to analyze the values of an integer variable does not satisfy the ascending chain condition and is not distributive, but it is chain inf-distributive. 4 Complements to Decompose Abstract Domains Complements of abstract interpretations can be used to design new abstract domains for analysis.
Reference: 9. <author> P. Cousot and R. Cousot. </author> <title> Systematic design of program analysis frameworks. </title> <booktitle> In Proc. of ACM POPL '79, </booktitle> <pages> pp. 269-282, </pages> <year> 1979. </year>
Reference-contexts: Usually, the Galois insertion approach is the most used. In this case, D is an abstraction of C if there exist ff and fl such that (fl; D; C; ff) is a Ga-lois insertion. It is well known since <ref> [9] </ref> that the real essence of an abstract domain lies with the closure operator associated with the corresponding G.i.. Actually, an abstract domain is just a "computer representation" of its logical meaning, namely its image in the concrete domain. <p> It is therefore immediate to prove the following result. Proposition 12. Let C D, and be a conjunctive property on C. If D 2 and C ~ D 2 then C 2 . Example 13. Cousot and Cousot introduced in <ref> [9] </ref> the notion of disjunctive abstract domain. An abstract domain D 2 uco (C) is disjunctive iff D is an additive closure. Let _ uco (C) be the set of disjunctive abstractions of C.
Reference: 10. <author> P. Cousot and R. Cousot. </author> <title> Constructing hierarchies of semantics by abstract interpretation. Invited Talk at WSA '92, </title> <address> Bordeaux, </address> <year> 1992. </year>
Reference-contexts: Complementation can also be used for semantics related by abstract interpretation. Cousot and Cousot proved in <ref> [10, 11] </ref> that abstract interpretation can be used to systematically design hierarchies of semantics. In particular, both the standard denotational and axiomatic semantics can be derived by abstract interpretation of a generalized SOS operational semantics of the language.
Reference: 11. <author> P. Cousot and R. Cousot. </author> <title> Inductive definitions, semantics and abstract interpretation. </title> <booktitle> In Proc. of ACM POPL '92, </booktitle> <pages> pp. 83-94, </pages> <year> 1992. </year>
Reference-contexts: Complementation can also be used for semantics related by abstract interpretation. Cousot and Cousot proved in <ref> [10, 11] </ref> that abstract interpretation can be used to systematically design hierarchies of semantics. In particular, both the standard denotational and axiomatic semantics can be derived by abstract interpretation of a generalized SOS operational semantics of the language.
Reference: 12. <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation and application to logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 13(2,3):103-179, </volume> <year> 1992. </year>
Reference-contexts: In this case, abstract domains for analysis can be incrementally designed by successive abstractions, and more precise approximations can be obtained by composing domains or by lifting them by suitable property-completions (e.g. the disjunctive completions in <ref> [12, 13, 16] </ref>). The reduced product ([9]) is probably the most common and well known operation that composes abstract domains. It provides a systematic way to achieve more descriptive abstract domains from simpler ones, and it corresponds to the cardinal, attribute independent product of domains. <p> The cost/precision tradeoff between separate abstract interpretations and their reduced product has been experimentally evaluated in [3] for analysis of logic programs. This operation is also essential in attribute-dependent or relational analysis, where it can be combined with disjunctive completions (e.g. those described in <ref> [12, 13] </ref>) to generalize the relational tensor product ([27]).
Reference: 13. <author> P. Cousot and R. Cousot. </author> <title> Higher-order abstract interpretation (and application to comportment analysis generalizing strictness, termination, projection and PER analysis of functional languages). </title> <booktitle> In Proc. of ICCL '94, </booktitle> <pages> pp. 95-112, </pages> <year> 1994. </year>
Reference-contexts: In this case, abstract domains for analysis can be incrementally designed by successive abstractions, and more precise approximations can be obtained by composing domains or by lifting them by suitable property-completions (e.g. the disjunctive completions in <ref> [12, 13, 16] </ref>). The reduced product ([9]) is probably the most common and well known operation that composes abstract domains. It provides a systematic way to achieve more descriptive abstract domains from simpler ones, and it corresponds to the cardinal, attribute independent product of domains. <p> The cost/precision tradeoff between separate abstract interpretations and their reduced product has been experimentally evaluated in [3] for analysis of logic programs. This operation is also essential in attribute-dependent or relational analysis, where it can be combined with disjunctive completions (e.g. those described in <ref> [12, 13] </ref>) to generalize the relational tensor product ([27]). <p> Hence, by Example 13, D is disjunctive as well. 2 5 Functional Programming: Complementing Comportment Analysis In this application we consider complements with respect to the lattice of comportment analysis designed by Cousot and Cousot in <ref> [13] </ref> to generalize Mycroft's strictness and termination analysis ([25, 26]), Hughes and Wadler's projection analysis ([30]), and Hunt's PER analysis ([20]). <p> As proved by Cousot and Cousot in <ref> [13] </ref>, more precise comportment properties for higher-order functional languages can be characterized by abstraction of a collecting semantics. <p> new element abs corresponds here to the set of basic comportments fcon; divg and represents absence. ; fcong fdivg fide; divg fstrg ftopg abs fideg ftotg ftot; divg * * * * * @ @ @ @ @ @ @ @ H H H H Comportment C As shown in <ref> [13] </ref>, this lattice generalizes: projection P and dual-projection D P depicted respectively below, as well as the above strictness S and termination T analyses (in the latter case, the concretization of an element x is the singleton fxg). fdivg fstrg ftopg abs * * * @ @ Projection P ; fcong
Reference: 14. <author> P. </author> <title> Dart. On derived dependencies and connected databases. </title> <journal> Journal of Logic Pro--gramming, </journal> <volume> 11(2) </volume> <pages> 163-188, </pages> <year> 1991. </year>
Reference-contexts: In [5] it is proved that the information for ground-dependency analysis of Sharing is expressed by a more abstract domain, which we show to coincide with the domain Def . Def was introduced by Dart in <ref> [14] </ref> for groundness analysis in deductive databases, and used by Marriott and Stndergaard for ground-dependency analysis in [22]. <p> In particular, in [5] it has been shown that Sharing enjoys a Galois insertion with a more abstract domain that completely captures its ability to express ground-dependency. We show that indeed this domain coincides with the domain Def , introduced by Dart in <ref> [14] </ref>. It is natural then to try to characterize what is left of Sharing once we take Def out of it, i.e. the complement of Def with respect to Sharing . Of course, this domain must capture exactly the information that is represented by Sharing but ignored by Def .
Reference: 15. <author> P. Dwinger. </author> <title> On the closure operators of a complete lattice. </title> <journal> Indagationes Math., </journal> <volume> 16 </volume> <pages> 560-563, </pages> <year> 1954. </year>
Reference-contexts: This follows from results in <ref> [15, 23] </ref> saying that uco (C) is complemented (or, equivalently, distributive or a Boolean algebra) iff C is a complete well-ordered chain. This condition is clearly too restrictive for abstract interpretation of programming languages. The following example shows this problem in a simple finite lattice. Example 1.
Reference: 16. <author> G. File and F. Ranzato. </author> <title> Improving abstract interpretations by systematic lifting to the powerset. </title> <booktitle> In Proc. of ILPS '94, </booktitle> <pages> pp. 655-669, </pages> <year> 1994. </year>
Reference-contexts: In this case, abstract domains for analysis can be incrementally designed by successive abstractions, and more precise approximations can be obtained by composing domains or by lifting them by suitable property-completions (e.g. the disjunctive completions in <ref> [12, 13, 16] </ref>). The reduced product ([9]) is probably the most common and well known operation that composes abstract domains. It provides a systematic way to achieve more descriptive abstract domains from simpler ones, and it corresponds to the cardinal, attribute independent product of domains.
Reference: 17. <author> O. Frink. </author> <title> Pseudo-complements in semi-lattices. </title> <journal> Duke Math. Journal, </journal> <volume> 29 </volume> <pages> 505-514, </pages> <year> 1962. </year>
Reference-contexts: The following algebraic properties of the complement operation ~ on abstract interpretations can be easily derived from similar properties of pseudo-complemented lattices (see <ref> [2, 17, 29] </ref>). Proposition 8. Let C be a chain inf-distributive lattice, C D; E, and &gt; the most abstract interpretation of C.
Reference: 18. <author> R. Giacobazzi. </author> <title> On the collecting semantics of logic programs. </title> <booktitle> In Proc. of the Post-ICLP '94 Workshop on Verif. and Analysis of Logic Lang., </booktitle> <pages> pp. 159-174, </pages> <year> 1994. </year>
Reference-contexts: In particular, both the standard denotational and axiomatic semantics can be derived by abstract interpretation of a generalized SOS operational semantics of the language. This technique has been recently applied in logic programming in <ref> [4, 18] </ref>, where hierarchies of collecting semantics are designed by abstracting SLD resolution. In particular, [18] proved that it is always possible to design "optimal" collecting semantics for analysis of logic programs, by composing (with reduced product) the declarative semantics of Her-brand models with the specific property to model. <p> In particular, both the standard denotational and axiomatic semantics can be derived by abstract interpretation of a generalized SOS operational semantics of the language. This technique has been recently applied in logic programming in [4, 18], where hierarchies of collecting semantics are designed by abstracting SLD resolution. In particular, <ref> [18] </ref> proved that it is always possible to design "optimal" collecting semantics for analysis of logic programs, by composing (with reduced product) the declarative semantics of Her-brand models with the specific property to model.
Reference: 19. <author> R. Giacobazzi, C. Palamidessi, and F. Ranzato. </author> <title> Weak relative pseudo-complements of closure operators. </title> <type> Tech. Rep. </type> <institution> LIX/RR/95/04, Laboratoire d'Informatique, Ecole Polytechnique, Paris, </institution> <year> 1995. </year>
Reference-contexts: Thus, technically, the question above is equivalent to ask whether uco (C) is pseudo-complemented. A recent result in <ref> [19] </ref> shows that the lattice of closure operators of a complete lattice C is pseudo-complemented whenever C is chain inf-distributive, namely when the glb of C is a continuous binary operation. <p> In this paper, we observe that the condition of chain inf-distributivity is satisfied by most of the known concrete and abstract domains for semantics and analysis. Thus, exploiting the above mentioned result of <ref> [19] </ref>, we introduce the notion of complementation in abstract interpretation, calling abusively complement of an abstract domain the pseudo-complement of its associated closure operator. As the theory developed in Section 4 shows, complementation allows to systematically decompose abstract domains into simpler factors. <p> Indeed, while uco (C) is not in general complemented, it is in practice always pseudo-complemented, as proved in <ref> [19] </ref>. Let L be a meet semi-lattice with bottom element ?. The pseudo-complement of x 2 L, if it exists, is the (unique) element x fl 2 L such that x ^ x fl = ? and 8y 2 L: (x ^ y = ?) ) (y x fl ). <p> It is easy to verify the following pseudo-complements for the elements in uco (C): fl 1 = 7 , fl 4 , fl 4 = 2 , fl 6 = 2 and fl The following definition and results are recalled from the recent paper <ref> [19] </ref>. In what follows, we assume that L is a complete lattice. Definition 3. L is chain inf-distributive if for any chain C L and for each x 2 L, x ^ (_C) = _ y2C (x ^ y). 2 Remark. It is worth noting (as pointed out in [19]) that <p> paper <ref> [19] </ref>. In what follows, we assume that L is a complete lattice. Definition 3. L is chain inf-distributive if for any chain C L and for each x 2 L, x ^ (_C) = _ y2C (x ^ y). 2 Remark. It is worth noting (as pointed out in [19]) that the chain inf-distributivity property is strictly weaker than the well known complete inf-distributivity property (viz. 8x 2 L:8Y L: x ^ (_Y ) = _ y2Y (x ^ y)).
Reference: 20. <author> S. Hunt. </author> <title> PERs generalize projections for strictness analysis. </title> <booktitle> In Proc. of the 1990 Glasgow Funct. Progr. Workshop, </booktitle> <pages> pp. 156-168, </pages> <year> 1990. </year>
Reference: 21. <author> D. Jacobs and A. Langen. </author> <title> Static analysis of logic programs for independent AND-parallelism. </title> <journal> Journal of Logic Programming, </journal> <volume> 13(2,3):154-165, </volume> <year> 1992. </year>
Reference-contexts: As examples of use of complementation for domain decomposition, we consider a domain for aliasing analysis in logic programming, notably Sharing introduced by Jacobs and Langen in <ref> [21] </ref>, and the Cousot and Cousot's comportment analysis for higher-order functional languages ([13]), which generalizes Mycroft's strictness and termination analysis ([25, 26]), Hughes and Wadler's projection analysis ([30]) and Hunt's PER analysis ([20]). <p> Sharing In this section, we apply the theory developed previously to the case of Sharing , a well known domain for variable aliasing and groundness analysis of logic programs, introduced by Jacobs and Langen in <ref> [21] </ref>. The ability of this domain to represent, in addition to variable sharing, ground-dependency (also called covering) has already been studied in [5]. In particular, in [5] it has been shown that Sharing enjoys a Galois insertion with a more abstract domain that completely captures its ability to express ground-dependency.
Reference: 22. <author> K. Marriott and H. Stndergaard. </author> <title> Precise and efficient groundness analysis for logic programs. </title> <journal> ACM LOPLAS, </journal> <volume> 2(1-4):181-196, </volume> <year> 1993. </year>
Reference-contexts: Def was introduced by Dart in [14] for groundness analysis in deductive databases, and used by Marriott and Stndergaard for ground-dependency analysis in <ref> [22] </ref>. <p> As shown below, this domain coincides exactly with the well known domain Def ([14]). It is well known that Boolean functions can be represented by means of propositional formulae (e.g. see <ref> [1, 22] </ref>). Recall that a Boolean function f is positive if f (true;: : : ; true) = true. <p> The abstraction and concretization maps between Def and -(Subst) are well known, and can be found, e.g., in <ref> [22] </ref>.
Reference: 23. <author> J. Morgado. </author> <title> Note on complemented closure operators of complete lattices. Portugal. </title> <journal> Math., </journal> <volume> 21(3) </volume> <pages> 135-142, </pages> <year> 1962. </year>
Reference-contexts: This follows from results in <ref> [15, 23] </ref> saying that uco (C) is complemented (or, equivalently, distributive or a Boolean algebra) iff C is a complete well-ordered chain. This condition is clearly too restrictive for abstract interpretation of programming languages. The following example shows this problem in a simple finite lattice. Example 1.
Reference: 24. <author> K. Muthukumar and M. Hermenegildo. </author> <title> Combined determination of sharing and freeness of program variables through abstract interpretation. </title> <booktitle> In Proc. of ICLP '91, </booktitle> <pages> pp. 49-63, </pages> <year> 1991. </year>
Reference-contexts: The following two sections apply this idea, in particular exploiting factorizations of abstract domains. Very often, abstract domains for analysis are incrementally designed using the reduced product operation of simpler domains (e.g., in logic programs analysis see <ref> [3, 24, 28] </ref>). This introduces modularity in domain design, which is helpful both to design domain dependent abstract operations and to simplify proofs of correctness for complex domains of analysis. Definition 9.
Reference: 25. <author> A. Mycroft. </author> <title> The theory and practice of transforming call-by-need into call-by-value. </title> <booktitle> In Proc. of 4th Intern. Symp. on Programming, </booktitle> <volume> LNCS 83, </volume> <pages> pp. 270-281, </pages> <year> 1980. </year>
Reference: 26. <author> A. Mycroft. </author> <title> Abstract interpretation and optimizing transformations for applicative programs. </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Comp. Sc., Univ. of Edinburgh, CST-15-81, </institution> <year> 1981. </year>
Reference: 27. <author> F. Nielson. </author> <title> Tensor products generalize the relational data flow analysis method. </title> <booktitle> In Proc. of 4th Hung. Comp. Sc. Conf., </booktitle> <pages> pp. 211-225, </pages> <year> 1985. </year>
Reference: 28. <author> R. Sundararajan and J. Conery. </author> <title> An abstract interpretation scheme for groundness, freeness, and sharing analysis of logic programs. </title> <booktitle> In Proc. of FST&TCS '92 , LNCS 652, </booktitle> <pages> pp. 203-216, </pages> <year> 1992. </year>
Reference-contexts: The following two sections apply this idea, in particular exploiting factorizations of abstract domains. Very often, abstract domains for analysis are incrementally designed using the reduced product operation of simpler domains (e.g., in logic programs analysis see <ref> [3, 24, 28] </ref>). This introduces modularity in domain design, which is helpful both to design domain dependent abstract operations and to simplify proofs of correctness for complex domains of analysis. Definition 9.
Reference: 29. <institution> J. Varlet. Contribution a l'etude des treillis pseudo-complementes et des treillis de Stone. Mem. de la Soc. Roy. des Sc. de Liege, 5eme serie, </institution> <month> 8(4) </month> <pages> 1-71, </pages> <year> 1963. </year>
Reference-contexts: The following algebraic properties of the complement operation ~ on abstract interpretations can be easily derived from similar properties of pseudo-complemented lattices (see <ref> [2, 17, 29] </ref>). Proposition 8. Let C be a chain inf-distributive lattice, C D; E, and &gt; the most abstract interpretation of C.
Reference: 30. <author> P.L. Wadler and R.J.M. Hughes. </author> <title> Projections for strictness analysis. </title> <booktitle> In Proc. of ACM FPCA '87, </booktitle> <volume> LNCS 274, </volume> <pages> pp. 385-407, </pages> <year> 1987. </year>
Reference: 31. <author> M. Ward. </author> <title> The closure operators of a lattice. </title> <journal> Ann. of Math., </journal> <volume> 43(2) </volume> <pages> 191-196, </pages> <year> 1942. </year>
References-found: 31

