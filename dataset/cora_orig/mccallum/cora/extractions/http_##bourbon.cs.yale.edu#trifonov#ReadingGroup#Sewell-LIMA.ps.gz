URL: http://bourbon.cs.yale.edu/trifonov/ReadingGroup/Sewell-LIMA.ps.gz
Refering-URL: http://bourbon.cs.yale.edu/trifonov/ReadingGroup/
Root-URL: http://www.cs.yale.edu
Email: fPeter.Sewell,Pawel.Wojciechowskig@cl.cam.ac.uk pierce@cs.indiana.edu  
Title: Location Independence for Mobile Agents  
Author: Peter Sewell Pawe l T. Wojciechowski Benjamin C. Pierce 
Affiliation: University of Cambridge Indiana University  
Abstract-found: 0
Intro-found: 1
Reference: [CHK97] <author> D. Chess, C. Harrison, and A. Kershenbaum. </author> <title> Mobile agents: Are they a good idea? In Mobile Object Systems Towards the Programmable Internet. </title> <publisher> LNCS 1222, </publisher> <pages> pages 25-48, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction In recent years there has been an explosion of interest in wide-area distributed applications, executing on intranets or on the global internet <ref> [CHK97] </ref>. A key concept for structuring such applications is that of mobile agents, i.e. units of executing code that can migrate between sites.
Reference: [FGL + 96] <author> C. Fournet, G. Gonthier, J. Levy, L. Maranget, and D. Remy. </author> <title> A calculus of mobile agents. </title> <booktitle> In Proceedings of CONCUR '96. </booktitle> <volume> LNCS 1119, </volume> <pages> pages 406-421. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1996. </year> <note> Available from http://pauillac.inria.fr/~fournet/. </note>
Reference-contexts: There is therefore a considerable advantage to be gained from expressing the specifications and implementations of location independent primitives in a form with clear and precise semantics. In Section 2 we propose a simple calculus of agents, building on <ref> [MPW92, FGL + 96, Sew97a] </ref>, that can migrate between sites and can interact by both location dependent and independent message passing. It has a precise reduction semantics. <p> For simplicity, we consider messages sent to agents themselves. In practice more structured communication, to entities within agents, would be required, e.g. method invocations of concurrent objects, remote procedure calls, distributed join calculus communication <ref> [FGL + 96] </ref>, distributed - calculus channels or multicasts. These are largely orthogonal to location independence they are encodable, at least conceptually, in a calculus with location independent message passing, though usable implementations may require optimizations that are incompatible with this factorisation.
Reference: [MGW97] <author> D. S. Milojicic, S. Guday, and R. Wheeler. </author> <title> Old wine in new bottles: Applying OS process migration technology to mobile agents. </title> <booktitle> In ECOOP Workshop on Mobile Object Systems 97, </booktitle> <month> June </month> <year> 1997. </year> <note> To appear in LNCS. Available from http://cuiwww.unige.ch/~ecoopws/ws97/abstracts.html. </note>
Reference-contexts: If a party to such communications migrates then the application program must explicitly track its new location. At a high level there are location independent primitives (mentioned, e.g., in <ref> [MGW97] </ref>) that allow communication with a mobile agent irrespective of its current site and of any migrations. Location independent primitives have the potential to greatly simplify the construction of applications.
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes, Parts I + II. </title> <journal> Information and Computation, </journal> <volume> 100(1) </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: There is therefore a considerable advantage to be gained from expressing the specifications and implementations of location independent primitives in a form with clear and precise semantics. In Section 2 we propose a simple calculus of agents, building on <ref> [MPW92, FGL + 96, Sew97a] </ref>, that can migrate between sites and can interact by both location dependent and independent message passing. It has a precise reduction semantics. <p> The choice of these primitives is largely orthogonal to location independence in the sample encoding of Section 3, and in our prototype implementation, we are extending the Pict programming language of Pierce and Turner [PT97], based on the -calculus of Milner, Parrow and Walker <ref> [MPW92] </ref>. The agent primitives could be added to other languages. This paper does not explicitly address questions of security, or of network failure/reconfiguration.
Reference: [PT97] <author> B. C. Pierce and D. N. Turner. </author> <title> Pict: A programming language based on the pi-calculus. To appear in Proof, Language and Interaction: Essays in Honour of Robin Milner, MIT Press. </title> <note> Available from http://www.cs.indiana.edu/hyplan/pierce/pierce/ftp/, 1997. </note>
Reference-contexts: The choice of these primitives is largely orthogonal to location independence in the sample encoding of Section 3, and in our prototype implementation, we are extending the Pict programming language of Pierce and Turner <ref> [PT97] </ref>, based on the -calculus of Milner, Parrow and Walker [MPW92]. The agent primitives could be added to other languages. This paper does not explicitly address questions of security, or of network failure/reconfiguration.
Reference: [Sew97a] <author> P. Sewell. </author> <title> Global/local subtyping for a distributed -calculus. </title> <type> Technical Report 435, </type> <institution> University of Cambridge, </institution> <month> August </month> <year> 1997. </year> <note> Available from http://www.cl.cam.ac.uk/users/pes20/. </note>
Reference-contexts: There is therefore a considerable advantage to be gained from expressing the specifications and implementations of location independent primitives in a form with clear and precise semantics. In Section 2 we propose a simple calculus of agents, building on <ref> [MPW92, FGL + 96, Sew97a] </ref>, that can migrate between sites and can interact by both location dependent and independent message passing. It has a precise reduction semantics. <p> Typing environments are also elided. The typing rules are standard except for the use of global/local typing <ref> [Sew97a] </ref> to prohibit the sending of local pointers (in this setting, local channel names) between agents, and for the use of name equality testing over [#X Agent (X)]. 4 [[ 0 ]] a;here;buf ;ack = 0 [[ P j Q ]] a;here;buf ;ack = [[ P ]] a;here;buf ;ack j [[
Reference: [Sew97b] <author> P. Sewell. </author> <title> On implementations and semantics of a concurrent programming language. </title> <booktitle> In Proceedings of CONCUR '97. </booktitle> <volume> LNCS 1243, </volume> <pages> pages 391-405. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <note> Available from http://www.cl.cam.ac.uk/users/pes20/. </note>
Reference-contexts: The simplest correctness result for this infrastructure would be that @ b P is observationally equivalent to Q. Identifying the appropriate notion of observational equivalence for the extended calculus is not trivial, but appears to be feasible a generalisation of <ref> [Sew97b] </ref>, in which this was considered for an idealised non-distributed Pict, may be required. Acknowledgements The authors would like to thank Ken Moody for many stimulating discussions, and to acknowledge support from EPSRC grant GR/K 38403 and the Wolfson Foundation.
Reference: [SW97] <author> P. Sewell and P. T. Wojciechowski. </author> <title> Nomadic Pict definition. </title> <note> Draft available from http://www.cl.cam.ac.uk/users/pes20/nomaddefn.ps, 1997. 6 </note>
Reference-contexts: We take primitives for communication on local channels: for output xv, input x ( y ) :P , replicated input !x ( y ) :P , and new local channel creation new c : l T . A preliminary definition of the extended calculus can be found in <ref> [SW97] </ref> but is omitted here the target language of the encoding might therefore be regarded as a form of pseudocode, albeit one that describes concurrency and synchronisation rather more explicitly than usual. Typing environments are also elided.
References-found: 8

