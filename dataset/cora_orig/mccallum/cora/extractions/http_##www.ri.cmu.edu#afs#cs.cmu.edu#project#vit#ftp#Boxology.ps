URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/vit/ftp/Boxology.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/vit/www/paper_abstracts/Boxology.html
Root-URL: 
Title: A Field Guide to Boxology: Preliminary Classification of Architectural Styles for Software Systems to guide
Author: Mary Shaw and Paul Clements 
Keyword: careful discrimination design guidance Keywords: software architecture, architectural styles, style classification/taxonomy  
Note: Software architects use a number of commonly-recognized  This document was created with FrameMaker 4.0.4  
Address: Pittsburgh, PA 15213  
Affiliation: Computer Science Department and Software Engineering Institute Carnegie Mellon University  
Date: April 1996  
Web: styles  
Abstract: on how to make appropriate choices. Here we support with a preliminary classification of styles. We use a two-dimensional classification strategy with control and data issues as the dominant organizing axes. We position the major styles within this space and use finer-grained discriminations to elaborate variations on the styles. This provides a framework for organizing , which we partially flesh out with rules of thumb. 
Abstract-found: 1
Intro-found: 1
Reference: [A+95] <author> Gregory D. Abowd, Robert Allen, David Garlan. </author> <title> Formalizing Style to Understand Descriptions of Software Architecture. </title> <journal> ACM Transactions on Software Engineering and Methodology , 4(4) </journal> <pages> 319-364, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Recently there has been some effort to identify and define styles more precisely and systematically [G+94, SG96, Sh96]. A few styles have been formalized or extensively analyzed <ref> [A+95, AG94, An91, Ni86] </ref>. Space does not permit us to offer primary definitions of specific styles here. In this paper we begin to organize and classify some of the styles that appear in software descriptions. <p> They identify three (overlapping) variations of the pipe and filter style <ref> [A+95] </ref>: systems without feedback loops or cycles (acyclic) pipelines (linear), and systems with only fan-out components. Their overall pipe and filter style corresponds to the dataow network style of Table 1: the components are elements that asynchronously transform input into output with minimal retained statei.e., transducers. <p> Their overall pipe and filter style corresponds to the dataow network style of Table 1: the components are elements that asynchronously transform input into output with minimal retained statei.e., transducers. The transducers are connected in various topologies by high-volume data ow streams. The pipeline sub-style of <ref> [A+95] </ref> can be seen in Table 2 to be a specialization of dataow net workits data and control topology is restricted from arbitrary in the general form to linear in the specialized form but the classifications are otherwise identical. The fan-out and acyclic sub-styles of [A+95] similarly differ from the general <p> The pipeline sub-style of <ref> [A+95] </ref> can be seen in Table 2 to be a specialization of dataow net workits data and control topology is restricted from arbitrary in the general form to linear in the specialized form but the classifications are otherwise identical. The fan-out and acyclic sub-styles of [A+95] similarly differ from the general form only by imposing different topological restrictions. Unix pipes and filters, a specialization not treated in [A+95] but widely used elsewhere, can be seen to be a sub-specialization of the pipeline style. <p> The fan-out and acyclic sub-styles of <ref> [A+95] </ref> similarly differ from the general form only by imposing different topological restrictions. Unix pipes and filters, a specialization not treated in [A+95] but widely used elsewhere, can be seen to be a sub-specialization of the pipeline style. The hook-ups can only be specified at the time a programscript, in this caseis written, or when the command is given to the operating system. <p> ing time Isomor phic shapes Flow dir ections Data ow styles: Styles dominated by motion of data through the system, with no upstream content control by recipient Dataow network [B+88] transducers data stream arbi trary asynch i, r arbi trary cont lvol or hvol passed i, r yes same Acyclic <ref> [A+95] </ref> acyclic acyclic Fanout [A+95] hierarchy hierarchy Pipeline [DG90, linear linear Unix pipes and filters [Ba86a] ascii stream i i Key to column entries Synchronicity Binding time Continuity asynch (asynchronous) i (invocation-time), r (run-time) cont (continuous), hvol (high-volume), lvol (low-volume) Back-and-forth (heartbeat) interaction between neighboring processes. <p> shapes Flow dir ections Data ow styles: Styles dominated by motion of data through the system, with no upstream content control by recipient Dataow network [B+88] transducers data stream arbi trary asynch i, r arbi trary cont lvol or hvol passed i, r yes same Acyclic <ref> [A+95] </ref> acyclic acyclic Fanout [A+95] hierarchy hierarchy Pipeline [DG90, linear linear Unix pipes and filters [Ba86a] ascii stream i i Key to column entries Synchronicity Binding time Continuity asynch (asynchronous) i (invocation-time), r (run-time) cont (continuous), hvol (high-volume), lvol (low-volume) Back-and-forth (heartbeat) interaction between neighboring processes.
Reference: [AG94] <author> Robert Allen and David Garlan. </author> <title> Formalizing Architectural Connection. </title> <booktitle> In Proc 16th International Conference on Software Engineering </booktitle>
Reference-contexts: Recently there has been some effort to identify and define styles more precisely and systematically [G+94, SG96, Sh96]. A few styles have been formalized or extensively analyzed <ref> [A+95, AG94, An91, Ni86] </ref>. Space does not permit us to offer primary definitions of specific styles here. In this paper we begin to organize and classify some of the styles that appear in software descriptions.
Reference: [An91] <author> Gregory R. Andrews. </author> <title> Paradigms for Process Interaction in Distributed Programs. </title> <journal> ACM Computing Surveys , 23(1) </journal> <pages> 49-90, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Recently there has been some effort to identify and define styles more precisely and systematically [G+94, SG96, Sh96]. A few styles have been formalized or extensively analyzed <ref> [A+95, AG94, An91, Ni86] </ref>. Space does not permit us to offer primary definitions of specific styles here. In this paper we begin to organize and classify some of the styles that appear in software descriptions. <p> Table 2 shows the relationships among the major style and its family members. 4.2 Cooperative Message-Passing Processes Andrews <ref> [An91] </ref> analyzed and catalogued a family of styles based on processes communicat ing with each other via message-passing. This family corresponds to the communicating pro cesses (CP) style in Table 1. Andrews identifies eight variants. The next sections show how each variant is a specialization of the basic CP style. <p> interacting processes style Style Constituent parts Control issues Data issues Ctrl/data interaction Components Connec tors Topo logy Synch-ronicity Bind ing time Topo logy Contin uity Mode Bind ing time Isomor phic shapes Flow dir ections Interacting process styles: Styles dominated by communication patterns among independent, usually concurrent, processes Communicating processes <ref> [An91, Pa85] </ref> processes message protocols arb seq arb spor lvol any w, c, r possibly if iso morphic either One-way data ow, networks of filters linear asynch linear passed w, c yes same Client/server request/reply star synch star passed yes opposite Heartbeat hier ls/par hier or star passed shared ci/co no
Reference: [B+88] <author> M. R. Barbacci, C. B. Weinstock, and J. M. Wing. </author> <booktitle> Programming at the Processor-Memory-Switch Level. Proc 10th Intl Conf on Software Engineering , April 1988. </booktitle>
Reference-contexts: parts Control issues Data issues Ctrl/data interaction Components Connectors Topo logy Synch-ronicity Bind ing time Topo logy Contin uity Mode Bind ing time Isomor phic shapes Flow dir ections Data ow styles: Styles dominated by motion of data through the system, with no upstream content control by recipient Dataow network <ref> [B+88] </ref> transducers data stream arbi trary asynch i, r arbi trary cont lvol or hvol passed i, r yes same Acyclic [A+95] acyclic acyclic Fanout [A+95] hierarchy hierarchy Pipeline [DG90, linear linear Unix pipes and filters [Ba86a] ascii stream i i Key to column entries Synchronicity Binding time Continuity asynch (asynchronous)
Reference: [Ba86a] <author> M. J. Bach. </author> <title> The Design of the UNIX Operating System . Software Series, </title> <booktitle> Prentice-Hall 1986, sec 5.12, </booktitle> <pages> pp. 111-119. </pages>
Reference-contexts: of data through the system, with no upstream content control by recipient Dataow network [B+88] transducers data stream arbi trary asynch i, r arbi trary cont lvol or hvol passed i, r yes same Acyclic [A+95] acyclic acyclic Fanout [A+95] hierarchy hierarchy Pipeline [DG90, linear linear Unix pipes and filters <ref> [Ba86a] </ref> ascii stream i i Key to column entries Synchronicity Binding time Continuity asynch (asynchronous) i (invocation-time), r (run-time) cont (continuous), hvol (high-volume), lvol (low-volume) Back-and-forth (heartbeat) interaction between neighboring processes.
Reference: [Ba86b] <author> Robert M. Balzer. </author> <title> Living with the Next Generation Operating System. </title> <booktitle> Proc 4th World Computer Conf September 1986. </booktitle>
Reference: [Be90] <author> Laurence J. </author> <title> Best. Application Architecture: Modern Large-Scale Information Processing . Wiley, </title> <year> 1990. </year>
Reference: [Bo86] <author> Grady Booch. </author> <title> Object-Oriented Development. </title> <journal> IEEE Tr. Software Engineering , February 1986, </journal> <pages> pp. 211-221. </pages>
Reference: [Br88] <author> Frederick P. Brooks, Jr. </author> <title> Grasping Reality Through Illusion -- Interactive Graphics Serving Science. </title> <booktitle> Proceedings of the ACM SIGCHI Human Factors in Computer Systems Conference , May 1988, </booktitle> <pages> pp. 1-11. </pages>
Reference-contexts: His criteria for judging quality are truthful ness and rigor for findings , interestingness for observations , usefulness for rules-of-thumb freshness for all three <ref> [Br88] </ref>. This paper presents observations (on discriminating among styles) and some rules-of-thumb (guiding their use in design). We have based our classification on an extensive set of system descriptions.
Reference: [Cl96] <author> Paul Clements. </author> <title> A Survey of Architecture Description Languages. </title> <booktitle> Proc International Workshop on Software Specification and Design , Germany, </booktitle> <year> 1996. </year>
Reference-contexts: For instance, every ADL in one survey was able to express a pipe and-filter style, though few provided it as a built-in primitive <ref> [Cl96] </ref>. Some ADLs, however, go beyond that to support a diverse and open-ended (architect-defined) collection of styles. Two languages do this: Aesop [G+94] and UniCon [S+95]. Aesop is an object-oriented notation and system for developing style-specific architectural development environments.
Reference: [CS95] <author> James Coplien & Eric Schmidt (eds), </author> <title> Pattern Languages of Program Design , Addison-Wesley 1995. </title>
Reference-contexts: In the space of solutions, the patterns community concentrates on documenting proven solutions, including architectural styles, in the context of the specific kinds of problem for which each solution is useful <ref> [GoF95, CS95, Sh96] </ref>. Both Jackson and the patterns community begin with observation of things that work and work toward principled models and guidance. The present work is precisely in that spirit.
Reference: [DG90] <author> Norman Delisle and David Garlan. </author> <title> Applying Formal Specification to Industrial Problems: A Specification of an Oscilloscope. </title> <note> IEEE Software , September 1990. </note>
Reference-contexts: Data ow styles: Styles dominated by motion of data through the system, with no upstream content control by recipient Dataow network [B+88] transducers data stream arbi trary asynch i, r arbi trary cont lvol or hvol passed i, r yes same Acyclic [A+95] acyclic acyclic Fanout [A+95] hierarchy hierarchy Pipeline <ref> [DG90, linear linear Unix pipes and filters [Ba86a] </ref> ascii stream i i Key to column entries Synchronicity Binding time Continuity asynch (asynchronous) i (invocation-time), r (run-time) cont (continuous), hvol (high-volume), lvol (low-volume) Back-and-forth (heartbeat) interaction between neighboring processes.
Reference: [Fr85] <author> Marek Fridrich and William Older. </author> <title> Helix: The Architecture of the XMS Distributed File System. </title> <journal> IEEE Software , vol 2, </journal> <volume> no 3, </volume> <month> May </month> <year> 1985 </year> <month> (pp.21-29). </month>
Reference: [G+92] <author> David Garlan, Gail Kaiser, and David Notkin. </author> <title> Using Tool Abstraction to Compose Systems. </title> <booktitle> IEEE Computer , 25(6), </booktitle> <month> June </month> <year> 1992. </year>
Reference: [G+94] <author> David Garlan, Robert Allen, and John Ockerbloom. </author> <title> Exploiting Style in Architectural Design Environments. </title> <booktitle> Proc. Second ACM SIGSOFT Symposium on Foundations of Software Engineering , December 1994. </booktitle>
Reference-contexts: Architectures are usually expressed in box-and-line diagrams and informal prose, so the styles provide drawing conventions, vocabulary, and informal constraints (e.g., limiting topology or numbers of components of some type). Recently there has been some effort to identify and define styles more precisely and systematically <ref> [G+94, SG96, Sh96] </ref>. A few styles have been formalized or extensively analyzed [A+95, AG94, An91, Ni86]. Space does not permit us to offer primary definitions of specific styles here. In this paper we begin to organize and classify some of the styles that appear in software descriptions. <p> For instance, every ADL in one survey was able to express a pipe and-filter style, though few provided it as a built-in primitive [Cl96]. Some ADLs, however, go beyond that to support a diverse and open-ended (architect-defined) collection of styles. Two languages do this: Aesop <ref> [G+94] </ref> and UniCon [S+95]. Aesop is an object-oriented notation and system for developing style-specific architectural development environments.
Reference: [Ga95] <editor> David Garlan (ed). </editor> <booktitle> First International Workshop on Architectures for Software Systems, Workshop Summary. ACM Software Engineering Notes 20(3), </booktitle> <month> July </month> <year> 1995, </year> <month> pp.84-89. </month>
Reference-contexts: Table 3 summarizes these descriptions. 5. Using Styles in System Design 5.1 Supporting Styles in Architectural Design Languages Specific styles are supported by a variety of frameworks and architectural description lan guages (ADLs) <ref> [Ga95] </ref>. For instance, every ADL in one survey was able to express a pipe and-filter style, though few provided it as a built-in primitive [Cl96]. Some ADLs, however, go beyond that to support a diverse and open-ended (architect-defined) collection of styles. Two languages do this: Aesop [G+94] and UniCon [S+95].
Reference: [Ge89] <author> C. Gerety. </author> <title> HP Softbench: A New Generation of Software Development Tools. </title> <institution> TR SESD-89-25 , Hewlett-Packard Software Engineering System Division, </institution> <address> Ft. Collins CO, </address> <month> November </month> <year> 1989. </year>
Reference: [GoF95] <author> E. Gamma, R. Helm. R. Johnson, and J. Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley 1995. </publisher>
Reference-contexts: In the space of solutions, the patterns community concentrates on documenting proven solutions, including architectural styles, in the context of the specific kinds of problem for which each solution is useful <ref> [GoF95, CS95, Sh96] </ref>. Both Jackson and the patterns community begin with observation of things that work and work toward principled models and guidance. The present work is precisely in that spirit.
Reference: [GS93] <author> David Garlan and Mary Shaw. </author> <title> An Introduction to Software Architecture. </title> <editor> In Ambriola & Tortora (eds), </editor> <booktitle> Advances in Software Engineering & Knowledge Engineering , vol. II, </booktitle> <publisher> World Scientific Pub Co., </publisher> <year> 1993, </year> <month> pp.1-39. </month>
Reference-contexts: 1. Introduction Software architecture is concerned with system structureorganization of the software, assignment of responsibilities to components, and assurance that the components interactions satisfy the system requirements <ref> [GS93, PW92] </ref>. Software developers recognize a number of distinct architectural styles. Many of these styles are defined informally and idiosyncratically. Our purpose here is to clarify the distinctions among styles as a first step in helping designers choose among the styles. <p> Indeed, different groupings may be desirable, especially if they correspond to the language of a problem description. However, the component/connec tor-based clusters enjoy a certain intuitive clarity, reect how many practitioners tend to describe styles, and mirror previous a priori classification efforts <ref> [GS93] </ref>. 3.2 Control issues Control issues describe how control passes among components and how the components work together temporally.
Reference: [HN86] <author> Nico Habermann and David Notkin. </author> <title> Gandalf: Software Development Environments. </title> <journal> IEEE Tr on Software Engineering , vol SE-12, </journal> <month> December </month> <year> 1986. </year>
Reference: [He69] <author> Carl Hewitt. </author> <title> Planner A Language for Proving Theorems in Robots. </title> <booktitle> Proc First Intl Joint Conf. in Artificial Intelligence </booktitle>
Reference: [HR85] <author> Frederick Hayes-Roth. </author> <title> Rule-Based Systems. </title> <journal> Communications of the ACM , vol 28, </journal> <volume> no 9, </volume> <month> September </month> <year> 1985, </year> <month> pp.921-932. </month>
Reference: [Ja96] <author> Michael Jackson.Software Requirements and Specifications: </author> <title> A Lexicon of Practice, </title> <booktitle> Principles, </booktitle> <publisher> and Prejudices Addison-Wesley 1995. </publisher>
Reference-contexts: Eventually the classification should provide guidance for recognizing which styles are important candidates for shaping the solution. This work shares motivation with recent work on problem frames and on patterns. Jacksons work on problem frames <ref> [Ja96] </ref> does for classes of problems what we are doing for classes of solutions. Jackson distinguishes classes of problems on the basis of the kinds of information provided and kinds of results expected.
Reference: [K+96] <author> Rick Kazman, Paul Clements, Gregory Abowd, Len Bass. </author> <title> Classifying Architectural Elements. </title> <booktitle> Proc ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <year> 1996, </year> <note> submitted. </note>
Reference-contexts: For example, both program transducer refine process procedure calls be local remote , and their binding may be dynamic static batch data data stream tinuous refresh are all forms of data flow A taxonomic treatment of architectural components and connectors, filling out the concep tual framework begun here, appears elsewhere <ref> [K+96] </ref>. Components and connectors also provide a clustering criterion for the styles in Table 1. Members of a cluster share similar types of components and/or connectors. These clusters are not the only ones possible; the styles could be grouped differently by choosing other fea tures as their organizing basis.
Reference: [KP88] <author> G. Krasner and S. Pope. </author> <title> A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk-80. </title> <note> Journal of Object Oriented Programming , vol 1, August/September 1988. </note>
Reference: [La90] <author> Thomas G. Lane. </author> <title> User Interface Software Structures . Ph.D. </title> <type> Thesis, </type> <institution> Carnegie Mellon University, Carnegie Mellon University Computer Science Technical Report CMU-CS-90-101, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: Finer distinctions can be made, when appropriate, in refinements of the primary analysis; this is done for two examples in Section 4. It is useful to think of each of these feature categories as defining one dimension of a multidimensional space <ref> [La90] </ref>. A specific style then corresponds to a point in the space and a family of styles corresponds to a subspace. In a multidimensional space, it is possible for two subspaces to intersect. <p> This form of design guidance was explored for the user interface component of systems by Lane <ref> [La90] </ref>. Lane characterized both his requirement and implementation domains as design spaces. He cast his design guidance as rules that mapped points in the requirement space to points in the implementation space with variable, signed weights. He wrote similar rules to describe compatibility of alternatives in the implementation space.
Reference: [LS79] <author> Hugh C. Lauer and Ed. H. Satterthwaite. </author> <title> Impact of MESA on System Design. </title> <booktitle> Proc Third Intl Conf. on Software Engineering , May 1979. </booktitle>
Reference: [Ni86] <author> H. Penny Nii. </author> <title> Blackboard Systems. </title> <journal> AI Magazine 7(3) </journal> <volume> 38-53 and </volume> 7(4):82-107. 
Reference-contexts: Recently there has been some effort to identify and define styles more precisely and systematically [G+94, SG96, Sh96]. A few styles have been formalized or extensively analyzed <ref> [A+95, AG94, An91, Ni86] </ref>. Space does not permit us to offer primary definitions of specific styles here. In this paper we begin to organize and classify some of the styles that appear in software descriptions. <p> If you are considering repositories and the input data is noisy (low signal-to-noise ratio) and the execution order cannot be predetermined, consider a blackboard <ref> [Ni86] </ref> If you are considering repositories and the execution order is determined by a stream of incoming requests and the data is highly structured, consider a database management system.
Reference: [Pa72] <author> David L. Parnas. </author> <title> On the Criteria to be Used in Decomposing Systems into Modules. </title> <journal> Comm. </journal> <volume> ACM vol 15, </volume> <month> December </month> <year> 1972. </year>
Reference: [Pa85] <author> Mark C. Paulk. </author> <title> The ARC Network: A Case Study. </title> <booktitle> IEEE Software , vol 2 no 3, </booktitle> <month> May </month> <year> 1985, </year> <pages> pp. 62-69 </pages>
Reference-contexts: interacting processes style Style Constituent parts Control issues Data issues Ctrl/data interaction Components Connec tors Topo logy Synch-ronicity Bind ing time Topo logy Contin uity Mode Bind ing time Isomor phic shapes Flow dir ections Interacting process styles: Styles dominated by communication patterns among independent, usually concurrent, processes Communicating processes <ref> [An91, Pa85] </ref> processes message protocols arb seq arb spor lvol any w, c, r possibly if iso morphic either One-way data ow, networks of filters linear asynch linear passed w, c yes same Client/server request/reply star synch star passed yes opposite Heartbeat hier ls/par hier or star passed shared ci/co no
Reference: [PN86] <author> R. Prieto-Diaz and J. M. Neighbors. </author> <title> Module Interconnection Languages. </title> <journal> Journal of Systems and Software 6(4), </journal> <month> November </month> <year> 1986, </year> <pages> pp. 307-334. </pages>
Reference-contexts: Design with lightweight processes must therefore recognize the problems and advantages of both parents. The overlap is reected in Table 1. An alternative way to distinguish styles would be through a hierarchical taxonomy <ref> [PN86] </ref>. Such taxonomies are structured as decision trees with the taxonomized population at the leaves and discriminating questions on the interior nodes. Such taxonomies may be more expressive than tabular classifications because they can use different discrimination criteria at different points.
Reference: [PW92] <author> Dewayne E. Perry and Alexander L. Wolf. </author> <title> Foundations for the Study of Software Architecture. </title> <booktitle> ACM SIGSOFT Software Engineering Notes , 17(4) </booktitle> <pages> 40-52, </pages> <month> Oct </month> <year> 1992. </year>
Reference-contexts: 1. Introduction Software architecture is concerned with system structureorganization of the software, assignment of responsibilities to components, and assurance that the components interactions satisfy the system requirements <ref> [GS93, PW92] </ref>. Software developers recognize a number of distinct architectural styles. Many of these styles are defined informally and idiosyncratically. Our purpose here is to clarify the distinctions among styles as a first step in helping designers choose among the styles.
Reference: [Re90] <author> S. P. Reiss. </author> <title> Connecting Tools Using Message Passing in the Field Environment. </title> <note> IEEE Software July 1990. </note>
Reference: [S+95] <author> Mary Shaw, Robert DeLine, Daniel V. Klein, Theodore L. Ross, David M. Young, Gregory Zelesnik. </author> <title> Abstractions for Software Architecture and Tools to Support Them. </title> <journal> IEEE Transactions on Software Engi neering , May 1995. </journal>
Reference-contexts: For instance, every ADL in one survey was able to express a pipe and-filter style, though few provided it as a built-in primitive [Cl96]. Some ADLs, however, go beyond that to support a diverse and open-ended (architect-defined) collection of styles. Two languages do this: Aesop [G+94] and UniCon <ref> [S+95] </ref>. Aesop is an object-oriented notation and system for developing style-specific architectural development environments.
Reference: [Se88] <author> V. Seshadri et al. </author> <title> Semantic Analysis in a Concurrent Compiler. </title> <booktitle> Proceedings of ACM SIGPLAN '88 Confer ence on Programming Language Design and Implementation </booktitle>
Reference: [SG96] <author> Mary Shaw and David Garlan. </author> <booktitle> Software Architecture: Perspectives on an Emerging Discipline . Prentice-Hall 1996. </booktitle>
Reference-contexts: Architectures are usually expressed in box-and-line diagrams and informal prose, so the styles provide drawing conventions, vocabulary, and informal constraints (e.g., limiting topology or numbers of components of some type). Recently there has been some effort to identify and define styles more precisely and systematically <ref> [G+94, SG96, Sh96] </ref>. A few styles have been formalized or extensively analyzed [A+95, AG94, An91, Ni86]. Space does not permit us to offer primary definitions of specific styles here. In this paper we begin to organize and classify some of the styles that appear in software descriptions.
Reference: [Sh81] <editor> Mary Shaw (ed). Alphard: </editor> <publisher> Form and Content . Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [Sh95] <author> Mary Shaw. </author> <title> Beyond Objects: A Software Design Paradigm Based on Process Control. </title> <booktitle> ACM Software Engi neering Notes , 20(1), </booktitle> <month> Jan </month> <year> 1995. </year>
Reference-contexts: If your system involves controlling continuing action, is embedded in a physical sys tem, and is subject to unpredictable external perturbation so that preset algorithms go awry, consider a closed loop control architecture <ref> [Sh95] </ref>. If you have designed a computation but have no machine on which you can execute it, consider an interpreter architecture. If your task requires a high degree of flexibility/configurability, loose coupling be tween tasks, and reactive tasks, consider interacting processes.
Reference: [Sh96] <author> Mary Shaw. </author> <title> Some Patterns for Software Architectures. </title> <booktitle> Proceedings of Second Workshop on Pattern Lan guages for Programming , Addison-Wesley 1996. </booktitle>
Reference-contexts: Architectures are usually expressed in box-and-line diagrams and informal prose, so the styles provide drawing conventions, vocabulary, and informal constraints (e.g., limiting topology or numbers of components of some type). Recently there has been some effort to identify and define styles more precisely and systematically <ref> [G+94, SG96, Sh96] </ref>. A few styles have been formalized or extensively analyzed [A+95, AG94, An91, Ni86]. Space does not permit us to offer primary definitions of specific styles here. In this paper we begin to organize and classify some of the styles that appear in software descriptions. <p> In the space of solutions, the patterns community concentrates on documenting proven solutions, including architectural styles, in the context of the specific kinds of problem for which each solution is useful <ref> [GoF95, CS95, Sh96] </ref>. Both Jackson and the patterns community begin with observation of things that work and work toward principled models and guidance. The present work is precisely in that spirit.
Reference: [Sp87] <author> Alfred Z. Spector et al. Camelot: </author> <title> A Distributed Transaction Facility for Mach and the Internet - An Interim Report. </title> <note> Carnegie Mellon University Computer Science Technical Report , June 1987. </note>
References-found: 40

