URL: ftp://ftp.cs.york.ac.uk/pub/realtime/papers/YCS206.ps.Z
Refering-URL: http://www.csd.uu.se/~bjornfot/r2.html
Root-URL: 
Title: A Standard for Finite TAM  
Author: David Scholefield, Hussein Zedan 
Date: August 12, 1993  
Address: Heslington, York, YO1 5DD  
Affiliation: Formal Systems Research Group Department of Computer Science University of York  
Abstract: Since its inception in 1991, the Temporal Agent Model theory (TAM) has undergone a number of changes; some of these changes have been minor (such as a change in the style of semantic presentation) and some have been more major (such as the addition or subtraction of programming constructs from the TAM language). Throughout these changes however, the computational model underlying the theory has remained constant, allowing for a comparison of different flavours of the language. This has proved a fruitful area of research, but has also meant that references to the TAM theory may be ambiguous. In this paper we present a standard TAM theory, including a language syntax, semantics, and refinement calculus, and propose that this standard be used in future TAM projects. We also discuss refinement hueristics for ensuring implementable programs.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Faron Moller and Christopher M N Tofts. </author> <title> A temporal calculus of communicating systems. </title> <type> Technical Report ECS-LFCS-89-104, </type> <institution> University of Edinburgh, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: In doing so, TAM has not shared any of the simplifying assumptions that other techniques promote, e.g. the maximum parallelism hypothesis (there exist an infinite number of resources available to the program) [4], and the instantaneous communication assumption promoted by many real-time process algebras <ref> [1] </ref> [5]. The trade-off is that TAM can often appear complex, both in the syntax it provides for specifications, and in the discharging of proof obligations during the verification process.
Reference: [2] <author> C. Morgan. </author> <title> Programming from Specifications. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year> <month> 18 </month>
Reference-contexts: : f alse (for any frame w), this is because: [[w : f alse]] = stable ( ~w; t ff ; t ! ) ^ f alse = f alse ) [[A]] (any A) 2 The specification w : f alse is often referred to as the miraculous specification (see <ref> [2] </ref> for example), and usually arises as a result of an inconsistent specification at an earlier stage in refinement. However,other kinds of refinement can result in undesired agents as well.
Reference: [3] <author> M. Portman and H. S. M. Zedan. </author> <title> The development of imprecise real-time systems. </title> <journal> Systems and Software, </journal> <note> (to appear 1993). </note>
Reference-contexts: This latter point has been demonstrated in publications by researchers in fields which are not mainstream real-time (for example see <ref> [3] </ref>). The TAM theory has also been designed to support a specific development method. Many so-called formal methods only consist of a notation, and not a method which enables the user to carry out a specific list of steps in order to arrive at a correct implementation.
Reference: [4] <author> A. Salwicki and T. Muldner. </author> <title> On the Algorithmic Properties of Concurrent Programs, </title> <booktitle> volume LNCS 125. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: In doing so, TAM has not shared any of the simplifying assumptions that other techniques promote, e.g. the maximum parallelism hypothesis (there exist an infinite number of resources available to the program) <ref> [4] </ref>, and the instantaneous communication assumption promoted by many real-time process algebras [1] [5]. The trade-off is that TAM can often appear complex, both in the syntax it provides for specifications, and in the discharging of proof obligations during the verification process.
Reference: [5] <author> S. Schneider. </author> <title> Correctness and Communication in Real-Time Systems. </title> <type> PhD thesis, </type> <year> 1990. </year>
Reference-contexts: In doing so, TAM has not shared any of the simplifying assumptions that other techniques promote, e.g. the maximum parallelism hypothesis (there exist an infinite number of resources available to the program) [4], and the instantaneous communication assumption promoted by many real-time process algebras [1] <ref> [5] </ref>. The trade-off is that TAM can often appear complex, both in the syntax it provides for specifications, and in the discharging of proof obligations during the verification process.
Reference: [6] <author> D. J. Scholefield. </author> <title> A Refinement Calculus for Real-Time Systems. </title> <type> PhD thesis, </type> <institution> The University of York, </institution> <year> 1992. </year>
Reference-contexts: Also, the guards were untimed, which we believed was unrealistic: it led to the execution constraint that guard evaluation had to be instantaneous 2 . In 1992 a version of the TAM language, along with a full refinement calculus, was presented <ref> [6] </ref>. This version of TAM used the same underlying logic and weakest precondition style of the previous version, but it contained a number of important differences. <p> The proof of this theorem is given in <ref> [6] </ref>. 7 Postscript: A Few Notes on `Sensible' Refinements It is possible to refine any agent by the specification w : f alse (for any frame w), this is because: [[w : f alse]] = stable ( ~w; t ff ; t ! ) ^ f alse = f alse )
Reference: [7] <author> D. J. Scholefield and H. S. M. Zedan. </author> <title> The refinement of real-time systems. </title> <booktitle> In Fourth European Workshop on Real-Time Systems, </booktitle> <address> Athens, Greece, June 1992. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This version of the language also appeared in the Fourth Euromicro Workshop on Real-Time Systems along with a small case study <ref> [7] </ref>.
Reference: [8] <author> D. J. Scholefield and H. S. M. Zedan. Tam: </author> <title> A formal framework for the development of distributed real-time systems. In Symposium on Formal Techniques in Real-Time and Fault Tolerant Systems, </title> <address> Nijmegen, Netherlands, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: 1 Introduction In January 1992 the first version of TAM was presented at the Nijmegen workshop on the formal development of real-time and fault tolerant systems <ref> [8] </ref>. The semantics of the wide-spectrum refinement language were described using extended weakest preconditions (which were later presented in [9]), and the underlying logic was based upon conservative extensions to first-order predicate logic.
Reference: [9] <author> D. J. Scholefield and H. S. M. Zedan. </author> <title> Weakest precondition semantics for time and concurrency. </title> <journal> Information Processing Letters, </journal> <volume> 43 </volume> <pages> 301-308, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: 1 Introduction In January 1992 the first version of TAM was presented at the Nijmegen workshop on the formal development of real-time and fault tolerant systems [8]. The semantics of the wide-spectrum refinement language were described using extended weakest preconditions (which were later presented in <ref> [9] </ref>), and the underlying logic was based upon conservative extensions to first-order predicate logic. This version of TAM had single untimed guards, full recursion, but no refinement calculus (although a refinement relation was presented).
Reference: [10] <author> D. J. Scholefield, H. S. M. Zedan, and J. </author> <title> He. A predicative semantics for the refinement of real-time systems. </title> <booktitle> In Proceedings of MFPS IX, </booktitle> <address> New Orleans 1993. </address> <note> Springer-Verlag, (to appear) 1993. </note>
Reference-contexts: This resulted in a clarification of both refinement proofs, and the proofs of soundness of refinement laws. This version of the language was presented along with a number of case studies in <ref> [10] </ref> [11] and [12]. The language presented in these papers had not otherwise changed beyond a few minor syntactic improvements (the use of a single operator for hinding both variables and shunts for example).
Reference: [11] <author> D. J. Scholefield, H. S. M. Zedan, and J. </author> <title> He. Real-time refinement: Semantics and application. </title> <booktitle> In Proceedings of MFCS 93, </booktitle> <address> Gdansk 1993, </address> <note> (to appear) 1993. </note>
Reference-contexts: This resulted in a clarification of both refinement proofs, and the proofs of soundness of refinement laws. This version of the language was presented along with a number of case studies in [10] <ref> [11] </ref> and [12]. The language presented in these papers had not otherwise changed beyond a few minor syntactic improvements (the use of a single operator for hinding both variables and shunts for example).
Reference: [12] <author> D. J. Scholefield, H. S. M. Zedan, and J. </author> <title> He. A specification oriented semantics for the refinement of real-time systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 130, </volume> <month> August </month> <year> 1994. </year> <month> 19 </month>
Reference-contexts: This resulted in a clarification of both refinement proofs, and the proofs of soundness of refinement laws. This version of the language was presented along with a number of case studies in [10] [11] and <ref> [12] </ref>. The language presented in these papers had not otherwise changed beyond a few minor syntactic improvements (the use of a single operator for hinding both variables and shunts for example).
References-found: 12

