URL: ftp://ftp.cs.brown.edu/pub/techreports/97/cs97-18.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-97-18.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> K. Arnold and J. Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1996. </year>
Reference-contexts: Names of components and operations should be intuitive and standardized. Documentation should be integrated in the library. Knuth pioneered integration between code and documentation with the concept of "literate programming" (see, e.g., [37]). Note that the Java programming language provides this capability as part of its specification <ref> [1] </ref>. Efficiency The methodologies and techniques used in the design of the library (abstraction, generality, object-orientation) should introduce a low overhead with respect to an ad hoc program to solve a certain problem.
Reference: [2] <author> J. Arvo, </author> <title> editor. Graphics Gems II. </title> <publisher> Academic Press, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: We evaluate previous work according to the requirements presented in Section 2. 3.1 Gems and recipes "Graphics gems" <ref> [2, 26, 31, 35, 51] </ref> and "numerical recipes" [55] have proved very useful in computer graphics and scientific computing, respectively. Through books and available source code, the gems/recipes approach has disseminated efficient and reliable procedures for computer graphics and scientific computing to a wide audience.
Reference: [3] <author> F. Avnaim, J.-D. Boissonnat, O. Devillers, F. Preparata, and M. Yvinec. </author> <title> Evaluating signs of determinants using single-precision arithmetic. </title> <journal> Algorithmica, </journal> <volume> 17(2) </volume> <pages> 111-132, </pages> <year> 1997. </year>
Reference-contexts: Also, the efficiency of the geometric algorithms must be evaluated in a finer framework than the conventional asymptotic analysis: in particular, constant factors dependent on the precision requirements of the numerical computations should be taken into account. Within the paradigm of exact computation (see, e.g., <ref> [3, 8, 67] </ref>), Liotta, Preparata, and Tamassia [41] have recently introduced the concept of degree of a geometric algorithm. The degree characterizes, up to a small additive constant, the arithmetic precision, i.e., the number of bits, required by a large class of geometric algorithms.
Reference: [4] <author> M. Bertolotto, L. De Floriani, and P. Marzano. </author> <title> Unifying framework for the multilevel description of spatial data. </title> <editor> In A. U. Frank and W. Kuhn, editors, </editor> <booktitle> Spatial Information Theory (Proc. COSIT '95), volume 988 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 259-278. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Of particular importance, in geometric computing, is the choice of the data types. Possible examples are the arithmetic representation for geometric objects, or the use of multilevel spatial data descriptions, providing "zooming" capabilities, in geographical information systems (see, e.g., <ref> [4, 64] </ref>). Extensibility The architecture of a library should be extensible by the decentralized contributions of the community of its users, while maintaining evolving standards that enable the contributions to interoperate. Extensible architectures should be contrasted with monolithic ones. <p> For some other applications it may be important to easily access the dual graph. Geographical information systems require representations specifically designed for efficient secondary storage access or for multilevel/multiresolution access (see, e.g., <ref> [4, 64] </ref>). The existing implementation of the EmbeddedPlanarGraph interface is based 11 on the incidence graph representation described in Chapter 11 of [15].
Reference: [5] <author> M. Blum and S. Kannan. </author> <title> Designing programs that check their work. </title> <journal> J. ACM, </journal> <volume> 42(1) </volume> <pages> 269-291, </pages> <year> 1995. </year>
Reference-contexts: On the other hand, program testing cannot guarantee the correctness of a program, and formal proof of correctness do not seem to be applicable in practice. As a possible solution to this impasse, the concept of program checking has been recently introduced (see, e.g., <ref> [5, 6, 11, 21, 45] </ref>. Rather than proving the correctness of the program for any possible input, each time the program is run (with a specific input), the correctness of its output (with respect to that input) is checked.
Reference: [6] <author> M. Blum, M. Luby, and R. Rubinfeld. </author> <title> Self-testing/correcting with applications to numerical problems. </title> <journal> J. Comput. System Sci., </journal> <volume> 47(3) </volume> <pages> 549-595, </pages> <year> 1993. </year>
Reference-contexts: On the other hand, program testing cannot guarantee the correctness of a program, and formal proof of correctness do not seem to be applicable in practice. As a possible solution to this impasse, the concept of program checking has been recently introduced (see, e.g., <ref> [5, 6, 11, 21, 45] </ref>. Rather than proving the correctness of the program for any possible input, each time the program is run (with a specific input), the correctness of its output (with respect to that input) is checked.
Reference: [7] <author> C. Burnikel, J. Konnemann, K. Mehlhorn, S. Naher, S. Schirra, and C. Uhrig. </author> <title> Exact geometric computation in LEDA. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages C18-C19, </pages> <year> 1995. </year>
Reference-contexts: Recent object-oriented design concepts such as design patterns [24] and algorithm abstraction [63] are extensively used throughout the entire project. In the design phase, we have taken into account the experience of other similar efforts, such as the Library of Efficient Data structures and Algorithms (LEDA) <ref> [7, 43, 44, 46] </ref> and the more recent Computational Geometry Algorithms Library (CGAL) [20, 50, 57, 65]. Two are the major goals of the project: * To provide researchers in computational geometry with a framework for algorithm engineering, with a specific emphasis on geometric computing. <p> However, this is one of its principal uses and the focus of much of the continuing research activity <ref> [7, 43] </ref>. It is available at http://www.mpi-sb.mpg.de/LEDA. Ease of Use LEDA's data structures and algorithms are well documented with respect to their space and time complexity. Every new release is accompanied by a detailed user manual. Efficiency LEDA provides implementations of many asymptotically optimal algorithms.
Reference: [8] <author> C. Burnikel, K. Mehlhorn, and S. Schirra. </author> <title> On degeneracy in geometric computations. </title> <booktitle> In Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 16-23, </pages> <year> 1994. </year>
Reference-contexts: Also, the efficiency of the geometric algorithms must be evaluated in a finer framework than the conventional asymptotic analysis: in particular, constant factors dependent on the precision requirements of the numerical computations should be taken into account. Within the paradigm of exact computation (see, e.g., <ref> [3, 8, 67] </ref>), Liotta, Preparata, and Tamassia [41] have recently introduced the concept of degree of a geometric algorithm. The degree characterizes, up to a small additive constant, the arithmetic precision, i.e., the number of bits, required by a large class of geometric algorithms.
Reference: [9] <author> L. Cardelli and P. Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> ACM Comput. Surv., </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <year> 1985. </year>
Reference-contexts: The JDSL project is described in greater detail in [25, 27]. Our design relies on various object-oriented design concepts, such as object, class, interface, inheritance, polymorphism, dynamic binding and type checking, and design pattern. We briefly review them in Appendix A, and refer the interested reader to, e.g., <ref> [9, 24, 60, 66] </ref>. Of particular importance in the design of JDSL/GeomLib is the concept of interface. Ideally, users of JDSL/GeomLib use interfaces rather than classes as object types; actual classes need only be specified when creating an object.
Reference: [10] <author> B. Chazelle et al. </author> <title> Application challenges to computational geometry: CG impact task force report. </title> <type> Technical Report TR-521-96, </type> <institution> Princeton Univ., </institution> <year> 1996. </year> <note> http://www.cs.princeton.edu/~chazelle/taskforce/CGreport.ps. </note>
Reference-contexts: In this context, GeomLib will be typically used for rapid prototyping and experimental studies of geometric algorithms. * To make computational geometry results available to the users in other areas, such as robotics, geographic information systems, mechanical engineering, computer graphics, etc. It has been noted <ref> [10, 42, 62] </ref> that to address applications from those areas is a strategic direction for computational geometry.
Reference: [11] <author> O. Devillers, G. Liotta, F. P. Preparata, and R. Tamassia. </author> <title> Checking the convexity of polytopes and the planarity of subdivisions. </title> <editor> In F. Dehne, A. Rau-Chaplin, J.-R. Sack, and R. Tamassia, editors, </editor> <booktitle> Algorithms and Data Structures (Proc. WADS '97), volume 1272 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 186-199. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: On the other hand, program testing cannot guarantee the correctness of a program, and formal proof of correctness do not seem to be applicable in practice. As a possible solution to this impasse, the concept of program checking has been recently introduced (see, e.g., <ref> [5, 6, 11, 21, 45] </ref>. Rather than proving the correctness of the program for any possible input, each time the program is run (with a specific input), the correctness of its output (with respect to that input) is checked. <p> The purpose of these testers is to "certify" that a given class implements correctly an interface. * The implementation of the checker for verifying the consistency of planar subdivisions de scribed in <ref> [11] </ref>. Long-term developments are aimed at extending the current prototype of JDSL/GeomLib.
Reference: [12] <author> O. Devillers and F. P. Preparata. </author> <title> A probabilistic analysis of the power of arithmetic filters. </title> <type> Technical Report CS-96-27, </type> <institution> Center for Geometric Computing, Dept. Computer Science, Brown Univ., </institution> <year> 1996. </year> <month> ftp://ftp.cs.brown.edu/pub/techreports/96/cs96-27.ps.Z. </month>
Reference-contexts: The assumption of real number arithmetic has proved unrealistic, since digital computers do not exhibit such capability. On the other hand, exact rational arithmetic may excessively slow down computations. In light of these problems, the concepts of degree of a geometric algorithm [41] and of arithmetic filter <ref> [12] </ref> have been recently introduced. Informally, the degree of a geometric algorithm characterizes, up to a small additive constant, the arithmetic precision, i.e., the number of bits, required by the geometric algorithm. A more detailed discussion on the degree is given in Section 6.2.
Reference: [13] <author> D. P. Dobkin and D. Silver. </author> <title> Applied computational geometry: Towards robust solutions of basic problems. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 40(1) </volume> <pages> 70-87, </pages> <year> 1989. </year>
Reference: [14] <author> M. Edahiro, I. Kokubo, and T. Asano. </author> <title> A new point-location algorithm and its practical efficiency | Comparison with existing algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 3(2) </volume> <pages> 86-109, </pages> <year> 1984. </year>
Reference-contexts: We will first describe our design and implementation of a specific planar point location algorithm, the chain method [39, 16], and later show how the same design can be applied to another algorithm, the trapezoid method [52]. Both algorithms are very effective in practice, as reported in <ref> [14] </ref>. Finally, we will show how the binary space partition search can be used as an algorithmic component in a third algorithm, the triangulation refinement method [36]. <p> In particular, they include: * The implementation of a regularizing algorithm for non-monotone planar subdivisions and the implementation of an algorithm for obtaining a monotone planar subdivisions from any (e.g., non-connected) planar subdivision. * Experimental testing of planar point location methods has already been performed in the past <ref> [14] </ref>.
Reference: [15] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry, </title> <booktitle> volume 10 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: Geographical information systems require representations specifically designed for efficient secondary storage access or for multilevel/multiresolution access (see, e.g., [4, 64]). The existing implementation of the EmbeddedPlanarGraph interface is based 11 on the incidence graph representation described in Chapter 11 of <ref> [15] </ref>. <p> In particular, we will focus on its variant described in Chapter 11 of <ref> [15] </ref>. We recall that the search structure requires O (n) space, can be constructed in O (n log n) time, and allows O (log 2 n) query time.
Reference: [16] <author> H. Edelsbrunner, L. J. Guibas, and J. Stolfi. </author> <title> Optimal point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 15(2) </volume> <pages> 317-340, </pages> <year> 1986. </year>
Reference-contexts: In the rest of the section, we denote by n the number of vertices of S. We will first describe our design and implementation of a specific planar point location algorithm, the chain method <ref> [39, 16] </ref>, and later show how the same design can be applied to another algorithm, the trapezoid method [52]. Both algorithms are very effective in practice, as reported in [14].
Reference: [17] <author> H. Edelsbrunner and E. P. Mucke. </author> <title> Simulation of simplicity: A technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 9(1) </volume> <pages> 66-104, </pages> <year> 1990. </year>
Reference: [18] <author> D. Eppstein, G. F. Italiano, R. Tamassia, R. E. Tarjan, J. Westbrook, and M. Yung. </author> <title> Maintenance of a minimum spanning forest in a dynamic plane graph. </title> <journal> J. Algorithms, </journal> <volume> 13(1) </volume> <pages> 33-54, </pages> <year> 1992. </year>
Reference-contexts: There exist several possible representations for an embedded planar graph, e.g., the DCEL representation [54], the quad-edge representation [29], the dynamic representations described in <ref> [18, 19, 61] </ref>, etc. Each representation presents advantages and disadvantages, and, typically, some may be more suitable than others for a specific application.
Reference: [19] <author> D. Eppstein, G. F. Italiano, R. Tamassia, R. E. Tarjan, J. Westbrook, and M. Yung. </author> <title> Corrigendum (Maintenance of a minimum spanning forest in a dynamic plane graph). </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <address> 15(1):173, </address> <year> 1993. </year>
Reference-contexts: There exist several possible representations for an embedded planar graph, e.g., the DCEL representation [54], the quad-edge representation [29], the dynamic representations described in <ref> [18, 19, 61] </ref>, etc. Each representation presents advantages and disadvantages, and, typically, some may be more suitable than others for a specific application.
Reference: [20] <author> A. Fabri, G.-J. Giezeman, L. Kettner, S. Schirra, and S. Schonherr. </author> <title> The CGAL kernel: A basis for geometric computation. </title> <editor> In M. C. Lin and D. Manocha, editors, </editor> <booktitle> Applied Computational Geometry (Proc. WACG '96), volume 1148 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 191-202. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 37 </month>
Reference-contexts: In the design phase, we have taken into account the experience of other similar efforts, such as the Library of Efficient Data structures and Algorithms (LEDA) [7, 43, 44, 46] and the more recent Computational Geometry Algorithms Library (CGAL) <ref> [20, 50, 57, 65] </ref>. Two are the major goals of the project: * To provide researchers in computational geometry with a framework for algorithm engineering, with a specific emphasis on geometric computing. <p> For example, exact rational arithmetic and support for data structures that efficiently work with secondary storage should be provided. Another important reliability criterion is 2 the detailed handling of all inputs, including degenerate ones <ref> [20, 62] </ref>. Note, however, that a trade-off exists between reliability and other criteria, in particular efficiency. Openness Multiple implementations should be provided for each data structure. <p> Functionality LEDA implements an impressive collection of modern data structures and algorithms. Correctness Checking Pioneering work on correctness checkers has been done within LEDA [21, 45]. 3.4 CGAL CGAL and LEDA are separate but complementary initiatives. CGAL <ref> [20, 50, 57, 65] </ref>, the Computational Geometry Algorithms Library, is a recently started initiative involving seven research centers and funded by the European Community. CGAL is still work in progress, but a first version has been recently released.
Reference: [21] <author> U. Finkler and K. Mehlhorn. </author> <title> Checking priority queues. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: On the other hand, program testing cannot guarantee the correctness of a program, and formal proof of correctness do not seem to be applicable in practice. As a possible solution to this impasse, the concept of program checking has been recently introduced (see, e.g., <ref> [5, 6, 11, 21, 45] </ref>. Rather than proving the correctness of the program for any possible input, each time the program is run (with a specific input), the correctness of its output (with respect to that input) is checked. <p> Functionality LEDA implements an impressive collection of modern data structures and algorithms. Correctness Checking Pioneering work on correctness checkers has been done within LEDA <ref> [21, 45] </ref>. 3.4 CGAL CGAL and LEDA are separate but complementary initiatives. CGAL [20, 50, 57, 65], the Computational Geometry Algorithms Library, is a recently started initiative involving seven research centers and funded by the European Community.
Reference: [22] <author> S. Fortune. </author> <title> Numerical stability of algorithms for 2D Delaunay triangulations. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> 5(1&2):193-213, 1995. 
Reference: [23] <author> S. Fortune and C. J. van Wyk. </author> <title> Static analysis yields efficient exact integer arithmetic for computational geometry. </title> <journal> ACM Trans. Graph., </journal> <volume> 15(3) </volume> <pages> 223-248, </pages> <year> 1996. </year>
Reference: [24] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction The GeomLib project addresses the important objective of developing an easy to use, reliable, open library of robust and efficient geometric algorithms. Recent object-oriented design concepts such as design patterns <ref> [24] </ref> and algorithm abstraction [63] are extensively used throughout the entire project. <p> The JDSL project is described in greater detail in [25, 27]. Our design relies on various object-oriented design concepts, such as object, class, interface, inheritance, polymorphism, dynamic binding and type checking, and design pattern. We briefly review them in Appendix A, and refer the interested reader to, e.g., <ref> [9, 24, 60, 66] </ref>. Of particular importance in the design of JDSL/GeomLib is the concept of interface. Ideally, users of JDSL/GeomLib use interfaces rather than classes as object types; actual classes need only be specified when creating an object. <p> Of particular importance in the design of JDSL/GeomLib is the concept of interface. Ideally, users of JDSL/GeomLib use interfaces rather than classes as object types; actual classes need only be specified when creating an object. And if the abstract class factory design pattern <ref> [24] </ref> is implemented, also the creation of an object takes place through an interface. Interfaces are general, while classes are specialized: thus, using interfaces instead of specific classes creates more general code, allowing different classes, implementing the same interface, to be used interchangeably. <p> It provides methods such as positions (), returning an enumeration of the positions in the container and replace (Position,Object), replacing the element stored in the position with a new object. Decorable This interface is used to implement the decorator design pattern <ref> [24] </ref>. The motivation of this pattern is to attach additional, named attributes to individual objects rather than to an entire interface or class. In our case the type of the objects we want to decorate is Position, which suitably extends Decorable. <p> Its only two methods are dim (), returning the dimension of the geometric object, and geomFactory (), returning the geometric abstract factory that created the geometric object. It is extended by the "typing" interfaces GeomObject2D and GeomObject3D. GeomFactory2D This interface implements the abstract factory design pattern <ref> [24] </ref> for the basic geometric objects. It provides methods such as newPoint (int,int), newSegment (Point2D,Point2D), newCircle (Point2D,Point2D,Point2D), etc. Geometric abstract factories provide a common interface for creating families of related or dependent geometric objects without specifying their classes.
Reference: [25] <author> N. Gelfand, M. T. Goodrich, and R. Tamassia. </author> <title> Teaching data structure design patterns. </title> <note> In Proc. 29th ACM SIGCSE Tech. Sympos., 1998 (to appear). </note>
Reference-contexts: GeomLib is part of a larger project, named JDSL <ref> [25, 27] </ref>, aimed at constructing an innovative library of data structures and algorithms using the Java programming language. In designing those parts of JDSL necessary for the case study, we have defined a collection of interfaces that describe some fundamental data structures used in geometric computing, suitably arranged in hierarchies. <p> Thus, in this section, we will review only those aspects of JDSL/GeomLib that are relevant to the case study. The JDSL project is described in greater detail in <ref> [25, 27] </ref>. Our design relies on various object-oriented design concepts, such as object, class, interface, inheritance, polymorphism, dynamic binding and type checking, and design pattern. We briefly review them in Appendix A, and refer the interested reader to, e.g., [9, 24, 60, 66]. <p> A recent trend in the study of fundamental data structures is to present them under a general framework. In fact, most of them can be viewed as containers that store a collection of heterogeneous objects, called the elements of the container <ref> [25, 27, 47, 48] </ref>. This component is further divided into two subcomponents, one for the basic data structures and one for the combinatorial graph.
Reference: [26] <author> A. S. Glassner, </author> <title> editor. Graphics Gems. </title> <publisher> Academic Press, </publisher> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: We evaluate previous work according to the requirements presented in Section 2. 3.1 Gems and recipes "Graphics gems" <ref> [2, 26, 31, 35, 51] </ref> and "numerical recipes" [55] have proved very useful in computer graphics and scientific computing, respectively. Through books and available source code, the gems/recipes approach has disseminated efficient and reliable procedures for computer graphics and scientific computing to a wide audience.
Reference: [27] <author> M. T. Goodrich and R. Tamassia. </author> <title> Data Structures and Algorithms in Java. </title> <publisher> John Wiley, </publisher> <address> New York, NY, </address> <note> 1998 (to appear). </note>
Reference-contexts: GeomLib is part of a larger project, named JDSL <ref> [25, 27] </ref>, aimed at constructing an innovative library of data structures and algorithms using the Java programming language. In designing those parts of JDSL necessary for the case study, we have defined a collection of interfaces that describe some fundamental data structures used in geometric computing, suitably arranged in hierarchies. <p> Thus, in this section, we will review only those aspects of JDSL/GeomLib that are relevant to the case study. The JDSL project is described in greater detail in <ref> [25, 27] </ref>. Our design relies on various object-oriented design concepts, such as object, class, interface, inheritance, polymorphism, dynamic binding and type checking, and design pattern. We briefly review them in Appendix A, and refer the interested reader to, e.g., [9, 24, 60, 66]. <p> A recent trend in the study of fundamental data structures is to present them under a general framework. In fact, most of them can be viewed as containers that store a collection of heterogeneous objects, called the elements of the container <ref> [25, 27, 47, 48] </ref>. This component is further divided into two subcomponents, one for the basic data structures and one for the combinatorial graph.
Reference: [28] <author> L. J. Guibas, D. Salesin, and J. Stolfi. </author> <title> Epsilon geometry: building robust algorithms from imprecise computations. </title> <booktitle> In Proc. 5th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 208-217, </pages> <year> 1989. </year>
Reference: [29] <author> L. J. Guibas and J. Stolfi. </author> <title> Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams. </title> <journal> ACM Trans. Graph., </journal> <volume> 4(2) </volume> <pages> 74-123, </pages> <year> 1985. </year>
Reference-contexts: There exist several possible representations for an embedded planar graph, e.g., the DCEL representation [54], the quad-edge representation <ref> [29] </ref>, the dynamic representations described in [18, 19, 61], etc. Each representation presents advantages and disadvantages, and, typically, some may be more suitable than others for a specific application.
Reference: [30] <author> A. Hausner and D. Dobkin. </author> <title> Making geometry visible: An introduction to the animation of geometric algorithms. </title> <editor> In J.-R. Sack and J. Urrutia, editors, </editor> <booktitle> Handbook on Computational Geometry. </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <note> 1998 (to appear). </note>
Reference-contexts: In particular, they include: * The design and implementation of other geometric algorithmic patterns, e.g., plane-sweep, space-sweep, and randomized incremental construction. * The implementation of a system of arithmetic filters in the arithmetic component. 35 * The development of applets for the animation of geometric algorithms (see <ref> [30] </ref> for an intro- duction to this topic). * To investigate the applicability of the binary space partition search algorithmic pattern to geographical information systems. 8 Acknowledgments We would like to thank Franco Preparata and Mike Goodrich for their encouragement and support, Jim Baker for his collaboration in writing a preliminary
Reference: [31] <author> P. Heckbert, </author> <title> editor. Graphics Gems IV. </title> <publisher> Academic Press, </publisher> <address> Boston, MA, </address> <year> 1994. </year>
Reference-contexts: We evaluate previous work according to the requirements presented in Section 2. 3.1 Gems and recipes "Graphics gems" <ref> [2, 26, 31, 35, 51] </ref> and "numerical recipes" [55] have proved very useful in computer graphics and scientific computing, respectively. Through books and available source code, the gems/recipes approach has disseminated efficient and reliable procedures for computer graphics and scientific computing to a wide audience.
Reference: [32] <author> C. M. Hoffmann. </author> <title> The problems of accuracy and robustness in geometric computation. </title> <journal> IEEE Computer, </journal> <volume> 22(3) </volume> <pages> 31-41, </pages> <year> 1989. </year>
Reference: [33] <author> C. M. Hoffmann, J. E. Hopcroft, and M. T. Karasick. </author> <title> Robust set operations on polyhedral solids. </title> <journal> IEEE Comput. Graph. Appl., </journal> <volume> 9(6) </volume> <pages> 50-59, </pages> <year> 1989. </year>
Reference: [34] <author> J. E. Hopcroft and P. J. Kahn. </author> <title> A paradigm for robust geometric algorithms. </title> <journal> Algorithmica, </journal> <volume> 7(4) </volume> <pages> 339-380, </pages> <year> 1992. </year>
Reference: [35] <author> D. Kirk, </author> <title> editor. Graphics Gems III. </title> <publisher> Academic Press, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: We evaluate previous work according to the requirements presented in Section 2. 3.1 Gems and recipes "Graphics gems" <ref> [2, 26, 31, 35, 51] </ref> and "numerical recipes" [55] have proved very useful in computer graphics and scientific computing, respectively. Through books and available source code, the gems/recipes approach has disseminated efficient and reliable procedures for computer graphics and scientific computing to a wide audience.
Reference: [36] <author> D. G. Kirkpatrick. </author> <title> Optimal search in planar subdivisions. </title> <journal> SIAM J. Comput., </journal> <volume> 12(1) </volume> <pages> 28-35, </pages> <year> 1983. </year>
Reference-contexts: Both algorithms are very effective in practice, as reported in [14]. Finally, we will show how the binary space partition search can be used as an algorithmic component in a third algorithm, the triangulation refinement method <ref> [36] </ref>. These algorithms have in common a recursive decomposition of the search space of logarithmic depth. 6.1.1 The Chain Method In this section, we will consider the chain method for planar point location by Lee and Preparata [39]. <p> that, it is decomposed using, e.g., horizontal lines and edges, as in the trapezoid method. 6.1.3 The Triangulation Refinement Method In this section, we will show how the binary space partition search can be used as an algorithmic component in another point location algorithm, the triangulation refinement method of Kirk-patrick <ref> [36] </ref>. We recall that, in this method, the search structure requires O (n) space, can be constructed in O (n log n) time, and allows O (log n) query time. The planar subdivision S is assumed to be a triangulation with exactly three external vertices.
Reference: [37] <author> D. E. Knuth. </author> <title> The Stanford GraphBase: A Platform for Combinatorial Computing. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1993. </year>
Reference-contexts: Ease of Use The library should be easy to use. Names of components and operations should be intuitive and standardized. Documentation should be integrated in the library. Knuth pioneered integration between code and documentation with the concept of "literate programming" (see, e.g., <ref> [37] </ref>). Note that the Java programming language provides this capability as part of its specification [1]. Efficiency The methodologies and techniques used in the design of the library (abstraction, generality, object-orientation) should introduce a low overhead with respect to an ad hoc program to solve a certain problem.
Reference: [38] <author> M. Laszlo. </author> <title> Computational Geometry and Computer Graphics in C++. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1996. </year>
Reference-contexts: Some small specialized libraries have been written for computational geometry, usually accompanying introductory textbooks (see e.g., <ref> [38, 49] </ref>). They are typically easy to use, but lack functionality. 4 3.3 LEDA LEDA [44, 46], the Library of Efficient Data Structures and Algorithms, was not designed with the exclusive goal of supporting geometric computing.
Reference: [39] <author> D. T. Lee and F. P. Preparata. </author> <title> Location of a point in a planar subdivision and its applications. </title> <journal> SIAM J. Comput., </journal> <volume> 6(3) </volume> <pages> 594-606, </pages> <year> 1977. </year>
Reference-contexts: In the rest of the section, we denote by n the number of vertices of S. We will first describe our design and implementation of a specific planar point location algorithm, the chain method <ref> [39, 16] </ref>, and later show how the same design can be applied to another algorithm, the trapezoid method [52]. Both algorithms are very effective in practice, as reported in [14]. <p> These algorithms have in common a recursive decomposition of the search space of logarithmic depth. 6.1.1 The Chain Method In this section, we will consider the chain method for planar point location by Lee and Preparata <ref> [39] </ref>. In particular, we will focus on its variant described in Chapter 11 of [15]. We recall that the search structure requires O (n) space, can be constructed in O (n log n) time, and allows O (log 2 n) query time.
Reference: [40] <author> T. Lindholm and F. Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1997. </year>
Reference: [41] <author> G. Liotta, F. P. Preparata, and R. Tamassia. </author> <title> Robust proximity queries: An illustration of degree-driven algorithm design. </title> <journal> SIAM J. Computing, </journal> <note> to appear. http://www.cs.brown.edu/cgc/papers/lpt-rpqid-.ps.gz. </note>
Reference-contexts: Efficiency of algorithms and data structures should not be evaluated only through the standard asymptotic analysis measures; constant factors should also be considered, together with new efficiency measures for geometric algorithms, such as the degree <ref> [41] </ref>. Reliability Although geometric algorithms are easier to express in the real-RAM model, issues such as robustness or the use of external memory should be addressed by a practical geometric library. For example, exact rational arithmetic and support for data structures that efficiently work with secondary storage should be provided. <p> The assumption of real number arithmetic has proved unrealistic, since digital computers do not exhibit such capability. On the other hand, exact rational arithmetic may excessively slow down computations. In light of these problems, the concepts of degree of a geometric algorithm <ref> [41] </ref> and of arithmetic filter [12] have been recently introduced. Informally, the degree of a geometric algorithm characterizes, up to a small additive constant, the arithmetic precision, i.e., the number of bits, required by the geometric algorithm. A more detailed discussion on the degree is given in Section 6.2. <p> Within the paradigm of exact computation (see, e.g., [3, 8, 67]), Liotta, Preparata, and Tamassia <ref> [41] </ref> have recently introduced the concept of degree of a geometric algorithm. The degree characterizes, up to a small additive constant, the arithmetic precision, i.e., the number of bits, required by a large class of geometric algorithms. <p> In <ref> [41] </ref>, the problem area of geometric proximity is considered as a test case. In particular, the point location problem in a Voronoi diagram with applications to proximity queries is addressed, and a new efficient and low-degree technique for answering this type of query is presented. <p> The derived points are rational numbers, and homogeneous coor-dinates (X; Y; W ) can be used for their exact representation. However, coordinates X and Y are 3b-bit integers, and coordinate W is a 2b-bit integer. As shown in <ref> [41] </ref>, this implies that, in an explicit Voronoi diagram, the discrimination of the query point against an edge (method leftRight (LinearCurve2D,Point2D) of interface GeomTester2D of GeomLib) has degree 6. The alternative approach proposed in [41] uses a different representation of the diagram, called implicit Voronoi diagram. <p> As shown in <ref> [41] </ref>, this implies that, in an explicit Voronoi diagram, the discrimination of the query point against an edge (method leftRight (LinearCurve2D,Point2D) of interface GeomTester2D of GeomLib) has degree 6. The alternative approach proposed in [41] uses a different representation of the diagram, called implicit Voronoi diagram. It consists of a topological component and a geometric component. The topological component is the underlying embedded planar graph of the Voronoi diagram. <p> We plan to use the prototype described in this paper to perform an experimental testing of point location queries in Voronoi diagrams, comparing the standard explicit representation of the diagrams with the implicit representation described in <ref> [41] </ref>. * The development of a collection of testers for the interfaces defined in JDSL/GeomLib. The purpose of these testers is to "certify" that a given class implements correctly an interface. * The implementation of the checker for verifying the consistency of planar subdivisions de scribed in [11].
Reference: [42] <editor> M. C. Loui et al. </editor> <booktitle> Strategic directions in research in theory of computing. ACM Comput. Surv., </booktitle> <volume> 28(4) </volume> <pages> 575-590, </pages> <year> 1996. </year>
Reference-contexts: In this context, GeomLib will be typically used for rapid prototyping and experimental studies of geometric algorithms. * To make computational geometry results available to the users in other areas, such as robotics, geographic information systems, mechanical engineering, computer graphics, etc. It has been noted <ref> [10, 42, 62] </ref> that to address applications from those areas is a strategic direction for computational geometry.
Reference: [43] <author> K. Mehlhorn, M. Muller, S. Naher, S. Schirra, M. Seel, C. Uhrig, and J. Ziegler. </author> <title> A computational basis for higher-dimensional computational geometry and applications. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 254-263, </pages> <year> 1997. </year>
Reference-contexts: Recent object-oriented design concepts such as design patterns [24] and algorithm abstraction [63] are extensively used throughout the entire project. In the design phase, we have taken into account the experience of other similar efforts, such as the Library of Efficient Data structures and Algorithms (LEDA) <ref> [7, 43, 44, 46] </ref> and the more recent Computational Geometry Algorithms Library (CGAL) [20, 50, 57, 65]. Two are the major goals of the project: * To provide researchers in computational geometry with a framework for algorithm engineering, with a specific emphasis on geometric computing. <p> However, this is one of its principal uses and the focus of much of the continuing research activity <ref> [7, 43] </ref>. It is available at http://www.mpi-sb.mpg.de/LEDA. Ease of Use LEDA's data structures and algorithms are well documented with respect to their space and time complexity. Every new release is accompanied by a detailed user manual. Efficiency LEDA provides implementations of many asymptotically optimal algorithms. <p> External reuse is more limited, perhaps because of portability concerns. Modularity LEDA is evolving from an initial flat design to a layered one, as exemplified by the exact, higher-dimensional geometric kernel recently incorporated <ref> [43] </ref>. The geometric kernel is composed by an arithmetic layer, a linear algebra layer, and a geometric layer. 1 Templates are a code generation mechanism of the C++ programming language that allows the definition of functions and classes to be parameterized with respect to one or more data types.
Reference: [44] <author> K. Mehlhorn and S. Naher. LEDA: </author> <title> A platform for combinatorial and geometric computing. </title> <journal> Commun. ACM, </journal> <volume> 38(1) </volume> <pages> 96-102, </pages> <year> 1995. </year>
Reference-contexts: Recent object-oriented design concepts such as design patterns [24] and algorithm abstraction [63] are extensively used throughout the entire project. In the design phase, we have taken into account the experience of other similar efforts, such as the Library of Efficient Data structures and Algorithms (LEDA) <ref> [7, 43, 44, 46] </ref> and the more recent Computational Geometry Algorithms Library (CGAL) [20, 50, 57, 65]. Two are the major goals of the project: * To provide researchers in computational geometry with a framework for algorithm engineering, with a specific emphasis on geometric computing. <p> Some small specialized libraries have been written for computational geometry, usually accompanying introductory textbooks (see e.g., [38, 49]). They are typically easy to use, but lack functionality. 4 3.3 LEDA LEDA <ref> [44, 46] </ref>, the Library of Efficient Data Structures and Algorithms, was not designed with the exclusive goal of supporting geometric computing. However, this is one of its principal uses and the focus of much of the continuing research activity [7, 43]. It is available at http://www.mpi-sb.mpg.de/LEDA.
Reference: [45] <author> K. Mehlhorn, S. Naher, T. Schilz, S. Schirra, M. Seel, R. Seidel, and C. Uhrig. </author> <title> Checking geometric programs or verification of geometric structures. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 159-165, </pages> <year> 1996. </year>
Reference-contexts: On the other hand, program testing cannot guarantee the correctness of a program, and formal proof of correctness do not seem to be applicable in practice. As a possible solution to this impasse, the concept of program checking has been recently introduced (see, e.g., <ref> [5, 6, 11, 21, 45] </ref>. Rather than proving the correctness of the program for any possible input, each time the program is run (with a specific input), the correctness of its output (with respect to that input) is checked. <p> Program checkers should be integrated within the library to boost confidence in the algorithm implementations. However, as noted in <ref> [45] </ref>, a trade-off exists between correctness checking and other criteria, such as efficiency and extensibility. <p> Functionality LEDA implements an impressive collection of modern data structures and algorithms. Correctness Checking Pioneering work on correctness checkers has been done within LEDA <ref> [21, 45] </ref>. 3.4 CGAL CGAL and LEDA are separate but complementary initiatives. CGAL [20, 50, 57, 65], the Computational Geometry Algorithms Library, is a recently started initiative involving seven research centers and funded by the European Community.
Reference: [46] <author> K. Mehlhorn, S. Naher, and C. Uhrig. </author> <title> The LEDA platform for combinatorial and geometric computing. </title> <editor> In P. Degano, R. Gorrieri, and A. Marchetti-Spaccamela, editors, </editor> <booktitle> Automata, Languages and Programming (Proc. ICALP '97), volume 1256 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 7-16. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Recent object-oriented design concepts such as design patterns [24] and algorithm abstraction [63] are extensively used throughout the entire project. In the design phase, we have taken into account the experience of other similar efforts, such as the Library of Efficient Data structures and Algorithms (LEDA) <ref> [7, 43, 44, 46] </ref> and the more recent Computational Geometry Algorithms Library (CGAL) [20, 50, 57, 65]. Two are the major goals of the project: * To provide researchers in computational geometry with a framework for algorithm engineering, with a specific emphasis on geometric computing. <p> Some small specialized libraries have been written for computational geometry, usually accompanying introductory textbooks (see e.g., [38, 49]). They are typically easy to use, but lack functionality. 4 3.3 LEDA LEDA <ref> [44, 46] </ref>, the Library of Efficient Data Structures and Algorithms, was not designed with the exclusive goal of supporting geometric computing. However, this is one of its principal uses and the focus of much of the continuing research activity [7, 43]. It is available at http://www.mpi-sb.mpg.de/LEDA.
Reference: [47] <author> D. R. Musser and A. Saini. </author> <title> STL Tutorial and Reference Guide: C++ Programming with the Standard Template Library. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1996. </year>
Reference-contexts: Modularity CGAL does not hierarchically organize geometric objects, but has a layered design comparable to LEDA's. It supports interoperation between geometric objects through the container mechanism of the Standard Template Library <ref> [47] </ref>. Functionality The kernel contains a large collection of 2D and 3D primitive geometric objects and operations on them. Both Cartesian and homogeneous coordinate systems are provided. Implementations of various basic geometric data structures and algorithms are contained in the basic library. <p> A recent trend in the study of fundamental data structures is to present them under a general framework. In fact, most of them can be viewed as containers that store a collection of heterogeneous objects, called the elements of the container <ref> [25, 27, 47, 48] </ref>. This component is further divided into two subcomponents, one for the basic data structures and one for the combinatorial graph.
Reference: [48] <author> ObjectSpace. JGL, </author> <title> the generic collection library for Java. </title> <address> http://www.objectspace.com/JGL. </address>
Reference-contexts: A recent trend in the study of fundamental data structures is to present them under a general framework. In fact, most of them can be viewed as containers that store a collection of heterogeneous objects, called the elements of the container <ref> [25, 27, 47, 48] </ref>. This component is further divided into two subcomponents, one for the basic data structures and one for the combinatorial graph.
Reference: [49] <author> J. O'Rourke. </author> <title> Computational Geometry in C. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1994. </year>
Reference-contexts: Some small specialized libraries have been written for computational geometry, usually accompanying introductory textbooks (see e.g., <ref> [38, 49] </ref>). They are typically easy to use, but lack functionality. 4 3.3 LEDA LEDA [44, 46], the Library of Efficient Data Structures and Algorithms, was not designed with the exclusive goal of supporting geometric computing.
Reference: [50] <author> M. H. Overmars. </author> <title> Designing the Computational Geometry Algorithms Library CGAL. </title> <editor> In M. C. Lin and D. Manocha, editors, </editor> <booktitle> Applied Computational Geometry (Proc. WACG '96), volume 1148 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 53-58. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: In the design phase, we have taken into account the experience of other similar efforts, such as the Library of Efficient Data structures and Algorithms (LEDA) [7, 43, 44, 46] and the more recent Computational Geometry Algorithms Library (CGAL) <ref> [20, 50, 57, 65] </ref>. Two are the major goals of the project: * To provide researchers in computational geometry with a framework for algorithm engineering, with a specific emphasis on geometric computing. <p> Functionality LEDA implements an impressive collection of modern data structures and algorithms. Correctness Checking Pioneering work on correctness checkers has been done within LEDA [21, 45]. 3.4 CGAL CGAL and LEDA are separate but complementary initiatives. CGAL <ref> [20, 50, 57, 65] </ref>, the Computational Geometry Algorithms Library, is a recently started initiative involving seven research centers and funded by the European Community. CGAL is still work in progress, but a first version has been recently released.
Reference: [51] <editor> A. W. Paeth, editor. Graphics Gems V. </editor> <publisher> Academic Press, </publisher> <address> Boston, MA, </address> <year> 1995. </year>
Reference-contexts: We evaluate previous work according to the requirements presented in Section 2. 3.1 Gems and recipes "Graphics gems" <ref> [2, 26, 31, 35, 51] </ref> and "numerical recipes" [55] have proved very useful in computer graphics and scientific computing, respectively. Through books and available source code, the gems/recipes approach has disseminated efficient and reliable procedures for computer graphics and scientific computing to a wide audience.
Reference: [52] <author> F. P. Preparata. </author> <title> A new approach to planar point location. </title> <journal> SIAM J. Comput., </journal> <volume> 10(3) </volume> <pages> 473-482, </pages> <year> 1981. </year>
Reference-contexts: We will first describe our design and implementation of a specific planar point location algorithm, the chain method [39, 16], and later show how the same design can be applied to another algorithm, the trapezoid method <ref> [52] </ref>. Both algorithms are very effective in practice, as reported in [14]. Finally, we will show how the binary space partition search can be used as an algorithmic component in a third algorithm, the triangulation refinement method [36]. <p> of the horizontal subchain tree contains a reference to an EdgeRegion object (except the first and last leaves), and each internal node contains a reference to a VertexRegion object. 6.1.2 The Trapezoid Method In this section, we will briefly describe another planar point location algorithm, the trapezoid method of Preparata <ref> [52] </ref>, through the same algorithmic pattern used for the chain method. We recall that, in the trapezoid method, the search structure requires O (n log n) space, can be constructed in O (n log n) time, and allows O (log n) query time.
Reference: [53] <author> F. P. Preparata. </author> <title> Planar point location revisited. </title> <journal> Internat. J. Found. Comput. Sci., </journal> <volume> 1(1) </volume> <pages> 71-86, </pages> <year> 1990. </year>
Reference-contexts: Planar point location is a fundamental search operation in computational geometry, and has been the target of substantial research. A survey on algorithms for planar point location is presented in <ref> [53] </ref>. We briefly recall the problem statement. Let S be a planar subdivision, with edges mapped to straight-line segments.
Reference: [54] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: There exist several possible representations for an embedded planar graph, e.g., the DCEL representation <ref> [54] </ref>, the quad-edge representation [29], the dynamic representations described in [18, 19, 61], etc. Each representation presents advantages and disadvantages, and, typically, some may be more suitable than others for a specific application.
Reference: [55] <author> W. H. Press, B. P. Flannery, S. A. Teukolsky, and W. T. Vetterling. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, 2nd edition, </address> <year> 1993. </year>
Reference-contexts: We evaluate previous work according to the requirements presented in Section 2. 3.1 Gems and recipes "Graphics gems" [2, 26, 31, 35, 51] and "numerical recipes" <ref> [55] </ref> have proved very useful in computer graphics and scientific computing, respectively. Through books and available source code, the gems/recipes approach has disseminated efficient and reliable procedures for computer graphics and scientific computing to a wide audience.
Reference: [56] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and J. Rumbaugh. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: The separator tree, chain tree, and horizontal subchain tree search structures are completely encapsulated in the search statuses. The conceptual model of the algorithmic pattern is shown in Fig 6, using a formalism inspired by the Object Modeling Technique (OMT) <ref> [56] </ref>: rounded rectangles represent interfaces, rectangles represent classes, dashed lines connect classes to the interfaces they implement, and solid lines connect interfaces (classes) to the interfaces (classes) they extend. We have captured the main aspects of the algorithmic pattern in the five following Java interfaces.
Reference: [57] <author> S. Schirra. </author> <title> Designing a computational geometry algorithms library. </title> <booktitle> Lecture Notes for Advanced School on Algorithmic Foundations of Geographic Information Systems, </booktitle> <address> CISM, Udine, Italy, </address> <month> September </month> <year> 1996. </year> <note> http://www.cs.ruu.nl/CGAL/Information/Papers/udine96-ss.ps.gz. </note>
Reference-contexts: In the design phase, we have taken into account the experience of other similar efforts, such as the Library of Efficient Data structures and Algorithms (LEDA) [7, 43, 44, 46] and the more recent Computational Geometry Algorithms Library (CGAL) <ref> [20, 50, 57, 65] </ref>. Two are the major goals of the project: * To provide researchers in computational geometry with a framework for algorithm engineering, with a specific emphasis on geometric computing. <p> Functionality LEDA implements an impressive collection of modern data structures and algorithms. Correctness Checking Pioneering work on correctness checkers has been done within LEDA [21, 45]. 3.4 CGAL CGAL and LEDA are separate but complementary initiatives. CGAL <ref> [20, 50, 57, 65] </ref>, the Computational Geometry Algorithms Library, is a recently started initiative involving seven research centers and funded by the European Community. CGAL is still work in progress, but a first version has been recently released.
Reference: [58] <author> J. R. Shewchuk. </author> <title> Robust adaptive floating-point geometric predicates. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 141-150, </pages> <year> 1996. </year>
Reference: [59] <author> K. Sugihara and M. Iri. </author> <title> A robust topology-oriented incremental algorithm for Voronoi diagrams. </title> <journal> In-ternat. J. Comput. Geom. Appl., </journal> <volume> 4(2) </volume> <pages> 179-228, </pages> <year> 1994. </year>
Reference: [60] <author> A. Taivalsaari. </author> <title> On the notion of inheritance. </title> <journal> ACM Comput. Surv., </journal> <volume> 28(3) </volume> <pages> 438-479, </pages> <year> 1996. </year>
Reference-contexts: The JDSL project is described in greater detail in [25, 27]. Our design relies on various object-oriented design concepts, such as object, class, interface, inheritance, polymorphism, dynamic binding and type checking, and design pattern. We briefly review them in Appendix A, and refer the interested reader to, e.g., <ref> [9, 24, 60, 66] </ref>. Of particular importance in the design of JDSL/GeomLib is the concept of interface. Ideally, users of JDSL/GeomLib use interfaces rather than classes as object types; actual classes need only be specified when creating an object.
Reference: [61] <author> R. Tamassia. </author> <title> On-line planar graph embedding. </title> <journal> J. Algorithms, </journal> <volume> 21(2) </volume> <pages> 201-239, </pages> <year> 1996. </year>
Reference-contexts: There exist several possible representations for an embedded planar graph, e.g., the DCEL representation [54], the quad-edge representation [29], the dynamic representations described in <ref> [18, 19, 61] </ref>, etc. Each representation presents advantages and disadvantages, and, typically, some may be more suitable than others for a specific application.
Reference: [62] <author> R. Tamassia et al. </author> <title> Strategic directions in computational geometry. </title> <journal> ACM Comput. Surv., </journal> <volume> 28(4) </volume> <pages> 591-606, </pages> <year> 1996. </year>
Reference-contexts: In this context, GeomLib will be typically used for rapid prototyping and experimental studies of geometric algorithms. * To make computational geometry results available to the users in other areas, such as robotics, geographic information systems, mechanical engineering, computer graphics, etc. It has been noted <ref> [10, 42, 62] </ref> that to address applications from those areas is a strategic direction for computational geometry. <p> For example, exact rational arithmetic and support for data structures that efficiently work with secondary storage should be provided. Another important reliability criterion is 2 the detailed handling of all inputs, including degenerate ones <ref> [20, 62] </ref>. Note, however, that a trade-off exists between reliability and other criteria, in particular efficiency. Openness Multiple implementations should be provided for each data structure.
Reference: [63] <author> R. Tamassia, M. T. Goodrich, S. P. Reiss, and Y. Amir. </author> <title> A software platform and network environment for geometric computing. </title> <type> Manuscript, </type> <institution> Center for Geometric Computing, </institution> <year> 1996. </year>
Reference-contexts: 1 Introduction The GeomLib project addresses the important objective of developing an easy to use, reliable, open library of robust and efficient geometric algorithms. Recent object-oriented design concepts such as design patterns [24] and algorithm abstraction <ref> [63] </ref> are extensively used throughout the entire project. <p> The use of algorithm abstraction for geometric software has been recently proposed <ref> [63] </ref>. This term indicates the abstraction process aimed at the implementation of sophisticated algorithms as reusable software objects. It goes beyond both procedural abstraction (structured programming) and data abstraction (object-oriented programming), by viewing algorithms as objects that can be manipulated at the programming language level.
Reference: [64] <author> P. van Oosterom. </author> <title> Reactive Data Structures for Geographic Information Systems. </title> <publisher> Oxford University Press, Oxford, </publisher> <address> England, </address> <year> 1993. </year> <month> 39 </month>
Reference-contexts: Of particular importance, in geometric computing, is the choice of the data types. Possible examples are the arithmetic representation for geometric objects, or the use of multilevel spatial data descriptions, providing "zooming" capabilities, in geographical information systems (see, e.g., <ref> [4, 64] </ref>). Extensibility The architecture of a library should be extensible by the decentralized contributions of the community of its users, while maintaining evolving standards that enable the contributions to interoperate. Extensible architectures should be contrasted with monolithic ones. <p> For some other applications it may be important to easily access the dual graph. Geographical information systems require representations specifically designed for efficient secondary storage access or for multilevel/multiresolution access (see, e.g., <ref> [4, 64] </ref>). The existing implementation of the EmbeddedPlanarGraph interface is based 11 on the incidence graph representation described in Chapter 11 of [15].
Reference: [65] <author> R. C. Veltkamp. </author> <title> Generic programming in CGAL, the Computational Geometry Algorithms Library. </title> <editor> In F. Arbabm and P. Slusallek, editors, </editor> <booktitle> Proc. 6th Eurographics Workshop on Programming Paradigms in Graphics, </booktitle> <year> 1997. </year>
Reference-contexts: In the design phase, we have taken into account the experience of other similar efforts, such as the Library of Efficient Data structures and Algorithms (LEDA) [7, 43, 44, 46] and the more recent Computational Geometry Algorithms Library (CGAL) <ref> [20, 50, 57, 65] </ref>. Two are the major goals of the project: * To provide researchers in computational geometry with a framework for algorithm engineering, with a specific emphasis on geometric computing. <p> Functionality LEDA implements an impressive collection of modern data structures and algorithms. Correctness Checking Pioneering work on correctness checkers has been done within LEDA [21, 45]. 3.4 CGAL CGAL and LEDA are separate but complementary initiatives. CGAL <ref> [20, 50, 57, 65] </ref>, the Computational Geometry Algorithms Library, is a recently started initiative involving seven research centers and funded by the European Community. CGAL is still work in progress, but a first version has been recently released.
Reference: [66] <author> P. Wegner. </author> <title> Concepts and paradigms of object-oriented programming. </title> <journal> ACM OOPS Messenger, </journal> <volume> 1(1) </volume> <pages> 7-87, </pages> <year> 1990. </year>
Reference-contexts: The JDSL project is described in greater detail in [25, 27]. Our design relies on various object-oriented design concepts, such as object, class, interface, inheritance, polymorphism, dynamic binding and type checking, and design pattern. We briefly review them in Appendix A, and refer the interested reader to, e.g., <ref> [9, 24, 60, 66] </ref>. Of particular importance in the design of JDSL/GeomLib is the concept of interface. Ideally, users of JDSL/GeomLib use interfaces rather than classes as object types; actual classes need only be specified when creating an object.
Reference: [67] <author> C. Yap. </author> <title> Towards exact geometric computation. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 7(1) </volume> <pages> 3-23, </pages> <year> 1997. </year>
Reference-contexts: Also, the efficiency of the geometric algorithms must be evaluated in a finer framework than the conventional asymptotic analysis: in particular, constant factors dependent on the precision requirements of the numerical computations should be taken into account. Within the paradigm of exact computation (see, e.g., <ref> [3, 8, 67] </ref>), Liotta, Preparata, and Tamassia [41] have recently introduced the concept of degree of a geometric algorithm. The degree characterizes, up to a small additive constant, the arithmetic precision, i.e., the number of bits, required by a large class of geometric algorithms.
Reference: [68] <author> C. K. Yap and T. Dube. </author> <title> The exact computation paradigm. </title> <editor> In D.-Z. Du and F. K. Hwang, editors, </editor> <booktitle> Computing in Euclidean Geometry, volume 1 of Lecture Notes Series on Computing, </booktitle> <pages> pages 452-492. </pages> <publisher> World Scientific Press, </publisher> <address> Singapore, 2nd edition, </address> <year> 1995. </year> <month> 40 </month>
References-found: 68

