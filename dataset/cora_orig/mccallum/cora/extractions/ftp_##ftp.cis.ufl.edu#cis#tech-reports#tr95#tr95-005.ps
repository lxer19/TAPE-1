URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr95/tr95-005.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr95-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Asynchronous Parallel Discrete Event Simulation  
Author: Yi-Bing Lin and Paul A. Fishwick, senior member 
Keyword: parallel algorithm, distributed simulation, synchronization, virtual time, network communications  
Date: 1995 1  
Note: IEEE TRANSACTIONS ON SYSTEMS, MAN AND CYBERNETICS, VOL. XX, NO. Y, MONTH  
Abstract: Complex models may have model components distributed over a network and generally require significant execution times. The field of parallel and distributed simulation has grown over the past fifteen years to accommodate the need of simulating the complex models using a distributed versus sequential method. In particular, asynchronous parallel discrete event simulation (PDES) has been widely studied, and yet we envision greater acceptance of this methodology as more readers are exposed to PDES introductions that carefully integrate real-world applications. With this in mind, we present two key methodologies (conservative and optimistic) which have been adopted as solutions to PDES systems. We discuss PDES terminology and methodology under the umbrella of the personal communications services application. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Fujimoto, </author> <title> R.M., "Parallel Discrete Event Simulation", </title> <journal> Communications of the ACM, </journal> <volume> vol. 33, no. 10, </volume> <pages> pp. 31-53, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: This is called jump forward or lazy reevaluation <ref> [1] </ref>. [Figure 14 about here.] In this case, LP C .ReceiveMessage () simply inserts m 5 in the input queue, and the pointer of the input queue points to m 5 . <p> The optimization techniques described in the paper are general and apply to other simulation applications such as battlefield simulation, VLSI simulation, queueing network simulation and computer architecture simulation. However, these optimization techniques may need to be tailored for specific applications. Many studies have devoted to this issue (see <ref> [1] </ref>, [2], [52], [53], [54] and references therein). The PCS example can be seen as being a member of a larger class of simulation model where one first discretizes the spatial domain into a grid, and then simulates moving entities from one grid cell to another.
Reference: [2] <author> Nicol, D. M. and Fujimoto, R. M., </author> <title> "Parallel simulation today", </title> <journal> Annals of Operations Research, </journal> <volume> vol. 53, </volume> <pages> pp. 249-286, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: The optimization techniques described in the paper are general and apply to other simulation applications such as battlefield simulation, VLSI simulation, queueing network simulation and computer architecture simulation. However, these optimization techniques may need to be tailored for specific applications. Many studies have devoted to this issue (see [1], <ref> [2] </ref>, [52], [53], [54] and references therein). The PCS example can be seen as being a member of a larger class of simulation model where one first discretizes the spatial domain into a grid, and then simulates moving entities from one grid cell to another.
Reference: [3] <author> Richter, R. and Walrand, </author> <title> J.C., "Distributed Simulation of Discrete Event Systems", </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 77, no. 1, </volume> <pages> pp. 99-113, </pages> <month> January </month> <year> 1989. </year>
Reference: [4] <author> Carothers, C., Fujimoto, R.M., Lin, Y.-B. and England, P., </author> <title> "Distributed Simulation of PCS Networks Using Time Warp", </title> <booktitle> Proc. International Workshop on Modeling, Analysis and Simulation of Computer and Telecommunication Systems, </booktitle> <pages> pp. 2-7, </pages> <year> 1994. </year>
Reference-contexts: Note that the portable p 1 migrates to LP B when m 4 is sent. (In GIT/Bellcore's PCS implementation <ref> [4] </ref>, a message is part of a portable object, and sending a message automatically migrates the corresponding portable object.) When LP B 's LVT advances to 16, it executes m 4 . The next portable move time is generated (which is 24). <p> In the state queue, the element with the largest times-tamp smaller than the GVT value (i.e., 8) must not be removed (see Figure 17). The other elements with times-tamps smaller than 8 are removed. C. Performance Evaluation The performance of an optimistic PCS PDES implementation has been investigated in <ref> [4] </ref>. In this study, a version of Time Warp has been developed that executes on 8 DEC 5000 workstations connected by an Ethernet.
Reference: [5] <author> Carothers, C., Lin, Y.-B. and Fujimoto, </author> <title> R.M., "A Re-dial Model for Personal Communications Services Network", </title> <note> To appear in 45th Vehicular Technology Conference, </note> <year> 1995. </year>
Reference: [6] <author> Fishwick, </author> <title> P.A., Simulation Model Design and Execution: Building Digital Worlds, </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: Such an environment should provides convenient tools to develop simulation application. Methods should also be provided to tailor general optimization techniques to fit a specific simulation application. We anticipate that these user-friendly environments can be constructed by the object-oriented models described in <ref> [6] </ref>. Acknowledgments C. Carothers and Y.C. Wong provided useful comments to improve the quality of this paper.
Reference: [7] <author> Peterson, J.L., </author> <title> Petri Net Theory and the Modeling of Systems, </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1981. </year>
Reference: [8] <author> Law, Averill M. and Kelton, David W., </author> <title> Simulation Modeling & Analysis, </title> <publisher> McGraw Hill, </publisher> <year> 1991, </year> <note> Second edition. </note>
Reference: [9] <author> Toffoli, T. and Margolus, N., </author> <title> Cellular Automata Machines: A New Environment for Modeling, </title> <publisher> MIT Press, </publisher> <address> 2nd edition, </address> <year> 1987. </year>
Reference: [10] <author> Fishwick, P.A. and Zeigler, B. P., </author> <title> "A Multimodel Methodology for Qualitative Model Engineering", </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> vol. 2, no. 1, </volume> <pages> pp. 52-81, </pages> <year> 1992. </year>
Reference: [11] <author> Fishwick, </author> <title> P.A., "A simulation environment for multimodeling", Discrete Event Dynamic Systems: </title> <journal> Theory and Applications, </journal> <volume> vol. 3, </volume> <pages> pp. 151-171, </pages> <year> 1993. </year>
Reference: [12] <author> Ebling, M., Di Loreto, M., Presley, M., Wieland, F. and Jeffer-son, D., </author> <title> "An Ant Foraging Model Implemented on the Time Warp Operating System", </title> <booktitle> Proc. 1991 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pp. 21-26, </pages> <month> March </month> <year> 1991. </year>
Reference: [13] <author> Hontalas, P., Beckman, B., Diloreto, M., Blume, L., Reiher, P., Sturdevant, K., Warren, L., Wedel, J., Wieland, F. and Jefferson, D., </author> <title> "Performance of the Colliding Pucks Simulation on the Time Warp Operating Systems (Part 1: Asynchronous Behavior & Sectoring)", </title> <booktitle> Proc. 1989 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pp. 3-7, </pages> <month> March </month> <year> 1989. </year>
Reference: [14] <author> Fujimoto, </author> <title> R.M., "Time Warp on a Shared Memory Multiprocessor", </title> <booktitle> Proc. 1989 International Conference on Parallel Processing, </booktitle> <volume> vol. Volume III, </volume> <pages> pp. 242-249, </pages> <month> August </month> <year> 1989. </year>
Reference: [15] <author> Ayani, R. and Rajaei, H., </author> <title> "Parallel simulation of a generalized cube multistage interconnection network", </title> <booktitle> Proc. 1990 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pp. 60-63, </pages> <month> January </month> <year> 1990. </year>
Reference: [16] <author> Thomas, G.S. and Zahorjan, J., </author> <title> "Parallel simulation of performance Petri Net: Extending the domain of parallel simulation", </title> <booktitle> Proc. 1991 Winter Simulation Conference, </booktitle> <pages> pp. 564-573, </pages> <year> 1991. </year>
Reference: [17] <author> Reed, D.A. and Malony, A., </author> <title> "Parallel Discrete Event Simulation: The Chandy-Misra Approach", </title> <booktitle> Proc. 1988 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pp. 8-13, </pages> <month> February </month> <year> 1988. </year>
Reference: [18] <author> Wieland, F., Hawley, L., Feinberg, A., Di Loreto, M., Blume, L., Reiher, P., Beckman, B., Hontalas, P., Bellenot, S. and Jeffer-son, D., </author> <title> "Distributed Combat Simulation and Time Warp: The Model and Its Performance", </title> <booktitle> Proc. 1989 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pp. 14-20, </pages> <month> March </month> <year> 1989. </year>
Reference: [19] <author> Soule, L. and Gupta, A., </author> <title> "An Evaluation of the Chandy-Misra-Bryant Algorithm for Digital Logic Simulation", </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> vol. 1, no. 4, </volume> <pages> pp. 308-347, </pages> <year> 1991. </year>
Reference: [20] <author> Beazner, D., Lomow, G. and Unger, B., </author> <title> "A parallel simulation environment based on Time Warp", </title> <note> To appear in International Journal in Computer Simulation, </note> <year> 1995. </year>
Reference: [21] <author> Turner, S. and Xu, M., </author> <title> "Performance evaluation of the bounded Time Warp algorithm", </title> <booktitle> The 6th Workshop on Parallel and Distributed Simulation, </booktitle> <year> 1992. </year>
Reference: [22] <author> Lubachevsky, B., </author> <title> "Efficient Distributed Event-Driven Simulations of Multiple-Loop Networks", </title> <journal> Communications of the ACM, </journal> <volume> vol. 21, no. 2, </volume> <month> March </month> <year> 1989. </year>
Reference: [23] <author> Ghosh, K., Panesar, K., Fujimoto, R.M. and Schwan, K., </author> <title> "PORTS: A parallel, optimistic, real-time simulator", </title> <booktitle> Proc. 8th Workshop on Parallel and Distributed Simulation, </booktitle> <year> 1994. </year>
Reference: [24] <author> Gaujal, G., Greenberg, A.G. and Nicol, </author> <title> D.M., "A sweep algorithm for massively parallel simulation of circuit-switched networks", </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 18, no. 4, </volume> <pages> pp. 484-500, </pages> <year> 1993. </year>
Reference: [25] <author> Cox, </author> <title> D.C., "Personal communications A viewpoint", </title> <journal> IEEE Commun. Mag., </journal> <volume> vol. 128, no. 11, </volume> <pages> pp. 8-20, </pages> <year> 1990. </year>
Reference: [26] <author> Cox, </author> <title> D.C., "A radio system proposal for widespread low-power tetherless communications", </title> <journal> IEEE Trans. Commun., </journal> <volume> vol. 39, no. 2, </volume> <pages> pp. 324-335, </pages> <month> February </month> <year> 1991. </year>
Reference: [27] <author> Glynn, P.W. and Heidelberger, P., </author> <title> "Analysis of Initial Transient Deletion for Parallel Steady-State Simulation", </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> vol. 13, no. 4, </volume> <pages> pp. 904-922, </pages> <year> 1992. </year>
Reference: [28] <author> Heidelberger, P., </author> <title> "Discrete Event Simulations and Parallel Processing: Statistical Properties", </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> vol. 9, no. 6, </volume> <pages> pp. 1114-1132, </pages> <month> November </month> <year> 1988. </year>
Reference: [29] <author> Lin, Y.-B., </author> <title> "Parallel Independent Replicated Simulation on A Network of Workstations", </title> <note> To appear in SIMULATION, </note> <year> 1995. </year>
Reference: [30] <author> Wong, W.C., </author> <title> "Packet reservation multiple access in a metropolitan microcellular radio environment", </title> <journal> IEEE J. Select. Areas Commun., </journal> <volume> vol. 11, no. 6, </volume> <pages> pp. 918-925, </pages> <year> 1993. </year>
Reference: [31] <author> Wong, W.C., </author> <title> "Dynamic allocation of packet reservation multiple access carriers", </title> <journal> IEEE Trans. Veh. Technol., </journal> <volume> vol. 42, no. 4, </volume> <year> 1993. </year>
Reference: [32] <author> Lin, Y.-B., </author> <title> "Determining the user locations for personal communications networks", </title> <journal> IEEE Trans. Veh. Technol., </journal> <volume> vol. 43, no. 3, </volume> <pages> pp. 466-473, </pages> <year> 1994. </year> <journal> 12 IEEE TRANSACTIONS ON SYSTEMS, MAN AND CYBERNETICS, </journal> <volume> VOL. XX, NO. </volume> <pages> Y, </pages> <month> MONTH </month> <year> 1995 </year>
Reference: [33] <author> Lin, Y.-B., Mohan, S. and Noerpel, A., </author> <title> "Channel Assignment Strategies for Hand-off and Initial Access fora PCS Network", </title> <journal> IEEE Personal Communications Magazine, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 47-56, </pages> <year> 1994. </year>
Reference: [34] <author> Lin, Y.-B., Mohan, S. and Noerpel, A., </author> <title> "Queueing Priority Channel Assignment Strategies for Handoff and Initial Access for a PCS Network", </title> <journal> IEEE Trans. Veh. Technol., </journal> <volume> vol. 43, no. 3, </volume> <pages> pp. 704-712, </pages> <year> 1994. </year>
Reference: [35] <author> Lin, Y.-B., Noerpel, A. and Harasty, D., </author> <title> "Sub-rating Channel Assignment Strategy for Hand-offs", </title> <note> To appear in IEEE Trans. </note> <institution> Veh. Technol., </institution> <year> 1995. </year>
Reference: [36] <author> Chandy, K.M. and Misra, J., </author> <title> "Distributed Simulation: A Case Study in Design and Verification of Distributed Programs", </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> vol. SE-5, no. 5, </volume> <pages> pp. 440-452, </pages> <month> September </month> <year> 1979. </year>
Reference-contexts: Thus the simulation result is not correct. To solve this problem, the executions of the logical processes must be synchronized. The remainder of this paper describes two popular asynchronous synchronization mechanisms, the conservative and the optimistic methods. IV. Conservative Method The conservative simulation <ref> [36] </ref> is conservative in the sense that it does not execute an event before it ensures that the local causality rule is satisfied. The conservative simulation follows two rules: the input waiting rule and the output waiting rule. <p> Thus the PDES is in the deadlock situation. Two deadlock resolutions have been proposed: deadlock avoidance <ref> [36] </ref> and deadlock detection/recovery [37], [38]. It has been shown [39] that the cost of deadlock detection/recovery is much higher than deadlock avoidance. This article will focus on the deadlock avoidance mechanism.
Reference: [37] <author> Chandy, K.M. and Misra, J., </author> <title> "Asynchronous Distributed Simulation via a Sequence of Parallel Computations", </title> <journal> Communications of the ACM, </journal> <volume> vol. 24, no. 11, </volume> <pages> pp. 198-206, </pages> <month> April </month> <year> 1981. </year>
Reference-contexts: Thus the PDES is in the deadlock situation. Two deadlock resolutions have been proposed: deadlock avoidance [36] and deadlock detection/recovery <ref> [37] </ref>, [38]. It has been shown [39] that the cost of deadlock detection/recovery is much higher than deadlock avoidance. This article will focus on the deadlock avoidance mechanism. In a PCS network, a portable is expected to reside in a cell for a period of time before it moves.
Reference: [38] <author> Misra, J., </author> <title> "Distributed Discrete-Event Simulation", </title> <journal> Computing Surveys, </journal> <volume> vol. 18, no. 1, </volume> <pages> pp. 39-65, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Thus the PDES is in the deadlock situation. Two deadlock resolutions have been proposed: deadlock avoidance [36] and deadlock detection/recovery [37], <ref> [38] </ref>. It has been shown [39] that the cost of deadlock detection/recovery is much higher than deadlock avoidance. This article will focus on the deadlock avoidance mechanism. In a PCS network, a portable is expected to reside in a cell for a period of time before it moves.
Reference: [39] <author> Fujimoto, </author> <title> R.M., "Performance Measurements of Distributed Simulation Strategies", </title> <booktitle> Proc. 1988 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pp. 14-20, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Thus the PDES is in the deadlock situation. Two deadlock resolutions have been proposed: deadlock avoidance [36] and deadlock detection/recovery [37], [38]. It has been shown <ref> [39] </ref> that the cost of deadlock detection/recovery is much higher than deadlock avoidance. This article will focus on the deadlock avoidance mechanism. In a PCS network, a portable is expected to reside in a cell for a period of time before it moves. <p> C. Exploiting Lookahead It is important to exploit the lookahead to improve the progress of a conservative simulation. Experimental studies have indicated that the larger the lookahead values, the better the performance of the conservative simulation <ref> [39] </ref>. Based on the techniques proposed in [40], [41], [42], we give three PCS examples for lookahead exploration. The first two examples assume single cell entrance and exit. The single entrance/exit PCS model has been used in modeling highway cellular phone systems [43].
Reference: [40] <author> Lin, Y.-B. and Lazowska, E.D., </author> <title> "Exploiting Lookahead in Parallel Simulation", </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 1, no. 4, </volume> <pages> pp. 457-469, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: C. Exploiting Lookahead It is important to exploit the lookahead to improve the progress of a conservative simulation. Experimental studies have indicated that the larger the lookahead values, the better the performance of the conservative simulation [39]. Based on the techniques proposed in <ref> [40] </ref>, [41], [42], we give three PCS examples for lookahead exploration. The first two examples assume single cell entrance and exit. The single entrance/exit PCS model has been used in modeling highway cellular phone systems [43]. The results can be easily generalized for multiple entrances and exits. <p> To compute the next lookahead value for an LP, it suf fices to sample the next N portable residence times, and (1) is re-written as [42] = min t i The last two examples may require a large number of operations to generate a lookahead value. In <ref> [40] </ref>, O (1) algorithms have been proposed to generate the lookahead values. When the ExecuteMessage () method processes a null message in an LP, it invokes a method ComputeLookahead () to compute the timestamp of the output (null) messages.
Reference: [41] <author> Nicol, </author> <title> D.M., "Parallel Discrete-Event Simulation of FCFS Stochastic Queueing Networks", </title> <booktitle> Proc. ACM SIGPLAN Symposium on Parallel Programming: Experience with Applications, Languages and Systems, </booktitle> <pages> pp. 124-137, </pages> <year> 1988. </year>
Reference-contexts: C. Exploiting Lookahead It is important to exploit the lookahead to improve the progress of a conservative simulation. Experimental studies have indicated that the larger the lookahead values, the better the performance of the conservative simulation [39]. Based on the techniques proposed in [40], <ref> [41] </ref>, [42], we give three PCS examples for lookahead exploration. The first two examples assume single cell entrance and exit. The single entrance/exit PCS model has been used in modeling highway cellular phone systems [43]. The results can be easily generalized for multiple entrances and exits. <p> The lookahead for the LP can be derived by 8 IEEE TRANSACTIONS ON SYSTEMS, MAN AND CYBERNETICS, VOL. XX, NO. Y, MONTH 1995 a presampling technique proposed by Nicol <ref> [41] </ref>. The idea is to presample the residence times of the arrival portables. If the FEL is not empty, then the next departure time can be easily computed.
Reference: [42] <author> Wagner, D.B. and Lazowska, E.D., </author> <title> "Parallel Simulation of Queueing Networks: Limitations and Potentials", </title> <booktitle> Proc. 1989 ACM SIGMETRICS and Performance '89 Conference, </booktitle> <pages> pp. 146-155, </pages> <year> 1989. </year>
Reference-contexts: C. Exploiting Lookahead It is important to exploit the lookahead to improve the progress of a conservative simulation. Experimental studies have indicated that the larger the lookahead values, the better the performance of the conservative simulation [39]. Based on the techniques proposed in [40], [41], <ref> [42] </ref>, we give three PCS examples for lookahead exploration. The first two examples assume single cell entrance and exit. The single entrance/exit PCS model has been used in modeling highway cellular phone systems [43]. The results can be easily generalized for multiple entrances and exits. <p> In a PCS simulation, the total number N = S fi n of portables is an input parameter. To compute the next lookahead value for an LP, it suf fices to sample the next N portable residence times, and (1) is re-written as <ref> [42] </ref> = min t i The last two examples may require a large number of operations to generate a lookahead value. In [40], O (1) algorithms have been proposed to generate the lookahead values.
Reference: [43] <author> Kuek, S.S. and Wong, W.C., </author> <title> "Ordered Dynamic Channel Assignment Scheme with Reassignment in Highway Microcells", </title> <journal> IEEE Trans. Veh. Technol., </journal> <volume> vol. 41, no. 3, </volume> <pages> pp. 271-277, </pages> <year> 1992. </year>
Reference-contexts: Based on the techniques proposed in [40], [41], [42], we give three PCS examples for lookahead exploration. The first two examples assume single cell entrance and exit. The single entrance/exit PCS model has been used in modeling highway cellular phone systems <ref> [43] </ref>. The results can be easily generalized for multiple entrances and exits. The techniques introduced can be combined to exploit greater lookahead. 1.
Reference: [44] <author> Jefferson, D., </author> <title> "Virtual Time", </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 7, no. 3, </volume> <pages> pp. 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: The ComputeLookahead () method may implement the looka head exploiting techniques described above. Then the new null message is sent to some or all output channels by invoking the SendMessage () method. V. Optimistic Method The optimistic simulation <ref> [44] </ref> is optimistic in the sense that it handles the arrival events aggressively. When a message m arrives at an LP, LP .ReceiveMessage () simply inserts m in the input queue (the optimistic simulation terminology for the FEL). <p> To support rollback, data structures such as the state queue and the output queue are required (to be elaborated). Several strategies for cancelling incorrect computation were surveyed by Fujimoto [45]. Two popular cancellation strategies called aggressive cancellation <ref> [44] </ref> and lazy can cellation [46] are described in this section. A. Cancellation Strategies Consider the example in Figure 10. [Figure 10 about here.] For simplicity, assume that cell C has one radio channel (i.e., LP C .channelNo=1 in PDES). <p> The anti-message m 2 of m 2 is saved in LP C 's output queue. The message m 2 is identical to m 2 except that it includes a destination field (in the original optimistic or Time Warp algorithm <ref> [44] </ref>, the sender and the destination are recorded in both the output message and the corresponding anti-message for flow control). <p> at (execution) time t is the minimum of the times-tamps of the not-yet executed messages (these messages are either in the input queue or are in transit) in the optimistic simulation at time t. (Several other operational definition of GVT are given in [47], [48].) It has been pointed out <ref> [44] </ref> that at any given time t, a logical process cannot be rolled back to a timestamp earlier than the GVT at t. Therefore the storage for all messages with timestamps smaller than the GVT value can be reclaimed for other usage.
Reference: [45] <author> Fujimoto, </author> <title> R.M., "Optimistic Approaches to Parallel Discrete Event Simulation", </title> <journal> Transactions of the Society for Computer Simulation, </journal> <volume> vol. 7, no. 2, </volume> <pages> pp. 153-191, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: To support rollback, data structures such as the state queue and the output queue are required (to be elaborated). Several strategies for cancelling incorrect computation were surveyed by Fujimoto <ref> [45] </ref>. Two popular cancellation strategies called aggressive cancellation [44] and lazy can cellation [46] are described in this section. A. Cancellation Strategies Consider the example in Figure 10. [Figure 10 about here.] For simplicity, assume that cell C has one radio channel (i.e., LP C .channelNo=1 in PDES).
Reference: [46] <author> Gafni, A., </author> <title> "Rollback Mechanisms for Optimistic Distributed Simulation", </title> <booktitle> Proc. 1988 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pp. 61-67, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: To support rollback, data structures such as the state queue and the output queue are required (to be elaborated). Several strategies for cancelling incorrect computation were surveyed by Fujimoto [45]. Two popular cancellation strategies called aggressive cancellation [44] and lazy can cellation <ref> [46] </ref> are described in this section. A. Cancellation Strategies Consider the example in Figure 10. [Figure 10 about here.] For simplicity, assume that cell C has one radio channel (i.e., LP C .channelNo=1 in PDES).
Reference: [47] <author> Jefferson, D., </author> <title> "Virtual Time II: The Cancelback Protocol for Storage Management in Time Warp", </title> <booktitle> Proc. 9th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pp. 75-90, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The GVT at (execution) time t is the minimum of the times-tamps of the not-yet executed messages (these messages are either in the input queue or are in transit) in the optimistic simulation at time t. (Several other operational definition of GVT are given in <ref> [47] </ref>, [48].) It has been pointed out [44] that at any given time t, a logical process cannot be rolled back to a timestamp earlier than the GVT at t. Therefore the storage for all messages with timestamps smaller than the GVT value can be reclaimed for other usage.
Reference: [48] <author> Lin, Y.-B., </author> <title> "Memory Management Algorithms for Parallel Simulation", </title> <journal> Information Sciences, </journal> <volume> vol. 77, no. 1, </volume> <pages> pp. 119-140, </pages> <year> 1994. </year>
Reference-contexts: The GVT at (execution) time t is the minimum of the times-tamps of the not-yet executed messages (these messages are either in the input queue or are in transit) in the optimistic simulation at time t. (Several other operational definition of GVT are given in [47], <ref> [48] </ref>.) It has been pointed out [44] that at any given time t, a logical process cannot be rolled back to a timestamp earlier than the GVT at t. Therefore the storage for all messages with timestamps smaller than the GVT value can be reclaimed for other usage.
Reference: [49] <author> Lin, Y.-B., </author> <title> "Determining the Global Progress of Parallel Simulation", </title> <journal> Information Processing Letters, </journal> <volume> vol. 50, </volume> <year> 1994. </year>
Reference-contexts: The process of reclaiming the storage for the obsolete elements is called fossil collection. The GVT computation is not trivial in a distributed system because it may be difficult to capture the messages in transit. Several GVT algorithms have been developed in the systems with the FIFO communication property <ref> [49] </ref> or without the FIFO communication property [50], [51]. In GIT/Bellcore PCS PDES (where eight workstations are connected by a local area network), all logical processes are frozen during GVT computation.
Reference: [50] <author> Samadi, B., </author> <title> Distributed Simulation, Algorithms and Performance Analysis, </title> <type> PhD thesis, </type> <institution> Computer Science Department, University of California, </institution> <address> Los Angeles, </address> <year> 1985. </year>
Reference-contexts: The GVT computation is not trivial in a distributed system because it may be difficult to capture the messages in transit. Several GVT algorithms have been developed in the systems with the FIFO communication property [49] or without the FIFO communication property <ref> [50] </ref>, [51]. In GIT/Bellcore PCS PDES (where eight workstations are connected by a local area network), all logical processes are frozen during GVT computation. By utilizing the low level communication mechanism, all transient messages are guaranteed to arrive at their destinations before the GVT computation starts.
Reference: [51] <author> Mattern, F., </author> <title> "Efficient Distributed Snapshots and Global Virtual Time Algorithms for Non-FIFO Systems", </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 18, no. 4, </volume> <pages> pp. 423 - 434, </pages> <year> 1993. </year>
Reference-contexts: The GVT computation is not trivial in a distributed system because it may be difficult to capture the messages in transit. Several GVT algorithms have been developed in the systems with the FIFO communication property [49] or without the FIFO communication property [50], <ref> [51] </ref>. In GIT/Bellcore PCS PDES (where eight workstations are connected by a local area network), all logical processes are frozen during GVT computation. By utilizing the low level communication mechanism, all transient messages are guaranteed to arrive at their destinations before the GVT computation starts.
Reference: [52] <author> Fujimoto, </author> <title> R.M., "Parallel Discrete Event Simulation: Will the Field Survive?", </title> <journal> ORSA Journal on Computing, </journal> <volume> vol. 5, no. 3, </volume> <year> 1993. </year>
Reference-contexts: However, these optimization techniques may need to be tailored for specific applications. Many studies have devoted to this issue (see [1], [2], <ref> [52] </ref>, [53], [54] and references therein). The PCS example can be seen as being a member of a larger class of simulation model where one first discretizes the spatial domain into a grid, and then simulates moving entities from one grid cell to another.
Reference: [53] <author> Arvind, D., Bagrodia, R. and Lin, Y.-B., Ed., </author> <booktitle> Proc. 8th Workshop on Parallel and Distributed Simulation. ACM, </booktitle> <year> 1994. </year>
Reference-contexts: However, these optimization techniques may need to be tailored for specific applications. Many studies have devoted to this issue (see [1], [2], [52], <ref> [53] </ref>, [54] and references therein). The PCS example can be seen as being a member of a larger class of simulation model where one first discretizes the spatial domain into a grid, and then simulates moving entities from one grid cell to another.

References-found: 53

