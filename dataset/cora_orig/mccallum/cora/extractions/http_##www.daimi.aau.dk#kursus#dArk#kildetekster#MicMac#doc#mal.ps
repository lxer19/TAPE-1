URL: http://www.daimi.aau.dk/kursus/dArk/kildetekster/MicMac/doc/mal.ps
Refering-URL: http://www.daimi.aau.dk/kursus/dArk/kildetekster/MicMac/doc/
Root-URL: http://www.daimi.aau.dk
Title: The MAL assembler  
Author: Peter Orbaek 
Date: January 26, 1993  
Abstract: This document describes the design and implementation of a micro-assembler for the MAL language, described in [Tan85]. The goal of the project was to produce a suite of tools for the use in an introductionary course (dArk1) in Computer Science at DAIMI. 
Abstract-found: 1
Intro-found: 1
Reference: [lex91] <editor> Lex a lexical analyzer generator, </editor> <booktitle> volume SunOS Programming and utilities, </booktitle> <pages> pages 205-228. </pages> <year> 1991. </year>
Reference-contexts: To meet these design-criteria, we chose the following stategy: We used the standard the Unix tools Lex <ref> [lex91] </ref> and YACC [yac89] to generate the code. In order to maintain portability we made sure that the assembler could be produced by the equivalent GNU tools Flex [WS91a] and Bison [WS91b].
Reference: [So92] <author> Kell Sonnichsen. </author> <title> The mic machine simulator. </title> <type> Technical report, </type> <year> 1992. </year>
Reference-contexts: 1 Introduction The MAL language as described in [Tan85], is a line-oriented Pascal-like micro-assembly language, used to program the MIC1 machine at the micro-programming level. The MIC1 machine is also described in [Tan85], as well as in "The MIC1 machine simulator" <ref> [So92] </ref>. The design of this MAL assembler is based on one full year of experience with the mic1.assem program in the CIS-360 V2 tools package from University of Delaware. 2 The MAL language The MAL language consists of lines of simple assignments and possibly a conditional jump.
Reference: [Tan85] <author> Andrew S. Tanenbaum. </author> <title> Structured Computer Organization. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1985. </year>
Reference-contexts: 1 Introduction The MAL language as described in <ref> [Tan85] </ref>, is a line-oriented Pascal-like micro-assembly language, used to program the MIC1 machine at the micro-programming level. The MIC1 machine is also described in [Tan85], as well as in "The MIC1 machine simulator" [So92]. <p> 1 Introduction The MAL language as described in <ref> [Tan85] </ref>, is a line-oriented Pascal-like micro-assembly language, used to program the MIC1 machine at the micro-programming level. The MIC1 machine is also described in [Tan85], as well as in "The MIC1 machine simulator" [So92]. <p> ::= non-conds (15) cond ::= `goto' addr `;' `if' `z' `then' `goto' addr `;' `if' `n' `then' `goto' addr `;' (16) id ::= `[A-Za-z ][A-Za-z0-9 ] * ' (17) integer ::= `[0-9] + ' `0x [0-9a-zA-Z] + ' For an example of a correct MAL program, see the program in <ref> [Tan85] </ref>. C Input and output Input to the MAL assembler should be a plain ASCII-file following the syntax described in the previous appendix. The output is a mix of hexadecimal numbers and the corresponding sourcecode for use in the simulation and debugging process.
Reference: [WS91a] <author> Larry Wall and Randal L. Schwartz. </author> <title> Programming Perl. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1991. </year>
Reference-contexts: To meet these design-criteria, we chose the following stategy: We used the standard the Unix tools Lex [lex91] and YACC [yac89] to generate the code. In order to maintain portability we made sure that the assembler could be produced by the equivalent GNU tools Flex <ref> [WS91a] </ref> and Bison [WS91b]. One of the problems with using Lex to generate the lexical analyzer, is that it is difficult to preserve the source through the parser and include it in the output.
Reference: [WS91b] <author> Larry Wall and Randal L. Schwartz. </author> <title> Programming Perl. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1991. </year>
Reference-contexts: To meet these design-criteria, we chose the following stategy: We used the standard the Unix tools Lex [lex91] and YACC [yac89] to generate the code. In order to maintain portability we made sure that the assembler could be produced by the equivalent GNU tools Flex [WS91a] and Bison <ref> [WS91b] </ref>. One of the problems with using Lex to generate the lexical analyzer, is that it is difficult to preserve the source through the parser and include it in the output.
Reference: [WS91c] <author> Larry Wall and Randal L. Schwartz. </author> <title> Programming Perl. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1991. </year>
Reference-contexts: To circumvent this obstacle we let the assembler proper forget about the source as soon as it has used it, and leave it up to a Perl <ref> [WS91c] </ref> frontend to merge the source and the produced hexcode. The reason why we wanted to merge the sourcecode with the produced object-code, was that we wanted the graphical simulator to be able to show the relevant sourcecode including comments, as the microcode is executed.
Reference: [yac89] <editor> Yet Another Compiler-Compiler, </editor> <booktitle> volume SunOS Programming and utilities, </booktitle> <pages> pages 231-266. </pages> <year> 1989. </year> <month> 6 </month>
Reference-contexts: To meet these design-criteria, we chose the following stategy: We used the standard the Unix tools Lex [lex91] and YACC <ref> [yac89] </ref> to generate the code. In order to maintain portability we made sure that the assembler could be produced by the equivalent GNU tools Flex [WS91a] and Bison [WS91b].
References-found: 7

