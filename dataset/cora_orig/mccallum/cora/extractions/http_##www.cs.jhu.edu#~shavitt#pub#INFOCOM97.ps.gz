URL: http://www.cs.jhu.edu/~shavitt/pub/INFOCOM97.ps.gz
Refering-URL: http://www.cs.jhu.edu/~shavitt/pub.html
Root-URL: http://www.cs.jhu.edu
Email: e-mail: cidon@ee.technion.ac.il  e-mail: raphi@eng.sun.com  e-mail: shavitt@cs.jhu.edu  
Title: Multi-Path Routing combined with Resource Reservation  
Author: Israel Cidon and Raphael Rom and Yuval Shavitt 
Address: Israel  Mountain View, CA 94043-1100  Mountain View, CA 94043-1100  Israel  Baltimore, MD 21218-2691  
Affiliation: Department of Electrical Engineering Technion, Haifa,  Sun Microsystems  Sun Microsystems  Department of Electrical Engineering Technion, Haifa,  Department of Computer Science Johns Hopkins University,  
Abstract: In high-speed networks it is desirable to interleave routing and resource (such as bandwidth) reservation. The PNNI standard for private ATM networks is a recent example for an algorithm that does this using a sequential crank-back mechanism. In this work, we suggest to do resource reservation along several routes in parallel. We present an analytical model that demonstrates that when there are several routes to the destination it pays to attempt reservation along more than a single route. Following this analytic observation, we present a family of algorithms that route and reserve resources along parallel subroutes. The algorithms of the family represent different trade-offs between the speed and the quality of the established route. The presented algorithms are simulated against several legacy algorithm, including PNNI crank-back, and exhibit higher network utilization and faster connection set-up time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Azar, J. Naor, and R. </author> <title> Rom. Routing strategies for fast networks. </title> <booktitle> In IEEE INFOCOM'92, </booktitle> <pages> pages 170 - 179. </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: We present simulation results that demonstrate the advantage of the presented algorithms both in reservation success probability and in set-up time. The idea of routing along several routes in parallel, was suggested in the context of WANs only in few works <ref> [8, 1] </ref>. The only work that considers reservation along multiple routes in parallel [6] analyzes and compares several parallel reservation algorithms for the special case where routing is performed along predefined routing trees, a model tailored for telephony networks.
Reference: [2] <author> P. E. Boyer and D. P. Trachier. </author> <title> A reservation principle with applications to the ATM traffic control. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 24:321 - 334, </volume> <year> 1992. </year>
Reference-contexts: Thus, if several reservations succeed all the routes appear to be used (resources are reserved), while the destination is using only one of them, ignoring the rest. This happens, for example, when a short burst is sent preceded by a reservation request that tries to reserve sufficient resources on-the-fly <ref> [14, 2] </ref>. 2.2 Analysis and k = 2 The above system can be modeled by a continuous--time Markov chain with n (n+3)=2 states as illustrated in figure 2.
Reference: [3] <author> H. A. David. </author> <title> Order Statistics. </title> <publisher> Wiley, </publisher> <address> second edition, </address> <year> 1981. </year>
Reference-contexts: Figure 6 shows the success probability when the threshold value is decreased. Clearly, the Fast algorithm outperforms the other algorithms. Note, that for long connections, i.e., those 1 This is a direct result of order statistics see <ref> [3, sec. 5.4] </ref>. whose hop count is 2 (m 1) or 2 (m 1) 1, the Fast algorithm is much better than the other algorithms.
Reference: [4] <author> D.J. Farber and M. Parulkar. </author> <title> A closer look at NOAHNET. </title> <booktitle> In SIGCOM'86, </booktitle> <pages> pages 205 - 213. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1986. </year>
Reference-contexts: The only work that considers reservation along multiple routes in parallel [6] analyzes and compares several parallel reservation algorithms for the special case where routing is performed along predefined routing trees, a model tailored for telephony networks. In LANs, multi-path routing was suggested in the context of flooding <ref> [4, 9, 10] </ref>, since there the cost of packets going in many directions does not seem problematic. The rest of the paper is organized as follows. In the next section, we first present the system model for our analysis.
Reference: [5] <author> ATM Forum. </author> <title> Private network network interface (PNNI) v1.0 specifications, </title> <month> June </month> <year> 1996. </year>
Reference-contexts: However, in B-ISDN, resource availability may change rapidly or alternatively routing information may be outdated. In this environment a route that was computed in the first step, may lack the required resources in the second step. Combining the two steps was suggested in the ATM PNNI standard <ref> [5] </ref> to overcome this difficulty. When a link is considered for routing, resources are reserved along this link. <p> First, since several routes are reserved in parallel the destination has the ability to chose the best. The second advantage is the speed of the search. When a single path routing and reservation algorithm fails to capture resources crank-back mechanisms <ref> [5] </ref> are used to try and move forward in another path. The move backwards wastes time and slows down the routing process. When multi-path algorithms are used several paths are searched in parallel, thus reservation failures in some paths do not influence the speed of the search on other paths.
Reference: [6] <author> R. Hwang, J. F. Kurose, and D. Towsley. </author> <title> On-call processing delay in high speed networks. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 3(6):628 - 639, </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: The idea of routing along several routes in parallel, was suggested in the context of WANs only in few works [8, 1]. The only work that considers reservation along multiple routes in parallel <ref> [6] </ref> analyzes and compares several parallel reservation algorithms for the special case where routing is performed along predefined routing trees, a model tailored for telephony networks.
Reference: [7] <author> A. Itai and M. Rodeh. </author> <title> Symmetry breaking in distributed networks. </title> <booktitle> In FOCS'81, </booktitle> <pages> pages 150 - 158. </pages> <publisher> IEEE, </publisher> <year> 1981. </year>
Reference-contexts: However, the source does not know when all the nodes in the diroute terminate their part of the algorithm (which, at this point, is irrelevant to the task of path establishment) and more important, when the algorithm message-terminates <ref> [7] </ref>, i.e., when no more messages belonging to the algorithm exist in the network. A node that is not part of the selected path can never learn that the search ended successfully.
Reference: [8] <author> O. Lesser and R. </author> <title> Rom. Routing by controlled flooding in communication networks. </title> <booktitle> In IEEE INFOCOM'90, </booktitle> <pages> pages 910 - 917, </pages> <year> 1990. </year>
Reference-contexts: We present simulation results that demonstrate the advantage of the presented algorithms both in reservation success probability and in set-up time. The idea of routing along several routes in parallel, was suggested in the context of WANs only in few works <ref> [8, 1] </ref>. The only work that considers reservation along multiple routes in parallel [6] analyzes and compares several parallel reservation algorithms for the special case where routing is performed along predefined routing trees, a model tailored for telephony networks.
Reference: [9] <author> C. Petitpierre. </author> <title> Meshed local computer networks. </title> <journal> IEEE Communications Magazine, </journal> <volume> 22(8):36 - 40, </volume> <month> August </month> <year> 1984. </year>
Reference-contexts: The only work that considers reservation along multiple routes in parallel [6] analyzes and compares several parallel reservation algorithms for the special case where routing is performed along predefined routing trees, a model tailored for telephony networks. In LANs, multi-path routing was suggested in the context of flooding <ref> [4, 9, 10] </ref>, since there the cost of packets going in many directions does not seem problematic. The rest of the paper is organized as follows. In the next section, we first present the system model for our analysis.
Reference: [10] <author> H. K. Pung. ARBnet+: </author> <title> an experimental mesh-like local area network. </title> <booktitle> In SICON'89, </booktitle> <pages> pages 301 - 306, </pages> <address> 1989. Singapore. </address>
Reference-contexts: The only work that considers reservation along multiple routes in parallel [6] analyzes and compares several parallel reservation algorithms for the special case where routing is performed along predefined routing trees, a model tailored for telephony networks. In LANs, multi-path routing was suggested in the context of flooding <ref> [4, 9, 10] </ref>, since there the cost of packets going in many directions does not seem problematic. The rest of the paper is organized as follows. In the next section, we first present the system model for our analysis.
Reference: [11] <author> R. Rom and Y. Shavitt. </author> <title> A combined fast-routing and bandwidth-reservation algorithm for ATM networks. </title> <booktitle> In International IFIP/IEEE Conference on Broadband Communication, </booktitle> <pages> pages 76 - 87. </pages> <publisher> Chapman & Hall, </publisher> <month> April </month> <year> 1996. </year>
Reference-contexts: When multi-path algorithms are used several paths are searched in parallel, thus reservation failures in some paths do not influence the speed of the search on other paths. We present a family of algorithms that route and reserve resources along parallel sub-paths. The algorithms (some of them presented in <ref> [11] </ref>) represent different trade-offs between the speed the search advances and the quality of the resulted route. The paths, along which the search is performed, are not necessarily disjoint, and can share nodes and links.
Reference: [12] <author> A. Segall. </author> <title> Distributed network protocols. </title> <journal> IEEE Transaction on Information Theory, </journal> <volume> IT-29(1):23 - 35, </volume> <month> January </month> <year> 1983. </year>
Reference-contexts: As already stated, both algorithms delay the submission of Request messages until Request messages are received from all the incoming links. It is therefore clear that the slow algorithms progress according to the slowest path, which is typical to this type of flooding algorithms <ref> [12] </ref>. Furthermore, depending on implementation, it might be necessary to send messages even on non-eligible links to assure proper progress of the algorithms. <p> The algorithm is based on two floodings, the first of a Request from the source to the destination and the second of an Ack started by the destination immediately after the receipt of the first Request. Since it is proved <ref> [12] </ref> that flooding is the fastest data delivery algorithm and we use flooding both ways, with the superfast algorithms the source can start transmitting at the earliest possible time. The superfast algorithm we present here, SF-1, is simple as it does not attempt to cost-optimize the selected path. <p> In addition, the node inserts the requested connection to its routing table as a multicast connection. When the destination receives the first Request, it starts a flooding algorithm (such as PI <ref> [12] </ref>) with the Ack message. The flooding travels only on incoming links, i.e., every node that receives the first Ack forwards it to all the incoming links. When the destination receives the Ack message it can start transmitting along all the active links.
Reference: [13] <author> Y. Shavitt. </author> <title> Burst Control in High-Speed Networks. </title> <type> PhD thesis, </type> <institution> Technion - Israel Institute of Technology, Electrical Engineering Dept., Tech-nion City, Haifa 32000, Israel, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: For the case where k = n, we can write the equilibrium equations (+s) s = (s+ 1) s+1 , where 0 s &lt; n. Calculating the success probabilities for both cases gives the same result <ref> [13] </ref>: P suc = n + I.e., when the penalty for capturing more than one link is maximal, a system where a connection attempts to capture one link performs identically to a system where a connection attempts to capture all the links. 2.4 Reducing the analysis complexity us ing recurrence For <p> We shall demonstrate each step in the computation process for the case where k = 2, a general solution can be found in <ref> [13] </ref>. <p> (5) X t;s = 1 Using the recurrence on the coefficients we transform Eq. 5 to an n + 1 linear equation system with the variables 0;l whose solution complexity is lower than O (n 3 ). 2.5 Numerical results of n and other = ratios can be found in <ref> [13] </ref>. <p> As the penalty decreases, larger values of k become optimal. Tables that compare the system throughput for fixed n values when = , for all the values of k can be found in <ref> [13] </ref>. 3 Algorithms for Multi-Path Routing In this section, we present a family of algorithms that route and reserve resources along parallel sub-routes. The algorithms offer a trade-off between the quality of the selected path and the set-up speed. <p> We call this restricted subgraph a diroute. The selection of the diroute can be made by the source node or, in a distributed manner by the nodes on the graph <ref> [13] </ref>. To avoid reserving resources in the entire diroute until the optimal route is chosen, the algorithms release resources from segments of the diroute as soon as they learn that these segments are inferior to another segment where reservation was made. <p> To this end we define the diroute, a collection of directed links where the route is searched for. The construction of the diroute remains an open problem. Shavitt <ref> [13] </ref> gives some insights to the diroute construction and discuss some heuristics. Each link in the diroute is associated with a cost, available resources, and processing/transmission delays. <p> Some variants of these algorithms, where the destination response is delayed are described in <ref> [13] </ref>. <p> We describe here the algorithm's operation; an example and a pseudo-code formal description are given in <ref> [13] </ref>. Since the algorithm is executed on the diroute the term "all outgoing links" refers only to links of the diroute. A link is called eligible if it has enough available resources to potentially be part of the requested route. <p> The Request message carries a specification of the resources requested for the connection and the total cost of the path from the source to the current node. Other quantities, such as route delay, can be accumulated, as well <ref> [13] </ref>. A node that receives the first Request message on some incoming link l reserves the needed resources in all the eligible outgoing links and forwards the Request message on all these links. <p> The problem with inability to identify termination is that nodes cannot release the variables allocated to the current execiution of the algorithm. Note, that this has nothing to do with the resources required from the network which are guaranteed to be released. A termination mechanism is described in <ref> [13] </ref>. 3.2.2 The Logarithmic Algorithm As will be shown in section 3.5, the message complexity of the basic fast algorithm might be exponential in the number of nodes in the diroute. <p> We present two algorithms that differ only in their use of the early release mechanism. Thus most of the presentation and the discussion is done for the two together. A formal description of the algorithms appears in <ref> [13] </ref>. The main difference between the fast and slow algorithm families is the decision when to forward the Request message. In the fast algorithms, a node sends a Request immediately after it receives the first Request, and sends additional Requests when it learns about better paths. <p> S-1 is more resilient to failures. In addition, if the algorithm succeed to reserve a path when a failure occurs this path is guaranteed to be optimal for the remaining links (see <ref> [13] </ref>). As already stated, both algorithms delay the submission of Request messages until Request messages are received from all the incoming links. It is therefore clear that the slow algorithms progress according to the slowest path, which is typical to this type of flooding algorithms [12]. <p> Second and more important, by the time the Accept message reaches a node on the selected path, this node may have chosen another incoming path with a better cost but longer delay. In the worst case (see example in <ref> [13] </ref>), the fast algorithm may select a path which is the slowest possible. In this section, we present an algorithm which is the fastest possible. <p> The problem with SF-1 is its inability to correct the selected path. We would like to have the flexibility in path selection of the fast algorithm with the super-fast reaction time. To this end Shavitt <ref> [13] </ref> introduces SF-2, an algorithm with super-fast reaction time but with (almost) the same flexibility of the fast algorithm. 3.5 Asymptotic complexity analysis In this section, the message complexity of the presented algorithms is analyzed. <p> Crank-back routing | Same as above, only if no eligible proper link is found, the algorithm cranks back one hop and tries to continue from there. Due to space limitation we describe here results from one simulation set. More results can be found in <ref> [13] </ref>. The results reported here are from a simulation of a grid network. Between every pair of nodes in the grid, two connections in each direction were simulated, all the connections requests arrive according to a Poisson process with the same intensity. <p> A discussion on the connection establishment time and failure handling can be found in <ref> [13] </ref>. We believe that there is much more work to be done, and point to a few directions below. The adaptation of the suggested algorithms to mul-ticast connections seems natural. <p> The adaptation of the suggested algorithms to mul-ticast connections seems natural. When routes to several destinations are searched, the search does not stop when a destination is found but continues along the diroute to look for more destinations. Several options that are discussed in <ref> [13] </ref> can serve as a starting point to construct efficient multicast routing algorithms. Diroute construction is an area where there is much work to be done both for distributed methods, for which some directions were pointed in [13] and for centralized methods. <p> Several options that are discussed in <ref> [13] </ref> can serve as a starting point to construct efficient multicast routing algorithms. Diroute construction is an area where there is much work to be done both for distributed methods, for which some directions were pointed in [13] and for centralized methods. It is interesting to try and quantify the quality of the diroute, and then look for algorithms or heuristics that try to achieve an optimal diroute. This question arises also in the context of multicast connections.
Reference: [14] <author> J. S. Turner. </author> <title> Managing bandwidth in ATM networks with burtsy traffic. </title> <journal> IEEE Network, </journal> <volume> 6(5):50 - 58, </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: Thus, if several reservations succeed all the routes appear to be used (resources are reserved), while the destination is using only one of them, ignoring the rest. This happens, for example, when a short burst is sent preceded by a reservation request that tries to reserve sufficient resources on-the-fly <ref> [14, 2] </ref>. 2.2 Analysis and k = 2 The above system can be modeled by a continuous--time Markov chain with n (n+3)=2 states as illustrated in figure 2.
References-found: 14

