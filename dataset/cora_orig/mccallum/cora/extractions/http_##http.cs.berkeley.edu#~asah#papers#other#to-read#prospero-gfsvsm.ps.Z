URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/prospero-gfsvsm.ps.Z
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/
Root-URL: http://www.cs.berkeley.edu
Title: The Prospero File System A Global File System Based on the Virtual System Model  
Author: B. Clifford Neuman 
Affiliation: Information Sciences Institute University of Southern California  
Date: May 1992.  
Note: To Appear: Workshop on File Systems,  
Abstract: Distributed file systems have come into widespread use in recent years. Many allow files to be accessed over large geographic areas and across organizational boundaries. However, few systems to date have given much thought to how information should be organized in such a global environment. This paper describes the Prospero File System, a file system based on the Virtual System Model, a model for building large systems within which users construct their own virtual systems by selecting and organizing the objects and services of interest. This customized view of a global file system makes it easier for users to keep track of files that they have identified as being of interest. The use of multiple name spaces can cause confusion. Such confusion is eliminated by support for closure: every object has an associated name space, and names specified by the object are resolved in that name space. Tools are provided to allow views to be kept up-to-date, and to allow views to be defined as functions of other (possibly changing) views. These tools promote sharing and enable the organization of files in ways that make it easier to identify information of interest than it is in existing systems. The prototype implementation has been used to organize information available from Internet archive sites; its directory service has been used from more than 7,500 systems in 29 countries. This paper discusses the goals of the Prospero File System, describes the prototype implementation, and discusses experience with the use of the system to date.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Luis-Felipe Cabrera and Jim Wyllie. </author> <title> QuickSilver distributed file services: An architecture for horizontal growth. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 23-27, </pages> <month> March </month> <year> 1988. </year> <note> Also IBM Research Report RJ 5578, </note> <month> April </month> <year> 1987. </year>
Reference-contexts: User-centered naming attempts to address this problem by allowing each user to choose what is to be included in his or her name space. User-centered naming is employed by Tilde [3], QuickSilver <ref> [1] </ref>, Plan 9 [18], Prospero [11], Jade [15], and some object-based systems such as Amoeba [23].
Reference: [2] <author> Vincent Cate. Alex: </author> <title> A global file system. </title> <booktitle> In Proceedings of the Workshop on File Systems, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: A more recent system, Alex <ref> [2] </ref>, addresses the latter problem by allowing files available by FTP to be named and manipulated using the syntax of local file names. This allows users to create symbolic links to files on remote systems. <p> We plan to implement a new application interface for Prospero in order to allow use by existing applications without relinking. This will be accomplished by adding Prospero support to an NFS server [20], the same approach taken by semantic file systems [6] and Alex <ref> [2] </ref>. We hope to benefit from changes already made in those systems. The Prospero protocol provides a lightweight protocol for querying directories and obtaining file attributes. We encourage its use as a base upon which other systems can be built. Archie and AARNet are two examples. <p> The Prospero protocol provides a lightweight protocol for querying directories and obtaining file attributes. We encourage its use as a base upon which other systems can be built. Archie and AARNet are two examples. It is being considered for use by Alex <ref> [2] </ref> to improve the performance queries to directories on hosts that run Prospero servers. 8 Conclusions This paper discussed several problems that arise in the organization of a global file system.
Reference: [3] <author> Douglas Comer, Ralph E. Droms, and Thomas P. Murtagh. </author> <title> An experimental implementation of the Tilde naming system. </title> <journal> Computing Systems, </journal> <volume> 4(3) </volume> <pages> 487-515, </pages> <month> Fall </month> <year> 1990. </year>
Reference-contexts: User-centered naming attempts to address this problem by allowing each user to choose what is to be included in his or her name space. User-centered naming is employed by Tilde <ref> [3] </ref>, QuickSilver [1], Plan 9 [18], Prospero [11], Jade [15], and some object-based systems such as Amoeba [23].
Reference: [4] <author> Peter B. Danzig, Jongsuk Ahn, John Noll, and Katia Obraczka. </author> <title> Distributed indexing: A scalable mechanism for distributed information retrieval. </title> <booktitle> In Proceedings of the ACM SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: We are in the process of adding support for the retrieval of documents maintained by the Wide Area Information Service (WAIS) [8]. We plan to add filters that access directory information maintained by by semantic file systems [6] and distributed indices <ref> [4] </ref> when those systems are available. We plan to implement a new application interface for Prospero in order to allow use by existing applications without relinking.
Reference: [5] <author> Alan Emtage and Peter Deutsch. archie: </author> <title> An electronic directory service for the Internet. </title> <booktitle> In Proceedings of the Winter 1992 Usenix Conference, </booktitle> <pages> pages 93-110, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Individuals can organize their own virtual systems differently. One of the most frequently used directories in Prospero is that representing the archie database, developed at McGill University <ref> [5] </ref>. That directory includes subdirectories organizing files according to the last components of their file names. For example, the subdirectory prosp contains references to the files available by Anonymous FTP whose names include the string "prosp". Among the matches would be files related to Prospero.
Reference: [6] <author> David K. Gifford, Pierre Jouvelot, Mark A. Sheldon, and James W. O'Toole Jr. </author> <title> Semantic file systems. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 16-25, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: This means that a new portal (and hence new name server) must be run for each point of attachment. The portal mechanism is closer to that used to integrate Prospero and archie than it is to most filters. Attribute-based naming, supported by Profile [14] and the Semantic File System <ref> [6] </ref>, provides an alternative mechanism for finding information of interest. In attribute-based naming a database is maintained of object attributes, and the user specifies the known attributes of an object instead of its name. <p> We continue to collaborate with other groups to extend it. We are in the process of adding support for the retrieval of documents maintained by the Wide Area Information Service (WAIS) [8]. We plan to add filters that access directory information maintained by by semantic file systems <ref> [6] </ref> and distributed indices [4] when those systems are available. We plan to implement a new application interface for Prospero in order to allow use by existing applications without relinking. <p> We plan to implement a new application interface for Prospero in order to allow use by existing applications without relinking. This will be accomplished by adding Prospero support to an NFS server [20], the same approach taken by semantic file systems <ref> [6] </ref> and Alex [2]. We hope to benefit from changes already made in those systems. The Prospero protocol provides a lightweight protocol for querying directories and obtaining file attributes. We encourage its use as a base upon which other systems can be built. Archie and AARNet are two examples.
Reference: [7] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satya-narayanan, Robert N. Sidebotham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Others maintain huge lists of the information available and periodically distribute the lists through electronic mail. 2.2 Global Naming An alternative to host-based naming employed in a number of recent systems is global naming. The Andrew File System <ref> [7] </ref>, Locus [24], and Sprite [13] are among the systems that employ this approach. In global naming, all names are part of a single name space, and the name of the system on which an object resides is not explicitly part of the object's name.
Reference: [8] <author> Brewster Kahle and Art Medlar. </author> <title> An information system for corporate users: Wide area information systems. </title> <type> Technical Report TMC-199, </type> <institution> Thinking Machines Corporation, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: We continue to collaborate with other groups to extend it. We are in the process of adding support for the retrieval of documents maintained by the Wide Area Information Service (WAIS) <ref> [8] </ref>. We plan to add filters that access directory information maintained by by semantic file systems [6] and distributed indices [4] when those systems are available. We plan to implement a new application interface for Prospero in order to allow use by existing applications without relinking.
Reference: [9] <author> Keith A. Lantz, Judy L. Edighoffer, and Bruce L. Hitson. </author> <title> Towards a universal directory service. </title> <booktitle> In Proceedings of the 4th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1985. </year>
Reference-contexts: Prospero is concerned primarily with the mechanisms needed to organize and identify the components of interest and relies on system provided access methods to actually use them. The functionality of filters in Prospero is similar to the domain-switching portal mechanism found in the Universal Directory Service <ref> [9] </ref>. A portal is a call to a separate name server that may have a non-standard implementation, enabling it to resolve names in a manner different than that in a standard name server. A portal is implemented as a separate server, while a filter is executed by the name resolver.
Reference: [10] <author> B. Clifford Neuman. </author> <title> The need for closure in large distributed systems. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 28-30, </pages> <month> October </month> <year> 1989. </year> <note> 15 To Appear: Workshop on File Systems, </note> <month> May </month> <year> 1992. </year>
Reference-contexts: As indicated earlier, the fact that the same name may refer to different objects at different times can make a user-centered name space confusing and can hinder sharing. In the Virtual System Model, every object has an associated name space, forming a closure <ref> [10, 19] </ref>. In this way, the context within which a name is to be resolved can be automatically determined based on the object specifying the name.
Reference: [11] <author> B. Clifford Neuman. </author> <title> Workstations and the Virtual System Model. </title> <booktitle> In Proceedings of the 2nd IEEE Workshop on Workstation Operating Systems, </booktitle> <pages> pages 91-95, </pages> <month> September </month> <year> 1989. </year> <journal> Also appears in the Newsletter of the IEEE Technical Committee on Operating Systems, </journal> <volume> Volume 3, Number 3, </volume> <month> Fall </month> <year> 1989. </year>
Reference-contexts: User-centered naming attempts to address this problem by allowing each user to choose what is to be included in his or her name space. User-centered naming is employed by Tilde [3], QuickSilver [1], Plan 9 [18], Prospero <ref> [11] </ref>, Jade [15], and some object-based systems such as Amoeba [23].
Reference: [12] <author> B. Clifford Neuman. </author> <title> The Virtual System Model: A Scalable Approach to Organizing Large Systems. </title> <type> PhD thesis, </type> <institution> University of Washington, 1992. Department of Computer Science and Engineering (in preparation). </institution>
Reference-contexts: Instead, they are constructed by a process (often using a configuration file) and they only live as long as the processes that use them. The problems just described are addressed by Prospero and the Virtual System Model. 3 The Virtual System Model The Virtual System Model <ref> [12] </ref> provides a framework for organizing large systems within which users construct their own virtual systems by selecting objects and services that are available over the network; users then treat the selected resources as a single system, ignoring those resources that were not selected.
Reference: [13] <author> John K. Ousterhout, Andrew R. Cherenson, Frederick Douglis, Michael N. Nelson, and Brent B. Welch. </author> <title> The Sprite network operating system. </title> <journal> Computer, </journal> <volume> 21(2) </volume> <pages> 23-35, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Others maintain huge lists of the information available and periodically distribute the lists through electronic mail. 2.2 Global Naming An alternative to host-based naming employed in a number of recent systems is global naming. The Andrew File System [7], Locus [24], and Sprite <ref> [13] </ref> are among the systems that employ this approach. In global naming, all names are part of a single name space, and the name of the system on which an object resides is not explicitly part of the object's name.
Reference: [14] <author> Larry L. Peterson. </author> <title> The Profile naming service. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(4) </volume> <pages> 341-364, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: This means that a new portal (and hence new name server) must be run for each point of attachment. The portal mechanism is closer to that used to integrate Prospero and archie than it is to most filters. Attribute-based naming, supported by Profile <ref> [14] </ref> and the Semantic File System [6], provides an alternative mechanism for finding information of interest. In attribute-based naming a database is maintained of object attributes, and the user specifies the known attributes of an object instead of its name.
Reference: [15] <author> Larry L. Peterson and Herman C. Rao. </author> <title> Accessing files in an internet: The Jade file system. </title> <type> Technical Report TR 90-30, </type> <institution> University of Arizona, </institution> <year> 1990. </year>
Reference-contexts: User-centered naming attempts to address this problem by allowing each user to choose what is to be included in his or her name space. User-centered naming is employed by Tilde [3], QuickSilver [1], Plan 9 [18], Prospero [11], Jade <ref> [15] </ref>, and some object-based systems such as Amoeba [23].
Reference: [16] <author> Jon B. Postel. </author> <title> User datagram protocol. DARPA Internet RFC 768, </title> <month> August </month> <year> 1980. </year>
Reference-contexts: If the named file is to be accessed, an additional query is made to obtain the access method. Communication with the directory server is accomplished using a reliable datagram protocol implemented on top of UDP <ref> [16] </ref>. This reduces the overhead that would otherwise be incurred when establishing connections to multiple directory servers. At any point in the resolution of a name, the directory server might return one or more union links.
Reference: [17] <author> Jon B. Postel and J. K. Reynolds. </author> <title> File transfer protocol. DARPA Internet RFC 959, </title> <month> October </month> <year> 1985. </year>
Reference-contexts: Examples of host-based naming include FTP <ref> [17] </ref> and Sun's Network File System 2 [20]. In host-based naming, the user must know the name of the host on which an object resides in order to access it.
Reference: [18] <author> D. Presotto, R. Pike, K. Thompson, and H. Trickey. </author> <title> Plan 9: A distributed system. </title> <booktitle> In Proceedings of Spring 1991 EurOpen, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: User-centered naming attempts to address this problem by allowing each user to choose what is to be included in his or her name space. User-centered naming is employed by Tilde [3], QuickSilver [1], Plan 9 <ref> [18] </ref>, Prospero [11], Jade [15], and some object-based systems such as Amoeba [23].
Reference: [19] <author> Jerome H. Saltzer. </author> <title> Operating Systems: an advanced course, </title> <booktitle> volume 60 of Lecture Notes in Computer Science, chapter 3, </booktitle> <pages> pages 99-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: As indicated earlier, the fact that the same name may refer to different objects at different times can make a user-centered name space confusing and can hinder sharing. In the Virtual System Model, every object has an associated name space, forming a closure <ref> [10, 19] </ref>. In this way, the context within which a name is to be resolved can be automatically determined based on the object specifying the name.
Reference: [20] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the Sun Network File System. </title> <booktitle> In Proceedings of the Summer 1985 Usenix Conference, </booktitle> <pages> pages 119-130, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: Examples of host-based naming include FTP [17] and Sun's Network File System 2 <ref> [20] </ref>. In host-based naming, the user must know the name of the host on which an object resides in order to access it. <p> We plan to implement a new application interface for Prospero in order to allow use by existing applications without relinking. This will be accomplished by adding Prospero support to an NFS server <ref> [20] </ref>, the same approach taken by semantic file systems [6] and Alex [2]. We hope to benefit from changes already made in those systems. The Prospero protocol provides a lightweight protocol for querying directories and obtaining file attributes.
Reference: [21] <author> M. F. Schwartz. </author> <title> Resource discovery and related research at the University of Col-orado. </title> <type> Technical Report CU-CS-508-91, </type> <institution> Department of Computer Science University of Colorado, Boulder, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: Such a combination of attribute- and link-based naming is similar to recent work on multi-structured naming [22]. In an alternative approach to finding objects in large systems, Schwartz proposes the use of resource discovery agents <ref> [21] </ref> that accept queries from users and use the information provided by the user to find objects in which the user is interested. In Schwartz's design, the information needed to direct a query to the appropriate agent evolves over time.
Reference: [22] <author> Stuart Sechrest and Michael McClennen. </author> <title> Blending hierarchical and attribute-based file naming. </title> <booktitle> In Proceedings of the 12th International Conference on Distributed Computer Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Other features of the Virtual System Model could be used to impose a structure that directs queries to the appropriate servers. Such a combination of attribute- and link-based naming is similar to recent work on multi-structured naming <ref> [22] </ref>. In an alternative approach to finding objects in large systems, Schwartz proposes the use of resource discovery agents [21] that accept queries from users and use the information provided by the user to find objects in which the user is interested.
Reference: [23] <author> Andrew S. Tanenbaum, Robbert van Renesse, Hans van Staveren, Gregory J. Sharp, Sape J. Mullender, Jack Jansen, and Guido van Rossum. </author> <title> Experience with the Amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <volume> 33(12) </volume> <pages> 47-63, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: User-centered naming attempts to address this problem by allowing each user to choose what is to be included in his or her name space. User-centered naming is employed by Tilde [3], QuickSilver [1], Plan 9 [18], Prospero [11], Jade [15], and some object-based systems such as Amoeba <ref> [23] </ref>. <p> The response includes a list of acceptable access methods, and the information needed to access the object using each. Prospero presently supports the NFS, AFS, FTP, and local access methods. The structure of the Prospero directory server is similar to that in capability based systems, such as Amoeba <ref> [23] </ref> in that the directory server has no idea how its directories fit into the name space. Each directory is a separate object that may be referenced by many other directories. Cycles are even allowed.
Reference: [24] <author> B. Walker, G. Popek, R. English, C. Kline, and G. Thiel. </author> <title> The Locus distributed operating system. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 49-70, </pages> <month> October </month> <year> 1983. </year> <month> 16 </month>
Reference-contexts: Others maintain huge lists of the information available and periodically distribute the lists through electronic mail. 2.2 Global Naming An alternative to host-based naming employed in a number of recent systems is global naming. The Andrew File System [7], Locus <ref> [24] </ref>, and Sprite [13] are among the systems that employ this approach. In global naming, all names are part of a single name space, and the name of the system on which an object resides is not explicitly part of the object's name.
References-found: 24

