URL: http://www.cs.columbia.edu/mcl/papers/xmove.ps.gz
Refering-URL: http://www.cs.columbia.edu/mcl/publication.html
Root-URL: http://www.cs.columbia.edu
Title: XMOVE A PSEUDOSERVER FOR X WINDOW MOVEMENT  
Author: Ethan Solomita, James Kempf, and Dan Duchamp Dan Duchamp. 
Affiliation: of computer science at Columbia University.  
Note: XXXX Ethan Solomita (ethan@cs.columbia.edu) received a B.S. in computer science from Columbia University and is currently pursuing his M.S. at Columbia University as a graduate research assistant to  Dan Duchamp (djd@cs.columbia.edu) is an associate professor  His current research interest is in the various issues in mobile computing. For his initial efforts in this area, he was named an Office of Naval Research Young Investigator for the period 199396.  
Abstract: We describe the design and implementation of xmove, a tool that supports the movement of an applications X11 interface from one X server to another. xmove is implemented as a pseudoserver. A pseudoserver is a program interposed between client and server that looks like a server to the client and looks like a client to the server. The xmove pseudoserver operates by spying on all X protocol messages and retaining any information needed to move a client from one server to another. Compared to other pseudoservers that provide similar functionality, xmove has several advantages: an interface to provide application-specific mapping of properties and selections from server to server; superior, though limited, handling of color; a heuristic means of detecting and handling applications James Kempf (kempf@eng.sun.com) is a staff engineer with Sun Microsystems Computer Corp. in the Nomadic Computing group. For the past two years, he has been working as system architect and designer for advanced nomadic products. Previous to that, James spent seven years working on object-oriented language and operating system technology both at Sun and at Hewlett-Packard Laboratories. James has a Ph.D. in systems engineering from the University of Arizona. 
Abstract-found: 1
Intro-found: 1
Reference: [Abel-Wahab91] <author> Abel-Wahab, H., and M. Feit. XTV: </author> <title> A Framework for Sharing X Window Clients in Remote Synchronous Collaboration, </title> <booktitle> Proceedings of the IEEE Tricom 91, </booktitle> <address> Chapel Hill, </address> <year> 1991. </year>
Reference-contexts: A tool for this is called a MUX, since it multiplexes the clients output onto several servers. For MUX implementation, the pseudoserver approach has been in use for several years, with three academic projects <ref> [Abel-Wahab91] </ref> [Altenhofen90] and a number of commercial products in existence. Hewlett Packards product, SharedX, is implemented with extensions to the server. Any client that connects through an HP server can be resent THE X RESOURCE ISSUE 10 97 to any other server. <p> Since this is key to xmoves functionality, these two tools are not comparable. The other two pseudoservers are XTV/2 <ref> [Abel-Wahab91] </ref> and ShX [Altenhofen90].
Reference: [Altenhofen90] <author> Altenhofen, M. </author> <title> Erweiterung eines Fenstersystems fuer Tutoring-Funktionen, </title> <institution> Diploma Thesis at Universitaet Karlsruhe, Karlsruhe, Germany, </institution> <year> 1990. </year>
Reference-contexts: A tool for this is called a MUX, since it multiplexes the clients output onto several servers. For MUX implementation, the pseudoserver approach has been in use for several years, with three academic projects [Abel-Wahab91] <ref> [Altenhofen90] </ref> and a number of commercial products in existence. Hewlett Packards product, SharedX, is implemented with extensions to the server. Any client that connects through an HP server can be resent THE X RESOURCE ISSUE 10 97 to any other server. <p> Since this is key to xmoves functionality, these two tools are not comparable. The other two pseudoservers are XTV/2 [Abel-Wahab91] and ShX <ref> [Altenhofen90] </ref>.
Reference: [Baldeschwieler93] <author> Baldeschwieler, J. E., T. Gutekunst, and B. Plattner. </author> <title> A Survey of X Protocol Multiplexors, </title> <journal> Computer Communication Review, </journal> <volume> 23(2), </volume> <pages> pp. 1624, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: It is new, and promises to add support for many features in the future, but does not currently support black and white display, custom colormaps or drag-and-drop. It is also a commercial product and available on a limited number of systems. Baldeschwieler et al. <ref> [Baldeschwieler93] </ref> describe their experience with four pseudoserver implementations of MUX tools. Two of these (XMX and Xmux [McFarlane91]) are unable to recreate the clients state on a new server and so are unable to move clients to new displays after the client has been started.
Reference: [Edwards93] <author> Edwards, W. K., E. D. Mynatt, and T. Rodriguez. </author> <title> The Mercator Project: A Nonvisual Interface to the X Window System, THE X RESOURCE, </title> <booktitle> 7, </booktitle> <pages> pp. 3354, </pages> <year> 1993. </year>
Reference-contexts: Since a pseudoserver gets to see all protocol messages, it can record and/or modify the information necessary for implementing window movement. Pseudoservers have been used to add a variety of new features to X applications, from collaborative work to an audio interface on existing applications for the blind <ref> [Edwards93] </ref>. The primary advantage of a pseudoserver is that it meets the goal of not requiring modification to existing executables. Its primary disadvantage is that many aspects of client operation must be deduced at the protocol levelsomething that is in many cases difficult and in some cases impossible.
Reference: [Gust88] <author> Gust, P. </author> <title> Shared X: X in a Distributed Group Work Environment, </title> <booktitle> unpublished work presented at Second Annual X Technical Conference, </booktitle> <month> January </month> <year> 1988. </year>
Reference-contexts: Accordingly, we have set out to build a tool to provide window movement. In order to make it as widely usable as possible we decided that this tool should not require modifications to either clients or servers. We accomplished this by using a design known as a pseudoserver <ref> [Gust88] </ref>. As shown in Figure 1, a pseudoserver is an intermediary positioned between client and server. This design allows for the capture, interpretation, change, and redirection of the X protocol messages exchanged between client and server. Our pseudoserver for window movement is called xmove.
Reference: [Jacobi92] <author> Jacobi, C. </author> <title> Migrating Widgets, THE X RESOURCE, </title> <booktitle> 1, </booktitle> <pages> pp. 157167, </pages> <year> 1992. </year>
Reference-contexts: Such an implementation has been developed by <ref> [Jacobi92] </ref> (see Related Work below) Unlike a pseudoserver implementation, the above can be implemented without having to resort to storing the clients state and modifying its communications. However, clients do not typically use a toolkit exclusively, and often make calls directly to Xlib. <p> However, the information contained in the X protocol is sufficient to efficiently implement most common cases. RELATED WORK There have been a few implementations of window movement using the toolkit approach. Trestle [Nelson91] is a toolkit that can move shell windows from one display to another. XTk <ref> [Jacobi92] </ref> is a window toolkit that allows window widgets to move from one server to another. XTk introduces an additional step in widget creation: screen binding. Screen binding binds a widget to a screen without geometrical layout.
Reference: [Marks91] <author> Marks, Stuart W. </author> <title> Drag-and-Drop Protocol Specification: OpenWindows Version 3, Sun Internal Specifications, </title> <month> July </month> <year> 1991. </year>
Reference-contexts: Currently supported are ICCCM and OpenLook [Sun89], including Drag-and-Drop <ref> [Marks91] </ref>. xmove provides color support for clients moved to new servers with limited color availability. Applications that open multiple connections to the server, such as FrameMaker, are heuristi cally recognized and supported. Movement can be directed onto a specific screen of the new display.
Reference: [McFarlane91] <author> McFarlane, G. Xmux: </author> <title> A system for computer supported collaborative work, </title> <booktitle> Proceedings of 1st Australian Multi-Media Communications, Applications, and Technology Workshop, </booktitle> <address> Sydney, </address> <year> 1991. </year>
Reference-contexts: It is also a commercial product and available on a limited number of systems. Baldeschwieler et al. [Baldeschwieler93] describe their experience with four pseudoserver implementations of MUX tools. Two of these (XMX and Xmux <ref> [McFarlane91] </ref>) are unable to recreate the clients state on a new server and so are unable to move clients to new displays after the client has been started. Since this is key to xmoves functionality, these two tools are not comparable.
Reference: [Nelson91] <author> Nelson, G. </author> <title> Systems Programming with Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: However, the information contained in the X protocol is sufficient to efficiently implement most common cases. RELATED WORK There have been a few implementations of window movement using the toolkit approach. Trestle <ref> [Nelson91] </ref> is a toolkit that can move shell windows from one display to another. XTk [Jacobi92] is a window toolkit that allows window widgets to move from one server to another. XTk introduces an additional step in widget creation: screen binding.
Reference: [Rosenthal91] <author> Rosenthal, D. </author> <title> Inter-Client Communications Conventions Manual, Version 1.1, MIT X Consortium Standard, </title> <publisher> MIT X Consortium, MIT, </publisher> <address> Cambridge MA, </address> <year> 1991 </year>
Reference-contexts: The most frequent cause of this is an application which maintains multiple connections with the server. Each connection appears to be an unrelated client to xmove and the server, yet they may resources created by each other. Inter-client communication (ICCCM <ref> [Rosenthal91] </ref>), using message formats not specified by the X protocol. The contents may contain server-dependent information that needs to be mapped. Displays with different characteristics, such as color resolution. Examination of these and related issues form the majority of the paper.
Reference: [Stevens94] <editor> Stevens, W. Richard. TCP/IP Illustrated, </editor> <volume> Volume 1. </volume> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: Given the results, we have come to believe that this is THE X RESOURCE ISSUE 10 99 most likely not the most efficient implementation for allowing packet insertion, and we are thus considering alternatives. A small but important optimization is to specify the TCP_NODELAY socket option <ref> [Stevens94] </ref> on all connections. A TCP optimization called the Nagle algorithm causes an application which has sent out a small packet to delay sending its next packet. This assists in buffering, but hurts connections that require real-time response. Setting the TCP_NODELAY socket option turns off this optimization. <p> Chris Kantarjiev volunteered a substantial amount of his time to read and criticize earlier drafts. His comments substantially aided our knowledge and thinking, and improved the presentation. Thanks also go to Richard Stevens, for his book TCP/IP Illustrated <ref> [Stevens94] </ref>, which solved most of our performance problems in one fell swoop by explaining Nagles algorithm, its effect, and the TCP_NODELAY workaround. Funding at Sun Microsystems for this public domain project was arranged by Dick Sillman.
Reference: [Sun89] <author> Sun Microsystems. </author> <title> OpenLook Graphical User Interface Functional Specification. </title> <address> Addi-son-Wesley, </address> <year> 1989. </year>
Reference-contexts: It had problems with cut and paste and was unable to move a client to a new server with limited color availability. xmove has several advantages over these systems: xmove provides support for the correct mapping of property and selection information. Currently supported are ICCCM and OpenLook <ref> [Sun89] </ref>, including Drag-and-Drop [Marks91]. xmove provides color support for clients moved to new servers with limited color availability. Applications that open multiple connections to the server, such as FrameMaker, are heuristi cally recognized and supported. Movement can be directed onto a specific screen of the new display.
References-found: 12

