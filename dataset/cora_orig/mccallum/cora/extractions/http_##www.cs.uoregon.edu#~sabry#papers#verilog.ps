URL: http://www.cs.uoregon.edu/~sabry/papers/verilog.ps
Refering-URL: http://www.cs.uoregon.edu/~sabry/papers/index.html
Root-URL: http://www.cs.uoregon.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M.G. Arnold and J.D. Shuler. </author> <title> A Synthesis Preprocessor that Converts Implicit Style Verilog into One-Hot Designs. </title> <booktitle> In 1997 IEEE International Verilog HDL Conference, </booktitle> <pages> pages 38-45, </pages> <address> Washington, 1997. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Further, the extraction of data and control-flow graphs forms the basis of many of the successful results in automatic synthesis ([3], <ref> [1] </ref>, ([5]). All of these works sharply restrict the syntax of behavioral constructs and limit the set of allowable programs to those written in styles known to be synthesizable. It seems certain that we would have to do the same.
Reference: [2] <author> H. Boehm. </author> <title> Side Effects and Aliasing Can Have Simple Axiomatic Descriptions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(4) </volume> <pages> 637-655, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: For each syntactic construct there are associated with it one or more axioms, each of which specifies a legal reduction of that construct to another one. Although this thesis does not directly use the results of either work, we acknowledge previous work by Boehm <ref> [2] </ref> and a paper by Sabry and Field [14] as foundational and inspirational sources. <p> Boehm <ref> [2] </ref> proposes a way to axiomatize side-effects and aliasing under this more general condition. Second, while the semantics given in this thesis are accurate models of Verilog behavior, there are probably alternative formulations that are just as correct, but produce better code from the point of view of their synthesizability.
Reference: [3] <author> R. Camposano. </author> <title> Behavior-Preserving Transformations for High-Level Synthesis. In Hardware Specification, Verification, and Synthesis: </title> <journal> Mathematical Aspects, </journal> <pages> pages 106-128. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference: [4] <author> S. Cheng. </author> <title> Compilation, Synthesis, and Simulation of Hardware Description Languages|The Compositional Models of HDL's. </title> <type> Phd thesis, </type> <institution> Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, </institution> <year> 1998. </year>
Reference-contexts: In the following chapter, we describe the basic methodology. 1 There are behavioral programs in Verilog for which no corresponding structural version|and hence no circuit|can exist. This is known as the model mismatch problem, and is discussed by Szu-Tsung Cheng <ref> [4] </ref> in the introduction of his doctoral dissertation. 5 Related Work Research by the members of the Verilog Formal Equivalence Project (VFE) at Cambridge has had a strong influence on the present work.
Reference: [5] <author> S. Cheng and R. Brayton. </author> <title> Compiling Verilog into Automata. </title> <institution> Memorandum UCB/ERC M94/37, Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, </institution> <year> 1994. </year>
Reference: [6] <author> S. Cheng and R. Brayton. </author> <title> Synthesizing Multi-Phase HDL Programs. </title> <booktitle> In 1996 IEEE International Verilog HDL Conference, </booktitle> <pages> pages 67-76, </pages> <address> Washington, 1996. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Stewart is investigating the semantic properties of many structural constructs, particularly port connections and continuous assignment ([16], [15]). Another prominent effort in formal reasoning about behavioral Verilog is the work surrounding the VIS system and its FSM compiler, vl2mv ([5], <ref> [6] </ref>, [7]). VIS has successfully synthesized and verified substantial Verilog programs, and is even capable of performing some optimizations on the resulting logic. The formal semantics developed for the language are only implicitly given by the transformation algorithms, however.
Reference: [7] <author> S. Cheng, R. Brayton, G. York, K. Yelick, and A. Saldanha. </author> <title> Compiling Verilog into Timed Finite State Machines. </title> <booktitle> In 1995 IEEE International Verilog HDL Conference, </booktitle> <pages> pages 32-39, </pages> <address> Washington, 1995. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Stewart is investigating the semantic properties of many structural constructs, particularly port connections and continuous assignment ([16], [15]). Another prominent effort in formal reasoning about behavioral Verilog is the work surrounding the VIS system and its FSM compiler, vl2mv ([5], [6], <ref> [7] </ref>). VIS has successfully synthesized and verified substantial Verilog programs, and is even capable of performing some optimizations on the resulting logic. The formal semantics developed for the language are only implicitly given by the transformation algorithms, however.
Reference: [8] <author> M.J.C. Gordon. </author> <title> Event and Cycle Semantics of Hardware Description Languages. </title> <note> Unpublished draft, available (as of 08-24-98) on the World-Wide Web at http://www.cl.cam.uk/users/mjcg/Verilog/V/HDLPaper.ps. </note>
Reference: [9] <author> M.J.C. Gordon. </author> <title> The Semantic Challenge of Verilog HDL. </title> <booktitle> In Tenth Annual IEEE Symposium on Logic in Computer Science (LICS '95), </booktitle> <month> June </month> <year> 1995. </year> <note> Revised version available (as of 08-24-98) on the World-Wide Web at http://www.cl.cam.uk/users/mjcg/Verilog/V.ps.Z. 77 </note>
Reference-contexts: Many of the subtleties of the language represented in our semantics are described in Gordon's "Semantic Challenge" paper <ref> [9] </ref>, and it is from this work that this author first learned about Verilog. Gordon's recent work has been directed toward the development of different theoretical models for understanding Verilog and other HDL semantics ([8], [10]), using subsets of the language with simplified semantics. <p> The complete grammar of our behavioral subset is given as an Appendix. 19 Normalization In order to make the task of reasoning about a Verilog program tractable, we will first perform a number of normalizing transformations to each module. The first normalization is a flattening transformation, borrowed from Gordon <ref> [9] </ref>, by which we collect into a single top-level module the set of threads to execute concurrently. <p> See also Gordon <ref> [9] </ref>. 27 value, x to each declared variable. Since each block only assigns to a variable once, the order of the assignments does not matter.
Reference: [10] <author> M.J.C. Gordon and A. Ghosh. </author> <title> Language Independent RTL Semantics. In 1998 IEEE CS Annual Workshop on VLSI: System Level Design, </title> <note> to be published. Available (as of 08-24-98) on the World-Wide Web at http://www.cl.cam.uk/users/mjcg/OrlandoPaper.ps. </note>
Reference-contexts: Gordon's recent work has been directed toward the development of different theoretical models for understanding Verilog and other HDL semantics ([8], <ref> [10] </ref>), using subsets of the language with simplified semantics. Stewart is investigating the semantic properties of many structural constructs, particularly port connections and continuous assignment ([16], [15]). <p> The reverse is, of course, also true. Further, many of the semantics of the structural constructs' timing properties do not appear to be entirely well-understood. There is ongoing work by members of the Cambridge VFE project to identify this part of the semantics ([8], <ref> [10] </ref>, [15], [16]). It is likely that the integration of the structural constructs into our semantics will require some changes to the current approach.
Reference: [11] <author> X. Hua and H. Zang. </author> <title> Axiomatic Semantics of a Hardware Specification Language. </title> <booktitle> In Second Great Lakes Symposium on VLSI, </booktitle> <pages> pages 183-190, </pages> <address> Los Alamitos, CA, 1991. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Van Tassel [17] gives an operational semantic description of its simulation cycle, formulated in the higher-order logic notation of the Cambridge HOL system. The only other axiomatic semantic description of a hardware description language of which we are aware is a short paper by Hua and Zhang <ref> [11] </ref>, in which they describe an axiomatic semantics for the Iowa Logic Specification Language. 7 CHAPTER II A BRIEF TOUR OF THE VERILOG LANGUAGE A circuit can be specified in Verilog using low-level constructs that represent common circuit elements such as logic gates, transistors, and intra-circuit wiring.
Reference: [12] <author> IEEE. </author> <title> Standard Hardware Description Language Based on the Verilog Hardware Description Language. </title> <publisher> IEEE Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1996. </year> <note> IEEE Standard 1364-1995. </note>
Reference-contexts: Verilog began as (and remains today) an industrial language whose design was geared toward providing a practical tool for engineers rather than a tool for academic research. Until the release of the IEEE Standard <ref> [12] </ref> in 1996, there was no official standard semantics for the language. At the time of this writing, no complete formal semantics exists at all. <p> Hence, we will avoid a full description in this thesis, referring the reader instead to Section 4 of the IEEE Standard <ref> [12] </ref>. There are some general properties of expression evaluation that we will include here, however. We can specify how an expression is evaluated (i.e., the order of to be 1 bit in size.
Reference: [13] <author> G.J. Pace and J. </author> <title> He. Formal Reasoning with Verilog HDL. </title> <booktitle> In Workshop on Formal Techniques for Hardware and Hardware-like Systems, </booktitle> <address> Marstrand, Sweden, </address> <month> June </month> <year> 1998. </year>
Reference-contexts: The formal semantics developed for the language are only implicitly given by the transformation algorithms, however. Formal descriptions of a program's timing properties and concurrent behavior are actually performed on the resulting FSMs generated by the compiler. Pace <ref> [13] </ref> has recently published a paper detailing a formal semantics for Ver-ilog, but with slightly simplified behavior.
Reference: [14] <author> A. Sabry and J. </author> <title> Field. Reasoning About Explicit and Implicit Representations of State. </title> <booktitle> In ACM SIGPLAN Workshop on State in Programming Languages, </booktitle> <pages> pages 17-30, </pages> <year> 1993. </year> <type> Tech. Rep. </type> <institution> YALEU/DCS/RR-968, Dept. of Computer Science, Yale University, </institution> <year> 1993. </year>
Reference-contexts: Although this thesis does not directly use the results of either work, we acknowledge previous work by Boehm [2] and a paper by Sabry and Field <ref> [14] </ref> as foundational and inspirational sources. Each axiom describes formally the behavior of a construct S 1 in terms of a (usually) simpler construct, S 2 , by stating that any occurrence in a program of S 1 can be rewritten as S 2 1 .
Reference: [15] <author> D. Stewart. </author> <title> Combining Verilog Signals in Nets. </title> <note> Unpublished draft, available (as of 08-24-98) on the World-Wide Web at http://www.cl.cam.uk/users/djs1002/verilog.project/papers/ combining signals.ps.gz. </note>
Reference-contexts: Gordon's recent work has been directed toward the development of different theoretical models for understanding Verilog and other HDL semantics ([8], [10]), using subsets of the language with simplified semantics. Stewart is investigating the semantic properties of many structural constructs, particularly port connections and continuous assignment ([16], <ref> [15] </ref>). Another prominent effort in formal reasoning about behavioral Verilog is the work surrounding the VIS system and its FSM compiler, vl2mv ([5], [6], [7]). VIS has successfully synthesized and verified substantial Verilog programs, and is even capable of performing some optimizations on the resulting logic. <p> The reverse is, of course, also true. Further, many of the semantics of the structural constructs' timing properties do not appear to be entirely well-understood. There is ongoing work by members of the Cambridge VFE project to identify this part of the semantics ([8], [10], <ref> [15] </ref>, [16]). It is likely that the integration of the structural constructs into our semantics will require some changes to the current approach.
Reference: [16] <author> D. Stewart. </author> <title> Modelling Verilog Port Connections. </title> <note> Unpublished draft, available (as of 08-24-98) on the World-Wide Web at http://www.cl.cam.uk/users/djs1002/verilog.project/papers/ ports.ps.gz. </note>
Reference-contexts: The reverse is, of course, also true. Further, many of the semantics of the structural constructs' timing properties do not appear to be entirely well-understood. There is ongoing work by members of the Cambridge VFE project to identify this part of the semantics ([8], [10], [15], <ref> [16] </ref>). It is likely that the integration of the structural constructs into our semantics will require some changes to the current approach.
Reference: [17] <author> J.P. Van Tassel. </author> <title> A Formalization of the VHDL Simulation Cycle. </title> <editor> In L.J.M. Claesen and M.J.C. Gordon, editors, </editor> <booktitle> Higher Order Logic Theorem Proving and its Applications, </booktitle> <pages> pages 359-374. </pages> <publisher> Elsevier Science Publishers B.V. (North-Holland), </publisher> <year> 1993. </year>
Reference-contexts: In this paper, he gives an operational 6 semantics, based on a variant of the discrete duration calculus, as part of a larger effort to develop a unified framework for simulation and formal verification. VHDL is a hardware description language similar in character to Verilog. Van Tassel <ref> [17] </ref> gives an operational semantic description of its simulation cycle, formulated in the higher-order logic notation of the Cambridge HOL system.
References-found: 17

