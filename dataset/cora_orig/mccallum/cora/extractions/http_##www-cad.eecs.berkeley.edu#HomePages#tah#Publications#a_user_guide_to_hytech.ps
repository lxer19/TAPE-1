URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/a_user_guide_to_hytech.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/a_user_guide_to_hytech.html
Root-URL: http://www.cs.berkeley.edu
Email: tah@eecs.berkeley.edu pho@ichips.intel.com howard@cadence.com  
Title: A User Guide to HyTech  
Author: Thomas A. Henzinger Pei-Hsin Ho Howard Wong-Toi 
Date: October 1996 1 HyTech  
Note: This guide describes version 1.04 of HyTech. The latest update occurred in  is available through the World-Wide Web at http://www.eecs.berkeley.edu/~tah/HyTech.  
Address: Berkeley, CA Hillsboro, OR Berkeley, CA  
Affiliation: EECS Department Intel Development Labs Cadence Berkeley Labs University of California Intel Corporation Cadence Design Systems  
Abstract: HyTech is a tool for the automated analysis of embedded systems. This document, designed for the first-time user of HyTech, guides the reader through the underlying system model, and through the input language for describing and analyzing systems. The guide gives installation instructions, several examples of usage, some hints for gaining maximal computational efficiency from the tool, and the complete grammar for the input language. 
Abstract-found: 1
Intro-found: 1
Reference: [ACH93] <author> R. Alur, C. Courcoubetis, and T.A. Henzinger. </author> <title> Computing accumulated delays in real-time systems. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 181-193. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [ACH + 95] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: Given a parametric system description, HyTech returns the exact conditions on the parameters for which the system satisfies its safety and timing requirements. For completeness, we begin with a brief presentation of the underlying theoretical framework of linear hybrid automata <ref> [ACHH93, ACH + 95] </ref>, which we use to describe system specifications and requirement specifications. These automata model the continuous activities of analog variables (such as temperature, time, and distance), as well as discrete events (such as interrupts and output signals). Communication is modeled through event synchronization and shared variables. <p> Section 9 contains hints for the efficient use of HyTech. Appendix A contains complete input and output files. The grammar of HyTech's input language appears in Appendix B. 2 Linear Hybrid Automata We model systems as the parallel composition of a collection of linear hybrid automata <ref> [ACHH93, ACH + 95] </ref>. Informally, a linear hybrid automaton consists of a finite set X of real-valued variables and a labeled multi-graph. The vertices represent control modes, each with its own constraints on the slopes of variables in X. <p> Analysis methods included reachability and state-space minimization. The specification language Integrator Computation Tree Logic (ICTL) and a model-checking algorithm were introduced in [AHH93]. Approximations and abstract interpretation strategies for the algorithmic analysis of hybrid automata are discussed in the papers [HRP94, OSY94, HH95c]. The paper <ref> [ACH + 95] </ref> provides an overview of the analysis techniques, including approximations. The analysis of non-linear automata by translations to linear automata is described in [HH95a, HWT95a]. Decidability results appear in [Cer92, ACH93, KPSY93, AD94, MV94, PV94, BER94a, BER94b, BR95, MPS95, Hen95, HHK95, HKPV95]. <p> Related Tools The analysis of linear hybrid automata supported by HyTech is based on symbolic region manipulation techniques first presented for real-time systems [HNSY94]. For the restricted case of real-time systems, these techniques have also been implemented in the tools Kronos <ref> [NSY92, DOY94, ACH + 95, DY95] </ref> and Uppaal [LPY95]. Polka [Hal93, HRP94] is a tool for analyzing hybrid systems that concentrates on abstract interpretation strategies. 4 Input Language: System Description HyTech's input consists of a text file containing a system description and a list of iterative analysis commands.
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Given a parametric system description, HyTech returns the exact conditions on the parameters for which the system satisfies its safety and timing requirements. For completeness, we begin with a brief presentation of the underlying theoretical framework of linear hybrid automata <ref> [ACHH93, ACH + 95] </ref>, which we use to describe system specifications and requirement specifications. These automata model the continuous activities of analog variables (such as temperature, time, and distance), as well as discrete events (such as interrupts and output signals). Communication is modeled through event synchronization and shared variables. <p> Section 9 contains hints for the efficient use of HyTech. Appendix A contains complete input and output files. The grammar of HyTech's input language appears in Appendix B. 2 Linear Hybrid Automata We model systems as the parallel composition of a collection of linear hybrid automata <ref> [ACHH93, ACH + 95] </ref>. Informally, a linear hybrid automaton consists of a finite set X of real-valued variables and a labeled multi-graph. The vertices represent control modes, each with its own constraints on the slopes of variables in X. <p> Theory of hybrid automata Hybrid automata are based on timed automata [AD94] and were introduced in <ref> [ACHH93] </ref>. A related model appeared in the same volume [NOSY93]. Analysis methods included reachability and state-space minimization. The specification language Integrator Computation Tree Logic (ICTL) and a model-checking algorithm were introduced in [AHH93]. <p> The current version of HyTech is described in [HHWT95a]. A shorter version of this guide appears in [HHWT95b]. Case studies Numerous examples have been analyzed using linear hybrid automata. We mention only the first appearances of examples in the hybrid automata literature. A gas burner is studied in <ref> [ACHH93] </ref>, 4 This guide describes version 1.04, which contains some extensions to August 1995's version 1.00, together with some syntax changes in the input language. 6 define (raise_rate,9) define (lower_rate,-9) automaton gate synclabs: raise, lower; initially open & g=90; loc raising: while g&lt;=90 wait -dg=raise_rate -- gate is being raised -- <p> &gt;= 1/20 y; b_reachable := reach backward from final_reg endreach; if empty (b_reachable & init_reg) then prints "Non-leaking duration requirement satisfied"; else prints "Non-leaking duration requirement not satisfied"; endif; 6.1 Gas burner The "leaking gas burner" example has appeared in the early literature on formal methods applied to hybrid systems <ref> [CHR91, ACHH93] </ref>. We show how this simple system can be analyzed in HyTech. The gas burner is in one of two modes; it is either leaking or not leaking. Leakages are detected and stopped within 1 second.
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: Theory of hybrid automata Hybrid automata are based on timed automata <ref> [AD94] </ref> and were introduced in [ACHH93]. A related model appeared in the same volume [NOSY93]. Analysis methods included reachability and state-space minimization. The specification language Integrator Computation Tree Logic (ICTL) and a model-checking algorithm were introduced in [AHH93].
Reference: [AHH93] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <booktitle> In Proceedings of the 14th Annual Real-time Systems Symposium, </booktitle> <pages> pages 2-11. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year> <note> Full version appears in IEEE Transactions on Software Engineering, </note> <month> 22(3) </month> <pages> 181-201, </pages> <year> 1996. </year>
Reference-contexts: We also explicitly model urgent events, which must take place as soon as they are enabled (unless another instantaneous action disables them). We use the linear hybrid automata that model a simple railroad crossing <ref> [LS85, AHH93] </ref> as a running example. The system consists of three components: a train, a gate, and a controller. The train is initially some distance | at least 2000 feet | away from the track intersection with the gate fully raised. <p> The linear hybrid automata for the train, the gate, and the controller appear in Figures 1, 2 and 3. 2.1 Definition We give an informal description of linear hybrid automata, and refer the reader to <ref> [AHH93, HHWT95a] </ref> for detailed definitions. A linear hybrid automaton consists of the following components. Variables The automaton uses a finite ordered set X = fx 1 ; x 2 ; . . . ; x n g of real-valued variables to model continuous activities. <p> Thus we conclude that the system is correct for values of the parameter strictly less than 49=5. 3 A Brief History of HyTech 3.1 Implementation There have been three generations of HyTech. The very earliest prototype <ref> [AHH93] </ref> was written entirely in the symbolic computation tool Mathematica. Regions were represented as symbolic formulas. The evaluation of time-step successors used existential quantifications that are easily encoded in this language. <p> Theory of hybrid automata Hybrid automata are based on timed automata [AD94] and were introduced in [ACHH93]. A related model appeared in the same volume [NOSY93]. Analysis methods included reachability and state-space minimization. The specification language Integrator Computation Tree Logic (ICTL) and a model-checking algorithm were introduced in <ref> [AHH93] </ref>. Approximations and abstract interpretation strategies for the algorithmic analysis of hybrid automata are discussed in the papers [HRP94, OSY94, HH95c]. The paper [ACH + 95] provides an overview of the analysis techniques, including approximations. The analysis of non-linear automata by translations to linear automata is described in [HH95a, HWT95a]. <p> In particular, [HKPV95] shows that the reachability problem is decidable, and HyTech's analysis terminates, on the class of rectangular automata, where all convex predicates are of the form a x b (a _x b). HYTECH The earliest version of HyTech is mentioned in <ref> [AHH93] </ref>, and performs full model checking of ICTL formulas. The second generation of HyTech is discussed in [HH95b]. The thesis [Ho95] describes the first two generations of HyTech in more detail, as well as summarizing much of the theory of hybrid automata. <p> The trajectories of a billiard ball, and the temperature of a reactor core are modeled in [NOSY93]. Fischer's timing-based mutual exclusion protocol is considered in <ref> [AHH93] </ref>. The paper [HH95b] includes a parametric analysis. A simple train-gate controller and a scheduler appear in [AHH93]. A manufacturing robot system and Corbett's distributed control system are also discussed in [HH95b]. The paper [HWT95b] describes the verification (see also [HH95b]) and error analysis of an audio control protocol. <p> The trajectories of a billiard ball, and the temperature of a reactor core are modeled in [NOSY93]. Fischer's timing-based mutual exclusion protocol is considered in <ref> [AHH93] </ref>. The paper [HH95b] includes a parametric analysis. A simple train-gate controller and a scheduler appear in [AHH93]. A manufacturing robot system and Corbett's distributed control system are also discussed in [HH95b]. The paper [HWT95b] describes the verification (see also [HH95b]) and error analysis of an audio control protocol. The benchmark generic railroad crossing example and an active structure controller are considered in [HHWT95a]. <p> Both the synchroniza tion label and the update information are optional. For example, the following are legal transitions. 6 Strict inequalities, previously unavailable in HyTech, are now supported. 7 In order to model a disjunctive invariant, split the location into several locations, one for each disjunct <ref> [AHH93] </ref>. 8 var final_reg, init_reg : region; init_reg := loc [train] = far & x&gt;=2000 & loc [controller] = idle & loc [gate] = open & g=90; final_reg := loc [gate] = raising & x&lt;=10 | loc [gate]=open & x&lt;=10 | loc [gate] = lowering & x&lt;=10; print omit all locations <p> The computation takes 0.62 seconds on a SparcStation 20, using a maximum of 0.73 MB of memory. 6.2 Fischer's mutual exclusion protocol 6.2.1 Parametric analysis We demonstrate parametric analysis through a drifting clock version of the simple timing-based mutual-exclusion protocol due to Fischer <ref> [Lam87, AHH93] </ref>. The system consists of two processes, P 1 and P 2 , each performing atomic read and write operations on a shared memory variable k.
Reference: [AIKY92] <author> R. Alur, A. Itai, R.P. Kurshan, and M. Yannakakis. </author> <title> Timing verification by successive approximation. </title> <editor> In G. von Bochmann and D.K. Probst, editors, </editor> <booktitle> CAV 92: Computer-aided Verification, Lecture Notes in Computer Science 663, </booktitle> <pages> pages 137-150. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Indeed, lowering the ratio may be necessary for reachability to terminate. To achieve low lcm:gcd ratios, it is often possible to verify an abstracted system where lower bounds are rounded down to smaller constants, and upper bounds are rounded up <ref> [AIKY92] </ref>. Model urgent events explicitly. If an event is urgent, model this fact directly where possible by using the Asap guard. This is more efficient than introducing an auxiliary clock. Exploit "don't care" information. In many locations of an automaton, not all variable values are relevant.
Reference: [BER94a] <author> A. Bouajjani, R. Echahed, and R. Robbana. </author> <title> Verification of context-free timed systems using linear hybrid observers. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 118-131. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [BER94b] <author> A. Bouajjani, R. Echahed, and R. Robbana. </author> <title> Verifying invariance properties of timed systems with duration variables. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 193-210. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [BR95] <author> A. Bouajjani and R. Robbana. </author> <title> Verifying !-regular properties for subclasses of linear hybrid systems. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 437-450. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [Cer92] <author> K. Cerans. </author> <title> Decidability of bisimulation equivalence for parallel timer processes. </title> <editor> In G. von Bochmann and D.K. Probst, editors, </editor> <booktitle> CAV 92: Computer-aided Verification, Lecture Notes in Computer Science 663, </booktitle> <pages> pages 302-315. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <month> 24 </month>
Reference: [CH78] <author> P. Cousot and N. Halbwachs. </author> <title> Automatic discovery of linear restraints among variables of a program. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <year> 1978. </year>
Reference-contexts: Since the system is incorrect for parameter values for which there exists a state in the region post fl (I) " Y , we may obtain necessary and sufficient conditions for system correctness by performing reachability analysis followed by existential quantification <ref> [CH78] </ref>. Our study of the train-gate controller demonstrates this technique. The controller decides when to issue lower commands to the gate based on the amount of time since the train last passed the sensor located 5 1000 feet ahead of the intersection.
Reference: [CHR91] <author> Z. Chaochen, </author> <title> C.A.R. Hoare, and A.P. Ravn. A calculus of durations. </title> <journal> Information Processing Letters, </journal> <volume> 40(5) </volume> <pages> 269-276, </pages> <year> 1991. </year>
Reference-contexts: &gt;= 1/20 y; b_reachable := reach backward from final_reg endreach; if empty (b_reachable & init_reg) then prints "Non-leaking duration requirement satisfied"; else prints "Non-leaking duration requirement not satisfied"; endif; 6.1 Gas burner The "leaking gas burner" example has appeared in the early literature on formal methods applied to hybrid systems <ref> [CHR91, ACHH93] </ref>. We show how this simple system can be analyzed in HyTech. The gas burner is in one of two modes; it is either leaking or not leaking. Leakages are detected and stopped within 1 second.
Reference: [Cor94] <author> J.C. Corbett. </author> <title> Modeling and analysis of real-time Ada tasking programs. </title> <booktitle> In Proceedings of the 15th Annual Real-time Systems Symposium, </booktitle> <pages> pages 132-141. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: In an error trace, the synchronization labels give a clear indication of which transitions are taken. The full input and output files are found in Appendix A. 6.3 Corbett's distributed controller Corbett <ref> [Cor94] </ref> describes a distributed robot control system, derived from [GL92]. The goal of the system is to provide timely robot commands based on recent measurements of the environment. The system consists of four main components: two sensors, a scheduler, and a controller.
Reference: [DOY94] <author> C. Daws, A. Olivero, and S. Yovine. </author> <title> Verifying ET-LOTOS programs with Kronos. </title> <booktitle> In Proceedings of Seventh International Conference on Formal Description Techniques, </booktitle> <pages> pages 227-242. </pages> <publisher> Chapman & Hall1994. </publisher>
Reference-contexts: Related Tools The analysis of linear hybrid automata supported by HyTech is based on symbolic region manipulation techniques first presented for real-time systems [HNSY94]. For the restricted case of real-time systems, these techniques have also been implemented in the tools Kronos <ref> [NSY92, DOY94, ACH + 95, DY95] </ref> and Uppaal [LPY95]. Polka [Hal93, HRP94] is a tool for analyzing hybrid systems that concentrates on abstract interpretation strategies. 4 Input Language: System Description HyTech's input consists of a text file containing a system description and a list of iterative analysis commands.
Reference: [DY95] <author> C. Daws and S. Yovine. </author> <title> Two examples of verification of multirate timed automata with kronos. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 66-75. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Related Tools The analysis of linear hybrid automata supported by HyTech is based on symbolic region manipulation techniques first presented for real-time systems [HNSY94]. For the restricted case of real-time systems, these techniques have also been implemented in the tools Kronos <ref> [NSY92, DOY94, ACH + 95, DY95] </ref> and Uppaal [LPY95]. Polka [Hal93, HRP94] is a tool for analyzing hybrid systems that concentrates on abstract interpretation strategies. 4 Input Language: System Description HyTech's input consists of a text file containing a system description and a list of iterative analysis commands.
Reference: [GL92] <author> R. Gerber and I. Lee. </author> <title> A layered approach to automating the verification of real-time systems. </title> <journal> IEEE Transactions on Software Engineerging, </journal> <volume> 9(18) </volume> <pages> 768-784, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: In an error trace, the synchronization labels give a clear indication of which transitions are taken. The full input and output files are found in Appendix A. 6.3 Corbett's distributed controller Corbett [Cor94] describes a distributed robot control system, derived from <ref> [GL92] </ref>. The goal of the system is to provide timely robot commands based on recent measurements of the environment. The system consists of four main components: two sensors, a scheduler, and a controller. Each sensor repeatedly constructs readings for sending to the controller.
Reference: [Hal93] <author> N. Halbwachs. </author> <title> Delay analysis in synchronous programs. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 333-346. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: In particular, quantifier-elimination operations for computing time-step successors were expensive. HyTech [HH95b] was rewritten to avoid this bottleneck in Mathematica. The second version of the verifier used a Mathematica main program that called efficient C ++ routines from Halbwachs' polyhedral manipulation library <ref> [Hal93, HRP94] </ref> for computing time-step successors. While this verifier achieved a total speed-up of roughly one order of magnitude, it required inefficient conversions between Mathematica expressions and C ++ data structures. It still relied on Mathematica for computing transition-step successors by substitution. <p> For the restricted case of real-time systems, these techniques have also been implemented in the tools Kronos [NSY92, DOY94, ACH + 95, DY95] and Uppaal [LPY95]. Polka <ref> [Hal93, HRP94] </ref> is a tool for analyzing hybrid systems that concentrates on abstract interpretation strategies. 4 Input Language: System Description HyTech's input consists of a text file containing a system description and a list of iterative analysis commands. The language is case-sensitive.
Reference: [Hen92] <author> T.A. Henzinger. </author> <title> Sooner is safer than later. </title> <journal> Information Processing Letters, </journal> <volume> 43 </volume> <pages> 135-141, </pages> <year> 1992. </year>
Reference-contexts: In practice, many problems to be analyzed can be posed in a natural way as reachability problems. Often, the system is composed with a special monitor process that "watches" the system and enters a violation state whenever the execution violates a given safety requirement. Indeed all timed safety requirements <ref> [Hen92] </ref>, including bounded-time response requirements, can be verified in this way. See Section 7. A state (v; s) is initial if v is the initial location, and s satisfies the initial predicate.
Reference: [Hen95] <author> T.A. Henzinger. </author> <title> Hybrid automata with finite bisimulations. </title> <editor> In Z. Fulop and F. Gecseg, editors, </editor> <booktitle> ICALP 95: Automata, Languages, and Programming, Lecture Notes in Computer Science 944, </booktitle> <pages> pages 324-335. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [HH95a] <author> T.A. Henzinger and P.-H. Ho. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 225-238. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Approximations and abstract interpretation strategies for the algorithmic analysis of hybrid automata are discussed in the papers [HRP94, OSY94, HH95c]. The paper [ACH + 95] provides an overview of the analysis techniques, including approximations. The analysis of non-linear automata by translations to linear automata is described in <ref> [HH95a, HWT95a] </ref>. Decidability results appear in [Cer92, ACH93, KPSY93, AD94, MV94, PV94, BER94a, BER94b, BR95, MPS95, Hen95, HHK95, HKPV95]. <p> The paper [HWT95b] describes the verification (see also [HH95b]) and error analysis of an audio control protocol. The benchmark generic railroad crossing example and an active structure controller are considered in [HHWT95a]. A nonlinear temperature controller appears in <ref> [HH95a] </ref>, and a predator-prey system in [HWT95a]. Related Tools The analysis of linear hybrid automata supported by HyTech is based on symbolic region manipulation techniques first presented for real-time systems [HNSY94].
Reference: [HH95b] <author> T.A. Henzinger and P.-H. Ho. HyTech: </author> <title> The Cornell Hybrid Technology Tool. </title> <editor> In P. Antsaklis, A. Nerode, W. Kohn, and S. Sastry, editors, </editor> <booktitle> Hybrid Systems II, Lecture Notes in Computer Science 999, </booktitle> <pages> pages 265-293. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: While Mathematica offers powerful symbolic manipulation, and allows rapid development and experimentation with algorithms and heuristics, its operations over predicates turned out to be computationally inefficient. In particular, quantifier-elimination operations for computing time-step successors were expensive. HyTech <ref> [HH95b] </ref> was rewritten to avoid this bottleneck in Mathematica. The second version of the verifier used a Mathematica main program that called efficient C ++ routines from Halbwachs' polyhedral manipulation library [Hal93, HRP94] for computing time-step successors. <p> HYTECH The earliest version of HyTech is mentioned in [AHH93], and performs full model checking of ICTL formulas. The second generation of HyTech is discussed in <ref> [HH95b] </ref>. The thesis [Ho95] describes the first two generations of HyTech in more detail, as well as summarizing much of the theory of hybrid automata. The current version of HyTech is described in [HHWT95a]. A shorter version of this guide appears in [HHWT95b]. <p> The trajectories of a billiard ball, and the temperature of a reactor core are modeled in [NOSY93]. Fischer's timing-based mutual exclusion protocol is considered in [AHH93]. The paper <ref> [HH95b] </ref> includes a parametric analysis. A simple train-gate controller and a scheduler appear in [AHH93]. A manufacturing robot system and Corbett's distributed control system are also discussed in [HH95b]. The paper [HWT95b] describes the verification (see also [HH95b]) and error analysis of an audio control protocol. <p> Fischer's timing-based mutual exclusion protocol is considered in [AHH93]. The paper <ref> [HH95b] </ref> includes a parametric analysis. A simple train-gate controller and a scheduler appear in [AHH93]. A manufacturing robot system and Corbett's distributed control system are also discussed in [HH95b]. The paper [HWT95b] describes the verification (see also [HH95b]) and error analysis of an audio control protocol. The benchmark generic railroad crossing example and an active structure controller are considered in [HHWT95a]. A nonlinear temperature controller appears in [HH95a], and a predator-prey system in [HWT95a]. <p> Fischer's timing-based mutual exclusion protocol is considered in [AHH93]. The paper <ref> [HH95b] </ref> includes a parametric analysis. A simple train-gate controller and a scheduler appear in [AHH93]. A manufacturing robot system and Corbett's distributed control system are also discussed in [HH95b]. The paper [HWT95b] describes the verification (see also [HH95b]) and error analysis of an audio control protocol. The benchmark generic railroad crossing example and an active structure controller are considered in [HHWT95a]. A nonlinear temperature controller appears in [HH95a], and a predator-prey system in [HWT95a].
Reference: [HH95c] <author> T.A. Henzinger and P.-H. Ho. </author> <title> A note on abstract-interpretation strategies for hybrid automata. </title> <editor> In P. Antsaklis, A. Nerode, W. Kohn, and S. Sastry, editors, </editor> <booktitle> Hybrid Systems II, Lecture Notes in Computer Science 999, </booktitle> <pages> pages 252-264. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: A related model appeared in the same volume [NOSY93]. Analysis methods included reachability and state-space minimization. The specification language Integrator Computation Tree Logic (ICTL) and a model-checking algorithm were introduced in [AHH93]. Approximations and abstract interpretation strategies for the algorithmic analysis of hybrid automata are discussed in the papers <ref> [HRP94, OSY94, HH95c] </ref>. The paper [ACH + 95] provides an overview of the analysis techniques, including approximations. The analysis of non-linear automata by translations to linear automata is described in [HH95a, HWT95a]. Decidability results appear in [Cer92, ACH93, KPSY93, AD94, MV94, PV94, BER94a, BER94b, BR95, MPS95, Hen95, HHK95, HKPV95].
Reference: [HHK95] <author> M.R. Henzinger, T.A. Henzinger, and P.W. Kopke. </author> <title> Computing simulations on finite and infinite graphs. </title> <booktitle> In Proceedings of the 36th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 453-462. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference: [HHWT95a] <author> T. A. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> the next generation. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 56-65. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: The linear hybrid automata for the train, the gate, and the controller appear in Figures 1, 2 and 3. 2.1 Definition We give an informal description of linear hybrid automata, and refer the reader to <ref> [AHH93, HHWT95a] </ref> for detailed definitions. A linear hybrid automaton consists of the following components. Variables The automaton uses a finite ordered set X = fx 1 ; x 2 ; . . . ; x n g of real-valued variables to model continuous activities. <p> The second generation of HyTech is discussed in [HH95b]. The thesis [Ho95] describes the first two generations of HyTech in more detail, as well as summarizing much of the theory of hybrid automata. The current version of HyTech is described in <ref> [HHWT95a] </ref>. A shorter version of this guide appears in [HHWT95b]. Case studies Numerous examples have been analyzed using linear hybrid automata. We mention only the first appearances of examples in the hybrid automata literature. <p> A manufacturing robot system and Corbett's distributed control system are also discussed in [HH95b]. The paper [HWT95b] describes the verification (see also [HH95b]) and error analysis of an audio control protocol. The benchmark generic railroad crossing example and an active structure controller are considered in <ref> [HHWT95a] </ref>. A nonlinear temperature controller appears in [HH95a], and a predator-prey system in [HWT95a]. Related Tools The analysis of linear hybrid automata supported by HyTech is based on symbolic region manipulation techniques first presented for real-time systems [HNSY94]. <p> Examine these to familiarize yourself with the input description language. Some of them are discussed in the user guide and <ref> [HHWT95a] </ref>. Bugs, comments, suggestions Please report any bugs or installation and maintenance problems to hytech@eecs.berkeley.edu. We do not have the resources to provide commercial-level support, but we can probably help you.
Reference: [HHWT95b] <author> T. A. Henzinger, P.-H. Ho, and H. Wong-Toi. </author> <title> A user guide to HyTech. </title> <editor> In E. Brinksma, W.R. Cleaveland, K.G. Larsen, T. Margaria, and B. Steffen, editors, </editor> <booktitle> TACAS 95: Tools and Algorithms for the Construction and Analysis of Systems, Lecture Notes in Computer Science 1019, </booktitle> <pages> pages 41-71. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The thesis [Ho95] describes the first two generations of HyTech in more detail, as well as summarizing much of the theory of hybrid automata. The current version of HyTech is described in [HHWT95a]. A shorter version of this guide appears in <ref> [HHWT95b] </ref>. Case studies Numerous examples have been analyzed using linear hybrid automata. We mention only the first appearances of examples in the hybrid automata literature.
Reference: [HKPV95] <author> T.A. Henzinger, P.W. Kopke, A. Puri, and P. Varaiya. </author> <booktitle> What's decidable about hybrid automata? In Proceedings of the 27th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 373-382. </pages> <publisher> ACM Press, </publisher> <year> 1995. </year> <month> 25 </month>
Reference-contexts: These iteration schemes are semidecision procedures: there is no guarantee of termination. Nevertheless, we find that in practice, HyTech's reachability procedures terminate on most examples we have attempted. In addition, it has been shown that for a large class of systems <ref> [HKPV95] </ref>, a linear hybrid automaton can be automatically preprocessed into an equivalent automaton over which the iterations converge. 2.4 Parametric analysis A major strength of HyTech is its ability to perform parametric analysis. <p> The paper [ACH + 95] provides an overview of the analysis techniques, including approximations. The analysis of non-linear automata by translations to linear automata is described in [HH95a, HWT95a]. Decidability results appear in [Cer92, ACH93, KPSY93, AD94, MV94, PV94, BER94a, BER94b, BR95, MPS95, Hen95, HHK95, HKPV95]. In particular, <ref> [HKPV95] </ref> shows that the reachability problem is decidable, and HyTech's analysis terminates, on the class of rectangular automata, where all convex predicates are of the form a x b (a _x b). HYTECH The earliest version of HyTech is mentioned in [AHH93], and performs full model checking of ICTL formulas.
Reference: [HNSY94] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: A nonlinear temperature controller appears in [HH95a], and a predator-prey system in [HWT95a]. Related Tools The analysis of linear hybrid automata supported by HyTech is based on symbolic region manipulation techniques first presented for real-time systems <ref> [HNSY94] </ref>. For the restricted case of real-time systems, these techniques have also been implemented in the tools Kronos [NSY92, DOY94, ACH + 95, DY95] and Uppaal [LPY95].
Reference: [Ho95] <author> P.-H. Ho. </author> <title> Automatic Analysis of Hybrid Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Cornell University, </institution> <year> 1995. </year>
Reference-contexts: HYTECH The earliest version of HyTech is mentioned in [AHH93], and performs full model checking of ICTL formulas. The second generation of HyTech is discussed in [HH95b]. The thesis <ref> [Ho95] </ref> describes the first two generations of HyTech in more detail, as well as summarizing much of the theory of hybrid automata. The current version of HyTech is described in [HHWT95a]. A shorter version of this guide appears in [HHWT95b].
Reference: [HRP94] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. </title> <editor> In B. LeCharlier, editor, </editor> <booktitle> SAS 94: Static Analysis Symposium, Lecture Notes in Computer Science 864, </booktitle> <pages> pages 223-237. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: In particular, quantifier-elimination operations for computing time-step successors were expensive. HyTech [HH95b] was rewritten to avoid this bottleneck in Mathematica. The second version of the verifier used a Mathematica main program that called efficient C ++ routines from Halbwachs' polyhedral manipulation library <ref> [Hal93, HRP94] </ref> for computing time-step successors. While this verifier achieved a total speed-up of roughly one order of magnitude, it required inefficient conversions between Mathematica expressions and C ++ data structures. It still relied on Mathematica for computing transition-step successors by substitution. <p> A related model appeared in the same volume [NOSY93]. Analysis methods included reachability and state-space minimization. The specification language Integrator Computation Tree Logic (ICTL) and a model-checking algorithm were introduced in [AHH93]. Approximations and abstract interpretation strategies for the algorithmic analysis of hybrid automata are discussed in the papers <ref> [HRP94, OSY94, HH95c] </ref>. The paper [ACH + 95] provides an overview of the analysis techniques, including approximations. The analysis of non-linear automata by translations to linear automata is described in [HH95a, HWT95a]. Decidability results appear in [Cer92, ACH93, KPSY93, AD94, MV94, PV94, BER94a, BER94b, BR95, MPS95, Hen95, HHK95, HKPV95]. <p> For the restricted case of real-time systems, these techniques have also been implemented in the tools Kronos [NSY92, DOY94, ACH + 95, DY95] and Uppaal [LPY95]. Polka <ref> [Hal93, HRP94] </ref> is a tool for analyzing hybrid systems that concentrates on abstract interpretation strategies. 4 Input Language: System Description HyTech's input consists of a text file containing a system description and a list of iterative analysis commands. The language is case-sensitive.
Reference: [HWT95a] <author> T. A. Henzinger and H. Wong-Toi. </author> <title> Linear phase-portrait approximations for nonlinear hybrid systems. </title> <editor> In R. Alur and T.A. Henzinger, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Approximations and abstract interpretation strategies for the algorithmic analysis of hybrid automata are discussed in the papers [HRP94, OSY94, HH95c]. The paper [ACH + 95] provides an overview of the analysis techniques, including approximations. The analysis of non-linear automata by translations to linear automata is described in <ref> [HH95a, HWT95a] </ref>. Decidability results appear in [Cer92, ACH93, KPSY93, AD94, MV94, PV94, BER94a, BER94b, BR95, MPS95, Hen95, HHK95, HKPV95]. <p> The paper [HWT95b] describes the verification (see also [HH95b]) and error analysis of an audio control protocol. The benchmark generic railroad crossing example and an active structure controller are considered in [HHWT95a]. A nonlinear temperature controller appears in [HH95a], and a predator-prey system in <ref> [HWT95a] </ref>. Related Tools The analysis of linear hybrid automata supported by HyTech is based on symbolic region manipulation techniques first presented for real-time systems [HNSY94].
Reference: [HWT95b] <author> P.-H. Ho and H. Wong-Toi. </author> <title> Automated analysis of an audio control protocol. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 381-394. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Fischer's timing-based mutual exclusion protocol is considered in [AHH93]. The paper [HH95b] includes a parametric analysis. A simple train-gate controller and a scheduler appear in [AHH93]. A manufacturing robot system and Corbett's distributed control system are also discussed in [HH95b]. The paper <ref> [HWT95b] </ref> describes the verification (see also [HH95b]) and error analysis of an audio control protocol. The benchmark generic railroad crossing example and an active structure controller are considered in [HHWT95a]. A nonlinear temperature controller appears in [HH95a], and a predator-prey system in [HWT95a].
Reference: [KPSY93] <author> Y. Kesten, A. Pnueli, J. Sifakis, and S. Yovine. </author> <title> Integration graphs: a class of decidable hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 179-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [Lam87] <author> L. Lamport. </author> <title> A fast mutual exclusion algorithm. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 1-11, </pages> <year> 1987. </year>
Reference-contexts: The computation takes 0.62 seconds on a SparcStation 20, using a maximum of 0.73 MB of memory. 6.2 Fischer's mutual exclusion protocol 6.2.1 Parametric analysis We demonstrate parametric analysis through a drifting clock version of the simple timing-based mutual-exclusion protocol due to Fischer <ref> [Lam87, AHH93] </ref>. The system consists of two processes, P 1 and P 2 , each performing atomic read and write operations on a shared memory variable k.
Reference: [LPY95] <author> K. G. Larsen, P. Pettersson, and W. Yi. </author> <title> Compositional and symbolic model-checking of real-time systems. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 76-87. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Related Tools The analysis of linear hybrid automata supported by HyTech is based on symbolic region manipulation techniques first presented for real-time systems [HNSY94]. For the restricted case of real-time systems, these techniques have also been implemented in the tools Kronos [NSY92, DOY94, ACH + 95, DY95] and Uppaal <ref> [LPY95] </ref>. Polka [Hal93, HRP94] is a tool for analyzing hybrid systems that concentrates on abstract interpretation strategies. 4 Input Language: System Description HyTech's input consists of a text file containing a system description and a list of iterative analysis commands. The language is case-sensitive.
Reference: [LS85] <author> N. Leveson and J. Stolzy. </author> <title> Analyzing safety and fault tolerance using timed Petri nets. </title> <booktitle> In Proceedings of International Joint Conference on Theory and Practice of Software Development, Lecture Notes in Computer Science 186, </booktitle> <pages> pages 339-355. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: We also explicitly model urgent events, which must take place as soon as they are enabled (unless another instantaneous action disables them). We use the linear hybrid automata that model a simple railroad crossing <ref> [LS85, AHH93] </ref> as a running example. The system consists of three components: a train, a gate, and a controller. The train is initially some distance | at least 2000 feet | away from the track intersection with the gate fully raised.
Reference: [MPS95] <author> O. Maler, A. Pnueli, and J. Sifakis. </author> <title> On the synthesis of discrete controllers for timed systems. In E.W. </title> <editor> Mayr and C. Puech, editors, </editor> <booktitle> STACS 95: Symposium on Theoretical Aspects of Computer Science, Lecture Notes in Computer Science 900, </booktitle> <pages> pages 229-242. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [MV94] <author> J. McManis and P. Varaiya. </author> <title> Suspension automata: a decidable class of hybrid automata. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 105-117. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [NOSY93] <author> X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> An approach to the description and analysis of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 149-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Theory of hybrid automata Hybrid automata are based on timed automata [AD94] and were introduced in [ACHH93]. A related model appeared in the same volume <ref> [NOSY93] </ref>. Analysis methods included reachability and state-space minimization. The specification language Integrator Computation Tree Logic (ICTL) and a model-checking algorithm were introduced in [AHH93]. Approximations and abstract interpretation strategies for the algorithmic analysis of hybrid automata are discussed in the papers [HRP94, OSY94, HH95c]. <p> The trajectories of a billiard ball, and the temperature of a reactor core are modeled in <ref> [NOSY93] </ref>. Fischer's timing-based mutual exclusion protocol is considered in [AHH93]. The paper [HH95b] includes a parametric analysis. A simple train-gate controller and a scheduler appear in [AHH93]. A manufacturing robot system and Corbett's distributed control system are also discussed in [HH95b].
Reference: [NSY92] <author> X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Compiling real-time specifications into extended automata. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-18(9):794-804, </volume> <year> 1992. </year>
Reference-contexts: Related Tools The analysis of linear hybrid automata supported by HyTech is based on symbolic region manipulation techniques first presented for real-time systems [HNSY94]. For the restricted case of real-time systems, these techniques have also been implemented in the tools Kronos <ref> [NSY92, DOY94, ACH + 95, DY95] </ref> and Uppaal [LPY95]. Polka [Hal93, HRP94] is a tool for analyzing hybrid systems that concentrates on abstract interpretation strategies. 4 Input Language: System Description HyTech's input consists of a text file containing a system description and a list of iterative analysis commands.
Reference: [OSY94] <author> A. Olivero, J. Sifakis, and S. Yovine. </author> <title> Using abstractions for the verification of linear hybrid systems. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 81-94. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: A related model appeared in the same volume [NOSY93]. Analysis methods included reachability and state-space minimization. The specification language Integrator Computation Tree Logic (ICTL) and a model-checking algorithm were introduced in [AHH93]. Approximations and abstract interpretation strategies for the algorithmic analysis of hybrid automata are discussed in the papers <ref> [HRP94, OSY94, HH95c] </ref>. The paper [ACH + 95] provides an overview of the analysis techniques, including approximations. The analysis of non-linear automata by translations to linear automata is described in [HH95a, HWT95a]. Decidability results appear in [Cer92, ACH93, KPSY93, AD94, MV94, PV94, BER94a, BER94b, BR95, MPS95, Hen95, HHK95, HKPV95].
Reference: [PV94] <author> A. Puri and P. Varaiya. </author> <title> Decidability of hybrid systems with rectangular differential inclusions. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 95-104. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [VW86] <author> M.Y. Vardi and P. Wolper. </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> In Proceedings of the First Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 322-331. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1986. </year> <month> 26 </month>
Reference-contexts: However, a simple technique can be used to reduce many requirements to safety requirements. The idea is to build a separate monitor automaton for the requirement being checked <ref> [VW86] </ref>. The monitor typically contains special states which are only reachable by violating executions. The monitor must act strictly as an observer of the original system, without changing its behavior.
References-found: 42

