URL: http://ptolemy.eecs.berkeley.edu/papers/96/comparing/iccad.ps
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/96/comparing/
Root-URL: 
Email: -eal, alberto-@EECS.Berkeley.EDU  
Title: Comparing Models of Computation  
Author: Edward A. Lee and Alberto Sangiovanni-Vincentelli 
Date: Nov. 10-14, 1996  
Note: To appear: Proceedings of ICCAD, San Jose, CA,  
Address: Berkeley, CA 94720-1770  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: We give a denotational framework (a meta model) within which certain properties of models of computation can be understood and compared. It describes concurrent processes as sets of possible behaviors. Compositions of processes are given as intersections of their behaviors. The interaction between processes is through signals, which are collections of events. Each event is a value-tag pair, where the tags can come from a partially ordered or totally ordered set. Timed models are where the set of tags is totally ordered. Synchronous events share the same tag, and synchronous signals contain events with the same set of tags. Synchronous systems contain synchronous signals. Strict causality (in timed systems) and continuity (in untimed systems) ensure determinacy under certain technical conditions. The framework is used to compare certain essential features of various models of computation, including Kahn process networks, dataow, sequential processes, concurrent sequential processes with rendez-vous, Petri nets, and discrete-event systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Benveniste and G. Berry, </author> <title> The Synchronous Approach to Reactive and Real-Time Systems, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> Vol. 79, No. 9, </volume> <pages> pp. 1270-1282, </pages> <year> 1991. </year>
Reference-contexts: A discrete-time system is a synchronous discrete-event system. By this definition, the so-called Synchronous Data-ow (SDF) model of computation [11] is not synchronous (we will say more about dataow models below). The synchronous languages <ref> [1] </ref> (such as Lustre, Esterel, and Argos) are synchronous if we consider , where (bottom) denotes the absence of an event. Indeed, a key property of synchronous languages is that the absence of an event at a particular tick (tag) is well-defined.
Reference: [2] <author> A. Benveniste and P. Le Guernic, </author> <title> Hybrid Dynamical Sys tems Theory and the SIGN AL Language, </title> <journal> IEEE Tr. on Automatic Control, </journal> <volume> Vol. 35, No. 5, </volume> <pages> pp. 525-546, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Indeed, a key property of synchronous languages is that the absence of an event at a particular tick (tag) is well-defined. Another key property is that event tags are totally ordered. Any two events either have the same tag or one unambiguously precedes the other. The language Signal <ref> [2] </ref> is called a synchronous language, but in general, it is not even timed. It supports nondeterminate operations which require a partially ordered tag model. Cycle-based logic simulators are discrete-time systems. 4.5 Causality We begin with a timed notion of causality, momentarily restricting our attention to timed systems.
Reference: [3] <author> C. Cassandras, </author> <title> Discrete Event Systems, Modeling and Per formance Analysis, </title> <publisher> Irwin, </publisher> <address> Homewood IL, </address> <year> 1993. </year>
Reference: [4] <author> B. A. Davey and H. A. Priestle y, </author> <title> Introduction to Lattices and Order, </title> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: Partially and totally ordered tags A partially ordered tagged system is a system where the set of tags is a partially ordered set. Partially ordered means that there exists an irreexive, antisymmetric, transitive relation between members of the set <ref> [4] </ref>. We denote this relation using the template &lt;. Of course, we can define a related relation, denoted , where if or . The ordering of the tags induces an ordering of events as well. Given two events and , if and only if . <p> We then take the semantics of the composition, given inputs to be the least fixed point of the equation . (11) A classic CPO fixed point theorem <ref> [4] </ref> tells us that this least fixed point e xists, and gi ves us a constructi ve procedure for finding it. Under this least-fixed-point semantics, the value of in figure 3 is , the empty signal.
Reference: [5] <author> C. Ellingson and R. J. K ulpinski, </author> <title> Dissemination of Sys tem-Time, </title> <journal> IEEE Trans. on Communications, </journal> <volume> Vol. Com-23, No. 5, </volume> <pages> pp. 605-624, </pages> <month> May, </month> <year> 1973. </year>
Reference: [6] <author> G. S. Fishman, </author> <title> Principles of Discrete Event Simulation, </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: A continuous-time system is a metric timed system where is a continuum (a closed connected set) and for each signal in any tuple that satisfies the system. 4.3 Discrete-event systems Many simulators, including most digital circuit simulators, are based on a discrete-event model (see for example <ref> [6] </ref>). Given a system , and a tuple of signals that satisfies the system, let denote the set of tags appearing in any signal in the tuple . Clearly and the ordering relationship for members of induces an ordering relationship for members of . <p> In the control systems community, a discrete-event model also requires that the set of values be countable, or even finite [3][7]. This helps to keep the state space finite, which can be a big help in formal analysis. However, in the simulation community, it is irrelevant whether is countable <ref> [6] </ref>. In simulation, the distinction is moot, since all representations of values in a computer simulation are drawn from a finite set.
Reference: [7] <author> Y.-C. Ho (Ed.), </author> <title> Discrete Event Dynamic Systems: Analyz ing Complexity and Performance in the Modern World, </title> <publisher> IEEE Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference: [8] <author> C. A. R. Hoare, </author> <title> Communicating Sequential Processes, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 21, No. 8, </volume> <month> August </month> <year> 1978. </year>
Reference-contexts: The sequential actions in the process (such as state changes) are represented by events on the signal. 6.3 Sequential processes with rendezvous The CSP model of Hoare <ref> [8] </ref> and the CCS model of Milner [15] involve sequential processes that communicate via rendezvous. Similar models are realized in the languages Occam and Lotos. This idea is depicted in figure 4 (b). In this case is totally ordered for each .
Reference: [9] <author> G. Kahn, </author> <title> The Semantics of a Simple Language for Parallel Programming, </title> <booktitle> Proc. of the IFIP Congress 74, </booktitle> <publisher> North-Hol-land Publishing Co., </publisher> <year> 1974. </year>
Reference-contexts: With this definition, if is a CPO, so is . We will assume henceforth that is a CPO for all . We can now introduce the untimed equivalent of causality. 5.2 Monotonicity and continuity We now generalize to untimed systems, connecting to well-known results originally due to Kahn <ref> [9] </ref>. Our contribution here is only to present these results using our nota-tion. <p> For intuition, it may help some readers to connect the definition to that of continuous functions of real variables. This is easy if is interpreted as a limit of the increasing chain. Fact. A continuous process is monotonic <ref> [9] </ref>. Consider a composition of continuous processes . Assume for some . In general, the composition may not be determinate. Consider a trivial case, where and : is the identity function. This function is certainly continuous.
Reference: [10] <author> L. Lamport, </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 21, No. 7, </volume> <month> July, </month> <year> 1978. </year>
Reference-contexts: Mazurkiewicz uses partial orders in developing an algebra of concurrent objects associated with events [14]. Partial orders have also been used to analyze Petri nets [17]. Lamport observes that a coordinated notion of time cannot be exactly maintained in distributed systems, and shows that a partial ordering is sufficient <ref> [10] </ref>. 4. Timed concurrent systems A timed system is a tagged system where is totally ordered. That is, for any distinct and in , either or .
Reference: [11] <author> E. A. Lee and D. G. Messerschmitt, </author> <title> Synchronous Data Flow, </title> <booktitle> IEEE Proceedings, </booktitle> <month> September, </month> <year> 1987. </year>
Reference-contexts: A system is synchronous if every signal in the system is synchronous with every other signal in the system. A discrete-time system is a synchronous discrete-event system. By this definition, the so-called Synchronous Data-ow (SDF) model of computation <ref> [11] </ref> is not synchronous (we will say more about dataow models below). The synchronous languages [1] (such as Lustre, Esterel, and Argos) are synchronous if we consider , where (bottom) denotes the absence of an event.
Reference: [12] <author> E. A. Lee and T. M. Parks, </author> <title> Dataflow Process Networks, P ro c e e d i n g s o f t h e I E E E , M a y 1 9 9 5 . ( h t t p : / / ptolemy.eecs.berkeley.edu/papers/processNets) </title>
Reference-contexts: Moreover, if a process can reach a state where it will rendezvous with one of several other processes, the composition is nondeterminate because of this partial order. 6.4 Dataow The dataow model of computation is a special case of Kahn process networks <ref> [12] </ref>. A dataow process is a Kahn process that is also sequential, where the events on the self-loop signal denote the firings of the dataow actor. The firing rules of a dataow actor are partial ordering constraints between these events and events on the inputs.
Reference: [13] <author> E. A. Lee and A. Sangio vanni-Vincentelli, </author> <title> The Tagged Signal Model A Preliminary Version of a Denotational Framework for Comparing Models of Computation, </title> <institution> Memorandum UCB/ERL M96/33, ERL, University of Califor-nia, Berkeley, </institution> <address> CA 94720, </address> <month> June 4, </month> <year> 1996. </year> <note> (http://ptolemy.eecs.berkeley.edu/papers/96/denotational) </note>
Reference-contexts: Moreover, this interpretation is consistent with execution policies typically used for such systems (their operational semantics), and hence is an entirely reasonable denotational semantics for the composition. This interpretation is called the least-fixed-point semantics. Consider again a composition of functional and continuous processes . It is possible (see <ref> [13] </ref>) to describe this composition using a continuous function : , where is the total number of output signals for the functions, and is the number of remaining signals (which are therefore inputs). <p> Then the inputs and outputs are related to the firings as . A network of such processes will establish a partial ordering relationship between the firings of the actors. More interesting examples of dataow actors can also be modeled <ref> [13] </ref>. 6.5 Discrete-event simulators In a typical discrete-event simulator, sequential processes are interconnected with signals that contain events that explicitly include time stamps. These are the only types of systems we have discussed where the tags are explicit in the implementation.
Reference: [14] <author> A. Mazurkiewicz, </author> <title> Traces, Histories, Graphs: Instances of a Process Monoid, </title> <booktitle> in Proc. Conf. on Mathematical Foundations of Computer Science, </booktitle> <editor> M. P. Chytil and V. Koubek, eds., </editor> <publisher> Springer-Verlag LNCS 176, </publisher> <year> 1984. </year>
Reference-contexts: We are not alone in using partial orders to model concurrent systems. Pratt motivates doing so, and then generalizes the notion of formal string languages to allow partial ordering rather than just total ordering [16]. Mazurkiewicz uses partial orders in developing an algebra of concurrent objects associated with events <ref> [14] </ref>. Partial orders have also been used to analyze Petri nets [17]. Lamport observes that a coordinated notion of time cannot be exactly maintained in distributed systems, and shows that a partial ordering is sufficient [10]. 4.
Reference: [15] <author> R. Milner, </author> <title> Communication and Concurrency, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference-contexts: The sequential actions in the process (such as state changes) are represented by events on the signal. 6.3 Sequential processes with rendezvous The CSP model of Hoare [8] and the CCS model of Milner <ref> [15] </ref> involve sequential processes that communicate via rendezvous. Similar models are realized in the languages Occam and Lotos. This idea is depicted in figure 4 (b). In this case is totally ordered for each .
Reference: [16] <author> V. R. Pratt, </author> <title> Modeling Concurrenc y with Partial Orders, </title> <journal> Int. J. of Parallel Programming, </journal> <volume> Vol. 15, No. 1, </volume> <pages> pp. 33-71, </pages> <month> Feb. </month> <year> 1986. </year>
Reference-contexts: Given two events and , if and only if . We are not alone in using partial orders to model concurrent systems. Pratt motivates doing so, and then generalizes the notion of formal string languages to allow partial ordering rather than just total ordering <ref> [16] </ref>. Mazurkiewicz uses partial orders in developing an algebra of concurrent objects associated with events [14]. Partial orders have also been used to analyze Petri nets [17].
Reference: [17] <author> W. Reisig, </author> <title> Petri Nets: An Introduction, </title> <publisher> Springer-Verlag (1985). </publisher>
Reference-contexts: Pratt motivates doing so, and then generalizes the notion of formal string languages to allow partial ordering rather than just total ordering [16]. Mazurkiewicz uses partial orders in developing an algebra of concurrent objects associated with events [14]. Partial orders have also been used to analyze Petri nets <ref> [17] </ref>. Lamport observes that a coordinated notion of time cannot be exactly maintained in distributed systems, and shows that a partial ordering is sufficient [10]. 4. Timed concurrent systems A timed system is a tagged system where is totally ordered.
Reference: [18] <author> J. E. Stoy, </author> <title> Denotational Semantics: The Scott-Str achey Approach to Programming Language Theory, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1977. </year>
Reference-contexts: To be sufficiently precise, this language is a mathematical one, although the mathematics is not much more sophisticated than basic set theory. It is denotational rather than operational, meaning that it declares relationships rather than describing procedures <ref> [18] </ref>. It is also incomplete, in that it focuses on certain properties of models of computation, namely their concurrency and communica-tion, and ignores other aspects. In many denotational semantics, the denotation of a program fragment is a partial function or a relation on the state.
Reference: [19] <author> G. Winskel, </author> <title> The Formal Semantics of Programming Lan guages, </title> <publisher> the MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1993. </year>
Reference-contexts: In many denotational semantics, the denotation of a program fragment is a partial function or a relation on the state. This approach does not model concurrency well <ref> [19] </ref>, where the notion of a single global state may not be well-defined. In our approach, the denotation of a program fragment (called a process) is a partial function or a rela-tion on signals. We define precisely a number of terms. <p> Intuitively, this solution agrees with a reasonable execution of the process, in which we would not produce any output from because there are no inputs. This reasonable operational semantics therefore agrees with the denotational semantics. For a complete treatment of this agreement, see Win-skel <ref> [19] </ref>. Notice that the existence of multiple fixed points implies that for a given input constraint , the set of signal tuples that satisfy the system has size greater than one, implying nondeterminism.
Reference: [20] <author> R. K. Yates, </author> <title> Networks of Real-Time Processes, </title> <booktitle> in Concur 93, Proc. of the 4th Int. Conf . on Concurrency Theory, </booktitle> <editor> E. Best, ed., </editor> <publisher> Springer-Verlag LNCS 715, </publisher> <year> 1993. </year> <title> s 2 = V V 1 V 2 </title>
Reference-contexts: It supports nondeterminate operations which require a partially ordered tag model. Cycle-based logic simulators are discrete-time systems. 4.5 Causality We begin with a timed notion of causality, momentarily restricting our attention to timed systems. Borrowing notation from Yates <ref> [20] </ref>, a signal is defined to be the subset of events in with tags less than or equal to tag . This is called a cut of . This generalizes to tuples of signals or sets of tuples of signals, where and 1. <p> A functional process is causal if for all . (5) Yates <ref> [20] </ref> considers timed systems with metric time where is a tag 1 ; a functional process is -causal if , the tuple of empty signals, and for all , Intuitively, causal means that the process incurs a time delay of .
References-found: 20

