URL: http://www.cis.ohio-state.edu/~harrold/webpapers/paste98-spectra.ps
Refering-URL: http://www.cis.ohio-state.edu/~harrold/allpapers.html
Root-URL: 
Email: harrold@cis.ohio-state.edu  grother@cs.orst.edu  rwu@cis.ohio-state.edu  liuyi@cs.orst.edu  
Title: An Empirical Investigation of Program Spectra  
Author: Mary Jean Harrold Rui Wu Liu Yi 
Address: Gregg Rothermel  
Affiliation: Ohio State U.  Oregon State U.  Ohio State U.  Oregon State U.  
Abstract: A variety of expensive software maintenance and testing tasks require a comparison of the behaviors of program versions. Program spectra have recently been proposed as a heuristic for use in performing such comparisons. To assess the potential usefulness of spectra in this context, we conducted an experiment that examined the relationship between program spectra and program behavior, and empirically compared several types of spectra. This paper reports the results of that experiment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Ammons, T. Ball, and J. R. Larus. </author> <title> Exploiting hardware performance counters with flow and context sensitive profiling. </title> <journal> ACM Sigplan Notices, </journal> <volume> 32(5) </volume> <pages> 85-96, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: each path (intraprocedural, loop-free)was executed CPS Complete-path complete path that was executed DHS Data-dependence-hit definition-use pairs that were executed DCS Data-dependence-count number of times each definition-use pair was executed OPS Output output that was produced ETS Execution-trace execution trace that was produced Table 1: A catalog of program spectra. data <ref> [1] </ref> to support this conjecture: this data indicates that path profiling data may be superior to edge profiling data for certain applications. Another recent study [4], however, suggests the contrary. These studies have not directly investigated program spectra. <p> Another recent study [4], however, suggests the contrary. These studies have not directly investigated program spectra. A second goal of this work is to perform such an investigation. 2 Program Spectra A program spectrum characterizes, or provides a signature of, a program's behavior [10]. Path spectra use path profiling <ref> [1, 3] </ref> to track the execution of loop-free intraprocedural paths in a program. Path spectra can track the frequency of a path occurrence, or ignore frequency and track whether or not the path occurred. Spectra can also be constructed based on node or edge profiling data.
Reference: [2] <author> T. Ball. </author> <title> On the limit of control-flow analysis for regression testing. </title> <booktitle> In Proc. of the ACM Int'l. Symp. on Softw. Testing and Analysis, </booktitle> <month> Mar. </month> <year> 1998. </year>
Reference-contexts: In general, there is no algorithm to precisely identify these tests, but under certain conditions, the tests that produce different execution trace spectra constitute a conservative (safe) approximation. Several regression test selection techniques <ref> [2, 5, 12] </ref> exploit this relationship to select safe subsets of T for use in regression testing P 0 .
Reference: [3] <author> T. Ball and J. R. Larus. </author> <title> Efficient path profiling. </title> <booktitle> In Proc. of Micro 96, </booktitle> <pages> pages 46-57, </pages> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: Another recent study [4], however, suggests the contrary. These studies have not directly investigated program spectra. A second goal of this work is to perform such an investigation. 2 Program Spectra A program spectrum characterizes, or provides a signature of, a program's behavior [10]. Path spectra use path profiling <ref> [1, 3] </ref> to track the execution of loop-free intraprocedural paths in a program. Path spectra can track the frequency of a path occurrence, or ignore frequency and track whether or not the path occurred. Spectra can also be constructed based on node or edge profiling data.
Reference: [4] <author> T. Ball, P. Mataga, and M. Sagiv. </author> <title> Edge profiling versus path profiling: The showdown. </title> <booktitle> In Proc. of 25th ACM Symp. on Prin. of Prog. Lang., </booktitle> <pages> pages 134-148, </pages> <month> Jan. </month> <year> 1998. </year>
Reference-contexts: Another recent study <ref> [4] </ref>, however, suggests the contrary. These studies have not directly investigated program spectra. A second goal of this work is to perform such an investigation. 2 Program Spectra A program spectrum characterizes, or provides a signature of, a program's behavior [10]. <p> Furthermore, estimates suggest that the profiling necessary to collect BCS spectra incurs a 16% run-time overhead whereas the profiling necessary to collect PCS spectra incurs a 30% run-time overhead <ref> [4] </ref>. In the absence of a gain in sensitivity, use of the PCS spectra instead of the BCS spectra would not be worth the added overhead required to collect the more sensitive spectra.
Reference: [5] <author> Y. Chen, D. Rosenblum, and K. Vo. TestTube: </author> <title> A system for selective regression testing. </title> <booktitle> In Proc. of the 16th Int'l. Conf. on Softw. Eng., </booktitle> <pages> pages 211-222, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: In general, there is no algorithm to precisely identify these tests, but under certain conditions, the tests that produce different execution trace spectra constitute a conservative (safe) approximation. Several regression test selection techniques <ref> [2, 5, 12] </ref> exploit this relationship to select safe subsets of T for use in regression testing P 0 .
Reference: [6] <author> M. J. Harrold and G. Rothermel. Aristotle: </author> <title> A system for research on and development of program-analysis-based tools. </title> <type> Technical Report OSU-CISRC-3/97-TR17, </type> <institution> The Ohio State University, </institution> <month> Mar. </month> <year> 1997. </year>
Reference-contexts: traverse modified statements in the P 0 s. 3 For the branch-hit spectra (BHS), the branch-count spectra (BCS), the path-hit spectra (PHS), the path-count spectra (PCS) the data-dependence-hit spectra (DHS), the data-dependence-count spectra (DCS), and the complete-path spectra (CPS) we used the various coverage tools from the Aristotle analysis system <ref> [6] </ref> and the FATE data-flow testing system [9] to record the enti 2 These programs, versions, and inputs were assembled by researchers at Siemens Corporate Research for a study of the fault-detection abilities of control- and data-flow coverage criteria [8]. 3 In general this approach may identify a superset of the
Reference: [7] <author> M. J. Harrold, G. Rothermel, R. Wu, and L. Yi. </author> <title> An empirical investigation and comparison of program spectra. </title> <type> Technical Report OSU-CISRC-11/97-TR55, </type> <institution> The Ohio State University, </institution> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: Theorem 1: The spectra listed in Table 1 form the subsumption hierarchy shown in Figure 2, in which the spectra that is the source of an edge directly subsumes the spectra that is the target of that edge. Proof: See Reference <ref> [7] </ref>. indicates that spectra type A subsumes spectra type B. 3 The Experiment 3.1 Objectives The objectives of our experiment were to empirically investigate the following questions: 1.
Reference: [8] <author> M. Hutchins, H. Foster, T. Goradia, and T. </author> <title> Ostrand. Experiments on the effectiveness of dataflow- and controlflow-based test adequacy criteria. </title> <booktitle> In Proc. of the 16th Int'l. on Softw. Eng., </booktitle> <pages> pages 191-200, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: we used the various coverage tools from the Aristotle analysis system [6] and the FATE data-flow testing system [9] to record the enti 2 These programs, versions, and inputs were assembled by researchers at Siemens Corporate Research for a study of the fault-detection abilities of control- and data-flow coverage criteria <ref> [8] </ref>. 3 In general this approach may identify a superset of the inputs that produce different execution traces; however, in practice we can determine when the approach incurs imprecision, and we know that in all the cases examined for our experimentation, the algorithm identified precisely the inputs that produced different execution
Reference: [9] <author> J. Lloyd and M. Harrold. </author> <title> Implementing an interprocedural dataflow tester using abstract execution. </title> <type> Technical Report 95-111, </type> <institution> Clemson University, Clemson, </institution> <address> SC, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: s. 3 For the branch-hit spectra (BHS), the branch-count spectra (BCS), the path-hit spectra (PHS), the path-count spectra (PCS) the data-dependence-hit spectra (DHS), the data-dependence-count spectra (DCS), and the complete-path spectra (CPS) we used the various coverage tools from the Aristotle analysis system [6] and the FATE data-flow testing system <ref> [9] </ref> to record the enti 2 These programs, versions, and inputs were assembled by researchers at Siemens Corporate Research for a study of the fault-detection abilities of control- and data-flow coverage criteria [8]. 3 In general this approach may identify a superset of the inputs that produce different execution traces; however,
Reference: [10] <author> T. Reps, T. Ball, M. Das, and J. Larus. </author> <title> The use of program profiling for software maintenance with applications to the year 2000 problem. </title> <journal> ACM Software Engineering Notes, </journal> <volume> 22(6) </volume> <pages> 432-439, </pages> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: Tasks such as these constitute a significant percentage of the costs of software testing and maintenance; techniques that reduce these costs are valuable. Path spectra were recently proposed as a heuristic for understanding the magnitude of the behavioral changes between program versions <ref> [10] </ref>. 1 A path spectrum is a distribution of paths derived from an execution of a pro fl This work was supported in part by a grant from Microsoft Inc., by NSF under NYI Award CCR-9696157 to Ohio State University, ESS Award CCR-9707792 to Ohio State University and Oregon State University, <p> Such a technique may aid in addressing testing and maintenance tasks that require such understanding. For example, constructing expected outputs for programs can be costly; the presence of spectra differences may serve as an indicator of cases in which that construction is unnecessary. Alternatively, spectra comparison <ref> [10] </ref> may help programmers locate points of divergence in computations, that may guide them in fault localization. For path spectra to be useful in these contexts, however, they must provide meaningful behavior signatures. <p> Program behavior can be measured in many ways; however, one measure | important to uses of spectra such as those described above | considers whether particular inputs cause a program to fail. Reference <ref> [10] </ref> hypothesizes a strong correlation between spectra differences and faults, at least in one direction, stating that given a faulty program and corrected version, one would expect differences between spectra on an input that produces the bug in the original program. <p> One goal of this work is to empirically investigate this claim. If path spectra prove useful then other spectra such as branch spectra or complete-path spectra may also be useful, and may provide a range of techniques, varying in cost and effectiveness, for examining program behavior. Reference <ref> [10] </ref> conjectures, however, that edge and node spectra will not be as useful as path spectra for distinguishing program behavior. There is some empirical 1 The primary use of spectra investigated in [10] addresses the "Year 2000 problem," and involves comparing spectra from two runs of the same program on input <p> Reference <ref> [10] </ref> conjectures, however, that edge and node spectra will not be as useful as path spectra for distinguishing program behavior. There is some empirical 1 The primary use of spectra investigated in [10] addresses the "Year 2000 problem," and involves comparing spectra from two runs of the same program on input data that differs only with respect to date. The intuition is that spectra differences may help programmers locate date-dependent computations. <p> The intuition is that spectra differences may help programmers locate date-dependent computations. The alternative use of spectra that we investigate here, in which spectra are collected from runs of a program and a slightly different version of the program on the same data, is briefly described in <ref> [10] </ref>, but not pursued in depth. The goal of this work is to empirically investigate this alternative suggestion. <p> Another recent study [4], however, suggests the contrary. These studies have not directly investigated program spectra. A second goal of this work is to perform such an investigation. 2 Program Spectra A program spectrum characterizes, or provides a signature of, a program's behavior <ref> [10] </ref>. Path spectra use path profiling [1, 3] to track the execution of loop-free intraprocedural paths in a program. Path spectra can track the frequency of a path occurrence, or ignore frequency and track whether or not the path occurred. <p> If, for each conditional branch in P , the spectrum indicates the number of times that branch was executed, the spectrum is a branch-count spectrum (BCS). Path spectra. Path spectra <ref> [10] </ref> record the set of loop-free intraprocedural paths that are traversed as P executes. If, for each such loop-free path in P , the spectrum merely indicates whether or not that path was executed, the spectrum is a path-hit spectrum (PHS). <p> A spectra type S 1 subsumes spectra type S 2 if and only if, whenever the S 2 spectra for program P , version P 0 , and input i differ, the S 1 spectra for P , P 0 , and i differ. Reference <ref> [10] </ref> discusses the subsumption relationship that exists between path and edge (and thus branch) spectra; the following theorem establishes the subsumption relationship for all of the spectra we are considering. <p> This indicator is important, and the fact that spectra do correlate with it at least in one direction is significant. Whether spectra will correlate with other measures of behavior, such as measures based on sequences of execution states <ref> [10] </ref>, is a subject for future investigation. Our comparisons of spectra to each other, however, are not restricted to fault-revealing behavior. Finally, as discussed earlier, there are some threats to validity for this experiment, primarily concerning representativeness of subjects.
Reference: [11] <author> G. Rothermel and M. Harrold. </author> <title> Analyzing regression test selection techniques. </title> <journal> IEEE Trans. on Softw. Eng., </journal> <volume> 22(8) </volume> <pages> 529-551, </pages> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: OPS and ETS are of interest in this context because of their relationship to regression testing. One important regression testing activity is the selection of a subset of the test suite that was originally used to test the program for use in testing the modified program; Reference <ref> [11] </ref> provides details. In brief, given a program P , test suite T for P , and modified version P 0 , we want to identify the tests in T that reveal faults in P 0 .
Reference: [12] <author> G. Rothermel and M. J. Harrold. </author> <title> A safe, efficient regression test selection technique. </title> <journal> ACM Trans. on Softw. Eng. and Methodology, </journal> <volume> 6(2) </volume> <pages> 173-210, </pages> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: In general, there is no algorithm to precisely identify these tests, but under certain conditions, the tests that produce different execution trace spectra constitute a conservative (safe) approximation. Several regression test selection techniques <ref> [2, 5, 12] </ref> exploit this relationship to select safe subsets of T for use in regression testing P 0 . <p> We used a variety of tools and techniques to compute and record the various types of spectra. For the output spectra (OPS), we ran P and the P 0 s on the inputs in U . For the execution trace spectra (ETS), we used our test selection tool, DejaVu <ref> [12] </ref>, to identify the inputs in U that traverse modified statements in the P 0 s. 3 For the branch-hit spectra (BHS), the branch-count spectra (BCS), the path-hit spectra (PHS), the path-count spectra (PCS) the data-dependence-hit spectra (DHS), the data-dependence-count spectra (DCS), and the complete-path spectra (CPS) we used the various
References-found: 12

