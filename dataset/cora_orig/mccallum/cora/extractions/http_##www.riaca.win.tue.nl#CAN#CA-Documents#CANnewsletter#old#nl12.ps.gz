URL: http://www.riaca.win.tue.nl/CAN/CA-Documents/CANnewsletter/old/nl12.ps.gz
Refering-URL: http://www.riaca.win.tue.nl/CAN/CA-Documents/CANnewsletter/index.html
Root-URL: http://www.win.tue.nl
Date: 7  25  
Note: Contents 2 HISC Workshop  4 Workshop on the Application of Computer Algebra to Geometrical Optics  
Abstract: 1 CAN News 3 1.1 The CAN Foundation : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 3 1.2 The CAN Expertise Centre : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 3 1.2.1 New Software : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 3 1.2.2 Upcoming CAN Courses and Events : : : : : : : : : : : : : : : : : : : : : : : : 3 1.2.3 Distribution of Mathematical Software : : : : : : : : : : : : : : : : : : : : : : : 3 1.3 RIACA : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 4 1.4 CONCAVO : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 4 1.4.1 CAVO : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 4 1.4.2 Projectgroep Computeralgebra TU-Delft : : : : : : : : : : : : : : : : : : : : : : 5 1.5 Let Me Introduce Myself : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 5 1.5.1 Patricia Wirahadiraksa : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 5 1.5.2 Rob Vreugdenhil : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 6 1.5.3 Maurice Castelijn : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 6 3 Some Human Interaction Issues in Computer Algebra 15 3.1 Introduction : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 15 3.2 A piece of history : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 15 3.3 Recent works and new directions : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 17 3.3.1 Efficient communication between the application and the interface : : : : : : : 17 3.3.2 Animation and complex visualisation : : : : : : : : : : : : : : : : : : : : : : : : 19 3.3.3 Direct manipulation, coupling editing and simplification : : : : : : : : : : : : : 19 3.3.4 Intelligent assistance : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 20 3.3.5 Educational aspects : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 20 3.3.6 Use of alternative input technologies : : : : : : : : : : : : : : : : : : : : : : : : 21 3.4 Bibliography : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 22 5 New Mathematical Software 27 5.1 CASA 2.1: A Maple Package for Algebraic Geometry : : : : : : : : : : : : : : : : : : : 27 5.1.1 Introduction : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 27 5.1.2 How to Get CASA : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 28 5.2 Live : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 28 5.3 Macsyma 418.1 : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 28 5.3.1 Graphics and User Interface : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 29 5.3.2 Mathematical Enhancements : : : : : : : : : : : : : : : : : : : : : : : : : : : : 29 5.3.3 A New Reference Manual : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 32 5.4 Waterloo Maple Software announces Maple V Release 3 : : : : : : : : : : : : : : : : : 32 5.4.1 New Features of Maple V Release 3 : : : : : : : : : : : : : : : : : : : : : : : : 32 5.4.2 Platform Enhancements : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 33 5.4.3 Availability : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 33 5.4.4 Contact Information : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 34 5.5 Student Version of Maple : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 34 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Tryg A. Ager, R. A. Ravaglia, and Sam Dooley. </author> <title> Representation of Inference in Computer Algebra Systems with Applications to Intelligent Tutoring. </title> <booktitle> In Proc. Computers and Mathematics, </booktitle> <pages> pages 215-227. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Also, improving user interfaces appears mandatory in order to spread the use of CASs in classrooms. Some CASs specifically designed for teaching are MATHPERT [9], EQD <ref> [1, 42] </ref>, and Bunny Numerics [20], while user interfaces specifically designed for educational purposes include Newton [29] and Calculus T/L II [15]. From a teacher's point of view, [36] lists some guidelines to build interactive mathematics texts using a CAS.
Reference: [2] <author> Robert H. Anderson. </author> <title> Syntax-Directed Recognition of Hand-Printed Two-dimensional Mathematics. </title> <type> PhD thesis, </type> <institution> Harvard University, </institution> <year> 1968. </year>
Reference-contexts: However, keyboards remains the most efficient device for purely textual data input [11]. 22 Nieuwsbrief Early work on recognizing handwritten expressions was done by Anderson <ref> [2] </ref> and by Martin [31]. Both Anderson's and Martin's algorithms worked by reducing the recognition problem to a parsing problem by linearizing the input. Recent on-going efforts include Marzinkewitsch's prototype which uses a neural network to recognize hand-written expressions [32] and Avitzur's prototype [6] running on a MacIntosh.
Reference: [3] <author> D. Arnon, R. Beach, K. McIsaac, and C. Waldspurger. CAMINOREAL: </author> <title> an Interactive Mathematical Notebook. </title> <booktitle> In EP'88 Int'l Conf. on Electronic Publishing, Document Manipulation, and Typography, </booktitle> <address> Nice, France, April 1988. </address> <publisher> Cambridge University Press. </publisher>
Reference-contexts: Also, few user interfaces support concurrent use of different Computer Algebra systems, dealing with conversion problems, configuration management, and communication protocols. Pioneering works on these subjects were done by James Purtilo with Polylith [35] and Denis Arnon with Camino-Real <ref> [3] </ref>. More recent results include SUI [16], and CAS/PI [26]. Also, extensibility appears to be a key issue. Since most Computer Algebra systems extensible through their command languages, it seems reasonable to offer at least the same degree of extensibility at the user interface level.
Reference: [4] <author> D. Arnon. </author> <title> REPORT of the Workshop on Environments for Computational Mathematics, held July 30, 1987, during the ACM SIGGRAPH Conference. </title> <journal> ACM SIGSAM Bulletin, </journal> <volume> 21(4) </volume> <pages> 42-48, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: As early as 1963, Marvin Minsky presented in Mathscope's proposal [34] some general directions for the manipulations of mathematical expressions on a screen. Since that date, many meetings and publications contributed to more precisely define how user interfaces for Symbolic Computation tools could be improved <ref> [4, 28, 45] </ref>. Effective implementations took more time to appear. More recently, Neil Soiffer [39] presented his work on the development of user interfaces for Computer Algebra systems.
Reference: [5] <author> Olivier Arsac. </author> <title> Animation d'algorithmes. </title> <type> Master's thesis, </type> <institution> I3S, Universtie de Nice-Sophia Antipolis, </institution> <year> 1993. </year>
Reference-contexts: Existing implementations include: Balsa [12] and Tango [40]. Very little work was done up to now to adapt these techniques to the problems encountered in computer algebra with the exception of AGAT <ref> [5] </ref>.
Reference: [6] <author> R. Avitzur. </author> <title> Your own handprinting recognition engine. </title> <journal> Dr Dobbs Journal, </journal> <pages> pages 32-37, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Both Anderson's and Martin's algorithms worked by reducing the recognition problem to a parsing problem by linearizing the input. Recent on-going efforts include Marzinkewitsch's prototype which uses a neural network to recognize hand-written expressions [32] and Avitzur's prototype <ref> [6] </ref> running on a MacIntosh. Avitzur's recognizer for instance, has been able to distinguish between as many as 200 different characters, but to do so, a significant amount of training time was required. The program uses gestures for deleting (a rubbing out gesture) and selecting (circling).
Reference: [7] <author> R. Avitzur. </author> <title> The Macintosh Calculator Desk Accessory: an Experiment in Transparent UI. </title> <editor> In N. Kajler, editor, </editor> <booktitle> HISC workshop, </booktitle> <month> March </month> <year> 1994. </year>
Reference-contexts: Most desirable are the use of standard mathematical notation and the possibility to explain results and guide the user. Lastly, it should be possible to make mathematics more attractive by allowing very interactive use of CASs and appealing experimentations, in the spirit of the Avitzur's Graphing Calculator <ref> [7] </ref>. 3.3.6 Use of alternative input technologies Most existing user interfaces for computer algebra systems use the keyboard and/or the mouse as the input device. However, other input devices could be used as well: pen, voice, video camera, etc.
Reference: [8] <author> Bauldry and Fiedler. </author> <title> Calculus Laboratories With Maple. </title> <address> Brooks/Cole, </address> <year> 1990. </year>
Reference-contexts: Their use is relatively new and is now growing rapidly. [17] and [41] discuss how CAS are used and might be used in education at CAN 21 both the high school and college levels from the computer algebra community's and educator's point of view respectively. <ref> [8] </ref> and [37] are among a number of texts that teach various fields of mathematics with the assumption that a CAS is being used. Also, improving user interfaces appears mandatory in order to spread the use of CASs in classrooms.
Reference: [9] <author> Michael J. Beeson. </author> <title> Logic and Computation in MATHPERT: An Expert System for Learning Mathematics. </title> <booktitle> In Proc. Computers and Mathematics, </booktitle> <pages> pages 202-214. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Also, improving user interfaces appears mandatory in order to spread the use of CASs in classrooms. Some CASs specifically designed for teaching are MATHPERT <ref> [9] </ref>, EQD [1, 42], and Bunny Numerics [20], while user interfaces specifically designed for educational purposes include Newton [29] and Calculus T/L II [15]. From a teacher's point of view, [36] lists some guidelines to build interactive mathematics texts using a CAS.
Reference: [10] <author> A. Bonadio and E. Warren. </author> <title> Theorist Reference Manual. </title> <publisher> Prescience Corporation, </publisher> <address> 814 Castro St., San Francisco, CA 94114, </address> <year> 1989. </year>
Reference-contexts: terms of user interface, many aspects of the problem have been successfully addressed by different implementations: two-dimensional editing of mathematical formulas is achieved in experimental systems such as MathScribe [38], GI/S [47], SUI [16], or CAS/PI [26], and in a limited number of commercial applications including MathCAD [33] and Theorist <ref> [10] </ref>; some kinds of hypertextual access to the documentation is provided by the graphical user interfaces of both Mathematica [46] and Axiom [23]; quality curve and surface plotting is performed by Axiom, Maple V, and Mathematica systems as well as by freely available software including SIG [44] and IZIC [18].
Reference: [11] <author> C. M. Brown. </author> <title> Comparison of typing and handwriting in "two finger" typists. </title> <booktitle> In Proc. of the 32nd Annual Meeting of the Human Factors Society, </booktitle> <pages> pages 381-385, </pages> <year> 1988. </year>
Reference-contexts: For most applications, a pen-based user interface may reduce learning time and ease access to the computer by unifying input devices (i.e. mouse and keyboard). However, keyboards remains the most efficient device for purely textual data input <ref> [11] </ref>. 22 Nieuwsbrief Early work on recognizing handwritten expressions was done by Anderson [2] and by Martin [31]. Both Anderson's and Martin's algorithms worked by reducing the recognition problem to a parsing problem by linearizing the input.
Reference: [12] <author> M. H. Brown. </author> <title> Exploring algorithms using BALSA-II. </title> <journal> IEEE Computer, </journal> <volume> 21(5) </volume> <pages> 14-36, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Some algorithms also requires some feedback from the user based on intermediate results. Algorithm animation is a technique developed many years ago to be used in algorithm teaching as well as debugging of complex programs, especially those including concurrency. Existing implementations include: Balsa <ref> [12] </ref> and Tango [40]. Very little work was done up to now to adapt these techniques to the problems encountered in computer algebra with the exception of AGAT [5].
Reference: [13] <author> Greg Butler. </author> <title> The Progress Towards an Intelligent Assistant | A Discussion Paper. </title> <editor> In J. Calmet and J. A. Campbell, editors, </editor> <booktitle> Proc. of Artificial Intelligence and Symbolic Mathematical Computing, volume 737 of LNCS, </booktitle> <pages> pages 107-115, </pages> <address> Karlsruhe, Germany, </address> <month> August </month> <year> 1992. </year> <note> Springer-Verlag. CAN 23 </note>
Reference-contexts: Some AI work has been directed towards helping users solve problems in CASs. Genesereth [19] discusses many of difficulties that CAS users have when trying to solve their problems. Recently a conference dedicated to Artificial Intelligence and Symbolic Mathematical Computing took place in Karlsruhe. Two papers <ref> [13, 14] </ref> reference previous works in this area and investigate future research directions. 3.3.5 Educational aspects Another, but related, direction concerns the use of CASs in education.
Reference: [14] <editor> Jacques. Calmet and John. A. Campbell. </editor> <booktitle> Artificial Intelligence and Symbolic Mathematical Computations. </booktitle> <editor> In J. Calmet and J. A. Campbell, editors, </editor> <booktitle> Proc. of Artificial Intelligence and Symbolic Mathematical Computing, volume 737 of LNCS, </booktitle> <pages> pages 1-19, </pages> <address> Karlsruhe, Germany, </address> <month> August </month> <year> 1992. </year> <note> Springer-Verlag. </note>
Reference-contexts: Some AI work has been directed towards helping users solve problems in CASs. Genesereth [19] discusses many of difficulties that CAS users have when trying to solve their problems. Recently a conference dedicated to Artificial Intelligence and Symbolic Mathematical Computing took place in Karlsruhe. Two papers <ref> [13, 14] </ref> reference previous works in this area and investigate future research directions. 3.3.5 Educational aspects Another, but related, direction concerns the use of CASs in education.
Reference: [15] <author> Douglas Child. </author> <title> Calculus T/L II: a Program for Doing and Learning Mathematics. Brooks Cole. Demonstration package </title>
Reference-contexts: Also, improving user interfaces appears mandatory in order to spread the use of CASs in classrooms. Some CASs specifically designed for teaching are MATHPERT [9], EQD [1, 42], and Bunny Numerics [20], while user interfaces specifically designed for educational purposes include Newton [29] and Calculus T/L II <ref> [15] </ref>. From a teacher's point of view, [36] lists some guidelines to build interactive mathematics texts using a CAS. Among specific needs, a simple user friendly frontend is certainly mandatory. Most desirable are the use of standard mathematical notation and the possibility to explain results and guide the user.
Reference: [16] <author> Y. Doleh and P. S. Wang. SUI: </author> <title> A system Independent User Interface for an Integrated Scientific Computing Environment. </title> <booktitle> In ACM Proc. of the International Symposium on Symbolic and Algebraic Computation (ISSAC), </booktitle> <pages> pages 88-94, </pages> <address> Tokyo, </address> <month> August </month> <year> 1990. </year> <pages> Addison-Wesley. </pages>
Reference-contexts: In terms of user interface, many aspects of the problem have been successfully addressed by different implementations: two-dimensional editing of mathematical formulas is achieved in experimental systems such as MathScribe [38], GI/S [47], SUI <ref> [16] </ref>, or CAS/PI [26], and in a limited number of commercial applications including MathCAD [33] and Theorist [10]; some kinds of hypertextual access to the documentation is provided by the graphical user interfaces of both Mathematica [46] and Axiom [23]; quality curve and surface plotting is performed by Axiom, Maple V, <p> Also, few user interfaces support concurrent use of different Computer Algebra systems, dealing with conversion problems, configuration management, and communication protocols. Pioneering works on these subjects were done by James Purtilo with Polylith [35] and Denis Arnon with Camino-Real [3]. More recent results include SUI <ref> [16] </ref>, and CAS/PI [26]. Also, extensibility appears to be a key issue. Since most Computer Algebra systems extensible through their command languages, it seems reasonable to offer at least the same degree of extensibility at the user interface level.
Reference: [17] <institution> Special Session on Symbolic Mathematical Systems and Their Effects on the Curriculum, </institution> <year> 1984. </year> <note> Available as ACM SIGSAM Bulletin, </note> 18/19(4/1):3-62, November 1984/February 1985. 
Reference-contexts: Two papers [13, 14] reference previous works in this area and investigate future research directions. 3.3.5 Educational aspects Another, but related, direction concerns the use of CASs in education. Their use is relatively new and is now growing rapidly. <ref> [17] </ref> and [41] discuss how CAS are used and might be used in education at CAN 21 both the high school and college levels from the computer algebra community's and educator's point of view respectively. [8] and [37] are among a number of texts that teach various fields of mathematics with
Reference: [18] <author> R. Fournier, N. Kajler, and B. Mourrain. </author> <title> IZIC: a Portable Language-Driven Tool for Mathematical Surfaces Visualization. </title> <editor> In A. Miola, editor, </editor> <booktitle> Proc. of DISCO'93, </booktitle> <pages> pages 341-353, </pages> <address> Gmunden, Austria, </address> <month> September </month> <year> 1993. </year> <note> LNCS 722, Springer-Verlag. </note>
Reference-contexts: Theorist [10]; some kinds of hypertextual access to the documentation is provided by the graphical user interfaces of both Mathematica [46] and Axiom [23]; quality curve and surface plotting is performed by Axiom, Maple V, and Mathematica systems as well as by freely available software including SIG [44] and IZIC <ref> [18] </ref>.
Reference: [19] <author> Michael R. Genesereth. </author> <title> The Difficulties of Using MACSYMA and the function of User Aids. </title> <booktitle> In Proc. 1977 MACSYMA Users' Conference, </booktitle> <pages> pages 291-307, </pages> <year> 1977. </year> <institution> NASA CP-2012. </institution>
Reference-contexts: This includes also some intelligent assistance to help in solving complex problems, decomposing them into more elementary steps, and suggesting the application of available functionalities. Some AI work has been directed towards helping users solve problems in CASs. Genesereth <ref> [19] </ref> discusses many of difficulties that CAS users have when trying to solve their problems. Recently a conference dedicated to Artificial Intelligence and Symbolic Mathematical Computing took place in Karlsruhe.
Reference: [20] <author> Craig Graci, Jack Narayan, and Randy Odendahl. </author> <title> Bunny Numerics: A Number Theory Microworld. </title> <booktitle> In Proc. Computers and Mathematics, </booktitle> <pages> pages 228-239. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Also, improving user interfaces appears mandatory in order to spread the use of CASs in classrooms. Some CASs specifically designed for teaching are MATHPERT [9], EQD [1, 42], and Bunny Numerics <ref> [20] </ref>, while user interfaces specifically designed for educational purposes include Newton [29] and Calculus T/L II [15]. From a teacher's point of view, [36] lists some guidelines to build interactive mathematics texts using a CAS. Among specific needs, a simple user friendly frontend is certainly mandatory.
Reference: [21] <author> Simon Gray, Norbert Kajler, and Paul S. Wang. </author> <title> MP: A Protocol for Efficient Exchange of Mathematical Expressions. </title> <booktitle> In ACM Proc. of the International Symposium on Symbolic and Algebraic Computation (ISSAC), </booktitle> <address> Oxford, GB, </address> <month> July </month> <year> 1994. </year> <note> ACM Press. To appear. </note>
Reference-contexts: This include the EEC-funded EUROMATH [43] and POSSO 2 projects and the MULTI project at Kent State University <ref> [21] </ref>. The on-going OPENMATH effort goes in the same direction. Its aim is to provide a standard for the exchange of mathematical expressions between symbolic computation systems. Such a standard protocol would allow easier access to various systems by using a common external representation.
Reference: [22] <author> T. G. Hicks. </author> <title> Standard Handbook of Engineering Calculations. </title> <publisher> McGraw-Hill, </publisher> <year> 1985. </year>
Reference-contexts: We present here four of them. mechanisms making easier symbolic manipulations and usage of graphics. interactive book. The user can freely draw, input formulas and text, or initiate computations. He can also load various commercially available electronic libraries, including electronic versions of existing scientific books such as <ref> [22] </ref>. Figures 3.4 and 3.5 presents two prototypes of user interfaces designed as part of respectively Soiffer's and Kajler's PhD thesis. Presented for the first time in 1986, MathScribe [38] is a front-end for Reduce which provides both two-dimensional input and output of expressions in a multi-window environment.
Reference: [23] <author> R. D. Jenks and R. Sutor. </author> <title> AXIOM, the Scientific Computation System. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: achieved in experimental systems such as MathScribe [38], GI/S [47], SUI [16], or CAS/PI [26], and in a limited number of commercial applications including MathCAD [33] and Theorist [10]; some kinds of hypertextual access to the documentation is provided by the graphical user interfaces of both Mathematica [46] and Axiom <ref> [23] </ref>; quality curve and surface plotting is performed by Axiom, Maple V, and Mathematica systems as well as by freely available software including SIG [44] and IZIC [18].
Reference: [24] <author> N. Kajler. </author> <title> Building Graphic User Interfaces for Computer Algebra Systems. </title> <editor> In A. Miola, editor, </editor> <booktitle> Proc. of DISCO'90, </booktitle> <pages> pages 235-244, </pages> <address> Capri, Italy, April 1990. </address> <publisher> LNCS 429, Springer-Verlag. </publisher>
Reference-contexts: Effective implementations took more time to appear. More recently, Neil Soiffer [39] presented his work on the development of user interfaces for Computer Algebra systems. We also contributed to this reflection by highlighting the needed extensibility of the user interface <ref> [24] </ref>, and proposed some methodologies to build a coherent and distributed software environment for Computer Algebra [25, 27].
Reference: [25] <author> N. Kajler. </author> <title> Building a Computer Algebra Environment by Composition of Collaborative Tools. </title> <editor> In J. P. Fitch, editor, </editor> <booktitle> Proc. of DISCO'92, volume 721 of LNCS, </booktitle> <pages> pages 85-94, </pages> <address> Bath, GB, April 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: More recently, Neil Soiffer [39] presented his work on the development of user interfaces for Computer Algebra systems. We also contributed to this reflection by highlighting the needed extensibility of the user interface [24], and proposed some methodologies to build a coherent and distributed software environment for Computer Algebra <ref> [25, 27] </ref>.
Reference: [26] <author> N. Kajler. CAS/PI: </author> <title> a Portable and Extensible Interface for Computer Algebra Systems. </title> <booktitle> In Proc. of ISSAC'92, </booktitle> <pages> pages 376-386, </pages> <address> Berkeley, USA, July 1992. </address> <publisher> ACM Press. </publisher>
Reference-contexts: In terms of user interface, many aspects of the problem have been successfully addressed by different implementations: two-dimensional editing of mathematical formulas is achieved in experimental systems such as MathScribe [38], GI/S [47], SUI [16], or CAS/PI <ref> [26] </ref>, and in a limited number of commercial applications including MathCAD [33] and Theorist [10]; some kinds of hypertextual access to the documentation is provided by the graphical user interfaces of both Mathematica [46] and Axiom [23]; quality curve and surface plotting is performed by Axiom, Maple V, and Mathematica systems <p> Also, few user interfaces support concurrent use of different Computer Algebra systems, dealing with conversion problems, configuration management, and communication protocols. Pioneering works on these subjects were done by James Purtilo with Polylith [35] and Denis Arnon with Camino-Real [3]. More recent results include SUI [16], and CAS/PI <ref> [26] </ref>. Also, extensibility appears to be a key issue. Since most Computer Algebra systems extensible through their command languages, it seems reasonable to offer at least the same degree of extensibility at the user interface level. <p> The primary mode of input is parser-based, but both templates and overlays are supported as well through a collection of predefined menus. MathScribe also contains several features to aid in understanding large expressions. This includes horizontal and vertical scrollbars, local and global abbreviations, and elision. Presented in 1992, CAS/PI <ref> [26] </ref> stands for Computer Algebra System Portable Interface. It is a graphic user interface designed to be highly portable and extensible. Most components of CAS/PI are derived from high level specifications expressed in several ad-hoc languages. <p> Many techniques can be used to do so. Common subexpressions sharing is the oldest one: it is used in the protocol which connects Maple and its user interface [30]. Additional techniques can be used with a user interface point of view. In CAS/PI <ref> [26] </ref>, for instance, a lazy communication mechanism is used to improve communications between remote computer algebra systems and formula editors. Using lazy communication, a CAS sends to the editor only those parts of an expression that will be displayed immediately by the editor, according to some of its internal states.
Reference: [27] <author> N. </author> <type> Kajler. </type> <institution> Environnement graphique distribue pour le Calcul Formel, Mars 1993. These, Univer-site de Nice-Sophia Antipolis, Ecole Doctorale SPI. </institution>
Reference-contexts: More recently, Neil Soiffer [39] presented his work on the development of user interfaces for Computer Algebra systems. We also contributed to this reflection by highlighting the needed extensibility of the user interface [24], and proposed some methodologies to build a coherent and distributed software environment for Computer Algebra <ref> [25, 27] </ref>.
Reference: [28] <author> A. Katz. </author> <title> Issues in Defining an Equations Representation Standard. </title> <journal> ACM SIGSAM Bulletin, </journal> <pages> pages 19-24, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: As early as 1963, Marvin Minsky presented in Mathscope's proposal [34] some general directions for the manipulations of mathematical expressions on a screen. Since that date, many meetings and publications contributed to more precisely define how user interfaces for Symbolic Computation tools could be improved <ref> [4, 28, 45] </ref>. Effective implementations took more time to appear. More recently, Neil Soiffer [39] presented his work on the development of user interfaces for Computer Algebra systems.
Reference: [29] <author> Edmund A. Lamagna, Michael B. Hayden, and Catherine W. Johnson. </author> <title> The Design of a user Interface to a Computer Algebra System for Introductory Calculus. </title> <booktitle> In French-Norwegian Symposium on Computer-Aided Mathematics, Gran, </booktitle> <address> Norway, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Also, improving user interfaces appears mandatory in order to spread the use of CASs in classrooms. Some CASs specifically designed for teaching are MATHPERT [9], EQD [1, 42], and Bunny Numerics [20], while user interfaces specifically designed for educational purposes include Newton <ref> [29] </ref> and Calculus T/L II [15]. From a teacher's point of view, [36] lists some guidelines to build interactive mathematics texts using a CAS. Among specific needs, a simple user friendly frontend is certainly mandatory.
Reference: [30] <author> B. L. Leong. </author> <title> Iris: Design of a User Interface Program for Symbolic Algebra. </title> <booktitle> In Proc. of the 1986 ACM-SIGSAM Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 1-6, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: Many techniques can be used to do so. Common subexpressions sharing is the oldest one: it is used in the protocol which connects Maple and its user interface <ref> [30] </ref>. Additional techniques can be used with a user interface point of view. In CAS/PI [26], for instance, a lazy communication mechanism is used to improve communications between remote computer algebra systems and formula editors.
Reference: [31] <author> William A. Martin. </author> <title> Computer Input/Output of Mathematical Expressions. </title> <booktitle> In Proc. of the Second Symposium on Symbolic and Algebraic Manipulation, </booktitle> <pages> pages 78-89. </pages> <publisher> ACM, </publisher> <month> March </month> <year> 1971. </year>
Reference-contexts: However, keyboards remains the most efficient device for purely textual data input [11]. 22 Nieuwsbrief Early work on recognizing handwritten expressions was done by Anderson [2] and by Martin <ref> [31] </ref>. Both Anderson's and Martin's algorithms worked by reducing the recognition problem to a parsing problem by linearizing the input. Recent on-going efforts include Marzinkewitsch's prototype which uses a neural network to recognize hand-written expressions [32] and Avitzur's prototype [6] running on a MacIntosh.
Reference: [32] <author> Reiner Marzinkewitsch. </author> <title> Operating Computer Algebra Systems by Handprinted Input. </title> <editor> In S. M. Watt, editor, </editor> <booktitle> Proc. of ISSAC'91, </booktitle> <pages> pages 411-413, </pages> <address> Bonn, Germany, July 1991. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Both Anderson's and Martin's algorithms worked by reducing the recognition problem to a parsing problem by linearizing the input. Recent on-going efforts include Marzinkewitsch's prototype which uses a neural network to recognize hand-written expressions <ref> [32] </ref> and Avitzur's prototype [6] running on a MacIntosh. Avitzur's recognizer for instance, has been able to distinguish between as many as 200 different characters, but to do so, a significant amount of training time was required. The program uses gestures for deleting (a rubbing out gesture) and selecting (circling).
Reference: [33] <editor> MathSoft, </editor> <publisher> Inc., </publisher> <address> 201 Broadway, Cambridge, MA. </address> <note> MathCAD User's Guide, 1991. 24 Nieuwsbrief </note>
Reference-contexts: In terms of user interface, many aspects of the problem have been successfully addressed by different implementations: two-dimensional editing of mathematical formulas is achieved in experimental systems such as MathScribe [38], GI/S [47], SUI [16], or CAS/PI [26], and in a limited number of commercial applications including MathCAD <ref> [33] </ref> and Theorist [10]; some kinds of hypertextual access to the documentation is provided by the graphical user interfaces of both Mathematica [46] and Axiom [23]; quality curve and surface plotting is performed by Axiom, Maple V, and Mathematica systems as well as by freely available software including SIG [44] and
Reference: [34] <author> M. L. Minsky. MATHSCOPE: </author> <title> Part I A Proposal for a Mathematical Manipulation-Display System. </title> <type> Technical Report MAC-M-118, </type> <institution> Artificial Intelligence Project, Project MAC, MIT, </institution> <month> November </month> <year> 1963. </year>
Reference-contexts: As early as 1963, Marvin Minsky presented in Mathscope's proposal <ref> [34] </ref> some general directions for the manipulations of mathematical expressions on a screen. Since that date, many meetings and publications contributed to more precisely define how user interfaces for Symbolic Computation tools could be improved [4, 28, 45]. Effective implementations took more time to appear.
Reference: [35] <author> J. M. Purtilo. </author> <title> Polylith: An Environment to Support Management of Tool Interfaces. </title> <journal> ACM Sigplan Notice, </journal> <volume> 20(7) </volume> <pages> 12-18, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Also, few user interfaces support concurrent use of different Computer Algebra systems, dealing with conversion problems, configuration management, and communication protocols. Pioneering works on these subjects were done by James Purtilo with Polylith <ref> [35] </ref> and Denis Arnon with Camino-Real [3]. More recent results include SUI [16], and CAS/PI [26]. Also, extensibility appears to be a key issue.
Reference: [36] <author> C. Scheftic. </author> <title> Mathematical Computation with Maple V: Ideas and Applications, chapter Interactive Mathematics texts: </title> <booktitle> ideas for developers, </booktitle> <pages> pages 51-63. </pages> <publisher> Birkhauser, </publisher> <address> Boston, </address> <year> 1993. </year>
Reference-contexts: Some CASs specifically designed for teaching are MATHPERT [9], EQD [1, 42], and Bunny Numerics [20], while user interfaces specifically designed for educational purposes include Newton [29] and Calculus T/L II [15]. From a teacher's point of view, <ref> [36] </ref> lists some guidelines to build interactive mathematics texts using a CAS. Among specific needs, a simple user friendly frontend is certainly mandatory. Most desirable are the use of standard mathematical notation and the possibility to explain results and guide the user.
Reference: [37] <author> Steven Skiena. </author> <title> Implementing Discrete Mathematics. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Their use is relatively new and is now growing rapidly. [17] and [41] discuss how CAS are used and might be used in education at CAN 21 both the high school and college levels from the computer algebra community's and educator's point of view respectively. [8] and <ref> [37] </ref> are among a number of texts that teach various fields of mathematics with the assumption that a CAS is being used. Also, improving user interfaces appears mandatory in order to spread the use of CASs in classrooms.
Reference: [38] <author> C. J. Smith and N. M. Soiffer. MathScribe: </author> <title> A User Interface for Computer Algebra Systems. </title> <booktitle> In ACM, editor, Conference Proceedings of SYMSAC 86, </booktitle> <pages> pages 7-12, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: In terms of user interface, many aspects of the problem have been successfully addressed by different implementations: two-dimensional editing of mathematical formulas is achieved in experimental systems such as MathScribe <ref> [38] </ref>, GI/S [47], SUI [16], or CAS/PI [26], and in a limited number of commercial applications including MathCAD [33] and Theorist [10]; some kinds of hypertextual access to the documentation is provided by the graphical user interfaces of both Mathematica [46] and Axiom [23]; quality curve and surface plotting is performed <p> He can also load various commercially available electronic libraries, including electronic versions of existing scientific books such as [22]. Figures 3.4 and 3.5 presents two prototypes of user interfaces designed as part of respectively Soiffer's and Kajler's PhD thesis. Presented for the first time in 1986, MathScribe <ref> [38] </ref> is a front-end for Reduce which provides both two-dimensional input and output of expressions in a multi-window environment. Users can freely edit any displayed expression in-place and the expression is reformatted and displayed correctly after each keystroke.
Reference: [39] <author> N. M. Soiffer. </author> <title> The Design of a User Interface for Computer Algebra Systems. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <address> CA, </address> <month> April </month> <year> 1991. </year> <note> Available as report UCB/CSD/ 91/626 </note>
Reference-contexts: Since that date, many meetings and publications contributed to more precisely define how user interfaces for Symbolic Computation tools could be improved [4, 28, 45]. Effective implementations took more time to appear. More recently, Neil Soiffer <ref> [39] </ref> presented his work on the development of user interfaces for Computer Algebra systems. We also contributed to this reflection by highlighting the needed extensibility of the user interface [24], and proposed some methodologies to build a coherent and distributed software environment for Computer Algebra [25, 27].
Reference: [40] <author> J. T. Stasko. </author> <title> Tango: a Framework and System for Algorithm Animation. </title> <journal> IEEE Computer, </journal> <volume> 23(9) </volume> <pages> 27-39, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Some algorithms also requires some feedback from the user based on intermediate results. Algorithm animation is a technique developed many years ago to be used in algorithm teaching as well as debugging of complex programs, especially those including concurrency. Existing implementations include: Balsa [12] and Tango <ref> [40] </ref>. Very little work was done up to now to adapt these techniques to the problems encountered in computer algebra with the exception of AGAT [5].
Reference: [41] <editor> Lynn Arthur Steen, editor. </editor> <booktitle> Number 8 in Mathematical Association of America Notes, </booktitle> <month> October </month> <year> 1988. </year>
Reference-contexts: Two papers [13, 14] reference previous works in this area and investigate future research directions. 3.3.5 Educational aspects Another, but related, direction concerns the use of CASs in education. Their use is relatively new and is now growing rapidly. [17] and <ref> [41] </ref> discuss how CAS are used and might be used in education at CAN 21 both the high school and college levels from the computer algebra community's and educator's point of view respectively. [8] and [37] are among a number of texts that teach various fields of mathematics with the assumption
Reference: [42] <author> P. Suppes, T. A. Ager, P Berg, R Chuaqui, W. Graham, R. E. Maas, and S. Takahashi. </author> <title> Applications of Computer Technology to Pre-College Calculus: First Annual Report. </title> <type> Technical Report 310, </type> <institution> Institute for Mathematical Studies in the Social Sciences, Stanford, </institution> <month> April </month> <year> 1987. </year>
Reference-contexts: Also, improving user interfaces appears mandatory in order to spread the use of CASs in classrooms. Some CASs specifically designed for teaching are MATHPERT [9], EQD <ref> [1, 42] </ref>, and Bunny Numerics [20], while user interfaces specifically designed for educational purposes include Newton [29] and Calculus T/L II [15]. From a teacher's point of view, [36] lists some guidelines to build interactive mathematics texts using a CAS.
Reference: [43] <author> B. von Sydow. </author> <title> The design of the Euromath system. </title> <journal> Euromath Bulletin, </journal> <volume> 1(1) </volume> <pages> 39-48, </pages> <year> 1992. </year>
Reference-contexts: This include the EEC-funded EUROMATH <ref> [43] </ref> and POSSO 2 projects and the MULTI project at Kent State University [21]. The on-going OPENMATH effort goes in the same direction. Its aim is to provide a standard for the exchange of mathematical expressions between symbolic computation systems.
Reference: [44] <author> P. S. Wang. </author> <title> A System Independent Graphing Package for Mathematical Functions. </title> <booktitle> In DISCO'90, </booktitle> <pages> pages 145-154, </pages> <address> Capri, Italy, April 1990. </address> <publisher> LNCS 429, Springer-Verlag. </publisher>
Reference-contexts: MathCAD [33] and Theorist [10]; some kinds of hypertextual access to the documentation is provided by the graphical user interfaces of both Mathematica [46] and Axiom [23]; quality curve and surface plotting is performed by Axiom, Maple V, and Mathematica systems as well as by freely available software including SIG <ref> [44] </ref> and IZIC [18].
Reference: [45] <author> M. B. Wells and J. B. Morris (editors). </author> <title> Proc. of a Symposium on Two-Dimensional Man-Machine Communication. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 7(10), </volume> <month> October </month> <year> 1972. </year>
Reference-contexts: As early as 1963, Marvin Minsky presented in Mathscope's proposal [34] some general directions for the manipulations of mathematical expressions on a screen. Since that date, many meetings and publications contributed to more precisely define how user interfaces for Symbolic Computation tools could be improved <ref> [4, 28, 45] </ref>. Effective implementations took more time to appear. More recently, Neil Soiffer [39] presented his work on the development of user interfaces for Computer Algebra systems.
Reference: [46] <author> S. Wolfram. </author> <title> Mathematica, A System for Doing Mathematics by Computer. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: mathematical formulas is achieved in experimental systems such as MathScribe [38], GI/S [47], SUI [16], or CAS/PI [26], and in a limited number of commercial applications including MathCAD [33] and Theorist [10]; some kinds of hypertextual access to the documentation is provided by the graphical user interfaces of both Mathematica <ref> [46] </ref> and Axiom [23]; quality curve and surface plotting is performed by Axiom, Maple V, and Mathematica systems as well as by freely available software including SIG [44] and IZIC [18].

References-found: 46

