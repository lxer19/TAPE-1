URL: http://www.math.tau.ac.il/~megiddo/psfiles/2satful.ps.gz
Refering-URL: http://www.math.tau.ac.il/~megiddo/pub.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Tight Bounds and 2-Approximation Algorithms for Integer Programs with Two Variables per Inequality  
Author: Dorit S. Hochbaum Nimrod Megiddo Joseph Naor Arie Tamir 
Note: Research supported in part by ONR contracts N00014-88-K-0377 and N00014-91-J-1241.  Israel. Research supported in part by ONR contract N00014-91-C-0026.  Part of this work was done while the author was visiting the International  
Address: 350 Barrows Hall, University of California, Berkeley, CA 94720 USA.  650 Harry Road, San Jose, California 95120-6099,  32000, Israel.  New Brunswick, NJ.  Center, San Jose, California.  
Affiliation: Department of Industrial Engineering and Operations Research and Walter A. Haas School of Business,  IBM Almaden Research Center,  and School of Mathematical Sciences, Tel Aviv University, Tel Aviv,  Faculty of Computer Science, Technion, Israel Institute of Technology, Haifa  Computer Science Institute in Berkeley, CA and DIMACS, Rutgers University,  School of Mathematical Sciences, Tel Aviv University, Tel Aviv, Israel, and IBM Almaden Research  
Date: December 1991; revised October 1992  
Abstract: The problem of integer programming in bounded variables, over constraints with no more than two variables in each constraint is NP-complete, even when all variables are binary. This paper deals with integer linear minimization problems in n variables subject to m linear constraints with at most two variables per inequality, and with all variables bounded between 0 and U . For such systems, a 2approximation algorithm is presented that runs in time O(mnU 2 log(U n 2 =m)), so it is polynomial in the input size if the upper bound U is polynomially bounded. The algorithm works by finding first a super-optimal feasible solution that consists of integer multiples of 1 2 . That solution gives a tight bound on the value of the minimum. It further more has an identifiable subset of integer components that retain their value in an integer optimal solution of the problem. These properties are a generalization of the properties of the vertex cover problem. The algorithm described is, in particular, a 2-approximation algorithm for the problem of minimizing the total weight of true variables, among all truth assignments to the 2-satisfiability problem.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Cohen and N. Megiddo, </author> <title> "Improved Algorithms for Linear Inequalities with Two Variables per Inequality," </title> <booktitle> in: Proceedings of the Twenty Third Symposium on Theory of Computing, </booktitle> <address> New Orleans (1991) 145-155. </address>
Reference-contexts: A notable feature of the linear programming relaxation of (IPR) of (IP) is that feasible solutions can be derived in strongly polynomial time. Megiddo [11] was the first to discover such an algorithm. The fastest algorithms currently known for the problem are by Cohen and Megiddo <ref> [1] </ref> and by Hochbaum and Naor [6], with running times of O (mn 2 (log 2 n + log m)) and O (mn 2 log m), respectively. The algorithm presented here is a relaxation which is tighter than the one obtained by the LP-relaxation. <p> Without loss of generality, we may assume that the two non-zero elements in row i of A are in columns i and i + 1 (modulo m). (Due to the nonseparability of the submatrix, this can be achieved by appropriate row and column interchanges.) Hence, det (A) = A <ref> [1; 1] </ref> det (A 11 ) (1) m A [m; 1] det (A m1 ) : The absolute values of the determinants of A 11 and A m1 are equal to 1, since both are triangular matrices with nonzero diagonal elements. <p> the two non-zero elements in row i of A are in columns i and i + 1 (modulo m). (Due to the nonseparability of the submatrix, this can be achieved by appropriate row and column interchanges.) Hence, det (A) = A [1; 1] det (A 11 ) (1) m A <ref> [m; 1] </ref> det (A m1 ) : The absolute values of the determinants of A 11 and A m1 are equal to 1, since both are triangular matrices with nonzero diagonal elements.
Reference: [2] <author> H. Edelsbrunner, G. Rote, and E. Welzl, </author> <title> "Testing the Necklace Condition for Shortest Tours and Optimal Factors in the Plane," </title> <note> Theoretical Computer Science 66 (1989) 157-180. </note>
Reference-contexts: Since our (IP) is not necessarily defined on monotone inequalities, we use a transformation of nonmonotone inequalities to monotone inequalities proposed by Edelsbrunner, Rote and Welzl <ref> [2] </ref>. The transformation does not preserve integrality, yet each solution to the transformed problem corresponds to a feasible solution of the original problem, and in addition it consists of integer multiples of 1 2 . <p> The reduction to a monotone system and its properties Consider a generic nonmonotone inequality of the form ax + by c where a and b are positive. (Any nonmonotone inequality can be written in this form, perhaps with a reversed inequality). The procedure in <ref> [2] </ref> replaces each variable x by two variables, x + 4 and x , and each inequality by two inequalities as follows: ax + by c The two resulting inequalities are monotone.
Reference: [3] <author> S. Even, A. Itai, and A. Shamir, </author> <title> "On the Complexity of Timetable and Multicom-modity Flow Problems," </title> <note> SIAM Journal on Computing 5 (1976) 691-703. </note>
Reference-contexts: A feasible solution for this problem can be found in linear time <ref> [3] </ref>. The corresponding system of linear inequalities in binary variables consists of constraints of one of the following types: (i) x i + x j 1, (ii) x i x j , and (iii) x i + x j 1. <p> Lemma 4.1. A feasible solution to a bounded linear program with two variables per inequality can be computed in O (m + n + u + mU ) time. Proof: A feasible solution to a 2-SAT integer program can be found in linear time using the algorithm of <ref> [3] </ref>. Encoding a bounded integer program as a 2-SAT integer program generates u variables and at most mU + u constraints. Hence, the time bounds follow. <p> The latter can be tested by the linear time algorithm in <ref> [3] </ref>.
Reference: [4] <author> D. Gusfield and L. Pitt, </author> <title> "A bounded approximation for the minimum cost 2-SAT problem," </title> <note> Algorithmica 8 (1992) 103-117. </note>
Reference-contexts: The problem of minimizing a linear function in binary variables subject to such a system of linear inequalities will be referred to as the 2-SAT integer programming problem. Recently Gusfield and Pitt <ref> [4] </ref> described a 2-approximation algorithm for the 2-SAT problem. Their approach is not related to ours and yields neither a lower bound nor the option of fixing some of the variables, as our algorithm does. In Section 2 we review the procedure of reducing (IP) to a monotone system.
Reference: [5] <author> D. S. Hochbaum, </author> <title> "Efficient bounds for the stable set, vertex cover and set packing problems," </title> <note> Discrete Applied Mathematics 6 (1983) 243-254. </note>
Reference-contexts: Not only is the size of the problem reduced, but also any solution on the remaining set of variables has an objective function value at most twice the optimum. This idea was proposed in <ref> [5] </ref> as a method for generating approximation algorithms with a worst-case ratio smaller than 2 for various special classes of graphs. We show here that precisely the same idea applies to any integer programming problem (IP), after it is transformed to a 2-SAT. Lemma 7.1.
Reference: [6] <author> D. S. Hochbaum and J. Naor, </author> <title> "Simple and fast algorithms for linear and integer programs with two variables per inequality," </title> <type> UC Berkeley manuscript, </type> <month> June </month> <year> 1991. </year> <note> (See also Proceedings of the second Integer Programming and Combinatorial Optimization Conference (1992) pp. 41-60). </note>
Reference-contexts: In order to find solutions that are integer multiples of 1 2 , we use the polynomial time algorithm for solving integer programs in bounded variables over monotone inequalities proposed in <ref> [6] </ref>. An inequality in two variables is called monotone if it is of the form ax j i bx k i c where a and b are both nonnegative. <p> Although, as proved by Lagarias [9], the problem of finding a feasible solution of a system of monotone inequalities in integers is NP-complete, the algorithm of Hochbaum and Naor <ref> [6] </ref> finds an optimal solution in time O (mnU 2 log (U n 2 = m)). Since our (IP) is not necessarily defined on monotone inequalities, we use a transformation of nonmonotone inequalities to monotone inequalities proposed by Edelsbrunner, Rote and Welzl [2]. <p> Megiddo [11] was the first to discover such an algorithm. The fastest algorithms currently known for the problem are by Cohen and Megiddo [1] and by Hochbaum and Naor <ref> [6] </ref>, with running times of O (mn 2 (log 2 n + log m)) and O (mn 2 log m), respectively. The algorithm presented here is a relaxation which is tighter than the one obtained by the LP-relaxation. <p> An intuitive explanation of the difficulty of these problems and of the relative weakness of the LP-relaxation bound is that the coefficients of the variables in the constraints are "unnecessarily" large. The reduction we use (of <ref> [6] </ref>) effectively eliminates such large coefficients and substitutes them by ones of absolute value 1, at the expense of increasing the number of inequalities and variables by a factor of U . 6 3. Integer optimization over monotone inequalities Hochbaum and Naor [6] describe an algorithm for optimization in integers over <p> The reduction we use (of <ref> [6] </ref>) effectively eliminates such large coefficients and substitutes them by ones of absolute value 1, at the expense of increasing the number of inequalities and variables by a factor of U . 6 3. Integer optimization over monotone inequalities Hochbaum and Naor [6] describe an algorithm for optimization in integers over a system of monotone inequalities, Minimize n X d j x j subject to a i x j i b i x k i c i (i = 1; . . . ; m) ` j x j u j ; x <p> From Section 2 we know that the vector m fl provides a lower bound on the value of the objective function for any integral solution. Hence, the theorem follows. The complexity of the algorithm is dominated by the complexity of the procedure in <ref> [6] </ref> for optimizing over a monotone system. The running time is O (mnU 2 log (U n 2 =m)). <p> They also proposed an alternative algorithm, where the problem (IP) is first transformed to 2-SAT and then the monotone transformation and the <ref> [6] </ref> procedure is applied. This algorithm is in fact identical in its outcome, the graph created, to the algorithm presented here, and hence not discussed explicitly. The extension to the generalized 2-SAT is also due to them, as well as various improvements to the presentation of the paper. Acknowledgement.
Reference: [7] <author> R. Kannan, </author> <title> "A polynomial algorithm for the two-variable integer programming problem," </title> <journal> J. </journal> <note> ACM 27(1980) 118-122. </note>
Reference-contexts: Whereas an integer programming problem with two variables is in the class of polynomial problems <ref> [7, 10] </ref>, the problem (IP) is NP-complete the vertex cover problem ([8]) is a special case with a i = b i = c i = u i = 1.
Reference: [8] <author> R. M. Karp, </author> <title> "Reducibility among combinatorial problems," </title> <editor> in R. E. Miller and J. W. Thatcher, Eds., </editor> <title> Complexity of Computer Computations, </title> <publisher> Plenum Press, N.Y. </publisher> <pages> (1972) pp. 85-103. </pages>
Reference: [9] <author> J. C. Lagarias, </author> <title> "The computational complexity of simultaneous diophantine approximation problems," </title> <journal> SIAM J. Comput. </journal> <month> 14 </month> <year> (1985) </year> <month> 196-209. </month>
Reference-contexts: An inequality in two variables is called monotone if it is of the form ax j i bx k i c where a and b are both nonnegative. Although, as proved by Lagarias <ref> [9] </ref>, the problem of finding a feasible solution of a system of monotone inequalities in integers is NP-complete, the algorithm of Hochbaum and Naor [6] finds an optimal solution in time O (mnU 2 log (U n 2 = m)).
Reference: [10] <author> H. W. Lenstra, Jr., </author> <title> "Integer programming with a fixed number of variables," </title> <note> Mathematics of Operations Research 8 (1983) 538-548. </note>
Reference-contexts: Whereas an integer programming problem with two variables is in the class of polynomial problems <ref> [7, 10] </ref>, the problem (IP) is NP-complete the vertex cover problem ([8]) is a special case with a i = b i = c i = u i = 1.
Reference: [11] <author> N. Megiddo, </author> <title> "Towards a genuinely polynomial algorithm for linear programming," </title> <journal> SIAM J. Comput. </journal> <month> 12 </month> <year> (1983) </year> <month> 347-353. </month>
Reference-contexts: A common method for deriving (lower) bounds for integer programming problems is by solving a linear programming relaxation. A notable feature of the linear programming relaxation of (IPR) of (IP) is that feasible solutions can be derived in strongly polynomial time. Megiddo <ref> [11] </ref> was the first to discover such an algorithm. The fastest algorithms currently known for the problem are by Cohen and Megiddo [1] and by Hochbaum and Naor [6], with running times of O (mn 2 (log 2 n + log m)) and O (mn 2 log m), respectively.
Reference: [12] <author> G. L. Nemhauser and L. E. Trotter, Jr., </author> <title> "Vertex packings: Structural properties and algorithms," </title> <note> Mathematical Programming 8 (1975) 232-248. </note>
Reference-contexts: Although the vertex cover problem is a limited special case of the problem (IP), many of its known properties extend also to the problem (IP). The vertex cover problem, and its complement the independent set problem, have several structural properties discovered by Nemhauser and Trotter <ref> [12] </ref>: Consider the linear programming relaxation of the vertex cover problem, (VCR), namely, n X w j x fl n X w j x j subject to x i + x j 1 (for every edge (i; j) in the graph) 0 x j 1 (j = 1; . . . <p> The algorithm presented here is a relaxation which is tighter than the one obtained by the LP-relaxation. In case the bounds U are fixed, the relaxation here is also obtained in faster running time. As noted in <ref> [12] </ref>, the LP-relaxation of the vertex cover problem (VCR) is solved by finding an optimal cover in a bipartite graph with two vertices for each vertex in the 3 original graph, and two edges for each edge in the original graph. <p> be an optimal solution of 2-SAT in the set S (2) INT = fj j x j = 0 or x j = 1g : Then there is an optimal integer solution z of 2-SATsuch that z j = x (2) Proof: The proof is a generalization of that in <ref> [12] </ref>. For a set A f1; 2; . . . ; ng, let w (A) = j2A w j .
Reference: [13] <author> J. C. </author> <title> Picard, "Maximal closure of a graph and applications to combinatorial problems," </title> <booktitle> Management Science 22 (1976) 1268-1272. </booktitle>
Reference-contexts: All other arcs are 7 assigned infinite capacity. The source set of a minimum cut in this graph corresponds to a maximum weight closed set with the weights as specified. The justification for the algorithm of maximum closure is given by Picard <ref> [13] </ref>. Notice that a 2-SAT formula can be generated from the graph G: there is a clause y _ x corresponding to each directed edge x ! y. There is a 1-1 correspondence between the closed subsets in G and the feasible solutions of the 2-SAT formula generated.
Reference: [14] <author> E. Tardos, </author> <title> "A strongly polynomial algorithm to solve combinatorial linear programs," </title> <note> Operations Research 34 (1986) 250-256. 16 </note>
Reference-contexts: Note that one could also solve these linear programs in strongly polynomial time, without using the transformation to a monotone system, by directly applying the algorithm of <ref> [14] </ref>. The latter, however, is not as efficient as the best known algorithms for solving maximum flow problems or linear flow problems. We next show how to obtain a 2-approximation for a generalized 2-SAT integer program.
References-found: 14

