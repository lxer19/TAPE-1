URL: http://www.cs.nyu.edu/phd_students/sachs/surveypaper.ps.gz
Refering-URL: http://www.cs.nyu.edu/phd_students/sachs/oldresearch.html
Root-URL: http://www.cs.nyu.edu
Title: Concurrent Object Oriented Languages  
Author: Jay Sachs 
Date: July 14, 1994  
Abstract-found: 0
Intro-found: 1
Reference: [Ach93] <author> Bruno Achauer. </author> <title> The DOWL distributed object-oriented language. </title> <journal> Communications of the ACM, </journal> <volume> 36(9), </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: Note that in the absence of programmer-supplied information, the compiler may decide to implement a given invocation with either call-by-move or call-by-visit. 8 Trellis and Trellis/DOWL Trellis/DOWL <ref> [Ach93] </ref> is an extension of the Trellis language to support distributed computation. Trellis [SCB + 86] is statically typed, has a flexible type system including multiple inheritance, subtyping, and type generators (essentially parameterized types). Trellis also allows the programmer to test the type of objects at runtime.
Reference: [ACM86] <editor> ACM/SIGPLAN. </editor> <booktitle> Proceedings of OOPSLA '86, ACM SIGPLAN Notices, volume 21, number 11, </booktitle> <address> New York, </address> <month> November </month> <year> 1986. </year>
Reference: [ACM87] <editor> ACM/SIGPLAN. </editor> <booktitle> Proceedings of OOPSLA '87, ACM SIGPLAN Notices, volume 22, number 12, </booktitle> <address> New York, </address> <month> December </month> <year> 1987. </year>
Reference: [ACM89] <editor> ACM/SIGPLAN. </editor> <booktitle> Proceedings of OOPSLA '89, ACM SIGPLAN Notices, volume 24, number 10, </booktitle> <address> New York, </address> <month> October </month> <year> 1989. </year>
Reference: [ACM92] <editor> ACM/SIGPLAN. </editor> <booktitle> Proceedings of OOPSLA '92, volume 27, number 10, </booktitle> <address> New York, </address> <month> October </month> <year> 1992. </year>
Reference: [ACM93] <editor> ACM/SIGPLAN. </editor> <booktitle> Proceedings of OOPSLA '93, volume 28(10), </booktitle> <address> New York, </address> <month> October </month> <year> 1993. </year>
Reference: [Ada93] <institution> Ada 9X Rationale. Intermetrics, Inc., </institution> <address> Cambridge, MA, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: However, given a language without such an implicit parameter, one can imagine several parameters, possibly of unrelated classes, yet the exact function to be executed may depend on one or more of them. When arguments are of the same class, the following are alternatives to determining the function <ref> [Ada93, pp 4-26] </ref>: * All controlled parameters must be same type. * The programmer selects a controlling parameter via a special declara tion. * All controlled parameters must share same code for operation e.g., the dispatch tables (or their equivalent) point to same code body. * The most specific type ("nearest
Reference: [Agh86] <author> Gul Agha. </author> <title> Actors: a model of concurrent computation in distributed systems. </title> <publisher> The MIT Press Series in Artifical Intelligence. MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: This allows the runtime system to keep a copy of these objects on each node, rather than requiring remote reference or procedure call to access them. 4 ABCL/1 ABCL/1, although it has roots in the Actor <ref> [Agh86] </ref> family of languages, is more properly an object oriented language due to the inclusion of local state information per object [Yon90]. Each object has its own autonomous processing power and an incoming message queue.
Reference: [Agh90] <author> Gul Agha. </author> <title> Concurrent object-oriented programming. </title> <journal> Communications of the ACM, </journal> <volume> 33(9), </volume> <month> Sep </month> <year> 1990. </year>
Reference: [Ame91] <author> Pierre America. </author> <title> Issues in the design of a parallel object-oriented language. In A parallel object-oriented language: design and semantic foundations. </title> <publisher> CWI, </publisher> <year> 1991. </year>
Reference-contexts: Objects, however, give protection at the semantic level; objects cannot access the internals of other objects, yielding a finer granularity <ref> [Ame91] </ref>. * Inheritance Inheritance serves a dual function. It can relate types in a subtype-supertype relationship, the inheritance of interface. It is also used for code reuse, or inheritance of implementation. <p> Following <ref> [Ame91] </ref>, we note the following characteristics of sequential object oriented languages: 1. Execution starts with exactly one active object. 2. Object execution blocks after sending a message; execution resumes when the result (s) arrive. 3. An object is only active when executing a method in response to an incoming message. <p> Recently a proposal has been put forward that works towards solving this problem [MTY93]. It involves separation of synchronization and operations, separate inheritance of synchronization and operations, and a combination of several orthogonal synchronization mechanisms. 3 POOL One of the early concurrent object-oriented languages to be designed is POOL <ref> [Ame91] </ref>. POOL combines a class system like Smalltalk, active objects as in the Actor languages, an Ada-like syntax and module system, and a strong type system, though it is much more coherent than that combination implies.
Reference: [And91] <author> Gregory R. Andrews. </author> <title> Paradigms for process interaction in distributed programs. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1), </volume> <month> March </month> <year> 1991. </year> <month> 27 </month>
Reference: [Bar89] <author> J. G. P. Barnes. </author> <title> Programming in Ada. </title> <publisher> Addison-Wesley, 3rd edi-tion, </publisher> <year> 1989. </year>
Reference-contexts: Familiarity with C++, Ada, and Eiffel is assumed throughout; for further descriptions, see <ref> [Str91, Bar89, Mey92] </ref>. A note on the terminology used in this paper: due to the great variance in usage among languages, several terms will be overloaded, and several con 1 cepts will be referred to by more than one name.
Reference: [Ben87] <author> John K. Bennett. </author> <title> The design and implementation of distributed smalltalk. </title> <booktitle> In Proceedings of OOPSLA '87, ACM SIGPLAN Notices [ACM87]. </booktitle>
Reference: [BHJ + 87] <author> Andrew Black, Norman Hutchinson, Eric Jul, Henry Levy, and Larry Carter. </author> <title> Distribution and abstract types in Emerald. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(1), </volume> <month> January </month> <year> 1987. </year>
Reference: [BHJL86] <author> Andrew Black, Norman Hutchinson, Eric Jul, and Henry Levy. </author> <title> Object structrue in the emerald system. </title> <booktitle> In Proceedings of OOP-SLA '86, ACM SIGPLAN Notices [ACM86], </booktitle> <pages> pages 78-86. </pages>
Reference: [CAL + 89] <author> Jeffrey S. Chase, Franz G. Amador, Edward D. Lazowska, Henry M. Levy, and Richard J. Littlefield. </author> <title> The Amber system: Parallel programming on a network of multiprocessors. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Operating System Principles, </booktitle> <address> New York, 1989. </address> <publisher> ACM. </publisher>
Reference: [Cha92] <author> Craig Chambers. </author> <title> Object-oriented multi-methods in Cecil. </title> <booktitle> In ECOOP '92 European Conference on Object-Oriented Programming, number ??? in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: When the arguments are of different or unrelated classes, a more flexible method is required <ref> [Cha92, Kee89] </ref>. Such functions are called "multi-methods". Usually this involves the selection of the function including the "most specific" of each parameter.
Reference: [CW85] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(4), </volume> <month> December </month> <year> 1985. </year>
Reference-contexts: Conformance is basically an implicit subtyping: any type that provides "conforming" operations may be supplied as a parameter for another type. Code reuse can be achieved via delegation, in which operations are "forwarded" to another object for execution. 2.2 Polymorphism Cardelli and Wegner <ref> [CW85] </ref> identify three forms of polymorphism: * Ad-hoc Ad-hoc polymorphism is said to be present when a function may be applied to several different types, yet these types may have no common structure, and the function may behave in unrelated ways for these types.
Reference: [FL92] <author> Michael J. Feeley and Henry M. Levy. </author> <title> Distributed shared memory with versioned objects. </title> <booktitle> In Proceedings of OOPSLA '92 [ACM92]. </booktitle>
Reference: [FRS + 91] <author> W. Fenton, B. Ramkumar, V.A. Saletore, A.B. Sinha, and L.V. Kale. </author> <title> Supporting machine independant programming on diverse parallel architectures. </title> <booktitle> In Proceedings of the International conference on Parallel Processing, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: Transaction entries are embedded in the code of the process body; it is not possible to then override specific transactions in the derived process. Thus it is unlikely that such a hybrid entity will be introduced into the language. 5.2 Charm++ Based on the Charm parallel programming system <ref> [FRS + 91] </ref>, Charm++ extends C++ with explicit parallel constructs.
Reference: [GR83] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year> <month> 28 </month>
Reference: [GR88] <author> N. H. Gehani and W. D. Roome. </author> <title> Concurrent C++: Concurrent programming with class(es). </title> <journal> Sotware Practice and Experience, </journal> <volume> 18(12), </volume> <month> December </month> <year> 1988. </year>
Reference-contexts: The design philosophy is based on the assumption that data abstraction and parallel programming facilities are orthogonal <ref> [GR88] </ref>. A Concurrent C++ program consists of a set of processes that execute in parallel. A process is defined by a process spec, which lists the transactions, or external interface, of that process type, and a process body, which consists of the sequential computation that process executes during its lifetime.
Reference: [Ish92] <author> Yutaka Ishikawa. </author> <title> Communication mechanism on autonomous objects. </title> <booktitle> In Proceedings of OOPSLA '92 [ACM92]. </booktitle>
Reference: [JLHB88] <author> Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black. </author> <title> Fine-grained mobility in the Emerald system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1), </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: To control access to shared resources within an object, Emerald provides a monitor construct; synchronization is achieved via condition objects and wait and signal primitives. Object location and migration can be explicit in Emerald. The language primitives provide the following operations on objects <ref> [JLHB88] </ref>: * Locate an object. "locate X" returns the node where X resides. * Move an object. "move X to Y" colocates X with Y. * Fix an object at a particular node e.g., "fix X at Y". * Unfix an object thus making it mobile e.g., "unfix X". * Refix
Reference: [Kee89] <author> Sonya E. Keene. </author> <title> Object Oriented Programming in CLOS. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: When the arguments are of different or unrelated classes, a more flexible method is required <ref> [Cha92, Kee89] </ref>. Such functions are called "multi-methods". Usually this involves the selection of the function including the "most specific" of each parameter.
Reference: [KK93] <author> Laxmikant V. Kale and Sanjeev Krishnan. Charm++: </author> <title> A portable concurrent object oriented system based on C++. </title> <booktitle> In Proceedings of OOPSLA '93 [ACM93]. </booktitle>
Reference-contexts: Among the design goals of Charm++ are portability, load balancing, specific data abstractions for information sharing, and latency tolerance <ref> [KK93] </ref>. 14 Concurrency arises in a Charm++ program primarily via localized pro-cesses, called chares, which are C++ class-like objects containing private data and methods, and publicly accessible entries. A chare may only be accessed via messages sent to an entry; a chare may have no public data or methods. <p> Messages are not the only method for information sharing; normal (sequential) static and global objects are prohibited, however. Charm++ identifies and implements the following templates from which global objects may be derived <ref> [KK93] </ref>: * Read-only objects These objects are initialized immediately after the program begins and may not be changed subsequently. * Write-once objects These are dynamic versions of read-only objects. * Accumulator objects These are special objects for which two operations must be defined: add, which adds to the object in some
Reference: [L 93] <author> Klaus-Peter Lohr. </author> <title> Concurrency annotations for reusable software. </title> <journal> Communications of the ACM, </journal> <volume> 36(9), </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: Both present alternatives to the active-object = one body idea. 16 6.1 CEiffel An extension to Eiffel providing facilities for distributed computation, CEif-fel, has been recently developed, with the somewhat unusual goal of allowing the same code to be used for both sequential and concurrent programs <ref> [L 93] </ref>; a program will not necessarily have the same semantics, but it will be semantically meaningful for both concurrent and sequential interpretations. This is achieved via concurrency annotations: notations that are interpreted as comments by the regular (sequential) Eiffel compiler, but have special meaning to the CEiffel compiler.
Reference: [LT91] <author> Henry M. Levy and Ewan D. Tempero. </author> <title> Modules, objects and distributed programming: Issues in RPC and remote object invocation. </title> <journal> Sotware Practice and Experience, </journal> <volume> 21(1), </volume> <month> January </month> <year> 1991. </year>
Reference: [Mey88] <author> Bertrand Meyer. </author> <title> Object Oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference: [Mey92] <author> Bertrand Meyer. </author> <title> Eiffel: the language. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Familiarity with C++, Ada, and Eiffel is assumed throughout; for further descriptions, see <ref> [Str91, Bar89, Mey92] </ref>. A note on the terminology used in this paper: due to the great variance in usage among languages, several terms will be overloaded, and several con 1 cepts will be referred to by more than one name.
Reference: [Mey93] <author> Bertrand Meyer. </author> <title> Systematic concurrent object-oriented programming. </title> <journal> Communications of the ACM, </journal> <volume> 36(9), </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: autonomous and synchronous routines may be redefined as non-autonomous or asynchronous in derived classes, as 18 well as the converse. 6.2 Meyer's model Bertrand Meyer, the designer of the Eiffel language, has recently proposed an extension to Eiffel to address the needs of concurrent and distributed computing simply and concisely <ref> [Mey93] </ref>. This extension consists of one syntactical addition, a new keyword separate, and an auxiliary library class to provide fine control of object interaction in special cases; hereafter, the language with the proposed extension will be referred to as MEiffel.
Reference: [MK87] <author> J. Eliot B. Moss and Walter H. Kohler. </author> <title> Concurrency features for the Trellis/Owl language. </title> <booktitle> In ECOOP '87 European Conference on Object-Oriented Programming, number 276 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: This is based on the assumption that threads of control will be primarily used to model conceptually independent tasks; the principle units of functionality and modularity are object methods and type definitions <ref> [MK87] </ref>. Trellis provides thread creation via creation of objects of type Activity; an activity may wait for the completion or termination of another activity via the await and await with timeout operations. A number of activities may be dynamically maintained and monitored via use of Activity set objects.
Reference: [MTY93] <author> Satoshi Matsuoka, Kenjiro Taura, and Akinori Yonezawa. </author> <title> Highly efficient and encapsulated re-use of synchronization code in concurrent object-oriented languages. </title> <booktitle> In Proceedings of OOPSLA '93 [ACM93]. </booktitle> <pages> 29 </pages>
Reference-contexts: Even in languages without explicit bodies, code reuse by inheritance is difficult to achieve due to the method of specifying synchronization constraints. Recently a proposal has been put forward that works towards solving this problem <ref> [MTY93] </ref>. It involves separation of synchronization and operations, separate inheritance of synchronization and operations, and a combination of several orthogonal synchronization mechanisms. 3 POOL One of the early concurrent object-oriented languages to be designed is POOL [Ame91].
Reference: [MWY91] <author> Satoshi Matsuoka, Ken Wakita, and Akinori Yonezawa. </author> <title> Synchro--nization constraints with inheritance: What is not possible so what is? Technical report, </title> <institution> Department of Information Science, University of Tokyo, </institution> <year> 1991? </year>
Reference-contexts: Note that it is possible to relax two or more of the above constraints when introducing concurrency into an object oriented language. 5 2.3.1 Inheritance anomaly Several researchers have noted a conflict between inheritance and concurrency mechanisms in object oriented languages, dubbed the "inheritance anomaly" <ref> [MWY91] </ref>. This is readily apparent in those languages in which objects are active: the body that determine an object's overall synchronization behavior usually must be completely redefined in derived objects in order to account for additions and changes to inherited features.
Reference: [RTL + 91] <author> Rajendra K. Raj, Ewan Tempero, Henry M. Levy, Andrew P. Black, Norman C. Hutchinson, and Eric Jul. </author> <title> Emerald: A general-purpose programming language. </title> <journal> Sotware Practice and Experience, </journal> <volume> 21(1), </volume> <month> January </month> <year> 1991. </year>
Reference: [SCB + 86] <author> Craig Schaffert, Topher Copper, Bruce Bullis, Mike Kilian, and Carrie Wilpolt. </author> <title> An introduction to Trellis/Owl. </title> <booktitle> In Proceedings of OOPSLA '86, ACM SIGPLAN Notices [ACM86]. </booktitle>
Reference-contexts: Note that in the absence of programmer-supplied information, the compiler may decide to implement a given invocation with either call-by-move or call-by-visit. 8 Trellis and Trellis/DOWL Trellis/DOWL [Ach93] is an extension of the Trellis language to support distributed computation. Trellis <ref> [SCB + 86] </ref> is statically typed, has a flexible type system including multiple inheritance, subtyping, and type generators (essentially parameterized types). Trellis also allows the programmer to test the type of objects at runtime. This is useful, for example, in specializing code on function parameters other than the controlling parameter.
Reference: [Str91] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1991. </year>
Reference-contexts: Familiarity with C++, Ada, and Eiffel is assumed throughout; for further descriptions, see <ref> [Str91, Bar89, Mey92] </ref>. A note on the terminology used in this paper: due to the great variance in usage among languages, several terms will be overloaded, and several con 1 cepts will be referred to by more than one name.
Reference: [TS89] <author> Chris Tomlinson and Vineet Singh. </author> <title> Inheritance and synchronization with enabled-sets. </title> <booktitle> In Proceedings of OOPSLA '89, ACM SIGPLAN Notices [ACM89]. </booktitle>
Reference: [US87] <author> David Ungar and Randall B. Smith. </author> <title> Self: The power of simplicity. </title> <booktitle> In Proceedings of OOPSLA '87, ACM SIGPLAN Notices [ACM87]. </booktitle>
Reference: [vdBL89] <author> Jan van den Bos and Chris Laffra. </author> <title> Procol: a parallel object language with protocols. </title> <booktitle> In Proceedings of OOPSLA '89, ACM SIG-PLAN Notices [ACM89]. </booktitle>
Reference: [YBS86] <author> Akinoro Yonezawa, Jean-Pierr Briot, and Etsuya Shibayama. </author> <booktitle> Object-oriented concurrent programming in ABCL/1. In Proceedings of OOPSLA '86, ACM SIGPLAN Notices [ACM86]. </booktitle>
Reference: [Yon90] <editor> Akinoro Yonezawa, editor. </editor> <title> ABCL: An Object-Oriented Concurrent System. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachussetts, </address> <year> 1990. </year>
Reference-contexts: a copy of these objects on each node, rather than requiring remote reference or procedure call to access them. 4 ABCL/1 ABCL/1, although it has roots in the Actor [Agh86] family of languages, is more properly an object oriented language due to the inclusion of local state information per object <ref> [Yon90] </ref>. Each object has its own autonomous processing power and an incoming message queue. An object is defined by the representation of its local persistent memory, the conditions upon which messages are accepted, and the sequence of actions performed when a message is accepted. <p> Message passing is the primary means of concurrency in ABCL/1. The general characteristics of message passing in ABCL/1 are as follows <ref> [Yon90] </ref>: * No Broadcasting Message passing is point-to-point (i.e. object-to-object); an object may send a message only to objects it "knows about". * Dynamic Connection Topology The knows-about relation among objects is dynamic. * No Anonymous Messages The identity of a sender of a message is available to the recipient of
Reference: [YSTH90] <author> Akinori Yonezawa, Etsuya Shibayama, Toshihiro Takada, and Ya-suaki Honda. </author> <title> Modelling and programming in an object-oriented concurrent language ABCL/1. </title> <editor> In Yonezawa [Yon90]. </editor> <volume> 30 </volume>
Reference: [YT86] <author> Yasuhiko Yokote and Mario Tokoro. </author> <title> The design and implemen-tation of ConcurrentSmalltalk. </title> <booktitle> In Proceedings of OOPSLA '86, ACM SIGPLAN Notices [ACM86]. </booktitle>
Reference: [YT87] <editor> Akinori Yonezawa and Mario Tokoro, editors. </editor> <title> Object Oriented Concurrent Programming. </title> <publisher> MIT Press, </publisher> <year> 1987. </year> <month> 31 </month>
References-found: 45

