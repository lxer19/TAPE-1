URL: http://ptolemy.eecs.berkeley.edu/~cameron/papers/asilomar96.fm.ps.gz
Refering-URL: http://ptolemy.eecs.berkeley.edu/~cameron/papers/asilomar96.html
Root-URL: 
Email: -cameron,eal-@EECS.Berkeley.EDU  
Title: SYNTHESIS OF PARALLEL HARDWARE IMPLEMENTATIONS FROM SYNCHRONOUS DATAFLOW GRAPH SPECIFICATIONS  
Author: Michael C. Williamson and Edward A. Lee 
Web: http://ptolemy.eecs.berkeley.edu/~-cameron,eal-ABSTRACT  
Address: Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: We detail a method for the partitioning of a single application specified in synchronous dataow (SDF) into multiple independently-synthesizable, communicating VHDL hardware modules. Either synchronous or asynchronous communication is allowed, and the clock timing and control are automatically generated. We show that this method guarantees the preservation of correct functional behavior as specified in the original SDF graph, and that many choices of partitioning into multiple hardware modules are possible. The ability to break up a larger application into smaller synthesizable hardware modules can lead to efficiencies in hardware synthesis, which is faster when performed on smaller VHDL specifications. We illustrate this new method with some practical example applications that have been constructed in Ptolemy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. A. Lee and D. G. Messerschmitt, </author> <title> Synchronous data flow, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 75, no. 9, </volume> <pages> pp. 1235-1245, </pages> <year> 1987. </year>
Reference-contexts: 1. INTRODUCTION In this paper we describe a method for partitioning a single application specified in synchronous dataow <ref> [1] </ref> into a multi-module hardware implementation. This method is one way of bridging the gap between algorithm design and implementation design in the domain of digital signal processing (DSP) applications.
Reference: [2] <author> J. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt, Ptolemy: </author> <title> A framework for simulating and prototyping heterogeneous systems, International Journal of Computer S i m u l a t i o n , s p e c i a l i s s u e o n S i m u l a t i o n S o f t w a r e Development, </title> <journal> vol. </journal> <volume> 4, </volume> <pages> pp. 155-182, </pages> <year> 1994. </year> <note> http://ptolemy.eecs.berkeley.edu/papers/JEurSim </note>
Reference-contexts: It has the advantage of providing the designer with a method for breaking up larger designs into smaller, more tractable units, while still enforcing communication rules that preserve the functional correctness of the intended algorithm. This method has been implemented and tested in the Ptolemy <ref> [2] </ref> environment. In our work, the algorithm is specified in a form of dataow graph known as synchronous dataow (SDF). The semantics of SDF graphs are more restricted than other, more general dataow semantics, but SDF is still able to represent a very broad range of applications.
Reference: [3] <author> J. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt, </author> <title> Multirate signal processing in Ptolemy, </title> <booktitle> Proceedings of the IEEE International Conference on Acoustics, Speech, and Signal Processing, Toronto, Ont., Canada, </booktitle> <volume> vol. 2, </volume> <pages> pp. 1245-1248, </pages> <year> 1991. </year>
Reference-contexts: The semantics of SDF graphs are more restricted than other, more general dataow semantics, but SDF is still able to represent a very broad range of applications. The semantics of SDF graphs are particularly useful for representing multirate DSP applications <ref> [3] </ref>, a class of applications for which hardware synthesis is especially difficult. In addition, the fully static nature of the SDF model allows us to analyze the application in advance to determine the partial precedence ordering of all computations and communications.
Reference: [4] <author> J. L. Pino, S. Ha, E. A. Lee, and J. T. Buck, </author> <title> Software synthesis for DSP using Ptolemy, </title> <journal> Journal of VLSI Signal Processing, </journal> <volume> vol. 9, no. </volume> <pages> 1-2, pp. 7-21, </pages> <year> 1995. </year> <note> http://ptolemy.eecs.berkeley.edu/papers/jvsp_codegen </note>
Reference-contexts: This results in faster execution at run time since there are no data-dependent decisions to be made. We will describe the SDF model in greater detail in Section 2. The method discussed in this paper draws on techniques developed for software synthesis for DSP applications <ref> [4] </ref>. In particular, methods for parallel scheduling of SDF graphs on multiple processors [5][6] and techniques for interfacing heterogeneous code generation subsystems [7] have provided the main groundwork for the methods in this paper.
Reference: [5] <editor> J . L . P i n o , S . S . B h a t t a c h a r y y a , a n d E . A . L e e , A Hierarchical Multiprocessor Scheduling Framework for Synchronous Dataflow Graphs, </editor> <address> UC Berkeley UCB/ERL M95/36, </address> <year> 1995. </year> <note> http://ptolemy.eecs.berkeley.edu/papers/erl-95-36 </note>
Reference: [6] <author> J. L. Pino, T. M. Parks, and E. A. Lee, </author> <title> Automatic code generation for heterogeneous multiprocessors, </title> <booktitle> Proceedings of the IEEE International Conference on Acoustics, Speech, and Signal Processing, Adelaide, South Australia, </booktitle> <volume> vol. 2, </volume> <pages> pp. 445-448, </pages> <year> 1994. </year> <note> http://ptolemy.eecs.berkeley.edu/papers/autoMultiCodeGen </note>
Reference: [7] <author> J. L. Pino, M. C. Williamson, and E. A. Lee, </author> <title> Interface Synthesis in Heterogeneous System-Level DSP Design Tools, </title> <booktitle> Proceedings of the IEEE International Conference on Acoustics, Speech, and Signal Processing, Atlanta, Georgia, USA, </booktitle> <volume> vol. 2, </volume> <pages> pp. 1268-71, </pages> <year> 1996. </year>
Reference-contexts: The method discussed in this paper draws on techniques developed for software synthesis for DSP applications [4]. In particular, methods for parallel scheduling of SDF graphs on multiple processors [5][6] and techniques for interfacing heterogeneous code generation subsystems <ref> [7] </ref> have provided the main groundwork for the methods in this paper. The parallel scheduling techniques have been aimed at generating software for parallel execution on multiple communicating DSP processors. The emphasis of the code generation mechanism has been on combining multiple, heterogeneous subsystems into a single parallel architecture.
Reference: [8] <author> R. K. Gupta, C. N. Coelho, Jr., and G. De Micheli, </author> <title> Synthesis and simulation of digital systems containing interacting hardware and software components, </title> <booktitle> Proceedings of the 29th ACM/IEEE Design Automation Conference, </booktitle> <address> Anaheim, California, USA, </address> <pages> pp. 225-30, </pages> <year> 1992. </year>
Reference: [9] <author> R. K. Gupta and G. De Micheli, </author> <title> Hardwaresoftware cosynthesis for digital systems, </title> <booktitle> IEEE Design and Test of Computers, Sept. 1993, </booktitle> <volume> vol. 10, no. 3, </volume> <pages> pp. 29-41. </pages>
Reference: [10] <author> P. Zepter, T. Grotker, and H. Meyr, </author> <title> Digital receiver design using VHDL generation from data flow graphs, </title> <booktitle> Proceedings of the 32nd IEEE Design Automation Conference, </booktitle> <address> San Francisco, California, USA, </address> <pages> pp. 228-33, </pages> <year> 1995. </year>
Reference: [11] <author> T. Grotker, P. Zepter, and H. Meyr, ADEN: </author> <title> An environment for digital receiver ASIC design, </title> <booktitle> Proceedings of the IEEE International Conference on Acoustics, Speech, and Signal Processing, </booktitle> <address> Detroit, Michigan, </address> <booktitle> USA, </booktitle> <volume> vol. 5, </volume> <pages> pp. 3243-6, </pages> <year> 1995. </year>
Reference: [12] <institution> IEEE Standard VHDL Language Reference Manual, IEEE ANSI/IEEE Std 1076-1993, </institution> <year> 1994. </year>
Reference-contexts: The goal of this method is to output a description of a parallel hardware structure for correctly executing the application specified by the initial dataow graph. In our implementation this output representation is a description in VHDL <ref> [12] </ref> code. VHDL is a widely-used language for representing digital hardware and is popular as an input to tools that synthesize high-level hardware designs into lower-level gate and netlist representations as well as tools that perform design optimization through various re-synthesis techniques.
Reference: [13] <author> G. De Micheli, </author> <title> Synthesis and Optimization of Digital Circuits, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: Because these techniques typically require time exponential in the size of the input design <ref> [13] </ref>, our methods support for resolving the design into smaller communicating design units can open the way to speeding up the process of synthesizing the final hardware implementation.
Reference: [14] <editor> VSS Expert Interfaces V3.2b, Synopsys, </editor> <publisher> Inc., </publisher> <address> 700 East Middlefield Rd., Mountain View, CA 94043 Document Order Number 1US01-10062, </address> <year> 1995. </year>
Reference-contexts: Either of these styles of code can be simulated using commercial VHDL simulation tools. One of the simulators supported in Ptolemy is the VHDL System Simulator (VSS) from Synopsys <ref> [14] </ref>. Other simulators could be used with some additional programming by a user knowledgeable in C++.
References-found: 14

