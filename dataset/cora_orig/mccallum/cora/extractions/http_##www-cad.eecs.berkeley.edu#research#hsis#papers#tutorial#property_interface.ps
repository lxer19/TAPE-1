URL: http://www-cad.eecs.berkeley.edu/research/hsis/papers/tutorial/property_interface.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/research/hsis/index.html
Root-URL: 
Title: A User Friendly Environment for Property Specification  
Author: by Rajeev K. Ranjan Mentors: Tom Shiple, Vigyan Singhal and R. K. Brayton 
Pubnum: EE290H Project, Fall'93  
Abstract: We present a user friendly environment for specifying properties. This has been built upon the Berkeley Hierarchical Sequential Interactive System (HSIS). A library of commonly used properties has been constructed. Several command level functions have been created so that the user can easily specify some properties of the system under design. For each property in the library an online help file provides the complete description. The library of properties is user extendible so that a user can easily build a property library pertaining to a particular design and can easily use the interface. Finally, when an incremental change in a design is made, it is important that the new design is verified against all the properties specified for the old design. A feature has been added which allows the user to do this in an easy manner. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aziz et. al. </author> <title> HSIS : A BDD-based Environment for Formal Verification. </title> <booktitle> In Proc. Design Automat. Conf., </booktitle> <month> June </month> <year> 1994. </year> <note> submitted. </note>
Reference-contexts: These verification systems are limited in their application in the sense that they support specification in terms of either CTL-formulae or automata. HSIS <ref> [1] </ref>, which is based on combinational-sequential (C/S) model supports property verification both in terms of language containment as well as model checking. It supports both of these methods allowing in addition fairly general fairness constraints to be specified for the implementation. <p> Table 1: List of Commands These prompt level commands are summarized in Table <ref> [1] </ref>. 6 Conclusion Property specification plays an important role in formal verification. A user friendly interface for property specification has been built. This interface allows the user to interactively specify and verify properties on a system. To aid the user in specifying properties, help files are provided.
Reference: [2] <author> Aarti Gupta. </author> <title> Formal Hardware Verification Methods: A Survey. </title> <booktitle> In Formal Methods in System Design, </booktitle> <pages> pages 151-238. </pages> <publisher> Kluwer Academeic Publishers, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: It involves the use of analytical techniques to prove that the implementation of a system conforms to a set of properties. A typical verification problem consists of formally establishing a relationship between an implementation and a specification <ref> [2] </ref>. Implementation refers to the hardware design to be verified and the term specification refers to the set of properties with respect to which correctness is to be determined. <p> If the property list is not complete and the design is not verified for all the properties, it might result in undesirable behavior of the system. Broadly speaking, properties can be divided into three categories <ref> [2] </ref>: 1. Functional correctness properties: This pertains to the behavior of the particular design. Typically the designer knows what the system is supposed to do if implemented correctly and he/she can specify those desirable behaviors in terms of properties. 2.
Reference: [3] <author> Z. Har'El and R. P. Kurshan. </author> <title> COSPAN User's Guide. </title> <year> 1987. </year>
Reference-contexts: STOP UPON <ref> [3] </ref>: stop_upon (_upon ,_test, _until) This property specifies that in any state of the system if _upon is true, then _test must be true until _until is true. <p> The CTL-formula is given as: AG ( upon ) A ( test U until)) A User Friendly Environment for Property Specification 6 The corresponding automaton is given below: 3. EV TESTUPON <ref> [3] </ref>: ev_testupon (_upon, _test, _until) This property specifies that infinitely often whenever a state is reached where _upon is true, the _test will remain true until _until becomes true.
Reference: [4] <author> Serdar Tasiran. </author> <title> Private communication, </title> <year> 1993. </year>
Reference-contexts: For example, following two structures have the same language (p ! + p + q ! ), but structure (A) satisfies the CTL-formula AGEF (q) while structure (B) does not <ref> [4] </ref>. A User Friendly Environment for Property Specification 8 7. ALMOST ALWAYS: almost_always (_condition) This property expresses that _condition should hold everywhere after a finite number of transitions in the system. In other words, we are allowing only a finite number of failures (!_condition) in the system.
References-found: 4

