URL: http://www.cs.brown.edu/publications/jgaa/accepted/98/Naor+98.2.4.ps.gz
Refering-URL: http://www.cs.brown.edu/publications/jgaa/accepted/home.html
Root-URL: http://www.cs.brown.edu/
Title: Scheduled Hot-Potato Routing  
Author: Joseph (Seffi) Naor Ariel Orda Raphael Rom 
Address: 32000, Israel  32000, Israel  
Affiliation: Department of Computer Science Technion, Haifa  Department of Electrical Engineering Technion, Haifa  
Note: Journal of Graph Algorithms and Applications  vol. 2, no. 4, pp.  Communicated by S. Khuller: submitted  
Email: naor@cs.technion.ac.il  ariel@ee.technion.ac.il rom@ee.technion.ac.il  
Web: http://www.cs.brown.edu/publications/jgaa/  http://www.cs.technion.ac.il/  http://www.ee.technion.ac.il/  
Date: 1-20 (1998)  November 1996; revised November 1997.  
Abstract: This paper is concerned with fast, hot-potato routing, performed according to a predetermined schedule. At each time period each node selects an outgoing link, through which an incoming packet is sent. No buffers are used. We investigate first the problem of how to route a network-wide demand of packets, given the predetermined schedule. We show that certain versions of the problem have efficient solutions, while other versions are intractable. We then consider the problem of finding an optimal schedule given a network-wide demand of packets. We indicate that the problem is tractable for either a single source or single destination. However, for the multi-source multi-destination case we show that it is an NP-complete problem. We present an efficient heuristic for directed tree-networks, and adapt it to general topologies through a recursive scheme, for which an efficient performance bound is shown. Raphael Rom is also with Sun Microsystems, Mountain View, CA, 94043. A preliminary version of this paper appeared in the Proceedings of IEEE INFOCOM 1995, Boston, MA, USA, pp. 579-586. This work was supported by the Broadband Telecommunications R&D Consortium administered by the chief scientist of the Israeli Ministry of Industry and Trade. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Acampora and S. Shah. </author> <title> Multihop lightwave networks: a comparison of store-and-forward and hot-potato routing. </title> <booktitle> In Proceedings of IEEE INFO-COM, </booktitle> <pages> pages 10-19, </pages> <year> 1991. </year>
Reference: [2] <author> A. Barnoy, P. Raghavan, B. Schieber, and H. Tamaki. </author> <title> Fast deflection routing for packets and worms. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 75-86, </pages> <year> 1993. </year>
Reference: [3] <author> A. Ben-Dor, S. Halevi, and A. Schuster. </author> <title> Potential function analysis of greedy hot-potato routing. </title> <note> To appear in Mathematical Systems Theory, 1997. Preliminary version in Proceedings of the 13th Symposium on Princi ples of Distributed Computing, </note> <year> 1994, </year> <pages> pages 225-234. </pages>
Reference: [4] <author> I. Cidon, I. Gopal, and S. Kutten. </author> <title> New models and algorithms for future networks. </title> <booktitle> In Proceedings of the 7th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 74-89, </pages> <year> 1988. </year>
Reference-contexts: An efficient routing technique for a high-speed network is one that demands little "thinking" from the node. Ideally, a node would take an immediate routing decision (e.g., <ref> [4] </ref>). In addition, an efficient scheme for high-speed routing would avoid the use of buffering at intermediate nodes: ideally, a packet would flow throughout the network without queuing at nodes (e.g., [27]). Indeed, queuing means more delay and also a more complicated strategy from the node's standpoint. <p> A variation on this approach is the one described in <ref> [4] </ref>, where, by default, each packet, while being switched according to the nodal schedule, is also delivered to the end user attached to every node along the path, and is discarded by those nodes for which it is not intended (as is done in most LANs). 3 Use of a Given
Reference: [5] <author> I. Cidon, S. Kutten, Y. Mansour, and D. Peleg. </author> <title> Greedy packet scheduling. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24 </volume> <pages> 148-157, </pages> <year> 1995. </year>
Reference: [6] <author> E. Dinitz. </author> <title> Private communication, </title> <month> May </month> <year> 1993. </year>
Reference-contexts: Let D be such that traffic flows in both ways, i.e., some destinations are located to the right of their sources, while others are located to the left. Dinitz has shown <ref> [6] </ref> that even in this setting problem SD is intractable. We note, though, that a simple but efficient heuristic exists for the linear topology: first, all sources that have destinations to their right send (at time 0) their packets.
Reference: [7] <author> U. Feige and P. Raghavan. </author> <title> Exact analysis of hot-potato routing. </title> <booktitle> In Proceedings of IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 553-562, </pages> <month> November </month> <year> 1992. </year>
Reference: [8] <author> M. Garey and D. Johnson. </author> <title> Computers and Intractability. </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: In general, both the problem of finding edge disjoint paths (between various source-destination pairs), and that of finding a maximum independent set, are known to be NP-Complete <ref> [8] </ref>. Nonetheless, we now show that in our case the problems are tractable, since the graph P G (T E G;S;T ) is chordal. A graph is called chordal if every cycle of length 4 or more contains a chord. J. <p> Theorem 2 Problem T SD is NP-Hard. J. Naor et al., Scheduled Hot-Potato Routing, JGAA, 2 (4) 1-20 (1998) 11 Proof: We prove the theorem by a reduction to the 3SAT problem, which is known to be NP-Complete <ref> [8] </ref>. We adapt Karp's proof [16] for the intractability of the Disjoint Paths Problem. Consider a version of the 3SAT problem, where each literal appears exactly times for some constant . This is the -3SAT problem which is known to be NP-Complete [14].
Reference: [9] <author> F. Gavril. </author> <title> Algorithms for minimum coloring. </title> <journal> Siam J. Computing, </journal> <volume> 1 </volume> <pages> 180-187, </pages> <year> 1972. </year>
Reference-contexts: In particular, a maximum independent set can be computed in linear time in a chordal graph <ref> [9, 10] </ref>. Lemma 3 P G (T E G;S;T ) is a chordal graph. Proof: To prove the lemma, we must show that P G (T E G;S;T ) does not contain a chordless cycle of length 4 or more.
Reference: [10] <author> M. Golumbic. </author> <title> Algorithmic Graph Theory and Perfect Graphs. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: A graph is called chordal if every cycle of length 4 or more contains a chord. J. Naor et al., Scheduled Hot-Potato Routing, JGAA, 2 (4) 1-20 (1998) 8 Chordal graphs constitute a graph family for which it is well known <ref> [10] </ref> that many NP-complete problems become tractable when restricted to it. In particular, a maximum independent set can be computed in linear time in a chordal graph [9, 10]. Lemma 3 P G (T E G;S;T ) is a chordal graph. <p> In particular, a maximum independent set can be computed in linear time in a chordal graph <ref> [9, 10] </ref>. Lemma 3 P G (T E G;S;T ) is a chordal graph. Proof: To prove the lemma, we must show that P G (T E G;S;T ) does not contain a chordless cycle of length 4 or more.
Reference: [11] <author> A. Greenberg and J. Goodman. </author> <title> Sharp approximate models of deflection routing in mesh networks. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 307-318, </pages> <year> 1983. </year>
Reference: [12] <author> A. Greenberg and B. Hajek. </author> <title> Deflection routing in hypercube networks. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 40 </volume> <pages> 1070-1081, </pages> <year> 1992. </year>
Reference: [13] <author> B. Hajek. </author> <title> Bounds on evacuation time for deflection routing. </title> <journal> Distributed Computing, </journal> <volume> 5 </volume> <pages> 1-6, </pages> <year> 1991. </year>
Reference: [14] <author> A. Itai. </author> <title> Two-commodity flow. </title> <journal> Journal of the ACM, </journal> <volume> 25 </volume> <pages> 596-611, </pages> <year> 1978. </year> <editor> J. Naor et al., </editor> <title> Scheduled Hot-Potato Routing, </title> <address> JGAA, </address> <month> 2(4) 1-20 </month> <year> (1998) </year> <month> 19 </month>
Reference-contexts: We adapt Karp's proof [16] for the intractability of the Disjoint Paths Problem. Consider a version of the 3SAT problem, where each literal appears exactly times for some constant . This is the -3SAT problem which is known to be NP-Complete <ref> [14] </ref>. We show how to transform, in polynomial time, an instance of -3SAT into an equivalent instance of T SD.
Reference: [15] <author> C. Kaklamanis, D. Krizanc, and S. Rao. </author> <title> Hot potato routing on processor arrays. </title> <booktitle> In Proceedings of the 5th ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 273-282, </pages> <year> 1993. </year>
Reference: [16] <author> R. Karp. </author> <title> On the complexity of combinatorial problems. </title> <journal> Networks, </journal> <volume> 5 </volume> <pages> 45-68, </pages> <year> 1975. </year>
Reference-contexts: Theorem 2 Problem T SD is NP-Hard. J. Naor et al., Scheduled Hot-Potato Routing, JGAA, 2 (4) 1-20 (1998) 11 Proof: We prove the theorem by a reduction to the 3SAT problem, which is known to be NP-Complete [8]. We adapt Karp's proof <ref> [16] </ref> for the intractability of the Disjoint Paths Problem. Consider a version of the 3SAT problem, where each literal appears exactly times for some constant . This is the -3SAT problem which is known to be NP-Complete [14].
Reference: [17] <author> B. Korte, L. Lovasz, and H. Promel. </author> <title> Paths, Flow, and VLSI-Layout. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin New-York, </address> <year> 1990. </year>
Reference-contexts: It is known that every tree has a separator, that if removed, separates the tree into components, where each component is a tree containing at most half of the nodes of the original tree <ref> [17] </ref>. In a similar way it can be shown that every tree, some of whose nodes are sources, has a separator such that if removed, separates the tree into components, such that each component is a tree containing at most half of the sources of the original tree.
Reference: [18] <author> Y. Mansour and B. Patt-Shamir. </author> <title> Greedy packet scheduling on shortest paths. </title> <journal> Journal of Algorithms, </journal> <volume> 14 </volume> <pages> 449-465, </pages> <year> 1993. </year>
Reference: [19] <author> N. Maxemchuck. </author> <title> Comparison of deflection and store and forward techniques in the manhattan street and shu*e exchange networks. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 800-809, </pages> <year> 1989. </year>
Reference: [20] <author> I. Newman and A. Schuster. </author> <title> Hot-potato algorithms for permutation routing. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 6(11) </volume> <pages> 1168-1176, </pages> <month> November </month> <year> 1995. </year>
Reference: [21] <author> L. M. Ni and P. K. McKinley. </author> <title> A survey of wormhole routing techniques in direct networks. </title> <journal> IEEE Computer, </journal> <volume> 26(2) </volume> <pages> 62-75, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Typically, however, in the above studies, hot-potato routing is applied to regular topologies and considers the identity (label) of the packet for making its routing decision. We note that deflection routing solutions are frequently plagued by deadlock and flow control problems <ref> [21] </ref>. Scheduled routing has also been the focus of several studies, e.g. [18]-[24], but these works considered the use of store-and-forward buffering. In this work we consider the combination of both principles, namely scheduling and hot-potato routing, in order to achieve an efficient method for routing in high-speed networks.
Reference: [22] <author> P. Palnati, E. Leonardi, and M. Gerla. </author> <title> Deadlock-free routing in an optical interconnect for high-speed wormhole routing networks. </title> <booktitle> In Proceedings of the 1996 International Conference on Parallel and Distributed Systems, </booktitle> <address> Tokyo, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: The problem is that since there is no single orientation, source-destination pairs may need conflicting orientations. However, we show how the Train Algorithm can be used in this case such that termination times are still within a reasonable bound. Similar ideas have been used in Up/Down Routing <ref> [22] </ref>. We begin by choosing a node in the above tree, which we refer to as the separator. (A good way to choose a separator is discussed following Lemma 5).
Reference: [23] <author> C. Partridge. </author> <title> Gigabit Networking. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Modern high-speed networks are oriented towards the support of long duration sessions. In such networks, a session is set up in advance, determining both the routes and the rate in which data will subsequently flow <ref> [23] </ref>. Because the lifetime of a session is relatively long, there is typically enough time to gather the data that is necessary to make the routing decision. <p> We note that the usage problem follows the philosophy of the best-effort traffic class in ATM networks <ref> [23] </ref>. The present work is an attempt at providing an analytical framework for this novel method of routing. We establish the problems that should be addressed, provide optimal solutions to some while proving the intractability of others, for which efficient heuristics are described and analyzed.
Reference: [24] <author> P. Rivera-Vega, R. Varadarajan, and S. Navathe. </author> <title> Scheduling data redistribution in distributed databases. </title> <booktitle> In Proceedings of the 6th International Conference on Data Engineering, </booktitle> <pages> pages 166-173, </pages> <address> Los Angeles, </address> <month> February </month> <year> 1990. </year>
Reference: [25] <author> A. Symvonis and J. Tidswell. </author> <title> An empirical study of off-line permutation packet routing on two-dimensional meshes based on the multistage routing method. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 45(5) </volume> <pages> 619-625, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: We remark that the notion of a Timed-Exploded graph was independently discovered by Symvonis and Tidswell <ref> [25] </ref>. They use a method which they call the multistage method and their graphs are called "multistage graphs". <p> We then attempt to schedule the maximal number of departures for each successive time slot, using a residual time exploded graph, to avoid elimination by previously scheduled packets. We note that a similar heuristic was used by Symvonis and Tidswell <ref> [25] </ref>. Algorithm HSU: 1. Initialization: D 0 = D, T E 0 = T E G;S;T max , t = 0. 2.
Reference: [26] <author> T. Szymanski. </author> <title> An analysis of hot potato routing in a fiber optic packet switched hypercube. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 918-925, </pages> <year> 1990. </year>
Reference: [27] <author> Y. Yemini and D. Florissi. Isochronets: </author> <title> A high-speed network switching architecture. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 740-747, </pages> <year> 1993. </year> <editor> J. Naor et al., </editor> <title> Scheduled Hot-Potato Routing, </title> <address> JGAA, </address> <month> 2(4) 1-20 </month> <year> (1998) </year> <month> 20 </month>
Reference-contexts: Ideally, a node would take an immediate routing decision (e.g., [4]). In addition, an efficient scheme for high-speed routing would avoid the use of buffering at intermediate nodes: ideally, a packet would flow throughout the network without queuing at nodes (e.g., <ref> [27] </ref>). Indeed, queuing means more delay and also a more complicated strategy from the node's standpoint. A possible solution that addresses the above issues is that of scheduled hot-potato routing. <p> Because the lifetime of a session is relatively long, there is typically enough time to gather the data that is necessary to make the routing decision. Similar ideas to those presented in this paper have been applied to practical pilot networks, e.g., Isochronets <ref> [27] </ref>, in which network bandwidth is time-divided among routing trees in order to allocate "green-band" paths for traffic destined J. Naor et al., Scheduled Hot-Potato Routing, JGAA, 2 (4) 1-20 (1998) 3 to a common root.
Reference: [28] <author> Z. Zhang and A. Acampora. </author> <title> Performance analysis of multihop lightwave networks with hot potato routing and distance age priorities. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 1012-1021, </pages> <year> 1991. </year>
References-found: 28

