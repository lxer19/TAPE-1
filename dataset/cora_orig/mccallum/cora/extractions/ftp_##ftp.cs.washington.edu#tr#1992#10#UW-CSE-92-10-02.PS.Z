URL: ftp://ftp.cs.washington.edu/tr/1992/10/UW-CSE-92-10-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: Time-Space Tradeoffs for Graph s-t Connectivity  
Author: Gregory Barnes 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  
Abstract: Technical Report 92-10-02 October, 1992 
Abstract-found: 1
Intro-found: 1
Reference: [AAR90] <author> N. Alon, Y. Azar, and Y. Ravid. </author> <title> Universal sequences for complete graphs. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 27 </volume> <pages> 25-28, </pages> <year> 1990. </year>
Reference: [Abb68] <author> E. Abbey. </author> <title> Desert Solitaire; A Season in the Wilderness. </title> <publisher> McGraw-Hill, </publisher> <year> 1968. </year>
Reference: [AF90] <author> M. Ajtai and R. Fagin. </author> <title> Reachability is harder for directed than for undirected graphs. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 55 </volume> <pages> 113-150, </pages> <year> 1990. </year>
Reference-contexts: The only algorithms that were asymptotically faster for undirected graphs were the random walk algorithm of Aleliunas et al., and the nonuniform universal traversal sequences. The deterministic algorithms, depth- and breadth-first search, and Savitch's algorithm, are all asymptotically as fast for directed as undirected graphs. Ajtai and Fagin <ref> [AF90] </ref> show that stcon is harder than ustcon in symbolic logic, but their 60 result does not seem to translate into a computational complexity lower bound.
Reference: [AKL + 79] <author> R. Aleliunas, R. M. Karp, R. J. Lipton, L. Lovasz, and C. Rackoff. </author> <title> Random walks, universal traversal sequences, and the complexity of maze problems. </title> <booktitle> In 20th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-223, </pages> <address> San Juan, Puerto Rico, </address> <month> October </month> <year> 1979. </year> <note> IEEE. </note>
Reference-contexts: If the graph is directed, then the mistake is much more serious, since the walk may not be able to easily return to the proper path. Many of the small space algorithms for ustcon exploit the symmetry of undirected graphs by taking random or pseudorandom walks (see, for example, <ref> [AKL + 79, BKRU89, Nis90, Nis92, NSW92] </ref>). The other common way of exploiting the symmetry of the connectivity relation on undirected graphs is to contract the graph by grouping a set of connected vertices into one (see the algorithms of Chapter 2, and [NSW92]).
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <address> Pittsburgh, PA, Oc-tober 1992. </address> <publisher> IEEE. </publisher>
Reference-contexts: ustcon algorithm be made to estimate the path length from s to t? Is estimating the length of an undirected shortest path to a certain accuracy equivalent to knowing the exact path length? The recent work on approximation algorithms for NP-complete problems by Arora and Safra, and Arora et al. <ref> [AS92, ALM + 92] </ref> gives a new characterization of NP. Perhaps work on approximation problem for NL could yield a similar new understanding of NL. Finally, it is worthwhile to consider the apparent differences between undirected and directed s-t connectivity, as outlined in Section 4.3.
Reference: [AS92] <author> S. Arora and S. Safra. </author> <title> Probabilistic checking of proofs. </title> <booktitle> In 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <address> Pittsburgh, PA, </address> <month> October </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: ustcon algorithm be made to estimate the path length from s to t? Is estimating the length of an undirected shortest path to a certain accuracy equivalent to knowing the exact path length? The recent work on approximation algorithms for NP-complete problems by Arora and Safra, and Arora et al. <ref> [AS92, ALM + 92] </ref> gives a new characterization of NP. Perhaps work on approximation problem for NL could yield a similar new understanding of NL. Finally, it is worthwhile to consider the apparent differences between undirected and directed s-t connectivity, as outlined in Section 4.3.
Reference: [BBR + 90] <author> P. Beame, A. Borodin, P. Raghavan, W. L. Ruzzo, and M. Tompa. </author> <title> Time-space tradeoffs for undirected graph connectivity. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 429-438, </pages> <address> St. Louis, MO, </address> <month> October </month> <year> 1990. </year> <note> IEEE. </note>
Reference-contexts: Cook and Rackoff [CR80] show an (log 2 n= log log n) space lower bound for stcon on their JAG model, closely matching Savitch's upper bound. Berman and Simon [BS83] extend this result to give a similar lower bound on a randomized version of the JAG. Beame et al. <ref> [BBR + 90] </ref> give time-space lower bounds for ustcon on more restricted versions of the JAG model.
Reference: [BBRS92] <author> G. Barnes, J. F. Buss, W. L. Ruzzo, and B. Schieber. </author> <title> A sublinear space, polynomial time algorithm for directed s-t connectivity. </title> <booktitle> In Proceedings, 72 Structure in Complexity Theory, Seventh Annual Conference, </booktitle> <address> Boston, MA, </address> <month> June </month> <year> 1992. </year> <note> IEEE. To appear. </note>
Reference: [BCD + 89] <author> A. Borodin, S. A. Cook, P. W. Dymond, W. L. Ruzzo, and M. Tompa. </author> <title> Two applications of inductive counting for complementation problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(3) </volume> <pages> 559-578, </pages> <month> June </month> <year> 1989. </year> <note> See also 18(6): 1283, </note> <month> December </month> <year> 1989. </year>
Reference-contexts: The following two theorems show that this conjecture is, somewhat surprisingly, true. Let ulsp and ushortp (f (n)) be the versions of the lsp and shortp (f (n)) problems for undirected graphs. According to Borodin et al. <ref> [BCD + 89, page 561] </ref>, Theorem 4.6 was originally discovered by Ladner. Theorem 4.6 ulsp is NL-complete. Theorem 4.7 For constant 1 &gt; * &gt; 0, ushortp (n * ) is NL-complete.
Reference: [BKRU89] <author> A. Z. Broder, A. R. Karlin, P. Raghavan, and E. Upfal. </author> <title> Trading space for time in undirected s-t connectivity. </title> <booktitle> In Proceedings of the Twenty First Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 543-549, </pages> <address> Seattle, WA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: 24 procedure cl (vertex v): vertex; fReturn the "closest" landmark to vg generate bbfs (v; b); if v's neighborhood is not full then return ("small"); for all landmarks, l, in order do begin generate bbfs (l; b); if v's neighborhood overlaps l's then return (l); end; see Broder et al. <ref> [BKRU89] </ref>), and a factor of n when the space approaches its upper bound (O (n log n)). In summary, we have shown the following. <p> If the graph is directed, then the mistake is much more serious, since the walk may not be able to easily return to the proper path. Many of the small space algorithms for ustcon exploit the symmetry of undirected graphs by taking random or pseudorandom walks (see, for example, <ref> [AKL + 79, BKRU89, Nis90, Nis92, NSW92] </ref>). The other common way of exploiting the symmetry of the connectivity relation on undirected graphs is to contract the graph by grouping a set of connected vertices into one (see the algorithms of Chapter 2, and [NSW92]).
Reference: [BNBK + 89] <author> A. Bar-Noy, A. Borodin, M. Karchmer, N. Linial, and M. Werman. </author> <title> Bounds on universal sequences. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(2) </volume> <pages> 268-277, </pages> <month> April </month> <year> 1989. </year>
Reference: [BNS89] <author> L. Babai, N. Nisan, and M. Szegedy. </author> <title> Multiparty protocols and logspace-hard pseudorandom sequences. </title> <booktitle> In Proceedings of the Twenty First Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-11, </pages> <address> Seattle, WA, </address> <month> May </month> <year> 1989. </year>
Reference: [BR91] <author> G. Barnes and W. L. Ruzzo. </author> <title> Deterministic algorithms for undirected s-t connectivity using polynomial time and sublinear space. </title> <booktitle> In Proceedings of the Twenty Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 43-53, </pages> <address> New Orleans, LA, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: 4.4 with a list of open problems in the area of time-space tradeoffs for graph s-t connectivity. 4.2 Other Work on Undirected s-t Connectivity As mentioned in Section 1.3, substantial progress has been made toward determining the deterministic complexity of ustcon since the results of Chapter 2 were first published <ref> [BR91] </ref>. First, Nisan [Nis92] showed that ustcon was in simultaneous 58 polynomial time and O (log 2 n) space by improving his earlier pseudorandom generator algorithm [Nis90].
Reference: [Bri87] <author> M. F. Bridgland. </author> <title> Universal traversal sequences for paths and cycles. </title> <journal> Journal of Algorithms, </journal> <volume> 8(3) </volume> <pages> 395-404, </pages> <year> 1987. </year>
Reference: [BRT89] <author> A. Borodin, W. L. Ruzzo, and M. Tompa. </author> <title> Lower bounds on the length of universal traversal sequences. </title> <booktitle> In Proceedings of the Twenty First Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 562-573, </pages> <address> Seattle, WA, </address> <month> May </month> <year> 1989. </year> <note> To appear in Journal of Computer and System Sciences. 73 </note>
Reference: [BS83] <author> P. Berman and J. Simon. </author> <title> Lower bounds on graph threading by probabilistic machines. </title> <booktitle> In 24th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 304-311, </pages> <address> Tucson, AZ, </address> <month> November </month> <year> 1983. </year> <note> IEEE. </note>
Reference-contexts: Cook and Rackoff [CR80] show an (log 2 n= log log n) space lower bound for stcon on their JAG model, closely matching Savitch's upper bound. Berman and Simon <ref> [BS83] </ref> extend this result to give a similar lower bound on a randomized version of the JAG. Beame et al. [BBR + 90] give time-space lower bounds for ustcon on more restricted versions of the JAG model.
Reference: [Coh78] <author> D.I.A. Cohen. </author> <title> Basic Techniques of Combinatorical Theory. </title> <publisher> John Wiley & Sons, </publisher> <year> 1978. </year>
Reference: [Coo71] <author> S. A. Cook. </author> <title> The complexity of theorem proving procedures. </title> <booktitle> In Proceedings of the Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 151-158, </pages> <address> Shaker Heights, OH, </address> <month> May </month> <year> 1971. </year>
Reference: [Coo79] <author> S. A. Cook. </author> <title> Deterministic CFL's are accepted simultaneously in polynomial time and log squared space. </title> <booktitle> In Proceedings of the Eleventh Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 338-345, </pages> <address> Atlanta, GA, </address> <month> April-May </month> <year> 1979. </year>
Reference-contexts: Finally, Tompa [Tom82] shows that for certain natural approaches to solving stcon, performance degrades sharply with decreasing space: space o (n) implies superpolynomial time, and space n 1* for fixed * &gt; 0 implies time n (log n) , essentially as slow as Savitch's algorithm. It has been conjectured <ref> [Coo79] </ref> that no deterministic stcon algorithm can run in simultaneous polynomial time and polylogarithmic space. <p> Corollary 4.10 says that 69 this is equivalent to showing that the short paths problem for distance n c is solvable in polynomial time and O (n * ) space. Corollary 4.11 shows that Cook's conjecture (stcon is not solvable in simultaneous polynomial time and polylogarithmic space <ref> [Coo79] </ref>) is true if and only if the short paths problem for distance n c is also not solvable in simultaneous polynomial time and polylogarithmic space. 4.4 Future Work The obvious open problems in this area are to improve the bounds on the current best algorithms.
Reference: [CR80] <author> S. A. Cook and C. W. Rackoff. </author> <title> Space lower bounds for maze threadability on restricted machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 9(3) </volume> <pages> 636-652, </pages> <month> August </month> <year> 1980. </year>
Reference-contexts: Any nondeterministic Turing machine that recognizes directed s-t nonconnectivity using the adjacency matrix or edge list encoding uses space (log n). 16 Some tighter lower bounds are known for s-t connectivity on restricted models of computation. Cook and Rackoff <ref> [CR80] </ref> show an (log 2 n= log log n) space lower bound for stcon on their JAG model, closely matching Savitch's upper bound. Berman and Simon [BS83] extend this result to give a similar lower bound on a randomized version of the JAG.
Reference: [Hen65] <author> F. C. Hennie. </author> <title> One-tape off-line Turing machine computations. </title> <journal> Information and Control, </journal> <volume> 8(6) </volume> <pages> 553-578, </pages> <year> 1965. </year>
Reference-contexts: introduction to crossing sequence arguments, see Hopcroft and Ullman [HU79, pages 38, 314-315] [HU69], and Hennie <ref> [Hen65] </ref>. Proposition 1.5 Any deterministic Turing machine that recognizes ustcon using the adjacency matrix or edge list encoding uses space (log n). Proof: Assume without loss of generality that the graph has 4k + 2 vertices. Consider the following family of graphs.
Reference: [HU69] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Formal Languages and their Relation to Automata. </title> <publisher> Addison-Wesley, </publisher> <year> 1969. </year>
Reference-contexts: introduction to crossing sequence arguments, see Hopcroft and Ullman [HU79, pages 38, 314-315] <ref> [HU69] </ref>, and Hennie [Hen65]. Proposition 1.5 Any deterministic Turing machine that recognizes ustcon using the adjacency matrix or edge list encoding uses space (log n). Proof: Assume without loss of generality that the graph has 4k + 2 vertices. Consider the following family of graphs.
Reference: [HU79] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: introduction to crossing sequence arguments, see Hopcroft and Ullman <ref> [HU79, pages 38, 314-315] </ref> [HU69], and Hennie [Hen65]. Proposition 1.5 Any deterministic Turing machine that recognizes ustcon using the adjacency matrix or edge list encoding uses space (log n). Proof: Assume without loss of generality that the graph has 4k + 2 vertices. Consider the following family of graphs. <p> The following section is based on Hopcroft and Ull-man's discussion of logspace many-one reducibility <ref> [HU79, pages 322-324] </ref>, and Ladner and Lynch [LL76]. <p> The modified machines can be merged to get a O (log n) space algorithm for L 1 | each machine uses space O (log n), and they use only O (log n) space to communicate. Multiple reductions can also be composed in the same way. See Hopcroft and Ullman <ref> [HU79, Lemmas 13.2 and 13.3] </ref> for a detailed proof of this result. Chapter 4 uses this method frequently to compose many space bounded reductions into a single reduction.
Reference: [HW89] <author> S. Hoory and A. Wigderson. </author> <title> Universal sequences for expander graphs. </title> <institution> Hebrew University, Jerusalem, </institution> <month> December </month> <year> 1989. </year>
Reference: [Imm88] <author> N. Immerman. </author> <title> Nondeterministic space is closed under complementation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(5) </volume> <pages> 935-938, </pages> <month> October </month> <year> 1988. </year> <month> 74 </month>
Reference-contexts: are written on a one-way, write-only query tape that is erased when a query is answered. 17 For our purposes, many-one and Turing reductions are almost always equivalent, since most of our reductions will deal with languages in NL, and Immerman's and Szelepcsenyi's proofs that NL is closed under complementation <ref> [Imm88, Sze88] </ref> imply that NL is also closed under logspace Turing reductions. Still, for simplicity, we will try to use many-one reductions whenever possible. Unless otherwise specified, for the rest of this thesis, logspace reducibility will mean logspace many-one reducibility. <p> This proves that the shortest path is of length k or less. Then, check that there is no path from s 0 to t k1 in the layered graph using the NL s-t nonconnectivity algorithm of Immerman or Szelepcsenyi <ref> [Imm88, Sze88] </ref>. This proves that the shortest path is not of length k 1 or less.
Reference: [Ist88] <author> S. Istrail. </author> <title> Polynomial universal traversing sequences for cycles are constructible. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 491-503, </pages> <address> Chicago, IL, </address> <month> May </month> <year> 1988. </year>
Reference: [Ist90] <author> S. Istrail. </author> <title> Constructing generalized universal traversing sequences of polynomial size for graphs with small diameter. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 439-448, </pages> <address> St. Louis, MO, </address> <month> October </month> <year> 1990. </year> <note> IEEE. </note>
Reference: [KNP92] <author> D.R. Karger, N. Nisan, and M. Parnas. </author> <title> Fast connected components algorithms for the EREW PRAM. </title> <booktitle> In Proceedings of the 1992 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 373-382, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: The set of vertices is found using the original pseudorandom generator of Nisan [Nis90] 4.2.1 A Variation of the O (log 1:5 n) Space Algorithm Karger et al. <ref> [KNP92] </ref> and Sinha and Tompa [ST] show that the resemblance between Nisan et al.'s O (log 1:5 n) space algorithm and the recursive algorithm of Section 2.3 is more than superficial.
Reference: [Knu73] <author> D. E. Knuth. </author> <title> Sorting and Searching, </title> <booktitle> volume 3 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1973. </year>
Reference-contexts: Instead, our bounded breadth-first search routine looks up the endpoint of the edge in the list of vertices already known to be in the neighborhood. Lookup and insertion in a list can be accomplished in time O (log b) by using a balanced search tree <ref> [Knu73] </ref>. Thus, overall, bbfs uses time O (b 2 log b) with O (b) registers | it can explore only b vertices, which can have only O (b 2 ) edges among them.
Reference: [KPS88] <author> H. J. Karloff, R. Paturi, and J. Simon. </author> <title> Universal traversal sequences of length n O(log n) for cliques. </title> <journal> Information Processing Letters, </journal> <volume> 28 </volume> <pages> 241-243, </pages> <month> August </month> <year> 1988. </year>
Reference: [KSS84] <author> J. Kahn, M. Saks, and D. Sturtevant. </author> <title> A topological approach to evasiveness. </title> <journal> Combinatorica, </journal> <volume> 4 </volume> <pages> 297-306, </pages> <year> 1984. </year>
Reference: [LL76] <author> R. E. Ladner and N. A. Lynch. </author> <title> Relativization of questions about log space computability. </title> <journal> Mathematical Systems Theory, </journal> <volume> 10(1) </volume> <pages> 19-32, </pages> <year> 1976. </year>
Reference-contexts: The following section is based on Hopcroft and Ull-man's discussion of logspace many-one reducibility [HU79, pages 322-324], and Ladner and Lynch <ref> [LL76] </ref>.
Reference: [LP82] <author> H. R. Lewis and C. H. Papadimitriou. </author> <title> Symmetric space-bounded computation. </title> <journal> Theoretical Computer Science, </journal> <volume> 19(2) </volume> <pages> 161-187, </pages> <month> August </month> <year> 1982. </year>
Reference: [Nis90] <author> N. Nisan. </author> <title> Pseudorandom generators for space-bounded computation. </title> <booktitle> In Proceedings of the Twenty Second Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 204-212, </pages> <address> Baltimore, MD, </address> <month> May </month> <year> 1990. </year> <month> 75 </month>
Reference-contexts: First, Nisan [Nis92] showed that ustcon was in simultaneous 58 polynomial time and O (log 2 n) space by improving his earlier pseudorandom generator algorithm <ref> [Nis90] </ref>. More recently, Nisan et al. [NSW92] show how to solve ustcon in space O (log 1:5 n) and time O (n p log n ). <p> The basic idea of this last result is similar to the recursive algorithm of Section 2.3 | the graph is repeatedly contracted by associating a set of vertices with one vertex. The set of vertices is found using the original pseudorandom generator of Nisan <ref> [Nis90] </ref> 4.2.1 A Variation of the O (log 1:5 n) Space Algorithm Karger et al. [KNP92] and Sinha and Tompa [ST] show that the resemblance between Nisan et al.'s O (log 1:5 n) space algorithm and the recursive algorithm of Section 2.3 is more than superficial. <p> Let the neighborhood of a vertex v be the vertices found by taking the pseudorandom walks generated by the original pseudorandom generator of Nisan <ref> [Nis90] </ref> when given log n space. It can be shown that these walks hit at least c2 p log n distinct vertices, for some constant c &gt; 0 (or all the vertices in v's component, if v's component contains fewer than c2 p vertices). <p> If the graph is directed, then the mistake is much more serious, since the walk may not be able to easily return to the proper path. Many of the small space algorithms for ustcon exploit the symmetry of undirected graphs by taking random or pseudorandom walks (see, for example, <ref> [AKL + 79, BKRU89, Nis90, Nis92, NSW92] </ref>). The other common way of exploiting the symmetry of the connectivity relation on undirected graphs is to contract the graph by grouping a set of connected vertices into one (see the algorithms of Chapter 2, and [NSW92]).
Reference: [Nis92] <author> N. </author> <title> Nisan. </title> <booktitle> RL SC . In Proceedings of the Twenty-Fourth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 619-623, </pages> <address> Victoria, B.C., Canada, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: The lower limit for the space used by the algorithm is reached when = log n. With this value for , the algorithm uses space O (log 2 n) and time n O (log n) , similar to Savitch's space and time bounds [Sav70]. Recent work by Nisan <ref> [Nis92] </ref> has shown that polynomial time and O (log 2 n) space are simultaneously achievable, but his algorithm has a very high polynomial running time | he estimates O (n 45 ). <p> First, Nisan <ref> [Nis92] </ref> showed that ustcon was in simultaneous 58 polynomial time and O (log 2 n) space by improving his earlier pseudorandom generator algorithm [Nis90]. More recently, Nisan et al. [NSW92] show how to solve ustcon in space O (log 1:5 n) and time O (n p log n ). <p> Ajtai and Fagin [AF90] show that stcon is harder than ustcon in symbolic logic, but their 60 result does not seem to translate into a computational complexity lower bound. The algorithms of Chapter 2, however, along with those of Nisan <ref> [Nis92] </ref>, and Nisan et al., seem to provide evidence that ustcon is an easier problem than stcon. <p> If the graph is directed, then the mistake is much more serious, since the walk may not be able to easily return to the proper path. Many of the small space algorithms for ustcon exploit the symmetry of undirected graphs by taking random or pseudorandom walks (see, for example, <ref> [AKL + 79, BKRU89, Nis90, Nis92, NSW92] </ref>). The other common way of exploiting the symmetry of the connectivity relation on undirected graphs is to contract the graph by grouping a set of connected vertices into one (see the algorithms of Chapter 2, and [NSW92]).
Reference: [NSW92] <author> N. Nisan, E. Szemeredi, and A. Wigderson. </author> <title> Undirected connectivity in O(log 1:5 n) space. </title> <booktitle> In 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <address> Pittsburgh, PA, </address> <month> October </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: First, Nisan [Nis92] showed that ustcon was in simultaneous 58 polynomial time and O (log 2 n) space by improving his earlier pseudorandom generator algorithm [Nis90]. More recently, Nisan et al. <ref> [NSW92] </ref> show how to solve ustcon in space O (log 1:5 n) and time O (n p log n ). <p> If the graph is directed, then the mistake is much more serious, since the walk may not be able to easily return to the proper path. Many of the small space algorithms for ustcon exploit the symmetry of undirected graphs by taking random or pseudorandom walks (see, for example, <ref> [AKL + 79, BKRU89, Nis90, Nis92, NSW92] </ref>). The other common way of exploiting the symmetry of the connectivity relation on undirected graphs is to contract the graph by grouping a set of connected vertices into one (see the algorithms of Chapter 2, and [NSW92]). <p> The other common way of exploiting the symmetry of the connectivity relation on undirected graphs is to contract the graph by grouping a set of connected vertices into one (see the algorithms of Chapter 2, and <ref> [NSW92] </ref>). In such a scheme, the symmetry is important, because every vertex in such a set is connected to every other vertex in the set. <p> The algorithm of Nisan et al. <ref> [NSW92] </ref> seems to suggest that a deterministic fi (log n) algorithm for undirected s-t connectivity is possible. One more insight in this area could settle the deterministic space complexity of ustcon.
Reference: [Pip80] <author> N. Pippenger. Pebbling. </author> <booktitle> In Proceedings of the Fifth IBM Symposium on Mathematical Foundations of Computer Science. </booktitle> <address> IBM Japan, </address> <month> May </month> <year> 1980. </year>
Reference-contexts: Let bbfs (v; b) denote this set, and define a full neighborhood to be one that contains b vertices. All our algorithms depend on repeatedly recomputing the neighborhoods of vertices; such recomputation is common when attempting to use a limited amount of space. (See <ref> [Pip80] </ref>, for example.) Using the bbfs routine, a few special cases can be eliminated with a little initial work. Begin by generating the neighborhoods of s and t. If they intersect, we are finished: s and t are connected. Next, check that both neighborhoods are full.
Reference: [Ruz] <author> W. L. </author> <title> Ruzzo. </title> <type> Personal Communication. </type>
Reference-contexts: The time bound of Broder et al.'s algorithm seems open to improvement | it probably should be O (mn log c n=s) for some constant c, instead of O (m 2 log c n=s) <ref> [Ruz] </ref>. More interesting would be time and space bounds for probabilistic algorithms for directed s-t connectivity. While randomness seems to help with ustcon, it is not clear that it helps to solve stcon.
Reference: [RV76] <author> R. C. Rivest and J. Vuillemin. </author> <title> On recognizing graph properties from adjacency matrices. </title> <journal> Theoretical Computer Science, </journal> <volume> 3(3) </volume> <pages> 371-384, </pages> <month> De-cember </month> <year> 1976. </year>
Reference: [Sav70] <author> W. J. Savitch. </author> <title> Relationships between nondeterministic and deterministic tape complexities. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: When the recursive algorithm is taken to extremes, its time and space bounds resemble those for Savitch's result <ref> [Sav70] </ref>. The lower limit for the space used by the algorithm is reached when = log n. With this value for , the algorithm uses space O (log 2 n) and time n O (log n) , similar to Savitch's space and time bounds [Sav70]. <p> bounds resemble those for Savitch's result <ref> [Sav70] </ref>. The lower limit for the space used by the algorithm is reached when = log n. With this value for , the algorithm uses space O (log 2 n) and time n O (log n) , similar to Savitch's space and time bounds [Sav70]. Recent work by Nisan [Nis92] has shown that polynomial time and O (log 2 n) space are simultaneously achievable, but his algorithm has a very high polynomial running time | he estimates O (n 45 ).
Reference: [ST] <author> R. Sinha and M. Tompa. </author> <type> Personal Communication. </type>
Reference-contexts: The set of vertices is found using the original pseudorandom generator of Nisan [Nis90] 4.2.1 A Variation of the O (log 1:5 n) Space Algorithm Karger et al. [KNP92] and Sinha and Tompa <ref> [ST] </ref> show that the resemblance between Nisan et al.'s O (log 1:5 n) space algorithm and the recursive algorithm of Section 2.3 is more than superficial.
Reference: [Sze88] <author> R. Szelepcsenyi. </author> <title> The method of forcing for nondeterministic automata. </title> <journal> Acta Informatica, </journal> <volume> 26 </volume> <pages> 279-284, </pages> <year> 1988. </year>
Reference-contexts: are written on a one-way, write-only query tape that is erased when a query is answered. 17 For our purposes, many-one and Turing reductions are almost always equivalent, since most of our reductions will deal with languages in NL, and Immerman's and Szelepcsenyi's proofs that NL is closed under complementation <ref> [Imm88, Sze88] </ref> imply that NL is also closed under logspace Turing reductions. Still, for simplicity, we will try to use many-one reductions whenever possible. Unless otherwise specified, for the rest of this thesis, logspace reducibility will mean logspace many-one reducibility. <p> This proves that the shortest path is of length k or less. Then, check that there is no path from s 0 to t k1 in the layered graph using the NL s-t nonconnectivity algorithm of Immerman or Szelepcsenyi <ref> [Imm88, Sze88] </ref>. This proves that the shortest path is not of length k 1 or less.
Reference: [Tar75] <author> R. E. Tarjan. </author> <title> On the efficiency of a good but not linear set merging algorithm. </title> <journal> Journal of the ACM, </journal> <volume> 22(2) </volume> <pages> 215-225, </pages> <year> 1975. </year>
Reference-contexts: The sets can be manipulated efficiently using Union-Find subroutines; although it does not improve the asymptotic running time of the algorithm, we will use the very fast version of the Union-Find subroutines with weighted union and path compression <ref> [Tar75] </ref>. We will call these sets union-find sets. Begin by constructing a singleton set containing each landmark, plus an extra set containing the special value, "small". For all the edges e = fu; vg, perform a Union on Find (cl (u)) and Find (cl (v)). <p> The loop to find the landmarks in Figure 2.1 takes time O (b 2 ln log b), using O (b+l) registers. The Union-Find operations take time O (mff (m)) <ref> [Tar75] </ref> and use O (l) registers. The cl routine is called 2m times, each call taking time O (b 2 l log b), so connecting the union-find sets and finding the landmark set dominates the algorithm's running time, taking time O (b 2 l (m + n) log b).
Reference: [Tom82] <author> M. Tompa. </author> <title> Two familiar transitive closure algorithms which admit no polynomial time, sublinear space implementations. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(1) </volume> <pages> 130-137, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: Berman and Simon [BS83] extend this result to give a similar lower bound on a randomized version of the JAG. Beame et al. [BBR + 90] give time-space lower bounds for ustcon on more restricted versions of the JAG model. Finally, Tompa <ref> [Tom82] </ref> shows that for certain natural approaches to solving stcon, performance degrades sharply with decreasing space: space o (n) implies superpolynomial time, and space n 1* for fixed * &gt; 0 implies time n (log n) , essentially as slow as Savitch's algorithm.
Reference: [Tom90] <author> M. Tompa. </author> <title> Lower bounds on universal traversal sequences for cycles and higher degree graphs. </title> <type> Technical Report 90-07-02, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> July </month> <year> 1990. </year> <note> To appear in SIAM Journal on Computing. </note>
References-found: 45

