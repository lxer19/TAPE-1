URL: ftp://ftp.cc.gatech.edu/pub/coc/tech_reports/1995/GIT-CC-95-09.ps.Z
Refering-URL: http://www.cs.gatech.edu/tech_reports/index.95.html
Root-URL: 
Title: System Support for Robust, Collaborative Applications  
Author: Muthusamy Chelliah Mustaque Ahamad 
Keyword: Key Words: Atomicity, Groupware, Extended Transaction Models, Programming Support, Operating Systems.  
Address: Atlanta, Georgia 30332-0280 USA  
Affiliation: College of Computing Georgia Institute of Technology  
Email: (chelliah,mustaq@cc.gatech.edu)  
Phone: Phone: (404) 894-2593  
Web: GIT-CC-95-09  
Abstract: Traditional transaction models ensure robustness for distributed applications through the properties of view and failure atomicity. It has generally been felt that such atomicity properties are restrictive for a wide range of application domains; this is particularly true for robust, collaborative applications because such applications have concurrent components that are inherently long-lived and that cooperate. Recent advances in extended transaction models can be exploited to structure long-lived and cooperative computations. Applications can use a combination of such models to achieve the desired degree of robustness; hence, we develop a system which can support a number of flexible transaction models, with correctness semantics that extend or relax serializability. We analyze two concrete CSCW applications collaborative editor and meeting scheduler. We show how a combination of two extended transaction models, that promote split and cooperating actions, facilitates robust implementations of these collaborative applications. Thus, we conclude that a system that implements multiple transaction models provides flexible support for building robust, collaborative applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Badrinath and K. Ramamritham. </author> <title> Semantics-based concurrency control: beyond commu-tativity. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(1) </volume> <pages> 163-99, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Also, a parent transaction might force its siblings to wait longer for accessing its children's resources. Moreover, the hierarchical structuring does not promote cooperation among the atomic subactions. Atomic transactions alternatively can exploit opearation semantics associated with the data items <ref> [28, 31, 1] </ref> for enhanced concurrency and hence improved performance. All transactions invoking the particular object methods can cooperate using this technique.
Reference: [2] <author> D. Beard et al. </author> <title> A Visual Calendar for Scheduling Group Meetings. </title> <booktitle> In Proceedings of the Conf. on Computer-Supported Cooperative Work. ACM, </booktitle> <year> 1990. </year>
Reference-contexts: Outline generators (e.g., Cog-noter [12]), coauthoring tools (e.g., Quilt [11]), and meeting schedulers (e.g., Visual Calendar <ref> [2] </ref>) are concrete instances of applications that constitute the broad domain of Computer-Supported Cooperative Work (CSCW). Collaborative applications have several unique characteristics: users in these applications operate on persistent data for long durations, and there is cooperation due to interleaved resource sharing among different users.
Reference: [3] <author> A. Biliris et al. </author> <title> ASSET: A system for supporting extended transactions. </title> <booktitle> In 1994 ACM SIGMOD International Conference on Management of Data. ACM, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: We exploit these models to structure long-lived and cooperative computations common in such applications. We already have a proof-of-concept prototype system for implementing multiple transaction models 7 on the same software platform [6]. Low-level mechanisms that support many transaction models have been investigated in other systems like ASSET <ref> [3] </ref> and TSME [15]; however, they focus on advanced database applications and not on distributed applications from the CSCW domain. In summary, we employ a combination of extended transaction models to address the limitations of flat and nested atomic transactions.
Reference: [4] <author> K. Birman. </author> <title> Integrating runtime consistency models for distributed computing. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 23(2), </volume> <month> November </month> <year> 1994. </year>
Reference-contexts: This is mainly because of the orthogonality of the underlying correctness criteria virtual synchrony vs. serializability and failure atomicity <ref> [4] </ref>. 6 Our basic premise is that atomic transactions, a powerful abstraction that ensures consistency of a sequence of accesses to persistent data items, simplifies the structuring of robust computations.
Reference: [5] <author> K. Birman and T. Joseph. </author> <title> Exploiting Virtual Synchrony in Distributed Systems. </title> <booktitle> In Proceedings of the 11th Symposium On Operating System Principles, </booktitle> <pages> pages 123-137. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1987. </year>
Reference-contexts: However, the burden of validating the resulting executions then lies on the application programmers. We next explore several systematic approaches with well-defined, but flexible, consistency semantics that could provide a unifying paradigm for robust collaboration. DistEdit [19] a group editor uses the Isis toolkit <ref> [5] </ref> which supports process groups and associated broadcast protocols that update the state encapsulated by processes corresponding to different users. Failure notification and message ordering guarantees provided by the Isis system can ensure consistency of information shared among the users.
Reference: [6] <author> M. Chelliah and M. Ahamad. </author> <title> System Mechanisms for Distributed Object-Based Fault-Tolerant Computing. </title> <type> Technical Report GIT-CC-92/23, </type> <institution> Georgia Tech., </institution> <year> 1992. </year> <note> An abridged version of this paper appeared in the 1994 IEEE Workshop on Fault-Tolerant Parallel and Distributed Systems. </note>
Reference-contexts: We exploit these models to structure long-lived and cooperative computations common in such applications. We already have a proof-of-concept prototype system for implementing multiple transaction models 7 on the same software platform <ref> [6] </ref>. Low-level mechanisms that support many transaction models have been investigated in other systems like ASSET [3] and TSME [15]; however, they focus on advanced database applications and not on distributed applications from the CSCW domain. <p> These operation can be built on top of virtual memory and file system support provided by the Unix operating system. Light-weight recoverable virtual memory [27] is one instance of such a recovery manager. We have however implemented this functionality at the OS level <ref> [6] </ref> since it was more natural to do so in the context of our testbed, the Clouds operating system. We next show how these mechanisms simplify implementing multiple transaction models. 6.1 Recovery Control To deal with failures, we allow segments to have multiple versions.
Reference: [7] <author> M. Chelliah and M. Ahamad. </author> <title> Multi-model Fault-tolerant Programming in Distributed Object-Based Systems. </title> <type> Technical Report GIT-CC-93/78, </type> <institution> Georgia Tech., </institution> <year> 1993. </year> <month> 20 </month>
Reference-contexts: An application programmer has to specify just the extended transaction model that dictates the particular resource access, not the system calls that manipulate the data items and synchronization variables. The run-time library and preprocessor support for implementing many extended transaction models we have proposed earlier <ref> [7] </ref> thus simplify the programmer's task by making the underlying system primitives for recovery and concurrency control transparent. We assume that the object RobustObj, as shown in Figure 4, has data segments CoopSeg, DepSeg and IndepSeg protected by the synchronizers CoopSync, DepSync and IndepSync respectively.
Reference: [8] <author> R. S. Chin and S. T. Chanson. </author> <title> Distributed Object-based Programming Systems. </title> <journal> ACM Com--puting Surveys, </journal> <volume> 3(1) </volume> <pages> 91-124, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: We only add a few additional operations or enhance the semantics of a few existing ones. Objects provide an attractive structuring paradigm in system and application software, particularly in a distributed environment <ref> [8] </ref>. For implementing extended transaction models, we assume a system in which a thread corresponds to a computation structured using a transaction, and objects encapsulate passive data and code. Objects are made of a lower level abstraction called segment.
Reference: [9] <author> A. Elmagarmid. </author> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan-Kaufmann Publishing Company, </publisher> <year> 1992. </year>
Reference-contexts: Failure atomicity, also provided by atomic transactions, prohibits early committal of changes even to select data items thereby making the changes vulnerable to failures in long-running computations. We address these limitations of atomic transactions by exploiting the recent advances in extended transaction models <ref> [9] </ref>. Specifically we show that two such models, that promote split [26] and cooperating [13] transactions, can be used to program robust CSCW applications. <p> It is however not suitable for applications where such object methods cannot be statically determined and dynamic sharing of resources among only a few transactions, representing select users, is desired. We narrow down our search, for techniques that support robust collaboration, to extended transaction models <ref> [9] </ref>, because such models extend and/or relax the serializability correctness criterion selectively at run-time. The models were developed by database researchers to address the needs of advanced engineering applications such as CAD and software development.
Reference: [10] <author> K. Eswaran et al. </author> <title> The Notion of Consistency and Predicate Locks in a Database System. </title> <journal> Communications of the ACM, </journal> <month> November </month> <year> 1976. </year>
Reference-contexts: Persistent data manipulated by distributed applications necessitates support for robustness to maintain consistency despite partial failures and concurrency inherent in a distributed system. Several distributed systems provide transactional facilities for building robust applications. Flat <ref> [10] </ref> and nested [24] atomic transactions ensure failure atomicity (either all or none of a transaction's changes to data items persist despite failures), and view atomicity (concurrent access to common data items by different transactions are made to appear serial). <p> guard against concurrent access of compromise slots by competing coordinators between two phases. 2.3 Requirements of Robust Collaboration From the preceding discussion, we conclude that robustness guarantees, primarily facilitated by atomic transactions of course, are desirable in collaborative applications; however, the following extensions and relaxation, of the serializability correctness criterion <ref> [10] </ref>, can be beneficial: 5 1. enhancing concurrency through early committal of select data items and releasing the asso- ciated locks, 2. reducing loss of data due to failures through periodic checkpoints of a subset of accessed data items, 3. providing flexible functionality whereby interleaved resource sharing (cooperation) is feasible among
Reference: [11] <editor> R.S. Fish et al. </editor> <title> Collaborative document production using quilt. </title> <booktitle> In Proceedings of the Conf. Computer-Supported Cooperative Work. ACM, </booktitle> <year> 1988. </year>
Reference-contexts: 1 Introduction Distributed computing systems are increasingly being used to support interactions between users that go beyond file sharing and electronic mail, e.g., collaborative editors allow users distributed across many nodes to concurrently work on shared documents. Outline generators (e.g., Cog-noter [12]), coauthoring tools (e.g., Quilt <ref> [11] </ref>), and meeting schedulers (e.g., Visual Calendar [2]) are concrete instances of applications that constitute the broad domain of Computer-Supported Cooperative Work (CSCW).
Reference: [12] <author> G. Foster and M. Stefik. Cognoter, </author> <title> theory and practice of a collaborative tool. </title> <booktitle> In Proceedings of Computer-Supported Cooperative Work. ACM, </booktitle> <year> 1986. </year>
Reference-contexts: 1 Introduction Distributed computing systems are increasingly being used to support interactions between users that go beyond file sharing and electronic mail, e.g., collaborative editors allow users distributed across many nodes to concurrently work on shared documents. Outline generators (e.g., Cog-noter <ref> [12] </ref>), coauthoring tools (e.g., Quilt [11]), and meeting schedulers (e.g., Visual Calendar [2]) are concrete instances of applications that constitute the broad domain of Computer-Supported Cooperative Work (CSCW).
Reference: [13] <author> H. Garcia-Molina. </author> <title> Using Semantic Knowledge for Transaction Processing Databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(2) </volume> <pages> 186-213, </pages> <month> March </month> <year> 1983. </year>
Reference-contexts: We address these limitations of atomic transactions by exploiting the recent advances in extended transaction models [9]. Specifically we show that two such models, that promote split [26] and cooperating <ref> [13] </ref> transactions, can be used to program robust CSCW applications. <p> However we prefer a set of simple models because they can be implemented efficiently using existing system mechanisms and an application can choose a combination of such models to avoid the specific limitations associated with atomic transactions. We have found that a combination of split [26] and cooperating <ref> [13] </ref> transaction models readily match the requirements of robust collaborative applications that were identified earlier. We exploit these models to structure long-lived and cooperative computations common in such applications. We already have a proof-of-concept prototype system for implementing multiple transaction models 7 on the same software platform [6]. <p> We describe in a generic fashion how the robust collaboration requirements are met through extensions and relaxation to the serializability correctness criterion, allowed by split [26] and cooperating <ref> [13] </ref> transactions respectively, without violating application-specific data consistency. In the next section, we illustrate these desirable features by showing how concrete examples from groupware exploit the multiple transaction models. <p> The need for this execution behaviour, that allows violations to concurrency atomicity but not failure atomicity, was first identified by Garcia Molina who introduced cooperating transactions <ref> [13] </ref>.
Reference: [14] <author> H. Garcia-molina and K. Salem. SAGAS. </author> <booktitle> In Proceedings of the SIGMOD Intl. Conf. On Management Of Data. ACM, </booktitle> <year> 1987. </year>
Reference-contexts: If a cooperating transaction T 2 belonging to a group member reads another's (T 1 ) results, but does not use the results for further modifications, none of the cooperating computations need to be aborted. If uncommitted results do lead to further modifications, compensating transactions <ref> [14] </ref> could avoid cascading aborts.
Reference: [15] <author> D. Georgakopoulos, M. Hornick, P. Krychniak, and F. Manola. </author> <title> Specification and management of extended transactions in a Programmable Transaction Environment. </title> <booktitle> In Proceedings of the 10th International Conference on Data Engineering. IEEE, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: We already have a proof-of-concept prototype system for implementing multiple transaction models 7 on the same software platform [6]. Low-level mechanisms that support many transaction models have been investigated in other systems like ASSET [3] and TSME <ref> [15] </ref>; however, they focus on advanced database applications and not on distributed applications from the CSCW domain. In summary, we employ a combination of extended transaction models to address the limitations of flat and nested atomic transactions.
Reference: [16] <author> I. Greif and S. Sarin. </author> <title> Data Sharing in Group Work. </title> <journal> ACM Transactions On Office Information Systems, </journal> <month> April </month> <year> 1987. </year>
Reference-contexts: Low-level mechanisms used directly for flexible concurrency control in collaborative applications, like triggers, reservations and tickle locks, have been surveyed by Greif and Sarin <ref> [16] </ref>. Many systems that facilitate non-serializable executions, e.g., Locus [32], Profemo [22], Nexus [30] and Arjuna [29], provide mechanisms that relax the atomic transaction model in certain ways. However, none of these systems support a variety of user-level facilities that help realize robust, collaborative applications easily and flexibly.
Reference: [17] <author> I. Greif, R. Seliger, and W. Weihl. </author> <title> A Case Study of CES: A Distributed Collaborative Editing System Implemented In Argus. </title> <journal> IEEE Transactions On Software Engineering, </journal> <month> September </month> <year> 1992. </year>
Reference-contexts: The atomicity properties are necessary for traditional databases, however not well-suited for robust, collaborative applications. In fact, it was demonstrated that the Argus system [23], which supported nested transactions, could not effectively be used to program a robust version of a CSCW tool the Collaborative Editing System (CES) <ref> [17] </ref>. In this paper, we explore the restrictions associated with atomic transactions not only for collaborative editing, but also for other CSCW applications.
Reference: [18] <author> G. Kaiser. </author> <title> A Flexible Transaction Model for Software Engineering. </title> <booktitle> In Proceedings of the Intl. Conf. on Data Engineering, </booktitle> <year> 1990. </year>
Reference-contexts: The models were developed by database researchers to address the needs of advanced engineering applications such as CAD and software development. Composite models that combine the desirable features from many simpler models are now being proposed, e.g., Cooperative Transaction Hierarchies [25], NT/PV model [21], and Flexible Transaction Model <ref> [18] </ref>. Generalized correctness semantics advocated by such models could very well accommodate the requirements of robust collaboration.
Reference: [19] <author> M.J. Knister and A. Prakash. Distedit: </author> <title> A distributed toolkit for supporting multiple group editors. </title> <booktitle> In Proceedings of the Conference on CSCW. ACM, </booktitle> <year> 1990. </year>
Reference-contexts: However, the burden of validating the resulting executions then lies on the application programmers. We next explore several systematic approaches with well-defined, but flexible, consistency semantics that could provide a unifying paradigm for robust collaboration. DistEdit <ref> [19] </ref> a group editor uses the Isis toolkit [5] which supports process groups and associated broadcast protocols that update the state encapsulated by processes corresponding to different users. Failure notification and message ordering guarantees provided by the Isis system can ensure consistency of information shared among the users.
Reference: [20] <author> H. Korth, E. Levy, and A. Silberschatz. </author> <title> A Formal Approach to Recovery by Compensating Transactions. </title> <booktitle> In Proceedings of the 16th Conference on VLDB, </booktitle> <year> 1990. </year>
Reference-contexts: The need for this execution behaviour, that allows violations to concurrency atomicity but not failure atomicity, was first identified by Garcia Molina who introduced cooperating transactions [13]. The following restrictions are enforced on such seemingly non-recoverable schedules that permit accesses to uncommitted data and still avoid cascading aborts <ref> [20] </ref>: 1. only those reads which do not affect any further writes are allowed, 2. only writes into disjoint fragments of data items which do not change the previous uncom mitted writes are permitted. 10 Thus cooperating transactions permit interleaved resource sharing between computations like those encapsulated by T 1 and
Reference: [21] <author> H. Korth and G. Speegle. </author> <title> Formal Model of Correctness without Serializability. </title> <booktitle> In Proceedings of the SIGMOD Intl. Conf. on Management of Data. ACM, </booktitle> <year> 1988. </year>
Reference-contexts: The models were developed by database researchers to address the needs of advanced engineering applications such as CAD and software development. Composite models that combine the desirable features from many simpler models are now being proposed, e.g., Cooperative Transaction Hierarchies [25], NT/PV model <ref> [21] </ref>, and Flexible Transaction Model [18]. Generalized correctness semantics advocated by such models could very well accommodate the requirements of robust collaboration.
Reference: [22] <author> R. Kroeger et al. </author> <title> RelaX An Extensible Architecture Supporting Reliable Distributed Applications. </title> <booktitle> In Proceedings of the 9th Symposium On Reliable Distributed Systems. IEEE, </booktitle> <year> 1990. </year>
Reference-contexts: Low-level mechanisms used directly for flexible concurrency control in collaborative applications, like triggers, reservations and tickle locks, have been surveyed by Greif and Sarin [16]. Many systems that facilitate non-serializable executions, e.g., Locus [32], Profemo <ref> [22] </ref>, Nexus [30] and Arjuna [29], provide mechanisms that relax the atomic transaction model in certain ways. However, none of these systems support a variety of user-level facilities that help realize robust, collaborative applications easily and flexibly.
Reference: [23] <author> B. Liskov et al. </author> <title> Implementation of Argus. </title> <booktitle> In Proceedings of the 11th Symposium On Operating Systems Principles, </booktitle> <pages> pages 111-22. </pages> <publisher> ACM, </publisher> <year> 1987. </year>
Reference-contexts: The atomicity properties are necessary for traditional databases, however not well-suited for robust, collaborative applications. In fact, it was demonstrated that the Argus system <ref> [23] </ref>, which supported nested transactions, could not effectively be used to program a robust version of a CSCW tool the Collaborative Editing System (CES) [17]. In this paper, we explore the restrictions associated with atomic transactions not only for collaborative editing, but also for other CSCW applications.
Reference: [24] <author> E. Moss. </author> <title> Nested Transactions: An Approach to Reliable Distributed Computing. </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: Persistent data manipulated by distributed applications necessitates support for robustness to maintain consistency despite partial failures and concurrency inherent in a distributed system. Several distributed systems provide transactional facilities for building robust applications. Flat [10] and nested <ref> [24] </ref> atomic transactions ensure failure atomicity (either all or none of a transaction's changes to data items persist despite failures), and view atomicity (concurrent access to common data items by different transactions are made to appear serial). <p> Simple extensions of the atomic transaction model like nesting and type-specific concurrency control do not address all the problems associated with the basic model. We first discuss these techniques and then outline our approach for robust collaboration. Nesting of atomic transactions <ref> [24] </ref> localizes failures by making the ancestor transactions responsible for the permanence of data items manipulated by their descendants. This technique protects a transaction from its children's failure, but a child transaction's changes are vulnerable to the parent's failure.
Reference: [25] <author> M. Nodine and S. Zdonik. </author> <title> Cooperative Transaction Hierarchies: A Transaction Model to Support Design Applications. </title> <booktitle> In Proceedings of the 16th Conference on VLDB. IEEE, </booktitle> <year> 1990. </year>
Reference-contexts: The models were developed by database researchers to address the needs of advanced engineering applications such as CAD and software development. Composite models that combine the desirable features from many simpler models are now being proposed, e.g., Cooperative Transaction Hierarchies <ref> [25] </ref>, NT/PV model [21], and Flexible Transaction Model [18]. Generalized correctness semantics advocated by such models could very well accommodate the requirements of robust collaboration.
Reference: [26] <author> C. Pu and G. Kaiser. </author> <title> Split-Transactions for Open-Ended Activities. </title> <booktitle> In Proceedings of the 14th Conference on VLDB. IEEE, </booktitle> <month> September </month> <year> 1988. </year>
Reference-contexts: We address these limitations of atomic transactions by exploiting the recent advances in extended transaction models [9]. Specifically we show that two such models, that promote split <ref> [26] </ref> and cooperating [13] transactions, can be used to program robust CSCW applications. <p> However we prefer a set of simple models because they can be implemented efficiently using existing system mechanisms and an application can choose a combination of such models to avoid the specific limitations associated with atomic transactions. We have found that a combination of split <ref> [26] </ref> and cooperating [13] transaction models readily match the requirements of robust collaborative applications that were identified earlier. We exploit these models to structure long-lived and cooperative computations common in such applications. <p> We describe in a generic fashion how the robust collaboration requirements are met through extensions and relaxation to the serializability correctness criterion, allowed by split <ref> [26] </ref> and cooperating [13] transactions respectively, without violating application-specific data consistency. In the next section, we illustrate these desirable features by showing how concrete examples from groupware exploit the multiple transaction models.
Reference: [27] <author> M. Satyanarayanan. </author> <title> Light-Weight Recoverable Virtual Memory. </title> <booktitle> In Proceedings of the 14th Symposium On Operating System Principles. ACM, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: We describe below the primitive operations for segments and synchronizers which can be used to implement multiple transaction models. These operation can be built on top of virtual memory and file system support provided by the Unix operating system. Light-weight recoverable virtual memory <ref> [27] </ref> is one instance of such a recovery manager. We have however implemented this functionality at the OS level [6] since it was more natural to do so in the context of our testbed, the Clouds operating system.
Reference: [28] <author> P.M. Schwarz and A.Z. Spector. </author> <title> Synchronizing Shared Abstract Types. </title> <journal> ACM Transactions On Computer Systems, </journal> <month> August </month> <year> 1984. </year>
Reference-contexts: Also, a parent transaction might force its siblings to wait longer for accessing its children's resources. Moreover, the hierarchical structuring does not promote cooperation among the atomic subactions. Atomic transactions alternatively can exploit opearation semantics associated with the data items <ref> [28, 31, 1] </ref> for enhanced concurrency and hence improved performance. All transactions invoking the particular object methods can cooperate using this technique.
Reference: [29] <author> S.K. Shrivastava and S. Wheater. </author> <title> Implementing Fault-tolerant Distributed Applications Using Objects and Multi-coloured Actions. </title> <booktitle> In Proceedings of the 10th Intl. Conf. on Distributed Computing Systems. IEEE, </booktitle> <month> March </month> <year> 1990. </year>
Reference-contexts: Low-level mechanisms used directly for flexible concurrency control in collaborative applications, like triggers, reservations and tickle locks, have been surveyed by Greif and Sarin [16]. Many systems that facilitate non-serializable executions, e.g., Locus [32], Profemo [22], Nexus [30] and Arjuna <ref> [29] </ref>, provide mechanisms that relax the atomic transaction model in certain ways. However, none of these systems support a variety of user-level facilities that help realize robust, collaborative applications easily and flexibly.
Reference: [30] <author> A. Tripathi. </author> <title> An Overview of the Nexus Distributed Operating system Design. </title> <journal> IEEE Transactions On Software Engineering, </journal> <month> June </month> <year> 1989. </year>
Reference-contexts: Low-level mechanisms used directly for flexible concurrency control in collaborative applications, like triggers, reservations and tickle locks, have been surveyed by Greif and Sarin [16]. Many systems that facilitate non-serializable executions, e.g., Locus [32], Profemo [22], Nexus <ref> [30] </ref> and Arjuna [29], provide mechanisms that relax the atomic transaction model in certain ways. However, none of these systems support a variety of user-level facilities that help realize robust, collaborative applications easily and flexibly.
Reference: [31] <author> W. Weihl. </author> <title> Specification and Implementation of Resilient Atomic Data Types. </title> <type> Technical Report MIT/LCS/TR-314, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1984. </year>
Reference-contexts: Also, a parent transaction might force its siblings to wait longer for accessing its children's resources. Moreover, the hierarchical structuring does not promote cooperation among the atomic subactions. Atomic transactions alternatively can exploit opearation semantics associated with the data items <ref> [28, 31, 1] </ref> for enhanced concurrency and hence improved performance. All transactions invoking the particular object methods can cooperate using this technique.
Reference: [32] <author> M. Weinstein et al. </author> <title> Transactions and Synchronization in a Distributed Operating System. </title> <booktitle> In Proceedings of the 10th Symposium on Operating System Principles. ACM, </booktitle> <month> October </month> <year> 1985. </year> <month> 22 </month>
Reference-contexts: Low-level mechanisms used directly for flexible concurrency control in collaborative applications, like triggers, reservations and tickle locks, have been surveyed by Greif and Sarin [16]. Many systems that facilitate non-serializable executions, e.g., Locus <ref> [32] </ref>, Profemo [22], Nexus [30] and Arjuna [29], provide mechanisms that relax the atomic transaction model in certain ways. However, none of these systems support a variety of user-level facilities that help realize robust, collaborative applications easily and flexibly.
References-found: 32

