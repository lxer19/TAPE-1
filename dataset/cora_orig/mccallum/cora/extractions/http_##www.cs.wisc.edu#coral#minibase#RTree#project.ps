URL: http://www.cs.wisc.edu/coral/minibase/RTree/project.ps
Refering-URL: http://www.cs.wisc.edu/coral/minibase/RTree/
Root-URL: http://www.cs.wisc.edu
Title: R-tree Access Method for Minirel:  
Date: 13 May, 1995  
Pubnum: CS764 Project Report Armand Zakarian  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Guttman, A., "R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching," </title> <booktitle> Proc. 1984 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Boston, Mass. </address> <month> 9 </month>
Reference-contexts: 1 Introduction This report describes the implementation of an R-tree access method for Minirel|a small multiuser relational DBMS developed as a class project in CS764 "Advanced Topics in DBMS" at UW|Madison. An R-tree <ref> [1] </ref> is a dynamic tree used for indexing a collection of spatial objects. Every object is described by its covering rectangle (which I will call for brevity its box ). It is these boxes that serve the role of keys in the index. <p> The maximum number of entries that fit on a page is computed and together with the dimensionality d is written to the header page. Allowable range for d is <ref> [1; 6] </ref>. The value of m determines the minimum number of entries allowed on a page after a split. The default value 2 was found to work well in [1]. Status insert (const void *box, const RID recid) ; Inserts the entry ((Box)box, recid) in the index. <p> Allowable range for d is [1; 6]. The value of m determines the minimum number of entries allowed on a page after a split. The default value 2 was found to work well in <ref> [1] </ref>. Status insert (const void *box, const RID recid) ; Inserts the entry ((Box)box, recid) in the index. A check for inserting a duplicate entry is infeasible and is not performed. Status Delete (const void *box, const RID recid) ; Deletes the entry ((Box)box, recid) from the index. <p> At a leaf, an X mode lock is obtained and the new record is inserted and split_page () is invoked if necessary. The latter performs the Linear split algorithm according 5 to <ref> [1] </ref>. It first calls pick_seeds to identify two entries (seeds) whose boxes are farthest apart and then scans the original page and deletes entries that gravitate towards the first seed after inserting them in the split image. Entries that gravitate towards the second seed are simply skipped over. <p> I considered the delete operation of <ref> [1] </ref> to be too complicated especially in the context of an outgoing scan.
References-found: 1

