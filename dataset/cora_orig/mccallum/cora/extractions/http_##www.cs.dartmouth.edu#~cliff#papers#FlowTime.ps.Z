URL: http://www.cs.dartmouth.edu/~cliff/papers/FlowTime.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~cliff/papers/
Root-URL: http://www.cs.dartmouth.edu
Title: Optimal Time-Critical Scheduling Via Resource Augmentation (Extended Abstract)  
Author: Cynthia A. Phillips Cliff Stein Eric Torng Joel Wein Wells Hall, 
Address: College, Hanover, NH.  A-714  East Lansing, MI  
Affiliation: Department of Computer Science, Sudikoff Laboratory, Dartmouth  Department of Computer Science,  Michigan State University,  Department of Computer Science, Polytechnic University, Brooklyn, NY,  
Note: caphill@cs.sandia.gov. Sandia National Labs, Albuquerque, NM. This work was supported in part by the United States Department of Energy under Contract DE-AC04-94AL85000. cliff@cs.dartmouth.edu.  Research partially supported by NSF Award CCR-9308701 and NSF Career Award CCR-9624828. Some of this work was done while this author was visiting Stanford University, and while visiting the first author at Sandia National Laboratories. torng@cps.msu.edu.  48824-1027. Some preliminary work done while the author was a Stan-ford graduate student, supported by a DOD NDSEG Fellowship, NSF Grant CCR-9010517, Mitsubishi Corporation, and NSF YI Award CCR-9357849, with matching funds from IBM, Schlum-berger Foundation, Shell Foundation and Xerox Corporation. wein@mem.poly.edu.  11201. Research partially supported by NSF Research Initiation Award CCR-9211494, NSF Grant CCR-9626831, and a grant from the New York State Science and Technology Foundation, through its Center for Advanced Technology in Telecommunications.  
Abstract: We consider two fundamental problems in dynamic scheduling: scheduling to meet deadlines in a preemptive multiprocessor setting, and scheduling to provide good response time in a number of scheduling environments. When viewed from the perspective of traditional worst-case analysis, no good on-line algorithms exist for these problems, and for some variants no good off-line algorithms exist unless P = N P. We study these problems using a relaxed notion of competitive analysis, introduced by Kalyanasundaram and Pruhs, in which the on-line algorithm is allowed more resources than the optimal off-line algorithm to which it is compared. Using this approach, we establish that several well-known on-line algorithms, that have poor performance from an absolute worst-case perspective, are optimal for the problems in question when allowed moderately more resources. For the optimization of average flow time, these are the first results of any sort, for any N P-hard version of the problem, that indicate that it might be possible to design good approximation algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Chakrabarti, C. A. Phillips, A. S. Schulz, D. B. Shmoys, C. Stein, and J. Wein. </author> <title> Improved scheduling algorithms for minsum criteria. </title> <editor> In F. Meyer auf der Heide and B. Monien, editors, </editor> <booktitle> Automata, Languages and Programming, number 1099 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1996. </year> <booktitle> Proceedings of the 23rd International Colloquium (ICALP'96). </booktitle>
Reference-contexts: Recently there has been much progress in developing off-line approximation algorithms for the re lated N P-hard problem of minimizing P j w j C j via certain classes of linear programming relaxations <ref> [1, 9, 20] </ref>, but no non-trivial polynomial-time approximation algorithms are known for P w j F j . (Since P P P an optimal schedule for P w j C j is also an optimal sched ule for w j F j , but a -approximation for P a very poor
Reference: [2] <author> M. Dertouzos. </author> <title> Control robotics: the procedural control of physical processes. </title> <booktitle> In Proc. IFIF Congress, </booktitle> <pages> pages 807-813, </pages> <year> 1974. </year>
Reference-contexts: More specifically, for preemptive hard real-time scheduling, we analyze two simple and widely used on-line algorithms, earliest-deadline-first (EDF) <ref> [2] </ref> and least-laxity-first (LLF) [18]. <p> In the uniprocessor setting (m = 1), both EDF <ref> [2] </ref> and LLF [18] can schedule any feasible input instance. In the multiprocessor environment (m 2), no on-line algorithm legally schedules all feasible m-machine input instances [3]. Nonetheless, EDF and LLF are likely heuristic choices in practice with EDF being simpler to implement and LLF more effective in general.
Reference: [3] <author> M. Dertouzos and A. Mok. </author> <title> Multiprocessor on-line scheduling of hard-real-time tasks. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15 </volume> <pages> 1497-1506, </pages> <year> 1989. </year>
Reference-contexts: These problems have defied all previous (worst-case) analytic attempts to identify effective on-line algorithms for solving them. For example, Dertouzos and Mok proved that no on-line algorithm can legally schedule all feasible input instances of the hard-real-time scheduling problem for m 2 machines <ref> [3] </ref>. Furthermore, there is no obvious notion of an approximation algorithm 1 for this problem since all jobs must be completed. <p> In the uniprocessor setting (m = 1), both EDF [2] and LLF [18] can schedule any feasible input instance. In the multiprocessor environment (m 2), no on-line algorithm legally schedules all feasible m-machine input instances <ref> [3] </ref>. Nonetheless, EDF and LLF are likely heuristic choices in practice with EDF being simpler to implement and LLF more effective in general.
Reference: [4] <author> M. Goemans. </author> <title> A supermodular relaxation for scheduling with release dates. </title> <booktitle> In Proceedings of the 5th Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 288-300, </pages> <month> June </month> <year> 1996. </year> <note> Published as Lecture Notes in Computer Science 1084, Springer-Verlag. </note>
Reference-contexts: This means we may obtain an optimal solution to R in polynomial time by applying the greedy algorithm <ref> [4] </ref>; in fact, Goemans shows we can solve it in O (n log n) time.
Reference: [5] <author> M. Goemans. </author> <title> Improved approximation algorithms for scheduling with release dates. </title> <booktitle> In Proceedings of the 8th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 591-598, </pages> <year> 1997. </year>
Reference-contexts: This on-line algorithm performs identically to the off-line algorithm because the relative priorities of jobs that arrive before any time t are unaffected by the arrival of jobs after time t <ref> [5] </ref>. Theorem 4.3 Preemptively-Schedule-Halves-by-C j is an online 2-speed algorithm for scheduling preemptively to minimize P 5 On-line nonpreemptive scheduling In this section, we consider the significantly more difficult problem of nonpreemptive scheduling.
Reference: [6] <author> M. Goemans, J. Wein, and D. P. Williamson. </author> <title> Randomized algorithms for improved preemptive scheduling. </title> <note> Working paper, </note> <year> 1996. </year>
Reference-contexts: Hall et. al. [9] show that the solution to this relaxation can be used to produce a 2-approximation algorithm for P j w j C j ; this has been improved to a 1:466-approximation algorithm <ref> [6] </ref>. We show here that a similar approach yields a 2-speed algorithm for P j w j F j . We first present an off-line algorithm and then convert it into an on-line algorithm.
Reference: [7] <author> R.L. Graham. </author> <title> Bounds for certain multiprocessor anomalies. </title> <journal> Bell System Technical Journal, </journal> <volume> 45 </volume> <pages> 1563-1581, </pages> <year> 1966. </year>
Reference-contexts: When ff = 1, SRPT is a (2 1 m )-approximation algorithm which improves slightly a bound of 2 from [20]. Second, Lemma 2.3 can be viewed as a generalization of Graham's proof that List Scheduling is a (2 1 m )-approximation algorithm for minimizing the makespan <ref> [7] </ref>; it is an ff-speed (2 1 m )=ff-approximation algorithm. 3 On-line preemptive scheduling using more machines Another natural way in which to augment resources is to add extra machines of the same speed rather than increasing machine speed.
Reference: [8] <author> D. Gusfield. </author> <title> Bounds for naive multiple machine scheduling with release times and deadlines. </title> <journal> Journal of Algorithms, </journal> <volume> 5 </volume> <pages> 1-6, </pages> <year> 1984. </year>
Reference-contexts: When a job arrives, however, we assume that all other relevant information about the job is known; this model has been considered by many authors, e.g. <ref> [8, 9, 10, 22, 23] </ref>, and is a reasonable model of a number of settings from repair shops to timesharing on a supercomputer. (For example, in the latter setting, when one submits a job to a national supercomputer center, one must give an estimate of the job size.) We will analyze
Reference: [9] <author> L. A. Hall, A.S. Schulz, D. B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: Offline and on-line algorithms. </title> <note> To appear in Math of OR, </note> <year> 1996. </year>
Reference-contexts: When a job arrives, however, we assume that all other relevant information about the job is known; this model has been considered by many authors, e.g. <ref> [8, 9, 10, 22, 23] </ref>, and is a reasonable model of a number of settings from repair shops to timesharing on a supercomputer. (For example, in the latter setting, when one submits a job to a national supercomputer center, one must give an estimate of the job size.) We will analyze <p> Recently there has been much progress in developing off-line approximation algorithms for the re lated N P-hard problem of minimizing P j w j C j via certain classes of linear programming relaxations <ref> [1, 9, 20] </ref>, but no non-trivial polynomial-time approximation algorithms are known for P w j F j . (Since P P P an optimal schedule for P w j C j is also an optimal sched ule for w j F j , but a -approximation for P a very poor <p> P P P an optimal schedule for P w j C j is also an optimal sched ule for w j F j , but a -approximation for P a very poor approximation for P w j F j .) We show how to use the linear-programming relaxations considered by <ref> [9] </ref> to develop an (on-line) 2-speed algorithm for this problem. Nonpreemptive Models: We also consider the problem of scheduling nonpreemptively to minimize average weighted flow time in both the uniprocessor and multiprocessor settings. <p> Our approach will build upon the work of Hall et. al. <ref> [9] </ref> who recently showed that a variety of linear programming formulations can be used to give approximation algorithms to minimize the P jective. <p> This means we may obtain an optimal solution to R in polynomial time by applying the greedy algorithm [4]; in fact, Goemans shows we can solve it in O (n log n) time. Hall et. al. <ref> [9] </ref> show that the solution to this relaxation can be used to produce a 2-approximation algorithm for P j w j C j ; this has been improved to a 1:466-approximation algorithm [6].
Reference: [10] <author> J.A. Hoogeveen and A.P.A. Vestjens. </author> <title> Optimal on-line algorithms for single-machine scheduling. </title> <booktitle> In Proceedings of the 5th Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 404-414, </pages> <year> 1996. </year> <note> Published as Lecture Notes in Computer Science 1084, Springer-Verlag. </note>
Reference-contexts: When a job arrives, however, we assume that all other relevant information about the job is known; this model has been considered by many authors, e.g. <ref> [8, 9, 10, 22, 23] </ref>, and is a reasonable model of a number of settings from repair shops to timesharing on a supercomputer. (For example, in the latter setting, when one submits a job to a national supercomputer center, one must give an estimate of the job size.) We will analyze
Reference: [11] <author> B. Kalyanasundaram and K. Pruhs. </author> <title> Speed is as powerful as clairvoyance. </title> <booktitle> In Proceedings of the 36th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 214-221, </pages> <year> 1995. </year>
Reference-contexts: In this paper we give the first encouraging results that apply worst-case analysis to these two multiprocessor problems. We utilize a new method of analysis, introduced by Kalyanasundaram and Pruhs <ref> [11] </ref> (for one-processor scheduling) of comparing the performance of an on-line algorithm 1 There has been significant work in the area of best-effort real-time scheduling, in which one tries to maximize the total weight of the jobs scheduled by their deadlines, but this is not really an appropriate approximation for hard-real-time <p> In the nonpreemptive setting, we also show that simple greedy algorithms perform well for optimizing average flow time when given more machines. Many of our results for average flow time extend to average weighted flow time as well. While we analyze our algorithms using the metric introduced in <ref> [11] </ref>, our results differ from that work in two fundamental ways: * we consider the multiprocessor case, and * we almost always find schedules whose objective func tion value is optimal, rather than near-optimal. In addition, our results are in a somewhat different on-line model. <p> Previous Results: The only previous work on this mode of analysis of which we are aware is the work of Kalyanasun-daram and Pruhs who introduced it <ref> [11] </ref>. They studied the minimization of preemptive total flow time and best-effort firm-real-time scheduling. Their flow time work differs from ours in several important characteristics. They studied only the unweighted uniprocessor 2 setting where the algorithm has no knowledge of p j until job J j completes. <p> The key to the proof of both theorems is the following fundamental relationship between machine speed and total work done by any busy algorithm such as SRPT or EDF. We let A (j; t) denote the amount of processing algorithm A 2 In their extended abstract <ref> [11] </ref> they claim parallel machines results but have retracted this claim [12]. specifies for job J j by time t. For job set J let A (J; t) = P j2J A (j; t). <p> Combining this with the above release time relationship, we see that F 0 j = sF j for 1 j n, and the result follows. 2 Note the theorem holds for any scheduling model and leads to the following series of results. Corollary 6.2 The Balance algorithm <ref> [11] </ref> is an s-stretch s + s -approximation algorithm for minimizing average flow time on a single processor when execution times of jobs are unknown until they complete. In particular, the value s = 2 leads to a minimum approximation ratio of 4.
Reference: [12] <author> Bala Kalyanasundaram and K. Pruhs, </author> <year> 1996. </year> <type> Personal Communication. </type>
Reference-contexts: We let A (j; t) denote the amount of processing algorithm A 2 In their extended abstract [11] they claim parallel machines results but have retracted this claim <ref> [12] </ref>. specifies for job J j by time t. For job set J let A (J; t) = P j2J A (j; t). Lemma 2.3 Consider any input instance I, any time t, any m 1, and any 1 fi (2 1 m ).
Reference: [13] <author> H. Kellerer, T. Tautenhahn, and G. J. Woeginger. </author> <title> Ap-proximability and nonapproximability results for minimizing total flow time on a single machine. </title> <booktitle> In Proceedings of the 28th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 418-426, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Furthermore, there is no obvious notion of an approximation algorithm 1 for this problem since all jobs must be completed. For the various versions of the flow time problem, while approximations are acceptable, a variety of results <ref> [13, 16] </ref> show that no on-line algorithm can guarantee a reasonable approximation ratio. <p> Note that the simplest possible variant of this problem (off-line, uniprocessor, unweighted) is already a difficult problem with very strong nonapproximability results. In particular, Kellerer et al. <ref> [13] </ref> recently showed that there exists no polynomial-time o ( p n)-approximation algorithm for this problem unless P = N P, and Leonardi and Raz have given analogous hardness results for parallel machines [16]. Thus, traditional worst-case analysis has little to offer to practitioners. <p> We then offer some evidence that indicates it may be difficult to improve upon our results. A common method of analyzing the performance of a nonpreemptive algorithm is with respect to the optimal preemptive solution, which is an obvious lower bound <ref> [20, 13] </ref>. Let S p be the schedule with optimal flowtime in the preemptive m-machine setting for some instance I, and let S w be the schedule with optimal flowtime in the nonpreemptive, wm-machine set ting. <p> We now show the surprising result that there are input instances where the optimal nonpreemp-tive flow time on c machines is significantly worse than the optimal preemptive flow time on a single machine for any natural number c. This generalizes the result of <ref> [13] </ref>, who show that there exist input instances where the optimal non-preemptive flow time on a single machine may be fi (n 1=2 ) times greater than the optimal preemptive flow time on a single machine.
Reference: [14] <author> G. Koren, D. Shasha, and S.-C. Huang. Moca: </author> <title> A multiprocessor on-line competitive algorithm for real-time system scheduling. </title> <booktitle> In Proc. 14th Real-Time Systems Symposium, </booktitle> <pages> pages 172-181, </pages> <year> 1993. </year>
Reference-contexts: Ko-ren et al. showed that the best competitive ratio any on-line algorithm can achieve is lower bounded by ( 1 )m ( 1=m 1) where m is the number of machines and is the ratio between the weights of the most important and least important jobs in the input instance <ref> [14] </ref>. to the performance of an optimal off-line algorithm when the on-line algorithm is given extra resources.
Reference: [15] <author> J. Labetoulle, E.L. Lawler, J.K. Lenstra, and A.H.G. Rinooy Kan. </author> <title> Preemptive scheduling of uniform machines subject to release dates. </title> <editor> In W.R. Pulleyblank, editor, </editor> <booktitle> Progress in Combinatorial Optimization, </booktitle> <pages> pages 245-261. </pages> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: This weighted variant reflects the fact that in many settings, the jobs to be scheduled have different priorities. In con trast to the unweighted problem, scheduling preemptively on a single machine to optimize average weighted flow time is N P-hard <ref> [15] </ref>.
Reference: [16] <author> S. Leonardi and D. Raz. </author> <title> Approximating total flow time on parallel machines. </title> <booktitle> In Proceedings of the 29th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1997. </year> <note> Appears in this Conference Proceedings. </note>
Reference-contexts: Furthermore, there is no obvious notion of an approximation algorithm 1 for this problem since all jobs must be completed. For the various versions of the flow time problem, while approximations are acceptable, a variety of results <ref> [13, 16] </ref> show that no on-line algorithm can guarantee a reasonable approximation ratio. <p> In the uniprocessor setting (m = 1), SRPT is optimal. In the multiprocessor setting (m 2), however, SRPT is only an O (log m)-approximation <ref> [16] </ref>. Furthermore, Leonardi and Raz have shown that no randomized on-line algorithm can be any better than an (log m)- approximation algorithm [16]. In contrast, we show that SRPT is a (2 1 m )-speed algorithm. Thus, we provide encouraging theoretical evidence to support the use of SRPT in practice. <p> In the uniprocessor setting (m = 1), SRPT is optimal. In the multiprocessor setting (m 2), however, SRPT is only an O (log m)-approximation <ref> [16] </ref>. Furthermore, Leonardi and Raz have shown that no randomized on-line algorithm can be any better than an (log m)- approximation algorithm [16]. In contrast, we show that SRPT is a (2 1 m )-speed algorithm. Thus, we provide encouraging theoretical evidence to support the use of SRPT in practice. We also show that no (1 + *)-speed algorithm exists for this problem for * &lt; 1=21 for m 2. <p> In particular, Kellerer et al. [13] recently showed that there exists no polynomial-time o ( p n)-approximation algorithm for this problem unless P = N P, and Leonardi and Raz have given analogous hardness results for parallel machines <ref> [16] </ref>. Thus, traditional worst-case analysis has little to offer to practitioners. In sharp contrast to these results, we give an O (log )-machine algorithm and an O (log n)-machine (1+o (1))-approximation algorithm for the on-line minimization of total weighted flowtime on parallel machines.
Reference: [17] <author> J. Leung. </author> <title> A new algorithm for scheduling periodic, real-time tasks. </title> <journal> Algorithmica, </journal> <volume> 4 </volume> <pages> 209-219, </pages> <year> 1989. </year>
Reference-contexts: Thus, by the principle of induction, EDF is a speed (21=m) algorithm. The fact that LLF is a speed-(21=m) algorithm follows from Leung's result that LLF can legally schedule any instance EDF can legally schedule given the same number of processors with identical capabilities <ref> [17] </ref>. 2 We observe that Theorem 2.2 is tight as we can show that both EDF and LLF are not speed 2 1 m * algorithms for any * &gt; 0. This raises the question of whether there are algorithms which are c-speed algorithms for some c &lt; 2.
Reference: [18] <author> A. Mok. </author> <title> Task scheduling in the control robotics environment. </title> <type> Technical Report TM-77, </type> <institution> Laboratory of Computer Science, Massachusetts Institute of Technology, </institution> <year> 1976. </year>
Reference-contexts: More specifically, for preemptive hard real-time scheduling, we analyze two simple and widely used on-line algorithms, earliest-deadline-first (EDF) [2] and least-laxity-first (LLF) <ref> [18] </ref>. <p> In the uniprocessor setting (m = 1), both EDF [2] and LLF <ref> [18] </ref> can schedule any feasible input instance. In the multiprocessor environment (m 2), no on-line algorithm legally schedules all feasible m-machine input instances [3]. Nonetheless, EDF and LLF are likely heuristic choices in practice with EDF being simpler to implement and LLF more effective in general.
Reference: [19] <author> R. Motwani, S. Phillips, and E. Torng. </author> <title> Non-clairvoyant scheduling. </title> <journal> Theoretical Computer Science, </journal> <volume> 130(1) </volume> <pages> 17-47, </pages> <year> 1994. </year>
Reference-contexts: relationship between faster machines and stretched schedules implies that this algorithm is also an s-stretch (s + s s1 )-approximation algorithm.) This result is quite dramatic as it was previously shown that no deterministic on-line algorithm can approximate the optimal flow time within a factor of (n 1 3 ) <ref> [19] </ref>. However, their analysis does not yield an s-speed on-line algorithm for minimizing average flow time for any s. At speed 2, for example, they only guarantee a 2-approximation.
Reference: [20] <author> C. Phillips, C. Stein, and J. Wein. </author> <title> Minimizing average completion time in the presence of release dates. </title> <note> To appear in Math Programming, </note> <year> 1995. </year>
Reference-contexts: Recently there has been much progress in developing off-line approximation algorithms for the re lated N P-hard problem of minimizing P j w j C j via certain classes of linear programming relaxations <ref> [1, 9, 20] </ref>, but no non-trivial polynomial-time approximation algorithms are known for P w j F j . (Since P P P an optimal schedule for P w j C j is also an optimal sched ule for w j F j , but a -approximation for P a very poor <p> We then offer some evidence that indicates it may be difficult to improve upon our results. A common method of analyzing the performance of a nonpreemptive algorithm is with respect to the optimal preemptive solution, which is an obvious lower bound <ref> [20, 13] </ref>. Let S p be the schedule with optimal flowtime in the preemptive m-machine setting for some instance I, and let S w be the schedule with optimal flowtime in the nonpreemptive, wm-machine set ting. <p> Define I t I to be the set of jobs that complete by time t in schedule S (I). By Lemma 2.3 and the definition of I t , all jI t j jobs will be completed by time t in SRP T (I t ). A lemma from <ref> [20] </ref> proves that if SRPT completes k jobs of input instance I 0 by time t and I 0 I 00 , then it completes at least k jobs of input instance I 00 by time t. <p> When ff = 1, SRPT is a (2 1 m )-approximation algorithm which improves slightly a bound of 2 from <ref> [20] </ref>.
Reference: [21] <author> M. Queyranne and A.S. Schulz. </author> <title> Polyhedral approaches to machine scheduling. </title> <type> Technical Report Technical Report 474/1995, </type> <institution> Technical University of Berlin, </institution> <year> 1994. </year>
Reference-contexts: The following lemma places constraints on legal values for C j . Lemma 4.1 <ref> [21] </ref> Given a preemptive schedule for instance N on one machine, let C 1 ; : : : ; C n denote the job completion times in this schedule.
Reference: [22] <author> S. Sahni and Y. Cho. </author> <title> Nearly on line scheduling of a uniform processor system with release times. </title> <journal> SIAM Journal on Computing, </journal> <volume> 8 </volume> <pages> 275-285, </pages> <year> 1979. </year>
Reference-contexts: When a job arrives, however, we assume that all other relevant information about the job is known; this model has been considered by many authors, e.g. <ref> [8, 9, 10, 22, 23] </ref>, and is a reasonable model of a number of settings from repair shops to timesharing on a supercomputer. (For example, in the latter setting, when one submits a job to a national supercomputer center, one must give an estimate of the job size.) We will analyze
Reference: [23] <author> David B. Shmoys, Joel Wein, and David P. Williamson. </author> <title> Scheduling parallel machines on-line. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24(6) </volume> <pages> 1313-1331, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: When a job arrives, however, we assume that all other relevant information about the job is known; this model has been considered by many authors, e.g. <ref> [8, 9, 10, 22, 23] </ref>, and is a reasonable model of a number of settings from repair shops to timesharing on a supercomputer. (For example, in the latter setting, when one submits a job to a national supercomputer center, one must give an estimate of the job size.) We will analyze
References-found: 23

