URL: file://ftp.cis.ohio-state.edu/pub/communication/papers/hpca95-barrier.ps.Z
Refering-URL: http://www.cis.ohio-state.edu/~panda/wormhole_pub.html
Root-URL: 
Email: E-mail: panda@cis.ohio-state.edu  
Phone: Tel: (614)-292-5199, Fax: (614)-292-2911  
Title: Fast Barrier Synchronization in Wormhole k-ary n-cube Networks with Multidestination Worms  
Author: Dhabaleswar K. Panda 
Address: Columbus, OH 43210-1277  
Affiliation: Dept. of Computer and Information Science The Ohio State University,  
Abstract: Proc. of the Int'l Symposium on High Performance Computer Architecture (HPCA '95), pp. 200-209. This paper presents a new approach to implement fast barrier synchronization in wormhole k-ary n-cubes. The novelty lies in using multidestination messages instead of the traditional single destination messages. Two different multidestination worm types, gather and broadcasting, are introduced to implement the report and wake-up phases of barrier synchronization, respectively. Algorithms for complete and arbitrary set barrier synchronization are presented using these new worms. It is shown that complete barrier synchronization in a k-ary n-cube system with e-cube routing can be implemented with 2n communication start-ups as compared to 2n log 2 k start-ups needed with unicast-based message passing. For arbitrary set barrier, an interesting trend is observed where the synchronization cost keeps on reducing beyond a certain number of participating nodes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. J. Beckmann and C. D. Polychronopoulos. </author> <title> Fast Barrier Synchronization Hardware. </title> <booktitle> In Proceedings of the Supercomputing '90, </booktitle> <address> New York, </address> <pages> pages 180-189, </pages> <month> Nov </month> <year> 1990. </year>
Reference-contexts: It also provides flexibility to achieve better overlapping of computation with synchronization [9]. fl This research is supported by the National Science Foundation Grant # MIP-9309627. Many hardware, software, and hybrid schemes have been proposed in the literature to efficiently implement barrier synchronization on shared-memory multiprocessors <ref> [1, 13] </ref> with bus and multistage interconnections. Topology- and routing-specific synchronization schemes have been proposed in [7, 16]. However, very little research has been done to provide architectural supports for the popular k-ary n-cube networks to implement fast barrier synchronization.
Reference: [2] <author> R. V. Boppana, S. Chalasani, and C. S. Raghavendra. </author> <title> On Multicast Wormhole Routing in Multicomputer Networks. </title> <booktitle> In Proceedings of the Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 722-729, </pages> <year> 1994. </year>
Reference-contexts: Hence, this model is quite general and can be used by any routing scheme. A similar but restricted method of using only row-path and column-path in e-cube meshes has also been independently proposed by Boppana, Chalasani, and Raghavendra <ref> [2] </ref>. 2.3 Intrinsic Benefits The significant benefit of the BRCP model comes from the fact that a message can be delivered to multiple destinations with the same overhead as that of sending it to a single destination, if the destinations can be grouped into a single worm under the BRCP model. <p> Since the message length is small, we propose a virtual cut-through approach instead of strict wormhole routing [12]. This alleviates the deadlock problem associated with multidestination worms due to limited number of consumption channels <ref> [2, 15] </ref> and allows multiple concurrent barriers to be realizable in a system without deadlock. The message field in synchronization buffers, as shown in Fig. 3a, is meant to hold a gather worm during its propagation if it gets blocked.
Reference: [3] <author> C.-M. Chiang and L. M. Ni. </author> <title> Multi-Address Encoding for Multicast. </title> <booktitle> In Proceedings of the Parallel Computer Routing and Communication Workshop, </booktitle> <pages> pages 146-160, </pages> <year> 1994. </year>
Reference-contexts: In this paper, we take such a challenge and propose using two new worm types: gather and broadcasting. These worms use a new multidestination wormhole mechanism introduced by us recently [15] and propagate through paths conformed to the base-routing of the system. A special bit-string encoding of multides-tination addresses <ref> [3] </ref> is used by these worms which limit their sizes to a few flits wide, depending on the system size and channel width. Deadlock-free propagation of these worms are guaranteed using virtual cut-through technique with synchronization buffers at the router interface. <p> For a multidestination message, the header consists of multiple destinations and can span multiple flits. The sender node creates the list of destinations as an ordered list, depending on their intended order of traversal, and incorporate it into the header. There are different ways to encode these addresses <ref> [3] </ref> and these worms can have different functionality. To illustrate the concept, in this section, we use all-destination encoding format with broadcast/multicast functionality. In the next section, we propose using bit-string encoding and introduce alternative multidestination worm type like gather. <p> For a multiprogrammed system, some bits of this field should also identify task id so that different tasks running on overlapped partition of the system can barrier synchronize without any ambiguity. The destination addresses are encoded as a bit-string as proposed in <ref> [3] </ref>. For the example linear array with 6 processors as shown in Fig. 3, six bits are sufficient. Assuming processor 0 is identified as bit 0, the gather worm initiated by P4 will have the destinations encoded as a bit-string of 000111.
Reference: [4] <author> A. A. Chien and J. H. Kim. </author> <title> Planar-Adaptive Routing: Low-Cost Adaptive Networks for Multiprocessors. </title> <booktitle> In Proc. of the Int'l Symposium on Computer Architecture, </booktitle> <pages> pages 268-277, </pages> <year> 1992. </year>
Reference-contexts: The validity of this worm depends on the underlying routing scheme. Assume the network supports a deadlock-free routing scheme R which can be e-cube [5], planar-adaptive <ref> [4] </ref>, turn-model [8], fully-adaptive [6], or any other routing scheme. <p> It is to be noted that a set of destinations ordered in a column-row manner will be an invalid path under the BRCP model for e-cube systems. Similarly, in a planar adaptive system <ref> [4] </ref>, a multidestination worm can cover a set of destinations along any diagonal in addition to the flexibility supported by the ecube system. If the underlying routing scheme supports non-minimal west first turn model [8], it can provide further flexibility in covering a lot of destinations using a single worm.
Reference: [5] <author> W. J. Dally and C. L. Seitz. </author> <title> Deadlock-Free Message Routing in Multiprocessor Interconnection Networks. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 547-553, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: The validity of this worm depends on the underlying routing scheme. Assume the network supports a deadlock-free routing scheme R which can be e-cube <ref> [5] </ref>, planar-adaptive [4], turn-model [8], fully-adaptive [6], or any other routing scheme. <p> For example, in an ecube system (assuming messages are routed first along row and then along column) <ref> [5] </ref>, a multidestination worm can cover a set of destinations in row/column/row-column order. It is to be noted that a set of destinations ordered in a column-row manner will be an invalid path under the BRCP model for e-cube systems.
Reference: [6] <author> J. Duato. </author> <title> A New Theory of Deadlock-Free Adaptive Routing in Wormhole Networks. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(12) </volume> <pages> 1320-1331, </pages> <year> 1993. </year>
Reference-contexts: The validity of this worm depends on the underlying routing scheme. Assume the network supports a deadlock-free routing scheme R which can be e-cube [5], planar-adaptive [4], turn-model [8], fully-adaptive <ref> [6] </ref>, or any other routing scheme.
Reference: [7] <author> A. Feldmann, T. Gross, D. O'Hallaron, and T. Stricker. </author> <title> Subset Barrier Synchronization on a Private Memory Parallel System. </title> <booktitle> In Proceedings of the Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 209-218, </pages> <year> 1992. </year>
Reference-contexts: Many hardware, software, and hybrid schemes have been proposed in the literature to efficiently implement barrier synchronization on shared-memory multiprocessors [1, 13] with bus and multistage interconnections. Topology- and routing-specific synchronization schemes have been proposed in <ref> [7, 16] </ref>. However, very little research has been done to provide architectural supports for the popular k-ary n-cube networks to implement fast barrier synchronization. Systems like Cray T3D use dedicated tree-based networks with barrier registers to provide fast synchronization. However, these schemes are not scalable.
Reference: [8] <author> C. J. Glass and L. Ni. </author> <title> The Turn Model for Adaptive Routing. </title> <booktitle> In Proc. of the Int'l Symposium on Computer Architecture, </booktitle> <pages> pages 278-287, </pages> <year> 1992. </year>
Reference-contexts: The validity of this worm depends on the underlying routing scheme. Assume the network supports a deadlock-free routing scheme R which can be e-cube [5], planar-adaptive [4], turn-model <ref> [8] </ref>, fully-adaptive [6], or any other routing scheme. <p> Similarly, in a planar adaptive system [4], a multidestination worm can cover a set of destinations along any diagonal in addition to the flexibility supported by the ecube system. If the underlying routing scheme supports non-minimal west first turn model <ref> [8] </ref>, it can provide further flexibility in covering a lot of destinations using a single worm. Hence, this model is quite general and can be used by any routing scheme.
Reference: [9] <author> R. Gupta. </author> <title> The Fuzzy Barrier: A Mechanism for the High Speed Synchronization of Processors. </title> <booktitle> In Proceedings of the Int'l Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 54-63, </pages> <year> 1989. </year>
Reference-contexts: In order to support these paradigms, the systems need fast implementation of barrier synchronization [11]. Reduced overhead for barrier synchronization alleviates the sequential bottleneck in a parallel program leading to better speedup. It also provides flexibility to achieve better overlapping of computation with synchronization <ref> [9] </ref>. fl This research is supported by the National Science Foundation Grant # MIP-9309627. Many hardware, software, and hybrid schemes have been proposed in the literature to efficiently implement barrier synchronization on shared-memory multiprocessors [1, 13] with bus and multistage interconnections.
Reference: [10] <author> X. Lin, P. K. McKinley, and L. M. Ni. </author> <title> Deadlock-free Multicast Wormhole Routing in Multicom-puter Networks. </title> <booktitle> In Proc. of the Int'l Symposium on Computer Architecture, </booktitle> <pages> pages 116-124, </pages> <year> 1991. </year>
Reference-contexts: To illustrate the concept, in this section, we use all-destination encoding format with broadcast/multicast functionality. In the next section, we propose using bit-string encoding and introduce alternative multidestination worm type like gather. It is to be noted that multidestination mechanism was first introduced by Ni <ref> [10] </ref>. However, it was proposed for multicasting/broadcasting in Hamil-tonian path-based wormhole networks. In [15], we have proposed a generalized multidestination mechanism which can conform to the routing scheme of any wormhole network. We explain this concept later in this section.
Reference: [11] <author> Message Passing Interface Forum. </author> <title> MPI: A Message-Passing Interface Standard, </title> <month> Mar </month> <year> 1994. </year>
Reference-contexts: Intel Paragon, Cray T3D, Ncube, J-Machine, and Stanford DASH are representative systems falling into this category. Such systems are being used for supporting either distributed-memory, shared-memory, or distributed-shared memory programming paradigms. In order to support these paradigms, the systems need fast implementation of barrier synchronization <ref> [11] </ref>. Reduced overhead for barrier synchronization alleviates the sequential bottleneck in a parallel program leading to better speedup. It also provides flexibility to achieve better overlapping of computation with synchronization [9]. fl This research is supported by the National Science Foundation Grant # MIP-9309627. <p> Hence, this model opens up an entirely new framework together with its challenges for developing optimal algorithms to implement collective communication operations <ref> [11] </ref> with minimal time. In this paper, we emphasize on this framework by developing and evaluating algorithms for barrier synchronization which is an important collective communication operation. 3 Barrier Synchronization on a Linear Array In this section, we introduce multidestination gather and broadcasting worms.
Reference: [12] <author> L. Ni and P. K. McKinley. </author> <title> A Survey of Wormhole Routing Techniques in Direct Networks. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 62-76, </pages> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction The wormhole-routing switching technique is becoming the trend in building future parallel systems due to its inherent advantages like low-latency communication and reduced communication hardware overhead <ref> [12] </ref>. Intel Paragon, Cray T3D, Ncube, J-Machine, and Stanford DASH are representative systems falling into this category. Such systems are being used for supporting either distributed-memory, shared-memory, or distributed-shared memory programming paradigms. In order to support these paradigms, the systems need fast implementation of barrier synchronization [11]. <p> This will alleviate the need for a separate control network and can provide easy scalability as the system size grows. Traditionally, the wormhole-routed systems have supported only point-to-point (unicast) message passing mechanism <ref> [12] </ref>. This mechanism allows a message to have only a single destination. Using unicast-based send and receive message passing primitives, barrier synchronization can easily be achieved using a two-step procedure: report and wakeup [17]. <p> With bit-string encoding, the router interface needs to absorb all flits before making a routing decision to the next destination. Since the message length is small, we propose a virtual cut-through approach instead of strict wormhole routing <ref> [12] </ref>. This alleviates the deadlock problem associated with multidestination worms due to limited number of consumption channels [2, 15] and allows multiple concurrent barriers to be realizable in a system without deadlock.
Reference: [13] <author> M. T. O'Keefe and H. G. Dietz. </author> <title> Hardware Barrier Synchronization: Dynamic Barrier MIMD (DBM). </title> <booktitle> In Proceedings of the Int'l Conference on Parallel Processing, </booktitle> <pages> pages I: 43-46, </pages> <month> Aug </month> <year> 1990. </year>
Reference-contexts: It also provides flexibility to achieve better overlapping of computation with synchronization [9]. fl This research is supported by the National Science Foundation Grant # MIP-9309627. Many hardware, software, and hybrid schemes have been proposed in the literature to efficiently implement barrier synchronization on shared-memory multiprocessors <ref> [1, 13] </ref> with bus and multistage interconnections. Topology- and routing-specific synchronization schemes have been proposed in [7, 16]. However, very little research has been done to provide architectural supports for the popular k-ary n-cube networks to implement fast barrier synchronization. <p> These buffers can be accessed by the associated processor using memory-mapped I/O reference. multidestination gather/broadcasting worm: (a) synchronization buffers at a router interface and (b) a typical message format. A split-phase synchronization scheme <ref> [13] </ref> is assumed. Before the execution of barrier x, 0 x &lt; s, as shown in Fig. 5, each intermediate processor specifies its desire for participating in the barrier by making the associated participating flag `on (1)' and arrived flag `off (0)'. <p> Consider a subset of nodes in a 2D mesh trying to barrier synchronize as shown in Fig. 7. Such a problem can always be solved as a subset operation of the complete barrier if all processors belong to a single task and they are ordered <ref> [13] </ref> with respect to every barrier in the program.
Reference: [14] <author> D. K. Panda. </author> <title> Fast Barrier Synchronization in Wormhole k-ary n-cube Networks with Multides-tination Worms. </title> <type> Technical Report OSU-CISRC-8/94-TR41, </type> <year> 1994. </year>
Reference-contexts: Such multidimensional worms are little longer in size because they need to carry more destinations in their headers. Algorithms for k-ary n-cube system using such enhanced scheme are presented in <ref> [14] </ref>. In this paper, we focus on schemes using single-dimensional worms only. By using unicast-based scheme, the number of communication steps required in a k-ary n-cube system to barrier synchronize k n processors is 2dlog 2 (k n )e. <p> It can be seen that as the number of participating nodes increases, more and more of them can be grouped together along rows and columns and by reducing L 2 <ref> [14, 15] </ref>. Hence this scheme allows to reduce synchronization cost as the number of participating nodes increases. The scheme proposed for 2D mesh can be generalized to k-ary n-cubes with 2 (n + 1) phases. The first n phases involve dimension-wise gathering of results along dimensions 1 to n. <p> This result shows that even if the communication start-up time decreases drastically in future, the multidestination scheme will be able to implement faster barrier synchronization than the unicast-based scheme. Simulation results with respect to other system, topology, and technological parameters can be found in <ref> [14] </ref>. 6 Conclusions and Future Research In this paper, we have presented a new approach to implement fast and scalable barrier synchronization in k-ary n-cube wormhole systems using multidesti participating. nation gather and broadcasting worms.
Reference: [15] <author> D. K. Panda, S. Singal, and P. Prabhakaran. </author> <title> Mul-tidestination Message Passing Mechanism Conforming to Base Wormhole Routing Scheme. </title> <booktitle> In Proceedings of the Parallel Computer Routing and Communication Workshop, </booktitle> <pages> pages 131-145, </pages> <year> 1994. </year>
Reference-contexts: In this paper, we take such a challenge and propose using two new worm types: gather and broadcasting. These worms use a new multidestination wormhole mechanism introduced by us recently <ref> [15] </ref> and propagate through paths conformed to the base-routing of the system. A special bit-string encoding of multides-tination addresses [3] is used by these worms which limit their sizes to a few flits wide, depending on the system size and channel width. <p> In section 4, we develop algorithms for complete and arbitrary-set barrier synchronization on k-ary n-cube. Simulation experiments and results are presented in section 5. Finally, we conclude the paper with future research directions. 2 Multidestination Mechanism In this section, we summarize wormhole message passing mechanism with multiple destinations <ref> [15] </ref>. Intrinsic benefits of this mechanism over unicast message passing are emphasized. 2.1 The Mechanism A single destination wormhole message consists of a body and a header with its destination number. For a multidestination message, the header consists of multiple destinations and can span multiple flits. <p> In the next section, we propose using bit-string encoding and introduce alternative multidestination worm type like gather. It is to be noted that multidestination mechanism was first introduced by Ni [10]. However, it was proposed for multicasting/broadcasting in Hamil-tonian path-based wormhole networks. In <ref> [15] </ref>, we have proposed a generalized multidestination mechanism which can conform to the routing scheme of any wormhole network. We explain this concept later in this section. In this paper, in addition to multicast-ing/broadcasting, we introduce the concept of using multidestination mechanism for gather/reduction operations. <p> It can be seen that as the number of participating nodes increases, more and more of them can be grouped together along rows and columns and by reducing L 2 <ref> [14, 15] </ref>. Hence this scheme allows to reduce synchronization cost as the number of participating nodes increases. The scheme proposed for 2D mesh can be generalized to k-ary n-cubes with 2 (n + 1) phases. The first n phases involve dimension-wise gathering of results along dimensions 1 to n. <p> Since the message length is small, we propose a virtual cut-through approach instead of strict wormhole routing [12]. This alleviates the deadlock problem associated with multidestination worms due to limited number of consumption channels <ref> [2, 15] </ref> and allows multiple concurrent barriers to be realizable in a system without deadlock. The message field in synchronization buffers, as shown in Fig. 3a, is meant to hold a gather worm during its propagation if it gets blocked.
Reference: [16] <author> J. A. Solworth and J. Stamatopoulos. </author> <title> Integrated Network Barriers for D-dimensional Meshes. In Proceedings of the Working Conference on Architectures and Compilation Techniques for Fine and Medium Grain Parallelism, </title> <year> 1992. </year>
Reference-contexts: Many hardware, software, and hybrid schemes have been proposed in the literature to efficiently implement barrier synchronization on shared-memory multiprocessors [1, 13] with bus and multistage interconnections. Topology- and routing-specific synchronization schemes have been proposed in <ref> [7, 16] </ref>. However, very little research has been done to provide architectural supports for the popular k-ary n-cube networks to implement fast barrier synchronization. Systems like Cray T3D use dedicated tree-based networks with barrier registers to provide fast synchronization. However, these schemes are not scalable.
Reference: [17] <author> H. Xu, P. K. McKinley, and L. Ni. </author> <title> Efficient Implementation of Barrier Synchronization in Wormhole-routed Hypercube Multicomputers. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 16 </volume> <pages> 172-184, </pages> <year> 1992. </year>
Reference-contexts: Traditionally, the wormhole-routed systems have supported only point-to-point (unicast) message passing mechanism [12]. This mechanism allows a message to have only a single destination. Using unicast-based send and receive message passing primitives, barrier synchronization can easily be achieved using a two-step procedure: report and wakeup <ref> [17] </ref>. The processors report their respective arrival at a barrier synchronization point through phases of upward tree communication. The root node gathers the report and broadcasts it to other processors by wakeup phases using a downward tree communication. <p> If the underlying routing supports adaptivity then further reduction can still be achieved by using adaptive paths as discussed in section 2.2. The third phase consists of unicast-based message passing. This phase uses reverse-umesh algorithm <ref> [17] </ref> to implement gather among column leaders in a tree-like manner using unicast-based message passing in every step. Once this reduction phase is over, a single processor has information that all other processors have reached at the barrier. Now broadcasting phases are initiated by this processor to wakeup other processors. <p> This test-bed implements flit-level simulation and can be configured for different topological and technological parameters. We compared our scheme with unicast-based barrier synchronization algorithm <ref> [17] </ref>. The following parameters, representing the current trend in technology, were assumed: t s (communication start-up time) as 1.0, 5.0, and 10.0 microseconds and t p (link propagation time) as 5.0 nsec. For multidestination gather and broadcasting worms, we used bit-string encoding with channel width as 32 bits.
References-found: 17

