URL: http://www.icsi.berkeley.edu/~yairb/pubs/BLMSS-sched-rejection.ps
Refering-URL: http://www.icsi.berkeley.edu/~yairb/
Root-URL: http://www.icsi.berkeley.edu
Title: Multiprocessor Scheduling with Rejection  
Author: Yair Bartal Stefano Leonardi Alberto Marchetti-Spaccamela Jir Sgall Leen Stougie 
Keyword: ratio.  
Abstract: We consider a version of multiprocessor scheduling with the special feature that jobs may be rejected at a certain penalty. An instance of the problem is given by m identical parallel machines and a set of n jobs, each job characterized by a processing time and a penalty. In the on-line version the jobs arrive one by one and we have to schedule or reject a job before we have any information about future jobs. The objective is to minimize the makespan of the schedule for accepted jobs plus the sum of the penalties of rejected jobs. The main result is a 1 + 2:618 competitive algorithm for the on-line version of the problem, where is the golden ratio. A matching lower bound shows that this is the best possible algorithm working for all m. For fixed m we give improved bounds, in particular for m = 2 we give an optimal 1:618 competitive algorithm. For the off-line problem we present a fully polynomial approximation scheme for fixed m and a polynomial approximation scheme for arbitrary m. Moreover we present an approximation algorithm which runs in time O(n log n) for arbitrary m and guarantees a 2 1 m approximation
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Bartal, A. Fiat, H. Karloff, and R. Vohra, </author> <title> "New algorithms for an ancient scheduling problem", </title> <booktitle> Proceedings of the 24th ACM Symposium on Theory of Computing, </booktitle> <address> Victoria, Canada, </address> <year> 1992, </year> <pages> 51-58. </pages>
Reference-contexts: Graham's list scheduling algorithm schedules each job on the currently least loaded machine and is 2 1 m competitive [5]. It is known that for m &gt; 3 list scheduling is not optimal [4], and in fact there exist 2 " competitive algorithms for small constant " &gt; 0 <ref> [1, 7] </ref>. The best competitive ratio is known to be between 1.837 and 1.945 (see [2, 7]), but its precise value is unknown. In contrast, for the more general on-line MSR problem we do find the optimal competitive ratio.
Reference: [2] <author> Y. Bartal, H. Karloff, and Y. Rabani, </author> <title> "A new lower bound for m-machine scheduling", </title> <journal> Information Processing Letters, </journal> <volume> 50 (1994), </volume> <pages> 113-116. </pages>
Reference-contexts: It is known that for m &gt; 3 list scheduling is not optimal [4], and in fact there exist 2 " competitive algorithms for small constant " &gt; 0 [1, 7]. The best competitive ratio is known to be between 1.837 and 1.945 (see <ref> [2, 7] </ref>), but its precise value is unknown. In contrast, for the more general on-line MSR problem we do find the optimal competitive ratio.
Reference: [3] <author> M. Garey and D. Johnson, </author> <title> Computers and intractability: a guide to the theory of NP-completeness, </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: 1 Introduction Scheduling jobs on parallel machines is a classical problem that has been widely studied for more than three decades <ref> [3, 9] </ref>. <p> In fact, our algorithms are based on the techniques used for the problem without rejection, namely on the fully polynomial approximation scheme for fixed m <ref> [3] </ref> (based on a dynamic programming formulation of the problem) and the polynomial approximation scheme for arbitrary m [6]. <p> The proof uses a rounding technique based on dynamic programming as was developed in <ref> [3] </ref>, for the classical makespan problem. Multiprocessor Scheduling with Rejection 11 Lemma 8 The MSR problem with integer processing times and penalties can be solved in time polynomial in n and (Z OP T ) m . Proof. We use dynamic programming.
Reference: [4] <author> G. Galambos and G. J. Woeginger. </author> <title> "An on-line scheduling heuristic with better worst case ratio than Graham's list scheduling". </title> <journal> SIAM Journal on Computing, </journal> <volume> 22(2) </volume> <pages> 349-355, </pages> <year> 1993. </year>
Reference-contexts: Graham's list scheduling algorithm schedules each job on the currently least loaded machine and is 2 1 m competitive [5]. It is known that for m &gt; 3 list scheduling is not optimal <ref> [4] </ref>, and in fact there exist 2 " competitive algorithms for small constant " &gt; 0 [1, 7]. The best competitive ratio is known to be between 1.837 and 1.945 (see [2, 7]), but its precise value is unknown.
Reference: [5] <author> R.L. Graham, </author> <title> "Bounds for certain multiprocessing anomalies", </title> <journal> Bell System Technical Journal 45 (1966), </journal> <pages> 1563-1581. </pages>
Reference-contexts: In that problem, each job has to be scheduled, hence it is equivalent to a special case of our problem where each penalty is larger than the corresponding processing time. Graham's list scheduling algorithm schedules each job on the currently least loaded machine and is 2 1 m competitive <ref> [5] </ref>. It is known that for m &gt; 3 list scheduling is not optimal [4], and in fact there exist 2 " competitive algorithms for small constant " &gt; 0 [1, 7]. <p> The golden ratio is denoted by = ( p Using list scheduling, the makespan of a schedule is bounded above by the processing time of the job that finishes last plus the sum of the loads of all other scheduled job <ref> [5] </ref>. We denote this bound by C LS (X ) for a set X of scheduled jobs. 3 On-line scheduling with rejections In the first part of this section we present an on-line MSR algorithm which works for arbitrary m and achieves the best possible competitive ratio in that case.
Reference: [6] <author> D.S. Hochbaum and D.B. Shmoys, </author> <title> "A polynomial approximation scheme for machine scheduling on uniform processors: using the dual approach", </title> <journal> SIAM Journal on Computing, </journal> <volume> 17, </volume> <pages> pp. 539-551, </pages> <year> 1988. </year>
Reference-contexts: In fact, our algorithms are based on the techniques used for the problem without rejection, namely on the fully polynomial approximation scheme for fixed m [3] (based on a dynamic programming formulation of the problem) and the polynomial approximation scheme for arbitrary m <ref> [6] </ref>. Obviously, the MSR problem on a single machine is easily solved exactly by scheduling every job whose processing time does not exceed its penalty, and for m 2 it is NP-hard to find the optimal solution, similarly as in the classical case without rejections. <p> Z OP T (I 0 ) Z OP T (I) 2Z H and hence Z OP T (I 0 )=k 4n=". 2 5.3 A polynomial approximation scheme for arbitrary m For arbitrary m we will design a polynomial approximation scheme (PAS) based on the PAS for the makespan problem in <ref> [6] </ref>. Given an instance with n jobs, m machines, and * &gt; 0, we are to find an *-approximate solution. As an upper bound U B on the solution value we use the outcome Z H of the heuristic presented in Multiprocessor Scheduling with Rejection 12 Section 5.1. <p> For each possible set D (y 1 ; :::; y s ) we determine a schedule with an *=3-approximate makespan using the PAS in <ref> [6] </ref>. All other jobs in D are rejected. Jobs in the set L that have p j 1 m t j , i.e., jobs in the set LnB, are scheduled in any order according to the list scheduling rule starting from the *=3-approximate schedule determined before. <p> We notice that there are n s = O (n 18d1=* 2 e ), of them. Multiprocessor Scheduling with Rejection 14 For each of these sets an *-approximate schedule is computed using the algorithm in <ref> [6] </ref>, taking O ((n=*) d9=* 2 e ); attaching the jobs in the set L just adds O (n 2 ) time to each of these computations. Hence, the overall running time of the algorithm is O ((n 3 =*) d9=* 2 e ).
Reference: [7] <author> D. Karger, S. Phillips, and E. Torng, </author> <title> "A better algorithm for an ancient scheduling problem", </title> <booktitle> Proceedings of the 5th ACM/SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: Graham's list scheduling algorithm schedules each job on the currently least loaded machine and is 2 1 m competitive [5]. It is known that for m &gt; 3 list scheduling is not optimal [4], and in fact there exist 2 " competitive algorithms for small constant " &gt; 0 <ref> [1, 7] </ref>. The best competitive ratio is known to be between 1.837 and 1.945 (see [2, 7]), but its precise value is unknown. In contrast, for the more general on-line MSR problem we do find the optimal competitive ratio. <p> It is known that for m &gt; 3 list scheduling is not optimal [4], and in fact there exist 2 " competitive algorithms for small constant " &gt; 0 [1, 7]. The best competitive ratio is known to be between 1.837 and 1.945 (see <ref> [2, 7] </ref>), but its precise value is unknown. In contrast, for the more general on-line MSR problem we do find the optimal competitive ratio.
Reference: [8] <author> R.M. Karp, </author> <title> "On-line algorithms versus off-line algorithms: how much is it worth to know the future?", </title> <booktitle> Proc. World Computer Congress, </booktitle> <year> 1992. </year>
Reference-contexts: In this scenario the on-line MSR problem can be seen as a non-trivial generalization of the well-known ski rental problem <ref> [8] </ref>. Our main result is an optimal 1 + 2:618 competitive algorithm for the on-line MSR problem, where = (1 + p 5)=2 is the golden ratio. We prove that no deterministic algorithm that receives m as input can achieve a better competitive ratio independent of m.
Reference: [9] <author> J.K. Lenstra and A.H.G. Rinnooy Kan, </author> <title> "An introduction to multiprocessor scheduling", </title> <type> Technical Report, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1988. </year> <title> Multiprocessor Scheduling with Rejection 15 </title>
Reference-contexts: 1 Introduction Scheduling jobs on parallel machines is a classical problem that has been widely studied for more than three decades <ref> [3, 9] </ref>.
Reference: [10] <author> J. Sgall, </author> <title> "On-line scheduling on parallel machines", </title> <type> PhD thesis, Technical Report CMU-CS-94-144, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, U.S.A., </address> <year> 1994.` </year>
Reference: [11] <author> D. Sleator and R.E. Tarjan, </author> <title> "Amortized efficiency of list update and paging rules", </title> <journal> Communications of ACM, </journal> <volume> 28, </volume> <pages> pp. </pages> <month> 202-208 </month> <year> (1985). </year>
Reference-contexts: On-line algorithms are evaluated by the competitive ratio; an on-line algorithm is c-competitive if for each input the cost of the solution produced by the algorithm is at most c times larger than the cost of an optimal solution (cf. <ref> [11] </ref>). The main goal of an on-line MSR algorithm is to choose the correct balance between the penalties of the jobs rejected and the increase in the makespan for the accepted jobs.
References-found: 11

