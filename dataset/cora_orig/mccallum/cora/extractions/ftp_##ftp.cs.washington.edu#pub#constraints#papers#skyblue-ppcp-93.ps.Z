URL: ftp://ftp.cs.washington.edu/pub/constraints/papers/skyblue-ppcp-93.ps.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/solvers/skyblue-ppcp-93.html
Root-URL: 
Email: sannella@cs.washington.edu  
Title: SkyBlue Constraint Solver and Its Applications  
Author: Michael Sannella 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  
Note: The  
Abstract: This paper will appear in Saraswat and van Hentenryck, editors, Proceedings of the 1993 Workshop on Principles and Practice of Constraint Programming, MIT Press, 1994. This is a reformatted version of the text that will appear in the book. 1 Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Franz G. Amador. </author> <title> Self-Explanatory Simulation for an Electronic Encyclopedia. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: New interaction modes are specified by adding stay constraints to control constraint propagation. 8.2 The Pika Simulation System SkyBlue is being used as an equation manipulation tool in a version of the Pika simulation system <ref> [1] </ref>. Pika constructs simulations in domains such as electronics or thermodynamics by collecting algebraic and differential equations representing relationships between object attributes. For example, in a simulation of an electronic circuit, one equation would relate the voltage across and the current through a particular resister.
Reference: [2] <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint Hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including Garnet [14], Rendezvous [11], and ThingLab II [13]. References <ref> [2, 6] </ref> contain additional references to constraint-based systems. One important type of constraint solver accepts a set of linear or non-linear relations over real-valued variables, and sets the variables to values that satisfy the relations. <p> One way to deal with this problem is to organize the constraints into a constraint hierarchy, where each constraint is labeled with a strength that indicates how important it is to satisfy the constraint <ref> [2] </ref>. Constraint hierarchies can be used to specify declaratively which solution should be produced without regard for the solver implementation. This paper describes the SkyBlue constraint solver, a multi-way local propagation solver that maintains constraint hierarchies. <p> If the solver is maintaining constraints within a user interface application, it is not acceptable to handle these situations by signaling an error or halting. The theory of constraint hierarchies <ref> [2] </ref> provides a way to specify declaratively how a solver should behave in these situations. <p> A stay constraint specifies that its output variable should not be changed. The theory of constraint hierarchies describes several different ways to define which variable values "best" satisfy a constraint hierarchy <ref> [2] </ref>. For many sets of constraints, MGB mgraphs compute locally-predicate-better solutions to the constraint hierarchy according to this theory [13, 15]. 6 The SkyBlue Algorithm The SkyBlue constraint solver maintains a set of constraints by constructing an MGB mgraph and executing the selected methods to satisfy the enforced constraints.
Reference: [3] <author> Conal Elliott, Greg Schechter, Ricky Yeung, and Salim Abi-Ezzi. TBAG: </author> <title> A High Level Framework for Interactive, Animated 3D Graphics Applications. </title> <booktitle> In SIGGRAPH '94 Conference Proceedings, </booktitle> <address> Orlando, Florida, </address> <month> July </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: during mvine construction but it can reduce it considerably. 8 SkyBlue Applications The SkyBlue constraint solver has been implemented in several languages, and a number of applications have been developed using it, including an implementation of the Kaleidoscope language [5], the CoolDraw drawing program [4], the TBAG 3D animation system <ref> [3] </ref>, and the VB2 virtual reality system [9]. The following subsections describe two applications in detail, emphasizing how the applications take advantage of the unique features of SkyBlue. 8.1 Multi-Garnet Garnet is a widely-used user interface toolkit that supports one-way required constraints (no hierarchies) [14].
Reference: [4] <author> Bjorn Freeman-Benson. </author> <title> Converting an Existing User Interface to Use Constraints. </title> <booktitle> In Proceedings of the ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 207-215, </pages> <address> Atlanta, Georgia, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: cannot eliminate all of the backtracking during mvine construction but it can reduce it considerably. 8 SkyBlue Applications The SkyBlue constraint solver has been implemented in several languages, and a number of applications have been developed using it, including an implementation of the Kaleidoscope language [5], the CoolDraw drawing program <ref> [4] </ref>, the TBAG 3D animation system [3], and the VB2 virtual reality system [9].
Reference: [5] <author> Bjorn Freeman-Benson and Alan Borning. </author> <title> The Design and Implementation of Kaleidoscope'90, A Constraint Imperative Programming Language. </title> <booktitle> In Proceedings of the IEEE Computer Society International Conference on Computer Languages, </booktitle> <pages> pages 174-180, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: The use of walkbounds cannot eliminate all of the backtracking during mvine construction but it can reduce it considerably. 8 SkyBlue Applications The SkyBlue constraint solver has been implemented in several languages, and a number of applications have been developed using it, including an implementation of the Kaleidoscope language <ref> [5] </ref>, the CoolDraw drawing program [4], the TBAG 3D animation system [3], and the VB2 virtual reality system [9].
Reference: [6] <author> Bjorn Freeman-Benson, John Maloney, and Alan Borning. </author> <title> An Incremental Constraint Solver. </title> <journal> Communications of the ACM, </journal> <volume> 33(1) </volume> <pages> 54-63, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including Garnet [14], Rendezvous [11], and ThingLab II [13]. References <ref> [2, 6] </ref> contain additional references to constraint-based systems. One important type of constraint solver accepts a set of linear or non-linear relations over real-valued variables, and sets the variables to values that satisfy the relations. <p> Finally, several applications that currently use SkyBlue are described. More information on SkyBlue, including complete pseudocode, is available in other papers [15, 16]. Contact the author for information on implementations of SkyBlue. 3 DeltaBlue and SkyBlue SkyBlue is a successor to the DeltaBlue algorithm <ref> [6, 18] </ref>, which was used as the basis for the ThingLab II user interface development environment [13]. <p> The DeltaBlue algorithm predicts whether a constraint can be enforced by using walkabout strengths (or walkstrengths) <ref> [6] </ref>. A variable's walkstrength is the strength of the weakest constraint that would have to be unenforced so that the variable is no longer determined by its current determining constraint.
Reference: [7] <author> Michel Gangnet and Burton Rosenberg. </author> <title> Constraint Programming and Graph Algorithms. </title> <booktitle> In Second International Symposium on Artificial Intelligence and Mathematics, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: Support for cycles and multi-output methods introduces a performance issue. For sets of constraints that 1 Reference <ref> [7] </ref> presents an algorithm that solves constraint hierarchies with single-output methods, but also allows constructing cycles.
Reference: [8] <author> Michael Gleicher. </author> <title> Integrating Constraints and Direct Manipulation. </title> <booktitle> In Proceedings of the 1992 Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 171-174, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: One important type of constraint solver accepts a set of linear or non-linear relations over real-valued variables, and sets the variables to values that satisfy the relations. These solvers have been used in the user interfaces for surface modeling tools and graphic editors <ref> [8, 10] </ref>. However, these constraint solvers are limited to problems where the constraints can be expressed as numeric relations. More general constraints can be handled by local propagation solvers that maintain networks of constraints by calling method procedures associated with each constraint.
Reference: [9] <author> Enrico Gobbetti and Jean-Francis Balaguer. VB2: </author> <title> An Architecture for Interaction in Synthetic Worlds. </title> <booktitle> In Proceedings of the ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 167-178, </pages> <address> Atlanta, Georgia, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: it considerably. 8 SkyBlue Applications The SkyBlue constraint solver has been implemented in several languages, and a number of applications have been developed using it, including an implementation of the Kaleidoscope language [5], the CoolDraw drawing program [4], the TBAG 3D animation system [3], and the VB2 virtual reality system <ref> [9] </ref>. The following subsections describe two applications in detail, emphasizing how the applications take advantage of the unique features of SkyBlue. 8.1 Multi-Garnet Garnet is a widely-used user interface toolkit that supports one-way required constraints (no hierarchies) [14].
Reference: [10] <author> Richard Helm, Tien Huynh, Kim Marriott, and John Vlissides. </author> <title> An Object-Oriented Architecture for Constraint-Based Graphical Editing. </title> <booktitle> In Proceedings of the Third Eurographics Workshop on Object-oriented Graphics, </booktitle> <address> Champery, Switzerland, </address> <month> October </month> <year> 1992. </year> <title> Also in Advances in Object-Oriented Graphics II, </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: One important type of constraint solver accepts a set of linear or non-linear relations over real-valued variables, and sets the variables to values that satisfy the relations. These solvers have been used in the user interfaces for surface modeling tools and graphic editors <ref> [8, 10] </ref>. However, these constraint solvers are limited to problems where the constraints can be expressed as numeric relations. More general constraints can be handled by local propagation solvers that maintain networks of constraints by calling method procedures associated with each constraint.
Reference: [11] <author> Ralph D. Hill. </author> <title> Languages for the Construction of Multi-User Multi-Media Synchronous (MUMMS) Applications. </title> <editor> In Brad Myers, editor, </editor> <booktitle> Languages for Developing User Interfaces, </booktitle> <pages> pages 125-143. </pages> <publisher> Jones and Bartlett, </publisher> <address> Boston, </address> <year> 1992. </year>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including Garnet [14], Rendezvous <ref> [11] </ref>, and ThingLab II [13]. References [2, 6] contain additional references to constraint-based systems. One important type of constraint solver accepts a set of linear or non-linear relations over real-valued variables, and sets the variables to values that satisfy the relations.
Reference: [12] <author> Scott E. Hudson. </author> <title> Incremental Attribute Evaluation: A Flexible Algorithm for Lazy Update. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(3) </volume> <pages> 315-341, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Often, local propagation is more efficient than numeric solution techniques for solving a given set of constraints. There are two main types of local propagation solvers: one-way and multi-way. One-way solvers allow each constraint to have a single method, that satisfies the constraint in one direction <ref> [12, 20] </ref>. For example, a one-way solver might represent the constraint A + B = C by the single method C := A + B, and execute this method to reset C if A or B is changed.
Reference: [13] <author> John Maloney. </author> <title> Using Constraints for User Interface Construction. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> August </month> <year> 1991. </year> <note> Published as Department of Computer Science and Engineering Technical Report 91-08-12. 14 </note>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including Garnet [14], Rendezvous [11], and ThingLab II <ref> [13] </ref>. References [2, 6] contain additional references to constraint-based systems. One important type of constraint solver accepts a set of linear or non-linear relations over real-valued variables, and sets the variables to values that satisfy the relations. <p> Contact the author for information on implementations of SkyBlue. 3 DeltaBlue and SkyBlue SkyBlue is a successor to the DeltaBlue algorithm [6, 18], which was used as the basis for the ThingLab II user interface development environment <ref> [13] </ref>. <p> 7.4) when selecting methods to execute. 2 DeltaBlue can handle (no cycles, single-output methods), the worst-case time complexity of SkyBlue for adding or removing a constraint is linear in the number of constraints in the set. 2 However, it has been proven that supporting cycles and multi-output methods is NP-complete <ref> [13] </ref>. Special examples have been constructed where the time for SkyBlue to add or remove a particular constraint is exponential in the number of constraints in the set. These test cases are highly unusual, and it is unlikely that similar sets of constraints would be constructed in a real application. <p> The theory of constraint hierarchies describes several different ways to define which variable values "best" satisfy a constraint hierarchy [2]. For many sets of constraints, MGB mgraphs compute locally-predicate-better solutions to the constraint hierarchy according to this theory <ref> [13, 15] </ref>. 6 The SkyBlue Algorithm The SkyBlue constraint solver maintains a set of constraints by constructing an MGB mgraph and executing the selected methods to satisfy the enforced constraints. Initially, the MGB mgraph is empty.
Reference: [14] <author> Brad A. Myers, Dario A. Giuse, Roger B. Dannenberg, Brad Vander Zanden, David S. Kosbie, Ed Per--vin, Andrew Mickish, and Philippe Marchal. Garnet: </author> <title> Comprehensive Support for Graphical, Highly-Interactive User Interfaces. </title> <journal> IEEE Computer, </journal> <volume> 23(11) </volume> <pages> 71-85, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including Garnet <ref> [14] </ref>, Rendezvous [11], and ThingLab II [13]. References [2, 6] contain additional references to constraint-based systems. One important type of constraint solver accepts a set of linear or non-linear relations over real-valued variables, and sets the variables to values that satisfy the relations. <p> The following subsections describe two applications in detail, emphasizing how the applications take advantage of the unique features of SkyBlue. 8.1 Multi-Garnet Garnet is a widely-used user interface toolkit that supports one-way required constraints (no hierarchies) <ref> [14] </ref>. The Multi-Garnet package uses the SkyBlue solver to add support for multi-way constraints and constraint hierarchies to Garnet [15, 17]. (a) 0.00 B 0.00 81.89A 272.56 a set of points.
Reference: [15] <author> Michael Sannella. </author> <title> Constraint Satisfaction and Debugging for Interactive User Interfaces. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: Finally, several applications that currently use SkyBlue are described. More information on SkyBlue, including complete pseudocode, is available in other papers <ref> [15, 16] </ref>. Contact the author for information on implementations of SkyBlue. 3 DeltaBlue and SkyBlue SkyBlue is a successor to the DeltaBlue algorithm [6, 18], which was used as the basis for the ThingLab II user interface development environment [13]. <p> The theory of constraint hierarchies describes several different ways to define which variable values "best" satisfy a constraint hierarchy [2]. For many sets of constraints, MGB mgraphs compute locally-predicate-better solutions to the constraint hierarchy according to this theory <ref> [13, 15] </ref>. 6 The SkyBlue Algorithm The SkyBlue constraint solver maintains a set of constraints by constructing an MGB mgraph and executing the selected methods to satisfy the enforced constraints. Initially, the MGB mgraph is empty. <p> Second, SkyBlue repeatedly tries to enforce each unenforced constraint by constructing an mvine (Section 6.2). It has been proven that if no unenforced constraints are mvine-enforcible (can be enforced by constructing an mvine), then the mgraph is MGB <ref> [15] </ref>. Third, SkyBlue executes the selected methods in the mgraph to satisfy the enforced constraints, topologically sorting the selected methods and collapsed cycles as described in Section 4. Each time an unenforced constraint is successfully enforced by constructing a mvine, one or more weaker constraints may become unenforced. <p> downstream methods of newly-enforced constraints, and downstream methods of redetermined variables. 7.2 Collecting Weak Unenforced Constraints It has been proven that, whenever an mvine is successfully constructed, the only unenforced constraints that could have become mvine-enforcible are those constraints that are strictly weaker than the root constraint of the mvine <ref> [15] </ref>. <p> The Multi-Garnet package uses the SkyBlue solver to add support for multi-way constraints and constraint hierarchies to Garnet <ref> [15, 17] </ref>. (a) 0.00 B 0.00 81.89A 272.56 a set of points. SkyBlue constraints are used to specify the relationship between the screen position of each point, the corresponding data value, and the positions and range numbers of the axes.
Reference: [16] <author> Michael Sannella. SkyBlue: </author> <title> A Multi-Way Local Propagation Constraint Solver for User Interface Construction. </title> <booktitle> In Proceedings of the ACM Symposium on User Interface Software and Technology, </booktitle> <address> Marina Del Rey, California, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Finally, several applications that currently use SkyBlue are described. More information on SkyBlue, including complete pseudocode, is available in other papers <ref> [15, 16] </ref>. Contact the author for information on implementations of SkyBlue. 3 DeltaBlue and SkyBlue SkyBlue is a successor to the DeltaBlue algorithm [6, 18], which was used as the basis for the ThingLab II user interface development environment [13].
Reference: [17] <author> Michael Sannella and Alan Borning. Multi-Garnet: </author> <title> Integrating Multi-Way Constraints with Garnet. </title> <type> Technical Report 92-07-01, </type> <institution> Department of Computer Science and Engineering, University of Washing-ton, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: The Multi-Garnet package uses the SkyBlue solver to add support for multi-way constraints and constraint hierarchies to Garnet <ref> [15, 17] </ref>. (a) 0.00 B 0.00 81.89A 272.56 a set of points. SkyBlue constraints are used to specify the relationship between the screen position of each point, the corresponding data value, and the positions and range numbers of the axes.
Reference: [18] <author> Michael Sannella, John Maloney, Bjorn Freeman-Benson, and Alan Borning. </author> <title> Multi-way versus One-way Constraints in User Interfaces: Experience with the DeltaBlue Algorithm. </title> <journal> Software|Practice and Experience, </journal> <volume> 23(5) </volume> <pages> 529-566, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Multi-way solvers allow a constraint to have multiple methods, which the solver can use to satisfy the constraint in different directions <ref> [18, 19] </ref>. Multi-way solvers are more powerful than one-way solvers, but it may be difficult for the user to understand and control the solutions produced without understanding the implementation of the solver. <p> Finally, several applications that currently use SkyBlue are described. More information on SkyBlue, including complete pseudocode, is available in other papers [15, 16]. Contact the author for information on implementations of SkyBlue. 3 DeltaBlue and SkyBlue SkyBlue is a successor to the DeltaBlue algorithm <ref> [6, 18] </ref>, which was used as the basis for the ThingLab II user interface development environment [13].
Reference: [19] <author> Brad Vander Zanden. </author> <title> A Domain-Independent Algorithm for Incrementally Satisfying Multi-Way Constraints. </title> <type> Technical Report CS-92-160, </type> <institution> Computer Science Department, University of Tennessee, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: Multi-way solvers allow a constraint to have multiple methods, which the solver can use to satisfy the constraint in different directions <ref> [18, 19] </ref>. Multi-way solvers are more powerful than one-way solvers, but it may be difficult for the user to understand and control the solutions produced without understanding the implementation of the solver.
Reference: [20] <author> Brad Vander Zanden, Brad Myers, Dario Giuse, and Pedro Szekely. </author> <title> The Importance of Pointer Variables in Constraint Models. </title> <booktitle> In Proceedings of the ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 155-164, </pages> <address> Hilton Head, South Carolina, </address> <month> November </month> <year> 1991. </year> <month> 15 </month>
Reference-contexts: Often, local propagation is more efficient than numeric solution techniques for solving a given set of constraints. There are two main types of local propagation solvers: one-way and multi-way. One-way solvers allow each constraint to have a single method, that satisfies the constraint in one direction <ref> [12, 20] </ref>. For example, a one-way solver might represent the constraint A + B = C by the single method C := A + B, and execute this method to reset C if A or B is changed.
References-found: 20

