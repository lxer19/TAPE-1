URL: http://www.cs.wustl.edu/~schmidt/globalinternet.ps.gz
Refering-URL: http://www.cs.wustl.edu/~irfan/resume/publications.html
Root-URL: 
Email: fjxh,irfan,schmidtg@cs.wustl.edu  
Title: Measuring the Impact of Event Dispatching and Concurrency Models on Web Server Performance Over High-speed
Author: James C. Hu Irfan Pyarali Douglas C. Schmidt 
Note: Funding provided by Siemens Medical Engineering.  
Address: St. Louis, Missouri  
Affiliation: Department of Computer Science Washington University,  
Abstract: An abridged version of this paper appeared in the Proceedings of the 2 nd Global Internet mini-conference held in conjunction with GLOBECOM '97, Phoenix, AZ, November, 1997. Abstract This paper provides two contributions to the study of high-performance Web servers. First, it outlines the optimizations necessary to build efficient and scalable Web servers and illustrates how we've applied some of these optimizations to create JAWS. JAWS is a high-performance Web server that is explicitly designed to alleviate overheads incurred by existing Web servers on high-speed networks. It consistently outperforms existing Web servers (such as Apache, Java Server, PHTTPD, Zeus, and Netscape Enterprise) over 155 Mbps ATM networks on UNIX platforms. Second, this paper describes how we have customized JAWS to leverage advanced features of Windows NT for multiprocessor hardware over ATM. The Windows NT features used in JAWS include asynchronous mechanisms for connection establishment and data transfer. Our previous benchmark-ing studies demonstrate that once the overhead of disk I/O is reduced to a negligible constant factor (e.g., via memory caches), the primary determinants of Web server performance are the concurrency and event dispatching strategies. Our performance results over a ~155 Mbps ATM link indicate that certain Windows NT asynchronous I/O mechanisms (i.e., TransmitFile) provide superior performance for large file transfers compared with conventional synchronous multi-threaded servers. On the other hand, synchronous event dispatching performed better for files less than 50 Kbytes. Thus, to provide optimal performance, Web servers should be adaptive, choosing to use different mechanisms (e.g., fl This work was supported in part by grants from Object Technologies International and Eastman Kodak Company.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alexander Carlton. </author> <title> An Explanation of the SPECweb96 Benchmark. Standard Performance Evaluation Corporation whitepa-per, </title> <note> 1996. Available from http://www.specbench.org/. </note>
Reference-contexts: Document Size Frequency 500 bytes 35% 5 Kbytes 50% 50 Kbytes 14% 5 Mbytes 1% Table 1: File Access Patterns This table represents actual load conditions on popular servers, based on a study of file access patterns conducted by SPEC <ref> [1] </ref>. 4.3 Experimental Results The results presented below compare the performance of several different adaptations of the JAWS Web server. We discuss the effect of different event dispatching and I/O models on throughput and latency. Throughput is defined as the average number of bits received per second by the client. <p> The growing number of Web servers has prompted the need for assessing their relative performance. The current standard benchmarks available are WebStone [4] (by SGI) and SPECweb96 <ref> [1] </ref> (by SPEC), both heavily influenced by the design of LADDIS [21]. WebStone and SPECweb96 attempt to measure overall performance. They rate the performance of a server with a single number (a higher number indicates better performance).
Reference: [2] <author> Zubin D. Dittia, Guru M. Parulkar, and Jr. Jerome R. Cox. </author> <title> The APIC Approach to High Performance Network Interface Design: Protected DMA and Other Techniques. </title> <booktitle> In Proceedings of INFOCOM '97, </booktitle> <address> Kobe, Japan, </address> <month> April </month> <year> 1997. </year> <note> IEEE. </note>
Reference-contexts: For example, different OS platforms may provide specialized I/O mechanisms (such as asynchronous I/O or bulk data transfer) or specialized devices (such as high-speed ATM network interfaces <ref> [2] </ref>). Therefore, simply porting a Web server to use common OS mechanisms and APIs (such as BSD sockets, select, and POSIX threads) is not sufficient to achieve maximal performance on different OS platforms.
Reference: [3] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlis-sides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: (2) utilizing concurrency and event dispatching processing routines that are customized to the OS platform in order to reduce server load and improve end-to-end quality of service. 6.3 Web Server Design and Implementation Design patterns are re-usable software abstractions that have been observed to occur many times in actual solutions <ref> [3] </ref>. A design pattern is intended to solve a general design problem for a specific context. Many patterns have been observed in the context of concurrent, parallel and distributed systems. Many of these ideas are applicable to Web server design.
Reference: [4] <author> Gene Trent and Mark Sake. WebSTONE: </author> <title> The First Generation in HTTP Server Benchmarking. Silicon Graphics, </title> <publisher> Inc. </publisher> <address> whitepa-per, </address> <month> February </month> <year> 1995. </year> <note> Available from http://www.sgi.com/. </note>
Reference-contexts: The two workstations were connected via an ATM network running through a FORE Systems ASX-200BX, with a maximum bandwidth of 622 Mbps. However, due to limitations of LAN emulation mode, the peak bandwidth of our testbed is approximately 120 Mbps. 4.2 Software Request Generator We used the WebSTONE <ref> [4] </ref> v2.0 benchmarking software to collect client- and server-side metrics. These metrics included average server throughput, and average client latency. Web-STONE is a standard benchmarking utility, capable of generating load requests that simulate typical Web server file access patterns. <p> The growing number of Web servers has prompted the need for assessing their relative performance. The current standard benchmarks available are WebStone <ref> [4] </ref> (by SGI) and SPECweb96 [1] (by SPEC), both heavily influenced by the design of LADDIS [21]. WebStone and SPECweb96 attempt to measure overall performance. They rate the performance of a server with a single number (a higher number indicates better performance).
Reference: [5] <author> Tim Harrison, Irfan Pyrarli, Douglas C. Schmidt, and Thomas Jordan. </author> <title> Proactor An Object Behavioral Pattern for Dispatching Asynchronous Event Handlers. </title> <booktitle> In The 4 th Pattern Languages of Programming Conference, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: For example, an optimized file I/O system that automatically caches open files in main memory helps to reduce latency. Likewise, support for asynchronous event dispatching and the Proactor pattern <ref> [5] </ref> can increase server throughput by reducing context switching and synchronization overhead incurred from multi-threading. This paper presents two complementary strategies for developing optimized Web servers. <p> Thus, the initiating thread does not block. When the kernel has completed the operation, the kernel notifies the process through an I/O completion port. An I/O completion port is a kernel-level thread-safe queue of I/O completion notifications. The pros and cons of using asynchronous event dispatching are described in <ref> [5] </ref>. There are several benefits of using I/O completion ports. * Increased flexibility and scalability The thread initiating the asynchronous I/O operation and the thread de-queueing the completion status from the port can be different.
Reference: [6] <author> James Hu, Sumedh Mungee, and Douglas C. Schmidt. </author> <title> Principles for Developing and Measuring High-performance Web Servers over ATM. </title> <note> In Submitted to INFOCOM '97 (Washington University Technical Report #WUCS-97-10), </note> <month> February </month> <year> 1997. </year>
Reference-contexts: JAWS is both a Web server and framework for building flexible and adaptive high-performance Web systems. The optimizations and design principles in JAWS are guided by results from our empirical analysis <ref> [6] </ref> of Web server performance bottlenecks over high-speed ATM networks. <p> The UNIX version of JAWS (described in <ref> [6] </ref>) consistently outperforms other servers in our test suite of Web servers over 155 Mbps ATM networks. <p> CVF is implemented using a novel synchro-nization strategy that minimizes locking overhead. Tilde and CVF are decoupled from the three core JAWS components described above to allow transparent configurations that depend on platform support for high-performance cached filesystems. Additional information on JAWS I/O optimizations is available in <ref> [6] </ref>. 3 Event Dispatching and Concurrency Strategies for Web Servers The JAWS Event Dispatcher is a flexible component that can be configured to use multiple concurrency strategies (such as Thread Pool and Thread-per-Request).
Reference: [7] <editor> Prashant Jain and Douglas C. Schmidt. </editor> <publisher> Service Configurator: </publisher>
Reference-contexts: In addition, the Server Manager configures the event dispatching models used by Protocol Handlers. To support adaptation, the Server Manager uses the Service Configurator <ref> [7] </ref> pattern to dynamically relink (i.e., at run-time) portions JAWS when it is updated (e.g., to support new versions of the HTTP protocol or to configure a more efficient algorithm or implementation).
References-found: 7

