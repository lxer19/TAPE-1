URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-92-31.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: A weak-consistency architecture for distributed information services  
Author: Richard A. Golding 
Keyword: weak-consistency process group, quorum multicast, component independence, scalability, fault tolerance.  
Address: Santa Cruz, CA 95064  
Affiliation: Concurrent Systems Laboratory Computer and Information Sciences University of California, Santa Cruz  
Date: July 6, 1992  
Pubnum: UCSC-CRL-92-31  
Abstract: Services provided on wide-area networks like the Internet present several challenges. The reliability, performance, and scalability expected of such services often requires they be implemented using multiple, replicated servers. One possible architecture implements the replicas as a weak-consistency process group. This architecture provides good scalability and availability, handles portable computer systems, and minimizes the effect of users on each other. The key principles in this architecture are component independence, a process group protocol that provides small summaries of database contents, caching database slices, and the quorum multicast client-to-server communication protocol. A distributed bibliographic database system serves as an example. 
Abstract-found: 1
Intro-found: 1
Reference: [Agrawal91] <author> D. Agrawal and A. Malpani. </author> <title> Efficient dissemination of information in computer networks. </title> <journal> Computer Journal, </journal> <volume> 34(6) </volume> <month> 534-41 (December </month> <year> 1991). </year>
Reference-contexts: Grapevine [Demers88] used this technique. 3 I have also developed a similar protocol that requires O (n 2 ) state per process rather than O (n); but allows unsynchronized clocks. This alternate protocol was discovered independently by Agrawal and Malpani <ref> [Agrawal91] </ref>. 6 Each process also maintains an acknowledgment timestamp vector to record what messages have been acknowledged by other processes: Acknowledgment vector = list of (process id, timestamp).
Reference: [Alonso90a] <author> Rafael Alonso, Daniel Barbar a, and Luis L. Cova. </author> <title> Using stashing to increase node autonomy in distributed file systems. </title> <booktitle> Proceedings of 9th IEEE Symposium on Reliability Distributed Systems (October 1990). </booktitle>
Reference-contexts: This is an especially difficult expectation to meet on portable systems, where the system may be disconnected from the network for a long time or may be semi-connected by an expensive low-bandwidth connection. Several researchers are investigating file systems that can tolerate disconnection <ref> [Kistler91, Alonso90a] </ref>. Throughout this paper the term process refers to a process, running at some site. Sites are processor nodes on the network such as a workstation or file server. Server processes have access to pseudo-stable storage such as disk that will not be affected by a system crash.
Reference: [Alonso90b] <author> Rafael Alonso, Daniel Barbar a, and Hector Garcia-Molina. </author> <title> Data caching issues in an information retrieval system. </title> <journal> ACM Transactions on Database Systems, </journal> <month> 15(3) (September </month> <year> 1990). </year>
Reference-contexts: Caches and slices differ in their handling of new database entries: slice servers will store a copy of a new entry if it matches some predicate; cache servers will not. Alonso, Barbar a, and Garcia-Molina have researched these issues for systems that use bounded inconsistency <ref> [Alonso90b] </ref>. They point out that slices (which they call quasi-copies) are similar to materialized views in a relational database. As with views, the entries in a slice are determined by evaluating an expression that has the same form as a query on the database.
Reference: [Barbar a90] <author> Daniel Barbar a and Hector Garcia-Molina. </author> <title> The case for controlled inconsistency in replicated data (position paper). </title> <booktitle> Proceedings of the Workshop on the Management of Replicated Data (Houston, Texas), </booktitle> <pages> pages 35-8, </pages> <editor> Luis-Felipe Cabrera and Jehan-Francois P aris, editors (November 1990). </editor> <volume> 14 </volume>
Reference-contexts: Messages with no causal relation, however, can be delivered in different orders at different processes. Messages can also be delivered so that the database at one site never differs from the correct global value by more than a constant <ref> [Pu91, Barbar a90] </ref>. Weaker orderings include a per-process or FIFO channel ordering, where the messages from any particular process are delivered in order, but the streams of messages from different processes may be interleaved arbitrarily. Finally, there is the possibility of guaranteeing no particular order. 3. Time of delivery.
Reference: [Birman87] <author> Kenneth P. Birman and Thomas A. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <month> 47-76 (February </month> <year> 1987). </year>
Reference-contexts: This process marks p as failed in its view. This information propagates to other processes, re-establishing k + 1-connectivity along the way. In contrast to this system, previous group membership mechanisms ensure greater consistency of group views at the expense of latency and communication overhead. Both the Isis system <ref> [Birman87, Birman91] </ref> and a group membership mechanism by Cristian [Cristian89] are built on top of synchronous atomic broadcast protocols, and hence provide each process with the same sequence of group views.
Reference: [Birman91] <author> Kenneth P. Birman, Robert Cooper, and Barry Gleeson. </author> <title> Programming with process groups: group and multicast semantics. </title> <note> Technical report TR-91-1185 (29 January 1991). </note> <institution> Department of Computer Science, Cornell University. </institution>
Reference-contexts: This process marks p as failed in its view. This information propagates to other processes, re-establishing k + 1-connectivity along the way. In contrast to this system, previous group membership mechanisms ensure greater consistency of group views at the expense of latency and communication overhead. Both the Isis system <ref> [Birman87, Birman91] </ref> and a group membership mechanism by Cristian [Cristian89] are built on top of synchronous atomic broadcast protocols, and hence provide each process with the same sequence of group views.
Reference: [Cristian89] <author> Flaviu Cristian. </author> <title> A probabilistic approach to distributed clock synchronization. </title> <booktitle> Proceedings of 9th International Conference on Distributed Computing Systems (Newport Beach, </booktitle> <address> CA), pages 288-96 (1989). </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This information propagates to other processes, re-establishing k + 1-connectivity along the way. In contrast to this system, previous group membership mechanisms ensure greater consistency of group views at the expense of latency and communication overhead. Both the Isis system [Birman87, Birman91] and a group membership mechanism by Cristian <ref> [Cristian89] </ref> are built on top of synchronous atomic broadcast protocols, and hence provide each process with the same sequence of group views.
Reference: [Demers88] <author> Alan Demers, Dan Greene, Carl Hauser, Wes Irish, John Larson, Scott Shenker, Howard Sturgis, Dan Swinehart, and Doug Terry. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <journal> Operating Systems Review, </journal> <volume> 22(1) </volume> <month> 8-32 (January </month> <year> 1988). </year>
Reference-contexts: The vector provides a fast mechanism for transmitting summary information about the state of a process. 2 This paper is written in terms of a log. However, if update information can be retrieved from database contents a log is not technically necessary. Grapevine <ref> [Demers88] </ref> used this technique. 3 I have also developed a similar protocol that requires O (n 2 ) state per process rather than O (n); but allows unsynchronized clocks.
Reference: [Emtage92] <author> Alan Emtage and Peter Deutsch. </author> <title> archie an electronic directory service for the Internet. </title> <booktitle> Proceedings of Winter 1992 Usenix Conference (San Francisco, </booktitle> <month> 24-24 January </month> <year> 1992), </year> <month> pages 93-110 (January </month> <year> 1992). </year>
Reference-contexts: The archie anonymous FTP location service reported on the order of 10 000 queries per day (0.12 queries per second) using two servers in November 1991 <ref> [Emtage92] </ref>. The archie system is a specialized service with a limited audience, as compared to traditional information services used by the general public, such as newspapers and library card catalogues. Anecdotal evidence points to some current services with nearly 100 queries per second.
Reference: [Golding91a] <author> Richard A. Golding. </author> <title> Distributed epidemic algorithms for replicated tuple spaces. </title> <note> Technical report HPL-CSP-91-15 (28 June 1991). </note> <institution> Concurrent Systems Project, Hewlett-Packard Laboratories. </institution>
Reference-contexts: The list of hosts to be polled and the experimental results are propagated using the group communication protocols outlined in the next section. 5 2.2 Group communication I have developed a new group communication protocol that provides reliable, eventual delivery, called timestamped anti-entropy <ref> [Golding91a] </ref>. Since the protocol is fault tolerant, messages will be delivered to every process in the group even if processes temporarily fail or are disconnected from the network.
Reference: [Golding91b] <author> Richard A. Golding. </author> <title> Accessing replicated data in a large-scale distributed systems. </title> <note> Master's thesis; published as Technical report UCSC-CRL-91-18 (June 1991). </note> <institution> Computer and Information Sciences Board, University of California at Santa Cruz. </institution>
Reference-contexts: Two hosts on an Ethernet can exchange a pair of datagram packets in a few milliseconds, while two hosts on the same continent may require 50-200 milliseconds. Hosts on different continents can require even longer. Packet loss rates of 40% are common, and can go much higher <ref> [Golding91b] </ref>. The Internet has many single points of failure, and it is usually partitioned into several non-communicating networks. This is a difficult environment for building distributed applications. The application architecture must also handle the vast number of users that can access a widely-available service. <p> A recent study of workstation reliability [Long91] shows that most hosts are available better than 90% of the time, with a mean time-to-failure (MTTF) between two and three weeks. Another study has found that hosts within North America respond when polled about 90% of the time <ref> [Golding91b] </ref>, indicating that long-term network failure is probably uncommon. This same study showed that communications were more reliable the closer two sites were. This architecture can therefore be expected to provide nearly complete availability. Each server maintains a copy of the database. <p> Servers can use a similar mechanism to bias their partner selection to favor other nearby servers. I have investigated quorum multicast protocols that will use preferred sites <ref> [Golding91b, Golding92b] </ref>. These protocols use an ordering on m sites, and attempt to communicate with the best n of them. <p> Predictions can be derived statically from the topology of the network, or dynamically using performance samples. The topology of the Internet is quite complex, and no detailed topological models are available. Approximations of topological information, such as hop counts, have been shown to be poor performance predictors <ref> [Golding91b] </ref>. Dynamic prediction is generally more accurate. Communication latency is often predicted by a moving average of recent samples.
Reference: [Golding92a] <author> Richard Golding. </author> <title> End-to-end performance prediction for the Internet progress report. </title> <note> Technical report UCSC-CRL-92-26 (June 1992). </note> <institution> Computer and Information Sciences Board, University of California at Santa Cruz. </institution>
Reference-contexts: If large amounts of information must be transferred, then bandwidth will dominate. The prediction should be biased by the probability that the client can communicate with the server. A detailed examination of this problem is available <ref> [Golding92a] </ref>. Predictions can be derived statically from the topology of the network, or dynamically using performance samples. The topology of the Internet is quite complex, and no detailed topological models are available. Approximations of topological information, such as hop counts, have been shown to be poor performance predictors [Golding91b].
Reference: [Golding92b] <author> Richard A. Golding and Darrell D. E. </author> <title> Long. Quorum-oriented multicast protocols for data replication. </title> <booktitle> Proceedings of 8th International Conference on Data Engineering (Tempe, </booktitle> <address> Arizona, </address> <month> February </month> <year> 1992), </year> <pages> pages 490-7 (February 1992). </pages> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Servers can use a similar mechanism to bias their partner selection to favor other nearby servers. I have investigated quorum multicast protocols that will use preferred sites <ref> [Golding91b, Golding92b] </ref>. These protocols use an ordering on m sites, and attempt to communicate with the best n of them.
Reference: [Golding92c] <author> Richard A. Golding and Kim Taylor. </author> <title> Group membership in the epidemic style. </title> <note> Technical report UCSC-CRL-92-13 (22 April 1992). </note> <institution> Computer and Information Sciences Board, University of California at Santa Cruz. </institution>
Reference-contexts: The group communication protocol uses this information to identify what sites should receive multicast messages. This section sketches a weak-consistency group membership protocol; details and proofs of correctness are reported elsewhere <ref> [Golding92c] </ref>. Each process maintains an eventually-consistent view of the membership, indicating the status of each member: View = list of (process id, status, timestamp). Views are updated during anti-entropy sessions, and eventually all processes can reach agreement if the membership stops changing.
Reference: [Jacobson88] <author> Van Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> Proceedings of SIGCOMM '88, </booktitle> <pages> pages 314-29 (1988). </pages>
Reference-contexts: of a sequence a i is defined as a t = wa t + (1 w)a t1 ; with a 0 = 0: The estimator can be biased to weight recent or older samples more heavily by adjusting the parameter w: This method is used in most implementations of TCP <ref> [Jacobson88] </ref>. That work assumes that latency is normally distributed, and computes an estimate of the variance to determine failure timeouts. The actual distribution is generally similar to that in Figure 4. While it is not normally distributed, it is predictable.
Reference: [Kistler91] <author> James J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <booktitle> Proceedings of 13th ACM Symposium on Operating Systems Principles (Asilomar, </booktitle> <address> Pacific Grove, CA), </address> <month> pages 213-25 (13 October </month> <year> 1991). </year> <institution> Association for Computing Machinery SIGOPS. </institution>
Reference-contexts: This is an especially difficult expectation to meet on portable systems, where the system may be disconnected from the network for a long time or may be semi-connected by an expensive low-bandwidth connection. Several researchers are investigating file systems that can tolerate disconnection <ref> [Kistler91, Alonso90a] </ref>. Throughout this paper the term process refers to a process, running at some site. Sites are processor nodes on the network such as a workstation or file server. Server processes have access to pseudo-stable storage such as disk that will not be affected by a system crash.
Reference: [Ladin91] <author> Rivka Ladin, Barbara Liskov, and Liuba Shrira. </author> <title> Lazy replication: exploiting the semantics of distributed services. </title> <booktitle> Position paper for 4th ACM-SIGOPS European Workshop (Bologna, </booktitle> <month> 3-5 September </month> <year> 1990). </year> <note> Published as Operating Systems Review, 25(1) </note> <month> 49-55 (January </month> <year> 1991). </year>
Reference-contexts: A total ordering means that all processes will see the same messages in the same order, though that order will not necessarily be the order messages were sent. Causal ordering implies that any messages with a potential causal relation will be delivered in the same order at all replicas <ref> [Lamport78, Ladin91] </ref>. Messages with no causal relation, however, can be delivered in different orders at different processes. Messages can also be delivered so that the database at one site never differs from the correct global value by more than a constant [Pu91, Barbar a90].
Reference: [Lamport78] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <month> 558-65 </month> <year> (1978). </year> <month> 15 </month>
Reference-contexts: A total ordering means that all processes will see the same messages in the same order, though that order will not necessarily be the order messages were sent. Causal ordering implies that any messages with a potential causal relation will be delivered in the same order at all replicas <ref> [Lamport78, Ladin91] </ref>. Messages with no causal relation, however, can be delivered in different orders at different processes. Messages can also be delivered so that the database at one site never differs from the correct global value by more than a constant [Pu91, Barbar a90]. <p> The timestamps appended to each message can be used to generate a variety of different message delivery orderings, including total (but not causal), per-process, or no ordering. Causal orderings are possible if process clocks meet Lamport's happens-before condition <ref> [Lamport78] </ref>. To execute the protocol, each process must maintain three data structures: a message log and two timestamp vectors [Mattern88]. These must all be maintained on stable storage, so they are not corrupted when the site or process crashes.
Reference: [Little90] <author> Mark C. Little and Santosh K. Shrivastava. </author> <title> Replicated k-resilient objects in Arjuna. </title> <booktitle> Pro--ceedings of Workshop on Management of Replicated Data (Houston, </booktitle> <address> Texas), </address> <month> pages 53-8 (November </month> <year> 1990). </year>
Reference-contexts: Both the Isis system [Birman87, Birman91] and a group membership mechanism by Cristian [Cristian89] are built on top of synchronous atomic broadcast protocols, and hence provide each process with the same sequence of group views. The Arjuna system <ref> [Little90] </ref> maintains a logically centralized group view via atomic transactions. 2.4 Performance Three disadvantages of weak-consistency process groups were pointed out in the last section: some operations must be delayed until request messages have been observed throughout the group; they require on-disk message logs; and messages can be lost when many
Reference: [Long91] <author> Darrell D. E. Long, John L. Carroll, and C. J. Park. </author> <title> A study of the reliability of Internet sites. </title> <booktitle> Proceedings of 10th IEEE Symposium on Reliability in Distributed Software and Database Systems (Pisa, </booktitle> <address> Italy), </address> <month> pages 177-86 (September </month> <year> 1991). </year> <institution> Institute of Electrical and Electronics Engineers. </institution>
Reference-contexts: The network is sufficiently reliable that any two processes can eventually exchange messages, but it need never be free of 1 This value was provided by Darrell Long, who has been tracking the Internet population as part of a longitudinal reliability study <ref> [Long91, Long92] </ref>. 1 partitions. Semi-partitions are possible, where only a low-bandwidth connection is available between one or more sites and the rest of the network. 1.2 Principles There are some general principles guiding the solutions presented here. Service replication is the general mechanism for meeting availability demands and enabling scalability. <p> The service is available as long as clients remain connected to at least one server, and that server is functioning. A recent study of workstation reliability <ref> [Long91] </ref> shows that most hosts are available better than 90% of the time, with a mean time-to-failure (MTTF) between two and three weeks. Another study has found that hosts within North America respond when polled about 90% of the time [Golding91b], indicating that long-term network failure is probably uncommon.
Reference: [Long92] <author> Darrell D. E. </author> <title> Long. A replicated monitoring tool. </title> <note> Technical report UCSC-CRL-92-14 (April 1992). </note> <institution> Computer and Information Sciences Board, University of California at Santa Cruz. </institution>
Reference-contexts: The network is sufficiently reliable that any two processes can eventually exchange messages, but it need never be free of 1 This value was provided by Darrell Long, who has been tracking the Internet population as part of a longitudinal reliability study <ref> [Long91, Long92] </ref>. 1 partitions. Semi-partitions are possible, where only a low-bandwidth connection is available between one or more sites and the rest of the network. 1.2 Principles There are some general principles guiding the solutions presented here. Service replication is the general mechanism for meeting availability demands and enabling scalability. <p> Then it would use rumor mongery to propagate recent updates from one site to another. Finally, pairs of sites would periodically exchange all known updates in an anti-entropy session until they were mutually consistent. Of the three methods, only anti-entropy guaranteed delivery to all sites. The tattler <ref> [Long92] </ref> is another system that uses weak-consistency groups. It uses group communication to coordinate a group of processes that periodically retrieve uptime statistics from Internet hosts.
Reference: [Mattern88] <author> Friedemann Mattern. </author> <title> Virtual time and global states of distributed systems. </title> <booktitle> Proceedings of International Workshop on Parallel Algorithms (Chateau de Bonas, </booktitle> <address> France, </address> <month> October </month> <year> 1988), </year> <pages> pages 215-26, </pages> <editor> M. Cosnard, Y. Robert, P. Quinton, and M. Raynal, editors (1989). </editor> <publisher> Elsivier Science Publishers, North-Holland. </publisher>
Reference-contexts: Causal orderings are possible if process clocks meet Lamport's happens-before condition [Lamport78]. To execute the protocol, each process must maintain three data structures: a message log and two timestamp vectors <ref> [Mattern88] </ref>. These must all be maintained on stable storage, so they are not corrupted when the site or process crashes.
Reference: [Pu91] <author> Calton Pu and Avraham Leff. </author> <title> Replica control in distributed systems: an asynchronous approach. </title> <note> Technical report CUCS-053-090 (8 January 1991). </note> <institution> Department of Computer Science, Columbia University. </institution>
Reference-contexts: Messages with no causal relation, however, can be delivered in different orders at different processes. Messages can also be delivered so that the database at one site never differs from the correct global value by more than a constant <ref> [Pu91, Barbar a90] </ref>. Weaker orderings include a per-process or FIFO channel ordering, where the messages from any particular process are delivered in order, but the streams of messages from different processes may be interleaved arbitrarily. Finally, there is the possibility of guaranteeing no particular order. 3. Time of delivery.
Reference: [Quarterman86] <author> John S. Quarterman and Josiah C. Hoskins. </author> <title> Notable computer networks. </title> <journal> Communications of the ACM, </journal> <volume> 29(10) </volume> <month> 932-71 (October </month> <year> 1986). </year>
Reference-contexts: Instead, messages are first delivered to one site, then propagated asynchronously to others. The answer a server gives to a client query depends on whether that server has observed the update yet. Eventually, every server will observe the update. Many existing information systems, such as Usenet <ref> [Quarterman86] </ref> and the Xerox Grapevine system [Schroeder84], use similar techniques. Users of a bibliographic database are unlikely to be worried if an update takes a few hours to propagate to every server, as long as their updates are available right away at their server.
Reference: [Schatz90] <author> Bruce Raymond Schatz. </author> <title> Interactive retrieval in information spaces distributed across a wide-area network. </title> <type> Technical report TR 90-35 (December 1990). </type> <institution> Department of Computer Science, University of Arizona. </institution>
Reference-contexts: Despite this environment, users expect a service to behave as if it were being provided on a local system. Several studies have shown that people work best if response time is under one second for queries presenting new information, and much less for queries that provide additional details <ref> [Schatz90] </ref>. Furthermore, users expect to be able to make use of the service as long as their local systems are functioning.
Reference: [Schroeder84] <author> Michael D. Schroeder, Andrew D. Birrell, and Roger M. Needham. </author> <title> Experience with Grapevine: the growth of a distributed system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <month> 3-23 (February </month> <year> 1984). </year>
Reference-contexts: The answer a server gives to a client query depends on whether that server has observed the update yet. Eventually, every server will observe the update. Many existing information systems, such as Usenet [Quarterman86] and the Xerox Grapevine system <ref> [Schroeder84] </ref>, use similar techniques. Users of a bibliographic database are unlikely to be worried if an update takes a few hours to propagate to every server, as long as their updates are available right away at their server. <p> In particular, there is a non-zero probability that two processes have received all the same messages, and all processes are guaranteed to agree in finite but unbounded time if no further messages are sent. Grapevine <ref> [Schroeder84] </ref> was one of the first wide-area systems to use weak consistency. In that system, replicated data was updated first at one site, then the results were propagated to other sites in the background. Updates were propagated three ways.
Reference: [Wilkes91] <author> John Wilkes. </author> <title> The refdbms bibliography database user guide and reference manual. </title> <note> Technical report HPL-CSP-91-11 (20 May 1991). </note> <institution> Hewlett-Packard Laboratories. </institution> <month> 16 </month>
Reference-contexts: This project aims to evaluate this architecture for convenience and performance. The refdbms system is derived from a system developed at Hewlett-Packard Laboratories over several years <ref> [Wilkes91] </ref>. That system emphasized sharing bibliography information within a research group. Users could search a database by keywords, use references in T E X, and enter new or changed references. Refdbms is being extended to handle multiple databases distributed to widely dispersed sites.
References-found: 27

