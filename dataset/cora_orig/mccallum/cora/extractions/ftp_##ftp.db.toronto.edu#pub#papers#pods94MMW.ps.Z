URL: ftp://ftp.db.toronto.edu/pub/papers/pods94MMW.ps.Z
Refering-URL: http://www.cs.toronto.edu/~mendel/papers.html
Root-URL: 
Email: mendel@db.toronto.edu  milo@db.toronto.edu  Emmanuel.Waller@lri.fr  
Title: Object Migration  
Author: Alberto O. Mendelzon Tova Milo Emmanuel Waller 
Address: Toronto, Canada M5S 1A1  Toronto, Canada M5S 1A1  91405 Orsay, France  
Affiliation: CSRI, University of Toronto  CSRI, University of Toronto  LRI, University of Paris-Sud  
Abstract: We study a mechanism that supports the migration of objects from one class of an OODB to another, thereby enabling us to model the same object playing different roles throughout its lifetime. Object migration may introduce typing conflicts due to the different typing constraints imposed by the classes. We present a coercion-like adaptation process that automatically resolves these conflicts. The process combines re-classification of objects and modification of attributes. We study the computational complexity of the problem, and show that the adaptation process can be performed efficiently in databases with covariant schemas. 
Abstract-found: 1
Intro-found: 1
Reference: [ABGO93] <author> A. Albano, R. Bergamini, G. Ghelli, and R. Orsini. </author> <title> An object data model with roles. </title> <booktitle> In 18th Conf. on Very Large Databases, VLDB, Dublin, Ireland, </booktitle> <pages> pages 39-51, </pages> <year> 1993. </year>
Reference-contexts: We discuss at the end how our techniques can be extended to the general case. Note that authors who treated the more general case <ref> [RS91, ABGO93, SZ89, Fis87] </ref> remained mostly at the conceptual and descriptive level. An exception is Su [Su91], whose model allows objects to belong to several classes simultaneously; but the problem he considers is very different from ours, namely the analysis of sequences of migrations produced by a transaction. <p> Such conflicts must also be resolved. We can see two approaches to the resolution of the type conflicts caused by object migration. The first one is to ask the user to provide, for each allowable object move, a full specification of the state adaptation process <ref> [RS91, ABGO93] </ref> and to explicitly resolve every conflict. The second approach is to allow the user to 232 provide only a partial specification, and to resolve other conflicts automatically, using a coercion-like adaptation mechanism. <p> Multiple Roles: Objects may have simultaneously multiple independent roles. For example, a person can be simultaneously a student, an employee, a member of the national bridge team, etc. There are several proposals to allow an object to have multiple aspects [RS91] or play multiple roles <ref> [ABGO93, Fis87, SZ89] </ref>. Our techniques can be used to support automatic adaptation in such systems. Consider the graph representation of a database. The class nodes represent the different aspects/ roles. Each object node has class edges to all the aspects/roles of the object.
Reference: [AK89] <author> S. Abiteboul and P. Kanellakis. </author> <title> Identity as a query language primitive. </title> <booktitle> In Proc. SIGMOD, Portland, Oregon, </booktitle> <pages> pages 159-173, </pages> <year> 1989. </year>
Reference-contexts: The definitions and algorithms should be adjusted accordingly. Values: The data model considered above supports objects and classes. A similar adaptation technique can be used for models that support (complex) values as well (e.g. <ref> [AK89] </ref>). Consider the graph representation of a database. In addition to object and class nodes, we now also have value and type nodes. Each occurrence of a (complex) value in the database is represented by a node (different occurrences of the same value are represented by distinct nodes). <p> Various techniques have been developed for choosing a unique model for a data-log program with negation. These techniques might be used here by considering an object-oriented variant of datalog with negation, featuring overriding [ALUW93] and object identity <ref> [AK89] </ref>. The migration of an object could then be specified in such a language, and minimal distance can correspond to minimal model. Whether the minimal model obtained would also make sense with respect to object migration, appears a very interesting issue.
Reference: [AKW90] <author> S. Abiteboul, P. Kanellakis, and E. Waller. </author> <title> Method schemas. </title> <booktitle> In Proc. 9th Symp. on Principles of Database Systems PODS, </booktitle> <pages> pages 16-27, </pages> <year> 1990. </year>
Reference-contexts: Now the computational problem appears: can we do this efficiently? In general, we show the problem to be Co-NP-Complete in the size of the database instance. But for an important class of schemas, the covariant schemas <ref> [AKW90] </ref>, we give a linear time algorithm. We introduce different distance measurements and show how they can be used to control the adaptation process. We study the relationship between adaptation techniques based on different distance measurements. <p> The effect of adaptation on method execution is studied in section 7. Possible extensions and applications of the techniques are considered in section 8. Finally, conclusions are presented in section 9. 2 Preliminaries In this section we briefly introduce the data model. We use the data model of <ref> [AKW90] </ref>, extended with set values. The presentation below is rather informal. (For formal definition see [AKW90].) We use in this work a specific data model, but the results can be easily adapted to other object oriented data models. <p> Finally, conclusions are presented in section 9. 2 Preliminaries In this section we briefly introduce the data model. We use the data model of <ref> [AKW90] </ref>, extended with set values. The presentation below is rather informal. (For formal definition see [AKW90].) We use in this work a specific data model, but the results can be easily adapted to other object oriented data models. We have an isa hierarchy of classes fC; g, where each class represents a set of objects. <p> Data models that support (complex) values are considered in section 8. 3 Attributes correspond to the "base" methods of <ref> [AKW90] </ref>, and methods are the "coded methods" there. 233 procedures. <p> The question is whether moving an object may cause the execution of some methods associated with the object to fail. The notion of consistent method schema was defined in <ref> [AKW90] </ref>. Informally, a database schema DB that includes methods is consistent iff for every consistent instance (i.e. an instance where all the attributes are correctly typed) none of the methods fail. (for formal definition of consistency and failure, see [AKW90]). <p> The notion of consistent method schema was defined in <ref> [AKW90] </ref>. Informally, a database schema DB that includes methods is consistent iff for every consistent instance (i.e. an instance where all the attributes are correctly typed) none of the methods fail. (for formal definition of consistency and failure, see [AKW90]).
Reference: [ALUW93] <author> S. Abiteboul, G. Lausen, H. Uphoff, and E. Waller. </author> <title> Methods and rules. </title> <booktitle> In Proc. </booktitle> <address> SIG-MOD, Washington D.C., </address> <pages> pages 32-41, </pages> <year> 1993. </year>
Reference-contexts: Another possibility is to refine the adaptation process so that a unique database is chosen. Various techniques have been developed for choosing a unique model for a data-log program with negation. These techniques might be used here by considering an object-oriented variant of datalog with negation, featuring overriding <ref> [ALUW93] </ref> and object identity [AK89]. The migration of an object could then be specified in such a language, and minimal distance can correspond to minimal model. Whether the minimal model obtained would also make sense with respect to object migration, appears a very interesting issue.
Reference: [BM92] <author> C. Beeri and T. Milo. </author> <title> Functional and predicative programming in oodb's. </title> <booktitle> In Proc. 11th Symp. on Principles of Database Systems PODS, San-Diego, </booktitle> <pages> pages 176-190, </pages> <year> 1992. </year>
Reference-contexts: Coercion for complex values can then be defined in terms of their components. A similar approach can also be used for databases that supports complex types other than tuples and sets, e.g. bags, list, and arbitrary abstract data types <ref> [BM92] </ref>. Multiple Roles: Objects may have simultaneously multiple independent roles. For example, a person can be simultaneously a student, an employee, a member of the national bridge team, etc. There are several proposals to allow an object to have multiple aspects [RS91] or play multiple roles [ABGO93, Fis87, SZ89].
Reference: [Bor85] <author> A. Borgida. </author> <title> Language features for flexible handling of exceptions in information system. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 10(4) </volume> <pages> 563-603, </pages> <year> 1985. </year>
Reference-contexts: introduce a particular notion of closeness by defining a distance metric that measures the difference between database states, and use it to determine the nearest consistent state to the original one in which the moved object is in the desired class. (Similar approaches to update/revision of knowledge bases appear in <ref> [Bor85, Dal88, Sat88, Win88] </ref>). Now the computational problem appears: can we do this efficiently? In general, we show the problem to be Co-NP-Complete in the size of the database instance. But for an important class of schemas, the covariant schemas [AKW90], we give a linear time algorithm. <p> They give a set of postulates that characterize all update operators that cause minimal change in a precise sense. Similar approaches to update/revision of knowledge bases appear in <ref> [Bor85, Dal88, Sat88, Win88] </ref>.
Reference: [BS81] <author> F. Bancilhon and N. Spyratos. </author> <title> Update semantics of relational views. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 6(1) </volume> <pages> 557-575, </pages> <year> 1981. </year>
Reference-contexts: Whether the minimal model obtained would also make sense with respect to object migration, appears a very interesting issue. On the same issue, an unambiguous semantics to a view update is obtained in <ref> [BS81] </ref> by specifying the "constant complement" of the view.
Reference: [Dal88] <author> M. Dalal. </author> <title> Investigations into a theory of knowledge base revision. </title> <booktitle> In Proc. 7th National Conf. on Artificial Intelligence, </booktitle> <pages> pages 475-479, </pages> <year> 1988. </year>
Reference-contexts: introduce a particular notion of closeness by defining a distance metric that measures the difference between database states, and use it to determine the nearest consistent state to the original one in which the moved object is in the desired class. (Similar approaches to update/revision of knowledge bases appear in <ref> [Bor85, Dal88, Sat88, Win88] </ref>). Now the computational problem appears: can we do this efficiently? In general, we show the problem to be Co-NP-Complete in the size of the database instance. But for an important class of schemas, the covariant schemas [AKW90], we give a linear time algorithm. <p> They give a set of postulates that characterize all update operators that cause minimal change in a precise sense. Similar approaches to update/revision of knowledge bases appear in <ref> [Bor85, Dal88, Sat88, Win88] </ref>.
Reference: [EG92] <author> T. Eiter and G. Gottlob. </author> <title> On the complexity of propositional knowledge base revision, updates, and counterfactuals. </title> <booktitle> In Proc. 11th Symp. on Principles of Database Systems PODS, </booktitle> <address> San Diego, </address> <pages> pages 261-273, </pages> <year> 1992. </year>
Reference-contexts: The subject is further discussed in Section 8. 4 Complexity In this section we study the complexity of computing mig (d; o; c) as a function of the size of the database. The problem is a special case of the problem of updates in knowledge bases, studied in <ref> [EG92] </ref>. <p> We show in the next section that for an important class of database schemas the covariant schemas a linear algorithm exists. 4 Some restricted classes of tractable updates were presented in <ref> [EG92] </ref>. They do not include, however, the object migration problem. 5 If the database has to satisfy integrity constraints other than typing constraints, then objects other than those reachable from o may be affected by the move.
Reference: [Fis87] <author> D.H. Fishman et al. </author> <title> Iris: An object oriented database management system. </title> <journal> ACM Trans. on Office Information Systems, </journal> <volume> 5(1) </volume> <pages> 46-69, </pages> <year> 1987. </year>
Reference-contexts: We discuss at the end how our techniques can be extended to the general case. Note that authors who treated the more general case <ref> [RS91, ABGO93, SZ89, Fis87] </ref> remained mostly at the conceptual and descriptive level. An exception is Su [Su91], whose model allows objects to belong to several classes simultaneously; but the problem he considers is very different from ours, namely the analysis of sequences of migrations produced by a transaction. <p> Multiple Roles: Objects may have simultaneously multiple independent roles. For example, a person can be simultaneously a student, an employee, a member of the national bridge team, etc. There are several proposals to allow an object to have multiple aspects [RS91] or play multiple roles <ref> [ABGO93, Fis87, SZ89] </ref>. Our techniques can be used to support automatic adaptation in such systems. Consider the graph representation of a database. The class nodes represent the different aspects/ roles. Each object node has class edges to all the aspects/roles of the object.
Reference: [KM91] <author> H. Katsuno and A. O. Mendelzon. </author> <title> On the difference between updating a knowledge base and revising it. </title> <booktitle> In Proc. 2nd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 387-394, </pages> <year> 1991. </year>
Reference-contexts: given an initially correct database state and an object changing from one class to another, what should the correct database state be (if any) after the move? We address the semantic problem by noting that object migration is a kind of update, and applying the theory of updates proposed in <ref> [KM91] </ref>. In that paper, correct updates are characterized as those that choose from all acceptable database states the ones that are closest to the initial one, under a suitable definition of distance. <p> (d; o; c) is therefore the set fd 0 ; d 00 g and not a unique database. 2 3.1 Migration as Update We can provide theoretical justification for our intuitive claim that the migration function only changes what is strictly necessary by using Katsuno and Mendel-zon's theory of updates <ref> [KM91] </ref>. They consider knowledge bases represented by propositional theories; an update operation is a request that a new sentence be inserted into the existing theory. They give a set of postulates that characterize all update operators that cause minimal change in a precise sense. <p> This mapping induces a notion of update that falls within the class of minimal change operators defined in <ref> [KM91] </ref> (proof is omitted for lack of space). The subject is further discussed in Section 8. 4 Complexity In this section we study the complexity of computing mig (d; o; c) as a function of the size of the database.
Reference: [O2T94] <author> O2Technology. </author> <note> The O2 User's Manual Version 4.3.1, </note> <year> 1994. </year>
Reference-contexts: This is a natural restriction: it says that the attributes of a subclass should specialize the attributes of the superclass. For example, the schema of the software engineering database presented earlier is covariant. In fact, in some object-oriented database systems such as O2 <ref> [O2T94] </ref>, only covariant schemas are definable. Moving objects in databases where the schema is covariant turns out to be computationally easy.
Reference: [RS91] <author> J. Richardson and P. Schwartz. </author> <title> Aspects: Extending objects to support multiple independent roles. </title> <booktitle> In Proc. of the Int. conf on Management of Data, SIGMOD, </booktitle> <address> Denver, Colorado, </address> <pages> pages 298-307, </pages> <year> 1991. </year>
Reference-contexts: We discuss at the end how our techniques can be extended to the general case. Note that authors who treated the more general case <ref> [RS91, ABGO93, SZ89, Fis87] </ref> remained mostly at the conceptual and descriptive level. An exception is Su [Su91], whose model allows objects to belong to several classes simultaneously; but the problem he considers is very different from ours, namely the analysis of sequences of migrations produced by a transaction. <p> Such conflicts must also be resolved. We can see two approaches to the resolution of the type conflicts caused by object migration. The first one is to ask the user to provide, for each allowable object move, a full specification of the state adaptation process <ref> [RS91, ABGO93] </ref> and to explicitly resolve every conflict. The second approach is to allow the user to 232 provide only a partial specification, and to resolve other conflicts automatically, using a coercion-like adaptation mechanism. <p> Multiple Roles: Objects may have simultaneously multiple independent roles. For example, a person can be simultaneously a student, an employee, a member of the national bridge team, etc. There are several proposals to allow an object to have multiple aspects <ref> [RS91] </ref> or play multiple roles [ABGO93, Fis87, SZ89]. Our techniques can be used to support automatic adaptation in such systems. Consider the graph representation of a database. The class nodes represent the different aspects/ roles. Each object node has class edges to all the aspects/roles of the object.
Reference: [Sat88] <author> K. Satoh. </author> <title> Nonmonotonic reasoning by minimal belief revision. </title> <booktitle> In Proc. of the Int. Conf. on 5th Generation Computer Systems, </booktitle> <pages> pages 455-462, </pages> <year> 1988. </year>
Reference-contexts: introduce a particular notion of closeness by defining a distance metric that measures the difference between database states, and use it to determine the nearest consistent state to the original one in which the moved object is in the desired class. (Similar approaches to update/revision of knowledge bases appear in <ref> [Bor85, Dal88, Sat88, Win88] </ref>). Now the computational problem appears: can we do this efficiently? In general, we show the problem to be Co-NP-Complete in the size of the database instance. But for an important class of schemas, the covariant schemas [AKW90], we give a linear time algorithm. <p> They give a set of postulates that characterize all update operators that cause minimal change in a precise sense. Similar approaches to update/revision of knowledge bases appear in <ref> [Bor85, Dal88, Sat88, Win88] </ref>.
Reference: [Su91] <author> Jianwen Su. </author> <title> Dynamic constraints and object migration. </title> <booktitle> In 17th Conf. on Very Large Databases, VLDB, Barcelona, Spain, </booktitle> <pages> pages 233-242, </pages> <year> 1991. </year> <month> 241 </month>
Reference-contexts: We discuss at the end how our techniques can be extended to the general case. Note that authors who treated the more general case [RS91, ABGO93, SZ89, Fis87] remained mostly at the conceptual and descriptive level. An exception is Su <ref> [Su91] </ref>, whose model allows objects to belong to several classes simultaneously; but the problem he considers is very different from ours, namely the analysis of sequences of migrations produced by a transaction.
Reference: [SZ89] <author> L.A. Stein and S.B. Zdonik. Clovers: </author> <title> The dy-namic behavior of type and instances. </title> <type> Technical report, </type> <institution> Brown University, </institution> <type> Technical report no. </type> <institution> CS-89-42, </institution> <year> 1989. </year>
Reference-contexts: We discuss at the end how our techniques can be extended to the general case. Note that authors who treated the more general case <ref> [RS91, ABGO93, SZ89, Fis87] </ref> remained mostly at the conceptual and descriptive level. An exception is Su [Su91], whose model allows objects to belong to several classes simultaneously; but the problem he considers is very different from ours, namely the analysis of sequences of migrations produced by a transaction. <p> Multiple Roles: Objects may have simultaneously multiple independent roles. For example, a person can be simultaneously a student, an employee, a member of the national bridge team, etc. There are several proposals to allow an object to have multiple aspects [RS91] or play multiple roles <ref> [ABGO93, Fis87, SZ89] </ref>. Our techniques can be used to support automatic adaptation in such systems. Consider the graph representation of a database. The class nodes represent the different aspects/ roles. Each object node has class edges to all the aspects/roles of the object.
Reference: [Win88] <author> M. Winslett. </author> <title> Reasoning about action using a possible-model approach. </title> <booktitle> In Proc. 7th National Conf. on Artificial Intelligence, </booktitle> <pages> pages 89-93, </pages> <year> 1988. </year>
Reference-contexts: introduce a particular notion of closeness by defining a distance metric that measures the difference between database states, and use it to determine the nearest consistent state to the original one in which the moved object is in the desired class. (Similar approaches to update/revision of knowledge bases appear in <ref> [Bor85, Dal88, Sat88, Win88] </ref>). Now the computational problem appears: can we do this efficiently? In general, we show the problem to be Co-NP-Complete in the size of the database instance. But for an important class of schemas, the covariant schemas [AKW90], we give a linear time algorithm. <p> They give a set of postulates that characterize all update operators that cause minimal change in a precise sense. Similar approaches to update/revision of knowledge bases appear in <ref> [Bor85, Dal88, Sat88, Win88] </ref>.
References-found: 17

