URL: http://www.cs.rpi.edu/~diaza/Publications/jsc95.ps
Refering-URL: http://www.cs.rpi.edu/~diaza/publications.html
Root-URL: http://www.cs.rpi.edu
Title: Process Scheduling in DSC and the Large Sparse Linear Systems Challenge  
Author: A. D IAZ, M. HITZ, E. KALTOFEN, A. LOBO AND T. VALENTE 
Address: Troy, New York 12189-3590, U.S.A.  
Affiliation: Department of Computer Science, Rensselaer Polytechnic Institute  
Date: (1995) 11, 1-000  (Received 31 January 1995)  
Note: J. Symbolic Computation  
Abstract: New features of our DSC system for distributing a symbolic computation task over a network of processors are described. A new scheduler sends parallel subtasks to those compute nodes that are best suited in handling the added load of CPU usage and memory. Furthermore, a subtask can communicate back to the process that spawned it by a co-routine style calling mechanism. Two large experiments are described in this improved setting. In the first we have implemented an algorithm that can prove a number of more than 1,000 decimal digits prime in about 2 months elapsed time on some 20 computers. In the second a parallel version of a sparse linear system solver is used to compute the solution of sparse linear systems over finite fields. We are able to find the solution of a 100,000 by 100,000 linear system with about 10.3 million non-zero entries over the Galois field with 2 elements using 3 computers in about 54 hours CPU time. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Atkin, A. O. L., Morain, F. </author> <year> (1993). </year> <title> Elliptic curves and primality proving. </title> <journal> Math. Comput. </journal> <volume> 61/203, </volume> <pages> 29-68. </pages>
Reference-contexts: Figure 2 denotes the relationship that could exist between DSC utility function calls in a main task and its co-routine parallel subtask child. 2.4. The GKA Primality Test In this section, we describe new experimental results with our distributed implementation of the Goldwasser-Kilian/Atkin (GKA) primality test <ref> (Atkin and Morain, 1993) </ref>, which uses elliptic curves to prove an integer p prime; for earlier results, see Kaltofen et al., 1989; Daz et al., 1991.
Reference: <author> Batut, C., , Bernardi, D., Cohen, H., Olivier, M. </author> <year> (1991). </year> <note> User's Guide to PARI-GP. Manual. </note>
Reference-contexts: This results in a chain of implications p n prime =) p n1 prime =) =) p 0 = p prime: In our experiment, we started with a probable prime number of 1111 decimal digits. Our code is written in the C programming language calling the Pari library functions <ref> (Batut et al., 1991) </ref> for arbitrary precision integer arithmetic. Each time a descent is required in the first phase, a list of nearly 10,000 discriminants is examined. In fact, we chose to search all d with jdj 100,000, where Q ( p d ) has class number 50.
Reference: <author> Bitmead, R. R., Anderson, B. D. O. </author> <year> (1980). </year> <title> Asymtotically fast solution of Toeplitz and related systems of linear equations. </title> <journal> Linear Algebra Applic. </journal> <volume> 34, </volume> <pages> 103-116. </pages>
Reference: <author> Char, B. W. </author> <year> (1990). </year> <title> Progress report on a system for general-purpose parallel symbolic algebraic computation. </title> <booktitle> Proc. 1990 Internat.Symp. Symbolic Algebraic Comput., </booktitle> <publisher> ACM Press: S. Watanabe and M. </publisher>
Reference-contexts: Note that DSC's ability to account for the heterogeneity of the compute nodes is one feature that clearly distinguishes it from other parallel computer algebra systems such as Maple/Linda <ref> (Char, 1990) </ref>, PARSAC-2 (Collins et al., 1990), the distributed SAC-2 of Seitz, (1992), or PACLIB (Hong and Schreiner, 1993). DSC supports a very coarse grain parallelism. This was quite successful for the primality tester, where each parallel subtask is extremely compute intensive and uses a moderate amount of memory.
Reference: <editor> Nagata eds., </editor> <month> 96-103. </month>
Reference: <author> Collins, G. E., Johnson, J. R., Kuchlin, W. </author> <year> (1990). </year> <title> PARSAC-2: A multi-threaded system for symbolic and algebraic computation. </title> <institution> Tech.Report TR38. Comput. and Information Sci. Research Center, Ohio State University. </institution>
Reference-contexts: Note that DSC's ability to account for the heterogeneity of the compute nodes is one feature that clearly distinguishes it from other parallel computer algebra systems such as Maple/Linda (Char, 1990), PARSAC-2 <ref> (Collins et al., 1990) </ref>, the distributed SAC-2 of Seitz, (1992), or PACLIB (Hong and Schreiner, 1993). DSC supports a very coarse grain parallelism. This was quite successful for the primality tester, where each parallel subtask is extremely compute intensive and uses a moderate amount of memory.
Reference: <author> Coppersmith, D. </author> <year> (1991). </year> <title> Solving linear systems over GF(2). </title> <type> Tech. </type> <institution> Report RC 16997 IBM Thomas J. Watson Research Ctr., </institution> <address> Yorktown Heights, New York. </address>
Reference-contexts: Coppersmith implemented his algorithm in FORTRAN on an IBM 3090 mainframe computer and reports a time of 1 h 05 0 for a system of dimension 65; 518 containing approximately 1:3 million non-zero entries. A block, lookahead Lanczos algorithm <ref> (Coppersmith, 1991) </ref> took a time of 1 h 05 0 .
Reference: <author> Coppersmith, D. </author> <year> (1994). </year> <title> Solving homogeneous linear equations over GF(2) via block Wiedemann algorithm. </title> <journal> Math. </journal> <volume> Comput.62/205, </volume> <pages> 333-350. </pages>
Reference-contexts: New experiments with the GKA primality test that run on so-called "titanic" integers, i.e., integers with more than 1000 decimal digits, and experiments with a parallel sparse linear system solver, namely, Coppersmith's block Wiedemann algorithm <ref> (Coppersmith, 1994) </ref>, have lead to several key modifications to DSC. In this article we describe these changes, as well as the results obtained by applying the improved environment to both titanic primality testing and sparse linear system solving. <p> The minpoly stage costs O (nN 2 ) field operations overall. The evaluation stage costs not more than N=n + 2 black box calls plus O (N 2 ) arithmetic operations, for each w produced. The reader is referred to <ref> (Coppersmith, 1994, and Kaltofen, 1994) </ref> for the complexity analysis. We have distributed the computation of A (). The -th compute node is supplied x, B, and the -th column of z. The -th parallel subtask computes the -th column of a (i) for 0 i L.
Reference: <author> Diaz, A. </author> <year> (1993). </year> <title> DSC Users Manual (2nd ed.) </title> <type> Tech. Rep. </type> <institution> 93-11 Dept. Comput. Sci., Rensselaer Polytech. Inst., </institution> <address> Troy, New York. </address>
Reference: <author> Diaz, A., Kaltofen y , E. Schmitz, K., Valente, T. </author> <year> (1991). </year> <title> DSC A System for Distributed Symbolic Computation. </title> <booktitle> Proc. 1991 Internat. Symp. Symbolic Algebraic Comput. </booktitle> <publisher> ACM Press: </publisher> <editor> S. M. Watt editor, </editor> <month> 323-332. </month>
Reference: <author> Gohberg, I., Kailath, T., Koltracht, I. </author> <year> (1986). </year> <title> Efficient solution of linear systems of equations with recursive structure. </title> <journal> Linear Algebra Applic. </journal> <volume> 80, </volume> <pages> 81-113. </pages>
Reference-contexts: As Figure 4 shows, higher parallelization of step (1) slows step (2). One way to speed step (2) with high blocking factor is to use a blocked Toeplitz linear system solver <ref> (Gohberg et al., 1986) </ref> instead of the generalized Berlekamp/Massey algorithm.
Reference: <author> Hong, H., Schreiner, W. </author> <year> (1993). </year> <title> A new library for parallel algebraic computation. </title> <booktitle> Sixth SIAM Conf. </booktitle>
Reference-contexts: Note that DSC's ability to account for the heterogeneity of the compute nodes is one feature that clearly distinguishes it from other parallel computer algebra systems such as Maple/Linda (Char, 1990), PARSAC-2 (Collins et al., 1990), the distributed SAC-2 of Seitz, (1992), or PACLIB <ref> (Hong and Schreiner, 1993) </ref>. DSC supports a very coarse grain parallelism. This was quite successful for the primality tester, where each parallel subtask is extremely compute intensive and uses a moderate amount of memory.
Reference: <institution> Parallel Processing for Scientific Computing 2, </institution> <note> Sincovec, </note> <editor> R. F., et al.,editors, </editor> <month> 776-783. </month> <note> y The papers by Kaltofen (et al.) are also available from anonymous@ftp.cs.rpi.edu in directory kaltofen, or via Kaltofen's xmosaic homepage at the URL address http://www.cs.rpi.edu/~kaltofen, or via the gopher server at the internet address cs.rpi.edu (see directory ftp/kaltofen). 14 Daz et al., </note> <author> Kaltofen, E. </author> <year> (1995). </year> <title> Analysis of Coppersmith's block Wiedemann algorithm for the parallel solution of sparse linear systems. </title> <journal> Math. Comput. </journal> <note> to appear. </note>
Reference: <author> Kaltofen, E., Lobo, A. </author> <year> (1994). </year> <title> Factoring high-degree polynomials by the black box Berlekamp algorithm. </title> <journal> Proc.Internat. Symp. Symbolic Algebraic Comput. </journal> <note> ISSAC '94 ACM Press: </note> <author> J. von zur Gathen and M. Giesbrecht editors, </author> <month> 90-98. </month>
Reference-contexts: The minpoly stage costs O (nN 2 ) field operations overall. The evaluation stage costs not more than N=n + 2 black box calls plus O (N 2 ) arithmetic operations, for each w produced. The reader is referred to <ref> (Coppersmith, 1994, and Kaltofen, 1994) </ref> for the complexity analysis. We have distributed the computation of A (). The -th compute node is supplied x, B, and the -th column of z. The -th parallel subtask computes the -th column of a (i) for 0 i L. <p> Conversely when the the black box application is expensive, it makes sense to use a large n. This was observed in another set of experiments involving the Block Wiedemann solver in polynomial factorization <ref> (Kaltofen & Lobo, 1994) </ref>. There sequence-generation is the bottleneck. Horner-like evaluation in the third stage costs O (N=n) and we report the time necessary for finding the first non-zero solution. This stage takes approximately half as much time as the sequence-generation stage. <p> We plan to use co-routines to implement this pipeline. If the computation of the product of the coefficient matrix of the system by a vector is more costly, as is the case in our new application to polynomial factoring <ref> (Kaltofen and Lobo, 1994) </ref>, additional measures can be taken for speed-up. For instance, the use of distinct row and column blocking factors with m n decreases the length L of the required matrix sequence while increasing the arithmetic overhead. <p> For instance, the use of distinct row and column blocking factors with m n decreases the length L of the required matrix sequence while increasing the arithmetic overhead. Second, the number of matrix-times-vector products in the evaluation step can by reduced by storing intermediate results of the sequence step <ref> (see Kaltofen, 1994, Appendix B) </ref>. We recently redesigned our code for solving black box linear systems in the C ++ programming language. In doing so, we have linked into a big integer package by A. K. Lenstra. It is also possible to link to other such packages.
Reference: <author> Kaltofen, E., Trager, B., Kaltofen, E. </author> <year> (1990). </year> <title> Computing with polynomials given by black boxes for their evaluations: Greatest common divisors, factorization, separation of numerators and denominators. </title>
Reference-contexts: This enables the distribution of dynamically generated "black-box" functions <ref> (cf. Kaltofen and Trager, 1990) </ref> and easy use of computers of different architecture. (iii) DSC can be invoked from C, Common Lisp and Maple programs. It can distribute within a local area network (LAN) and across the Internet. (iv) The interface to the application program consists of seven library functions.
Reference: <author> J. </author> <booktitle> Symbolic Comput. </booktitle> <volume> 9/3, </volume> <pages> 301-320. </pages>
Reference: <author> Valente, T., Yui, N. </author> <year> (1989). </year> <title> An improved Las Vegas primality test. </title> <booktitle> JournalProc. ACM-SIGSAM 1989 Internat. Symp. Symbolic Algebraic Comput., </booktitle> <publisher> ACM Press, </publisher> <pages> 26-33 Kogge, </pages> <editor> P. M. </editor> <year> (1991). </year> <title> The Architecture of Symbolic Computers. </title> <publisher> McGraw-Hill. </publisher>
Reference: <author> Massey, J. L. </author> <year> (1969). </year> <title> Shift-register synthesis and BCH decoding. </title> <journal> IEEE Trans. Inf. Theory 15, </journal> <pages> 122-127. </pages>
Reference-contexts: In Wiedemann's original algorithm, the a (i) are scalars and the minimum polynomial of this sequence is obtainable by the Berlekamp/Massey <ref> (Massey, 1969) </ref> algorithm. In the present context we iteratively compute the matrix polynomial F t () = fl t () for 1 t L. The coefficients of the polynomials fl and are n fi n matrices over K.
Reference: <author> Morain, F. </author> <year> (1991). </year> <title> Distributed primality proving and the primality of (2 3539 + 1)=3. </title> <booktitle> Advances in Cryptology|EUROCRYPT '90. </booktitle> <publisher> Springer Lect. Notes Comput. Sci., </publisher> <editor> I. B. Damg-ard editor, </editor> <volume> 473, </volume> <pages> 110-123. </pages>
Reference: <author> Morf, M. </author> <year> (1980). </year> <title> Doubling algorithms for Toeplitz and related equations. </title> <booktitle> Proc. 1980 IEEE Internat. Conf. Acoust. Speech Signal Process., </booktitle> <pages> 954-959. </pages>
Reference: <author> Seitz, S. </author> <year> (1992). </year> <title> Algebraic computing on a local net. Computer Algebra and Parallelism Springer Lect. </title> <journal> Notes Math. </journal> <volume> 584, </volume> <pages> 19-31. </pages>
Reference: <author> Valente, T. </author> <year> (1992). </year> <title> A distributed approach to proving large numbers prime. </title> <type> Ph.D. Thesis, </type> <institution> Dept. Comput. Sci., Rensselaer Polytech. </institution> <address> Instit., Troy, New York. </address>
Reference: <author> Wiedemann, D. </author> <year> (1986). </year> <title> Solving sparse linear equations over finite fields. </title> <journal> IEEE Trans. Inf. Theory 32, </journal> <pages> 54-62. </pages>
Reference-contexts: DSC and Sparse Linear Systems 9 3. Solving Large Sparse Linear Systems We now report on the use of DSC in experiments with the Block Wiedemann Algorithm. Our distributed implementation follows Coppersmith's (1994) generalization of the sequential algorithm <ref> (Wiedemann, 1986) </ref>. For the purposes of our paper we present a brief description below. 3.1. Background The object is to find a non-trivial solution of a homogeneous system of linear equations with coefficient matrix denoted by B whose entries are from an abstract field K.
References-found: 23

