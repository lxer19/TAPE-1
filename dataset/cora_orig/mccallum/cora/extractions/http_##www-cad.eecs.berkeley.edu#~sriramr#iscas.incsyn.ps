URL: http://www-cad.eecs.berkeley.edu/~sriramr/iscas.incsyn.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/~sriramr/research.html
Root-URL: http://www.cs.berkeley.edu
Title: Minimal Logic Resynthesis  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. M. Sentovich, K. J. Singh, C. Moon, H. Savoj, R. K. Brayton, and A. L. Sangiovanni-Vincentelli, </author> <title> "Sequential Circuit Design Using Synthesis and Optimization," </title> <booktitle> in Proc. Intl. Conf. on Computer Design, </booktitle> <pages> pp. 328-333, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Logic synthesis refers to the process of optimizing a logic description of a circuit, given as a net-list of logic (boolean) gates <ref> [1] </ref>. This representation can be optimized for area (minimum), delay (minimum or meeting requirements), and power (minimum). Since these problems are hard to solve exactly, heuristic algorithms are generally used. <p> The efficacy of this measure of the sensitivity of a node has been demonstrated statistically in [7]. For the purpose of this chapter, we will not discuss this further. 5.2 Experiment We have implemented the iterative algorithm and sensitivity measures described in this chapter in SIS <ref> [1] </ref>. Though not explicitly stated during this chapter, we used the BDDs to represent our functions and relations. Logical predicates may be represented as a sequence of BDD operations; we used BDD's for the computation of logical predicates.
Reference: [2] <author> Y. Watanabe and R. K. Brayton, </author> <title> "Incremental Sythesis for Engineering change," </title> <booktitle> in Workshop Notes of the Intl. Workshop on Logic Synthesis, </booktitle> <address> (Tahoe City, CA), </address> <month> May </month> <year> 1991. </year>
Reference-contexts: In addition, the network may have already been implemented in silicon at a lower level of the design hierarchy, and it can be inconvenient to change. Previous algorithms for the problem of incremental synthesis have dealt with post-rectification (Watanabe et al. <ref> [2] </ref>), and preserving cones of logic (Brand et al.[3]) in the design. Some relevant work has also been done by Kukimoto and Fujita [4] but this is concerned with FPGA's rather than general logic.
Reference: [3] <author> D. Brand, </author> <title> "Incremental Synthesis," </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 126-129, </pages> <month> Nov. </month> <year> 1992. </year> <month> 15 </month>
Reference: [4] <author> Y. Kukimoto and M. Fujita, </author> <title> "Rectification method for lookup-table type FPGA's," </title> <booktitle> in Proceed--ings of IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 54-61, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Previous algorithms for the problem of incremental synthesis have dealt with post-rectification (Watanabe et al. [2]), and preserving cones of logic (Brand et al.[3]) in the design. Some relevant work has also been done by Kukimoto and Fujita <ref> [4] </ref> but this is concerned with FPGA's rather than general logic. In addition, this work restricted re-synthesisizable parts of the network to all nodes at a level, rather than general re-synthesis region.
Reference: [5] <author> M. Fujita, Y. Tamiya, Y. Kukimoto, and K.-C. Chen, </author> <title> "Application of Boolean unification to combinational logic synthesis," </title> <booktitle> in Proceedings of IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pp. 510-513, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: In addition, this work restricted re-synthesisizable parts of the network to all nodes at a level, rather than general re-synthesis region. Other approaches to this problem, which use boolean unification were proposed by Fujita et al <ref> [5] </ref>, and Lin et al [6], however these approaches do not consider the optimality of sub-regions in the network as a factor in choosing candidate regions for re-synthesis. None of the above approaches have dealt directly with preserving the "highly-optimal" parts of the circuit.
Reference: [6] <author> C. Lin, K. Chen, S. Chang, M. Marek-Sadowska, and K. Cheng, </author> <title> "Logic Synthesis for Engineering Change," </title> <booktitle> in Proc. of the Design Automation Conf., </booktitle> <pages> pp. 647-652, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: In addition, this work restricted re-synthesisizable parts of the network to all nodes at a level, rather than general re-synthesis region. Other approaches to this problem, which use boolean unification were proposed by Fujita et al [5], and Lin et al <ref> [6] </ref>, however these approaches do not consider the optimality of sub-regions in the network as a factor in choosing candidate regions for re-synthesis. None of the above approaches have dealt directly with preserving the "highly-optimal" parts of the circuit.
Reference: [7] <author> C. Lennard, </author> <title> Estimation Techniques to Guide Low Power Resynthesis Algorithms For Combinational Random CMOS Logic. </title> <type> PhD thesis, </type> <institution> University of California Berkeley, Electronics Research Laboratory, College of Engineering, University of California, Berkeley, </institution> <address> CA 94720, </address> <month> Aug. </month> <year> 1995. </year> <note> Memorandum No. UCB/ERL M95/75. </note>
Reference-contexts: To compare two different minimal re-synthesis regions, we use a heuristic evaluation criteria for the acceptability of regions for re-synthesis called sensitivity. In this chapter we compute the sensitivity (or acceptability for re-synthesis) for power. In this respect, we rely heavily on the work done by Lennard <ref> [7] </ref> for the computation of power sensitivities of nodes. This sensitivity criteria is used to pick nodes in the iterative scheme. This chapter is organized as follows: Section 2 describes the terminology and definitions in this chapter. <p> The definition of sensitivity is easily extended to regions. We rely on the work done by Lennard <ref> [7] </ref> et al. on computing the power sensitivity of a node. A node n is a good candidate for re-synthesis if local change in activity (power) plus change in activity in the transitive fanout reduces overall power. A method for determining expected activity E (n) is outlined in [7]. <p> by Lennard <ref> [7] </ref> et al. on computing the power sensitivity of a node. A node n is a good candidate for re-synthesis if local change in activity (power) plus change in activity in the transitive fanout reduces overall power. A method for determining expected activity E (n) is outlined in [7]. Consider a node n in the network with immediate fanins n 1 : : : n m (refer to Figure 5). Node n computes a function f n (n 1 : : : n m ) of its fanins. <p> We use this analysis to compute a "good" ordering of nodes for re-synthesis. The efficacy of this measure of the sensitivity of a node has been demonstrated statistically in <ref> [7] </ref>. For the purpose of this chapter, we will not discuss this further. 5.2 Experiment We have implemented the iterative algorithm and sensitivity measures described in this chapter in SIS [1]. Though not explicitly stated during this chapter, we used the BDDs to represent our functions and relations.
Reference: [8] <author> H. Savoj and R. K. Brayton, </author> <title> "Observability Relations and Observability Don't Cares," </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 518-521, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Figure 3 illustrates these regions, and their inputs and outputs. In this section we illustrate how to compute the required functionality of a predefined region when the output function is changed. We first state the following theorem, which is adapted from <ref> [8] </ref>. Theorem 3.1 The observability relation for region R that is consistent with N (x; v; u; z) and compatible with O F (x; z) is: O R (v; u) = 8 x;z (N (x; v; u; z) ) O F (x; z)).
Reference: [9] <author> F. M. Brown, </author> <title> Boolean reasoning : the logic of Boolean equations. </title> <publisher> Boston : Kluwer Academic Publishers, </publisher> <year> 1990. </year>
Reference-contexts: In general, O R new (v; u) is not a function. However, any O R new (v; u) satisfying the theorem has at least one function as a subset. To find such a function, we have to solve a set of boolean equations. The following theorem from boolean unification <ref> [9] </ref>, details all solutions y = G (x) to the equation f (x; y) = 1, when y is a single bdd variable. <p> A contradiction , hence y = g (x) = f (x; 0) is the smallest function st f (x; y) = 1. Hence, f (x; 0) G (x) f (x; 1). The following theorem, adapted from <ref> [9] </ref>, characterizes a family of functions that yield a valid implementation of the relation. We assume that O R new (v; u) satisfies Theorem 3.2.
Reference: [10] <author> Y. Watanabe and R. K. Brayton, </author> <title> "Heuristic Minimization of Multiple-Valued Relations," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. Vol. 12, </volume> <pages> pp. 1458 - 1472, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: 658.60 674.80 cmb 8 4 5 249.20 234.20 229.30 256.50 cc 18 8 5 263.80 242.80 212.50 222.40 Table 2: Incremental Synthesis: Sensitivity Vs Random Regions We intend to extend this and examine the entire class of solutions for the most optimal implementation, using the work of Watanabe et al <ref> [10] </ref> on heuristic boolean minimization. Since we are recomputing a new O R new (v; u) many times during the iterative algorithm, it becomes pertinent to explore incremental ways of updating the relation, rather than re-computing it from the beginning.
Reference: [11] <author> H. Savoj, </author> <title> Don't Cares in Multi-Level Network Optimization. </title> <type> PhD thesis, </type> <institution> University of California Berkeley, Electronics Research Laboratory, College of Engineering, University of California, Berkeley, </institution> <address> CA 94720, </address> <month> May </month> <year> 1992. </year> <month> 16 </month>
Reference-contexts: Since we are recomputing a new O R new (v; u) many times during the iterative algorithm, it becomes pertinent to explore incremental ways of updating the relation, rather than re-computing it from the beginning. We expect that some of the methods adapted from <ref> [11] </ref> may be used.
References-found: 11

