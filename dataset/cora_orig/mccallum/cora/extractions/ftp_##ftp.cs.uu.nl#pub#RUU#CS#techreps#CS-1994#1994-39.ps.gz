URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1994/1994-39.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: Tel. 31 30 531454  
Title: Computing Many Faces in Arrangements of Lines and Segments  
Author: Pankaj K. Agarwal Jir Matousek Otfried Schwarzkopf 
Address: Padualaan 14, P.O. Box 80.089, 3508 TB Utrecht, The Netherlands,  
Affiliation: Utrecht University Department of Computer Science  
Date: September 1994  
Pubnum: UU-CS-1994-39  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P. Agarwal, </author> <title> Partitioning arrangements of lines: II. </title> <booktitle> Applications, Discrete and Computational Geometry 5 (1990), </booktitle> <pages> 533-573. </pages>
Reference-contexts: A deterministic algorithm with running time O (m 2=3 n 2=3 log O (1) n + n log 3 n + m log n) was given by Agarwal <ref> [1] </ref>. These algorithms thus are nearly worst-case optimal, but both of them are rather involved. <p> n 2=3 + n log m + n ff (n) : A randomized algorithm with expected running time O (m 2=3" n 2=3+2" log n + nff (n) log 2 n log m) is described by Edelsbrunner et al. [12], and a slightly faster deterministic algorithm is presented by Agarwal <ref> [1] </ref>. Following the same strategy as for the case of lines, we first develop a randomized algorithm with O ((m 2 + n log m + n ff (n)) log n) expected running time. <p> Although the basic idea is the same as in <ref> [1] </ref>, the algorithm presented here is simpler because we allow randomization. <p> T is a minimum height binary tree with at most 2m leaves. Each node v of T is associated with an interval U v , and a point x v . Let W v = U v fi <ref> [1; +1] </ref> be a vertical strip, and let h v be the vertical 10 line passing through x v . For the root u, W u is the entire plane and h u is the vertical line passing the middle endpoint of the intervals of J .
Reference: [2] <author> B. Aronov, H. Edelsbrunner, L. Guibas and M. Sharir, </author> <title> Improved bounds on the complexity of many faces in arrangements of segments, </title> <journal> Combinatorica, </journal> <volume> 12 (1992), </volume> <pages> 261-274. </pages>
Reference-contexts: Aronov et al. <ref> [2] </ref> proved that (n; m) = O m 2=3 n 2=3 + n log m + n ff (n) : A randomized algorithm with expected running time O (m 2=3" n 2=3+2" log n + nff (n) log 2 n log m) is described by Edelsbrunner et al. [12], and a
Reference: [3] <author> M. de Berg, K. Dobrindt and O. Schwarzkopf, </author> <title> On lazy randomized incremental construction, </title> <booktitle> to appear in Proceedings 26th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1994. </year>
Reference-contexts: We give a proof based on a generalization of an approach due to Chazelle and Friedman [7], which is somewhat different from the Clarkson-Shor method. Recently, de Berg et al. <ref> [3] </ref> gave an alternative proof of Proposition 2.1. We derive a key lemma in a somewhat abstract framework; see also [6, 7, 10] for various approaches to axiomatize similar situations. Let S be a set of objects.
Reference: [4] <author> R. Canham, </author> <title> A theorem on arrangements of lines in the plane, </title> <journal> Israel J. Math. </journal> <volume> 7 (1969), </volume> <pages> 393-397. </pages>
Reference-contexts: It is known that (n; m) = fi (n 2=3 m 2=3 + n + m) : The upper bound was proven by Clarkson et al. [9]; previous results and related work can be found in Canham <ref> [4] </ref>, Edelsbrunner and Welzl [13], Szemeredi and Trotter [20]. In this paper we study the problem of computing A (L; P ), that is, for each cell C 2 A (L; P ), we want return the vertices of C in, say, clockwise order. <p> in O (jL C j) time by merging the slopes of L C with the slopes of the edges of C; we leave out the 3 The latter estimate follows from the bound for (n; m) mentioned in Section 1, in fact it is the weaker bound proved by Canham <ref> [4] </ref>. 7 easy details for the reader.
Reference: [5] <author> B. Chazelle, H. Edelsbrunner, M. Grigni, L. Guibas, J. Hershberger, M. Sharir and J. Snoeyink, </author> <title> Ray shooting in polygons using geodesic triangulations, </title> <booktitle> Proc. 17th Int. Colloq. Automata, Languages and Programming, </booktitle> <year> 1991, </year> <pages> pp. 661-673. </pages>
Reference-contexts: We preprocess each polygonal chain I 2 I, in linear time, for ray shooting queries, so that the first intersection point of a query ray and I can be computed in logarithmic time, see <ref> [5, 15] </ref>. The total time spent in preprocessing I is O () = O ((n; m)). Let be a segment of that lies in the interior of the outer component O 2 O of @C.
Reference: [6] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, M. Sharir and J. Snoeyink, </author> <title> Computing a face in an arrangement of line segments, </title> <journal> SIAM J. Computing 22 (1993), </journal> <pages> 1286-1302. </pages>
Reference-contexts: These algorithms thus are nearly worst-case optimal, but both of them are rather involved. Recently randomized incremental algorithms have been developed for a wide variety of geometric problems, which add the input objects one by one in a random order and maintain the desired structure; see e.g. <ref> [6, 10, 18, 19] </ref>. In our case, we can add the lines of L one by one in a random order and maintain the marked cells in the arrangement of lines added so far. <p> 1=3 log 4=3 k ff 1=3 ( m For the analysis of the expected running time of our algorithms we will use a generalization of a lemma due to Chazelle and Friedman [7]. (An alternative analysis could probably be obtained using a method similar to that of Chazelle et al. <ref> [6] </ref>, but we hope that our approach is somewhat more intuitive). 2 2 A generalization of Chazelle-Friedman lemma Let S be a set of lines or segments, and P a set of points in the plane. <p> Recently, de Berg et al. [3] gave an alternative proof of Proposition 2.1. We derive a key lemma in a somewhat abstract framework; see also <ref> [6, 7, 10] </ref> for various approaches to axiomatize similar situations. Let S be a set of objects. <p> The analysis depends only on the axioms involving D () given below, and these will be satisfied in our specific examples. 3 each trapezoid is defined by at most 4 segments (or lines) of S, which constitute the set D (); details can be found in Chazelle et al. <ref> [6] </ref>. K (), called the killing set , is a set of objects of S, such that including any object of K () into R prevents from appearing in CT (R). <p> It has O (n + m 2 ) complexity, and can be computed in expected time O (m 2 + n log n), for instance by Mulmuley's randomized incremental algorithm <ref> [18, 6] </ref>. This algorithm actually computes the vertical decomposition A jj (C fl ) of the arrangement, together with a point location data structure with O (log n) expected query time. <p> We choose a random subset R L of size r, where r = m 2=3 p ' Using a randomized incremental algorithm, we construct A jj (R) plus a point-location data struc ture for A jj (R) in expected time O (r 2 ) <ref> [6] </ref>. For each trapezoid 2 A jj the set of lines that intersect the interior of and P P the set of points that are contained in . <p> If we clip the lines of L within , then Z is the unbounded face in the arrangement of the clipped segments, and we can compute it in expected time O (n log n), using a (simplified version of) the algorithm by Chazelle et al. <ref> [6] </ref>.
Reference: [7] <author> B. Chazelle and J. Friedman, </author> <title> A deterministic view of random sampling and its use in geometry, </title> <booktitle> Combinatorica 10 (1990), </booktitle> <pages> 229-249. </pages>
Reference-contexts: o (n 2 ) intersection points, the expected running time of the algorithm is O (m 2=3 k 1=3 log 4=3 k ff 1=3 ( m For the analysis of the expected running time of our algorithms we will use a generalization of a lemma due to Chazelle and Friedman <ref> [7] </ref>. (An alternative analysis could probably be obtained using a method similar to that of Chazelle et al. [6], but we hope that our approach is somewhat more intuitive). 2 2 A generalization of Chazelle-Friedman lemma Let S be a set of lines or segments, and P a set of points <p> In our situation, where the sum is taken over only some of the cells, the Clarkson-Shor framework does not apply directly anymore (the main distinction between these two situations will be outlined below). We give a proof based on a generalization of an approach due to Chazelle and Friedman <ref> [7] </ref>, which is somewhat different from the Clarkson-Shor method. Recently, de Berg et al. [3] gave an alternative proof of Proposition 2.1. We derive a key lemma in a somewhat abstract framework; see also [6, 7, 10] for various approaches to axiomatize similar situations. <p> Recently, de Berg et al. [3] gave an alternative proof of Proposition 2.1. We derive a key lemma in a somewhat abstract framework; see also <ref> [6, 7, 10] </ref> for various approaches to axiomatize similar situations. Let S be a set of objects. <p> Roughly speaking, Lemma 2.2 says that the expected number of "large" trapezoids in CT (R), that is, the trapezoids for which the value of w () exceeds the "right" value n=r more than t times, decreases exponentially with t. Chazelle and Friedman <ref> [7] </ref> proved a result analogous to Lemma 2.2 under the following stronger axiom replacing (ii): (ii 0 ) If D () R and K () " R = ;, then 2 CT (R).
Reference: [8] <author> K. Clarkson, </author> <title> Computing a single face in an arrangement of segments, 1990, </title> <type> manuscript. </type>
Reference: [9] <author> K. Clarkson, H. Edelsbrunner, L. Guibas, M. Sharir and E. Welzl, </author> <title> Combinatorial complexity bounds for arrangements of curves and spheres, </title> <booktitle> Discrete and Computational Geometry 5 (1990), </booktitle> <pages> 99-160. </pages>
Reference-contexts: It is known that (n; m) = fi (n 2=3 m 2=3 + n + m) : The upper bound was proven by Clarkson et al. <ref> [9] </ref>; previous results and related work can be found in Canham [4], Edelsbrunner and Welzl [13], Szemeredi and Trotter [20]. <p> Let Z denote the set of cells in A (L ) that intersect the vertical edges of . It is well-known that the number of edges in the faces in Z is O (n ) <ref> [9] </ref>. Let p be a point of P . If the cell A (L ) containing p lies entirely in the interior of , then A (L; fpg) = A (L ; fpg).
Reference: [10] <author> K. Clarkson and P. Shor, </author> <title> Applications of random sampling in computational geometry II, </title> <booktitle> Discrete and Computational Geometry 4 (1989), </booktitle> <pages> 387-421. </pages>
Reference-contexts: These algorithms thus are nearly worst-case optimal, but both of them are rather involved. Recently randomized incremental algorithms have been developed for a wide variety of geometric problems, which add the input objects one by one in a random order and maintain the desired structure; see e.g. <ref> [6, 10, 18, 19] </ref>. In our case, we can add the lines of L one by one in a random order and maintain the marked cells in the arrangement of lines added so far. <p> If we sum w () over all cells in A (R)|the case where every cell of A (R) contains a point of P |then Proposition 2.1 follows from a result of Clarkson and Shor <ref> [10] </ref>. In our situation, where the sum is taken over only some of the cells, the Clarkson-Shor framework does not apply directly anymore (the main distinction between these two situations will be outlined below). <p> Recently, de Berg et al. [3] gave an alternative proof of Proposition 2.1. We derive a key lemma in a somewhat abstract framework; see also <ref> [6, 7, 10] </ref> for various approaches to axiomatize similar situations. Let S be a set of objects. <p> Hence, the expected running time of the algorithm is E 2A jj (R) p By a result of Clarkson and Shor <ref> [10] </ref> (or also by Proposition 2.1), we have E 2A jj (R) i E 2A jj (R) p i r r n Thus, the expected running time of the algorithm is bounded by O (m n log (n=r) + nr log r Substituting the value r in the above expression, we <p> We omit the rather routine details from here. The overall expected running time of the algorithm is E 2A jj (R) p i Again, using the results by Clarkson-Shor <ref> [10] </ref> and substituting the value of r, we obtain Theorem 4.2 Given a set S of n segments and a set P of m points, the faces of A (S) that contain a point of P can be computed by a randomized algorithm in expected time O (m 2=3 n 2=3
Reference: [11] <author> H. Edelsbrunner, </author> <title> Algorithms in Combinatorial Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1987. </year>
Reference-contexts: Line and segment arrangements have been extensively studied in computational geometry (as well as in some other areas), as a wide variety of computational geometry problems can be formulated in terms of computing such arrangements or their parts <ref> [11, 14] </ref>. Given a set L of n lines and a set P of m points in the plane, we define A (L; P ) to be the collection of all cells of A (L) containing at least one point of P .
Reference: [12] <author> H. Edelsbrunner, L. Guibas and M. Sharir, </author> <title> The complexity of many faces in arrangements of lines and of segments, </title> <booktitle> Discrete and Computational Geometry 5 (1990), </booktitle> <pages> 161-196. </pages>
Reference-contexts: Box 80.089, 3508 TB Utrecht, the Netherlands. 1 the marked cells of A (L). Edelsbrunner et al. <ref> [12] </ref> presented a randomized algorithm, based on the random sampling technique [16], for computing A (L; P ), whose expected running time was O (m 2=3" n 2=3+2" log n+n log n log m), for any fixed " &gt; 0. <p> et al. [2] proved that (n; m) = O m 2=3 n 2=3 + n log m + n ff (n) : A randomized algorithm with expected running time O (m 2=3" n 2=3+2" log n + nff (n) log 2 n log m) is described by Edelsbrunner et al. <ref> [12] </ref>, and a slightly faster deterministic algorithm is presented by Agarwal [1]. Following the same strategy as for the case of lines, we first develop a randomized algorithm with O ((m 2 + n log m + n ff (n)) log n) expected running time.
Reference: [13] <author> H. Edelsbrunner and E. Welzl, </author> <title> On the maximal number of edges of many faces in an arrangement, Journal of Combinatorial Theory, </title> <booktitle> Series A 41 (1986), </booktitle> <pages> 159-166. </pages>
Reference-contexts: It is known that (n; m) = fi (n 2=3 m 2=3 + n + m) : The upper bound was proven by Clarkson et al. [9]; previous results and related work can be found in Canham [4], Edelsbrunner and Welzl <ref> [13] </ref>, Szemeredi and Trotter [20]. In this paper we study the problem of computing A (L; P ), that is, for each cell C 2 A (L; P ), we want return the vertices of C in, say, clockwise order.
Reference: [14] <author> L. Guibas and M. Sharir, </author> <title> Combinatorics and algorithms of arrangements, in New Trends in Discrete and Computational Geometry (J. Pach, </title> <editor> ed.), </editor> <publisher> Springer-Verlag, </publisher> <address> New York-Berlin-Heidelberg, </address> <year> 1993, </year> <pages> 9-36. </pages>
Reference-contexts: Line and segment arrangements have been extensively studied in computational geometry (as well as in some other areas), as a wide variety of computational geometry problems can be formulated in terms of computing such arrangements or their parts <ref> [11, 14] </ref>. Given a set L of n lines and a set P of m points in the plane, we define A (L; P ) to be the collection of all cells of A (L) containing at least one point of P .
Reference: [15] <author> J. Hershberger and S. Suri, </author> <title> A pedestrian approach to ray shooting: Shoot a ray, take a walk, </title> <booktitle> Proc. 4th ACM-SIAM Symp. Discrete Algorithms , 1993, </booktitle> <pages> pp. 54-63. </pages>
Reference-contexts: We preprocess each polygonal chain I 2 I, in linear time, for ray shooting queries, so that the first intersection point of a query ray and I can be computed in logarithmic time, see <ref> [5, 15] </ref>. The total time spent in preprocessing I is O () = O ((n; m)). Let be a segment of that lies in the interior of the outer component O 2 O of @C. <p> Moreover, it can be computed in time O (z 2 v +z v log v + v ), using the algorithm of [19]. We also preprocess each O 2 O in linear time for ray shooting queries as in <ref> [15] </ref>. It can be shown that the total preprocessing time is O (m 2 + P We omit the details. Let g 2 S n R be a segment. All intersection points of g and O can be computed as follows.
Reference: [16] <author> D. Haussler and E. Welzl, </author> <title> *-nets and simplex range queries, </title> <journal> Discrete Comput. Geom. </journal> <volume> 2 (1987), </volume> <pages> 127-151. </pages>
Reference-contexts: Box 80.089, 3508 TB Utrecht, the Netherlands. 1 the marked cells of A (L). Edelsbrunner et al. [12] presented a randomized algorithm, based on the random sampling technique <ref> [16] </ref>, for computing A (L; P ), whose expected running time was O (m 2=3" n 2=3+2" log n+n log n log m), for any fixed " &gt; 0. <p> For the analysis of our algorithms, we are interested in estimating the expectation, over all random choices of R, E 2A jj (R;P ) i where c is a small constant like c = 2. Well-known results concerning the so-called "-nets (Haussler and Welzl <ref> [16] </ref>) imply that, for every 2 A jj (R), w () C (n=r) log r with high probability, where C is a suitable constant. From this one can derive a bound for (2.1).
Reference: [17] <author> K. Mehlhorn, </author> <title> Data Structures and Algorithms 3: Multi-dimensional Searching and Computational Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1984. </year>
Reference-contexts: Let J O be an interval corresponding to the projection of the polygoal chain O 2 O onto the x-axis, and let J = fJ O j O 2 Og. We construct an interval tree T on J ; see Mehlhorn <ref> [17] </ref> for details on interval trees. T is a minimum height binary tree with at most 2m leaves. Each node v of T is associated with an interval U v , and a point x v .
Reference: [18] <author> K. Mulmuley, </author> <title> A fast planar partition algorithm, I, </title> <editor> J. </editor> <booktitle> Symbolic Computation 10 (1990), </booktitle> <pages> 253-280. </pages>
Reference-contexts: These algorithms thus are nearly worst-case optimal, but both of them are rather involved. Recently randomized incremental algorithms have been developed for a wide variety of geometric problems, which add the input objects one by one in a random order and maintain the desired structure; see e.g. <ref> [6, 10, 18, 19] </ref>. In our case, we can add the lines of L one by one in a random order and maintain the marked cells in the arrangement of lines added so far. <p> It has O (n + m 2 ) complexity, and can be computed in expected time O (m 2 + n log n), for instance by Mulmuley's randomized incremental algorithm <ref> [18, 6] </ref>. This algorithm actually computes the vertical decomposition A jj (C fl ) of the arrangement, together with a point location data structure with O (log n) expected query time.
Reference: [19] <author> K. Mulmuley, </author> <title> A fast planar partition algorithm, II, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 38 (1991), </volume> <pages> 74-103. </pages>
Reference-contexts: These algorithms thus are nearly worst-case optimal, but both of them are rather involved. Recently randomized incremental algorithms have been developed for a wide variety of geometric problems, which add the input objects one by one in a random order and maintain the desired structure; see e.g. <ref> [6, 10, 18, 19] </ref>. In our case, we can add the lines of L one by one in a random order and maintain the marked cells in the arrangement of lines added so far. <p> Consequently, the line intersection searching structure has size O (z 2 v + v ). Moreover, it can be computed in time O (z 2 v +z v log v + v ), using the algorithm of <ref> [19] </ref>. We also preprocess each O 2 O in linear time for ray shooting queries as in [15]. It can be shown that the total preprocessing time is O (m 2 + P We omit the details. Let g 2 S n R be a segment.
Reference: [20] <author> E. Szemeredi and W. Trotter Jr., </author> <title> Extremal problems in discrete geometry, </title> <booktitle> Combinatorica 3 (1983), </booktitle> <pages> 381-392. </pages>
Reference-contexts: It is known that (n; m) = fi (n 2=3 m 2=3 + n + m) : The upper bound was proven by Clarkson et al. [9]; previous results and related work can be found in Canham [4], Edelsbrunner and Welzl [13], Szemeredi and Trotter <ref> [20] </ref>. In this paper we study the problem of computing A (L; P ), that is, for each cell C 2 A (L; P ), we want return the vertices of C in, say, clockwise order.
References-found: 20

