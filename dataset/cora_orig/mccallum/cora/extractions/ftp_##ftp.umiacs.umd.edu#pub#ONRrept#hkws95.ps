URL: ftp://ftp.umiacs.umd.edu/pub/ONRrept/hkws95.ps
Refering-URL: http://www.umiacs.umd.edu/research/CLIP/DARPA/im.html
Root-URL: 
Email: fyahui, louiqag@umiacs.umd.edu  
Title: Building Parameterized Canonical Representations to Achieve Interoperability among Heterogeneous Databases  
Author: Yahui Chang and Louiqa Raschid 
Address: College Park, MD 20742  
Affiliation: Department of Computer Science University of Maryland  
Abstract: This paper describes a technique to support interoperable query processing when multiple heterogeneous databases are accessed. We focus on the problem of supporting query transformation transparently, so a user can pose queries locally, without any need of global knowledge about different data models and schemas. To support interoperable query transformation, we need to resolve the conflicts (i.e., representational heterogeneities) for different databases. The conflicts exist because semantically equivalent concepts may be defined in different ways in each model/schema. Further, we also need to consider the conflicts due to the different query language utilized by each database. We propose two kinds of parameterized canonical representations, as a means of classifying and resolving heterogeneities. The first canonical representation resolves heterogeneity based on query languages. The second canonical form resolves representational heterogeneity based on using two different schemas/data models. This paper will focus on the second canonical representation. We first enumerate the representational heterogeneities, and then explain how we can use the canonical representation to resolve these conflicts. We briefly describe an algorithm for building the canonical knowledge base, and also an architecture for supporting interoperability. A query transformation mechanism will operate on the local query and the canonical knowledge base to generate an appropriate query for a remote database. 
Abstract-found: 1
Intro-found: 1
Reference: [Ahm93] <author> Ahmed, R., J. Albert, W. Du, W. </author> <title> Kent "An overview of Pegasus," </title> <booktitle> Proceedings of the International Conference on Data Engineering,1993. </booktitle>
Reference-contexts: They provide several unified operators including a vertical join operator (similar to a tuple constructor) and a horizontal join operator (similar to a union operation). <ref> [Ahm93] </ref> and [Alb93] describe Pegasus, a heterogeneous DBMS that provides access to native and external heterogeneous schemas. Queries access the local schema via the imported Pegasus global schema. In Pegasus, HOSQL, a higher-order functional language defines the "imported types" (corresponding to class definitions) and functions (relationship among instances).
Reference: [Alb93] <author> Albert, J., R. Ahmed, M. Ketabchi, W. Kent, M. </author> <title> Shan "Automatic importation of relational schemas in Pegasus," </title> <booktitle> Proceedings of the International Conference on Data Engineering, </booktitle> <year> 1993. </year>
Reference-contexts: They provide several unified operators including a vertical join operator (similar to a tuple constructor) and a horizontal join operator (similar to a union operation). [Ahm93] and <ref> [Alb93] </ref> describe Pegasus, a heterogeneous DBMS that provides access to native and external heterogeneous schemas. Queries access the local schema via the imported Pegasus global schema. In Pegasus, HOSQL, a higher-order functional language defines the "imported types" (corresponding to class definitions) and functions (relationship among instances).
Reference: [Bat86] <author> Batini, C., Lenzerini, M. and Navathe, </author> <title> S.B. "A comparative analysis of methodologies for database schema integration," </title> <journal> ACM Computing Surveys 18:4, </journal> <pages> 323-364, </pages> <year> 1986. </year>
Reference-contexts: There are a number of methods advocated in earlier research to resolve this problem. Most of the early work discuss schema integration based on relational models or entity-relationship models (see a summary in <ref> [Bat86] </ref>). [Man88] then provides a rule-based approach for merging generalization hierarchies. This can be applied to integrate object-oriented schemas.
Reference: [Cas84] <author> Casanova, M. A. and V.M.P. </author> <title> Vidal "Inclusion dependencies and their interaction with functional dependencies," </title> <journal> Journal of Computer and Systems Sciences 28, </journal> <year> 1984. </year>
Reference-contexts: In the object schema, the super/sub class hierarchy is explicitly specified, and a class can directly access its inherited attributes. However, in the relational schema, we do not have an explicit sub-class or super-class relationship. Based on primary keys and key inclusion dependencies <ref> [Cas84] </ref>, it is possible to obtain some form of semantic information that is similar to a class hierarchy. We therefore use the parameter joins to specify how information in several relations must be joined in order to provide a path to get the inherited attributes.
Reference: [Cha93] <author> Chang, Y., Raschid, L. and Dorr, B. </author> <title> "A survey of approaches to achieve interoperability with multiple databases," </title> <institution> University of Maryland, College Park, MD, </institution> <year> 1993, </year> <note> UMIACS-TR-93-53, CS-TR-3089. </note>
Reference: [Cha94a] <author> Chang, Y. </author> <title> "Interoperable Query Processing among Heterogeneous Databases," </title> <institution> University of Maryland, College Park, MD, </institution> <year> 1994, </year> <note> UMIACS-TR-94-67, CS-TR-3284. </note>
Reference-contexts: The conflicts are classified in Table 1. The differences between the mapping approach here with the discussion in [Kim93] for building a global schema is desribed in <ref> [Cha94a] </ref>. The parameterized canonical representation, HTx-yMapping, is used to capture the knowledge to resolve representational heterogeneity discussed in Table 1. A conflict is assumed to exist between a local and remote schema, where x and y denote the corresponding data model, which can be relational or object.
Reference: [Cha94b] <author> Chang, Y., Raschid, L. and Dorr, B. </author> <title> "Transforming queries from a relational schema to an equivalent object schema: a prototype based on F-logic," </title> <booktitle> Proceedings of the International Symposium on Methodologies for Intelligent Systems, </booktitle> <year> 1994. </year>
Reference-contexts: For example, one group of rules resolve the class hierarchy conflict. When mapping from relational schema to object schema, these rules will use the key inclusion dependencies among relations to determine the inclusion relationship between them and identify the relevant class hierarchies in the object schema (see <ref> [Cha94b] </ref>). When mapping from object schema to relational schema, these rules will produce a sequence of join for the relational query corresponding to inheritance through a class hierarchy in the object schema (see [Ras93, 94]). <p> The parameter from represents information in the from clause of the SQL query. The parameter reference represents each join over a foreign key. The parameter identification corresponds to the selection of attribute values equal to a constant. (Please see <ref> [Cha94b] </ref> for more details). The mapping rules in HTM then translate the CRrel to the corresponding TQobj (transformed query for object model). Details of TQobj are discussed in [Cha94b]. We only describe two parameters of TQobj here. <p> The parameter identification corresponds to the selection of attribute values equal to a constant. (Please see <ref> [Cha94b] </ref> for more details). The mapping rules in HTM then translate the CRrel to the corresponding TQobj (transformed query for object model). Details of TQobj are discussed in [Cha94b]. We only describe two parameters of TQobj here. One parameter is sub-class which returns the most specific class label corresponding to the given relation R. The second parameter path will produce an XSQL path expression, given an ordered list of joining pairs.
Reference: [Cho93] <author> Chomicki, J. and Litwin, W. </author> <title> "Declarative definition of object-oriented multidatabase mappings," in Distributed Object Management, Oszu, M.T., </title> <editor> U. Dayal and P. Valduriez (eds.), </editor> <publisher> Morgan Kauffman Publishers, </publisher> <year> 1993. </year>
Reference-contexts: This can be applied to integrate object-oriented schemas. This research does not consider schematic conflicts. [Kri91] tackle that problem by discussing the language features for interoperability based on relational models. <ref> [Cho93] </ref> also propose a language for declarative specification of mapping between different object-oriented multidatabases. Many researchers then advocate a global schema approach, where a unified global schema is built to resolve conflicts among multiple local schemas. Several systems have also been implemented.
Reference: [Fis90] <author> Fishman, D. H., et al. </author> <title> "Iris: An Onject Oriented Database Management System," in Readings in Object-Oriented Database Systems, </title> <editor> Zdonik, S.B. and D. Maier (eds.), </editor> <publisher> Morgan Kaufmann, Inc, </publisher> <year> 1990. </year>
Reference-contexts: Some query languages for object-oriented models include a path-oriented language XSQL [Kif92], or a functional language, OSQL <ref> [Fis90] </ref>. There are a number of methods advocated in earlier research to resolve this problem. Most of the early work discuss schema integration based on relational models or entity-relationship models (see a summary in [Bat86]). [Man88] then provides a rule-based approach for merging generalization hierarchies.
Reference: [Ken91] <author> Kent, W. </author> <title> "Solving domain mismatch and schema mismatch problems with an object-oriented database programming language," </title> <booktitle> Proceedings of the International Conference on Very Large Data Bases, </booktitle> <year> 1991. </year>
Reference: [Kif90] <author> Kifer, M., G. Lausen, and J. </author> <title> Wu "Logical foundations of object-oriented and frame-based languages," </title> <institution> SUNY at Stonybrook, </institution> <year> 1990, </year> <type> Technical report 90/14. </type>
Reference: [Kif92] <author> Kifer, M., W. Kim, and Y. </author> <title> Sagiv "Querying object-oriented databases," </title> <booktitle> Proc. of the ACM Sigmod Conference, </booktitle> <year> 1992. </year>
Reference-contexts: For example, common query languages for the relational model are SQL and relational algebra. fl This research has been partially supported by the Defense Advanced Research Project Agency under grant DARPA/ONR grant 92-J1929. Some query languages for object-oriented models include a path-oriented language XSQL <ref> [Kif92] </ref>, or a functional language, OSQL [Fis90]. There are a number of methods advocated in earlier research to resolve this problem. <p> The XSQL query language is described in detail in <ref> [Kif92] </ref>. We provide a brief description of this query language. A simple XSQL query is as follows: SELECT p.e.* FROM fobject-variable, class-variableg* WHERE p.e.* The building blocks of XSQL queries are path expressions (p.e.), which describe compositions of references.
Reference: [Kim91] <author> Kim, W. and J. </author> <title> Seo "Classifying schematic and data heterogeneity in multidatabase systems," </title> <booktitle> IEEE Computer, </booktitle> <pages> 12-18, </pages> <year> 1991. </year>
Reference-contexts: A comprehensive framework for classifying representational heterogeneity among relational and object-oriented schemas is provided in <ref> [Kim91] </ref> and [Kim93]. Their solutions specifically address unifying all the entities in multiple schemas to build a single global schema. We modify their discussion to also discuss a mapping approach, so a query posed against an existing legacy database can be transformed with respect to other existing remote schema.
Reference: [Kim93] <author> Kim, W., Choi, I., Gala, S. and Scheevel, M. </author> <title> "On resolving heterogeneity in multidatabase systems," </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> Vol. 1, </volume> <pages> 251-279, </pages> <year> 1993. </year>
Reference-contexts: Many researchers then advocate a global schema approach, where a unified global schema is built to resolve conflicts among multiple local schemas. Several systems have also been implemented. For example, <ref> [Kim93] </ref> build UniSQL/M, a commercial multidatabase system where virtual classes are created to resolve and "homogenize" heterogeneous entities in both relational and object-oriented schemas. <p> A comprehensive framework for classifying representational heterogeneity among relational and object-oriented schemas is provided in [Kim91] and <ref> [Kim93] </ref>. Their solutions specifically address unifying all the entities in multiple schemas to build a single global schema. We modify their discussion to also discuss a mapping approach, so a query posed against an existing legacy database can be transformed with respect to other existing remote schema. <p> We modify their discussion to also discuss a mapping approach, so a query posed against an existing legacy database can be transformed with respect to other existing remote schema. The conflicts are classified in Table 1. The differences between the mapping approach here with the discussion in <ref> [Kim93] </ref> for building a global schema is desribed in [Cha94a]. The parameterized canonical representation, HTx-yMapping, is used to capture the knowledge to resolve representational heterogeneity discussed in Table 1.
Reference: [Kri91] <author> Krishnamurthy, R., W. Litwin, and W. </author> <title> Kent "Language features for interoperability of databases with schematic discrepancies," </title> <booktitle> Proceedings of the ACM Sigmod Conference, </booktitle> <year> 1991. </year>
Reference-contexts: Most of the early work discuss schema integration based on relational models or entity-relationship models (see a summary in [Bat86]). [Man88] then provides a rule-based approach for merging generalization hierarchies. This can be applied to integrate object-oriented schemas. This research does not consider schematic conflicts. <ref> [Kri91] </ref> tackle that problem by discussing the language features for interoperability based on relational models. [Cho93] also propose a language for declarative specification of mapping between different object-oriented multidatabases.
Reference: [Law93] <author> Lawley, M. </author> <title> "A Prolog interpreter for F-logic," </title> <institution> Griffith University, </institution> <year> 1993, </year> <type> Technical report. </type>
Reference: [Lef92] <author> Lefebvre, A., P. Bernus and R. </author> <title> Topor "Query transformation for accessing heterogeneous databases," </title> <booktitle> Joint International Conference and Symposium on Logic Programming, Workshop on Deductive Databases, </booktitle> <year> 1992. </year>
Reference-contexts: Also, it is complicated to incorporate new databases because the global schema has to be modified. In contrast to the global schema approach, there is a different approach to resolve conflicts by building a canonical knowledge base of mapping knowledge among schema entities. <ref> [Lef92] </ref> consider the problem of interoperable query processing among multiple relational schemas. F-logic, a second order logic, is used to express the mapping knowledge base. [Qia93] suggests that a language which has minimal representation bias may express mismatch in representation among heterogeneous schema.
Reference: [Man88] <author> Mannino, M., S. Navathe and W. </author> <title> Effelsberg "A rule-based approach for merging generalization hierarchies," </title> <booktitle> Information Systems 13:3, </booktitle> <pages> 257-272, </pages> <year> 1988. </year>
Reference-contexts: There are a number of methods advocated in earlier research to resolve this problem. Most of the early work discuss schema integration based on relational models or entity-relationship models (see a summary in [Bat86]). <ref> [Man88] </ref> then provides a rule-based approach for merging generalization hierarchies. This can be applied to integrate object-oriented schemas.
Reference: [Ozs93] <author> Ozsu, T., Dayal, U. and Valduriez, P. </author> <title> Distributed Object Management, </title> <publisher> Morgan Kauffman, </publisher> <year> 1993. </year>
Reference-contexts: Another approach is "distributed object management" which is based on a common object model and common object language. The heterogeneous databases are modeled as objects in a distributed object space and the system supports a protocol for object interoperation (see <ref> [Ozs93] </ref>). In this paper, our objective is to develop an architecture where a query can be posed against a local database system (e.g., a legacy databases, a global schema, or a federated schema).
Reference: [Qia93] <author> Qian, X. </author> <title> "Semantic interoperation via intelligent mediation," </title> <booktitle> IEEE Data Engineering, Workshop on Research Issues in Data Engineering, </booktitle> <year> 1993. </year>
Reference-contexts: F-logic, a second order logic, is used to express the mapping knowledge base. <ref> [Qia93] </ref> suggests that a language which has minimal representation bias may express mismatch in representation among heterogeneous schema.
Reference: [Qia95] <author> Qian, X. and Raschid, L. </author> <title> "Translating object-oriented queries to relational queries," </title> <booktitle> To appear in Proceedings of the International Conference on Data Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: The paper uses a first order deductive database to represent mapping knowledge among different relational schemas; it also uses a theorem proving approach to provide equivalent queries. <ref> [Qia95] </ref> then extends this approach to resolve conflicts among object and relational schemas. A federated approach [She90] stresses autonomy and flexibility by relying on multiple "imported" schemas, and avoids the problem of building a single global unified schema.
Reference: [Ras93] <author> Raschid, L., Chang, Y. and B. </author> <title> Dorr "Interoperable Query Processing with Multiple Heterogeneous Knowledge Servers," </title> <booktitle> Proceedings of the Second International Conference on Information and Knowledge Management, </booktitle> <year> 1993. </year>
Reference-contexts: When mapping from object schema to relational schema, these rules will produce a sequence of join for the relational query corresponding to inheritance through a class hierarchy in the object schema (see <ref> [Ras93, 94] </ref>). Selected rules in each group will be applied, and each produces a part of the transformed query (TQobj, or TQrel). The final module of the IM is the Generator Module (GM). This module accesses the local knowledge dictionary, corresponding to the target schema.
Reference: [Ras94] <author> Raschid, L., Chang, Y. and B. </author> <title> Dorr "Query Transformation Techniques for Interoperable Query Processing in Cooperative Information Systems," </title> <booktitle> Proceedings of the Second International Conference on Cooperative Information Systems, </booktitle> <year> 1994. </year>
Reference: [She90] <author> Sheth, A. and Larson, J. </author> <title> "Federated Database Systems for Managing Distributed, Hegerogeneous and Autonomous Databases," </title> <journal> ACM Computing Surveys 22:3, </journal> <year> 1990. </year>
Reference-contexts: The paper uses a first order deductive database to represent mapping knowledge among different relational schemas; it also uses a theorem proving approach to provide equivalent queries. [Qia95] then extends this approach to resolve conflicts among object and relational schemas. A federated approach <ref> [She90] </ref> stresses autonomy and flexibility by relying on multiple "imported" schemas, and avoids the problem of building a single global unified schema. Another approach is "distributed object management" which is based on a common object model and common object language.
References-found: 24

