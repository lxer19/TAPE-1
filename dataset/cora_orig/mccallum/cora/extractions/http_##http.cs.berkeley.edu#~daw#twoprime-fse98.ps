URL: http://http.cs.berkeley.edu/~daw/twoprime-fse98.ps
Refering-URL: http://http.cs.berkeley.edu/~daw/me.html
Root-URL: http://www.cs.berkeley.edu
Email: e-mail: copper@watson.ibm.com  e-mail: daw@cs.berkeley.edu  e-mail: fschneier,kelseyg@counterpane.com  
Phone: 2  
Title: Cryptanalysis of TWOPRIME  
Author: Don Coppersmith David Wagner Bruce Schneier and John Kelsey 
Address: Berkeley,  
Affiliation: U.C.  
Note: 1 IBM Research,  3 Counterpane Systems,  
Abstract: Ding et al [DNRS97] propose a stream generator based on several layers. We present several attacks. First, we observe that the non-surjectivity of a linear combination step allows us to recover half the key with minimal effort. Next, we show that the various bytes are insufficiently mixed by these layers, enabling an attack similar to those on two-loop Vigenere ciphers to recover the remainder of the key. Combining these techniques lets us recover the entire TWOPRIME key. We require the generator to produce 2 33 blocks (2 35 bytes), or 19 hours worth of output, of which we examine about one million blocks (2 23 bytes); the computational workload can be estimated at 2 28 operations. Another set of attacks trades off texts for time, reducing the amount of known plaintext needed to just eight blocks (64 bytes), while needing 2 32 time and 2 32 space. We also show how to break two variants of TWOPRIME presented in the original paper.
Abstract-found: 1
Intro-found: 1
Reference: [DNRS97] <author> C. Ding, V. Niemi, A. Renvall, and A. Salomaa, "TWOPRIME: </author> <title> A Fast Stream Ciphering Algorithm," Fast Software Encryption, </title> <publisher> FSE'97, Springer LNCS volume 1267, </publisher> <pages> pages 88-102, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction The TWOPRIME stream cipher <ref> [DNRS97] </ref>, introduced at FSE'97, uses a 128-bit key to generate 64-bit blocks of output at each time step; these output blocks are exclusive-ORed onto the plaintext to produce ciphertext. <p> Nonetheless, despite the proofs of various security properties, in this paper we show how to break TWOPRIME very efficiently. 1 Note that it is possible to prove that using any block cipher in counter mode has good linear complexity and good cycle length|at least, in the sense that <ref> [DNRS97] </ref> proved for TWOPRIME|so in retrospect these proofs are perhaps not terribly meaningful. Cryptanalysis of TWOPRIME 33 Our attacks fall into two natural categories. The first three attacks, discussed in Sections 4-7, recover half of the key (namely, K 2 ; K 3 ). <p> Section 10 discusses some of the computational requirements of each attack. Section 11 and 12 discuss variants of the original scheme, and some attacks on these variants. Conclusions are reserved for Section 14. 2 Description of TWOPRIME The TWOPRIME scheme <ref> [DNRS97] </ref> uses a 128-bit key to generate 64-bit blocks of output at each time step; these output blocks are exclusive-ORed onto the plaintext to produce ciphertext. <p> In total about 212,000,000 key bytes need to be examined. 44 Don Coppersmith, David Wagner, Bruce Schneier, John Kelsey 11 TWOPRIME-1 The same paper <ref> [DNRS97] </ref> proposes a faster version TWOPRIME-1, differing from TWOPRIME only in the seventh layer; in TWOPRIME-1, this layer preserves halves. <p> In short, this second approach breaks TWOPRIME-1 with about the same time and space complexity as the corresponding attack on TWOPRIME. We require slightly more known plaintext, but 50 blocks (400 bytes) of known plaintext should be readily available in many systems. 12 ONEPRIME The same paper <ref> [DNRS97] </ref> proposes a scheme ONEPRIME, which differs from TWOPRIME only in the first layer: instead of two primes p 0 and p 1 , we have only one prime p = 2 64 59 and fixed multiplier a.
Reference: [Kal92] <author> B.S. Kaliski, </author> <title> "The MD2 Message Digest Algorithm," </title> <type> RFC 1319, </type> <month> April </month> <year> 1992. </year>
Reference-contexts: The Davies-Meyer construction [Win84] builds F as F (a) = G (a) a. Here all the strength is concentrated in a bijective function G (usually built out of a block cipher); the non-surjectivity is introduced as late as possible, and as simply as possible. MD2 <ref> [Kal92] </ref> and Snefru [Mer90] also follow our suggested design principle: they too use a bijective function G at Cryptanalysis of TWOPRIME 47 the core, and introduce non-surjectivity only at the endpoints (by adding simple redundancy to the input of G, and truncating its output). This design principle is not novel.
Reference: [Mer90] <author> R.C. Merkle, </author> <title> "A Fast Software One-Way hash Function," </title> <journal> Journal of Cryptology, </journal> <volume> vol 3 no 1, </volume> <year> 1990. </year>
Reference-contexts: The Davies-Meyer construction [Win84] builds F as F (a) = G (a) a. Here all the strength is concentrated in a bijective function G (usually built out of a block cipher); the non-surjectivity is introduced as late as possible, and as simply as possible. MD2 [Kal92] and Snefru <ref> [Mer90] </ref> also follow our suggested design principle: they too use a bijective function G at Cryptanalysis of TWOPRIME 47 the core, and introduce non-surjectivity only at the endpoints (by adding simple redundancy to the input of G, and truncating its output). This design principle is not novel.
Reference: [OW96] <author> P.C. van Oorschot and M.J. Wiener, </author> <title> "Improving implementable meet-in-the-middle attacks by orders of magnitude," </title> <booktitle> CRYPTO'96, </booktitle> <pages> pages 228-236, </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: This is not out of reach, and the interested reader might be able to find better ways to reduce memory needs: for example, the parallel collision search techniques of van Oorschot and Wiener <ref> [OW96] </ref> (applied to find a "golden collision") look promising. For the attack based on identifying occurrences of event E (see Sections 6-8), we need the generator to run for p 0 + p 1 2 33 time steps, generating 2 36 bytes.
Reference: [Pre93] <author> B. Preneel, </author> <title> "Design principles for dedicated hash functions," Fast Software Encryption, it FSE'93, </title> <publisher> Springer LNCS volume 809, </publisher> <pages> pages 71-82, </pages> <year> 1994. </year>
Reference-contexts: This design principle is not novel. It has been discussed in more detail by Preneel in the context of the design of compression functions for hash functions; see <ref> [Pre93, e.g. Section 4.2] </ref>. 14 Conclusions Pulling it all together, we can identify three important attacks against the stream cipher TWOPRIME. First, we can break TWOPRIME with 2048 blocks of known keystream and 2 32 work by using the techniques of Sections 4 and 9.
Reference: [Sin68] <author> A. Sinkov, </author> <title> Elementary Cryptanalysis, A Mathematical Approach. </title> <address> New York: </address> <publisher> Random House, </publisher> <year> 1968. </year>
Reference-contexts: So we develop here another attack against that eventuality. This attack is similar to the attacks on two-loop Vigenere ciphers, which can be found in references <ref> [Sin68] </ref> and [Tuc70].
Reference: [Tuc70] <author> B. Tuckerman, </author> <title> "A study of the Vigenere-Vernam single and multiple loop enciphering systems," </title> <institution> IBM Research Report RC2879, </institution> <address> 14 May 1970, York-town Heights NY. </address>
Reference-contexts: So we develop here another attack against that eventuality. This attack is similar to the attacks on two-loop Vigenere ciphers, which can be found in references [Sin68] and <ref> [Tuc70] </ref>.
Reference: [Win84] <author> R. Winternitz, </author> <title> "Producing One-Way Hash Functions from DES," </title> <booktitle> Advances in Cryptology: Proceedings of Crypto 83, </booktitle> <publisher> Plenum Press, </publisher> <year> 1984, </year> <pages> pp. 203-207. </pages> <note> 48 Don Coppersmith, </note> <editor> David Wagner, Bruce Schneier, </editor> <publisher> John Kelsey </publisher>
Reference-contexts: Note that the latter design principle offers some intuitive justification for the structure of many of today's most successful non-bijective cryptographic functions (such as MD5, SHA, : : :). The Davies-Meyer construction <ref> [Win84] </ref> builds F as F (a) = G (a) a. Here all the strength is concentrated in a bijective function G (usually built out of a block cipher); the non-surjectivity is introduced as late as possible, and as simply as possible.
References-found: 8

