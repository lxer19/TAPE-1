URL: http://www.cs.nyu.edu/cs/faculty/shasha/papers/bjournal.ps
Refering-URL: http://www.cs.nyu.edu/cs/faculty/shasha/papers/papers.html
Root-URL: http://www.cs.nyu.edu
Email: johnson@csd4.cs.nyu.edu  shasha@cs.nyu.edu  
Title: B-trees with Inserts and Deletes: Why Free-at-empty is Better Than Merge-at-half  
Author: Theodore Johnson, Dennis Shasha, 
Date: September 2, 1992  
Address: New York University  
Affiliation: Courant Institute of Mathematical Sciences,  
Abstract: The space utilization of B-tree nodes determines the number of levels in the B-tree and hence its performance. Until now, the only analytical aid to the determination of a B-tree's utilization has been the analysis by Yao and related work. Yao showed that the utilization of B-tree nodes under pure inserts is 69%. We derive analytically and verify by simulation the utilization of B-tree nodes constructed from a mixture of insert and delete operations. Assuming that nodes only merge (i.e. are freed) when they are empty we show that the utilization is 39% when the number of inserts is the same as the number of deletes. However, if there are just 5% more inserts than deletes, then the utilization is over 62%. We also calculate the probability of splitting and merging. We derive a simple rule-of-thumb that accurately calculates the probability of splitting. We also model B-trees that merge half-empty nodes. The utilization of merge-at-half B-trees is slightly larger than the utilization of free-at-empty B-trees, but the restructuring rate is much higher. For most purposes, this implies that free-at-empty B-trees are a better implementation choice than merge-at-half B-trees. We present two models for computing B-tree utilization, the more accurate of which remembers items inserted and then deleted in a node.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Baeza-Yates. </author> <title> Expected behavior of B + -trees under random inserts. </title> <journal> Acta Informatica, </journal> <volume> 27, </volume> <year> 1989. </year>
Reference-contexts: Fringe analysis is the analysis of the leaves of a tree data structure. Eisenbarth et.al. [6] show how to solve the matrix recurrence equations that result from a pure-insert model. B-tree variants are analyzed using fringe analysis in [2] and <ref> [1] </ref>. Another B-tree variant that has high space utilization is analyzed in [9]. An alternative approach to estimating the utilization of a B-tree appears in [11] and is improved on in [7]. Yao's method is elaborated upon to obtain the probability of splitting in [18].
Reference: [2] <author> R. Baeza-Yates and P. Larson. </author> <title> Performance of B + -trees with partial expansions. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 1, </volume> <year> 1989. </year>
Reference-contexts: Fringe analysis is the analysis of the leaves of a tree data structure. Eisenbarth et.al. [6] show how to solve the matrix recurrence equations that result from a pure-insert model. B-tree variants are analyzed using fringe analysis in <ref> [2] </ref> and [1]. Another B-tree variant that has high space utilization is analyzed in [9]. An alternative approach to estimating the utilization of a B-tree appears in [11] and is improved on in [7]. Yao's method is elaborated upon to obtain the probability of splitting in [18].
Reference: [3] <author> R. Bayer and E.M. McCreight. </author> <title> Organization and maintainance of large ordered indices. </title> <journal> Acta Informatica, </journal> <volume> 1(3) </volume> <pages> 173-189, </pages> <year> 1972. </year>
Reference-contexts: The second type of B-tree that we model merges a half-empty node with its neighbor on a delete (a merge-at-half B-tree). Bayer and McCreight first proposed this merging strategy <ref> [3] </ref>. We compare the two types of B-trees on the basis of their space utilization and restructuring rates and conclude that database management systems have made the right decision. 1.1 Previous Work Yas derives an estimate of 69% utilization for pure insert operations in [19]. <p> We begin with the terminology and methodology. 2 A B-tree is a balanced tree in which the distance between the root and any leaf is the same <ref> [3] </ref>. A B-tree is of parameter p if each non-leaf node has between 1 and 2p 1 children. The children of an interior node are accounted for by entries in a node; there is one entry per child. The entries contain key and pointer information.
Reference: [4] <author> R. Bayer and M. Schkolnick. </author> <title> Concurrency of operations on B-trees. </title> <journal> Acta Informatica, </journal> <volume> 9 </volume> <pages> 1-21, </pages> <year> 1977. </year>
Reference-contexts: Thus, merge-at-half usually buys little in terms of space utilization. In Figure 6, we showed that the restructuring rate of a merge-at-half B-tree is significantly larger than the restructuring rate of a free-at-empty B-tree for all values of q :1. For many concurrent B-tree algorithms used in practice <ref> [4, 13] </ref>, restructuring causes a serialization bottleneck. Thus, one simple but important way to increase concurrency in B-tree operations is to reduce the probability of restructuring.
Reference: [5] <author> J. Driscoll, S. Lang, and L. Franklin. </author> <title> Modeling B-tree insertion activity. </title> <journal> Information Processing Letters, </journal> <volume> 26 </volume> <pages> 5-18, </pages> <year> 1987. </year>
Reference-contexts: An alternative approach to estimating the utilization of a B-tree appears in [11] and is improved on in [7]. Yao's method is elaborated upon to obtain the probability of splitting in [18]. The number of children of the root of a B-tree is approximated in <ref> [5] </ref>. None of the above papers addresses the problem of deletes in the instruction mix. Mizoguchi [12] proposes an approximate model for free-at-empty B-trees in order to analyze utilization. The range of his analysis is from pure inserts to 33% deletes/67% inserts.
Reference: [6] <author> B. Eisenbarth and et. al. </author> <title> The theory of fringe analysis and its applications application to 2-3 trees and B-trees. </title> <journal> Information and Control, </journal> <volume> 55(1) </volume> <pages> 125-174, </pages> <year> 1982. </year>
Reference-contexts: Mizoguchi [15] independently derives the same result by nearly the same methods. Yao's method of analysis is generalized to fringe analysis by Eisenbarth et. al. <ref> [6] </ref>. Fringe analysis is the analysis of the leaves of a tree data structure. Eisenbarth et.al. [6] show how to solve the matrix recurrence equations that result from a pure-insert model. B-tree variants are analyzed using fringe analysis in [2] and [1]. <p> Mizoguchi [15] independently derives the same result by nearly the same methods. Yao's method of analysis is generalized to fringe analysis by Eisenbarth et. al. <ref> [6] </ref>. Fringe analysis is the analysis of the leaves of a tree data structure. Eisenbarth et.al. [6] show how to solve the matrix recurrence equations that result from a pure-insert model. B-tree variants are analyzed using fringe analysis in [2] and [1]. Another B-tree variant that has high space utilization is analyzed in [9].
Reference: [7] <author> G. Gupta and B. Srinivasan. </author> <title> Approximate storage utilization of B-trees. </title> <journal> Information Processing Letters, </journal> <volume> 22 </volume> <pages> 243-246, </pages> <year> 1986. </year>
Reference-contexts: B-tree variants are analyzed using fringe analysis in [2] and [1]. Another B-tree variant that has high space utilization is analyzed in [9]. An alternative approach to estimating the utilization of a B-tree appears in [11] and is improved on in <ref> [7] </ref>. Yao's method is elaborated upon to obtain the probability of splitting in [18]. The number of children of the root of a B-tree is approximated in [5]. None of the above papers addresses the problem of deletes in the instruction mix.
Reference: [8] <institution> NAG (USA) inc. NAG. </institution> <address> 1131 Warren Ave.; Downers Grove, IL 60515. </address>
Reference-contexts: Remove one of the equations to get 2p 1 equations in 2p 1 variables, and the system is ready to be solved by a non-linear equation solving package. The package we used is NAG <ref> [8] </ref>. Three simulation experiments were run. A B-tree was built using insert operations, and then a long sequence of modify operations was performed. The experiments were run for p = 5; 10; 15; 20. <p> + q (i + 1)a i+1 + (1 q)(i 1)a i1 qpa p a i 3p 1 &lt; i &lt; 2p 1 + v (a i + a p ) i = 2p 1 P 2p1 We solved the above set of non-linear equations with the numerical analysis package NAG <ref> [8] </ref>. 3.2 Comparison We modified the free-at-empty simulator to make a merge-at-half B-tree and performed experiments to compare against the results of our analysis. In Tables 8, 9 and 10, we compare the results from the analysis and the simulations.
Reference: [9] <author> K. Kuspert. </author> <title> Storage utilization in B fl -trees with a generalized overflow technique. </title> <journal> Acta Infor-matica, </journal> <volume> 19(4) </volume> <pages> 35-55, </pages> <year> 1983. </year>
Reference-contexts: Eisenbarth et.al. [6] show how to solve the matrix recurrence equations that result from a pure-insert model. B-tree variants are analyzed using fringe analysis in [2] and [1]. Another B-tree variant that has high space utilization is analyzed in <ref> [9] </ref>. An alternative approach to estimating the utilization of a B-tree appears in [11] and is improved on in [7]. Yao's method is elaborated upon to obtain the probability of splitting in [18]. The number of children of the root of a B-tree is approximated in [5].
Reference: [10] <author> C. Langenhop and W. Wright. </author> <title> An efficient model for representing and analyzing B-trees. </title> <booktitle> In ACM-NCC, </booktitle> <pages> pages 35-40, </pages> <year> 1985. </year>
Reference-contexts: They analyze the case of pure inserts (where they are consistent with Yao) and the case of pure modifies. Our linear model is similar to theirs. Wright and Langenhop <ref> [10] </ref> also have a model for merge-at-half B trees with pure modify operations. Their predictions are different from those in [16] (and ours). It turns out that simulation results fall roughly in between.
Reference: [11] <author> C. Leung. </author> <title> Approximate storage utilization of B-trees: A simple derivation and generalizations. </title> <journal> Information Processing Letters, </journal> <volume> 19 </volume> <pages> 199-210, </pages> <year> 1984. </year>
Reference-contexts: B-tree variants are analyzed using fringe analysis in [2] and [1]. Another B-tree variant that has high space utilization is analyzed in [9]. An alternative approach to estimating the utilization of a B-tree appears in <ref> [11] </ref> and is improved on in [7]. Yao's method is elaborated upon to obtain the probability of splitting in [18]. The number of children of the root of a B-tree is approximated in [5]. None of the above papers addresses the problem of deletes in the instruction mix.
Reference: [12] <author> T. Mizoguchi. </author> <title> On the required space for random split trees. </title> <booktitle> In Allerton Conference, </booktitle> <pages> pages 265-273, </pages> <address> Monticello, IL, </address> <year> 1979. </year>
Reference-contexts: Yao's method is elaborated upon to obtain the probability of splitting in [18]. The number of children of the root of a B-tree is approximated in [5]. None of the above papers addresses the problem of deletes in the instruction mix. Mizoguchi <ref> [12] </ref> proposes an approximate model for free-at-empty B-trees in order to analyze utilization. The range of his analysis is from pure inserts to 33% deletes/67% inserts. He also predicts the utilization at 50% deletes/50% inserts (pure modifies), but his solution is pessimistic. <p> The reason is that the B-tree is growing; the factor of 2 ln 2 in the denominator is the result. The space utilization, U , of a B-tree is the portion of space taken up by the B-tree that stores information. The following lemma, which has appeared in <ref> [12] </ref> and [16], will also be useful: Lemma 2 If U is the utilization of the B-tree, then U = (2p 1) a j Corollary 2 The utilization of a B-tree with pure-insert operations is U = 2p 1 Where H (p) is the harmonic function defined previously. <p> We assume that the B-tree is initially built from some sequence of operations (which may contain some deletes), then has a long sequence of modify operations applied to it. Both the insert and delete of the modify operation are assumed to be successful. 5 2.2.1 Ghost Model Both <ref> [12] </ref> and [16] have analyzed the case of pure-modify operations on free-at-empty B-trees, but they assume that the probability that a node receives an insert is proportional to its size. <p> Using this approximation gives us linear equations, so we will call this model the linear model. Mizoguchi described a similar model for B-trees with even maximum node size <ref> [12] </ref>. In this section, we will describe the linear model using the methods that we have developed, examine its range of accuracy, then examine the results on B-tree utilization. <p> Examining the tables, we see that the linear approximation is very accurate for q &lt; :4. At q = :45, the ghost model gives results that more closely match those of the simulation. The case of q = :5 gives the free-at-empty pure-modify models of <ref> [12] </ref> and [16]; Table 4 shows a comparison. The a i calculated from the model for q = :5 is plotted along with the simulation and ghost model results in If q &lt; :5 however, the linear model becomes more accurate as p increases. <p> While the linear model gives reasonable estimates of the space utilization, it gives very poor estimates of the probability of splitting or merging when q becomes close to .5. The linear model predicts a quadratic decrease in P s and P m as p becomes larger for pure-modify operations <ref> [12] </ref>, but the ghost model and the simulation show an exponential decrease.
Reference: [13] <author> C. Mohan. ARIES/KVL: </author> <title> A key-value locking method for concurrency control of multiaction transactions operating on b-tree indexes. </title> <type> Research Report RJ 6864, </type> <institution> IBM, </institution> <year> 1989. </year>
Reference-contexts: We call this type of B-tree a free-at-empty B-tree. fl This work was partially supported by the National Science Foundation under grants number DCR8501611 and IRI-8901699, and by the Office of Naval Research under grant number N00014-85-K-0046. 1 Free-at-empty B-trees are often used in database management systems <ref> [14, 13] </ref>. The second type of B-tree that we model merges a half-empty node with its neighbor on a delete (a merge-at-half B-tree). Bayer and McCreight first proposed this merging strategy [3]. <p> Thus, merge-at-half usually buys little in terms of space utilization. In Figure 6, we showed that the restructuring rate of a merge-at-half B-tree is significantly larger than the restructuring rate of a free-at-empty B-tree for all values of q :1. For many concurrent B-tree algorithms used in practice <ref> [4, 13] </ref>, restructuring causes a serialization bottleneck. Thus, one simple but important way to increase concurrency in B-tree operations is to reduce the probability of restructuring.
Reference: [14] <author> C. Mohan and F. Levine. ARIES/IM: </author> <title> An efficient and high concurrency index management method using write-ahead logging. </title> <type> Research Report RJ 6864, </type> <institution> IBM, </institution> <year> 1989. </year>
Reference-contexts: We call this type of B-tree a free-at-empty B-tree. fl This work was partially supported by the National Science Foundation under grants number DCR8501611 and IRI-8901699, and by the Office of Naval Research under grant number N00014-85-K-0046. 1 Free-at-empty B-trees are often used in database management systems <ref> [14, 13] </ref>. The second type of B-tree that we model merges a half-empty node with its neighbor on a delete (a merge-at-half B-tree). Bayer and McCreight first proposed this merging strategy [3].
Reference: [15] <author> T. Nakamura and T. Mizoguchi. </author> <title> An analysis of storage utilization in block split, data structuring scheme. </title> <booktitle> In 4th International Conference on Very Large Databases, </booktitle> <pages> pages 489-495, </pages> <address> Berlin, </address> <year> 1978. </year>
Reference-contexts: We compare the two types of B-trees on the basis of their space utilization and restructuring rates and conclude that database management systems have made the right decision. 1.1 Previous Work Yas derives an estimate of 69% utilization for pure insert operations in [19]. Mizoguchi <ref> [15] </ref> independently derives the same result by nearly the same methods. Yao's method of analysis is generalized to fringe analysis by Eisenbarth et. al. [6]. Fringe analysis is the analysis of the leaves of a tree data structure.
Reference: [16] <author> K. Quitzow and M. Klopprogge. </author> <title> Space utilization and access path length in B-trees. </title> <journal> Information Systems, </journal> <volume> 5 </volume> <pages> 7-16, </pages> <year> 1980. </year>
Reference-contexts: He also predicts the utilization at 50% deletes/50% inserts (pure modifies), but his solution is pessimistic. Our linear model is similar to Mizoguchi's. (We show that the linear model is not a good approximation as the percentage of deletes approaches 50%.) Quitzow and Klopprogge <ref> [16] </ref> propose a differential equation model to predict the utilization for both free-at-empty and merge-at-half B trees. They analyze the case of pure inserts (where they are consistent with Yao) and the case of pure modifies. Our linear model is similar to theirs. <p> They analyze the case of pure inserts (where they are consistent with Yao) and the case of pure modifies. Our linear model is similar to theirs. Wright and Langenhop [10] also have a model for merge-at-half B trees with pure modify operations. Their predictions are different from those in <ref> [16] </ref> (and ours). It turns out that simulation results fall roughly in between. Hsu and Zhang [20] analyze restructuring rates (i.e., rates of splits and merges) as a function of the merging point using a simple mathematical model. <p> The space utilization, U , of a B-tree is the portion of space taken up by the B-tree that stores information. The following lemma, which has appeared in [12] and <ref> [16] </ref>, will also be useful: Lemma 2 If U is the utilization of the B-tree, then U = (2p 1) a j Corollary 2 The utilization of a B-tree with pure-insert operations is U = 2p 1 Where H (p) is the harmonic function defined previously. <p> Both the insert and delete of the modify operation are assumed to be successful. 5 2.2.1 Ghost Model Both [12] and <ref> [16] </ref> have analyzed the case of pure-modify operations on free-at-empty B-trees, but they assume that the probability that a node receives an insert is proportional to its size. <p> Examining the tables, we see that the linear approximation is very accurate for q &lt; :4. At q = :45, the ghost model gives results that more closely match those of the simulation. The case of q = :5 gives the free-at-empty pure-modify models of [12] and <ref> [16] </ref>; Table 4 shows a comparison. The a i calculated from the model for q = :5 is plotted along with the simulation and ghost model results in If q &lt; :5 however, the linear model becomes more accurate as p increases. <p> Therefore, we present only an approximate analysis for the purpose of comparing to free-at-empty B-trees. The following analysis is similar to the analysis of <ref> [16] </ref>, who model the B-tree nodes using differential equations. However, [16] examines only the cases of pure-insert and pure-modify. <p> Therefore, we present only an approximate analysis for the purpose of comparing to free-at-empty B-trees. The following analysis is similar to the analysis of <ref> [16] </ref>, who model the B-tree nodes using differential equations. However, [16] examines only the cases of pure-insert and pure-modify. For a comparison, we need to know the utilization for the entire range of q, because merges might (and in fact do) cause the utilization to increase when there are deletes in the instruction mix. Also, [16] does not calculate the restructuring <p> However, <ref> [16] </ref> examines only the cases of pure-insert and pure-modify. For a comparison, we need to know the utilization for the entire range of q, because merges might (and in fact do) cause the utilization to increase when there are deletes in the instruction mix. Also, [16] does not calculate the restructuring probabilities. 12 3.1 Analysis The first step in the analysis is to specify how the tree is modified on an insert or a delete.
Reference: [17] <author> H. Wedekind. </author> <title> On the selection of access paths in a data base system. </title> <editor> In J.W. Klimbie and K.L. Koffeman, editors, </editor> <booktitle> Database Management, </booktitle> <pages> pages 385-397. </pages> <publisher> North Holland Publishing Company, </publisher> <year> 1974. </year>
Reference-contexts: The entries contain key and pointer information. The leaf nodes contain the items in the B-tree, where an item consists of a key and a pointer to the associated record (This type of B-tree was first proposed by Wedekind <ref> [17] </ref> and is often called a B + -tree). A B-tree node is of order k if it has k entries or items. This analysis will count the entries in the interior nodes because analyses of interior nodes will be primarily concerned with their fanout.
Reference: [18] <author> W. Wright. </author> <title> Some average performance measures for the B-tree. </title> <journal> Acta Informatica, </journal> <volume> 16, </volume> <year> 1985. </year>
Reference-contexts: Another B-tree variant that has high space utilization is analyzed in [9]. An alternative approach to estimating the utilization of a B-tree appears in [11] and is improved on in [7]. Yao's method is elaborated upon to obtain the probability of splitting in <ref> [18] </ref>. The number of children of the root of a B-tree is approximated in [5]. None of the above papers addresses the problem of deletes in the instruction mix. Mizoguchi [12] proposes an approximate model for free-at-empty B-trees in order to analyze utilization. <p> However, this system is simple enough that we can give an algebraic solution. Theorem 1 (Yao) a i = 1 where H (p) is the harmonic function H (p) = P p The following lemma has appeared in <ref> [18] </ref>: Lemma 1 The probability of inserting at an order i node on the leaf level when all of the operations on the B-tree are inserts is ia i .
Reference: [19] <author> A. Yao. </author> <title> On random 2-3 trees. </title> <journal> Acta Informatica, </journal> <volume> 9 </volume> <pages> 159-170, </pages> <year> 1978. </year>
Reference-contexts: A modify operation is modeled as an insert-delete pair. We assume that every item in the B-tree is equally likely to be deleted on a delete operation, and that every permutation of the operands of the insert operations is equally likely. The method is based on Yao's <ref> [19] </ref> except that we consider the solution to be the equilibrium point of a set of difference equations. <p> We compare the two types of B-trees on the basis of their space utilization and restructuring rates and conclude that database management systems have made the right decision. 1.1 Previous Work Yas derives an estimate of 69% utilization for pure insert operations in <ref> [19] </ref>. Mizoguchi [15] independently derives the same result by nearly the same methods. Yao's method of analysis is generalized to fringe analysis by Eisenbarth et. al. [6]. Fringe analysis is the analysis of the leaves of a tree data structure.

References-found: 19

