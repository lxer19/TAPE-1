URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1998/85198-CS.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1998-en.html
Root-URL: http://cs.uni-bonn.de
Email: Email: marek@cs.bonn.edu.  Email: wirtgen@cs.bonn.edu  
Title: NP-Hardness of the Bandwidth Problem on Dense Graphs (Revised)  
Author: Marek Karpinski Jurgen Wirtgen 
Note: Research partially supported by DFG Grant KA 673/4-1, by the ESPRIT BR Grants 7097 and EC-US 030, and by the Max-Planck Research Prize.  Research partially supported by the ESPRIT BR Grants 7097 and EC-US 030.  
Address: Bonn, 53117 Bonn.  Bonn, 53117 Bonn.  
Affiliation: Dept. of Computer Science, University of  Dept. of Computer Science, University of  
Abstract: The bandwidth problem is the problem of numbering the vertices of a given graph G such that the maximum difference between the numbers of adjacent vertices is minimal. The problem has a long and varied history and is known to be NP -hard Papadimitriou [Pa 76]. Recently for ffi-dense graphs a constant ratio approximation algorithm for this problem has been constructed in Karpinski, Wirtgen and Zelikovsky [KWZ 97]. In this paper we prove that the bandwidth problem on the dense instances remains N P -hard. 
Abstract-found: 1
Intro-found: 1
Reference: [ACP 87] <author> Arnborg, S., Corneil, D., Proskurowski, A., </author> <title> Complexity of Finding Embeddings in a k-Tree, </title> <journal> SIAM Journal on Algebraic Discrete Methods 8 (1987), </journal> <pages> pp. 277-284. </pages>
Reference-contexts: In this paper we show that the bandwidth problem on dense graphs is N P -hard, answering the question raised in [KWZ 97]. This paper is organized as follows. In Section 2 we introduce some notations in graph theory related to the bandwidth and discuss some known results of <ref> [ACP 87] </ref> [BGHK 95] [KKM 96]. In section 3 we relate the results of section 2 to the bandwidth problem in everywhere dense graphs and prove its N P -hardness. 2 2 Related Notations and Known Results The class of k-trees is defined recursively as follows: 1. <p> Any subgraph of a k-tree is called partial k-tree. Arnborg et al. showed in <ref> [ACP 87] </ref> that PARTIAL-k-TREE is N P -complete. PARTIAL-k-TREE is the problem given a graph G and an integer k, decide whether G is a partial k-tree or not. <p> Thus it is easy to show that the bandwidth problem on everywhere dense graphs is NP-hard. 3 NP-Hardness for Everywhere Dense Graphs First of all we sketch the proof of N P -hardness of PARTIAL-k-TREE proposed in <ref> [ACP 87] </ref> to show that the constructed instance is a everywhere dense cobipar-tite graph. By the results stated in section 2 the N P -hardness of bandwidth in everywhere dense graphs follows. Theorem 5 ([ACP 87]) PARTIAL-k-TREE is N P -hard.
Reference: [AKK 95] <author> Arora, S., Karger, D., Karpinski, M., </author> <title> Polynomial Time Approximation Schemes for Dense Instances of NP-Hard Problems, </title> <booktitle> Proc. 27 th ACM STOC (1995), </booktitle> <pages> pp. 284-293. </pages>
Reference: [BGHK 95] <author> Bodlaender, H., Gilbert, J., Hafsteinsson, H., Kloks, T., </author> <title> Approximating Treewidth, Pathwidth, Frontsize and Shortest Elimination Tree, </title> <booktitle> Journal of Algorithms 18 (1995), </booktitle> <pages> pp. 238-255. 5 </pages>
Reference-contexts: This paper is organized as follows. In Section 2 we introduce some notations in graph theory related to the bandwidth and discuss some known results of [ACP 87] <ref> [BGHK 95] </ref> [KKM 96]. In section 3 we relate the results of section 2 to the bandwidth problem in everywhere dense graphs and prove its N P -hardness. 2 2 Related Notations and Known Results The class of k-trees is defined recursively as follows: 1.
Reference: [CCDG 82] <author> Chinn, P., Chvatalova, J., Dewdney, A., Gibbs, N., </author> <title> The Bandwidth Problem for Graphs and Matrices A Survey, </title> <journal> Journal of Graph Theory (1982), </journal> <pages> pp. 223-254. </pages>
Reference-contexts: 1 Introduction The bandwidth problem on graphs has a very long and interesting history cf. <ref> [CCDG 82] </ref>. Formally the bandwidth minimization problem is defined as follows. Let G = (V; E) be a simple graph on n vertices. A numbering ( or layout ) of G is a one-to-one mapping f : V ! f1; :::; ng.
Reference: [GGJK 78] <author> Garey, M., Graham, R., Johnson, D., Knuth, D., </author> <title> Complexity Results for Bandwidth Minimization, </title> <journal> SIAM J. Appl. Math. </journal> <volume> 34 (1978), </volume> <pages> pp. 477-495. </pages>
Reference-contexts: The problem of finding the bandwidth of a graph is NP-hard [Pa 76], even for trees with maximum degree 3 <ref> [GGJK 78] </ref>. The general problem is not known to have any sublinear n * -approximation algorithms. There are only few cases where we can find the optimal layout in polynomial time. <p> There are only few cases where we can find the optimal layout in polynomial time. Saxe [Sa 80] designed an algorithm which decides whether a given graph has bandwidth at most k in time O (n k ) by dynamic programming. Bandwidth two can be checked in linear time <ref> [GGJK 78] </ref>. Kratsch [Kr 87] introduced an exact O (n 2 log n) algorithm for the bandwidth problem in interval graphs. Smithline [Sm 95] proved that the bandwidth of the complete k-ary tree T k;d with d levels and k d leaves is exactly dk (k d 1)=(k 1)(2d)e.
Reference: [GJ 79] <author> Garey, M. R., Johnson, D. S., Computers and Intractability, W. H. Freeman and Company, </author> <year> 1979. </year>
Reference-contexts: Theorem 5 ([ACP 87]) PARTIAL-k-TREE is N P -hard. Proof: (Sketch) Let G = (V; E) be a input graph of the N P -complete MINIMUM CUT LINEAR ARRANGEMENT (MCLA) problem (for the proof of N P - completeness see <ref> [GJ 79] </ref> [GT44]): given G and a positive integer k, does there exist a numbering f of V , such that c (f; G) = max jffu; vg 2 Ejf (u) j &lt; f (v)gj k We will construct a bipartite graph G 0 = (A [ B; E 0 ).
Reference: [HMM 91] <author> Haralamides, J., Makedon, F., Monien, B., </author> <title> Bandwidth Minimization: an Approximation Algorithm for Caterpillars, Math. </title> <booktitle> Systems Theory 24 (1991), </booktitle> <pages> pp. 169-177. </pages>
Reference-contexts: Smithline [Sm 95] proved that the bandwidth of the complete k-ary tree T k;d with d levels and k d leaves is exactly dk (k d 1)=(k 1)(2d)e. Her proof is constructive and contains a polynomial time algorithm, for this task. For caterpillars <ref> [HMM 91] </ref> found a polynomial time log n-approximation algorithm.
Reference: [KWZ 97] <author> Karpinski, M., Wirtgen, J., Zelikovsky, A., </author> <title> An Approximation Algorithm for the Bandwidth Problem on Dense Graphs, </title> <type> Technical Report ECCC TR 97-017, </type> <year> 1997. </year>
Reference-contexts: A caterpillar is a special kind of a tree consisting of a simple chain, the body, with an arbitrary number of simple chains, the hairs, attached to the body by coalescing an endpoint of the added chain with a vertex of the body. Karpinski, Wirtgen and Zelikovsky <ref> [KWZ 97] </ref> designed a 3-approximation algorithm for ffi-dense graphs. Definition 1 ([AKK 95]) We call a graph dense, if the number of edges is in (n 2 ). A graph G is ffi-dense, if the minimum degree ffi (G) is at least ffin. <p> We call it everywhere dense, if it is ffi-dense for some ffi &gt; 0 in O (1). In this paper we show that the bandwidth problem on dense graphs is N P -hard, answering the question raised in <ref> [KWZ 97] </ref>. This paper is organized as follows. In Section 2 we introduce some notations in graph theory related to the bandwidth and discuss some known results of [ACP 87] [BGHK 95] [KKM 96].
Reference: [KKM 96] <author> Kloks, T., Kratsch, D., Muller, H., </author> <title> Approximating the Bandwidth for Asteroidal Triple-Free Graphs, </title> <booktitle> Proc. 3 rd European Symposium on Algorithms (1996), </booktitle> <pages> pp. 434-447, </pages> <note> Lecture Notes in Comput. </note> <institution> Sci. </institution> <address> 979, </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: This paper is organized as follows. In Section 2 we introduce some notations in graph theory related to the bandwidth and discuss some known results of [ACP 87] [BGHK 95] <ref> [KKM 96] </ref>. In section 3 we relate the results of section 2 to the bandwidth problem in everywhere dense graphs and prove its N P -hardness. 2 2 Related Notations and Known Results The class of k-trees is defined recursively as follows: 1. <p> Thus tw (G) equals to the smallest k such that G is a partial k-tree. Proof: See, for example, [Le 90]. There is also a connection between the bandwidth and the treewidth of cobi partite graphs as showed in <ref> [KKM 96] </ref>. We call a graph cobipartite if it is the complement of a bipartite graph. Lemma 3 ([KKM 96]) Let G be a cobipartite graph. Then B (G) = tw (G) Using Lemma 2 we get 3 Corollary 4 Let G be a cobipartite graph.
Reference: [Kr 87] <author> Kratsch, D., </author> <title> Finding the Minimum Bandwidth of an Interval Graph, </title> <booktitle> Information and Computing 74 (1987), </booktitle> <pages> pp. 140-187. </pages>
Reference-contexts: Saxe [Sa 80] designed an algorithm which decides whether a given graph has bandwidth at most k in time O (n k ) by dynamic programming. Bandwidth two can be checked in linear time [GGJK 78]. Kratsch <ref> [Kr 87] </ref> introduced an exact O (n 2 log n) algorithm for the bandwidth problem in interval graphs. Smithline [Sm 95] proved that the bandwidth of the complete k-ary tree T k;d with d levels and k d leaves is exactly dk (k d 1)=(k 1)(2d)e.
Reference: [Le 90] <author> Leeuwen, J. v., </author> <title> Graph Algorithms, </title> <booktitle> in Handbook of Theoretical Computer Science, Volume A, Algorithms and Comlexity, </booktitle> <pages> pp. 525-631, </pages> <publisher> El-sevier and The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Thus tw (G) equals to the smallest k such that G is a partial k-tree. Proof: See, for example, <ref> [Le 90] </ref>. There is also a connection between the bandwidth and the treewidth of cobi partite graphs as showed in [KKM 96]. We call a graph cobipartite if it is the complement of a bipartite graph. Lemma 3 ([KKM 96]) Let G be a cobipartite graph.
Reference: [Pa 76] <author> Papadimitriou, C., </author> <title> The NP-Completness of the Bandwidth Minimization Problem, </title> <booktitle> Computing 16 (1976), </booktitle> <pages> pp. 263-270. </pages>
Reference-contexts: The bandwidth B (G) is then B (G) = min fis a numbering of G fB (f; G)g Clearly the bandwidth of G is the greatest bandwidth of its components. The problem of finding the bandwidth of a graph is NP-hard <ref> [Pa 76] </ref>, even for trees with maximum degree 3 [GGJK 78]. The general problem is not known to have any sublinear n * -approximation algorithms. There are only few cases where we can find the optimal layout in polynomial time.
Reference: [Sa 80] <author> Saxe, J., </author> <title> Dynamic Programming Agorithms for Recognizing Small-Bandwidth Graphs, </title> <booktitle> SIAM Journal on Algebraic Methods 1 (1980), </booktitle> <pages> pp. 363-369. </pages>
Reference-contexts: The general problem is not known to have any sublinear n * -approximation algorithms. There are only few cases where we can find the optimal layout in polynomial time. Saxe <ref> [Sa 80] </ref> designed an algorithm which decides whether a given graph has bandwidth at most k in time O (n k ) by dynamic programming. Bandwidth two can be checked in linear time [GGJK 78].
Reference: [Sm 95] <author> Smithline, L., </author> <title> Bandwidth of the Complete k-ary Tree, </title> <booktitle> Discrete Mathematics 142 (1995), </booktitle> <pages> pp. 203-212. 6 </pages>
Reference-contexts: Bandwidth two can be checked in linear time [GGJK 78]. Kratsch [Kr 87] introduced an exact O (n 2 log n) algorithm for the bandwidth problem in interval graphs. Smithline <ref> [Sm 95] </ref> proved that the bandwidth of the complete k-ary tree T k;d with d levels and k d leaves is exactly dk (k d 1)=(k 1)(2d)e. Her proof is constructive and contains a polynomial time algorithm, for this task.
References-found: 14

