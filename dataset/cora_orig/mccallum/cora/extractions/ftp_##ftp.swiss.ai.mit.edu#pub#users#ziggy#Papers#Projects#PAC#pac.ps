URL: ftp://ftp.swiss.ai.mit.edu/pub/users/ziggy/Papers/Projects/PAC/pac.ps
Refering-URL: http://www.swiss.ai.mit.edu/~ziggy/papers.html
Root-URL: 
Title: Improving Scheme Program Performance through Heuristic Redundant Predicate Elimination using PAC Learning Techniques  
Author: Michael R. Blair 
Date: December 9, 1993  
Abstract: Functional programming languages encourage a modular style of programming in which large programs are composed of several small, independent, robustly designed modules. For the dynamically typed subset of the class of functional languages, this generally entails redundant type checks at run time. Contemporary attempts to mitigate this problem generally resort to compile-time abstract interpretation of programs to detect and eliminate these redundancies. Unfortunately, such techniques quickly become computationally unwieldy for large modular software systems. This paper explores the combination of run-time code profiling and machine learning techniques (viz., PAC learning) as a possible avenue for alleviating this difficulty. Specifically, run-time profiling is used to identify those code fragments that might best benefit from the elimination of redundant predicates while identifying a sample space of example code usage witnessed in actual code runs. These samples are used to hypothesize specific predications that show evidence of potential redundancy. The semantics of the language can then be employed to validate or reject these hypotheses. In this way, the profiler is used as both a focussing mechanism and as a sample-space "oracle" through which a heuristic estimate of redundant predicates can be identified. The principle result of this paper is that heuristically identifying potentially com-putationally significant redundant predicates in this way can be done efficiently. Moreover, this heuristic approach is effective to the extent that it noticeably improves performance of an important class of Scheme programs. It also offers a novel application of PAC learning in a setting not traditionally addressed by the machine learning research community. 
Abstract-found: 1
Intro-found: 1
Reference: [Abelson et al. 88] <author> Harold Abelson, Matthew Halfant, </author> <title> Jacob Katzenelson and Gerald Jay Sussman The Lisp Experience Annual Reviews in Computer Science, </title> <type> Vol.3, </type> <note> 1988, </note> <author> pp.167-195 [Appel, Duba & MacQueen 88] Andrew W. Appel, Bruce F. Duba, and David B. </author> <title> MacQueen Profiling in the Presence of Optimization and Garbage Collection CS-TR-197-88, </title> <note> Princeton University Department of Computer Science, </note> <author> 1988 [Ball & Larus 92] Thomas Ball and James R. </author> <title> Larus Optimally Profiling and Tracing Programs In Proc. </title> <booktitle> ACM POPL 92, </booktitle> <address> Aug 1992, pp.59-70 [Berlin 89] Andrew A. Berlin </address>
Reference-contexts: 1 Introduction: Functional Program Specialization Functional programming languages have been continually celebrated as an auspicious way to code large complex software systems that are elegant, modular, and robust <ref> [Abelson et al. 88] </ref> [Field & Harrison 88]. Particularly touted is the elegance with which very subtle numerical control structures can be expressed in such languages [Halfant & Sussman 87/88] [Roylance 87/88]. Unfortunately, this elegance comes at some expense in performance.
References-found: 1

