URL: http://www.cs.cmu.edu/~tara/iopads97.ps.Z
Refering-URL: http://www.cs.cmu.edu/~tara/thesis.html
Root-URL: http://www.cs.cmu.edu
Email: ftara,reedg@cs.uiuc.edu  
Title: Input/Output Access Pattern Classification Using Hidden Markov Models  
Author: Tara M. Madhyastha Daniel A. Reed 
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract: Input/output performance on current parallel file systems is sensitive to a good match of application access pattern to file system capabilities. Automatic input/output access classification can determine application access patterns at execution time, guiding adaptive file system policies. In this paper we examine a new method for access pattern classification that uses hidden Markov models, trained on access patterns from previous executions, to create a probabilistic model of input/output accesses. We compare this approach to a neural network classification framework, presenting performance results from parallel and sequential benchmarks and applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Charniak, E. </author> <title> Statistical Language Learning. </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: We have shown this approach to be successful, using an artificial neural network (ANN) based classifier [18]. This paper describes a complementary classification technique that uses hidden Markov models (HMMs) <ref> [24, 1] </ref> for modeling input/output access patterns, using training data from previous application executions. As we shall see, this method offers significant advantages over ANN access pattern classification, increasing resource utilization and providing more precise control over caching and prefetching, further improving performance. <p> This knowledge allows us to choose a learning method more appropriate to the problem. To create such a model automatically, we use file access data from previous executions to train hidden Markov models (HMMs) <ref> [24, 1] </ref>. HMMs are commonly used in speech recognition software, where the goal is to identify sub-words, words, or syntax based on probabilistic models. At a very high level, access pattern classification is similar to speech recognition, and similar techniques apply.
Reference: [2] <author> Corbett, P., Prost, J.-P., Demetriou, C., Gib-son, G., Riedel, E., Zeleka, J., Chen, Y., Felten, E., Li, K., Hartman, J., Peterson, L., Bershad, B., Wolman, A., and Aydt, R. </author> <title> Proposal for a Common Parallel File System Programming Interface Version 1.0, </title> <note> 1996. Available at http://www.cs.arizona.edu/sio. </note>
Reference-contexts: We are currently investigating modeling interaccess delay to augment HMM-based spatial classification. Second, there is a natural correlation between ordered hints as described in the SIO low-level API <ref> [2] </ref> and HMM classifications; we are investigating using HMMs to supply these hints automatically in the next-generation PPFS II. Acknowledgments We wish to thank J. Michael Lake for his helpful discussions and for suggesting the use of hidden Markov models. Evgenia Smirni also provided many useful comments and suggestions.
Reference: [3] <author> Crandall, P. E., Aydt, R. A., Chien, A. A., and Reed, D. A. </author> <title> Characterization of a Suite of Input/Output Intensive Applications. </title> <booktitle> In Proceedings of Supercomputing '95 (Dec. </booktitle> <year> 1995). </year>
Reference-contexts: For details of the training process see [17]. 3.3 Classification and Policy Control In earlier work we examined the utility of purely qualitative classifications using a neural network based classifier. Based on our ongoing characterization of scientific application input/output patterns as part of the Scalable I/O Initiative <ref> [3, 25, 23] </ref>, we partitioned access patterns based on three broad features: read/write mix, sequen-tiality, and request size; see Table 1. At periodic intervals corresponding to some number of accesses or number of bytes accessed, the neural network based classifier produced qualitative classifications of these access pattern features.
Reference: [4] <author> Griffioen, J., and Appleton, R. </author> <title> Reducing File System Latency Using a Predictive Approach. </title> <booktitle> In Proceedings of USENIX Summer Technical Conference (June 1994), </booktitle> <pages> pp. 197-207. </pages>
Reference-contexts: Knowledge based caching has been proposed to enhance cache performance of remote file servers [11]. Some approaches use probabilistic methods to create models of user behavior to guide prefetching <ref> [15, 4, 13] </ref>. This work is similar in spirit to our HMM classification methodology. The difficulty with modeling user behavior probabilistically is that recently accessed files are more likely to be re-accessed than frequently accessed files.
Reference: [5] <author> Grimshaw, A. S., and Loyot, Jr., E. C. </author> <title> ELFS: Object-oriented Extensible File Systems. </title> <booktitle> In Proceedings of the First International Conference on Parallel and Distributed Information Systems (December 1991), </booktitle> <address> p. </address> <month> 177. </month>
Reference-contexts: Often the application programmer must match application input/output requirements to the capabilities of the file system. Because this match is so critical, many studies have demonstrated how a file system can exploit knowledge of application access patterns to provide higher performance than is possible with general file system policies <ref> [5, 12, 22] </ref>. To exploit application access pattern information, we investigate automatic input/output access pattern classification techniques that drive adaptive file system policies.
Reference: [6] <author> Henderson, R. D. </author> <title> Unstructured Spectral Element Methods: Parallel Algorithms and Simulations. </title> <type> PhD thesis, </type> <institution> Princeton University, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: 3,669,087 1,098,883,277 27,102 888,014,784 3,640,123 PPFS (ANN, split cache) 58,582 1,595,272,028 41,562 1,361,840,064 71,307 PPFS (HMM) 44,134 1,121,577,820 27,102 888,014,784 43,279 Table 4: Pathfinder operatation counts and bytes accessed. 7.1 PRISM PRISM, a computational fluid dynamics code, is a parallel implementation of a 3-D numerical simulation of the Navier-Stokes equations <ref> [6, 7] </ref>. The parallelization is by apportioning the periodic domain to the processors, with a combination of spectral elements and Fourier modes used to investigate the dynamics and transport properties of turbulent flow. We focus on the first phase, in which every processor reads three initialization files.
Reference: [7] <author> Henderson, R. D., and Karniadakis, G. E. </author> <title> Unstructured Spectral Element Methods for Simulation of Turbulent Flows. </title> <journal> Journal of Computational Physics 122, </journal> <volume> 2 (1995), </volume> <pages> 191-217. </pages>
Reference-contexts: 3,669,087 1,098,883,277 27,102 888,014,784 3,640,123 PPFS (ANN, split cache) 58,582 1,595,272,028 41,562 1,361,840,064 71,307 PPFS (HMM) 44,134 1,121,577,820 27,102 888,014,784 43,279 Table 4: Pathfinder operatation counts and bytes accessed. 7.1 PRISM PRISM, a computational fluid dynamics code, is a parallel implementation of a 3-D numerical simulation of the Navier-Stokes equations <ref> [6, 7] </ref>. The parallelization is by apportioning the periodic domain to the processors, with a combination of spectral elements and Fourier modes used to investigate the dynamics and transport properties of turbulent flow. We focus on the first phase, in which every processor reads three initialization files.
Reference: [8] <author> Huber, J., Elford, C. L., Reed, D. A., Chien, A. A., and Blumenthal, D. S. </author> <title> PPFS: A High Performance Portable Parallel File System. </title> <booktitle> In Proceedings of the 9th ACM International Conference on Supercomputing (Barcelona, </booktitle> <month> July </month> <year> 1995), </year> <pages> pp. 385-394. </pages>
Reference: [9] <institution> Paragon XP/S Product Overview. Intel Corporation, </institution> <year> 1991. </year>
Reference-contexts: To demonstrate the potential performance improvement from global classification, below we show results from two typical parallel applications from the Scalable I/O Initiative application suite and a benchmark representing complex array access. Our experimental platform is the Intel Paragon, using PPFS to perform physical input/output using PFS <ref> [9] </ref>. PFS is a parallel file system that stripes data over disks on input/output nodes using a default 64 KB stripe size. In normal usage, applications provide access pattern information by specifying PFS modes.
Reference: [10] <author> Kleinrock, L. </author> <title> Queueing Systems, Vol. 1, Theory. </title> <publisher> John Wiley, </publisher> <year> 1975. </year>
Reference-contexts: At a very high level, access pattern classification is similar to speech recognition, and similar techniques apply. By accurately modeling large scale access pattern behavior, this probabilistic approach supplements qualitative classifications made by observing a limited number of accesses. 3 Hidden Markov Models A discrete-time Markov process <ref> [10] </ref> is a system that at any time is in one of N distinct states. At discrete times, the system changes states, or makes a transition, according to a set of probabilities associated with each state. Each state corresponds to a single observable event, or an observation symbol.
Reference: [11] <author> Korner, K. </author> <title> Intelligent Caching for Remote File Service. </title> <booktitle> In Proceedings of the 10th International Conference on Distributed Computing Systems (May 1990), </booktitle> <pages> pp. 220-226. </pages>
Reference-contexts: Exploitation of relationships between files has also been a significant research topic. Fido is an example of a predictive cache that prefetches by using an associative memory to recognize access patterns over time [21]. Knowledge based caching has been proposed to enhance cache performance of remote file servers <ref> [11] </ref>. Some approaches use probabilistic methods to create models of user behavior to guide prefetching [15, 4, 13]. This work is similar in spirit to our HMM classification methodology.
Reference: [12] <author> Kotz, D., and Ellis, C. S. </author> <title> Practical Prefetching Techniques for Multiprocessor File Systems. </title> <journal> Journal of Distributed and Parallel Databases 1, </journal> <month> 1 (January </month> <year> 1993), </year> <pages> 33-51. </pages>
Reference-contexts: Often the application programmer must match application input/output requirements to the capabilities of the file system. Because this match is so critical, many studies have demonstrated how a file system can exploit knowledge of application access patterns to provide higher performance than is possible with general file system policies <ref> [5, 12, 22] </ref>. To exploit application access pattern information, we investigate automatic input/output access pattern classification techniques that drive adaptive file system policies. <p> Many groups have explored intelligent techniques to construct higher level models of file access automatically. Kotz has examined automatic detection of global sequen-tiality to guide non-sequential prefetching within a file <ref> [12] </ref>. Exploitation of relationships between files has also been a significant research topic. Fido is an example of a predictive cache that prefetches by using an associative memory to recognize access patterns over time [21]. Knowledge based caching has been proposed to enhance cache performance of remote file servers [11].
Reference: [13] <author> Kroeger, T. M., and Long, D. D. E. </author> <title> Predicting File-System Actions From Prior Events. </title> <booktitle> In Proceedings of the USENIX 1996 Annual Technical Conference (Jan. </booktitle> <year> 1996), </year> <pages> pp. 319-328. </pages>
Reference-contexts: Knowledge based caching has been proposed to enhance cache performance of remote file servers [11]. Some approaches use probabilistic methods to create models of user behavior to guide prefetching <ref> [15, 4, 13] </ref>. This work is similar in spirit to our HMM classification methodology. The difficulty with modeling user behavior probabilistically is that recently accessed files are more likely to be re-accessed than frequently accessed files.
Reference: [14] <author> Kuppermann, A., and Wu, Y.-S. M. </author> <title> The Quantitative Prediction and Lifetime of a Pronounced Reactive Scattering Resonance. </title> <journal> Chemical Physics Letters 241 (1995), </journal> <pages> 229-240. </pages>
Reference-contexts: Periodic dips in throughput occur because this mode requires input/output requests to be synchronized among the sixteen processors. Therefore, should one processor creep ahead of the others, it must stall until they synchronize, causing abnormally large read request times. 7.2 QCRD QCRD <ref> [28, 14] </ref> is a quantum chemical reaction dynamics code used to study elementary chemical reactions. Paral-lelization is accomplished by data decomposition; all processors execute the same code on different portions of the global matrices.
Reference: [15] <author> Lei, H., and Duchamp, D. </author> <title> An Analytical Approach to File Prefetching. </title> <booktitle> In Proceedings of the USENIX 1997 Annual Technical Conference (Jan. </booktitle> <year> 1997), </year> <pages> pp. 275-288. </pages>
Reference-contexts: Knowledge based caching has been proposed to enhance cache performance of remote file servers [11]. Some approaches use probabilistic methods to create models of user behavior to guide prefetching <ref> [15, 4, 13] </ref>. This work is similar in spirit to our HMM classification methodology. The difficulty with modeling user behavior probabilistically is that recently accessed files are more likely to be re-accessed than frequently accessed files.
Reference: [16] <author> Li, P. </author> <title> ESS Grand Challenge Projects: The Earth's Interior Modeling and the Global Climate Modeling. </title> <note> In HPCC ANNUAL REPORT (1995). available at http://olympic.jpl.nasa.gov/PERSONNEL/wangp/ ping96one.html. </note>
Reference-contexts: In this experiment we consider a benchmark based on file access patterns exhibited by applications from Caltech for global climate modeling and modeling of the earth's interior <ref> [16] </ref>. These applications read and write data from a two or three dimensional grid, partitioning data in blocks of contiguous particles among the processors. a two dimensional grid; each numbered block contains cs 2 elements allocated to the processor with that number.
Reference: [17] <author> Madhyastha, T. M. </author> <title> Automatic Classification of Input/Output Access Patterns. </title> <type> Tech. Rep., </type> <institution> University of Illinois at Urbana-Champaign, Department of Computer Science, </institution> <month> Aug. </month> <year> 1997. </year>
Reference-contexts: In essence, HMM construction is a clustering algorithm that assumes the number of clusters (i.e., unique access patterns) is known in advance, the user must provide this. For example, for two threads of control, the HMM structure would resemble Figure 3b. For details of the training process see <ref> [17] </ref>. 3.3 Classification and Policy Control In earlier work we examined the utility of purely qualitative classifications using a neural network based classifier. <p> A global classification is valid for (max (t s ); min (t e )) over all local classifications. We ensure spatial coordination and determine a global access pattern by combining local classifications according to an access pattern algebra <ref> [19, 17] </ref>. For example, for a global access pattern to be read only, each local access pattern must be read only. Global classifications involving sequentiality require additional information about the bytes accessed by each client.
Reference: [18] <author> Madhyastha, T. M., and Reed, D. A. </author> <title> Intelligent, Adaptive File System Policy Selection. </title> <booktitle> In Proceedings of the Sixth Symposium on the Frontiers of Massively Parallel Computation (1996), </booktitle> <pages> pp. 172-179. </pages>
Reference-contexts: We have shown this approach to be successful, using an artificial neural network (ANN) based classifier <ref> [18] </ref>. This paper describes a complementary classification technique that uses hidden Markov models (HMMs) [24, 1] for modeling input/output access patterns, using training data from previous application executions. <p> To be useful for controlling file system policies, a file access pattern description need not be a perfect predictor of future accesses. It simply needs to provide the file system with enough information to select suitable policies. To this end, in <ref> [18] </ref> we proposed an artificial neural network (ANN) classification framework that processes statistics calculated from a short sequence of input/output requests and generates qualitative, categorical classifications of access patterns (e.g., strided or random, read only or read/write). <p> These classifications, supplemented by quantitative information about input/output requests (e.g., average request size), defined an access pattern space. Regions within this space were mapped to changes to the default caching and prefetching policies. This classification approach proved successful in improving performance of input/output intensive applications <ref> [18] </ref>. Qualitative classifications are limited to describing a simple set of structured access patterns.
Reference: [19] <author> Madhyastha, T. M., and Reed, D. A. </author> <title> Exploiting Global Access Pattern Classification. </title> <booktitle> In Proceedings of SC'97 (November 1997). </booktitle>
Reference-contexts: A global classification is valid for (max (t s ); min (t e )) over all local classifications. We ensure spatial coordination and determine a global access pattern by combining local classifications according to an access pattern algebra <ref> [19, 17] </ref>. For example, for a global access pattern to be read only, each local access pattern must be read only. Global classifications involving sequentiality require additional information about the bytes accessed by each client.
Reference: [20] <author> NCSA. </author> <note> NCSA HDF, Version 2.0. </note> <institution> University of Illi-nois at Urbana-Champaign, National Center for Supercomputing Applications, </institution> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: Many patterns are complex but repeatable, such those generated by appli Category Category Features Read/Write Read Only Write Only Read-Update-Write Read/Write Mix Sequentiality Sequential 1-D Strided 2-D Strided Variably Strided Request Sizes Uniform Variable Table 1: File access pattern features. cation calls to the NCSA hierarchical data format (HDF) library <ref> [20] </ref>. Such input/output patterns defy simple qualitative classification, but they have structure that is invariant across executions. Qualitative classification does not easily lend itself to description of these more complicated access patterns. In contrast, hidden Markov models use data from previous executions to model access patterns probabilistically.
Reference: [21] <author> Palmer, M., and Zdonik, S. B. </author> <title> Fido: A Cache That Learns to Fetch. </title> <booktitle> In Proceedings of the 17th International Conference on Very Large Data Bases (Barcelona, </booktitle> <month> September </month> <year> 1991), </year> <pages> pp. 255-262. </pages>
Reference-contexts: Kotz has examined automatic detection of global sequen-tiality to guide non-sequential prefetching within a file [12]. Exploitation of relationships between files has also been a significant research topic. Fido is an example of a predictive cache that prefetches by using an associative memory to recognize access patterns over time <ref> [21] </ref>. Knowledge based caching has been proposed to enhance cache performance of remote file servers [11]. Some approaches use probabilistic methods to create models of user behavior to guide prefetching [15, 4, 13]. This work is similar in spirit to our HMM classification methodology.
Reference: [22] <author> Patterson, R. H., Gibson, G. A., Ginting, E., Stodolsky, D., and Zelenka, J. </author> <title> Informed Prefetching and Caching. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles (December 1995), </booktitle> <pages> pp. 79-95. </pages>
Reference-contexts: Often the application programmer must match application input/output requirements to the capabilities of the file system. Because this match is so critical, many studies have demonstrated how a file system can exploit knowledge of application access patterns to provide higher performance than is possible with general file system policies <ref> [5, 12, 22] </ref>. To exploit application access pattern information, we investigate automatic input/output access pattern classification techniques that drive adaptive file system policies. <p> One system-independent way of specifying application requirements is to provide hints (possibly inaccurate access information) to guide a proactive file system. Patterson et al demonstrate the success of providing hints to guide prefetching of files that will be accessed in the future <ref> [22, 27] </ref>. This approach is portable, but requires the application programmer to describe the application input/output behavior.
Reference: [23] <author> Pool, J. T. </author> <title> Scalable I/O Initiative. </title> <institution> California Institute of Technology, </institution> <note> Available at http://www.ccsf.caltech.edu/SIO/, 1996. </note>
Reference-contexts: For details of the training process see [17]. 3.3 Classification and Policy Control In earlier work we examined the utility of purely qualitative classifications using a neural network based classifier. Based on our ongoing characterization of scientific application input/output patterns as part of the Scalable I/O Initiative <ref> [3, 25, 23] </ref>, we partitioned access patterns based on three broad features: read/write mix, sequen-tiality, and request size; see Table 1. At periodic intervals corresponding to some number of accesses or number of bytes accessed, the neural network based classifier produced qualitative classifications of these access pattern features.
Reference: [24] <author> Rabiner, L. R. </author> <title> A Tutorial on Hidden Markov Models and Selected Applications in Speech Recognition. </title> <booktitle> Proceedings of the IEEE 77, </booktitle> <month> 2 </month> <year> (1989). </year>
Reference-contexts: We have shown this approach to be successful, using an artificial neural network (ANN) based classifier [18]. This paper describes a complementary classification technique that uses hidden Markov models (HMMs) <ref> [24, 1] </ref> for modeling input/output access patterns, using training data from previous application executions. As we shall see, this method offers significant advantages over ANN access pattern classification, increasing resource utilization and providing more precise control over caching and prefetching, further improving performance. <p> This knowledge allows us to choose a learning method more appropriate to the problem. To create such a model automatically, we use file access data from previous executions to train hidden Markov models (HMMs) <ref> [24, 1] </ref>. HMMs are commonly used in speech recognition software, where the goal is to identify sub-words, words, or syntax based on probabilistic models. At a very high level, access pattern classification is similar to speech recognition, and similar techniques apply.
Reference: [25] <author> Smirni, E., Aydt, R. A., Chien, A. A., and Reed, D. A. </author> <title> I/O Requirements of Scientific Applications: An Evolutionary View. </title> <booktitle> In Fifth International Symposium on High Performance Distributed Computing (1996), </booktitle> <pages> pp. 49-59. </pages>
Reference-contexts: For details of the training process see [17]. 3.3 Classification and Policy Control In earlier work we examined the utility of purely qualitative classifications using a neural network based classifier. Based on our ongoing characterization of scientific application input/output patterns as part of the Scalable I/O Initiative <ref> [3, 25, 23] </ref>, we partitioned access patterns based on three broad features: read/write mix, sequen-tiality, and request size; see Table 1. At periodic intervals corresponding to some number of accesses or number of bytes accessed, the neural network based classifier produced qualitative classifications of these access pattern features.
Reference: [26] <author> Smyth, P. </author> <title> Clustering Sequences with Hidden Markov Models. </title> <booktitle> In Advances in Neural Information Processing 9. </booktitle> <publisher> MIT Press, to appear. </publisher>
Reference-contexts: The probabilities of the transitions determine which of these is more likely. Figure 3 can also be viewed as a composite of two individual HMMs; in essence the HMM clusters sequences, as described in <ref> [26] </ref>. 3.2 Training Hidden Markov Models Each application has one hidden Markov model per file; these models are trained online by running an application executable that has been linked with a training module.
Reference: [27] <author> Tomkins, A., Patterson, R. H., and Gibson, G. </author> <title> Informed Multi-Process Prefetching and Caching. </title> <booktitle> In Proceedings of the ACM International Conference on Measurement and Modeling of Computer Systems (June 1997). </booktitle>
Reference-contexts: One system-independent way of specifying application requirements is to provide hints (possibly inaccurate access information) to guide a proactive file system. Patterson et al demonstrate the success of providing hints to guide prefetching of files that will be accessed in the future <ref> [22, 27] </ref>. This approach is portable, but requires the application programmer to describe the application input/output behavior.
Reference: [28] <author> Wu, Y.-S. M., Cuccaro, S. A., Hipes, P. G., and Kuppermann, A. </author> <title> Quantum Chemical Reaction Dynamics on a Highly Parallel Supercomputer. </title> <journal> Theo-retica Chimica Acta 79 (1991), </journal> <pages> 225-239. </pages>
Reference-contexts: Periodic dips in throughput occur because this mode requires input/output requests to be synchronized among the sixteen processors. Therefore, should one processor creep ahead of the others, it must stall until they synchronize, causing abnormally large read request times. 7.2 QCRD QCRD <ref> [28, 14] </ref> is a quantum chemical reaction dynamics code used to study elementary chemical reactions. Paral-lelization is accomplished by data decomposition; all processors execute the same code on different portions of the global matrices.
References-found: 28

