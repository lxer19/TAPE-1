URL: http://www.cs.nmsu.edu/~epontell/ilps97/15.ps.gz
Refering-URL: http://www.cs.nmsu.edu/lldap/ilps97/programme.html
Root-URL: http://www.cs.nmsu.edu
Email: frslopes,vscg@ncc.up.pt  
Title: The BEAM: Towards a first EAM Implementation  
Author: Ricardo Lopes, Vitor Santos Costa 
Date: September 10, 1997  
Address: 823, 4150 Porto, Portugal  
Affiliation: LIACC, Universidade do Porto, Rua do Campo Alegre,  
Abstract: Logic programming provides a high-level view of programming, giving implementors a vast latitude in what techniques to research towards obtaining the best performance for logic programs. One of the holy grails of logic programming has been to design computational models that could be executed efficiently and would allow for both a reduction of the search space and for exploiting all the available parallelism in the application. These goals have motivated the design of the Extended Andorra Model. We report on the design of a first implementation for the Extended Andorra Model with Implicit Control, the BEAM. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Gupta and D.H.D. Warren. </author> <title> An Interpreter for the Extended Andorra Model. </title> <type> Internal report, </type> <institution> University of Brsitol, </institution> <year> 1991. </year>
Reference-contexts: Research on the Extended Andorra Model with Implicit Control, that will refer to more shortly as EAM, followed a rather different approach. Research started by trying to prove the feasibility of the model by developing an interpreter. Gupta's interpreter <ref> [1] </ref> showed that the EAM was indeed feasible, but demonstrated difficulties in giving the best performance for some programs and queries. Towards obtaining maximum performance, Warren proposed solutions such as lazy copying and eager producers to give finer control over search when required. <p> Figure 1, taken from Gupta's report <ref> [1] </ref>, shows the control scheme used in the EAM interpreter. The systems tries to apply reduction and promotion steps as much as possible. Simplification steps are also used in the interpreter to maintain the data structures. <p> A solution to classify these goals as used in the interpreter is to give scope to variables, possibly obtained through rewriting clauses in mini-scope form <ref> [1] </ref>. 4 2.3 An Example of EAM Execution This section presents an simple example that shows the essential ideas of how the computation of an Prolog program proceeds in EAM. Consider the very simple Prolog program: g (X):- a (X),b (X). b (4). a (1). c (1). ?- g (X). <p> The only call that does not suspend is the goal a (X,Y). This will lead to non-termination, since no value will ever be assigned. Warren and Gupta proposed a solution to this problem using Eager Non-Determinate promotion <ref> [1] </ref>. However, to use this solution, one must classify variables as guessable, non-guessable or others before execution. This annotation can be generated by means of compile time analysis, or it can be supplied by the programmer explicitly.
Reference: [2] <author> Sverker Janson. </author> <title> AKL A Multiparadigm Programming Language. </title> <type> SICS Dissertation Series 14, </type> <institution> Uppsala University, </institution> <year> 1994. </year>
Reference-contexts: Research in AKL concentrated on including novel features such as ports <ref> [2] </ref>, important for concurrent programming, and on obtaining good performance through sequential [4] and parallel implementations, such as Penny [5], with good results. More recently, the AKL researchers have shifted their interest to Oz [8], a language developed at DFKI which provides similar features to AKL.
Reference: [3] <author> Sverker Janson and Seif Haridi. </author> <title> Programming Paradigms of the Andorra Kernel Language. </title> <booktitle> In Logic Programming: Proceedings of the International Logic Programming Symposium, </booktitle> <pages> pages 167-186. </pages> <publisher> MIT Press, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: David H. D. Warren and researchers at Bristol concentrated on the"1991" Extended Andorra Model with Implicit Control [12], where the goal was to obtain the advantages of the Extended Andorra Model with least effort from the programmer. Haridi, Janson and researchers at SICS concentrated on the AKL <ref> [3] </ref>, the Andorra Kernel Language, based on the principle that the advantages of the Extended Andorra Model justified a new programming paradigm that could subsume both traditional Prolog and the committed choice languages.
Reference: [4] <author> Sverker Janson and Johan Montelius. </author> <title> Design of a Sequential Prototype Implementation of the Andorra Kernel Language. </title> <note> Sics research report, in preparation, </note> <institution> Swedish Institute of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: Research in AKL concentrated on including novel features such as ports [2], important for concurrent programming, and on obtaining good performance through sequential <ref> [4] </ref> and parallel implementations, such as Penny [5], with good results. More recently, the AKL researchers have shifted their interest to Oz [8], a language developed at DFKI which provides similar features to AKL.
Reference: [5] <author> Johan Montelius and Khayri A. M. Ali. </author> <title> An And/Or-Parallel Implementation of AKL. </title> <journal> New Generation Computing, </journal> <volume> 13(4), </volume> <year> 1995. </year>
Reference-contexts: Research in AKL concentrated on including novel features such as ports [2], important for concurrent programming, and on obtaining good performance through sequential [4] and parallel implementations, such as Penny <ref> [5] </ref>, with good results. More recently, the AKL researchers have shifted their interest to Oz [8], a language developed at DFKI which provides similar features to AKL. Research on the Extended Andorra Model with Implicit Control, that will refer to more shortly as EAM, followed a rather different approach.
Reference: [6] <author> V. Santos Costa. </author> <title> Compile-Time Analysis for the Parallel Execution of Logic Programs in Andorra-I. </title> <type> PhD thesis, </type> <institution> University of Bristol, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: The high-level nature of logic programs gives implementors a vast latitude in what techniques to research towards obtaining the best performance for logic programs. Advanced compilation techniques [10] have been used to obtain performance close to imperative languages for some benchmarks [9]. Parallelism <ref> [6] </ref> allows logic programs to transparently exploit the advantages of the new parallel machines that are more than ever gaining in popularity.
Reference: [7] <author> V. Santos Costa, D. H. D. Warren, and R. Yang. Andorra-I: </author> <title> A Parallel Prolog System that Transparently Exploits both And- and Or-Parallelism. </title> <booktitle> In Third ACM SIGPLAN Symposium on Principles & Practice of Parallel Programming PPOPP, </booktitle> <pages> pages 83-93. </pages> <publisher> ACM press, </publisher> <month> April </month> <year> 1991. </year> <journal> SIGPLAN Notices vol 26(7), </journal> <month> July </month> <year> 1991. </year>
Reference-contexts: These goals have motivated the design of the Extended Andorra Model. The model originates from the research on the Basic Andorra Model (BAM) [11]. The Andorra-I prototype <ref> [7] </ref> demonstrated that the BAM can successfully exploit two forms of parallelism, or-parallelism and dependent and-parallelism, and that it can reduce the search space for a large category of programs. On the other hand, Andorra-I depends on finding determinate applications.
Reference: [8] <author> Gert Smolka. </author> <title> The Oz programming model. </title> <editor> In Jan van Leeuwen, editor, </editor> <booktitle> Computer Science Today, Lecture Notes in Computer Science, </booktitle> <volume> vol. 1000, </volume> <pages> pages 324-343. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1995. </year>
Reference-contexts: Research in AKL concentrated on including novel features such as ports [2], important for concurrent programming, and on obtaining good performance through sequential [4] and parallel implementations, such as Penny [5], with good results. More recently, the AKL researchers have shifted their interest to Oz <ref> [8] </ref>, a language developed at DFKI which provides similar features to AKL. Research on the Extended Andorra Model with Implicit Control, that will refer to more shortly as EAM, followed a rather different approach. Research started by trying to prove the feasibility of the model by developing an interpreter.
Reference: [9] <author> P. Van Roy. </author> <title> Can Logic Programming Execute as Fast as Imperative Programming? PhD thesis, </title> <institution> University of California at Berkeley, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: The high-level nature of logic programs gives implementors a vast latitude in what techniques to research towards obtaining the best performance for logic programs. Advanced compilation techniques [10] have been used to obtain performance close to imperative languages for some benchmarks <ref> [9] </ref>. Parallelism [6] allows logic programs to transparently exploit the advantages of the new parallel machines that are more than ever gaining in popularity.
Reference: [10] <author> P. Van Roy. </author> <year> 1983-1993: </year> <title> The Wonder Years of Sequential Prolog Implementation. </title> <journal> The Journal of Logic Programming, </journal> <month> 19/20, May/July </month> <year> 1994. </year>
Reference-contexts: The high-level nature of logic programs gives implementors a vast latitude in what techniques to research towards obtaining the best performance for logic programs. Advanced compilation techniques <ref> [10] </ref> have been used to obtain performance close to imperative languages for some benchmarks [9]. Parallelism [6] allows logic programs to transparently exploit the advantages of the new parallel machines that are more than ever gaining in popularity.
Reference: [11] <author> David H. D. Warren. </author> <title> The Andorra model. Presented at Gigalips Project workshop, </title> <institution> University of Manchester, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: These goals have motivated the design of the Extended Andorra Model. The model originates from the research on the Basic Andorra Model (BAM) <ref> [11] </ref>. The Andorra-I prototype [7] demonstrated that the BAM can successfully exploit two forms of parallelism, or-parallelism and dependent and-parallelism, and that it can reduce the search space for a large category of programs. On the other hand, Andorra-I depends on finding determinate applications.
Reference: [12] <author> David H. D. Warren. </author> <title> The Extended Andorra Model with Implicit Control. </title> <booktitle> Presented at ICLP'90 Workshop on Parallel Logic Programming, </booktitle> <address> Eilat, Israel, </address> <month> June </month> <year> 1990. </year> <month> 17 </month>
Reference-contexts: These goals have been presented by David H. D. Warren <ref> [12] </ref> as, in order of priority: * Minimum number of inferences: this is achieved by trying never to repeat the same execution step of one inference in different locations of the execution tree. 1 * Maximum parallelism: this is achieved by allowing goals to be executed as more inde- pendently as <p> The original proposal was based in the concept of rewriting and- and or-boxes. Research then evolved in two directions. David H. D. Warren and researchers at Bristol concentrated on the"1991" Extended Andorra Model with Implicit Control <ref> [12] </ref>, where the goal was to obtain the advantages of the Extended Andorra Model with least effort from the programmer.
References-found: 12

