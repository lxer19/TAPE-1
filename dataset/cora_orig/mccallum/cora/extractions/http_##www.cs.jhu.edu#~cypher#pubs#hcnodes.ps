URL: http://www.cs.jhu.edu/~cypher/pubs/hcnodes.ps
Refering-URL: http://www.cs.jhu.edu/~cypher/pubs/pubs.html
Root-URL: http://www.cs.jhu.edu
Title: Tolerating Faults in Hypercubes using Subcube Partitioning  
Author: Jehoshua Bruck Robert Cypher Danny Soroker P. O. 
Address: 650 Harry Road, K54/802 San Jose, CA 95120-6099  Box 481 Houston, TX 77001-0481  
Affiliation: IBM Almaden Research Center  Shell Development Company  
Abstract: We examine the issue of running algorithms on a hypercube which has both node and edge faults, and we assume a worst case distribution of the faults. We prove that for any constant c, an n-dimensional hypercube (n-cube) with n c faulty components contains a fault-free subgraph that can implement a large class of hypercube algorithms with only a constant factor slowdown. In addition, our approach yields practical implementations for small numbers of faults. For example, we show that any regular algorithm can be implemented on an n-cube that has at most n 1 faults with slowdowns of at most 2 for computation and at most 4 for communication. To the best of our knowledge this is the first result showing that an n-cube can tolerate more than O(n) arbitrarily placed faults with a constant factor slowdown. fl This work was done while the author was with IBM Almaden Research Center.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Aiello and T. Leighton. </author> <title> Coding theory, hypercube embeddings, and fault tolerance. </title> <booktitle> In Proc. 3rd Annual ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 125-136, </pages> <year> 1991. </year>
Reference-contexts: Following the original appearance of this result [5], Aiello and Leighton obtained the same result for any hypercube algorithm, whether or not it is a single-port algorithm <ref> [1] </ref>. It will be assumed throughout this paper that all faults are static and are known. Both nodes and edges may be faulty. However, we will only consider node faults, as an edge fault can be tolerated by assuming that one of the nodes incident upon it is faulty.
Reference: [2] <author> F. Annexstein. </author> <title> Fault tolerance of hypercube-derivative networks. </title> <booktitle> In Proc. 1st Annual ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 179-188, </pages> <year> 1989. </year>
Reference-contexts: In the following discussion we will view a parallel computer as being a graph in which the nodes correspond to processors and the edges correspond to communication links. The issue of computing with faulty hypercubes has been addressed in several recent papers <ref> [2, 3, 4, 5, 6, 7, 8, 10, 11, 14] </ref>. Particularly notable is the result by Hastad, Leighton and Newman [8]. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed.
Reference: [3] <author> B. Becker and H. U. Simon. </author> <title> How robust is the n-cube? Information and Computation, </title> <booktitle> 77 </booktitle> <pages> 162-178, </pages> <year> 1988. </year>
Reference-contexts: In the following discussion we will view a parallel computer as being a graph in which the nodes correspond to processors and the edges correspond to communication links. The issue of computing with faulty hypercubes has been addressed in several recent papers <ref> [2, 3, 4, 5, 6, 7, 8, 10, 11, 14] </ref>. Particularly notable is the result by Hastad, Leighton and Newman [8]. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed. <p> They proved that, with high probability, the faulty hypercube can simulate a fault-free hypercube with only a constant factor slowdown. Thus the hypercube is extremely tolerant of randomly distributed faults. In this paper we study worst case distributions of faults. Several other researchers have examined this issue <ref> [3, 6, 10, 11] </ref>. One approach that has been studied is to locate a large fault-free subcube and to use that subcube to emulate the entire hypercube. <p> One approach that has been studied is to locate a large fault-free subcube and to use that subcube to emulate the entire hypercube. However, it has been shown that in order to guarantee a constant factor slowdown, the n-cube must have only O (log n) faults <ref> [3, 11] </ref>. Our approach is to partition the hypercube into small subcubes, each of which has a small number of faults. More precisely, we guarantee that the majority of the nodes in each subcube form a fault-free connected component.
Reference: [4] <author> J. Bruck. </author> <title> Optimal broadcasting in faulty hypercubes via edge-disjoint embeddings. </title> <institution> IBM Research Report, RJ7147, </institution> <year> 1989. </year> <month> 17 </month>
Reference-contexts: In the following discussion we will view a parallel computer as being a graph in which the nodes correspond to processors and the edges correspond to communication links. The issue of computing with faulty hypercubes has been addressed in several recent papers <ref> [2, 3, 4, 5, 6, 7, 8, 10, 11, 14] </ref>. Particularly notable is the result by Hastad, Leighton and Newman [8]. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed.
Reference: [5] <author> J. Bruck, R. Cypher, and D. Soroker. </author> <title> Running Algorithms Efficiently on Faulty Hypercubes. </title> <booktitle> In Proc. 2nd Annual ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 37-44, </pages> <year> 1990. </year>
Reference-contexts: In the following discussion we will view a parallel computer as being a graph in which the nodes correspond to processors and the edges correspond to communication links. The issue of computing with faulty hypercubes has been addressed in several recent papers <ref> [2, 3, 4, 5, 6, 7, 8, 10, 11, 14] </ref>. Particularly notable is the result by Hastad, Leighton and Newman [8]. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed. <p> To the best of our knowledge this is the first proof that an n-cube can tolerate more than O (n) arbitrarily placed faults and still be guaranteed to implement a large class of algorithms with only a constant factor slowdown. Following the original appearance of this result <ref> [5] </ref>, Aiello and Leighton obtained the same result for any hypercube algorithm, whether or not it is a single-port algorithm [1]. It will be assumed throughout this paper that all faults are static and are known. Both nodes and edges may be faulty.
Reference: [6] <author> M. Y. Chan and S. J. Lee. </author> <title> Fault-tolerant permutation routing in hy-percubes. </title> <institution> University of Texas at Dallas Tech. </institution> <note> Report, UTDCS-5-90.. </note>
Reference-contexts: In the following discussion we will view a parallel computer as being a graph in which the nodes correspond to processors and the edges correspond to communication links. The issue of computing with faulty hypercubes has been addressed in several recent papers <ref> [2, 3, 4, 5, 6, 7, 8, 10, 11, 14] </ref>. Particularly notable is the result by Hastad, Leighton and Newman [8]. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed. <p> They proved that, with high probability, the faulty hypercube can simulate a fault-free hypercube with only a constant factor slowdown. Thus the hypercube is extremely tolerant of randomly distributed faults. In this paper we study worst case distributions of faults. Several other researchers have examined this issue <ref> [3, 6, 10, 11] </ref>. One approach that has been studied is to locate a large fault-free subcube and to use that subcube to emulate the entire hypercube. <p> The classes of regular and single-port algorithms include a large number of hypercube algorithms, including all of the algorithms in the classes Ascend and Descend as defined by Preparata and Vuillemin [13]. A different but related approach to hypercube fault-tolerance was studied by Chan and Lee <ref> [6] </ref>. They showed that the Benes routing algorithm can be implemented on an n-cube that has fewer than n faults with a factor of 9 slowdown. <p> The following theorem shows that 2-partitions can be used whenever the n-cube contains fewer than n faults. The theorem depends on the following two lemmas, the first of which was proven by Chan and Lee <ref> [6] </ref>. Lemma 3.1 For all n 1, given any set F of n or fewer faulty nodes in an n-cube, there exists a 1-partition P of the n-cube such that ff (P; F ) 1. <p> there are fewer than n faults, and on asymptotic bounds. 4.1 n 1 Faults Using a technique which involves partitioning into subcubes, Chan and Lee have shown that the Benes routing algorithm can be implemented on an n-cube with less than n faulty nodes with a factor of 9 slowdown <ref> [6] </ref>. They accomplish this by partitioning the n-cube into subcubes based on the dimension that is being used for communication. Theorem 4.1 improves the 12 slowdown and generalizes their result, as it can be used to implement arbi-trary regular algorithms.
Reference: [7] <author> D. Dolev, J. Y. Halpern, B. Simons, and R. </author> <title> Strong. A new look at fault-tolerant network routing. </title> <journal> Information and Computation, </journal> <volume> 72(3) </volume> <pages> 180-196, </pages> <month> March </month> <year> 1987. </year>
Reference-contexts: In the following discussion we will view a parallel computer as being a graph in which the nodes correspond to processors and the edges correspond to communication links. The issue of computing with faulty hypercubes has been addressed in several recent papers <ref> [2, 3, 4, 5, 6, 7, 8, 10, 11, 14] </ref>. Particularly notable is the result by Hastad, Leighton and Newman [8]. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed.
Reference: [8] <author> J. Hastad, T. Leighton, and M. Newman. </author> <title> Fast computation using faulty hypercubes. </title> <booktitle> In Proc. 21st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 251-263, </pages> <year> 1989. </year>
Reference-contexts: In the following discussion we will view a parallel computer as being a graph in which the nodes correspond to processors and the edges correspond to communication links. The issue of computing with faulty hypercubes has been addressed in several recent papers <ref> [2, 3, 4, 5, 6, 7, 8, 10, 11, 14] </ref>. Particularly notable is the result by Hastad, Leighton and Newman [8]. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed. <p> The issue of computing with faulty hypercubes has been addressed in several recent papers [2, 3, 4, 5, 6, 7, 8, 10, 11, 14]. Particularly notable is the result by Hastad, Leighton and Newman <ref> [8] </ref>. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed. They proved that, with high probability, the faulty hypercube can simulate a fault-free hypercube with only a constant factor slowdown.
Reference: [9] <author> D. Kleitman. </author> <title> On the problem by Yuzvinsky on separating the n-cube. </title> <journal> Discrete Math. </journal> <volume> 60 </volume> <pages> 207-213, </pages> <year> 1986. </year>
Reference-contexts: The theorem depends on the following lemma which was proven by Kleitman <ref> [9] </ref>. Lemma 3.5 Let S be an m-cube and let F S be a set of faulty nodes in S. If S does not tolerate F S then jF S j m 2 c .
Reference: [10] <author> T. Leighton and B. Maggs. </author> <title> Expanders might be practical: fast algorithms for routing around faults on multibutterflies. </title> <booktitle> In Proc. 30th Annual IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 384-389, </pages> <year> 1989. </year>
Reference-contexts: In the following discussion we will view a parallel computer as being a graph in which the nodes correspond to processors and the edges correspond to communication links. The issue of computing with faulty hypercubes has been addressed in several recent papers <ref> [2, 3, 4, 5, 6, 7, 8, 10, 11, 14] </ref>. Particularly notable is the result by Hastad, Leighton and Newman [8]. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed. <p> They proved that, with high probability, the faulty hypercube can simulate a fault-free hypercube with only a constant factor slowdown. Thus the hypercube is extremely tolerant of randomly distributed faults. In this paper we study worst case distributions of faults. Several other researchers have examined this issue <ref> [3, 6, 10, 11] </ref>. One approach that has been studied is to locate a large fault-free subcube and to use that subcube to emulate the entire hypercube.
Reference: [11] <author> M. Livingston, Q. Stout, N. Graham, and F. Harary. </author> <title> Subcube Fault-Tolerance in Hypercubes. </title> <type> Technical Report CRL-TR-12-87, </type> <institution> U. of Michigan Computing Research Laboratory, </institution> <month> September </month> <year> 1987. </year>
Reference-contexts: In the following discussion we will view a parallel computer as being a graph in which the nodes correspond to processors and the edges correspond to communication links. The issue of computing with faulty hypercubes has been addressed in several recent papers <ref> [2, 3, 4, 5, 6, 7, 8, 10, 11, 14] </ref>. Particularly notable is the result by Hastad, Leighton and Newman [8]. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed. <p> They proved that, with high probability, the faulty hypercube can simulate a fault-free hypercube with only a constant factor slowdown. Thus the hypercube is extremely tolerant of randomly distributed faults. In this paper we study worst case distributions of faults. Several other researchers have examined this issue <ref> [3, 6, 10, 11] </ref>. One approach that has been studied is to locate a large fault-free subcube and to use that subcube to emulate the entire hypercube. <p> One approach that has been studied is to locate a large fault-free subcube and to use that subcube to emulate the entire hypercube. However, it has been shown that in order to guarantee a constant factor slowdown, the n-cube must have only O (log n) faults <ref> [3, 11] </ref>. Our approach is to partition the hypercube into small subcubes, each of which has a small number of faults. More precisely, we guarantee that the majority of the nodes in each subcube form a fault-free connected component.
Reference: [12] <author> M. Livingston and Q. Stout, </author> <title> Embeddings in Hypercubes. </title> <booktitle> In Mathematical Computer Modeling Vol. </booktitle> <volume> 11, </volume> <pages> pages 222-227. </pages>
Reference: [13] <author> F.P. Preparata and J. Vuillemin. </author> <title> The cube-connected cylces: a versatile network for parallel computation. </title> <journal> Communications of the ACM, </journal> <volume> 24(5) </volume> <pages> 300-309, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: The classes of regular and single-port algorithms include a large number of hypercube algorithms, including all of the algorithms in the classes Ascend and Descend as defined by Preparata and Vuillemin <ref> [13] </ref>. A different but related approach to hypercube fault-tolerance was studied by Chan and Lee [6]. They showed that the Benes routing algorithm can be implemented on an n-cube that has fewer than n faults with a factor of 9 slowdown.
Reference: [14] <author> M.O. Rabin. </author> <title> Efficient dispersal of information for security, load balancing, and fault tolerance. </title> <journal> Journal of the ACM, </journal> <volume> 36(2) </volume> <pages> 335-348, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: In the following discussion we will view a parallel computer as being a graph in which the nodes correspond to processors and the edges correspond to communication links. The issue of computing with faulty hypercubes has been addressed in several recent papers <ref> [2, 3, 4, 5, 6, 7, 8, 10, 11, 14] </ref>. Particularly notable is the result by Hastad, Leighton and Newman [8]. They considered a faulty hypercube in which every node is faulty with constant probability p &lt; 1 and the faults are independently distributed.
References-found: 14

