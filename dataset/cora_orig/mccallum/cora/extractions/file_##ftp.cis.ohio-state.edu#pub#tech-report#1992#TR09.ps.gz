URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1992/TR09.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: sheu-m@cis.ohio-state.edu, long@cis.ohio-state.edu  
Title: UP and the Low and High Hierarchies: A Relativized Separation 1  
Author: Ming-Jye Sheu and Timothy J. Long 
Note: 1 This work was supported in part by NSF Grant CCR-8909071  
Date: January 10, 1993  
Address: Columbus, Ohio 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract-found: 0
Intro-found: 1
Reference: [Bab85] <author> L. Babai. </author> <title> Trading group theory for randomness. </title> <booktitle> In Proc. 17th Annual ACM Symp. Theory of Computing, </booktitle> <pages> pages 421-429, 1885. </pages>
Reference-contexts: a structure for classifying NP sets A based on the first level, of either hierarchy, to which A belongs. 1 There are numerous examples of sets in the low hierarchy including sparse sets in NP, NP sets with polynomial-time probabilistic algorithms, NP sets whose complements are in AM (Arthur-Merlin games <ref> [Bab85] </ref>), and NP sets with small size circuits. On the other hand, sets in the high hierarchy are complete sets for NP with respect to various polynomial-time reducibilities.
Reference: [BDG88] <author> J. Balcazar, J. Diaz, and J. Gabarro. </author> <title> Structural Complexity I. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: It is well know that the polynomial-time hierarchy can also be defined as the relativized polynomial-time hierarchy relative to the empty set and that the oracle machine and the quantifier characterizations of the polynomial-time hierarchy are equivalent <ref> [BDG88] </ref>. For any set A, let K (A) be the standard many-one complete set for NP (A). The many-one complete set for P k , where k 1, is defined inductively as follows: K 1 (A) = K (A), and K k+1 (A) = K (K k (A)).
Reference: [Bei92a] <author> R. Beigel. </author> <title> Perceptrons, pp, and the polynomial-time hierarchy. </title> <booktitle> In Proc. Sev enth Annual IEEE Structure in Complexity Theory Conference, </booktitle> <pages> pages 14-19, </pages> <year> 1992. </year>
Reference-contexts: In fact, there is an oracle relative to which UP is not in level 1 of the high hierarchy. In <ref> [Bei92a] </ref>, Beigel constructed an oracle set A such that P;A 2 6 PP A . If there is a set L 2 UP A that is SN T -complete for NP A , then, 2 NP L PP L PP UP A = PP A .
Reference: [Bei92b] <author> R. Beigel. </author> <type> Personal correspondence, </type> <year> 1992. </year>
Reference-contexts: The fact that UP is low for GapP but is unlikely to be low for #P demonstrates a distinction between GapP and #P. Corollary 4 also shows that #P in not closed under subtraction relative to A. This observation is due to Beigel <ref> [Bei92b] </ref>. Note that there are oracles relative to which UP is in the low hierarchy while the polynomial-time hierarchy contains an infinite number of distinct levels. <p> Corollary 4.8 There exists an oracle set A such that SPP (A) is not low for #P (A). Corollary 4.8 implies an interesting observation by Beigel <ref> [Bei92b] </ref>. It is known that SPP is low for GapP, which is the function class obtained by closing #P under subtraction. 3 The fact that SPP might not be low for #P demonstrates a distinction between GapP and #P.
Reference: [BGS75] <author> T. Baker, J. Gill, and R. Solovay. </author> <title> Relativizations of the P =? NP question. </title> <journal> SIAM J. Comput., </journal> <volume> 4(4) </volume> <pages> 431-441, </pages> <month> Dec. </month> <year> 1975. </year>
Reference-contexts: Theorem 4.7 There exists an oracle set A such that UP (A) is not low for #P (A). 18 Proof. Consider an oracle set A such that UP (A) 6 NP (A) " co-NP (A) <ref> [BGS75] </ref>. Consequently, NP (A)(UP (A)) 6 NP (A). Let a language L in NP (UP (A)) be the witness that NP (UP (A)) 6 NP (A). Then L is accepted by a nondeterministic polynomial-time oracle machine M L that uses an oracle set X in UP (A).
Reference: [BI87] <author> M. Blum and R. Impagliazzo. </author> <title> Generic oracles andd oracle classes. </title> <booktitle> In Pro ceedings of the 28th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1987. </year>
Reference-contexts: Corollary 4 also shows that #P in not closed under subtraction relative to A. This observation is due to Beigel [Bei92b]. Note that there are oracles relative to which UP is in the low hierarchy while the polynomial-time hierarchy contains an infinite number of distinct levels. In <ref> [BI87] </ref>, Blum and Impagiazzo constructed an oracle relative to which P = NP " co-NP = UP and, at the same time, the polynomial-time hierarchy is infinite. Note that the constructed oracle collapses the first two levels of the low hierarchy.
Reference: [FFK91] <author> S. Fenner, L. Fortnow, and S. Kurtz. </author> <title> Gap-definable counting classes. </title> <booktitle> In Proc. Structure in Complexity Theory Sixth Annual Conference, </booktitle> <pages> pages 30-42. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: In <ref> [FFK91] </ref> the class UP is generalized to the class SPP as follows Definition 2.4 A set L is in SPP if and only if there is a nondeterministic polynomial-time Turing machine M L such that for all x, x 2 L ) ACC M L (x) REJ M L (x) =
Reference: [FSS81] <author> M. Furst, J. Saxe, and M. Sipser. Pairty, </author> <title> circuits, and the polynomial-time hierarchy. </title> <booktitle> In Proc. 22th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 260-270, </pages> <year> 1981. </year>
Reference-contexts: For from ^ R q;B , g 0 () is defined analogously by interchanging the roles of 0 and 1. Circuits can be used to describe the computation of oracle machines on input strings. The following proposition states this fact. Proposition 3.1 <ref> [FSS81, Ko89] </ref> Let M be an oracle machine with runtime p (n), where p is a polynomial. Then, for each x, there is a depth-2 circuit C = C M;x satisfying the following properties: 1.
Reference: [FSS84] <author> M. Furst, J. Saxe, and M. Sipser. Pairty, </author> <title> circuits, and the polynomial-time hierarchy. </title> <journal> Mathematical Systems Theory, </journal> <volume> 17 </volume> <pages> 13-27, </pages> <year> 1984. </year>
Reference-contexts: The composition of two restrictions 1 2 (x) for any variable x is defined as 2 ( 1 (x)). Random restrictions of circuits were first introduced by Furst, Saxe and Sipser <ref> [FSS84] </ref>. Here we use restrictions that are motivated by, but not identical to, the restrictions used by H-astad [Has87]. We define two probability spaces of restrictions ^ R + q;B and ^ R also define a function g 0 that maps a random restriction to a restriction.
Reference: [GS88] <author> J. Grollmann and A. Selman. </author> <title> Complexity measures for public-key cryptosys tems. </title> <journal> SIAM J. Comput., </journal> <volume> 11(2), </volume> <month> April </month> <year> 1988. </year>
Reference-contexts: Recall that UP is the class of sets that are recognized by nondeterministic polynomial-time Turing machines that, for all inputs, have either zero or one accepting computations. Not only is UP an important class in complexity theory, but it also has strong connections to fundamental theoretical issues in cryptography <ref> [GS88] </ref>. Because the high hierarchy for NP consists of sets that are complete for NP with respect to various reducibilities, it seems very unlikely that any sets in UP would also belong to the high hierarchy.
Reference: [Has87] <author> J. D. Hastad. </author> <title> Computational limitations for small-depth circuits. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1987. </year>
Reference-contexts: Our construction of an oracle set A relative to which UP is not in any level of the low and high hierarchies follows the circuit lower bound techniques from Yao [Yao85], H-astad <ref> [Has87] </ref>, and Ko [Ko89]. In the case of the high hierarchy, we use an interesting result from Hartmanis and Hemachandra [HH91]. <p> The composition of two restrictions 1 2 (x) for any variable x is defined as 2 ( 1 (x)). Random restrictions of circuits were first introduced by Furst, Saxe and Sipser [FSS84]. Here we use restrictions that are motivated by, but not identical to, the restrictions used by H-astad <ref> [Has87] </ref>. We define two probability spaces of restrictions ^ R + q;B and ^ R also define a function g 0 that maps a random restriction to a restriction. <p> We let f n k denote the function computed by C n k . The switching lemma from H-astad <ref> [Has87] </ref> has been an important tool in proofs constructing oracle sets that separate the polynomial-time hierarchy from PSPACE and that separate every level of the polynomial-time hierarchy [Has87, Ko89]. The following lemma states that the switching lemma also holds for random restrictions with the U property. <p> We let f n k denote the function computed by C n k . The switching lemma from H-astad [Has87] has been an important tool in proofs constructing oracle sets that separate the polynomial-time hierarchy from PSPACE and that separate every level of the polynomial-time hierarchy <ref> [Has87, Ko89] </ref>. The following lemma states that the switching lemma also holds for random restrictions with the U property. <p> The construction of A will depend on two crucial technical lemmas. The first one is a modified version of Yao and H-astad's separation of the -levels of PH <ref> [Yao85, Has87] </ref> and it shows that there is an oracle A such that ~ I A k 62 P k1 (A SAT), for all k 1. The proof follows trivially from the proofs in [Yao85, Has87] and is omitted. <p> first one is a modified version of Yao and H-astad's separation of the -levels of PH <ref> [Yao85, Has87] </ref> and it shows that there is an oracle A such that ~ I A k 62 P k1 (A SAT), for all k 1. The proof follows trivially from the proofs in [Yao85, Has87] and is omitted. Lemma 5.1 For arbitrary but fixed k 1, let be a P;1 k1 -predicate with polynomial bound p.
Reference: [HH91] <author> J. Hartmanis and L. Hemachandra. </author> <title> One-way functions and non-isomorphism of NP-complete sets. </title> <journal> Theoretical Computer Science, </journal> <volume> 81(1) </volume> <pages> 155-163, </pages> <year> 1991. </year>
Reference-contexts: In the case of the high hierarchy, we use an interesting result from Hartmanis and Hemachandra <ref> [HH91] </ref>. They show that if a nondeterministic polynomial time oracle machine N , relative to every oracle set and on every input string, has at most one accepting computation, then N behaves like a deterministic polynomial time oracle machine with SAT added to the oracle set. <p> Our diagonalization enumerates all sets in UP (A). As a result, there is an oracle set A relative to which UP is completely disjoint from every level of the high hierarchy. Our proof is based on an interesting observation from Hartmanis and Hemachandra <ref> [HH91] </ref>: if a nondeterministic polynomial time oracle machine N is a robustly categorical machine (machines that, for every oracle, have at most one accepting computation for each input), then N behaves like a P oracle machine with SAT added to the oracle set. <p> The second technical lemma is based on ideas from Hartmanis and Hemachandra <ref> [HH91] </ref>. Lemma 5.2 Let N M be an arbitrary nondeterministic polynomial time oracle machine whose running time is bounded by p (jnj) on each input of length n. Let U = fx j 8B [N M B (x) has at most 1 accepting path ]g.
Reference: [Ko89] <author> K. Ko. </author> <title> Relativized polynomial time hierarchies having exactly k levels. </title> <journal> SIAM J. Comput., </journal> <volume> 18(2) </volume> <pages> 392-408, </pages> <month> April </month> <year> 1989. </year> <month> 35 </month>
Reference-contexts: Our construction of an oracle set A relative to which UP is not in any level of the low and high hierarchies follows the circuit lower bound techniques from Yao [Yao85], H-astad [Has87], and Ko <ref> [Ko89] </ref>. In the case of the high hierarchy, we use an interesting result from Hartmanis and Hemachandra [HH91]. <p> Sets in the polynomial-time hierarchy relative to A have also been characterized in terms of polynomial bounded quantification over predicates in P (A) [Sto76, Wra76]. We adopt the following definitions from <ref> [Ko89] </ref>. <p> For from ^ R q;B , g 0 () is defined analogously by interchanging the roles of 0 and 1. Circuits can be used to describe the computation of oracle machines on input strings. The following proposition states this fact. Proposition 3.1 <ref> [FSS81, Ko89] </ref> Let M be an oracle machine with runtime p (n), where p is a polynomial. Then, for each x, there is a depth-2 circuit C = C M;x satisfying the following properties: 1. <p> A depth-(k +1) circuit is a k -circuit ( k (m)-circuit) if it is the dual circuit of a k -circuit ( k (m)-circuit). Now we can translate P;1 k -predicates to circuits. Proposition 3.2 <ref> [Ko89, SL91] </ref> Let k 1. <p> We let f n k denote the function computed by C n k . The switching lemma from H-astad [Has87] has been an important tool in proofs constructing oracle sets that separate the polynomial-time hierarchy from PSPACE and that separate every level of the polynomial-time hierarchy <ref> [Has87, Ko89] </ref>. The following lemma states that the switching lemma also holds for random restrictions with the U property.
Reference: [Ko91] <author> K. Ko. </author> <title> Separating the low and high hierarchies by oracles. </title> <journal> Information and Computation, </journal> <volume> 90(2) </volume> <pages> 156-177, </pages> <month> Feburary </month> <year> 1991. </year>
Reference-contexts: The constructions in Section 4 and 5 can be combined to yield a oracle set relative to which UP is not in low or high hierarchies. Finally, in Section 6, we combine our proof with the proof in Ko <ref> [Ko91] </ref> and show that there is an oracle A relative to which the low and high hierarchies have infinitely many distinct levels and UP contains a language outside the low hierarchy and contains no languages in the high hierarchy. 4 2 Definitions denotes an arbitrary alphabet of size at least two. <p> Also, for each variable v z in C t;x , jzj q (jxj). Ko <ref> [Ko91] </ref> introduced a family of functions f n k , n 1; k 1, computed by special types of circuits. Definition 3.3 [Ko91] For each n 1 and k 1, a C n k circuit is a depth-k circuit such that 1. <p> Also, for each variable v z in C t;x , jzj q (jxj). Ko <ref> [Ko91] </ref> introduced a family of functions f n k , n 1; k 1, computed by special types of circuits. Definition 3.3 [Ko91] For each n 1 and k 1, a C n k circuit is a depth-k circuit such that 1. <p> Note that it is not known that if the polynomial-time hierarchy has an infinite number of distinct levels, then the low and high hierarchies also have an infinite number of distinct levels. In <ref> [Ko91] </ref>, Ko constructed an oracle set relative to which the low and high hierarchies have an infinite number of distinct levels. <p> To satisfy condition (b), we will use the set ~ I A k+1 2 P k+1 (A) from Theorem 5.3 and make sure that ~ I A k+1 62 P k (UP (A)). To satisfy conditions (c) (f ), we will use the following sets from Ko <ref> [Ko91] </ref>. <p> There are potential conflicts between these encoding requirements and diagonalization requirements. However, by the definitions of sets B k (A) and ~ B k (A), we only need to encode "small" intervals of strings into A. This can be seen by the following facts from Ko <ref> [Ko91] </ref> (Fact 3.2 and Fact 4.2). <p> At the same time, we try to satisfy R 4;k;i for the least i for which R 4;k;i is not yet satisfied. We use exactly the same construction as in Ko's proof of Theorem 3.1 in <ref> [Ko91] </ref>. If we have satisfied the requirement R 4;k;i , then extend the sets A (ff) and A (ff) as needed, cancel i, and go to the next stage. <p> At the same time, we try to satisfy R 6;k;i for the least i for which R 6;k;i is not yet satisfied. We use exactly the same construction as in Ko's proof of Theorem 4.1 in <ref> [Ko91] </ref>. If we have satisfied the requirement R 6;k;i , then extend the sets A (ff) and A (ff) as needed, cancel i, and go to the next stage.
Reference: [KS85] <author> K. Ko and U. Schoning. </author> <title> On circuit-size and the low hierarchy in NP. </title> <journal> SIAM J. Comput., </journal> <volume> 14(1) </volume> <pages> 41-51, </pages> <year> 1985. </year>
Reference-contexts: Corollary 4.5 There exists an oracle set A relative to which UP is not contained in the following classes: APT, R, BPP, P/poly. Proof. It is known that NP sets that are also in APT, R, BPP, or P/poly are in the low hierarchy <ref> [KS85, Sch86] </ref>. These results can be relativized to all oracles. Since UP NP, the corollary follows immediately from Corollary 4.3. 2 Corollary 4.6 There exists an oracle set relative to which UP and FewP are not low for BPP. Proof.
Reference: [KSTT92] <author> J. Kobler, U. Schoning, S. Toda, and J. Toran. </author> <title> Turing machines with few accepting computations and low sets for PP. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 44(2), </volume> <year> 1992. </year>
Reference-contexts: Note that PP UP A = PP A follows from the fact that UP A is low for PP A for all sets A. This is just a relativization of the recent result by Kobler, Schoning, Toda, and Toran that UP is low for PP <ref> [KSTT92] </ref>. We extend this level 1 result by constructing an oracle set A relative to which no languages in UP are in any level of the high hierarchy.
Reference: [Sch83] <author> U. Schoning. </author> <title> A low and a high hierarchy within NP. </title> <journal> J. Comput. System Sci., </journal> <volume> 27 </volume> <pages> 14-28, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction The low and high hierarchies in NP were first introduced by Schoning in order to analyze the internal structure of NP <ref> [Sch83] </ref>. A set A 2 NP is said to be in level k of the low hierarchy if P k (A) = P k ; and a set B 2 NP is said to be in level k of the high hierarchy if P k (B). <p> For example, level 0 of the high hierarchy is the class of P T -complete sets for NP and level 1 of the high hierarchy is the class of SN T -complete sets for NP <ref> [Sch83] </ref>. The low and high hierarchies demonstrate an interesting structure within NP: the low hierarchy starts at P and grows "upward" toward the complete sets for NP, while the high hierarchy starts with complete sets for NP and grows "downward" toward P. <p> In another words, what are the sets in NP that fall into the "gap" between the low and high hierarchies? The existence of a gap between the low and high hierarchy is strongly connected to the structure of the polynomial-time hierarchy. In <ref> [Sch83] </ref>, Schoning showed that there exist sets between the low and high hierarchies if and only if the polynomial time hierarchy is infinite. <p> The many-one complete set for P k , where k 1, is defined inductively as follows: K 1 (A) = K (A), and K k+1 (A) = K (K k (A)). Based on the idea from recursion theory, Schoning <ref> [Sch83] </ref> intrudoced the low and high hierarchies within NP. Observe the following containments: P k (A) P where A 2 NP and k 1. If A 2 P, then the left containment becomes equality and if A is an NP-complete set, then the right containment becomes equality. <p> If A 2 P, then the left containment becomes equality and if A is an NP-complete set, then the right containment becomes equality. This motivates the definition of the low and high hierarchies. Definition 2.1 <ref> [Sch83] </ref> 1. The low hierarchy in NP is fL P; k j k 0g, where L P; k = fA 2 NP j P k g. 2. The high hierarchy in NP is fH P; k j k 0g, where H P; k+1 k (A)g.
Reference: [Sch86] <author> U. Schoning. </author> <title> Complexity and Structure. </title> <booktitle> Lecture Notes in Computer Science Vol. </booktitle> <volume> 211. </volume> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Corollary 4.5 There exists an oracle set A relative to which UP is not contained in the following classes: APT, R, BPP, P/poly. Proof. It is known that NP sets that are also in APT, R, BPP, or P/poly are in the low hierarchy <ref> [KS85, Sch86] </ref>. These results can be relativized to all oracles. Since UP NP, the corollary follows immediately from Corollary 4.3. 2 Corollary 4.6 There exists an oracle set relative to which UP and FewP are not low for BPP. Proof.
Reference: [SL91] <author> M. Sheu and T. </author> <title> Long. The extended low hierarchy is an infinite hierarchy. </title> <type> Technical Report OSU-CISRC-8/91-TR22, </type> <institution> The Ohio State University, </institution> <year> 1991. </year>
Reference-contexts: A depth-(k +1) circuit is a k -circuit ( k (m)-circuit) if it is the dual circuit of a k -circuit ( k (m)-circuit). Now we can translate P;1 k -predicates to circuits. Proposition 3.2 <ref> [Ko89, SL91] </ref> Let k 1.
Reference: [Sto76] <author> L. Stockmeyer. </author> <title> The polynomial-time hierarchy. </title> <journal> Theor. Comput. Sci., </journal> <volume> 3 </volume> <pages> 1-22, </pages> <year> 1976. </year>
Reference-contexts: Sets in the polynomial-time hierarchy relative to A have also been characterized in terms of polynomial bounded quantification over predicates in P (A) <ref> [Sto76, Wra76] </ref>. We adopt the following definitions from [Ko89].
Reference: [Wra76] <author> C. Wrathall. </author> <title> Complete sets and the polynomial hierarchy. </title> <journal> Theor. Comput. Sci, </journal> <volume> 3 </volume> <pages> 23-33, </pages> <year> 1976. </year>
Reference-contexts: Sets in the polynomial-time hierarchy relative to A have also been characterized in terms of polynomial bounded quantification over predicates in P (A) <ref> [Sto76, Wra76] </ref>. We adopt the following definitions from [Ko89].
Reference: [Yao85] <author> A. Yao. </author> <title> Separating the polynomial-time hierarchy by oracles. </title> <booktitle> In Proc. 26th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 1-10, </pages> <year> 1985. </year> <month> 36 </month>
Reference-contexts: Our construction of an oracle set A relative to which UP is not in any level of the low and high hierarchies follows the circuit lower bound techniques from Yao <ref> [Yao85] </ref>, H-astad [Has87], and Ko [Ko89]. In the case of the high hierarchy, we use an interesting result from Hartmanis and Hemachandra [HH91]. <p> The construction of A will depend on two crucial technical lemmas. The first one is a modified version of Yao and H-astad's separation of the -levels of PH <ref> [Yao85, Has87] </ref> and it shows that there is an oracle A such that ~ I A k 62 P k1 (A SAT), for all k 1. The proof follows trivially from the proofs in [Yao85, Has87] and is omitted. <p> first one is a modified version of Yao and H-astad's separation of the -levels of PH <ref> [Yao85, Has87] </ref> and it shows that there is an oracle A such that ~ I A k 62 P k1 (A SAT), for all k 1. The proof follows trivially from the proofs in [Yao85, Has87] and is omitted. Lemma 5.1 For arbitrary but fixed k 1, let be a P;1 k1 -predicate with polynomial bound p.
References-found: 22

