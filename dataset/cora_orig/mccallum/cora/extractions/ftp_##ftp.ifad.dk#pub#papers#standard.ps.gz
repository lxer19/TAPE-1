URL: ftp://ftp.ifad.dk/pub/papers/standard.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Title: Standards for Non-Executable Specification Languages  
Author: Peter Gorm Larsen Nico Plat 
Note: These problems are touched upon.  
Date: May 27, 1992  
Address: Forskerparken 10, DK-5230 Odense M, Denmark  P.O.Box 356, NL-2600 AJ Delft, The Netherlands  
Affiliation: The Institute of Applied Computer Science (IFAD)  Delft University of Technology Faculty of Technical Mathematics and Informatics  
Abstract: This paper discusses the impact of the standardization of (non-executable) specification languages; standardization can increase the interest in, and acceptance of, a specification language, and it stimulates the development of tool support for such a language. It is argued why a specification language should preferably be formally defined. The ISO/VDM-SL standard (under construction) is used as an illustration. The fact that many specification languages are non-executable causes problems in the areas of conformance and compliance. 
Abstract-found: 1
Intro-found: 1
Reference: [Andrews&91] <author> Derek Andrews and Darrel Ince. </author> <title> Practical Formal Methods with VDM. </title> <publisher> McGraw Hill, </publisher> <month> September </month> <year> 1991. </year>
Reference-contexts: Programming languages do not give the proper amount of abstraction, while specification languages do. 1.2 Using Specification Languages in Industry Some of the non-executable specification languages supported by well-known formal methods (e.g. VDM [Jones90], [Dawes91], <ref> [Andrews&91] </ref>, and Z [Hayes87], [Spivey92]) have been used as `paper and pencil' tools. The strength of using specification languages in this way is that it is easy to extend the notation of the specification language to suit a particular paradigm or application area 1 .
Reference: [Bjtrner&78] <author> Dines Bjtrner and Cliff B. Jones, </author> <title> editors. The Vienna Development Method: The Meta-Language. </title> <booktitle> Volume 61 of LNCS, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference: [Bjtrner&82] <author> Dines Bjtrner and Cliff B. Jones. </author> <title> Formal Specification & Software Development. </title> <booktitle> Series in Computer Science, Prentice-Hall International, </booktitle> <year> 1982. </year>
Reference-contexts: Two main VDM books ([Bjtrner&78] and <ref> [Bjtrner&82] </ref>) were used as baseline documents for the standard. At the start of the standardization process it had been decided that the standard itself should as much as possible be formally defined, in order to make it as precise as possible.
Reference: [Bruun&92] <author> Hans Bruun, Bo Stig Hansen and Flemming Damm. </author> <title> The Static Semantics of VDM-SL. </title> <type> Technical Report, </type> <institution> ID/DtH, </institution> <year> 1992. </year>
Reference-contexts: The standard, therefore, provides a formal definition of the well-formedness of a VDM specification: the static semantics SS <ref> [Bruun&92] </ref> of the language. The static semantics has itself been formulated in VDM-SL. The VDM specifications having at least one model in the dynamic semantics, can be considered as those which are well-formed. In general, it is not statically decidable whether a given VDM specification is well-formed or not.
Reference: [BSI/Modula2] <institution> JCT1/SC22/WG13 Draft Proposal DP 10514. </institution> <note> Third Working Draft Modula-2 Standard. </note>
Reference-contexts: A formal language L can be defined by a tuple: 3 An outstanding exception to this is the Modula-2 standard <ref> [BSI/Modula2] </ref> which currently is defining the semantics formally using VDM-SL. 4 An example is the Office Document Architecture standard [ISO8613], where a formal specification is given as an addendum to the standard. 5 Currently the specification language supporting the Vienna Development Method (VDM) is being standard ized under the auspices of
Reference: [BSIVDM91] <institution> VDM Specification Language - Proto-Standard. </institution> <type> Technical Report, </type> <institution> British Standards Institution, </institution> <month> March </month> <year> 1991. </year> <note> BSI IST/5/50. </note>
Reference-contexts: semantics formally using VDM-SL. 4 An example is the Office Document Architecture standard [ISO8613], where a formal specification is given as an addendum to the standard. 5 Currently the specification language supporting the Vienna Development Method (VDM) is being standard ized under the auspices of both ISO and BSI (see <ref> [BSIVDM91] </ref>). 3 L = (S L ; DS L ) where S L denotes the set of all valid sentences s in the language (usually implicitly defined by a combination of a context-free grammar and a function SS L removing those sentences from the language generated by the grammar which are <p> M -set syntax concrete syntax outer abstract syntax (OAS) SM symbol representations L SS well-formedness grade core abstract syntax (CAS) The latest version of the standard can be found in <ref> [BSIVDM91] </ref>. Below we will present a short overview of the standard and the connections included in the figure above (for a more thorough overview see [Plat&92a]). 2.1 The syntax The main component of the `user interface' of VDM-SL is formed by its syntax, which exists in two forms: 1.
Reference: [Dawes91] <author> John Dawes. </author> <title> The VDM-SL Reference Guide. </title> <publisher> Pitman, </publisher> <year> 1991. </year>
Reference-contexts: Programming languages do not give the proper amount of abstraction, while specification languages do. 1.2 Using Specification Languages in Industry Some of the non-executable specification languages supported by well-known formal methods (e.g. VDM [Jones90], <ref> [Dawes91] </ref>, [Andrews&91], and Z [Hayes87], [Spivey92]) have been used as `paper and pencil' tools. The strength of using specification languages in this way is that it is easy to extend the notation of the specification language to suit a particular paradigm or application area 1 .
Reference: [Hayes87] <author> Ian Hayes, </author> <title> editor. Specification Case Studies. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1987. </year>
Reference-contexts: Programming languages do not give the proper amount of abstraction, while specification languages do. 1.2 Using Specification Languages in Industry Some of the non-executable specification languages supported by well-known formal methods (e.g. VDM [Jones90], [Dawes91], [Andrews&91], and Z <ref> [Hayes87] </ref>, [Spivey92]) have been used as `paper and pencil' tools. The strength of using specification languages in this way is that it is easy to extend the notation of the specification language to suit a particular paradigm or application area 1 .
Reference: [Hayes&89] <author> I.J. Hayes, C.B. Jones. </author> <title> Specifications are not (necessarily) executable. </title> <journal> Software Engineering Journal, </journal> <pages> 330-338, </pages> <month> November </month> <year> 1989. </year> <month> 11 </month>
Reference-contexts: In many cases several different results can be equally valid. In general there is a danger in limiting the power of the notation used for specifications to the point where all of their constructs can be executed, and where it is impossible to express looseness (see <ref> [Hayes&89] </ref>). Programming languages do not give the proper amount of abstraction, while specification languages do. 1.2 Using Specification Languages in Industry Some of the non-executable specification languages supported by well-known formal methods (e.g. VDM [Jones90], [Dawes91], [Andrews&91], and Z [Hayes87], [Spivey92]) have been used as `paper and pencil' tools.
Reference: [ISO8613] <institution> Information Processing Text and Office Systems Office Document Architecture (ODA) and Interchange Format. </institution> <note> Volume parts 1-6, ISO, 1988. Draft International Standard ISO/DIS 8613/1-6. </note>
Reference-contexts: A formal language L can be defined by a tuple: 3 An outstanding exception to this is the Modula-2 standard [BSI/Modula2] which currently is defining the semantics formally using VDM-SL. 4 An example is the Office Document Architecture standard <ref> [ISO8613] </ref>, where a formal specification is given as an addendum to the standard. 5 Currently the specification language supporting the Vienna Development Method (VDM) is being standard ized under the auspices of both ISO and BSI (see [BSIVDM91]). 3 L = (S L ; DS L ) where S L denotes
Reference: [ISO8807] <institution> Information Processing Systems | Open Systems Interconnection | LOTOS | A Formal Description Technique Based on the Temporal Ordering of Observational Be-haviour. </institution> <type> Technical Report, </type> <institution> International Standards Organisation, </institution> <year> 1989. </year> <month> ISO8807. </month>
Reference-contexts: In the telecommunication industry it is nowadays recognized that it is an advantage to have standards for the specification languages that are used. Within ISO (the International Standards Organisation) two standards have been developed for such specification languages (LOTOS <ref> [ISO8807] </ref>, and ESTELLE [ISO9074]). CCITT (the Comite Consultatif International Telephonique et Telegraphique) have also standardized the SDL [SDL] specification language, which is used to describe distributed systems. Summarizing, we believe that if (standardized) specification languages are used in standards, more accurate and useful standards can be achieved.
Reference: [ISO9074] <institution> Information Processing Systems | Open Systems Interconnection | Estelle | A Formal Description Technique Based on an Extended State Transition Model. </institution> <type> Technical Report, </type> <institution> International Standards Organisation, </institution> <month> August </month> <year> 1987. </year> <month> ISO9074. </month>
Reference-contexts: In the telecommunication industry it is nowadays recognized that it is an advantage to have standards for the specification languages that are used. Within ISO (the International Standards Organisation) two standards have been developed for such specification languages (LOTOS [ISO8807], and ESTELLE <ref> [ISO9074] </ref>). CCITT (the Comite Consultatif International Telephonique et Telegraphique) have also standardized the SDL [SDL] specification language, which is used to describe distributed systems. Summarizing, we believe that if (standardized) specification languages are used in standards, more accurate and useful standards can be achieved.
Reference: [Jones90] <author> Cliff B. Jones. </author> <title> Systematic Software Development Using VDM (second edition). </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1990. </year>
Reference-contexts: Programming languages do not give the proper amount of abstraction, while specification languages do. 1.2 Using Specification Languages in Industry Some of the non-executable specification languages supported by well-known formal methods (e.g. VDM <ref> [Jones90] </ref>, [Dawes91], [Andrews&91], and Z [Hayes87], [Spivey92]) have been used as `paper and pencil' tools. The strength of using specification languages in this way is that it is easy to extend the notation of the specification language to suit a particular paradigm or application area 1 .
Reference: [Larsen92] <author> Peter Gorm Larsen. </author> <title> The Dynamic Semantics of the BSI/VDM Specification Language. </title> <type> Technical Report, </type> <institution> The Institute of Applied Computer Science, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: The implementation must simply have a functionality that can be said to implement the loosely specified construct according to certain implementation relations for VDM-SL. The actual definition of DS <ref> [Larsen92] </ref> is given in a denotational way, without using the traditional style of explicitly constructing the denotation. Instead, first the set of all possible models is created, and then, by examining the syntactic specification, this set is restricted to those models that can be considered the denotation of the specification.
Reference: [Plat&89] <author> Nico Plat and Hans Toetenel. </author> <title> Tool support for VDM. </title> <type> Technical Report 89-81, </type> <institution> Delft University of Technology, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: Again, looking at VDM-SL, quite soon after the standardization had started, tools became available that supported the draft standard <ref> [Plat&89] </ref>. At the VDM'91 conference [VDM91] a wide range of tools were demonstrated supporting the standard. Apparently, the introduction of a standard stimulates the development of tools to a large extent.
Reference: [Plat&92a] <author> Nico Plat and Peter Gorm Larsen. </author> <title> An Overview of the ISO/VDM-SL Standard. </title> <journal> Sigplan Notices, </journal> <volume> 27(8), </volume> <month> August </month> <year> 1992. </year>
Reference-contexts: Below we will present a short overview of the standard and the connections included in the figure above (for a more thorough overview see <ref> [Plat&92a] </ref>). 2.1 The syntax The main component of the `user interface' of VDM-SL is formed by its syntax, which exists in two forms: 1. EBNF rewriting rules.
Reference: [Plat&92b] <author> Nico Plat and Hans Toetenel. </author> <title> A formal transformation from the BSI/VDM-SL concrete syntax to the core abstract syntax. </title> <type> Technical Report 92-07, </type> <institution> Delft University, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Therefore, the standard contains a formal definition of a syntax mapping SM from a specification in terms of the OAS to a specification in terms of the CAS. A preliminary definition of SM can be found in <ref> [Plat&92b] </ref>. 2.5 The dynamic semantics All VDM specifications that can be represented in the core abstract syntax are given a formal meaning by the dynamic semantics DS. The definition of DS is based on set theory and the mathematical notation which is used has been fixed.
Reference: [Ruggles90] <author> C.L.N. Ruggles, </author> <title> editor. Formal Methods in Standards: A Report from the BCS Working Group. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: However, the major aim for future standards must be the former approach which enables formal verification of compliance with a standard. This is in line with the conclusion from a BCS working group on formal methods in standards <ref> [Ruggles90] </ref>. In the telecommunication industry it is nowadays recognized that it is an advantage to have standards for the specification languages that are used. Within ISO (the International Standards Organisation) two standards have been developed for such specification languages (LOTOS [ISO8807], and ESTELLE [ISO9074]).
Reference: [SDL] <author> Recommendation Z.100. </author> <title> CCITT Specification and Description Language SDL. </title> <type> CCITT, </type> <year> 1988. </year>
Reference-contexts: Within ISO (the International Standards Organisation) two standards have been developed for such specification languages (LOTOS [ISO8807], and ESTELLE [ISO9074]). CCITT (the Comite Consultatif International Telephonique et Telegraphique) have also standardized the SDL <ref> [SDL] </ref> specification language, which is used to describe distributed systems. Summarizing, we believe that if (standardized) specification languages are used in standards, more accurate and useful standards can be achieved.
Reference: [Spivey92] <author> Mike Spivey. </author> <title> The Z Notation A Reference Manual (Second Edition). </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1992. </year>
Reference-contexts: Programming languages do not give the proper amount of abstraction, while specification languages do. 1.2 Using Specification Languages in Industry Some of the non-executable specification languages supported by well-known formal methods (e.g. VDM [Jones90], [Dawes91], [Andrews&91], and Z [Hayes87], <ref> [Spivey92] </ref>) have been used as `paper and pencil' tools. The strength of using specification languages in this way is that it is easy to extend the notation of the specification language to suit a particular paradigm or application area 1 .
Reference: [VDM91] <editor> S.Prehn and W.J.Toetenel, editors. VDM'91: </editor> <booktitle> Formal Software Development Methods. Lecture Notes in Computer Science, </booktitle> <publisher> Springer Verlag, </publisher> <month> October </month> <year> 1991. </year> <title> Two volumes: </title> <booktitle> LNCS 551 (Symposium proceedings) and LNCS 552 (Tutorials). </booktitle> <pages> 12 </pages>
Reference-contexts: Again, looking at VDM-SL, quite soon after the standardization had started, tools became available that supported the draft standard [Plat&89]. At the VDM'91 conference <ref> [VDM91] </ref> a wide range of tools were demonstrated supporting the standard. Apparently, the introduction of a standard stimulates the development of tools to a large extent. A number of reasons can be given: * A formally defined standard leaves no space as to the interpretation of the language.
References-found: 21

