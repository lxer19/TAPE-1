URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1992/1992-27.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A linear time algorithm for finding tree-decompositions of small treewidth  
Author: Hans L. Bodlaender 
Keyword: graph algorithms, treewidth, pathwidth, partial k-trees, graph minors.  
Note: AMS-classification: 68R10, 05C85, 05C05  
Address: P.O. Box 80.089, 3508 TB Utrecht, the Netherlands  
Affiliation: Department of Computer Science, Utrecht University  
Abstract: In this paper, we give, for constant k, a linear time algorithm, that given a graph G = (V; E), determines whether the treewidth of G is at most k, and if so, finds a tree-decomposition of G with treewidth at most k. A consequence is that every minor-closed class of graphs that does not contain all planar graphs has a linear time recognition algorithm. Another consequence is that a similar result holds when we look instead for path-decompositions with pathwidth at most some constant k. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. R. Abrahamson and M. R. Fellows. </author> <title> Finite automata, bounded treewidth and well-quasiordering. In Graph Structure Theory, </title> <journal> Contemporary Mathematics vol. </journal> <volume> 147, </volume> <pages> pages 539-564. </pages> <publisher> American Mathematical Society, </publisher> <year> 1993. </year>
Reference-contexts: Bodlaender and Kloks also show how if existing, a tree-decomposition with treewidth at most k can be computed in the same time bounds. Results of a similar flavor were obtained independently by Abrahamson and Fellows <ref> [1] </ref>. Recognition algorithms for graphs with treewidth k (k constant) have been designed by Arnborg et al. [4]. These algorithms use linear time, but polynomial, not linear memory (it is allowed that the algorithm consults the contents of memory 2 that is never written to).
Reference: [2] <author> S. Arnborg. </author> <title> Efficient algorithms for combinatorial problems on graphs with bounded decomposability A survey. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 2-23, </pages> <year> 1985. </year>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC
Reference: [3] <author> S. Arnborg, D. G. Corneil, and A. Proskurowski. </author> <title> Complexity of finding embed-dings in a k-tree. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 8 </volume> <pages> 277-284, </pages> <year> 1987. </year>
Reference-contexts: In this paper, we improve on this result, and give a linear time algorithm. The problem `Given a graph G = (V; E) and an integer k, is the treewidth of G at most k' is NP-complete <ref> [3] </ref>. Much work has been done on this problem for constant k. For k = 1; 2; 3, linear time algorithms exist [24]. Arnborg et al. [3] showed that the problem is solvable in O (n k+2 ) time for constant k. <p> The problem `Given a graph G = (V; E) and an integer k, is the treewidth of G at most k' is NP-complete <ref> [3] </ref>. Much work has been done on this problem for constant k. For k = 1; 2; 3, linear time algorithms exist [24]. Arnborg et al. [3] showed that the problem is solvable in O (n k+2 ) time for constant k. Then, Robertson and Seymour gave a non-constructive proof of the existence of O (n 2 ) decision algorithms [28]. Actually, this algorithm is of a `two steps' form, as described above.
Reference: [4] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese. </author> <title> An algebraic theory of graph reduction. </title> <editor> In H. Ehrig, H. Kreowski, and G. Rozenberg, editors, </editor> <booktitle> Proceedings of the Fourth Workshop on Graph Grammars and Their Applications to Computer Science, </booktitle> <pages> pages 70-83. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 532, </volume> <year> 1991. </year> <note> To appear in J. ACM. </note>
Reference-contexts: Results of a similar flavor were obtained independently by Abrahamson and Fellows [1]. Recognition algorithms for graphs with treewidth k (k constant) have been designed by Arnborg et al. <ref> [4] </ref>. These algorithms use linear time, but polynomial, not linear memory (it is allowed that the algorithm consults the contents of memory 2 that is never written to).
Reference: [5] <author> S. Arnborg, J. Lagergren, and D. Seese. </author> <title> Easy problems for tree-decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 308-340, </pages> <year> 1991. </year>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC
Reference: [6] <author> S. Arnborg and A. Proskurowski. </author> <title> Linear time algorithms for NP-hard problems restricted to partial k-trees. </title> <journal> Disc. Appl. Math., </journal> <volume> 23 </volume> <pages> 11-24, </pages> <year> 1989. </year> <month> 14 </month>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC
Reference: [7] <author> H. L. Bodlaender. </author> <title> Dynamic programming algorithms on graphs with bounded tree-width. </title> <booktitle> In Proceedings of the 15th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 105-119. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 317, </volume> <year> 1988. </year>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC
Reference: [8] <author> H. L. Bodlaender. </author> <title> Improved self-reduction algorithms for graphs with bounded treewidth. </title> <booktitle> In Proc. 15th Int. Workshop on Graph-theoretic Concepts in Computer Science WG'89, </booktitle> <pages> pages 232-244. </pages> <publisher> Springer Verlag, </publisher> <address> Lect. </address> <booktitle> Notes in Computer Science, </booktitle> <volume> vol. 411, </volume> <year> 1990. </year> <note> To appear in: Annals of Discrete Mathematics. </note>
Reference-contexts: In <ref> [8] </ref> (using results from [19]) it was shown that the non constructive elements can be avoided using self-reduction without increasing the running time by more than a (huge) constant factor. Both Lagergren [22] and Reed [25] improve on the `first step'.
Reference: [9] <author> H. L. Bodlaender. </author> <title> A tourist guide through treewidth. </title> <type> Technical Report RUU-CS-92-12, </type> <institution> Department of Computer Science, Utrecht University, Utrecht, </institution> <year> 1992. </year> <note> To appear in Acta Cybernetica. </note>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC
Reference: [10] <author> H. L. Bodlaender, M. R. Fellows, and M. Halett, </author> <year> 1993. </year> <title> Unpublished results. </title>
Reference-contexts: For several of these notions, we expect that constructive linear time algorithms can be designed. Recent research <ref> [10] </ref> shows that linear time algorithms can be constructed that solve Minimum Cut Linear Arrangement, Search Number, and some related problems for constant k, and output for `yes'-instances the required linear arrangement.
Reference: [11] <author> H. L. Bodlaender and T. Kloks. </author> <title> Better algorithms for the pathwidth and treewidth of graphs. </title> <booktitle> In Proceedings of the 18th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 544-555. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 510, </volume> <year> 1991. </year>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC <p> They all are based upon finding `balanced separators' in some clever ways. Our algorithm uses a different approach: we reduce the problem in linear time to a problem on a smaller graph by edge contraction or removing `simplicial vertices'. Independently, Lagergren and Arnborg [23] and Bodlaender and Kloks <ref> [11, 21] </ref> showed that the `second step' can be done without use of graph minors, and give explicit algorithms to test in linear time whether G has treewidth at most k, once a tree-decomposition of G with bounded treewidth is available. <p> From this tree-decomposition, one easily can build a tree-decomposition of G with treewidth at most 2k + 1. This latter tree-decomposition is used to solve the problem, using the algorithm of Bodlaender and Kloks <ref> [11, 21] </ref>, mentioned above. 2. `Only few' vertices of low degree are adjacent to one or more other vertices of low degree. <p> The treewidth of a graph cannot increase by taking minors. 2 The set of neighbors of a vertex v in G = (V; E) is denoted by N G (v) = fw 2 V j (v; w) 2 Eg. Finally, we mention some algorithmic results. Theorem 2.10 (Bodlaender, Kloks <ref> [11, 21] </ref>) For all k, l, there exists a linear time algorithm, that when given a graph G = (V; E) together with a tree-decomposition (X; T ) of G with treewidth at most l, determines whether the treewidth of G is at most k, and if so, finds a tree-decomposition <p> Proof: First, use the algorithm described in this paper. When the treewidth of G is larger than k, then clearly also the pathwidth of G is larger than k. Otherwise, use the result from <ref> [11, 21] </ref>, that states for all constants k, l that gives a linear time algorithm, that given a tree-decomposition of treewidth at most l of G, tests whether G has pathwidth at most k and if so, finds a path-decomposition of G with pathwidth at most k. 2 The constant factor <p> It is also possible to modify the algorithm, such that it uses the algorithm in <ref> [11, 21] </ref> only on tree-decompositions with treewidth at most k + 1, at the cost of increasing the running time to O (n log n). Provided that the algorithm in [11, 21] can be implemented quick enough, this modification may well be quite practical for small values of k (like k <p> It is also possible to modify the algorithm, such that it uses the algorithm in <ref> [11, 21] </ref> only on tree-decompositions with treewidth at most k + 1, at the cost of increasing the running time to O (n log n). Provided that the algorithm in [11, 21] can be implemented quick enough, this modification may well be quite practical for small values of k (like k = 4 or k = 5). <p> Now (Y; T ), defined by Y i = fv 2 v j f M 0 2 X i g is a tree-decomposition of the graph, obtained from G by contracting all edges in M M 0 with treewidth at most k + 1. Use the algorithm from <ref> [11, 21] </ref> to find a tree-decomposition of treewidth at most k of this graph. Repeat the process with this last tree-decomposition, and edge set M M 0 until the edge set is empty.
Reference: [12] <author> H. L. Bodlaender and R. H. Mohring. </author> <title> The pathwidth and treewidth of cographs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 6 </volume> <pages> 181-188, </pages> <year> 1993. </year>
Reference-contexts: We give some well known or easily derivable results. Lemma 2.1 If the treewidth of G = (V; E) is at most k, then jEj kjV j 1 2 k (k+1). Lemma 2.2 (See e.g. <ref> [12] </ref>.) Suppose (fX i j i 2 Ig; T = (I; F )) is a tree-decomposition of G = (V; E). (i) If W V forms a clique in G, then 9i 2 I : W X i . (ii) If W 1 , W 2 induce a complete bipartite subgraph
Reference: [13] <author> R. B. Borie, R. G. Parker, and C. A. Tovey. </author> <title> Automatic generation of linear-time algorithms from predicate calculus descriptions of problems on recursively constructed graph families. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 555-582, </pages> <year> 1992. </year>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC
Reference: [14] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs I: Recognizable sets of finite graphs. </title> <journal> Information and Computation, </journal> <volume> 85 </volume> <pages> 12-75, </pages> <year> 1990. </year>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC
Reference: [15] <author> B. Courcelle and M. Mosbah. </author> <title> Monadic second-order evaluations on tree-decomposable graphs. </title> <journal> Theor. Comp. Sc., </journal> <volume> 109 </volume> <pages> 49-82, </pages> <year> 1993. </year>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC
Reference: [16] <author> M. R. Fellows and M. A. Langston. </author> <title> Nonconstructive advances in polynomial-time complexity. </title> <journal> Inform. Proc. Letters, </journal> <volume> 26 </volume> <pages> 157-162, </pages> <year> 1987. </year>
Reference-contexts: Proof: See e.g. [28]. Use the algorithm, described in this paper, to find a tree-decomposition with constant bounded treewidth of the input graph, and use 12 this tree-decomposition to test for minor inclusion for all graphs in the obstruction set of the class. 2 In <ref> [16, 17] </ref> several such classes of graphs can be found. For several of these notions, we expect that constructive linear time algorithms can be designed.
Reference: [17] <author> M. R. Fellows and M. A. Langston. </author> <title> Nonconstructive tools for proving polynomial-time decidability. </title> <journal> J. ACM, </journal> <volume> 35 </volume> <pages> 727-739, </pages> <year> 1988. </year>
Reference-contexts: Proof: See e.g. [28]. Use the algorithm, described in this paper, to find a tree-decomposition with constant bounded treewidth of the input graph, and use 12 this tree-decomposition to test for minor inclusion for all graphs in the obstruction set of the class. 2 In <ref> [16, 17] </ref> several such classes of graphs can be found. For several of these notions, we expect that constructive linear time algorithms can be designed.
Reference: [18] <author> M. R. Fellows and M. A. Langston. </author> <title> An analogue of the Myhill-Nerode theorem and its use in computing finite-basis characterizations. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 520-525, </pages> <year> 1989. </year>
Reference-contexts: Moreover, from these results it follows that a technique of Fellows and Langston <ref> [18] </ref> can be used to compute the obstruction set of the class of graphs with treewidth k. Bodlaender and Kloks also show how if existing, a tree-decomposition with treewidth at most k can be computed in the same time bounds.
Reference: [19] <author> M. R. Fellows and M. A. Langston. </author> <title> On search, decision and the efficiency of polynomial-time algorithms. </title> <booktitle> In Proceedings of the 21rd Annual Symposium on Theory of Computing, </booktitle> <pages> pages 501-512, </pages> <year> 1989. </year>
Reference-contexts: In [8] (using results from <ref> [19] </ref>) it was shown that the non constructive elements can be avoided using self-reduction without increasing the running time by more than a (huge) constant factor. Both Lagergren [22] and Reed [25] improve on the `first step'.
Reference: [20] <author> D. S. Johnson. </author> <title> The NP-completeness column: An ongoing guide. </title> <journal> J. Algorithms, </journal> <volume> 8 </volume> <pages> 285-303, </pages> <year> 1987. </year>
Reference-contexts: Background The notions of `tree-decomposition' and `treewidth' have received much attention recently, not in the least due to the important role they play in the deep results on graph minors by Robertson and Seymour (see e.g. [26, 27, 29, 30, 28], and many other papers in this series). (See also <ref> [20] </ref>.) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others [2, 5, 6, 7, 11, 9, 13, 14,
Reference: [21] <author> T. Kloks. </author> <title> Treewidth. </title> <type> PhD thesis, </type> <institution> Utrecht University, </institution> <address> Utrecht, the Netherlands, </address> <year> 1993. </year>
Reference-contexts: They all are based upon finding `balanced separators' in some clever ways. Our algorithm uses a different approach: we reduce the problem in linear time to a problem on a smaller graph by edge contraction or removing `simplicial vertices'. Independently, Lagergren and Arnborg [23] and Bodlaender and Kloks <ref> [11, 21] </ref> showed that the `second step' can be done without use of graph minors, and give explicit algorithms to test in linear time whether G has treewidth at most k, once a tree-decomposition of G with bounded treewidth is available. <p> From this tree-decomposition, one easily can build a tree-decomposition of G with treewidth at most 2k + 1. This latter tree-decomposition is used to solve the problem, using the algorithm of Bodlaender and Kloks <ref> [11, 21] </ref>, mentioned above. 2. `Only few' vertices of low degree are adjacent to one or more other vertices of low degree. <p> The treewidth of a graph cannot increase by taking minors. 2 The set of neighbors of a vertex v in G = (V; E) is denoted by N G (v) = fw 2 V j (v; w) 2 Eg. Finally, we mention some algorithmic results. Theorem 2.10 (Bodlaender, Kloks <ref> [11, 21] </ref>) For all k, l, there exists a linear time algorithm, that when given a graph G = (V; E) together with a tree-decomposition (X; T ) of G with treewidth at most l, determines whether the treewidth of G is at most k, and if so, finds a tree-decomposition <p> Proof: First, use the algorithm described in this paper. When the treewidth of G is larger than k, then clearly also the pathwidth of G is larger than k. Otherwise, use the result from <ref> [11, 21] </ref>, that states for all constants k, l that gives a linear time algorithm, that given a tree-decomposition of treewidth at most l of G, tests whether G has pathwidth at most k and if so, finds a path-decomposition of G with pathwidth at most k. 2 The constant factor <p> It is also possible to modify the algorithm, such that it uses the algorithm in <ref> [11, 21] </ref> only on tree-decompositions with treewidth at most k + 1, at the cost of increasing the running time to O (n log n). Provided that the algorithm in [11, 21] can be implemented quick enough, this modification may well be quite practical for small values of k (like k <p> It is also possible to modify the algorithm, such that it uses the algorithm in <ref> [11, 21] </ref> only on tree-decompositions with treewidth at most k + 1, at the cost of increasing the running time to O (n log n). Provided that the algorithm in [11, 21] can be implemented quick enough, this modification may well be quite practical for small values of k (like k = 4 or k = 5). <p> Now (Y; T ), defined by Y i = fv 2 v j f M 0 2 X i g is a tree-decomposition of the graph, obtained from G by contracting all edges in M M 0 with treewidth at most k + 1. Use the algorithm from <ref> [11, 21] </ref> to find a tree-decomposition of treewidth at most k of this graph. Repeat the process with this last tree-decomposition, and edge set M M 0 until the edge set is empty.
Reference: [22] <author> J. Lagergren. </author> <title> Efficient parallel algorithms for tree-decomposition and related problems. </title> <booktitle> In Proceedings of the 31rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 173-182, </pages> <year> 1990. </year>
Reference-contexts: In [8] (using results from [19]) it was shown that the non constructive elements can be avoided using self-reduction without increasing the running time by more than a (huge) constant factor. Both Lagergren <ref> [22] </ref> and Reed [25] improve on the `first step'. Lagergren gives a sequential algorithm that uses O (n log 2 n) time, and a parallel algorithm that uses O (n) processors and O (log 3 n) time.
Reference: [23] <author> J. Lagergren and S. Arnborg. </author> <title> Finding minimal forbidden minors using a finite congruence. </title> <booktitle> In Proceedings of the 18th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 533-543. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 510, </volume> <year> 1991. </year>
Reference-contexts: They all are based upon finding `balanced separators' in some clever ways. Our algorithm uses a different approach: we reduce the problem in linear time to a problem on a smaller graph by edge contraction or removing `simplicial vertices'. Independently, Lagergren and Arnborg <ref> [23] </ref> and Bodlaender and Kloks [11, 21] showed that the `second step' can be done without use of graph minors, and give explicit algorithms to test in linear time whether G has treewidth at most k, once a tree-decomposition of G with bounded treewidth is available.
Reference: [24] <author> J. Matousek and R. Thomas. </author> <title> Algorithms finding tree-decompositions of graphs. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 1-22, </pages> <year> 1991. </year>
Reference-contexts: The problem `Given a graph G = (V; E) and an integer k, is the treewidth of G at most k' is NP-complete [3]. Much work has been done on this problem for constant k. For k = 1; 2; 3, linear time algorithms exist <ref> [24] </ref>. Arnborg et al. [3] showed that the problem is solvable in O (n k+2 ) time for constant k. Then, Robertson and Seymour gave a non-constructive proof of the existence of O (n 2 ) decision algorithms [28]. <p> A related probabilistic result (with running time O (n log 2 n + nj log pj), p the error of probability) was found by Matousek and Thomas <ref> [24] </ref>. Each of these algorithms either determines that the input graph G has treewidth more than k, or finds a tree-decomposition of G with treewidth bounded by some constant (linear in k). They all are based upon finding `balanced separators' in some clever ways.
Reference: [25] <author> B. Reed. </author> <title> Finding approximate separators and computing tree-width quickly. </title> <booktitle> In Proceedings of the 24th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 221-228, </pages> <year> 1992. </year>
Reference-contexts: So far, this step dominated the running time of most algorithms, as the second step (some kind of `dynamic programming' algorithm using the tree-decomposition) usually costs only linear time. The best algorithm known so far for this `first step' was an algorithm by Reed <ref> [25] </ref>, which costs O (n log n). In this paper, we improve on this result, and give a linear time algorithm. The problem `Given a graph G = (V; E) and an integer k, is the treewidth of G at most k' is NP-complete [3]. <p> In [8] (using results from [19]) it was shown that the non constructive elements can be avoided using self-reduction without increasing the running time by more than a (huge) constant factor. Both Lagergren [22] and Reed <ref> [25] </ref> improve on the `first step'. Lagergren gives a sequential algorithm that uses O (n log 2 n) time, and a parallel algorithm that uses O (n) processors and O (log 3 n) time.
Reference: [26] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. II. Algorithmic aspects of tree-width. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 309-322, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction 1.1 Background The notions of `tree-decomposition' and `treewidth' have received much attention recently, not in the least due to the important role they play in the deep results on graph minors by Robertson and Seymour (see e.g. <ref> [26, 27, 29, 30, 28] </ref>, and many other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, <p> It follows that the algorithm uses linear time. 3 2 Definitions and preliminary results The notion of treewidth was introduced by Robertson and Seymour <ref> [26] </ref>. Definition.
Reference: [27] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. V. Excluding a planar graph. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 41 </volume> <pages> 92-114, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction 1.1 Background The notions of `tree-decomposition' and `treewidth' have received much attention recently, not in the least due to the important role they play in the deep results on graph minors by Robertson and Seymour (see e.g. <ref> [26, 27, 29, 30, 28] </ref>, and many other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k,
Reference: [28] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XIII. The disjoint paths problem. </title> <type> Manuscript, </type> <year> 1986. </year>
Reference-contexts: 1 Introduction 1.1 Background The notions of `tree-decomposition' and `treewidth' have received much attention recently, not in the least due to the important role they play in the deep results on graph minors by Robertson and Seymour (see e.g. <ref> [26, 27, 29, 30, 28] </ref>, and many other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, <p> For k = 1; 2; 3, linear time algorithms exist [24]. Arnborg et al. [3] showed that the problem is solvable in O (n k+2 ) time for constant k. Then, Robertson and Seymour gave a non-constructive proof of the existence of O (n 2 ) decision algorithms <ref> [28] </ref>. Actually, this algorithm is of a `two steps' form, as described above. <p> The first step is to apply an O (n 2 ) algorithm, that either outputs that the treewidth of G is larger than k, or outputs a tree-decomposition with treewidth at most 4k. (Actually, the result is stated in <ref> [28] </ref> in terms of `branchwidth', but this is an unimportant technical difference.) The second step checks in linear time a finite characterization of the graphs with treewidth at most k in terms of forbidden minors. <p> One of the most notable of such results is the following. Theorem 6.1 Every class of graphs that is closed under taking of minors and does not contain all planar graphs has a linear time recognition algorithm. Proof: See e.g. <ref> [28] </ref>.
Reference: [29] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. IV. Tree-width and well-quasi-ordering. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 48 </volume> <pages> 227-254, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction 1.1 Background The notions of `tree-decomposition' and `treewidth' have received much attention recently, not in the least due to the important role they play in the deep results on graph minors by Robertson and Seymour (see e.g. <ref> [26, 27, 29, 30, 28] </ref>, and many other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k,
Reference: [30] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. X. Obstructions to tree-decomposition. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 52 </volume> <pages> 153-190, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction 1.1 Background The notions of `tree-decomposition' and `treewidth' have received much attention recently, not in the least due to the important role they play in the deep results on graph minors by Robertson and Seymour (see e.g. <ref> [26, 27, 29, 30, 28] </ref>, and many other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k,
Reference: [31] <author> P. Sche*er. </author> <title> Die Baumweite von Graphen als ein Ma fur die Kompliziertheit algorithmischer Probleme. </title> <type> PhD thesis, </type> <institution> Akademie der Wissenschaften der DDR, </institution> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC
Reference: [32] <editor> J. van Leeuwen. </editor> <booktitle> Graph algorithms. In Handbook of Theoretical Computer Science, A: Algorithms and Complexity Theory, </booktitle> <pages> pages 527-631, </pages> <address> Amsterdam, 1990. </address> <publisher> North Holland Publ. </publisher> <address> Comp. </address> <month> 16 </month>
Reference-contexts: We use (X; T ) as a shorthand notation for (fX i j i 2 Ig; T = (I; F )). There are several equivalent notions, e.g. a graph is a partial k-tree, if and only if its treewidth is at most k <ref> [32] </ref>. We give some well known or easily derivable results. Lemma 2.1 If the treewidth of G = (V; E) is at most k, then jEj kjV j 1 2 k (k+1).
Reference: [33] <author> T. V. Wimer. </author> <title> Linear Algorithms on k-Terminal Graphs. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Clemson University, </institution> <year> 1987. </year> <month> 17 </month>
Reference-contexts: other papers in this series). (See also [20].) Also, many graph problems, including a very large number of well known NP-hard problems, have been shown to be linear time solvable on graphs that are given together with a tree-decomposition of treewidth at most k, for constant k. (See, amongst others <ref> [2, 5, 6, 7, 11, 9, 13, 14, 15, 31, 33] </ref>.) The first step of algorithms that exploit small treewidth of input graphs is to find a tree-decomposition with treewidth bounded by a constant, although possible fl This work was partially supported by the ESPRIT Basic Research Actions of the EC
References-found: 33

