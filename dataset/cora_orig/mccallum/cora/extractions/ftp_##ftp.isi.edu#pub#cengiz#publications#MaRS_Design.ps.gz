URL: ftp://ftp.isi.edu/pub/cengiz/publications/MaRS:Design.ps.gz
Refering-URL: http://www.isi.edu/~cengiz/publications/
Root-URL: http://www.isi.edu
Title: Design and Implementation of MaRS: A Routing Testbed  Summary  
Author: Cengiz Alaettinoglu, A. Udaya Shankar Klaudia Dussa-Zieger, Ibrahim Matta 
Keyword: Computer networks, routing protocols, performance analysis, modeling, discrete-event simulation.  
Note: Also with  
Date: September 1992. Revised June 1993. Revised November 1993.  
Address: College Park, Maryland 20742  College Park, MD 20742.  
Affiliation: Department of Computer Science University of Maryland  Institute for Advanced Computer Studies, University of Maryland,  
Abstract: MaRS is a discrete-event simulation testbed for developing routing algorithms for wide-area computer networks. It was developed as a modified and enhanced version of an existing simulator, NetSim. MaRS allows the user to define a network configuration consisting of physical network, routing algorithm and workload. The user can control its simulation, log the values of selected parameters, and save, load and modify network configurations. MaRS provides both steady-state and instantaneous performance measures to facilitate the study of the complex dynamics that arises in routing systems (due to delayed feedback). We have used MaRS to evaluate and compare several next-hop routing algorithms. fl This work is supported in part by Rome Labs and DARPA under contract F30602-90-C-0010 to UMIACS at the University of Maryland, and by National Science Foundation Grant No. NCR 89-04590. The views, opinions, and/or findings contained in this report are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency, RADC, or the U.S. Government. Computer facilities were provided in part by NSF grant CCR-8811954. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.U. Shankar, C. Alaettinoglu, I. Matta, and K. Dussa-Zieger. </author> <title> Performance Comparison of Routing Protocols using MaRS: Distance-Vector versus Link-State. </title> <booktitle> In Proc. ACM SIGMET-RICS/PERFORMANCE, </booktitle> <volume> volume 20, </volume> <pages> pages 181-192, </pages> <address> Newport, Rhode Island, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: The dynamics of such systems can be very complex due to the distributed nature of the network and the delayed feedback between route changes and link cost changes <ref> [1] </ref> (see below). A testbed is essential to understanding their performance. We have built such a testbed, called MaRS (Maryland Routing Simulator), and this paper describes its design and implementation. MaRS is developed as a modified and enhanced version of NetSim. <p> As described earlier, a routing algorithm may form loops in its routes while adapting to topology changes, which degrades performance. In <ref> [1, 17] </ref>, we compared the performance of two new distance-vector routing algorithms, SEGAL [10, 11] and ExBF [9], and a link-state algorithm, SPF [8]. <p> In case of a failure, affected nodes reset their next-hops to nil during the diffusion computation.) In <ref> [1] </ref>, we considered the NSFNET-T1-backbone network with varying uniform and skewed workloads and failure distributions. Our overall conclusion was that ExBF is as good as SPF for good link cost functions, whereas SEGAL is worse.
Reference: [2] <author> Lee Breslau. </author> <title> Electronic mail, </title> <month> October </month> <year> 1991. </year> <institution> Department of Computer Science, University of Southern California. </institution>
Reference-contexts: The first release was in June 1991. There is a mailing list, mars-users@cs.umd.edu 1 , for discussing MaRS related issues. Currently there are around fifty subscribers on the mailing list, some of who are actively using MaRS (e.g. <ref> [2] </ref>). The rest of the paper is organized as follows. Section 2 motivates the desired features and describes our implementation considerations. Section 3 describes the structure and the components 1 To subscribe to this list send mail to mars-users-request@cs.umd.edu. 1 of MaRS. Section 4 describes the user interfaces of MaRS.
Reference: [3] <author> J. M. McQuillan, G. Falk, and I. Richer. </author> <title> A Review of the Development and Performance of the ARPANET Routing Algorithm. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-26:1802-1811, </volume> <month> Dec </month> <year> 1978. </year>
Reference-contexts: This degrades performance since all packets sent from A to C will be returned back until A receives and processes the information that the link hC; Di is down. The duration of the loop depends on the routing algorithm. In fact, some of the first routing algorithms <ref> [3] </ref> would allow C to set its next-hop to A even if there is no path to D through A, and furthermore allow the loop to stay forever. Once A learns that link hC; Di is down, it sets its next-hop to B. <p> There are routing algorithms which (1) allow long-lived loops, (2) allow only short-lived loops (as in the example), and (3) do not allow any loops. It is well known that allowing long-lived loops severely degrades performance <ref> [3] </ref>. However, it is not clear whether avoiding loops completely is superior to allowing only short-lived loops. This is because routing algorithms that avoid loops completely usually require nodes to use old next-hops or have no next-hops during the period when new (loop-free) routes are calculated.
Reference: [4] <author> A. Heybey. </author> <title> The Network Simulator. </title> <institution> Laboratory of Computer Science, Massachusetts Institute of Technology, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: We chose discrete-event simulation over process emulation because it offers the greatest flexibility in modeling the target system. In order to reduce programming work, we examined three discrete-event simulators that were available to us: NetSim from MIT <ref> [4] </ref>; COMNET II.5 from CACI Products Company [5]; and DeNet (Discrete Event Network) from University of Wisconsin-Madison [6]. NetSim is designed for simulating a network of message-passing components. It is written in C and runs under UNIX and X windows. COMNET II.5 is a commercial package similar to NetSim.
Reference: [5] <author> CACI Products Company. </author> <title> COMNET II.5 Overview. Available from CACI Products Company, </title> <month> March </month> <year> 1990. </year>
Reference-contexts: We chose discrete-event simulation over process emulation because it offers the greatest flexibility in modeling the target system. In order to reduce programming work, we examined three discrete-event simulators that were available to us: NetSim from MIT [4]; COMNET II.5 from CACI Products Company <ref> [5] </ref>; and DeNet (Discrete Event Network) from University of Wisconsin-Madison [6]. NetSim is designed for simulating a network of message-passing components. It is written in C and runs under UNIX and X windows. COMNET II.5 is a commercial package similar to NetSim.
Reference: [6] <author> M. Livny. </author> <title> DeNet Overview. </title> <type> Technical note, </type> <institution> University of Madison-Wisconsin, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: In order to reduce programming work, we examined three discrete-event simulators that were available to us: NetSim from MIT [4]; COMNET II.5 from CACI Products Company [5]; and DeNet (Discrete Event Network) from University of Wisconsin-Madison <ref> [6] </ref>. NetSim is designed for simulating a network of message-passing components. It is written in C and runs under UNIX and X windows. COMNET II.5 is a commercial package similar to NetSim. DeNet is a general purpose simulator that simulates a set of communicating objects. It is written in Modula2.
Reference: [7] <author> W. A. Parrette. </author> <title> Motif Programming in the X Window System Environment. </title> <publisher> McGraw-Hill, </publisher> <year> 1993. </year>
Reference-contexts: In building MaRS, we replaced all the components that came with NetSim with our own components. We used the simulation engine of NetSim, but with extensive modifications. We built a much nicer new graphical user interface using Motif <ref> [7] </ref>. We kept the old X interface of NetSim for users of MaRS that do not have Motif, but did extensive modifications to the interface code. In implementing our components, we used the same programming structure as in NetSim.
Reference: [8] <author> J. M. McQuillan, I. Richer, and E. C. Rosen. </author> <title> The New Routing Algorithm for the ARPANET. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-28(5):711-719, </volume> <month> May </month> <year> 1980. </year>
Reference-contexts: For modeling the physical nodes and links of the target system, MaRS has link components and node components. For modeling routing protocols, MaRS has a link-cost function component and three routing components, SPF, ExBF, and SEGAL, corresponding to three different routing algorithms <ref> [8, 9, 10, 11] </ref>. For modeling application and transport protocols (e.g. user traffic and flow control), MaRS has three types of workload components, FTP, TELNET, and Simple Traffic, corresponding to three different types of user traffic. Each type of workload component has two versions, a source and a sink. <p> As described earlier, a routing algorithm may form loops in its routes while adapting to topology changes, which degrades performance. In [1, 17], we compared the performance of two new distance-vector routing algorithms, SEGAL [10, 11] and ExBF [9], and a link-state algorithm, SPF <ref> [8] </ref>. SPF and ExBF allow short-lived loops, whereas MS avoids loops entirely. (In response to a workload or topology change, to avoid loops MS starts a diffusion computation during which 25 nodes keep their old routes until they obtain new loop-free routes.
Reference: [9] <author> C. Cheng, R. Riley, S. P. R. Kumar, and J. J. Garcia-Luna-Aceves. </author> <title> A Loop-free Bellman-Ford Routing Protocol Without Bouncing Effect. </title> <booktitle> In Proc. ACM SIGCOMM '89, </booktitle> <pages> pages 224-237, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: For modeling the physical nodes and links of the target system, MaRS has link components and node components. For modeling routing protocols, MaRS has a link-cost function component and three routing components, SPF, ExBF, and SEGAL, corresponding to three different routing algorithms <ref> [8, 9, 10, 11] </ref>. For modeling application and transport protocols (e.g. user traffic and flow control), MaRS has three types of workload components, FTP, TELNET, and Simple Traffic, corresponding to three different types of user traffic. Each type of workload component has two versions, a source and a sink. <p> As described earlier, a routing algorithm may form loops in its routes while adapting to topology changes, which degrades performance. In [1, 17], we compared the performance of two new distance-vector routing algorithms, SEGAL [10, 11] and ExBF <ref> [9] </ref>, and a link-state algorithm, SPF [8]. SPF and ExBF allow short-lived loops, whereas MS avoids loops entirely. (In response to a workload or topology change, to avoid loops MS starts a diffusion computation during which 25 nodes keep their old routes until they obtain new loop-free routes.
Reference: [10] <author> P. M. Merlin and A. Segall. </author> <title> A Failsafe Distributed Routing Protocol. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-27(9):1280-1287, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: For modeling the physical nodes and links of the target system, MaRS has link components and node components. For modeling routing protocols, MaRS has a link-cost function component and three routing components, SPF, ExBF, and SEGAL, corresponding to three different routing algorithms <ref> [8, 9, 10, 11] </ref>. For modeling application and transport protocols (e.g. user traffic and flow control), MaRS has three types of workload components, FTP, TELNET, and Simple Traffic, corresponding to three different types of user traffic. Each type of workload component has two versions, a source and a sink. <p> As described earlier, a routing algorithm may form loops in its routes while adapting to topology changes, which degrades performance. In [1, 17], we compared the performance of two new distance-vector routing algorithms, SEGAL <ref> [10, 11] </ref> and ExBF [9], and a link-state algorithm, SPF [8].
Reference: [11] <author> A. Segall. </author> <title> Advances in Verifiable Fail-Safe Routing Procedures. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-29(4):491-497, </volume> <month> April </month> <year> 1981. </year>
Reference-contexts: For modeling the physical nodes and links of the target system, MaRS has link components and node components. For modeling routing protocols, MaRS has a link-cost function component and three routing components, SPF, ExBF, and SEGAL, corresponding to three different routing algorithms <ref> [8, 9, 10, 11] </ref>. For modeling application and transport protocols (e.g. user traffic and flow control), MaRS has three types of workload components, FTP, TELNET, and Simple Traffic, corresponding to three different types of user traffic. Each type of workload component has two versions, a source and a sink. <p> As described earlier, a routing algorithm may form loops in its routes while adapting to topology changes, which degrades performance. In [1, 17], we compared the performance of two new distance-vector routing algorithms, SEGAL <ref> [10, 11] </ref> and ExBF [9], and a link-state algorithm, SPF [8].
Reference: [12] <author> C. Alaettinoglu, K. Dussa-Zieger, I. Matta, and A. U. Shankar. </author> <title> MaRS (Maryland Routing Simulator) Version 1.0 User's Manual. </title> <type> Technical Report UMIACS-TR-91-80, </type> <institution> CS-TR-2687, Department of Computer Science, University of Maryland, College Park, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: The simulation engine can call events of a component in response to user interface commands (either from command line, input file, or mouse/keyboard). In the rest of this section, we briefly describe each type of component. Full details can be found in <ref> [12] </ref>. Link A link component models a bidirectional transmission channel between two nodes. It contains two queues of packets, each representing the packets in transit in one direction. A link can be subject to failure and repair, with up-times and down-times described by (probability) distributions. <p> The simple X interface <ref> [12] </ref> is almost entirely mouse-driven. The display is divided into three parts: control section, network display, and text window. <p> Time history A displays the parameter value periodically versus time, whereas time history D displays the value (versus time) only when the parameter value changes. The text meter is used to display various tables such as routing tables. A detailed description of all meters can be found in <ref> [12] </ref>. The meter type and meter parameters can be changed by clicking on the meter and entering the new values. The meter window can be moved, resized, raised and lowered by clicking the appropriate mouse buttons.
Reference: [13] <author> A. Khanna and J. Zinky. </author> <title> A Revised ARPANET Routing Metric. </title> <booktitle> In Proc. ACM SIGCOMM '89, </booktitle> <pages> pages 45-56, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: The raw cost usually reflects the load on the link. MaRS currently supports the following raw link-cost functions: hop-count, utilization, (queueing and propagation) delay, and hop-normalized delay <ref> [13] </ref>. MaRS currently provides a transformation that includes exponential averaging, scaling with a slope and an offset, minimum and maximum bounds, and movement limit. Parameters include the link-cost update period and parameters of the transformation. Routing The routing component instances execute a routing algorithm. <p> We compare SPF, MS and ExBF by examining the behavior after a link failure (at time 100 seconds) and repair (at time 200 seconds). The failure link is indicated in Figure 12. The link cost function used in this paper is the hop-normalized-delay function <ref> [13] </ref>. 4 4 It monitors the average packet delay (queueing and transmission) and average packet transmission time for the link during the last update period. Assuming an M=M=1 model, it calculates the link utilization. The link utilization is first exponentially averaged with the previous value of the average link utilization.
Reference: [14] <author> Eric Bull. </author> <title> MaRS (Maryland Routing Simulator) Version 2.0 X-Motif Interface Manual. </title> <note> Available by anonymous ftp at ftp.cs.umd.edu:pub/MaRS, </note> <month> August </month> <year> 1992. </year>
Reference-contexts: Parameter values of a component can be logged into a file or displayed with a meter. The text window is used to enter parameter values and to display error messages and warnings. The X-Motif interface <ref> [14] </ref> provides some additional functionality over the simple X interface. Components can be clustered and displayed as groups. The grouping option provides the user with the possibility to display a more structured network, e.g. a hierarchical network.
Reference: [15] <author> C. Alaettinoglu, K. Dussa-Zieger, I. Matta, O. Gudmundsson, and A. U. Shankar. </author> <title> MaRS (Maryland Routing Simulator) Version 1.0 Programmer's Manual. </title> <type> Technical Report UMIACS-TR-91-107, </type> <institution> CS-TR-2723, Department of Computer Science, University of Maryland, College Park, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: For brevity, we describe the highlights only. In many places, we replace C code by English sentences, omit variables, and use different but more descriptive names for variables. A more complete (and accurate) description of a routing component implementation can be found in <ref> [15] </ref>. We first describe the SPF routing protocol. Each node maintains a view of the network topology with a cost for each link.
Reference: [16] <author> E. Dijkstra. </author> <title> A Note on Two Problems in Connection with Graphs. </title> <journal> Numer. Math., </journal> <volume> 1 </volume> <pages> 269-271, </pages> <year> 1959. </year>
Reference-contexts: As a node receives this information, it updates its view of the network topology and applies Dijkstra's shortest path algorithm <ref> [16] </ref> to choose its next-hop for each destination. Note that because of the store-and-forward nature of the network, a node may receive old link cost information after it has received new information.
Reference: [17] <author> C. Alaettinoglu, A. U. Shankar, K. Dussa-Zieger, and I. Matta. </author> <title> Responsiveness of Routing Protocols to Link Failures and Repairs. </title> <type> Technical Report UMIACS-TR-92-76, </type> <institution> CS-TR-2928, Department of Computer Science, University of Maryland, College Park, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: As described earlier, a routing algorithm may form loops in its routes while adapting to topology changes, which degrades performance. In <ref> [1, 17] </ref>, we compared the performance of two new distance-vector routing algorithms, SEGAL [10, 11] and ExBF [9], and a link-state algorithm, SPF [8]. <p> Our overall conclusion was that ExBF is as good as SPF for good link cost functions, whereas SEGAL is worse. In <ref> [17] </ref>, we examined the relationship between "workload-independent" measures (such as number of messages needed to adapt routes after a link failure) and "workload-dependent" measures (such as delay and throughput). We examined both transient characteristics and steady-state characteristics. <p> We examined both transient characteristics and steady-state characteristics. Our overall observation was that workload-independent measures are not good indicators of workload-dependent measures. In the rest of this section, we present some of our results from <ref> [17] </ref>. The physical network models the NSFNET-T1-Backbone illustrated in Figure 12. Link propagation delays in milliseconds are indicated. All links have the same bandwidth, 1.5Mbit/sec. All nodes have adequate buffer space for buffering packets awaiting processing and forwarding. Workload packets can be processed in parallel.
Reference: [18] <author> I. Matta and A.U. Shankar. </author> <title> Type-Of-Service in Adaptive Next-Hop Routing. </title> <type> Technical Report CS-TR-2963, </type> <institution> Department of Computer Science, University of Maryland, College Park, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: This implies that short-lived loops are preferable. 8 Concluding Remarks MaRS provides a flexible platform for the evaluation and comparison of routing algorithms. Several people are extending MaRS in various ways. It has been extended <ref> [18] </ref> to study type-of-service routing with two traffic classes: minimum delay and maximum bandwidth. For each outgoing link, there are two queues, one for each traffic class; a round-robin scheduling discipline is used to share the link between the two queues.
Reference: [19] <author> Danny J. Mitzel. </author> <title> Electronic mail, </title> <month> October </month> <year> 1992. </year> <institution> Department of Computer Science, University of Southern California. </institution>
Reference-contexts: For each outgoing link, there are two queues, one for each traffic class; a round-robin scheduling discipline is used to share the link between the two queues. The routing table is modified to maintain different routes for each traffic class. MaRS is being extended <ref> [19] </ref> to study multicasting. There is also recent work in building a commercial routing testbed based on MaRS [20].
Reference: [20] <author> Sam Steppel. </author> <title> Private Communication. Computer Sciences Corporation. 30 Figure 13: Resp onsiv eness to link failure and repair for B 1 and H 4. Eac h curv e a erage of exp eriemn ts. Figure 14: Resp onsiv eness to link failure and repair for B 1 and H 7. </title>
Reference-contexts: The routing table is modified to maintain different routes for each traffic class. MaRS is being extended [19] to study multicasting. There is also recent work in building a commercial routing testbed based on MaRS <ref> [20] </ref>. The memory required by MaRS to simulate a network is linear in the number of nodes and links, the number of connections, and the number of packets in transit; the latter is limited by the number of connections and the window size.
References-found: 20

