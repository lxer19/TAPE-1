URL: ftp://ftp.cs.virginia.edu/pub/techreports/IPC-92-04.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Multiple Inheritance and the Closure of Set Operators in Class Hierarchies  
Author: John L. Pfaltz James C. French 
Note: This research was supported in part by DOE Grant #DE-FG05-88ER25063 and JPL Contract #957721  
Address: Charlottesville, VA 2290l  
Affiliation: Institute for Parallel Computation School of Engineering and Applied Science University of Virginia  
Date: June 25, 1992  
Pubnum: IPC-TR-92-004  
Abstract-found: 0
Intro-found: 0
Reference: [AbH87] <author> S. Abiteboul and R. Hull, </author> <title> IFO: A Formal Semantic Database Model, </title> <journal> Trans. </journal> <note> Database Systems 12,4 (Dec. </note> <year> 1987), </year> <pages> 525-565. </pages>
Reference: [Ada85] <author> T. Adachi, Powerposets, </author> <title> Inf. </title> <booktitle> and Control 66(1985), </booktitle> <pages> 138-162. </pages>
Reference-contexts: Note that the class hierarchy automatically becomes a lattice of data types as described in [Sco76], or more particularly a semi-lattice structure as described in <ref> [Ada85] </ref>, if one does not assume that the least upper bound of two classes need exist, and a distributive lattice if one assumes a universal super class with no attributes or predicates, together with the implicit definition of all intersection classes. 4.
Reference: [ACO85] <author> A. Albano, L. Cardelli and R. Orsini, </author> <title> Galileo: A Strongly Typed Interactive Conceptual Lanugage, </title> <journal> Trans. Database Systems 10,2 (June 1985), </journal> <pages> 230-260. </pages>
Reference-contexts: Since if x.E i is true, x.E k must be true by implication, the second containment follows immedi ately ` The inversion of containments of the first assertion has also been noted in <ref> [ACO85] </ref>. The compass of a class expression, comp (C ), is then just the class itself, since any x in comp (C ) must have all f i F C associated with it, and must also satisfy any restricting expression E .
Reference: [AtB87] <author> M. P. Atkinson and O. P. Buneman, </author> <title> Types and Persistence in Database Programming Languages, </title> <journal> Computing Surveys 19,2 (June 1987), </journal> <pages> 105-190. </pages>
Reference-contexts: We require a class constructor of type SET which defines a new class, denoted by S [C ], of sets whose elements belong to the class C . Many type theories introduce class constructors based on Cartesian product (for tuples) [HuK87] or disjoint sum (for variant records) <ref> [AtB87] </ref>. It is our belief that class extension using a set constructor is conceptually simpler. It may be the case that F S [C ] = ; although a subclass of S [C ] might have attribute functions associated with the set as a whole, distinct from the individual elements.
Reference: [Bra83] <author> R. J. Brachman, </author> <title> What IS-A Is and Isn't: An Analysis of Taxonomic Links in Semantic Networks, </title> <booktitle> COMPUTER 16,10 (Oct. </booktitle> <year> 1983), </year> <pages> 30-36. </pages>
Reference-contexts: All entities in the class, for example the class PERSON, will share common properties, such as name, home_address, age, and social_security_number. We will also assume the existence of subclasses. Most semantic and object-oriented databases use an IS_A construct to support the concept of class and subclass. Brachman <ref> [Bra83] </ref> correctly notes that inheritance as defined by the IS_A construct is really little more than convenient syntactic shorthand for incrementally creating subclasses, so we will ignore actual inheritance mechanisms per se.
Reference: [Car84] <author> L. Cardelli, </author> <title> A Semantics of Multiple Inheritance, in Semantics of Data Types, </title> <booktitle> Lecture Notes in CS 173, </booktitle> <publisher> Springer Verlag , June 1984, </publisher> <pages> 51-67. </pages>
Reference-contexts: E n ). A similar semi-lattice of set-class declarations, and possibly of set-set-class declarations must also be maintained. 4) In view of 3) above, a form of multiple inheritance induced by the formation of intersection classes is required. But it need not be of the generality described in <ref> [Car84] </ref> or [Tou86]. We believe that these represent minimal characteristics which must be present in any entity, or object based, database implementation whose class hierarchy is defined by specialization, or subclass declaration. These characteristics can be implemented [PFG91].
Reference: [CaW85] <author> L. Cardelli and P. Wegner, </author> <title> On Understanding Types, Data Abstraction, and Polymorphism, </title> <journal> Computing Surveys 17,4 (1985), </journal> <pages> 471-522. 12 </pages>
Reference-contexts: Cardelli and Wegner call this inclusion polymorphism in <ref> [CaW85] </ref>. Entities of type doctor can always be regarded as being of the form PERSON. Similarly, the concept of the intersection of a set of doctors and patients to denote those persons who are both DOCTORS and PATIENTS also makes polymorphic sense.
Reference: [Che76] <author> P. P. Chen, </author> <title> The Entity-Relationship Model---Toward a Unified View of Data, </title> <journal> Trans. Database Systems 1,1 (Mar. </journal> <year> 1976), </year> <pages> 9-36. </pages>
Reference: [GoR83] <author> A. Goldberg and D. Robson, </author> <title> Smalltalk-80: The Language and Its Implementation, </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: all conceivable x over which all of the f i F are defined and x.E is true, whether instantiated or not. 1 It will be convenient to refine the idea of a conceptual set of possible entities by introducing a formalism called compass . hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 1 In some object-oriented implementations <ref> [GoR83, Kim89] </ref>, the class (through its class manager) also denotes all actually instantiated elements as well. 5 By the compass of an expression, denoted comp (exp), we mean the conceptual set of all entities which could possibly satisfy the expression; that is, the abstract set of all entities which could be
Reference: [HuK87] <author> R. Hull and R. King, </author> <title> Semantic Database Modeling: Survey, Applications, and Research Issues, </title> <journal> Computing Surveys 19,3 (Sep. </journal> <year> 1987), </year> <pages> 201-260. </pages>
Reference-contexts: We require a class constructor of type SET which defines a new class, denoted by S [C ], of sets whose elements belong to the class C . Many type theories introduce class constructors based on Cartesian product (for tuples) <ref> [HuK87] </ref> or disjoint sum (for variant records) [AtB87]. It is our belief that class extension using a set constructor is conceptually simpler.
Reference: [KhC86] <author> S. N. Khoshafian and G. P. Copeland, </author> <title> Object Identity, </title> <booktitle> OOPSLA '86, Conf. Proc., </booktitle> <month> Sep. </month> <year> 1986, </year> <pages> 406-416. </pages>
Reference-contexts: This is impossible in the relational model, in which any two tuples belonging to a single relation r with schema F R must at least differ over some set of key attributes K F R . Khoshafian and Copeland give a general discussion of object identity in <ref> [KhC86] </ref>. Some of the issues encountered in implementing an entity naming paradigm are discussed in [PFW88]. In this report, the precise mechanism used to identify entities is not at issue. In the entity database model, one deals with sets of entities.
Reference: [Kim89] <author> W. Kim, </author> <title> A Model of Queries for Object-Oriented Databases, </title> <booktitle> Proc. 15th Conf. on VLDB , Amsterdam, </booktitle> <month> Aug. </month> <year> 1989, </year> <pages> 423-432. </pages>
Reference-contexts: all conceivable x over which all of the f i F are defined and x.E is true, whether instantiated or not. 1 It will be convenient to refine the idea of a conceptual set of possible entities by introducing a formalism called compass . hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 1 In some object-oriented implementations <ref> [GoR83, Kim89] </ref>, the class (through its class manager) also denotes all actually instantiated elements as well. 5 By the compass of an expression, denoted comp (exp), we mean the conceptual set of all entities which could possibly satisfy the expression; that is, the abstract set of all entities which could be
Reference: [PeM88] <author> J. Peckham and F. Maryanski, </author> <title> Semantic Data Models, </title> <journal> Computing Surveys 20,3 (Sep. </journal> <year> 1988), </year> <pages> 153-190. </pages>
Reference: [PFW88] <author> J. L. Pfaltz, J. C. French and J. L. Whitlatch, </author> <title> Scoping Persistent Name Spaces in ADAMS, </title> <institution> IPC TR-88-003, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: Khoshafian and Copeland give a general discussion of object identity in [KhC86]. Some of the issues encountered in implementing an entity naming paradigm are discussed in <ref> [PFW88] </ref>. In this report, the precise mechanism used to identify entities is not at issue. In the entity database model, one deals with sets of entities.
Reference: [PSF88] <author> J. L. Pfaltz, S. H. Son and J. C. </author> <title> French, The ADAMS Interface Language, </title> <booktitle> Proc. 3th Conf. on Hypercube Concurrent Computers and Applications, </booktitle> <address> Pasadena, CA, </address> <month> Jan. </month> <year> 1988, </year> <pages> 1382-1389. </pages>
Reference-contexts: The preceding intuitive introduction to classes, subclasses, and a class hierarchy in the entity database model can be made more formal. Let F = - f i denote a set of functions associated with a particular 2 class C . Following the syntax used in ADAMS <ref> [PSF88] </ref> we will use the expression x.f i to denote the image of x under f i . For all x C the attribute expression x.f i is said to be meaningful for any f i F , even though its actual value, or image, may as yet be undefined.
Reference: [Pfa88] <author> J. L. Pfaltz, </author> <title> Implementing Set Operators Over a Semantic Hierarchy, </title> <institution> IPC TR-88-004, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: However, C 12 :(F 1 F 2 ,E ) C 0 :(F 0 ,E 0 ) 8 there are practical reasons for not supporting generalization as a mechanism for creating new classes, c.f. <ref> [Pfa88] </ref>. All object-oriented, and many semantic, database systems, including ADAMS, only allow the creation of new classes through specialization, or subclass declaration. In this context there is yet a fourth option for specifying the implementation semantics of the union operator that is also logically consistent, although not completely general.
Reference: [PFG91] <author> J. L. Pfaltz, J. C. French and A. Grimshaw, </author> <title> An Introduction to the ADAMS Interface Language: Part I, </title> <institution> IPC TR-91-06, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: But it need not be of the generality described in [Car84] or [Tou86]. We believe that these represent minimal characteristics which must be present in any entity, or object based, database implementation whose class hierarchy is defined by specialization, or subclass declaration. These characteristics can be implemented <ref> [PFG91] </ref>. More general implementations, such as one which would support generalization, or equivalently the complete closure of the union operator, seem possible, but computationally complex.
Reference: [Sco76] <author> D. S. Scott, </author> <title> Data Types as Lattices, </title> <journal> Siam J. on Computing 5,3 (Sep. </journal> <year> 1976), </year> <pages> 522-587. </pages>
Reference-contexts: To prevent a proliferation of unnecessary class definitions, in ADAMS, we defer actual creation of intersection classes until at least one entity will become a member of the class. Note that the class hierarchy automatically becomes a lattice of data types as described in <ref> [Sco76] </ref>, or more particularly a semi-lattice structure as described in [Ada85], if one does not assume that the least upper bound of two classes need exist, and a distributive lattice if one assumes a universal super class with no attributes or predicates, together with the implicit definition of all intersection classes.
Reference: [Shi81] <author> D. W. Shipman, </author> <title> The Functional Data Model and the Data Language DAPLEX, </title> <journal> Trans. Database Systems 6,1 (Mar. </journal> <year> 1981), </year> <pages> 140-173. </pages>
Reference-contexts: The image of f may be a value (e.g. printable string or icon), or some other entity. Permitting f to be set-valued as in DAPLEX <ref> [Shi81] </ref> will not alter the generality of our approach. In most database systems, classes are defined in terms of their associated attribute properties. But they can also be defined by imposing predicate restrictions on class membership.
Reference: [TYF86] <author> T. J. Teorey, D. Yang and J. P. Fry, </author> <title> A Logical Design Methodology for Relational Databases Using the Extended Entity-Relationship Model, </title> <journal> Computing Surveys 18,2 (June 1986), </journal> <pages> 197-222. </pages>
Reference: [Tou86] <author> D. S. Touretzky, </author> <title> The Mathematics of Inheritance Systems, </title> <publisher> Morgan Kaufmann Publ., </publisher> <address> Los Altos, CA, </address> <year> 1986. </year>
Reference-contexts: A similar semi-lattice of set-class declarations, and possibly of set-set-class declarations must also be maintained. 4) In view of 3) above, a form of multiple inheritance induced by the formation of intersection classes is required. But it need not be of the generality described in [Car84] or <ref> [Tou86] </ref>. We believe that these represent minimal characteristics which must be present in any entity, or object based, database implementation whose class hierarchy is defined by specialization, or subclass declaration. These characteristics can be implemented [PFG91].
Reference: [Weg87] <author> P. Wegner, </author> <title> Dimensions of Object-Based Language Design, </title> <booktitle> Proc. OOPSLA '87, </booktitle> <month> Oct. </month> <year> 1987, </year> <pages> 168-182. </pages>
References-found: 22

