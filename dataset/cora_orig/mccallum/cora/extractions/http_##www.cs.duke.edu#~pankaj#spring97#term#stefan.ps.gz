URL: http://www.cs.duke.edu/~pankaj/spring97/term/stefan.ps.gz
Refering-URL: http://www.cs.duke.edu/~pankaj/spring97/cps234.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: CollisionDetection Techniques for3DModels CPS 243 Term Paper  
Author: Stefan Gottschalk 
Address: Chapel Hill, N.C. 6/15/97  
Affiliation: University of North Carolina  
Abstract-found: 0
Intro-found: 1
Reference: [Alonso94] <author> A. Garcia-Alonso, N Serrano, J. Flaquer. </author> <title> Solving the Collision Detection Problem. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 14, pp36-43, </volume> <year> 1994. </year>
Reference-contexts: For the models they tested, they found the best grid resolution ranged between 5 fi 5 fi 5 and 50 fi 50 fi 50. Garcia-Alonso et al. <ref> [Alonso94] </ref> also use a rectilinear grid to eliminate some of the polygon overlap tests. Each model is covered by a bounding box (which is oriented with the model), which is further subdivided into a regular grid of predetermined resolution. Grid cells hold a list of polygons which touch the cell.
Reference: [Baraff92] <author> D. Baraff. </author> <title> Dynamic Simulation of Non-Penetrating Rigid Body Simulation. </title> <type> PhD Thesis, </type> <institution> Cor-nell University, </institution> <year> 1992. </year>
Reference-contexts: This is noted in the PhD theses of both Lin [Lin93] and Baraff <ref> [Baraff92] </ref> and is used to exploit temporal coherence in successive distance queries between convex polytopes. The idea is that with successive time steps, the polytopes' closest points will move only a small distance on the surface of their respective polytopes (perhaps only to neighboring facets).
Reference: [Barnhill87] <author> R. E. Barnhill, G. Farin, M. Jordan, B. R. Piper. </author> <title> Surface/surface intersection. </title> <booktitle> Computer-Aided Geometric Design, </booktitle> <volume> Vol. 4, No. 1, </volume> <pages> pp. 3-16, </pages> <year> 1987. </year> <month> 16 </month>
Reference-contexts: At the intersection point on the surfaces, the intersection curve must be mutually orthogonal to the normals of the surfaces. Consequently, the vector field which the tracing point must follow is given by the cross product of the normals. Barnhill et al. <ref> [Barnhill87] </ref> use the isoparametric method for finding starting points, and then use the tracing method described above.
Reference: [Barnhill90] <author> R. E. Barnhill, S. N. Kersey. </author> <title> A marching method for parametric surface/surface intersection. </title> <booktitle> Computer-Aided Geometric Design, </booktitle> <volume> Vol. 7, No. 4, </volume> <pages> pp. 257-280, </pages> <year> 1990. </year>
Reference-contexts: Consequently, the vector field which the tracing point must follow is given by the cross product of the normals. Barnhill et al. [Barnhill87] use the isoparametric method for finding starting points, and then use the tracing method described above. Also, Barnhill and Kersey <ref> [Barnhill90] </ref> discuss improved tracing methods, and Mullenheiim [Mullenheim91] discusses a method for finding starting points for tracing. 10 5.1.3.4 Analytic Methods Analytic methods usually involve implicitizing one of the parametric surfaces obtaining an implicit representation of the same shape.
Reference: [Cameron91] <author> S. Cameron. </author> <title> Approximation hierarchies and S-bounds. </title> <booktitle> In Proceedings of the Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pp 129-137, </pages> <address> Austin, TX, </address> <month> 5-7 June, </month> <year> 1991. </year>
Reference-contexts: If the result is the null set, then the objects are disjoint, otherwise they touch. What is generally needed is efficient ways to compute whether an intersection yields the empty set or not. This is somtimes called the "Null Object Detector", or NOD. 5.1.1.1 S-Bounds Cameron <ref> [Cameron91] </ref> introduced "S-Bounds" as a means of speeding up intersection evaluation. As described earlier, points in space can be applied to the expression tree of a CSG object in order to yield the "in", "out", or "on" classification of the point.
Reference: [Cameron96] <author> S. Cameron. </author> <title> A Comparison of Two Fast Algorithms for Computing the Distance between Convex Polyhedra. </title> <note> Submitted to IEEE TR&A as a comminucations paper, </note> <month> July </month> <year> 1996. </year>
Reference-contexts: With small 12 motions between time steps, the walks will be short, of length O (1), leading to a constant time algorithm for successive distance queries. Cameron <ref> [Cameron96] </ref> later showed that the feature-pairs walk of Lin and the simplex walk of Gilbert et al. are essentially identical, and shows how a modification of the simplex walk can achieve similar O (1) complexity with temporal coherence. 5.1.5 Polygon Soups If the polygons defining the models have no particular structure,
Reference: [Chaz87] <author> B. Chazelle, D. P. Dobkin. </author> <title> Intersection of Convex Objects in Two and Three Dimensions. </title> <journal> Journal ACM, </journal> <volume> Vol 34, No 1, </volume> <pages> pp 1-27, </pages> <year> 1987. </year>
Reference: [Cohen95] <author> J. D. Cohen, M. C. Lin, D. Manocha, M. K. Ponamgi. I-COLLIDE: </author> <title> An Interactive and Exact Collision Detection System for Large-Scale Environments. </title> <booktitle> Proceedings of ACM Interactive 3D raphics Conference, </booktitle> <pages> pp. 189-196, </pages> <year> 1995. </year>
Reference-contexts: He computes the earliest value of t at which there can be a collision, and is able to make a time step to that moment. 5.2.0.3 Insertion Sort for Incremental Adjustments of Bounding Boxes The broad phase of the I-COLLIDE system presented by Cohen et al. <ref> [Cohen95] </ref> uses an insertion sort along three axis to track which boxes are overlapping. Two boxes overlap only if they overlap along all three axes. If the boxes' positions are shifted only slightly between time steps, then their ordering along the axes will change only a small amount.
Reference: [Dobkin83] <author> D. Dobkin, D. G. Kirkpatrick. </author> <title> Fast detection of polyhedral intersection. </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 27, No. 3, </volume> <month> pp241-253 </month>
Reference: [Duff92] <author> T. Duff. </author> <title> Interval arithmetic and recursive subdivision for implicit functions and constructive solid geometry. </title> <booktitle> Computer Graphics Proceedings. </booktitle> <pages> SIGGRAPH '92 pp. 131-138. </pages>
Reference-contexts: Cameron found that using S-Bounds increased the speed of intersection testing by one to two orders of magnitude on his CSG system. 5.1.1.2 Interval Arithmetic and CSG of Implicit Functions Duff <ref> [Duff92] </ref> employs interval arithmetic to evaluate implicit functions over box-like regions of space to determine whether the regions lie entirely inside, entirely outside, or potentially laying across the boundary of the implicit surfaces. This is the familiar point classification scheme extended to regions. <p> One of the most elegant is presented by John Snyder [Snyder92], who uses interval arithmetic to recursively subdivide the domain of the surface to refine an approximation of the intersection region until it is of satisfactory precision. This is very similar to the method Duff <ref> [Duff92] </ref> uses with implicit surfaces, but Snyder evaluates the parametric mapping f : R 2 7! R 3 over regions in the domain to obtain box-like regions in the range, that is, space. Snyder begins with two regions covering the entire domains of two parametric surfaces.
Reference: [Edelsbrunner83] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections. Part I. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> Vol 13, No. </volume> <pages> 3-4, pp. 209-219, </pages> <year> 1983. </year>
Reference-contexts: Edelsbrunner <ref> [Edelsbrunner83] </ref> presented a method which could report the intersecting pairs among n axis-aligned boxes in O (n log 3 n + k) time, where there are k pairs, requiring O (n log n) space.
Reference: [Farouki89] <author> R. T. Farouki, C. A. Neff, M. A. O'Connor. </author> <title> Automatic parsing of degenerate quadric-surface intersections. </title> <journal> ACM Transactions on Graphics, </journal> <volume> Vol. 8, No. 3, </volume> <pages> pp. 174-203, </pages> <year> 1989. </year>
Reference-contexts: It often arises that quadric surfaces are aligned so that their intersection is not a general fourth degree space curve (as it generically would be). When this occurs, degeneracies and rank-deficiencies cause conventional methods to fail. Farouki <ref> [Farouki89] </ref> introduces techniques to determine whether the configuration is nongeneric and if it is, what the structure of the intersection curves are. 5.1.3 Pairs of Parametric Surfaces There are fundamentally 4 methods for finding the intersection of two parametric surfaces: subdivision methods, lattice methods, tracing methods, and analytic methods.
Reference: [Gilbert88] <author> E. G. Gilbert, D. W. Johnson, S. S. Keerthi. </author> <title> A Fast Procedure for Computing the Distance Between Complex Objects in Three-Dimensional Space. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> Vol 4, No. 2, </volume> <pages> pp. 193-203, </pages> <year> 1988. </year>
Reference-contexts: Each drum test requires O (log n) time, so the overall time is O (log 2 n). 5.1.4.4 Distance Computation by Traversing the Miknowski Polytope If the distance between the polytopes is required, Gilbert et al. <ref> [Gilbert88] </ref> describe an implementation which they claim is approximately linear in the total number of vertices. A strong asymptotic analysis is not given, as they estimate the complexity experimentally.
Reference: [Goldman85] <author> R. N. Goldman. </author> <title> The method of resolvents: A technique for the implicitization, inversion, and intersection of non-planar, parametric rational cubic curves. </title> <booktitle> Computer-Aided Geometric Design, </booktitle> <volume> Vol. 2, No. 4, </volume> <pages> pp. 237-255. </pages>
Reference-contexts: The hope is that the scalar function can be examined to learn about its topology or other structure, to aid in obtaining the root locus. The above process is described by Goldman <ref> [Goldman85] </ref>.
Reference: [Gottschalk96] <author> S. Gottschalk, M. C. Lin, D. Manocha. OBBTree: </author> <title> A Hierarchical Structure for Rapid Interference Detection. </title> <booktitle> Computer Graphics Proceedings. </booktitle> <pages> SIGGRAPH '96 pp. 171-180. </pages>
Reference-contexts: These are simply axis-aligned bounding boxes, built top-down as described above. Of the four methods, this was found the most effective. 5.1.5.2.2 OBBTrees Gottschalk et al. <ref> [Gottschalk96] </ref> use bounding volumes which are boxes oriented to fit the bounded geometry. Compared to axis-aligned bounding boxes (or R-trees), it is not known whether this method is better or worse for most circumstances.
Reference: [Held95] <author> M. Held, J. T. Klosowski, J. S. B. Mitchell. </author> <title> Evaluation of Collision Detection Methods for Virtual Reality Fly-Throughs. </title> <booktitle> Prceedings of the 7th Canadian Conference on Computational Geometry, </booktitle> <pages> pp 205-210, </pages> <address> Quebec, Canada, Aug 10-13, </address> <year> 1995. </year>
Reference-contexts: Hubbard [Hubbard93] also used hierarchies of spheres centered on octree nodes. In a later work [Hub-bard95], Hubbard creates hierarchies of spheres organized by medial axes or "skeleton" of the model, which generally produces a tighter covering using even fewer spheres. 13 5.1.5.1.3 k-d Trees Held et al. <ref> [Held95] </ref> investigated, among other structures, a k-d tree, which can either be considered a relaxation of an octree, or a special case of a BSP tree. <p> The optimum among the tradeoffs is not at all obvious, and there is some disagreement among practitioners as to the best methods. 5.1.5.2.1 R-Trees One of the structures which Held et al. <ref> [Held95] </ref> investigated was R-trees. These are simply axis-aligned bounding boxes, built top-down as described above. Of the four methods, this was found the most effective. 5.1.5.2.2 OBBTrees Gottschalk et al. [Gottschalk96] use bounding volumes which are boxes oriented to fit the bounded geometry. <p> Their advantages are that the single layer permits constant-time access to the cells, which typically hold the polygons defining the environment of obstacles for a moving object. 14 5.1.5.3.1 Tetrahedral Mesh of Free Space Held et al. <ref> [Held95] </ref> took the novel approach of tetrahedralizing the free space of the environment with a partitioning of low stabbing number. As the object (a collection of triangles) moved through the space, the triangles composing the object were walked from their starting tetrahedron to their final tetrahedron.
Reference: [Hertel84] <author> S. Hertel, M. Mantyla, K. Mehlhorn, J. Nievergelt. </author> <title> Space Sweep Solves Intersection of Convex Polyhedra. </title> <journal> Acta Informatica, </journal> <volume> Vol. 21, No. 5, </volume> <pages> pp. 501-519, </pages> <year> 1984. </year>
Reference: [Hoffman89] <author> C. Hoffman. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference: [Hopcroft83] <author> J. E. Hopcroft, J. T. Schwartz, M. Sharir. </author> <title> Efficient detection of intersections among spheres. Planning, geometry and complexity of robot motion, </title> <journal> pp. </journal> <pages> 240-244, </pages> <year> 1987. </year>
Reference-contexts: There is a wide variety of techniques applied to the "broad phase" problem. Some techniques are analytic, some focus on temporal coherence, and some use a scheduling algorithm. 15 5.2.0.1 Analytic Techniques Hopcroft et al. <ref> [Hopcroft83] </ref> presented a O (n log 2 n) method for determining whether any pair among n spheres are touching, but said nothing about how to report which spheres were touching.
Reference: [Hubbard93] <author> P. M. </author> <title> Hubbard Interactive Collision Detection. </title> <booktitle> In Proceedings of the 1993 IEEE Symposium on Research Frontiers in Virtual Reality, </booktitle> <pages> pp 24-31, </pages> <address> San Jose, CA, 25-26 Oct, </address> <year> 1993. </year>
Reference-contexts: As mentiond previously, the ETA solution can be very useful for efficient dynamics simulation, especially when large numbers of objects take part in the simulation. 4 Hubbard <ref> [Hubbard93] </ref> describes the nbody problem as the "broad phase", in which overlapping pairs of bounding boxes for the objects are located. <p> If a region is eventually reached which is contained entirely by two objects, then those objects intersect. Otherwise, we recurse until we reach the desired precision. In this manner, Duff tackles the nbody problem without resorting to the two distinct phases, "broad" and "narrow," as Hubbard <ref> [Hubbard93] </ref> calls them, which all the other nbody systems use. This method is adaptive subdivision over the space in which the models are embedded, and the precision of the results is limited to the fineness of the subdivision. <p> This is a more conservative test, and hence may cause more intersection tests later, but these tests are less expensive than the cube/cube tests, so there may be a benefit. Hubbard <ref> [Hubbard93] </ref> also used hierarchies of spheres centered on octree nodes. <p> This is a worst case scenario for their approach which can happen in practice for some real applications. 5.2 Nbody Processing Many simulations track many objects and must determine when contacts occurs. The typical way this is approached is as Hubbard <ref> [Hubbard93] </ref> described it: during a "broad phase" which determines which pairs of objects are in close proximity, and for those pairs, a "narrow phase" in which the pair undergoes a more thorough examination. There is a wide variety of techniques applied to the "broad phase" problem. <p> So, relative to Edels-brunner's approach, they have traded space for time. These techniques establish upper bounds on the difficulty of the nbody processing task. 5.2.0.2 Space-Time Bounds for Adjusting Time Steps Hubbard <ref> [Hubbard93] </ref> uses bounds on the possible acceleration of objects to constrain their potential motion.
Reference: [Hubbard95] <author> P. M. Hubbard. </author> <title> Collision Detection for Interactive Graphics Applications. </title> <journal> IEEE Transactions on Visualization and Computer Graphics, </journal> <volume> Vol 1, No. 3, </volume> <year> 1995. </year> <month> 17 </month>
Reference: [Levin79] <author> J. Z. Levin. </author> <title> Mathematical models for determining the intersections of quadric surfaces. </title> <journal> Com--puter Graphics and Image Processing, </journal> <volume> Vol. 11, No. 1, </volume> <pages> pp. 73-87, </pages> <year> 1979. </year>
Reference-contexts: These are commonly used shaped in CAD systems. All quadrics can be represented as either implicit or parametric surfaces. Levin <ref> [Levin79] </ref> introduced methods for representing quadric surfaces and for finding their intersection curves. But his methods required the use of fourth degree polynomials, which can be numerically sensitive. Miller [Miller87] improved on these techniques, enabling use of polynomials of only degree 2 or less.
Reference: [Lin93] <author> M. C. Lin. </author> <title> Efficient Collision Detection for Animation and Robotics. </title> <type> PhD Thesis, </type> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <year> 1993. </year>
Reference-contexts: This is noted in the PhD theses of both Lin <ref> [Lin93] </ref> and Baraff [Baraff92] and is used to exploit temporal coherence in successive distance queries between convex polytopes. The idea is that with successive time steps, the polytopes' closest points will move only a small distance on the surface of their respective polytopes (perhaps only to neighboring facets).
Reference: [Miller87] <author> J. R. Miller. </author> <title> Geometric approaches to nonplanar quadric surface intersection curves. </title> <journal> ACM Transactions on Graphics, </journal> <volume> Vol. 6, No. 4, </volume> <pages> pp. 274-307, </pages> <year> 1987. </year>
Reference-contexts: These are commonly used shaped in CAD systems. All quadrics can be represented as either implicit or parametric surfaces. Levin [Levin79] introduced methods for representing quadric surfaces and for finding their intersection curves. But his methods required the use of fourth degree polynomials, which can be numerically sensitive. Miller <ref> [Miller87] </ref> improved on these techniques, enabling use of polynomials of only degree 2 or less. It often arises that quadric surfaces are aligned so that their intersection is not a general fourth degree space curve (as it generically would be).
Reference: [Moore79] <author> R. E. Moore. </author> <title> Methods and Applications of Interval Analysis. </title> <institution> Society or Industrial and Applied Mathematics (SIAM), </institution> <address> Philadelphia, </address> <year> 1979. </year>
Reference-contexts: More generally, if we have intervals A and B, then A B is an interval such that if a 2 A and b 2 B then a b 2 A B. For a more in depth look at interval analysis see Moore <ref> [Moore79] </ref>. Interval arithmetic can be extended seamlessly into vector interval arithmetic where the interval vectors are the box-like regions mentioned above.
Reference: [Mullenheim91] <author> G. Mullenheim. </author> <title> On determining start points for a surface/surface intersection algorithm. </title> <booktitle> Computer-Aided Geometric Design, </booktitle> <volume> Vol. 8, No. 5, </volume> <pages> pp. 401-408, </pages> <year> 1991. </year>
Reference-contexts: Barnhill et al. [Barnhill87] use the isoparametric method for finding starting points, and then use the tracing method described above. Also, Barnhill and Kersey [Barnhill90] discuss improved tracing methods, and Mullenheiim <ref> [Mullenheim91] </ref> discusses a method for finding starting points for tracing. 10 5.1.3.4 Analytic Methods Analytic methods usually involve implicitizing one of the parametric surfaces obtaining an implicit representation of the same shape.
Reference: [Muller78] <author> D. E. Muller, F. P. Preparata. </author> <title> Finding the intersection of two convex polyhedra. </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 7, No. 2, pp217-236, </volume> <year> 1978. </year>
Reference-contexts: There is a feasible solution if and only if there is contact. Seidel [Seidel90] gives an easily implemented randomized algorithm for linear programming, which generaly runs in linear time, although this is not a strict bound. 11 5.1.4.2 Space Sweep for Intersection Problem Muller and Preparata <ref> [Muller78] </ref> find an O (n log n) algorithm for computing the intersection of two polyhedra (if the intersection exists, at all). They show how to find a point within the intersection of the polytopes in O (n log n) time, if it exists.
Reference: [Palmer95] <author> I. J. Palmer, R. L. Grimsdale. </author> <title> Collision Detection or Animation using Sphere-Trees. </title> <journal> Computer Graphics Forum, </journal> <volume> Vol. 14, No. 2, pp105-116, </volume> <year> 1995. </year>
Reference-contexts: This is a heuristic, and there are inputs for which the worst case performance of O (n 2 ) occurs, but these are unusual cases which rarely occur in practice, if at all. 5.1.5.1.2 Spheres Bounding Octree Nodes Palmer and Grimsdale <ref> [Palmer95] </ref> take a variation of this approach, where instead of testing two subcubes for overlap, they test bounding spheres of those subcubes for overlap.
Reference: [Patrikalakis93] <author> N. M. Patrikalakis. </author> <title> Surface-to-surface intersections. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 13, No. 1, </volume> <pages> pp. 89-95, </pages> <year> 1993. </year>
Reference-contexts: Many practitioners actually use some combination of these. A survey of these techniques is given by Patrikalakis <ref> [Patrikalakis93] </ref>. 8 5.1.3.1 Subdivision Methods for Parametric Surfaces All subdivision methods for parametric surfaces work by recursively subdividing the domain of the two surface patches in tandem, and examining the spatial relationship between patches.
Reference: [Seidel90] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Annual ACM Conf. On Computational Geometry, </booktitle> <pages> pp 211-215, </pages> <address> Berkeley, CA, </address> <year> 1990. </year>
Reference-contexts: This is the feasible solution to linear constraints problem, which is a special case of a linear programming problem (the objective function is simply ommitted). There is a feasible solution if and only if there is contact. Seidel <ref> [Seidel90] </ref> gives an easily implemented randomized algorithm for linear programming, which generaly runs in linear time, although this is not a strict bound. 11 5.1.4.2 Space Sweep for Intersection Problem Muller and Preparata [Muller78] find an O (n log n) algorithm for computing the intersection of two polyhedra (if the intersection
Reference: [Six82] <author> H. W. Six, D. Wood. </author> <title> Counting and reporting intersections of d-ranges. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-31, No. 3, </volume> <pages> pp. 181-187, </pages> <year> 1982. </year>
Reference-contexts: Edelsbrunner [Edelsbrunner83] presented a method which could report the intersecting pairs among n axis-aligned boxes in O (n log 3 n + k) time, where there are k pairs, requiring O (n log n) space. Six <ref> [Six82] </ref> reports an algorithm requiring O (n log 2 n + k) time and O (n log 2 n) space. So, relative to Edels-brunner's approach, they have traded space for time.

References-found: 31

