URL: http://www.cs.panam.edu/~meng/unix-home/icp-squid.ps.gz
Refering-URL: http://www.cs.panam.edu/~meng/unix-home/
Root-URL: http://www.cs.panam.edu
Title: ICP and the Squid Web Cache  
Author: Duane Wessels k claffy 
Date: August 13, 1997  
Abstract: We describe the structure and functionality of the Internet Cache Protocol (ICP) and its implementation in the Squid Web Caching software. ICP is a lightweight message format used for communication among Web caches. Caches exchange ICP queries and replies to gather information to use in selecting the most appropriate location from which to retrieve an object. We present background on the history of ICP, and discuss issues in ICP deployment, efficiency, security, and interaction with other aspects of Web traffic behavior. We catalog successes, failures, and lessons learned from using ICP to deploy a global Web cache hierarchy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abrams, C. R. Standridge, G. Abdulla, S. Williams, and E. A. Fox, </author> <title> "Caching proxies: Limitations and potentials," </title> <booktitle> in Proceedings of the Fourth Interntional Conference on the WWW, (Boston, </booktitle> <address> MA), </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Caching has proven a useful technique for reducing end user experienced latency on the Web <ref> [1, 2, 3, 4, 5, 6, 7] </ref>. The fundamental concept is the intermediate storage of copies of popular Web documents close to the end users. Caching is effective because many Web documents are requested (much) more than once [8]. <p> So what is the benefit from all this trouble? In addition to the 30-50% local hit rates typically seen by most caches <ref> [53, 54, 1] </ref>, we find that approximately another 10% of requests will be cache hits in neighbor caches. 13 Does this extra margin justify joining a cache hierarchy? We believe the answer to this depends on where you are and on the quality of your Internet service.
Reference: [2] <author> N. Smith, </author> <title> "What can archives offer the world wide web," </title> <month> September </month> <year> 1994. </year> <note> http://www. hensa.ac.uk/www94/. </note>
Reference-contexts: Caching has proven a useful technique for reducing end user experienced latency on the Web <ref> [1, 2, 3, 4, 5, 6, 7] </ref>. The fundamental concept is the intermediate storage of copies of popular Web documents close to the end users. Caching is effective because many Web documents are requested (much) more than once [8].
Reference: [3] <author> D. Neal, </author> <title> "The harvest object cache in new zealand," </title> <booktitle> in Proccedings of the World Wide Web Conference, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Caching has proven a useful technique for reducing end user experienced latency on the Web <ref> [1, 2, 3, 4, 5, 6, 7] </ref>. The fundamental concept is the intermediate storage of copies of popular Web documents close to the end users. Caching is effective because many Web documents are requested (much) more than once [8].
Reference: [4] <author> D. Povey and J. Harrison, </author> <title> "A distributed internet cache," </title> <booktitle> in Proceedings of the 20th Aus-tralasian Computer Science Conference (to appear), </booktitle> <month> February </month> <year> 1997. </year> <note> http://www.psy.uq. edu.au:8080/~dean/project/. </note>
Reference-contexts: Caching has proven a useful technique for reducing end user experienced latency on the Web <ref> [1, 2, 3, 4, 5, 6, 7] </ref>. The fundamental concept is the intermediate storage of copies of popular Web documents close to the end users. Caching is effective because many Web documents are requested (much) more than once [8]. <p> Some people believe that tree-like hierarchies have appealing scaling properties. Others argue that upper level nodes of the tree become excessively loaded and degrade performance, so distribution is the key to scaling. Povey describes a Distributed Internet Cache <ref> [4] </ref> and modifications to ICP to replace top-level caches with pointer servers. Instead of holding cached data, pointer servers remember which caches hold which objects, and direct requests accordingly. A similar project, known as CRISP [45] is underway at Duke University and AT&T.
Reference: [5] <author> A. Cormack, </author> <title> "Caching on janet: </title> <type> Acn report," </type> <month> September </month> <year> 1996. </year> <note> http://www.psy.uq.edu.au: 8080/~dean/project/. </note>
Reference-contexts: Caching has proven a useful technique for reducing end user experienced latency on the Web <ref> [1, 2, 3, 4, 5, 6, 7] </ref>. The fundamental concept is the intermediate storage of copies of popular Web documents close to the end users. Caching is effective because many Web documents are requested (much) more than once [8].
Reference: [6] <author> A. J. </author> <month> Flavell, </month> <institution> "Briefing at glasgow university ppe group," </institution> <month> July </month> <year> 1996. </year> <note> http://d1.ph.gla.ac. uk/~flavell/cache.html. </note>
Reference-contexts: Caching has proven a useful technique for reducing end user experienced latency on the Web <ref> [1, 2, 3, 4, 5, 6, 7] </ref>. The fundamental concept is the intermediate storage of copies of popular Web documents close to the end users. Caching is effective because many Web documents are requested (much) more than once [8].
Reference: [7] <author> D. Marwood, </author> <title> "Squid proxy analysis, </title> <booktitle> presented at NLANR cache workshop 1997," </booktitle> <month> April </month> <year> 1997. </year> <note> http://www.cs.ubc.ca/spider/marwood/Projects/SPA/Report/Report.html. </note>
Reference-contexts: Caching has proven a useful technique for reducing end user experienced latency on the Web <ref> [1, 2, 3, 4, 5, 6, 7] </ref>. The fundamental concept is the intermediate storage of copies of popular Web documents close to the end users. Caching is effective because many Web documents are requested (much) more than once [8].
Reference: [8] <author> V. Almeida, A. Bestavros, M. Crovella, and A. de Oliveira, </author> <title> "Characterizing Reference Locality in the WWW," in Proceedings of PDIS'96: </title> <booktitle> The IEEE Conference on Parallel and Distributed Information Systems, </booktitle> <address> (Miami Beach, Florida), </address> <month> December </month> <year> 1996. </year>
Reference-contexts: The fundamental concept is the intermediate storage of copies of popular Web documents close to the end users. Caching is effective because many Web documents are requested (much) more than once <ref> [8] </ref>. Web browsers have local disk caches because individuals often browse the same pages repeatedly. Additionally, there is likely overlap in the set of documents requested by a large group of users.
Reference: [9] <author> T. Berners-Lee, R. Fielding, and H. Frystyk, </author> <title> "Hypertext transport protocol - HTTP/1.0," Network Working Group RFC 1945, </title> <month> May </month> <year> 1996. </year> <note> http://ds.internic.net/rfc/rfc1945.txt. </note>
Reference-contexts: For this reason Web caching is also occasionally referred to as proxy caching. Proxies are often used as a gateway between two sides of an Internet firewall, and are not necessarily used for caching. 1.1 HTTP and Caching The Hypertext Transfer Protocol <ref> [9, 10] </ref> has several basic features relevant to Web caching. At the time of this writing, the majority of Web clients and servers use HTTP version 1.0. In many cases, HTTP/1.1 features are incrementally added to software products.
Reference: [10] <author> R. Fielding et al., </author> <title> "Hypertext transport protocol - HTTP/1.1," Network Working Group RFC 2068, </title> <month> January </month> <year> 1997. </year> <note> http://ds.internic.net/rfc/rfc2068.txt. </note>
Reference-contexts: For this reason Web caching is also occasionally referred to as proxy caching. Proxies are often used as a gateway between two sides of an Internet firewall, and are not necessarily used for caching. 1.1 HTTP and Caching The Hypertext Transfer Protocol <ref> [9, 10] </ref> has several basic features relevant to Web caching. At the time of this writing, the majority of Web clients and servers use HTTP version 1.0. In many cases, HTTP/1.1 features are incrementally added to software products. <p> If the resource has changed since the If-Modified-Since timestamp, the server sends the current version. The HTTP/1.1 Cache-control header allows both clients and servers to "override the default caching algorithms" <ref> [10] </ref>. For this article, we are primarily interested in the Max-age directive, which lets the client place an upper limit on how old an object can be and still satisfy the request without refreshing the document from the source. <p> However, obviously adding such complexity would require additional CPU cycles to fully parse the HTTP request (in text), and the ominous size and complexity of the recent HTTP/1.1 RFC <ref> [10] </ref> lends concern to this methodology as a general direction.
Reference: [11] <author> T. Berners-Lee et al., </author> <title> "Uniform resource locators (URL)," Network Working Group RFC 1738, </title> <month> December </month> <year> 1994. </year> <note> http://ds.internic.net/rfc/rfc1738.txt. </note>
Reference-contexts: In many cases, HTTP/1.1 features are incrementally added to software products. Most of what we describe here pertains to HTTP/1.0, except for the Cache-control features, which are part of HTTP/1.1. An HTTP request is comprised of three major parts: a request method, a Uniform Resource Locator (URL) <ref> [11] </ref>, and a set of request headers. An HTTP reply consists of a numeric result code, a set of reply headers, and an optional reply body. The most common request method is GET, which is a request to retrieve the information indicated by the URL.
Reference: [12] <author> P. Mockapetris, </author> <title> "Domain names concepts and facilities," Network Working Group RFC 1034, </title> <month> November </month> <year> 1987. </year> <note> http://ds.internic.net/rfc/rfc1034.txt. </note>
Reference-contexts: Like other wide-area, multi-administration Internet services such as the Domain Name Service (DNS) <ref> [12, 13] </ref>, Usenet newsgroups, and Classless Inter-Domain Routing (CIDR) [14], the use of hierarchical structure is particularly auspicious for the scalability and manageability of Web caching. Figure 1 depicts a very simple cache hierarchy. A set of child caches share a common parent cache.
Reference: [13] <author> P. Mockapetris, </author> <title> "Domain names implementation and specification," Network Working Group RFC 1035, </title> <month> November </month> <year> 1987. </year> <note> http://ds.internic.net/rfc/rfc1035.txt. </note>
Reference-contexts: Like other wide-area, multi-administration Internet services such as the Domain Name Service (DNS) <ref> [12, 13] </ref>, Usenet newsgroups, and Classless Inter-Domain Routing (CIDR) [14], the use of hierarchical structure is particularly auspicious for the scalability and manageability of Web caching. Figure 1 depicts a very simple cache hierarchy. A set of child caches share a common parent cache.
Reference: [14] <author> V. Fuller, T. Li, J. Yu, and K. Varadhan, </author> <title> "Classless inter-domain routing (CIDR): an address assignment and aggregation strategy," Network Working Group RFC 1519, </title> <month> September </month> <year> 1993. </year> <note> http://ds.internic.net/rfc/rfc1519.txt. </note>
Reference-contexts: Like other wide-area, multi-administration Internet services such as the Domain Name Service (DNS) [12, 13], Usenet newsgroups, and Classless Inter-Domain Routing (CIDR) <ref> [14] </ref>, the use of hierarchical structure is particularly auspicious for the scalability and manageability of Web caching. Figure 1 depicts a very simple cache hierarchy. A set of child caches share a common parent cache. Child caches forward requests to their parents for documents they do not have.
Reference: [15] <author> M. A. </author> <title> Blaze, Caching in Large Scale Distributed File Systems. </title> <type> PhD thesis, </type> <institution> Princeton University, </institution> <year> 1993. </year> <note> http://ncstrl.cs.princeton.edu/Dienst/UI/2.0/Describe/ncstrl. princeton%2fTR-397-92. 22 </note>
Reference-contexts: The parent/sibling distinction has a number of interesting consequences and issues which we discuss in section 6.1. 2 Related Work Web caching is based on established techniques used for improving the performance of distributed (networked) filesystems <ref> [15, 16, 17, 18, 19] </ref>. Modern computer systems use caching for memory and local disk accesses as well. The most difficult part of any caching scheme is maintaining cache consistency, or keeping the cached data synchronized with the source. As mentioned above, HTTP has the If-Modified-Since feature for this purpose.
Reference: [16] <author> M. D. Dahlin, C. J. Mather, R. Y. Wang, T. E. Anderson, and D. A. Patterson, </author> <title> "A quantitative analysis of cache policies for scalable network file systems," </title> <journal> Performance Evaluation Review, </journal> <volume> vol. 32, </volume> <editor> p. </editor> <volume> 150, </volume> <month> May </month> <year> 1994. </year> <month> ftp://ftp.cs.berkeley.edu/ucb/people/tea/xfs.ps. </month>
Reference-contexts: The parent/sibling distinction has a number of interesting consequences and issues which we discuss in section 6.1. 2 Related Work Web caching is based on established techniques used for improving the performance of distributed (networked) filesystems <ref> [15, 16, 17, 18, 19] </ref>. Modern computer systems use caching for memory and local disk accesses as well. The most difficult part of any caching scheme is maintaining cache consistency, or keeping the cached data synchronized with the source. As mentioned above, HTTP has the If-Modified-Since feature for this purpose.
Reference: [17] <author> D. Muntz and P. Honeyman, </author> <title> "Multilevel caching in distributed file systems or- your cache ain't nuthin' but trash," </title> <booktitle> in Proceedings of the USENIX Winter Conference, </booktitle> <pages> pp. 305-313, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: The parent/sibling distinction has a number of interesting consequences and issues which we discuss in section 6.1. 2 Related Work Web caching is based on established techniques used for improving the performance of distributed (networked) filesystems <ref> [15, 16, 17, 18, 19] </ref>. Modern computer systems use caching for memory and local disk accesses as well. The most difficult part of any caching scheme is maintaining cache consistency, or keeping the cached data synchronized with the source. As mentioned above, HTTP has the If-Modified-Since feature for this purpose.
Reference: [18] <author> P. B. Austin, K. A. Murray, and A. J. Wellings, </author> <title> "File system caching in large point-to-point networks," </title> <journal> Software Engineering Journal, </journal> <volume> vol. 7, </volume> <pages> pp. 65-80, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: The parent/sibling distinction has a number of interesting consequences and issues which we discuss in section 6.1. 2 Related Work Web caching is based on established techniques used for improving the performance of distributed (networked) filesystems <ref> [15, 16, 17, 18, 19] </ref>. Modern computer systems use caching for memory and local disk accesses as well. The most difficult part of any caching scheme is maintaining cache consistency, or keeping the cached data synchronized with the source. As mentioned above, HTTP has the If-Modified-Since feature for this purpose.
Reference: [19] <author> M. N. Nelson, B. B. Welch, and J. K. Ousterhout, </author> <title> "Caching in the sprite network file system," </title> <journal> AMC Transactions on computer Systems, </journal> <volume> vol. 6, </volume> <pages> pp. 135-154, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: The parent/sibling distinction has a number of interesting consequences and issues which we discuss in section 6.1. 2 Related Work Web caching is based on established techniques used for improving the performance of distributed (networked) filesystems <ref> [15, 16, 17, 18, 19] </ref>. Modern computer systems use caching for memory and local disk accesses as well. The most difficult part of any caching scheme is maintaining cache consistency, or keeping the cached data synchronized with the source. As mentioned above, HTTP has the If-Modified-Since feature for this purpose.
Reference: [20] <author> A. Lutonen, H. F. Nielsen, and T. Berners-Lee, </author> <note> "Cern httpd," July 1996. http://www.w3. org/pub/WWW/Daemon/Status.html. </note>
Reference-contexts: Modern computer systems use caching for memory and local disk accesses as well. The most difficult part of any caching scheme is maintaining cache consistency, or keeping the cached data synchronized with the source. As mentioned above, HTTP has the If-Modified-Since feature for this purpose. The CERN HTTPD <ref> [20] </ref> is the original proxy cache. Under heavy load, it suffers from two design flaws: 1) each request is handled by a separate process, and 2) the filesystem is used to index cached objects (i.e. each cache lookup requires a stat () system call). <p> The other is called Squid, which we maintain as a part of our National Science Foundation grant to develop a prototype caching architecture [24]. Harvest, NetCache, and Squid all support ICP. Most Web caching systems in use today, including Squid, are demand-driven from the clients <ref> [25, 26, 27, 28, 29, 22, 20] </ref>. In other words, the caches are passive, and objects are only retrieved 3 or validated when requested by a client. This is similar to how Sun Microsystems' Network File System (NFS) [30] operates.
Reference: [21] <author> Bowman, Danzig, Hardy, Manber, Schwartz, and Wessels, "Harvest: </author> <title> A scalable, customizable discovery and access system.," </title> <type> Tech. Rep. </type> <institution> CU-CS-732-94, Department of Computer Science, University of Colorado, </institution> <month> August </month> <year> 1994. </year> <note> ftp://ftp.cs.colorado.edu/pub/cs/techreports/ schwartz/Harvest.Jour.ps.Z. </note>
Reference-contexts: CERN caches can be arranged hierarchically, but every single cache miss is forwarded on to a single parent cache. The Harvest cache <ref> [21, 22] </ref> set out to improve upon CERN by focusing on hierarchical caching and and an efficient process implementation (i.e. no forking and minimal disk access). However, Harvest fell short on properly implementing the HTTP protocol, most notably it does not support If-Modified-Since requests.
Reference: [22] <author> A. Chankhunthod, P. B. Danzig, C. Neerdaels, M. F. Schwartz, and K. J. Worrell, </author> <title> "A hierarchical internet object cache," </title> <type> Tech. Rep. 95-611, </type> <institution> University of Southern California, </institution> <month> March </month> <year> 1995. </year> <note> http://catarina.usc.edu/danzig/cache.ps. </note>
Reference-contexts: CERN caches can be arranged hierarchically, but every single cache miss is forwarded on to a single parent cache. The Harvest cache <ref> [21, 22] </ref> set out to improve upon CERN by focusing on hierarchical caching and and an efficient process implementation (i.e. no forking and minimal disk access). However, Harvest fell short on properly implementing the HTTP protocol, most notably it does not support If-Modified-Since requests. <p> The other is called Squid, which we maintain as a part of our National Science Foundation grant to develop a prototype caching architecture [24]. Harvest, NetCache, and Squid all support ICP. Most Web caching systems in use today, including Squid, are demand-driven from the clients <ref> [25, 26, 27, 28, 29, 22, 20] </ref>. In other words, the caches are passive, and objects are only retrieved 3 or validated when requested by a client. This is similar to how Sun Microsystems' Network File System (NFS) [30] operates. <p> Researchers at the University of Southern California and the University of Colorado developed the first version of the hierarchical Web caching software in 1994 <ref> [22] </ref>. The Harvest Web cache software (called Cached ) began to acquire real users during 1995. Late that year, development slowed considerably as project members migrated toward industry jobs. A few project members formed a company to sell a commercial-strength version of the Harvest cache [23].
Reference: [23] <author> N. </author> <note> Appliance, "Netcache proxy." http://www.netapp.com/products/level3/netcache/ datasheet.html. </note>
Reference-contexts: However, Harvest fell short on properly implementing the HTTP protocol, most notably it does not support If-Modified-Since requests. When the Harvest project ended, development of the cache software continued by two groups. One is a commercial product called NetCache <ref> [23] </ref>. The other is called Squid, which we maintain as a part of our National Science Foundation grant to develop a prototype caching architecture [24]. Harvest, NetCache, and Squid all support ICP. <p> The Harvest Web cache software (called Cached ) began to acquire real users during 1995. Late that year, development slowed considerably as project members migrated toward industry jobs. A few project members formed a company to sell a commercial-strength version of the Harvest cache <ref> [23] </ref>. The early Harvest cache used a very simple caching model: * Only GET requests should be cached. There is no need to query peers for non-GET requests (i.e. POST) since other caches won't have them either.
Reference: [24] <author> D. Wessels, K. Claffy, and H.-W. Braun, </author> <title> "NLANR prototype web caching system." </title> <booktitle> Research project funded by the National Science Foundation. </booktitle> <address> http://ircache.nlanr.net/. </address>
Reference-contexts: When the Harvest project ended, development of the cache software continued by two groups. One is a commercial product called NetCache [23]. The other is called Squid, which we maintain as a part of our National Science Foundation grant to develop a prototype caching architecture <ref> [24] </ref>. Harvest, NetCache, and Squid all support ICP. Most Web caching systems in use today, including Squid, are demand-driven from the clients [25, 26, 27, 28, 29, 22, 20]. In other words, the caches are passive, and objects are only retrieved 3 or validated when requested by a client. <p> Squid keeps track of its failed requests to cope with this problem. When the ratio of failed to successful requests exceeds a threshold (i.e. 1) then Squid returns icp miss nofetch 6 instead of 5 The NLANR caches <ref> [24] </ref> experienced this failure mode in September 1996. Specifically, the caches can all talk to each other over the vBNS, but cache MISS traffic primarily goes out on commodity networks. So when the commodity backbone fails, the caches can still send ICP queries to each other over the vBNS. <p> The amount of packet loss is shown for each measurement as well. messages, making a set of ICMP measurements, followed by a set of ICP measurements, and recording all RTTs between the local host and each of the six NLANR Squid caches <ref> [24] </ref>. Unlike an ICMP packet, the ICP request must go up to the application layer, inherently costing some extra delay. <p> At that time, the ICP message format included an eight-byte authentication field, but the authentication mechanism was never implemented. The Harvest research cache software always set the ICP version number to two (2). 8.2 Squid Because the NSF-funded NLANR caching project <ref> [24] </ref> required a research version of the software for code experimentation, project members continued development on a derivative of the Harvest cache software, Squid [25], with considerable assistance from the user community. Our description and discussion of ICP in this paper derives from our experiences with Squid.
Reference: [25] <author> D. Wessels, </author> <title> "Squid internet object cache." </title> <address> http://squid.nlanr.net/. </address>
Reference-contexts: The other is called Squid, which we maintain as a part of our National Science Foundation grant to develop a prototype caching architecture [24]. Harvest, NetCache, and Squid all support ICP. Most Web caching systems in use today, including Squid, are demand-driven from the clients <ref> [25, 26, 27, 28, 29, 22, 20] </ref>. In other words, the caches are passive, and objects are only retrieved 3 or validated when requested by a client. This is similar to how Sun Microsystems' Network File System (NFS) [30] operates. <p> The Harvest research cache software always set the ICP version number to two (2). 8.2 Squid Because the NSF-funded NLANR caching project [24] required a research version of the software for code experimentation, project members continued development on a derivative of the Harvest cache software, Squid <ref> [25] </ref>, with considerable assistance from the user community. Our description and discussion of ICP in this paper derives from our experiences with Squid. In the time we have been working on Squid, a number of new features have been added to its ICP implementation.
Reference: [26] <author> N. </author> <title> Communications, "Netscape proxy." </title> <address> http://home.netscape.com/comprod/server_ central/product/proxy/index.html. </address>
Reference-contexts: The other is called Squid, which we maintain as a part of our National Science Foundation grant to develop a prototype caching architecture [24]. Harvest, NetCache, and Squid all support ICP. Most Web caching systems in use today, including Squid, are demand-driven from the clients <ref> [25, 26, 27, 28, 29, 22, 20] </ref>. In other words, the caches are passive, and objects are only retrieved 3 or validated when requested by a client. This is similar to how Sun Microsystems' Network File System (NFS) [30] operates.
Reference: [27] <institution> Microsoft, "Microsoft proxy." </institution> <note> http://www.microsoft.com/proxy/. </note>
Reference-contexts: The other is called Squid, which we maintain as a part of our National Science Foundation grant to develop a prototype caching architecture [24]. Harvest, NetCache, and Squid all support ICP. Most Web caching systems in use today, including Squid, are demand-driven from the clients <ref> [25, 26, 27, 28, 29, 22, 20] </ref>. In other words, the caches are passive, and objects are only retrieved 3 or validated when requested by a client. This is similar to how Sun Microsystems' Network File System (NFS) [30] operates.
Reference: [28] <author> S. Glassman, </author> <title> "A caching relay for the world wide web," </title> <booktitle> in Proceedings of the First International WWW Conference, </booktitle> <pages> pp. 69-76, </pages> <month> May </month> <year> 1994. </year> <note> http://www.research.digital.com/SRC/ personal/Steve_Glassman/CachingTheWeb.html. </note>
Reference-contexts: The other is called Squid, which we maintain as a part of our National Science Foundation grant to develop a prototype caching architecture [24]. Harvest, NetCache, and Squid all support ICP. Most Web caching systems in use today, including Squid, are demand-driven from the clients <ref> [25, 26, 27, 28, 29, 22, 20] </ref>. In other words, the caches are passive, and objects are only retrieved 3 or validated when requested by a client. This is similar to how Sun Microsystems' Network File System (NFS) [30] operates.
Reference: [29] <author> R. Jones, </author> <title> "Digital's world-wide web server: A case study," </title> <booktitle> in Proceedings of the First International WWW Conference, </booktitle> <month> May </month> <year> 1994. </year> <note> http://info.cern.ch/PapersWWW94/rjones.ps. </note>
Reference-contexts: The other is called Squid, which we maintain as a part of our National Science Foundation grant to develop a prototype caching architecture [24]. Harvest, NetCache, and Squid all support ICP. Most Web caching systems in use today, including Squid, are demand-driven from the clients <ref> [25, 26, 27, 28, 29, 22, 20] </ref>. In other words, the caches are passive, and objects are only retrieved 3 or validated when requested by a client. This is similar to how Sun Microsystems' Network File System (NFS) [30] operates.
Reference: [30] <author> B. Nowicki, "NFS: </author> <title> Network file system protocol specification," Network Working Group RFC 1094, </title> <month> March </month> <year> 1989. </year> <month> ftp://ftp.internic.net/rfc/rfc1094.txt. </month>
Reference-contexts: In other words, the caches are passive, and objects are only retrieved 3 or validated when requested by a client. This is similar to how Sun Microsystems' Network File System (NFS) <ref> [30] </ref> operates. NFS servers are stateless (as are HTTP servers), and NFS clients are tasked with maintaining cache consistency. One alternative to demand-driven caching is known as push-caching [31, 32].
Reference: [31] <author> J. Gwertzman, </author> <title> "Autonomous replication in wide-area distributed systems." </title> <type> Senior Thesis, </type> <month> April </month> <year> 1995. </year> <note> http://www.eecs.harvard.edu/~vino/web/push.cache/. </note>
Reference-contexts: This is similar to how Sun Microsystems' Network File System (NFS) [30] operates. NFS servers are stateless (as are HTTP servers), and NFS clients are tasked with maintaining cache consistency. One alternative to demand-driven caching is known as push-caching <ref> [31, 32] </ref>. Gwertzman and Selzter [31, 33] propose that Web servers replicate popular data in advance based on geography. 2 Push-caching is similar to the Andrew File System (AFS) [34] because the servers become stateful and can invalidate stale cached data. <p> This is similar to how Sun Microsystems' Network File System (NFS) [30] operates. NFS servers are stateless (as are HTTP servers), and NFS clients are tasked with maintaining cache consistency. One alternative to demand-driven caching is known as push-caching [31, 32]. Gwertzman and Selzter <ref> [31, 33] </ref> propose that Web servers replicate popular data in advance based on geography. 2 Push-caching is similar to the Andrew File System (AFS) [34] because the servers become stateful and can invalidate stale cached data. However, an AFS server does not choose where data should be cached.
Reference: [32] <author> A. Lopez-Ortiz and D. M. </author> <note> German, "A multicollaborative push-caching HTTP protocol for the WWW." http://daisy.uwaterloo.ca/~alopez-o/cspap/cache/Overview.html. 23 </note>
Reference-contexts: This is similar to how Sun Microsystems' Network File System (NFS) [30] operates. NFS servers are stateless (as are HTTP servers), and NFS clients are tasked with maintaining cache consistency. One alternative to demand-driven caching is known as push-caching <ref> [31, 32] </ref>. Gwertzman and Selzter [31, 33] propose that Web servers replicate popular data in advance based on geography. 2 Push-caching is similar to the Andrew File System (AFS) [34] because the servers become stateful and can invalidate stale cached data.
Reference: [33] <author> J. Gwertzman and M. Seltzer, </author> <title> "The case for geographical push-caching," </title> <booktitle> in Fifth Annual Workshop on Hot Operating Systems, </booktitle> <pages> pp. 51-55, </pages> <month> May </month> <year> 1995. </year> <note> http://www.eecs.harvard.edu/ ~vino/web/hotos.ps. </note>
Reference-contexts: This is similar to how Sun Microsystems' Network File System (NFS) [30] operates. NFS servers are stateless (as are HTTP servers), and NFS clients are tasked with maintaining cache consistency. One alternative to demand-driven caching is known as push-caching [31, 32]. Gwertzman and Selzter <ref> [31, 33] </ref> propose that Web servers replicate popular data in advance based on geography. 2 Push-caching is similar to the Andrew File System (AFS) [34] because the servers become stateful and can invalidate stale cached data. However, an AFS server does not choose where data should be cached.
Reference: [34] <author> D. L. Cohen, </author> <title> "AFS: </title> <journal> NFS on steroids," LAN Technology, </journal> <volume> vol. 9, </volume> <pages> pp. 51-62, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: One alternative to demand-driven caching is known as push-caching [31, 32]. Gwertzman and Selzter [31, 33] propose that Web servers replicate popular data in advance based on geography. 2 Push-caching is similar to the Andrew File System (AFS) <ref> [34] </ref> because the servers become stateful and can invalidate stale cached data. However, an AFS server does not choose where data should be cached. Replication is a technique similar to caching, but is generally considered to be more active.
Reference: [35] <author> M. Baentsch, G. Miller, and P. Sturm, </author> <title> "Introducing application-level replication and naming into today's web," </title> <booktitle> in Proceedings of the Fifth International World-Wide Web Conference, </booktitle> <address> Paris, France, </address> <month> May </month> <year> 1996. </year> <note> http://www5conf.inria.fr/fich_html/papers/P3/Overview. html. </note>
Reference-contexts: Replication is a technique similar to caching, but is generally considered to be more active. The process of setting up a new replica is often manually intensive (e.g. editing configuration files, installing cron jobs, and updating listings). Baentsch et. al. <ref> [35] </ref> have proposed a scheme for automatic replication of popular data, in which users rely on proxy caches that are aware of the replicated servers. Prefetching can be effective at reducing latency at the expense of increased bandwidth usage.
Reference: [36] <author> V. N. Padmanabhan and J. C. Mogul, </author> <title> "Using predictive prefetching to improve world wide web latency," </title> <journal> ACM SIGCOMM Computer Communication Review, </journal> <month> July </month> <year> 1996. </year> <note> http://daedalus. cs.berkeley.edu/publications/ccr-july96.ps.gz. </note>
Reference-contexts: Prefetching can be effective at reducing latency at the expense of increased bandwidth usage. The inherent drawback is that some data will be prefetched but then never requested by the user. To be most effective, a prefetching proxy cache must accurately predict future requests. Padmanabhan and Mogul <ref> [36] </ref> propose that Web servers offer predictions to clients regarding the likelihood of future requests to the server, based on which clients could decide whether to prefetch specific resources. Prefetching has been implemented in the Wcol proxy cache [37].
Reference: [37] <author> H. Inoue and K. Chinen, </author> <note> "Catalyst mode of Wcol." http://shika.aist-nara.ac.jp/ products/wcol/cuckoo.html. </note>
Reference-contexts: Padmanabhan and Mogul [36] propose that Web servers offer predictions to clients regarding the likelihood of future requests to the server, based on which clients could decide whether to prefetch specific resources. Prefetching has been implemented in the Wcol proxy cache <ref> [37] </ref>. Chinen and Yamaguchi [38] examine hit rates, transfer times, and network traffic volume for prefetching compared to demand-driven caching and to no caching at all.
Reference: [38] <author> K. ichi Chinen and S. Yamaguchi, </author> <title> "An interactive prefetching proxy server for improvements of WWW latency," </title> <booktitle> in INET 97, </booktitle> <address> Kuala Lumpur, Malaysia, </address> <month> June </month> <year> 1997. </year> <note> http://www.isoc. org/inet97/proceedings/A1/A1_3.HTM. </note>
Reference-contexts: Padmanabhan and Mogul [36] propose that Web servers offer predictions to clients regarding the likelihood of future requests to the server, based on which clients could decide whether to prefetch specific resources. Prefetching has been implemented in the Wcol proxy cache [37]. Chinen and Yamaguchi <ref> [38] </ref> examine hit rates, transfer times, and network traffic volume for prefetching compared to demand-driven caching and to no caching at all. Prefetching increased the amount of network traffic by a factor of 2.8 compared to no caching, and by a factor of 4.1 compared to demand-driven caching.
Reference: [39] <author> C. Davis, P. Vixie, T. Goodwin, and I. Dickinson, </author> <title> "A means for expression location information in the domain name system," Network Working Group RFC 1876, </title> <month> January </month> <year> 1996. </year> <note> http://ds. internic.net/rfc/rfc1876.txt. </note>
Reference-contexts: Several efforts have focused on mechanisms for locating the best server to ask for a document. One approach is to add geographical coordinate information to DNS records <ref> [39] </ref>. However, topology does not generally match geography, so this technique has limited utility for Web caching. Another approach is under development within the IETF. SONAR [40] is a simple message format for expressing the relative proximity of a set of server addresses.
Reference: [40] <author> K. Moore, J. Cox, and S. Green, </author> <title> "Sonar a network proximity service." </title> <address> http://www.netlib. org/utk/projects/sonar/. </address>
Reference-contexts: One approach is to add geographical coordinate information to DNS records [39]. However, topology does not generally match geography, so this technique has limited utility for Web caching. Another approach is under development within the IETF. SONAR <ref> [40] </ref> is a simple message format for expressing the relative proximity of a set of server addresses.
Reference: [41] <author> P. Francis, </author> <title> "Host proximity service (hops)." </title> <address> http://www.ingrid.org/hops/wp.html. </address>
Reference-contexts: The proposed Host Proximity Service <ref> [41] </ref> is similar to SONAR, but more ambitious. Carter and Crovella argue that dynamic server selection can outperform static schemes by as much as 50% [42]. Here a static policy would always assign the same client to the same replicated server.
Reference: [42] <author> R. L. Carter and M. E. Crovella, </author> <title> "Dynamic server selection using bandwidth probing in wide-area networks," </title> <type> Tech. Rep. </type> <institution> TR-96-007, Boston University Computer Science Department, </institution> <month> March </month> <year> 1996. </year> <month> ftp://cs-ftp.bu.edu/techreports/96-007-dss-using-bandwidth.ps.Z. </month>
Reference-contexts: The proposed Host Proximity Service [41] is similar to SONAR, but more ambitious. Carter and Crovella argue that dynamic server selection can outperform static schemes by as much as 50% <ref> [42] </ref>. Here a static policy would always assign the same client to the same replicated server. By measuring the Internet (i.e. throughput and latency) in near real-time, server selection can change relatively quickly in response to network congestion and other instabilities. <p> Instead, we are now using the RTT (averaged over time) as the selection metric, which also provides an indication of congestion from peer to source. Whereas the hop count is likely to remain constant over time (and would therefore be termed static by Carter and Crovella <ref> [42] </ref>), the round-trip time can vary widely between measurements. We use decaying averaging to achieve some stability while still adjusting to changing network conditions.
Reference: [43] <author> A. J. D. Guyton and M. F. Schwartz, </author> <title> "Locating nearby copies of replicated internet servers," </title> <booktitle> in Proceedings of ACM SIGCOMM '95, </booktitle> <address> Cambridge, MA, </address> <pages> pp. 288-298, </pages> <month> August </month> <year> 1995. </year> <note> ftp:// ftp.cs.colorado.edu/pub/cs/techreports/schwartz/ReplSvrLoc.ps.Z. </note>
Reference: [44] <author> S. Floyd, L. Zhang, and V. Jacobson, </author> <title> "Adaptive web caching." </title> <institution> DARPA-funded Research Project, </institution> <month> May </month> <year> 1997. </year> <note> http://irl.cs.ucla.edu/awc.html. </note>
Reference-contexts: They offer a pair of diagnostic tools to measure both the base bandwidth and available bandwidth of an Internet path. Floyd, Zhang, and Jacobson are beginning a research project called Adaptive Web Caching <ref> [44] </ref>. Central to their approach is the use of reliable multicast to disseminate objects among proxy cache groups. They propose to use IP routing information to forward cache misses toward origin servers. Some people believe that tree-like hierarchies have appealing scaling properties. <p> Developing mechanisms to make the process more configurable and intuitive is an important topic for future study. This approach is different than the one proposed by Floyd, Zhang, and Jacobson <ref> [44] </ref>, although the goal is the same. In both cases we want to know which of a set of possible parent caches is closer to the origin server. They propose to base this decision on an IP routing table, perhaps from a nearby router. <p> The additional data gleaned from ICMP measurements can allow caches to avoid trouble areas along what may be default IP routing paths. The correctness of either approach is debatable. 7.2 Multicast Multicast has been proposed by numerous individuals <ref> [44, 52] </ref> as a solution to some of ICP's problems, such as scaling and configuration. Ideally multicast can reduce the amount of ICP traffic a cache must send, 11 and also eliminate duplicate messages traversing a single link.
Reference: [45] <author> S. Gadde, M. Rabinovich, and J. Chase, </author> <title> "Reduce, reuse, recycle: An approach to building large internet caches," </title> <booktitle> in Workshop on Hot Topics in Operating Systems (HotOS), </booktitle> <month> April </month> <year> 1997. </year> <note> http://www.cs.duke.edu/ari/cisi/crisp-recycle/. </note>
Reference-contexts: Povey describes a Distributed Internet Cache [4] and modifications to ICP to replace top-level caches with pointer servers. Instead of holding cached data, pointer servers remember which caches hold which objects, and direct requests accordingly. A similar project, known as CRISP <ref> [45] </ref> is underway at Duke University and AT&T. We are not presently aware of any other protocols which provide the same functionality as ICP, although it might be possible to implement the same ideas with HTTP and the HEAD request method.
Reference: [46] <author> Various, </author> <title> "Icp working group [sic] mailing list archive," </title> <note> 1997. http://squid.nlanr.net/Mail-Archive/icp-wg/archive/. </note>
Reference-contexts: We are not presently aware of any other protocols which provide the same functionality as ICP, although it might be possible to implement the same ideas with HTTP and the HEAD request method. URL hashing has been proposed <ref> [46] </ref> as an alternative method for load balancing and parent selection, however only ICP enables sibling relationships among caches. 3 The Internet Cache Protocol (ICP) 3.1 Message Format An ICP message consists of a fixed, 20-octet header plus a variable-sized payload, the latter of which typically contains a URL.
Reference: [47] <author> D. Wessels and K. Claffy, </author> <title> "Internet cache protocol (ICP), </title> <type> version 2," </type> <institution> draft-wessels-icp-v2-03.txt, </institution> <month> July </month> <year> 1997. </year> <note> http://ds.internic.net/internet-drafts/draft-wessels-icp-v2-03. txt. 24 </note>
Reference-contexts: Figure 2 shows the ICP message format; all fields are represented in network byte order. 3 3 As of this writing the most current description of ICP is in Wessels' Internet Drafts <ref> [47, 48] </ref>. 5 * OPCODE: indicates the type of message.
Reference: [48] <author> D. Wessels and K. Claffy, </author> <title> "Application of internet cache protocol (ICP), </title> <type> version 2," </type> <institution> draft--wessels-icp-v2-appl-02.txt, </institution> <month> July </month> <year> 1997. </year> <note> http://ds.internic.net/internet-drafts/draft-wessels-icp-v2-appl-03.txt. </note>
Reference-contexts: Figure 2 shows the ICP message format; all fields are represented in network byte order. 3 3 As of this writing the most current description of ICP is in Wessels' Internet Drafts <ref> [47, 48] </ref>. 5 * OPCODE: indicates the type of message. <p> Nonetheless, a cache should verify the address and port number of every ICP message it receives, and only accept ICP replies from known peers. The ICP Internet Draft <ref> [48] </ref> has additional details on security concerns. 6.4.3 ICP Scales Poorly ICP has poor scaling characteristics.
Reference: [49] <author> CERT, </author> <title> "UDP port denial-of-service attack." </title> <publisher> ftp://info.cert.org/pub/cert_advisories/ CA-96.01.UDP_service_denial. </publisher>
Reference-contexts: The complaints were particularly loud following a CERT advisory regarding UDP-based denial-of-service attacks <ref> [49] </ref>. In conjunction with other work, Squid supports sending icp secho messages via ICMP instead of UDP. Unfortunately, ICMP packet transmission requires superuser privileges.
Reference: [50] <author> M. Baentsch, L. Baum, G. Molter, S. Rothkugel, and P. Sturm, </author> <title> "World-wide web caching - the application level view of the internet," </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 35, </volume> <month> June </month> <year> 1997. </year> <note> http://www.uni-kl.de/AG-Nehmer/baentsch/Publications.html. </note>
Reference-contexts: Increases in cache disk space eventually reach a point of diminishing returns, and this point depends upon the workload profile. Another interesting scaling parameter is the acceptable number of levels in a cache hierarchy (or mesh). Empirical results by Baentsch et al. <ref> [50] </ref> indicate that three levels (or cache-hops) is acceptable, but four gives noticeable delay. 6.5 URLs Squid and Harvest use URLs in ICP messages because they also use the URL as a part of the cache key. This allows the ICP queries to be handled very quickly and efficiently.
Reference: [51] <author> R. L. Rivest, </author> <title> "The MD5 message-digest algorithm," Network Working Group RFC 1321, </title> <month> April </month> <year> 1992. </year> <month> ftp://ftp.internic.net/rfc/rfc1321.txt. </month>
Reference-contexts: ICP does not currently impose any limits on URL length. For that matter, it does not limit the size of the ICP message. In the future, ICP may support sending an MD5 <ref> [51] </ref> hash of the URL instead of the URL itself. 17 7 Recent Work 7.1 Probing the Network Earlier we alluded to some new techniques to improve the peer selection process. Squid supports domain restrictions on peers to route requests in the right general direction.
Reference: [52] <author> Various, </author> <note> "Squid-users mailing list archives," 1996-7. http://squid.nlanr.net/Squid/Mail-Archive/squid-users/. </note>
Reference-contexts: The additional data gleaned from ICMP measurements can allow caches to avoid trouble areas along what may be default IP routing paths. The correctness of either approach is debatable. 7.2 Multicast Multicast has been proposed by numerous individuals <ref> [44, 52] </ref> as a solution to some of ICP's problems, such as scaling and configuration. Ideally multicast can reduce the amount of ICP traffic a cache must send, 11 and also eliminate duplicate messages traversing a single link.
Reference: [53] <author> D. Wessels and K. Claffy, </author> <title> "NLANR cache statistics." Daily statistics for the NLANR caches. </title> <address> http://ircache.nlanr.net/Cache/Statistics/. </address>
Reference-contexts: So what is the benefit from all this trouble? In addition to the 30-50% local hit rates typically seen by most caches <ref> [53, 54, 1] </ref>, we find that approximately another 10% of requests will be cache hits in neighbor caches. 13 Does this extra margin justify joining a cache hierarchy? We believe the answer to this depends on where you are and on the quality of your Internet service.
Reference: [54] <author> Various, </author> <title> "Links to publicly available proxy cache statistics." </title> <address> http://ircache.nlanr.net/ Cache/cache-stats-links.html/. </address>
Reference-contexts: So what is the benefit from all this trouble? In addition to the 30-50% local hit rates typically seen by most caches <ref> [53, 54, 1] </ref>, we find that approximately another 10% of requests will be cache hits in neighbor caches. 13 Does this extra margin justify joining a cache hierarchy? We believe the answer to this depends on where you are and on the quality of your Internet service.
Reference: [55] <author> V. N. Padmanabhan and J. C. Mogul, </author> <title> "Improving HTTP latency," </title> <booktitle> in Proceedings of the Second International WWW Conference, </booktitle> <year> 1994. </year> <note> http://www.ncsa.uiuc.edu/SDG/IT94/ Proceedings/DDay/mogul/HTTPLatency.html. </note>
Reference: [56] <author> R. P. Wooster and M. Abrams, </author> <title> "Proxy caching that estimates page load delays," </title> <booktitle> in Proceedings of the Sixth International WWW Conference, </booktitle> <month> April </month> <year> 1997. </year> <note> http://www6.nttlabs.com/index_ by_topic.html#server. 25 </note>
References-found: 56

