URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/98-009.ps.Z
Refering-URL: http://www.cs.unc.edu/~eriksonc/Research/Paper/Index.html
Root-URL: http://www.cs.unc.edu
Title: Simplification Culling of Static and Dynamic Scene Graphs  
Author: Carl Erikson, Dinesh Manocha 
Address: Chapel Hill  
Affiliation: Department of Computer Science University of North Carolina at  
Abstract: We present a new approach for simplifying large polygonal environments composed of hundreds or thousands of objects. Our algorithm represents the environment using a scene graph and automatically computes levels of detail (LOD) for each node in the graph. For drastic simplification, the algorithm uses hierarchical levels of detail (HLOD) to represent the simplified geometry of whole portions of the scene graph. When HLOD are rendered, the algorithm can ignore these portions, thereby performing simplification culling . For dynamic environments, HLOD are incrementally computed on the fly. The algorithm is applicable to all models and involves no user intervention. It generates high quality and drastic simplifications and has been applied to CAD models composed of hundreds of thousands of polygons. In practice, it achieves significant speedups in rendering large static and dynamic environments with little loss in image quality. Keywords : simplification, levels-of-detail, dynamic, environments, walkthroughs, interactive display 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Airey, J. Rohlf, and F. Brooks. </author> <title> Towards image realism with interactive update rates in complex virtual building environments. </title> <booktitle> Proc. of ACM Symposium on Interactive 3D Graphics , pp. </booktitle> <pages> 41-50, </pages> <year> 1990. </year>
Reference-contexts: Another technique for handling large static environments is based on view-dependent simplification [18, 25, 41]. More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. These include visibility culling <ref> [1, 7, 14, 38, 42] </ref>, dynamic tessellation of spline models [23, 28] and image-based representations [2, 26, 35] . Many of these algorithms can be combined with LOD to render large polygonal environments. 2.5 Dynamic Environments There is considerable literature in computational geometry and GIS related to dynamic environments.
Reference: [2] <author> D. G. Aliaga. </author> <title> Visualization of Complex Models using Dynamic Texture- based Simplification. </title> <journal> Proc. of IEEE Visualization'96 , pp. </journal> <pages> 101-106, </pages> <year> 1996. </year>
Reference-contexts: More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. These include visibility culling [1, 7, 14, 38, 42], dynamic tessellation of spline models [23, 28] and image-based representations <ref> [2, 26, 35] </ref> . Many of these algorithms can be combined with LOD to render large polygonal environments. 2.5 Dynamic Environments There is considerable literature in computational geometry and GIS related to dynamic environments.
Reference: [3] <author> M. J. Atallah. </author> <title> Dynamic computational geometry. </title> <booktitle> In Proc. 24th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci. </institution> , <year> 1983, </year> <pages> pp. 92-99. </pages>
Reference-contexts: Most of the work in computational geometry focuses on the design of dynamic data structures and their applications to proximity and point location problems <ref> [3, 12, 13] </ref>. Sudarsky & Gotsman [37] present an output sensitive visibility algorithm that minimizes the time required to update a hierarchical data structure. Torres [39] use binary space partition trees for visualization of dynamic scenes.
Reference: [4] <author> C. Bajaj and D. Schikore. </author> <title> Error-bounded reduction of triangle meshes with multivariate data. </title> <booktitle> SPIE , vol. </booktitle> <volume> 2656, </volume> <pages> pp. 34-45, </pages> <year> 1996. </year>
Reference-contexts: Different algorithms have been proposed, and they vary in terms of assumptions on the input model, underlying geometric operations used for computing the simplified model, error metrics, and the quality of the approximations generated. The common set of geometric operations correspond to vertex removal and retriangulating holes <ref> [4, 22, 34, 36, 40] </ref> , edge collapses [5, 15, 19, 20, 29] , and triangle removal [16]. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh.
Reference: [5] <author> J. Cohen, D. Manocha, and M. Olano. </author> <title> Simplifying Polygonal Models Using Successive Mappings. </title> <journal> Proc. of IEEE Visualization'97 , pp. </journal> <pages> 395-402, </pages> <year> 1997. </year>
Reference-contexts: The common set of geometric operations correspond to vertex removal and retriangulating holes [4, 22, 34, 36, 40] , edge collapses <ref> [5, 15, 19, 20, 29] </ref> , and triangle removal [16]. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes [19].
Reference: [6] <author> J. Cohen, A. Varshney, D. Manocha, G. Turk, H. Weber, P. Agarwal, F. Brooks, and W. Wright. </author> <title> Simplification Envelopes. </title> <booktitle> In SIGGRAPH'96 Conference Proceedings , 1996, </booktitle> <pages> pp. 119-128. </pages>
Reference-contexts: Most of these algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes <ref> [6] </ref> and progressive meshes [19]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by [24, 25, 30, 31]. These algorithms allow topological changes as the model is simplified. <p> The vertex clustering algorithm proposed by Rossignac and Borrel [30] is used in BRUSH [32] and applied to a number of CAD models. Similarly, Cohen et al. <ref> [6] </ref> use LOD generated by simplification envelopes along with a Performer scene graph representation on CAD models. Another technique for handling large static environments is based on view-dependent simplification [18, 25, 41].
Reference: [7] <author> S. Coorg and S. Teller. </author> <title> Real-time occlusion culling for models with large occluders. </title> <booktitle> Proc. of 1997 Symposium on Interactive 3D Graphics , pp. </booktitle> <pages> 83-90, </pages> <year> 1997. </year>
Reference-contexts: Another technique for handling large static environments is based on view-dependent simplification [18, 25, 41]. More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. These include visibility culling <ref> [1, 7, 14, 38, 42] </ref>, dynamic tessellation of spline models [23, 28] and image-based representations [2, 26, 35] . Many of these algorithms can be combined with LOD to render large polygonal environments. 2.5 Dynamic Environments There is considerable literature in computational geometry and GIS related to dynamic environments.
Reference: [8] <author> G. Drettakis and F. Sillion. </author> <title> Interactive Update of Global Illumination Using a LineSpace Hierarchy. </title> <booktitle> SIGGRAPH'97 Conference Proceedings , pp. </booktitle> <pages> 57-64, </pages> <year> 1997. </year>
Reference-contexts: Sudarsky & Gotsman [37] present an output sensitive visibility algorithm that minimizes the time required to update a hierarchical data structure. Torres [39] use binary space partition trees for visualization of dynamic scenes. More recently, Drettakis and Sillion <ref> [8] </ref> present an algorithm which provides interactive update rates of global illumination for scenes with moving objects.
Reference: [9] <author> M. Eck, T. DeRose, T. Duchamp, H. Hoppe, M. Lounsbery, and W. Stuetzle. </author> <title> Multiresolution Analysis of Arbitrary Meshes. </title> <booktitle> In SIGGRAPH'95 , 1995, </booktitle> <pages> pp. 173-182. </pages>
Reference-contexts: Most of these algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis <ref> [9] </ref>, simplification envelopes [6] and progressive meshes [19]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by [24, 25, 30, 31]. These algorithms allow topological changes as the model is simplified.
Reference: [10] <author> J. El-Sana and A. Varshney. </author> <title> Controlled Simplification of Genus for Polygonal Models. </title> <journal> Proc. of IEEE Visualization'97 , pp. </journal> <pages> 403-410, </pages> <year> 1997. </year>
Reference-contexts: These algorithms allow topological changes as the model is simplified. Schroeder [33] present a topology modifying decimation algorithm that can guarantee a requested reduction level. He et al. [17] and El-Sana and Varshney <ref> [10] </ref> demonstrate algorithms for controlled simplification of genus of polyhedral objects. 2.2 Simplification Using Quadric Error Metrics Recently, Garland and Heckbert [11] presented a surface simplification algorithm using quadric error metrics. It uses vertex collapse as its basic simplification operation. <p> Rossignac and Borrel [30] and Low and Tan [24] use vertex clustering to topologically simplify models very efficiently and robustly. Although these algorithms are very quick, the quality of their approximations is too low for our purposes. El-Sana and Varshney <ref> [10] </ref> control the genus of an object while simplifying, but does not merge disjoint objects. Not many simplification algorithms have focussed on environments of objects except Luebke and Erikson's [25] hierarchical dynamic simplification. The algorithm builds a hierarchical tree of vertices and uses a view-dependent system during rendering.

Reference: [12] <author> C. M. Gold. </author> <title> Dynamic spatial data structures - the Voronoi approach. </title> <booktitle> In Proc. Canad. Conf. </booktitle> <address> GIS . Ottawa, </address> <year> 1992, </year> <pages> pp. 245-255. </pages>
Reference-contexts: Most of the work in computational geometry focuses on the design of dynamic data structures and their applications to proximity and point location problems <ref> [3, 12, 13] </ref>. Sudarsky & Gotsman [37] present an output sensitive visibility algorithm that minimizes the time required to update a hierarchical data structure. Torres [39] use binary space partition trees for visualization of dynamic scenes.
Reference: [13] <author> M. Goodrich and R. Tamassia. </author> <title> Dynamic trees and dynamic point location. </title> <booktitle> In Proc. 23rd Annu. ACM Sympos. Theory Comput. </booktitle> , <year> 1991, </year> <pages> pp. </pages> <month> 523-533.s </month>
Reference-contexts: Most of the work in computational geometry focuses on the design of dynamic data structures and their applications to proximity and point location problems <ref> [3, 12, 13] </ref>. Sudarsky & Gotsman [37] present an output sensitive visibility algorithm that minimizes the time required to update a hierarchical data structure. Torres [39] use binary space partition trees for visualization of dynamic scenes.
Reference: [14] <author> N. Greene, M. Kass, and G. Miller. </author> <title> Hierarchical Z-Buffer Visibility. </title> <booktitle> In Proc. of ACM Siggraph , 1993, </booktitle> <pages> pp. </pages> <address> 231 -238. </address>
Reference-contexts: Another technique for handling large static environments is based on view-dependent simplification [18, 25, 41]. More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. These include visibility culling <ref> [1, 7, 14, 38, 42] </ref>, dynamic tessellation of spline models [23, 28] and image-based representations [2, 26, 35] . Many of these algorithms can be combined with LOD to render large polygonal environments. 2.5 Dynamic Environments There is considerable literature in computational geometry and GIS related to dynamic environments.
Reference: [15] <author> A. Gueziec. </author> <title> Surface Simplification with Variable Tolerance. </title> <booktitle> In Second Annual Intl. Symp. on Medical Robotics and Computer Assisted Surgery (MRCAS '95) , November 1995, </booktitle> <pages> pp. 132-139. </pages>
Reference-contexts: The common set of geometric operations correspond to vertex removal and retriangulating holes [4, 22, 34, 36, 40] , edge collapses <ref> [5, 15, 19, 20, 29] </ref> , and triangle removal [16]. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes [19].
Reference: [16] <author> B. Hamann. </author> <title> A Data Reduction Scheme for Triangulated Surfaces. </title> <journal> Comput. Aided Geom. Design , vol. </journal> <volume> 11, </volume> <pages> pp. 197-214, </pages> <year> 1994. </year>
Reference-contexts: The common set of geometric operations correspond to vertex removal and retriangulating holes [4, 22, 34, 36, 40] , edge collapses [5, 15, 19, 20, 29] , and triangle removal <ref> [16] </ref>. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes [19]. All of these algorithms have been designed for manifold surfaces.
Reference: [17] <author> T. He, L. Hong, A. Varshney, and S. Wang. </author> <title> Controlled Topology Simplification. </title> <journal> IEEE Transactions on Visualization and Computer Graphics , vol. </journal> <volume> 2, </volume> <pages> pp. 171-814, </pages> <year> 1996. </year>
Reference-contexts: For general polygonal models, algorithms based on vertex clustering have been proposed by [24, 25, 30, 31]. These algorithms allow topological changes as the model is simplified. Schroeder [33] present a topology modifying decimation algorithm that can guarantee a requested reduction level. He et al. <ref> [17] </ref> and El-Sana and Varshney [10] demonstrate algorithms for controlled simplification of genus of polyhedral objects. 2.2 Simplification Using Quadric Error Metrics Recently, Garland and Heckbert [11] presented a surface simplification algorithm using quadric error metrics. It uses vertex collapse as its basic simplification operation.
Reference: [18] <author> H. Hoppe. </author> <title> View-Dependent Refinement of Progressive Meshes. </title> <booktitle> SIGGRAPH'97 Conference Proceedings , pp. </booktitle> <volume> 189 198, </volume> <year> 1997. </year>
Reference-contexts: Similarly, Cohen et al. [6] use LOD generated by simplification envelopes along with a Performer scene graph representation on CAD models. Another technique for handling large static environments is based on view-dependent simplification <ref> [18, 25, 41] </ref>. More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. <p> Most of all, it must efficiently produce high quality approximations when performing drastic reductions of models. This property is crucial for creating and updating HLOD. All design choices in this paper are motivated by these criteria. 3.1 View-Dependent vs. View-Independent Many researchers <ref> [18, 25, 41] </ref> have proposed using view-dependent simplification for large models. These algorithms adaptively simplify across the surface of an object. They store simplifications in a hierarchical tree of vertices produced by collapse operations and traverse this tree when rendering.
Reference: [19] <author> Hugues Hoppe. </author> <title> Progressive Meshes. </title> <booktitle> SIGGRAPH 96 Conference Proceedings , pp. </booktitle> <pages> 99-108, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: The common set of geometric operations correspond to vertex removal and retriangulating holes [4, 22, 34, 36, 40] , edge collapses <ref> [5, 15, 19, 20, 29] </ref> , and triangle removal [16]. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes [19]. <p> Most of these algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes <ref> [19] </ref>. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by [24, 25, 30, 31]. These algorithms allow topological changes as the model is simplified. <p> They store simplifications in a hierarchical tree of vertices produced by collapse operations and traverse this tree when rendering. Different types of selective refinement criteria based on surface orientation and screenspace projected error are used. Through the use of geomorphs for progressive meshes <ref> [19] </ref> and adaptive simplification at the vertex level, rather than the object level, view-dependent algorithms provide an elegant solution to the popping problem associated with static LOD. Also, since view-dependent systems render spatially large objects using adaptive simplification, they eliminate the inefficiency of using static LOD to represent them.
Reference: [20] <author> Hugues Hoppe, Tony DeRose, Tom Duchamp, John McDonald, and Werner Stuetzle. </author> <title> Mesh Optimization. </title> <booktitle> In Computer Graphics (SIGGRAPH '93 Proceedings) , vol. </booktitle> <volume> 27, </volume> <editor> J. T. Kajiya, Ed., </editor> <month> August </month> <year> 1993, </year> <pages> pp. 19-26. </pages>
Reference-contexts: The common set of geometric operations correspond to vertex removal and retriangulating holes [4, 22, 34, 36, 40] , edge collapses <ref> [5, 15, 19, 20, 29] </ref> , and triangle removal [16]. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes [19].
Reference: [21] <author> W. Jepson, R. Liggett, and S. Friedman. </author> <title> An Environment for Real-time Urban Simulation. </title> <booktitle> 1995 Symposium on Interactive 3D Graphics , pp. </booktitle> <pages> 165-166, </pages> <year> 1995. </year>
Reference-contexts: Torres [39] use binary space partition trees for visualization of dynamic scenes. More recently, Drettakis and Sillion [8] present an algorithm which provides interactive update rates of global illumination for scenes with moving objects. Jepson et al. <ref> [21] </ref> describe an environment for real-time urban simulation that allows dynamic objects to be included in the scene. 3 Overview In this section, we give an overview of our approach and highlight many issues of its design.
Reference: [22] <author> A. D. Kalvin and R. H. Taylor. Superfaces: </author> <title> Polyhedral Approximation with Bounded Error. </title> <booktitle> In Proceedings of SPIE Medical Imaging 1994 , vol. </booktitle> <volume> 2164, </volume> <editor> Y. Kim, Ed.: </editor> <booktitle> SPIE, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: Different algorithms have been proposed, and they vary in terms of assumptions on the input model, underlying geometric operations used for computing the simplified model, error metrics, and the quality of the approximations generated. The common set of geometric operations correspond to vertex removal and retriangulating holes <ref> [4, 22, 34, 36, 40] </ref> , edge collapses [5, 15, 19, 20, 29] , and triangle removal [16]. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh.
Reference: [23] <author> S. Kumar, D. Manocha, H. Zhang, and K. Hoff. </author> <title> Accelerated Walkthrough of Large Spline Models. </title> <booktitle> Proc. of ACM Symposium on Interactive 3D Graphics , pp. </booktitle> <pages> 91-102, </pages> <year> 1997. </year>
Reference-contexts: More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. These include visibility culling [1, 7, 14, 38, 42], dynamic tessellation of spline models <ref> [23, 28] </ref> and image-based representations [2, 26, 35] . Many of these algorithms can be combined with LOD to render large polygonal environments. 2.5 Dynamic Environments There is considerable literature in computational geometry and GIS related to dynamic environments.
Reference: [24] <author> K. Low and T. Tan. </author> <title> Model Simplification using Vertex Clustering. </title> <booktitle> Proc. of 1997 Symposium on Interactive 3D Graphics , pp. </booktitle> <pages> 75-82, </pages> <year> 1997. </year>
Reference-contexts: Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes [19]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by <ref> [24, 25, 30, 31] </ref>. These algorithms allow topological changes as the model is simplified. Schroeder [33] present a topology modifying decimation algorithm that can guarantee a requested reduction level. <p> Popovic and Hoppe [27] present an algorithm to produce a progressive simplicial complex. This algorithm is elegant, but is too slow for HLOD recomputation and uses primitives other than polygons. Rossignac and Borrel [30] and Low and Tan <ref> [24] </ref> use vertex clustering to topologically simplify models very efficiently and robustly. Although these algorithms are very quick, the quality of their approximations is too low for our purposes. El-Sana and Varshney [10] control the genus of an object while simplifying, but does not merge disjoint objects.
Reference: [25] <author> D. Luebke and C. Erikson. </author> <title> View-Dependent Simplification Of Arbitrary Polygonal Environments. </title> <booktitle> SIGGRAPH'97 Conference Proceedings , pp. </booktitle> <pages> 199-208, </pages> <year> 1997. </year>
Reference-contexts: Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes [19]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by <ref> [24, 25, 30, 31] </ref>. These algorithms allow topological changes as the model is simplified. Schroeder [33] present a topology modifying decimation algorithm that can guarantee a requested reduction level. <p> Similarly, Cohen et al. [6] use LOD generated by simplification envelopes along with a Performer scene graph representation on CAD models. Another technique for handling large static environments is based on view-dependent simplification <ref> [18, 25, 41] </ref>. More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. <p> Most of all, it must efficiently produce high quality approximations when performing drastic reductions of models. This property is crucial for creating and updating HLOD. All design choices in this paper are motivated by these criteria. 3.1 View-Dependent vs. View-Independent Many researchers <ref> [18, 25, 41] </ref> have proposed using view-dependent simplification for large models. These algorithms adaptively simplify across the surface of an object. They store simplifications in a hierarchical tree of vertices produced by collapse operations and traverse this tree when rendering. <p> Although these algorithms are very quick, the quality of their approximations is too low for our purposes. El-Sana and Varshney [10] control the genus of an object while simplifying, but does not merge disjoint objects. Not many simplification algorithms have focussed on environments of objects except Luebke and Erikson's <ref> [25] </ref> hierarchical dynamic simplification. The algorithm builds a hierarchical tree of vertices and uses a view-dependent system during rendering. It is general, robust, and can drastically simplify every object in a static environment to a single polygon.
Reference: [26] <author> Paulo W. C. Maciel and Peter Shirley. </author> <title> Visual Navigation of Large Environments Using Textured Clusters. </title> <booktitle> Proc. of 1995 Symposium on Interactive 3D Graphics , pp. </booktitle> <pages> 95-102, </pages> <year> 1995. </year>
Reference-contexts: More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. These include visibility culling [1, 7, 14, 38, 42], dynamic tessellation of spline models [23, 28] and image-based representations <ref> [2, 26, 35] </ref> . Many of these algorithms can be combined with LOD to render large polygonal environments. 2.5 Dynamic Environments There is considerable literature in computational geometry and GIS related to dynamic environments.
Reference: [27] <author> J. Popovic and H. Hoppe. </author> <title> Progressive Simplicial Complexes. </title> <booktitle> SIGGRAPH'97 Conference Proceedings , pp. </booktitle> <pages> 217-224, </pages> <year> 1997. </year>
Reference-contexts: It consists of 883,537 triangles and 356 objects. 9 merging between unconnected regions of the model. Schroeder [33] presents another general and robust algorithm capable of producing guaranteed levels of reduction. However, it does not merge objects to the degree we require for HLOD computation. Popovic and Hoppe <ref> [27] </ref> present an algorithm to produce a progressive simplicial complex. This algorithm is elegant, but is too slow for HLOD recomputation and uses primitives other than polygons. Rossignac and Borrel [30] and Low and Tan [24] use vertex clustering to topologically simplify models very efficiently and robustly.
Reference: [28] <author> A. Rockwood, K. Heaton, and T. Davis. </author> <title> Real-time rendering of Trimmed Surfaces. </title> <booktitle> In Proceedings of ACM Siggraph , 1989, </booktitle> <pages> pp. 107-17. </pages>
Reference-contexts: More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. These include visibility culling [1, 7, 14, 38, 42], dynamic tessellation of spline models <ref> [23, 28] </ref> and image-based representations [2, 26, 35] . Many of these algorithms can be combined with LOD to render large polygonal environments. 2.5 Dynamic Environments There is considerable literature in computational geometry and GIS related to dynamic environments.
Reference: [29] <author> R. Ronfard and J. Rossignac. </author> <title> Full-range approximation of triangulated polyhedra. </title> <journal> Computer Graphics Forum , vol. </journal> <volume> 15, </volume> <pages> pp. 67-76, 462, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: The common set of geometric operations correspond to vertex removal and retriangulating holes [4, 22, 34, 36, 40] , edge collapses <ref> [5, 15, 19, 20, 29] </ref> , and triangle removal [16]. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes [19].
Reference: [30] <author> J. Rossignac and P. Borrel. </author> <title> Multi-Resolution 3D Approximations for Rendering. </title> <booktitle> In Modeling in Computer Graphics : Springer-Verlag, </booktitle> <year> 1993, </year> <pages> pp. 455-465. </pages>
Reference-contexts: Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes [19]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by <ref> [24, 25, 30, 31] </ref>. These algorithms allow topological changes as the model is simplified. Schroeder [33] present a topology modifying decimation algorithm that can guarantee a requested reduction level. <p> Based on the viewpoint, the portion of the hierarchy outside the view frustum is culled away and the rendering algorithm uses a suitable LOD for each visible node. The vertex clustering algorithm proposed by Rossignac and Borrel <ref> [30] </ref> is used in BRUSH [32] and applied to a number of CAD models. Similarly, Cohen et al. [6] use LOD generated by simplification envelopes along with a Performer scene graph representation on CAD models. Another technique for handling large static environments is based on view-dependent simplification [18, 25, 41]. <p> However, it does not merge objects to the degree we require for HLOD computation. Popovic and Hoppe [27] present an algorithm to produce a progressive simplicial complex. This algorithm is elegant, but is too slow for HLOD recomputation and uses primitives other than polygons. Rossignac and Borrel <ref> [30] </ref> and Low and Tan [24] use vertex clustering to topologically simplify models very efficiently and robustly. Although these algorithms are very quick, the quality of their approximations is too low for our purposes.
Reference: [31] <author> G. Schaufler and W. Sturzlinger. </author> <title> Generating Multiple Levels of Detail from Polygonal Geometry Models. </title> <booktitle> Virtual Environments'95 (Eurographics Workshop) , pp. </booktitle> <pages> 33-41, </pages> <year> 1995. </year>
Reference-contexts: Other algorithms include those based on multi-resolution wavelet analysis [9], simplification envelopes [6] and progressive meshes [19]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by <ref> [24, 25, 30, 31] </ref>. These algorithms allow topological changes as the model is simplified. Schroeder [33] present a topology modifying decimation algorithm that can guarantee a requested reduction level.
Reference: [32] <author> B. Schneider, P. Borrel, J. Menon, J. Mittleman, and J. Rossignac. </author> <title> Brush as a walkthrough system for architectural models. </title> <booktitle> In Fifth Eurographics Workshop on Rendering , July 1994, </booktitle> <pages> pp. 389-399. </pages>
Reference-contexts: Based on the viewpoint, the portion of the hierarchy outside the view frustum is culled away and the rendering algorithm uses a suitable LOD for each visible node. The vertex clustering algorithm proposed by Rossignac and Borrel [30] is used in BRUSH <ref> [32] </ref> and applied to a number of CAD models. Similarly, Cohen et al. [6] use LOD generated by simplification envelopes along with a Performer scene graph representation on CAD models. Another technique for handling large static environments is based on view-dependent simplification [18, 25, 41].
Reference: [33] <author> W. Schroeder. </author> <title> A Topology Modifying Progressive Decimation Algorithm. </title> <journal> Proc. of IEEE Visualization'97 , pp. </journal> <pages> 205-212, </pages> <year> 1997. </year>
Reference-contexts: All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by [24, 25, 30, 31]. These algorithms allow topological changes as the model is simplified. Schroeder <ref> [33] </ref> present a topology modifying decimation algorithm that can guarantee a requested reduction level. <p> It produces very impressive approximations of high quality. To meet the needs of our driving application, we extended this algorithm to handle attributes and to automatically promote dynamic scenarios. It consists of 883,537 triangles and 356 objects. 9 merging between unconnected regions of the model. Schroeder <ref> [33] </ref> presents another general and robust algorithm capable of producing guaranteed levels of reduction. However, it does not merge objects to the degree we require for HLOD computation. Popovic and Hoppe [27] present an algorithm to produce a progressive simplicial complex.
Reference: [34] <author> W. J. Schroeder, J. A. Zarge, and W. E. Lorensen. </author> <title> Decimation of Triangle Meshes. </title> <booktitle> In Proc. of ACM Siggraph , 1992, </booktitle> <pages> pp. 65-70. </pages>
Reference-contexts: Different algorithms have been proposed, and they vary in terms of assumptions on the input model, underlying geometric operations used for computing the simplified model, error metrics, and the quality of the approximations generated. The common set of geometric operations correspond to vertex removal and retriangulating holes <ref> [4, 22, 34, 36, 40] </ref> , edge collapses [5, 15, 19, 20, 29] , and triangle removal [16]. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh.
Reference: [35] <author> J. Shade, D. Lischinski, T. DeRose, J. Snyder, and D. Salesin. </author> <title> Hierarchical Image Caching for Accelerate Walkthroughs of Complex Environments. </title> <booktitle> In Proc. of ACM Siggraph , New Orleans, </booktitle> <year> 1996, </year> . 
Reference-contexts: More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. These include visibility culling [1, 7, 14, 38, 42], dynamic tessellation of spline models [23, 28] and image-based representations <ref> [2, 26, 35] </ref> . Many of these algorithms can be combined with LOD to render large polygonal environments. 2.5 Dynamic Environments There is considerable literature in computational geometry and GIS related to dynamic environments.
Reference: [36] <author> M. Soucy and D. Laurendeau. </author> <title> Multi-Resolution Surface Modeling Based on Hierarchical Triangulation. </title> <booktitle> Computer Vision and Image Understanding , vol. </booktitle> <volume> 63, </volume> <pages> pp. 1 14, </pages> <year> 1996. </year>
Reference-contexts: Different algorithms have been proposed, and they vary in terms of assumptions on the input model, underlying geometric operations used for computing the simplified model, error metrics, and the quality of the approximations generated. The common set of geometric operations correspond to vertex removal and retriangulating holes <ref> [4, 22, 34, 36, 40] </ref> , edge collapses [5, 15, 19, 20, 29] , and triangle removal [16]. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh.
Reference: [37] <author> O. Sudarsky and C. Gotsman. </author> <title> Output sensitive visibility algorithms for dynamic scenes with applications to Virtual Reality. </title> <journal> Computer Graphics Forum , vol. </journal> <volume> 15, </volume> <pages> pp. 249-58, </pages> <year> 1996. </year>
Reference-contexts: Most of the work in computational geometry focuses on the design of dynamic data structures and their applications to proximity and point location problems [3, 12, 13]. Sudarsky & Gotsman <ref> [37] </ref> present an output sensitive visibility algorithm that minimizes the time required to update a hierarchical data structure. Torres [39] use binary space partition trees for visualization of dynamic scenes.
Reference: [38] <author> S. Teller and C. H. Sequin. </author> <title> Visibility Preprocessing for interactive walkthroughs. </title> <booktitle> In Proc. of ACM Siggraph , 1991, </booktitle> <pages> pp. 61-69. </pages>
Reference-contexts: Another technique for handling large static environments is based on view-dependent simplification [18, 25, 41]. More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. These include visibility culling <ref> [1, 7, 14, 38, 42] </ref>, dynamic tessellation of spline models [23, 28] and image-based representations [2, 26, 35] . Many of these algorithms can be combined with LOD to render large polygonal environments. 2.5 Dynamic Environments There is considerable literature in computational geometry and GIS related to dynamic environments.
Reference: [39] <author> Enric Torres. </author> <title> Optimization of the Binary Space Partition Algorithm (BSP) for the Visualization of Dynamic Scenes. In Eurographics '90 , C. </title> <editor> E. V. a. D. A. Duce, Ed.: </editor> <publisher> North-Holland, </publisher> <month> September </month> <year> 1990, </year> <pages> pp. 507-518. </pages>
Reference-contexts: Most of the work in computational geometry focuses on the design of dynamic data structures and their applications to proximity and point location problems [3, 12, 13]. Sudarsky & Gotsman [37] present an output sensitive visibility algorithm that minimizes the time required to update a hierarchical data structure. Torres <ref> [39] </ref> use binary space partition trees for visualization of dynamic scenes. More recently, Drettakis and Sillion [8] present an algorithm which provides interactive update rates of global illumination for scenes with moving objects.
Reference: [40] <author> G. Turk. </author> <title> ReTiling Polygonal Surfaces. </title> <booktitle> In Proc. of ACM Siggraph , 1992, </booktitle> <pages> pp. 55-64. </pages>
Reference-contexts: Different algorithms have been proposed, and they vary in terms of assumptions on the input model, underlying geometric operations used for computing the simplified model, error metrics, and the quality of the approximations generated. The common set of geometric operations correspond to vertex removal and retriangulating holes <ref> [4, 22, 34, 36, 40] </ref> , edge collapses [5, 15, 19, 20, 29] , and triangle removal [16]. Most of these algorithms assume that the input model is a manifold and represented as a valid mesh.
Reference: [41] <author> J. Xia, J. El- Sana, and A. Varshney. </author> <title> Adaptive Real-Time Level-of-detail-based Rendering for Polygonal Models. </title> <journal> IEEE Transactions on Visualization and Computer Graphics , vol. </journal> <volume> 3, </volume> <pages> pp. 171-183, </pages> <year> 1997. </year>
Reference-contexts: Similarly, Cohen et al. [6] use LOD generated by simplification envelopes along with a Performer scene graph representation on CAD models. Another technique for handling large static environments is based on view-dependent simplification <ref> [18, 25, 41] </ref>. More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. <p> Most of all, it must efficiently produce high quality approximations when performing drastic reductions of models. This property is crucial for creating and updating HLOD. All design choices in this paper are motivated by these criteria. 3.1 View-Dependent vs. View-Independent Many researchers <ref> [18, 25, 41] </ref> have proposed using view-dependent simplification for large models. These algorithms adaptively simplify across the surface of an object. They store simplifications in a hierarchical tree of vertices produced by collapse operations and traverse this tree when rendering.
Reference: [42] <author> H. Zhang, D. Manocha, T. Hudson, and K. Hoff. </author> <title> Visibility Culling Using Hierarchical Occlusion Maps. </title> <booktitle> Proc. of ACM SIGGRAPH , pp. </booktitle> <pages> 77-88, </pages> <year> 1997. </year>
Reference-contexts: Another technique for handling large static environments is based on view-dependent simplification [18, 25, 41]. More details about this technique are given in Section 3.1. 2.4 Interactive Display of Large Models Many techniques besides LOD have been proposed for interactive display of large environments. These include visibility culling <ref> [1, 7, 14, 38, 42] </ref>, dynamic tessellation of spline models [23, 28] and image-based representations [2, 26, 35] . Many of these algorithms can be combined with LOD to render large polygonal environments. 2.5 Dynamic Environments There is considerable literature in computational geometry and GIS related to dynamic environments.
References-found: 41

