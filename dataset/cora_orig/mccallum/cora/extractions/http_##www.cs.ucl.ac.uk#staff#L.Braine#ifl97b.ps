URL: http://www.cs.ucl.ac.uk/staff/L.Braine/ifl97b.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/L.Braine/researchdocs.html
Root-URL: http://www.cs.ucl.ac.uk
Email: L.Braine@cs.ucl.ac.uk  
Title: The Implementation of CLOVER: A Translation from OOFP to FP  
Author: Lee Braine 
Address: Gower Street, London WC1E 6BT, UK  
Affiliation: Department of Computer Science, University College London,  
Abstract: There have been many attempts to integrate object-oriented and functional programming. Solving the conflicting requirements is difficult and only recently has a language, CLOVER, been designed that is purely functional and purely object-oriented and retains complete type safety. In this paper, we present the implementation of CLOVER: the object-oriented features are translated away in stages and the combination of these stages provides a complete transformation from object-oriented functional programming to functional programming. 
Abstract-found: 1
Intro-found: 1
Reference: [AC96] <author> M. Abadi and L. Cardelli. </author> <title> A Theory of Objects. </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The languages typically abandon one or more key features from either OOP or FP as part of the integration. The formalisation of OOP covers many aspects, including a -calculus of objects [FHM94] and an object calculi <ref> [AC96] </ref>. The reader is referred to [CW85] for foundational work in this area. One of the key features of CLOVER is the combination of both dynamic typing and complete type safety.
Reference: [AF95] <author> A. Aiken and M. Fahndrich. </author> <title> Dynamic Typing and Subtype Inference. </title> <booktitle> Conference on Functional Programming Languages and Computer Architecture (FPCA'95), </booktitle> <pages> pages 182-191, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The reader is referred to [CW85] for foundational work in this area. One of the key features of CLOVER is the combination of both dynamic typing and complete type safety. Previous work in this area includes <ref> [AM90, AF95] </ref>, but this typically abandons complete type safety. 3 Overview of The Transformation Rules In this section, we present an overview of the CLOVER transformation rules and introduce our notations. A CLOVER program is transformed into a standard functional program, then compiled and executed.
Reference: [AG93] <author> H. Ait-Kaci and J. Garrigue. </author> <title> Label-Selective -Calculus, Syntax and Confluence. </title> <booktitle> In Proceedings of the 13th International Conf. on Foundations of Software Technology and Theoretical Computer Science, Lecture Notes in Computer Science 761, </booktitle> <pages> pages 24-40, </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: There are several other subsidiary components which have been omitted. These include record operations, default objects, input/output and error handling. Note that standard record operations (such as labelled field selection and update) have been presented many times in the lit erature, for example <ref> [AG93] </ref>. 7 Example Translation In this section, we provide an example APC IO program and the result of its translation into TC. To reduce complexity, all type information is omitted.
Reference: [AH87] <author> G. Agha and C. Hewitt. </author> <title> Actors: A Conceptual Foundation for Concurrent Object-Oriented Programming. </title> <editor> In B. Shriver and P. Wegner, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <pages> pages 47-74, </pages> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: despatch based on a single distinguished object which is always the last argument to a curried method application, and a visual programming interface providing ? During the course of this work, Lee Braine was supported by an EPSRC research studentship and a CASE award from Andersen Consulting. the Actor model <ref> [AH87] </ref> of object identity based on behaviours rather than mutable state. FP is supported through features such as complete (statically-determined) type safety, higher-order methods, lazy evaluation, curried partial applications, polymorphism and referential transparency. This paper presents the key stages of an implementation of CLOVER.
Reference: [AM90] <author> A. Aiken and B. Murphy. </author> <title> Static Type Inference in a Dynamically Typed Language. </title> <booktitle> In Proceedings of the 18th ACM Symposium on Principles of Programming Languages (POPL'91), </booktitle> <pages> pages 279-290, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: The reader is referred to [CW85] for foundational work in this area. One of the key features of CLOVER is the combination of both dynamic typing and complete type safety. Previous work in this area includes <ref> [AM90, AF95] </ref>, but this typically abandons complete type safety. 3 Overview of The Transformation Rules In this section, we present an overview of the CLOVER transformation rules and introduce our notations. A CLOVER program is transformed into a standard functional program, then compiled and executed.
Reference: [AP93] <author> H. Ait-Kaci and A. </author> <title> Podelski. Towards a Meaning of LIFE. </title> <journal> Journal of Logic Programming, </journal> 16(3&4):195-234, August 1993. 
Reference-contexts: In this section, we present an overview of the relevant work in these these areas. The reader seeking a more detailed survey should refer to [BC96]. There have been many languages attempting to integrate OOP and FP, the closest to CLOVER being Kea [MHH91], Rapide [MMM91], HOP [DV96], LIFE <ref> [AP93] </ref>, Objective ML [RV96] and Object ML [RR96]. None of these combine the features we require (inheritance, subsumption and dynamic method despatch from OOP and referential transparency, higher-order functions, currying, partial applications and laziness from FP) into a single completely type-safe language.
Reference: [BC96] <author> L. Braine and C. Clack. </author> <title> Introducing CLOVER: an Object-Oriented Functional Language. </title> <editor> In W. Kluge, editor, </editor> <booktitle> Implementation of Functional Languages, 8th International Workshop (IFL'96), Selected Papers, Lecture Notes in Computer Science 1268, </booktitle> <pages> pages 1-20, </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1996. </year>
Reference-contexts: 1 Introduction CLOVER <ref> [BC96, BC97a, BC97b] </ref> is a visual object-oriented functional language which fully supports both the object-oriented programming (OOP) and functional programming (FP) paradigms. Our motivation is to investigate ways in which languages can support the flexibility of OOP, yet retain the expressiveness and safety characteristics of FP. <p> We believe that CLOVER was the first language to successfully combine all of the above features. For full details of the design of the CLOVER language, and how the many design obstacles were overcome, the reader is referred to <ref> [BC96] </ref>: however, this paper repeats relevant design decisions where necessary to provide a self-contained presentation. <p> Furthermore, we can generate concise understandable code (which is more important than execution speed for our prototype implementation). In order to provide a focussed discussion, we ignore all issues related to type checking and assume that this has already been performed (as suggested in <ref> [BC96] </ref>). We similarly assume that the straightforward translation from CLOVER's visual notation, Object-Flow, to a textual code has already been performed. <p> In this section, we present an overview of the relevant work in these these areas. The reader seeking a more detailed survey should refer to <ref> [BC96] </ref>. There have been many languages attempting to integrate OOP and FP, the closest to CLOVER being Kea [MHH91], Rapide [MMM91], HOP [DV96], LIFE [AP93], Objective ML [RV96] and Object ML [RR96]. <p> APC's type system is purely object-oriented. Values can be objects (of class type), messages (of function type) or literals (of primitive type). Note the bracketed function types; these are necessary for higher-order messages so that we may identify the distinguished object | see <ref> [BC96] </ref> for details. <p> We also require the method despatchers to support standard FP features, such as curried and partially-applied methods (see <ref> [BC96] </ref> for details of the design of CLOVER's curried message application). We provide this functionality using explicit despatchers, one for each method.
Reference: [BC97a] <author> L. Braine and C. Clack. </author> <title> An Object-Oriented Functional Approach to Information Systems Engineering. </title> <booktitle> In Proceedings of the CAiSE'97 4th Doctoral Consortium on Advanced Information Systems Engineering, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: 1 Introduction CLOVER <ref> [BC96, BC97a, BC97b] </ref> is a visual object-oriented functional language which fully supports both the object-oriented programming (OOP) and functional programming (FP) paradigms. Our motivation is to investigate ways in which languages can support the flexibility of OOP, yet retain the expressiveness and safety characteristics of FP.
Reference: [BC97b] <author> L. Braine and C. Clack. Object-Flow. </author> <booktitle> In Proceedings of the 13th IEEE Symposium on Visual Languages (VL'97), </booktitle> <pages> pages 418-419, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: 1 Introduction CLOVER <ref> [BC96, BC97a, BC97b] </ref> is a visual object-oriented functional language which fully supports both the object-oriented programming (OOP) and functional programming (FP) paradigms. Our motivation is to investigate ways in which languages can support the flexibility of OOP, yet retain the expressiveness and safety characteristics of FP.
Reference: [CB97] <author> C. Clack and L. </author> <title> Braine. </title> <booktitle> Object-Oriented Functional Spreadsheets. In Proceedings of the 10th Glasgow Workshop on Functional Programming (GlaFP'97), </booktitle> <pages> 12 pages, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: We have yet to supply formal semantics for our visual Object-Flow notation, although we expect to use the approach outlined in [Erw97]. We also expect to continue applying the integration of OOP and FP to related areas, such as object-oriented functional spreadsheets <ref> [CB97] </ref>. There are still some areas where additional functionality is required for example, the provision of super to perform dynamic despatch as if the distinguished object has the type of its superclass.
Reference: [CW85] <author> L. Cardelli and P. Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <year> 1985. </year>
Reference-contexts: The languages typically abandon one or more key features from either OOP or FP as part of the integration. The formalisation of OOP covers many aspects, including a -calculus of objects [FHM94] and an object calculi [AC96]. The reader is referred to <ref> [CW85] </ref> for foundational work in this area. One of the key features of CLOVER is the combination of both dynamic typing and complete type safety.
Reference: [DV96] <author> L. Dami and J. Vitek. </author> <title> Introduction to HOP, a Functional and Object-Oriented Language. </title> <note> Submitted for publication, </note> <year> 1996. </year>
Reference-contexts: In this section, we present an overview of the relevant work in these these areas. The reader seeking a more detailed survey should refer to [BC96]. There have been many languages attempting to integrate OOP and FP, the closest to CLOVER being Kea [MHH91], Rapide [MMM91], HOP <ref> [DV96] </ref>, LIFE [AP93], Objective ML [RV96] and Object ML [RR96]. None of these combine the features we require (inheritance, subsumption and dynamic method despatch from OOP and referential transparency, higher-order functions, currying, partial applications and laziness from FP) into a single completely type-safe language.
Reference: [Erw97] <author> M. Erwig. </author> <title> Semantics of Visual Languages. </title> <booktitle> In Proceedings of the 13th IEEE Symposium on Visual Languages (VL'97), </booktitle> <pages> pages 300-308, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: We have implemented proofs-of-concept for key CLOVER components, including the translations presented in this paper, a simple type checker and a visual programming interface. We have yet to supply formal semantics for our visual Object-Flow notation, although we expect to use the approach outlined in <ref> [Erw97] </ref>. We also expect to continue applying the integration of OOP and FP to related areas, such as object-oriented functional spreadsheets [CB97].
Reference: [FHM94] <author> K. Fisher, F. Honsell, and J. Mitchell. </author> <title> A lambda calculus of objects and method specialization. </title> <journal> Nordic Journal of Computing, </journal> <volume> 1(1) </volume> <pages> 3-37, </pages> <month> Spring </month> <year> 1994. </year> <booktitle> Preliminary version in Proceedings of the 8th IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 26-38, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The languages typically abandon one or more key features from either OOP or FP as part of the integration. The formalisation of OOP covers many aspects, including a -calculus of objects <ref> [FHM94] </ref> and an object calculi [AC96]. The reader is referred to [CW85] for foundational work in this area. One of the key features of CLOVER is the combination of both dynamic typing and complete type safety.
Reference: [MHH91] <author> W. Mugridge, J. Hamer, and J. Hosking. </author> <title> Multi-methods in a Statically-Typed Programming Language. </title> <editor> In P. America, editor, </editor> <booktitle> Proceedings of the 5th European Conference on Object-Oriented Programming (ECOOP'91), Lecture Notes in Computer Science 512, </booktitle> <pages> pages 307-324, </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: In this section, we present an overview of the relevant work in these these areas. The reader seeking a more detailed survey should refer to [BC96]. There have been many languages attempting to integrate OOP and FP, the closest to CLOVER being Kea <ref> [MHH91] </ref>, Rapide [MMM91], HOP [DV96], LIFE [AP93], Objective ML [RV96] and Object ML [RR96]. None of these combine the features we require (inheritance, subsumption and dynamic method despatch from OOP and referential transparency, higher-order functions, currying, partial applications and laziness from FP) into a single completely type-safe language.
Reference: [MMM91] <author> J. Mitchell, S. Meldal, and N. Madhav. </author> <title> An Extension of Standard ML Modules with Subtyping and Inheritance. </title> <booktitle> In Proceedings of the 18th ACM Symposium on Principles of Programming Languages (POPL'91), </booktitle> <pages> pages 270-278, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: In this section, we present an overview of the relevant work in these these areas. The reader seeking a more detailed survey should refer to [BC96]. There have been many languages attempting to integrate OOP and FP, the closest to CLOVER being Kea [MHH91], Rapide <ref> [MMM91] </ref>, HOP [DV96], LIFE [AP93], Objective ML [RV96] and Object ML [RR96]. None of these combine the features we require (inheritance, subsumption and dynamic method despatch from OOP and referential transparency, higher-order functions, currying, partial applications and laziness from FP) into a single completely type-safe language.
Reference: [RR96] <author> J. Reppy and J. Riecke. </author> <title> Simple Objects for Standard ML. </title> <booktitle> In Proceedings of the ACM SIGPLAN '96 Conference on Programming Language Design and Implementation (PLDI), SIGPLAN Notices 31(5), </booktitle> <pages> pages 171-180, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: The reader seeking a more detailed survey should refer to [BC96]. There have been many languages attempting to integrate OOP and FP, the closest to CLOVER being Kea [MHH91], Rapide [MMM91], HOP [DV96], LIFE [AP93], Objective ML [RV96] and Object ML <ref> [RR96] </ref>. None of these combine the features we require (inheritance, subsumption and dynamic method despatch from OOP and referential transparency, higher-order functions, currying, partial applications and laziness from FP) into a single completely type-safe language.
Reference: [RV96] <author> D. Remy and J. Vouillon. </author> <title> Objective ML: A simple object-oriented extension of ML. </title> <booktitle> Presented at Third International Workshop on Foundations of Object-Oriented Languages (FOOL 3), </booktitle> <month> July </month> <year> 1996. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The reader seeking a more detailed survey should refer to [BC96]. There have been many languages attempting to integrate OOP and FP, the closest to CLOVER being Kea [MHH91], Rapide [MMM91], HOP [DV96], LIFE [AP93], Objective ML <ref> [RV96] </ref> and Object ML [RR96]. None of these combine the features we require (inheritance, subsumption and dynamic method despatch from OOP and referential transparency, higher-order functions, currying, partial applications and laziness from FP) into a single completely type-safe language.
References-found: 18

