URL: http://www.cs.ucsb.edu/~danielw/Papers/sigmobile.ps
Refering-URL: http://www.cs.ucsb.edu/~danielw/Papers/publications.html
Root-URL: http://www.cs.ucsb.edu
Title: StratOSphere: Mobile Processing of Distributed Objects in Java  
Abstract: We describe the design and implementation of StratOSphere, a framework which unites distributed objects and mobile code applications. We begin by trst examining dierent mobile code paradigms that distribute processing of code and data resource components across a network. After analyzing these paradigms, and presenting a lattice of functionality, we then develop a layered architecture for StratOSphere, incorporating higher levels of mobility and interoperability at each successive layer. In our design, we provide an object model that permits objects to migrate to dierent sites, select among dierent method implementations, and provide new methods and behavior. We describe how we build new semantics in each software layer, and tnally, we present sample objects developed for StratOSphere. 
Abstract-found: 1
Intro-found: 1
Reference: [AP95] <author> Baruch Awerbuch and David Peleg. </author> <title> Online tracking of mobile users. </title> <journal> In Journal of the Association for Computing Machinery, </journal> <volume> volume 42, </volume> <pages> pages 10211058, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Though our approach is currently based upon a centralized server, we have studied plans to redesign the naming server into a distributed server. The work of Awerbach and Peleg <ref> [AP95] </ref>, for example, describes the design of a distributed directory for mobile users, that tracks the location of each mobile object in an ecient manner by incrementally propagating updates into the directory for specitc subnetwork regions. 4.4.2 MA Facility The next service that we provide is a means of distributing the
Reference: [ARS97] <author> Anurag Acharya, M. Ranganathan, and Joel Saltz. Sumatra: </author> <title> A Language for Resource-aware Mobile Programs, </title> <booktitle> pages 11130. Springer Verlag Lecture Notes in Computer Science, </booktitle> <year> 1997. </year>
Reference-contexts: entirely new operating system to their existing computer systema prohibitive moditcation in current enterprises. 2.3 Distributed Languages Among distributed languages, there are languages designed with fully distributed semantics such as Obliq [Car95], Emerald [JLHB88], and Distributed Oz [vRHea97], and adaptive mobile code languages such as TACOMA [JvRS95], Telescript [Whi96b], Sumatra <ref> [ARS97] </ref>, Agent TCL [Gra96], Odyssey [Whi96a], Voyager [Obj96], and the Liquid Software project at University of Arizona [HMPP96].
Reference: [BN84] <author> Andrew D. Birrell and Bruce Jay Nelson. </author> <title> Implementing remote procedure calls. </title> <booktitle> In Proc. ACM Symp. on Transactions on Computer Systems, pages 1959, </booktitle> <month> February </month> <year> 1984. </year>
Reference-contexts: They usually provide remote stubs at each end of hosts that wish to communicate and perform remote invocations. Systems such as RPC <ref> [BN84] </ref>, DCE [Fou92], CORBA [Sie96], DCOM [Box97], RMI [WRW96], and HORB [Sat96] each generate proxies to provide distributed access to remote resources. While RMI and HORB are Java-specitc, RPC, DCE, CORBA, and DCOM provide language bindings for a particular language implementation.
Reference: [Box97] <author> Don Box. </author> <title> Creating Components with DCOM and C++. </title> <publisher> Addison Wesley Longman, </publisher> <year> 1997. </year>
Reference-contexts: The desire to share resources, to parcel out computing tasks among several dierent hosts, and to place applications on machines most suitable to their needs has led to distributed programming systems such as CORBA [Sie96] and DCOM <ref> [Box97] </ref> that predominate in the marketplace. Despite competing standards, both systems have very similar designs. They each detne a distributed object model that achieves interoperability through strict separation between interface and implementation. A CORBA or DCOM object registers its IDL (Interface Detnition Language) interface into an Interface Repository. <p> They usually provide remote stubs at each end of hosts that wish to communicate and perform remote invocations. Systems such as RPC [BN84], DCE [Fou92], CORBA [Sie96], DCOM <ref> [Box97] </ref>, RMI [WRW96], and HORB [Sat96] each generate proxies to provide distributed access to remote resources. While RMI and HORB are Java-specitc, RPC, DCE, CORBA, and DCOM provide language bindings for a particular language implementation. In doing so, they are able to unify dier-ent language systems to build common applications. <p> In the former category are languages whose semantics were designed to support 2 See CORBA's Common Object Services Specitcation [Sie96], DCE's object services [RKF92], and DCOM library services <ref> [Box97] </ref> for further details. 2 distributed scope and access, provide a shared memory abstraction, and extend ordinary language operations to manage replicated objects and data. The latter category comprise agent languages and mobile code frameworks which provide object mobility within a distributed environment.
Reference: [Car95] <author> Luca Cardelli. </author> <title> A language with distributed scope. </title> <booktitle> In Proc. of the 22nd ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1995. </year>
Reference-contexts: Though providing an extremely powerful and elaborate design, users would have to upgrade and install an entirely new operating system to their existing computer systema prohibitive moditcation in current enterprises. 2.3 Distributed Languages Among distributed languages, there are languages designed with fully distributed semantics such as Obliq <ref> [Car95] </ref>, Emerald [JLHB88], and Distributed Oz [vRHea97], and adaptive mobile code languages such as TACOMA [JvRS95], Telescript [Whi96b], Sumatra [ARS97], Agent TCL [Gra96], Odyssey [Whi96a], Voyager [Obj96], and the Liquid Software project at University of Arizona [HMPP96].
Reference: [CGP + 97] <author> G. Cugola, C. Ghezzi, G. P. Picco, , and G. Vigna. </author> <title> A characterization of mobility and state distribution in 14 mobile code languages. </title> <booktitle> In Proc. of the 2nd Workshop on Mobile Object Systems, </booktitle> <month> July </month> <year> 1997. </year>
Reference-contexts: We analyze dierent execution scenarios to determine what form of mobility is required of the distributed system. 3.1 Mobile Code Paradigms Carzaniga, Picco, and Vigna <ref> [CPV97, CGP + 97] </ref> provide an elegant description of several mobile code design paradigms for distributed applications. These are classited as Client/Server (CS), Remote Evaluation (REV), Code on Demand (COD), and Mobile Agent (MA) paradigms.
Reference: [Cha97] <author> Phil Inje Chang. </author> <title> Inside the Java Web Server. </title> <publisher> Java-soft, Inc., </publisher> <address> http://java.sun.com/features/1997/aug/- jws1.html, </address> <year> 1997. </year>
Reference-contexts: An example of this form of code mobility is the applet service in the Java programming language, in which HTTP browsers download Java code from remote sites for local execution. An additional service known as servlet programming <ref> [Cha97] </ref> performs the opposite service, pushing Java code from a local client to a remote server for remote execution, thus falling under the REV category. While COD and REV are very similar in design, the performance differences between the two often lead to one scenario being preferred over the other.
Reference: [Che88] <author> David R. Cheriton. </author> <title> The v distributed system. </title> <booktitle> In Communications of the ACM, </booktitle> <pages> pages 31433, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Systems such as Sprite [DO87], V <ref> [Che88] </ref>, and Locus [PE86] provide built-in operating system support to freeze the run-time computation of a process, migrate the process to a remote site, and unfreeze the process. Each migration entails leaving a proxy behind to forward I/O and communications to the new site.
Reference: [CPV97] <author> A. Carzaniga, G. P. Picco, , and G. Vigna. </author> <title> Designing distributed applications with mobile code paradigms. </title> <booktitle> In Proc. of the 19th Intl. Conf. on Software Engineering, </booktitle> <year> 1997. </year>
Reference-contexts: We analyze dierent execution scenarios to determine what form of mobility is required of the distributed system. 3.1 Mobile Code Paradigms Carzaniga, Picco, and Vigna <ref> [CPV97, CGP + 97] </ref> provide an elegant description of several mobile code design paradigms for distributed applications. These are classited as Client/Server (CS), Remote Evaluation (REV), Code on Demand (COD), and Mobile Agent (MA) paradigms.
Reference: [DO87] <author> Fred Douglis and John Ousterhout. </author> <title> Process migration in the sprite operating system. </title> <booktitle> In Proc. of the 7th Intl. Conf. Distributed Computer Systems, </booktitle> <pages> pages 18 25, </pages> <year> 1987. </year>
Reference-contexts: Systems such as Sprite <ref> [DO87] </ref>, V [Che88], and Locus [PE86] provide built-in operating system support to freeze the run-time computation of a process, migrate the process to a remote site, and unfreeze the process. Each migration entails leaving a proxy behind to forward I/O and communications to the new site.
Reference: [Fou92] <author> Open Software Foundation. </author> <title> Introduction to OSF DCE: Rev 1.0. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Clis, NJ, </address> <year> 1992. </year>
Reference-contexts: They usually provide remote stubs at each end of hosts that wish to communicate and perform remote invocations. Systems such as RPC [BN84], DCE <ref> [Fou92] </ref>, CORBA [Sie96], DCOM [Box97], RMI [WRW96], and HORB [Sat96] each generate proxies to provide distributed access to remote resources. While RMI and HORB are Java-specitc, RPC, DCE, CORBA, and DCOM provide language bindings for a particular language implementation.
Reference: [GJS96] <author> J. Gosling, B. Joy, and G. Steele. </author> <title> The Java Language Specitcation. Addison Wesley, Sunsoft Java Series, </title> <year> 1996. </year>
Reference-contexts: At run-time, a Java object's internal method may be invoked by means of the Reections package [Sun97], while an external method can run upon an object by using a Java class loading mechanism <ref> [GJS96] </ref>. We explore these concepts in greater detail below. 3.3.1 Run-Time Object Adaptation Beyond resource and computation migration, the ability to adapt a running object to changing needs and requirements remains an essential aspect of an interoperable object system. <p> The implementation of the method dispatcher is described in [WAAS97]. Basically, StratOSphere employs the MSQL database [Hug95] to store instance, class hierarchy, and class format meta-data tables. We wrote a new classloader <ref> [GJS96] </ref> that queries these tables to locate the appropriate internal or external method to apply upon an object, based upon the name of the method speci-ted in methodName, and the instance class type. <p> The byte code can then be inserted into a message along with the serialized object instance, and passed from client to server. When the server processes the message, the executable byte-code is subsequently extracted from the message and executed upon the instance using a StratOSphere Java classloader <ref> [GJS96] </ref>. The result of the execution is sent back to the client by means of a subsequent message. By factoring out the message-passing interaction between client and server in CS and REV, we are able to build REV functionality on top of the Transport layer's CS paradigm.
Reference: [Gos91] <author> Andrzej Goscinski. </author> <title> Distributed operating systems : the logical design. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: These eorts can be classited into three basic categories: distributed programming libraries and packages, distributed operating systems <ref> [Gos91] </ref>, and distributed programming languages. These categories reect attempts to extend a programming environment by adding a distribution layer to an existing language, by providing distributed access as an operating system primitive, and by developing a language with fully distributed scope and semantics.
Reference: [Gra96] <author> Robert S. Gray. </author> <title> Agent tcl: A exible and secure mobile-agent system. </title> <booktitle> In Proc. of the 4th Annual Tcl/Tk Workshop, </booktitle> <pages> pages 923, </pages> <year> 1996. </year>
Reference-contexts: system to their existing computer systema prohibitive moditcation in current enterprises. 2.3 Distributed Languages Among distributed languages, there are languages designed with fully distributed semantics such as Obliq [Car95], Emerald [JLHB88], and Distributed Oz [vRHea97], and adaptive mobile code languages such as TACOMA [JvRS95], Telescript [Whi96b], Sumatra [ARS97], Agent TCL <ref> [Gra96] </ref>, Odyssey [Whi96a], Voyager [Obj96], and the Liquid Software project at University of Arizona [HMPP96].
Reference: [GRHV95] <author> Erich Gamma, Ralph Johnson Richard Helm, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: A Image object visiting S A would obtain a dierent behavior than if it were to visit site S B . Our StratOSphere framework thus supports the factory pattern <ref> [GRHV95] </ref>, in which a common abstract interface is adopted to obtain different concrete method implementations at each site. A repository site can take advantage of this feature to provide specialized behavior for a particular method.
Reference: [Gun96] <author> Shishir Gundavaram. </author> <title> CGI programming on the World Wide Web. </title> <publisher> O'Reilly & Associates, </publisher> <address> Cambridge, </address> <year> 1996. </year>
Reference-contexts: However, in more complex interactions, servlets and CGI <ref> [Gun96] </ref> programming perform execution at the server-side, where relevant data and resources are stored. Finally, MA, is the most dynamic and autonomous of the above paradigms.
Reference: [HMPP96] <author> J. Hartman, U. Manber, L. Peterson, and T. Proebst-ing. </author> <title> Liquid software: A new paradigm for networked systems. </title> <type> Technical Report Technical Report 96-11, </type> <institution> Univ. of Arizona, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Among distributed languages, there are languages designed with fully distributed semantics such as Obliq [Car95], Emerald [JLHB88], and Distributed Oz [vRHea97], and adaptive mobile code languages such as TACOMA [JvRS95], Telescript [Whi96b], Sumatra [ARS97], Agent TCL [Gra96], Odyssey [Whi96a], Voyager [Obj96], and the Liquid Software project at University of Arizona <ref> [HMPP96] </ref>.
Reference: [Hug95] <author> David J. Hughes. </author> <title> Mini sql: A lightweight database server. </title> <note> http://Hughes.com.au/product/msql, 1995. </note>
Reference-contexts: The implementation of the method dispatcher is described in [WAAS97]. Basically, StratOSphere employs the MSQL database <ref> [Hug95] </ref> to store instance, class hierarchy, and class format meta-data tables. We wrote a new classloader [GJS96] that queries these tables to locate the appropriate internal or external method to apply upon an object, based upon the name of the method speci-ted in methodName, and the instance class type.
Reference: [JLHB88] <author> Eric Jul, Henry Levy, Norman Hutchinson, and An-drew Black. </author> <title> Fine-grained mobility in the emerald system. </title> <booktitle> In Proc. ACM Symp. on Transactions on Computer Systems, </booktitle> <pages> pages 10933, </pages> <year> 1988. </year>
Reference-contexts: Though providing an extremely powerful and elaborate design, users would have to upgrade and install an entirely new operating system to their existing computer systema prohibitive moditcation in current enterprises. 2.3 Distributed Languages Among distributed languages, there are languages designed with fully distributed semantics such as Obliq [Car95], Emerald <ref> [JLHB88] </ref>, and Distributed Oz [vRHea97], and adaptive mobile code languages such as TACOMA [JvRS95], Telescript [Whi96b], Sumatra [ARS97], Agent TCL [Gra96], Odyssey [Whi96a], Voyager [Obj96], and the Liquid Software project at University of Arizona [HMPP96].
Reference: [JS96] <author> Bill Janssen and Mike Spreitzer. </author> <note> ILU 2.0 Reference Manual. Xerox PARC, http://ftp.parc.xerox.com/- pub/ilu/ilu.html, </note> <year> 1996. </year>
Reference-contexts: The library's current holdings consist of over 700,000 catalogue items, with some images exceeding a gigabyte of storage. The de 1 Indeed, Xerox PARC's variant of CORBA, ILU <ref> [JS96] </ref>, mixed-language programming is supported to such an extent that ILU objects implemented in dierent languages can reside in the same process space. 1 sign of a digital library for this collection requires that the vast amounts of data be distributed across dier-ent hosts.
Reference: [JvRS95] <author> D. Johansen, R. van Reneese, and F. Schneider. </author> <title> An introduction to the tacoma distributed system. </title> <type> Technical Report Technical Report 95-23, </type> <institution> Univ. of Tromso, </institution> <year> 1995. </year>
Reference-contexts: upgrade and install an entirely new operating system to their existing computer systema prohibitive moditcation in current enterprises. 2.3 Distributed Languages Among distributed languages, there are languages designed with fully distributed semantics such as Obliq [Car95], Emerald [JLHB88], and Distributed Oz [vRHea97], and adaptive mobile code languages such as TACOMA <ref> [JvRS95] </ref>, Telescript [Whi96b], Sumatra [ARS97], Agent TCL [Gra96], Odyssey [Whi96a], Voyager [Obj96], and the Liquid Software project at University of Arizona [HMPP96]. <p> This is the level where mobile code languages systems such as Aglets [LC96], TACOMA <ref> [JvRS95] </ref>, Telescript [Whi96b], Odyssey [Whi96a], and Voyager [Obj96] provide services for enterprise applications. At time of writing, this tnal layer is still being developed and implemented for StratOSphere. By utilizing the services of the Distributed Object Layer, we have the migration capability of an MA system.
Reference: [LC96] <author> Danny B. Lange and Daniel T. Chang. </author> <title> Ibm aglets workbench: Programming mobile agents in java. </title> <note> http:- //www.trl.ibm.co.jp/aglets/whitepaper.htm, 1996. </note>
Reference-contexts: This is the level where mobile code languages systems such as Aglets <ref> [LC96] </ref>, TACOMA [JvRS95], Telescript [Whi96b], Odyssey [Whi96a], and Voyager [Obj96] provide services for enterprise applications. At time of writing, this tnal layer is still being developed and implemented for StratOSphere. By utilizing the services of the Distributed Object Layer, we have the migration capability of an MA system.
Reference: [Mey88] <author> Bertrand Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: Earlier, we noted that the SSInstance interface specited an invariant method, while the SSMethod interface required both precondition and postcondition methods. These assertion checks at run-time <ref> [Mey88] </ref> provide us with a means of checking type-safe operations. Each StratOSphere object specites a class invariant, which our classloader checks whenever it dispatches a method, to ensure that the object state does not become inconsistent.
Reference: [NL96] <author> George C. Necula and Peter Lee. </author> <title> Safe kernel extensions without run-time checking. </title> <booktitle> In Proc. of the 2nd ACM Symposium on Operating System and Design and Implementation, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: No host or agent exchanges any data or information with another agent unless a signed certitcate identites the agent as a trusted source. Another approach that we are investigating includes proof-carrying code <ref> [NL96] </ref>, which performs a veritcation of code to be executed to ensure trusted operation. After studying all possible execution scenarios, we have designed and built a framework called StratOSphere that distributes processing across multiple host sites, and also detnes a dynamic object model to implement client services.
Reference: [Obj96] <author> ObjectSpace. </author> <title> Voyager technical overview. </title> <note> http://- www.objectspace.com/voyager/technical_white_-papers.html, 1996. </note>
Reference-contexts: computer systema prohibitive moditcation in current enterprises. 2.3 Distributed Languages Among distributed languages, there are languages designed with fully distributed semantics such as Obliq [Car95], Emerald [JLHB88], and Distributed Oz [vRHea97], and adaptive mobile code languages such as TACOMA [JvRS95], Telescript [Whi96b], Sumatra [ARS97], Agent TCL [Gra96], Odyssey [Whi96a], Voyager <ref> [Obj96] </ref>, and the Liquid Software project at University of Arizona [HMPP96]. <p> This is the level where mobile code languages systems such as Aglets [LC96], TACOMA [JvRS95], Telescript [Whi96b], Odyssey [Whi96a], and Voyager <ref> [Obj96] </ref> provide services for enterprise applications. At time of writing, this tnal layer is still being developed and implemented for StratOSphere. By utilizing the services of the Distributed Object Layer, we have the migration capability of an MA system.
Reference: [PE86] <author> Gerald Popek and Bruce J. Walker (Ed). </author> <title> The Locus Distributed System Architecture. </title> <publisher> MIT Press, </publisher> <month> Febru-ary </month> <year> 1986. </year>
Reference-contexts: Systems such as Sprite [DO87], V [Che88], and Locus <ref> [PE86] </ref> provide built-in operating system support to freeze the run-time computation of a process, migrate the process to a remote site, and unfreeze the process. Each migration entails leaving a proxy behind to forward I/O and communications to the new site.
Reference: [RKF92] <author> Ward Rosenberry, David Kenney, and Gerry Fisher. </author> <title> Understanding DCE. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Se-bastopol, CA, </address> <year> 1992. </year>
Reference-contexts: In the former category are languages whose semantics were designed to support 2 See CORBA's Common Object Services Specitcation [Sie96], DCE's object services <ref> [RKF92] </ref>, and DCOM library services [Box97] for further details. 2 distributed scope and access, provide a shared memory abstraction, and extend ordinary language operations to manage replicated objects and data. The latter category comprise agent languages and mobile code frameworks which provide object mobility within a distributed environment.
Reference: [RS91] <author> Joel Richardson and Peter Schwarz. </author> <title> Aspects: Extending object to support multiple independent roles. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 298307, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In many environments, security restrictions forbid a client from arbitrarily introducing a new type into the system. For applications, however, this inability to modify or extend the services of an object, poses too rigid and unwieldly a restriction. As time progresses, the role of an object evolves and adapts <ref> [RS91] </ref>, and a software system must accommodate these changes by providing the necessary user enhancements and moditcations. For this reason, we too must provide a means of dynamically extending an object's services in our StratOSphere system.
Reference: [RWW96] <author> R. Riggs, J. Waldo, and A. Wollrath. </author> <title> Pickling state in java. </title> <booktitle> In 2nd Conf. on Object-Oriented Technologies and Systems (COOTS), </booktitle> <pages> pages 241250, </pages> <address> Toronto, Ontario, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: The Java object serializer <ref> [RWW96] </ref> is employed to serialize each object into a byte stream for storage in a repository. Since an external method is a Java .class tle, it can be stored in a repository as a stream of Java byte-code.
Reference: [Sat96] <author> HIRANO Satoshi. </author> <title> The Magic Carpet for Network Computing: HORB Flyer's Guide. </title> <institution> Electrotechnical Laboratory, </institution> <note> http://ring.etl.go.jp/openlab/horb, 1996. </note>
Reference-contexts: They usually provide remote stubs at each end of hosts that wish to communicate and perform remote invocations. Systems such as RPC [BN84], DCE [Fou92], CORBA [Sie96], DCOM [Box97], RMI [WRW96], and HORB <ref> [Sat96] </ref> each generate proxies to provide distributed access to remote resources. While RMI and HORB are Java-specitc, RPC, DCE, CORBA, and DCOM provide language bindings for a particular language implementation. In doing so, they are able to unify dier-ent language systems to build common applications. <p> In this layer we take a simple CS system as a substrate upon which we can provide further mobility paradigms. Here we may select from the myriad of packages: RPC, CORBA, DCOM, DCE, and Java-specitc interoperability frameworks such as HORB <ref> [Sat96] </ref> or 7 RMI [WRW96]. Each of these packages permit a client to pass arguments and invoke a method of a remote object, wait for the method to be executed at the server and obtain a result, thus satisfying basic CS functionality.
Reference: [SF95] <author> T. R. Smith and J. Frew. </author> <title> Alexandria digital library. </title> <journal> Communications of the ACM, </journal> <volume> 38(4):6162, </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: To achieve this result, we describe the design of the StratOSphere architecture, which supports mobile applications written in Java. Every entity in StratOSphere is modeled as a Java object. In the Alexandria Digital Library (ADL) project at UC Santa Barbara <ref> [SF95] </ref>, for example, the library's collection of high resolution aerial photographs, satellite images, and topographical maps would each be modeled as an object, replete with methods to tlter, layer, and display the object instance.
Reference: [Sie96] <author> Jon Siegal. </author> <title> CORBA: Fundamentals and Programming. </title> <publisher> Wiley, </publisher> <year> 1996. </year>
Reference-contexts: The desire to share resources, to parcel out computing tasks among several dierent hosts, and to place applications on machines most suitable to their needs has led to distributed programming systems such as CORBA <ref> [Sie96] </ref> and DCOM [Box97] that predominate in the marketplace. Despite competing standards, both systems have very similar designs. They each detne a distributed object model that achieves interoperability through strict separation between interface and implementation. <p> They usually provide remote stubs at each end of hosts that wish to communicate and perform remote invocations. Systems such as RPC [BN84], DCE [Fou92], CORBA <ref> [Sie96] </ref>, DCOM [Box97], RMI [WRW96], and HORB [Sat96] each generate proxies to provide distributed access to remote resources. While RMI and HORB are Java-specitc, RPC, DCE, CORBA, and DCOM provide language bindings for a particular language implementation. <p> In the former category are languages whose semantics were designed to support 2 See CORBA's Common Object Services Specitcation <ref> [Sie96] </ref>, DCE's object services [RKF92], and DCOM library services [Box97] for further details. 2 distributed scope and access, provide a shared memory abstraction, and extend ordinary language operations to manage replicated objects and data.
Reference: [SS97] <author> George Semeczko and Stanley Y.W. Su. </author> <title> Supporting object migration in distributed systems. </title> <booktitle> In Proc. of the Fifth Intl. Conf. on Database Systems for Advanced Applications, </booktitle> <pages> pages 5966, </pages> <address> Melbourne, Aus-tralia, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: As Semeczko and Su <ref> [SS97] </ref> have pointed out, there are 13 possible data and execution location scenarios for data and executable programs stored at local and remote hosts. In these scenarios, both the data and executable can be migrated to dierent hosts for remote processing.
Reference: [Sun97] <author> Sun Microsystems, Inc., </author> <title> http://java.sun.com/- products/jdk/1.1/docs/guide/reection/index.html. Java Core Reection API and Specitcation, </title> <year> 1997. </year>
Reference-contexts: Internal methods are those methods that provide consistent moditcation of object state, while external methods provide extended services. At run-time, a Java object's internal method may be invoked by means of the Reections package <ref> [Sun97] </ref>, while an external method can run upon an object by using a Java class loading mechanism [GJS96]. <p> If the query returns an internal method of the StratOSphere instance, then we employ the Java Reections Library <ref> [Sun97] </ref> to dynamically invoke the internal 8 method of the object instance, again passing in the relevant arguments: the object instance and argument list. 4.2.1 Repository Structure StratOSphere. Each site implements both a Local repository and a portion of a Global Repository.
Reference: [Tsc97] <author> Christian Tschudin. </author> <title> The Messenger Environment M A Condensed Description, </title> <booktitle> pages 14956. Springer Verlag Lecture Notes in Computer Science, </booktitle> <year> 1997. </year>
Reference-contexts: Designing this layer, however, involves not just a mobility paradigm, but also issues of inter-agent communication, synchronization, and agent security. Inter-agent communication varies among dierent agent systems. In our design, we use an idea initially developed in M <ref> [Tsc97] </ref>, in which agents exchange data in a shared memory area of each execution site. In adapting this idea to StratOSphere, we have reserved a portion of each Local Repository, called the Exchange Area to provide both data exchange and code exchange among dierent agents.
Reference: [TV96] <author> Joseph Tardo and Luis Valente. </author> <title> Mobile agent security and telescript. </title> <booktitle> In 41st TEEE Computer Society Intl. Conf., </booktitle> <pages> pages 5863, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Consequently, we assume that a host will not attack an agent, but concern ourselves with the more scurilous problem of an agent attacking the host. In our initial implementation of the Distributed Applications Layer, we use signed certitcates <ref> [TV96] </ref> to authenticate each agent. No host or agent exchanges any data or information with another agent unless a signed certitcate identites the agent as a trusted source.
Reference: [vRHea97] <author> Peter van Roy, Seif Haridi, and Per Brand et al. </author> <title> Mobile objects in distributed oz. </title> <booktitle> In Proc. ACM Symp. on Transactions on Programming Languages and Systems, </booktitle> <pages> pages 80451, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: extremely powerful and elaborate design, users would have to upgrade and install an entirely new operating system to their existing computer systema prohibitive moditcation in current enterprises. 2.3 Distributed Languages Among distributed languages, there are languages designed with fully distributed semantics such as Obliq [Car95], Emerald [JLHB88], and Distributed Oz <ref> [vRHea97] </ref>, and adaptive mobile code languages such as TACOMA [JvRS95], Telescript [Whi96b], Sumatra [ARS97], Agent TCL [Gra96], Odyssey [Whi96a], Voyager [Obj96], and the Liquid Software project at University of Arizona [HMPP96].
Reference: [WAAS97] <author> D. Wu, D. Agrawal, A. El Abbadi, and A. Singh. </author> <title> A java-based framework for processing distributed objects. </title> <booktitle> In Proc. Intl. Conf. on Conceptual Modeling, </booktitle> <pages> pages 33346, </pages> <address> Los Angeles, CA, </address> <year> 1997. </year>
Reference-contexts: We defer discussion of the invariant, precondition, and postcondition methods in these interfaces until Section 4.4; for now, we will examine the run method in the SSMethod interface, which is used to dispatch an external method upon an instance. The implementation of the method dispatcher is described in <ref> [WAAS97] </ref>. Basically, StratOSphere employs the MSQL database [Hug95] to store instance, class hierarchy, and class format meta-data tables.
Reference: [Whi96a] <author> James White. </author> <title> Mobile agents white paper. </title> <address> http://- genmagic.com/agents/Whitepaper/whitepaper.html, </address> <year> 1996. </year>
Reference-contexts: their existing computer systema prohibitive moditcation in current enterprises. 2.3 Distributed Languages Among distributed languages, there are languages designed with fully distributed semantics such as Obliq [Car95], Emerald [JLHB88], and Distributed Oz [vRHea97], and adaptive mobile code languages such as TACOMA [JvRS95], Telescript [Whi96b], Sumatra [ARS97], Agent TCL [Gra96], Odyssey <ref> [Whi96a] </ref>, Voyager [Obj96], and the Liquid Software project at University of Arizona [HMPP96]. <p> Indeed, General Magic's Java-based agent and distributed object system, Odyssey <ref> [Whi96a] </ref>, lets the application programmer select among RMI, DCOM, and CORBA IIOP for its transport. 4.2 Repository Layer At each site in a distributed system, we require the services of a repository to store data and code, where data and code correspond to instances and external methods of a StratOSphere object. <p> This is the level where mobile code languages systems such as Aglets [LC96], TACOMA [JvRS95], Telescript [Whi96b], Odyssey <ref> [Whi96a] </ref>, and Voyager [Obj96] provide services for enterprise applications. At time of writing, this tnal layer is still being developed and implemented for StratOSphere. By utilizing the services of the Distributed Object Layer, we have the migration capability of an MA system.
Reference: [Whi96b] <author> James White. </author> <title> Telescript technology: Mobile agents. </title> <note> http://genmagic.com/TeleScript/WhitePapers, 1996. </note>
Reference-contexts: install an entirely new operating system to their existing computer systema prohibitive moditcation in current enterprises. 2.3 Distributed Languages Among distributed languages, there are languages designed with fully distributed semantics such as Obliq [Car95], Emerald [JLHB88], and Distributed Oz [vRHea97], and adaptive mobile code languages such as TACOMA [JvRS95], Telescript <ref> [Whi96b] </ref>, Sumatra [ARS97], Agent TCL [Gra96], Odyssey [Whi96a], Voyager [Obj96], and the Liquid Software project at University of Arizona [HMPP96]. <p> This is the level where mobile code languages systems such as Aglets [LC96], TACOMA [JvRS95], Telescript <ref> [Whi96b] </ref>, Odyssey [Whi96a], and Voyager [Obj96] provide services for enterprise applications. At time of writing, this tnal layer is still being developed and implemented for StratOSphere. By utilizing the services of the Distributed Object Layer, we have the migration capability of an MA system.
Reference: [WMFS96] <author> J. D. Guttman W. M. Farmer and V. Swarup. </author> <title> Security for mobile agents: authentication and state appraisal. </title> <booktitle> In 4th European Symposium on Research in Computer Security Proceedings, </booktitle> <pages> pages 11830, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: Synchronization of updates to this Exchange Area is supported by a thread queue for each mobile process. Work on agent security has been an area of active research <ref> [WMFS96] </ref>. Among the issues involved are scenarios in which a malicious agent may attack a host, a host may attack an agent, or an agent may attack another agent.
Reference: [WRW96] <author> A. Wollrath, R. Riggs, and J. Waldo. </author> <title> A distributed object model for java. </title> <booktitle> In 2nd Conf. on Object-Oriented Technologies and Systems (COOTS), </booktitle> <pages> pages 219231, </pages> <address> Toronto, Ontario, </address> <month> June </month> <year> 1996. </year> <month> 15 </month>
Reference-contexts: They usually provide remote stubs at each end of hosts that wish to communicate and perform remote invocations. Systems such as RPC [BN84], DCE [Fou92], CORBA [Sie96], DCOM [Box97], RMI <ref> [WRW96] </ref>, and HORB [Sat96] each generate proxies to provide distributed access to remote resources. While RMI and HORB are Java-specitc, RPC, DCE, CORBA, and DCOM provide language bindings for a particular language implementation. In doing so, they are able to unify dier-ent language systems to build common applications. <p> In this layer we take a simple CS system as a substrate upon which we can provide further mobility paradigms. Here we may select from the myriad of packages: RPC, CORBA, DCOM, DCE, and Java-specitc interoperability frameworks such as HORB [Sat96] or 7 RMI <ref> [WRW96] </ref>. Each of these packages permit a client to pass arguments and invoke a method of a remote object, wait for the method to be executed at the server and obtain a result, thus satisfying basic CS functionality.
References-found: 42

