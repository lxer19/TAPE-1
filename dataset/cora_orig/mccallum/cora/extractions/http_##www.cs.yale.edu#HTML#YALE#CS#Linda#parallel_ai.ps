URL: http://www.cs.yale.edu/HTML/YALE/CS/Linda/parallel_ai.ps
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/Linda/tech-reports.html
Root-URL: http://www.cs.yale.edu
Title: Using Linda to Build Parallel AI Applications  
Author: Michael Factor Scott Fertig and David H. Gelernter 
Date: June 1991  
Address: YALEU/DCS/TR-861  
Affiliation: Yale University Department of Computer Science  I.B.M. Israel Science and Technology Ltd.  Yale University Department of Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [ABC + 90] <author> M. Arango, D. Berndt, N. Carriero, D. Gelernter and D. Gilmore. </author> <title> Adventures with Network Linda. </title> <journal> Supercomputing Review, </journal> <volume> 10(3) </volume> <pages> 42-46, </pages> <month> Oct. </month> <year> 1990. </year>
Reference: [CG90] <author> N. Carriero and D. Gelernter. </author> <title> How to Write Parallel Programs: A first course. </title> <publisher> MIT Press, </publisher> <address> Cambrigde, </address> <year> 1990. </year>
Reference-contexts: In the last year or so, the field has settled down considerably: there are perhaps half a dozen approaches that are still "in contention." These include message passing systems of various kinds, data parallel languages for synchronous architectures, explicitly-parallel Fortran variants|and (among a few others) Linda 1 <ref> [CG90] </ref>, which is the system we've used. <p> Many versions of this program and their performance are discussed at length in <ref> [CG90] </ref>. A closeness comparison for genetic sequences is in many cases more expensive, computationally, than the FGP program's closeness comparisons. <p> In order to achieve good performance, particularly in loosely-coupled (expensive-communication) environments such as LANs, the parallel FGP program will accordingly experiment with clumping (grouping many database records into 7 a single unit) and with per-program-run static mapping of the database onto available processors. Both techniques are discussed in <ref> [CG90] </ref>. 3 The Process Trellis The process trellis is a software architecture for building real-time, heuristic monitors: heterogeneous, large, real-time, parallel and continuously executing programs. The process trellis organizes a collection of heterogeneous decision processes into an acyclic hierarchical network which mirrors the structure of the domain.
Reference: [CRFM90] <author> A. I. Cohn, S. Rosenbaum, M. Factor, and P. L. Miller. DY-NASCENE: </author> <title> An approach to computer-based intelligent cardiovascular monitoring using sequential clinical `Scenes'. </title> <booktitle> Methods 13 of Information in Medicine, </booktitle> <volume> 29 </volume> <pages> 122-131, </pages> <month> Apr. </month> <year> 1990. </year> <note> Revised version of paper in SCAMC-89. </note>
Reference-contexts: The Trellis is implemented in C-Linda, and has been tested in a number of domains; our largest prototype is designed for patient monitoring in the intensive care unit. This application includes more than one hundred separate concurrent, asynchronous processes, and runs effectively on both shared- and distributed-memory parallel computers <ref> [FSC + 90, CRFM90, SF90] </ref>. [FG91b] discusses 3 new, wide-ranging trellis applications, in various stages of construction. <p> We can use probes to connect processes in different trellises since processes don't care where their inputs come from. We have demonstrated the effectiveness of the trellis with the ICM, a prototype ICU (intensive care unit) monitor <ref> [FSC + 90, CRFM90, SF90, FGK + 90] </ref>. The ICM seeks to provide early, systematic detection of evolving trends, taking advantage of asynchronous inputs when available but using primarily on-line data. 3 Currently, the ICM contains over one hundred processes divided between two trellises.
Reference: [EHRLR80] <author> L. D. Erman, F. Hayes-Roth, V. R. Lesser, and D. R. Reddy. </author> <title> The Hearsay-II speech-understanding system: Integrating knowledge to resolve uncertainty. </title> <journal> Computing Surveys, </journal> <volume> 12(2) </volume> <pages> 213-253, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: For example, Hearsay-II, which performed speech understanding, had blackboard levels corresponding to segments, syllables, words, word-sequences and phrases, amongst others <ref> [EHRLR80] </ref>. (However, the trellis differs from blackboard approaches in most other respects; see [FG91b]). 9 Every process in the trellis hierarchy has a set of inferiors, a set of su-periors and a state.
Reference: [Fac90a] <author> M. </author> <title> Factor. The Process Trellis Software Architecture for Parallel, Real-Time Monitors. </title> <type> PhD thesis, </type> <institution> Yale University, Department of Computer Science, </institution> <address> Dec. 1990. New Haven, CT. </address>
Reference-contexts: Modifying a module in a program with a dynamic communication pattern can indirectly affect any other program module, but the trellis structure enables us to localize the direct and indirect effects of a program modification (see <ref> [Fac90a] </ref>). This simplifies the building and maintenance of large trellis applications. Because processes communicate using a fixed protocol, we can predict the worst-case communication and computation demands that new inputs can engender [Fac90a, Fac90b]. <p> This simplifies the building and maintenance of large trellis applications. Because processes communicate using a fixed protocol, we can predict the worst-case communication and computation demands that new inputs can engender <ref> [Fac90a, Fac90b] </ref>. Using this information, we can schedule the process trellis on the processors of a parallel computer, guaranteeing that the program analyzes new inputs as quickly as they enter from the external world. 3 The ICM is joint work with Drs. <p> The trellis scheduling problem is NP-complete; furthermore, no polynomial time approximation algorithm exists, since finding a feasible schedule is also NP-complete. Our scheduler is accordingly heuristic. We compared it to two other approaches, a first-fit algorithm and a simulated-annealing scheduler; our scheduler was clearly better than either (see <ref> [Fac90a] </ref>) (in addition to running, in some cases, roughly 5 orders of magnitude faster than the simulated annealing scheduler). 4 Conclusions Parallel programming is now a proven and powerful tool, ready to expand its sphere of influence by moving into less traditional but soon to be highly important domains|like database-driven expert
Reference: [Fac90b] <author> M. </author> <title> Factor. The process trellis software architecture for real-time monitors. </title> <booktitle> In Second ACM SIGPLAN Symposium on Principles & Practice of Parallel Programming (PPoPP), </booktitle> <pages> pages 147-155. </pages> <booktitle> ACM, SIGPLAN, </booktitle> <month> Mar. </month> <year> 1990. </year> <title> Seattle, WA. </title> <journal> (SIGPLAN Notices, </journal> <volume> 25(3)). </volume>
Reference-contexts: This simplifies the building and maintenance of large trellis applications. Because processes communicate using a fixed protocol, we can predict the worst-case communication and computation demands that new inputs can engender <ref> [Fac90a, Fac90b] </ref>. Using this information, we can schedule the process trellis on the processors of a parallel computer, guaranteeing that the program analyzes new inputs as quickly as they enter from the external world. 3 The ICM is joint work with Drs. <p> Dean Sittig, Aaron Cohn, Stanley Rosenbaum and Perry Miller of the Yale School of Medicine, Department of Anesthesiology. 11 Trellis programs are explicitly parallel. Each process executes indepen-dently and concurrently with all other trellis processes. <ref> [Fac90b] </ref> shows that trellis programs can be highly efficient. Trellis processes are history sensitive, an essential attribute for a continuously executing program.
Reference: [Fer91] <author> S. J. Fertig. Fgp: </author> <title> Using statistics to drive an expert database. </title> <booktitle> In Proc. of Interface 91: Computing Science and Statistics, </booktitle> <year> 1991. </year>
Reference-contexts: we will move on to the role of parallelism in the new version (currently being implemented.) We will not describe algorithms or discuss the results of performance testing because of space limitations; interested readers are encouraged to see the paper by Fertig and Gelernter in the IJCAI91 conference proceedings [FG91a]. <ref> [Fer91] </ref> 2 discusses statistical issues: in particular, the algorithms used for automatic weighting of features and for clustering. 2.1 Motivation Implementing a "database-driven expert system" is attractive for (at least) three reasons. 1. The knowledge acquisition bottleneck is still one of AI's major problems.
Reference: [FG89] <author> O. Friesen and F. Golshani. </author> <title> Databases in large AI systems. </title> <journal> AI Magazine, </journal> <volume> X(4):17-19, </volume> <month> Winter </month> <year> 1989. </year>
Reference-contexts: In recent workshops, many researchers have come to the conclusion that the effective use of large databases, as opposed to relying on hand-coded (ie "compiled") knowledge bases, is our best hope of breaking through this bottleneck <ref> [FG89, PSF89] </ref>. 2. Database-driven expert systems are more powerful than conventional expert systems based on compiled knowledge, in several ways.
Reference: [FG91a] <author> S. J. Fertig and D. H. Gelernter. Fgp: </author> <title> A software architecture for acquiring knowledge from cases. </title> <booktitle> In Proc. of the International Joint Conference on Artificial Intelligence, </booktitle> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Then we will move on to the role of parallelism in the new version (currently being implemented.) We will not describe algorithms or discuss the results of performance testing because of space limitations; interested readers are encouraged to see the paper by Fertig and Gelernter in the IJCAI91 conference proceedings <ref> [FG91a] </ref>. [Fer91] 2 discusses statistical issues: in particular, the algorithms used for automatic weighting of features and for clustering. 2.1 Motivation Implementing a "database-driven expert system" is attractive for (at least) three reasons. 1. The knowledge acquisition bottleneck is still one of AI's major problems. <p> An "evocative possibility" is a datum that might be true, and that would be significant if it were. 2 The machine's interaction with the user (see example transcript in figure 2; also in <ref> [FG91a] </ref>) represents a combination of fairly safe conclusions, speculation experiments and the subsequent investigation of resulting guesses. 2 Briefly, the evocativeness of an attribute-value pair with respect to a goal attribute is inversely proportional to the entropy (disorder) of the distribution of values for the goal represented in the group of <p> We are aware that many terms in the above description and others not mentioned have to be operationally defined, and they have been: Metrics of case similarity, methods for the automatic weighting of attributes, the determination of "evocativeness" (- see footnote), etc. The interested reader is again directed to <ref> [FG91a] </ref>. 2.3 Properties of the FGP Machine Our system (the "FGP Machine") differs from others in technical approach, software structure and interface design. Technical approach: our intent was to supplement the conventional, statistical clustering-within-a-feature-space approach with heuristics designed to mimic the behavior of a human expert. <p> Our system (unlike most statistics-based classification systems) is designed (1) to support an interactive give-and-take with the user, and (2) to generate as output a line-by-line "commentary" on the input data, which represents a clear and concise presentation of extensions, classifications and case citations. 2.4 Performance <ref> [FG91a] </ref> discusses experiments performed with the implemented (serial) version of the FGP system. Among other tests, the system's performance has been validated using the well-known Iris data [Fis36]. 2.5 The Role of Parallelism We are now carrying out a first, preliminary parallelization of the FGP program, using Linda.
Reference: [FG91b] <author> M. Factor and D. H. Gelernter. </author> <title> Experience with a Parallel Software Backplane for Realtime Data Fusion. </title> <type> Research Report, </type> <institution> Yale University, Department of Computer Science, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: This application includes more than one hundred separate concurrent, asynchronous processes, and runs effectively on both shared- and distributed-memory parallel computers [FSC + 90, CRFM90, SF90]. <ref> [FG91b] </ref> discusses 3 new, wide-ranging trellis applications, in various stages of construction. <p> For example, Hearsay-II, which performed speech understanding, had blackboard levels corresponding to segments, syllables, words, word-sequences and phrases, amongst others [EHRLR80]. (However, the trellis differs from blackboard approaches in most other respects; see <ref> [FG91b] </ref>). 9 Every process in the trellis hierarchy has a set of inferiors, a set of su-periors and a state. <p> The model has been tested and remains accurate for synthetic trellises of up to roughly 20,000 nodes (the largest synthetic 12 programs we can run under the current implemention on available parallel machines). We discuss the model in the context of large parallel machines in <ref> [FG91b] </ref>. The trellis scheduling problem is NP-complete; furthermore, no polynomial time approximation algorithm exists, since finding a feasible schedule is also NP-complete. Our scheduler is accordingly heuristic.
Reference: [FGK + 90] <author> M. Factor, D. H. Gelernter, C. Kolb, P. L. Miller, and D. F. Sit-tig. </author> <title> Real-time performance, parallelism and program visualization in medical monitoring. </title> <institution> Research Report YALEU/DCS/RR-808, Yale University, Department of Computer Science, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: We can use probes to connect processes in different trellises since processes don't care where their inputs come from. We have demonstrated the effectiveness of the trellis with the ICM, a prototype ICU (intensive care unit) monitor <ref> [FSC + 90, CRFM90, SF90, FGK + 90] </ref>. The ICM seeks to provide early, systematic detection of evolving trends, taking advantage of asynchronous inputs when available but using primarily on-line data. 3 Currently, the ICM contains over one hundred processes divided between two trellises.
Reference: [Fis36] <author> R. Fisher. </author> <title> The use of multiple measurements in taxonomic problems. </title> <booktitle> Annual Eugenics, </booktitle> <volume> 7 </volume> <pages> 179-188, </pages> <year> 1936. </year> <month> 14 </month>
Reference-contexts: Among other tests, the system's performance has been validated using the well-known Iris data <ref> [Fis36] </ref>. 2.5 The Role of Parallelism We are now carrying out a first, preliminary parallelization of the FGP program, using Linda. A central aspect of our approach is our focus on asynchronous parallelism.
Reference: [FSC + 90] <author> M. Factor, D. F. Sittig, A. I. Cohn, D. H. Gelernter, P. L. Miller, and S. Rosenbaum. </author> <title> A parallel software architecture for building intelligent medical monitors. </title> <journal> International Journal of Clinical Monitoring and Computing, </journal> <volume> 7 </volume> <pages> 117-128, </pages> <year> 1990. </year> <note> Revised version of paper in SCAMC-89. </note>
Reference-contexts: The Trellis is implemented in C-Linda, and has been tested in a number of domains; our largest prototype is designed for patient monitoring in the intensive care unit. This application includes more than one hundred separate concurrent, asynchronous processes, and runs effectively on both shared- and distributed-memory parallel computers <ref> [FSC + 90, CRFM90, SF90] </ref>. [FG91b] discusses 3 new, wide-ranging trellis applications, in various stages of construction. <p> We can use probes to connect processes in different trellises since processes don't care where their inputs come from. We have demonstrated the effectiveness of the trellis with the ICM, a prototype ICU (intensive care unit) monitor <ref> [FSC + 90, CRFM90, SF90, FGK + 90] </ref>. The ICM seeks to provide early, systematic detection of evolving trends, taking advantage of asynchronous inputs when available but using primarily on-line data. 3 Currently, the ICM contains over one hundred processes divided between two trellises.
Reference: [GL90] <author> R. Guha and D. Lenat. </author> <title> Cyc: A mid-term report. </title> <journal> AI Magazine, </journal> <volume> XI(3):32-59, </volume> <month> Fall </month> <year> 1990. </year>
Reference: [PSF89] <editor> G. Piatetsky-Shapiro and W. Frawley, editors. </editor> <booktitle> IJCAI-89 Workshop on Knowledge Discovery in Databases, </booktitle> <year> 1989. </year>
Reference-contexts: In recent workshops, many researchers have come to the conclusion that the effective use of large databases, as opposed to relying on hand-coded (ie "compiled") knowledge bases, is our best hope of breaking through this bottleneck <ref> [FG89, PSF89] </ref>. 2. Database-driven expert systems are more powerful than conventional expert systems based on compiled knowledge, in several ways.
Reference: [SF90] <author> D. F. Sittig and M. </author> <title> Factor. Physiologic trend detection and artifact rejection: A parallel implementation of a multi-state Kalman filtering algorithm. </title> <booktitle> Computer Methods in Programs in Biomedicine, </booktitle> <volume> 31 </volume> <pages> 1-10, </pages> <year> 1990. </year> <note> Revised version of paper in SCAMC-89. </note>
Reference-contexts: The Trellis is implemented in C-Linda, and has been tested in a number of domains; our largest prototype is designed for patient monitoring in the intensive care unit. This application includes more than one hundred separate concurrent, asynchronous processes, and runs effectively on both shared- and distributed-memory parallel computers <ref> [FSC + 90, CRFM90, SF90] </ref>. [FG91b] discusses 3 new, wide-ranging trellis applications, in various stages of construction. <p> We can use probes to connect processes in different trellises since processes don't care where their inputs come from. We have demonstrated the effectiveness of the trellis with the ICM, a prototype ICU (intensive care unit) monitor <ref> [FSC + 90, CRFM90, SF90, FGK + 90] </ref>. The ICM seeks to provide early, systematic detection of evolving trends, taking advantage of asynchronous inputs when available but using primarily on-line data. 3 Currently, the ICM contains over one hundred processes divided between two trellises.
Reference: [SW86] <author> C. Stanfill and D. Waltz. </author> <title> Toward memory-based reasoning. </title> <journal> Communications of the ACM, </journal> <volume> 29(12) </volume> <pages> 1213-1228, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: A central aspect of our approach is our focus on asynchronous parallelism. Interesting and significant results have been obtained in the use of synchronous parallelism in database-driven expert systems that in some ways resemble ours (notably, the work of Waltz and Stanfill on the Connection Machine <ref> [SW86] </ref>). But this previous work doesn't obviate the need for (indeed, only marginally relates to) new research on asynchronous techniques. Asynchronous programs tend to be largely different from synchronous ones.
References-found: 17

