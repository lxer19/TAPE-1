URL: http://www.cs.rice.edu/~andras/ECAI/rood.ps
Refering-URL: http://www.cs.rice.edu/~andras/ECAI/rood.html
Root-URL: 
Email: cmr1001@cl.cam.ac.uk  
Title: Efficient Finite-State Approximation of Context Free Grammars  
Author: C.M. Rood 
Address: Cambridge  
Affiliation: Computer Laboratory University of  
Abstract: This paper introduces a novel method for constructing finite-state machines recognising context free (CF) grammars. The method utilizes the idea of a path through a finite-state machine (FSM). Certain paths form the basis for an unfolding process which is applied to the LR(0) characteristic finite-state machine (CFSM) corresponding to the grammar. The next section discusses the approximation algorithm, including this unfolding process, in more detail, and section 3 introduces the concept of an unfolding criterion. Section 4 proves the soundness of the approximation method, and its exactness to arbitrary, fixed recursive depths. Section 5 presents initial computational figures resulting from an implementation of the method. A variation of the method that is more computationally feasible is discussed. The final section compares the method with existing research on finite-state approximation of CF grammars, and presents preliminary conclusions regarding the method. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alfred V. Aho, Ravi Sethi and Jeffrey D. Ullman. </author> <year> 1986. </year> <title> Compil ers: Principles, Techniques, and Tools. </title> <publisher> Addison-Wesley, </publisher> <address> Wok-ingham, England. </address>
Reference-contexts: We consider the non-deterministic resultant FSM for simplicity. Standard results of automata theory give the extension to the corresponding determinised FSM. (See [3] and <ref> [1] </ref>.) The unfolding criterion, N , induces an equivalence relation on the set P aths (M; s) of all paths through the LR (0) CFSM, M , corresponding to G, which begin at the start state, s 0 , and end at the state s.
Reference: [2] <author> Alan W. Black. </author> <year> 1989. </year> <title> "Finite State Machines from Feature Grammars". </title> <editor> In Masaru Tomita, editor, </editor> <booktitle> International Workshop on Parsing Technologies, </booktitle> <pages> pages 277-285. </pages> <institution> Carnegie Mellon University Press, Pittsburgh, Pennsylvania. </institution>
Reference-contexts: Initial results for G 50 , a grammar approximating a large subset of the English language whose CFSM has 50 states, show that the modified unfolding algorithm produces results in 18h40m10:0s on a large SUNstation, while the full unfolding algorithm takes longer than 48h. 5 RELATED WORK AND CONCLUSIONS In <ref> [2] </ref>, Black mentions that finite-state machines can approximate CF grammars exactly to finite recursive depths. The unfolding criterion can be seen as inducing an algorithmic re-alisation of this idea. The exponential blow-up of paths that must be generated is a consequence of the inherrent exponential nature of the problem.
Reference: [3] <author> John E. Hopcroft and Jeffrey D. Ullman. </author> <year> 1971. </year> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Wokingham, England. </address>
Reference-contexts: 1 THE APPROXIMATION ALGORITHM The LR (0) CFSM for a CF grammar, G, can be seen as the finite-state controller for a shift-reduce pushdown recogniser, R. Standard results of automata theory tell us that the language recognised by R is the same as that generated by G, L (G) <ref> [3] </ref>. The process of approximating L (G) with a finite-state machine, M , can be performed directly by applying the following two steps. We start with the LR (0) CFSM for G, M C . 1. <p> We consider the non-deterministic resultant FSM for simplicity. Standard results of automata theory give the extension to the corresponding determinised FSM. (See <ref> [3] </ref> and [1].) The unfolding criterion, N , induces an equivalence relation on the set P aths (M; s) of all paths through the LR (0) CFSM, M , corresponding to G, which begin at the start state, s 0 , and end at the state s.
Reference: [4] <author> Fernando C. N. Pereira and Rebecca N. Wright. </author> <year> 1991. </year> <title> "Finite State Approximation of Phrase Structure Grammars". </title> <booktitle> Proceedings of the 29th Annual Meeting of the Association for Computational Linguistics, </booktitle> <pages> pages 246-255, </pages> <institution> Berkeley, California. Association for Computational Linguistics, Morristown, New Jersey. Efficient Finite-State Approximation of CFGs 64 C.M. Rood </institution>
Reference-contexts: We start with the LR (0) CFSM for G, M C . 1. For each state in M C containing a completed dotted rule, an *-transition is inserted in M C , in accordance with the corresponding reduce move of R. This process can be termed flattening <ref> [4] </ref>. 2. M C is determinised (and optimised), yielding the resultant FSM, M. As an example, consider the grammar G 1 : S 0 ! S S ! aXajbXb X ! c The CFSM for G 1 appears in Figure 1. <p> Rood Proceedings of the ECAI 96 Workshop Extended Finite State Models of Language Edited by A. Kornai. bca and bcb. To remedy this type of failing, we introduce unfolding <ref> [4] </ref> to encapsulate information in the stack R manipulates into the resultant FSM. Our process of unfolding takes place in two stages: 1. All paths through M C are calculated and classified accord ing to an unfolding criterion. 2. <p> Lemma 1 shows w is also accepted by R U and hence L (G) L (M N ), as required by the theorem. 2 2 For a more detailled proof of similar results, see <ref> [4] </ref>, pages 249-250. Efficient Finite-State Approximation of CFGs 61 C.M. <p> P ! DetN omjP N Det ! ArtjN P 0 s N om ! N jN omP P jAdjN om P P ! P N P where the symbols Art; N; P N and P correspond to the parts of speech "article", "noun", "proper noun" and "preposition". 4 4 See <ref> [4] </ref>, page 253. Efficient Finite-State Approximation of CFGs 63 C.M. Rood 4 COMPUTATIONAL RESULTS The techniques described in this paper have all been implemented (in ANSI C, running on both PCs and UNIX workstations) and tested on a variety of small grammars. <p> Unlike Black's method of realising the approximating power of finite-state machines, the method presented here is exact to finite recursives depths, and always sound beyond these depths. The idea behind flattening, and the term "unfolding" are taken from <ref> [4] </ref>. Pereira and Wright unfold CFSMs according to "stack congruences". Their method of approximation is exact for left- and right-linear CFGs, as well as a variety of other cases. It fails on G 2 , however, and many other self-embedding CFGs.
References-found: 4

