URL: http://www.cs.berkeley.edu/~chad/microbrowser/microbrowser.ps
Refering-URL: http://www.cs.berkeley.edu/~chad/research/
Root-URL: 
Title: Microbrowser: An Extensible Web Browser Architecture  
Author: Chad Owen Yoshikawa 
Affiliation: Department of Electrical Engineering and Computer Science Computer Science Division University of California, Berkeley  
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> World Wide Web Consortium Working Group, </institution> <note> Document Object Model, 1997. http://www.w3.org/- DOM. </note>
Reference-contexts: For example, the extension may need to be co-located with client's computer or require access to the browser formatting engine. 1.1 Browser Trends Commercial web browsers are growing more complex at an alarming rate. New technology such as Dynamic HTML <ref> [1] </ref> and the Extensible Meta Language (XML) [2] are being incorporated in commercial browsers such as Netscape's Communicator and Microsoft's Internet Explorer.
Reference: [2] <institution> World Wide Web Consortium Working Group, Extensible Meta Language, </institution> <year> 1997. </year> <note> http://www.w3.org/- XML. </note>
Reference-contexts: For example, the extension may need to be co-located with client's computer or require access to the browser formatting engine. 1.1 Browser Trends Commercial web browsers are growing more complex at an alarming rate. New technology such as Dynamic HTML [1] and the Extensible Meta Language (XML) <ref> [2] </ref> are being incorporated in commercial browsers such as Netscape's Communicator and Microsoft's Internet Explorer. <p> The microbrowser can download handlers for arbitrary protocols, which was covered in Section 4.1, and this constraint will not be reviewed in this section. 5.2.1 Data Types: Parser Limitations Recently, the W3C has been advocating the use of XML instead of HTML as a language for describing web pages <ref> [2] </ref>. XML is an extensible meta language which can be more easily parsed than HTML, and can describe a richer set of documents. It allows the the creation of arbitrary new tags, instead of being limited to the standard set of HTML tags.
Reference: [3] <institution> World Wide Web Consortium Working Group, </institution> <note> Web Accessibility Initiative, 1997. http://www.w3.org /WAI. </note>
Reference-contexts: There is no indication that the changes are slowing down either; the W3C work-in-progress committees are proposing new features such as web accessibility for the handicapped <ref> [3] </ref>, Math Markup Language [4], and internet content ratings [5]. In order to quantify the browser growth rate, we can examine the code size of successive releases of Netscape's client which includes a web browser, applications such as mail and news, and plugins.
Reference: [4] <institution> World Wide Web Consortium Working Group, Math Markup Language, </institution> <year> 1997. </year> <note> http://www.w3.org/- Math. </note>
Reference-contexts: There is no indication that the changes are slowing down either; the W3C work-in-progress committees are proposing new features such as web accessibility for the handicapped [3], Math Markup Language <ref> [4] </ref>, and internet content ratings [5]. In order to quantify the browser growth rate, we can examine the code size of successive releases of Netscape's client which includes a web browser, applications such as mail and news, and plugins.
Reference: [5] <institution> World Wide Web Consortium Working Group, Platform for Internet Content Selection, </institution> <year> 1997. </year> <note> http://- www.w3.org/PICS. </note>
Reference-contexts: There is no indication that the changes are slowing down either; the W3C work-in-progress committees are proposing new features such as web accessibility for the handicapped [3], Math Markup Language [4], and internet content ratings <ref> [5] </ref>. In order to quantify the browser growth rate, we can examine the code size of successive releases of Netscape's client which includes a web browser, applications such as mail and news, and plugins.
Reference: [6] <author> F. P. Brooks, </author> <booktitle> The Mythical Man Month Essays on Software Engineering. </booktitle> <address> Reading, MA: </address> <publisher> Addison Wesley, </publisher> <year> 1975. </year>
Reference-contexts: Programming effort, measured in human-months, has been shown to correlate directly with program size and program complexity. The effort associated with modifying an application can increase exponentially with code size, while increased program complexity can raise programming effort by constant factors <ref> [6] </ref>. The rapid growth of commercial web browsers makes it imperative to reduce the programming effort required to add new features. <p> Reuse of browser extensions is encouraged; extensions can be reused within the same browser and between different browsers. The browser application's complexity is managed by using a microarchitec-ture approach. Under this system, Brooks experienced that programmers could grow more complex programs they could build normally <ref> [6] </ref>. Another method to mitigate programming effort is the use of a single interposition mechanism [9] for loading extensions. This simple model should decrease the initial microbrowser learning curve and make the method of adding extensions easier to understand.
Reference: [7] <author> C. Yoshikawa, B. Chun, P. Eastham, A. Vahdat, T. Anderson, and D. Culler, </author> <title> Using Smart Clients to Build Scalable Services, </title> <booktitle> in Proceedings of the USENIX Technical Conference, </booktitle> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: It also would let the user restrict the set of features that are installed, thereby making the browser customizable and more manageable in terms of the application code size. Our previous work in Smart Clients <ref> [7] </ref> uses the browser's extensibility to make it more aware of each web server during runtime. The client actively participates in its load-balancing and name lookup instead of blindly relying on the server to make these decisions.
Reference: [8] <author> B. Bershad et al., </author> <title> SPIN an extensible microkernel for application-specific operating systems services, </title> <type> Tech. Rep. </type> <institution> TR-94-03-03, University of Washington, </institution> <address> Seattle, WA, </address> <year> 1994. </year>
Reference-contexts: The microbrowser architecture is a framework or microarchitecture; the browser is incrementally grown at runtime instead of being built completely at design time. The microbrowser is analogous to the microkernel approach to operating systems <ref> [8] </ref>; the microbrowser partitions the browser into a core and a set of loadable 4 modules. The microbrowser core is bootstrapping code necessary to load the first extension and install it into the browser. Our first requirement is trivially solved by using a platform-independent language for the microbrowser implementation. <p> This client object translates calls from the URL class to the Content Handler service. 3.1.2 Global Interposition The first proposed extension mechanism uses global interposition, a common extension mechanism found in systems such as SLIC [19] and SPIN <ref> [8] </ref>. In these systems, interposition agents (service extensions) are grouped according their interface type, and same-typed agents interpose on each other. Clients call on a particular interface (e.g. text/html), and the client request is forwarded along the chain of agents until the request is handled.
Reference: [9] <author> M. B. Jones, </author> <title> Interposition agents: Transparently interposing user code at the system interface, </title> <booktitle> in Proceedings of the 14th Symposium on Operating Systems Principles (B. </booktitle> <editor> Liskov, ed.), </editor> <address> (New York, NY, USA), </address> <pages> pp. 80-93, </pages> <publisher> ACM Press, </publisher> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: The browser application's complexity is managed by using a microarchitec-ture approach. Under this system, Brooks experienced that programmers could grow more complex programs they could build normally [6]. Another method to mitigate programming effort is the use of a single interposition mechanism <ref> [9] </ref> for loading extensions. This simple model should decrease the initial microbrowser learning curve and make the method of adding extensions easier to understand. The architecture satisfies our requirements for flexibility and runtime modification as well.
Reference: [10] <author> Netscape Communications Corporation, </author> <title> Netscape Navigator, </title> <note> 1994. http://www.netscape.com. </note>
Reference-contexts: Fault Transparency When possible, the service should remain available in the face of individual server failures. Wide Area Service Topology Individual servers comprising a service are increasingly distributed across the wide area <ref> [10, 11] </ref>. The server machines should not be required to have a restricted or static topology. In other words, all servers should be allowed to arbitrarily migrate to other machines; only the client's current location is fixed.
Reference: [11] <institution> Digital Equipment Corporation, Alta Vista, </institution> <year> 1995. </year> <note> http://www.altavista.digital.com/. </note>
Reference-contexts: Fault Transparency When possible, the service should remain available in the face of individual server failures. Wide Area Service Topology Individual servers comprising a service are increasingly distributed across the wide area <ref> [10, 11] </ref>. The server machines should not be required to have a restricted or static topology. In other words, all servers should be allowed to arbitrarily migrate to other machines; only the client's current location is fixed.
Reference: [12] <author> T. Berners-Lee, </author> <title> Hypertext Transfer Protocol HTTP/1.0, Oct. </title> <note> 1995. HTTP Working Group Internet Draft. </note>
Reference-contexts: A number of efforts address this limitation by hiding the physical location of a particular service behind a logical DNS hostname. Examples 6 network routers, or at the service site. of such systems include HTTP redirect <ref> [12] </ref>, DNS Aliasing [13, 14], Failsafe TCP [15], Active Networks [16] and Magic Routers [17]. 2.2 Existing Solutions A number of Web servers use Domain Name Server (DNS) aliasing to distribute load across a number of machines cooperating to provide a service.
Reference: [13] <author> T. Brisco, </author> <title> DNS Support for Load Balancing, </title> <month> Apr. </month> <year> 1995. </year> <title> Network Working Group RFC 1794. </title>
Reference-contexts: A number of efforts address this limitation by hiding the physical location of a particular service behind a logical DNS hostname. Examples 6 network routers, or at the service site. of such systems include HTTP redirect [12], DNS Aliasing <ref> [13, 14] </ref>, Failsafe TCP [15], Active Networks [16] and Magic Routers [17]. 2.2 Existing Solutions A number of Web servers use Domain Name Server (DNS) aliasing to distribute load across a number of machines cooperating to provide a service.
Reference: [14] <author> E. D. Katz, M. Butler, and R. McGrath, </author> <title> A Scalable HTTP Server: The NCSA Prototype, </title> <booktitle> in First International Conference on the World-Wide Web, </booktitle> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: A number of efforts address this limitation by hiding the physical location of a particular service behind a logical DNS hostname. Examples 6 network routers, or at the service site. of such systems include HTTP redirect [12], DNS Aliasing <ref> [13, 14] </ref>, Failsafe TCP [15], Active Networks [16] and Magic Routers [17]. 2.2 Existing Solutions A number of Web servers use Domain Name Server (DNS) aliasing to distribute load across a number of machines cooperating to provide a service.
Reference: [15] <author> I. Goldstein and P. Dale, </author> <title> A Sacalable, Fault Resilient Server for the WWW. OSF ARPA Project Proposal, </title> <booktitle> 1995. </booktitle> <pages> 33 </pages>
Reference-contexts: A number of efforts address this limitation by hiding the physical location of a particular service behind a logical DNS hostname. Examples 6 network routers, or at the service site. of such systems include HTTP redirect [12], DNS Aliasing [13, 14], Failsafe TCP <ref> [15] </ref>, Active Networks [16] and Magic Routers [17]. 2.2 Existing Solutions A number of Web servers use Domain Name Server (DNS) aliasing to distribute load across a number of machines cooperating to provide a service.
Reference: [16] <author> D. Tennenhouse and D. Wetherall, </author> <title> Towards an Active Network Architecture, </title> <booktitle> in ACM SIGCOMM Computer Communication Review, </booktitle> <pages> pp. 5-18, </pages> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: A number of efforts address this limitation by hiding the physical location of a particular service behind a logical DNS hostname. Examples 6 network routers, or at the service site. of such systems include HTTP redirect [12], DNS Aliasing [13, 14], Failsafe TCP [15], Active Networks <ref> [16] </ref> and Magic Routers [17]. 2.2 Existing Solutions A number of Web servers use Domain Name Server (DNS) aliasing to distribute load across a number of machines cooperating to provide a service.
Reference: [17] <author> E. Anderson, D. Patterson, and E. Brewer, </author> <title> The Magicrouter, an Application of Fast Packet Interposing. </title> <note> See http://HTTP.CS.Berkeley.EDU/eanders/magicrouter/, May 1996. </note>
Reference-contexts: Examples 6 network routers, or at the service site. of such systems include HTTP redirect [12], DNS Aliasing [13, 14], Failsafe TCP [15], Active Networks [16] and Magic Routers <ref> [17] </ref>. 2.2 Existing Solutions A number of Web servers use Domain Name Server (DNS) aliasing to distribute load across a number of machines cooperating to provide a service. A single logical hostname for the service is mapped onto multiple IP addresses, representing each of the physical machines comprising the service.
Reference: [18] <author> Netscape, Netscape Proxy Autoconfiguration, </author> <year> 1997. </year> <note> http://www.netscape.com. </note>
Reference-contexts: Second, the load-balancing between replicated servers is limited to random selection as a function of restricted server state (which does not include server load) <ref> [18] </ref>. Given these problems, and the fact that the URL resolution cannot be replaced by a plugin, we need an extensible browser as the Smart Clients platform. A client-side proxy is another potential mechanism to provide Smart Client functionality.
Reference: [19] <author> D. P. Ghormley, S. H. Rodrigues, D. Petrou, and T. E. Anderson, </author> <title> Interposition as an operating system extension mechanism, </title> <type> Technical Report CSD-96-920, </type> <institution> University of California, Berkeley, </institution> <month> Apr. 9, </month> <year> 1997. </year>
Reference-contexts: Content Client In Java, content handlers suffer the same limitation as protocol handlers. This client object translates calls from the URL class to the Content Handler service. 3.1.2 Global Interposition The first proposed extension mechanism uses global interposition, a common extension mechanism found in systems such as SLIC <ref> [19] </ref> and SPIN [8]. In these systems, interposition agents (service extensions) are grouped according their interface type, and same-typed agents interpose on each other. Clients call on a particular interface (e.g. text/html), and the client request is forwarded along the chain of agents until the request is handled.
Reference: [20] <author> JavaSoft, </author> <title> The JavaBeans Runtime Containment and Services Protocol draft specification, </title> <note> 1997. http://- www.javasoft.com/beans/doc/spec.html. </note>
Reference-contexts: Source files are referenced for the first time by their fully-qualified name, i.e. package.sourcefile.java, then as sourcefile.java. Interfaces and Java classes are referenced in the same manner. 14 The microbrowser application programming interface (API) is a derivation of the proposed JavaBeans Services API <ref> [20] </ref>; we have simplified the interface by removing parts that were not applicable to the micro-browser. JavaBeans are self-contained software components that are ideal for building the microbrowser; Beans are meant to be distributed and used to build larger applications.
Reference: [21] <author> W. W. W. </author> <title> Consortium, Cascading Style Sheets, </title> <note> 1997. http://www.w3.org/Style/css. </note>
Reference-contexts: For example, a simple style sheet could specify that all major page headings be written using a 12 point Helvetica font. A web page using this style sheet would have its major headings written in this typeface. Unlike other style sheet implementations, such as Cascading Style Sheets (CSS1) <ref> [21] </ref>, MSS can control the entire web page presentation. For example, the browser output device can be changed to a speech synthesizer so that web pages are spoken to the user. <p> A vision-impaired person could replace the browser formatting engine with a speech synthesizer, without downloading an entirely new browser which may be behind the technology curve of commercial browsers. The formatting of web pages can currently be customized to a limited extent using Cascading Style Sheets <ref> [21] </ref>. CSS gives the web page author some formatting flexibility. CSS lets the author associate graphical style (color, size, font) with each HTML tag, or individual tags. For example, all &lt;H1&gt; elements can be made bold and 12-pt font on a web page. <p> One major difference is that a MOP is a general mechanism to allow interposition on any method, while the microbrowser limits interposition to service methods. 6.2 Style Sheets The MSS extension is similar to cascading style sheets (CSS1), which allow the user to specify the style of the web page <ref> [21] </ref>. CSS1, however, is limited to controlling the font, color, and other simple graphical attributes. MSS, on the other hand, lets the user control the entire presentation of the web page.
Reference: [22] <author> Microsoft, </author> <title> Channel Description Format, </title> <note> 1997. http://www.microsoft.com. </note>
Reference-contexts: Companies such as Microsoft have been taking advantage of the extensibility of XML. XML is being used as the description language for Internet Explorer 4.0's Channel Description Format (CDF) <ref> [22] </ref>. New XML tags have been created to describe the schedule of pushing content out to clients, the channel logo, how many levels of the web page should be pushed out to the client.
Reference: [23] <author> A. Joseph, J. tauber, and F. Kaashoek, </author> <title> Mobile Computing with the Rover Toolkit, </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. 46, </volume> <pages> pp. 337-352, </pages> <month> Mar. </month> <year> 1997. </year>
Reference-contexts: document presentation completely from the document structure/content, microbrowser style sheets gives us the ability to switching presentation from graphics to text or speech. 5.2.3 Cache: Cache Changes for the Rover Mobile Toolkit The Rover Mobile toolkit is a toolkit for developing applications that are capable of operation in disconnected/low-bandwidth conditions <ref> [23] </ref>. The toolkit provides support for asynchronous messages to be sent to the server and provides a callback mechanism when the server replies, i.e. when network connectivity has been restored. One application that has been developed is a web browser that is capable of operating in disconnected mode.
Reference: [24] <author> G. Kiczales, J. des Rivieres, and D. G. Bobrow, </author> <title> The Art of the Metaobject Protocol. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: While the agents could check the caller (based on process ID), this suffers from other problems: the dispatch to a particular agent can take time equal to the chain length, and the agent complexity increases since each agent must now specialize for different callers. A meta-object protocol <ref> [24] </ref> (MOP) is a language-level construct which can be used to build extensible software systems. MOPs operate on the class structure, rather than on the object structure. These operations include interposition on method invocation and constructor calls. Our architecture basically simulates a MOP.
Reference: [25] <author> JavaSoft, </author> <title> Java Foundation Classes, </title> <note> 1997. http://www.javasoft.com/products/jfc. 34 </note>
Reference-contexts: For example, the user can specify the graphical layout of the web page, or instead could specify that the web page be spoken (via a software speech synthesizer) instead of being presented graphically. Java-based browsers that use the Swing graphic library <ref> [25] </ref> have more flexibility than CSS1. Swing lets the user switch the look-and-feel of the 30 browser at run time. For example, the browser can be switched from a Windows look-and-feel to a Macintosh look-and-feel.
References-found: 25

