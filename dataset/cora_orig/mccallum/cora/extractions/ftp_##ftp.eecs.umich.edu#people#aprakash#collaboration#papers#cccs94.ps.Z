URL: ftp://ftp.eecs.umich.edu/people/aprakash/collaboration/papers/cccs94.ps.Z
Refering-URL: http://www.eecs.umich.edu/~aprakash/jaegert/pubs.html
Root-URL: http://www.cs.umich.edu
Email: E-mails: fjaegertjaprakashg@eecs.umich.edu  e-mail, active e-mail.  
Title: Support for the File System Security Requirements of Computational E-Mail Systems  
Author: Trent Jaeger and Atul Prakash 
Keyword: File systems, security, computer-supported cooperative work, groupware, collaboration  
Note: technology, computational  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Software Systems Research Laboratory Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: Computational e-mail systems, which allow mail messages to contain command scripts that automatically execute upon receipt, can be used as a basis for building a variety of collaborative applications. However, their use also presents a serious security problem because a command script from a sender may access/modify receiver's private files or execute applications on receiver's behalf. Existing solutions to the problem either severely restrict I/O capability of scripts, limiting the range of applications that can be supported over computational e-mail, or permit all I/O to scripts, potentially compromising the security of the receiver's files. Our model, called the intersection model of security, permits I/O for e-mail from trusted senders but without compromising the security of private files. We describe two implementations of our security model: an interpreter-level implementation and an operating systems-level implementation. We discuss the tradeoffs between the two implementations and suggest directions for future work. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. S. Borenstein. </author> <title> Computational mail as a network infrastructure for computer-supported cooperative work. </title> <booktitle> In CSCW 92 Proceedings, </booktitle> <pages> pages 67-74, </pages> <year> 1992. </year>
Reference-contexts: 1 INTRODUCTION Electronic mail (e-mail) is a standard and popular mechanism for asynchronous communication, enabling users to send messages to one another. Computational e-mail <ref> [1, 2, 4] </ref>, also called active or enabled e-mail, extends the power of standard e-mail, allowing a message to contain a command script. The command script in a message is executed automatically when the message is read, enabling a wide variety of actions to be encapsu lated in messages. <p> The systems are: (1) ATOMICMAIL; (2) Safe-Tcl; (3) Telescript; (4) Mosaic; and (5) collaborative systems based on replicated architectures. Borenstein has proposed several implementations for computational e-mail, including ATOMICMAIL <ref> [1] </ref>, in which command scripts are written in LISP, and its successor Safe-Tcl [2], in which scripts are written in another interpreted language, Tk/Tcl [7].
Reference: [2] <author> N. S. Borenstein. </author> <title> Email with a mind of its own: The Safe-Tcl language for enabled mail. </title> <note> In UL-PAA '94, 1994. Available via anonymous ftp from ics.uci.edu in the file mrose/safe-tcl/safe-tcl.tar.Z. </note>
Reference-contexts: 1 INTRODUCTION Electronic mail (e-mail) is a standard and popular mechanism for asynchronous communication, enabling users to send messages to one another. Computational e-mail <ref> [1, 2, 4] </ref>, also called active or enabled e-mail, extends the power of standard e-mail, allowing a message to contain a command script. The command script in a message is executed automatically when the message is read, enabling a wide variety of actions to be encapsu lated in messages. <p> The systems are: (1) ATOMICMAIL; (2) Safe-Tcl; (3) Telescript; (4) Mosaic; and (5) collaborative systems based on replicated architectures. Borenstein has proposed several implementations for computational e-mail, including ATOMICMAIL [1], in which command scripts are written in LISP, and its successor Safe-Tcl <ref> [2] </ref>, in which scripts are written in another interpreted language, Tk/Tcl [7]. Borenstein has recommended the use of Safe-Tcl as the standard system for computational e-mail, partly because Tk/Tcl provides commands for building applications with graphical user interfaces and is available on a wide variety of platforms.
Reference: [3] <author> N. S. Borenstein and N. Freed. </author> <title> MIME (Multipurpose Internet Mail Extensions): Mechanisms for specifying and describing the format of internet message bodies. </title> <type> RFC 1521. </type>
Reference-contexts: Furthermore, to ensure that computational e-mail can be effectively used in a heterogeneous environment, e-mail messages of Safe-Tcl use a MIME-compatible <ref> [3] </ref> format, and they can be sent and read (executed) by Internet Mail systems such as mhn [12]. In ATOMICMAIL, file system security is provided by modifying I/O functions in the scripting language to prevent a script from accessing the file system, except for a single public directory.
Reference: [4] <author> Y. Goldberg, M. Safran, and E. Shapiro. </author> <title> Active Mail a framework for implementing groupware. </title> <booktitle> In CSCW 92 Proceedings, </booktitle> <pages> pages 75-83, </pages> <year> 1992. </year>
Reference-contexts: 1 INTRODUCTION Electronic mail (e-mail) is a standard and popular mechanism for asynchronous communication, enabling users to send messages to one another. Computational e-mail <ref> [1, 2, 4] </ref>, also called active or enabled e-mail, extends the power of standard e-mail, allowing a message to contain a command script. The command script in a message is executed automatically when the message is read, enabling a wide variety of actions to be encapsu lated in messages.
Reference: [5] <author> M. Knister and A. Prakash. DistEdit: </author> <title> A distributed toolkit for supporting multiple group editors. </title> <booktitle> In Proceedings of the Third ACM Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 343-355, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Neither option provides a strong guarantee of the security of the file system. Several distributed applications use a replicated architecture in which every command is executed at each site [6, 8]. For example, DistEdit <ref> [5, 6] </ref>, a collaborative editor toolkit, replicates an editor process for each user in the collaboration. User commands are sent to each editor process, to ensure the consistency of the editors' buffers.
Reference: [6] <author> M. Knister and A. Prakash. </author> <title> Issues in the design of a toolkit for supporting multiple group editors. </title> <journal> Computing Systems, </journal> <volume> 6(2) </volume> <pages> 135-166, </pages> <year> 1993. </year>
Reference-contexts: The second approach requires extra diligence on the part of the administrators to catalog safe scripts. Neither option provides a strong guarantee of the security of the file system. Several distributed applications use a replicated architecture in which every command is executed at each site <ref> [6, 8] </ref>. For example, DistEdit [5, 6], a collaborative editor toolkit, replicates an editor process for each user in the collaboration. User commands are sent to each editor process, to ensure the consistency of the editors' buffers. <p> Neither option provides a strong guarantee of the security of the file system. Several distributed applications use a replicated architecture in which every command is executed at each site [6, 8]. For example, DistEdit <ref> [5, 6] </ref>, a collaborative editor toolkit, replicates an editor process for each user in the collaboration. User commands are sent to each editor process, to ensure the consistency of the editors' buffers.
Reference: [7] <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Borenstein has proposed several implementations for computational e-mail, including ATOMICMAIL [1], in which command scripts are written in LISP, and its successor Safe-Tcl [2], in which scripts are written in another interpreted language, Tk/Tcl <ref> [7] </ref>. Borenstein has recommended the use of Safe-Tcl as the standard system for computational e-mail, partly because Tk/Tcl provides commands for building applications with graphical user interfaces and is available on a wide variety of platforms.
Reference: [8] <author> A. Prakash and H. Shim. DistView: </author> <title> Support for building efficient collaborative applications using replicated objects. </title> <booktitle> In Proceedings of the Fifth ACM Conference on Computer-Supported Cooperative Work, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: The second approach requires extra diligence on the part of the administrators to catalog safe scripts. Neither option provides a strong guarantee of the security of the file system. Several distributed applications use a replicated architecture in which every command is executed at each site <ref> [6, 8] </ref>. For example, DistEdit [5, 6], a collaborative editor toolkit, replicates an editor process for each user in the collaboration. User commands are sent to each editor process, to ensure the consistency of the editors' buffers.
Reference: [9] <author> M. Satyanarayanan. </author> <title> Integrating security in a large distributed system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 247-280, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: AFS and Unix security models are often used together to provide file system security, but much of their functionality overlaps. In this section, we examine the use of only the AFS-specific functionality. File security in AFS <ref> [9] </ref> is provided by: (1) tokens and (2) access control lists (ACLs). Tokens are granted by an authentication server called Kerberos [11]. The AFS authentication mechanism compares the token against each entry in the requested file's ACL.
Reference: [10] <author> M. Satyanarayanan. </author> <title> Scalable, secure, and highly available distributed file access. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 9-21, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: such an application is allowed to be invoked, a security risk arises because the application may perform I/O without validating the I/O commands with respect to the intersection model. 4.1 AFS-BASED APPROACH First, we examine the ability to limit a user's access rights using the security model provided by AFS <ref> [10] </ref>. AFS and Unix security models are often used together to provide file system security, but much of their functionality overlaps. In this section, we examine the use of only the AFS-specific functionality. File security in AFS [9] is provided by: (1) tokens and (2) access control lists (ACLs).
Reference: [11] <author> J. G. Steiner, C. Neumann, and J. J. Schiller. Ker-beros: </author> <title> An authentication service for open network systems. </title> <booktitle> In Proceedings of the Usenix Conference, </booktitle> <pages> pages 191-202, </pages> <year> 1988. </year>
Reference-contexts: In this section, we examine the use of only the AFS-specific functionality. File security in AFS [9] is provided by: (1) tokens and (2) access control lists (ACLs). Tokens are granted by an authentication server called Kerberos <ref> [11] </ref>. The AFS authentication mechanism compares the token against each entry in the requested file's ACL. If the owner of the token matches a user on the ACL, or is a member of a group on the ACL, access privileges associated with the matching ACL entry are granted.
Reference: [12] <author> J. Sweet. </author> <title> A multi-media e-mail tutorial with MH. </title>
Reference-contexts: Furthermore, to ensure that computational e-mail can be effectively used in a heterogeneous environment, e-mail messages of Safe-Tcl use a MIME-compatible [3] format, and they can be sent and read (executed) by Internet Mail systems such as mhn <ref> [12] </ref>. In ATOMICMAIL, file system security is provided by modifying I/O functions in the scripting language to prevent a script from accessing the file system, except for a single public directory.
Reference: [13] <author> J. E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic White Paper. </title>
Reference-contexts: Besides computational e-mail, several other systems allow command scripts to be executed, and need to address the security problem. In Telescript 1 <ref> [13] </ref>, a system meant for building electronic marketplaces, clients can send command scripts which execute at a server. In Mosaic, the popular browsing tool based on World-wide Web, an information server can be defined that enables a command script to be run at a client who accesses the server. <p> This provides security for the file system, but it limits the ways in which computational e-mail can be used. Borenstein recognized that this approach can be too restrictive for many collaborative applications, so he has left open the possibility of "power-augmenting extensions" to the language. Telescript <ref> [13] </ref> and Mosaic, the popular information server, allow client/server processing to be specified using command scripts. In Telescript, clients send scripts which execute at the server. File system security in Tele-script is provided by eliminating the command script's ability to perform all I/O.
References-found: 13

