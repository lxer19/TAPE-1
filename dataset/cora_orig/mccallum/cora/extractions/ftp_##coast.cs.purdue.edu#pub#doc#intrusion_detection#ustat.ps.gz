URL: ftp://coast.cs.purdue.edu/pub/doc/intrusion_detection/ustat.ps.gz
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ24.html
Root-URL: http://www.cs.purdue.edu
Title: A Real-time Intrusion Detection System for UNIX  
Degree: A Thesis submitted in partial satisfaction of the requirements for the degree of Master of Science in Computer Science by Koral Ilgun Committee in charge: Professor Richard A. Kemmerer, Chairperson Professor Amr El-Abbadi Professor Jianwen Su  
Date: USTAT  November 1992  
Address: Santa Barbara  
Affiliation: UNIVERSITY OF CALIFORNIA  
Abstract-found: 0
Intro-found: 1
Reference: [C2-b91] <author> Sun Microsystems, Inc., </author> <title> SunOS Release 4.1.1. C2-BSM Patch, Revision A, </title> <type> 2550 Garcia Ave, </type> <institution> Mountain View, </institution> <address> CA 94043, </address> <month> Dec. 15, </month> <year> 1991. </year>
Reference-contexts: A complete list of programs or system/library calls that are audited by these flags can be found in <ref> [C2-b91] </ref>. Control files used by the audit system Besides the audit collection data files there are two special files used by the audit system. /etc/security/audit/audit_control, and /etc/security/audit/audit_data 41 The audit control file: The audit control file is read by the audit daemon to determine how to audit. <p> For a permanent change the appropriate entry in the passwd file should be edited, whereas for an immediate change the audit program should be executed with -u option. Details of these can be found in <ref> [C2-b91] </ref>. Audit data files and audit records This section describes the structure of the audit data files and the structure of the audit records contained in these files. Audit data files: The audit data files are created in the file system specified in the audit control file. <p> This output can be used as a single trail input to Ustat's preprocessor. (See <ref> [C2-b91] </ref> or the auditreduce (8) man pages for more information about auditreduce). * There exist some real-time related problems with both of the options above. There is almost always a delay involved between the time an event has occurred and the time the event is recorded.
Reference: [Chen90] <author> K. Chen, S.C. Lu and H.S. Teng, </author> <title> "Adaptive Real-Time Anomaly Detection Using Inductively Generated Sequential Patterns," presented at the Fifth Intrusion Detection Workshop, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, CA, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: This technique shares the same advantage and disadvantages with the statistical anomaly detection techniques. Exam ples of this approach are W&S [Vacc89] and TIM <ref> [Chen90] </ref>. * Rule-based Penetration Identification: These tools are characterized by their expert system properties that fire rules when audit information indicates illegal activities. Most of the current intrusion detection tools supplement their anomaly detection components with rule-based expert system components. For example, IDES [Lunt92], NADIR, and W&S.
Reference: [Disc85] <author> Anthony V. Discolo, </author> <title> "4.2B SD UNIX Security," </title> <institution> Computer Science Dept., University of California, Santa Barbara, </institution> <month> Apr. </month> <year> 1985. </year>
Reference-contexts: In some UNIX systems these files are left readable by everyone. Discolo in <ref> [Disc85] </ref> illustrates how plaintext passwords can be obtained from /dev/kmem. In recognition of this violation and the potential for similar ones, Ustat uses Fileset #1. These files should only be read by certain system files that are identified in Fileset #3.
Reference: [Fors84] <author> Richard Forsyth, </author> <title> Expert Systems: Principles and Case Studies, </title> <address> New York, NY, </address> <publisher> Methuen, </publisher> <year> 1984. </year>
Reference-contexts: Each formatted audit record corresponds to at most one signature action. The fields in the audit record are used to detect the changes on the subject or object attributes. 2.3.2 The Knowledge-base In <ref> [Fors84] </ref> Forsyth describes a knowledge-base as a collection of information structures for encoding expertise, which is usually elicited from a human specialist and reformulated as a collection of rules.
Reference: [Harm88] <author> P. Harmon, R. Maus, W. </author> <title> Morrissey, </title> <booktitle> Expert Systems Tools and Applications, 605 Third Avenue, </booktitle> <address> New York, N.Y., </address> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1988. </year>
Reference-contexts: Ustat's knowledge-base consists of different modules that can be updated without affecting the inference mechanisms. In fact, new knowledge (i.e. new penetration scenarios) can be added to the knowledge-base without modifying any line of source code. <ref> [Harm88] </ref> lists categories of expert system tools as follows. 1. Inductive tools: These generate rules from examples. 2. Simple rule-based tools: These use if-then rules to represent knowledge. They are simpler than structured rule-based tools. 3.
Reference: [Hubb90] <author> B. Hubbard, T. Haley, N. McAuliffe, L. Schaefer, N. Kelem, D. Wolcott, R. Feiertag and M. Schaeffer, </author> <title> "Computer System Intrusion Detection," Trusted Information Systems, Inc., RADC-TR-90-413, </title> <type> Final Technical Report, </type> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: The idea is that an unusually high number of occurrences within a specified period may indicate the presence of an intruder. The difficulty with this technique is to identify the threshold number, and the interval of analysis time. NADIR <ref> [Hubb90] </ref> and MIDAS [Sebr88] employ threshold detection compo nents in their systems. - Profile-Based: This approach uses statistical measures to identify expected behavior of users or user groups.
Reference: [Ilgu91] <author> K. Ilgun, </author> <title> "Implementation of Ustat Audit Data Preprocessor," </title> <type> Term Paper, </type> <institution> Computer Science Dept., University of California, Santa Barbara, </institution> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: The second system differed substantially from the first one. The first version of the preprocessor <ref> [Ilgu91] </ref> was written using the first version of C2 auditing system of SunOS 4.1.1. This version of auditing had many deficiencies in providing a complete audit trail for intrusion analysis. <p> How ever, the auditing system did not record objects consistently. Fortunately, these problems no longer exist in the release of C2-BSM Patch of SunOS 4.1.1. A detailed explanation of the previous release and the Ustat preprocessor that was written for the previous release can be found in <ref> [Ilgu91] </ref>. 4.1.2.6 Current Problems The C2-BSM was quite successful in solving our previous problems. During the implementation of Ustat it has been realized that some of the previous problems are no longer of any concern.
Reference: [Lunt92] <author> Teresa F. Lunt et al. </author> <title> "A Real-time Intrusion Detection Expert System (IDES)," </title> <type> SRI Technical Report, </type> <month> February 28, </month> <year> 1992. </year>
Reference-contexts: Most of the current intrusion detection tools supplement their anomaly detection components with rule-based expert system components. For example, IDES <ref> [Lunt92] </ref>, NADIR, and W&S. All these approaches and their corresponding tools are discussed in detail in [Porr91]. 2.1.4 Features of STAT In the last section we categorized different intrusion detection systems. STAT falls in the category of rule-based penetration identification systems. <p> For the same scenario several different audit record sequences might exist and those minor variations might slip unnoticed. STAT overcomes this problem by using a 10 higher-level audit record independent representation of penetration scenarios and by supporting permutable rule sequences. Garvey and Lunt <ref> [Lunt92] </ref> also proposed a new intrusion detection approach called Model-Based Intrusion Detection. With this approach they address the above problems and provide an audit record independent technique to represent intrusion scenarios. STAT is designed to be a real-time system. <p> Among the possibilities to increase the performance of Ustat are: * Running Ustat on a dedicated machine (IDES <ref> [Lunt92] </ref> does this), * A periodic audit filesystem switch for the audit daemon, so that Ustat will not starve while waiting for the disk I/O (see Test Case 3, in Section 5.4 of Chapter 5). * Running Ustat and the audit daemon on a system with better perfor 183 mance, (faster
Reference: [Mart88] <author> James Martin, Steven Oxman. </author> <title> Building Expert Systems: A Tutorial, </title> <address> Englewood Cliffs, N.J., </address> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: Martin and Oxman <ref> [Mart88] </ref> emphasize the modularity and independence of the expert system components in the following way. If an expert system component needs to be built or modified, it should not affect the other components. The major task of building an expert system will be the development of the knowledge-base. <p> The inference engine does not "know" what rules and facts should be or could be in the knowledge-base. For any given inference step, the inference engine blindly uses all the relevant rules and facts that are available to it at that time. In <ref> [Mart88] </ref>, Martin and Oxman list several problem solving activities that are supported by expert systems. STAT's activity is best described by monitoring, which is defined as follows. "Monitoring involves observing and checking for some specific purpose. <p> However, if observed system behaviors exceed these limits, the monitoring system is usually designed to notify some system or operator." 23 STAT's inference engine uses a forward chaining inference scheme <ref> [Mart88] </ref>. The forward-chaining scheme comes from the well-known logic rule called modus ponens.
Reference: [Porr91] <author> P. A. Porras. </author> <title> "STAT: A State Transition Analysis Tool for Intrusion Detection,", </title> <type> Master's Thesis, </type> <institution> Computer Science Dept., University of California, Santa Barbara, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: Therefore, an automated audit data analysis tool is the only solution. An intrusion detection system is a possibly enhanced version of such an analysis tool. The State Transition Analysis Tool (STAT) presented in <ref> [Porr91] </ref> introduces a novel idea to represent computer penetrations and provides an expert system model to detect compromises. STAT makes use of the audit trails that are provided by the audit collection mechanisms of the target systems. <p> The following chapter gives an overview of STAT without getting into the specifics of Ustat. Chapter 3 gives the design issues of Ustat and lists major changes that have been made to implement Ustat that differ from the design that was proposed in <ref> [Porr91] </ref>. Chapter 4 presents a detailed discussion of each component of Ustat. <p> Finally, chapter 6 provides direction for future research and gives conclusions about the research reported in this thesis. 3 SunOS is a trademark of Sun Microsystems 4 Chapter 2 Overview of STAT 5 This page is intentionally left blank 6 2 Overview of STAT In <ref> [Porr91] </ref> Porras introduces a new model for representing computer penetrations and applies the model to the development of a real-time intrusion detection tool. The model is called Penetration State Transition Analysis and the application tool is referred to as STAT (a State Transition Analysis Tool). <p> In this model a penetration is viewed as a sequence of signature actions and a corresponding sequence of state changes that lead the computer from some initial state to a target compromised state. In the STAT approach penetrations are represented by state transition diagrams <ref> [Porr91] </ref>. STAT uses these representations and the audit trails of the target system to keep track of the critical actions that must occur for the successful completion of a penetration. This approach of matching critical actions differs from other rule-based penetration identification tools that pattern match sequences of audit records. <p> This approach of matching critical actions differs from other rule-based penetration identification tools that pattern match sequences of audit records. This chapter gives a brief overview of the STAT design. The interested reader should refer to <ref> [Porr91] </ref> for further information. 2.1 Introduction to STAT We can characterize STAT by its three basic properties: * STAT is a real-time expert system intrusion detection tool, * it employs rule-based analysis on the audit trails of multi-user computer systems, and * it searches for known penetrations. 2.1.1 Auditing Users Intrusion <p> Most of the current intrusion detection tools supplement their anomaly detection components with rule-based expert system components. For example, IDES [Lunt92], NADIR, and W&S. All these approaches and their corresponding tools are discussed in detail in <ref> [Porr91] </ref>. 2.1.4 Features of STAT In the last section we categorized different intrusion detection systems. STAT falls in the category of rule-based penetration identification systems. Current rule-based penetration identification tools have several weaknesses that STAT aims to improve on. <p> Throughout this document we refer to him/her as the SSO. 2.2 State Transition Analysis 2.2.1 State and State Transitions As its name implies, STAT analyzes the audit data by keeping track of the state changes on the system. Porras <ref> [Porr91] </ref> defines the state as follows. "State is the collection of all volatile, permanent and semi-permanent data stores of the system at a specific time." However, for a given instant in time, it is infeasible to determine the value of all the data stores on the system. <p> In <ref> [Porr91] </ref> Porras suggests eight different filesets for the prototype implementation (See Table 2.1). <p> Suggest possible actions to the SSO to preempt the next state transition and/or to recover from the damage, if any. 4. Take preemptive action, such as disabling the terminal connection that is being used for the penetration, logging out the attacker, etc. In <ref> [Porr91] </ref> Porras suggests that the decision engine might also be configured to be more sensitive to certain subjects than to others and this could be combined with the operation of a profile-based anomaly detection component, which would increase the sensitivity of the decision engine to subjects whose activities generate a high <p> of STAT's design enables the decision engine to be highly complex, without interfering with the rest of the STAT components. 25 This page is intentionally left blank 26 Chapter 3 USTAT's Approach to Intrusion Detection 27 This page is intentionally left blank 28 3 USTAT's Approach to Intrusion Detection Porras <ref> [Porr91] </ref> suggests an example prototype implementation for STAT. The target system chosen for the prototype is UNIX, which was chosen for the following reasons. 1. Availability of documentation. 2. Vulnerability of UNIX, and the availability of security flaws and pene tration scenarios. 3. <p> The work reported in this thesis takes all of the effort done for STAT one step further by implementing a UNIX prototype of STAT. This prototype of STAT is referred to as Ustat: UNIX State Transition Analysis Tool. The suggestions given in <ref> [Porr91] </ref> about the prototype were invaluable, yet some changes to the ideas and even to the design of the components of STAT were inevitable due to unforeseen constraints. In the remainder of this document we present a thorough discussion of the implementation process. <p> We also point out the difficulties that have been encountered and that resulted in many design changes. 3.1 Major Design Changes From STAT to USTAT Although STAT was designed to be implemented on any target system, and its documentation <ref> [Porr91] </ref> was very coherent, modifications were unavoidable. Most of these modifications were made to the suggested prototype implementation and a few were made to the original design of STAT. The following paragraphs summarize these modifications. The preprocessor was modified to obtain all the information that is needed for the analysis. <p> Although audit data takes too much disk space, in certain cases it might be desirable to archive the audit data for the analysis of other intrusion detection tools or for manual analysis. * Knowledge Acquisition Subsystem. <ref> [Porr91] </ref> also suggested a knowledge acquisition subsystem, which would be a learning component of STAT. Ustat does not incorporate this component. <p> A candidate fileset is added to Ustat's fact-base if the answer to all of the above questions but the last is YES. As a result, we made some changes to the fact-base that was suggested in <ref> [Porr91] </ref> by removing some filesets and adding others. The fact-base that was suggested in [Porr91] has been given in Table 2.1 in Section 2.3 of Chapter 2. The filesets that were removed from the suggested fact-base are filesets 1, 2, 3, and 4. <p> As a result, we made some changes to the fact-base that was suggested in <ref> [Porr91] </ref> by removing some filesets and adding others. The fact-base that was suggested in [Porr91] has been given in Table 2.1 in Section 2.3 of Chapter 2. The filesets that were removed from the suggested fact-base are filesets 1, 2, 3, and 4. <p> In addition to the filesets that were removed from the suggested fact-base of <ref> [Porr91] </ref>, some changes have been made: NWSD (Non-writable system directories) and HL are added to the fact-base, and the restricted write files are split into two other sets: restricted write system setup files and non-writable system executables. <p> In this section we present Ustat's state transition diagrams, we analyze each diagram in turn and then we give the format of the two tables that store the state transition diagrams. Some state assertions presented here differ from the ones that were suggested in <ref> [Porr91] </ref>, some being formatted differently and some being new state assertions. Also, during the implementation of the rule-base, we realized that it would be unnecessary to start from an initial state, since all initial states in our finalized state transition diagrams indicated a NULL value. <p> We might need a new state assertion that cannot be expressed with the ones we already have. The solution to this is not trivial and it was not addressed in <ref> [Porr91] </ref>. Currently, all the state assertions of Ustat are coded-in. The rule-base can only use these pre-determined state assertions. To add modularity, the SSO should be allowed to define new state assertions by writing small programs once the interface is defined. <p> First, Ustat needs to run real-time. Secondly, it needs to run on the target machine, where auditd is running. The periodic clean-up solution would be highly impractical when multiple hosts are audited. 6.4 Final Comments It is worthwhile repeating the following remark, which was presented in <ref> [Porr91] </ref>. "The importance of choosing the correct target environment in which to implement STAT is key. In low security-critical computing 189 environments, the added security provided by STAT may not out-weigh the potential performance degradation.
Reference: [Scha91] <author> S. I. Schaen, B. W. McKenney "Research, </author> <title> Standards, and Policy Directions for Network Auditing," presented at the Fifth Intrusion Detection Workshop, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, California, </address> <month> May 10-11, </month> <year> 1990. </year> <month> 193 </month>
Reference-contexts: The auditing process is done on the host computer. By a network we mean a collection of possibly heterogeneous hosts serving many terminals. To audit the network, each host computer needs to be audited. In <ref> [Scha91] </ref> Schaen lists many issues that exist when auditing in a net-worked environment. The audit collection and storage issues listed in [Scha91] are: what data to store, where to store it, how to reduce its volume, and how long to keep it. <p> By a network we mean a collection of possibly heterogeneous hosts serving many terminals. To audit the network, each host computer needs to be audited. In <ref> [Scha91] </ref> Schaen lists many issues that exist when auditing in a net-worked environment. The audit collection and storage issues listed in [Scha91] are: what data to store, where to store it, how to reduce its volume, and how long to keep it. The answer to these questions is not easy even for a stand-alone system and it becomes more complex when the target system is a network.
Reference: [Sebr88] <author> M. M. Sebring, E. Shellhouse, M.E. Hanna, R.A. Whitehurst, </author> <title> "Ex--pert System in Intrusion Detection: A Case Study," </title> <booktitle> Proceedings of the 11th National Computer Security Conference, </booktitle> <address> Baltimore, MD, </address> <month> Oct. </month> <year> 1988. </year>
Reference-contexts: The idea is that an unusually high number of occurrences within a specified period may indicate the presence of an intruder. The difficulty with this technique is to identify the threshold number, and the interval of analysis time. NADIR [Hubb90] and MIDAS <ref> [Sebr88] </ref> employ threshold detection compo nents in their systems. - Profile-Based: This approach uses statistical measures to identify expected behavior of users or user groups. Masqueraders and mis 9 feasors can be detected by monitoring a system's audit log for user activity that deviates from established patterns of usage.
Reference: [Tcse85] <institution> National Computer Security Center, Trusted Computer System Evaluation Criteria, DoD, DoD 5200.28-STD, </institution> <month> Dec. </month> <year> 1985. </year>
Reference-contexts: The criteria for the C2 classification are given in the Orange Book <ref> [Tcse85] </ref>. The BSM provides improved security features for the standard UNIX operating systems.
Reference: [Vacc89] <author> H.S. Vaccaro and G.E. Liepins, </author> <title> "Detection of Anomalous Computer Session Activity," </title> <booktitle> Proceedings of the IEEE Symposium on Research in Security and Privacy, </booktitle> <address> Oakland, CA, </address> <pages> pp. 280-289, </pages> <month> May </month> <year> 1989. </year> <month> 194 </month>
Reference-contexts: This technique shares the same advantage and disadvantages with the statistical anomaly detection techniques. Exam ples of this approach are W&S <ref> [Vacc89] </ref> and TIM [Chen90]. * Rule-based Penetration Identification: These tools are characterized by their expert system properties that fire rules when audit information indicates illegal activities. Most of the current intrusion detection tools supplement their anomaly detection components with rule-based expert system components. For example, IDES [Lunt92], NADIR, and W&S.
References-found: 14

