URL: http://www.eecs.umich.edu/HPS/pub/agree_isca24.ps
Refering-URL: http://www.eecs.umich.edu/HPS/hps_branchpred.html
Root-URL: http://www.cs.umich.edu
Email: frobc, pattg@eecs.umich.edu  fsprangle, mitchg@ross.com  
Title: The Agree Predictor: A Mechanism for Reducing Negative Branch History Interference  
Author: Eric Spranglezy Robert S. Chappellyz Mitch Alsupz Yale N. Patty ROSS 
Keyword: branch prediction, superscalar, speculative execution, two-level branch prediction.  
Address: Ann Arbor, Michigan 48109-2122  5316 Hwy 290 West Austin, Texas 78735  
Affiliation: Advanced Computer Architecture Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  Technology, Inc.  
Abstract: This paper presents a new method to reduce the interference problem called agree prediction, which reduces the chance that two branches aliasing the same PHT entry will interfere negatively. We evaluate the performance of this scheme using full traces (both user and supervisor) of the SPECint95 benchmarks. The result is a reduction in the misprediction rate of gcc ranging from 8.62% with a 64K-entry PHT up to 33.3% with a 1K-entry PHT. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Calder and D. Grunwald, </author> <title> "Fast and Accurate Instruction Fetch and Branch Prediction", </title> <booktitle> Proceedings of the 21st International Symposium on Computer Architecture, </booktitle> <month> (April </month> <year> 1994), </year> <pages> pp. 2-11. </pages>
Reference: [2] <author> S. McFarling and J. Hennessy, </author> <title> "Reducing the Cost of Branches", </title> <booktitle> Proceedings of the 13th International Symposium on Computer Architecture, </booktitle> <year> (1986), </year> <pages> pp. 396-403. </pages>
Reference: [3] <author> J. A. Fisher and S. M. Freudenberfer, </author> <title> "Predicting Conditional Branch Directions from Previous Runs of a Program", </title> <booktitle> Proceedings 5th Annual International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> (October </month> <year> 1992). </year>
Reference: [4] <author> T-Y. Yeh and Y. N. Patt, </author> <title> "Two-Level Adaptive Training Branch Prediction", </title> <booktitle> 24th ACM/IEEE International Symposium on Microarchitecture, </booktitle> <month> (November </month> <year> 1991), </year> <pages> pp. 51-61. </pages>
Reference-contexts: 1 Introduction The link between changes in branch misprediction rate and changes in performance has been well documented [1-4, 6]. Yeh and Patt have shown that a two-level branch predictor can achieve high levels of branch prediction accuracy <ref> [4] </ref>. In a two-level predictor, the first level generates an index into a Pattern History Table (PHT) using some function of the outcomes of preceding branches.
Reference: [5] <author> T-Y. Yeh and Y. N. Patt, </author> <title> "A Comprehensive Instruction Fetch Mechanism for Processor Supporting Speculative Execution", </title> <booktitle> 25th ACM/IEEE International Symposium on Microarchitecture, </booktitle> <month> (December </month> <year> 1992), </year> <pages> pp. 129-139. </pages>
Reference: [6] <author> B. Calder, D. Grunwald, and J. Emer, </author> <title> "A System Level Perspective on Branch Architecture Performance," </title> <booktitle> 28th ACM/IEEE International Symposium on Microarchitec-ture, </booktitle> <month> (November </month> <year> 1995). </year>
Reference-contexts: 1 Introduction The link between changes in branch misprediction rate and changes in performance has been well documented <ref> [1-4, 6] </ref>. Yeh and Patt have shown that a two-level branch predictor can achieve high levels of branch prediction accuracy [4]. In a two-level predictor, the first level generates an index into a Pattern History Table (PHT) using some function of the outcomes of preceding branches.
Reference: [7] <author> A. R. Talcott, M. Nemirovsky, and R. C. Wood. </author> <title> "The In--fluence of Branch Prediction Table Interference on Branch Prediction Scheme Performance", </title> <booktitle> International Conference on Parallel Architectures and Compilation Techniques, </booktitle> <year> (1995). </year>
Reference-contexts: It is also possible that interference can cause a misprediction where there would not be otherwise. We refer to this as negative interference, since it has a negative effect on performance. We will confirm that negative interference is a substantial contributor to the number of branch mispredictions <ref> [7, 8] </ref>. Given that negative interference has a substantial impact on performance, it is worthwhile to attempt to reduce it.
Reference: [8] <author> C. Young, N. Gloy, and M. D. Smith, </author> <title> "A Comparative Analysis of Schemes for Correlated Branch Prediction", </title> <booktitle> Proceedings of the 22nd Annual International Symposium on Computer Architecture, </booktitle> <year> (1995), </year> <pages> pp. 276-286. </pages>
Reference-contexts: It is also possible that interference can cause a misprediction where there would not be otherwise. We refer to this as negative interference, since it has a negative effect on performance. We will confirm that negative interference is a substantial contributor to the number of branch mispredictions <ref> [7, 8] </ref>. Given that negative interference has a substantial impact on performance, it is worthwhile to attempt to reduce it.
Reference: [9] <author> S. McFarling, </author> <title> "Combining Branch Predictors", </title> <type> Technical Report TN-36, </type> <institution> Digital Western Research Laboratory, </institution> <month> (June </month> <year> 1993). </year>
Reference-contexts: Of course, this approach is limited by the number of transistors available to devote to the PHT. Another means of reducing interference is to choose an indexing function that more effectively utilizes the PHT entries. For example, the gshare predictor <ref> [9] </ref> XORs the Branch History Register (BHR) with the lower bits of the branch address to generate the index into the PHT. Since BHR histories are not uniformly distributed, the introduction of address bits into the index gives a more useful distribution across all PHT entries.
Reference: [10] <author> P-Y. Chang, M. Evers, and Y.N. Patt, </author> <title> "Improving Branch Prediction Accuracy by Reducing Pattern History Table Interference", </title> <booktitle> International Conference on Parallel Architectures and Compilation Techniques, </booktitle> <month> (October </month> <year> 1996). </year>
Reference-contexts: Since BHR histories are not uniformly distributed, the introduction of address bits into the index gives a more useful distribution across all PHT entries. Chang et al introduced filtering, another method of reducing PHT interference <ref> [10] </ref>. By using a simple predictor for easily predicted branches, these branches can be "filtered" out of the PHT, reducing the number of branches that are using PHT entries.
References-found: 10

