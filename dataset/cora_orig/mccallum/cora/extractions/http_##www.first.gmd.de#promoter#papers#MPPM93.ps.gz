URL: http://www.first.gmd.de/promoter/papers/MPPM93.ps.gz
Refering-URL: http://www.first.gmd.de/promoter/papers/index.html
Root-URL: 
Title: PROMOTER An Application-Oriented Programming Model for Massive Parallelism  
Author: W. K. Giloi A. Schramm 
Keyword: architecture independence, data parallelism, data topologies, massive parallelism, programming model, SPMD.  
Address: Berlin, Germany  
Affiliation: GMD Research Institute for Computer Architecture and Software Technology  
Abstract: This article deals with rationale and concepts of a programming model for massive parallelism. We mention the basic properties of massively parallel applications and develop a programming model for data parallelism on distributed-memory computers. Its key features are a suitable combination of homogeneity and heterogeneity aspects, an unified representation of data point configuration and interconnection schemes by explicit virtual data topologies, and various synchronization schemes and nondeterminisms. The outline of the linguistic representation and the abstract executional model are given. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Bertsekas and J. N. Tsitsiklis. </author> <title> Parallel and Distributed Computation. Numerical Methods. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference-contexts: Representing them poses no particular problem in PROMOTER. Another example is the so-called asynchronous iterative methods, which are not necessarily hierarchical but instead tolerate that within a loop, communicated data origin from earlier iteration steps instead from the current one (see e.g. <ref> [1] </ref>). Thus a better overlapping of computation and communication is achieved, which can outweigh the worse convergence properties.
Reference: [2] <author> T. Braunl. </author> <title> Structured SIMD programming in Par-allaxis. </title> <journal> Structured Programming, </journal> <volume> 10(3) </volume> <pages> 121-132, </pages> <year> 1989. </year>
Reference-contexts: The expressiveness and self-documentation properties of a program are enhanced. Explicit virtual topologies, albeit in a quite different setting, can also be found in the Parallaxis model <ref> [2, 3] </ref>. 3.1 Declaration of topologies Data topologies are finite sets of distributed separate address spaces that exist in addition to the address space of the surrounding program.
Reference: [3] <author> T. Braunl. </author> <title> Massiv parallele Programmierung mit dem Parallaxis-Modell. Informatik-Fachberichte 246. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, New York, </address> <year> 1990. </year> <note> (in German). </note>
Reference-contexts: The expressiveness and self-documentation properties of a program are enhanced. Explicit virtual topologies, albeit in a quite different setting, can also be found in the Parallaxis model <ref> [2, 3] </ref>. 3.1 Declaration of topologies Data topologies are finite sets of distributed separate address spaces that exist in addition to the address space of the surrounding program.
Reference: [4] <author> B. Meyer. </author> <title> Eiffel|The Language. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: Abstract Executional Model: Parallel virtual processes in individual address spaces. Globally alternating phases of autonomous computation and motionless mutual observation (lock-step). PROMOTER will be specified as a generic extension scheme for statically typed object-oriented imperative languages, e.g. C++ (the first author's preference for pragmatic reasons), Eiffel <ref> [4] </ref>, or Oberon-2 [5, 6] (both the second author's preference). The actually chosen language is called the host language in this article. Not surprisingly, mainly the type system and the expressions of the host language will be extended.
Reference: [5] <author> H. Mossenbock. </author> <title> The programming language Oberon-2. </title> <type> Technical report #160, </type> <institution> ETH, </institution> <address> Zurich, </address> <year> 1991. </year>
Reference-contexts: Abstract Executional Model: Parallel virtual processes in individual address spaces. Globally alternating phases of autonomous computation and motionless mutual observation (lock-step). PROMOTER will be specified as a generic extension scheme for statically typed object-oriented imperative languages, e.g. C++ (the first author's preference for pragmatic reasons), Eiffel [4], or Oberon-2 <ref> [5, 6] </ref> (both the second author's preference). The actually chosen language is called the host language in this article. Not surprisingly, mainly the type system and the expressions of the host language will be extended.
Reference: [6] <author> H. Mossenbock and N. Wirth. </author> <title> The programming language Oberon-2. Structured Programming, </title> <type> 12, </type> <year> 1991. </year>
Reference-contexts: Abstract Executional Model: Parallel virtual processes in individual address spaces. Globally alternating phases of autonomous computation and motionless mutual observation (lock-step). PROMOTER will be specified as a generic extension scheme for statically typed object-oriented imperative languages, e.g. C++ (the first author's preference for pragmatic reasons), Eiffel [4], or Oberon-2 <ref> [5, 6] </ref> (both the second author's preference). The actually chosen language is called the host language in this article. Not surprisingly, mainly the type system and the expressions of the host language will be extended.
Reference: [7] <author> H. W. Schmidt. </author> <title> Data-parallel object-oriented programming. </title> <booktitle> In Proceedings of the Fifth Australian Supercomputer Conference, </booktitle> <pages> pages 263-272, </pages> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: Greater semantic security and an abstraction from send and receive have been achieved. (By the way, PROMOTER does permit deviations from the strict lock-step scheme, without giving up data parallel statements; see section 7.) A concept of data parallel statements can also be found in <ref> [7] </ref>.
Reference: [8] <author> D. B. Skillicorn. </author> <title> Architecture-independent parallel computation. </title> <journal> IEEE Computer, </journal> <volume> 23(12) </volume> <pages> 38-51, </pages> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: There are also partial reductions along certain dimensions only. However, attributing a meaning to accumulation in the context of PROMOTER is not that obvious. 6.1 Accumulation Accumulation does have a well-defined meaning in the context of lists (e.g. in the Bird-Meertens formalism, see e.g. <ref> [8] </ref>): It maps lists to lists, and each list element is replaced by a reduction over its predecessors in the list plus itself. Accumulation exists in a forward and a backward form; in the latter, "predecessors" is replaced by "successors".
References-found: 8

