URL: ftp://tenet.cs.berkeley.edu/pub/papers/BaFeMaMoVeZh94.ps
Refering-URL: 
Root-URL: 
Email: -banerjea,ferrari,bmah,moran-@CS.Berkeley.EDU  
Title: The Tenet Real-Time Protocol Suite: Design, Implementation, and Experiences  
Author: Anindo Banerjea, Domenico Ferrari, Bruce A. Mah, Mark Moran 
Date: November 1994  
Address: TR-94-059  
Affiliation: The Tenet Group University of California at Berkeley and The International Computer Science Institute  
Abstract: Many future applications will require guarantees on network performance, such as bounds on throughput, delay, delay jitter, and reliability. To address this need, the Tenet Group at the University of California at Berkeley has designed, simulated, and implemented a suite of network protocols to support real-time channels (network connections with mathematically provable performance guarantees). The protocols, which constitute the prototype Tenet Real-Time Protocol Suite (Suite 1), run on a packet-switching internetwork, and can coexist with the popular Internet Suite. We rely on the use of connection-oriented communication, admission control, and channel rate control. This protocol suite is the first complete set of communication protocols that can transfer real-time streams with guaranteed quality in packet-switching internetworks. Our initial development was done on a local-area FDDI network. We have since installed our protocols on the experimental wide-area internetwork of Project Sequoia 2000, where they have been running for several months. We have performed a number of experiments and demonstrations in this environment using continuous-media loads (particularly video). Our results show that our approach is both feasible and practical to build, and that it can successfully provide performance guarantees to real-time applications. This paper describes the design and implementation of the suite, the experiments we performed, and selected results, along with the lessons we learned. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Ferrari, </author> <title> Real-Time Communication in Packet Switching Wide Area Networks, </title> <institution> TR-89-022. International Computer Science Institute, Berkeley, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: The basic ideas underlying the scheme were the real-time channel paradigm itself, admission control, connection-oriented communication, channel rate control, and deadline-based scheduling for real-time packets <ref> [1] </ref>. Later, he was joined by another of the authors (Verma), and, in 1989, the Tenet Group was founded with the primary objective of studying real-time communication protocols. Shortly thereafter, the remaining authors joined the group. <p> Each RCAP entity maintains a routing table to compute the next hop of channel establishment. At each node along the way where RTIP runs 4 , there is a local RCAP entity, which performs admission control tests <ref> [1] </ref> [19]. If the channel can be supported at this node, the necessary resources are tentatively allocated to the channel and the establish_request message (with local parameters appended) is forwarded to the next node. <p> When this message reaches the source application, data transfer on the channel can begin. The client, when invoking RCAP, must specify its performance requirements (the so-called quality of service or QoS it needs) and a worst-case description of the traffic it will transmit over the new channel <ref> [1] </ref> [19]. The QoS parameters of the RCAP interface are listed in Table 2, the traffic parameters in Table 3. The parameters in these tables are part of the interface offered at the transport layer to the layer above. <p> These functions can be realized using rate-based service disciplines [25]. We have implemented a number of service disciplines in the prototype suite: Delay-Earliest-Due-Date <ref> [1] </ref>, Jitter-Earliest-Due-Date [20] and Rate-Controlled Static Priority [26]. For the latter two, we implemented both rate-jitter controlling regulators and delay-jitter controlling regulators [25]. The implementation is modular, so that other types of regulators and schedulers can be easily implemented without affecting the rest of the system.
Reference: [2] <author> D. Ferrari, J. C. Pasquale, and G. Polyzos, </author> <title> Network Issues for Sequoia 2000, </title> <booktitle> Proc. CompCon Spring92, </booktitle> <address> San Francisco, CA, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: We subsequently implemented, debugged, and tested the protocols on a local-area FDDI network. We then installed the Tenet protocols on the experimental wide-area network of Project Sequoia 2000 <ref> [2] </ref>, where they have been running for several months, and performed various experiments and demonstrations with continuous media loads (especially video).
Reference: [3] <institution> Gigabit Network Testbeds, IEEE Computer 23, </institution> <month> 9, September </month> <year> 1990. </year>
Reference-contexts: Tenet Suite is currently being ported to other testbeds, including XUNET 2 (a coast-to-coast ATM backbone connecting FDDI rings) and XUNET 3 West (a 1.5 kilometer serial HIPPI testbed); both XUNET 2 and XUNET 3 West are part of BLANCA, one of the five testbeds in the Gigabit Testbed Initiative <ref> [3] </ref>. Finally, a second generation protocol suite (Suite 2 [4]) has been designed to support multi-party real-time communication (including multicast) and is currently being implemented. 1.2 Related Work The literature on real-time communication contains many proposals for satisfying the requirements of continuous-media and other real-time applications.
Reference: [4] <author> A. Gupta, W. Heffner, M. Moran, and C. Szyperski, </author> <title> Network Support for Realtime Multi-Party Applica tions, </title> <booktitle> Proc. Fourth International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Finally, a second generation protocol suite (Suite 2 <ref> [4] </ref>) has been designed to support multi-party real-time communication (including multicast) and is currently being implemented. 1.2 Related Work The literature on real-time communication contains many proposals for satisfying the requirements of continuous-media and other real-time applications. Most schemes, however, have not yet been used in designing real-time protocols. <p> Again, this problem is being solved in Suite 2 by providing multicast channels, resource sharing between related channels (of the same conference) [32], and higher-level abstractions to simplify connection setup for multi-party communication <ref> [4] </ref>. <p> The next generation scheme and suite (Scheme 2 and Suite 2, respectively) have been designed, as mentioned above, and implementation is underway. Suite 2 supports multi-party communication, including routing and establishment of multicast connections and resource sharing <ref> [4] </ref>. A key difference between the resource sharing in Scheme 2 and other proposals is that Scheme 2 uses simple, application-specific hints to share resources among related connections without violating the mathematical guarantees of the Tenet approach.
Reference: [5] <author> C. Topolcic, </author> <title> Experimental Internet Stream Protocol, </title> <type> Version 2 (ST-II), Internet RFC 1190, </type> <month> October </month> <year> 1990. </year>
Reference-contexts: Most schemes, however, have not yet been used in designing real-time protocols. At best, paper designs of such protocols have been provided. So far, there have been very few implementations in this increasingly important area of networking research. ST-II is a connection-oriented internetwork protocol <ref> [5] </ref> that has been implemented in several versions (e.g. [6], [7]). Although the protocol specification allows implementors to include a FlowSpec that indicates resource requirements, neither the contents of the FlowSpec nor algorithms for real-time admission control have been stipulated. <p> This separation between setup and transfer suggests that establishment (and teardown) be done by a control protocol distinct from the data delivery stack. This solution is not universally preferred (as in the cases of ST-II <ref> [5] </ref> and SRP [14]), but it has the advantage of allowing us to develop the control and data delivery pro tocols separately, in a more easily manageable, testable, maintainable, and portable fashion 3 .
Reference: [6] <author> C. Partridge and S. Pink, </author> <title> An Implementation of the Revised Internet Stream Protocol (ST-2), Internetwork ing: </title> <journal> Research and Experience 3, </journal> <volume> 1, </volume> <month> March </month> <year> 1992. </year>
Reference-contexts: At best, paper designs of such protocols have been provided. So far, there have been very few implementations in this increasingly important area of networking research. ST-II is a connection-oriented internetwork protocol [5] that has been implemented in several versions (e.g. <ref> [6] </ref>, [7]). Although the protocol specification allows implementors to include a FlowSpec that indicates resource requirements, neither the contents of the FlowSpec nor algorithms for real-time admission control have been stipulated.
Reference: [7] <author> L. Delgrossi, R. G. Herrtwich, and F. O. Hoffman, </author> <title> An Implementation of ST-II for the Heidelberg Transport System, </title> <journal> IBM ENC TR-43.9303, </journal> <note> To appear in Internetworking: Research and Experience. </note>
Reference-contexts: At best, paper designs of such protocols have been provided. So far, there have been very few implementations in this increasingly important area of networking research. ST-II is a connection-oriented internetwork protocol [5] that has been implemented in several versions (e.g. [6], <ref> [7] </ref>). Although the protocol specification allows implementors to include a FlowSpec that indicates resource requirements, neither the contents of the FlowSpec nor algorithms for real-time admission control have been stipulated. To the best of our knowledge, the implementation by Delgrossi et al. [7] is the only one providing mathematically provable guar <p> has been implemented in several versions (e.g. [6], <ref> [7] </ref>). Although the protocol specification allows implementors to include a FlowSpec that indicates resource requirements, neither the contents of the FlowSpec nor algorithms for real-time admission control have been stipulated. To the best of our knowledge, the implementation by Delgrossi et al. [7] is the only one providing mathematically provable guar 2. In this paper, we define a real-time channel to be a simplex connection that provides mathematically provable performance guarantees on data delivery. 3 antees.
Reference: [8] <author> R. G. </author> <title> Herrtwich, </title> <type> personal communication, </type> <month> November </month> <year> 1992. </year>
Reference-contexts: In this paper, we define a real-time channel to be a simplex connection that provides mathematically provable performance guarantees on data delivery. 3 antees. It uses admission control algorithms based on the Tenet scheme over Token Ring and FDDI networks <ref> [8] </ref>. However, neither the protocol specification nor this implementation provide a mechanism for performing and encapsulating reservations on multi-hop subnetworks (e.g. ATM networks). Most recently, RSVP has been designed as a protocol for exchanging reservation messages [9].
Reference: [9] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zappala, RSVP: </author> <title> A New Resource ReSerVation Protocol, </title> <journal> IEEE Network, </journal> <month> September </month> <year> 1993. </year>
Reference-contexts: However, neither the protocol specification nor this implementation provide a mechanism for performing and encapsulating reservations on multi-hop subnetworks (e.g. ATM networks). Most recently, RSVP has been designed as a protocol for exchanging reservation messages <ref> [9] </ref>. It serves a role similar to, and shares many features with, our channel setup protocol. The major difference is that RSVP reservations are considered to be soft state, which must be periodically refreshed.
Reference: [10] <author> A. Lazar and C. Pacifici, </author> <title> Control of Resources in Broadband Networks with Quality of Service Guarantees, </title> <journal> IEEE Communication Magazine, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: As the implementation of RSVP and associated admission control algorithms was in progress during this study, we could not compare its performance and utility to those of the Tenet Suite. Some real-time protocols have been implemented for specific sub-networks (e.g. <ref> [10] </ref>, [11]). However, to the best of our knowledge, these implementations are not applicable to heterogeneous internetworks. Standard signalling protocols for ATM networks have well-defined traffic and performance specifications and are expected to be capable of providing mathematically provable performance guarantees [12].
Reference: [11] <author> I. Cidon, I. Gopal and R. Guerin, </author> <title> Bandwidth Management and Congestion Control in PlaNET, </title> <journal> IEEE Com munication Magazine, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: As the implementation of RSVP and associated admission control algorithms was in progress during this study, we could not compare its performance and utility to those of the Tenet Suite. Some real-time protocols have been implemented for specific sub-networks (e.g. [10], <ref> [11] </ref>). However, to the best of our knowledge, these implementations are not applicable to heterogeneous internetworks. Standard signalling protocols for ATM networks have well-defined traffic and performance specifications and are expected to be capable of providing mathematically provable performance guarantees [12].
Reference: [12] <author> ATM Forum, </author> <title> ATM User-Network Interface Specification Version 3.0, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: However, to the best of our knowledge, these implementations are not applicable to heterogeneous internetworks. Standard signalling protocols for ATM networks have well-defined traffic and performance specifications and are expected to be capable of providing mathematically provable performance guarantees <ref> [12] </ref>. However, the corresponding admission control algorithms have not yet been specified. 2 The Architecture of the Tenet Suite The Tenet scheme for real-time communication is based on some principles that dictated, or suggested, some of the architectural characteristics of the associated protocol suite [13].
Reference: [13] <author> D. Ferrari, A. Banerjea, and H. Zhang, </author> <title> Network Support for Multimedia: A Discussion of the Tenet Approach, Computer Networks and ISDN Systems 26, </title> <journal> special issue on Multimedia Networking, </journal> <year> 1994. </year>
Reference-contexts: However, the corresponding admission control algorithms have not yet been specified. 2 The Architecture of the Tenet Suite The Tenet scheme for real-time communication is based on some principles that dictated, or suggested, some of the architectural characteristics of the associated protocol suite <ref> [13] </ref>. First, all layers in a networks architecture must be able to provide performance guarantees in order for any guarantees to be available to the networks clients. If a layer is incapable of guaranteeing some performance bound, the layers above it cannot guarantee that bound either.
Reference: [14] <author> D. P. Anderson, R. G. Herrtwich, and C. Schaefer, SRP: </author> <title> A Resource Reservation Protocol for Guaranteed Performance Communication in the Internet, </title> <booktitle> TR-90-006, International Computer Science Institute, </booktitle> <address> Berkeley, CA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: This separation between setup and transfer suggests that establishment (and teardown) be done by a control protocol distinct from the data delivery stack. This solution is not universally preferred (as in the cases of ST-II [5] and SRP <ref> [14] </ref>), but it has the advantage of allowing us to develop the control and data delivery pro tocols separately, in a more easily manageable, testable, maintainable, and portable fashion 3 . Control functions in the Tenet Suite are provided by the Real-Time Channel Administration Protocol (RCAP) [15] [16].
Reference: [15] <author> A. Banerjea and B. Mah, </author> <title> The Real-Time Channel Administration Protocol, </title> <booktitle> Proc. Second International 20 Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Control functions in the Tenet Suite are provided by the Real-Time Channel Administration Protocol (RCAP) <ref> [15] </ref> [16]. An important principle of the Tenet approach is that all real-time applications have requirements that can be expressed in terms of general performance or reliability bounds. <p> Such an approach allows RCAP to utilize the characteristics peculiar to an individual network in order to provide guarantees, yet hide the underlying details of that network whenever possible <ref> [15] </ref> [18]. 3.2 RTIP The Real-Time Internet Protocol (RTIP) is the network layer of the Tenet Suite.
Reference: [16] <author> B. Mah, </author> <title> A Mechanism for the Administration of Real-Time Channels, </title> <type> MS Report, </type> <institution> University of California at Berkeley, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Control functions in the Tenet Suite are provided by the Real-Time Channel Administration Protocol (RCAP) [15] <ref> [16] </ref>. An important principle of the Tenet approach is that all real-time applications have requirements that can be expressed in terms of general performance or reliability bounds. <p> section describes the first implementation of each of the currently-operational protocols in the Tenet Suite (RCAP, RTIP, and RMTP). 4.1 RCAP The current RCAP implementation is divided into two parts: a library linked into each client application and a daemon process that runs on each node, independent of the applications <ref> [16] </ref>. These components, and the relationships between them, are shown in Figure 4. This implementation is extremely portable, compiling without modification on nearly all UNIX-like operation systems. 4.1.1 The RCAP Library The RCAP library implements the network control API seen by the application writer.
Reference: [17] <author> B. Wolfinger and M. Moran, </author> <title> A Continuous Media Data Transport Service and Protocol for Real-Time Com munication in High Speed Networks, </title> <booktitle> Proc. Second International Workshop on Network and Operating Sys tem Support for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: The suite that resulted from these considerations is shown in Figure 1. At the time of this writing, CMTP has been almost entirely implemented, but has not been tested, integrated with the other protocols, and experimented with. Its design is described in <ref> [17] </ref>. 3 Design of the Tenet Protocols This section describes the design of the various protocols in the Tenet Suite.
Reference: [18] <author> D. Ferrari, </author> <title> Real-Time Communication in an Internetwork, </title> <journal> Journal of High Speed Networks 1, </journal> <volume> 1, </volume> <year> 1992. </year>
Reference-contexts: If any node determines that it cannot support the channels performance requirements, it sends an establish_denied message back to the source; this message causes all the channels tentatively reserved resources to be released. 4. RTIP and RCAP need not run within subnetworks that can themselves provide performance guarantees <ref> [18] </ref>. FIGURE 1. The Tenet Real-Time Protocol Suite. Also shown are the corresponding Internet protocols. 5 Once the establish_request message reaches the destination, the destination application makes a final acceptor-reject decision on the channel. If it accepts the channel, the reverse pass of establishment begins. <p> Such an approach allows RCAP to utilize the characteristics peculiar to an individual network in order to provide guarantees, yet hide the underlying details of that network whenever possible [15] <ref> [18] </ref>. 3.2 RTIP The Real-Time Internet Protocol (RTIP) is the network layer of the Tenet Suite. Its main function is to deliver packets in such a way as to meet the real-time requirements of the corresponding channel. 3.2.1 RTIP Overview In contrast to the IP datagram service, RTIP is connection-oriented.
Reference: [19] <author> D. Ferrari and D. C. Verma, </author> <title> A Scheme for Real-Time Channel Establishment in Wide-Area Networks, </title> <journal> IEEE Journal on Selected Areas in Communications 8, </journal> <volume> 3, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: Each RCAP entity maintains a routing table to compute the next hop of channel establishment. At each node along the way where RTIP runs 4 , there is a local RCAP entity, which performs admission control tests [1] <ref> [19] </ref>. If the channel can be supported at this node, the necessary resources are tentatively allocated to the channel and the establish_request message (with local parameters appended) is forwarded to the next node. <p> When this message reaches the source application, data transfer on the channel can begin. The client, when invoking RCAP, must specify its performance requirements (the so-called quality of service or QoS it needs) and a worst-case description of the traffic it will transmit over the new channel [1] <ref> [19] </ref>. The QoS parameters of the RCAP interface are listed in Table 2, the traffic parameters in Table 3. The parameters in these tables are part of the interface offered at the transport layer to the layer above.
Reference: [20] <author> D. Ferrari, </author> <title> Distributed Delay Jitter Control in Packet-Switching Internetworks, </title> <journal> Journal of Internetworking: Research and Experience 4, </journal> <volume> 1, </volume> <year> 1993. </year>
Reference-contexts: A positive answer returned by RCAP to the application may be interpreted as a contract: the network guarantees the performance bounds requested by the application, provided that the application obeys its traffic description at all times and that there are no failures in the network during the new channels lifetime <ref> [20] </ref> [21]. This contract is valid until the channel is torn down. At any time, the sending application can request the status of the channel at each node. <p> These functions can be realized using rate-based service disciplines [25]. We have implemented a number of service disciplines in the prototype suite: Delay-Earliest-Due-Date [1], Jitter-Earliest-Due-Date <ref> [20] </ref> and Rate-Controlled Static Priority [26]. For the latter two, we implemented both rate-jitter controlling regulators and delay-jitter controlling regulators [25]. The implementation is modular, so that other types of regulators and schedulers can be easily implemented without affecting the rest of the system.
Reference: [21] <author> D. C. Verma, </author> <title> Guaranteed Performance Communication in High Speed Networks, </title> <type> PhD dissertation, </type> <institution> Univer sity of California at Berkeley, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: positive answer returned by RCAP to the application may be interpreted as a contract: the network guarantees the performance bounds requested by the application, provided that the application obeys its traffic description at all times and that there are no failures in the network during the new channels lifetime [20] <ref> [21] </ref>. This contract is valid until the channel is torn down. At any time, the sending application can request the status of the channel at each node. <p> If a packet was expected no earlier than time , but arrives at an earlier time, then the packet becomes eligible for transmission at time . A detailed explanation of the rate control module and the method to compute eligibility times can be found in <ref> [21] </ref>. After it becomes eligible, the packet is transferred to the RTIP scheduling module. The scheduling module is responsible for transmitting a packet within the interval after it receives the packet. Any service discipline that can provide such a guarantee can be used with RTIP.
Reference: [22] <author> D. Ritchie and K. Thompson, </author> <title> The UNIX Time-Sharing System, </title> <journal> Communications of ACM 7, </journal> <volume> 7, </volume> <month> July </month> <year> 1974. </year>
Reference-contexts: Tom Fisher and Hoofar Razavi ported these implementations to SunOS on SPARCs-tations. Keith Sklower built versions for IRIX on SGI workstations and BSDI BSD/386 on 80486-based PCs. All the software platforms are UNIX-like operating systems <ref> [22] </ref> with networking software derived from BSD UNIX [23] [24]. The software structure of the RMTP and RTIP implementations is shown in Figure 5. While RCAP is implemented in user space, RMTP and RTIP are implemented in the kernel and co-exist with TCP, UDP, and IP.
Reference: [23] <author> S. J. Lefer, M. K. McKusick, M. J. Karels, and J. S. Quarterman, </author> <title> The Design and Implementation of the 4.3 BSD UNIX Operating System, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: Tom Fisher and Hoofar Razavi ported these implementations to SunOS on SPARCs-tations. Keith Sklower built versions for IRIX on SGI workstations and BSDI BSD/386 on 80486-based PCs. All the software platforms are UNIX-like operating systems [22] with networking software derived from BSD UNIX <ref> [23] </ref> [24]. The software structure of the RMTP and RTIP implementations is shown in Figure 5. While RCAP is implemented in user space, RMTP and RTIP are implemented in the kernel and co-exist with TCP, UDP, and IP.
Reference: [24] <author> S. J. Lefer, W. N. Joy, R. S. Fabry, and M. J. Karels, </author> <title> Networking Implementation Notes: 4.3 BSD Edition, Unix System Managers Manual, </title> <booktitle> USENIX Association, </booktitle> <month> April </month> <year> 1986. </year>
Reference-contexts: Tom Fisher and Hoofar Razavi ported these implementations to SunOS on SPARCs-tations. Keith Sklower built versions for IRIX on SGI workstations and BSDI BSD/386 on 80486-based PCs. All the software platforms are UNIX-like operating systems [22] with networking software derived from BSD UNIX [23] <ref> [24] </ref>. The software structure of the RMTP and RTIP implementations is shown in Figure 5. While RCAP is implemented in user space, RMTP and RTIP are implemented in the kernel and co-exist with TCP, UDP, and IP.
Reference: [25] <author> H. Zhang and D. Ferrari, </author> <title> Rate-Controlled Service Disciplines, </title> <note> To appear in Journal of High-Speed Net works, </note> <year> 1994. </year>
Reference-contexts: The buffer management function, when called, returns the private buffer associated with the mbuf to the connections buffer pool. 4.2.2 Service Disciplines Some of the most important functions of RTIP are rate control, jitter control, and packet scheduling. These functions can be realized using rate-based service disciplines <ref> [25] </ref>. We have implemented a number of service disciplines in the prototype suite: Delay-Earliest-Due-Date [1], Jitter-Earliest-Due-Date [20] and Rate-Controlled Static Priority [26]. For the latter two, we implemented both rate-jitter controlling regulators and delay-jitter controlling regulators [25]. <p> These functions can be realized using rate-based service disciplines <ref> [25] </ref>. We have implemented a number of service disciplines in the prototype suite: Delay-Earliest-Due-Date [1], Jitter-Earliest-Due-Date [20] and Rate-Controlled Static Priority [26]. For the latter two, we implemented both rate-jitter controlling regulators and delay-jitter controlling regulators [25]. The implementation is modular, so that other types of regulators and schedulers can be easily implemented without affecting the rest of the system. <p> The operation of a rate-controlled service discipline involves three tasks: calculating the eligibility time of each packet, holding the packet if necessary, and enqueueing and dequeueing packets at the scheduler. The eligibility time of each packet can be calculated using the formulae defined in <ref> [25] </ref> [27]. Packet holding is implemented differently in gateways (or routers) than in the hosts. In a host, where packets are sent from some processes, holding packets can be implemented by putting the transmitting process into sleep.
Reference: [26] <author> H. Zhang and D. Ferrari, </author> <title> Rate-Controlled Static Priority Queueing, </title> <booktitle> Proc. IEEE INFOCOM 93, </booktitle> <address> San Fran cisco, CA, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: These functions can be realized using rate-based service disciplines [25]. We have implemented a number of service disciplines in the prototype suite: Delay-Earliest-Due-Date [1], Jitter-Earliest-Due-Date [20] and Rate-Controlled Static Priority <ref> [26] </ref>. For the latter two, we implemented both rate-jitter controlling regulators and delay-jitter controlling regulators [25]. The implementation is modular, so that other types of regulators and schedulers can be easily implemented without affecting the rest of the system.
Reference: [27] <author> H. Zhang, </author> <title> Service Disciplines for Integrated Services Packet-Switching Networks, </title> <type> PhD Dissertation, </type> <institution> UCB/ CSD-94-788, University of California at Berkeley, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: The operation of a rate-controlled service discipline involves three tasks: calculating the eligibility time of each packet, holding the packet if necessary, and enqueueing and dequeueing packets at the scheduler. The eligibility time of each packet can be calculated using the formulae defined in [25] <ref> [27] </ref>. Packet holding is implemented differently in gateways (or routers) than in the hosts. In a host, where packets are sent from some processes, holding packets can be implemented by putting the transmitting process into sleep.
Reference: [28] <author> H. Zhang and T. Fisher, </author> <title> Preliminary Measurement of the RMTP/RTIP, </title> <booktitle> Proc. Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> San Diego, CA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: We also made no attempt to use realistic load patterns; the load was generated by processes sending fixed-size packets in a tight loop on the source machine. These experiments are described in more detail in <ref> [28] </ref>. theorem faithlemma FDDI FIGURE 6. Physical topology of the local testbed. theorem and lemma are DECstation 5000/125s and faith is a DECstation 5000/240. Note that lemma has two FDDI interfaces. All machines run the Ultrix 4.2A operating system. fake theorem lemma faith FIGURE 7.
Reference: [29] <author> A. Banerjea, E. Knightly, F. Templin, and H. Zhang, </author> <title> Experiments with the Tenet Real-Time Protocol Suite on the Sequoia 2000 Wide Area Network, </title> <booktitle> Proc. ACM Multimedia 94, </booktitle> <address> San Francisco, CA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: The Sequoia experiments are described in greater detail in <ref> [29] </ref>. 5.2.1 Single RMTP/RTIP and Single UDP/IP Streams We examined the queueing behavior of a single vic session using RMTP/RTIP at the bottleneck gateway (sock). control and resource reservation mechanisms so that, even during periods of high network load, the number of out FIGURE 9.
Reference: [30] <author> H. Zhang and D. Ferrari, </author> <title> Improving Utilization for Deterministic Service in Multimedia Communication, </title> <booktitle> Proc. 1994 IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Overly-pessimistic algo rithms are undesirable because they reduce the real-time capacity of the network 6 . We now have more optimistic tests for both deterministic <ref> [30] </ref> and statistical [31] guarantees, and plan to experiment with them in Tenet Suite 2. Multi-party support is needed: The absence of multi-party support has been a real problem when trying to run even small multimedia conferences using Suite 1.
Reference: [31] <author> H. Zhang and E. Knightly, </author> <title> Providing End-to-End Statistical Guarantees Using Bounding Interval Dependent Stochastic Models, </title> <booktitle> Proc. ACM SIGMETRICS 94, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Overly-pessimistic algo rithms are undesirable because they reduce the real-time capacity of the network 6 . We now have more optimistic tests for both deterministic [30] and statistical <ref> [31] </ref> guarantees, and plan to experiment with them in Tenet Suite 2. Multi-party support is needed: The absence of multi-party support has been a real problem when trying to run even small multimedia conferences using Suite 1.
Reference: [32] <author> A. Gupta, W. Howe, M. Moran, and Q. Nguyen, </author> <title> Scalable Resource Reservation for Multi-Party Real-Time Communication, </title> <note> Submitted for publication, </note> <month> August </month> <year> 1994. </year>
Reference-contexts: This problem has two aspects: without multi-party support, connection setup for an N-way conference is cumbersome and amounts of resources reserved are high. Again, this problem is being solved in Suite 2 by providing multicast channels, resource sharing between related channels (of the same conference) <ref> [32] </ref>, and higher-level abstractions to simplify connection setup for multi-party communication [4]. <p> Analysis and simulation results indicate that resource sharing can greatly improve resource utilization for most multi-party conferences <ref> [32] </ref>. Suite 2 also supports partitioning of network resources into independent virtual networks and supports advance reservation of resources for future connections [33]. In addition, several improvements have been made to the unicast scheme and suite.
Reference: [33] <author> D. Ferrari and A. Gupta, </author> <title> Resource Partitioning for Real-Time Communication, </title> <booktitle> Proc. IEEE Symposium on Global Data Networking, </booktitle> <address> Cairo, Egypt, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Analysis and simulation results indicate that resource sharing can greatly improve resource utilization for most multi-party conferences [32]. Suite 2 also supports partitioning of network resources into independent virtual networks and supports advance reservation of resources for future connections <ref> [33] </ref>. In addition, several improvements have been made to the unicast scheme and suite. Besides the already mentioned enhancements to the admission control tests, mechanisms for Dynamic Connection Management (DCM) have been developed to support dynamic adjustment of traffic and performance parameters and/or routes of existing connections.
Reference: [34] <author> C. Parris, H. Zhang, and D. Ferrari, </author> <title> A Dynamic Management Scheme for Real-Time Connections, </title> <booktitle> Proc. INFOCOM 94, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: Besides the already mentioned enhancements to the admission control tests, mechanisms for Dynamic Connection Management (DCM) have been developed to support dynamic adjustment of traffic and performance parameters and/or routes of existing connections. These mechanisms have been experimented with in the context of Suite 1 <ref> [34] </ref>. DCM has also been used and augmented to support fault tolerance and fault recovery [35]. Future work includes implementation and experimentation with these new algorithms and mechanisms.
Reference: [35] <author> A. Banerjea, C. Parris, and D. Ferrari, </author> <title> Recovering Guaranteed Performance Service Connections from Single and Multiple Faults, </title> <booktitle> TR-93-066, International Computer Science Institute, </booktitle> <address> Berkeley, CA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: These mechanisms have been experimented with in the context of Suite 1 [34]. DCM has also been used and augmented to support fault tolerance and fault recovery <ref> [35] </ref>. Future work includes implementation and experimentation with these new algorithms and mechanisms.
References-found: 35

