URL: http://www.cs.utexas.edu/users/rvdg/papers/pipsolver.ps
Refering-URL: http://www.cs.utexas.edu/users/rvdg/abstracts/PIPSOLVER.html
Root-URL: 
Email: ken@ticam.utexas.edu  rvdg@cs.utexas.edu  
Title: Anatomy of a Parallel Out-of-Core Dense Linear Solver  
Author: Kenneth Klimkowski Robert A. van de Geijn 
Address: Austin, Texas 78712  Austin, Texas 78712  
Affiliation: Texas Institute for Computational and Applied Mathematics The University of Texas at Austin  Department of Computer Sciences The University of Texas at Austin  
Abstract: In this paper, we describe the design and implementation of the Platform Independent Parallel Solver (PIPSolver) package for the out-of-core (OOC) solution of complex dense linear systems. Our approach is unique in that it allows essentially all of RAM to be filled with the current portion of the matrix (slab) to be updated and factored, thereby greatly improving the computation to I/O ratio over previous approaches. Experiences and performance are reported for the Cray T3D system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Anderson, Z. Bai, J. Demmel, J. Dongarra, J. DuCroz, A. Greenbaum, S. Hammarling, A. McKenney, S. Ostrouchov, and D. Sorensen, </author> <title> LAPACK Users' Guide, </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1992. </year>
Reference: [2] <author> E. Castro-Leon and M. L. Barton, </author> <title> "The Pro-solver(TM) Libraries : Parallel Solvers for In-tel High Performance Scalable Computers", Internal Document, Intel Scalable Systems Division. </title>
Reference-contexts: This paper is concerned with the investigation of techniques for development of a dense linear solver package that is scalable both in machine and problem size. A number of parallel out-of-core dense linear solver packages exist. These include In-tel's Prosolver TM <ref> [4, 2] </ref> and a code developed at Sandia National Laboratories [9]. The current Prosolver TM package includes two OOC solvers: a block based solver and a slab based solver.
Reference: [3] <author> J. Choi, J. J. Dongarra, R. Pozo, and D. W. Walker, </author> <title> "Scalapack: A Scalable Linear Algebra Library for Distributed Memory Concurrent Computers, </title> <booktitle> Proceedings of the Fourth Symposium on the Frontiers of Massively Parallel Computation. </booktitle> <publisher> IEEE Comput. Soc. Press, </publisher> <year> 1992, </year> <pages> pp. 120-127. </pages>
Reference-contexts: INTRODUCTION Scalable, portable linear algebra libraries for distributed memory MIMD architectures that are currently being investigated put a limit on the size of the problem that can be solved, dictated by the aggregate RAM of the machine. A good example of this is the ScaLAPACK library for dense linear algebra <ref> [3] </ref>. This paper is concerned with the investigation of techniques for development of a dense linear solver package that is scalable both in machine and problem size. A number of parallel out-of-core dense linear solver packages exist.
Reference: [4] <author> T. Cwik, J. Patterson, and D. Scott, </author> <title> "Electo-magnetic Scattering Calculations on the Intel Touchstone Delta," </title> <booktitle> Proceedings of Supercomputing '92, </booktitle> <publisher> IEEE Comput. Soc. Press, </publisher> <year> 1992, </year> <pages> pp. 538-542. </pages>
Reference-contexts: This paper is concerned with the investigation of techniques for development of a dense linear solver package that is scalable both in machine and problem size. A number of parallel out-of-core dense linear solver packages exist. These include In-tel's Prosolver TM <ref> [4, 2] </ref> and a code developed at Sandia National Laboratories [9]. The current Prosolver TM package includes two OOC solvers: a block based solver and a slab based solver.
Reference: [5] <author> Tom Cwik, Robert van de Geijn, and Jean Patterson, </author> <title> "Application of Massively Parallel Computation to Integral Equation Models of Electromagnetic Scattering," </title> <journal> Journal of the Optical Society of America A, </journal> <volume> Vol. 11, No. 4, </volume> <month> April </month> <year> 1994, </year> <pages> pp. 1538-1545 </pages>
Reference-contexts: It also juggles four slabs simultaneously, with the same drawbacks. Our code is based on a highly efficient incore solver, which was written for electromagnetics applications <ref> [5] </ref> and has also been used for acoustics applications [7]. We modified this code in a way that very naturally led to an OOC solver. This approach allows maximal code reuse, extending the robustness and manageability of the incore version to the OOC version.
Reference: [6] <author> Jack. J. Dongarra, Robert A. van de Geijn, and David W. Walker, </author> <title> "Scalability Issues Affecting the Design of a Dense Linear Algebra Library," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 22, No. 3, </volume> <month> Sept. </month> <year> 1994, </year> <pages> pp. 523-537. </pages>
Reference-contexts: Pivoting can be easily added. To parallelize the above algorithm, one must first decide upon a data distribution. For scalability reasons, a two dimensional data decomposition is required, as is described in <ref> [8, 6] </ref>: Given p processors, we view these as logically forming a r fi c mesh, where p = rc. In this mesh, P ij denotes the (i; j)th processor.
Reference: [7] <author> P. Geng, J. T. Oden, and R. A. van de Geijn, </author> <title> "Massively Parallel Computation for Acoustics Scattering Problems using Boundary Element Methods," </title> <journal> Journal of Sound and Vibration, </journal> <note> (to appear). </note>
Reference-contexts: It also juggles four slabs simultaneously, with the same drawbacks. Our code is based on a highly efficient incore solver, which was written for electromagnetics applications [5] and has also been used for acoustics applications <ref> [7] </ref>. We modified this code in a way that very naturally led to an OOC solver. This approach allows maximal code reuse, extending the robustness and manageability of the incore version to the OOC version.
Reference: [8] <author> B. A. Hendrickson and D. E. Womble, </author> <title> "The Torus-wrap Mapping for Dense Matrix Calculations on Massively Parallel Computers," </title> <journal> SIAM J. Sci. Comput., </journal> <volume> vol. 15 (1994), no. 5, </volume> <pages> pp. 1201-1226. </pages>
Reference-contexts: Pivoting can be easily added. To parallelize the above algorithm, one must first decide upon a data distribution. For scalability reasons, a two dimensional data decomposition is required, as is described in <ref> [8, 6] </ref>: Given p processors, we view these as logically forming a r fi c mesh, where p = rc. In this mesh, P ij denotes the (i; j)th processor.
Reference: [9] <author> D. E. Womble, D. S. Greenberg, R. E. Riesen, and S. R. Wheat, </author> <title> "Out of Core, Out of Mind: Practical Parallel I/O," </title> <booktitle> Proceedings of the Scalable Libraries Conference, </booktitle> <month> Oct. </month> <pages> 6-8, </pages> <year> 1993, </year> <institution> Mississippi State University, pp.10-16. </institution>
Reference-contexts: A number of parallel out-of-core dense linear solver packages exist. These include In-tel's Prosolver TM [4, 2] and a code developed at Sandia National Laboratories <ref> [9] </ref>. The current Prosolver TM package includes two OOC solvers: a block based solver and a slab based solver. The block solver brings essentially square blocks of the matrix incore, which improves the computation to I/O ratio, but limits pivoting to improve stability of the algorithm.
References-found: 9

