URL: ftp://hpsl.cs.umd.edu/pub/papers/irreg-adaptive.ps.Z
Refering-URL: http://www.cs.umd.edu/projects/hpsl/papers.brandnew/LocalResources/tech-10-23.htm
Root-URL: 
Title: Runtime Support to Parallelize Adaptive Irregular Programs  
Author: Yuan-Shin Hwang Bongki Moon Shamik Sharma Raja Das Joel Saltz 
Abstract: This paper describes how a runtime support library can be used as compiler runtime support in irregular applications. The CHAOS runtime support library carries out optimizations designed to reduce communication costs by performing software caching, communication coalescing and inspector/executor preprocessing. CHAOS also supplies special purpose routines to support specific types of irregular reduction and runtime support for partitioning data and work between processors. A number of adaptive irregular codes have been parallelized using the CHAOS library and performance results from these codes are also presented in this paper. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Brezany, M. Gerndt, V. Sipkova, and H.P. Zima. </author> <title> SUPERB support for irregular scientific computations. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference (SHPCC-92), </booktitle> <pages> pages 314-321. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1992. </year>
Reference-contexts: This paper does not describe how this runtime support is integrated into compilers, discussions of irregular problem compilation may be found elsewhere [5], [7], [16], [15], [17], <ref> [1] </ref>, [8]. determined by the values assigned to elements of arrays ia and ib. Integer arrays used to index other arrays (e.g. ia and ib in Figure 1) are called indirection arrays. Runtime support libraries use indirection array values to carry out a variety of optimizations.
Reference: [2] <author> B. R. Brooks, R. E. Bruccoleri, B. D. Olafson, D. J. States, S. Swaminathan, and M. Karplus. Charmm: </author> <title> A program for macromolecular energy, minimization, and dynamics calculations. </title> <journal> Journal of Computational Chemistry, </journal> <volume> 4:187, </volume> <year> 1983. </year>
Reference-contexts: The purpose of CHARMM is to derive structural and dynamic properties of molecules using the first and second order derivative techniques <ref> [2] </ref>. The computationally intensive part of CHARMM is the molecular dynamics simulation. 3.1.1 Performance The performance of molecular dynamics simulations was studied with a benchmark case (MbCO + 3830 water molecules) on the Intel iPSC/860. It ran for 1000 steps with 40 non-bonded list updates.
Reference: [3] <author> B. R. Brooks and M. Hodoscek. </author> <title> Parallelization of charmm for mimd machines. Chemical Design Automation News, </title> <address> 7:16, </address> <year> 1992. </year>
Reference-contexts: CHARMM was also ported to the SP-1 using the CHAOS software. The 64 processor SP-1 version ran 2.5 times faster than the corresponding iPSC/860 version but the communication time on the SP-1 was higher by 20 %. 2 Estimation done by Brooks and Hodoscek <ref> [3] </ref> Runtime Support to Parallelize Adaptive Irregular Programs 11 Table 2 Preprocessing Overheads of CHARMM (in sec.) Number of Processors 16 32 64 128 Data Partition 0.27 0.47 0.83 1.63 Non-bonded List Update 7.18 3.85 2.16 1.22 Remapping and Preprocessing 0.03 0.03 0.02 0.02 Schedule Generation 1.31 0.80 0.64 0.42 Schedule
Reference: [4] <author> R. Das, J. Saltz, D. Mavriplis, and R. Ponnusamy. </author> <title> The incremental scheduler. In Unstructured Scientific Computation on Scalable Multiprocessors, </title> <address> Cambridge Mass, 1992. </address> <publisher> MIT Press. </publisher>
Reference-contexts: The approach taken in these cases is to distribute the translation table between processors. This type of translation table is a distributed translation table. Earlier versions of PARTI supported a translation table that was distributed between processors in a blocked fashion <ref> [4, 23] </ref>. CHAOS also supports an intermediate degree of replication with a paged translation table [6]. 2.2.2 Data Partitioners Data distribution is important for parallelization because it determines the patterns of communication between processors.
Reference: [5] <author> Raja Das, Joel Saltz, and Reinhard von Hanxleden. </author> <title> Slicing analysis and indirect access to distributed arrays. </title> <booktitle> In Proceedings of the 6th Workshop on Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 152-168. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1993. </year> <note> Also available as University of Maryland Technical Report CS-TR-3076 and UMIACS-TR-93-42. </note>
Reference-contexts: The focus of this paper is to describe a runtime support library that can be used as compiler runtime support in irregular applications. This paper does not describe how this runtime support is integrated into compilers, discussions of irregular problem compilation may be found elsewhere <ref> [5] </ref>, [7], [16], [15], [17], [1], [8]. determined by the values assigned to elements of arrays ia and ib. Integer arrays used to index other arrays (e.g. ia and ib in Figure 1) are called indirection arrays. <p> Several prototype compilers have been developed, that are able to use the CHAOS runtime support to generate reasonable distributed memory code corresponding to Fortran D versions of unstructured mesh and molecular dynamics procedures (e.g. <ref> [5] </ref>, [7]). However, the authors are not aware of any prototype compiler that is able to generate correct SPMD code from a DSMC-type application; it is believed that both new language extensions and new compilation methods are required to accomplish this.
Reference: [6] <author> Raja Das, Mustafa Uysal, Joel Saltz, and Yuan-Shin Hwang. </author> <title> Communication optimizations for irregular scientific computations on distributed memory architectures. </title> <institution> Technical Report CS-TR-3163 and UMIACS-TR-93-109, University of Maryland, Department of Computer Science and UMIACS, </institution> <month> October </month> <year> 1993. </year> <note> To appear in Journal of Parallel and Distributed Computing. </note>
Reference-contexts: University of Maryland College Park, MD 20742 (parti@cs.umd.edu) fl This work was sponsored in part by ARPA (NAG-1-1485), NSF (ASC 9213821), ONR (SC292-1-22913) and NASA (NAG-11560). Thanks to DCRT/NIH for access to Intel iPSC/860 and also to MCS/ANL for access to IBM SP-1 1 2 optimizations <ref> [6] </ref> include support for partitioning data and work between processors and communication optimizations (Section 2.2). The goal of this partitioning is to balance the computational load and to reduce the net communication volume. <p> This type of translation table is a distributed translation table. Earlier versions of PARTI supported a translation table that was distributed between processors in a blocked fashion [4, 23]. CHAOS also supports an intermediate degree of replication with a paged translation table <ref> [6] </ref>. 2.2.2 Data Partitioners Data distribution is important for parallelization because it determines the patterns of communication between processors. While regular decompositions such as BLOCK and CYCLIC are easy to achieve, they might cause load imbalance or substantially increase communication in irregular problems. <p> The CHAOS runtime library carries out optimizations designed to reduce communication costs by performing software caching, communication coalescing and inspector/executor preprocessing. CHAOS also supplies special purpose routines to support specific types of irregular reduction and runtime support <ref> [6] </ref> for partitioning data and work between processors and communication optimizations Runtime Support to Parallelize Adaptive Irregular Programs 13 (Section 2.2). This paper does not describe how the runtime support is integrated into compilers.
Reference: [7] <author> R. v. Hanxleden, K. Kennedy, and J. Saltz. </author> <title> Value-based distributions in fortran d | a preliminary report. </title> <type> Technical Report CRPC-TR93365-S, </type> <institution> Center for Research on Parallel Computation, Rice University, </institution> <month> December </month> <year> 1993. </year> <title> submitted to Journal of Programming Languages Special Issue on Compiling and Run-Time Issues for Distributed Address Space Machines. </title>
Reference-contexts: The focus of this paper is to describe a runtime support library that can be used as compiler runtime support in irregular applications. This paper does not describe how this runtime support is integrated into compilers, discussions of irregular problem compilation may be found elsewhere [5], <ref> [7] </ref>, [16], [15], [17], [1], [8]. determined by the values assigned to elements of arrays ia and ib. Integer arrays used to index other arrays (e.g. ia and ib in Figure 1) are called indirection arrays. Runtime support libraries use indirection array values to carry out a variety of optimizations. <p> Several prototype compilers have been developed, that are able to use the CHAOS runtime support to generate reasonable distributed memory code corresponding to Fortran D versions of unstructured mesh and molecular dynamics procedures (e.g. [5], <ref> [7] </ref>). However, the authors are not aware of any prototype compiler that is able to generate correct SPMD code from a DSMC-type application; it is believed that both new language extensions and new compilation methods are required to accomplish this.
Reference: [8] <author> C. Koelbel, P. Mehrotra, and J. Van Rosendale. </author> <title> Supporting shared data structures on distributed memory architectures. </title> <booktitle> In 2nd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 177-186. </pages> <publisher> ACM, </publisher> <month> March </month> <year> 1990. </year>
Reference-contexts: This paper does not describe how this runtime support is integrated into compilers, discussions of irregular problem compilation may be found elsewhere [5], [7], [16], [15], [17], [1], <ref> [8] </ref>. determined by the values assigned to elements of arrays ia and ib. Integer arrays used to index other arrays (e.g. ia and ib in Figure 1) are called indirection arrays. Runtime support libraries use indirection array values to carry out a variety of optimizations.
Reference: [9] <author> Scott R. Kohn and Scott B. Baden. </author> <title> An implementation of the LPAR parallel programming model for scientific computations. </title> <booktitle> In Proceedings of the Sixth SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pages 759-766. </pages> <publisher> SIAM, </publisher> <month> March </month> <year> 1993. </year>
Reference-contexts: Williams [21] describes a programming environment (DIME) for calculations with unstructured triangular meshes using distributed memory machines. Baden and Quinlan have developed C++ based programming environments that target a range of non-uniform scientific calculations <ref> [9] </ref>, [10], [13], [14]. This programming environment provides facilities that support dynamic load balancing. Many applications make extensive use of indirectly indexed arrays. This paper describes how a runtime support library can be used as compiler runtime support in irregular applications.
Reference: [10] <author> S.R. Kohn and S.B. Baden. </author> <title> A robust parallel programming model for dynamic non uniform scientific computations. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference (SHPCC-94), </booktitle> <pages> pages 509-517. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: Williams [21] describes a programming environment (DIME) for calculations with unstructured triangular meshes using distributed memory machines. Baden and Quinlan have developed C++ based programming environments that target a range of non-uniform scientific calculations [9], <ref> [10] </ref>, [13], [14]. This programming environment provides facilities that support dynamic load balancing. Many applications make extensive use of indirectly indexed arrays. This paper describes how a runtime support library can be used as compiler runtime support in irregular applications.
Reference: [11] <author> R. Mirchandaney, J. H. Saltz, R. M. Smith, D. M. Nicol, and Kay Crowley. </author> <title> Principles of runtime support for parallel processors. </title> <booktitle> In Proceedings of the 1988 ACM International Conference on Supercomputing, </booktitle> <pages> pages 140-152, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Solving Irregular Problems 2 Runtime Support This section presents the principles and functionality of the CHAOS runtime support library, a superset of the PARTI library <ref> [11, 23, 20] </ref>, and describes the new features, set-append schedules and two-phased schedule generation, designed to handle adaptive irregular programs. 2.1 Overview of CHAOS The CHAOS runtime library has been developed to efficiently handle problems that consist of a sequence of clearly demarcated concurrent computational phases.
Reference: [12] <author> B. Moon and J. Saltz. </author> <title> Adaptive runtime support for direct simulation monte carlo methods on distributed memory architectures. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference (SHPCC-94), </booktitle> <pages> pages 176-183. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: The DSMC method is a technique for computer modeling a real gas by a large number of simulated molecules. It features highly efficient movement and collision handling of simulated molecules on a spatial flow field domain overlaid by a Cartesian mesh [18, 22]. For a detailed parallelization approach see <ref> [12] </ref>. The performance results of 2-dimensional and 3-dimensional DSMC codes on the Intel iPSC/860 hypercube are also presented. 3.2.1 Performance Results Table 3 compares the execution time of 2-dimensional DSMC code using the set-append schedules (Section 2.5.2) with the time obtained using the regular communication schedules (Section 2.5).
Reference: [13] <author> R. Parsons and D. Quinlan. </author> <title> Run-time recognition of task parallelism within the P++ class library. </title> <booktitle> In Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <institution> Mississippi State University, </institution> <address> Starkville, MS, </address> <pages> pages 77-86. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1993. </year> <month> 14 </month>
Reference-contexts: Williams [21] describes a programming environment (DIME) for calculations with unstructured triangular meshes using distributed memory machines. Baden and Quinlan have developed C++ based programming environments that target a range of non-uniform scientific calculations [9], [10], <ref> [13] </ref>, [14]. This programming environment provides facilities that support dynamic load balancing. Many applications make extensive use of indirectly indexed arrays. This paper describes how a runtime support library can be used as compiler runtime support in irregular applications.
Reference: [14] <author> Rebecca Parsons and Daniel Quinlan. </author> <title> A++/P++ array classes for architecture independent finite difference computations. </title> <booktitle> To Appear in the Proceedings of the Second Annual Object Oriented Numerics Conference, </booktitle> <address> Sunriver, Oregon, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Williams [21] describes a programming environment (DIME) for calculations with unstructured triangular meshes using distributed memory machines. Baden and Quinlan have developed C++ based programming environments that target a range of non-uniform scientific calculations [9], [10], [13], <ref> [14] </ref>. This programming environment provides facilities that support dynamic load balancing. Many applications make extensive use of indirectly indexed arrays. This paper describes how a runtime support library can be used as compiler runtime support in irregular applications.
Reference: [15] <author> Ravi Ponnusamy, Yuan-Shin Hwang, Joel Saltz, Alok Choudhary, and Geoffrey Fox. </author> <title> Support ing irregular distributions in FORTRAN 90D/HPF compilers. </title> <institution> Technical Report CS-TR-3268 and UMIACS-TR-94-57, University of Maryland, Department of Computer Science and UMI-ACS, </institution> <month> May </month> <year> 1994. </year> <note> Submitted to IEEE Parallel and Distributed Technology. </note>
Reference-contexts: The focus of this paper is to describe a runtime support library that can be used as compiler runtime support in irregular applications. This paper does not describe how this runtime support is integrated into compilers, discussions of irregular problem compilation may be found elsewhere [5], [7], [16], <ref> [15] </ref>, [17], [1], [8]. determined by the values assigned to elements of arrays ia and ib. Integer arrays used to index other arrays (e.g. ia and ib in Figure 1) are called indirection arrays. Runtime support libraries use indirection array values to carry out a variety of optimizations.
Reference: [16] <author> Ravi Ponnusamy, Joel Saltz, and Alok Choudhary. </author> <title> Runtime-compilation techniques for data partitioning and communication schedule reuse. </title> <booktitle> In Proceedings Supercomputing '93, </booktitle> <pages> pages 361-370. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year> <note> Also available as University of Maryland Technical Report CS-TR-3055 and UMIACS-TR-93-32. </note>
Reference-contexts: The focus of this paper is to describe a runtime support library that can be used as compiler runtime support in irregular applications. This paper does not describe how this runtime support is integrated into compilers, discussions of irregular problem compilation may be found elsewhere [5], [7], <ref> [16] </ref>, [15], [17], [1], [8]. determined by the values assigned to elements of arrays ia and ib. Integer arrays used to index other arrays (e.g. ia and ib in Figure 1) are called indirection arrays. Runtime support libraries use indirection array values to carry out a variety of optimizations.
Reference: [17] <author> Ravi Ponnusamy, Joel Saltz, Alok Choudhary, Yuan-Shin Hwang, and Geoffrey Fox. </author> <title> Runtime support and compilation methods for user-specified data distributions. </title> <institution> Technical Report CS-TR-3194 and UMIACS-TR-93-135, University of Maryland, Department of Computer Science and UMIACS, </institution> <month> November </month> <year> 1993. </year> <note> Submitted to IEEE Transactions on Parallel and Distributed Systems. </note>
Reference-contexts: The focus of this paper is to describe a runtime support library that can be used as compiler runtime support in irregular applications. This paper does not describe how this runtime support is integrated into compilers, discussions of irregular problem compilation may be found elsewhere [5], [7], [16], [15], <ref> [17] </ref>, [1], [8]. determined by the values assigned to elements of arrays ia and ib. Integer arrays used to index other arrays (e.g. ia and ib in Figure 1) are called indirection arrays. Runtime support libraries use indirection array values to carry out a variety of optimizations.
Reference: [18] <author> D. F. G. Rault and M. S. Woronowicz. </author> <title> Spacecraft contamination investigation by direct simulation Monte Carlo contamination on UARS/HALOE. </title> <booktitle> In Proceedings AIAA 31th Aerospace Sciences Meeting and Exhibit, </booktitle> <address> Reno, Nevada, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: The DSMC method is a technique for computer modeling a real gas by a large number of simulated molecules. It features highly efficient movement and collision handling of simulated molecules on a spatial flow field domain overlaid by a Cartesian mesh <ref> [18, 22] </ref>. For a detailed parallelization approach see [12].
Reference: [19] <author> J. Saltz and et. al. </author> <title> A manual for the CHAOS runtime library. </title> <type> Technical report, </type> <institution> University of Maryland, </institution> <year> 1993. </year>
Reference-contexts: In such applications, all the phases described above are repeated. We will briefly present some important features of CHAOS that are useful to parallelize adaptive irregular programs. A detailed description of the functionality of these features is given in Saltz et al. <ref> [19] </ref>. 2.2 Data Distribution 2.2.1 Data Access Descriptors Translation Tables When an array is irregularly distributed, a mechanism is needed to retrieve required elements of that array. CHAOS supports a translation mechanism using a data structure called the translation table. <p> The procedure scatter can be used to send off-processor elements. The procedure scatter append can be used to perform data movement using the set-append schedules. A detailed description of these procedures can be found in Saltz et al <ref> [19] </ref>. 3 Experimental Results This section presents computational structures and performance of two adaptive irregular application programs: 1) a molecular dynamics code Chemistry at HARvard Macromolec-ular Mechanics (CHARMM), and 2) a direct simulation Monte Carlo code (DSMC). These two application programs are ported to distributed memory machines using CHAOS primitives.
Reference: [20] <author> Joel Saltz, Harry Berryman, and Janet Wu. </author> <title> Multiprocessors and run-time compilation. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3(6) </volume> <pages> 573-592, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: This paper presents a new set of runtime procedures designed to efficiently implement adaptive programs to distributed memory machines. This runtime library is called CHAOS; it subsumes PARTI, a library aimed at static irregular problems <ref> [20] </ref>. CHAOS has been used to parallelize two challenging real-life adaptive applications | CHARMM, a molecular dynamics code and a Direct Simulation Monte Carlo code. Section 2 describes the runtime support to parallelize adaptive irregular programs. Section 3 demonstrates the performance of the runtime support library for real application codes. <p> Solving Irregular Problems 2 Runtime Support This section presents the principles and functionality of the CHAOS runtime support library, a superset of the PARTI library <ref> [11, 23, 20] </ref>, and describes the new features, set-append schedules and two-phased schedule generation, designed to handle adaptive irregular programs. 2.1 Overview of CHAOS The CHAOS runtime library has been developed to efficiently handle problems that consist of a sequence of clearly demarcated concurrent computational phases.
Reference: [21] <author> R. Williams. </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations. </title> <journal> Concurrency, Practice and Experience, </journal> <volume> 3(5) </volume> <pages> 457-482, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: The speedup achieved on 56 processors is 40. 4 Related Work and Conclusions Several researchers have developed programming environments that target particular classes of irregular or adaptive problems. Williams <ref> [21] </ref> describes a programming environment (DIME) for calculations with unstructured triangular meshes using distributed memory machines. Baden and Quinlan have developed C++ based programming environments that target a range of non-uniform scientific calculations [9], [10], [13], [14]. This programming environment provides facilities that support dynamic load balancing.
Reference: [22] <author> M. S. Woronowicz and D. F. G. Rault. </author> <title> On predicting contamination levels of HALOE optics aboard UARS using direct simulation Monte Carlo. </title> <booktitle> In Proceedings AIAA 28th Thermophysics Conference, </booktitle> <address> Orlando, Florida, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The DSMC method is a technique for computer modeling a real gas by a large number of simulated molecules. It features highly efficient movement and collision handling of simulated molecules on a spatial flow field domain overlaid by a Cartesian mesh <ref> [18, 22] </ref>. For a detailed parallelization approach see [12].
Reference: [23] <author> J. Wu, J. Saltz, S. Hiranandani, and H. Berryman. </author> <title> Runtime compilation methods for multicomputers. </title> <booktitle> In Proceedings of the 1991 International Conference on Parallel Processing, </booktitle> <volume> volume 2, </volume> <pages> pages 26-30, </pages> <year> 1991. </year>
Reference-contexts: Solving Irregular Problems 2 Runtime Support This section presents the principles and functionality of the CHAOS runtime support library, a superset of the PARTI library <ref> [11, 23, 20] </ref>, and describes the new features, set-append schedules and two-phased schedule generation, designed to handle adaptive irregular programs. 2.1 Overview of CHAOS The CHAOS runtime library has been developed to efficiently handle problems that consist of a sequence of clearly demarcated concurrent computational phases. <p> The approach taken in these cases is to distribute the translation table between processors. This type of translation table is a distributed translation table. Earlier versions of PARTI supported a translation table that was distributed between processors in a blocked fashion <ref> [4, 23] </ref>. CHAOS also supports an intermediate degree of replication with a paged translation table [6]. 2.2.2 Data Partitioners Data distribution is important for parallelization because it determines the patterns of communication between processors.
References-found: 23

