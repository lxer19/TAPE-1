URL: http://www.cs.concordia.ca/~faculty/gregb/home/PS/apsec98-reuse-cases.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/gregb/home/paper.html
Root-URL: http://www.cs.concordia.ca
Email: gregb@cs.concordia.ca  grogono@cs.concordia.ca  khendek@ece.concordia.ca  
Title: A Reuse Case Perspective on Documenting Frameworks  
Author: Greg Butler Peter Grogono Ferhat Khendek 
Address: Montreal H3G 1M8 Canada  Montreal H3G 1M8 Canada  Montreal H3G 1M8 Canada  
Affiliation: Dept of Computer Science Concordia University  Dept of Computer Science Concordia University  Dept of Elec. and Computer Eng. Concordia University  
Abstract: We propose the concept of a reuse case as offering a perspective of the different approaches to documenting frameworks. The categories of reuse cases are defined, and we discuss other views of reuse cases that can help to classify them. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Ackermann. </author> <title> Developing Object-Oriented Multimedia Software. </title> <publisher> dpunkt Publishing, </publisher> <address> Heidelberg, </address> <year> 1996. </year>
Reference-contexts: Frameworks A framework is a collection of abstract classes that provides an infrastructure common to a family of applications <ref> [1, 12, 26, 31] </ref>. The design of the framework incorporates decisions about the distribution of control and responsibility, the protocols followed by components when communicating, and implementations for each of the major algorithms. <p> Early examples of application frameworks [26] were for graphical user interfaces. Frameworks now exist for a broad range of application domains such as ET++ [26, Ch. 7], for text editors; HOTDRAW [20], for drawing editors; MET++ <ref> [1] </ref>, for multimedia applications; RTL [21], for code optimization in compilers; CHOICES [11], for object-oriented operating systems; BEE++ [9], for analyzing and monitoring distributed programs; and others for network management and telecommunications [6], and financial engineering [8]. 2.2. <p> A guide to the contents of the recipes is generally provided, either as a table of contents, or by the first recipe acting as an overview for the cookbook. Many systems use cookbooks for documentation, including POSTSCRIPT [2], MACAPP [3], MVC (Model-View-Controller) [23], ET++ [15], COMMONPOINT [12], and MET++ <ref> [1] </ref>. Pattern Language Johnson [20] introduced an informal pattern language that can be used for documenting a framework in a natural language. He applied his approach to HOTDRAW, a framework for drawing editors. Patterns provide a format for each recipe, and an organization for the cookbook.
Reference: [2] <author> Adobe Systems. </author> <title> Postscript Language Tutorial and Cookbook. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference-contexts: Cookbook A cookbook is a collection of recipes [31, Ch. 3]. A guide to the contents of the recipes is generally provided, either as a table of contents, or by the first recipe acting as an overview for the cookbook. Many systems use cookbooks for documentation, including POSTSCRIPT <ref> [2] </ref>, MACAPP [3], MVC (Model-View-Controller) [23], ET++ [15], COMMONPOINT [12], and MET++ [1]. Pattern Language Johnson [20] introduced an informal pattern language that can be used for documenting a framework in a natural language. He applied his approach to HOTDRAW, a framework for drawing editors.
Reference: [3] <institution> Apple Computer. MacApp Programmer's Guide. Apple Computer Corp., Cupertino, </institution> <address> CA, </address> <year> 1986. </year>
Reference-contexts: A guide to the contents of the recipes is generally provided, either as a table of contents, or by the first recipe acting as an overview for the cookbook. Many systems use cookbooks for documentation, including POSTSCRIPT [2], MACAPP <ref> [3] </ref>, MVC (Model-View-Controller) [23], ET++ [15], COMMONPOINT [12], and MET++ [1]. Pattern Language Johnson [20] introduced an informal pattern language that can be used for documenting a framework in a natural language. He applied his approach to HOTDRAW, a framework for drawing editors.
Reference: [4] <author> G. Arango, E. Schoen, and R. Pettengill. </author> <title> A process for consolidating and reusing design knowledge. </title> <booktitle> In Proceedings of 15th International Conference on Software Engineering, </booktitle> <pages> pages 231-242. </pages> <publisher> IEEE Computer Press, </publisher> <year> 1993. </year>
Reference-contexts: Other A design notebook collects together information related to a design. The information includes background theory, analyses of situations, and a discussion of engineering trade-offs. While not specifically intended for frameworks, Schlumberger <ref> [4] </ref> has adopted this approach with issue-driven design (of Potts and Brun [30]) to capture the design rationale of software systems, as well as combined hardware/software systems. They call them technology books and product books.
Reference: [5] <author> K. Beck and R. Johnson. </author> <title> Patterns generate architectures. </title> <booktitle> In Object-Oriented Programming, </booktitle> <volume> volume 821, </volume> <pages> pages 139-149, </pages> <address> Berlin, 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Furthermore, other reuse cases can adapt design patterns in a generative sense <ref> [5] </ref> to capture the whole architecture of the framework (and not just the hotspots). <p> The analysis of benefits and trade-offs of applying the pattern is an important part of the design pattern description. The authors of the design patterns catalogue [16] draw the design patterns from their experience with frameworks, including ET++, INTERVIEWS, UNIDRAW, and HOTDRAW. Beck and Johnson <ref> [5] </ref> illustrate the use of design patterns in developing the architecture for HOTDRAW, a framework for drawing editors. Design patterns are good at describing architectures. Framework Overview Setting the context of a framework is a first step in helping an application developer reuse a framework. <p> They provide hypertext documentation for HOTDRAW that includes a cookbook organized as a pattern language [20], and design patterns to illustrate the internal architecture <ref> [5] </ref>. 7. Conclusion A reuse case is a specialization of a use case that we have proposed for documenting the reuse of a framework. We have identified six categories of reuse cases, and related the existing approaches to documenting frameworks to the six categories.
Reference: [6] <author> R. P. Beck, S. R. Desai, D. R. Ryan, R. W. Tower, D. Q. Vroom, and L. M. Wood. </author> <title> Architecture for large-scale reuse. </title> <journal> AT&T Technical Journal, </journal> <volume> 71(6) </volume> <pages> 34-45, </pages> <year> 1992. </year>
Reference-contexts: of application domains such as ET++ [26, Ch. 7], for text editors; HOTDRAW [20], for drawing editors; MET++ [1], for multimedia applications; RTL [21], for code optimization in compilers; CHOICES [11], for object-oriented operating systems; BEE++ [9], for analyzing and monitoring distributed programs; and others for network management and telecommunications <ref> [6] </ref>, and financial engineering [8]. 2.2. Use Cases A use case describes a subset of a system's functionality in terms of the interactions between the system and a set of users or actors.
Reference: [7] <author> T. J. Biggerstaff and A. J. Perlis. </author> <title> Software Reusability, vols I and II. </title> <booktitle> ACM Press/Addison-Wesley, </booktitle> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: The related work in the literature is discussed, and then we conclude. 2. Background Reuse applies not only to source-code fragments, but to all the intermediate products generated during software development, including requirements, documents, system specifications, and design: indeed any information that the developer needs to create software <ref> [7, 22, 32] </ref>. The reuse of domain-independent software components for an organization usually involves features common to all application systems. These include common data structures, graphical user interfaces, interfaces to databases, and networks.
Reference: [8] <author> A. Birrer and T. Eggenschwiler. </author> <title> Frameworks in the financial engineering domain: An experience report. </title> <booktitle> In ECOOP'93, </booktitle> <pages> pages 21-35, </pages> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: as ET++ [26, Ch. 7], for text editors; HOTDRAW [20], for drawing editors; MET++ [1], for multimedia applications; RTL [21], for code optimization in compilers; CHOICES [11], for object-oriented operating systems; BEE++ [9], for analyzing and monitoring distributed programs; and others for network management and telecommunications [6], and financial engineering <ref> [8] </ref>. 2.2. Use Cases A use case describes a subset of a system's functionality in terms of the interactions between the system and a set of users or actors.
Reference: [9] <author> B. Bruegge, T. Gottschalk, and B. Luo. </author> <title> A framework for dynamic program analyzers. </title> <booktitle> In OOPSLA'93, </booktitle> <pages> pages 65-82. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1993. </year>
Reference-contexts: Frameworks now exist for a broad range of application domains such as ET++ [26, Ch. 7], for text editors; HOTDRAW [20], for drawing editors; MET++ [1], for multimedia applications; RTL [21], for code optimization in compilers; CHOICES [11], for object-oriented operating systems; BEE++ <ref> [9] </ref>, for analyzing and monitoring distributed programs; and others for network management and telecommunications [6], and financial engineering [8]. 2.2. Use Cases A use case describes a subset of a system's functionality in terms of the interactions between the system and a set of users or actors.
Reference: [10] <author> R. Buhr and R. Casselman. </author> <title> Architectures with pictures. </title> <booktitle> In OOPSLA'92, </booktitle> <pages> pages 466-483. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: Background theory, domain information, and analyses of trade-offs are crucial information. Recipes describe how to adapt the functionality of the framework. As such they may refer to, or be documented in terms of, use cases or scenarios that describe the intended functionality. Similarly, a time thread <ref> [10] </ref> for a scenario can depict when and where the scenario involves the framework and when and where it involves the customized code. 3.1. Kinds of Framework Reuse There are several kinds of people who reuse a framework. They have differing needs from documentation.
Reference: [11] <author> R. H. Campbell, N. Islam, D. Raila, and P. Madany. </author> <title> Designing and implementing Choices: An object-oriented system in C++. </title> <journal> CACM, </journal> <volume> 36(9) </volume> <pages> 117-126, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Early examples of application frameworks [26] were for graphical user interfaces. Frameworks now exist for a broad range of application domains such as ET++ [26, Ch. 7], for text editors; HOTDRAW [20], for drawing editors; MET++ [1], for multimedia applications; RTL [21], for code optimization in compilers; CHOICES <ref> [11] </ref>, for object-oriented operating systems; BEE++ [9], for analyzing and monitoring distributed programs; and others for network management and telecommunications [6], and financial engineering [8]. 2.2.
Reference: [12] <author> S. Cotter and M. Potel. </author> <title> Inside Taligent Technology. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: Frameworks A framework is a collection of abstract classes that provides an infrastructure common to a family of applications <ref> [1, 12, 26, 31] </ref>. The design of the framework incorporates decisions about the distribution of control and responsibility, the protocols followed by components when communicating, and implementations for each of the major algorithms. <p> A guide to the contents of the recipes is generally provided, either as a table of contents, or by the first recipe acting as an overview for the cookbook. Many systems use cookbooks for documentation, including POSTSCRIPT [2], MACAPP [3], MVC (Model-View-Controller) [23], ET++ [15], COMMONPOINT <ref> [12] </ref>, and MET++ [1]. Pattern Language Johnson [20] introduced an informal pattern language that can be used for documenting a framework in a natural language. He applied his approach to HOTDRAW, a framework for drawing editors. Patterns provide a format for each recipe, and an organization for the cookbook.
Reference: [13] <author> J. E.F. Ecklund, Jr, L. M.L. Delcambre, and M. J. Freiling. </author> <title> Change cases: Use cases that identify future requirements. </title> <booktitle> In OOPSLA'96, </booktitle> <pages> pages 342-358. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: Mining Reuse Case For mining, the reuser needs a framework overview, and then details of how design patterns have been applied to hotspots, and to the internal architecture of the framework. Details from the reference manual may also be consulted. 6. Related Work A change case <ref> [13] </ref> is a specialized use case for capturing anticipated changes in requirements and their impact. Its intent is to allow a more robust system to be developed by explicitly providing a record of anticipated changes.
Reference: [14] <author> M. Fayad and M. P. Cline. </author> <title> Aspects of software adaptability. </title> <journal> CACM, </journal> <volume> 39(10) </volume> <pages> 58-59, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Flexing A hotspot is customized in a way that was not planned for by the framework designer, yet the customization is consistent with the obligations and constraints of the design. These two terms, extend and flex, are taken from Fayad and Cline <ref> [14] </ref>, who characterize them as a change in amount but not in kind and a change in kind respectively. Evolving A framework is maintained to either increase the flexibility of existing hotspots, or to add new hotspots.
Reference: [15] <author> E. </author> <title> Gamma. Objektorientierte Software-Entwicklung am Beispiel von ET++. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: A guide to the contents of the recipes is generally provided, either as a table of contents, or by the first recipe acting as an overview for the cookbook. Many systems use cookbooks for documentation, including POSTSCRIPT [2], MACAPP [3], MVC (Model-View-Controller) [23], ET++ <ref> [15] </ref>, COMMONPOINT [12], and MET++ [1]. Pattern Language Johnson [20] introduced an informal pattern language that can be used for documenting a framework in a natural language. He applied his approach to HOTDRAW, a framework for drawing editors.
Reference: [16] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Helm et al wrote a few interaction contracts for the model-view-controller paradigm [23]. Design Pattern A design pattern presents a solution to a design problem that might arise in a given context <ref> [16] </ref>. A design pattern provides an abstraction above the level of classes and objects. Design patterns capture design experience at the micro-architecture level, by specifying the relationship between classes and objects involved in a particular design problem. A design pattern is meta-knowledge about how to incorporate flexibility into a framework. <p> A collaboration diagram may be used to represent the same information. Examples of the solution being applied in concrete situations may be provided. The analysis of benefits and trade-offs of applying the pattern is an important part of the design pattern description. The authors of the design patterns catalogue <ref> [16] </ref> draw the design patterns from their experience with frameworks, including ET++, INTERVIEWS, UNIDRAW, and HOTDRAW. Beck and Johnson [5] illustrate the use of design patterns in developing the architecture for HOTDRAW, a framework for drawing editors. Design patterns are good at describing architectures. <p> Additionally, as in patterns and issue-driven design, there may be cross-references to further information, including other reuse cases, architectures, design patterns, contracts, and source code. As in design pattern catalogues <ref> [16] </ref>, the reuse cases can be classified according to several views. In the next section, we discuss a classification based on the category of reuse. In a later section we discuss other views, called aspects, based on abstraction level, and architectural granularity amongst others.
Reference: [17] <author> R. Helm, I. Holland, and D. Gangopadhyay. </author> <title> Contracts: specifying behavioral compositions in object-oriented systems. </title> <booktitle> In OOPSLA'90, </booktitle> <pages> pages 169-180. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1990. </year>
Reference-contexts: A contract specifies the type constraints given by the signature of a method, and the interface semantics of the method. EIFFEL and LARCH/C++ [25] provide notation to support interface contracts. Interaction Contract A contract is a specification of obligations. An interaction contract <ref> [17, 18] </ref> deals with the co-operative behavior of several participants that interact to achieve a joint goal.
Reference: [18] <author> I. Holland. </author> <title> Specifying reusable components with contracts. </title> <booktitle> In ECOOP'92, </booktitle> <volume> volume 615, </volume> <pages> pages 287-308, </pages> <address> Berlin, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A contract specifies the type constraints given by the signature of a method, and the interface semantics of the method. EIFFEL and LARCH/C++ [25] provide notation to support interface contracts. Interaction Contract A contract is a specification of obligations. An interaction contract <ref> [17, 18] </ref> deals with the co-operative behavior of several participants that interact to achieve a joint goal.
Reference: [19] <author> I. Jacobson, M. Christorson, P. Jonsson, and G. Overgaard. </author> <title> Object-Oriented Software Engineering: A Use Case Driven Approach. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1992. </year>
Reference-contexts: A use case is initiated by a particular user, and serves the purpose of delivering some meaningful unit of work, service, or value to the initiator <ref> [19] </ref>. A usage scenario is a user-friendly text describing how a system is used by a user or a group of similar users.
Reference: [20] <author> R. Johnson. </author> <title> Documenting frameworks using patterns. </title> <booktitle> In OOPSLA'92, </booktitle> <pages> pages 63-76. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: Early examples of application frameworks [26] were for graphical user interfaces. Frameworks now exist for a broad range of application domains such as ET++ [26, Ch. 7], for text editors; HOTDRAW <ref> [20] </ref>, for drawing editors; MET++ [1], for multimedia applications; RTL [21], for code optimization in compilers; CHOICES [11], for object-oriented operating systems; BEE++ [9], for analyzing and monitoring distributed programs; and others for network management and telecommunications [6], and financial engineering [8]. 2.2. <p> Many systems use cookbooks for documentation, including POSTSCRIPT [2], MACAPP [3], MVC (Model-View-Controller) [23], ET++ [15], COMMONPOINT [12], and MET++ [1]. Pattern Language Johnson <ref> [20] </ref> introduced an informal pattern language that can be used for documenting a framework in a natural language. He applied his approach to HOTDRAW, a framework for drawing editors. Patterns provide a format for each recipe, and an organization for the cookbook. <p> Classification: Composing, at class granularity. Documentation: Pattern 8, HotDraw cookbook <ref> [20] </ref>. 4.1. Categories of Reuse Cases The kinds of reuse of a framework fall into several categories, which we present in this section. The six categories of reuse cases are as follows. Selecting A framework is selected as being appropriate for the intended application. <p> Meusel, Czarnecki and Kopf [28] recognize three types of audience for framework reuse: framework selectors, typical application developers, and developers intending to modify the structure of the framework. They provide hypertext documentation for HOTDRAW that includes a cookbook organized as a pattern language <ref> [20] </ref>, and design patterns to illustrate the internal architecture [5]. 7. Conclusion A reuse case is a specialization of a use case that we have proposed for documenting the reuse of a framework.
Reference: [21] <author> R. Johnson, C. McConnell, and J. </author> <title> Lake. The RTL system: A framework for code optimization. </title> <editor> In R. Giegerich and S. Graham, editors, </editor> <title> Code Generation Concepts, </title> <booktitle> Tools, Techniques, </booktitle> <pages> pages 255-274, </pages> <address> London, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Early examples of application frameworks [26] were for graphical user interfaces. Frameworks now exist for a broad range of application domains such as ET++ [26, Ch. 7], for text editors; HOTDRAW [20], for drawing editors; MET++ [1], for multimedia applications; RTL <ref> [21] </ref>, for code optimization in compilers; CHOICES [11], for object-oriented operating systems; BEE++ [9], for analyzing and monitoring distributed programs; and others for network management and telecommunications [6], and financial engineering [8]. 2.2.
Reference: [22] <editor> E.-A. Karlsson, editor. </editor> <title> Software Reuse: A Holistic Approach. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: The related work in the literature is discussed, and then we conclude. 2. Background Reuse applies not only to source-code fragments, but to all the intermediate products generated during software development, including requirements, documents, system specifications, and design: indeed any information that the developer needs to create software <ref> [7, 22, 32] </ref>. The reuse of domain-independent software components for an organization usually involves features common to all application systems. These include common data structures, graphical user interfaces, interfaces to databases, and networks.
Reference: [23] <author> G. Krasner and S. Pope. </author> <title> A cookbook for using the model-view-controller user interface paradigm in Smalltalk-80. </title> <journal> J. Object-Oriented Prog., </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <year> 1988. </year>
Reference-contexts: A guide to the contents of the recipes is generally provided, either as a table of contents, or by the first recipe acting as an overview for the cookbook. Many systems use cookbooks for documentation, including POSTSCRIPT [2], MACAPP [3], MVC (Model-View-Controller) <ref> [23] </ref>, ET++ [15], COMMONPOINT [12], and MET++ [1]. Pattern Language Johnson [20] introduced an informal pattern language that can be used for documenting a framework in a natural language. He applied his approach to HOTDRAW, a framework for drawing editors. <p> An interaction contract specifies preconditions on participants required to establish the contract, and the invariant to be maintained by these participants. Helm et al wrote a few interaction contracts for the model-view-controller paradigm <ref> [23] </ref>. Design Pattern A design pattern presents a solution to a design problem that might arise in a given context [16]. A design pattern provides an abstraction above the level of classes and objects.
Reference: [24] <author> R. Lajoie and R. K. Keller. </author> <title> Design and reuse in object-oriented frameworks: Patterns, contracts, and motifs in concert. </title> <editor> In V. Alagar and R. Missaoui, editors, </editor> <booktitle> Object-Oriented Technology for Database and Software Systems, </booktitle> <pages> pages 295-312, </pages> <address> Singapore, 1995. </address> <publisher> World Scientific. </publisher>
Reference-contexts: The organization follows a spiral approach where recipes for the most frequent forms of reuse are presented early, and where concepts and details are delayed as long as possible. The first recipe is an overview of the framework concepts and the other recipes. Motif Lajoie and Keller <ref> [24] </ref> introduce the term motif for Johnson's patterns in order to avoid confusion with design patterns. They use a template for a motif description that has a name and intent, a description of the reuse situation, the steps involved in customization, and cross references to motifs, design patterns, and contracts. <p> This is related to version management to support reuse, and is not concerned with the actual reuse. Lajoie and Keller <ref> [24] </ref> adopt an approach that combines recipes, design patterns, and contracts, all cross-referenced to document the ET++ framework. They do not recognize the different categories of reuse, but the information they document can support each kind of reuse to some degree.
Reference: [25] <author> G. T. Leavens. </author> <title> An overview of Larch/C++: Behavioral specifications for C++ modules. </title> <editor> In H. Kilov and W. Harvey, editors, </editor> <booktitle> Specification of Behavioral Semantics in Object-Oriented Information Modeling, </booktitle> <pages> pages 121-142, </pages> <address> Amster-dam, 1996. </address> <publisher> Kluwer. </publisher>
Reference-contexts: The interface contract of a class [29] provides a specification of the class interface and class invariants in isolation. A contract specifies the type constraints given by the signature of a method, and the interface semantics of the method. EIFFEL and LARCH/C++ <ref> [25] </ref> provide notation to support interface contracts. Interaction Contract A contract is a specification of obligations. An interaction contract [17, 18] deals with the co-operative behavior of several participants that interact to achieve a joint goal.
Reference: [26] <author> T. Lewis et al. </author> <title> Object-Oriented Application Frameworks. </title> <publisher> Manning Publications, </publisher> <address> Greenwich, CT, </address> <year> 1995. </year>
Reference-contexts: Frameworks A framework is a collection of abstract classes that provides an infrastructure common to a family of applications <ref> [1, 12, 26, 31] </ref>. The design of the framework incorporates decisions about the distribution of control and responsibility, the protocols followed by components when communicating, and implementations for each of the major algorithms. <p> Default implementations of each user class may be provided, and the user will subclass in order to override or specialize the operation which implements the sub-step. Early examples of application frameworks <ref> [26] </ref> were for graphical user interfaces. <p> Early examples of application frameworks [26] were for graphical user interfaces. Frameworks now exist for a broad range of application domains such as ET++ <ref> [26, Ch. 7] </ref>, for text editors; HOTDRAW [20], for drawing editors; MET++ [1], for multimedia applications; RTL [21], for code optimization in compilers; CHOICES [11], for object-oriented operating systems; BEE++ [9], for analyzing and monitoring distributed programs; and others for network management and telecommunications [6], and financial engineering [8]. 2.2. <p> The design patterns provide information about the internal architecture, and the contracts provide more rigorous description of the collaborations relevant to the motif. They applied their approach to ET++ <ref> [26, Ch. 7] </ref>. Interface Contract A contract is a specification of obligations. The interface contract of a class [29] provides a specification of the class interface and class invariants in isolation. <p> A method description presents the functionality of the method, its pre- and post-condition, and an indication of which data members it affects or uses. The description of a class may be organized as a Unix man page, as done for ET++ <ref> [26, Ch. 7] </ref>. For framework documentation, the descriptions can include additional material concerning the role of a class or method in providing flexibility for a hotspot, particularly whether a class is intended to be subclassed or a method to be overridden.
Reference: [27] <author> M. Linn and M. Clancy. </author> <title> The case for case studies in programming problems. </title> <journal> CACM, </journal> <volume> 35(3) </volume> <pages> 121-132, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: The individual items of documentation that are used are listed here. Example Application The source code of example applications that have been constructed using the framework is often the first and only documentation provided to application developers. Documentation requires a graded set of training examples <ref> [27, 34] </ref>. Each should illustrate a single new hotspot, starting with the simplest and most common form of reuse for that hotspot, and eventually providing a complete coverage. Most cookbooks revolve around a small number of simple example applications.
Reference: [28] <author> M. Meusel, K. Czarnecki, and W. Kopf. </author> <title> A model for structuring user documentation of object-oriented frameworks using patterns and hypertext. </title> <booktitle> In ECOOP'97, </booktitle> <volume> volume 1241, </volume> <pages> pages 496-510, </pages> <address> Berlin, 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: An application developer can follow the steps in the recipe directly in the development environment. The tool is applicable to composing and extending reuse cases, although the authors do not explicitly recognize the different categories of reuse. Meusel, Czarnecki and Kopf <ref> [28] </ref> recognize three types of audience for framework reuse: framework selectors, typical application developers, and developers intending to modify the structure of the framework. They provide hypertext documentation for HOTDRAW that includes a cookbook organized as a pattern language [20], and design patterns to illustrate the internal architecture [5]. 7.
Reference: [29] <author> B. Meyer. </author> <title> Applying design by contract. </title> <journal> IEEE Computer, </journal> <volume> 25(10) </volume> <pages> 40-51, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The design patterns provide information about the internal architecture, and the contracts provide more rigorous description of the collaborations relevant to the motif. They applied their approach to ET++ [26, Ch. 7]. Interface Contract A contract is a specification of obligations. The interface contract of a class <ref> [29] </ref> provides a specification of the class interface and class invariants in isolation. A contract specifies the type constraints given by the signature of a method, and the interface semantics of the method. EIFFEL and LARCH/C++ [25] provide notation to support interface contracts.
Reference: [30] <author> C. Potts and G. Bruns. </author> <title> Recording the reasons for design decisions. </title> <booktitle> In Proceedings of 10th International Conference on Software Engineering, </booktitle> <pages> pages 418-427. </pages> <publisher> IEEE Computer Press, </publisher> <year> 1988. </year>
Reference-contexts: Other A design notebook collects together information related to a design. The information includes background theory, analyses of situations, and a discussion of engineering trade-offs. While not specifically intended for frameworks, Schlumberger [4] has adopted this approach with issue-driven design (of Potts and Brun <ref> [30] </ref>) to capture the design rationale of software systems, as well as combined hardware/software systems. They call them technology books and product books. The information includes requirements, specifications, architecture, components, design, code, history and the relationships between this information. Background theory, domain information, and analyses of trade-offs are crucial information.
Reference: [31] <author> W. Pree. </author> <title> Design Patterns for Object-Oriented Software Development. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: A framework is developed in order to support the development of a family of applications. The design of the framework fixes certain roles and responsibilities amongst the classes, as well as standard protocols for their collaboration. The variability within the family of applications is factored into so-called hotspots <ref> [31] </ref>, and the framework provides simple mechanisms to customize each hotspot. A framework is developed by expert designers who have a deep knowledge of the application domain and long experience of software design. Typical reuse involves a team of application developers customizing the framework to construct one concrete application. <p> Frameworks A framework is a collection of abstract classes that provides an infrastructure common to a family of applications <ref> [1, 12, 26, 31] </ref>. The design of the framework incorporates decisions about the distribution of control and responsibility, the protocols followed by components when communicating, and implementations for each of the major algorithms. <p> Most cookbooks revolve around a small number of simple example applications. Recipe A recipe describes how to perform a typical example of reuse during application development <ref> [31, Ch. 3] </ref>. The information is presented in informal natural language, perhaps with some pictures, and usually with sample source code. Although informal, a recipe often follows a structure, such as sections on purpose, steps of the recipe, cross references to other recipes, and source code examples. <p> Although informal, a recipe often follows a structure, such as sections on purpose, steps of the recipe, cross references to other recipes, and source code examples. Cookbook A cookbook is a collection of recipes <ref> [31, Ch. 3] </ref>. A guide to the contents of the recipes is generally provided, either as a table of contents, or by the first recipe acting as an overview for the cookbook.
Reference: [32] <author> W. Schafer, R. Prieto-diaz, and M. Matsumoto. </author> <title> Software Reusability. </title> <publisher> Ellis Horwood, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: The related work in the literature is discussed, and then we conclude. 2. Background Reuse applies not only to source-code fragments, but to all the intermediate products generated during software development, including requirements, documents, system specifications, and design: indeed any information that the developer needs to create software <ref> [7, 22, 32] </ref>. The reuse of domain-independent software components for an organization usually involves features common to all application systems. These include common data structures, graphical user interfaces, interfaces to databases, and networks.
Reference: [33] <author> A. Schappert, P. Sommerlad, and W. Pree. </author> <title> Automated framework development. </title> <booktitle> In Symposium on Software Reusability (SSR'95), </booktitle> <pages> pages 123-127. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: Lajoie and Keller [24] adopt an approach that combines recipes, design patterns, and contracts, all cross-referenced to document the ET++ framework. They do not recognize the different categories of reuse, but the information they document can support each kind of reuse to some degree. Active cookbooks <ref> [33] </ref> support reuse of a framework by integrating a hypermedia tool that browses a cookbook with a development environment. An application developer can follow the steps in the recipe directly in the development environment.
Reference: [34] <author> S. Sparks, K. Benner, and C. Faris. </author> <title> Managing object-oriented framework reuse. </title> <journal> IEEE Computer, </journal> <volume> 29(9) </volume> <pages> 52-61, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: The individual items of documentation that are used are listed here. Example Application The source code of example applications that have been constructed using the framework is often the first and only documentation provided to application developers. Documentation requires a graded set of training examples <ref> [27, 34] </ref>. Each should illustrate a single new hotspot, starting with the simplest and most common form of reuse for that hotspot, and eventually providing a complete coverage. Most cookbooks revolve around a small number of simple example applications.
Reference: [35] <author> P. Steyaert, C. Lucas, K. Mens, and T. D'Hondt. </author> <title> Reuse contracts: Managing the evolution of reusable assets. </title> <booktitle> In OOPSLA'96, </booktitle> <pages> pages 268-285. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: A change case is similar to our evolving reuse case for anticipated evolution of the framework. A reuse contract <ref> [35] </ref> is an interface description for a reusable class. Its purpose is to explicitly record the agreement between the manager of a reusable asset and the reuser of the asset, so that the effect of newer versions of the asset on the existing reusers can be documented.
References-found: 35

