URL: http://www.cs.virginia.edu/~jfk3w/papers/hcw96draft.ps
Refering-URL: http://www.cs.virginia.edu/~jfk3w/papers.html
Root-URL: http://www.cs.virginia.edu
Email: @virginia.edu  
Title: A New Approach to Task Placement in Wide-Area Heterogeneous Distributed Systems  
Phone: (804) 982-2200 FAX: (804) 982-2214  
Author: John F. Karpovich Andrew S. Grimshaw 
Address: THORNTON HALL CHARLOTTESVILLE, VIRGINIA 22903-2442  -karp grimshaw-  
Affiliation: DEPARTMENT OF COMPUTER SCIENCE UNIVERSITY OF VIRGINIA  University of Virginia  
Abstract: We believe that in the future distributed resources within and across organizations will become highly integrated into large virtual computer systems. Such systems will potentially be very large, complex, dynamic, heterogeneous, geographically distributed, and support a large and diverse user and application base. One of the key challenges in such an environment is determining where to place tasks to best suit users needs. It is our claim that the current systems available do not take the proper approach in attacking the problem for future systems because they 1) focus on solutions for a narrow set of application types, environments, or user objectives, and 2) often inadequately support the full size, complexity and features of todays systems, much less the anticipated future systems. We propose taking a different approach to the problem. Rather than designing another new, more comprehensive placement system, our objective is to create a flexible and extensible framework to support task placement. The goal of the framework is to provide programmers with the basic mechanisms to support each facet of the placement process to enable them to implement the placement policies and techniques that meet their needs. This paper presents our objectives for developing such a placement framework and the approach we will use to design and evaluate it. Our agenda includes developing a general model of the placement process, designing and implementing a specific instance of a framework for the Legion system as a proof of concept, and evaluating the usefulness of the framework. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Personal communication with Francine Berman and Richard Wolski, </author> <month> January </month> <year> 1996. </year>
Reference-contexts: The hope is that if these object-specific default mappers work well in most cases, most users will not have to deal with the placement process at all. 4 The AppLeS Project The Application Level Scheduler (AppLeS) project <ref> [1] </ref> recently begun at UCSD is taking a similar approach to solving placement issues for parallel applications in heterogeneous distributed systems. The goal of AppLeS is to "address the placement needs of high-performance parallel applications in a non-dedicated distributed environment" [1]. <p> 4 The AppLeS Project The Application Level Scheduler (AppLeS) project <ref> [1] </ref> recently begun at UCSD is taking a similar approach to solving placement issues for parallel applications in heterogeneous distributed systems. The goal of AppLeS is to "address the placement needs of high-performance parallel applications in a non-dedicated distributed environment" [1]. Their approach is to develop an application 1/16/96 Page 9 management system that can be coupled with different resource management systems.
Reference: [2] <author> Allan Bricker, Michael Litzkow, Miron Livny, </author> <type> "Condor Technical Summary", </type> <institution> University of Wisconsin Department of Computer Sciences Technical Report 1069, </institution> <month> January </month> <year> 1992. </year>
Reference: [3] <author> Richard F. Freund, D. S. Conwel, "Superconcurrency: </author> <title> A Form of Distributed Heterogeneous Supercomputing", </title> <journal> Supercomputing Rev., </journal> <volume> Vol. 3, No. 10, </volume> <month> October </month> <year> 1990, </year> <pages> pp. 47-50. </pages>
Reference-contexts: These efforts include basic load balancing systems such as LoadLeveler [7], Network Queuing System (NQS) [8], and Portable Batch System (PBS) [6], load sharing systems such as Condor/ CARMI [2,10,11] and Utopia [12], and distributed heterogeneous supercomputing (DHS) systems such as Superconcurrency/Smartnet <ref> [3] </ref> and the Distributed Heterogeneous Supercomputing Management System (DHSMS) [4]. However, each of these efforts has some drawbacks. First, each system follows an approach where the objective function to be optimized and the types of resource and other information supported are built into the system design 1 .
Reference: [4] <author> Arif Ghafoor and Jaehyung Yang, </author> <title> "A Distributed Heterogeneous Supercomputing Management System", </title> <journal> IEEE Computer, </journal> <volume> Vol. 26, No. 6, </volume> <month> June </month> <year> 1993, </year> <pages> pp. 78-86. </pages>
Reference-contexts: efforts include basic load balancing systems such as LoadLeveler [7], Network Queuing System (NQS) [8], and Portable Batch System (PBS) [6], load sharing systems such as Condor/ CARMI [2,10,11] and Utopia [12], and distributed heterogeneous supercomputing (DHS) systems such as Superconcurrency/Smartnet [3] and the Distributed Heterogeneous Supercomputing Management System (DHSMS) <ref> [4] </ref>. However, each of these efforts has some drawbacks. First, each system follows an approach where the objective function to be optimized and the types of resource and other information supported are built into the system design 1 .
Reference: [5] <author> Andrew S. Grimshaw, William A. Wulf, Jim C. French, Alfred C. Weaver, Paul F. Reynolds, Jr., "Legion: </author> <title> The Next Logical Step Towards a Nationwide Virtual Computer", </title> <type> UVA CS Technical Report CS-94-21, </type> <month> June </month> <year> 1994. </year>
Reference: [6] <author> Robert L. Henderson and Dave Tweten, </author> <title> "Portable Batch System - Requirements Specification Revision 1.5", </title> <institution> NASA Ames Research Center, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Many recent efforts have explored various ways to support task placement in distributed environments. These efforts include basic load balancing systems such as LoadLeveler [7], Network Queuing System (NQS) [8], and Portable Batch System (PBS) <ref> [6] </ref>, load sharing systems such as Condor/ CARMI [2,10,11] and Utopia [12], and distributed heterogeneous supercomputing (DHS) systems such as Superconcurrency/Smartnet [3] and the Distributed Heterogeneous Supercomputing Management System (DHSMS) [4]. However, each of these efforts has some drawbacks.
Reference: [7] <institution> IBM Corporation, IBM LoadLeveler: </institution> <note> Users Guide, </note> <year> 1993. </year>
Reference-contexts: Many recent efforts have explored various ways to support task placement in distributed environments. These efforts include basic load balancing systems such as LoadLeveler <ref> [7] </ref>, Network Queuing System (NQS) [8], and Portable Batch System (PBS) [6], load sharing systems such as Condor/ CARMI [2,10,11] and Utopia [12], and distributed heterogeneous supercomputing (DHS) systems such as Superconcurrency/Smartnet [3] and the Distributed Heterogeneous Supercomputing Management System (DHSMS) [4]. However, each of these efforts has some drawbacks.
Reference: [8] <author> Brent A. Kingsbury, </author> <title> "The Network Queuing System", Sterling Software, </title> <address> Palo Alto, CA, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Many recent efforts have explored various ways to support task placement in distributed environments. These efforts include basic load balancing systems such as LoadLeveler [7], Network Queuing System (NQS) <ref> [8] </ref>, and Portable Batch System (PBS) [6], load sharing systems such as Condor/ CARMI [2,10,11] and Utopia [12], and distributed heterogeneous supercomputing (DHS) systems such as Superconcurrency/Smartnet [3] and the Distributed Heterogeneous Supercomputing Management System (DHSMS) [4]. However, each of these efforts has some drawbacks.
Reference: [9] <author> Mike Lewis, Andrew S. Grimshaw, </author> <title> "The Core Legion Object Model", </title> <type> UVA CS Technical Report CS-95-35, </type> <month> August </month> <year> 1995. </year>
Reference: [10] <author> Mike Litzkow, Miron Livny, </author> <title> "Experience with the Condor Distributed Batch System", </title> <booktitle> IEEE Workshop on Experimental Distributed Systems, </booktitle> <address> Huntsville, AL, </address> <month> October </month> <year> 1990. </year>
Reference: [11] <author> Jim Pruyne and Miron Livny, </author> <title> "Parallel Processing on Dynamic Resources with CARMI", Workshop on Job Scheduling Strategies for Parallel Processing, </title> <booktitle> International Parallel Processing Symposium (IPPS), </booktitle> <month> April </month> <year> 1995. </year>
Reference: [12] <author> Songian Zhou, Xiaohu Zheng, Jingwen Wang, Pierre Delisle, </author> <title> "Utopia: A Load Sharing Facility for Large, Heterogeneous Distributed Computer Systems", </title> <journal> Software Practice and Experience, </journal> <volume> Vol. 23, No. 12, </volume> <month> Decem-ber </month> <year> 1993, </year> <pages> pp. 1305-1336. </pages>
Reference-contexts: Many recent efforts have explored various ways to support task placement in distributed environments. These efforts include basic load balancing systems such as LoadLeveler [7], Network Queuing System (NQS) [8], and Portable Batch System (PBS) [6], load sharing systems such as Condor/ CARMI [2,10,11] and Utopia <ref> [12] </ref>, and distributed heterogeneous supercomputing (DHS) systems such as Superconcurrency/Smartnet [3] and the Distributed Heterogeneous Supercomputing Management System (DHSMS) [4]. However, each of these efforts has some drawbacks.
References-found: 12

