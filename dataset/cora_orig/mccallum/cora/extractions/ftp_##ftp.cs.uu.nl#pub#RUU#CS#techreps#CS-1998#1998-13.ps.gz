URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1998/1998-13.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Realistic Input Models for Geometric Algorithms  
Author: Mark de Berg Matthew J. Katz A. Frank van der Stappen Jules Vleugels 
Abstract: Many algorithms developed in computational geometry are needlessly complicated and slow because they have to be prepared for very complicated, hypothetical inputs. To avoid this, realistic models are needed that describe the properties that realistic inputs have, so that algorithms can de designed that take advantage of these properties. This can lead to algorithms that are provably efficient in realistic situations. We obtain some fundamental results in this research direction. In particular, we have the following results. * We show the relations between various models that have been proposed in the literature. * For several of these models, we give algorithms to compute the model parameter(s) for a given scene; these algorithms can be used to verify whether a model is appropriate for typical scenes in some application area. * As a case study, we give some experimental results on the appropriateness of some of the models for one particular type of scenes often encountered in geographic information systems, namely certain triangulated irregular networks.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, M. J. Katz, and M. Sharir. </author> <title> Computing depth orders for fat objects and related problems. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 5 </volume> <pages> 187-206, </pages> <year> 1995. </year>
Reference-contexts: Fatness. The first, and best known, model we consider is fatness. Intuitively, an object is called fat if it contains no long and skinny parts. There are many different definitions of fatness <ref> [1, 3, 12, 10] </ref>, which are all more or less equivalent|at least for convex objects. We shall use a definition similar to the one used in van der Stappen's thesis [18], where the motion planning problem for scenes consisting of fat objects is studied.
Reference: [2] <author> P. K. Agarwal and J. Matousek. </author> <title> On range searching with semialgebraic sets. </title> <journal> Discrete Comput. Geom., </journal> <volume> 11 </volume> <pages> 393-418, </pages> <year> 1994. </year>
Reference-contexts: Supported by the Israel Science Foundation founded by the Israel Academy of Sciences and Humanities. 1 uncluttered fatness low density small simple cover complexity Another example comes from ray tracing. Agarwal and Matousek <ref> [2] </ref> developed a data structure for 3-dimensional objects with roughly O (n 3=4 ) query time, which uses roughly linear storage. It is believed that this is theoretically close to optimal. But octrees, for instance, have been observed to behave well in many practical situations.
Reference: [3] <author> H. Alt, R. Fleischer, M. Kaufmann, K. Mehlhorn, S. Naher, S. Schirra, and C. Uhrig. </author> <title> Approximate motion planning and the complexity of the boundary of the union of simple geometric figures. </title> <journal> Algorithmica, </journal> <volume> 8 </volume> <pages> 391-406, </pages> <year> 1992. </year> <month> 12 </month>
Reference-contexts: Fatness. The first, and best known, model we consider is fatness. Intuitively, an object is called fat if it contains no long and skinny parts. There are many different definitions of fatness <ref> [1, 3, 12, 10] </ref>, which are all more or less equivalent|at least for convex objects. We shall use a definition similar to the one used in van der Stappen's thesis [18], where the motion planning problem for scenes consisting of fat objects is studied.
Reference: [4] <author> M. de Berg. </author> <title> Linear size binary space partitions for fat objects. </title> <booktitle> In Proc. 3rd Annu. European Sympos. Algorithms (ESA '95), volume 979 of Lecture Notes in Computer Science, </booktitle> <pages> pages 252-263, </pages> <year> 1995. </year>
Reference-contexts: Theorem 3.1 (i) Any d-dimensional scene consisting of fi-fat objects has density at most 2 d =fi. 1 In an earlier version <ref> [4] </ref> of this paper the term `bounding-box-fitness' was used. 4 + 1 horizontal rectangles the unit cube (ii) For any parameters ; fi with &gt; 1 and fi &gt; 0, there is a 2-dimensional -low-density scene that is not fi-fat. Proof. (i) This was proved by van der Stappen [18]. <p> De Berg <ref> [4] </ref> showed that bb (S) can be covered by a collection C of 2 2d n = O (n) cubes with the following properties: (P1) The cubes in C contain no bounding-box vertices in their interior, so they intersect at most objects. (P2) A cube in C intersects at most O
Reference: [5] <author> M. de Berg. </author> <title> Linear size binary space partitions for uncluttered scenes. </title> <type> Technical Report UU-CS-1998-12, </type> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <year> 1998. </year>
Reference-contexts: Hence, it does not say anything about what can be achieved in practice; perhaps realistic scenes have some special property that makes it possible to construct a BSP of linear size. Indeed, de Berg <ref> [5] </ref> showed that so-called uncluttered scenes|and it is claimed that in practical applications most scenes are uncluttered|admit a linear size BSP. (See Section 2 for a definition of "uncluttered".) fl Department of Computer Science, Utrecht University, P.O.Box 80.089, 3508 TB Utrecht, the Netherlands. <p> Hence, the models form a hierarchy as depicted in Figure 1. The relations between fatness and low density, and low density and unclutteredness, were already known <ref> [5, 18] </ref>. One of the contributions of our paper is that we prove that any uncluttered scene|and hence any low-density scene, or any scene consisting of fat objects|has small simple-cover complexity. Each of the models assigns one (or two) parameter (s) to a scene. <p> The density of S is defined to be the smallest for which S is a -low-density scene. We say that a scene has low density if its density is a small constant. 3 Clutteredness. This model was introduced by de Berg <ref> [5] </ref>. 1 It is defined as follows. Definition 2.3 Let S be a d-dimensional scene, and let &gt; 1 be a parameter. <p> Theorem 3.2 (i) Any d-dimensional -low-density scene has clutter factor at most d p (ii) For any parameters ; with &gt; 1 and &gt; 1, there is a 2-dimensional -cluttered scene that is not a -low-density scene. Proof. (i) This was proved by de Berg <ref> [5] </ref>. He observes that any cube intersecting an object without containing a bounding-box vertex of that object in its interior must be relatively small with respect to the diameter of the object. From this the result easily follows. (ii) Let ; be given. <p> We do not claim that the models we have studied in this paper are the best or most intuitive ones. Nevertheless, we believe that scenes in many areas will be uncluttered and have small simple-cover complexity. Solutions based on octree-like structures as described by de Berg <ref> [5] </ref> and Mitchell et al. [13] will perform well in that case. For many application domains, there may well be models that are more intuitive or more appropriate than these models. If this is the case, one would of course like to work with these models.
Reference: [6] <author> M. Bern, D. Eppstein, and J.R. Gilbert. </author> <title> Provably good mesh generation. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 48 </volume> <pages> 384-409, </pages> <year> 1994. </year>
Reference-contexts: Using P we can find a ffi-simple cover of size O (n) as follows: use the method of Bern et al. <ref> [6] </ref> to add to P some additional points such that the number of simplices of the Delaunay triangulation is O (jP j) = O (n), and use the Delaunay balls (the circumscribing balls of the simplices in the Delaunay triangulation) for the cover.
Reference: [7] <author> B. Chazelle and L. J. Guibas. Fractional cascading: I. </author> <title> A data structuring technique. </title> <journal> Algo-rithmica, </journal> <volume> 1 </volume> <pages> 133-162, </pages> <year> 1986. </year>
Reference-contexts: Step 1 can be done in O (n log n) time [11]. For Step 2 we store the vertices of the objects in a range tree, and the edges in a segment tree [16]. We apply fractional cascading <ref> [7] </ref> to these data structures, so that we can report the number of objects intersecting any square in O (log n + A) time, where A is the number of answers.
Reference: [8] <author> Z. Chen and J. A. Guevara. </author> <title> System selection of very important points (VIP) from digital terrain models for constructing triangular irregular networks. </title> <booktitle> In Proc. 8th Internat. Sympos. Comput.-Assist. Cartog. (Auto-Carto), </booktitle> <pages> pages 50-56, </pages> <year> 1988. </year>
Reference-contexts: More precisely, we have taken digital-elevation model (DEM) files giving the elevations of points in certain areas in the US. The data points are arranged in a grid. We selected the most important points using the so-called VIP method <ref> [8] </ref>, and computed the 2D Delaunay triangulation of the selected points, thus obtaining a TIN. We then computed the model parameters for the resulting set of 2D triangles, which indicate whether or not the models are realistic. 2 The models Below we define the models we study in this paper. <p> We used so-called DEM files, describing certain areas in the US. Such a DEM file specifies the elevation of a set of sample points in the area at hand; the sample points form a regular grid. Using the so-called VIP method <ref> [8] </ref> the n most important points were extracted for the following values of n: 100, 200, 500, 1000, 2000, and 5000. The test scenes were then generated by computing the Delaunay triangulation of the extracted sample points.
Reference: [9] <author> R. J. Fowler, M. S. Paterson, and S. L. Tanimoto. </author> <title> Optimal packing and covering in the plane are NP-complete. </title> <journal> Inform. Process. Lett., </journal> <volume> 12(3) </volume> <pages> 133-137, </pages> <year> 1981. </year>
Reference-contexts: We also do not have a proof that computing the ffi-simple-cover complexity is NP-complete, although the seemingly-simpler DISC-PACK problem|which consists of covering a set of n planar points by a given set of discs|is NP-hard <ref> [9] </ref>, and a restricted version, in which the discs are identical, is NP-complete [9]. <p> We also do not have a proof that computing the ffi-simple-cover complexity is NP-complete, although the seemingly-simpler DISC-PACK problem|which consists of covering a set of n planar points by a given set of discs|is NP-hard <ref> [9] </ref>, and a restricted version, in which the discs are identical, is NP-complete [9]. We leave the determination of the computational complexity as an open problem. 5 Experimental verification of the models: a case study Below we give some experimental results on the applicability of the models for one particular type of scenes: polyhedral terrains, as encountered frequently in GIS.
Reference: [10] <author> M. van Kreveld. </author> <title> On fat partitioning, fat covering, and the union size of polygons. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 9 </volume> <pages> 197-210, </pages> <year> 1998. </year>
Reference-contexts: Fatness. The first, and best known, model we consider is fatness. Intuitively, an object is called fat if it contains no long and skinny parts. There are many different definitions of fatness <ref> [1, 3, 12, 10] </ref>, which are all more or less equivalent|at least for convex objects. We shall use a definition similar to the one used in van der Stappen's thesis [18], where the motion planning problem for scenes consisting of fat objects is studied.
Reference: [11] <author> D. T. Lee and C. K. Wong. </author> <title> Voronoi diagrams in L 1 (L 1 ) metrics with 2-dimensional storage applications. </title> <journal> SIAM J. Comput., </journal> <volume> 9 </volume> <pages> 200-211, </pages> <year> 1980. </year>
Reference-contexts: Step 1 can be done in O (n log n) time <ref> [11] </ref>. For Step 2 we store the vertices of the objects in a range tree, and the edges in a segment tree [16].
Reference: [12] <author> J. Matousek, J. Pach, M. Sharir, S. Sifrony, and E. Welzl. </author> <title> Fat triangles determine linearly many holes. </title> <journal> SIAM J. Comput., </journal> <volume> 23 </volume> <pages> 154-169, </pages> <year> 1994. </year>
Reference-contexts: Fatness. The first, and best known, model we consider is fatness. Intuitively, an object is called fat if it contains no long and skinny parts. There are many different definitions of fatness <ref> [1, 3, 12, 10] </ref>, which are all more or less equivalent|at least for convex objects. We shall use a definition similar to the one used in van der Stappen's thesis [18], where the motion planning problem for scenes consisting of fat objects is studied.
Reference: [13] <author> J. S. B. Mitchell, D. M. Mount, and S. Suri. </author> <title> Query-sensitive ray shooting. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 7 </volume> <pages> 317-347, </pages> <year> 1997. </year>
Reference-contexts: It is believed that this is theoretically close to optimal. But octrees, for instance, have been observed to behave well in many practical situations. Apparently, ray-shooting queries are not as difficult in practice as they are in theory. For this reason, Mitchell et al. <ref> [13] </ref> developed a data structure for 2-dimensional objects based on quad trees, and they analyzed its performance in terms of the so-called simple-cover complexity. <p> Simple-cover complexity. The last model we consider is a variant of the simple-cover complexity as defined by Mitchell et al. <ref> [13] </ref>. Given a scene S, we call a ball ffi-simple if it intersects at most ffi objects in S. Definition 2.4 Let S be a d-dimensional scene, and let ffi &gt; 0 be a parameter. <p> For example, if we have an application domain where the objects are fat, then algorithms based on the octree-like data structure of Mitchell et al. <ref> [13] </ref> will be efficient. <p> Nevertheless, we believe that scenes in many areas will be uncluttered and have small simple-cover complexity. Solutions based on octree-like structures as described by de Berg [5] and Mitchell et al. <ref> [13] </ref> will perform well in that case. For many application domains, there may well be models that are more intuitive or more appropriate than these models. If this is the case, one would of course like to work with these models.
Reference: [14] <author> M. H. Overmars and A. F. van der Stappen. </author> <title> Range searching and point location among fat objects. </title> <journal> J. Algorithms, </journal> <volume> 21 </volume> <pages> 629-656, </pages> <year> 1996. </year>
Reference-contexts: Computing model parameters is also useful for other reasons. Some algorithms may need to know the value of the parameter in order to work correctly. (The range searching data structure of Overmars and van der Stappen <ref> [14] </ref> is an example.) In addition, the ability to compute the model parameters for a given scene can be used to establish which model best fits the scene, allowing us to choose "the right algorithm for the job". <p> To illustrate the impact of outliers on the performance of algorithms, we consider the range searching algorithm by Overmars and van der Stappen <ref> [14] </ref>. The planar version of this algorithm has a quadratic dependence on the fatness.
Reference: [15] <author> M. S. Paterson and F. F. Yao. </author> <title> Efficient binary space partitions for hidden-surface removal and solid modeling. </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 </volume> <pages> 485-503, </pages> <year> 1990. </year>
Reference-contexts: Thus they become needlessly complicated and slow. Consider as an example the construction of a binary space partition (BSP) tree for a set of disjoint triangles in 3-space. Paterson and Yao <ref> [15] </ref> showed that it is always possible to construct a BSP of size O (n 2 ). Moreover, there are sets of triangles for which any BSP must have quadratic size, so the O (n 2 ) upper bound is the best we can hope for in the worst case.
Reference: [16] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Step 1 can be done in O (n log n) time [11]. For Step 2 we store the vertices of the objects in a range tree, and the edges in a segment tree <ref> [16] </ref>. We apply fractional cascading [7] to these data structures, so that we can report the number of objects intersecting any square in O (log n + A) time, where A is the number of answers.
Reference: [17] <author> O. Schwarzkopf and J. Vleugels. </author> <title> Range searching in low-density environments. </title> <journal> Inform. Process. Lett., </journal> <volume> 60 </volume> <pages> 121-127, </pages> <year> 1996. </year>
Reference-contexts: In addition, the fatness of a scene of objects is defined as the maximal fi for which every individual object is fi-fat. Low density. The model of low density was introduced by van der Stappen [18] (see also [19]) and refined by Schwarzkopf and Vleugels <ref> [17] </ref>. It forbids any ball B to be intersected by many objects whose minimal-enclosing-ball radius is at least as large as the radius of B. <p> i1 + 1, otherwise set i := i1 . 4. return n The range searching query we have to perform in Step 3 to find the objects in S i1 intersecting M i (2 i ) is done using a generalized version of the data structure of Schwarzkopf and Vleugels <ref> [17] </ref>, as described by Vleugels [20]. The preprocessing time of the data structure for a -low-density scene is O (n log 3 2 n), and the time to perform a query is O (log 2 n + ).
Reference: [18] <author> A. F. van der Stappen. </author> <title> Motion Planning amidst Fat Obstacles. </title> <type> Ph.D. thesis, </type> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <address> Utrecht, the Netherlands, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Hence, the models form a hierarchy as depicted in Figure 1. The relations between fatness and low density, and low density and unclutteredness, were already known <ref> [5, 18] </ref>. One of the contributions of our paper is that we prove that any uncluttered scene|and hence any low-density scene, or any scene consisting of fat objects|has small simple-cover complexity. Each of the models assigns one (or two) parameter (s) to a scene. <p> There are many different definitions of fatness [1, 3, 12, 10], which are all more or less equivalent|at least for convex objects. We shall use a definition similar to the one used in van der Stappen's thesis <ref> [18] </ref>, where the motion planning problem for scenes consisting of fat objects is studied. Definition 2.1 Let P E d be an object and let fi be a constant with 0 6 fi 6 1. <p> In addition, the fatness of a scene of objects is defined as the maximal fi for which every individual object is fi-fat. Low density. The model of low density was introduced by van der Stappen <ref> [18] </ref> (see also [19]) and refined by Schwarzkopf and Vleugels [17]. It forbids any ball B to be intersected by many objects whose minimal-enclosing-ball radius is at least as large as the radius of B. <p> Proof. (i) This was proved by van der Stappen <ref> [18] </ref>. His proof roughly works as follows. For any region R, he defines a region R 0 that results from growing R by an amount that is proportional to the size of R.
Reference: [19] <author> A. F. van der Stappen, M. H. Overmars, M. de Berg, J. Vleugels. </author> <title> Motion planning in environments with low obstacle density. </title> <type> Technical Report UU-CS-1997-33, </type> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <year> 1997, </year> <note> to appear in Discrete Comput. Geom.. </note>
Reference-contexts: In addition, the fatness of a scene of objects is defined as the maximal fi for which every individual object is fi-fat. Low density. The model of low density was introduced by van der Stappen [18] (see also <ref> [19] </ref>) and refined by Schwarzkopf and Vleugels [17]. It forbids any ball B to be intersected by many objects whose minimal-enclosing-ball radius is at least as large as the radius of B.
Reference: [20] <author> J. Vleugels. </author> <title> On Fatness and Fitness|Realistic Input Models for Geometric Algorithms. </title> <type> Ph.D. thesis, </type> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <address> Utrecht, the Netherlands, </address> <month> March </month> <year> 1997. </year> <month> 13 </month>
Reference-contexts: Fatness. The fatness of a convex object P can easily be computed: it is vol (P)=(! d diam (P) 2 ), where diam (P) denotes the diameter of P. Computing the fatness of non-convex objects is much more difficult|see Vleugels's thesis <ref> [20] </ref> for some results. Since in our setting the individual objects in a scene have constant complexity, we do not go into the computation of the fatness here. Low density. <p> i := i1 . 4. return n The range searching query we have to perform in Step 3 to find the objects in S i1 intersecting M i (2 i ) is done using a generalized version of the data structure of Schwarzkopf and Vleugels [17], as described by Vleugels <ref> [20] </ref>. The preprocessing time of the data structure for a -low-density scene is O (n log 3 2 n), and the time to perform a query is O (log 2 n + ).
References-found: 20

