URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1993/1993-40.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Basic Process Algebra with Iteration: Completeness of its Equational Axioms  
Author: Willem Jan Fokkink Hans Zantema 
Affiliation: CWI  Utrecht University  
Abstract: Bergstra, Bethke & Ponse [BBP93] proposed an axiomatisation for Basic Process Algebra extended with iteration. In this paper, we prove that this axiomatisation is complete with respect to bisimulation equivalence. To obtain this result, we will set up a term rewriting system, based on the axioms, and prove that this term rewriting system is terminating, and that bisimilar normal forms are syntactically equal.
Abstract-found: 1
Intro-found: 1
Reference: [BBK93] <author> J.C.M. Baeten, J.A. Bergstra, and J.W. Klop. </author> <title> Decidability of bisimulation equivalence for processes generating context-free languages. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 40(3) </volume> <pages> 653-682, </pages> <year> 1993. </year>
Reference-contexts: Hence, in a reduction to normal form it does not increase either. 2 4.2 Some lemmas We deduce three lemmas that will be used in the proof of the main theorem. The first lemma is typical for normed processes <ref> [BBK93] </ref>, i.e. for processes that are able to terminate in finitely many transitions. This lemma originates from [Cau90]. Lemma 4.3 If pr $ qr, then p $ q. Proof.
Reference: [BBP93] <author> J.A. Bergstra, I. Bethke, and A. Ponse. </author> <title> Process algebra with iteration. </title> <type> Report P9314, </type> <institution> Programming Research Group, University of Amsterdam, </institution> <year> 1993. </year>
Reference-contexts: He also noted the correspondence of the constructs E _ F and EF with the conventions of sum and product respectively in algebra. Milner [Mil84] studied a unary interpretation of Kleene's star, and raised the question whether there exists a complete axiomatisation for this operator. Bergstra, Bethke & Ponse <ref> [BBP93] </ref> incorporated the binary Kleene star into Basic Process Algebra (BPA), and called it single exit iteration (SEI). <p> Box 94079, 1090 GB Amsterdam, The Netherlands, e-mail: wan@cwi.nl y P.O. Box 80089, 3508 TB Utrecht, The Netherlands, e-mail: hansz@cs.ruu.nl 1 2 2 BPA WITH SINGLE EXIT ITERATION 2 BPA with Single Exit Iteration This section introduces the basic notions. For more detailed information we refer to <ref> [BBP93] </ref>. In BPA fl , we assume an alphabet A of atomic actions, together with three binary operators: alternative composition +, sequential composition , and single exit iteration fl . Table 1 presents an operational semantics for BPA fl in Plotkin style [Plo81], taken from [BBP93]. a ! x ! x <p> detailed information we refer to <ref> [BBP93] </ref>. In BPA fl , we assume an alphabet A of atomic actions, together with three binary operators: alternative composition +, sequential composition , and single exit iteration fl . Table 1 presents an operational semantics for BPA fl in Plotkin style [Plo81], taken from [BBP93]. a ! x ! x 0 a a x ! x + y ! y + x ! x ! x 0 a x ! x y ! y a x fl y ! x 0 (x fl y) a p a y ! y 0 a y ! x <p> Table 2 contains an axiom system for BPA fl , which originates from <ref> [BBP93] </ref>. It consists of the axioms A1-5 for BPA together with three axioms SEI1-3 for iteration. In the sequel, p = q will mean that this equality can be derived from axioms A1-5 and SEI1-3.
Reference: [BV93] <author> J.C.M. Baeten and C. Verhoef. </author> <title> A congruence theorem for structured operational semantics with predicates. </title> <editor> In E. Best, editor, </editor> <booktitle> Proceedings CONCUR 93, Hildesheim, </booktitle> <volume> LNCS 715, </volume> <pages> pages 477-492. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> 16 REFERENCES </note>
Reference-contexts: y)z = xz + yz SEI1 x (x fl y) + y = x fl y SEI3 x fl (y ((x + y) fl z) + z) = (x + y) fl z Table 2: Axioms for BPA fl Since the action rules in Table 1 are in path format <ref> [BV93] </ref>, it follows that bisimulation equivalence is a congruence with respect to all the operators, i.e. if p $ p 0 and q $ q 0 , then p + q $ p 0 + q 0 and pq $ p 0 q 0 and p fl q $ p 0
Reference: [Cau90] <editor> D. Caucal. Graphes canoniques et graphes algebriques. </editor> <booktitle> Theoretical Informatics and Applications, </booktitle> <volume> 24(4) </volume> <pages> 339-352, </pages> <year> 1990. </year>
Reference-contexts: The first lemma is typical for normed processes [BBK93], i.e. for processes that are able to terminate in finitely many transitions. This lemma originates from <ref> [Cau90] </ref>. Lemma 4.3 If pr $ qr, then p $ q. Proof. A transition p 0 r a ! p 00 r in pr cannot be mimicked by a transition q 0 r a qr, because jp 00 rj &gt; jrj.
Reference: [Kle56] <author> S.C. Kleene. </author> <title> Representation of events in nerve nets and finite automata. </title> <booktitle> In Automata Studies, </booktitle> <pages> pages 3-41. </pages> <publisher> Princeton University Press, </publisher> <year> 1956. </year>
Reference-contexts: 1 Introduction Kleene <ref> [Kle56] </ref> defined a binary operator fl in the context of finite automata, where E fl F denotes the iterate of E and F . He formulated some algebraic laws for this operator, notably, in his notation, E fl F = F _ E (E fl F ).
Reference: [Mil84] <author> R. Milner. </author> <title> A complete inference system for a class of regular behaviours. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28 </volume> <pages> 439-466, </pages> <year> 1984. </year>
Reference-contexts: He formulated some algebraic laws for this operator, notably, in his notation, E fl F = F _ E (E fl F ). He also noted the correspondence of the constructs E _ F and EF with the conventions of sum and product respectively in algebra. Milner <ref> [Mil84] </ref> studied a unary interpretation of Kleene's star, and raised the question whether there exists a complete axiomatisation for this operator. Bergstra, Bethke & Ponse [BBP93] incorporated the binary Kleene star into Basic Process Algebra (BPA), and called it single exit iteration (SEI).
Reference: [Par81] <author> D.M.R. Park. </author> <title> Concurrency and automata on infinite sequences. </title> <editor> In P. Deussen, editor, </editor> <booktitle> 5 th GI Conference, </booktitle> <volume> LNCS 104, </volume> <pages> pages 167-183. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: As bracket convention, and fl will bind stronger than +. Process terms are considered modulo (strong) bisimulation equivalence <ref> [Par81] </ref>. Intuitively, two process terms are bisimilar if they have the same branching structure. Definition 2.1 Two processes p 0 and q 0 are called bisimilar, denoted by p 0 $ q 0 , if there exists a symmetric relation R between processes such that: 1.
Reference: [Plo81] <author> G.D. Plotkin. </author> <title> A structural approach to operational semantics. </title> <type> Report DAIMI FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1981. </year>
Reference-contexts: For more detailed information we refer to [BBP93]. In BPA fl , we assume an alphabet A of atomic actions, together with three binary operators: alternative composition +, sequential composition , and single exit iteration fl . Table 1 presents an operational semantics for BPA fl in Plotkin style <ref> [Plo81] </ref>, taken from [BBP93]. a ! x ! x 0 a a x ! x + y ! y + x ! x ! x 0 a x ! x y ! y a x fl y ! x 0 (x fl y) a p a y ! y 0 a
Reference: [Tro93] <author> D.R. Troger. </author> <title> Step bisimulation is pomset equivalence on a parallel language without explicit internal choice. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 3 </volume> <pages> 25-62, </pages> <year> 1993. </year>
Reference-contexts: They suggested three axioms SEI1-3 for BPA fl , where axiom SEI1 is the one from Kleene, while their most advanced axiom SEI3 x fl (y ((x + y) fl z) + z) = (x + y) fl z originates from <ref> [Tro93] </ref>, where this equation was proposed in the setting of a specification language with a construct y while x, equivalent to x fl y.
Reference: [Zan93] <author> H. Zantema. </author> <title> Termination of term rewriting by semantic labelling. </title> <type> Report RUU-CS-93-24, </type> <institution> Department of Computer Science, University of Utrecht, </institution> <year> 1993. </year>
Reference-contexts: The axioms SEI1-3 are translated to this new setting, and we will define a term rewriting system based on the axioms of BPA . Deducing termination of this TRS is a key step in this paper; we will apply the strategy of semantic labelling from <ref> [Zan93] </ref>. Finally, we will show that bisimilar normal forms are syntactically equal modulo commutativity and associativity of the +. Acknowledgements: Jan Bergstra is thanked for his enthusiastic support, and Jos van Wamel for many stimulating discussions. fl P.O. Box 94079, 1090 GB Amsterdam, The Netherlands, e-mail: wan@cwi.nl y P.O. <p> A powerful technique for proving termination of TRSs that incorporate such rules is the one of semantic labelling <ref> [Zan93] </ref>, where operation symbols occurring in the rewrite rules are supplied with labels, depending on the semantics of their arguments. Then two TRS's are involved: the original system and the labelled system. The main theorem of [Zan93] states that the labelled system terminates if and only if the original system terminates. <p> proving termination of TRSs that incorporate such rules is the one of semantic labelling <ref> [Zan93] </ref>, where operation symbols occurring in the rewrite rules are supplied with labels, depending on the semantics of their arguments. Then two TRS's are involved: the original system and the labelled system. The main theorem of [Zan93] states that the labelled system terminates if and only if the original system terminates. The theory of semantic labelling is developed for unconditional TRS's. Though it will easily generalise to conditional systems, we do not need this. <p> Let R be the unconditional system obtained by simply removing the conditions of the last two rules. We shall prove that R is terminating, from which termination of the conditional system of Table 5 easily follows. The method of <ref> [Zan93] </ref> starts from giving a model for the TRS. This is an algebra over the signature with the property that for each rewrite rule and each choice of the variables the interpretation of the left-hand side is equal to the interpretation of the right-hand side. <p> And it is easy to verify that Rules 9,10 of R, which are not sound because they lack their original conditions, preserve norm too. If we define in the notation of <ref> [Zan93] </ref> S and S both to be the positive natural numbers, and define (x; y) = (x; y) = y then we obtain the infinite TRS presented in Table 6, where i ranges over the positive natural numbers. <p> Here sequential composition labelled by i is denoted by hii, and proper iteration labelled by i is denoted by [i]. Now the claim is that termination of R follows from termination of R. A sketch of the proof as given in <ref> [Zan93] </ref> can be given as follows. Assume that R admits an infinite reduction. By replacing all variables in this reduction by any constant a, we obtain an infinite ground reduction of R.
References-found: 10

