URL: http://www.cs.utexas.edu/users/cpg/pub/95-FMSD.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/cpg/pub/index.html
Root-URL: http://www.cs.utexas.edu
Title: Formal Methods in System Design, A Formal Approach to Reactive Systems Software: A Telecommunications Application
Author: LALITA JATEGAONKAR JAGADEESAN CARLOS PUCHOL JAMES E. VON OLNHAUSEN 
Keyword: Reactive systems, Esterel, synchronous programming, formal methods, software verification, telecommunications  
Address: IL 60566-7013, USA  Austin, TX 78712-1188, USA  IL 60566-7045, USA  
Affiliation: Software Production Research Department, AT&T Bell Laboratories, Naperville,  Department of Computer Sciences, The University of Texas at Austin,  Global Maintenance Operations, Platform Department, AT&T Bell Laboratories, Naperville,  
Note: cfl 1996 Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Pubnum: 8,  8, No.  
Email: lalita@research.att.com  cpg@cs.utexas.edu  jevon@uscbu.att.com  
Date: 123-151 (1996)  2, March 1996.  
Abstract: Esterel is a formally-defined language designed for programming reactive systems; namely, those that maintain a permanent interaction with their environment. The AT&T 5ESS R fl telephone switching system is an example of a reactive system. We describe an implementation in Esterel of one feature of a 5ESS switch; this implementation has been tested in the 5ESS switch simulator. Furthermore, it has been formally verified that this implementation satisfies some safety properties stated by 5ESS software development. Our experience indicates that Esterel is suitable for programming industrial-strength reactive systems, and affords significant advantages in software development over more traditional programming languages used in industrial settings. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> AGEL workshop manual version 3.0, </institution> <year> 1989. </year> <title> Produced by ILOG, </title> <address> Mountain View, CA. </address>
Reference-contexts: The relation statement specifies that the input signals START and STOP will not occur simultaneously. This information can be used by the compiler to reduce the state space of the final state machine, which is illustrated in Figure 3. This picture was generated using the AGEL <ref> [1] </ref> development environment for Esterel. Esterel can also be regarded as a way to program finite state machines: in practice, it is significantly more convenient than programming state machines directly. It is well-known 128 JAGADEESAN ET. <p> Most data handling and interfacing with an embedded system typically needs to be done by writing a function in a host language, such as C; these interface functions are called by the state machine. Furthermore, in the current AGEL <ref> [1] </ref> development environment for Esterel, the driver, the output functions, and the interface functions currently must be written in C, and the state machine, the reaction function, and the input functions generated by the Esterel compiler are coded in C. <p> We note that values of arbitrary types can be used in Esterel programs; only the type names must be declared in Esterel programs, while the type definitions must appear in the accompanying C code. 132 JAGADEESAN ET. AL. The AGEL <ref> [1] </ref> development environment for Esterel provides high-quality tools, including an editor, compiler, simulator, debugger, and verifier. The verifier provides a graphical representation of the generated state machine, and computes reduced state machines based on bisimulation equivalence [18]. <p> In our experience, this type of error involving subtle interactions between components would be quite difficult to detect through testing. We then generated C code from our Esterel implementation using the Esterel compiler <ref> [1] </ref>. We inserted this generated code into the 5ESS switch simulator, which contains the existing 5ESS switch software. Our code replaced part of the current CGA code in this testing environment and had to interface properly with the rest of the 5ESS 140 JAGADEESAN ET. AL. software. <p> We found that Esterel and its commercially-available development environment <ref> [1] </ref> pass this test. Our preliminary experience thus far indicates that the generated C code is efficient. * In order to interface with the rest of the switch, programs must be able to use functions provided by legacy software. <p> Using the Esterel compiler <ref> [1] </ref>, this acceptor program is then composed and compiled in parallel with the given Esterel program (by means of the Esterel parallel operator). The resulting finite state machine is analyzed for the existence of a state where VIOLATED p is emitted a simple linear search. <p> Our algorithm and tools would terminate successfully. Verification in practice One of the authors, who is a 5ESS software developer for CGA, provided a list of safety properties that our Esterel version should satisfy; we have verified these properties using our tools together with the Esterel development environment <ref> [1] </ref>. For example, we have verified that our Esterel version of the CGA Collection Software never waits for longer than a bounded amount of time for a processor to respond to a request, and that two summary requests can never be processed simultaneously. <p> Another aid in prototyping is that it is sufficient first to write only the Esterel portion of the system, animate and test it using the simulator provided by the AGEL <ref> [1] </ref> environment, and verify it using the technique described earlier. Any bugs that are found can be fixed and the process repeated all before any of the C interface functions, output functions, and driver need be written.
Reference: 2. <author> M.A. Ardis, J.A. Chaves, L.J. Jagadeesan, P. Mataga, C. Puchol, M.G. Staskauskas, and J.E. Von Olnhausen. </author> <title> A framework for evaluating specification methods for reactive systems. </title> <booktitle> In Proceedings of the 17th International Conference on Software Engineering, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: In addition to our Esterel version of a piece of the CGA software, we have written an Esterel version of another switch feature <ref> [2] </ref>, and have found the same benefits. We are currently extending that version with further functionality, and are planning to test it in the switch environments. Acknowledgments We are grateful to David Weiss and Mary Zajac for many helpful discussions and valuable comments on previous versions of this paper.
Reference: 3. <author> G. Berry and G. Gonthier. </author> <title> Incremental development of an HDLC entity in esterel. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 22 </volume> <pages> 35-49, </pages> <year> 1991. </year>
Reference-contexts: Our work was originally inspired by the work of Murakami and Sethi [19], in which the terminal call processing protocol of a data switch was programmed in Esterel. Other case studies of the use of Esterel for programming reactive systems include <ref> [3] </ref>, [7], [21]. This paper is organized as follows. An introduction to Esterel is given in Section 2. Section 3 provides an overview of typical Carrier Group Alarms (CGA) software, and Section 4 describes our version of this CGA software in Esterel.
Reference: 4. <author> G. Berry and G. Gonthier. </author> <title> The esterel synchronous programming language: design, semantics, </title> <booktitle> implementation. Science of Computer Programming, </booktitle> <volume> 19 </volume> <pages> 87-152, </pages> <year> 1992. </year>
Reference-contexts: AL. can themselves be regarded as reactive systems that communicate with one another and with the outside world. Most of the software in the switch several million lines of code is written in the C programming language. Esterel <ref> [4] </ref> is a formally-defined, high-level language designed especially for programming reactive systems, and hence is a potential next generation language for programming the control structure of systems such as the 5ESS switch. <p> Section 7 describes the significant advantages provided by Esterel in industrial software development. Our conclusions appear in Section 8. 2. The Esterel Programming Language Esterel <ref> [4] </ref> is a language, with a precisely defined mathematical semantics, for programming the class of input-driven deterministic reactive systems those that wait for a set of possibly simultaneous inputs, react to the inputs by computing and producing outputs, and then quiesce, waiting for new inputs.
Reference: 5. <author> G. Berry, S. Ramesh, and R. K. Shyamasundar. </author> <title> Communicating reactive processes. </title> <booktitle> In ACM SIGPLAN-SIGACT Symposium of Programming Languages, </booktitle> <pages> pages 85-98, </pages> <year> 1993. </year>
Reference-contexts: A more natural solution inside Esterel itself is to treat the original C functions, containing loops, as asynchronous parallel components that take an unbounded amount of time. This facility is being incorporated in future versions of Esterel <ref> [5] </ref>, but is not present in the current commercially-available version. Another complication that arose in writing our implementation is that since output signals are considered simultaneous, their corresponding output functions are called in arbitrary order, at the end of the reaction.
Reference: 6. <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite state concurrent systems using temporal logic specifications. </title> <journal> ACM TOPLAS, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <year> 1986. </year>
Reference-contexts: Otherwise, the algorithm returns a counterexample namely, a computation of the Esterel program which violates the given safety property p. In finite state machines generated by the Esterel compiler, all states are reachable by construction; hence the Esterel compiler in effect performs model checking <ref> [6] </ref>. Our technique is described in more detail in [13].
Reference: 7. <author> E. Coste-Maniere. Utilisation d'esterel dans un contexte ansynchrone: </author> <title> une application robotique. </title> <type> Technical report, </type> <institution> INRIA, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: Our work was originally inspired by the work of Murakami and Sethi [19], in which the terminal call processing protocol of a data switch was programmed in Esterel. Other case studies of the use of Esterel for programming reactive systems include [3], <ref> [7] </ref>, [21]. This paper is organized as follows. An introduction to Esterel is given in Section 2. Section 3 provides an overview of typical Carrier Group Alarms (CGA) software, and Section 4 describes our version of this CGA software in Esterel.
Reference: 8. <author> P. Le Guernic, M. Le Borgne, T. Gauthier, and C. Le Maire. </author> <title> Programming real-time applications with signal. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 79(9) </volume> <pages> 1321-1336, </pages> <year> 1991. </year>
Reference-contexts: Esterel [4] is a formally-defined, high-level language designed especially for programming reactive systems, and hence is a potential next generation language for programming the control structure of systems such as the 5ESS switch. Esterel is in the family of synchronous languages, which include Lustre [10], Signal <ref> [8] </ref>, Ar-gos [16], Statecharts [11], Modechart [14], and TDCC [20]. These languages are based on the synchrony hypothesis: namely, that every reaction of a system to a set of inputs is theoretically instantaneous.
Reference: 9. <author> N. Halbwachs. </author> <title> Synchronous Programming of Reactive Systems. </title> <publisher> Kluwer Academic, </publisher> <year> 1993. </year>
Reference-contexts: added emit BEEP; % await SECOND; % emit BEEEEP % end; % await SECOND % end loop || every immediate DOOR_OPEN do do sustain LIGHT watching [not DOOR_OPEN] end every end module that conceptually small changes to a state machine can radically change the structure of the state machine [19], <ref> [9] </ref>. In well-designed Esterel programs, conceptually small changes often consist of simple changes to individual components, and the compiler takes care of making the resulting often radical changes to the much more complex underlying state machine.
Reference: 10. <author> N. Halbwachs, P. Caspi, P. Raymond, and D. Pilaud. </author> <title> The synchronous data-flow programming language lustre. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 79(9) </volume> <pages> 1305-1320, </pages> <year> 1991. </year>
Reference-contexts: Esterel [4] is a formally-defined, high-level language designed especially for programming reactive systems, and hence is a potential next generation language for programming the control structure of systems such as the 5ESS switch. Esterel is in the family of synchronous languages, which include Lustre <ref> [10] </ref>, Signal [8], Ar-gos [16], Statecharts [11], Modechart [14], and TDCC [20]. These languages are based on the synchrony hypothesis: namely, that every reaction of a system to a set of inputs is theoretically instantaneous.
Reference: 11. <author> D. Harel. Statecharts: </author> <title> A visual approach to complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8:231 - 274, </volume> <year> 1987. </year>
Reference-contexts: Esterel is in the family of synchronous languages, which include Lustre [10], Signal [8], Ar-gos [16], Statecharts <ref> [11] </ref>, Modechart [14], and TDCC [20]. These languages are based on the synchrony hypothesis: namely, that every reaction of a system to a set of inputs is theoretically instantaneous. In practice, this amounts to requiring that the environment of a reactive system is invariant during every reaction.
References-found: 11

