URL: ftp://ftp.cs.unc.edu/pub/users/geom/papers/INTERSECT/SM97.ps.gz
Refering-URL: http://www.cs.unc.edu/~keyser/research.html
Root-URL: http://www.cs.unc.edu
Email: fkeyser,krishnas,manochag@cs.unc.edu  
Title: Efficient and Accurate B-rep Generation of Low Degree Sculptured Solids using Exact Arithmetic  
Author: John Keyser Shankar Krishnan Dinesh Manocha 
Web: http://www.cs.unc.edu/~geom/geom.html  
Address: Chapel Hill, NC 27599 USA  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: We present efficient representations and algorithms for exact boundary computation on low degree sculptured CSG solids using exact arithmetic. Most of the previous work using exact arithmetic has been restricted to polyhedral models. In this paper, we generalize it to higher order objects, whose boundaries are composed of rational parametric surfaces. The use of exact arithmetic and representation guarantees that a geometric algorithm is numerically accurate and is likely to be required for perturbation techniques which handle degeneracies. We present efficient algorithms for computing the intersection curves of trimmed parametric surfaces, decomposing them into multiple components for efficient point location queries inside the trimmed regions, and computing the boundary of the resulting solid using topological information and component classification tests. We also employ a number of previously developed algorithms like algebraic curve classification, multivariate Sturm sequences, and multivariate resultants. We have implemented key parts of these algorithms and preliminary implementations indicate the performance of our algorithm to be about one order of magnitude slower than similar algorithms using IEEE floating-point arithmetic. 
Abstract-found: 1
Intro-found: 1
Reference: [AF88] <author> S. Arnborg and H. Feng. </author> <title> Algebraic decomposition of regular curves. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 5 </volume> <pages> 131-140, </pages> <year> 1988. </year>
Reference-contexts: In practice, it may have multiple real components. Topological resolution involves identifying critical points like turning points and singular-ities and establishing a unique connectivity between them. A number of efficient (poly-log time) algorithms have been developed for special kinds of algebraic curves. We use the algorithm by <ref> [AF88] </ref> for regular curves. The algorithm initially computes all the turning points of the curve. This is achieved in our case by taking partial derivatives and solving for common roots with the original curve inside a rational rectangle. <p> Thus the bit complexity of the coefficients of the univariate polynomial is roughly 8 times the original bit complexity in the worst case. Topological resolution of intersection curves: The algorithm described <ref> [AF88] </ref> computes the sign invariant decomposition of an algebraic curve in a finite domain. The time complexity is given by the following result: Theorem 2 [AF88] Given a bivariate polynomial of total degree n and coefficient size d in E 2 , it is possible to obtain a sign invariant decomposition <p> Topological resolution of intersection curves: The algorithm described <ref> [AF88] </ref> computes the sign invariant decomposition of an algebraic curve in a finite domain. The time complexity is given by the following result: Theorem 2 [AF88] Given a bivariate polynomial of total degree n and coefficient size d in E 2 , it is possible to obtain a sign invariant decomposition of the curve in time O (n 12 (d + log n) 2 log n). 5.2 Improving performance of exact arithmetic As exhibited by the
Reference: [BMP94] <author> M. Benouamer, D. Michelucci, and B. Peroche. </author> <title> Error-free boundary evaluation based on a lazy rational arithmetic: a detailed implementation. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 26(6), </volume> <year> 1994. </year>
Reference-contexts: If this problem is not properly addressed, the resulting algorithm becomes un reliable. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra <ref> [SI89, For95, BMP94, Hof89] </ref>. These algorithms use a fixed upper bound on the bit-length of arithmetic required to evaluate geometric predicates. In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation [For95].
Reference: [Bra75] <author> I. </author> <title> Braid. The synthesis of solid bounded by many faces. </title> <journal> Comm. ACM, </journal> <volume> 18 </volume> <pages> 209-216, </pages> <year> 1975. </year>
Reference-contexts: Sloan Foundation Fellowship, ARO Contract DAAH04-96-1-0257, NSF Grant CCR-9319957, NSF Grant CCR-9625217, ONR Contract N00014-94-1-0738, ARPA Contract DABT63-93-C-0048 and NSF/ARPA Center for Computer Graphics and Scientific Visualization ing solids <ref> [Bra75, RV85, Hof89, Man88] </ref>. CSG implicitly represents a solid as an algebraic expression, and B-rep explicitly stores an object as a set of surfaces. Both these representations have different inherent strengths and weaknesses, and for most applications both are desired.
Reference: [Can88] <author> J.F. Canny. </author> <title> The Complexity of Robot Motion Planning. ACM Doctoral Dissertation Award. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: Techniques using bit-length estimates may, in the worst case, require bit-lengths which are exponential with respect to the degree of the algebraic functions <ref> [Can88, Yu92] </ref>. Moreover, many representations and predicates that are well-understood in the linear domain become rather hard in the curved domain. Overall, no good solutions are known for efficient and robust B-rep computation on curved solids.
Reference: [CB89] <author> M. S. Casale and J. E. Bobrow. </author> <title> A set operation algorithm for sculptured solids modeled with trimmed patches. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 6 </volume> <pages> 235-247, </pages> <year> 1989. </year>
Reference-contexts: This is a wide family of objects and can exactly represent quadrics, tori and free-form solids. The first systematic study of CSG to B-rep conversion appeared in [RV85] and nowadays the algorithms for conversion are relatively well understood <ref> [Hof89, Man88, CB89, Sar83, KM96] </ref>. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [Hof96, Hea95, For96].
Reference: [Dav85] <author> J. H. Davenport. </author> <title> Computer algebra for cylindrical algebraic decomposition. </title> <type> Technical Report TRITA-NA-8511, NADA, </type> <institution> KTH, Stock-holm, </institution> <year> 1985. </year>
Reference-contexts: We now give the theoretical worst-case complexity of the root isolation algorithm. 5.1 Worst case analysis Root isolation: Most of the results involving real root isolation are based on Sturm sequences, and we quote a result from Davenport <ref> [Dav85] </ref> for the worst-case time complexity of root isolation algorithm for univariate polynomials. Theorem 1 [Dav85] The running time of the root isolation algorithm based on Sturm sequences of univariate polynomials is bounded by O (n 6 (log n + log a 2 i ) 3 ), where n is the <p> the theoretical worst-case complexity of the root isolation algorithm. 5.1 Worst case analysis Root isolation: Most of the results involving real root isolation are based on Sturm sequences, and we quote a result from Davenport <ref> [Dav85] </ref> for the worst-case time complexity of root isolation algorithm for univariate polynomials. Theorem 1 [Dav85] The running time of the root isolation algorithm based on Sturm sequences of univariate polynomials is bounded by O (n 6 (log n + log a 2 i ) 3 ), where n is the degree of the polynomial and a i are its coefficients.
Reference: [Dix08] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: The resultant is expressed as a ratio of two determinants. However, a single determinant formulation exists for n = 2 and 3 <ref> [Sal85, Dix08] </ref>. For n = 3, however, [Dix08] gives the resultant only if the three equations have the same degree. In our application, it is sufficient to compute resultants for the cases when n = 2 and 3. <p> The resultant is expressed as a ratio of two determinants. However, a single determinant formulation exists for n = 2 and 3 [Sal85, Dix08]. For n = 3, however, <ref> [Dix08] </ref> gives the resultant only if the three equations have the same degree. In our application, it is sufficient to compute resultants for the cases when n = 2 and 3. <p> We use Dixon's resultant <ref> [Dix08] </ref> to compute the implicit form as described in [Sed83]. Resultant computation: We use an algorithm based on multivariate interpolation [MC93] to compute the resultant of a set of polynomials efficiently. The main bottleneck in most resultant algorithms is the symbolic expansion of determinants.
Reference: [FBZ93] <author> S. Fang, B. Bruderlin, and X. Zhu. </author> <title> Robustness in solid modeling: a tolerance-based intuitionistic approach. </title> <booktitle> Computer-Aided Design, </booktitle> <address> 25(9):567--576, </address> <year> 1993. </year>
Reference-contexts: To circumvent these problems, combinations of symbolic reasoning [HHK89] and adaptive tolerances [Seg90] have been proposed. Other algorithms include those based on redundancy elimination <ref> [FBZ93] </ref>. B-rep computation algorithms involve accurate evaluation of the sign of arithmetic expressions, which can present problems for floating-point arithmetic when the value of the expression is close to zero. If this problem is not properly addressed, the resulting algorithm becomes un reliable.
Reference: [For95] <author> S. Fortune. </author> <title> Polyhedral modeling with exact arithmetic. </title> <booktitle> Proceedings of ACM Solid Modeling, </booktitle> <pages> pages 225-234, </pages> <year> 1995. </year>
Reference-contexts: If this problem is not properly addressed, the resulting algorithm becomes un reliable. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra <ref> [SI89, For95, BMP94, Hof89] </ref>. These algorithms use a fixed upper bound on the bit-length of arithmetic required to evaluate geometric predicates. In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation [For95]. <p> These algorithms use a fixed upper bound on the bit-length of arithmetic required to evaluate geometric predicates. In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation <ref> [For95] </ref>. Besides reliable computation, exact arithmetic allows the use of symbolic perturbation to handle degeneracies [Yap90]. The perturbation scheme greatly simplifies the implementation of the solid modeler. There is relatively little work on robust or accurate B-rep computation algorithms for curved primitives. <p> Degeneracies in the polyhedral case can generally be classified into the category of four planes meeting at a point. It has been shown <ref> [For95] </ref> that a simple perturbation scheme applied to a single basic geometric predicate can eliminate these degeneracies.
Reference: [For96] <author> S. Fortune. </author> <title> Robustness issues in geometric algorithms. </title> <editor> In M.C. Lin and D. Manocha, editors, </editor> <booktitle> Applied Computational Geometry, </booktitle> <pages> pages 9-14. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling <ref> [Hof96, Hea95, For96] </ref>. It is important that the computed B-rep be accurate, or at least topologically consistent, and this can be jeopardized by even small amounts of error in the representation of the model or in finite-precision computations (e.g. round-off errors).
Reference: [Hea95] <author> M. Higashi and et al. </author> <title> Face-based data structure and its application to robust geometric modeling. </title> <booktitle> Proceedings of ACM Solid Modeling, </booktitle> <pages> pages 235-246, </pages> <year> 1995. </year>
Reference-contexts: However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling <ref> [Hof96, Hea95, For96] </ref>. It is important that the computed B-rep be accurate, or at least topologically consistent, and this can be jeopardized by even small amounts of error in the representation of the model or in finite-precision computations (e.g. round-off errors).
Reference: [Hei71] <author> L. E. Heindel. </author> <title> Integer arithmetic algorithm for polynomial real zero determination. </title> <journal> Journal of ACM, </journal> <volume> 18(4) </volume> <pages> 535-548, </pages> <year> 1971. </year>
Reference-contexts: But this bound is too pessimistic, and a result based on <ref> [Hei71] </ref> predicts the average case to be more like O (n 4 ). Sylvester resultant: Given two polynomials of degree m and n respectively, the coefficient size of the resultant is bounded by [(m + n) c] m+n [KKM96], where c is the maximum coefficient size of the polynomials.
Reference: [HHK89] <author> C. Hoffmann, J. Hopcroft, and M. Karasick. </author> <title> Robust set operations on polyhedral solids. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(6) </volume> <pages> 50-59, </pages> <year> 1989. </year>
Reference-contexts: One of the most common approaches is based on using tolerances with floating-point arithmetic [Jac95], however it is hard to decide a global tolerance value for all computations. To circumvent these problems, combinations of symbolic reasoning <ref> [HHK89] </ref> and adaptive tolerances [Seg90] have been proposed. Other algorithms include those based on redundancy elimination [FBZ93]. B-rep computation algorithms involve accurate evaluation of the sign of arithmetic expressions, which can present problems for floating-point arithmetic when the value of the expression is close to zero.
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: Sloan Foundation Fellowship, ARO Contract DAAH04-96-1-0257, NSF Grant CCR-9319957, NSF Grant CCR-9625217, ONR Contract N00014-94-1-0738, ARPA Contract DABT63-93-C-0048 and NSF/ARPA Center for Computer Graphics and Scientific Visualization ing solids <ref> [Bra75, RV85, Hof89, Man88] </ref>. CSG implicitly represents a solid as an algebraic expression, and B-rep explicitly stores an object as a set of surfaces. Both these representations have different inherent strengths and weaknesses, and for most applications both are desired. <p> This is a wide family of objects and can exactly represent quadrics, tori and free-form solids. The first systematic study of CSG to B-rep conversion appeared in [RV85] and nowadays the algorithms for conversion are relatively well understood <ref> [Hof89, Man88, CB89, Sar83, KM96] </ref>. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [Hof96, Hea95, For96]. <p> If this problem is not properly addressed, the resulting algorithm becomes un reliable. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra <ref> [SI89, For95, BMP94, Hof89] </ref>. These algorithms use a fixed upper bound on the bit-length of arithmetic required to evaluate geometric predicates. In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation [For95]. <p> If we are given a different rectangular domain, we can always reparameterize to (0 s; t 1). Assumptions: Topological information of the solid is maintained in terms of an adjacency graph. It is similar to the winged-edge data structure <ref> [Hof89] </ref>. To start with, we assume that each of the input objects has manifold boundaries, and the Boolean operation is regularized. While it is possible to generate non-manifold objects from regularized Booleans on manifold solids, we assume for the sake of simplicity that this does not occur. <p> It is a well-known fact that, while dealing with topological representation of curved objects, global resolution of edge ambiguities cannot be guaranteed at times <ref> [Hof89] </ref>. Some of these issues are addressed in Section 6. Given these assumptions, it can curve segments be shown that an unambiguous topological representation is possible for a solid. <p> It is obvious that the entire component (as obtained in the previous section) lies completely inside or outside the other solid. In most polyhedral modelers, component classification is carried out locally <ref> [Hof89] </ref>. When dealing with sculptured surfaces, though, the same technique cannot be used. The most general method used instead is based on ray-shooting. Ray-shooting is done by firing a semi-infinite ray in an arbitrary direction and checking for intersections with the other solid.
Reference: [Hof96] <author> C.M. Hoffmann. </author> <title> How solid is solid modeling. </title> <editor> In M.C. Lin and D. Manocha, editors, </editor> <booktitle> Applied Computational Geometry, </booktitle> <pages> pages 1-8. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling <ref> [Hof96, Hea95, For96] </ref>. It is important that the computed B-rep be accurate, or at least topologically consistent, and this can be jeopardized by even small amounts of error in the representation of the model or in finite-precision computations (e.g. round-off errors).
Reference: [Jac95] <author> D. Jackson. </author> <title> Boundary representation modeling with local tolerances. </title> <booktitle> Proceedings of ACM Solid Modeling, </booktitle> <pages> pages 247-253, </pages> <year> 1995. </year>
Reference-contexts: A number of approaches, mostly restricted to polyhedral modelers, have been proposed for robust and accurate B-rep computation. One of the most common approaches is based on using tolerances with floating-point arithmetic <ref> [Jac95] </ref>, however it is hard to decide a global tolerance value for all computations. To circumvent these problems, combinations of symbolic reasoning [HHK89] and adaptive tolerances [Seg90] have been proposed. Other algorithms include those based on redundancy elimination [FBZ93].
Reference: [KKM96] <author> J. Keyser, S. Krishnan, and D. Manocha. </author> <title> Efficient boundary generation of low-degree sculptured solids using exact arithmetic. </title> <type> Technical Report TR96-040, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1996. </year>
Reference-contexts: But this bound is too pessimistic, and a result based on [Hei71] predicts the average case to be more like O (n 4 ). Sylvester resultant: Given two polynomials of degree m and n respectively, the coefficient size of the resultant is bounded by [(m + n) c] m+n <ref> [KKM96] </ref>, where c is the maximum coefficient size of the polynomials. For the case of quadrics, tori, and other low-degree solids that we deal with m and n is at most four.
Reference: [KM94] <author> S. Krishnan and D. Manocha. </author> <title> An efficient surface intersection algorithm based on the lower dimensional formulation. </title> <type> Technical Report TR94-062, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1994. </year> <note> To appear in ACM Trans. on Computer Graphics. </note>
Reference-contexts: Bounding boxes are needed to distinguish two such curve segments represented by the same algebraic equation. However, as seen from Fig. 3 , not all the bounding boxes are non-overlapping. We perform a subdivision of these boxes until these two criteria are satisfied. We use an algorithm described in <ref> [KM94] </ref> to perform this subdivision.
Reference: [KM96] <author> S. Krishnan and D. Manocha. </author> <title> Efficient representations and techniques for computing b-rep's of csg models with nurbs primitives. </title> <booktitle> In Proceedings of CSG'96, </booktitle> <pages> pages 101-122. </pages> <publisher> Information Geometers Ltd, </publisher> <year> 1996. </year>
Reference-contexts: This is a wide family of objects and can exactly represent quadrics, tori and free-form solids. The first systematic study of CSG to B-rep conversion appeared in [RV85] and nowadays the algorithms for conversion are relatively well understood <ref> [Hof89, Man88, CB89, Sar83, KM96] </ref>. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [Hof96, Hea95, For96].
Reference: [Mac02] <author> F.S. </author> <title> Macaulay. On some formula in elimination. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 1(33) </volume> <pages> 3-27, </pages> <month> May </month> <year> 1902. </year>
Reference-contexts: Definition 1 [Sal85] A resultant of a set of polynomials is an expression involving the coefficients of the polynomials such that the vanishing of the resultant is a necessary and sufficient condition for the set of polynomials to have a common non-trivial root. <ref> [Mac02] </ref> provided a general method for eliminating n variables from n homogeneous polynomials. The resultant is expressed as a ratio of two determinants. However, a single determinant formulation exists for n = 2 and 3 [Sal85, Dix08].
Reference: [Man88] <author> M. Mantyla. </author> <title> An Introduction to Solid Modeling. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1988. </year>
Reference-contexts: Sloan Foundation Fellowship, ARO Contract DAAH04-96-1-0257, NSF Grant CCR-9319957, NSF Grant CCR-9625217, ONR Contract N00014-94-1-0738, ARPA Contract DABT63-93-C-0048 and NSF/ARPA Center for Computer Graphics and Scientific Visualization ing solids <ref> [Bra75, RV85, Hof89, Man88] </ref>. CSG implicitly represents a solid as an algebraic expression, and B-rep explicitly stores an object as a set of surfaces. Both these representations have different inherent strengths and weaknesses, and for most applications both are desired. <p> This is a wide family of objects and can exactly represent quadrics, tori and free-form solids. The first systematic study of CSG to B-rep conversion appeared in [RV85] and nowadays the algorithms for conversion are relatively well understood <ref> [Hof89, Man88, CB89, Sar83, KM96] </ref>. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [Hof96, Hea95, For96].
Reference: [MC93] <author> D. Manocha and J.F. Canny. </author> <title> Multipolynomial resultant algorithms. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(2) </volume> <pages> 99-122, </pages> <year> 1993. </year>
Reference-contexts: We use Dixon's resultant [Dix08] to compute the implicit form as described in [Sed83]. Resultant computation: We use an algorithm based on multivariate interpolation <ref> [MC93] </ref> to compute the resultant of a set of polynomials efficiently. The main bottleneck in most resultant algorithms is the symbolic expansion of determinants. Most of the computer algebra systems use symbolic algorithms like polynomial manipulations for resultants, which are very expensive. <p> The main bottleneck in most resultant algorithms is the symbolic expansion of determinants. Most of the computer algebra systems use symbolic algorithms like polynomial manipulations for resultants, which are very expensive. Further, the magnitude of intermediate expressions grows quickly, and the memory requirements are high. The algorithm in <ref> [MC93] </ref> performs all computations over finite fields, and uses a probabilistic algorithm based on the Chinese Remainder Theorem to recover actual coefficients. 2.3 Multivariate Sturm sequences Here, we describe briefly the algorithm proposed by Milne [Mil92] to compute the number of common real solutions of n polynomials in n variables inside <p> To reduce the cost of arithmetic operations, we perform all our computations over finite fields, and use a probabilistic algorithm based on the Chinese Remainder Theorem to recover the actual coefficients <ref> [MC93] </ref>. The time complexity of the resultant computation (using interpolation algorithm in [MC93]) is directly proportional to the number of primes used in the finite field computation. To reduce this number, we use primes of maximum possible magnitude. <p> To reduce the cost of arithmetic operations, we perform all our computations over finite fields, and use a probabilistic algorithm based on the Chinese Remainder Theorem to recover the actual coefficients <ref> [MC93] </ref>. The time complexity of the resultant computation (using interpolation algorithm in [MC93]) is directly proportional to the number of primes used in the finite field computation. To reduce this number, we use primes of maximum possible magnitude. Most current implementations of bignum libraries use finite fields of order 2 16 to prevent overflow when taking products.
Reference: [MG91] <author> J. Miller and R. Goldman. </author> <title> Combining algebraic rigor with geometric robustness for the detection and calculation of conic sections in the intersection of two quadric surfaces. </title> <booktitle> Proceedings of ACM Solid Modeling, </booktitle> <pages> pages 221-233, </pages> <year> 1991. </year>
Reference-contexts: The perturbation scheme greatly simplifies the implementation of the solid modeler. There is relatively little work on robust or accurate B-rep computation algorithms for curved primitives. Algorithms to handle degenerate intersections between quadrics have been presented in <ref> [MG91] </ref>. For arbitrary degree sculptured solids, it is difficult to compute tight bounds on the error generated due to floating-point arithmetic. As a result, it is hard to extend algorithms based on tolerances to curved models.
Reference: [Mil92] <author> P. S. Milne. </author> <title> On the solutions of a set of polynomial equations. </title> <booktitle> In Symbolic and Numerical Computation for Artificial Intelligence, </booktitle> <pages> pages 89-102, </pages> <year> 1992. </year>
Reference-contexts: The rational rectangle is guaranteed to isolate each common root of f (s; t) and g (s; t) (taking into account the multiplicities of roots). The root isolation algorithm uses multivariate Sturm sequences as proposed by Milne <ref> [Mil92] </ref>. 2.2 Multipolynomial Resultants Elimination theory investigates the conditions under which sets of polynomials have common roots. <p> The algorithm in [MC93] performs all computations over finite fields, and uses a probabilistic algorithm based on the Chinese Remainder Theorem to recover actual coefficients. 2.3 Multivariate Sturm sequences Here, we describe briefly the algorithm proposed by Milne <ref> [Mil92] </ref> to compute the number of common real solutions of n polynomials in n variables inside an n-dimensional rectangle. This algorithm is an extension of the univariate case which constructs a polynomial sequence, and measures sign variations of this sequence at the endpoints of the interval. <p> by P (M (b 1 ; b 2 )) + P (M (a 1 ; a 2 )) P (M (b 1 ; a 2 )) P (M (a 1 ; b 2 )) : The justification for various steps and extension to ar bitrary dimensions can be found in <ref> [Mil92] </ref>. 2.4 Topological resolution of algebraic plane curves The intersection curve between two surfaces is typically a high degree algebraic curve. In practice, it may have multiple real components. Topological resolution involves identifying critical points like turning points and singular-ities and establishing a unique connectivity between them. <p> X (u; v) W (s; 0) X (s; 0) W (u; v) = 0 Z (u; v) W (s; 0) Z (s; 0) W (u; v) = 0 These equations may be solved using a trivariate Sturm sequence as described in <ref> [Mil92] </ref>. This will give solutions bounded in u; v, and s. However, the volume function computation involves three successive elimination steps (Syl-vester resultant). Depending on the size of the coefficients, this process could be computationally intensive. <p> A horizontal line passing through p (in both directions) is intersected with the boundary, and all the intersections are determined using the root isolation method of Milne <ref> [Mil92] </ref>. The intersections must be even in number and are of the form (s 1 ; t); (s 2 ; t); : : : ; (s 2n ; t). The s i 's are algebraic numbers and are represented as small rational intervals.
Reference: [RV85] <author> A.A.G. Requicha and H.B. Voelcker. </author> <title> Boolean operations in solid modeling: boundary evaluation and merging algorithms. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 73(1), </volume> <year> 1985. </year>
Reference-contexts: Sloan Foundation Fellowship, ARO Contract DAAH04-96-1-0257, NSF Grant CCR-9319957, NSF Grant CCR-9625217, ONR Contract N00014-94-1-0738, ARPA Contract DABT63-93-C-0048 and NSF/ARPA Center for Computer Graphics and Scientific Visualization ing solids <ref> [Bra75, RV85, Hof89, Man88] </ref>. CSG implicitly represents a solid as an algebraic expression, and B-rep explicitly stores an object as a set of surfaces. Both these representations have different inherent strengths and weaknesses, and for most applications both are desired. <p> In this paper the objects correspond to sculptured solids, whose boundary can be represented using trimmed rational parametric surfaces. This is a wide family of objects and can exactly represent quadrics, tori and free-form solids. The first systematic study of CSG to B-rep conversion appeared in <ref> [RV85] </ref> and nowadays the algorithms for conversion are relatively well understood [Hof89, Man88, CB89, Sar83, KM96]. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [Hof96, Hea95, For96].
Reference: [Sal85] <author> G. Salmon. </author> <title> Lessons Introductory to the Modern Higher Algebra. G.E. </title> <publisher> Stechert & Co., </publisher> <address> New York, </address> <month> 1885. </month>
Reference-contexts: Usually, it concerns itself with sets of n homogeneous polynomials in n unknowns, and finds the relationship between the coefficients of the polynomials which can be used to determine whether the polynomials have a non-trivial common solution. Definition 1 <ref> [Sal85] </ref> A resultant of a set of polynomials is an expression involving the coefficients of the polynomials such that the vanishing of the resultant is a necessary and sufficient condition for the set of polynomials to have a common non-trivial root. [Mac02] provided a general method for eliminating n variables from <p> The resultant is expressed as a ratio of two determinants. However, a single determinant formulation exists for n = 2 and 3 <ref> [Sal85, Dix08] </ref>. For n = 3, however, [Dix08] gives the resultant only if the three equations have the same degree. In our application, it is sufficient to compute resultants for the cases when n = 2 and 3. <p> For n = 3, however, [Dix08] gives the resultant only if the three equations have the same degree. In our application, it is sufficient to compute resultants for the cases when n = 2 and 3. Sylvester's method <ref> [Sal85] </ref> can be used to express the resultant of two polynomials of degree m and n respectively as a determinant of a matrix with (m + n) rows and columns. <p> We use the Sylvester resultant <ref> [Sal85] </ref> to eliminate one variable from two polynomials. Given a square-free polynomial p (x) we can construct a Sturm sequence of polynomials S i = remainder (S i2 (x); S i1 (x)), where S 1 (x) = p (x) and S 2 (x) = p (x).
Reference: [Sar83] <author> R F Sarraga. </author> <title> Algebraic methods for intersection. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 22 </volume> <pages> 222-238, </pages> <year> 1983. </year>
Reference-contexts: This is a wide family of objects and can exactly represent quadrics, tori and free-form solids. The first systematic study of CSG to B-rep conversion appeared in [RV85] and nowadays the algorithms for conversion are relatively well understood <ref> [Hof89, Man88, CB89, Sar83, KM96] </ref>. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [Hof96, Hea95, For96].
Reference: [Sed83] <author> T.W. </author> <title> Sederberg. Implicit and Parametric Curves and Surfaces. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <year> 1983. </year>
Reference-contexts: We use Dixon's resultant [Dix08] to compute the implicit form as described in <ref> [Sed83] </ref>. Resultant computation: We use an algorithm based on multivariate interpolation [MC93] to compute the resultant of a set of polynomials efficiently. The main bottleneck in most resultant algorithms is the symbolic expansion of determinants.
Reference: [Seg90] <author> M. Segal. </author> <title> Using tolerances to guarantee valid polyhedral modeling results. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 105-114, </pages> <year> 1990. </year>
Reference-contexts: One of the most common approaches is based on using tolerances with floating-point arithmetic [Jac95], however it is hard to decide a global tolerance value for all computations. To circumvent these problems, combinations of symbolic reasoning [HHK89] and adaptive tolerances <ref> [Seg90] </ref> have been proposed. Other algorithms include those based on redundancy elimination [FBZ93]. B-rep computation algorithms involve accurate evaluation of the sign of arithmetic expressions, which can present problems for floating-point arithmetic when the value of the expression is close to zero.
Reference: [SI89] <author> K. Sugihara and M. Iri. </author> <title> A solid modeling system free from topological inconsistencis. </title> <journal> J. Inf. Proc., Inf. Proc. Soc. of Japan, </journal> <volume> 12(4) </volume> <pages> 380-393, </pages> <year> 1989. </year>
Reference-contexts: If this problem is not properly addressed, the resulting algorithm becomes un reliable. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra <ref> [SI89, For95, BMP94, Hof89] </ref>. These algorithms use a fixed upper bound on the bit-length of arithmetic required to evaluate geometric predicates. In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation [For95].
Reference: [Yap90] <author> C. Yap. </author> <title> A geometric consistency theorem for a symbolic perturbation scheme. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 40 </volume> <pages> 2-18, </pages> <year> 1990. </year>
Reference-contexts: In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation [For95]. Besides reliable computation, exact arithmetic allows the use of symbolic perturbation to handle degeneracies <ref> [Yap90] </ref>. The perturbation scheme greatly simplifies the implementation of the solid modeler. There is relatively little work on robust or accurate B-rep computation algorithms for curved primitives. Algorithms to handle degenerate intersections between quadrics have been presented in [MG91].
Reference: [Yu92] <author> J. Yu. </author> <title> Exact arithmetic solid modeling. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <year> 1992. </year>
Reference-contexts: Techniques using bit-length estimates may, in the worst case, require bit-lengths which are exponential with respect to the degree of the algebraic functions <ref> [Can88, Yu92] </ref>. Moreover, many representations and predicates that are well-understood in the linear domain become rather hard in the curved domain. Overall, no good solutions are known for efficient and robust B-rep computation on curved solids.
References-found: 32

