URL: http://www.cs.washington.edu/homes/egs/papers/tr98-09-01.ps
Refering-URL: http://www.cs.washington.edu/homes/egs/
Root-URL: http://www.cs.washington.edu
Email: -egs,rgrimm,artjg,nra,bershad-@cs.washington.edu  
Title: Distributed Virtual Machines: A System Architecture for Network Computing  
Author: Emin Gn Sirer, Robert Grimm, Arthur J. Gregory, Nathan Anderson, Brian N. Bershad 
Address: Seattle, WA 98195-2350  
Affiliation: Dept. of Computer Science Engineering University of Washington  
Web: http://kimera.cs.washington.edu  
Abstract: Modern virtual machines, such as Java and Inferno, are emerging as network computing platforms. While these virtual machines provide higher-level abstractions and more sophisticated services than their predecessors from twenty years ago, their architecture has essentially remained unchanged. State of the art virtual machines are still monolithic, that is, they are comprised of closely-coupled service components, which are thus replicated over all computers in an organization. This crude replication of services forms one of the weakest points in todays networked systems, as it creates widely acknowledged and well-publicized problems of security, manageability and performance. We have designed and implemented a new system architecture for network computing based on distributed virtual machines. In our system, virtual machine services that perform rule checking and code transformation are factored out of clients and are located in enterprise-wide network servers. The services operate by intercepting application code and modifying it on the fly to provide additional service functionality. This architecture reduces client resource demands and the size of the trusted computing base, establishes physical isolation between virtual machine services and creates a single point of administration. We demonstrate that such a distributed virtual machine architecture can provide substantially better integrity and manageability than a monolithic architecture, scales well with increasing numbers of clients, and does not entail high overhead. 
Abstract-found: 1
Intro-found: 1
Reference: [Accetta et al. 89] <author> Accetta, M. J., Baron, R. V., Bolosky, W., Golub, D. B., Rashid R. F., Tevanian, A. and Young, M. W. </author> <title> Mach: A New Kernel Foundation for Unix Development. </title> <booktitle> USENIX 1989. </booktitle>
Reference: [Adl-Tabatabai et al. 96] <author> Adl-Tabatabai, A., Langdale, G., Lucco, S. and Wahbe, R. </author> <title> Efficient and Language-Independent Mobile Programs." </title> <booktitle> In Conference on Programming Language Design and Implementation, </booktitle> <month> May, </month> <year> 1996, </year> <pages> p. 127-136. </pages>
Reference-contexts: 1. Introduction Virtual machines (VMs) have evolved significantly in the last two decades and may soon serve as a widely available network computing platform <ref> [Lindholm&Yellin96, Inferno, Adl-Tabatabai et al. 96] </ref>. They are particularly well suited for network computing because they offer a uniform programming model, work on a wide range of systems, and provide a variety of high-level services not supported by native architectures and general purpose operating systems.
Reference: [Badger et al. 95a] <author> L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and S. A. Haghighat. </author> <title> Pratical Domain and Type Enforcement for UNIX. </title> <booktitle> In Proceedings of the 1995 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 66-77, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: The specification language supports three major constructs. The first construct, &lt;namespace&gt;, maps named resources to security identifiers, similar to the name-based security attributes in domain and type enforcement <ref> [Badger et al. 95a, Badger et al. 95b] </ref>. The second construct, &lt;access-matrix&gt;, specifies legal permissions for pairs of security identifiers [Lampson 71]. It also specifies how to perform transfers between protection domains.
Reference: [Badger et al. 95b] <author> L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and S. A. Haghighat. </author> <title> A Domain and Type Enforcement UNIX Prototype. </title> <booktitle> In Proceedings of the Fifth USENIX UNIX Security Symposium, </booktitle> <pages> pages 127-140, </pages> <address> Salt Lake City, Utah, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: The specification language supports three major constructs. The first construct, &lt;namespace&gt;, maps named resources to security identifiers, similar to the name-based security attributes in domain and type enforcement <ref> [Badger et al. 95a, Badger et al. 95b] </ref>. The second construct, &lt;access-matrix&gt;, specifies legal permissions for pairs of security identifiers [Lampson 71]. It also specifies how to perform transfers between protection domains.
Reference: [Bershad et al. 95] <author> Bershad, B. N., Savage, S., Pardyak, P., Sirer, E. G., Fiuczynski, M., Becker, D., Eggers, S., Chambers, C. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the Symposium on Operating System Principles, </booktitle> <year> 1995. </year>
Reference: [RFC1157] <author> Case, J., Fedor, M., Schoffstall, M. and J. Davin, </author> <title> "Simple Network Management Protocol", </title> <type> RFC 1157, </type> <month> May </month> <year> 1990. </year> <month> 12 </month>
Reference: [Cheswick&Bellovin94] <author> Cheswick, W. R. and Bellovin, S. </author> <title> Firewalls and Internet Security: Repelling the Wily Hacker. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: As a result, while it may be applicable to stateless applets on the web, it does not support applications which require selective access to local resources found on clients. There are parallels between our work and the use of firewalls for network security <ref> [Cheswick&Bellovin94, Mogul et al. 87] </ref>. Before the emergence of firewalls, every networked host in an organization had to be protected against all bad packets that it might receive.
Reference: [Custer 93] <author> Custer, H. </author> <title> Inside Windows NT. </title> <publisher> Microsoft Press, </publisher> <year> 1993. </year>
Reference-contexts: Modern virtual machines offer services, such as dynamic extensibility, verification, just-in-time compilation, configurable security policies and garbage collection, which are much more sophisticated compared to their predecessors [IBMVM86] and not readily found in general purpose operating systems <ref> [Custer 93] </ref>. In addition to the growth in the complexity of virtual machine services, the scale of deployment for VM systems has changed as well.
Reference: [Dean et al. 97] <author> Dean, D., Felten, E. W., Wallach, D. S. and Belfanz, D. </author> <title> Java Security: Web Browers and Beyond. In Internet Beseiged: </title> <editor> Countering Cyberspace Scofflaws, D. E. Denning and P. J. Denning, eds. </editor> <publisher> ACM Press, </publisher> <month> October </month> <year> 1997. </year>
Reference-contexts: Consequently, service implementations and service state are replicated across all virtual machines in an organization. As a result of this crude placement and replication of functionality, modern virtual machines suffer from security problems <ref> [Dean et al. 97] </ref>, are difficult to manage, and impose high resource requirements [Madany 96]. 2 Furthermore, colocation of VM services has resulted in non-modular systems that exhibit complex intercomponent interactions, as observed [Accetta et al. 89, Bershad et al. 95, Engler et al. 95] for other monolithic systems.
Reference: [Deitel 90] <author> Deitel, H. M. </author> <title> An introduction to Operating Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA 1990. </address>
Reference-contexts: The IBM VM system enabled organizations to run both MVS and CMS on the same physical machine by virtualizing machine resources. As a result of the monolithic structure, all VM services were executed on the same host <ref> [Deitel 90] </ref>. This structure has influenced many of the virtual machine implementations that followed. In the early 1970s, virtual machines were also adopted by the language community as a substrate for distributed code.
Reference: [Digitivity 97] <author> Digitivity, Inc. </author> <title> Digitivity Introduces the First Internet Applet Management System for the Secure Deployment of JAVA. </title> <note> http://www.digitivity.com/press_062397.html, June 1997. </note>
Reference-contexts: They rely on a growing set of complex services [Gosling&Yellin 96, Myers&Liskov97, Wallach et al.97] to provide their functionality. We believe that a factored architecture addresses the problems faced by these systems. The CAGE system from Digitivity takes an alternative approach to factoring services out of clients <ref> [Digitivity 97] </ref>. CAGE replaces all virtual machines in an organization with a single virtual machine that is physically isolated behind a firewall. All applications execute on this centralized virtual machine, and communicate with clients only for user-interface operations.
Reference: [Ellison et al. 98] <author> C. M. Ellison, B. Frantz, B. Lampson, R. Rivest, B. M. Thomas, T. Ylonen. </author> <title> Simple Public Key Infrastructure. </title> <type> Internet Draft, </type> <institution> Internet Engineering Task Force, </institution> <month> March </month> <year> 1998. </year>
Reference-contexts: The third construct, &lt;class&gt;, specifies where and how to insert calls to the enforcement manager in a code module. In order to facilitate the exchange of code and security specifications between organizations, our security services use the same data types and representations as the Simple Public Key Infrastructure (SPKI) <ref> [Ellison et al. 98] </ref>. SPKI is being developed within the Internet Engineering Task Force as a standard for remote authentication and access control based on public keys. Its main contributions are a notion of key-based principals and a simple, yet effective naming system.
Reference: [Engler et al. 95] <author> Engler, D. R., Kaashoek, M. F. and O'Toole, J. "Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings of the Symposium on Operating System Principles, </booktitle> <year> 1995. </year>
Reference: [Freund&Mitchell 98] <author> Freund, S. N. and Mitchell, J. C. </author> <title> A type system for object initialization in the Java Bytecode Language. </title> <booktitle> To appear in ACM Conference on ObjectOriented Programming: Systems, Languages and Applications, </booktitle> <year> 1998. </year>
Reference-contexts: Verification Javas appeal for network computing stems principally from its strong safety guarantees. A comprehensive set of safety constraints allows the VM to integrate potentially malicious code into a privileged base system <ref> [Stata&Abadi 98, Freund&Mitchell 98] </ref>. The enforcement of these type and system safety constraints is performed by the Java verifier. A Java verifier needs to check four different classes of constraints. The first set of safety axioms ensures that the class file is well formed.
Reference: [Gosling&Yellin 96] <author> Gosling, J. and Yellin, F. </author> <title> The Java Application Programming Interface, Volumes 1 & 2. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Recent virtual machines such as Java and Inferno build on this legacy to provide safety, portability and uniformity in a network computing setting. They rely on a growing set of complex services <ref> [Gosling&Yellin 96, Myers&Liskov97, Wallach et al.97] </ref> to provide their functionality. We believe that a factored architecture addresses the problems faced by these systems. The CAGE system from Digitivity takes an alternative approach to factoring services out of clients [Digitivity 97].
Reference: [Graham et al. 82] <author> Graham, S.L., Kessler, P.B. and McKusick, </author> <title> M.K. gprof: A Call Graph Execution Profiler. </title> <booktitle> In Proceedings of the SIGPLAN '82 Symposium on Compiler Construction, SIGPLAN Notices, </booktitle> <volume> Vol. 17, No. 6, </volume> <pages> pp. 120-126, </pages> <month> June </month> <year> 1982. </year>
Reference-contexts: Performance Monitoring Services In order to enable virtual machines to monitor their performance and for users to observe application behavior, we implemented a profiling and tracing service. The profiler instruments code to generate a dynamic call-graph <ref> [Graham et al. 82] </ref>. The tracer instruments applications to generate a timestamped log of all calls to the system libraries [Jones 93]. While we have been using these services extensively for debugging our system, they can also be used for remote monitoring and administration. 4.6.
Reference: [Grimm&Bershad97] <author> Grimm, R. and Bershad, B. </author> <title> Providing Policy-Neutral and Transparent Access Control in Extensible Systems. </title> <type> Technical Report UW-CSE-98-02-02, </type> <month> February </month> <year> 1998. </year>
Reference-contexts: The security policy is embedded in the code, has no external specification, and, to change a given security policy, all affected code modules have to be rewritten. Our security services are designed around three principles <ref> [Grimm&Bershad97] </ref> that address these problems. First, code should be separated from the specification of the corresponding security policy. This separation ensures that a code modules security requirements are clearly documented, can be changed independently of the code, and can be centrally managed.
Reference: [IBMVM86] <author> IBM Corporation. </author> <title> Virtual Machine/System Product Application Development Guide, Release 5. </title> <address> Endicott, New York, </address> <year> 1986. </year>
Reference-contexts: Modern virtual machines offer services, such as dynamic extensibility, verification, just-in-time compilation, configurable security policies and garbage collection, which are much more sophisticated compared to their predecessors <ref> [IBMVM86] </ref> and not readily found in general purpose operating systems [Custer 93]. In addition to the growth in the complexity of virtual machine services, the scale of deployment for VM systems has changed as well. <p> In addition, our system has not yet been optimized. 6. Related Work While virtual machines have evolved extensively since their introduction, their monolithic architecture has remained unchanged. The first commercial virtual machine was the IBM VM system <ref> [IBMVM86] </ref>, which made its commercial debut in 1972. The IBM VM system enabled organizations to run both MVS and CMS on the same physical machine by virtualizing machine resources. As a result of the monolithic structure, all VM services were executed on the same host [Deitel 90].
Reference: [Inferno] <institution> Lucent Technologies. </institution> <note> Inferno. http://inferno.bell-labs.com/inferno/ </note>
Reference-contexts: 1. Introduction Virtual machines (VMs) have evolved significantly in the last two decades and may soon serve as a widely available network computing platform <ref> [Lindholm&Yellin96, Inferno, Adl-Tabatabai et al. 96] </ref>. They are particularly well suited for network computing because they offer a uniform programming model, work on a wide range of systems, and provide a variety of high-level services not supported by native architectures and general purpose operating systems.
Reference: [Jones 93] <author> Jones, M. B. </author> <title> "Interposition Agents: Transparently Interposing User Code at the System Call." </title> <booktitle> In Proceedings of the Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1993, </year> <pages> pp. 80-93. </pages>
Reference-contexts: The profiler instruments code to generate a dynamic call-graph [Graham et al. 82]. The tracer instruments applications to generate a timestamped log of all calls to the system libraries <ref> [Jones 93] </ref>. While we have been using these services extensively for debugging our system, they can also be used for remote monitoring and administration. 4.6. Service Infrastructure A distributed architecture requires an infrastructure that ties clients together with the services they need.
Reference: [Lampson 71] <author> B. W. Lampson. </author> <title> Protection. </title> <booktitle> In Proceedings of the Fifth Princeton Symposium on Information Sciences and Systems, </booktitle> <pages> pages 437-443, </pages> <address> Princeton, New Jersey, </address> <month> March </month> <year> 1971. </year> <booktitle> Reprinted in Operating Systems Review, </booktitle> <volume> 8(1) </volume> <pages> 18-24, </pages> <month> January </month> <year> 1974. </year>
Reference-contexts: The specification language supports three major constructs. The first construct, &lt;namespace&gt;, maps named resources to security identifiers, similar to the name-based security attributes in domain and type enforcement [Badger et al. 95a, Badger et al. 95b]. The second construct, &lt;access-matrix&gt;, specifies legal permissions for pairs of security identifiers <ref> [Lampson 71] </ref>. It also specifies how to perform transfers between protection domains. The third construct, &lt;class&gt;, specifies where and how to insert calls to the enforcement manager in a code module.
Reference: [Lindholm&Yellin96] <author> Lindholm, T. and Yellin, F. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: 1. Introduction Virtual machines (VMs) have evolved significantly in the last two decades and may soon serve as a widely available network computing platform <ref> [Lindholm&Yellin96, Inferno, Adl-Tabatabai et al. 96] </ref>. They are particularly well suited for network computing because they offer a uniform programming model, work on a wide range of systems, and provide a variety of high-level services not supported by native architectures and general purpose operating systems. <p> In addition to these goals, a viable architecture should be backward compatible with the large base of currently deployed monolithic virtual machines. Its implementation should preserve the external representations of existing virtual machines <ref> [Lindholm&Yellin96] </ref>, as well as their platform APIs [Gosling&Yellin 96. This approach enables an upgrade path from existing monolithic virtual machines to a distributed service architecture. 3.
Reference: [Madany 96] <author> Madany, P. </author> <title> JavaOS Java on the Bare Metal. </title> <booktitle> JavaOne 1996. </booktitle>
Reference-contexts: Consequently, service implementations and service state are replicated across all virtual machines in an organization. As a result of this crude placement and replication of functionality, modern virtual machines suffer from security problems [Dean et al. 97], are difficult to manage, and impose high resource requirements <ref> [Madany 96] </ref>. 2 Furthermore, colocation of VM services has resulted in non-modular systems that exhibit complex intercomponent interactions, as observed [Accetta et al. 89, Bershad et al. 95, Engler et al. 95] for other monolithic systems.
Reference: [Mogul et al. 87] <author> Mogul, J. C., Rashid, R. F. and Accetta, M. J. </author> <title> The Packet Filter: An Efficient Mechanism for User-level Network Code." </title> <booktitle> In Proceedings of the Symposium on Operating System Principles, </booktitle> <month> November </month> <year> 1987, </year> <pages> pp. 39-51. </pages>
Reference-contexts: As a result, while it may be applicable to stateless applets on the web, it does not support applications which require selective access to local resources found on clients. There are parallels between our work and the use of firewalls for network security <ref> [Cheswick&Bellovin94, Mogul et al. 87] </ref>. Before the emergence of firewalls, every networked host in an organization had to be protected against all bad packets that it might receive.
Reference: [Myers&Liskov97] <author> Myers, A. C. and Liskov, B. </author> <title> A Decentralized Model for Information Flow Control. </title> <booktitle> In Proceedings of the Symposium on Operating System Principles, </booktitle> <year> 1997 </year>
Reference-contexts: Recent virtual machines such as Java and Inferno build on this legacy to provide safety, portability and uniformity in a network computing setting. They rely on a growing set of complex services <ref> [Gosling&Yellin 96, Myers&Liskov97, Wallach et al.97] </ref> to provide their functionality. We believe that a factored architecture addresses the problems faced by these systems. The CAGE system from Digitivity takes an alternative approach to factoring services out of clients [Digitivity 97].
Reference: [Saltzer&Schroeder 75] <author> Saltzer, J. H. and Schroeder, M. D. </author> <title> The Protection of Information in Computer Systems. </title> <booktitle> In Proceedings of the IEEE, </booktitle> <volume> 63(9) </volume> <pages> 1278-1308, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: For general-purpose network computing, which forms the application domain of our architecture, these requirements can be summarized as follows: Security: The trusted computing base should be well defined, small, and physically isolated from application code <ref> [Saltzer&Schroeder 75] </ref>. An organization should have the ability to make network-wide, mandatory access control decisions, and know that they are being enforced on all clients. Manageability: Management of virtual machines should be uniform across platforms and there should be a central point of control for administration.
Reference: [Rivest 97] <author> R. Rivest. SExpressions. </author> <type> Internet Draft, </type> <institution> Internet Engineering Task Force, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: Its main contributions are a notion of key-based principals and a simple, yet effective naming system. In our security services, all pertinent representations, such as security identifiers and permissions, are based on SPKI. Furthermore, like SPKI, we use canonical sexpressions <ref> [Rivest 97] </ref> as the on-the-wire format between the enforcement manager and the security policy service. Example To illustrate our security specification language and the operation of our security services, consider the example of restricting file access by applets to only read files under the SXEOLF directory of the file system.
Reference: [Sirer et al. 98] <author> Sirer, E. G., Grimm, R., Bershad, B. N., Gregory, A. J. and McDirmid, S. </author> <title> Distributed Virtual Machines: A System Architecture for Network Computing. </title> <booktitle> European SIGOPS, </booktitle> <month> September </month> <year> 1998. </year>
Reference: [Spyglass 94] <institution> Software Development Interface for Dynamic Data Exchange. </institution> <address> http://www.spyglass.com/ products/smosaic/sdi/sdi_spec.html </address>
Reference-contexts: It relies on digital signatures to verify that incoming code has been vetted by the requisite services. The runtime can redirect incorrectly signed or unsigned code to the centralized services <ref> [Spyglass 94] </ref>. Since the runtime is shielded by the centralized services, it may implement richer interfaces than those available publicly. As these interfaces may be unsafe, the verifier ensures that incoming code does not reference them. For example, our runtime provides a call to explicitly free a given object.
Reference: [Stata&Abadi 98] <author> Stata, R. and Abadi, M. </author> <title> A type system for Java bytecode subroutines. </title> <booktitle> In Proceedings of the 25th Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1998, </year> <pages> p. 149-160 </pages>
Reference-contexts: Verification Javas appeal for network computing stems principally from its strong safety guarantees. A comprehensive set of safety constraints allows the VM to integrate potentially malicious code into a privileged base system <ref> [Stata&Abadi 98, Freund&Mitchell 98] </ref>. The enforcement of these type and system safety constraints is performed by the Java verifier. A Java verifier needs to check four different classes of constraints. The first set of safety axioms ensures that the class file is well formed.
Reference: [Tanenbaum et al. 90] <author> Tanenbaum, A.S., Renesse, R. van, Staveren, H. van., Sharp, G.J., Mullender, S.J., Jansen, A.J., and Rossum, G. van: </author> <title> "Experiences with the Amoeba Distributed Operating System," </title> <journal> Commun. ACM, </journal> <volume> vol. 33, </volume> <pages> pp. 46-63, </pages> <month> Dec. </month> <year> 1990 </year>
Reference: [Thompson 84] <author> K. Thompson. </author> <title> Reflections on Trusting Trust. </title> <journal> Communication of the ACM, </journal> <volume> Vol. 27, No. 8, </volume> <month> August </month> <year> 1984, </year> <pages> pp. 761-763. 13 </pages>
Reference-contexts: Furthermore, since policy specification and security enforcement are performed on the same host that runs potentially untrusted applications, onetime security holes can lead to long-term security compromises <ref> [Thompson 84] </ref>. Since each virtual machine is a completely independent entity, there is no central point of control in an enterprise. There are no transparent and comprehensive techniques for distributing security upgrades, capturing audit trails, and pruning a network of rogue applications.
Reference: [Psystem] <institution> University of California, Irvine. p-System: </institution> <note> Description, Background, Utilities. http://www.ics.uci.edu/~archive/documentation/p-system/p-system.html </note>
Reference-contexts: Applet Download Latency 0 2 4 6 0 5000 10000 15000 20000 25000 30000 35000 Size (bytes) T e ( s e c ) Proxy No Proxy Graph 1. Time to download an applet directly from the Internet versus through our service infrastructure. 11 easily. P-Code <ref> [Psystem] </ref> is one such intermediate language that was widely used as part of the UCSD Pascal system. It offered cross-platform portability by targeting a pseudo-machine for compilation, and relying on a runtime interpreter.
Reference: [W3C 98] <author> World Wide Web Consortium. </author> <title> Extensible Markup Language (XML) 1.0. Edited by T. Bray, </title> <editor> J. Paoli, C. M. Sperberg-McQueen, </editor> <month> February </month> <year> 1998. </year>
Reference-contexts: Consistent with these principles and our overall architecture, we provide system security in a centralized security policy service and a permachine enforcement manager. The policy service interprets an organizations security policy and, using the binary rewriter, modifies incoming code accordingly. The policy is specified in an XML-based <ref> [W3C 98] </ref> language, is distinct from code, and reflects an organizations specific security requirements. While XML is somewhat verbose and complex to parse, it is emerging as the lingua franca for Internet-based data representation.
Reference: [Wallach et al.97] <author> Wallach, D. S., Balfanz, D., Dean, D. and Felten, E. W. </author> <title> Extensible Security Architectures for Java. </title> <booktitle> In Proceedings of the Symposium on Operating System Principles, </booktitle> <year> 1997. </year>
Reference-contexts: The crash stemmed from the compiler using the length field before the verifier checks were performed. While a factored architecture does not necessarily result in a modular system, it reduces the likelihood of such errors resulting from intercomponent interactions. 4.2. Security Security for state-of-the-art Java virtual machines <ref> [Wallach et al.97] </ref> builds on Javas stack-based execution model to express security policies and requires explicit calls from code modules. Access rights are granted by annotating a virtual machines execution stack. And, they are checked by searching the stack for these annotations. <p> Recent virtual machines such as Java and Inferno build on this legacy to provide safety, portability and uniformity in a network computing setting. They rely on a growing set of complex services <ref> [Gosling&Yellin 96, Myers&Liskov97, Wallach et al.97] </ref> to provide their functionality. We believe that a factored architecture addresses the problems faced by these systems. The CAGE system from Digitivity takes an alternative approach to factoring services out of clients [Digitivity 97].
Reference: [Walker et al.83] <author> Walker, B., Popek, G., English, R., Kline, C. and Thiel, G. </author> <title> The LOCUS Distributed Operating System. </title> <booktitle> In Proceedings of the Symposium on Operating System Principles, 1983, p. </booktitle> <pages> 49-69. </pages>
References-found: 36

