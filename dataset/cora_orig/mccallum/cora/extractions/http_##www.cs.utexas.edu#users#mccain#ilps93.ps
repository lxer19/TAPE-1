URL: http://www.cs.utexas.edu/users/mccain/ilps93.ps
Refering-URL: http://www.cs.utexas.edu/users/mccain/papers.html
Root-URL: 
Email: fvl,mccain,hudsong@cs.utexas.edu  
Phone: (512) 471-9564  
Title: Reasoning about Actions with SLG  
Author: Vladimir Lifschitz, Norman McCain, and Hudson Turner 
Address: Austin, TX 78712, USA  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: We show how some forms of reasoning about the effects of actions can be automated using SLG, a logic programming interpreter developed by Chen and Warren. SLG is turned into an interpreter for "extended" logic programs, in which both negation as failure and classical negation can be used. A new translation from a high-level action language into extended logic programming is proposed, in which the rules for reasoning backwards in time are restricted to "relevant" situations, in order to ensure the termination of the query evaluation process. In examples that use this translation and involve reasoning about the past and counterfactual reasoning, SLG is found to terminate without floundering on ground queries, as well as on the nonground queries that have fluent variables only.
Abstract-found: 1
Intro-found: 1
Reference: [ Apt and Bezem, 1990 ] <author> Krzysztof Apt and Marc Bezem. </author> <title> Acyclic programs. </title> <editor> In David Warren and Peter Szeredi, editors, </editor> <booktitle> Logic Programming: Proc. of the Seventh Int'l Conf., </booktitle> <pages> pages 617-633, </pages> <year> 1990. </year>
Reference: [ Baker, 1991 ] <author> Andrew Baker. </author> <title> Nonmonotonic reasoning in the framework of situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 49 </volume> <pages> 5-23, </pages> <year> 1991. </year>
Reference: [ Boyer and Moore, 1988 ] <author> Robert Boyer and J Strother Moore. </author> <title> A computational logic handbook. </title> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: Corresponding theoretical results about SLG resolution would be of interest. Denecker and De Schreye [1993] use their abductive logic programming system SLDNFA for the automation of reasoning problems expressed in A, and Sub-ramanian [1993] shows how the Boyer-Moore theorem prover <ref> [ Boyer and Moore, 1988 ] </ref> can be used for the same purpose. It would be interesting to compare the possiblities of these computational methods with the one proposed here. Acknowledgements We are grateful to Weidong Chen and David Warren for providing us with the SLG system.
Reference: [ Chen and Warren, 1993a ] <author> Weidong Chen and David S. Warren. </author> <title> The SLG system. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference: [ Chen and Warren, 1993b ] <author> Weidong Chen and David S. Warren. </author> <title> Towards effective evaluation of general logic programs. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: X = alive; X = loaded; =&gt; yes 4 SLGN An extended program that does not contain : is called normal. By Theorem 5.4 of <ref> [ Chen and Warren, 1993b ] </ref> , SLG resolution is sound with respect to the well-founded semantics [ Van Gelder et al., 1990 ] for normal programs. <p> The call slgall (Query1,Anss,Tab0,Tab1) invokes the SLG interpreter to evaluate the atom Query1, using the table Tab0. The call to slgall/4 never fails, but it may or may not terminate. If it does terminate, it returns in Anss a list of "answer clauses" <ref> [ Chen and Warren, 1993b ] </ref> . SLG succeeds in proving Query1 just in case Query1 is a member of Anss.
Reference: [ Denecker and De Schreye, 1993 ] <author> Marc Denecker and Danny De Schreye. </author> <title> Representing incomplete knowledge in abductive logic programming. </title> <booktitle> In Logic Programming: Proceedings of the 1993 Int'l Symposium, </booktitle> <pages> pages 147-163, </pages> <year> 1993. </year>
Reference: [ Eshghi and Kowalski, 1989 ] <author> Kave Eshghi and Robert Kowalski. </author> <title> Abduction compared with negation as failure. </title> <editor> In Giorgio Levi and Maurizio Martelli, editors, </editor> <booktitle> Logic Programming: Proc. of the Sixth Int'l Conf., </booktitle> <pages> pages 234-255, </pages> <year> 1989. </year>
Reference: [ Evans, 1989 ] <author> Chris Evans. </author> <title> Negation-as-failure as an approach to the Hanks and Mc-Dermott problem. </title> <booktitle> In Proc. of the Second Int'l Symp. on Artificial Intelligence, </booktitle> <year> 1989. </year>
Reference: [ Gelfond and Lifschitz, 1991 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 365-385, </pages> <year> 1991. </year>
Reference-contexts: The SLG interpreter implements SLG resolution, so the SLG interpreter is sound for the answer set semantics for normal programs. As shown in <ref> [ Gelfond and Lifschitz, 1991 ] </ref> , an extended logic program can be easily compiled into a normal program, to which, in principle, evaluation methods such as SLG can be applied. This transformation is defined as follows. <p> Proposition 1. For any extended program and any ground literal L, if Norm (L) is a consequence of Norm (), then L is a consequence of . This fact is an easy consequence of Proposition 2 from <ref> [ Gelfond and Lifschitz, 1991 ] </ref> . It suggests the following way to use SLG as a query-answering procedure for extended programs. The answer to a ground query L is "yes" when SLG succeeds in proving Norm (L) with respect to Norm ().
Reference: [ Gelfond and Lifschitz, 1992 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Representing actions in extended logic programming. </title> <editor> In Krzysztof Apt, editor, </editor> <booktitle> Proc. Joint Int'l Conf. and Symp. on Logic Programming, </booktitle> <pages> pages 559-573, </pages> <year> 1992. </year>
Reference-contexts: In addition to Anss, the call to slgall/4 also returns in Tab1 the updated table, which is used in later queries. 5 The Translation We first review the syntax of A and then describe our modification of the translation from A into the language of extended programs proposed in <ref> [ Gelfond and Lifschitz, 1992 ] </ref> . The definition of the consequence relation of A can be found in Section 2 of that paper. <p> The translation from A into the language of extended logic programs defined in <ref> [ Gelfond and Lifschitz, 1992 ] </ref> is applicable only to the domain descriptions that do not contain pairs of distinct but similar effect propositions. Our translation is more general: it is defined as long as every equivalence class of similar effect propositions is finite. <p> As in the example in Section 3, the rules use terms of four sorts: situations, propositional fluents, actions and truth values. In specifying the translation, we rely on the following conventions <ref> [ Gelfond and Lifschitz, 1992 ] </ref> . For any fluent expression F , jF j is the fluent name contained in F . For any fluent name F and situation term t, Holds (:F; t) stands for :Holds (F; t). <p> For any value proposition P , if P is a consequence of D then D entails P . The proof of this fact is similar to the proof of the soundness theorem in <ref> [ Gelfond and Lifschitz, 1992 ] </ref> . 6 Relevant Situations Our next goal is to describe the modification of in which the predicate Rel is used. We saw an example of this transformation in Section 3. In general, it is performed as follows. 1.
Reference: [ Gelfond, 1989 ] <author> Michael Gelfond. </author> <title> Autoepistemic logic and formalization of common-sense reasoning. </title> <editor> In Michael Reinfrank, Johan de Kleer, Matthew Ginsberg, and Erik Sandewall, editors, </editor> <booktitle> Non-Monotonic Reasoning: 2nd International Workshop (Lecture Notes in Artificial Intelligence 346), </booktitle> <pages> pages 176-186. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference: [ Hanks and McDermott, 1987 ] <author> Steve Hanks and Drew McDermott. </author> <title> Nonmonotonic logic and temporal projection. </title> <journal> Artificial Intelligence, </journal> <volume> 33(3) </volume> <pages> 379-412, </pages> <year> 1987. </year>
Reference: [ Lifschitz et al., 1993 ] <author> Vladimir Lifschitz, Norman McCain, and Hudson Turner. </author> <title> Automation of reasoning about action: A logic programming approach. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference: [ McCain and Turner, 1993 ] <author> Norman McCain and Hudson Turner. </author> <title> Language independence and language tolerance in logic programs. </title> <note> Submitted for publication, </note> <year> 1993. </year>
Reference-contexts: For any value proposition P , Norm (P ) is a consequence of Norm ( rel D) if and only if Norm (P ) is a consequence of Norm ( fl rel D). The proof of Proposition 4 relies on Theorem 4 from <ref> [ McCain and Turner, 1993 ] </ref> . Let D be a domain description in A such that all equivalence classes of similar effect propositions in D are finite.
Reference: [ Morris, 1988 ] <author> Paul Morris. </author> <title> The anomalous extension problem in default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 35(3) </volume> <pages> 383-399, </pages> <year> 1988. </year>
Reference: [ Reiter, 1980 ] <author> Raymond Reiter. </author> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1,2):81-132, </volume> <year> 1980. </year>
Reference: [ Subramanian, 1993 ] <author> Sakthi Subramanian. </author> <title> A Mechanized Framework for Specifying Problem Domains and Verifying Plans. </title> <type> PhD thesis, </type> <institution> University of Texas, Austin, Department of Computer Science, </institution> <year> 1993. </year>
Reference: [ Turner, 1993 ] <author> Hudson Turner. </author> <title> A monotonicity theorem for extended logic programs. </title> <editor> In David S. Warren, editor, </editor> <booktitle> Logic Programming: Proc. of the Tenth Int'l Conf. on Logic Programming, </booktitle> <pages> pages 567-585. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The assertion of the lemma is not trivial, because, in view of the nonmono-tonic character of programs with negation as failure, the addition of a subgoal to the body of a rule does not necessarily make the program weaker. The proof is based on the monotonicity theorem from <ref> [ Turner, 1993 ] </ref> , and relies on the fact that the programs D and rel D share a signing. 7 Ignoring Sorts As observed in the introduction, the possibility of using SLG to evaluate queries relative to the program Norm ( rel D) depends on the fact that ignoring the
Reference: [ Van Gelder et al., 1990 ] <author> Allen Van Gelder, Kenneth Ross, and John Schlipf. </author> <title> The well-founded semantics for general logic programs. </title> <journal> Journal of ACM, </journal> <pages> pages 221-230, </pages> <year> 1990. </year>
Reference-contexts: X = alive; X = loaded; =&gt; yes 4 SLGN An extended program that does not contain : is called normal. By Theorem 5.4 of [ Chen and Warren, 1993b ] , SLG resolution is sound with respect to the well-founded semantics <ref> [ Van Gelder et al., 1990 ] </ref> for normal programs. It is known that if a ground atom A is true in the well-founded model of a normal program P , then A is a consequence of P according to the answer set semantics.
References-found: 19

