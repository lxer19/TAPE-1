URL: http://www.cs.toronto.edu/~greiner/PAPERS/colt_search.ps
Refering-URL: http://www.cs.toronto.edu/~greiner/PAPERS/
Root-URL: 
Title: ON THE SAMPLE COMPLEXITY OF FINDING GOOD SEARCH STRATEGIES 2n trials of each undetermined experiment
Author: Pekka Orponen Russell Greiner 
Note: 2(  
Address: SF-00510 Helsinki, Finland  Toronto, Ont. M5S 1A4, Canada  
Affiliation: University of Helsinki Department of Computer Science  University of Toronto Department of Computer Science  
Abstract: A satisficing search problem consists of a set of probabilistic experiments to be performed in some order, without repetitions, until a satisfying configuration of successes and failures has been reached. The cost of performing the experiments depends on the order chosen. Earlier work has concentrated on finding optimal search strategies in special cases of this model, such as search trees and and-or graphs, when the cost function and the success probabilities for the experiments are given. In contrast, we study the complexity of "learning" an approximately optimal search strategy when some of the success probabilities are not known at the outset. Working in the fully general model, we show that if n is the number of unknown probabilities, and C is the maximum cost of performing all the experiments, then 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. A. Barnett: </author> <title> How much is control knowledge worth?: A primitive example. </title> <booktitle> Artif. Intell. 22 (1984), </booktitle> <pages> 77-89. </pages>
Reference-contexts: In terms of pac-learnability theory [9], we can say that N (G; *; ffi) samples of each experiment are sufficient to "learn" a good search strategy. A very special case of our problem was studied by Barnett in <ref> [1] </ref>; namely the robustness of the Garey-Simon-Kadane algorithm against errors in probability estimates when there are two independent experiments (and, consequently, only two alternative search strategies). <p> ( e) c (). n 1 1 H H n 2 @ @ e 1 e 2 ffi 4 @ 1 ffi ffi In the strategy tree (to the right), the label and cost of each node are indicated. - [2] R @ @R [2] R [0] [6] R [0] <ref> [1] </ref> R [0] [0] [3] R [0] [4] R [0] [0] The notion of a satisficing search structure generalizes that of a weighted and-or search graph. As an illustration, consider the and-or tree on the left in Figure 1.
Reference: [2] <author> B. Bollobas: </author> <title> Random Graphs. </title> <publisher> Academic Press (1985). </publisher>
Reference-contexts: sequences and experiments e, where does not contain e, c ( e) c (). n 1 1 H H n 2 @ @ e 1 e 2 ffi 4 @ 1 ffi ffi In the strategy tree (to the right), the label and cost of each node are indicated. - <ref> [2] </ref> R @ @R [2] R [0] [6] R [0] [1] R [0] [0] [3] R [0] [4] R [0] [0] The notion of a satisficing search structure generalizes that of a weighted and-or search graph. As an illustration, consider the and-or tree on the left in Figure 1. <p> where does not contain e, c ( e) c (). n 1 1 H H n 2 @ @ e 1 e 2 ffi 4 @ 1 ffi ffi In the strategy tree (to the right), the label and cost of each node are indicated. - <ref> [2] </ref> R @ @R [2] R [0] [6] R [0] [1] R [0] [0] [3] R [0] [4] R [0] [0] The notion of a satisficing search structure generalizes that of a weighted and-or search graph. As an illustration, consider the and-or tree on the left in Figure 1. <p> Proof of Lemma 1. This is a straightforward application of the Chernoff bound for the probability in the tail of a binomial distribution. A simple form of the bound (see, e.g. <ref> [2, p. 12] </ref>) states 4 that if N experiments are performed to obtain an estimate ^p i for a probability p i , and 0, then Pr [j^p i p i j &gt; ] 2e 2N 2 .
Reference: [3] <author> M. R. Garey: </author> <title> Optimal task sequencing with precedence constraints. </title> <journal> Discr. Math. </journal> <volume> 4 (1973), </volume> <pages> 37-56. </pages>
Reference-contexts: INTRODUCTION Consider the following situation (from <ref> [3] </ref>): A sequence of tests are to be performed to decide whether a product specimen is satisfactory. There is a cost associated with each test, and the tests are related by precedence constraints so that certain tests can only be performed after the results of others are known. <p> Other examples of such problems include, e.g, screening employment candidates for a position <ref> [3] </ref>, competing for prizes at a quiz show [3], mining for gold buried in Spanish treasure chests [6], and performing inference in simple expert systems [7]. Garey gave in [3] an efficient algorithm for finding optimal search strategies (in the fl Work supported by the Academy of Finland. <p> Other examples of such problems include, e.g, screening employment candidates for a position <ref> [3] </ref>, competing for prizes at a quiz show [3], mining for gold buried in Spanish treasure chests [6], and performing inference in simple expert systems [7]. Garey gave in [3] an efficient algorithm for finding optimal search strategies (in the fl Work supported by the Academy of Finland. <p> Other examples of such problems include, e.g, screening employment candidates for a position <ref> [3] </ref>, competing for prizes at a quiz show [3], mining for gold buried in Spanish treasure chests [6], and performing inference in simple expert systems [7]. Garey gave in [3] an efficient algorithm for finding optimal search strategies (in the fl Work supported by the Academy of Finland. E-mail: orponen@cs.helsinki.fi. y Work supported by an Operating Grant from the National Science and Engineering Research Council of Canada. <p> n 1 1 H H n 2 @ @ e 1 e 2 ffi 4 @ 1 ffi ffi In the strategy tree (to the right), the label and cost of each node are indicated. - [2] R @ @R [2] R [0] [6] R [0] [1] R [0] [0] <ref> [3] </ref> R [0] [4] R [0] [0] The notion of a satisficing search structure generalizes that of a weighted and-or search graph. As an illustration, consider the and-or tree on the left in Figure 1. <p> : : ; e 4 , corresponding to the leaves of the tree, and letting p 1 ; : : : ; p 4 be the success probabilities of the respective search subgoals. (In general, we could model also the possibility of a search terminating at an internal vertex, cf. <ref> [3, 6, 7] </ref>.) Some representative values of the appropriate result and cost functions in this case are R (fhe 1 ; +ig) = U , R (fhe 1 ; +i; he 2 ; +ig) = S, R (fhe 1 ; i; he 3 ; i; he 4 ; ig) = F
Reference: [4] <author> R. Greiner: </author> <title> Finding the optimal derivation strategy in a redundant knowledge base. </title> <journal> Artif. Intell. </journal> <note> (to appear). </note>
Reference-contexts: The more general problem of search in directed acyclic graphs was later studied by Simon and Kadane [6]. They, however, did not explicitly suggest any efficient algorithm for finding optimal search strategies, and in fact the problem of finding optimal strategies in this case is NP-hard <ref> [4] </ref>. Also satisficing searches in and-or graphs would be of interest; unfortunately, here again it can be shown that finding optimal strategies is NP-hard, even when all the success probabilities are 1 [8]. <p> H H n 2 @ @ e 1 e 2 ffi 4 @ 1 ffi ffi In the strategy tree (to the right), the label and cost of each node are indicated. - [2] R @ @R [2] R [0] [6] R [0] [1] R [0] [0] [3] R [0] <ref> [4] </ref> R [0] [0] The notion of a satisficing search structure generalizes that of a weighted and-or search graph. As an illustration, consider the and-or tree on the left in Figure 1.
Reference: [5] <author> K. S. Natarajan: </author> <title> Optimizing depth-first search of AND-OR trees. </title> <institution> Research report RC-11842, IBM T. J. Watson Research Center (Jan. </institution> <year> 1986). </year>
Reference-contexts: Still, partial results can be obtained for restricted classes of strategies: for instance, Natarajan has presented an efficient algorithm for finding optimal depth-first search strategies for and-or trees <ref> [5] </ref>. All these algorithms take as input a description of the search graph, together with a listing of the costs of the experiments and their success probabilities. In most real-life situations, of course, the actual success probabilities of the experiments are not known and must be estimated, typically by sampling.
Reference: [6] <author> H. A. Simon and J. B. Kadane: </author> <title> Optimal problem-solving search: All-or-none solutions. </title> <booktitle> Artif. Intell. 6 (1975), </booktitle> <pages> 235-247. </pages>
Reference-contexts: It is desired to find a testing sequence that obeys the precedence constraints and minimizes the expected cost before a decision to either accept or reject the specimen can be made. This is a simple example of a satisficing search problem (term due to Simon and Kadane <ref> [6] </ref>), where the goal is to find a single satisfactory configuration of events (in this case, an informative combination of test results) at minimum expected cost. <p> Other examples of such problems include, e.g, screening employment candidates for a position [3], competing for prizes at a quiz show [3], mining for gold buried in Spanish treasure chests <ref> [6] </ref>, and performing inference in simple expert systems [7]. Garey gave in [3] an efficient algorithm for finding optimal search strategies (in the fl Work supported by the Academy of Finland. E-mail: orponen@cs.helsinki.fi. y Work supported by an Operating Grant from the National Science and Engineering Research Council of Canada. <p> E-mail: greiner@ai.toronto.edu. 1 sense of minimal expected cost) for satisficing search problems when the precedence constraints can be represented as a tree. The more general problem of search in directed acyclic graphs was later studied by Simon and Kadane <ref> [6] </ref>. They, however, did not explicitly suggest any efficient algorithm for finding optimal search strategies, and in fact the problem of finding optimal strategies in this case is NP-hard [4]. <p> contain e, c ( e) c (). n 1 1 H H n 2 @ @ e 1 e 2 ffi 4 @ 1 ffi ffi In the strategy tree (to the right), the label and cost of each node are indicated. - [2] R @ @R [2] R [0] <ref> [6] </ref> R [0] [1] R [0] [0] [3] R [0] [4] R [0] [0] The notion of a satisficing search structure generalizes that of a weighted and-or search graph. As an illustration, consider the and-or tree on the left in Figure 1. <p> : : ; e 4 , corresponding to the leaves of the tree, and letting p 1 ; : : : ; p 4 be the success probabilities of the respective search subgoals. (In general, we could model also the possibility of a search terminating at an internal vertex, cf. <ref> [3, 6, 7] </ref>.) Some representative values of the appropriate result and cost functions in this case are R (fhe 1 ; +ig) = U , R (fhe 1 ; +i; he 2 ; +ig) = S, R (fhe 1 ; i; he 3 ; i; he 4 ; ig) = F
Reference: [7] <author> D. E. Smith: </author> <title> Controlling backward inference. </title> <booktitle> Artif. Intell. 39 (1989), </booktitle> <pages> 145-208. </pages>
Reference-contexts: Other examples of such problems include, e.g, screening employment candidates for a position [3], competing for prizes at a quiz show [3], mining for gold buried in Spanish treasure chests [6], and performing inference in simple expert systems <ref> [7] </ref>. Garey gave in [3] an efficient algorithm for finding optimal search strategies (in the fl Work supported by the Academy of Finland. E-mail: orponen@cs.helsinki.fi. y Work supported by an Operating Grant from the National Science and Engineering Research Council of Canada. <p> : : ; e 4 , corresponding to the leaves of the tree, and letting p 1 ; : : : ; p 4 be the success probabilities of the respective search subgoals. (In general, we could model also the possibility of a search terminating at an internal vertex, cf. <ref> [3, 6, 7] </ref>.) Some representative values of the appropriate result and cost functions in this case are R (fhe 1 ; +ig) = U , R (fhe 1 ; +i; he 2 ; +ig) = S, R (fhe 1 ; i; he 3 ; i; he 4 ; ig) = F
Reference: [8] <author> S. Sahni: </author> <title> Computationally related problems. </title> <journal> SIAM J. Comput. </journal> <volume> 3 (1974), </volume> <pages> 262-279. </pages>
Reference-contexts: Also satisficing searches in and-or graphs would be of interest; unfortunately, here again it can be shown that finding optimal strategies is NP-hard, even when all the success probabilities are 1 <ref> [8] </ref>. Still, partial results can be obtained for restricted classes of strategies: for instance, Natarajan has presented an efficient algorithm for finding optimal depth-first search strategies for and-or trees [5].
Reference: [9] <author> L. G. Valiant: </author> <title> A theory of the learnable. </title> <booktitle> Comm. ACM 27 (1984), </booktitle> <pages> 1134-1142. 7 </pages>
Reference-contexts: In terms of pac-learnability theory <ref> [9] </ref>, we can say that N (G; *; ffi) samples of each experiment are sufficient to "learn" a good search strategy.
References-found: 9

