URL: http://www.daimi.aau.dk/~quaglia/Papers/concur95.ps.gz
Refering-URL: http://www.daimi.aau.dk/~quaglia/papers.html
Root-URL: http://www.daimi.aau.dk
Email: fgiangi,ugo,quagliag@di.unipi.it  
Title: The Weak Late -calculus Semantics as Observation Equivalence  
Author: Gian-Luigi Ferrari Ugo Montanari Paola Quaglia 
Date: 57-71, 1995  
Note: In: Proc. CONCUR '95, LNCS 962, pp.  
Address: Pisa  
Affiliation: Dipartimento di Informatica, Universita di  
Abstract: We show that the Weak Late -calculus semantics can be characterized as ordinary Observation congruence over a specialized transition system where both the instantiation of input placeholders and the name substitutions, due e.g. to communication, are explicitly handled via suitable constructors. The approach presented here allows to axiomatize the Weak Late -calculus semantics by simply adding Milner's o -laws to the proof system for the Strong equivalence. Resorting to Observation equivalence provides a framework which is general enough to allow to recover, in straightforward ways, other bisimulation semantics (e.g. Early, both Strong and Weak, and Dynamic and Branching, both Early and Late). 
Abstract-found: 1
Intro-found: 1
Reference: [ABV94] <author> L. Aceto, B. Bloom, and F. Vaandrager. </author> <title> Turning SOS Rules into Equations. </title> <journal> Information and Computation, </journal> <volume> 111(1) </volume> <pages> 1-52, </pages> <year> 1994. </year>
Reference-contexts: CCS-like [Mil80]) labelled transition system, where the usual notion of Strong bisimulation applies. We claim that reasoning about the -calculus semantics in terms of ordinary bisimulation may be of both theoretical and pragmatic interest: General theorems of the format-based theory may be applied (e.g. those proved in <ref> [DS85, ABV94] </ref>), and algorithms for CCS automated verification tools may be re-used (e.g. [CPS93]). This paper provides a further step towards accomplishing the task of interpreting the -calculus semantics as ordinary bisimulation. <p> This last axiomatization is gotten by exploiting the procedure presented in <ref> [ABV94] </ref>. The idea of [ABV94] is to reduce processes to head normal forms (finite labelled trees) by introducing suitable auxiliary operators. Thus, proving completeness is reduced to proving equalities of labelled finite trees. This problem was already solved in [HM85]. <p> This last axiomatization is gotten by exploiting the procedure presented in <ref> [ABV94] </ref>. The idea of [ABV94] is to reduce processes to head normal forms (finite labelled trees) by introducing suitable auxiliary operators. Thus, proving completeness is reduced to proving equalities of labelled finite trees. This problem was already solved in [HM85].
Reference: [Ace94] <author> L. Aceto. </author> <title> On "axiomatising finite concurrent processes". </title> <journal> SIAM Journal of Computing, </journal> <volume> 23(4) </volume> <pages> 852-863, </pages> <year> 1994. </year>
Reference-contexts: Also, observe that auxiliary operators are only used for the axiomatization of the low level -calculus processes. This avoids the problems discussed in <ref> [Ace94] </ref>. Theorem 7 (Axiomatic characterizations of the Late semantics) Let P , Q be finite -calculus processes, and let N = fn (P; Q).
Reference: [CPS93] <author> R. Cleaveland, J. Parrow, and B. Steffen. </author> <title> The Concurrency Workbench: A Semantics-Based Tool for the Verification of Concurrent Systems. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 15(1) </volume> <pages> 36-72, </pages> <year> 1993. </year>
Reference-contexts: We claim that reasoning about the -calculus semantics in terms of ordinary bisimulation may be of both theoretical and pragmatic interest: General theorems of the format-based theory may be applied (e.g. those proved in [DS85, ABV94]), and algorithms for CCS automated verification tools may be re-used (e.g. <ref> [CPS93] </ref>). This paper provides a further step towards accomplishing the task of interpreting the -calculus semantics as ordinary bisimulation. <p> The main contributions of our paper are the characterization and the axiomatization of the Weak Late bisimulation in terms of Observation equivalence. This exports to the -calculus setting existing algorithms and tools for checking process equivalences (e.g. <ref> [CPS93] </ref>). Also, by virtue of standard results, the axiomatizations of other o -forgetting equivalences can be straightforwardly got (e.g. Dynamic [MS92], and Branching [vGW89], both Early and Late).
Reference: [DS85] <author> R. De Simone. </author> <title> Higher level synchronizing devices in MEIJE-SCCS. </title> <journal> Theoretical Computer Science, </journal> <volume> 37(3) </volume> <pages> 245-267, </pages> <year> 1985. </year>
Reference-contexts: CCS-like [Mil80]) labelled transition system, where the usual notion of Strong bisimulation applies. We claim that reasoning about the -calculus semantics in terms of ordinary bisimulation may be of both theoretical and pragmatic interest: General theorems of the format-based theory may be applied (e.g. those proved in <ref> [DS85, ABV94] </ref>), and algorithms for CCS automated verification tools may be re-used (e.g. [CPS93]). This paper provides a further step towards accomplishing the task of interpreting the -calculus semantics as ordinary bisimulation. <p> The next move of the process 0 :: y:P 0 shall be the instantiation of the inputted name y. As a final remark, notice that the inference rules of Tab. 1 and of Tab. 2 fit with a mild generalization of the De Simone format <ref> [DS85] </ref>. The update and the result functions (j,ffi) are reported in Tab. 3 in McCarthy style [McC60]. In the definition of j, we coerce elements to be singleton sets. The first step in computing the update function j consists in checking the satisfability of the obligation.
Reference: [FGM91] <author> G.-L. Ferrari, R. Gorrieri, and U. Montanari. </author> <title> An Extended Expansion Theorem. </title> <editor> In S. Abramsky and T.S.E. Maibaum, editors, </editor> <booktitle> Proc. 3rd TAPSOFT, volume 494 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The first component is essentially an action in the same sense of the -calculus. The second component, called obligation, is a logical formula which symbolically codes requirements on names. Transition labels are equipped with some operations, so they form an `observation algebra' <ref> [FGM91] </ref>. The symbolic operational semantics is reported in Tab. 1. Notice that the execution of the new prefix y results in the action [y] which, although resembling the concretions of [Mil91], has no counterpart in the - calculus dynamics. Also, communication is characterized by a single inference rule.
Reference: [FMQ94] <author> G.-L. Ferrari, U. Montanari, and P. Quaglia. </author> <title> A -calculus with Explicit Substitutions: the Late Semantics. </title> <editor> In I. Privara, B. Rovan, and P. Ruzicka, editors, </editor> <booktitle> Proc. 19th MFCS, volume 841 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: 0 Introduction This paper aims at contributing to the understanding of the Weak -calculus bisimulation semantics [Mil90]. The -calculus [MPW92] is an instance of value-passing process algebra where values are names, and then communication causes substitution of names for names. In <ref> [FMQ94] </ref> we proposed an alternative formulation of the Strong -calculus semantics. There, contrary to the original definition of the calculus, name substitutions were explicitly handled via the introduction of a suitable state operator. That approach allowed the characterization of the -calculus transitional semantics as ordinary (i.e. <p> This paper provides a further step towards accomplishing the task of interpreting the -calculus semantics as ordinary bisimulation. We generalize the techniques adopted in <ref> [FMQ94] </ref> in order to fairly deal with the ? Work partially supported by ESPRIT BRA Project 6454 CONFER, and by Progetto Coordinato CNR `Strumenti per la Specifica e la Verifica di Proprieta Critiche di Sistemi Concorrenti e Distribuiti'. -calculus Weak bisimulation equivalences which, ignoring the silent actions rep-resenting internal communications, have <p> The function ffi yields the observable result out of the transition (ranged over by ae, ae 1 ; : : :). The rule R1, which has no counterpart in the transition system of <ref> [FMQ94] </ref>, shows the first-class role of instantiation in the -calculus. Correspondingly to R0 ! :: P . 0 :: P 0 R1 hx (y);Ci :: P . 0 :: y:P 0 Table 2. <p> Theorem 5 (Coincidence with Strong Late bisimulation) Let P , Q be -calculus processes, and let N = fn (P; Q). Then P The Strong Late -calculus semantics was already characterized in terms of ordinary Strong bisimulation in <ref> [FMQ94] </ref>. In that paper we used a slightly different approach: We resorted to the observability of the input parameter without giving the placeholder instantiation a distinguished operational interpretation. <p> As a o -step can convey extra information, for the transition system presented in <ref> [FMQ94] </ref>, the axiomatization of the Weak bisimulation needs more efforts than simply augmenting the proof system for the Strong equivalence with Milner's o -laws. By contrast, assigning to the parameter instantiation a distinguished operational meaning allows us to uniformly deal with both the Strong and the Weak cases. <p> By contrast, assigning to the parameter instantiation a distinguished operational meaning allows us to uniformly deal with both the Strong and the Weak cases. To that extent, although a slightly different statement was already proved in <ref> [FMQ94] </ref>, Theorem 5 can be considered a contribution of this paper. Commenting on Theorem 5, notice that the observability of the placeholder instantiation is a must when one tries to characterize the Late universal quantification on w of (SL) in a Strong bisimulation setting. <p> The characterization and the axiomatization of the Weak Late semantics as Observation equivalence is an original contribution. A previous definition of the Strong Late semantics in terms of ordinary bisimulation already appeared in <ref> [FMQ94] </ref>, where the actual instantiation of the input placeholder was not assigned a distinguished operational interpretation. The present framework generalizes the approach exploited in [FMQ94] which is not flexible enough to allow to retrieve the Weak Late semantics in the expected way, i.e. by simply adding the o -laws to the <p> A previous definition of the Strong Late semantics in terms of ordinary bisimulation already appeared in <ref> [FMQ94] </ref>, where the actual instantiation of the input placeholder was not assigned a distinguished operational interpretation. The present framework generalizes the approach exploited in [FMQ94] which is not flexible enough to allow to retrieve the Weak Late semantics in the expected way, i.e. by simply adding the o -laws to the axiom system for the Strong equivalence. Our approach is general enough to allow to recover, in straightforward ways, other bisimulation semantics.
Reference: [FMQ95a] <author> G.-L. Ferrari, G. Modoni, and P. Quaglia. </author> <title> Towards a Semantic-Based Verification Environment for the -calculus. </title> <note> Submitted for publication, </note> <year> 1995. </year>
Reference-contexts: This peculiarity, together with the use of a behavioural equivalence which abstracts away from o moves, can be of practical interest in the implementation of automated verification tools <ref> [FMQ95a] </ref>. 1 The -calculus A -calculus process is written :: P , where is an environment keeping track of the associations among names, and P is a process built up by the -calculus syntax plus a new kind of prefix.
Reference: [FMQ95b] <author> G.-L. Ferrari, U. Montanari, and P. Quaglia. </author> <title> A -calculus with Explicit Substitutions. </title> <note> Full version of [FMQ94], to appear in Theoretical Computer Science, </note> <year> 1995. </year>
Reference-contexts: In <ref> [FMQ95b] </ref> we characterized both the Early and the Late Strong bisim-ulations [MPW93] in terms of the ordinary Strong bisimulation [Par81, Mil83] over specialized transition systems which made use of suitable definitions of the pair (j,ffi). <p> In this paper we put forward a transition system for the -calculus which, to some extent, can be considered initial w.r.t. those presented in <ref> [FMQ95b] </ref>. We show that the -calculus directly captures the Strong Late -calculus semantics and it comes equipped with a complete axiom system which, when augmented with the o -laws, characterizes the Weak Late semantics. Also, both the Strong and the Weak Early semantics can be retrieved straightforwardly. <p> The above discussion should suffice to convince the reader that the Early -calculus semantics (both Strong and Weak) can be easily retrieved by imposing the atomicity of the input and of the subsequent instantiation move (this is indeed an easy consequence of a result proved in <ref> [FMQ95b] </ref>). For instance, letting N = fx; zg, the Early tree for the process N :: x (y):[y = z]o:0 (cf. Fig. 1) is displayed in Fig. 2.
Reference: [HL93] <author> M. Hennessy and H. Lin. </author> <title> Proof Systems for Message-Passing Process Algebras. </title> <editor> In E. Best, editor, </editor> <booktitle> Proc. 4th CONCUR, volume 715 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Up-to-date, the Weak Late -calculus bisimulation was only axiomatized relying on the notion of Symbolic bisimulation [Lin95]. The Symbolic bisimula-tion is usually got as closure on top of a family of indexed bisimulation relations <ref> [HL93] </ref>. To our knowledge, no result is available in that setting about the Branching and the Dynamic equivalence.
Reference: [HM85] <author> M. Hennessy and R. Milner. </author> <title> Algebraic Laws for Nondeterminism and Con-currency. </title> <journal> Journal of the ACM, </journal> <volume> 32(1) </volume> <pages> 137-161, </pages> <year> 1985. </year>
Reference-contexts: The idea of [ABV94] is to reduce processes to head normal forms (finite labelled trees) by introducing suitable auxiliary operators. Thus, proving completeness is reduced to proving equalities of labelled finite trees. This problem was already solved in <ref> [HM85] </ref>. The first step of the procedure consists in breaking down, by means of auxiliary operators, each process constructors f whose operational behaviour is described by more than one inference rule.
Reference: [Lin95] <author> H. Lin. </author> <title> Complete Inference Systems for Weak Bisimulation Equivalences in the -Calculus. </title> <note> To appear in the Proc. of TAPSOFT '95, </note> <year> 1995. </year>
Reference-contexts: Also, by virtue of standard results, the axiomatizations of other o -forgetting equivalences can be straightforwardly got (e.g. Dynamic [MS92], and Branching [vGW89], both Early and Late). Up-to-date, the Weak Late -calculus bisimulation was only axiomatized relying on the notion of Symbolic bisimulation <ref> [Lin95] </ref>, whose relationship with Branching and Dynamic equivalence is still not investigated. Finally, as during the execution of finite processes only finitely many names are considered, our approach allows -calculus processes to be modelled by finitely branching labelled trees. <p> Up-to-date, the Weak Late -calculus bisimulation was only axiomatized relying on the notion of Symbolic bisimulation <ref> [Lin95] </ref>. The Symbolic bisimula-tion is usually got as closure on top of a family of indexed bisimulation relations [HL93]. To our knowledge, no result is available in that setting about the Branching and the Dynamic equivalence.
Reference: [McC60] <author> J. McCarthy. </author> <title> Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part 1. </title> <journal> Communications of the ACM, </journal> <volume> 3, </volume> <year> 1960. </year>
Reference-contexts: As a final remark, notice that the inference rules of Tab. 1 and of Tab. 2 fit with a mild generalization of the De Simone format [DS85]. The update and the result functions (j,ffi) are reported in Tab. 3 in McCarthy style <ref> [McC60] </ref>. In the definition of j, we coerce elements to be singleton sets. The first step in computing the update function j consists in checking the satisfability of the obligation. If the obligation evaluates to false in the environment (i.e. :[[C]]), then the function j results in the empty set.
Reference: [Mil80] <author> R. Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: In [FMQ94] we proposed an alternative formulation of the Strong -calculus semantics. There, contrary to the original definition of the calculus, name substitutions were explicitly handled via the introduction of a suitable state operator. That approach allowed the characterization of the -calculus transitional semantics as ordinary (i.e. CCS-like <ref> [Mil80] </ref>) labelled transition system, where the usual notion of Strong bisimulation applies.
Reference: [Mil83] <author> R. Milner. </author> <title> Calculi for synchrony and asynchrony. </title> <journal> Theoretical Computer Science, </journal> <volume> 25 </volume> <pages> 267-310, </pages> <year> 1983. </year>
Reference-contexts: In [FMQ95b] we characterized both the Early and the Late Strong bisim-ulations [MPW93] in terms of the ordinary Strong bisimulation <ref> [Par81, Mil83] </ref> over specialized transition systems which made use of suitable definitions of the pair (j,ffi). <p> Definition of (j; ffi). standard labelled transition system, the ordinary notions of Strong bisimulation <ref> [Par81, Mil83] </ref> and of Weak (also called Observation) bisimulation and congruence [Mil89] apply. Definition 3 (Ordinary equivalences) Let ===. be the reflexive and transitive closure of o ae ae bae and ===. if ae 6= o . Also, let S be a binary symmetric relation on -calculus processes.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: The functional intuition about input actions has an impact on behavioural equivalences, and particularly on the Weak bisimulation. Letting =) be the reflexive and transitive closure of o ff ff bff if ff = o , and =) otherwise, the ordinary Weak bisimulation clause is as follows <ref> [Mil89] </ref>: ff !P 0 then for some Q 0 , Q bff =)Q 0 and P 0 is Weak bisimilar to Q 0 . <p> That approach, where the instantiation of the input placeholder is not assigned a distinguished operational meaning, is not general enough to allow to retrieve the Weak Late semantics by simply adding Milner's o -laws <ref> [Mil89] </ref> to the axiom system for the Strong equivalence. In this paper we put forward a transition system for the -calculus which, to some extent, can be considered initial w.r.t. those presented in [FMQ95b]. <p> Definition of (j; ffi). standard labelled transition system, the ordinary notions of Strong bisimulation [Par81, Mil83] and of Weak (also called Observation) bisimulation and congruence <ref> [Mil89] </ref> apply. Definition 3 (Ordinary equivalences) Let ===. be the reflexive and transitive closure of o ae ae bae and ===. if ae 6= o . Also, let S be a binary symmetric relation on -calculus processes.
Reference: [Mil90] <author> R. Milner. </author> <title> Weak bisimilarity: congruences and equivalences. </title> <booktitle> Unpublished notes, </booktitle> <year> 1990. </year>
Reference-contexts: 0 Introduction This paper aims at contributing to the understanding of the Weak -calculus bisimulation semantics <ref> [Mil90] </ref>. The -calculus [MPW92] is an instance of value-passing process algebra where values are names, and then communication causes substitution of names for names. In [FMQ94] we proposed an alternative formulation of the Strong -calculus semantics. <p> The Late interpretation of input actions breaks the above double arrow in two, and the bisimulation clause becomes <ref> [Mil90] </ref>: (WL) if P !P 0 then for some Q 0 , Q=) x (y) !Q 0 and for all w there exists Q 00 such that Q 0 f w =yg=)Q 00 and P 0 f w =yg is Weak Late bisimilar to Q 00 . <p> We first review the actual definitions of the Strong Late bisimulation, the Weak Late bisimulation, and the Weak Late ground-equality <ref> [Mil90] </ref>. Analogously to the Observation semantics of CCS, the last equivalence, in order to guarantee substitutivity in choice contexts, requires a silent action to be matched by at least one silent move.
Reference: [Mil91] <author> R. Milner. </author> <title> The Polyadic -Calculus: a Tutorial. </title> <type> Report ECS-LFCS-91-180, </type> <institution> Comp. Science Dep., Edinburgh University, </institution> <year> 1991. </year>
Reference-contexts: P ::= 0 j o:P j x (y):P j y:P j x y:P j [x = y]P j P + P j P jP j (y)P The prefix y, which is a formal binder resembling the abstraction operator of <ref> [Mil91] </ref>, is the only novelty w.r.t. the -calculus syntax: It calls for an actual instantiation of the name y. In spite of the new prefix, we refer to the right component of any -calculus process as -calculus process (ranged over by P , Q, : : :). <p> Transition labels are equipped with some operations, so they form an `observation algebra' [FGM91]. The symbolic operational semantics is reported in Tab. 1. Notice that the execution of the new prefix y results in the action [y] which, although resembling the concretions of <ref> [Mil91] </ref>, has no counterpart in the - calculus dynamics. Also, communication is characterized by a single inference rule. More precisely, we avoided to use the Close rule which describes the communication of a private name and causes a restriction to appear on top of synchronizing processes.
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A Calculus of Mobile Processes, Part I and II. </title> <journal> Information and Computation, </journal> <volume> 100(1) </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: 0 Introduction This paper aims at contributing to the understanding of the Weak -calculus bisimulation semantics [Mil90]. The -calculus <ref> [MPW92] </ref> is an instance of value-passing process algebra where values are names, and then communication causes substitution of names for names. In [FMQ94] we proposed an alternative formulation of the Strong -calculus semantics.
Reference: [MPW93] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> Modal logics for mobile processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 114(1) </volume> <pages> 149-171, </pages> <year> 1993. </year>
Reference-contexts: In [FMQ95b] we characterized both the Early and the Late Strong bisim-ulations <ref> [MPW93] </ref> in terms of the ordinary Strong bisimulation [Par81, Mil83] over specialized transition systems which made use of suitable definitions of the pair (j,ffi). <p> The fact that names can be transmitted in interactions makes the -calculus semantics naturally proliferate in two distinct families depending on the operational intuition about input actions <ref> [MPW93] </ref>.
Reference: [MS92] <author> U. Montanari and V. Sassone. </author> <title> Dynamic congruence vs. progressing bisimu-lation for CCS. </title> <note> Fundamenta Informaticae, XVI:171-199, </note> <year> 1992. </year>
Reference-contexts: This exports to the -calculus setting existing algorithms and tools for checking process equivalences (e.g. [CPS93]). Also, by virtue of standard results, the axiomatizations of other o -forgetting equivalences can be straightforwardly got (e.g. Dynamic <ref> [MS92] </ref>, and Branching [vGW89], both Early and Late). Up-to-date, the Weak Late -calculus bisimulation was only axiomatized relying on the notion of Symbolic bisimulation [Lin95], whose relationship with Branching and Dynamic equivalence is still not investigated. <p> For instance, letting N = fx; zg, the Early tree for the process N :: x (y):[y = z]o:0 (cf. Fig. 1) is displayed in Fig. 2. The -calculus also allows to characterize the Branching [vGW89] and the Dynamic <ref> [MS92] </ref> equivalence, which obviously proliferate into Early and Late N :: x (y):P N + (y; N (z)) :: P h N (x); N (x)i h N (x); N (z)i h N (x);NewD N i T T T T T T T T T T T T T T T ** <p> We now sketch an analogous result on Dynamic equivalence, the largest Weak bisimulation which is also a Weak congruence. The axiomatization of the Dynamic equivalence differs from that of the Observational equivalence only for disregarding the first o -law <ref> [MS92] </ref>. E.g., as o:b b but o:b 6 c b, the Weak congruent CCS-like processes a:o:b and a:b are not Dynamic equivalent. For the Dynamic equivalence, we get the following result.
Reference: [Par81] <author> D. Park. </author> <title> Concurrency and automata on infinite sequences. </title> <booktitle> In Proc. 5th GI-Conference, volume 104 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: In [FMQ95b] we characterized both the Early and the Late Strong bisim-ulations [MPW93] in terms of the ordinary Strong bisimulation <ref> [Par81, Mil83] </ref> over specialized transition systems which made use of suitable definitions of the pair (j,ffi). <p> Definition of (j; ffi). standard labelled transition system, the ordinary notions of Strong bisimulation <ref> [Par81, Mil83] </ref> and of Weak (also called Observation) bisimulation and congruence [Mil89] apply. Definition 3 (Ordinary equivalences) Let ===. be the reflexive and transitive closure of o ae ae bae and ===. if ae 6= o . Also, let S be a binary symmetric relation on -calculus processes.
Reference: [Plo81] <author> G. D. Plotkin. </author> <title> A Structural Approach to Operational Semantics. </title> <type> Technical Report DAIMI-FN-19, </type> <institution> Comp. Science Dep., Aarhus University, </institution> <year> 1981. </year>
Reference-contexts: (of an action ff) are written f n (P ) (f n (ff)), and bn (P ) (bn (ff)) respectively, while f n (P; Q) is used as a shorthand for fn (P ) [ f n (Q). 1.0 The symbolic operational semantics We first define, in the style of <ref> [Plo81] </ref>, the low level transition relation between -calculus processes. The operational semantics is called `symbolic' in that name instantiation is not applied to processes, but rather recorded by transition labels (ranged over by !, ! 0 ; : : :). Transition labels are pairs of the form hff; Ci.
Reference: [vGW89] <author> R.J. van Glabbeek and W.P. Weijland. </author> <title> Branching time and abstraction in bisimulation semantics (extended abstract). </title> <booktitle> In Information Processing, Proc. IFIP 11th World Computer Congress, </booktitle> <pages> pages 613-618, </pages> <year> 1989. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: This exports to the -calculus setting existing algorithms and tools for checking process equivalences (e.g. [CPS93]). Also, by virtue of standard results, the axiomatizations of other o -forgetting equivalences can be straightforwardly got (e.g. Dynamic [MS92], and Branching <ref> [vGW89] </ref>, both Early and Late). Up-to-date, the Weak Late -calculus bisimulation was only axiomatized relying on the notion of Symbolic bisimulation [Lin95], whose relationship with Branching and Dynamic equivalence is still not investigated. <p> For instance, letting N = fx; zg, the Early tree for the process N :: x (y):[y = z]o:0 (cf. Fig. 1) is displayed in Fig. 2. The -calculus also allows to characterize the Branching <ref> [vGW89] </ref> and the Dynamic [MS92] equivalence, which obviously proliferate into Early and Late N :: x (y):P N + (y; N (z)) :: P h N (x); N (x)i h N (x); N (z)i h N (x);NewD N i T T T T T T T T T T T T <p> For instance, the Branching bisimulation breaks the Observational equivalence of the two CCS-like processes a+ o:(b +c) + c and a+ o:(b +c). In fact no Branching bisimulation game can match the c-labelled transition of the first process. By a standard result <ref> [vGW89] </ref>, we got the following statement. Proposition 8 (Axiomatic characterizations of the Branching semantics) Let P , Q be finite -calculus processes, and let N = f n (P; Q).
References-found: 23

