URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3648/3648.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: e-mail: zhaohui@cs.umd.edu, min@cs.umd.edu, nick@cs.umd.edu  
Title: Adaptive Cost Estimation for Client-Server based Heterogeneous Database Systems  
Author: Zhaohui Yao Chungmin M. Chen Nick Roussopoulos 
Address: College Park  
Affiliation: Department of Computer Science University of Maryland,  
Abstract: In this paper, we propose a new method for estimating query cost in client-server based heterogeneous database management system. The cost estimation parameters are adjusted by an Adaptive Cost Estimation (ACE) module which uses query execution feedback yielding more and more accurate cost estimates. The most important features of ACE are its detailed cost model which accounts for all costs incurred, its rapid convergence to the actual parameter values, and its low overhead which permits continuous adaptation during the run time of the system. ACE has been implemented and tested with Oracle 6, Oracle 7, Ingres, and ADMS. Extensive experiments performed on these systems show that the ACE's time estimates are within 20% of the real wall-clock time for more than 92% of the queries. This percentage surpasses 98% for queries over 20 seconds.
Abstract-found: 1
Intro-found: 1
Reference: [BT94] <author> D. Bitton and C. Turbyfill. </author> <title> A Retrospective on the Wisconsin Benchmark. </title> <editor> In M. Stonebraker, editor, </editor> <booktitle> Readings in Database Systems, </booktitle> <pages> pages 422-441. </pages> <publisher> Morgan kauf-mann, </publisher> <year> 1994. </year>
Reference-contexts: The clients were run on separate SparcStation 2s. All client and server machines are connected via a shared Ethernet network. All the experiments were conducted during the night under low network/server loads. We used the Wisconsin Benchmark relations <ref> [BT94] </ref> in all our experiments. The eight tables used along with their statistics are shown in Table 3. These are pre-loaded into each of the server DBMSs before the experiments are run.
Reference: [CR94] <author> C. Chen and N. Roussopoulos. </author> <title> Adaptive Selectivity Estimation Using Query Feedback. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <year> 1994. </year>
Reference-contexts: The ACE module works together with another adaptive module of ADM S which estimates the selectivities from exactly the sizes of the returned results <ref> [CR94] </ref>. 1.1 The Problem and Related Work Consider the distributed query shown in Figure 1 where two global query plans are considered. In the query, P is a selection predicate on R 1 , fi a join predicate between R 1 and R 2 . <p> One of the key factors related to the cost estimation is the predicate selectivity, which is the number of tuples satisfying a given predicate. The accuracy of selectivity estimation 10 directly affects the accuracy of the query cost estimation. ADMS uses another adaptive module, called Adaptive Selectivity Estimator (ASE) <ref> [CR94] </ref>, for interpolating the value distributions of attributes which are then used to estimate selectivities. ASE produces accurate estimates of record selectivities from real attribute value distributions which are adaptively approximated by a curve-fitting polynomial using the query feedback mechanism.
Reference: [Day85] <author> U. Dayal. </author> <title> Query Processing in Multidatabase System. </title> <editor> In W. Kim, D. Reiner, and D. Batory, editors, </editor> <title> Query Processing in Database Systems. </title> <publisher> Springer Verlag, </publisher> <year> 1985. </year>
Reference-contexts: An HDBMS treats each of the foreign DBMSs as a "closed-box" component which cannot be modified and which retains its local autonomy, i.e. continues to support local applications. As in traditional distributed DBMSs, query optimization is important in HDBMS <ref> [Day85, SY + 89, SL90, DKS92, LS92, ZL94, DSD95] </ref>, particularly for global queries which are joins between tables from separate foreign DBMSs. A global execution plan for a global query constitutes of a sequence of sub-queries which specifies the join order, table/result shipping direction, and execution sites.
Reference: [DKS92] <author> W. Du, R. Krishnamurthy, and M. Shan. </author> <title> Query Optimization in Heterogeneous DBMS. </title> <booktitle> In Proc. of the 18th International Conference on VLDB, </booktitle> <address> Vancouver, Canada, </address> <year> 1992. </year>
Reference-contexts: An HDBMS treats each of the foreign DBMSs as a "closed-box" component which cannot be modified and which retains its local autonomy, i.e. continues to support local applications. As in traditional distributed DBMSs, query optimization is important in HDBMS <ref> [Day85, SY + 89, SL90, DKS92, LS92, ZL94, DSD95] </ref>, particularly for global queries which are joins between tables from separate foreign DBMSs. A global execution plan for a global query constitutes of a sequence of sub-queries which specifies the join order, table/result shipping direction, and execution sites. <p> A global execution plan for a global query constitutes of a sequence of sub-queries which specifies the join order, table/result shipping direction, and execution sites. Although the optimization techniques used in traditional distributed DBMSs [ML86] can be adapted to HDBMSs <ref> [DKS92] </ref>, they induce some non-trivial problems. One of the problems is cost estimation for query plans, which has been a recent research issue in HDBMS [DKS92, ZL94]. Cost estimation is essential in selecting the best plan among various global query plans. <p> Although the optimization techniques used in traditional distributed DBMSs [ML86] can be adapted to HDBMSs [DKS92], they induce some non-trivial problems. One of the problems is cost estimation for query plans, which has been a recent research issue in HDBMS <ref> [DKS92, ZL94] </ref>. Cost estimation is essential in selecting the best plan among various global query plans. <p> The importance of developing an appropriate cost estimation mechanism for query optimization in HDBMSs was first pointed out in [SY + 89]. Two methods, database calibration <ref> [DKS92] </ref> and query sampling [ZL94], were later proposed based on the philosophy that individual foreign DBMSs are viewed as "black-boxes" of which cost models can be "deduced" based on the cost information revealed by the execution of queries (namely, the actual query execution times). 3 In the calibration method, synthetic databases <p> The values of a i;j determine the accuracy of the cost estimation. 2.3 Adaptive Cost Estimation Database calibration <ref> [DKS92] </ref> and query sampling [ZL94] techniques have been proposed to estimate the unknown parameters of a foreign cost function. As discussed in section 1.1, both methods require a non-trivial periodic tuning and incur substantial overhead.
Reference: [DR94] <author> A. Delis and N. Roussopoulos. </author> <title> Management of Updates in the Enhanced Client-Server DBMS. </title> <booktitle> In Proccedings of the 14th IEEE Int. Conference on Distributed Computing Systems, </booktitle> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: The adapted parameters are then used for estimating follow-up queries. ACE is operational in ADM S, an Enhanced Client-Server HDBMS prototype developed at the University of Maryland <ref> [RK86, RES93, DR94] </ref>, and obtains accurate cost estimates with small CPU overhead but no I/O. <p> based HDBMS prototype with very little coding overhead. 3 Implementation of ACE We implemented ACE inside ADM S, an enhanced multi-site client/server (E-CS) HDBMS, in which the clients are fully-fledged DBMSs capable of caching and maintaining downloaded data subsets obtained as a result of running global queries on multiple DBMSs <ref> [RK86, RES93, DR94] </ref>. The database servers are commercial and other prototype DBMSs accessed through application level gateway software, called ADM S+, which capitalizes on incremental access methods [Rou91] for downloading and maintaining cached data results in the form of materialized views.
Reference: [DSD95] <author> W. Du, M.-C. Shan, and U. Dayal. </author> <title> Reducing Multidatabase Query Response Time by Tree Balancing. </title> <booktitle> In Procs. of the 1995 ACM-SIGMOD Int'l Conf. on Management of Data, </booktitle> <year> 1995. </year>
Reference-contexts: An HDBMS treats each of the foreign DBMSs as a "closed-box" component which cannot be modified and which retains its local autonomy, i.e. continues to support local applications. As in traditional distributed DBMSs, query optimization is important in HDBMS <ref> [Day85, SY + 89, SL90, DKS92, LS92, ZL94, DSD95] </ref>, particularly for global queries which are joins between tables from separate foreign DBMSs. A global execution plan for a global query constitutes of a sequence of sub-queries which specifies the join order, table/result shipping direction, and execution sites.
Reference: [K + 85] <editor> W. Kim et al., editors. </editor> <title> Distributed Database Query Processing. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Since system-dependent parameters are unavailable, we must use a cost model that is solely based on query/data-dependent parameters such as query expression, data statistics, and estimated sizes of results. Like <ref> [S + 79, K + 85, ZL94] </ref>, we assume that all four parameters of formula 1 are in proportion to a few basic quantitative query/data dependent parameters, called cost factors. ACE uses nine cost factors f 1 ~ f 9 6 whose meaning is shown in Table 2.
Reference: [Lee64] <author> R.C.K. Lee. </author> <title> Optimal Estimation, Identification, and Control. </title> <publisher> MIT Press, </publisher> <year> 1964. </year>
Reference-contexts: For example, if an additional query q k+1 and its observed cost c k+1 are to be included, then A fl k+1 needs to be computed form scratch, because it takes no advantage of previously computed values of A fl k . A better method, called recursive least-square estimation, <ref> [Lee64, You84] </ref>, eliminates the duplication by using a recursive expression.
Reference: [LS92] <author> H. Lu and M. Shan. </author> <title> Global Query Optimization in Multidatabase Systems. </title> <booktitle> 1992 NFS Workshop on Heterogeneous Databases and Semantic Interoperability, </booktitle> <year> 1992. </year>
Reference-contexts: An HDBMS treats each of the foreign DBMSs as a "closed-box" component which cannot be modified and which retains its local autonomy, i.e. continues to support local applications. As in traditional distributed DBMSs, query optimization is important in HDBMS <ref> [Day85, SY + 89, SL90, DKS92, LS92, ZL94, DSD95] </ref>, particularly for global queries which are joins between tables from separate foreign DBMSs. A global execution plan for a global query constitutes of a sequence of sub-queries which specifies the join order, table/result shipping direction, and execution sites.
Reference: [Mar87] <author> M.J. Maron. </author> <title> Numerical Analysis | A practical approach. </title> <publisher> Macmillan Publishing Co., </publisher> <address> New York, </address> <year> 1987. </year> <month> 18 </month>
Reference-contexts: This problem is known as the Least Square Problem and its solution A fl k = [a 1 ; a 2 ; : : : ; a n ] T which minimizes expression 4 can be computed as <ref> [Mar87] </ref>: A fl where X is a k fi n matrix with X i being the i'th row, and C = [c 1 ; c 2 ; : : :; c k ] T . This "stage-wise" method requires recomputation every time a new estimate error is to be included.
Reference: [ML86] <author> L.F. Mackert and G.M. Lohman. </author> <title> R fl Optimizer Validation and Performance Evalu--ation for Distributed Queries. </title> <booktitle> In Procs. of the 12th Intl. Conf. on Very Large Data Bases, </booktitle> <year> 1986. </year>
Reference-contexts: A global execution plan for a global query constitutes of a sequence of sub-queries which specifies the join order, table/result shipping direction, and execution sites. Although the optimization techniques used in traditional distributed DBMSs <ref> [ML86] </ref> can be adapted to HDBMSs [DKS92], they induce some non-trivial problems. One of the problems is cost estimation for query plans, which has been a recent research issue in HDBMS [DKS92, ZL94]. Cost estimation is essential in selecting the best plan among various global query plans. <p> 9 total size of query result in bytes Table 2: Notations for Cost Factors 2.2 Cost Model In traditional distributed database systems where all sites are running the same DBMS, the following formula is typically used in estimating the cost of a distributed query plan (with known local access methods) <ref> [ML86, OV91] </ref>: T otal cost = W CP U fl (number of instructions) + W I=O fl (number of I=Os) + W MSG fl (number of messages) + W BY T E fl (number of bytes) (1) where W CP U ; W I=O ; W MSG , and W BY
Reference: [OV91] <author> M. Ozsu and P. Valduriez. </author> <title> Principles of Distributed Database Systems. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: 9 total size of query result in bytes Table 2: Notations for Cost Factors 2.2 Cost Model In traditional distributed database systems where all sites are running the same DBMS, the following formula is typically used in estimating the cost of a distributed query plan (with known local access methods) <ref> [ML86, OV91] </ref>: T otal cost = W CP U fl (number of instructions) + W I=O fl (number of I=Os) + W MSG fl (number of messages) + W BY T E fl (number of bytes) (1) where W CP U ; W I=O ; W MSG , and W BY
Reference: [RES93] <author> N. Roussopoulos, N. Economou, and A. Stamenas. ADMS: </author> <title> A Testbed for Incremental Access Methods. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 5(5) </volume> <pages> 762-774, </pages> <year> 1993. </year>
Reference-contexts: The adapted parameters are then used for estimating follow-up queries. ACE is operational in ADM S, an Enhanced Client-Server HDBMS prototype developed at the University of Maryland <ref> [RK86, RES93, DR94] </ref>, and obtains accurate cost estimates with small CPU overhead but no I/O. <p> based HDBMS prototype with very little coding overhead. 3 Implementation of ACE We implemented ACE inside ADM S, an enhanced multi-site client/server (E-CS) HDBMS, in which the clients are fully-fledged DBMSs capable of caching and maintaining downloaded data subsets obtained as a result of running global queries on multiple DBMSs <ref> [RK86, RES93, DR94] </ref>. The database servers are commercial and other prototype DBMSs accessed through application level gateway software, called ADM S+, which capitalizes on incremental access methods [Rou91] for downloading and maintaining cached data results in the form of materialized views.
Reference: [RK86] <author> N. Roussopoulos and H. Kang. </author> <booktitle> Principles and Techniques in the Design of ADM S. Computer, </booktitle> <month> December </month> <year> 1986. </year>
Reference-contexts: The adapted parameters are then used for estimating follow-up queries. ACE is operational in ADM S, an Enhanced Client-Server HDBMS prototype developed at the University of Maryland <ref> [RK86, RES93, DR94] </ref>, and obtains accurate cost estimates with small CPU overhead but no I/O. <p> based HDBMS prototype with very little coding overhead. 3 Implementation of ACE We implemented ACE inside ADM S, an enhanced multi-site client/server (E-CS) HDBMS, in which the clients are fully-fledged DBMSs capable of caching and maintaining downloaded data subsets obtained as a result of running global queries on multiple DBMSs <ref> [RK86, RES93, DR94] </ref>. The database servers are commercial and other prototype DBMSs accessed through application level gateway software, called ADM S+, which capitalizes on incremental access methods [Rou91] for downloading and maintaining cached data results in the form of materialized views.
Reference: [Rou91] <author> N. Roussopoulos. </author> <title> The Incremental Access Method of View Cache: Concept, Algorithms, and Cost Analysis. </title> <journal> ACM-Transactions on Database Systems, </journal> <volume> 16(3) </volume> <pages> 535-563, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The database servers are commercial and other prototype DBMSs accessed through application level gateway software, called ADM S+, which capitalizes on incremental access methods <ref> [Rou91] </ref> for downloading and maintaining cached data results in the form of materialized views. The communication between servers and clients is based on TCP/IP Networking Protocol over LAN/WAN. Figure 2 shows the system architecture of ADM S with three commercial DBMSs and our own ADMS prototype.
Reference: [S + 79] <author> P. Selinger et al. </author> <title> Access Path Selection in a Relational Database Management System. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <year> 1979. </year>
Reference-contexts: Since system-dependent parameters are unavailable, we must use a cost model that is solely based on query/data-dependent parameters such as query expression, data statistics, and estimated sizes of results. Like <ref> [S + 79, K + 85, ZL94] </ref>, we assume that all four parameters of formula 1 are in proportion to a few basic quantitative query/data dependent parameters, called cost factors. ACE uses nine cost factors f 1 ~ f 9 6 whose meaning is shown in Table 2.
Reference: [SL90] <author> A. Sheth and J. Larson. </author> <title> Federated Database Systems for Managing Distributed, Heterogeneous, and Autonomous Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3), </volume> <year> 1990. </year>
Reference-contexts: An HDBMS treats each of the foreign DBMSs as a "closed-box" component which cannot be modified and which retains its local autonomy, i.e. continues to support local applications. As in traditional distributed DBMSs, query optimization is important in HDBMS <ref> [Day85, SY + 89, SL90, DKS92, LS92, ZL94, DSD95] </ref>, particularly for global queries which are joins between tables from separate foreign DBMSs. A global execution plan for a global query constitutes of a sequence of sub-queries which specifies the join order, table/result shipping direction, and execution sites.
Reference: [SY + 89] <author> P. Scheuermann, C. Yu, et al. </author> <title> Report on the Workshop on Heterogeneous Database Systems held at Northwestern University, </title> <address> Evanston, Illinois, </address> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: An HDBMS treats each of the foreign DBMSs as a "closed-box" component which cannot be modified and which retains its local autonomy, i.e. continues to support local applications. As in traditional distributed DBMSs, query optimization is important in HDBMS <ref> [Day85, SY + 89, SL90, DKS92, LS92, ZL94, DSD95] </ref>, particularly for global queries which are joins between tables from separate foreign DBMSs. A global execution plan for a global query constitutes of a sequence of sub-queries which specifies the join order, table/result shipping direction, and execution sites. <p> The importance of developing an appropriate cost estimation mechanism for query optimization in HDBMSs was first pointed out in <ref> [SY + 89] </ref>.
Reference: [You84] <author> P. Young. </author> <title> Recursive Estimation and Time-Series Analysis. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: For example, if an additional query q k+1 and its observed cost c k+1 are to be included, then A fl k+1 needs to be computed form scratch, because it takes no advantage of previously computed values of A fl k . A better method, called recursive least-square estimation, <ref> [Lee64, You84] </ref>, eliminates the duplication by using a recursive expression. <p> However, if we start the recursion by assigning a (0) (0) for i 6= j, and g i;i to some large number, then the solution computed using formulae 6 and 7 eventually converges to the one computed using formulae 5 as k increases <ref> [You84] </ref>. The adaptation mechanism starts as soon as the first query is executed. During the first few queries, the cost estimation errors may be relatively large because the cost function is still in its learning stage.
Reference: [ZL94] <author> Q. Zhu and P. Larson. </author> <title> A Query Sampling Method for Estimating Local Cost Parameters in a Multidatabase System. </title> <booktitle> In Proc. of the 10th International Conference on Data Engineering, </booktitle> <year> 1994. </year> <month> 19 </month>
Reference-contexts: An HDBMS treats each of the foreign DBMSs as a "closed-box" component which cannot be modified and which retains its local autonomy, i.e. continues to support local applications. As in traditional distributed DBMSs, query optimization is important in HDBMS <ref> [Day85, SY + 89, SL90, DKS92, LS92, ZL94, DSD95] </ref>, particularly for global queries which are joins between tables from separate foreign DBMSs. A global execution plan for a global query constitutes of a sequence of sub-queries which specifies the join order, table/result shipping direction, and execution sites. <p> Although the optimization techniques used in traditional distributed DBMSs [ML86] can be adapted to HDBMSs [DKS92], they induce some non-trivial problems. One of the problems is cost estimation for query plans, which has been a recent research issue in HDBMS <ref> [DKS92, ZL94] </ref>. Cost estimation is essential in selecting the best plan among various global query plans. <p> The importance of developing an appropriate cost estimation mechanism for query optimization in HDBMSs was first pointed out in [SY + 89]. Two methods, database calibration [DKS92] and query sampling <ref> [ZL94] </ref>, were later proposed based on the philosophy that individual foreign DBMSs are viewed as "black-boxes" of which cost models can be "deduced" based on the cost information revealed by the execution of queries (namely, the actual query execution times). 3 In the calibration method, synthetic databases are created and imported <p> In Definition 1, we define two classes of LCF-queries, sp and spj. However, since each class represents a broad range of queries whose best access methods may greatly vary, we adopt the classification of <ref> [ZL94] </ref> for LCF-queries which is based on whether a clustered, or unclustered index is present in the selection/join attributes or no index. Table 1 shows the six LCF query classes QC 1 ~ QC 6 obtained by this classification. We associate a distinct cost function to each of these classes. <p> Since system-dependent parameters are unavailable, we must use a cost model that is solely based on query/data-dependent parameters such as query expression, data statistics, and estimated sizes of results. Like <ref> [S + 79, K + 85, ZL94] </ref>, we assume that all four parameters of formula 1 are in proportion to a few basic quantitative query/data dependent parameters, called cost factors. ACE uses nine cost factors f 1 ~ f 9 6 whose meaning is shown in Table 2. <p> The values of a i;j determine the accuracy of the cost estimation. 2.3 Adaptive Cost Estimation Database calibration [DKS92] and query sampling <ref> [ZL94] </ref> techniques have been proposed to estimate the unknown parameters of a foreign cost function. As discussed in section 1.1, both methods require a non-trivial periodic tuning and incur substantial overhead.
References-found: 20

