URL: http://www.cs.purdue.edu/coast/archive/clife/GA/papers/sac94-2.ps.gz
Refering-URL: http://www.cs.purdue.edu/coast/archive/clife/GA/papers/
Root-URL: http://www.cs.purdue.edu
Title: Walsh and Haar Functions in Genetic Algorithms Keywords Genetic Algorithms, Walsh functions, Haar functions, fitness
Author: Sami Khuri 
Affiliation: San Jose State University  
Abstract: Theoretical analysis of fitness functions in genetic algorithms has included the use of Walsh functions [14]. They form a convenient basis for the expansion of fitness functions [3]. These orthogonal, rectangular functions have also been used to compute the average fitness values of schemata [5]. This work explores the use of Haar functions [7] for the same purposes. While 2 ` non-zero terms are required for the expansion of a given function as a linear combination of Walsh functions, at most ` + 1 non-zero terms are required with the Haar expansion, where ` is the size of each binary string in the solution space. Similarly, Haar coefficients require less computation than their Walsh counterparts. The total number of terms required for the expansion of the fitness function at a given point using Haar is of order 2 ` , substantially less than Walsh's 2 2` . A comparison of Haar functions and Walsh functions with respect to fitness averages shows that the use of Haar functions will reduce computation time. Furthermore, the advantage of Haar over Walsh functions remains large (of order ` 2 ` ) when fast transforms are used. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alexits, G., </author> <year> (1961), </year> <title> Convergence Problems of Orthogonal Series, </title> <address> Pergammon, New York and London. </address>
Reference-contexts: One more advantage Haar functions have over Walsh is evident when they are used to approximate continuous functions. Walsh expansions might diverge at some points, whereas Haar expansions always converge <ref> [1, page 62] </ref>. Acknowledgments The author would like to thank Ada Batarekh, Dr. Frederick Stern, Thomas Back, Jorg Heitkotter, and one of the reviewers for their comments and very useful suggestions.
Reference: [2] <author> Beauchamp K. G., </author> <year> (1984), </year> <title> Applications of Walsh and Related Functions, </title> <publisher> Academic Press. </publisher>
Reference-contexts: Thus by the definition of h 2 q +m (see 3), there are at most 2 `q non-zero terms in the computation. The following results are equivalent to Beauchamp's <ref> [2] </ref> concerning the linear combination of the Haar coefficients h 2 q +m where m &lt; 2 q . RESULT 1 Every Haar coefficient of degree q has at most 2 `q non-zero terms. <p> For instance, for ` = 20, one needs to perform 18; 875; 002 more operations when the Walsh fast transform is used instead of the Haar transform. We conclude this section by noting that the Haar transforms are the fastest linear transformations presently available <ref> [2, page 80] </ref>. Conclusion This work highlights the computational advantages that Haar functions have over Walsh monomials. The former can thus be used as practical transforms for discrete objective functions in optimization problems.
Reference: [3] <author> Bethke , A. D., </author> <year> (1980), </year> <title> Genetic Algorithms as Function Optimizers, </title> <type> Doctoral dissertation, </type> <institution> University of Michi-gan. </institution>
Reference-contexts: Copyright c fl 1993 ACM Press. All rights reserved. More specifically, Walsh functions [14] have been used to calculate the average fitness value of a schema, to decide whether a certain function is hard or easy for a genetic algorithm, and to design deceptive functions for the genetic algorithm <ref> [3, 4, 5] </ref>. As a basis, these rectangular functions, which take values 1, are more practical than the traditional trigonometric basis [3]. In the next section, Walsh functions as a basis for fitness functions of genetic algorithms are briefly reviewed. <p> As a basis, these rectangular functions, which take values 1, are more practical than the traditional trigonometric basis <ref> [3] </ref>. In the next section, Walsh functions as a basis for fitness functions of genetic algorithms are briefly reviewed. In the third section, the representation of fitness functions as linear combinations of Haar functions is investigated. Then Walsh and Haar functions as bases for fitness functions are compared. <p> They form a complete orthogonal set of functions and can thus be used as a basis. Consequently, any fitness function defined on binary strings of length ` can be represented as a linear combination of discrete Walsh functions. They were first introduced by Bethke <ref> [9, 3] </ref> and later presented by Gold-berg [4].
Reference: [4] <author> Goldberg, D. E., </author> <year> (1989), </year> <title> Genetic Agorithms and Walsh Functions: Part I, A Gentle Introduction, </title> <booktitle> Complex Systems 3 </booktitle> <pages> 129-152. </pages>
Reference-contexts: Copyright c fl 1993 ACM Press. All rights reserved. More specifically, Walsh functions [14] have been used to calculate the average fitness value of a schema, to decide whether a certain function is hard or easy for a genetic algorithm, and to design deceptive functions for the genetic algorithm <ref> [3, 4, 5] </ref>. As a basis, these rectangular functions, which take values 1, are more practical than the traditional trigonometric basis [3]. In the next section, Walsh functions as a basis for fitness functions of genetic algorithms are briefly reviewed. <p> Consequently, any fitness function defined on binary strings of length ` can be represented as a linear combination of discrete Walsh functions. They were first introduced by Bethke [9, 3] and later presented by Gold-berg <ref> [4] </ref>. <p> We note that a string of binary digits s ` s `1 : : : s 1 can be thought of as being the binary representation of a decimal number s where s = P ` Thus a Walsh function (or monomial <ref> [4] </ref>) of index j over a binary string x of length ` is given by Y j (x) = P ` i=1 y i where x ` x `1 : : : x 1 and j ` j `1 : : : j 1 are the binary representations of x and <p> In practical cases, ` is substantially larger than 3. For instance, for ` = 20 there are about 2 40 10 12 more terms using Walsh expansion. No comparison between Walsh and Haar would be complete without considering fitness averages of schemata <ref> [4] </ref>. A comparison between the maximum number of non-zero terms, and the total number of terms for the computation of all 81 schemata of length ` = 4 is tabulated in Table 3. A fixed position is represented with d while * stands for a don't care.
Reference: [5] <author> Goldberg, D.E., </author> <year> (1989), </year> <title> Genetic Algorithms and Walsh Functions Part II: Deception and its Analysis, </title> <booktitle> Complex Systems 3, </booktitle> <pages> pp. 153-171. </pages>
Reference-contexts: Copyright c fl 1993 ACM Press. All rights reserved. More specifically, Walsh functions [14] have been used to calculate the average fitness value of a schema, to decide whether a certain function is hard or easy for a genetic algorithm, and to design deceptive functions for the genetic algorithm <ref> [3, 4, 5] </ref>. As a basis, these rectangular functions, which take values 1, are more practical than the traditional trigonometric basis [3]. In the next section, Walsh functions as a basis for fitness functions of genetic algorithms are briefly reviewed.
Reference: [6] <author> Goldberg, D.E., </author> <year> (1989), </year> <title> Genetic Algorithms in Search, Optimization, and Machine Learning, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: Again, since Walsh functions are never zero, at most 2 ` non-zero terms are required for the Walsh expansion (see Equation 2). These results are illustrated by considering a very simple example from Goldberg`s textbook <ref> [6] </ref>. EXAMPLE 1 We seek to maximize the elementary function f (x) = x 2 where x is an integer and 0 x 7. Here ` = 3, and the Walsh and Haar coefficients are computed and tabulated in Table 2.
Reference: [7] <author> Haar, A., </author> <year> (1910), </year> <title> Zur Theorie der Orthogonalen Funk-tionensysteme, </title> <journal> Math. </journal> <volume> Annalen 69 </volume> <pages> 331-371. </pages>
Reference-contexts: We now explore the Haar functions and compare them with the Walsh functions. Haar Functions The set of Haar functions also forms a complete set of orthogonal rectangular basis functions. These functions, as proposed by the Hungarian mathematician Haar <ref> [7] </ref>, take values of 1, 0 and 1, multipled by powers of p 2. The interval they are defined on is usually normalized to [0; 1). Kre-mer's definition of rank-ordered Haar functions, H j (t), for instance, gives an orthonormal basis [11].
Reference: [8] <author> Harmuth, H. F., </author> <year> (1968), </year> <title> A Generalized Concept of Frequency and Some Applications, </title> <journal> IEEE Transactions on Information Theory, IT-14:375-382. </journal>
Reference-contexts: Introduction Traditionally, Fourier series and transforms have been used to represent large classes of functions by superpositioning sine and cosine functions. More recently, other classes of complete, orthogonal functions are being used for the same purpose <ref> [8] </ref>. These new functions are rectangular and are easier to define and use with digital logic. Copyright c fl 1993 ACM Press. All rights reserved.
Reference: [9] <author> Holland, J.H., </author> <year> (1975), </year> <title> Adaptation in Natural and Artificial Systems, </title> <publisher> The University of Michigan Press, </publisher> <address> Ann Arbor. </address>
Reference-contexts: They form a complete orthogonal set of functions and can thus be used as a basis. Consequently, any fitness function defined on binary strings of length ` can be represented as a linear combination of discrete Walsh functions. They were first introduced by Bethke <ref> [9, 3] </ref> and later presented by Gold-berg [4].
Reference: [10] <author> Karpovsky, M.G., </author> <year> (1985), </year> <title> Spectral Techniques and Fault Detection, </title> <publisher> Academic Press. </publisher>
Reference-contexts: From Equation 6, the total number of nonzero terms is at most 2 + (` 1) = ` + 1: We have shown the following result <ref> [10] </ref>: RESULT 2 For any fixed value x 2 [0; 2 ` ), f (x) has at most ` + 1 non-zero terms. 2 According to Result 1, every Haar coefficient of degree q, q &gt; 1; has at most 2 `q non-zero terms in its computation (Equation 5).
Reference: [11] <author> Kremer, H., </author> <year> (1973), </year> <title> On Theory of Fast Walsh Transform Algorithms, Colloquium on the Theory and Applications of Walsh and Other Non-Sinusoidal Functions, </title> <address> Hatfield, U.K. </address>
Reference-contexts: The interval they are defined on is usually normalized to [0; 1). Kre-mer's definition of rank-ordered Haar functions, H j (t), for instance, gives an orthonormal basis <ref> [11] </ref>. Since t 2 [0; 1), the integers x in [0; 2 ` ) have to be mapped in the usual way (i.e., t = 2 ` x) to the unit interval [0; 1) before applying them as a basis for fitness functions.
Reference: [12] <author> Roeser, P. R., and Jernigan, M. E., </author> <year> (1982), </year> <title> Fast Haar Transform Algorithms, </title> <journal> IEEE Transactions on Computers C-31 no 2 </journal> <pages> 175-177. </pages>
Reference-contexts: to fast transforms, by taking advantage of the many repetitive computations performed with orthogonal transformations, they can be implemented with on the order of at most ` 2 ` computations in the case of fast Walsh transforms [13] and on the order of 2 ` for the fast Haar transforms <ref> [12] </ref>. With these implementations, modeled after the fast Fourier transform, the difference between the total num-ber of terms required for the computation of the expansions of Walsh and of Haar still remains exponential in ` (of order ` 2 ` ). <p> Thus, when dealing with fast transforms, it is more appropriate to count the number of operations (additions or subtractions) which is equivalent to counting the number of terms <ref> [12] </ref>. It can be shown from [12] and [13] that exactly ` 2 ` 2 `+1 + 2 more operations are needed with Walsh than with Haar functions. <p> Thus, when dealing with fast transforms, it is more appropriate to count the number of operations (additions or subtractions) which is equivalent to counting the number of terms <ref> [12] </ref>. It can be shown from [12] and [13] that exactly ` 2 ` 2 `+1 + 2 more operations are needed with Walsh than with Haar functions. For instance, for ` = 20, one needs to perform 18; 875; 002 more operations when the Walsh fast transform is used instead of the Haar transform.
Reference: [13] <author> Shanks, J. L., </author> <year> (1969), </year> <title> Computation of the Fast Walsh-Fourier Transform, </title> <journal> IEEE Transactions on Computers C-18:457-459. </journal>
Reference-contexts: With respect to fast transforms, by taking advantage of the many repetitive computations performed with orthogonal transformations, they can be implemented with on the order of at most ` 2 ` computations in the case of fast Walsh transforms <ref> [13] </ref> and on the order of 2 ` for the fast Haar transforms [12]. <p> Thus, when dealing with fast transforms, it is more appropriate to count the number of operations (additions or subtractions) which is equivalent to counting the number of terms [12]. It can be shown from [12] and <ref> [13] </ref> that exactly ` 2 ` 2 `+1 + 2 more operations are needed with Walsh than with Haar functions. For instance, for ` = 20, one needs to perform 18; 875; 002 more operations when the Walsh fast transform is used instead of the Haar transform.
Reference: [14] <author> Walsh, J.L., </author> <year> (1923), </year> <title> A Closed Set of Orthogonal Functions, </title> <journal> Ann. J. Math. </journal> <volume> 55 </volume> <pages> 5-24. </pages>
Reference-contexts: More recently, other classes of complete, orthogonal functions are being used for the same purpose [8]. These new functions are rectangular and are easier to define and use with digital logic. Copyright c fl 1993 ACM Press. All rights reserved. More specifically, Walsh functions <ref> [14] </ref> have been used to calculate the average fitness value of a schema, to decide whether a certain function is hard or easy for a genetic algorithm, and to design deceptive functions for the genetic algorithm [3, 4, 5].
References-found: 14

