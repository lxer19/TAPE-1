URL: ftp://ftp.cs.arizona.edu/xkernel/Papers/bsd4.4.ps
Refering-URL: http://www.cs.arizona.edu/protocols/
Root-URL: http://www.cs.arizona.edu
Email: fbrakmo,llpg@cs.arizona.edu  
Title: Performance Problems in BSD4.4 TCP  
Author: Lawrence S. Brakmo Larry L. Peterson 
Address: Tucson, AZ 85721  
Affiliation: Department of Computer Science University of Arizona  
Abstract: This paper describes problems in the BSD 4.4-Lite version of TCP (some of which are also present in earlier versions, such as the Net2 implementation of TCP) and proposes fixes that result in a 21% increase in throughput under realistic conditions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. S. Brakmo, S. W. O'Malley, and L. L. Peterson. </author> <title> TCP Vegas: New Techniques for Congestion Detection and Avoidance. </title> <booktitle> In Proceedings of the SIGCOMM '94 Conference, </booktitle> <pages> pages 24-35, </pages> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: 1 Introduction As part of our work with TCP Vegas <ref> [1] </ref>, we ported the BSD 4.4-Lite version of TCP (TCP Lite) to the x-kernel [3] with the goal of comparing its performance to that of our implementation of TCP Reno and TCP Vegas. 1 Early results from our simulations showed that TCP Lite performed significantly worse than our version of TCP
Reference: [2] <author> P. Danzig and S. Jamin. tcplib: </author> <title> A Library of TCP Internetwork Traffic Characteristics. </title> <type> Technical Report CS-SYS-91-495, </type> <institution> Computer Science Department, USC, </institution> <year> 1991. </year>
Reference-contexts: All the simulations reported in this paper simulate FIFO-based (tail drop) routers. One of the most important protocols available in the simulator is a protocol called TRAFFICit generates TCP Internet traffic based on tcplib <ref> [2] </ref>. TRAFFIC starts conversations with interarrival times given by an exponential distribution. Each conversation can be of type TELNET, FTP, NNTP, or SMTP, each of which expects a set of parameters. For example, FTP expects the following parameters: number of items to transmit, control segment size, and the item sizes.
Reference: [3] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: 1 Introduction As part of our work with TCP Vegas [1], we ported the BSD 4.4-Lite version of TCP (TCP Lite) to the x-kernel <ref> [3] </ref> with the goal of comparing its performance to that of our implementation of TCP Reno and TCP Vegas. 1 Early results from our simulations showed that TCP Lite performed significantly worse than our version of TCP Reno which was used to measure the gains resulting from using TCP Vegas.
Reference: [4] <author> V. Jacobson. </author> <title> Congestion Avoidance and Control. </title> <booktitle> In Proceedings of the SIGCOMM '88 Symposium, </booktitle> <pages> pages 314-32, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: These results help to illustrate just how complex and unintuitive TCP behavior can be. 3.2 Suboptimal Retransmit Timeout Estimates The retransmission timeout value (RTO) calculation in TCP Lite closely follows the code described in the updated version 3 of Jacobson's '88 paper <ref> [4] </ref>, .
Reference: [5] <author> W. R. Stevens. </author> <title> TCP/IP Illustrated, Volume 1: The Protocols. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: Our TCP Reno implementation is based on the Reno distribution of BSD Unix, and contains the Fast Recovery and Fast Retransmit mechanisms described in <ref> [5] </ref>. 1 This paper is organized as follows: Section 2 outlines the tools we used to measure and analyze TCP. Section 3 then describes the problems found in TCP Lite and outlines the fixes, and Section 4 compares the performance of the original and improved versions of TCP Lite.
Reference: [6] <author> USC. </author> <title> Transmission control protocol. Request for Comments 793, </title> <institution> USC Information Sciences Institute, Marina del Ray, Calif., </institution> <month> Sept. </month> <year> 1981. </year> <title> 7 Note that our version of Reno doesn't have the 1=8 th increase, this is one of the reasons why it did better than the original TCP Lite. </title> <type> 16 </type>
Reference-contexts: Jacobson further describes how, in general, this computation will correctly round rto. Although this algorithm is a major improvement over the original algorithm described in RFC793 <ref> [6] </ref>, there seems to be a problem with this algorithm based on the large delay observed in Figure 3, at the point before the retransmit timeout fires (indicated by the large black circles at the top of the graph).
References-found: 6

