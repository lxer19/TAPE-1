URL: ftp://ftp.cse.ucsc.edu/pub/hsnlab/isca95.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/hsnlab/publications/publications_sorted_by_subject.html
Root-URL: http://www.cse.ucsc.edu
Title: Destage Algorithms for Disk Arrays with Non-Volatile Caches  
Author: Anujan Varma and Quinn Jacobson 
Address: Santa Cruz, CA 95064  
Affiliation: Computer Engineering Department University of California  
Abstract: In a disk array with a nonvolatile write cache, destages from the cache to the disk are performed in the background asynchronously while read requests from the host system are serviced in the foreground. In this paper, we study a number of algorithms for scheduling destages in a RAID-5 system. We introduce a new scheduling algorithm, called linear threshold scheduling, that adaptively varies the rate of destages to disks based on the instantaneous occupancy of the write cache. The performance of the algorithm is compared with that of a number of alternative scheduling approaches such as least-cost scheduling and high/low mark. The algorithms are evaluated in terms of their effectiveness in making destages transparent to the servicing of read requests from the host, disk utilization, and their ability to tolerate bursts in the workload without causing an overflow of the write cache. Our results show that linear threshold scheduling provides the best read performance of all the algorithms compared, while still maintaining a high degree of burst tolerance. An approximate implementation of the linear-threshold scheduling algorithm is also described. The approximate algorithm can be implemented with much lower overhead, yet its performance is virtually identical to that of the ideal algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Biswas, K. K. Ramakrishnan, and D. Towsley, </author> <title> "Trace-Driven Analysis of Caching Policies for Disks," </title> <booktitle> Proceedings of the 1993 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 13-23. </pages>
Reference-contexts: We implemented such a scheme in our RAID simulator for comparison with other schemes. Details of implementation of the scheme can be found in Section III. C. High/Low Mark Algorithm This algorithm is designed after the cache purging algorithm proposed by Biswas, Ramakrishnan and Towsley <ref> [1] </ref> for disks with a nonvolatile write cache. In this algorithm, two cache-occupancy thresholds are used to enable and disable destages.
Reference: [2] <author> P. M. Chen, et al., </author> <title> "RAID: High-Performance, Reliable Secondary Storage," </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 26, No. 2, </volume> <month> June </month> <year> 1994, </year> <pages> pp. 145-188. </pages>
Reference: [3] <author> P. J. Denning, </author> <title> "Effect of Scheduling on File Memory Operations," </title> <booktitle> AFIPS Spring Joint Computer Conference, </booktitle> <month> April </month> <year> 1967, </year> <pages> pp. 9-21. </pages>
Reference-contexts: B. Least-Cost Scheduling This algorithm is modeled after the well-known shortest seek-time first disk scheduling algorithm <ref> [3] </ref>. After every disk operation, the queue of eligible destages is examined and the request that takes the shortest access time is performed.
Reference: [4] <author> G. R. Ganger, et al., </author> <title> "Disk Arrays: High-Performance High-Reliability Storage Subsystems," </title> <journal> IEEE Computer, </journal> <volume> Vol. 27, No. 3, </volume> <month> March </month> <year> 1994, </year> <pages> pp. 30-36. </pages>
Reference: [5] <author> R. Geist and S. Daniel, </author> <title> "A Continuum of Disk Scheduling Algorithms," </title> <journal> ACM Transactions on Computer Systems, </journal> <month> February </month> <year> 1987, </year> <pages> pp. 77-92. </pages>
Reference: [6] <author> D. M. Jacobson and J. Wilkes, </author> <title> "Disk Scheduling Algorithms Based on Rotational Position," </title> <type> Technical Report HPL-CSP-91-7, </type> <institution> Hewlett-Packard Laboratories, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: The cylinders are partitioned into 15 circular bands, with 129 cylinders per band; each band is radially subdivided into three regions, to provide a total of 45 regions for the scheduling algorithm. This is similar to the disk partitioning scheme proposed by Jacobson and Wilkes <ref> [6] </ref>, except that the cost of each destage is approximated as the average positioning delay from the current region to the target region.
Reference: [7] <author> J. Menon and D. Mattson, </author> <title> "Performance of Disk Arrays in Transaction Processing Environments," </title> <booktitle> Proceedings of the 12th International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1992, </year> <pages> pp. 302-309. </pages>
Reference: [8] <author> J. Menon and J. Cortney, </author> <title> "The Architecture of a Fault-Tolerant Cached RAID Controller," </title> <booktitle> Proceedings of the 20th Annual International Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 76-86. </pages>
Reference-contexts: In our implementations of the scheduling algorithms, we did not explicitly attempt to make the algorithms robust. Instead, our focus is on evaluating their performance. Techniques such as those used by Menon and Cortney <ref> [8] </ref> could be used to make the write cache and the destage algorithm tolerant to failures. Requests from the host are queued in the system and scheduled for service in FCFS order. Although requests are initiated in order, they are not always completed in order.
Reference: [9] <author> J. Menon, J. Roche, and J. Kasson, </author> <title> "Floating Parity and Data Disk Arrays," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 17, No. </volume> <pages> 1-2, </pages> <year> 1993, </year> <pages> pp. 129-139. </pages>
Reference: [10] <author> J. Menon, </author> <title> "Performance of RAID5 Disk Arrays with Read and Write Caching, </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> Vol. 2, No. 3, </volume> <month> July </month> <year> 1994, </year> <pages> pp. 261-293. </pages>
Reference-contexts: In our disk array model, we simulated two separate caches, a non-volatile write cache and a larger volatile read cache. This is different from the cache organization considered by Menon <ref> [10] </ref>, where a single non-volatile cache was used to service both reads and writes. The single cache allows more flexibility in allocating the available cache space between reads and writes, but at a substantially higher cost. Both caches in our model are dual-ported and use LRU replacement algorithm.
Reference: [11] <author> D. A. Patterson, G. Gibson, and R. H. Katz, </author> <title> "A Case for Redundant Arrays of Inexpensive Disks (RAID)," </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <month> June </month> <year> 1988, </year> <pages> pp. 109-116. </pages>
Reference: [12] <author> C. Ruemmler and J. Wilkes, </author> <title> "UNIX Disk Access Patterns," </title> <booktitle> Proceedings of the Winter 1993 USENIX Conference, Jan-uary 1993, </booktitle> <pages> pp. 405-420. </pages>
Reference-contexts: C. Results from Trace-Driven Simulations To further validate our results from the synthetic workload, we also ran a set of simulations on a workload based on I/O traces obtained from HP Laboratories. These traces were collected from HP-UX systems during a 4-month period, and are described in detail in <ref> [12] </ref>. To obtain a workload of adequate intensity, we overlaid multiple trace files corresponding to separate days. The particular trace used was cello, over a 6-day period starting on April 20, 1992.
Reference: [13] <author> C. Ruemmler and J. Wilkes, </author> <title> "An Introduction to Disk Drive Modeling," </title> <journal> IEEE Computer, </journal> <volume> Vol. 27, No. 3, </volume> <month> March </month> <year> 1994, </year> <pages> pp. 17-28. </pages>
Reference-contexts: The average seek time t seek (i; j) between regions i and j can be estimated from a seek-time model of the disk. Our simulation model for the disk drives is based on the HP 97560, obtained from <ref> [13] </ref>. If two regions i and j fall in different bands, the average seek time t seek (i; j) between them is estimated as the seek time between the middle cylinders of the two regions. <p> These regions were determined as follows: The rotation time of the disk was taken as 15 ms. Using the seek-time model from <ref> [13] </ref> and Eq. (2) from Appendix A, the average seek time from region 0 to to its adjacent band was computed as 9.98 ms, including controller overhead. <p> The average access time of the disk is 23 ms for an 8 Kbyte data transfer. The disk drive model takes into account seek time, rotational latency, head settling time, and data transfer time. The disk drive model is based on the work of Ruemmler and Wilkes <ref> [13] </ref>. Data transfers from the disk drives are limited by the bandwidth of the write port of the read cache. All data read from disks must be transferred through this port.
Reference: [14] <author> M. Seltzer, P. Chen, and J. Ousterhout, </author> <title> "Disk Scheduling Revisited," </title> <booktitle> Proceedings of the Winter 1990 USENIX Conference, </booktitle> <month> January </month> <year> 1990, </year> <pages> pp. 313-324. </pages>
Reference: [15] <author> D. Stodolsky, G. Gibson, and M. Holland, </author> <title> "Parity Logging: Overcoming the Small Write Problem in Redundant Disk Arrays," </title> <booktitle> Proceedings of the 20th Annual International Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 64-75. </pages>
Reference: [16] <author> B. Worthington, G. Ganger, and Y. Patt, </author> <title> "Scheduling Algorithms for Modern Disk Drives," </title> <booktitle> Proceedings of the 1994 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <month> May </month> <year> 1994, </year> <pages> pp. 241-251. </pages>
Reference-contexts: Service times of the requests in the destage queue. The service time includes the delay in positioning the head at the beginning of the block to be read/written and the data transfer time. Different levels of approximations could be used to estimate the positioning delays in the disk <ref> [16] </ref>. 4. The current level of occupancy of the cache. In addition, other factors such as the type of destage request (parity or data, read or write), may also be used in the scheduling process.
Reference: [17] <author> The RAIDBook, </author> <title> The RAID Advisory Board, </title> <booktitle> Lino Lakes, </booktitle> <address> Minnesota, </address> <month> June </month> <year> 1993. </year>
References-found: 17

