URL: http://www.cs.unc.edu/~menges/publications/TR93-047.ps
Refering-URL: http://www.cs.unc.edu/~menges/abstracts/TR93-047.html
Root-URL: http://www.cs.unc.edu
Title: A Comparison of the Architectures of the X Protocol Engine Library and Three Related Systems  
Author: John Menges 
Date: May, 1993  
Abstract-found: 0
Intro-found: 1
Reference: [HMPT89] <author> Norman C. Hutchinson, Shivakant Mishra, Larry L. Peterson, and Vicraj T. Thomas. </author> <title> Tools for Implementing Network Protocols. </title> <journal> Software Practice and Experience, </journal> <volume> 19(9) </volume> <pages> 895-916, </pages> <month> September </month> <year> 1989. </year>
Reference: [HP88] <author> Norman C. Hutchinson and Larry L. Peterson. </author> <booktitle> Design of the x-kernel. In Proceedings of the SIGCOMM '88 Symposium, </booktitle> <pages> pages 65-75, </pages> <address> Stanford, Calif., </address> <month> August </month> <year> 1988. </year>
Reference: [HP91] <author> Norman C. Hutchinson and Larry L. Peterson. </author> <title> The x-Kernel: An Architecture for Implementing Network Protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> January </month> <year> 1991. </year>
Reference: [HPAO89] <author> Norman C. Hutchinson, Larry L. Peterson, Mark B. Abbott, and Sean O'Malley. </author> <title> RPC in the x-Kernel: Evaluating New Design Techniques. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Operating System Principles, </booktitle> <pages> pages 91-101, </pages> <month> December </month> <year> 1989. </year>
Reference: [Men93] <author> John Menges. </author> <title> The X Engine Library: A C++ Library for Constructing X Pseudo-Servers. </title> <booktitle> In Proceedings of the Seventh Annual X 13 Technical Conference, </booktitle> <pages> pages 129-141, </pages> <address> 103 Morris Street, Sebastopol, CA 95472, </address> <month> January </month> <year> 1993. </year> <institution> O'Reilly & Associates, Inc. </institution>
Reference: [MRA87] <author> Jeffrey C. Mogul, Richard F. Rashid, and Michael J. Accetta. </author> <title> The Packet Filter: An Efficient Mechanism for User-level Network Code. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating System Principles, </booktitle> <pages> pages 39-51, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: The goal of this paper is to identify new areas for XPEL research and development. The related systems discussed in this paper are the x-Kernel [PHOR90][HP91][HMPT89][HP88][HPAO89], Packet Filters <ref> [MRA87] </ref>, and Eighth Edition Unix Streams [Rit84][PR85]. 2 Definitions Before proceeding with architectural overviews of XPEL and the other three systems, I will define a few terms used widely in this paper.
Reference: [PHOR90] <author> Larry Peterson, Norman Hutchinson, Sean O'Malley, and Herman Rao. </author> <title> The x-kernel: A Platform for Accessing Internet Resources. </title> <booktitle> Computer, </booktitle> <pages> pages 23-33, </pages> <month> May </month> <year> 1990. </year>
Reference: [PR85] <author> D. L. Presotto and D. M. Ritchie. </author> <title> Interprocess Communication in the Eighth Edition Unix System. </title> <booktitle> In Proceedings of the 1985 USENIX Association Summer Conference, </booktitle> <pages> pages 309-316, </pages> <month> June </month> <year> 1985. </year>
Reference: [Rit84] <author> D. M. Ritchie. </author> <title> A Stream Input-Output System. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 311-324, </pages> <month> October </month> <year> 1984. </year>
Reference: [Sec] <author> Stuart Sechrest. </author> <title> An Introductory 4.3BSD Interprocess Communication Tutorial. </title> <institution> Computer Science Research Group, Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley, California. </institution>
Reference-contexts: Thus, a message is an arbitrary chunk of a byte stream, and the divisions between messages are arbitrary. The undemarcated byte stream is the same data type used for Unix pipes and BSD Unix Stream Sockets <ref> [Sec] </ref>. Having such a "standard" data type facilitates the interconnection of processes and processing modules that perform their respective tasks independently, without knowledge of other processes and processing modules that are also manipulating the stream. In Unix Streams, processing modules are "objects" in the object-oriented sense of the word.
Reference: [SG90] <author> Robert Scheifler and James Gettys. </author> <title> X Window System. </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, 2nd edition, </address> <year> 1990. </year> <month> 14 </month>
Reference-contexts: An XPS is a process placed between X Window System <ref> [SG90] </ref> client and server processes. Its purpose is to add capabilities to the window system (e.g., window sharing or tracking and replay features) without modifying either clients or servers. The XPS as a whole looks like X clients to X servers and vice versa.
References-found: 11

