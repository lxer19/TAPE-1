URL: http://www.ri.cmu.edu/afs/cs/project/able/ftp/acmetr_12_95.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/able/www/paper_abstracts/acme_tr_12_95.html
Root-URL: 
Title: ACME: An Architectural Interchange Language  
Author: David Garlan Robert Monroe David Wile David Garlan, Robert Monroe, David Wile 
Address: Pittsburgh, PA 15213  4676 Admiralty Way Marina del Rey, CA 90292  
Affiliation: School of Computer Science Carnegie Mellon University  USC/Information Sciences Institute  
Date: 29 November 1995  
Note: Version 1.01 Draft of  WORKING DRAFT: Do Not Distribute Copyright c  
Pubnum: CMU-CS-95-219  
Abstract: The research reported here was sponsored by the Wright Laboratory, Aeronautical Systems Center, Air Force Materiel Command, USAF, and the Advanced Research Projects Agency (ARPA) under grants F33615-93-1-1330 and N66001-95-C-8623; and by National Science Foundation Grant CCR-9357792. Views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of Wright Laboratory, the US Department of Defense, the United States Government, or the National Science Foundation. The US Government is authorized to reproduce and distribute reprints for Government purposes, notwithstanding any copyright notation thereon. 
Abstract-found: 1
Intro-found: 1
Reference: [AG94] <author> Robert Allen and David Garlan. </author> <title> Formalizing architectural connection. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 71-80, </pages> <address> Sorrento, Italy, </address> <month> May </month> <year> 1994. </year>
Reference: [BV93] <author> Pam Binns and Steve Vestal. </author> <title> Formal real-time architecture specification and analysis. </title> <booktitle> In Tenth IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1993. </year>
Reference: [CS93] <author> L. Coglianese and R. Szymanski. </author> <title> DSSA-ADAGE: An Environment for Architecture-based Avionics Development. </title> <booktitle> In Proceedings of AGARD'93, </booktitle> <month> May </month> <year> 1993. </year>
Reference: [GAO94] <author> David Garlan, Robert Allen, and John Ockerbloom. </author> <title> Exploiting style in architectural design environments. </title> <booktitle> In Proceedings of SIGSOFT'94: The Second ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 179-185. </pages> <publisher> ACM Press, </publisher> <month> December </month> <year> 1994. </year>
Reference: [Gar95] <editor> David Garlan, editor. </editor> <booktitle> Proceedings of the First International Workshop on Architectures for Software Systems, </booktitle> <address> Seattle, WA, </address> <month> April </month> <year> 1995. </year> <note> Published as CMU Technical Report CMU-CS-95-151, </note> <month> April </month> <year> 1995. </year>
Reference-contexts: To understand why, consider the following two observations about architectural description languages. First, an examination of ADLs reveals that there is in fact considerable agreement about the role of structure in architectural description. One of the results of the First International Workshop on Architectures for Software Systems <ref> [Gar95] </ref> was that virtually all ADLs take as their starting point the need to express an architectural designs as a hierarchical collection of interacting components.
Reference: [GP95] <author> David Garlan and Dewayne Perry. </author> <title> Introduction to the special issue on software architecture. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4), </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: A well-defined architecture allows an engineer to reason about system properties at a high level of abstraction. Typical properties of concern include protocols of interaction, bandwidths and latencies, locations of central data stores, and anticipated dimensions of evolution <ref> [GP95, GS93, PW92] </ref>. Architectural design has always played a strong role in determining the success of complex software-based systems: the choice of an appropriate architecture can lead to a product that satisfies its requirements and is easily modified as new requirements present themselves, while an inappropriate architecture can be disastrous.
Reference: [GS93] <author> David Garlan and Mary Shaw. </author> <title> An introduction to software architecture. </title> <editor> In V. Ambriola and G. Tortora, editors, </editor> <booktitle> Advances in Software Engineering and Knowledge Engineering, </booktitle> <pages> pages 1-39, </pages> <address> Singapore, </address> <year> 1993. </year> <title> World Scientific Publishing Company. </title> <note> Also appears as SCS and SEI technical reports: CMU-CS-94-166, CMU/SEI-94-TR-21, ESC-TR-94-021. </note>
Reference-contexts: A well-defined architecture allows an engineer to reason about system properties at a high level of abstraction. Typical properties of concern include protocols of interaction, bandwidths and latencies, locations of central data stores, and anticipated dimensions of evolution <ref> [GP95, GS93, PW92] </ref>. Architectural design has always played a strong role in determining the success of complex software-based systems: the choice of an appropriate architecture can lead to a product that satisfies its requirements and is easily modified as new requirements present themselves, while an inappropriate architecture can be disastrous.
Reference: [LAK + 95] <author> David C Luckham, Lary M. Augustin, John J. Kenney, James Veera, Doug Bryan, and Walter Mann. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4) </volume> <pages> 336-355, </pages> <month> April </month> <year> 1995. </year>
Reference: [MQ94] <author> M. Moriconi and X. Qian. </author> <title> Correctness and composition of software architectures. </title> <booktitle> In Proceedings of ACM SIGSOFT'94: Symposium on Foundations of Software Engineering, </booktitle> <pages> pages 164-174, </pages> <address> New Orleans, Louisiana, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: For example, both Rapide and Wright represent interactions in terms of events. 1 Aesop and the notations used at SRI <ref> [MQ94] </ref> are both concerned with the expression of stylistic invariants. Aesop, UniCon, and Meta-H both provide capabilities for expressing properties that permit real-time schedulability analysis.
Reference: [PW92] <author> Dewayne E. Perry and Alexander L. Wolf. </author> <title> Foundations for the study of software architecture. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 17(4) </volume> <pages> 40-52, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: A well-defined architecture allows an engineer to reason about system properties at a high level of abstraction. Typical properties of concern include protocols of interaction, bandwidths and latencies, locations of central data stores, and anticipated dimensions of evolution <ref> [GP95, GS93, PW92] </ref>. Architectural design has always played a strong role in determining the success of complex software-based systems: the choice of an appropriate architecture can lead to a product that satisfies its requirements and is easily modified as new requirements present themselves, while an inappropriate architecture can be disastrous.
Reference: [SDK + 95] <author> Mary Shaw, Robert DeLine, Daniel V. Klein, Theodore L. Ross, David M. Young, and Gregory Zelesnik. </author> <title> Abstractions for software architecture and tools to support them. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4) </volume> <pages> 314-335, </pages> <month> April </month> <year> 1995. </year>
Reference: [T + 94] <author> Allan Terry et al. </author> <title> Overview of teknowledge's domain-specific software architecture program. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 19(4) </volume> <pages> 68-76, </pages> <month> October </month> <year> 1994. </year> <month> 38 </month>
References-found: 12

