URL: http://anytime.cs.umass.edu/~jgrass/ps/95-94.ps
Refering-URL: http://anytime.cs.umass.edu/~jgrass/school/papers.html
Root-URL: 
Title: Anytime Algorithm Development Tools  
Author: Joshua Grass and Shlomo Zilberstein 
Abstract: Computer Science Department University of Massachusetts at Amherst CMPSCI Technical Report 95-94 November 1, 1995 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Boddy and T. L. Dean. </author> <title> Solving time-dependent planning problems. </title> <booktitle> Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 979-984, </pages> <address> Detroit, Michigan, </address> <year> 1989. </year>
Reference-contexts: Currently, anytime algorithms are being used in a number of systems in such areas as diagnosis and repair, mobile robot navigations and decision under uncertainty <ref> [1, 2, 3, 5, 9, 12] </ref>. Anytime algorithms differ from normal algorithms in a number of ways: 1 1. Quality measure Instead of a binary notion of correctness, an anytime algorithm returns a result with a measure of it's quality. <p> Early representations of performance profiles included a mapping from time allocation to expected output quality <ref> [1, 5] </ref>. This representation has been later extended by conditional performance profiles that include a mapping from input quality and run-time to a probability distribution of output quality [8, 10]. We use the latter type of performance profiles in our system.
Reference: [2] <author> T. L. Dean and M. Boddy. </author> <title> An analysis of time-dependent planning. </title> <booktitle> Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. 49-54, </pages> <address> Minneapolis, Minnesota, </address> <year> 1988. </year>
Reference-contexts: Currently, anytime algorithms are being used in a number of systems in such areas as diagnosis and repair, mobile robot navigations and decision under uncertainty <ref> [1, 2, 3, 5, 9, 12] </ref>. Anytime algorithms differ from normal algorithms in a number of ways: 1 1. Quality measure Instead of a binary notion of correctness, an anytime algorithm returns a result with a measure of it's quality.
Reference: [3] <author> C. Elkan. </author> <title> Incremental, approximate planning: Abductive default reasoning. </title> <booktitle> Proceedings of the AAAI Spring Symposium on Planning in Uncertain Environments, </booktitle> <address> Palo Alto, California, </address> <year> 1990. </year>
Reference-contexts: Currently, anytime algorithms are being used in a number of systems in such areas as diagnosis and repair, mobile robot navigations and decision under uncertainty <ref> [1, 2, 3, 5, 9, 12] </ref>. Anytime algorithms differ from normal algorithms in a number of ways: 1 1. Quality measure Instead of a binary notion of correctness, an anytime algorithm returns a result with a measure of it's quality.
Reference: [4] <author> B. Hayes-Roth, R. Washington, R. Hewett, M. Hewett and A. Siever. </author> <title> Intelligent monitoring and control. </title> <booktitle> Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 243-249, </pages> <address> Detroit, Michigan, </address> <year> 1989. </year>
Reference: [5] <author> E. J. Horvitz. </author> <title> Reasoning about beliefs and actions under computational resource constraints. </title> <booktitle> Proceedings of the 1987 Workshop on Uncertainty in Artificial Intelligence, </booktitle> <address> Seattle, Washington, </address> <year> 1987. </year>
Reference-contexts: Currently, anytime algorithms are being used in a number of systems in such areas as diagnosis and repair, mobile robot navigations and decision under uncertainty <ref> [1, 2, 3, 5, 9, 12] </ref>. Anytime algorithms differ from normal algorithms in a number of ways: 1 1. Quality measure Instead of a binary notion of correctness, an anytime algorithm returns a result with a measure of it's quality. <p> Early representations of performance profiles included a mapping from time allocation to expected output quality <ref> [1, 5] </ref>. This representation has been later extended by conditional performance profiles that include a mapping from input quality and run-time to a probability distribution of output quality [8, 10]. We use the latter type of performance profiles in our system.
Reference: [6] <author> E. J. Horvitz and J. S. Breese. </author> <title> Ideal partition of resources for metareasoning. </title> <type> Technical Report KSL-90-26, </type> <institution> Stanford Knowledge Systems Laboratory, Stanford, California, </institution> <year> 1990. </year>
Reference: [7] <author> K. J. Lin, S. Natarajan, J. W. S. Liu and T. Krauskopf. </author> <title> Concord: A system of imprecise computations. </title> <booktitle> Proceedings of COMPSAC '87, </booktitle> <pages> pp. 75-81, </pages> <address> Tokyo, Japan, </address> <year> 1987. </year>
Reference: [8] <author> S. J. Russell and S. Zilberstein. </author> <title> Composing Real-Time Systems. </title> <booktitle> Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 212-217, </pages> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: Early representations of performance profiles included a mapping from time allocation to expected output quality [1, 5]. This representation has been later extended by conditional performance profiles that include a mapping from input quality and run-time to a probability distribution of output quality <ref> [8, 10] </ref>. We use the latter type of performance profiles in our system. Generation of the performance profile consists of several control structures that continually give the anytime algorithm small amounts of time and keep track of the new output quality. <p> We are currently implementing the compilation techniques that were formulated in [10, 13]. These compilation techniques construct the best contract 1 algorithm for a complex anytime system. This contract algorithm can be made interruptible (if necessary) with only a small, constant penalty <ref> [8] </ref>. Our system is capable of compiling both linear chains of anytime algorithms and n-trees of anytime algorithms (see Figure 4). 3.1 Compilation of an anytime chain For example, consider the chain composition of two anytime algorithms.
Reference: [9] <author> K. P. Smith and J. W. S. Liu. </author> <title> Monotonically improving approximate answers to relational algebra queries. </title> <address> COMPSAC-89, Orlando, Florida, </address> <year> 1989. </year>
Reference-contexts: Currently, anytime algorithms are being used in a number of systems in such areas as diagnosis and repair, mobile robot navigations and decision under uncertainty <ref> [1, 2, 3, 5, 9, 12] </ref>. Anytime algorithms differ from normal algorithms in a number of ways: 1 1. Quality measure Instead of a binary notion of correctness, an anytime algorithm returns a result with a measure of it's quality.
Reference: [10] <author> S. Zilberstein. </author> <title> Operational Rationality through Compilation of Anytime Algorithms. </title> <type> Ph.D. Dissertation, (also Technical Report No. </type> <institution> CSD-93-743), Computer Science Division, University of California, Berkeley, </institution> <year> 1993. </year> <note> Available on-line at http://anytime.cs.umass.edu/~shlomo. </note>
Reference-contexts: Early representations of performance profiles included a mapping from time allocation to expected output quality [1, 5]. This representation has been later extended by conditional performance profiles that include a mapping from input quality and run-time to a probability distribution of output quality <ref> [8, 10] </ref>. We use the latter type of performance profiles in our system. Generation of the performance profile consists of several control structures that continually give the anytime algorithm small amounts of time and keep track of the new output quality. <p> We are currently implementing the compilation techniques that were formulated in <ref> [10, 13] </ref>. These compilation techniques construct the best contract 1 algorithm for a complex anytime system. This contract algorithm can be made interruptible (if necessary) with only a small, constant penalty [8]. <p> algorithm is monotonically increasing in quality with time, and the number of inputs for each module is bounded by a constant. 1 A contract algorithm offers a tradeoff between computation time and output quality but the amount of time available form computation must be determined when the algorithm is activated <ref> [10] </ref>. 7 In order to construct the combined performance profile, the system first determines the maximum amount of time needed to generate output quality of 100 by both components. <p> The optimal time allocation for each sub-function (right). The process of combining anytime functions can be applied to more complex structures. We have implemented the local compilation technique introduced in <ref> [10] </ref>. compilation technique works by first combining the performance profiles of function two and function three and then combining the result with the performance profile of function one. <p> Once more monitoring strategies are developed, the user will be able to select a monitor based on the characteristics of the domain of operation and the nature of the time-dependent utility function. Several monitoring strategies that are currently under development have been analyzed in <ref> [10] </ref>. They offer provably optimal solutions to several general classes of domains. Examples include: 1. Scheduling contract algorithms in an environment with predictable utility change. 2. Adaptive modification of contract time based on monitoring the actual change in the environment and actual quality of results produced by the system. 3.
Reference: [11] <author> S. Zilberstein and S. J. Russell. </author> <title> Efficient resource-bounded reasoning in AT-RALPH. </title> <booktitle> Proceedings of the First International Conference on AI Planning Systems, </booktitle> <pages> pp. 260-266, </pages> <address> College Park, Maryland, </address> <year> 1992. </year> <month> 16 </month>
Reference: [12] <author> S. Zilberstein and S. J. Russell. </author> <title> Anytime sensing, planning and action: A practical model for robot control. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 1402-1407, </pages> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: Currently, anytime algorithms are being used in a number of systems in such areas as diagnosis and repair, mobile robot navigations and decision under uncertainty <ref> [1, 2, 3, 5, 9, 12] </ref>. Anytime algorithms differ from normal algorithms in a number of ways: 1 1. Quality measure Instead of a binary notion of correctness, an anytime algorithm returns a result with a measure of it's quality.
Reference: [13] <author> S. Zilberstein and S. J. Russell. </author> <title> Optimal Composition of Real-Time Systems. </title> <journal> Artificial Intelligence, </journal> <volume> forthcoming, </volume> <year> 1995. </year> <month> 17 </month>
Reference-contexts: We are currently implementing the compilation techniques that were formulated in <ref> [10, 13] </ref>. These compilation techniques construct the best contract 1 algorithm for a complex anytime system. This contract algorithm can be made interruptible (if necessary) with only a small, constant penalty [8].
References-found: 13

