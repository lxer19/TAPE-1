URL: ftp://ftp.cse.ogi.edu/pub/pacsoft/final_report/tool-survey.ps
Refering-URL: http://www.cse.ogi.edu/PacSoft/projects/SDRR/p_report.html
Root-URL: http://www.cse.ogi.edu
Title: Tool Survey Software Design for Reliability and Reuse Project Phase I  
Author: Laura McKinney 
Date: February 27, 1995  
Affiliation: Pacific Software Research Center  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Jeffrey Bell et al. </author> <title> Software design for reliability and reuse: A proof-of-concept demonstration. </title> <booktitle> In TRI-Ada '94 Proceedings, </booktitle> <pages> pages 396-404. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The Pacific Software Research Center is developing a new method, Software Design for Reliability and Reuse (SDRR), for the development of software component generators <ref> [1] </ref>. The generators are tailored to particular problem domains and configurable to interoperate within varied architectures and system environments. The generators function by accepting specifications written in a high-level domain-specific design language and producing software components in a wide-spectrum programming language such as Ada.
Reference: [2] <author> Jeffrey M. Bell. </author> <title> An implementation of Reynold's defunctionalization method for a modern functional language. </title> <type> Master's thesis, </type> <institution> Oregon Graduate Institute, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: For an SML program to be translated into Ada, some order reduction must be done. Several tools were developed to perform aspects of this transformation: Chin (Simplify) [6] (which uses Chin's algorithm to make programs first order), Firstify <ref> [2] </ref> (which also reduces programs to first order), and Lambda Lifter [3] (which "lifts" all declarations to the top level). The other existing transformation tools operated on programs expressed in Scheme (Schism) or in a term system (Astre).
Reference: [3] <author> Jeffrey M. Bell. Lambda-lifter tool documentation, </author> <month> January </month> <year> 1995. </year> <title> In Collected Tool Documentation for MTV Generator (CDRL 002.7). </title>
Reference-contexts: For an SML program to be translated into Ada, some order reduction must be done. Several tools were developed to perform aspects of this transformation: Chin (Simplify) [6] (which uses Chin's algorithm to make programs first order), Firstify [2] (which also reduces programs to first order), and Lambda Lifter <ref> [3] </ref> (which "lifts" all declarations to the top level). The other existing transformation tools operated on programs expressed in Scheme (Schism) or in a term system (Astre).
Reference: [4] <author> Fran~coise Bellegarde. Astre: </author> <title> A transformation system for first-order functional programs, </title> <month> November </month> <year> 1994. </year> <month> 7 </month>
Reference-contexts: This message specification development interface providing editing, compilation and testing facilities to support work using MTV-G. 2.8 Program Transformation and Partial Evaluation Two existing program transformation tools were used during this phase of the SDRR project: Astre and Schism. The Astre <ref> [4, 5] </ref> tool is based on term-rewriting strategies to improve program efficiency, and needed extensive rework to be automated for use in the MTV-G environment. It was used successfully in early integrations of the SDRR tools, but was not included in the final MTV-G.
Reference: [5] <author> Fran~coise Bellegarde. Astre: </author> <title> Towards a fully automated program transformation sys-tem. </title> <type> Technical Report 94-027, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <year> 1994. </year>
Reference-contexts: This message specification development interface providing editing, compilation and testing facilities to support work using MTV-G. 2.8 Program Transformation and Partial Evaluation Two existing program transformation tools were used during this phase of the SDRR project: Astre and Schism. The Astre <ref> [4, 5] </ref> tool is based on term-rewriting strategies to improve program efficiency, and needed extensive rework to be automated for use in the MTV-G environment. It was used successfully in early integrations of the SDRR tools, but was not included in the final MTV-G.
Reference: [6] <author> Wei-Ngan Chin and John Darlington. </author> <title> Higher-order removal: A modular approach. Unpublished work, </title> <year> 1993. </year>
Reference-contexts: For an SML program to be translated into Ada, some order reduction must be done. Several tools were developed to perform aspects of this transformation: Chin (Simplify) <ref> [6] </ref> (which uses Chin's algorithm to make programs first order), Firstify [2] (which also reduces programs to first order), and Lambda Lifter [3] (which "lifts" all declarations to the top level). The other existing transformation tools operated on programs expressed in Scheme (Schism) or in a term system (Astre).
Reference: [7] <author> Charles Consel. </author> <title> New insights into partial evaluation: the Schism experiment. </title> <booktitle> In ESOP'88, volume 300 of Lecture Notes in Computer Science, </booktitle> <pages> pages 236-246. </pages> <publisher> Springer-Verlag, </publisher> <month> March </month> <year> 1988. </year>
Reference-contexts: It was used successfully in early integrations of the SDRR tools, but was not included in the final MTV-G. The primary developer was no longer on-site to provide support. Schism <ref> [7] </ref> is a partial evaluator written to operate on programs written in Scheme. To integrate Schism into MTV-G, input and output translators were required.
Reference: [8] <author> Richard Kieburtz and Jeffrey R. Lewis. </author> <title> Algebraic design language. </title> <type> Technical Report 94-002, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <year> 1994. </year>
Reference-contexts: The core program transformation technology was developed with little reliance on existing transformation tools. 3.1 Program Transformation Program transformation was a major area of research during this project. A particular focus was the design and development of Algebraic Design Language (ADL) <ref> [8] </ref> which expresses the semantics of specifications written in domain-specific languages. ADL provides the structure necessary for program transformation that is unavailable in any other existing language. A translator from programs expressed in ADL to programs in SML was written to provide an executable platform for ADL.
Reference: [9] <author> Charles Plinta, Kenneth Lee, and Michael Rissman. </author> <title> A model solution for C 3 I message translation and validation. </title> <type> Technical Report CMU/SEI-89-TR-12 ESD-89-TR-20, </type> <institution> Software Engineering Institute, Carnegie Mellon University, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: The compiler must emit code in ADL. For the MTV domain, there were no existing tools that provided a high-level, specification language for message translation and validation with semantics expressed in ADL. An existing domain solution, the Model Solution MTV <ref> [9] </ref>, provided a suite of reusable Ada templates for development of MTV modules.
Reference: [10] <author> Tim Sheard. </author> <title> HOT tool documentation, </title> <month> January </month> <year> 1995. </year> <title> In Collected Tool Documentation for MTV Generator (CDRL 002.7). </title>
Reference-contexts: ADL provides the structure necessary for program transformation that is unavailable in any other existing language. A translator from programs expressed in ADL to programs in SML was written to provide an executable platform for ADL. A new program transformation tool, Higher-Order Transformation (HOT) <ref> [10] </ref>, was developed to operate on programs written in ADL and to exploit the structure expressed in those programs to perform meaning-preserving transformations to improve program efficiency.
Reference: [11] <author> Lisa Walton and James Hook. </author> <title> Message specification language (MSL): A domain specific design language for message translation and validation. </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> January </month> <year> 1995. </year> <month> 8 </month>
Reference-contexts: Instances generated by the new program generator were required to interoperate within PRISM in the same manner as Model Solution modules. Message Specification Language (MSL) Compiler A new tool, the Message Specification Language (MSL) <ref> [11] </ref> compiler, was developed to compile specifications written in a 5 declarative specification language expressive over the MTV domain. The MSL compiler devel-oped for this project produced a set of translation functions expressed in ADL and providing equivalent functionality to MTV programs developed using the Model Solution.
References-found: 11

