URL: http://theory.stanford.edu/~dabo/papers/bioDES.ps.gz
Refering-URL: http://theory.stanford.edu/~dabo/publications.html
Root-URL: 
Email: dabo@cs.princeton.edu ctd@cs.princeton.edu rjl@cs.princeton.edu  
Title: Breaking DES Using a Molecular Computer (Extended Abstract)  
Author: Dan Boneh Christopher Dunworth Richard J. Lipton 
Keyword: DNA-computing, Molecular-computing, DES.  
Note: Supported in part by NSF CCR-9304718.  
Address: Princeton, NJ 08544  
Affiliation: Department of Computer Science Princeton University  
Abstract: Recently Adleman has shown that a small traveling salesman problem can be solved by molecular operations. In this paper we show how the same principles can be applied to breaking the Data Encryption Standard (DES). We describe in detail a library of operations which are useful when working with a molecular computer. We estimate that given one arbitrary (plain-text, cipher-text) pair, one can recover the DES key in about 4 months of work. Furthermore, we show that under chosen plain-text attack it is possible to recover the DES key in one day using some preprocessing. Our method can be generalized to break any cryptosystem which uses keys of length less than 64 bits. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Adleman, </author> <title> "Molecular Computation of Solutions to Combinatorial Problems", </title> <booktitle> Science 266 </booktitle> <month> 1021-1024 (Nov. 11) </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Due to advances in molecular biology it is nowadays possible to create a soup of roughly 10 17 DNA strands that fits in a liter of water. Adleman <ref> [1] </ref> has shown that each DNA strand can be used to perform computations. Thus, a small test tube containing DNA strands seems to have more computing power than the most powerful parallel computers. <p> The operations that we use are derived from a collection of experiments commonly used in molecular biology today <ref> [1] </ref>. 3 2.2.1 Extract We need the ability to extract from a test tube all strands that contain some specific short nucleotide sequence x. To accomplish this, we use the biotin-streptavidin bead separation technique described in [1]. <p> use are derived from a collection of experiments commonly used in molecular biology today <ref> [1] </ref>. 3 2.2.1 Extract We need the ability to extract from a test tube all strands that contain some specific short nucleotide sequence x. To accomplish this, we use the biotin-streptavidin bead separation technique described in [1]. In short, one can create a solution containing many copies of the oligo # x, each bound to the surface of tiny magnetic beads. To this bead-oligo mixture we add our DNA strands. <p> The basic idea is to use the graph G shown in figure 4. Each path from S 0 to S 56 corresponds to one DES key. To create a soup of DNA strands which correspond to all paths in G we use the encoding of <ref> [1] </ref>. We follow the following steps: 1. In Section 3 we assigned a unique oligo of length 30 to each vertex in the graph.
Reference: [2] <author> L. Adleman, P. Rothemund, S. Roweis, E. Winfree, </author> <title> "On Applying Molecular Computation to the Data Encryption Standard", </title> <booktitle> in proceedings of second annual conference on DNA based computers, </booktitle> <address> Princeton, </address> <year> 1996. </year>
Reference-contexts: Though these results are very important theoretically, they are not useful in practice. Breaking DES by simulating a non-deterministic Turing Machine would require millions of biological operations. Running such experiments would take hundreds of years. We note that recently Adleman et al. <ref> [2] </ref> developed an alternate approach for breaking DES using DNA computations. It should be pointed out that attacks using differential cryptanalysis methods have proven to be very useful for breaking DES [6, 10].
Reference: [3] <author> D. Boneh, C. Dunworth, R. Lipton, J. Sgall, </author> <title> "On Computational Power of DNA", </title> <institution> Princeton CS Tech-Report CS-TR-499-95, ftp://ftp.cs.princeton.edu/reports/1995/499.ps.Z. </institution> <note> To appear in the special issue of Discrete Applied Mathematics on Computational Molecular Biology. </note>
Reference-contexts: This will be explained in more detail in Section 2. Recently, Lipton [9] has come up with an encoding scheme that enabled him to solve the satisfia-bility problem of formulas with a small number of variables. A generalization of this scheme <ref> [3] </ref> can be used to solve the satisfiability problem for circuits. Using these methods, the number of bio-steps required to find a satisfying assignment is proportional to the size of the circuit. Lipton's approach raises the hope of using molecular computing to solve hard problems that come up in practice.
Reference: [4] <author> D. Boneh, R. Lipton, </author> <title> "Making DNA Computers Error Resistant", Princeton CS Tech-Report CS-TR-491-95, </title> <booktitle> ftp://ftp.cs.princeton.edu/reports/1995/491.ps.Z in proceedings of second annual conference on DNA based computers, </booktitle> <address> Princeton, </address> <year> 1996. </year>
Reference-contexts: Furthermore, we are confident that errors that arise during the operation of a molecular computer can be dealt with. This is based on our experience with conventional electronic machines where fault-tolerance techniques enable one to perform error-free computations in the presence of faulty processors. We note that several researchers <ref> [4, 8] </ref> have already suggested some techniques for making molecular computers resistant to errors. 2 Overview of molecular computing In order to understand the computation described here, it is necessary to gain a fundamental understanding of DNA's structure and function.
Reference: [5] <author> National Bureau of Standards, </author> <title> "Data Encryption Standard", </title> <type> U.S. </type> <institution> department of commerce, </institution> <note> FIPS, pub. 46, </note> <month> January </month> <year> 1977. </year>
Reference-contexts: In this paper we give the first example of a "real world" hard problem that can be solved using a molecular computer. We present a "molecular program" for breaking the Data Encryption Standard <ref> [5] </ref>, or DES for short. DES is a widely used encryption procedure. It encrypts 64 bit messages and uses a 56 bit key. By breaking DES we mean that given one (plain-text, cipher-text) pair we can find a key mapping the plain-text to the cipher-text. <p> Traditionally the circuit is drawn the other way around, i.e. the key is fixed and the message varies. For a more detailed description of the DES circuit see <ref> [5] </ref>. We now explain the various components of figure 2. The circuit is composed of 16 levels. We refer to each level as a round. The figure shows the first four rounds and the last round. The input to the circuit is the 56 bit key shown on the left. <p> A P-box is a box which permutes the bits of its input. The box may be set to discard some of the input bits or to replicate some of them. The exact operation performed by each P-box in the figure is predetermined and can be found in <ref> [5] </ref>. For our purposes we note that the P-boxes are insignificant and may be ignored. The reason for this is that P-boxes simply change the order of the bits that arise during the computation. <p> The S-box groups the 48 input bits into 8 groups of 6 bits each. For each group of 6 bits the S-box performs a table lookup and outputs 4 bits. This can be seen in figure 3. The 8 tables used can be found in <ref> [5] </ref> To summarize, we see that each DES round involves a 48 bit Xor, an S-box and another 32 bit Xor. Thus, each round requires 80 Xor operations and 8 table lookups. 5 Plan of DES attack We are now ready to explain our attack on DES.
Reference: [6] <author> E. Biham, A. Shamir, </author> <title> "Differential Cryptanalysis of the Full 16-round DES", </title> <booktitle> In Proceedings of Crypto 1992, </booktitle> <pages> pp. 487-496. 13 </pages>
Reference-contexts: Running such experiments would take hundreds of years. We note that recently Adleman et al. [2] developed an alternate approach for breaking DES using DNA computations. It should be pointed out that attacks using differential cryptanalysis methods have proven to be very useful for breaking DES <ref> [6, 10] </ref>. The central achievement of these attacks is that DES can be broken on a conventional computer in 2 43 steps. This means that DES can be broken within several days on a conventional computer.
Reference: [7] <author> P. Kaplan, </author> <title> "Molecular Computation: Adleman's experiment repeated", </title> <institution> NEC Research Insti tute, Princeton, NJ, </institution> <type> Technical Report # 95-120. </type>
Reference-contexts: Our figure of 32 extractions per step is a reasonable one. The reason is that most biological apparatus, such as PCR machines, act on dozens of solutions at once. Recently Kaplan <ref> [7] </ref> repeated Adleman's experiment. Kaplan reports that an extraction step can be carried out in roughly an hour. Thus we can approximately claim that 10 extraction steps per day is a reasonable figure. Under such an assumption we see that one can break DES in 4 months.
Reference: [8] <author> R. Karp, C. Kenyon, O. Waarts, </author> <title> "Error-resilient DNA computations", </title> <booktitle> In Proceedings of Symposium on Discrete Algorithms, SODA 1996. </booktitle>
Reference-contexts: Furthermore, we are confident that errors that arise during the operation of a molecular computer can be dealt with. This is based on our experience with conventional electronic machines where fault-tolerance techniques enable one to perform error-free computations in the presence of faulty processors. We note that several researchers <ref> [4, 8] </ref> have already suggested some techniques for making molecular computers resistant to errors. 2 Overview of molecular computing In order to understand the computation described here, it is necessary to gain a fundamental understanding of DNA's structure and function.
Reference: [9] <author> R. Lipton, </author> <title> "Using DNA to solve NP-Complete Problems", </title> <booktitle> Science 268 </booktitle> <month> 542-545 (Apr. 28) </month> <year> 1995. </year>
Reference-contexts: Thus, we are capable of performing 10 17 basic operations at once, though each operation requires several hours to complete. Throughout the paper we will refer to operations done on DNA strands as bio-steps. This will be explained in more detail in Section 2. Recently, Lipton <ref> [9] </ref> has come up with an encoding scheme that enabled him to solve the satisfia-bility problem of formulas with a small number of variables. A generalization of this scheme [3] can be used to solve the satisfiability problem for circuits. <p> one we set out to construct since the strands in the solution encode all pairs [k; DES (M; k)]. 6.1 Constructing the initial soup To construct the initial solution of 2 56 DNA strands corresponding to all possible DES keys we use a procedure similar to the one described in <ref> [9] </ref>. The basic idea is to use the graph G shown in figure 4. Each path from S 0 to S 56 corresponds to one DES key. To create a soup of DNA strands which correspond to all paths in G we use the encoding of [1].
Reference: [10] <author> M. Matsui, </author> <title> "The first experimental cryptanalysis of the Data Encryption Standard", </title> <booktitle> In Proceedings Crypto 1994, </booktitle> <pages> pp. 1-11. </pages>
Reference-contexts: Running such experiments would take hundreds of years. We note that recently Adleman et al. [2] developed an alternate approach for breaking DES using DNA computations. It should be pointed out that attacks using differential cryptanalysis methods have proven to be very useful for breaking DES <ref> [6, 10] </ref>. The central achievement of these attacks is that DES can be broken on a conventional computer in 2 43 steps. This means that DES can be broken within several days on a conventional computer.
Reference: [11] <author> P. Rothemund, </author> <title> "A DNA and restriction enzyme implementation of Turing machines", in DNA Based Computers, </title> <booktitle> volume 27 of DIMACS: Series in Discrete Mathematics and Theoretical Computer Science. </booktitle>
Reference-contexts: Furthermore, we show that using chosen plain-text attack 1 it is possible to recover the key in one day of work using some preprocessing. This means that after the preprocessing work is done it is possible to break many DES systems for very little work. Several researchers <ref> [11] </ref> have come up with various methods for implementing non-deterministic Turing Machines using molecular computers. Clearly a non-deterministic Turing Machine can break any crypto-system, including DES, by guessing the correct key. Though these results are very important theoretically, they are not useful in practice.
Reference: [12] <author> M. Wiener, </author> <title> "Efficient DES Key Search", </title> <institution> TR-244, School of Computer Science, Carleton University, </institution> <month> May </month> <year> 1994. </year> <month> 14 </month>
Reference-contexts: This means that DES can be broken within several days on a conventional computer. Note however, that the differential cryptanalysis methods require 2 43 pairs of (plain-text, cipher-text), while our molecular computer requires only one such pair. Another conventional attack on DES was suggested by Wiener <ref> [12] </ref>. Wiener predicts that using dedicated hardware which costs $1 million it is possible to search through all 2 56 DES keys in 7 hours. Wiener's attack makes use of the special structure of the DES circuit.
References-found: 12

