URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-96-13.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Effect of Autarky Pruning on Random and Circuit Formulas: An Experimental Study  
Author: Fumiaki Kamiya 
Keyword: Propositional satisfiability, refutation, model elimination, Modoc, autarky pruning, conditional autarky.  
Note: Submitted for publication.  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Computer Science University of California, Santa Cruz  
Date: June 30, 1996  
Pubnum: UCSC-CRL-96-13  
Abstract: Modoc was proposed by Van Gelder as an improvement to model elimination. The main contribution of Modoc is in its new pruning technique based on the concept of autarky, first introduced by Monien and Speckenmeyer. Compared to programs based on model search, Modoc has since been observed to excel in speed on circuit formulas yet to fall behind on random formulas. This paper reports on a study conducted to explain this behavior in Modoc. The study is based on experiment in which the effectiveness of the two pruning techniques used in Modoc|autarky pruning and lemma pruning|are examined on random and circuit formulas. We observe that the effectiveness of autarky pruning differs tremendously between the two classes of formulas. We also observe that for circuit formulas, autarkies, which are believed to be very few of, are more likely to be found by simplifying the formula for some partial truth assignment. This may lead to possible new ways to use autarkies to solve the satisfiability problem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Larrabee. </author> <title> Test pattern generation using Boolean satisfiability. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(1) </volume> <pages> 6-22, </pages> <month> January </month> <year> 1992. </year>
Reference: [2] <author> T. Larrabee and Y. Tsuji. </author> <title> Evidence for a satisfiability threshold for random 3CNF formulas. </title> <type> Technical Report UCSC-CRL-92-42, </type> <institution> UC Santa Cruz, </institution> <address> Santa Cruz, CA., </address> <month> October </month> <year> 1992. </year>
Reference: [3] <author> D. W. Loveland. </author> <title> A simplified format for the model elimination theorem-proving procedure. </title> <journal> JACM, </journal> <volume> 16(3) </volume> <pages> 349-363, </pages> <year> 1969. </year>
Reference: [4] <author> J. Minker and G Zanon. </author> <title> An extension to linear resolution with selection function. </title> <journal> Information Processing Letters, </journal> <volume> 14(3) </volume> <pages> 191-194, </pages> <month> June </month> <year> 1982. </year>
Reference: [5] <author> D. Mitchell, B. Selman, and H. Levesque. </author> <title> Hard and easy distributions of SAT problems. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <address> San Jose, CA., </address> <pages> pages 459-465, </pages> <month> July </month> <year> 1992. </year>
Reference: [6] <author> B. Monien and E. Speckenmeyer. </author> <title> Solving satisfiability in less than 2 n steps. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 10 </volume> <pages> 287-295, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction Modoc was proposed by Van Gelder in [7] as an improvement to model elimination ([3]). Its main contribution to model elimination is in its new pruning technique based on the concept of autarky, first introduced by Monien and Speckenmeyer in <ref> [6] </ref>. Whereas Monien and Speckenmeyer's use of autarkies was to find a model, Modoc uses them to exclude clauses whose use will not lead to a successful refutation. <p> We speculate that autarky pruning is not likely to be successful on any random formulas using any (reasonable) clauses-to-variables ratio. 6 Discussion So what does all the observation mean? For one, it reconfirms the observation first made by Monien and Speckenmeyer in <ref> [6] </ref> that autarkies are rare and that trying to partition a formula using a properly partitioning autarky is not likely to be an effective approach. On the other hand, our observation suggests abundance of conditional autarkies in circuit formulas 1 . <p> Unfortunately, this is not clear from their paper <ref> [6] </ref>. If the author's belief is correct, our observation does not contradict with their observation. References 9 We also showed, through experiment, that (unconditional) autarkies are extremely rare, even for circuit formulas for which autarky pruning appears to be effective.
Reference: [7] <author> A. Van Gelder. </author> <title> Simultaneous construction of refutations and models for propositional formulas. </title> <type> Technical Report UCSC-CRL-95-61, </type> <institution> UC Santa Cruz, </institution> <address> Santa Cruz, CA., </address> <year> 1995. </year> <note> (submitted for publication). </note>
Reference-contexts: 1 Introduction Modoc was proposed by Van Gelder in <ref> [7] </ref> as an improvement to model elimination ([3]). Its main contribution to model elimination is in its new pruning technique based on the concept of autarky, first introduced by Monien and Speckenmeyer in [6]. <p> We assume the readers to be familiar with terms such as CNF formula, clause, literal, variable, truth assignment, etc. One possible deviation from standard use is the term satisfying truth assignment. Following <ref> [7] </ref>, we consider any partial truth assignment that satisfies all the clauses in the formula to be a satisfying truth assignment. This means that a satisfying truth assignment is not necessarily total and that some of the variables may remain unassigned. <p> Reason for such autarkies will become clear in the next section (Section 2.2). 2.2 Modoc We now give an informal description of the Modoc algorithm focusing on the parts of the algorithm that are most relevant to this study. Full detail of the algorithm can be found in <ref> [7] </ref>. Modoc is based on model elimination ([3]) which is a refutation procedure. Unlike model elimination which uses linear "chains" to represent the state of search, Modoc uses a tree-based data structure ([4]) to represent the search space which it explores. <p> The main difference between Modoc and model elimination is in Modoc's response to failed refutation attempts of literals. Whenever such attempts fail, the literals are added to the current autarky. Theoretical basis (correctness, etc.) can be found in <ref> [7] </ref>. Autarkies are used to prune subspaces that are known not to have a refutation. To be precise, any clause that contains a literal in the current autarky can be excluded from resolution as it cannot be refuted.
Reference: [8] <author> A. Van Gelder and F. Kamiya. </author> <title> The partial rehabilitation of propositional resolution. </title> <type> Technical Report UCSC-CRL-96-04, </type> <institution> UC Santa Cruz, </institution> <address> Santa Cruz, CA., </address> <year> 1996. </year>
Reference-contexts: Whereas Monien and Speckenmeyer's use of autarkies was to find a model, Modoc uses them to exclude clauses whose use will not lead to a successful refutation. In <ref> [8] </ref>, it was observed that compared to satisfiability testers based on model search, Modoc lagged behind on random formulas yet it performed far better on circuit formulas. (For completeness of this paper, the relevant numbers are reproduced in Figure 1.) This paper reports on a study conducted to explain the difference <p> This can be verified by simplifying F with the partial truth assignment, which yields ffa; :c; :eg; f:b; cg; fegg. 3 Experiment In this section, we describe the experiment; the results are summarized in the next section (Section 4). A C implementation of Modoc reported in <ref> [8] </ref>, modoc, was modified to collect the necessary information. Modification was made so that every time a call to one of the autarky manipulating functions or to one of the lemma management functions is made, modoc will print the new autarky size or the new number of lemmas, respectively.
Reference: [9] <author> A. Van Gelder and Y. K. Tsuji. </author> <title> Satisfiability testing with more reasoning and less guessing. </title> <editor> In D. S. Johnson and M. Trick, editors, </editor> <title> Cliques, Coloring, and Satisfiability: Second DIMACS Implementation Challenge., </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1996. </year>
References-found: 9

