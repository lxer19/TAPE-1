URL: http://ai.eecs.umich.edu/people/wew/Papers/AB_Architecture2.ps.Z
Refering-URL: http://ai.eecs.umich.edu/people/wew/research.html
Root-URL: http://www.eecs.umich.edu
Email: @eecs.umich.edu  
Title: A Control Architecture for Flexible Internet Auction Servers  
Author: Peter R. Wurman Michael P. Wellman William E. Walsh Kevin A. O'Malley f pwurman, wellman, wew, omalleyg 
Date: February 6, 1999  
Affiliation: University of Michigan Artificial Intelligence Laboratory  
Abstract: The flexibility to support both high activity and low activity auctions is required by any system that allows bidding by both humans and software agents. We present the control architecture of the Michi-gan Internet AuctionBot, and discuss some of the system engineering issues that arose in its design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mark A. Satterthwaite and Steven R. Williams. </author> <title> Bilateral trade with the sealed bid k-double auction: Existence and efficiency. </title> <journal> Journal of Economic Theory, </journal> <volume> 48 </volume> <pages> 107-33, </pages> <year> 1989. </year>
Reference-contexts: Classes at the third level implement specific clearing algorithms. Figure 3 diagrams the data structures at each level for an auctioneer that uses the 4-heap algorithm [2] to implement the family of auctions based on the k-double auctions <ref> [1] </ref>. 3 3.3.1 Auctioneer Event Handling When the auctioneer receives a LOAD message, it retrieves the auction description from the database and all bids that have an admitted state. Bids are loaded in order of submission and hashed by owner ID.
Reference: [2] <author> Peter R. Wurman, William E. Walsh, and Michael P. Wellman. </author> <title> Flexible double auctions for electronic commerce: Theory and implementation. </title> <booktitle> Decision Support Systems, </booktitle> <volume> 24 </volume> <pages> 17-27, </pages> <year> 1998. </year>
Reference-contexts: This allows us to implement efficient, incremental auction algorithms such as the 4-heap algorithm <ref> [2] </ref>, and to avoid a large number of database accesses. Like the scheduler, the auctioneer consists of two threads: one listens for event messages, and the second runs the event loop. The auctioneer, however, receives events only from the scheduler, and only when they are past due. <p> The primary function of the language level is to parse bid strings into machine manipulable representations. Classes at the third level implement specific clearing algorithms. Figure 3 diagrams the data structures at each level for an auctioneer that uses the 4-heap algorithm <ref> [2] </ref> to implement the family of auctions based on the k-double auctions [1]. 3 3.3.1 Auctioneer Event Handling When the auctioneer receives a LOAD message, it retrieves the auction description from the database and all bids that have an admitted state.
Reference: [3] <author> Peter R. Wurman, Michael P. Wellman, and William E. Walsh. </author> <title> The Michigan Internet AuctionBot: A configurable auction server for human and software agents. </title> <booktitle> In Second International Conference on Autonomous Agents, </booktitle> <pages> pages 301-8, </pages> <address> Minneapolis, </address> <year> 1998. </year> <month> 12 </month>
Reference-contexts: 1 Introduction The Michigan Internet AuctionBot is a highly configurable auction server built to support research on electronic commerce and multiagent negotiation <ref> [3] </ref>. The first generation architecture was simple and robust, and allowed us to concentrate on other aspects of the system. However, several inefficiencies made it problematic to run auctions with very fast interactions. <p> This paper is primarily focused on the coordination of the system components while handling the following auction events: * Create auction: The AuctionBot system allows any registered user to initiate an auction. The rules are specified by parameters (see <ref> [3] </ref>). * Bid: The AuctionBot system allows each user to have only one bid active at a time|a new bid replaces any previous bid the agent may have had. <p> In the following sections, we discuss the actions that each component takes when it sends and receives these messages. Auction descriptions are stored in the database as a set of parameters and state variables (see <ref> [3] </ref> for more details). For the purposes of this paper, we are concerned with only the five auction fields shown in Table 2 and the subset of a bid record shown in Table 3.
References-found: 3

