URL: http://www.media.mit.edu/~lieber/Lieberary/OOP/Delegation/Delegation.ps
Refering-URL: http://www.media.mit.edu/~lieber/Lieberary/OOP/OOP.html
Root-URL: http://www.media.mit.edu
Title: Using Prototypical Objects to Implement Shared Behavior in Object Oriented Systems  
Author: Henry Lieberman 
Date: September 1986.  
Note: Electronic mail (Arpaner): Henry@AI.AI.MIT.Edu, Henry@MIT-AI Published In: Proceedings of First ACM Conference on ObjectOriented Programming Systems, Languages and Applications, Portland, OR,  
Address: Cambridge, Mass. 02139 USA  
Affiliation: Artificial Intelligence Laboratory Massachusetts Institute of Technology  
Abstract: A traditional philosophical controversy between representing general concepts as abstract sets or classes and representing concepts as concrete prototypes is reflected in a controversy between two mechanisms for sharing behavior between objects in object oriented programming languages. Inheritance splits the object world into classes, which encode behavior shared among a group of instances, which represent individual members of these sets. The class/instance distinction is not needed if the alternative of using prototypes is adopted. A prototype represents the default behavior for a concept, and new objects can reuse part of the knowledge stored in the prototype by saying how the new object differs from the prototype. The prototype approach seems to hold some advantages for representing default knowledge, and incrementally and dynamically modifying concepts. Delegation is the mechanism for implementing this in object oriented languages. After checking its idiosyncratic behavior, an object can forward a message to prototypes to invoke more general knowledge. Because class objects must be created before their instances can be used, and behavior can only be associated with classes, inheritance fixes the communication patterns between objects at instance creation time. Because any object can be used as a prototype, and any messages can be forwarded at any time, delegation is the more flexible and general of the two techniques. 
Abstract-found: 1
Intro-found: 1
Reference: [Birtwistle, Dahl, Myhrhaug, and Nygaard 73] <editor> G. M. Birtwistle, O-J Dahl, </editor> <publisher> B. </publisher>
Reference: <author> Myhrhaug, K. Nygaard. </author> <title> Simula Begin. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <note> 1973. </note> <author> [Bobrow 85] D. Bobrow, K. Kahn, M. Stefik, G. Kiczales. </author> <title> Common Loops. </title> <type> Technical Report, </type> <institution> Xerox Palo Alto Research Center, </institution> <note> 1985. </note> <author> [Bobrow, Stefik 83] Daniel Bobrow and Mark Stefik. </author> <title> Knowledge Programming in Loops. </title>
Reference: <author> Al Magazine, </author> <month> August, </month> <year> 1983. </year> <title> [Borning 86] Alan Borning. Classes Venus Prototypes in ObjectOriented Languages. </title> <booktitle> In Fall Joint Computer Conference. </booktitle> <address> ACM/IEEE, Dallas, Texas, </address> <month> November, </month> <note> 1986. </note> <author> [Goldberg, Robson 83] Adele Goldberg and David Robson. </author> <title> SmallTalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year> <title> [Hewitt 79] Carl Hewitt. Viewing Control Structures as Patterns of Passing Messages. </title>
Reference: <editor> In P. Winston and R. Brown [eds.], </editor> <booktitle> Artificial Intelligence, </booktitle> <publisher> an MIT Perspective. MIT Press, </publisher> <address> Cambridge, MA, </address> <note> 1979. </note> <author> [Hewitt, Attardi, Lieberman 79] Carl Hewitt, Giuseppe Attardi, and Henry Lieberman. </author> <title> Security And Modularity In Message Passing. </title> <booktitle> In First Conference on Distributed Computing. IEEE, </booktitle> <address> Huntsville, </address> <year> 1979. </year> <title> [Kahn 79] Kenneth Kahn. Creation of Computer Animation from Story Descriptions. </title> <type> Ph.D. thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1979. </year> <title> [Krasner 84] Glenn Krasner, editor. SmallTalk-80: Bits of H istory and Words of Advice. </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1984. </year> <note> [Lieberman 86a] Henry Lieberman. Concurrent Object Oriented Programming in Act 1. </note>
Reference: <editor> In A. Yonezawa and Tokoro [eds.], </editor> <title> Concurrent Object Oriented Programming. </title> <publisher> NUT Press, </publisher> <address> Cambridge, MA, </address> <year> 1986. </year> <title> [Lieberman 86b] Henry Lieberman. Delegation and Inheritance: Two Mechanisms for Sharing Knowledge in Object Oriented Systems. </title>
Reference: <editor> In J. Bezivin, P. Cointe [eds.], </editor> <booktitle> 3eme Journees dEtudes Languages Orientes Objets. AFCET, </booktitle> <address> Paris, France, </address> <year> 1986. </year> <note> [Lieberman and Hewitt 83] Henry Lieberman and Carl Hewitt. </note>
References-found: 6

