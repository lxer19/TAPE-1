URL: http://enuxsa.eas.asu.edu:80/~ihrig/t.ps.Z
Refering-URL: http://enuxsa.eas.asu.edu:80/~ihrig/
Root-URL: 
Title: THE DESIGN AND IMPLEMENTATION OF A CASE-BASED PLANNING FRAMEWORK WITHIN A PARTIAL-ORDER PLANNER  
Author: by Laurie H. Ihrig 
Degree: A Dissertation Presented in Partial Fulfillment of the Requirements for the Degree Doctor of Philosophy  
Date: May 1996  
Affiliation: ARIZONA STATE UNIVERSITY  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Ambros-Ingerson and S. Steel. </author> <title> Integrating planning, execution and monitoring. </title> <booktitle> In Proceedings AAAI-88, pages 83--88. AAAI, 1988. </booktitle> <address> St. Paul, Minnesota. </address>
Reference-contexts: The approach of reactive planning is to iterate the planning process over time, to allow for external occurrences which may result in plan failure. Research in partial-order planning has been aimed at integrating planning with run-time sensing <ref> [1, 11] </ref>. A future direction for DerSNLP involves augmenting the case-based planning framework to make it reactive to external events.
Reference: [2] <author> A. Barrett and D. Weld. </author> <title> Partial order planning: evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67:71--112, </volume> <year> 1994. </year>
Reference-contexts: In the current literature, there exist two broad classes of domain-independent generative planning techniques: state-space planners which search in the space of world states, and plan-space planners which search in the space of partly-constructed plans. DerSNLP is based within the partial-order planner, SNLP (Systematic Nonlinear Planner) <ref> [2, 39] </ref>, which falls into the latter category. Two separate issues are addressed in the chapters that follow. First, in Chapter 3, an argument is presented which justifies the choice of a plan-space planner as the basis for the CBP framework. <p> These include forward-chaining means-ends analysis planners such as STRIPS [12], and PRODIGY [8] 1 There exists another class of planners which do backward search in the space of world states, starting with the goal state (for example, TOPI <ref> [2] </ref>). These planners add new actions only to the beginning of the partial solution during refinement. The current goal state is obtained by regressing the goal through the new step, and is used to determine the next action to be applied. <p> Later, as conflicts are detected between parallel operators, a step may be interleaved into the existing plan segment. This approach is generally more efficient than its total-order counterpart as it avoids premature commitment to arbitrary inter-operator orderings, thereby decreasing the likelihood of having to backtrack over these orderings <ref> [2, 43] </ref>. Example: Figure 2.2 illustrates the behavior of plan-space and state-space planners in solving a simple problem taken from the logistics transportation domain described in [52] and adapted for our experiments as shown in Figure 2.3. has to be transported between locations. <p> Case-Based Planning 9 in practice is that goals can be solved in this order without ever having to reachieve the same goal more than once. Barrett and Weld <ref> [2] </ref> extend Korf's analysis into plan space. The problem space is defined as a space of plan states, and a goal is a subset of the plans contained in this space. This subset contains all of the plans which achieve the goal. <p> DerSNLP is the CBP framework which is introduced in this dissertation. DerSNLP, also extends a case through the normal course of plan refinement defined by an underlying plan-space strategy. However, DerSNLP is implemented within the partial-order, causal-link planner, SNLP <ref> [39, 2] </ref>. In this aspect it is similar to the SPA system developed by Hanks and Weld [18]. The different CBP systems may also be distinguished according to their case adaptation strategy. <p> This model was adapted for plan-space replay in DerSNLP [19, 20, 22, 21]. Since replay is not a planning algorithm in itself, but a search control strategy, replay preserves all of the properties of the underlying planner, including soundness, completeness, and systematicity <ref> [39, 2] </ref>. The next chapter discusses the advantages of plan-space planning in CBP. It justifies the shift to plan-space replay, and describes the replay framework which forms the basis of this dissertation. <p> Clearly, interleavability is more general than sequencability, as modifiability is more general than interleavability. A partial-order plan is defined as a collection of plan constraints <ref> [2] </ref>. For example, DerSNLP represents its partial plans as a 6-tuple, hS; O; B; L; E; Ci (See Section 3.1.1). This set of constraints that make up the plan is consistent with a set of macros. <p> Table 3.2 shows the relation between the types of goals present in the domain and the expected types of macro sequencability a case-based planner is likely to encounter. To understand this relationship, consider the simple artificial domains, ART-IND, ART-MD and ART-MD-NS originally described in <ref> [2] </ref> and shown in Figure 3.3. These domains differ in terms of the serializability of the goals in the domain [37, 2]. <p> To understand this relationship, consider the simple artificial domains, ART-IND, ART-MD and ART-MD-NS originally described in [2] and shown in Figure 3.3. These domains differ in terms of the serializability of the goals in the domain <ref> [37, 2] </ref>. <p> All problems from this domain are made up of goals which are trivially serializable for a state-space planner <ref> [2] </ref> and may 3.2. <p> An empirical evaluation of this hypothesis is contained in the next section. 3.3 Empirical Evaluation An empirical study was conducted to test the hypotheses regarding the relative effectiveness of reuse and replay for plan-space vs state-space planners. To do this two state-space planners, TOPI <ref> [2] </ref> and NOLIMIT [52], were chosen in addition to the PO planner, SNLP. Reuse and replay were implemented on these planners and their performance was compared. <p> In the following, the planners, the reuse and replay strategies and the test domains are briefly described. 3.3.1 Performance Systems Our performance systems included two planners developed by Barrett and Weld <ref> [2] </ref>. SNLP (POCL) is a causal-link partial-order planner, which may arbitrarily interleave subplans. The second planner, TOPI, carries out a backward-chaining world-state search. TOPI adds steps only to the beginning of the plan. <p> This chapter has presented the argument that plan-space planners have some advantages over state-space planners in supporting case-based planning. Previous research that compared plan-space and state-space planners in generative planning have come to similar conclusions <ref> [2] </ref>. Given this, it might seem that the effectiveness of a planning strategy in CBP is totally determined by its efficiency in generative planning. I will argue that this is not the case for the following reasons. <p> As described earlier, DerSNLP represents 52 Chap. 4. Learning from Case Failure to Improve Retrieval its partial plans as a 6-tuple, hS; O; B; L; E; Ci, where <ref> [2] </ref>: S is the set of actions in the plan, each of which is mapped onto an operator in the domain theory. S contains two dummy steps: t I whose effects are the initial state conditions, and t G whose preconditions are the input goals, G. <p> The first was the artificial domain, ( 2 D m S 1 ), originally described in <ref> [2] </ref> and shown in Figure 4.7. Testing was done on problems which were randomly generated from this domain with the restriction that they always contain the goal g ff .
Reference: [3] <author> S. Batchu, S. Kambhampati, H. Kartheek, and J. Shah. </author> <title> An iterative and interactive approach for process planning. </title> <type> Technical Report ASU CSE TR 95-023, </type> <institution> Arizona State University, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: The aim was to evaluate the replay system in complex and realistic domains. Two domains were chosen for this purpose, the logistics transportation domain of [52] and the domain of process planning [15]. In process planning <ref> [15, 9, 45, 3] </ref> plans are formulated that are a sequence of machining operations whose end result is a mechanical part. Recent research in this area [28] has been aimed at applying plan reuse as provided by the PRIAR framework, to automate the modification of plans in this domain.
Reference: [4] <author> N. Bhatnagar and J. Mostow. </author> <title> On-line learning from search failures. </title> <booktitle> In Machine Learning, </booktitle> <pages> pages 69--117, </pages> <year> 1994. </year>
Reference-contexts: The case description is annotated with the specific instances in which the retrieval of the case has been inappropriate. Reasons for case failure point to an alternative repairing case. Although EBL techniques have been previously used to learn from problem-solving failures <ref> [4] </ref>, the goal of EBL has been to construct generalized control rules that can be applied to each new planning decision. Here I use a similar analysis to generate case-specific rules for case retrieval. <p> Here learning to avoid the misretrieval problem is accomplished through EBL techniques which were developed to explain failures that occur in the planner's search space. Although EBL techniques have been previously used to learn from problem-solving failures <ref> [4] </ref>, the goal of EBL has been to construct generalized control rules that can be applied to each new planning decision. Here we use the same analysis to generate case-specific rules for case retrieval.
Reference: [5] <author> B. Blumenthal and B. Porter. </author> <title> Analysis and empirical studies of derivational analogy. </title> <journal> Artificial Intelligence, </journal> <volume> 67:287--327, </volume> <year> 1994. </year>
Reference-contexts: If a wrong decision is made in this regard, the planner will be forced to backtrack over the plan resulting from replay. Such backtracking could be costly in terms of performance. Indeed, past work on replay that was based in state-space planning systems <ref> [5, 52] </ref> has spent considerable effort towards finding best heuristic strategies to decide how to interleave 3.2. Analysis of Case Extension Strategies 25 Figure 3.4 transportation domain example showing the differences in support provided by state-space and plan-space planning to replay. <p> Similarly, the plan reuse strategy employed here can be extended to start with multiple macros, which between them cover complementary subsets of the new problem goals. The ability to interleave plans will again be advantageous in multi-plan reuse. Multi-Pass Adaptation: Some implemented case-based planning systems, such as RE-MAID <ref> [5] </ref> and PRODIGY/ANALOGY [52] use multi-pass strategies in adaptation. For example, rather than abandon the case after it has been replayed once, such systems keep the case and replay it again if parts of the case that are not previously applicable, become applicable as the skeletal plan is being extended.
Reference: [6] <author> J. Carbonell. </author> <title> Learning by analogy: Formulating and generalizing plans from past experience. </title> <editor> In R. Michalski, J. Carbonell, and T. Mitchell, editors, </editor> <booktitle> Machine Learning: an Artificial Intelligence approach, </booktitle> <volume> volume 1, </volume> <pages> pages 137--159. </pages> <publisher> Tioga Press, </publisher> <year> 1983. </year>
Reference-contexts: In this aspect it is similar to the SPA system developed by Hanks and Weld [18]. The different CBP systems may also be distinguished according to their case adaptation strategy. These can be roughly categorized as either transformational or derivational <ref> [6, 7] </ref>, according to whether they transform a previous plan or replay a previous plan derivation. In the transformational strategies of PRIAR and SPA, the final plan which is the product of the planning episode is stored in the case library. <p> In the transformational strategies of PRIAR and SPA, the final plan which is the product of the planning episode is stored in the case library. When a case is retrieved this plan is fitted to adapt to the new problem-solving situation by retracting the irrelevant subparts. Early CBP systems <ref> [6, 17] </ref> also employ transformational techniques to adapt a previous solution. Causal-link planners such as SNLP are ready-made for plan reuse since the causal structure which is employed in plan adaptation is part of the plan itself. PRIAR and SPA 12 Chap. 2. <p> There are a number of different CBP systems which differ in the way that they adapt a previous case <ref> [6, 17, 18, 52] </ref>. Other techniques [6, 17, 18] do not employ refinement planning to extend a case. There is therefore a question as to whether the conclusions as to the benefits of plan-space CBP apply to these other frameworks as well. <p> There are a number of different CBP systems which differ in the way that they adapt a previous case [6, 17, 18, 52]. Other techniques <ref> [6, 17, 18] </ref> do not employ refinement planning to extend a case. There is therefore a question as to whether the conclusions as to the benefits of plan-space CBP apply to these other frameworks as well.
Reference: [7] <author> J. Carbonell. </author> <title> Derivational analogy: A theory of reconstructive problem solving and expertise acquisition. </title> <editor> In Ryszard Michalski, Jaime Carbonell, and Tom M. Mitchell, editors, </editor> <booktitle> Machine Learning: an Artificial Intelligence approach: </booktitle> <volume> Volume 2. Morgan-Kaufman, </volume> <year> 1986. </year>
Reference-contexts: In this aspect it is similar to the SPA system developed by Hanks and Weld [18]. The different CBP systems may also be distinguished according to their case adaptation strategy. These can be roughly categorized as either transformational or derivational <ref> [6, 7] </ref>, according to whether they transform a previous plan or replay a previous plan derivation. In the transformational strategies of PRIAR and SPA, the final plan which is the product of the planning episode is stored in the case library. <p> SPA, on the other hand, alternates the retraction of the plan constraints with the further addition of new constraints. Derivational analogy is a case-based planning technique which was introduced by Carbonell <ref> [7] </ref>. This model was thoroughly developed by Veloso in PRODIGY/ANALOGY [52], which employs a case fitting strategy called derivational replay. This strategy allows the planner to readily merge small subplans to solve large problems. In replay, case fitting is also based on the plan's underlying causal structure. <p> The justification for step addition reflects the causal dependencies between plan steps. Only justified choices are replayed in solving the new problem. Thus derivation replay serves the same function as the initial fitting phase of plan reuse. Derivational replay includes all of the following elements <ref> [7, 52, 53] </ref>: a facility within the underlying planner to generate a trace of the derivation of a plan, the indexing and storage of the derivation trace in a library of previous cases, the retrieval of a case in preparation for solving a new problem, and finally, a replay mechanism by
Reference: [8] <author> J. Carbonell, C. Knoblock, and S. Minton. </author> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In K. VanLehn, editor, </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1990. </year>
Reference-contexts: Most planners used in learning research to date fall roughly in this category, in that they add steps contiguous to the end of a plan sequence, and advance the current state accordingly. These include forward-chaining means-ends analysis planners such as STRIPS [12], and PRODIGY <ref> [8] </ref> 1 There exists another class of planners which do backward search in the space of world states, starting with the goal state (for example, TOPI [2]). These planners add new actions only to the beginning of the partial solution during refinement.
Reference: [9] <author> T.-C. Chang and R.A. Wysk. </author> <title> An Introduction to Automated Process Planning Systems. </title> <booktitle> International Series in Industrial and Systems Engineering. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: The aim was to evaluate the replay system in complex and realistic domains. Two domains were chosen for this purpose, the logistics transportation domain of [52] and the domain of process planning [15]. In process planning <ref> [15, 9, 45, 3] </ref> plans are formulated that are a sequence of machining operations whose end result is a mechanical part. Recent research in this area [28] has been aimed at applying plan reuse as provided by the PRIAR framework, to automate the modification of plans in this domain.
Reference: [10] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32:333--337, </volume> <year> 1987. </year> <month> 84 </month>
Reference-contexts: There are, for example, differences between the various plan-space planners which determine when they will fail. For example, causal link planners such as SNLP will fail when links are violated, whereas planners such as UA [43] and TWEAK <ref> [10] </ref> which don't form or protect causal links will not fail for this reason. The current approach to CBP allows the planner to update the case library in response to feedback when a wrong decision has been made. <p> Plan-space planners such as UA [43] and TWEAK <ref> [10] </ref> do not commit to specific causal structures, while plan-space planners such as MP and MP-I [27] allow for causal structures that strike a better balance between redundancy and commitment. Commitments to Specific Ways of Achieving a Goal: Suppose there are several possible ways of achieving a specific goal g.
Reference: [11] <author> O. Etzioni, K. Golden, and D. Weld. </author> <title> Tractable closed-world reasoning with updates. </title> <booktitle> In Proceedings of the Fourth International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <year> 1994. </year>
Reference-contexts: The approach of reactive planning is to iterate the planning process over time, to allow for external occurrences which may result in plan failure. Research in partial-order planning has been aimed at integrating planning with run-time sensing <ref> [1, 11] </ref>. A future direction for DerSNLP involves augmenting the case-based planning framework to make it reactive to external events.
Reference: [12] <author> R. Fikes and N. Nilsson. </author> <title> A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2:189--208, </volume> <year> 1971. </year>
Reference-contexts: The problem is defined as a 3-tuple, hI; G; Ai, made up of the initial state, I, the goal state, G, each represented as a conjunction of first-order literals, and a set, A, of domain operators in STRIPS representation <ref> [12] </ref>. The planner begins at one of the world states (for example, the initial state) as its current world state and proceeds by continually revising its position by stepping to an adjoining state in the space. Each transition through this space represents the action accomplished by a single operator. <p> Most planners used in learning research to date fall roughly in this category, in that they add steps contiguous to the end of a plan sequence, and advance the current state accordingly. These include forward-chaining means-ends analysis planners such as STRIPS <ref> [12] </ref>, and PRODIGY [8] 1 There exists another class of planners which do backward search in the space of world states, starting with the goal state (for example, TOPI [2]). These planners add new actions only to the beginning of the partial solution during refinement.
Reference: [13] <author> S. Fox and D. Leake. </author> <title> Using introspective reasoning to refine indexing. </title> <booktitle> In Proceedings IJCAI-95, pages 391--397, 1995. </booktitle> <address> Montreal, Quebec, Canada. </address>
Reference-contexts: DerSNLP+EBL deals with the mis-retrieval problem by treating a retrieval error as a learning opportunity by which it may learn to avoid similar retrieval errors. CHEF [17] learns to avoid execution-time failures by simulating and analysing plans derived by reusing old cases. Fox and Leake <ref> [13] </ref> have taken a similar approach but use introspective reasoning to explain failures and find repairing cases. Here learning to avoid the misretrieval problem is accomplished through EBL techniques which were developed to explain failures that occur in the planner's search space.
Reference: [14] <author> A. Francis and S. Ram. </author> <title> A comparative utility analysis of case-based reasoning and control-rule problem-solving. </title> <booktitle> In ECML-95: Proceedings of the Eighth European Conference on Machine Learning, </booktitle> <year> 1995. </year>
Reference-contexts: The DerSNLP+EBL framework therefore represents an integration of case-based planning with failure-based EBL. 7.3. Tradeoffs in CBP and EBL 79 CBP represents one solution to the utility problem encountered in other forms of explanation-based learning <ref> [42, 41, 25, 14] </ref>. In EBL, the successes and failures that are encountered in the planner's search space are used to construct generalized control rules that can be applied to each new planning decision.
Reference: [15] <author> Y. Gil. </author> <title> A specification of manufacturing processes for planning. </title> <type> Technical Report CMU-CS-91-179, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <year> 1991. </year>
Reference-contexts: The aim was to evaluate the replay system in complex and realistic domains. Two domains were chosen for this purpose, the logistics transportation domain of [52] and the domain of process planning <ref> [15] </ref>. In process planning [15, 9, 45, 3] plans are formulated that are a sequence of machining operations whose end result is a mechanical part. <p> The aim was to evaluate the replay system in complex and realistic domains. Two domains were chosen for this purpose, the logistics transportation domain of [52] and the domain of process planning [15]. In process planning <ref> [15, 9, 45, 3] </ref> plans are formulated that are a sequence of machining operations whose end result is a mechanical part. Recent research in this area [28] has been aimed at applying plan reuse as provided by the PRIAR framework, to automate the modification of plans in this domain. <p> The 30-problem test sets were generated for each problem size ranging from 6 to 10 goals. In addition to the logistics transportation domain, the planner was also tested on a subset of Gil's process planning domain <ref> [15] </ref>. Thirty problem test sets of varying problem size were attempted after training on 20 randomly-generated problems. Goals were generated as in the transportation domain by extracting achievable conditions, choosing one of these conditions, then choosing the relevant workpiece.
Reference: [16] <author> K. Hammond. Chef: </author> <title> A model of case-based planning. </title> <booktitle> In Proceedings AAAI-86, pages 261--271. AAAI, 1986. </booktitle> <address> Philadelphia, Pennsylvania. </address>
Reference-contexts: The cost of retrieval . We obviously need sophisticated techniques that reduce the retrieval cost. Not surprisingly, a significant amount of work on plan reuse and case-based reasoning was devoted to this <ref> [26, 52, 16] </ref>. 2. The cost of fitting . Since most fitting methods take polynomial time in the size of the retrieved case and the new problem, this factor is dominated by the other factors. 3. The length of the skeletal plan l sk .
Reference: [17] <author> K. Hammond. </author> <title> Explaining and repairing plans that fail. </title> <journal> Artificial Intelligence, </journal> <volume> 45:173--228, </volume> <year> 1990. </year>
Reference-contexts: Recovery may mean further transforming or debugging the fitted plan, or it may mean abandoning the plan and returning to from-scratch planning. The next section provides an overview of some current literature in the area of case-based planning. 2.2.1 A Comparison of Different Approaches to CBP Hammond's CHEF <ref> [17] </ref> simulates and analyses plans derived by reusing old cases, and employs a hand-coded modification procedure to debug a previous plan when it is found to be faulty. CHEF therefore differs from other systems which use an underlying domain-independent generative planner for the same purpose. <p> In the transformational strategies of PRIAR and SPA, the final plan which is the product of the planning episode is stored in the case library. When a case is retrieved this plan is fitted to adapt to the new problem-solving situation by retracting the irrelevant subparts. Early CBP systems <ref> [6, 17] </ref> also employ transformational techniques to adapt a previous solution. Causal-link planners such as SNLP are ready-made for plan reuse since the causal structure which is employed in plan adaptation is part of the plan itself. PRIAR and SPA 12 Chap. 2. <p> There are a number of different CBP systems which differ in the way that they adapt a previous case <ref> [6, 17, 18, 52] </ref>. Other techniques [6, 17, 18] do not employ refinement planning to extend a case. There is therefore a question as to whether the conclusions as to the benefits of plan-space CBP apply to these other frameworks as well. <p> There are a number of different CBP systems which differ in the way that they adapt a previous case [6, 17, 18, 52]. Other techniques <ref> [6, 17, 18] </ref> do not employ refinement planning to extend a case. There is therefore a question as to whether the conclusions as to the benefits of plan-space CBP apply to these other frameworks as well. <p> Multi-pass algorithms are akin to using macro operators to satisfy the preconditions of other macro operators. Prior work [44] has shown that unconstrained macro-chaining could have an adverse effect on performance. 3.5.2 The Cost in a Transformational Framework Some CBP systems employ transformational as opposed to refinement methods <ref> [17, 18] </ref>. Their approach to the reuse of a plan may therefore involve simultaneous addition and retraction of plan constraints. In this Section I will analyze whether the conclusions as to the benefits of plan-space CBP apply to these frameworks as well. <p> In Chapter 3 we contrasted its CBP methodology with other CBP systems based within different planning strategies [29, 26, 18, 52]. Some early case-based planners, including Hammond's CHEF <ref> [17] </ref>, differ from these in that they do not assume an underlying generative planner that accomplishes the extension of the case to the new problem situation as well as recovery when the case fails. <p> However, the performance improvements provided by CBP are dependent on mis-retrieval being infrequent. DerSNLP+EBL deals with the mis-retrieval problem by treating a retrieval error as a learning opportunity by which it may learn to avoid similar retrieval errors. CHEF <ref> [17] </ref> learns to avoid execution-time failures by simulating and analysing plans derived by reusing old cases. Fox and Leake [13] have taken a similar approach but use introspective reasoning to explain failures and find repairing cases.
Reference: [18] <author> S. Hanks and D. Weld. </author> <title> The systematic plan adaptor: A formal foundation for case-based planning. </title> <type> Technical Report 92-09-04, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1992. </year>
Reference-contexts: CHEF therefore differs from other systems which use an underlying domain-independent generative planner for the same purpose. The current approach to CBP is similar to systems which employ a complete and correct domain-independent planner to extend a case <ref> [18, 29, 35, 52] </ref>. In surveying this literature, it is possible to distinguish these approaches on two orthogonal scales as shown in Figure 2.5. <p> DerSNLP, also extends a case through the normal course of plan refinement defined by an underlying plan-space strategy. However, DerSNLP is implemented within the partial-order, causal-link planner, SNLP [39, 2]. In this aspect it is similar to the SPA system developed by Hanks and Weld <ref> [18] </ref>. The different CBP systems may also be distinguished according to their case adaptation strategy. These can be roughly categorized as either transformational or derivational [6, 7], according to whether they transform a previous plan or replay a previous plan derivation. <p> There are a number of different CBP systems which differ in the way that they adapt a previous case <ref> [6, 17, 18, 52] </ref>. Other techniques [6, 17, 18] do not employ refinement planning to extend a case. There is therefore a question as to whether the conclusions as to the benefits of plan-space CBP apply to these other frameworks as well. <p> There are a number of different CBP systems which differ in the way that they adapt a previous case [6, 17, 18, 52]. Other techniques <ref> [6, 17, 18] </ref> do not employ refinement planning to extend a case. There is therefore a question as to whether the conclusions as to the benefits of plan-space CBP apply to these other frameworks as well. <p> Multi-pass algorithms are akin to using macro operators to satisfy the preconditions of other macro operators. Prior work [44] has shown that unconstrained macro-chaining could have an adverse effect on performance. 3.5.2 The Cost in a Transformational Framework Some CBP systems employ transformational as opposed to refinement methods <ref> [17, 18] </ref>. Their approach to the reuse of a plan may therefore involve simultaneous addition and retraction of plan constraints. In this Section I will analyze whether the conclusions as to the benefits of plan-space CBP apply to these frameworks as well. <p> In this Section I will analyze whether the conclusions as to the benefits of plan-space CBP apply to these frameworks as well. I will look at the cost benefits of plan-space planning in an alternative transformational planning framework. The SPA system of Hanks and Weld <ref> [18] </ref> attempts to directly adapt the skeletal plan resulting from the fitting stage by allowing retraction of plan constraints to be alternated with skeletal plan refinement. <p> CHAPTER 7 RELATED WORK AND DISCUSSION 7.1 Early CBP Systems The current approach has many elements in common with other CBP systems that are described in the literature. In Chapter 3 we contrasted its CBP methodology with other CBP systems based within different planning strategies <ref> [29, 26, 18, 52] </ref>. Some early case-based planners, including Hammond's CHEF [17], differ from these in that they do not assume an underlying generative planner that accomplishes the extension of the case to the new problem situation as well as recovery when the case fails.
Reference: [19] <author> L. Ihrig and S. Kambhampati. </author> <title> Derivation replay for partial-order planning. </title> <booktitle> In Proceedings AAAI-94, </booktitle> <year> 1994. </year>
Reference-contexts: This model was adapted for plan-space replay in DerSNLP <ref> [19, 20, 22, 21] </ref>. Since replay is not a planning algorithm in itself, but a search control strategy, replay preserves all of the properties of the underlying planner, including soundness, completeness, and systematicity [39, 2]. The next chapter discusses the advantages of plan-space planning in CBP.
Reference: [20] <author> L Ihrig and S. Kambhampati. </author> <title> On the relative utility of plan-space vs state-space planning in a case-based framework. </title> <type> Technical Report 94-006, </type> <institution> Department of Computer Science and Engineering, 1994. Arizona State University. </institution>
Reference-contexts: This model was adapted for plan-space replay in DerSNLP <ref> [19, 20, 22, 21] </ref>. Since replay is not a planning algorithm in itself, but a search control strategy, replay preserves all of the properties of the underlying planner, including soundness, completeness, and systematicity [39, 2]. The next chapter discusses the advantages of plan-space planning in CBP.
Reference: [21] <author> L. Ihrig and S. Kambhampati. </author> <title> Design and implementation of a replay framework based on a partial order planner. </title> <booktitle> In Proceedings AAAI-96, </booktitle> <year> 1996. </year>
Reference-contexts: This model was adapted for plan-space replay in DerSNLP <ref> [19, 20, 22, 21] </ref>. Since replay is not a planning algorithm in itself, but a search control strategy, replay preserves all of the properties of the underlying planner, including soundness, completeness, and systematicity [39, 2]. The next chapter discusses the advantages of plan-space planning in CBP.
Reference: [22] <author> L. Ihrig and S. Kambhampati. </author> <title> An explanation-based approach to improve retrieval in case-based planning. </title> <editor> In M. Ghallab and A. Milani, editors, </editor> <title> New Directions in AI Planning, </title> <publisher> pages 395--406. IOS Press, </publisher> <year> 1996. </year>
Reference-contexts: This model was adapted for plan-space replay in DerSNLP <ref> [19, 20, 22, 21] </ref>. Since replay is not a planning algorithm in itself, but a search control strategy, replay preserves all of the properties of the underlying planner, including soundness, completeness, and systematicity [39, 2]. The next chapter discusses the advantages of plan-space planning in CBP.
Reference: [23] <author> D. Joslin and J. Roach. </author> <title> A theoretical analysis of conjunctive goal problems. </title> <journal> Artificial Intelligence, </journal> <volume> 41:97--106, </volume> <year> 1990. </year>
Reference-contexts: It is this ability to interleave new steps into the plan which gives the PO planner an advantage in case adaptation. 2.1.1 Goal Interaction It has always been recognized that the relative difficulty of problem-solving is linked to the level of interaction between the various input goals of the problem. <ref> [23, 37] </ref>. Goal interaction has been viewed in terms of the problem search space which has traditionally been seen as a space of world states. Korf [37] defined a goal as a subset of the world states within this space, the set of states which satisfy the goal.
Reference: [24] <author> L. Kaebling. </author> <title> An architecture for intelligent reactive systems. </title> <booktitle> In Reasoning About Actions and Plans: Proceedings of the 1986 Workshop, pages 395--410. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> 1987. Timberline, Oregon. </address> <month> 85 </month>
Reference-contexts: DerSNLP may be extended to have the planner learn to avoid bad plans as well as plan failures. 8.2 Planning in a Dynamic World Intelligent systems are increasingly being utilized to do tasks that require planning and problem solving in complex and dynamic worlds. Kaebling <ref> [24] </ref> identified two problems that a dynamic environment imposes on a traditional planner. First, when planning takes 8.2. Planning in a Dynamic World 81 control of the processor, the system is unresponsive to changes in the external world.
Reference: [25] <author> S. Kambhampati. </author> <title> Utility tradeoffs in incremental modification and reuse of plans. </title> <booktitle> In Proc. AAAI Spring Symp. on Computational Considerations in Supporting Incremental Modification and Reuse, </booktitle> <year> 1992. </year>
Reference-contexts: The DerSNLP+EBL framework therefore represents an integration of case-based planning with failure-based EBL. 7.3. Tradeoffs in CBP and EBL 79 CBP represents one solution to the utility problem encountered in other forms of explanation-based learning <ref> [42, 41, 25, 14] </ref>. In EBL, the successes and failures that are encountered in the planner's search space are used to construct generalized control rules that can be applied to each new planning decision.
Reference: [26] <author> S. Kambhampati. </author> <title> Exploiting causal structure to control retrieval and refitting during plan reuse. </title> <journal> Computational Intelligence Journal, </journal> <volume> 10(2), </volume> <year> 1994. </year>
Reference-contexts: NOLIMIT is here classed as a state-space planner since it applies actions to plan based on the current world state and advances the world state. The PRIAR framework <ref> [29, 26] </ref> is based within NONLIN [51]. NONLIN creates its plans through hierarchical task reduction. It is also a partial-order (plan-space) planner which constructs plans by protecting their underlying causal structure. DerSNLP is the CBP framework which is introduced in this dissertation. <p> The next sections provide more details on these alternative fitting methods. First we will consider fitting in plan reuse. 16 Chap. 3. DerSNLP: A Partial-order Case-based Planner Fitting in Plan Reuse In plan reuse, fitting involves retracting the unneeded plan segments <ref> [26, 29] </ref>. The algorithm takes as input the new problem specification, hI 0 ; G 0 ; Ai, the previous plan, P old , as well as an explanation for the correctness of the plan called its validation structure. <p> For a case to be widely applicable, the object constants must either be variablized as in [31], or alternatively, at the time of retrieval, we may create an object mapping which is used to revise the the old object names <ref> [26] </ref>. Here the latter strategy is adopted. The cases that are stored represent individual planning episodes instantiated with the original object constants. An object mapping is constructed when a case is considered as a candidate for retrieval. <p> is an exact match in all of these relevant initial state conditions, it is possible to judge the applicability of a case on the basis of a similarity metric which considers a case to be applicable if a set number of these conditions are consistent with the new initial state <ref> [26, 52] </ref>. Basing retrieval on a partial match increases the probability that a case will be found. However, it also means that the skeletal plan will contain action chains which are not executable in the new situation. <p> The cost of retrieval . We obviously need sophisticated techniques that reduce the retrieval cost. Not surprisingly, a significant amount of work on plan reuse and case-based reasoning was devoted to this <ref> [26, 52, 16] </ref>. 2. The cost of fitting . Since most fitting methods take polynomial time in the size of the retrieved case and the new problem, this factor is dominated by the other factors. 3. The length of the skeletal plan l sk . <p> The metric was similar to the validation structure-based similarity metric of <ref> [26] </ref> and the foot-printed similarity metric of [52]. Prior studies show it to be a reasonably effective metric. In learning mode, cases were also retrieved on the same basis. However, in this mode, the failure reasons attached to the case were used to censor its retrieval. <p> CHAPTER 7 RELATED WORK AND DISCUSSION 7.1 Early CBP Systems The current approach has many elements in common with other CBP systems that are described in the literature. In Chapter 3 we contrasted its CBP methodology with other CBP systems based within different planning strategies <ref> [29, 26, 18, 52] </ref>. Some early case-based planners, including Hammond's CHEF [17], differ from these in that they do not assume an underlying generative planner that accomplishes the extension of the case to the new problem situation as well as recovery when the case fails.
Reference: [27] <author> S. Kambhampati. </author> <title> Multi-contributor causal structures for planning: A formalization and evaluation. </title> <journal> Artificial Intelligence, </journal> <volume> 69, </volume> <year> 1994. </year>
Reference-contexts: Plan-space planners such as UA [43] and TWEAK [10] do not commit to specific causal structures, while plan-space planners such as MP and MP-I <ref> [27] </ref> allow for causal structures that strike a better balance between redundancy and commitment. Commitments to Specific Ways of Achieving a Goal: Suppose there are several possible ways of achieving a specific goal g.
Reference: [28] <author> S. Kambhampati, M.R. Cutkoksy, J.M. Tenenbaum, and S.H. Lee. </author> <title> Integrating general purpose planners and specialized reasoners: Case study of a hybrid planning architecture. </title> <journal> IEEE Tranactions on Systems, Man and Cybernetics (Special Issue on Planning, Scheduling and Control), </journal> <year> 1993. </year>
Reference-contexts: Two domains were chosen for this purpose, the logistics transportation domain of [52] and the domain of process planning [15]. In process planning [15, 9, 45, 3] plans are formulated that are a sequence of machining operations whose end result is a mechanical part. Recent research in this area <ref> [28] </ref> has been aimed at applying plan reuse as provided by the PRIAR framework, to automate the modification of plans in this domain. This domain is therefore a good candidate for testing the alternative method of reuse provided by derivation replay.
Reference: [29] <author> S. Kambhampati and J. A. Hendler. </author> <title> A validation structure based theory of plan modification and reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55:193--258, </volume> <year> 1992. </year>
Reference-contexts: CHEF therefore differs from other systems which use an underlying domain-independent generative planner for the same purpose. The current approach to CBP is similar to systems which employ a complete and correct domain-independent planner to extend a case <ref> [18, 29, 35, 52] </ref>. In surveying this literature, it is possible to distinguish these approaches on two orthogonal scales as shown in Figure 2.5. <p> NOLIMIT is here classed as a state-space planner since it applies actions to plan based on the current world state and advances the world state. The PRIAR framework <ref> [29, 26] </ref> is based within NONLIN [51]. NONLIN creates its plans through hierarchical task reduction. It is also a partial-order (plan-space) planner which constructs plans by protecting their underlying causal structure. DerSNLP is the CBP framework which is introduced in this dissertation. <p> DerSNLP: A Partial-order Case-based Planner The experiments described in this chapter have been conducted to compare plan-space and state-space planning when reuse and replay are implemented within DerSNLP's eager, extension-first CBP framework which has been adopted from PRIAR <ref> [29] </ref> (See section 3.1). There are a number of different CBP systems which differ in the way that they adapt a previous case [6, 17, 18, 52]. Other techniques [6, 17, 18] do not employ refinement planning to extend a case. <p> The next sections provide more details on these alternative fitting methods. First we will consider fitting in plan reuse. 16 Chap. 3. DerSNLP: A Partial-order Case-based Planner Fitting in Plan Reuse In plan reuse, fitting involves retracting the unneeded plan segments <ref> [26, 29] </ref>. The algorithm takes as input the new problem specification, hI 0 ; G 0 ; Ai, the previous plan, P old , as well as an explanation for the correctness of the plan called its validation structure. <p> Learning from case failure involves a number of different capabilities. First of all, DerSNLP incorporates a retrieval mechanism which retrieves the case on the basis of a static similarity metric. This metric approximates that employed by Kambhampati in <ref> [29] </ref> and also by Veloso in [52]. Using this metric, a case is judged applicable if (1) a subset of the new problem goals are covered by the case, and (2) the plan success conditions are present in the new initial state. <p> CHAPTER 7 RELATED WORK AND DISCUSSION 7.1 Early CBP Systems The current approach has many elements in common with other CBP systems that are described in the literature. In Chapter 3 we contrasted its CBP methodology with other CBP systems based within different planning strategies <ref> [29, 26, 18, 52] </ref>. Some early case-based planners, including Hammond's CHEF [17], differ from these in that they do not assume an underlying generative planner that accomplishes the extension of the case to the new problem situation as well as recovery when the case fails. <p> In contrast, hierarchical task reduction planners such as NONLIN [51] and SIPE [54] avoid some amount of premature commitment by first working out the details of the plan at abstract levels, and then refining it to more concrete levels. Systems such as PRIAR <ref> [29] </ref> use these hierarchical planners as the substrate for plan reuse. I believe that any type of premature commitment has a deleterious effect in plan reuse/replay. We can rely on the semantics of refinement planning [32, 33] to understand 78 Chap. 7. Related Work and Discussion this. <p> In Chapter 4 the DerSNLP framework was augmented with explanation-based learning (EBL) techniques that allow it to explain and learn from case failure, and thereby improve its case retrieval. This approach builds on earlier treatments of case retrieval <ref> [29, 52, 53] </ref>. In the current work, replay failures are detected and treated as a learning opportunity by which the case-based planner may improve its case retrieval.
Reference: [30] <author> S. Kambhampati, S. Katukam, and Y. Qu. </author> <title> Failure driven dynamic search control for partial order planners: An explanation-based approach. </title> <journal> Artificial Intelligence, </journal> <year> 1996. </year> <month> Forthcoming. </month>
Reference-contexts: Fitting in Derivation Replay In order to understand the replay process, it is useful to think of planning decisions as STRIPS-style operators acting on partly-constructed plans. For example, two choices made by DerSNLP are shown in Figure 3.2. DerSNLP constructs its plans as a collection of plan constraints <ref> [30] </ref>. A partial plan is represented as a 6-tuple, hS; O; B; L; E; Ci, where 1. S is the set of actions (step-names) in the plan, each of which is mapped onto an operator in the domain theory.
Reference: [31] <author> S. Kambhampati and S. Kedar. </author> <title> A unified framework for explanation-based generalization of partially ordered and partially instantiated plans. </title> <journal> Artificial Intelligence, </journal> <volume> 67:29--70, </volume> <year> 1994. </year>
Reference-contexts: There may be many domain objects of the same type, and an individual planning episode references a particular set of these objects. For a case to be widely applicable, the object constants must either be variablized as in <ref> [31] </ref>, or alternatively, at the time of retrieval, we may create an object mapping which is used to revise the the old object names [26]. Here the latter strategy is adopted. The cases that are stored represent individual planning episodes instantiated with the original object constants.
Reference: [32] <author> S. Kambhampati, C. Knoblock, and Q. Yang. </author> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial order planning. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> pages 167--238, </pages> <year> 1995. </year>
Reference-contexts: Systems such as PRIAR [29] use these hierarchical planners as the substrate for plan reuse. I believe that any type of premature commitment has a deleterious effect in plan reuse/replay. We can rely on the semantics of refinement planning <ref> [32, 33] </ref> to understand 78 Chap. 7. Related Work and Discussion this.
Reference: [33] <author> S. Kambhampati and B. Srivastava. </author> <title> Universal classical planner: An algorithm for unifying state-space and plan-space approaches. </title> <editor> In M. Ghallab and A. Milani, editors, </editor> <title> New Directions in AI Planning, </title> <publisher> pages 61--78. IOS Press, </publisher> <year> 1996. </year>
Reference-contexts: Systems such as PRIAR [29] use these hierarchical planners as the substrate for plan reuse. I believe that any type of premature commitment has a deleterious effect in plan reuse/replay. We can rely on the semantics of refinement planning <ref> [32, 33] </ref> to understand 78 Chap. 7. Related Work and Discussion this. <p> For example, consider the general scenario where we want to satisfy some precondition c of step s 2 by using the effects of a step s 1 . We clearly need to order the steps such that s 1 comes before s 2 . As discussed in <ref> [33] </ref>, the state-space planners do this by putting a contiguity constraint (denoted by ``fl'') between s 1 and s 2 , thereby guaranteeing not only that s 1 comes before s 2 , but that no other steps come in between.
Reference: [34] <author> S. Katukam and S. Kambhampati. </author> <title> Learning ebl-based search control rules for partial order planning. </title> <booktitle> In Proceedings AAAI-94, </booktitle> <year> 1994. </year>
Reference-contexts: These include methods for detecting and constructing explanations for analytical failures encountered in the planner's search space <ref> [34] </ref>. These explanations are regressed through the planning decisions in the failing search paths to construct reasons for case failure. <p> We are now in a position to describe how the planner learns the reasons underlying a case failure. Specifically, I use EBL techniques to accomplish this learning. In the next Section, I show how the techniques developed in <ref> [34] </ref> are employed to construct these reasons. 4.2.2 Learning from Case Failure DerSNLP+EBL constructs explanations for case failure through the use of explanation-based learning (EBL) techniques. These techniques allow the planner to explain the failures of individual paths in the planner's search space. <p> A search path experiences an analytical failure when it arrives at a plan which, because it contains a set of inconsistent constraints, cannot be further refined into a solution. EBL techniques are used in forming explanations of plan failures in terms of these constraints <ref> [34] </ref>. DerSNLP+EBL forms explanations for each of the analytical failures that occur under the skeletal plan. Path failure explanations identify a minimal set of constraints in the plan which are together inconsistent. These are regressed up the search paths and are collected at the root of the tree.
Reference: [35] <author> J. Koehler. </author> <title> Flexible plan reuse in a formal framework. </title> <editor> In C. Backstrom and E. Sandewall, editors, </editor> <booktitle> Current Trends in AI Planning, pages 171--184. </booktitle> <publisher> IOS Press, </publisher> <year> 1994. </year>
Reference-contexts: CHEF therefore differs from other systems which use an underlying domain-independent generative planner for the same purpose. The current approach to CBP is similar to systems which employ a complete and correct domain-independent planner to extend a case <ref> [18, 29, 35, 52] </ref>. In surveying this literature, it is possible to distinguish these approaches on two orthogonal scales as shown in Figure 2.5.
Reference: [36] <author> J. Kolodner. </author> <title> Case-Based Reasoning. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Empirical Evaluation 55 rules. Koton and Chase [38] have reformulated case-based reasoning in terms of default logic. In case-based reasoning <ref> [36] </ref>, retrieval is based on a theory of case similarity which is reflected in the indexing structure of the library. In planning, earlier planning episodes are retrieved first on the basis of the goals that they solve, and then on the initial state conditions relevent to those goals.
Reference: [37] <author> R. Korf. </author> <title> Planning as search: a qualitative approach. </title> <journal> Artificial Intelligence, </journal> <volume> 33:65--68, </volume> <year> 1987. </year> <month> 86 </month>
Reference-contexts: It is this ability to interleave new steps into the plan which gives the PO planner an advantage in case adaptation. 2.1.1 Goal Interaction It has always been recognized that the relative difficulty of problem-solving is linked to the level of interaction between the various input goals of the problem. <ref> [23, 37] </ref>. Goal interaction has been viewed in terms of the problem search space which has traditionally been seen as a space of world states. Korf [37] defined a goal as a subset of the world states within this space, the set of states which satisfy the goal. <p> Goal interaction has been viewed in terms of the problem search space which has traditionally been seen as a space of world states. Korf <ref> [37] </ref> defined a goal as a subset of the world states within this space, the set of states which satisfy the goal. Interaction between goals is defined in terms of the available paths connecting these goal states. <p> To understand this relationship, consider the simple artificial domains, ART-IND, ART-MD and ART-MD-NS originally described in [2] and shown in Figure 3.3. These domains differ in terms of the serializability of the goals in the domain <ref> [37, 2] </ref>.
Reference: [38] <author> P. Koton and M. Chase. </author> <title> Knowledge representation in a case-based reasoning system: Defaults and exceptions. </title> <booktitle> In Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 203--211, </pages> <year> 1989. </year>
Reference-contexts: Empirical Evaluation 55 rules. Koton and Chase <ref> [38] </ref> have reformulated case-based reasoning in terms of default logic. In case-based reasoning [36], retrieval is based on a theory of case similarity which is reflected in the indexing structure of the library. <p> If g 1 is a goal of problem x then it is a member of this class. Specializations of this class are found by following the features represented by the problem's initial state success conditions. Following the approach of <ref> [38] </ref>, default rules may be constructed that reflect the indexing structure contained in Figure 4.5. These rules are contained in Figure 4.6. Retrieval of a case is based on a normal default rule such as : applicable (ffi) / applicable (ffi) .
Reference: [39] <author> D. McAllester and D Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings AAAI-91, </booktitle> <pages> pages 634--639, </pages> <year> 1991. </year>
Reference-contexts: In the current literature, there exist two broad classes of domain-independent generative planning techniques: state-space planners which search in the space of world states, and plan-space planners which search in the space of partly-constructed plans. DerSNLP is based within the partial-order planner, SNLP (Systematic Nonlinear Planner) <ref> [2, 39] </ref>, which falls into the latter category. Two separate issues are addressed in the chapters that follow. First, in Chapter 3, an argument is presented which justifies the choice of a plan-space planner as the basis for the CBP framework. <p> DerSNLP is the CBP framework which is introduced in this dissertation. DerSNLP, also extends a case through the normal course of plan refinement defined by an underlying plan-space strategy. However, DerSNLP is implemented within the partial-order, causal-link planner, SNLP <ref> [39, 2] </ref>. In this aspect it is similar to the SPA system developed by Hanks and Weld [18]. The different CBP systems may also be distinguished according to their case adaptation strategy. <p> This model was adapted for plan-space replay in DerSNLP [19, 20, 22, 21]. Since replay is not a planning algorithm in itself, but a search control strategy, replay preserves all of the properties of the underlying planner, including soundness, completeness, and systematicity <ref> [39, 2] </ref>. The next chapter discusses the advantages of plan-space planning in CBP. It justifies the shift to plan-space replay, and describes the replay framework which forms the basis of this dissertation.
Reference: [40] <author> J. McCarthy and P. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 4, </volume> <pages> pages 463--502. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: Section 4.3 provides a more formal description of the case retrieval strategy. 54 Chap. 4. Learning from Case Failure to Improve Retrieval 4.3 A Formal Theory of Case Retrieval Default reasoning is employed in order to come to conclusions about a world of which our knowledge is incomplete <ref> [40] </ref>. It allows the reasoner to be able to make deductions based on only partial information.
Reference: [41] <author> S. Minton. </author> <title> Issues in the design of operator composition systems. </title> <booktitle> In Proceedings of the International conference on Machine Learning, </booktitle> <year> 1990. </year>
Reference-contexts: Section 5.3 describes how this merging is accomplished. 5.3 Fitting Multiple Cases Although the strategy of retrieving multiple cases in solving a single problem can greatly reduce the size of the library, it may result in lower quality plans if care is not taken to avoid redundancy in step addition <ref> [41] </ref>. When derivations for positively-interacting goals (goals that may be solved through common steps) are stored individually, replaying each case in sequence may result in unnecessary steps in the plan. <p> The DerSNLP+EBL framework therefore represents an integration of case-based planning with failure-based EBL. 7.3. Tradeoffs in CBP and EBL 79 CBP represents one solution to the utility problem encountered in other forms of explanation-based learning <ref> [42, 41, 25, 14] </ref>. In EBL, the successes and failures that are encountered in the planner's search space are used to construct generalized control rules that can be applied to each new planning decision.
Reference: [42] <author> S. Minton. </author> <title> Quantitative results concerning the utility of explanation-based learning. </title> <journal> Artificial Intelligence, </journal> <volume> 42:363--392, </volume> <year> 1990. </year>
Reference-contexts: The DerSNLP+EBL framework therefore represents an integration of case-based planning with failure-based EBL. 7.3. Tradeoffs in CBP and EBL 79 CBP represents one solution to the utility problem encountered in other forms of explanation-based learning <ref> [42, 41, 25, 14] </ref>. In EBL, the successes and failures that are encountered in the planner's search space are used to construct generalized control rules that can be applied to each new planning decision. <p> However, in complex domains matching rules at each choice point in the planning process becomes more costly since the rule base grows with increasing problem-solving experience. CBP avoids to a large extent the utility problem discussed in <ref> [42] </ref> by allowing retrieval from the library to occur at only one point in the search process, that is, at the start of problem-solving. Each retrieved case then represents a sequence of choices which provides global control as opposed to local (selecting a single choice).
Reference: [43] <author> S. Minton, J. Bresina, and M. Drummond. </author> <title> Total order and partial order planning: a comparative analysis. </title> <journal> Journal of Artificial Intelligence Research, </journal> <pages> pages 227--262, </pages> <year> 1994. </year>
Reference-contexts: Later, as conflicts are detected between parallel operators, a step may be interleaved into the existing plan segment. This approach is generally more efficient than its total-order counterpart as it avoids premature commitment to arbitrary inter-operator orderings, thereby decreasing the likelihood of having to backtrack over these orderings <ref> [2, 43] </ref>. Example: Figure 2.2 illustrates the behavior of plan-space and state-space planners in solving a simple problem taken from the logistics transportation domain described in [52] and adapted for our experiments as shown in Figure 2.3. has to be transported between locations. <p> One planning strategy may encounter failures that are not experienced by another. There are, for example, differences between the various plan-space planners which determine when they will fail. For example, causal link planners such as SNLP will fail when links are violated, whereas planners such as UA <ref> [43] </ref> and TWEAK [10] which don't form or protect causal links will not fail for this reason. The current approach to CBP allows the planner to update the case library in response to feedback when a wrong decision has been made. <p> Plan-space planners such as UA <ref> [43] </ref> and TWEAK [10] do not commit to specific causal structures, while plan-space planners such as MP and MP-I [27] allow for causal structures that strike a better balance between redundancy and commitment.
Reference: [44] <author> R. Mooney. </author> <title> The effect of rule use on the utility of explanation-based learning. </title> <booktitle> In Proceedings IJCAI-89, </booktitle> <pages> pages 725--730, </pages> <year> 1989. </year>
Reference-contexts: It is however not clear whether such multi-pass adaptation algorithms will have an overall positive impact on the effectiveness of case-based planning. Multi-pass algorithms are akin to using macro operators to satisfy the preconditions of other macro operators. Prior work <ref> [44] </ref> has shown that unconstrained macro-chaining could have an adverse effect on performance. 3.5.2 The Cost in a Transformational Framework Some CBP systems employ transformational as opposed to refinement methods [17, 18]. Their approach to the reuse of a plan may therefore involve simultaneous addition and retraction of plan constraints.
Reference: [45] <author> D. Nau, S. Gupta, and W. Regli. </author> <title> Ai planning versus manufacturing-operation planning: a case study. </title> <booktitle> In Proceedings IJCAI-95, 1995. </booktitle> <address> Montreal, Quebec, Canada. </address>
Reference-contexts: The aim was to evaluate the replay system in complex and realistic domains. Two domains were chosen for this purpose, the logistics transportation domain of [52] and the domain of process planning [15]. In process planning <ref> [15, 9, 45, 3] </ref> plans are formulated that are a sequence of machining operations whose end result is a mechanical part. Recent research in this area [28] has been aimed at applying plan reuse as provided by the PRIAR framework, to automate the modification of plans in this domain.
Reference: [46] <author> A. Perez and J. Carbonell. </author> <title> Control knowledge to improve plan quality. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning Systems, </booktitle> <pages> pages 323--328, </pages> <year> 1994. </year>
Reference-contexts: Further work will be aimed at finding a means of balancing this tradeoff between search cost and plan quality. For example, it is possible to identify bad plans as they are produced, through an independent plan evaluation <ref> [46] </ref>. DerSNLP may be extended to have the planner learn to avoid bad plans as well as plan failures. 8.2 Planning in a Dynamic World Intelligent systems are increasingly being utilized to do tasks that require planning and problem solving in complex and dynamic worlds.
Reference: [47] <author> D. Perlis. </author> <title> On the consistency of commonsense reasoning. </title> <booktitle> Computational Intelligence, </booktitle> <address> 2:180--190, </address> <year> 1986. </year>
Reference-contexts: Cases are retrieved on the assumption that these factors will not affect the success of the previous case. Making a default conclusion involves a number of different capabilities <ref> [47] </ref>. The reasoner must recognize that there is an absence of information that would lead it to conclude the contrary. Then, in face of this absence, it jumps to the default conclusion. Later, if new facts become evident, the reasoner recognizes that the earlier conclusion has been contradicted.
Reference: [48] <author> R. Reiter. </author> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1,2):81--132, </volume> <year> 1980. </year>
Reference-contexts: In default reasoning, extension is a description of the world which contains the facts that are known to be true as well as all of the default conclusions that can be made based on those facts. Reiter <ref> [48] </ref> provides a nonmonotonic logic which makes use of default rules of inference. The general form of the default rule is ff:fi/fl. ff is called the prerequisite of the rule. fi is called the justification and fl is the consequent.
Reference: [49] <author> E. Sacerdoti. </author> <title> A Structure for Plans and Behavior. </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1977. </year>
Reference: [50] <author> R. Simmons and R. Davis. </author> <title> Generate, test and debug: Combining associational rules and causal models. </title> <booktitle> In Proceedings IJCAI-87, </booktitle> <pages> pages 1071--1078, </pages> <year> 1987. </year>
Reference-contexts: Since CHEF has been very influential, I will now carefully delineate the similarities and differences between the model of CBP presented here, and that used by CHEF. Both CHEF, and another closely related system developed by Simmons called GORDIUS <ref> [50] </ref> use what is known as the Generate-Test-Debug model of planning. Both effectively use two different models of the planning domain -- a shallow one that is used in generating a default plan efficiently, and a deeper one which is used to test and debug the plan as needed.
Reference: [51] <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proceedings IJCAI-77, pages 888--889, 1977. </booktitle> <address> Cambridge, Massachusetts. </address>
Reference-contexts: NOLIMIT is here classed as a state-space planner since it applies actions to plan based on the current world state and advances the world state. The PRIAR framework [29, 26] is based within NONLIN <ref> [51] </ref>. NONLIN creates its plans through hierarchical task reduction. It is also a partial-order (plan-space) planner which constructs plans by protecting their underlying causal structure. DerSNLP is the CBP framework which is introduced in this dissertation. <p> Planners such as SNLP, TOPI, NOLIMIT have to commit to a specific way of achieving the goal in any given search branch. In contrast, hierarchical task reduction planners such as NONLIN <ref> [51] </ref> and SIPE [54] avoid some amount of premature commitment by first working out the details of the plan at abstract levels, and then refining it to more concrete levels. Systems such as PRIAR [29] use these hierarchical planners as the substrate for plan reuse.
Reference: [52] <author> M. Veloso. </author> <title> Learning by analogical reasoning in general problem solving. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1992. </year> <month> 87 </month>
Reference-contexts: In particular, both PRODIGY, which makes the linearity assumption, and its extension NOLIMIT which doesn't (and thus allows interleaving of subgoals), both refine a partial plan by adding operators to the end of the current plan <ref> [52] </ref>. 2 Partial-order planners have also been called nonlinear planners. I prefer the former term since the latter gives the misleading impression that partial-order planning is related to the linearity assumption. <p> Example: Figure 2.2 illustrates the behavior of plan-space and state-space planners in solving a simple problem taken from the logistics transportation domain described in <ref> [52] </ref> and adapted for our experiments as shown in Figure 2.3. has to be transported between locations. <p> CHEF therefore differs from other systems which use an underlying domain-independent generative planner for the same purpose. The current approach to CBP is similar to systems which employ a complete and correct domain-independent planner to extend a case <ref> [18, 29, 35, 52] </ref>. In surveying this literature, it is possible to distinguish these approaches on two orthogonal scales as shown in Figure 2.5. <p> SPA, on the other hand, alternates the retraction of the plan constraints with the further addition of new constraints. Derivational analogy is a case-based planning technique which was introduced by Carbonell [7]. This model was thoroughly developed by Veloso in PRODIGY/ANALOGY <ref> [52] </ref>, which employs a case fitting strategy called derivational replay. This strategy allows the planner to readily merge small subplans to solve large problems. In replay, case fitting is also based on the plan's underlying causal structure. However, PRODIGY/ANALOGY does not store plans but traces of plan derivations. <p> The justification for step addition reflects the causal dependencies between plan steps. Only justified choices are replayed in solving the new problem. Thus derivation replay serves the same function as the initial fitting phase of plan reuse. Derivational replay includes all of the following elements <ref> [7, 52, 53] </ref>: a facility within the underlying planner to generate a trace of the derivation of a plan, the indexing and storage of the derivation trace in a library of previous cases, the retrieval of a case in preparation for solving a new problem, and finally, a replay mechanism by <p> There are a number of different CBP systems which differ in the way that they adapt a previous case <ref> [6, 17, 18, 52] </ref>. Other techniques [6, 17, 18] do not employ refinement planning to extend a case. There is therefore a question as to whether the conclusions as to the benefits of plan-space CBP apply to these other frameworks as well. <p> The previous case is used to construct a skeletal plan which contains all of the recommended plan constraints. Only after this plan is formed, does the planner return to from-scratch planning for extra goals not covered by the case. This approach can be contrasted to that of Veloso <ref> [52] </ref> in which replay of a previous derivation is alternated with from-scratch planning for extra goals. An eager replay strategy replays a previous decision as long as there remain choices which are justified in the new context, and returns to from-scratch planning after the full derivation has been visited. <p> The corresponding steps are then retracted from the old plan to produce the skeletal plan. In derivation replay, fitting is accomplished through replaying the previous decisions recorded in the derivation trace <ref> [52] </ref>. Since invalid decisions are skipped over, replay functions like retraction in plan reuse. In the next section the details of this process are reviewed. <p> is an exact match in all of these relevant initial state conditions, it is possible to judge the applicability of a case on the basis of a similarity metric which considers a case to be applicable if a set number of these conditions are consistent with the new initial state <ref> [26, 52] </ref>. Basing retrieval on a partial match increases the probability that a case will be found. However, it also means that the skeletal plan will contain action chains which are not executable in the new situation. <p> Table 3.2 summarizes these correlations between types of goal interaction and the sequencability of a macro. In some domains, for example the logistics transportation domain of Veloso <ref> [52] </ref>, problems may be solved by concatenating subplans for individual goals, but optimal plans may only be found by interleaving these subplans. As an example, consider the problem where two packages have to be transported between the same locations. <p> If a wrong decision is made in this regard, the planner will be forced to backtrack over the plan resulting from replay. Such backtracking could be costly in terms of performance. Indeed, past work on replay that was based in state-space planning systems <ref> [5, 52] </ref> has spent considerable effort towards finding best heuristic strategies to decide how to interleave 3.2. Analysis of Case Extension Strategies 25 Figure 3.4 transportation domain example showing the differences in support provided by state-space and plan-space planning to replay. <p> An empirical evaluation of this hypothesis is contained in the next section. 3.3 Empirical Evaluation An empirical study was conducted to test the hypotheses regarding the relative effectiveness of reuse and replay for plan-space vs state-space planners. To do this two state-space planners, TOPI [2] and NOLIMIT <ref> [52] </ref>, were chosen in addition to the PO planner, SNLP. Reuse and replay were implemented on these planners and their performance was compared. <p> NOLIMIT was chosen as the third planner to be tested. NOLIMIT is a version of PRODIGY which was the basis of the derivational replay system reported in <ref> [52] </ref>. Like PRODIGY and STRIPS, it uses means-ends analysis, first subgoaling to establish a set of potential operators, then forward chaining from the current world state, by applying potential operators to the plan. <p> To facilitate fair comparisons, NOLIMIT was reimplemented on the same substrate as the other two planners. This was done following the algorithm contained in <ref> [52] </ref>. A framework was created for accomplishing reuse and replay within each planning strategy. These are described below. Implementation of Plan Reuse Recall that in reuse, a previous case consists of a plan which is first fitted to adapt to the new problem-solving situation. <p> For example, DerSNLP (Derivational SNLP) extends SNLP by a capability for producing traces of successful plan derivations and replaying previous traces. A sample trace of SNLP's decision process is shown in Figure 3.6. The trace corresponds to a simple problem from the logistics transportation domain of <ref> [52] </ref> which contains the goal of getting a single package, OB1, to a designated airport, l g . The derivation trace contains the choices that were made along the 3.3. <p> To further support this conclusion, experiments were performed in the more realistic logistics transportation domain of <ref> [52] </ref>, adapted for these experiments as shown in Figure 2.3. Problems with nonserializable goals were randomly generated, and the initial conditions of each problem were varied. <p> The cost of retrieval . We obviously need sophisticated techniques that reduce the retrieval cost. Not surprisingly, a significant amount of work on plan reuse and case-based reasoning was devoted to this <ref> [26, 52, 16] </ref>. 2. The cost of fitting . Since most fitting methods take polynomial time in the size of the retrieved case and the new problem, this factor is dominated by the other factors. 3. The length of the skeletal plan l sk . <p> In similar situations, plan-space planners will not need to backtrack in the first place. Multi-Case Adaptation: Some case-based planning systems, such as PRODIGY/ ANALOGY <ref> [52] </ref> use multiple cases in guiding adaptation. Although our initial empirical study into replay involved only replay of a single case for each problem, in Chapter 5 describes how DerSNLP has been extended to perform multi-case replay. <p> The ability to interleave plans will again be advantageous in multi-plan reuse. Multi-Pass Adaptation: Some implemented case-based planning systems, such as RE-MAID [5] and PRODIGY/ANALOGY <ref> [52] </ref> use multi-pass strategies in adaptation. For example, rather than abandon the case after it has been replayed once, such systems keep the case and replay it again if parts of the case that are not previously applicable, become applicable as the skeletal plan is being extended. <p> Multi-pass replay can be thought of as the process of replaying multiple copies of the same case. Each time the case is visited, we replay all the applicable portions. 5 Our eager replay strategy may be easily 5 PRODIGY/ANALOGY <ref> [52] </ref> uses a slightly different strategy in this regard. Specifically, it uses a ``pointer'' to keep track of the part of the case that has already been replayed. Every time a case is visited, the replay is restarted at the position indicated by the pointer. <p> Learning from case failure involves a number of different capabilities. First of all, DerSNLP incorporates a retrieval mechanism which retrieves the case on the basis of a static similarity metric. This metric approximates that employed by Kambhampati in [29] and also by Veloso in <ref> [52] </ref>. Using this metric, a case is judged applicable if (1) a subset of the new problem goals are covered by the case, and (2) the plan success conditions are present in the new initial state. The latter are readily determined from the validation structure of the previous plan. <p> These relevant initial state conditions may also be obtained by regressing the final plan through the sequence of decisions contained in the plan derivation. The relevant initial state conditions, here called the plan's success conditions make up the the footprinted initial state <ref> [52] </ref>. The similarity metric governs case retrieval at the start of problem-solving with a particular case, when there is no earlier experience with its success or failure. Initial conclusions about its applicability to a new problem are based on an assumption. <p> Because these assumptions may be wrong, the case may be retrieved in error. Our replay experiments reported in Chapter 3 provided numerous examples in which a conclusion about case applicability later proved to be wrong. When DerSNLP was solving problems in the logistics domain of <ref> [52] </ref>, the replay of the case failed when the new problem was changed from the old in that some relevant initial state conditions were unsatisfied, or, there were extra input goals not covered by the case. However, neither of these two types of changes were sufficient for replay to fail. <p> The planner must backtrack and choose an alternative route (shown in bold) in order to accommodate the extra goal. example taken from the logistics transportation domain of <ref> [52] </ref> (See Figure 4.2a). The goal is to have package OB1 located at the destination location l d . The package is initially at location l 1 . There is a plane located at l p which can be used to transport the package. <p> This means that any time a case is replayed that previously solved a goal, g i , through an action A fi i , and g ff as an extra goal not covered by the case, then replay will fail. The logistics transportation domain of <ref> [52] </ref> was adopted for the second set of experiments. Eight packages and one airplane were randomly distributed over four cities. Problem goals represented the task of getting one or more packages to a single destination airport. <p> The metric was similar to the validation structure-based similarity metric of [26] and the foot-printed similarity metric of <ref> [52] </ref>. Prior studies show it to be a reasonably effective metric. In learning mode, cases were also retrieved on the same basis. However, in this mode, the failure reasons attached to the case were used to censor its retrieval. <p> It is therefore an advantage to be able to store cases covering smaller subsets of goals, and to retrieve and adapt multiple cases in solving a single large problem. Before implementing DerSNLP's storage strategy, decisions had to be made as to which goal combinations to store. Previous work <ref> [52] </ref> has reduced the size of the library by separating out connected components of a plan, and storing these individually. A partial-order planner may store even smaller subparts since it can piece plans together, and later add step orderings which interleave these plans to resolve conflicts. <p> This problem was solved in the current framework by utilizing a derivation replay strategy and increasing the justification for replaying the step addition decisions. In the derivation trace, each planning decision is annotated with its precondition <ref> [52] </ref>. For example, the justification of a step addition decision is the open condition that the step achieves. <p> The aim was to evaluate the replay system in complex and realistic domains. Two domains were chosen for this purpose, the logistics transportation domain of <ref> [52] </ref> and the domain of process planning [15]. In process planning [15, 9, 45, 3] plans are formulated that are a sequence of machining operations whose end result is a mechanical part. <p> CHAPTER 7 RELATED WORK AND DISCUSSION 7.1 Early CBP Systems The current approach has many elements in common with other CBP systems that are described in the literature. In Chapter 3 we contrasted its CBP methodology with other CBP systems based within different planning strategies <ref> [29, 26, 18, 52] </ref>. Some early case-based planners, including Hammond's CHEF [17], differ from these in that they do not assume an underlying generative planner that accomplishes the extension of the case to the new problem situation as well as recovery when the case fails. <p> Small problem differences may mean that previous guidance leads the planner down a wrong path. This mis-retrieval problem is evident when we compare case-based with generative planning performance on individual problems <ref> [52] </ref>. In some instances, CBP worsens planning performance in comparison to from-scratch planning. CBP is effective overall since these retrieval errors are relatively rare. However, the performance improvements provided by CBP are dependent on mis-retrieval being infrequent. <p> In Chapter 4 the DerSNLP framework was augmented with explanation-based learning (EBL) techniques that allow it to explain and learn from case failure, and thereby improve its case retrieval. This approach builds on earlier treatments of case retrieval <ref> [29, 52, 53] </ref>. In the current work, replay failures are detected and treated as a learning opportunity by which the case-based planner may improve its case retrieval.
Reference: [53] <author> M. Veloso and J. Carbonell. </author> <title> Derivational analogy in prodigy: Automating case acquisition, storage and utilization. </title> <booktitle> In Machine Learning, </booktitle> <pages> pages 249--278, </pages> <year> 1993. </year>
Reference-contexts: The justification for step addition reflects the causal dependencies between plan steps. Only justified choices are replayed in solving the new problem. Thus derivation replay serves the same function as the initial fitting phase of plan reuse. Derivational replay includes all of the following elements <ref> [7, 52, 53] </ref>: a facility within the underlying planner to generate a trace of the derivation of a plan, the indexing and storage of the derivation trace in a library of previous cases, the retrieval of a case in preparation for solving a new problem, and finally, a replay mechanism by <p> In Chapter 4 the DerSNLP framework was augmented with explanation-based learning (EBL) techniques that allow it to explain and learn from case failure, and thereby improve its case retrieval. This approach builds on earlier treatments of case retrieval <ref> [29, 52, 53] </ref>. In the current work, replay failures are detected and treated as a learning opportunity by which the case-based planner may improve its case retrieval.
Reference: [54] <author> D. E. Wilkins. </author> <title> Recovering from execution errors in sipe. </title> <booktitle> Computational Intelligence, </booktitle> <address> 1:33--45, </address> <year> 1985. </year> <month> 88 </month>
Reference-contexts: Unlike state-space planners which maintain contiguous sequences of operators during their search (so that the current world state can be uniquely identified), some plan-space planners can search in the space of partial-order plans (see <ref> [54] </ref> belong to the latter class, called partial-order (PO) planners 2 . With a PO strategy, new 1 Notice that the linearity assumption, which specifies whether the planner manages its list of outstanding goals as a stack or an arbitrary list, has no effect on this. <p> Planners such as SNLP, TOPI, NOLIMIT have to commit to a specific way of achieving the goal in any given search branch. In contrast, hierarchical task reduction planners such as NONLIN [51] and SIPE <ref> [54] </ref> avoid some amount of premature commitment by first working out the details of the plan at abstract levels, and then refining it to more concrete levels. Systems such as PRIAR [29] use these hierarchical planners as the substrate for plan reuse.
References-found: 54

