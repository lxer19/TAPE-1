URL: http://www.cs.kuleuven.ac.be/~herman/PAPERS/iwooos92.ps
Refering-URL: http://www.cs.kuleuven.ac.be/~henk/DPS/publications.html
Root-URL: 
Title: Persistency Support for Mobile Objects in the COMET Heterogeneous Environment based on typed memory, manipulated
Author: Herman Moons, Pierre Verbaeten 
Note: COMET's persistency support is  
Address: Leuven, Belgium  
Affiliation: Dept. of Computer Science Katholieke Universiteit Leuven  
Abstract: Open distributed computing in an internetwork environment has gained considerable attention in the past few years. This paper presents COMET, a Common Object Management EnvironmenT, that investigates basic problems associated with distributed computing in an internet environment with mobile objects. The typed memory approach presents a conceptually simple persistency model to the object programmer. The approach is general enough to be applied to other problem areas, e.g. for the realization of replicated and atomic objects. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> European Computer Manufacturers Association, </author> <title> Support Environment for Open Distributed Processing (SE-ODP), </title> <note> ECMA TR/49 (January, </note> <year> 1990). </year>
Reference: [2] <author> Malcolm Atkinson, Ken Chisholm, and Paul Cockshott, </author> <title> ``PS-algol: an Algol with a Persistent Heap'' ACM Sig-plan Notices, </title> <note> Vol.17 (7) , pp. </note> <month> 24-31 (July, </month> <year> 1982). </year>
Reference-contexts: The literature discusses many other approaches for handling persistent objects. Often existing programming languages are extended, thus allowing an almost seem-less addition of persistency. This is the approach taken in e.g. PS-Algol <ref> [2, 7] </ref>, SOS [29] and GemStone [6]. Other systems like Arjuna [8, 9] and Choices [20] provide persistency support by using the inheritance mechanisms of an object-oriented programming language like C++. COMET's persistency support is similar to the persistent heap of PS-Algol.
Reference: [3] <author> A. Birrell and B. Nelson, </author> <title> ``Implementing Remote Procedure Calls'' ACM Transactions on Computer Systems, </title> <type> Vol.2 (1) , pp. </type> <month> 39-59 (February, </month> <year> 1984). </year>
Reference-contexts: retrieve the value, the canonical representation is shipped to the invoker, where it is again converted to the invoker's local representation. 4.4 Relation with Stub Generation In traditional RPC systems the interface definition, expressed in some type definition language, is used for the automatic generation of client and server stubs <ref> [3] </ref>. These stubs provide a normal procedure call interface to the client, and take care of the details of packing and converting arguments and results.
Reference: [4] <author> A.P. Black and Y. Artsy, </author> <title> ``Implementing Location Independent Invocation'' IEEE Transactions on Parallel and Distributed Systems, </title> <note> Vol.1 (1) , pp. 107-119 (Janu-ary 1990). </note>
Reference-contexts: Eventually, the persistent object needs to be reinstantiated on another node. This reinstantiation is triggered by COMET's invocation mechanism. When invoking an operation on a persistent object, the invocation is directed to the node where the object is believed to exist (using location independent invocation <ref> [4, 21] </ref> ). Because of a node crash or deactivation, the in-memory copy of the object may however no longer be available. When this is the case, the invocation mechanism looks up the identity of the object's persistent storage manager.
Reference: [5] <author> Grady Booch, </author> <title> Object Oriented Design with Applications, </title> <publisher> The Benjamin/Cummings Publishing Company, Inc. </publisher> <year> (1991). </year>
Reference: [6] <author> Robert Bretl, David Maier, Allen Otis, Jason Penney, Bruce Schuchardt, Jacob Stein, E. Harold Williams, and Monty Williams, </author> <title> ``The GemStone Data Management System'' pp. 283-308 in Object-Oriented Concepts, Databases, and Applications, </title> <editor> ed. Won Kim and Freder-ick H. Lochovsky, </editor> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <month> Mas-sachusetts </month> <year> (1989). </year>
Reference-contexts: The literature discusses many other approaches for handling persistent objects. Often existing programming languages are extended, thus allowing an almost seem-less addition of persistency. This is the approach taken in e.g. PS-Algol [2, 7], SOS [29] and GemStone <ref> [6] </ref>. Other systems like Arjuna [8, 9] and Choices [20] provide persistency support by using the inheritance mechanisms of an object-oriented programming language like C++. COMET's persistency support is similar to the persistent heap of PS-Algol. This language also tags persistent data with a type description.
Reference: [7] <author> W.P. Cockshot, M. P. Atkinson, and K.J. Chisholm, </author> <title> ``Persistent Object Management System'' Software Practice and Experience, </title> <note> Vol.14 (1) , pp. 49-71 (January, </note> <year> 1984). </year>
Reference-contexts: The literature discusses many other approaches for handling persistent objects. Often existing programming languages are extended, thus allowing an almost seem-less addition of persistency. This is the approach taken in e.g. PS-Algol <ref> [2, 7] </ref>, SOS [29] and GemStone [6]. Other systems like Arjuna [8, 9] and Choices [20] provide persistency support by using the inheritance mechanisms of an object-oriented programming language like C++. COMET's persistency support is similar to the persistent heap of PS-Algol.
Reference: [8] <author> G.N. Dixon, G.D. Parrington, S.K. Shrivastava, </author> <title> and S.M. </title> <booktitle> Wheater, ``The Treatment of Persistent Objects in Arjuna'' Proceedings of the Third European Conference on Object-Oriented Programming, ECOOP89, </booktitle> <pages> pp. </pages> <month> 169-189 (July, </month> <year> 1989). </year>
Reference-contexts: The literature discusses many other approaches for handling persistent objects. Often existing programming languages are extended, thus allowing an almost seem-less addition of persistency. This is the approach taken in e.g. PS-Algol [2, 7], SOS [29] and GemStone [6]. Other systems like Arjuna <ref> [8, 9] </ref> and Choices [20] provide persistency support by using the inheritance mechanisms of an object-oriented programming language like C++. COMET's persistency support is similar to the persistent heap of PS-Algol. This language also tags persistent data with a type description.
Reference: [9] <author> G.D.Parrington, </author> <title> ``Reliable Distributed Programming in C++: </title> <booktitle> The Arjuna Approach'' Second Usenix C++ Conference, </booktitle> <pages> pp. </pages> <month> 37-50 (April, </month> <year> 1990). </year>
Reference-contexts: The literature discusses many other approaches for handling persistent objects. Often existing programming languages are extended, thus allowing an almost seem-less addition of persistency. This is the approach taken in e.g. PS-Algol [2, 7], SOS [29] and GemStone [6]. Other systems like Arjuna <ref> [8, 9] </ref> and Choices [20] provide persistency support by using the inheritance mechanisms of an object-oriented programming language like C++. COMET's persistency support is similar to the persistent heap of PS-Algol. This language also tags persistent data with a type description.
Reference: [10] <author> K. Geihs and U. </author> <title> Hollberg, </title> <journal> ``Retrospective on DACNOS'' Communications of the ACM, </journal> <note> Vol.33 (4) , pp. </note> <month> 439-448 (April </month> <year> 1990). </year>
Reference: [11] <author> Phillip B. Gibbons, </author> <title> ``A Stub Generator for Multilanguage RPC in Heterogeneous Environments'' IEEE Transactions on Software Engineering, </title> <note> Vol.SE-13 (1) , pp. 77-87 (January, </note> <year> 1987). </year>
Reference: [12] <author> Adele Goldberg and David Robson, </author> <title> Smalltalk-80: the language and its implementation, </title> <publisher> Addison-Wesley Publ.Co., Inc. </publisher> , <address> Reading, MA (1983). </address>
Reference: [13] <author> Ulf Hollberg, Herbert Eberle, Kurt Geihs, Reinhard Heite, and Herman Schmutz, </author> <title> An Object Oriented View of Distribution, </title> <type> Technical Report No. </type> <institution> 43.9004, IBM Euro-pean Networking Center, </institution> <address> Heidelberg, Germany (1990). </address>
Reference: [14] <author> C. Horn and A. Donnelly, </author> <title> Architectural Aspects of the Comandos Platform, </title> <type> Research Report, </type> <institution> Distributed Systems Group, Dept. of Computer Science, Trinity College Dublin (February, </institution> <year> 1989). </year>
Reference: [15] <author> S. Krakowiak, M. Meysembourg, H. Nguyen Van, M. Riveill, C. Roisin, and X. Rousset de Pina, </author> <title> ``Design and Implementation of an Object-Oriented, Strongly Typed Language for Distributed Applications'' Journal on Object-Oriented Programming, </title> <note> Vol.3 (3) , pp. 11-22 (September/October 1990). </note>
Reference: [16] <author> G. Krueger and G. Mueller, HECTOR: </author> <title> Heterogeneous Computers Together, Vol.II, Basic Projects, </title> <publisher> Springer-Verlag (1988). </publisher>
Reference: [17] <author> B. Liskov and R. Scheifler, </author> <title> ``Guardians and Actions: Linguistic Support for Robust, </title> <booktitle> Distributed Programs'' ACM Transactions on Programming Languages and Systems, </booktitle> <pages> Vol.5 (3) , pp. </pages> <month> 381-404 (July, </month> <year> 1983). </year>
Reference-contexts: A crash of the object halfway through a method execution will therefore cause no ill effects. The object will simply reinstantiate with its old (consistent) persistent state. Although persistent actions can guarantee per-object consistency in the presence of node crashes, they are not atomic actions (as e.g. in Argus <ref> [17] </ref> or Arjuna [30] ). Their all or nothing effect is purely local to the object itself.
Reference: [18] <author> B. Liskov and J. Guttag, </author> <title> Abstraction and Specification in Program Development, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts (1986). </address>
Reference: [19] <author> B. Liskov, </author> <title> ``Data Abstraction and Hierarchy'' pp. </title> <booktitle> 17-34 in OOPSLA '87 Addendum to the Proceedings, </booktitle> <address> Orlando, Florida (October 4-8, </address> <year> 1987). </year>
Reference: [20] <author> Peter W. Madany and Roy H. Campbell, </author> <title> Organizing and Typing Persistent Objects within an Object-Oriented Framework, </title> <type> Technical Report, </type> <institution> University of Illinois at Urbana-Champaign, Dept. of Computer Science. </institution>
Reference-contexts: The literature discusses many other approaches for handling persistent objects. Often existing programming languages are extended, thus allowing an almost seem-less addition of persistency. This is the approach taken in e.g. PS-Algol [2, 7], SOS [29] and GemStone [6]. Other systems like Arjuna [8, 9] and Choices <ref> [20] </ref> provide persistency support by using the inheritance mechanisms of an object-oriented programming language like C++. COMET's persistency support is similar to the persistent heap of PS-Algol. This language also tags persistent data with a type description.
Reference: [21] <author> Herman Moons, </author> <title> Object Invocation in Open Distributed Systems: the Comet Approach, </title> <note> Technical Report (in preparation), </note> <institution> Dept. of Computer Science, Katholieke Universiteit Leuven. </institution>
Reference-contexts: Eventually, the persistent object needs to be reinstantiated on another node. This reinstantiation is triggered by COMET's invocation mechanism. When invoking an operation on a persistent object, the invocation is directed to the node where the object is believed to exist (using location independent invocation <ref> [4, 21] </ref> ). Because of a node crash or deactivation, the in-memory copy of the object may however no longer be available. When this is the case, the invocation mechanism looks up the identity of the object's persistent storage manager.
Reference: [22] <author> Herman Moons and Pierre Verbaeten, </author> <title> ``A Portability Platform for Distributed Application Programming'' ISMM International Symposium on Mini- and Microcomputers and their applicatio ns (June 19-21, </title> <year> 1990). </year>
Reference: [23] <author> Herman Moons, Pierre Verbaeten, and Ulf Hollberg, </author> <booktitle> ``Distributed Computing in Heterogeneous Environments'' EUUG Spring '90 Conference, </booktitle> <pages> pp. 15-26 (April 23-27, </pages> <year> 1990). </year>
Reference: [24] <author> Herman Moons and Pierre Verbaeten, </author> <booktitle> ``Location-Independent Object Invocation in Open Distributed Systems'' Autumn 1991 EurOpen Technical Conference and Exhibition, </booktitle> <pages> pp. 287-300 (September 16-20, </pages> <year> 1991). </year>
Reference: [25] <author> Herman Moons and Pierre Verbaeten, </author> <title> Naming and Locating Mobile Objects in Open Distributed Systems, </title> <type> Report CW 151, </type> <institution> Dept. of Computer Science, Katholieke Universiteit Leuven (March, </institution> <year> 1992). </year>
Reference: [26] <author> Herman Moons, </author> <title> The Comet Type and Object Model, </title> <type> Report CW 150, </type> <institution> Dept. of Computer Science, Katholieke Universiteit Leuven (June, </institution> <year> 1992). </year>
Reference: [27] <author> Harry H. Porter, </author> <title> ``Separating the subtype hierarchy from the inheritance of implementation'' Journal of Object-Oriented Programming, </title> <note> Vol.4 (9) , pp. 20-29 (Febru-ary, </note> <year> 1992). </year>
Reference: [28] <author> G. van Rossum, </author> <title> ``AIL A Class-Oriented Stub Generator for Amoeba'' Proceedings of the Workshop on Experience with Distributed Systems, </title> <publisher> Springer Verlag (1989). </publisher>
Reference: [29] <author> M. Shapiro, P. Gautron, and L. Mosseri, </author> <title> ``Persistence and Migration for C++ Objects'' ECOOP'89 (July 1989). </title>
Reference-contexts: The literature discusses many other approaches for handling persistent objects. Often existing programming languages are extended, thus allowing an almost seem-less addition of persistency. This is the approach taken in e.g. PS-Algol [2, 7], SOS <ref> [29] </ref> and GemStone [6]. Other systems like Arjuna [8, 9] and Choices [20] provide persistency support by using the inheritance mechanisms of an object-oriented programming language like C++. COMET's persistency support is similar to the persistent heap of PS-Algol. This language also tags persistent data with a type description.
Reference: [30] <author> S.K. Shrivastava, G.N. Dixon, and G.D. Parrington, </author> <title> ``An Overview of the Arjuna Distributed Programming System'' IEEE Software (January, </title> <year> 1991). </year>
Reference-contexts: The object will simply reinstantiate with its old (consistent) persistent state. Although persistent actions can guarantee per-object consistency in the presence of node crashes, they are not atomic actions (as e.g. in Argus [17] or Arjuna <ref> [30] </ref> ). Their all or nothing effect is purely local to the object itself.
Reference: [31] <author> International Organization for Standardization, </author> <title> Information Processing Systems Open Systems Interconnection Specification of Abstract Systax Notation One (ASN.1), </title> <note> ISO/OSI 8824 (1987). </note>
Reference: [32] <author> Bjarne Stroustrup, </author> <title> ``What is Object-Oriented Programming ?'' pp. </title> <booktitle> 57-76 in ECOOP '87: European Conference on Object-Oriented Programming, </booktitle> <address> Paris, France (June 15-17 1987). </address>
References-found: 32

