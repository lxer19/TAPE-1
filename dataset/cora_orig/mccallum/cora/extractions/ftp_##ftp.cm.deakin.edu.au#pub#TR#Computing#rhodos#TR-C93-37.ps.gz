URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/rhodos/TR-C93-37.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: (ddp@deakin.edu.au)  
Title: The Multiple Strategy Process Migration Manager for RHODOS: The Logical Design  
Author: Damien De Paoli 
Keyword: Distributed Systems, Distributed Operating Systems, Process Migration.  
Date: September 8, 1994  
Address: Geelong, Victoria 3217  
Affiliation: School of Computing and Mathematics Deakin University  
Abstract: This report details the research into different issues and design strategies that affect process migration. Instead of deciding that a particular strategy is best for the RHODOS system, a multiple strategy process migration manager is proposed. The research into the logical design of such a manager shows that each of the strategies can be used without any need to recompile. Hence this work will enable the comparison of each strategy to determine which strategy to use to achieve the best performance for process migration in RHODOS. Performance, however, is not the only important issue within the field of process migration. Reliability and Security are also of prime importance. This logical design also looks at these issues and finds solutions to enable the RHODOS process migration manager to be reliable and secure. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Artsy and R. Finkel. </author> <title> Designing a Process Migration Facility the Charlotte Experience. </title> <booktitle> IEEE Computer, </booktitle> <month> September </month> <year> 1989. </year>
Reference-contexts: Obviously process migration has its advantages. However previous implementations have shown that it has been more difficult to implement than was expected [11]. One of the important issues discovered from previous implementations <ref> [1, 3, 4, 9, 11, 12] </ref> is that process migration can consume a lot of local, network and remote resources, especially time. Generally, address space migration is the most time consuming due to the low speed of a network. <p> performs the following steps: Creates a new process environment; Receives the process state; Requests the IPC Manager to handle incoming communications for the migrat ing process; and Reconstitutes the state and resume the process execution. 2.2 Design Requirements Several process migration systems have been created, and all use differing designs <ref> [1, 3, 4, 8, 9, 10, 11, 12, 14] </ref>. <p> Direct copying of the context of a process from the source to the destination computer is inevitable without paging or swapping. Paging requires a virtual memory system and swapping requires a shared disk. Direct Copy was used by Charlotte <ref> [1] </ref>, Demos/MP [9], Locus [10] and the V system [11]. <p> At the point where the image of the process has been transferred to the destination, communication reception is frozen, and all incoming messages are rejected (Figure 6). Those messages that were queued on the process port are then transferred to the destination. This system is used by Charlotte <ref> [1] </ref>. Resume Execution Process and Communication Suspension Resume Execution Process Suspension Forward Messages 12 3.6.1.3 Never With never communication suspension, as its name implies, the communication reception is never suspended. In fact, as each message comes in, it is forwarded to the destination (Figure 7). <p> Thus, when a process wishes to communicate with a migrated process, it always has the correct address. This system is used by Charlotte <ref> [1] </ref>.
Reference: [2] <author> D. De Paoli and A. Goscinski. </author> <title> The Development and Testing of the Ring Based Conference Authentication Service. </title> <type> Technical Report TR C93/06, </type> <institution> Deakin University, Australia, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: The RHODOS system will attempt to get around this problem by forcing the global schedulers to invoke a conference authentication operation provided by RHODOS <ref> [2] </ref>. To perform a conference authentication each time a migration operation is requested would be expensive. <p> This is especially true with process migration, as sharing computational resources opens up the way for worms and viruses to be easily spread. This report details how the RHODOS system can utilise the already existing security system built for RHODOS <ref> [2] </ref> to ensure only legitimate processes are migrated. Acknowledgements I would like to thank my supervisor Andrzej Goscinski yet again for his help with this report, without his unending patience to answer my questions, this report would be of much lower quality.
Reference: [3] <author> F. Douglis and J. Ousterhout. </author> <title> Process Migration in the Sprite Operating System. </title> <booktitle> Proceedings of the 7 th International conference on Distributed Computing Systems, </booktitle> <month> September </month> <year> 1987. </year>
Reference-contexts: Obviously process migration has its advantages. However previous implementations have shown that it has been more difficult to implement than was expected [11]. One of the important issues discovered from previous implementations <ref> [1, 3, 4, 9, 11, 12] </ref> is that process migration can consume a lot of local, network and remote resources, especially time. Generally, address space migration is the most time consuming due to the low speed of a network. <p> performs the following steps: Creates a new process environment; Receives the process state; Requests the IPC Manager to handle incoming communications for the migrat ing process; and Reconstitutes the state and resume the process execution. 2.2 Design Requirements Several process migration systems have been created, and all use differing designs <ref> [1, 3, 4, 8, 9, 10, 11, 12, 14] </ref>. <p> Of course the time taken to translate a process across a network should be substantially decreased when a high speed network is used. Demos/MP [9], Sprite <ref> [3, 4] </ref> and Locus [10] use the Once a destination is selected approach and as mentioned earlier, the V system [11] uses the Pre-copying method. <p> Thus, transferring only the dirty pages that are needed to the destination, albeit with an extra step of having to be copied to the disk. The Sprite system <ref> [3, 4] </ref> uses this method. Address Space SOURCE Address Space DESTINATION Address Space SOURCE Address Space DESTINATION Shared Disk 10 3.5.4 Lazy Shipment This method is based on the copy on reference method. <p> This method of course requires that the origin is informed each time the process is migrated. The Origin method is used by both Sprite <ref> [3, 4] </ref> and Locus [10]. 3.6.2.3 Enhanced Origin Method The enhance origin method [13] is a simple extension of the origin method, which takes into account that the origin host may be incommunicado, and hence the method falls apart.
Reference: [4] <author> F. Douglis and J. Ousterhout. </author> <title> Transparent Process Migration: Design Alternatives and Sprite Implementation. </title> <journal> Software and Experience, </journal> <year> 1991. </year>
Reference-contexts: Obviously process migration has its advantages. However previous implementations have shown that it has been more difficult to implement than was expected [11]. One of the important issues discovered from previous implementations <ref> [1, 3, 4, 9, 11, 12] </ref> is that process migration can consume a lot of local, network and remote resources, especially time. Generally, address space migration is the most time consuming due to the low speed of a network. <p> performs the following steps: Creates a new process environment; Receives the process state; Requests the IPC Manager to handle incoming communications for the migrat ing process; and Reconstitutes the state and resume the process execution. 2.2 Design Requirements Several process migration systems have been created, and all use differing designs <ref> [1, 3, 4, 8, 9, 10, 11, 12, 14] </ref>. <p> Of course the time taken to translate a process across a network should be substantially decreased when a high speed network is used. Demos/MP [9], Sprite <ref> [3, 4] </ref> and Locus [10] use the Once a destination is selected approach and as mentioned earlier, the V system [11] uses the Pre-copying method. <p> Thus, transferring only the dirty pages that are needed to the destination, albeit with an extra step of having to be copied to the disk. The Sprite system <ref> [3, 4] </ref> uses this method. Address Space SOURCE Address Space DESTINATION Address Space SOURCE Address Space DESTINATION Shared Disk 10 3.5.4 Lazy Shipment This method is based on the copy on reference method. <p> This method of course requires that the origin is informed each time the process is migrated. The Origin method is used by both Sprite <ref> [3, 4] </ref> and Locus [10]. 3.6.2.3 Enhanced Origin Method The enhance origin method [13] is a simple extension of the origin method, which takes into account that the origin host may be incommunicado, and hence the method falls apart.
Reference: [5] <author> G. W. Gerrity, A. Goscinski, J. Indulska, W. Toomey and W. Zhu. </author> <title> Can We Study Design Issues of Distributed Operating Systems in a Generalized Way? SEDMS II Symposium on Experiences with Distributed and Multiprocessor Systems, </title> <month> March </month> <year> 1991. </year>
Reference-contexts: The SName is simply a unique way to identify any object within the RHO-DOS distributed operating system. A process has a control structure (Process Control Block) that is referenced by its SName <ref> [5] </ref>. The Process Control Block (PCB) stores the details needed by the micro-kernel to execute the process. Thus, the PCB structure stores details about resources utilised, open files and general statistics (i.e. unique id, priority, etc.).
Reference: [6] <author> A. Goscinski. </author> <title> Distributed Operating Systems. The Logical Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference: [7] <author> A. Goscinski, M. Hobbs and G. Whickham. </author> <title> Interprocess Communication in RHODOS. </title> <type> Technical Report, </type> <institution> Deakin University, Australia, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: To avoid this type of inconsistency problem, the whole migration operation must be considered a transaction. Thus, once the migration operation has started, it needs a commit (or rollback) message to officially free up resources and allow only one version of the process to continue executing. In RHODOS <ref> [7] </ref>, the IPC primitives allow the user to specify a quality of service. One of the options is to specify EXACTLY_ONCE, which results in the reply to a message being acknowledged by both sides.
Reference: [8] <author> E. Jul, H. Levy, N. Hutchinson and A. Black. </author> <title> Fine-grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year> <month> 23 </month>
Reference-contexts: performs the following steps: Creates a new process environment; Receives the process state; Requests the IPC Manager to handle incoming communications for the migrat ing process; and Reconstitutes the state and resume the process execution. 2.2 Design Requirements Several process migration systems have been created, and all use differing designs <ref> [1, 3, 4, 8, 9, 10, 11, 12, 14] </ref>.
Reference: [9] <author> Powell and Miller. </author> <title> Process Migration in DEMOS/MP. </title> <booktitle> ACM Operating System Review, </booktitle> <month> October </month> <year> 1983. </year>
Reference-contexts: Obviously process migration has its advantages. However previous implementations have shown that it has been more difficult to implement than was expected [11]. One of the important issues discovered from previous implementations <ref> [1, 3, 4, 9, 11, 12] </ref> is that process migration can consume a lot of local, network and remote resources, especially time. Generally, address space migration is the most time consuming due to the low speed of a network. <p> performs the following steps: Creates a new process environment; Receives the process state; Requests the IPC Manager to handle incoming communications for the migrat ing process; and Reconstitutes the state and resume the process execution. 2.2 Design Requirements Several process migration systems have been created, and all use differing designs <ref> [1, 3, 4, 8, 9, 10, 11, 12, 14] </ref>. <p> Of course the time taken to translate a process across a network should be substantially decreased when a high speed network is used. Demos/MP <ref> [9] </ref>, Sprite [3, 4] and Locus [10] use the Once a destination is selected approach and as mentioned earlier, the V system [11] uses the Pre-copying method. <p> Direct copying of the context of a process from the source to the destination computer is inevitable without paging or swapping. Paging requires a virtual memory system and swapping requires a shared disk. Direct Copy was used by Charlotte [1], Demos/MP <ref> [9] </ref>, Locus [10] and the V system [11]. <p> In fact, as each message comes in, it is forwarded to the destination (Figure 7). Unfortunately, this leaves a residual dependency on each and every computer that has at one time been the host of the migrated process. Demos/MP <ref> [9] </ref> uses never suspension. 3.6.1.4 RHODOS Suspension of Message Reception Overall, each of these methods has its advantages: Synchronous suspension has simplicity and no residual dependencies; Asynchronous suspension has no residual dependencies and a small freeze time; Never suspension has no freeze time at all.
Reference: [10] <author> J. Smith. </author> <title> A Survey of Process Migration Mechanisms. </title> <journal> ACM Operating Systems Review, </journal> <volume> 22(3) </volume> <pages> 28-40, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: performs the following steps: Creates a new process environment; Receives the process state; Requests the IPC Manager to handle incoming communications for the migrat ing process; and Reconstitutes the state and resume the process execution. 2.2 Design Requirements Several process migration systems have been created, and all use differing designs <ref> [1, 3, 4, 8, 9, 10, 11, 12, 14] </ref>. <p> Of course the time taken to translate a process across a network should be substantially decreased when a high speed network is used. Demos/MP [9], Sprite [3, 4] and Locus <ref> [10] </ref> use the Once a destination is selected approach and as mentioned earlier, the V system [11] uses the Pre-copying method. <p> Direct copying of the context of a process from the source to the destination computer is inevitable without paging or swapping. Paging requires a virtual memory system and swapping requires a shared disk. Direct Copy was used by Charlotte [1], Demos/MP [9], Locus <ref> [10] </ref> and the V system [11]. <p> This method of course requires that the origin is informed each time the process is migrated. The Origin method is used by both Sprite [3, 4] and Locus <ref> [10] </ref>. 3.6.2.3 Enhanced Origin Method The enhance origin method [13] is a simple extension of the origin method, which takes into account that the origin host may be incommunicado, and hence the method falls apart.
Reference: [11] <author> M. Theimer, K. Lantz, and D. Cheriton. </author> <title> Preemptable Remote Execution Facilities for the V-System. </title> <booktitle> Proceedings of 10 th ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1985. </year>
Reference-contexts: Thus using process migration to recover processes from host crashes, increases the reliability of a distributed operating system. Obviously process migration has its advantages. However previous implementations have shown that it has been more difficult to implement than was expected <ref> [11] </ref>. One of the important issues discovered from previous implementations [1, 3, 4, 9, 11, 12] is that process migration can consume a lot of local, network and remote resources, especially time. Generally, address space migration is the most time consuming due to the low speed of a network. <p> Obviously process migration has its advantages. However previous implementations have shown that it has been more difficult to implement than was expected [11]. One of the important issues discovered from previous implementations <ref> [1, 3, 4, 9, 11, 12] </ref> is that process migration can consume a lot of local, network and remote resources, especially time. Generally, address space migration is the most time consuming due to the low speed of a network. <p> performs the following steps: Creates a new process environment; Receives the process state; Requests the IPC Manager to handle incoming communications for the migrat ing process; and Reconstitutes the state and resume the process execution. 2.2 Design Requirements Several process migration systems have been created, and all use differing designs <ref> [1, 3, 4, 8, 9, 10, 11, 12, 14] </ref>. <p> The last three points must be considered carefully and especially the physical moving of a process, which has been found to take the most time <ref> [11] </ref> and rearranging communication which can possibly leave residual dependencies. 2.2.10 Security Security is an important issue. Consider that a destination does not know what a process will do when it has been migrated in. In fact such a process could really be a trojan horse or a virus. <p> Once a destination is selected - In this approach, once the process has been chosen (by the global scheduling manager) the process is frozen and can then be migrated. Pre-copying - This approach does not freeze the process whilst it is being transferred. As noted in <ref> [11] </ref>, transferring the address space of a process dominates process migration time. Thus, in the V system as the process address space is being transferred, the process continues to run [11]. <p> Pre-copying - This approach does not freeze the process whilst it is being transferred. As noted in <ref> [11] </ref>, transferring the address space of a process dominates process migration time. Thus, in the V system as the process address space is being transferred, the process continues to run [11]. At a certain point (when the number of dirty pages created by the process continuing to run is significant compared to the total dirty pages) the process is then frozen and the remainder of the process address space is transferred. <p> Of course the time taken to translate a process across a network should be substantially decreased when a high speed network is used. Demos/MP [9], Sprite [3, 4] and Locus [10] use the Once a destination is selected approach and as mentioned earlier, the V system <ref> [11] </ref> uses the Pre-copying method. <p> Direct copying of the context of a process from the source to the destination computer is inevitable without paging or swapping. Paging requires a virtual memory system and swapping requires a shared disk. Direct Copy was used by Charlotte [1], Demos/MP [9], Locus [10] and the V system <ref> [11] </ref>. If a shared disk and virtual memory management are available, then the Address Space SOURCE Address Space DESTINATION 9 following three methods can be used to speed the address space migration up: copy dirty pages to destination, copy dirty pages to a shared disk or lazy shipment. <p> Then the message can be retransmitted to the correct host. The hint fault method is used by the V system <ref> [11] </ref>. 3.6.2.2 Origin Method The origin is the host that the process was created on. When a message is sent to a migrated process (via a hint as above), and the IPC send operation fails, a fault is generated.
Reference: [12] <author> E. Zayas. </author> <title> Attacking the Process Migration Bottleneck. </title> <booktitle> Proceedings of the 11 th ACM Symposium on Operating Systems Principles, </booktitle> <month> November </month> <year> 1987. </year>
Reference-contexts: Obviously process migration has its advantages. However previous implementations have shown that it has been more difficult to implement than was expected [11]. One of the important issues discovered from previous implementations <ref> [1, 3, 4, 9, 11, 12] </ref> is that process migration can consume a lot of local, network and remote resources, especially time. Generally, address space migration is the most time consuming due to the low speed of a network. <p> performs the following steps: Creates a new process environment; Receives the process state; Requests the IPC Manager to handle incoming communications for the migrat ing process; and Reconstitutes the state and resume the process execution. 2.2 Design Requirements Several process migration systems have been created, and all use differing designs <ref> [1, 3, 4, 8, 9, 10, 11, 12, 14] </ref>. <p> This method only copies across the required pages, and due to this can be seen to efficiently use the network. However, it leaves a large (executional) residual dependency on the source computer, and causes the destination computer to wait for pages to be retrieved. The Accent system <ref> [12] </ref> uses lazy shipment 3.5.5 RHODOS Address Space Migration All four of these methods seem to have their merits under certain conditions. Firstly, the migration manager should attempt to ascertain under which conditions each of these methods should be utilised.
Reference: [13] <author> W. Zhu. </author> <title> The development of an Environment to Study Load Balancing Algorithms, Process Migration and Load Data Collection. </title> <type> PhD Thesis, </type> <address> UNSW, Australia, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: Within RHODOS, the migration manager is located at a kernel server level. This means that it works in close association with the Process, Memory and Interprocess Communication Managers to enhance performance. This report follows on from the work performed in <ref> [13, 14, 15] </ref>, and takes the issues raised there along with issues raised in more recent research and presents research into a logical design that uses as many possible variations of process migration. <p> This method of course requires that the origin is informed each time the process is migrated. The Origin method is used by both Sprite [3, 4] and Locus [10]. 3.6.2.3 Enhanced Origin Method The enhance origin method <ref> [13] </ref> is a simple extension of the origin method, which takes into account that the origin host may be incommunicado, and hence the method falls apart. The simple extension caters for this problem, by broadcasting to find the migrated processes current host.
Reference: [14] <author> W. Zhu, A. Goscinski and G.W. Gerrity. </author> <title> Process Migration in RHODOS. </title> <type> Technical Report CS90/9, </type> <address> UNSW, Australia, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: Within RHODOS, the migration manager is located at a kernel server level. This means that it works in close association with the Process, Memory and Interprocess Communication Managers to enhance performance. This report follows on from the work performed in <ref> [13, 14, 15] </ref>, and takes the issues raised there along with issues raised in more recent research and presents research into a logical design that uses as many possible variations of process migration. <p> performs the following steps: Creates a new process environment; Receives the process state; Requests the IPC Manager to handle incoming communications for the migrat ing process; and Reconstitutes the state and resume the process execution. 2.2 Design Requirements Several process migration systems have been created, and all use differing designs <ref> [1, 3, 4, 8, 9, 10, 11, 12, 14] </ref>.
Reference: [15] <author> W. Zhu and A. Goscinski. </author> <title> Load Balancing in RHODOS. </title> <type> Technical Report CS90/ 8, </type> <address> UNSW, Australia, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: Within RHODOS, the migration manager is located at a kernel server level. This means that it works in close association with the Process, Memory and Interprocess Communication Managers to enhance performance. This report follows on from the work performed in <ref> [13, 14, 15] </ref>, and takes the issues raised there along with issues raised in more recent research and presents research into a logical design that uses as many possible variations of process migration.
References-found: 15

