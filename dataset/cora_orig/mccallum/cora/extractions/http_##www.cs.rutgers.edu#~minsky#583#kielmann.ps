URL: http://www.cs.rutgers.edu/~minsky/583/kielmann.ps
Refering-URL: http://www.cs.rutgers.edu/~minsky/583/coord.html
Root-URL: http://www.cs.rutgers.edu
Email: kielmann@informatik.uni-siegen.de  
Title: Designing a Coordination Model for Open Systems  
Author: Thilo Kielmann 
Address: Holderlinstr. 3, D-57068 Siegen, Germany  
Affiliation: Dept. of Electrical Engineering and Computer Science, University of Siegen  
Abstract: Coordination models for closed concurrent systems like Linda and Gamma have been well established during the last few years. Closed systems typically are planned ahead and consist only of active components the behaviour of which is known in advance. In contrast, open systems are inherently heterogeneous and dynamically change their configuration over time. Models for coordinating software agents in open systems must therefore be able to cope with constantly changing configurations and new, unknown kinds of agents. In this paper, we identify the requirements of open systems with respect to coordination models and develop a coordination model suitable for these purposes.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Richard M. Adler. </author> <title> Distributed Coordination Models for Client/Server Computing. </title> <journal> IEEE Computer, </journal> <volume> 28(4) </volume> <pages> 14-22, </pages> <year> 1995. </year>
Reference: 2. <author> Gul Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <editor> M. I. T. </editor> <publisher> Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1986. </year>
Reference: 3. <editor> Gul Agha, Peter Wegner, and Akinori Yonezawa, editors. </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1993. </year>
Reference: 4. <author> J. M. Andreoli, P. Ciancarini, and R. Pareschi. </author> <title> Interaction Abstract Machines. </title> <editor> In Agha et al. </editor> <volume> [3], </volume> <pages> pages 257-280. </pages>
Reference: 5. <author> Kim B. Bruce, Angela Schuett, and Robert van Gent. PolyTOIL: </author> <title> A Type-Safe Polymorphic Object-Oriented Language. </title> <booktitle> In Olthoff [26], </booktitle> <pages> pages 27-51. </pages>
Reference-contexts: OIL allows subtyping such that an object of type S which is a subtype of T can be used whenever an object of T is expected. More precisely, OIL types are not related in a subtype relation but follow the matching relation <ref> [5] </ref> which slightly weakens the strong subtyp-ing notion in order to allow operations which take parameters of the-same type (e.g. the famous is equal function [9]). In order to avoid confusion with object matching in object spaces, we still call them "subtypes".
Reference: 6. <author> Paul Butcher, Alan Wood, and Martin Atkins. </author> <title> Global Synchronisation in Linda. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 6(6) </volume> <pages> 505-516, </pages> <year> 1994. </year>
Reference-contexts: Because these proposals can not selectively extract multiple objects, they are hardly applicable to larger systems in which snapshot sizes might soon become prohibitive apart from the fact that taking a snapshot of an open-implemented tuple space is close to impossible. Another approach is presented in <ref> [6] </ref> and introduces a collect operation which atomically returns all tuples matching a given template in a certain tuple space.
Reference: 7. <author> Christian J. Callsen and Gul Agha. </author> <title> Open Heterogeneous Computing in Ac-torSpace. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 21 </volume> <pages> 289-300, </pages> <year> 1994. </year>
Reference: 8. <author> Nicholas Carriero, David Gelernter, and Lenore Zuck. </author> <title> Bauhaus Linda. </title> <editor> In P. Ciancarini, O. Nierstrasz, and A. Yonezawa, editors, </editor> <booktitle> Object-Based Models and Languages for Concurrent Systems, number 924 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference: 9. <author> Giuseppe Castagna. </author> <title> Covariance and Contravariance: Conflict without a Cause. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 17(3) </volume> <pages> 431-447, </pages> <year> 1995. </year>
Reference-contexts: More precisely, OIL types are not related in a subtype relation but follow the matching relation [5] which slightly weakens the strong subtyp-ing notion in order to allow operations which take parameters of the-same type (e.g. the famous is equal function <ref> [9] </ref>). In order to avoid confusion with object matching in object spaces, we still call them "subtypes". OIL allows single as well as multiple subtyping and parameterized types. It is subject to the actual language binding to map these mechanisms to available language constructs.
Reference: 10. <author> Paolo Ciancarini. </author> <title> Coordination Languages for Open System Design. </title> <booktitle> In Proc. of IEEE Intern. Conference on Computer Languages, </booktitle> <address> New Orleans, </address> <year> 1990. </year>
Reference-contexts: O Fig. 2. Hierarchical abstractions for configurations 6 Example: The Restaurant of Dining Philosophers We will now illustrate Objective Linda's capabilities for expressing coordination problems in open systems. Therefore, we present a solution to the problem of The Restaurant of Dining Philosophers taken from <ref> [10] </ref>. This is an extension of Dijkstra's classical problem to open systems. In the restaurant, there is the table with n seats around. Between each two seats, there is exactly one chopstick on the table.
Reference: 11. <author> G. A. Geist, A. L. Beguelin, J. J. Dongarra, W. Jiang, R. J. Manchek, and V. S. Sunderam. </author> <title> PVM: Parallel Virtual Machine A Users Guide and Tutorial for Network Parallel Computing. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: We are currently experimenting with a prototypical class library implementing Objective Linda for clusters of workstations which is based on the PVM <ref> [11] </ref> package. First results are encouraging, so we are working on the evaluation of Objective Linda's concepts in a wider range of applications. Acknowledgements I am really grateful to Paolo Ciancarini, Bernd Freisleben, and Guido Wirtz for many encouragements and helpful discussions.
Reference: 12. <author> David Gelernter. </author> <title> Generative Communication in Linda. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(1) </volume> <pages> 80-112, </pages> <year> 1985. </year>
Reference: 13. <author> David Gelernter. </author> <title> Multiple Tuple Spaces in Linda. </title> <editor> In E. Odijk, M. Rem, and J.-C. Syre, editors, PARLE'89, </editor> <booktitle> Parallel Architectures and Languages Europe, number 366 in Lecture Notes in Computer Science, </booktitle> <pages> pages 20-27, </pages> <address> Eindhoven, The Nether-lands, 1989. </address> <publisher> Springer. </publisher>
Reference-contexts: Here, object spaces are simply first-class objects. They must hence be known by producers and consumers. This approach comes close to message passing and immediately leads to problems with dangling references if applied to open systems. As an alternative to object-space references, the work in <ref> [13] </ref> uses a global naming scheme for tuple spaces (e.g. "/root/sub1/sub2 ") resembling Unix directory structures. This approach avoids dangling references but introduces problems with the global naming scheme in case of open systems in which name conflicts soon may arise. <p> Instead, every active object knows tuple spaces by names which omit the hierarchy information (like my space and your space) and especially a relative name context denoting the next "outer" tuple space. This helps avoiding problems of <ref> [13] </ref> with the static global space hierarchy. <p> Instead, an operation atomically retrieving several objects is necessary in order to cleanly introduce this functionality into the generative communication model. Approaches to support reading of multiple objects have been reported in the literature. One approach, used in <ref> [13] </ref> and [18], treats tuple spaces as first-class entities and allows to produce snapshots of tuple spaces which can separately be investigated.
Reference: 14. <author> David Gelernter and Nicholas Carriero. </author> <title> Coordination Languages and their Signif--icance. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 96-107, </pages> <year> 1992. </year>
Reference: 15. <author> ISO/IEC JTC1/SC21/WG7. </author> <title> Reference Model of Open Distributed Processing. </title> <note> Draft International Standard ISO/IEC 10746-1 to 10746-4, Draft ITU-T Recommendation X.901 to X.904, </note> <month> May </month> <year> 1995. </year>
Reference: 16. <author> ISO/IEC JTC1/SC21/WG7. </author> <title> Information Technology Open Distributed Processing - ODP Trading Function. Draft ISO/IEC Standard 13235, </title> <type> Draft ITU-T Recommendation X.9tr, </type> <month> July </month> <year> 1994. </year>
Reference: 17. <author> Robert Jellinghaus. </author> <title> Eiffel Linda: an Object-Oriented Linda Dialect. </title> <journal> SIGPLAN Notices, </journal> <volume> 25(12) </volume> <pages> 70-84, </pages> <year> 1990. </year>
Reference: 18. <author> Keld K. Jensen. </author> <title> Towards a Multiple Tuple Space Model. </title> <type> PhD dissertation, </type> <institution> Aal-borg University, Dept. of Mathematics and Computer Science, Inst. for Electronic Systems, Fredrik Bajers Vej 7E, DK-9220 Aalborg , Denmark, </institution> <year> 1994. </year>
Reference-contexts: Additionally, problems may arise when some processes change the tuple space hierarchy (e.g. remove intermediate spaces like sub1 ) which may lead to invalid paths in use by other processes. The work in <ref> [18] </ref> also introduces a global hierarchy of nested tuple spaces but refuses the global, static naming scheme. Instead, every active object knows tuple spaces by names which omit the hierarchy information (like my space and your space) and especially a relative name context denoting the next "outer" tuple space. <p> Instead, an operation atomically retrieving several objects is necessary in order to cleanly introduce this functionality into the generative communication model. Approaches to support reading of multiple objects have been reported in the literature. One approach, used in [13] and <ref> [18] </ref>, treats tuple spaces as first-class entities and allows to produce snapshots of tuple spaces which can separately be investigated.
Reference: 19. <author> Thilo Kielmann. </author> <title> Object-Oriented Distributed Programming with Objective Linda. </title> <booktitle> In Proc. First International Workshop on High Speed Networks and Open Distributed Platforms, </booktitle> <address> St. Petersburg, Russia, </address> <year> 1995. </year>
Reference: 20. <author> Oliver Krone and Marc Aguilar. </author> <title> Bridging the Gap: A Generic Distributed Coordination Model for Massively Parallel Systems. </title> <booktitle> In Proc. of SIPAR Workshop on Parallel and Distributed Systems, </booktitle> <pages> pages 109-112, </pages> <address> Biel-Bienne, Switzerland, </address> <year> 1995. </year>
Reference-contexts: This might be due to the fact that generative communication with multiple data spaces implies a paradigmatical change. It can be seen to be in between the two extremes, denoted by message passing and the single-spaced Linda model <ref> [20] </ref>. In message-passing systems, senders have to know the name or address of the receiver. Hence, messages can only be sent to agents known by the sender. In Linda, producers of data entities only have to access the shared data space.
Reference: 21. <author> Thomas Kuhne. </author> <title> Parameterization versus Inheritance. </title> <editor> In Christine Mingins and Bertrand Meyer, editors, </editor> <booktitle> Technology of Object-Oriented Languages and Systems: TOOLS 15, </booktitle> <pages> pages 235-245, </pages> <address> Melbourne, Australia, 1994. </address> <publisher> Prentice Hall. </publisher>
Reference-contexts: Passing a predicate is a bit more difficult. One approach is to use so-called function objects <ref> [21] </ref> which realize specific predicates by implementing routines with predefined names (e.g. eval ) operating on the types they have been tailored for. Alternatively, the matching predicates can be directly integrated into the types on which they operate.
Reference: 22. <author> Ted G. Lewis. </author> <booktitle> Where is Client/Server Software Headed? IEEE Computer, </booktitle> <volume> 28(4) </volume> <pages> 49-55, </pages> <year> 1995. </year>
Reference: 23. <author> Satoshi Matsuoka and Satoru Kawai. </author> <title> Using Tuple Space Communication in Distributed Object-Oriented Languages. </title> <booktitle> In ACM Conference Proceedings, Object Oriented Programming Systems, Languages and Applications, </booktitle> <address> San Diego California, </address> <pages> pages 276-284, </pages> <year> 1988. </year>
Reference-contexts: This setting degrades anonymity of communication and is most likely to be the main obstacle concerning general consensus about a suitable model with multiple data spaces. One possible approach for introducing multiple data spaces is presented in <ref> [23] </ref>. Here, object spaces are simply first-class objects. They must hence be known by producers and consumers. This approach comes close to message passing and immediately leads to problems with dangling references if applied to open systems.
Reference: 24. <author> Oscar Nierstrasz. </author> <title> Regular Types for Active Objects. </title> <editor> In O. Nierstrasz and D. Tsichritzis, editors, </editor> <booktitle> Object-Oriented Software Composition, chapter 4, </booktitle> <pages> pages 99-121. </pages> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: Methodologies for such specifications are subject to ongoing research. There already exist promising approaches for specifying behaviour based on message exchange in client/server like settings <ref> [24] </ref>. Unfortunately, behaviour specification of active objects based on generative communication is still unexplored.
Reference: 25. <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification. OMG Document Number 93.12.43, </title> <year> 1993. </year>
Reference: 26. <editor> Walter Olthoff, editor. </editor> <booktitle> Proc. ECOOP'95, number 952 in Lecture Notes in Computer Science, </booktitle> <address> -Arhus, Denmark, 1995. </address> <publisher> Springer. </publisher>
Reference: 27. <author> Open Software Foundation. </author> <title> Introduction to OSF DCE. Open Software Foundation, </title> <address> Cambridge, USA, </address> <year> 1992. </year>
Reference-contexts: Naming schemes can in general not avoid name conflicts and consequently unintended name matches or mismatches [30]. Therefore, OIL types are identified by globally unique identifications making use of OSF DCE's <ref> [27] </ref> Universally Unique ID's (UUID's) which can easily be created from a host identification and a timestamp. Besides the identification of identical types it is of course also necessary to transport objects between agents operating in heterogeneous environments.
Reference: 28. <author> Andreas Polze. </author> <title> The Object Space Approach: Decoupled Communication in C++. </title> <booktitle> In Proc. of Technology of Object-Oriented Languages and Systems (TOOLS) USA'93, </booktitle> <address> Santa Barbara, 1993. </address> <publisher> Prentice Hall. </publisher>
Reference: 29. <author> Satish R. Thatte. </author> <title> Object Imaging. </title> <booktitle> In Olthoff [26], </booktitle> <pages> pages 52-76. </pages>
Reference-contexts: Besides the identification of identical types it is of course also necessary to transport objects between agents operating in heterogeneous environments. For this purpose, techniques known as object externalization or object imaging <ref> [29] </ref> can be used. However, this issue belongs to the technical realization of the Objective Linda model and is hence beyond the scope of this paper. Object Matching in Objective Linda.
Reference: 30. <author> Robert Tolksdorf. </author> <title> Coordination in Open Distributed Systems. </title> <type> PhD dissertation, </type> <institution> Technical University of Berlin, </institution> <address> Berlin, Germany, </address> <year> 1994. </year>
Reference-contexts: In mixed-language environments of open distributed systems it is of course necessary to identify identical types across multiple language bindings. Naming schemes can in general not avoid name conflicts and consequently unintended name matches or mismatches <ref> [30] </ref>. Therefore, OIL types are identified by globally unique identifications making use of OSF DCE's [27] Universally Unique ID's (UUID's) which can easily be created from a host identification and a timestamp.
Reference: 31. <author> Peter Wegner. </author> <title> Tradeoffs between Reasoning and Modeling. </title> <editor> In Agha et al. </editor> <volume> [3], </volume> <pages> pages 22-41. </pages>
Reference: 32. <author> Peter Wegner. </author> <title> Interactive Foundations of Object-Based Programming. </title> <journal> IEEE Computer, </journal> <volume> 28(10), </volume> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
References-found: 32

