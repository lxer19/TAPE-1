URL: http://www.cs.uoregon.edu/paracomp/proj/papers/ipps94.ps.gz
Refering-URL: http://www.cs.uoregon.edu/paracomp/proj/tau/papers.html
Root-URL: http://www.cs.uoregon.edu
Email: fmalony,mohrg@cs.uoregon.edu fbeckman,gannon,yangg@cs.indiana.edu Francois.Bodin@irisa.fr  
Title: Performance Analysis of pC++: A Portable Data-Parallel Programming System for Scalable Parallel Computers 1  
Author: A. Malony, B. Mohr P. Beckman, D. Gannon, S. Yang F. Bodin 
Address: 97403 Bloomington, Indiana 47405 Rennes, France  
Affiliation: Dept. of Comp. and Info. Sci. Dept. of Comp. Sci. Irisa University of Oregon Indiana University University of Rennes Eugene, Oregon  
Date: April 1994.  
Note: To appear in: Proceedings of the 8th International Parallel Processing Symbosium (IPPS), Cancun, Mexico,  
Abstract: pC++ is a language extension to C++ designed to allow programmers to compose distributed data structures with parallel execution semantics. These data structures are organized as "concurrent aggregate" collection classes which can be aligned and distributed over the memory hierarchy of a parallel machine in a manner consistent with the High Performance Fortran Forum (HPF) directives for Fortran 90. pC++ allows the user to write portable and efficient code which will run on a wide range of scalable parallel computers. In this paper, we discuss the performance analysis of the pC++ programming system. We describe the performance tools developed and include scalability measurements for four benchmark programs: a "nearest neighbor" grid computation, a fast Poisson solver, and the "Embar" and "Sparse" codes from the NAS suite. In addition to speedup numbers, we present a detailed analysis highlighting performance issues at the language, runtime system, and target system levels. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> BBN Advanced Computer Inc., </institution> <address> Cambridge, MA. </address> <booktitle> Inside the TC2000, </booktitle> <year> 1989. </year>
Reference-contexts: The shared memory ports include the Sequent 1 A companion paper, "Implementing a Parallel C++ Run-time System for Scalable Parallel Systems", discusses issues of pC++ runtime system design and appeared in the Proceedings of the Supercomputing '93 conference [17]. Symmetry [5], the BBN TC2000 <ref> [1] </ref>, and the Kendall Square Research KSR-1 [2]. The distributed memory ports include the Intel Paragon [20], the TMC CM-5 [19], the IBM SP-1, and homogeneous clusters of UNIX workstations with PVM [24]. Work on porting the runtime system to the Cray T3D and Meiko CS-2 is in progress.
Reference: [2] <author> S. Frank, H. Burkhardt III, J. Rothnie, </author> <title> The KSR1: Bridging the Gap Between Shared Memory and MPPs, </title> <booktitle> Proc. </booktitle> <address> Compcon'93, San Francisco, </address> <year> 1993, </year> <pages> pp. 285-294. </pages>
Reference-contexts: Symmetry [5], the BBN TC2000 [1], and the Kendall Square Research KSR-1 <ref> [2] </ref>. The distributed memory ports include the Intel Paragon [20], the TMC CM-5 [19], the IBM SP-1, and homogeneous clusters of UNIX workstations with PVM [24]. Work on porting the runtime system to the Cray T3D and Meiko CS-2 is in progress.
Reference: [3] <author> D. Gannon, F. Bodin, S. Srinivas, N. Sundaresan, S. Narayana, Sage++, </author> <title> An Object Oriented Toolkit for Program Transformations, </title> <type> Technical Report, </type> <institution> Dept. of Computer Science, Indiana University. </institution> <year> 1993. </year>
Reference-contexts: This includes classes such as DistributedArray, Distributed-Matrix, DistributedVector, and DistributedGrid. In its current form, pC++ is a very simple preprocessor that generates C++ code and machine independent calls to a portable runtime system. This is accomplished by using the Sage++ restructuring tools <ref> [3] </ref>. Sage++ is an object-oriented compiler preprocessor toolkit. It provides the functions necessary to read and restructure an internal representation of the pC++ program.
Reference: [4] <author> V. Herrarte, E. Lusk, </author> <title> Studying Parallel Program Behavior with Upshot, </title> <type> Technical Report ANL-91/15, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Trace Conversion: The utility tool se convert converts traces to the SDDF format used with the Pablo performance analysis environment [18, 21] or to ALOG format used in the Upshot event display tool <ref> [4] </ref>. It also can produce a simple user readable ASCII dump of the binary trace. Trace Analysis and Visualization: The trace files can be processed with the SIMPLE event trace analysis environment or other tools based on the TDL/POET event trace interface [13, 14].
Reference: [5] <institution> Sequent Computer Systems, Inc. Symmetry Multiprocessor Architecture Overview, </institution> <year> 1992. </year>
Reference-contexts: The shared memory ports include the Sequent 1 A companion paper, "Implementing a Parallel C++ Run-time System for Scalable Parallel Systems", discusses issues of pC++ runtime system design and appeared in the Proceedings of the Supercomputing '93 conference [17]. Symmetry <ref> [5] </ref>, the BBN TC2000 [1], and the Kendall Square Research KSR-1 [2]. The distributed memory ports include the Intel Paragon [20], the TMC CM-5 [19], the IBM SP-1, and homogeneous clusters of UNIX workstations with PVM [24].
Reference: [6] <author> A. Chien and W. Dally. </author> <title> Concurrent Aggregates (CA), </title> <booktitle> Proc. 2nd ACM Sigplan Symposium on Principles & Practice of Parallel Programming, </booktitle> <address> Seattle, Washing-ton, </address> <month> March, </month> <year> 1990. </year>
Reference-contexts: In x6, we present some of the detailed performance analysis results we have generated. 2 A Very Brief Introduction to pC++ The basic concept behind pC++ is the notion of a distributed collection, which is a type of concurrent aggregate "container class" <ref> [6, 8] </ref>. More specifically, a collection is a structured set of objects which are distributed across the processing elements of the computer in a manner designed to be completely consistent with HPF Fortran.
Reference: [7] <author> High Performance Fortran Forum, </author> <title> High Performance Fortran Language Specification, </title> <note> 1993. Available from titan.cs.rice.edu by anonymous ftp. </note>
Reference: [8] <author> J. K. Lee, </author> <title> Object Oriented Parallel Programming Paradigms and Environments For Supercomputers, </title> <type> Ph.D. Thesis, </type> <institution> Indiana University, Bloomington, Indiana, </institution> <month> Jun </month> <year> 1992. </year>
Reference-contexts: In x6, we present some of the detailed performance analysis results we have generated. 2 A Very Brief Introduction to pC++ The basic concept behind pC++ is the notion of a distributed collection, which is a type of concurrent aggregate "container class" <ref> [6, 8] </ref>. More specifically, a collection is a structured set of objects which are distributed across the processing elements of the computer in a manner designed to be completely consistent with HPF Fortran.
Reference: [9] <author> J. K. Lee, D. Gannon, </author> <title> Object Oriented Parallel Programming: Experiments and Results, </title> <booktitle> Proc. Supercomputing 91, </booktitle> <address> Albuquerque, </address> <publisher> IEEE Computer Society and ACM SIGARCH, </publisher> <year> 1991, </year> <pages> pp. 273-282. </pages>
Reference-contexts: Work on porting the runtime system to the Cray T3D and Meiko CS-2 is in progress. More details about the pC++ language and runtime system can be found in <ref> [9, 10, 11, 12, 17] </ref>. 3 The pC++ Performance Analysis Environment The pC++ integrated performance analysis environment is unique because it is designed and implemented in concert with the pC++ language and runtime system.
Reference: [10] <author> D. Gannon, J. K. Lee, </author> <title> Object Oriented Parallelism: pC++ Ideas and Experiments, </title> <booktitle> Proc. of 1991 Japan Society for Parallel Processing, </booktitle> <pages> pp. 13-23. </pages>
Reference-contexts: Work on porting the runtime system to the Cray T3D and Meiko CS-2 is in progress. More details about the pC++ language and runtime system can be found in <ref> [9, 10, 11, 12, 17] </ref>. 3 The pC++ Performance Analysis Environment The pC++ integrated performance analysis environment is unique because it is designed and implemented in concert with the pC++ language and runtime system.
Reference: [11] <author> D. Gannon, J. K. Lee, </author> <title> On Using Object Oriented Parallel Programming to Build Distributed Algebraic Abstractions, </title> <booktitle> Proc. </booktitle> <address> CONPAR 92-VAPP, Lyon, France, </address> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: Work on porting the runtime system to the Cray T3D and Meiko CS-2 is in progress. More details about the pC++ language and runtime system can be found in <ref> [9, 10, 11, 12, 17] </ref>. 3 The pC++ Performance Analysis Environment The pC++ integrated performance analysis environment is unique because it is designed and implemented in concert with the pC++ language and runtime system.
Reference: [12] <author> D. Gannon, </author> <title> Libraries and Tools for Object Parallel Programming, </title> <booktitle> Proc. CNRS-NSF Workshop on Environments and Tools For Parallel Scientific Computing, </booktitle> <address> St. Hilaire du Touvet, France, Elsevier, </address> <booktitle> Advances in Parallel Computing, </booktitle> <volume> Vol. 6, </volume> <pages> pp. 231-246, </pages> <year> 1993. </year>
Reference-contexts: Work on porting the runtime system to the Cray T3D and Meiko CS-2 is in progress. More details about the pC++ language and runtime system can be found in <ref> [9, 10, 11, 12, 17] </ref>. 3 The pC++ Performance Analysis Environment The pC++ integrated performance analysis environment is unique because it is designed and implemented in concert with the pC++ language and runtime system.
Reference: [13] <author> B. Mohr, </author> <title> Performance Evaluation of Parallel Programs in Parallel and Distributed Systems, </title> <editor> H. Burk-hart (Eds.), </editor> <booktitle> Proc. CONPAR 90-VAPP IV, Joint International Conference on Vector and Parallel Processing, Zurich, Lecture Notes in Computer Science 457, </booktitle> <pages> pp. 176-187, </pages> <address> Berlin, Heidelberg, New York, London, Paris, Tokio, </address> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: It also can produce a simple user readable ASCII dump of the binary trace. Trace Analysis and Visualization: The trace files can be processed with the SIMPLE event trace analysis environment or other tools based on the TDL/POET event trace interface <ref> [13, 14] </ref>. These tools use the Trace Description Language (TDL) output of the Instrumentor to access the trace files. In addition, we have implemented a Upshot-like event and state display tool (offShoot) based on Tcl/Tk [15, 16].
Reference: [14] <author> B. Mohr, </author> <title> Standardization of Event Traces Considered Harmful or Is an Implementation of Object-Independent Event Trace Monitoring and Analysis Systems Possible?, </title> <booktitle> Proc. CNRS-NSF Workshop on Environments and Tools For Parallel Scientific Computing, </booktitle> <address> St. Hilaire du Touvet, France, Elsevier, </address> <booktitle> Advances in Parallel Computing, </booktitle> <volume> Vol. 6, </volume> <pages> pp. 103-124, </pages> <year> 1993. </year>
Reference-contexts: It also can produce a simple user readable ASCII dump of the binary trace. Trace Analysis and Visualization: The trace files can be processed with the SIMPLE event trace analysis environment or other tools based on the TDL/POET event trace interface <ref> [13, 14] </ref>. These tools use the Trace Description Language (TDL) output of the Instrumentor to access the trace files. In addition, we have implemented a Upshot-like event and state display tool (offShoot) based on Tcl/Tk [15, 16].
Reference: [15] <author> J. K. Ousterhout, </author> <title> Tcl: An Embeddable Command Language, </title> <booktitle> Proc. 1990 Winter USENIX Conference. </booktitle>
Reference-contexts: Vpprof is a graphical viewer for pC++ profile datafiles. After compiling an application for profiling and running it, vpprof lets you browse through the function and collection profile data. It is a graphical frontend to pprof implemented using Tcl/Tk <ref> [15, 16] </ref>. The main window shows a summary of the function and the collection access profile data in the form of bar graphs. <p> These tools use the Trace Description Language (TDL) output of the Instrumentor to access the trace files. In addition, we have implemented a Upshot-like event and state display tool (offShoot) based on Tcl/Tk <ref> [15, 16] </ref>. Like Upshot, it is based on the ALOG event trace format. 3.3 Programming Environment Tools In addition to the performance tools, we started to implement some programming environment utilities. Currently, function, class, and static callgraph browsers are implemented.
Reference: [16] <author> J. K. Ousterhout, </author> <title> An X11 Toolkit Based on the Tcl Language, </title> <booktitle> Proc. 1991 Winter USENIX Conference. </booktitle>
Reference-contexts: Vpprof is a graphical viewer for pC++ profile datafiles. After compiling an application for profiling and running it, vpprof lets you browse through the function and collection profile data. It is a graphical frontend to pprof implemented using Tcl/Tk <ref> [15, 16] </ref>. The main window shows a summary of the function and the collection access profile data in the form of bar graphs. <p> These tools use the Trace Description Language (TDL) output of the Instrumentor to access the trace files. In addition, we have implemented a Upshot-like event and state display tool (offShoot) based on Tcl/Tk <ref> [15, 16] </ref>. Like Upshot, it is based on the ALOG event trace format. 3.3 Programming Environment Tools In addition to the performance tools, we started to implement some programming environment utilities. Currently, function, class, and static callgraph browsers are implemented.
Reference: [17] <author> F. Bodin, P. Beckman, D. Gannon, S. Yang, S. Ke-savan, A. Malony, B. Mohr, </author> <title> Implementing a Parallel C++ Runtime System for Scalable Parallel Systems, </title> <booktitle> Proc. 1993 Supercomputing Conference, Port-land, Oregon, </booktitle> <pages> pp. 588-597, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: The shared memory ports include the Sequent 1 A companion paper, "Implementing a Parallel C++ Run-time System for Scalable Parallel Systems", discusses issues of pC++ runtime system design and appeared in the Proceedings of the Supercomputing '93 conference <ref> [17] </ref>. Symmetry [5], the BBN TC2000 [1], and the Kendall Square Research KSR-1 [2]. The distributed memory ports include the Intel Paragon [20], the TMC CM-5 [19], the IBM SP-1, and homogeneous clusters of UNIX workstations with PVM [24]. <p> Work on porting the runtime system to the Cray T3D and Meiko CS-2 is in progress. More details about the pC++ language and runtime system can be found in <ref> [9, 10, 11, 12, 17] </ref>. 3 The pC++ Performance Analysis Environment The pC++ integrated performance analysis environment is unique because it is designed and implemented in concert with the pC++ language and runtime system.
Reference: [18] <author> D. A. Reed, R. D. Olson, R. A. Aydt, T. M. Mad-hyasta, T. Birkett, D. W. Jensen, B. A. A. Nazief, B. K. Totty, </author> <title> Scalable Performance Environments for Parallel Systems. </title> <booktitle> Proc. 6th Distributed Memory Computing Conference, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 562-569, </pages> <year> 1991. </year>
Reference-contexts: If the target machine does not have a hardware global clock, se merge will establish a global time reference for the event traces by cor recting timestamps. Trace Conversion: The utility tool se convert converts traces to the SDDF format used with the Pablo performance analysis environment <ref> [18, 21] </ref> or to ALOG format used in the Upshot event display tool [4]. It also can produce a simple user readable ASCII dump of the binary trace.
Reference: [19] <author> J. Palmer, G. L. Steele, Jr. </author> <title> Connection Machine Model CM-5 System Overview, </title> <booktitle> Proc, 4th Symp. Frontiers of Massively Parallel Computation, </booktitle> <pages> pp. 474-483. </pages>
Reference-contexts: Symmetry [5], the BBN TC2000 [1], and the Kendall Square Research KSR-1 [2]. The distributed memory ports include the Intel Paragon [20], the TMC CM-5 <ref> [19] </ref>, the IBM SP-1, and homogeneous clusters of UNIX workstations with PVM [24]. Work on porting the runtime system to the Cray T3D and Meiko CS-2 is in progress.
Reference: [20] <author> Intel Supercomputes, </author> <title> Paragon-XP/S Technical Specification., </title> <address> Beaverton, Or. </address>
Reference-contexts: Symmetry [5], the BBN TC2000 [1], and the Kendall Square Research KSR-1 [2]. The distributed memory ports include the Intel Paragon <ref> [20] </ref>, the TMC CM-5 [19], the IBM SP-1, and homogeneous clusters of UNIX workstations with PVM [24]. Work on porting the runtime system to the Cray T3D and Meiko CS-2 is in progress.
Reference: [21] <author> D. A. Reed, R. A. Aydt, T. M. Madhyastha, Roger J. Noe, Keith A. Shields, B. W. Schwartz, </author> <title> An Overview of the Pablo Performance Analysis Environment. </title> <institution> Department of Computer Science, University of Illinois, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: If the target machine does not have a hardware global clock, se merge will establish a global time reference for the event traces by cor recting timestamps. Trace Conversion: The utility tool se convert converts traces to the SDDF format used with the Pablo performance analysis environment <ref> [18, 21] </ref> or to ALOG format used in the Upshot event display tool [4]. It also can produce a simple user readable ASCII dump of the binary trace.
Reference: [22] <author> Z. Segall, et al., </author> <title> An Integrated Instrumentation Environment, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 32, No. 1, </volume> <pages> pp. 4-14, </pages> <month> Jan., </month> <year> 1993. </year>
Reference-contexts: The notion of designing for performance analysis is well-founded <ref> [22, 23] </ref>, but until now has been rarely applied in the parallel language system domain. The performance evaluation issues associated with the pC++ system are interesting because they address several performance levels (language, runtime system, target architecture) and require a system-integrated performance toolset to fully investigate.
Reference: [23] <author> Z. Segall and L. Rudolph, PIE: </author> <title> A Programming and Instrumentation Environment for Parallel Processiong, </title> <journal> IEEE Software, </journal> <volume> Vol. 2, No. 6, </volume> <pages> pp. 22-37, </pages> <month> Nov., </month> <year> 1985. </year>
Reference-contexts: The notion of designing for performance analysis is well-founded <ref> [22, 23] </ref>, but until now has been rarely applied in the parallel language system domain. The performance evaluation issues associated with the pC++ system are interesting because they address several performance levels (language, runtime system, target architecture) and require a system-integrated performance toolset to fully investigate.
Reference: [24] <author> V. S. Sunderam, </author> <title> PVM: A Framework for Parallel Distributed Computing, </title> <journal> Concurrency: Practice & Experience, </journal> <volume> Vol. 2, No. 4, </volume> <pages> pp. 315-339, </pages> <month> December </month> <year> 1990. </year> <note> TC2000 KSR-1 </note>
Reference-contexts: Symmetry [5], the BBN TC2000 [1], and the Kendall Square Research KSR-1 [2]. The distributed memory ports include the Intel Paragon [20], the TMC CM-5 [19], the IBM SP-1, and homogeneous clusters of UNIX workstations with PVM <ref> [24] </ref>. Work on porting the runtime system to the Cray T3D and Meiko CS-2 is in progress.
References-found: 24

