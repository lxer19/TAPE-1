URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3422/3422.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Generalized Fair Reachability Analysis for Cyclic Protocols with Nondeterminism and Internal Transitions  
Author: Hong Liu Raymond E. Miller 
Address: College Park College Park, MD 20742  
Affiliation: Department of Computer Science University of Maryland at  
Abstract: In this paper, we extend the generalized fair reachability notion to cyclic protocols with nondeterminism and internal transitions. By properly incorporating internal transitions into the formulation of fair progress vectors, we prove that most of the results established for cyclic protocols without nondeterminism and internal transitions still hold even if nondeterminism and internal transitions are allowed. We identify indefiniteness as a new type of logical error resulting from reachable internal execution cycles and show that indefiniteness can also be detected for the class of cyclic protocols with finite fair reachable state spaces with finite extensions.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Brand and P. Zafiropulo, </author> <title> "On Communicating Finite-State Machines," </title> <journal> Journal of ACM, </journal> <volume> Vol. 30, No. 2, </volume> <month> April </month> <year> 1983, </year> <pages> pp. 323-342. </pages>
Reference-contexts: C is an internal execution cycle of S iff each nonempty C i is an internal cycle in P i . For protocol validation, we check R against common errors such as deadlock, unspecified reception, nonexecutable transition, and unboundedness. (For definitions of these concepts, 4 please refer to <ref> [1] </ref>.) The inclusion of internal transitions in the model introduces a new type of logical error resulting from internal execution cycles. By definition, P has an internal execution cycle iff one of the processes in P has a reachable internal cycle. <p> Deadlock, unspecified reception, nonexecutable transition, unboundedness, and indefiniteness are called logical errors. P is logically correct iff R is free of logical errors. It can be shown that none of the logical errors is decidable for cyclic protocols in general using the results established in <ref> [1] </ref>. 3 Generalized Fair Reachability Analysis Fair reachability was generalized to D-cyclic protocols with n 2 machines in [7, 8]. In this section, we first show how the fair reachability notion for D-cyclic protocols can be extended to cope with nondeterminism and internal transitions for general cyclic protocols. <p> Although neither P-I nor P-II is decidable in general (using the results established in <ref> [1] </ref>), we will show that both of them are decidable for Q via finite extension of F. The line of reasoning is almost identical to that for showing them decidable for P in [8].
Reference: [2] <author> L. Cacciari and O. Rafiq, </author> <title> "On Improving Reduced Reachability Analysis," </title> <address> FORTE'92, Perros-Guirec, France, </address> <month> October 13-16, </month> <year> 1992, </year> <editor> M. Daiz and R. Groz (Ed.), </editor> <year> 1992, </year> <pages> pp. 137-152. </pages>
Reference-contexts: However, we will show that indefiniteness can also be detected for the class of cyclic protocols whose F's are finite, although sometimes finite extension of F is necessary. Therefore, our generalized fair reachability technique works equally well for the analysis of cyclic protocols with nondeterminism and internal transitions. In <ref> [2, 3] </ref>, Cacciari and Rafiq proposed a technique called reduced reachability analysis that can handle internal transitions for protocols with two machines. However, unlike fair reachability analysis, two machines can proceed at the same time only if the "parallelwise" condition is satisfied. <p> While the notion of internal transitions has been used extensively in other models such 11 as the labeled transition systems (LTS for short) model, the study of this notion in the CFSM model has been limited. The reduced reachability analysis approach by Cacciari and Rafiq <ref> [2, 3] </ref> seems to be most closely related to the present work in that reduced progress is quite similar to fair progress and internal transitions are allowed in their model.
Reference: [3] <author> L. Cacciari and O. Rafiq, </author> <title> "Decidability Issues in Reduced Reachability Analysis," </title> <address> ICNP'93, San Francisco, CA, </address> <month> October 19-22, </month> <year> 1993, </year> <pages> pp. 158-165. </pages>
Reference-contexts: However, we will show that indefiniteness can also be detected for the class of cyclic protocols whose F's are finite, although sometimes finite extension of F is necessary. Therefore, our generalized fair reachability technique works equally well for the analysis of cyclic protocols with nondeterminism and internal transitions. In <ref> [2, 3] </ref>, Cacciari and Rafiq proposed a technique called reduced reachability analysis that can handle internal transitions for protocols with two machines. However, unlike fair reachability analysis, two machines can proceed at the same time only if the "parallelwise" condition is satisfied. <p> While the notion of internal transitions has been used extensively in other models such 11 as the labeled transition systems (LTS for short) model, the study of this notion in the CFSM model has been limited. The reduced reachability analysis approach by Cacciari and Rafiq <ref> [2, 3] </ref> seems to be most closely related to the present work in that reduced progress is quite similar to fair progress and internal transitions are allowed in their model.
Reference: [4] <author> M.G. Gouda, C.H. Chow, and S.S. Lam, </author> <title> "Livelock Detection in Networks of Communicating Finite State Machines," </title> <type> Technical Report, </type> <institution> TR-84-10, Dept. of Computer Science, Univ. of Texas at Austin, </institution> <month> April </month> <year> 1984. </year>
Reference-contexts: In this case, we say P is globally indefinite. If we define a function that marks each normal transition in P i as "progress" and marks each internal transition in P i as "nonprogress", then global indefiniteness becomes a special case of livelock defined in <ref> [4, 5, 7] </ref>. In [7], we generalized the results of [4, 5] from n = 2 to n 2 and showed that livelock is decidable within F for class P. <p> If we define a function that marks each normal transition in P i as "progress" and marks each internal transition in P i as "nonprogress", then global indefiniteness becomes a special case of livelock defined in [4, 5, 7]. In [7], we generalized the results of <ref> [4, 5] </ref> from n = 2 to n 2 and showed that livelock is decidable within F for class P. With the fair reachability notion formulated in Section 3 of this paper, it is not difficult to show that livelock is also decidable for Q within F. <p> Clearly, indefiniteness and global indefiniteness represent the two ends of the k-indefiniteness spectrum and we know that both of them are decidable for Q. We can also generalize the livelock notion in <ref> [4, 5, 7] </ref> to k-livelock for cyclic protocols in a similar way. We already know that n-livelock is decidable for Q. Moreover, P-I being decidable for Q implies that 1-livelock is also decidable for Q.
Reference: [5] <author> M.G. Gouda, C.H. Chow, and S.S. Lam, </author> <title> "On the Decidability of Livelock Detection in Networks of Communicating Finite State Machines," </title> <editor> PSTV'85, Y. Yemini, R. Strom, and S. Yemini (Ed.), </editor> <year> 1985, </year> <pages> pp. 47-56. </pages>
Reference-contexts: In this case, we say P is globally indefinite. If we define a function that marks each normal transition in P i as "progress" and marks each internal transition in P i as "nonprogress", then global indefiniteness becomes a special case of livelock defined in <ref> [4, 5, 7] </ref>. In [7], we generalized the results of [4, 5] from n = 2 to n 2 and showed that livelock is decidable within F for class P. <p> If we define a function that marks each normal transition in P i as "progress" and marks each internal transition in P i as "nonprogress", then global indefiniteness becomes a special case of livelock defined in [4, 5, 7]. In [7], we generalized the results of <ref> [4, 5] </ref> from n = 2 to n 2 and showed that livelock is decidable within F for class P. With the fair reachability notion formulated in Section 3 of this paper, it is not difficult to show that livelock is also decidable for Q within F. <p> Clearly, indefiniteness and global indefiniteness represent the two ends of the k-indefiniteness spectrum and we know that both of them are decidable for Q. We can also generalize the livelock notion in <ref> [4, 5, 7] </ref> to k-livelock for cyclic protocols in a similar way. We already know that n-livelock is decidable for Q. Moreover, P-I being decidable for Q implies that 1-livelock is also decidable for Q.
Reference: [6] <author> M.G. Gouda and J.Y. Han, </author> <title> "Protocol Validation by Fair Progress State Exploration," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> Vol. 9, </volume> <year> 1985, </year> <pages> pp. 353-361. </pages>
Reference-contexts: However, care must be taken to ensure that the reduced state space still maintains competitive, if not the same, logical error detecting capability as the original reachable state space. Fair reachability analysis was originally proposed as one such improved state exploration technique for protocols with two machines <ref> [9, 6] </ref>. By forcing the two machines in a protocol to make progress at the same time, whenever possible, only fair progress states are generated during state exploration. <p> NAG 5-2648. 1 deadlock and unspecified reception are decidable within the fair reachable state space [9], while unboundedness detection is decidable with finite extension on the fair reachable state space <ref> [6] </ref>. In [7, 8], we generalized the fair reachability notion to cyclic protocols with n 2 machines, where each machine is deterministic but partially defined and does not have internal transitions.
Reference: [7] <author> H. Liu and R.E. Miller, </author> <title> "Generalized Fair Reachability Analysis for Cyclic Protocols: Part 1," </title> <editor> PSTV'94, S.T. Vuong (Ed.), Vancouvor, </editor> <address> B.C. Canada, </address> <month> June </month> <year> 1994, </year> <pages> pp. 258-273. </pages>
Reference-contexts: NAG 5-2648. 1 deadlock and unspecified reception are decidable within the fair reachable state space [9], while unboundedness detection is decidable with finite extension on the fair reachable state space [6]. In <ref> [7, 8] </ref>, we generalized the fair reachability notion to cyclic protocols with n 2 machines, where each machine is deterministic but partially defined and does not have internal transitions. <p> Moreover, we proved that for P, the class of cyclic protocols whose F's are finite, deadlock detection is decidable within F <ref> [7] </ref>, while detection of other logical error, such as unspecified reception, unboundedness, and nonexecutable transition, are all decidable via finite extension of F [8]. We also showed that for any P 2 P , P is logically correct iff its F does not contain any logical errors [8]. <p> It can be shown that none of the logical errors is decidable for cyclic protocols in general using the results established in [1]. 3 Generalized Fair Reachability Analysis Fair reachability was generalized to D-cyclic protocols with n 2 machines in <ref> [7, 8] </ref>. In this section, we first show how the fair reachability notion for D-cyclic protocols can be extended to cope with nondeterminism and internal transitions for general cyclic protocols. <p> For the sake of space, we will be expanding on the modification part of the formulation and be brief on the part that is unchanged. Please refer to <ref> [7, 8] </ref> for a complete treatment. For conciseness, we use "fair reachability" for "generalized fair reachability" from now on. Given a cyclic protocol P = (P 1 ; P 2 ;: : :; P n ). <p> Loosely speaking, in a concurrency vector, either all processes are sending or all processes are receiving; in a synchronization vector, some processes are grouped into send-receive pairs while the rest do not progress at all. For details, please refer to <ref> [7, 8] </ref>. 5 To cope with internal transitions, we let E i = f (s i )g if is defined at s i ; E i = ; otherwise. <p> The set of fair reachable states, denoted as F, is called the fair reachable state space of P . Note that 7! f is defined in the same way as that for D-cyclic protocols <ref> [7, 8] </ref> except for two modifications: First, internal vectors are added into V during fair progress state exploration. <p> Based on this lemma, we can show that each reachable state with equal channel length is fair reachable. Theorem 3.1 F is exactly the set of reachable states with equal channel length. We are primarily interested in cyclic protocols whose fair reachable state spaces are finite. In <ref> [7] </ref>, we show that for a D-cyclic protocol, F is finite iff it is not "simultaneously unbounded". (A cyclic protocol P is simultaneously unbounded iff 8 K 0 9 K 0 &gt; K such that there is a state S 2 R where each channel has length no less than K <p> In this case, we say P is globally indefinite. If we define a function that marks each normal transition in P i as "progress" and marks each internal transition in P i as "nonprogress", then global indefiniteness becomes a special case of livelock defined in <ref> [4, 5, 7] </ref>. In [7], we generalized the results of [4, 5] from n = 2 to n 2 and showed that livelock is decidable within F for class P. <p> In this case, we say P is globally indefinite. If we define a function that marks each normal transition in P i as "progress" and marks each internal transition in P i as "nonprogress", then global indefiniteness becomes a special case of livelock defined in [4, 5, 7]. In <ref> [7] </ref>, we generalized the results of [4, 5] from n = 2 to n 2 and showed that livelock is decidable within F for class P. <p> Clearly, indefiniteness and global indefiniteness represent the two ends of the k-indefiniteness spectrum and we know that both of them are decidable for Q. We can also generalize the livelock notion in <ref> [4, 5, 7] </ref> to k-livelock for cyclic protocols in a similar way. We already know that n-livelock is decidable for Q. Moreover, P-I being decidable for Q implies that 1-livelock is also decidable for Q. <p> We showed that most of the results established for cyclic protocols without nondeterminism and internal transitions in <ref> [7, 8] </ref> can be carried over to cyclic protocols with nondeterminism and internal transitions. We identified indefiniteness as a new type of logical error and showed that its detection is also decidable for Q via finite extension of the fair reachable state space.
Reference: [8] <author> H. Liu and R.E. Miller, </author> <title> "Generalized Fair Reachability Analysis for Cyclic Protocols: Decidability for Logical Correctness Problems," </title> <address> ICNP'94, Boston, Massachusetts, Oc-tober 25-28, </address> <pages> pp. 100-107. </pages>
Reference-contexts: NAG 5-2648. 1 deadlock and unspecified reception are decidable within the fair reachable state space [9], while unboundedness detection is decidable with finite extension on the fair reachable state space [6]. In <ref> [7, 8] </ref>, we generalized the fair reachability notion to cyclic protocols with n 2 machines, where each machine is deterministic but partially defined and does not have internal transitions. <p> Moreover, we proved that for P, the class of cyclic protocols whose F's are finite, deadlock detection is decidable within F [7], while detection of other logical error, such as unspecified reception, unboundedness, and nonexecutable transition, are all decidable via finite extension of F <ref> [8] </ref>. We also showed that for any P 2 P , P is logically correct iff its F does not contain any logical errors [8]. <p> decidable within F [7], while detection of other logical error, such as unspecified reception, unboundedness, and nonexecutable transition, are all decidable via finite extension of F <ref> [8] </ref>. We also showed that for any P 2 P , P is logically correct iff its F does not contain any logical errors [8]. As a result, for class P, our generalized fair reachability analysis technique not only can achieve substantial state reduction, but also maintains very competitive fault coverage. Therefore, it is a very useful technique for the analysis of a wide variety of cyclic protocols. <p> It can be shown that none of the logical errors is decidable for cyclic protocols in general using the results established in [1]. 3 Generalized Fair Reachability Analysis Fair reachability was generalized to D-cyclic protocols with n 2 machines in <ref> [7, 8] </ref>. In this section, we first show how the fair reachability notion for D-cyclic protocols can be extended to cope with nondeterminism and internal transitions for general cyclic protocols. <p> For the sake of space, we will be expanding on the modification part of the formulation and be brief on the part that is unchanged. Please refer to <ref> [7, 8] </ref> for a complete treatment. For conciseness, we use "fair reachability" for "generalized fair reachability" from now on. Given a cyclic protocol P = (P 1 ; P 2 ;: : :; P n ). <p> Loosely speaking, in a concurrency vector, either all processes are sending or all processes are receiving; in a synchronization vector, some processes are grouped into send-receive pairs while the rest do not progress at all. For details, please refer to <ref> [7, 8] </ref>. 5 To cope with internal transitions, we let E i = f (s i )g if is defined at s i ; E i = ; otherwise. <p> The set of fair reachable states, denoted as F, is called the fair reachable state space of P . Note that 7! f is defined in the same way as that for D-cyclic protocols <ref> [7, 8] </ref> except for two modifications: First, internal vectors are added into V during fair progress state exploration. <p> P is unbounded iff it has a reachable sending cycle. Theorem 3.3 Given a cyclic protocol P . F is finite iff P is not simultaneously un bounded. Theorem 3.4 It is undecidable whether a cyclic protocol P has a finite F. In <ref> [8] </ref>, we use P to denote the class of D-cyclic protocols whose F's are finite. In this paper, we use Q to denote the class of cyclic protocols whose F's are finite. <p> However, as for D-cyclic protocols, it can be shown that the notion of fair unspecified reception is sufficient for detecting unspecified receptions in F and the occurrence of dead end states does not introduce new types of logical errors in F <ref> [8] </ref>. Let's study the logical error detection capability of F. First, notice that all deadlock states are of equal channel length zero. By Theorem 3.1, we have the following result on deadlock detection: Theorem 4.1 Deadlock detection is decidable for Q. <p> However, as for D-cyclic protocols, it is not difficult to see that for detection of logical errors other than deadlock, F is not sufficient, and thus finite extension of F is needed. Following the same formulation as <ref> [8] </ref>, we reduce the detection of logical errors other than deadlock in Q to two local state reachability problems as follows: P-I Given a local state s i , decide whether s i is reachable. <p> Although neither P-I nor P-II is decidable in general (using the results established in [1]), we will show that both of them are decidable for Q via finite extension of F. The line of reasoning is almost identical to that for showing them decidable for P in <ref> [8] </ref>. As a result, we will be quite informal in the arguments we make and only highlight the differences along the way. Interested readers should consult [8] for details. <p> The line of reasoning is almost identical to that for showing them decidable for P in <ref> [8] </ref>. As a result, we will be quite informal in the arguments we make and only highlight the differences along the way. Interested readers should consult [8] for details. As we have already seen, the need for finite extension in F results from the fact that some of the reachable local states are not fair reachable. Therefore, the purpose of finite extension is to uncover those local states. <p> Similar to the approach used for D-cyclic protocols, we can show that such extension can be done in a finite way so that both P-I and P-II is solvable for S. The formulation of the reachability relation among partial states is the same as that in <ref> [8] </ref> except for two modifications, as were pointed out in the formulation of fair reachability relation in Section 3. For details, please refer to [8]. Theorem 4.2 Both P-I and P-II are decidable for Q. Therefore, detection of unspecified reception, unboundedness, nonexecutable transition, and indefiniteness are all decidable for Q. <p> The formulation of the reachability relation among partial states is the same as that in <ref> [8] </ref> except for two modifications, as were pointed out in the formulation of fair reachability relation in Section 3. For details, please refer to [8]. Theorem 4.2 Both P-I and P-II are decidable for Q. Therefore, detection of unspecified reception, unboundedness, nonexecutable transition, and indefiniteness are all decidable for Q. During the process, we have also found out a fault coverage characterization for F similar to that for F of a D-cyclic protocol [8]. <p> to <ref> [8] </ref>. Theorem 4.2 Both P-I and P-II are decidable for Q. Therefore, detection of unspecified reception, unboundedness, nonexecutable transition, and indefiniteness are all decidable for Q. During the process, we have also found out a fault coverage characterization for F similar to that for F of a D-cyclic protocol [8]. The only difference is that we need to take fair indefinite states into account. Theorem 4.3 Given a cyclic protocol P 2 Q. P has a deadlock iff F dl 6= ;. <p> As a result, F not only offers substantial state reduction over R but also is very competitive in fault coverage. Furthermore, the decision procedures can be optimized for efficiency in a similar way as for P. We refer the interested readers to <ref> [8] </ref> for details. A final remark on indefiniteness is in order here. Given a reachable internal execution cycle C = fC 1 ; C 2 ;: : :; C n g, there is a nonempty C i that is an internal cycle of P i . <p> Third, the existence of a reachable internal cycle in a process results in a new type of logical error called indefiniteness. Since the set of fair indefinite states is a subset of the extension set, finite extension is in general more costly than the one in <ref> [8] </ref> for D-cyclic protocols. <p> We showed that most of the results established for cyclic protocols without nondeterminism and internal transitions in <ref> [7, 8] </ref> can be carried over to cyclic protocols with nondeterminism and internal transitions. We identified indefiniteness as a new type of logical error and showed that its detection is also decidable for Q via finite extension of the fair reachable state space.
Reference: [9] <author> J. Rubin and C.H. West, </author> <title> "An Improved Protocol Validation Technique," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> Vol. 6, </volume> <year> 1982, </year> <pages> pp. 65-73. </pages>
Reference-contexts: However, care must be taken to ensure that the reduced state space still maintains competitive, if not the same, logical error detecting capability as the original reachable state space. Fair reachability analysis was originally proposed as one such improved state exploration technique for protocols with two machines <ref> [9, 6] </ref>. By forcing the two machines in a protocol to make progress at the same time, whenever possible, only fair progress states are generated during state exploration. <p> If the fair reachable state space of a protocol is finite, detection of fl Research reported in this paper was supported by NASA Grant No. NAG 5-2648. 1 deadlock and unspecified reception are decidable within the fair reachable state space <ref> [9] </ref>, while unboundedness detection is decidable with finite extension on the fair reachable state space [6]. In [7, 8], we generalized the fair reachability notion to cyclic protocols with n 2 machines, where each machine is deterministic but partially defined and does not have internal transitions.
Reference: [10] <author> D. Sidhu, A. Chung, </author> <title> and T.P. Blumer, "Experience with Formal Methods in Protocol Development," </title> <journal> ACM SIGCOMM, Computer Communication Review, </journal> <volume> Vol. 21, No. 2, </volume> <month> April, </month> <year> 1991, </year> <pages> pp. 81-101. 13 </pages>
Reference-contexts: 1 Introduction It is well-known that state explosion is one of the major obstacles for validating complex protocols modeled as communicating finite state machines. As a result, many techniques have been proposed to tackle this problem (please refer to <ref> [10] </ref> for a survey). It is observed that in most cases, significant state reduction can be achieved if one could eliminate as much redundancy as possible by limiting the amount of interleaving of equivalent execution sequences during state exploration.
References-found: 10

