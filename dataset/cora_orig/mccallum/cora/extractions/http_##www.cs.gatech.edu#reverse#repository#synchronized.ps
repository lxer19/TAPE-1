URL: http://www.cs.gatech.edu/reverse/repository/synchronized.ps
Refering-URL: http://www.cs.gatech.edu/reverse/repos.html
Root-URL: 
Phone: (404) 894-8450  
Title: A REVERSE ENGINEERING METHODOLOGY FOR DATA PROCESSING APPLICATIONS Kit Kamper ABSTRACT m Reverse engineering produces
Author: r Spencer Rugabe S 
Date: 9, 199  
Note: ocumentation. The  
Address: Atlanta, Georgia 30332-0280  
Affiliation: chool of Information and Computer Science  oftware Engineering Research Center Georgia Institute of Technology  
Pubnum: 4March  
Abstract: rom a low-level one. This paper describes a methodology for reverse engineering d that constructs an architectural design for a system from its source code and relate 
Abstract-found: 1
Intro-found: 1
Reference: 5. <author> Frederick P. Brooks, </author> <title> The Mythical Man-Month, </title> <booktitle> Essays on Software Engineering, </booktitle> <publisher> Addison-Wesley 6 Publishing Company, </publisher> <year> 1982. </year> . <title> Ruven Brooks, ``Towards a Theory of the Comprehension of Computer Programs,'' </title> <journal> International 7 Journal of Man-Machine Studies, </journal> <volume> vol. 18, </volume> <pages> pp. 543-554, </pages> <note> 1983. </note> . <author> Elliot J. Chikofsky and James H. </author> <title> Cross II, ``Reverse Engineering and Design Recovery: A Tax 8 onomy,'' </title> <journal> IEEE Software, </journal> <volume> vol. 7, no. 1, </volume> <pages> pp. 13-17, </pages> <note> January 1990. </note> . <author> Philip A. Hausler, Mark G. Pleszkoch, Richard C. Linger, and Alan R. Hevner, </author> <title> ``Using Function 1 Abstraction to Understand Program Behavior,'' </title> <journal> IEEE Software, </journal> <volume> vol. 7, no. 1, </volume> <pages> pp. 55-63, </pages> <month> January 990. </month>
Reference: 9. <author> M. A. Jackson, </author> <title> Principles of Program Design, </title> <publisher> Academic Press, </publisher> <year> 1975. </year> <note> m10. </note> <author> Bret Johnson, Steve Ornburn, and Spencer Rugaber, </author> <title> ``A Quick Tools Strategy for Progra Analysis and Software Maintenance,'' </title> <institution> SRC-TR-92/02, Software Research Center, Georgia Insti 1 tute of Technology, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: Structure of Input and Output File The next stage of the methodology consists of an analysis of the structure of the files used in the S system. The analysis is expressed in terms of Jackson Data Structure diagrams, a part of the Jackson ystem Design Methodology <ref> [9] </ref>. Jackson's methodology has proven to be particularly appropriate for data processing applications such as IMCSRS. A Jackson diagram describes the organization of a file as a tree-structured collection of boxes. s There are three types of boxes indicating three ways in which a file may be decomposed.
Reference: 1. <author> Kit Kamper and Spencer Rugaber, </author> <booktitle> Joint Georgia Tech/BNR, </booktitle> <institution> Inc. Reverse Engineering Research G Project, Software Engineering Research Center, School of Information and Computer Science, eorgia Institute of Technology, </institution> <month> September 18, </month> <year> 1990. </year> <note> ,12. </note> <author> James Martin and Carma McClure, </author> <title> Structured Techniques: The Basis for CASE, </title> <publisher> Revised Edition Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: The campus network - 2 - provided access to a mainframe COBOL compiler. A substantial part of the reverse engineering effort involved the production of graphical represent tations of program structures. For this purpose, the Software Through Pictures CASE tool <ref> [1] </ref>, a produc f the Interactive Development Environments Corporation, was used. 3. ISSUES Part of the charter for the reverse engineering project was to develop a systematic methodology l for the reverse engineering of programs similar to IMCSRS. Because of this specific objective, severa ssues arose. 1.
Reference: 13. <author> D. L. Parnas, </author> <title> ``Information Distribution Aspects of Design Methodology,'' Information Process 1 ing 71, </title> <publisher> North-Holland, </publisher> <year> 1972. </year>
Reference-contexts: On the other hand, there is a significant difference between forward and reverse engineering - regarding the flow of information. Normally, the principle of information hiding <ref> [13] </ref> restricts the publi ation and use of implementation decisions during design. This control facilitates subsequent mainte y nance activities. In the case of reverse engineering, however, it is important that details discovered b ne participant be broadcast to others so that the overall comprehension process is facilitated.
Reference: 4. <author> W. P. Stevens, G. J. Myers, and L. L. Constantine, </author> <title> ``Structured Design,'' </title> <journal> IBM Systems Journal, </journal> <volume> vol. 13, no. 2, </volume> <pages> pp. 115-139, </pages> <year> 1974. </year>
Reference-contexts: The high-level representation pro uced by reverse engineering will serve as the basis of two redesign efforts, one using traditional Func-t tional Decomposition [14], and the other using Object Oriented Design <ref> [4] </ref>. If feasible, two implementa ions will be completed and the results compared for performance, maintainability, and development cost. The reverse engineering was conducted in a research laboratory at the Georgia Institute of Tech-d nology.
References-found: 5

