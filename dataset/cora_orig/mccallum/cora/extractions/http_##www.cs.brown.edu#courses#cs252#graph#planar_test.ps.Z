URL: http://www.cs.brown.edu/courses/cs252/graph/planar_test.ps.Z
Refering-URL: http://www.cs.brown.edu/courses/cs252/graph/home.html
Root-URL: http://www.cs.brown.edu/
Title: Planarity Testing  
Author: Maria Loughlin 
Date: May 17 1993.  
Abstract: This paper presents a characterization of planar graphs and a description of the path-addition and vertex-addition algorithms to test graph planarity. Each algorithm is described in its original implementation and in later implementations which simplify and/or speed-up the original. Extensions to the planarity testing algorithms to produce a planar embedding of a planar graph and to planarize a non-planar graph are also discussed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.A. Bond and U.S.R. Murty, </author> <title> Graph Theory with Applications, </title> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1976 </year>
Reference: [2] <author> F. Harary, </author> <title> Graph Theory, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA 1969 </address>
Reference: [3] <author> T. Nishizeki and N. Chiba, </author> <title> "Planar Graphs: Theory and Algorithms", </title> <booktitle> Annals of Discrete Mathematics 32, </booktitle> <publisher> North Holland, </publisher> <year> 1988 </year>
Reference: [4] <author> J. Hopcroft and R.E. Tarjan, </author> <title> "Efficient Planarity Testing", </title> <journal> J. ACM, </journal> <volume> vol. 2, </volume> <pages> pp. 339-344, </pages> <year> 1976 </year>
Reference-contexts: The algorithms presented in this paper discuss embedding graphs on a plane. However, they can be adapted to test and embed graphs on any surface. 4 The Path Addition Planarity Test The path addition algorithm for planarity testing was published in 1974 by Hopcroft and Tarjan <ref> [4] </ref>, and was the first linear-time planarity testing algorithm. It was simplified and extended to planarize a non-planar graph by Cai, Han and Tarjan (1992) [5]. The approach in each implementation is to construct an embedding of the graph under test by successively adding paths of edges. <p> The algorithm also requires O (n) storage space, since a DFS requires no more than O (it n) storage, and there can only be O (n) entries on the left and right stacks at any time. 4.1.4 Using the Edge-Addition Algorithm to Embed Planar Graphs As described in <ref> [4] </ref>, the edge addition algorithm does not construct a planar representation for G. However, the authors claim that the algorithm can be easily modified to achieve this. The required modification is to construct a dependency graph, D, in which vertices correspond to the paths found in G. <p> These are explained in the following sequence of definitions. For an edge e=(a,b), the segment of e, S (e), is defined in the same way as in <ref> [4] </ref>. That is, if e is a backedge, S (e) is e itself. Otherwise, S (e) is the subgraph of G that consists of e, the subtree rooted at e and all backedges that emanate from vertices of the subtree.
Reference: [5] <author> J. Cai, X. Han, and R.E. Tarjan, </author> <title> "An O(mlogn)-time Algorithm for the Maximal Subgraph Problem", </title> <journal> SIAM J. on Computing, </journal> <note> 1993 (to appear) </note>
Reference-contexts: It was simplified and extended to planarize a non-planar graph by Cai, Han and Tarjan (1992) <ref> [5] </ref>. The approach in each implementation is to construct an embedding of the graph under test by successively adding paths of edges. <p> A coloring of the vertices of D with two colors in a way that satisfies the edge constraints then corresponds to an embedding of G. 20 4.2 The simplified algorithm Cai, Han, and Tarjan presented a simplified version of the path addition algorithm <ref> [5] </ref>. Their algorithm differs from the original implementation in the sequence in which edges are added to the subgraph. Hopcroft and Tarjan added paths to a planar subgraph, when it had been determined that the path itself was planar.
Reference: [6] <author> H. de Fraysseix and P. Rosenstiehl, </author> <title> "A Depth-First-Search Characterization of Planarity", </title> <journal> Annals of Discrete Mathematics, </journal> <volume> vol. 13, </volume> <pages> pp. 75-80, </pages> <year> 1982 </year>
Reference: [7] <author> A. Lempel. S. Even, and I. Cederbaum, </author> <title> "An Algorithm for Planarity Testing of Graphs", in Theory of Graphs, </title> <booktitle> Int. Symposium (Rome 1966), </booktitle> <pages> pp. 215-232, </pages> <publisher> Cordon and Breach, </publisher> <address> New York, </address> <year> 1967 </year>
Reference-contexts: sub (e i ) once e i has been processed * when the algorithm is applied recursively to e i , low1 (e i ) is not changed. 5 The Vertex Addition Planarity Test The vertex addition algorithm for planarity testing was first presented by Lempel, Even and Cederbaum (1966) <ref> [7] </ref>, and improved later by Chiba, Nishizeki, Abe and Ozawa (1985) [8]. In the next sections I describe the original algorithm, which has time complexity O (n 2 ). <p> The t-graphs of the graph of Figure 17 are shown in Figure 18. <ref> [7] </ref> contains a full description of the relationship between a formula and the associated tree T i , in terms of subgraphs, known as 30 sections and shells of T i .
Reference: [8] <author> N. Chiba, T. Nishizeki, S. Abe, and T. Ozawa, </author> <title> "A Linear Algorithm for Embedding Planar Graphs Using PQ-Trees", </title> <journal> J. of Computer and System Sciences, </journal> <volume> vol. 30, no. 1, </volume> <pages> pp. 54-76, </pages> <year> 1985 </year> <month> 39 </month>
Reference-contexts: when the algorithm is applied recursively to e i , low1 (e i ) is not changed. 5 The Vertex Addition Planarity Test The vertex addition algorithm for planarity testing was first presented by Lempel, Even and Cederbaum (1966) [7], and improved later by Chiba, Nishizeki, Abe and Ozawa (1985) <ref> [8] </ref>. In the next sections I describe the original algorithm, which has time complexity O (n 2 ). I then give the details of the modified algorithm, which uses a data structure known as a PQ-tree to reduce the processing time to O (n). <p> The s-t numbering is performed in time O (n). Each well formed formula is generated in time O (n), and n - 1 such formulas must be generated. 32 5.2 The Simplified Algorithm Chiba and Nishizeki <ref> [8] </ref> introduced a data structure known as a PQ-tree to optimize the vertex addition planarity test.
Reference: [9] <author> K. Booth and G. Lueker, </author> <title> "Testing for the Consecutive Ones Property, Interval Graphs, and Graph Planarity Using PQ-Tree Algorithms", </title> <journal> J. of Computer and System Sciences, </journal> <volume> vol. 13, </volume> <pages> pp. 335-379, </pages> <year> 1976 </year>
Reference: [10] <author> T. Ozawa and H. Takahashi, </author> <title> "A Graph-planarization Algorithm and its Application to Random Graphs", Graph Theory and Algorithms, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 108, </volume> <pages> pp. 95-107, </pages> <year> 1981 </year>
Reference-contexts: The PQ tree is reduced at each step, so the resultant graph is planar. 5.3 Planarization A graph planarization algorithm based on PQ-trees was presented by Ozawa and Takahashi <ref> [10] </ref>. The algorithm first applies an s-t numbering to the graph being planarized. Then starting from the first vertex and following the s-t numbering, the algorithm adds a vertex and its outgoing edges to the subgraph already obtained. <p> At the same time, count, for each S-node, the number of S-nodes contained in its children. 2. Compute b, w, h and a for each S-node. The algorithm for this computation is given in <ref> [10] </ref>. 3. The minimum of b, h, and a for the S-root determines the type of the S-root which makes the PQ-tree reducable. Once the type of the S-root is determined, the types of its descendents are sequentially determined.
Reference: [11] <author> T.H. Cormen, C.E. Leiserson and R.L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> MIT Press, McGraw-Hill 1990 40 </publisher>
Reference-contexts: I introduce the terminology of the depth-first search (DFS) in this section. Details of the implementation of a depth first search can be found in <ref> [11] </ref> and are not presented here. If a graph, G, is undirected, a depth-first search of G imposes a direction on each edge of G, given by the direction in which the edge is first traversed during the search. Thus the search converts G into a directed graph G'.
References-found: 11

