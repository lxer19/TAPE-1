URL: http://www.cs.colostate.edu/~ftppub/TechReports/1993/tr-112.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Affiliation: Department of Computer Science Colorado State University  
Abstract: Enhancing Accuracy of Software Reliability Prediction Naixin Li and Yashwant K. Malaiya Technical Report CS-93-112 August 20, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. D. Musa, A. Iannino, K. Okumoto, </author> <title> Software Reliability Measurement, Prediction, Applications, </title> <publisher> McGraw-Hill, </publisher> <year> 1987. </year>
Reference-contexts: This approach, however, has the advantage of being able to predict the general trend of the software reliability improvement during the test phase. fl This work was partly supported by SDIO/IST and monitored by ONR Quite a few SRGMs have been proposed for the dynamic approach <ref> [1, 9, 17, 20] </ref>. <p> Code Size #Bugs Project Type SS1A [2] 100; 000 + 112 O.S. SS1C [2] 100; 000 + 277 O.S. SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 <ref> [1] </ref> N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime <p> SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 <ref> [1] </ref> N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the
Reference: [2] <author> J.D. Musa, </author> <title> "Software Reliability Data", Data and Analysis Center for Software, </title> <institution> Rome Air Development Center, Rome, NY. </institution>
Reference-contexts: Table 1 is a summary of the data sets used in our experiments. Table 1: Software Failure Data Used Data Ref. Code Size #Bugs Project Type SS1A <ref> [2] </ref> 100; 000 + 112 O.S. SS1C [2] 100; 000 + 277 O.S. SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A <p> Table 1 is a summary of the data sets used in our experiments. Table 1: Software Failure Data Used Data Ref. Code Size #Bugs Project Type SS1A <ref> [2] </ref> 100; 000 + 112 O.S. SS1C [2] 100; 000 + 277 O.S. SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] <p> Table 1 is a summary of the data sets used in our experiments. Table 1: Software Failure Data Used Data Ref. Code Size #Bugs Project Type SS1A <ref> [2] </ref> 100; 000 + 112 O.S. SS1C [2] 100; 000 + 277 O.S. SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 <p> Table 1 is a summary of the data sets used in our experiments. Table 1: Software Failure Data Used Data Ref. Code Size #Bugs Project Type SS1A <ref> [2] </ref> 100; 000 + 112 O.S. SS1C [2] 100; 000 + 277 O.S. SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 <p> Table 1: Software Failure Data Used Data Ref. Code Size #Bugs Project Type SS1A <ref> [2] </ref> 100; 000 + 112 O.S. SS1C [2] 100; 000 + 277 O.S. SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A <p> Code Size #Bugs Project Type SS1A <ref> [2] </ref> 100; 000 + 112 O.S. SS1C [2] 100; 000 + 277 O.S. SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A <p> Project Type SS1A <ref> [2] </ref> 100; 000 + 112 O.S. SS1C [2] 100; 000 + 277 O.S. SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime <p> SS1C <ref> [2] </ref> 100; 000 + 277 O.S. SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A <p> <ref> [2] </ref> 100; 000 + 277 O.S. SS2 [2] 100; 000 + 192 Time Sharing SS3 [2] 100; 000 + 278 Word Proc. SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A <p> SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 <ref> [2, 19] </ref> 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the bias that all major models
Reference: [3] <author> A. A. Abdel-Ghaly, P. Y. Chan , B. Littlewood, </author> <title> "Evaluation of Competing Software Reliability Predictions", </title> <journal> IEEE Trans. Reliability, </journal> <volume> Vol. SE-12, </volume> <pages> pp. 950-967, </pages> <month> September </month> <year> 1986. </year>
Reference: [4] <author> S. Brocklehurst, P. Y. Chan, B. Littlewood, J. Snell, </author> <title> "Recalibrating Software Reliability Models", </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 16, </volume> <pages> pp. 456-470, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the bias that all major models have <ref> [4, 11] </ref>. While some specific models have been shown to have better fit or predictability, none of them describes the fault detection process exactly. In addition, the characteristics of individual data sets may vary because of different testing practices. <p> Setting c = 1 results in normal least square; setting c = 0 results in biggest differences in weights. In our experiments we adjusted the value of c from 1 to 0 in step of 0:1 for each data set. 2.4 Adaptive Approach It was noticed <ref> [4, 6, 11, 23] </ref> that some models have a tendency to overestimate or underestimate the reliability, which make them good candidates for the adaptive approach (also called recalibration [4]). Once a model is fitted, it can be used to predict the reliability of software at some future time. <p> the value of c from 1 to 0 in step of 0:1 for each data set. 2.4 Adaptive Approach It was noticed [4, 6, 11, 23] that some models have a tendency to overestimate or underestimate the reliability, which make them good candidates for the adaptive approach (also called recalibration <ref> [4] </ref>). Once a model is fitted, it can be used to predict the reliability of software at some future time. However there is no way to tell exactly how close a prediction will be to the actual value.
Reference: [5] <author> S. Brocklehurst, B. Littlewood, </author> <title> "New Ways to Get Accurate Reliability Measures", </title> <booktitle> IEEE Software July 1992, </booktitle> <pages> pp. 34-40. </pages>
Reference-contexts: 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar <ref> [5] </ref> N/A 397 N/A The second concern is the bias that all major models have [4, 11]. While some specific models have been shown to have better fit or predictability, none of them describes the fault detection process exactly.
Reference: [6] <author> N. Karunanithis, D. Whitley and Y. K. Malaiya, </author> <title> "Prediction of Software Reliability Using a Connectionist Models", </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 18, No. 7, </volume> <month> July </month> <year> 1992, </year> <pages> pp. 563-574. </pages>
Reference-contexts: Setting c = 1 results in normal least square; setting c = 0 results in biggest differences in weights. In our experiments we adjusted the value of c from 1 to 0 in step of 0:1 for each data set. 2.4 Adaptive Approach It was noticed <ref> [4, 6, 11, 23] </ref> that some models have a tendency to overestimate or underestimate the reliability, which make them good candidates for the adaptive approach (also called recalibration [4]). Once a model is fitted, it can be used to predict the reliability of software at some future time.
Reference: [7] <author> Y. K. Malaiya, A. von Mayrhauser, P. K. Srimani, </author> <title> "The Nature of Fault Exposure Ratio", </title> <booktitle> Proc. Int. Symposium on Software Reliability Engineering, </booktitle> <pages> pp. 23-32, </pages> <month> October </month> <year> 1992. </year>
Reference: [8] <author> Y. K. Malaiya, A. von Mayrhauser, P. K. Srimani, </author> <title> "The Constant Per-Fault Hazard Rate Assumption", </title> <booktitle> Proc. 2nd Bellcore/Purdue Symposium on Issues in Software Reliability Estimation, </booktitle> <pages> pp. 1-9, </pages> <year> 1992. </year>
Reference: [9] <author> Y. K. Malaiya, N. Karunanithi, P. Verma, </author> <title> "Predictability Measures for Software Reliability Models", Software Reliability Models, </title> <publisher> IEEE CS Press, </publisher> <pages> pp. 60-65, </pages> <year> 1991. </year>
Reference-contexts: This approach, however, has the advantage of being able to predict the general trend of the software reliability improvement during the test phase. fl This work was partly supported by SDIO/IST and monitored by ONR Quite a few SRGMs have been proposed for the dynamic approach <ref> [1, 9, 17, 20] </ref>. <p> This allows us to obtain the relative error, jp i n j n , corresponding to that fitted model. By averaging the relative error over time points from t 2 to t n , we get the average error (AE) as introduced in <ref> [9, 11] </ref>. We will use AE as a measure to evaluate the predictive accuracy. 2.2 Data Preprocessing As mentioned earlier, the noise in the software failure data affects the predictability of SRGMs. <p> This scheme was experimentally examined in [10], where the fitness of the projected number of defects p n against n at time t n was used as a measure to evaluate the goodness of different group sizes. Here we use the variable-step predictability measure, AE <ref> [9] </ref>, as the measure which is a better predictability measure.
Reference: [10] <author> Y. K. Malaiya, Sumit Sur, N. Karunanithi, Y. Sun, </author> <title> "Implementation considerations for software reliability", </title> <booktitle> 8th Annual Software Reliability Symposium, </booktitle> <month> June 1, </month> <year> 1990. </year>
Reference-contexts: Idealy, a preprocessing step should filter out the short-term variations as noise while preserving the longer term trend. As we would expect some smoothing generally improves predictability but excessive smoothing makes it worse. Malaiya et al <ref> [10] </ref> tried to smooth the noise by data grouping. By grouping a few adjacent failure data points, they noticed that the predictability of SRGMs improves initially as the group size increases, and then gets worse as larger group sizes are involved. <p> This scheme was experimentally examined in <ref> [10] </ref>, where the fitness of the projected number of defects p n against n at time t n was used as a measure to evaluate the goodness of different group sizes. Here we use the variable-step predictability measure, AE [9], as the measure which is a better predictability measure.
Reference: [11] <author> Y. K. Malaiya, N. Karunanithi, Pradeep Verma, </author> <title> "Predictability of software reliability models", </title> <journal> IEEE Trans. Reliability, </journal> <month> Dec., </month> <year> 1992, </year> <pages> pp. 539-546. </pages>
Reference-contexts: 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the bias that all major models have <ref> [4, 11] </ref>. While some specific models have been shown to have better fit or predictability, none of them describes the fault detection process exactly. In addition, the characteristics of individual data sets may vary because of different testing practices. <p> Table 2 is a summary of these models. All of these are two parameter models, and thus can be compared <ref> [11] </ref>. <p> This allows us to obtain the relative error, jp i n j n , corresponding to that fitted model. By averaging the relative error over time points from t 2 to t n , we get the average error (AE) as introduced in <ref> [9, 11] </ref>. We will use AE as a measure to evaluate the predictive accuracy. 2.2 Data Preprocessing As mentioned earlier, the noise in the software failure data affects the predictability of SRGMs. <p> Setting c = 1 results in normal least square; setting c = 0 results in biggest differences in weights. In our experiments we adjusted the value of c from 1 to 0 in step of 0:1 for each data set. 2.4 Adaptive Approach It was noticed <ref> [4, 6, 11, 23] </ref> that some models have a tendency to overestimate or underestimate the reliability, which make them good candidates for the adaptive approach (also called recalibration [4]). Once a model is fitted, it can be used to predict the reliability of software at some future time. <p> Based on our observations, recalibration is specially recommended for use with fixed size grouping. In addition to reducing AE, it makes over-grouping less likely. It is not effective in conjunction with the windowing approach. Best Model and Best Approach Earlier work <ref> [11] </ref> showed that the logarithmic model is superior to the other models, and the exponential model is close to the logarithmic model. It also showed that the power model is very inconsistent across different data set, and that the delayed S-shape model performed the worst.
Reference: [12] <author> P. Verma, Y. K. Malaiya, </author> <title> "In Search of the Best Software Reliability Reliability Model", </title> <booktitle> Proc. 7th Annual Software Reliability Symposium, </booktitle> <month> May </month> <year> 1989, </year> <pages> pp. 76-92. </pages>
Reference-contexts: In addition, the characteristics of individual data sets may vary because of different testing practices. One possible way to overcome this is to emphasize the most recent data points by using a weighted <ref> [12] </ref> parameter estimation. The other approach is to adaptively adjust the projections. The results suggest that using such recalibration improves the accuracy. Finally we have also examined combinations of preprocessing and recalibration. The results show that if near-optimal choices are made, the accuracy can be greatly enhanced.
Reference: [13] <author> M. Chen, A. P. Mathur, V. J. Rego, </author> <title> "Effect of Testing Techniques on Software Reliability Estimates Obtained Using Time-Domain Models", </title> <booktitle> 10th Annual Software Reliability Symposium, </booktitle> <address> Denver, pp.116-123, </address> <year> 1992. </year>
Reference: [14] <author> G. A. Kruger, </author> <title> "Validation and Further Application of Software Reliability Growth Models", Software Reliability Models, </title> <publisher> IEEE, Inc., </publisher> <pages> pp. 66-70, </pages> <year> 1991. </year>
Reference-contexts: 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 <ref> [14] </ref> N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the bias that all major models have [4, 11]. While some specific models have been shown to have better fit or predictability, none of them describes the fault detection process exactly.
Reference: [15] <author> K. Matsumoto, K. Inoue, T. Kikuno and L. Torii, </author> <title> "Experimental Evaluation of Software Reliability Growth Models", </title> <booktitle> IEEE Proc. FTCS-19, </booktitle> <pages> pp. 148-153, </pages> <month> June </month> <year> 1988. </year>
Reference: [16] <author> M. Ohba, </author> <title> "Software reliability analysis models", </title> <journal> IBM Journal of Research and Development, </journal> <volume> Vol. 28, </volume> <pages> pp. 428-443, </pages> <year> 1984. </year>
Reference: [17] <author> M. Xie, M. Zhao, </author> <title> "The Schneidewind Software Reliability Model Revisited", </title> <booktitle> Proc. Int. Symposium on Software Reliability Engineering. </booktitle> <pages> pp. 184-192. </pages>
Reference-contexts: This approach, however, has the advantage of being able to predict the general trend of the software reliability improvement during the test phase. fl This work was partly supported by SDIO/IST and monitored by ONR Quite a few SRGMs have been proposed for the dynamic approach <ref> [1, 9, 17, 20] </ref>.
Reference: [18] <author> N. D. Singpurwalla, R. Soyer, </author> <title> "Assessing software reliability growth using a random coefficient autoregres-sive process and its ramifications", </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. SE-11, pp.1456-1465, </volume> <year> 1985. </year>
Reference: [19] <author> Y. Tohma, K. Tokunaga, S. Nagase, Y. Murata, </author> <title> "Structural approach to the estimation of the number of residual software faults based on the hyper-geometric distribution", </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 15, </volume> <pages> pp. 345-355, </pages> <year> 1989. </year>
Reference-contexts: SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 <ref> [2, 19] </ref> 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the bias that all major models
Reference: [20] <author> Y. Tohma, H. Yamano, M. Ohba, R. </author> <title> Jacoby, "The Estimation of Parameters of the Hyper-Geometric Distribution and its Application to Software Reliability Growth Model", </title> <type> Tech. Report No 900830, </type> <institution> Dept. of Computer Science, Tokyo Institute of Technology, </institution> <year> 1990. </year>
Reference-contexts: This approach, however, has the advantage of being able to predict the general trend of the software reliability improvement during the test phase. fl This work was partly supported by SDIO/IST and monitored by ONR Quite a few SRGMs have been proposed for the dynamic approach <ref> [1, 9, 17, 20] </ref>. <p> 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 <ref> [20] </ref> 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the bias that all major models have [4, 11].
Reference: [21] <author> Y. Tohma, H. Yamano, M. Ohba, R. </author> <title> Jacoby, "Parameter Estimation of the Hyper-Geometric Distribution Model for Real Test/Debug Data", </title> <type> Tech. Report No 901002, </type> <institution> Dept. of Computer Science, Tokyo Institute of Technology, </institution> <year> 1990. </year>
Reference-contexts: 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 [22] 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 <ref> [21] </ref> 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the bias that all major models have [4, 11]. While some specific models have been shown to have better fit or predictability, none of them describes the fault detection process exactly.
Reference: [22] <author> A. Nikora, </author> <type> Personal Communication, </type> <year> 1992. </year>
Reference-contexts: SS4 [2] 100; 000 + 196 O.S. T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 <ref> [22] </ref> 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the bias that all major models have [4, 11]. <p> T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 <ref> [22] </ref> 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the bias that all major models have [4, 11]. <p> T1 [2] 21,700 136 Realtime T2 [1] N/A 86 Realtime T3 [2] N/A 207 N/A T5 [2] 2,445,000 831 Realtime T6 [2] 5,700 73 Commercial T18 [1] N/A 163 Military T40 [2, 19] 180,000 101 Military Proj1 <ref> [22] </ref> 14,000 132 Space System Proj3 [22] N/A 210 N/A Proj4 [22] N/A 196 N/A YT1 [20] 200,000 111 Realtime YT3 [21] 870,000 535 Realtime HP2 [14] N/A 74 N/A Usbar [5] N/A 397 N/A The second concern is the bias that all major models have [4, 11].
Reference: [23] <author> M.R. Lyu, A. Nikora, </author> <title> "Applying Reliability Models More Effectively", </title> <journal> IEEE Software, </journal> <month> July </month> <year> 1992, </year> <pages> pp. 43-52. </pages>
Reference-contexts: Setting c = 1 results in normal least square; setting c = 0 results in biggest differences in weights. In our experiments we adjusted the value of c from 1 to 0 in step of 0:1 for each data set. 2.4 Adaptive Approach It was noticed <ref> [4, 6, 11, 23] </ref> that some models have a tendency to overestimate or underestimate the reliability, which make them good candidates for the adaptive approach (also called recalibration [4]). Once a model is fitted, it can be used to predict the reliability of software at some future time.
References-found: 23

