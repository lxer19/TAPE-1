URL: http://www.cs.utexas.edu/users/vlr/papers/bi_aug.ps
Refering-URL: http://www.cs.utexas.edu/users/vlr/pub.html
Root-URL: 
Title: On Finding a Smallest Augmentation to Biconnect a Graph  
Author: Tsan-sheng Hsu and Vijaya Ramachandran 
Keyword: Key words. algorithm, linear time, graph augmentation, biconnected graph, parallel computation, poly-log time, EREW PRAM  
Web: 68Q20, 68R10, 94C15, 05C40  
Date: March 31, 1992  
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Note: In SIAM JOURNAL ON COMPUTING, 1993. Copyright SIAM  AMS(MOS) subject classifications.  
Abstract: We consider the problem of finding a minimum number of edges whose addition biconnects an undirected graph. This problem has been studied by several other researchers, two of whom presented a linear time algorithm for this problem in an earlier volume of this journal. However that algorithm contains an error which we expose in this paper. We present a corrected linear time algorithm for this problem as well as a new efficient parallel algorithm. The parallel algorithm runs in O(log 2 n) time using a linear number of processors on an EREW PRAM, where n is the number of vertices in the input graph. fl This work was supported in part by NSF Grant CCR-89-10707. This paper appears in SIAM Journal on Computing, 1993, pp. 889-912. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G.-R. Cai and Y.-G. Sun, </author> <title> The minimum augmentation of any graph to a k-edge-connected graph, Networks, </title> <booktitle> 19 (1989), </booktitle> <pages> pp. 151-172. </pages>
Reference-contexts: For the problem of finding a smallest augmentation for a graph to reach a given edge connectivity property, several polynomial time algorithms on undirected graphs, directed graphs and mixed graphs are known. These results can be found in Cai & Sun <ref> [1] </ref>, Eswaran & Tarjan [4], Frank [5], Gusfield [8], Kajitani & Ueno [13], Naor, Gusfield & Martel [15], Ueno, Kajitani & Wada [24], Watanabe [25] and Watanabe & Nakamura [27].
Reference: [2] <author> R. Cole, </author> <title> Parallel merge sort, </title> <journal> SIAM J. Comput., </journal> <volume> 17 (1988), </volume> <pages> pp. 770-785. </pages>
Reference-contexts: In stage 3, the children-permutation procedure can be done in time O (log n) using a linear number of processors on an EREW PRAM by calling the parallel merge sort routine in Cole <ref> [2] </ref> and using the Euler tour technique in Tarjan & Vishkin [23] to restructure and normalize the tree.
Reference: [3] <author> R. Cole and U. Vishkin, </author> <title> Approximate and exact parallel scheduling with applications to list, tree and graph problems, </title> <booktitle> in Proc. 27th Annual IEEE Symp. on Foundations of Comp. Sci., </booktitle> <year> 1986, </year> <pages> pp. 478-491. </pages>
Reference-contexts: Our parallel algorithm can be made to run within the same time bound using a sublinear number of processors by using the algorithm for finding connected components in <ref> [3] </ref> and the algorithm for integer sorting in [9]. 35
Reference: [4] <author> K. P. Eswaran and R. E. Tarjan, </author> <title> Augmentation problems, </title> <journal> SIAM J. Comput., </journal> <volume> 5 (1976), </volume> <pages> pp. 653-665. </pages>
Reference-contexts: We refer to this problem as the smallest augmentation problem. The following results are known for solving the smallest augmentation problem on an undirected graph to satisfy a vertex connectivity requirement. Eswaran & Tarjan <ref> [4] </ref> gave a lower bound on the smallest number of edges for biconnectivity augmentation and proved that the lower bound can be achieved. Rosenthal & Goldner [18] developed a linear time sequential algorithm for finding a smallest augmentation to biconnect a graph. <p> For the problem of finding a smallest augmentation for a graph to reach a given edge connectivity property, several polynomial time algorithms on undirected graphs, directed graphs and mixed graphs are known. These results can be found in Cai & Sun [1], Eswaran & Tarjan <ref> [4] </ref>, Frank [5], Gusfield [8], Kajitani & Ueno [13], Naor, Gusfield & Martel [15], Ueno, Kajitani & Wada [24], Watanabe [25] and Watanabe & Nakamura [27]. <p> Several related problems have been proved to be NP-complete. These results can be found in Eswaran & Tarjan <ref> [4] </ref>, Frank [5], Frederickson & Ja'Ja' [7], Watanabe & Nakamura [26] and Watanabe, Narita & Nakamura [29]. In this paper, we present an efficient parallel algorithm for finding a smallest augmentation to biconnect an undirected graph. <p> However, stage 3 is highly sequential. Most of our discussion is on a corrected algorithm for stage 3 and its parallelization (Section 4.3). We first state a lower bound on the number of edges needed to augment a graph to reach biconnectivity. Theorem 1 Eswaran & Tarjan <ref> [4] </ref>: [Lower bound on the augmentation number] Let G be an undirected graph with h connected components and let q be the number of isolated vertices in blk (G). <p> An example of this is shown in Figure 3. Thus the lower bound cannot be achieved by this method. We now give a corrected version of stage 3 which runs in linear time. Our method is based on the proof of the tight bound given in Eswaran & Tarjan <ref> [4] </ref>, but we add an additional step to handle the case d = 2 (that is, a 1 = 1); the analysis of this case is omitted in [4]. <p> Our method is based on the proof of the tight bound given in Eswaran & Tarjan <ref> [4] </ref>, but we add an additional step to handle the case d = 2 (that is, a 1 = 1); the analysis of this case is omitted in [4]. <p> Because v and w are the possible critical vertices, we reduce the value of d by 1. Thus the block tree remains balanced. Hence we can achieve the lower bound in Eswaran & Tarjan <ref> [4] </ref> by the algorithm. For the case of l = 3, we can reduce blk (G) into a new block tree with two leaves by picking any pair of leaves in blk (G) and connecting them.
Reference: [5] <author> A. Frank, </author> <title> Augmenting graphs to meet edge-connectivity requirements, </title> <booktitle> in Proc. 31th Annual IEEE Symp. on Foundations of Comp. Sci., </booktitle> <year> 1990, </year> <pages> pp. 708-718. </pages>
Reference-contexts: For the problem of finding a smallest augmentation for a graph to reach a given edge connectivity property, several polynomial time algorithms on undirected graphs, directed graphs and mixed graphs are known. These results can be found in Cai & Sun [1], Eswaran & Tarjan [4], Frank <ref> [5] </ref>, Gusfield [8], Kajitani & Ueno [13], Naor, Gusfield & Martel [15], Ueno, Kajitani & Wada [24], Watanabe [25] and Watanabe & Nakamura [27]. Efficient parallel algorithms for finding smallest augmentations for 2-edge connectivity, strong connectivity and making a mixed graph strongly orientable can be found in Soroker [20]. <p> Several related problems have been proved to be NP-complete. These results can be found in Eswaran & Tarjan [4], Frank <ref> [5] </ref>, Frederickson & Ja'Ja' [7], Watanabe & Nakamura [26] and Watanabe, Narita & Nakamura [29]. In this paper, we present an efficient parallel algorithm for finding a smallest augmentation to biconnect an undirected graph.
Reference: [6] <author> H. Frank and W. Chou, </author> <title> Connectivity considerations in the design of survivable networks, </title> <journal> IEEE Trans. on Circuit Theory, </journal> <month> CT-17 </month> <year> (1970), </year> <pages> pp. 486-490. </pages>
Reference-contexts: 1 Introduction The problem of augmenting a graph to reach a certain connectivity requirement by adding edges has important applications in network reliability <ref> [6, 12, 21] </ref> and fault-tolerant computing. One version of the augmentation problem is to augment the input graph to reach a given connectivity requirement by adding a smallest set of edges. We refer to this problem as the smallest augmentation problem.
Reference: [7] <author> G. N. Frederickson and J. Ja'Ja', </author> <title> Approximation algorithms for several graph augmentation problems, </title> <journal> SIAM J. Comput., </journal> <volume> 10 (1981), </volume> <pages> pp. 270-283. </pages>
Reference-contexts: Several related problems have been proved to be NP-complete. These results can be found in Eswaran & Tarjan [4], Frank [5], Frederickson & Ja'Ja' <ref> [7] </ref>, Watanabe & Nakamura [26] and Watanabe, Narita & Nakamura [29]. In this paper, we present an efficient parallel algorithm for finding a smallest augmentation to biconnect an undirected graph. In addition, we have discovered an error in the 2 sequential algorithm of Rosenthal & Goldner [18].
Reference: [8] <author> D. Gusfield, </author> <title> Optimal mixed graph augmentation, </title> <journal> SIAM J. Comput., </journal> <volume> 16 (1987), </volume> <pages> pp. 599-612. </pages>
Reference-contexts: For the problem of finding a smallest augmentation for a graph to reach a given edge connectivity property, several polynomial time algorithms on undirected graphs, directed graphs and mixed graphs are known. These results can be found in Cai & Sun [1], Eswaran & Tarjan [4], Frank [5], Gusfield <ref> [8] </ref>, Kajitani & Ueno [13], Naor, Gusfield & Martel [15], Ueno, Kajitani & Wada [24], Watanabe [25] and Watanabe & Nakamura [27]. Efficient parallel algorithms for finding smallest augmentations for 2-edge connectivity, strong connectivity and making a mixed graph strongly orientable can be found in Soroker [20].
Reference: [9] <author> T. Hagerup, </author> <title> Towards optimal parallel bucket sorting, </title> <journal> Information and Computation, </journal> <volume> 75 (1987), </volume> <pages> pp. 39-51. </pages>
Reference-contexts: Our parallel algorithm can be made to run within the same time bound using a sublinear number of processors by using the algorithm for finding connected components in [3] and the algorithm for integer sorting in <ref> [9] </ref>. 35
Reference: [10] <author> D. Harel and R. E. Tarjan, </author> <title> Fast algorithms for finding nearest common ancestors, </title> <journal> SIAM J. Comput., </journal> <volume> 13 (1984), </volume> <pages> pp. 338-355. </pages>
Reference-contexts: A vertex of the largest degree can be found in constant time and the position, in the array of linked list, of a vertex in the path found in step 6 can also be updated in constant time. To implement step 6, algorithms in Harel & Tarjan <ref> [10] </ref> and Schieber & Vishkin [19] are used to find the path P between two vertices v and w in O (jP j) time. By Fact 1, the number of times a vertex is 13 visited is no more than its degree.
Reference: [11] <author> T.-s. Hsu and V. Ramachandran, </author> <title> A linear time algorithm for triconnectivity augmentation, </title> <booktitle> in Proc. 32th Annual IEEE Symp. on Foundations of Comp. Sci., </booktitle> <year> 1991, </year> <pages> pp. 548-559. </pages>
Reference-contexts: Watanabe & Nakamura [26, 28] gave an O (n (n + m) 2 ) time sequential algorithm for finding a smallest augmentation to triconnect a graph with n vertices and m edges. Hsu & Ramachandran <ref> [11] </ref> developed a linear time algorithm for this problem. There is no polynomial time algorithm known for finding a smallest augmentation to k-vertex-connect a general graph, for k &gt; 3. There is also no efficient parallel algorithm known to find a smallest augmentation to k-vertex-connect a graph for k 2.
Reference: [12] <author> S. P. Jain and K. Gopal, </author> <title> On network augmentation, </title> <journal> IEEE Trans. on Reliability, </journal> <month> R-35 </month> <year> (1986), </year> <pages> pp. 541-543. </pages>
Reference-contexts: 1 Introduction The problem of augmenting a graph to reach a certain connectivity requirement by adding edges has important applications in network reliability <ref> [6, 12, 21] </ref> and fault-tolerant computing. One version of the augmentation problem is to augment the input graph to reach a given connectivity requirement by adding a smallest set of edges. We refer to this problem as the smallest augmentation problem.
Reference: [13] <author> Y. Kajitani and S. Ueno, </author> <title> The minimum augmentation of a directed tree to a k-edge--connected directed graph, Networks, </title> <booktitle> 16 (1986), </booktitle> <pages> pp. 181-197. </pages>
Reference-contexts: These results can be found in Cai & Sun [1], Eswaran & Tarjan [4], Frank [5], Gusfield [8], Kajitani & Ueno <ref> [13] </ref>, Naor, Gusfield & Martel [15], Ueno, Kajitani & Wada [24], Watanabe [25] and Watanabe & Nakamura [27]. Efficient parallel algorithms for finding smallest augmentations for 2-edge connectivity, strong connectivity and making a mixed graph strongly orientable can be found in Soroker [20].
Reference: [14] <author> R. M. Karp and V. Ramachandran, </author> <title> Parallel algorithms for shared-memory machines, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, ed., </editor> <publisher> North Holland, </publisher> <year> 1990, </year> <pages> pp. 869-941. </pages>
Reference-contexts: The algorithm runs in O (log 2 n) time using a linear number of processors on an EREW PRAM, where n is the number of vertices in the input graph. (For more on PRAM models and PRAM algorithms see Karp & Ramachandran <ref> [14] </ref>.) The algorithmic notation used is from Tarjan [22] and Ramachandran [17]. We enclose comments between `ffl' and `flg'.
Reference: [15] <author> D. Naor, D. Gusfield, and C. Martel, </author> <title> A fast algorithm for optimally increasing the edge-connectivity, </title> <booktitle> in Proc. 31th Annual IEEE Symp. on Foundations of Comp. Sci., </booktitle> <year> 1990, </year> <pages> pp. 698-707. </pages>
Reference-contexts: These results can be found in Cai & Sun [1], Eswaran & Tarjan [4], Frank [5], Gusfield [8], Kajitani & Ueno [13], Naor, Gusfield & Martel <ref> [15] </ref>, Ueno, Kajitani & Wada [24], Watanabe [25] and Watanabe & Nakamura [27]. Efficient parallel algorithms for finding smallest augmentations for 2-edge connectivity, strong connectivity and making a mixed graph strongly orientable can be found in Soroker [20].
Reference: [16] <author> D. Nath and N. Maheshwari, </author> <title> Parallel algorithms for the connected components and minimal spanning tree problems, </title> <journal> Information Processing Letters, </journal> <volume> 14 (1982), </volume> <pages> pp. 7-11. </pages>
Reference-contexts: Given an undirected graph, we can find its block graph in time O (log 2 n) using a linear number of processors on an EREW PRAM by the parallel algorithm in Tarjan & Vishkin 33 [23] for finding biconnected components and using some procedures in Nath & Maheshwari <ref> [16] </ref>. The parallel versions of stage 1 and stage 2 are described in Section 4.1 and Section 4.2, respectively.
Reference: [17] <author> V. Ramachandran, </author> <title> Parallel open ear decomposition with applications to graph bi-connectivity and triconnectivity, in Synthesis of Parallel Algorithms, </title> <editor> J. H. Reif, ed., </editor> <publisher> Morgan-Kaufmann, </publisher> <year> 1992, </year> <note> to appear. </note>
Reference-contexts: in O (log 2 n) time using a linear number of processors on an EREW PRAM, where n is the number of vertices in the input graph. (For more on PRAM models and PRAM algorithms see Karp & Ramachandran [14].) The algorithmic notation used is from Tarjan [22] and Ramachandran <ref> [17] </ref>. We enclose comments between `ffl' and `flg'. We use the following pfor statement for executing a loop in parallel. pfor iterator ! statement list rofp The effect of this statement is to perform the statement list in parallel for each value of the iterator.
Reference: [18] <author> A. Rosenthal and A. Goldner, </author> <title> Smallest augmentations to biconnect a graph, </title> <journal> SIAM J. Comput., </journal> <volume> 6 (1977), </volume> <pages> pp. 55-66. </pages>
Reference-contexts: Eswaran & Tarjan [4] gave a lower bound on the smallest number of edges for biconnectivity augmentation and proved that the lower bound can be achieved. Rosenthal & Goldner <ref> [18] </ref> developed a linear time sequential algorithm for finding a smallest augmentation to biconnect a graph. Watanabe & Nakamura [26, 28] gave an O (n (n + m) 2 ) time sequential algorithm for finding a smallest augmentation to triconnect a graph with n vertices and m edges. <p> In this paper, we present an efficient parallel algorithm for finding a smallest augmentation to biconnect an undirected graph. In addition, we have discovered an error in the 2 sequential algorithm of Rosenthal & Goldner <ref> [18] </ref>. We first give a corrected linear time se-quential algorithm for the problem. Our efficient parallel algorithm is based on this corrected sequential algorithm. However we have to utilize several insights into the problem in order to derive the parallel algorithm. <p> A line denotes an edge. A path in the block graph is represented by a thick dashed line while a polygon represents a collection of subtrees. These notations are shown in Figure 1. We also need the following definitions. Part of Definition 4 is from <ref> [18] </ref>. Definition 1 A vertex v of blk (G) is called massive if and only if v is a c-vertex with d (v)1 &gt; d l 2 e. <p> Definition 4 Let v be a c-vertex of blk (G). We call those components of blk (G) v which contain only one vertex of degree 1 in blk (G) v-chains <ref> [18] </ref>. A degree-1 vertex of blk (G) in a v-chain is called a v-chain leaf. 3 Main Lemmas In this section, we present results that will be crucial in the development of our efficient parallel algorithm. <p> The following fact for obtaining blk (G 0 ) from blk (G) is given in Rosenthal & Goldner <ref> [18] </ref>. Fact 1 Given a graph G and its block tree blk (G), adding an edge between two leaves u and v of blk (G) creates a cycle C. <p> We can find at least two c-vertices, y 0 and z 0 , connected to w, but not in P . The same reasoning used in case 1 can be followed to prove this case. 2 4 The Algorithm The original linear time sequential algorithm in Rosenthal & Goldner <ref> [18] </ref> consists of three stages. However, we have discovered an error in stage 3 of the algorithm in [18]. We present a corrected version of that stage of the algorithm in [18]. Our parallel algorithm follows the structure of the corrected sequential algorithm. <p> The same reasoning used in case 1 can be followed to prove this case. 2 4 The Algorithm The original linear time sequential algorithm in Rosenthal & Goldner <ref> [18] </ref> consists of three stages. However, we have discovered an error in stage 3 of the algorithm in [18]. We present a corrected version of that stage of the algorithm in [18]. Our parallel algorithm follows the structure of the corrected sequential algorithm. The first two stages are easy to parallelize and we describe them in Section 4.1 and Section 4.2. However, stage 3 is highly sequential. <p> followed to prove this case. 2 4 The Algorithm The original linear time sequential algorithm in Rosenthal & Goldner <ref> [18] </ref> consists of three stages. However, we have discovered an error in stage 3 of the algorithm in [18]. We present a corrected version of that stage of the algorithm in [18]. Our parallel algorithm follows the structure of the corrected sequential algorithm. The first two stages are easy to parallelize and we describe them in Section 4.1 and Section 4.2. However, stage 3 is highly sequential. <p> Then at least maxfd + h 2,d l 2 e + qg edges are needed to biconnect G, if q + l &gt; 1. 4.1 Stage 1 Theorem 2 Rosenthal & Goldner <ref> [18] </ref> Let G be an undirected graph with h connected components. We can connect G by adding h1 edges, which we may choose to be incident on non-cutpoint vertices in blocks corresponding to leaves or isolated vertices in blk (G). <p> Let b v and b w be the two b-vertices in the block graph whose corresponding blocks contain v and w, respectively. We create edges from c v to b v and from c w to b w . 4.2 Stage 2 Theorem 3 Rosenthal & Goldner <ref> [18] </ref> Let G be connected and let v fl be a massive vertex in G. Let ffi = d 1 d l 2 e. Then we can find at least 2ffi + 2 v fl -chains. Let Q be the set of v-chain leaves. <p> Let Q be the set of v-chain leaves. By adding 2k; k ffi edges to connect 2k + 1 vertices of Q, we can reduce both the degree of the massive vertex and the number of leaves in the block tree by k. Corollary 5 Rosenthal & Goldner <ref> [18] </ref> Let G be connected and let v fl be a massive vertex in G. Let ffi = d 1 d l 2 e and let Q be the set of v fl -chain leaves. <p> Thus the degree of any critical vertex decreases by 1 and the tree remains balanced. In Rosenthal & Goldner <ref> [18] </ref>, blk (G) is rooted at a b-vertex b fl . A path P is found that contains two leaves y and z such that if blk (G) contains two critical vertices v and w, P 10 The left tree is blk (G) rooted at B. <p> Proof: The block tree can be built in O (n + m) time. The total number of vertices in the block tree is O (n). A linear time bucket sort routine is used to sort degrees of c-vertices and b-vertices. The data structure in Rosenthal & Goldner <ref> [18] </ref> can be used to keep track of current degrees of vertices in blk (G). Vertices in blk (G) with the same degree are kept in a linked list. An array is used to store the first element of each linked list. <p> Our sequential algorithm corrects an error in an earlier algorithm proposed for this problem in Rosenthal & Goldner <ref> [18] </ref>. Our parallel algorithm is new, and it runs in O (log 2 n) time using a linear number of processors on an EREW PRAM. Although the parallel algorithm follows the overall structure of our sequential algorithm, the parallelization of some of the steps required new insights into the problem.
Reference: [19] <author> B. Schieber and U. Vishkin, </author> <title> On finding lowest common ancestors: Simplification and parallelization, </title> <booktitle> in Proc. 3rd Aegean Workshop on Computing, </booktitle> <volume> vol. </volume> <publisher> LNCS #319, Springer-Verlag, </publisher> <year> 1988, </year> <pages> pp. 111-123. </pages>
Reference-contexts: To implement step 6, algorithms in Harel & Tarjan [10] and Schieber & Vishkin <ref> [19] </ref> are used to find the path P between two vertices v and w in O (jP j) time. By Fact 1, the number of times a vertex is 13 visited is no more than its degree. <p> All of these procedures can be done in O (log n) time using a linear number of processors on an EREW PRAM by using the Euler technique in Tarjan & Vishkin [23] and procedures in Schieber & Vishkin <ref> [19] </ref>. From Corollary 6, Corollary 9 and Corollary 11, we know that algorithm par bca removes at least a quarter of the leaves in the current block graph during each execution of the do loop. Initially, the number of leaves is at most n.
Reference: [20] <author> D. Soroker, </author> <title> Fast parallel strong orientation of mixed graphs and related augmentation problems, </title> <journal> Journal of Algorithms, </journal> <volume> 9 (1988), </volume> <pages> pp. 205-223. </pages>
Reference-contexts: Efficient parallel algorithms for finding smallest augmentations for 2-edge connectivity, strong connectivity and making a mixed graph strongly orientable can be found in Soroker <ref> [20] </ref>. Another version of the problem is to augment a graph, with a weight assigned to each edge, to meet a connectivity requirement using a set of edges with a minimum total cost. Several related problems have been proved to be NP-complete.
Reference: [21] <author> K. Steiglitz, P. Weiner, and D. J. Kleitman, </author> <title> The design of minimum-cost survivable networks, </title> <journal> IEEE Trans. on Circuit Theory, </journal> <month> CT-16 </month> <year> (1969), </year> <pages> pp. 455-460. </pages>
Reference-contexts: 1 Introduction The problem of augmenting a graph to reach a certain connectivity requirement by adding edges has important applications in network reliability <ref> [6, 12, 21] </ref> and fault-tolerant computing. One version of the augmentation problem is to augment the input graph to reach a given connectivity requirement by adding a smallest set of edges. We refer to this problem as the smallest augmentation problem.
Reference: [22] <author> R. E. Tarjan, </author> <title> Data Structures and Network Algorithms, </title> <publisher> SIAM Press, </publisher> <address> Philadelphia, PA, </address> <year> 1983. </year>
Reference-contexts: The algorithm runs in O (log 2 n) time using a linear number of processors on an EREW PRAM, where n is the number of vertices in the input graph. (For more on PRAM models and PRAM algorithms see Karp & Ramachandran [14].) The algorithmic notation used is from Tarjan <ref> [22] </ref> and Ramachandran [17]. We enclose comments between `ffl' and `flg'. We use the following pfor statement for executing a loop in parallel. pfor iterator ! statement list rofp The effect of this statement is to perform the statement list in parallel for each value of the iterator.
Reference: [23] <author> R. E. Tarjan and U. Vishkin, </author> <title> An efficient parallel biconnectivity algorithm, </title> <journal> SIAM J. Comput., </journal> <volume> 14 (1985), </volume> <pages> pp. 862-874. </pages>
Reference-contexts: Given blk (G), stage 1 is easy to parallelize in time O (log n) optimally on an EREW PRAM by using the Euler tour technique described in Tarjan & Vishkin <ref> [23] </ref>. The block graph can be updated by creating a new b-vertex b and two new c-vertices c v and c w for 9 each new edge (v,w). We create edges from b to c v and b to c w . <p> Given an undirected graph, we can find its block graph in time O (log 2 n) using a linear number of processors on an EREW PRAM by the parallel algorithm in Tarjan & Vishkin 33 <ref> [23] </ref> for finding biconnected components and using some procedures in Nath & Maheshwari [16]. The parallel versions of stage 1 and stage 2 are described in Section 4.1 and Section 4.2, respectively. <p> In stage 3, the children-permutation procedure can be done in time O (log n) using a linear number of processors on an EREW PRAM by calling the parallel merge sort routine in Cole [2] and using the Euler tour technique in Tarjan & Vishkin <ref> [23] </ref> to restructure and normalize the tree. <p> All of these procedures can be done in O (log n) time using a linear number of processors on an EREW PRAM by using the Euler technique in Tarjan & Vishkin <ref> [23] </ref> and procedures in Schieber & Vishkin [19]. From Corollary 6, Corollary 9 and Corollary 11, we know that algorithm par bca removes at least a quarter of the leaves in the current block graph during each execution of the do loop.
Reference: [24] <author> S. Ueno, Y. Kajitani, and H. Wada, </author> <title> Minimum augmentation of a tree to a k-edge-connected graph, Networks, </title> <booktitle> 18 (1988), </booktitle> <pages> pp. 19-25. 37 </pages>
Reference-contexts: These results can be found in Cai & Sun [1], Eswaran & Tarjan [4], Frank [5], Gusfield [8], Kajitani & Ueno [13], Naor, Gusfield & Martel [15], Ueno, Kajitani & Wada <ref> [24] </ref>, Watanabe [25] and Watanabe & Nakamura [27]. Efficient parallel algorithms for finding smallest augmentations for 2-edge connectivity, strong connectivity and making a mixed graph strongly orientable can be found in Soroker [20].
Reference: [25] <author> T. Watanabe, </author> <title> An efficient way for edge-connectivity augmentation, </title> <type> Tech. Rep. </type> <institution> ACT--76-UILU-ENG-87-2221, Coordinated Science lab., University of Illinois, Urbana, IL, </institution> <year> 1987. </year>
Reference-contexts: These results can be found in Cai & Sun [1], Eswaran & Tarjan [4], Frank [5], Gusfield [8], Kajitani & Ueno [13], Naor, Gusfield & Martel [15], Ueno, Kajitani & Wada [24], Watanabe <ref> [25] </ref> and Watanabe & Nakamura [27]. Efficient parallel algorithms for finding smallest augmentations for 2-edge connectivity, strong connectivity and making a mixed graph strongly orientable can be found in Soroker [20].
Reference: [26] <author> T. Watanabe and A. Nakamura, </author> <title> On a smallest augmentation to triconnect a graph, </title> <type> Tech. Rep. </type> <institution> C-18, Department of Applied Mathematics, faculty of Engineering, Hiroshima University, </institution> <address> Higashi-Hiroshima, 724, Japan, </address> <year> 1983. </year> <note> revised 1987. </note>
Reference-contexts: Eswaran & Tarjan [4] gave a lower bound on the smallest number of edges for biconnectivity augmentation and proved that the lower bound can be achieved. Rosenthal & Goldner [18] developed a linear time sequential algorithm for finding a smallest augmentation to biconnect a graph. Watanabe & Nakamura <ref> [26, 28] </ref> gave an O (n (n + m) 2 ) time sequential algorithm for finding a smallest augmentation to triconnect a graph with n vertices and m edges. Hsu & Ramachandran [11] developed a linear time algorithm for this problem. <p> Several related problems have been proved to be NP-complete. These results can be found in Eswaran & Tarjan [4], Frank [5], Frederickson & Ja'Ja' [7], Watanabe & Nakamura <ref> [26] </ref> and Watanabe, Narita & Nakamura [29]. In this paper, we present an efficient parallel algorithm for finding a smallest augmentation to biconnect an undirected graph. In addition, we have discovered an error in the 2 sequential algorithm of Rosenthal & Goldner [18].
Reference: [27] <author> T. Watanabe and A. Nakamura, </author> <title> Edge-connectivity augmentation problems, </title> <journal> J. Comp. System Sci., </journal> <volume> 35 (1987), </volume> <pages> pp. 96-144. </pages>
Reference-contexts: These results can be found in Cai & Sun [1], Eswaran & Tarjan [4], Frank [5], Gusfield [8], Kajitani & Ueno [13], Naor, Gusfield & Martel [15], Ueno, Kajitani & Wada [24], Watanabe [25] and Watanabe & Nakamura <ref> [27] </ref>. Efficient parallel algorithms for finding smallest augmentations for 2-edge connectivity, strong connectivity and making a mixed graph strongly orientable can be found in Soroker [20].
Reference: [28] <author> T. Watanabe and A. Nakamura, </author> <title> 3-connectivity augmentation problems, </title> <booktitle> in Proc. of 1988 IEEE Int'l Symp. on Circuits and Systems, </booktitle> <year> 1988, </year> <pages> pp. 1847-1850. </pages>
Reference-contexts: Eswaran & Tarjan [4] gave a lower bound on the smallest number of edges for biconnectivity augmentation and proved that the lower bound can be achieved. Rosenthal & Goldner [18] developed a linear time sequential algorithm for finding a smallest augmentation to biconnect a graph. Watanabe & Nakamura <ref> [26, 28] </ref> gave an O (n (n + m) 2 ) time sequential algorithm for finding a smallest augmentation to triconnect a graph with n vertices and m edges. Hsu & Ramachandran [11] developed a linear time algorithm for this problem.
Reference: [29] <author> T. Watanabe, T. Narita, and A. Nakamura, </author> <title> 3-edge-connectivity augmentation problems, </title> <booktitle> in Proc. of 1989 IEEE Int'l Symp. on Circuits and Systems, </booktitle> <year> 1989, </year> <pages> pp. 335-338. 38 </pages>
Reference-contexts: Several related problems have been proved to be NP-complete. These results can be found in Eswaran & Tarjan [4], Frank [5], Frederickson & Ja'Ja' [7], Watanabe & Nakamura [26] and Watanabe, Narita & Nakamura <ref> [29] </ref>. In this paper, we present an efficient parallel algorithm for finding a smallest augmentation to biconnect an undirected graph. In addition, we have discovered an error in the 2 sequential algorithm of Rosenthal & Goldner [18]. We first give a corrected linear time se-quential algorithm for the problem.
References-found: 29

