URL: http://www.cs.umd.edu/users/cml/work/pubs/1993-survey.ps.gz
Refering-URL: http://www.cs.umd.edu/users/cml/work/pubs/
Root-URL: 
Email: Email: lott@informatik.uni-kl.de  
Title: Process and measurement support in SEEs  
Author: Christopher M. Lott 
Date: 4, October 1993.  
Note: Appeared in ACM SIGSOFT Software Engineering Notes, v. 18, n.  
Address: 67653 Kaiserslautern, Germany  
Affiliation: Arbeitsgruppe Software Engineering Universitat Kaiserslautern  
Abstract: Software evolution processes are well-known to be difficult to manage. Some software engineering environments (SEEs) can use models of these processes to guide their enaction. A few of these SEEs can additionally collect and use measurement data to guide processes precisely. Measurement-based guidance is intended to improve the manageability of the guided processes. This paper contributes an overview of many process-centered SEEs, with special emphasis on those that support the systematic collection of process, product, and resource data for the purpose of process guidance. 
Abstract-found: 1
Intro-found: 1
Reference: [ABGM92] <author> P. Armenise, S. Bandinelli, C. Ghezzi, and A. Morzenti. </author> <title> Software process lan-guages: Survey and assessment. </title> <booktitle> In Proceedings of the Fourth Conference on Software Engineering and Knowledge Engineering, </booktitle> <address> Capri, Italy, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: These models greatly improve people's understanding of the processes in which they are involved. 1 Curtis et al. provide a comprehensive introduction to process modeling in [CKO92]. Armenise et al. survey process representation languages in <ref> [ABGM92] </ref>. Once built, a comprehensive project plan guides practitioners in performing their process. Guidance means determining what activities can be performed at each point in time and detecting deviations from the plan, to name two examples.
Reference: [ACM90] <author> V. Ambriola, P. Ciancarini, and C. Montangero. </author> <title> Software process enactment in Oikos. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <address> 15(6):183192, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Classification facets for the SLCSE system are user scale: family; process scale: code; guidance type: rule-based; process support: variable; measurement support: none; exec. paradigm: rules. Oikos. Ambriola et al. discuss their work on the Oikos system in <ref> [ACM90] </ref>. This system explores the possibility of using the blackboard metaphor (problem-solving model) for enacting processes. Processes are specified using extended, shared pro- log (ESP) and are each represented in the system as agents. These agents cooperate based on data written on the system's blackboard to invoke tools as necessary.
Reference: [AO93] <author> Selma Arbaoui and Flavio Oquendo. </author> <title> Software process modelling: </title> <booktitle> Where are we? In Slides presented at the Second International Conference on the Software Process, </booktitle> <month> February </month> <year> 1993. </year>
Reference-contexts: A software engineering environment (SEE) is a set of tools that supports designing and redesigning, coding, debugging, testing and retesting, etc. A process-centered SEE is an SEE with a process engine that manages process knowledge and guides users <ref> [AO93] </ref>. This paper surveys selected process-centered SEEs, with special emphasis on those that support the systematic collection of process, product, and resource data for guiding processes. Section 2 reviews models and taxonomies for software engineering environments.
Reference: [Bas85] <author> Victor R. Basili. </author> <title> Quantitative evalua-tion of software methodology. </title> <booktitle> In Proceedings of the First Pan-Pacific Computer Conference, </booktitle> <address> Melbourne, Australia, </address> <month> September </month> <year> 1985. </year>
Reference-contexts: Guidance means determining what activities can be performed at each point in time and detecting deviations from the plan, to name two examples. Guidance and intellectual control may be further enhanced by collecting and using measurement data to guide processes <ref> [Bas85] </ref>. For example, data may be gathered to measure the cost of a testing activity or to characterize product defects. When used in conjunction with baselines that help people interpret the data, measurement data can guide a process far more precisely than coarse-grained information such as schedule milestones.
Reference: [BLRV92] <author> Alfred Br ockers, Christopher M. Lott, H. Dieter Rombach, and Martin Verlage. </author> <title> MVP Language Report. </title> <type> Technical Report 229/92, </type> <institution> Fachbereich Informatik, Universitat Kaiserslautern, </institution> <month> December </month> <year> 1992. </year> <note> Appeared in ACM SIGSOFT Software Engineering Notes, </note> <month> October </month> <year> 1993. </year> <month> 13 </month>
Reference-contexts: Table 2: System Classifications Appeared in ACM SIGSOFT Software Engineering Notes, October 1993. 12 resources <ref> [BLRV92] </ref>. The MVP-S execution environment supports the instantiation and execution of these models for the purposes of analysis, simulation, and project guidance. A primary goal of the project is the explicit representation, collection, and use of measurement data.
Reference: [BR88] <author> Victor R. Basili and H. Dieter Rombach. </author> <title> The TAME Project: Towards improvementoriented software envi-ronments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-14(6):758773, </volume> <month> June </month> <year> 1988. </year>
Reference-contexts: data collection, improving intellectual control over the process, and improving the process it <p>- 1 If these models are built in order to execute them on a computer, the modeling activity is sometimes called process pro <br>- gramming. 1 Appeared in ACM SIGSOFT Software Engineering Notes, October 1993. 2 self <ref> [BR88, Rom89] </ref>. Collecting and using measurement data can be assisted and supported in many ways by a software engineering environment. A software engineering environment (SEE) is a set of tools that supports designing and redesigning, coding, debugging, testing and retesting, etc. <p> Software engineering models (process and product) and quality models are both represented in this system and are linked together. Quality models are expressed using Basili's G/Q/M paradigm <ref> [BR88] </ref>. The linkage between the two types of models uses metrics that are defined as part of the G/Q/M document and slots for metric values that are part of the software engineering models.
Reference: [Bro78] <author> Frederick P. Brooks, Jr. </author> <title> The Mythical Man-Month. </title> <publisher> Addison Wesley, </publisher> <year> 1978. </year>
Reference-contexts: 1 Introduction A problem that has long faced software practitioners is that software development and maintenance processes are difficult to manage <ref> [Bro78] </ref>. One idea towards improving intellectual control over software processes is guiding them using explicit project plans [Dow86, Ost87]. To build the foundation for guidance, formal models of software evolution processes and software products are developed and integrated into a comprehensive project plan.
Reference: [CKO92] <author> Bill Curtis, Marc I. Kellner, and Jim Over. </author> <title> Process modeling. </title> <journal> Communications of the ACM, </journal> <volume> 35(9):7590, </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: These models greatly improve people's understanding of the processes in which they are involved. 1 Curtis et al. provide a comprehensive introduction to process modeling in <ref> [CKO92] </ref>. Armenise et al. survey process representation languages in [ABGM92]. Once built, a comprehensive project plan guides practitioners in performing their process. Guidance means determining what activities can be performed at each point in time and detecting deviations from the plan, to name two examples.
Reference: [Cle88] <author> Geoffrey M. Clemm. </author> <title> The Workshop system a practical knowledge-based software environment. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 13(5):55 64, </volume> <month> November </month> <year> 1988. </year>
Reference-contexts: Classification facets for IStar are user scale: city; process scale: code-and-interface; guidance type: procedural (according to contracts); process support: variable; measurement support: fixed-collection (time); execution paradigm: other. The Workshop system. Clemm discusses the Workshop system, an environment for supporting programming teams, in <ref> [Cle88] </ref>. Processes and products are represented using a specialized knowledge- representation language, SE-KRL, and this knowledge is stored in a shared database. SE-KRL production rules are manipulated using an expert system to automate mechanical software development tasks and to guide process participants.
Reference: [DEFH87] <author> Susan A. Dart, Robert J. Ellison, Peter H. Feiler, and A. Nico Habermann. </author> <booktitle> Software development environ-ments. IEEE Computer, </booktitle> <pages> pages 1828, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Process automation: no human creativity is required to perform the process and the process guidance system can accomplish the work with <br>- out human intervention. SDE Taxonomy. Dart et al. present an SDE taxonomy that divides them into language-centered, structure-oriented, toolkit, and method-based environments <ref> [DEFH87] </ref>. Language-centered environments provide a tool set suited only to one programming language. Structure-oriented environments allow users to enter program-language code in terms of language constructs using a syntax-directed editor. Toolkit environments offer a collection of tools for programming-in-the-large but define no process for using them.
Reference: [DG90] <author> Wolfgang Deiters and Volker Gruhn. </author> <title> Managing software processes in the environment MELMAC. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <address> 15(6):193205, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Classification facets for the Oikos system are user scale: individual; process scale: code; guidance type: rule-based; process support: variable; measurement support: none; execution paradigm: Prolog rules. MELMAC. Deiters and Gruhn describe the MEL- MAC system in <ref> [DG90, DG92] </ref>. (This work was extended in the Prism system as described in [MGDS90].) Processes are modeled, analyzed, and enacted using a comprehensive internal representation named FUNSOFT nets, which are an extension of Petri nets. All necessary information about the process is stored in the internal representation.
Reference: [DG92] <author> Wolfgang Deiters and Volker Gruhn. </author> <title> The FUNSOFT Net approach to soft-ware process management. </title> <type> Technical Report 2/92, </type> <institution> Fraunhofer Institute for Software and Systems Engineering, University of Dortmund, </institution> <address> Dortmund, Germany, </address> <year> 1992. </year>
Reference-contexts: Classification facets for the Oikos system are user scale: individual; process scale: code; guidance type: rule-based; process support: variable; measurement support: none; execution paradigm: Prolog rules. MELMAC. Deiters and Gruhn describe the MEL- MAC system in <ref> [DG90, DG92] </ref>. (This work was extended in the Prism system as described in [MGDS90].) Processes are modeled, analyzed, and enacted using a comprehensive internal representation named FUNSOFT nets, which are an extension of Petri nets. All necessary information about the process is stored in the internal representation.
Reference: [Dow86] <author> Mark Dowson, </author> <title> editor. </title> <booktitle> Proceedings of the Third International Software Process Workshop. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1986. </year>
Reference-contexts: 1 Introduction A problem that has long faced software practitioners is that software development and maintenance processes are difficult to manage [Bro78]. One idea towards improving intellectual control over software processes is guiding them using explicit project plans <ref> [Dow86, Ost87] </ref>. To build the foundation for guidance, formal models of software evolution processes and software products are developed and integrated into a comprehensive project plan.
Reference: [Dow87] <author> Mark Dowson. </author> <title> Integrated project sup-port with ISTAR. </title> <journal> IEEE Software, </journal> <volume> 4:6 15, </volume> <month> November </month> <year> 1987. </year>
Reference-contexts: IStar. The IStar system is an environment that links tools, a common object base, and a common 2 The criteria are approximate because it is difficult to find exact matches. user interface <ref> [Dow87] </ref>. IStar takes a contractual approach in which subtasks in a project are contracted to others. Contracts specify task interfaces. The set of contracts embodies a single, specific process model through a work breakdown structure. Techni- cal support for coding tasks is supplied by language- specific workbenches.
Reference: [DV92] <author> W. Decker and Jon Valett. </author> <title> Software management environment (SME) concepts and architecture. </title> <type> Technical Report SEL-89-103, </type> <institution> NASA Goddard Space Flight Center, Greenbelt MD 20771, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: For example, production rules are arguably more flexible than a procedural process description. The guidance provided by an environment can be based on a knowledge base of rules as in [MS90], procedures coded into a process program [Sut90], or measurement data as compared to prior baselines <ref> [DV92] </ref>. Process support (facet 4). Process support is classified as none, fixed, or variable. In other words, there is no support for defining a process, a process is predefined, or the process is variable. Measurement support (facet 5). <p> Classification facets for the ES-TAME system are user scale: individual; process scale: code; guidance type: measurement; process support: variable; measurement support: variable-guidance; execution paradigm: rules. Software Management Environment. The Soft- ware Management Environment (SME) was developed in the Software Engineering Laboratory (SEL) of the NASA Goddard Space Flight Center <ref> [DV92] </ref>. This system was developed primarily for use by managers and greatly simplifies the work of comparing collected data with baselines. Baselines are derived using data and experience gathered from prior projects.
Reference: [Fer93] <author> Christer Fernstrom. </author> <title> Process WEAVER: Adding process support to UNIX. </title> <booktitle> In Proceedings of the Second International Conference on the Software Process, </booktitle> <pages> pages 1226. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> February </month> <year> 1993. </year>
Reference-contexts: Comprehensive coverage of these two perspectives is extremely difficult for any modeling or guidance approach to achieve. Hooks into the real world. Fernstr om categorizes the coupling between a process guidance system and the corresponding real-world process according to the following four levels <ref> [Fer93] </ref>. The influence of human creativity is progressively restricted between levels. All of the environments surveyed here are coupled at levels 1 or 2. 1. Loosely coupled: no connection exists between the system and the real-world process. <p> Classification facets for the MERLIN system are user scale: family; process scale: code-and- interface; guidance type: rules; process support: variable; measurement support: none; execution paradigm: rules. Process WEAVER. Fernstrom et al. describe work on the Process WEAVER system in the context of the Eureka Software Factory project in <ref> [FNO92, Fer93] </ref>. Process structure and product flow is represented using graphical editors and process behavior is represented using a Petri-net derivative. The internal modeling language is completely hidden from users by views; these are tools that display and manipulate the internal representation.
Reference: [FNO92] <author> Christer Fernstrom, Kjell-Hakan Narfelt, and Lennart Ohlsson. </author> <booktitle> Software fac-tory principles, architecture, and experi-ments. IEEE Software, </booktitle> <address> 9:3644, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: Classification facets for the MERLIN system are user scale: family; process scale: code-and- interface; guidance type: rules; process support: variable; measurement support: none; execution paradigm: rules. Process WEAVER. Fernstrom et al. describe work on the Process WEAVER system in the context of the Eureka Software Factory project in <ref> [FNO92, Fer93] </ref>. Process structure and product flow is represented using graphical editors and process behavior is represented using a Petri-net derivative. The internal modeling language is completely hidden from users by views; these are tools that display and manipulate the internal representation.
Reference: [HL88] <author> Karen Huff and Viktor Lesser. </author> <title> A plan based intelligent assistant that supports the software development process. </title> <editor> In Peter Henderson, editor, </editor> <booktitle> Proceedings of the Third ACM SIGSOFT/SIGPLAN Symposium on Practical Software Development Environments, </booktitle> <pages> pages 97 106, </pages> <month> November </month> <year> 1988. </year> <note> Appeared as ACM SIGSOFT Software Engineering Notes 13(5), </note> <month> November </month> <year> 1988. </year>
Reference-contexts: Classification facets for Workshop are user scale: family; process scale: code; guidance type: rule- based; process support: variable; measurement support: none; execution paradigm: production rules. Appeared in ACM SIGSOFT Software Engineering Notes, October 1993. 6 GRAPPLE. Huff and Lesser describe a plan- based assistant for software development work in <ref> [HL88, Huf88] </ref>. This system implements machine-mediated work, a system in which a machine monitors a user's command stream and offers feedback in real time. Sophisticated rules for describing user actions are defined and stored in a truth maintenance system.
Reference: [Huf88] <author> Karen Huff. </author> <title> Probing limits to au-tomation: </title> <booktitle> Towards deeper process mod Appeared in ACM SIGSOFT Software Engineering Notes, </booktitle> <month> October </month> <year> 1993. </year> <note> 14 els. In Colin Tully, </note> <editor> editor, </editor> <booktitle> Proceedings of the Fourth International Software Process Workshop, </booktitle> <pages> pages 7981, </pages> <month> May </month> <year> 1988. </year> <note> Appeared as ACM SIGSOFT Software Engineering Notes 14(4), </note> <month> June </month> <year> 1989. </year>
Reference-contexts: Classification facets for Workshop are user scale: family; process scale: code; guidance type: rule- based; process support: variable; measurement support: none; execution paradigm: production rules. Appeared in ACM SIGSOFT Software Engineering Notes, October 1993. 6 GRAPPLE. Huff and Lesser describe a plan- based assistant for software development work in <ref> [HL88, Huf88] </ref>. This system implements machine-mediated work, a system in which a machine monitors a user's command stream and offers feedback in real time. Sophisticated rules for describing user actions are defined and stored in a truth maintenance system.
Reference: [KFP88] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent as-sistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <volume> 5:4049, </volume> <month> May </month> <year> 1988. </year>
Reference-contexts: No system that integrates all of the infrastructure parts has yet been built. Classification facets for Arcadia are user scale: city; process scale: code-and-interface; guidance type: procedural; process support: variable; measurement support: variable-guidance; execution paradigm: procedural. Marvel. Kaiser et al. describe the Marvel system in <ref> [KFP88] </ref>. Users work on their code artifacts through a Marvel interface, which allows the system to be aware of the user's activities. Processes are modeled using the Marvel Strategy Language (MSL) as strategies (really rules) with a precondition and postcondition.
Reference: [KMKT91] <author> Shinji Kusumoto, Ken-ichi Matsumoto, Tohru Kikuno, and Koji Torii. </author> <title> On a measurement environment for con-trolling software development activi-ties. </title> <journal> IEICE Transactions, </journal> <volume> E74(5):1051 1054, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: Despite some inflexibility, these systems represent visible progress towards realizing flexible collection and use of measurement data to guide processes. Ginger. Matsumoto et al. document a process- improvement framework based on modeling and measuring processes that is supported by the Gin- ger system <ref> [Mat90, KMKT91, MKKT93] </ref>. Ginger is an environment that collects nontrivial product measures automatically and uses these measures as simple process guidance. Process data, such as the amount of computer-usage time and the commands that were executed, are collected by the supporting operating system.
Reference: [Leh87] <author> M. M. Lehman. </author> <title> Process models, process programs, </title> <booktitle> programming sup-port. In Proceedings of the Ninth International Conference on Software Engineering, </booktitle> <pages> pages 1416. </pages> <publisher> ACM Press, </publisher> <year> 1987. </year>
Reference-contexts: He repeats arguments made by [Ost87] in favor, namely that representing and managing a process explicitly is the only way to understand it. Ar- guments made against this assumption by <ref> [Leh87] </ref> include the one that because a process can not be understood completely in advance, embedding it in an environment makes no sense. This paper assumes that guiding a process with a computer system will yield measurable benefits and is therefore a sound idea.
Reference: [Lon93] <author> Jaques Lonchamp. </author> <title> A structured con-ceptual and terminological framework for software process engineering. </title> <booktitle> In Proceedings of the Second International Conference on the Software Process, </booktitle> <pages> pages 4153. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> February </month> <year> 1993. </year>
Reference-contexts: Section 5 discusses work done on SEEs that use measurement data to guide a process, including a few that have not been widely disseminated. Section 6 classifies the systems considered in this paper and offers some conclusions. I have attempted to use terminology consistent with that given in <ref> [Lon93] </ref>. 2 SEE Models and Taxonomies Notkin identifies a basic assumption of process- guidance systems in [Not88], where he questions whether tying an environment to a process is a sound idea.
Reference: [LT87] <author> M. M. Lehman and W. M. Turski. </author> <title> Essential properties of IPSEs. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <address> 12(1):5255, </address> <month> January </month> <year> 1987. </year>
Reference-contexts: First, a software development environment, although often called an SEE, is usually limited to a set of coding, compiling, and debugging tools. Such systems are labeled integrated coding support environments (ICSEs) in <ref> [LT87] </ref>, and process guidance is generally beyond their scope. Second, the extent to which coding-support tools are smoothly integrated with each other, although important to environment users, is not a concern here. IPSE versus ICSE. <p> Second, the extent to which coding-support tools are smoothly integrated with each other, although important to environment users, is not a concern here. IPSE versus ICSE. Lehman and Turski identify essential properties of an integrated process support environment as compared to an integrated coding support environment <ref> [LT87] </ref>. They assert: An IPSE is an embodiment of software technology in a collection of tools for cap <p>- ture, representation, control, refinement, transformation and other manipulation of project related information.
Reference: [Mat90] <author> Ken-ichi Matsumoto. </author> <title> A programmer performance model and its measure-ment environment. </title> <type> PhD thesis, </type> <institution> Osaka University, </institution> <address> Toyonaka, Osaka 560, Japan, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Despite some inflexibility, these systems represent visible progress towards realizing flexible collection and use of measurement data to guide processes. Ginger. Matsumoto et al. document a process- improvement framework based on modeling and measuring processes that is supported by the Gin- ger system <ref> [Mat90, KMKT91, MKKT93] </ref>. Ginger is an environment that collects nontrivial product measures automatically and uses these measures as simple process guidance. Process data, such as the amount of computer-usage time and the commands that were executed, are collected by the supporting operating system.
Reference: [MGDS90] <author> Nazim Madhavji, Volker Gruhn, Wolfgang Deiters, and Wilhelm Schafer. </author> <title> PRISM = methodology + processoriented environment. </title> <booktitle> In Proceedings of the Twelfth International Conference on Software Engineering, </booktitle> <pages> pages 277 288, </pages> <year> 1990. </year>
Reference-contexts: Classification facets for the Oikos system are user scale: individual; process scale: code; guidance type: rule-based; process support: variable; measurement support: none; execution paradigm: Prolog rules. MELMAC. Deiters and Gruhn describe the MEL- MAC system in [DG90, DG92]. (This work was extended in the Prism system as described in <ref> [MGDS90] </ref>.) Processes are modeled, analyzed, and enacted using a comprehensive internal representation named FUNSOFT nets, which are an extension of Petri nets. All necessary information about the process is stored in the internal representation.
Reference: [MKKT93] <author> Ken-ichi Matsumoto, Shinji Kusumoto, Tohru Kikuno, and Koji Torii. </author> <title> A new framework of measuring software de-velopment processes. </title> <booktitle> In Proceedings of the First International Software Metrics Symposium, </booktitle> <pages> pages 108118. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: Despite some inflexibility, these systems represent visible progress towards realizing flexible collection and use of measurement data to guide processes. Ginger. Matsumoto et al. document a process- improvement framework based on modeling and measuring processes that is supported by the Gin- ger system <ref> [Mat90, KMKT91, MKKT93] </ref>. Ginger is an environment that collects nontrivial product measures automatically and uses these measures as simple process guidance. Process data, such as the amount of computer-usage time and the commands that were executed, are collected by the supporting operating system.
Reference: [MS90] <author> Peiwei Mi and Walt Scacchi. </author> <title> A knowledge-based environment for mod-eling and simulating software engi-neering processes. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(3):283294, </volume> <month> September </month> <year> 1990. </year>
Reference-contexts: Type of Guidance (facet 3). Internal SEE process knowledge representation critically affects what type of guidance can be provided. For example, production rules are arguably more flexible than a procedural process description. The guidance provided by an environment can be based on a knowledge base of rules as in <ref> [MS90] </ref>, procedures coded into a process program [Sut90], or measurement data as compared to prior baselines [DV92]. Process support (facet 4). Process support is classified as none, fixed, or variable. In other words, there is no support for defining a process, a process is predefined, or the process is variable. <p> Classification facets for the MELMAC system are user scale: family; process scale: code-and- interface; guidance type: procedural and rule-based; process support: variable; measurement support: none; execution paradigm: Petri net. Articulator. Mi and Scacchi introduce their system for modeling and simulating software engineering processes, called the Articulator, in <ref> [MS90] </ref>. This system uses knowledge-engineering techniques to understand process and is focused on managing, or articulating, conflicts as they arise during process en- action.
Reference: [Not88] <author> David Notkin. </author> <booktitle> The relationship be-tween software development environ-ments and the software process. ACM SIGSOFT Software Engineering Notes, </booktitle> <address> 13(5):107109, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: Section 6 classifies the systems considered in this paper and offers some conclusions. I have attempted to use terminology consistent with that given in [Lon93]. 2 SEE Models and Taxonomies Notkin identifies a basic assumption of process- guidance systems in <ref> [Not88] </ref>, where he questions whether tying an environment to a process is a sound idea. He repeats arguments made by [Ost87] in favor, namely that representing and managing a process explicitly is the only way to understand it.
Reference: [OB92] <author> Markku Oivo and Victor R. Basili. </author> <title> Representing software engineering mod-els: The TAME goal oriented ap-proach. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(10):886898, </volume> <month> October </month> <year> 1992. </year>
Reference-contexts: Classification facets for the Amadeus system are user scale: approximately family; process scale: code-and-interface; guidance type: measurement; process support: variable; measurement support: variable-guidance; execution paradigm: rules. ES-TAME. Oivo and Basili developed the ES- TAME system as a proof of concept of their experience base idea <ref> [OB92] </ref>. Their experience base is a repository for organizational knowledge about devel Appeared in ACM SIGSOFT Software Engineering Notes, October 1993. 10 oping and maintaining software products, which is expressed in terms of process, product, and quality models.
Reference: [Ost87] <author> Leon Osterweil. </author> <title> Software processes are software too. </title> <booktitle> In Proceedings of the Appeared in ACM SIGSOFT Software Engineering Notes, </booktitle> <month> October </month> <year> 1993. </year> <booktitle> 15 Ninth International Conference on Software Engineering, </booktitle> <pages> pages 213. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction A problem that has long faced software practitioners is that software development and maintenance processes are difficult to manage [Bro78]. One idea towards improving intellectual control over software processes is guiding them using explicit project plans <ref> [Dow86, Ost87] </ref>. To build the foundation for guidance, formal models of software evolution processes and software products are developed and integrated into a comprehensive project plan. <p> I have attempted to use terminology consistent with that given in [Lon93]. 2 SEE Models and Taxonomies Notkin identifies a basic assumption of process- guidance systems in [Not88], where he questions whether tying an environment to a process is a sound idea. He repeats arguments made by <ref> [Ost87] </ref> in favor, namely that representing and managing a process explicitly is the only way to understand it. Ar- guments made against this assumption by [Leh87] include the one that because a process can not be understood completely in advance, embedding it in an environment makes no sense.
Reference: [PK91] <author> Dewane E. Perry and Gail E. Kaiser. </author> <title> Models of software development en-vironments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(3):283295, </volume> <month> March </month> <year> 1991. </year>
Reference-contexts: Other systems prototype the needed functionality in a monolithic system; all focus on the tool and user- support layers. Models of SDEs. Perry and Kaiser model SDEs by refining them into structures, mechanisms, and policies <ref> [PK91] </ref>. Structures are the representation of the software being developed. Simple files are common, but some environments use sophisticated object management systems to capture code. Mechanisms are tools and languages that work on the structures. One example mechanism is a tool in the UNIX environment. <p> A policy that is enforced cannot be violated from within the environment. No systems surveyed here enforce policies. Sociological metaphor. Perry and Kaiser also offer a sociological metaphor to classify the scope of an environment as seen by its users <ref> [PK91] </ref>. This metaphor is composed of the individual, family, city, and state models. Individual scale means programming anarchy: the individual does whatever is necessary to construct software. In the family scale model (project team), people work somewhat autonomously and the environment enforces coordination. <p> Table 1 summarizes the facets and their possible values. This scheme is used in Section 4 to characterize the SEEs surveyed there. User scale (facet 1). This facet reuses the sociological metaphor from <ref> [PK91] </ref> and has as possible values individual, family, city, and state. Process scale (facet 2). Process scale specifies whether the environment focuses on supporting code evolution activities, activities that are not performed using a computer, or both. This facet borrows from the IPSE vs.
Reference: [PR88] <author> Maria H. Penedo and William E. Riddle. </author> <title> Guest editor's introduction to soft-ware engineering environment archi-tectures. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(6):689695, </volume> <month> June </month> <year> 1988. </year>
Reference-contexts: All environments surveyed in this paper are method-based. SEE Architectures. Penedo and Riddle identify four layers of support in a software engineering environment and use the expression virtual machine to describe the aggregation <ref> [PR88] </ref>. Moving from the lowest to the highest, these are the hardware and operating system layer, the environment support layer, they tool/capability layer, and the project user support layer. Of the systems surveyed in this paper, only Arcadia structures itself in a number of layers.
Reference: [PS90] <author> Adam A. Porter and Richard W. Selby. </author> <title> Empirically guided software develop-ment using metric-based classification trees. </title> <journal> IEEE Software, </journal> <volume> 7(2):4654, </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: Upon receiving an event, if the guard is true, the Amadeus system executes the specified action. These actions might collect data, analyze data, or provide feedback based on the analysis. The Amadeus system was built to support classification trees, a method for multivariate data analysis <ref> [PS90] </ref>. One goal of classification tree analysis (CTA) is to predict properties; for example, an above-average number of defects in a code module.
Reference: [PSW92] <author> Burkhard Peuschel, Wilhelm Schafer, and Stefan Wolf. </author> <title> A knowledgebased software development environ-ment supporting cooperative work. </title> <journal> International Journal of Software Engineering & Knowledge Engineering, </journal> <volume> 2(1):79106, </volume> <year> 1992. </year>
Reference-contexts: Classification facets for the Articulator system are user scale: individual; process scale: interface; guidance type: none (simulation only); process support: variable; measurement support: none; execution paradigm: state machine. MERLIN. Peuschel et al. present MERLIN, a knowledge-based environment for supporting cooperative work, in <ref> [PSW92] </ref>. Process aspects such as roles, binding of users to roles, object definitions, and user responsibilities are expressed using Prolog- style rules.
Reference: [Rom89] <author> H. Dieter Rombach. </author> <title> The role of mea-surement in ISEEs. </title> <editor> In Carlo Ghezzi and John McDermid, editors, </editor> <booktitle> Proceedings of the Second European Software Engineering Conference, </booktitle> <pages> pages 6585. </pages> <note> Lecture Notes in Computer Science Nr. 387, SpringerVerlag, </note> <month> September </month> <year> 1989. </year>
Reference-contexts: data collection, improving intellectual control over the process, and improving the process it <p>- 1 If these models are built in order to execute them on a computer, the modeling activity is sometimes called process pro <br>- gramming. 1 Appeared in ACM SIGSOFT Software Engineering Notes, October 1993. 2 self <ref> [BR88, Rom89] </ref>. Collecting and using measurement data can be assisted and supported in many ways by a software engineering environment. A software engineering environment (SEE) is a set of tools that supports designing and redesigning, coding, debugging, testing and retesting, etc.
Reference: [RS88] <author> Jayashree Ramanathan and Soumitra Sarkar. </author> <title> Providing customized assis-tance for software lifecycle approaches. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(6):749757, </volume> <month> June </month> <year> 1988. </year>
Reference-contexts: Marvel is limited to controlling processes involving tool invocations. Classification facets for Marvel are user scale: family; process scale: code; guidance type: rule- based; process support: variable; measurement support: none; execution paradigm: prod. rules. Development Assistant. Ramanathan and Sar- kar discuss their software development assistant in <ref> [RS88] </ref>. Models written in their conceptual modeling language (CML) describe processes, data, tools, and users specific to a project; these models guide the assistant. Rules are used to specify pre- and post- conditions for processes. This system provides active support for tool use in an environment.
Reference: [SJM + 89] <author> Richard W. Selby, Greg James, Kent Madsen, Joan Mahoney, Adam A. Porter, and Douglas C. Schmidt. </author> <title> Classification tree analysis using the Amadeus measurement and empirical analysis system. </title> <booktitle> In Proceedings of the Fourteenth Annual Software Engineering Workshop. </booktitle> <institution> NASA Goddard Space Flight Center, Greenbelt MD 20771, </institution> <year> 1989. </year>
Reference-contexts: Classification facets for the Ginger system are user scale: individual; process scale: code; guidance type: measurement; process support: fixed; measurement support: fixed-guidance; execution paradigm: other. Amadeus. Selby, Porter and others report on the Amadeus system in <ref> [SJM + 89, SPSB91] </ref>. Their effort separates the concerns of measurement from those of process guidance, and focuses solely on providing measurement services for a process-guidance system. Amadeus offers extremely flexible ways to specify the collection and evaluation of measurement data.
Reference: [SPSB91] <author> Richard W. Selby, Adam A. Porter, Doug C. Schmidt, and Jim Berney. </author> <title> Metric-driven analysis and feedback systems for enabling empirically guided software development. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Software Engineering, </booktitle> <pages> pages 288298. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: Classification facets for the Ginger system are user scale: individual; process scale: code; guidance type: measurement; process support: fixed; measurement support: fixed-guidance; execution paradigm: other. Amadeus. Selby, Porter and others report on the Amadeus system in <ref> [SJM + 89, SPSB91] </ref>. Their effort separates the concerns of measurement from those of process guidance, and focuses solely on providing measurement services for a process-guidance system. Amadeus offers extremely flexible ways to specify the collection and evaluation of measurement data.
Reference: [Str88] <author> Tom Strelich. </author> <title> The software life cycle support environment. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 13(5):35 44, </volume> <month> November </month> <year> 1988. </year>
Reference-contexts: SLCSE. Strelich describes the software life cycle support environment (SLCSE), a system for software development that supports the definition and use of a development methodology <ref> [Str88] </ref>. The author de Appeared in ACM SIGSOFT Software Engineering Notes, October 1993. 7 scribes this system as a framework that can be used to create environments tailored to the needs of a project.
Reference: [Sut90] <author> Stanley M. Sutton, Jr. APPL/A: </author> <title> A Prototype Language for SoftwareProcess Programming. </title> <type> PhD thesis, </type> <institution> University of Colorado, Boulder, CO, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: For example, production rules are arguably more flexible than a procedural process description. The guidance provided by an environment can be based on a knowledge base of rules as in [MS90], procedures coded into a process program <ref> [Sut90] </ref>, or measurement data as compared to prior baselines [DV92]. Process support (facet 4). Process support is classified as none, fixed, or variable. In other words, there is no support for defining a process, a process is predefined, or the process is variable. Measurement support (facet 5). <p> The consortium's stated goal is to provide flexible, extensible software environments by separating variant from infrastructure parts. Work on the infrastructure issues of process programming languages, object management, and user interface management is sketched. In this effort, process models are encoded in APPL/A, a language for process programming <ref> [Sut90] </ref>. No system that integrates all of the infrastructure parts has yet been built. Classification facets for Arcadia are user scale: city; process scale: code-and-interface; guidance type: procedural; process support: variable; measurement support: variable-guidance; execution paradigm: procedural. Marvel. Kaiser et al. describe the Marvel system in [KFP88].
Reference: [TBC + 88] <author> Richard N. Taylor, Frank C. Belz, Lori A. Clarke, Leon Osterweil, Richard W. Selby, Jack C. Wileden, Alexander L. Wolf, and Michal Young. </author> <title> Foundations for the arcadia environ-ment architecture. </title> <editor> In Peter Henderson, editor, </editor> <booktitle> Proceedings of the Third ACM Appeared in ACM SIGSOFT Software Engineering Notes, </booktitle> <month> October </month> <year> 1993. </year> <booktitle> 16 SIGSOFT/SIGPLAN Symposium on Practical Software Development Environments, </booktitle> <pages> pages 113, </pages> <month> November </month> <year> 1988. </year> <note> Appeared as ACM SIGSOFT Software Engineering Notes 13(5), </note> <month> November </month> <year> 1988. </year>
Reference-contexts: Classification facets for GRAP- PLE are user scale: individual; process scale: code; guidance type: rule-based; process support: variable; measurement support: none; execution paradigm: production rules (AI planning paradigm). Arcadia. Taylor et al. introduce the work of the Ar- cadia consortium in <ref> [TBC + 88] </ref>. The consortium's stated goal is to provide flexible, extensible software environments by separating variant from infrastructure parts. Work on the infrastructure issues of process programming languages, object management, and user interface management is sketched.
Reference: [Tul86] <author> Colin J. Tully. </author> <title> Software process mod-els and iteration. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> Proceedings of the Third International Software Process Workshop, </booktitle> <pages> pages 1821, </pages> <address> Beckenridge, Colorado, USA, </address> <month> November </month> <year> 1986. </year>
Reference-contexts: This paper focuses on IPSEs. In-the-Small versus In-the-Large. A fundamental difference among process modeling approaches and guidance systems is whether they support modeling in-the-small or modeling in-the-large <ref> [Tul86] </ref>. As Tully writes, this is a distinction in perspective rather than a distinction among project size. The Appeared in ACM SIGSOFT Software Engineering Notes, October 1993. 3 in-the-small approach focuses on fine-grained, easily automatable activities of short duration. One example is compiling code modules.
Reference: [TVJ92] <author> Graham Tate, June Verner, and Ross Jeffery. </author> <title> CASE: A testbed for modeling, </title> <booktitle> measurement and management. Communications of the ACM, </booktitle> <address> 35(4):6572, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Measurement-based guidance seems to hold the most promise for SEEs for several reasons. First, an environment can collect some data unobtrusively and other data directly from users without much effort. This argument is further elaborated in <ref> [TVJ92] </ref>. Sec- ond, the data values can be compared to prior base- lines and the results can then be displayed to process participants rapidly.
References-found: 44

