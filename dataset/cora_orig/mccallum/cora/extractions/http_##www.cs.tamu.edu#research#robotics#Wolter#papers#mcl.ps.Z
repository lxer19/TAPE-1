URL: http://www.cs.tamu.edu/research/robotics/Wolter/papers/mcl.ps.Z
Refering-URL: http://www.cs.tamu.edu/research/robotics/Wolter/asp/bib.html
Root-URL: http://www.cs.tamu.edu
Title: Mating Constraint Languages for Assembly Sequence Planning  
Author: Jan Wolter, Sugato Chakrabarty and Jungfu Tsao 
Address: College Station, TX 77843-3112  
Affiliation: Department of Computer Science Texas A&M University  
Abstract: This paper describes and analyzes the most commonly used form of constraint languages for assembly planning: mating constraint languages. These constraints are typically composed of relations asserting that a certain pair of parts must be mated before some other pair of parts may be mated. However, there are many significant differences between the forms of these constraints used by different authors. This paper proves that certain of these forms, such as those based on less-than relations and those based on less-than-or-equal relations, are equivalent and that either type of expression can be translated into the other. It also provides several theorems concerning which types of mating constraint expressions are able to represent sets of different kinds of plans. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Daniel F. Baldwin, Thomas E. Abell, Man-Cheung Max Lui, Thomas L. De Fazio, and Daniel E. Whitney. </author> <title> An integrated computer aid for generating and evaluating assembly sequences for mechanical products. </title> <journal> IEEE J. of Robotics and Automation, </journal> <volume> 7(1) </volume> <pages> 78-94, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: before parts C and D are joined and parts A and C are joined before parts A and D are joined. could be written as i j i j Constraint languages of this type have played a central role in the assembly planning systems described by De Fazio and Whitney <ref> [1, 2, 3] </ref>, Huang and Lee [8, 9], Lin and Chang [10], and Roy, Bannerjee and Liu [12]. Furthermore, Homem de Mello and Sanderson have proven some forms of mating constraint expressions correct and complete for some classes of assembly plans [7]. <p> All plans produced by their system were required to be coherent for 14 the contact graph. A later version of this system incorporated several changes, including a new semi-automated system to generate constraints of a new form <ref> [1] </ref>. These were still strictly graph-restricted, but consisted exclusively of a conjunction of compressed relations with only conjunctions of operations on both sides. Huang and Lee describe an assembly planner based on expressions which use both and &lt; constraints and need not be strictly graph-restricted.
Reference: [2] <author> Thomas L. De Fazio and Daniel E. Whitney. </author> <title> Simplified generation of all mechanical assembly sequences. </title> <journal> IEEE J. of Robotics and Automation, </journal> <volume> RA-3(6):640-658, </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: before parts C and D are joined and parts A and C are joined before parts A and D are joined. could be written as i j i j Constraint languages of this type have played a central role in the assembly planning systems described by De Fazio and Whitney <ref> [1, 2, 3] </ref>, Huang and Lee [8, 9], Lin and Chang [10], and Roy, Bannerjee and Liu [12]. Furthermore, Homem de Mello and Sanderson have proven some forms of mating constraint expressions correct and complete for some classes of assembly plans [7]. <p> They start all separate, and end all combined. The five transitions in the state sequence correspond to the 7 five operations in the tree. This model of an assembly plan has been used both by De Fazio and Whitney <ref> [2] </ref> and by Huang and Lee [9]. Normally when two sets of parts are mated, one set is moved while the other is held in place. Neither the state sequence nor the partial assembly tree makes this distinction for any of their operations. <p> Note that all these constraint languages are designed to list the conditions that must all be satisfied by a valid plan, so they are all primarily conjunctive expressions. De Fazio and Whitney described a semi-automated planning system that is based on mating constraint expressions <ref> [2] </ref>. The relations they described were strictly restricted to the contact graph and consisted exclusively of &lt; relations. They were written in compressed form as a pure conjunction of relations which always contained a single operation on either the left or right side.
Reference: [3] <author> Thomas L. De Fazio and Daniel E. Whitney. </author> <title> Correction to "simplified generation of all mechanical assembly sequences". </title> <journal> IEEE J. of Robotics and Automation, </journal> <volume> RA-4(6):705-708, </volume> <month> December </month> <year> 1988. </year>
Reference-contexts: before parts C and D are joined and parts A and C are joined before parts A and D are joined. could be written as i j i j Constraint languages of this type have played a central role in the assembly planning systems described by De Fazio and Whitney <ref> [1, 2, 3] </ref>, Huang and Lee [8, 9], Lin and Chang [10], and Roy, Bannerjee and Liu [12]. Furthermore, Homem de Mello and Sanderson have proven some forms of mating constraint expressions correct and complete for some classes of assembly plans [7].
Reference: [4] <author> Richard L. Hoffman. </author> <title> Automated assembly in a CSG domain. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 210-215, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: For example, the latch assembly in figure 2 cannot be assembled unless part C is temporarily inserted fully into the slot in part B while 5 part A is inserted. Plans which leave parts in non-goal positions while other parts are moved are called nonmonotone plans. Hoffman <ref> [4] </ref> and Tsao and Wolter [14] have done significant work on the generation of such nonmonotone plans. However, only monotone plans will be considered in this paper.
Reference: [5] <author> Luiz Homem de Mello. </author> <title> Task Sequence Planning for Robotic Assembly. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, Electrical and Computer Engineering Dept, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: The simplest type of assembly plan that has been used is the partial assembly tree shown in figure 5a. This is the type of plan generated by Homem de Mello and Sanderson's system <ref> [5, 6, 13] </ref>. Each leaf of the partial assembly tree corresponds to an individual part and each internal node corresponds to an operation that combines the two sets of parts designated by its two children. We call the assembled sets of parts resulting from each operation partial assemblies.
Reference: [6] <author> Luiz Homem de Mello and Arthur Sanderson. </author> <title> A correct and complete algorithm for the generations of mechanical assembly sequences. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 7(2) </volume> <pages> 228-240, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: The simplest type of assembly plan that has been used is the partial assembly tree shown in figure 5a. This is the type of plan generated by Homem de Mello and Sanderson's system <ref> [5, 6, 13] </ref>. Each leaf of the partial assembly tree corresponds to an individual part and each internal node corresponds to an operation that combines the two sets of parts designated by its two children. We call the assembled sets of parts resulting from each operation partial assemblies.
Reference: [7] <author> Luiz Homem de Mello and Arthur Sanderson. </author> <title> Representations of mechanical assembly sequences. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 7(2) </volume> <pages> 211-227, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Furthermore, Homem de Mello and Sanderson have proven some forms of mating constraint expressions correct and complete for some classes of assembly plans <ref> [7] </ref>. However, the constraint languages used by different authors differ in important details. <p> are defined for any partial assembly tree because one operation will always be an ancestor of, or be equivalent to, the other. 13 Following the convention used by both De Fazio and Whitney and Huang and Lee (note, however, that the notation used by Homem de Mello and Sanderson in <ref> [7] </ref> is different), we will use a compressed notation for compound mating relations. Let E 1 , E 2 and E 3 be operations, or logical expressions whose literals are operations. <p> Homem de Mello and Sanderson have shown that any set of state sequences can be represented by a constraint expression formed of &lt; and relations <ref> [7] </ref>. We present a stronger theorem, that also ensures that a graph-restricted expression exists. <p> These results are summarized in table 1. The fact that general constraints can represent arbitrary sets of state sequences was shown by Homen de Mello and Sanderson <ref> [7] </ref>. The other results are new in this paper. In addition it has been shown that graph-restricted expression of all types can be translated into equivalent expressions written purely with &lt; or relations, which are still restricted to the same graph.
Reference: [8] <author> Y. F. Huang and C. S. George Lee. </author> <title> Precedence knowledge in feature mating operation assembly planning. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 216-221, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: joined and parts A and C are joined before parts A and D are joined. could be written as i j i j Constraint languages of this type have played a central role in the assembly planning systems described by De Fazio and Whitney [1, 2, 3], Huang and Lee <ref> [8, 9] </ref>, Lin and Chang [10], and Roy, Bannerjee and Liu [12]. Furthermore, Homem de Mello and Sanderson have proven some forms of mating constraint expressions correct and complete for some classes of assembly plans [7]. However, the constraint languages used by different authors differ in important details.
Reference: [9] <author> Y. F. Huang and C. S. George Lee. </author> <title> A framework of knowledge-based assembly planning. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 599-604, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: joined and parts A and C are joined before parts A and D are joined. could be written as i j i j Constraint languages of this type have played a central role in the assembly planning systems described by De Fazio and Whitney [1, 2, 3], Huang and Lee <ref> [8, 9] </ref>, Lin and Chang [10], and Roy, Bannerjee and Liu [12]. Furthermore, Homem de Mello and Sanderson have proven some forms of mating constraint expressions correct and complete for some classes of assembly plans [7]. However, the constraint languages used by different authors differ in important details. <p> They start all separate, and end all combined. The five transitions in the state sequence correspond to the 7 five operations in the tree. This model of an assembly plan has been used both by De Fazio and Whitney [2] and by Huang and Lee <ref> [9] </ref>. Normally when two sets of parts are mated, one set is moved while the other is held in place. Neither the state sequence nor the partial assembly tree makes this distinction for any of their operations.
Reference: [10] <author> Alan C. Lin and Tien-Chien Chang. </author> <title> Automated assembly planning for 3-dimensional mechanical products. </title> <booktitle> In 7th Annual NSF Conference on Design and Manufacturing Systems Research, </booktitle> <pages> pages 523-531, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: C are joined before parts A and D are joined. could be written as i j i j Constraint languages of this type have played a central role in the assembly planning systems described by De Fazio and Whitney [1, 2, 3], Huang and Lee [8, 9], Lin and Chang <ref> [10] </ref>, and Roy, Bannerjee and Liu [12]. Furthermore, Homem de Mello and Sanderson have proven some forms of mating constraint expressions correct and complete for some classes of assembly plans [7]. However, the constraint languages used by different authors differ in important details.
Reference: [11] <author> Joseph M. Miller and Richard L. Hoffman. </author> <title> Automatic assembly planning with fasteners. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 69-74, </pages> <month> May </month> <year> 1989. </year> <month> 32 </month>
Reference: [12] <author> U. Roy, P. Bannerjee, and C. R. Liu. </author> <title> Design of an automated assembly environment. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 21(9) </volume> <pages> 561-569, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: and D are joined. could be written as i j i j Constraint languages of this type have played a central role in the assembly planning systems described by De Fazio and Whitney [1, 2, 3], Huang and Lee [8, 9], Lin and Chang [10], and Roy, Bannerjee and Liu <ref> [12] </ref>. Furthermore, Homem de Mello and Sanderson have proven some forms of mating constraint expressions correct and complete for some classes of assembly plans [7]. However, the constraint languages used by different authors differ in important details. <p> Such plans, which could never be executed by a one-handed robot, are called nonsequential. Little research has been done on nonsequential assembly planning, though simple cases can be handled by treating the whole thing as one complex operation involving more than two parts <ref> [12] </ref>. Such a plan would, however, be uninteresting for cases such as the one in figure 1. Only sequential plans will be considered in this paper. The objective in any assembly plan is to place all the parts in their final positions relative to each other.
Reference: [13] <author> Arthur C. Sanderson, Luiz S. Homem de Mello, and Hui Zhang. </author> <title> Assembly sequence planning. </title> <journal> AI Magazine, </journal> <volume> 11(1) </volume> <pages> 62-81, </pages> <month> Spring </month> <year> 1990. </year>
Reference-contexts: The simplest type of assembly plan that has been used is the partial assembly tree shown in figure 5a. This is the type of plan generated by Homem de Mello and Sanderson's system <ref> [5, 6, 13] </ref>. Each leaf of the partial assembly tree corresponds to an individual part and each internal node corresponds to an operation that combines the two sets of parts designated by its two children. We call the assembled sets of parts resulting from each operation partial assemblies.
Reference: [14] <author> Jungfu Tsao and Jan Wolter. </author> <title> Assembly planning with intermediate states. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 71-76, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Plans which leave parts in non-goal positions while other parts are moved are called nonmonotone plans. Hoffman [4] and Tsao and Wolter <ref> [14] </ref> have done significant work on the generation of such nonmonotone plans. However, only monotone plans will be considered in this paper. Another common restriction applied to assembly plans is the contact coherence restriction, which asserts that each inserted part or set of parts should touch some previously inserted part.
Reference: [15] <author> Jan Wolter. </author> <title> A combinatorial analysis of enumerative data structures for assembly planning. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 611-618, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Choosing which edges to add can be difficult, especially since the increase in computation time is usually sensitive to the topology of the graph as well as the number of edges <ref> [15] </ref>. This paper will consider both contact-coherent plans and noncoherent plans by allowing an arbitrary contact graph to be used.
Reference: [16] <author> Jan Wolter. </author> <title> A combinatorial analysis of enumerative data structures for assembly planning. </title> <journal> Journal of Design and Manufacturing, </journal> <volume> 2(2) </volume> <pages> 93-104, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: These sets are described in one of two ways: either by enumerative data structures, which list all plans in the set, or by constraint expressions, which give conditions for the inclusion of a plan in the set. Enumerative data structures were surveyed and analyzed in a previous paper <ref> [16] </ref>. This paper describes and analyzes the most commonly used form of constraint languages for assembly planning: mating constraint expressions. These constraints are logic expressions whose literals are relations asserting that a certain pair of parts must be mated before some other pair of parts may be mated.
Reference: [17] <author> Jan Dithmar Wolter. </author> <title> A constraint-based approach to planning with subassemblies. </title> <booktitle> In IEEE Intl. Conf. on Systems Engineering, </booktitle> <pages> pages 412-415, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: These types of plans are usually drawn as shown on the right of figure 5d and are called subassembly trees. Plans of this type have been discussed by Wolter <ref> [17, 18] </ref>. Obviously, other possible combinations of information are possible.
Reference: [18] <author> Jan Dithmar Wolter. </author> <title> Representing subassembly trees by deepest common ancestor relations. </title> <type> Technical Report 90-009, </type> <institution> Texas A&M University, Computer Science Dept., </institution> <month> May </month> <year> 1990. </year> <month> 33 </month>
Reference-contexts: These types of plans are usually drawn as shown on the right of figure 5d and are called subassembly trees. Plans of this type have been discussed by Wolter <ref> [17, 18] </ref>. Obviously, other possible combinations of information are possible.
References-found: 18

