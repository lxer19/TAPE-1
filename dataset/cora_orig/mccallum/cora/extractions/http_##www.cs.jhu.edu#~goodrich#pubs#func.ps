URL: http://www.cs.jhu.edu/~goodrich/pubs/func.ps
Refering-URL: http://www.cs.jhu.edu/~goodrich/pubs/index.html
Root-URL: http://www.cs.jhu.edu
Title: Efficient Piecewise-Linear Function Approximation Using the Uniform Metric  
Author: Michael T. Goodrich 
Abstract: We give an O(n log n)-time method for finding a best k-link piecewise-linear function approximating an n-point planar data set using the well-known uniform metric to measure the error, * 0, of the approximation. Our method is based upon new characterizations of such functions, which we exploit to design an efficient algorithm using a plane sweep in "* space" followed by several applications of the parametric searching technique. The previous best running time for this problem was O(n 2 ).
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, A. Aggarwal, B. Aronov, S. R. Kosaraju, B. Schieber, and S. Suri, </author> <title> "Computing external farthest neighbors for a simple polygon," </title> <journal> Discrete Appl. Math., </journal> <volume> 31(2), </volume> <pages> 97-111, </pages> <year> 1991. </year>
Reference-contexts: Similarly, let g (*) be the shortest path from g 1 to g n that does not go below G (*) and does not cross U (*). Such paths were introduced by Lee and Preparata [38] and are often referred to as geodesic paths <ref> [1, 7, 10, 25, 28, 45, 46, 56] </ref>, and the union of two such paths is often called an hourglass [22, 26]. Let us therefore use H (*) to denote this hourglass u (*) [ g (*).
Reference: [2] <author> P. K. Agarwal, B. Aronov, M. Sharir, and S. Suri, </author> <title> "Selecting distances in the plane," </title> <booktitle> in Proc. 6th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> 321-331, </pages> <year> 1990. </year>
Reference-contexts: To achieve this latter result we give additional geometric characterizations of a best k-link approximation that allow us to follow this preprocessing step by several applications of pipelined versions of the well-known parametric searching technique (e.g., see <ref> [2, 3, 4, 11, 13, 14, 15, 41] </ref>). Admittedly, the use of this technique typically makes an algorithm rather impractical to implement.
Reference: [3] <author> P. K. Agarwal and J. Matousek, </author> <title> "Ray shooting and parametric search," </title> <booktitle> in Proc. 24th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> 517-526, </pages> <year> 1992. </year>
Reference-contexts: To achieve this latter result we give additional geometric characterizations of a best k-link approximation that allow us to follow this preprocessing step by several applications of pipelined versions of the well-known parametric searching technique (e.g., see <ref> [2, 3, 4, 11, 13, 14, 15, 41] </ref>). Admittedly, the use of this technique typically makes an algorithm rather impractical to implement.
Reference: [4] <author> P. K. Agarwal, M. Sharir, and S. Toledo, </author> <title> "Applications of parametric searching in geometric optimization," </title> <booktitle> in Proc. 3rd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> 72-82, </pages> <year> 1992. </year>
Reference-contexts: To achieve this latter result we give additional geometric characterizations of a best k-link approximation that allow us to follow this preprocessing step by several applications of pipelined versions of the well-known parametric searching technique (e.g., see <ref> [2, 3, 4, 11, 13, 14, 15, 41] </ref>). Admittedly, the use of this technique typically makes an algorithm rather impractical to implement.
Reference: [5] <author> A. Aggarwal, H. Booth, J. O'Rourke, S. Suri, and C. K. Yap, </author> <title> "Finding minimal convex nested polygons," </title> <booktitle> in Proc. 1st Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> 296-304, </pages> <year> 1985. </year>
Reference-contexts: There has also been a considerable amount of work on finding a minimum-link approximation to a polygonal curve, subject to some error tolerance. The problem of fitting a minimum-link convex polygon nested between two given polygons was studied by Aggar-wal et al. <ref> [5] </ref>, who give an O (n log n) time solution to this problem. In addition, Imai and Iri [34, 35] give an O (n) time method for finding the minimum-link function approximating a given monotone chain.
Reference: [6] <author> E. M. Arkin, J. S. B. Mitchell, and S. Suri, </author> <title> "Optimal link path queries in a simple polygon," </title> <booktitle> in Proc. 3rd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> 269-279, </pages> <year> 1992. </year>
Reference-contexts: There is also a rich literature that studies minimum-link distance as a metric in its own right (e.g., see <ref> [6, 23, 24, 37, 39, 47, 48, 54, 55] </ref>). 1.3 Our results As mentioned above, we give an O (n log n) time algorithm for finding a best k-link piecewise-linear function approximating a set S of n points in the plane under the uniform metric.
Reference: [7] <author> B. Aronov, </author> <title> "On the geodesic Voronoi diagram of point sites in a simple polygon," </title> <journal> Algorithmica, </journal> <volume> 4, </volume> <pages> 109-140, </pages> <year> 1989. </year>
Reference-contexts: Similarly, let g (*) be the shortest path from g 1 to g n that does not go below G (*) and does not cross U (*). Such paths were introduced by Lee and Preparata [38] and are often referred to as geodesic paths <ref> [1, 7, 10, 25, 28, 45, 46, 56] </ref>, and the union of two such paths is often called an hourglass [22, 26]. Let us therefore use H (*) to denote this hourglass u (*) [ g (*).
Reference: [8] <author> R. E. Bellman and R. S. Roth, </author> <title> "Curve fitting by segmented straight lines," </title> <journal> American Statistical Association Journal, </journal> <volume> 64, </volume> <pages> 1079-1084, </pages> <year> 1969. </year>
Reference-contexts: Research in this literature is primarily interested in minimizing the number of knots in a spline under the the least squares metric, e.g., Jupp [36] gives a numerical approach to this problem. For the specific problem we address here, Bellman and Roth <ref> [8] </ref> describe a dynamic-programming approach based upon using a uniform grid to determine possible placements of link endpoints (which they call knots). Their method is not guaranteed to find a best k-link approximation, however.
Reference: [9] <author> R. E. Bellman and R. S. Roth, </author> <title> Methods in Approximation: Techniques for Mathematical Modelling, </title> <address> D. </address> <publisher> Reidel Publishing Co., </publisher> <address> Boston, </address> <year> 1986. </year>
Reference-contexts: Using terminology from the approximation theory literature (e.g., see <ref> [9, 16, 18, 19] </ref>), this is equivalent to the problem of finding a best (k + 1)-knot degree-1 spline approximating S under the l 1 norm. <p> Thus, the interested reader is referred to texts discussing approximation theory, such as those by Bellman and Roth <ref> [9] </ref>, Conte and de Boor [16], Davis [18], and Dierckx [19], for a general treatment of such problems. Research in this literature is primarily interested in minimizing the number of knots in a spline under the the least squares metric, e.g., Jupp [36] gives a numerical approach to this problem.
Reference: [10] <author> B. Chazelle, H. Edelsbrunner, M. Grigni, L. Guibas, J. Hershberger, M. Sharir, and J. Snoeyink, </author> <title> "Ray shooting in polygons using geodesic triangulations," </title> <booktitle> in Proc. 18th Internat. Colloq. Automata Lang. Program., Lecture Notes in Computer Science, </booktitle> <volume> vol. 510, </volume> <publisher> Springer-Verlag, </publisher> <pages> 661-673, </pages> <year> 1991. </year>
Reference-contexts: Similarly, let g (*) be the shortest path from g 1 to g n that does not go below G (*) and does not cross U (*). Such paths were introduced by Lee and Preparata [38] and are often referred to as geodesic paths <ref> [1, 7, 10, 25, 28, 45, 46, 56] </ref>, and the union of two such paths is often called an hourglass [22, 26]. Let us therefore use H (*) to denote this hourglass u (*) [ g (*).
Reference: [11] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir, </author> <title> "Diameter, width, closest line pair, and parametric searching," </title> <booktitle> in Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> 120-129, </pages> <year> 1992. </year>
Reference-contexts: To achieve this latter result we give additional geometric characterizations of a best k-link approximation that allow us to follow this preprocessing step by several applications of pipelined versions of the well-known parametric searching technique (e.g., see <ref> [2, 3, 4, 11, 13, 14, 15, 41] </ref>). Admittedly, the use of this technique typically makes an algorithm rather impractical to implement.
Reference: [12] <author> K. L. Clarkson, </author> <title> "Linear programming in O(n3 d 2 ) time," </title> <journal> Inform. Process. Lett., </journal> <volume> 22, </volume> <pages> 21-24, </pages> <year> 1986. </year>
Reference-contexts: Of course, the case k = n 1 is trivial, and there is a simple reduction of the case k = 1 to 3-dimensional linear programming, which can be solved in O (n) time <ref> [12, 20, 40, 42, 43, 53] </ref>. Thus, the interesting cases are for 1 &lt; k &lt; n 1. We show how to solve this problem for any such k in O (n log n) time.
Reference: [13] <author> R. Cole, </author> <title> "Slowing down sorting networks to obtain faster sorting algorithms," </title> <journal> J. ACM, </journal> <volume> 34, </volume> <pages> 200-208, </pages> <year> 1987. </year>
Reference-contexts: To achieve this latter result we give additional geometric characterizations of a best k-link approximation that allow us to follow this preprocessing step by several applications of pipelined versions of the well-known parametric searching technique (e.g., see <ref> [2, 3, 4, 11, 13, 14, 15, 41] </ref>). Admittedly, the use of this technique typically makes an algorithm rather impractical to implement. <p> Proof: The proof follows immediately from the characterization lemma of Hakimi and Schmeichel [30]. 2 Our method for enumerating all such edges is based upon several applications of the parametric searching technique, as optimized by Cole <ref> [13, 14] </ref>. <p> If it takes T steps to determine if * fl &lt; *, for a particular *, then this parametric searching technique allows us to perform all m binary searches in O ((T + m)(log n + log m)) time (see Cole <ref> [13] </ref> for details). It also gives us an interval [* 1 ; * 2 ] containing * fl , which is the intersection of all the intervals determined to contain * fl during the m searches. <p> If it takes T steps to determine if * fl &lt; *, for a particular *, then this parametric searching technique allows us to sort the elements of A in O ((T + n) log n) time (see Cole <ref> [13, 14] </ref> for details). Also, this method gives an interval [* 1 ; * 2 ] containing * fl , which is the intersection of all the intervals determined to contain * fl during the sort. <p> Our first parametric search therefore is to determine for each vertex v on U [p;q] (*) its vertex of tangency, t (v), with the convex chain [p; q] at * = * fl (see Figure 5). In this case 10 we can use binary-search-based parametric searching <ref> [13] </ref> applied to a well-known "binary search" tangent-finding method (e.g., see [21, 51]) to find all such tangents in O (n log n) time. <p> To accomplish this we make a second application of parametric searching, this time using the second version, based upon a parallel sorting algorithm <ref> [13, 14] </ref>, together with the linear-time method of Hershberger and Snoeyink [32], Guibas et al. [29], or Hakimi and Schmeichel [30] for resolving comparisons, to sort all l (w) and r (w) lists in O (n log n) time. <p> Since there are O (n) such parameterized comparisons, and each resolution requires O (n) time, the total time needed to resolve all of these comparisons is O (n log n). This implies that we can substitute the most simple form of parametric searching for the more-complicated sorting-based method <ref> [13, 14] </ref>. The resulting algorithm would still run in O (n log n) time. <p> But the computation of a median or weighted median (which is the least-efficient step in the binary-search based parametric searching method of Cole <ref> [13] </ref>) can be significantly improved in practice through the use of randomization (e.g., see [17]). The effect in our case 13 is that the resulting algorithm will still be guaranteed to find a best k-link approximation, but it will not be guaranteed to run in O (n log n) time.
Reference: [14] <author> R. Cole, </author> <title> "Parallel merge sort," </title> <journal> SIAM J. Comput., </journal> <volume> 17(4), </volume> <pages> 770-785, </pages> <year> 1988. </year>
Reference-contexts: To achieve this latter result we give additional geometric characterizations of a best k-link approximation that allow us to follow this preprocessing step by several applications of pipelined versions of the well-known parametric searching technique (e.g., see <ref> [2, 3, 4, 11, 13, 14, 15, 41] </ref>). Admittedly, the use of this technique typically makes an algorithm rather impractical to implement. <p> Proof: The proof follows immediately from the characterization lemma of Hakimi and Schmeichel [30]. 2 Our method for enumerating all such edges is based upon several applications of the parametric searching technique, as optimized by Cole <ref> [13, 14] </ref>. <p> If it takes T steps to determine if * fl &lt; *, for a particular *, then this parametric searching technique allows us to sort the elements of A in O ((T + n) log n) time (see Cole <ref> [13, 14] </ref> for details). Also, this method gives an interval [* 1 ; * 2 ] containing * fl , which is the intersection of all the intervals determined to contain * fl during the sort. <p> To accomplish this we make a second application of parametric searching, this time using the second version, based upon a parallel sorting algorithm <ref> [13, 14] </ref>, together with the linear-time method of Hershberger and Snoeyink [32], Guibas et al. [29], or Hakimi and Schmeichel [30] for resolving comparisons, to sort all l (w) and r (w) lists in O (n log n) time. <p> Since there are O (n) such parameterized comparisons, and each resolution requires O (n) time, the total time needed to resolve all of these comparisons is O (n log n). This implies that we can substitute the most simple form of parametric searching for the more-complicated sorting-based method <ref> [13, 14] </ref>. The resulting algorithm would still run in O (n log n) time.
Reference: [15] <author> R. Cole, J. Salowe, W. Steiger, and E. Szemeredi, </author> <title> "An optimal-time algorithm for slope selec tion," </title> <journal> SIAM J. Comput., </journal> <volume> 18, </volume> <pages> 792-810, </pages> <year> 1989. </year>
Reference-contexts: To achieve this latter result we give additional geometric characterizations of a best k-link approximation that allow us to follow this preprocessing step by several applications of pipelined versions of the well-known parametric searching technique (e.g., see <ref> [2, 3, 4, 11, 13, 14, 15, 41] </ref>). Admittedly, the use of this technique typically makes an algorithm rather impractical to implement.
Reference: [16] <author> S. D. Conte and C. de Boor, </author> <title> Elementary Numerical Analysis: An Algorithmic Approach, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <note> 3rd edition, </note> <year> 1980. </year>
Reference-contexts: class of linear or piecewise-linear functions, and, for any particular F 2 F , that the measure of the error be the well-known uniform metric: jjS F jj 1 = max jy i F (x i )j; which is also known as the l 1 or Chebychev measure of error <ref> [16, 18, 30] </ref>. The goal, then, is to determine the value of * fl = min jjS F jj 1 ; and find an F 2 F achieving this error bound. <p> Using terminology from the approximation theory literature (e.g., see <ref> [9, 16, 18, 19] </ref>), this is equivalent to the problem of finding a best (k + 1)-knot degree-1 spline approximating S under the l 1 norm. <p> Thus, the interested reader is referred to texts discussing approximation theory, such as those by Bellman and Roth [9], Conte and de Boor <ref> [16] </ref>, Davis [18], and Dierckx [19], for a general treatment of such problems. Research in this literature is primarily interested in minimizing the number of knots in a spline under the the least squares metric, e.g., Jupp [36] gives a numerical approach to this problem.
Reference: [17] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: We store the values belonging to E in a priority queue that supports the operations of insert, delete, and extract-min in O (log n) time (e.g., see <ref> [17] </ref>). While E is not empty, we extract the smallest ^* in E, perform the modification of u (^*) implied by this geodesically-critical value, and then update E to reflect the new geodesic path. <p> The only slightly impractical steps in this algorithm are repeated computations of medians (e.g., of the remaining unresolved ^*'s in each iteration of the above binary search), for which the best deterministic algorithm has a relatively large constant (e.g., see <ref> [17] </ref>). But the computation of a median or weighted median (which is the least-efficient step in the binary-search based parametric searching method of Cole [13]) can be significantly improved in practice through the use of randomization (e.g., see [17]). <p> which the best deterministic algorithm has a relatively large constant (e.g., see <ref> [17] </ref>). But the computation of a median or weighted median (which is the least-efficient step in the binary-search based parametric searching method of Cole [13]) can be significantly improved in practice through the use of randomization (e.g., see [17]). The effect in our case 13 is that the resulting algorithm will still be guaranteed to find a best k-link approximation, but it will not be guaranteed to run in O (n log n) time.
Reference: [18] <author> P. J. Davis, </author> <title> Interpolation and Approximation, </title> <publisher> Blaisdell Publishing Co., </publisher> <address> New York, </address> <year> 1963. </year>
Reference-contexts: class of linear or piecewise-linear functions, and, for any particular F 2 F , that the measure of the error be the well-known uniform metric: jjS F jj 1 = max jy i F (x i )j; which is also known as the l 1 or Chebychev measure of error <ref> [16, 18, 30] </ref>. The goal, then, is to determine the value of * fl = min jjS F jj 1 ; and find an F 2 F achieving this error bound. <p> Using terminology from the approximation theory literature (e.g., see <ref> [9, 16, 18, 19] </ref>), this is equivalent to the problem of finding a best (k + 1)-knot degree-1 spline approximating S under the l 1 norm. <p> Thus, the interested reader is referred to texts discussing approximation theory, such as those by Bellman and Roth [9], Conte and de Boor [16], Davis <ref> [18] </ref>, and Dierckx [19], for a general treatment of such problems. Research in this literature is primarily interested in minimizing the number of knots in a spline under the the least squares metric, e.g., Jupp [36] gives a numerical approach to this problem.
Reference: [19] <author> P. Dierckx, </author> <title> Curve and Surface Fitting with Splines, </title> <publisher> Clarendon Press, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: Using terminology from the approximation theory literature (e.g., see <ref> [9, 16, 18, 19] </ref>), this is equivalent to the problem of finding a best (k + 1)-knot degree-1 spline approximating S under the l 1 norm. <p> Thus, the interested reader is referred to texts discussing approximation theory, such as those by Bellman and Roth [9], Conte and de Boor [16], Davis [18], and Dierckx <ref> [19] </ref>, for a general treatment of such problems. Research in this literature is primarily interested in minimizing the number of knots in a spline under the the least squares metric, e.g., Jupp [36] gives a numerical approach to this problem.
Reference: [20] <author> M. E. Dyer, </author> <title> "Linear time algorithms for two- and three-variable linear programs," </title> <journal> SIAM J. Comput., </journal> <volume> 13, </volume> <pages> 31-45, </pages> <year> 1984. </year>
Reference-contexts: Of course, the case k = n 1 is trivial, and there is a simple reduction of the case k = 1 to 3-dimensional linear programming, which can be solved in O (n) time <ref> [12, 20, 40, 42, 43, 53] </ref>. Thus, the interesting cases are for 1 &lt; k &lt; n 1. We show how to solve this problem for any such k in O (n log n) time.
Reference: [21] <author> H. Edelsbrunner, </author> <title> Algorithms in Combinatorial Geometry, </title> <journal> EATCS Monographs on Theoretical Computer Science, </journal> <volume> vol. 10, </volume> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: In this case 10 we can use binary-search-based parametric searching [13] applied to a well-known "binary search" tangent-finding method (e.g., see <ref> [21, 51] </ref>) to find all such tangents in O (n log n) time. This may still not restrict our interval of * values to [* fl ; * fl ], however, for a vertex v will have the same vertex of tangency, t (v), over a range of * values.
Reference: [22] <author> H. ElGindy and M. T. Goodrich, </author> <title> "Parallel algorithms for shortest path problems in polygons," </title> <journal> Visual Comput., </journal> <volume> 3, </volume> <pages> 371-378, </pages> <year> 1988. </year>
Reference-contexts: Such paths were introduced by Lee and Preparata [38] and are often referred to as geodesic paths [1, 7, 10, 25, 28, 45, 46, 56], and the union of two such paths is often called an hourglass <ref> [22, 26] </ref>. Let us therefore use H (*) to denote this hourglass u (*) [ g (*). We say that an edge of H (*) is an inflection edge if one of its endpoints lies on U (*) while its other endpoint lies on G (*).
Reference: [23] <author> S. Ghosh, </author> <title> "Computing visibility polygon from a convex set and related problems," </title> <journal> J. Algo rithms, </journal> <volume> 12, </volume> <pages> 75-95, </pages> <year> 1991. </year>
Reference-contexts: There is also a rich literature that studies minimum-link distance as a metric in its own right (e.g., see <ref> [6, 23, 24, 37, 39, 47, 48, 54, 55] </ref>). 1.3 Our results As mentioned above, we give an O (n log n) time algorithm for finding a best k-link piecewise-linear function approximating a set S of n points in the plane under the uniform metric. <p> Also suppose, for the sake of contradiction, that e is contained in no link of the appropriate type in any best k-link approximation F . We will follow a proof technique of Ghosh <ref> [23] </ref>, which involves performing local perturbations of a candidate stabber, to derive a contradiction. <p> Call a vertex p of U (*) a left inflection (resp., right inflection) vertex if p is the left (resp., right) endpoint of an inflection edge of H (* fl ). Following an approach similar to that used by Ghosh <ref> [23] </ref>, consider a portion of U (*) between a left inflection vertex p and the leftmost right inflection vertex q to the right of p. Denote this portion of U (*) as U [p;q] (*).
Reference: [24] <author> S. K. Ghosh and A. Maheshwari, </author> <title> "Parallel algorithms for all minimum link paths and link center problems," </title> <booktitle> in Proc. 3rd Scand. Workshop Algorithm Theory, Lecture Notes in Computer Science, </booktitle> <volume> vol. 621, </volume> <publisher> Springer-Verlag, </publisher> <pages> 106-117, </pages> <year> 1992. </year>
Reference-contexts: There is also a rich literature that studies minimum-link distance as a metric in its own right (e.g., see <ref> [6, 23, 24, 37, 39, 47, 48, 54, 55] </ref>). 1.3 Our results As mentioned above, we give an O (n log n) time algorithm for finding a best k-link piecewise-linear function approximating a set S of n points in the plane under the uniform metric.
Reference: [25] <author> M. T. Goodrich and R. Tamassia, </author> <title> "Dynamic ray shooting and shortest paths via balanced geodesic triangulations," </title> <booktitle> in Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> 318-327, </pages> <year> 1993. </year>
Reference-contexts: Similarly, let g (*) be the shortest path from g 1 to g n that does not go below G (*) and does not cross U (*). Such paths were introduced by Lee and Preparata [38] and are often referred to as geodesic paths <ref> [1, 7, 10, 25, 28, 45, 46, 56] </ref>, and the union of two such paths is often called an hourglass [22, 26]. Let us therefore use H (*) to denote this hourglass u (*) [ g (*).
Reference: [26] <author> L. J. Guibas and J. Hershberger, </author> <title> "Optimal shortest path queries in a simple polygon," </title> <booktitle> in Proc. 3rd Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> 50-63, </pages> <year> 1987. </year> <month> 15 </month>
Reference-contexts: Such paths were introduced by Lee and Preparata [38] and are often referred to as geodesic paths [1, 7, 10, 25, 28, 45, 46, 56], and the union of two such paths is often called an hourglass <ref> [22, 26] </ref>. Let us therefore use H (*) to denote this hourglass u (*) [ g (*). We say that an edge of H (*) is an inflection edge if one of its endpoints lies on U (*) while its other endpoint lies on G (*).
Reference: [27] <author> L. J. Guibas and J. Hershberger, </author> <title> "Optimal shortest path queries in a simple polygon," </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 39, </volume> <pages> 126-152, </pages> <year> 1989. </year>
Reference-contexts: Specifically, we can use the data structure of Guibas and Hershberger <ref> [27] </ref>, as simplified by Hershberger [31], to determine each e (v) in O (log n) time. This data structure is relatively simple to construct and query, especially since each U [p;q] (*) is a single monotone chain.
Reference: [28] <author> L. J. Guibas, J. Hershberger, D. Leven, M. Sharir, and R. E. Tarjan, </author> <title> "Linear-time algorithms for visibility and shortest path problems inside triangulated simple polygons," </title> <journal> Algorithmica, </journal> <volume> 2, </volume> <pages> 209-233, </pages> <year> 1987. </year>
Reference-contexts: Similarly, let g (*) be the shortest path from g 1 to g n that does not go below G (*) and does not cross U (*). Such paths were introduced by Lee and Preparata [38] and are often referred to as geodesic paths <ref> [1, 7, 10, 25, 28, 45, 46, 56] </ref>, and the union of two such paths is often called an hourglass [22, 26]. Let us therefore use H (*) to denote this hourglass u (*) [ g (*).
Reference: [29] <author> L. J. Guibas, J. E. Hershberger, J. S. B. Mitchell, and J. S. Snoeyink, </author> <title> "Approximating polygons and subdivisions with minimum link paths," </title> <booktitle> in Proc. 2nd Annu. SIGAL Internat. Sympos. Algorithms, Lecture Notes in Computer Science, </booktitle> <volume> vol. 557, </volume> <publisher> Springer-Verlag, </publisher> <pages> 151-162, </pages> <year> 1991. </year>
Reference-contexts: Hershberger and Snoeyink [32] show how to further generalize this method to find in O (n) time a minimum-link path of a particular homotopy type in a non-simple polygon, and Guibas, Hershberger, Mitchell, and Snoeyink <ref> [29] </ref> show how to generalize this method even further to find in O (n) time a minimum-link stabber for any given set of disjoint convex objects that must be stabbed in some given order (not necessarily just by increasing x-coordinates). <p> Thus, if we view points as degenerate segments, then S = S (0). For any ordered set of disjoint geometric objects A a polygonal chain C is an ordered stabber if a traversal of C intersects the objects of A in the given order <ref> [29] </ref>. Finally, define F (*) to be a minimum-link ordered stabber of S (*). The formal problem we address in this paper, then, is to find * fl , the smallest * 0 such that F (*) has at most k links. <p> Given these geodesically-critical values it is then a simple manner to determine the consecutive pair that contains * fl by using the method of Hershberger and Snoeyink [32], Guibas et al. <ref> [29] </ref>, or Hakimi and Schmeichel [30] to drive a binary search among the set of geodesically-critical values. Using one of these simple algorithms, all of which are based upon the "greedy method," to test if a given * is smaller than * fl takes O (n) time. <p> Observe that finding such a link effectively "clamps" U (*) and G (*) at * = * fl . Also note that we can use the linear-time method of Hershberger and Snoeyink [32], Guibas et al. <ref> [29] </ref>, or Hakimi and Schmeichel [30] to resolve comparisons and to give us the final approximation F once we have narrowed the interval of candidate * values to [* fl ; * fl ]. <p> To accomplish this we make a second application of parametric searching, this time using the second version, based upon a parallel sorting algorithm [13, 14], together with the linear-time method of Hershberger and Snoeyink [32], Guibas et al. <ref> [29] </ref>, or Hakimi and Schmeichel [30] for resolving comparisons, to sort all l (w) and r (w) lists in O (n log n) time. <p> Thus, once we have determined all the e (v)'s, we can then determine which v's are visible from their respective w = t (v) vertices simply by resolving all of the ^*'s against * fl using the method of Hershberger and Snoeyink [32], Guibas et al. <ref> [29] </ref>, or Hakimi and Schmeichel [30] to drive a binary search. Since there are O (n) such parameterized comparisons, and each resolution requires O (n) time, the total time needed to resolve all of these comparisons is O (n log n).
Reference: [30] <author> S. L. Hakimi and E. F. Schmeichel, </author> <title> "Fitting polygonal functions to a set of points in the plane," CVGIP: Graph. Mod. </title> <booktitle> Image Proc., </booktitle> <volume> 53(2), </volume> <pages> 132-136, </pages> <year> 1991. </year>
Reference-contexts: class of linear or piecewise-linear functions, and, for any particular F 2 F , that the measure of the error be the well-known uniform metric: jjS F jj 1 = max jy i F (x i )j; which is also known as the l 1 or Chebychev measure of error <ref> [16, 18, 30] </ref>. The goal, then, is to determine the value of * fl = min jjS F jj 1 ; and find an F 2 F achieving this error bound. <p> For the specific problem we address here, Bellman and Roth [8] describe a dynamic-programming approach based upon using a uniform grid to determine possible placements of link endpoints (which they call knots). Their method is not guaranteed to find a best k-link approximation, however. Hakimi and Schmeichel <ref> [30] </ref> show that such a best approximation can be found in O (n 2 log n) time, and this is the first method we know of that is guaranteed to find a best approximation. <p> More recently, Wang et al. [58] show how to use an even more clever plane sweep procedure to find a best k-link approximation under the uniform metric in O (n 2 ) time. 1.2 Related work With the exception of the papers by Hakimi and Schmeichel <ref> [30] </ref> and Wang et al. [58], related work in the computational geometry literature has been directed at what can be viewed as the "inverse problem," which is also addressed in the paper by Hakimi and Schmeichel [30]. <p> time. 1.2 Related work With the exception of the papers by Hakimi and Schmeichel <ref> [30] </ref> and Wang et al. [58], related work in the computational geometry literature has been directed at what can be viewed as the "inverse problem," which is also addressed in the paper by Hakimi and Schmeichel [30]. <p> Given these geodesically-critical values it is then a simple manner to determine the consecutive pair that contains * fl by using the method of Hershberger and Snoeyink [32], Guibas et al. [29], or Hakimi and Schmeichel <ref> [30] </ref> to drive a binary search among the set of geodesically-critical values. Using one of these simple algorithms, all of which are based upon the "greedy method," to test if a given * is smaller than * fl takes O (n) time. <p> Lemma 4.1: Any canonical best k-link approximation to S has a U -anchored link containing a vertex of G (* fl ) or a G-anchored link containing a vertex of U (* fl ). Proof: The proof follows immediately from the characterization lemma of Hakimi and Schmeichel <ref> [30] </ref>. 2 Our method for enumerating all such edges is based upon several applications of the parametric searching technique, as optimized by Cole [13, 14]. <p> Observe that finding such a link effectively "clamps" U (*) and G (*) at * = * fl . Also note that we can use the linear-time method of Hershberger and Snoeyink [32], Guibas et al. [29], or Hakimi and Schmeichel <ref> [30] </ref> to resolve comparisons and to give us the final approximation F once we have narrowed the interval of candidate * values to [* fl ; * fl ]. <p> To accomplish this we make a second application of parametric searching, this time using the second version, based upon a parallel sorting algorithm [13, 14], together with the linear-time method of Hershberger and Snoeyink [32], Guibas et al. [29], or Hakimi and Schmeichel <ref> [30] </ref> for resolving comparisons, to sort all l (w) and r (w) lists in O (n log n) time. <p> once we have determined all the e (v)'s, we can then determine which v's are visible from their respective w = t (v) vertices simply by resolving all of the ^*'s against * fl using the method of Hershberger and Snoeyink [32], Guibas et al. [29], or Hakimi and Schmeichel <ref> [30] </ref> to drive a binary search. Since there are O (n) such parameterized comparisons, and each resolution requires O (n) time, the total time needed to resolve all of these comparisons is O (n log n).
Reference: [31] <author> J. Hershberger, </author> <title> "A new data structure for shortest path queries in a simple polygon," </title> <journal> Inform. Process. Lett., </journal> <volume> 38, </volume> <pages> 231-235, </pages> <year> 1991. </year>
Reference-contexts: Specifically, we can use the data structure of Guibas and Hershberger [27], as simplified by Hershberger <ref> [31] </ref>, to determine each e (v) in O (log n) time. This data structure is relatively simple to construct and query, especially since each U [p;q] (*) is a single monotone chain.
Reference: [32] <author> J. Hershberger and J. Snoeyink, </author> <title> "Computing minimum length paths of a given homotopy class," </title> <booktitle> in Proc. 2nd Workshop Algorithms Data Struct., Lecture Notes in Computer Science, </booktitle> <volume> vol. 519, </volume> <publisher> Springer-Verlag, </publisher> <pages> 331-342, </pages> <year> 1991. </year>
Reference-contexts: Their method can be viewed as an extension of the linear-time method of Suri [54], which computes a minimum-link path inside a simple polygon, to the problem of finding a minimum-link monotone polygonal chain that "stabs" a given set of line segments. Hershberger and Snoeyink <ref> [32] </ref> show how to further generalize this method to find in O (n) time a minimum-link path of a particular homotopy type in a non-simple polygon, and Guibas, Hershberger, Mitchell, and Snoeyink [29] show how to generalize this method even further to find in O (n) time a minimum-link stabber for <p> Given these geodesically-critical values it is then a simple manner to determine the consecutive pair that contains * fl by using the method of Hershberger and Snoeyink <ref> [32] </ref>, Guibas et al. [29], or Hakimi and Schmeichel [30] to drive a binary search among the set of geodesically-critical values. <p> Observe that finding such a link effectively "clamps" U (*) and G (*) at * = * fl . Also note that we can use the linear-time method of Hershberger and Snoeyink <ref> [32] </ref>, Guibas et al. [29], or Hakimi and Schmeichel [30] to resolve comparisons and to give us the final approximation F once we have narrowed the interval of candidate * values to [* fl ; * fl ]. <p> To accomplish this we make a second application of parametric searching, this time using the second version, based upon a parallel sorting algorithm [13, 14], together with the linear-time method of Hershberger and Snoeyink <ref> [32] </ref>, Guibas et al. [29], or Hakimi and Schmeichel [30] for resolving comparisons, to sort all l (w) and r (w) lists in O (n log n) time. <p> Thus, once we have determined all the e (v)'s, we can then determine which v's are visible from their respective w = t (v) vertices simply by resolving all of the ^*'s against * fl using the method of Hershberger and Snoeyink <ref> [32] </ref>, Guibas et al. [29], or Hakimi and Schmeichel [30] to drive a binary search. Since there are O (n) such parameterized comparisons, and each resolution requires O (n) time, the total time needed to resolve all of these comparisons is O (n log n).
Reference: [33] <author> H. Imai and M. Iri, </author> <title> "Computational-geometric methods for polygonal approximations of a curve," Comput. Vision Graph. </title> <journal> Image Process., </journal> <volume> 36, </volume> <pages> 31-41, </pages> <year> 1986. </year>
Reference-contexts: There has also been some work on approximations that are required to use a subset of the endpoints of the given polygonal chain. For example, using an approach of Imai and Iri <ref> [33, 35] </ref>, Toussaint [57] and Melkman and O'Rourke [44] give several O (n 2 log n) time methods under various metrics.
Reference: [34] <author> H. Imai and M. Iri, </author> <title> "An optimal algorithm for approximating a piecewise linear function," </title> <journal> Journal of Information Processing, </journal> <volume> 9(3), </volume> <pages> 159-162, </pages> <year> 1986. </year>
Reference-contexts: The problem of fitting a minimum-link convex polygon nested between two given polygons was studied by Aggar-wal et al. [5], who give an O (n log n) time solution to this problem. In addition, Imai and Iri <ref> [34, 35] </ref> give an O (n) time method for finding the minimum-link function approximating a given monotone chain.
Reference: [35] <author> H. Imai and M. Iri, </author> <title> "Polygonal approximations of a curve-formulations and algorithms," in Computational Morphology, </title> <editor> G. T. Toussaint, editor, </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, 71-86, </address> <year> 1988. </year>
Reference-contexts: The problem of fitting a minimum-link convex polygon nested between two given polygons was studied by Aggar-wal et al. [5], who give an O (n log n) time solution to this problem. In addition, Imai and Iri <ref> [34, 35] </ref> give an O (n) time method for finding the minimum-link function approximating a given monotone chain. <p> There has also been some work on approximations that are required to use a subset of the endpoints of the given polygonal chain. For example, using an approach of Imai and Iri <ref> [33, 35] </ref>, Toussaint [57] and Melkman and O'Rourke [44] give several O (n 2 log n) time methods under various metrics.
Reference: [36] <author> D. L. B. Jupp, </author> <title> "Approximation to data by splines with free knots," </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 15(2), </volume> <pages> 328-343, </pages> <year> 1978. </year>
Reference-contexts: Research in this literature is primarily interested in minimizing the number of knots in a spline under the the least squares metric, e.g., Jupp <ref> [36] </ref> gives a numerical approach to this problem. For the specific problem we address here, Bellman and Roth [8] describe a dynamic-programming approach based upon using a uniform grid to determine possible placements of link endpoints (which they call knots).
Reference: [37] <author> Y. Ke, </author> <title> "An efficient algorithm for link-distance problems," </title> <booktitle> in Proc. 5th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> 69-78, </pages> <year> 1989. </year>
Reference-contexts: There is also a rich literature that studies minimum-link distance as a metric in its own right (e.g., see <ref> [6, 23, 24, 37, 39, 47, 48, 54, 55] </ref>). 1.3 Our results As mentioned above, we give an O (n log n) time algorithm for finding a best k-link piecewise-linear function approximating a set S of n points in the plane under the uniform metric.
Reference: [38] <author> D. T. Lee and F. P. Preparata, </author> <title> "Euclidean shortest paths in the presence of rectilinear barriers," </title> <journal> Networks, </journal> <volume> 14, </volume> <pages> 393-410, </pages> <year> 1984. </year>
Reference-contexts: Similarly, let g (*) be the shortest path from g 1 to g n that does not go below G (*) and does not cross U (*). Such paths were introduced by Lee and Preparata <ref> [38] </ref> and are often referred to as geodesic paths [1, 7, 10, 25, 28, 45, 46, 56], and the union of two such paths is often called an hourglass [22, 26]. Let us therefore use H (*) to denote this hourglass u (*) [ g (*).
Reference: [39] <author> W. Lenhart, R. Pollack, J.-R. Sack, R. Seidel, M. Sharir, S. Suri, G. T. Toussaint, S. White-sides, and C. K. Yap, </author> <title> "Computing the link center of a simple polygon," </title> <journal> Discrete Comput. Geom., </journal> <volume> 3, </volume> <pages> 281-293, </pages> <year> 1988. </year>
Reference-contexts: There is also a rich literature that studies minimum-link distance as a metric in its own right (e.g., see <ref> [6, 23, 24, 37, 39, 47, 48, 54, 55] </ref>). 1.3 Our results As mentioned above, we give an O (n log n) time algorithm for finding a best k-link piecewise-linear function approximating a set S of n points in the plane under the uniform metric.
Reference: [40] <author> J. Matousek, M. Sharir, and E. Welzl, </author> <title> "A subexponential bound for linear programming," </title> <booktitle> in Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> 1-8, </pages> <year> 1992. </year>
Reference-contexts: Of course, the case k = n 1 is trivial, and there is a simple reduction of the case k = 1 to 3-dimensional linear programming, which can be solved in O (n) time <ref> [12, 20, 40, 42, 43, 53] </ref>. Thus, the interesting cases are for 1 &lt; k &lt; n 1. We show how to solve this problem for any such k in O (n log n) time.
Reference: [41] <author> N. Megiddo, </author> <title> "Applying parallel computation algorithms in the design of serial algorithms," </title> <journal> J. ACM, </journal> <volume> 30, </volume> <pages> 852-865, </pages> <year> 1983. </year>
Reference-contexts: To achieve this latter result we give additional geometric characterizations of a best k-link approximation that allow us to follow this preprocessing step by several applications of pipelined versions of the well-known parametric searching technique (e.g., see <ref> [2, 3, 4, 11, 13, 14, 15, 41] </ref>). Admittedly, the use of this technique typically makes an algorithm rather impractical to implement.
Reference: [42] <author> N. Megiddo, </author> <title> "Linear-time algorithms for linear programming in R 3 and related problems," </title> <journal> SIAM J. Comput., </journal> <volume> 12, </volume> <pages> 759-776, </pages> <year> 1983. </year>
Reference-contexts: Of course, the case k = n 1 is trivial, and there is a simple reduction of the case k = 1 to 3-dimensional linear programming, which can be solved in O (n) time <ref> [12, 20, 40, 42, 43, 53] </ref>. Thus, the interesting cases are for 1 &lt; k &lt; n 1. We show how to solve this problem for any such k in O (n log n) time.
Reference: [43] <author> N. Megiddo, </author> <title> "Linear programming in linear time when the dimension is fixed," </title> <journal> J. ACM, </journal> <volume> 31, </volume> <pages> 114-127, </pages> <year> 1984. </year>
Reference-contexts: Of course, the case k = n 1 is trivial, and there is a simple reduction of the case k = 1 to 3-dimensional linear programming, which can be solved in O (n) time <ref> [12, 20, 40, 42, 43, 53] </ref>. Thus, the interesting cases are for 1 &lt; k &lt; n 1. We show how to solve this problem for any such k in O (n log n) time.
Reference: [44] <author> A. Melkman and J. O'Rourke, </author> <title> "On polygonal chain approximation," in Computational Mor--phology, </title> <editor> G. T. Toussaint, editor, </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, 87-95, </address> <year> 1988. </year>
Reference-contexts: There has also been some work on approximations that are required to use a subset of the endpoints of the given polygonal chain. For example, using an approach of Imai and Iri [33, 35], Toussaint [57] and Melkman and O'Rourke <ref> [44] </ref> give several O (n 2 log n) time methods under various metrics.
Reference: [45] <author> J. S. B. Mitchell, </author> <title> "An algorithmic approach to some problems in terrain navigation," </title> <journal> Artif. Intell., </journal> <volume> 37, </volume> <pages> 171-201, </pages> <year> 1988. </year>
Reference-contexts: Similarly, let g (*) be the shortest path from g 1 to g n that does not go below G (*) and does not cross U (*). Such paths were introduced by Lee and Preparata [38] and are often referred to as geodesic paths <ref> [1, 7, 10, 25, 28, 45, 46, 56] </ref>, and the union of two such paths is often called an hourglass [22, 26]. Let us therefore use H (*) to denote this hourglass u (*) [ g (*).
Reference: [46] <author> J. S. B. Mitchell, D. M. Mount, and C. H. Papadimitriou, </author> <title> "The discrete geodesic problem," </title> <journal> SIAM J. Comput., </journal> <volume> 16, </volume> <pages> 647-668, </pages> <year> 1987. </year>
Reference-contexts: Similarly, let g (*) be the shortest path from g 1 to g n that does not go below G (*) and does not cross U (*). Such paths were introduced by Lee and Preparata [38] and are often referred to as geodesic paths <ref> [1, 7, 10, 25, 28, 45, 46, 56] </ref>, and the union of two such paths is often called an hourglass [22, 26]. Let us therefore use H (*) to denote this hourglass u (*) [ g (*).
Reference: [47] <author> J. S. B. Mitchell, C. Piatko, and E. M. Arkin, </author> <title> "Computing a shortest k-link path in a polygon," </title> <booktitle> in Proc. 33rd Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <month> 573-582, </month> <year> 1992. </year>
Reference-contexts: There is also a rich literature that studies minimum-link distance as a metric in its own right (e.g., see <ref> [6, 23, 24, 37, 39, 47, 48, 54, 55] </ref>). 1.3 Our results As mentioned above, we give an O (n log n) time algorithm for finding a best k-link piecewise-linear function approximating a set S of n points in the plane under the uniform metric.
Reference: [48] <author> J. S. B. Mitchell, G. Rote, and G. Woeginger, </author> <title> "Minimum-link paths among obstacles in the plane," </title> <booktitle> in Proc. 6th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> 63-72, </pages> <year> 1990. </year>
Reference-contexts: There is also a rich literature that studies minimum-link distance as a metric in its own right (e.g., see <ref> [6, 23, 24, 37, 39, 47, 48, 54, 55] </ref>). 1.3 Our results As mentioned above, we give an O (n log n) time algorithm for finding a best k-link piecewise-linear function approximating a set S of n points in the plane under the uniform metric.
Reference: [49] <author> J. S. B. Mitchell and S. Suri, </author> <title> "Separation and approximation of polyhedral surfaces," </title> <booktitle> in Proc. 3rd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> 296-306, </pages> <year> 1992. </year>
Reference-contexts: There hasn't been much work on three-dimensional version of these approximation problems with guaranteed performance bounds, however, although the recent work by Mitchell and Suri <ref> [49] </ref> on a special case of the 3-dimensional function approximation problem is a notable exception.
Reference: [50] <author> J. O'Rourke, </author> <title> Art Gallery Theorems and Algorithms, </title> <publisher> Oxford University Press, </publisher> <address> New York, NY, </address> <year> 1987. </year>
Reference-contexts: One such optimization applies 3 For more information about visibility graphs and their properties see the excellent book by O'Rourke <ref> [50] </ref>. 9 to any situation that involves a set Z = fz 1 ; z 2 ; : : : ; z m g of m independent binary searches among an ordered set A = (a 1 ; a 2 ; : : : ; a n ) of n items,
Reference: [51] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational Geometry: an Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Indeed, a straightforward application of the lemma by Hakimi and Schmeichel would require O (n 3 ) time to enumerate them. They reduce the time to O (n 2 log n) using the powerful plane sweeping technique (e.g., see <ref> [51] </ref>), which involves "sweeping" the plane with a line L while maintaining appropriate data structures for the points L encounters along the way. <p> In this case 10 we can use binary-search-based parametric searching [13] applied to a well-known "binary search" tangent-finding method (e.g., see <ref> [21, 51] </ref>) to find all such tangents in O (n log n) time. This may still not restrict our interval of * values to [* fl ; * fl ], however, for a vertex v will have the same vertex of tangency, t (v), over a range of * values.
Reference: [52] <author> J.-M. Robert and G. Toussaint, </author> <title> "Linear approximation of simple objects," </title> <booktitle> in Proc. 9th Sympos. Theoret. Aspects Comput. Sci., Lecture Notes in Computer Science, </booktitle> <volume> vol. 577, </volume> <publisher> Springer-Verlag, </publisher> <pages> 233-244, </pages> <year> 1992. </year>
Reference-contexts: Robert and Toussaint <ref> [52] </ref> study the problem of finding a line L 2 that minimizes a weighted minmax error measure to a set of convex polygons in O (n 2 log n) time.
Reference: [53] <author> R. Seidel, </author> <title> "Small-dimensional linear programming and convex hulls made easy," </title> <journal> Discrete Com-put. Geom., </journal> <volume> 6, </volume> <pages> 423-434, </pages> <year> 1991. </year>
Reference-contexts: Of course, the case k = n 1 is trivial, and there is a simple reduction of the case k = 1 to 3-dimensional linear programming, which can be solved in O (n) time <ref> [12, 20, 40, 42, 43, 53] </ref>. Thus, the interesting cases are for 1 &lt; k &lt; n 1. We show how to solve this problem for any such k in O (n log n) time.
Reference: [54] <author> S. Suri, </author> <title> "A linear time algorithm for minimum link paths inside a simple polygon," Comput. Vision Graph. </title> <journal> Image Process., </journal> <volume> 35, </volume> <pages> 99-110, </pages> <year> 1986. </year>
Reference-contexts: Their method can be viewed as an extension of the linear-time method of Suri <ref> [54] </ref>, which computes a minimum-link path inside a simple polygon, to the problem of finding a minimum-link monotone polygonal chain that "stabs" a given set of line segments. <p> In addition, Imai and Iri [34, 35] give an O (n) time method for finding the minimum-link function approximating a given monotone chain. Their method is very similar to an O (n) time method independently discovered by Suri <ref> [54, 55] </ref> for solving the more-general problem of finding a minimum link path joining two points inside a simple polygon. There has also been some work on approximations that are required to use a subset of the endpoints of the given polygonal chain. <p> There is also a rich literature that studies minimum-link distance as a metric in its own right (e.g., see <ref> [6, 23, 24, 37, 39, 47, 48, 54, 55] </ref>). 1.3 Our results As mentioned above, we give an O (n log n) time algorithm for finding a best k-link piecewise-linear function approximating a set S of n points in the plane under the uniform metric.
Reference: [55] <author> S. Suri, </author> <title> Minimum link paths in polygons and related problems, </title> <type> Ph.D. thesis, </type> <institution> Dept. Comput. Sci., Johns Hopkins Univ., Baltimore, MD, </institution> <year> 1987. </year>
Reference-contexts: In addition, Imai and Iri [34, 35] give an O (n) time method for finding the minimum-link function approximating a given monotone chain. Their method is very similar to an O (n) time method independently discovered by Suri <ref> [54, 55] </ref> for solving the more-general problem of finding a minimum link path joining two points inside a simple polygon. There has also been some work on approximations that are required to use a subset of the endpoints of the given polygonal chain. <p> There is also a rich literature that studies minimum-link distance as a metric in its own right (e.g., see <ref> [6, 23, 24, 37, 39, 47, 48, 54, 55] </ref>). 1.3 Our results As mentioned above, we give an O (n log n) time algorithm for finding a best k-link piecewise-linear function approximating a set S of n points in the plane under the uniform metric.
Reference: [56] <author> S. Suri, </author> <title> "Computing geodesic furthest neighbors in simple polygons," </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 39, </volume> <pages> 220-235, </pages> <year> 1989. </year>
Reference-contexts: Similarly, let g (*) be the shortest path from g 1 to g n that does not go below G (*) and does not cross U (*). Such paths were introduced by Lee and Preparata [38] and are often referred to as geodesic paths <ref> [1, 7, 10, 25, 28, 45, 46, 56] </ref>, and the union of two such paths is often called an hourglass [22, 26]. Let us therefore use H (*) to denote this hourglass u (*) [ g (*).
Reference: [57] <author> G. T. Toussaint, </author> <title> "On the complexity of approximating polygonal curves in the plane," </title> <booktitle> in Proc. IASTED, International Symposium on Robotics and Automation, Lugano, </booktitle> <address> Switzerland, </address> <year> 1985. </year>
Reference-contexts: There has also been some work on approximations that are required to use a subset of the endpoints of the given polygonal chain. For example, using an approach of Imai and Iri [33, 35], Toussaint <ref> [57] </ref> and Melkman and O'Rourke [44] give several O (n 2 log n) time methods under various metrics.
Reference: [58] <author> D. P. Wang, N. F. Huang, H. S. Chao, and R. C. T. Lee, </author> <title> "Plane sweep algorithms for polygonal approximation problems with applications," </title> <booktitle> in Proc. 4th Annu. Internat. Sympos. Algorithms Comput. (ISAAC 93), Lecture Notes in Computer Science, </booktitle> <volume> vol. 762, </volume> <publisher> Springer-Verlag, </publisher> <pages> 515-522, </pages> <year> 1993. </year>
Reference-contexts: They reduce the time to O (n 2 log n) using the powerful plane sweeping technique (e.g., see [51]), which involves "sweeping" the plane with a line L while maintaining appropriate data structures for the points L encounters along the way. More recently, Wang et al. <ref> [58] </ref> show how to use an even more clever plane sweep procedure to find a best k-link approximation under the uniform metric in O (n 2 ) time. 1.2 Related work With the exception of the papers by Hakimi and Schmeichel [30] and Wang et al. [58], related work in the <p> recently, Wang et al. <ref> [58] </ref> show how to use an even more clever plane sweep procedure to find a best k-link approximation under the uniform metric in O (n 2 ) time. 1.2 Related work With the exception of the papers by Hakimi and Schmeichel [30] and Wang et al. [58], related work in the computational geometry literature has been directed at what can be viewed as the "inverse problem," which is also addressed in the paper by Hakimi and Schmeichel [30].
References-found: 58

