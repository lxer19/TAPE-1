URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/hauck-TripTools.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/papers/
Root-URL: 
Title: Mapping Tools for the Triptych FPGA  
Author: Carl Ebeling, Larry McMurchie, Scott Hauck, Steven Burns 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Note: submitted to IEEE Transactions on VLSI Systems  
Abstract: Field-programmable gate arrays (FPGAs) have recently become a dominant implementation medium for digital logic. One of the most important keys to using FPGAs effectively is a complete, automated software system for mapping onto the FPGA architecture. Unfortunately, many of the tools necessary require different techniques than traditional circuit implementation options, and these techniques are often developed specifically for only a single FPGA architecture. In this paper we describe automatic mapping tools for Triptych 1 , an FPGA architecture with improved logic density and performance over commercial FPGAs. These tools include a simulated-annealing placement algorithm which handles the routeability issues of fine-grained FPGAs, and an architecture-adaptive routing algorithm which can easily be retargeted to other FPGAs. We also describe extensions to these algorithms for mapping asynchronous circuits to Montage, the first FPGA architecture to completely support asynchronous and synchronous interface applications.
Abstract-found: 1
Intro-found: 1
Reference: [Alexander94] <author> M. Alexander, </author> <title> "A Unified New Approach to FPGA Routing Based on Multi-Weighted Graphs," </title> <booktitle> 2nd International ACM/SIGDA Workshop on Field-Programmable Gate Arrays, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: Delay is usually factored into the standard rip-up and retry approach by ordering the nets to be routed so that critical nets are routed most directly [Brown92]. How to balance the competing goals of minimizing delay of critical paths and minimizing congestion is an open question. <ref> [Alexander94] </ref> presents a general multi-weighted graph formalism that attempts to accommodate delay and congestion. Results based only upon congestion elimination compare favorably with those of [Brown92]. However, the work is preliminary and no results are given that compare critical path lengths.
Reference: [Algotronix91] <author> Algotronix Limited, </author> <note> CAL1024 Preliminary Datasheet, </note> <year> 1991. </year>
Reference-contexts: While standard cell techniques are sufficient for those FPGAs that invest a large portion of their chip area in routing resources [Xilinx93], special care must be taken in FPGA architectures that seek to limit the cost of routing. For example, architectures such as the Algotronix CAL <ref> [Algotronix91] </ref> and Triptych have localized, limited routing resources, and a good placement will not only put connected logic functions together, but will also ensure that logic elements are not packed too closely for the routing to succeed.
Reference: [Beetem91] <author> J. Beetem, </author> <title> "Simultaneous Placement and Routing of the LABYRINTH Reconfigurable Logic Array", </title> <booktitle> International Workshop on Field-Programmable Logic and Applications, </booktitle> <address> Oxford, </address> <year> 1991, </year> <pages> pp. 232-243. </pages>
Reference-contexts: Algorithms have been developed specifically for the placement of logic in FPGAs. [Togawa94] uses a min-cut placement combined with hierarchical global routing that introduces signal congestion into the placement process. <ref> [Beetem91] </ref> uses a penalty-driven iterative improvement algorithm. The problem of routing FPGAs bears a considerable resemblance to the problem of global routing for custom integrated circuit design. In both cases the goal is to assign signal routes to routing resources in order to minimize congestion and achieve performance goals.
Reference: [Brown92] <author> S. Brown, J. Rose, Z. Vranesic, </author> <title> "A Detailed Router for Field-Programmable Gate Arrays," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 11, no. 5, </volume> <month> May </month> <year> 1992, </year> <pages> pp. 620-628. </pages>
Reference-contexts: A "blame factor" is introduced to decide what routes need to be ripped up when a connection is not made. [Palczewski92] describes an application of the A* algorithm to the switchboxes in the Xilinx architecture. <ref> [Brown92] </ref> uses a global router to assign connections so that channel densities are balanced. A detailed router generates families of explicit paths within channels to resolve congestion. If some connections are unrealizable, the channel routes are ripped up and a rerouting is performed using larger families of paths. <p> If some connections are unrealizable, the channel routes are ripped up and a rerouting is performed using larger families of paths. Delay is usually factored into the standard rip-up and retry approach by ordering the nets to be routed so that critical nets are routed most directly <ref> [Brown92] </ref>. How to balance the competing goals of minimizing delay of critical paths and minimizing congestion is an open question. [Alexander94] presents a general multi-weighted graph formalism that attempts to accommodate delay and congestion. Results based only upon congestion elimination compare favorably with those of [Brown92]. <p> nets are routed most directly <ref> [Brown92] </ref>. How to balance the competing goals of minimizing delay of critical paths and minimizing congestion is an open question. [Alexander94] presents a general multi-weighted graph formalism that attempts to accommodate delay and congestion. Results based only upon congestion elimination compare favorably with those of [Brown92]. However, the work is preliminary and no results are given that compare critical path lengths. In [Frankle92] a slack analysis is performed to calculate upper bounds for individual source/sink connections. A rip-up and retry scheme then routes signals, increasing upper bounds as needed.
Reference: [Dees81] <author> W. Dees, R. Smith, </author> <title> "Performance of Interconnection Rip-Up and Reroute Strategies," </title> <booktitle> in Proc. 18th Design Automation Conference, </booktitle> <month> June </month> <year> 1981, </year> <pages> pp. 382-390. </pages>
Reference-contexts: By itself, this technique usually yields many unrouteable nets, which were rerouted by hand. A multitude of rip-up and retry approaches have been proposed to remedy the deficiencies of this approach <ref> [Kuh86, Dees81] </ref>. In essence, rip-up and retry involves rerouting nets in congested areas. The basic problem of rip-up and retry is that the success of a route is dependent not just on the choice of which nets to reroute, but also on the order that the rerouting is done.
Reference: [Frankle92] <author> J. Frankle, </author> <title> "Iterative and Adaptive Slack Allocation for Performance-driven Layout and FPGA Routing," </title> <booktitle> in Proc. 29h Design Automation Conference, </booktitle> <month> June </month> <year> 1992, </year> <pages> pp. 536-542. </pages>
Reference-contexts: Results based only upon congestion elimination compare favorably with those of [Brown92]. However, the work is preliminary and no results are given that compare critical path lengths. In <ref> [Frankle92] </ref> a slack analysis is performed to calculate upper bounds for individual source/sink connections. A rip-up and retry scheme then routes signals, increasing upper bounds as needed. Once the routing is completed, selected connections are rerouted to reduce the overall delay.
Reference: [Hill91] <author> D. Hill, </author> <title> "A CAD System for the Design of Field Programmable Gate Arrays," </title> <booktitle> in Proc. 28t Design Automation Conference, </booktitle> <month> June </month> <year> 1991, </year> <pages> pp. 187-192. </pages>
Reference-contexts: Several papers have described versions of shortest path with rip-up and retry targeted to FPGAs. <ref> [Hill91] </ref> uses a breadth-first search while performing routes in random order.
Reference: [Kuh86] <author> E. Kuh, M. Marek-Sadowska, </author> <title> "Global Routing," in Layout Design and Verification, </title> <editor> T. Ohtsuki, Ed., </editor> <publisher> Elsevier Science Publishers B. V. (North-Holland), </publisher> <year> 1986, </year> <pages> pp. 169-198. </pages>
Reference-contexts: By itself, this technique usually yields many unrouteable nets, which were rerouted by hand. A multitude of rip-up and retry approaches have been proposed to remedy the deficiencies of this approach <ref> [Kuh86, Dees81] </ref>. In essence, rip-up and retry involves rerouting nets in congested areas. The basic problem of rip-up and retry is that the success of a route is dependent not just on the choice of which nets to reroute, but also on the order that the rerouting is done.
Reference: [Lee61] <author> C. Lee, </author> <title> "An Algorithm for Path Connections and its Applications," </title> <journal> IRE Trans. Electron. Comput., </journal> <volume> vol. EC-10, </volume> <year> 1961, </year> <pages> pp. 346-365. </pages>
Reference-contexts: This distinction is important, as it prevents direct application of much of the work that has been done in custom IC routing. By far the most common approach to global routing of custom ICs is a shortest path algorithm with obstacle avoidance <ref> [Lee61] </ref>. By itself, this technique usually yields many unrouteable nets, which were rerouted by hand. A multitude of rip-up and retry approaches have been proposed to remedy the deficiencies of this approach [Kuh86, Dees81]. In essence, rip-up and retry involves rerouting nets in congested areas.
Reference: [Nair87] <author> R. Nair, </author> <title> "A Simple Yet Effective Technique for Global Wiring," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. CAD-6, no. 6, </volume> <month> March </month> <year> 1987, </year> <pages> pp. 165-172. </pages>
Reference-contexts: weighted relative to the critical path, and the contribution of their length to the overall cost metric are scaled down for less critical nets. 3 Triptych Routing Software Our approach to routing for Triptych is based on an iterative approach to global routing of custom integrated circuits developed by Nair <ref> [Nair87] </ref>. This approach differs in several aspects from most forms of rip-up and retry. Every net is ripped up and rerouted on every iteration even if it does not pass through a congested area.
Reference: [Palczewski92] <author> M. Palczewski, </author> <title> "Plane Parallel A* Maze Router and its Application to FPGAs," </title> <booktitle> in Proc. 29th Design Automation Conference, </booktitle> <month> June </month> <year> 1992, </year> <pages> pp 691-697. </pages>
Reference-contexts: Several papers have described versions of shortest path with rip-up and retry targeted to FPGAs. [Hill91] uses a breadth-first search while performing routes in random order. A "blame factor" is introduced to decide what routes need to be ripped up when a connection is not made. <ref> [Palczewski92] </ref> describes an application of the A* algorithm to the switchboxes in the Xilinx architecture. [Brown92] uses a global router to assign connections so that channel densities are balanced. A detailed router generates families of explicit paths within channels to resolve congestion.
Reference: [Sechen87] <author> C. Sechen, K. Lee, </author> <title> "An Improved Simulated Annealing Algorithm for Row-Based Placment," </title> <booktitle> Proc. IEEE International Conference on Computer Aided Design, </booktitle> <month> Nov. </month> <year> 1987, </year> <pages> pp. 478-481. </pages>
Reference-contexts: Simulated annealing has been applied to the FPGA placement problem in a manner similar to the placement of standard cells <ref> [Sechen87] </ref>. While standard cell techniques are sufficient for those FPGAs that invest a large portion of their chip area in routing resources [Xilinx93], special care must be taken in FPGA architectures that seek to limit the cost of routing.
Reference: [Togawa94] <author> N. Togawa, M. Sato, T. Ohtuski, </author> <title> "A Simultaneous Placement and Global Routing Algorithm for Field-Programmable Gate Arrays," </title> <booktitle> presented at FPGA94, </booktitle> <address> Berkeley, </address> <year> 1994. </year>
Reference-contexts: Algorithms have been developed specifically for the placement of logic in FPGAs. <ref> [Togawa94] </ref> uses a min-cut placement combined with hierarchical global routing that introduces signal congestion into the placement process. [Beetem91] uses a penalty-driven iterative improvement algorithm. The problem of routing FPGAs bears a considerable resemblance to the problem of global routing for custom integrated circuit design.
Reference: [Walkup92] <author> E. Walkup, S. Hauck, G. Borriello, C. Ebeling, </author> <title> "Routing-directed Placement for the Triptych FPGA," </title> <booktitle> Proceedings of FPGA92, </booktitle> <address> Berkeley, CA, </address> <year> 1992. </year>
Reference-contexts: Also, by performing a slack analysis only at the beginning and the end of the routing process, opportunities for balancing congestion and delay are lost. 2 Triptych Placement Software In previous work we explored using forcedirected placement <ref> [Walkup92] </ref>. Although computationally efficient, the forcedirected approach has difficulty with any metrics beyond simple wirelength minimization. In the current work a simulated annealing approach was chosen so that several different metrics could be optimized.
Reference: [Xilinx93] <author> Xilinx, Inc., </author> <title> "XACT Development System Reference Guide," </title> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: Simulated annealing has been applied to the FPGA placement problem in a manner similar to the placement of standard cells [Sechen87]. While standard cell techniques are sufficient for those FPGAs that invest a large portion of their chip area in routing resources <ref> [Xilinx93] </ref>, special care must be taken in FPGA architectures that seek to limit the cost of routing.
References-found: 15

