URL: http://www.cs.umd.edu/projects/bdisk/pushpull.ps
Refering-URL: http://http.cs.berkeley.edu/~randy/BTG.html
Root-URL: 
Email: sa@cs.brown.edu  franklin@cs.umd.edu  sbz@cs.brown.edu  
Title: Balancing Push and Pull for Data Broadcast  
Author: Swarup Acharya Michael Franklin Stanley Zdonik 
Affiliation: Brown University  University of Maryland  Brown University  
Date: May 1997  
Note: Appears in Proceedings of ACM SIGMOD Conference, Tuscon, Arizona,  
Abstract: The increasing ability to interconnect computers through internetworking, wireless networks, high-bandwidth satellite, and cable networks has spawned a new class of information-centered applications based on data dissemination. These applications employ broadcast to deliver data to very large client populations. We have proposed the Broadcast Disks paradigm [Zdon94, Acha95b] for organizing the contents of a data broadcast program and for managing client resources in response to such a program. Our previous work on Broadcast Disks focused exclusively on the push-based approach, where data is sent out on the broadcast channel according to a periodic schedule, in anticipation of client requests. In this paper, we study how to augment the push-only model with a pull-based approach of using a backchannel to allow clients to send explicit requests for data to the server. We analyze the scalability and performance of a broadcast-based system that integrates push and pull and study the impact of this integration on both the steady state and warm-up performance of clients. Our results show that a client backchan-nel can provide significant performance improvement in the broadcast environment, but that unconstrained use of the backchannel can result in scalability problems due to server saturation. We propose and investigate a set of three techniques that can delay the onset of saturation and thus, enhance the performance and scalability of the system. 
Abstract-found: 1
Intro-found: 1
Reference: [Acha95a] <author> S. Acharya, R. Alonso, M. Franklin, S. Zdonik, </author> <title> Broadcast Disks: Data Management for Asymmetric Communication Environments, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Jose, CA, </address> <month> May, </month> <year> 1995. </year>
Reference-contexts: The algorithm used by the server to generate the broadcast schedule requires the following inputs: the number of disks, the relative frequency of each disk and assignments of data items to the disks on which they are to be broadcast. The algorithm is described in detail in <ref> [Acha95a] </ref>. Our previous work has shown that a cache replacement algorithm that is based purely on access probabilities (e.g., LRU) can perform poorly in this environment. Better performance is achieved by using a cost-based replacement algorithm that takes the frequency of broadcast into account. <p> Details of the original model are available in <ref> [Acha95a] </ref>. The simulation model is shown in Figure 2. The simulated clients (represented as MC and VC as described below) access data from the broadcast channel. <p> Thus, at higher values of Noise, MC's performance can be expected to quite bad. The details of how Noise is implemented have been described in our previous work <ref> [Acha95a] </ref>. In this study, we use the PIX algorithm described in Section 2.1 to manage the cache when pages are retrieved from the Broadcast Disk. <p> Our work on Broadcast Disks differs from these in that we consider multilevel disks and their relationship to cache management. In <ref> [Acha95a] </ref>, we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. In [Acha96a], we showed how opportunistic prefetching by the client can significantly improve performance over demand-driven caching.
Reference: [Acha95b] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> Dissemination-based Data Delivery Using Broadcast Disks, </title> <journal> IEEE Personal Communications, </journal> <volume> 2(6), Decem-ber, </volume> <year> 1995. </year>
Reference-contexts: Pull In previous work we have proposed and studied Broadcast Disks as a means for coping with communications asymmetry <ref> [Zdon94, Acha95b] </ref>. This approach addresses broadcast scheduling and client-side storage management policies for the periodic broadcast of data. <p> Section 5 discusses related work. Section 6 summarizes the results of the paper. 2 The Broadcast Setting In this section we briefly sketch the Broadcast Disk approach (for more detail, see <ref> [Acha95b] </ref>) and present a high-level view of the extensions made to the approach to incorporate a pull-based backchannel. 2.1 Broadcast Disks The Broadcast Disk paradigm is based on a cyclic broadcast of pages (or objects) and a corresponding set of client cache management techniques.
Reference: [Acha96a] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> Prefetch ing from a Broadcast Disk, </title> <booktitle> 12th International Conference on Data Engineering, </booktitle> <address> New Orleans, LA, </address> <month> February, </month> <year> 1996. </year>
Reference-contexts: Our work on Broadcast Disks differs from these in that we consider multilevel disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. In <ref> [Acha96a] </ref>, we showed how opportunistic prefetching by the client can significantly improve performance over demand-driven caching.
Reference: [Acha96b] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> Dissem inating Updates on Broadcast Disks, </title> <booktitle> Proc. 22 nd VLDB Conf., </booktitle> <address> Bombay, India, </address> <month> September, </month> <year> 1996. </year>
Reference-contexts: We do, however, study both the steady-state performance and the warm-up time for clients. 3. Data is read only. In previous work, we studied techniques for managing volatile data in a Broadcast Disk environment <ref> [Acha96b] </ref>. We showed that, for moderate update rates, it is possible to approach the performance of the read-only case. Thus, in order to make progress on the problem at hand, we have temporarily ignored that issue here. <p> In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. In [Acha96a], we showed how opportunistic prefetching by the client can significantly improve performance over demand-driven caching. More recently, in <ref> [Acha96b] </ref>, we studied the influence of volatile data on the client performance and showed that the Broadcast Disk environment is very robust in the presence of updates. 14 The Datacycle Project [Bowe92, Herm87] at Bell-core investigated the notion of using a repetitive broadcast medium for database storage and query processing.
Reference: [Amma85] <author> M. Ammar, J. Wong, </author> <title> The Design of Teletext Broadcast Cycles, Perf. Evaluation, </title> <month> 5 </month> <year> (1985). </year>
Reference-contexts: IPP saturates earlier, but is overall less sensitive to noise because of the safety net effect of the scheduled broadcast. 5 Related Work The basic idea of managing broadcast data has been investigated by a number of projects <ref> [Amma85, Herm87, Giff90, Bowe92, Imie94a, Imie94b] </ref>. Our work on Broadcast Disks differs from these in that we consider multilevel disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. <p> Thus, while there is a correlation between their results and ours when their model is stable (corresponding to a low ThinkTimeRatio in this work), in general, those results are not directly applicable here. There has also been work on broadcasting in Tele-tex systems <ref> [Amma85, Wong88] </ref>. [Wong88] presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework.
Reference: [Best96] <author> A. Bestavros, C. Cunha, </author> <title> Server-initiated Doc ument Dissemination for the WWW, IEEE Data Engineering Bulletin, </title> <type> 19(3), </type> <month> September, </month> <year> 1996. </year>
Reference-contexts: A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients. Some recent applications of dissemination-based systems include information dissemination on the Internet <ref> [Yan95, Best96] </ref>, Advanced Traveler Information Systems [Shek96] and dissemination using satellite networks [Dao96]. Work by Imielinski and Viswanathan [Imie94c, Vish94] is more closely related to the results we report here, in terms of studying the trade-offs between pull and push in a broadcast environment.
Reference: [Bowe92] <author> T. Bowen, G. Gopal, G. Herman, T. Hickey, K. Lee, W. Mansfield, J. Raitz, A. Weinrib, </author> <title> The Datacycle Architecture, </title> <journal> CACM, </journal> <volume> 35(12), </volume> <month> December, </month> <year> 1992. </year>
Reference-contexts: IPP saturates earlier, but is overall less sensitive to noise because of the safety net effect of the scheduled broadcast. 5 Related Work The basic idea of managing broadcast data has been investigated by a number of projects <ref> [Amma85, Herm87, Giff90, Bowe92, Imie94a, Imie94b] </ref>. Our work on Broadcast Disks differs from these in that we consider multilevel disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. <p> More recently, in [Acha96b], we studied the influence of volatile data on the client performance and showed that the Broadcast Disk environment is very robust in the presence of updates. 14 The Datacycle Project <ref> [Bowe92, Herm87] </ref> at Bell-core investigated the notion of using a repetitive broadcast medium for database storage and query processing. An early effort in information broadcasting, the Boston Community Information System (BCIS) is described in [Giff90].
Reference: [Dao96] <author> S. Dao, B. Perry, </author> <title> Information Dissemination in Hybrid Satellite/Terrestrial Networks, </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 19(3), </volume> <month> September, </month> <year> 1996. </year>
Reference-contexts: A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients. Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan95, Best96], Advanced Traveler Information Systems [Shek96] and dissemination using satellite networks <ref> [Dao96] </ref>. Work by Imielinski and Viswanathan [Imie94c, Vish94] is more closely related to the results we report here, in terms of studying the trade-offs between pull and push in a broadcast environment. They list a number of possible intermediate data delivery options between the two extremes of pure-pull and pure-push.
Reference: [Dire96] <institution> Hughes Network Systems, DirecPC Home Page, </institution> <address> http://www.direcpc.com/, Oct, </address> <year> 1996. </year>
Reference-contexts: Thus, any particular data item is likely to be distributed to many clients. Second, much of the communication technology that has enabled large-scale dissemination supports broadcast, and is, in some cases, intended primarily for broadcast use. For example, direct broadcast satellite providers such as Hughes' Di-recPC <ref> [Dire96] </ref>, and cable television (CATV) companies (through the use of high-bandwidth cable modems) are now, or will soon be, capable of supporting multi-megabit per second data broadcast to millions of homes and offices.
Reference: [Erik94] <author> H. Erikson,MBONE: </author> <title> The Multicast Back bone, </title> <journal> CACM, </journal> <volume> 37(8), </volume> <month> August, </month> <year> 1994. </year>
Reference-contexts: Wireless networking technology for supporting mobile users also necessarily employs a broadcast component, and broadcast (at least in a limited form) is even supported on the Internet through protocols such as IP Multicast which is the basis of the MBone <ref> [Erik94] </ref>. 1.2 Communications Asymmetry A key aspect of dissemination-based systems is their inherent communications asymmetry. By communications asymmetry, we mean that the volume of data transmitted in the downstream direction (i.e., from server (s) to clients) is much greater than the volume transmitted in the upstream direction.
Reference: [Fran96] <author> M. Franklin, S. </author> <title> Zdonik, </title> <journal> Dissemination-Based Information Systems, IEEE Data Engineering Bulletin, </journal> <volume> 19(3), </volume> <month> September, </month> <year> 1996. </year>
Reference-contexts: We are also in the process of implementing a Broadcast Disk facility that will include support for a backchannel. This will allow us and others to easily implement real applications and further test our current results. Finally, as stated in <ref> [Fran96] </ref>, the periodic push approach of Broadcast Disks and the pull-based approach of request-response are just two of many ways for delivering data to clients.
Reference: [Giff90] <author> D. Gifford, </author> <title> Polychannel Systems for Mass Dig ital Communication, </title> <journal> CACM, </journal> <volume> 33(2), </volume> <month> February, </month> <year> 1990. </year>
Reference-contexts: IPP saturates earlier, but is overall less sensitive to noise because of the safety net effect of the scheduled broadcast. 5 Related Work The basic idea of managing broadcast data has been investigated by a number of projects <ref> [Amma85, Herm87, Giff90, Bowe92, Imie94a, Imie94b] </ref>. Our work on Broadcast Disks differs from these in that we consider multilevel disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. <p> An early effort in information broadcasting, the Boston Community Information System (BCIS) is described in <ref> [Giff90] </ref>. BCIS broadcast news articles and information over an FM channel to clients with personal computers specially equipped with radio receivers. Both Datacycle and BCIS used a flat disk approach. The mobility group at Rutgers [Imie94a, Imie94b] has done significant work on data broadcasting in mobile environments.
Reference: [Glan96] <author> D. Glance, </author> <title> Multicast Support for Data Dissem ination in OrbixTalk, </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 19(3), </volume> <month> September, </month> <year> 1996. </year>
Reference-contexts: A DBIS is a distributed information system in which it is possible to freely mix data delivery options. For example, the nodes in 15 a DBIS could communicate using periodic push, request-response, publish/subscribe <ref> [Oki93, Yan95, Glan96] </ref>, and other techniques in various combinations. An integrated DBIS consists of data sources, consumers (i.e., clients), and information brokers. These brokers acquire information from sources, add value to that information (e.g,. some additional computation or organizational structure) and then distribute this information to other brokers or clients.
Reference: [Herm87] <author> G. Herman, G. Gopal, K. Lee, A. Weinrib, </author> <title> The Datacycle Architecture for Very High Throughput Database Systems, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Francisco, CA, </address> <month> May, </month> <year> 1987. </year>
Reference-contexts: IPP saturates earlier, but is overall less sensitive to noise because of the safety net effect of the scheduled broadcast. 5 Related Work The basic idea of managing broadcast data has been investigated by a number of projects <ref> [Amma85, Herm87, Giff90, Bowe92, Imie94a, Imie94b] </ref>. Our work on Broadcast Disks differs from these in that we consider multilevel disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. <p> More recently, in [Acha96b], we studied the influence of volatile data on the client performance and showed that the Broadcast Disk environment is very robust in the presence of updates. 14 The Datacycle Project <ref> [Bowe92, Herm87] </ref> at Bell-core investigated the notion of using a repetitive broadcast medium for database storage and query processing. An early effort in information broadcasting, the Boston Community Information System (BCIS) is described in [Giff90].
Reference: [Imie94a] <author> T. Imielinski, B. Badrinath, </author> <title> Mobile Wireless Computing: Challenges in Data Management, </title> <journal> CACM, </journal> <volume> 37(10), </volume> <month> October, </month> <year> 1994. </year>
Reference-contexts: IPP saturates earlier, but is overall less sensitive to noise because of the safety net effect of the scheduled broadcast. 5 Related Work The basic idea of managing broadcast data has been investigated by a number of projects <ref> [Amma85, Herm87, Giff90, Bowe92, Imie94a, Imie94b] </ref>. Our work on Broadcast Disks differs from these in that we consider multilevel disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. <p> BCIS broadcast news articles and information over an FM channel to clients with personal computers specially equipped with radio receivers. Both Datacycle and BCIS used a flat disk approach. The mobility group at Rutgers <ref> [Imie94a, Imie94b] </ref> has done significant work on data broadcasting in mobile environments. A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients.
Reference: [Imie94b] <author> T. Imielinski, S. Viswanathan, B. Badrinath, </author> <title> Energy Efficient Indexing on Air, </title> <booktitle> Proc. ACM SIG-MOD Conf., </booktitle> <address> Minneapolis, MN, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: On a page miss, clients simply wait for the desired page to appear on the broadcast. 2 Predictability may be important for certain environments. For example, in mobile networks, predictability of the broadcast can be used to reduce power consumption <ref> [Imie94b] </ref>. 4 2. Pure-Pull. Here, all broadcast bandwidth is dedi cated to pulled pages (PullBW=100%) so there is no periodic broadcast. On a page miss, clients immediately send a pull request for the page to the server. <p> IPP saturates earlier, but is overall less sensitive to noise because of the safety net effect of the scheduled broadcast. 5 Related Work The basic idea of managing broadcast data has been investigated by a number of projects <ref> [Amma85, Herm87, Giff90, Bowe92, Imie94a, Imie94b] </ref>. Our work on Broadcast Disks differs from these in that we consider multilevel disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. <p> BCIS broadcast news articles and information over an FM channel to clients with personal computers specially equipped with radio receivers. Both Datacycle and BCIS used a flat disk approach. The mobility group at Rutgers <ref> [Imie94a, Imie94b] </ref> has done significant work on data broadcasting in mobile environments. A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients.
Reference: [Imie94c] <author> T. Imielinski, S. Viswanathan, </author> <title> Adaptive Wire less Information Systems, </title> <booktitle> Proc. of SIGDBS Conf., </booktitle> <address> Tokyo, </address> <month> October, </month> <year> 1994. </year>
Reference-contexts: That is, rather than pushing the entire database, choose a subset of the pages to push, and allow the rest to be obtained by pull only. As is discussed in Section 5, a similar approach was advocated in <ref> [Imie94c, Vish94] </ref>. Although that work was based on a somewhat different system model and had a different objective function, the tradeoffs that arise in both environments are similar. <p> Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan95, Best96], Advanced Traveler Information Systems [Shek96] and dissemination using satellite networks [Dao96]. Work by Imielinski and Viswanathan <ref> [Imie94c, Vish94] </ref> is more closely related to the results we report here, in terms of studying the trade-offs between pull and push in a broadcast environment. They list a number of possible intermediate data delivery options between the two extremes of pure-pull and pure-push. <p> Also, the server in our model uses a bounded queue, which drops requests if it becomes full. Another key difference between the models is that in our environment, any page can be pulled through the backchannel as long as its delay is greater than the threshold. In <ref> [Imie94c, Vish94] </ref>, only pages in the on-demand group can be requested over the back channel. They also assume an implicit symmetric model where both the back and the front channel share a common medium. <p> There has also been work on broadcasting in Tele-tex systems [Amma85, Wong88]. [Wong88] presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework. However, as in <ref> [Imie94c, Vish94] </ref>, their server models are significantly different from ours. 6 Conclusions In this paper, we addressed the problem of adding a backchannel to a broadcast-based environment. <p> These tools could be analytic or they could be a better interface on our simulator. To this end, we would be interested in adapting the analytical framework presented in <ref> [Imie94c, Wong88] </ref> to develop solutions for our model. We also see the utility in developing more dynamic algorithms that can adjust to changes in the system load.
Reference: [Knut81] <author> D. Knuth, </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol II, </volume> <publisher> Addison Wesley, </publisher> <year> 1981. </year>
Reference-contexts: The client think times are also stated in broadcast units, so the relative performance of the approaches are largely independent of the bandwidth of the broadcast medium. The MC has a cache that can hold CacheSize pages. It accesses database pages using a Zipf <ref> [Knut81] </ref> probability distribution. The Zipf distribution (with parameter ) is 5 frequently used to model skewed (i.e., non-uniform) access patterns. MC waits MC ThinkTime broadcast units between requests. If possible, requests are serviced from the cache; otherwise, they are either satisfied by the broadcast or pulled from the server.
Reference: [Oki93] <author> B. Oki, M. Pfluegl, A. Siegel, D. Skeen, </author> <title> The Information Bus An Architecture for Extensible Distributed Systems, </title> <booktitle> Proc. 14th SOSP, </booktitle> <address> Ashville, NC, De-cember, </address> <year> 1993. </year>
Reference-contexts: A DBIS is a distributed information system in which it is possible to freely mix data delivery options. For example, the nodes in 15 a DBIS could communicate using periodic push, request-response, publish/subscribe <ref> [Oki93, Yan95, Glan96] </ref>, and other techniques in various combinations. An integrated DBIS consists of data sources, consumers (i.e., clients), and information brokers. These brokers acquire information from sources, add value to that information (e.g,. some additional computation or organizational structure) and then distribute this information to other brokers or clients.
Reference: [Schw86] <author> H. D. Schwetman, CSIM: </author> <title> A C-based process oriented simulation language, </title> <booktitle> Proc. 1986 Winter Simulation Conf., </booktitle> <year> 1986. </year>
Reference-contexts: The simulator is implemented using CSIM <ref> [Schw86] </ref>. In this section we 3 The case where a server disseminates only a subset of the pages is studied in Section 4.3.
Reference: [Shek96] <author> S. Shekhar, A. Fetterer, D. Liu, </author> <title> Genesis: An Approach to Data Dissemination in Advanced Traveller Information Systems, </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 19(3), </volume> <month> September, </month> <year> 1996. </year>
Reference-contexts: This metric is particularly important for applications in which clients are not expected to monitor the broadcast continuously. For example, in an Advanced Traveler Information System <ref> [Shek96] </ref>, motorists join the system when they drive within range of the information broadcast. when most of the other clients are in steady-state as well. <p> A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients. Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan95, Best96], Advanced Traveler Information Systems <ref> [Shek96] </ref> and dissemination using satellite networks [Dao96]. Work by Imielinski and Viswanathan [Imie94c, Vish94] is more closely related to the results we report here, in terms of studying the trade-offs between pull and push in a broadcast environment.
Reference: [Wong88] <author> J. Wong, </author> <title> Broadcast Delivery, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 76(12), </volume> <month> December, </month> <year> 1988. </year>
Reference-contexts: Thus, while there is a correlation between their results and ours when their model is stable (corresponding to a low ThinkTimeRatio in this work), in general, those results are not directly applicable here. There has also been work on broadcasting in Tele-tex systems <ref> [Amma85, Wong88] </ref>. [Wong88] presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework. <p> Thus, while there is a correlation between their results and ours when their model is stable (corresponding to a low ThinkTimeRatio in this work), in general, those results are not directly applicable here. There has also been work on broadcasting in Tele-tex systems [Amma85, Wong88]. <ref> [Wong88] </ref> presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework. However, as in [Imie94c, Vish94], their server models are significantly different from ours. 6 Conclusions In this paper, we addressed the problem of adding a backchannel to a broadcast-based environment. <p> These tools could be analytic or they could be a better interface on our simulator. To this end, we would be interested in adapting the analytical framework presented in <ref> [Imie94c, Wong88] </ref> to develop solutions for our model. We also see the utility in developing more dynamic algorithms that can adjust to changes in the system load.
Reference: [Vish94] <author> S. Viswanathan, </author> <title> Publishing in Wireless and Wireline Environments, </title> <type> Ph.D Thesis, </type> <institution> Rutgers Univ. </institution> <type> Tech. Report, </type> <month> November, </month> <year> 1994. </year>
Reference-contexts: That is, rather than pushing the entire database, choose a subset of the pages to push, and allow the rest to be obtained by pull only. As is discussed in Section 5, a similar approach was advocated in <ref> [Imie94c, Vish94] </ref>. Although that work was based on a somewhat different system model and had a different objective function, the tradeoffs that arise in both environments are similar. <p> Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan95, Best96], Advanced Traveler Information Systems [Shek96] and dissemination using satellite networks [Dao96]. Work by Imielinski and Viswanathan <ref> [Imie94c, Vish94] </ref> is more closely related to the results we report here, in terms of studying the trade-offs between pull and push in a broadcast environment. They list a number of possible intermediate data delivery options between the two extremes of pure-pull and pure-push. <p> Also, the server in our model uses a bounded queue, which drops requests if it becomes full. Another key difference between the models is that in our environment, any page can be pulled through the backchannel as long as its delay is greater than the threshold. In <ref> [Imie94c, Vish94] </ref>, only pages in the on-demand group can be requested over the back channel. They also assume an implicit symmetric model where both the back and the front channel share a common medium. <p> There has also been work on broadcasting in Tele-tex systems [Amma85, Wong88]. [Wong88] presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework. However, as in <ref> [Imie94c, Vish94] </ref>, their server models are significantly different from ours. 6 Conclusions In this paper, we addressed the problem of adding a backchannel to a broadcast-based environment.
Reference: [Yan95] <author> T. Yan, H. Garcia-Molina, </author> <title> SIFT A Tool for Wide-area Information Dissemination, </title> <booktitle> Proc. 1995 USENIX Technical Conference, </booktitle> <year> 1995. </year>
Reference-contexts: A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients. Some recent applications of dissemination-based systems include information dissemination on the Internet <ref> [Yan95, Best96] </ref>, Advanced Traveler Information Systems [Shek96] and dissemination using satellite networks [Dao96]. Work by Imielinski and Viswanathan [Imie94c, Vish94] is more closely related to the results we report here, in terms of studying the trade-offs between pull and push in a broadcast environment. <p> A DBIS is a distributed information system in which it is possible to freely mix data delivery options. For example, the nodes in 15 a DBIS could communicate using periodic push, request-response, publish/subscribe <ref> [Oki93, Yan95, Glan96] </ref>, and other techniques in various combinations. An integrated DBIS consists of data sources, consumers (i.e., clients), and information brokers. These brokers acquire information from sources, add value to that information (e.g,. some additional computation or organizational structure) and then distribute this information to other brokers or clients.
Reference: [Zdon94] <author> S. Zdonik, M. Franklin, R. Alonso, S. Acharya, </author> <title> Are 'Disks in the Air' Just Pie in the Sky?, </title> <booktitle> IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> December, </month> <year> 1994. </year> <month> 16 </month>
Reference-contexts: Pull In previous work we have proposed and studied Broadcast Disks as a means for coping with communications asymmetry <ref> [Zdon94, Acha95b] </ref>. This approach addresses broadcast scheduling and client-side storage management policies for the periodic broadcast of data.
References-found: 25

