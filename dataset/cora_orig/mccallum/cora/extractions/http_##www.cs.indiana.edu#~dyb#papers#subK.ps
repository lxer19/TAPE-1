URL: http://www.cs.indiana.edu/~dyb/papers/subK.ps
Refering-URL: http://www.cs.indiana.edu/hyplan/dyb.html
Root-URL: http://www.cs.indiana.edu
Title: Threads yield continuations  
Author: SANJEEV KUMAR CARL BRUGGEMAN R. KENT DYBVIG 
Keyword: Concurrency, Continuations, Control delimiters, Control operators, Threads  
Address: Princeton, NJ 08544 USA  Arlington, TX 76019-0015 USA  Bloomington, IN 47405 USA  
Affiliation: Department of Computer Science Princeton University  Department of Computer Science and Engineering University of Texas at Arlington  Computer Science Department Indiana University  
Note: LISP AND SYMBOLIC COMPUTATION: An International Journal,  c 1997 Kluwer Academic Publishers Manufactured in The Netherlands  (Revised:  
Email: (skumar@cs.princeton.edu)  (bruggema@cse.uta.edu)  (dyb@cs.indiana.edu)  
Date: 9, 001-019, 1997  (Received:  
Abstract: Just as a traditional continuation represents the rest of a computation from a given point in the computation, a subcontinuation represents the rest of a subcomputation from a given point in the subcomputation. Subcontinuations are more expressive than traditional continuations and have been shown to be useful for controlling tree-structured concurrency, yet they have previously been implemented only on uniprocessors. This article describes a concurrent implementation of one-shot subcontinuations. Like one-shot continuations, one-shot subcontinuations are first-class but may be invoked at most once, a restriction obeyed by nearly all programs that use continuations. The techniques used to implement one-shot subcontinuations may be applied directly to other one-shot continuation mechanisms and may be generalized to support multi-shot continuations as well. A novel feature of the implementation is that continuations are implemented in terms of threads. Because the implementation model does not rely upon any special language features or compilation techniques, the model is applicable to any language or language implementation that supports a small set of thread primitives. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Halstead, Jr., Robert H. </author> <title> Multilisp: A language for concurrent symbolic computation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7, </volume> <month> 4 (October </month> <year> 1985) </year> <month> 501-538. </month>
Reference-contexts: On encountering such a node, it invokes the controller to suspend the search and returns the node along with a continuation that can be used to resume the search. We use pcall <ref> [1] </ref> here and in Section 4 to illustrate tree-structured concurrency, although any mechanism for introducing tree-structured concurrency would suffice, including a much more primitive fork operator. pcall evaluates its subexpressions in parallel and applies the procedural value of its first subexpression to the values of the remaining subexpressions.
Reference: 2. <author> Birrell, Andrew, Guttag, John V., Horning, James J., and Levin, Roy. </author> <title> Synchronization Primitives for a Multiprocessor: A Formal Specification. </title> <booktitle> In Proceedings of the Eleventh Symposium on Operating Systems Principles (November 1987) 94-102. </booktitle>
Reference-contexts: Some systems provide native support for both threads and continuations. For example, Sting [20, 21] is a dialect of Scheme that provides general, low-level support for concurrency. Cooper et al. [5] describe a Mach-based multiprocessor threads implementation for Standard ML. Their package is based on the Modula-2+ threads package <ref> [2] </ref>. It includes mechanisms for mutual exclusion, synchronization and thread state. Multischeme supports 4 KUMAR, BRUGGEMAN, AND DYBVIG both futures and continuations [25].
Reference: 3. <author> Bruggeman, Carl, Waddell, Oscar, and Dybvig, R. Kent. </author> <title> Representing control in the presence of one-shot continuations. </title> <booktitle> In Proceedings of the SIGPLAN '96 Conference on Programming Language Design and Implementation (May 1996) 99-107. </booktitle>
Reference-contexts: In contrast, a traditional continuation is rooted implicitly at the base of an entire computation. Subcontinua-tions may be used to implement traditional continuations by introducing an explicit root within the top-level evaluation function. One-shot subcon-tinuations, like one-shot continuations <ref> [3, 23] </ref>, are first-class but may be invoked at most once, a restriction obeyed by nearly all programs that use continuations [3]. Hieb et al. [17] describe subcontinuations in detail, give an operational semantics of a small language that incorporates subcontinuations, and describe a sequential implementation of subcontinuations. <p> Subcontinua-tions may be used to implement traditional continuations by introducing an explicit root within the top-level evaluation function. One-shot subcon-tinuations, like one-shot continuations [3, 23], are first-class but may be invoked at most once, a restriction obeyed by nearly all programs that use continuations <ref> [3] </ref>. Hieb et al. [17] describe subcontinuations in detail, give an operational semantics of a small language that incorporates subcontinuations, and describe a sequential implementation of subcontinuations. They also describe briefly how subcontinuations can be implemented in a concurrent setting, although until now a concurrent implementation has not been realized. <p> Katz and Weise [22] also address the relationship between continuations and futures, but rather than providing a mechanism for controlling concurrency, they enforce a sequential semantics that makes concurrency transparent to the programmer. One-shot continuations <ref> [3, 23] </ref> differ from ordinary multi-shot continuations in that a one-shot continuation may be invoked at most once. <p> One-shot continuations cannot, however, be used to implement nondeterminism, as in Prolog [4], in which a continuation is invoked multiple times to yield additional values [8, 14]. This is the only application we have found that requires multi-shot continuations rather than one-shot continuations <ref> [3] </ref>. 3. Subcontinuations A subcontinuation [17] represents the rest of a subcomputation from a given point in the subcomputation. In the presence of tree-shaped concurrency, subcontinuations provide complete control over the process tree, allowing arbitrary nonlocal exits and reinstatement of captured subcomputations that may involve multiple threads.
Reference: 4. <author> Clocksin, William F. and Mellish, Christopher S. </author> <note> Programming in Pro-log. Springer-Verlag, second edition (1984). </note>
Reference-contexts: Most applications that use continuations use them in a one-shot manner. One-shot continuations cannot, however, be used to implement nondeterminism, as in Prolog <ref> [4] </ref>, in which a continuation is invoked multiple times to yield additional values [8, 14]. This is the only application we have found that requires multi-shot continuations rather than one-shot continuations [3]. 3. Subcontinuations A subcontinuation [17] represents the rest of a subcomputation from a given point in the subcomputation.
Reference: 5. <author> Cooper, Eric C. and Morrisett, J. Gregory. </author> <title> Adding Threads to Standard ML. </title> <type> Technical Report CMU-CS-90-186, </type> <institution> Computer Science Department, Carnegie Mellon University (December 1990). </institution>
Reference-contexts: Various concurrency abstractions, including threads, are implemented using first-class continuations on top of this interface. Some systems provide native support for both threads and continuations. For example, Sting [20, 21] is a dialect of Scheme that provides general, low-level support for concurrency. Cooper et al. <ref> [5] </ref> describe a Mach-based multiprocessor threads implementation for Standard ML. Their package is based on the Modula-2+ threads package [2]. It includes mechanisms for mutual exclusion, synchronization and thread state. Multischeme supports 4 KUMAR, BRUGGEMAN, AND DYBVIG both futures and continuations [25].
Reference: 6. <author> Danvy, Olivier and Filinski, Andrzej. </author> <title> Representing control: A study of CPS transformation. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 2, </volume> <month> 4 </month> <year> (1992) </year> <month> 361-391. </month>
Reference-contexts: A continuation captured using F is functional, or com-posable, in that invoking it does not abort but rather returns to the current continuation. Shift and reset <ref> [6] </ref>, which are based on a modified CPS transformation, are similar, differing primarily in that captured continuations include a prompt. Subcontinuations generalize Felleisen's single prompt to multiple nested prompts and allow continuations to be used to control tree-structured con-currency [17].
Reference: 7. <author> Dybvig, R. Kent and Hieb, Robert. </author> <title> Engines from continuations. </title> <journal> Computer Languages, </journal> <volume> 14, </volume> <month> 2 </month> <year> (1989) </year> <month> 109-123. </month>
Reference-contexts: for implementing a variety of control structures, such as nonlocal exits, exceptions, nonblind backtracking [28], fl This material is based on work supported in part by the National Science Foundation under grant numbers CDA-9312614 and CDA 93-03189. 2 KUMAR, BRUGGEMAN, AND DYBVIG nondeterministic computations [8, 14], coroutines [12], and multitasking <ref> [7, 15, 30] </ref>, at the source level. Subcontinuations are more expressive than traditional continuations and may be used to implement similar control structures in the presence of tree-structured concurrency [16, 17]. <p> Gunter, et al. [13] describe how support for multiple prompts may be added to statically typed languages. On a uniprocessor, both traditional and functional continuations are sufficient to implement multitasked threads at the source level <ref> [7, 15, 30] </ref>. Thus, many systems that support continuations provide no primitive support for threads. Continuations have also been used to implement threads on multiprocessors. MP [29] is a low-level interface designed to provide a portable multiprocessing platform.
Reference: 8. <author> Felleisen, Matthias. </author> <title> Transliterating Prolog into Scheme. </title> <type> Technical Report 182, </type> <note> Indiana University (October 1985). </note>
Reference-contexts: 1. Introduction Continuations have proven useful for implementing a variety of control structures, such as nonlocal exits, exceptions, nonblind backtracking [28], fl This material is based on work supported in part by the National Science Foundation under grant numbers CDA-9312614 and CDA 93-03189. 2 KUMAR, BRUGGEMAN, AND DYBVIG nondeterministic computations <ref> [8, 14] </ref>, coroutines [12], and multitasking [7, 15, 30], at the source level. Subcontinuations are more expressive than traditional continuations and may be used to implement similar control structures in the presence of tree-structured concurrency [16, 17]. <p> Most applications that use continuations use them in a one-shot manner. One-shot continuations cannot, however, be used to implement nondeterminism, as in Prolog [4], in which a continuation is invoked multiple times to yield additional values <ref> [8, 14] </ref>. This is the only application we have found that requires multi-shot continuations rather than one-shot continuations [3]. 3. Subcontinuations A subcontinuation [17] represents the rest of a subcomputation from a given point in the subcomputation.
Reference: 9. <author> Felleisen, Matthias. </author> <title> The theory and practice of first-class prompts. </title> <booktitle> In Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages (January 1988) 180-190. 18 KUMAR, BRUGGEMAN, AND DYBVIG </booktitle>
Reference-contexts: Sometimes, however, finer control is required, i.e., only part of the continuation needs to be captured, or only part of the current continuation needs to be discarded when a continuation is reinstated. Felleisen <ref> [9, 10, 11] </ref> introduced the prompt operator to identify the base of a continuation and F to capture the continuation up to the last prompt. A continuation captured using F is functional, or com-posable, in that invoking it does not abort but rather returns to the current continuation.
Reference: 10. <author> Felleisen, Matthias, Friedman, Daniel P., Duba, Bruce, and Merrill, John. </author> <title> Beyond Continuations. </title> <type> Technical Report 216, </type> <institution> Indiana University Computer Science Department (1987). </institution>
Reference-contexts: Sometimes, however, finer control is required, i.e., only part of the continuation needs to be captured, or only part of the current continuation needs to be discarded when a continuation is reinstated. Felleisen <ref> [9, 10, 11] </ref> introduced the prompt operator to identify the base of a continuation and F to capture the continuation up to the last prompt. A continuation captured using F is functional, or com-posable, in that invoking it does not abort but rather returns to the current continuation.
Reference: 11. <author> Felleisen, Matthias, Wand, Mitchell, Friedman, Daniel P., and Duba, Bruce F. </author> <title> Abstract continuations: A mathematical semantics for handling full functional jumps. </title> <booktitle> In Proceedings of the 1988 ACM Conference on Lisp and Functional Programming (July 1988) 52-62. </booktitle>
Reference-contexts: Sometimes, however, finer control is required, i.e., only part of the continuation needs to be captured, or only part of the current continuation needs to be discarded when a continuation is reinstated. Felleisen <ref> [9, 10, 11] </ref> introduced the prompt operator to identify the base of a continuation and F to capture the continuation up to the last prompt. A continuation captured using F is functional, or com-posable, in that invoking it does not abort but rather returns to the current continuation.
Reference: 12. <author> Friedman, Daniel P., Haynes, Christopher T., and Wand, Mitchell. </author> <title> Obtaining coroutines with continuations. </title> <journal> Computer Languages, </journal> <volume> 11, </volume> <month> 3/4 </month> <year> (1986) </year> <month> 143-153. </month>
Reference-contexts: have proven useful for implementing a variety of control structures, such as nonlocal exits, exceptions, nonblind backtracking [28], fl This material is based on work supported in part by the National Science Foundation under grant numbers CDA-9312614 and CDA 93-03189. 2 KUMAR, BRUGGEMAN, AND DYBVIG nondeterministic computations [8, 14], coroutines <ref> [12] </ref>, and multitasking [7, 15, 30], at the source level. Subcontinuations are more expressive than traditional continuations and may be used to implement similar control structures in the presence of tree-structured concurrency [16, 17].
Reference: 13. <author> Gunter, C. A., Remy, R., and Riecke, Jon G. </author> <title> A generalization of exceptions and control in ML-like languages. </title> <booktitle> In Proceedings of the ACM Conference on Functional Programming and Computer Architecture (June 1995). </booktitle>
Reference-contexts: Splitter [26] extends the notion of a continuation in a manner similar to subcon-tinuations in a sequential setting but separates the continuation capture mechanism from the continuation abort mechanism. Gunter, et al. <ref> [13] </ref> describe how support for multiple prompts may be added to statically typed languages. On a uniprocessor, both traditional and functional continuations are sufficient to implement multitasked threads at the source level [7, 15, 30]. Thus, many systems that support continuations provide no primitive support for threads.
Reference: 14. <author> Haynes, Christopher T. </author> <title> Logic continuations. LISP Pointers (1987) 157-176. </title>
Reference-contexts: 1. Introduction Continuations have proven useful for implementing a variety of control structures, such as nonlocal exits, exceptions, nonblind backtracking [28], fl This material is based on work supported in part by the National Science Foundation under grant numbers CDA-9312614 and CDA 93-03189. 2 KUMAR, BRUGGEMAN, AND DYBVIG nondeterministic computations <ref> [8, 14] </ref>, coroutines [12], and multitasking [7, 15, 30], at the source level. Subcontinuations are more expressive than traditional continuations and may be used to implement similar control structures in the presence of tree-structured concurrency [16, 17]. <p> Most applications that use continuations use them in a one-shot manner. One-shot continuations cannot, however, be used to implement nondeterminism, as in Prolog [4], in which a continuation is invoked multiple times to yield additional values <ref> [8, 14] </ref>. This is the only application we have found that requires multi-shot continuations rather than one-shot continuations [3]. 3. Subcontinuations A subcontinuation [17] represents the rest of a subcomputation from a given point in the subcomputation.
Reference: 15. <author> Haynes, Christopher T. and Friedman, Daniel P. </author> <title> Engines build process abstractions. </title> <booktitle> In Proceedings of the 1984 ACM Conference on Lisp and Functional Programming (August 1984) 18-24. </booktitle>
Reference-contexts: for implementing a variety of control structures, such as nonlocal exits, exceptions, nonblind backtracking [28], fl This material is based on work supported in part by the National Science Foundation under grant numbers CDA-9312614 and CDA 93-03189. 2 KUMAR, BRUGGEMAN, AND DYBVIG nondeterministic computations [8, 14], coroutines [12], and multitasking <ref> [7, 15, 30] </ref>, at the source level. Subcontinuations are more expressive than traditional continuations and may be used to implement similar control structures in the presence of tree-structured concurrency [16, 17]. <p> Gunter, et al. [13] describe how support for multiple prompts may be added to statically typed languages. On a uniprocessor, both traditional and functional continuations are sufficient to implement multitasked threads at the source level <ref> [7, 15, 30] </ref>. Thus, many systems that support continuations provide no primitive support for threads. Continuations have also been used to implement threads on multiprocessors. MP [29] is a low-level interface designed to provide a portable multiprocessing platform.
Reference: 16. <author> Hieb, Robert and Dybvig, R. Kent. </author> <title> Continuations and concurrency. </title> <booktitle> In Proceedings of the Second ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (1990). </booktitle>
Reference-contexts: Subcontinuations are more expressive than traditional continuations and may be used to implement similar control structures in the presence of tree-structured concurrency <ref> [16, 17] </ref>. This article describes a thread-based implementation of one-shot subcontinua-tions that has been incorporated into a multithreaded implementation of Chez Scheme on an SGI Power Challenge multiprocessor.
Reference: 17. <author> Hieb, Robert, Dybvig, R. Kent, and Anderson, III, Claude W. </author> <title> Subcon-tinuations. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 7, </volume> <month> 1 (March </month> <year> 1994) </year> <month> 83-110. </month>
Reference-contexts: Subcontinuations are more expressive than traditional continuations and may be used to implement similar control structures in the presence of tree-structured concurrency <ref> [16, 17] </ref>. This article describes a thread-based implementation of one-shot subcontinua-tions that has been incorporated into a multithreaded implementation of Chez Scheme on an SGI Power Challenge multiprocessor. <p> Subcontinua-tions may be used to implement traditional continuations by introducing an explicit root within the top-level evaluation function. One-shot subcon-tinuations, like one-shot continuations [3, 23], are first-class but may be invoked at most once, a restriction obeyed by nearly all programs that use continuations [3]. Hieb et al. <ref> [17] </ref> describe subcontinuations in detail, give an operational semantics of a small language that incorporates subcontinuations, and describe a sequential implementation of subcontinuations. They also describe briefly how subcontinuations can be implemented in a concurrent setting, although until now a concurrent implementation has not been realized. <p> Shift and reset [6], which are based on a modified CPS transformation, are similar, differing primarily in that captured continuations include a prompt. Subcontinuations generalize Felleisen's single prompt to multiple nested prompts and allow continuations to be used to control tree-structured con-currency <ref> [17] </ref>. In related work, Sitaram and Felleisen [27] show how nested prompts may be obtained from single prompts in a sequential setting. <p> One-shot continuations cannot, however, be used to implement nondeterminism, as in Prolog [4], in which a continuation is invoked multiple times to yield additional values [8, 14]. This is the only application we have found that requires multi-shot continuations rather than one-shot continuations [3]. 3. Subcontinuations A subcontinuation <ref> [17] </ref> represents the rest of a subcomputation from a given point in the subcomputation. In the presence of tree-shaped concurrency, subcontinuations provide complete control over the process tree, allowing arbitrary nonlocal exits and reinstatement of captured subcomputations that may involve multiple threads. <p> #f (pcall (lambda (x y z) #f) (if (predicate? (node tree)) (c (lambda (k) (cons (node tree) k)))) (search (left tree)) (search (right tree))))))) (search tree)))))) a continuation that may be used to search for additional nodes. tions by introducing an explicit root, via spawn, into the top-level evaluation function <ref> [17] </ref>. The traditional continuation operator, call/cc, is then defined in terms of the controller rooted in the top-level evaluation function.
Reference: 18. <author> Hieb, Robert, Dybvig, R. Kent, and Bruggeman, Carl. </author> <title> Representing control in the presence of first-class continuations. </title> <booktitle> In Proceedings of the SIGPLAN '90 Conference on Programming Language Design and Implementation (June 1990) 66-77. </booktitle>
Reference-contexts: The implementation requires that the control state of a concurrent computation be represented as a tree of stack segments, just as the control state of a sequential computation is represented as a stack of stack segments to support traditional continuations <ref> [18] </ref>. The implementation of one-shot subcontinuations described in this article uses threads to represent each stack segment in the tree of stack segments required by Hieb's implementation model. Using threads to represent stack segments has several advantages over incorporating support for subcontinu-ations into the lowest levels of a language implementation.
Reference: 19. <author> Hoare, </author> <title> C.A.R. Monitors: An operating system structuring concept. </title> <journal> Communications of the ACM, </journal> <volume> 17, </volume> <month> 10 </month> <year> (1974) </year> <month> 549-557. </month>
Reference-contexts: Thread primitives One-shot subcontinuations can be implemented in any language with a thread system powerful enough to support the set of thread-system features shown in Figure 2. In addition to the ability to dynamically fork threads, this set of features includes mutexes for mutual exclusion and condition variables <ref> [19, 24] </ref> for synchronization. It also includes primitives that allow a thread to block and unblock other threads. These features are supported at least indirectly by most modern thread systems, including the SGI IRIX thread system upon which our implementation is based.
Reference: 20. <author> Jagannathan, Suresh and Philbin, James. </author> <title> A Customizable Substrate for Concurrent Languages. </title> <booktitle> In ACM SIGPLAN '91 Conference on Programming Language Design and Implementation (June 1992). </booktitle>
Reference-contexts: It provides an abstraction of a physical processor, operations to manage its state, and spin locks for mutual exclusion. Various concurrency abstractions, including threads, are implemented using first-class continuations on top of this interface. Some systems provide native support for both threads and continuations. For example, Sting <ref> [20, 21] </ref> is a dialect of Scheme that provides general, low-level support for concurrency. Cooper et al. [5] describe a Mach-based multiprocessor threads implementation for Standard ML. Their package is based on the Modula-2+ threads package [2]. It includes mechanisms for mutual exclusion, synchronization and thread state.
Reference: 21. <author> Jagannathan, Suresh and Philbin, James. </author> <title> A foundation for an efficient multi-threaded Scheme system. </title> <booktitle> In Proceedings of the 1992 Conference on Lisp and Functional Programming (June 1992). THREADS YIELD CONTINUATIONS 19 </booktitle>
Reference-contexts: It provides an abstraction of a physical processor, operations to manage its state, and spin locks for mutual exclusion. Various concurrency abstractions, including threads, are implemented using first-class continuations on top of this interface. Some systems provide native support for both threads and continuations. For example, Sting <ref> [20, 21] </ref> is a dialect of Scheme that provides general, low-level support for concurrency. Cooper et al. [5] describe a Mach-based multiprocessor threads implementation for Standard ML. Their package is based on the Modula-2+ threads package [2]. It includes mechanisms for mutual exclusion, synchronization and thread state.
Reference: 22. <author> Katz, Morry and Weise, Daniel. </author> <title> Continuing into the future: On the interaction of futures and first-class continuations. </title> <booktitle> In Proceedings of the 1990 ACM Conference on Lisp and Functional Programming (June 1990) 176-184. </booktitle>
Reference-contexts: Multischeme supports 4 KUMAR, BRUGGEMAN, AND DYBVIG both futures and continuations [25]. While each of these systems support both continuations and some form of threads, continuation operations are local to threads and cannot be used to control (abort or reinstate) groups of cooperating threads. Katz and Weise <ref> [22] </ref> also address the relationship between continuations and futures, but rather than providing a mechanism for controlling concurrency, they enforce a sequential semantics that makes concurrency transparent to the programmer. One-shot continuations [3, 23] differ from ordinary multi-shot continuations in that a one-shot continuation may be invoked at most once.
Reference: 23. <author> Komiya, Tsuneyasu and Yuasa, Taiichi. </author> <title> Indefinite one-time continuation. </title> <journal> Transactions Information Processing Society of Japan, </journal> <volume> 37, </volume> <month> 1 </month> <year> (1996) </year> <month> 92-100. </month>
Reference-contexts: In contrast, a traditional continuation is rooted implicitly at the base of an entire computation. Subcontinua-tions may be used to implement traditional continuations by introducing an explicit root within the top-level evaluation function. One-shot subcon-tinuations, like one-shot continuations <ref> [3, 23] </ref>, are first-class but may be invoked at most once, a restriction obeyed by nearly all programs that use continuations [3]. Hieb et al. [17] describe subcontinuations in detail, give an operational semantics of a small language that incorporates subcontinuations, and describe a sequential implementation of subcontinuations. <p> Katz and Weise [22] also address the relationship between continuations and futures, but rather than providing a mechanism for controlling concurrency, they enforce a sequential semantics that makes concurrency transparent to the programmer. One-shot continuations <ref> [3, 23] </ref> differ from ordinary multi-shot continuations in that a one-shot continuation may be invoked at most once.
Reference: 24. <author> Lampson, Butler W. and Redell, David D. </author> <title> Experience with processes and monitors in Mesa. </title> <journal> Communications of the ACM, </journal> <volume> 23, </volume> <month> 2 </month> <year> (1980) </year> <month> 105-117. </month>
Reference-contexts: Thread primitives One-shot subcontinuations can be implemented in any language with a thread system powerful enough to support the set of thread-system features shown in Figure 2. In addition to the ability to dynamically fork threads, this set of features includes mutexes for mutual exclusion and condition variables <ref> [19, 24] </ref> for synchronization. It also includes primitives that allow a thread to block and unblock other threads. These features are supported at least indirectly by most modern thread systems, including the SGI IRIX thread system upon which our implementation is based.
Reference: 25. <author> Miller, James S. MultiScheme: </author> <title> A Parallel Processing System Based on MIT Scheme. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology (September 1987). </institution>
Reference-contexts: Cooper et al. [5] describe a Mach-based multiprocessor threads implementation for Standard ML. Their package is based on the Modula-2+ threads package [2]. It includes mechanisms for mutual exclusion, synchronization and thread state. Multischeme supports 4 KUMAR, BRUGGEMAN, AND DYBVIG both futures and continuations <ref> [25] </ref>. While each of these systems support both continuations and some form of threads, continuation operations are local to threads and cannot be used to control (abort or reinstate) groups of cooperating threads.
Reference: 26. <author> Queinnec, Christian and Serpette, Bernard. </author> <title> A dynamic extent control operator for partial continuations. </title> <booktitle> In Conference Record of the Eighteenth Annual ACM Symposium on Principles of Programming Languages (January 1991) 174-184. </booktitle>
Reference-contexts: Subcontinuations generalize Felleisen's single prompt to multiple nested prompts and allow continuations to be used to control tree-structured con-currency [17]. In related work, Sitaram and Felleisen [27] show how nested prompts may be obtained from single prompts in a sequential setting. Splitter <ref> [26] </ref> extends the notion of a continuation in a manner similar to subcon-tinuations in a sequential setting but separates the continuation capture mechanism from the continuation abort mechanism. Gunter, et al. [13] describe how support for multiple prompts may be added to statically typed languages.
Reference: 27. <author> Sitaram, Dorai and Felleisen, Matthias. </author> <title> Control delimiters and their hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 3, </volume> <month> 1 (January </month> <year> 1990) </year> <month> 67-99. </month>
Reference-contexts: Shift and reset [6], which are based on a modified CPS transformation, are similar, differing primarily in that captured continuations include a prompt. Subcontinuations generalize Felleisen's single prompt to multiple nested prompts and allow continuations to be used to control tree-structured con-currency [17]. In related work, Sitaram and Felleisen <ref> [27] </ref> show how nested prompts may be obtained from single prompts in a sequential setting. Splitter [26] extends the notion of a continuation in a manner similar to subcon-tinuations in a sequential setting but separates the continuation capture mechanism from the continuation abort mechanism.
Reference: 28. <author> Sussman, Gerald J. and Steele Jr., Guy L. </author> <title> Scheme: An Interpreter for Extended Lambda Calculus. </title> <type> AI Memo 349, </type> <institution> Massachusetts Institute of Technology Artificial Intelligence Lab (1975). </institution>
Reference-contexts: 1. Introduction Continuations have proven useful for implementing a variety of control structures, such as nonlocal exits, exceptions, nonblind backtracking <ref> [28] </ref>, fl This material is based on work supported in part by the National Science Foundation under grant numbers CDA-9312614 and CDA 93-03189. 2 KUMAR, BRUGGEMAN, AND DYBVIG nondeterministic computations [8, 14], coroutines [12], and multitasking [7, 15, 30], at the source level.
Reference: 29. <author> Tolmach, Andrew and Morrisett, J. Gregory. </author> <title> A Portable Multiprocessor Interface for Standard ML of New Jersey. </title> <type> Technical Report TR-376-92, </type> <address> Princeton University (June 1992). </address>
Reference-contexts: On a uniprocessor, both traditional and functional continuations are sufficient to implement multitasked threads at the source level [7, 15, 30]. Thus, many systems that support continuations provide no primitive support for threads. Continuations have also been used to implement threads on multiprocessors. MP <ref> [29] </ref> is a low-level interface designed to provide a portable multiprocessing platform. It provides an abstraction of a physical processor, operations to manage its state, and spin locks for mutual exclusion. Various concurrency abstractions, including threads, are implemented using first-class continuations on top of this interface.
Reference: 30. <author> Wand, Mitchell. </author> <title> Continuation-based multiprocessing. </title> <booktitle> In Conference Record of the 1980 Lisp Conference (August 1980) 19-28. </booktitle>
Reference-contexts: for implementing a variety of control structures, such as nonlocal exits, exceptions, nonblind backtracking [28], fl This material is based on work supported in part by the National Science Foundation under grant numbers CDA-9312614 and CDA 93-03189. 2 KUMAR, BRUGGEMAN, AND DYBVIG nondeterministic computations [8, 14], coroutines [12], and multitasking <ref> [7, 15, 30] </ref>, at the source level. Subcontinuations are more expressive than traditional continuations and may be used to implement similar control structures in the presence of tree-structured concurrency [16, 17]. <p> Gunter, et al. [13] describe how support for multiple prompts may be added to statically typed languages. On a uniprocessor, both traditional and functional continuations are sufficient to implement multitasked threads at the source level <ref> [7, 15, 30] </ref>. Thus, many systems that support continuations provide no primitive support for threads. Continuations have also been used to implement threads on multiprocessors. MP [29] is a low-level interface designed to provide a portable multiprocessing platform.
References-found: 30

