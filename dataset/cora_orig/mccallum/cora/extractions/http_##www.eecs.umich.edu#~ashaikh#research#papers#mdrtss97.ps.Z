URL: http://www.eecs.umich.edu/~ashaikh/research/papers/mdrtss97.ps.Z
Refering-URL: http://www.eecs.umich.edu/~ashaikh/research/
Root-URL: http://www.cs.umich.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> T. Abdelzaher, S. Dawson, W. Feng, F. Jahanian, S. Johnson, A. Mehra, T. Mitton, A. Shaikh, K. Shin, Z. Wang, and H. Zou, </author> <title> ARMADA Middleware and Communication Services, </title> <type> Technical report, </type> <institution> Dept. of Electrical Engineering and Computer Science, University of Michigan, </institution> <year> 1997. </year> <note> Submitted for publication. </note>
Reference-contexts: Due to space considerations, this paper provides an introduction and basic overview of the different middleware services developed as part of the project. For a more complete description of the ARMADA project and its ongoing research, the reader is referred to <ref> [1] </ref>. The ARMADA project was divided into three complementary thrust areas: (i) low-level middleware for real-time communication support, (ii) middleware services for fault-tolerant group communication and replication, and (iii) dependability evaluation and validation tools. Figure 1 summarizes the structuring of the ARMADA environment. <p> The third thrust of the project was to build a toolset for validating and evaluating the timeliness and fault-tolerance capabilities of the target system. Although a more complete description of the tools is beyond the scope of this paper, details are available in <ref> [1, 2] </ref>. real-time fault-tolerant systems. We believe that by developing our middleware services in conjunction with a real-world application it is possible to design services and, just as importantly, interfaces to those services, that are robust and easily usable by application developers.
Reference: [2] <author> S. Dawson, F. Jahanian, and T. Mitton, </author> <title> Testing of Fault-Tolerant and Real-Time Distributed Systems via Protocol Fault Injection, </title> <booktitle> in International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pp. 404414, </pages> <address> Sendai, Japan, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: The third thrust of the project was to build a toolset for validating and evaluating the timeliness and fault-tolerance capabilities of the target system. Although a more complete description of the tools is beyond the scope of this paper, details are available in <ref> [1, 2] </ref>. real-time fault-tolerant systems. We believe that by developing our middleware services in conjunction with a real-world application it is possible to design services and, just as importantly, interfaces to those services, that are robust and easily usable by application developers.
Reference: [3] <author> A. Mehra, A. Indiresan, and K. Shin, </author> <title> Structur--ing Communication Software for Quality of Service Guarantees, </title> <booktitle> in Proc. 17th Real-Time Systems Symposium, </booktitle> <pages> pp. 144154, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: Such a service must satisfy three primary architectural requirements for guaranteed-QoS communication <ref> [3] </ref>: (i) maintenance of per-connection QoS guarantees, (ii) overload protection via per-connection traffic enforcement, and (iii) fairness to best-effort traffic. <p> To realize the real-time communication service, we adopt the service model of real-time channels [4, 5], a paradigm for guaranteed-QoS communication in packet-switched networks. This model is similar to other proposals for guaranteed-QoS communication [6], and we have developed significant insights by extending the model appropriately for practical use <ref> [3, 7] </ref>. A real-time channel is a simplex, fixed-route, virtual connection between a source and a destination host, with sequenced messages and associated performance guarantees on message delivery. Real-time communication via real-time channels is performed in three phases (see Figure 3). <p> The CORDS services framework, described in section 4, provides a common interface which allows these components to be implemented independently and composed into a single protocol stack. As mentioned above, the run-time resource management in the service architecture is based in large part on the architecture proposed in <ref> [3] </ref>, with significant enhancements to accommodate the specific requirements of the ARMADA project and its implementation environment. Details on the internals of the service components and their interaction are provided in [8].
Reference: [4] <author> D. Ferrari and D. Verma, </author> <title> A Scheme for Real-time Channel Establishment in Wide-Area Networks, </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 8, no. 3, </volume> <pages> pp. 368379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: This facilitates the ability to extend the service to more relaxed QoS models such as probabilistic guarantees, QoS negotiation, and adaptation. To realize the real-time communication service, we adopt the service model of real-time channels <ref> [4, 5] </ref>, a paradigm for guaranteed-QoS communication in packet-switched networks. This model is similar to other proposals for guaranteed-QoS communication [6], and we have developed significant insights by extending the model appropriately for practical use [3, 7].
Reference: [5] <author> D. Kandlur, K. Shin, and D. Ferrari, </author> <title> Real-time Communication in Multi-hop Networks, </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 5, no. 10, </volume> <pages> pp. 10441056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: This facilitates the ability to extend the service to more relaxed QoS models such as probabilistic guarantees, QoS negotiation, and adaptation. To realize the real-time communication service, we adopt the service model of real-time channels <ref> [4, 5] </ref>, a paradigm for guaranteed-QoS communication in packet-switched networks. This model is similar to other proposals for guaranteed-QoS communication [6], and we have developed significant insights by extending the model appropriately for practical use [3, 7].
Reference: [6] <author> C. Aras, J. Kurose, D. Reeves, and H. Schulzrinne, </author> <title> Real-Time Communication in Packet-Switched Networks, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 82, no. 1, </volume> <pages> pp. 122139, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: To realize the real-time communication service, we adopt the service model of real-time channels [4, 5], a paradigm for guaranteed-QoS communication in packet-switched networks. This model is similar to other proposals for guaranteed-QoS communication <ref> [6] </ref>, and we have developed significant insights by extending the model appropriately for practical use [3, 7]. A real-time channel is a simplex, fixed-route, virtual connection between a source and a destination host, with sequenced messages and associated performance guarantees on message delivery.
Reference: [7] <author> A. Mehra, A. Indiresan, and K. Shin, </author> <title> Resource Management for Real-Time Communication: Making Theory Meet Practice, </title> <booktitle> in Proc. 2nd Real-Time Technology and Applications Symposium, </booktitle> <pages> pp. 130 138, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: To realize the real-time communication service, we adopt the service model of real-time channels [4, 5], a paradigm for guaranteed-QoS communication in packet-switched networks. This model is similar to other proposals for guaranteed-QoS communication [6], and we have developed significant insights by extending the model appropriately for practical use <ref> [3, 7] </ref>. A real-time channel is a simplex, fixed-route, virtual connection between a source and a destination host, with sequenced messages and associated performance guarantees on message delivery. Real-time communication via real-time channels is performed in three phases (see Figure 3).
Reference: [8] <author> A. Mehra, A. Shaikh, T. Abdelzaher, Z. Wang, and K. Shin, </author> <title> Realizing Guaranteed-QoS Communication Services on a Micro-kernel Operating System, </title> <note> In preparation, </note> <month> July </month> <year> 1997. </year>
Reference-contexts: Details on the internals of the service components and their interaction are provided in <ref> [8] </ref>. A brief description of the implementation status can be found in Section 4. 3 ARMADA Composable Middleware The previous section introduced the architecture of the ARMADA real-time communication service.
Reference: [9] <author> K. Birman, </author> <title> The Process Group Approach to Reliable Distributed Computing, </title> <journal> Communications of the ACM, </journal> <volume> vol. 36, no. 12, </volume> <pages> pp. 3753, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: The remainder of this section describes each of these services in more detail, and section 4 presents the current status of their implementation. 3.1 RTCAST Group Communication Services Process groups are a widely-studied paradigm for designing dependable distributed systems in both asynchronous <ref> [9, 10, 11, 12] </ref> and synchronous [13, 14, 15] environments. In this approach, a distributed system is structured as a group of cooperating processes which provide services to an application.
Reference: [10] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki, </author> <title> The Transis Approach to High Availability Cluster Communication, </title> <journal> Communications of the ACM, </journal> <volume> vol. 39, no. 4, </volume> <pages> pp. 6470, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: The remainder of this section describes each of these services in more detail, and section 4 presents the current status of their implementation. 3.1 RTCAST Group Communication Services Process groups are a widely-studied paradigm for designing dependable distributed systems in both asynchronous <ref> [9, 10, 11, 12] </ref> and synchronous [13, 14, 15] environments. In this approach, a distributed system is structured as a group of cooperating processes which provide services to an application.
Reference: [11] <author> R. van Renesse, K. Birman, and S. Maffeis, </author> <month> Horus: </month>
Reference-contexts: The remainder of this section describes each of these services in more detail, and section 4 presents the current status of their implementation. 3.1 RTCAST Group Communication Services Process groups are a widely-studied paradigm for designing dependable distributed systems in both asynchronous <ref> [9, 10, 11, 12] </ref> and synchronous [13, 14, 15] environments. In this approach, a distributed system is structured as a group of cooperating processes which provide services to an application.
References-found: 11

