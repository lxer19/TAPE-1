URL: http://wwwis.win.tue.nl/~dignum/atal97imp.ps
Refering-URL: http://wwwis.win.tue.nl/~dignum/papers.html
Root-URL: http://www.win.tue.nl
Email: E.M.Verharen@kub.nl  dignum@win.tue.nl,A.J.Bos@stud.tue.nl  
Title: Implementation of a Cooperative Agent Architecture based on the Language-Action Perspective  
Author: Egon Verharen Frank Dignum Sander Bos 
Address: Tilburg, POBox 90153, 5000 LE, the Netherlands  Eindhoven, POBox 513, 5600 MB, the Netherlands  
Affiliation: Infolab, Tilburg University  Fac. of Maths Comp. Sc., Eindhoven University of Technology  
Abstract: In this paper the architecture and implementation of Cooperative Information Agents (CIA) is described. Taking a language-action perspective to the design of CIAs allows for the specification of obligations and authorizations, and results in the separation of tasks (things the agent must do) and contracts (mutually agreed commitments to the course of communication). The architecture describes the functional components of a CIA: task manager (responsible for managing the agenda), contract manager (managing and negotiating contracts), communication manager (responsible for all external communication), and service execution manager (managing the execution of actions). The prototype agents show how a formal logical theory for communicating agents can be used as a sound basis for an actual implementation. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> P. Cohen and H. Levesque. </author> <title> Communicative actions for artificial agents. </title> <booktitle> In Int. Conf. on Multi-Agent Systems, </booktitle> <pages> pages 65-72, </pages> <year> 1995. </year>
Reference-contexts: There is no such thing as a 'Facilitator' (see e.g. [17]) in our implementation to support the agents functionality, the agents are mostly truly autonomous. 3.2 Tableau Decomposition As described in e.g. <ref> [19, 1] </ref>, the order in which 'action-items' (transactions, messages, local actions) in the CIA may take place are specified using constraints in Propositional Temporal Logic. This logic extends the simple Propositional Logic by adding the operators SOMETIMES, NEXT, ALWAYS and BEFORE. <p> This logic extends the simple Propositional Logic by adding the operators SOMETIMES, NEXT, ALWAYS and BEFORE. A graph is created of all possible paths of item orderings allowed by the constraints. To determine this dependency graph the Tableau Decomposition method is used, which is explained in detail in <ref> [1] </ref>. A small and contrived example of a dependency graph for three items ('a', 'b' and 'c'), and two constraints on those items, a BEFORE (b OR c), b BEFORE c is shown in figure 6. The constraints that identify the nodes are placed below them. <p> updated-by T.changeflight invalidated-by A.skip_it compensated-by A.removedb (ticket) end-result; In the 'plantrip' task 'hotelreservation' is defined as a sub-task, which must reserve a room at the Sheraton or the Hilton (with a preference for the Sheraton). task hotelreservation subtasks: T.hotelreserve (sheraton); T.hotelreserve (hilton); goal = T.hotelreserve (sheraton) [2] XOR T.hotelreserve (hilton) <ref> [1] </ref> end-task; Travel Agent Transactions One of the simpler transactions is the one which initiates the communication between the agents.
Reference: 2. <author> K. Decker and V. Lesser. </author> <title> Task environment centered design of organizations. </title> <booktitle> In AAAI Spring Symp. on Computational Organization Design. </booktitle> <address> Stanford, </address> <year> 1994. </year>
Reference-contexts: Communication through the Java Agent Template (JAT) takes place by sending KQML packages. However, we only use our own defined KQML performatives for our communication language which have a clearly defined semantics in the underlying logic (unlike some standard KQML performatives (see also <ref> [2] </ref> and the FIPA proposal [9])). 2.3 Service Execution Manager Fig. 4. Service Execution Manager The service execution manager (SEM) manages the local actions. It may also handle sim-ple exceptions within the services (usually when the service can be restarted). <p> created-by plantrip closed-by T.betaling updated-by T.changeflight invalidated-by A.skip_it compensated-by A.removedb (ticket) end-result; In the 'plantrip' task 'hotelreservation' is defined as a sub-task, which must reserve a room at the Sheraton or the Hilton (with a preference for the Sheraton). task hotelreservation subtasks: T.hotelreserve (sheraton); T.hotelreserve (hilton); goal = T.hotelreserve (sheraton) <ref> [2] </ref> XOR T.hotelreserve (hilton) [1] end-task; Travel Agent Transactions One of the simpler transactions is the one which initiates the communication between the agents.
Reference: 3. <author> F. Dignum. </author> <title> Social interactions of autonomous agents: Private and global views on communication. </title> <editor> In P.-Y. Schobbens, editor, </editor> <booktitle> Proc. of 3rd workshop of the ModelAge Project, </booktitle> <address> Siena, Italy, </address> <year> 1997. </year>
Reference-contexts: Although the components are similar to the ones in other agent architectures described in the literature (e.g., the general architecture of a social agent in [13] and the TAEMS architecture <ref> [3] </ref>) both the structure and working of the Fig. 1. General CIA architecture components, based on our communication-oriented approach, is distinct. In the rest of this section we will give a short overview of the most important features of the components in this architecture.
Reference: 4. <author> F. Dignum and B. van Linder. </author> <title> Modeling rational agents in a dynamic environment: Putting humpty dumpty together again. </title> <editor> In J.L. Fiadeiro and P.-Y. Schobbens, editors, </editor> <booktitle> Proc. of 2nd workshop of the ModelAge Project, </booktitle> <pages> pages 81-92, </pages> <address> Sesimbra, Portugal, </address> <year> 1996. </year>
Reference-contexts: This is achieved by basing the messages on the theory of speech acts (Searle [15, 16]). Using speech acts we can model existing protocols that are often used, e.g., the Contract Net Protocol, or the protocol from the ADEPT framework [18] as is done in <ref> [4] </ref>. However, the CIA can also react when other agents do not follow the same protocol. Communication through the Java Agent Template (JAT) takes place by sending KQML packages.
Reference: 5. <author> F. Dignum and H. Weigand. </author> <title> Communication and deontic logic. </title> <editor> In R. Wieringa and R. Feenstra, editors, </editor> <booktitle> Information Systems, Correctness and Reusability, </booktitle> <pages> pages 242-260, </pages> <address> Sin-gapore, 1995. </address> <publisher> World Scientific. </publisher>
Reference-contexts: We have described this theory in a multimodal logic (see e.g. <ref> [5, 19, 20] </ref>). In this paper we focus on the way this theory is used, in concepts such as authorization relationships between agents and how obligations (resulting from tasks and contracts) are dealt with.
Reference: 6. <author> F. Dignum and H. Weigand. </author> <title> Modeling communication between cooperative systems. </title> <editor> In J. Iivari et. al., editor, </editor> <booktitle> Proc. of CAISE'95, </booktitle> <pages> pages 140-153, </pages> <address> Berlin, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference: 7. <author> A. Elmagarmid. </author> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kauf-man, </publisher> <year> 1992. </year>
Reference: 8. <author> P. Faratin T. Norman, N. Jennings and E. Mamdani. </author> <title> Designing and implementing a multi-agent architecture for business process management. </title> <editor> In M. Wooldridge J. Mueller and N. Jennings, editors, </editor> <booktitle> Intelligent Agents III Proceedings ATAL-96, </booktitle> <pages> pages 149-162, </pages> <year> 1996. </year>
Reference-contexts: transactions are buffered for a limited amount of time at the receiving end, waiting for the task manager to deliver the corresponding acceptance. 4 Example To give an idea of the actual CIA-implementation an example specification for an agent is given concerning the well-known case of booking a business trip <ref> [8] </ref>. We also included some screenshot of the running agent that results from this specification. 4.1 Example Specification This section describes some of the more important fragments of the CoLa specification used for the travel agent.
Reference: 9. <author> Fipa. </author> <note> http://drogo.cselt.stet.it/fipa </note>
Reference-contexts: Communication through the Java Agent Template (JAT) takes place by sending KQML packages. However, we only use our own defined KQML performatives for our communication language which have a clearly defined semantics in the underlying logic (unlike some standard KQML performatives (see also [2] and the FIPA proposal <ref> [9] </ref>)). 2.3 Service Execution Manager Fig. 4. Service Execution Manager The service execution manager (SEM) manages the local actions. It may also handle sim-ple exceptions within the services (usually when the service can be restarted). The SEM also manages the services the CIA can give to other CIAs.
Reference: 10. <author> F. Flores and J.J. Ludlow. </author> <title> Doing and speaking in the office. </title> <editor> In G. Fick et. al., editor, </editor> <booktitle> DSS: Issues and Challenges, </booktitle> <pages> pages 95-118, </pages> <address> New York, </address> <year> 1980. </year> <title> Pergamon Press. 1 'reis' means trip in the Dutch language </title>
Reference-contexts: Because the abilities of the CIA to communicate and negotiate take an important place we claim that the influence of linguistics for these systems should go beyond that of a natural language interface. We use a language-action perspective <ref> [10] </ref> (based on the speech act theory as developed by Searle [15, 16] and Habermas [12]) to describe the communication itself and guide the architecture.
Reference: 11. <author> R. Frost. </author> <note> The jat. http://cdr.stanford.edu/ABE/JavaAgent.html </note>
Reference-contexts: This data is stored as a number of linked objects in a list. 3.1 Java Agent Template The basis of the CIA implementation is the Java Agent Template (JAT) <ref> [11] </ref>. The JAT offers basic agent functionality, its agents are non-mobile and can exchange any type of information. The CIA is running as an interpreter (message-handler) in the JAT, and is initialized when the JAT starts.
Reference: 12. <author> J. Habermas. </author> <title> The Theory of Communicative Action: Reason and the Rationalization of Society, Volume One. </title> <publisher> Beacon Press, </publisher> <address> Boston, </address> <year> 1984. </year>
Reference-contexts: We use a language-action perspective [10] (based on the speech act theory as developed by Searle [15, 16] and Habermas <ref> [12] </ref>) to describe the communication itself and guide the architecture. In contrast to traditional data-flows the language-action perspective emphasizes what agents (human or automated) do while communicating and how communication brings about a coordination of their activities.
Reference: 13. <author> D. McKay T. Finin, R. Fritzson and R. McEntire. </author> <title> Kqml: a language and protocol for knowledge and information exchange. </title> <editor> In M. Klein et. al., editor, </editor> <booktitle> Distributed AI 13th Int.l. WS, </booktitle> <pages> pages 99-103, </pages> <address> Menlo Park, CA., 1994. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Although the components are similar to the ones in other agent architectures described in the literature (e.g., the general architecture of a social agent in <ref> [13] </ref> and the TAEMS architecture [3]) both the structure and working of the Fig. 1. General CIA architecture components, based on our communication-oriented approach, is distinct. In the rest of this section we will give a short overview of the most important features of the components in this architecture.
Reference: 14. <author> R.A. Meersman A.H.H. Ngu and H. Weigand. </author> <title> Specification and verification of communication for interoperable transactions. In Int.l. </title> <journal> Journal of Intelligent and Cooperative Information Systems, </journal> <volume> vol. 3, no. 1, </volume> <pages> pages 47-65, </pages> <year> 1994. </year>
Reference-contexts: Complete integration of the various resources might not be possible for technical or organizational reasons, hence the growing reliance on interaction between systems. This led to the paradigm of cooperative information systems (CIS) introduced in <ref> [14] </ref>. For systems to be able to cooperate they must have an intelligent interface that can cope with all types of requests and eventualities. A CIS actively maintains its information; it can communicate with other systems and reason about the information that it contains.
Reference: 15. <author> B. Moulin and B. Chaib-draa. </author> <title> An overview of distributed artificial intelligence. </title> <editor> In H. O'Hare and N. Jennings, editors, </editor> <booktitle> Foundations of DAI, </booktitle> <pages> pages 3-55, </pages> <address> New York, 1996. </address> <publisher> John Wiley and Sons Inc. </publisher>
Reference-contexts: Because the abilities of the CIA to communicate and negotiate take an important place we claim that the influence of linguistics for these systems should go beyond that of a natural language interface. We use a language-action perspective [10] (based on the speech act theory as developed by Searle <ref> [15, 16] </ref> and Habermas [12]) to describe the communication itself and guide the architecture. In contrast to traditional data-flows the language-action perspective emphasizes what agents (human or automated) do while communicating and how communication brings about a coordination of their activities. <p> We do not assume that the CIAs follow a fixed communication protocol. Therefore we need a rich communication language in which also the intent of each message is clear. This is achieved by basing the messages on the theory of speech acts (Searle <ref> [15, 16] </ref>). Using speech acts we can model existing protocols that are often used, e.g., the Contract Net Protocol, or the protocol from the ADEPT framework [18] as is done in [4]. However, the CIA can also react when other agents do not follow the same protocol.
Reference: 16. <author> M. Papazoglou. </author> <title> An organizational framework for intelligent cooperative IS. </title> <address> IJICIS-1(1), </address> <year> 1992. </year>
Reference-contexts: Because the abilities of the CIA to communicate and negotiate take an important place we claim that the influence of linguistics for these systems should go beyond that of a natural language interface. We use a language-action perspective [10] (based on the speech act theory as developed by Searle <ref> [15, 16] </ref> and Habermas [12]) to describe the communication itself and guide the architecture. In contrast to traditional data-flows the language-action perspective emphasizes what agents (human or automated) do while communicating and how communication brings about a coordination of their activities. <p> We do not assume that the CIAs follow a fixed communication protocol. Therefore we need a rich communication language in which also the intent of each message is clear. This is achieved by basing the messages on the theory of speech acts (Searle <ref> [15, 16] </ref>). Using speech acts we can model existing protocols that are often used, e.g., the Contract Net Protocol, or the protocol from the ADEPT framework [18] as is done in [4]. However, the CIA can also react when other agents do not follow the same protocol.
Reference: 17. <author> J.R. Searle. </author> <title> Speech Acts. </title> <publisher> Cambridge University Press, </publisher> <year> 1969. </year>
Reference-contexts: The central router mostly serves as an 'agent-name to address'-list maintainer, and accepts only sign-on/ sign-off messages, Internet address-queries based on agent names and requests for broadcasting a message. There is no such thing as a 'Facilitator' (see e.g. <ref> [17] </ref>) in our implementation to support the agents functionality, the agents are mostly truly autonomous. 3.2 Tableau Decomposition As described in e.g. [19, 1], the order in which 'action-items' (transactions, messages, local actions) in the CIA may take place are specified using constraints in Propositional Temporal Logic.
Reference: 18. <author> J.R. Searle and D. Vanderveken. </author> <title> Foundations of illocutionary logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: This is achieved by basing the messages on the theory of speech acts (Searle [15, 16]). Using speech acts we can model existing protocols that are often used, e.g., the Contract Net Protocol, or the protocol from the ADEPT framework <ref> [18] </ref> as is done in [4]. However, the CIA can also react when other agents do not follow the same protocol. Communication through the Java Agent Template (JAT) takes place by sending KQML packages.
Reference: 19. <author> E.M. Verharen. </author> <title> A Language-Action Perspective on the Design of Cooperative Information Agents. </title> <type> PhD thesis, </type> <institution> Katholieke Universiteit Brabant, </institution> <year> 1997. </year>
Reference-contexts: We have described this theory in a multimodal logic (see e.g. <ref> [5, 19, 20] </ref>). In this paper we focus on the way this theory is used, in concepts such as authorization relationships between agents and how obligations (resulting from tasks and contracts) are dealt with. <p> There is no such thing as a 'Facilitator' (see e.g. [17]) in our implementation to support the agents functionality, the agents are mostly truly autonomous. 3.2 Tableau Decomposition As described in e.g. <ref> [19, 1] </ref>, the order in which 'action-items' (transactions, messages, local actions) in the CIA may take place are specified using constraints in Propositional Temporal Logic. This logic extends the simple Propositional Logic by adding the operators SOMETIMES, NEXT, ALWAYS and BEFORE.
Reference: 20. <author> E.M. Verharen and F. Dignum. </author> <title> Cooperative information agents and communication. </title> <editor> In M. Klusch, editor, </editor> <booktitle> Proc. of the 1st Int.l. WS on CIAs, </booktitle> <address> Berlin, </address> <year> 1997. </year> <title> Springer-Verlag. This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: We have described this theory in a multimodal logic (see e.g. <ref> [5, 19, 20] </ref>). In this paper we focus on the way this theory is used, in concepts such as authorization relationships between agents and how obligations (resulting from tasks and contracts) are dealt with.
References-found: 20

