URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/INTERSECT/ima98.ps.gz
Refering-URL: http://www.cs.unc.edu/~geom/CSG/intersect.html
Root-URL: http://www.cs.unc.edu
Email: fkeyser,krishnas,dm,culverg@cs.unc.edu  
Title: Fast and reliable algorithms for boundary evaluation of low-degree sculptured solids  
Author: J. Keyser S. Krishnan D. Manocha T. Culver 
Web: http://www.cs.unc.edu/~geom/geom.html  
Address: Chapel Hill, NC 27599 USA  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: We present efficient representations and algorithms for accurate boundary computation on low-degree sculptured CSG solids using exact arithmetic. Previous approaches to this problem based entirely on floating-point arithmetic suffer from severe robustness problems. We propose a general framework for precisely answering geometric queries on algebraic points, through the use of multi-variate Sturm sequences over "big-rational" numbers. Exact arithmetic guarantees an accurate geometric algorithm, and is likely to be required for perturbation techniques to handle degeneracies. While exact arithmetic is considerably more expensive than fixed-precision arithmetic, we show that for many inputs we can improve the performance of overall algorithm by using floating-point arithmetic without sacrificing accuracy. Overall, the approach leads to a boundary evaluation algorithm that is accurate and reasonably efficient.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arnborg and H. Feng. </author> <title> Algebraic decomposition of regular curves. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 5 </volume> <pages> 131-140, </pages> <year> 1988. </year> <title> 18 Fast and reliable boundary evaluation </title>
Reference-contexts: In practice, it may have multiple real components. Topological resolution consists identifying critical points (turning points and singularities) and establishing a unique connectivity between them. A number of efficient (poly-log time) algorithms have been developed for special kinds of algebraic curves. We use the algorithm by <ref> [1] </ref> for regular curves. The algorithm begins by computing all the turning points of the curve. This is achieved in our case by taking partial derivatives and solving for common roots with the original curve inside a rational rectangle. <p> We use a single representation for a solid: a collection of Keyser, Krishnan, Manocha, Culver 7 trimmed rational tensor-product Bezier patches, together with adjacency information among the patches and their trimming curves. A trimmed patch is a subregion of a surface patch; the region is defined in parameter space <ref> [0; 1] </ref> fi [0; 1] by a loop of bounding curves. The loops are typically made up of several segments; a curve segment may be represented by a polygonal chain, by a spline, or as the zero set of a polynomial in two variables. <p> A trimmed patch is a subregion of a surface patch; the region is defined in parameter space <ref> [0; 1] </ref> fi [0; 1] by a loop of bounding curves. The loops are typically made up of several segments; a curve segment may be represented by a polygonal chain, by a spline, or as the zero set of a polynomial in two variables. <p> Consider the problem of isolating the roots of a polynomial f (x) with x 2 <ref> [0; 1] </ref>, so that each root is known to lie within an interval of small length (say 1=256). Using only our bisection-based exact algorithm, this will require approximately eight volume-function evaluations for each root.
Reference: [2] <author> M. Benouamer, D. Michelucci, and B. Peroche. </author> <title> Error-free boundary evaluation based on a lazy rational arithmetic: a detailed implementation. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 26(6), </volume> <year> 1994. </year>
Reference-contexts: If this problem is not properly addressed, the resulting algorithm becomes unreliable. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedral models <ref> [38, 14, 2, 19] </ref>. These algorithms use a fixed upper bound on the bit-length of arithmetic required to evaluate geometric predicates. In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation [14].
Reference: [3] <author> I. </author> <title> Braid. The synthesis of solid bounded by many faces. </title> <journal> Comm. ACM, </journal> <volume> 18 </volume> <pages> 209-216, </pages> <year> 1975. </year>
Reference-contexts: 1 Introduction Constructive solid geometry (CSG) and boundary representations (B-rep) are two major approaches for representing solids <ref> [3, 33, 19, 30] </ref>. CSG implicitly represents a solid as an algebraic expression, and B-rep explicitly stores an object as a set of surfaces with topology information.
Reference: [4] <author> H. Bronnimann, I. Emiris, V. Pan, and S. Pion. </author> <title> Computing exact geometric predicates using modular arithmetic with single precision. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 174-182, </pages> <year> 1997. </year>
Reference-contexts: When subresultants are used, the overall running time is dominated by the time spent computing signs of determinants of integer matrices. There is considerable literature in computational geometry on efficiently computing signs of determinants <ref> [4, 5, 9] </ref>. However, they are efficient for relatively small matrices (order less than 10 and entries of fewer than 53 bits). In 16 Fast and reliable boundary evaluation our applications, we need to compute determinants of much larger matrices whose entries can be quite big.
Reference: [5] <author> H. Bronnimann and M. Yvinec. </author> <title> Efficient exact evaluation of signs of determinants. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 166-173, </pages> <year> 1997. </year>
Reference-contexts: When subresultants are used, the overall running time is dominated by the time spent computing signs of determinants of integer matrices. There is considerable literature in computational geometry on efficiently computing signs of determinants <ref> [4, 5, 9] </ref>. However, they are efficient for relatively small matrices (order less than 10 and entries of fewer than 53 bits). In 16 Fast and reliable boundary evaluation our applications, we need to compute determinants of much larger matrices whose entries can be quite big.
Reference: [6] <author> J.S. Brown and J.F. Traub. </author> <title> On euclid's algorithm and the theory of subresultant. </title> <journal> Journal of ACM, </journal> <volume> 18(4) </volume> <pages> 505-514, </pages> <year> 1971. </year>
Reference-contexts: This is due to the fact that the size of the coefficients in each successive polynomial grows exponentially [23]. This is a fairly well-studied problem in polynomial GCDs, and has led to the development of the subresultant polynomial remainder sequence algorithm <ref> [6] </ref>). With this approach, the coefficients of the terms of the polynomial sequence can be formulated as the determinant of a submatrix of a Sylvester matrix.
Reference: [7] <author> J.F. Canny. </author> <title> The Complexity of Robot Motion Planning. ACM Doctoral Dissertation Award. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: Exact arithmetic involves computations on algebraic numbers and most of the current implementations of such arithmetic (especially those available as part of computer algebra systems) are extremely slow. Techniques using bit-length estimates may, in the worst case, require bit-lengths which are exponential in the degree of the algebraic functions <ref> [7, 40] </ref>. Moreover, many representations and predicates that are well-understood in the linear domain become rather hard in the curved domain. Overall, no good solutions are known for efficient and robust B-rep computation on curved solids.
Reference: [8] <author> M. S. Casale and J. E. Bobrow. </author> <title> A set operation algorithm for sculptured solids modeled with trimmed patches. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 6 </volume> <pages> 235-247, </pages> <year> 1989. </year>
Reference-contexts: This family of objects can exactly represent quadrics, tori and free-form solids. A number of algorithms have been proposed to compute the B-rep of a CSG tree. The first systematic study of CSG to B-rep conversion appeared in [33] and nowadays the algorithms for conversion are relatively well understood <ref> [19, 30, 8, 35, 25] </ref>. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [10, 17, 15].
Reference: [9] <author> K. L. Clarkson. </author> <title> Safe and effective determinant evaluation. </title> <booktitle> In Proc. 33rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 387-395, </pages> <year> 1992. </year>
Reference-contexts: When subresultants are used, the overall running time is dominated by the time spent computing signs of determinants of integer matrices. There is considerable literature in computational geometry on efficiently computing signs of determinants <ref> [4, 5, 9] </ref>. However, they are efficient for relatively small matrices (order less than 10 and entries of fewer than 53 bits). In 16 Fast and reliable boundary evaluation our applications, we need to compute determinants of much larger matrices whose entries can be quite big.
Reference: [10] <author> C.M.Hoffmann. </author> <title> How solid is solid modeling. </title> <editor> In M.C. Lin and D. Manocha, editors, </editor> <booktitle> Applied Computational Geometry, </booktitle> <pages> pages 1-8. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling <ref> [10, 17, 15] </ref>. It is important that the computed B-rep be accurate, or at least topologically consistent, and this can be jeopardized by even small amounts of error in the representation of the model or in finite-precision computations (round-off errors).
Reference: [11] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: Macaulay [27] provided a general method for eliminating n variables from n homogeneous polynomials. His resultant is expressed as a ratio of two determinants. The Dixon formulation for the cases n = 2; 3 <ref> [34, 11] </ref> is the determinant of a single matrix; the matrix is smaller than Macaulay's numerator, but [11] gives the resultant only if the three equations have the same degree. In our application, it is sufficient to compute resultants for the cases when n = 2 and 3. <p> His resultant is expressed as a ratio of two determinants. The Dixon formulation for the cases n = 2; 3 [34, 11] is the determinant of a single matrix; the matrix is smaller than Macaulay's numerator, but <ref> [11] </ref> gives the resultant only if the three equations have the same degree. In our application, it is sufficient to compute resultants for the cases when n = 2 and 3. <p> Z (s; t); W (s; t)) involves eliminating s and t from the three polynomials X (s; t) xW (s; t) = Y (s; t) yW (s; t) = Z (s; t) zW (s; t) = 0: If the implict form is not already known, we can use Dixon's resultant <ref> [11] </ref> to compute it, as described in [36]. 2.2 Multivariate Sturm sequences Here, we describe briefly the algorithm proposed by Milne [32] to compute the number of common real solutions of n polynomials in n variables contained in an n-dimensional rectangle.
Reference: [12] <author> Tom Duff. </author> <title> Interval arithmetic and recursive subdivision for implicit functions and constructive solid geometry. </title> <journal> ACM Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 131-139, </pages> <year> 1992. </year>
Reference: [13] <author> S. Fang, B. Bruderlin, and X. Zhu. </author> <title> Robustness in solid modeling: a tolerance-based intuitionistic approach. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 25(9) </volume> <pages> 567-576, </pages> <year> 1993. </year>
Reference: [14] <author> S. Fortune. </author> <title> Polyhedral modeling with exact arithmetic. </title> <booktitle> Proceedings of ACM Solid Modeling, </booktitle> <pages> pages 225-234, </pages> <year> 1995. </year> <note> Keyser, Krishnan, Manocha, Culver 19 </note>
Reference-contexts: If this problem is not properly addressed, the resulting algorithm becomes unreliable. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedral models <ref> [38, 14, 2, 19] </ref>. These algorithms use a fixed upper bound on the bit-length of arithmetic required to evaluate geometric predicates. In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation [14]. <p> These algorithms use a fixed upper bound on the bit-length of arithmetic required to evaluate geometric predicates. In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation <ref> [14] </ref>. Besides reliable computation, exact arithmetic allows the use of symbolic perturbation to handle degeneracies [39]. The perturbation scheme greatly simplifies the implementation of the solid modeler. There is relatively little work on robust or accurate B-rep computa Keyser, Krishnan, Manocha, Culver 3 tion algorithms for curved primitives.
Reference: [15] <author> S. Fortune. </author> <title> Robustness issues in geometric algorithms. </title> <editor> In M.C. Lin and D. Manocha, editors, </editor> <booktitle> Applied Computational Geometry, </booktitle> <pages> pages 9-14. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling <ref> [10, 17, 15] </ref>. It is important that the computed B-rep be accurate, or at least topologically consistent, and this can be jeopardized by even small amounts of error in the representation of the model or in finite-precision computations (round-off errors).
Reference: [16] <author> LiDIA Group. </author> <title> A library for computational number theory. </title> <type> Technical report, </type> <institution> TH Darmstadt, Fachbereich Informatik, Institut fur Theo-retische Informatik, </institution> <year> 1997. </year>
Reference-contexts: In 16 Fast and reliable boundary evaluation our applications, we need to compute determinants of much larger matrices whose entries can be quite big. Currently, we use an implementation available as part of LiDIA <ref> [16] </ref>, which computes the determinant modulo each of several primes, then reconstructs the determinant itself from these residues. 6.4 Floating-point approximation One way of improving the performance of exact-arithmetic algorithms is to concentrate on optimizing kernel routines or "inner loops." An independent idea is the use of floating-point routines to approximate
Reference: [17] <author> M. Higashi and et al. </author> <title> Face-based data structure and its application to robust geometric modeling. </title> <booktitle> Proceedings of ACM Solid Modeling, </booktitle> <pages> pages 235-246, </pages> <year> 1995. </year>
Reference-contexts: However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling <ref> [10, 17, 15] </ref>. It is important that the computed B-rep be accurate, or at least topologically consistent, and this can be jeopardized by even small amounts of error in the representation of the model or in finite-precision computations (round-off errors).
Reference: [18] <author> C. Hoffmann, J. Hopcroft, and M. Karasick. </author> <title> Robust set operations on polyhedral solids. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(6) </volume> <pages> 50-59, </pages> <year> 1989. </year>
Reference: [19] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction Constructive solid geometry (CSG) and boundary representations (B-rep) are two major approaches for representing solids <ref> [3, 33, 19, 30] </ref>. CSG implicitly represents a solid as an algebraic expression, and B-rep explicitly stores an object as a set of surfaces with topology information. <p> This family of objects can exactly represent quadrics, tori and free-form solids. A number of algorithms have been proposed to compute the B-rep of a CSG tree. The first systematic study of CSG to B-rep conversion appeared in [33] and nowadays the algorithms for conversion are relatively well understood <ref> [19, 30, 8, 35, 25] </ref>. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [10, 17, 15]. <p> If this problem is not properly addressed, the resulting algorithm becomes unreliable. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedral models <ref> [38, 14, 2, 19] </ref>. These algorithms use a fixed upper bound on the bit-length of arithmetic required to evaluate geometric predicates. In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation [14].
Reference: [20] <author> D. Jackson. </author> <title> Boundary representation modeling with local tolerances. </title> <booktitle> Proceedings of ACM Solid Modeling, </booktitle> <pages> pages 247-253, </pages> <year> 1995. </year>
Reference-contexts: A number of approaches, mostly restricted to polyhedral modelers, have been proposed for robust and accurate B-rep computation. One of the most common approaches for dealing with numerical error is based on using tolerances with floating-point arithmetic <ref> [20] </ref>; however, it is hard to decide a global tolerance value for all computations. Other approaches for dealing with numerical error include adaptive tolerances ([37]) and interval arithmetic ([12]). Symbolic reasoning ([18]) and redundancy elimination ([13]) are among the other methods used to increase robustness in solid modeling applications.
Reference: [21] <author> J. Keyser, S. Krishnan, and D. Manocha. </author> <title> Efficient and accurate b-rep generation of low degree sculptured solids using exact arithmetic. </title> <booktitle> In ACM/SIGGRAPH Symposium on Solid Modeling, </booktitle> <pages> pages 42-55, </pages> <year> 1997. </year>
Reference-contexts: Overall, no good solutions are known for efficient and robust B-rep computation on curved solids. In this paper, we briefly survey our recent work on efficient representations and algorithms for exact boundary computation on Boolean combinations of sculptured solids. More details can be found in <ref> [24, 21, 22] </ref>. Our main contributions include: * Representation: We present compact and exact representations for points, curves and surfaces using algebraic sets with associated topological information. * Kernel routines: We reduce computation of most geometric queries to computing signs of a series of determinants.
Reference: [22] <author> J. Keyser, S. Krishnan, D. Manocha, and T. Culver. </author> <title> Efficient and reliable computation with algebraic numbers for geometric algorithms. </title> <type> Technical Report TR98-012, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1998. </year>
Reference-contexts: Overall, no good solutions are known for efficient and robust B-rep computation on curved solids. In this paper, we briefly survey our recent work on efficient representations and algorithms for exact boundary computation on Boolean combinations of sculptured solids. More details can be found in <ref> [24, 21, 22] </ref>. Our main contributions include: * Representation: We present compact and exact representations for points, curves and surfaces using algebraic sets with associated topological information. * Kernel routines: We reduce computation of most geometric queries to computing signs of a series of determinants.
Reference: [23] <author> D. Knuth. </author> <title> The Art of Computer Programming: Seminumerical Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: Computing these GCD's with Euclid's method is a viable approach, and is the most efficient method for low-degree polynomials. For higher degree polynomials, however, Euclid's method can become quite inefficient. This is due to the fact that the size of the coefficients in each successive polynomial grows exponentially <ref> [23] </ref>. This is a fairly well-studied problem in polynomial GCDs, and has led to the development of the subresultant polynomial remainder sequence algorithm [6]). With this approach, the coefficients of the terms of the polynomial sequence can be formulated as the determinant of a submatrix of a Sylvester matrix.
Reference: [24] <author> S. Krishnan. </author> <title> Efficient and Accurate Boundary Evaluation Algorithms for Sculptured Solids. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of N. Carolina at Chapel Hill, </institution> <year> 1997. </year> <note> Available at http://www.cs.unc.edu/~krishnas/dissertation.html. </note>
Reference-contexts: Overall, no good solutions are known for efficient and robust B-rep computation on curved solids. In this paper, we briefly survey our recent work on efficient representations and algorithms for exact boundary computation on Boolean combinations of sculptured solids. More details can be found in <ref> [24, 21, 22] </ref>. Our main contributions include: * Representation: We present compact and exact representations for points, curves and surfaces using algebraic sets with associated topological information. * Kernel routines: We reduce computation of most geometric queries to computing signs of a series of determinants.
Reference: [25] <author> S. Krishnan and D. Manocha. </author> <title> Efficient representations and techniques for computing b-rep's of csg models with nurbs primitives. </title> <booktitle> In Proceedings of CSG'96, </booktitle> <pages> pages 101-122. </pages> <publisher> Information Geometers Ltd, </publisher> <year> 1996. </year>
Reference-contexts: This family of objects can exactly represent quadrics, tori and free-form solids. A number of algorithms have been proposed to compute the B-rep of a CSG tree. The first systematic study of CSG to B-rep conversion appeared in [33] and nowadays the algorithms for conversion are relatively well understood <ref> [19, 30, 8, 35, 25] </ref>. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [10, 17, 15].
Reference: [26] <author> S. Krishnan and D. Manocha. </author> <title> An efficient surface intersection algorithm based on the lower dimensional formulation. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 16(1) </volume> <pages> 74-106, </pages> <year> 1997. </year> <title> 20 Fast and reliable boundary evaluation </title>
Reference-contexts: For each of these segments, we compute a bounding box (figure 1) around it. Bounding boxes are used to distinguish two such curve segments represented by the same algebraic equation. We perform a subdivision of these boxes until they no longer overlap; the algorithm is described in <ref> [26] </ref>. 3 Boundary evaluation In this section, we give an overview of the algorithm for CSG to B-Rep conversion. <p> A more complete description is contained in <ref> [26] </ref>. 4.2 Curve topology BOOLE constructs intersection curves by finding starting points on the patch boundary and tracing. This technique misses "loops," curve components which do not intersect the patch boundary. A separate loop-detection step is necessary.
Reference: [27] <author> F.S. </author> <title> Macaulay. On some formula in elimination. </title> <journal> Proceedings of Lon-don Mathematical Society, </journal> <volume> 1(33) </volume> <pages> 3-27, </pages> <month> May </month> <year> 1902. </year>
Reference-contexts: Definition 2.1 [34] A resultant of a set of polynomials is an expression involving the coefficients of the polynomials such that the vanishing of the resultant is a necessary and sufficient condition for the set of polynomials to have a common nontrivial root. Macaulay <ref> [27] </ref> provided a general method for eliminating n variables from n homogeneous polynomials. His resultant is expressed as a ratio of two determinants. <p> One option is to eliminate variables one-by-one with successive Sylvester resultants. The disadvantage here is that this process will amass a large extraneous factor. A more efficient approach is to use the Macaulay resultant by eliminating x, y and z in one step, with no extraneous factors <ref> [27] </ref>. The Macaulay formulation expresses the resultant as a ratio of two determinants. The immediate drawback here is that the order of the matrices grows with the degrees of the input equations.
Reference: [28] <author> D. Manocha and J.F. Canny. </author> <title> Multipolynomial resultant algorithms. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(2) </volume> <pages> 99-122, </pages> <year> 1993. </year>
Reference-contexts: The strategy applies to multivariate problems as well. We estimate the roots of bivariate systems (the intersections of curves in &lt; 2 ) by posing a generalized eigenvalue problem (see <ref> [28] </ref>).
Reference: [29] <author> D. Manocha and S. Krishnan. </author> <title> Algebraic pruning: A fast technique for curve and surface intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 20 </volume> <pages> 1-23, </pages> <year> 1997. </year>
Reference: [30] <author> M. Mantyla. </author> <title> An Introduction to Solid Modeling. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction Constructive solid geometry (CSG) and boundary representations (B-rep) are two major approaches for representing solids <ref> [3, 33, 19, 30] </ref>. CSG implicitly represents a solid as an algebraic expression, and B-rep explicitly stores an object as a set of surfaces with topology information. <p> This family of objects can exactly represent quadrics, tori and free-form solids. A number of algorithms have been proposed to compute the B-rep of a CSG tree. The first systematic study of CSG to B-rep conversion appeared in [33] and nowadays the algorithms for conversion are relatively well understood <ref> [19, 30, 8, 35, 25] </ref>. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [10, 17, 15].
Reference: [31] <author> J. Miller and R. Goldman. </author> <title> Combining algebraic rigor with geometric robustness for the detection and calculation of conic sections in the intersection of two quadric surfaces. </title> <booktitle> Proceedings of ACM Solid Modeling, </booktitle> <pages> pages 221-233, </pages> <year> 1991. </year>
Reference-contexts: The perturbation scheme greatly simplifies the implementation of the solid modeler. There is relatively little work on robust or accurate B-rep computa Keyser, Krishnan, Manocha, Culver 3 tion algorithms for curved primitives. Algorithms to handle degenerate intersections between quadrics have been presented in <ref> [31] </ref>. For arbitrary degree sculptured solids, it is difficult to compute tight bounds on the error generated due to floating-point arithmetic. As a result, it is hard to extend algorithms based on tolerances to curved models.
Reference: [32] <author> P. S. Milne. </author> <title> On the solutions of a set of polynomial equations. </title> <booktitle> In Symbolic and Numerical Computation for Artificial Intelligence, </booktitle> <pages> pages 89-102, </pages> <year> 1992. </year>
Reference-contexts: = Y (s; t) yW (s; t) = Z (s; t) zW (s; t) = 0: If the implict form is not already known, we can use Dixon's resultant [11] to compute it, as described in [36]. 2.2 Multivariate Sturm sequences Here, we describe briefly the algorithm proposed by Milne <ref> [32] </ref> to compute the number of common real solutions of n polynomials in n variables contained in an n-dimensional rectangle. This algorithm is an extension of the classical univariate Sturm sequence, which constructs a sequence of polynomials, and counts sign variations of this sequence at the endpoints of the interval. <p> given by P M (b 1 ; b 2 ) + P M (a 1 ; a 2 ) P M (b 1 ; a 2 ) P M (a 1 ; b 2 ) : The justification for various steps and extension to arbitrary dimensions can be found in <ref> [32] </ref>. 2.3 Topological resolution of algebraic plane curves The intersection curve between two surfaces is an algebraic curve, typically of high degree. In practice, it may have multiple real components. Topological resolution consists identifying critical points (turning points and singularities) and establishing a unique connectivity between them.
Reference: [33] <author> A.A.G. Requicha and H.B. Voelcker. </author> <title> Boolean operations in solid modeling: boundary evaluation and merging algorithms. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 73(1), </volume> <year> 1985. </year>
Reference-contexts: 1 Introduction Constructive solid geometry (CSG) and boundary representations (B-rep) are two major approaches for representing solids <ref> [3, 33, 19, 30] </ref>. CSG implicitly represents a solid as an algebraic expression, and B-rep explicitly stores an object as a set of surfaces with topology information. <p> This family of objects can exactly represent quadrics, tori and free-form solids. A number of algorithms have been proposed to compute the B-rep of a CSG tree. The first systematic study of CSG to B-rep conversion appeared in <ref> [33] </ref> and nowadays the algorithms for conversion are relatively well understood [19, 30, 8, 35, 25]. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [10, 17, 15].
Reference: [34] <author> G. Salmon. </author> <title> Lessons Introductory to the Modern Higher Algebra. G.E. </title> <publisher> Stechert & Co., </publisher> <address> New York, </address> <month> 1885. </month>
Reference-contexts: For a system of n homogeneous polynomials in n unknowns, one seeks the relationship between the coefficients of the polynomials and the existence of a nontrivial solution of the system. Definition 2.1 <ref> [34] </ref> A resultant of a set of polynomials is an expression involving the coefficients of the polynomials such that the vanishing of the resultant is a necessary and sufficient condition for the set of polynomials to have a common nontrivial root. <p> Macaulay [27] provided a general method for eliminating n variables from n homogeneous polynomials. His resultant is expressed as a ratio of two determinants. The Dixon formulation for the cases n = 2; 3 <ref> [34, 11] </ref> is the determinant of a single matrix; the matrix is smaller than Macaulay's numerator, but [11] gives the resultant only if the three equations have the same degree. In our application, it is sufficient to compute resultants for the cases when n = 2 and 3. <p> In our application, it is sufficient to compute resultants for the cases when n = 2 and 3. Sylvester's method <ref> [34] </ref> can be used to express the resultant of two polynomials of degree m and n respectively as the determinant of a matrix with (m + n) rows and columns. <p> The denominator removes the extraneous factor in u which is introduced by the iterated resultants. We use the Sylvester resultant <ref> [34] </ref> to eliminate one variable from two polynomials.
Reference: [35] <author> R F Sarraga. </author> <title> Algebraic methods for intersection. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 22 </volume> <pages> 222-238, </pages> <year> 1983. </year>
Reference-contexts: This family of objects can exactly represent quadrics, tori and free-form solids. A number of algorithms have been proposed to compute the B-rep of a CSG tree. The first systematic study of CSG to B-rep conversion appeared in [33] and nowadays the algorithms for conversion are relatively well understood <ref> [19, 30, 8, 35, 25] </ref>. However, the problem of robust and accurate computation of the boundary is considered one of the difficult problems in geometric and solid modeling [10, 17, 15].
Reference: [36] <author> T.W. </author> <title> Sederberg. Implicit and Parametric Curves and Surfaces. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <year> 1983. </year>
Reference-contexts: eliminating s and t from the three polynomials X (s; t) xW (s; t) = Y (s; t) yW (s; t) = Z (s; t) zW (s; t) = 0: If the implict form is not already known, we can use Dixon's resultant [11] to compute it, as described in <ref> [36] </ref>. 2.2 Multivariate Sturm sequences Here, we describe briefly the algorithm proposed by Milne [32] to compute the number of common real solutions of n polynomials in n variables contained in an n-dimensional rectangle.
Reference: [37] <author> M. Segal. </author> <title> Using tolerances to guarantee valid polyhedral modeling results. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 105-114, </pages> <year> 1990. </year>
Reference: [38] <author> K. Sugihara and M. Iri. </author> <title> A solid modeling system free from topological inconsistencies. </title> <journal> J. Inf. Proc., Inf. Proc. Soc. of Japan, </journal> <volume> 12(4) </volume> <pages> 380-393, </pages> <year> 1989. </year>
Reference-contexts: If this problem is not properly addressed, the resulting algorithm becomes unreliable. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedral models <ref> [38, 14, 2, 19] </ref>. These algorithms use a fixed upper bound on the bit-length of arithmetic required to evaluate geometric predicates. In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation [14].
Reference: [39] <author> C. Yap. </author> <title> A geometric consistency theorem for a symbolic perturbation scheme. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 40 </volume> <pages> 2-18, </pages> <year> 1990. </year>
Reference-contexts: In particular, Fortune has presented an efficient algorithm based on exact arithmetic which has a small performance overhead as compared to a floating-point based implementation [14]. Besides reliable computation, exact arithmetic allows the use of symbolic perturbation to handle degeneracies <ref> [39] </ref>. The perturbation scheme greatly simplifies the implementation of the solid modeler. There is relatively little work on robust or accurate B-rep computa Keyser, Krishnan, Manocha, Culver 3 tion algorithms for curved primitives. Algorithms to handle degenerate intersections between quadrics have been presented in [31].
Reference: [40] <author> J. Yu. </author> <title> Exact arithmetic solid modeling. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <year> 1992. </year>
Reference-contexts: Exact arithmetic involves computations on algebraic numbers and most of the current implementations of such arithmetic (especially those available as part of computer algebra systems) are extremely slow. Techniques using bit-length estimates may, in the worst case, require bit-lengths which are exponential in the degree of the algebraic functions <ref> [7, 40] </ref>. Moreover, many representations and predicates that are well-understood in the linear domain become rather hard in the curved domain. Overall, no good solutions are known for efficient and robust B-rep computation on curved solids.
References-found: 40

