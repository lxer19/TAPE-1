URL: http://choices.cs.uiuc.edu/liao/oil.ps
Refering-URL: http://choices.cs.uiuc.edu/liao/home.html
Root-URL: http://www.cs.uiuc.edu
Email: liao,roy@cs.uiuc.edu  
Title: An Interprocess Communications Design for Migrating Objects  
Author: Willy S. Liao Roy H. Campbell 
Date: April 24, 1996  
Address: 1304 W. Springfield Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: In this paper, we describe a design for an object-oriented, interprocess communications subsystem that supports the migration of communication endpoints. All communication is connection-oriented and occurs between two endpoints, represented by Interface Objects (IObjs). A full-duplex connection between IObjs is implemented by one buffer ring per direction; the buffer rings are conceptually shared by both IObjs through a consumer-producer relationship. This design's architecture is location-transparent for naive objects that are not designed to deal specifically with migrating peers. However, the architecutre can keep highly optimized objects informed so that they can react to migration events and adjust their behavior. The design supplies a framework with which the system can provide efficient object and process migration while maintaining open connections.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrew S. Tanenbaum, Robbert van Renesse, Hans van Staveren, Gregory J. Sharp, Sape J. Mullender, Jack Jansen, and Guido van Rossum. </author> <title> Experiences with the Amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <volume> 33(12), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: A common approach for letting migrating objects communicate is the use of location-independent identifiers that are resolved through a directory service or through broadcast queries. For example, Amoeba <ref> [1] </ref> uses a location-independent naming scheme associating ports with connections to objects. Given a port, an object is located via an address cache; if this fails, as is the case after an object moves, a broadcast mechanism is used.
Reference: [2] <author> Roy H. Campbell and See-Mong Tan. </author> <title> Choices: An object-oriented multimedia operating system. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, Washington, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Such IPC systems tend to be connectionless; by contrast, this paper advocates a connection-oriented approach to the problem. Our object-oriented, microkernel research operating system, Choices <ref> [2] </ref>, has as one of its design goals support for object migration. In order to support IPC in a mobile environment, we have produced a preliminary design for a message passing subsystem, termed the Object Interface Layer (OIL).
Reference: [3] <author> P. Druschel, L. L. Peterson, and N. C. Hutchinson. </author> <title> Beyond micro-kernel design: Decoupling modularity and protection in Lipto. </title> <booktitle> In Twelfth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 512-520, </pages> <address> Yokohama, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: This feature is useful when building operating systems since various modules can be configured into the same or different domains as desired when trading off performance with protection, a la Lipto <ref> [3] </ref>. Unlike Lipto, OIL's location transparency is dynamic so that objects with open connections can migrate. An object's view of the connection does not change when an endpoint moves, and it does not need to take any special action (nor even be aware of the migration).
Reference: [4] <author> S. J. Le*er and M. K. McKusick and M. J. Karels and J. S. Quaterman. </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Even sending or receiving "connectionless" messages involves the setup and processing of some meta-data by the operating system, although a media-level or transport-level connection may not be set up. For example, in UNIX it is necessary to open sockets even for UDP messages <ref> [4] </ref>, since the system must allocate buffers and bind names. Reifying a connection into a IObj pair associates this state explicitly with objects that can be examined and invoked.
Reference: [5] <author> Willy S. Liao, David M. Putzolu, and Roy H. Campbell. </author> <title> Building a secure, location transparent object invocation system. </title> <booktitle> In Fourth International Workshop on Object-Orientation in Operating Systems, Lund, </booktitle> <address> Sweden, </address> <month> August </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: We now give two illustrations of how we plan to employ OIL in the areas of object migration on ATM and process migration. The design of OIL is specifically intended to supply a framework into which the ATM Objects migration scheme <ref> [5] </ref> fits. The ATM Objects concept involves using virtual-circuit identifier remapping at the ATM switch to support transparent migration of objects that are communicating with peers.
Reference: [6] <author> Ellard Roush. </author> <title> The Freeze Free Algorithm for Process Migration. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> August </month> <year> 1995. </year> <month> 4 </month>
Reference-contexts: A specific example of how we intend to apply OIL is the fast migration of running processes with open communication links. Our group has developed a Freeze Free process migration algorithm <ref> [6] </ref> that achieves an extremely low latency of 13.9 ms on a SPARCstation 2 with Ethernet. A process's objects might have several open IObj connections to peer objects when some entity decides to migrate the process.
References-found: 6

