URL: http://www.win.tue.nl/cs/ipa/uitp/papers/Callaghan.ps.gz
Refering-URL: http://www.win.tue.nl/cs/ipa/uitp/proceedings.html
Root-URL: http://www.win.tue.nl
Email: fP.C.Callaghan, Zhaohui.Luog@durham.ac.uk  
Title: Mathematical Vernacular in Type Theory-based Proof Assistants  
Author: Paul Callaghan and Zhaohui Luo 
Date: March 27, 1998  
Address: South Road, Durham DH1 3LE, U.K.  
Affiliation: Department of Computer Science, University of Durham,  
Abstract: In this paper we present the Durham Mathematical Vernacular (MV) project, discuss the general design of a prototype to support experimentation with issues of MV, explain current work on the prototype specifically in the type theory basis of the work, and end with a brief discussion of methodology and future directions. The current work concerns an implementation of Luo's typed logical framework LF, and making it more flexible with respect to the demands of implementing MV in particular, meta-variables, multiple contexts, subtyping, and automation. This part of the project may be of particular interest to the general theorem proving community. We will demonstrate a prototype at the conference. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James Allen. </author> <title> Natural Language Understanding. </title> <publisher> Addison Wesley, </publisher> <year> 1995. </year> <note> (2nd Ed.). </note>
Reference-contexts: For example, anaphora could be attempted purely at the NL level, but some anaphoric references can be interpreted as meta-variables and attempted with the automatic reasoning procedures. (NB especially above sentence level, the factors governing anaphora are heavily dependent on domain 3 See <ref> [1, 19] </ref> for more information. 4 Indirect references to objects - eg use of pronouns and partial expressions like `it', "the group", etc.
Reference: [2] <author> A. Bailey. </author> <title> Lego with coercion synthesis. </title> <address> ftp://ftp.cs.man.ac.uk/pub/baileya/- Coercions/LEGO-with-coercions.dvi, </address> <year> 1996. </year>
Reference-contexts: No further action is necessary, eg NL analysis does not need to make this inference. Forms of coercive subtyping have been implemented in Lego <ref> [2] </ref> and Coq [17], but have certain restrictions, such as working on syntactically equal terms rather than computationally equal terms (the latter being more general). Implementing subtyping at a more fundamental level, ie in LF, avoids such restrictions [10].
Reference: [3] <author> A. Bailey. </author> <title> The Machine-checked Literate Formalisation of Algebra in Type Theory. </title> <type> PhD thesis, </type> <institution> University of Manchester, </institution> <year> 1998. </year> <note> (submitted). </note>
Reference-contexts: We discuss further methodological issues in section 4.1. A Type-theoretic Approach Type theory provides a flexible language for expressing and checking a lot of non-trivial mathematics (eg <ref> [3] </ref>). The process of checking proofs (via type checking) is decidable for the type theories we will use, so it may be mechanised (implemented) straightforwardly. <p> One could also extend or create new libraries more easily. The problem of organising a large development, which includes formation of libraries, is frequently mentioned (eg <ref> [3] </ref>). * The structure of the multiple contexts is likely to be a graph which represents dependency between objects of the development (see below), thus it can represent association between objects. This can replace fixed linear structure in type theory to provide a more natural view.
Reference: [4] <author> Paul Callaghan. </author> <title> An Evaluation of LOLITA and Related Natural Language Processing Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Durham, </institution> <year> 1998. </year>
Reference-contexts: The work on type theory includes coercive subtyping [10, 8], implementation of automatic decision procedures [21], and applications of type theory, eg in concurrency. The NL work is represented by the LOLITA system <ref> [19, 4] </ref>: this large project aims to build a general purpose platform with which specific NL applications can be built, eg information extraction [14], or object-oriented requirements analysis [12]. In the remainder of this section, we briefly discuss the notion of mathematical vernacular, and our type-theoretic approach. <p> This step gives substance to our initial aim: it helps us gauge progress and to `characterise' what the prototype is capable of. It is in general difficult to write exact requirement specifications for NL systems <ref> [4] </ref>. One possible reason for this is the sheer variability possible in NL and the complexity thus required of systems to handle this variability, and a general lack of techniques to talk precisely about NL.
Reference: [5] <author> N. G. de Bruijn. </author> <title> The mathematical vernacular, a language for mathematics with typed sets. </title> <editor> In Nederpelt, Geuvers, and de Vrijer, editors, </editor> <booktitle> Selected Papers on Automath. </booktitle> <year> 1994. </year>
Reference-contexts: In the remainder of this section, we briefly discuss the notion of mathematical vernacular, and our type-theoretic approach. Mathematical Vernacular The term "Mathematical Vernacular" has been used before with varying meanings, eg in [13] and <ref> [5] </ref>. We define it to mean a language which is suitable for ordinary mathematical practice, and which can be implemented with current technology and under the guidance of a formal semantics. The basis for implementation will be constructive type theory and its associated technology. <p> For example, how do we define what our requirements are, and how do we evaluate the results, or quantify the worth of the work? De Bruijn noted in his design of an MV that there were many arbitrary decisions to make <ref> [5] </ref>; what guidance do we have in such cases? These questions are hard to answer. One way in which we tackle them is by adopting a "bottom-up" strategy of working.
Reference: [6] <author> Haskell. </author> <note> Haskell report 1.4. http://www.haskell.org, 1998. </note>
Reference-contexts: The prototype will be constructed "bottom up", ie starting with the type theory levels and then implementing the NL functionality. The main implementation language is the non-strict functional programming language Haskell <ref> [6] </ref>. Implementing Luo's LF The type theory aspects will be based on Luo's typed logical framework LF (see [9], chapter 9). LF has not been implemented in any form before.
Reference: [7] <author> Mark Hopkins. </author> <title> Demonstration of the Tomita parsing algorithm. </title> <address> ftp://iecc.com/pub/- file/tomita.tar.gz, </address> <year> 1993. </year>
Reference-contexts: Generating replies to the user will be implemented by using simple sentence patterns. Parsing is (algorithmically) the most complex component: for the moment we shall use an implementation of Tomita's algorithm [20] due to Hopkins <ref> [7] </ref>, as is used in LOLITA. This will allow us to write and parse heavily ambiguous grammars. It is almost certain that syntactic ambiguity will be present. For example, even the simple grammar in Ranta's prototype [16] contains ambiguity.
Reference: [8] <author> A. Jones, Z. Luo, and S. Soloviev. </author> <title> Some proof-theoretic and algorithmic aspects of coercive subtyping. </title> <booktitle> Proc. of the Annual Conf on Types and Proofs (TYPES'96), </booktitle> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: The MV project is a natural consequence of existing projects at Durham on Type Theory and on Natural Language Processing. The work on type theory includes coercive subtyping <ref> [10, 8] </ref>, implementation of automatic decision procedures [21], and applications of type theory, eg in concurrency. <p> Implementing subtyping at a more fundamental level, ie in LF, avoids such restrictions [10]. The implementation will also complement theoretical work on subtyping, eg <ref> [8] </ref>, by helping to explore ideas. 4 Discussion We have presented the initial design of a prototype for interactive development of mathematics, in terms of a first goal of functionality and the architecture we will use to achieve it.
Reference: [9] <author> Z. Luo. </author> <title> Computation and Reasoning: A Type Theory for Computer Science. </title> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: The prototype will be constructed "bottom up", ie starting with the type theory levels and then implementing the NL functionality. The main implementation language is the non-strict functional programming language Haskell [6]. Implementing Luo's LF The type theory aspects will be based on Luo's typed logical framework LF (see <ref> [9] </ref>, chapter 9). LF has not been implemented in any form before. The plan is to first implement a very basic proof assistant for LF, with a single context, definition mechanisms, basic refinement proof etc.
Reference: [10] <author> Z. Luo. </author> <title> Coercive subtyping. </title> <journal> Journal of Logic and Computation, </journal> <note> 1998. To appear. </note>
Reference-contexts: The MV project is a natural consequence of existing projects at Durham on Type Theory and on Natural Language Processing. The work on type theory includes coercive subtyping <ref> [10, 8] </ref>, implementation of automatic decision procedures [21], and applications of type theory, eg in concurrency. <p> Interfacing to computer algebra systems will also be useful for heavy calculations. 3.4 Use of Coercive Subtyping Coercive subtyping aids use of a type theory by providing a type-secure abbreviational mechanism <ref> [10] </ref>. As noted in [11], it can be used to simplify implementation of MV, in particular expressions denoting classes of mathematical object. <p> Forms of coercive subtyping have been implemented in Lego [2] and Coq [17], but have certain restrictions, such as working on syntactically equal terms rather than computationally equal terms (the latter being more general). Implementing subtyping at a more fundamental level, ie in LF, avoids such restrictions <ref> [10] </ref>. The implementation will also complement theoretical work on subtyping, eg [8], by helping to explore ideas. 4 Discussion We have presented the initial design of a prototype for interactive development of mathematics, in terms of a first goal of functionality and the architecture we will use to achieve it.
Reference: [11] <author> Z. Luo and P. </author> <title> Callaghan. </title> <booktitle> Mathematical vernacular and conceptual well-formedness in mathematical language. In Proceedings: Logical Aspects of Computational Linguistics, 1997. (forthcoming in LNAI series). </booktitle>
Reference-contexts: Constructive type theory with dependent types is also a useful framework for natural language, eg in semantics (see Ranta [15]). The use of coercive subtyping may add flexibility to formal accounts of NL <ref> [11] </ref>. 2 A Prototype for Experimentation It is difficult to design an interactive system based on MV in a top-down style. We have ideas on various pieces of the problem, but tying these together is difficult. Thus, we need a prototype which will allow experimentation with different ideas. <p> Semantic and pragmatic interpretation will be implemented as operations on an abstract machine. This will hide detail of the type theory underneath, such as details of how concepts are actually represented. Part of this design is considered in <ref> [11] </ref>. Discourse will be implemented as a simple post-processor of semantic information. <p> Where we allow phrases containing more than one word, more complexity is possible, eg "monotonically increasing with respect to x", "increases monotonically wrt. x", "monotonically increases" (with the variable left implicit), etc. factors, such as types of objects hence this is reasonable.) Coercive subtyping is another good example <ref> [11] </ref>: we can handle aspects of NL analysis at the type theory level (see section 3.4). The style of operation is expected as follows. Users will make statements, which are possibly incomplete - eg requiring pre-conditions or additional formal detail. <p> Interfacing to computer algebra systems will also be useful for heavy calculations. 3.4 Use of Coercive Subtyping Coercive subtyping aids use of a type theory by providing a type-secure abbreviational mechanism [10]. As noted in <ref> [11] </ref>, it can be used to simplify implementation of MV, in particular expressions denoting classes of mathematical object.
Reference: [12] <author> L. Mich. NL-OOPS: </author> <title> From Natural Natural Language to Object Oriented Requirements using the Natural Language Processing System LOLITA. </title> <editor> J. </editor> <booktitle> Natural Language Engineering, </booktitle> <volume> 2(2) </volume> <pages> 161-187, </pages> <year> 1996. </year>
Reference-contexts: The NL work is represented by the LOLITA system [19, 4]: this large project aims to build a general purpose platform with which specific NL applications can be built, eg information extraction [14], or object-oriented requirements analysis <ref> [12] </ref>. In the remainder of this section, we briefly discuss the notion of mathematical vernacular, and our type-theoretic approach. Mathematical Vernacular The term "Mathematical Vernacular" has been used before with varying meanings, eg in [13] and [5].
Reference: [13] <author> Mizar. </author> <note> Mizar WWW Page. http://mizar.uw.bialystok.pl/. </note>
Reference-contexts: In the remainder of this section, we briefly discuss the notion of mathematical vernacular, and our type-theoretic approach. Mathematical Vernacular The term "Mathematical Vernacular" has been used before with varying meanings, eg in <ref> [13] </ref> and [5]. We define it to mean a language which is suitable for ordinary mathematical practice, and which can be implemented with current technology and under the guidance of a formal semantics. The basis for implementation will be constructive type theory and its associated technology. <p> Note that the above statements of the three theorems are the kind of language we would like to implement. * Versions of this material appear in many text books in some form, eg introductions to discrete mathematics. It has also been formalised under several approaches, including Mizar <ref> [13] </ref> (comparing their MV to ours will be interesting). * The mathematical basis is quite fundamental, so we do not need a large `library' of basic concepts first. A key point of MV is that users define the terminology they are about to use.
Reference: [14] <author> R. Morgan, R. Garigliano, P. Callaghan, S. Poria, M. Smith, A. Urbanowicz, R. Collingham, M. Costantino, C. Cooper, </author> <title> and the LOLITA Group. Description of the LOLITA System as Used in MUC-6. </title> <booktitle> In Proceedings: The Sixth Message Understanding Conference, </booktitle> <pages> pages 71-87. </pages> <publisher> Morgan Kaufman, </publisher> <month> Nov </month> <year> 1995. </year>
Reference-contexts: The NL work is represented by the LOLITA system [19, 4]: this large project aims to build a general purpose platform with which specific NL applications can be built, eg information extraction <ref> [14] </ref>, or object-oriented requirements analysis [12]. In the remainder of this section, we briefly discuss the notion of mathematical vernacular, and our type-theoretic approach. Mathematical Vernacular The term "Mathematical Vernacular" has been used before with varying meanings, eg in [13] and [5].
Reference: [15] <author> A. Ranta. </author> <title> Type-theoretical Grammar. </title> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: One aim of our project is to contribute to this technology, especially in terms of being able to support the demands of MV. Constructive type theory with dependent types is also a useful framework for natural language, eg in semantics (see Ranta <ref> [15] </ref>). The use of coercive subtyping may add flexibility to formal accounts of NL [11]. 2 A Prototype for Experimentation It is difficult to design an interactive system based on MV in a top-down style. We have ideas on various pieces of the problem, but tying these together is difficult.
Reference: [16] <author> A. Ranta. </author> <title> A grammatical framework (some notes on the source files), </title> <year> 1997. </year>
Reference-contexts: This will allow us to write and parse heavily ambiguous grammars. It is almost certain that syntactic ambiguity will be present. For example, even the simple grammar in Ranta's prototype <ref> [16] </ref> contains ambiguity. However, a powerful parser introduces problems of (syntactic) disambiguation, of choosing which interpretation to use in further analysis. This will be considered when we get evidence about the behaviour of a realistic grammar. Semantic and pragmatic interpretation will be implemented as operations on an abstract machine.
Reference: [17] <author> A. Saibi. </author> <title> Typing algorithm in type theory with inheritance. </title> <booktitle> Proc of POPL'97, </booktitle> <year> 1997. </year>
Reference-contexts: No further action is necessary, eg NL analysis does not need to make this inference. Forms of coercive subtyping have been implemented in Lego [2] and Coq <ref> [17] </ref>, but have certain restrictions, such as working on syntactically equal terms rather than computationally equal terms (the latter being more general). Implementing subtyping at a more fundamental level, ie in LF, avoids such restrictions [10].
Reference: [18] <author> SRI. </author> <title> The Prototype Verification System. </title> <note> http://www.csl.sri.com/pvs.html, 1998. </note>
Reference-contexts: Several kinds of automation will be required, such as type-theoretic model checking [21], or the various procedures implemented in the verification tool PVS <ref> [18] </ref>. Interfacing to computer algebra systems will also be useful for heavy calculations. 3.4 Use of Coercive Subtyping Coercive subtyping aids use of a type theory by providing a type-secure abbreviational mechanism [10].
Reference: [19] <author> The LOLITA Group. </author> <title> The LOLITA Project. Springer Verlag. (forthcoming in 3 vols: "The System Core", "Applications", "Philosophy and Methodology"). </title>
Reference-contexts: The work on type theory includes coercive subtyping [10, 8], implementation of automatic decision procedures [21], and applications of type theory, eg in concurrency. The NL work is represented by the LOLITA system <ref> [19, 4] </ref>: this large project aims to build a general purpose platform with which specific NL applications can be built, eg information extraction [14], or object-oriented requirements analysis [12]. In the remainder of this section, we briefly discuss the notion of mathematical vernacular, and our type-theoretic approach. <p> For example, anaphora could be attempted purely at the NL level, but some anaphoric references can be interpreted as meta-variables and attempted with the automatic reasoning procedures. (NB especially above sentence level, the factors governing anaphora are heavily dependent on domain 3 See <ref> [1, 19] </ref> for more information. 4 Indirect references to objects - eg use of pronouns and partial expressions like `it', "the group", etc.
Reference: [20] <author> M. Tomita. </author> <title> Efficient Parsing of Natural Language: A Fast Algorithm for Practical Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, Ma, </address> <year> 1986. </year>
Reference-contexts: Generating replies to the user will be implemented by using simple sentence patterns. Parsing is (algorithmically) the most complex component: for the moment we shall use an implementation of Tomita's algorithm <ref> [20] </ref> due to Hopkins [7], as is used in LOLITA. This will allow us to write and parse heavily ambiguous grammars. It is almost certain that syntactic ambiguity will be present. For example, even the simple grammar in Ranta's prototype [16] contains ambiguity.
Reference: [21] <author> S. Yu and Z. Luo. </author> <title> Implementing a model checker for Lego. </title> <booktitle> Proc. of the 4th Inter Symp. of Formal Methods Europe, FME'97: Industrial Applications and Strengthened Foundations of Formal Methods, </booktitle> <address> Graz, Austria. </address> <publisher> LNCS 1313, </publisher> <year> 1997. </year>
Reference-contexts: The MV project is a natural consequence of existing projects at Durham on Type Theory and on Natural Language Processing. The work on type theory includes coercive subtyping [10, 8], implementation of automatic decision procedures <ref> [21] </ref>, and applications of type theory, eg in concurrency. The NL work is represented by the LOLITA system [19, 4]: this large project aims to build a general purpose platform with which specific NL applications can be built, eg information extraction [14], or object-oriented requirements analysis [12]. <p> As mentioned above, the user's statements will be translated in to terms containing meta-variables, and automation will attempt to build complete proof terms from these, eg when the user claims a proof is complete. Several kinds of automation will be required, such as type-theoretic model checking <ref> [21] </ref>, or the various procedures implemented in the verification tool PVS [18]. Interfacing to computer algebra systems will also be useful for heavy calculations. 3.4 Use of Coercive Subtyping Coercive subtyping aids use of a type theory by providing a type-secure abbreviational mechanism [10].
References-found: 21

