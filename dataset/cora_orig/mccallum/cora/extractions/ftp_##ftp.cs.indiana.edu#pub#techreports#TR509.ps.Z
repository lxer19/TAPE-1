URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR509.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Email: fstoller,lunnikrig@cs.indiana.edu  
Title: Automated Symbolic Timing Analysis for Distributed Systems  
Author: Scott D. Stoller and Leena Unnikrishnan 
Date: 18 May 1998  
Address: Bloomington, IN 47405 USA  
Affiliation: Computer Science Dept., Indiana University,  
Abstract: A timing property of a distributed system is an assertion about the time intervals between events in executions of that system. There are three traditional approaches to determining timing properties of distributed systems: measurement, simulation, and analysis. Results from analysis can be symbolic and therefore much more general than results from measurement and simulation. For example, analysis can express the end-to-end delay of an atomic commitment protocol symbolically as a function of message delay and other system parameters. However, manual analysis of distributed algorithms is often tedious and error-prone. We have developed and implemented a state-exploration-based analysis that can automatically determine a large class of timing properties of distributed systems. Keywords: timing properties, synchronous distributed systems, automated state exploration, symbolic computation, uniform timed reliable broadcast
Abstract-found: 1
Intro-found: 1
Reference: [BT93a] <author> Ozalp Babaoglu and Sam Toueg. </author> <title> Non-blocking atomic commitment. In Sape Mullender, editor, </title> <journal> Distributed Systems, </journal> <volume> chapter 6, </volume> <pages> pages 147-168. </pages> <publisher> Addison Wesley, </publisher> <address> 2nd edition, </address> <year> 1993. </year>
Reference-contexts: A UTRB algorithm can form the heart of an implementation of non-blocking atomic commitment <ref> [BT93b, BT93a] </ref>. UTRB4 uses carefully designed patterns of time-outs to help each process determine the status of other processes (e.g., whether they received certain messages) without sending messages. <p> UTRB4 has a worst-case message complexity of 2 (N 1) + 1 2 (f 1)f , where N is the number of processes and f is the number of crashes, compared to 2 (N 1) + 2 (N 1)f for UTRB2 <ref> [BT93b, BT93a] </ref>, which is the most message-efficient UTRB algorithm we have found in the literature. For example, when f = 1, UTRB4 uses half as many messages as UTRB2. The manual calculations of the time-outs are non-trivial, because they require consideration of chains of events involving multiple failures.
Reference: [BT93b] <author> Ozalp Babaoglu and Sam Toueg. </author> <title> Understanding non-blocking atomic commitment. </title> <type> Technical Report UBLCS-93-2, </type> <institution> University of Bologna, Laboratory for Computer Science, </institution> <year> 1993. </year> <month> 13 </month>
Reference-contexts: A UTRB algorithm can form the heart of an implementation of non-blocking atomic commitment <ref> [BT93b, BT93a] </ref>. UTRB4 uses carefully designed patterns of time-outs to help each process determine the status of other processes (e.g., whether they received certain messages) without sending messages. <p> UTRB4 has a worst-case message complexity of 2 (N 1) + 1 2 (f 1)f , where N is the number of processes and f is the number of crashes, compared to 2 (N 1) + 2 (N 1)f for UTRB2 <ref> [BT93b, BT93a] </ref>, which is the most message-efficient UTRB algorithm we have found in the literature. For example, when f = 1, UTRB4 uses half as many messages as UTRB2. The manual calculations of the time-outs are non-trivial, because they require consideration of chains of events involving multiple failures.
Reference: [CKP + 96] <author> David E. Culler, Richard M. Karp, David Patterson, Abhijit Sahay, Eunice E. Santos, Klaus Erik Schauser, Ramesh Subramonian, and Thorsten von Eicken. </author> <title> LogP: A practical model of parallel computation. </title> <journal> Communications of the ACM, </journal> <volume> 39(11), </volume> <month> November </month> <year> 1996. </year>
Reference-contexts: Section 3.1); (3) empirically checking the accuracy of timing properties calculated by substituting measured values for timing parameters into formulas obtained from the analysis; if necessary, the accuracy can be increased by introducing additional timing parameters, possibly like those in the LogP model of parallel computation <ref> [CKP + 96] </ref>; (4) applying the analysis to agreement algorithms like those in [Lyn96, Part III] or [PLL97], group communication protocols like those in [CZ85, RVR93, MR97], etc. 2 System Model We model a distributed system as a collection of processes that communicate by message-passing over reliable FIFO channels with unbounded
Reference: [CZ85] <author> David R. Cheriton and Willy Zwaenepoel. </author> <title> Distributed process groups in the V kernel. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(2) </volume> <pages> 77-107, </pages> <year> 1985. </year>
Reference-contexts: obtained from the analysis; if necessary, the accuracy can be increased by introducing additional timing parameters, possibly like those in the LogP model of parallel computation [CKP + 96]; (4) applying the analysis to agreement algorithms like those in [Lyn96, Part III] or [PLL97], group communication protocols like those in <ref> [CZ85, RVR93, MR97] </ref>, etc. 2 System Model We model a distributed system as a collection of processes that communicate by message-passing over reliable FIFO channels with unbounded capacity and bounded delay. It is easy to modify the analysis to accommodate unreliable, unordered, or finite-capacity channels.
Reference: [KM95] <author> R. P. Kurshan and K. L. McMillan. </author> <title> A structural induction theorem for processes. </title> <journal> Information and Computation, </journal> <volume> 117(1), </volume> <year> 1995. </year>
Reference-contexts: Configuration parameters must be instantiated with particular values. One can often obtain a good idea of the dependence of timing properties on configuration parameters by repeating the analysis for various values and plotting the results. Extending the analysis to handle configuration parameters symbolically, perhaps along the lines of <ref> [KM95] </ref>, is an area for future work. We envision two main uses for this analysis. One is to determine "end-to-end" timing properties of distributed algorithms, such as the property of PAXOS mentioned above. The other is to facilitate the development of such algorithms by helping determine time-outs.
Reference: [Lam78] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-564, </pages> <year> 1978. </year>
Reference-contexts: The following restricted notion of causality simplifies the calculations in Section 5 and is sufficient for many examples, so we adopt it in this paper. However, using Lamport's causality relation ("happened before") <ref> [Lam78] </ref> or temporal ordering 5 (instead of causality) is not difficult.
Reference: [Lam86] <author> Leslie Lamport. </author> <title> On interprocess communication: Part 1. </title> <journal> Distributed Computing, </journal> <volume> 1 </volume> <pages> 76-101, </pages> <year> 1986. </year>
Reference-contexts: In the running example, tmr 1 -1 msg 1 does not hold because of this exception, so tmr 1 is not enabled in g 2 . Our "can occur before" relation is reminiscent of Lamport's "can affect" relation <ref> [Lam86] </ref>; however, we consider events to be atomic, so the lack of a definite event ordering stems only from the lack of exact (numerical) occurrence times for events. Evaluating Timing Properties.
Reference: [Lam89] <author> Leslie Lamport. </author> <title> The part-time parliament. </title> <type> Technical Report SRC-49, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <year> 1989. </year>
Reference-contexts: For example, De Prisco, Lampson, and Lynch's analysis shows that the time needed for the PAXOS algorithm (based on Lamport's part-time parliament <ref> [Lam89] </ref>) to reach consensus after failures cease is at most 24` + 10n` + 13d, where n is the number of processes, and ` and d are bounds on local processing time and message delay, respectively.
Reference: [Lyn96] <author> Nancy A. Lynch. </author> <title> Distributed Algorithms. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year>
Reference-contexts: properties calculated by substituting measured values for timing parameters into formulas obtained from the analysis; if necessary, the accuracy can be increased by introducing additional timing parameters, possibly like those in the LogP model of parallel computation [CKP + 96]; (4) applying the analysis to agreement algorithms like those in <ref> [Lyn96, Part III] </ref> or [PLL97], group communication protocols like those in [CZ85, RVR93, MR97], etc. 2 System Model We model a distributed system as a collection of processes that communicate by message-passing over reliable FIFO channels with unbounded capacity and bounded delay.
Reference: [MR97] <author> Dahlia Malkhi and Michael Reiter. </author> <title> A high-throughput secure reliable multicast protocol. </title> <journal> The Journal of Computer Security, </journal> <volume> 5 </volume> <pages> 113-127, </pages> <year> 1997. </year>
Reference-contexts: obtained from the analysis; if necessary, the accuracy can be increased by introducing additional timing parameters, possibly like those in the LogP model of parallel computation [CKP + 96]; (4) applying the analysis to agreement algorithms like those in [Lyn96, Part III] or [PLL97], group communication protocols like those in <ref> [CZ85, RVR93, MR97] </ref>, etc. 2 System Model We model a distributed system as a collection of processes that communicate by message-passing over reliable FIFO channels with unbounded capacity and bounded delay. It is easy to modify the analysis to accommodate unreliable, unordered, or finite-capacity channels.
Reference: [PLL97] <author> Roberto De Prisco, Butler Lampson, and Nancy Lynch. </author> <title> Revisiting the paxos algorithm. </title> <editor> In M. Mavronicolas and P. Tsigas, editors, </editor> <booktitle> Proc. 11th International Workshop on Distributed Algorithms (WDAG '97), volume 1320 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: measured values for timing parameters into formulas obtained from the analysis; if necessary, the accuracy can be increased by introducing additional timing parameters, possibly like those in the LogP model of parallel computation [CKP + 96]; (4) applying the analysis to agreement algorithms like those in [Lyn96, Part III] or <ref> [PLL97] </ref>, group communication protocols like those in [CZ85, RVR93, MR97], etc. 2 System Model We model a distributed system as a collection of processes that communicate by message-passing over reliable FIFO channels with unbounded capacity and bounded delay.
Reference: [PPH97] <author> Doron Peled, Vaughan R. Pratt, and Gerard J. Holzmann, </author> <title> editors. Partial Order Methods in Verification, </title> <booktitle> volume 29 of DIMACS Series. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1997. </year>
Reference-contexts: To the best of our knowledge, this is the first automated analysis of symbolic timing properties of that or any similar distributed algorithm. Future work includes: (1) optimizing the analysis by developing a suitable partial-order method <ref> [PPH97] </ref> that avoids exploring "equivalent" interleavings of concurrent pending events and by exploiting "monotonicity" to justify exploring some pending events only at their earliest or latest possible occurrence time; (2) integrating the analysis with a symbolic timing analysis for sequential programs written in a conventional programming language (cf.
Reference: [RVR93] <author> L. Rodrigues, P. Verssimo, and J. Rufino. </author> <title> A low-level processor group membership protocol for lans. </title> <booktitle> In Proc. IEEE 13th International Conference on Distributed Computing Systems (ICDCS). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: obtained from the analysis; if necessary, the accuracy can be increased by introducing additional timing parameters, possibly like those in the LogP model of parallel computation [CKP + 96]; (4) applying the analysis to agreement algorithms like those in [Lyn96, Part III] or [PLL97], group communication protocols like those in <ref> [CZ85, RVR93, MR97] </ref>, etc. 2 System Model We model a distributed system as a collection of processes that communicate by message-passing over reliable FIFO channels with unbounded capacity and bounded delay. It is easy to modify the analysis to accommodate unreliable, unordered, or finite-capacity channels.
Reference: [Sha89] <author> Alan C. Shaw. </author> <title> Reasoning about time in higher-level language software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(7) </volume> <pages> 875-889, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: One approach is to have the user annotate program segments with symbolic times. A more automatic approach is to associate timing parameters with each program construct and use, e.g., Shaw's timing analysis to symbolically determine execution times for sequential code fragments <ref> [Sha89] </ref>. The analysis in [Sha89] is suitable for many real-time programs but does not deal with message passing or (more importantly) the high degree of non-determinism resulting from failures. 3.2 Timing Properties We consider timing properties that characterize the minimum and maximum time between classes of events. <p> One approach is to have the user annotate program segments with symbolic times. A more automatic approach is to associate timing parameters with each program construct and use, e.g., Shaw's timing analysis to symbolically determine execution times for sequential code fragments <ref> [Sha89] </ref>. The analysis in [Sha89] is suitable for many real-time programs but does not deal with message passing or (more importantly) the high degree of non-determinism resulting from failures. 3.2 Timing Properties We consider timing properties that characterize the minimum and maximum time between classes of events.
Reference: [Sho91] <author> Robert E. Shostak. </author> <title> Deciding linear inequalities by computing loop residues. </title> <journal> Journal of the ACM, </journal> <volume> 28(4) </volume> <pages> 769-779, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Thus, for symbolic times t and t 0 , we define 3 It is straightforward to allow linear inequalities involving all timing parameters to be supplied as premises. If the symbolic times are all linear expressions, comparisons can be evaluated using, e.g., Shostak's loop residue approach <ref> [Sho91] </ref>. cmp (t; t 0 ) = &gt; &gt; &gt; &lt; EQ if t and t 0 are equal LT if t is definitely less than t 0 GT if t is definitely greater than t 0 ? otherwise A pending event pe with occurrence interval [t 1 ; t 2
Reference: [SM98] <author> Scott D. Stoller and Yu Ma. </author> <title> Message-efficient uniform timed reliable broadcast. </title> <type> Technical report, </type> <institution> Computer Science Dept., Indiana University, </institution> <year> 1998. </year> <note> To appear. 14 </note>
Reference-contexts: Section 6 describes a modular way of introducing failures. The analysis has been implemented in Java in a prototype tool called TADA (Timing Analyzer for Distributed Algorithms). Section 7 describes the application of TADA to a new message-efficient algorithm for uniform timed reliable broadcast <ref> [SM98] </ref>. To the best of our knowledge, this is the first automated analysis of symbolic timing properties of that or any similar distributed algorithm. <p> The synchronous nature of signals is essential here. Of course, these signals do not correspond to actual communication in an implementation of the system. 7 Example: Uniform Timed Reliable Broadcast We are applying TADA to a new rotating-coordinator algorithm, called UTRB4 <ref> [SM98] </ref>, for uniform timed reliable broadcast (UTRB) that tolerates crash failures. A UTRB algorithm can form the heart of an implementation of non-blocking atomic commitment [BT93b, BT93a].
References-found: 16

