URL: http://www.cs.umass.edu/~immerman/pub/bis.ps
Refering-URL: http://www.cs.umass.edu/~immerman/pub_immerman.html
Root-URL: 
Title: On Uniformity Within NC  
Author: David A. Mix Barrington Neil Immerman 
Note: Journal of Computer and System Science 41:3 (1990), 274-306  
Address: Boston College  
Affiliation: University of Massachusetts  University of Massachusetts Howard Straubing 3  
Abstract: 1 Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [Aj83] <author> M. Ajtai, </author> " <title> 1 1 formulae on finite structures", </title> <booktitle> Annals of Pure and Applied Logic 24 (1983), </booktitle> <pages> 1-48. </pages>
Reference-contexts: There is a subclass of N C 1 for which separation results are known. AC 0 is the class of problems which have circuits of polynomial size and constant depth in a model with unbounded fan-in. Furst, Saxe, and Sipser [FSS84] and independently Ajtai <ref> [Aj83] </ref> proved that the exclusive OR function is not in AC 0 , separating this class from N C 1 . Later work has attempted to extend the frontier upward from AC 0 by proving lower bounds for more powerful subclasses. <p> AND and OR gates with arbitrary fan-in, size n O (1) , and depth O (1). (See, e.g., [Co85] for more on the classes N C i and AC i .) It is easy to show AC 0 N C 1 , and the inclusion is known to be strict <ref> [FSS84, Aj83] </ref>. Both N C 1 and AC 0 have equivalent definitions (in their non-uniform versions) by families of expressions. N C 1 is the class of languages recognized by families of Boolean formulas of polynomial length [Sp71] or by families of polynomial length and depth O (log n).
Reference: [Al86] <author> E. Allender, </author> <title> "P -uniform circuit complexity", </title> <journal> J. ACM, </journal> <note> to appear. Also Technical Report DCS-TR-198 (Aug. 1986), </note> <institution> Dept. of Comp. Sci., Rutgers University. </institution> <month> 31 </month>
Reference: [Ba86] <author> D. A. Barrington, </author> <title> "Bounded-width branching programs", </title> <type> Ph.D. thesis, </type> <institution> M.I.T. Dept. </institution> <note> of Mathematics (May 1986), Technical report TR-361, </note> <institution> M.I.T Laboratory for Computer Science. </institution>
Reference-contexts: We represent the word problem by using the edges out of one level to represent the transformation corresponding to each monoid element, and asking questions about the existence of paths from the first level to the last. It has been shown <ref> [Ba86, Ba89, BT88] </ref> that determining the output of a family of such branching programs of constant width and polynomial size is equivalent in difficulty to these word problems.
Reference: [Ba89] <author> D. A. Barrington, </author> <title> "Bounded-width polynomial-size branching programs recognize exactly those languages in NC 1 ", J. </title> <institution> Comp. Syst. Sci. </institution> <month> 38:1 (Feb. </month> <year> 1989), </year> <pages> 150-164. </pages>
Reference-contexts: We show that these two notions are equivalent, leading to a natural notion of uniformity for low-level circuit complexity classes. We show that recent results on the structure of N C 1 <ref> [Ba89] </ref> still hold true in this very uniform setting. Finally, we investigate a parallel notion of uniformity, still more restrictive, based on the regular languages. Here we give characterizations of subclasses of the regular languages based on their logical expressibility, extending recent work of Straubing, Therien, and Thomas [STT88]. <p> Barrington <ref> [Ba89] </ref> defined the class ACC (AC 0 with counters), which further extends Razborov's class by allowing unbounded fan-in gates which count their inputs modulo some constant. He conjectured that the majority problem was not in ACC, and hence that ACC 6= N C 1 . <p> A natural question to ask is whether known results about the structure of N C 1 hold true under these definitions. We show that Barrington's construction <ref> [Ba89] </ref>, of N C 1 circuits to simulate branching programs, can be carried out in this setting. This is an improvement over the original argument under N C 1 uniformity, as this appeared to require the full power of ALOGT IM E. <p> This is an improvement over the original argument under N C 1 uniformity, as this appeared to require the full power of ALOGT IM E. This construction gives the following stronger version of the theorem (See <ref> [Ba89] </ref> or [BT88] for definitions and the relevance of solvability of groups and monoids): Corollary 10.2: The word problem for S 5 (or for any non-solvable monoid) is complete for uniform N C 1 under uniform AC 0 reductions, using this new notion of uniformity. <p> The class ACC is the union of AC 0 (q) for all q 2. It is easy to see that ACC N C 1 , and this inclusion is conjectured to be strict <ref> [Ba89] </ref>. Partial results are known in this direction. <p> Languages known to be complete for N C 1 include the Boolean formula value problem [Bu87] and a class of algebraically defined languages, the word problems for any non-solvable group <ref> [Ba89] </ref> or monoid [BT88], which we now describe. A monoid is a set with an associative binary operation and an identity (groups are a special case - monoids with inverses for all elements). <p> We represent the word problem by using the edges out of one level to represent the transformation corresponding to each monoid element, and asking questions about the existence of paths from the first level to the last. It has been shown <ref> [Ba86, Ba89, BT88] </ref> that determining the output of a family of such branching programs of constant width and polynomial size is equivalent in difficulty to these word problems. <p> As one more example, we can now define a quantifier which determines the transitive closure of a width-5 directed graph (an N C 1 -complete problem, as described in the next section (or see <ref> [Ba89] </ref>)). Our graph will be an array of n ` columns of five nodes each, with directed edges from nodes in column y going only to column y + 1. <p> With this new notion of uniformity we can reexamine the characterizations of N C 1 in terms of constant-width branching programs <ref> [Ba89] </ref> or, equivalently, programs over finite monoids [BT88] (the relationship between these various models was discussed above). Here we will paraphrase Barrington's main theorem as follows: Theorem 7.3 [Ba89] The problems of multiplying together a sequence of elements of the permutation group S 5 , and of finding the transitive closure <p> With this new notion of uniformity we can reexamine the characterizations of N C 1 in terms of constant-width branching programs <ref> [Ba89] </ref> or, equivalently, programs over finite monoids [BT88] (the relationship between these various models was discussed above). Here we will paraphrase Barrington's main theorem as follows: Theorem 7.3 [Ba89] The problems of multiplying together a sequence of elements of the permutation group S 5 , and of finding the transitive closure of a width-5 graph, are complete for N C 1 under AC 0 reductions. <p> Proof: This is very similar to the proof of Lemma 7.2 above. Given an arbitrary alternating log-time Turing machine, there is a canonical balanced DLOGT IM E-uniform log-depth formula simulating it, as shown above. Further, there is a canonical branching program obtained from that formula by the method of <ref> [Ba89] </ref>. We will show that the function taking an ALOGT IM E machine to a description of the branching program for that machine is a DLOGT IM E reduction. <p> We need first to determine which input variable is to be referenced. This is the variable queried by the alternating machine after a particular choice sequence, in fact (examining the method of <ref> [Ba89] </ref>) that given by the odd-numbered bits of the binary encoding of i (viewed as a string of 2t bits, possibly with leading zeroes). The DLOGT IM E machine can recover these bits and simulate the ALOGT IM E machine with the resulting choice sequence. <p> We must then determine which group elements the i th instruction is to output for each of the two possible values of this input variable. This can be determined by tracing the t iterations of the <ref> [Ba89] </ref> construction leading to the i th instruction, which can be done by a finite-state process running left to right over the bits of i. <p> This can be interpreted as a simulation of alternating log-time Turing machines by DLOGT IM E-uniform branching program families (analogous to the ALOGT IM E-uniform families of <ref> [Ba89] </ref>), or DLOGT IM E-uniform programs over the monoid S 5 , as in [BT88]. Just as above we expanded the circuit model by adding new gates, we can expand the log-time Turing machine model by adding new types of states generalizing the idea of alternation. <p> many examples, given by Chandra et al., of languages equivalent to majority under AC 0 reductions [CSV84]. (The constructions in that paper can all be made uniform using the methods which we will develop in the next section.) The two notable exceptions are the word problem for a non-solvable group <ref> [Ba89] </ref> and the Boolean formula value problem [Bu87]. These two problems (and several others directly related to them) are complete for N C 1 under uniform AC 0 reductions, and are thus not in T C 0 unless T C 0 = N C 1 . <p> Group quantifiers for solvable groups (in fact, monoid quantifiers for solvable monoids) can be simulated by iterated modular counting quantifiers [STT88]. However, by 21 Theorem 9.1 and Proposition 7.4 (our DLOGT IM E-uniform version of Barrington's theorem <ref> [Ba89] </ref>), we know that first-order formulas using quantifiers for any single non-solvable group G can express exactly those languages in DLOGT IM E-uniform N C 1 . Furthermore, the same is true of the W 5 TC operator. <p> We now consider the final question about the system without BIT : What are the consequences of adding the group quantifiers or the W 5 T C operator? In the case with BIT each gave us all of N C 1 because the construction of Barrington <ref> [Ba89] </ref> could be carried out. Here, since these operators each can be simulated by a finite-state machine, it is not surprising that all the languages definable in this way are regular (see below). A significant question, however, is whether we can get all regular languages in this way.
Reference: [BIS88] <author> D. A. M. Barrington, N. Immerman, and H. Straubing, </author> <title> "On uniformity within N C 1 ," Structure in Complexity Theory: </title> <booktitle> Third Annual Conference (Washington: </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1988), </year> <pages> 47-59. </pages>
Reference-contexts: Finally, we investigate a parallel notion of uniformity, still more restrictive, based on the regular languages. Here we give characterizations of subclasses of the regular languages based on their logical expressibility, extending recent work of Straubing, Therien, and Thomas [STT88]. A preliminary version of this work appeared as <ref> [BIS88] </ref>. 2 Introduction 2.1 Circuit Complexity Computer scientists have long tried to classify problems (defined as Boolean predicates or functions) by the size or depth of Boolean circuits needed to solve them. This effort has 1 Former name David A. Barrington. Supported by NSF grant CCR-8714714.
Reference: [BCST88] <author> D. A. M. Barrington, K. Compton, H. Straubing, and D. Therien, </author> <title> "Regular languages in N C 1 ", Technical report BCCS-88-02 (Oct. </title> <booktitle> 1988), </booktitle> <address> Boston College. </address>
Reference-contexts: If ACC 6= N C 1 , this class of languages is exactly the intersection of ACC with the regular languages <ref> [BCST88] </ref>. By adding operators which evaluate n modulo a constant, the first-order system without BIT can be modified to give exactly those regular languages in non-uniform AC 0 [BCST88]. 22 Adding majority quantifiers will naturally take us out of the regular languages. <p> If ACC 6= N C 1 , this class of languages is exactly the intersection of ACC with the regular languages <ref> [BCST88] </ref>. By adding operators which evaluate n modulo a constant, the first-order system without BIT can be modified to give exactly those regular languages in non-uniform AC 0 [BCST88]. 22 Adding majority quantifiers will naturally take us out of the regular languages. But surprisingly, the expressibility class we obtain is a familiar one | the same uniform T C 0 we obtained with BIT . <p> A partial answer to this comes from the fact that any language defined using first-order logic and purely numerical predicates such as this must be in non-uniform AC 0 . The regular languages in non-uniform AC 0 have been characterized <ref> [BCST88] </ref>, and are all solvable. However, it is still open whether x = 2y might be used to define a language such as the strings of length divisible by 3, which is is non-uniform AC 0 but not in F O. Further questions along these lines are considered in [BCST88]. * <p> characterized <ref> [BCST88] </ref>, and are all solvable. However, it is still open whether x = 2y might be used to define a language such as the strings of length divisible by 3, which is is non-uniform AC 0 but not in F O. Further questions along these lines are considered in [BCST88]. * Is it necessary in the absence of BIT for the majority quantifiers to be able to range over pairs of variables, and not just variables? 14 Acknowledgements We would like to thank Sam Buss, Jay Corbett, Richard Ladner, Steven Lindell, Sushant Patnaik, Larry Ruzzo, Wolfgang Thomas, Gyorgy Turan, and
Reference: [BT88] <author> D. A. M. Barrington and D. Therien, </author> <title> "Finite monoids and the fine structure of N C 1 ", J. </title> <booktitle> ACM 35:4 (Oct. </booktitle> <year> 1988), </year> <pages> 941-952. </pages>
Reference-contexts: This is an improvement over the original argument under N C 1 uniformity, as this appeared to require the full power of ALOGT IM E. This construction gives the following stronger version of the theorem (See [Ba89] or <ref> [BT88] </ref> for definitions and the relevance of solvability of groups and monoids): Corollary 10.2: The word problem for S 5 (or for any non-solvable monoid) is complete for uniform N C 1 under uniform AC 0 reductions, using this new notion of uniformity. <p> Languages known to be complete for N C 1 include the Boolean formula value problem [Bu87] and a class of algebraically defined languages, the word problems for any non-solvable group [Ba89] or monoid <ref> [BT88] </ref>, which we now describe. A monoid is a set with an associative binary operation and an identity (groups are a special case - monoids with inverses for all elements). <p> We represent the word problem by using the edges out of one level to represent the transformation corresponding to each monoid element, and asking questions about the existence of paths from the first level to the last. It has been shown <ref> [Ba86, Ba89, BT88] </ref> that determining the output of a family of such branching programs of constant width and polynomial size is equivalent in difficulty to these word problems. <p> With this new notion of uniformity we can reexamine the characterizations of N C 1 in terms of constant-width branching programs [Ba89] or, equivalently, programs over finite monoids <ref> [BT88] </ref> (the relationship between these various models was discussed above). <p> This can be interpreted as a simulation of alternating log-time Turing machines by DLOGT IM E-uniform branching program families (analogous to the ALOGT IM E-uniform families of [Ba89]), or DLOGT IM E-uniform programs over the monoid S 5 , as in <ref> [BT88] </ref>. Just as above we expanded the circuit model by adding new gates, we can expand the log-time Turing machine model by adding new types of states generalizing the idea of alternation. <p> We can speak of uniform circuits, uniform expressions, special kinds of Turing machines, or first-order formulas, and be talking about the same complexity classes. (For the classes explored in Section 11, one could as easily speak of uniform programs over a finite monoid, as in <ref> [BT88] </ref>.) Clearly the next step is to explore these new complexity classes as P and N P have been explored.
Reference: [BCH86] <author> P. W. Beame, S. A. Cook, and H. J. </author> <title> Hoover, "Log-depth circuits for division and related problems", </title> <journal> SIAM J. Comput. </journal> <volume> 15 (1986), </volume> <pages> 994-1003. </pages>
Reference: [BH77] <author> L. Berman and J. Hartmanis, </author> <title> "On isomorphisms and density of N P and other complete sets", </title> <journal> SIAM J. Comp. </journal> <volume> 6 (1977), </volume> <pages> 305-322. </pages>
Reference-contexts: To take one example, we might ask about an N C 1 analogue of the Berman-Hartmanis conjecture <ref> [BH77] </ref>: are the two known kinds of languages complete for N C 1 (non-solvable group and formula value) isomorphic by first-order functions? We might hope major questions in this area can be answered more easily, and lead to techniques and intuitions useful in the study of the more powerful complexity classes.
Reference: [Bu60] <author> J. R. Buchi, </author> <title> "Weak second-order arithmetic and finite automata", </title> <journal> Z. Math. Logik Grundlagen Math. </journal> <volume> 6 (1960), </volume> <pages> 66-92. </pages>
Reference-contexts: Similarly one can show that no non-regular languages are obtained. 25 One way to see this second fact is to use another expressibility result | that of Buchi <ref> [Bu60] </ref> on monadic second-order quantifiers (see also [La77]). This result is that sentences with such quantifiers in our system without BIT can express exactly the regular languages.
Reference: [Bu87] <author> S. R. Buss, </author> <title> "The Boolean formula value problem is in ALOGTIME," </title> <booktitle> 19th ACM STOC Symp. </booktitle> <year> (1987), </year> <pages> 123-131. </pages>
Reference-contexts: Two such conditions, stricter than N C 1 uniformity [Ru81,Co85], have appeared in recent research: Immerman's families of circuits defined by first-order formulas [Im87a,Im87b] and a uniformity corresponding to Buss' deterministic log-time reductions <ref> [Bu87] </ref>. We show that these two notions are equivalent, leading to a natural notion of uniformity for low-level circuit complexity classes. We show that recent results on the structure of N C 1 [Ba89] still hold true in this very uniform setting. <p> In Section 7 we introduce our second notion of uniformity. This is based on deterministic logarithmic time and the log-time hierarchy, used extensively in the proof by Samuel Buss <ref> [Bu87] </ref> that the Boolean formula value problem is in alternating logarithmic time (i.e., N C 1 uniform N C 1 ). To make these classes meaningful, we must allow random access for the read-only input tape of the Turing machine. <p> The circuit is represented in the usual infix notation (see, e.g., <ref> [Bu87] </ref>), with the addition of a special "space character" which may be inserted anywhere with no effect on the formula's meaning. This will allow us more freedom in formatting our formulas, but will not cause us any more difficulty in parsing them. <p> A language is said to be complete for N C 1 under AC 0 reductions if its AC 0 closure is N C 1 . Languages known to be complete for N C 1 include the Boolean formula value problem <ref> [Bu87] </ref> and a class of algebraically defined languages, the word problems for any non-solvable group [Ba89] or monoid [BT88], which we now describe. A monoid is a set with an associative binary operation and an identity (groups are a special case - monoids with inverses for all elements). <p> Proof: For (a), use binary search with the aid of the "input out of range" response (this idea is described in <ref> [Bu87] </ref> and credited there to Dowd). For (b), put the numbers on work tapes and simulate the finite automaton which adds or subtracts | this requires O (log n) time as only one pass over the numbers is needed. <p> We define DLOGT IM E and ALOGT IM E as the classes of languages recognizable in deterministic and alternating log-time Turing machines, respectively. Following Buss <ref> [Bu87] </ref>, we define DLOGT IM E-uniform N C 1 to be the class of languages recognized by families of Boolean formulas, with depth O (log n), for which a deterministic log-time Turing machine can decide the formula language fhc; i; yi : jyj = n and the i th character of <p> The question immediately arises whether strengthening the uniformity restriction has changed the class N C 1 . It has not. Lemma 7.2 The class DLOGT IM E-uniform N C 1 equals ALOGT IM E, or N C 1 -uniform N C 1 . Proof: Buss <ref> [Bu87] </ref> shows that the definition of ALOGT IM E-uniform N C 1 in terms of the formula language is equivalent to Ruzzo's original definition [Ru81] in terms of the extended connection language for circuits. <p> This is true in both the non-uniform and ALOGT IM E-uniform settings. 15 We now show that the this theorem also holds in this new uniformity setting. We adopt Buss' definition of DLOGT IM E reductions <ref> [Bu87] </ref>: A function f many-one reducing a language A to a language B is said to be a DLOGT IM E reduction if f increases the length of strings only polynomially and the predicate A f (c; i; z), meaning "the i th symbol of f (z) is c", is recognized <p> of languages equivalent to majority under AC 0 reductions [CSV84]. (The constructions in that paper can all be made uniform using the methods which we will develop in the next section.) The two notable exceptions are the word problem for a non-solvable group [Ba89] and the Boolean formula value problem <ref> [Bu87] </ref>. These two problems (and several others directly related to them) are complete for N C 1 under uniform AC 0 reductions, and are thus not in T C 0 unless T C 0 = N C 1 .
Reference: [BCGR89] <author> S. Buss, S. Cook, A. Gupta, and V. Ramachandran, </author> <title> "An optimal parallel algorithm for formula evaluation," typescript (1989), </title> <type> U. </type> <institution> of Toronto. </institution>
Reference-contexts: An alternate approach would be to replace y with a binary representation of n and alter as necessary the resource bounds for computing queries, as in <ref> [BCGR89] </ref>.) If C is any class of languages, a circuit family is said to be C-DCL-uniform if its direct connection language is in C. 7 A Boolean formula is a string denoting a special kind of Boolean circuit, a tree whose gates are binary ANDs and ORs. <p> We construct a circuit family to simulate the alternating machine in the standard way. We will then show how the circuit for each n (which is a tree) can be denoted by a DLOGT IM E-uniform formula. A similar and independent argument is used for the same purpose in <ref> [BCGR89] </ref>. The body of the circuit is easy to define it has OR gates for the existential choices and AND gates for the universal choices of the ALOGT IM E machine, in a full binary tree with alternating AND and OR rows.
Reference: [CFL83] <author> A. K. Chandra, S. Fortune, and R. Lipton, </author> <title> "Unbounded fan-in circuits and asso ciative functions", </title> <booktitle> 15th ACM STOC Symp. </booktitle> <year> (1983), </year> <pages> 52-60. </pages>
Reference-contexts: This is a well-studied subclass of the regular languages with a number of characterizations. Here we mention only the closely related result of Chandra et al. <ref> [CFL83] </ref> that an associative operation on a finite set (a semigroup) can be carried out in AC 0 iff the semigroup is group-free. The modular counting quantifiers described above were actually introduced as an extension of this system as well.
Reference: [CKS81] <author> A. K. Chandra, D. C. Kozen, and L. J. Stockmeyer, </author> <title> "Alternation", </title> <editor> J. </editor> <booktitle> ACM 28 (1981), </booktitle> <pages> 114-133. </pages>
Reference-contexts: One scheme would be to list bits 0 and 1 of the lengths by 00 and 01 respectively, and use the pair 11 as a separator. We define an alternating log-time machine as an extension of this model in the usual way (see, e.g., <ref> [CKS81] </ref>), with certain further assumptions. As with the deterministic machine, 13 we will use a clock to insure that the running time depends only on the input length.
Reference: [CSV84] <author> A. K. Chandra, L. J. Stockmeyer and U. Vishkin, </author> <title> "Constant depth reducibility," </title> <journal> SIAM J. Comp. </journal> <month> 13:2 </month> <year> (1984), </year> <pages> 423-439. </pages>
Reference-contexts: This class contains nearly all of the languages known to be in (uniform) N C 1 , such as the many examples, given by Chandra et al., of languages equivalent to majority under AC 0 reductions <ref> [CSV84] </ref>. (The constructions in that paper can all be made uniform using the methods which we will develop in the next section.) The two notable exceptions are the word problem for a non-solvable group [Ba89] and the Boolean formula value problem [Bu87]. <p> Proposition 11.4 The sum of a polynomial number of polynomial-length binary integers (and hence also multiplication of polynomial-length binary integers) can be expressed in F O + M + BIT . Proof: This uses a technique due to Chandra, Stockmeyer, and Vishkin <ref> [CSV84] </ref>. Using the ] operator, we find the sum of the units digits, twos digits, fours digits, etc., of the summands.
Reference: [Co85] <author> S. A. Cook, </author> <title> "A taxonomy of problems with fast parallel algorithms," </title> <booktitle> Information and Control 64 (1985), </booktitle> <pages> 2-22. </pages>
Reference-contexts: This study has become more important recently because of the connections between size and depth of Boolean circuits and number of processors and running time on a parallel computer (see Cook <ref> [Co85] </ref> for a general survey). The complexity class N C 1 consists of those Boolean functions (functions from f0; 1g ? to f0; 1g) which can be computed by circuits of fan-in two and depth O (log n). <p> constant c. (This is "non-uniform" N C 1 | we discuss uniformity below.) Problems in N C 1 are usually considered particularly easy to solve in parallel, and thus N C 1 is considered a "small" complexity class (for example, it is the smallest of the ten surveyed by Cook <ref> [Co85] </ref>.) But it lies above a certain frontier | our current techniques for proving lower bounds on circuit complexity have not allowed us to prove any significant problems to be outside of it, for example, even any N P -complete problems. <p> There is a reasonable (though complicated) notion of N C 1 uniformity ("U E ? uniformity") due to Ruzzo [Ru81] (see also <ref> [Co85] </ref>) which has the consequence that N C 1 -uniform N C 1 is equivalent to alternating logarithmic time (modulo appropriate conventions on the alternating Turing machines). This definition is based not on constructing the circuit but on answering certain classes of questions about it in alternating logarithmic time. <p> The class AC 0 is defined as those languages recognized by families of circuits of AND and OR gates with arbitrary fan-in, size n O (1) , and depth O (1). (See, e.g., <ref> [Co85] </ref> for more on the classes N C i and AC i .) It is easy to show AC 0 N C 1 , and the inclusion is known to be strict [FSS84, Aj83].
Reference: [Ei76] <author> S. Eilenberg, </author> <title> Automata, </title> <booktitle> Languages, and Machines, Vol. </booktitle> <address> B (New York: </address> <publisher> Academic Press, </publisher> <year> 1976). </year> <month> 32 </month>
Reference-contexts: That is, the ability to look at individual bits is crucial to the relationship between finite groups and N C 1 . In Section 12 we explore this issue further, employing classical results on the algebraic structure of finite automata. (See, e.g., <ref> [Ei76] </ref>, [La79], or [Pi86] for background and terminology.) A finite automaton defines a monoid of transformations on its states | a set of functions with an associative operation (functional composition) and an identity (the identity function on the states). <p> In fact the system without BIT was explored first, in the course of efforts to classify regular languages according to algebraic properties. Further exploration of this system leads deeper into algebraic automata theory | see, e.g., Eilenberg <ref> [Ei76] </ref>, Lallement [La79], or Pin [Pi76] for background and definitions. McNaughton and Papert [MP71] proved that in the system without BIT , the languages expressible by first-order formulas are exactly the aperiodic or star-free regular languages (see Ladner [La77] for a good exposition of this result in more modern terminology). <p> To do this we will need a number of algebraic definitions (see, e.g., <ref> [Ei76] </ref>, [Pi86], [La79] for more background). We have already defined monoids and groups, and we will assume the basic vocabulary of abstract algebra. A monoid M divides another monoid N if it is the image of a submonoid of M under a homomorphism. <p> To do the inductive step, we need two facts from the general algebraic theory of automata. The first is a generalization of the Schutzenberger product of monoids, described in section IX.2 of <ref> [Ei76] </ref>, and requires some preliminary definitions, from section V.9 of [Ei76]. Let A, B, and C be monoids. <p> To do the inductive step, we need two facts from the general algebraic theory of automata. The first is a generalization of the Schutzenberger product of monoids, described in section IX.2 of <ref> [Ei76] </ref>, and requires some preliminary definitions, from section V.9 of [Ei76]. Let A, B, and C be monoids. <p> given for each c 2 M 1 and d 2 M 2 by h c;d = [f 1 ] c;db 2 :::b r : : : [f i ] a 1 :::a i1 c;db i+1 :::b r : : : [f r ] a 1 :::a r1 c;d Fact 12.4 <ref> [Ei76] </ref> Let 1 and 2 be homomorphisms from A ? to monoids M 1 and M 2 , respectively. Let , from M 1 fi A fi M 2 to a group G, be any map. <p> Proof: The homomorphism taking an element a of A to ( 2 (a); h; 1 (a)), where h (c; d) = (c; a; d), recognizes L. The (e 1 ; e 2 ) component of the middle term of (w) is exactly fl (w) as defined above. Fact 12.5 <ref> [Ei76, Prop. V.9.1] </ref> Every group that divides a triple product (S 1 ; T; S 2 ) is an extension of a group dividing S 1 fi S 2 by a group dividing T .
Reference: [En72] <author> H. Enderton, </author> <title> A Mathematical Introduction to Logic (New York: </title> <publisher> Academic Press, </publisher> <year> 1972). </year>
Reference: [FSS84] <author> M. Furst, J. B. Saxe, and M. Sipser, </author> <title> "Parity, circuits, and the polynomial-time hierarchy", Math. </title> <booktitle> Syst. Theory 17 (1984), </booktitle> <pages> 13-27. </pages>
Reference-contexts: There is a subclass of N C 1 for which separation results are known. AC 0 is the class of problems which have circuits of polynomial size and constant depth in a model with unbounded fan-in. Furst, Saxe, and Sipser <ref> [FSS84] </ref> and independently Ajtai [Aj83] proved that the exclusive OR function is not in AC 0 , separating this class from N C 1 . Later work has attempted to extend the frontier upward from AC 0 by proving lower bounds for more powerful subclasses. <p> AND and OR gates with arbitrary fan-in, size n O (1) , and depth O (1). (See, e.g., [Co85] for more on the classes N C i and AC i .) It is easy to show AC 0 N C 1 , and the inclusion is known to be strict <ref> [FSS84, Aj83] </ref>. Both N C 1 and AC 0 have equivalent definitions (in their non-uniform versions) by families of expressions. N C 1 is the class of languages recognized by families of Boolean formulas of polynomial length [Sp71] or by families of polynomial length and depth O (log n). <p> The sentence (Q m;a x)'(x) is defined to be true exactly if the number of positions x making '(x) true is equal to a modulo m. For example, the formula (Q 2;1 x)C 1 (x), over the alphabet f0; 1g represents the parity language of <ref> [FSS84] </ref>. We define the class F OC (first-order with counters) to be those languages expressible by first-order formulas containing ordinary quantifiers and modular counting quantifiers. From the above example, we can see that F OC contains languages not in AC 0 and thus strictly contains F O.
Reference: [HMPST87] <author> A. Hajnal, W. Maass, P. Pudlak, M. Szegedy, and G. Turan, </author> <title> "Threshold circuits of bounded depth", </title> <booktitle> 28th IEEE FOCS Symp. </booktitle> <year> (1987), </year> <pages> 99-110. </pages>
Reference-contexts: Smolensky also showed M OD (q; a) 62 AC 0 (p) for p prime and q not a power of p. We define T C 0 to be the AC 0 closure of M AJ (cf. <ref> [HMPST87] </ref>). This is equivalent to the class of languages recognized by circuits of polynomial size and constant depth made up of arbitrary threshold gates (cf. [PS88]). T C 0 is a subset of N C 1 , and it is conjectured [HMPST87] that the inclusion is strict. <p> be the AC 0 closure of M AJ (cf. <ref> [HMPST87] </ref>). This is equivalent to the class of languages recognized by circuits of polynomial size and constant depth made up of arbitrary threshold gates (cf. [PS88]). T C 0 is a subset of N C 1 , and it is conjectured [HMPST87] that the inclusion is strict. A language is said to be complete for N C 1 under AC 0 reductions if its AC 0 closure is N C 1 .
Reference: [Im86] <author> N. Immerman, </author> <title> "Relational queries computable in polynomial time," </title> <journal> Information and Control, </journal> <volume> 68 (1986), </volume> <pages> 86-104. </pages>
Reference-contexts: One can add a least fixed point operator (LFP) to first-order logic to formalize the power of defining new relations by induction. Immerman and Vardi independently showed that the language (F O + LF P ) is equal to polynomial time <ref> [Im86, Va82] </ref>. Immerman also considered the addition of a transitive closure operator (TC) to first-order logic, and showed that (F O + T C) = N SP ACE (log n) [Im86, Im88]. <p> Immerman and Vardi independently showed that the language (F O + LF P ) is equal to polynomial time [Im86, Va82]. Immerman also considered the addition of a transitive closure operator (TC) to first-order logic, and showed that (F O + T C) = N SP ACE (log n) <ref> [Im86, Im88] </ref>. Recently Immerman has observed that first-order inductive definitions of depth t (n) (IND [t (n)]) express exactly the same properties as those checkable in time t (n) on a concurrent read, concurrent write, parallel random access machine having polynomially many processors (CRAM-TIME [t (n)]) [Im89].
Reference: [Im87a] <author> N. Immerman, </author> <title> "Languages which capture complexity classes," </title> <journal> SIAM J. Comp. </journal> <month> 16:4 </month> <year> (1987), </year> <pages> 760-778. </pages>
Reference-contexts: In this framework, inputs are first-order structures. First-order logic is a familiar language for expressing properties. Here we present a sketch of the relevant definitions. See <ref> [Im87a] </ref> or [Im87b] for more detailed definitions and background information. We will use formulas to express properties of Boolean strings, though the system easily extends to express properties of graphs or of more complicated structures.
Reference: [Im87b] <author> N. Immerman, </author> <title> "Expressibility as a complexity measure: Results and directions," </title> <booktitle> Second Structure in Complexity Theory Conf. </booktitle> <year> (1987), </year> <pages> 194-202. </pages>
Reference-contexts: In fact, we will define quantifiers for any function meeting a certain technical condition, that of being "monoidal". The expressibility scheme extends to even larger complexity classes through the use of "syntactic iteration" in formulas | see for example <ref> [Im87b] </ref>. In Section 7 we introduce our second notion of uniformity. <p> In this framework, inputs are first-order structures. First-order logic is a familiar language for expressing properties. Here we present a sketch of the relevant definitions. See [Im87a] or <ref> [Im87b] </ref> for more detailed definitions and background information. We will use formulas to express properties of Boolean strings, though the system easily extends to express properties of graphs or of more complicated structures. <p> The two expressibility theories differ provably in the case of group quantifiers, as we have seen. A similar provable difference is known in the case of iterated first-order formulas <ref> [Im87b] </ref> | N C 1 requires (log n) iterations without BIT but O (log n= log log n) with it. (In the former case, the iterations suffice to define BIT itself.) What is so special about BIT | what other predicates would do as well? * In the presence of BIT
Reference: [Im88] <author> N. Immerman, </author> <title> "Nondeterministic space is closed under complementation," </title> <journal> SIAM J. Comp. </journal> <month> 17:5 (Oct. </month> <year> 1988), </year> <pages> 935-938. </pages>
Reference-contexts: Immerman and Vardi independently showed that the language (F O + LF P ) is equal to polynomial time [Im86, Va82]. Immerman also considered the addition of a transitive closure operator (TC) to first-order logic, and showed that (F O + T C) = N SP ACE (log n) <ref> [Im86, Im88] </ref>. Recently Immerman has observed that first-order inductive definitions of depth t (n) (IND [t (n)]) express exactly the same properties as those checkable in time t (n) on a concurrent read, concurrent write, parallel random access machine having polynomially many processors (CRAM-TIME [t (n)]) [Im89].
Reference: [Im89] <author> N. Immerman, </author> <title> "Expressibility and parallel complexity," </title> <journal> SIAM J. Comput. </journal> <month> 18 </month> <year> (1989) </year> <month> 625-638. </month>
Reference-contexts: Recently Immerman has observed that first-order inductive definitions of depth t (n) (IND [t (n)]) express exactly the same properties as those checkable in time t (n) on a concurrent read, concurrent write, parallel random access machine having polynomially many processors (CRAM-TIME [t (n)]) <ref> [Im89] </ref>. An immediate corollary is, Fact 5.1 (Im89) FO = CRAM-TIME [O (1)] . It was previously known that the non-uniform versions of F O and CRAM-TIME [O (1)] are equal to non-uniform AC 0 [Im89,SV84].
Reference: [KRT68] <editor> K. B. Krohn, J. Rhodes, and B. Tilson, in M. A. Arbib, ed., </editor> <booktitle> The Algebraic Theory of Machines, Languages, </booktitle> <address> and Semigroups (New York: </address> <publisher> Academic Press, </publisher> <year> 1968). </year>
Reference-contexts: In general an automaton can recognize more languages if this monoid is larger or more complicated. A structure theory of finite monoids has been developed (originally by Krohn and Rhodes <ref> [KRT68] </ref>) generalizing the structure theory of finite groups. <p> We define the Krohn-Rhodes closure [G; A] of a family of groups G to be the closure of G and A (the aperiodics) under wreath product and division. By the Krohn-Rhodes theorem <ref> [KRT68] </ref>, the monoids in [G; A] can be characterized in terms of the simple groups which divide them | a monoid is a member iff each such simple group divides a group in G.
Reference: [La77] <author> R. E. Ladner, </author> <title> "Application of model-theoretic games to discrete linear orders and finite automata", </title> <booktitle> Information and Control 33 (1977), </booktitle> <pages> 281-303. </pages>
Reference-contexts: McNaughton and Papert [MP71] proved that in the system without BIT , the languages expressible by first-order formulas are exactly the aperiodic or star-free regular languages (see Ladner <ref> [La77] </ref> for a good exposition of this result in more modern terminology). This is a well-studied subclass of the regular languages with a number of characterizations. <p> Similarly one can show that no non-regular languages are obtained. 25 One way to see this second fact is to use another expressibility result | that of Buchi [Bu60] on monadic second-order quantifiers (see also <ref> [La77] </ref>). This result is that sentences with such quantifiers in our system without BIT can express exactly the regular languages.
Reference: [La79] <author> G. Lallement, </author> <title> Semigroups and Combinatorial Applications (New York: </title> <editor> J. </editor> <publisher> Wiley & Sons, </publisher> <year> 1979). </year>
Reference-contexts: That is, the ability to look at individual bits is crucial to the relationship between finite groups and N C 1 . In Section 12 we explore this issue further, employing classical results on the algebraic structure of finite automata. (See, e.g., [Ei76], <ref> [La79] </ref>, or [Pi86] for background and terminology.) A finite automaton defines a monoid of transformations on its states | a set of functions with an associative operation (functional composition) and an identity (the identity function on the states). <p> In fact the system without BIT was explored first, in the course of efforts to classify regular languages according to algebraic properties. Further exploration of this system leads deeper into algebraic automata theory | see, e.g., Eilenberg [Ei76], Lallement <ref> [La79] </ref>, or Pin [Pi76] for background and definitions. McNaughton and Papert [MP71] proved that in the system without BIT , the languages expressible by first-order formulas are exactly the aperiodic or star-free regular languages (see Ladner [La77] for a good exposition of this result in more modern terminology). <p> To do this we will need a number of algebraic definitions (see, e.g., [Ei76], [Pi86], <ref> [La79] </ref> for more background). We have already defined monoids and groups, and we will assume the basic vocabulary of abstract algebra. A monoid M divides another monoid N if it is the image of a submonoid of M under a homomorphism.
Reference: [Li78] <author> R. J. Lipton, </author> <title> "Model theoretic aspects of computational complexity", </title> <booktitle> in 19th IEEE FOCS Symp. </booktitle> <year> (1978), </year> <pages> 193-200. </pages>
Reference-contexts: To prove the special case of this Lemma (numbers of length O (log n)) used in Proposition 11.3 and in multiplication of O (log n)-bit numbers, it suffices to use a simpler technique suggested by Sam Buss. He notes that Lipton <ref> [Li78] </ref> has shown how to multiply binary integers with an alternating Turing machine using a constant number of alternations and time linear in the length of the product. If the product is O (log n) bits, then, this computation is in LH and thus in F O by Corollary 8.3.
Reference: [MP71] <author> R. McNaughton and S. Papert, </author> <title> Counter-Free Automata (Cambridge, </title> <address> Mass.: </address> <publisher> MIT Press, </publisher> <year> 1971). </year>
Reference-contexts: The first two give us well-studied subclasses of the regular languages. The languages expressible by first-order formulas without BIT are exactly the aperiodic or group-free regular languages, as first proved by Mc-Naughton and Papert <ref> [MP71] </ref>. When we add counting quantifiers to get a uniform version of ACC, we get exactly the solvable regular languages, as shown recently by Straubing, Therien, and Thomas [STT88]. <p> Further exploration of this system leads deeper into algebraic automata theory | see, e.g., Eilenberg [Ei76], Lallement [La79], or Pin [Pi76] for background and definitions. McNaughton and Papert <ref> [MP71] </ref> proved that in the system without BIT , the languages expressible by first-order formulas are exactly the aperiodic or star-free regular languages (see Ladner [La77] for a good exposition of this result in more modern terminology).
Reference: [PS88] <author> I. Parberry and G. Schnitger, </author> <title> "Parallel computation with threshold functions", </title> <institution> J. Comp. Syst. Sci. </institution> <month> 36:3 </month> <year> (1988), </year> <pages> 278-302. </pages>
Reference-contexts: We define T C 0 to be the AC 0 closure of M AJ (cf. [HMPST87]). This is equivalent to the class of languages recognized by circuits of polynomial size and constant depth made up of arbitrary threshold gates (cf. <ref> [PS88] </ref>). T C 0 is a subset of N C 1 , and it is conjectured [HMPST87] that the inclusion is strict. A language is said to be complete for N C 1 under AC 0 reductions if its AC 0 closure is N C 1 . <p> hierarchy, and the class LH of languages accepted by constant-depth alternating log-time machines. 16 * States whose acceptance depends on the number of accepting successor paths modulo some constant. * States whose acceptance depends on whether a majority of the successor paths are accepting, as defined by Parberry and Schnitger <ref> [PS88] </ref>. * States which are analogues of the group-multiplying circuit gates defined in Section 4 above. 8 Equivalence of FO and the Log-time Hierarchy Our main result (Theorem 9.1) depends primarily upon the fact that first-order formulas are powerful enough to express the notion of acceptance by a DLOGT IM E
Reference: [Pi86] <author> J. E. Pin, </author> <title> Varieties of Formal Languages (New York: </title> <publisher> Plenum Press, </publisher> <year> 1986). </year>
Reference-contexts: That is, the ability to look at individual bits is crucial to the relationship between finite groups and N C 1 . In Section 12 we explore this issue further, employing classical results on the algebraic structure of finite automata. (See, e.g., [Ei76], [La79], or <ref> [Pi86] </ref> for background and terminology.) A finite automaton defines a monoid of transformations on its states | a set of functions with an associative operation (functional composition) and an identity (the identity function on the states). <p> To do this we will need a number of algebraic definitions (see, e.g., [Ei76], <ref> [Pi86] </ref>, [La79] for more background). We have already defined monoids and groups, and we will assume the basic vocabulary of abstract algebra. A monoid M divides another monoid N if it is the image of a submonoid of M under a homomorphism.
Reference: [Ra87] <author> A. A. Razborov, </author> <title> "Lower bounds for the size of circuits of bounded depth with basis f&; g", </title> <note> Mathematicheskie Zametki 41:4 (April 1987), 598-607 (in Russian). English translation Math. Notes Acad. </note> <institution> Sci. </institution> <address> USSR 41:4 (Sept. </address> <year> 1987), </year> <pages> 333-338. 33 </pages>
Reference-contexts: Later work has attempted to extend the frontier upward from AC 0 by proving lower bounds for more powerful subclasses. Razborov <ref> [Ra87] </ref> considered the extension of AC 0 obtained by also allowing unbounded fan-in exclusive OR gates, and showed that the majority function (defined by f (x 1 ; : : : ; x n ) = 1 iff the majority of the x i are 1) is not in this class. <p> Partial results are known in this direction. The function M AJ , which returns 1 iff the input has more 1's than 0's, is in N C 1 but was shown to be outside AC 0 (2) by 8 Razborov <ref> [Ra87] </ref> and outside AC 0 (p) for all primes p by Smolensky [Sm87]. Smolensky also showed M OD (q; a) 62 AC 0 (p) for p prime and q not a power of p. We define T C 0 to be the AC 0 closure of M AJ (cf. [HMPST87]).
Reference: [Re87] <author> J. H. Reif, </author> <title> "On threshold circuits and polynomial computation", </title> <booktitle> Second Structure in Complexity Theory Conference (1987), </booktitle> <pages> 118-123. </pages>
Reference-contexts: We should mention also that the several problems only known to be in P -uniform N C 1 , such as those of Beame et al. [BCH84] and of Reif <ref> [Re87] </ref>, are not known to be in this new class. Finally, we consider the effect of the group quantifiers and the width-5 transitive closure operator. Group quantifiers for solvable groups (in fact, monoid quantifiers for solvable monoids) can be simulated by iterated modular counting quantifiers [STT88].
Reference: [Ru81] <author> W. L. Ruzzo, </author> <title> "On uniform circuit complexity," </title> <journal> J. Comp. Sys. Sci., </journal> <month> 21:2 </month> <year> (1981), </year> <pages> 365-383. </pages>
Reference-contexts: In this paper, we explore a variety of conditions suitable for the study of the classes AC 0 , ACC, T C 0 , and N C 1 . There is a reasonable (though complicated) notion of N C 1 uniformity ("U E ? uniformity") due to Ruzzo <ref> [Ru81] </ref> (see also [Co85]) which has the consequence that N C 1 -uniform N C 1 is equivalent to alternating logarithmic time (modulo appropriate conventions on the alternating Turing machines). <p> Lemma 7.2 The class DLOGT IM E-uniform N C 1 equals ALOGT IM E, or N C 1 -uniform N C 1 . Proof: Buss [Bu87] shows that the definition of ALOGT IM E-uniform N C 1 in terms of the formula language is equivalent to Ruzzo's original definition <ref> [Ru81] </ref> in terms of the extended connection language for circuits.
Reference: [Sm87] <author> R. Smolensky, </author> <title> "Algebraic methods in the theory of lower bounds for Boolean circuit complexity", </title> <booktitle> 19th ACM STOC Symp. </booktitle> <year> (1987), </year> <pages> 77-82. </pages>
Reference-contexts: He conjectured that the majority problem was not in ACC, and hence that ACC 6= N C 1 . This remains open, though Smolensky <ref> [Sm87] </ref> has proved some important partial results in this direction, introducing what promises to be a powerful new proof technique. Existing techniques have been unable to show even an N P -complete problem to be outside of ACC. <p> The function M AJ , which returns 1 iff the input has more 1's than 0's, is in N C 1 but was shown to be outside AC 0 (2) by 8 Razborov [Ra87] and outside AC 0 (p) for all primes p by Smolensky <ref> [Sm87] </ref>. Smolensky also showed M OD (q; a) 62 AC 0 (p) for p prime and q not a power of p. We define T C 0 to be the AC 0 closure of M AJ (cf. [HMPST87]).
Reference: [Sp71] <author> P. M. Spira, </author> <title> "On time-hardware complexity tradeoffs for Boolean functions", </title> <booktitle> in Proc. 4th Hawaii Symposium on System Sciences (North Hollywood, </booktitle> <institution> Calif.: Western Periodicals Co., </institution> <year> 1971), </year> <pages> 525-527. </pages>
Reference-contexts: Both N C 1 and AC 0 have equivalent definitions (in their non-uniform versions) by families of expressions. N C 1 is the class of languages recognized by families of Boolean formulas of polynomial length <ref> [Sp71] </ref> or by families of polynomial length and depth O (log n). AC 0 is the class of languages recognized by families of expressions of polynomial length and constant depth, using the unbounded fan-in AND and OR operations.
Reference: [St77] <author> L. Stockmeyer, </author> <title> "The polynomial-time hierarchy," </title> <journal> Theoretical Comp. Sci. </journal> <volume> 3 (1977), </volume> <pages> 1-22. </pages>
Reference: [SV84] <author> L. Stockmeyer and U. Vishkin, </author> <title> "Simulation of parallel random access machines by circuits," </title> <journal> SIAM J. Comput. </journal> <month> 13:2 </month> <year> (1984), </year> <pages> (409-422). </pages>
Reference: [St79] <author> H. Straubing, </author> <title> "Families of recognizable sets corresponding to certain varieties of finite monoids", </title> <editor> J. </editor> <booktitle> Pure and Applied Algebra 18 (1979), </booktitle> <pages> 305-318. </pages>
Reference-contexts: L must be recognized by some wreath product of groups in G and aperiodics we will use induction on the length of this product. Fact 12.2 <ref> [St79, Thm 1.4 and Prop. 2.4] </ref> If L is recognized by A wr M with A aperiodic, then L can be obtained from languages recognized by M by repeated use of Boolean operations and letter concatenation (the latter takes L and L 0 to LaL 0 for any letter a).
Reference: [STT88] <author> H. Straubing, D. Therien, and W. Thomas, </author> <title> "Regular languages defined with generalized quantifiers", </title> <booktitle> Proc. 15th ICALP (1988), </booktitle> <pages> 561-575. </pages>
Reference-contexts: Finally, we investigate a parallel notion of uniformity, still more restrictive, based on the regular languages. Here we give characterizations of subclasses of the regular languages based on their logical expressibility, extending recent work of Straubing, Therien, and Thomas <ref> [STT88] </ref>. A preliminary version of this work appeared as [BIS88]. 2 Introduction 2.1 Circuit Complexity Computer scientists have long tried to classify problems (defined as Boolean predicates or functions) by the size or depth of Boolean circuits needed to solve them. This effort has 1 Former name David A. Barrington. <p> When we add counting quantifiers to get a uniform version of ACC, we get exactly the solvable regular languages, as shown recently by Straubing, Therien, and Thomas <ref> [STT88] </ref>. The two more powerful quantifier types, majority quantifiers and group multiplication quantifiers, yield uniform versions of T C 0 and N C 1 in the presence of BIT . Thus adding them without BIT can be thought of as giving even more uniform versions of these classes. <p> Finally, we consider the effect of the group quantifiers and the width-5 transitive closure operator. Group quantifiers for solvable groups (in fact, monoid quantifiers for solvable monoids) can be simulated by iterated modular counting quantifiers <ref> [STT88] </ref>. However, by 21 Theorem 9.1 and Proposition 7.4 (our DLOGT IM E-uniform version of Barrington's theorem [Ba89]), we know that first-order formulas using quantifiers for any single non-solvable group G can express exactly those languages in DLOGT IM E-uniform N C 1 . <p> The modular counting quantifiers described above were actually introduced as an extension of this system as well. Straubing et al. <ref> [STT88] </ref> prove that with these quantifiers but without BIT one can define exactly the solvable regular languages, i.e., those languages recognized by monoids that contain only solvable groups. If ACC 6= N C 1 , this class of languages is exactly the intersection of ACC with the regular languages [BCST88]. <p> It can be expressed using only quantifiers for groups in G iff it is recognized by a group in [G]. Proof: This is an extension of <ref> [STT88] </ref>, where the groups in G were restricted to be cyclic. We indicate here where changes must be made in this proof to accomodate the group quantifiers. <p> With ordinary quantifiers and Boolean operators, we can express these two operations, so that if all languages recognized by M are expressible then so are all languages recognized by A wr M <ref> [Th82, STT88] </ref>. It remains to deal with the languages recognized by G wr M for G 2 G by expressing them in terms of group quantifiers, Boolean operations, and expressions for languages recognized by M . Let L be recognized by G wr M . <p> This construction 27 is identical to that of <ref> [STT88] </ref>. Now for each m 0 2 M , f (m 0 ) is calculated by multiplying together a sequence of group elements as described above. <p> As in <ref> [STT88] </ref>, we define the quantifier type of a formula to be a sequence (u 1 ; : : : ; u s ) where each u i is a group in G or the symbol ?. <p> The quantifier type gives the order of the quantifiers in the formula and whether these are group or ordinary (?) quantifiers. We prove the recognizability of expressed languages by induction on the length of the quantifier type. Again as in <ref> [STT88] </ref>, for any sentence ' we define formulas '[; x] and '[x; ], each with one free variable, denoting respectively "the initial segment of the input ending at position x 1 satisfies '" and "the final segment of the input beginning at position x + 1 satisfies '". <p> These formulas have the same quantifier type as '. The following lemma may then be proved in an identical manner to the corresponding lemma of <ref> [STT88] </ref>: Lemma 12.3 Let '(x) be a formula of quantifier type with one free variable. <p> We now proceed by induction on the length jj of , and the case of adding ordinary quantifiers is already handled in <ref> [STT88] </ref>. It is useful to consider the case jj = 1 separately. Here we have a formula ( G;g x)g (x) where g (x) is made up of Boolean combinations of atomic formulas C a (x), and thus depends only on the x th input letter.
Reference: [Th82] <author> W. Thomas, </author> <title> "Classifying regular events in symbolic logic", </title> <journal> J. Comp. Sys. Sci. </journal> <volume> 25 (1982), </volume> <pages> 360-376. </pages>
Reference-contexts: With ordinary quantifiers and Boolean operators, we can express these two operations, so that if all languages recognized by M are expressible then so are all languages recognized by A wr M <ref> [Th82, STT88] </ref>. It remains to deal with the languages recognized by G wr M for G 2 G by expressing them in terms of group quantifiers, Boolean operations, and expressions for languages recognized by M . Let L be recognized by G wr M .
Reference: [Va82] <author> M. Vardi, </author> <title> "Complexity of relational query languages," </title> <booktitle> 14th ACM STOC Symp. </booktitle> <year> (1982), </year> <pages> 137-146. </pages>
Reference-contexts: One can add a least fixed point operator (LFP) to first-order logic to formalize the power of defining new relations by induction. Immerman and Vardi independently showed that the language (F O + LF P ) is equal to polynomial time <ref> [Im86, Va82] </ref>. Immerman also considered the addition of a transitive closure operator (TC) to first-order logic, and showed that (F O + T C) = N SP ACE (log n) [Im86, Im88].
References-found: 43

