URL: http://www.cs.mu.oz.au/tr_db/mu_96_38.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Email: faet,leeg@cs.mu.oz.au,  
Title: A Guide To The NU-Prolog Debugging Environment Debugging Environment (Nude) is a collection of integrated
Author: Bert Thompson and Lee Naish 
Note: The NU-Prolog  
Web: http://www.cs.mu.oz.au/faet,leeg  
Abstract: Technical Report 96/38 Department of Computer Science University of Melbourne Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [CM84] <author> W. Clocksin and C. Mellish. </author> <title> Programming in Prolog. </title> <publisher> Springer-Verlag, </publisher> <address> 2nd edition, </address> <year> 1984. </year>
Reference-contexts: It has static analyses and user-driven dynamic analyses including a four-port debugger and a declarative debugger. This document is a guide to using the environment. We assume that you are familiar with Prolog to the level of <ref> [CM84] </ref> or [SS86]. In particular, you should be familiar with the NU-Prolog system described in [TZ86]. You would also find some knowledge of logic programming theory to be useful, such as is covered in [Llo87] and [Doe94].
Reference: [Doe94] <author> K. Doets. </author> <title> From Logic To Logic Programming. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: We assume that you are familiar with Prolog to the level of [CM84] or [SS86]. In particular, you should be familiar with the NU-Prolog system described in [TZ86]. You would also find some knowledge of logic programming theory to be useful, such as is covered in [Llo87] and <ref> [Doe94] </ref>. If you are reading this paper, you probably have some interest in declarative debugging already. We provide some background and motivation anyway. 1.1 Nude at a glance Nude has been under development since 1991 by Lee Naish and others at the University of Melbourne.
Reference: [Llo87] <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Spinger-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: We assume that you are familiar with Prolog to the level of [CM84] or [SS86]. In particular, you should be familiar with the NU-Prolog system described in [TZ86]. You would also find some knowledge of logic programming theory to be useful, such as is covered in <ref> [Llo87] </ref> and [Doe94]. If you are reading this paper, you probably have some interest in declarative debugging already. We provide some background and motivation anyway. 1.1 Nude at a glance Nude has been under development since 1991 by Lee Naish and others at the University of Melbourne.
Reference: [MO84] <author> A. Mycroft and R. O'Keefe. </author> <title> A Polymorphic Type System For Prolog. </title> <journal> Artificial Intelligence, </journal> <volume> 23 </volume> <pages> 295-307, </pages> <year> 1984. </year>
Reference-contexts: The type system was introduced in [Nai92b] and bears similarities to that of <ref> [MO84] </ref>. Note that the current syntax differs from that of [Nai92b]. NTC was designed to facilitate experimentation, so the syntax supports a very rich set of typesystems. However a simpler one that makes use of only some of the syntactic constructs may be used instead.
Reference: [Nai92a] <author> L. Naish. </author> <title> Declarative Diagnosis of Missing Answers. </title> <journal> New Generation Computing, </journal> <volume> 29(6) </volume> <pages> 255-285, </pages> <year> 1992. </year>
Reference: [Nai92b] <author> L. Naish. </author> <title> Types in Logic Programming, chapter 6 (Types and Intended Meaning). </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: The type system was introduced in <ref> [Nai92b] </ref> and bears similarities to that of [MO84]. Note that the current syntax differs from that of [Nai92b]. NTC was designed to facilitate experimentation, so the syntax supports a very rich set of typesystems. <p> The type system was introduced in <ref> [Nai92b] </ref> and bears similarities to that of [MO84]. Note that the current syntax differs from that of [Nai92b]. NTC was designed to facilitate experimentation, so the syntax supports a very rich set of typesystems. However a simpler one that makes use of only some of the syntactic constructs may be used instead.
Reference: [Nai95] <author> L. Naish. </author> <title> A Declarative Debugging Scheme. </title> <type> Technical Report 95/1, </type> <institution> University of Melbourne, </institution> <year> 1995. </year>
Reference: [NDZ88] <author> L. Naish, P.W. Dart, and J. Zobel. </author> <title> The NU-Prolog Debugging Environment. </title> <type> Technical Report 88/31, </type> <institution> University of Melbourne, </institution> <year> 1988. </year>
Reference: [Sha83] <author> E. Shapiro. </author> <title> Algorithmic Debugging. </title> <publisher> MIT Press, </publisher> <year> 1983. </year>
Reference: [SHC95] <author> Z. Somogyi, F. Henderson, and T. Conway. </author> <title> Mercury: An Efficient Purely Declarative Logic Programming Language. </title> <booktitle> In Proceedings of the Australian Computer Science Conference, </booktitle> <pages> pages 499-512, </pages> <address> Glenelg, Australia, </address> <month> February </month> <year> 1995. </year>
Reference-contexts: Although continuing refinement of Nude will fix some of these problems, others are consequences of the declarative debugging paradigm and therefore require more research. * The Nude can be applied only to NU-Prolog programs. However plans are afoot to port Nude to the pure logic language Mercury <ref> [SHC95] </ref>. * The dynamic analyses for declarative debugging work properly only for pure Prolog code. That is, there may be no non-logical constructs as defined in the NU-Prolog manual [TZ86]. Such constructs include i/o, cuts, and meta-level operations. It is possible, however, to debug pure components of impure programs.
Reference: [SS86] <author> L. Sterling and E. Shapiro. </author> <title> The Art of Prolog. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: It has static analyses and user-driven dynamic analyses including a four-port debugger and a declarative debugger. This document is a guide to using the environment. We assume that you are familiar with Prolog to the level of [CM84] or <ref> [SS86] </ref>. In particular, you should be familiar with the NU-Prolog system described in [TZ86]. You would also find some knowledge of logic programming theory to be useful, such as is covered in [Llo87] and [Doe94]. If you are reading this paper, you probably have some interest in declarative debugging already.
Reference: [TZ86] <author> James A. Thom and Justin Zobel. </author> <title> NU-Prolog Reference Manual, Version 1.3. </title> <type> Technical Report 86/10, </type> <institution> University of Melbourne, </institution> <year> 1986. </year> <month> 28 </month>
Reference-contexts: This document is a guide to using the environment. We assume that you are familiar with Prolog to the level of [CM84] or [SS86]. In particular, you should be familiar with the NU-Prolog system described in <ref> [TZ86] </ref>. You would also find some knowledge of logic programming theory to be useful, such as is covered in [Llo87] and [Doe94]. If you are reading this paper, you probably have some interest in declarative debugging already. <p> A declaration of the form :- pure f unctor/arity. tells NU-Prolog that f unctor/arity calls only logical code. That is, it makes no calls to predicates such as !/0 or assert/1 or any other predicates labelled non-logical in the NU-Prolog manual <ref> [TZ86] </ref>. * The program may flounder, because it is not stratified, for instance. * Variable names have problems. <p> Strictly speaking, this is a dynamic analysis since there is user interaction. 10 3.2.1 NU-Prolog four-port debugger NU-Prolog has a four-port debugger in addition to the declarative debugging environment. Consult the NU-Prolog manual <ref> [TZ86] </ref> for details. <p> The static analysis is similar to that used in nac, 6 which is a utility for adding control information (when declarations) to NU-Prolog programs in order to improve termination properties. See the NU-Prolog manual <ref> [TZ86] </ref> for more on nac. The dynamic analysis works by performing a limited form of execution and checking for recursion that is apparently not approaching a base case or deep stack growth. <p> However plans are afoot to port Nude to the pure logic language Mercury [SHC95]. * The dynamic analyses for declarative debugging work properly only for pure Prolog code. That is, there may be no non-logical constructs as defined in the NU-Prolog manual <ref> [TZ86] </ref>. Such constructs include i/o, cuts, and meta-level operations. It is possible, however, to debug pure components of impure programs. <p> B.1 initialising the debugging environment dConsult (F ile) dConsult ([F ile 1 ,F ile 2 ,...]) Loads clauses of F ile into the debugging area. This does not affect other code. (Note that dConsult is akin to consult/1. See the NU-Prolog manual <ref> [TZ86] </ref>.) The alternative form takes a list of files and loads the clauses from each into the debugging area. dLoad (F ile) dLoad ([F ile 1 ,F ile 2 ,...]) Same as dConsult/1, but if an up-to-date F ile:no exists, it too is loaded. 21 processGoal (F ile, Goal, N ameList, <p> Clauses are represented by terms of the form cl ((Head:-Body),N ameList,V arList) where N ameList and V arList are as in readTerm/3. (See the NU-Prolog manual <ref> [TZ86] </ref> for the definition of readTerm/3.) Either or both of F unctor and Arity may be variables. dClauses (F unctor, Arity, ClauseList) ClauseList is the list of clauses (in cl/3 format) of the predicate F unctor/Arity. <p> The cursor is positioned appropriately. dListing List the predicates currently in the debugger. This is akin to listing/0. (See the NU-Prolog manual <ref> [TZ86] </ref> for the definition of listing/0.) dPortraycl (Clause) Clause is a clause in cl/3 format and is output with its original variable names via portraycl/1. (See the NU-Prolog manual [TZ86] for the definition of portraycl/1.) C the NU-Prolog four-port debugger Here we describe the commands of the Nude four-port debugger. debug <p> This is akin to listing/0. (See the NU-Prolog manual <ref> [TZ86] </ref> for the definition of listing/0.) dPortraycl (Clause) Clause is a clause in cl/3 format and is output with its original variable names via portraycl/1. (See the NU-Prolog manual [TZ86] for the definition of portraycl/1.) C the NU-Prolog four-port debugger Here we describe the commands of the Nude four-port debugger. debug Enter debug mode by setting the debugging flag to debug. <p> This is done automatically by spy/1 if debugging is set to off. (See trace/0 and prologFlag/3 in the NU-Prolog manual <ref> [TZ86] </ref>.) debugging Lists all current spypoints and information about the debugging system. leash (M ode) Controls the behaviour of the debugger when it traces a goal. <p> Note that leashCondition/3 has no effect on spypoints. nodebug Sets the debugging flag to off. This doesn't remove spypoints it merely causes them to be ignored. (See prologFlag/3 in the NU-Prolog manual <ref> [TZ86] </ref>.) nospy P redicate nospy [P redicate 1 ,...P redicate n ] Removes any spypoints on P redicate (or P redicate 1 ... P redicate n ), where each P redicate is specified as F unctor/Arity.
References-found: 12

