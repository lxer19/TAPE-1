URL: ftp://theory.lcs.mit.edu/pub/tcryptol/96-15.ps
Refering-URL: http://theory.lcs.mit.edu/~tcryptol/1996/96-15.html
Root-URL: 
Email: E-mail: mihir@cs.ucsd.edu.  E-mail: shafi@theory.lcs.mit.edu.  
Title: Verifiable Partial Key Escrow  
Author: Mihir Bellare Shafi Goldwasser 
Date: October 1995.  November 1996  
Address: San Diego,  San Diego, 9500 Gilman Drive, La Jolla, California 92093, USA.  545 Technology Square, Cambridge, MA 02139, USA.  
Affiliation: Department of Computer Science and Engineering, University of California at  Department of Computer Science Engineering, Mail Code 0114, University of California at  MIT Laboratory of Computer Science,  
Note: To appear in Proceedings of the Fourth Annual Conference on Computer and Communications Security, ACM, 1997. Earlier version was Technical Report CS95-447,  
Abstract: One of the main objections to existing proposals for key escrow is that the individual's privacy relies on too high a level of trust in the law enforcement agencies. In particular, even if the government is trustworthy today, it may be replaced by an un-trustworthy government tomorrow which could immediately and suddenly recover the secret keys of all users. "Partial key escrow" was suggested to address this concern, in the context of DES keys. Only some part of a user key is escrowed, so that the authority must make a computational effort to find the rest. We extend this idea and provide schemes to perform partial key escrow in a verifiable manner in a public-key encryption setting. We uncover some subtle issues which must be addressed for any partial key escrow scheme to be secure, the most important of which is the danger of early recovery. We show that other proposals for verifiable partial key escrow suffer from the early recovery problem, and thus do not in fact offer an advantage over standard key-escrow schemes. Our verifiable partial key escrow scheme for the Diffie-Hellman cryptosystem does not suffer from early recovery. Political debate will not make the user versus law-enforcement conflict on privacy vanish. Today we are seeing corporations, pushed by their business needs, ready to accept some form of key escrow. The realistic and urgent question is to find the form which guarantees the most privacy. Our schemes are candidates. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bellare, S. Micali and R. Ostrovsky. </author> <title> The (True) Complexity of Statistical Zero-Knowledge. </title> <booktitle> Proceedings of the 22nd Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1990. </year>
Reference-contexts: Finally, we prove that a is small based on its commitment. (The protocol we use, due to [13, 14], is perfectly witness indistinguishable, in the sense of <ref> [1, 20] </ref>, which is all we need. See Appendix A). All this is done quite efficiently. We let l be the parameter such that 2 l is the desired delay time in the partial recovery. (A suggested range of choices is 40 to 48).
Reference: [2] <author> M. Bellare and O. Goldreich. </author> <title> On defining proofs of knowledge. </title> <booktitle> Advances in Cryptology - Crypto 92 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 740, </volume> <editor> E. Brickell ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [3] <author> M. Bellare and S. Goldwasser. </author> <title> Verifiable partial key escrow. </title> <type> Technical Report number CS95-447, </type> <institution> Dept of CS and Engineering, UCSD, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: We present early recovery attacks on both his schemes- see Section 2.2 and Section 4.4. 1.8 Related work After Shamir suggested partial escrow of DES keys [38] several researchers have been inspired to work on it. Our work presented here first appeared as a technical report <ref> [3] </ref>.
Reference: [4] <author> M. Bellare and S. Goldwasser. </author> <title> Encapsulated key escrow. </title> <note> Available at http://www-cse.ucsd. edu/users/mihir. Earlier version was MIT Laboratory for Computer Science Technical Report 688, April 1996. Also presented at Eurocrypt 96 rump session, </note> <month> May </month> <year> 1996. </year>
Reference-contexts: Subsequently, [38] and [28] were merged into a joint paper [29]. 6 Recently we have developed a different approach, called "encapsulated key escrow" (EKE) <ref> [4] </ref>. It achieves the same kind of "time delayed recovery" that partial key escrow aims to achieve, meaning that after recovery of the escrowed information there is still a computational effort required to find the user secret key. But the method (EKE) is quite different. <p> Another is that the numbers defining the cryptosystem are large, making public key operations slow. Both these problems are addressed in our new work <ref> [4] </ref>. The scheme we present there enables a user to escrow the factors of a given RSA modulus, say one product of two primes.
Reference: [5] <author> M. Bellare and R. Rivest. </author> <title> Translucent cryptography- An alternative to key escrow and its implementation via fractional oblivious transfer. </title> <institution> MIT Laboratory for Computer Science Technical Memo. </institution> <month> 683, February </month> <year> 1996. </year>
Reference-contexts: Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>.
Reference: [6] <author> M. Bellare and P. Rogaway. </author> <title> Random oracles are practical: a paradigm for designing efficient protocols. </title> <booktitle> Proceedings of the First Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1993. </year>
Reference-contexts: The interaction can be eliminated by specifying the challenges via a hash of the committals and other information. (See Appendix A for a discussion. Also see <ref> [6] </ref> for discussions of the random oracle setting in which this can be modeled, definitions for this setting, and discussions of the meaningfulness of instantiating random oracles via hash functions.) Notice that the bulk of the user cost above is coming from the fact that he must run 2ln executions of
Reference: [7] <author> M. Bellare and P. Rogaway. </author> <title> Optimal asymmetric encryption. </title> <booktitle> Advances in Cryptology Euro-crypt 94 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 950, </volume> <editor> A. De Santis ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Simultaneously achieving verifiability and delayed recovery, while maintaining efficiency, turned out to be more challenging than it might look at first, and required new protocol development. VPKE for factoring based cryptosystems. There are many suggestions for public-key encryption schemes based on the difficulty of factoring integers, e.g <ref> [36, 11, 7] </ref>. It is thus desirable to implement an efficient verifiable partial key escrow protocol, for any factoring based cryptosystem. We do this. Our scheme does not achieve delayed recovery, but has several nice extra features.
Reference: [8] <author> T. Beth, H. Knobloch, M. Otten, G. Simmons, and P. Wichmann. </author> <title> Towards acceptable key escrow systems. </title> <booktitle> Proceedings of the Second Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1994. </year>
Reference-contexts: Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>.
Reference: [9] <author> G. Blakley. </author> <title> Safeguarding cryptographic keys. </title> <booktitle> AFIPS Conference Proceedings, </booktitle> <month> June </month> <year> 1979. </year>
Reference-contexts: This too is obviously not popular. More serious consideration is being given to "split key escrow" [27, 41]. Here the user's private key is split into n pieces, and the pieces are "escrowed" with separate trusted agents. The pieces obey the secret sharing property <ref> [9, 37] </ref>- any k of them can be used to re-construct the original private key, but no t pieces yield any information about it. (The parameters k; t and n can be chosen as desired.
Reference: [10] <author> M. </author> <title> Blaze. Protocol failure in the escrowed encryption standard. </title> <booktitle> Proceedings of the Second Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1994. </year>
Reference-contexts: Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>.
Reference: [11] <author> M. Blum and S. Goldwasser. </author> <title> An efficient probabilistic public-key encryption that hides all partial information. </title> <booktitle> Advances in Cryptology - Crypto 84 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 196, </volume> <editor> R. Blakely ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Simultaneously achieving verifiability and delayed recovery, while maintaining efficiency, turned out to be more challenging than it might look at first, and required new protocol development. VPKE for factoring based cryptosystems. There are many suggestions for public-key encryption schemes based on the difficulty of factoring integers, e.g <ref> [36, 11, 7] </ref>. It is thus desirable to implement an efficient verifiable partial key escrow protocol, for any factoring based cryptosystem. We do this. Our scheme does not achieve delayed recovery, but has several nice extra features.
Reference: [12] <author> B. Chor, S. Goldwasser, S. Micali, and B. Awerbuch. </author> <title> Verifiable secret sharing and achieving simultaneity in the presence of faults. </title> <booktitle> Proceedings of the 27th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1986. </year>
Reference-contexts: We recall that the issue of verifiability for secret sharing was raised by Chor, Goldwasser, Micali and Awerbuch <ref> [12] </ref>, who introduced the notion of VSS (Verifiable Secret Sharing). Verifiability was addressed for standard key escrow by Micali [27]. Now there is now a new element- the partiality of the escrow must be verified too.
Reference: [13] <author> R. Cramer. </author> <title> Private communication, </title> <month> January 17, </month> <year> 1996. </year>
Reference-contexts: Finally, we prove that a is small based on its commitment. (The protocol we use, due to <ref> [13, 14] </ref>, is perfectly witness indistinguishable, in the sense of [1, 20], which is all we need. See Appendix A). All this is done quite efficiently.
Reference: [14] <author> R. Cramer, I. Damg -ard and B. Schoenmakers. </author> <title> Proofs of partial knowledge and simplified design of witness hiding protocols. </title> <booktitle> Advances in Cryptology - Crypto 94 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 839, </volume> <editor> Y. Desmedt ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Finally, we prove that a is small based on its commitment. (The protocol we use, due to <ref> [13, 14] </ref>, is perfectly witness indistinguishable, in the sense of [1, 20], which is all we need. See Appendix A). All this is done quite efficiently.
Reference: [15] <author> D. Denning. </author> <title> To tap or not to tap. </title> <journal> CACM 1993. </journal>
Reference-contexts: Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>.
Reference: [16] <author> D. Denning and M. Smid. </author> <title> Key escrowing now. </title> <journal> IEEE Communications Magazine, </journal> <month> Sep. </month> <year> 1994. </year>
Reference-contexts: Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>.
Reference: [17] <author> Y. Desmedt. </author> <title> Securing traceability of ciphertexts: towards a secure software key escrow system. </title> <booktitle> Advances in Cryptology - Eurocrypt 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 921, </volume> <editor> L. Guillou and J. Quisquater ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>.
Reference: [18] <author> W. Diffie and M. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Trans. Info. Theory IT-22, </journal> <pages> pp. 644-654, </pages> <month> November </month> <year> 1976. </year>
Reference-contexts: Because of this, if a government or corporation proposes to adopt a scheme suffering from early recovery, it is likely to meet with a negative public reaction. 1.6 New schemes VPKE for the DH cryptosystem. The Diffie-Hellman cryptosystem <ref> [18] </ref> is one of the most popular and convenient ones, and in particular lends itself quite naturally to standard (verifiable) split key escrow [27]. Thus it is a natural starting point to implement the idea of partiality. We provide a verifiable, partial key escrow (VPKE) scheme for the Diffie-Hellman cryptosystem.
Reference: [19] <author> C. Dwork and M. Naor. </author> <title> Pricing via processing, or how to combat junk mail. </title> <booktitle> Advances in Cryptology - Crypto 92 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 740, </volume> <editor> E. Brickell ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: But we can use similar ideas to get solutions for this case as well. The idea of using processing time to "slow down" some action of an adversary appears also in a work of Dwork and Naor <ref> [19] </ref> where they propose schemes to combat "junk mail." 2 Issues and attacks The best way to introduce the issues is by example. Let us recall what is the DH system, and what is the standard fair DH system of [27].
Reference: [20] <author> U. Feige and A. Shamir. </author> <title> Witness Indistinguishable and Witness Hiding Protocols. </title> <booktitle> Proceedings of the 22nd Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1990. </year> <month> 18 </month>
Reference-contexts: Finally, we prove that a is small based on its commitment. (The protocol we use, due to [13, 14], is perfectly witness indistinguishable, in the sense of <ref> [1, 20] </ref>, which is all we need. See Appendix A). All this is done quite efficiently. We let l be the parameter such that 2 l is the desired delay time in the partial recovery. (A suggested range of choices is 40 to 48).
Reference: [21] <author> P. Feldman. </author> <title> A practical scheme for non-interactive verifiable secret sharing. </title> <booktitle> Proceedings of the 28th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1987. </year>
Reference-contexts: The fair DH system. In Micali's fair Diffie-Hellman cryptosystem-system [27], the user, having published g S , escrows S by simply sharing it via a simple discrete log based verifiable secret sharing (VSS) scheme. (This VSS scheme is based on ideas of Feldman and Pedersen <ref> [21, 33] </ref>. <p> In Micali's fair Diffie-Hellman cryptosystem-system [27], the user, having published g S , escrows S by simply sharing it via a simple discrete log based verifiable secret sharing (VSS) scheme. (This VSS scheme is based on ideas of Feldman and Pedersen [21, 33]. The VSS schemes of <ref> [27, 21, 33] </ref> are attractive because they are efficient and non-interactive.) The verifiability is in the fact that the trustees are able to check that they really have pieces of S, meaning that if later they try to recover the shared secret, they will really get the secret key S of <p> The same scheme appears in [29]). The public key has the form P = g x+a where x is long but a is only, say, 80 bits. Now one can escrow x as before, via the VSS of <ref> [27, 21, 33] </ref>. (This requires providing the trustees with g x . <p> The key principle is this: it should take 2 40 steps to recover a after x is revealed, but, before that, recovering a should be intractable. We want to escrow x. But we run straightaway into a problem. The VSS schemes of <ref> [27, 21, 33] </ref> require that we publish (ie. make available to the trustees, who need to do the verification) the quantity g x . But then a trustee can recover g a = P=g x , and early recovery is possible. <p> Instead, the user commits to them information-theoretically. (The trustees get no information about x; a, even if they are computationally unbounded, while the user is committed as long as he cannot compute discrete logarithms.) We can no longer use the VSS schemes of <ref> [21, 33] </ref> to escrow x, but, luckily, Pedersen, in a later paper [34], had a (different) scheme which achieved information theoretic secure VSS, and is just what we need. (See Appendix B). <p> This is our h. The value of j for which H (p; g; j) = h will also be published. 12 An important feature of the scheme is that g x is not revealed. We also note that this scheme is as efficient as those of <ref> [21, 33] </ref> and in particular is also non-interactive. Proof of smallness of small component. The last step of the protocol is to convince the trustees that a is only 2l bits long.
Reference: [22] <author> Y. Frankel and M. Yung. </author> <title> Escrow encryption systems visited: attacks, analysis and designs. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>.
Reference: [23] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proofs. </title> <journal> SIAM J. Comput. </journal> <volume> Vol. 18, No. 1, </volume> <pages> pp. 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference: [24] <author> J. Kilian and T. Leighton. </author> <title> Fair cryptosystems revisited. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In Micali's "fair public key cryptosystems" [27], the user can himself choose his private key |or choose it in conjunction with the government as in <ref> [24] </ref>| but the government trustees can verify that they indeed received proper pieces of the escrowed keys. In the Clipper chip approach, which applies to private key cryptography, a trusted agency chooses the key and puts it in tamper-proof hardware [41]. <p> Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>. <p> We stress that schemes having early recovery are much easier to design. But 1 For simplicity we ignore for the moment the issues of subliminal channels that this raises, since this is easily fixed by having the keys chosen by the user and government together <ref> [24] </ref>. 5 they should be avoided, because the promised extra deterrent to the government is in effect not present. Thus, in some ways, it is worse than standard escrow, because the individual is promised some extra security which does not exist. <p> In contrast, we work over groups of prime order, and thus avoid the small exponent attacks. Subliminal channels and other such issues. Kilian and Leighton <ref> [24] </ref> pointed out that if the user in a key-escrow system chooses his secret key himself, then the public key may present a subliminal channel via which the user may communicate with another user. They suggest how this could be fixed.
Reference: [25] <author> H. Lenstra. </author> <title> Factoring integers with elliptic curves. </title> <journal> Annals of Math Vol. </journal> <volume> 126, </volume> <pages> pp. 649-673, </pages> <year> 1987. </year>
Reference-contexts: However, we recall that the elliptic curve based factoring algorithms have the property of finding the smallest prime factor of a given number in time proportional to the size of that factor <ref> [25] </ref>. So just given N , anyone can quickly find q 1 ; q 2 . This is an early recovery attack. How well this attack performs depends of course on the size k 2 of q 1 and q 2 . We see a tradeoff.
Reference: [26] <author> A. Lenstra, P. Winkler and Y. Yacobi. </author> <title> A key escrow system with warrant bounds. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>.
Reference: [27] <author> S. Micali. </author> <title> Fair public key cryptosystems. </title> <booktitle> Advances in Cryptology - Crypto 92 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 740, </volume> <editor> E. Brickell ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Naturally, this is not popular. Then there are various forms of "key escrow." The simplest is "full key escrow", where the user is expected to provide his entire secret key to the government. This too is obviously not popular. More serious consideration is being given to "split key escrow" <ref> [27, 41] </ref>. Here the user's private key is split into n pieces, and the pieces are "escrowed" with separate trusted agents. <p> In the most popular implementations k = t + 1.) It is expected that the trustees will release their pieces only upon presentation of an appropriate court order. In Micali's "fair public key cryptosystems" <ref> [27] </ref>, the user can himself choose his private key |or choose it in conjunction with the government as in [24]| but the government trustees can verify that they indeed received proper pieces of the escrowed keys. <p> We recall that the issue of verifiability for secret sharing was raised by Chor, Goldwasser, Micali and Awerbuch [12], who introduced the notion of VSS (Verifiable Secret Sharing). Verifiability was addressed for standard key escrow by Micali <ref> [27] </ref>. Now there is now a new element- the partiality of the escrow must be verified too. Namely, it should be possible to check that the secret key can be reconstructed in the claimed amount of time, if the trustees reveal their pieces of the public key. <p> The Diffie-Hellman cryptosystem [18] is one of the most popular and convenient ones, and in particular lends itself quite naturally to standard (verifiable) split key escrow <ref> [27] </ref>. Thus it is a natural starting point to implement the idea of partiality. We provide a verifiable, partial key escrow (VPKE) scheme for the Diffie-Hellman cryptosystem. Our scheme, presented in Section 3, has delayed, not early, recovery. <p> Let us recall what is the DH system, and what is the standard fair DH system of <ref> [27] </ref>. Then we illustrate early recovery by providing an early recovery attack on an existing scheme. In the next section we will present our solution for DH. 2.1 Background The DH system. <p> This properties make the system very convenient to use, so that it is amongst the foremost choices of public key systems. The fair DH system. In Micali's fair Diffie-Hellman cryptosystem-system <ref> [27] </ref>, the user, having published g S , escrows S by simply sharing it via a simple discrete log based verifiable secret sharing (VSS) scheme. (This VSS scheme is based on ideas of Feldman and Pedersen [21, 33]. <p> In Micali's fair Diffie-Hellman cryptosystem-system [27], the user, having published g S , escrows S by simply sharing it via a simple discrete log based verifiable secret sharing (VSS) scheme. (This VSS scheme is based on ideas of Feldman and Pedersen [21, 33]. The VSS schemes of <ref> [27, 21, 33] </ref> are attractive because they are efficient and non-interactive.) The verifiability is in the fact that the trustees are able to check that they really have pieces of S, meaning that if later they try to recover the shared secret, they will really get the secret key S of <p> The same scheme appears in [29]). The public key has the form P = g x+a where x is long but a is only, say, 80 bits. Now one can escrow x as before, via the VSS of <ref> [27, 21, 33] </ref>. (This requires providing the trustees with g x . <p> The key principle is this: it should take 2 40 steps to recover a after x is revealed, but, before that, recovering a should be intractable. We want to escrow x. But we run straightaway into a problem. The VSS schemes of <ref> [27, 21, 33] </ref> require that we publish (ie. make available to the trustees, who need to do the verification) the quantity g x . But then a trustee can recover g a = P=g x , and early recovery is possible.
Reference: [28] <author> S. Micali. </author> <title> Guaranteed partial key escrow. </title> <institution> MIT Laboratory for Computer Science Technical Memo. </institution> <month> 537, September </month> <year> 1995. </year>
Reference-contexts: We remark that the issue of verifiability of partial key escrow for public key cryptosystems was raised, concurrently and independently, by Micali <ref> [28] </ref>. Early versus delayed recovery. The main technical difficulty in implementing verifiable partial key escrow is in controlling when can the government do the 2 40 extra computation steps. We note a subtle point here. <p> We achieve this for Diffie-Hellman. (For RSA we do not because we require the modulus to have many prime factors, making it very big). In addition, we stress that our protocols, while not blindingly fast, are quite efficient. 1.7 Other proposals Independently, Micali <ref> [28] </ref> provides a partial escrow scheme for the DH system, and a factoring based partial key escrow scheme. He calls them "guaranteed partial key escrow" (GPKE) schemes. <p> As mentioned above, concurrently and independently of this work, Micali has raised the issue of verifiability of partial key escrow for public key cryptosystems, and has proposed two schemes for what he calls "guaranteed partial key escrow," one for the Diffie-Hellman system, and one for factoring based systems <ref> [28] </ref>. (However he has not considered the issue of early recovery). Subsequently, [38] and [28] were merged into a joint paper [29]. 6 Recently we have developed a different approach, called "encapsulated key escrow" (EKE) [4]. <p> the issue of verifiability of partial key escrow for public key cryptosystems, and has proposed two schemes for what he calls "guaranteed partial key escrow," one for the Diffie-Hellman system, and one for factoring based systems <ref> [28] </ref>. (However he has not considered the issue of early recovery). Subsequently, [38] and [28] were merged into a joint paper [29]. 6 Recently we have developed a different approach, called "encapsulated key escrow" (EKE) [4]. <p> Micali's suggestion for a "guaranteed partial key escrow" (GPKE) scheme for DH is like this. (This scheme is from <ref> [28] </ref>. The same scheme appears in [29]). The public key has the form P = g x+a where x is long but a is only, say, 80 bits. <p> However, one can compensate by increasing the size of a. Hence we don't consider this a major attack. Note that the small exponent attacks of [40] work over Z fl p , which is the group used in <ref> [28] </ref>. One way to avoid these attacks is to work in groups of prime order. (The order of Z fl p is p 1 which is not prime.) However, this can't be done for the GPKE of [28] because the ZK proofs require that the scheme is over Z fl p <p> [40] work over Z fl p , which is the group used in <ref> [28] </ref>. One way to avoid these attacks is to work in groups of prime order. (The order of Z fl p is p 1 which is not prime.) However, this can't be done for the GPKE of [28] because the ZK proofs require that the scheme is over Z fl p with p 1 = mq for prime q and some integer m. In contrast, we work over groups of prime order, and thus avoid the small exponent attacks. Subliminal channels and other such issues. <p> This, as we discussed in the introduction and Section 2, is not desirable. Next we note that other existing schemes have the same problem. 4.4 Early recovery for factoring based GPKE We note that <ref> [28] </ref> discusses a "guaranteed partial key escrow" factoring based scheme as well. This scheme is very similar to the first scheme above, but, in fact, more efficient. But the scheme requires the use of private channels between the government and the individuals. 16 We note that the GPKE scheme of [28] <p> <ref> [28] </ref> discusses a "guaranteed partial key escrow" factoring based scheme as well. This scheme is very similar to the first scheme above, but, in fact, more efficient. But the scheme requires the use of private channels between the government and the individuals. 16 We note that the GPKE scheme of [28] suffers from early recovery. The reason is interesting so let us discuss it. In the scheme of [28], the modulus published has the form N = p 1 p n q 1 q 2 , with the p i being large (512 bits) and the q i being small (150 <p> But the scheme requires the use of private channels between the government and the individuals. 16 We note that the GPKE scheme of <ref> [28] </ref> suffers from early recovery. The reason is interesting so let us discuss it. In the scheme of [28], the modulus published has the form N = p 1 p n q 1 q 2 , with the p i being large (512 bits) and the q i being small (150 bits).
Reference: [29] <author> S. Micali and A. Shamir. </author> <title> Partial key escrow. </title> <type> Manuscript, </type> <month> February </month> <year> 1996. </year>
Reference-contexts: Subsequently, [38] and [28] were merged into a joint paper <ref> [29] </ref>. 6 Recently we have developed a different approach, called "encapsulated key escrow" (EKE) [4]. <p> Micali's suggestion for a "guaranteed partial key escrow" (GPKE) scheme for DH is like this. (This scheme is from [28]. The same scheme appears in <ref> [29] </ref>). The public key has the form P = g x+a where x is long but a is only, say, 80 bits. Now one can escrow x as before, via the VSS of [27, 21, 33]. (This requires providing the trustees with g x .
Reference: [30] <author> S. Micali and R. Sidney. </author> <title> A simple method for generating and sharing pseudo-random functions, with applications to clipper-like key escrow systems. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>.
Reference: [31] <author> A. Odlyzko. </author> <title> The future of integer factorization. </title> <journal> CryptoBytes, RSA Labs Newsletter, </journal> <volume> Vol 1, No. 2, </volume> <pages> pp. 5-12, </pages> <month> Summer </month> <year> 1995. </year>
Reference-contexts: For appropriate choices for k 1 and k 2 given the performance of factoring algorithms today see the article of Odlyzko <ref> [31] </ref>. 5 Since the result of this is just to transfer the factorization of M i to T i one might ask why we do it this way, as opposed to just sending the factors of M i to T i .
Reference: [32] <author> R. Ozzie. </author> <title> Prepared remarks. Delivered at RSA Data Security Conference, </title> <address> San Francisco, </address> <month> January 17, </month> <year> 1996. </year> <note> Available at http:// www.lotus.com/notesr4/ozzie.htm. </note>
Reference-contexts: This work also presents schemes for time delayed escrow of session keys. Lotus Corporation is using a form of partial key escrow for session keys. They call their approach "differential workfactor cryptography." (It has been described, for example, in <ref> [32] </ref>.) It is essentially the Shamir idea. They will "escrow" 16 bits of the 56 bit DES key S, leaving a 2 40 workfactor to find the remaining 40 bits.
Reference: [33] <author> T. Pedersen. </author> <title> Distributed provers with applications to undeniable signatures. </title> <booktitle> Advances in Cryptology - Eurocrypt 91 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 547, </volume> <editor> D. Davies ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The fair DH system. In Micali's fair Diffie-Hellman cryptosystem-system [27], the user, having published g S , escrows S by simply sharing it via a simple discrete log based verifiable secret sharing (VSS) scheme. (This VSS scheme is based on ideas of Feldman and Pedersen <ref> [21, 33] </ref>. <p> In Micali's fair Diffie-Hellman cryptosystem-system [27], the user, having published g S , escrows S by simply sharing it via a simple discrete log based verifiable secret sharing (VSS) scheme. (This VSS scheme is based on ideas of Feldman and Pedersen [21, 33]. The VSS schemes of <ref> [27, 21, 33] </ref> are attractive because they are efficient and non-interactive.) The verifiability is in the fact that the trustees are able to check that they really have pieces of S, meaning that if later they try to recover the shared secret, they will really get the secret key S of <p> The same scheme appears in [29]). The public key has the form P = g x+a where x is long but a is only, say, 80 bits. Now one can escrow x as before, via the VSS of <ref> [27, 21, 33] </ref>. (This requires providing the trustees with g x . <p> The key principle is this: it should take 2 40 steps to recover a after x is revealed, but, before that, recovering a should be intractable. We want to escrow x. But we run straightaway into a problem. The VSS schemes of <ref> [27, 21, 33] </ref> require that we publish (ie. make available to the trustees, who need to do the verification) the quantity g x . But then a trustee can recover g a = P=g x , and early recovery is possible. <p> Instead, the user commits to them information-theoretically. (The trustees get no information about x; a, even if they are computationally unbounded, while the user is committed as long as he cannot compute discrete logarithms.) We can no longer use the VSS schemes of <ref> [21, 33] </ref> to escrow x, but, luckily, Pedersen, in a later paper [34], had a (different) scheme which achieved information theoretic secure VSS, and is just what we need. (See Appendix B). <p> This is our h. The value of j for which H (p; g; j) = h will also be published. 12 An important feature of the scheme is that g x is not revealed. We also note that this scheme is as efficient as those of <ref> [21, 33] </ref> and in particular is also non-interactive. Proof of smallness of small component. The last step of the protocol is to convince the trustees that a is only 2l bits long.
Reference: [34] <author> T. Pedersen. </author> <title> Non-interactive and information theoretic secure verifiable secret sharing. </title> <booktitle> Advances in Cryptology - Crypto 91 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 576, </volume> <editor> J. Feigenbaum ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: them information-theoretically. (The trustees get no information about x; a, even if they are computationally unbounded, while the user is committed as long as he cannot compute discrete logarithms.) We can no longer use the VSS schemes of [21, 33] to escrow x, but, luckily, Pedersen, in a later paper <ref> [34] </ref>, had a (different) scheme which achieved information theoretic secure VSS, and is just what we need. (See Appendix B). <p> This value is uniformly distributed over G for each fixed value of z, so that the receiver gets no information about z from the committal. (This commitment scheme is used in <ref> [34] </ref> and extends schemes used in several other places.) To decommit a value Z, the committer must provide z; v such that Z = g z h v . <p> Each trustee checks that P h w = X A 2 0 0 1 A 2 2l1 3. Escrow of large component: The user shares x via Pedersen's information theoretically secure VSS <ref> [34] </ref>, based on the initial commitment X. (See Appendix B). 4. Proof of smallness of small component: The user proves that each A i is a committal to either 0 or 1, as follows. <p> Each trustee now checks that X A 2 0 0 A 2 1 2l1 = P h w . (It still remains to convince them that a is small.) Escrow of large component. The large component x is verifiably secret shared using Peder-sen's information theoretic secure scheme <ref> [34] </ref>. The starting value is the commitment X to x. Since this VSS scheme is a central component in our protocol, we have described it in Appendix B. 2 Here are some details. The center will first appropriately extend SHA to yield a function H with a 512 bit output.
Reference: [35] <author> R. Rivest, A. Shamir and D. Wagner. </author> <note> Time-lock puzzles and timed-release crypto. Manuscript available at http://theory.lcs.mit.edu:80/~rivest. </note>
Reference-contexts: For example, in many cases, we view modular multiplication as a basic step. A more subtle issue, raised by Rivest, Shamir and Wagner in <ref> [35] </ref>, is parallelism. If a problem takes time t to solve, it may be possible to solve it in t =2 time with two processors, etc. Here we view parallelism as a resource too, and don't differentiate between processors and time. <p> Our assumption is that in estimating the resources of the trustees, we must also estimate the number of processors they have available, and raise our security parameter accordingly. For suggestions for problems in which parallelism won't yield speedups, see <ref> [35] </ref>. 3 VPKE for the DH System 3.1 Overview and preliminaries Main ideas. As above, we will let the public key have the form P = g x+a where x is large and a is small. The user keeps the secret key x; a.
Reference: [36] <author> R. Rivest, A. Shamir, L. Adleman. </author> <title> A method for Obtaining Digital Signatures and Public Key Cryptosystems. </title> <journal> CACM, </journal> <volume> Vol 21, No. 2, </volume> <pages> pp. 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: Simultaneously achieving verifiability and delayed recovery, while maintaining efficiency, turned out to be more challenging than it might look at first, and required new protocol development. VPKE for factoring based cryptosystems. There are many suggestions for public-key encryption schemes based on the difficulty of factoring integers, e.g <ref> [36, 11, 7] </ref>. It is thus desirable to implement an efficient verifiable partial key escrow protocol, for any factoring based cryptosystem. We do this. Our scheme does not achieve delayed recovery, but has several nice extra features.
Reference: [37] <author> A. Shamir. </author> <title> How to share a secret. </title> <journal> CACM, </journal> <volume> Vol. 22, No. 11, </volume> <pages> pp 612-613, </pages> <month> November </month> <year> 1979. </year>
Reference-contexts: This too is obviously not popular. More serious consideration is being given to "split key escrow" [27, 41]. Here the user's private key is split into n pieces, and the pieces are "escrowed" with separate trusted agents. The pieces obey the secret sharing property <ref> [9, 37] </ref>- any k of them can be used to re-construct the original private key, but no t pieces yield any information about it. (The parameters k; t and n can be chosen as desired.
Reference: [38] <author> A. Shamir. </author> <title> Partial key escrow: A new approach to software key escrow. Private communication made at Crypto 95, </title> <month> August </month> <year> 1995. </year> <note> Also presented at Key escrow conference, </note> <institution> Washington, </institution> <address> D.C., </address> <month> September 15, </month> <year> 1995. </year>
Reference-contexts: In particular, Shamir <ref> [38] </ref> raises the concern that even if the government is trustworthy today it may be replaced by an un-trustworthy government in the future. This government may, for reasons of its own, suddenly start un-escrowing keys on a vast scale. (Under full key escrow it can do this directly. <p> This unfortunately is not workable, as once a system and the rules governing it are in place it would be complex and time consuming to replace it, especially as the new government would have no interest in changing the keys. 1.4 Partial key escrow The idea. Shamir's idea <ref> [38] </ref> to mitigate the effects of such a sudden political change is "partial escrow." His scheme is in a context where the private key is a 56-bit DES key S. The user would not escrow his entire private key S. <p> He calls them "guaranteed partial key escrow" (GPKE) schemes. We present early recovery attacks on both his schemes- see Section 2.2 and Section 4.4. 1.8 Related work After Shamir suggested partial escrow of DES keys <ref> [38] </ref> several researchers have been inspired to work on it. Our work presented here first appeared as a technical report [3]. <p> Subsequently, <ref> [38] </ref> and [28] were merged into a joint paper [29]. 6 Recently we have developed a different approach, called "encapsulated key escrow" (EKE) [4].

Reference: [40] <author> P. Van Oorschot and M. Wiener. </author> <title> On Diffie-Hellman key agreement with short exponents. </title> <booktitle> Advances in Cryptology - Eurocrypt 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 1070, </volume> <editor> U. Maurer ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: We note another attack which applies to the particular choice of parameters made in Micali's GPKE scheme discussed above. Namely, the assumption was that the baby-step giant-step was the best algorithm to solve the discrete logarithm problem with short exponents. However, Wiener and Van Oorschot <ref> [40] </ref> have recently presented much better algorithms, and these will quickly find the exponent a above in much less than 2 40 steps. However, one can compensate by increasing the size of a. Hence we don't consider this a major attack. Note that the small exponent attacks of [40] work over <p> Van Oorschot <ref> [40] </ref> have recently presented much better algorithms, and these will quickly find the exponent a above in much less than 2 40 steps. However, one can compensate by increasing the size of a. Hence we don't consider this a major attack. Note that the small exponent attacks of [40] work over Z fl p , which is the group used in [28]. <p> The second is that given g a , the best algorithm to recover a takes about jaj=2 steps. (Note that the baby-step giant-step algorithm, which achieves a in about jaj=2 steps, is the best known algorithm in groups of prime order. The small exponent attacks of <ref> [40] </ref>, which do better in other groups, don't apply here.) Information theoretic commitment based on discrete log. Let G be the group of prime order q. <p> But a is 2l bits long. By Shank's baby-step giant-step method, a can be recovered in 2 l steps. (This is the best known time in groups of prime order. The small-exponent methods of <ref> [40] </ref> don't apply here.) 3.3 Properties of the scheme Correctness. Let us try to give a very informal idea of why the protocol is a verifiable, partial key escrow. First, consider X.
Reference: [41] <author> White House press release regarding the Clipper Chip, </author> <month> April 16, </month> <year> 1993. </year> <note> Also Escrowed Encryption Standard (EES), Federal Information Processing Standards Publication (FIPS PUB) 185, </note> <year> 1994. </year>
Reference-contexts: Naturally, this is not popular. Then there are various forms of "key escrow." The simplest is "full key escrow", where the user is expected to provide his entire secret key to the government. This too is obviously not popular. More serious consideration is being given to "split key escrow" <ref> [27, 41] </ref>. Here the user's private key is split into n pieces, and the pieces are "escrowed" with separate trusted agents. <p> In the Clipper chip approach, which applies to private key cryptography, a trusted agency chooses the key and puts it in tamper-proof hardware <ref> [41] </ref>. Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5].
Reference: [42] <author> A. Young and M. Yung. </author> <title> The dark side of "Black-Box" cyrptography or: </title> <booktitle> Should we trust Capstone? Advances in Cryptology - Crypto 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 1109, </volume> <editor> N. Koblitz ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Several objections, both on the social and on the technical fronts, have been raised to these approaches. Also many enhancements and variations, and some alternatives, have been considered. We refer the reader in particular to <ref> [15, 16, 10, 8, 17, 24, 22, 26, 30, 42, 5] </ref>.
References-found: 41

