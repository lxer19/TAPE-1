URL: http://www.daimi.aau.dk/~gulmann/Papers/product.ps
Refering-URL: http://www.daimi.aau.dk/~gulmann/papers.html
Root-URL: http://www.daimi.aau.dk
Phone: 2  
Title: A Product Version of Dynamic Linear Time Temporal Logic  
Author: Jesper G. Henriksen and P. S. Thiagarajan ? 
Address: Aarhus, Denmark  Madras, India  
Affiliation: 1 BRICS Department of Computer Science, University of  SPIC Mathematical Institute,  
Abstract: We present here a linear time temporal logic which simultaneously extends LTL, the propositional temporal logic of linear time, along two dimensions. Firstly, the until operator is strengthened by indexing it with the regular programs of propositional dynamic logic (PDL). Secondly, the core formulas of the logic are decorated with names of sequential agents drawn from fixed finite set. The resulting logic has a natural semantics in terms of the runs of a distributed program consisting of a finite set of sequential programs that communicate by performing common actions together. We show that our logic, denoted DLTL , admits an exponential time decision procedure. We also show that DLTL is expressively equivalent to the so called regular product languages. Roughly speaking, this class of languages is obtained by starting with synchronized products of (!-)regular languages and closing under boolean operations. We also sketch how the behaviours captured by our temporal logic fit into the framework of labelled partial orders known as Mazurkiewicz traces. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Fischer, M. J., Ladner, R. E.: </author> <title> Propositional dynamic logic of regular programs. </title> <note> Journal of Computer and System Sciences 18(2) (1979) 194-211 </note>
Reference-contexts: A more detailed assessment of the similarities and the differences between the two approaches is given in [5]. The extension that we have proposed is called DLTL (). It basically consists of indexing the until operator with the programs of PDL (e.g. <ref> [1] </ref>). We start by defining the set of regular programs (expressions) generated by .
Reference: 2. <author> Gabbay, A., Pnueli, A., Shelah, S., Stavi, J.: </author> <title> On the temporal analysis of fairness. </title> <booktitle> Proceedings of the 7th Annual Symposium on Principles of Programming Languages, ACM (1980) 163-173 </booktitle>
Reference: 3. <author> Godefroid, P.: </author> <title> Partial-order Methods for the Verification of Concurrent Systems. </title> <booktitle> Lecture Notes in Computer Science 1032, </booktitle> <publisher> Springer-Verlag (1996) </publisher>
Reference: 4. <author> Harel, D.: </author> <title> Dynamic logic. </title> <editor> In Gabbay, D., Guenthner, F., eds.: </editor> <booktitle> Handbook of Philosophical Logic, </booktitle> <volume> Vol. II, </volume> <publisher> Reidel, </publisher> <address> Dordrecht (1984) 497-604 </address>
Reference: 5. <author> Henriksen, J. G., Thiagarajan, P. S.: </author> <title> Dynamic linear time temporal logic. </title> <type> BRICS technical report RS-97-8, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <address> Denmark (1997) </address>
Reference-contexts: We then reflect this in the logic by decorating the "core" formulas with the names of the agents. The resulting logic, denoted DLTL , is a smooth generalization of the logic called product LTL [16] and the logic called dynamic linear time temporal logic <ref> [5] </ref>. DLTL admits a pleasant theory and our technical goal here is to sketch the main results of this theory. We believe that these results provide additional evidence | in a non-sequential setting | suggesting that our technique of combining dynamic and temporal logic as initiated in [5] is a fruitful <p> time temporal logic <ref> [5] </ref>. DLTL admits a pleasant theory and our technical goal here is to sketch the main results of this theory. We believe that these results provide additional evidence | in a non-sequential setting | suggesting that our technique of combining dynamic and temporal logic as initiated in [5] is a fruitful one. ? Part of this work was done while visiting BRICS. Part of this work has been supported by IFCPAR Project 1502-1. ?? Basic Research in Computer Science, Centre of the Danish National Research Foundation. In the next section we introduce dynamic linear time temporal logic. <p> A more detailed assessment of the similarities and the differences between the two approaches is given in <ref> [5] </ref>. The extension that we have proposed is called DLTL (). It basically consists of indexing the until operator with the programs of PDL (e.g. [1]). We start by defining the set of regular programs (expressions) generated by . <p> To satisfy ff U fi, one must satisfy ff U fi along some finite stretch of behaviour which is required to be in the (linear time) behaviour of the program . We now wish to state two of the main results of <ref> [5] </ref>. To do so, we first say that a formula ff 2 DLTL () is satisfiable if there exist oe 2 ! and o 2 prf (oe) such that oe; o j= ff. <p> In this sense, the program modalities of PDL acquire a linear time semantics in the present setting. As shown in <ref> [5] </ref> the second part of Theorem 1 goes through even for the the sublogic of DLTL () obtained by banishing the until operator and instead using hiff and the boolean connectives. <p> Our construction is a common generalization of the one for product LTL in [16] and the one for DLTL () in <ref> [5] </ref>. The solution to the satisfiability problem will at once lead to a solution to the model checking problem for programs modelled as synchronizing sequential agents. Through the rest of the section we fix a formula ff 0 2 DLTL . <p> Next, L i " ! i is !-regular. Hence it is accepted, due to McNaughton's the orem [10], by a deterministic Muller automaton. Choose such an automaton M = (Q; q in ; !; F ), which we, without loss of generality, assume to be com plete. (See <ref> [5] </ref> for the formal details). For q; q 0 2 Q we set L q;q 0 = fo j q o q 0 g, which is obviously a regular subset of fl i .
Reference: 6. <author> Hromkovic, J., Seibert, S., Wilke, T.: </author> <title> Translating regular expressions into small "-free nondeterministic automata. </title> <booktitle> Proceedings of the 12th Annual Symposium on Theoretical Aspects of Computer Science, Lecture Notes in Computer Science 1200, </booktitle> <month> Springer-Verlag </month> <year> (1997) </year> <month> 55-66 </month>
Reference-contexts: Moreover, it is well-known that each 2 Prg ( i ) in polynomial time can be converted to a finite (non-deterministic) automaton with a linear state space (see <ref> [6] </ref> for a recent account of such conversions). Then both Q 1 + : : : + Q K and b Q 1 + : : : + b Q K are of size O (jff 0 j).
Reference: 7. <author> Kamp, H. R.: </author> <title> Tense Logic and the Theory of Linear Order. </title> <type> Ph.D. thesis, </type> <institution> University of California (1968) </institution>
Reference: 8. <author> Manna, Z., Pnueli, A.: </author> <title> The Temporal Logic of Reactive and Concurrent Systems (Specification), </title> <publisher> Springer-Verlag (1992) </publisher>
Reference: 9. <author> Mazurkiewicz, A.: </author> <title> Concurrent program schemes and their interpretations. </title> <type> Technical report DAIMI PB-78, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <address> Denmark (1977) </address>
Reference: 10. <author> McNaughton, R.: </author> <title> Testing and generating infinite sequences by a finite automaton. </title> <note> Information and Control 9 (1966) 521-530 </note>
Reference-contexts: Next, L i " ! i is !-regular. Hence it is accepted, due to McNaughton's the orem <ref> [10] </ref>, by a deterministic Muller automaton. Choose such an automaton M = (Q; q in ; !; F ), which we, without loss of generality, assume to be com plete. (See [5] for the formal details).
Reference: 11. <author> Mukund, M., Thiagarajan, P. S.: </author> <title> Linear time temporal logics over Mazurkiewicz traces. </title> <booktitle> Proceedings of the 21st Intl. Symposium on Mathematical Foundations of Computer Science, Lecture Notes in Computer Science 1113, </booktitle> <publisher> Springer-Verlag (1996) pp. </publisher> <pages> 62-92 </pages>
Reference-contexts: For an introduction to (Mazurkiewicz) traces related to the concerns of the present paper, we refer the reader to <ref> [11] </ref>. We shall assume the bare minimum of the background material on traces.
Reference: 12. <author> Peled, D.: </author> <title> Partial order reduction: model checking using representatives. </title> <booktitle> Proceedings of the 21st Intl. Symposium on Mathematical Foundations of Computer Science, Lecture Notes in Computer Science 1113, </booktitle> <month> Springer-Verlag </month> <year> (1996) </year> <month> 93-112 </month>
Reference: 13. <author> Pnueli, A.: </author> <title> The temporal logic of programs. </title> <booktitle> Proceedings of the 18th Annual Symposium on Foundations of Computer Science, IEEE (1977) 46-57 </booktitle>
Reference: 14. <author> Thiagarajan, P. S.: </author> <title> A trace based extension of linear time temporal logic. </title> <booktitle> Proceed--ings of the 9th Annual Symposium on Logic in Computer Science, IEEE (1994) 438-447 </booktitle>
Reference: 15. <author> Thiagarajan, P. S.: </author> <title> PTL over product state spaces. </title> <type> Technical report TCS-95-4, </type> <institution> School of Mathematics, SPIC Science Foundation, </institution> <address> Madras (1995) </address>
Reference-contexts: In what follows we will often suppress the mention of the distributed alphabet e . It is easy to prove that R is closed under boolean operations. The proof of this result as well as other results mentioned in this section can be found in <ref> [15] </ref>. Just as !-regular languages are captured by Buchi automata, we can capture regular product languages with the help of networks of Buchi automata. For convenience such automata will be termed product automata. Definition 4. <p> They can be introduced in a local fashion as done in <ref> [15] </ref>. The decidability result to be presented will go through with minor notational overheads. As before, we will often suppress the mention of e .
Reference: 16. <author> Thiagarajan, P. S.: </author> <title> A trace consistent subset of PTL. </title> <booktitle> Proceedings of the 6th Annual Conference on Concurrency Theory, Lecture Notes in Computer Science 962, </booktitle> <month> Springer-Verlag </month> <year> (1995) </year> <month> 438-452 </month>
Reference-contexts: Secondly, we consider networks of sequential agents that communicate by performing common actions together. We then reflect this in the logic by decorating the "core" formulas with the names of the agents. The resulting logic, denoted DLTL , is a smooth generalization of the logic called product LTL <ref> [16] </ref> and the logic called dynamic linear time temporal logic [5]. DLTL admits a pleasant theory and our technical goal here is to sketch the main results of this theory. <p> This will be achieved by effectively constructing a product automaton A ff for each ff 2 DLTL ( e ) such that the language accepted by A ff is non-empty iff ff is satisfiable. Our construction is a common generalization of the one for product LTL in <ref> [16] </ref> and the one for DLTL () in [5]. The solution to the satisfiability problem will at once lead to a solution to the model checking problem for programs modelled as synchronizing sequential agents. Through the rest of the section we fix a formula ff 0 2 DLTL .
Reference: 17. <author> Thomas, W.: </author> <title> Automata over infinite objects. </title> <editor> In van Leeuwen, J., ed., </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. </volume> <editor> B: </editor> <title> Formal Models and Semantics, </title> <note> Else-vier/MIT Press (1990) 133-191 </note>
Reference-contexts: Finally, we assume the notions of Buchi and Muller automata and !-regular languages as formulated in <ref> [17] </ref>. Theorem 1. (i) Given an ff 0 2 DLTL () one can effectively construct a Buchi automaton B ff 0 of size 2 O (jff 0 j) such that L (B ff 0 ) 6= ; iff ff 0 is satisfiable.
Reference: 18. <author> Valmari, A.: </author> <title> A stubborn attack on state explosion. </title> <booktitle> Formal Methods in Systems Design 1 (1992) 285-313 </booktitle>
Reference: 19. <author> Vardi, M. Y., Wolper, P.: </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> Proceedings of the 1st Annual Symposium on Logic in Computer Science, IEEE (1986) 332-345 </booktitle>
Reference: 20. <author> Wolper, P.: </author> <title> Temporal logic can be more expressive. </title> <booktitle> Proceedings of the 22nd Annual Symposium on Foundations of Computer Science, IEEE (1981) 340-348 </booktitle>
Reference: 21. <author> Wolper, P., Vardi, M. Y., Sistla, A. P.: </author> <title> Reasoning about infinite computation paths. </title> <booktitle> Proceedings of the 24nd Annual Symposium on Foundations of Computer Science, IEEE (1983) 185-194 </booktitle>
Reference: 22. <author> Zielonka, W.: </author> <title> Notes on finite asynchronous automata. </title> <note> R.A.I.R.O. Informatique Theorique et Applications 21 (1987) 99-135 </note>
References-found: 22

