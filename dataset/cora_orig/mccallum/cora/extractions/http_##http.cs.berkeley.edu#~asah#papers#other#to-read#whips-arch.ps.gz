URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/whips-arch.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/
Root-URL: http://www.cs.berkeley.edu
Email: wiener@cs.stanford.edu  
Title: A System Prototype for Warehouse View Maintenance  
Author: Janet L. Wiener, Himanshu Gupta, Wilburt J. Labio, Yue Zhuge, Hector Garcia-Molina, Jennifer Widom 
Address: Stanford, CA 94305-2140, USA  
Affiliation: Department of Computer Science Stanford University  
Abstract: A data warehouse collects and integrates data from multiple, autonomous, heterogeneous, sources. The warehouse effectively maintains one or more materialized views over the source data. In this paper we describe the architecture of the Whips prototype system, which collects, transforms, and integrates data for the warehouse. We show how the required functionality can be divided among cooperating distributed CORBA objects, providing both scalability and the flexibility needed for supporting different application needs and heterogeneous sources. The Whips prototype is a functioning system implemented at Stanford University and we provide preliminary performance results. 
Abstract-found: 1
Intro-found: 1
Reference: [Dia94] <institution> Dialog Information Services, Inc. </institution> <note> Dialog Pocket Guide 1994, </note> <year> 1994. </year>
Reference-contexts: The monthly pe relation is a Sybase relation that provides the price-to-earnings (pe) ratio of each stock. (In the future, the pe's will be obtained from a Dialog source <ref> [Dia94] </ref> for this application.) The two relations are defined as follows, where the underlined attributes are the keys: daily stock (ticker, date, high, low, volume, close) monthly pe (ticker, pe) Two views were defined for the experiments, a Copy view that was a copy of the daily stock relation, and a
Reference: [GM95] <author> A. Gupta and I. S. Mumick. </author> <title> Maintenance of Materialized Views: Problems, Techniques, </title> <journal> and Applications. IEEE Data Engineering Bulletin, </journal> <volume> 18(2) </volume> <pages> 4-19, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: However, we plan to enhance the monitors by filtering modifications based on selection conditions and projecting only relevant attributes (those involved in a selection condition, projection or join, or which are keys for the relation <ref> [GM95] </ref>) in the view definition. Note, though, that filters applied at the monitor must apply to all view definitions. View-specific filtering must be performed at the integrator. 3.8 Warehouse and warehouse wrapper The warehouse in the Whips architecture may be any relational database.
Reference: [HGMW + 95] <author> J. Hammer, H. Garcia-Molina, J. Widom, W. Labio, and Y. Zhuge. </author> <title> The Stanford Data Warehousing Project. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 18(2) </volume> <pages> 41-48, </pages> <month> June </month> <year> 1995. </year>
Reference: [LGM95] <author> W. J. Labio and H. Garcia-Molina. </author> <title> Efficient Snapshot Differential Algorithms for Data Warehousing. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <year> 1995. </year>
Reference-contexts: These modifications are then sent to the integrator. Currently, we have implemented trigger-based monitors for cooperative (relational) sources, and snapshot monitors for flat file sources that only provide periodic snapshots of the source data. We describe algorithms for efficient change detection on snapshots elsewhere <ref> [LGM95] </ref>. We are working on adding IBM's DataCapture to the system; DataCapture is a log-based monitor which reads the log for DB2 and generates a table of source changes. <p> We currently use a Sybase database [Syb92] for the warehouse. We have also experimented with a Sybase source with a monitor that uses triggers and a flat file source whose monitor uses the Windowing Snapshot algorithm <ref> [LGM95] </ref> to detect modifications. The Whips system currently runs on DEC Alphas and IBM RS/6000s.
Reference: [Obj95] <institution> Object Management Group (OMG), </institution> <note> Framingham, </note> <author> MA. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <month> July </month> <year> 1995. </year>
Reference: [OV91] <author> M. T. Ozsu and P. Valduriez. </author> <title> Principles of Distributed Database Systems. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: Second, each view may employ a different Strobe algorithm, to enforce a different level of consistency for its view. 3.5 Query processor (s) The query processor is responsible for distributed query processing, using standard techniques such as sideways information passing and filtering of selection conditions <ref> [OV91] </ref> to prune the queries it poses to the wrappers. It tracks the state of each global query while waiting for local query results from the wrappers.
Reference: [QGMW95] <author> D. Quass, A. Gupta, I. S. Mumick, and J. Widom. </author> <title> Making Views Self-Maintainable for Data Warehousing. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <year> 1995. </year>
Reference-contexts: Finally, we are interested in keeping track of the relationships among views and using them to make view maintenance more efficient. In the examples in this paper, it was always necessary to examine the source data to update each view. However, some views may be self-maintainable <ref> [QGMW95] </ref>, possibly by querying other views stored at the warehouse rather than the sources.
Reference: [Red95] <institution> Red Brick Systems. Red Brick Warehouse, </institution> <year> 1995. </year>
Reference-contexts: View-specific filtering must be performed at the integrator. 3.8 Warehouse and warehouse wrapper The warehouse in the Whips architecture may be any relational database. Of course, some relational databases are optimized for querying warehouse data, e.g. Redbrick <ref> [Red95] </ref>, and may be more appropriate. The warehouse wrapper receives all view definitions and all modifications to the view data in a canonical (internal) format, and translates them to the specific syntax of the warehouse database.
Reference: [Syb92] <institution> Sybase, Inc. </institution> <note> Command Reference Manual, release 4.9 edition, </note> <year> 1992. </year>
Reference-contexts: We currently use a Sybase database <ref> [Syb92] </ref> for the warehouse. We have also experimented with a Sybase source with a monitor that uses triggers and a flat file source whose monitor uses the Windowing Snapshot algorithm [LGM95] to detect modifications. The Whips system currently runs on DEC Alphas and IBM RS/6000s.
Reference: [Wid95] <author> J. Widom. </author> <title> Research Problems in Data Warehousing. </title> <booktitle> In Conference on Information and Knowledge Management, </booktitle> <year> 1995. </year> <note> Also http://db.stanford.edu/pub/widom/1995/warehouse-research.ps. </note>
Reference: [Xer95] <institution> Xerox Corp. </institution> <note> ILU Reference Manual, </note> <month> March </month> <year> 1995. </year>
Reference-contexts: As shown in the figure, the system is composed of many distinct modules that communicate with each other although they potentially reside on different machines. We implemented each module as a CORBA object, using the ILU implementation of CORBA <ref> [Xer95] </ref>. The commmunication between objects is then performed within the CORBA distributed object framework, where each object O has a unique identifer used by other objects to identify and communicate with O. Using CORBA provides several benefits.
Reference: [YD96] <author> Z. Yang and K. Duddy. </author> <title> CORBA: A Platform for Distributed Object Computing. </title> <journal> Operating Systems Review, </journal> <volume> 30(2) </volume> <pages> 4-31, </pages> <month> April </month> <year> 1996. </year>
Reference: [ZGMW95] <author> Y. Zhuge, H. Garcia-Molina, and J. L. Wiener. </author> <title> The Strobe Algorithms for Multi-Source Warehouse Consistency. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <year> 1995. </year> <note> Also http://db.stanford.edu/pub/zhuge/1995/consistency.ps. 10 </note>
Reference-contexts: When data is collected from autonomous sources, the resulting materialized views may be inconsistent, e.g., they may reflect a state that never existed at a source <ref> [ZGMW95] </ref>. We would like a system that can avoid these problems, if it is important to the application. Thus, it should be possible to specify the desired level of consistency, and the system should support the necessary algorithms to achieve the different levels. * Support for Different Source Types. <p> The integrator then forwards the modifications to all interested view managers (see Section 3.3). Each view manager then uses one of the Strobe algorithms for view consistency <ref> [ZGMW95] </ref> to compute the corresponding changes to the view at the warehouse. This computation may involve generating a (global) query, which is sent to the query processor and evaluated as at view 4 initialization time. <p> The different Strobe algorithms yield different levels of consistency depending on the modification frequency and clustering; all of the algorithms require keeping track of the sequence of modifications and compensating query results for modifications that may have been missed. A full discussion of the algorithms may be found elsewhere <ref> [ZGMW95] </ref>. There are two advantages to using one view manager per view. First, the work of maintaining each view can be done in parallel on different machines.
References-found: 13

