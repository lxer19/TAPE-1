URL: http://www.cs.brandeis.edu/~suresh/Papers/SIMD.ps
Refering-URL: http://www.cs.brandeis.edu/~suresh/Papers/
Root-URL: http://www.cs.brandeis.edu
Email: jc@cs.brandeis.edu suresh@cs.brandeis.edu  
Phone: Phone: (617) 736-2702 Phone: (617) 736-2745 Fax: (617) 736-2741 Fax: (617) 736-2741  
Title: Data-Parallel Design of an Interval-Based Constraint Language: Analysis of Speed-Ups 1  
Author: Jacques Cohen Suresh Kalathur 
Keyword: Maspar MP2 with 4,096 processors. Keywords: Parallel algorithms: SIMD; Parallel applications: Numerical computations, Interval arithmetic; Software: Compilers, Languages.  
Address: Waltham, MA, USA 02254 Waltham, MA, USA 02254  
Affiliation: Computer Science Dept. Computer Science Dept. Brandeis University Brandeis University  
Abstract: This paper presents what is believed to be the very first design and implementation of a deterministic data-parallel constraint language based on interval variables (integer or floating point intervals). The approach used consists of having one constraint and one interval variable per processor. Each processor narrows and intersects the constraint it stores within its memory using interval variables which are stored in different processors. Whenever a solution is found, it is printed and the processor is re-used in implementing the splitting operation. Similarly, a failed narrowing or intersection frees the corresponding processor to be re-used in a subsequent split operation. The algorithm starts with an initial set of processors corresponding to the constraints to be solved and their variables. Narrowing and intersections are applied until convergence. Splitting is done by selecting the variable with the smallest interval and introducing a new set of processors whose data is copied from the previous set except for the variable chosen for splitting. The paper also presents a Markovian analysis of the complexity of the proposed algorithms. Actual results were obtained using a 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. E. Blelloch, </author> <title> Programming Parallel Algorithms, </title> <note> available through WWW (http://web.scandal.cs.cmu.edu/www/nesl.html) </note>
Reference-contexts: That consists of replacing an interval by two interval components, and reapplying the narrowing and intersection operations until a solution is found. The novel aspects of this paper are to perform the needed operations using data-parallel algorithms. These are described in a NESL-like language <ref> [1] </ref> which operates on vectors of constraints and interval variables. The algorithms make use of typical data-parallel operations (like prefix-sum, prefix-min) which can be performed in logarithmic time in SIMD machines. A set of processors deals with a set of constraints and the intervals of their variables.
Reference: [2] <author> J. Carlier and E. Pinson, </author> <title> An Algorithm for Solving the Job-Shop Problem, </title> <journal> Management Science, </journal> <volume> vol. 35, no. 2, </volume> <month> February, </month> <year> 1989, </year> <pages> pp. 164-176. </pages>
Reference-contexts: Introduce non-determinism by including further OR-parallelism to process dis junctive constraints. 3. Study the performance of the proposed approach by processing the most time consuming problems such as the job-shop scheduling <ref> [2] </ref>.
Reference: [3] <author> J. Cohen and A. Weitzman, </author> <title> Software Tools for Micro-analysis of Programs, </title> <journal> Software-Practice and Experience, </journal> <volume> vol. 22, no. 9, </volume> <month> September, </month> <year> 1992, </year> <pages> pp. 777-808. </pages>
Reference-contexts: I r 0 k +i split strategy second (v i ,T emp i ) end for return 2 fl r 0 k 3 Markovian Analysis Given a transition probability matrix T of the nodes in the flowgraph, and the vector S denoting the time-variables of the nodes in the flowgraph <ref> [3, 9] </ref>, the time-formula for the average execution time is given by: (f irst row ((I T ) 1 )) : S where I is the identity matrix. A Maple 3 program computing the time-formula is presented in Figure 4.
Reference: [4] <author> T. Hickey, </author> <title> CLP(F) and Constrained ODEs, Workshop on Constraint Languages and their use in Problem Modelling, </title> <booktitle> International Logic Programming Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: The constraints are processed simultaneously using well known narrowing operations which are guaranteed to converge (or to fail) <ref> [4, 7] </ref>. If the resulting intervals for a given variable are different, the intersection operator is used to find the appropriate common value, if it exists. If the intersection fails then there is no solution for the variable in the given initial intervals.
Reference: [5] <institution> MasPar Parallel Application Language (MPL) User Guide & Reference Manual, MasPar Computer Corporation, </institution> <year> 1993. </year>
Reference-contexts: The memory and processor requirements are doubled by each splitting and are decreased whenever narrowing fails and solutions are found. The paper also presents a Markovian analysis of the complexity of the proposed algorithms. Actual results were obtained using a Maspar MP2 with 4,096 processors <ref> [5] </ref>. 2 Proposed Algorithm Given a set of m constraints involving n variables, let I = f (l 1 ; u 1 ); (l 2 ; u 2 ); : : : ; (l n ; u n )g, be the set of couples denoting the lower and upper bounds of
Reference: [6] <author> R. E. Moore, </author> <title> Interval Analysis, </title> <publisher> Prentice Hall, </publisher> <year> 1966. </year>
Reference-contexts: 1 Introduction This paper describes data-parallel algorithms designed to process interval constraints using SIMD computers. The approach consists in specifying a set of linear or non-linear 1 Supported by NSF Grant CCR-94 0342762394. constraints involving variables which are defined by integer (or floating-point) intervals consisting of lower and upper bounds <ref> [6] </ref>. The constraints are processed simultaneously using well known narrowing operations which are guaranteed to converge (or to fail) [4, 7]. If the resulting intervals for a given variable are different, the intersection operator is used to find the appropriate common value, if it exists.
Reference: [7] <author> W. J. Older, and A. Vellino, </author> <title> Constraint Arithmetic on Real Intervals, Constraint Logic Programming: Selected Research, edited by F. </title> <editor> Benhamou and A. Colmerauer, </editor> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The constraints are processed simultaneously using well known narrowing operations which are guaranteed to converge (or to fail) <ref> [4, 7] </ref>. If the resulting intervals for a given variable are different, the intersection operator is used to find the appropriate common value, if it exists. If the intersection fails then there is no solution for the variable in the given initial intervals.
Reference: [8] <author> B.M. Tong, and H.F. Leung, </author> <title> Implementation of a Data-Parallel Concurrent Constraint Programming System, </title> <booktitle> First International Symposium on Parallel Symbolic Computation (PASCO'94), </booktitle> <year> 1994, </year> <pages> pp. 382-393. </pages>
Reference: [9] <author> K. S. Trivedi, </author> <title> Probability & Statistics with Reliability, Queuing, </title> <booktitle> and Computer Science Applications, </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1982. </year> <title> (b) Number of Passes (c) Number of Passes vs. Number of Constraints (d) Number of Passes vs. Number of Processors </title>
Reference-contexts: I r 0 k +i split strategy second (v i ,T emp i ) end for return 2 fl r 0 k 3 Markovian Analysis Given a transition probability matrix T of the nodes in the flowgraph, and the vector S denoting the time-variables of the nodes in the flowgraph <ref> [3, 9] </ref>, the time-formula for the average execution time is given by: (f irst row ((I T ) 1 )) : S where I is the identity matrix. A Maple 3 program computing the time-formula is presented in Figure 4.
References-found: 9

