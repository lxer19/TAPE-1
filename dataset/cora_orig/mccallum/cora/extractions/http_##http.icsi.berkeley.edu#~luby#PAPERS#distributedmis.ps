URL: http://http.icsi.berkeley.edu/~luby/PAPERS/distributedmis.ps
Refering-URL: http://http.icsi.berkeley.edu/~luby/parallel.html
Root-URL: http://http.icsi.berkeley.edu
Title: Network Decomposition and Locality in Distributed Computation (Extended Abstract)  
Author: Baruch Awerbuch Andrew V. Goldberg Michael Luby Serge A. Plotkin 
Note: Supported by Air Force Contract TNDGAFOSR-86-0078, ARO contract DAAL03-86-K-0171, NSF contract CCR8611442, and a special grant from IBM. Research partially supported by NSF Presidential Young Investigator Grant CCR-8858097, IBM Faculty Devel opment Award, and ONR Contract N00014-88-K-0166. On leave of absence from the  research partially supported by NSERC of Canada operating grant A8092. Research partially supported by ONR Contract N00014-88-K-0166.  
Date: May 1989  
Address: Cambridge, MA 02139  Stanford, CA 94305  Berkeley, CA 94704  Stanford, CA 94305  
Affiliation: Department of Mathematics and Laboratory for Computer Science M.I.T.  Department of Computer Science Stanford University  International Computer Science Institute  Department of Computer Science Stanford University  Computer Science Department, University of Toronto,  
Abstract: We introduce a concept of network decomposition, the essence of which is to partition an arbitrary graph into small-diameter connected components, such that the graph created by contracting each component into a single node has low chromatic number. We present an efficient distributed algorithm for constructing such a decomposition, and demonstrate its use for design of efficient distributed algorithms. Our method yields new deterministic distributed algorithms for finding a maximal independent set and for ( + 1)-coloring of graphs with maximum degree . These algorithms run in O(n * ) time for any * &gt; 0, while the best previously known deterministic algorithms required (n) time. Our techniques can be used to remove randomness from the previously known most efficient distributed Breadth-First Search algorithm, without increasing the asymptotic communication and time complexity. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Awerbuch. </author> <title> Complexity of network synchronization. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 32 </volume> <pages> 804-823, </pages> <year> 1985. </year>
Reference-contexts: This algorithm runs in O (m 1+* ) messages and O (n 1+* ) time, for any constant * &gt; 0. An existing deterministic algorithm that is best in terms of time is obtained by combining a synchronizer <ref> [1] </ref> with a standard synchronous algorithm; the resulting algorithm runs in O (m + nD log k n) messages and O (kD) time, for any constant k &gt; O. <p> This algorithm runs in O (m 1+* ) messages and O (D 1+* ) time. We show how to apply techniques developed in this paper to make this algorithm deterministic, without degrading its asymptotic complexity. 2 Preliminaries We consider the standard point-to-point communication network model (see e.g. [6] and <ref> [1] </ref>). The network topology is described by an undirected communication graph G = (V; E), where the set of nodes represents processors of the network and the set of edges represents bidirectional communication channels between pairs of nodes. No common memory is shared by the processors. <p> Except for the part dealing with the BFS problem, we assume that the communication network is synchronous, and that at each time step a processor can communicate with all of its neighbors. Awerbuch's Synchronizer-ff <ref> [1] </ref> can be used to implement our algorithms on an asynchronous network. This does not change the asymptotic time bound T , but increases the asymptotic message complexity by an additive factor of mT .
Reference: [2] <author> B. Awerbuch. </author> <title> A tight lower bound on the time of distributed maximal independent set algorithms. </title> <type> Unpublished manuscript, </type> <month> February </month> <year> 1987. </year>
Reference-contexts: The local nature of distributed networks is a limitation that often allows to prove lower bounds for them. Awerbuch <ref> [2] </ref> and Linial [12] show an (log fl n) lower bound on time needed to find an MIS in a distributed system. Note that the results mentioned in the previous paragraph imply that for constant degree graphs, these lower bounds are optimal to within a constant factor.
Reference: [3] <author> B. Awerbuch. </author> <title> Randomized Distributed Shortest Paths Algorithms. </title> <note> In Proc. 21th ACM Symp. on Theory of Computing, page (to appear), </note> <year> 1989. </year>
Reference-contexts: The first algorithm has a poor time complexity on networks of small diameter, while the second algorithm has a poor message complexity on sparse networks of large diameter. A randomized algorithm of Awerbuch <ref> [3] </ref> achieves a better message-time tradeoff. This algorithm runs in O (m 1+* ) messages and O (D 1+* ) time. <p> graph can be distributively colored with +1 colors in n O ( log log n time. 6 Deterministic BFS 6.1 Overview The problem of constructing a (3; 2)r-ruling set has been the only obstacle towards eliminating randomness from (the best known) distributed algorithm for Breadth-First Search (BFS) and Shortest Paths <ref> [3] </ref>. The recursive version of that algorithm partitions the network into "strips" of d o D successive BFS layers, and processes each strip one-by-one. During the processing of a strip, we need to construct a (3; 2)-ruling set of a certain "cluster graph". <p> In constructing this algorithm, we use the cost-benefit framework of Luby [14]. The time complexity and the communication complexity of the resulting BFS algorithm are same as in <ref> [3] </ref>, namely D 1+ O (1) log n and m 4 p log n , respectively. Below, we provide the details of the construction. 6.2 Radomized Algorithm The randomized algorithm is given in Figure 3.
Reference: [4] <author> B. Awerbuch and R. G. Gallager. </author> <title> A New Distributed Algorithm to Find Breadth First Search Trees. </title> <journal> IEEE Trans. Info. Theory, </journal> <volume> IT-33:315-322, </volume> <year> 1987. </year> <month> 13 </month>
Reference-contexts: On a network with n nodes, m edges, and diameter D, the obvious lower bounds on the communication 2 and time complexity of the problem are (m) and (D), respectively. An existing deterministic BFS algorithm that is best in terms of communication is that of Awerbuch and Gallager <ref> [4] </ref>. This algorithm runs in O (m 1+* ) messages and O (n 1+* ) time, for any constant * &gt; 0.
Reference: [5] <author> R. Cole and U. Vishkin. </author> <title> Deterministic Coin Tossing and Accelerating Cascades: Micro and Macro Techniques for Designing Parallel Algorithms. </title> <booktitle> In Proc. 18th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 206-219, </pages> <year> 1986. </year>
Reference-contexts: running time that is at least linear in the diameter of the graph. (Observe that an MIS can be found by a trivial distributed algorithm in linear time.) For bounded degree, several distributed algorithms for MIS and related problems that run in O (log fl n) time were developed in <ref> [5, 7, 8] </ref>. The local nature of distributed networks is a limitation that often allows to prove lower bounds for them. Awerbuch [2] and Linial [12] show an (log fl n) lower bound on time needed to find an MIS in a distributed system. <p> The distance in G between roots of any two trees in F r is at least ff. 3. The depth of each tree in the forest is at most fi. The next definition generalizes that of <ref> [5] </ref>. Definition 3 The set of tree roots of an (ff; fi)-ruling forest is called an (ff; fi)-ruling set.
Reference: [6] <author> R. G. Gallager, P. A. Humblet, and P. M Spira. </author> <title> A Distributed Algorithm for Minimum-Weight Spanning Trees. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5 </volume> <pages> 66-77, </pages> <year> 1983. </year>
Reference-contexts: This algorithm runs in O (m 1+* ) messages and O (D 1+* ) time. We show how to apply techniques developed in this paper to make this algorithm deterministic, without degrading its asymptotic complexity. 2 Preliminaries We consider the standard point-to-point communication network model (see e.g. <ref> [6] </ref> and [1]). The network topology is described by an undirected communication graph G = (V; E), where the set of nodes represents processors of the network and the set of edges represents bidirectional communication channels between pairs of nodes. No common memory is shared by the processors.
Reference: [7] <author> A. V. Goldberg and S. A. Plotkin. </author> <title> Parallel ( + 1) coloring of constant-degree graphs. </title> <journal> Information Processing Let., </journal> <volume> 25 </volume> <pages> 241-245, </pages> <year> 1987. </year>
Reference-contexts: For some problems, such as the MIS problem, global communication can be avoided if the interconnection network has a small degree (see e.g. <ref> [7, 8] </ref>). A natural approach to extend this idea to a high degree network is to attempt to decompose the network into clusters of small diameter, so that the graph induced by clusters (the cluster graph) has a small degree. <p> running time that is at least linear in the diameter of the graph. (Observe that an MIS can be found by a trivial distributed algorithm in linear time.) For bounded degree, several distributed algorithms for MIS and related problems that run in O (log fl n) time were developed in <ref> [5, 7, 8] </ref>. The local nature of distributed networks is a limitation that often allows to prove lower bounds for them. Awerbuch [2] and Linial [12] show an (log fl n) lower bound on time needed to find an MIS in a distributed system. <p> The results of this paper decrease this gap to below n * for any * &gt; 0. The + 1 coloring problem is closely related to the MIS problem, and the algorithms for the former problem are closely related to ones for the latter problem and achieve similar bounds <ref> [7, 8, 9, 14] </ref>. The problem of constructing a breadth-first search tree in an asynchronous network (the BFS problem) is a fundamental problem in distributed computing, as it constitutes a bottleneck for many other algorithms, including Spanning Tree, Leader Election, computing a global function, etc.
Reference: [8] <author> A. V. Goldberg, S. A. Plotkin, and G. E. Shannon. </author> <title> Parallel Symmetry-Breaking in Sparse Graphs. </title> <journal> SIAM J. Desc. Math., </journal> <volume> 1 </volume> <pages> 434-446, </pages> <year> 1989. </year>
Reference-contexts: For some problems, such as the MIS problem, global communication can be avoided if the interconnection network has a small degree (see e.g. <ref> [7, 8] </ref>). A natural approach to extend this idea to a high degree network is to attempt to decompose the network into clusters of small diameter, so that the graph induced by clusters (the cluster graph) has a small degree. <p> running time that is at least linear in the diameter of the graph. (Observe that an MIS can be found by a trivial distributed algorithm in linear time.) For bounded degree, several distributed algorithms for MIS and related problems that run in O (log fl n) time were developed in <ref> [5, 7, 8] </ref>. The local nature of distributed networks is a limitation that often allows to prove lower bounds for them. Awerbuch [2] and Linial [12] show an (log fl n) lower bound on time needed to find an MIS in a distributed system. <p> The results of this paper decrease this gap to below n * for any * &gt; 0. The + 1 coloring problem is closely related to the MIS problem, and the algorithms for the former problem are closely related to ones for the latter problem and achieve similar bounds <ref> [7, 8, 9, 14] </ref>. The problem of constructing a breadth-first search tree in an asynchronous network (the BFS problem) is a fundamental problem in distributed computing, as it constitutes a bottleneck for many other algorithms, including Spanning Tree, Leader Election, computing a global function, etc. <p> Next we describe the Sparse-Color algorithm which colors a graph with maximum degree with ( + 1)-colors. The algorithm is an adaptation of the algorithm of Goldberg, Plotkin, and Shannon <ref> [8] </ref>. The Sparse-Color algorithm starts by dividing the nodes in V 0 into two disjoint sets V 0 and V 1 according to the last bit of the IDs. Then it recursively colors the graphs G [V 0 ]; G [V 1 ], induced 5 by these sets.
Reference: [9] <author> M. Goldberg. </author> <title> Parallel Algorithms for Three Graph Problems. </title> <type> Technical Report 86-4, </type> <institution> RPI, </institution> <year> 1986. </year>
Reference-contexts: The results of this paper decrease this gap to below n * for any * &gt; 0. The + 1 coloring problem is closely related to the MIS problem, and the algorithms for the former problem are closely related to ones for the latter problem and achieve similar bounds <ref> [7, 8, 9, 14] </ref>. The problem of constructing a breadth-first search tree in an asynchronous network (the BFS problem) is a fundamental problem in distributed computing, as it constitutes a bottleneck for many other algorithms, including Spanning Tree, Leader Election, computing a global function, etc.
Reference: [10] <author> M. Goldberg and T. Spencer. </author> <title> A New Parallel Algorithm for the Maximal Independent Set Problem. </title> <booktitle> In Proc. 28th IEEE Symp. on Foundations of Comp. Sci., </booktitle> <pages> pages 161-165, </pages> <year> 1987. </year>
Reference-contexts: Karp and Wigderson [11] have shown that the problem is in NC. A lot of research was done to improve the processor and time complexity of parallel algorithms for the MIS problem <ref> [10, 13, 14] </ref>. Unfortunately, direct distributed implementation of these algorithms is inefficient.
Reference: [11] <author> R. M. Karp and A. Wigderson. </author> <title> A fast parallel algorithm for the maximal independent set problem. </title> <booktitle> In Proc. 16th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 266-272, </pages> <year> 1984. </year>
Reference-contexts: The MIS problem is a classical example of a problem for which obtaining efficient sequential algorithms is easy, but obtaining efficient parallel algorithms is much harder. Karp and Wigderson <ref> [11] </ref> have shown that the problem is in NC. A lot of research was done to improve the processor and time complexity of parallel algorithms for the MIS problem [10, 13, 14]. Unfortunately, direct distributed implementation of these algorithms is inefficient.
Reference: [12] <author> N. Linial. </author> <title> Distributive Algorithms | Global Solutions from Local Data. </title> <booktitle> In Proc. 28th IEEE Symp. on Found. of Comp. Sci., </booktitle> <pages> pages 331-335, </pages> <year> 1987. </year>
Reference-contexts: In general, the diameter of G could be as large as n. Therefore some problems, known to be in NC, are not known to be solvable in polylogarithmic time in a distributed system. An representative example of such a problem is the Maximal Independent Set (MIS) problem. Linial <ref> [12] </ref> was the first to use sophisticated graph-theoretic techniques to study locality in distributed systems and to point out the importance of the MIS problem in this context. <p> The local nature of distributed networks is a limitation that often allows to prove lower bounds for them. Awerbuch [2] and Linial <ref> [12] </ref> show an (log fl n) lower bound on time needed to find an MIS in a distributed system. Note that the results mentioned in the previous paragraph imply that for constant degree graphs, these lower bounds are optimal to within a constant factor.
Reference: [13] <author> M. Luby. </author> <title> A Simple Parallel Algorithm for the Maximal Independent Set Problem. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 1036-1052, </pages> <year> 1986. </year>
Reference-contexts: Karp and Wigderson [11] have shown that the problem is in NC. A lot of research was done to improve the processor and time complexity of parallel algorithms for the MIS problem <ref> [10, 13, 14] </ref>. Unfortunately, direct distributed implementation of these algorithms is inefficient.
Reference: [14] <author> M. Luby. </author> <title> Removing Randomness in Parallel Computation without a Processor Penalty. </title> <booktitle> In Proc. 29th IEEE Symp. on Found. of Comp. Sci., </booktitle> <pages> pages 162-173, </pages> <year> 1988. </year> <month> 14 </month>
Reference-contexts: Karp and Wigderson [11] have shown that the problem is in NC. A lot of research was done to improve the processor and time complexity of parallel algorithms for the MIS problem <ref> [10, 13, 14] </ref>. Unfortunately, direct distributed implementation of these algorithms is inefficient. <p> The results of this paper decrease this gap to below n * for any * &gt; 0. The + 1 coloring problem is closely related to the MIS problem, and the algorithms for the former problem are closely related to ones for the latter problem and achieve similar bounds <ref> [7, 8, 9, 14] </ref>. The problem of constructing a breadth-first search tree in an asynchronous network (the BFS problem) is a fundamental problem in distributed computing, as it constitutes a bottleneck for many other algorithms, including Spanning Tree, Leader Election, computing a global function, etc. <p> Theorem 2 A MIS in a distributed network can be found in n O ( log log n time. 8 Proof : (sketch) Since the clusters produced by the network decomposition algorithm have small depth, we can adapt Luby's MIS algorithm <ref> [14] </ref> so that each iteration runs in n O ( log log n time. Luby's MIS algorithm terminates in O (log 3 n) iterations. <p> Luby's MIS algorithm terminates in O (log 3 n) iterations. Hence, by Theorem 1, the algorithm runs in n q log n ) time. 5.2 + 1 Coloring The linear-processor PRAM algorithm for + 1 coloring, due to Luby <ref> [14] </ref>, can be changed to work when we start from a (legal) partial coloring of the input graph. This observation enables us to use the same strategy that we have used for the MIS problem. <p> In constructing this algorithm, we use the cost-benefit framework of Luby <ref> [14] </ref>. The time complexity and the communication complexity of the resulting BFS algorithm are same as in [3], namely D 1+ O (1) log n and m 4 p log n , respectively. <p> The strategy from there is to use the ideas in <ref> [14] </ref> to simulate the algorithm deterministically. In the following analysis, we restrict attention to the subgraph induced on the union of the yellow and red vertices. Let adj v = fuj (v; u) 2 Eg.
References-found: 14

