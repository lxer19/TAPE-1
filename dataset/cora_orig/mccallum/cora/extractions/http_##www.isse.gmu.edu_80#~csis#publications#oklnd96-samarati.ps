URL: http://www.isse.gmu.edu:80/~csis/publications/oklnd96-samarati.ps
Refering-URL: http://www.isse.gmu.edu:80/~csis/publication.html
Root-URL: 
Title: Supporting Multiple Access Control Policies in Database Systems  
Author: Elisa Bertino Sushil Jajodia Pierangela Samarati 
Address: 20135 Milano (Italy)  1820 Dolley Madison Boulevard McLean, VA 22102-3481 (USA)  20135 Milano (Italy)  
Affiliation: Dipartimento di Scienze dell'Informazione Universita degli Studi di Milano  The MITRE Corporation  Dipartimento di Scienze dell'Informazione Universita degli Studi di Milano  
Abstract: Although there are several choices of policies for protection of information, access control models have been developed for a fixed set pre-defined access control policies that are then built into the corresponding access control mechanisms. This becomes a problem, however, if the access control requirements of an application are different from the policies built into a mechanism. In most cases, the only solution is to enforce the requirements as part of the application code, but this makes verification, modification, and adequate enforcement of these policies impossible. In this paper, we propose a flexible authorization mechanism that can support different security policies. The mechanism enforces a general authorization model onto which multiple access control policies can be mapped. The model permits negative and positive authorizations, authorizations that must be strongly obeyed and authorizations that allow for exceptions, and enforces ownership together with delegation of administrative privileges. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Baldwin. </author> <title> Naming and grouping privileges to simplify security management in large databases. </title> <booktitle> In Proc. IEEE Symp. on Security and Privacy, </booktitle> <pages> pages 61-70, </pages> <address> Oakland, CA, </address> <year> 1990. </year>
Reference-contexts: This approach accords with the concept of user group as opposed to the concept of role (where a user may be constrained to operate with the privileges of a single role at a time) <ref> [1, 20] </ref>. Complications arise when a user is both authorized and denied, either directly or indirectly (i.e., through a group), for a privilege on a table.
Reference: [2] <author> D. Bell. </author> <booktitle> Modeling the "Multipolicy Machine". In Proc. of the New Security Paradigm Workshop, </booktitle> <pages> pages 2-9, </pages> <publisher> Little Compton, </publisher> <address> RI, USA, </address> <year> 1994. </year>
Reference-contexts: Hosmer [16] describes a multipolicy paradigm for supporting the enforcement of different protection policies. The approach is based on the concept of metapolicy that is a policy about policies. A conceptual model of this "multipolicy machine" has been proposed by Bell <ref> [2] </ref>. The model provides a formal framework for dealing with the combination of unspecified policies. 10 Conclusions The usefulness of separating security policies from security mechanisms in the development of access control systems has long been recognized [12, 9].
Reference: [3] <author> E. Bertino, S. Jajodia, and P. Samarati. </author> <title> Access controls in object-oriented database systems: Some approaches and issues. </title> <editor> In N. Adam and B. Bhargava, editors, </editor> <booktitle> Advanced Database Concepts and Research Issues, </booktitle> <pages> pages 17-44. </pages> <publisher> Springer-Verlag LNCS 759, </publisher> <year> 1993. </year>
Reference-contexts: Jajodia was partially funded by MITRE Sponsored Research, project 91850. He is also with the Center for Secure Information Systems and Department of Information and Software Systems Engineering, George Mason University, Fairfax, VA 22030-4444 databases systems, although recently advances have been reported in the areas of object-oriented database systems <ref> [3] </ref> and deductive databases [6]. Despite this large research effort, current access control models and mechanisms are not flexible enough to meet the access control requirements of modern application environments [10].
Reference: [4] <author> E. Bertino, P. Samarati, and S. Jajodia. </author> <title> An extended authorization model for relational databases. </title> <journal> IEEE TKDE. </journal> <note> To appear. </note>
Reference-contexts: As a consequence, when a user is revoked the administrative authorization for a privilege on a table, a recursive revocation may take place to delete the authorizations granted by the user or derived for the users on views. Revocation algorithms enforcing recursive deletion of authorizations proposed in other models <ref> [4, 11, 13, 15, 23] </ref> can be easily adapted to our model. 6 Ensuring consistency of the autho rization state The collection of valid authorizations may change upon execution of administrative operations by the users. These operations include changes to the authorization state, the group membership graph, or the tables. <p> More recent authorization models also permit specification of negative authorizations stating accesses to be denied. In some of these models, conflicts are solved simply by adopting the denials-take-precedence policy <ref> [4, 17, 14, 21] </ref>. Other models provide more sophisticated conflict resolution policies [18, 19, 7, 22]. The concept of strong and weak authorizations adopted in our model has been first introduced in the authorization model of Orion [19].
Reference: [5] <author> E. Bertino, P. Samarati, and S. Jajodia. </author> <title> Authorizations in relational database management systems. </title> <booktitle> In Proc. ACM Conf. on Comp. and Comm. Security, </booktitle> <pages> pages 130-139, </pages> <address> Fairfax, VA, </address> <year> 1993. </year>
Reference-contexts: Recent authorization models enforcing a closed policy also allow users to specify negative authorizations and resolve conflicts according to some predefined rules <ref> [5] </ref>. A problem arises when the access control requirements of an application differ from the policies built into the mechanism at hand. Enforcing the application policy becomes very difficult and, in most cases, the only solution is to implement the policy as part of the application code.
Reference: [6] <author> P. Bonatti, S. Kraus, and V. Subrahmanian. </author> <title> Declarative foundations of secure deductive databases. </title> <booktitle> In Proc. Int'l. Conf. on Database Theory. </booktitle> <publisher> Springer-Verlag LNCS 303, </publisher> <month> May </month> <year> 1992. </year>
Reference-contexts: He is also with the Center for Secure Information Systems and Department of Information and Software Systems Engineering, George Mason University, Fairfax, VA 22030-4444 databases systems, although recently advances have been reported in the areas of object-oriented database systems [3] and deductive databases <ref> [6] </ref>. Despite this large research effort, current access control models and mechanisms are not flexible enough to meet the access control requirements of modern application environments [10].
Reference: [7] <author> H. Bruggemann. </author> <title> Rights in an object-oriented environment. </title> <editor> In C. Landwehr and S. Jajodia, editors, </editor> <title> Database Security, V: Status and Prospects. </title> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: More recent authorization models also permit specification of negative authorizations stating accesses to be denied. In some of these models, conflicts are solved simply by adopting the denials-take-precedence policy [4, 17, 14, 21]. Other models provide more sophisticated conflict resolution policies <ref> [18, 19, 7, 22] </ref>. The concept of strong and weak authorizations adopted in our model has been first introduced in the authorization model of Orion [19]. In this model, authorizations can be specified only for groups of users (called roles in Orion), not for single users.
Reference: [8] <author> S. Castano, M. Fugini, G. Martella, and P. Samarati. </author> <title> Database Security. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Recent years have witnessed considerable work on access control models and related mechanisms for databases <ref> [8] </ref>. Most of this work deals with relational fl The work of S. Jajodia was partially funded by MITRE Sponsored Research, project 91850. <p> A negative (strong or weak) authorization can be specified for the select privilege on the relation for Consultants. There is no need to revoke the authorization previously granted since it will once again become valid upon revocation of the denial. 2 9 Related Work Early authorization models <ref> [8] </ref> were based on the closed world policy and accordingly only allowed the specification of positive authorizations. More recent authorization models also permit specification of negative authorizations stating accesses to be denied. In some of these models, conflicts are solved simply by adopting the denials-take-precedence policy [4, 17, 14, 21].
Reference: [9] <author> D. Denning. </author> <title> Cryptography and Data Security. </title> <publisher> Addison Wesley, </publisher> <year> 1982. </year>
Reference-contexts: A conceptual model of this "multipolicy machine" has been proposed by Bell [2]. The model provides a formal framework for dealing with the combination of unspecified policies. 10 Conclusions The usefulness of separating security policies from security mechanisms in the development of access control systems has long been recognized <ref> [12, 9] </ref>. Security policies are high-level guidelines specifying how access is to be controlled. Mechanisms are sets of functions implementing protection policies. Among the advantages of this separation is that it is possible to change the policy without requiring changes to the underlying mechanism [9]. <p> Security policies are high-level guidelines specifying how access is to be controlled. Mechanisms are sets of functions implementing protection policies. Among the advantages of this separation is that it is possible to change the policy without requiring changes to the underlying mechanism <ref> [9] </ref>. In spite of the policy-mechanism separation principle, access control systems today are based on a mechanisms enforcing a specific set of predefined policies. In this paper, we have moved a step toward the development of a flexible access control mechanism that can support different policies.
Reference: [10] <author> J. Dobson and J. McDermid. </author> <title> A framework for expressing models of security policy. </title> <booktitle> In Proc. IEEE Symp. on Security and Privacy, </booktitle> <pages> pages 229-239, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Despite this large research effort, current access control models and mechanisms are not flexible enough to meet the access control requirements of modern application environments <ref> [10] </ref>. This lack of flexibility exists because each model has been developed for a number of pre-defined access control policies; these policies are built into the corresponding access control mechanism and, therefore, cannot be changed. <p> Each access request submitted to the system is forwarded to the responsible reference monitor for the object to be accessed and allowed or denied accordingly. Other work on multipolicy aspects concerns the integration and coexistence of different, possibly inconsistent, policies <ref> [10] </ref>. Indeed, where different systems applying different policies interact, the problem of which policy to apply with respect to the common process arises. Hosmer [16] describes a multipolicy paradigm for supporting the enforcement of different protection policies.
Reference: [11] <author> R. Fagin. </author> <title> On an authorization mechanism. </title> <journal> ACM TODS, </journal> <volume> 3(3) </volume> <pages> 310-319, </pages> <month> Sept. </month> <year> 1978. </year>
Reference-contexts: As a consequence, when a user is revoked the administrative authorization for a privilege on a table, a recursive revocation may take place to delete the authorizations granted by the user or derived for the users on views. Revocation algorithms enforcing recursive deletion of authorizations proposed in other models <ref> [4, 11, 13, 15, 23] </ref> can be easily adapted to our model. 6 Ensuring consistency of the autho rization state The collection of valid authorizations may change upon execution of administrative operations by the users. These operations include changes to the authorization state, the group membership graph, or the tables.
Reference: [12] <author> E. Fernandez, R. Summers, and C. Woods. </author> <title> Database Security and Integrity. </title> <publisher> Addison Wesley, </publisher> <year> 1981. </year>
Reference-contexts: A conceptual model of this "multipolicy machine" has been proposed by Bell [2]. The model provides a formal framework for dealing with the combination of unspecified policies. 10 Conclusions The usefulness of separating security policies from security mechanisms in the development of access control systems has long been recognized <ref> [12, 9] </ref>. Security policies are high-level guidelines specifying how access is to be controlled. Mechanisms are sets of functions implementing protection policies. Among the advantages of this separation is that it is possible to change the policy without requiring changes to the underlying mechanism [9].
Reference: [13] <author> R. Gagliardi, G. Lapis, and B. Linsday. </author> <title> A flexible and efficient database authorization facility. </title> <type> Technical Report RJ 6826(65360), </type> <institution> IBM Research Division, Almaden Research Center, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: A user has all the privileges that are in the union of all his personal authorizations and the authorizations of all the groups to which he belongs. Note that this ap-proach follows the approach for group management of most existing database management systems (DBMSs) like, for example, System R <ref> [25, 13] </ref> and Orion [19]. This approach accords with the concept of user group as opposed to the concept of role (where a user may be constrained to operate with the privileges of a single role at a time) [1, 20]. <p> As a consequence, when a user is revoked the administrative authorization for a privilege on a table, a recursive revocation may take place to delete the authorizations granted by the user or derived for the users on views. Revocation algorithms enforcing recursive deletion of authorizations proposed in other models <ref> [4, 11, 13, 15, 23] </ref> can be easily adapted to our model. 6 Ensuring consistency of the autho rization state The collection of valid authorizations may change upon execution of administrative operations by the users. These operations include changes to the authorization state, the group membership graph, or the tables.
Reference: [14] <author> N. Gal-Oz, E. Gudes, and E. Fernandez. </author> <title> A model of methods authorization in object-oriented databases. </title> <booktitle> In Proc. VLDB, </booktitle> <pages> pages 52-61, </pages> <address> Dublin, Ireland, </address> <year> 1993. </year>
Reference-contexts: More recent authorization models also permit specification of negative authorizations stating accesses to be denied. In some of these models, conflicts are solved simply by adopting the denials-take-precedence policy <ref> [4, 17, 14, 21] </ref>. Other models provide more sophisticated conflict resolution policies [18, 19, 7, 22]. The concept of strong and weak authorizations adopted in our model has been first introduced in the authorization model of Orion [19].
Reference: [15] <author> P. Griffiths and B. Wade. </author> <title> An authorization mechanism for a relational database system. </title> <journal> ACM TODS, </journal> <volume> 1(3) </volume> <pages> 243-255, </pages> <month> Sept. </month> <year> 1976. </year>
Reference-contexts: As a consequence, when a user is revoked the administrative authorization for a privilege on a table, a recursive revocation may take place to delete the authorizations granted by the user or derived for the users on views. Revocation algorithms enforcing recursive deletion of authorizations proposed in other models <ref> [4, 11, 13, 15, 23] </ref> can be easily adapted to our model. 6 Ensuring consistency of the autho rization state The collection of valid authorizations may change upon execution of administrative operations by the users. These operations include changes to the authorization state, the group membership graph, or the tables.
Reference: [16] <author> H. Hosmer. </author> <title> Multipolicy paradigm II. </title> <booktitle> In Proc. of the New Security Paradigm Workshop, </booktitle> <publisher> Little Compton, </publisher> <address> RI, </address> <year> 1992. </year>
Reference-contexts: Other work on multipolicy aspects concerns the integration and coexistence of different, possibly inconsistent, policies [10]. Indeed, where different systems applying different policies interact, the problem of which policy to apply with respect to the common process arises. Hosmer <ref> [16] </ref> describes a multipolicy paradigm for supporting the enforcement of different protection policies. The approach is based on the concept of metapolicy that is a policy about policies. A conceptual model of this "multipolicy machine" has been proposed by Bell [2].
Reference: [17] <author> D. Jonscher and K. Dittrich. </author> <title> Argos A configurable access control system for interoperable environments. </title> <booktitle> In Proc.of the IFIP WG11.3 Working Conference on Database Security, </booktitle> <pages> pages 39-66, </pages> <address> Rensselaerville, NY, </address> <year> 1994. </year>
Reference-contexts: More recent authorization models also permit specification of negative authorizations stating accesses to be denied. In some of these models, conflicts are solved simply by adopting the denials-take-precedence policy <ref> [4, 17, 14, 21] </ref>. Other models provide more sophisticated conflict resolution policies [18, 19, 7, 22]. The concept of strong and weak authorizations adopted in our model has been first introduced in the authorization model of Orion [19]. <p> This approach raises several problems. In particular, it is impossible for the owner of an object to retain control of the users that can access his objects. With respect to multipolicy models, Jonscher and Dittrich <ref> [17] </ref> present an access control system for the protection of information in distributed federated database systems which allow the enforcement of different policies. Each policy is characterized by 19 attributes referring to different policy aspects (e.g., types of privileges allowed, signs of authorizations allowed, subjects' hierarchies to be considered).
Reference: [18] <author> T. Lunt. </author> <title> Access control policies for database systems. </title> <editor> In C. Landwehr, editor, </editor> <booktitle> Database Security II: Status and Prospects, </booktitle> <pages> pages 41-52. </pages> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: More recent authorization models also permit specification of negative authorizations stating accesses to be denied. In some of these models, conflicts are solved simply by adopting the denials-take-precedence policy [4, 17, 14, 21]. Other models provide more sophisticated conflict resolution policies <ref> [18, 19, 7, 22] </ref>. The concept of strong and weak authorizations adopted in our model has been first introduced in the authorization model of Orion [19]. In this model, authorizations can be specified only for groups of users (called roles in Orion), not for single users.
Reference: [19] <author> F. Rabitti, E. Bertino, W. Kim, and D. Woelk. </author> <title> A model of authorization for next-generation database systems. </title> <journal> ACM TODS, </journal> <volume> 16(1) </volume> <pages> 89-131, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: The authorization model that is implemented by the access control mechanism is described in the next section. It is built on the concept of strong and weak authorizations first proposed in the Orion authorization model <ref> [19] </ref>. However, our model differs considerably from Orion not only in terms of the semantics associated with negative authorizations, but also in the way conflicts between authorizations are resolved. Moreover, unlike Orion, our model supports ownership to gether with decentralized administration of authoriza-tions. <p> Authorizations specify the privileges that subjects are authorized or denied on objects. In our model, a grantor has the option of specifying whether the authorization (positive or negative) he is granting can be overridden or not. To support this functionality, we introduce, as in <ref> [19] </ref>, the notion of strong and weak authorizations. <p> Note that this ap-proach follows the approach for group management of most existing database management systems (DBMSs) like, for example, System R [25, 13] and Orion <ref> [19] </ref>. This approach accords with the concept of user group as opposed to the concept of role (where a user may be constrained to operate with the privileges of a single role at a time) [1, 20]. <p> More recent authorization models also permit specification of negative authorizations stating accesses to be denied. In some of these models, conflicts are solved simply by adopting the denials-take-precedence policy [4, 17, 14, 21]. Other models provide more sophisticated conflict resolution policies <ref> [18, 19, 7, 22] </ref>. The concept of strong and weak authorizations adopted in our model has been first introduced in the authorization model of Orion [19]. In this model, authorizations can be specified only for groups of users (called roles in Orion), not for single users. <p> Other models provide more sophisticated conflict resolution policies [18, 19, 7, 22]. The concept of strong and weak authorizations adopted in our model has been first introduced in the authorization model of Orion <ref> [19] </ref>. In this model, authorizations can be specified only for groups of users (called roles in Orion), not for single users. Positive authorizations granted to a group propagate to all the members of the group. Negative authorizations granted to a group propagate to all the groups to which it belongs.
Reference: [20] <author> R. Sandhu and P. Samarati. </author> <title> Access control: Principles and practice. </title> <journal> IEEE Comm., </journal> <pages> pages 2-10, </pages> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: This approach accords with the concept of user group as opposed to the concept of role (where a user may be constrained to operate with the privileges of a single role at a time) <ref> [1, 20] </ref>. Complications arise when a user is both authorized and denied, either directly or indirectly (i.e., through a group), for a privilege on a table.
Reference: [21] <author> M. Satyanarayanan. </author> <title> Integrating security in a large distributed system. </title> <journal> ACM TOCS, </journal> <volume> 7(3) </volume> <pages> 247-280, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: More recent authorization models also permit specification of negative authorizations stating accesses to be denied. In some of these models, conflicts are solved simply by adopting the denials-take-precedence policy <ref> [4, 17, 14, 21] </ref>. Other models provide more sophisticated conflict resolution policies [18, 19, 7, 22]. The concept of strong and weak authorizations adopted in our model has been first introduced in the authorization model of Orion [19].
Reference: [22] <author> H. Shen and P. Dewan. </author> <title> Access control for collaborative environments. </title> <booktitle> In Proc. Int'l. Conf. on Computer Supported Cooperative Work, </booktitle> <pages> pages 51-58, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: More recent authorization models also permit specification of negative authorizations stating accesses to be denied. In some of these models, conflicts are solved simply by adopting the denials-take-precedence policy [4, 17, 14, 21]. Other models provide more sophisticated conflict resolution policies <ref> [18, 19, 7, 22] </ref>. The concept of strong and weak authorizations adopted in our model has been first introduced in the authorization model of Orion [19]. In this model, authorizations can be specified only for groups of users (called roles in Orion), not for single users.
Reference: [23] <author> I. </author> <title> Software. Informix-OnLine/Secure Security Features User's Guide. </title> <publisher> Inc., </publisher> <address> Menlo Park, CA, </address> <year> 1993. </year>
Reference-contexts: As a consequence, when a user is revoked the administrative authorization for a privilege on a table, a recursive revocation may take place to delete the authorizations granted by the user or derived for the users on views. Revocation algorithms enforcing recursive deletion of authorizations proposed in other models <ref> [4, 11, 13, 15, 23] </ref> can be easily adapted to our model. 6 Ensuring consistency of the autho rization state The collection of valid authorizations may change upon execution of administrative operations by the users. These operations include changes to the authorization state, the group membership graph, or the tables.
Reference: [24] <author> G. Wiederhold. </author> <title> Mediators in the architecture of future information systems: A new approach. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 38-49, </pages> <year> 1992. </year>
Reference-contexts: The architecture of our system is illustrated in Figure 1. The two major components of the architecture are i) the access control mechanism implementing the authorization model and ii) a mediator <ref> [24] </ref>, which is an interface between users and the access control mechanism. The model enforced by the access control mechanism is a general model able to support different protection policies (see Section 8).
Reference: [25] <author> P. Wilms and B. Lindsay. </author> <title> A database authorization mechanism supporting individual and group authorizations. </title> <editor> In R. van de Riet and W. Litwin, editors, </editor> <booktitle> Distributed Data Sharing Systems, </booktitle> <pages> pages 273-292. </pages> <publisher> North-Holland, </publisher> <year> 1982. </year>
Reference-contexts: A user has all the privileges that are in the union of all his personal authorizations and the authorizations of all the groups to which he belongs. Note that this ap-proach follows the approach for group management of most existing database management systems (DBMSs) like, for example, System R <ref> [25, 13] </ref> and Orion [19]. This approach accords with the concept of user group as opposed to the concept of role (where a user may be constrained to operate with the privileges of a single role at a time) [1, 20].
References-found: 25

