URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-47.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-47.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. K. Agrawal, P. N. Klein, and R. Ravi, </author> <title> "When trees collide: An approximation algorithm for the generalized Steiner problem on networks," </title> <booktitle> Proc. 23rd ACM Symp. on Theory of Computing (1991), </booktitle> <pages> pp. 134-144. </pages>
Reference-contexts: Recently an approximation algorithm was given by Agrawal, Klein, and Ravi for a generalization of the Steiner tree problem <ref> [1] </ref>. In this generalization, instead of being given a set of terminals along with the graph, one is given a set of pairs of nodes (s i ; t i ).
Reference: [2] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1974). </address>
Reference-contexts: These labels enable us to quickly update the costs of edges. This idea is borrowed from <ref> [3, 2] </ref> For example, to implement decreaseCost (b; ffi), we simply decrease by ffi the label of Q (b). The keys of the elements in Q (v; b) are the labels of the edges. Hence the lowest-labeled edge in Q (v; b) can be found in O (log n) time.
Reference: [3] <author> D. Cheriton and R. E. Tarjan, </author> <title> "Finding minimum spanning trees, </title> " <journal> SIAM J. Comput. </journal> <volume> 5 (1976), </volume> <pages> pp. 724-742. </pages>
Reference-contexts: These labels enable us to quickly update the costs of edges. This idea is borrowed from <ref> [3, 2] </ref> For example, to implement decreaseCost (b; ffi), we simply decrease by ffi the label of Q (b). The keys of the elements in Q (v; b) are the labels of the edges. Hence the lowest-labeled edge in Q (v; b) can be found in O (log n) time.
Reference: [4] <author> M. X Goemans and D. P. Williamson, </author> <title> "A general approximation technique for constrained forest problems," </title> <booktitle> Proc., 3rd ACM Symposium on Discrete Algorithms, </booktitle> <pages> pp. 307-316. </pages>
Reference-contexts: The goal is to select a minimum-cost subgraph (not necessarily connected) in which each s i is connected to the corresponding t i . Thus the generalization allows for a more precise specifi cation of the required connectivity. 1 This algorithm was in turn generalized by Goemans and Williamson <ref> [4] </ref> to approximately solve a large class of network-design problems.
Reference: [5] <author> R. M. Karp, </author> <title> "Reducibility among combinatorial problems", </title> <editor> in R. E. Miller and J. W. Thatcher (eds.), </editor> <title> Complexity of Computer Computations. </title> <publisher> Plenum Press, </publisher> <address> New York (1972) pp. </address> <pages> 85-103. </pages>
Reference-contexts: 1 Introduction The Steiner tree problem in networks is a classic problem in optimization, proved NP-complete by Karp in his original paper <ref> [5] </ref>. Given a graph with costs on its edges, and given a subset of the nodes called terminals, the goal is to select a minimum-cost connected subgraph spanning all the terminals.
Reference: [6] <author> P. N. Klein and R. Ravi, </author> <title> "When cycles collapse: a general approximation technique for constrained two-connectivity problems," with R. </title> <type> Ravi, </type> <note> to 9 appear in 3rd Symposium on Integer Programming and Combinatorial Optimization, </note> <year> 1993. </year>
Reference-contexts: The algorithm of Goemans and Williamson was extended by Klein and Ravi <ref> [6] </ref> to handle 2-connectivity requirements, useful in designing networks that are robust against single-link failures. A straightforward implementation of these algorithms requires O (n 2 log n) time.
Reference: [7] <author> L. Kou, G. Markowsky, and L. Berman, </author> <title> "A fast algorithm for Steiner trees", </title> <journal> Acta Informatica, </journal> <volume> vol. 15 (1981), </volume> <pages> pp. 141-145. </pages>
Reference-contexts: Given a graph with costs on its edges, and given a subset of the nodes called terminals, the goal is to select a minimum-cost connected subgraph spanning all the terminals. Several approximation algorithms have been designed for this problem (a few are <ref> [7, 9, 10] </ref>), but it was not until 1988 that Mehlhorn [8] devised a way to implement one quickly, in O (m + n log n) time, where m is the number of edges in the input graph, and n is the number of nodes.
Reference: [8] <author> K. Mehlhorn, </author> <title> "A faster approximation algorithm for the Steiner problem in graphs" Information Processing Letters, </title> <booktitle> vol. 27(3) (1988), </booktitle> <pages> pp. 125-128. </pages>
Reference-contexts: Several approximation algorithms have been designed for this problem (a few are [7, 9, 10]), but it was not until 1988 that Mehlhorn <ref> [8] </ref> devised a way to implement one quickly, in O (m + n log n) time, where m is the number of edges in the input graph, and n is the number of nodes.
Reference: [9] <author> J. Plesnik, </author> <title> "A bound for the Steiner tree problem in graphs," </title> <journal> Math. Slovaca, </journal> <volume> vol. </volume> <pages> 31 (1981) pp. 155-163. </pages>
Reference-contexts: Given a graph with costs on its edges, and given a subset of the nodes called terminals, the goal is to select a minimum-cost connected subgraph spanning all the terminals. Several approximation algorithms have been designed for this problem (a few are <ref> [7, 9, 10] </ref>), but it was not until 1988 that Mehlhorn [8] devised a way to implement one quickly, in O (m + n log n) time, where m is the number of edges in the input graph, and n is the number of nodes.
Reference: [10] <author> H. Takahashi, and A. </author> <title> Matsuyama, " An approximate solution for the Steiner problem in graphs," </title> <journal> Math. Japonica, </journal> <volume> vol. </volume> <pages> 24 (1980) pp. 573-577. 10 </pages>
Reference-contexts: Given a graph with costs on its edges, and given a subset of the nodes called terminals, the goal is to select a minimum-cost connected subgraph spanning all the terminals. Several approximation algorithms have been designed for this problem (a few are <ref> [7, 9, 10] </ref>), but it was not until 1988 that Mehlhorn [8] devised a way to implement one quickly, in O (m + n log n) time, where m is the number of edges in the input graph, and n is the number of nodes.
References-found: 10

