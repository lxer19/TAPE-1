URL: http://arch.cs.ucdavis.edu/~chong/250C/mp-app/RNR-94-007.ps
Refering-URL: http://arch.cs.ucdavis.edu/~chong/250C/mp-app/
Root-URL: http://www.cs.ucdavis.edu
Title: THE NAS PARALLEL BENCHMARKS for the performance evaluation of highly parallel supercomputers. These benchmarks consist
Note: A new set of benchmarks has been developed  
Abstract: D. Bailey, E. Barszcz, J. Barton, D. Browning, R. Carter, L. Dagum, R. Fatoohi, S. Fineberg, P. Frederickson, T. Lasinski, R. Schreiber, H. Simon, V. Venkatakrishnan and S. Weeratunga RNR Technical Report RNR-94-007, March 1994 Abstract The principal distinguishing feature of these benchmarks is their "pencil and paper" specification|all details of these benchmarks are specified only algorithmically. In this way many of the difficulties associated with conventional benchmarking approaches on highly parallel systems are avoided. This paper is an updated version of a RNR technical report originally issued January 1991. Bailey, Barszcz, Barton, Carter, and Lasinski are with NASA Ames Research Center. Dagum, Fatoohi, Fineberg, Simon and Weer-atunga are with Computer Sciences Corp. (work supported through NASA Contract NAS 2-12961). Schreiber is with RIACS (work funded via NASA cooperative agreement NCC 2-387). Browning is now in the Netherlands (work originally done with CSC). Frederickson is now with Cray Research, Inc. in Los Alamos, NM (work originally done with RIACS). Venkatakrish-nan is now with ICASE in Hampton, VA (work originally done with CSC). Address for all authors except Browning, Frederickson and Venkatakrish-nan: NASA Ames Research Center, Mail Stop T27A-1, Moffett Field, CA 94035-1000. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Numerical Aerodynamic Simulation Program Plan. NAS Systems Division, Ames Research Center, </institution> <month> October </month> <year> 1988. </year>
Reference: [2] <author> McMahon, F. H.: </author> <title> The Livermore Fortran Kernels: A Computer Test of the Numerical Performance Range. </title> <type> Technical Report UCRL-53745, </type> <institution> Lawrence Livermore National Laboratory, Livermore, Calif., </institution> <month> Dec. </month> <year> 1986. </year>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops <ref> [2] </ref>, the LINPACK benchmark [3, 4] and the original NAS Kernels [5], are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines.
Reference: [3] <author> Dongarra, J. J.: </author> <title> The LINPACK Benchmark: An Explanation. </title> <booktitle> SuperComputing, Spring 1988, </booktitle> <pages> pp. 10-14. </pages>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops [2], the LINPACK benchmark <ref> [3, 4] </ref> and the original NAS Kernels [5], are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines.
Reference: [4] <author> Dongarra, J. J.: </author> <title> Performance of Various Computers Using Standard Linear Equations Software in a Fortran Environment. </title> <type> TR MCSRD 23, </type> <institution> Argonne National Laboratory, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops [2], the LINPACK benchmark <ref> [3, 4] </ref> and the original NAS Kernels [5], are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines.
Reference: [5] <author> Bailey, D. H.; and Barton, J.: </author> <title> The NAS Kernel Benchmark Program. </title> <type> Technical Report 86711, </type> <institution> Ames Research Center, Moffett Field, Calif., </institution> <month> August </month> <year> 1985. </year>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops [2], the LINPACK benchmark [3, 4] and the original NAS Kernels <ref> [5] </ref>, are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines. First of all, the tuning restrictions of these benchmarks rule out many widely used parallel extensions.
Reference: [6] <author> Berry, M.; et al. </author> <title> The Perfect Club Benchmarks: Effective Performance Evaluation of Supercomputers. </title> <journal> The International Journal of Supercomputer Applications, </journal> <volume> vol. 3, </volume> <year> 1989, </year> <pages> pp. 5-40. </pages>
Reference-contexts: First of all, porting a large program to a new parallel computer architecture requires a major effort, and it is usually hard to justify a major research task simply to obtain a benchmark number. For that reason we believe that the otherwise very successful PERFECT Club benchmark <ref> [6] </ref> is not suitable for highly parallel systems. This is demonstrated by very sparse performance results for parallel machines in the recent reports [7, 8, 9].
Reference: [7] <author> Pointer, L.: </author> <type> PERFECT Report 1. Technical Report 896, </type> <institution> CSRD, Univ. of Illinois, Urbana, Ill., </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: For that reason we believe that the otherwise very successful PERFECT Club benchmark [6] is not suitable for highly parallel systems. This is demonstrated by very sparse performance results for parallel machines in the recent reports <ref> [7, 8, 9] </ref>. Alternatively, an application benchmark could assume the availability of automatic software tools for transforming "dusty deck" source into efficient parallel code on a variety of systems.
Reference: [8] <author> Pointer, L.: </author> <title> PERFECT Report 2: Performance Evaluation for Costef-fective Transformations. </title> <type> Technical Report 964, </type> <institution> CSRD, Univ. of Illinois, Urbana, Ill., </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: For that reason we believe that the otherwise very successful PERFECT Club benchmark [6] is not suitable for highly parallel systems. This is demonstrated by very sparse performance results for parallel machines in the recent reports <ref> [7, 8, 9] </ref>. Alternatively, an application benchmark could assume the availability of automatic software tools for transforming "dusty deck" source into efficient parallel code on a variety of systems.
Reference: [9] <author> Cybenko, G.; Kipp, L.; Pointer, L.; and Kuck, D.: </author> <title> Supercomputer Performance Evaluation and the Perfect Benchmarks. </title> <type> Technical Report 965, </type> <institution> CSRD, Univ. of Illinois, Urbana, Ill., </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: For that reason we believe that the otherwise very successful PERFECT Club benchmark [6] is not suitable for highly parallel systems. This is demonstrated by very sparse performance results for parallel machines in the recent reports <ref> [7, 8, 9] </ref>. Alternatively, an application benchmark could assume the availability of automatic software tools for transforming "dusty deck" source into efficient parallel code on a variety of systems.
Reference: [10] <institution> American National Standard Programming Language Fortran X3.198-1992. American National Standards Institute, </institution> <address> 1430 Broadway, New York, NY 10018, </address> <year> 1992. </year> <month> 11 </month>
Reference-contexts: Accordingly, the following rules must be observed in any implementations of the NAS Parallel Benchmarks: * All floating point operations must be performed using 64-bit floating point arithmetic. * All benchmarks must be coded in either Fortran-90 <ref> [10] </ref> or C [11], with certain approved extensions. * Implementation of the benchmarks may not include a mix of Fortran-90 and C code|one or the other must be used. * Any extension of Fortran-90 that is in the High Performance Fortran (HPF) draft dated January 1992 or later [12] is allowed.
Reference: [11] <institution> Draft Proposed C ANSI Standard X3J3-S8115. American National Standards Institute, </institution> <address> 1430 Broadway, New York, NY, </address> <year> 1990. </year>
Reference-contexts: Accordingly, the following rules must be observed in any implementations of the NAS Parallel Benchmarks: * All floating point operations must be performed using 64-bit floating point arithmetic. * All benchmarks must be coded in either Fortran-90 [10] or C <ref> [11] </ref>, with certain approved extensions. * Implementation of the benchmarks may not include a mix of Fortran-90 and C code|one or the other must be used. * Any extension of Fortran-90 that is in the High Performance Fortran (HPF) draft dated January 1992 or later [12] is allowed. * Any language

Reference: [1] <institution> IEEE Standard for Binary Floating Point Numbers, </institution> <address> ANSI/IEEE Standard 754-1985. </address> <publisher> IEEE, </publisher> <address> New York, </address> <year> 1985. </year>
Reference: [2] <author> Knuth, D. E.: </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. 2. </volume> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops <ref> [2] </ref>, the LINPACK benchmark [3, 4] and the original NAS Kernels [5], are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines.
Reference: [3] <author> Duff, I. S.; Erisman, A. M.; and Reid, J. K.: </author> <title> Direct Methods for Sparse Matrices. </title> <publisher> Clarendon Press, Oxford, </publisher> <year> 1986. </year>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops [2], the LINPACK benchmark <ref> [3, 4] </ref> and the original NAS Kernels [5], are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines.
Reference: [4] <author> Agarwal, R. C.; and Cooley, J. W.: </author> <title> Fourier Transform and Convolution Subroutines for the IBM 3090 Vector Facility. </title> <journal> IBM Journal of Research and Development, </journal> <volume> vol. 30, </volume> <year> 1986, </year> <pages> pp. 145-162. </pages>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops [2], the LINPACK benchmark <ref> [3, 4] </ref> and the original NAS Kernels [5], are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines.
Reference: [5] <author> Bailey, D. H.: </author> <title> A High-Performance FFT Algorithm for Vector Supercomputers. </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> vol. 2, </volume> <year> 1988, </year> <pages> pp. 82-87. </pages>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops [2], the LINPACK benchmark [3, 4] and the original NAS Kernels <ref> [5] </ref>, are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines. First of all, the tuning restrictions of these benchmarks rule out many widely used parallel extensions.
Reference: [6] <author> Pease, M. C.: </author> <title> An Adaptation of the Fast Fourier Transform for Parallel Processing. </title> <journal> Journal of the ACM, </journal> <year> 1968, </year> <pages> pp. 252-264. </pages>
Reference-contexts: First of all, porting a large program to a new parallel computer architecture requires a major effort, and it is usually hard to justify a major research task simply to obtain a benchmark number. For that reason we believe that the otherwise very successful PERFECT Club benchmark <ref> [6] </ref> is not suitable for highly parallel systems. This is demonstrated by very sparse performance results for parallel machines in the recent reports [7, 8, 9].
Reference: [7] <author> Swarztrauber, P. N.: </author> <title> FFT Algorithms for Vector Computers. </title> <journal> Parallel Computing, </journal> <volume> vol. 1, </volume> <year> 1984, </year> <pages> pp. 45-63. </pages>
Reference-contexts: For that reason we believe that the otherwise very successful PERFECT Club benchmark [6] is not suitable for highly parallel systems. This is demonstrated by very sparse performance results for parallel machines in the recent reports <ref> [7, 8, 9] </ref>. Alternatively, an application benchmark could assume the availability of automatic software tools for transforming "dusty deck" source into efficient parallel code on a variety of systems.




Reference: [1] <author> Bailey, D. H.; and Barton, J. T.: </author> <title> The NAS Kernel Benchmark Program. </title> <institution> NASA TM-86711, </institution> <month> Aug. </month> <year> 1985. </year>
Reference: [2] <author> Pulliam, T. H.: </author> <title> Efficient Solution Methods for the Navier-Stokes Equations. Lecture Notes for the Von Karman Institute for Fluid Dynamics Lecture Series: Numerical Techniques for Viscous Flow Computation in Turbomachinery Bladings, </title> <month> Jan. </month> <pages> 20-24, </pages> <address> 1986, Brussels, Belgium. </address>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops <ref> [2] </ref>, the LINPACK benchmark [3, 4] and the original NAS Kernels [5], are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines.
Reference: [3] <author> Yoon. S.; Kwak, D.; and Chang, L.: </author> <title> LU-SGS Implicit Algorithm for Three-Dimensional Incompressible Navier-Stokes Equations with Source Term. </title> <journal> AIAA Paper 89-1964-CP, </journal> <year> 1989. </year>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops [2], the LINPACK benchmark <ref> [3, 4] </ref> and the original NAS Kernels [5], are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines.
Reference: [4] <author> Jameson, A.; Schmidt, W.; and Turkel, E.: </author> <title> Numerical Solution of the Euler Equations by Finite Volume Methods using Runge-Kutta Time-Stepping Schemes. </title> <type> AIAA Paper 81-1259, </type> <month> June </month> <year> 1981. </year>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops [2], the LINPACK benchmark <ref> [3, 4] </ref> and the original NAS Kernels [5], are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines.
Reference: [5] <author> Steger, J. L.; and Warming, R. F.: </author> <title> Flux Vector Splitting of the In-viscid Gas Dynamics Equations with Applications to Finite Difference Methods. </title> <journal> Journal of Computational Physics, </journal> <volume> vol. 40, </volume> <year> 1981, </year> <editor> p. </editor> <volume> 263. </volume> <editor> [6] van Leer, B.: </editor> <title> Flux Vector Splitting for the Euler Equations. </title> <booktitle> Eighth International Conference on Numerical Methods in Fluid Dynamics, Lecture Notes in Physics, </booktitle> <volume> vol. </volume> <pages> 170, </pages> <note> Edited by E. Krause, </note> <year> 1982, </year> <pages> pp. 507-512. </pages>
Reference-contexts: In particular, there is as yet no generally accepted benchmark program or even a benchmark strategy for these systems. The popular "kernel" benchmarks that have been used for traditional vector supercomputers, such as the Livermore Loops [2], the LINPACK benchmark [3, 4] and the original NAS Kernels <ref> [5] </ref>, are clearly inappropriate for fl Computer Sciences Corporation, El Segundo, California. This work is supported through NASA Contract NAS 2-12961. 2 the performance evaluation of highly parallel machines. First of all, the tuning restrictions of these benchmarks rule out many widely used parallel extensions.
Reference: [7] <author> Roe, P. L.: </author> <title> Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes. </title> <journal> Journal of Computational Physics, </journal> <volume> vol. 43, </volume> <year> 1981, </year> <pages> pp. 357-372. </pages>
Reference-contexts: For that reason we believe that the otherwise very successful PERFECT Club benchmark [6] is not suitable for highly parallel systems. This is demonstrated by very sparse performance results for parallel machines in the recent reports <ref> [7, 8, 9] </ref>. Alternatively, an application benchmark could assume the availability of automatic software tools for transforming "dusty deck" source into efficient parallel code on a variety of systems.
Reference: [8] <author> Harten, A.: </author> <title> High Resolution Schemes for Hyperbolic Conservation Laws. </title> <journal> Journal of Computational Physiscs, </journal> <volume> vol. 49, </volume> <year> 1983, </year> <pages> pp. 357-393. </pages>
Reference-contexts: For that reason we believe that the otherwise very successful PERFECT Club benchmark [6] is not suitable for highly parallel systems. This is demonstrated by very sparse performance results for parallel machines in the recent reports <ref> [7, 8, 9] </ref>. Alternatively, an application benchmark could assume the availability of automatic software tools for transforming "dusty deck" source into efficient parallel code on a variety of systems.
Reference: [9] <author> Gordon, W. J.: </author> <title> Blending Function Methods for Bivariate and Multivari-ate Interpolation. </title> <journal> SIAM J. Num. Analysis, </journal> <volume> vol. 8, </volume> <year> 1971, </year> <pages> pp. 158. </pages>
Reference-contexts: For that reason we believe that the otherwise very successful PERFECT Club benchmark [6] is not suitable for highly parallel systems. This is demonstrated by very sparse performance results for parallel machines in the recent reports <ref> [7, 8, 9] </ref>. Alternatively, an application benchmark could assume the availability of automatic software tools for transforming "dusty deck" source into efficient parallel code on a variety of systems.
Reference: [10] <author> Warming, R. F.; and Beam, R. M.: </author> <title> On the Construction and Application of Implicit Factored Schemes for Conservation Laws. </title> <booktitle> Symposium on Computational Fluid Dynamics, SIAM-AMS Proceedings, </booktitle> <volume> vol. 11, </volume> <year> 1978. </year>
Reference-contexts: Accordingly, the following rules must be observed in any implementations of the NAS Parallel Benchmarks: * All floating point operations must be performed using 64-bit floating point arithmetic. * All benchmarks must be coded in either Fortran-90 <ref> [10] </ref> or C [11], with certain approved extensions. * Implementation of the benchmarks may not include a mix of Fortran-90 and C code|one or the other must be used. * Any extension of Fortran-90 that is in the High Performance Fortran (HPF) draft dated January 1992 or later [12] is allowed.
Reference: [11] <author> Lapidus, L.; and Seinfeld, J. H.: </author> <title> Numerical Solution of Ordinary Differ--ential Equations. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1971. </year>
Reference-contexts: Accordingly, the following rules must be observed in any implementations of the NAS Parallel Benchmarks: * All floating point operations must be performed using 64-bit floating point arithmetic. * All benchmarks must be coded in either Fortran-90 [10] or C <ref> [11] </ref>, with certain approved extensions. * Implementation of the benchmarks may not include a mix of Fortran-90 and C code|one or the other must be used. * Any extension of Fortran-90 that is in the High Performance Fortran (HPF) draft dated January 1992 or later [12] is allowed. * Any language
Reference: [12] <author> Lomax, H.: </author> <title> Stable Implicit and Explicit Numerical Methods for Integrating Quasi-Linear Differential Equations with Parasitic-Stiff and Parasitic-Saddle Eigenvalues. </title> <institution> NASA TN D-4703, </institution> <year> 1968. </year>
Reference-contexts: either Fortran-90 [10] or C [11], with certain approved extensions. * Implementation of the benchmarks may not include a mix of Fortran-90 and C code|one or the other must be used. * Any extension of Fortran-90 that is in the High Performance Fortran (HPF) draft dated January 1992 or later <ref> [12] </ref> is allowed. * Any language extension or library routine that is employed in any of the benchmarks must be supported by the vendor and available to all users. * Subprograms and library routines not written in Fortran or C may only perform certain functions, as indicated in the next section.
Reference: [13] <author> Pulliam, T. H.; and Chaussee, D. S.: </author> <title> A Diagonal Form of an Implicit Approximate Factorization Algorithm. </title> <journal> Journal of Computational Physics, </journal> <volume> vol. 39, </volume> <year> 1981, </year> <note> p. 347. </note>
Reference: [14] <author> Chan, T .F. and Jackson, K. R.: </author> <title> Nonlinearly Preconditioned Krylov Subspace Methods for Discrete Newton Algorithms. </title> <journal> SIAM J. Sci. Stat. Compt., </journal> <volume> vol. 5, </volume> <year> 1984, </year> <pages> pp. 533-542. </pages>
Reference: [15] <author> Axelsson, O.: </author> <title> A Generalized SSOR Method. BIT, </title> <address> vol.13, </address> <year> 1972, </year> <pages> pp. 443-467. </pages>
Reference: [16] <author> Olsson, P.; and Johnson, S. L.: </author> <title> Boundary Modifications of the Dissipation Operators for the Three-Dimensional Euler Equations. </title> <journal> Journal of Scientific Computing, </journal> <volume> vol. 4, </volume> <year> 1989, </year> <pages> pp. 159-195. </pages>
Reference: [17] <author> Coakley, T. J.: </author> <title> Numerical Methods for Gas Dynamics Combining Characteristics and Conservation Concepts. </title> <type> AIAA Paper 81-1257, </type> <year> 1981. </year> <month> 79 </month>
References-found: 34

