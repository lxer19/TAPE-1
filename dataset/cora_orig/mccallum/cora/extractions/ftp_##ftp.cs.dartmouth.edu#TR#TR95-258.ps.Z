URL: ftp://ftp.cs.dartmouth.edu/TR/TR95-258.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR95-258/
Root-URL: http://www.cs.dartmouth.edu
Title: TIAS: A Transportable Intelligent Agent System  
Author: Kenneth E. Harker 
Date: June 1995  
Note: 5  
Abstract: Senior Thesis Department of Computer Science Dartmouth College Hanover, NH 03755-3510 Dartmouth Technical Report: PCS-TR95-258 iago@cs.dartmouth.edu Abstract In recent years, there has been an explosive growth in the amount of information available to our society. In particular, the amount of information available online through vast networks like the global Internet has been growing at a staggering rate. This growth rate has by far exceeded the rate of growth in network speeds, as has the number of individuals and organizations seeking access to this information. There is thus a motivation to find abstract methods of manipulating this online data in ways that both serve the needs of end users efficiently and use network resources intelligently. In lieu of a traditional clientserver model of information processing, which is both inflexible and potentially very inefficient, a Transportable Intelligent Agent system has the potential to achieve a more efficient and flexible network system. An intelligent agent is a program that models the information space for a user, and allows the user to specify how the information is to be processed. A transportable agent can suspend its execution, transport itself to a new location on a network, and resume execution at the new location. This is a particularly attractive model for both wireless and dialup networks where a user might not be able to maintain a permanent network connection, as well as for situations where the amount of information to be processed is large relative to the network bandwidth. Preliminary work in the field has shown that such agent systems are possible and deserve further study. This thesis describes a prototype transportable intelligent agent system that extends work already done in the field. Agents are written in a modified version of the Tcl programming language and transported using TCP/IP connections. Several simple examples demonstrate the properties of the system. 
Abstract-found: 1
Intro-found: 1
Reference: [BN84] <author> Birrel, A.D., and Nelson, B.J. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 2, no. </volume> <month> 1 (Feb. </month> <year> 1984), </year> <pages> pp. 39-59. </pages>
Reference-contexts: In the latter, there have been many papers published and much work done. The first system to implement remote computation is now a well-known feature on many systems, Remote Procedure Call (RPC) <ref> [BN84] </ref>. This was followed by extensions to the RPC concept, which provided access to certain services in the form of procedure calls from remote locations. Work in this area has included Falcones Network Command Language (NCL) [Fal87], Stamos and Giffords Remote Evaluation (REV) [SG90], and Stoyenkos SUPRA-RPC [Sto94].
Reference: [Coen94] <author> Coen, M.H. SodaBot: </author> <title> A Software Agent Environment and Construction System. </title> <booktitle> CIKM Workshop on Intelligent Information Agents, Conference Proceedings (Dec. </booktitle> <year> 1994.) </year>
Reference-contexts: Michael Coen has also discovered the difficulty in defining agents, but has identified several properties they must exhibit. These include the need for an agent to be intelligent and autonomous, robust, and capable of remembering information they are exposed to <ref> [Coen94] </ref>. An intelligent agent should also be able to remember what it has seen to help it make better decisions over time. <p> Coen also alludes to the need for transportable agents in his paper SodaBot: A Software Agent Environment and Construction System. Coen suggests that agents should distributed over networks because, Abstraction barriers can become confused if agents are responsible for too many nonlocal events <ref> [Coen94] </ref>. Coens system falls short of being a transportable agent system, however.
Reference: [Cyb94] <author> Cybenko, G., Gray R., Wu, Y., and Kharbrov, A. </author> <title> Information Architecture and Agents. </title> <booktitle> CIKM Workshop on Intelligent Information Agents, Conference Proceedings (Dec. </booktitle> <year> 1994.) </year>
Reference-contexts: What exactly defines an intelligent agent is difficult to say. George Cybenko has described information agents as programs that manage a users information space, managing the resources and taking actions when appropriate <ref> [Cyb94] </ref>. Michael Coen has also discovered the difficulty in defining agents, but has identified several properties they must exhibit. These include the need for an agent to be intelligent and autonomous, robust, and capable of remembering information they are exposed to [Coen94].
Reference: [Fal87] <author> Falcone, J. R. </author> <title> A programmable interface language for heterogenous distributed systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 5, no. </volume> <month> 4 (Nov. </month> <year> 1987), </year> <pages> pp. 330-351. </pages>
Reference-contexts: This was followed by extensions to the RPC concept, which provided access to certain services in the form of procedure calls from remote locations. Work in this area has included Falcones Network Command Language (NCL) <ref> [Fal87] </ref>, Stamos and Giffords Remote Evaluation (REV) [SG90], and Stoyenkos SUPRA-RPC [Sto94]. Each of these systems, however, suffers from a certain inherent lack of flexibility, in that they provide only certain services to remote machines, and do not fit into the model of an intelligent agent.
Reference: [Gray95] <institution> Gray, R. Transportable Agents Thesis Proposal Defense , Dartmouth College Department of Computer Science, </institution> <month> May, </month> <year> 1995. </year>
Reference-contexts: Robert Gray perhaps described the core nature of transportable agents best with his definition: A transportable agent is a named program that can migrate from machine to machine in a heterogeneous network <ref> [Gray95] </ref>. In addition to this functional description, several characteristics help to define transportable agents better. <p> It did not support agent replication, nor did it support inter-agent communications. Concurrent with the development of TIAS, another prototype transportable agent system has been developed by Robert Gray, also based on Grays modified Tcl <ref> [Gray95] </ref> . It reportedly supports agent relocation, agent replication, and inter-agent communications. The TIAS implementation has sought to incorporate all of these characteristics as well. 7 4. The Implementation The TIAS implementation was designed with several objectives in mind. <p> Tcl is an interpreted language, and the agents require their own special interpreter to run. Once submitted to an interpreter, an agent script will execute as a normal Tcl program. The special interpreter used in TIAS is based, in part, on a modified Tcl created by Robert Gray <ref> [Gray95] </ref> , and is needed to handle those new commands provided by TIAS to transportable agents. <p> Thus, when an agent is being evaluated by an agent interpreter, it is actually being evaluated by a Tcl interpreter that has been written into a C program. The final selling point for Tcl was the modifications made to it by Robert Gray, a graduate student at Dartmouth College <ref> [Gray95] </ref> . These modifications allow the programmer to capture the state information of a Tcl program. Capturing the agent programs internal state can be done either within the agent script or, more conveniently, within the C program into which the interpreter is embedded.
Reference: [KK94] <author> Kotay, K., and Kotz, D. </author> <title> Transportable Agents. </title> <booktitle> CIKM Workshop on Intelligent Information Agents, Conference Proceedings (Dec. </booktitle> <year> 1994.) </year>
Reference-contexts: Other transportable agent systems are being developed for research purposes. At Dartmouth College, Keith Kotay and David Kotz have created an agent system that supports the movement of agents from one location to another <ref> [KK94] </ref>. This agent system does not, however, support the ability of agents to replicate themselves, nor does it implement message-passing between agents. <p> The system prototyped by Keith Kotay and David Kotz <ref> [KK94] </ref> has successfully exhibited several of these properties. Specifically, the system was portable across numerous different hardware platforms and supported agents choosing when and where to migrate. It did not support agent replication, nor did it support inter-agent communications. <p> Each layer of the code is complex enough to be treated as a separate concern with its own set of design issues. 4.2 The Transportation Mechanism There were several possible design choices for the transportation layer. An existing transportable agent system, created by Keith Kotay <ref> [KK94] </ref>, made use of both electronic mail and rsh (remote shell) as the means by which to transport the agent script and its state information from one machine to the next. Both approaches have certain disadvantages. Electronic mail is woefully inefficient. <p> It also fails completely at sites where the mail system has been configured to make a common mailbox for all the machines on the network <ref> [KK94] </ref>. While rsh is a better alternative to mail, it has its own set of discouraging problems.
Reference: [Ous94] <author> Ousterhout, J.K. </author> <title> Tcl and the Tk Toolkit. </title> <address> Reading, Massachusetts: </address> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: Tcl, on the other hand, was actually a fairly natural choice. It was created by John Ousterhout while he was at the University of California at Berkeley. Its original mission was to serve as a general-purpose language to be embedded into other projects that needed a simple, interpreted language <ref> [Ous94] </ref>. It has rapidly become popular within academia, and has seen several major releases, along with the addition of the Tk toolkit which enables quick creation of GUI interfaces in the X Window system.
Reference: [SG90] <author> Stamos, J.W., and Gifford, D.K. </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 5, no. </volume> <month> 4 (Oct. </month> <year> 1990), </year> <pages> pp. 537-565. </pages>
Reference-contexts: This was followed by extensions to the RPC concept, which provided access to certain services in the form of procedure calls from remote locations. Work in this area has included Falcones Network Command Language (NCL) [Fal87], Stamos and Giffords Remote Evaluation (REV) <ref> [SG90] </ref>, and Stoyenkos SUPRA-RPC [Sto94]. Each of these systems, however, suffers from a certain inherent lack of flexibility, in that they provide only certain services to remote machines, and do not fit into the model of an intelligent agent.
Reference: [Sto94] <author> Stoyenko, A.D. SUPRA-RPC: </author> <title> SUbprogram PaRAmeters in Remote Procedure Calls. </title> <journal> Software - Practice and Experience, </journal> <volume> vol. 24, no. </volume> <month> 1 (Jan. </month> <year> 1994), </year> <pages> pp. 27-49. </pages>
Reference-contexts: This was followed by extensions to the RPC concept, which provided access to certain services in the form of procedure calls from remote locations. Work in this area has included Falcones Network Command Language (NCL) [Fal87], Stamos and Giffords Remote Evaluation (REV) [SG90], and Stoyenkos SUPRA-RPC <ref> [Sto94] </ref>. Each of these systems, however, suffers from a certain inherent lack of flexibility, in that they provide only certain services to remote machines, and do not fit into the model of an intelligent agent.
Reference: [Whi94] <author> White, </author> <title> J.E. Telescript Technology: The Foundation for the Electronic Marketplace. General Magic White Paper, </title> <booktitle> 1994. </booktitle> <pages> 26 </pages>
Reference-contexts: Finally, none of these systems is at all divorced from the client-server model of remote information processing. A company called General Magic has recently introduced a product called Telescript, which implements a transportable agent system. A white paper on the technology <ref> [Whi94] </ref> describes some of the key concepts of the system. The Telescript system allows an agent to travel across a network from place to place, and meet with other agents. <p> This is apparently the approach taken by General Magic with their Telescript engine <ref> [Whi94] </ref>. Such a system would provide greater stability and would perhaps make it easier to write scripts, but it would introduce an entirely new level of complex interactions into the system. <p> This would conceptually represent another layer, a script-generating layer, in the system, that would use the services of the script layer. Finally, issues of security, such as those implemented in Telescript <ref> [Whi94] </ref>, should be investigated with an interest in making these solutions open and non-proprietary. In the TIAS implementation, a server for message queuing would almost certainly be preferable to the present system of repeatedly trying to send a message until it is delivered.
References-found: 10

