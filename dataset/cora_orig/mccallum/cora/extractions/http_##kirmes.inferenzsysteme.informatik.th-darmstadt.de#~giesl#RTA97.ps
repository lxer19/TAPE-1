URL: http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/~giesl/RTA97.ps
Refering-URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~giesl/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: thomas@cs.ruu.nl  E-mail: giesl@inferenzsysteme.informatik.th-darmstadt.de  
Phone: 2  
Title: Proving Innermost Normalisation Automatically  
Author: Thomas Arts and Jurgen Giesl 
Address: P.O. Box 80.089, 3508 TB Utrecht, The Netherlands,  Alexanderstr. 10, 64283 Darmstadt, Germany,  
Affiliation: 1 Dept. of Computer Science, Utrecht University,  FB Informatik, TH Darmstadt,  
Abstract: We present a technique to prove innermost normalisation of term rewriting systems (TRSs) automatically. In contrast to previous methods, our technique is able to prove innermost normalisation of TRSs that are not terminating. Our technique can also be used for termination proofs of all TRSs where innermost normalisation implies termination, such as non-overlapping TRSs or locally confluent overlay systems. In this way, termination of many (also non-simply terminating) TRSs can be verified automatically.
Abstract-found: 1
Intro-found: 1
Reference: [AG96a] <author> T. Arts and J. Giesl. </author> <title> Termination of constructor systems. </title> <booktitle> In Proceedings of RTA-96, </booktitle> <volume> LNCS 1103, </volume> <pages> pages 63-77, </pages> <year> 1996. </year>
Reference-contexts: TRSs from different areas of computer science (such as arithmetical operations, several sorting algorithms, a reachability algorithm on graphs, a TRS for substitutions in the lambda calculus etc.). 13 The concept of dependency pairs has been introduced in [Art96] and a first automation of this concept can be found in <ref> [AG96a] </ref>. However, these approaches were restricted to non-overlapping constructor systems without nested recursion, whereas in the present paper we dealt with arbitrary rewrite systems. <p> Finally, the introduction of innermost dependency graphs led to a considerably more powerful technique than the method proposed in <ref> [AG96a] </ref>. Dependency pairs have a connection to semantic labelling [Zan95] (resp. to self -labelling [MOZ96]). However, compared to semantic labelling the dependency pair approach is better suited for automation, because here one does not have to find an appropriate semantic interpretation.
Reference: [AG96b] <author> T. Arts and J. Giesl. </author> <title> Proving innermost normalisation automatically. </title> <type> Tech. Report IBN 96/39, </type> <institution> TH Darmstadt, </institution> <year> 1996. </year> <note> http://kirmes.inferenzsysteme. informatik.th-darmstadt.de/~reports/notes/ibn-96-39.ps </note>
Reference-contexts: In this way, innermost normalisation (and thereby, termination) of many also non-simply terminating systems can now be verified automatically. A collection of numerous examples where our technique proved successful can be found in <ref> [AG96b] </ref>. 2 A Criterion for Innermost Normalisation In this section we introduce a new criterion for innermost normalisation. For that purpose the notions of constructors and defined symbols (that are well-known for the subclass of constructor systems) are extended to arbitrary TRSs. <p> We implemented our technique for the generation of constraints and a large collection of TRSs of which innermost normalisation resp. termination has been proved automatically can be found in <ref> [AG96b] </ref>. <p> The only other approach for automated termination proofs of non-simply terminating systems is a technique for generating transformation orderings [BL90] by Steinbach [Ste95a]. Several examples which can automatically be proved terminating by our technique, but where Steinbach's approach fails, can be found in the full version of this paper <ref> [AG96b] </ref>. Acknowledgements. We would like to thank Hans Zantema, Aart Middeldorp, Tho-mas Kolbe, and the referees for constructive criticism and many helpful comments. 14
Reference: [AG97] <author> T. Arts and J. Giesl. </author> <title> Automatically proving termination where simplification orderings fail. </title> <booktitle> In Proceedings of CAAP'97, </booktitle> <publisher> LNCS, </publisher> <year> 1997. </year>
Reference-contexts: A sequence of dependency pairs is a chain if there exists a substitution such that for all consecutive pairs hs j ; t j i and hs j+1 ; t j+1 i in the sequence we have t j ! fl R s j+1 (cf. <ref> [AG97] </ref>). In this way, the right-hand side of every dependency pair can be seen as the newly introduced redex that should be traced and the reductions t j ! fl R s j+1 are necessary to normalize the arguments of the redex that is traced. <p> As our technique can only be applied for termination proofs if the TRS is non-overlapping (or at least an overlay system with joinable critical pairs), in <ref> [AG97] </ref> we also showed how dependency pairs can be used for termination proofs of arbitrary TRSs. However, as long as the system is non-overlapping, it is always advantageous to prove innermost normalisation only (instead of termination). <p> However, as long as the system is non-overlapping, it is always advantageous to prove innermost normalisation only (instead of termination). For instance, termination of the quot system can easily be proved with the technique introduced in the present paper, whereas the constraints generated by the method of <ref> [AG97] </ref> are not satisfied by any quasi-ordering which is amenable to automation (i.e. by any total or quasi-simplification ordering). Most previous methods developed for automatic termination proofs are based on simplification orderings.
Reference: [Art96] <author> T. </author> <title> Arts. Termination by absence of infinite chains of dependency pairs. </title> <booktitle> In Proceedings of CAAP'96, </booktitle> <volume> LNCS 1059, </volume> <pages> pages 196-210, </pages> <year> 1996. </year>
Reference-contexts: In Sect. 4 and 5 our technique is refined further and in Sect. 6 we give a summary and comment on connections and possible combinations with related approaches. For several classes of TRSs, innermost normalisation already suffices for termination [Gra95, Gra96]. Moreover, several modularity results exist for innermost normalisation <ref> [Kri95, Art96] </ref>, which do not hold for termination. Therefore, for those classes of TRSs termination can be proved by splitting the TRS and proving innermost normalisation of the subsystems separately. <p> non-simply terminating challenge problems from literature as well as many practically relevant TRSs from different areas of computer science (such as arithmetical operations, several sorting algorithms, a reachability algorithm on graphs, a TRS for substitutions in the lambda calculus etc.). 13 The concept of dependency pairs has been introduced in <ref> [Art96] </ref> and a first automation of this concept can be found in [AG96a]. However, these approaches were restricted to non-overlapping constructor systems without nested recursion, whereas in the present paper we dealt with arbitrary rewrite systems. <p> Moreover, in contrast to these first approaches, in this paper we developed a complete criterion for innermost normalisation and proved its soundness in a short and easy way (while the corresponding proof in <ref> [Art96] </ref> was based on semantic labelling [Zan95]). Finally, the introduction of innermost dependency graphs led to a considerably more powerful technique than the method proposed in [AG96a]. Dependency pairs have a connection to semantic labelling [Zan95] (resp. to self -labelling [MOZ96]).
Reference: [AZ95] <author> T. Arts and H. Zantema. </author> <title> Termination of logic programs using semantic unification. </title> <booktitle> In Proceedings of LoPSTr'95, </booktitle> <volume> LNCS 1048, </volume> <pages> pages 219-233, </pages> <year> 1995. </year>
Reference-contexts: Techniques for proving innermost normalisation can for example be utilized for termination proofs of functional programs (modelled by TRSs) or of logic programs. (When transforming logic programs into TRSs, innermost normalisation of the TRS implies termination of the logic program <ref> [AZ95] </ref>.) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. [Der87, Ste95b]).
Reference: [BL87] <author> A. Ben Cherifa and P. Lescanne. </author> <title> Termination of rewriting systems by polynomial interpretations and its implementation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 9 </volume> <pages> 137-159, </pages> <year> 1987. </year>
Reference-contexts: or of logic programs. (When transforming logic programs into TRSs, innermost normalisation of the TRS implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations <ref> [Lan79, BL87, Ste94, Zan94, Gie95] </ref>, transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. [Der87, Ste95b]). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS.
Reference: [BL90] <author> F. Bellegarde and P. Lescanne. </author> <title> Termination by completion. Applicable Algebra in Engineering, </title> <journal> Communication and Computing, </journal> <volume> 1 </volume> <pages> 79-96, </pages> <year> 1990. </year>
Reference-contexts: programs into TRSs, innermost normalisation of the TRS implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings <ref> [BL90, Ste95a] </ref> etc. | for surveys see e.g. [Der87, Ste95b]). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS. Therefore, none of the techniques could prove innermost normalisation of non-terminating systems. <p> Moreover, whenever a direct termination proof is possible with a simplification ordering, then this simplification ordering also satisfies the constraints resulting from our technique. The only other approach for automated termination proofs of non-simply terminating systems is a technique for generating transformation orderings <ref> [BL90] </ref> by Steinbach [Ste95a]. Several examples which can automatically be proved terminating by our technique, but where Steinbach's approach fails, can be found in the full version of this paper [AG96b]. Acknowledgements.
Reference: [Der79] <author> N. Dershowitz. </author> <title> A note on simplification orderings. </title> <journal> Information Processing Letters, </journal> <volume> 9(5) </volume> <pages> 212-215, </pages> <year> 1979. </year>
Reference-contexts: If one uses other techniques (e.g. path orderings) which can only generate monotonic orderings, then of course one may drop the monotonicity constraint (c). 7 A problem with virtually all automatic approaches for termination proofs is that they are restricted to simplification orderings <ref> [Der79, Ste95b] </ref> and therefore can only prove termination of TRS that are simply terminating. However, there are numerous relevant and important terminating TRSs where simplification orderings fail.
Reference: [Der87] <author> N. Dershowitz. </author> <title> Termination of rewriting. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 3(1 and </volume> 2):69-116, 1987. 
Reference-contexts: implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. <ref> [Der87, Ste95b] </ref>). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS. Therefore, none of the techniques could prove innermost normalisation of non-terminating systems.
Reference: [DH95] <author> N. Dershowitz and C. Hoot. </author> <title> Natural termination. </title> <journal> Theoretical Computer Science, </journal> <volume> 142(2) </volume> <pages> 179-207, </pages> <year> 1995. </year>
Reference-contexts: programs (modelled by TRSs) or of logic programs. (When transforming logic programs into TRSs, innermost normalisation of the TRS implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings <ref> [DH95, Ste95b] </ref>, semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. [Der87, Ste95b]). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS. <p> However, compared to semantic labelling the dependency pair approach is better suited for automation, because here one does not have to find an appropriate semantic interpretation. At first sight, there also seems to be a similarity between innermost chains and innermost forward closures <ref> [LM78, DH95] </ref>, but it turns out that these approaches are fundamentally different. While forward closures restrict the application of rules (to that part of a term created by previous rewrites), the dependency pair approach restricts the examination of terms (to those subterms that may possibly be reduced further).
Reference: [Gie95] <author> J. Giesl. </author> <title> Generating polynomial orderings for termination proofs. </title> <booktitle> In Proceedings of RTA-95, </booktitle> <volume> LNCS 914, </volume> <pages> pages 426-431, </pages> <year> 1995. </year>
Reference-contexts: or of logic programs. (When transforming logic programs into TRSs, innermost normalisation of the TRS implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations <ref> [Lan79, BL87, Ste94, Zan94, Gie95] </ref>, transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. [Der87, Ste95b]). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS. <p> Methods to synthesize polynomial orderings automatically have for instance been developed in <ref> [Ste94, Gie95] </ref>. Note that for our technique we do not require the quasi-ordering to be weakly monotonic on tuple symbols. <p> For instance, if F is mapped to some polynomial [F], then instead of (7) one could demand that the partial derivative of [F](y; y; x) with respect to x should be non-negative, i.e. @[F](y;y;x) @x 0, cf. <ref> [Gie95] </ref>.
Reference: [Gra95] <author> B. Gramlich. </author> <title> Abstract relations between restricted termination and confluence properties of rewrite systems. </title> <journal> Fundam. Informaticae, </journal> <volume> 24 </volume> <pages> 3-23, </pages> <year> 1995. </year>
Reference-contexts: In this way, innermost nor-malisation can be proved automatically. In Sect. 4 and 5 our technique is refined further and in Sect. 6 we give a summary and comment on connections and possible combinations with related approaches. For several classes of TRSs, innermost normalisation already suffices for termination <ref> [Gra95, Gra96] </ref>. Moreover, several modularity results exist for innermost normalisation [Kri95, Art96], which do not hold for termination. Therefore, for those classes of TRSs termination can be proved by splitting the TRS and proving innermost normalisation of the subsystems separately. <p> However, this polynomial is not weakly monotonic in x or y. In this way, innermost normalisation of our example can be proved automatically, i.e. this technique allows the application of standard techniques for innermost normalisation proofs, even if the TRS is not terminating. Moreover, using the results of <ref> [Gra95] </ref>, Thm. 6 can also be applied for proving termination of TRSs that are non-overlapping (or for locally confluent overlay systems). As an example regard the following TRS by T.
Reference: [Gra96] <author> B. Gramlich. </author> <title> On proving termination by innermost termination. </title> <booktitle> In Proceedings of RTA-96, </booktitle> <volume> LNCS 1103, </volume> <pages> pages 93-107, </pages> <year> 1996. </year>
Reference-contexts: In this way, innermost nor-malisation can be proved automatically. In Sect. 4 and 5 our technique is refined further and in Sect. 6 we give a summary and comment on connections and possible combinations with related approaches. For several classes of TRSs, innermost normalisation already suffices for termination <ref> [Gra95, Gra96] </ref>. Moreover, several modularity results exist for innermost normalisation [Kri95, Art96], which do not hold for termination. Therefore, for those classes of TRSs termination can be proved by splitting the TRS and proving innermost normalisation of the subsystems separately.
Reference: [HL78] <author> G. Huet and D. Lankford. </author> <title> On the uniform halting problem for term rewriting systems. </title> <type> Technical Report 283, </type> <institution> INRIA, Le Chesnay, France, </institution> <year> 1978. </year>
Reference-contexts: Techniques for proving innermost normalisation can for example be utilized for termination proofs of functional programs (modelled by TRSs) or of logic programs. (When transforming logic programs into TRSs, innermost normalisation of the TRS implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties <ref> [HL78] </ref>, several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. [Der87, Ste95b]).
Reference: [Hul80] <author> J.M. Hullot. </author> <title> Canonical forms and unification. </title> <booktitle> In Proceedings of CADE-5, </booktitle> <volume> LNCS 87, </volume> <pages> pages 318-334, </pages> <year> 1980. </year>
Reference-contexts: Hence, we present a better technique to determine whether for two terms t and v there exists a normal substitution such that t reduces innermost to the normal form v. For this purpose we use narrowing (cf. e.g. <ref> [Hul80] </ref>). Definition 10 (Narrowing). Let R be a TRS.
Reference: [Kri95] <author> M.R.K. Krishna Rao. </author> <title> Modular proofs for completeness of hierarchical term rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 151 </volume> <pages> 487-512, </pages> <year> 1995. </year>
Reference-contexts: In Sect. 4 and 5 our technique is refined further and in Sect. 6 we give a summary and comment on connections and possible combinations with related approaches. For several classes of TRSs, innermost normalisation already suffices for termination [Gra95, Gra96]. Moreover, several modularity results exist for innermost normalisation <ref> [Kri95, Art96] </ref>, which do not hold for termination. Therefore, for those classes of TRSs termination can be proved by splitting the TRS and proving innermost normalisation of the subsystems separately.
Reference: [Lan79] <author> D.S. Lankford. </author> <title> On proving term rewriting systems are Noetherian. </title> <type> Technical Report Memo MTP-3, </type> <institution> Louisiana Technical University, Ruston, LA, </institution> <year> 1979. </year>
Reference-contexts: or of logic programs. (When transforming logic programs into TRSs, innermost normalisation of the TRS implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations <ref> [Lan79, BL87, Ste94, Zan94, Gie95] </ref>, transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. [Der87, Ste95b]). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS. <p> For that purpose one may for instance use the well-known technique of synthesizing polynomial orderings <ref> [Lan79] </ref>. For example, these constraints are fulfilled by the polynomial ordering where the constant 0 is mapped to the number 0, s (x) is mapped to x+1, g (x) is mapped to x+2, F (x; y; z) is mapped to (xy) 2 +1, and G (x) is mapped to x.
Reference: [LM78] <author> D.S. Lankford and D.R. Musser. </author> <title> A finite termination criterion, </title> <year> 1978. </year>
Reference-contexts: However, compared to semantic labelling the dependency pair approach is better suited for automation, because here one does not have to find an appropriate semantic interpretation. At first sight, there also seems to be a similarity between innermost chains and innermost forward closures <ref> [LM78, DH95] </ref>, but it turns out that these approaches are fundamentally different. While forward closures restrict the application of rules (to that part of a term created by previous rewrites), the dependency pair approach restricts the examination of terms (to those subterms that may possibly be reduced further).
Reference: [MOZ96] <author> A. Middeldorp, H. Ohsaki, and H. Zantema. </author> <title> Transforming termination by self-labelling. </title> <booktitle> In Proceedings of CADE-13, </booktitle> <volume> LNCS 1104, </volume> <pages> pages 373-387, </pages> <year> 1996. </year>
Reference-contexts: Finally, the introduction of innermost dependency graphs led to a considerably more powerful technique than the method proposed in [AG96a]. Dependency pairs have a connection to semantic labelling [Zan95] (resp. to self -labelling <ref> [MOZ96] </ref>). However, compared to semantic labelling the dependency pair approach is better suited for automation, because here one does not have to find an appropriate semantic interpretation.
Reference: [Ste94] <author> J. Steinbach. </author> <title> Generating polynomial orderings. </title> <journal> Inf. Pr. Let., </journal> <volume> 49 </volume> <pages> 85-93, </pages> <year> 1994. </year>
Reference-contexts: or of logic programs. (When transforming logic programs into TRSs, innermost normalisation of the TRS implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations <ref> [Lan79, BL87, Ste94, Zan94, Gie95] </ref>, transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. [Der87, Ste95b]). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS. <p> Methods to synthesize polynomial orderings automatically have for instance been developed in <ref> [Ste94, Gie95] </ref>. Note that for our technique we do not require the quasi-ordering to be weakly monotonic on tuple symbols.
Reference: [Ste95a] <author> J. Steinbach. </author> <title> Automatic termination proofs with transformation orderings. </title> <booktitle> In Proceedings of RTA-95, </booktitle> <volume> LNCS 914, </volume> <pages> pages 11-25, </pages> <year> 1995. </year>
Reference-contexts: programs into TRSs, innermost normalisation of the TRS implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings <ref> [BL90, Ste95a] </ref> etc. | for surveys see e.g. [Der87, Ste95b]). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS. Therefore, none of the techniques could prove innermost normalisation of non-terminating systems. <p> Moreover, whenever a direct termination proof is possible with a simplification ordering, then this simplification ordering also satisfies the constraints resulting from our technique. The only other approach for automated termination proofs of non-simply terminating systems is a technique for generating transformation orderings [BL90] by Steinbach <ref> [Ste95a] </ref>. Several examples which can automatically be proved terminating by our technique, but where Steinbach's approach fails, can be found in the full version of this paper [AG96b]. Acknowledgements. We would like to thank Hans Zantema, Aart Middeldorp, Tho-mas Kolbe, and the referees for constructive criticism and many helpful comments. 14
Reference: [Ste95b] <author> J. Steinbach. </author> <title> Simplification orderings: history of results. </title> <journal> Fundamenta Infor-maticae, </journal> <volume> 24 </volume> <pages> 47-87, </pages> <year> 1995. </year>
Reference-contexts: programs (modelled by TRSs) or of logic programs. (When transforming logic programs into TRSs, innermost normalisation of the TRS implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings <ref> [DH95, Ste95b] </ref>, semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. [Der87, Ste95b]). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS. <p> implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations [Lan79, BL87, Ste94, Zan94, Gie95], transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. <ref> [Der87, Ste95b] </ref>). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS. Therefore, none of the techniques could prove innermost normalisation of non-terminating systems. <p> If one uses other techniques (e.g. path orderings) which can only generate monotonic orderings, then of course one may drop the monotonicity constraint (c). 7 A problem with virtually all automatic approaches for termination proofs is that they are restricted to simplification orderings <ref> [Der79, Ste95b] </ref> and therefore can only prove termination of TRS that are simply terminating. However, there are numerous relevant and important terminating TRSs where simplification orderings fail.
Reference: [Zan94] <author> H. Zantema. </author> <title> Termination of term rewriting: interpretation and type elimination. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 17 </volume> <pages> 23-50, </pages> <year> 1994. </year>
Reference-contexts: or of logic programs. (When transforming logic programs into TRSs, innermost normalisation of the TRS implies termination of the logic program [AZ95].) While both termination and innermost normalisation are undecidable properties [HL78], several techniques have been developed for proving termination of TRSs automatically (e.g. path orderings [DH95, Ste95b], semantic interpretations <ref> [Lan79, BL87, Ste94, Zan94, Gie95] </ref>, transformation orderings [BL90, Ste95a] etc. | for surveys see e.g. [Der87, Ste95b]). However, there has not been any specific method for innermost normalisation, i.e. the only way to prove innermost normalisation automatically was by showing termination of the TRS.
Reference: [Zan95] <author> H. Zantema. </author> <title> Termination of term rewriting by semantic labelling. </title> <journal> Funda-menta Informaticae, </journal> <volume> 24 </volume> <pages> 89-105, </pages> <year> 1995. </year> <month> 15 </month>
Reference-contexts: Moreover, in contrast to these first approaches, in this paper we developed a complete criterion for innermost normalisation and proved its soundness in a short and easy way (while the corresponding proof in [Art96] was based on semantic labelling <ref> [Zan95] </ref>). Finally, the introduction of innermost dependency graphs led to a considerably more powerful technique than the method proposed in [AG96a]. Dependency pairs have a connection to semantic labelling [Zan95] (resp. to self -labelling [MOZ96]). <p> and proved its soundness in a short and easy way (while the corresponding proof in [Art96] was based on semantic labelling <ref> [Zan95] </ref>). Finally, the introduction of innermost dependency graphs led to a considerably more powerful technique than the method proposed in [AG96a]. Dependency pairs have a connection to semantic labelling [Zan95] (resp. to self -labelling [MOZ96]). However, compared to semantic labelling the dependency pair approach is better suited for automation, because here one does not have to find an appropriate semantic interpretation.
References-found: 24

