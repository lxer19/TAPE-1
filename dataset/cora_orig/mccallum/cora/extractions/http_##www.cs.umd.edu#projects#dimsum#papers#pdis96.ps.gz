URL: http://www.cs.umd.edu/projects/dimsum/papers/pdis96.ps.gz
Refering-URL: http://www.cs.umd.edu/projects/dimsum/papers/
Root-URL: 
Email: amsaleg@cs.umd.edu franklin@cs.umd.edu  Anthony.Tomasic@inria.fr urhan@cs.umd.edu  
Title: Scrambling Query Plans to Cope With Unexpected Delays  
Author: Laurent Amsaleg yz Michael J. Franklin Anthony Tomasic Tolga Urhan 
Affiliation: University of Maryland University of Maryland  INRIA University of Maryland  
Abstract: Accessing data from numerous widely-distributed sources poses significant new challenges for query optimization and execution. Congestion and failures in the network can introduce highly-variable response times for wide-area data access. This paper is an initial exploration of solutions to this variability. We introduce a class of dynamic, run-time query plan modification techniques that we call query plan scrambling. We present an algorithm that modifies execution plans on-the-fly in response to unexpected delays in obtaining initial requested tuples from remote sources. The algorithm both reschedules operators and introduces new operators into the query plan. We present simulation results that demonstrate how the technique effectively hides delays by performing other useful work while waiting for missing data to arrive. 
Abstract-found: 1
Intro-found: 1
Reference: [ACPS96] <author> S. Adali, K. Candan, Y. Papakonstantinou, and V. Subrahmanian. </author> <title> Query Caching and Optimization in Distributed Mediator Systems. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: Several reordering algorithms are presented. This work assumes that reordering is done entirely at compile time. This work cannot easily be extended to handle run-time reordering, since the reorderings are restricted to occur at certain locations in the join tree. <ref> [ACPS96] </ref> tracks the costs of previous calls to remote sources (in addition to caching the results) and can use this tracking to estimate the cost of new calls.
Reference: [Ant93] <author> G. Antoshenkov. </author> <title> Dynamic Query Optimization in Rdb/VMS. </title> <booktitle> ICDE Conf., </booktitle> <address> Vienna, Austria, </address> <year> 1993. </year>
Reference-contexts: Thus, direct considerations of problems with response times from remote sources are not accounted for. These articles are, however, a rich source of optimizations which can be carried over into our work. A novel approach to dynamic query optimization used in Rdb/VMS is described in <ref> [Ant93] </ref>. In this approach, multiple different executions of the same logical operator occur at the same time. They compete for producing the best execution when one execution of an operator is determined to be (probably) better, the other execution is terminated.
Reference: [BE96] <author> O. Bukhres and A. Elmagarmid. </author> <title> Object-Oriented Mul-tidatabase Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: The query processing problems resulting from heterogeneity have been the subject of much attention in recent years (e.g., <ref> [SAD + 95, BE96, TRV96] </ref>). In contrast, the impact of unpredictable response time on wide-area query processing has received relatively little attention.
Reference: [CBTY89] <author> A. Chen, D. Brill, M. Templeton, and C. Yu. </author> <title> Distributed Query Processing in a Multiple Database System. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 7(3), </volume> <year> 1989. </year>
Reference-contexts: As in Volcano, this system optimizes a query both at query compile and query start-up time, but does not change the query plan during query run-time. The research prototype Mermaid <ref> [CBTY89] </ref> and its commercial successor InterViso [THMB95] are heterogeneous distributed databases that perform dynamic query optimization. Mermaid constructs its query plan entirely at run-time, thus each step in query optimization is based on dynamic information such as intermediate join result sizes and network performance.
Reference: [CDF + 94] <author> M. Carey, D. DeWitt, M. Franklin, N. Hall, M. McAuliffe, J. Naughton, D. Schuh, M. Solomon, C. Tan, O. Tsatalos, S. White, and M. Zwilling. </author> <title> Shoring Up Persistent Applications. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Minneapolis, MN, </address> <year> 1994. </year>
Reference-contexts: We first describe the simulation environment used to study the algorithm. 3.1 Simulation Environment To study the performance of the query scrambling algorithm, we extended an existing simulator [FJK96, DFJ + 96] that models a heterogeneous, peer-to-peer database system such as SHORE <ref> [CDF + 94] </ref>. The simulator we used provides a detailed model of query processing costs in such a system. Here, we briefly describe the simulator, focusing on the aspects that are pertinent to our experiments.
Reference: [CG94] <author> R. Cole and G. Graefe. </author> <title> Optimization of Dynamic Query Execution Plans. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Minneapolis, MN, </address> <year> 1994. </year>
Reference-contexts: The Volcano optimizer <ref> [CG94, Gra93] </ref> does dynamic optimization for distributed query processing. During optimization, if a cost comparison returns incomparable, the choice for that part of the search space is encoded in a choose-plan operator. At query start up time, all the incomparable cost comparisons are reevaluated.
Reference: [DFJ + 96] <author> S. Dar, M. Franklin, B. Jonsson, D. Srivastava, and M. Tan. </author> <title> Semantic Data Caching and Replacement. </title> <booktitle> 22nd VLDB Conf., </booktitle> <address> Bombay, India, </address> <year> 1996. </year>
Reference-contexts: The second set of experiments studies the sensitivity of Phase 2 to the selectivity of the new joins it creates. We first describe the simulation environment used to study the algorithm. 3.1 Simulation Environment To study the performance of the query scrambling algorithm, we extended an existing simulator <ref> [FJK96, DFJ + 96] </ref> that models a heterogeneous, peer-to-peer database system such as SHORE [CDF + 94]. The simulator we used provides a detailed model of query processing costs in such a system. Here, we briefly describe the simulator, focusing on the aspects that are pertinent to our experiments.
Reference: [DMP93] <author> M. Derr, S. Morishita, and G. Phipps. </author> <title> Design and Implementation of the Glue-Nail Database System. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Washington, DC, </address> <year> 1993. </year>
Reference-contexts: All final decisions regarding query execution are thus made at query start-up time. Our work is complimentary to the Volcano optimizer since Volcano does not adapt to changes once the evaluation of the query has started. Other work in dynamic query optimization either does not consider the distributed case <ref> [DMP93, OHMS92] </ref> or only optimizes access path selection and cannot reorder joins [HS93]. Thus, direct considerations of problems with response times from remote sources are not accounted for. These articles are, however, a rich source of optimizations which can be carried over into our work.
Reference: [DSD95] <author> W. Du, M. Shan, and U. Dayal. </author> <title> Reducing Multi-database Query Response Time by Tree Balancing. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> San Jose, CA, </address> <year> 1995. </year>
Reference-contexts: In this approach, multiple different executions of the same logical operator occur at the same time. They compete for producing the best execution when one execution of an operator is determined to be (probably) better, the other execution is terminated. In <ref> [DSD95] </ref> the response time of queries is improved by reordering left-deep join trees into bushy join trees. Several reordering algorithms are presented. This work assumes that reordering is done entirely at compile time.
Reference: [FJK96] <author> M. Franklin, B. Jonsson, and D. Kossmann. </author> <title> Performance Tradeoffs for Client-Server Query Processing. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: As stated previously, this type of delay models problems in connecting to remote data sources, as it is often experienced in the Internet. * We focus on query processing using a data-shipping or hybrid-shipping approach <ref> [FJK96] </ref>, where data is collected from remote sources and integrated at the query source. Only query processing that is performed at the query source is subject to scrambling. <p> The second set of experiments studies the sensitivity of Phase 2 to the selectivity of the new joins it creates. We first describe the simulation environment used to study the algorithm. 3.1 Simulation Environment To study the performance of the query scrambling algorithm, we extended an existing simulator <ref> [FJK96, DFJ + 96] </ref> that models a heterogeneous, peer-to-peer database system such as SHORE [CDF + 94]. The simulator we used provides a detailed model of query processing costs in such a system. Here, we briefly describe the simulator, focusing on the aspects that are pertinent to our experiments.
Reference: [Gra93] <author> G. Graefe. </author> <title> Query Evaluation Techniques for Large Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(2), </volume> <year> 1993. </year>
Reference-contexts: Only query processing that is performed at the query source is subject to scrambling. This approach is typical of mediated database systems that integrate data from distributed, heterogeneous sources, e.g., [TRV96]. * Query execution is scheduled using an iterator model <ref> [Gra93] </ref>. In this model every run-time operator supports an open () call and a get-next () call. Query execution starts by calling open () on the topmost operator of the query execution plan and proceeds by iteratively calling get-next () on the topmost operator. <p> The Volcano optimizer <ref> [CG94, Gra93] </ref> does dynamic optimization for distributed query processing. During optimization, if a cost comparison returns incomparable, the choice for that part of the search space is encoded in a choose-plan operator. At query start up time, all the incomparable cost comparisons are reevaluated.
Reference: [HS93] <author> W. Hong and M. Stonebraker. </author> <title> Optimization of Parallel Query Execution Plans in XPRS. Distributed and Parallel Databases, </title> <type> 1(1), </type> <year> 1993. </year>
Reference-contexts: Our work is complimentary to the Volcano optimizer since Volcano does not adapt to changes once the evaluation of the query has started. Other work in dynamic query optimization either does not consider the distributed case [DMP93, OHMS92] or only optimizes access path selection and cannot reorder joins <ref> [HS93] </ref>. Thus, direct considerations of problems with response times from remote sources are not accounted for. These articles are, however, a rich source of optimizations which can be carried over into our work. A novel approach to dynamic query optimization used in Rdb/VMS is described in [Ant93].
Reference: [Kno95] <author> C. Knoblock. </author> <title> Planning, Executing, </title> <booktitle> Sensing, and Re-planning for Information Gathering. In Proc. of the 14th Int. Joint Conf. on Artificial Intelligence, </booktitle> <address> Montreal, Canada, </address> <year> 1995. </year>
Reference-contexts: Mermaid neither takes advantage of a statically generated plan nor does it dynamically account for a source which does not respond at run-time. The Sage system <ref> [Kno95] </ref> is an AI planning system for query optimization for heterogeneous distributed sources. This system interleaves execution and optimization and responds to unavailable data sources. 5 Conclusion and Future Work Query plan scrambling is a novel technique that can dynamically adjust to changes in the run-time environment.
Reference: [OHMS92] <author> J. Orenstein, S. Haradhvala, B. Margulies, and D. Sakahara. </author> <title> Query Processing in the ObjectStore Database System. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> San Diego, CA, </address> <year> 1992. </year>
Reference-contexts: All final decisions regarding query execution are thus made at query start-up time. Our work is complimentary to the Volcano optimizer since Volcano does not adapt to changes once the evaluation of the query has started. Other work in dynamic query optimization either does not consider the distributed case <ref> [DMP93, OHMS92] </ref> or only optimizes access path selection and cannot reorder joins [HS93]. Thus, direct considerations of problems with response times from remote sources are not accounted for. These articles are, however, a rich source of optimizations which can be carried over into our work.
Reference: [SD90] <author> D. Schneider and D. DeWitt. </author> <title> Tradeoffs in Processing Complex Join Queries via Hashing in Multiprocessor Database Machines. </title> <booktitle> 16th VLDB Conf., </booktitle> <address> Brisbane, Australia, </address> <year> 1990. </year>
Reference-contexts: The scheduling of operators is indicated in Figure 1 by the numbers associated to each operator. In the figure, the joins are numbered according to the order in which they would be completed by an iterator-based scheduler. The flow of data between the operators follows the model discussed in <ref> [SD90] </ref>, i.e., the left input of a hash join is always materialized while the right input is consumed in a pipelined fashion. The schedule implied by the tree in Figure 1 would thus begin by materializing the left subtree of the root node.
Reference: [SAD + 95] <author> M. Shan, R. Ahmen, J. Davis, W. Du, and W. Kent. </author> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond, chapter Pegasus: A Heterogeneous Information Management System. </title> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: The query processing problems resulting from heterogeneity have been the subject of much attention in recent years (e.g., <ref> [SAD + 95, BE96, TRV96] </ref>). In contrast, the impact of unpredictable response time on wide-area query processing has received relatively little attention.
Reference: [THMB95] <editor> M. Templeton, H. Henley, E. Maros, and D. Van Buer. InterViso: </editor> <title> Dealing with the Complexity of Federated Database Access. </title> <journal> VLDB Journal, </journal> <volume> 4(2), </volume> <year> 1995. </year>
Reference-contexts: As in Volcano, this system optimizes a query both at query compile and query start-up time, but does not change the query plan during query run-time. The research prototype Mermaid [CBTY89] and its commercial successor InterViso <ref> [THMB95] </ref> are heterogeneous distributed databases that perform dynamic query optimization. Mermaid constructs its query plan entirely at run-time, thus each step in query optimization is based on dynamic information such as intermediate join result sizes and network performance.
Reference: [TRV96] <author> A. Tomasic, L. Raschid, and P. Valduriez. </author> <title> Scaling Heterogeneous Databases and the Design of DISCO. </title> <booktitle> ICDCS Conf., </booktitle> <address> Hong Kong, </address> <year> 1996. </year>
Reference-contexts: The query processing problems resulting from heterogeneity have been the subject of much attention in recent years (e.g., <ref> [SAD + 95, BE96, TRV96] </ref>). In contrast, the impact of unpredictable response time on wide-area query processing has received relatively little attention. <p> Finally, in cases where data are simply not arriving, or are arriving far too slowly, then scrambling can be used to produce partial results that can then be returned to users and/or used in query processing at a later time <ref> [TRV96] </ref>. 1.2 Tolerating Initial Delays In this work, we present an initial approach to query plan scrambling that specifically addresses the problem of Initial Delay (i.e., delay in receiving the initial requested tuples from a remote data source). <p> Only query processing that is performed at the query source is subject to scrambling. This approach is typical of mediated database systems that integrate data from distributed, heterogeneous sources, e.g., <ref> [TRV96] </ref>. * Query execution is scheduled using an iterator model [Gra93]. In this model every run-time operator supports an open () call and a get-next () call.
References-found: 18

