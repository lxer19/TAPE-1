URL: http://ai.eecs.umich.edu/people/marbles/papers/temporal.workshop.ps
Refering-URL: http://ai.eecs.umich.edu/people/marbles/homepage.html
Root-URL: http://www.cs.umich.edu
Email: kgshin-@umich.edu  
Title: Building a Plan with Real-Time Execution Guarantees  
Author: Ella M. Atkins Edmund H. Durfee Kang G. Shin marbles, durfee, 
Address: 1101 Beal Ave. Ann Arbor, MI 48109  
Affiliation: University of Michigan AI Lab  
Abstract: The degree to which a planning system succeeds depends on its ability to meet critical deadlines as well as the correctness and completeness of its models which describe events and actions that change the world state. It is often unrealistic to expect either unlimited execution time or perfect models, so a planner must be able to make appropriate time vs. quality tradeoffs, then detect and respond to states it had not originally planned to handle. In this paper, we consider these issues in the context of the Cooperative Intelligent Real-time Control Architecture (CIRCA), which combines a planner with a separate real-time system so that plans are built, scheduled, and then executed with real-time guarantees. Specifically, we discuss our recent addition of a probabilistic model to help the planner prioritize states for expansion, and present important classes of unplanned-for states that we detect and handle in CIRCA. Finally, we describe our current work to improve CIRCAs planner by estimating planning time constraints in advance and incorporating a more intelligent utility function to prioritize states. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Atkins, E. M., Durfee, E. H., and Shin, K. G., </author> <title> "Plan Development in CIRCA using Local Probabilistic Models," </title> <booktitle> to appear in Uncertainty in Artificial Intelligence: Proceedings of the Twelfth Conference, </booktitle> <month> August </month> <year> 1996a. </year>
Reference-contexts: To do this, we have implemented a model in which transition probabilities (specified in the domain knowledge base as any functions of time) are used to approximately compute state probabilities as described in <ref> (Atkins, Durfee, and Shin 1996a) </ref>. These probabilities are then used by the planner so that state expansion occurs in decreasing order of probability. <p> Due to the generic nature of our planner, we feel our algorithms to compute probabilities and detect unplanned-for states are not CIRCA-specific, but applicable to any planner which considers execution times and imprecise models. Improvements are still needed, particularly to our probabilistic model <ref> (Atkins, Durfee, and Shin 1996a) </ref>. CIRCAs planner allows cycles in its state diagrams, a realistic representation of many real-world situations, such as executing a holding pattern in an aircraft. Such cycles may introduce significant inaccuracies in our approximate state probability calculations.
Reference: <author> E. M. Atkins, E. H. Durfee, and K. G. Shin, </author> <title> "Expecting the Unexpected: Detecting and Reacting to Unplanned-for World States," </title> <booktitle> to appear in Proceedings of AAAI Workshop on Theories of Action and Planning: Bridging the Gap, </booktitle> <month> August </month> <year> 1996b. </year>
Reference-contexts: These states are "safe" because all TTFs are preempted by actions, but the system has no chance of achieving its goals from those states. Replanning for goal achievement when a deadend state is encountered is discussed in <ref> (Atkins, Durfee, and Shin 1996b) </ref>. CIRCA's control plans are represented as cyclic schedules of testaction pairs (TAPs). Tests involve reading sensors; actions involve sending actuator commands or transferring data between CIRCA modules. <p> This probabilistic model has been tested using an aircraft simulator and is discussed in <ref> (Atkins, Durfee, and Shin 1996b) </ref>. We also have incorporated and tested algorithms for detecting and handling certain classes of unplanned-for states. Figure 3 characterizes the relationships between subclasses of all possible world states for any domain. At the top level, states are either modeled or unmodeled.
Reference: <author> Dean, T., Kaelbling, L. P., Kirman, J, and Nicholson, A., </author> <title> "Planning with Deadlines in Stochastic Domains," </title> <booktitle> Proceedings AAAI-93, AAAI, </booktitle> <pages> pp. 574-579, </pages> <year> 1993. </year>
Reference-contexts: We study such problems within the context of CIRCA (Cooperative Intelligent Real-time Control Architecture) (Musliner, Durfee, and Shin 1995), which combines a planner, scheduler, and separate real-time plan execution module to build, schedule, then execute plans with real-time guarantees of system safety. CIRCA differs from an anytime planning approach <ref> (Dean et al. 1993) </ref> in that it primarily considers execution time guarantees in its plans. Thus it would ensure that the robot in the example above would react in time to avoid the obstacle, so long as obstacle avoidance had been planned for. <p> temporal transitions in the domain knowledge base - a daunting task because these functions must account for probabilistic dependencies when multiple transitions match the same state. 5 Future Work - Limiting Planning Time Researchers generally agree that one must restrict planner execution time, thus metalevel controlling mechanisms, such as anytime <ref> (Dean et al. 1993) </ref> and design-to-time (Garvey, Humphrey, and Lesser 1993) algorithms, have been added to impose limits on planning execution time, and learning mechanisms, such as chunking in SOAR (Rosenbloom, Laird, and Newell 1993), have been added to increase planning execution speed. <p> Timely reactions may be achieved either by bounding replanning execution time or by building reactions in advance. As planning technology progresses, more architectures employ methods for computing and adhering to planner execution time bounds, as discussed in <ref> (Dean et al. 1993) </ref>, (Hendler and Agrawala 1990), (Horwitz 1988), (Ingrand and Georgeff 1990), (Musliner, Durfee, and Shin 1995), and (Zilberstein 1994). We feel a combination of these and other innovative ideas is required before achieving a near-optimal balance between planning time and plan quality.
Reference: <author> Garvey, A., Humphrey, M., and Lesser, V., </author> <title> Task Interdependencies in Design-to-time Real-time Scheduling, </title> <booktitle> Proceedings AAAI-93, AAAI, </booktitle> <pages> pp. 580-585, </pages> <year> 1993. </year>
Reference-contexts: base - a daunting task because these functions must account for probabilistic dependencies when multiple transitions match the same state. 5 Future Work - Limiting Planning Time Researchers generally agree that one must restrict planner execution time, thus metalevel controlling mechanisms, such as anytime (Dean et al. 1993) and design-to-time <ref> (Garvey, Humphrey, and Lesser 1993) </ref> algorithms, have been added to impose limits on planning execution time, and learning mechanisms, such as chunking in SOAR (Rosenbloom, Laird, and Newell 1993), have been added to increase planning execution speed.
Reference: <author> Hendler, J. and Agrawala, A., </author> <title> "Mission Critical Planning: </title> <booktitle> AI on the MARUTI Real-Time Operating System," in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 77-84, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Timely reactions may be achieved either by bounding replanning execution time or by building reactions in advance. As planning technology progresses, more architectures employ methods for computing and adhering to planner execution time bounds, as discussed in (Dean et al. 1993), <ref> (Hendler and Agrawala 1990) </ref>, (Horwitz 1988), (Ingrand and Georgeff 1990), (Musliner, Durfee, and Shin 1995), and (Zilberstein 1994). We feel a combination of these and other innovative ideas is required before achieving a near-optimal balance between planning time and plan quality.
Reference: <author> Horvitz, E. J., </author> <title> "Reasoning under Varying and Uncertain Resource Constraints", </title> <booktitle> Proceedings AAAI-88, AAAI, </booktitle> <pages> pp. 111-116, </pages> <year> 1988. </year>
Reference: <author> Ingrand, F. F. and Georgeff, M. P., </author> <title> "Managing Deliberation and Reasoning in Real-Time AI Systems," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 284-291, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The "shell" around all AIS operations consists of meta-rules controlling a set of knowledge areas, similar to the PRS architecture <ref> (Ingrand and Georgeff 1990) </ref>. Working memory contains tasks that are ready to be executed. These tasks include planning, downloading plans from the AIS to the real-time subsystem (RTS), and reading/processing feedback data from the RTS. <p> Timely reactions may be achieved either by bounding replanning execution time or by building reactions in advance. As planning technology progresses, more architectures employ methods for computing and adhering to planner execution time bounds, as discussed in (Dean et al. 1993), (Hendler and Agrawala 1990), (Horwitz 1988), <ref> (Ingrand and Georgeff 1990) </ref>, (Musliner, Durfee, and Shin 1995), and (Zilberstein 1994). We feel a combination of these and other innovative ideas is required before achieving a near-optimal balance between planning time and plan quality.
Reference: <author> Liu, C. L., and Layland, J. W., </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Tests involve reading sensors; actions involve sending actuator commands or transferring data between CIRCA modules. When the AIS planner creates a TAP, it stores an associated worst-case execution time and execution deadline to enable safety guarantees. These TAP attributes are then used by a deadline-driven scheduler <ref> (Liu and Layland 1973) </ref> to create a periodic TAP schedule. If the scheduler is unable to create a schedule that supports all deadlines, the AIS backtracks to the planner, which then selects different actions.
Reference: <author> J. R. Quinlan, </author> <title> "Induction of Decision Trees," </title> <journal> Machine Learning, </journal> <volume> vol. 1, </volume> <pages> pp. 81-106, </pages> <year> 1986. </year>
Reference-contexts: Thus, once each list is completed, the planner calls the ID3 test minimization algorithm <ref> (Quinlan 1986) </ref> with that unhandled state list as the set of positive examples and a subset of the reachable states (depending on the unhandled state type) as the set of negative examples.
Reference: <author> Rosenbloom, P. S., Laird, J. E., and Newell, A., </author> <title> (eds), </title> <booktitle> The Soar Papers: Research on Integrated Intelligence, </booktitle> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Limiting Planning Time Researchers generally agree that one must restrict planner execution time, thus metalevel controlling mechanisms, such as anytime (Dean et al. 1993) and design-to-time (Garvey, Humphrey, and Lesser 1993) algorithms, have been added to impose limits on planning execution time, and learning mechanisms, such as chunking in SOAR <ref> (Rosenbloom, Laird, and Newell 1993) </ref>, have been added to increase planning execution speed.
Reference: <author> Musliner, D. J., Durfee, E. H., and Shin, K. G., </author> <title> "World Modeling for the Dynamic Construction of Real-Time Control Plans", </title> <journal> Artificial Intelligence, </journal> <volume> vol. 74, </volume> <pages> pp. 83-127, </pages> <year> 1995. </year>
Reference-contexts: Such problems led to the idea of guaranteeing execution times, particularly when reacting too slowly could result in failure. We study such problems within the context of CIRCA (Cooperative Intelligent Real-time Control Architecture) <ref> (Musliner, Durfee, and Shin 1995) </ref>, which combines a planner, scheduler, and separate real-time plan execution module to build, schedule, then execute plans with real-time guarantees of system safety. CIRCA differs from an anytime planning approach (Dean et al. 1993) in that it primarily considers execution time guarantees in its plans. <p> CIRCA minimizes its use of memory and time by expanding only states explicitly produced by transitions from initial states or their descendants. 1 Previously <ref> (Musliner, Durfee, and Shin 1995) </ref>, CIRCA contained three transition types: action, temporal, and event. Events can occur instantaneously while temporals have a nonzero delay. We now model events and temporals as temporal transitions, with differences specified using transition probabilities. <p> CIRCA continues state expansion for all other initial states and their reachable descendants until at least one goal state is found and all reachable TTFs are guaranteed to be avoided. Note that the planner is minimally satisfied with only one goal path due to tradeoffs between completeness and schedulability <ref> (Musliner, Durfee, and Shin 1995) </ref>. Thus, as shown in the figure, some reachable states (labeled "deadend") do not lead to the goal. These states are "safe" because all TTFs are preempted by actions, but the system has no chance of achieving its goals from those states. <p> Although tests used relatively simple knowledge bases, researchers demonstrated that it could plan, build schedules, and successfully reach goals while avoiding failure in several situations, including a simulated assembly line processing task with time-critical reaction to aperiodic events <ref> (Musliner, Durfee, and Shin 1995) </ref>. CIRCAs modular architecture provides a good platform for introducing state-ofthe-art planning and real-time systems technology, especially due to the metalevel architecture controlling AIS execution. <p> As planning technology progresses, more architectures employ methods for computing and adhering to planner execution time bounds, as discussed in (Dean et al. 1993), (Hendler and Agrawala 1990), (Horwitz 1988), (Ingrand and Georgeff 1990), <ref> (Musliner, Durfee, and Shin 1995) </ref>, and (Zilberstein 1994). We feel a combination of these and other innovative ideas is required before achieving a near-optimal balance between planning time and plan quality.
Reference: <author> Schoppers, M. J., </author> <title> "Universal Plans for Reactive Robots in Unpredictable Environments," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 1039-1046, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Fully automating complex systems requires the ability to reason about possible world events and react, often quickly, to sensory input. Ideally, a plan could be built to handle all possible situations, as suggested in Universal Planning work <ref> (Schoppers 1987) </ref>, but such computations are often prohibitively complex in many practical situations. Conversely, one might plan for a very small set of highly-probable states, but then many situations may not be handled at all. Automated systems impose time constraints in two ways.
Reference: <author> Zilberstein, S., </author> <title> "Real-Time Robot Deliberation by Compilation and Monitoring of Anytime Algorithms," </title> <booktitle> AAAI Conference, </booktitle> <pages> pp. 799-809, </pages> <year> 1994. </year>
Reference-contexts: As planning technology progresses, more architectures employ methods for computing and adhering to planner execution time bounds, as discussed in (Dean et al. 1993), (Hendler and Agrawala 1990), (Horwitz 1988), (Ingrand and Georgeff 1990), (Musliner, Durfee, and Shin 1995), and <ref> (Zilberstein 1994) </ref>. We feel a combination of these and other innovative ideas is required before achieving a near-optimal balance between planning time and plan quality.
References-found: 13

