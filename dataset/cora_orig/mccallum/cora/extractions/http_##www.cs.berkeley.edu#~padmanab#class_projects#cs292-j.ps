URL: http://www.cs.berkeley.edu/~padmanab/class_projects/cs292-j.ps
Refering-URL: http://www.cs.berkeley.edu/~padmanab/
Root-URL: 
Title: A Comparison of Distributed Shared Memory Systems  
Author: Venkata N. Padmanabhan Wai-tak Siu 
Abstract: CS 292J Project Report Computer Science Division University of California at Berkeley Spring 1995 Abstract Distributed shared memory (DSM) multiprocessor systems offer a cost-effective and scalable solution for a large class of scientific and numeric applications. The main idea in these systems is to use the local memories of individual processors and a fast interconnect to give the appearance of a single, large shared memory. There are several issues that must be addressed by such a system, including consistency, ownership, etc. In this study, we analyse several DSM systems that have been discussed in literature, in an objective and quantitative fashion.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brian N. Bershad, Matthew J. Zekauskas, "Midway: </author> <title> Shared Memory Parallel Programming with Entry Consistency for Distributed Memory Multiprocessors", </title> <institution> School of Computer Science, Carnegie Mellon University, Tech. Report CMU-CS-91-170, </institution> <month> September </month> <year> 1991 </year>
Reference-contexts: This makes the DSM look very much like a single memory. Others systems, such as Munin [3] and Midway <ref> [1] </ref>, take advantage of the inherent synchronization in real programs, and support a weaker consistency model at the DSM level. This results in improved performance in some cases, though it makes programming harder. Thus, there exists a tradeoff between performance and consistency. <p> The difference is that in the lazy algorithm, updates or invalidations are not sent by the process which makes the updates until another process requests the lock of the data that was updated. 2.4 Midway Midway <ref> [1] </ref> is a shared memory parallel programming system which tries to address the problem of excessive communication in a distributed memory multiprocessor.
Reference: [2] <author> William J. Bolosky, Robert P. Fitzgerald, Michael L. Scott, </author> <title> "Simple but Effective Techniques for NUMA Memory Management," </title> <booktitle> Proceedings of the 12th Symposium on Operating System Principles, </booktitle> <pages> pp. 19-31, </pages> <month> December </month> <year> 1989 </year> <month> 12 </month>
Reference: [3] <author> John B. Carter, John K. Bennett, Willy Zwaenepoel, </author> <title> "Implementation and Performance of Munin," </title> <journal> Operating Systems Review, </journal> <volume> Vol. 25, No. 5, </volume> <pages> pp. 152-64, </pages> <year> 1991 </year>
Reference-contexts: This makes the DSM look very much like a single memory. Others systems, such as Munin <ref> [3] </ref> and Midway [1], take advantage of the inherent synchronization in real programs, and support a weaker consistency model at the DSM level. This results in improved performance in some cases, though it makes programming harder. Thus, there exists a tradeoff between performance and consistency. <p> The site with the most recent copy of the page is designated as the clock site for that page, named so because of a clock mechanism used to guarantee the readers or the current writer a time window of uninterruptible possession of the page. 2 2.3 Munin Munin <ref> [3] </ref> is a highly flexible distributed shared memory system built at Rice University. It uses a release consistency model which classifies each shared memory access as either a synchronization access (a release or an acquire) or an ordinary access.
Reference: [4] <author> Sandhya Dwarkadas, Pete Keleher, Alan L. Cox, Willy Zwaenepoel, </author> <title> "Evaluation of Release Consistent Software Distributed Shared Memory on Emerging Network Technology," </title> <booktitle> Proceedings of the 20th Annual International Sysmposium on Computer Architecture, </booktitle> <pages> pp. 144-155, </pages> <month> May </month> <year> 1993 </year>
Reference-contexts: The programmer could specify the protocol parameters (such as type of ownership, whether delayed operations were allowed etc.) and sharing annotations (such as read-only, producer-consumer, write-shared etc.) on a per-object basis. In constrast to Munin, which uses an eager release consistency algorithm, in <ref> [4] </ref>, the lazy release consistency scheme is proposed by the authors of Munin.
Reference: [5] <author> Brett D. Fleisch, Gerald J. Popek, </author> <title> "Mirage: A coherent distributed shared memory design," </title> <booktitle> Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 211-23, </pages> <month> De-cember </month> <year> 1989 </year>
Reference-contexts: Some issues include the model of consistency, the ownership policy for shared data, the granularity of sharing, etc. Some systems, such as IVY [8] and Mirage <ref> [5] </ref>, use a sequential consistency model that is "strict" in the sense that either the data accessed by a thread on a processor is up-to-date, or there is a miss (which causes the latest copy of the data to be fetched). <p> IVY uses a dynamic ownership scheme which requires each site to keep track of the probable owner of a page, and also use forwarding in cases where the probable owner information is not correct. The prototype was implemented outside the kernel, with application-level code. 2.2 Mirage Mirage <ref> [5] </ref>, a distibuted shared memory system, was built at UCLA with the goal of maintaining upward compatibility with an existing shared memory interface for uniprocessor systems. They chose the System V model of shared memory for this purpose and built the system in the kernel.
Reference: [6] <author> Kourosh Gharachorloo, Daniel Lenoski, James Laudon, Phillip Gibbons, Anoop Gupta, John Hennessey, </author> <title> "Memory Consistency and Event Ordering in scalable Shared-memory Multiprocessors," </title> <booktitle> Proceedings of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 15-26, </pages> <month> May </month> <year> 1990 </year>
Reference: [7] <author> Kourosh Gharachorloo, Anoop Gupta, John Hennessey, </author> <title> "Performance Evaluations of Memory Consistency Models for Shared-memory Multiprocessors," </title> <booktitle> Proceedings of the 4th International Conference Architectural Support for Programming Languages and Systems, </booktitle> <month> April </month> <year> 1991 </year>
Reference: [8] <author> Kai Li, </author> <title> "Shared Virtual Memory on Loosely Coupled Multiprocessors," </title> <type> Ph.D. dissertation, </type> <institution> Dept. of Computer Science, Yale University; also Tech. Report YALEU-RR-492, </institution> <month> October </month> <year> 1986 </year>
Reference-contexts: There are a number of issues that a DSM system must address, and the choices made affect the nature and performance of the system. Some issues include the model of consistency, the ownership policy for shared data, the granularity of sharing, etc. Some systems, such as IVY <ref> [8] </ref> and Mirage [5], use a sequential consistency model that is "strict" in the sense that either the data accessed by a thread on a processor is up-to-date, or there is a miss (which causes the latest copy of the data to be fetched).
Reference: [9] <author> Kai Li, Paul Hudak, </author> <title> "Memory Coherence in Shared Virtual Memory Systems," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 7, No. 4, </volume> <month> November </month> <year> 1989 </year> <month> 13 </month>
Reference-contexts: Each page has a current manager, and also a current owner (who is the last writer to the page). Unless the local processor owns the page, a managing site must be inquired before a write can occur. <ref> [9] </ref> reports experiments with a variety of choices for managing pages, including a centralized manager, fixed distributed manager, and dynamic distributed manager.
References-found: 9

