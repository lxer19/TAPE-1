URL: ftp://ftp.eecs.umich.edu/groups/gasm/vhdlports.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Title: FORMAL DEFINITION OF AN ABSTRACT VHDL'93 SIMULATOR BY EA-MACHINES  
Author: Egon Borger Uwe Glasser flfl Wolfgang Muller flflfl 
Address: Germany  
Affiliation: Dipartimento di Informatica, Universita di Pisa, Pisa, Italy flfl Heinz Nixdorf Institut, Universitat-GH Paderborn, Paderborn, Germany flflfl Cadlab, Universitat-GH Paderborn, Paderborn,  
Abstract: We present a rigorous but transparent semantic definition for VHDL corresponding to the IEEE VHDL'93 standard. Our definition covers the full behavior of signal and variable assignments as well as the behavior of the various wait statements including delta, time, and postponed cycles. We consider explicitly declared signals, ports, local variables, and shared variables. Our specification defines an abstract VHDL'93 interpreter which comes in the form of transition rules for evolving algebra machines (EA-Machines) [18]. It faithfully reflects and supports the view given in the IEEE VHDL'93 standard language reference manual. The definition can be understood without any prior formal training. We outline our definition running a VHDL program. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Bayol, B. Soulas, F. Corno, P. Prinetto, and D. Borrione. </author> <title> A process algebra interpretation of a verification oriented overlanguage of vhdl. In EURO-DAC'94/EURO-VHDL'94. </title> <publisher> IEEE CS Press, </publisher> <year> 1994. </year>
Reference-contexts: Russinoff [30] presents a mathematical definition of a hardware description language in terms of Boyer-Moore Logic admitting a semantics-preserving translation to a subset of VHDL'87. A process algebra approach is presented by Bayol et al. in <ref> [1] </ref> translating a verification oriented VHDL (VOVHDL) into CCS for CCS-based verification. VOVHDL is an overlanguage of VHDL dedicated to specify the communication of processes at system level. A different algebra approach in the context of the functional specification methodology FOCUS can be found in [16].
Reference: [2] <editor> J.-M. Berge, A. Fonkoua, S. Maginot, and J. Rouillard. VHDL'92. </editor> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, Netherlands, </address> <year> 1993. </year>
Reference-contexts: 1 INTRODUCTION An approach to the definition of a formal semantics of the IEEE Std-1076 hardware description language VHDL'87 [33], as well as of the recently published VHDL'93 1 <ref> [34, 2, 22] </ref>, is of great interest for hardware design and verification [5, 37].
Reference: [3] <author> E. Borger, U. Glasser, and W. Muller. </author> <title> The semantics of behavioral VHDL'93 descriptions. In EURO-DAC'94/EURO-VHDL'94. </title> <publisher> IEEE CS Press, </publisher> <year> 1994. </year>
Reference-contexts: The definition covers the interaction of the simulation kernel process with the user defined processes, their suspension and resumption. We consider variables, explicitly declared signals, and ports including their driving, effective, and current values. Thus, this chapter is a continuation of the work presented in <ref> [3] </ref>. Out of the complete set of all syntactically correct VHDL statements we restrict attention to those which characterize VHDL and whose behavioral semantics Definition of VHDL'93 by EA-Machines 3 is non-trivial. For example, we ignore features such as generics and component instantiations.
Reference: [4] <author> E. Borger, U. Glasser, and W. Muller. </author> <title> Formal definition of an abstract VHDL'93 simulator by EA-Machines. </title> <editor> In C. Delgado Kloos and P. T. Breuer, editors, </editor> <title> Formal Semantics For VHDL. </title> <publisher> Kluwer, </publisher> <address> Boston/London/Dordrecht, </address> <year> 1995. </year>
Reference-contexts: A different algebra approach in the context of the functional specification methodology FOCUS can be found in [16]. Therein, Fuchs and Mendler define the semantics for delta-delay VHDL'87 by a transla 2 This example was given by the editor in <ref> [4] </ref>. 4 Chapter 1 tion to streams and stream-processing functions. They investigate VHDL from an abstract point of view without considering the underlying simulator. Davis [13] has introduced a denotational semantics of the VHDL simulation cycle by the use of an intermediate language derived from a limited behavioral VHDL'87 subset. <p> Since our definition presumes elaborated VHDL we run the simulation on the elaborated model in Appendix A of the VHDL program in Appendix B. 21 By 21 This example was given by the editor in <ref> [4] </ref>. 26 Chapter 1 this elaboration, component instantiations are transformed into hierarchical blocks, concurrent signal assignments are transformed into process statements, and positional port associations are transformed into named port associations. Additionally, each block and process is given a label.
Reference: [5] <author> D. Borrione, H. Eveking, and L. Pierre. </author> <title> Formal proofs from HDL descriptions. </title> <editor> In J.P. Mermet, editor, </editor> <title> Fundamentals and Standards in Hardware Description Languages. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, Nether-lands, </address> <year> 1993. </year>
Reference-contexts: 1 INTRODUCTION An approach to the definition of a formal semantics of the IEEE Std-1076 hardware description language VHDL'87 [33], as well as of the recently published VHDL'93 1 [34, 2, 22], is of great interest for hardware design and verification <ref> [5, 37] </ref>. For general hardware design, formal models are of great interest for a formal comparison of hardware descriptions which may be represented by different means, e.g., different hardware description languages such as VHDL, M, UDL/I, 1 This standard is also known as VHDL'92 1 2 Chapter 1 and Verilog. <p> Borrione and Paillet [6] have investigated the semantics of a VHDL'87 subset in terms of a functional model. Salem in [31] defines evaluation functions based on the VHDL'87 subset P-VHDL which has been identified for formal verification in PREVAIL <ref> [32, 5] </ref>. A definition of a subset of VHDL'87 semantics in terms of Boyer-Moore Logic is presented by Read and Edwards in [27]. Russinoff [30] presents a mathematical definition of a hardware description language in terms of Boyer-Moore Logic admitting a semantics-preserving translation to a subset of VHDL'87.
Reference: [6] <author> D. Borrione and J.L. Paillet. </author> <title> An approach to the formal verification of VHDL descriptions. </title> <type> Technical Report 683-I, </type> <institution> IMAG/ARTEMIS, Grenoble, </institution> <year> 1987. </year>
Reference-contexts: They use temporal logic, functional semantics, denotational semantics and operational semantics, mainly applying Boyer-Moore Logic, Process Algebras, Petri-Nets, etc. Borrione and Paillet <ref> [6] </ref> have investigated the semantics of a VHDL'87 subset in terms of a functional model. Salem in [31] defines evaluation functions based on the VHDL'87 subset P-VHDL which has been identified for formal verification in PREVAIL [32, 5].
Reference: [7] <author> P.T. Breuer, L. Sanchez, and C. </author> <title> Delgado Kloos. Clean formal semantics for VHDL. </title> <booktitle> In European Design and Test Conference '94, </booktitle> <year> 1994. </year>
Reference-contexts: Davis [13] has introduced a denotational semantics of the VHDL simulation cycle by the use of an intermediate language derived from a limited behavioral VHDL'87 subset. Breuer et al. define a functional and denotational semantics of the relevant behavioral VHDL'87 statements in <ref> [7, 8] </ref>. Progress in the definition of a denotational semantics can be found in [9]. [10] represents the continuation of their work. A detailed structural operational semantics of a VHDL'87 subset, i.e., Femto-VHDL, for HOL verification is presented by Van Tassel in [35] (see also [36]).
Reference: [8] <author> P.T. Breuer, L. Sanchez, and C. </author> <title> Delgado Kloos. Hard models for hardware: relating functional and denotational semantics for VHDL. </title> <booktitle> In PROCOMET '94, </booktitle> <year> 1994. </year> <note> Submitted preliminary version. </note>
Reference-contexts: Davis [13] has introduced a denotational semantics of the VHDL simulation cycle by the use of an intermediate language derived from a limited behavioral VHDL'87 subset. Breuer et al. define a functional and denotational semantics of the relevant behavioral VHDL'87 statements in <ref> [7, 8] </ref>. Progress in the definition of a denotational semantics can be found in [9]. [10] represents the continuation of their work. A detailed structural operational semantics of a VHDL'87 subset, i.e., Femto-VHDL, for HOL verification is presented by Van Tassel in [35] (see also [36]).
Reference: [9] <author> P.T. Breuer, L. Sanchez Fernandez, and C. </author> <title> Delgado Kloos. Proof theory and a validation condition generator for VHDL. In EURO-DAC'94/EURO-VHDL'94. </title> <publisher> IEEE CS Press, </publisher> <year> 1994. </year>
Reference-contexts: Breuer et al. define a functional and denotational semantics of the relevant behavioral VHDL'87 statements in [7, 8]. Progress in the definition of a denotational semantics can be found in <ref> [9] </ref>. [10] represents the continuation of their work. A detailed structural operational semantics of a VHDL'87 subset, i.e., Femto-VHDL, for HOL verification is presented by Van Tassel in [35] (see also [36]). Damm et al. define the semantics of VHDL'87 through interpreted Petri-Nets [11].
Reference: [10] <author> T. Breuer, L. Sanchez Fernandez, and C. </author> <title> Delgado Kloos. A functional semantics for macro-time VHDL. </title> <editor> In C. Delgado Kloos and P. T. Breuer, editors, </editor> <title> Formal Semantics For VHDL. </title> <publisher> Kluwer, </publisher> <address> Boston/London/Dordrecht, </address> <year> 1995. </year>
Reference-contexts: Breuer et al. define a functional and denotational semantics of the relevant behavioral VHDL'87 statements in [7, 8]. Progress in the definition of a denotational semantics can be found in [9]. <ref> [10] </ref> represents the continuation of their work. A detailed structural operational semantics of a VHDL'87 subset, i.e., Femto-VHDL, for HOL verification is presented by Van Tassel in [35] (see also [36]). Damm et al. define the semantics of VHDL'87 through interpreted Petri-Nets [11].
Reference: [11] <author> W. Damm, B. Josko, and R. Schloer. </author> <title> A net-based semantics for VHDL. In EURO-DAC'93/EURO-VHDL'93. </title> <publisher> IEEE CS Press, </publisher> <year> 1993. </year> <title> Definition of VHDL'93 by EA-Machines 35 </title>
Reference-contexts: A detailed structural operational semantics of a VHDL'87 subset, i.e., Femto-VHDL, for HOL verification is presented by Van Tassel in [35] (see also [36]). Damm et al. define the semantics of VHDL'87 through interpreted Petri-Nets <ref> [11] </ref>. In [12] detailed structural operational semantics is defined based on transition systems and used for formal verification against timing diagrams given by a linear first-order logic [12]. The formal verification is embedded in a hardware design environment which supports an extension of VHDL'87 (VHDL/S) for high-level design.
Reference: [12] <author> W. Damm, B. Josko, and R. Schloer. </author> <title> Specification and verification of VHDL-based system-level hardware designs. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, Oxford, </publisher> <year> 1994. </year> <note> to appear. </note>
Reference-contexts: A detailed structural operational semantics of a VHDL'87 subset, i.e., Femto-VHDL, for HOL verification is presented by Van Tassel in [35] (see also [36]). Damm et al. define the semantics of VHDL'87 through interpreted Petri-Nets [11]. In <ref> [12] </ref> detailed structural operational semantics is defined based on transition systems and used for formal verification against timing diagrams given by a linear first-order logic [12]. The formal verification is embedded in a hardware design environment which supports an extension of VHDL'87 (VHDL/S) for high-level design. <p> Damm et al. define the semantics of VHDL'87 through interpreted Petri-Nets [11]. In <ref> [12] </ref> detailed structural operational semantics is defined based on transition systems and used for formal verification against timing diagrams given by a linear first-order logic [12]. The formal verification is embedded in a hardware design environment which supports an extension of VHDL'87 (VHDL/S) for high-level design. Work on interval temporal logic on a VHDL'87 subset was introduced by Wilsey in [38].
Reference: [13] <author> K.C. Davis. </author> <title> A denotational definition of the VHDL simulation kernel. In Computer Hardware Description Languages and their Application, </title> <booktitle> Ams-terdam, 1993. </booktitle> <publisher> North-Holland. </publisher>
Reference-contexts: Therein, Fuchs and Mendler define the semantics for delta-delay VHDL'87 by a transla 2 This example was given by the editor in [4]. 4 Chapter 1 tion to streams and stream-processing functions. They investigate VHDL from an abstract point of view without considering the underlying simulator. Davis <ref> [13] </ref> has introduced a denotational semantics of the VHDL simulation cycle by the use of an intermediate language derived from a limited behavioral VHDL'87 subset. Breuer et al. define a functional and denotational semantics of the relevant behavioral VHDL'87 statements in [7, 8].
Reference: [14] <author> A. Debreil and Ph. Oddo. </author> <title> Synchronous designs in VHDL. In EURO-DAC'93/EURO-VHDL'93. </title> <publisher> IEEE CS Press, </publisher> <year> 1993. </year>
Reference-contexts: For the specific domain of VHDL, formal verification approaches typically deal with subsets of VHDL'87 since the domain of application is generally restricted to deterministic synchronous sequential circuits clocked by a single clock including the possibilities of resynchronization and asynchronous parts <ref> [15, 14] </ref>. It is not obvious to identify the relationship between the official VHDL IEEE standard and the subsets formalized for hardware verification since the standard language reference manual gives a natural language definition of the fairly complex behavioral semantics of VHDL.
Reference: [15] <author> H. Eveking. </author> <title> (V)HDL-based verification of heterogeneous synchronous/asynchronous systems. In EURO-DAC'94/EURO-VHDL'94. </title> <publisher> IEEE CS Press, </publisher> <year> 1994. </year>
Reference-contexts: For the specific domain of VHDL, formal verification approaches typically deal with subsets of VHDL'87 since the domain of application is generally restricted to deterministic synchronous sequential circuits clocked by a single clock including the possibilities of resynchronization and asynchronous parts <ref> [15, 14] </ref>. It is not obvious to identify the relationship between the official VHDL IEEE standard and the subsets formalized for hardware verification since the standard language reference manual gives a natural language definition of the fairly complex behavioral semantics of VHDL.
Reference: [16] <author> M. Fuchs and M. Mendler. </author> <title> Functional semantics for delta-delay VHDL based on FOCUS. </title> <editor> In C. Delgado Kloos and P. T. Breuer, editors, </editor> <title> Formal Semantics For VHDL. </title> <publisher> Kluwer, </publisher> <address> Boston/London/Dordrecht, </address> <year> 1995. </year>
Reference-contexts: VOVHDL is an overlanguage of VHDL dedicated to specify the communication of processes at system level. A different algebra approach in the context of the functional specification methodology FOCUS can be found in <ref> [16] </ref>. Therein, Fuchs and Mendler define the semantics for delta-delay VHDL'87 by a transla 2 This example was given by the editor in [4]. 4 Chapter 1 tion to streams and stream-processing functions. They investigate VHDL from an abstract point of view without considering the underlying simulator.
Reference: [17] <author> Y. Gurevich. </author> <title> Evolving algebras a tutorial introduction. </title> <journal> In Bulletin of the EATCS, </journal> <volume> volume 43, </volume> <pages> pages 264-284. </pages> <note> EATCS, </note> <year> 1991. </year>
Reference-contexts: Our rigorous definition of the VHDL'93 simulator covers full elaborated VHDL including the new features of postponed processes, rejection pulse limit, and shared variables [34]. We represent a detailed formal investigation of the VHDL'93 language reference manual in terms of Gurevich's (distributed) EA-Machines, also called distributed evolving algebras (EAs) <ref> [17, 18] </ref>. The definition covers the interaction of the simulation kernel process with the user defined processes, their suspension and resumption. We consider variables, explicitly declared signals, and ports including their driving, effective, and current values. Thus, this chapter is a continuation of the work presented in [3]. <p> This permits to tailor the operational view to any desired level of abstraction. In the case of VHDL this gives us the possibility to define our model along the lines of the standard language reference manual. 3 EA-MACHINES Gurevich introduced EA-Machines in <ref> [17, 18] </ref>, called there Evolving algebras. EA-Machines can be understood as `pseudocode over abstract data', without any particular theoretical prerequisites. In order to make this chapter self-contained, we list here however the basic definition and refer for a rigorous formalization to [17, 18]. <p> language reference manual. 3 EA-MACHINES Gurevich introduced EA-Machines in <ref> [17, 18] </ref>, called there Evolving algebras. EA-Machines can be understood as `pseudocode over abstract data', without any particular theoretical prerequisites. In order to make this chapter self-contained, we list here however the basic definition and refer for a rigorous formalization to [17, 18]. The abstract data come as elements of (possibly not furthermore specified) sets (domains and universes) which we denote by capitalized words. The operations allowed on universes are represented by partial functions. <p> In order to express that a user defined process P can be executed only when it is not suspended and when all processes of the same type as P are enabled to execute, we use the following abbreviation: 7 An external function in the sense of <ref> [17] </ref> is a function which is not updated by the rules of the system under consideration; nevertheless such a function might be updated by the environment and thus represents a precise interface for the system.
Reference: [18] <author> Y. Gurevich. </author> <title> Evolving algebra 1993: Lipari guide. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, Oxford, </publisher> <year> 1994. </year>
Reference-contexts: Our rigorous definition of the VHDL'93 simulator covers full elaborated VHDL including the new features of postponed processes, rejection pulse limit, and shared variables [34]. We represent a detailed formal investigation of the VHDL'93 language reference manual in terms of Gurevich's (distributed) EA-Machines, also called distributed evolving algebras (EAs) <ref> [17, 18] </ref>. The definition covers the interaction of the simulation kernel process with the user defined processes, their suspension and resumption. We consider variables, explicitly declared signals, and ports including their driving, effective, and current values. Thus, this chapter is a continuation of the work presented in [3]. <p> This permits to tailor the operational view to any desired level of abstraction. In the case of VHDL this gives us the possibility to define our model along the lines of the standard language reference manual. 3 EA-MACHINES Gurevich introduced EA-Machines in <ref> [17, 18] </ref>, called there Evolving algebras. EA-Machines can be understood as `pseudocode over abstract data', without any particular theoretical prerequisites. In order to make this chapter self-contained, we list here however the basic definition and refer for a rigorous formalization to [17, 18]. <p> language reference manual. 3 EA-MACHINES Gurevich introduced EA-Machines in <ref> [17, 18] </ref>, called there Evolving algebras. EA-Machines can be understood as `pseudocode over abstract data', without any particular theoretical prerequisites. In order to make this chapter self-contained, we list here however the basic definition and refer for a rigorous formalization to [17, 18]. The abstract data come as elements of (possibly not furthermore specified) sets (domains and universes) which we denote by capitalized words. The operations allowed on universes are represented by partial functions. <p> For this purpose we use distributed EA-Machines. 4 They are given by a finite number of modules each of which is assigned to a finite number of agents. For details we refer to <ref> [18] </ref>; in this context it is sufficient to say that each module is a sequential EA-Machine which is executed concurrently by the agents with which it is associated. Thus, a distributed EA-Machine can be seen as the definition of a set of concurrently running agents.
Reference: [19] <institution> Japan Electronic Industry Development Association. UDL/I Language Reference Manual|Version 2.0.3, </institution> <month> September 16 </month> <year> 1993. </year> <title> Translation from the Japanese Language Reference Manual. </title>
Reference-contexts: Additional investigations in deriving an implementation of a VHDL simulator might be sensible since most of the syntactical representation of our EA-Machines should be easily implementable. Due to the inherent parallelism of EA-Machines a distributed implementation might be achieved. Further work will concentrate on a specification of UDL/I <ref> [19] </ref> with the ultimate goal to close the formal gap between VHDL's simulation-oriented semantics and UDL/I's hardware-oriented semantics for language comparison. As a first step we have to investigate implicit signals within our VHDL specification. Acknowledgements We would like to thank Peter T.
Reference: [20] <author> B. H. Levy, I. V. Filippenko, L. G. Marcus, and T. K. Menas. </author> <title> Using the state delta verification system (SDVS) for hardware verification. </title> <booktitle> In IFIP TC10/WG 10.2 International Conference on Theorem Provers in Circuit Design: Theory, Practice and Experience, </booktitle> <pages> pages 337-360. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: Reetz and Kropf provide a flowgraph semantics to VHDL'87 descriptions in order to facilitate the embedding of VHDL in high order logic [28] (see also [29]). Work by Marcus and Levy [21] (Core VHDL) and Levy et al. <ref> [20] </ref> considers formal verification in the context of the state delta verification system (SDVS). The internal logic (state delta logic) is a variant of temporal logic specifically tailored to be amenable to descriptions of computations and to proofs by symbolic execution.
Reference: [21] <author> L. G. Marcus and B. H. Levy. </author> <title> Specifying and proving core VHDL descriptions in the state delta verification system (SDVS). </title> <type> Technical Report ATR-89(4778)-5, </type> <institution> The Aerospace Corporation, </institution> <year> 1989. </year>
Reference-contexts: Work on interval temporal logic on a VHDL'87 subset was introduced by Wilsey in [38]. Reetz and Kropf provide a flowgraph semantics to VHDL'87 descriptions in order to facilitate the embedding of VHDL in high order logic [28] (see also [29]). Work by Marcus and Levy <ref> [21] </ref> (Core VHDL) and Levy et al. [20] considers formal verification in the context of the state delta verification system (SDVS). The internal logic (state delta logic) is a variant of temporal logic specifically tailored to be amenable to descriptions of computations and to proofs by symbolic execution.
Reference: [22] <editor> P.J. Menchini. VHDL. In J.P. Mermet, editor, </editor> <title> Fundamentals and Standards in Hardware Description Languages. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, Netherlands, </address> <year> 1993. </year> <note> 36 Chapter 1 </note>
Reference-contexts: 1 INTRODUCTION An approach to the definition of a formal semantics of the IEEE Std-1076 hardware description language VHDL'87 [33], as well as of the recently published VHDL'93 1 <ref> [34, 2, 22] </ref>, is of great interest for hardware design and verification [5, 37]. <p> The root of a net is a signal whose value has to be determined. Inner nodes are either associated with a signal or a resolution function; the leaves are given by drivers. The edges represent the signal-source relationships where a type conversion function may be assigned to each edge <ref> [22] </ref>. When computing new driving and new effective values, only active signals are considered.
Reference: [23] <author> W. Mueller. </author> <title> Approaching the denotational semantics of behavioral VHDL92 descriptions. </title> <booktitle> In First Asian Pacific Conference on Hardware Description Languages, Standards & Applications, </booktitle> <year> 1993. </year>
Reference-contexts: The specifications and claims of correctness are written in the state delta language which is a large subset of ISPS, Ada, and VHDL'87. Muller introduces a modular framework defining a High-Level Semantics of behavioral VHDL'93 <ref> [23] </ref>. Therein the static semantics of TINY-VHDL is sketched by denotational means whereas the dynamic simulation semantics is sketched by partially ordered events which define Petri-Net-like structures. Olcoz and Colom introduce a translation of full elaborated VHDL'87 to Colored Petri-Nets in [24].
Reference: [24] <author> S. Olcoz and J.M. Colom. </author> <title> Toward a Formal Semantics of IEEE Std. VHDL 1076. In EURO-VHDL/EURO-DAC'93. </title> <publisher> IEEE CS Press, </publisher> <year> 1993. </year>
Reference-contexts: Therein the static semantics of TINY-VHDL is sketched by denotational means whereas the dynamic simulation semantics is sketched by partially ordered events which define Petri-Net-like structures. Olcoz and Colom introduce a translation of full elaborated VHDL'87 to Colored Petri-Nets in <ref> [24] </ref>. In [25, 26] they provide detailed investigations of the VHDL'87 simulation cycle. In [26] they give a classification into three se-mantical layers: syntax checking and design library building, elaboration, and execution. Definition of VHDL'93 by EA-Machines 5 Our formal specification comes in the form of (distributed) EA-Machines.
Reference: [25] <author> S. Olcoz and J.M. Colom. </author> <title> VHDL through the looking glass. </title> <booktitle> In VHDL-FORUM, </booktitle> <year> 1993. </year>
Reference-contexts: Therein the static semantics of TINY-VHDL is sketched by denotational means whereas the dynamic simulation semantics is sketched by partially ordered events which define Petri-Net-like structures. Olcoz and Colom introduce a translation of full elaborated VHDL'87 to Colored Petri-Nets in [24]. In <ref> [25, 26] </ref> they provide detailed investigations of the VHDL'87 simulation cycle. In [26] they give a classification into three se-mantical layers: syntax checking and design library building, elaboration, and execution. Definition of VHDL'93 by EA-Machines 5 Our formal specification comes in the form of (distributed) EA-Machines.
Reference: [26] <author> S. Olcoz and J.M. Colom. </author> <title> The discrete event simulation semantics of VHDL. </title> <booktitle> In International Conference on Simulation and Hardware Description Languages, </booktitle> <address> San Diego, CA, </address> <year> 1994. </year> <month> SCSI. </month>
Reference-contexts: Therein the static semantics of TINY-VHDL is sketched by denotational means whereas the dynamic simulation semantics is sketched by partially ordered events which define Petri-Net-like structures. Olcoz and Colom introduce a translation of full elaborated VHDL'87 to Colored Petri-Nets in [24]. In <ref> [25, 26] </ref> they provide detailed investigations of the VHDL'87 simulation cycle. In [26] they give a classification into three se-mantical layers: syntax checking and design library building, elaboration, and execution. Definition of VHDL'93 by EA-Machines 5 Our formal specification comes in the form of (distributed) EA-Machines. <p> Olcoz and Colom introduce a translation of full elaborated VHDL'87 to Colored Petri-Nets in [24]. In [25, 26] they provide detailed investigations of the VHDL'87 simulation cycle. In <ref> [26] </ref> they give a classification into three se-mantical layers: syntax checking and design library building, elaboration, and execution. Definition of VHDL'93 by EA-Machines 5 Our formal specification comes in the form of (distributed) EA-Machines. EA-Machine specifications combine the advantages of the operational and the functional approach to semantics. <p> Before resuming processes and executing them, the signal changes have to be propagated through the design hierarchy (blocks) by computing the driving, effective, and current values of the relevant (active) signals (see also <ref> [26] </ref>). The VHDL'93 LRM x12.6.4 defines the initialization phase which has to be performed prior to the first simulation cycle. <p> P7: WAIT FOREVER if P rocess does h WAITi then suspended (P rocess) := true 4.3 The Kernel Process The kernel is an agent the execution of which is enabled as soon as all user defined processes are suspended (see also Figure 1 and <ref> [26] </ref>).
Reference: [27] <author> S. Read and M. Edwards. </author> <title> A formal semantics of VHDL in Boyer-Moore logic. </title> <booktitle> In 2nd International Conference on Concurrent Engineering & EDA, </booktitle> <address> San Diego, CA, </address> <year> 1994. </year> <month> SCSI. </month>
Reference-contexts: Salem in [31] defines evaluation functions based on the VHDL'87 subset P-VHDL which has been identified for formal verification in PREVAIL [32, 5]. A definition of a subset of VHDL'87 semantics in terms of Boyer-Moore Logic is presented by Read and Edwards in <ref> [27] </ref>. Russinoff [30] presents a mathematical definition of a hardware description language in terms of Boyer-Moore Logic admitting a semantics-preserving translation to a subset of VHDL'87. A process algebra approach is presented by Bayol et al. in [1] translating a verification oriented VHDL (VOVHDL) into CCS for CCS-based verification.
Reference: [28] <author> R. Reetz and Th. Kropf. </author> <title> Simplifying deep embedding: A formalised code generator. In International Workshop on High Order Logic Theorem Proving and its Applications. </title> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Work on interval temporal logic on a VHDL'87 subset was introduced by Wilsey in [38]. Reetz and Kropf provide a flowgraph semantics to VHDL'87 descriptions in order to facilitate the embedding of VHDL in high order logic <ref> [28] </ref> (see also [29]). Work by Marcus and Levy [21] (Core VHDL) and Levy et al. [20] considers formal verification in the context of the state delta verification system (SDVS).
Reference: [29] <author> R. Reetz and Th. Kropf. </author> <title> Correct system level design with VHDL. </title> <editor> In C. Delgado Kloos and P. T. Breuer, editors, </editor> <title> Formal Semantics For VHDL. </title> <publisher> Kluwer, </publisher> <address> Boston/London/Dordrecht, </address> <year> 1995. </year>
Reference-contexts: Work on interval temporal logic on a VHDL'87 subset was introduced by Wilsey in [38]. Reetz and Kropf provide a flowgraph semantics to VHDL'87 descriptions in order to facilitate the embedding of VHDL in high order logic [28] (see also <ref> [29] </ref>). Work by Marcus and Levy [21] (Core VHDL) and Levy et al. [20] considers formal verification in the context of the state delta verification system (SDVS).
Reference: [30] <author> D.M. Russinoff. </author> <title> Specification and verification of gate-level VHDL models of synchronous and asynchronous circuits. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, Oxford, </publisher> <year> 1994. </year>
Reference-contexts: Salem in [31] defines evaluation functions based on the VHDL'87 subset P-VHDL which has been identified for formal verification in PREVAIL [32, 5]. A definition of a subset of VHDL'87 semantics in terms of Boyer-Moore Logic is presented by Read and Edwards in [27]. Russinoff <ref> [30] </ref> presents a mathematical definition of a hardware description language in terms of Boyer-Moore Logic admitting a semantics-preserving translation to a subset of VHDL'87. A process algebra approach is presented by Bayol et al. in [1] translating a verification oriented VHDL (VOVHDL) into CCS for CCS-based verification.
Reference: [31] <author> A. Salem. </author> <title> Verification formelle des circuits digitaux decrits en VHDL. </title> <type> PhD thesis, </type> <institution> Universite Joseph Fourier, Grenoble, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: They use temporal logic, functional semantics, denotational semantics and operational semantics, mainly applying Boyer-Moore Logic, Process Algebras, Petri-Nets, etc. Borrione and Paillet [6] have investigated the semantics of a VHDL'87 subset in terms of a functional model. Salem in <ref> [31] </ref> defines evaluation functions based on the VHDL'87 subset P-VHDL which has been identified for formal verification in PREVAIL [32, 5]. A definition of a subset of VHDL'87 semantics in terms of Boyer-Moore Logic is presented by Read and Edwards in [27].
Reference: [32] <author> A. Salem and D. Borrione. </author> <title> Formal semantics of VHDL timing constructs. </title> <editor> In J.P. Mermet, editor, </editor> <title> VHDL for simulation, synthesis, and formal proof. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> London, </address> <year> 1993. </year>
Reference-contexts: Borrione and Paillet [6] have investigated the semantics of a VHDL'87 subset in terms of a functional model. Salem in [31] defines evaluation functions based on the VHDL'87 subset P-VHDL which has been identified for formal verification in PREVAIL <ref> [32, 5] </ref>. A definition of a subset of VHDL'87 semantics in terms of Boyer-Moore Logic is presented by Read and Edwards in [27]. Russinoff [30] presents a mathematical definition of a hardware description language in terms of Boyer-Moore Logic admitting a semantics-preserving translation to a subset of VHDL'87.
Reference: [33] <institution> The Institute of Electrical and Electronics Engineers, </institution> <address> New York, NY, USA. </address> <note> IEEE Standard VHDL Language Reference Manual-IEEE Std 1076-1987, </note> <year> 1988. </year> <title> Order Code SH11957. </title>
Reference-contexts: 1 INTRODUCTION An approach to the definition of a formal semantics of the IEEE Std-1076 hardware description language VHDL'87 <ref> [33] </ref>, as well as of the recently published VHDL'93 1 [34, 2, 22], is of great interest for hardware design and verification [5, 37]. <p> For this the reader is referred to the glossary of <ref> [33, 34] </ref>. In this section we first introduce the basic concepts for defining the simulator. Thereafter we present the formal definition of various statements, i.e., variable assignment, signal assignment, and wait statements.
Reference: [34] <institution> The Institute of Electrical and Electronics Engineers, </institution> <address> New York, NY, USA. </address> <note> IEEE Standard VHDL Language Reference Manual-IEEE Std 1076-1993, </note> <year> 1994. </year> <title> Order Code SH16840. Definition of VHDL'93 by EA-Machines 37 </title>
Reference-contexts: 1 INTRODUCTION An approach to the definition of a formal semantics of the IEEE Std-1076 hardware description language VHDL'87 [33], as well as of the recently published VHDL'93 1 <ref> [34, 2, 22] </ref>, is of great interest for hardware design and verification [5, 37]. <p> Our definition provides the VHDL expert with a precise model of VHDL'93 along the lines of the IEEE standard reference manual <ref> [34] </ref>. Once having reached an understanding of the basic concepts of distributed EA-Machines our model may also serve as an introduction to the new concepts of VHDL'93 for VHDL users. <p> Our rigorous definition of the VHDL'93 simulator covers full elaborated VHDL including the new features of postponed processes, rejection pulse limit, and shared variables <ref> [34] </ref>. We represent a detailed formal investigation of the VHDL'93 language reference manual in terms of Gurevich's (distributed) EA-Machines, also called distributed evolving algebras (EAs) [17, 18]. The definition covers the interaction of the simulation kernel process with the user defined processes, their suspension and resumption. <p> For this the reader is referred to the glossary of <ref> [33, 34] </ref>. In this section we first introduce the basic concepts for defining the simulator. Thereafter we present the formal definition of various statements, i.e., variable assignment, signal assignment, and wait statements. <p> As initialization for our model we suppose cycle = delta cycle, current time T c to be set to 0, and the initialization of attributes, signals, and drivers through the simulator to be according to the definitions in <ref> [34] </ref>. Unless otherwise stated all functions are assumed to be undef and sets to be empty sets. Finally, we assume that first each nonpostponed process and then each postponed process is executed until it suspends. Signals A user defined process P cannot immediately assign a value to a signal S.
Reference: [35] <author> J.P. van Tassel. Femto-VHDL: </author> <title> The Semantics of a Subset of VHDL and its Embedding in the HOL Proof Assistant. </title> <type> PhD thesis, </type> <institution> University of Cambridge, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: Progress in the definition of a denotational semantics can be found in [9]. [10] represents the continuation of their work. A detailed structural operational semantics of a VHDL'87 subset, i.e., Femto-VHDL, for HOL verification is presented by Van Tassel in <ref> [35] </ref> (see also [36]). Damm et al. define the semantics of VHDL'87 through interpreted Petri-Nets [11]. In [12] detailed structural operational semantics is defined based on transition systems and used for formal verification against timing diagrams given by a linear first-order logic [12].
Reference: [36] <author> P. Van Tassel, J. </author> <title> An operational semantics for a subset of VHDL. </title> <editor> In C. Delgado Kloos and P. T. Breuer, editors, </editor> <title> Formal Semantics For VHDL. </title> <publisher> Kluwer, </publisher> <address> Boston/London/Dordrecht, </address> <year> 1995. </year>
Reference-contexts: Progress in the definition of a denotational semantics can be found in [9]. [10] represents the continuation of their work. A detailed structural operational semantics of a VHDL'87 subset, i.e., Femto-VHDL, for HOL verification is presented by Van Tassel in [35] (see also <ref> [36] </ref>). Damm et al. define the semantics of VHDL'87 through interpreted Petri-Nets [11]. In [12] detailed structural operational semantics is defined based on transition systems and used for formal verification against timing diagrams given by a linear first-order logic [12].
Reference: [37] <author> E. Villar and P. Sanchez. </author> <title> Synthesis applications of VHDL. </title> <editor> In J.P. Mermet, editor, </editor> <title> Fundamentals and Standards in Hardware Description Languages. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, Netherlands, </address> <year> 1993. </year>
Reference-contexts: 1 INTRODUCTION An approach to the definition of a formal semantics of the IEEE Std-1076 hardware description language VHDL'87 [33], as well as of the recently published VHDL'93 1 [34, 2, 22], is of great interest for hardware design and verification <ref> [5, 37] </ref>. For general hardware design, formal models are of great interest for a formal comparison of hardware descriptions which may be represented by different means, e.g., different hardware description languages such as VHDL, M, UDL/I, 1 This standard is also known as VHDL'92 1 2 Chapter 1 and Verilog.

References-found: 37

