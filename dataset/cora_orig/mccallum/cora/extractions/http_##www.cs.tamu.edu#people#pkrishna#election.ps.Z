URL: http://www.cs.tamu.edu/people/pkrishna/election.ps.Z
Refering-URL: http://www.cs.tamu.edu/people/pkrishna/publications.html
Root-URL: http://www.cs.tamu.edu
Title: IMPLEMENTATION OF ELECTION ALGORITHM FOR ASYNCHRONOUS COMPLETE NETWORKS WITH INTERMITTENT LINK FAILURES  
Author: P. Krishna and Hosame Abu-Amara 
Address: College Station, TX 77843.  
Affiliation: Department of Electrical Engineering, Texas A M University,  
Abstract: A network is complete if every processor has a direct communication channel to every other processor. We consider the election problem on complete asynchronous networks when the processors are reliable while some of the channel s are subject to failure. In this paper, we have implemented Lokre's distributed election algorithm for faulty complete networks [1]. We built a complete network, designed the random generating software modules, and implemented the algorithm. We ran the program for several values of n and for various configurations of the network. During each run we counted the number of messages passed, and the number of phases advanced before a leader was elected. For each value of n we did a best case, average case, and the worst case analysis of the number of messages passed. We compare the number of messages, and the number of phases advanced with the theoretical results. Doing this we show that the bounds proved by the algorithm are satisfied. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jahnavi Lokre, </author> <title> "Election in Complete Asynchronous Networks with Intermittent Link Failures", </title> <type> Master's Thesis, </type> <institution> Dept. Of Electrical Engineering, Texas A&M University, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: The election problem is a fundamental problem of distributed computing. The applications of the leader election problem include concurrency control, regeneration of a lost (unique) token, recovery by electing a new coordinator in a distributed database system, and replacing a primary site in a replicated distributed file system <ref> [1] </ref>, [2], [3], [4], [5]. In real networks, processors and communication channels are subject to various types of failure [1], [6]. These failures complicate the election problem. Failures may occur during or before the execution of the election algorithm, and hence messages may be lost. <p> include concurrency control, regeneration of a lost (unique) token, recovery by electing a new coordinator in a distributed database system, and replacing a primary site in a replicated distributed file system <ref> [1] </ref>, [2], [3], [4], [5]. In real networks, processors and communication channels are subject to various types of failure [1], [6]. These failures complicate the election problem. Failures may occur during or before the execution of the election algorithm, and hence messages may be lost. <p> Lokre <ref> [1] </ref> has developed an algorithm for asynchronous complete networks that uses no more than O (n 2 +nf 2 ) messages to elect a unique leader of the network. <p> The type of failure is intermittent. All the nodes in the network are assumed to be reliable. All nodes may not start executing the election algorithm simultaneously; some node may be initially dormant. OBJECTIVE In this paper, we have implemented Lokre's distributed election algorithm for faulty complete networks <ref> [1] </ref>. We built a complete network, designed the random generating software modules, and implemented the algorithm. We ran the program for several values of n and for various configurations of the network. <p> The processors are reliable, but some of the communication channels may fail intermittently before or during the execution of the algorithm. Link failures are undetectable due to the asynchronous nature of the network. We have implemented Lokre's distributed algorithm <ref> [1] </ref> on a network of SUN workstations. The processors in the network may have different clock speeds, and thus the network is asynchronous. <p> The faulty link status was the same on both incident nodes. Moreover we took care of assigning unique identifiers to the nodes. Correctness : The correctness of Lokre's distributed algorithm <ref> [1] </ref> was proved theoretically by proving that no two nodes can be elected as the leader of the network during an execution of the algorithm, and by proving that there exists at least one node that is elected as the leader of the network. <p> We observed that there was no deadlock during the execution of the algorithm. During each run, there was an unique leader elected, and every node in the network knew the identity of the leader after the execution of the algorithm. Complexity Analysis : Lokre's thesis <ref> [1] </ref> proved that each message consists of at most O (logjTj) bits, where jTj is the cardinality of the set of node identifiers. In this implementation each message consists of the message type and phase-ID pairs. The number of message types is 13. <p> It was useful to recognize the socket to write to, if the node wanted to reply to the sender. For all our experiments the message size was equal to 16 bytes. Thus the size of the messages was well within the bounds proved in Lokre's algorithm <ref> [1] </ref>. Lokre's thesis [1] proved that the message complexity of the algorithm is O (n 2 + nf 2 ). The total number of messages sent during the execution of the algorithm is the sum of the messages generated by each node until the end of execution of the algorithm. <p> It was useful to recognize the socket to write to, if the node wanted to reply to the sender. For all our experiments the message size was equal to 16 bytes. Thus the size of the messages was well within the bounds proved in Lokre's algorithm <ref> [1] </ref>. Lokre's thesis [1] proved that the message complexity of the algorithm is O (n 2 + nf 2 ). The total number of messages sent during the execution of the algorithm is the sum of the messages generated by each node until the end of execution of the algorithm. <p> The total number of messages sent during the execution of the algorithm is the sum of the messages generated by each node until the end of execution of the algorithm. The complexity factor taken by Lokre <ref> [1] </ref> was 4. So the total number of messages required to announce a leader is N messages 4 (n 2 + nf 2 ). It was also proved that the maximum phase that a leader can have is i max = 2 + log 2 (f + 1). <p> Figure 5 shows the maximum phase of the leader computed theoretically, and the maximum phase of the leader observed for each N. It is seen that the maximum phase of the leader observed is well within the bounds proved. to the message complexity theoretically computed by Lokre <ref> [1] </ref>. Figure 7 compares Lokre's computed message complexity with the worst case message complexity for various values of N. The plot showing the comparison of the message complexities is in Figure 8. It is observed that the worst case message complexity is well within the bounds proved by Lokre.
Reference: [2] <author> Hosame H. Abu-Amara, </author> <title> "Fault-Tolerant Distributed Algorithm for Election in Complete Networks,"IEEE Transactions on Computers, </title> <journal> Vol. </journal> <volume> 37, No. 4, </volume> <pages> pp. 449-453, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: The election problem is a fundamental problem of distributed computing. The applications of the leader election problem include concurrency control, regeneration of a lost (unique) token, recovery by electing a new coordinator in a distributed database system, and replacing a primary site in a replicated distributed file system [1], <ref> [2] </ref>, [3], [4], [5]. In real networks, processors and communication channels are subject to various types of failure [1], [6]. These failures complicate the election problem. Failures may occur during or before the execution of the election algorithm, and hence messages may be lost. <p> Goldreich and Shira [10] have proposed an algorithm for leader election in asynchronous rings with one intermittently faulty channel. Their algorithm uses fi (nlogn) messages if n is known to all processors; O (n 2 ) messages otherwise. Abu-Amara <ref> [2] </ref> has developed an algorithm for asynchronous complete networks that uses no more than O (nrf + (nr=(r 1))log (n=(r 1)f )) messages and runs in O (n=(r 1)f ) time, where f , (1 f bn=2 3c), is the maximum number of intermittently faulty channels, and r is a design
Reference: [3] <author> Friedemann Mattern, </author> <title> "Message Complexity of Simple Ring-based Election Algorithms an Emprical Analysis, (extended abstract)," </title> <booktitle> Proc. IEEE 9th International Conference On Distributed Computing Systems, </booktitle> <pages> pp. 94-100, </pages> <year> 1989. </year>
Reference-contexts: The applications of the leader election problem include concurrency control, regeneration of a lost (unique) token, recovery by electing a new coordinator in a distributed database system, and replacing a primary site in a replicated distributed file system [1], [2], <ref> [3] </ref>, [4], [5]. In real networks, processors and communication channels are subject to various types of failure [1], [6]. These failures complicate the election problem. Failures may occur during or before the execution of the election algorithm, and hence messages may be lost.
Reference: [4] <author> P. A. Alsberg and J. D. Day, </author> <title> "A principle for resilient sharing of distributed resources," </title> <booktitle> Proc. 2nd International Conference On Software Engineering, </booktitle> <address> San Francisco, CA, </address> <pages> pp. 562-570, </pages> <month> Oct. </month> <year> 1976. </year>
Reference-contexts: The applications of the leader election problem include concurrency control, regeneration of a lost (unique) token, recovery by electing a new coordinator in a distributed database system, and replacing a primary site in a replicated distributed file system [1], [2], [3], <ref> [4] </ref>, [5]. In real networks, processors and communication channels are subject to various types of failure [1], [6]. These failures complicate the election problem. Failures may occur during or before the execution of the election algorithm, and hence messages may be lost.
Reference: [5] <author> D. A. Menasce, G. J. Popek, and R. R. Muntz, </author> <title> "A locking protocol for resource coordination in distributed databases," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 5, </volume> <pages> pp. </pages> <month> 103-138 June </month> <year> 1980. </year>
Reference-contexts: The applications of the leader election problem include concurrency control, regeneration of a lost (unique) token, recovery by electing a new coordinator in a distributed database system, and replacing a primary site in a replicated distributed file system [1], [2], [3], [4], <ref> [5] </ref>. In real networks, processors and communication channels are subject to various types of failure [1], [6]. These failures complicate the election problem. Failures may occur during or before the execution of the election algorithm, and hence messages may be lost.
Reference: [6] <author> Richard D. Schlichting and Fred B. Schnieder, </author> <title> "Fail Stop Processors : An Approach to Designing Fault-Tolerant Computing Systems," </title> <journal> ACM Transactions on Computing Systems, </journal> <volume> Vol. 1, No. 3, </volume> <pages> pp. 222-238, </pages> <month> August </month> <year> 1983. </year>
Reference-contexts: In real networks, processors and communication channels are subject to various types of failure [1], <ref> [6] </ref>. These failures complicate the election problem. Failures may occur during or before the execution of the election algorithm, and hence messages may be lost.
Reference: [7] <author> Y. Afek and E. Gafni, </author> <title> "Time and message bounds for election in synchronous and asynchronous complete networks," </title> <booktitle> Proc. 4th ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Minacki, Ontario, Canada, </address> <month> August </month> <year> 1985, </year> <pages> pp. 186-195. </pages>
Reference-contexts: In real networks, processors and communication channels are subject to various types of failure [1], [6]. These failures complicate the election problem. Failures may occur during or before the execution of the election algorithm, and hence messages may be lost. SURVEY OF RELATED LITERATURE Afek and Gafni <ref> [7] </ref>, and Korach, Moran and Zaks [8] presented several election algorithms of fi (nlogn) message complexity for aysnchronous complete networks. Cimet and Kumar [9] developed a leader election algorithm for networks in which the channels fail detectably in the fail-stop failure mode.
Reference: [8] <author> E. Korach, S. Moran, and S. Zaks, </author> <title> "Tighter lower and upper bounds for some distributed algorithms for a complete network of processors," </title> <booktitle> Proc. 3rd ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Vancou-ver, B.C., Canada, </address> <month> August </month> <year> 1984, </year> <pages> pp. 199-207. </pages>
Reference-contexts: These failures complicate the election problem. Failures may occur during or before the execution of the election algorithm, and hence messages may be lost. SURVEY OF RELATED LITERATURE Afek and Gafni [7], and Korach, Moran and Zaks <ref> [8] </ref> presented several election algorithms of fi (nlogn) message complexity for aysnchronous complete networks. Cimet and Kumar [9] developed a leader election algorithm for networks in which the channels fail detectably in the fail-stop failure mode.
Reference: [9] <author> I. A. Cimet and P. R. S. Kumar, </author> <title> "A resilient distributed protocol for network synchronization," </title> <booktitle> ACM SIGCOMM Symposium on Communications, Architecture, and Protocols, </booktitle> <address> Stowe, VT, </address> <month> August </month> <year> 1986, </year> <pages> pp. 358-376. </pages>
Reference-contexts: Failures may occur during or before the execution of the election algorithm, and hence messages may be lost. SURVEY OF RELATED LITERATURE Afek and Gafni [7], and Korach, Moran and Zaks [8] presented several election algorithms of fi (nlogn) message complexity for aysnchronous complete networks. Cimet and Kumar <ref> [9] </ref> developed a leader election algorithm for networks in which the channels fail detectably in the fail-stop failure mode. Goldreich and Shira [10] have proposed an algorithm for leader election in asynchronous rings with one intermittently faulty channel.
Reference: [10] <author> O. Goldreich and L. Shira, </author> <title> "The effect of link failures on computations in asynchronous rings," </title> <booktitle> Proc. 5th ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Calgary, Alta., Canada, </address> <month> August </month> <year> 1986, </year> <pages> pp. 174-185. </pages>
Reference-contexts: Cimet and Kumar [9] developed a leader election algorithm for networks in which the channels fail detectably in the fail-stop failure mode. Goldreich and Shira <ref> [10] </ref> have proposed an algorithm for leader election in asynchronous rings with one intermittently faulty channel. Their algorithm uses fi (nlogn) messages if n is known to all processors; O (n 2 ) messages otherwise. <p> Here n is the number of nodes in the network and f is the maximum number of faulty links incident on each node, where f b n1 2 c. MODEL Our model follows Goldreich and Shira's model <ref> [10] </ref>. Consider an asynchronous complete network of n processors. We model the network as a complete graph on n nodes, in which each node represents a processor, and each link represents a bidirectional communication channel.
Reference: [11] <author> W.Richard Stevens, </author> <title> "UNIX Network Programming" Prentice Hall, 1990, </title> <journal> pp.198-199. </journal> <volume> N Lokre Max Phase 7 4 2 9 4 2 11 4 2 N Lokre Worst Avg. Best 7 448 80 74 65 9 900 106 102 100 11 1584 155 152 150 </volume>
Reference-contexts: We have used Berkeley sockets as the application program interface to the TCP communication protocol. TCP is a connection-oriented protocol that provides a reliable , full-duplex, byte stream for a user process <ref> [11] </ref>. The connection is set up using the simple client-server model. The typical client-server relationship is not symmetrical. To initiate a network connection requires that the program know which role (client or server) it is to play.
References-found: 11

