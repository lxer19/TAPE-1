URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1989/tr-89-032.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1989.html
Root-URL: http://www.icsi.berkeley.edu
Title: A Connectionist Model of Unification  
Author: Andreas Stolcke 
Keyword: and phrases. Unification, constraint satisfaction, connectionism, feature structures.  
Pubnum: TR-89-032  
Abstract: A general approach to encode and unify recursively nested feature structures in connectionist networks is described. The unification algorithm implemented by the net is based on iterative coarsening of equivalence classes of graph nodes. This method allows the reformulation of unification as a constraint satisfaction problem and enables the connectionist implementation to take full advantage of the potential parallelism inherent in unification, resulting in sublinear time complexity. Moreover, the method is able to process any number of feature structures in parallel, searching for possible unifications and making decisions among mutually exclusive unifications where necessary. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Dana H. Ballard, </author> <title> Parallel Logical Inference and Energy Minimization. </title> <booktitle> In Proceedings of the 5th National Conference on Artificial Intelligence, </booktitle> <address> Philadelphia, Pa., </address> <month> August </month> <year> 1986, </year> <pages> pp. 203-208. </pages>
Reference-contexts: Among its most common uses is the unification of terms in (resolution) theorem proving. Some rudimentary cases of unification have been given a connectionist treatment, without achieving full generality, however. An often-cited paper is Ballard's work on connectionist resolution <ref> [1] </ref>, which relies on unifications of terms without recursive embedding. The motivation for this work stems from a different application of unification, namely the unification-based grammar formalisms widely used in linguistics (Lexical Functional Grammar, Functional Unification Grammar, etc.; cf. [6]).
Reference: [2] <author> Garrison W. Cottrell, </author> <title> A Connectionist Approach to Word Sense Disambiguation. </title> <type> Technical Report TR 154. </type> <institution> Computer Science Department, University of Rochester, Rochester, </institution> <address> N.Y., </address> <month> May </month> <year> 1985. </year> <note> Cf. especially chapter 7. </note>
Reference-contexts: Therefore, the structures operated on are not terms but feature structures (f-structures, for short), i.e. recursively embedded matrices of feature-value pairs, much in the spirit of frame-like data-structures traditionally found in AI. The feasibility and usefulness of such structures in connectionism has been demonstrated in a number of models <ref> [2, 5, 9] </ref>. On developing our approach, we aimed at fully general representation and processing of arbitrarily embedded structures. The connectionist approach to unification described in this paper was implemented and tested using an interactive network simulator based on LOOPS running on Interlisp workstations [10].
Reference: [3] <author> Jerome A. Feldman, Dana H. Ballard, </author> <title> Connectionist Models and Their Properties. </title> <booktitle> Cognitive Science 6 </booktitle> <pages> 205-254, </pages> <year> 1982, </year> <pages> 205-254. </pages>
Reference-contexts: Thus, we have pairs of units which jointly activate a third one. There are several ways to realize this kind of conjunctive activation using `neural primitives', such as multiplicative connections or link modifiers (cf. <ref> [3] </ref>). In our case, since the implementation relies solely on linear threshold units, auxiliary intermediate units and links were set up to implement conjunctive activation, as shown in Figure 3. The units allocated for `mediating' transitivity are called t-units and depicted as squares A through E .
Reference: [4] <author> M. S. Paterson, M. N. Wegman, </author> <title> Linear Unification. </title> <institution> IBM Research Report RC5904 (#25518). IBM Thomas J. Watson Research Center, </institution> <address> Yorktown Heights, N.Y., </address> <year> 1976. </year>
Reference-contexts: The term validity is chosen to conform to the terminology used by Paterson and Wegman <ref> [4] </ref>, who used the idea of equivalence classes to devise a linear sequential algorithm for term unification. 2 It can be shown that the existence of a valid equivalence relation with nodes x 1 ~ x 2 ~ . . . ~ x n is both necessary and sufficient for the
Reference: [5] <author> Lokenda Shastri, </author> <title> Semantic Networks: An Evidential Formalization and its Connectionist Realization. </title> <address> San Mateo, Calif.: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: Therefore, the structures operated on are not terms but feature structures (f-structures, for short), i.e. recursively embedded matrices of feature-value pairs, much in the spirit of frame-like data-structures traditionally found in AI. The feasibility and usefulness of such structures in connectionism has been demonstrated in a number of models <ref> [2, 5, 9] </ref>. On developing our approach, we aimed at fully general representation and processing of arbitrarily embedded structures. The connectionist approach to unification described in this paper was implemented and tested using an interactive network simulator based on LOOPS running on Interlisp workstations [10].
Reference: [6] <author> Stuart M. Shieber, </author> <title> An Introduction to Unification-Based Approaches to Grammar. CSLI Lecture Note Series. Center for Study of Language and Information, </title> <institution> Stanford, Calif., </institution> <year> 1986. </year>
Reference-contexts: An often-cited paper is Ballard's work on connectionist resolution [1], which relies on unifications of terms without recursive embedding. The motivation for this work stems from a different application of unification, namely the unification-based grammar formalisms widely used in linguistics (Lexical Functional Grammar, Functional Unification Grammar, etc.; cf. <ref> [6] </ref>). Therefore, the structures operated on are not terms but feature structures (f-structures, for short), i.e. recursively embedded matrices of feature-value pairs, much in the spirit of frame-like data-structures traditionally found in AI. <p> This can easily be expressed as unifiability of the structure given above with a similar structure lexically associated with the verb. For an excellent survey of the role of unification in modern linguistic grammar theory see <ref> [6] </ref>. Term unification. Finishing this brief overview of unification, it is important to note that the type of unification usually found in logic-oriented applications in AI, term unification, can be reduced to f-structure unification in a straightforward way.
Reference: [7] <author> A. Stolcke, </author> <note> Generierung natu rlichsprachlicher Satze in unifikationsbasierten Grammatiken. Ein konnektionistischer Ansatz. Report FKI-95-88. </note> <institution> Institut fu r Informatik, Technische Universitat Mu nchen, Munich, </institution> <month> October </month> <year> 1988. </year>
Reference-contexts: The connectionist approach to unification described in this paper was implemented and tested using an interactive network simulator based on LOOPS running on Interlisp workstations [10]. It was later extended and applied to generation of sentences from PATR-like unification-based grammars (not covered here, cf. <ref> [7] </ref>). 2. F-Structure Unification 2.1. Feature Structures One way of representing f-structures is as sets of features and associated values. Features are just atomic symbols, whereas values can be either atoms or full-fledged f-structures. <p> The resulting f-structure will be well-defined as a consequence of the validity of ~, and isomorphic to the unification x 1 ciic x 2 ciic . . . ciic x n . A full formal discussion of the relationship between unification and valid equivalence relations can be found in <ref> [7] </ref>. As far as the connectionist implementation of unification is concerned, valid equivalence relations provide a basis for both representation and computation of unifications. Representation of node equivalences in terms of unit activations can be realized in a relatively straightforward way, as the next section will show. <p> with this first application and initially featured only a restricted choice of unit models. 4 For instance, when applying this kind of representation to unification-based grammars, each grammar rule can be encoded as a single f-structure DAG, such that unification of certain nodes corresponds to rule application (for details cf. <ref> [7] </ref>). - 7 - 3.3. Enforcing consistency Before tackling the problem of validity, it has to be ensured that the activation patterns on the space of u-units and nu-units be consistent, i.e. actually represent an equivalence relation.
Reference: [8] <author> David S. Touretzky, BoltzCONS: </author> <title> Reconciling Connectionism with the Recursive Nature of Stacks and Trees. </title> <booktitle> In Proceedings of the 8th Annual Conference of the Cognitive Science Society, </booktitle> <address> Amherst, Mass., </address> <month> August </month> <year> 1986, </year> <pages> pp. 522-530. </pages>
Reference-contexts: The units thus representing the edges of the f-structure DAGs are called e-units. The scheme adopted here is a localist version of the recursive representation of LISP S-expressions in BoltzCONS <ref> [8] </ref>.
Reference: [9] <author> David S. Touretzky, </author> <title> Representing Conceptual Structures in a Neural Network. </title> <editor> In Maureen Caudill, Charles Butler (Ed.), </editor> <booktitle> Proceedings of the 1st IEEE International Conference on Neural Networks, </booktitle> <address> San Diego, Calif., </address> <month> June </month> <year> 1987, </year> <pages> pp. </pages> <month> II-279-II-286. </month>
Reference-contexts: Therefore, the structures operated on are not terms but feature structures (f-structures, for short), i.e. recursively embedded matrices of feature-value pairs, much in the spirit of frame-like data-structures traditionally found in AI. The feasibility and usefulness of such structures in connectionism has been demonstrated in a number of models <ref> [2, 5, 9] </ref>. On developing our approach, we aimed at fully general representation and processing of arbitrarily embedded structures. The connectionist approach to unification described in this paper was implemented and tested using an interactive network simulator based on LOOPS running on Interlisp workstations [10].
Reference: [10] <author> K. Zimmermann, Der Netzeditor. </author> <title> Eine komfortable Umgebung zum Erstellen und Testen von konnektionistischen Netzen. </title> <type> Report FKI-94-88. </type> <institution> Institut fur Informatik, Technische Universitat Munchen, Munich, </institution> <year> 1988. </year> <month> - 16 </month> - 
Reference-contexts: On developing our approach, we aimed at fully general representation and processing of arbitrarily embedded structures. The connectionist approach to unification described in this paper was implemented and tested using an interactive network simulator based on LOOPS running on Interlisp workstations <ref> [10] </ref>. It was later extended and applied to generation of sentences from PATR-like unification-based grammars (not covered here, cf. [7]). 2. F-Structure Unification 2.1. Feature Structures One way of representing f-structures is as sets of features and associated values. <p> Informally, equivalence of f-structure nodes means unifiability of the corresponding f-structures, therefore the units encoding equivalence and non-equivalence are called u-units and nu-units, respectively. hhhhhhhhhhhhhhh reasons, related to the particular network simulator used <ref> [10] </ref>.
References-found: 10

