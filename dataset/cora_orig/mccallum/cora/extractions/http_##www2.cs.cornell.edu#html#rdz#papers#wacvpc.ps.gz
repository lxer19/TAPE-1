URL: http://www2.cs.cornell.edu/html/rdz/papers/wacvpc.ps.gz
Refering-URL: http://www.cs.cornell.edu/home/rdz/refinement.html
Root-URL: 
Email: gregpass,rdz@cs.cornell.edu  
Title: Histogram Refinement for Content-Based Image Retrieval  
Author: Greg Pass Ramin Zabih 
Web: http://www.cs.cornell.edu/home/rdz/refinement.html  
Address: Ithaca, NY 14853  
Affiliation: Computer Science Department Cornell University  
Abstract: Color histograms are widely used for content-based image retrieval. Their advantages are efficiency, and insensitivity to small changes in camera viewpoint. However, a histogram is a coarse characterization of an image, and so images with very different appearances can have similar histograms. We describe a technique for comparing images called histogram refinement, which imposes additional constraints on histogram based matching. Histogram refinement splits the pixels in a given bucket into several classes, based upon some local property. Within a given bucket, only pixels in the same class are compared. We describe a split histogram called a color coherence vector (CCV), which partitions each histogram bucket based on spatial coherence. CCV's can be computed at over 8 images per second on a standard workstation. A database with 60,000 images can be queried using CCV's in under 6 seconds. We demonstrate that histogram refinement can be used to distinguish images whose color histograms are indistinguishable. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Simon Baker and Shree Nayar. </author> <title> Pattern rejection. </title> <booktitle> In IEEE Conference on Computer Vision and Pattern Recognition, </booktitle> <pages> pages 544-549, </pages> <year> 1996. </year>
Reference-contexts: This added time complexity can be offset by using efficient, coarse measures that prune the search space by removing images which are clearly not the desired answer. Measures which are less efficient but more effective can then be applied to the remaining images. Baker and Nayar <ref> [1] </ref> have begun to investigate similar ideas for pattern recognition problems. To effectively handle large image databases will require a balance between increasingly fine measures (such as histogram refinement) and efficient coarse measures.
Reference: [2] <author> M. Flickner et al. </author> <title> Query by image and video content: The QBIC system. </title> <journal> IEEE Computer, </journal> <volume> 28(9) </volume> <pages> 23-32, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Many applications require methods for comparing images based on their overall appearance. Color histograms are a popular solution to this problem, and are used in systems like QBIC <ref> [2] </ref> and Chabot [6]. Color histograms are computationally efficient, and generally insensitive to small changes in camera position. However, a color histogram provides only a very coarse characterization of an image; images with similar histograms can have dramatically different appearances. <p> We compare our work with some recent algorithms [5, 8, 9, 10] that also combine spatial information with color histograms. 2 Color Histograms Color histograms are frequently used to compare images. Examples of their use in multimedia applications include scene break detection and querying a database of images <ref> [7, 6, 2] </ref>. Color histograms are popular because they are trivial to compute, and tend to 1 The color images used in this paper can be found at http://www.cs.cornell.edu/home/rdz/refinement.html. be robust against small changes in camera viewpoint. <p> Our database consists of 60,000 images, which are drawn from a variety of sources. Our largest source is 40,000 images from CNN, taken one minute apaer. We also include the 11,667 images used in Chabot [6], the 1,440 images used in QBIC <ref> [2] </ref>, and a 1,005 image database available from Corel. In addition, we included a few groups of images in PhotoCD format. Finally, we have taken a number of MPEG videos from the Web and segmented them into scenes. <p> A wide variety of different colorspaces have also been investigated for content-based image retrieval, such as the opponent-axis col-orspace [12] and the Munsell colorspace <ref> [2] </ref>. The choice of colorspace is a particularly significant issue for CCV's, since they use the discretized color buckets to segment the image. A perceptually uniform colorspace, such as CIE Lab, should result in better segmentations and improve the performance of CCV's.
Reference: [3] <author> Brian V. Funt and Graham D. Finlayson. </author> <title> Color constant color indexing. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 17(5) </volume> <pages> 522-529, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: The simplest effect of color constancy is a change in overall image brightness; this is responsible for the negative examples obtained in our experiments with CCV's. Standard histogramming methods are sensitive to image gain. More sophisticated methods, such as color ratio histograms <ref> [3] </ref> or the use of color moments [10], might alleviate this problem. These methods, like most proposed improvements to color histograms, can also be used in histogram refinement.
Reference: [4] <author> J. Hafner, H. Sawhney, W. Equitz, M. Flickner, and W. Niblack. </author> <title> Efficient color histogram indexing for quadratic form distance functions. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 17(7) </volume> <pages> 729-736, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Color histograms are typically compared using the L 1 -distance or the L 2 -distance, although more complex measures have also been considered <ref> [4] </ref>. 3 Histogram Refinement In histogram refinement the pixels of a given bucket are subdivided into classes based on local features. There are many possible features, including texture, orientation, distance from the nearest edge, relative brightness, etc.
Reference: [5] <author> Wynne Hsu, T. S. Chua, and H. K. Pung. </author> <title> An integrated color-spatial approach to content-based image retrieval. </title> <booktitle> In ACM Multimedia Conference, </booktitle> <pages> pages 305-313, </pages> <year> 1995. </year>
Reference-contexts: In section 3 we describe histogram refinement, and present two examples that capture spatial information. Section 4 provides examples of refinement-based image queries and shows that they can give superior results to color histograms. We compare our work with some recent algorithms <ref> [5, 8, 9, 10] </ref> that also combine spatial information with color histograms. 2 Color Histograms Color histograms are frequently used to compare images. Examples of their use in multimedia applications include scene break detection and querying a database of images [7, 6, 2]. <p> Both implementations are preliminary, and the performance can definitely be improved. 5 Related Work Our work has focused on the use of spatial information to refine color histograms. Recently, several authors have proposed algorithms for comparing images that combine spatial information with color histograms. Hsu et al. <ref> [5] </ref> attempts to capture the spatial arrangement of the different colors in the image, in order to perform more accurate content-based image retrieval. Rickman and Stonham [8] randomly sample the endpoints of small triangles and compare the distributions of these triplets. <p> Smith and Chang [9] concentrate on queries that combine spatial information with color. Stricker and Dimai [10] divide the image into five partially overlapping regions and compute the first three moments of the color distributions in each image. We will discuss each approach in turn. Hsu <ref> [5] </ref> begins by selecting a set of representative colors from the image. Next, the image is partitioned into rectangular regions, where each region is predominantly a single color. The partitioning algorithm makes use of maximum entropy. <p> This feature is better employed after the coherent pixels have been segregated. Refining a histogram not only makes finer distinctions between pixels, but functions as a statistical filter for successive refinements. 6.2 Choice of colorspace Many researchers spend considerable effort on selecting a good set of colors. Hsu <ref> [5] </ref>, for example, assumes that the colors in the center of the image are more important than those at the periphery, while Smith and Chang [9] use several different thresholds to extract colors and regions.
Reference: [6] <author> Virginia Ogle and Michael Stonebraker. Chabot: </author> <title> Retrieval from a relational database of images. </title> <journal> IEEE Computer, </journal> <volume> 28(9) </volume> <pages> 40-48, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Many applications require methods for comparing images based on their overall appearance. Color histograms are a popular solution to this problem, and are used in systems like QBIC [2] and Chabot <ref> [6] </ref>. Color histograms are computationally efficient, and generally insensitive to small changes in camera position. However, a color histogram provides only a very coarse characterization of an image; images with similar histograms can have dramatically different appearances. For example, the images shown in figure 1 have similar color histograms. <p> We compare our work with some recent algorithms [5, 8, 9, 10] that also combine spatial information with color histograms. 2 Color Histograms Color histograms are frequently used to compare images. Examples of their use in multimedia applications include scene break detection and querying a database of images <ref> [7, 6, 2] </ref>. Color histograms are popular because they are trivial to compute, and tend to 1 The color images used in this paper can be found at http://www.cs.cornell.edu/home/rdz/refinement.html. be robust against small changes in camera viewpoint. <p> Our database consists of 60,000 images, which are drawn from a variety of sources. Our largest source is 40,000 images from CNN, taken one minute apaer. We also include the 11,667 images used in Chabot <ref> [6] </ref>, the 1,440 images used in QBIC [2], and a 1,005 image database available from Corel. In addition, we included a few groups of images in PhotoCD format. Finally, we have taken a number of MPEG videos from the Web and segmented them into scenes.
Reference: [7] <author> Alex Pentland, Rosalind Picard, and Stan Sclaroff. Photobook: </author> <title> Content-based manipulation of image databases. </title> <journal> International Journal of Computer Vision, </journal> <volume> 18(3) </volume> <pages> 233-254, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: We compare our work with some recent algorithms [5, 8, 9, 10] that also combine spatial information with color histograms. 2 Color Histograms Color histograms are frequently used to compare images. Examples of their use in multimedia applications include scene break detection and querying a database of images <ref> [7, 6, 2] </ref>. Color histograms are popular because they are trivial to compute, and tend to 1 The color images used in this paper can be found at http://www.cs.cornell.edu/home/rdz/refinement.html. be robust against small changes in camera viewpoint.
Reference: [8] <editor> Rick Rickman and John Stonham. </editor> <title> Content-based image retrieval using color tuple histograms. </title> <booktitle> SPIE proceedings, </booktitle> <volume> 2670 </volume> <pages> 2-7, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: In section 3 we describe histogram refinement, and present two examples that capture spatial information. Section 4 provides examples of refinement-based image queries and shows that they can give superior results to color histograms. We compare our work with some recent algorithms <ref> [5, 8, 9, 10] </ref> that also combine spatial information with color histograms. 2 Color Histograms Color histograms are frequently used to compare images. Examples of their use in multimedia applications include scene break detection and querying a database of images [7, 6, 2]. <p> Recently, several authors have proposed algorithms for comparing images that combine spatial information with color histograms. Hsu et al. [5] attempts to capture the spatial arrangement of the different colors in the image, in order to perform more accurate content-based image retrieval. Rickman and Stonham <ref> [8] </ref> randomly sample the endpoints of small triangles and compare the distributions of these triplets. Smith and Chang [9] concentrate on queries that combine spatial information with color. <p> Hsu's partitioning algorithm in particular appears much more computationally intensive than our method. Hsu's approach can be extended to be independent of orientation and position, but the computation involved is quite substantial. In contrast, our method is naturally invariant to orientation and position. Rickman and Stonham <ref> [8] </ref> randomly sample pixel triples arranged in an equilateral triangle with a fixed side length. They use 16 levels of color hue, with nonuniform quantization. Approximately a quarter of the pixels are selected for sampling, and their method stores 372 bits per image.
Reference: [9] <author> John Smith and Shih-Fu Chang. </author> <title> Tools and tech-niques for color image retrieval. </title> <booktitle> SPIE proceedings, </booktitle> <volume> 2670 </volume> <pages> 1630-1639, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: In section 3 we describe histogram refinement, and present two examples that capture spatial information. Section 4 provides examples of refinement-based image queries and shows that they can give superior results to color histograms. We compare our work with some recent algorithms <ref> [5, 8, 9, 10] </ref> that also combine spatial information with color histograms. 2 Color Histograms Color histograms are frequently used to compare images. Examples of their use in multimedia applications include scene break detection and querying a database of images [7, 6, 2]. <p> Hsu et al. [5] attempts to capture the spatial arrangement of the different colors in the image, in order to perform more accurate content-based image retrieval. Rickman and Stonham [8] randomly sample the endpoints of small triangles and compare the distributions of these triplets. Smith and Chang <ref> [9] </ref> concentrate on queries that combine spatial information with color. Stricker and Dimai [10] divide the image into five partially overlapping regions and compute the first three moments of the color distributions in each image. We will discuss each approach in turn. <p> Hsu [5], for example, assumes that the colors in the center of the image are more important than those at the periphery, while Smith and Chang <ref> [9] </ref> use several different thresholds to extract colors and regions. A wide variety of different colorspaces have also been investigated for content-based image retrieval, such as the opponent-axis col-orspace [12] and the Munsell colorspace [2].
Reference: [10] <author> Markus Stricker and Alexander Dimai. </author> <title> Color indexing with weak spatial constraints. </title> <booktitle> SPIE proceedings, </booktitle> <volume> 2670 </volume> <pages> 29-40, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: In section 3 we describe histogram refinement, and present two examples that capture spatial information. Section 4 provides examples of refinement-based image queries and shows that they can give superior results to color histograms. We compare our work with some recent algorithms <ref> [5, 8, 9, 10] </ref> that also combine spatial information with color histograms. 2 Color Histograms Color histograms are frequently used to compare images. Examples of their use in multimedia applications include scene break detection and querying a database of images [7, 6, 2]. <p> Rickman and Stonham [8] randomly sample the endpoints of small triangles and compare the distributions of these triplets. Smith and Chang [9] concentrate on queries that combine spatial information with color. Stricker and Dimai <ref> [10] </ref> divide the image into five partially overlapping regions and compute the first three moments of the color distributions in each image. We will discuss each approach in turn. Hsu [5] begins by selecting a set of representative colors from the image. <p> Their algorithm can also handle certain kinds of queries that our work does not address; for example, they can find all the images where the sun is setting in the upper left part of the image. Stricker and Dimai <ref> [10] </ref> compute moments for each channel in the HSV colorspace, where pixels close to the border have less weight. They store 45 floating point numbers per image. Their distance measure for two regions is a weighted sum of the differences in each of the three moments. <p> The simplest effect of color constancy is a change in overall image brightness; this is responsible for the negative examples obtained in our experiments with CCV's. Standard histogramming methods are sensitive to image gain. More sophisticated methods, such as color ratio histograms [3] or the use of color moments <ref> [10] </ref>, might alleviate this problem. These methods, like most proposed improvements to color histograms, can also be used in histogram refinement.
Reference: [11] <author> Markus Stricker and Michael Swain. </author> <title> The capacity of color histogram indexing. </title> <booktitle> In IEEE Conference on Computer Vision and Pattern Recognition, </booktitle> <pages> pages 704-708, </pages> <year> 1994. </year>
Reference-contexts: For example, Swain and Ballard [12] describe the use of color histograms for identifying objects. Stricker and Swain <ref> [11] </ref> analyze the information capacity of color histograms. We will assume that all images are scaled to contain the same number of pixels M . We discretize the colorspace of the image such that there are n distinct (discretized) colors.
Reference: [12] <author> Michael Swain and Dana Ballard. </author> <title> Color indexing. </title> <journal> International Journal of Computer Vision, </journal> <volume> 7(1) </volume> <pages> 11-32, </pages> <year> 1991. </year>
Reference-contexts: Color histograms are popular because they are trivial to compute, and tend to 1 The color images used in this paper can be found at http://www.cs.cornell.edu/home/rdz/refinement.html. be robust against small changes in camera viewpoint. For example, Swain and Ballard <ref> [12] </ref> describe the use of color histograms for identifying objects. Stricker and Swain [11] analyze the information capacity of color histograms. We will assume that all images are scaled to contain the same number of pixels M . <p> Smith and Chang's algorithm also partitions the image into regions, but their approach is more elaborate than Hsu's. They allow a region to contain multiple different colors, and permit a given pixel to belong to several different regions. Their computation makes use of histogram back-projection <ref> [12] </ref> to back-project sets of colors onto the image. They then identify color sets with large connected components. Smith and Chang's image database contains 3,100 images. Again, running times are not reported, although their algorithm does speed up back-projection queries by pre-computing the back-projections of certain color sets. <p> A wide variety of different colorspaces have also been investigated for content-based image retrieval, such as the opponent-axis col-orspace <ref> [12] </ref> and the Munsell colorspace [2]. The choice of colorspace is a particularly significant issue for CCV's, since they use the discretized color buckets to segment the image. A perceptually uniform colorspace, such as CIE Lab, should result in better segmentations and improve the performance of CCV's. <p> For example, it is often useful to search for images in which a subset of another image (e.g. a particular object) appears. This would be particularly useful for queries on a database of videos. One approach to this problem might be to generalize histogram back-projection <ref> [12] </ref> to separate pixels based on spatial coherence, or some other local property. It is clear that larger and larger image databases will demand more complex similarity measures.
References-found: 12

