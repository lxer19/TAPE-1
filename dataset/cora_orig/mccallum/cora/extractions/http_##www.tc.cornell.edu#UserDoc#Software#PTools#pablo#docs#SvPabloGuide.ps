URL: http://www.tc.cornell.edu/UserDoc/Software/PTools/pablo/docs/SvPabloGuide.ps
Refering-URL: http://www.tc.cornell.edu/UserDoc/Software/PTools/pablo/docs/
Root-URL: http://www.tc.cornell.edu
Title: SvPablo Guide  
Author: Luiz A. De Rose Ying Zhang Ruth Aydt 
Note: 1 Supported in part by DARPA contracts DABT63-91-K-0004, DABT63-93-C-0040, DABT63-94-C-0049 (SIO), and F30602-96-C-0161, and by NASA contract NAG-1-613 (ICLASS).  
Date: February 13, 1997 Revised April 15, 1997 Revised May 30, 1997 Revised September 1, 1997  
Web: http://www-pablo.cs.uiuc.edu  
Address: Urbana, Illinois 61801  
Affiliation: Pablo Research Group Department of Computer Science University of Illinois  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Vikram Adve, John Mellor-Crummey, Jhy-Chun Wang, and Daniel Reed. </author> <title> Integrating Compilation and Performance Analysis for Data-Parallel Programs. </title> <booktitle> Proceedings of Supercomputing'95, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: SvPablo is derived from joint work of the Pablo group at the University of Illinois at Urbana-Champaign and the Center for Research in Parallel Computation at Rice University <ref> [1] </ref>. In addition to the SvPablo graphical tool, the SvPablo distribution includes various libraries and standalone programs that collect runtime performance data and prepare it for viewing. The release of SvPablo described in this document has been installed and tested on Sun and SGI workstations. <p> int myID; /* Process ID */ f and int svPabloNumNodes (); int svPabloMyID (); int svPabloTraceFlag = 1; int svPabloFirstEvent = 84; int svPabloLastEvent = 168; int svPabloProcTableSize = 14; main (argc, argv, envp) int argc; char **argv, **envp; f int returnValue; if (argc &gt;= 2) f if (strcmp (argv <ref> [1] </ref>, "-trace") == 0) f svPabloTraceFlag = 1; argc--; argv [1] = argv [0]; argv++; g else if (strcmp (argv [1], "-notrace") == 0) f svPabloTraceFlag = 0; argc--; argv [1] = argv [0]; argv++; g svPabloTraceInit ( svPabloNumNodes (), svPabloMyID () ); returnValue = svPabloParser main ( argc, argv, envp <p> (); int svPabloMyID (); int svPabloTraceFlag = 1; int svPabloFirstEvent = 84; int svPabloLastEvent = 168; int svPabloProcTableSize = 14; main (argc, argv, envp) int argc; char **argv, **envp; f int returnValue; if (argc &gt;= 2) f if (strcmp (argv <ref> [1] </ref>, "-trace") == 0) f svPabloTraceFlag = 1; argc--; argv [1] = argv [0]; argv++; g else if (strcmp (argv [1], "-notrace") == 0) f svPabloTraceFlag = 0; argc--; argv [1] = argv [0]; argv++; g svPabloTraceInit ( svPabloNumNodes (), svPabloMyID () ); returnValue = svPabloParser main ( argc, argv, envp ); svPabloTraceExit ( svPabloNumNodes (), svPabloMyID () ); return returnValue; <p> = 84; int svPabloLastEvent = 168; int svPabloProcTableSize = 14; main (argc, argv, envp) int argc; char **argv, **envp; f int returnValue; if (argc &gt;= 2) f if (strcmp (argv <ref> [1] </ref>, "-trace") == 0) f svPabloTraceFlag = 1; argc--; argv [1] = argv [0]; argv++; g else if (strcmp (argv [1], "-notrace") == 0) f svPabloTraceFlag = 0; argc--; argv [1] = argv [0]; argv++; g svPabloTraceInit ( svPabloNumNodes (), svPabloMyID () ); returnValue = svPabloParser main ( argc, argv, envp ); svPabloTraceExit ( svPabloNumNodes (), svPabloMyID () ); return returnValue; g 76 int svPabloTraceExit ( nproc, myID ) int nproc; <p> main (argc, argv, envp) int argc; char **argv, **envp; f int returnValue; if (argc &gt;= 2) f if (strcmp (argv <ref> [1] </ref>, "-trace") == 0) f svPabloTraceFlag = 1; argc--; argv [1] = argv [0]; argv++; g else if (strcmp (argv [1], "-notrace") == 0) f svPabloTraceFlag = 0; argc--; argv [1] = argv [0]; argv++; g svPabloTraceInit ( svPabloNumNodes (), svPabloMyID () ); returnValue = svPabloParser main ( argc, argv, envp ); svPabloTraceExit ( svPabloNumNodes (), svPabloMyID () ); return returnValue; g 76 int svPabloTraceExit ( nproc, myID ) int nproc; /* Number of processes */ int myID; /* Process ID
Reference: [2] <author> Ruth Aydt. </author> <title> The Pablo Self-Defining Data Format. </title> <type> Technical report, </type> <institution> Department of Computer Science at the University of Illinois at Urbana-Champaign, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Performance browsing is accomplished by correlating the performance data gathered at run-time with the source code, performing statistical analyses, and creating a performance file. This performance file, stored in the Pablo Self-Defining Data Format (SDDF) <ref> [2] </ref>, is used as input to the SvPablo tool which presents the performance information as it relates to the original source code. This document is a combined user guide and reference manual.
Reference: [3] <institution> The Portland Group, Inc. </institution> <note> PGHPF User's Guide, </note> <year> 1994. </year>
Reference-contexts: The current release supports ANSI C programs and High Performance Fortran (HPF) programs compiled with the Portland Group HPF compiler (pghpf ) <ref> [3] </ref>. SvPablo is derived from joint work of the Pablo group at the University of Illinois at Urbana-Champaign and the Center for Research in Parallel Computation at Rice University [1]. <p> The source code for the HPF data capture library is provided in the SvPablo directory: Src/Programs and consists of the following files: * pghpf2SDDF.c * pghpf2SDDF.h * hpf dsSDDF.h For more information on compiling, linking, and running HPF programs, see the PGHPF User's Guide <ref> [3] </ref>. 4.2 Notes on Instrumentation Overhead and How to Reduce It As mentioned above, the HPF instrumentation is done automatically by the compiler for every line and function that is executed. This automatic instrumentation will create an overhead that is dependent on programming style.
Reference: [4] <author> Marco Zagha, Brond Larson, Steve Turner, and Marty Itzkowitz. </author> <title> Performance Analysis Using the MIPS R10000 Performance Counters. </title> <booktitle> Proceedings of Supercomputing'96, </booktitle> <month> November </month> <year> 1995. </year> <month> 87 </month>
Reference-contexts: computes the duration of the loop and increments its timer and counter. void svPabloLoopEnd ( EventID ) int EventID; /* Event ID */ f 79 80 E Using the MIPS R10000 Hardware Performance Counters The SvPablo data capture library supports the use of the MIPS R10000 (R10K) hardware performance counters <ref> [4] </ref> to allow the visualization of hardware events on the SGI Power Challenge, the SGI Origin 2000, and other architectures that use the MIPS R10K processor.
References-found: 4

