URL: http://www.apocalypse.org/pub/u/antony/phantom/overview.ps
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Language Overview  
Author: Antony Courtney 
Date: May 14, 1995  
Address: College Dublin Ireland  
Affiliation: Department of Computer Science Trinity  
Abstract: Phantom is a new interpreted language designed to address many of the problems which arise when developing large-scale, interactive, distributed applications such as distributed conferencing systems, multi-player games or collaborative work tools. To meet the requirements of this application domain, Phantom combines the distributed lexical scoping semantics of Obliq with a substantial language core. The language is based on a safe, extended subset of Modula-3, and supports a number of modern programming features, including: static structural-equivalence typing, objects, interfaces, lightweight threads, exceptions, garbage collection, higher-order functions, lambda expressions, a keyword binding mechanism, dynamically sized lists, slice indexing notation, and type-safe implicit declarations. This paper presents an overview of each of the key features of the language core, and presents code examples to illustrate how these features are used in practice. fl email: Antony.Courtney@cs.tcd.ie
Abstract-found: 1
Intro-found: 1
Reference: [BNOW94] <author> Anthony D. Birrell, Greg Nelson, S. Owicki, and E. Wobber. </author> <title> Network Objects. </title> <type> Technical Report 115, </type> <institution> Digital Equipment Corporation, Systems Research Centre, </institution> <year> 1994. </year>
Reference-contexts: The design of Phantom also provides for distributed garbage collection, using a reference-counting scheme similar to ILU [JSS94] or SRC's Network Objects <ref> [BNOW94] </ref>. This reference counting scheme will not collect cyclic references which span network sites; such cycles must be explicitly broken by the application programmer.
Reference: [Car95] <author> Luca Cardelli. </author> <title> A Language with Distributed Scope. </title> <booktitle> In Principles of Programming Languages, </booktitle> <month> January </month> <year> 1995. </year> <note> URL: http://www.research.digital.com/SRC/Obliq/Obliq.html. </note>
Reference-contexts: The interpreter for Phantom is implemented entirely in ANSI C for portability, and may be extended with C procedures using the interpreter's foreign function interface. Phantom combines the distributed lexical scoping semantics of Obliq <ref> [Car95] </ref> with a substantial language core based on a safe, extended subset of Modula-3. The distribution model of Phantom is adequately described elsewhere [Cou95]. This paper is intended to give an overview of the programming features in the language core which are not directly relevant to distribution. <p> Phantom objects have attributes (containing state information), a number of methods 9 (for performing operations), and support single-inheritance. Phantom uses a class--based object model (rather than prototypes, as in Obliq <ref> [Car95] </ref> or Self [US87]). While classes are more verbose than prototypes, we feel that classes provide for a cleaner separation between the interface and implementation of objects, and scale better for large applications. <p> To simplify the coding of this common case, Phantom provides serialised object types, a concept borrowed from Obliq <ref> [Car95] </ref>. An instance of a serialised object type has an implicit mutex associated with the object at runtime. Whenever an external 3 method call or attribute update occurs, the implicit mutex of the object is locked for the duration of the call.
Reference: [Cou95] <author> Antony Courtney. Phantom: </author> <title> An Interpreted Language for Distributed Programming. </title> <booktitle> In Proceedings of the USENIX Conference on Object-Oriented Technologies (COOTS), </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Phantom combines the distributed lexical scoping semantics of Obliq [Car95] with a substantial language core based on a safe, extended subset of Modula-3. The distribution model of Phantom is adequately described elsewhere <ref> [Cou95] </ref>. This paper is intended to give an overview of the programming features in the language core which are not directly relevant to distribution. Phantom most closely resembles an extended subset of Modula-3 [Nel91] in its syntax and semantics.
Reference: [JSS94] <author> Bill Janssen, Mike Spreitzer, and Denis Severson. </author> <title> Inter-Language Unification, 1.6.4. </title> <type> Technical Report P94-00058, </type> <institution> Xerox Corporation, Palo Alto Research Centre, </institution> <month> May </month> <year> 1994. </year> <note> URL: http://ftp.parc.xerox.com/pub/ilu/ilu.html. </note>
Reference-contexts: The design of Phantom also provides for distributed garbage collection, using a reference-counting scheme similar to ILU <ref> [JSS94] </ref> or SRC's Network Objects [BNOW94]. This reference counting scheme will not collect cyclic references which span network sites; such cycles must be explicitly broken by the application programmer.
Reference: [KR94] <author> Richard A. Kelsey and Jonathan A. Rees. </author> <title> A Tractable Scheme Implementation. </title> <booktitle> Lisp and Symbolic Computation, </booktitle> <year> 1994. </year>
Reference-contexts: A proof-of-concept interface to the Tk GUI toolkit is included with the interpreter which supports a subset of the Tk widgets. The current implementation compiles Phantom source programs to byte-codes for a virtual machine similar to that used in Scheme48 <ref> [KR94] </ref>.
Reference: [Nel91] <author> Greg Nelson, </author> <title> editor. Systems Programming with Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: The distribution model of Phantom is adequately described elsewhere [Cou95]. This paper is intended to give an overview of the programming features in the language core which are not directly relevant to distribution. Phantom most closely resembles an extended subset of Modula-3 <ref> [Nel91] </ref> in its syntax and semantics. Modula-3 was chosen as a starting point because it provides a number of powerful language features (such as thread support and exception handling), and its type system provides the level of detail required to perform automatic marhsalling. However, Phantom is not Modula-3. <p> Threads are provided in a manner very similar to the Modula-3 Thread interface <ref> [Nel91] </ref>, although in Phantom threads are more tightly integrated into the language. 11.1 Creating and Joining Threads To create a new thread, the builtin primitive fork () is used. fork () takes a single argument, which is a procedure of no arguments returning a value of some type. fork () returns
Reference: [Ros92] <author> Guido Van Rossum. </author> <title> Python Language Reference Manual. </title> <journal> software documentation, </journal> <year> 1992. </year>
Reference-contexts: Since lists and strings use 0-based indexing, last (x) is equivalent to len (x) - 1. 3.4 Slice Indexing Notation Phantom supports slice indexing in a manner similar to Python <ref> [Ros92] </ref>. Slice indexing provides a mechanism for constructing a list or string by extracting all elements in a certain range of an existing list or string. <p> use a variable identifier in an expression if the variable has not been declared either explicitly (through a var declaration), or implicitly through initial assignment to that variable. 5 Call-By-Object-Reference Semantics Phantom does not provide general-purpose reference types, but certain types are always handled using reference semantics, as in Python <ref> [Ros92] </ref>. The types which have reference semantics are object types, list types, and the thread types (mutex, condition, and thread). This is illustrated in the function filter () of the primes example, which takes the current sieve as a formal parameter.
Reference: [US87] <author> David Ungar and Randall B. Smith. </author> <title> Self: The Power of Simplicity. </title> <journal> ACM Sigplan Notices, </journal> <volume> 2(12), </volume> <year> 1987. </year> <month> 25 </month>
Reference-contexts: Phantom objects have attributes (containing state information), a number of methods 9 (for performing operations), and support single-inheritance. Phantom uses a class--based object model (rather than prototypes, as in Obliq [Car95] or Self <ref> [US87] </ref>). While classes are more verbose than prototypes, we feel that classes provide for a cleaner separation between the interface and implementation of objects, and scale better for large applications.
References-found: 8

