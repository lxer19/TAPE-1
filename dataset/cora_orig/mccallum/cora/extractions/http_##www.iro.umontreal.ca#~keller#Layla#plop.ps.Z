URL: http://www.iro.umontreal.ca/~keller/Layla/plop.ps.Z
Refering-URL: http://www.iro.umontreal.ca/~keller/publications.html
Root-URL: http://www.iro.umontreal.ca
Title: Manager-Agent and Remote Operation: Two Key Patterns for Network Management Interfaces  
Author: Jean Tessier* Rudolf K. Keller 
Keyword: Network Management Interface, API (Application Programming Interface), OSI (Open Systems Interconnection), Manager-Agent pattern, Remote Operation pattern, Layla.  
Address: C.P. 6128, succursale Centre-ville, Montral (Qubec) H3C 3J7, Canada  
Affiliation: Dpartement dinformatique et de recherche oprationnelle Universit de Montral  
Email: e-mail: Jean.Tessier@att.com, keller@iro.umontreal.ca  
Phone: voice: (514) 343-6782, fax: (514) 343-5834  
Web: www: http://www.iro.umontreal.ca/~keller  
Abstract: Developing network management interfaces (NMIs) is a challenging task involving multiple software layers, application programming interfaces (APIs), specification languages and tools. In order to ease the job of NMI developers, we have developed Layla, a prototype application framework supporting Open Systems Interconnection (OSI) NMIs. Layla is based on a heterogeneous yet coherent system of design patterns that includes previously published patterns, new patterns taken from NMI standards, and a couple of Layla-specific patterns relevant in Laylas API. The paper gives a brief overview of the pattern language underlying the Layla framework and discusses in detail two key patterns of the pattern language, the Manager-Agent and the Remote Operation patterns. The former pattern captures the regrouping of resources under the supervision and control of a responsible entity, whereas the latter encompasses clients that need to invoke operations on remote objects as if they were local. 
Abstract-found: 1
Intro-found: 1
Reference: [BMR + 96] <author> Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stal. </author> <title> Pattern-Oriented Software Architecture - A System of Patterns. </title> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference-contexts: The Managed Object, Translator, and Inherited Behavior patterns are discussed in [TKB96, Tes96]. The remaining patterns of the language are described in [GHJV94], except for Reactor, which is discussed in [Sch95]. 3 Discussion of Manager-Agent and Remote Operation Patterns Among the patterns published in the literature, the Broker <ref> [BMR + 96] </ref>, the Forwarder Receiver [BMR + 96], and the Master-Slave [Bus95, BMR + 96] patterns, together with the traditional client-server model, are probably most closely related to our key patterns (some further relationships to other patterns are discussed in the respective templates in Section 4). <p> The remaining patterns of the language are described in [GHJV94], except for Reactor, which is discussed in [Sch95]. 3 Discussion of Manager-Agent and Remote Operation Patterns Among the patterns published in the literature, the Broker <ref> [BMR + 96] </ref>, the Forwarder Receiver [BMR + 96], and the Master-Slave [Bus95, BMR + 96] patterns, together with the traditional client-server model, are probably most closely related to our key patterns (some further relationships to other patterns are discussed in the respective templates in Section 4). <p> The remaining patterns of the language are described in [GHJV94], except for Reactor, which is discussed in [Sch95]. 3 Discussion of Manager-Agent and Remote Operation Patterns Among the patterns published in the literature, the Broker [BMR + 96], the Forwarder Receiver [BMR + 96], and the Master-Slave <ref> [Bus95, BMR + 96] </ref> patterns, together with the traditional client-server model, are probably most closely related to our key patterns (some further relationships to other patterns are discussed in the respective templates in Section 4). <p> But even with fixed roles, both sides can initiate asynchronous communication with one another, something that is not explicitly represented in the other patterns. According to the classification of Gamma et al. [GHJV94], Manager-Agent is of type class structural, while according to the classification of Buschmann et al. <ref> [BMR + 96] </ref>, it is an architectural framework that provides access to objects through abstraction. Note that the Manager-Agent pattern is quite different from the Mediator [GHJV94] pattern, where the manager would correspond to the mediator and the agents to the colleagues.
Reference: [Bus95] <author> Frank Buschmann. </author> <title> The master-slave pattern. </title> <editor> In James O. Coplien and Douglas C. Schmidt, editors, </editor> <booktitle> Pattern Languages of Program Design, chapter 29, </booktitle> <pages> pages 133142. </pages> <publisher> Addison-Wesley, </publisher> <year> 1995. </year> <booktitle> (Reviewed Proceedings of the First International Conference on Pattern Languages of Programming (PLoP95), </booktitle> <address> Monticello, IL, </address> <year> 1994). </year>
Reference-contexts: The remaining patterns of the language are described in [GHJV94], except for Reactor, which is discussed in [Sch95]. 3 Discussion of Manager-Agent and Remote Operation Patterns Among the patterns published in the literature, the Broker [BMR + 96], the Forwarder Receiver [BMR + 96], and the Master-Slave <ref> [Bus95, BMR + 96] </ref> patterns, together with the traditional client-server model, are probably most closely related to our key patterns (some further relationships to other patterns are discussed in the respective templates in Section 4).
Reference: [GHJV94] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns. Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Layla was built for OSI NMIs and therefore includes provisions for the object-oriented nature of CMIS, which is not necessarily found in other protocols for network management. At an early stage in the development of Layla, we decided to take an approach based on design patterns <ref> [GHJV94, Pre94] </ref>. The resulting framework is a heterogeneous system of design patterns that includes previously published patterns and patterns adapted to NMIs, as well as new patterns taken from NMI standards and a couple of basic patterns relevant in Laylas application programming interface (API). <p> The Managed Object, Translator, and Inherited Behavior patterns are discussed in [TKB96, Tes96]. The remaining patterns of the language are described in <ref> [GHJV94] </ref>, except for Reactor, which is discussed in [Sch95]. 3 Discussion of Manager-Agent and Remote Operation Patterns Among the patterns published in the literature, the Broker [BMR + 96], the Forwarder Receiver [BMR + 96], and the Master-Slave [Bus95, BMR + 96] patterns, together with the traditional client-server model, are probably <p> But even with fixed roles, both sides can initiate asynchronous communication with one another, something that is not explicitly represented in the other patterns. According to the classification of Gamma et al. <ref> [GHJV94] </ref>, Manager-Agent is of type class structural, while according to the classification of Buschmann et al. [BMR + 96], it is an architectural framework that provides access to objects through abstraction. Note that the Manager-Agent pattern is quite different from the Mediator [GHJV94] pattern, where the manager would correspond to the <p> According to the classification of Gamma et al. <ref> [GHJV94] </ref>, Manager-Agent is of type class structural, while according to the classification of Buschmann et al. [BMR + 96], it is an architectural framework that provides access to objects through abstraction. Note that the Manager-Agent pattern is quite different from the Mediator [GHJV94] pattern, where the manager would correspond to the mediator and the agents to the colleagues. <p> The relationships between managers and agents must be maintained adequately. One solution is for each manager and each agent to maintain a list of its collaborating opposites, but such a solution is inflexible. Instead, the Mediator <ref> [GHJV94] </ref> pattern may be used to maintain all these relationships. Moreover, the Remote Operation pattern may be used to provide location transparency. Finally, the Broker [BMR + ] pattern can be used to provide both at the same time. <p> Both are flavors of NMIs. CMIS has been successfully implemented in two independent NMI frameworks: Layla and OSIMIS, the latter being from the University College of London [PKMB95]. Related Patterns Observer: The Observer <ref> [GHJV94] </ref> pattern could be used to implement the notification messages that travel from the agents to the managers. In current implementations however, all data regarding notification is carried in the initial message, in order not to overburden the system with such data transfers during later execution. <p> Remote Operation: The set of interactions between agents and managers (the communication protocol) can be defined using instances of the Remote Operation pattern. 10 Mediator: The Mediator <ref> [GHJV94] </ref> pattern can be used to handle the communication between the managers and the agents. In this way, each side doesnt have to possess any knowledge of the other. New managers or new agents can be inserted in the system without affecting the already existing managers and agents. <p> Reactor: The event loop that drives the managers and the agents can be viewed as an instance of the Reactor [Sch95] pattern. Composite: Complex parameters in the operations between managers and agents can be viewed as instances of the Composite <ref> [GHJV94] </ref> pattern. REMOTE OPERATION PATTERN Class Structural Intent Enable clients to invoke operations on remote objects as if they were local. This pattern decouples the client from the network calls needed to access the remote object. Also Known As Remote Procedure Call Motivation This pattern applies in the following context. <p> The client and the server interact locally with their respective stubs. The result is a system where the invocation of a remote operation is decoupled from the network interactions needed to carry it out. The Remote Operation pattern is a refinement of the Proxy <ref> [GHJV94] </ref> pattern in that it further decouples the network interactions from the invoker and the performer of the operation, in respect to both the client and the server sides of Remote Operation. <p> Translator: The Remote Operation pattern may use the Translator [TKB96] pattern in the Client and Server Stubs in order to translate between the client/server data and the formats supported by the Connection (the marshalling and unmarshalling of data). Abstract Factory: The Remote Operation can use an Abstract Factory <ref> [GHJV94] </ref> pattern to create connection instances without needing prior knowledge of the actual transmission mechanism being used. 16 Conclusion In this paper, the Manager-Agent and the Remote Operation patterns, two key patterns for NMIs, have been presented.
Reference: [PKMB95] <author> George Pavlou, Graham Knight, Kevin McCarthy, and Saleem Bhatti. </author> <title> The OSIMIS platform: Making OSI management simple. </title> <editor> In Adarshpal Sethi, Yves Raynaud, and Fabienne Faure-Vincent, editors, </editor> <booktitle> Integrated Network Management IV, </booktitle> <pages> pages 480493. </pages> <publisher> Chapman and Hall, </publisher> <year> 1995. </year>
Reference-contexts: Known Uses This pattern can be found in both CMIS, a part of OSI [TS92], and SNMP, a part of Internet [Ros91]. Both are flavors of NMIs. CMIS has been successfully implemented in two independent NMI frameworks: Layla and OSIMIS, the latter being from the University College of London <ref> [PKMB95] </ref>. Related Patterns Observer: The Observer [GHJV94] pattern could be used to implement the notification messages that travel from the agents to the managers.
Reference: [Pre94] <author> Wolfgang Pree. </author> <title> Design Patterns for Object-Oriented Software Development. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Layla was built for OSI NMIs and therefore includes provisions for the object-oriented nature of CMIS, which is not necessarily found in other protocols for network management. At an early stage in the development of Layla, we decided to take an approach based on design patterns <ref> [GHJV94, Pre94] </ref>. The resulting framework is a heterogeneous system of design patterns that includes previously published patterns and patterns adapted to NMIs, as well as new patterns taken from NMI standards and a couple of basic patterns relevant in Laylas application programming interface (API).
Reference: [Ros91] <author> Marshall T. Rose. </author> <title> The Simple Book: An Introduction to Management of TCP/IP-based Internets. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: International standardization bodies have produced various tools for defining network management systems and their NMIs. Among the most advanced tools are the Common Management Information Service (CMIS) of Open Systems Interconnection (OSI) [TS92], and the Simple Network Management Protocol (SNMP) of the Internet <ref> [Ros91] </ref>. Whereas CMIS, along with CMIP, its protocol for information exchange between systems, is based on the object-oriented paradigm, SNMP uses tables not unlike the tables used in the relational model of databases. <p> Finally, the Broker [BMR + ] pattern can be used to provide both at the same time. Known Uses This pattern can be found in both CMIS, a part of OSI [TS92], and SNMP, a part of Internet <ref> [Ros91] </ref>. Both are flavors of NMIs. CMIS has been successfully implemented in two independent NMI frameworks: Layla and OSIMIS, the latter being from the University College of London [PKMB95]. <p> An example of this can be seen in the OSI Reference Model [TS92] for data communication and in the layering of TCP over IP <ref> [Ros91] </ref>. 3. More than one performer may exist in the system. In this case, the stubs can use a trader to select an appropriate performer for the operation. 4. Some retransmission method needs to be implemented in case some request (or result) gets lost.
Reference: [Sch95] <author> Douglas C. Schmidt. </author> <title> Reactor: An object behavioral pattern for concurrent event demultiplexing and event handler dispatching. </title> <editor> In James O. Coplien and Douglas C. Schmidt, editors, </editor> <booktitle> Pattern Languages of Program Design, chapter 29, </booktitle> <pages> pages 529545. </pages> <publisher> Addison-Wesley, </publisher> <year> 1995. </year> <booktitle> (Reviewed Proceedings of the First International Conference on Pattern Languages of Programming (PLoP95), </booktitle> <address> Monticello, IL, </address> <year> 1994). </year>
Reference-contexts: Agents are responsible for monitoring their resources and notifying managers of exceptional behavior. Reactor: Each process, whether a manager or an agent, has an event processing loop that drives the application and processes the stimuli received from the management system (cf. <ref> [Sch95] </ref>). Managed Object: Agent NMIs represent their resources as a MIB (management information base), a collection of discreet manageable items. Each such items has a public interface that encapsulates the details of the actual resource. <p> The Managed Object, Translator, and Inherited Behavior patterns are discussed in [TKB96, Tes96]. The remaining patterns of the language are described in [GHJV94], except for Reactor, which is discussed in <ref> [Sch95] </ref>. 3 Discussion of Manager-Agent and Remote Operation Patterns Among the patterns published in the literature, the Broker [BMR + 96], the Forwarder Receiver [BMR + 96], and the Master-Slave [Bus95, BMR + 96] patterns, together with the traditional client-server model, are probably most closely related to our key patterns (some <p> The broker can also take care of aggregating multiple responses. In essence, it incorporates characteristics of both the Remote Operation pattern and the Mediator pattern. Reactor: The event loop that drives the managers and the agents can be viewed as an instance of the Reactor <ref> [Sch95] </ref> pattern. Composite: Complex parameters in the operations between managers and agents can be viewed as instances of the Composite [GHJV94] pattern. REMOTE OPERATION PATTERN Class Structural Intent Enable clients to invoke operations on remote objects as if they were local.
Reference: [Sch96] <author> Douglas C. Schmidt. </author> <title> A family of reusable design patterns for application-level gateways. Theory and Practice of Object Systems, 1996. John Wiley and Sons. </title> <journal> Special Issue on Patterns and Pattern Languages. </journal> <note> To appear. </note>
Reference-contexts: We believe that this system of patterns can serve as a basis for a pattern language for NMIs. In Figure 2, strategic patterns <ref> [Sch96] </ref> are placed at the top, and the more generic but less critical tactical patterns are depicted in the region below the separator line (dashed line). Arrows stand for use-relationships, indicating that the originating pattern uses the destination pattern for the functionality mentioned on the label of the arrow. <p> Additionally, whether such interactions require unidirectional or bidirectional communication. Control of Interaction: Whether one side always initiates interactions (superior-subordinate) or whether both sides may initiate interactions (peer-to-peer). Importance: Whether the pattern is of great importance within the overall system (strategic), or rather addressing some small-scale task (tactical) <ref> [Sch96] </ref>. (We are aware that this criterion may be difficult to apply, depending on the framework at hand.) Applying these criteria to our list of patterns leads to the table presented below (Table 1).
Reference: [Tes96] <author> Jean Tessier. </author> <title> An application framework for OSI network management interfaces. </title> <type> Masters thesis, </type> <institution> Universit de Montral, </institution> <address> Montreal, Quebec, Canada, </address> <month> April </month> <year> 1996. </year> <note> In French. </note>
Reference-contexts: However, SNMP is moving towards the object-oriented paradigm, with its new version SNMPv2 embodying some notion of inheritance. As part of our work, we have built Layla, a prototype pattern-based framework for implementing NMIs in C++ <ref> [TKB96, Tes96] </ref>. We wanted to leverage off commercial implementations of standardized network management protocols, and therefore came up with a number of wrapper classes that encapsulate the specific details of any particular protocol engine. <p> The Manager-Agent and Remote Operation patterns, governing a large part of our prototype framework, can be considered key patterns of an NMI pattern language and are the subject of the rest of this paper. The Managed Object, Translator, and Inherited Behavior patterns are discussed in <ref> [TKB96, Tes96] </ref>.
Reference: [TKB96] <author> Jean Tessier, Rudolf K. Keller, and Gregor v. Bochmann. Layla: </author> <title> A pattern-based framework for network management interfaces. </title> <type> Technical Report GELO-63, </type> <institution> Universit de Montral, Montreal, </institution> <month> June </month> <year> 1996. </year> <title> Accepted by guest editors of Comm. of the ACM, currently under review by regular editors of CACM. </title>
Reference-contexts: However, SNMP is moving towards the object-oriented paradigm, with its new version SNMPv2 embodying some notion of inheritance. As part of our work, we have built Layla, a prototype pattern-based framework for implementing NMIs in C++ <ref> [TKB96, Tes96] </ref>. We wanted to leverage off commercial implementations of standardized network management protocols, and therefore came up with a number of wrapper classes that encapsulate the specific details of any particular protocol engine. <p> The Manager-Agent and Remote Operation patterns, governing a large part of our prototype framework, can be considered key patterns of an NMI pattern language and are the subject of the rest of this paper. The Managed Object, Translator, and Inherited Behavior patterns are discussed in <ref> [TKB96, Tes96] </ref>. <p> Other implementations can be found in Suns and HPs RPC libraries, among others. Related Patterns Manager-Agent: The Remote Operation pattern may be used to define the operations that can be invoked between agents and managers. Translator: The Remote Operation pattern may use the Translator <ref> [TKB96] </ref> pattern in the Client and Server Stubs in order to translate between the client/server data and the formats supported by the Connection (the marshalling and unmarshalling of data).
Reference: [TS92] <author> Adrian Tang and S. Scoggins. </author> <title> Open Networking with OSI. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Moreover, the access interface to the components can greatly vary, depending on their nature, type, and manufacturer. We define a network management interface (NMI) as the upper layers of a network management system, comprising the application layer, the application programming interface, and part of the presentation layer (cf. <ref> [TS92] </ref>). The lower layers, which usually depend heavily on the execution platform at hand, are thus not part of the NMI. <p> Note that the NMI includes a number of communication stacks to access the various components. International standardization bodies have produced various tools for defining network management systems and their NMIs. Among the most advanced tools are the Common Management Information Service (CMIS) of Open Systems Interconnection (OSI) <ref> [TS92] </ref>, and the Simple Network Management Protocol (SNMP) of the Internet [Ros91]. Whereas CMIS, along with CMIP, its protocol for information exchange between systems, is based on the object-oriented paradigm, SNMP uses tables not unlike the tables used in the relational model of databases. <p> Moreover, the Remote Operation pattern may be used to provide location transparency. Finally, the Broker [BMR + ] pattern can be used to provide both at the same time. Known Uses This pattern can be found in both CMIS, a part of OSI <ref> [TS92] </ref>, and SNMP, a part of Internet [Ros91]. Both are flavors of NMIs. CMIS has been successfully implemented in two independent NMI frameworks: Layla and OSIMIS, the latter being from the University College of London [PKMB95]. <p> An example of this can be seen in the OSI Reference Model <ref> [TS92] </ref> for data communication and in the layering of TCP over IP [Ros91]. 3. More than one performer may exist in the system. In this case, the stubs can use a trader to select an appropriate performer for the operation. 4.
References-found: 11

