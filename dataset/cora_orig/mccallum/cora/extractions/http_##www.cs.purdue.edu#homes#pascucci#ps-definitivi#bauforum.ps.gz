URL: http://www.cs.purdue.edu/homes/pascucci/ps-definitivi/bauforum.ps.gz
Refering-URL: 
Root-URL: 
Title: Building Design Programming with a Functional Language  
Author: A. Paoluzzi V. Pascucci 
Note: (to be developed).  
Address: Terza Universita,Via Segre 3, 00146 Roma,, Italy  "La Sapienza",Via Buonarroti 12, 00185 Roma,Italy  
Affiliation: Dip. di Disc. Scientifiche: Sez. Informatica,  Dip. di Informatica e Sistemistica, Universita  
Abstract: A quite complex example of building design programming is discussed in this paper. In particular we introduce some operators which allow to easily define parametric layout plans, where both single and grouped rooms are constrained both on their linear dimensions and on the relative positioning. Such operators are then used to generate constraint-based models of the hierarchical set of spaces which define a terraced building. The given plasm description is completely coordinate free, i.e. all design parts are intrinsically defined. The relative positioning and dimensioning of parts is obtained using constraints. The whole set of design choices, i.e. the design knowledge, is compactly codified within the easily readable plasm description of each plan and section of the building. The 3D model of the building is then automatically generated from plans and sections. The authors believe that such a natural and semantically rich description may be very useful in the design process, mainly if coupled with a very high level (intelligent) graphical interface 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Backus, J., Williams, J.H. & Wimmers, E.L., </author> <year> 1990. </year> <title> An Introduction to the Programming Language FL. </title> <booktitle> In Research Topics in Functional Programming, </booktitle> <editor> D.A. Turner (Ed.), </editor> <publisher> Addison-Wesley, </publisher> <address> Reading. </address>
Reference-contexts: It can be roughly considered as a geometry-oriented extension of a subset of the functional language FL, developed by Backus, Williams and their group at IBM Almaden <ref> [2, 1] </ref>. In this paper we discuss the modeling of a building design as a plasm script. This modeling was done starting from the original set of plans, sections and orthographic views. The modeled project (see Fig. 6) is a terraced housing realized in Bologna (Italy) by the Prof. Arch.
Reference: [2] <author> Backus, J., Williams, J.H., Wimmers, E.L., Lucas, P. & Aiken, A., </author> <year> 1989. </year> <title> FL Language Manual, Parts 1 and 2. </title> <type> IBM Research Report RJ 7100 (67163). </type>
Reference-contexts: It can be roughly considered as a geometry-oriented extension of a subset of the functional language FL, developed by Backus, Williams and their group at IBM Almaden <ref> [2, 1] </ref>. In this paper we discuss the modeling of a building design as a plasm script. This modeling was done starting from the original set of plans, sections and orthographic views. The modeled project (see Fig. 6) is a terraced housing realized in Bologna (Italy) by the Prof. Arch.
Reference: [3] <author> Bernardini, F., Ferrucci, V., Paoluzzi, A. & Pas-cucci, V. </author> <year> 1993. </year> <title> A product operator on cell complexes. </title> <booktitle> Proc. ACM/IEEE 2 nd Symposium on Solid Modeling and Applications, </booktitle> <editor> J. Rossignac, J. Turner and G. Allen (Eds.), </editor> <publisher> ACM Press, </publisher> <pages> pp. 43-52. </pages>
Reference-contexts: for the single housing unit; * section analysis and definition (in 2D) for the sin gle housing unit; fl This work was partially supported from Italian Research Council, with contract n. 91.03226.64, within the "PF Edilizia" Project. * combination of plans and sections, by using the product operator described in <ref> [3] </ref>, in order to automatically generate the volumes of the housing units; * staircase definition (in 3D) to be matched with the stairwell of the housing units; * aggregation of a set of house pairs, in order to generate the complete model of the terraced housing. <p> This method is derived by the intersection of extrusions, special case of the generalized product operation described in <ref> [3] </ref>. <p> respectively are contained within or contain a stripe zone between min_val and max_val, with respect to the coord reference axis, are defined as follows: DEF sel_including_pol (coord::IsIntPos; min_val,max_val::IsReal)= (CAT~AA:(IF:&lt;AND~[LE:min_val~min:coord~[ID], GE:max_val~max:coord~[ID]], [id] , K:&lt;&gt;>)) ; DEF sel_included_pol (coord::IsIntPos; min_val,max_val::IsReal) = (CAT~AA:(IF:&lt;AND~[GE:min_val~min:coord~[ID], LE:max_val~max:coord~[ID]], [ID] , K:&lt;&gt;>)) Finally, the "generalized product" (see Reference <ref> [3] </ref>) && is specialized as the function sel_prod, to be used to combine a zone of a plan with a zone of a section, where the two zones are selected by using the four functions previously discussed.
Reference: [4] <author> Howard,T.L.J., Hewitt,W.T., Hubbold, R.J. & Wyrwas, K.M., </author> <year> 1991. </year> <title> A Practical Introduction to PHIGS and PHIGS PLUS. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: % DEF nw = [MIN:1, MAX:2] % north-west % The definition of the "^" operator will be given as follows, where an affine transformation matrix will be automatically included in a sequence containing the two shapes to be matched, according to the semantics of the ISO standard graphic system PHIGS <ref> [4] </ref>: DEF ^ (geo1,geo2::IsFun) = STRUCT ~ [S1, (T:&lt;1,2&gt;) ~ parameters,S2] WHERE parameters = (AA:-)~TRANS~[geo1~S1,geo2~S2] END where the formal parameters geo1 and geo2 are usually geographic functions which compute the two points on the argument shapes which have to coincide in the resulting structure.
Reference: [5] <author> Paoluzzi, A., Bernardini, F., Cattani, C. & Fer-rucci, V., </author> <year> 1993. </year> <title> Dimension-Independent Modeling with Simplicial Complexes. </title> <journal> ACM Transactions on Graphics 12 </journal> <pages> 56-102. </pages>
Reference-contexts: 1 Introduction The term "Geometric Programming" was introduced to denote the functional approach to geometric design programming with the language plasm developed by the CAD Group at the University of Rome <ref> [7, 5] </ref>. This language was originally developed as a language for building design, but is being currently experimented also as a general purpose language for modeling highly complex geometric shapes.
Reference: [6] <author> Paoluzzi, A., Pascucci, V. & Vicentino, M., </author> <year> 1995. </year> <title> Geometric Programming. A Programming Approach to Geometric Design. </title> <journal> Accepted for pub-blication on ACM Transactions on Graphics. </journal>
Reference-contexts: E.g., let sw, se, nw, ne be four "geographic" functions which compute the lowest left, the lowest right, the highest left and the highest right point of a 2D shape ("polyhedral complex" | see <ref> [6] </ref>), respectively: DEF sw = [MIN:1, MIN:2]; % south-west % DEF se = [MAX:1, MIN:2]; % south-east % DEF ne = [MAX:1, MAX:2]; % north-east % DEF nw = [MIN:1, MAX:2] % north-west % The definition of the "^" operator will be given as follows, where an affine transformation matrix will <p> In order to glue the polyhedral cells of a polyhedral complex into a single element without internal partitions, a special-purpose glue function is defined: DEF glue = MKPOL~[S1,S2,[FROMTO~[K:1,LEN~S2]]] ~UKPOL This function just compute (using the primitive function UKPOL | see <ref> [6] </ref>) a symbolic description of the polyhedral complex which it is applied to, and then slightly modify it, in order to put together all the convex cells into a single polyhedral cell, and finally commits the reconstruction of the internal data structure to the predefined function MKPOL. <p> subset of grid points and (b) grouping the subset of points in order to the define the convex cells of the section and (c) grouping the convex cells to define some polyhedral cells (only when this is necessary), according to the usual semantics of the primitive function MKPOL (see Reference <ref> [6] </ref>): DEF section_1 = MKPOL:&lt;section_grid, &lt;<1,3,4,6&gt;, % basement % &lt;4,6,8,11&gt;,<6,11,15,12&gt;,&lt;8,9,13&gt;,%first floor% &lt;9,11,15,18,17&gt;, % second floor % &lt;17,18,19&gt;>, % roof % &lt;<1&gt;,<2,3>,<4>,<5>,&lt;6&gt;>&gt; ; DEF section_2 = CAT_POL:&lt;section_terr, MKPOL:&lt;section_grid, &lt;<1,3,4,6&gt;, % basement % &lt;4,5,8,11&gt;,<8,9,13&gt;, % first floor % &lt;9,10,18,17&gt;, % second floor % &lt;17,18,19&gt;>, % roof % &lt;<1&gt;,<2,3>,<4>,<5>&gt;>> ; DEF section_3 = CAT_POL:&lt;section_terr,
Reference: [7] <author> Paoluzzi, A. & Sansoni, C., </author> <year> 1992. </year> <title> Programming Language for Solid Variational Geometry. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24 </volume> <pages> 349-366. </pages>
Reference-contexts: 1 Introduction The term "Geometric Programming" was introduced to denote the functional approach to geometric design programming with the language plasm developed by the CAD Group at the University of Rome <ref> [7, 5] </ref>. This language was originally developed as a language for building design, but is being currently experimented also as a general purpose language for modeling highly complex geometric shapes.
References-found: 7

