URL: http://www.orie.cornell.edu/~shmoys/ipco-paper.ps
Refering-URL: http://www.orie.cornell.edu/~shmoys/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A New Approach to Computing Optimal Schedules for the Job-Shop Scheduling Problem  
Author: Paul Martin and David B. Shmoys 
Address: Ithaca, NY 14853.  
Affiliation: School of Operations Research and Industrial Engineering, Cornell University,  
Abstract: From a computational point of view, the job-shop scheduling problem is one of the most notoriously intractable N P-hard optimization problems. In spite of a great deal of substantive research, there are instances of even quite modest size for which it is beyond our current understanding to solve to optimality. We propose several new lower bounding procedures for this problem, and show how to incorporate them into a branch-and-bound procedure. Unlike almost all of the work done on this problem in the past thirty years, our enumerative procedure is not based on the disjunctive graph formulation, but is rather a time-oriented branching scheme. We show that our approach can solve most of the standard benchmark instances, and obtains the best known lower bounds on each.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Adams, E. Balas, and D. Zawack. </author> <title> The shifting bottleneck procedure for job shop scheduling. </title> <journal> Management Sci., </journal> <volume> 34 </volume> <pages> 391-401, </pages> <year> 1988. </year>
Reference-contexts: Algorithms of this type have been proposed by Carlier & Pinson [7], Brucker, Jurisch & Sievers [6] and Applegate & Cook [2]. Although solving job-shop scheduling problems to optimality is difficult, recently there has been progress developing heuristics that find good schedules. Adams, Balas & Zawack <ref> [1] </ref> proposed the shifting bottleneck procedure, which uses a primitive form of iterated local search to produce substantially better schedules than were previously computed. Currently, all of the best known algorithms use iterated local search. <p> We have tested all of our algorithms on the standard benchmark problems. We have used all the problems for which Vaessens, Aarts & Lenstra [21] give recent local search results as well as three larger problems from Adams, Balas & Zawack <ref> [1] </ref>. All computations were performed on a 90MHz Pen-tium computer. Table 1 gives the bounds that we were able to compute along with the amount of time (in seconds) that it took to compute them.
Reference: 2. <author> D. Applegate and W. Cook. </author> <title> A computational study of the job-shop scheduling problem. </title> <journal> ORSA J. Comput., </journal> <volume> 3 </volume> <pages> 149-156, </pages> <year> 1991. </year>
Reference-contexts: Once these variables are set, the time at which each operation starts processing can be easily computed. Algorithms of this type have been proposed by Carlier & Pinson [7], Brucker, Jurisch & Sievers [6] and Applegate & Cook <ref> [2] </ref>. Although solving job-shop scheduling problems to optimality is difficult, recently there has been progress developing heuristics that find good schedules. Adams, Balas & Zawack [1] proposed the shifting bottleneck procedure, which uses a primitive form of iterated local search to produce substantially better schedules than were previously computed. <p> Fisher, Lageweg, Lenstra & Rinnooy Kan [11] examine surrogate duality while Balas [3] and Applegate & Cook <ref> [2] </ref> attempt to find bounds by examining the polyhedral structure of the problem. Neither approach has proven to be practical so far. The strongest computational results of Applegate & Cook [2] use only combinatorial bounds in their branch-and-bound algorithm. <p> Fisher, Lageweg, Lenstra & Rinnooy Kan [11] examine surrogate duality while Balas [3] and Applegate & Cook <ref> [2] </ref> attempt to find bounds by examining the polyhedral structure of the problem. Neither approach has proven to be practical so far. The strongest computational results of Applegate & Cook [2] use only combinatorial bounds in their branch-and-bound algorithm. In this paper we present new lower bounding techniques based on a time-oriented approach to job-shop scheduling. Recently there has been significant success applying time-oriented approaches to other scheduling problems [19] [22]. <p> The bounds found by the packing algorithm are significantly better than other bounds in the literature based on LP-relaxations, such as the cutting plane approach of Applegate & Cook <ref> [2] </ref>. The algorithm however is still to slow to be of practical significance. 3 Processing Windows When considering an instance of the feasibility problem with target makespan T , we can view each operation as constrained to be started within a given time interval. <p> Hence, updating windows on machine i can cause further updates on all other machines. This approach was used by Applegate & Cook <ref> [2] </ref>, Brucker, Sievers, & Jurisch [6], and by Carlier & Pinson [8] as well, although this is apparent only from their computational results.
Reference: 3. <author> E. Balas. </author> <title> On the facial structure of scheduling polyhedra. </title> <journal> Math. Programming Stud., </journal> <volume> 24 </volume> <pages> 179-218, </pages> <year> 1985. </year>
Reference-contexts: Fisher, Lageweg, Lenstra & Rinnooy Kan [11] examine surrogate duality while Balas <ref> [3] </ref> and Applegate & Cook [2] attempt to find bounds by examining the polyhedral structure of the problem. Neither approach has proven to be practical so far. The strongest computational results of Applegate & Cook [2] use only combinatorial bounds in their branch-and-bound algorithm.
Reference: 4. <author> E. Balas and A. Vazacopoulos. </author> <title> Guided Local Search with Shifting Bottleneck for Job Shop Scheduling. </title> <institution> Management Science Research Report #MSRR-609, Graduate School of Industrial Administration, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1994. </year>
Reference-contexts: Currently, all of the best known algorithms use iterated local search. The current champions are a taboo search algorithm by Nowicki & Smutnicki [16] and a technique called reiterated guided local search by Balas & Vazacopoulos <ref> [4] </ref>. Vaessens, Aarts & Lenstra [21] provide an excellent survey of recent developments in this area. There has been less progress in finding good lower bounds for the job-shop scheduling problem. The job bound is the maximum total processing required for the operations on a single job. <p> For Double Shave, we use C-P Shave as our initial lower bound and the best known upper bound, primarily due to Balas & Vazacopoulos <ref> [4] </ref>. C-P Shave provides a significant improvement over Iterated Carlier Pinson. The computation time for C-P Shave ranged from 3 seconds for the fastest problem to 160 seconds for the slowest; the more difficult problems are generally in the one to two minute range.
Reference: 5. <author> P. Bratley, M. Florian, and P. Robillard. </author> <title> On sequencing with earliest starts and due dates with application to computing bounds for the (n=m=G=F max ) problem. </title> <journal> Naval Res. Logist. Quart., </journal> <volume> 20 </volume> <pages> 57-67, </pages> <year> 1973. </year>
Reference-contexts: The one-machine bound of Bratley, Florian, & Robillard <ref> [5] </ref> is the the maximum over all machines i 2 M of the bound for the one-machine subproblem for i. This subproblem is N P-hard, although in practice it is not difficult to solve.
Reference: 6. <author> P. Brucker, B. Jurisch, and B. Sievers. </author> <title> A branch and bound algorithm for the job-shop scheduling problem. </title> <journal> Discrete Appl. Math., </journal> <volume> 49 </volume> <pages> 107-127, </pages> <year> 1994. </year>
Reference-contexts: Once these variables are set, the time at which each operation starts processing can be easily computed. Algorithms of this type have been proposed by Carlier & Pinson [7], Brucker, Jurisch & Sievers <ref> [6] </ref> and Applegate & Cook [2]. Although solving job-shop scheduling problems to optimality is difficult, recently there has been progress developing heuristics that find good schedules. <p> Hence, updating windows on machine i can cause further updates on all other machines. This approach was used by Applegate & Cook [2], Brucker, Sievers, & Jurisch <ref> [6] </ref>, and by Carlier & Pinson [8] as well, although this is apparent only from their computational results.
Reference: 7. <author> J. Carlier and E. Pinson. </author> <title> An algorithm for solving the job-shop problem. </title> <journal> Management Sci., </journal> <volume> 35 </volume> <pages> 164-176, </pages> <year> 1989. </year>
Reference-contexts: The job-shop scheduling problem is N P-hard [12] and has proven to be very difficult even for relatively small instances. An instance with 10 jobs and 10 machines posed in a 1963 book by Muth & Thompson [10] remained unsolved until Carlier & Pinson <ref> [7] </ref> finally solved it in 1986, and there is a 20 job and 10 machine instance of Lawrence [15] that remains unsolved despite a great amount of effort that has been devoted to improving optimization codes for this problem. <p> The decision variables in this formulation indicate the order in which operations are processed on each machine. Once these variables are set, the time at which each operation starts processing can be easily computed. Algorithms of this type have been proposed by Carlier & Pinson <ref> [7] </ref>, Brucker, Jurisch & Sievers [6] and Applegate & Cook [2]. Although solving job-shop scheduling problems to optimality is difficult, recently there has been progress developing heuristics that find good schedules. <p> Hence, we can rephrase the problem of computing a reduced processing window to that of adjusting heads and tails, which was an idea first introduced by Carlier & Pinson <ref> [7] </ref>. We can exploit the fact that the problem 1jr j ; pmtnjL max can be solved in polynomial time, and in fact, admits a nice min-max theorem. <p> Remarkably, Carlier & Pinson <ref> [7] </ref> have shown that minimum length of a preemptive schedule is equal to max SO i fr (S) + p (S) + q (S)g: Consider an operation k 2 O i with current processing window [u k ; v k ]; we shall maintain the invariant that if there is feasible
Reference: 8. <author> J. Carlier and E. Pinson. </author> <title> A practical use of Jackson's preemptive schedule for solving the job-shop problem. </title> <journal> Ann. Oper. Res., </journal> <volume> 26 </volume> <pages> 269-287, </pages> <year> 1990. </year>
Reference-contexts: The preemptive one-machine subproblem is the relaxation of the one-machine subproblem obtained by relaxing the constraint that each operation must be processed without interruption. Jackson [14] gives an O (n log n) algorithm for computing the optimal schedule for this subproblem. Carlier & Pinson <ref> [8] </ref> give an algorithm that strengthens the preemptive one-machine bound but maintains polynomial computability. Their algorithm updates the heads and tails of operations to account for the fact that we are looking for a non-preemptive schedule. <p> Once we have updated the starting point of each interval, we must also update the ending point. We can then repeat these updates until no further changes can be made for this machine. Carlier-Pinson updates Carlier & Pinson <ref> [8] </ref> gave the first procedure to update heads and tails for the one-machine problem. <p> Once we find an ascendent set (k; S), we can update u k maxfr k ; c (S)g, where c (S) = maxfr (T ) + p (T )jT Sg is a lower bound on the time at which the operations in S can complete processing. Carlier and Pinson <ref> [8] </ref> give an O (n 2 ) algorithm based on Jackson's algorithm to solve 1jr j ; pmtnjL max that finds ascendent sets and updates all of the heads or all of the tails for a one-machine problem. <p> Hence, updating windows on machine i can cause further updates on all other machines. This approach was used by Applegate & Cook [2], Brucker, Sievers, & Jurisch [6], and by Carlier & Pinson <ref> [8] </ref> as well, although this is apparent only from their computational results.
Reference: 9. <author> J. Carlier and E. Pinson. </author> <title> Adjustments of heads and tails for the job-shop problem. </title> <journal> European J. Oper. Res., </journal> <volume> 78 </volume> <pages> 146-161, </pages> <year> 1994. </year>
Reference-contexts: We can use their algorithm directly on the one-machine relaxation to improve the processing windows. Recently, Carlier & Pinson <ref> [9] </ref> have given an O (n log n) implementation of this algorithm. Once again, we need to apply this procedure alternately to heads and tails until no further updates are possible. Surprisingly, the two algorithms, One-Machine Shave and Carlier-Pinson Updates yield the same result. Theorem 2. <p> Thus we can shave a portion of the window by applying this idea. Carlier & Pinson <ref> [9] </ref> have independently proposed this idea; a preliminary version of our results for this was announced in [18]. We shall describe our algorithm only in terms of shaving the start of the windows; of course these ideas apply to the end as well.
Reference: 10. <author> H. Fisher and G.L. Thompson. </author> <title> Probabilistic learning combinations of local job-shop scheduling rules. </title> <editor> In J.F. Muth and G.L. Thompson, editors, </editor> <booktitle> Industrial Scheduling, </booktitle> <pages> pages 225-251. </pages> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1963. </year>
Reference-contexts: The job-shop scheduling problem is N P-hard [12] and has proven to be very difficult even for relatively small instances. An instance with 10 jobs and 10 machines posed in a 1963 book by Muth & Thompson <ref> [10] </ref> remained unsolved until Carlier & Pinson [7] finally solved it in 1986, and there is a 20 job and 10 machine instance of Lawrence [15] that remains unsolved despite a great amount of effort that has been devoted to improving optimization codes for this problem.
Reference: 11. <author> M.L. Fisher, B.J. Lageweg, J.K. Lenstra, and A.H.G. Rinnooy Kan. </author> <title> Surrogate duality relaxation for job shop scheduling. </title> <journal> Discrete Appl. Math., </journal> <volume> 5 </volume> <pages> 65-75, </pages> <year> 1983. </year>
Reference-contexts: Fisher, Lageweg, Lenstra & Rinnooy Kan <ref> [11] </ref> examine surrogate duality while Balas [3] and Applegate & Cook [2] attempt to find bounds by examining the polyhedral structure of the problem. Neither approach has proven to be practical so far. The strongest computational results of Applegate & Cook [2] use only combinatorial bounds in their branch-and-bound algorithm.
Reference: 12. <author> M.R. Garey, D.S. Johnson, and R. Sethi. </author> <title> The complexity of flowshop and jobshop scheduling. </title> <journal> Math. Oper. Res., </journal> <volume> 1 </volume> <pages> 117-129, </pages> <year> 1976. </year>
Reference-contexts: The job-shop scheduling problem is N P-hard <ref> [12] </ref> and has proven to be very difficult even for relatively small instances.
Reference: 13. <author> R.L. Graham, E.L. Lawler, J.K. Lenstra, and A.H.G. Rinnooy Kan. </author> <title> Optimization and approximation in deterministic sequencing and scheduling. </title> <journal> Ann. Discrete Math., </journal> <volume> 5 </volume> <pages> 287-326, </pages> <year> 1979. </year>
Reference-contexts: We can improve upon the machine bound by considering the one-machine subproblem obtained by relaxing the capacity constraint on all machines except one. This problem is the one-machine scheduling problem with heads and tails for each operations: 1 j r j j L max in the notation of <ref> [13] </ref>.
Reference: 14. <author> J.R. Jackson. </author> <title> An extension of Johnson's results on job lot scheduling. </title> <journal> Naval Res. Logist. Quart., </journal> <volume> 3 </volume> <pages> 201-203, </pages> <year> 1956. </year>
Reference-contexts: This subproblem is N P-hard, although in practice it is not difficult to solve. The preemptive one-machine subproblem is the relaxation of the one-machine subproblem obtained by relaxing the constraint that each operation must be processed without interruption. Jackson <ref> [14] </ref> gives an O (n log n) algorithm for computing the optimal schedule for this subproblem. Carlier & Pinson [8] give an algorithm that strengthens the preemptive one-machine bound but maintains polynomial computability.
Reference: 15. <author> S. Lawrence. </author> <title> Resource Constrained Project Scheduling: an Experimental Investigation of Heuristic Scheduling Techniques (Supplement). </title> <institution> Graduate School of Industrial Administration, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1984. </year>
Reference-contexts: An instance with 10 jobs and 10 machines posed in a 1963 book by Muth & Thompson [10] remained unsolved until Carlier & Pinson [7] finally solved it in 1986, and there is a 20 job and 10 machine instance of Lawrence <ref> [15] </ref> that remains unsolved despite a great amount of effort that has been devoted to improving optimization codes for this problem. The most effective optimization techniques to date have been branch-and-bound algorithms based on the disjunctive graph model for the job-shop scheduling problem.
Reference: 16. <author> E. Nowicki and C. Smutnicki. </author> <title> A fast taboo search algoritm for the job shop problem. </title> <institution> Management Sci. </institution> <note> To appear. </note>
Reference-contexts: Currently, all of the best known algorithms use iterated local search. The current champions are a taboo search algorithm by Nowicki & Smutnicki <ref> [16] </ref> and a technique called reiterated guided local search by Balas & Vazacopoulos [4]. Vaessens, Aarts & Lenstra [21] provide an excellent survey of recent developments in this area. There has been less progress in finding good lower bounds for the job-shop scheduling problem.
Reference: 17. <author> S. A. Plotkin, D. B. Shmoys, and E. Tardos. </author> <title> Fast approximation algorithms for fractional packing and covering problems. </title> <journal> Math. Oper. Res., </journal> <volume> 20 </volume> <pages> 257-301, </pages> <year> 1995. </year>
Reference-contexts: The bound we obtain is based on the fractional packing formulation which is the linear relaxation of the packing formulation. This approach was motivated by the packing approximation algorithm of Plotkin, Shmoys & Tardos <ref> [17] </ref> along with an application to scheduling given by Stein [20]. This bound gives stronger bounds than those obtained by other linear programming relaxations but appears to be too time consuming. <p> Plotkin, Shmoys, & Tardos <ref> [17] </ref> provide a framework for obtaining solutions within a specified accuracy for such problems. We view the relaxation as the fractional packing problem where we are attempting to pack job-schedules subject to a restriction on the amount of work on each machine at each time unit. <p> Then our relaxation can be rewritten as minf j x 2 P; x satisfies (2)g. To apply the algorithm of <ref> [17] </ref>, we need to be able to efficiently evaluate the dual objective for a given y, and to efficiently optimize over P . To evaluate the dual, we need to find the minimum-cost job-schedule for each job j 2 J .
Reference: 18. <author> D.B. Shmoys. </author> <title> Solving scheduling problems via linear programming. Talk at ORSA/TIMS, </title> <address> Boston, MA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Thus we can shave a portion of the window by applying this idea. Carlier & Pinson [9] have independently proposed this idea; a preliminary version of our results for this was announced in <ref> [18] </ref>. We shall describe our algorithm only in terms of shaving the start of the windows; of course these ideas apply to the end as well.
Reference: 19. <author> J.P. Sousa and L.A. Wolsey. </author> <title> A time-indexed formulation of non-preemptive single-machine scheduling problems. </title> <journal> Math. Programming, </journal> <volume> 54 </volume> <pages> 353-367, </pages> <year> 1992. </year>
Reference-contexts: The strongest computational results of Applegate & Cook [2] use only combinatorial bounds in their branch-and-bound algorithm. In this paper we present new lower bounding techniques based on a time-oriented approach to job-shop scheduling. Recently there has been significant success applying time-oriented approaches to other scheduling problems <ref> [19] </ref> [22]. The first approach we propose is based upon the packing formulation, a time-indexed integer programming formulation of the job-shop scheduling problem. Here we attempt to pack schedules for each job so that they do not overlap on any machine.
Reference: 20. <author> C. Stein. </author> <title> Approximation Algorithms for Multicommodity Flow and Shop Scheduling Problems. </title> <type> PhD thesis, </type> <institution> MIT/LCS/TR-550, Laboratory for Computer Science, MIT, </institution> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: The bound we obtain is based on the fractional packing formulation which is the linear relaxation of the packing formulation. This approach was motivated by the packing approximation algorithm of Plotkin, Shmoys & Tardos [17] along with an application to scheduling given by Stein <ref> [20] </ref>. This bound gives stronger bounds than those obtained by other linear programming relaxations but appears to be too time consuming. To improve on the packing bound we attempt to restrict the time in which operations are allowed to start processing. We call this interval a processing window.
Reference: 21. <author> R.J.M. Vaessens, E.H.L. Aarts, and J.K. Lenstra. </author> <title> Job shop scheduling by local search. </title> <journal> Math. Programming B. </journal> <note> To appear. </note>
Reference-contexts: Currently, all of the best known algorithms use iterated local search. The current champions are a taboo search algorithm by Nowicki & Smutnicki [16] and a technique called reiterated guided local search by Balas & Vazacopoulos [4]. Vaessens, Aarts & Lenstra <ref> [21] </ref> provide an excellent survey of recent developments in this area. There has been less progress in finding good lower bounds for the job-shop scheduling problem. The job bound is the maximum total processing required for the operations on a single job. <p> We have tested all of our algorithms on the standard benchmark problems. We have used all the problems for which Vaessens, Aarts & Lenstra <ref> [21] </ref> give recent local search results as well as three larger problems from Adams, Balas & Zawack [1]. All computations were performed on a 90MHz Pen-tium computer.
Reference: 22. <author> J.M. Van den Akker. </author> <title> LP-based solution methods for single-machine scheduling problems. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, Eindhoven, </institution> <address> The Netherlands, </address> <year> 1994. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The strongest computational results of Applegate & Cook [2] use only combinatorial bounds in their branch-and-bound algorithm. In this paper we present new lower bounding techniques based on a time-oriented approach to job-shop scheduling. Recently there has been significant success applying time-oriented approaches to other scheduling problems [19] <ref> [22] </ref>. The first approach we propose is based upon the packing formulation, a time-indexed integer programming formulation of the job-shop scheduling problem. Here we attempt to pack schedules for each job so that they do not overlap on any machine.
References-found: 22

