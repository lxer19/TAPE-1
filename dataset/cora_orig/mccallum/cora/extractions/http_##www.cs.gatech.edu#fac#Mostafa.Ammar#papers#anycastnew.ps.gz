URL: http://www.cs.gatech.edu/fac/Mostafa.Ammar/papers/anycastnew.ps.gz
Refering-URL: http://www.cs.gatech.edu/fac/Mostafa.Ammar/anycast.html
Root-URL: 
Email: fbobby,ammar,ewz,viren,feig@cc.gatech.edu  
Title: Application-Layer Anycasting  
Author: Samrat Bhattacharjee Mostafa H. Ammar Ellen W. Zegura Viren Shah Zongming Fei 
Date: 404-894-1403  
Address: Atlanta, GA 30332  
Affiliation: Networking and Telecommunications Group College of Computing Georgia Institute of Technology  
Note: (Corresponding Author)  
Abstract: Server replication is a key approach for maintaining user-perceived quality of service within a geographically wide-spread network. The anycasting communication paradigm is designed to support server replication by allowing applications to easily select and communicate with the "best" server, according to some performance or policy criteria, in a group of content-equivalent servers. We examine the definition and support of the anycasting paradigm at the application layer, providing a service that maps anycast domain names into one or more IP addresses using anycast resolvers. In addition to being independent from network-layer support, our definition includes the notion of filters, functions that are applied to groups of addresses to affect the selection process. We consider both metric-based filters (e.g., server response time) and policy-based filters; we further allow filtering both at the anycast resolver and local to the anycast client. A key input to the filtering process is metric information describing the relative performance of replicated servers. We examine the use of various techniques for maintaining this information at anycast resolvers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. B. Danzig, D. Delucia, and K. Obraczka, </author> <title> "Massively replicating services in wide-area internetworks," </title> <type> tech. rep., </type> <institution> University of Southern California, </institution> <year> 1994. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication <ref> [1] </ref>, caching [2, 3], batching of requests at the server [4] and multicasting of server responses over the network [5, 6]. In this paper we consider the server replication technique. In particular, we investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [2] <author> P. Danzig, R. Hall, and M. Schwartz, </author> <title> "A case for caching file objects inside internetworks," </title> <booktitle> in Proceedings of SIGCOMM 93, </booktitle> <pages> pp. 239-248, </pages> <year> 1993. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching <ref> [2, 3] </ref>, batching of requests at the server [4] and multicasting of server responses over the network [5, 6]. In this paper we consider the server replication technique. In particular, we investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [3] <author> J. Pitkow and M. Recker, </author> <title> "A simple yet robust caching algorithm based on dynamic access patterns," </title> <booktitle> in Proceedings of 2nd WWW conference, </booktitle> <year> 1994. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching <ref> [2, 3] </ref>, batching of requests at the server [4] and multicasting of server responses over the network [5, 6]. In this paper we consider the server replication technique. In particular, we investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [4] <author> A. Dan, D. Sitaram, and P. Shahabuddin, </author> <title> "Scheduling policies for an on-demand video server with batching," </title> <booktitle> in Proceedings of ACM Multimedia 94, </booktitle> <pages> pp. 15-23, </pages> <year> 1994. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching [2, 3], batching of requests at the server <ref> [4] </ref> and multicasting of server responses over the network [5, 6]. In this paper we consider the server replication technique. In particular, we investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [5] <author> D. Gifford, </author> <title> "Polychannel systems for mass digital communication," </title> <journal> Communications of the ACM, </journal> <volume> vol. 33, </volume> <pages> pp. 1847-1851, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching [2, 3], batching of requests at the server [4] and multicasting of server responses over the network <ref> [5, 6] </ref>. In this paper we consider the server replication technique. In particular, we investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [6] <author> R. Clark and M. Ammar, </author> <title> "Providing scalable web service using multicast delivery," </title> <booktitle> in Proceedings of 2nd IEEE Workshop on Services in Distributed and Networked Environments, </booktitle> <pages> pp. 19-26, </pages> <year> 1995. </year>
Reference-contexts: This is often referred to as the scalability of the service. There have been several approaches proposed for improving the scalability of a networked service. These include server replication [1], caching [2, 3], batching of requests at the server [4] and multicasting of server responses over the network <ref> [5, 6] </ref>. In this paper we consider the server replication technique. In particular, we investigate the anycasting communication paradigm which has been proposed [7] to support server replication.
Reference: [7] <author> C. Partridge, T. Mendez, and W. Milliken, </author> <title> "Host anycasting service," </title> <type> RFC 1546, </type> <month> November </month> <year> 1993. </year>
Reference-contexts: These include server replication [1], caching [2, 3], batching of requests at the server [4] and multicasting of server responses over the network [5, 6]. In this paper we consider the server replication technique. In particular, we investigate the anycasting communication paradigm which has been proposed <ref> [7] </ref> to support server replication. As originally defined [7], anycasting provides: "a stateless best effort delivery of an anycast datagram to at least one host, and preferably only one host, which serves the anycast address." In this definition, an IP anycast address is used to define a group of servers that <p> In this paper we consider the server replication technique. In particular, we investigate the anycasting communication paradigm which has been proposed <ref> [7] </ref> to support server replication. As originally defined [7], anycasting provides: "a stateless best effort delivery of an anycast datagram to at least one host, and preferably only one host, which serves the anycast address." In this definition, an IP anycast address is used to define a group of servers that provide the same service. <p> In our work we adopt a more general view of anycasting as a communication paradigm that is analogous to the broadcast and multicast communication paradigms. In particular, we differentiate between the anycasting service definition and the protocol layer providing the anycasting service 1 . The original anycasting proposal <ref> [7] </ref> can, therefore, be viewed as providing the anycasting service definition and examining the provision of this service within the IP layer. In this paper we examine the definition and support of the anycasting paradigm at the application layer. <p> This adds a new dimension to the server finding problem: it is now important to find the "best" server from among many content-equivalent servers. Two notable studies in this area are: 1) the original work by Partridge, Mendez and Milliken <ref> [7] </ref> proposing the idea of anycasting and discussing its network-layer support and 2) a recent study by Guyton and Schwartz [18] which addresses the problem of locating the nearest server. The latter work also presents a classification of "best"-server location schemes. <p> We measure server response time by measuring the round-trip time for a query 8 . 7 The original anycasting proposal <ref> [7] </ref> was primarily concerned with a server distance (hop count) metric; measuring server distance has also been studied extensively by Guyton and Schwartz [18]. 8 Specifically, a query string consisting of a set of characters not likely to be in the server's vocabulary was constructed; most often we used "Anycast Test
Reference: [8] <author> K. Birman and T. Joseph, </author> <title> "Reliable communication in the presence of failures," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 5, </volume> <pages> pp. 47-76, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: Indeed this latter approach was how many multicast problems were addressed in early system designs (e.g., the original ISIS distributed system <ref> [8] </ref>). There is clearly a distinction between multicast as a communication paradigm and how this paradigm is supported. 1 FIGURE 1 Anycast Name Resolution Query/Response Cycle some existing addresses as anycast (e.g., within Class C) or creating a separate class of addresses.
Reference: [9] <author> R. Hinden and S. Deering, </author> <title> "IP version 6 addressing architecture," </title> <type> RFC 1884, </type> <month> December </month> <year> 1995. </year>
Reference-contexts: There is clearly a distinction between multicast as a communication paradigm and how this paradigm is supported. 1 FIGURE 1 Anycast Name Resolution Query/Response Cycle some existing addresses as anycast (e.g., within Class C) or creating a separate class of addresses. IPv6 proposals <ref> [9] </ref> do include a specific address space allocated to anycasting. * The use of anycast addresses requires router support. Routers must recognize anycast addresses and forward them properly.
Reference: [10] <author> J. Bernabeu, M. Ammar, and M. Ahamad, </author> <title> "Optimizing a generalized polling protocol for resource finding over a multiple access channel," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 27, </volume> <pages> pp. 1429-1445, </pages> <year> 1995. </year>
Reference-contexts: Many techniques were proposed and investigated. These include: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., <ref> [10, 11] </ref>) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., [12, 13, 14]) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [15].
Reference: [11] <author> D. Oppen and Y. Dalal, </author> <title> "The clearinghouse: A decentralized agent for locating named objects in a distributed environment," </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 230-253, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Many techniques were proposed and investigated. These include: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., <ref> [10, 11] </ref>) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., [12, 13, 14]) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [15].
Reference: [12] <author> P. Mockapetris, </author> <title> "Domain names concepts and facilities," </title> <type> RFC 1034, </type> <month> November </month> <year> 1987. </year>
Reference-contexts: These include: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., [10, 11]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., <ref> [12, 13, 14] </ref>) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [15]. This early work dealt with situations where there is typically a single instance of the resource. <p> Such an approach makes it straightforward to integrate our anycasting architecture into the existing Internet infrastructure. We prefer to view the anycast resolver as logically distinct from other name servers like DNS <ref> [12] </ref>, allowing us to consider issues related to anycast resolver design separately from other name service issues. In reality, the functions of an anycast resolver could be integrated with the operation of DNS. An anycast domain name (ADN) is of the form &lt;Service&gt;%&lt;Domain Name&gt;. <p> Determining the address of the authoritative anycast resolver for a particular domain can be done using the same technique used for DNS to determine an authoritative name server <ref> [12] </ref>. This hierarchical naming allows users to define their own anycast groups and maintain such groups in local anycast resolvers. By propagating the ADN of a locally-defined anycast group (including the name of the domain in which its authoritative resolver resides) allows others to make use of this anycast group.
Reference: [13] <author> I. Gopal and A. Segall, </author> <title> "Directories for networks with casually connected users," </title> <booktitle> in Proceedings of INFOCOM 88, </booktitle> <pages> pp. 1060-1064, </pages> <year> 1988. </year>
Reference-contexts: These include: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., [10, 11]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., <ref> [12, 13, 14] </ref>) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [15]. This early work dealt with situations where there is typically a single instance of the resource.
Reference: [14] <author> A. Birrel, R. Levin, and M. Schroeder, "Grapevine: </author> <title> An exercise in distributed computing," </title> <journal> Communications of the ACM, </journal> <volume> vol. 25, </volume> <pages> pp. 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: These include: 1) the use of multicast or broadcast communication to "touch" all the locations where the resource may reside in an attempt to find it (e.g., [10, 11]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., <ref> [12, 13, 14] </ref>) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed [15]. This early work dealt with situations where there is typically a single instance of the resource.
Reference: [15] <author> D. Terry, </author> <title> "Caching hints in distributed systems," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 13, </volume> <pages> pp. 48-54, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: an attempt to find it (e.g., [10, 11]) , 2) the use of various name server architectures in order to lookup the location of the resource (e.g., [12, 13, 14]) and 3) the use of caching of a resource's location (not content) at sites where the resource is frequently accessed <ref> [15] </ref>. This early work dealt with situations where there is typically a single instance of the resource. The case of a mobile resource was addressed through interesting techniques such as the use of forwarding addresses [16].
Reference: [16] <author> R. Fowler, </author> <title> Decentralized Object Finding Using Forwarding Addresses. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <year> 1985. </year>
Reference-contexts: This early work dealt with situations where there is typically a single instance of the resource. The case of a mobile resource was addressed through interesting techniques such as the use of forwarding addresses <ref> [16] </ref>. More recently, the Service Location Working Group of the IETF is considering the design of the Service Location Protocol which allows a user to specify a set of service attributes which can be bound to a server's network address in a dynamic fashion [17].
Reference: [17] <author> J. Veizades, E. Guttman, C. Perkins, and S. Kaplan, </author> <title> "Service location protocol," Internet Draft (work in progress) draft-ietf-srvloc-protocol-13.txt, </title> <month> June </month> <year> 1996. </year>
Reference-contexts: More recently, the Service Location Working Group of the IETF is considering the design of the Service Location Protocol which allows a user to specify a set of service attributes which can be bound to a server's network address in a dynamic fashion <ref> [17] </ref>. Beginning with initial services like ftp, archie, and gopher and culminating more recently with the World-Wide Web, the Internet has experienced a dramatic growth in the use and provision of information services.
Reference: [18] <author> J. Guyton and M. Schwartz, </author> <title> "Locating nearby copies of replicated Internet servers," </title> <booktitle> in Proceedings of SIGCOMM 95, </booktitle> <pages> pp. 288-298, </pages> <year> 1995. </year>
Reference-contexts: Two notable studies in this area are: 1) the original work by Partridge, Mendez and Milliken [7] proposing the idea of anycasting and discussing its network-layer support and 2) a recent study by Guyton and Schwartz <ref> [18] </ref> which addresses the problem of locating the nearest server. The latter work also presents a classification of "best"-server location schemes. <p> By choosing to define anycasting as a communication paradigm, we deviate somewhat from the Guyton and Schwartz classification which considers the original definition of anycasting as a network-layer-supported service. Our work investigates the complete design of application-layer anycasting and not just the metric probing aspect as discussed in <ref> [18] </ref>. We also consider using a variety of metrics (not just hop-distance as provided by SONAR) in order to provide a closer match to the application requirement. <p> We measure server response time by measuring the round-trip time for a query 8 . 7 The original anycasting proposal [7] was primarily concerned with a server distance (hop count) metric; measuring server distance has also been studied extensively by Guyton and Schwartz <ref> [18] </ref>. 8 Specifically, a query string consisting of a set of characters not likely to be in the server's vocabulary was constructed; most often we used "Anycast Test (test version)" followed by one or more carriage returns.
Reference: [19] <author> C. M. Bowman, P. Danzig, D. Hardy, U. Manber, M. Schwartz, and D. Wessels, "Harvest: </author> <title> A scalable, customizable discovery and access system," </title> <type> Tech. Rep. </type> <institution> CU-CS-732-94, University of Colorado Boulder, </institution> <year> 1995. </year>
Reference-contexts: The latter work also presents a classification of "best"-server location schemes. The 3 work is related to earlier work on the Harvest system <ref> [19] </ref> which provides a set of tools for gathering information from various servers and efficiently indexing and searching through this information. Tools for caching and replication of indices are also used in the Harvest system in order to improve the scalability of the service.
Reference: [20] <author> K. Moore, J. Cox, and S. Green, </author> <title> "SONAR a network proximity service," Internet Draft (work in progress) draft-moore-sonar-01.txt, </title> <month> February </month> <year> 1996. </year>
Reference-contexts: Tools for caching and replication of indices are also used in the Harvest system in order to improve the scalability of the service. Another related project is the SONAR network proximity service <ref> [20] </ref> in which the authors define a service which can return the closest (in hops) server from among a provided list. By choosing to define anycasting as a communication paradigm, we deviate somewhat from the Guyton and Schwartz classification which considers the original definition of anycasting as a network-layer-supported service.
Reference: [21] <author> V. Jacobson, "Traceroute." </author> <note> available from ftp://ftp.ee.lbl.gov/traceroute.tar.Z. </note>
Reference-contexts: The concept of probing the network and the servers to determine performance measures is related to various tools, and systems that are used for network management purposes. Examples of these include the traceroute <ref> [21] </ref>, and mwatch [22] tools and management systems that integrate such tools such as the Fremont system [23]. Remote measurement and monitoring of system performance has also been explored as part of the extensive work on distributed system monitoring [24, 25].
Reference: [22] <author> A. Ghosh and P. Brooks, "Mwatch 3.6.2." </author> <note> available from http://www.cl.cam.ac.uk/mbone/index.html#Mrouted. </note>
Reference-contexts: The concept of probing the network and the servers to determine performance measures is related to various tools, and systems that are used for network management purposes. Examples of these include the traceroute [21], and mwatch <ref> [22] </ref> tools and management systems that integrate such tools such as the Fremont system [23]. Remote measurement and monitoring of system performance has also been explored as part of the extensive work on distributed system monitoring [24, 25].
Reference: [23] <author> D. Wood, S. Coleman, and M. Schwartz, "Fremont: </author> <title> A system for discovering network characteristics and problems," </title> <booktitle> in Proceedings of 1993 Winter USENIX Conference, </booktitle> <pages> pp. 335-347, </pages> <month> January </month> <year> 1993. </year> <month> 25 </month>
Reference-contexts: Examples of these include the traceroute [21], and mwatch [22] tools and management systems that integrate such tools such as the Fremont system <ref> [23] </ref>. Remote measurement and monitoring of system performance has also been explored as part of the extensive work on distributed system monitoring [24, 25].
Reference: [24] <author> B. Schroeder, </author> <title> "On-line monitoring: A tutorial," </title> <journal> IEEE Computer, </journal> <volume> vol. 28, </volume> <pages> pp. 72-78, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Examples of these include the traceroute [21], and mwatch [22] tools and management systems that integrate such tools such as the Fremont system [23]. Remote measurement and monitoring of system performance has also been explored as part of the extensive work on distributed system monitoring <ref> [24, 25] </ref>. Recently, the company Timedancer Systems has been offering a service dubbed OnTime Delivery 2 which probes a web site at regular intervals and provides a report on the performance of the web site as perceived by their client.
Reference: [25] <author> F. Lange, R. Kroeger, and M. Gergeleit, </author> <title> "Jewel: Design and implementation of a distributed measurement system," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 657-671, </pages> <month> Novemeber </month> <year> 1992. </year>
Reference-contexts: Examples of these include the traceroute [21], and mwatch [22] tools and management systems that integrate such tools such as the Fremont system [23]. Remote measurement and monitoring of system performance has also been explored as part of the extensive work on distributed system monitoring <ref> [24, 25] </ref>. Recently, the company Timedancer Systems has been offering a service dubbed OnTime Delivery 2 which probes a web site at regular intervals and provides a report on the performance of the web site as perceived by their client.
Reference: [26] <author> J. Gwertzman and M. Seltzer, </author> <title> "The case for geographical push caching," </title> <type> Tech. Rep. 34-94, </type> <institution> Harvard University, </institution> <year> 1994. </year>
Reference-contexts: To avoid the scalability problems inherent in probing for performance we also explore the idea of having the server "push" onto the network its own locally generated performance observations. This is related to the Push Caching idea <ref> [26] </ref> where servers are in charge of pushing the desired information onto remote caches and the server push mechanism [27] implemented in Netscape browsers. Finally, anycasting is related to the technique used to build scalable HTTP servers [28].
Reference: [27] <author> M. Humes, </author> <title> "Netscape's server push, client pull and CGI animation." </title> <address> http://www.emf.net/ mal/animate.html. </address>
Reference-contexts: This is related to the Push Caching idea [26] where servers are in charge of pushing the desired information onto remote caches and the server push mechanism <ref> [27] </ref> implemented in Netscape browsers. Finally, anycasting is related to the technique used to build scalable HTTP servers [28]. In such a scheme multiple servers are clustered and appear to the outside world a single logical server.
Reference: [28] <author> E. D. Katz, M. Butler, and R. McGrath, </author> <title> "A scalable HTTP server: The NCSA prototype," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 27, </volume> <pages> pp. 155-164, </pages> <year> 1994. </year>
Reference-contexts: This is related to the Push Caching idea [26] where servers are in charge of pushing the desired information onto remote caches and the server push mechanism [27] implemented in Netscape browsers. Finally, anycasting is related to the technique used to build scalable HTTP servers <ref> [28] </ref>. In such a scheme multiple servers are clustered and appear to the outside world a single logical server.
Reference: [29] <author> L. Lamport, </author> <title> "The implementation of reliable distributed multiprocess systems," </title> <journal> Computer Networks, </journal> <volume> vol. 2, </volume> <pages> pp. 95-114, </pages> <year> 1978. </year>
Reference-contexts: In some cases multiple servers are required to provide a single instance of a service. A primary example is quorum consensus applications that arise in distributed systems. Quorum consensus is a general class of synchronization protocols for distributed systems <ref> [29, 30, 31, 32] </ref>. An operation may proceed to completion only if it is granted permission from a number of coordinator nodes.
Reference: [30] <author> D. Gifford, </author> <title> "Weighted voting for replicated data," </title> <booktitle> in Proceedings of 7th Symposium on Operating Systems, </booktitle> <pages> pp. 150-162, </pages> <publisher> ACM, </publisher> <year> 1979. </year>
Reference-contexts: In some cases multiple servers are required to provide a single instance of a service. A primary example is quorum consensus applications that arise in distributed systems. Quorum consensus is a general class of synchronization protocols for distributed systems <ref> [29, 30, 31, 32] </ref>. An operation may proceed to completion only if it is granted permission from a number of coordinator nodes.
Reference: [31] <author> M. Ahamad and M. H. Ammar, </author> <title> "Performance characterization of quorum-consensus algorithms for replicated data," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 15, </volume> <pages> pp. 492-496, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: In some cases multiple servers are required to provide a single instance of a service. A primary example is quorum consensus applications that arise in distributed systems. Quorum consensus is a general class of synchronization protocols for distributed systems <ref> [29, 30, 31, 32] </ref>. An operation may proceed to completion only if it is granted permission from a number of coordinator nodes.
Reference: [32] <author> D. Barbara and H. Garcia-Molina, </author> <title> "Mutual exclusion in partitioned distributed systems," </title> <journal> Distributed Computing, </journal> <volume> vol. 1, </volume> <pages> pp. 119-132, </pages> <year> 1986. </year>
Reference-contexts: In some cases multiple servers are required to provide a single instance of a service. A primary example is quorum consensus applications that arise in distributed systems. Quorum consensus is a general class of synchronization protocols for distributed systems <ref> [29, 30, 31, 32] </ref>. An operation may proceed to completion only if it is granted permission from a number of coordinator nodes.
Reference: [33] <author> J. Gosling and H. McGibon, </author> <title> "The Java language environment: A white paper." http://www.javasoft.com/whitePaper/java-whitepaper-1.html. [34] "The common gateway interface." </title> <address> http://hoohoo.ncsa.uiuc.edu/cgi/overview.html. </address>
Reference-contexts: In the second type of filter specification, the client provides a procedural description of the operation of the filter. This can be in the form of a function of metrics or a procedure describing some elaborate sequence of filter applications. An interesting possibility is the use of Java <ref> [33] </ref> as the programming language to specify filters, with the communication of the Java program to the anycast resolver included as part of anycast client/resolver interaction. Another important issue is where and how filter specifications are made. We explore two alternatives.
Reference: [35] <author> E. C. Rosen, </author> <title> "The updating protocol of arpanet's new routing algorithm," </title> <journal> Computer Networks, </journal> <volume> no. 4, </volume> <pages> pp. 11-19, </pages> <year> 1980. </year> <month> 26 </month>
Reference-contexts: Note that the task of updating link state in a distributed routing environment has precisely the same criteria. We have adopted the link state update algorithm used in the ARPANET <ref> [35] </ref> and experimented with the performance and overhead with a variety of parameters. The update algorithm is parameterized by a measurement interval I, a maximum threshold T and a reduction factor R. The algorithm maintains a current threshold C, initialized to T .
References-found: 34

