URL: http://www.cs.columbia.edu/~library/theses/dewan.ps.gz
Refering-URL: http://www.cs.columbia.edu/home/phd_prog/alumni.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Runtime Reorganization of Parallel and Distributed Expert Database Systems  
Author: Hasanat M. Dewan 
Degree: Submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in the Graduate School of Arts and Sciences.  
Date: 1994  
Affiliation: Columbia University  
Abstract-found: 0
Intro-found: 1
Reference: <institution> 225 </institution>
Reference: [1] <author> D.A. Brant, T. Grose, B. Lofaso, </author> <title> and D.P. Miranker. Effects of Database Size on Rule System Performance: Five Case Studies. </title> <booktitle> In Proc. Intl. Conference on Very Large Databases, </booktitle> <year> 1991. </year>
Reference-contexts: Second, the processing of set-oriented rules against large databases is intrinsically expensive. The time and space complexity of rule matching using traditional methods can be high degree polynomials in the size of the database <ref> [1] </ref>. Thus, traditional rule matching algorithms do not scale well to large databases. The first dimension, that of language semantics, is addressed with a new rule language called PARULEL. <p> The knowledge provided by the state information can be divided into five categories <ref> [1] </ref>. 1. Condition Membership (CM): This knowledge consists of a count of the number of tuples of the base relation that satisfies the selection predicates in each condition C i .
Reference: [2] <author> D.A. </author> <title> Brant and D.P. Miranker. Index Support for Rule Activation. </title> <booktitle> In In the proceedings of ACM-SIGMOD, Intl. Conf. on the Management of Data, </booktitle> <year> 1993. </year>
Reference-contexts: As such, prior work aimed at improving performance of expert systems, as well as work on other types of database rule processing systems (e.g., deductive and active databases) are relevant to our work. Current work on efficient support for rule activation <ref> [2] </ref> using special indexing methods is of interest to us, but does not address some of the most difficult problems confronted in this general area. <p> The work on active databases tends to emphasize rule systems that provide the means for accomplishing internal database tasks such as database constraint maintenance, while deductive databases are suited to building knowledge-based applications that have natural expression in logic. Recent work in expert databases <ref> [2, 58] </ref> addresses the problem of efficiently determining the set of active (or instantiated) rules using various indexing techniques. While this work is interesting, it leaves open many of the most pressing concerns of this paradigm. <p> However, the resulting impedance mismatch would make this approach impractical for large databases. 4.4 Existing Expert Database Systems Here we briefly describe ongoing work at the University of Texas at Austin aimed at providing expert database capabilities in a database environment. The system is question is known as DATEX <ref> [2] </ref>. The key aspects of DATEX are specialized indexes, derived from a compile-time analysis of the rule program, and lazy matching [58]. Lazy matching, as encoded in the LEAPS match algorithm for production systems, orders the base tuples according to some ordering attribute (e.g., timestamps).
Reference: [3] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5: An Introduction to Rule-Based Programming. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Mass., </address> <year> 1985. </year>
Reference-contexts: The scaling problems associated with rule program processing in the database context stems from two sources. The first is the "tuple-oriented" update semantics 4 of languages like OPS5 <ref> [3] </ref>, where a single rule instance is fired per inference cycle, although many instances may be generated as a result of rule matching. <p> In this manner, more rules can co-execute and more parallelism can be achieved [43, 59, 55]. 4.1.4 Faster Match Algorithms This work exploits the fact that the set of instances at each cycle in single rule firing systems such as OPS5 display "temporal redundancy" <ref> [3] </ref> of the conflict set from one cycle to the next. In other words, the conflict set at any cycle retains most of the instances from the previous cycle. <p> Thus, under the single rule firing restriction, lazy match provides improvements over state saving schemes such as RETE and TREAT. The specialized indexes used in DATEX generate a variant of OPS5 alpha memories <ref> [3] </ref>, which contain a join attribute for the underlying relation. This is called the Filter Index (FI). These are basically memories constructed by applying the standard constant tests, but also attaching the join attribute value, and then an ordering attribute, e.g., a timestamp or a tuple identifier.
Reference: [4] <author> S. Ceri and J. Widom. </author> <title> Deriving Incremental Production Rules for Deductive Data. </title> <type> Technical Report RJ 9071 (80884), </type> <institution> IBM Research Division, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: The user of such a system has the flexibility to locate anywhere on the deductive to active spectrum depending on the demands of the application. Earlier work has shown that deductive databases can be mechanically transformed to the PS formalism <ref> [4] </ref>. Thus, a system based on the PS formalism can simulate a deductive system. However, we prefer to think of expert databases as effective DRPS with capabilities spanning the entire spectrum from active to deductive systems.
Reference: [5] <author> S. Chakravarty. HiPAC: </author> <title> a research project in active, time-constrained database management (final report). </title> <type> Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: Moreover, current proposed active database systems also do not provide expressive means of controlling embedded rule programs or expressing heuristic preferences, except for simple rule ordering directives. Important active database systems are Ariel [37], HiPAC <ref> [5, 13, 51] </ref>, Ode [31], Post-gres [83], RPL [14], and Starburst [91, 90]. The fundamental differences between deductive and active databases are explored in [89].
Reference: [6] <author> F.-C. Cheng, H.-H. Chen, and J.-H. Perng. </author> <title> Parallel execution on production systems. </title> <booktitle> In Proceedings of the Second IEEE Symposium on Parallel and Distributed Processing, </booktitle> <year> 1990. </year>
Reference-contexts: If two rules do not interfere with each other and have a high value for their parallel executability (determined by a simulation), they tend to be allocated to different processors. Ishida [43] proposes a heuristic approach while Cheng <ref> [6] </ref> proposes a probabilistic one to solve the decomposition problem. 4.1.3 Program Transformation We note that various rules in any given rule program may require different amounts of time to match. Some rules are hot-spots requiring much more processing time than others.
Reference: [7] <author> W.F. Clocksin and C.S. Mellish. </author> <title> Programming in PROLOG. </title> <publisher> Springer-Verlag, </publisher> <year> 1981. </year> <month> 226 </month>
Reference-contexts: The production system approach to building expert systems has been quite successful for cases where the data is of 14 small to moderate size. Logic programming was introduced in the context of the PROLOG programming language <ref> [7] </ref>. PROLOG uses a top-down evaluation strategy to implement a backward-chaining and backtracking inference engine. It has been used for the construction of various rule-based expert systems. 2.1 Rule Formalisms The rule processing component of DRPSs trace their ancestry to rule-based systems.
Reference: [8] <author> S. Cohen and O. Wolfson. </author> <title> Why a single parallelization strategy is not enough in knowledge-bases. </title> <booktitle> In Proc. 8th ACM Symposium on PODS, </booktitle> <pages> pages 200-217, </pages> <year> 1989. </year>
Reference-contexts: Later work [96, 94] done independently but elaborating the same underlying principle, has come to be known as the "data-reduction" paradigm. By partitioning the instances, the amount of data relevant to each constrained copy is smaller. The way the instances are partitioned has a crucial effect on performance <ref> [8] </ref>. The system must ensure that the entire set of copies computes the same conflict set as the original hot spot rule.
Reference: [9] <author> G. Copeland, W. Alexander, E. Boughter, and T. Keller. </author> <title> Data Placement in Bubba. </title> <booktitle> In Proceedings of the ACM SIGMOD 1988, Intl. Conf. on the Management of Data. </booktitle> <publisher> ACM Press, </publisher> <year> 1988. </year>
Reference-contexts: The third category is concerned with parallel join algorithms for speeding up traditional database transaction processing in a shared-nothing multiprocessor environment. Various projects <ref> [9, 69] </ref> have considered the problem under the assumption that the base relations are fragmented across the processing sites according to the requirements of parallel versions of popular join algorithms (e.g., hash-based and sort-merge join). <p> In the last decade, many researchers have focused on developing database machine architectures for fast execution of complex S-P-J queries. Many of these efforts have resulted in the development of efficient parallel join algorithms for multiprocessor environments <ref> [46, 21, 23, 22, 81, 45, 9, 34, 69, 24] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines.
Reference: [10] <author> M. Darnovsky, J. Bowman, and K. Paulsell. </author> <title> Sybase Commands Reference Release 4.0. </title> <publisher> Sybase Inc., </publisher> <year> 1989. </year>
Reference-contexts: We mention that the triggers are cheap since they are implemented as pre-compiled blocks of database code, and no penalty is paid for query compilation and query plan generation every time a trigger is activated <ref> [10] </ref>. The size of the bins used to compute the DFD can be single values from the domain, or it may be ranges of values from the domain, depending upon the characteristics of the RA.
Reference: [11] <author> R. Davis and J. King. </author> <title> An Overview of Production Systems. </title> <type> Technical Report AIM-271, </type> <institution> Stanford AI Laboratory, </institution> <month> October </month> <year> 1975. </year>
Reference-contexts: The development of expert system technology has rested in large part on advances in the production system formalism. This formalism encodes problem solving knowledge in production rules, which are intended to be modular units representing problem solving knowledge of experts. This formalism also has some psychological basis <ref> [11] </ref>. Typical production systems use a bottom-up evaluation method to implement a forward-chaining inference engine. The production system approach to building expert systems has been quite successful for cases where the data is of 14 small to moderate size. <p> Over the years, the interest in the production system paradigm among builders of high-performance knowledge-based expert systems has shown sustained growth, and some authors attribute this to current research rediscovering what naturally intelligent systems already learned through evolution <ref> [11] </ref>. Specifically, many researchers and practitioners believe that structuring knowledge in a production system format is an effective and modular approach to the organization, retrieval, and use of large amounts of knowledge.
Reference: [12] <author> R. Davis, H. Shrobe, and P. Szolovits. </author> <title> What Is a Knowledge Representation? In AI Magazine, </title> <address> pages 17-33, </address> <month> Spring </month> <year> 1993. </year>
Reference-contexts: As such, the production system knowledge representation typically used in this context is based upon "plausible inference", rather than "logically sound inference", as in deductive database systems. (See <ref> [12] </ref> for an interesting discussion of the variety of knowledge representations employed in knowledge-based systems). Domain inference knowledge is encoded in the rules, which exist independently of the database.
Reference: [13] <author> U. Dayal. </author> <title> The HiPAC project: Combining active databases and timing constraints . SIGMOD RECORD, </title> <booktitle> 17(1) </booktitle> <pages> 51-70, </pages> <year> 1988. </year>
Reference-contexts: Moreover, current proposed active database systems also do not provide expressive means of controlling embedded rule programs or expressing heuristic preferences, except for simple rule ordering directives. Important active database systems are Ariel [37], HiPAC <ref> [5, 13, 51] </ref>, Ode [31], Post-gres [83], RPL [14], and Starburst [91, 90]. The fundamental differences between deductive and active databases are explored in [89].
Reference: [14] <author> L. Delcambre. RPL: </author> <title> An expert system language with query power. </title> <journal> IEEE Expert, </journal> <volume> Winter </volume> 1988 51-61. 
Reference-contexts: for a production system can be viewed as a relational database, and both the LHS and RHS of rules may be expressed as database queries and updates, respectively. 1 The LHS translates into joins and selections over the corresponding relations of the database that map the working memory in question <ref> [14, 38] </ref>. For deductive databases, the mapping from facts in first-order logic to tuples in a table of a relational database is both straightforward and intuitive. Thus, deductive, active, and expert databases have all used relational tables as the basic structuring construct for facts or working memory. <p> Moreover, current proposed active database systems also do not provide expressive means of controlling embedded rule programs or expressing heuristic preferences, except for simple rule ordering directives. Important active database systems are Ariel [37], HiPAC [5, 13, 51], Ode [31], Post-gres [83], RPL <ref> [14] </ref>, and Starburst [91, 90]. The fundamental differences between deductive and active databases are explored in [89]. It has been suggested that deductive and active databases do not form two distinct classes, but rather they delineate two ends of a spectrum of database rule languages. <p> PARULEL has similarities with some existing rule languages, although the flexibility of the system in terms of the ability to customize the conflict resolution method and the operational semantics in a "programmable" fashion for a particular application is unique. Consider RPL <ref> [14] </ref>, a rule language with programmable conflict resolution expressed by metarules. Although there are obvious syntactic differences between RPL and PARULEL (RPL requires SQL in the LHS of rules, for 69 example), there are also fundamental differences between the two. RPL appears to provide only two mechanisms to express parallelism.
Reference: [15] <author> M. Devarakonda and R.K. Iyer. </author> <title> Predictability of Process Resource Usage: </title>
Reference-contexts: Most of the work on load balancing is based upon demand-driven schemes that are not cognizant of the parallel application whose execution is being balanced. In contrast, two recent articles explore "predictive load balancing" <ref> [32, 15] </ref>, in a similar philosophical vein as the work reported here. The results reported in those works show that the concept can improve utilization of processor resources. We analyze the predictive dynamic load balancing protocols employed in our scheme in terms of efficiency and scalability criteria.
References-found: 16

