URL: ftp://hpsl.cs.umd.edu/pub/papers/aiaa94.ps.Z
Refering-URL: http://www.cs.umd.edu/projects/hpsl/papers.brandnew/LocalResources/tech-10-23.htm
Root-URL: 
Title: THE DESIGN AND IMPLEMENTATION OF A PARALLEL UNSTRUCTURED EULER SOLVER USING SOFTWARE PRIMITIVES  
Author: R. Das, D. J. Mavriplis, J. Saltz, S. Gupta, R. Ponnusamy 
Address: Hampton VA 23665  
Affiliation: ICASE NASA Langley Research Center,  
Abstract: This paper is concerned with the implementation of a three-dimensional unstructured-grid Euler-solver on massively parallel distributed-memory computer architectures. The goal is to minimize solution time by achieving high computational rates with a numerically efficient algorithm. An unstructured multigrid algorithm with an edge-based data-structure has been adopted, and a number of optimizations have been devised and implemented in order to accelerate the parallel computational rates. The implementation is carried out by creating a set of software tools, which provide an interface between the parallelization issues and the sequential code, while providing a basis for future automatic run-time compilation support. Large practical unstructured grid problems are solved on the Intel iPSC/860 hypercube and Intel Touchstone Delta machine. The quantitative effect of the various optimizations are demonstrated, and we show that the combined effect of these optimizations leads to roughly a factor of three performance improvement. The overall solution efficiency is compared with that obtained on the CRAY-YMP vector supercomputer. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.J. Berger and S. H. Bokhari. </author> <title> A partitioning strategy for nonuniform problems on multiprocessors. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-36(5):570-580, </volume> <month> May </month> <year> 1987. </year>
Reference-contexts: We employed the recursive spectral partitioning algorithm to carry out partitioning [10], [13]. Williams [16] compared this algorithm with binary dissection <ref> [1] </ref> and simulated annealing methods for partitioning two dimensional unstructured mesh calculations. He found that recursive spectral partitioning produced better partitions than binary dissection.
Reference: [2] <author> H. Berryman, J. Saltz, and J. Scroggs. </author> <title> Execution time support for adaptive scientific algorithms on distributed memory architectures. </title> <journal> Con-currency: Practice and Experience, </journal> <volume> 3(3) </volume> <pages> 159-178, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: The development of these primitives, known as the PARTI primitives (Parallel Automated Runtime Toolkit at ICASE), as well as the compiler, has been underway for some time, and has been previously reported <ref> [2] </ref>, development of the solver or the parallelizing primitives, but more so with the interaction between these two efforts resulting from a specific application: the implementation of the unstructured Euler solver on the Intel iPSC860.
Reference: [3] <author> E. H. Cuthill and J. Mckee. </author> <title> Reducing bandwidth of sparse symmetric matrices. </title> <booktitle> In Proc. ACM 24th National Conference, </booktitle> <pages> pages 157-172, </pages> <address> New York, 1969. </address> <publisher> ACM, </publisher> <address> New York. </address>
Reference-contexts: We expect that the highly non-uniform data accesses shown in Figure 2 will cause poor cache utilization and high virtual memory management overheads. To reduce these overheads, we reorder the vertices using the Reverse Cuthill McGee (RCM) method <ref> [3] </ref>. The RCM reordering method is frequently used by researchers in the area of sparse matrix computation. It is graph based technique to reorder columns of a sparse matrix to reduce its bandwidth. The resulting data access pattern after RCM reordering in shown in Figure 3.
Reference: [4] <author> S. Hammond and T. Barth. </author> <title> An optimal massively parallel euler solver for unstructured grids. </title> <journal> AIAA Journal, </journal> <note> AIAA Paper 91-0441, </note> <month> January </month> <year> 1991. </year>
Reference: [5] <author> A. Jameson, T. J. Baker, and N. P. Weather-hill. </author> <title> Calculation of inviscid transonic flow over a complete aircraft. </title> <type> AIAA paper 86-0103, </type> <month> January </month> <year> 1986. </year>
Reference: [6] <author> J. De Keyser and D. Roose. </author> <title> Adaptive irregular multiple grids on a distributed memory multiprocessor. </title> <editor> In A. Bode, editor, </editor> <booktitle> Proceedings of the 2nd European Distributed Memory Computing Conference, </booktitle> <pages> pages 153-162, </pages> <year> 1991. </year>
Reference-contexts: Similarly, experience gained during the implementation was used to modify various primitives and even to create new primitives whose functionality had not been forseen. Parallel unstructured solver implementations have been performed in two-dimensions by various authors, on SIMD architectures memory MIMD architectures [14], [15] and <ref> [6] </ref>. Software environments for irregular problems have also been developed and applied to two-dimensional unstructured grid solvers [15], and to two dimensional unstructured multigrid solvers While much use has been made of the concepts developed in previous work, new optimizations have also been devised and incorporated.
Reference: [7] <author> N. Margulis. </author> <title> i860 Microprocessor Architecture. </title> <publisher> McGraw Hill, </publisher> <year> 1990. </year>
Reference-contexts: Whenever a new page is accessed, a substantial overhead is incurred, associated with locating the page in physical memory. This overhead can be saved if the page has recently been accessed. The de 4 tails of each component of i860 memory hierarchy can be found in <ref> [7] </ref>. The single processor performance can be improved by reordering the data and by restructuring the code associated with unstructured mesh computations.
Reference: [8] <author> D. J. Mavriplis. </author> <title> Three dimensional multigrid for the euler equations. </title> <journal> AIAA paper 91-1549CP, </journal> <pages> pages 824-831, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: This work represents the combination of two related efforts aimed at easing the software problem. On the one hand, an efficient three-dimensional unstructured solver has been developed which is highly paralleliz-able. The sequential version of this algorithm has pre 1 viously been reported <ref> [8] </ref>. The data-structures and solution strategy (multigrid) have been designed (or chosen) with parallel overhead issues in mind. (These also have a beneficial effect on the sequential code). <p> These experiments were carried out on an Intel iPSC/860 and the Intel Touchstone Delta. For purposes of comparison, we cite performance numbers obtained from an optimized Cray YMP version of this code <ref> [8] </ref>. A standard transonic test case is chosen for this comparison, namely a Mach 0.84 flow over an ONERA M6 wing at 3.06 degrees incidence. The sequence of meshes employed for the multigrid algorithm in this case are depicted in Figure 4. <p> The two versions of multigrid are W and V-cycle algorithms. The V-cycle multigrid algorithms visit all meshes an equal number of times within a single cycle, while the W-cycle visits coarse meshes more frequently than fine meshes. Details of these algorithms can be found in <ref> [8] </ref>. W-cycle multigrid strategies require slightly more work per cycle (of the order of 15% to 25% depending on mesh sizes), but often converge slightly more rapidly and are thus more efficient overall. However, the relative merits of W versus V-cycle strategies can be very case dependent.
Reference: [9] <author> R. Mirchandaney, J. H. Saltz, R. M. Smith, D. M. Nicol, and Kay Crowley. </author> <title> Principles of runtime support for parallel processors. </title> <booktitle> In Proceedings of the 1988 ACM International Conference on Supercomputing , St. Malo France, </booktitle> <pages> pages 140-152, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: In this case, it is not possible to predict at compile time what data must be prefetched. This lack of information is dealt with by transforming the original parallel loop into two constructs called an inspector and executor <ref> [9] </ref>. During program execution, the inspector examines the data references made by a processor, and calculates what off-processor data needs to be fetched and where that data will be stored once it is received. The executor loop then uses the information from the inspector to implement the actual computation.
Reference: [10] <author> A. Pothen, H. D. Simon, and K. P. Liou. </author> <title> Partitioning sparse matrices with eigenvectors of graphs. </title> <journal> SIAM J. Mat. Anal. Appl., </journal> <volume> 11 </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: For the multigrid run, engineering solutions (3 to 4 orders of convergence) for this case could thus be obtained in roughly 30 minutes of CRAY-YMP single processor CPU time. We employed the recursive spectral partitioning algorithm to carry out partitioning <ref> [10] </ref>, [13]. Williams [16] compared this algorithm with binary dissection [1] and simulated annealing methods for partitioning two dimensional unstructured mesh calculations. He found that recursive spectral partitioning produced better partitions than binary dissection.
Reference: [11] <author> Y. Saad. Sparsekit: </author> <title> a basic tool kit for sparse matrix computations. </title> <type> Report 90-20, </type> <institution> RIACS, </institution> <year> 1990. </year>
Reference: [12] <author> J. Saltz, H. Berryman, and J. Wu. </author> <title> Runtime compilation for multiprocessors, </title> <note> to appear: Concur-rency, Practice and Experience, </note> <year> 1991. </year> <type> Report 90-59, </type> <institution> ICASE, </institution> <year> 1990. </year>
Reference-contexts: The research described in this paper began with the version of of PARTI described in <ref> [12] </ref> and surveyed in this section. We then proceeded to identify ways in which the performance of unstructured codes could be optimized. The optimizations that involved reduction of communication overheads resulted in an improved version of PARTI. The optimizations that involved reduction of computation time were manually implemented. <p> The encapsulation of the communications optimizations into a set of software primitives eases the implementation of similar problems and the porting to dif 7 ferent architectures, while providing the foundations for possible run-time compilation support of paral-lelization <ref> [12] </ref>. The simultaneous use of an efficient multigrid algorithm and massive parallelism results in rapid solution times for large problems. Our approach is designed to facilitate the development of parallelized adaptive meshing strategies.
Reference: [13] <author> H. Simon. </author> <title> Partitioning of unstructured mesh problems for parallel processing. </title> <booktitle> In Proceedings of the Conference on Parallel Methods on Large Scale Structural Analysis and Physics Applications. </booktitle> <publisher> Permagon Press, </publisher> <year> 1991. </year>
Reference-contexts: For the multigrid run, engineering solutions (3 to 4 orders of convergence) for this case could thus be obtained in roughly 30 minutes of CRAY-YMP single processor CPU time. We employed the recursive spectral partitioning algorithm to carry out partitioning [10], <ref> [13] </ref>. Williams [16] compared this algorithm with binary dissection [1] and simulated annealing methods for partitioning two dimensional unstructured mesh calculations. He found that recursive spectral partitioning produced better partitions than binary dissection. <p> He found that recursive spectral partitioning produced better partitions than binary dissection. Simulated annealing in some cases produced better partitions but the overhead for simulated annealing proved to be prohibitive even for the relatively small meshes employed (the largest had 5772 elements). Venkatakrishnan [14] and Simon <ref> [13] </ref> also reported favorable results with this partitioner. We carried out preliminary performance comparisons between binary dissection and the recursive spectral partitioning and found that recursive spectral partitioning gave superior results on the iPSC/860 on our three dimensional meshes.
Reference: [14] <author> V. Venkatakrishnan, H. D. Simon, and T. J. Barth. </author> <title> A MIMD implementation of a parallel euler solver for unstructured grids, </title> <note> submitted to Journal of Supercomputing. Report RNR-91-024, </note> <institution> NAS Systems Division, NASA Ames Research Center, </institution> <month> Sept </month> <year> 1991. </year>
Reference-contexts: Similarly, experience gained during the implementation was used to modify various primitives and even to create new primitives whose functionality had not been forseen. Parallel unstructured solver implementations have been performed in two-dimensions by various authors, on SIMD architectures memory MIMD architectures <ref> [14] </ref>, [15] and [6]. Software environments for irregular problems have also been developed and applied to two-dimensional unstructured grid solvers [15], and to two dimensional unstructured multigrid solvers While much use has been made of the concepts developed in previous work, new optimizations have also been devised and incorporated. <p> We use non-blocking receive calls (irecv), each processor posts all receive calls before it sends any data. Synchronization messages are employed to make sure that an appropriate receive has been posted before the relevent message is sent. Communications contention is also reduced. We use a heuristic developed by Venkatakrishnan <ref> [14] </ref> to determine the order in which each processor sends out its messages. The motivation for this heuristic is to reduce contention by by dividing the communication into groups of messages such that within each group, each processor sends and receives at most one message. <p> He found that recursive spectral partitioning produced better partitions than binary dissection. Simulated annealing in some cases produced better partitions but the overhead for simulated annealing proved to be prohibitive even for the relatively small meshes employed (the largest had 5772 elements). Venkatakrishnan <ref> [14] </ref> and Simon [13] also reported favorable results with this partitioner. We carried out preliminary performance comparisons between binary dissection and the recursive spectral partitioning and found that recursive spectral partitioning gave superior results on the iPSC/860 on our three dimensional meshes.
Reference: [15] <author> R. Williams. </author> <title> DIME Distributed irregular mesh environment: User's manual. </title> <type> Report C3P 861, Cal Tech, </type> <month> Feb </month> <year> 1990. </year>
Reference-contexts: Similarly, experience gained during the implementation was used to modify various primitives and even to create new primitives whose functionality had not been forseen. Parallel unstructured solver implementations have been performed in two-dimensions by various authors, on SIMD architectures memory MIMD architectures [14], <ref> [15] </ref> and [6]. Software environments for irregular problems have also been developed and applied to two-dimensional unstructured grid solvers [15], and to two dimensional unstructured multigrid solvers While much use has been made of the concepts developed in previous work, new optimizations have also been devised and incorporated. <p> Parallel unstructured solver implementations have been performed in two-dimensions by various authors, on SIMD architectures memory MIMD architectures [14], <ref> [15] </ref> and [6]. Software environments for irregular problems have also been developed and applied to two-dimensional unstructured grid solvers [15], and to two dimensional unstructured multigrid solvers While much use has been made of the concepts developed in previous work, new optimizations have also been devised and incorporated.

References-found: 15

