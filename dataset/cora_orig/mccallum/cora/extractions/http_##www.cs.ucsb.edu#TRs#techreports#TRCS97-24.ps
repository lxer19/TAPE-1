URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS97-24.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: teo@cs.ucsb.edu  
Title: Simple Algorithms for Multimessage Multicasting With Forwarding for problem instances where each processor needs to
Author: Teofilo F. Gonzalez most ld destinations. 
Note: l )dc 1,  
Date: December 19, 1997  
Address: Santa Barbara, CA, 93106  
Affiliation: Department of Computer Science University of California  
Abstract: We consider Multimessage Multicasting over the n processor complete (or fully connected) static network (MM C ) when the Forwarding of messages is allowed. We present an efficient algorithm that constructs for every degree d problem instance a communication schedule with total communication time at most 2d, where d is the maximum number of messages that each processor may send (receive). Our algorithm consists of two phases. In the first phase a set of communications are scheduled to be carried out in d time periods in such a way that the resulting problem is a multimessage unicasting problem of degree d. In the second phase we generate a communication schedule for this problem by reducing it to the Makespan Openshop Preemptive Scheduling problem which can be solved in polynomial time. The final schedule is the concatenation of the communication schedules for each of these two phases. For 2 l d we present an algorithm to generate a communication schedule with total communication time at most b(2 1 Our centralized algorithms require all the communication information ahead of time. Applications where all of this information is readily available include iterative algorithms for solving linear equations, and most dynamic programming procedures. The Meiko CS-2 machine and in general computer systems with processors communicating via dynamic permutation networks whose basic switches can act as data replicators (e.g., n by n Benes network with 2 by 2 switches that can also act as data replicators) will also benefit from our results since the schedules generated by our algorithm can be used in these systems. Keywords: Approximation Algorithms, Multimessage Multicasting, Dynamic Net works, Parallel Iterative Methods, Communication Schedules, Forwarding.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. S. Almasi, and A. Gottlieb, </author> <title> Highly Parallel Computing, </title> <publisher> The Benjamin/Cummings Publishing Co., Inc., </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: The first phase replicates data and transmits it to other processors, and the second phase distributes data to the appropriate processors ([17], [18], [21]). The IBM GF11 machine <ref> [1] </ref>, and the Meiko CS-2 machine use Benes networks for processor interconnection. The two stage translation process can also be used in the Meiko CS-2 computer system, and any multimessage multicasting schedule can be realized by using basic synchronization primitives.
Reference: [2] <author> E. G. Coffman, Jr, M. R. Garey, D. S. Johnson, and A. S. LaPaugh, </author> <title> "Scheduling File Transfers in Distributed Networks," </title> <journal> SIAM J. on Computing, </journal> <volume> 14(3) (1985), </volume> <pages> pp. 744 - 780. </pages>
Reference-contexts: It is not surprising that several authors have studied the M U C problem as well as several interesting variations for which NP-completeness has been established, subproblems have been shown to be polynomially solvable, and approximation algorithms and heuristics have been developed. Coffman, Garey, Johnson and LaPaugh <ref> [2] </ref> studied a version the multimessage unicasting problem when messages have different lengths, each processor can send (receive) ff (P i ) 1 (fi (P i ) 1) messages simultaneously, and messages are transmitted without interruption (non-preemptive mode). Whitehead [23] considered the case when messages can be sent indirectly.
Reference: [3] <author> H.-A. Choi, and S. L. Hakimi, </author> <title> "Data Transfers in Networks," </title> <journal> Algorithmica, </journal> <volume> Vol. 3, </volume> <year> (1988), </year> <pages> pp. 223 - 245. </pages>
Reference-contexts: Whitehead [23] considered the case when messages can be sent indirectly. The preemptive version of these problems as well as other generalizations were studied by Choi and Hakimi ([4], [5], <ref> [3] </ref>), Hajek and Sasaki [15], Gopal, Bongiovanni, Bonuccelli, Tang, and Wong [13]. Some of these papers considered the case when the input and output units are interchangeable, i.e., each processor can be involved in at most fl (P i ) message transmissions (sending and/or receiving).
Reference: [4] <author> H.-A. Choi, and S. L. Hakimi, </author> <title> "Scheduling File Transfers for Trees and Odd Cycles," </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 16, No. 1, </volume> <year> (1987), </year> <pages> pp. 162 - 168. </pages>
Reference: [5] <author> H.-A. Choi, and S. L. Hakimi, </author> <title> "Data Transfers in Networks with Transceivers," </title> <journal> Networks, </journal> <volume> Vol. 17, </volume> <year> (1987), </year> <pages> pp. 393 - 421. </pages>
Reference-contexts: Whitehead [23] considered the case when messages can be sent indirectly. The preemptive version of these problems as well as other generalizations were studied by Choi and Hakimi ([4], <ref> [5] </ref>, [3]), Hajek and Sasaki [15], Gopal, Bongiovanni, Bonuccelli, Tang, and Wong [13]. Some of these papers considered the case when the input and output units are interchangeable, i.e., each processor can be involved in at most fl (P i ) message transmissions (sending and/or receiving).
Reference: [6] <author> T. F. Gonzalez, </author> <title> "Multi-Message Multicasting," </title> <booktitle> Proceedings of the Third International Workshop on Parallel Algorithms for Irregularly Structured Problems (Irregular'96), Lecture Notes in Computer Science (1117), </booktitle> <publisher> Springer, </publisher> <year> (1996), </year> <pages> pp. 217-228. </pages>
Reference-contexts: The M M C problem is significantly harder than the M U C . Gonzalez [8] showed that even when k = 2 the decision version of the M M C problem is NP-complete. Gonzalez <ref> [6] </ref> developed an efficient algorithm to construct for any degree d problem instance a communication schedule 6 with total communication time at most d 2 , and presented problem instances for which this upper bound on the communication time is best possible, i.e. the upper bound is also a lower bound. <p> Gonzalez <ref> [6] </ref> and [7] developed several fast approximation algorithms with improved approximation bounds for problems instances with any arbitrary degree d, but small fan-out ([6], [7]).
Reference: [7] <author> T. F. Gonzalez, </author> <title> "Improved Multimessage Multicasting Approximation Algorithms," </title> <booktitle> Proceedings of the Ninth International Conference on Parallel and Distributed Computing Systems PDCS'96, </booktitle> <year> (1996), </year> <pages> pp. 456 - 461, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: The lower bound holds when there is a huge number of processors and the fan-out is also huge. Since this situation is not likely to arise in the near future, Gonzalez considered the M M C problem with restricted fan-out ([6], <ref> [7] </ref>). Gonzalez [8] developed an algorithm to construct a communication schedule with total communication time 2d 1 for the case when the fan-out is two, i.e., k = 2. <p> Gonzalez [6] and <ref> [7] </ref> developed several fast approximation algorithms with improved approximation bounds for problems instances with any arbitrary degree d, but small fan-out ([6], [7]). <p> Gonzalez [6] and <ref> [7] </ref> developed several fast approximation algorithms with improved approximation bounds for problems instances with any arbitrary degree d, but small fan-out ([6], [7]). These problem instances are the ones that arise in practice, since the fan-out restriction is imposed by the applications and the number of processors available in commercial systems. The approximation bound for these methods is about ( p k + 1)d, where k is the fan-out. <p> This algorithm is a simplified version of Gonzalez' algorithm [9]. We should point out that the previous approximation algorithms ([6], <ref> [7] </ref>) are faster than the one presented in this paper. However, our new algorithm generates communication schedules with significantly smaller total communication time. Our new algorithm consists of two phases. <p> This is significantly better than the one of previous algo 19 (b) a d f b c fa d h 1 34 1 3 5 b d f h (a). rithms ([6], <ref> [7] </ref>). However those algorithms are faster and were designed for the case when forwarding was not allowed. Our algorithm is a simplified version of the one in [9]. The approach we have taken can be shown to require in the worst case 2d communication steps.
Reference: [8] <author> T. F. Gonzalez, </author> <title> "Multi-Message Multicasting: Complexity and Approximations," </title> <booktitle> Proceedings of the 30th Hawaii International Conference on System Sciences HICSS-30. </booktitle> <institution> Also UCSB Department of Computer Science, </institution> <type> Technical Report TRCS-96-15, </type> <month> July </month> <year> 1996. </year>
Reference-contexts: For example technical reports may be sent indirectly, but it may be unacceptable to transmit credit card numbers, or other sensitive information indirectly when a direct link exists. Our introduction is a condensed version of the one in <ref> [8] </ref> which includes a complete justification for the multimessage multicasting problem as well as motivations, applications, and examples. Routing in the complete static network (there are bidirectional links between every pair of processors) is the simplest and most flexible when compared to other static and dynamic networks. <p> When the processors are connected via a pr-dynamic network a communication mode can be performed in two stages: the data replication step followed by the data distribution step ([17], [21], [18]). This two stage process can be used in the MEIKO CS-2 machine <ref> [8] </ref>. An important subproblem of the basic multicasting problem is when every message it to be sent to adjacent numbered processors. In this case this basic multicast operation can be performed in one step in pr-dynamic networks ([17]), and in the MEIKO CS-2 machine. Gonzalez [8] also considered the case when <p> in the MEIKO CS-2 machine <ref> [8] </ref>. An important subproblem of the basic multicasting problem is when every message it to be sent to adjacent numbered processors. In this case this basic multicast operation can be performed in one step in pr-dynamic networks ([17]), and in the MEIKO CS-2 machine. Gonzalez [8] also considered the case when each message has fixed fan-out k (maximum number of processors that may receive a given message). <p> The M M C problem involves multicasting of any number of messages, and its communication model is similar in nature to the one in the Meiko CS2 machine, after solving some basic synchronization problems. The M M C problem is significantly harder than the M U C . Gonzalez <ref> [8] </ref> showed that even when k = 2 the decision version of the M M C problem is NP-complete. <p> The lower bound holds when there is a huge number of processors and the fan-out is also huge. Since this situation is not likely to arise in the near future, Gonzalez considered the M M C problem with restricted fan-out ([6], [7]). Gonzalez <ref> [8] </ref> developed an algorithm to construct a communication schedule with total communication time 2d 1 for the case when the fan-out is two, i.e., k = 2. <p> (q de) time algorithm, where e nd (the input size), to construct for problem instances of degree d a communication schedule with total communication time qd + k 1 where q is the maximum number of colors that can be used to color each bundle and k &gt; q 2 <ref> [8] </ref>. Gonzalez [6] and [7] developed several fast approximation algorithms with improved approximation bounds for problems instances with any arbitrary degree d, but small fan-out ([6], [7]). <p> The approximation bound for these methods is about ( p k + 1)d, where k is the fan-out. It is simple to show that the NP-completeness reduction for the M M C problem given in <ref> [8] </ref> can be easily modified to establish the NP-completeness for the M M F C problem. All the approximation results for the M M C problem also hold for the M M F C problem. <p> We construct the communication schedule X with total communication time ^ d for the transmission of these messages. The final communication schedule is X plus a communication schedule for ( ^ I, ^ G). 2. Construct a Communication Schedule for the Multimessage Unicasting Problem Instance: Apply the reduction in <ref> [8] </ref> to problem instance ( ^ I; ^ G) of the M U C problem to generate the instance R of the openshop problem. <p> This reduction appears in <ref> [8] </ref>, but since it is a simple one we include it here for completeness. An openshop consists of m 1 machines, and n 1 jobs. Each job consists of m tasks.
Reference: [9] <author> T. F. Gonzalez, </author> <title> "Simple Multimessage Multicasting Approximation Algorithms Allowing Forwarding," </title> <booktitle> Proceedings of the Tenth International Conference on Parallel and Distributed Computing Systems PDCS'97, (1997), </booktitle> <volume> 372 - 377. </volume>
Reference-contexts: In this paper we present an efficient algorithm to construct for every degree d problem instance a communication schedule with total communication time at most 2d, where d is the maximum number of messages that each processor may send (receive). This algorithm is a simplified version of Gonzalez' algorithm <ref> [9] </ref>. We should point out that the previous approximation algorithms ([6], [7]) are faster than the one presented in this paper. However, our new algorithm generates communication schedules with significantly smaller total communication time. Our new algorithm consists of two phases. <p> Proof: By the above discussion. 2 In Section 5 we discuss ways to decrease the total number of messages that need to be transmitted following the ideas behind the algorithm given in <ref> [9] </ref>. 3 Approximation Algorithm for the l M M F C problem We present in this section our algorithm to generate a communication schedule with total communication time at most b (2 1 l )dc + 1 for the l MM F C problem, for 2 l d. <p> However those algorithms are faster and were designed for the case when forwarding was not allowed. Our algorithm is a simplified version of the one in <ref> [9] </ref>. The approach we have taken can be shown to require in the worst case 2d communication steps.
Reference: [10] <author> T. F. Gonzalez, </author> <title> "Improved Approximation Algorithms for Multimessage Multicasting," </title> <institution> UCSB Department of Computer Science, </institution> <type> Technical Report TRCS-96-16, </type> <month> July </month> <year> 1996. </year>
Reference: [11] <author> T. F. Gonzalez, </author> <title> "An Approximation Algorithm for the Multi-Via Assignment Problem," </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> Vol. CAD-3, No. 4, </volume> <year> (1984), </year> <pages> pp. 257 - 264. </pages>
Reference-contexts: Our algorithm is similar to a subalgorithm for an approximation algorithm for the MultiVia Assignment problem given by Gonzalez in <ref> [11] </ref>. The idea is to select an origin for each message in such a way that the resulting problem instance has least degree. <p> The set of dotted edges is an optimal complete s-matching with M (I) = 2. It is simple to show that in this case there is more than one optimal complete s-matching. A polynomial time algorithm for finding an optimal complete s-matching is given by Gonzalez <ref> [11] </ref>. The algorithm finds a maximum matching in a set of bipartite graphs. The time complexity is O (es 1:5 t 0:5 log s), where e is the number of edges, s = jSj, and t = jT j.
Reference: [12] <author> T. F. Gonzalez, and S. Sahni, </author> <title> "Open Shop Scheduling to Minimize Finish Time," </title> <journal> JACM, </journal> <volume> Vol. 23, No. 4, </volume> <year> (1976), </year> <pages> pp. 665 - 679. </pages>
Reference-contexts: The idea is to transmit a set of messages through a set of communication modes in such a way that the resulting problem is a multimessage unicasting problem. The multimessage unicasting problem can be solved in polynomial time <ref> [12] </ref>. Before we present our algorithm we define additional terms. <p> Solve the openshop problem 8 R by using Gonzalez and Sahni's algorithm <ref> [12] </ref> and construct from it a communication schedule (X 0 ) for problem instance ( ^ I; ^ G) with total communication time equal to ^ d. 3. Construct the Final Communication Schedule: Concatenate the communication schedules X and X 0 . <p> We construct a communication schedule for the instance ( ^ I; ^ G) of the M U C problem of degree ^ d with total communication time ^ d by reducing it to the Makespan Openshop Preemptive Scheduling problem, which can be solved by the polynomial time algorithm given in <ref> [12] </ref>. This reduction appears in [8], but since it is a simple one we include it here for completeness. An openshop consists of m 1 machines, and n 1 jobs. Each job consists of m tasks. <p> Let m i be the total time that machine i must be busy, and t j be the total time that job j needs to be executed. Let t = maxfm i ; t j g. Gonzalez and Sahni <ref> [12] </ref> have shown that there is always a preemptive schedule with finish time t, which is the best possible, and that one 12 such schedule can be constructed in O (r (minfr; m 2 g + m log n)) time, where r is the number of nonzero tasks. <p> Furthermore, when all of the t i;j s are integers, there is a schedule where preemptions occur only at integer points, and one such schedule is generated by Gonzalez and Sahni's <ref> [12] </ref> algorithm. The M U C problem of degree ^ d is a special case of the preemptive openshop problem with every t i;j 2 f0; 1; : : : ; ^ dg. Each of the ^n vertices in the communication graph represents a job, and a machine. <p> Furthermore, one can easily adapt the algorithm for the minimum finish time openshop problem given in <ref> [12] </ref> to construct one such communication schedule. The time complexity is O (r (minfr; ^n 2 g + ^n log ^n)), where r ^ d^n. This is formalized in the following lemma. <p> is a superfluous operation which can be deleted. 1 9 3 8 a g b a 7 4 f k T3 T4 5 2 3 12 4 11 a f b c j 2.0.3 Construct the Final Communication Schedule Solve the openshop problem R by using Gonzalez and Sahni's algorithm <ref> [12] </ref> and construct from it a communication schedule (X 0 ) for problem instance ^ I of the M U C problem with total communication time equal to ^ d, as pointed out in the previous subsection. 13 Concatenate the communication schedule X with X 0 .
Reference: [13] <author> I. S. Gopal, G. Bongiovanni, M. A. Bonuccelli, D. T. Tang, and C. K. Wong, </author> <title> "An Optimal Switching Algorithm for Multibean Satellite Systems with Variable Bandwidth Beams," </title> <journal> IEEE Transactions on Communications, COM-30, </journal> <note> 11 (1982) pp. 2475 - 2481. </note>
Reference-contexts: Whitehead [23] considered the case when messages can be sent indirectly. The preemptive version of these problems as well as other generalizations were studied by Choi and Hakimi ([4], [5], [3]), Hajek and Sasaki [15], Gopal, Bongiovanni, Bonuccelli, Tang, and Wong <ref> [13] </ref>. Some of these papers considered the case when the input and output units are interchangeable, i.e., each processor can be involved in at most fl (P i ) message transmissions (sending and/or receiving).
Reference: [14] <author> A J. Hopcroft, and R. M. Karp, </author> <title> "An n 2:5 Algorithm for Maximum Matchings in Bipartite Graphs," </title> <journal> SIAM J. Computing, </journal> <year> (1973), </year> <pages> pp. 225 - 231. </pages>
Reference: [15] <author> B. Hajek, and G. Sasaki, </author> <title> "Link Scheduling in Polynomial Time," </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> Vol. 34, No. 5, </volume> <year> (1988), </year> <pages> pp. 910 - 917. </pages>
Reference-contexts: Whitehead [23] considered the case when messages can be sent indirectly. The preemptive version of these problems as well as other generalizations were studied by Choi and Hakimi ([4], [5], [3]), Hajek and Sasaki <ref> [15] </ref>, Gopal, Bongiovanni, Bonuccelli, Tang, and Wong [13]. Some of these papers considered the case when the input and output units are interchangeable, i.e., each processor can be involved in at most fl (P i ) message transmissions (sending and/or receiving).
Reference: [16] <author> I. Holyer, </author> <title> "The NP-completeness of Edge-Coloring," </title> <journal> SIAM J. Comp., </journal> <volume> 11 (1982), 117 - 129. </volume>
Reference: [17] <author> T. T. Lee, </author> <title> "Non-blocking Copy Networks for Multicast Packet Switching," </title> <journal> IEEE J. Selected Areas of Communication, </journal> <volume> Vol. 6, No 9, </volume> <year> (1988), </year> <pages> pp. 1455 - 1467. </pages>
Reference: [18] <author> S. C. Liew, </author> <title> "A General Packet Replication Scheme for Multicasting in Interconnection Networks," </title> <booktitle> Proceedings IEEE INFOCOM '95, Vol.1 (1995), </booktitle> <pages> pp. 394 - 401. 21 </pages>
Reference-contexts: This is accomplished by translating each communication phase for the complete network into no more than two communication phases for pr-dynamic networks. The first phase replicates data and transmits it to other processors, and the second phase distributes data to the appropriate processors ([17], <ref> [18] </ref>, [21]). The IBM GF11 machine [1], and the Meiko CS-2 machine use Benes networks for processor interconnection. The two stage translation process can also be used in the Meiko CS-2 computer system, and any multimessage multicasting schedule can be realized by using basic synchronization primitives. <p> The two stage translation process can also be used in the Meiko CS-2 computer system, and any multimessage multicasting schedule can be realized by using basic synchronization primitives. This two step translation process can be reduced to one step by increasing the number of network switches about 50% ([17], <ref> [18] </ref>, and [21]). In what follows we concentrate on the M M C problem because it has a simple structure, and, as mentioned above, results for this network can be easily translated to pr-dynamic networks. Let us formally define our problem. <p> The communication schedule has only one communication mode. When the processors are connected via a pr-dynamic network a communication mode can be performed in two stages: the data replication step followed by the data distribution step ([17], [21], <ref> [18] </ref>). This two stage process can be used in the MEIKO CS-2 machine [8]. An important subproblem of the basic multicasting problem is when every message it to be sent to adjacent numbered processors.
Reference: [19] <author> P. I. Rivera-Vega, R, Varadarajan, and S. B. Navathe, </author> <title> "Scheduling File Transfers in Fully Connected Networks," </title> <journal> Networks, </journal> <volume> Vol. 22, </volume> <year> (1992), </year> <pages> pp. 563 - 588. </pages>
Reference-contexts: Some of these papers considered the case when the input and output units are interchangeable, i.e., each processor can be involved in at most fl (P i ) message transmissions (sending and/or receiving). Rivera-Vega, Varadarajan and Navathe <ref> [19] </ref> studied, the file transferring problem, a version the multimessage unicasting problem for the complete network when every vertex can send (receive) as many messages as the number of outgoing (incoming) links.
Reference: [20] <author> H. Shen, </author> <title> "Efficient Multiple Multicasting in Hypercubes," </title> <journal> Journal of Systems Architecture, </journal> <volume> Vol. 43, No. 9, </volume> <month> Aug. </month> <year> 1997. </year>
Reference-contexts: All the previous work has been limited to unicasting, and all known results about multicasting are limited to single messages, except for the work by Shen <ref> [20] </ref> who has studied multimessage multicasting for hypercube connected processors. His algorithms are heuristic and try to minimize the maximum number of hops, amount of traffic, and degree of message multiplexing. Since hypercubes are static networks, there is no direct comparison to our work.
Reference: [21] <author> J. S. Turner, </author> <title> "A Practical Version of Lee's Multicast Switch Architecture," </title> <journal> IEEE Transactions on Communications, </journal> <volume> Vol. 41, No 8, </volume> <year> (1993), </year> <pages> pp. 1166 - 1169. </pages>
Reference-contexts: This is accomplished by translating each communication phase for the complete network into no more than two communication phases for pr-dynamic networks. The first phase replicates data and transmits it to other processors, and the second phase distributes data to the appropriate processors ([17], [18], <ref> [21] </ref>). The IBM GF11 machine [1], and the Meiko CS-2 machine use Benes networks for processor interconnection. The two stage translation process can also be used in the Meiko CS-2 computer system, and any multimessage multicasting schedule can be realized by using basic synchronization primitives. <p> This two step translation process can be reduced to one step by increasing the number of network switches about 50% ([17], [18], and <ref> [21] </ref>). In what follows we concentrate on the M M C problem because it has a simple structure, and, as mentioned above, results for this network can be easily translated to pr-dynamic networks. Let us formally define our problem. <p> The communication schedule has only one communication mode. When the processors are connected via a pr-dynamic network a communication mode can be performed in two stages: the data replication step followed by the data distribution step ([17], <ref> [21] </ref>, [18]). This two stage process can be used in the MEIKO CS-2 machine [8]. An important subproblem of the basic multicasting problem is when every message it to be sent to adjacent numbered processors.
Reference: [22] <author> V. G. Vizing, </author> <title> "On an Estimate of the Chromatic Class of a p-graph," </title> <journal> Diskret. Analiz., </journal> <volume> 3 (1964), </volume> <pages> pp. </pages> <note> 25 - 30 (In Russian). </note>
Reference: [23] <author> J. Whitehead, </author> <title> "The Complexity of File Transfer Scheduling with Forwarding," </title> <journal> SIAM Journal on Computing Vol. </journal> <volume> 19, No 2, </volume> <year> (1990), </year> <pages> pp. 222 - 245. 22 </pages>
Reference-contexts: Coffman, Garey, Johnson and LaPaugh [2] studied a version the multimessage unicasting problem when messages have different lengths, each processor can send (receive) ff (P i ) 1 (fi (P i ) 1) messages simultaneously, and messages are transmitted without interruption (non-preemptive mode). Whitehead <ref> [23] </ref> considered the case when messages can be sent indirectly. The preemptive version of these problems as well as other generalizations were studied by Choi and Hakimi ([4], [5], [3]), Hajek and Sasaki [15], Gopal, Bongiovanni, Bonuccelli, Tang, and Wong [13].
References-found: 23

