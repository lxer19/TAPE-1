URL: http://www.cs.washington.edu/homes/zamir/kdd97.ps
Refering-URL: http://huskysearch.cs.washington.edu/huskysearch/help/Bibliography.html
Root-URL: 
Email: zamir@cs.washington.edu  
Title: Fast and Intuitive Clustering of Web Documents  
Author: Oren Zamir and Oren Etzioni and Omid Madani and Richard M. Karp 
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science Engineering University of Washington  
Abstract: Conventional document retrieval systems (e.g., Alta Vista) return long lists of ranked documents in response to user queries. Recently, document clustering has been put forth as an alternative method of organizing retrieval results (Cutting et al. 1992). A person browsing the clusters can discover patterns that could be overlooked in the traditional presentation. This paper describes two novel clustering methods that intersect the documents in a cluster to determine the set of words (or phrases) shared by all the documents in the cluster. We report on experiments that evaluate these intersection-based clustering methods on collections of snippets returned from Web search engines. First, we show that word-intersection clustering produces superior clusters and does so faster than standard techniques. Second, we show that our O(n log n) time phrase-intersection clustering method produces comparable clusters and does so more than two orders of magnitude faster than all methods tested. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Cutting, D. R.; Karger, D. R.; Pedersen, J. O.; and Tukey, J. W. </author> <year> 1992. </year> <title> Scatter/gather: a cluster-based approach to browsing large document collections. </title> <booktitle> In 15th International ACM SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <pages> 318-29. </pages>
Reference-contexts: In this paper we describe and experimentally evaluate two novel clustering methods that meet the above requirements to varying degrees. Document Clustering Document clustering has been traditionally investigated mainly as a means of improving document search and retrieval. Recently, a technique named Scatter/Gather <ref> (Cutting et al. 1992) </ref> introduced document clustering as a document browsing method. Our work follows the same paradigm. Hierarchical agglomerative clustering (HAC) algorithms are the most commonly used methods for document clustering (Willet 1988).
Reference: <author> Milligan, G. W., and Cooper, M. C. </author> <year> 1985. </year> <title> An examination of procedures for detecting the number of clusters in a data set. </title> <type> Psychometrika 50 </type> <pages> 159-79. </pages>
Reference-contexts: The similarity of two documents is often taken as a normalized function of the dot product of their attribute vectors. Several halting criteria for HAC algorithms have been suggested <ref> (Milligan & Cooper 1985) </ref>, but they are typically based on predetermined constants (e.g., halt when 5 clusters remain).
Reference: <author> Rijsbergen, C. V. </author> <year> 1971. </year> <title> An algorithm for information structuring and retrieval. </title> <journal> Computer Journal 14 </journal> <pages> 407-412. </pages>
Reference: <author> Selberg, E., and Etzioni, O. </author> <year> 1995. </year> <title> Multi-service search and comparison using the metacrawler. </title> <booktitle> In Proc. 4th World Wide Web Conf., </booktitle> <pages> 195-208. </pages>
Reference-contexts: We chose to apply the algorithms to snippet collections created by merging several distinct base collections. We then scored the resulting clustering by measuring its deviation from the original partition of the snippets into base collections. We created 88 base collections from snippets returned by MetaCrawler <ref> (Selberg & Etzioni 1995) </ref> in response to 88 different queries. Each of the queries contained between 1 and 4 keywords and defined a topic in computer science (e.g. kernel & architecture; biology & computational; compiler). Each base collection contained approximately 120 snippets; each snippet contained 40 words, on average.
Reference: <author> Shakes, J.; Langheinrich, M.; and Etzioni, O. </author> <year> 1997. </year> <title> Ahoy! the home page finder. </title> <booktitle> In Proc. 6th World Wide Web Conf. </booktitle>
Reference-contexts: Moreover, the typical user has trouble formulating highly specific queries and does not take advantage of advanced search options. Finally, this problem gets worse as the Web continues to grow. Instead of attempting to reduce the number of documents returned (e.g., by filtering methods <ref> (Shakes, Langheinrich, & Etzioni 1997) </ref>) we attempt to make search engine results easy to browse. We investigate document clustering as a method that enables users to efficiently navigate through a large collection of documents.
Reference: <author> Ukkonen, E. </author> <year> 1995. </year> <title> On-line construction of suffix-trees. </title> <journal> Algorithmica 14 </journal> <pages> 249-260. </pages>
Reference-contexts: We are currently exploring the option of merging potential clusters with high overlap. The space requirement of the suffix tree is O (n), and it can be constructed in O (n) time <ref> (Ukkonen 1995) </ref>. The suffix tree can be built incrementally as the documents arrive. This allows the use of "free" CPU cycles as the system waits for additional documents.
Reference: <author> Voorhees, E. </author> <year> 1986a. </year> <title> The effectiveness and efficiency of agglomerative hierarchic clustering in document retrieval. </title> <type> Ph.D. Dissertation, </type> <institution> Cornell University. </institution>
Reference-contexts: Single-link (Rijsber-gen 1971) and group-average methods typically take O (n 2 ) time 1 , while complete-link methods typically take O (n 3 ) time (Voorhees 1986b). In terms of quality, on the other hand, complete-link algorithms have been shown to perform well in comparative studies of document retrieval <ref> (Voorhees 1986a) </ref>, as they tend to produce "tight" clusters | clusters in which all the documents are similar to one another. Single-link, and to a lesser degree group-average methods, exhibit a tendency toward creating elongated clusters.
Reference: <author> Voorhees, E. </author> <year> 1986b. </year> <title> Implementing agglomerative hierarchical clustering algorithms for use in document retrieval. </title> <booktitle> Information Processing & Management 22 </booktitle> <pages> 465-476. </pages>
Reference-contexts: This sort of "noise" reduces even further the effectiveness of commonly-used halting criteria. HAC algorithms are typically slow when applied to large document collections. Single-link (Rijsber-gen 1971) and group-average methods typically take O (n 2 ) time 1 , while complete-link methods typically take O (n 3 ) time <ref> (Voorhees 1986b) </ref>. In terms of quality, on the other hand, complete-link algorithms have been shown to perform well in comparative studies of document retrieval (Voorhees 1986a), as they tend to produce "tight" clusters | clusters in which all the documents are similar to one another.
Reference: <author> Weiner, P. </author> <year> 1973. </year> <title> Linear pattern matching algorithms. </title> <booktitle> In 14th Annual Symposium on Foundations of Computer Science (FOCS), </booktitle> <pages> 1-11. </pages>
Reference-contexts: The HAC algorithms mentioned previously have O (n 2 ) time complexity, an obstacle to our speed and scalability goals. Phrase-IC using suffix trees <ref> (Weiner 1973) </ref> is an O (n log n) time algorithm that results in a large speedup without much degradation in quality. The suffix tree of a set of strings is a compact trie containing all the suffixes of all the strings.
Reference: <author> Willet, P. </author> <year> 1988. </year> <title> Recent trends in hierarchical document clustering: a critical review. </title> <booktitle> Information Processing and Management 24 </booktitle> <pages> 577-97. </pages>
Reference-contexts: Recently, a technique named Scatter/Gather (Cutting et al. 1992) introduced document clustering as a document browsing method. Our work follows the same paradigm. Hierarchical agglomerative clustering (HAC) algorithms are the most commonly used methods for document clustering <ref> (Willet 1988) </ref>. These algorithms start with each document in a cluster of its own, iterate by merging the two most similar clusters, and terminate when some halting criterion is reached. HAC algorithms require the definition of a similarity function between documents and between sets of documents.
References-found: 10

