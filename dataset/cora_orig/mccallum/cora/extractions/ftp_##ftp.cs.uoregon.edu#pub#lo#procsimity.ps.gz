URL: ftp://ftp.cs.uoregon.edu/pub/lo/procsimity.ps.gz
Refering-URL: http://www.cs.uoregon.edu/research/DistributedComputing/archive.html
Root-URL: http://www.cs.uoregon.edu
Email: fkurtw,jayne,lo@cs.uoregon.edug  
Phone: 503-346-4473  
Title: ProcSimity: An Experimental Tool for Processor Allocation and Scheduling in Highly Parallel Systems  
Author: Kurt Windisch, Jayne Valenti Miller, Virginia Lo 
Address: OR 97403-1202  
Affiliation: Dept. of Computer Science University of Oregon, Eugene,  
Abstract: ProcSimity is a software tool that supports research in processor allocation and scheduling for highly parallel systems. ProcSimity's multicomputer simulator supports experimentation with selected allocation and scheduling algorithms on architectures with a range of network topologies and for several current routing and flow control mechanisms. Message-passing can be simulated in detail at the flit level or at a higher level of modeling. Our tool supports both stochastic job streams as well as communication patterns from actual parallel applications, including several of the NAS parallel benchmarks. ProcSimity's visualization and performance analysis tool allows the user to view a dynamic animation of the selected algorithms as well as a variety of system and job level performance met-rics. ProcSimity has been successfully used in experiments investigating the feasibility of non-contiguous processor allocation in meshes and k-ary n-cubes. 
Abstract-found: 1
Intro-found: 1
Reference: [ADB89] <author> A. Al-Dhelaan and B. Bose. </author> <title> A new strategy for processors allocation in an n-cube multiprocessor. </title> <booktitle> In Proceedings of the International Phoenix Conference on Computers and Communication, </booktitle> <pages> pages 114-118, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: Buddy Searches a k-ary, statically partitioned subcube tree for a free R-dimensional subcube. [GC93] Extended Grey Code Searches a k-ary, grey-coded subcube tree for k adjacent (R 1)-dimensional subcubes. [GC93] Partner Searches a k-ary subcube tree for k dispersed (in the tree), but contiguous (in the network) (R 1)-dimensional subcubes. <ref> [ADB89] </ref> Non-contiguous k-ary n-cube Allocation Strategies (requests for number of processors needed) Random Randomly selects processors from the set of free processors to satisfy the request.
Reference: [BBDS94] <author> D. H. Bailey, E. Barszcz, L. Dagum, and H. D. Simon. </author> <title> NAS Parallel Benchmark Results 3-94. </title> <type> Technical Report RNR-94-006, </type> <institution> NASA Ames Research Center, Moffett Field, </institution> <address> CA, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: Job simulation is still somewhat high-level, since we model communication only, without detailed simulation of computation. Implemented communication patterns include random communication, all-to-all and one-to-all broadcast, Fast Fourier Transform (FFT), divide-and-conquer binomial tree, and several of the NAS Parallel Benchmarks <ref> [BBDS94] </ref>. 2.4 Visualization/Performance Analysis Monitoring behavior in a highly parallel system is notoriously hard, yet important, when considering which processor allocation or scheduling algorithm to utilize.
Reference: [BBKA93] <author> B. Bose, B. Broeg, Y. Kwon, and Y. Ashir. </author> <title> Lee distance and topological properties of k-ary n-cubes. </title> <type> Technical Report 93-60-11, </type> <institution> Oregon State University, Corvallis, </institution> <address> OR, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Proc-Simity currently supports both the mesh interconnection topology and the general k-ary n-cube topologies, including both torus and hypercube. Both the mesh and k-ary n-cube topologies use dimension order routing, that is, XY routing [NM93] and Lee distance routing <ref> [BBKA93] </ref>, respectively.
Reference: [CDJ + 91] <author> R. Covington, S. Dwarkadas, J. Jump, J. Sin-clair, and S. Madala. </author> <title> The efficient simulation of parallel computer system. </title> <journal> International Journal in Computer Simulations, </journal> <volume> 1 </volume> <pages> 31-58, </pages> <year> 1991. </year>
Reference-contexts: The simulator is implemented in C, using the process-oriented, discrete event simulation toolkits YACSIM, a general simulation library, and NETSIM, a library of network simulation extensions <ref> [CDJ + 91] </ref>. The visualization tool was built using Tcl version 7.3 and Tk version 3.6. The ProcSimity software was designed to allow new scheduling and allocation algo rithms, as well as new communication patterns, to be easily integrated.
Reference: [CT91] <author> P. Chuang and N. Tzeng. </author> <title> An efficient sub-mesh allocation strategy for mesh computer systems. </title> <booktitle> In 1991 International Conference on Distributed Computer Systems, </booktitle> <pages> pages 256-263, </pages> <year> 1991. </year>
Reference-contexts: the system ob Contiguous Mesh Allocation Strategies (requests for rectangular submeshes) Frame Sliding Examines the first candidate "frame" from the lowest leftmost available processor and slides the candidate frame horizontally or vertically by the stride of width or height of the requested submesh respectively, until an available frame is found. <ref> [CT91] </ref> First Fit Scans the mesh for a free rectangular submesh large enough for the requested submesh, and allocates from the first one found. [Zhu92] Best Fit Scans the mesh for free rectangular submeshes large enough for the requested submesh, and allocates from the one closest in size to the request.
Reference: [FS93] <author> M. L. Fulgham and L. Snyder. </author> <title> Performance of Chaos and oblivious routers under non-uniform traffic. </title> <type> Technical Report UW-CSE-93-06-01, </type> <institution> University of Washington, </institution> <address> Seattle WA, </address> <year> 1993. </year>
Reference-contexts: We conducted experiments comparing our simulator, without job communication, to Zhu's allocation simulator [Zhu92], which simulates jobs according to the same probabilistic service delay scheme used by ProcSimity. We also conducted experiments comparing our simulator, with job com munication patterns, to the Chaos Simulator <ref> [FS93] </ref>, which we modified to execute independent jobs and ProcSimity's communication patterns. In both comparisons, nearly identical normalized results were obtained, differing by no more than 7% in the worst case.
Reference: [GC93] <author> V. Gautam and V. Chaudhary. </author> <title> Subcube allocation strategies in a k-ary n-cube. </title> <booktitle> In Proceedings of the Sixth International Conference on Parallel and Distributed Computing Systems, </booktitle> <pages> pages 141-146, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: row-major. [LLWN94] Multiple Buddy Allocates multiple square blocks, whose side lengths are powers of two, until the job has received exactly the number of processors requested. [LLWN94] Contiguous k-ary n-cube Allocation Strategies (requests for k-ary R-cube) Extended Buddy Searches a k-ary, statically partitioned subcube tree for a free R-dimensional subcube. <ref> [GC93] </ref> Extended Grey Code Searches a k-ary, grey-coded subcube tree for k adjacent (R 1)-dimensional subcubes. [GC93] Partner Searches a k-ary subcube tree for k dispersed (in the tree), but contiguous (in the network) (R 1)-dimensional subcubes. [ADB89] Non-contiguous k-ary n-cube Allocation Strategies (requests for number of processors needed) Random Randomly <p> the job has received exactly the number of processors requested. [LLWN94] Contiguous k-ary n-cube Allocation Strategies (requests for k-ary R-cube) Extended Buddy Searches a k-ary, statically partitioned subcube tree for a free R-dimensional subcube. <ref> [GC93] </ref> Extended Grey Code Searches a k-ary, grey-coded subcube tree for k adjacent (R 1)-dimensional subcubes. [GC93] Partner Searches a k-ary subcube tree for k dispersed (in the tree), but contiguous (in the network) (R 1)-dimensional subcubes. [ADB89] Non-contiguous k-ary n-cube Allocation Strategies (requests for number of processors needed) Random Randomly selects processors from the set of free processors to satisfy the request.
Reference: [HE91] <author> M. T. Heath and J. A. Etheridge. </author> <title> Visualizing the performance of parallel programs. </title> <journal> IEEE Software, </journal> <volume> 28(1) </volume> <pages> 22-33, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: ProcSimity's visualization tool provides a dynamic display of allocation and deallocation events and a comprehensive suite of performance metrics. The visualization tool was designed to animate any allocation or scheduling algorithms and is driven by trace information from simulated runs. Our visualization tool is similar to ParaGraph <ref> [HE91] </ref> in that both graphically display dynamic, animated system behavior and performance metrics from simulation trace files. It is also similar to OREGAMI's Xmetrics [LWD92]: a tool for static analysis of mapping algorithms. ProcSimity is comprised of several windows which the user can control to observe the animation.
Reference: [KLR94] <author> P. Krueger, T. Lai, and V. A. Radiya. </author> <title> Job scheduling is more important than processor allocation for hypercube computers. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 5(5) </volume> <pages> 488-497, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Shortest (Longest) Service Demand The job with the shortest (longest) service demand, the estimated service time multiplied by the number of processors needed, is scheduled first. <ref> [KLR94] </ref> Shortest (Longest) Hold Time The job with the shortest (longest) hold time, the es timated service time, is scheduled first. [KLR94] Smallest (Largest) Job The job needing the smallest (largest) number of pro cessors is scheduled first. [KLR94] Table 1: Scheduling strategies provided by the simulator on-intervals distribution, allowing for <p> Shortest (Longest) Service Demand The job with the shortest (longest) service demand, the estimated service time multiplied by the number of processors needed, is scheduled first. <ref> [KLR94] </ref> Shortest (Longest) Hold Time The job with the shortest (longest) hold time, the es timated service time, is scheduled first. [KLR94] Smallest (Largest) Job The job needing the smallest (largest) number of pro cessors is scheduled first. [KLR94] Table 1: Scheduling strategies provided by the simulator on-intervals distribution, allowing for great flexibility in the job streams modeled. <p> service time multiplied by the number of processors needed, is scheduled first. <ref> [KLR94] </ref> Shortest (Longest) Hold Time The job with the shortest (longest) hold time, the es timated service time, is scheduled first. [KLR94] Smallest (Largest) Job The job needing the smallest (largest) number of pro cessors is scheduled first. [KLR94] Table 1: Scheduling strategies provided by the simulator on-intervals distribution, allowing for great flexibility in the job streams modeled. Jobs running in the system can be simulated at two different levels of detail.
Reference: [LLWN94] <author> W. Liu, V. M. Lo, K. Windisch, and B. Nitzberg. </author> <title> Non-contiguous processor allocation algorithms for distributed memory multi-computers. </title> <booktitle> In Proceedings Supercomputing '94, </booktitle> <pages> pages 227-236, </pages> <year> 1994. </year>
Reference-contexts: Fit Scans the mesh for free rectangular submeshes large enough for the requested submesh, and allocates from the one closest in size to the request. [Zhu92] Non-contiguous Mesh Allocation Strategies (requests for number of processors needed) Random Randomly selects processors from the set of free processors to satisfy the request. <ref> [LLWN94] </ref> Paging (i) Based on a static partitioning of the mesh into pages of size 2 i fi 2 i , repeatedly allocates pages to the job, in row-major order, until enough processors have been allocated to satisfy the request. Variations of paging use scan patterns other than row-major. [LLWN94] Multiple <p> request. <ref> [LLWN94] </ref> Paging (i) Based on a static partitioning of the mesh into pages of size 2 i fi 2 i , repeatedly allocates pages to the job, in row-major order, until enough processors have been allocated to satisfy the request. Variations of paging use scan patterns other than row-major. [LLWN94] Multiple Buddy Allocates multiple square blocks, whose side lengths are powers of two, until the job has received exactly the number of processors requested. [LLWN94] Contiguous k-ary n-cube Allocation Strategies (requests for k-ary R-cube) Extended Buddy Searches a k-ary, statically partitioned subcube tree for a free R-dimensional subcube. [GC93] Extended <p> Variations of paging use scan patterns other than row-major. <ref> [LLWN94] </ref> Multiple Buddy Allocates multiple square blocks, whose side lengths are powers of two, until the job has received exactly the number of processors requested. [LLWN94] Contiguous k-ary n-cube Allocation Strategies (requests for k-ary R-cube) Extended Buddy Searches a k-ary, statically partitioned subcube tree for a free R-dimensional subcube. [GC93] Extended Grey Code Searches a k-ary, grey-coded subcube tree for k adjacent (R 1)-dimensional subcubes. [GC93] Partner Searches a k-ary subcube tree for k dispersed (in <p> Most recent research efforts have focused on the choice of scheduling policies and their impact on contiguous allocation schemes. In <ref> [LLWN94] </ref> we investigate noncontiguous processor allocation strategies as another method for increasing processor utilization in mesh-based multicomputers. In this study, we use ProcSimity to analyze three non-contiguous processor allocation strategies for mesh-based multicomputers: the Multiple Buddy Strategy, Paging, and Random allocation.
Reference: [LWB95] <author> V. M. Lo, K. Windisch, and B. Bose. </author> <title> Processor allocation algorithms for k-ary n-cubes. </title> <booktitle> In 1995 International Conference on Parallel Processing, </booktitle> <year> 1995. </year>
Reference-contexts: Paging (i) Based on a static partitioning of the k-ary n-cube into k-ary i-cube pages, repeatedly allocates pages to the job until enough processors have been allocated to satisfy the request. <ref> [LWB95] </ref> Multiple Buddy Factors the request into multiple k-ary subcubes which are then obtained by searching a k-ary statically partitioned subcube tree. [LWB95] Multiple Partner Factors the request into multiple k-ary subcubes which are then obtained by the Partner method described above. [LWB95] Table 2: Allocation strategies provided by the simulator. <p> on a static partitioning of the k-ary n-cube into k-ary i-cube pages, repeatedly allocates pages to the job until enough processors have been allocated to satisfy the request. <ref> [LWB95] </ref> Multiple Buddy Factors the request into multiple k-ary subcubes which are then obtained by searching a k-ary statically partitioned subcube tree. [LWB95] Multiple Partner Factors the request into multiple k-ary subcubes which are then obtained by the Partner method described above. [LWB95] Table 2: Allocation strategies provided by the simulator. vious. As the animation runs, the user views dynamic allocation and deallocation events. <p> processors have been allocated to satisfy the request. <ref> [LWB95] </ref> Multiple Buddy Factors the request into multiple k-ary subcubes which are then obtained by searching a k-ary statically partitioned subcube tree. [LWB95] Multiple Partner Factors the request into multiple k-ary subcubes which are then obtained by the Partner method described above. [LWB95] Table 2: Allocation strategies provided by the simulator. vious. As the animation runs, the user views dynamic allocation and deallocation events. It is here that the user gains a strong visual sense of the allocated jobs' partitions, which vary according to the allocation algorithm selected.
Reference: [LWD92] <author> V. M. Lo, K. Windisch, and R. Datta. Met-rics: </author> <title> A tool for display and analysis of mappings in message-passing multicomputers. </title> <booktitle> In Scalable High Performance Computing Conference, </booktitle> <pages> pages 195-199, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Our visualization tool is similar to ParaGraph [HE91] in that both graphically display dynamic, animated system behavior and performance metrics from simulation trace files. It is also similar to OREGAMI's Xmetrics <ref> [LWD92] </ref>: a tool for static analysis of mapping algorithms. ProcSimity is comprised of several windows which the user can control to observe the animation. The following describes each window's display and function.
Reference: [NM93] <author> L. M. Ni and P. K. McKinley. </author> <title> A survey of wormhole routing techniques in direct networks. </title> <journal> IEEE Computer, </journal> <volume> 26(2) </volume> <pages> 62-75, </pages> <year> 1993. </year>
Reference-contexts: Adjacent nodes are connected by two uni-directional channels, and messages may be routed by either store-and-forward, virtual cut-through, or wormhole <ref> [NM93] </ref> flow control. Proc-Simity currently supports both the mesh interconnection topology and the general k-ary n-cube topologies, including both torus and hypercube. Both the mesh and k-ary n-cube topologies use dimension order routing, that is, XY routing [NM93] and Lee distance routing [BBKA93], respectively. <p> channels, and messages may be routed by either store-and-forward, virtual cut-through, or wormhole <ref> [NM93] </ref> flow control. Proc-Simity currently supports both the mesh interconnection topology and the general k-ary n-cube topologies, including both torus and hypercube. Both the mesh and k-ary n-cube topologies use dimension order routing, that is, XY routing [NM93] and Lee distance routing [BBKA93], respectively.
Reference: [Zhu92] <author> Y. Zhu. </author> <title> Efficient processor allocation strategies for mesh-connected parallel computers. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 16 </volume> <pages> 328-337, </pages> <year> 1992. </year>
Reference-contexts: and slides the candidate frame horizontally or vertically by the stride of width or height of the requested submesh respectively, until an available frame is found. [CT91] First Fit Scans the mesh for a free rectangular submesh large enough for the requested submesh, and allocates from the first one found. <ref> [Zhu92] </ref> Best Fit Scans the mesh for free rectangular submeshes large enough for the requested submesh, and allocates from the one closest in size to the request. [Zhu92] Non-contiguous Mesh Allocation Strategies (requests for number of processors needed) Random Randomly selects processors from the set of free processors to satisfy the <p> First Fit Scans the mesh for a free rectangular submesh large enough for the requested submesh, and allocates from the first one found. <ref> [Zhu92] </ref> Best Fit Scans the mesh for free rectangular submeshes large enough for the requested submesh, and allocates from the one closest in size to the request. [Zhu92] Non-contiguous Mesh Allocation Strategies (requests for number of processors needed) Random Randomly selects processors from the set of free processors to satisfy the request. [LLWN94] Paging (i) Based on a static partitioning of the mesh into pages of size 2 i fi 2 i , repeatedly allocates pages to the <p> Further, we validated our simulator by comparing its results to other independently developed simulations of similar systems. We conducted experiments comparing our simulator, without job communication, to Zhu's allocation simulator <ref> [Zhu92] </ref>, which simulates jobs according to the same probabilistic service delay scheme used by ProcSimity. We also conducted experiments comparing our simulator, with job com munication patterns, to the Chaos Simulator [FS93], which we modified to execute independent jobs and ProcSimity's communication patterns.
References-found: 14

