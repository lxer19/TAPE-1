URL: http://www.eecs.berkeley.edu/~tah/Publications/real-time_logics.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/real-time_logics.html
Root-URL: 
Title: Real-time Logics: Complexity and Expressiveness  
Author: Rajeev Alur Thomas A. Henzinger 
Address: 600 Mountain Avenue  Murray Hill, NJ 07974 Ithaca, NY 14853  
Affiliation: AT&T Bell Laboratories Computer Science Department  Cornell University  
Abstract: The theory of the natural numbers with linear order and monadic predicates underlies propositional linear temporal logic. To study temporal logics that are suitable for reasoning about real-time systems, we combine this classical theory of infinite state sequences with a theory of discrete time, via a monotonic function that maps every state to its time. The resulting theory of timed state sequences is shown to be decidable, albeit nonelementary, and its expressive power is characterized by !-regular sets. Several more expressive variants are proved to be highly undecidable. This framework allows us to classify a wide variety of real-time logics according to their complexity and expressiveness. Indeed, it follows that most formalisms proposed in the literature cannot be decided. We are, however, able to identify two elementary real-time temporal logics as expressively complete fragments of the theory of timed state sequences, and we present tableau-based decision procedures for checking validity. Consequently, these two formalisms are well-suited for the specification and verification of real-time systems.
Abstract-found: 1
Intro-found: 1
Reference: [ACD90] <author> R. Alur, C. Courcoubetis, and D.L. Dill. </author> <title> Model checking for real-time systems. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 414-425. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: For example, the real-time branching-time logics considered in <ref> [ACD90] </ref> and [Lew90] use the set of real numbers to model time, and hence the corresponding validity problems are undecidable. 3 Choosing the operations on time Having constrained ourselves to a discrete time domain, we need to choose the operations on time that are admitted in a logic.
Reference: [AD90] <author> R. Alur and D.L. Dill. </author> <title> Automata for modeling real-time systems. In M.S. </title> <editor> Paterson, editor, </editor> <booktitle> ICALP 90: Automata, Languages, and Programming, Lecture Notes in Computer Science 443, </booktitle> <pages> pages 322-335. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <title> 9 Alternatively, an automata-theoretic approach has also yielded useful results towards obtaining a theory of dense timed state sequences [AD90, </title> <journal> AH92a]. </journal> <volume> 31 </volume>
Reference: [AFH91] <author> R. Alur, T. Feder, and T.A. Henzinger. </author> <title> The benefits of relaxing punctuality. </title> <booktitle> In Pro--ceedings of the Tenth Annual Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 139-152. </pages> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: such that for every initial timed state sequence , 2 M T () iff 2 M T ( ). 8 If the underlying time domain is a dense linear order, then the given TPTL-property cannot be expressed in MTL P (this result will be reported in the journal version of <ref> [AFH91] </ref>). 29 Proof. <p> dense semantics: the only timing constraints required are conditions of the form (using MTL-notation) 2fl &gt;0 true; so that any time identifies a unique state, and of the form 2 (p ! 3 =1 q); to assert that "Every p-state is followed by a q-state precisely after time 1." In <ref> [AFH91] </ref>, we isolated a decidable fragment of MTL, which is called Metric Interval Temporal Logic (MITL). The syntax of MITL allows only nonsingular intervals as constraints on temporal operators. This syntactic restriction ensures that the time difference between two state changes can be enforced only with finite precision.
Reference: [AH89] <author> R. Alur and T.A. Henzinger. </author> <title> A really temporal logic. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 164-169. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1989. </year>
Reference-contexts: To enable quantitative reasoning about the timing delays in real-time applications, real-time logics include explicit time references and are interpreted over timed state sequences, which associate a time stamp with every system state <ref> [JM86, AH89, HLP90, Koy90, Ost90] </ref>. Although the suitability as specification language has often been demonstrated, most of these previous attempts at formalizing timing considerations remain ad hoc, with little regard to complexity and expressiveness questions. <p> In <ref> [AH89] </ref>, we proposed timed PTL (TPTL) as a natural specification language, and we developed a tableau-based decision procedure for TPTL. <p> It turns out that TPTL captures precisely the fragment of the theory of timed state sequences obtained by combining PTL (the temporal fragment of the states component) with the quantifier-free fragment of the time component. We argued in <ref> [AH89] </ref> that it is the restriction of disallowing quantification over time, what yields readable specifications as well as finite-state-based verification methods. <p> In <ref> [AH89] </ref>, we proved the 1 1 -completeness of certain syntactic and semantic variants of the real-time temporal logic TPTL. Here, these results are refined, extended, and presented in the framework of the theory of timed state sequences. <p> A computation is recurring iff it contains infinitely many configurations with the value of the location counter being 0. The problem of deciding if a nondeterministic 2-counter machine has a recurring computation, is 1 1 -hard <ref> [AH89] </ref>. Thus, to show that the satisfiability problem for a language is 1 1 -hard, it suffices, given a nondeterministic 2-counter machine M , to construct a formula M such that M is satisfiable iff M has a recurring computation. 1 1 -hardness of Case 1. <p> This is why we choose the first-order theory of (N; ) with monadic predicates (for state sequences) combined with the theory of (N; ; ) (for time) as the theory of timed state sequences. 3 Timed Temporal Logic: TPTL In <ref> [AH89] </ref>, we introduced an extension of PTL that is interpreted over timed state sequences. We developed a tableau-based decision procedure and a model-checking algorithm for this Timed Propositional Temporal Logic (TPTL). In this section, we study the expressiveness of TPTL. <p> For instance, the bounded-response requirement that "Every p-state is followed by a q-state within time 1" can be defined by the formula 2x: (p ! 3y: (q ^ y x + 1)): ( 0 The application of TPTL as a specification language for real-time systems is discussed in <ref> [AH89, Hen91] </ref>. <p> The size of a formula is important for locating the computational complexity of problems whose input includes formulas of TPTL <ref> [AH89] </ref>. 4 TPTL as originally defined in [AH89] differs syntactically in that the freeze quantifiers are coupled with the temporal operators. <p> The size of a formula is important for locating the computational complexity of problems whose input includes formulas of TPTL <ref> [AH89] </ref>. 4 TPTL as originally defined in [AH89] differs syntactically in that the freeze quantifiers are coupled with the temporal operators. <p> i (false) = false; F i ( 1 ! 2 ) = F i ( 1 ) ! F i ( 2 ); F i ( 1 U 2 ) = 9j i: (F j ( 2 ) ^ 8i k &lt; j: F k ( 1 )); 5 In <ref> [AH89] </ref>, timed state sequences are required to satisfy the progress condition that time diverges (i.e., the time function is unbounded). <p> Thus, just as PTL corresponds to a subset of L, we may view TPTL as a fragment of L T : quantification over the state sort is restricted to the "temporal" way of PTL, and quantification over the time sort is prohibited entirely. 3.2 Expressive completeness In <ref> [AH89] </ref> we showed that in a pleasing analogy to PTL versus L, TPTL constitutes an elementary fragment of L T : the validity of a TPTL-formula with N logical and temporal operators, and K as the product of its constants, can be decided in time 2 O (NK) . <p> We show that TPTL 9 is, however, not elementarily decidable. This provides additional justification for our preference for TPTL over the existing notation with first-order quantifiers over time: prohibiting quantification over time not only leads, as argued in <ref> [AH89] </ref>, to a more natural specification language, but is necessary for the existence of verification algorithms, such as the tableau techniques for TPTL. Theorem 5 (Complexity of TPTL 9 ) The validity problem for TPTL 9 is nonelementary. Proof. <p> not expressible in TPTL, can be stated as G even (true; p), for the production G even (a 1 ; a 2 ) ! a 1 a 2 G even (a 1 ; a 2 ): Complexity of TETL By putting together the tableau methods for ETL [Wol83] and TPTL <ref> [AH89] </ref>, we develop a doubly-exponential-time decision procedure for TETL. This procedure is near-optimal; we go on to show the validity problem for TETL to be EXPSPACE-complete. 6 Like ETL, TETL can alternatively be defined using !-automata connectives, instead of grammar opera tors [WVS83]. 20 Our presentation follows [AH89] closely, but is <p> [Wol83] and TPTL <ref> [AH89] </ref>, we develop a doubly-exponential-time decision procedure for TETL. This procedure is near-optimal; we go on to show the validity problem for TETL to be EXPSPACE-complete. 6 Like ETL, TETL can alternatively be defined using !-automata connectives, instead of grammar opera tors [WVS83]. 20 Our presentation follows [AH89] closely, but is kept terse; the interested reader should consult this reference for details. <p> Proof. To show that TETL is in EXPSPACE, we follow the argument that ETL is in PSPACE, which develops a nondeterministic version of the tableau decision procedure and then applies Sav-itch's theorem [Wol83]. EXPSPACE-hardness follows immediately from the corresponding result for TPTL <ref> [AH89] </ref>. Expressiveness of TETL Although TETL is no harder to decide than TPTL, we have demonstrated that its expressive power is strictly greater, by defining the property even (p). The following theorem characterizes the expressiveness of TETL as equivalent to the second-order language L 2 T . <p> To deal with timing requirements, the tableau algorithm for MTL P modifies the techniques developed for TPTL <ref> [AH89] </ref> for handling past operators. The crucial property that guarantees the finiteness of the tableau being constructed is that in both cases, the temporal precedence between any two temporal contexts that are related by a timing constraint is uniquely determined. <p> Proof. From a nondeterministic version of the tableau algorithm, it follows that MTL P is in EXPSPACE. The corresponding lower bound for MTL can be shown similarly to the analogous result for TPTL, by simulating EXPSPACE-bounded Turing machines <ref> [AH89] </ref>. 4.3 Expressive completeness Because of the past operators, MTL P can express certain properties more succinctly than TPTL. <p> PTL, on the other hand, is PSPACE-complete, and has a singly exponential decision procedure. We claim that this discrepancy is necessary because reasoning in L T is intrinsically expensive. A closer look at our proof of the EXPSPACE-hardness of TPTL <ref> [AH89] </ref> suggests that any extension of PTL that allows the expression of timing constraints of the form "The time of one state is within a certain constant distance c from the time of another state" (2 (p ! 3 =c q) in MTL) is EXPSPACE-hard, provided that all time constants are
Reference: [AH90] <author> R. Alur and T.A. Henzinger. </author> <title> Real-time logics: complexity and expressiveness. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 390-401. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: We believe that a specification language should separate the timing constraints clearly from the state propositions, and the role of time-difference propositions should be limited to verification algorithms and expressiveness proofs. Since an preliminary version of this paper appeared <ref> [AH90] </ref>, research on real-time logics has progressed. We will briefly review some of the recent results that build on the work presented here. The reviewed results fall into two areas: reasoning about dense time, and reasoning about multiple time lines.
Reference: [AH92a] <author> R. Alur and T.A. Henzinger. </author> <title> Back to the future: towards a theory of timed regular languages. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: In particular, punctuality requirements of the form 3 =1 q cannot be defined in MITL. The logic MITL is interpreted over dense timed state sequences and has an EXPSPACE-complete decision problem. Recently, decidability has been shown also for the extension of MITL with past operators <ref> [AH92a] </ref>.
Reference: [AH92b] <author> R. Alur and T.A. Henzinger. </author> <title> Logics and models of real time: a survey. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 74-106. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: For a detailed discussion of this so-called digital-clock (or fictitious-clock ) model of time, and its applications, we refer the reader to <ref> [AH92b] </ref> or [Hen91]. <p> We will briefly review some of the recent results that build on the work presented here. The reviewed results fall into two areas: reasoning about dense time, and reasoning about multiple time lines. For a detailed survey of recent developments, we refer the reader to <ref> [AH92b] </ref>. Dense time. Our undecidability result for dense time domains (Subsection 2.4) highlights the obstacles in finding a decidable formalism for reasoning about dense time.
Reference: [BMP81] <author> M. Ben-Ari, Z. Manna, and A. Pnueli. </author> <title> The temporal logic of branching time. </title> <booktitle> In Proceedings of the Eighth Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 164-176. </pages> <publisher> ACM Press, </publisher> <year> 1981. </year>
Reference-contexts: Furthermore, while the validity problem for L is nonelementary [Sto74], the validity problem for PTL is PSPACE-complete [SC85], and PTL has a singly exponential decision procedure <ref> [BMP81] </ref>. To attain the greater expressive power of L 2 , PTL can be strengthened by adding operators that correspond to right-linear grammars [Wol83]. The resulting logic, extended temporal logic (ETL), has the expressive power of L 2 and, like PTL, still a singly exponential decision procedure. <p> This result establishes that MTL P , like TPTL, corresponds also to an elementary fragment of the nonelementary first-order language L T . 26 We generalize the standard tableau-based decision procedure for PTL <ref> [BMP81, Wol82] </ref> to MTL P . To deal with timing requirements, the tableau algorithm for MTL P modifies the techniques developed for TPTL [AH89] for handling past operators.
Reference: [Buc60] <author> J.R. Buchi. </author> <title> Weak second-order arithmetic and finite automata. </title> <journal> Zeitschrift fur mathe-matische Logik und Grundlagen der Mathematik, </journal> <volume> 6 </volume> <pages> 66-92, </pages> <year> 1960. </year>
Reference-contexts: Buchi established a close connection between the theory S1S and finite automata over infinite sequences <ref> [Buc60] </ref> and used this relationship to show that S1S is decidable [Buc62]. 3 Complexity and expressiveness Formulas of the propositional linear temporal logic PTL can be translated into L without changing the set of models, by replacing propositions with monadic predicates.
Reference: [Buc62] <author> J.R. Buchi. </author> <title> On a decision method in restricted second-order arithmetic. </title> <editor> In E. Nagel, P. Suppes, and A. Tarski, editors, </editor> <booktitle> Proceedings of the First International Congress on Logic, Methodology, and Philosophy of Science 1960, </booktitle> <pages> pages 1-11. </pages> <publisher> Stanford University Press, </publisher> <year> 1962. </year>
Reference-contexts: Buchi established a close connection between the theory S1S and finite automata over infinite sequences [Buc60] and used this relationship to show that S1S is decidable <ref> [Buc62] </ref>. 3 Complexity and expressiveness Formulas of the propositional linear temporal logic PTL can be translated into L without changing the set of models, by replacing propositions with monadic predicates. <p> Given an L 2 -formula , there is an equivalent L 2 -formula 0 of the form 9p 1 : : : 9p n : 0 M whose matrix 0 M contains no second-order quantifiers <ref> [Buc62] </ref>. We construct a TPTL-formula that characterizes the models of 0 by using the (existentially quantified) time function to encode the interpretation of the unary predicates p j , 1 j n, that are bound in 0 .
Reference: [Eme90] <author> E.A. Emerson. </author> <title> Temporal and modal logic. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 995-1072. </pages> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <year> 1990. </year>
Reference-contexts: We call variables of the state sort state variables, and variables of the time sort time variables (this usage departs from the standard temporal-logic terminology). 1 For more details on the results about PTL and !-regular sets, consult <ref> [Eme90] </ref> and [Tho90]. 4 By L T we denote the first-order fragment of L 2 T (without quantification over the unary predicate symbols).
Reference: [EMSS89] <author> E.A. Emerson, A.K. Mok, A.P. Sistla, and J. Srinivasan. </author> <title> Quantitative temporal reasoning. </title> <booktitle> Presented at the First Annual Workshop on Computer-aided Verification, </booktitle> <address> Grenoble, France, </address> <year> 1989. </year>
Reference-contexts: For example, [Koy90] suggests the notation 3 c to express the notion "eventually within time c." Similar temporal operators that are parameterized 24 with constant bounds have been used in [PH88] and in <ref> [EMSS89] </ref> (in the context of branching-time logics). In this section, we extend PTL by time-bounded temporal operators and interpret the resulting logic over timed state sequences.
Reference: [GPSS80] <author> D. Gabbay, A. Pnueli, S. Shelah, and J. Stavi. </author> <title> On the temporal analysis of fairness. </title> <booktitle> In Proceedings of the Seventh Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 163-173. </pages> <publisher> ACM Press, </publisher> <year> 1980. </year>
Reference-contexts: One of the appeals of PTL, which is interpreted over infinite sequences of system states, is its strong theoretical connection with the classical first-order theory of the natural numbers with linear order and monadic predicates: PTL captures an elementary, yet expressively complete, fragment of this nonelementary theory <ref> [Sto74, GPSS80, SC85] </ref>; that is, while any property of state sequences expressible in the monadic first-order theory of (N; ) can also be specified in PTL, checking the validity of PTL-formulas is much simpler than checking the validity of formulas in the underlying classical theory. fl This research was supported in <p> is followed by a q-state," is expressed in PTL as 2 (p ! 3q): This condition can be written in L as 8i: (p (i) ! 9j i: q (j)): ( R ) Although PTL corresponds to a proper subset of L, it has the full expressive power of L <ref> [Kam68, GPSS80] </ref>; that is, for every L-formula there is a PTL-formula that defines the same property of state sequences. Furthermore, while the validity problem for L is nonelementary [Sto74], the validity problem for PTL is PSPACE-complete [SC85], and PTL has a singly exponential decision procedure [BMP81]. <p> By the expressive completeness of PTL, there is a PTL-formula 00 such that M ( 0 ) = M ( 00 ) <ref> [GPSS80] </ref>. We transform 00 into an equivalent PTL-formula 000 such that every time-difference proposition Tdiff ffi and Tdiff ffi is either not within the scope of any temporal operator, or immediately preceded by a next operator. <p> Assign to every subset J ffi f1; : : :ng a unique code ffi 2 N. By the expressive completeness of PTL, there is a PTL-formula 00 M such that M ( 0 M ) = M ( 00 M ) <ref> [GPSS80] </ref>. From 00 M , we obtain by replacing every proposition p j , 1 j n, with x:fly: W j2J ffi (y = x+ffi).
Reference: [Har88] <author> E. Harel. </author> <title> Temporal analysis of real-time systems. </title> <type> Master's thesis, </type> <institution> The Weizmann Institute of Science, Rehovot, Israel, </institution> <year> 1988. </year>
Reference-contexts: It follows from our results that none of the real-time logics proposed in [JM86], <ref> [Har88] </ref>, [Koy90], and [Ost90] can be decided, which vividly demonstrates that it has not been understood, so far, how expressive a theory of time may be added to reasoning about state sequences without sacrificing decidability. <p> We have proved (Case 2) that the addition of time variables causes undecidability. Indeed, using our results and techniques, we can show the 1 1 -hardness of various real-time logics that have been proposed in the literature, including the logics of [JM86], <ref> [Har88] </ref>, [Koy90], and [Ost90], all of which contain addition as a primitive operation on time. In [HLP90], decidability is proved for a real-time logic with addition; this logic puts, however, such substantial restrictions on the use of time quantifiers that it is not closed under negation.
Reference: [Hen91] <author> T.A. Henzinger. </author> <title> The Temporal Specification and Verification of Real-time Systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1991. </year>
Reference-contexts: For a detailed discussion of this so-called digital-clock (or fictitious-clock ) model of time, and its applications, we refer the reader to [AH92b] or <ref> [Hen91] </ref>. <p> For instance, the bounded-response requirement that "Every p-state is followed by a q-state within time 1" can be defined by the formula 2x: (p ! 3y: (q ^ y x + 1)): ( 0 The application of TPTL as a specification language for real-time systems is discussed in <ref> [AH89, Hen91] </ref>.
Reference: [HLP90] <author> E. Harel, O. Lichtenstein, and A. Pnueli. </author> <title> Explicit-clock temporal logic. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 402-413. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year> <month> 32 </month>
Reference-contexts: To enable quantitative reasoning about the timing delays in real-time applications, real-time logics include explicit time references and are interpreted over timed state sequences, which associate a time stamp with every system state <ref> [JM86, AH89, HLP90, Koy90, Ost90] </ref>. Although the suitability as specification language has often been demonstrated, most of these previous attempts at formalizing timing considerations remain ad hoc, with little regard to complexity and expressiveness questions. <p> Indeed, using our results and techniques, we can show the 1 1 -hardness of various real-time logics that have been proposed in the literature, including the logics of [JM86], [Har88], [Koy90], and [Ost90], all of which contain addition as a primitive operation on time. In <ref> [HLP90] </ref>, decidability is proved for a real-time logic with addition; this logic puts, however, such substantial restrictions on the use of time quantifiers that it is not closed under negation.
Reference: [HPS83] <author> D. Harel, A. Pnueli, and J. Stavi. </author> <title> Propositional dynamic logic of regular programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 26(2) </volume> <pages> 222-243, </pages> <year> 1983. </year>
Reference-contexts: Thus the satisfiability problem is in 1 1 in each case. (2) Now let us show 1 1 -hardness. The problem of deciding if a nondeterministic Turing machine has, over the empty tape, a computation in which the start state is visited infinitely often, is 1 1 - complete <ref> [HPS83] </ref>. For ease of encoding, we prove our results using 2-counter machines instead of Turing machines.
Reference: [JM86] <author> F. Jahanian and A.K. Mok. </author> <title> Safety analysis of timing properties in real-time systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(9):890-904, </volume> <year> 1986. </year>
Reference-contexts: To enable quantitative reasoning about the timing delays in real-time applications, real-time logics include explicit time references and are interpreted over timed state sequences, which associate a time stamp with every system state <ref> [JM86, AH89, HLP90, Koy90, Ost90] </ref>. Although the suitability as specification language has often been demonstrated, most of these previous attempts at formalizing timing considerations remain ad hoc, with little regard to complexity and expressiveness questions. <p> It follows from our results that none of the real-time logics proposed in <ref> [JM86] </ref>, [Har88], [Koy90], and [Ost90] can be decided, which vividly demonstrates that it has not been understood, so far, how expressive a theory of time may be added to reasoning about state sequences without sacrificing decidability. <p> We have proved (Case 2) that the addition of time variables causes undecidability. Indeed, using our results and techniques, we can show the 1 1 -hardness of various real-time logics that have been proposed in the literature, including the logics of <ref> [JM86] </ref>, [Har88], [Koy90], and [Ost90], all of which contain addition as a primitive operation on time. In [HLP90], decidability is proved for a real-time logic with addition; this logic puts, however, such substantial restrictions on the use of time quantifiers that it is not closed under negation. <p> In [HLP90], decidability is proved for a real-time logic with addition; this logic puts, however, such substantial restrictions on the use of time quantifiers that it is not closed under negation. The real-time logic RTL <ref> [JM86] </ref> can be viewed as a two-sorted logic with multiple monotonic functions from the state sort to the time sort. Our result (Case 4) implies that RTL is undecidable, even if we restrict its syntax to allow only the successor primitive over time (RTL allows addition over time).
Reference: [Kam68] <author> J.A.W. Kamp. </author> <title> Tense Logic and the Theory of Linear Order. </title> <type> PhD thesis, </type> <institution> University of California at Los Angeles, </institution> <year> 1968. </year>
Reference-contexts: is followed by a q-state," is expressed in PTL as 2 (p ! 3q): This condition can be written in L as 8i: (p (i) ! 9j i: q (j)): ( R ) Although PTL corresponds to a proper subset of L, it has the full expressive power of L <ref> [Kam68, GPSS80] </ref>; that is, for every L-formula there is a PTL-formula that defines the same property of state sequences. Furthermore, while the validity problem for L is nonelementary [Sto74], the validity problem for PTL is PSPACE-complete [SC85], and PTL has a singly exponential decision procedure [BMP81].
Reference: [Koy90] <author> R. Koymans. </author> <title> Specifying real-time properties with metric temporal logic. </title> <booktitle> Real-time Systems, </booktitle> <volume> 2(4) </volume> <pages> 255-299, </pages> <year> 1990. </year>
Reference-contexts: To enable quantitative reasoning about the timing delays in real-time applications, real-time logics include explicit time references and are interpreted over timed state sequences, which associate a time stamp with every system state <ref> [JM86, AH89, HLP90, Koy90, Ost90] </ref>. Although the suitability as specification language has often been demonstrated, most of these previous attempts at formalizing timing considerations remain ad hoc, with little regard to complexity and expressiveness questions. <p> It follows from our results that none of the real-time logics proposed in [JM86], [Har88], <ref> [Koy90] </ref>, and [Ost90] can be decided, which vividly demonstrates that it has not been understood, so far, how expressive a theory of time may be added to reasoning about state sequences without sacrificing decidability. <p> We have proved (Case 2) that the addition of time variables causes undecidability. Indeed, using our results and techniques, we can show the 1 1 -hardness of various real-time logics that have been proposed in the literature, including the logics of [JM86], [Har88], <ref> [Koy90] </ref>, and [Ost90], all of which contain addition as a primitive operation on time. In [HLP90], decidability is proved for a real-time logic with addition; this logic puts, however, such substantial restrictions on the use of time quantifiers that it is not closed under negation. <p> However, timed QPTL is, as a superset of QPTL, nonelementary, and thus unsuitable for algorithmic verification. 4 Metric Temporal Logic: MTL Several authors have tried to adapt temporal logic to reason about real-time properties by interpreting modalities as real-time operators. For example, <ref> [Koy90] </ref> suggests the notation 3 c to express the notion "eventually within time c." Similar temporal operators that are parameterized 24 with constant bounds have been used in [PH88] and in [EMSS89] (in the context of branching-time logics). <p> First, and surprisingly, it is already as expressive as full TPTL. And secondly, it may, unlike full TPTL, be enriched by past temporal operators without sacrificing its elementary decidability. Following <ref> [Koy90] </ref>, we refer to PTL with bounded temporal operators as Metric Temporal Logic (MTL); the addition of past temporal operators yields MTL P .
Reference: [Koz83] <author> D. Kozen. </author> <title> Results on the propositional -calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 27(3) </volume> <pages> 333-354, </pages> <year> 1983. </year>
Reference-contexts: TPTL with quantification over propositions There are several alternatives to the grammar operators of ETL. PTL can be extended by fixed-point operators (thus obtaining a variant of the propositional -calculus <ref> [Koz83] </ref>) or by second-order quantification over propositions (QPTL of [Wol82, Sis83]) in order to achieve the full expressive power of L 2 . While fixed points can be viewed as generalized grammar operators and yield to tableau methods, QPTL is nonelementary.
Reference: [LA92] <author> L. Lamport and M. Abadi. </author> <title> An old-fashioned recipe for real time. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 1-27. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Then we try to add past temporal operators to TPTL, an extension that does not affect the complexity of PTL. Therefore it is quite surprising that the past operators render TPTL nonelementary. TPTL with quantification over time Several authors, including [PH88], [Ost90], and <ref> [LA92] </ref>, have proposed to use first-order temporal logic with a flexible variable now , which represents the time in every state, for the specification of real-time properties.
Reference: [Lew90] <author> H.R. Lewis. </author> <title> A logic of concrete time intervals. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 380-389. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: For example, the real-time branching-time logics considered in [ACD90] and <ref> [Lew90] </ref> use the set of real numbers to model time, and hence the corresponding validity problems are undecidable. 3 Choosing the operations on time Having constrained ourselves to a discrete time domain, we need to choose the operations on time that are admitted in a logic.
Reference: [LP84] <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite-state concurrent programs satisfy their linear specification. </title> <booktitle> In Proceedings of the 11th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 97-107. </pages> <publisher> ACM Press, </publisher> <year> 1984. </year>
Reference-contexts: 1 Introduction Linear propositional temporal logic (PTL) is a widely used tool for the specification and verification of reactive and concurrent systems <ref> [Pnu77, OL82, LP84, MP92] </ref>.
Reference: [LPZ85] <author> O. Lichtenstein, A. Pnueli, and L.D. Zuck. </author> <title> The glory of the past. </title> <editor> In R. Parikh, editor, </editor> <booktitle> Logics of Programs, Lecture Notes in Computer Science 193, </booktitle> <pages> pages 196-218. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: The formula is obtained from by replacing every atomic subformula of the form p (i) with 3x: (p ^ x = i) (read the state quantifiers of as quantifiers over the time sort). TPTL with past In <ref> [LPZ85] </ref>, PTL is extended with the past temporal operators fl (previous) and S (since), the past analogues of fl and U .
Reference: [McN66] <author> R. McNaughton. </author> <title> Testing and generating infinite sequences by a finite automaton. </title> <journal> Information and Control, </journal> <volume> 9(5) </volume> <pages> 521-530, </pages> <year> 1966. </year>
Reference-contexts: The resulting logic, extended temporal logic (ETL), has the expressive power of L 2 and, like PTL, still a singly exponential decision procedure. The expressiveness of L 2 can also be characterized by !-regular expressions <ref> [McN66] </ref>: for any formula of L 2 , the set M () can be defined by an !-regular expression over the alphabet 2 fp 1 ;:::p n g .
Reference: [MP71] <author> R. McNaughton and S. Papert. </author> <title> Counter-free Automata. </title> <publisher> The MIT Press, </publisher> <year> 1971. </year>
Reference-contexts: R is described by the !-regular expression (fp; qg + fqg + fg + (fpg; true fl ; (fp; qg + fqg))) ! The restricted expressive power of L corresponds to the star-free fragment of !-regular expressions, in which the Kleene star may be applied only to the expression true <ref> [MP71, Tho81] </ref>. 1 2.2 Adding time to state sequences To obtain a theory of timed state sequences, we need to identify a suitable time domain (TIME; ), with appropriate primitive operations, and couple the theory of state sequences with this theory of time through a "time" function f that associates a
Reference: [MP92] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Linear propositional temporal logic (PTL) is a widely used tool for the specification and verification of reactive and concurrent systems <ref> [Pnu77, OL82, LP84, MP92] </ref>.
Reference: [NV92] <author> E. Nassor and G. </author> <title> Vidal-Naquet. Suitability of the propositional temporal logic to express properties of real-time systems. </title> <booktitle> In Proceedings of the Ninth Symposium on Theoretical Aspects of Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: Thus the price of an extra exponential for real-time reasoning is caused by the succinctness of the binary encoding of integer constants. In <ref> [NV92] </ref>, it is claimed that already PTL is sufficiently expressive to specify real-time properties; indeed, it is claimed that PTL has the same expressive power as TPTL. At first glance, this may seem puzzling, and hence some clarification is in order.
Reference: [OL82] <author> S. Owicki and L. Lamport. </author> <title> Proving liveness properties of concurrent programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(3) </volume> <pages> 455-495, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction Linear propositional temporal logic (PTL) is a widely used tool for the specification and verification of reactive and concurrent systems <ref> [Pnu77, OL82, LP84, MP92] </ref>.
Reference: [Ost90] <author> J.S. Ostroff. </author> <title> Temporal Logic of Real-time Systems. </title> <publisher> Research Studies Press, </publisher> <year> 1990. </year>
Reference-contexts: To enable quantitative reasoning about the timing delays in real-time applications, real-time logics include explicit time references and are interpreted over timed state sequences, which associate a time stamp with every system state <ref> [JM86, AH89, HLP90, Koy90, Ost90] </ref>. Although the suitability as specification language has often been demonstrated, most of these previous attempts at formalizing timing considerations remain ad hoc, with little regard to complexity and expressiveness questions. <p> It follows from our results that none of the real-time logics proposed in [JM86], [Har88], [Koy90], and <ref> [Ost90] </ref> can be decided, which vividly demonstrates that it has not been understood, so far, how expressive a theory of time may be added to reasoning about state sequences without sacrificing decidability. <p> We have proved (Case 2) that the addition of time variables causes undecidability. Indeed, using our results and techniques, we can show the 1 1 -hardness of various real-time logics that have been proposed in the literature, including the logics of [JM86], [Har88], [Koy90], and <ref> [Ost90] </ref>, all of which contain addition as a primitive operation on time. In [HLP90], decidability is proved for a real-time logic with addition; this logic puts, however, such substantial restrictions on the use of time quantifiers that it is not closed under negation. <p> Then we try to add past temporal operators to TPTL, an extension that does not affect the complexity of PTL. Therefore it is quite surprising that the past operators render TPTL nonelementary. TPTL with quantification over time Several authors, including [PH88], <ref> [Ost90] </ref>, and [LA92], have proposed to use first-order temporal logic with a flexible variable now , which represents the time in every state, for the specification of real-time properties.
Reference: [PH88] <author> A. Pnueli and E. Harel. </author> <title> Applications of temporal logic to the specification of real-time systems. </title> <editor> In M. Joseph, editor, </editor> <booktitle> Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 331, </booktitle> <pages> pages 84-98. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year> <month> 33 </month>
Reference-contexts: Then we try to add past temporal operators to TPTL, an extension that does not affect the complexity of PTL. Therefore it is quite surprising that the past operators render TPTL nonelementary. TPTL with quantification over time Several authors, including <ref> [PH88] </ref>, [Ost90], and [LA92], have proposed to use first-order temporal logic with a flexible variable now , which represents the time in every state, for the specification of real-time properties. <p> For example, [Koy90] suggests the notation 3 c to express the notion "eventually within time c." Similar temporal operators that are parameterized 24 with constant bounds have been used in <ref> [PH88] </ref> and in [EMSS89] (in the context of branching-time logics). In this section, we extend PTL by time-bounded temporal operators and interpret the resulting logic over timed state sequences.
Reference: [Pnu77] <author> A. Pnueli. </author> <title> The temporal logic of programs. </title> <booktitle> In Proceedings of the 18th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 46-57. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1977. </year>
Reference-contexts: 1 Introduction Linear propositional temporal logic (PTL) is a widely used tool for the specification and verification of reactive and concurrent systems <ref> [Pnu77, OL82, LP84, MP92] </ref>.
Reference: [Rog67] <author> H. Rogers, Jr. </author> <title> Theory of Recursive Functions and Effective Computability. </title> <publisher> McGraw-Hill Book Company, </publisher> <year> 1967. </year>
Reference-contexts: Theorem 2 (Undecidable theories of real time) The validity problems for the following two-sorted first-order theories are 1 1 -complete: 2 2 The class 1 1 consists of highly undecidable problems, including some nonarithmetical sets. For an exposition of the analytical hierarchy, consult <ref> [Rog67] </ref>. 9 state theory time theory time function (from states to time) 1 (N; ) (N; =; 0; +1) (arbitrary) f 2 (N; ) with (N; =; 0; +1; 2) identity f monadic predicates 3 (N; ) with (D; =; 0; S) strictly monotonic f monadic predicates 4 (N; ) with
Reference: [SC85] <author> A.P. Sistla and E.M. Clarke. </author> <title> The complexity of propositional linear temporal logics. </title> <journal> Journal of the ACM, </journal> <volume> 32(3) </volume> <pages> 733-749, </pages> <year> 1985. </year>
Reference-contexts: One of the appeals of PTL, which is interpreted over infinite sequences of system states, is its strong theoretical connection with the classical first-order theory of the natural numbers with linear order and monadic predicates: PTL captures an elementary, yet expressively complete, fragment of this nonelementary theory <ref> [Sto74, GPSS80, SC85] </ref>; that is, while any property of state sequences expressible in the monadic first-order theory of (N; ) can also be specified in PTL, checking the validity of PTL-formulas is much simpler than checking the validity of formulas in the underlying classical theory. fl This research was supported in <p> Furthermore, while the validity problem for L is nonelementary [Sto74], the validity problem for PTL is PSPACE-complete <ref> [SC85] </ref>, and PTL has a singly exponential decision procedure [BMP81]. To attain the greater expressive power of L 2 , PTL can be strengthened by adding operators that correspond to right-linear grammars [Wol83].
Reference: [Sis83] <author> A.P. Sistla. </author> <title> Theoretical Issues in the Design and Verification of Distributed Systems. </title> <type> PhD thesis, </type> <institution> Harvard University, </institution> <year> 1983. </year>
Reference-contexts: TPTL with quantification over propositions There are several alternatives to the grammar operators of ETL. PTL can be extended by fixed-point operators (thus obtaining a variant of the propositional -calculus [Koz83]) or by second-order quantification over propositions (QPTL of <ref> [Wol82, Sis83] </ref>) in order to achieve the full expressive power of L 2 . While fixed points can be viewed as generalized grammar operators and yield to tableau methods, QPTL is nonelementary.
Reference: [Sto74] <author> L.J. Stockmeyer. </author> <title> The Complexity of Decision Problems in Automata Theory and Logic. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1974. </year>
Reference-contexts: One of the appeals of PTL, which is interpreted over infinite sequences of system states, is its strong theoretical connection with the classical first-order theory of the natural numbers with linear order and monadic predicates: PTL captures an elementary, yet expressively complete, fragment of this nonelementary theory <ref> [Sto74, GPSS80, SC85] </ref>; that is, while any property of state sequences expressible in the monadic first-order theory of (N; ) can also be specified in PTL, checking the validity of PTL-formulas is much simpler than checking the validity of formulas in the underlying classical theory. fl This research was supported in <p> Furthermore, while the validity problem for L is nonelementary <ref> [Sto74] </ref>, the validity problem for PTL is PSPACE-complete [SC85], and PTL has a singly exponential decision procedure [BMP81]. To attain the greater expressive power of L 2 , PTL can be strengthened by adding operators that correspond to right-linear grammars [Wol83]. <p> Corollary 1 (Decidability) The validity problem for the language L 2 T is decidable. Clearly, the validity problem is nonelementary already for the first-order language L T , as L is a fragment of L T (recall that L is shown to be nonelementary in <ref> [Sto74] </ref>). <p> Theorem 5 (Complexity of TPTL 9 ) The validity problem for TPTL 9 is nonelementary. Proof. We translate the nonelementary monadic first-order theory of (N; ) <ref> [Sto74] </ref> into TPTL 9 . With the help of the formula 2x: fly:(y = x + 1) ( +1 ) we force time to act as a state counter, which allows us to simulate quantifiers over the state sort by the time quantifiers of TPTL 9 .
Reference: [Tho81] <author> Wolfgang Thomas. </author> <title> A combinatorial approach to the theory of !-automata. </title> <journal> Information and Control, </journal> <volume> 48(3) </volume> <pages> 261-283, </pages> <year> 1981. </year>
Reference-contexts: R is described by the !-regular expression (fp; qg + fqg + fg + (fpg; true fl ; (fp; qg + fqg))) ! The restricted expressive power of L corresponds to the star-free fragment of !-regular expressions, in which the Kleene star may be applied only to the expression true <ref> [MP71, Tho81] </ref>. 1 2.2 Adding time to state sequences To obtain a theory of timed state sequences, we need to identify a suitable time domain (TIME; ), with appropriate primitive operations, and couple the theory of state sequences with this theory of time through a "time" function f that associates a
Reference: [Tho90] <author> W. Thomas. </author> <title> Automata on infinite objects. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 133-191. </pages> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <year> 1990. </year>
Reference-contexts: We call variables of the state sort state variables, and variables of the time sort time variables (this usage departs from the standard temporal-logic terminology). 1 For more details on the results about PTL and !-regular sets, consult [Eme90] and <ref> [Tho90] </ref>. 4 By L T we denote the first-order fragment of L 2 T (without quantification over the unary predicate symbols).
Reference: [WME92] <author> F. Wang, A.K. Mok, and E.A. Emerson. </author> <title> Asynchronous propositional temporal logic. </title> <booktitle> In Proceedings of the 12th ICSE, </booktitle> <year> 1992. </year>
Reference-contexts: A decidable extension of TPTL with multiple time lines has been introduced in <ref> [WME92] </ref>. There the syntax is constrained by the sort requirement that all variables within any atomic formula must refer to the same time line (note that this condition is satisfied by the formula (y)). Acknowledgements. We thank David Dill, Zohar Manna, and Amir Pnueli for helpful discussions.
Reference: [Wol82] <author> P. Wolper. </author> <title> Synthesis of Communicating Processes from Temporal-Logic Specifications. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1982. </year>
Reference-contexts: TPTL with quantification over propositions There are several alternatives to the grammar operators of ETL. PTL can be extended by fixed-point operators (thus obtaining a variant of the propositional -calculus [Koz83]) or by second-order quantification over propositions (QPTL of <ref> [Wol82, Sis83] </ref>) in order to achieve the full expressive power of L 2 . While fixed points can be viewed as generalized grammar operators and yield to tableau methods, QPTL is nonelementary. <p> This result establishes that MTL P , like TPTL, corresponds also to an elementary fragment of the nonelementary first-order language L T . 26 We generalize the standard tableau-based decision procedure for PTL <ref> [BMP81, Wol82] </ref> to MTL P . To deal with timing requirements, the tableau algorithm for MTL P modifies the techniques developed for TPTL [AH89] for handling past operators.
Reference: [Wol83] <author> P. Wolper. </author> <title> Temporal logic can be more expressive. </title> <journal> Information and Control, </journal> 56(1/2):72-99, 1983. 
Reference-contexts: There are also second-order versions of our results: the second-order theory of timed state sequences is still decidable, and just as PTL is generalizable to ETL <ref> [Wol83] </ref>, TPTL can be extended to be as expressive as the second-order theory of timed state sequences, at no cost in complexity. Surprisingly, the addition of past temporal operators renders TPTL nonelementary. <p> Furthermore, while the validity problem for L is nonelementary [Sto74], the validity problem for PTL is PSPACE-complete [SC85], and PTL has a singly exponential decision procedure [BMP81]. To attain the greater expressive power of L 2 , PTL can be strengthened by adding operators that correspond to right-linear grammars <ref> [Wol83] </ref>. The resulting logic, extended temporal logic (ETL), has the expressive power of L 2 and, like PTL, still a singly exponential decision procedure. <p> When interpreted in this 16 fashion, TPTL can define strictly more properties of state sequences than PTL. For example, the property even (p), that "p holds in every even state," is not expressible in PTL <ref> [Wol83] </ref>. <p> the full expressive power of the second-order language L 2 ; recall that the property even (p), that "p is true in every even state," 9q: (q (0) ^ 8i: (q (i) ! (p (i) ^ :q (i + 1) ^ q (i + 2)))); is not definable in PTL <ref> [Wol83] </ref>. This observation prompted the definition of Extended Temporal Logic (ETL), which includes a temporal operator for every right-linear grammar. ETL has the same 19 expressiveness as L 2 or, equivalently, !-regular expressions, and yet a singly exponential decision procedure. <p> (p), which is not expressible in TPTL, can be stated as G even (true; p), for the production G even (a 1 ; a 2 ) ! a 1 a 2 G even (a 1 ; a 2 ): Complexity of TETL By putting together the tableau methods for ETL <ref> [Wol83] </ref> and TPTL [AH89], we develop a doubly-exponential-time decision procedure for TETL. <p> This result suggests a decision procedure for TETL: to determine if the formula is valid, construct the initial tableau for 00 and employ the standard polynomial-time techniques for checking if the tableau contains an infinite path along which all eventualities are satisfied <ref> [Wol83] </ref>. Since the initial tableau contains O (K 2 NK ) vertices, each of size O (N K), the graph T ( 00 ) can be constructed and checked for infinite paths in deterministic time exponential in O (N K). <p> The algorithm outlined here may be improved along the lines of <ref> [Wol83] </ref> to avoid the construction of the entire initial tableau. Such improvements, however, cannot lower the complexity significantly; indeed, TETL is EXPSPACE hard. Theorem 8 (Complexity of TETL) The validity problem for TETL is EXPSPACE-complete. Proof. <p> Theorem 8 (Complexity of TETL) The validity problem for TETL is EXPSPACE-complete. Proof. To show that TETL is in EXPSPACE, we follow the argument that ETL is in PSPACE, which develops a nondeterministic version of the tableau decision procedure and then applies Sav-itch's theorem <ref> [Wol83] </ref>. EXPSPACE-hardness follows immediately from the corresponding result for TPTL [AH89]. Expressiveness of TETL Although TETL is no harder to decide than TPTL, we have demonstrated that its expressive power is strictly greater, by defining the property even (p).
Reference: [WVS83] <author> P. Wolper, M.Y. Vardi, and A.P. Sistla. </author> <title> Reasoning about infinite computation paths. </title> <booktitle> In Proceedings of the 24th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 185-194. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1983. </year> <month> 34 </month>
Reference-contexts: This procedure is near-optimal; we go on to show the validity problem for TETL to be EXPSPACE-complete. 6 Like ETL, TETL can alternatively be defined using !-automata connectives, instead of grammar opera tors <ref> [WVS83] </ref>. 20 Our presentation follows [AH89] closely, but is kept terse; the interested reader should consult this reference for details.
References-found: 43

