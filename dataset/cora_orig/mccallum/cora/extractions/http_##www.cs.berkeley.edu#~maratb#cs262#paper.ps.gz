URL: http://www.cs.berkeley.edu/~maratb/cs262/paper.ps.gz
Refering-URL: http://www.cs.berkeley.edu/~maratb/cs262/
Root-URL: 
Title: Integration of Content Type Information in  
Author: Filesystems Marat Boshernitsan Matvey Nemenman 
Date: December 15, 1997  
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division University of California, Berkeley  
Pubnum: CS 262 Final Project  
Abstract: From the user's point of view the changes in hierarchical file systems were merely cosmetic since their conception in late 1960's. In this paper we argue that hierarchical file systems no longer provide an appropriate abstraction for the semantically rich data content. We suggest a solution based on integration of content type information at the same level as other file-related meta-data and describe a sample implementation based on Linux 2.0.x kernel. 0 The authors can be reached at: maratb@CS.Berkeley.EDU and mattn@cory.EECS.Berkeley.EDU. An on-line version of this paper can be found on the WWW page: http://www.cs.berkeley.edu/~maratb/cs262/paper.html. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Apple Corporation. </institution> <note> Mac os 8. http://devworld.apple.com/dev/technotes/tn/tn10002.html, 1997. </note>
Reference-contexts: Some of the more modern desktop operating system were quick to jump on the bandwagon of multimedia hype and introduced the concept of file types into the system. Systems such as Microsoft Windows [12], MacOS <ref> [1] </ref>. support associations between file types and the applications that can handle them. While this approach has definitely made it easier for the users to access their data, it is very configuration specific and provides no semantic information about data content.
Reference: [2] <author> Be, Inc. </author> <title> The media os. </title> <note> http://www.be.com/products/beos/mediaos.html, 1997. </note>
Reference-contexts: The advantage of MIME types is their standardization, and, indeed, some operating systems already support MIME types at the lowest possible level (e.g. BeOS <ref> [2] </ref>). Nevertheless, the problem with MIME types is that this "hierarchy" is, too, quite flat for all practical purposes. The apparent two-level naming scheme provides only a logical partitioning between the types without defining any interrelations.
Reference: [3] <author> N. Borenstein and N. Freed. </author> <title> MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies. Internet RFC 1521, </title> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: To provide robust type conversions we organize types in hierarchical data structure supporting multiple inheritance (see Section 3.1.1), while Windows and MacOS offer only flat type database. 2.3.2 MIME Superficially, it may seem that MIME <ref> [3] </ref> (Multipurpose Internet Mail Extensions) types already provide the functionality we desire. The advantage of MIME types is their standardization, and, indeed, some operating systems already support MIME types at the lowest possible level (e.g. BeOS [2]).
Reference: [4] <author> R. Card, T. Ts'o, and S. Tweedie. </author> <title> Design and implementation of the second extended filesystem. </title> <booktitle> In First Dutch International Symposium on Linux, </booktitle> <year> 1994. </year>
Reference-contexts: In addition, Linux already supports communication with kernel helper daemons via System V IPC mechanism, making it very attractive for our purposes. The content type information is stored in file's inode data structure. To implement this, we cloned one of the existing Linux filesystems ext2 <ref> [4] </ref> to create an almost identical system with an extra integer field in the inode structure. The interface from the file system to the rest of the kernel is provided by the Virtual Filesystem Layer (VFS) [10].
Reference: [5] <author> CompuServe Incorporated. </author> <title> Graphics interchange format, </title> <month> July </month> <year> 1990. </year>
Reference-contexts: On the other hand, in the same time span quite a few popular data formats were developed, ranging from GIF <ref> [5] </ref> and JPEG [8] to encode images to JVM Class File Format [11] to represent compiled Java classes. The semantic complexity of these formats is significantly richer and accessing data from or about the files in these formats requires special tools.
Reference: [6] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> 12th edition, </address> <year> 1994. </year>
Reference-contexts: This plug-in allows our daemon to be used right away with multitude of the existing utilities. To implement shortest transformation path search, our implementation uses a variation on Dikstra's single source shortest path algorithm <ref> [6] </ref>. The algorithm uses a very simple cost metric assuming it costs one unit to perform a single transformation and zero units to coerce a subtype to its super-type.
Reference: [7] <author> D. K. Gifford, P. Jouvelot, M. A. Sheldon, and J. W. O. Jr. </author> <title> Semantic file systems. </title> <booktitle> In Proceedings of 13th ACM Symposium on Operating Systems Principles. Association for Computing Machinery SIGOPS, </booktitle> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: It should be noted, however, that MIME types can be easily integrated into our implementation and doing so will benefit all MIME-aware applications. 2.3.3 Semantic File Systems Semantic File Systems work [14] bears the most similarity to our design. In particular, MIT SFS <ref> [7] </ref> is one of the few systems providing important content type support at the file system level. However, the MIT project was oriented toward locating files in the file system based on their semantic content (keywords), whereas our approach is more general.
Reference: [8] <author> ISO. </author> <booktitle> Joint photographic expert group. ISO JPEG 8 R7, </booktitle> <month> July </month> <year> 1990. </year>
Reference-contexts: On the other hand, in the same time span quite a few popular data formats were developed, ranging from GIF [5] and JPEG <ref> [8] </ref> to encode images to JVM Class File Format [11] to represent compiled Java classes. The semantic complexity of these formats is significantly richer and accessing data from or about the files in these formats requires special tools.
Reference: [9] <author> M. K. Johnson. </author> <note> Linux information sheet. http://www.redhat.com/linux-info/ldp/INFO-SHEET.html, October 1997. </note>
Reference-contexts: Nevertheless, despite these limitations we believe the the advantages of our approach (ease of debugging, stability, etc.) outweigh the resulting performance degradation. 3.2 Our Implementation 3.2.1 Kernel Modifications In order to implement our design, we chose Linux operating system <ref> [9] </ref> running 2.0.x kernel. This choice was not completely arbitrary: while we definitely needed an operating system whose kernel source code was readily available, we also wanted the one which would be the easiest to hack.
Reference: [10] <author> M. K. Johnson. </author> <title> Linux Kernel Hacker's Guide. Linux Documentation Project, </title> <address> 0.7 edition, </address> <year> 1997. </year>
Reference-contexts: To implement this, we cloned one of the existing Linux filesystems ext2 [4] to create an almost identical system with an extra integer field in the inode structure. The interface from the file system to the rest of the kernel is provided by the Virtual Filesystem Layer (VFS) <ref> [10] </ref>.
Reference: [11] <author> T. Lindholm and F. Yellin. </author> <title> The JAVA Virtual Machine. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: On the other hand, in the same time span quite a few popular data formats were developed, ranging from GIF [5] and JPEG [8] to encode images to JVM Class File Format <ref> [11] </ref> to represent compiled Java classes. The semantic complexity of these formats is significantly richer and accessing data from or about the files in these formats requires special tools. With the recent multimedia boom it appears that new file formats are being developed almost daily.
Reference: [12] <institution> Microsoft Corporation. </institution> <note> Welcome to Microsoft Windows 95. http://www.microsoft.com/windows95, 1997. </note>
Reference-contexts: Some of the more modern desktop operating system were quick to jump on the bandwagon of multimedia hype and introduced the concept of file types into the system. Systems such as Microsoft Windows <ref> [12] </ref>, MacOS [1]. support associations between file types and the applications that can handle them. While this approach has definitely made it easier for the users to access their data, it is very configuration specific and provides no semantic information about data content.
Reference: [13] <author> D. M. Ritchie and K. Thompson. </author> <title> The unix time-sharing system. </title> <journal> Comm. Assoc. Comp. Mach., </journal> <volume> 17(7) </volume> <pages> 365-375, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: 1 Introduction The origins of the traditional file system organization date back to the early days of UNIX <ref> [13] </ref> and changed very little ever since. The hierarchical grouping of files into directories relays little information about the content of the file to the operating system (arguably, the same can be said about the user).
Reference: [14] <author> V. Vasedevan and P. Pazandak. </author> <title> Semantic file systems survey. </title> <note> http://www.objs.com/survey/OFSExt.htm, 1996. 12 </note>
Reference-contexts: The apparent two-level naming scheme provides only a logical partitioning between the types without defining any interrelations. It should be noted, however, that MIME types can be easily integrated into our implementation and doing so will benefit all MIME-aware applications. 2.3.3 Semantic File Systems Semantic File Systems work <ref> [14] </ref> bears the most similarity to our design. In particular, MIT SFS [7] is one of the few systems providing important content type support at the file system level.
References-found: 14

