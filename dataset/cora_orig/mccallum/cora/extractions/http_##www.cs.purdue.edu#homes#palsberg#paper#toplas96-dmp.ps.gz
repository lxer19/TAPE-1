URL: http://www.cs.purdue.edu/homes/palsberg/paper/toplas96-dmp.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/palsberg/publications.html
Root-URL: http://www.cs.purdue.edu
Title: Eta-Expansion Does The Trick  
Author: OLIVIER DANVY and KAROLINE MALMKJR JENS PALSBERG 
Note: ACM Transactions on Programming Languages, Vol. 18, No. 6, November 1996, pages 730-751.  
Affiliation: BRICS, Aarhus University and  MIT  
Abstract: Partial-evaluation folklore has it that massaging one's source programs can make them specialize better. In Jones, Gomard, and Sestoft's recent textbook, a whole chapter is dedicated to listing such "binding-time improvements": nonstandard use of continuation-passing style, eta-expansion, and a popular transformation called "The Trick." We provide a unified view of these binding-time improvements, from a typing perspective. Just as a proper treatment of product values in partial evaluation requires partially static values, a proper treatment of disjoint sums requires moving static contexts across dynamic case expressions. This requirement precisely accounts for the nonstandard use of continuation-passing style encountered in partial evaluation. Eta-expansion thus acts as a uniform binding-time coercion between values and contexts, be they of function type, product type, or disjoint-sum type. For the latter case, it enables "The Trick." In this article, we extend Gomard and Jones' partial evaluator for the -calculus, -Mix, with products and disjoint sums; we point out how eta-expansion for (finite) disjoint sums enables The Trick; we generalize our earlier work by identifying that eta-expansion can be obtained in the binding-time analysis simply by adding two coercion rules; and we specify and prove the correctness of our extension to -Mix. Categories and Subject Descriptors: D.1.1 [Programming Techniques]: Applicative (Functional) Programming; D.3.3 [Programming Languages]: Language Constructs and Features| procedures, functions, and subroutines; D.3.4 [Programming Languages]: Processors|translator writing systems and compiler generators; F.3.2 [Logics and Meanings of Programs]: Semantics of Programming Languages|operational semantics; F.3.3 [Logics and Meanings of Programs]: Studies of Program Constructs|functional constructs; F.4.1 [Mathematical Logic and Formal Languages]: Mathematical Logic|lambda calculus and related systems; I.1.3 [Algebraic Manipulation]: Languages and Systems|evaluation strategies; I.2.2 [Artificial Intelligence]: Automatic Programming|automatic analysis of algorithms; program transformation The first author is supported by the BRICS Centre (Basic Research In Computer Science) of the Danish National Research Foundation and expresses grateful thanks to the DART project (Design, Analysis and Reasoning about Tools) of the Danish Research Councils, for support during 1995. The second author was hosted by BRICS during summer 1995. The third author is supported by the Danish Natural Science Research Council and BRICS. Authors' addresses: O. Danvy and K. Malmkjr, Computer Science Department, Aarhus University, Ny Munkegade, Building 540, DK-8000 Aarhus C, Denmark; email: fdanvy; karo-lineg@brics.dk; home pages: http://www.brics.dk/~fdanvy; karolineg; J. Palsberg, Laboratory for Computer Science, Massachusetts Institute of Technology, NE43-340, 545 Technology Square, Cambridge, MA 02139; email: palsberg@theory.lcs.mit.edu. Permission to make digital/hard copy of all or part of this material without fee is granted provided that the copies are not made or distributed for profit or commercial advantage, the ACM copyright/server notice, the title of the publication, and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery, Inc. (ACM). To copy otherwise, to republish, to post on servers, or to redistribute to lists requires prior specific permission and/or a fee. c fl 1996 ACM 0164-0925/96/0700-0111 $03.50
Abstract-found: 1
Intro-found: 1
Reference: <author> Ashley, J. M. and Consel, C. </author> <year> 1994. </year> <title> Fixpoint computation for polyvariant static analyses of higher-order applicative programs. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 16, 5, </volume> <pages> 1431-1448. </pages>
Reference: <author> Barendregt, H. </author> <year> 1984. </year> <title> The Lambda Calculus | Its Syntax and Semantics. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands. </address>
Reference: <author> Berger, U. and Schwichtenberg, H. </author> <year> 1991. </year> <title> An inverse of the evaluation functional for typed -calculus. </title> <booktitle> In Proceedings of the 6th Annual IEEE Symposium on Logic in Computer Science. </booktitle> <publisher> IEEE Computer Society Press, Los Alomitos, Calif., </publisher> <pages> 203-211. </pages>
Reference: <author> Bondorf, A. </author> <year> 1991. </year> <title> Automatic autoprojection of higher-order recursive equations. </title> <journal> Sci. Com-put. Program. </journal> <volume> 17, </volume> <pages> 1-3, 3-34. </pages> <booktitle> Special issue on ESOP'90, the Third European Symposium on Programming, </booktitle> <month> May </month> <year> 1990. </year>
Reference: <author> Bondorf, A. </author> <year> 1992. </year> <title> Improving binding times without explicit cps-conversion. </title> <booktitle> In Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, </booktitle> <editor> W. Clinger, Ed. </editor> <booktitle> LISP Pointers 5, </booktitle> <month> 1 (June), </month> <pages> 1-10. </pages>
Reference: <author> Bondorf, A. and Danvy, O. </author> <year> 1991. </year> <title> Automatic autoprojection of recursive equations with global variables and abstract data types. </title> <journal> Sci. Comput. Program. </journal> <volume> 16, </volume> <pages> 151-195. </pages>
Reference: <editor> Clinger, W. and Rees, J., Eds. </editor> <year> 1991. </year> <title> Revised 4 report on the algorithmic language Scheme. LISP Pointers 4, </title> <type> 3 (July-Sept.), </type> <pages> 1-55. </pages>
Reference: <author> Consel, C. </author> <year> 1993a. </year> <title> Polyvariant binding-time analysis for applicative languages. </title> <booktitle> In Proceedings of the 2nd ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <editor> D. A. Schmidt, Ed. </editor> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 66-77. </pages>
Reference: <author> Consel, C. </author> <year> 1993b. </year> <title> A tour of Schism: A partial evaluation system for higher-order applicative languages. </title> <booktitle> In Proceedings of the 2nd ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <editor> D. A. Schmidt, Ed. </editor> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 145-154. </pages>
Reference: <author> Consel, C. and Danvy, O. </author> <year> 1991. </year> <title> For a better support of static data flow. </title> <booktitle> In Proceedings of the 5th ACM Conference on Functional Programming and Computer Architecture, </booktitle> <editor> J. Hughes, Ed. </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 523. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 496-519. </pages>
Reference: <author> Consel, C. and Danvy, O. </author> <year> 1993. </year> <title> Tutorial notes on partial evaluation. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <editor> S. L. Graham, Ed. </editor> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 493-501. </pages>
Reference: <author> Danvy, O. </author> <year> 1996. </year> <title> Type-directed partial evaluation. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Principles of Programming Languages, </booktitle> <editor> G. L. Steele, Ed. </editor> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 242-257. </pages>
Reference: <author> Danvy, O. and Filinski, A. </author> <year> 1990. </year> <title> Abstracting control. </title> <booktitle> In Proceedings of the 1990 ACM Conference on Lisp and Functional Programming, </booktitle> <editor> M. Wand, Ed. </editor> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 151-160. </pages>
Reference: <author> Danvy, O., Malmkjr, K., and Palsberg, J. </author> <year> 1995. </year> <title> The essence of eta-expansion in partial evaluation. LISP Symbol. </title> <journal> Comput. </journal> <volume> 8, 3, </volume> <pages> 209-227. </pages> <booktitle> An earlier version appeared in the Proceedings of the 1994 ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Based Program Manipulation. </booktitle>
Reference: <author> Dussart, D., Henglein, F., and Mossin, C. </author> <year> 1995. </year> <title> Polymorphic recursion and subtype qualifications: Polymorphic binding-time analysis in polynomial time. In Static Analysis, </title> <editor> A. Mycroft, Ed. </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 983. </volume> <publisher> Springer-Verlag, </publisher> <address> Glasgow, Scotland, </address> <month> 118-135. </month> <journal> ACM Transactions on Programming Languages, </journal> <volume> Vol. 18, No. 4, </volume> <month> July </month> <year> 1996. </year> <note> 120 Danvy et al. </note>
Reference: <author> Gomard, C. K. </author> <year> 1992. </year> <title> A self-applicable partial evaluator for the lambda-calculus: Correctness and pragmatics. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 14, 2, </volume> <pages> 147-172. </pages>
Reference: <author> Gomard, C. K. and Jones, N. D. </author> <year> 1991. </year> <title> A partial evaluator for the untyped lambda-calculus. </title> <journal> J. Funct. Program. </journal> <volume> 1, 1, </volume> <pages> 21-69. </pages>
Reference: <author> Heintze, N. </author> <year> 1992. </year> <title> Set-based program analysis. </title> <type> Ph.D. thesis, </type> <institution> School of Computer Science, Carnegie Mellon Univ. </institution> <address> Pittsburgh, Pa. </address>
Reference: <author> Henglein, F. </author> <year> 1993. </year> <title> Dynamic typing: Syntax and proof theory. </title> <journal> Sci. Comput. Program. </journal> <volume> 22, 3, </volume> <pages> 197-230. </pages> <booktitle> Special Issue on ESOP'92, the Fourth European Symposium on Programming, </booktitle> <month> February </month> <year> 1992. </year>
Reference: <author> Holst, C. K. and Hughes, J. </author> <year> 1990. </year> <title> Towards binding-time improvement for free. </title> <booktitle> In Functional Programming, Glasgow 1990, </booktitle> <editor> S. L. Peyton Jones, G. Hutton, and C. K. Holst, Eds. </editor> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 83-100. </pages>
Reference: <author> Jones, N. D. </author> <year> 1988. </year> <title> Automatic program specialization: A re-examination from basic principles. </title>
Reference: <editor> In Partial Evaluation and Mixed Computation, D. Bjtrner, A. P. Ershov, and N. D. Jones, Eds. </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <pages> 225-282. </pages>
Reference: <author> Jones, N. D., Gomard, C. K., and Sestoft, P. </author> <year> 1993. </year> <title> Partial Evaluation and Automatic Program Generation. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J. </address>
Reference: <author> Jones, N. D., Sestoft, P., and Stndergaard, H. </author> <year> 1989. </year> <title> MIX: A self-applicable partial evaluator for experiments in compiler generation. LISP Symbol. </title> <journal> Comput. </journal> <volume> 2, 1, </volume> <pages> 9-50. </pages>
Reference: <author> Lawall, J. L. and Danvy, O. </author> <year> 1994. </year> <title> Continuation-based partial evaluation. </title> <booktitle> In Proceedings of the 1994 ACM Conference on Lisp and Functional Programming, </booktitle> <editor> C. L. Talcott, Ed. </editor> <booktitle> LISP Pointers 7, </booktitle> <month> 3 (June), </month> <pages> 227-238. </pages>
Reference: <author> Lawall, J. L. and Danvy, O. </author> <year> 1995. </year> <title> Continuation-based partial evaluation. </title> <type> Tech. Rep. </type> <institution> CS-95-178, Computer Science Dept. , Brandeis Univ. </institution> <address> Waltham, Mass. </address> <month> Jan. </month> <note> An earlier version appeared in the Proceedings of the 1994 ACM Conference on Lisp and Functional Programming. </note>
Reference: <author> Malmkjr, K. </author> <year> 1993. </year> <title> Towards efficient partial evaluation. </title> <booktitle> In Proceedings of the 2nd ACM SIG-PLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <address> D. </address> <publisher> A. </publisher>
Reference: <editor> Schmidt, Ed. </editor> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 33-43. </pages>
Reference: <author> Minamide, Y., Morrisett, G., and Harper, R. </author> <year> 1996. </year> <title> Typed closure conversion. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Principles of Programming Languages, </booktitle> <editor> G. L. Steele, Ed. </editor> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 271-283. </pages>
Reference: <author> Nielson, F. and Nielson, H. R. </author> <year> 1992. </year> <title> Two-Level Functional Languages. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science, </booktitle> <volume> vol. 34. </volume> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England. </address>
Reference: <author> Palsberg, J. </author> <year> 1993. </year> <title> Correctness of binding-time analysis. </title> <journal> J. Funct. Program. </journal> <volume> 3, </volume> <month> 3 (July), </month> <pages> 347-363. </pages>
Reference: <author> Paulin-Mohring, C. and Werner, B. </author> <year> 1993. </year> <title> Synthesis of ML programs in the system Coq. </title> <journal> J. Symbol. Comput. </journal> <volume> 15, </volume> <pages> 607-640. </pages>
Reference: <author> Reynolds, J. C. </author> <year> 1972. </year> <title> Definitional interpreters for higher-order programming languages. </title> <booktitle> In Proceedings of 25th ACM National Conference. </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 717-740. </pages>
Reference: <author> Reynolds, J. C. </author> <year> 1983. </year> <title> Types, abstraction and parametric polymorphism. In Information Processing 83, </title> <editor> R. E. A. Mason, Ed. </editor> <booktitle> IFIP, </booktitle> <address> Montvale, N.J., </address> <pages> 513-523. </pages>
Reference: <author> Ruf, E. </author> <year> 1993. </year> <title> Topics in online partial evaluation. </title> <type> Ph.D. thesis, </type> <institution> Stanford Univ. , Stanford, Calif. </institution> <type> Tech. Rep. </type> <institution> CSL-TR-93-563. </institution>
Reference: <author> Sestoft, P. </author> <year> 1989. </year> <title> Replacing function parameters by global variables. </title> <booktitle> In Proceedings of the 4th International Conference on Functional Programming and Computer Architecture, </booktitle> <editor> J. E. Stoy, Ed. </editor> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 39-53. </pages>
Reference: <author> Shivers, O. </author> <year> 1991. </year> <title> Control-flow analysis of higher-order languages or taming lambda. </title> <type> Ph.D. thesis, </type> <institution> School of Computer Science, Carnegie Mellon Univ. Pittsburgh, Pa. </institution> <type> Tech. Rep. </type> <institution> CMU-CS-91-145. </institution>
Reference: <author> Wadler, P. </author> <year> 1989. </year> <booktitle> Theorems for free! In Proceedings of the 4th International Conference on Functional Programming and Computer Architecture, </booktitle> <editor> J. E. Stoy, Ed. </editor> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 347-359. </pages>
Reference: <author> Wand, M. </author> <year> 1993. </year> <title> Specifying the correctness of binding-time analysis. </title> <journal> J. Funct. Program. </journal> <volume> 3, </volume> <month> 3 (July), 365-387. </month> <journal> ACM Transactions on Programming Languages, </journal> <volume> Vol. 18, No. 4, </volume> <month> July </month> <year> 1996. </year> <title> Eta-Expansion Does The Trick 121 Weise, </title> <editor> D., Conybeare, R., Ruf, E., and Seligman, S. </editor> <year> 1991. </year> <title> Automatic online partial evaluation. </title> <booktitle> In Proceedings of the 5th ACM Conference on Functional Programming and Computer Architecture, </booktitle> <editor> J. Hughes, Ed. </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 523. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 165-191. </pages> <note> Received August 1995; revised May 1996; accepted May 1996 ACM Transactions on Programming Languages, Vol. 18, No. 4, </note> <month> July </month> <year> 1996. </year>
References-found: 39

