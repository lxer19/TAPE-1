URL: ftp://ftp.cc.gatech.edu/pub/people/arkin/web-papers/integration.ps.Z
Refering-URL: http://www.cs.gatech.edu/aimosaic/robot-lab/mrl-online-publications.html
Root-URL: 
Title: Integration of Reactive Navigation with a Flexible Parallel Hardware Architecture  
Author: Thomas R. Collins, Ronald C. Arkin, Andrew M. Henshaw 
Address: Atlanta, GA 30332  
Affiliation: School of Electrical Engineering and College of Computing Georgia Institute of Technology  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Albus, J. S., McCain, H. G., and Lumia, R. </author> <title> NASA/NBS Standard Reference Model for Telerobot Control System Architecture (NASREM), </title> <type> NIST Tech. Rep. 1235, </type> <year> 1989. </year>
Reference-contexts: Unfortunately, this process usually forms a computational bottleneck, since it is an integral part of every sensor/control path. More recently, hierarchical designs have emphasized connection across the hierarchy, as in the NASA/NBS standard reference model for telerobot architectures (NASREM) developed by Albus <ref> [ 1] </ref> and the Multiresolutional Control Architecture of Meystel [ 21]. These architectures allow nested control loops via distinct task levels within the hierarchical structure, providing higher bandwidth for low-level tasks that require shorter response times.
Reference: 2. <author> Arkin, R. C. </author> <title> Motor Schema Based Navigation for a Mobile Robot: An Approach to Programming by Behavior, </title> <booktitle> IEEE 1987 Intl. Conf. on Rob. and Aut . 1987, </booktitle> <pages> pp. 264-271. </pages>
Reference-contexts: No clear consensus exists, however, for the number and type of levels to use in such architectures. The hierarchical viewpoint is increasingly being challenged by reactive approaches. The concept of schemas, as typified by Lyons [ 20] and Arkin <ref> [ 2, 3] </ref>, implements sensor-effector connections in a more flexible fashion. A schema is a pattern of behavior exhibiting a stimulus-response characteristic.
Reference: 3. <author> Arkin, R. C., and Murphy, R. R. </author> <title> Autonomous Navigation in a manufacturing environment, </title> <journal> IEEE Trans. Rob. Aut., </journal> <volume> vol. 6, no. </volume> <month> 4 (Aug. </month> <year> 1990), </year> <pages> 445-454. </pages>
Reference-contexts: No clear consensus exists, however, for the number and type of levels to use in such architectures. The hierarchical viewpoint is increasingly being challenged by reactive approaches. The concept of schemas, as typified by Lyons [ 20] and Arkin <ref> [ 2, 3] </ref>, implements sensor-effector connections in a more flexible fashion. A schema is a pattern of behavior exhibiting a stimulus-response characteristic.
Reference: 4. <author> Arkin, </author> <title> R.C., Towards Cosmopolitan Robots: Intelligent Navigation of a Mobile Robot in Extended Manmade Environments, </title> <type> Ph.D. Diss., COINS Tech. Rep. </type> <pages> 87-80, </pages> <address> U. Mass., </address> <year> 1987. </year>
Reference-contexts: Motor the interface software to the specific robot to be controlled. Homeostatic a component concerned with dynamic replanning in light of available internal resources [7]. The overall architecture has been described in detail elsewhere. The reader is referred to <ref> [ 4, 6] </ref> for more information. The hardware migration to ANIMA thus far has been concerned with the reactive and perceptual components of the system which run within the confines of the motor schema manager.
Reference: 5. <author> Arkin, </author> <title> R.C., The Impact of Cybernetics on the Design of a Mobile Robot System: A Case Study, </title> <journal> IEEE Trans. Sys. Man Cyber., </journal> <volume> vol. 20, no. 6, </volume> <month> Nov/Dec </month> <year> 1990, </year> <pages> pp. 1245-1257. </pages>
Reference-contexts: Figure 1 presents the logical relationships between the varying schemas which constitute this portion of AuRA. Action-oriented perception forms the underlying philosophy for channeling sensory information to the motor schemas (behaviors) <ref> [ 5] </ref>. Only the information that is essential to a particular motor behavior is transmitted to it, essentially on a need-to-know basis. The message-passing paradigm found in ANIMA is wellsuited for this type of information flow.
Reference: 6. <author> Arkin, R.C., Riseman, E. and Hanson, A., AuRA: </author> <title> An Architecture for Vision-based Robot Navigation, </title> <booktitle> Proc. of the 1987 DARPA Image Understanding Workshop , Los Angeles, </booktitle> <address> CA, </address> <pages> pp. 417-431. </pages>
Reference-contexts: Motor the interface software to the specific robot to be controlled. Homeostatic a component concerned with dynamic replanning in light of available internal resources [7]. The overall architecture has been described in detail elsewhere. The reader is referred to <ref> [ 4, 6] </ref> for more information. The hardware migration to ANIMA thus far has been concerned with the reactive and perceptual components of the system which run within the confines of the motor schema manager.
Reference: 7. <author> Arkin, </author> <title> R.C., Homeostatic Control for a Mobile Robot: Dynamic Replanning in Hazardous Environments, </title> <note> to appear in Journal of Robotic Systems , vol. 9, no. 2, </note> <year> (1992b). </year>
Reference-contexts: Planning consists of a hierarchical planner (the deliberative component) and the motor schema manager (the reactive component). Motor the interface software to the specific robot to be controlled. Homeostatic a component concerned with dynamic replanning in light of available internal resources <ref> [7] </ref>. The overall architecture has been described in detail elsewhere. The reader is referred to [ 4, 6] for more information. The hardware migration to ANIMA thus far has been concerned with the reactive and perceptual components of the system which run within the confines of the motor schema manager.
Reference: 8. <author> Arkin, R. C. et al., </author> <title> Buzz: An Instantiation of a Schema-Based Reactive Robotic System, </title> <booktitle> to appear in Proc. International Conference on Intelligent Autonomous Systems: </booktitle> <address> IAS-3 (Pittsburgh, PA), </address> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: In the final phase, three of the previously-visited poles were designated to be visited in order. Additional information about the competition may be found in <ref> [8] </ref>. 5.1 Robot description The Denning MRV-3 is a three-wheeled cylindrical robot intended for general-purpose use, mainly in research. All three wheels turn simultaneously, providing (approximately) the ability to turn in place.
Reference: 9. <author> Brooks, R. A. </author> <title> A Layered Intelligent Control System for a Mobile Robot, Rob. </title> <booktitle> Research: Third Intl. Symp . 1985, </booktitle> <pages> pp. 365-372. </pages>
Reference-contexts: Such apparent complexity arises both from the ability of schemas to use other schemas and from the parallel actions of independent schemas. Another significant reactive approach is the subsumption architecture developed by Brooks <ref> [ 9, 10, 11] </ref>. Multiple levels of competence are defined, connecting input and output in a layered system. Higher levels of competence inhibit or subsume all lower levels, and the hardware usually provides direct support for this subsumption characteristic by implementing each level within its own processing subsystem.
Reference: 10. <author> Brooks, R. A., and Connell, J. H. </author> <title> Asynchronous Distributed Control System for a Mobile Robot, </title> <booktitle> Proc. SPIE, </booktitle> <volume> vol. 727, </volume> <year> 1986, </year> <pages> pp. 77-84. </pages>
Reference-contexts: Such apparent complexity arises both from the ability of schemas to use other schemas and from the parallel actions of independent schemas. Another significant reactive approach is the subsumption architecture developed by Brooks <ref> [ 9, 10, 11] </ref>. Multiple levels of competence are defined, connecting input and output in a layered system. Higher levels of competence inhibit or subsume all lower levels, and the hardware usually provides direct support for this subsumption characteristic by implementing each level within its own processing subsystem.
Reference: 11. <author> Brooks, R. A. </author> <title> A Hardware Retargetable Distributed Layered Architecture for Mobile Robot Control, </title> <booktitle> Proc. IEEE Intl. Conf. Rob. </booktitle> <address> Aut. </address> <year> 1987, </year> <pages> pp. 106-110. </pages>
Reference-contexts: Such apparent complexity arises both from the ability of schemas to use other schemas and from the parallel actions of independent schemas. Another significant reactive approach is the subsumption architecture developed by Brooks <ref> [ 9, 10, 11] </ref>. Multiple levels of competence are defined, connecting input and output in a layered system. Higher levels of competence inhibit or subsume all lower levels, and the hardware usually provides direct support for this subsumption characteristic by implementing each level within its own processing subsystem.
Reference: 12. <author> Collins, T. R. </author> <title> A Computer Architecture for Implementation within Autonomous Machines, </title> <type> Ph.D. </type> <institution> Diss., Ga. Inst. of Technology, </institution> <year> 1992. </year>
Reference-contexts: These processes ( Reasoner, Integrator, Coordinator, and representative logical devices) have been described using the notation of Communicating Sequential Processes (CSP) [ 16, 17]. By combining them into a system, it is possible to construct a proof showing that the system is free of deadlock <ref> [12] </ref>. By following basic design principles at the logical device layer and the Integrator/Coordinator layer, we provide a means of fault isolation to individual logical devices. <p> Specifically, by making reasonable models of the environment, sensors, and effectors, one can use essentially the same Integrator , Coordinator , and Reasoner processes as would be used on a real machine <ref> [ 12] </ref>. The simulated machine wandered through a simple world with walls and obstacles, using simulated sonar and touch sensors. Sensors and effectors were deliberately modeled as being imperfect, and the machine (as part of its Reasoner ) had to maintain its own model of the simulated world.
Reference: 13. <author> Crowley, J. L. </author> <title> Dynamic World Modeling for an Intelligent Mobile Robot Proc. </title> <booktitle> 1984 Intl. Conf. Patt. Rec . 1984, </booktitle> <pages> pp. 207-210. </pages>
Reference-contexts: Corresponding to the Integrator , we include a process called the Coordinator . These additional parallel processes are illustrated in logical sensors , in much the same sense as those of Henderson [15] or Crowley <ref> [ 13] </ref>. At this point, a logical sensor is best thought of as a combination of a physical sensor, capable of estimating some property of the environment or the machine itself, and a generalized device driver. The extension of this concept to the logical effector is straightforward.
Reference: 14. <author> Everett, H. R., and Gilbreath, G. A. ROBART II: </author> <title> A Robotic Security Testbed , Naval Ocean Sys. </title> <type> Center Tech. Doc. 1450, </type> <address> San Diego, CA, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: It has become increasingly evident that autonomous machines must incorporate multiprocessor architectures, but it is not quite clear what form the architectures should take. The majority of these specialized multiprocessor architectures have taken a hierarchical form, often a simple tree <ref> [14, 22, 24] </ref>. In the context of an intelligent machine, the processing tasks closest to the environment (i.e., the low-level tasks) tend to map most obviously into a tree.
Reference: 15. <author> Henderson, T., and Shilcrat, E. </author> <title> Logical Sensor Systems J. </title> <journal> Robotic Systems, </journal> <volume> vol. 1, no. 2 (1984), </volume> <pages> 169-193. </pages>
Reference-contexts: Corresponding to the Integrator , we include a process called the Coordinator . These additional parallel processes are illustrated in logical sensors , in much the same sense as those of Henderson <ref> [15] </ref> or Crowley [ 13]. At this point, a logical sensor is best thought of as a combination of a physical sensor, capable of estimating some property of the environment or the machine itself, and a generalized device driver. The extension of this concept to the logical effector is straightforward.
Reference: 16. <author> Hoare, C. A. R. </author> <booktitle> Communicating Sequential Processes Communications of the ACM , vol. </booktitle> <volume> 21, no. </volume> <month> 8 (Aug. </month> <year> 1978), </year> <pages> 666-677. </pages>
Reference-contexts: These processes ( Reasoner, Integrator, Coordinator, and representative logical devices) have been described using the notation of Communicating Sequential Processes (CSP) <ref> [ 16, 17] </ref>. By combining them into a system, it is possible to construct a proof showing that the system is free of deadlock [12]. By following basic design principles at the logical device layer and the Integrator/Coordinator layer, we provide a means of fault isolation to individual logical devices.
Reference: 17. <author> Hoare, C. A. R. </author> <title> Communicating Sequential Processes . Prentice-Hall, </title> <address> Englewood Cliffs, NJ, </address> <year> 1985. </year>
Reference-contexts: These processes ( Reasoner, Integrator, Coordinator, and representative logical devices) have been described using the notation of Communicating Sequential Processes (CSP) <ref> [ 16, 17] </ref>. By combining them into a system, it is possible to construct a proof showing that the system is free of deadlock [12]. By following basic design principles at the logical device layer and the Integrator/Coordinator layer, we provide a means of fault isolation to individual logical devices.
Reference: 18. <author> Khatib, O., </author> <title> Real-time Obstacle Avoidance for Manipulators and Mobile Robots , Proc. </title> <booktitle> IEEE Int. Conf. Rob. </booktitle> <address> Aut., p. 500-505, St. Louis, </address> <year> 1985. </year>
Reference-contexts: The message-passing paradigm found in ANIMA is wellsuited for this type of information flow. Each of the active motor schemas generates a velocity vector in a manner analogous to the potential fields method <ref> [18, 19] </ref> with the individual results being summed, normalized and transmitted to the robot for execution. The speed of operation is highly dependent on the rate of processing of incoming sensory data.
Reference: 19. <author> Krogh, B., </author> <title> A Generalized Potential Field Approach to Obstacle Avoidance Control , SME - RI Technical Paper MS84-484, </title> <year> 1984. </year>
Reference-contexts: The message-passing paradigm found in ANIMA is wellsuited for this type of information flow. Each of the active motor schemas generates a velocity vector in a manner analogous to the potential fields method <ref> [18, 19] </ref> with the individual results being summed, normalized and transmitted to the robot for execution. The speed of operation is highly dependent on the rate of processing of incoming sensory data.
Reference: 20. <author> Lyons D. M., and Arbib, M. A. </author> <title> A Formal Model of Computation for Sensory-Based Robotics IEEE Trans. Rob. </title> <journal> Aut., </journal> <volume> vol. 5, no. </volume> <month> 3 (June </month> <year> 1989), </year> <pages> 280-293. </pages>
Reference-contexts: No clear consensus exists, however, for the number and type of levels to use in such architectures. The hierarchical viewpoint is increasingly being challenged by reactive approaches. The concept of schemas, as typified by Lyons <ref> [ 20] </ref> and Arkin [ 2, 3], implements sensor-effector connections in a more flexible fashion. A schema is a pattern of behavior exhibiting a stimulus-response characteristic.
Reference: 21. <editor> Meystel, A. </editor> <booktitle> Multiresolutional Feedforward/Feedback Loops Proc. 1991 IEEE Intl. Symp. Intelligent Control . Aug. </booktitle> <year> 1991, </year> <pages> pp. 85-90. </pages>
Reference-contexts: More recently, hierarchical designs have emphasized connection across the hierarchy, as in the NASA/NBS standard reference model for telerobot architectures (NASREM) developed by Albus [ 1] and the Multiresolutional Control Architecture of Meystel <ref> [ 21] </ref>. These architectures allow nested control loops via distinct task levels within the hierarchical structure, providing higher bandwidth for low-level tasks that require shorter response times.
Reference: 22. <author> Moravec, H. P. </author> <title> The Stanford Cart and the CMU Rover, </title> <journal> Proc. of the IEEE, </journal> <volume> vol. 71, no. </volume> <month> 7 (July </month> <year> 1983), </year> <pages> 872-884. </pages>
Reference-contexts: One is a reactive software architecture which has been demonstrated to perform a variety of tasks well, and the other is a targeted, yet flexible, computer architecture that provides modularity and expandability. 2 Background Most of the earliest work with intelligent machines relied on direct programming in declarative languages <ref> [ 22, 23, 24] </ref>. This resulted in software architectures that could only accommodate certain situations, and even then only in a do this, then do this fashion. There has been a gradual trend toward reactive software architectures, which combine relatively simple behaviors to implement complex tasks. <p> It has become increasingly evident that autonomous machines must incorporate multiprocessor architectures, but it is not quite clear what form the architectures should take. The majority of these specialized multiprocessor architectures have taken a hierarchical form, often a simple tree <ref> [14, 22, 24] </ref>. In the context of an intelligent machine, the processing tasks closest to the environment (i.e., the low-level tasks) tend to map most obviously into a tree.
Reference: 23. <author> Raphael, B. </author> <title> The Thinking Computer: Mind Inside Matter , W. </title> <editor> H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1976. </year>
Reference-contexts: One is a reactive software architecture which has been demonstrated to perform a variety of tasks well, and the other is a targeted, yet flexible, computer architecture that provides modularity and expandability. 2 Background Most of the earliest work with intelligent machines relied on direct programming in declarative languages <ref> [ 22, 23, 24] </ref>. This resulted in software architectures that could only accommodate certain situations, and even then only in a do this, then do this fashion. There has been a gradual trend toward reactive software architectures, which combine relatively simple behaviors to implement complex tasks.
Reference: 24. <author> Thompson, A. M. </author> <title> The Navigation System of the JPL Robot, </title> <booktitle> Proc. Fifth Intl. Joint Conf. on Artificial Intelligence. </booktitle> <year> 1977, </year> <pages> pp. 749-757. </pages>
Reference-contexts: One is a reactive software architecture which has been demonstrated to perform a variety of tasks well, and the other is a targeted, yet flexible, computer architecture that provides modularity and expandability. 2 Background Most of the earliest work with intelligent machines relied on direct programming in declarative languages <ref> [ 22, 23, 24] </ref>. This resulted in software architectures that could only accommodate certain situations, and even then only in a do this, then do this fashion. There has been a gradual trend toward reactive software architectures, which combine relatively simple behaviors to implement complex tasks. <p> It has become increasingly evident that autonomous machines must incorporate multiprocessor architectures, but it is not quite clear what form the architectures should take. The majority of these specialized multiprocessor architectures have taken a hierarchical form, often a simple tree <ref> [14, 22, 24] </ref>. In the context of an intelligent machine, the processing tasks closest to the environment (i.e., the low-level tasks) tend to map most obviously into a tree.
References-found: 24

