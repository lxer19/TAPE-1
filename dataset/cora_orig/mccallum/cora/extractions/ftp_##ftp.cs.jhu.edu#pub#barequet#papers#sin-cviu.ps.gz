URL: ftp://ftp.cs.jhu.edu/pub/barequet/papers/sin-cviu.ps.gz
Refering-URL: http://www.cs.jhu.edu/~barequet/papers.html
Root-URL: http://www.cs.jhu.edu
Title: Piecewise-Linear Interpolation between Polygonal Slices  
Author: Gill Barequet Micha Sharir 
Keyword: surface reconstruction, tiling, surface fitting, branching surfaces, slice interpolation, triangulation, dynamic programming, geometric hashing, curve matching, polyhedra.  
Abstract: In this paper we present a new technique for piecewise-linear surface reconstruction from a series of parallel polygonal cross-sections. This is an important problem in medical imaging, surface reconstruction from topographic data, and other applications. We reduce the problem, as in most previous works, to a series of problems of piecewise-linear interpolation between each pair of successive slices. Our algorithm uses a partial curve matching technique for matching parts of the contours, an optimal triangulation of 3-D polygons for resolving the unmatched parts, and a minimum spanning tree heuristic for interpolating between non simply connected regions. Unlike previous attempts at solving this problem, our algorithm seems to handle successfully in practice any kind of data. It allows multiple contours in each slice, with any hierarchy of contour nesting, and avoids the introduction of counter-intuitive bridges between contours, proposed in some earlier papers to handle interpolation between multiply connected regions. Experimental results on various complex examples, involving actual medical imaging data, are presented, and show the good and robust performance of our algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. D. Boissonnat, </author> <title> Shape reconstruction from planar cross sections, Computer Vision, </title> <journal> Graphics and Image Processing. </journal> <volume> 44, </volume> <year> 1988, </year> <pages> 1-29. </pages>
Reference-contexts: Other limitations involved specific geometries. However, they suggested solutions for these limitations, which might help in certain cases, but which required some interaction with the user. Boissonnat <ref> [1] </ref> presented a totally different approach. He constructed the Delaunay triangulation for each slice, projected one triangulation onto the other, and obtained a collection of tetrahedra, aiming to maximize the sum of their volumes. This was a considerable step towards handling the case where each slice has multiple contours. <p> And the last example showed a branching problem but without contour overlaps. Boissonnat suggested a correction scheme, which either changed the geometry of one of the slices, or constructed one or two intermediate slices between the original ones. Boissonnat states <ref> [1, p. 21] </ref>: "In our opinion, any method will fail when the measures are poorly conditioned", stipulating that no algorithm will be able to produce satisfactory results when the pair of slices are too much different in the number of contours or in their geometries.
Reference: [2] <author> J. D. Boissonnat and B. Geiger, </author> <title> Three dimensional reconstruction of complex shapes based on the Delaunay triangulation, </title> <type> Technical Report 1697, </type> <institution> Inria-Sophia Antipolis, </institution> <year> 1992. </year>
Reference-contexts: Nevertheless, our algorithm handles these cases (as well as considerably more complex ones) rather routinely and successfully. Improvements and applications of the method of Boissonnat are given by Boissonnat and Geiger in <ref> [2, 11] </ref>. Kehtarnavaz and De Figueiredo [18] first segmented the contours according to local curvature and torsion, and assigned characteristics values to the segments. After concatenating these segment characteristics into circular strings, they performed string matching between these characteristic strings. Finally, they blended the contours by smooth functions, e.g. splines.
Reference: [3] <author> S. Batnitzky, H. I. Price, P. N. Cook, L. T. Cook, and S. J. Dwyer III, </author> <title> Three-dimensional computer reconstruction from surface contours for head CT examinations, </title> <journal> J. of Computer Assisted Tomography. </journal> <volume> 5, </volume> <year> 1981, </year> <pages> 60-67. </pages>
Reference-contexts: In these cases, Christiansen and Sederberg proposed to rely on manual guidance of the user. However, this could require too much interaction with the user in complicated cases, which is highly undesirable. Batnitzky et al. <ref> [3] </ref> proposed another local advancing rule for the simple one-to-one case.
Reference: [4] <author> G. Barequet and M. Sharir, </author> <title> Filling gaps in the boundary of a polyhedron, </title> <type> Technical Report 277/93, </type> <institution> Department of Computer Science, Tel Aviv University, </institution> <year> 1993, </year> <title> Computer-Aided Geometric Design, </title> <note> to appear. </note>
Reference-contexts: This was used for the determination of the objects participating in the scene, and the computation of the position and orientation of each such object. A simplified variant of this technique has recently been used by Barequet and Sharir <ref> [4] </ref> for a totally different problem. We have presented there an algorithm for the detection and repair of gaps in the boundary of a polyhedron, a problem which often arises in the creation of polyhedral approximations of CAD models. <p> We 15 also set minimum values for the number of votes and for the score that an accepted match should have. Our setting of these parameters is described in Section 8. Unlike our previous work on filling gaps in the boundary of a polyhedron <ref> [4] </ref>, where a similar voting process has been used, but in accordance with all the works on object recognition cited in the introduction, we do not have to ensure any global consistency of orientation between all the candidate matches. <p> Therefore, many clefts are created and their (relatively time-consuming) triangulations affect the total running time of the algorithm. This was not the case with the problem we investigated in a companion paper <ref> [4] </ref>, namely the detection and repair of gaps in the boundary of a polyhedron.
Reference: [5] <author> B. Chazelle, </author> <title> A functional approach to data structures and its use in multidimensional searching, </title> <journal> SIAM J. of Computing. </journal> <volume> 17, </volume> <year> 1988, </year> <pages> 427-462. </pages>
Reference-contexts: of ", say equal to the size of the whole slices, will result in fi (n 2 ) access operations to the hash table, but no matches will be identified in this case. (We could also achieve an O (n log 2 n) deterministic running time by using fractional cascading <ref> [5] </ref>.) We collect the matches from the voting results also in O (n) time. Tiling the matching contour portions, like merging sorted lists, is linear in their lengths. Thus, the required time for all these operations is, again, O (n).
Reference: [6] <author> L. T. Cook, P. N. Cook, K. R. Lee, S. Batnitzky, B. Y. S. Wong, S. L. Fritz, J. Ophir, S. J. Dwyer III, L. R. Bigongiari, and A. W. Templeton, </author> <title> An algorithm for volume estimation based on polyhedral approximation, </title> <journal> IEEE Transactions on Biomedical Engineering. </journal> <volume> 27, </volume> <year> 1980, </year> <pages> 493-500. </pages>
Reference-contexts: Similar approach was taken by Sloan and Painter [29]. They suggested an improved heuristic (called pessimal guesses) for the graph search. Cook et al. <ref> [6] </ref> used the tiling method of Fuchs et al. for estimating the volume of an organ, given its cross-sections. Their method could, however, be based on any other similar tiling method. Christiansen and Sederberg [8] began with the simple one-to-one case.
Reference: [7] <author> H. E. Cline, W. E. Lorensen, S. Ludke, C. R. Crawford, and B. C. Teeter, </author> <title> Two algorithms for the three-dimensional reconstruction of tomograms, </title> <journal> Medical Physics. </journal> <volume> 15, </volume> <year> 1988, </year> <pages> 320-327. </pages>
Reference-contexts: In the grey level case, these methods include some thresholding mechanism which decides which levels are `inside' the object and which are not. Cline et al. <ref> [7, 22] </ref> attempted to convert directly the voxel data into a polyhedral surface, suggesting the marching cubes technique, which produced very small triangles whose size was roughly the same as that of the input voxels.
Reference: [8] <author> H. N. Christiansen and T. W. </author> <title> Sederberg, Conversion of complex contour line definitions into polygonal element mosaics, </title> <journal> Computer Graphics. </journal> <volume> 13, </volume> <year> 1978, </year> <pages> 187-192. </pages>
Reference-contexts: They suggested an improved heuristic (called pessimal guesses) for the graph search. Cook et al. [6] used the tiling method of Fuchs et al. for estimating the volume of an organ, given its cross-sections. Their method could, however, be based on any other similar tiling method. Christiansen and Sederberg <ref> [8] </ref> began with the simple one-to-one case. Unlike the first two works cited above, they developed a local advancing rule. <p> In other words, we advance so that the newly added triangle has smaller perimeter; actually, for program efficiency, we eventually used the squares of the distances, with equally good results. (This advancing rule is similar to that presented by Christiansen and Sederberg <ref> [8] </ref>.) This bears close resemblance to the merging of two sorted lists, and turns out to produce reasonably looking triangulated boundary patches between the matched contour portions. Figure 6 shows such a triangulation.
Reference: [9] <author> A. B. Ekoule, F. C. Peyrin, and C. L. Odet, </author> <title> A triangulation algorithm from arbitrary shaped multiple planar contours, </title> <journal> ACM Transactions on Graphics. </journal> <volume> 10, </volume> <year> 1991, </year> <pages> 182-199. </pages>
Reference-contexts: They also dealt only with the simple one-to-one case. Similar ideas were presented by Kehtarnavaz, Simar, and De Figueiredo [20]. They used other features for contour segmentation, and used string matching with errors, allowing insertions and deletions in the matched strings. Ekoule, Peyrin, and Odet <ref> [9] </ref> developed special treatments for some of the multiple-contour cases. For the simple one-to-one case, where the two contours were convex, they suggested a local minimum edge-length heuristic as an advancing rule.
Reference: [10] <author> H. Fuchs, Z. M. Kedem, and S. P. Uselton, </author> <title> Optimal surface reconstruction from planar contours, </title> <journal> Communications of the ACM. </journal> <volume> 20, </volume> <year> 1977, </year> <pages> 693-702. </pages>
Reference-contexts: The first solutions for this problem (that we are aware of) were proposed by Keppel [16] and by Fuchs, Kedem, and Uselton <ref> [10] </ref>. Keppel dealt with the simple case, where each slice contains only one contour, and implicitly assumed a high degree of resemblance between them. <p> The xy-projections of contours of different slices may arbitrarily overlap; we do not make any distinction in the treatment of contours which fully overlap, partially overlap or do not overlap at all. Many of the previous works, such as [16], <ref> [10] </ref>, [27] and [12], either prohibit the creation of triangles in the same slice, or specifically define steps where this action is allowed. We do not make a distinction between triangles which connect the two slices and those which totally lie within a single slice.
Reference: [11] <author> B. </author> <type> Geiger, </type> <institution> Construction et utilisation des modeles d'organes en vue de l'assistance au diagnostic et aux interventions chirurgicals, </institution> <type> Ph.D. Dissertation, </type> <institution> L'Ecole des Mines de Paris, </institution> <year> 1993. </year> <month> 41 </month>
Reference-contexts: Nevertheless, our algorithm handles these cases (as well as considerably more complex ones) rather routinely and successfully. Improvements and applications of the method of Boissonnat are given by Boissonnat and Geiger in <ref> [2, 11] </ref>. Kehtarnavaz and De Figueiredo [18] first segmented the contours according to local curvature and torsion, and assigned characteristics values to the segments. After concatenating these segment characteristics into circular strings, they performed string matching between these characteristic strings. Finally, they blended the contours by smooth functions, e.g. splines.
Reference: [12] <author> S. Ganapathy and T. G. Dennehy, </author> <title> A new general triangulation method for planar contours, </title> <journal> ACM Transactions on Computer Graphics. </journal> <volume> 16, </volume> <year> 1982, </year> <pages> 69-75. </pages>
Reference-contexts: Sloan and Hrechanyk [27] also dealt with the simple one-to-one case. Their contribution was the suggestion to create artificial intermediate slices, in cases where the original ones were extremely different. Then, each pair of successive slices was treated by the previous algorithms. Ganapathy and Dennehy <ref> [12] </ref> still dealt with the one-to-one case. They proposed an advancing rule based on the so-called tension of the surface. Wang and Aggarwal [32] also dealt mainly with the simple one-to-one case. <p> The xy-projections of contours of different slices may arbitrarily overlap; we do not make any distinction in the treatment of contours which fully overlap, partially overlap or do not overlap at all. Many of the previous works, such as [16], [10], [27] and <ref> [12] </ref>, either prohibit the creation of triangles in the same slice, or specifically define steps where this action is allowed. We do not make a distinction between triangles which connect the two slices and those which totally lie within a single slice. <p> Figure 6 shows such a triangulation. We may also further examine the sequence of newly added triangles, and unify adjacent coplanar (or nearly coplanar) triangles into polygons with larger sizes. Alternative advancing rules were described by Ganapathy and Dennehy <ref> [12] </ref> and by others. As an alternative to this merge simulation, we also examined match triangulation by the more involved procedure described in Section 6.2.
Reference: [13] <author> C. Gitlin, J. O'Rourke, and V. Subramanian, </author> <title> On reconstructing polyhedra from parallel slices. </title> <type> Technical Report 025, </type> <institution> Department of Computer Science, Smith College, </institution> <address> Northampton, MA, </address> <year> 1993. </year>
Reference-contexts: We note that our method does not necessarily satisfy any of the two conditions above. However, they are theoretical and are rarely practical. Finally, Gitlin, O'Rourke, and Subramanian <ref> [13] </ref> prove that it is not always possible to find an interpolating polyhedron between two polygons, that lie in two parallel planes. That is, any attempted interpolation produces a self-intersecting surface.
Reference: [14] <author> L. Guibas and J. Stolfi, </author> <title> Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams, </title> <journal> ACM Transactions on Graphics. </journal> <volume> 4, </volume> <year> 1985, </year> <pages> 74-123. </pages>
Reference-contexts: The internal representation of the contours that our system uses is the quad-edge data structure described by Guibas and Stolfi <ref> [14] </ref>. This is done for maintaining efficiently the constructed polyhedral boundary of the interpolating solid object.
Reference: [15] <author> J. Hong and H. J. Wolfson, </author> <title> An improved model-based matching method using footprints, </title> <booktitle> in Proceedings, 9th Int. Conf. on Pattern Recognition, </booktitle> <address> Rome, </address> <year> 1988, </year> <pages> pp. 72-78. </pages>
Reference-contexts: This technique was extended and used in computer vision for automatic identification of partially obscured objects in two or three dimensions, an important problem in robotics applications of computer vision, which has attracted much attention. Hong and Wolfson <ref> [15] </ref>, Wolfson [31], and Kishon, Hastie, and Wolfson [19] applied the geometric hashing technique in various ways for identifying partial curve matches between an input scene boundary and a preprocessed set of known object boundaries. <p> Computing the contour nesting hierarchy in each slice and orienting the contours in the correct directions takes O (k log k) time. This is performed by invoking a simple line-sweep procedure. As in <ref> [15] </ref>, the voting step, if it uses a hash table, can be executed with expected O (n) running time. This expected running time is due to the nature of hashing, and does not assume anything about the geometry of the input slices to the algorithm.
Reference: [16] <author> E. Keppel, </author> <title> Approximating complex surfaces by triangulation of contour lines, </title> <journal> IBM Journal of Research and Development. </journal> <volume> 19, </volume> <year> 1975, </year> <pages> 2-11. </pages>
Reference-contexts: The first solutions for this problem (that we are aware of) were proposed by Keppel <ref> [16] </ref> and by Fuchs, Kedem, and Uselton [10]. Keppel dealt with the simple case, where each slice contains only one contour, and implicitly assumed a high degree of resemblance between them. <p> The xy-projections of contours of different slices may arbitrarily overlap; we do not make any distinction in the treatment of contours which fully overlap, partially overlap or do not overlap at all. Many of the previous works, such as <ref> [16] </ref>, [10], [27] and [12], either prohibit the creation of triangles in the same slice, or specifically define steps where this action is allowed. We do not make a distinction between triangles which connect the two slices and those which totally lie within a single slice.
Reference: [17] <author> G. T. Klincsek, </author> <title> Minimal triangulations of polygonal domains, </title> <journal> Annals of Discrete Mathematics. </journal> <volume> 9, </volume> <year> 1980, </year> <pages> 121-123. </pages>
Reference-contexts: We used the matching results for repairing most of the defects, and developed a 3-dimensional triangulation method for closing the holes remaining after the first stitching pass. This method is similar to the dynamic programming triangulation of simple polygons developed by Klincsek <ref> [17] </ref>. The matching that we need in the present paper uses a similar technique, and is even simpler, because our matched curves lie on a pair of parallel planes. The paper is organized as follows. In Section 2 we give a more precise definition of the problem. <p> For this purpose, we closely follow the dynamic programming technique of Klincsek <ref> [17] </ref> for finding a polygon triangulation in the plane, which minimizes the total sum of edge lengths. Let P = (v 0 ; v 1 ; : : : ; v n1 ; v n = v 0 ) be the given polygon.
Reference: [18] <author> N. Kehtarnavaz and R. J. P. De Figueiredo, </author> <title> A framework for surface reconstruction from 3D contours, Computer Vision, </title> <journal> Graphics and Image Processing. </journal> <volume> 42, </volume> <year> 1988, </year> <pages> 32-47. </pages>
Reference-contexts: Nevertheless, our algorithm handles these cases (as well as considerably more complex ones) rather routinely and successfully. Improvements and applications of the method of Boissonnat are given by Boissonnat and Geiger in [2, 11]. Kehtarnavaz and De Figueiredo <ref> [18] </ref> first segmented the contours according to local curvature and torsion, and assigned characteristics values to the segments. After concatenating these segment characteristics into circular strings, they performed string matching between these characteristic strings. Finally, they blended the contours by smooth functions, e.g. splines.
Reference: [19] <author> E. Kishon, T. Hastie, and H. Wolfson, </author> <title> 3-D curve matching using splines, </title> <journal> J. of Robotic systems. </journal> <volume> 8, </volume> <year> 1991, </year> <pages> 723-743. </pages>
Reference-contexts: This technique was extended and used in computer vision for automatic identification of partially obscured objects in two or three dimensions, an important problem in robotics applications of computer vision, which has attracted much attention. Hong and Wolfson [15], Wolfson [31], and Kishon, Hastie, and Wolfson <ref> [19] </ref> applied the geometric hashing technique in various ways for identifying partial curve matches between an input scene boundary and a preprocessed set of known object boundaries.
Reference: [20] <author> N. Kehtarnavaz, L. R. Simar, and R. J. P. De Figueiredo, </author> <title> A syntactic/semantic technique for surface reconstruction from cross-sectional contours, Computer Vision, </title> <journal> Graphics and Image Processing. </journal> <volume> 42, </volume> <year> 1988, </year> <pages> 399-409. </pages>
Reference-contexts: After concatenating these segment characteristics into circular strings, they performed string matching between these characteristic strings. Finally, they blended the contours by smooth functions, e.g. splines. They also dealt only with the simple one-to-one case. Similar ideas were presented by Kehtarnavaz, Simar, and De Figueiredo <ref> [20] </ref>. They used other features for contour segmentation, and used string matching with errors, allowing insertions and deletions in the matched strings. Ekoule, Peyrin, and Odet [9] developed special treatments for some of the multiple-contour cases.
Reference: [21] <author> A. Kalvin, E. Schonberg, J. T. Schwartz, and M. Sharir, </author> <title> Two-dimensional, model-based, boundary matching using footprints, </title> <journal> Int. J. of Robotics Research. </journal> <volume> 5, </volume> <year> 1986, </year> <pages> 38-55. </pages>
Reference-contexts: See Figure 4 for an illustration. More details of all these steps will be given later in the paper. For the purpose of identifying matching portions of the contours we use a partial curve matching technique, which was first suggested by Kalvin et al. <ref> [21] </ref> and by Schwartz and Sharir [30].
Reference: [22] <author> W. E. Lorensen and H. E. Cline, </author> <title> Marching cubes: A high resolution 3D surface construction algorithm, </title> <journal> Computer Graphics. </journal> <volume> 21, </volume> <year> 1987, </year> <pages> 163-169. </pages>
Reference-contexts: In the grey level case, these methods include some thresholding mechanism which decides which levels are `inside' the object and which are not. Cline et al. <ref> [7, 22] </ref> attempted to convert directly the voxel data into a polyhedral surface, suggesting the marching cubes technique, which produced very small triangles whose size was roughly the same as that of the input voxels.
Reference: [23] <author> H. Muller and A. Klingert, </author> <title> Surface interpolation from cross sections, in Focus on Scientific Visualization (H. </title> <editor> Hagen, H. Muller, and G. M. Nielson, </editor> <booktitle> Eds.), </booktitle> <pages> pp. 139-189, </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: We do not assume this in our approach, and we indeed get a non-intersecting interpolation when we apply our algorithm on their example. Two comprehensive reviews of many of the works on reconstructing 3-dimensional objects from cross-sections are given by Schumaker [25] and by Muller and Klingert <ref> [23, x7] </ref>. The first review is not restricted to piecewise-linear constructions based on polygonal slices, but also refers to parametric and tensor representations of contours, and describes volumetric and surface approaches. 7 1.2 Our Approach We propose a new approach to the interpolation problem.
Reference: [24] <author> D. Meyers, S. Skinner, and K. Sloan, </author> <title> Surfaces from contours: The correspondence and branching problems, </title> <booktitle> in Proceedings, Graphics Interface '91, </booktitle> <year> 1991, </year> <pages> pp. 246-254. </pages>
Reference-contexts: When the two slices contained more than one contour, they performed contour overlapping analysis, and assumed that all the contours of every overlapping subset of contours, except one, were contained in one of the two slices, thus reducing to the previous case. Meyers, Skinner, and Sloan <ref> [24] </ref> divided the problem into four subproblems, namely the correspondence problem, the tiling problem, the branching problem, and the surface fitting problem. They focused their attention on the correspondence and on the branching problems, and assumed that good solutions to the two other problems already existed.
Reference: [25] <author> L. L. Schumaker, </author> <title> Reconstructing 3D objects from cross-sections, in Computation of Curves and Surfaces (W. </title> <editor> Dahmen, M. Gasca, and C. A. Micchelli, </editor> <booktitle> Eds.), </booktitle> <pages> pp. 275-309, </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1989. </year> <month> 42 </month>
Reference-contexts: We do not assume this in our approach, and we indeed get a non-intersecting interpolation when we apply our algorithm on their example. Two comprehensive reviews of many of the works on reconstructing 3-dimensional objects from cross-sections are given by Schumaker <ref> [25] </ref> and by Muller and Klingert [23, x7]. The first review is not restricted to piecewise-linear constructions based on polygonal slices, but also refers to parametric and tensor representations of contours, and describes volumetric and surface approaches. 7 1.2 Our Approach We propose a new approach to the interpolation problem.
Reference: [26] <author> M. Shantz, </author> <title> Surface definition for branching contour-defined objects, </title> <journal> Computer Graphics. </journal> <volume> 15, </volume> <year> 1981, </year> <pages> 242-270. </pages>
Reference-contexts: Shantz's method <ref> [26] </ref> was very similar to the one of Fuchs et al. Shantz also proposed to identify groups (called webs) of related contours of the two slices, based on their mutual overlapping. <p> Thus, we separately treat similar contour portions that are matched between the two slices, and then treat the remaining portions that do not match. We refrain from creating artificial bridges between contours that might conflict with the geometry of the other slice, as already noted in <ref> [26] </ref> and others. In the only case where we construct such bridges, they are guaranteed not to conflict with the geometry of the other slice, i.e. not to intersect the projection of any other contour. We do not have to introduce intermediate slices.
Reference: [27] <author> K. R. Sloan and L. M. Hrechanyk, </author> <title> Surface reconstruction from sparse data, </title> <booktitle> in Proceedings, IEEE Conf. on Pattern Recognition and Image Processing, </booktitle> <address> Dallas, </address> <year> 1981, </year> <pages> pp. 45-48. </pages>
Reference-contexts: This seemed to indicate the top cover or bottom cover of some feature of the solid, and thus the whole contour was simply added to the construction as a new disconnected portion. Sloan and Hrechanyk <ref> [27] </ref> also dealt with the simple one-to-one case. Their contribution was the suggestion to create artificial intermediate slices, in cases where the original ones were extremely different. Then, each pair of successive slices was treated by the previous algorithms. Ganapathy and Dennehy [12] still dealt with the one-to-one case. <p> The xy-projections of contours of different slices may arbitrarily overlap; we do not make any distinction in the treatment of contours which fully overlap, partially overlap or do not overlap at all. Many of the previous works, such as [16], [10], <ref> [27] </ref> and [12], either prohibit the creation of triangles in the same slice, or specifically define steps where this action is allowed. We do not make a distinction between triangles which connect the two slices and those which totally lie within a single slice.
Reference: [28] <author> K. R. Sloan and J. Painter, </author> <title> From contours to surfaces: Testbed and initial results, </title> <booktitle> in Proceedings, CHI + GI '87, </booktitle> <address> Toronto, </address> <year> 1987, </year> <pages> pp. 115-120. </pages>
Reference-contexts: Wang and Aggarwal also proposed to unify adjacent coplanar triangles, both in the same layer (tiling between two slices) and in successive layers, in order to form fewer polygons with larger complexities. A good survey on all the works cited so far is given by Sloan and Painter <ref> [28] </ref>. They decompose each method into its building blocks, and compared the various methods accordingly. They also describe a testbed for evaluating and comparing these techniques.
Reference: [29] <author> K. R. Sloan and J. Painter, </author> <title> Pessimal guesses may be optimal: A counterintuitive search result, </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence. </journal> <volume> 10, </volume> <year> 1988, </year> <pages> 949-955. </pages>
Reference-contexts: Similarly, Fuchs et al. also dealt with the simple one-to-one case, and obtained, using a similar reduction to a graph problem, the tiling with the minimum surface area. Similar approach was taken by Sloan and Painter <ref> [29] </ref>. They suggested an improved heuristic (called pessimal guesses) for the graph search. Cook et al. [6] used the tiling method of Fuchs et al. for estimating the volume of an organ, given its cross-sections. Their method could, however, be based on any other similar tiling method.
Reference: [30] <author> J. T. Schwartz and M. Sharir, </author> <title> Identification of partially obscured objects in two and three dimensions by matching noisy characteristic curves, </title> <journal> Int. J. of Robotics Research. </journal> <volume> 6, </volume> <year> 1987, </year> <pages> 29-44. </pages>
Reference-contexts: More details of all these steps will be given later in the paper. For the purpose of identifying matching portions of the contours we use a partial curve matching technique, which was first suggested by Kalvin et al. [21] and by Schwartz and Sharir <ref> [30] </ref>.
Reference: [31] <author> H. J. Wolfson, </author> <title> On curve matching, </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence. </journal> <volume> 12, </volume> <year> 1990, </year> <pages> 483-489. </pages>
Reference-contexts: This technique was extended and used in computer vision for automatic identification of partially obscured objects in two or three dimensions, an important problem in robotics applications of computer vision, which has attracted much attention. Hong and Wolfson [15], Wolfson <ref> [31] </ref>, and Kishon, Hastie, and Wolfson [19] applied the geometric hashing technique in various ways for identifying partial curve matches between an input scene boundary and a preprocessed set of known object boundaries.
Reference: [32] <author> Y. F. Wang and J. K. Aggarwal, </author> <title> Surface reconstruction and representation of 3-D scenes, </title> <journal> Pattern Recognition. </journal> <volume> 19, </volume> <year> 1986, </year> <pages> 197-207. </pages>
Reference-contexts: Then, each pair of successive slices was treated by the previous algorithms. Ganapathy and Dennehy [12] still dealt with the one-to-one case. They proposed an advancing rule based on the so-called tension of the surface. Wang and Aggarwal <ref> [32] </ref> also dealt mainly with the simple one-to-one case. Based on the amount of contour overlapping, they decided whether to project a contour from one slice onto its matching counterpart from the other slice, connect the two contours, or none of these. <p> In the only case where we construct such bridges, they are guaranteed not to conflict with the geometry of the other slice, i.e. not to intersect the projection of any other contour. We do not have to introduce intermediate slices. As suggested in <ref> [32] </ref>, we may optionally unify adjacent coplanar triangles as they are produced, in order to remain with fewer polygons, though with larger sizes.
Reference: [33] <author> E. Welzl and B. Wolfers, </author> <title> Surface reconstruction between simple polygons via angle criteria, </title> <booktitle> in Proceedings, 1st Ann. European Symp. on Algorithms (ESA '93), Lecture Notes in Computer Science, </booktitle> <volume> 726, </volume> <publisher> Springer Verlag, </publisher> <year> 1993, </year> <pages> 397-408. </pages>
Reference-contexts: each of the two slices consists of a single contour, and these contours roughly `sit above each other', then we expect the solution to be a single `drum-like' polytope whose boundary consists of a circular sequence of triangles `wrapping around' the two contours; see Figure 1 (a). (Welzl and Wolfers <ref> [33] </ref> have proposed another criterion, that if the two contours are convex, then the solution should coincide with their convex hull.) However, even in the simple case of one contour in each slice, if the xy-projections of the two contours are far away from each other, it is not clear which <p> For the branching problem, they formed a composite contour from the branching contours, thus reducing to the simple one-to-one case. They also suggested a special treatment of a canyon between contours, but did not specify how they automatically determined this case and identified the canyon endpoints. Welzl and Wolfers <ref> [33] </ref> provided an angle criterion for tiling between two polygons, with no branching.
Reference: [34] <author> M. J. Zyda, A. R. Jones, and P. G. Hogan, </author> <title> Surface construction from planar contours, </title> <journal> Computers and Graphics. </journal> <volume> 11, </volume> <year> 1987, </year> <pages> 393-408. 43 </pages>
Reference-contexts: A good survey on all the works cited so far is given by Sloan and Painter [28]. They decompose each method into its building blocks, and compared the various methods accordingly. They also describe a testbed for evaluating and comparing these techniques. Zyda, Jones, and Hogan <ref> [34] </ref> made an attempt to handle the many-to-many case. 5 They attributed the contour interiors as high or low instead of specifying their ori-entations. Their algorithm used these attributes, as well as bounding-box overlap analysis, in order to locate partial contour mapping.
References-found: 34

