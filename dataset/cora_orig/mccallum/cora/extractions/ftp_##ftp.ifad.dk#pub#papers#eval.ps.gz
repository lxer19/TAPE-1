URL: ftp://ftp.ifad.dk/pub/papers/eval.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Phone: DK 5230  
Title: Evaluation of Underdetermined Explicit Definitions  
Author: Peter Gorm Larsen 
Address: Forskerparken 10  Denmark  
Affiliation: The Institute of Applied Computer Science  Odense M  
Abstract: The specification language VDM-SL is used in the model-oriented formal method known as the Vienna Development Method. There have been a number of different dialects of this language, but a standard for the language has now been defined. The draft standard includes a dynamic semantics which, in general, is not executable. A given specification denotes a (possibly infinite) set of models according to the dynamic semantics. This paper illustrates how all the valid results from evaluating a given expression in all the different models can be collected. It is important to be able to do this in order to investigate the amount of looseness which is present in the given specification, such that correctness properties of the expression as a whole can be derived. We present a specification of such a loose evaluation for an executable subset of VDM-SL. The subset is interesting because it also illustrates how underdeterminedness is combined with recursion in VDM-SL.
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Information Technology Programming Languages - VDM-SL. </institution> <note> First Committee Draft Standard: CD 13817-1, </note> <month> November </month> <year> 1993. </year> <note> ISO/IEC JTC1/SC22/WG19 N-20. </note>
Reference-contexts: However, in the presence of underdeterminedness more than one least fixed point will be present. Thus, we need some extra explanation about how this is dealt with. In the denotational dynamic semantics of VDM-SL given in the standard <ref> [1] </ref>, the functions which give meaning to expressions yield a loose expression evaluator. This is a set of expression evaluators, each of which is a deterministic function from environments to values.
Reference: 2. <author> Rene Elmstrtm, Peter Gorm Larsen and Poul Btgh Lassen. </author> <title> The IFAD VDM-SL Toolbox: A Practical Approach to Formal Specifications. </title> <journal> ACM Sigplan Notices, </journal> <month> Summer </month> <year> 1994. </year>
Reference-contexts: Thus, this definition cannot be expanded to the full VDM-SL language because we would run into `meta-circular' problems. 4 For example by using the interpreter from the IFAD VDM-SL Toolbox <ref> [6, 2] </ref>. 5 In the same way as decision procedures are used in the PVS system [8]. 2 The Problems with Underdeterminedness As mentioned in the introduction above, there are different ways of interpreting looseness (see [9, 10] for general overviews of alternative models).
Reference: 3. <author> Peter Gorm Larsen, Michael Meincke Arentoft, Brian Monahan and Stephen Bear. </author> <title> Towards a Formal Semantics of The BSI/VDM Specification Language. </title> <editor> In Ritter, editor, </editor> <booktitle> Information Processing 89, </booktitle> <pages> pages 95-100. </pages> <publisher> North-Holland, </publisher> <month> August </month> <year> 1989. </year>
Reference-contexts: It is also worth noting that the main motivation for writing this specification was that in the process of developing proof rules for this combination an error was discovered in the semantics given in the standard (e.g. also in <ref> [3] </ref>). Thus, in earlier versions of the standard this combination was not treated in a consistent way. The approach taken here has a few limitations. First of all, it only works if all models do not yield any undefined results, which is to be expected.
Reference: 4. <author> Peter Gorm Larsen and Poul Btgh Lassen. </author> <title> An Executable Subset of Meta-IV with Loose Specification. </title> <editor> In S. Prehn and W.J. Toetenel, editors, </editor> <title> VDM '91: Formal Software Development Methods. </title> <publisher> Springer-Verlag, </publisher> <month> March </month> <year> 1991. </year>
Reference-contexts: In this paper a specification of loose evaluation of expressions is presented for a non-trivial subset of VDM-SL. The definition given here is operational and closely related to the dynamic semantics definition used for developing the interpreter from the IFAD VDM-SL Toolbox <ref> [4] </ref> 3 . The main motivation for using an operational style here is to illustrate how small the changes are when one moves from using an arbitrary model to collecting all models. <p> A BlkEnv could alternatively be mod-elled as a map. We have chosen to use a sequence in order to keep it in line with the operational dynamic semantics presented in <ref> [4] </ref>. NameVal = UniqueId fi VAL UniqueId = (Name fi Position fi ([Name fi VAL])) The unique names which are used here deserve a little additional explanation. <p> The loose value pairs which are consistent with the model for the loose value pair of the first expression are added to the resulting loose value for the entire let-expression. In order to show the close relationship with the operational dynamic semantics presented in <ref> [4] </ref> we present the corresponding evaluation of a let expression from that definition: EvalLetExpr : LetExpr o EvalLetExpr (mk-LetExpr (pat; expr ; in-e)) 4 (let val = EvalExpr (expr ) in let env-s = PatternMatch (pat; val ) in if env-s 6= fg then let env 2 env-s in (PushBlkEnv (env <p> 2 envl-s ; e 2 2 envr-sg in envres-sl : = envres-sl [ UnionMatch (tmpenv ) else skip; return envres-sl ) else return fg ) Finally it is worth noting that except for the treatment of position informa tion for pattern identifiers this definition is identical to the one from <ref> [4] </ref>. 8 Examples Let us first return to the examples presented in Section 3. fac 0 looks like: fac 0 : N ! N if n = 0 then let x 2 f1; 2g in x else n fi fac 0 (n 1) For fac 0 with two expression evaluators, calculating <p> We have shown how complex this is, in particular when one combines the underdeterminedness with recursion. However, we have also shown that only minor adjustments needs to be made for the evaluation part of the definition from <ref> [4] </ref> to specify such a looseness analysis tool.
Reference: 5. <author> Peter Gorm Larsen. </author> <title> Towards Proof Rules for Looseness in Explicit Definitions from VDM-SL. </title> <booktitle> In Proceedings of the "International Workshop on Semantics of Specification Languages (SoSL)", </booktitle> <month> 25-27 October </month> <year> 1993, </year> <title> Utrecht, </title> <publisher> Springer-Verlag 1994. </publisher>
Reference-contexts: Site: hermes.ifad.dk (130.225.136.3) Directory: /pub/vdm/examples/loose.tar.gz or alternatively directly from the author. 1 In the literature `underdeterminedness' has also been called `under-specification'. give rise to complicated proof rules and proofs (see <ref> [5] </ref>) 2 . The loose expression evaluation functions described here may help to simplify the task of proving properties about expressions which are loose, as a kind of decision procedure which can reduce the simple (executable) expressions to a corresponding "loose value". <p> This corresponds to the dynamic tagging information used in <ref> [5] </ref>. 5.2 Semantic Values LVAL = (VAL fi Model )-set The "loose value" returned by the loose expression evaluation functions is a set of pairs. The first element of such a pair is the value of the expression in the model described by the second element of the pair. <p> The examples presented in this section (and all the complicated examples from <ref> [5] </ref>) have actually been tested by the interpreter from the IFAD VDM-SL Toolbox 13 .
Reference: 6. <editor> Poul Btgh Lassen. IFAD VDM-SL Toolbox. In J.C.P. Woodcock and P.G. Larsen, editors, FME'93: </editor> <title> Industrial-Strength Formal Methods. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Thus, this definition cannot be expanded to the full VDM-SL language because we would run into `meta-circular' problems. 4 For example by using the interpreter from the IFAD VDM-SL Toolbox <ref> [6, 2] </ref>. 5 In the same way as decision procedures are used in the PVS system [8]. 2 The Problems with Underdeterminedness As mentioned in the introduction above, there are different ways of interpreting looseness (see [9, 10] for general overviews of alternative models).
Reference: 7. <author> David A. Schmidt. </author> <title> Denotational Semantics A Methodology for Language Development. </title> <publisher> Allyn and Bacon, Inc. </publisher> <year> 1986. </year>
Reference-contexts: In particular we will investigate how this influences the semantics of recursive functions which have looseness in their body. 3 The Semantics of Underdeterminedness in VDM-SL Explicitly defined recursive functions in VDM-SL are given a least fixed point semantics (see <ref> [7] </ref>). However, in the presence of underdeterminedness more than one least fixed point will be present. Thus, we need some extra explanation about how this is dealt with.
Reference: 8. <author> Natarajan Shankar, Sam Owre and John Rushby. </author> <title> A Tutorial on Specification and Verification Using PVS. </title> <editor> In Peter Gorm Larsen, editor, </editor> <booktitle> Tutorial Material Formal Methods Europe '93, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: Thus, this definition cannot be expanded to the full VDM-SL language because we would run into `meta-circular' problems. 4 For example by using the interpreter from the IFAD VDM-SL Toolbox [6, 2]. 5 In the same way as decision procedures are used in the PVS system <ref> [8] </ref>. 2 The Problems with Underdeterminedness As mentioned in the introduction above, there are different ways of interpreting looseness (see [9, 10] for general overviews of alternative models).
Reference: 9. <author> Harald Stndergaard and Peter Sestoft. </author> <title> Referential Transparency, Definiteness and Unfoldability. </title> <journal> Acta Informatica, </journal> <volume> 27 </volume> <pages> 505-517, </pages> <year> 1990. </year>
Reference-contexts: `meta-circular' problems. 4 For example by using the interpreter from the IFAD VDM-SL Toolbox [6, 2]. 5 In the same way as decision procedures are used in the PVS system [8]. 2 The Problems with Underdeterminedness As mentioned in the introduction above, there are different ways of interpreting looseness (see <ref> [9, 10] </ref> for general overviews of alternative models). When looseness is interpreted as being underdetermined it means that even functions which contain looseness in the body are deterministic in each model.
Reference: 10. <author> Harald Stndergaard and Peter Sestoft. </author> <title> Non-determinism in Functional Languages. </title> <journal> The Computer Journal, </journal> <volume> 35(5) </volume> <pages> 514-523, </pages> <month> October </month> <year> 1992. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: `meta-circular' problems. 4 For example by using the interpreter from the IFAD VDM-SL Toolbox [6, 2]. 5 In the same way as decision procedures are used in the PVS system [8]. 2 The Problems with Underdeterminedness As mentioned in the introduction above, there are different ways of interpreting looseness (see <ref> [9, 10] </ref> for general overviews of alternative models). When looseness is interpreted as being underdetermined it means that even functions which contain looseness in the body are deterministic in each model.
References-found: 10

