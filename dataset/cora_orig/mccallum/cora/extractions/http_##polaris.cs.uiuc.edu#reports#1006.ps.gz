URL: http://polaris.cs.uiuc.edu/reports/1006.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: A Polygonal Approximation to Direct Scalar Volume Rendering  
Author: Peter Shirley Allan Tuchman 
Keyword: CR Categories and Subject Descriptors: I.3.0 [Computer Graphics]: General; I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling. Additional Key Words and Phrases: Volume rendering, scientific visualization.  
Address: Urbana, Illinois 61801  
Affiliation: Center for Supercomputing Research and Development 305 Talbot Lab University of Illinois  
Abstract: One method of directly rendering a three-dimensional volume of scalar data is to project each cell in a volume onto the screen. Rasterizing a volume cell is more complex than rasterizing a polygon. A method is presented that approximates tetrahedral volume cells with hardware renderable transparent triangles. This method produces results which are visually similar to more exact methods for scalar volume rendering, but is faster and has smaller memory requirements. The method is best suited for display of smoothly-changing data. 
Abstract-found: 1
Intro-found: 1
Reference: [Bli82] <author> James F. </author> <title> Blinn. Light reflection functions for simulation of clouds and dusty surfaces. </title> <journal> Computer Graphics, </journal> <volume> 16(3) </volume> <pages> 21-30, </pages> <month> July </month> <year> 1982. </year> <booktitle> ACM Siggraph '82 Conference Proceedings. </booktitle>
Reference-contexts: Another method, the method of interest in this paper, is to display f as a three-dimensional cloud. This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing <ref> [Bli82, KH84, Lev88, Sab88, UK88, SN89] </ref> and direct projection [FGR85, LGLD86, UK88, DCH88, Wes90]. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume.
Reference: [Car84] <author> Loren Carpenter. </author> <title> The A-buffer, an antialiased hidden surface method. </title> <journal> Computer Graphics, </journal> <volume> 18(3) </volume> <pages> 103-108, </pages> <month> July </month> <year> 1984. </year> <booktitle> ACM Siggraph '84 Conference Proceedings. </booktitle>
Reference-contexts: Because the triangles are semi-transparent, they must either be rendered in depth order, or an enhanced frame buffer such as the A-buffer <ref> [Car84] </ref> must be used. Using an A-buffer may not be feasible for large volumes where each pixel might have hundreds of overlapping transparent polygons.
Reference: [DCH88] <author> Robert A. Drebin, Loren Carpenter, and Pat Hanrahan. </author> <title> Volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 65-74, </pages> <month> July </month> <year> 1988. </year> <booktitle> ACM Siggraph '88 Conference Proceedings. </booktitle>
Reference-contexts: This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing [Bli82, KH84, Lev88, Sab88, UK88, SN89] and direct projection <ref> [FGR85, LGLD86, UK88, DCH88, Wes90] </ref>. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume.
Reference: [FGR85] <author> Gideon Frieder, Dan Gordon, and Anthony Reynolds. </author> <title> Back-to-front display of voxel-based objects. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 5(1) </volume> <pages> 52-60, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing [Bli82, KH84, Lev88, Sab88, UK88, SN89] and direct projection <ref> [FGR85, LGLD86, UK88, DCH88, Wes90] </ref>. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume.
Reference: [FvDFH90] <author> James D. Foley, Andries van Dam, Steven K. Feiner, and John F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <note> second edition, </note> <year> 1990. </year>
Reference-contexts: One possible way to combine the Projected Tetrahedra algorithm with opaque surface primitives would be first to render the opaque surfaces with a Z-buffer <ref> [FvDFH90] </ref>, and then to render each transparent polygon in depth order, omitting any contribution to a pixel if the z-value of the triangle at that pixel is deeper than the z-value stored in the Z-buffer. This would introduce additional error only for tetrahedra that contain surfaces.
Reference: [HS89] <author> William Hibbard and David Santek. </author> <title> Interac-tivity is the key. </title> <booktitle> In Proceedings of the Chapel Hill Workshop on Volume Visualization, </booktitle> <pages> pages 39-43, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Hibbard and Santek used parallel stacks of transparent polygonal sheets to approximate volume cells, but their method is a `quick and dirty' way to get pictures, and they reported noticeable errors for off normal viewpoints <ref> [HS89] </ref>. In this paper, we present the Projected Tetrahedra (PT) algorithm, a method of approximating directly projected volume cells with sets of partially transparent polygons that can then be rendered relatively quickly on a graphics workstation.
Reference: [Kau87] <author> Arie Kaufman. </author> <title> Efficient algorithms for 3d scan-conversion of parametric curves, surfaces, and volumes. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 171-179, </pages> <month> July </month> <year> 1987. </year> <booktitle> ACM Siggraph '87 Conference Proceedings. </booktitle>
Reference-contexts: Unfortunately, current graphics workstations do not support scan conversion of volumetric primatives. Kaufman describes a hardware design that scan converts volume primatives into a three dimensional grid, and then performs ray tracing to produce an image <ref> [Kau87] </ref>. Kaufman's design has the advantage of implicitly correct depth ordering, so that unstructured grids may be rendered, and the further advantage that curvilinear cells are approximated by tricubic parametric volumes rather than polyhedrons, but such a system is not currently commercially available.
Reference: [KH84] <author> James T. Kajiya and B. P. Von Herzen. </author> <title> Ray tracing volume densities. </title> <journal> Computer Graphics, </journal> <volume> 18(4) </volume> <pages> 165-174, </pages> <month> July </month> <year> 1984. </year> <booktitle> ACM Siggraph '84 Conference Proceedings. </booktitle>
Reference-contexts: Another method, the method of interest in this paper, is to display f as a three-dimensional cloud. This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing <ref> [Bli82, KH84, Lev88, Sab88, UK88, SN89] </ref> and direct projection [FGR85, LGLD86, UK88, DCH88, Wes90]. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume.
Reference: [LC87] <author> William E. Lorensen and Harvey E. Cline. </author> <title> Marching cubes: A high resolution 3d surface construction algorithm. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 163-169, </pages> <month> July </month> <year> 1987. </year> <booktitle> ACM Siggraph '87 Conference Proceedings. </booktitle>
Reference-contexts: Email: shirley@cs.indiana.edu. y Email: tuchman@csrd.uiuc.edu. 0 The most intuitive strategy for displaying f is to choose some particular value k and display all points where f (x; y; z) = k. For continuous f this will yield a set of well defined iso-value surfaces or isosurfaces <ref> [LC87] </ref>. Another method, the method of interest in this paper, is to display f as a three-dimensional cloud. This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. <p> This would introduce additional error only for tetrahedra that contain surfaces. Embedded transparent iso-surfaces are sometime useful. Once the cells have been divided into tetrahedra, it would be possible to extract isovalued surfaces in a manner similar to the marching cubes algorithm <ref> [LC87] </ref>. Such a marching tetrahedra algorithm would generate three and four-sided polygons that could be rendered separately or embedded in the volume. The surfaces can be rendered with any degree of transparency.
Reference: [Lev88] <author> Mark Levoy. </author> <title> Display of surfaces from volume data. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 8(3) </volume> <pages> 29-37, </pages> <year> 1988. </year>
Reference-contexts: Another method, the method of interest in this paper, is to display f as a three-dimensional cloud. This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing <ref> [Bli82, KH84, Lev88, Sab88, UK88, SN89] </ref> and direct projection [FGR85, LGLD86, UK88, DCH88, Wes90]. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume. <p> This approximation can cause problems in datasets where the particle density is high. An example of such a high particle density dataset is the medical dataset used by Levoy <ref> [Lev88] </ref>, where pseudo-surfaces are generated. The PT method is also suspect for very large datasets, because one of the primary reasons for generating the triangles is to avoid having to perform ray integration at every pixel covered by a tetrahedron.
Reference: [LGLD86] <author> Reiner Lenz, Bjorn Gudnumdsson, Bjorn Lind-skog, and Per Danielsson. </author> <title> Display of density volumes. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 6(7), </volume> <month> July </month> <year> 1986. </year>
Reference-contexts: This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing [Bli82, KH84, Lev88, Sab88, UK88, SN89] and direct projection <ref> [FGR85, LGLD86, UK88, DCH88, Wes90] </ref>. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume.
Reference: [MHC90] <author> Nelson Max, Pat Hanrahan, and Roger Crawfis. </author> <title> Area and volume coherence for efficient visualization of 3d scalar functions. </title> <journal> Computer Graphics, </journal> <volume> 24(5), </volume> <month> December </month> <year> 1990. </year> <booktitle> San Diego Volume Visualization Conference Proceedings. </booktitle>
Reference: [PD84] <author> Thomas Porter and Tom Duff. </author> <title> Compositing digital images. </title> <journal> Computer Graphics, </journal> <volume> 18(4) </volume> <pages> 253-260, </pages> <month> July </month> <year> 1984. </year> <booktitle> ACM Siggraph '84 Conference Proceedings. </booktitle>
Reference-contexts: ff = A p (t 1 t 0 ) 2 Approximating C 0 by the average particle color between t 0 and t 1 , color can be calculated as: C (t 1 ) = ff 2 Note that this is just alpha compositing as described by Porter and Duff <ref> [PD84] </ref> (it is the atop operation in their terminology).
Reference: [Sab88] <author> Paolo Sabella. </author> <title> A rendering algorithm for visualizing 3d scalar fields. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 51-58, </pages> <month> July </month> <year> 1988. </year> <booktitle> ACM Siggraph '88 Conference Proceedings. </booktitle>
Reference-contexts: For continuous f this will yield a set of well defined iso-value surfaces or isosurfaces [LC87]. Another method, the method of interest in this paper, is to display f as a three-dimensional cloud. This idea of displaying volumes as clouds is commonly called direct volume rendering <ref> [Sab88, UK88] </ref>. To generate directly rendered images of f , two basic methods have been used: ray tracing [Bli82, KH84, Lev88, Sab88, UK88, SN89] and direct projection [FGR85, LGLD86, UK88, DCH88, Wes90]. <p> Another method, the method of interest in this paper, is to display f as a three-dimensional cloud. This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing <ref> [Bli82, KH84, Lev88, Sab88, UK88, SN89] </ref> and direct projection [FGR85, LGLD86, UK88, DCH88, Wes90]. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume.
Reference: [SN89] <author> Peter Shirley and Henry Neeman. </author> <title> Volume visualization at the Center for Supercomputing Research and Development. </title> <booktitle> In Proceedings of the Chapel Hill Workshop on Volume Visualization, </booktitle> <pages> pages 17-20, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Another method, the method of interest in this paper, is to display f as a three-dimensional cloud. This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing <ref> [Bli82, KH84, Lev88, Sab88, UK88, SN89] </ref> and direct projection [FGR85, LGLD86, UK88, DCH88, Wes90]. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume. <p> Flow ribbons tracking a vector-valued function in the same region as the scalar may be shown by calculating the ribbon paths and rendering these polygons in the volume <ref> [SN89] </ref>.
Reference: [UK88] <author> Craig Upson and Micheal Keeler. V-buffer: </author> <title> Visible volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 59-64, </pages> <month> July </month> <year> 1988. </year> <booktitle> ACM Siggraph '88 Conference Proceedings. </booktitle>
Reference-contexts: For continuous f this will yield a set of well defined iso-value surfaces or isosurfaces [LC87]. Another method, the method of interest in this paper, is to display f as a three-dimensional cloud. This idea of displaying volumes as clouds is commonly called direct volume rendering <ref> [Sab88, UK88] </ref>. To generate directly rendered images of f , two basic methods have been used: ray tracing [Bli82, KH84, Lev88, Sab88, UK88, SN89] and direct projection [FGR85, LGLD86, UK88, DCH88, Wes90]. <p> Another method, the method of interest in this paper, is to display f as a three-dimensional cloud. This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing <ref> [Bli82, KH84, Lev88, Sab88, UK88, SN89] </ref> and direct projection [FGR85, LGLD86, UK88, DCH88, Wes90]. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume. <p> This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing [Bli82, KH84, Lev88, Sab88, UK88, SN89] and direct projection <ref> [FGR85, LGLD86, UK88, DCH88, Wes90] </ref>. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume. <p> To generate directly rendered images of f , two basic methods have been used: ray tracing [Bli82, KH84, Lev88, Sab88, UK88, SN89] and direct projection [FGR85, LGLD86, UK88, DCH88, Wes90]. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper <ref> [UK88] </ref>. In ray tracing, viewing rays are sent through each pixel and integrated through the volume. In direct projection, each cell of the volume is projected onto the screen. Because each cell is partially transparent, a painter's depth ordering algorithm is used for direct projection. <p> Using an A-buffer may not be feasible for large volumes where each pixel might have hundreds of overlapping transparent polygons. Depth ordering for rectilinear grids is discussed by Frieder et al.[FGR85] and by Upson and Keeler <ref> [UK88] </ref>, and for non-rectilinear grids is discussed by Williams and Shirley [WS90] and Max et al.[MHC90]. Unfortunately, a non-rectilinear mesh, even if its boundary is convex, may have cycles that make a correct depth ordering impossible [WS90]. The frequency of such cycles in computational meshes is unknown. <p> The timing is independent of image size. The lower image in Figure 7 was rendered on the same computer in about 7 minutes with volumetric ray tracing program using techniques similar to those in <ref> [UK88] </ref>. The ray traced image time is directly proportional to the number of pixels in the resulting image. The MPDO algorithm [WS90 ] was used to generate the back to front ordering of tetrahedra for the PT version. This step took approximately 3 seconds including output of the tetrahedra.
Reference: [Wes90] <author> Lee Westover. </author> <title> Footprint evaluation for volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 367-376, </pages> <month> August </month> <year> 1990. </year> <booktitle> ACM Siggraph '90 Conference Proceedings. </booktitle>
Reference-contexts: This idea of displaying volumes as clouds is commonly called direct volume rendering [Sab88, UK88]. To generate directly rendered images of f , two basic methods have been used: ray tracing [Bli82, KH84, Lev88, Sab88, UK88, SN89] and direct projection <ref> [FGR85, LGLD86, UK88, DCH88, Wes90] </ref>. Upson and Keeler discuss the relative merits of ray tracing and direct cell projection in their V-buffer paper [UK88]. In ray tracing, viewing rays are sent through each pixel and integrated through the volume.
Reference: [WS90] <author> Peter L. Williams and Peter Shirley. </author> <title> An a priori depth ordering algorithm for meshed polyhedra. </title> <type> Technical Report 1018, </type> <institution> Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, </institution> <month> Septem-ber </month> <year> 1990. </year>
Reference-contexts: Using an A-buffer may not be feasible for large volumes where each pixel might have hundreds of overlapping transparent polygons. Depth ordering for rectilinear grids is discussed by Frieder et al.[FGR85] and by Upson and Keeler [UK88], and for non-rectilinear grids is discussed by Williams and Shirley <ref> [WS90] </ref> and Max et al.[MHC90]. Unfortunately, a non-rectilinear mesh, even if its boundary is convex, may have cycles that make a correct depth ordering impossible [WS90]. The frequency of such cycles in computational meshes is unknown. Throughout our discussion it is assumed that a perspective projection is used. <p> for rectilinear grids is discussed by Frieder et al.[FGR85] and by Upson and Keeler [UK88], and for non-rectilinear grids is discussed by Williams and Shirley <ref> [WS90] </ref> and Max et al.[MHC90]. Unfortunately, a non-rectilinear mesh, even if its boundary is convex, may have cycles that make a correct depth ordering impossible [WS90]. The frequency of such cycles in computational meshes is unknown. Throughout our discussion it is assumed that a perspective projection is used. An orthographic projection can be substituted by modifying step 2. <p> The lower image in Figure 7 was rendered on the same computer in about 7 minutes with volumetric ray tracing program using techniques similar to those in [UK88]. The ray traced image time is directly proportional to the number of pixels in the resulting image. The MPDO algorithm <ref> [WS90 ] </ref> was used to generate the back to front ordering of tetrahedra for the PT version. This step took approximately 3 seconds including output of the tetrahedra. Also note the background white lines equally spaced both horizontally and vertically in Figure 7.
References-found: 18

