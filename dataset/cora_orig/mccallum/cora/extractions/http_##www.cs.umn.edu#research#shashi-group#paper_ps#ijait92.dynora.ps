URL: http://www.cs.umn.edu/research/shashi-group/paper_ps/ijait92.dynora.ps
Refering-URL: http://www.cs.umn.edu/Research/shashi-group/abstract/ijait92.dynora.abs.html
Root-URL: http://www.cs.umn.edu
Title: DYNORAII: A REAL-TIME PLANNING ALGORITHM  
Author: BABAK HAMIDZADEH SHASHI SHEKHAR 
Keyword: Real-Time, Search, Tradeoff between Planning and Execution Costs.  
Address: Minneapolis, MN 55455  
Affiliation: Computer Science Dept. University of Minnesota  
Abstract: There has been a recent rise in research on real-time planning algorithms. Most of these algorithms address either the issue of response-time constraints or the issue of dynamic environments. We propose a new real-time planning algorithm, DYNORAII, to address both of these issues simultaneously. DYNORAII is structured as a sequence of ``partial planning and execution'' cycles to avoid obsolescence of planned solutions at the time of execution. DYNORAII uses a stopping criterion to balance planning cost and execution cost to achieve near optimal response times. DYNORAII was used for the routing problem to optimize total cost in both static and dynamic environments. It shows better average-case time complexity than traditional real-time algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R.E. Korf, </author> <title> RealTime Heuristic Search First Results, </title> <booktitle> Proc. AAAI Conference, </booktitle> <year> (1987). </year>
Reference-contexts: The longer the time spent in planning a solution, the more obsolete the solution becomes at the time of execution. An AI system in such a situation may deviate from the ``plan completely before execution'' paradigm to ``partial planning followed by execution'' paradigm <ref> [1] </ref> to avoid obsolescence of the plans. The on-line situations are those in which the world changes rapidly and unexpectedly during planning. Events in these situations necessitate major revision of solutions during planning. <p> The changes in dynamic environments can make time-dependent information used for planning obsolete at the time of execution. In a dynamic situation, actions must be committed before their ultimate consequences can be known via detailed planning <ref> [1] </ref>. The amount of planning before each move is limited by the resources available and by the changes that occur in the environment. The problem of response-time constraints in a dynamic world is an important problem and has many applications in AI, robotics, computer networks and other areas. <p> C e is calculated by adding the actual length of the current path to the estimated distance between the current node and the goal node. To explain the advantage of the tradeoff between planning and execution cost, consider RTA* as an example of a real-time search algorithm. RTA* <ref> [1] </ref> uses a fixed look-ahead, specifying a static bound for the look-ahead search. When this look-ahead bound is reached, RTA* stops the look-ahead search regardless of the quality of the solution found and regardless of the amount of search done. <p> It also is able to get out of local minima and graph cycles. This is done by penalizing cyclic and dead-end paths, and by leaving the h value of the second-best path at each decision point <ref> [1] </ref>. The following example demonstrates how DYNORAII solves the routing problem in a cyclic graph. Example: Consider the routing problem on the graph shown in Figure 2. The x and y coordinates of the nodes are listed below. <p> As each successor node is created, its estimated distance from the goal (i.e. h), the cost from the current node (i.e. g), and the sum of h and g (i.e. f) are calculated. The euclidean distance formula is used to calculate the heuristic values. This heuristic formula is monotonic <ref> [1] </ref> and is guaranteed to produce optimal solutions in A*. In the case of RTA*, this heuristic formula allows substantial pruning of the frontier nodes without loss of valuable information in reaching a partial solution. <p> This is achieved by penalizing cyclic and dead-end paths, and by leaving the h value of the second best path at each decision point <ref> [1] </ref>. 5. Observation In this section, we present the results of experiments that compare the performance of DYNORAII and RTA* in minimizing total response times in both static and dynamic environments.
Reference: 2. <author> L. P. Kaelbling, </author> <title> An Architecture for Intelligent Reactive System, Reasoning about actions and plans: </title> <booktitle> Proc. 1986 Workshop, </booktitle> <pages> pp. </pages> <publisher> 395-410 Morgan Kauffman, </publisher> <year> (1987). </year>
Reference: 3. <author> R. A. Brooks, </author> <title> A Robust Layered Control System for a Mobile Robot, </title> <journal> IEEE Journal of Robotics and Automation RA-2(1) pp. </journal> <month> 14-23 (March, </month> <year> 1986). </year>
Reference: 4. <author> J. Firby, </author> <title> An Investigation into Reactive Planning in Complex Domains, </title> <booktitle> Proceedings of AAAI-87, </booktitle> <pages> pp. </pages> <month> 202-206 (July </month> <year> 1987). </year>
Reference: 5. <author> M. P. Georgeff and A. L. Lansky, </author> <title> Reactive Reasoning and Planning, </title> <booktitle> Proceedings of AAAI-87, </booktitle> <pages> pp. </pages> <month> 677-682 (July </month> <year> 1987). </year>
Reference: 6. <author> P. Agre and D. Champman, Pengi: </author> <title> A Theory of Activity, </title> <booktitle> Proceedings of AAAI-87, </booktitle> <month> (July </month> <year> 1987). </year>
Reference: 7. <author> R. Reiter, </author> <title> Nonmonotonic Reasoning, Exploring artificial intelligence ( Ed. </title> <editor> H. Shrobe), </editor> <publisher> Morgan Kauffman, </publisher> <year> (1988). </year>
Reference-contexts: The on-line situations are those in which the world changes rapidly and unexpectedly during planning. Events in these situations necessitate major revision of solutions during planning. An AI system may use reactive components [ 2 , 3 , 4 , 5 , 6 , ] and non-monotonic reasoning <ref> [7] </ref> to cope with the changes. Response-time constraint problems can further be divided into two classes: deadlines and optimal response times. Deadline situations allow only a certain amount of time for the system to plan a solution; these deadlines may be fixed or they may vary from case to case.
Reference: 8. <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability, </title> <publisher> W.H.Freeman and Company, </publisher> <address> New York (1979). </address>
Reference-contexts: Deadline situations allow only a certain amount of time for the system to plan a solution; these deadlines may be fixed or they may vary from case to case. Finding an optimal solution within arbitrary deadlines is hard and is often NP-complete <ref> [8] </ref>. Anytime algorithms [ 9 , 10 , ] formalize characteristics of a class of algorithms which are capable of handling variable deadlines. Another class of response-time constraint problems impose optimality constraints on the total response-time of the system. <p> T (x,n) is the time complexity of the n instances of class x, and f (x) is the population distribution function over classes. - 14 - Average-case complexity is different from the traditional worst-case time complexity notion <ref> [8] </ref>. Since the path planning algorithm in the real world is faced with many different instances of the problem, average-case complexity provides a more representative measure of performance. There are two techniques used to derive average-case complexity of an algorithm: analytic and sampling.
Reference: 9. <author> T. Dean and M. Boddy, </author> <title> An Analysis of Time Dependent Planning, </title> <booktitle> Proc. AAAI, </booktitle> <pages> pp. </pages> <month> 49-54 </month> <year> (1988). </year>
Reference-contexts: The world will have changed by the time a plan is generated, making the plan obsolete at the time of execution. Anytime algorithms characterize the requirements of decision procedures capable of meeting deadline constraints on planning time <ref> [9] </ref>. The utility of solutions planned via these algorithms increases over time. These algorithms can be terminated at any time and will return some answer at the time of termination. The answer that is returned improves if more time is available for planning.
Reference: 10. <author> T. Dean and G. Siege, </author> <title> An approach to reasoning about continuous change for applications in planning, </title> <booktitle> Proc. AAAI, </booktitle> <pages> pp. </pages> <month> 132-137 </month> <year> (1990). </year> <month> - 17 </month> - 
Reference: 11. <author> S. Shekhar and S. Dutta, </author> <title> Minimizing Response Times In Real Time Planning And Search, </title> <booktitle> Proceedings of 11th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 238-242 IJCAI, </pages> <year> (1989). </year>
Reference-contexts: The optimal response-time is not achieved by planning for optimal solutions, since planning for such solutions may incur large planning costs. A trade-off between planning time and solution quality may be used to optimize the total response-time <ref> [11] </ref>. The order of names is alphabetical and has no other significance. - 2 - The issue of response-time constraints is orthogonal to the issues of dynamic situations and on-line situations. Algorithms designed to meet constraints on response-time may fail to do so under dynamic situations. <p> DYNORAII works in cycles of partial planning followed by execution. Each cycle allows partial planning terminated by a stopping criterion, which balances planning cost with the quality of the solution. The stopping criterion has been shown to achieve near optimal response-time <ref> [11] </ref>. The paradigm of partial planning followed by execution addresses the issue of a dynamic world. We have used DYNORAII for a real-time path planning application in a static world, as well as in a dynamic world model. <p> A greedy approach is used to order the multiple evaluation functions. Negative local benefit from a step of planning terminates the search in that direction. The algorithm may be terminated at any time and it will produce a solution at that time. NORA <ref> [11] </ref> is another example of an anytime algorithm. It uses hierarchical planning to improve the solution at hand via the set of semantic information for database query planning. Given a longer time, the solution quality improves.
Reference: 12. <author> P. E. Hart, N. J. Nilsson, and B. Raphael, </author> <title> A Formal Basis For the Heuristic Determination of Minimum Cost Paths, </title> <journal> IEEE Transactions on Systems Science and Cybernetics SSC-4(2) pp. </journal> <month> 100-107 </month> <year> (1968). </year>
Reference-contexts: Most real-world applications of search and planning, however, face very large search spaces and often constraints on response time. Classical search algorithms, such as A* <ref> [12] </ref> and IDA* [13] which guarantee optimal solutions in terms of execution times (shortest path from start node to goal node), do not guarantee meeting any constraints on response time.
Reference: 13. <author> R. E. Korf, </author> <title> Depth-First Iterative Deepening : An Optimal Admissible Tree Search, </title> <journal> Artificial Intelligence 27 pp. </journal> <pages> 97-109 North-Holland, </pages> <year> (1985). </year>
Reference-contexts: Most real-world applications of search and planning, however, face very large search spaces and often constraints on response time. Classical search algorithms, such as A* [12] and IDA* <ref> [13] </ref> which guarantee optimal solutions in terms of execution times (shortest path from start node to goal node), do not guarantee meeting any constraints on response time.
Reference: 14. <author> S. Russell and E. H. Wefald, </author> <title> Decision Theoretic Control of Reasoning: General Theory and an Algorithm to Game Playing, </title> <note> Report No. UCB/CSD 88/435, p. </note> <institution> Computer Science Division, </institution> <month> U.C.Berkeley </month> <year> (1988). </year>
Reference-contexts: These algorithms can be terminated at any time and will return some answer at the time of termination. The answer that is returned improves if more time is available for planning. These algorithms lend themselves to preemptive scheduling characteristic of the deadline constraints on response time. The Meta-Greedy algorithm <ref> [14] </ref> is an anytime algorithm, which uses a sequence of evaluation functions to evaluate the promise of a node during search. A greedy approach is used to order the multiple evaluation functions. Negative local benefit from a step of planning terminates the search in that direction. <p> It is difficult to compare the alternative algorithms in terms of their performance and in terms of the difficulty of formulating such algorithms for specific real world applications. Determining the next move in board games is often used as a benchmark application with which to evaluate the algorithms <ref> [14] </ref>, but board games do not share many characteristics of real-time applications. For example, the execution cost of a move in a board game is negligible compared to the planning cost. A trivial solution for making the next move can be found with negligible planning.
Reference: 15. <author> E. J. Horvitz, G. F. Cooper, and D. E. Heckerman, </author> <title> Reflection and Action Under Scarce Resources: Theoretical Principles and Empirical Study, </title> <booktitle> Proceedings of 11th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 1121-1127 IJCAI, </pages> <year> (1989). </year>
Reference-contexts: NORA terminates planning at a point where the total response time (sum of planning time and estimated execution time of the planned solution) is optimal. - 3 - A framework to address the more general problem of resource constraints may be built around utility theory <ref> [15] </ref>. This model calculates the utility and disutility of certain meta-level actions. It then uses these values to reason about continuing to plan or proceeding with an action. The utility values and the probability distributions are learned through experience.
Reference: 16. <author> R. E. Korf, </author> <title> Real-Time Heuristic Search, </title> <journal> Artificial Intelligence Journal 42(2-3) pp. </journal> <month> 197-221 </month> <year> (1990). </year>
Reference: 17. <author> R.E. Korf, </author> <title> RealTime Heuristic Search New Results, </title> <booktitle> Proc. AAAI Conference, </booktitle> <year> (1988). </year>
Reference: 18. <author> C. E. Shannon, </author> <title> Programming a Computer For Playing Chess, </title> <journal> Philosophical Magazine 41 pp. </journal> <month> 256-275 </month> <year> (1950). </year>
Reference-contexts: Planning time is limited by the frequency of changes in the world. The agent executes a partial plan without exploring all the consequences of this commitment. RTA* uses a variation of minmax search <ref> [18] </ref> called minmin look-ahead search for partial planning. Minmin search looks forward from the current state to a fixed depth horizon and applies the heuristic evaluation function (f=g+h) of A* to the nodes at the depth frontier. The best f value is then sent back to the current node.
Reference: 19. <author> B. Hamidzadeh and S. Shekhar, </author> <title> Evaluation of Real-Time Search Algorithms in Dynamic Worlds (Summary of Results) , To Appear in Proc. </title> <booktitle> of IEEE Conference on Tools for Artificial Intelligence Conference , (1992). </booktitle>
Reference-contexts: It is now easy to observe that if the costs of edges Sa and bc keep increasing by 3 each time, DYNORAII will oscillate between nodes b and S forever, without ever reaching the goal via node a. g We have shown <ref> [19] </ref> DYNORAII to be probabilistically complete in a bounded Markov model of dynamic world explained in a later section. - 8 - 4. Experimental Evaluation 4.1. Methodology We are using the methodology of controlled, synthetic-application-based performance comparison. <p> In the proposed Markov process, the cost of edges are normally distributed over time, with the mean at the initial cost of the edge. To perform well in this model of dynamic world, an algorithm does not have to react to rapid changes <ref> [19] </ref>. This model causes slow changes in the cost of an edge which allows a planning algorithm to reflect upon alternative actions over a reasonable period of time.
Reference: 20. <author> J. C. Pemberton and R. E. Korf, </author> <title> RealTime Heuristic Search First Results, </title> <booktitle> Proceedings of the First International Conference on AI Planning Systems , pp. </booktitle> <month> 179-188 </month> <year> (1992). </year>
Reference: 21. <author> A. Aleliunas, R. M. Karp, R. J. Lipton, L. Lovasz, and C. Rackott, </author> <title> Random walks, universal traversal sequences and the complexity of maze problems, </title> <booktitle> 20th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. </pages> <month> 218-223 </month> <year> (1979). </year>
Reference-contexts: C e 91.78 82.63 10.0 C p Std.Dev. 97.68 31.22 68.03 (C p +C e ) Std.Dev. 139.96 93.61 33.11 6.1. Average-Case Complexity Estimation The experiments and performance analyses can be understood in terms of average-case time complexity analysis of real-time path planning algorithms. Average-case time complexity <ref> [21] </ref> of an algorithm represents the dependence of statistical average of the time taken by the algorithm over all possible instances on problem size, n.
Reference: 22. <author> B. Bollobas, </author> <title> Random Graphs, </title> <publisher> Academic Press (1985). </publisher>
Reference-contexts: Every node in N, in this case, is likely to be connected to dd n other nodes, hence every node is likely to have path-length 2 to all other nodes. Some of these observations can be formally proved using random graph theory <ref> [22] </ref>, as shown later. We choose b such that infeasible problem instances, as well as problem instances with trivial solutions are avoided. Hence, our results are valid for average-case complexity over interesting classes of path planning problems of size 10, 20 and 30. <p> Using this interpretation, each random graph in our simulator can be denoted as G (n,b) with vertex set -0,...,n-1- and n (n-1)/2 edges, each existing with a probability b. It is known in random graph theory <ref> [22] </ref> that the choice of b influences the likelihood of the number of solution paths with certain lengths. For a path to exist between two vertices in a random graph, there must exist a major component in the graph. <p> A major component is a component that includes most of the nodes in the graph. Theorem 4: For a random graph G (n,b) to have a major component, the edge probability b has to be at least 1/n <ref> [22] </ref>. - 15 - Theorem 5: In a graph with b=1/ dd n paths of length two are likely to exist [22]. In addition to the above theorems, we know that fewer missing edges imply shorter path lengths. <p> Theorem 4: For a random graph G (n,b) to have a major component, the edge probability b has to be at least 1/n <ref> [22] </ref>. - 15 - Theorem 5: In a graph with b=1/ dd n paths of length two are likely to exist [22]. In addition to the above theorems, we know that fewer missing edges imply shorter path lengths. Therefore, in order to ensure paths of length two or larger, we must have edge probability that is lower than 1/ dd n .
References-found: 22

