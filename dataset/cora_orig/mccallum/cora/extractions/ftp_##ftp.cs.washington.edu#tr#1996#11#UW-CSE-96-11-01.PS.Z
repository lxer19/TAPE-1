URL: ftp://ftp.cs.washington.edu/tr/1996/11/UW-CSE-96-11-01.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: A User-Level Unix Server for the SPIN Operating System  
Author: David Dion 
Date: October 24, 1996  
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: An operating system that emulates Unix supports a wide range of popular applications. This paper describes the SPIN Unix Server, an implementation of Unix for the SPIN operating system. The SPIN Unix Server is a user-level application program supported by extensions that are dynamically linked into the SPIN kernel. It exports a traditional Unix system interface and provides backwards compatibility to Unix applications. In addition, applications can dynamically customize the Unix interface to optimize the performance of critical services. SPIN and the SPIN Unix Server are implemented on DEC Alpha workstations.
Abstract-found: 1
Intro-found: 1
Reference: [Bershad et al. 95] <author> Bershad, B. N., Savage, S., Pardyak, P., Sirer, E. G., Fiuczynski, M., Becker, D., Eggers, S., and Chambers, C. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: However, kernel extensions are historically trusted entities. Although the kernel extension is protected from the application, the kernel is not protected from the kernel extension. Emulation in the SPIN operating system has the advantages of these approaches without the disadvantages. SPIN <ref> [Bershad et al. 95] </ref> is an operating system which can be safely and dynamically specialized to the needs of applications via untrusted kernel extensions. Extensions are linked directly into the kernel address space, where they may access system resources and services with low latency.
Reference: [Bricker et al. 91] <author> Bricker, A., Gien, M., Guillemont, M., Lipkis, J., Orr, D., and Rozier, M. </author> <title> A New Look at Micro-kernel-based UNIX Operating Systems: Lessons in Performance and Compatibility. </title> <booktitle> In Proceedings of the EurOpen Spring'91 Conference, </booktitle> <address> Tromsoe, Norway, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: User-level servers in separate address spaces [Golub et al. 90] protect emulators from applications. Unfortunately, the client/server model requires frequent context switching and transfer of data across address space boundaries, resulting in poor performance. Emulations through kernel extensions <ref> [Bricker et al. 91] </ref> achieve performance comparable to libraries, and the emulation state is protected from applications. However, kernel extensions are historically trusted entities. Although the kernel extension is protected from the application, the kernel is not protected from the kernel extension. <p> The Unix emulation library resides in the application's address space where it can be corrupted just as the Mach emulation library. In addition, since all Unix applications must be dynamically linked against the Spring Unix emulation library, Spring does not offer binary compatibility. In the CHORUS system <ref> [Bricker et al. 91] </ref>, Unix is emulated by a collection of independent servers, each providing a different aspect of the Unix semantics. One central server is responsible for intercepting system call traps and delegating responsibility for executing system calls via CHORUS IPC.
Reference: [Custer 93] <author> Custer, H. </author> <title> Inside Windows NT. </title> <publisher> Microsoft Press, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction An important factor in the acceptance of a new operating system is the range of applications it supports. For instance, a top priority in the design of Windows NT was to run all existing Windows and MS-DOS programs <ref> [Custer 93] </ref>. Although research operating systems rarely demand backwards compatibility with commercial applications, they still benefit from exporting a well-known, widely available programming interface. This paper describes the SPIN Unix Server, an implementation of Unix for the SPIN Operating System. The SPIN Unix Server is an architecture for Unix emulation.
Reference: [Golub et al. 90] <author> Golub, D., Dean, R., Forin, A., and Rashid, R. </author> <title> Unix as an Application Program. </title> <booktitle> In Proceedings of the 1990 Summer USENIX Conference, </booktitle> <pages> pages 87-95, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: While SPIN supports client applications through the Unix server, the server runs on SPIN by means of a separate emulation. The SPIN Unix Server was actually developed for the Mach 3.0 microkernel <ref> [Golub et al. 90] </ref>. It has been ported to SPIN using a Mach emulation layer dynamically embedded into the kernel. Hence, SPIN emulates Unix in the context of an emulation of Mach. This paper focuses on the implementation of the SPIN Unix Server architecture. <p> However, libraries are inherently unsafe from applications. Errant or malicious applications can corrupt library data, causing unpredictable failures or even breakdowns in system security. User-level servers in separate address spaces <ref> [Golub et al. 90] </ref> protect emulators from applications. Unfortunately, the client/server model requires frequent context switching and transfer of data across address space boundaries, resulting in poor performance. Emulations through kernel extensions [Bricker et al. 91] achieve performance comparable to libraries, and the emulation state is protected from applications. <p> Aggressive copying is correct as long as sharing is not involved, but it suffers severely z With Mach IPC removed, this call has the same functionality as device write () but with slightly different parameters. x A Mach task is an execution environment and the basic unit of resource allocation <ref> [Golub et al. 90] </ref>. 8 in performance. Accordingly, as the demand on task and virtual memory support grows, it is becoming apparent that side-stepping these Mach optimizations is more costly and complex than implementing them. <p> same as measured between two machines running Digital Unix. flfl In-kernel networking services can refer to native services or other dynamically linked extensions. 12 with a shortcircuit (dashed line). 6 Related Work The Unix emulation described in this paper is derived largely from the implementation of Unix on Mach 3.0 <ref> [Golub et al. 90] </ref>. The Mach Unix emulation centers around the BSD4.3 Single Server, a user-level application which exports Unix semantics. Client applications communicate with the BSD4.3 Single Server via an emulation library loaded into the address space of each Unix program. <p> This implies that applications may not dynamically link customized servers into the kernel, as applications may do in SPIN. 6.1 Evolution of the SPIN Unix Server The SPIN Unix Server is a derivative of the BSD4.3 Single Server for the Mach 3.0 microker-nel <ref> [Golub et al. 90] </ref>. The Single Server communicated with applications through trap redirection, Mach IPC, and a task emulation library. Each Unix application had a library loaded directly into its address space. When applications made system calls, the system call traps were redirected into this emulation library.
Reference: [Khalidi & Nelson 92] <author> Khalidi, Y. A. and Nelson, M. N. </author> <title> An Implementation of Unix on an Object-oriented Operating System. </title> <note> USENIX 1992. Reprinted with permission. </note>
Reference-contexts: As extensibility has evolved into an important trend in operating system design, Unix functionality has been separated from the kernel and spread among libraries, server applications, and kernel extensions. Library emulations <ref> [Khalidi & Nelson 92] </ref> generally have excellent performance (provided calls to native system services can be minimized), since system calls can be reduced to local procedure calls. However, libraries are inherently unsafe from applications. <p> The emulation library is loaded directly into an application's address space, which means that an errant application can corrupt emulation data and cause unpredictable behavior. Also, Mach 3.0 offers no mechanism for applications to define a shortcircuit for calls to the server. The Spring <ref> [Khalidi & Nelson 92] </ref> Unix emulation increases the functionality of the dynamically linked library. The Spring Unix emulation library replaces the dynamically linked libc. Besides providing the traditional services of libc, it contains specialized system call stubs.
Reference: [Loepere 92] <author> Loepere, K., </author> <title> Editor Mach 3 Kernel Interfaces Open Software Foundation and Carnegie Mellon University, </title> <year> 1992. </year>
Reference-contexts: For the purposes of this discussion y the most significant modification is the removal of Mach IPC. All Mach messages have been converted to system call traps. The Mach microkernel system call interface <ref> [Loepere 92] </ref> is considerably different than the Unix system call interface. In general, Mach system calls request lower-level services than Unix system calls.
Reference: [Maeda & Bershad 93] <author> Maeda, C. and Bershad, B. N. </author> <title> Protocol Service Decomposition for High-Performance Networking. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 244-255, </pages> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: The flexibility of SPIN allows application-specific optimizations to be integrated with an existing emulation. Hence, developers can identify critical execution paths and streamline them with kernel extensions. This approach is similar to protocol decomposition work by Maeda <ref> [Maeda & Bershad 93] </ref>, in which critical send and receive services of a protocol migrate into the application once a communication endpoint has been established. However, moving services from the kernel into the application address space provoke some of the same problems encountered with the library-based emulations.
Reference: [Nelson 91] <author> Nelson, G, </author> <title> editor. Systems Programming in Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Extensions are linked directly into the kernel address space, where they may access system resources and services with low latency. Protection in SPIN is based on restricted dynamic linking and the type-safety of Modula-3 <ref> [Nelson 91] </ref>, the programming language in which SPIN and its extensions are written. An emulation constructed from SPIN extensions harnesses the safety, flexibility, and performance of the SPIN extension architecture. Emulation extensions execute in the kernel address space, isolating them from corruption from applications. <p> They are not hindered by costly protection mechanisms, such as address space switches, in their interaction with the kernel. Instead, SPIN relies on language features for protection. SPIN and its extensions are written in the safe subset of Modula-3 <ref> [Nelson 91] </ref>, a type-safe programming language. Using language features for protection allows much of the protection overhead to be incurred at compile-time and link-time. The SPIN extension mechanism has two parts: installation and invocation.
Reference: [Ousterhout et al. 88] <author> Ousterhout, J. K., Cherenson, A. R., Douglis, F., Nelson, M. N., and Welch, B. B. </author> <title> The Sprite Network Operating System. </title> <booktitle> In IEEE Computer, </booktitle> <month> February </month> <year> 1988, </year> <month> pp.23-35. </month>
Reference-contexts: system target three main goals: * extensibility: can the emulation be modified without rebooting or rebuilding the system? * performance: do applications perform on the emulation comparably to on a native system? * safety: can the emulation damage the system, or can an application corrupt the emulation? Some earlier systems <ref> [Ousterhout et al. 88, Rashid et al. 89] </ref> export a Unix programming interface directly from the kernel. Systems which adopt this approach typically achieve the performance and protection of a traditional monolithic system, but sacrifice flexibility.
Reference: [Pardyak & Bershad 96] <author> Pardyak, P. and Bershad, B. </author> <title> Dynamic Binding for Extensible Systems. </title> <booktitle> To appear in Proceedings of the Second Symposium on Operating Systems Design and Implementations, </booktitle> <address> Seattle, WA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Dynamically linked extensions execute just as statically linked kernel code. They may access data and call procedures in any visible kernel interface (i.e. an interface successfully linked against). fl A Unix emulation of this type is currently under development. 3 3.2 Invocation Invocation is controlled by the SPIN dispatcher <ref> [Pardyak & Bershad 96] </ref>. The dispatcher communicates events to event handlers. An event is an announcement of or a request for a change in system state. An event handler is a procedure which acts in response to an event.
Reference: [Patience 93] <author> Patience, S. </author> <title> Redirecting Systems Calls in Mach 3.0, An Alternative to the Emulator. </title> <booktitle> In Proceedings of the Third USENIX Mach Symposium, </booktitle> <pages> pages 57-73, </pages> <address> Santa Fe, NM, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: These included networking and file system improvements, better support for multi-threading, and character device enhancements. The most significant modification with respect to the SPIN Unix Server was the removal of the emulation library. System call traps are now reflected directly into the server task <ref> [Patience 93] </ref>. Modifications to the server continued at the University of Washington. Changes were geared toward improving stability and facilitating the port to the SPIN kernel. All Mach IPC was removed from the server. Kernel calls that were formerly implemented with Mach messages were transformed into system calls.
Reference: [Rashid et al. 89] <author> Rashid, R., Baron, R., Forin, R., Golub, D., Jones, M., Julin, D., Orr, D., Sanzi, R. </author> <title> Mach: </title> <booktitle> A Foundation for Open Systems In Proceedings of the Second IEEE Workshop on Workstation Operating Systems, </booktitle> <month> September </month> <year> 1989. </year>
Reference-contexts: system target three main goals: * extensibility: can the emulation be modified without rebooting or rebuilding the system? * performance: do applications perform on the emulation comparably to on a native system? * safety: can the emulation damage the system, or can an application corrupt the emulation? Some earlier systems <ref> [Ousterhout et al. 88, Rashid et al. 89] </ref> export a Unix programming interface directly from the kernel. Systems which adopt this approach typically achieve the performance and protection of a traditional monolithic system, but sacrifice flexibility.
Reference: [Sirer et al. 96] <author> Sirer, E., Fiuczynski, M., Pardyak, P., and Bershad, B. </author> <title> Safe Dynamic Linking in an Extensible Operating System. </title> <booktitle> In Proceedings of the First Workshop on Compiler Support for Systems Software, </booktitle> <month> February </month> <year> 1996. </year> <month> 15 </month>
Reference-contexts: Invocation ensures that extension code is executed at appropriate times. Each service is based on flexibility, but includes mechanisms to dynamically protect the kernel. 3.1 Installation Installation is controlled by the dynamic linker <ref> [Sirer et al. 96] </ref>. The dynamic linker accepts extensions as partially resolved object code generated by a trusted Modula-3 compiler. Extensions must provide capabilities for interfaces they link against. Capabilities are requested in the Modula-3 build environment and, if granted, embedded into the downloaded extension.
References-found: 13

