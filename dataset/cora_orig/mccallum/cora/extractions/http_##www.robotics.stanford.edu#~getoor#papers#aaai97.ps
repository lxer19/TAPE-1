URL: http://www.robotics.stanford.edu/~getoor/papers/aaai97.ps
Refering-URL: http://www.robotics.stanford.edu/~getoor/papers.html
Root-URL: http://www.robotics.stanford.edu
Email: getoor@cs.stanford.edu  greger@csd.uu.se  fromherz@parc.xerox.com  bcarlson@parc.xerox.com  
Title: Effective Redundant Constraints for Online Scheduling  
Author: Lise Getoor Greger Ottosson Markus Fromherz Bjorn Carlson 
Address: Stanford, CA 94305-9010  Box 311, S-751 05 Uppsala, Sweden  3333 Coyote Hill Road Palo Alto, CA 94304  3333 Coyote Hill Road Palo Alto, CA 94304  
Affiliation: CS Dept Stanford University  CS Dept Uppsala University  Xerox PARC  Xerox PARC  
Abstract: The use of heuristics as a means to improve constraint solver performance has been researched widely. However, most work has been on problem-independent heuristics (e.g., variable and value ordering), and has focused on offline problems (e.g., one-shot constraint satisfaction). In this paper, we present an online scheduling problem for which we are developing a real-time scheduling algorithm. While we can and do use generic heuristics in the scheduler, here we focus on the use of domain-specific redundant constraints to effectively approximate optimal offline solutions. We present a taxonomy of redundant domain constraints, and examine their impact on the effectiveness of the scheduler. We also describe several techniques for generating redundant constraints, which can be applied to a large class of job shop scheduling problems.
Abstract-found: 1
Intro-found: 1
Reference: <author> Blazewicz, J.; Ecker, K.; Schmidt, G.; and Weglarz, J. </author> <year> 1993. </year> <title> Scheduling in Computer and Manufacturing Systems. </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Finding Redundant Constraints Scheduling reprographic machines as described above is related to the flow shop scheduling problem, where jobs consist of activities that can be executed on one or more resources, and the order of activities and jobs is given <ref> (Blazewicz et al. 1993) </ref>. Our problem differs in that there is usually a single resource per activity, there are no buffers between resources, and we allow for loops in the execution path.
Reference: <author> Carlsson, M. </author> <year> 1995. </year> <title> SICStus Prolog User's Manual. </title> <institution> Swedish Institute of Computer Science. </institution> <note> Release 3. </note>
Reference-contexts: For these results, we use naive variable and value ordering. These techniques are now commonly available in state-of-the-art constraint solvers (e.g., <ref> (Carlsson 1995) </ref>). To evaluate the impact of each class of constraints, we benchmark their performance on a set of 20 randomly generated documents. The length of the documents averages 20 sheets, and the requests come at intervals with 4 new sheets First Solution Optimal Solution Constraints Find Qual.
Reference: <author> Cheng, C., and Smith, S. </author> <year> 1995. </year> <title> Applying constraint satisfaction techniques to job shop scheduling. </title> <type> Technical Report CMU-R1-TR-95-03, </type> <institution> Robotics Institute, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference: <author> Crawford, J. M.; Ginsberg, M.; Luks, E.; and Roy, A. </author> <year> 1996. </year> <title> Symmetry breaking predicates for search problems. </title> <booktitle> In Proc. of KR'96, </booktitle> <pages> 148-159. </pages>
Reference-contexts: Most of this work has been on problem-independent heuristics (e.g., variable and value ordering) that make use of certain properties (e.g., constraint tightness) of the constraint network (Dechter & Meiri 1994; Johnston & Minton 1994; Cheng & Smith 1995). More recent work has focussed on the elimination of symmetries <ref> (Crawford et al. 1996) </ref>. We want to build on these improvements with the use of problem-specific heuristics, in particular redundant constraints.
Reference: <author> Dechter, A., and Dechter, R. </author> <year> 1987. </year> <title> Removing redundancies in constraint networks. </title> <booktitle> In Proc. of AAAI'87, </booktitle> <pages> 105-109. </pages>
Reference-contexts: More recent work has focussed on the elimination of symmetries (Crawford et al. 1996). We want to build on these improvements with the use of problem-specific heuristics, in particular redundant constraints. While most work on redundant constraints has focused on removing inconsistencies in offline CSPs (e.g., <ref> (Dechter & Dechter 1987) </ref>), we apply redundant constraints to remove sub-optimal solutions in an optimization problem. Here, we investigate how different classes of redundant constraints improve the performance of an online scheduling algorithm.
Reference: <author> Dechter, R., and Dechter, A. </author> <year> 1988. </year> <title> Belief maintenance in dynamic constraint networks. </title> <booktitle> In Proc. of AAAI'88, </booktitle> <pages> 37-42. </pages>
Reference-contexts: Generally, constraint programming (Van Hentenryck 1989) and the large body of experience with constraint-based scheduling (Zweben & Fox 1994) provide a well-suited foundation for online scheduling. Online scheduling is also a special case of dynamic scheduling and dynamic constraint satisfaction problems (CSPs) <ref> (Dechter & Dechter 1988) </ref>; however in the online case, constraints may be added, but are never removed. We investigate constraint-based online scheduling in the domain of reprographic machines (photo-copiers, printers, and fax machines).
Reference: <author> Dechter, R., and Meiri, I. </author> <year> 1994. </year> <title> Experimental evaluation of preprocessing algorithms for constraint satisfaction problems. </title> <booktitle> Artificial Intelligence 68 </booktitle> <pages> 211-241. </pages>
Reference: <author> Fromherz, M., and Carlson, B. </author> <year> 1994. </year> <title> Optimal incremental and anytime scheduling. </title> <editor> In Lim, P., and Jourdan, J., eds., </editor> <booktitle> Proc. Workshop on Constraint Languages/Systems and their Use in Problem Modeling at ILPS'94, </booktitle> <pages> 45-59. TR 94-38. </pages>
Reference-contexts: for a sheet does impact the scheduling decisions for sheets arbitrarily far away from it in the input; thus there is no simple greedy algorithm that is Document O sddd Naive S sf bf bf b Greedy S sfff bbb Optimal S fff sbbb guaranteed to find the optimal solution <ref> (Fromherz & Carl-son 1994) </ref>. However, scheduling for the basic machine is not NP-hard; there is a pseudo-polynomial time algorithm for finding the optimal schedule (Fromherz & Carlson 1994). <p> However, scheduling for the basic machine is not NP-hard; there is a pseudo-polynomial time algorithm for finding the optimal schedule <ref> (Fromherz & Carlson 1994) </ref>. Online Scheduling As mentioned, it is usually not possible to wait until the scheduler has received a complete job and generated a schedule for it. Instead, scheduling and schedule execution typically happen in parallel. <p> In the online context, it has been shown that a good strategy leading to overall optimal productivity for the type of machine shown above is full optimization with minimal commitment <ref> (Fromherz & Carlson 1994) </ref>: whenever the scheduler is interrupted, generate an optimal schedule for the job known at that time, but commit only to that part of the schedule that has to be returned for execution.
Reference: <author> Johnston, M., and Minton, S. </author> <year> 1994. </year> <title> Analyzing a heuristic strategy for constraint-satisfaction and scheduling. </title> <booktitle> In (Zweben & Fox 1994), </booktitle> <pages> 257-290. </pages>
Reference: <author> Lhomme, O. </author> <year> 1993. </year> <title> Consistency techniques for numeric CSPs. </title> <booktitle> In Proc. 13th International Joint Conference on Artificial Intelligence (IJCAI-93), </booktitle> <pages> 232-238. </pages>
Reference-contexts: For each interrupt, we initiate a restarting branch-and-bound search (Van Hentenryck 1989) for the known scheduling problem, in which we use straight-forward chronological backtracking to find incrementally better solutions. Constraint propagation is done in an algorithm reminiscent of a generalized AC-3, but maintaining interval consistency (also known as arc-B-consistency <ref> (Lhomme 1993) </ref>) rather than arc-consistency. We also make use of both job- and machine-independent search control heuristics in our experiments. Well-known examples are variable labeling in the order of constraint tightness, enumeration with domain splitting, and reuse of variable assignments in repeated searches (Van Hentenryck & Le Provost 1991).
Reference: <author> Schiex, T., and Verfaillie, G. </author> <year> 1993. </year> <title> No-good recording for static and dynamic constraint satisfaction problems. </title> <booktitle> In Proc. of the Fifth IEEE Int. Conf. on Tools with Artificial Intelligence. </booktitle>
Reference: <author> Van Hentenryck, P., and Le Provost, T. </author> <year> 1991. </year> <title> Incremental search in constraint logic programming. </title> <booktitle> New Generation Computing </booktitle> (9):257-275. 
Reference-contexts: We also make use of both job- and machine-independent search control heuristics in our experiments. Well-known examples are variable labeling in the order of constraint tightness, enumeration with domain splitting, and reuse of variable assignments in repeated searches <ref> (Van Hentenryck & Le Provost 1991) </ref>. For these results, we use naive variable and value ordering. These techniques are now commonly available in state-of-the-art constraint solvers (e.g., (Carlsson 1995)). To evaluate the impact of each class of constraints, we benchmark their performance on a set of 20 randomly generated documents.
Reference: <author> Van Hentenryck, P. </author> <year> 1989. </year> <title> Constraint Satisfaction in Logic Programming. </title> <booktitle> Logic Programming Series. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: In fact, job submission, scheduling and execution may all happen in parallel and at different speeds. Generally, constraint programming <ref> (Van Hentenryck 1989) </ref> and the large body of experience with constraint-based scheduling (Zweben & Fox 1994) provide a well-suited foundation for online scheduling. <p> For each interrupt, we initiate a restarting branch-and-bound search <ref> (Van Hentenryck 1989) </ref> for the known scheduling problem, in which we use straight-forward chronological backtracking to find incrementally better solutions. Constraint propagation is done in an algorithm reminiscent of a generalized AC-3, but maintaining interval consistency (also known as arc-B-consistency (Lhomme 1993)) rather than arc-consistency.
Reference: <author> Zweben, M., and Fox, M. S., eds. </author> <year> 1994. </year> <title> Intelligent Scheduling. </title> <address> San Francisco, Calif.: </address> <publisher> MK. </publisher>
Reference-contexts: In fact, job submission, scheduling and execution may all happen in parallel and at different speeds. Generally, constraint programming (Van Hentenryck 1989) and the large body of experience with constraint-based scheduling <ref> (Zweben & Fox 1994) </ref> provide a well-suited foundation for online scheduling. Online scheduling is also a special case of dynamic scheduling and dynamic constraint satisfaction problems (CSPs) (Dechter & Dechter 1988); however in the online case, constraints may be added, but are never removed.
References-found: 14

