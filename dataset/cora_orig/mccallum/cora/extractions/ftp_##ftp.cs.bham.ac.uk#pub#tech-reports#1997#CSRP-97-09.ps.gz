URL: ftp://ftp.cs.bham.ac.uk/pub/tech-reports/1997/CSRP-97-09.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Fitness Causes Bloat  
Author: W. B. Langdon and R. Poli 
Address: Birmingham B15 2TT, UK  
Affiliation: School of Computer Science, The University of Birmingham,  
Pubnum: Technical Report: CSRP-97-09  
Email: Email: fW.B.Langdon,R.Polig@cs.bham.ac.uk  
Phone: Tel: +44 (0) 121 414 4791, Fax: +44 (0) 121 414 4281  
Date: 24 February 1997  
Web: www: http://www.cs.bham.ac.uk/~wbl, ~rmp  
Abstract: The problem of evolving an artificial ant to follow the Santa Fe trail is used to demonstrate the well known genetic programming feature of growth in solution length. Known variously as "bloat", "redundancy", "introns", "fluff", "Structural Complexity" with antonyms "parsimony", "Minimum Description Length" (MDL) and "Occam's razor". Comparison with runs with and without fitness selection pressure shows the tendency for solutions to grow in size is caused by fitness based selection. We argue that such growth is inherent in using a fixed evaluation function with a discrete but variable length representation. Since with simple static evaluation search converges to mainly finding trial solutions with the same fitness as existing trial solutions. In general variable length allows many more long representations of a given solution than short ones of the same solution. Thus with an unbiased random search we expect longer representations to occur more often and so representation length tends to increase. I.e. fitness based selection leads to bloat.
Abstract-found: 1
Intro-found: 1
Reference: [ Altenberg, 1995 ] <author> Lee Altenberg. </author> <title> The Schema Theorem and Price's Theorem. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 23-49, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Means of 50 runs. In GP a program's length is inherited and so Equation 1 should hold. More formally Price's theorem applies (provided length and genetic operators are uncorrelated) since program length is a measurement function of the genotype <ref> [ Altenberg, 1995, page 28 ] </ref> . If it held exactly a plot of covariance and change in frequency would be a diagonal line. The plot in Figure 3 shows good agreement between theory and measurement until generation 20.
Reference: [ Angeline, 1994 ] <author> Peter John Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 4, </booktitle> <pages> pages 75-98. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: These can consume the bulk of the available machine resources and by "clogging up" the population may prevent GP from effectively searching for better programs. On the other hand <ref> [ Angeline, 1994, page 84 ] </ref> quotes results from fixed length GAs in favour of representations which include introns, to argue we should "not ... impede this emergent property [i.e. introns] as it may be crucial to the successful development of genetic programs".
Reference: [ Blickle and Thiele, 1994 ] <author> Tobias Blickle and Lothar Thiele. </author> <title> Genetic programming and redundancy. </title> <editor> In J. Hopf, editor, </editor> <booktitle> Genetic Algorithms within the Framework of Evolutionary Computation (Workshop at KI-94, Saarbrucken), </booktitle> <pages> pages 33-38, </pages> <address> Im Stadtwald, Building 44, D-66123 Saarbrucken, Germany, </address> <year> 1994. </year> <institution> Max-Planck-Institut fur Informatik (MPI-I-94-241). </institution>
Reference: [ Blickle, 1996 ] <author> Tobias Blickle. </author> <title> Theory of Evolutionary Algorithms and Application to System Synthesis. </title> <type> PhD thesis, </type> <institution> Swiss Federal Institute of Technology, </institution> <address> Zurich, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: The third method is to tailor the genetic operations. [ Sims, 1993, page 469 ] uses several mutation operators but adjusts their frequencies so a "decrease in complexity is slightly more probable than an increase". <ref> [ Blickle, 1996 ] </ref> suggests targeting genetic operations at redundant code. This is seldom used, perhaps due to the complexity of identifying redundant code. [ Soule et al., 1996 ] showed bloat continuing despite their targetted genetic operations. Possibly this was because of the difficulty of reliably detecting introns.
Reference: [ Gathercole and Ross, 1994 ] <author> Chris Gathercole and Peter Ross. </author> <title> Dynamic training subset selection for supervised learning in genetic programming. </title> <editor> In Yuval Davidor, Hans-Paul Schwefel, and Reinhard Manner, editors, </editor> <booktitle> Parallel Problem Solving from Nature III, </booktitle> <pages> pages 312-321, </pages> <address> Jerusalem, </address> <month> 9-14 October </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: In complex problems it may not be possible to test every solution on every aspect of the problem and some form of dynamic selection of test cases may be required <ref> [ Gathercole and Ross, 1994 ] </ref> . For example in some cases Co-evolution has been claimed to be beneficial to GP.
Reference: [ Gathercole and Ross, 1996 ] <author> Chris Gathercole and Peter Ross. </author> <title> An adverse interaction between crossover and restricted tree depth in genetic programming. </title> <editor> In John R. Koza, David E. Gold-berg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings 14 of the First Annual Conference, </booktitle> <pages> pages 291-296, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Firstly, and most widely used (e.g. in these experiments), is to place a universal upper bound either on tree depth [ Koza, 1992 ] or program length. ( <ref> [ Gathercole and Ross, 1996; Langdon and Poli, 1997 ] </ref> discuss unexpected problems with this approach).
Reference: [ Iba et al., 1994 ] <author> Hitoshi Iba, Hugo de Garis, and Taisuke Sato. </author> <title> Genetic programming using a minimum description length principle. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 12, </booktitle> <pages> pages 265-284. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: In GP this has become known as bloat. 3 The Artificial Ant Problem The artificial ant problem is described in <ref> [ Koza, 1992, pages 147-155 ] </ref> . Briefly the problem is to devise a program which can successfully navigate an artificial ant along a twisting trail on a square 32 fi 32 toroidal grid. <p> Termination: Maximum number of generations G = 50 a square containing food it eats it. The amount of food eaten is used as the fitness measure of the controlling program. 4 GP Parameters Our GP system was set up to be the same as given in <ref> [ Koza, 1992, pages 147-155 ] </ref> except the populations were allowed to continue to evolve even after an ant succeeded in traversing the whole trail, programs are restricted to a maximum length of 500 rather than to a maximum depth of 17, each crossover produces one child rather than two, tournament <p> On each version of the problem 50 independent runs were conducted. Note in these experiments we allow the evolved programs to be far bigger than required to solve the problem. For example the 100% correct solution given on <ref> [ Koza, 1992, page 154 ] </ref> takes about 543 time steps to traverse the Santa Fe trail but has a length of only 18 nodes and this is not the most compact solution possible. 5 Results 5.1 Standard Runs In 50 independent runs 6 found ants that could eat all the <p> However in practice we may not wish to operate the system continually. For example it may quickly find a satisfactory solutions or better performance may be achieved by cutting short its operation and running it repeatedly 12 with different starting configurations <ref> [ Koza, 1992, page 758 ] </ref> . In some data fitting problems growth in solution size may be indicative of "over fitting", i.e. better matching on the test data but at the expense of general performance. <p> Firstly, and most widely used (e.g. in these experiments), is to place a universal upper bound either on tree depth <ref> [ Koza, 1992 ] </ref> or program length. ( [ Gathercole and Ross, 1996; Langdon and Poli, 1997 ] discuss unexpected problems with this approach).
Reference: [ Koza, 1994 ] <author> John R. Koza. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge Massachusetts, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The details are given in Table 1, parameters not shown are as <ref> [ Koza, 1994, page 655 ] </ref> . On each version of the problem 50 independent runs were conducted. Note in these experiments we allow the evolved programs to be far bigger than required to solve the problem.
Reference: [ Langdon and Poli, 1997 ] <author> W. B. Langdon and R. Poli. </author> <title> Price's theorem and the MAX problem. </title> <type> Technical Report CSRP-97-4, </type> <institution> University of Birmingham, School of Computer Science, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: We have used it to help explain the evolution of the number of copies of functions and terminals in GP populations <ref> [ Langdon, 1996a; Langdon and Poli, 1997 ] </ref> . q = z In our GP the size of the population does not change so z = 1 and the expected number of children is given by the parent's rank so in large populations the expected change is approximately Cov (t (r=p) <p> Firstly, and most widely used (e.g. in these experiments), is to place a universal upper bound either on tree depth [ Koza, 1992 ] or program length. ( <ref> [ Gathercole and Ross, 1996; Langdon and Poli, 1997 ] </ref> discuss unexpected problems with this approach).
Reference: [ Langdon, 1995 ] <author> W. B. Langdon. </author> <title> Evolving data structures using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 295-302, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Langdon, 1996a ] <author> W. B. Langdon. </author> <title> Data Structures and Genetic Programming. </title> <type> PhD thesis, </type> <institution> University College, </institution> <address> London, </address> <month> 27 September </month> <year> 1996. </year>
Reference-contexts: In these circumstances, especially with a discreet fitness function, there is little chance of finding a representation that does better than the representation (s) from which it was created (cf. "death of crossover" <ref> [ Langdon, 1996a, page 222 ] </ref> ). So the selection bias favours representations which have the same fitness as those from which they were created. <p> We have used it to help explain the evolution of the number of copies of functions and terminals in GP populations <ref> [ Langdon, 1996a; Langdon and Poli, 1997 ] </ref> . q = z In our GP the size of the population does not change so z = 1 and the expected number of children is given by the parent's rank so in large populations the expected change is approximately Cov (t (r=p) <p> By the end of the run, no children are produced with a fitness greater than their parent. Similar behaviour has been reported on other problems [ Nordin et al., 1996 ] [ Rosca and Ballard, 1996b, page 183 ] <ref> [ Langdon, 1996a, Chapter 7 ] </ref> . 5.6 Non-Disruptive Crossover and Program Length In Section 2 we argued that there are more long programs with a given performance than short ones and so a random search for programs with a given level of performance is more likely to find long programs.
Reference: [ Langdon, 1996b ] <author> William B. Langdon. </author> <title> Data structures and genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 20, </booktitle> <pages> pages 395-414. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Multi-objective fitness measures where one objective is compact or fast programs have also been used <ref> [ Langdon, 1996b ] </ref> .
Reference: [ McPhee and Miller, 1995 ] <author> Nicholas Freitag McPhee and Justin Darwin Miller. </author> <title> Accurate replication in genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 303-309, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Such introns are said to protect the program containing them from crossover [ Blickle and Thiele, 1994; Blickle, 1996; Nordin et al., 1995; Nordin et al., 1996 ] . <ref> [ McPhee and Miller, 1995 ] </ref> presents an analysis of some simple GP problems designed to investigate bloat.
Reference: [ Nordin and Banzhaf, 1995 ] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Complexity compression and evolution. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 310-317, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kauf-mann. </publisher>
Reference: [ Nordin et al., 1995 ] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 6-22, </pages> <address> Tahoe City, California, USA, </address> <month> 9 July </month> <year> 1995. </year>
Reference: [ Nordin et al., 1996 ] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 6, </booktitle> <pages> pages 111-134. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: By the end of the run, no children are produced with a fitness greater than their parent. Similar behaviour has been reported on other problems <ref> [ Nordin et al., 1996 ] </ref> [ Rosca and Ballard, 1996b, page 183 ] [ Langdon, 1996a, Chapter 7 ] . 5.6 Non-Disruptive Crossover and Program Length In Section 2 we argued that there are more long programs with a given performance than short ones and so a random search for <p> By providing a "defence against crossover" <ref> [ Nordin et al., 1996, page 118 ] </ref> bloat causes the production of many programs of identical performance. These can consume the bulk of the available machine resources and by "clogging up" the population may prevent GP from effectively searching for better programs.
Reference: [ Price, 1970 ] <author> George R. Price. </author> <title> Selection and covariance. </title> <journal> Nature, </journal> <volume> 227, August 1 </volume> <pages> 520-521, </pages> <year> 1970. </year>
Reference-contexts: This random choice leads to random fluctuations in apparent program size which can be seen in Figure 2 after generation 27 despite averaging over 50 runs. 5.1.1 Price's Theorem Applied to Program Length Price's Covariance and Selection Theorem <ref> [ Price, 1970 ] </ref> from population genetics relates the change in frequency of a gene q in a population from one generation to the next, to the covariance of the gene's frequency in the original population with the number of offspring z produced by individuals in that population (see Equation 1).
Reference: [ Rosca and Ballard, 1996a ] <author> Justinian P. Rosca and Dana H. Ballard. </author> <title> Complexity drift in evolutionary computation with tree representations. </title> <type> Technical Report NRL5, </type> <institution> University of Rochester, Computer Science Department, Rochester, </institution> <address> NY, USA, </address> <month> December </month> <year> 1996. </year> <month> 15 </month>
Reference-contexts: This shows with some of their function sets longer programs can "replicate" more "accurately" when using crossover. <ref> [ Rosca and Ballard, 1996a ] </ref> provides a detailed anaysis of bloat using tree schemata specifically for GP. In this paper we advance a more general explanation which should apply generally to any discrete variable length representation and generally to any progressive search technique. <p> The second (also commonly used) is to incorporate program size directly into the fitness measure (often called parsimony pressure) [ Koza, 1992; Zhang and Muhlenbein, 1993; Iba et al., 1994 ] . <ref> [ Rosca and Ballard, 1996a ] </ref> give an analysis of the effect of parsimony pressure which varies linearly with program length. Multi-objective fitness measures where one objective is compact or fast programs have also been used [ Langdon, 1996b ] . <p> Possibly this was because of the difficulty of reliably detecting introns. I.e. there was a route whereby the GP could evolve junk code which masqueraded as being useful and thereby protected itself from removal. While <ref> [ Rosca and Ballard, 1996a ] </ref> propose a method where the likelihood of potentially disruptive genetic operations increases with parent size. 7 Conclusions We have generalised existing explanations for the widely observed growth in GP program size with successive generations (bloat) to give a simple statistical argument which should be generally
Reference: [ Rosca and Ballard, 1996b ] <author> Justinian P. Rosca and Dana H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9, </booktitle> <pages> pages 177-202. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: By the end of the run, no children are produced with a fitness greater than their parent. Similar behaviour has been reported on other problems [ Nordin et al., 1996 ] <ref> [ Rosca and Ballard, 1996b, page 183 ] </ref> [ Langdon, 1996a, Chapter 7 ] . 5.6 Non-Disruptive Crossover and Program Length In Section 2 we argued that there are more long programs with a given performance than short ones and so a random search for programs with a given level of
Reference: [ Sims, 1993 ] <author> K. Sims. </author> <title> Interactive evolution of equations for procedural models. </title> <journal> The Visual Computer, </journal> <volume> 9 </volume> <pages> 466-476, </pages> <year> 1993. </year>
Reference-contexts: Multi-objective fitness measures where one objective is compact or fast programs have also been used [ Langdon, 1996b ] . The third method is to tailor the genetic operations. <ref> [ Sims, 1993, page 469 ] </ref> uses several mutation operators but adjusts their frequencies so a "decrease in complexity is slightly more probable than an increase". [ Blickle, 1996 ] suggests targeting genetic operations at redundant code.
Reference: [ Soule et al., 1996 ] <author> Terence Soule, James A. Foster, and John Dickinson. </author> <title> Code growth in genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 215-223, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: This is seldom used, perhaps due to the complexity of identifying redundant code. <ref> [ Soule et al., 1996 ] </ref> showed bloat continuing despite their targetted genetic operations. Possibly this was because of the difficulty of reliably detecting introns. I.e. there was a route whereby the GP could evolve junk code which masqueraded as being useful and thereby protected itself from removal.
Reference: [ Tackett, 1993 ] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 303-309, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In some data fitting problems growth in solution size may be indicative of "over fitting", i.e. better matching on the test data but at the expense of general performance. For example <ref> [ Tackett, 1993, page 309 ] </ref> suggests "parsimony may be an important factor not for `aesthetic' reasons or ease of analysis, but because of a more direct relationship to fitness: there is a bound on the `appropriate size' of solution tree for a given problem".
Reference: [ Tackett, 1994 ] <author> Walter Alden Tackett. </author> <title> Recombination, Selection, and the Genetic Construction of Computer Programs. </title> <type> PhD thesis, </type> <institution> University of Southern California, Department of Electrical Engineering Systems, </institution> <year> 1994. </year>
Reference-contexts: If it is negative, then the GA will tend to reduce it in the next generation. For a given distribution of program lengths Equation 1 says the change in mean program length will be linearly related to the selection pressure. This provides some theoretical justification for <ref> [ Tackett, 1994, page 112 ] </ref> claim that "average growth in size ... is proportional to selection pressure". <p> Figure 4). Similarly program size statistics fluctuate but are essentially the same as those of the initial population (cf. Figure 5). This is in keeping with results with no selection reported in <ref> [ Tackett, 1994, page 112 ] </ref> . Given crossover produces random changes in length we might have expected the spread of lengths to gradually increase. This is not observed. The slow fall in maximum program size can be seen in Figure 5.
Reference: [ Tackett, 1995 ] <author> Walter Alden Tackett. </author> <title> Greedy recombination and genetic search on the space of computer programs. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 271-297, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Wu and Lindsay, 1996 ] <author> Annie S. Wu and Robert K. Lindsay. </author> <title> A survey of intron research in genetics. </title> <editor> In Hans-Michael Voigt, Werner Ebeling, Ingo Rechenberg, and Hans-Paul Schwefel, editors, </editor> <booktitle> Parallel Problem Solving From Nature IV. Proceedings of the International Conference on Evolutionary Computation, volume 1141 of LNCS, </booktitle> <pages> pages 101-110, </pages> <address> Berlin, Germany, 22-26 September 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The principle explanation advanced for bloat has been the growth of "introns" i.e. code which has no effect on the operation of the program which contains it. ( <ref> [ Wu and Lindsay, 1996 ] </ref> contains a survey of recent research in biology on the original wetware "introns").
Reference: [ Zhang and Muhlenbein, 1993 ] <author> Byoung-Tak Zhang and Heinz Muhlenbein. </author> <title> Evolving optimal neural networks using genetic algorithms with Occam's razor. </title> <journal> Complex Systems, </journal> <volume> 7 </volume> <pages> 199-220, </pages> <year> 1993. </year>
References-found: 27

