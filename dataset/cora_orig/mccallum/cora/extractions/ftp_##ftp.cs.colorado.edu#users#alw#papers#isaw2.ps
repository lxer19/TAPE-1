URL: ftp://ftp.cs.colorado.edu/users/alw/papers/isaw2.ps
Refering-URL: http://www.cs.colorado.edu/serl/arch/Papers.html
Root-URL: http://www.cs.colorado.edu
Email: djr@ics.uci.edu  alw@cs.colorado.edu  
Title: Software Testing at the Architectural Level  
Author: Debra J. Richardson Alexander L. Wolf 
Affiliation: Information and Computer Science University of California  Department of Computer Science University of Colorado  
Date: October 1996  
Address: San Francisco, California, USA,  Irvine, CA 92697-3425  Boulder, CO 80309-0430  
Note: From the Proc. of the Second Inter. Software Architecture Workshop,  
Abstract: This paper argues that with the advent of explicitly specified software architectures, testing can be done effectively at the architectural level. A software architecture specification provides a solid foundation for developing a plan for testing at this level. We propose several architecture-based test criteria based on the Chemical Abstract Machine model of software architecture. An architectural (integration) test plan, developed by applying selected of these criteria, can be used to assess the architecture itself or to test the implementation's conformance with the architecture. This facilitates detecting defects earlier in the software lifecycle, enables leveraging software testing costs across multiple systems developed from the same architecture, and also leverages the effort put into developing a software architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G.D. Abowd, R. Allen, and D. Garlan. </author> <title> Formalizing Style to Understand Descriptions of Software Architecture. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 4(4) </volume> <pages> 319-364, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: 1 Introduction A number of researchers have been experimenting with architecture definition languages and architecture description models <ref> [1, 2, 7] </ref>, which formally specify software architecture. A software architecture specification makes the analysis, design and construction of a complex system intellectually tractable by characterizing the system at a high level of abstraction.
Reference: [2] <author> R. Allen and D. Garlan. </author> <title> Formalizing Architectural Connection. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 71-80. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 Introduction A number of researchers have been experimenting with architecture definition languages and architecture description models <ref> [1, 2, 7] </ref>, which formally specify software architecture. A software architecture specification makes the analysis, design and construction of a complex system intellectually tractable by characterizing the system at a high level of abstraction.
Reference: [3] <author> G. Berry and G. Boudol. </author> <title> The Chemical Abstract Machine. </title> <journal> Theoretical Computer Science, </journal> <volume> 96 </volume> <pages> 217-248, </pages> <year> 1992. </year>
Reference-contexts: Based upon this framework, Inverardi and Wolf developed a model for operationally describing software architectures [8] based on viewing a software system as chemicals whose reactions are governed by rules. This metaphor was formulated as the Chemical Abstract Machine (CHAM) <ref> [3] </ref>. <p> Here, we review the CHAM model, limiting ourselves to those concepts directly required for this position paper. The interested reader is referred to [8] for more detail on the use of CHAM to model software architectures and to <ref> [3] </ref> for an even more complete description of the model. A Chemical Abstract Machine is specified by defining molecules m 1 ; m 2 ; : : : and solutions S 1 ; S 2 ; : : : of molecules.
Reference: [4] <author> J. Chang, D.J. Richardson, and S. Sankar. </author> <title> Structural Specification-based Testing with ADL. </title> <booktitle> In Proceedings of the 1996 International Symposium on Software Testing and Analysis (ISSTA '96), </booktitle> <pages> pages 62-70. </pages> <publisher> ACM SIG-SOFT, </publisher> <month> January </month> <year> 1996. </year>
Reference-contexts: Relationships between fault-based criteria have been analyzed as well [15]. More recently, structural criteria have been developed based on specifications (see, for example, <ref> [4] </ref>). These approaches blend functional and structural techniques in that the specification of a component's "function" is used to define the test data, yet the criteria define test data in terms of the syntax and semantics, or "structure", of the specification.
Reference: [5] <author> L.A. Clarke, A. Podgurski, D.J. Richardson, and S.J. Zeil. </author> <title> A Formal Evaluation of Data Flow Path Selection Criteria. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(11) </volume> <pages> 1318-1332, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Several unit-level, structural test criteria have been defined based on control flow, such as statement and branch coverage. In addition, numerous criteria have been defined based on relationships between control structures, such as data flow criteria (e.g., all-def and all-use coverage). Clarke et al. <ref> [5] </ref> compare several families of data flow criteria; each family forms a hierarchy reflecting the relative comprehensive coverage of the criteria. Podgurski and Clarke [13] consider more general dependence relationships between components.
Reference: [6] <author> D. Compare, P. Inverardi, and A.L. Wolf. </author> <title> Uncovering Architectural Mismatch in Dynamic Behavior. Available from the authors, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: For architecture specification, these sets would include a set D representing the data elements, a set P representing the processing elements, and a set C representing the connecting elements. See <ref> [6, 8] </ref> for examples of CHAM molecule syntaxes. 68 The transformation rules can be of two kinds: general laws that are valid for all CHAMs and specific rules defined for the particular CHAM being specified. Compare, Inver-ardi, and Wolf [6, 8] define several CHAM-specific rules. <p> See <ref> [6, 8] </ref> for examples of CHAM molecule syntaxes. 68 The transformation rules can be of two kinds: general laws that are valid for all CHAMs and specific rules defined for the particular CHAM being specified. Compare, Inver-ardi, and Wolf [6, 8] define several CHAM-specific rules. The Reaction Law is one general law. Other general laws are provided in [8]. The Reaction Law. An instance of the right-hand side of a rule can replace the corresponding instance of its left-hand side. <p> It may also be applied to evaluate the architecture itself, via either simulation or execution, to detect architectural problems revealed only by dynamic behavior. In another paper, Compare et al. <ref> [6] </ref> have also advocated a hybrid analysis strategy, combining algebraic and transition analysis, capable of detecting some architectural mismatch in dynamic behavior. Related work in architecture-based conformance testing has been done in conjunction with the RAPIDE architecture definition language [9].
Reference: [7] <author> D. Garlan and M. Shaw. </author> <title> An Introduction to Software Architecture. </title> <editor> In V. Ambriola and G. Tortora, editors, </editor> <booktitle> Advances in Software Engineering and Knowledge Engineering, </booktitle> <volume> volume 1. </volume> <publisher> World Scientific, </publisher> <address> New Jersey, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction A number of researchers have been experimenting with architecture definition languages and architecture description models <ref> [1, 2, 7] </ref>, which formally specify software architecture. A software architecture specification makes the analysis, design and construction of a complex system intellectually tractable by characterizing the system at a high level of abstraction.
Reference: [8] <author> P. Inverardi and A.L. Wolf. </author> <title> Formal Specification and Analysis of Software Architectures using the Chemical Abstract Machine Model. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 373-386, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Perry and Wolf developed a framework for architectural description [12] in which a software architecture specification consists of elements (processing, data and connecting elements) and form (relationships among the elements). Based upon this framework, Inverardi and Wolf developed a model for operationally describing software architectures <ref> [8] </ref> based on viewing a software system as chemicals whose reactions are governed by rules. This metaphor was formulated as the Chemical Abstract Machine (CHAM) [3]. <p> Here, we review the CHAM model, limiting ourselves to those concepts directly required for this position paper. The interested reader is referred to <ref> [8] </ref> for more detail on the use of CHAM to model software architectures and to [3] for an even more complete description of the model. <p> For architecture specification, these sets would include a set D representing the data elements, a set P representing the processing elements, and a set C representing the connecting elements. See <ref> [6, 8] </ref> for examples of CHAM molecule syntaxes. 68 The transformation rules can be of two kinds: general laws that are valid for all CHAMs and specific rules defined for the particular CHAM being specified. Compare, Inver-ardi, and Wolf [6, 8] define several CHAM-specific rules. <p> See <ref> [6, 8] </ref> for examples of CHAM molecule syntaxes. 68 The transformation rules can be of two kinds: general laws that are valid for all CHAMs and specific rules defined for the particular CHAM being specified. Compare, Inver-ardi, and Wolf [6, 8] define several CHAM-specific rules. The Reaction Law is one general law. Other general laws are provided in [8]. The Reaction Law. An instance of the right-hand side of a rule can replace the corresponding instance of its left-hand side. <p> Compare, Inver-ardi, and Wolf [6, 8] define several CHAM-specific rules. The Reaction Law is one general law. Other general laws are provided in <ref> [8] </ref>. The Reaction Law. An instance of the right-hand side of a rule can replace the corresponding instance of its left-hand side. <p> We intend also to investigate how typical architectural defects might be reflected in the CHAM model and define fault-based test criteria accordingly. Moreover, the CHAM model also supports constructs (the membrane and airlock) to define modularity in complex architectures <ref> [8] </ref>, for which we may also define test criteria. These criteria vary in their comprehensive coverage of the architecture. Further analysis and experimentation is required to determine the relative comprehensiveness of these criteria.
Reference: [9] <author> D.C. Luckham and J. Vera. </author> <title> An Event-based Architecture Definition Language. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(9) </volume> <pages> 717-734, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: In another paper, Compare et al. [6] have also advocated a hybrid analysis strategy, combining algebraic and transition analysis, capable of detecting some architectural mismatch in dynamic behavior. Related work in architecture-based conformance testing has been done in conjunction with the RAPIDE architecture definition language <ref> [9] </ref>. Our work has also been influenced by and is related to previous research in specification-based testing, Petri net testing, and protocol testing. We are formally defining the test criteria proposed here (as well as others) based on the CHAM model.
Reference: [10] <author> L.J. Morell. </author> <title> A Theory of Fault-based Testing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(8) </volume> <pages> 844-857, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Another structural approach is fault-based test criteria, which prescribe test data geared to detecting particular kinds of faults, the goal being to cover the likely fault types and demonstrate the absence of those faults <ref> [10, 14] </ref>. Relationships between fault-based criteria have been analyzed as well [15]. More recently, structural criteria have been developed based on specifications (see, for example, [4]).
Reference: [11] <author> O. O'Malley, D.J. Richardson, and L.K. Dillon. </author> <title> Efficient Specification-based Oracles for Critical Systems. </title> <booktitle> In Proceedings of the California Software Symposium. Irvine Research Unit in Software, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: This requires that a test oracle be developed, which is a mechanism for checking execution results and comparing them to expected results <ref> [11] </ref>. For a CHAM-defined architecture, such an oracle would be a trace of the expected solutions and their transformations.
Reference: [12] <author> D.E. Perry and A.L. Wolf. </author> <title> Foundations for the Study of Software Architecture. </title> <booktitle> SIGSOFT Software Engineering Notes, </booktitle> <volume> 17(4) </volume> <pages> 40-52, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Thus, the anticipated, widespread use of formal architecture specification will greatly facilitate testing dynamic component interaction and afford detecting architectural defects early in the development process. Perry and Wolf developed a framework for architectural description <ref> [12] </ref> in which a software architecture specification consists of elements (processing, data and connecting elements) and form (relationships among the elements). <p> It is these specification-based approaches that leads us to architecture-based test criteria. Just as an individual unit's implementation and specification consist of data, statements or assertions, and control, an architecture is similarly composed of data elements, processing elements, and connecting elements <ref> [12] </ref>. These elements, as well as the complex of relationships among the elements, should be exercised to adequately test the architecture. The CHAM for a software architecture defines molecules (elements), solutions (combinations of elements), and transformations between solutions, all of which should be exercised during testing at the architectural level.
Reference: [13] <author> A. Podgurski and L.A. Clarke. </author> <title> A Formal Model of Program Dependencies and its Implications for Software Testing, Debugging, and Maintenance. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(9) </volume> <pages> 965-979, </pages> <month> Septem-ber </month> <year> 1990. </year>
Reference-contexts: Clarke et al. [5] compare several families of data flow criteria; each family forms a hierarchy reflecting the relative comprehensive coverage of the criteria. Podgurski and Clarke <ref> [13] </ref> consider more general dependence relationships between components. This idea of developing a family of structural criteria based on relative coverage has also been extended to define test criteria for concurrency [16].
Reference: [14] <author> D.J. Richardson and M.C. Thompson. </author> <title> The RELAY Model of Error Detection and its Application. </title> <booktitle> In Proceedings of the Second Workshop on Software Testing, Analysis, and Verification (TAV2), </booktitle> <pages> pages 223-230. </pages> <booktitle> ACM SIGSOFT, </booktitle> <month> July </month> <year> 1988. </year>
Reference-contexts: Another structural approach is fault-based test criteria, which prescribe test data geared to detecting particular kinds of faults, the goal being to cover the likely fault types and demonstrate the absence of those faults <ref> [10, 14] </ref>. Relationships between fault-based criteria have been analyzed as well [15]. More recently, structural criteria have been developed based on specifications (see, for example, [4]).
Reference: [15] <author> D.J. Richardson and M.C. Thompson. </author> <title> An Analysis of Test Data Selection Criteria Using the RELAY Model of Fault Detection. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(6) </volume> <pages> 533-553, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Another structural approach is fault-based test criteria, which prescribe test data geared to detecting particular kinds of faults, the goal being to cover the likely fault types and demonstrate the absence of those faults [10, 14]. Relationships between fault-based criteria have been analyzed as well <ref> [15] </ref>. More recently, structural criteria have been developed based on specifications (see, for example, [4]).
Reference: [16] <author> R.N. Taylor, C.D. Kelly, and D.L. Levine. </author> <title> Structural Testing of Concurrent Programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(3) </volume> <pages> 206-215, </pages> <month> March </month> <year> 1992. </year> <month> 71 </month>
Reference-contexts: Podgurski and Clarke [13] consider more general dependence relationships between components. This idea of developing a family of structural criteria based on relative coverage has also been extended to define test criteria for concurrency <ref> [16] </ref>. Another structural approach is fault-based test criteria, which prescribe test data geared to detecting particular kinds of faults, the goal being to cover the likely fault types and demonstrate the absence of those faults [10, 14]. Relationships between fault-based criteria have been analyzed as well [15].
References-found: 16

