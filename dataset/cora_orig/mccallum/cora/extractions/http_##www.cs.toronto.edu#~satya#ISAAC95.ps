URL: http://www.cs.toronto.edu/~satya/ISAAC95.ps
Refering-URL: http://www.cs.toronto.edu/~satya/papers.html
Root-URL: 
Email: E-mail: satya@cs.uchicago.edu  E-mail: meena@imsc.ernet.in  E-mail: vinay@csa.iisc.ernet.in  
Phone: 2  3  
Title: Logspace Verifiers, NC, and NP (Extended Abstract)  
Author: Satyanarayana V. Lokam Meena Mahajan V Vinay ? S. A. 
Note: U.  
Address: Chicago, IL 60637,  C.I.T. Campus, Madras 600 113, India.  Bangalore 560 012, India.  
Affiliation: 1 Department of Computer Science, The University of Chicago  The Institute of Mathematical Sciences,  Department of Computer Science and Automation, Indian Institute of Science,  
Abstract: We explore the connection between public-coin interactive proof systems with logspace verifiers and N C using two different approaches. In the first approach, we describe an interactive proof system for accepting any language in N C after a logspace reduction, where the verifier is logspace-bounded and the protocol requires polylog time. These results are proved by describing N C computations as computations over arithmetic circuits using maximum and average gates, and then translating the arithmetic circuits into interactive proof systems in a natural way. In the second approach, we give a characterization of N C in terms of interactive proof systems where the verifier is logspace-bounded and runs in polylog time. The equivalent interactive proof systems work with error-correcting encodings of inputs, using the polylogarithmically checkable codes introduced in the context of transparent proofs. We also characterize N P and PSPACE via public-coin interactive proof systems where the verifier is logspace-bounded, but has restricted access to auxiliary storage.
Abstract-found: 1
Intro-found: 1
Reference: [Bab85] <author> L. Babai. </author> <title> Trading group theory for randomness. </title> <booktitle> In Proc. 17th STOC, </booktitle> <pages> pp 421-429, </pages> <year> 1985. </year>
Reference-contexts: This model was introduced in [GMR85], and independently, in [Bab85](see also [BM88]). In [GMR85], the coin tosses of the verifier are hidden from the prover (this is called the private coins model), whereas in <ref> [Bab85, BM88] </ref>, the coin tosses of the verifier are visible to the prover (this is called the public coins model). It was shown that for polynomial time verifiers both models have essentially the same computational power [GS86].
Reference: [BF93] <author> L. Babai and K. Friedl. </author> <title> On slightly superlinear transparent proofs. </title> <type> Tech--nical Report CS-93-13, </type> <institution> Department of Computer Science, University of Chicago, </institution> <year> 1993. </year>
Reference-contexts: Since a sublinear time verifier cannot even read the entire input, we supply the input in an error-correcting encoding, using the codes introduced in the context of transparent proofs [BFLS91] (see also <ref> [BF93] </ref>). Further, the encoding itself is still computable in N C and is probabilistically checkable in polylog time.
Reference: [BFLS91] <author> L. Babai, L. Fortnow, L.A. Levin, and M. Szegedy. </author> <title> Checking computations in polylogarithmic time. </title> <booktitle> In Proc. 23rd STOC, </booktitle> <pages> pp 21-31, </pages> <year> 1991. </year>
Reference-contexts: In Section 5, we characterize N C exactly via interactive proof systems of polylog time and logspace complexity. Since a sublinear time verifier cannot even read the entire input, we supply the input in an error-correcting encoding, using the codes introduced in the context of transparent proofs <ref> [BFLS91] </ref> (see also [BF93]). Further, the encoding itself is still computable in N C and is probabilistically checkable in polylog time. <p> Exploiting the fact that the verifier in our case has random access to encoded input, we can obtain arithmetizations of significantly smaller size. In our proofs, we use the polynomial extension encoding scheme of <ref> [BFLS91] </ref>. Details of the constructions and proofs will appear in the full version. Let L 2 ATISP (t (n); s (n)) and let M be an ATM accepting L. We assume that M is in a normal form, described in [FL93]. <p> We justify this requirement by the fact that such an encoding of the input instance can be done in N C. Furthermore, the verifier can probabilistically check in polylog time if what is presented to him is a valid encoding. Such an encoding scheme was utilized in <ref> [BFLS91] </ref> in the context of transparent proofs. This additional feature added to the earlier model of interactive proofs enables us to give an exact characterization of N C. <p> During its evaluation, the verifier needs the value of the extension ~x of x at a point (c 1 ; : : : ; c t ) 2 F t . He gets this value by appealing to the self-correction features of the encoding of x. From <ref> [BFLS91, Theorem 4.6] </ref>, we know that the verifier can get any such value in polylog (n) time per point. This is the key to making our verifier run in polylog (n) time. An analysis of the protocol (keeping in mind the reduced size of G x ) yields: Lemma 9. <p> Let * &gt; 0 be any constant. Then, in the protocol above, the verifier runs in time (t (n)s (n) log n) O (1=*) and in space O (s (n) log t (n)= log log n). Let fl : fl ! fl be the coding function given by <ref> [BFLS91, Theorem 4.6] </ref>. For a set S fl , let fl (S) be the set of codewords corresponding to strings in S. Using Lemma 9 and the properties of fl, we get, Theorem 10.
Reference: [BM88] <author> L. Babai and S. Moran. </author> <title> Arthur-Merlin games: a randomized proof system and a hierarchy of complexity classes. </title> <journal> J. Comp. Syst. Sci., </journal> <volume> 36 </volume> <pages> 254-276, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction An interactive proof system is a probabilistic game between an infinitely powerful prover and a randomized verifier. This model was introduced in [GMR85], and independently, in [Bab85](see also <ref> [BM88] </ref>). In [GMR85], the coin tosses of the verifier are hidden from the prover (this is called the private coins model), whereas in [Bab85, BM88], the coin tosses of the verifier are visible to the prover (this is called the public coins model). <p> This model was introduced in [GMR85], and independently, in [Bab85](see also [BM88]). In [GMR85], the coin tosses of the verifier are hidden from the prover (this is called the private coins model), whereas in <ref> [Bab85, BM88] </ref>, the coin tosses of the verifier are visible to the prover (this is called the public coins model). It was shown that for polynomial time verifiers both models have essentially the same computational power [GS86].
Reference: [CL88] <author> A. Condon and R. Ladner. </author> <title> Probabilistic game automata. </title> <journal> J. Comp. Syst. Sci., </journal> <volume> 36(3) </volume> <pages> 452-489, </pages> <year> 1988. </year>
Reference-contexts: Condon, Lip--ton, Ladner <ref> [CL88, CL89, Con91, CL92] </ref>, and Fortnow [For89, Ch.3], examined the power of logspace verifiers under many restrictions. In particular, it was shown [CL92] that with a logspace verifier, public coins can be strictly weaker than private coins, assuming P6= N P.
Reference: [CL89] <author> A. Condon and R. Lipton. </author> <title> On the complexity of space-bounded interactive proofs. </title> <booktitle> In Proc. 30th FOCS, </booktitle> <pages> pp 462-467, </pages> <year> 1989. </year>
Reference-contexts: Condon, Lip--ton, Ladner <ref> [CL88, CL89, Con91, CL92] </ref>, and Fortnow [For89, Ch.3], examined the power of logspace verifiers under many restrictions. In particular, it was shown [CL92] that with a logspace verifier, public coins can be strictly weaker than private coins, assuming P6= N P.
Reference: [CL92] <author> A. Condon and R. Ladner. </author> <title> Interactive proof systems with polynomially bounded strategies. </title> <booktitle> In Proc. 7th Conference on Structure in Complexity Theory, </booktitle> <pages> pp 282-294, </pages> <year> 1992. </year>
Reference-contexts: Condon, Lip--ton, Ladner <ref> [CL88, CL89, Con91, CL92] </ref>, and Fortnow [For89, Ch.3], examined the power of logspace verifiers under many restrictions. In particular, it was shown [CL92] that with a logspace verifier, public coins can be strictly weaker than private coins, assuming P6= N P. <p> Condon, Lip--ton, Ladner [CL88, CL89, Con91, CL92], and Fortnow [For89, Ch.3], examined the power of logspace verifiers under many restrictions. In particular, it was shown <ref> [CL92] </ref> that with a logspace verifier, public coins can be strictly weaker than private coins, assuming P6= N P. In this paper we extend some results of [For89, Ch.3], [FL93], and [CL92]. We study public-coin interactive proof systems with a space-bounded verifier. <p> In particular, it was shown <ref> [CL92] </ref> that with a logspace verifier, public coins can be strictly weaker than private coins, assuming P6= N P. In this paper we extend some results of [For89, Ch.3], [FL93], and [CL92]. We study public-coin interactive proof systems with a space-bounded verifier. In Section 2, we define unbounded fanin arithmetic circuits with gates computing maximum and average. We establish a correspondence between uniform families of such circuits and public-coin interactive proof systems. <p> Combining this with the reverse simulation from [FL93], we get the claimed equivalence of N C and interactive proof systems (Theorem 12). In the last section of this paper, we show an interesting variant of the following result in <ref> [CL92] </ref>. Let IPS (a; b; c) denote the class of languages recognized by interactive proof systems in which a specifies public/private coins, b specifies the power of the verifier (polytime, logspace etc.,), and c gives the number of random bits used. In [CL92] the following result is proved: N P = <p> an interesting variant of the following result in <ref> [CL92] </ref>. Let IPS (a; b; c) denote the class of languages recognized by interactive proof systems in which a specifies public/private coins, b specifies the power of the verifier (polytime, logspace etc.,), and c gives the number of random bits used. In [CL92] the following result is proved: N P = IPS (private, logspace, log random bits). On the other hand, N LOG IPS (public, logspace, log random bits) LOGCF L. <p> Thus, the verifier is a randomized LOGCFL machine. More precisely, we show (Theorem 13): N P = IPS (public, logspace + PDA, log random bits). This strengthens another result in <ref> [CL92] </ref>, namely N P = IPS (public, polytime, log random bits), by replacing the polytime verifier by a LOGCFL verifier. <p> This strengthens some results of <ref> [CL92] </ref>. Theorem 13. IPS (public, logspace + PDA, log random bits) = N P Proof Sketch: : This proof uses ideas similar to [CL92], except that the privacy of coin tosses is replaced by access to a pushdown store. <p> This strengthens some results of <ref> [CL92] </ref>. Theorem 13. IPS (public, logspace + PDA, log random bits) = N P Proof Sketch: : This proof uses ideas similar to [CL92], except that the privacy of coin tosses is replaced by access to a pushdown store. An N P membership proof can be written as an array, and verification of the proof involves some local row-wise operations and some local column-wise operations.
Reference: [Con91] <author> A. Condon. </author> <title> The complexity of the max word problem and the power of one-way interactive proof systems. </title> <booktitle> In Proc. 8th STACS, </booktitle> <pages> pp 456-465, </pages> <year> 1991. </year> <note> LNCS 480. </note>
Reference-contexts: Condon, Lip--ton, Ladner <ref> [CL88, CL89, Con91, CL92] </ref>, and Fortnow [For89, Ch.3], examined the power of logspace verifiers under many restrictions. In particular, it was shown [CL92] that with a logspace verifier, public coins can be strictly weaker than private coins, assuming P6= N P.
Reference: [FL93] <author> L. Fortnow and C. Lund. </author> <title> Interactive proof systems and alternating time-space complexity. </title> <journal> Theoretical Computer Science, </journal> <volume> 113 </volume> <pages> 55-73, </pages> <year> 1993. </year> <note> also in Proc. 8th STACS 1991, LNCS 480. </note>
Reference-contexts: It was shown that for polynomial time verifiers both models have essentially the same computational power [GS86]. Generalizing the close connection between alternating Turing machines (ATMs) and interactive proof systems [LFKN92, Sha92, She92], Fortnow and Lund <ref> [FL93] </ref> give simulations between ATMs with simultaneous space and time bounds and ? Work done while the author was with the Institute of Mathematical Sciences, Madras 600 113, India. interactive proof systems with space and time bounded verifiers. <p> In particular, it was shown [CL92] that with a logspace verifier, public coins can be strictly weaker than private coins, assuming P6= N P. In this paper we extend some results of [For89, Ch.3], <ref> [FL93] </ref>, and [CL92]. We study public-coin interactive proof systems with a space-bounded verifier. In Section 2, we define unbounded fanin arithmetic circuits with gates computing maximum and average. We establish a correspondence between uniform families of such circuits and public-coin interactive proof systems. <p> In Section 3, we describe how to arithmetize computations of ATMs. A simple low-degree arithmetization, and a size-efficient arithmetization that requires the input to be present in an encoded form, are obtained (Theorems 4 and 5). These results build on techniques developed in <ref> [FL93] </ref>. Exploiting the fact that the verifier in our case has random access to encoded input, we are able to obtain arithmetizations of significantly smaller size than in [FL93]. In Section 4, we give public-coin interactive proof systems for N C. <p> These results build on techniques developed in <ref> [FL93] </ref>. Exploiting the fact that the verifier in our case has random access to encoded input, we are able to obtain arithmetizations of significantly smaller size than in [FL93]. In Section 4, we give public-coin interactive proof systems for N C. Using the low-degree arithmetization of Section 3, we first show how to represent ATM computations as computations over the arithmetic circuits described in Section 2. <p> Combining this with the results of Section 2, we get interactive proof systems for accepting any language in N C after a logspace reduction, where the verifier is logspace bounded and the protocol runs in polylog time (Theorem 6). It was shown in <ref> [FL93] </ref> that every language in N C has a public-coin interactive proof system with a verifier using O (log n) space and O (n log 2 n) time. <p> Combining this with the reverse simulation from <ref> [FL93] </ref>, we get the claimed equivalence of N C and interactive proof systems (Theorem 12). In the last section of this paper, we show an interesting variant of the following result in [CL92]. <p> Theorem 3. IPRDSP (r (n); s (n)) DSPACE (s (n)) MAX,AVG (2 s (n) ; r (n)). 3 Arithmetizing the computations of ATMs In this section we describe arithmetizations of ATISP (t (n); s (n)) computations. To construct these, we borrow much of the technical machinery developed in <ref> [FL93] </ref>. However, the size of the arithmetizations in [FL93] is too high to obtain a characterization of N C (see Section 5). Exploiting the fact that the verifier in our case has random access to encoded input, we can obtain arithmetizations of significantly smaller size. <p> To construct these, we borrow much of the technical machinery developed in <ref> [FL93] </ref>. However, the size of the arithmetizations in [FL93] is too high to obtain a characterization of N C (see Section 5). Exploiting the fact that the verifier in our case has random access to encoded input, we can obtain arithmetizations of significantly smaller size. In our proofs, we use the polynomial extension encoding scheme of [BFLS91]. <p> Details of the constructions and proofs will appear in the full version. Let L 2 ATISP (t (n); s (n)) and let M be an ATM accepting L. We assume that M is in a normal form, described in <ref> [FL93] </ref>. Given an input x, we will construct an arithmetic expression whose value determines whether x 2 L. Fix a finite field F , a subset H F with h := jHj, and a parameter t; the values jFj; h, and, t will be specified later. <p> The arithmetization we use is described in Theorem 5. Using standard techniques, this results in an interactive proof system with a verifier of time-space complexity polynomially related to that of the ATM. Our protocol has the same overall structure as that of <ref> [FL93] </ref> except in places where the input is accessed. Hence, we do not explicitly describe this protocol; the reader is referred to [FL93] for details. We basically perform an LFKN-type protocol on recurrence (2) for i . Our protocol essentially differs from [FL93] when i = 0, the only place where <p> Our protocol has the same overall structure as that of <ref> [FL93] </ref> except in places where the input is accessed. Hence, we do not explicitly describe this protocol; the reader is referred to [FL93] for details. We basically perform an LFKN-type protocol on recurrence (2) for i . Our protocol essentially differs from [FL93] when i = 0, the only place where the verifier needs access to the input. Our parameters (degrees of polynomials, size of the field, etc.,) are also slightly different. <p> has the same overall structure as that of <ref> [FL93] </ref> except in places where the input is accessed. Hence, we do not explicitly describe this protocol; the reader is referred to [FL93] for details. We basically perform an LFKN-type protocol on recurrence (2) for i . Our protocol essentially differs from [FL93] when i = 0, the only place where the verifier needs access to the input. Our parameters (degrees of polynomials, size of the field, etc.,) are also slightly different.
Reference: [For89] <author> L. Fortnow. </author> <title> Complexity-theoretic aspects of interactive proof systems. </title> <type> PhD thesis, </type> <note> M. </note> <author> I. T., </author> <month> May </month> <year> 1989. </year> <type> Tech. Rep. </type> <institution> MIT/LCS/TR-447. </institution>
Reference-contexts: Condon, Lip--ton, Ladner [CL88, CL89, Con91, CL92], and Fortnow <ref> [For89, Ch.3] </ref>, examined the power of logspace verifiers under many restrictions. In particular, it was shown [CL92] that with a logspace verifier, public coins can be strictly weaker than private coins, assuming P6= N P. In this paper we extend some results of [For89, Ch.3], [FL93], and [CL92]. <p> Ladner [CL88, CL89, Con91, CL92], and Fortnow <ref> [For89, Ch.3] </ref>, examined the power of logspace verifiers under many restrictions. In particular, it was shown [CL92] that with a logspace verifier, public coins can be strictly weaker than private coins, assuming P6= N P. In this paper we extend some results of [For89, Ch.3], [FL93], and [CL92]. We study public-coin interactive proof systems with a space-bounded verifier. In Section 2, we define unbounded fanin arithmetic circuits with gates computing maximum and average. We establish a correspondence between uniform families of such circuits and public-coin interactive proof systems. <p> We establish a correspondence between uniform families of such circuits and public-coin interactive proof systems. The depth of the circuit equals the number of rounds while the size is exponential in the space of the verifier (Theorem 3). Similar circuits with bounded fanin have earlier been used in <ref> [For89, Ch.3] </ref>, following intuition from [GS86], in the context of logspace verifiers. We use them in a more general setting. <p> We also ensure uniformity of our circuits. Both these differences are crucially used in our proofs to obtain results that properly generalize results from <ref> [For89, Ch.3] </ref>. In Section 3, we describe how to arithmetize computations of ATMs. A simple low-degree arithmetization, and a size-efficient arithmetization that requires the input to be present in an encoded form, are obtained (Theorems 4 and 5). These results build on techniques developed in [FL93]. <p> Apart from having unbounded fanin, our circuits differ from those of <ref> [For89, Ch.3] </ref> in that we use READ gates to read all circuit inputs. This permits the uniform constructibility of our circuits.
Reference: [GMR85] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proof systems. </title> <booktitle> In Proc. 17th STOC, </booktitle> <pages> pp 291-304, </pages> <year> 1985. </year> <note> full version in SIAM J. </note> <editor> Comput., </editor> <volume> Vol 18(1), </volume> <pages> pp 186-208. </pages>
Reference-contexts: 1 Introduction An interactive proof system is a probabilistic game between an infinitely powerful prover and a randomized verifier. This model was introduced in <ref> [GMR85] </ref>, and independently, in [Bab85](see also [BM88]). In [GMR85], the coin tosses of the verifier are hidden from the prover (this is called the private coins model), whereas in [Bab85, BM88], the coin tosses of the verifier are visible to the prover (this is called the public coins model). <p> 1 Introduction An interactive proof system is a probabilistic game between an infinitely powerful prover and a randomized verifier. This model was introduced in <ref> [GMR85] </ref>, and independently, in [Bab85](see also [BM88]). In [GMR85], the coin tosses of the verifier are hidden from the prover (this is called the private coins model), whereas in [Bab85, BM88], the coin tosses of the verifier are visible to the prover (this is called the public coins model).
Reference: [GS86] <author> S. Goldwasser and M. Sipser. </author> <title> Private coins versus public coins in interactive proof systems. </title> <booktitle> In Proc. 18th STOC, 1986. also in Advances in Computing Research 5: Randomness and Computation, </booktitle> <publisher> JAI Press, </publisher> <address> Greenwich, CT, </address> <year> 1989. </year>
Reference-contexts: It was shown that for polynomial time verifiers both models have essentially the same computational power <ref> [GS86] </ref>. <p> The depth of the circuit equals the number of rounds while the size is exponential in the space of the verifier (Theorem 3). Similar circuits with bounded fanin have earlier been used in [For89, Ch.3], following intuition from <ref> [GS86] </ref>, in the context of logspace verifiers. We use them in a more general setting. In particular, we consider unbounded fanin circuits so we can relate depth to rounds; due to non-associativity of the average operator, conversion from unbounded fanin to bounded fanin is not clear.
Reference: [JK89] <author> B. Jenner and B. Kersig. </author> <title> Characterizing the polynomial hierarchy by alternating auxiliary pushdown automata. </title> <journal> RAIRO Theoretical Informatics and Applications, </journal> <volume> 23 </volume> <pages> 93-99, </pages> <year> 1989. </year> <note> also in Proc. STACS(1988), LNCS 294 118-125. </note>
Reference-contexts: In fact, the verifier alternates between pushdown mode and scan mode (read internal contents) only once, and the stack is non-erasing (Theorem 14). Such a verifier is not known to be as powerful as P <ref> [JK89, VC90] </ref> and can potentially be weaker. Hence this is a conditional improvement on the standard poly-time verifier for PSPACE [LFKN92, Sha92, She92].
Reference: [LFKN92] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <journal> J. ACM, </journal> <volume> 39(4) </volume> <pages> 859-868, </pages> <month> October </month> <year> 1992. </year> <note> also in Proc. 31st FOCS 1990, pp 1-10. </note>
Reference-contexts: It was shown that for polynomial time verifiers both models have essentially the same computational power [GS86]. Generalizing the close connection between alternating Turing machines (ATMs) and interactive proof systems <ref> [LFKN92, Sha92, She92] </ref>, Fortnow and Lund [FL93] give simulations between ATMs with simultaneous space and time bounds and ? Work done while the author was with the Institute of Mathematical Sciences, Madras 600 113, India. interactive proof systems with space and time bounded verifiers. <p> Such a verifier is not known to be as powerful as P [JK89, VC90] and can potentially be weaker. Hence this is a conditional improvement on the standard poly-time verifier for PSPACE <ref> [LFKN92, Sha92, She92] </ref>. Notation: In the following, IPRDSP (r (n); s (n)) and IPTISP (t (n); s (n)) denote the sets of languages accepted by public-coin interactive proof systems using r (n) rounds and t (n) time, respectively, and with the verifier using s (n) space. <p> In the above case, deferring helped make public coins effectively private. It can also be used to bring down a polynomial time verification to a logspace verification, provided data is stacked in appropriate form. In particular, considering the verifier in interactive proof system for PSPACE <ref> [LFKN92, Sha92, She92] </ref>, we get the following result. The stack used by the verifier here is not strictly a pushdown; PUSH and POP are allowed only at top-of-stack, but internal stack contents can be read or scanned. Theorem 14.
Reference: [Lip90] <author> R. J. Lipton. </author> <title> Efficient checking of computations. </title> <booktitle> In Proc. 7th STACS, </booktitle> <pages> pp 207-215, </pages> <year> 1990. </year> <note> LNCS 415. </note>
Reference-contexts: As the array is being sent, the verifier can do the local checks. But now the verifier must also check that the prover did not send two different arrays in the two phases. Here Lipton's fingerprinting technique <ref> [Lip90] </ref> is used; for each array, a small fingerprint which fits in log space is probabilistically generated. If the arrays are different, the fingerprints differ with high probability.
Reference: [Ruz81] <author> W.L. Ruzzo. </author> <title> On uniform circuit complexity. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 22 </volume> <pages> 365-383, </pages> <year> 1981. </year>
Reference-contexts: A class of circuits is said to be U DC -uniform if the direct connection language L DC of the circuit, comprising of descriptions of individual edges, can be recognized deterministically in time logarithmic in the circuit size <ref> [Ruz81] </ref>. It is known [Ruz81] that U DC -uniform N C coincides with N C. The MAX; AVG circuit constructed in Lemma 8 is "almost" U DC -uniform "almost everywhere". Let us qualify this. Most edges can be recognised in time polylog in circuit size, though not logarithmic. <p> A class of circuits is said to be U DC -uniform if the direct connection language L DC of the circuit, comprising of descriptions of individual edges, can be recognized deterministically in time logarithmic in the circuit size <ref> [Ruz81] </ref>. It is known [Ruz81] that U DC -uniform N C coincides with N C. The MAX; AVG circuit constructed in Lemma 8 is "almost" U DC -uniform "almost everywhere". Let us qualify this. Most edges can be recognised in time polylog in circuit size, though not logarithmic. Hence "almost" uniform. <p> Simulation in the other direction is given by the following theorem: Theorem 11 (FL93). IPTISP (t (n); s (n)) ATISP (t (n) log t (n); s (n)): Now, using Ruzzo's characterization <ref> [Ruz81] </ref> of N C, we get our main theorem for this section: Theorem 12. Let L be any language and let fl be as above. Then L is in N C iff fl (L) is in IPTISP ( polylog (n) ; log n): Proof.
Reference: [Sha92] <author> A. Shamir. </author> <title> IP = PSPACE. </title> <journal> J. ACM, </journal> <volume> 39(4) </volume> <pages> 869-877, </pages> <year> 1992. </year> <note> also in Proc. 31st FOCS 1990, pp 11-15. </note>
Reference-contexts: It was shown that for polynomial time verifiers both models have essentially the same computational power [GS86]. Generalizing the close connection between alternating Turing machines (ATMs) and interactive proof systems <ref> [LFKN92, Sha92, She92] </ref>, Fortnow and Lund [FL93] give simulations between ATMs with simultaneous space and time bounds and ? Work done while the author was with the Institute of Mathematical Sciences, Madras 600 113, India. interactive proof systems with space and time bounded verifiers. <p> Such a verifier is not known to be as powerful as P [JK89, VC90] and can potentially be weaker. Hence this is a conditional improvement on the standard poly-time verifier for PSPACE <ref> [LFKN92, Sha92, She92] </ref>. Notation: In the following, IPRDSP (r (n); s (n)) and IPTISP (t (n); s (n)) denote the sets of languages accepted by public-coin interactive proof systems using r (n) rounds and t (n) time, respectively, and with the verifier using s (n) space. <p> In the above case, deferring helped make public coins effectively private. It can also be used to bring down a polynomial time verification to a logspace verification, provided data is stacked in appropriate form. In particular, considering the verifier in interactive proof system for PSPACE <ref> [LFKN92, Sha92, She92] </ref>, we get the following result. The stack used by the verifier here is not strictly a pushdown; PUSH and POP are allowed only at top-of-stack, but internal stack contents can be read or scanned. Theorem 14.
Reference: [She92] <author> A. Shen. </author> <title> IP = PSPACE: Simplified proof. </title> <journal> J. ACM, </journal> <volume> 39(4) </volume> <pages> 878-880, </pages> <year> 1992. </year>
Reference-contexts: It was shown that for polynomial time verifiers both models have essentially the same computational power [GS86]. Generalizing the close connection between alternating Turing machines (ATMs) and interactive proof systems <ref> [LFKN92, Sha92, She92] </ref>, Fortnow and Lund [FL93] give simulations between ATMs with simultaneous space and time bounds and ? Work done while the author was with the Institute of Mathematical Sciences, Madras 600 113, India. interactive proof systems with space and time bounded verifiers. <p> Such a verifier is not known to be as powerful as P [JK89, VC90] and can potentially be weaker. Hence this is a conditional improvement on the standard poly-time verifier for PSPACE <ref> [LFKN92, Sha92, She92] </ref>. Notation: In the following, IPRDSP (r (n); s (n)) and IPTISP (t (n); s (n)) denote the sets of languages accepted by public-coin interactive proof systems using r (n) rounds and t (n) time, respectively, and with the verifier using s (n) space. <p> In the above case, deferring helped make public coins effectively private. It can also be used to bring down a polynomial time verification to a logspace verification, provided data is stacked in appropriate form. In particular, considering the verifier in interactive proof system for PSPACE <ref> [LFKN92, Sha92, She92] </ref>, we get the following result. The stack used by the verifier here is not strictly a pushdown; PUSH and POP are allowed only at top-of-stack, but internal stack contents can be read or scanned. Theorem 14.
Reference: [VC90] <author> V. Vinay and V. Chandru. </author> <title> The expressibility of nondeterministic auxiliary stack automata and its relation to treesize bounded alternating auxiliary pushdown automata. </title> <booktitle> In Proc. 10th FST & TCS, </booktitle> <pages> pp 104-114, </pages> <year> 1990. </year> <title> LNCS 472. This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: In fact, the verifier alternates between pushdown mode and scan mode (read internal contents) only once, and the stack is non-erasing (Theorem 14). Such a verifier is not known to be as powerful as P <ref> [JK89, VC90] </ref> and can potentially be weaker. Hence this is a conditional improvement on the standard poly-time verifier for PSPACE [LFKN92, Sha92, She92].
References-found: 19

