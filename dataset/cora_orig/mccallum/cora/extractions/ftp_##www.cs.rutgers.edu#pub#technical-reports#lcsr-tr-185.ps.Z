URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-185.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: allender@cs.rutgers.edu  gore@paul.rutgers.edu  
Title: On Strong Separations from AC  
Author: fl Eric Allender Vivek Gore 
Note: DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-88-09648; and also receives support from the New Jersey Commission on Science and Technology.  
Date: July 29, 1992  
Address: New Brunswick, NJ 08903  New Brunswick, NJ 08903  
Affiliation: Department of Computer Science Rutgers University  Department of Computer Science Rutgers University  
Abstract: fl A preliminary version of this paper appeared as [AG91a]. y Supported in part by NSF grants CCR-8810467 and CCR-9000045. z Supported in part by a DIMACS research assistantship.
Abstract-found: 1
Intro-found: 1
Reference: [Al89] <author> E. Allender. </author> <title> Some consequences of the existence of pseudorandom generators. </title> <journal> Journal of Computer and System Sci. </journal> <month> 39 </month> <year> (1989) </year> <month> 101-124. </month>
Reference-contexts: In order to present these relationships, we will need to make use of some connections between the complexity of NE predicates and a version of time-bounded Kolmogorov complexity. The following paragraphs introduce the notion of time bounded Kolmogorov complexity that we use. The definitions below were introduced in <ref> [Lev84, Al89] </ref>; more formal definitions and background may be found there and in [Al92]. Since it will sometimes be necessary to speak about Kolmogorov complexity relative to an oracle, we present the definitions relative to an arbitrary oracle A.
Reference: [Al92] <author> E. Allender. </author> <title> Applications of time-bounded Kolmogorov complexity in complexity theory. In Kolmogorov Complexity: Theory and Relations to Computational Complexity, </title> <type> Osamu Watanabe, </type> <note> ed., Springer-Verlag, to appear. </note>
Reference-contexts: The following paragraphs introduce the notion of time bounded Kolmogorov complexity that we use. The definitions below were introduced in [Lev84, Al89]; more formal definitions and background may be found there and in <ref> [Al92] </ref>. Since it will sometimes be necessary to speak about Kolmogorov complexity relative to an oracle, we present the definitions relative to an arbitrary oracle A. <p> S (A) (n) = O (log n). Proof: The implication (a) )(b) is proved (in the unrelativized case) as Theorem 6 in <ref> [Al92] </ref> (see also [AW90, Theorem 4]). Since S (A) is clearly in P A , it follows that (b) implies (c). For the remaining implication, suppose K A S (A) (n) c log n for some constant c.
Reference: [ABHH90] <author> E. Allender, R. Beigel, U. Hertrampf, and S. Homer. </author> <title> A note on the almost-everywhere hierarchy for nondeterministic time. </title> <booktitle> In Proc. 7th Symposium on Theoretical Aspects of Computer Science, Lecture Notes in Computer Science 415, </booktitle> <pages> pages 1-11. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: For guidance, we turn to the better-understood notions of time and space complexity. Almost-everywhere complexity has been studied in a variety of settings dealing with time and space complexity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, and in all instances it has been shown to be intimately connected with immunity. (An infinite set L is immune to a class C if L has no infinite subset in C.) For example, in [BS85] it is shown that for any time-constructible function T , a
Reference: [AG91a] <author> E. Allender and V. </author> <title> Gore. </title> <booktitle> On strong separations from AC 0 . In Proc. 8th International Conference on Fundamentals of Computation Theory (FCT '91), Lecture Notes in Computer Science 529, </booktitle> <pages> pages 1-15, </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [AG91b] <author> E. Allender and V. Gore. </author> <title> Rudimentary reductions revisited. </title> <note> Information Processing Letters 40 (1991) 89-95. </note>
Reference-contexts: This class is sometimes denoted F O+ &lt; +BIT . It has also been shown recently that the logspace-rudimentary reductions defined by Jones [Jon75] are precisely the functions computed by Dlogtime-uniform AC 0 circuits <ref> [AG91b] </ref>. Additional characterizations of AC 0 may be found in [Clo90]. 4 A secondary reason for considering Dlogtime uniformity in this paper is that our main results point out the significance of finding sets immune to AC 0 , even with this most restrictive notion of uniformity.
Reference: [AG92] <author> E. Allender and V. Gore. </author> <title> A uniform circuit lower bound for the permanent. </title> <type> DIMACS Technical Report 92-30. </type> <note> Preliminary versions of these results may be found in [AG91a]. </note>
Reference-contexts: For more definitions and details concerning ACC, see [Yao90, BT91]. Theorem 4 There is a set in P PP that is immune to ACC (and hence is also immune to AC 0 ). Proof: Building on the work of [Yao90, BT91], it is shown in <ref> [AG92] </ref> that there is a set Y 2 PP such that ACC DTIME Y (n 2 ). <p> Now observe merely that the almost 6 everywhere hierarchy of [GHS91] relativizes, so that there is a set in DTIME Y (n 3 ) that is immune to DTIME Y (n 2 ), and thus is also immune to ACC. In <ref> [AG92] </ref>, the containment ACC DTIME Y (n 2 ) is used to show that ACC is not equal to PP; that is, there is a set in PP that is not in ACC. <p> One (optimistic) way to view the results of this paper is as an indication that the relatively well-understood complexity class AC 0 offers a possible starting place for the development of such techniques. In <ref> [AG92] </ref>, we have shown that there is a set Y 2 PP such that AC 0 is contained in Dtime (n 2 ) Y ; we used this result to prove our Theorem 4.
Reference: [AR88] <author> E. Allender and R. Rubinstein. </author> <title> P-printable sets. </title> <note> SIAM Journal on Computing 17 (1988) 1193-1202. </note>
Reference-contexts: Proof: It is shown in [AW90, Theorem 4] that if all NE predicates are solvable in exponential time, then every infinite set in P has an infinite P-printable subset. 1 By Theorem 7 of <ref> [AR88] </ref>, this implies that every infinite set in NP has an infinite P-printable subset.
Reference: [AW90] <author> E. Allender and O. Watanabe. </author> <title> Kolmogorov complexity and degrees of tally sets. </title> <note> Information and Computation 86 (1990) 160-178. </note>
Reference-contexts: The related "witness-finding" question: "Is every NE predicate solvable in exponential time?" was initially studied in <ref> [AW90] </ref>. In [IT89] it was shown that there is an oracle relative to which E=NE but not all NE predicates are solvable in exponential time. Thus at least in some relativized worlds, assuming that all NE predicates are solvable in exponential time is strictly stronger than merely assuming E=NE. <p> S (A) (n) = O (log n). Proof: The implication (a) )(b) is proved (in the unrelativized case) as Theorem 6 in [Al92] (see also <ref> [AW90, Theorem 4] </ref>). Since S (A) is clearly in P A , it follows that (b) implies (c). For the remaining implication, suppose K A S (A) (n) c log n for some constant c. <p> Theorem 8 If all NE predicates are solvable in exponential time, then no set in NP is immune to P-uniform AC 0 . Proof: It is shown in <ref> [AW90, Theorem 4] </ref> that if all NE predicates are solvable in exponential time, then every infinite set in P has an infinite P-printable subset. 1 By Theorem 7 of [AR88], this implies that every infinite set in NP has an infinite P-printable subset.
Reference: [Bab87] <author> L. Babai. </author> <title> Random oracles separate PSPACE from the polynomial time hierarchy. </title> <note> Information Processing Letters 26 (1987) 51-53. </note>
Reference-contexts: Also, it is known that the Parity language is Church-random with respect to AC 0 <ref> [Cai89, Bab87, H-as87] </ref>. (AC 0 is the class of languages accepted by families of constant-depth, polynomial-size circuits of 2 unbounded fan-in AND and OR gates.) However, even languages that are Church-random may have infinitely many "easy" special-case inputs.
Reference: [BFL90] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> Non-deterministic exponential time has two-prover interactive protocols. </title> <note> Computational Complexity 1 (1991) 3-40. </note>
Reference-contexts: Of course, it is now recognized that the mere existence of an oracle, relative to which some condition X fails to hold, does not preclude the existence of an easy proof that X does hold in the unrelativized case. However, the non-relativizing proof techniques developed in <ref> [LFKN90, Sha89, BFL90] </ref> have not been shown to be relevant for questions concerning deterministic and nondeterministic time classes; new non-relativizing proof techniques are still needed to answer these questions.
Reference: [BS85] <author> J. Balcazar and U. Schoning. </author> <title> Bi-immune sets for complexity classes. </title> <note> Mathematical Systems Theory 18 (1985) 1-10. </note>
Reference-contexts: For guidance, we turn to the better-understood notions of time and space complexity. Almost-everywhere complexity has been studied in a variety of settings dealing with time and space complexity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, and in all instances it has been shown to be intimately connected with immunity. (An infinite set L is immune to a class C if L has no infinite subset in C.) For example, in [BS85] it is shown that for any time-constructible function T , a <p> in a variety of settings dealing with time and space complexity [BS85, GHS91, GK90, ABHH90], and in all instances it has been shown to be intimately connected with immunity. (An infinite set L is immune to a class C if L has no infinite subset in C.) For example, in <ref> [BS85] </ref> it is shown that for any time-constructible function T , a set L is almost-everywhere complex with respect to DTIME (T (n)) if and only if both L and its complement are immune to DTIME (T (n)).
Reference: [BT91] <author> R. Beigel and J. Tarui. </author> <booktitle> On ACC. In Proc. 32nd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 783-792, </pages> <year> 1991. </year>
Reference-contexts: For more definitions and details concerning ACC, see <ref> [Yao90, BT91] </ref>. Theorem 4 There is a set in P PP that is immune to ACC (and hence is also immune to AC 0 ). Proof: Building on the work of [Yao90, BT91], it is shown in [AG92] that there is a set Y 2 PP such that ACC DTIME Y <p> For more definitions and details concerning ACC, see <ref> [Yao90, BT91] </ref>. Theorem 4 There is a set in P PP that is immune to ACC (and hence is also immune to AC 0 ). Proof: Building on the work of [Yao90, BT91], it is shown in [AG92] that there is a set Y 2 PP such that ACC DTIME Y (n 2 ).
Reference: [BIS90] <author> D. Mix Barrington, N. Immerman, and H. Straubing. </author> <title> On uniformity within N C 1 . Journal of Computer and System Sciences 41 (1990) 274-306. </title> <type> 22 </type>
Reference-contexts: Since uniformity conditions are necessary in order to draw important connections between circuit complexity and machine-based complexity, the issue of uniformity has been addressed often before <ref> [Ruz81, BIS90, BCGR90] </ref>. In particular, for very small complexity classes such as AC 0 , this issue has been addressed in the papers [BIS90] and [BCGR90], and they provide persuasive arguments for the use of Dlogtime uniformity. <p> Since uniformity conditions are necessary in order to draw important connections between circuit complexity and machine-based complexity, the issue of uniformity has been addressed often before [Ruz81, BIS90, BCGR90]. In particular, for very small complexity classes such as AC 0 , this issue has been addressed in the papers <ref> [BIS90] </ref> and [BCGR90], and they provide persuasive arguments for the use of Dlogtime uniformity. <p> Here is a list of some of these alternative characterizations: Theorem 1 <ref> [BIS90] </ref> The following classes of sets are equal: * The class of sets accepted by Dlogtime-uniform circuits of AND and OR gates of unbounded fan-in, constant depth and polynomial size. * The class of sets accepted in O (1) time on a CRAM with polynomially many processors. * The class of <p> Using the characterization of AC 0 in terms of first-order logic as presented by <ref> [BIS90] </ref>, it is clear that L 2 is in AC 0 . It is easy to see how to generalize this to show that each L k is in AC 0 .
Reference: [Boo78] <author> Ronald V. </author> <title> Book. Simple representations of certain classes of languages. </title> <note> JACM 25 (1978) 23-31. </note>
Reference-contexts: We will usually denote this class by S k k Time (n). The rudimentary sets were originally defined by Smullyan [Smu61], and they have been studied extensively (see, e.g., <ref> [Wra78, Lip78, Boo78, Vol83, PD80] </ref>). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial-time hierarchy.
Reference: [BCGR90] <author> S. Buss, S. Cook, A. Gupta, and V. Ramachandran. </author> <title> An optimal parallel algorithm for formula evaluation. </title> <note> Submitted, </note> <year> 1990. </year>
Reference-contexts: Since uniformity conditions are necessary in order to draw important connections between circuit complexity and machine-based complexity, the issue of uniformity has been addressed often before <ref> [Ruz81, BIS90, BCGR90] </ref>. In particular, for very small complexity classes such as AC 0 , this issue has been addressed in the papers [BIS90] and [BCGR90], and they provide persuasive arguments for the use of Dlogtime uniformity. <p> In particular, for very small complexity classes such as AC 0 , this issue has been addressed in the papers [BIS90] and <ref> [BCGR90] </ref>, and they provide persuasive arguments for the use of Dlogtime uniformity.
Reference: [Cai89] <author> J. Cai. </author> <title> With probability 1, a random oracle separates PSPACE from the polynomial-time hierarchy. </title> <journal> J. </journal> <note> Computer and System Science 38 (1989) 68-85. </note>
Reference-contexts: Also, it is known that the Parity language is Church-random with respect to AC 0 <ref> [Cai89, Bab87, H-as87] </ref>. (AC 0 is the class of languages accepted by families of constant-depth, polynomial-size circuits of 2 unbounded fan-in AND and OR gates.) However, even languages that are Church-random may have infinitely many "easy" special-case inputs.
Reference: [Clo90] <author> P. Clote. </author> <title> Bounded Arithmetic and Computational Complexity. </title> <booktitle> Proc. 5th Structure in Complexity Theory Conference, </booktitle> <pages> pages 196-199, </pages> <year> 1990. </year>
Reference-contexts: This class is sometimes denoted F O+ &lt; +BIT . It has also been shown recently that the logspace-rudimentary reductions defined by Jones [Jon75] are precisely the functions computed by Dlogtime-uniform AC 0 circuits [AG91b]. Additional characterizations of AC 0 may be found in <ref> [Clo90] </ref>. 4 A secondary reason for considering Dlogtime uniformity in this paper is that our main results point out the significance of finding sets immune to AC 0 , even with this most restrictive notion of uniformity.
Reference: [GHS91] <editor> J. Geske, D. Huynh, and J. Seiferas. </editor> <title> A note on almost-everywhere-complex sets and separating deterministic time complexity classes. </title> <note> Information and Computation 92 (1991) 97-104. </note>
Reference-contexts: More formally, a set L is said to be almost-everywhere complex with respect to DTIME (T (n)) if any machine recognizing L must run for more than T (jxj) steps on all large inputs x. As with Church-randomness, there are very tight hierarchies for almost-everywhere complexity <ref> [GHS91] </ref>. However, unlike the case of Church-randomness, little is known about sets that are almost-everywhere complex with respect to AC 0 . <p> For guidance, we turn to the better-understood notions of time and space complexity. Almost-everywhere complexity has been studied in a variety of settings dealing with time and space complexity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, and in all instances it has been shown to be intimately connected with immunity. (An infinite set L is immune to a class C if L has no infinite subset in C.) For example, in [BS85] it is shown that for any time-constructible function T , a <p> Merely note that AC 0 is contained inside DSPACE (log n), and then use the almost-everywhere complexity hierarchy of <ref> [GHS91] </ref> to obtain the following result: Proposition 2 Let S be a space-constructible function such that log n = o (S (n)). Then there is a set in DSPACE (S (n)) that is immune to AC 0 . <p> Proof: Building on the work of [Yao90, BT91], it is shown in [AG92] that there is a set Y 2 PP such that ACC DTIME Y (n 2 ). Now observe merely that the almost 6 everywhere hierarchy of <ref> [GHS91] </ref> relativizes, so that there is a set in DTIME Y (n 3 ) that is immune to DTIME Y (n 2 ), and thus is also immune to ACC.
Reference: [GK90] <editor> J. Geske and D. Kakihara. </editor> <title> Almost-everywhere complexity, bi-immunity, and nondeterministic space. </title> <booktitle> In Advances in Computing and Information - ICCI '90, Lecture Notes in Computer Science 468, </booktitle> <pages> pages 44-51. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: For guidance, we turn to the better-understood notions of time and space complexity. Almost-everywhere complexity has been studied in a variety of settings dealing with time and space complexity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, and in all instances it has been shown to be intimately connected with immunity. (An infinite set L is immune to a class C if L has no infinite subset in C.) For example, in [BS85] it is shown that for any time-constructible function T , a
Reference: [H-as87] <author> J. H-astad. </author> <title> Computational limitations for small depth circuits. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1987. </year>
Reference-contexts: Also, it is known that the Parity language is Church-random with respect to AC 0 <ref> [Cai89, Bab87, H-as87] </ref>. (AC 0 is the class of languages accepted by families of constant-depth, polynomial-size circuits of 2 unbounded fan-in AND and OR gates.) However, even languages that are Church-random may have infinitely many "easy" special-case inputs.
Reference: [IN88] <author> R. Impagliazzo and M. Naor. </author> <title> Decision trees and downward closures. </title> <booktitle> In Proc. 3rd Structure in Complexity Theory Conference, </booktitle> <pages> pages 29-38, </pages> <year> 1988. </year>
Reference-contexts: Combining these two results, we see that any answer to the question 19 Are there sets in NP that are immune to AC 0 ? yields non-relativizing proof techniques for attacking questions concerning deterministic and nondeterministic time-bounded computation. Earlier work by Impagliazzo and Naor <ref> [IN88] </ref> showed that many relationships among very small complexity classes (such as Dtime (log O (1) n) and Ntime (log O (1) n)) cannot be resolved without first answering long-standing questions such as whether P=NP"coNP.
Reference: [IT89] <author> R. Impagliazzo and G. Tardos. </author> <title> Decision versus search in super-polynomial time. </title> <booktitle> In Proc. 30th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 222-227, </pages> <year> 1989. </year>
Reference-contexts: The related "witness-finding" question: "Is every NE predicate solvable in exponential time?" was initially studied in [AW90]. In <ref> [IT89] </ref> it was shown that there is an oracle relative to which E=NE but not all NE predicates are solvable in exponential time. Thus at least in some relativized worlds, assuming that all NE predicates are solvable in exponential time is strictly stronger than merely assuming E=NE.
Reference: [Jon75] <author> N. Jones. </author> <title> Space-bounded reducibility among combinatorial problems. </title> <note> Journal of Computer and System Sciences 11 (1975) 68-85. </note>
Reference-contexts: This class is sometimes denoted F O+ &lt; +BIT . It has also been shown recently that the logspace-rudimentary reductions defined by Jones <ref> [Jon75] </ref> are precisely the functions computed by Dlogtime-uniform AC 0 circuits [AG91b].
Reference: [Lad77] <author> R. Ladner. </author> <title> Application of model theoretic games to discrete linear orders and finite automata. </title> <note> Information and Computation 33 (1977) 281-303. </note>
Reference-contexts: However it should be noted that the class F O+ &lt; is exactly the star-free regular sets, and thus each language in that class has a linear-time algorithm [MP71] (see also <ref> [Lad77] </ref>). Some (but clearly not all) of the combinatorial techniques that are used to prove this characterization of F O+ &lt; apply also to the system F O+ &lt; +BIT .
Reference: [Lev84] <author> L. Levin. </author> <title> Randomness conservation inequalities; information and independence in mathematical theories. </title> <note> Information and Control 61 (1984) 15-37. </note>
Reference-contexts: In order to present these relationships, we will need to make use of some connections between the complexity of NE predicates and a version of time-bounded Kolmogorov complexity. The following paragraphs introduce the notion of time bounded Kolmogorov complexity that we use. The definitions below were introduced in <ref> [Lev84, Al89] </ref>; more formal definitions and background may be found there and in [Al92]. Since it will sometimes be necessary to speak about Kolmogorov complexity relative to an oracle, we present the definitions relative to an arbitrary oracle A.
Reference: [Lip78] <author> R. Lipton. </author> <title> Model theoretic aspects of computational complexity. </title> <booktitle> In Proc. 19th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 193-200, </pages> <year> 1978. </year>
Reference-contexts: We will usually denote this class by S k k Time (n). The rudimentary sets were originally defined by Smullyan [Smu61], and they have been studied extensively (see, e.g., <ref> [Wra78, Lip78, Boo78, Vol83, PD80] </ref>). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial-time hierarchy.
Reference: [Li90] <author> G. Lischke. </author> <title> Impossibilities and possibilities of weak separation between NP and exponential time. </title> <booktitle> In Proc. 5th Structure in Complexity Theory Conference, </booktitle> <pages> pages 245-253, </pages> <year> 1990. </year>
Reference-contexts: Thus, a study of sets that are immune to a complexity class is necessary in order to study the notion of almost-everywhere complex sets. Because of these and other considerations, immunity has often been studied in complexity theory. (For example, see <ref> [Li90] </ref> and the papers cited there.) In the literature, a class D is said to be strongly separated from a class C if there is a set in D that is immune to C.
Reference: [LFKN90] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <booktitle> In Proc. 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-10, </pages> <year> 1990. </year> <month> 23 </month>
Reference-contexts: Of course, it is now recognized that the mere existence of an oracle, relative to which some condition X fails to hold, does not preclude the existence of an easy proof that X does hold in the unrelativized case. However, the non-relativizing proof techniques developed in <ref> [LFKN90, Sha89, BFL90] </ref> have not been shown to be relevant for questions concerning deterministic and nondeterministic time classes; new non-relativizing proof techniques are still needed to answer these questions.
Reference: [MP71] <author> R. McNaughton and S. </author> <title> Papert. </title> <publisher> Counter-Free Automata MIT Press, </publisher> <address> Cam--bridge, Mass., </address> <year> 1971. </year>
Reference-contexts: However it should be noted that the class F O+ &lt; is exactly the star-free regular sets, and thus each language in that class has a linear-time algorithm <ref> [MP71] </ref> (see also [Lad77]). Some (but clearly not all) of the combinatorial techniques that are used to prove this characterization of F O+ &lt; apply also to the system F O+ &lt; +BIT .
Reference: [PD80] <author> J. Paris and C. Dimitracopoulos. </author> <title> Truth definitions for 0 formulae. In Logic and Algorithmic, An International Symposum Held in Honour of Ernst Specker, Monographie no. </title> <booktitle> 30 de L'Enseignement Mathematique, </booktitle> <pages> pages 317-329, </pages> <year> 1982. </year>
Reference-contexts: We will usually denote this class by S k k Time (n). The rudimentary sets were originally defined by Smullyan [Smu61], and they have been studied extensively (see, e.g., <ref> [Wra78, Lip78, Boo78, Vol83, PD80] </ref>). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial-time hierarchy.
Reference: [Ruz81] <author> W. Ruzzo. </author> <title> On uniform circuit complexity. </title> <note> Journal of Computer and System Sciences 21 (1981) 365-383. </note>
Reference-contexts: Since uniformity conditions are necessary in order to draw important connections between circuit complexity and machine-based complexity, the issue of uniformity has been addressed often before <ref> [Ruz81, BIS90, BCGR90] </ref>. In particular, for very small complexity classes such as AC 0 , this issue has been addressed in the papers [BIS90] and [BCGR90], and they provide persuasive arguments for the use of Dlogtime uniformity.
Reference: [Sha89] <author> A. Shamir. </author> <title> IP = PSPACE. </title> <booktitle> In Proc. 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 11-15, </pages> <year> 1990. </year>
Reference-contexts: Of course, it is now recognized that the mere existence of an oracle, relative to which some condition X fails to hold, does not preclude the existence of an easy proof that X does hold in the unrelativized case. However, the non-relativizing proof techniques developed in <ref> [LFKN90, Sha89, BFL90] </ref> have not been shown to be relevant for questions concerning deterministic and nondeterministic time classes; new non-relativizing proof techniques are still needed to answer these questions.
Reference: [Sip83] <author> M. Sipser. </author> <title> Borel sets and circuit complexity. </title> <booktitle> In Proc. 15th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 61-69, </pages> <year> 1983. </year>
Reference-contexts: fan-in, constant depth and polynomial size. * The class of sets accepted in O (1) time on a CRAM with polynomially many processors. * The class of sets accepted by alternating Turing machines in O (log n) time and O (1) alternations (i.e., the logtime hierarchy defined by Sipser in <ref> [Sip83] </ref>). * The class of sets definable in first-order logic with additional predicates &lt; (linear order) and BIT (where BIT (i; j) means that bit i of the binary representation of j is 1). This class is sometimes denoted F O+ &lt; +BIT . <p> Proposition 5 L 2 S k k Time (n), un (L) 2 AC 0 , where un (L) = f0 n : n 2 Lg. Proof: (This result is proved using elementary translational (i.e, "padding") techniques. The proof is somewhat easier if one observes (as is done in <ref> [Sip83] </ref>) that, if L is accepted by an alternating Turing machine M in time O (log n) with O (1) alternations, then L is accepted by a similar machine that, along any computation path, uses its address tape to access the input only once.) ()) Let L 2 k k Time
Reference: [Smu61] <author> R. </author> <title> Smullyan. </title> <journal> Theory of formal systems. In Annals of Math. </journal> <volume> Studies 47. </volume> <publisher> Princeton University Press, </publisher> <year> 1961. </year>
Reference-contexts: Definition: The class of rudimentary sets is the class of languages accepted by alternating Turing machines making O (1) alternations, and running for linear time. We will usually denote this class by S k k Time (n). The rudimentary sets were originally defined by Smullyan <ref> [Smu61] </ref>, and they have been studied extensively (see, e.g., [Wra78, Lip78, Boo78, Vol83, PD80]). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial-time hierarchy.
Reference: [Vol83] <author> H. Volger. </author> <title> Rudimentary relations and Turing machines with linear alternation. In Logic and Machines : Decision Problems and Complexity, </title> <booktitle> Lecture Notes in Computer Science 171, </booktitle> <pages> pages 131-136. </pages> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: We will usually denote this class by S k k Time (n). The rudimentary sets were originally defined by Smullyan [Smu61], and they have been studied extensively (see, e.g., <ref> [Wra78, Lip78, Boo78, Vol83, PD80] </ref>). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial-time hierarchy.
Reference: [Wi83] <author> R. Wilber. </author> <title> Randomness and the density of hard problems. </title> <booktitle> In Proceedings, 24th IEEE Symposium on Foundations of Computer Science pages 335-342, </booktitle> <year> 1983. </year>
Reference-contexts: 2 .) Very tight Church-randomness hierarchies are known; for all functions t and T such that DTIME (t (n)) is known to be properly contained in DTIME (T (n)), it is known that there is a set in DTIME (T (n)) that is Church-random with respect to DTIME (t (n)) <ref> [Wi83] </ref>.
Reference: [Wra78] <author> C. Wrathall. </author> <title> Rudimentary predicates and relative computation. </title> <note> SIAM Journal on Computing 7 (1978) 194-209. </note>
Reference-contexts: We will usually denote this class by S k k Time (n). The rudimentary sets were originally defined by Smullyan [Smu61], and they have been studied extensively (see, e.g., <ref> [Wra78, Lip78, Boo78, Vol83, PD80] </ref>). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial-time hierarchy. <p> We will usually denote this class by S k k Time (n). The rudimentary sets were originally defined by Smullyan [Smu61], and they have been studied extensively (see, e.g., [Wra78, Lip78, Boo78, Vol83, PD80]). One result of <ref> [Wra78] </ref> shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial-time hierarchy. We will have reason to be interested in the relationships among the rudimentary sets and deterministic and nondeterministic exponential time.
Reference: [Yao90] <author> A. Yao. </author> <title> On ACC and Threshold Circuits. </title> <booktitle> In Proc. 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 619-627, </pages> <year> 1990. </year> <month> 24 </month>
Reference-contexts: For more definitions and details concerning ACC, see <ref> [Yao90, BT91] </ref>. Theorem 4 There is a set in P PP that is immune to ACC (and hence is also immune to AC 0 ). Proof: Building on the work of [Yao90, BT91], it is shown in [AG92] that there is a set Y 2 PP such that ACC DTIME Y <p> For more definitions and details concerning ACC, see <ref> [Yao90, BT91] </ref>. Theorem 4 There is a set in P PP that is immune to ACC (and hence is also immune to AC 0 ). Proof: Building on the work of [Yao90, BT91], it is shown in [AG92] that there is a set Y 2 PP such that ACC DTIME Y (n 2 ).
References-found: 38

