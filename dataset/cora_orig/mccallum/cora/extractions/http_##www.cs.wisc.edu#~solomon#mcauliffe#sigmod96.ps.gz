URL: http://www.cs.wisc.edu/~solomon/mcauliffe/sigmod96.ps.gz
Refering-URL: http://www.cs.wisc.edu/~solomon/solomon.html
Root-URL: 
Email: mcauliff@cs.wisc.edu  carey@almaden.ibm.com  solomon@cs.wisc.edu  
Title: Towards Effective and Efficient Free Space Management  
Author: Mark L. McAuliffe Michael J. Carey Marvin H. Solomon 
Address: Wisconsin|Madison  Wisconsin|Madison  
Affiliation: University of  IBM Almaden Research Center  University of  
Abstract: We survey several object placement algorithms, including techniques that can be found in commercial and research database systems. We then present a new object placement algorithm that we have designed for use in Shore, an object-oriented database system under development at the University of Wisconsin|Madison. Finally, we present results from a series of experiments involving actual Shore implementations of some of these algorithms. Our results show that while current object placement algorithms have serious performance deficiencies, including excessive CPU or main memory overhead, I/O traffic, or poor disk utilization, our new algorithm consistently demonstrates excellent performance in all of these areas. 
Abstract-found: 1
Intro-found: 1
Reference: [CDF + 94] <author> M. J. Carey, D. J. DeWitt, M. J. Franklin, N. E. Hall, M. L. McAuliffe, J. F. Naughton, D. T. Schuh, M. H. Solomon, C.K. Tan, O. G. Tsat-alos, S. J. White, and M. J. Zwilling. </author> <title> Shoring Up Persistent Applications. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 383-394, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This paper surveys current solutions to the object placement algorithm and introduces a new object placement algorithm known as HY (n,u). We present the results of a performance study based on an implementation of HY and other object placement algorithms in Shore <ref> [CDF + 94] </ref>, an object-oriented database system under development at the University of Wisconsin| Madison. This performance study highlights several of the features of the new algorithm. Among these features are: Superior packing: HY (n,u) achieves excellent space utilization on all tested workloads. <p> In the world of object-oriented database systems, there is much less information available about system internals. We conjecture that many commercial object-oriented database systems use unclustered heap files, but we cannot prove it from the open literature. However, two recent research object-oriented systems with which we are familiar, Shore <ref> [CDF + 94] </ref> and its predecessor, Exodus [CDG + 90], use this organization. Heap files are a natural choice for object-oriented systems, as the navigational access patterns common in such systems suggest clustering together objects of assorted types based on structural relationships.
Reference: [CDG + 90] <author> M. J. Carey, D. J. DeWitt, G. Graefe, D. M. Haight, J. E. Richardson, D. T. Schuh, E. J. Shekita, and S. L. Vandenberg. </author> <title> The EXODUS Extensible DBMS Project: An Overview. </title> <editor> In Stanley B. Zdonik and David Maier, editors, </editor> <booktitle> Readings in Object-Oriented Database Systems, </booktitle> <pages> pages 474-499. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: We conjecture that many commercial object-oriented database systems use unclustered heap files, but we cannot prove it from the open literature. However, two recent research object-oriented systems with which we are familiar, Shore [CDF + 94] and its predecessor, Exodus <ref> [CDG + 90] </ref>, use this organization. Heap files are a natural choice for object-oriented systems, as the navigational access patterns common in such systems suggest clustering together objects of assorted types based on structural relationships.
Reference: [HCL + 90] <author> L. M. Haas, W. Chang, G. M. Lohman, J. McPherson, P. F. Wilms, G. Lapis, B. Lind-say, H. Pirahesh, M. J. Carey, and E. Shekita. </author> <title> Starburst Mid-Flight: As the Dust Clears. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 143-160, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Space maps are used by many systems, including Rdb [HE95], DB2 [IBM89], and Starburst <ref> [HCL + 90] </ref>, each of which calls them by a different name. In this paper, we use the term FSIP (Free Space Inventory Page) used by Mohan and Haderle [MH94] 2 . <p> Lazy techniques normally also update a page's FSIP entry at the time the object is deleted, rather than waiting until later. Lindsay, Mohan, and Pirahesh [LMP86] describe the lazy method used in Starburst <ref> [HCL + 90] </ref>. Mohan and Haderle [MH94] describe a newer lazy technique and survey other implementation techniques related to space reservation.
Reference: [HE95] <author> L. Hobbs and K. </author> <title> England. Rdb: A Comprehensive Guide. </title> <note> Digital Press, second edition, </note> <year> 1995. </year>
Reference-contexts: Space maps are used by many systems, including Rdb <ref> [HE95] </ref>, DB2 [IBM89], and Starburst [HCL + 90], each of which calls them by a different name. In this paper, we use the term FSIP (Free Space Inventory Page) used by Mohan and Haderle [MH94] 2 .
Reference: [IBM89] <institution> IBM Corp. </institution> <note> IBM Database 2 Version 2 Diagnosis Guide and Reference, second edition, </note> <month> September </month> <year> 1989. </year>
Reference-contexts: Space maps are used by many systems, including Rdb [HE95], DB2 <ref> [IBM89] </ref>, and Starburst [HCL + 90], each of which calls them by a different name. In this paper, we use the term FSIP (Free Space Inventory Page) used by Mohan and Haderle [MH94] 2 .
Reference: [JDU + 74] <author> D. S. Johnson, A. Demers, J. D. Ullman, M. R. Garey, and R. L. Graham. </author> <title> Worst-Case Performance Bounds for Simple One-Dimensional Packing Algorithms. </title> <journal> SIAM Journal of Computing, </journal> <volume> 3(4), </volume> <month> December </month> <year> 1974. </year>
Reference-contexts: Placing variable-size objects onto fixed-size pages 1 is an example of the online Bin Packing problem, for which simple, well-known algorithms provide reasonable utilization in the worst case and excellent utilization in common cases <ref> [JDU + 74] </ref>. However, the storage requirements of a database system introduce significant extra challenges, such as minimizing I/O traffic, coping with crash recovery, and gracefully integrating space management with locking and logging. <p> An example of this kind of algorithm is First-Fit (FF), which searches the pages of the file sequentially from beginning to end until a suitable page is found. FF can be shown to have worst-case space utilization within a factor of 1.7 times optimal <ref> [JDU + 74] </ref>, and in practice it frequently achieves utilization well over 90%. On the other hand, it is an n 2 algorithm: each addition of a new page to the file is preceded by an unsuccessful scan of all of the pages added previously. <p> of this data structure makes BF impractical for use in real systems, but we include it in our experiments to provide another data point on possible disk space utilization. (Theoretical results show that the worst-case utilization of BF is the same as the worst case of FF: 1.7 times optimal <ref> [JDU + 74] </ref>.) We also studied an enhanced version of FF based on the object placement algorithm used in DB2/2.
Reference: [JS93] <author> T. Johnson and D. Shasha. </author> <title> B-Trees with Inserts and Deletes: Why Free-at-Empty Is Better Than 399 Merge-at-Half. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 47 </volume> <pages> 45-76, </pages> <year> 1993. </year>
Reference-contexts: While this organization makes space allocation straight-forward, it does not lead to particularly good space utilization: Johnson and Shasha show typical space utilization for B + trees to be between 39% and 70% <ref> [JS93] </ref>. In a B + tree file organization, records do not have fixed physical addresses; they may be moved from page to page as other records are inserted into or deleted from the relation.
Reference: [Kir93] <author> J. Kirkwood. </author> <title> Sybase Architecture and Administration. </title> <publisher> Ellis Horwood, </publisher> <year> 1993. </year>
Reference-contexts: The lack of fixed addresses presents a problem in the design of secondary indices, which need to "point" to tuples of the relation. Some systems, such as Sybase <ref> [Kir93] </ref>, point to records via their physical addresses within the B + tree, requiring costly updates to all secondary indices whenever a record is moved.
Reference: [Knu69] <author> Donald E. Knuth. </author> <title> The Art of Computer Programming. Volume 1: Fundamental Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1969. </year>
Reference: [LMP86] <author> Bruce G. Lindsay, C. Mohan, and M. Hamid Pi-rahesh. </author> <title> Method for Reserving Space Needed for "Rollback" Actions. </title> <journal> IBM Technical Disclosure Bulletin, </journal> <volume> 29(6) </volume> <pages> 2743-2746, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: Lazy techniques normally also update a page's FSIP entry at the time the object is deleted, rather than waiting until later. Lindsay, Mohan, and Pirahesh <ref> [LMP86] </ref> describe the lazy method used in Starburst [HCL + 90]. Mohan and Haderle [MH94] describe a newer lazy technique and survey other implementation techniques related to space reservation.
Reference: [MH94] <author> C. Mohan and D. Haderle. </author> <title> Algorithms for Flexible Space Management in Transaction Systems Supporting Fine-Granularity Locking. </title> <booktitle> In Proceedings of the International Conference on Extending Database Technology, </booktitle> <year> 1994. </year>
Reference-contexts: Space maps are used by many systems, including Rdb [HE95], DB2 [IBM89], and Starburst [HCL + 90], each of which calls them by a different name. In this paper, we use the term FSIP (Free Space Inventory Page) used by Mohan and Haderle <ref> [MH94] </ref> 2 . FSIPs are pages placed at well-known positions of a volume or file that contain summary information about the amount of free space in each of a set of other pages. <p> We have decided to focus our efforts on FSIP-based systems, as they are more common than free lists, and because the methods used to maintain them in a transactional environment are well understood and well documented <ref> [MH94] </ref>. 3.2 Algorithms for Free Space Management There are two conflicting goals for a space-allocation algorithm: it should run fast, and it should waste very little disk space. <p> Lazy techniques normally also update a page's FSIP entry at the time the object is deleted, rather than waiting until later. Lindsay, Mohan, and Pirahesh [LMP86] describe the lazy method used in Starburst [HCL + 90]. Mohan and Haderle <ref> [MH94] </ref> describe a newer lazy technique and survey other implementation techniques related to space reservation.
Reference: [Moh95] <author> C. Mohan, </author> <month> October </month> <year> 1995. </year> <title> Private communication. </title>
Reference-contexts: This algorithm searches pages starting at the beginning of the file if the current request is smaller than the immediately preceding allocation request in the same file, but starts the search with the page used to allocate the previous object otherwise <ref> [Moh95] </ref>. The idea is that a "small" request is a signal to go back and try to fill in a hole.
Reference: [Stu95] <author> G. Sturner. </author> <title> Oracle 7: A User's and Developer's Guide. </title> <publisher> International Thompson Pushlishing Co., </publisher> <year> 1995. </year>
Reference-contexts: The 16th code is therefore used to indicate pages that do not currently belong to any file. to cross a predetermined free-space threshold. Free lists are used in commercial systems much less frequently than FSIPs. In fact, Oracle is the only system we know that uses them <ref> [Stu95] </ref>. Free lists can be tricky to maintain in a transactional environment. In particular, aborting a transaction that has made modifications to a free list can be difficult if other transactions have made subsequent modifications to the list.
Reference: [Tan87] <author> Tandem Database Group. </author> <title> NonStop SQL: A Distributed High Performance, High Availability Implementation of SQL. In High Performance Transaction Systems. </title> <publisher> Spring Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Some systems, such as Sybase [Kir93], point to records via their physical addresses within the B + tree, requiring costly updates to all secondary indices whenever a record is moved. Other systems, such as Tandem's NonStop SQL <ref> [Tan87] </ref>, use the primary key itself as a "pointer," incurring an extra level of index traversal on each lookup through a secondary index. A more common file organization in current relational systems is a heap file, which is simply an unordered set of pages.
References-found: 14

