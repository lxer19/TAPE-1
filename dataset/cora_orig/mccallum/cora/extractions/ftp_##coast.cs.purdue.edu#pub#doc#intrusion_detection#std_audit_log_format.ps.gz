URL: ftp://coast.cs.purdue.edu/pub/doc/intrusion_detection/std_audit_log_format.ps.gz
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ24.html
Root-URL: http://www.cs.purdue.edu
Title: A STANDARD AUDIT TRAIL FORMAT  
Author: Matt Bishop 
Address: Davis, CA 95616-8562  
Affiliation: Department of Computer Science University of California at Davis  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Audit, </author> <title> Control, and Security Issues in RACF Environments, Technical Reference Series No. 37052, Ernst & Whinney; available from The EDP Auditors Foundation, </title> <publisher> Inc., Carol Stream, </publisher> <address> IL (1992). </address>
Reference-contexts: Again, the paper gives no examples, but clearly the standard format provides enough exibility to allow the records to be standardized. RACF RACF <ref> [1] </ref> is a security enhancement package for the IBM MVS operating system and VM environment.
Reference: [2] <author> D. Banning, G. Ellingwood, C. Franklin, C. Muckenhirn, and D. Price, </author> <title> Auditing of Distributed Systems, </title> <booktitle> 14th National Computer Security Conference Proceedings pp. </booktitle> <month> 59-68 </month> <year> (1991). </year>
Reference-contexts: This paper speaks to neither point; nor does it claim to. The architecture of a distributed auditing system is beyond the scope of this paper, but the essentials of one such system are described in <ref> [2] </ref>. That paper does not deal with reconciliation of logs from heterogeneous systems, which is a very deep research question. This paper presents work that is a step in the direction of a solution by eliminating the need to have the reconciliator understand the vendors log format.
Reference: [3] <author> M. Bishop, </author> <title> Goal-Oriented Auditing and Logging, </title> <note> unpublished. </note>
Reference-contexts: Section 5 concludes with some observations and suggestions for future work. Proposed Standard We select as our goal the definition of a standard log record format. We explicitly do not attempt to standardize the events or fields (also called attributes) that are to be recorded; as argued in <ref> [3] </ref>, that is more properly a function of policy and not of information interchange. Users of this format will have to use common field names when interoperating, and these common names could form the basis for another standard. <p> Conclusion This paper has presented a very exible, portable, extensible standard log format. We have demonstrated its use by applying it to several different formats of log records. The key issue is, of course, what to log. As shown in <ref> [3] </ref>, what to log depends on both the implementation of system logging mechanisms and the needs of the security policy to be enforced. This paper speaks to neither point; nor does it claim to.
Reference: [4] <author> Installing, </author> <title> Administering, and Using the Basic Security Module, Sun Microsystems, </title> <publisher> Inc., </publisher> <address> Mountain View, CA (April 1992). </address>
Reference-contexts: We do so by examining log records for several systems. A Comparison of The Standard Log Format with Other Formats In this section, we describe several log record formats, and show how they can be mapped into the standard audit format. Basic Security Module The Basic Security Module (BSM) <ref> [4] </ref> is an enhancement to SunOS system security. Each log record is made up of a sequence of tokens and, like the standard format, the record size is not fixed; there is a begin and an end token.
Reference: [5] <author> K. N. Rao, </author> <title> Security Audit for Embedded Avionics Systems, </title> <booktitle> Proceedings of the Fifth Annual Computer Security Applications Conference pp. </booktitle> <month> 7884 (Dec. </month> <year> 1989). </year>
Reference-contexts: Third, the label field and session id field are omitted as the values in the svr4++ log record fields show the system did not provide those. This makes the log more readable. A Log for an Embedded Avionics System The study of log records for an avionics system <ref> [5] </ref> may seem far from the point of this paper, but as we claim the format is general enough for all purposes, this serves as one way to test our claim.
Reference: [6] <author> D. M. Ritchie and K. Thompson, </author> <title> The UNIX Time-Sharing System, </title> <journal> Communications of the ACM 17(7) pp. </journal> <month> 365-374 </month> <year> (1974). </year>
Reference-contexts: For example, each of [4][5][7][8] are specific to a particular type of operating system, although the format described in [8] is meant to be general enough for third-party vendors to use. The format in [9] is specifically designed for the detection of misuse or intrusion in UNIX systems <ref> [6] </ref> and not for other situations such as financial transaction processing. Finally, the proposed POSIX standard [10] does not define a log format, but an application programming interface for accessing the log files a system produces.
Reference: [7] <author> K. F. Seiden and J. P. Melanson, </author> <title> The Auditing Facility for a VMM Security Kernel, </title> <booktitle> Proceedings of the 1990 IEEE Symposium on Research in Security and Privacy pp. </booktitle> <month> 262-277 </month> <year> (1992). </year>
Reference-contexts: VAX VMM Security Kernel The VAX VMM security kernel is a virtual machine monitor which has extensive auditing abilities designed to meet the requirements of the A1 class of the Orange Book <ref> [7] </ref>.
Reference: [8] <author> W. Olin Sibert, </author> <title> Auditing in a Distributed System: Secure SunOS Audit Trails, </title> <booktitle> 11th National Computer Security Conference pp. </booktitle> <month> 81-91 </month> <year> (1988). </year>
Reference-contexts: Accepting existing log formats as standard violates one or more of these goals. For example, each of [4][5][7]<ref> [8] </ref> are specific to a particular type of operating system, although the format described in [8] is meant to be general enough for third-party vendors to use. The format in [9] is specifically designed for the detection of misuse or intrusion in UNIX systems [6] and not for other situations such as financial transaction processing. <p> Basically, one cannot predict all attributes that will need to be logged; hence, one cannot rely on position. SunOS MLS Logs SunOS MLS, the multilevel secure version of SunOS, produces logs very similar to those of the BSM <ref> [8] </ref>. Log records are not fixed length, but there is no trailer token; the header token includes a length, type, and time field. <p> The average size of a log record is between 120 and 180 bytes; compression reduces this appreciably (by roughly a factor of 4 to 8, depending on the records contents). A simplified example of a SunOS MLS log record is given in <ref> [8] </ref>: header,120,AUE_UNLINK,Wed Sep 18 11:35:28 1991, + 570000 msec, process,bishop,root,root,daemon,1234, label,confidential,nuclear,crypto pathname,/,/usr/holly,../matt/tmp/junkfile return,Error 0,5 trailer,120 Put into the standard log format, this looks like: #S#event=AUE_UNLINK#date=09181991@113528#usedtime=570000#I# #logid=bishop#ruid=root#euid=root#rgid=daemon#procid=1234#I# #seclevel=confidential#class=nuclear#class=crypto#I# #rootdir=/#cwd=/usr/holly#pathname=../matt/tmp/junkfile#I# #errno=0#retval=5#E# Again, note the standard log format simply presents the information in another way.
Reference: [9] <author> Stephen E. Smaha, </author> <title> svr4++, A Common Audit Trail Interchange Format for Unix, </title> <institution> Haystack Laboratories, Inc., Austin, </institution> <address> TX (Oct. 5, </address> <year> 1994). </year>
Reference-contexts: Accepting existing log formats as standard violates one or more of these goals. For example, each of [4][5][7][8] are specific to a particular type of operating system, although the format described in [8] is meant to be general enough for third-party vendors to use. The format in <ref> [9] </ref> is specifically designed for the detection of misuse or intrusion in UNIX systems [6] and not for other situations such as financial transaction processing. Finally, the proposed POSIX standard [10] does not define a log format, but an application programming interface for accessing the log files a system produces. <p> To be fair, it was intended only for use in the VAX security kernel, and for that purpose appears to be quite good. svr4++ UNIX Log FIle Format This log format <ref> [9] </ref> is an ASCII format based on the logging format used in OSF/1.
Reference: [10] <institution> Standard for Information Technology Portable Operating System Interface (POSIX) Part I: System Application Protgram Interface (API), Report 1003.1e, </institution> <month> (April </month> <year> 1994). </year>
Reference-contexts: The format in [9] is specifically designed for the detection of misuse or intrusion in UNIX systems [6] and not for other situations such as financial transaction processing. Finally, the proposed POSIX standard <ref> [10] </ref> does not define a log format, but an application programming interface for accessing the log files a system produces. As the problem posed here includes moving the log files across networks and among heterogeneous platforms, use of such an interface in this context is inappropriate.
References-found: 10

