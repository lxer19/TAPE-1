URL: http://www.cs.wustl.edu/~schmidt/OOPSLA-95/html/papers/atomobj.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/OOPSLA-95/html/papers.html
Root-URL: 
Email: Rito.Silva@inesc.pt  
Phone: Tel: +351-1-3100287, Fax: +351-1-525843  
Title: Local Serialization Pattern  
Author: Ant onio Rito Silva, Jo ao Pereira and Pedro Sousa R. Alves Redol n o 
Address: Lisbon  9, 1000 Lisboa, PORTUGAL  
Affiliation: INESC/IST Technical University of  
Abstract: This paper describes the Local Serialization pattern which decouples object concurrency control policies from object-specific algorithm semantics and concurrency generation policies. The pattern was designed in the context of a development process for distributed applications which considers concerns and abstractions. Concerns are the distribution issues that should be solved during the development process. Concerns are divided into three levels of abstraction: model, policy and mechanism. The Local Serialization pattern intends to support policies for the concurrency control concern within a shared resource. 
Abstract-found: 1
Intro-found: 1
Reference: [Bernstein 87] <author> Philip A. Bernstein and Nathan Good-man. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: These annotations define a compatibility matrix (we support it by operation compatible of the Access Mode object), and a precondition of method execution (we support it in the Require object). Database systems offer automatic concurrency control on the persistent store <ref> [Bernstein 87] </ref>. The Local Serialization pattern is used in database management systems where only read and write accesses are considered. Distributed systems, e.g. Argus [Liskov 88], Aval-on [Eppinger 91], Arjuna [Shrivastava 91] and Her-mes/ST [Fazzolare 93], use the Local Serialization pattern encapsulated in the platform mechanisms.
Reference: [Coplien 92] <author> James O. Coplien. </author> <title> Advanced C++ Programming Styles and Idioms. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1992. </year>
Reference-contexts: The implementations of consumer-producer and of reader-writer policies are shown. * Definition of atomic interfaces. The atomic interface objects are not reusable since they must preserve the signature of the original class. Nevertheless, they can be automatically generated by using the envelope/letter idiom described in <ref> [Coplien 92] </ref>. Class AtomicInterfaceX interfaces with con-currency generation (ActivityContext) and concurrency control (Controller) policies.
Reference: [Eppinger 91] <author> Jeffrey L. Eppinger, Lily B. Mummert, and Alfred Z. Spector. </author> <note> Camelot and Avalon: </note>
Reference-contexts: Database systems offer automatic concurrency control on the persistent store [Bernstein 87]. The Local Serialization pattern is used in database management systems where only read and write accesses are considered. Distributed systems, e.g. Argus [Liskov 88], Aval-on <ref> [Eppinger 91] </ref>, Arjuna [Shrivastava 91] and Her-mes/ST [Fazzolare 93], use the Local Serialization pattern encapsulated in the platform mechanisms. Argus uses a pessimistic concurrency control in the context of atomic objects [Weihl 84].
References-found: 3

