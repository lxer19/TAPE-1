URL: ftp://ftp.cs.cmu.edu/project/chimera/cjp.icra96.ps.gz
Refering-URL: http://www.cs.cmu.edu/~kem/ri/unused_pages/aml-pubs.html
Root-URL: 
Title: 1434 A Rapidly Deployable Manipulator System  
Author: Christiaan J.J. Paredis, H. Benjamin Brown, Pradeep K. Khosla 
Address: Pittsburgh, PA 15213  
Affiliation: Department of Electrical and Computer Engineering and The Robotics Institute, Carnegie Mellon University,  
Abstract: : 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> ARCNET Trade Association, ANSI/ATA 878.1Local Area Network: </institution> <note> Token Bus (version 1.10) </note>
Reference-contexts: The communication is done in a serial fashion over an RS-485 bus which runs through the length of the manipulator. We use the ARCNET protocol <ref> [1] </ref> implemented on a dedicated IC (SMC COM20020). ARCNET is a deterministic token-passing network scheme which avoids network collisions and guarantees each node its time to access the network.
Reference: [2] <author> B. Benhabib and M. Q. Dai, </author> <title> Mechanical Design of a Modular Robot for Industrial Applications, </title> <journal> Journal of Manufacturing Systems, </journal> <volume> Vol. 10, No. 4, </volume> <pages> pp. 297306, </pages> <year> 1991. </year>
Reference-contexts: One such module is shown in Figure 2. By combining these general purpose modules, a wide range of special purpose manipulators can be assembled. Recently, there has been considerable interest in the idea of modular manipulators <ref> [2, 4, 5, 7, 9, 10, 14] </ref>, for research applications as well as for industrial applications. However, most of these systems lack the property of reconfig-urability, which is key to the concept of rapidly deployable systems.
Reference: [3] <author> I.-M. Chen, and J. W. Burdick, </author> <title> Determining Task Optimal Modular Robot Assembly Configurations, </title> <booktitle> in Proceedings of the 1995 IEEE International Conference on Robotics and Automation, </booktitle> <address> Nagoya, Japan, </address> <month> May 2127, </month> <year> 1995. </year>
Reference-contexts: This software takes as input descriptions of the task and of the available manipulator modules; it generates as output a modular assembly configuration optimally suited to perform the given task. Several different approaches have been used successfully to solve simplified instances of this complicated problem <ref> [3, 8, 12, 13] </ref>. A third important building block of a rapidly deploy-able manipulator system is a framework for the generation of control software.
Reference: [4] <author> R. Cohen et al. </author> <title> Conceptual Design of a Modular Robot, </title> <journal> Transactions of the ASME: Journal of Mechanical Design, </journal> <volume> Vol. 114, </volume> <pages> pp. 117125, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: One such module is shown in Figure 2. By combining these general purpose modules, a wide range of special purpose manipulators can be assembled. Recently, there has been considerable interest in the idea of modular manipulators <ref> [2, 4, 5, 7, 9, 10, 14] </ref>, for research applications as well as for industrial applications. However, most of these systems lack the property of reconfig-urability, which is key to the concept of rapidly deployable systems.

Reference: [6] <author> M. W. Gertz, and P. K. Khosla, Onika: </author> <title> A Multilevel Human-Machine Interface for Real-Time Sensor-Based Robotic Systems, </title> <booktitle> in Proceedings of the 1994 Annual Meeting of the American Nuclear Society, </booktitle> <address> June 1994, New Orleans, Louisiana. </address>
Reference-contexts: This paradigm combines the concept of reusable and reconfigurable software components, as is supported by the Chimera real-time operating system [15], with a graphical user interface and a visual programming language, implemented in Onika <ref> [6] </ref>. Although the software assembly paradigm provides the software infrastructure for rapidly programming manipulator systems, it does not solve the programming problem itself. Explicit programming of sensor-based manipulator systems is cumbersome due to the extensive amount of detail which must be specified for the robot to perform the task.
Reference: [7] <author> R. Hui et al. </author> <title> Design of the IRIS Facilitya Modular, Reconfigurable and Expandable Robot Test Bed, </title> <booktitle> in Proceedings of the 1993 IEEE International Conference on Robotics and Automation, </booktitle> <address> Atlanta, Georgia, </address> <month> May 26, </month> <year> 1993, </year> <pages> pp. 155160. </pages>
Reference-contexts: One such module is shown in Figure 2. By combining these general purpose modules, a wide range of special purpose manipulators can be assembled. Recently, there has been considerable interest in the idea of modular manipulators <ref> [2, 4, 5, 7, 9, 10, 14] </ref>, for research applications as well as for industrial applications. However, most of these systems lack the property of reconfig-urability, which is key to the concept of rapidly deployable systems.
Reference: [8] <author> J.-O. Kim, and P. K. Khosla, </author> <title> A Multi-Population Genetic Algorithm and Its Application to Design of Manipulators, </title> <booktitle> in Proceedings of the 1992 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS92), </booktitle> <address> Raleigh, NC, </address> <month> July 710, </month> <year> 1992. </year>
Reference-contexts: This software takes as input descriptions of the task and of the available manipulator modules; it generates as output a modular assembly configuration optimally suited to perform the given task. Several different approaches have been used successfully to solve simplified instances of this complicated problem <ref> [3, 8, 12, 13] </ref>. A third important building block of a rapidly deploy-able manipulator system is a framework for the generation of control software.
Reference: [9] <author> S. Kotosaka, et al. </author> <title> Development of a Functionally Adaptive and Robust Manipulator, </title> <booktitle> in Proceedings of the International Symposium on Distributed Autonomous Robotic Systems, </booktitle> <address> Wako, Saitama, Japan, </address> <month> Sep. 2122, </month> <year> 1992, </year> <pages> pp. 85 90. </pages>
Reference-contexts: One such module is shown in Figure 2. By combining these general purpose modules, a wide range of special purpose manipulators can be assembled. Recently, there has been considerable interest in the idea of modular manipulators <ref> [2, 4, 5, 7, 9, 10, 14] </ref>, for research applications as well as for industrial applications. However, most of these systems lack the property of reconfig-urability, which is key to the concept of rapidly deployable systems.
Reference: [10] <author> T. Matsumaru, </author> <title> Design and Control of the Modular Robot System: </title> <booktitle> TOMMS, in Proceedings of the 1995 IEEE International Conference on Robotics and Automation, </booktitle> <address> Nagoya, Japan, </address> <month> May 2127, </month> <year> 1995, </year> <pages> pp. 21252131. </pages>
Reference-contexts: One such module is shown in Figure 2. By combining these general purpose modules, a wide range of special purpose manipulators can be assembled. Recently, there has been considerable interest in the idea of modular manipulators <ref> [2, 4, 5, 7, 9, 10, 14] </ref>, for research applications as well as for industrial applications. However, most of these systems lack the property of reconfig-urability, which is key to the concept of rapidly deployable systems.
Reference: [11] <author> J. D. Morrow and P. K. Khosla, </author> <title> Sensorimotor Primitives for Robotic Assembly Skills, </title> <booktitle> in Proceedings of the 1995 IEEE International Conference on Robotics and Automation, </booktitle> <address> Nagoya, Japan, </address> <month> May 21-27, </month> <year> 1995. </year>
Reference-contexts: The software synthesis problem for sensor-based robots can be simplified dramatically, by providing robust robotic skills, that is, encapsulated strategies for accomplishing common tasks in the robots task domain <ref> [11] </ref>. Such robotic skills can then be used at the task level planning stage without having to consider any of the low-level details.
Reference: [12] <author> S. Murthy, P. K. Khosla, and S. Talukdar, </author> <title> Designing Manipulators from Task Requirements: An Asynchronous Team Approach, </title> <booktitle> in Proceedings of the 1st WWW Workshop on Multiple Distributed Robotic Systems, </booktitle> <address> Nagoya Japan, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: This software takes as input descriptions of the task and of the available manipulator modules; it generates as output a modular assembly configuration optimally suited to perform the given task. Several different approaches have been used successfully to solve simplified instances of this complicated problem <ref> [3, 8, 12, 13] </ref>. A third important building block of a rapidly deploy-able manipulator system is a framework for the generation of control software.
Reference: [13] <author> C. J. J. Paredis and P. K. Khosla, </author> <title> Kinematic Design of Serial Link Manipulators From Task Specifications, </title> <journal> International Journal of Robotics Research, </journal> <volume> Vol. 12, No. 3, </volume> <pages> pp. 274286, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: This software takes as input descriptions of the task and of the available manipulator modules; it generates as output a modular assembly configuration optimally suited to perform the given task. Several different approaches have been used successfully to solve simplified instances of this complicated problem <ref> [3, 8, 12, 13] </ref>. A third important building block of a rapidly deploy-able manipulator system is a framework for the generation of control software.
Reference: [14] <author> D. Schmitz, P. Khosla, and T. Kanade, </author> <title> The CMU Reconfigurable Modular Manipulator System, </title> <booktitle> in Proceedings of the 19th International Symposium on Experimental Robotics, </booktitle> <address> Sydney, Australia, </address> <month> November 610, </month> <year> 1988, </year> <pages> pp 473488. </pages>
Reference-contexts: One such module is shown in Figure 2. By combining these general purpose modules, a wide range of special purpose manipulators can be assembled. Recently, there has been considerable interest in the idea of modular manipulators <ref> [2, 4, 5, 7, 9, 10, 14] </ref>, for research applications as well as for industrial applications. However, most of these systems lack the property of reconfig-urability, which is key to the concept of rapidly deployable systems.
Reference: [15] <author> D. B. Stewart, and P. K. Khosla, </author> <title> Rapid Development of Robotic Applications using Component-Based Real-Time Software, </title> <booktitle> in Proceedings of the 1995 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS95), Pittsburgh, Pennsylvania, </booktitle> <volume> August 59, Vol. 1, </volume> <pages> pp. 465470. </pages>
Reference-contexts: To reduce the complexity of software generation for real-time sensor-based control systems, a software paradigm called software assembly has been proposed in the Advanced Manipulators Laboratory at CMU. This paradigm combines the concept of reusable and reconfigurable software components, as is supported by the Chimera real-time operating system <ref> [15] </ref>, with a graphical user interface and a visual programming language, implemented in Onika [6]. Although the software assembly paradigm provides the software infrastructure for rapidly programming manipulator systems, it does not solve the programming problem itself. <p> The modules still send sensor readings back to the host interface to be used in the computation of the subsequent feed-forward torque. 5 Modular and reconfigurable control software The control software for the RMMS has been developed using the Chimera real-time operating system, which supports reconfigurable and reusable software components <ref> [15] </ref>. The software components used to control the RMMS are listed in Table 1. The trjjline, dls, and grav_comp components require the knowledge of certain configuration dependent parameters of the RMMS, such as the number of degrees-of-freedom, the Denavit-Harten-berg parameters etc.
Reference: [16] <author> D. B. Stewart, </author> <title> Real-Time Software Design and Analysis of Reconfigurable Multi-Sensor Based Systems, </title> <type> Ph.D. Dissertation, </type> <institution> Carnegie Mellon University, Department of Electrical and Computer Engineering, </institution> <address> Pittsburgh, PA, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: The communication between the modules and the host interface is at 400Hz, which can differ from the cycle frequency of the rmms software component. Since we use a triple buffer mechanism <ref> [16] </ref> RS485 VME BUS Ironics RTPU ARMbus Host card Host Sun 4SGI Crimson Node 1 Node 2 1438 for the communication through the dual-port RAM on the ARMbus host interface, no synchronization or handshaking is necessary.
References-found: 15

