URL: http://www.cs.indiana.edu/pub/cardone/review.ps
Refering-URL: http://www.cs.indiana.edu/pub/cardone/
Root-URL: http://www.cs.indiana.edu
Title: Introduction to "Concrete Domains"  
Author: F. Cardone 
Keyword: Data types  
Affiliation: computer science.  
Abstract: Despite its influence on the subsequent research in denotational semantics, this paper still retains the esoteric character of a powerful piece of mathematical machinery whose motivations and applications have to be found elsewhere, scattered through the neighboring literature. Here I make an attempt to trace the history of the foundational concerns leading to concrete domains, by composing a selection (far from comprehensive) of what I believe to be the relevant quotations. 1 The evident connections of the theoretical motivations of Kahn and Plotkin [13] to problems tackled in recent research suggest that this translation of the original IRIA Rapport de Recherche should perhaps be considered as another "fifteen years later" paper. The interpretation of "data types as lattices" is known to be at the very heart of the first applications of domains to the denotational semantics of programming languages, and constitutes one of the leading intuitions in the development of the basic notions of domain theory. Data can be structured in many ways: ordered tuples, lists, arrays, trees, streams, and even operations and functions. The last point becomes clear if one thinks of parameters. We would normally hardly consider the pairing function xy:hx; yi as being in itself a piece of data. But if we treat the first variable fl This paper was written as a review of the English translation of the monograph [13] by G. Kahn and G. Plotkin. I am grateful to all the friends who gave me useful advice while writing it, especially Paolo Boldi, Paola Bonizzoni, Mariangiola Dezani-Ciancaglini, Piergiorgio Odifreddi and Nicoletta Sabadini. 
Abstract-found: 1
Intro-found: 1
Reference: [2] <author> G. Berry. Calculs ascendants du programme d'Ackermann: </author> <title> Analyse du programme de J. </title> <journal> Arsac. RAIRO Informatique Theorique et applications, </journal> <volume> 11 </volume> <pages> 113-126, </pages> <year> 1977. </year>
Reference-contexts: the graph, we shall call minimal producer of x, abbreviated mp (x), the set of immediate predecessors of x, and domain of x, abbreviated dom (x), the set of all predecessors of x: dom (x) is the set of intermediate values necessary and sufficient for the computation of x. (Berry <ref> [2] </ref>) Sequentiality In this framework it is possible to consider intensional aspects of computa tions, for example those related to determinism in program evaluation: Let or denote the "parallel or" function (? or true = true or ? = true), and consider the following program, which tests if z is the
Reference: [3] <author> E. Best and C. Fernandez. </author> <title> Nonsequential Processes. </title> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: to the latter definition, Winskel (loc. cit.) also proposes to call E discrete provided it is a closed set such that any two 15 events can be separated by an open neighborhood. 4 Alternative definitions of discreteness arise in Petri's theory of concurrency (see the discussion in Best and Fernandez <ref> [3] </ref>), for example the notion of K-density, that was also assumed as an axiom in the early formalization of relativistic space-time by Reichenbach and Carnap.
Reference: [4] <editor> C. Bottinger. </editor> <booktitle> On Scott's thesis for domains of information and well-quasi-orderings. Theoretical Computer Science, </booktitle> <volume> 70 </volume> <pages> 151-158, </pages> <year> 1990. </year>
Reference-contexts: if C is a chain of events in the activation ordering from E 1 to E 2 , then C is finite. (Hewitt and Baker [9]) The reason for introducing this axiom was to rule out instances of "Zeno machines" like the following: * A machine 3 Recent research (Bottinger <ref> [4] </ref>) has refined this result, relating partial orders that obey Scott's thesis and well-quasi-orderings. 14 which executes its first instruction in 1 microsecond, its sec-ond in 1 2 microseconds, its third in 1 4 microsecond, and so on.
Reference: [5] <author> W.D. Clinger. </author> <title> Foundations of actor semantics. </title> <type> Technical Report AI-TR-633, </type> <institution> Artificial Intelligence Laboratory, M.I.T., </institution> <month> May, </month> <year> 1981. </year>
Reference-contexts: After one minute, it ceases to change state. At one second into the second minute, is it on or off ? (Clinger <ref> [5] </ref>) The non-existence of Zeno machines should also follow from the fact that events occurring in computations form discrete collections. Among the sev eral possible definitions of discreteness for sets of events, the following are based on the embedding of events into real time and space: 1. <p> This condition is equivalent to requiring that for every bounded interval I IR, the intersection I " g (E) contains finitely many points, and is also equivalent to the existence of a global time which only takes integer values and is injective (these equivalences are stated in Clinger <ref> [5] </ref>, where they are used as a guideline in deriving the laws constraining the ordering of events). 2.
Reference: [6] <editor> P.-L. Curien. Algorithmes sequentiels sur structures de donnees concretes. In B. Robinet, editor, </editor> <title> Lambda Calcul et semantique formelle des langages de programmation. </title> <institution> Actes de la sixieme Ecole de Print-emps d'informatique theorique, pages 157-182. LITP et Ecole Nationale Superieure de Techniques Avancees, </institution> <year> 1979. </year>
Reference-contexts: The concrete domains of Kahn and Plotkin are based exactly on these notions. (Curien <ref> [6] </ref>) Observe that sequentiality becomes in this context a property of functions, as opposed to algorithms.
Reference: [7] <author> P.-L. Curien. </author> <title> Categorical Combinators, Sequential Algorithms and Functional Programming. </title> <publisher> Pitman, </publisher> <year> 1986. </year>
Reference-contexts: (partial) terms of having a normal form has a characteristic function which is sequential in the sense of Kahn and Plotkin. (This exploits the observation that partial terms over a (first-order, one-sorted) signature form a concrete domain generated by an information matrix directly obtained from their tree representation (see Curien <ref> [7] </ref>).) Events One interpretation of concrete domains, justified by the Representation Theorem and several of the above quotations, leads to regard them as a theory of events.
Reference: [8] <author> H. Friedman. </author> <title> Algorithmic procedures, generalized Turing algorithms, and elementary recursion theory. </title> <editor> In R.O. Gandy and C.M.E. Yates, editors, </editor> <booktitle> Logic Colloquium '69, </booktitle> <pages> pages 361-389. </pages> <publisher> North-Holland, </publisher> <year> 1971. </year>
Reference-contexts: It may be of some interest to emphasize the connections between the semantical account of sequentiality and the notions of `serial procedure' rooted in Friedman's theory of computability over ab stract structures (Friedman <ref> [8] </ref>) and the theory of program schemata.
Reference: [9] <author> C. Hewitt and H. Baker. </author> <title> Actors and Continuous Functionals. </title> <editor> In E.J. Neuhold, editor, </editor> <booktitle> Formal Description of Programming Concepts, </booktitle> <pages> pages 367-390. </pages> <publisher> North-Holland, </publisher> <year> 1978. </year>
Reference-contexts: the activation ordering, which describes their causal relationships: among the laws constraining the behavior of actor systems, the Law of Finite Activation Chains states that if C is a chain of events in the activation ordering from E 1 to E 2 , then C is finite. (Hewitt and Baker <ref> [9] </ref>) The reason for introducing this axiom was to rule out instances of "Zeno machines" like the following: * A machine 3 Recent research (Bottinger [4]) has refined this result, relating partial orders that obey Scott's thesis and well-quasi-orderings. 14 which executes its first instruction in 1 microsecond, its sec-ond in <p> less than 2 microseconds, but could also solve the `halting problem.' It could do this by simulating a normal computer running on some input, and if the simulation were still running after 2 microseconds, it could conclude that the simulated machine does not halt on that input. (Hewitt and Baker <ref> [9] </ref>) * A related device is Huffman's Lamp, which, when switched on, lights for only thirty seconds before turning itself off for fifteen seconds, and then comes back on for seven and a half seconds before turning off for three and three quarters seconds, and so on.
Reference: [10] <author> G. Huet and J.-J. Levy. </author> <title> Call by need computations in non-ambiguous linear term rewriting systems. </title> <booktitle> Rapport Laboria 359, IRIA, </booktitle> <month> Aug. </month> <year> 1979. </year>
Reference-contexts: filled. (Winskel [29]) Parallel to the original application of (V-)sequentiality to the analysis of correctness and optimality of reduction strategies for recursive programs, one of the first uses of the Kahn-Plotkin formulation of sequentiality was in the study of reduction strategies for orthogonal term rewriting systems by Huet and Levy <ref> [10] </ref>, where sequential rewriting systems are defined as those for which the property of (partial) terms of having a normal form has a characteristic function which is sequential in the sense of Kahn and Plotkin. (This exploits the observation that partial terms over a (first-order, one-sorted) signature form a concrete domain
Reference: [11] <author> G. Kahn. </author> <title> The semantics of a simple language for parallel programming. </title> <editor> In J.L. Rosenfeld, editor, </editor> <booktitle> Information Processing 74, </booktitle> <pages> pages 471-475. </pages> <publisher> North-Holland, </publisher> <year> 1974. </year>
Reference-contexts: On the one hand, "concrete datatypes" turn out to subsume the data types that were necessary for extending the coroutine model of parallel computation introduced by Kahn <ref> [11] </ref>, in which the nodes of a dataflow network were interpreted as stream processing functions: A channel is an example of dynamic data structure, i.e., a structure which is gradually generated by processes embedded within itself. <p> , the functions x first (x) (take the first letter of x) x rest (x) (erase the first letter of x) and x; y x y (append the first letter of x to y) are sequential. (The relevance of these functions and data-type to parallel programs is shown in Kahn <ref> [11] </ref>.) (Vuillemin [28]) Essential to both definitions is a well-defined notion of "argument place" of a function, which is basically syntactical in nature. Indeed, consider the strict function s @ s s @ -f s &gt; O mapping the three upper elements of its domain to &gt;.
Reference: [12] <author> G. Kahn and D.B. MacQueen. </author> <title> Coroutines and networks of parallel processes. </title> <editor> In B. Gilchrist, editor, </editor> <booktitle> Information Processing 77, </booktitle> <pages> pages 993-998. </pages> <publisher> North-Holland, </publisher> <year> 1977. </year>
Reference-contexts: For example, in a compiler the abstract syntax tree might be a dynamic tree generated from the input text by a number of parser processes operating in parallel, while several consumer processes work from the top down generating code. (Kahn and MacQueen <ref> [12] </ref>, page 997) On the other hand, equational programming provided the source for most of the intuitions underlying the axiomatization of concrete domains, and some of these were exploited in related works on the evaluation of recursive programs.
Reference: [13] <author> G. Kahn and G. D. Plotkin. Domaines concrets. </author> <note> Rapport 336, IRIA Laboria, 1978. 17 </note>
Reference-contexts: Here I make an attempt to trace the history of the foundational concerns leading to concrete domains, by composing a selection (far from comprehensive) of what I believe to be the relevant quotations. 1 The evident connections of the theoretical motivations of Kahn and Plotkin <ref> [13] </ref> to problems tackled in recent research suggest that this translation of the original IRIA Rapport de Recherche should perhaps be considered as another "fifteen years later" paper. <p> We would normally hardly consider the pairing function xy:hx; yi as being in itself a piece of data. But if we treat the first variable fl This paper was written as a review of the English translation of the monograph <ref> [13] </ref> by G. Kahn and G. Plotkin.
Reference: [14] <author> R.D. Luce. </author> <title> Semiorders and a theory of utility discrimination. </title> <journal> Econo--metrica, </journal> <volume> 24 </volume> <pages> 178-191, </pages> <year> 1956. </year>
Reference: [15] <author> A.R.G. Milner. </author> <title> Fully abstract models of typed lambda-calculi. </title> <journal> Theoretical Computer Science, </journal> <volume> 4 </volume> <pages> 1-23, </pages> <year> 1977. </year>
Reference-contexts: F; r 3 (x 1 ) = u r 1 (x 1 ) = F; r 2 (x 1 ) = u ; r 3 (x 1 ) = T (Shepherdson [27]) A semantical characterization of sequentiality was suggested by the construction of the fully abstract model for LCF (Milner <ref> [15] </ref>), where it is a feature of the definable first order functions. We wish not to extend the language, but to diminish the model. <p> Hence in our model all finite elements have this property, and so every element has the property also, since the property is preserved by directed F . Many continuous functions, in particular : [the parallel conditional], do not possess the property and so are missing from the model. (Milner <ref> [15] </ref>) This definition of sequential function, sometimes referred to as "M-sequen-tiality," can be phrased more explicitly by saying that a continuous function f : D 1 fi : : : fi D n ! D is sequential if either it is constant or, for some 0 i n, it is strict
Reference: [16] <author> M. Nielsen, G.D. Plotkin, and G. Winskel. </author> <title> Petri nets, event structures and domains, Part I. </title> <journal> Theoretical Computer Science, </journal> <volume> 13 </volume> <pages> 85-108, </pages> <year> 1981. </year>
Reference-contexts: happens because [In concrete datatypes] an event is imagined to occur at a fixed point in space and time; conflict between events is localised in that two conflicting events are enabled at the same time and are competing for the same point in space and time. (Nielsen, Plotkin and Winskel <ref> [16] </ref>)
Reference: [17] <author> C.A. </author> <title> Petri. Modelling as a communication discipline. </title> <editor> In H. Beilner and E. Gelenbe, editors, </editor> <title> Measuring, Modelling and Evaluating Computer Systems, </title> <address> Amsterdam, 1977. </address> <publisher> North-Holland. </publisher>
Reference: [18] <author> G.D. Plotkin. </author> <title> LCF considered as a programming language. </title> <journal> Theoretical Computer Science, </journal> <volume> 5(3) </volume> <pages> 223-256, </pages> <year> 1977. </year>
Reference-contexts: Roughly, the concrete datatypes should be effectively given cpo's for which a good notation exists so that notations for approximations to elements can be printed out, bit by bit. (Plotkin <ref> [18] </ref>) There were several developments in denotational semantics that prompted the investigation of these structures.
Reference: [19] <author> G.D. Plotkin. </author> <title> The category of complete partial orders: a tool for making meanings. </title> <booktitle> In Proceedings of the Summer School on Foundations of Artificial Intelligence and Computer Science. </booktitle> <institution> Istituto di Scienze dell'Informazione, Universita di Pisa, </institution> <month> June </month> <year> 1978. </year>
Reference-contexts: that e v f (x) implies that e v f (d) for some finite d v x] as an output event could hardly depend on infinitely many input events as a machine should only be able to do a finite amount of computation before causing a given output event (Plotkin <ref> [19] </ref>).
Reference: [20] <author> V.R. Pratt. </author> <title> Modeling concurrency with geometry. </title> <booktitle> In Proceedings 18 th Ann. ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 311-322. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1991. </year>
Reference-contexts: The use of the term `schedule' is suggested by the recent work of V. Pratt <ref> [21, 20] </ref>. 13 [: : : ] assume a process is modelled by a partial order on events, E = (E; ). [: : : ] We can choose to imagine some of the events of E as being events of input E 0 from some datatype, some as internal events,
Reference: [21] <author> V.R. Pratt. </author> <title> Event spaces and their linear logic. </title> <booktitle> In Proc. Second International Conference on Algebraic Methodology and Software Technology. </booktitle> <address> Springer, </address> <note> To appear. </note>
Reference-contexts: The use of the term `schedule' is suggested by the recent work of V. Pratt <ref> [21, 20] </ref>. 13 [: : : ] assume a process is modelled by a partial order on events, E = (E; ). [: : : ] We can choose to imagine some of the events of E as being events of input E 0 from some datatype, some as internal events,
Reference: [22] <author> D. Scott. </author> <title> Lattice theory, data types and semantics. </title> <editor> In P. Rustin, editor, </editor> <booktitle> Formal Semantics of Programming Languages, </booktitle> <pages> pages 65-106, </pages> <address> Englewood Cliffs, NJ, 1970. </address> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Among the concrete datatypes should be the denumerable discrete domains, and the cpo of all finite and infinite sequences of integers with v taken as the initial subsequence ordering, and also, perhaps, the cpo of real intervals described in <ref> [22] </ref>. Roughly, the concrete datatypes should be effectively given cpo's for which a good notation exists so that notations for approximations to elements can be printed out, bit by bit. (Plotkin [18]) There were several developments in denotational semantics that prompted the investigation of these structures.
Reference: [23] <author> D. Scott. </author> <title> Outline of a mathematical theory of computation. </title> <booktitle> In Proceedings of the Fourth Annual Princeton Conference on Information Sciences and Systems, </booktitle> <pages> pages 169-176, </pages> <year> 1970. </year>
Reference-contexts: This means we have to allow "incomplete" entities, like x, containing only "partial" information. (Scott <ref> [23] </ref>) 2 Concrete domains arose from an attempt to specialize this interpretation of data types to domains of first order data: their representation as "state spaces" of information matrices shows how this is possible by means of purely order-theoretic properties.
Reference: [24] <author> D. Scott. </author> <title> Data types as lattices. </title> <journal> SIAM Journal on Computing, </journal> <volume> 5 </volume> <pages> 522-587, </pages> <year> 1976. </year>
Reference-contexts: What then is a data type? Answer: a type of data. That is to say, a collection of data that have been grouped together for reasons of similarity of structure or perhaps mere convenience. (Scott <ref> [24] </ref>) More precisely, [: : : ] we can identify a data type with the set D of all objects of that type. But this is in itself too simple: the objects are structured and bear certain relations to one another, so the type is more than a set.
Reference: [25] <author> D. Scott. </author> <title> Domains for denotational semantics. </title> <editor> In M. Nielsen and E.M. Schmidt, editors, </editor> <booktitle> Proc. 9 th Int. Coll. on Automata, Languages and Programming, </booktitle> <volume> LNCS 140, </volume> <pages> pages 577-613. </pages> <publisher> Springer, </publisher> <year> 1982. </year> <month> 18 </month>
Reference-contexts: One possibility, leading to Scott domains (Scott <ref> [25] </ref>), is to regard elements as (consistent) propositional theories|an element is defined to be the set of propositions that are true of it, given sufficiently precise means for forming and composing propositions.
Reference: [26] <author> D. Scott and P. Suppes. </author> <title> Foundational aspects of theories of measure-ment. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 23 </volume> <pages> 113-128, </pages> <year> 1958. </year>
Reference: [27] <author> J.C. Shepherdson. </author> <title> Computation over abstract structures: serial and parallel procedures and Friedman's effective definitional schemes. In H.E. </title> <editor> Rose and J.C. Shepherdson, editors, </editor> <booktitle> Logic Colloquium '73, </booktitle> <pages> pages 445-513. </pages> <publisher> North-Holland, </publisher> <year> 1975. </year>
Reference-contexts: from the same structure) given by: r 1 (x 1 ) = T; r 2 (x 1 ) = F; r 3 (x 1 ) = u r 1 (x 1 ) = F; r 2 (x 1 ) = u ; r 3 (x 1 ) = T (Shepherdson <ref> [27] </ref>) A semantical characterization of sequentiality was suggested by the construction of the fully abstract model for LCF (Milner [15]), where it is a feature of the definable first order functions. We wish not to extend the language, but to diminish the model.
Reference: [28] <author> J. Vuillemin. </author> <title> Correct and optimal implementations of recursion in a simple programming language. </title> <journal> Journal of Computer and System Science, </journal> <volume> 9 </volume> <pages> 332-354, </pages> <year> 1974. </year>
Reference-contexts: functions x first (x) (take the first letter of x) x rest (x) (erase the first letter of x) and x; y x y (append the first letter of x to y) are sequential. (The relevance of these functions and data-type to parallel programs is shown in Kahn [11].) (Vuillemin <ref> [28] </ref>) Essential to both definitions is a well-defined notion of "argument place" of a function, which is basically syntactical in nature. Indeed, consider the strict function s @ s s @ -f s &gt; O mapping the three upper elements of its domain to &gt;.
Reference: [29] <author> G. Winskel. </author> <title> Events in computation. </title> <type> Ph.D. thesis, </type> <institution> University of Edin-burgh, Department of Computer Science, Edinburgh, </institution> <year> 1980. </year>
Reference-contexts: 8p 0 2 p (f (x))(9z = x:f (x) p 0 f (z)) 9p 2 p (x):8y = x:(f (x) p 0 f (y) ) x p y) This says to fill p 0 accessible from p (x) there is some p accessible from x which must be filled. (Winskel <ref> [29] </ref>) Parallel to the original application of (V-)sequentiality to the analysis of correctness and optimality of reduction strategies for recursive programs, one of the first uses of the Kahn-Plotkin formulation of sequentiality was in the study of reduction strategies for orthogonal term rewriting systems by Huet and Levy [10], where sequential <p> Although the connection with Petri's foundational work on processes did not contribute to the original definition of this class of domains, later work (notably Winskel <ref> [29] </ref>) has shown the advantages of an attempt to merge Scott's ideas on a qualitative account of the information content of data|a key step in the development of an abstract theory of computable functions, with the notions of conflict, concurrency and enabling of events that form part of the basic vocabulary <p> Confusion-free nets can be represented by the matrices of Kahn and Plotkin. Then conflict between events is localised [: : : ] All observers will agree whether or not conflict has been resolved and at which place the resolution occurred. (Winskel <ref> [29] </ref>) This happens because [In concrete datatypes] an event is imagined to occur at a fixed point in space and time; conflict between events is localised in that two conflicting events are enabled at the same time and are competing for the same point in space and time. (Nielsen, Plotkin and
Reference: [30] <author> G. Winskel. </author> <title> Event structures. In Petri Nets: Applications and Relationships to other models of concurrency, </title> <publisher> LNCS 255, </publisher> <pages> pages 325-392. </pages> <publisher> Springer, </publisher> <year> 1987. </year>
Reference-contexts: between two finite elements are finite, leading to axiom (I) for concrete domains and also, as in the above argument, to formally justify the requirement that computable functions must be continuous: 2 The restriction to partially ordered schedules is a simplification: domains generated from these are in fact distributive (Winskel <ref> [30] </ref>, Section 1.3). The use of the term `schedule' is suggested by the recent work of V. <p> E obeys Scott's thesis iff 8E 0 ; E 1 :(E 0 E & E 1 E ) f E 0 ;E 1 is continuous): [: : : ] The partial order E obeys Scott's thesis iff 8e 2 E:fe 0 2 E j e 0 eg is finite. (Winskel <ref> [30] </ref>, Section 1.4) 3 Similar finiteness requirements are made in the actor model of computation by Hewitt: in this model of computation each event consists of the arrival of message (or, better, a messenger actor) to an actor (the target actor of the event).
Reference: [31] <author> G. Winskel. </author> <title> An introduction to event structures. </title> <editor> In J.W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Linear Time, Branching Time and Partial Order in Logics and Models for Concurrency, </title> <publisher> LNCS 354, </publisher> <pages> pages 364-397. </pages> <publisher> Springer, </publisher> <year> 1988. </year> <month> 19 </month>
Reference-contexts: Viewing events as located in space-time, a set E of events is discrete if there is a positive * such that any two events of E can be separated by open spheres of radius *. (Winskel <ref> [31] </ref>, page 370) 3.
References-found: 30

