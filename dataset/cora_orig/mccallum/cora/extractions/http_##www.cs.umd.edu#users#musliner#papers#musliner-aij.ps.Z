URL: http://www.cs.umd.edu/users/musliner/papers/musliner-aij.ps.Z
Refering-URL: http://www.cs.umd.edu/users/musliner/
Root-URL: 
Email: musliner@umiacs.umd.edu  fdurfee,kgshing@eecs.umich.edu  
Title: World Modeling for the Dynamic Construction of Real-Time Control Plans  
Author: David J. Musliner Edmund H. Durfee and Kang G. Shin 
Keyword: Revision 4:1 Abbreviated title: World Modeling for Dynamic Real-Time Control Plans  
Note: To appear in AI Journal  
Address: College Park, MD 20742  Ann Arbor, Michigan 48109-2122  
Affiliation: Institute for Advanced Computer Studies The University of Maryland  Dept. of EE Computer Science The University of Michigan  
Abstract: As intelligent, autonomous systems are embedded in critical real-world environments, it becomes increasingly important to rigorously characterize how these systems will perform. Research in real-time computing and control has developed ways of proving that a given control system will meet the demands of an environment, but has not addressed the dynamic planning of control actions. Building an agent that can flexibly achieve its goals in changing environments requires a blending of real-time computing and AI technologies. The Cooperative Intelligent Real-time Control Architecture (CIRCA) implements this blending by executing complex AI methods and guaranteed real-time control plans on separate subsystems. We describe the formal model of agent/environment interactions that CIRCA uses to build control plans, and we show how those control plans are guaranteed to meet domain requirements. CIRCA's world model provides the information required to make real-time performance guarantees, but avoids unnecessary complexity. The work reported in this paper was supported in part by the National Science Foundation under Grants IRI-9209031 and IRI-9158473, by a NSF Graduate Fellowship, by the Office of Naval Research under Grant N00014-91-J-1115, and by the Arpa/Rome Laboratory Planning Initiative (F30602-93-C-0039). The opinions, findings, and recommendations expressed in this publication are those of the authors, and do not necessarily reflect the views of the funding agencies. This paper was written when David Musliner was a graduate student at the University of Michigan, Ann Arbor. Dr. Musliner is currently also affiliated with the University of Maryland Institute for Systems Research (NSF Grant NSFD CDR-88003012). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. E. Agre and D. Chapman, Pengi: </author> <title> An implementation of a theory of activity, </title> <booktitle> in: Proc. National Conf. on Artificial Intelligence (1987) 268-272. </booktitle>
Reference-contexts: For example, "reactive" systems have been developed to rely on frequently-updated, sensor-based representations of their environment and perform little or no lookahead planning <ref> [1, 4, 11] </ref>. The features of these systems are summarized in the fourth column of Table 1. Note that, since they do not perform search, reactive systems generally have low-variance, bounded response times.
Reference: [2] <author> J. F. Allen, </author> <title> Maintaining knowledge about temporal intervals, </title> <note> Communications of the ACM 26 (11) (1983) 832-843. </note>
Reference-contexts: As we have seen, the worst-case criterion also removes the need for any detailed representation of time. Complex temporal logics have been developed for reasoning about the relationships between asynchronous external events, simultaneous actions, and the regular passage of "wall clock" time <ref> [2, 8, 17, 28, 50] </ref>. So far the only timing information we have shown for our world model is the simple worst-case values needed to recognize preempted transitions.
Reference: [3] <author> R. C. Arkin, </author> <title> Integrating behavioral, perceptual, and world knowledge in reactive navigation, </title> <booktitle> in: Robotics and Autonomous Systems 6 (1990) 105-122. </booktitle> <address> Musliner, </address> <note> Durfee, Shin 41 Revision : 4:1 January 11, </note> <year> 1994 </year>
Reference-contexts: The guarantees that PRS makes are external to the system's operation. 6.2 Planned Reactions, Proven Safety As noted earlier, many reactive AI systems have been composed of manually-engineered reaction "plans." Some systems have been designed with higher-level reasoning processes that select which of the available reactive elements are active <ref> [3, 6, 13, 16, 30] </ref>. Other reactive systems are designed, like CIRCA, to automatically generate reaction plans from primitive component descriptions [29].
Reference: [4] <author> R. A. Brooks, </author> <title> A robust layered control system for a mobile robot, </title> <journal> IEEE Journal of Robotics and Automation RA-2 (1) (1986) 14-22. </journal>
Reference-contexts: For example, "reactive" systems have been developed to rely on frequently-updated, sensor-based representations of their environment and perform little or no lookahead planning <ref> [1, 4, 11] </ref>. The features of these systems are summarized in the fourth column of Table 1. Note that, since they do not perform search, reactive systems generally have low-variance, bounded response times.
Reference: [5] <author> D. Chapman, </author> <title> Planning for conjunctive goals, </title> <booktitle> Artificial Intelligence 32 (3) (1987) 333-374. </booktitle>
Reference-contexts: If we try to cast this type of AI method as a task within a real-time system, the fundamental problem is that planning involves searching for the solution to a generally intractable problem <ref> [5] </ref>, and thus the planning process has extremely large worst-case resource requirements. The time to find a plan in the worst case may be several orders of magnitude longer than the average time to find a plan. <p> This means that allocating resources to guarantee the worst-case response time will be very costly, and will lead to very low utilization of a system's resources [37, 46]. Furthermore, AI systems with powerful knowledge representations <ref> [5, 10] </ref> or learning abilities [9] may have unbounded worst-case response times.
Reference: [6] <author> J. Connell and P. Viola, </author> <title> Cooperative control of a semi-autonomous mobile robot, </title> <booktitle> in: Proc. IEEE Int'l Conf. on Robotics and Automation (1990) 1118-1121. </booktitle>
Reference-contexts: The guarantees that PRS makes are external to the system's operation. 6.2 Planned Reactions, Proven Safety As noted earlier, many reactive AI systems have been composed of manually-engineered reaction "plans." Some systems have been designed with higher-level reasoning processes that select which of the available reactive elements are active <ref> [3, 6, 13, 16, 30] </ref>. Other reactive systems are designed, like CIRCA, to automatically generate reaction plans from primitive component descriptions [29].
Reference: [7] <author> T. Dean and M. Boddy, </author> <title> An analysis of time-dependent planning, </title> <booktitle> in: Proc. National Conf. on Artificial Intelligence (1988) 49-54. </booktitle>
Reference-contexts: If the AIS has more time available, it can continue producing plans for as much time as is convenient, and then use the best plan stored so far. In this way, the AIS can itself implement an anytime planning algorithm <ref> [7, 43] </ref>. This feature is useful because, although achieving control-level goals is never dependent on timely responses from the AIS, achieving noncritical, task-level goals may be. <p> Musliner, Durfee, Shin 38 Revision : 4:1 January 11, 1994 6.1.4 Any-Time Algorithms One technique for combining high-variance methods with hard deadlines has recently become popular in both the AI and real-time communities. "Any-time" algorithms <ref> [7] </ref> are incremental methods that can be interrupted at any time, yielding a result that may have reduced precision, confidence, accuracy, etc. These techniques are naturally successful at making timeliness guarantees: they ensure that some result will be available by a deadline.
Reference: [8] <author> T. L. Dean, </author> <title> Intractability and time-dependent planning, </title> <booktitle> in: Proceedings of the 1986 Workshop on Reasoning about Actions & Plans (1987) 245-266. </booktitle>
Reference-contexts: As we have seen, the worst-case criterion also removes the need for any detailed representation of time. Complex temporal logics have been developed for reasoning about the relationships between asynchronous external events, simultaneous actions, and the regular passage of "wall clock" time <ref> [2, 8, 17, 28, 50] </ref>. So far the only timing information we have shown for our world model is the simple worst-case values needed to recognize preempted transitions.
Reference: [9] <author> E. H. Durfee, </author> <title> A cooperative approach to planning for real-time control, in: Proc. Workshop on Innovative Approaches to Planning, Scheduling, </title> <note> and Control (1990) 277-283. </note>
Reference-contexts: This means that allocating resources to guarantee the worst-case response time will be very costly, and will lead to very low utilization of a system's resources [37, 46]. Furthermore, AI systems with powerful knowledge representations [5, 10] or learning abilities <ref> [9] </ref> may have unbounded worst-case response times.
Reference: [10] <author> K. Erol, D. Nau, and V. S. Subrahmanian, </author> <title> When is planning decidable?, </title> <booktitle> in: Proc. Int'l Conf. on Artificial Intelligence Planning Systems (1992) 222-227. </booktitle>
Reference-contexts: This means that allocating resources to guarantee the worst-case response time will be very costly, and will lead to very low utilization of a system's resources [37, 46]. Furthermore, AI systems with powerful knowledge representations <ref> [5, 10] </ref> or learning abilities [9] may have unbounded worst-case response times.
Reference: [11] <author> R. J. Firby, </author> <title> An investigation into reactive planning in complex domains, </title> <booktitle> in: Proc. National Conf. on Artificial Intelligence (1987) 202-206. </booktitle>
Reference-contexts: For example, "reactive" systems have been developed to rely on frequently-updated, sensor-based representations of their environment and perform little or no lookahead planning <ref> [1, 4, 11] </ref>. The features of these systems are summarized in the fourth column of Table 1. Note that, since they do not perform search, reactive systems generally have low-variance, bounded response times.
Reference: [12] <author> M. K. Franklin and A. Gabrielian, </author> <title> A transformational method for verifying safety properties in real-time systems, </title> <booktitle> in: Proc. Real-Time Systems Symposium (1989) 112-123. </booktitle>
Reference-contexts: To show how a control plan can make a safe set of states a safely-controlled set, we now introduce a simple set of correctness-preserving model transformations. These transformations prune out unreachable states <ref> [12] </ref>, and thus allow us to prove safety properties by showing that certain control plans can restrict the world so that no failure states are reachable. 4.3 Model Transformations We must first define the concept of reachability in our world model.
Reference: [13] <author> E. Gat, </author> <title> Reliable goal directed reactive control for autonomous mobile robots, </title> <type> Ph.D. thesis, </type> <institution> Virginia Polytechnic Institute (1991). </institution>
Reference-contexts: The key point is that CIRCA is aware of its own capacity to deal with a specific combination of goals and environment. This is analogous to the cognizant failure stressed by Gat <ref> [13] </ref>. Guaranteed control plans also play a crucial role in isolating the unpredictable performance AIS from the rigid, real-time guarantees of the RTS, as discussed above. Of course, CIRCA's guarantees are based on several assumptions about the generally uncertain, unpredictable real world. <p> The guarantees that PRS makes are external to the system's operation. 6.2 Planned Reactions, Proven Safety As noted earlier, many reactive AI systems have been composed of manually-engineered reaction "plans." Some systems have been designed with higher-level reasoning processes that select which of the available reactive elements are active <ref> [3, 6, 13, 16, 30] </ref>. Other reactive systems are designed, like CIRCA, to automatically generate reaction plans from primitive component descriptions [29].
Reference: [14] <author> M. P. Georgeff and F. F. Ingrand, </author> <title> Decision-making in an embedded reasoning system, </title> <booktitle> in: Proc. Int'l Joint Conf. on Artificial Intelligence (1989) 972-978. </booktitle>
Reference-contexts: Note that this section describes only the low-level control planning done in the AIS; more complex high-level reasoning is done by a different process. The prototype high-level reasoning mechanism, described fully in [31], is based largely on PRS <ref> [14, 20] </ref>. From the description of the world model above, we might derive a simple approach in which the entire world model state space is enumerated and then actions are planned to reduce the graph to a safely-controlled subset. <p> This is the technique used by CIRCA in generating TAP plans (see Section 5.1.3), where a minimally acceptable plan achieves only the control-level goals. 6.1.5 PRS CIRCA's AIS is derived from PRS <ref> [14, 20] </ref>, which itself has some features making it suited to real-time applications. Ingrand and Georgeff have shown that, given certain assumptions about event frequencies and the form of the system's procedural knowledge, PRS can be guaranteed to notice (or begin reacting to) every world event within a bounded time.
Reference: [15] <author> P. Godefroid and F. Kabanza, </author> <title> An efficient reactive planner for synthesizing reactive plans, </title> <booktitle> in: Proc. National Conf. on Artificial Intelligence (1991) 640-645. </booktitle>
Reference-contexts: While these hand-engineered systems have been quite successful, they lack a rigorous foundation supporting their Musliner, Durfee, Shin 5 Revision : 4:1 January 11, 1994 capabilities. Recent research has focused on automatically generating reactive control systems for situated agents <ref> [15, 29, 44] </ref>. In this approach, a system is given a description of an agent's goals, its environment, and its possible actions. The system then derives a reactive control system that chooses the correct action for any particular situation within the bounds of the world model. <p> This requires either an exponential enumeration of states or some dependency information that allows the system to extend guarantees made for one state to other states without examining the others individually. Recent work by Godefroid and Kabanza <ref> [15] </ref> illustrates one way in which such dependency information can reduce search spaces; their results allow a system to examine only a single ordering of independent actions, rather than enumerating all possible orderings. These results are not immediately applicable to CIRCA, because their world model does not include external events.
Reference: [16] <author> S. Hanks and R. J. Firby, </author> <title> Issues and architectures for planning and execution, in: Proc. Workshop on Innovative Approaches to Planning, Scheduling, </title> <note> and Control (1990) 59-70. </note>
Reference-contexts: The guarantees that PRS makes are external to the system's operation. 6.2 Planned Reactions, Proven Safety As noted earlier, many reactive AI systems have been composed of manually-engineered reaction "plans." Some systems have been designed with higher-level reasoning processes that select which of the available reactive elements are active <ref> [3, 6, 13, 16, 30] </ref>. Other reactive systems are designed, like CIRCA, to automatically generate reaction plans from primitive component descriptions [29].
Reference: [17] <author> S. Hanks, </author> <title> Practical temporal projection, </title> <booktitle> in: Proc. National Conf. on Artificial Intelligence (1990) </booktitle> . 
Reference-contexts: As we have seen, the worst-case criterion also removes the need for any detailed representation of time. Complex temporal logics have been developed for reasoning about the relationships between asynchronous external events, simultaneous actions, and the regular passage of "wall clock" time <ref> [2, 8, 17, 28, 50] </ref>. So far the only timing information we have shown for our world model is the simple worst-case values needed to recognize preempted transitions.
Reference: [18] <author> J. Hendler, </author> <title> Abstraction and reaction, </title> <booktitle> in: Proc. AAAI Spring Symp. on Planning in Uncertain, Unpredictable, or Changing Environments (1990) </booktitle> . 
Reference-contexts: Higher levels of planning have been added to the DR model using the notion of abstraction: the reactive system reasons about detailed information in very small units of time, while higher levels of reasoning use more abstract data and larger time scales <ref> [18] </ref>. Complex reasoning is implemented by reactive elements that are triggered by abstract information in the world model. The enhanced DR model thus attempts to smoothly integrate reactive reasoning and higher-level reasoning within a single processing model, unlike the abrupt distinction CIRCA makes between task-level and control-level goals.
Reference: [19] <author> J. Hendler and A. Agrawala, </author> <title> Mission critical planning: </title> <booktitle> AI on the MARUTI real-time operating system, in: Proc. Workshop on Innovative Approaches to Planning, Scheduling, and Control (1990) 77-84. </booktitle>
Reference-contexts: These systems variously rely on real-time operating systems, constant-cycle-time circuits, or any-time algorithms to enforce guaranteed, predictable execution. 6.1.1 DR/MARUTI Hendler and Agrawala <ref> [19] </ref> are integrating an enhanced Dynamic Reaction (DR) system and the MARUTI operating system to implement guaranteed real-time reactive reasoning in a manner very similar to CIRCA's guaranteed TAP schedules. <p> However, Hendler and Agrawala have expressed interest in methods for internally deriving the scheduling requirements Musliner, Durfee, Shin 37 Revision : 4:1 January 11, 1994 of the system <ref> [19] </ref>, much as CIRCA reasons about TAP requirements. They discuss the need to increase the flexibility of DR/MARUTI so that it may include non-real-time jobs, just as CIRCA provides the unguaranteed TAP list. <p> The simulation, written in Deneb Robotics' Igrip system, correctly models the robot's kinematic behavior. However, the prototype real-time subsystem (written in C) runs on a UNIX platform, and thus cannot rigidly enforce execution timing constraints. We are currently porting the RTS to execute on the MARUTI real-time operating system <ref> [19] </ref>, which will provide a predictable execution environment. Our experience with the current prototype system indicates that the Scheduler module is the weak link, because it uses such a simple algorithm.
Reference: [20] <author> F. F. Ingrand and M. P. Georgeff, </author> <title> Managing deliberation and reasoning in real-time ai systems, in: Proc. Workshop on Innovative Approaches to Planning, Scheduling, </title> <note> and Control (1990) 284-291. </note>
Reference-contexts: Note that this section describes only the low-level control planning done in the AIS; more complex high-level reasoning is done by a different process. The prototype high-level reasoning mechanism, described fully in [31], is based largely on PRS <ref> [14, 20] </ref>. From the description of the world model above, we might derive a simple approach in which the entire world model state space is enumerated and then actions are planned to reduce the graph to a safely-controlled subset. <p> This is the technique used by CIRCA in generating TAP plans (see Section 5.1.3), where a minimally acceptable plan achieves only the control-level goals. 6.1.5 PRS CIRCA's AIS is derived from PRS <ref> [14, 20] </ref>, which itself has some features making it suited to real-time applications. Ingrand and Georgeff have shown that, given certain assumptions about event frequencies and the form of the system's procedural knowledge, PRS can be guaranteed to notice (or begin reacting to) every world event within a bounded time. <p> Thus the system's response to a particular event can be arbitrarily interrupted by the arrival of other events, and the response to those events can delay the initial processing. It is possible to limit the system's inferencing capabilities and make guarantees about overall response time <ref> [20] </ref>. This approach leads to a complete embedding of the AI system within the real-time application environment [34], and requires either low utilization or engineering out the high-variance unpredictability that distinguishes AI techniques from simple algorithms.
Reference: [21] <author> L. P. Kaelbling and S. J. Rosenschein, </author> <title> Action and planning in embedded agents, </title> <booktitle> in: Robotics and Autonomous Systems 6 (1990) 35-48. </booktitle>
Reference-contexts: The theory underlying Rex has been used to show that the information stored within a Rex machine can have a fixed relationship to the true state of the world. Thus Rex machines provide predictable execution and support the types of performance guarantees enforced by CIRCA's RTS. Gapps <ref> [21] </ref> is a system for compiling declarative descriptions of agent behaviors into Rex machines. Gapps takes as input the agent's top-level goal and a set of goal-reduction rules that describe how to transform goals into smaller goals or Rex-machine primitives.
Reference: [22] <author> Z. Kohavi, </author> <title> Switching and finite automata theory, </title> <publisher> (McGraw-Hill, </publisher> <address> New York, </address> <year> 1978). </year> <note> Musliner, Durfee, Shin 42 Revision : 4:1 January 11, </note> <year> 1994 </year>
Reference-contexts: The test minimization process is essentially equivalent to the minimization of switching circuits <ref> [22] </ref>. Each action can be considered separately as a circuit whose minterms are the features of the states for which it has been planned.
Reference: [23] <author> T. J. Laffey, P. A. Cox, J. L. Schmidt, S. M. Kao, and J. Y. </author> <title> Read, Real-time knowledge-based systems, </title> <note> AI Magazine 9 (1) (1988) 27-45. </note>
Reference-contexts: Real-time computing is not about building "fast" systems; it is about building systems that are predictably "fast enough" to act on their environments in ways that achieve their goals <ref> [23, 49] </ref>. Real-time systems researchers have developed a powerful set of tools to prove that embedded systems meet this criterion. These tools include techniques for characterizing a system's interactions with its environment through such measures as worst-case execution time, resource requirements, and deadlines. <p> A more general comparison to related work on combining AI and real-time control appears in [34], and a survey of the entire field appears in <ref> [23] </ref>.
Reference: [24] <author> K.-J. Lin, S. Natarajan, and J. W.-S. Liu, </author> <title> Imprecise results: Utilizing partial computations in real-time systems, </title> <booktitle> in: Proc. Real-Time Systems Symposium (1987) 210-217. </booktitle>
Reference-contexts: What we really want, if possible, is a plan that guarantees the control-level goals and also either guarantees or at least makes possible the task-level goals. To find those plans, we have formed the action-planning algorithm as an imprecise computation <ref> [24, 32] </ref> that will continue generating new plans until no more are available, or until a plan that achieves all of the task-level goals is found. In the current implementation, a plan is considered to achieve a task-level goal if any state satisfying that goal is reachable. <p> Thus any-time algorithms sacrifice correctness for timeliness, while CIRCA strives to guarantee both. Furthermore, by reasoning explicitly about its goals, capabilities, and deadlines, CIRCA can trade off the guarantees it chooses to enforce when constrained by limited resources. The "imprecise computation" paradigm <ref> [24] </ref> is a modification of the any-time method in which some minimum amount of processing is guaranteed, so that the algorithm will always produce a result with a minimally acceptable result.
Reference: [25] <author> C. L. Liu and J. W. Layland, </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment, </title> <note> Journal of the ACM 20 (1) (1973) 46-61. </note>
Reference-contexts: In the current implementation, the RTS can run only one TAP at a time, and TAPs are not interruptible, so the Scheduler does not need to consider TAP preemption. The Scheduler uses a modified deadline-driven scheduling algorithm <ref> [25] </ref> to optimally derive a TAP schedule. The basic deadline-driven algorithm specifies that, each time the system can choose which TAP to run, it should run the available TAP with the closest deadline.
Reference: [26] <author> D. M. Lyons, A. J. Hendriks, and S. Mehta, </author> <title> Achieving robustness by casting planning as adaptation of a reactive system, </title> <booktitle> in: Proc. IEEE Int'l Conf. on Robotics and Automation (1991) 198-203. </booktitle>
Reference-contexts: UPs do not yet handle this type of metric information or the introspective reasoning required to internally verify or alter system goals. 6.2.2 RS Lyons et al. <ref> [26, 27] </ref> are investigating the Robot Schemas (RS) plan representation with many of the same goals as our work on CIRCA. In the RS model, robot plans are represented as concurrent communicating processes. RS provides operators to compose larger systems from various combinations of processes. <p> RS research began by describing static, hand-coded robot control systems. An execution environment is now being developed to allow the system to run its schemas with predictable, guaranteed timeliness <ref> [26] </ref>. A planning technique has also been proposed [26], in which a concurrent planning process incrementally modifies the reactive schemas running on the execution system. 7 Summary and Future Work We have described how CIRCA reasons about a principled characterization of agent/environment interactions to generate reactive control plans that are guaranteed <p> RS research began by describing static, hand-coded robot control systems. An execution environment is now being developed to allow the system to run its schemas with predictable, guaranteed timeliness <ref> [26] </ref>. A planning technique has also been proposed [26], in which a concurrent planning process incrementally modifies the reactive schemas running on the execution system. 7 Summary and Future Work We have described how CIRCA reasons about a principled characterization of agent/environment interactions to generate reactive control plans that are guaranteed to keep the agent safe and, if possible,
Reference: [27] <author> D. M. Lyons, </author> <title> A process-based approach to task plan representation, </title> <booktitle> in: Proc. IEEE Int'l Conf. on Robotics and Automation (1990) 2142-2147. </booktitle>
Reference-contexts: UPs do not yet handle this type of metric information or the introspective reasoning required to internally verify or alter system goals. 6.2.2 RS Lyons et al. <ref> [26, 27] </ref> are investigating the Robot Schemas (RS) plan representation with many of the same goals as our work on CIRCA. In the RS model, robot plans are represented as concurrent communicating processes. RS provides operators to compose larger systems from various combinations of processes. <p> The RS model can be used to represent both the capabilities of a control system and its environment, just as in CIRCA. Rewrite rules describe the evolution of RS systems, and these rules can be used to derive proofs that systems will meet their goals <ref> [27] </ref>. RS research began by describing static, hand-coded robot control systems. An execution environment is now being developed to allow the system to run its schemas with predictable, guaranteed timeliness [26].
Reference: [28] <author> D. McDermott, </author> <title> A temporal logic for reasoning about processes and plans, </title> <booktitle> Cognitive Science 6 (1982) 101-155. </booktitle>
Reference-contexts: States contain descriptions of the features of the world at some instant, and transitions describe how those features can change. Ongoing processes in the world are represented by "state-encoding"| the status of a process is considered a feature of the world (a "fluent" <ref> [28] </ref>), and is explicitly encoded into the representation of a state. Important changes in process status thus correspond to transitions between states. <p> As we have seen, the worst-case criterion also removes the need for any detailed representation of time. Complex temporal logics have been developed for reasoning about the relationships between asynchronous external events, simultaneous actions, and the regular passage of "wall clock" time <ref> [2, 8, 17, 28, 50] </ref>. So far the only timing information we have shown for our world model is the simple worst-case values needed to recognize preempted transitions.
Reference: [29] <author> D. McDermott, </author> <title> Planning reactive behavior: A progress report, in: Proc. Workshop on Innovative Approaches to Planning, Scheduling, </title> <note> and Control (1990) 450-458. </note>
Reference-contexts: While these hand-engineered systems have been quite successful, they lack a rigorous foundation supporting their Musliner, Durfee, Shin 5 Revision : 4:1 January 11, 1994 capabilities. Recent research has focused on automatically generating reactive control systems for situated agents <ref> [15, 29, 44] </ref>. In this approach, a system is given a description of an agent's goals, its environment, and its possible actions. The system then derives a reactive control system that chooses the correct action for any particular situation within the bounds of the world model. <p> Other reactive systems are designed, like CIRCA, to automatically generate reaction plans from primitive component descriptions <ref> [29] </ref>. Performing this type of reaction planning is similar to classical planning in the sense that it is done before the plan is executed, and usually involves projecting the effects of proposed reactions in a Musliner, Durfee, Shin 39 Revision : 4:1 January 11, 1994 world model.
Reference: [30] <author> D. P. Miller and E. Gat, </author> <title> Exploiting known topologies to navigate with low-computation sensing, </title> <booktitle> in: Proc. SPIE Sensor Fusion Conf. </booktitle> <year> (1990) </year> . 
Reference-contexts: The guarantees that PRS makes are external to the system's operation. 6.2 Planned Reactions, Proven Safety As noted earlier, many reactive AI systems have been composed of manually-engineered reaction "plans." Some systems have been designed with higher-level reasoning processes that select which of the available reactive elements are active <ref> [3, 6, 13, 16, 30] </ref>. Other reactive systems are designed, like CIRCA, to automatically generate reaction plans from primitive component descriptions [29].
Reference: [31] <author> D. J. Musliner, </author> <title> CIRCA: The cooperative intelligent real-time control architecture, </title> <type> Ph.D. thesis, </type> <institution> The University of Michigan, </institution> <address> Ann Arbor, MI (1993). </address> <note> Also available as CSE-TR-175-93. </note>
Reference-contexts: We describe this world model in the context of the Cooperative Intelligent Real-Time Control Architecture (CIRCA) <ref> [31, 34] </ref>. As illustrated in Figure 1, CIRCA combines parallel AI and real-time control subsystems to meet the requirements of both arbitrarily complex AI algorithms and predictable real-time control responses. <p> The effect of the latter criterion, which will be explained in detail in Section 4, is to allow the 1 For more details on the RTS, see <ref> [31] </ref>. Musliner, Durfee, Shin 8 Revision : 4:1 January 11, 1994 RTS to keep the system safe while the AIS and Scheduler try to build the next control plan; the planning operation is not constrained to meet domain deadlines. <p> Musliner, Durfee, Shin 24 Revision : 4:1 January 11, 1994 anisms possible. Note that this section describes only the low-level control planning done in the AIS; more complex high-level reasoning is done by a different process. The prototype high-level reasoning mechanism, described fully in <ref> [31] </ref>, is based largely on PRS [14, 20]. From the description of the world model above, we might derive a simple approach in which the entire world model state space is enumerated and then actions are planned to reduce the graph to a safely-controlled subset.
Reference: [32] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> Any-dimension algorithms, </title> <booktitle> in: Proc. Workshop on Real-Time Operating Systems and Software (1992) 78-81. </booktitle>
Reference-contexts: What we really want, if possible, is a plan that guarantees the control-level goals and also either guarantees or at least makes possible the task-level goals. To find those plans, we have formed the action-planning algorithm as an imprecise computation <ref> [24, 32] </ref> that will continue generating new plans until no more are available, or until a plan that achieves all of the task-level goals is found. In the current implementation, a plan is considered to achieve a task-level goal if any state satisfying that goal is reachable. <p> These techniques are naturally successful at making timeliness guarantees: they ensure that some result will be available by a deadline. However, the quality or correctness of that result cannot be guaranteed <ref> [32] </ref>. Thus any-time algorithms sacrifice correctness for timeliness, while CIRCA strives to guarantee both. Furthermore, by reasoning explicitly about its goals, capabilities, and deadlines, CIRCA can trade off the guarantees it chooses to enforce when constrained by limited resources.
Reference: [33] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> Reasoning about bounded reactivity to achieve real-time guarantees, </title> <booktitle> in: Working Notes of the AAAI Spring Symp. on Selective Perception (1992) 104-107. </booktitle>
Reference-contexts: Within this type of environment, CIRCA is designed to make guarantees about its performance based on the fundamental restriction that the system has limited sensing, processing, and actuating resources. A direct consequence of this bounded rationality [48] and bounded reactivity <ref> [33] </ref> is that the system usually cannot simultaneously guarantee all the required reactions to input stimuli that may ever be required to achieve its goals.
Reference: [34] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> CIRCA: a cooperative intelligent real-time control architecture, </title> <journal> IEEE Trans. Systems, Man, </journal> <note> and Cybernetics 23 (6) (1993) </note> . 
Reference-contexts: We describe this world model in the context of the Cooperative Intelligent Real-Time Control Architecture (CIRCA) <ref> [31, 34] </ref>. As illustrated in Figure 1, CIRCA combines parallel AI and real-time control subsystems to meet the requirements of both arbitrarily complex AI algorithms and predictable real-time control responses. <p> Section 3 presents an architectural overview of CIRCA and discusses the guarantees that the system strives to provide. Section 4 describes the world model that the system uses to build and guarantee control plans. The model was introduced briefly in <ref> [34] </ref>; this paper provides complete details on the theoretical basis for the system's guarantees. Section 5 describes how the world model is used explicitly by the system to dynamically construct and guarantee control plans. Section 6 discusses related work on modeling techniques used in the service of real-time control. <p> However, when the robot arrives at its destination, the process finishes, the status will change, and the world model will represent this change by a transition to a new state with the features (ROBOT-STATUS HALTED) (ROBOT-POSITION OVER-BOX). In <ref> [34] </ref> we briefly introduced a formal representation of the world model as a directed graph. In this paper, we greatly extend the formal representation, showing precisely how control plans can be proven to guarantee the system's safety. <p> Given that most rigorous capability, we can easily modify the system so that it can forgo various goals when necessitated by resource restrictions <ref> [34] </ref>. <p> A more general comparison to related work on combining AI and real-time control appears in <ref> [34] </ref>, and a survey of the entire field appears in [23]. <p> It is possible to limit the system's inferencing capabilities and make guarantees about overall response time [20]. This approach leads to a complete embedding of the AI system within the real-time application environment <ref> [34] </ref>, and requires either low utilization or engineering out the high-variance unpredictability that distinguishes AI techniques from simple algorithms.
Reference: [35] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> Predictive sufficiency and the use of stored internal state, </title> <booktitle> in: Proc. AIAA/NASA Conf. on Intelligent Robots in Field, Factory, Service, and Space (1994) </booktitle> . 
Reference-contexts: We are currently formalizing and implementing techniques by which CIRCA can reason explicitly about the need for predictive sufficiency <ref> [35] </ref>. 4.9 Summary of Agent/Environment Characterization for Guarantees While we stressed the value of guarantees in Section 3, in this section we have identified critical pieces of information that an agent needs in order to make guarantees about its performance in its environment.
Reference: [36] <author> N. J. Nilsson, </author> <booktitle> Principles of artificial intelligence, </booktitle> <publisher> (Tioga Press, </publisher> <address> Palo Alto, CA., </address> <year> 1980). </year>
Reference-contexts: The input to these mechanisms is divided into three types of information: transition descriptions, initial state descriptions, and goal descriptions. Transition descriptions are simple production rules that detail the changes the world can undergo, much like STRIPS operators <ref> [36] </ref>. Figure 11 shows example rules from the robot arm domain. Note that the preconditions and postconditions need not fully specify all features of the states to which the transitions apply. These descriptions are implicitly generalized by the lack of certain feature specifications. <p> nil)) RESOURCES: (arm) WCET: 3.5 [second] tests for states which it generates on-the-fly, as detailed below. 5.1.1 The Planning Algorithm Given this input information, the AIS dynamically constructs the graph model and the plan of actions together in a single depth-first search process, essentially similar to a forward-chaining STRIPS planner <ref> [36] </ref>. This process operates on a stack of states (the state-stack), examining each state in turn and planning actions that achieve goals and preempt temporal transitions that lead to failure. To initiate the processing, each of the completely specified initial states is pushed onto the state-stack.
Reference: [37] <author> C. J. Paul, A. Acharya, B. Black, and J. K. Strosnider, </author> <title> Reducing problem-solving variance to improve predictability, </title> <note> Communications of the ACM 34 (8) (1991) 81-93. </note>
Reference-contexts: This means that allocating resources to guarantee the worst-case response time will be very costly, and will lead to very low utilization of a system's resources <ref> [37, 46] </ref>. Furthermore, AI systems with powerful knowledge representations [5, 10] or learning abilities [9] may have unbounded worst-case response times. <p> are used to reason about the real-time tasks that must meet deadlines, but the AI process itself is not so constrained. 2.3.1 Reactive Systems Most research on the first approach focuses on overcoming the high-variance nature of traditional planning systems, thus making it practical to embed them in real-time systems <ref> [37] </ref>. For example, "reactive" systems have been developed to rely on frequently-updated, sensor-based representations of their environment and perform little or no lookahead planning [1, 4, 11]. The features of these systems are summarized in the fourth column of Table 1. <p> the way in which CIRCA operates continuously: it builds TAP schedules off-line from the execution unit (in the concurrent AIS) and the RTS executes each schedule when the environment has reached the appropriate point in the plan. 6.1.2 CROPS5 CROPS5 is a C-based parallel implementation of the OPS5 production system <ref> [37] </ref>. The production system is encapsulated within an "AI server" program that runs under a real-time operating system, allowing the production system to run only when other, guaranteed real-time control tasks are not using the processor. The AI server thus isolates the potentially high-variance CROPS5 problem-solving from the real-time tasks.
Reference: [38] <author> J. L. Peterson, </author> <title> Petri net theory and the modeling of systems, </title> <publisher> (Prentice-Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1981). </year>
Reference-contexts: techniques to build control plans, because while it is building one, the previous control plan is running on the RTS and keeping the system safe. 4.4 Relationship to Petri-Net Models It is useful to compare this type of state-based model with models based on Petri Nets (PNs) and their variations <ref> [38] </ref>. In PN models, "places" represent the status of world features, and transitions connect places, representing the way features can change.
Reference: [39] <author> J. R. Quinlan, </author> <title> Induction of decision trees, </title> <note> Machine Learning 1 (1986) 81-106. </note>
Reference-contexts: The general test minimization problem is NP-complete, so we have avoided using a complete algorithm. Instead, the minimization phase is implemented using the heuristic ID3 program 7 <ref> [39] </ref>, which is given the states for which an action has been planned as positive examples and all the other planned (possible) states as negative examples. ID3 incrementally builds a decision tree to distinguish the positive examples from the negative examples.
Reference: [40] <author> P. J. G. Ramadge and W. M. Wonham, </author> <title> The control of discrete event systems, </title> <booktitle> Proceedings of the IEEE 77 (1) (1989) 81-98. </booktitle>
Reference-contexts: Because CIRCA's world model representation corresponds loosely with the representation of states and transitions in discrete event systems <ref> [40] </ref>, we will employ two terms from that field: controllability and observability. We will use controllability to reflect the degree to which the intelligent control system can change its current state to another state.
Reference: [41] <author> S. J. Rosenschein, </author> <title> Synthesizing information-tracking automata from environment descriptions, </title> <type> Technical Report 2, </type> <institution> Teleos Research, </institution> <year> (1989). </year> <note> Musliner, Durfee, Shin 43 Revision : 4:1 January 11, </note> <year> 1994 </year>
Reference-contexts: mean that the precise, complete world state must be determined for action (because some subset of world features may be sufficient to determine the appropriate action| see Section 5.2), nor does it mean that the control system must be able to perfectly track the progression of states in the environment <ref> [41] </ref>. In fact the system never needs to know the world's state if it does not need to take any action; thus, the world can traverse many transitions but cause no change in the control system. <p> The system does not reason about a model of agent/environment interactions to create its own performance guarantees. 6.1.3 Rex/Gapps Research into the formal relationship between a system's internal model of the world and the real world has been fruitfully implemented in the Rex/Gapps system <ref> [42, 41] </ref>. Rex is a language used to describe digital machines that can be viewed as reactive systems. Rex programs are compiled into automata descriptions (usually implemented on a general purpose computer) that perform a constant-time mapping between inputs (sensors) and outputs (actuators).
Reference: [42] <author> S. J. Rosenschein and L. P. Kaelbling, </author> <title> The synthesis of digital machines with provable epistemic properties, </title> <booktitle> in: Proc. Conf. Theoretical Aspects of Reasoning About Knowledge (1986) 83-98. </booktitle>
Reference-contexts: The system does not reason about a model of agent/environment interactions to create its own performance guarantees. 6.1.3 Rex/Gapps Research into the formal relationship between a system's internal model of the world and the real world has been fruitfully implemented in the Rex/Gapps system <ref> [42, 41] </ref>. Rex is a language used to describe digital machines that can be viewed as reactive systems. Rex programs are compiled into automata descriptions (usually implemented on a general purpose computer) that perform a constant-time mapping between inputs (sensors) and outputs (actuators).
Reference: [43] <author> S. J. Russell and S. Zilberstein, </author> <title> Composing real-time systems, </title> <booktitle> in: Proc. Int'l Joint Conf. on Artificial Intelligence (1991) 212-217. </booktitle>
Reference-contexts: If the AIS has more time available, it can continue producing plans for as much time as is convenient, and then use the best plan stored so far. In this way, the AIS can itself implement an anytime planning algorithm <ref> [7, 43] </ref>. This feature is useful because, although achieving control-level goals is never dependent on timely responses from the AIS, achieving noncritical, task-level goals may be.
Reference: [44] <author> M. J. Schoppers, </author> <title> Universal plans for reactive robots in unpredictable environments, </title> <booktitle> in: Proc. Int'l Joint Conf. on Artificial Intelligence (1987) 1039-1046. </booktitle>
Reference-contexts: While these hand-engineered systems have been quite successful, they lack a rigorous foundation supporting their Musliner, Durfee, Shin 5 Revision : 4:1 January 11, 1994 capabilities. Recent research has focused on automatically generating reactive control systems for situated agents <ref> [15, 29, 44] </ref>. In this approach, a system is given a description of an agent's goals, its environment, and its possible actions. The system then derives a reactive control system that chooses the correct action for any particular situation within the bounds of the world model. <p> In an uncontrollable system, CIRCA would still be able to guarantee some level of performance given predicted events, but the certainty of these predictions would be limited, and CIRCA's actions might not achieve their goals. Thus, a more reactive approach, like Universal Plans <ref> [44] </ref>| where more inputs and unguaranteed responses are considered, and outputs are never assumed to be correct| might be more appropriate for such situations. <p> With such explicit reasoning about the results of plans, it is possible to prove that they will achieve some safety or stability criterion when executed reliably. 6.2.1 Universal Plans Schoppers' research on the automatic generation of Universal Plans (UPs) <ref> [44, 45] </ref> resembles our work, with the notable exception that CIRCA relies on a restricted world model and emphasizes timeliness issues. UPs are generated without considering precisely which world states are possible and which are not; UPs specify reactions for all states of the world, possible or not.
Reference: [45] <author> M. Schoppers, </author> <title> Automatic synthesis of perception driven discrete event control laws, </title> <booktitle> in: Proc. 5th IEEE Int'l Symposium on Intelligent Control (1990) 410-416. </booktitle>
Reference-contexts: With such explicit reasoning about the results of plans, it is possible to prove that they will achieve some safety or stability criterion when executed reliably. 6.2.1 Universal Plans Schoppers' research on the automatic generation of Universal Plans (UPs) <ref> [44, 45] </ref> resembles our work, with the notable exception that CIRCA relies on a restricted world model and emphasizes timeliness issues. UPs are generated without considering precisely which world states are possible and which are not; UPs specify reactions for all states of the world, possible or not.
Reference: [46] <author> M. Schoppers, </author> <title> Introduction to special edition on real-time knowledge-based control systems, </title> <note> Communications of the ACM 34 (8) (1991) 27-30. </note>
Reference-contexts: This means that allocating resources to guarantee the worst-case response time will be very costly, and will lead to very low utilization of a system's resources <ref> [37, 46] </ref>. Furthermore, AI systems with powerful knowledge representations [5, 10] or learning abilities [9] may have unbounded worst-case response times.
Reference: [47] <author> M. Schoppers, </author> <title> Representing the plan monitoring needs and resources of robotic systems, </title> <booktitle> in: Proc. Annual Conf. on AI, Simulation, and Planning in High Autonomy Systems (1992) </booktitle> . 
Reference-contexts: The goal of a control plan is to ensure that the world remains in a safely-controlled set of states, so that failure can never occur. This is analogous to a stable closed-loop control policy <ref> [47] </ref> which is known to restrict the operation of a controlled system to a desirable range of states. To show how a control plan can make a safe set of states a safely-controlled set, we now introduce a simple set of correctness-preserving model transformations. <p> The possibility of a world state, of course, is dependent on the world model assumptions. We have described how CIRCA's control plans are intended to actively restrict the world to a safely-controlled set of states, maintaining its safety while making progress towards its goals. Schoppers <ref> [47] </ref> has recently discussed how UPs can similarly lead to stable "closed-loop dynamics." This concept of stable closed-loop control requires that, given sensed data within some bounds (input), the controlled system will produce world behaviors (output) within some bounds.
Reference: [48] <author> H. A. Simon, </author> <title> Models of bounded rationality, </title> <editor> (M. I. T. </editor> <publisher> Press, </publisher> <year> 1982). </year>
Reference-contexts: Within this type of environment, CIRCA is designed to make guarantees about its performance based on the fundamental restriction that the system has limited sensing, processing, and actuating resources. A direct consequence of this bounded rationality <ref> [48] </ref> and bounded reactivity [33] is that the system usually cannot simultaneously guarantee all the required reactions to input stimuli that may ever be required to achieve its goals.
Reference: [49] <author> J. A. Stankovic, </author> <title> Misconceptions about real-time computing: A serious problem for next-generation systems, </title> <note> IEEE Computer 21 (10) (1988) 10-19. </note>
Reference-contexts: Real-time computing is not about building "fast" systems; it is about building systems that are predictably "fast enough" to act on their environments in ways that achieve their goals <ref> [23, 49] </ref>. Real-time systems researchers have developed a powerful set of tools to prove that embedded systems meet this criterion. These tools include techniques for characterizing a system's interactions with its environment through such measures as worst-case execution time, resource requirements, and deadlines. <p> The uncertainty inherent in the real world makes no difference for this argument. To paraphrase Stankovic <ref> [49] </ref>, the fact that the system may not function correctly or that the world may differ from our environment model with a nonzero probability does not give us license to increase the odds of failure by not trying to guarantee performance. <p> This is one of the arguments frequently used against ad hoc real-time systems that are simply tested exhaustively to demonstrate that they meet hard deadlines <ref> [49] </ref>. How, then, does CIRCA's enumerative world modeling technique differ? The most important difference is that the AIS does not enumerate the entire domain state space. As discussed earlier, the AIS' high-level planning explicitly divides long-term goals into shorter-term subgoals, which are then separately implemented by control plans.
Reference: [50] <author> S. Vere, </author> <title> Temporal scope of assertions and window cutoff, </title> <booktitle> in: Proc. Int'l Joint Conf. on Artificial Intelligence (1985) 1055-1059. </booktitle> <address> Musliner, </address> <note> Durfee, Shin 44 Revision : 4:1 January 11, </note> <year> 1994 </year>
Reference-contexts: As we have seen, the worst-case criterion also removes the need for any detailed representation of time. Complex temporal logics have been developed for reasoning about the relationships between asynchronous external events, simultaneous actions, and the regular passage of "wall clock" time <ref> [2, 8, 17, 28, 50] </ref>. So far the only timing information we have shown for our world model is the simple worst-case values needed to recognize preempted transitions.
References-found: 50

