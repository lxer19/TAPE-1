URL: http://www.cs.rpi.edu/~scorec/papers/97/ima/ima.ps
Refering-URL: http://www.cs.rpi.edu/~scorec/papers/97/papers.html
Root-URL: http://www.cs.rpi.edu
Title: Distributed Octree Data Structures and Local Refinement Method for the Parallel Solution of Three-Dimensional Conservation Laws  
Author: J. E. Flaherty, R. M. Loy, M. S. Shephard, M. L. Simone, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz 
Address: Troy, New York 12180-3590, USA  
Affiliation: Scientific Computation Research Center Rensselaer Polytechnic Institute  
Abstract: Conservation laws are solved by a local Galerkin finite element procedure with adaptive space-time mesh refinement and explicit time integration. A distributed octree structure representing a spatial decomposition of the domain is used for mesh generation, and later may be used to correct for processor load imbalances introduced at adaptive enrichment steps. A Courant stability condition is used to select smaller time steps on smaller elements of the mesh, thereby greatly increasing efficiency relative to methods having a single global time step. To accommodate the variable time steps, octree partitioning is extended to use weights derived from element size. Computational results are presented for the three-dimensional Euler equations of compressible flow solved on an IBM SP2 computer. The problem examined is the flow inside a perforated shock tube. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Adjerid, J. E. Flaherty, P. Moore, and Y. Wang. </author> <title> High-order adaptive methods for parabolic systems. </title> <journal> Physica-D, </journal> <volume> 60 </volume> <pages> 94-111, </pages> <year> 1992. </year>
Reference-contexts: Adap--tivity on parallel computers, however, introduces complications that do not arise with simpler solution strategies. Adaptive algorithms that utilize unstructured meshes <ref> [1, 26, 43, 44] </ref> make the task of balancing processor computational load more difficult than with uniform structures. Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- and/or p-refinement.
Reference: [2] <author> P. L. Baehmann, S. L. Wittchen, M. S. Shephard, K. R. Grice, and M. A. Yerry. </author> <title> Robust, geometrically based, automatic two-dimensional mesh generation. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 24 </volume> <pages> 1043-1078, </pages> <year> 1987. </year>
Reference-contexts: Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- and/or p-refinement. Quadtree and octree decomposition is a successful strategy to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. Three-dimensional parallel mesh generation also makes use of octree procedures. With duplication of the tree on every processor [15, 16] the process does not scale. Scalable parallel mesh generation requires a distributed octree structure [48]. <p> Once refinement thresholds are set at the beginning of the simulation, refinement and coarsening are automatic. 4 Distributed Octree Quadtrees and octrees have been successfully used as spatial data structures to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. The localization allows finite elements to be generated efficiently by focusing on specific neighborhoods rather than the entire domain. An octree-based mesh generator [46] recursively subdivides an embedding of the problem domain in a cubic universe into eight octants wherever more resolution is required.
Reference: [3] <author> M. W. Beall and M. S. Shephard. </author> <title> A general topology-based mesh data structure. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 40(9) </volume> <pages> 1573-1596, </pages> <year> 1997. </year>
Reference-contexts: In a distributed environment, the octree also serves as a means to partition the domain to be discretized. A parallel octree library supports the creation and distribution of octree structures (Section 4). We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement <ref> [3] </ref>. A Parallel Mesh Database [22, 45] provides operators to create and manipulate distributed mesh data. Poor partitioning of data across the processors of a parallel computer leads to high communication costs.
Reference: [4] <author> M. J. Berger. </author> <title> On conservation at grid interfaces. </title> <journal> SIAM J. Numer. Anal, </journal> <volume> 24(5) </volume> <pages> 967-984, </pages> <year> 1987. </year>
Reference-contexts: However, the maximum globally stable time step depends on the size of the smallest element of the mesh. Therefore, an unintended side effect of h-refinement is a reduction of computational efficiency on larger elements. In order to 2 increase efficiency, temporal adaptivity has been applied to overlapping two-dimensional uniform <ref> [4, 6, 8, 14] </ref> and unstructured [29] meshes. In Section 3.2, we describe an explicit Local Refinement Method (LRM) for the solution of time-dependent conservation laws on three-dimensional unstructured meshes. It permits time steps on elements to be proportional to their size.
Reference: [5] <author> M. J. Berger and S. H. Bokhari. </author> <title> A partitioning strategy for nonuniform problems on multiprocessors. </title> <journal> IEEE Trans. Computers, </journal> <volume> 36(5) </volume> <pages> 570-580, </pages> <year> 1987. </year>
Reference-contexts: A Parallel Mesh Database [22, 45] provides operators to create and manipulate distributed mesh data. Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed <ref> [5, 20, 38, 27] </ref>; however, these may be inefficient in an adaptive computational environment. Parallel Sort Inertial Recursive Bisection (PSIRB) [45] performs recursive bisections of domains in directions normal to their principal axes of inertia.
Reference: [6] <author> M. J. Berger and J. Oliger. </author> <title> Adaptive mesh refinement for hyperbolic partial differential equations. </title> <journal> J. Comput. Phys., </journal> <volume> 53 </volume> <pages> 484-512, </pages> <year> 1984. </year>
Reference-contexts: However, the maximum globally stable time step depends on the size of the smallest element of the mesh. Therefore, an unintended side effect of h-refinement is a reduction of computational efficiency on larger elements. In order to 2 increase efficiency, temporal adaptivity has been applied to overlapping two-dimensional uniform <ref> [4, 6, 8, 14] </ref> and unstructured [29] meshes. In Section 3.2, we describe an explicit Local Refinement Method (LRM) for the solution of time-dependent conservation laws on three-dimensional unstructured meshes. It permits time steps on elements to be proportional to their size.
Reference: [7] <author> K. S. Bey, A. Patra, and J. T. Oden. </author> <title> hp-version discontinuous Galerkin methods for hyperbolic conservation laws: a parallel adaptive strategy. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 38(22) </volume> <pages> 3889-3907, </pages> <year> 1995. </year> <month> 20 </month>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [7, 9, 13, 14, 18, 30, 45, 52, 54] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques [36, 41, 53] specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions. <p> If desired, they may be combined to form element-based indicators. Experience suggests that a density gradient scaled by element volume is most informative, and this indicator was used for the problem presented in Section 5. However, discretization error estimates <ref> [7, 10, 17] </ref> must be developed for compressible flow applications. The rejection threshold is selected so that accepted steps provide acceptable solution resolution. Refinement and coarsening thresholds, respectively, are the error indicator values above and below which an element will be scheduled for refinement or coarsening.
Reference: [8] <author> R. Biswas, K. D. Devine, and J. E. Flaherty. </author> <title> Parallel, adaptive finite element methods for conservation laws. </title> <journal> Appl. Numer. Math., </journal> <volume> 14 </volume> <pages> 255-283, </pages> <year> 1994. </year>
Reference-contexts: However, the maximum globally stable time step depends on the size of the smallest element of the mesh. Therefore, an unintended side effect of h-refinement is a reduction of computational efficiency on larger elements. In order to 2 increase efficiency, temporal adaptivity has been applied to overlapping two-dimensional uniform <ref> [4, 6, 8, 14] </ref> and unstructured [29] meshes. In Section 3.2, we describe an explicit Local Refinement Method (LRM) for the solution of time-dependent conservation laws on three-dimensional unstructured meshes. It permits time steps on elements to be proportional to their size. <p> Finite element methods, however, have stencils that are invariant with method order, allowing them to model problems with complicated geometries more easily and to be efficiently parallelized. We discretize (1) using a discontinuous Galerkin finite element method <ref> [8, 11, 12] </ref>. <p> All load balancing, migration, enrichment, and solution procedures have been designed to scale. Nevertheless, a detailed study to verify this property must be conducted. Barring such an investigation, we note that results of a two-dimensional system similar to our three-dimensional system produced excellent scalability <ref> [8] </ref>. Scalability studies of three-dimensional steady flows using PSIRB with enrichment and migration strategies similar to those reported here also indicated very good scalabilty [45]. Mesh generation using the distributed octree structures rather than replicated trees enhances the scalability of that process.
Reference: [9] <author> C. L. Bottasso, H. L. de Cougny, M. Dindar, J. E. Flaherty, C. Ozturan, Z. Rusak, and M. S. Shephard. </author> <title> Compressible aerodynamics using a parallel adaptive time-discontinuous Galerkin least-squares finite element method. </title> <booktitle> In Proc. 12th AIAA Appl. Aero. Conf., </booktitle> <address> number 94-1888, Colorado Springs, </address> <year> 1994. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [7, 9, 13, 14, 18, 30, 45, 52, 54] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques [36, 41, 53] specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions.
Reference: [10] <author> B. Cockburn and P.-A. Gremaud. </author> <title> Error estimates for finite element methods for scalar conservation laws. </title> <journal> SIAM J. Numer. Anal, </journal> <volume> 33 </volume> <pages> 522-554, </pages> <year> 1996. </year>
Reference-contexts: If desired, they may be combined to form element-based indicators. Experience suggests that a density gradient scaled by element volume is most informative, and this indicator was used for the problem presented in Section 5. However, discretization error estimates <ref> [7, 10, 17] </ref> must be developed for compressible flow applications. The rejection threshold is selected so that accepted steps provide acceptable solution resolution. Refinement and coarsening thresholds, respectively, are the error indicator values above and below which an element will be scheduled for refinement or coarsening.
Reference: [11] <author> B. Cockburn, S.-Y. Lin, and C.-W. Shu. </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws III: One-Dimensional systems. </title> <journal> J. Comput. Phys., </journal> <volume> 84 </volume> <pages> 90-113, </pages> <year> 1989. </year>
Reference-contexts: Finite element methods, however, have stencils that are invariant with method order, allowing them to model problems with complicated geometries more easily and to be efficiently parallelized. We discretize (1) using a discontinuous Galerkin finite element method <ref> [8, 11, 12] </ref>.
Reference: [12] <author> B. Cockburn and C.-W. Shu. </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws II: General framework. </title> <journal> Math. Comp., </journal> <volume> 52 </volume> <pages> 411-435, </pages> <year> 1989. </year>
Reference-contexts: Finite element methods, however, have stencils that are invariant with method order, allowing them to model problems with complicated geometries more easily and to be efficiently parallelized. We discretize (1) using a discontinuous Galerkin finite element method <ref> [8, 11, 12] </ref>. <p> We specify it using a "numerical flux" function h (U + j ; U j ) depen dent on solution states U + j and U j on the inside and outside, respectively, of @ j : Several numerical flux functions are possible <ref> [12, 47] </ref>; we use van Leer's flux vector splitting [18, 31, 51]. 3 Adaptive Techniques The software uses adaptive h-refinement in space and time to concentrate computational effort in areas of inadequate solution resolution.
Reference: [13] <author> G. Cybenko. </author> <title> Dynamic load balancing for distributed memory multiprocessors. </title> <journal> J. Parallel and Dist. Comput., </journal> <volume> 7 </volume> <pages> 279-301, </pages> <year> 1989. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [7, 9, 13, 14, 18, 30, 45, 52, 54] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques [36, 41, 53] specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions.
Reference: [14] <author> H. L. de Cougny, K. D. Devine, J. E. Flaherty, R. M. Loy, C. Ozturan, and M. S. Shephard. </author> <title> Load balancing for the parallel adaptive solution of partial differential equations. </title> <journal> Appl. Numer. Math., </journal> <volume> 16 </volume> <pages> 157-182, </pages> <year> 1994. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [7, 9, 13, 14, 18, 30, 45, 52, 54] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques [36, 41, 53] specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions. <p> However, the maximum globally stable time step depends on the size of the smallest element of the mesh. Therefore, an unintended side effect of h-refinement is a reduction of computational efficiency on larger elements. In order to 2 increase efficiency, temporal adaptivity has been applied to overlapping two-dimensional uniform <ref> [4, 6, 8, 14] </ref> and unstructured [29] meshes. In Section 3.2, we describe an explicit Local Refinement Method (LRM) for the solution of time-dependent conservation laws on three-dimensional unstructured meshes. It permits time steps on elements to be proportional to their size. <p> Mesh generation using the distributed octree structures rather than replicated trees enhances the scalability of that process. Finally, preliminary runs of the present system on a larger number of processors produced encouraging results. Incremental migration strategies for use with adaptivity are being developed <ref> [14, 18] </ref>. If cost or locality of data movement is more important than global load balance, another approach with OCTPART may be taken. The processors may shift partition boundaries, thus, migrating subtrees from a processor p i to its neighbors p i1 and p i+1 .
Reference: [15] <author> H. L. de Cougny, M. S. Shephard, and C. Ozturan. </author> <title> Parallel three-dimensional mesh generation. </title> <journal> Comp. Sys. Engng., </journal> <volume> 5 </volume> <pages> 311-323, </pages> <year> 1994. </year>
Reference-contexts: Quadtree and octree decomposition is a successful strategy to localize data in mesh generation procedures on serial computers [2, 28, 37, 42, 46, 55]. Three-dimensional parallel mesh generation also makes use of octree procedures. With duplication of the tree on every processor <ref> [15, 16] </ref> the process does not scale. Scalable parallel mesh generation requires a distributed octree structure [48]. In a distributed environment, the octree also serves as a means to partition the domain to be discretized. A parallel octree library supports the creation and distribution of octree structures (Section 4).
Reference: [16] <author> H. L. de Cougny, M. S. Shephard, and C. Ozturan. </author> <title> Parallel three-dimensional mesh generation on distributed memory MIMD computers. </title> <journal> Engng. with Computers, </journal> <volume> 12(2) </volume> <pages> 94-106, </pages> <year> 1996. </year>
Reference-contexts: Quadtree and octree decomposition is a successful strategy to localize data in mesh generation procedures on serial computers [2, 28, 37, 42, 46, 55]. Three-dimensional parallel mesh generation also makes use of octree procedures. With duplication of the tree on every processor <ref> [15, 16] </ref> the process does not scale. Scalable parallel mesh generation requires a distributed octree structure [48]. In a distributed environment, the octree also serves as a means to partition the domain to be discretized. A parallel octree library supports the creation and distribution of octree structures (Section 4).
Reference: [17] <author> K. D. Devine and J. E. Flaherty. </author> <title> Parallel adaptive hp-refinement techniques for conservation laws. </title> <journal> Appl. Numer. Math., </journal> <volume> 20 </volume> <pages> 367-386, </pages> <year> 1996. </year>
Reference-contexts: projection as Z V T (U j u 0 ) do = 0; t = 0; 8V 2 S j ; j = 1; 2; : : : ; J: (3b) Results of Section 5 use piecewise constant (p=0) approximations and ex plicit Euler integration; however, p-refinement may be incorporated <ref> [17] </ref>. The normal component of the flux f n (u) = i=1 remains unspecified on @ j since the approximate solution is discontinuous there. <p> If desired, they may be combined to form element-based indicators. Experience suggests that a density gradient scaled by element volume is most informative, and this indicator was used for the problem presented in Section 5. However, discretization error estimates <ref> [7, 10, 17] </ref> must be developed for compressible flow applications. The rejection threshold is selected so that accepted steps provide acceptable solution resolution. Refinement and coarsening thresholds, respectively, are the error indicator values above and below which an element will be scheduled for refinement or coarsening.
Reference: [18] <author> K. D. Devine, J. E. Flaherty, R. Loy, and S. Wheat. </author> <title> Parallel partitioning strategies for the adaptive solution of conservation laws. </title> <editor> In I. Babuska, J. E. Flaherty, W. D. Henshaw, J. E. Hopcroft, J. E. Oliger, and T. Tezduyar, editors, </editor> <title> Modeling, Mesh Generation, and Adaptive Numerical Methods for Partial Differential Equations, </title> <booktitle> volume 75, </booktitle> <pages> pages 215-242, </pages> <address> Berlin-Heidelberg, 1995. </address> <publisher> Springer-Verlag. </publisher> <pages> 21 </pages>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [7, 9, 13, 14, 18, 30, 45, 52, 54] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques [36, 41, 53] specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions. <p> These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques [36, 41, 53] specifically concentrate on balancing adaptive computations. Devine and Flaherty <ref> [18] </ref> employ a quadtree to support a parallel hp-adaptive analysis in two dimensions. We describe a dynamic partitioning technique that exploits the properties of three-dimensional octree-structured meshes. Since such trees are easily constructed from arbitrary meshes, the procedure is independent of octree mesh generation. <p> Since such trees are easily constructed from arbitrary meshes, the procedure is independent of octree mesh generation. Partitioning may be done serially to obtain an initial partitioning or in parallel for repartition-ing a distributed mesh (Section 4.2) <ref> [18] </ref>. In either case, it is inexpensive; hence, it may be used with adaptivity. Adaptive h-refinement introduces variation in element size in order to concentrate computational effort in specific parts of the domain. <p> it using a "numerical flux" function h (U + j ; U j ) depen dent on solution states U + j and U j on the inside and outside, respectively, of @ j : Several numerical flux functions are possible [12, 47]; we use van Leer's flux vector splitting <ref> [18, 31, 51] </ref>. 3 Adaptive Techniques The software uses adaptive h-refinement in space and time to concentrate computational effort in areas of inadequate solution resolution. <p> Once the initial tree is partitioned, subtrees are distributed across the processors by message passing. OCTPART is an extension of the octree partitioning algorithm which operates in parallel to allow it to be used for dynamic load balancing <ref> [18] </ref>. To rebalance using OCTPART, each processor computes costs for each locally rooted subtree using traversals within its domain. The subtrees are sorted to be in depth-first order in a global traversal. The traversal step requires no interprocessor communication. <p> step, a measure of the overhead involved with finding candidate elements to step, was reduced from 5.88-7.05 to 3.73-4.25, in the L/D=2 case. 5.3 Size-Weighted Balancing Let the time-step imbalance be the maximum number of elements time stepped on a processor relative to the average number stepped on all processors <ref> [18] </ref>. Likewise, let the flux imbalance be the maximum number of 14 column shows partitionings of the initial meshes onto 16 processors, and the right shows partitionings of the meshes at t = 1:0. The L/D=1, 2, and 3 cases are shown from top to bottom. <p> Mesh generation makes extensive use of the octree, and a successful dynamic load balancing algorithm is based on the octree. OCTPART is an inexpensive parallel repartitioner which controls partition shapes well <ref> [18, 24] </ref>. <p> Mesh generation using the distributed octree structures rather than replicated trees enhances the scalability of that process. Finally, preliminary runs of the present system on a larger number of processors produced encouraging results. Incremental migration strategies for use with adaptivity are being developed <ref> [14, 18] </ref>. If cost or locality of data movement is more important than global load balance, another approach with OCTPART may be taken. The processors may shift partition boundaries, thus, migrating subtrees from a processor p i to its neighbors p i1 and p i+1 .
Reference: [19] <author> R. E. Dillon Jr. </author> <title> A parametric study of perforated muzzle brakes. </title> <type> ARDC Tech. Report ARLCB-TR-84015, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1984. </year>
Reference-contexts: Such predictive balancing strategies may be used with OCTPART or other partition-ers [21, 23, 25]. 5 Results Consider the three-dimensional unsteady compressible flow in a cylinder containing a cylindrical vent. This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [19] </ref>. We match flow conditions to those of shock tube studies of Dillon [19] and Nagamatsu et al. [32]. Our focus is on the quasi-steady flow that exists behind the contact surface for a short time; thus, we initiate the problem by rupturing a hypothetical diaphragm between the two cylinders. <p> This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [19] </ref>. We match flow conditions to those of shock tube studies of Dillon [19] and Nagamatsu et al. [32]. Our focus is on the quasi-steady flow that exists behind the contact surface for a short time; thus, we initiate the problem by rupturing a hypothetical diaphragm between the two cylinders.
Reference: [20] <author> C. Farhat and M. Lesoinne. </author> <title> Automatic partitioning of unstructured meshes for the parallel solution of problems in computational mechanics. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 36 </volume> <pages> 745-764, </pages> <year> 1993. </year>
Reference-contexts: A Parallel Mesh Database [22, 45] provides operators to create and manipulate distributed mesh data. Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed <ref> [5, 20, 38, 27] </ref>; however, these may be inefficient in an adaptive computational environment. Parallel Sort Inertial Recursive Bisection (PSIRB) [45] performs recursive bisections of domains in directions normal to their principal axes of inertia.
Reference: [21] <author> J. E. Flaherty, M. Dindar, R. M. Loy, M. S. Shephard, B. K. Szyman-ski, J. D. Teresco, and L. H. Ziantz. </author> <title> Uniform and variable predictive load balancing for parallel adaptive finite element computation. To appear, </title> <booktitle> Proc. 17th Biennial Conf. on Numer. Analysis, </booktitle> <year> 1997. </year>
Reference-contexts: Larger elements take larger time steps, so work is concentrated on the smaller ones. Although this method complicates load balancing [24], it leads to a large improvement in overall efficiency. Weighting factors proportional to element size may be employed with octree partitioning or other procedures to help balance loading <ref> [21, 24] </ref>. Using an IBM SP2 computer, we apply the LRM and the parallel octree-based partitioning technique to three-dimensional compressible flow problems involving the Euler equations. <p> Typically, processor load balancing follows an h-refinement step. The ability to predict and correct for imbalance prior to enrichment can improve performance during refinement and coarsening while maintaining a balanced computation during the successive solution phase. Such predictive balancing strategies may be used with OCTPART or other partition-ers <ref> [21, 23, 25] </ref>. 5 Results Consider the three-dimensional unsteady compressible flow in a cylinder containing a cylindrical vent. This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns [19].
Reference: [22] <author> J. E. Flaherty, R. M. Loy, C. Ozturan, M. S. Shephard, B. K. Szyman-ski, J. D. Teresco, and L. H. Ziantz. </author> <title> Parallel structures and dynamic load balancing for adaptive finite element computation. </title> <type> SCOREC Report 22-1996, </type> <institution> Scientific Computation Research Center, Rensselaer Polytechnic Institute, Troy, </institution> <year> 1996. </year> <note> To appear Appl. Num. Math. </note>
Reference-contexts: A parallel octree library supports the creation and distribution of octree structures (Section 4). We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement [3]. A Parallel Mesh Database <ref> [22, 45] </ref> provides operators to create and manipulate distributed mesh data. Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed [5, 20, 38, 27]; however, these may be inefficient in an adaptive computational environment.
Reference: [23] <author> J. E. Flaherty, R. M. Loy, P. C. Scully, M. S. Shephard, B. K. Szyman-ski, J. D. Teresco, and L. H. Ziantz. </author> <title> Load balancing and communication optimization for parallel adaptive finite element computation. </title> <note> To appear, Proc. SCCC '97, </note> <year> 1997. </year>
Reference-contexts: Typically, processor load balancing follows an h-refinement step. The ability to predict and correct for imbalance prior to enrichment can improve performance during refinement and coarsening while maintaining a balanced computation during the successive solution phase. Such predictive balancing strategies may be used with OCTPART or other partition-ers <ref> [21, 23, 25] </ref>. 5 Results Consider the three-dimensional unsteady compressible flow in a cylinder containing a cylindrical vent. This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns [19].
Reference: [24] <author> J. E. Flaherty, R. M. Loy, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> Adaptive local refinement with octree load-balancing for the parallel solution of three-dimensional conservation laws. </title> <type> IMA Preprint Series 1483, </type> <institution> Institute for Mathematics and its Applications, University of Minnesota, </institution> <year> 1997. </year> <note> To appear, J. Parallel and Dist. Comput. </note>
Reference-contexts: It permits time steps on elements to be proportional to their size. Larger elements take larger time steps, so work is concentrated on the smaller ones. Although this method complicates load balancing <ref> [24] </ref>, it leads to a large improvement in overall efficiency. Weighting factors proportional to element size may be employed with octree partitioning or other procedures to help balance loading [21, 24]. <p> Larger elements take larger time steps, so work is concentrated on the smaller ones. Although this method complicates load balancing [24], it leads to a large improvement in overall efficiency. Weighting factors proportional to element size may be employed with octree partitioning or other procedures to help balance loading <ref> [21, 24] </ref>. Using an IBM SP2 computer, we apply the LRM and the parallel octree-based partitioning technique to three-dimensional compressible flow problems involving the Euler equations. <p> When used on non-octree generated meshes, elements may not be well-aligned with octant boundaries. This can lead to jagged partition boundaries, and a larger than necessary interprocessor boundary. An inexpensive boundary smoothing procedure <ref> [24] </ref> has been developed to correct for this. The smoothing procedure is independent of the octree and may be used as a post-processing step for any load balancer. Typically, processor load balancing follows an h-refinement step. <p> Mesh generation makes extensive use of the octree, and a successful dynamic load balancing algorithm is based on the octree. OCTPART is an inexpensive parallel repartitioner which controls partition shapes well <ref> [18, 24] </ref>.
Reference: [25] <author> J. E. Flaherty, R. M. Loy, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> Predictive load balancing for parallel adaptive finite element computation. </title> <editor> In H. R. Arabnia, editor, </editor> <booktitle> Proc. </booktitle> <volume> PDPTA '97, volume I, </volume> <pages> pages 460-469, </pages> <year> 1997. </year>
Reference-contexts: Typically, processor load balancing follows an h-refinement step. The ability to predict and correct for imbalance prior to enrichment can improve performance during refinement and coarsening while maintaining a balanced computation during the successive solution phase. Such predictive balancing strategies may be used with OCTPART or other partition-ers <ref> [21, 23, 25] </ref>. 5 Results Consider the three-dimensional unsteady compressible flow in a cylinder containing a cylindrical vent. This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns [19].
Reference: [26] <author> P. L. George. </author> <title> Automatic Mesh Generation. </title> <publisher> John Wiley and Sons, Ltd., </publisher> <address> Chichester, </address> <year> 1991. </year>
Reference-contexts: Adap--tivity on parallel computers, however, introduces complications that do not arise with simpler solution strategies. Adaptive algorithms that utilize unstructured meshes <ref> [1, 26, 43, 44] </ref> make the task of balancing processor computational load more difficult than with uniform structures. Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- and/or p-refinement.
Reference: [27] <author> G. Karypis and V. Kumar. Metis: </author> <title> Unstructured graph partitioning and sparse matrix ordering system. </title> <type> Tech. Report, </type> <institution> University of Min-nesota, Department of Computer Science, Minneapolis, MN, </institution> <year> 1995. </year>
Reference-contexts: A Parallel Mesh Database [22, 45] provides operators to create and manipulate distributed mesh data. Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed <ref> [5, 20, 38, 27] </ref>; however, these may be inefficient in an adaptive computational environment. Parallel Sort Inertial Recursive Bisection (PSIRB) [45] performs recursive bisections of domains in directions normal to their principal axes of inertia.
Reference: [28] <author> A. Kela. </author> <title> Hierarchical octree approximations for boundary representation-based geometric models. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 21 </volume> <pages> 355-362, </pages> <year> 1989. </year>
Reference-contexts: Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- and/or p-refinement. Quadtree and octree decomposition is a successful strategy to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. Three-dimensional parallel mesh generation also makes use of octree procedures. With duplication of the tree on every processor [15, 16] the process does not scale. Scalable parallel mesh generation requires a distributed octree structure [48]. <p> Once refinement thresholds are set at the beginning of the simulation, refinement and coarsening are automatic. 4 Distributed Octree Quadtrees and octrees have been successfully used as spatial data structures to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. The localization allows finite elements to be generated efficiently by focusing on specific neighborhoods rather than the entire domain. An octree-based mesh generator [46] recursively subdivides an embedding of the problem domain in a cubic universe into eight octants wherever more resolution is required.
Reference: [29] <author> W. L. Kleb and J. T. Batina. </author> <title> Temporal adaptive Euler/Navier--Stokes algorithm involving unstructured dynamic meshes. </title> <journal> AIAA J., </journal> <volume> 30(8) </volume> <pages> 1980-1985, </pages> <year> 1992. </year>
Reference-contexts: Therefore, an unintended side effect of h-refinement is a reduction of computational efficiency on larger elements. In order to 2 increase efficiency, temporal adaptivity has been applied to overlapping two-dimensional uniform [4, 6, 8, 14] and unstructured <ref> [29] </ref> meshes. In Section 3.2, we describe an explicit Local Refinement Method (LRM) for the solution of time-dependent conservation laws on three-dimensional unstructured meshes. It permits time steps on elements to be proportional to their size. Larger elements take larger time steps, so work is concentrated on the smaller ones. <p> Since flux calculations are typically the most expensive part of the integration, this savings outweighs any possible losses due to using reduced time steps. Choosing time steps that are fractional powers of two also helps to organize the computation <ref> [29] </ref>. 3.3 Error Control Error control is accomplished through backtracking. Time steps are accepted or rejected based on whether or not elemental error indicators exceed a prescribed tolerance. Rejected time steps are repeated subsequent to adaptive space-time h-refinement and rebalancing.
Reference: [30] <author> E. Leiss and H. Reddy. </author> <title> Distributed load balancing: design and performance analysis. </title> <editor> W. M. </editor> <booktitle> Kuck Research Computation Laboratory, </booktitle> <volume> 5 </volume> <pages> 205-270, </pages> <year> 1989. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [7, 9, 13, 14, 18, 30, 45, 52, 54] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques [36, 41, 53] specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions.
Reference: [31] <author> R. A. Ludwig, J. E. Flaherty, F. Guerinoni, P. L. Baehmann, and M. S. Shephard. </author> <title> Adaptive solutions of the Euler equations using finite quadtree and octree grids. </title> <journal> Computers and Structures, </journal> <volume> 30 </volume> <pages> 327-336, </pages> <year> 1988. </year>
Reference-contexts: it using a "numerical flux" function h (U + j ; U j ) depen dent on solution states U + j and U j on the inside and outside, respectively, of @ j : Several numerical flux functions are possible [12, 47]; we use van Leer's flux vector splitting <ref> [18, 31, 51] </ref>. 3 Adaptive Techniques The software uses adaptive h-refinement in space and time to concentrate computational effort in areas of inadequate solution resolution.
Reference: [32] <author> H. T. Nagamatsu, K. Y. Choi, R. E. Duffy, and G. C. Carofano. </author> <title> An experimental and numerical study of the flow through a vent hole in a perforated muzzle brake. </title> <type> ARDEC Tech. Report ARCCB-TR-87016, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1987. </year>
Reference-contexts: This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns [19]. We match flow conditions to those of shock tube studies of Dillon [19] and Nagamatsu et al. <ref> [32] </ref>. Our focus is on the quasi-steady flow that exists behind the contact surface for a short time; thus, we initiate the problem by rupturing a hypothetical diaphragm between the two cylinders. <p> The walls of the cylinders are given reflected boundary conditions, and a far field condition is applied at the vent exit. All results were obtained using 16 processors of an IBM SP2 computer. 5.1 Vent Tube Aspect Ratio Comparisons Following umerical results of Nagamatsu et al. <ref> [32] </ref>, we examine vent aspect ratios where the length L of the vent to its diameter D are 1, 2, and 3. The initial meshes contain 94,395, 69,572, and 61,648 tetrahedral elements, respectively, for L/D=1, 2, and 3. <p> In the L/D=1 case, a supersonic flow has reached the vent exit, while the flow at the vent exit for L/D=2 and L/D=3 has not yet become sonic. These flow features compare favorably with experimental and numerical results of Nagamatsu et al. <ref> [32] </ref>. problem obtained using OCTPART. The meshes at t = 1:0 (right column) show extensive refinement near discontinuities and none in areas with little solution variation. 5.2 Global vs.
Reference: [33] <author> L. Oliker and R. Biswas. </author> <title> Efficient load balancing and data remapping for adaptive grid calculations. </title> <booktitle> In Proc. 9th ACM Symposium on Parallel Algorithms and Architectures (SPAA), </booktitle> <pages> pages 33-42, </pages> <address> Newport, </address> <year> 1997. </year>
Reference-contexts: Multilevel partitioning algorithms allow a more expensive partitioning algorithm to be used on a coarser structure to achieve good partitions at a smaller cost <ref> [33] </ref>. The distributed octree may be useful in this context as well. Partitioning the terminal octants as the coarser mesh with a graph partitioner is a potential way to take advantage of this. The Discontinuous Galerkin Method lends itself to a parallel, higher order spatial solution.
Reference: [34] <author> L. Oliker, R. Biswas, and R. C. Strawn. </author> <title> Parallel implementaion of an adaptive scheme for 3D unstructured grids on the SP2. </title> <booktitle> In Proc. 3rd International Workshop on Parallel Algorithms for Irregularly Structured Problems, </booktitle> <address> Santa Barbara, </address> <year> 1996. </year>
Reference-contexts: The computation consists of solution steps with periodic error checking, which leads to adaptive enrichment when necessary. 3.1 h-Refinement Mesh refinement and coarsening utilize edge-based error indicators to determine where to perform enrichment <ref> [34, 45] </ref>. Coarsening is performed when a group of elements all have edges that are so marked. Convex polyhedra of such elements containing a central vertex are identified.
Reference: [35] <author> S. Osher and S. Chakravarthy. </author> <title> Upwind schemes and boundary conditions with applications to the euler equations in general coordinates. </title> <journal> J. Comput. Phys., </journal> <volume> 50, </volume> <year> 1983. </year>
Reference-contexts: We are currently implementing a locally adaptive p-refinement 19 method to complement the existing h-refinement. We currently use Van Leer flux vector splitting. Other methods such as Roe [39, 40] and Osher <ref> [35] </ref> introduce substantially less artificial dissipation, producing more accurate solutions than Van Leer on the same mesh, but at the expense of more computationally demanding iterations. 7 Acknowledgements We wish to thank our colleagues at Rensselaer, particularly Stephen Cos-grove, for their assistance. This research was partially supported by the U.S.
Reference: [36] <author> A. Patra and J. T. Oden. </author> <title> Problem decomposition for adaptive hp finite element methods. </title> <journal> Comp. Sys. Engng., </journal> <volume> 6(2):97, </volume> <year> 1995. </year>
Reference-contexts: This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors [7, 9, 13, 14, 18, 30, 45, 52, 54]. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques <ref> [36, 41, 53] </ref> specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions. We describe a dynamic partitioning technique that exploits the properties of three-dimensional octree-structured meshes.
Reference: [37] <author> R. Perucchio, M. Saxena, and A. Kela. </author> <title> Automatic mesh generation from solid models based on recursive spatial decompositions. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 28 </volume> <pages> 2469-2501, </pages> <year> 1989. </year>
Reference-contexts: Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- and/or p-refinement. Quadtree and octree decomposition is a successful strategy to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. Three-dimensional parallel mesh generation also makes use of octree procedures. With duplication of the tree on every processor [15, 16] the process does not scale. Scalable parallel mesh generation requires a distributed octree structure [48]. <p> Once refinement thresholds are set at the beginning of the simulation, refinement and coarsening are automatic. 4 Distributed Octree Quadtrees and octrees have been successfully used as spatial data structures to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. The localization allows finite elements to be generated efficiently by focusing on specific neighborhoods rather than the entire domain. An octree-based mesh generator [46] recursively subdivides an embedding of the problem domain in a cubic universe into eight octants wherever more resolution is required.
Reference: [38] <author> A. Pothen, H. Simon, and K.-P. Liou. </author> <title> Partitioning sparse matrices with eigenvectors of graphs. </title> <journal> SIAM J. Mat. Anal. Appl., </journal> <volume> 11(3) </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: A Parallel Mesh Database [22, 45] provides operators to create and manipulate distributed mesh data. Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed <ref> [5, 20, 38, 27] </ref>; however, these may be inefficient in an adaptive computational environment. Parallel Sort Inertial Recursive Bisection (PSIRB) [45] performs recursive bisections of domains in directions normal to their principal axes of inertia.
Reference: [39] <author> P. L. Roe. </author> <title> Approximate riemann solvers, parametric vectors and difference schemes. </title> <journal> J. Comput. Phys., </journal> <volume> 43, </volume> <year> 1981. </year>
Reference-contexts: The spatial accuracy can be extended to an arbitrarily high order while still maintaining a nearest neighbor communication pattern. We are currently implementing a locally adaptive p-refinement 19 method to complement the existing h-refinement. We currently use Van Leer flux vector splitting. Other methods such as Roe <ref> [39, 40] </ref> and Osher [35] introduce substantially less artificial dissipation, producing more accurate solutions than Van Leer on the same mesh, but at the expense of more computationally demanding iterations. 7 Acknowledgements We wish to thank our colleagues at Rensselaer, particularly Stephen Cos-grove, for their assistance.
Reference: [40] <author> P. L. Roe. </author> <title> Characteristic based schemes for the euler equations. </title> <booktitle> Annual Review of Fluid Mechanics, </booktitle> <volume> 18, </volume> <year> 1986. </year> <month> 23 </month>
Reference-contexts: The spatial accuracy can be extended to an arbitrarily high order while still maintaining a nearest neighbor communication pattern. We are currently implementing a locally adaptive p-refinement 19 method to complement the existing h-refinement. We currently use Van Leer flux vector splitting. Other methods such as Roe <ref> [39, 40] </ref> and Osher [35] introduce substantially less artificial dissipation, producing more accurate solutions than Van Leer on the same mesh, but at the expense of more computationally demanding iterations. 7 Acknowledgements We wish to thank our colleagues at Rensselaer, particularly Stephen Cos-grove, for their assistance.
Reference: [41] <author> K. Schloegel, G. Karypis, and V. Kumar. </author> <title> Parallel multilevel diffusion algorithms for repartitioning of adaptive meshes. </title> <type> Tech. Report 97-014, </type> <institution> University of Minnesota, Department of Computer Science and Army HPC Center, Minneapolis, MN, </institution> <year> 1997. </year>
Reference-contexts: This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors [7, 9, 13, 14, 18, 30, 45, 52, 54]. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques <ref> [36, 41, 53] </ref> specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions. We describe a dynamic partitioning technique that exploits the properties of three-dimensional octree-structured meshes.
Reference: [42] <author> W. J. Schroeder and M. S. Shephard. </author> <title> Geometry-based fully automatic mesh generation and the delaunay triangulation. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 26 </volume> <pages> 2503-2515, </pages> <year> 1988. </year>
Reference-contexts: Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- and/or p-refinement. Quadtree and octree decomposition is a successful strategy to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. Three-dimensional parallel mesh generation also makes use of octree procedures. With duplication of the tree on every processor [15, 16] the process does not scale. Scalable parallel mesh generation requires a distributed octree structure [48]. <p> Once refinement thresholds are set at the beginning of the simulation, refinement and coarsening are automatic. 4 Distributed Octree Quadtrees and octrees have been successfully used as spatial data structures to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. The localization allows finite elements to be generated efficiently by focusing on specific neighborhoods rather than the entire domain. An octree-based mesh generator [46] recursively subdivides an embedding of the problem domain in a cubic universe into eight octants wherever more resolution is required.
Reference: [43] <author> M. S. Shephard. </author> <title> Approaches to the automatic generation and control of finite element meshes. </title> <journal> Applied Mechanics Review, </journal> <volume> 41(4) </volume> <pages> 169-185, </pages> <year> 1988. </year>
Reference-contexts: Adap--tivity on parallel computers, however, introduces complications that do not arise with simpler solution strategies. Adaptive algorithms that utilize unstructured meshes <ref> [1, 26, 43, 44] </ref> make the task of balancing processor computational load more difficult than with uniform structures. Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- and/or p-refinement.
Reference: [44] <author> M. S. Shephard. </author> <title> Update to: Approaches to the automatic generation and control of finite element meshes. </title> <journal> Applied Mechanics Reviews, </journal> <volume> 49(10, part 2):S5-S14, </volume> <year> 1996. </year>
Reference-contexts: Adap--tivity on parallel computers, however, introduces complications that do not arise with simpler solution strategies. Adaptive algorithms that utilize unstructured meshes <ref> [1, 26, 43, 44] </ref> make the task of balancing processor computational load more difficult than with uniform structures. Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- and/or p-refinement.
Reference: [45] <author> M. S. Shephard, J. E. Flaherty, H. L. de Cougny, C. Ozturan, C. L. Bottasso, and M. W. Beall. </author> <title> Parallel automated adaptive procedures for unstructured meshes. </title> <booktitle> In Parallel Comput. in CFD, number R-807, pages 6.1-6.49. </booktitle> <address> Agard, Neuilly-Sur-Seine, </address> <year> 1995. </year>
Reference-contexts: A parallel octree library supports the creation and distribution of octree structures (Section 4). We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement [3]. A Parallel Mesh Database <ref> [22, 45] </ref> provides operators to create and manipulate distributed mesh data. Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed [5, 20, 38, 27]; however, these may be inefficient in an adaptive computational environment. <p> Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed [5, 20, 38, 27]; however, these may be inefficient in an adaptive computational environment. Parallel Sort Inertial Recursive Bisection (PSIRB) <ref> [45] </ref> performs recursive bisections of domains in directions normal to their principal axes of inertia. A parallel sort enables its parallel execution; however, it is still costly relative to solution time. <p> A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [7, 9, 13, 14, 18, 30, 45, 52, 54] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques [36, 41, 53] specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions. <p> The computation consists of solution steps with periodic error checking, which leads to adaptive enrichment when necessary. 3.1 h-Refinement Mesh refinement and coarsening utilize edge-based error indicators to determine where to perform enrichment <ref> [34, 45] </ref>. Coarsening is performed when a group of elements all have edges that are so marked. Convex polyhedra of such elements containing a central vertex are identified. <p> Barring such an investigation, we note that results of a two-dimensional system similar to our three-dimensional system produced excellent scalability [8]. Scalability studies of three-dimensional steady flows using PSIRB with enrichment and migration strategies similar to those reported here also indicated very good scalabilty <ref> [45] </ref>. Mesh generation using the distributed octree structures rather than replicated trees enhances the scalability of that process. Finally, preliminary runs of the present system on a larger number of processors produced encouraging results. Incremental migration strategies for use with adaptivity are being developed [14, 18].
Reference: [46] <author> M. S. Shephard and M. K. Georges. </author> <title> Automatic three-dimensional mesh generation by the Finite Octree technique. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 32(4) </volume> <pages> 709-749, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- and/or p-refinement. Quadtree and octree decomposition is a successful strategy to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. Three-dimensional parallel mesh generation also makes use of octree procedures. With duplication of the tree on every processor [15, 16] the process does not scale. Scalable parallel mesh generation requires a distributed octree structure [48]. <p> Once refinement thresholds are set at the beginning of the simulation, refinement and coarsening are automatic. 4 Distributed Octree Quadtrees and octrees have been successfully used as spatial data structures to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. The localization allows finite elements to be generated efficiently by focusing on specific neighborhoods rather than the entire domain. An octree-based mesh generator [46] recursively subdivides an embedding of the problem domain in a cubic universe into eight octants wherever more resolution is required. <p> The localization allows finite elements to be generated efficiently by focusing on specific neighborhoods rather than the entire domain. An octree-based mesh generator <ref> [46] </ref> recursively subdivides an embedding of the problem domain in a cubic universe into eight octants wherever more resolution is required. Octant subdivision is initially based on geometric features of the domain, but solution-based criteria are introduced during adaptive h-refinement.
Reference: [47] <author> C.-W. Shu and S. Osher. </author> <title> Efficient implementation of essentially non-oscillatory shock-capturing schemes, II. </title> <journal> J. Comput. Phys., </journal> <volume> 27 </volume> <pages> 1-31, </pages> <year> 1978. </year>
Reference-contexts: The subscripts t and x i , i = 1; 2; 3, denote partial differentiation with respect to time and the spatial coordinates. Finite difference schemes for (1), such as the Total Variation Diminishing (TVD) [49, 50] and Essentially Non-Oscillatory (ENO) <ref> [47] </ref> methods, achieve high-order accuracy by using a computational stencil that enlarges with order. A wide stencil makes the methods difficult to implement on unstructured meshes and limits efficient implementation on parallel computers. <p> We specify it using a "numerical flux" function h (U + j ; U j ) depen dent on solution states U + j and U j on the inside and outside, respectively, of @ j : Several numerical flux functions are possible <ref> [12, 47] </ref>; we use van Leer's flux vector splitting [18, 31, 51]. 3 Adaptive Techniques The software uses adaptive h-refinement in space and time to concentrate computational effort in areas of inadequate solution resolution.
Reference: [48] <author> M. L. Simone, M. S. Shephard, J. E. Flaherty, and R. M. Loy. </author> <title> A distributed octree and neighbor-finding algorithms for parallel mesh generation. </title> <type> Tech. Report 23-1996, </type> <institution> Rensselaer Polytechnic Institute, Scientific Computation Research Center, Troy, </institution> <year> 1996. </year>
Reference-contexts: Three-dimensional parallel mesh generation also makes use of octree procedures. With duplication of the tree on every processor [15, 16] the process does not scale. Scalable parallel mesh generation requires a distributed octree structure <ref> [48] </ref>. In a distributed environment, the octree also serves as a means to partition the domain to be discretized. A parallel octree library supports the creation and distribution of octree structures (Section 4). We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement [3]. <p> For meshes generated by other procedures, or for meshes adapted independently of the octree, each element may be associated with the octant that contains its centroid. Scalable parallel mesh generation by the octree technique requires distribution of the tree structure across the network of processors <ref> [48] </ref>. A distributed octree is defined by octants with parent and child links; however, some links are off-processor. In the design of the parallel octree library, all parent and child queries return a pointer to a structure in the local processor's memory [48], which contains information about object locality. <p> the tree structure across the network of processors <ref> [48] </ref>. A distributed octree is defined by octants with parent and child links; however, some links are off-processor. In the design of the parallel octree library, all parent and child queries return a pointer to a structure in the local processor's memory [48], which contains information about object locality. If it is local, it is processed in the normal fashion. If not, the processor number and remote address are available. <p> Remote links require one level of indirection and storage of the intermediate structure. Since most links will be local, there is an overall space savings <ref> [48] </ref>. An octant whose parent is off-processor is called a local root. A parent query still returns a pointer to a structure; however, it contains information about the parent's processor, address, bounding coordinates, and its level in the global octree.
Reference: [49] <author> P. K. Sweby. </author> <title> High resolution schemes using flux limiters for hyperbolic conservation laws. </title> <journal> SIAM J. Numer. Anal, </journal> <volume> 21 </volume> <pages> 995-1011, </pages> <year> 1984. </year>
Reference-contexts: The subscripts t and x i , i = 1; 2; 3, denote partial differentiation with respect to time and the spatial coordinates. Finite difference schemes for (1), such as the Total Variation Diminishing (TVD) <ref> [49, 50] </ref> and Essentially Non-Oscillatory (ENO) [47] methods, achieve high-order accuracy by using a computational stencil that enlarges with order. A wide stencil makes the methods difficult to implement on unstructured meshes and limits efficient implementation on parallel computers.
Reference: [50] <author> B. Van Leer. </author> <title> Towards the ultimate conservative difference scheme. IV. A new approach to numerical convection. </title> <journal> J. Comput. Phys., </journal> <volume> 23 </volume> <pages> 276-299, </pages> <year> 1977. </year>
Reference-contexts: The subscripts t and x i , i = 1; 2; 3, denote partial differentiation with respect to time and the spatial coordinates. Finite difference schemes for (1), such as the Total Variation Diminishing (TVD) <ref> [49, 50] </ref> and Essentially Non-Oscillatory (ENO) [47] methods, achieve high-order accuracy by using a computational stencil that enlarges with order. A wide stencil makes the methods difficult to implement on unstructured meshes and limits efficient implementation on parallel computers.
Reference: [51] <author> B. Van Leer. </author> <title> Flux vector splitting for the Euler equations. </title> <type> ICASE Report 82-30, </type> <institution> ICASE, NASA Langley Research Center, Hampton, </institution> <year> 1982. </year>
Reference-contexts: it using a "numerical flux" function h (U + j ; U j ) depen dent on solution states U + j and U j on the inside and outside, respectively, of @ j : Several numerical flux functions are possible [12, 47]; we use van Leer's flux vector splitting <ref> [18, 31, 51] </ref>. 3 Adaptive Techniques The software uses adaptive h-refinement in space and time to concentrate computational effort in areas of inadequate solution resolution.
Reference: [52] <author> V. Vidwans, Y. Kallinderis, and V. Venkatakrishnan. </author> <title> Parallel dynamic load-balancing algorithm for three-dimensional adaptive unstructured grids. </title> <journal> AIAA J., </journal> <volume> 32(3) </volume> <pages> 497-505, </pages> <year> 1994. </year> <month> 24 </month>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [7, 9, 13, 14, 18, 30, 45, 52, 54] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques [36, 41, 53] specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions.
Reference: [53] <author> C. H. Walshaw, M. Cross, and M. Everett. </author> <title> Mesh partitioning and load-balancing for distributed memory parallel systems. </title> <booktitle> In Proc. Par. Dist. </booktitle> <institution> Comput. for Comput. Mech., </institution> <address> Lochinver, Scotland, </address> <year> 1997. </year>
Reference-contexts: This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors [7, 9, 13, 14, 18, 30, 45, 52, 54]. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques <ref> [36, 41, 53] </ref> specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions. We describe a dynamic partitioning technique that exploits the properties of three-dimensional octree-structured meshes.
Reference: [54] <author> S. Wheat, K. Devine, and A. MacCabe. </author> <title> Experience with automatic, dynamic load balancing and adaptive finite element computation. </title> <editor> In H. El-Rewini and B. Shriver, editors, </editor> <booktitle> Proc. 27th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 463-472, </pages> <address> Kihei, </address> <year> 1994. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [7, 9, 13, 14, 18, 30, 45, 52, 54] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Other techniques [36, 41, 53] specifically concentrate on balancing adaptive computations. Devine and Flaherty [18] employ a quadtree to support a parallel hp-adaptive analysis in two dimensions.
Reference: [55] <author> M. A. Yerry and M. S. Shephard. </author> <title> Automatic three-dimensional mesh generation by the modified octree technique. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 20 </volume> <pages> 1965-1990, </pages> <year> 1984. </year> <month> 25 </month>
Reference-contexts: Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- and/or p-refinement. Quadtree and octree decomposition is a successful strategy to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. Three-dimensional parallel mesh generation also makes use of octree procedures. With duplication of the tree on every processor [15, 16] the process does not scale. Scalable parallel mesh generation requires a distributed octree structure [48]. <p> Once refinement thresholds are set at the beginning of the simulation, refinement and coarsening are automatic. 4 Distributed Octree Quadtrees and octrees have been successfully used as spatial data structures to localize data in mesh generation procedures on serial computers <ref> [2, 28, 37, 42, 46, 55] </ref>. The localization allows finite elements to be generated efficiently by focusing on specific neighborhoods rather than the entire domain. An octree-based mesh generator [46] recursively subdivides an embedding of the problem domain in a cubic universe into eight octants wherever more resolution is required.
References-found: 55

