URL: http://www.cs.cornell.edu/Info/Projects/NuPrl/documents/Constable/tointegratedsys/make.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/NuPrl/html/publication.html
Root-URL: http://www.cs.cornell.edu
Title: Towards Integrated Systems for Symbolic Algebra and Formal Constructive Mathematics  
Author: Robert L. Constable* Paul B. Jackson* 
Note: Work supported in part by NSF grant CCR-9244739, NASA grant NGT-50786, ONR contracts N00014 92-J-1764 and N00014-91-J-4123  
Date: May 13, 1998  
Affiliation: Cornell University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. Clarke and X. Zhao. </author> <title> Analytica|an experiment in combining theorem proving and symbolic computation. </title> <editor> In D. Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction, Lecture Notes in Art. Int., </booktitle> <volume> Vol. 607, </volume> <pages> pages 761-765. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: We were led by discussions with Conal Mannion [6] to explore ways that we could provide a "semantics for computer algebra systems". This reminded us of remarks by Dana Scott and led to reading carefully the papers of Clarke and Zhao on Analytica <ref> [1] </ref>. Finally we were led to looking in detail at Weyl and Axiom. We came to see a clear and deep connection between work in these systems and our own. Basically, the connection arises because these systems are very careful about the notion of an algebraic domain. <p> As Clarke <ref> [1] </ref> has done, one can build a prover inside an algebra system. In this case, one must trust the algebra code, but typically this is complex and there is a lot of it. As the algebra system grows, the prover is more and more compromised.
Reference: [2] <author> R. L. Constable et al. </author> <title> Implementing Mathematics with the Nuprl Development System. </title> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference-contexts: Monoid-axiom 1: 8x; y; z : M: f (f (x; y); z) = f (x; f (y; z)): monoid-axiom 2: 8x : M: f (e; x) = x = f (x; e): [*note on universal alg] 2.2 Type Theory Presentation of Structures The concepts of modern type theory [5], <ref> [2] </ref>, [8], [7] are well suited to defining algebraic structures. For example, the type of a monoid is just the dependent product 4 M : T ype fi f : (M fi M ! M ) fi e : M: We call this the Monoid Type. <p> We can imagine from universal algebra and category theory that we might want "large carriers", say the collection of all sets or the collection of all monoids. In a formal type theory such as Nuprl <ref> [2] </ref>, this could include monoids of large objects, e.g. a monoid of sets or types which can be written polymorphically as M : U i fi f : (M fi M ! M ) fi e : M where U i is the i-th universe of types. 2.3 Constructivity Issues Historical
Reference: [3] <author> A. Frolich and J. C. Shepherdson. </author> <title> Effective procedures in field theory. </title> <journal> Phil. Trans. Roy. Soc. Ser. A, </journal> <volume> 248 </volume> <pages> 407-432, 1955-56. </pages>
Reference-contexts: L. van der Waerden introduced the notion of an explicitly given field, essentially one satisfying Kronecker's conditions, and showed that not all such fields have splitting algorithms. In the 50's the techniques of recursive function theory were used to obtain other negative results. For example, Frohlich & Shepherdson <ref> [3] </ref> showed that there are domains in which a ??? can be computed, but there is no factorization algorithm.
Reference: [4] <author> R. Jenks and R. Sutor. </author> <title> Axiom: The Scientific Computation System. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Although much of the work takes place in so called classical mathematics; nevertheless, careful development of topics in the subject, as in Axiom <ref> [4] </ref> and Weyl [9] for example, bears strong resemblance to constructive mathematics.
Reference: [5] <author> M. Lof. </author> <title> Constructive mathematics and computer programming. </title> <booktitle> In Proceedings of the 6th International Congress for Logic, Methodology, and Philosophy of Science, </booktitle> <pages> pages 153-175, </pages> <address> Amsterdam, 1982. </address> <publisher> North Holland. </publisher>
Reference-contexts: Monoid-axiom 1: 8x; y; z : M: f (f (x; y); z) = f (x; f (y; z)): monoid-axiom 2: 8x : M: f (e; x) = x = f (x; e): [*note on universal alg] 2.2 Type Theory Presentation of Structures The concepts of modern type theory <ref> [5] </ref>, [2], [8], [7] are well suited to defining algebraic structures. For example, the type of a monoid is just the dependent product 4 M : T ype fi f : (M fi M ! M ) fi e : M: We call this the Monoid Type.
Reference: [6] <author> C. L. T. Mannion. </author> <title> Scientific computation, symbolic computation and inference. </title> <note> Will be a techreport soon., </note> <month> September </month> <year> 1993. </year>
Reference-contexts: We hope that people find these observations a valuable complement to the technical results we present. The starting point for us was an attempt to apply Nuprl in the realm of computational science. We were led by discussions with Conal Mannion <ref> [6] </ref> to explore ways that we could provide a "semantics for computer algebra systems". This reminded us of remarks by Dana Scott and led to reading carefully the papers of Clarke and Zhao on Analytica [1]. Finally we were led to looking in detail at Weyl and Axiom.
Reference: [7] <author> B. Nordstrom, K. Petersson, and J. Smith. </author> <title> Programming in Martin-Lof's Type Theory. </title> <publisher> Oxford Sciences Publication, Oxford, </publisher> <year> 1990. </year>
Reference-contexts: 1: 8x; y; z : M: f (f (x; y); z) = f (x; f (y; z)): monoid-axiom 2: 8x : M: f (e; x) = x = f (x; e): [*note on universal alg] 2.2 Type Theory Presentation of Structures The concepts of modern type theory [5], [2], [8], <ref> [7] </ref> are well suited to defining algebraic structures. For example, the type of a monoid is just the dependent product 4 M : T ype fi f : (M fi M ! M ) fi e : M: We call this the Monoid Type.
Reference: [8] <author> S. Thompson. </author> <title> Type Theory and Functional Programming. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Monoid-axiom 1: 8x; y; z : M: f (f (x; y); z) = f (x; f (y; z)): monoid-axiom 2: 8x : M: f (e; x) = x = f (x; e): [*note on universal alg] 2.2 Type Theory Presentation of Structures The concepts of modern type theory [5], [2], <ref> [8] </ref>, [7] are well suited to defining algebraic structures. For example, the type of a monoid is just the dependent product 4 M : T ype fi f : (M fi M ! M ) fi e : M: We call this the Monoid Type.
Reference: [9] <author> R. Zippel. </author> <title> The Weyl computer algebra substrate. </title> <type> Technical Report TR 90-1077, </type> <institution> Computer Science Dept., Cornell University, </institution> <address> Ithaca, NY, </address> <year> 1990. </year> <month> 7 </month>
Reference-contexts: 1 Introduction Background The purpose of this paper is to report on our efforts to give a formal account of some of the algebra used in Computer Algebra Systems (CAS). In particular, we look at the concepts used in the so-called 3rd generation algebra systems, such as Axiom [4]and Weyl <ref> [9] </ref>. It is our claim that the Nuprl proof development system is especially well-suited to support this kind of mathematics. We have discovered in the course of our work some interesting ways in which Nuprl can internet with a CAS, and we want to illustrate these. <p> Although much of the work takes place in so called classical mathematics; nevertheless, careful development of topics in the subject, as in Axiom [4] and Weyl <ref> [9] </ref> for example, bears strong resemblance to constructive mathematics. We'll see details of this in section ??????, but the reasons are clear, if we say we can factor a polynomial, we usually want to know the factors and compute y Quotes from Davenport and Trager 2 further with them.
References-found: 9

