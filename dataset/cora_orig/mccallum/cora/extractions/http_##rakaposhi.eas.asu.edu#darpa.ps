URL: http://rakaposhi.eas.asu.edu/darpa.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: rao@cs.stanford.edu  marty@cis.stanford.edu  
Title: Planning in Concurrent Domains  
Author: Subbarao Kambhampati Jay M. Tenenbaum 
Address: Stanford, CA 94305-4026  
Affiliation: Center for Design Research and Computer Science Department  Center for Integrated Systems and Computer Science Department  Stanford University  
Abstract: In many real-world situations, a planner is part of an integrated problem-solving environment and must operate concurrently with other planners and special purpose inference engines. Unlike the traditional AI planners, planners operating in such concurrent environments have to contend with an evolving problem specification, and should be able to interact and coordinate with the other modules on a continual basis. This in turn poses several critical requirements on the planning methodology. In this paper we identify the ability to incrementally accommodate the changes necessitated by the externally imposed constraints into the existing plans, and the ability to understand and reason about the rationale behind externally imposed constraints at an appropriate level of detail as two crucial requirements for planning in such environments. We then explore directions for extending classical hierarchical planning framework to handle those requirements.
Abstract-found: 1
Intro-found: 1
Reference: [ Chapman, 1987 ] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3), </volume> <year> 1987. </year>
Reference-contexts: Further more, the planner needs to understand the rationale behind the externally imposed constraints so that it can play an active role of coordinating its actions with the sdms . The classical planning paradigm <ref> [ Chapman, 1987 ] </ref> fails to adequately handle the requirements of these environments as it considers planning as a one-shot task of constructing a partially ordered sequence of actions for achieving a given set of goals.
Reference: [ Corkill, 1979 ] <author> D.D. Corkill. </author> <title> Hierarchical planning in a distributed environment. </title> <booktitle> In Proceedings of Sixth IJCAI, </booktitle> <month> August </month> <year> 1979. </year>
Reference-contexts: Enabling the planner to reason about the rationale behind the constraints imposed by the sdms poses special problems because of the heterogeneous nature of the modules in a concurrent environment. Previous research in distributed planning (e.g. <ref> [ Durfee and Lesser, 1988, Corkill, 1979 ] </ref> ), black board systems (e.g. [ Hayes-Roth, 1987 ] ), embedded systems (e.g. [ Georgeff, 1990 ] ) and multi-agent planning architectures (e.g. [ Lansky, 1988 ] ), mostly addressed the issues of coordinating the actions of homogeneous planners working on different aspects
Reference: [ Cutkosky and Tenenbaum, 1990 ] <author> M. R. Cutkosky and J. M. Tenenbaum. </author> <title> A methodology and computational framework for concurrent product and process design. </title> <journal> Mechanism and Machine Theory, </journal> <volume> 23(5), </volume> <year> 1990. </year>
Reference: [ Durfee and Lesser, 1988 ] <author> E.H. Durfee and V.R. Lesser. </author> <title> Predictability versus responsiveness: Coordinating problem solvers in dynamic domains. </title> <booktitle> In Proceedings of Seventh NCAI, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: Enabling the planner to reason about the rationale behind the constraints imposed by the sdms poses special problems because of the heterogeneous nature of the modules in a concurrent environment. Previous research in distributed planning (e.g. <ref> [ Durfee and Lesser, 1988, Corkill, 1979 ] </ref> ), black board systems (e.g. [ Hayes-Roth, 1987 ] ), embedded systems (e.g. [ Georgeff, 1990 ] ) and multi-agent planning architectures (e.g. [ Lansky, 1988 ] ), mostly addressed the issues of coordinating the actions of homogeneous planners working on different aspects <p> Though the issue of coordination have been addressed previously in distributed planning and blackboard based approaches to planning, they generally assume that the individual planners are all identical and share a common representation (e.g. <ref> [ Durfee and Lesser, 1988 ] </ref> ) and that there is a single central knowledge base shared among all modules and planners [ Hayes-Roth, 1987, Durfee and Lesser, 1988 ] . <p> been addressed previously in distributed planning and blackboard based approaches to planning, they generally assume that the individual planners are all identical and share a common representation (e.g. [ Durfee and Lesser, 1988 ] ) and that there is a single central knowledge base shared among all modules and planners <ref> [ Hayes-Roth, 1987, Durfee and Lesser, 1988 ] </ref> . Because of these assumptions, coordination is accomplished in those architectures by allowing each planner to directly reason about the constraints imposed by other modules.
Reference: [ Georgeff, 1990 ] <author> M. Georgeff. </author> <title> Decision-making in an embedded reasoning system. </title> <booktitle> In Proceedings of Eleventh IJCAI, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Previous research in distributed planning (e.g. [ Durfee and Lesser, 1988, Corkill, 1979 ] ), black board systems (e.g. [ Hayes-Roth, 1987 ] ), embedded systems (e.g. <ref> [ Georgeff, 1990 ] </ref> ) and multi-agent planning architectures (e.g. [ Lansky, 1988 ] ), mostly addressed the issues of coordinating the actions of homogeneous planners working on different aspects of a single problem where each planner can understand and reason about the rationale behind the constraints imposed by other planners.
Reference: [ Hayes-Roth, 1987 ] <author> B. Hayes-Roth. </author> <title> Dynamic control planning in adaptive intelligent systems. </title> <booktitle> In Proceedings of DARPA Knowledge-Based Planning Workshop, </booktitle> <month> Decem-ber </month> <year> 1987. </year>
Reference-contexts: Enabling the planner to reason about the rationale behind the constraints imposed by the sdms poses special problems because of the heterogeneous nature of the modules in a concurrent environment. Previous research in distributed planning (e.g. [ Durfee and Lesser, 1988, Corkill, 1979 ] ), black board systems (e.g. <ref> [ Hayes-Roth, 1987 ] </ref> ), embedded systems (e.g. [ Georgeff, 1990 ] ) and multi-agent planning architectures (e.g. [ Lansky, 1988 ] ), mostly addressed the issues of coordinating the actions of homogeneous planners working on different aspects of a single problem where each planner can understand and reason about the <p> been addressed previously in distributed planning and blackboard based approaches to planning, they generally assume that the individual planners are all identical and share a common representation (e.g. [ Durfee and Lesser, 1988 ] ) and that there is a single central knowledge base shared among all modules and planners <ref> [ Hayes-Roth, 1987, Durfee and Lesser, 1988 ] </ref> . Because of these assumptions, coordination is accomplished in those architectures by allowing each planner to directly reason about the constraints imposed by other modules. <p> Because of these assumptions, coordination is accomplished in those architectures by allowing each planner to directly reason about the constraints imposed by other modules. This is controlled either through a central black-board mechanism <ref> [ Hayes-Roth, 1987 ] </ref> , a hierarchical organization of planners or through the use of localized representations that explicitly circumscribe the effects of the agent's actions [ Lansky, 1988 ] .
Reference: [ Hayes, 1987 ] <author> C. Hayes. </author> <title> Using goal interactions to guide planning. </title> <booktitle> In Proceedings of 6th National Conference on Artificial Intelligence, </booktitle> <pages> pages 224--228, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Thus 2 This is in contrast to approaches such as <ref> [ Hayes, 1987 ] </ref> , that allow externally imposed constraints to enter the plan, but do not reason about the effect of those constraints on the correctness of the plan. 3 It should be emphasized here that we are not concerned with the absolute correctness of the plan, but rather its <p> Such changes may be a result of feasibility considerations (for example, in process planning, the geometric modeler might rule out some infeasible feature orderings <ref> [ Hayes, 1987 ] </ref> ), or of optimality considerations (eg. sdms may group several steps of the plan together for efficient execution etc., and such groupings may be inconsistent with the existing ordering relations [ Kamb-hampati and Philpot, 1990 ] ).
Reference: [ Kambhampati and Cutkosky, 1991 ] <author> S. Kambhampati and M. R. Cutkosky. </author> <title> An approach toward incremental and interactive planning for concurrent product and process design. </title> <booktitle> In Proceedings of ASME Winter Annual Meeting on Computer Based Aproaches to Concurrent Engineering, (To appear) 1991. </booktitle>
Reference: [ Kambhampati and Hendler, 1989 ] <author> S. Kambhampati and J.A. Hendler. </author> <title> Control of refitting during plan reuse. </title> <booktitle> In Proceedings of 11th International JointConference on Artificial Intelligence, </booktitle> <pages> pages 943--948, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Finally, any refit-tasks introduced during the repair process are reduced by the hierarchical planner, which employs various validation structure based control strategies to localize this reduction <ref> [ Kambhampati and Hendler, 1989, Kambhampati, 1990b ] </ref> . 3 Accommodating External Constraints In this section, we discuss how the planner accommodates various types of changes necessitated by by externally imposed constraints.
Reference: [ Kambhampati and Philpot, 1990 ] <author> S. Kambhampati and A. Philpot. </author> <title> Incremental planning for concurrent product and process design. </title> <type> Technical report, </type> <institution> Center for Design Research and Computer Science Department, Stanford University, CA, </institution> <note> (In preparation) 1990. </note>
Reference: [ Kambhampati and Tenenbaum, 1990 ] <author> S. Kambhampati and J.M. Tenenbaum. </author> <title> Towards a paradigm for planning in interactive domains with multiple specialized modules. </title> <booktitle> In AAAI-90 Workshop on Automated Planning for Complex Domains, </booktitle> <month> August </month> <year> 1990. </year>
Reference: [ Kambhampati, 1989 ] <author> S. Kambhampati. </author> <title> Flexible Reuse and Modification in Hierarchical Planning: A Validation Structure Based Approach. </title> <type> PhD thesis, </type> <institution> Center for Automation Research, Department of Computer Science, University of Maryland, College Park, MD 20742, </institution> <month> Oc-tober </month> <year> 1989. </year>
Reference-contexts: as task annotations) encapsulate the role played by each task in the htn of the plan in ensuring the correctness of the plan. 2.3 The priar Modification Framework Based on the notion of validation structure, we have developed a framework for flexible modification of plans in hierarchical planning called priar <ref> [ Kambhampati, 1990c, Kambhampati, 1989 ] </ref> . In priar framework, a plan is modified in response to inconsistencies in its validation structure. The repair actions depend on the type of inconsistency, and the type of validation involved in that inconsistency.
Reference: [ Kambhampati, 1990a ] <author> S. Kambhampati. </author> <title> A classification of plan modification strategies based on their information requirements. </title> <booktitle> In AAAI-90 Spring Symposium on Case-Based Reasoning, </booktitle> <month> March </month> <year> 1990. </year>
Reference-contexts: Further, it should use least-commitment strategies during planning, as over-constrained plans do not lend themselves well for flexible reuse <ref> [ Kamb-hampati, 1989, Kambhampati, 1990a ] </ref> . <p> plan, but do not reason about the effect of those constraints on the correctness of the plan. 3 It should be emphasized here that we are not concerned with the absolute correctness of the plan, but rather its correctness with respect to the planner's own model of the domain (see <ref> [ Kambhampati, 1990a ] </ref> ). they are not well-suited to real world concurrent domains with heterogeneous modules. In section 4, we propose a methodology of interfacing the planner and the sdms that relaxes the strong assumptions made by these approaches.
Reference: [ Kambhampati, 1990b ] <author> S. Kambhampati. </author> <title> Mapping and retrieval during plan reuse: A validation-structure based approach. </title> <booktitle> In Proceedings of 8th National Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Finally, any refit-tasks introduced during the repair process are reduced by the hierarchical planner, which employs various validation structure based control strategies to localize this reduction <ref> [ Kambhampati and Hendler, 1989, Kambhampati, 1990b ] </ref> . 3 Accommodating External Constraints In this section, we discuss how the planner accommodates various types of changes necessitated by by externally imposed constraints.
Reference: [ Kambhampati, 1990c ] <author> S. Kambhampati. </author> <title> A theory of plan modification. </title> <booktitle> In Proceedings of 8th National Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: constraints, the planner should preserve correctness with respect to its validation structure while accommodating those changes. 2.2 Annotating Validation Structure To facilitate efficient reasoning about the correctness of the plan, and to guide incremental modification, we represent the plan validation structure as annotations on the individual tasks constituting the htn <ref> [ Kambhampati, 1990c ] </ref> . <p> as task annotations) encapsulate the role played by each task in the htn of the plan in ensuring the correctness of the plan. 2.3 The priar Modification Framework Based on the notion of validation structure, we have developed a framework for flexible modification of plans in hierarchical planning called priar <ref> [ Kambhampati, 1990c, Kambhampati, 1989 ] </ref> . In priar framework, a plan is modified in response to inconsistencies in its validation structure. The repair actions depend on the type of inconsistency, and the type of validation involved in that inconsistency.
Reference: [ Lansky, 1988 ] <author> A. Lansky. </author> <title> Localized event based reasoning for multiagent domains. </title> <journal> Computational Intelligence Journal, </journal> <volume> 4(4), </volume> <year> 1988. </year>
Reference-contexts: Previous research in distributed planning (e.g. [ Durfee and Lesser, 1988, Corkill, 1979 ] ), black board systems (e.g. [ Hayes-Roth, 1987 ] ), embedded systems (e.g. [ Georgeff, 1990 ] ) and multi-agent planning architectures (e.g. <ref> [ Lansky, 1988 ] </ref> ), mostly addressed the issues of coordinating the actions of homogeneous planners working on different aspects of a single problem where each planner can understand and reason about the rationale behind the constraints imposed by other planners. <p> This is controlled either through a central black-board mechanism [ Hayes-Roth, 1987 ] , a hierarchical organization of planners or through the use of localized representations that explicitly circumscribe the effects of the agent's actions <ref> [ Lansky, 1988 ] </ref> . In concurrent domains, the assumption of homogeneous modules holds only in situations whose where the modules of a concurrent environment constitute a ``vertical'' decomposition of the domain, where each module takes all the specialized considerations independently.
Reference: [ Sacerdoti, 1977 ] <author> E.D. Sacerdoti. </author> <title> A Structure for Plans and Behavior. </title> <publisher> Elsevier North-Holland, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: Validation Structure and Plan Correctness Hierarchical planning can be seen as a process of reduction of abstract tasks into more concrete subtasks with the help of domain specific task reduction schemata, and resolving any harmful interactions by introduction of additional partial ordering relations among tasks or backtracking over previous decisions <ref> [ Tate, 1977, Sacerdoti, 1977 ] </ref> .
Reference: [ Simmons and Davis, 1987 ] <author> R. Simmons and R. Davis. </author> <title> Generate, test and debug: Combining associational rules and causal models. </title> <booktitle> In Proceedings of 10th International Joint Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1987. </year>
Reference-contexts: For example, in a domain like process planning where there are several specialized considerations (such as geometric, fixturing etc.) that need to be taken into account, if the planner itself were to take them all into account during planning, plan construction could become prohibitively expensive <ref> [ Simmons and Davis, 1987 ] </ref> . Further more such an architecture will often be inconsistent with the natural structure of the domain.
Reference: [ Tate, 1977 ] <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proceedings of 5th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 888--893, </pages> <year> 1977. </year>
Reference-contexts: Since, hierarchical nonlinear planning (e.g. noah [ Sacer-doti, 1977 ] , nonlin <ref> [ Tate, 1977 ] </ref> , sipe [ Wilkins, 1984 ] ) is the prominent method of abstraction and least commitment in domain independent planning, in this paper we will explore ways of extending it to handle the incrementality requirements of concurrent domains. <p> Validation Structure and Plan Correctness Hierarchical planning can be seen as a process of reduction of abstract tasks into more concrete subtasks with the help of domain specific task reduction schemata, and resolving any harmful interactions by introduction of additional partial ordering relations among tasks or backtracking over previous decisions <ref> [ Tate, 1977, Sacerdoti, 1977 ] </ref> . <p> In the latter case, the planner may model clear access path as precondition ClearAccess (feature) of some task of P whose truth needs to be computed by an outside module (cf. ``compute-conditions'' of nonlin <ref> [ Tate, 1977 ] </ref> ). When asked to make such a condition true, the geometric modeler may then impose some constraints (such as c e ) on the current plan.
Reference: [ Wilkins, 1984 ] <author> D.E. Wilkins. </author> <title> Domain independent planning: Representation and plan generation. </title> <journal> Artificial Intelligence, </journal> <volume> 22:269--301, </volume> <year> 1984. </year>
Reference-contexts: Since, hierarchical nonlinear planning (e.g. noah [ Sacer-doti, 1977 ] , nonlin [ Tate, 1977 ] , sipe <ref> [ Wilkins, 1984 ] </ref> ) is the prominent method of abstraction and least commitment in domain independent planning, in this paper we will explore ways of extending it to handle the incrementality requirements of concurrent domains.
References-found: 20

