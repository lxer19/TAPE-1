URL: http://www.cse.psu.edu/~catuscia/teaching/cg520/papers_and_books/Barendregt_bc.ps.gz
Refering-URL: http://www.cse.psu.edu/~catuscia/teaching/cg520/98Fall/references.html
Root-URL: http://www.cse.psu.edu
Email: E-mail: henk@cs.kun.nl  
Title: LAMBDA CALCULI WITH TYPES  
Author: Henk Barendregt S. Abramsky, D.M. Gabbay and T.S.E. Maibaum 
Note: To appear in Handbook of Logic in Computer Science, Volume II, Edited by  Press Comments are welcome. Author's address:  
Address: Nijmegen  Toernooiveld 1 6525 ED Nijmegen The Netherlands  
Affiliation: Catholic University  Oxford University  Faculty of Mathematics and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: <author> van Bakel, </author> <note> S.J. </note>
Reference: [1991] <institution> Complete restrictions of the intersection type discipline. Theoretical Computer Science 102, 135-163. Barendregt, H.P. </institution>
Reference: [1984] <author> The lambda calculus: </author> <title> its syntax and semantics, revised edition, </title> <booktitle> Studies in Logic and the Foundations of Mathematics, </booktitle> <publisher> North-Holland. </publisher>
Reference-contexts: Moreover, although the Church style typed lambda calculi can be introduced directly, it is nevertheless useful to have some knowledge of the type-free lambda calculus. Therefore this section is devoted to this theory. For more information see Hindley and Seldin [1986] or Barendregt <ref> [1984] </ref>. 2.1 The system In this chapter the type-free lambda calculus will be called `-calculus' or simply . We start with an informal description. Application and abstraction The -calculus has two basic operations. The first one is application. <p> In the - calculus this strategy is not normalizing as is shown by the two reduction paths for KI above. There is, however, a variant of the lambda calculus, called the I-calculus, in which the eager evaluation strategy is normalizing. See Barendregt <ref> [1984] </ref>, Ch 9, and x11.3. In this I-calculus terms like K, 'throwing away' in the reduction KI !! I, do not exist. The 'ordinary' -calculus is sometimes referred to as K-calculus. In several lambda calculi with types one has that typable terms are strongly normalizing, see subsections 4.3 and 5.3. <p> one promises not to bind the variables in 0 by changing e.g. 0:nat, suc:(nat!nat) ` M : oe into ` (0suc:M ) : (nat!(nat!nat)!oe): (If one does not keep the promise no harm is done, since then 0 and suc become ordinary bound variables.) The programming language ML, see Milner <ref> [1984] </ref>, is essentially !- Curry extended with a constant Y and type assignment Y : ((oe!oe)!oe) for all oe. Properties of !-Curry Several properties of type assignment in ! are valid. The first one analyses how much of a basis is necessary in order to derive a type assignment. <p> The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo <ref> [1984] </ref>, Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1990] <editor> Functional programming and lambda calculus, in: van Leeuwen (1990) vol. </editor> <volume> II, </volume> <pages> 321-364. </pages>
Reference: [1991] <institution> Introduction to generalised type systems, </institution> <note> to appear in J. Functional Programming. </note> <editor> Barendregt, H.P., M. Coppo and M. </editor> <publisher> Dezani-Ciancaglini </publisher>
Reference: [1983] <editor> A filter lambda model and the completeness of type assignment, J. </editor> <booktitle> Symbolic Logic 48 (4), </booktitle> <pages> 931-940. </pages> <editor> Barendregt, H.P. and K. </editor> <publisher> Hemerik </publisher>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani <ref> [1983] </ref>, Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1990] <editor> Types in lambda calculi and programming languages, </editor> <booktitle> in: European Symposium on Programming, </booktitle> <editor> ed. N. Jones, </editor> <booktitle> Lecture Notes in Computer Science 432, </booktitle> <publisher> Springer, </publisher> <pages> 1-36. </pages> <editor> Barendregt, H.P. and W.J.M. </editor> <publisher> Dekkers </publisher>
Reference: [199-] <editor> Typed lambda calculi , to appear. Barendregt, H.P. and A. </editor> <publisher> Rezus </publisher>
Reference: [1983] <institution> Semantics of classical AUTOMATH and related systems, </institution> <note> Information and Control 59, 127-147. Barendsen, E. </note>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani <ref> [1983] </ref>, Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1989] <editor> Representation of logic, </editor> <title> data types and recursive functions in typed lambda calculi, </title> <type> Master's Thesis, </type> <institution> Dept. Computer Science, Catholic University, Toernooiveld 1, 6525 ED Nijmegen, The Netherlands. Barendsen, E. and J.H. Geuvers </institution>
Reference: [1989] <institution> Conservativity of P over PRED, ms. Dept. Computer Science, University of Nijmegen, </institution> <address> Toernooiveld 1, 6525 ED Nijmegen, The Netherlands. </address> <publisher> van Benthem Jutting, L.S. </publisher>
Reference: [1989] <institution> Personal communication. </institution>
Reference: [199-] <institution> Typing in pure type systems, </institution> <note> to appear in Information and Computation Berardi, S. </note>
Reference: [1988] <institution> Towards a mathematical analysis of the Coquand-Huet calculus of constructions and the other systems in Barendregt's cube, Dept. Computer Science, Carnegie-Mellon University and Dipartimento Matematica, Universita di Torino. </institution>
Reference: [1988a] <institution> Personal communication. </institution>
Reference: [1989] <institution> Personal communication. </institution>
Reference: [1990] <institution> Type dependence and constructive mathematics, </institution> <type> Ph.D. thesis, </type> <institution> Dipartimento Matematica, Universita di Torino. </institution> <note> Lambda Calculi with Types 185 B ohm, </note> <editor> C. and A. </editor> <publisher> Berarducci </publisher>
Reference: [1985] <institution> Automatic synthesis of typed -programs on term algebras, Theor. Comput. Sci. </institution> <type> 39, 135-154. de Bruijn, N.G. </type>
Reference: [1970] <editor> The mathematical language AUTOMATH, </editor> <title> its usage and some of its extensions, </title> <booktitle> in: Symposium on automatic demonstration (IRIA, Versailles 1968), Lecture Notes in Mathematics 125, </booktitle> <publisher> Springer, </publisher> <pages> 29-61. </pages>
Reference: [1980] <institution> A survey of the AUTOMATH project, </institution> <note> in: Hindley and Seldin (1980), 580-606. </note> <author> Cardelli, L. and P. </author> <note> Wegner </note>
Reference: [1985] <author> On understanding types, </author> <title> data abstraction and polymorphism, </title> <journal> ACM Comp. </journal> <note> Surveys 17-4. </note> <author> Church, A. </author> <title> [1932/33] ) A set of postulates for the foundation of logic, </title> <note> Annals of Mathematics (2) 33, 346-366 and 34, 839-864. </note>
Reference: [1940] <institution> A formulation of the simple theory of types, </institution> <note> J. Symbolic Logic 5, 56-68. </note>
Reference: [1941] <institution> The calculi of lambda conversion, Princeton University Press. Coppo, M. </institution>
Reference: [1985] <editor> A completeness theorem for recursively defined types, </editor> <booktitle> in: Proceedings of the 12th Int. Coll. on Automata and Programming, Lecture Notes in Computer Science 432, </booktitle> <publisher> Springer, </publisher> <pages> 120-129 Coppo, </pages> <editor> M. and F. </editor> <publisher> Cardone </publisher>
Reference: [1991] <editor> Type inference with recursive types: </editor> <title> syntax and semantics, </title> <booktitle> Information and Computation 92 (1), </booktitle> <pages> 48-80. </pages> <editor> Coppo, M., M. Dezani-Ciancaglini, G. Longo and F. </editor> <publisher> Honsell </publisher>
Reference: [1984] <editor> Extended type structures and filter lambda models, </editor> <booktitle> in: Logic Colloquium 82 , eds. </booktitle> <editor> G. Lolli, G. Longo and A. Marcja, </editor> <booktitle> Studies in Logic and the Foundations of Mathematics, </booktitle> <publisher> North Holland, </publisher> <pages> 241-262. </pages> <editor> Coppo, M., M. Dezani-Ciancaglini and B. </editor> <publisher> Venneri </publisher>
Reference-contexts: Moreover, although the Church style typed lambda calculi can be introduced directly, it is nevertheless useful to have some knowledge of the type-free lambda calculus. Therefore this section is devoted to this theory. For more information see Hindley and Seldin [1986] or Barendregt <ref> [1984] </ref>. 2.1 The system In this chapter the type-free lambda calculus will be called `-calculus' or simply . We start with an informal description. Application and abstraction The -calculus has two basic operations. The first one is application. <p> In the - calculus this strategy is not normalizing as is shown by the two reduction paths for KI above. There is, however, a variant of the lambda calculus, called the I-calculus, in which the eager evaluation strategy is normalizing. See Barendregt <ref> [1984] </ref>, Ch 9, and x11.3. In this I-calculus terms like K, 'throwing away' in the reduction KI !! I, do not exist. The 'ordinary' -calculus is sometimes referred to as K-calculus. In several lambda calculi with types one has that typable terms are strongly normalizing, see subsections 4.3 and 5.3. <p> one promises not to bind the variables in 0 by changing e.g. 0:nat, suc:(nat!nat) ` M : oe into ` (0suc:M ) : (nat!(nat!nat)!oe): (If one does not keep the promise no harm is done, since then 0 and suc become ordinary bound variables.) The programming language ML, see Milner <ref> [1984] </ref>, is essentially !- Curry extended with a constant Y and type assignment Y : ((oe!oe)!oe) for all oe. Properties of !-Curry Several properties of type assignment in ! are valid. The first one analyses how much of a basis is necessary in order to derive a type assignment. <p> The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo <ref> [1984] </ref>, Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1981] <editor> Functional characters of solvable terms, Zeitschrift f. Mathematische Logik u. </editor> <booktitle> Grundlagen der Mathematik 27, </booktitle> <pages> 45-58. </pages> <editor> Coppo, M., M. Dezani-Ciancaglini and M. </editor> <publisher> Zacchi </publisher>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri <ref> [1981] </ref>, Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1987] <author> Type Theories, </author> <title> normal forms and D 1 lambda models, Information and Computation 72, </title> <type> 85-116. Coquand, </type> <institution> Th. </institution>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. <p> " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. In that system the polymorphism is parametrized.
Reference: [1985] <institution> Une theorie des constructions, These de troisieme cycle, Universite Paris VII. </institution>
Reference: [1986] <editor> An analysis of Girard's paradox, </editor> <booktitle> in: Proceedings of the First Symposium of Logic in Computer Science, IEEE, </booktitle> <pages> 227-236. </pages>
Reference-contexts: Moreover, although the Church style typed lambda calculi can be introduced directly, it is nevertheless useful to have some knowledge of the type-free lambda calculus. Therefore this section is devoted to this theory. For more information see Hindley and Seldin <ref> [1986] </ref> or Barendregt [1984]. 2.1 The system In this chapter the type-free lambda calculus will be called `-calculus' or simply . We start with an informal description. Application and abstraction The -calculus has two basic operations. The first one is application.
Reference: [1989] <institution> Metamathematical investigation of a calculus of constructions, </institution> <note> in: Odifreddi (1990), 91-122. </note>
Reference: [1989] <editor> Reynolds paradox with the Type : Type axiom, in: </editor> <title> The calculus of constructions, Documentation and users's guide, version 4.10, Rapports Techniques 110, </title> <publisher> INRIA, </publisher> <address> B.P. 105, 78153 Le Chesnay Cedex, France, </address> <note> 4 unnumbered pages at the end of the report. 186 H.P. </note> <editor> Barendregt Coquand, Th. and G. </editor> <publisher> Huet </publisher>
Reference: [1988] <institution> The calculus of constructions, </institution> <note> Information and Computation 76, 95-120. Curry, H.B. </note>
Reference: [1934] <editor> Functionality in combinatory logic, </editor> <booktitle> Proc. </booktitle> <institution> Nat. Acad. Science USA 20, </institution> <month> 584-590. </month>
Reference: [1969] <editor> Modified basic functionality in combinatory logic, </editor> <volume> Dialectica 23, </volume> <pages> 83-92. </pages> <editor> Curry, H.B. and R. </editor> <publisher> Feys </publisher>
Reference: [1958] <editor> Combinatory Logic, </editor> <volume> Vol. I, </volume> <booktitle> Studies in Logic and the Foundations of Mathematics, </booktitle> <publisher> North Holland. </publisher> <editor> Curry, H.B., J.R. Hindley and J.P. </editor> <publisher> Seldin </publisher>
Reference: [1972] <editor> Combinatory Logic, </editor> <volume> Vol. </volume> <booktitle> II, Studies in Logic and the Foundations of Mathematics, </booktitle> <publisher> North Holland. van Daalen, D.T. </publisher>
Reference: [1980] <institution> The language theory of AUTOMATH , Ph.D. </institution> <type> thesis, </type> <institution> Technical University Eindhoven, </institution> <address> The Netherlands. </address> <publisher> van Dalen, </publisher> <address> D. </address>
Reference: [1983] <editor> Logic and structure, </editor> <booktitle> 2nd edition, </booktitle> <publisher> Springer. </publisher> <address> Davis, </address> <publisher> M. </publisher>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani <ref> [1983] </ref>, Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1958] <editor> Computability and unsolvability, McGraw-Hill. Dezani-Ciancaglini, M. and I. </editor> <publisher> Margaria </publisher>
Reference: [1987] <author> Polymorphic types, </author> <title> fixed-point combinators and continuous lambda models, </title> <booktitle> in: IFIP Conference on Formal Description of Programming Concepts III, </booktitle> <editor> Ed. M. Wirsing, </editor> <publisher> North-Holland, </publisher> <pages> 425-450. </pages> <note> Fitch, F.B. </note>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. <p> " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. In that system the polymorphism is parametrized.
Reference: [1952] <author> Symbolic logic, </author> <title> an introduction, </title> <publisher> Ronald Press, </publisher> <address> New York. </address>
Reference: [1974] <institution> Elements of combinatory logic, Yale University Press, New Heaven. Fokkinga, M.M. </institution>
Reference: [1987] <editor> Programming languages concepts the lambda calculus approach, </editor> <booktitle> in: Essays on concepts, formalism, and tools, </booktitle> <editor> eds. P.R.J. Asveld and A. Nijholt, </editor> <publisher> CWI tracts 42, </publisher> <address> Box 4079, 1009 AB Amsterdam, The Netherlands, </address> <pages> 129-162. </pages> <editor> Fujita, K. and Tonino, </editor> <publisher> H. </publisher>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. <p> " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. In that system the polymorphism is parametrized.
Reference: [1991] <institution> Logical systems are generalised type systems, ms. Technical University Delft, Faculty of Mathematics and Informatics, </institution> <address> Julianalaan 132, 2628 BL Delft, The Netherlands. </address> <publisher> Gandy, R.O. </publisher>
Reference: [1980] <editor> Proofs of strong normalisation, in: Hindley and Seldin (1980), </editor> <month> 457-478. </month> <title> Lambda Calculi with Types 187 Geuvers, </title> <publisher> J.H. </publisher>
Reference: [1988] <institution> The interpretation of logics in type systems, </institution> <type> Master thesis, </type> <institution> Dept. Computer Science, Catholic University, </institution> <address> Toernooiveld 1, 6525 ED Nijmegen, The Netherlands. </address>
Reference: [1989] <institution> Theory of constructions is not conservative over higher order logic, ms. Dept. Computer Science, Catholic University, </institution> <address> Toernooiveld 1, 6525 ED Nijmegen, The Netherlands. </address>
Reference: [1990] <institution> Type systems for higher order logic, ms. Dept. Computer Science, Catholic University, </institution> <address> Toernooiveld 1, 6525 ED Nijmegen, </address> <publisher> The Netherlands. </publisher> <editor> Geuvers, H. and M.J. </editor> <publisher> Nederhof </publisher>
Reference: [1991] <institution> A modular proof of strong normalisation for the calculus of constructions, </institution> <address> J. </address> <booktitle> Functional Programming, </booktitle> <volume> 1 (2), </volume> <pages> 155-189. </pages> <editor> Giannini, P. and S. </editor> <publisher> Ronchi della Roca </publisher>
Reference: [1988] <editor> Characterisation of typings in polymorphic type discipline, </editor> <booktitle> in: Proceedings of the Third Symposium of Logic in Computer Science, IEEE, </booktitle> <pages> 61-70. </pages> <address> Girard, J.-Y. </address>
Reference: [1972] <institution> Interpretation foctionelle et elimination des coupures dans l'arithmetique d'ordre superieur , Ph.D. </institution> <type> thesis, </type> <institution> Universite Paris VII. </institution> <note> Girard, </note> <editor> J.-Y., Y. Lafont and P. </editor> <publisher> Taylor </publisher>
Reference: [1989] <editor> Proofs and types, </editor> <booktitle> Tracts in Theoretical Computer Science 7, </booktitle> <publisher> Cambridge University Press. Harper, </publisher> <editor> R., F. Honsell and G. </editor> <publisher> Plotkin </publisher>
Reference: [1987] <editor> A framework for defining logics, </editor> <booktitle> in: Proceedings Second Symposium of Logic in Computer Science (Ithaca, </booktitle> <address> N.Y.), </address> <publisher> IEEE, </publisher> <address> Washington DC, 194-204. Helmink, </address> <publisher> L. </publisher>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. <p> " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. In that system the polymorphism is parametrized.
Reference: [1991] <institution> Girard's paradox in U, ms. Philips Research Laboratories, </institution> <address> Box 80.000, 5600 JA Eindhoven, The Netherlands. </address> <publisher> Henglein, F. </publisher>
Reference: [1990] <institution> A lower bound for full polymorphic type inference: </institution> <note> Girard-Reynolds typability is DEXPTIME-hard, Report RUU-CS-90-14, </note> <institution> Dept. Computer Science, Utrecht University, The Netherlands. Hindley, J.R. </institution>
Reference: [1969] <editor> The principal typescheme of an object in combinatory logic, </editor> <title> in: </title> <journal> Trans. Amer. Math. Soc. </journal> <volume> 146, </volume> <pages> 29-60. </pages>
Reference: [1983] <institution> The simple semantics for Coppo-Dezani-Salle types, </institution> <note> in: International Symposium on Programming, </note> <editor> Eds. M. Dezani-Ciancaglini and H. Montanari, </editor> <booktitle> Lecture Notes in Computer Science 137, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> 212-226. </pages> <editor> Hindley, J.R. and Seldin, </editor> <publisher> J.P. </publisher>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani <ref> [1983] </ref>, Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1980] <author> To H.B. Curry: </author> <title> Essays on combinatory logic, lambda calculus and formalism, </title> <publisher> Academic Press. </publisher>
Reference: [1986] <editor> Introduction to Combinators and -calculus, </editor> <publisher> London Mathematical Society Student Texts 1, Cambridge University Press. </publisher> <address> 188 H.P. Barendregt Hofstadter, D. </address>
Reference-contexts: Moreover, although the Church style typed lambda calculi can be introduced directly, it is nevertheless useful to have some knowledge of the type-free lambda calculus. Therefore this section is devoted to this theory. For more information see Hindley and Seldin <ref> [1986] </ref> or Barendregt [1984]. 2.1 The system In this chapter the type-free lambda calculus will be called `-calculus' or simply . We start with an informal description. Application and abstraction The -calculus has two basic operations. The first one is application.
Reference: [1979] <author> Godel Escher Bach: </author> <title> an eternal golden braid, </title> <publisher> Harvester Press. Howard, </publisher> <address> W.A. </address>
Reference: [1980] <institution> The formulae-as-types notion of construction, </institution> <note> in: Hindley and Seldin (1980), 479-490. </note> <author> Howard, W. A., G. Kreisel, R. J. Parikh and W. W. </author> <note> Tait </note>
Reference: [1963] <institution> Stanford Report, unpublished notes. Howe, </institution> <address> D. </address>
Reference-contexts: Also in Tait (1967) it is proved that all terms typable in ! are normalizing. This proof uses the so called method of `computable terms' and was already presented in the unpublished `Stanford Report' by Howard et al. <ref> [1963] </ref>. In fact, using Tait's method one can also prove strong normalization and applies to other systems as well, in particular to Godel's T ; see Troelstra [1973]. 62 H.P.
Reference: [1987] <institution> The computational behaviour of Girard's paradox, </institution> <address> in: </address> <booktitle> Proceedings of the Second Symposium of Logic in Computer Science (Ithaca, </booktitle> <address> N.Y.), </address> <publisher> IEEE, </publisher> <pages> 205-214. </pages> <address> Jacobs, B.P.F. </address>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. <p> " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. In that system the polymorphism is parametrized.
Reference: [1989] <institution> The inconsistency of higher order extensions of Martin-Lof's type theory, </institution> <note> J. Philosophical Logic 18, 399-422. </note>
Reference: [1991] <institution> Categorical type theory, </institution> <type> Ph.D. thesis, </type> <institution> Dept. Computer Science, Catholic University, </institution> <address> Toernooiveld 1, 6525 ED Nijmegen, </address> <publisher> The Netherlands. </publisher> <editor> Jacobs, B.P.F., I. Margeria and M. </editor> <publisher> Zacchi </publisher>
Reference: [199-] <institution> Filter models with polymorphic types, </institution> <note> to appear in Theoretical Computer Science. </note> <author> Kfoury, A.J., J. Tiuryn and P. </author> <note> Urzyczyn </note>
Reference: [1990] <editor> ML typability is DEXPTIME-complete, </editor> <booktitle> in: CAAP '90, </booktitle> <editor> ed. A. Arnold, </editor> <booktitle> in: Lecture Notes in Computer Science 431, </booktitle> <publisher> Springer, </publisher> <month> 206-220. </month> <title> Kleene, </title> <journal> S.C. [1936] -definability and recursiveness, Duke Math. J. </journal> <volume> 2, </volume> <pages> 340-353. </pages> <address> Kleene, S.C. </address> <publisher> and J.B. Rosser </publisher>
Reference: [1935] <institution> The inconsistency of certain formal logics, </institution> <note> Annals Math. (2) 36, 630-636. Klop, J.-W. </note>
Reference: [1980] <institution> Combinatory reduction systems, </institution> <type> Ph.D. thesis, </type> <institution> Utrecht University; CWI Tract, </institution> <address> Box 4079, 1009 AB Amsterdam, The Netherlands. Krivine, </address> <note> J. L. </note>
Reference: [1990] <author> Lambda-calcul, </author> <title> types et modeles, Masson, Paris. Lambek, </title> <editor> J. and P.J. </editor> <address> Scott </address>
Reference: [1986] <institution> Introduction to higher order categorical logic, Cambridge Studies in Advanced Mathematics, Cambridge University Press, </institution> <address> Cambridge. L auchli, </address> <publisher> H. </publisher>
Reference-contexts: Moreover, although the Church style typed lambda calculi can be introduced directly, it is nevertheless useful to have some knowledge of the type-free lambda calculus. Therefore this section is devoted to this theory. For more information see Hindley and Seldin <ref> [1986] </ref> or Barendregt [1984]. 2.1 The system In this chapter the type-free lambda calculus will be called `-calculus' or simply . We start with an informal description. Application and abstraction The -calculus has two basic operations. The first one is application.
Reference: [1970] <institution> An abstract notion of realizability for which intuitionistic predicate calculus is complete, </institution> <note> in: Intuitionism and Proof Theory, </note> <editor> eds. A. Kino et al., </editor> <booktitle> Studies in Logic and the Foundations of Mathematics, </booktitle> <publisher> North-Holland, </publisher> <pages> 227-234. </pages> <editor> Leeuwen, J. </editor> <publisher> van </publisher>
Reference: [1990] <institution> Handbook of Theoretical Computer Science, </institution> <month> Elsevier/MIT Press. </month> <title> Lambda Calculi with Types 189 Leivant, </title> <address> D. </address>
Reference: [1983] <editor> Reasoning about functional programs and complexity classes associated with type disciplines, </editor> <booktitle> 24th IEEE symposium on foundations of computer science, </booktitle> <pages> 460-469. </pages>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani <ref> [1983] </ref>, Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1990] <institution> Contracting proofs to programs, </institution> <note> in: Odifreddi (1990), 279-327 L ob, M. </note>
Reference: [1976] <institution> Embedding first order predicate logic in fragments of intuitionistic logic, </institution> <note> J. Symbolic Logic 41 (4), 705-718. </note> <editor> Longo, G. and E. </editor> <publisher> Moggi </publisher>
Reference: [1988] <institution> Constructive natural deduction and its modest interpretation, Report CMU-CS-88-131, Carnegie Mellon University, Pittsburgh, USA. Luo, Z. </institution>
Reference: [1990] <institution> An extended calculus of constructions, </institution> <type> Ph.D. thesis, </type> <institution> University of Edinburgh. </institution> <note> MacQueen, </note> <editor> D., G.D. Plotkin and R. </editor> <publisher> Sethi </publisher>
Reference: [1984] <editor> An ideal model for recursive polymorphic types, </editor> <booktitle> in: 11th ACM Symposium on Principles of Programming Languages, ACM, </booktitle> <pages> 165-174. </pages> <address> Malecki, S. </address>
Reference-contexts: Moreover, although the Church style typed lambda calculi can be introduced directly, it is nevertheless useful to have some knowledge of the type-free lambda calculus. Therefore this section is devoted to this theory. For more information see Hindley and Seldin [1986] or Barendregt <ref> [1984] </ref>. 2.1 The system In this chapter the type-free lambda calculus will be called `-calculus' or simply . We start with an informal description. Application and abstraction The -calculus has two basic operations. The first one is application. <p> In the - calculus this strategy is not normalizing as is shown by the two reduction paths for KI above. There is, however, a variant of the lambda calculus, called the I-calculus, in which the eager evaluation strategy is normalizing. See Barendregt <ref> [1984] </ref>, Ch 9, and x11.3. In this I-calculus terms like K, 'throwing away' in the reduction KI !! I, do not exist. The 'ordinary' -calculus is sometimes referred to as K-calculus. In several lambda calculi with types one has that typable terms are strongly normalizing, see subsections 4.3 and 5.3. <p> one promises not to bind the variables in 0 by changing e.g. 0:nat, suc:(nat!nat) ` M : oe into ` (0suc:M ) : (nat!(nat!nat)!oe): (If one does not keep the promise no harm is done, since then 0 and suc become ordinary bound variables.) The programming language ML, see Milner <ref> [1984] </ref>, is essentially !- Curry extended with a constant Y and type assignment Y : ((oe!oe)!oe) for all oe. Properties of !-Curry Several properties of type assignment in ! are valid. The first one analyses how much of a basis is necessary in order to derive a type assignment. <p> The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo <ref> [1984] </ref>, Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1989] <institution> Private communication. Martin-L of, </institution> <address> P. </address>
Reference: [1971] <institution> A construction of the provable wellorderings of the theory of species, ms. Mathematical Institute, University of Stockholm, </institution> <address> Sweden, </address> <pages> 14 pp. </pages>
Reference: [1984] <institution> Intuitionistic type theory, Bibliopolis, Napoli. Mendelson, E. </institution>
Reference-contexts: Moreover, although the Church style typed lambda calculi can be introduced directly, it is nevertheless useful to have some knowledge of the type-free lambda calculus. Therefore this section is devoted to this theory. For more information see Hindley and Seldin [1986] or Barendregt <ref> [1984] </ref>. 2.1 The system In this chapter the type-free lambda calculus will be called `-calculus' or simply . We start with an informal description. Application and abstraction The -calculus has two basic operations. The first one is application. <p> In the - calculus this strategy is not normalizing as is shown by the two reduction paths for KI above. There is, however, a variant of the lambda calculus, called the I-calculus, in which the eager evaluation strategy is normalizing. See Barendregt <ref> [1984] </ref>, Ch 9, and x11.3. In this I-calculus terms like K, 'throwing away' in the reduction KI !! I, do not exist. The 'ordinary' -calculus is sometimes referred to as K-calculus. In several lambda calculi with types one has that typable terms are strongly normalizing, see subsections 4.3 and 5.3. <p> one promises not to bind the variables in 0 by changing e.g. 0:nat, suc:(nat!nat) ` M : oe into ` (0suc:M ) : (nat!(nat!nat)!oe): (If one does not keep the promise no harm is done, since then 0 and suc become ordinary bound variables.) The programming language ML, see Milner <ref> [1984] </ref>, is essentially !- Curry extended with a constant Y and type assignment Y : ((oe!oe)!oe) for all oe. Properties of !-Curry Several properties of type assignment in ! are valid. The first one analyses how much of a basis is necessary in order to derive a type assignment. <p> The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo <ref> [1984] </ref>, Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1987] <institution> Introduction to mathematical logic, </institution> <address> third edition, </address> <publisher> Wadsworth and Brooks/Cole. Mendler, N.P. </publisher>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. <p> " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. In that system the polymorphism is parametrized.
Reference: [1987] <editor> Inductive types and type constraints in second-order lambda calculus, </editor> <booktitle> in: Proceedings of the Second Symposium of Logic in Computer Science (Ithaca, </booktitle> <address> N.Y.), </address> <publisher> IEEE, </publisher> <pages> 30-36. </pages> <editor> Meyer, </editor> <publisher> A.R. </publisher>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. <p> " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. In that system the polymorphism is parametrized.
Reference: [1988] <institution> Personal communication. Milner, R. </institution>
Reference: [1978] <institution> A theory of type polymorphism in programming, J. Computer and Systems Sciences 17, </institution> <month> 348-375. </month>
Reference: [1984] <editor> A proposal for standard ML, </editor> <booktitle> in: Proceedings of the ACM Symposium on LISP and Functional Programming (Austin), </booktitle> <pages> 184-197. </pages> <note> Mitchell, J.C. </note>
Reference-contexts: Moreover, although the Church style typed lambda calculi can be introduced directly, it is nevertheless useful to have some knowledge of the type-free lambda calculus. Therefore this section is devoted to this theory. For more information see Hindley and Seldin [1986] or Barendregt <ref> [1984] </ref>. 2.1 The system In this chapter the type-free lambda calculus will be called `-calculus' or simply . We start with an informal description. Application and abstraction The -calculus has two basic operations. The first one is application. <p> In the - calculus this strategy is not normalizing as is shown by the two reduction paths for KI above. There is, however, a variant of the lambda calculus, called the I-calculus, in which the eager evaluation strategy is normalizing. See Barendregt <ref> [1984] </ref>, Ch 9, and x11.3. In this I-calculus terms like K, 'throwing away' in the reduction KI !! I, do not exist. The 'ordinary' -calculus is sometimes referred to as K-calculus. In several lambda calculi with types one has that typable terms are strongly normalizing, see subsections 4.3 and 5.3. <p> one promises not to bind the variables in 0 by changing e.g. 0:nat, suc:(nat!nat) ` M : oe into ` (0suc:M ) : (nat!(nat!nat)!oe): (If one does not keep the promise no harm is done, since then 0 and suc become ordinary bound variables.) The programming language ML, see Milner <ref> [1984] </ref>, is essentially !- Curry extended with a constant Y and type assignment Y : ((oe!oe)!oe) for all oe. Properties of !-Curry Several properties of type assignment in ! are valid. The first one analyses how much of a basis is necessary in order to derive a type assignment. <p> The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo <ref> [1984] </ref>, Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1984] <editor> Type inference and type containment, </editor> <booktitle> in: Proc. Internat. Symp. on Semantics of Data Types, </booktitle> <editor> ed. G. Kahn, </editor> <booktitle> Lecture Notes in Computer Science 173, </booktitle> <publisher> Springer, </publisher> <pages> 257-277. </pages>
Reference-contexts: Moreover, although the Church style typed lambda calculi can be introduced directly, it is nevertheless useful to have some knowledge of the type-free lambda calculus. Therefore this section is devoted to this theory. For more information see Hindley and Seldin [1986] or Barendregt <ref> [1984] </ref>. 2.1 The system In this chapter the type-free lambda calculus will be called `-calculus' or simply . We start with an informal description. Application and abstraction The -calculus has two basic operations. The first one is application. <p> In the - calculus this strategy is not normalizing as is shown by the two reduction paths for KI above. There is, however, a variant of the lambda calculus, called the I-calculus, in which the eager evaluation strategy is normalizing. See Barendregt <ref> [1984] </ref>, Ch 9, and x11.3. In this I-calculus terms like K, 'throwing away' in the reduction KI !! I, do not exist. The 'ordinary' -calculus is sometimes referred to as K-calculus. In several lambda calculi with types one has that typable terms are strongly normalizing, see subsections 4.3 and 5.3. <p> one promises not to bind the variables in 0 by changing e.g. 0:nat, suc:(nat!nat) ` M : oe into ` (0suc:M ) : (nat!(nat!nat)!oe): (If one does not keep the promise no harm is done, since then 0 and suc become ordinary bound variables.) The programming language ML, see Milner <ref> [1984] </ref>, is essentially !- Curry extended with a constant Y and type assignment Y : ((oe!oe)!oe) for all oe. Properties of !-Curry Several properties of type assignment in ! are valid. The first one analyses how much of a basis is necessary in order to derive a type assignment. <p> The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo <ref> [1984] </ref>, Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1988] <editor> Polymorphic type inference and containment, </editor> <title> Inform. </title> <journal> and Comput. </journal> <volume> 76 (2,3), </volume> <pages> 211-249. </pages>
Reference: [1990] <institution> Type systems for programming languages, </institution> <note> in: van Leeuwen (1990), 365-458. 190 H.P. </note> <editor> Barendregt Mirimanoff, </editor> <address> D. </address>
Reference: [1917] <institution> Les antinomies de Russell et de Burali-Forti et le probleme fondamental de la theorie des ensembles, </institution> <address> L' Enseignement Mathematique 19, 37-52 Mostowski, </address> <publisher> A. </publisher>
Reference: [1951] <institution> On the rules of proof in the pure functional calculus of first order, </institution> <note> J. Symbolic Logic 16, 107-111. Nederpelt, R.P. </note>
Reference: [1973] <institution> Strong normalization in a typed lambda calculus with lambda structured types, </institution> <type> Ph.D. thesis, </type> <institution> Eindhoven Technological University, </institution> <note> The Netherlands. </note> <editor> Nerode, A. and P. </editor> <publisher> Odifreddi </publisher>
Reference-contexts: In fact, using Tait's method one can also prove strong normalization and applies to other systems as well, in particular to Godel's T ; see Troelstra <ref> [1973] </ref>. 62 H.P. Barendregt Girard (1972) gave an `impredicative twist' to Tait's method in order to show normalization for terms typable in (the Church version of) 2 and in the system ! to be discussed in Section 5.
Reference: [199-] <institution> Lambda calculi and constructive logics, </institution> <note> to appear. Odifreddi, P. </note>
Reference: [1990] <editor> Logic in Computer Science, </editor> <publisher> Academic Press, </publisher> <address> New York. Pavlovi c, D. </address>
Reference: [1990] <author> Predicates and fibrations, </author> <type> Ph.D. Thesis, </type> <institution> Department of mathematics, University of Utrecht, </institution> <address> Budapestlaan 6, 3508 TA Utrecht, The Netherlands. Peremans, </address> <publisher> W. </publisher>
Reference: [1949] <institution> Een opmerking over intuitionistische logica, Report ZW-16, CWI, </institution> <address> Box 4079, 1009 AB Amsterdam, The Netherlands. </address> <publisher> Pfenning, F. </publisher>
Reference: [1988] <editor> Partial polymorphic type inference and higher order unification, </editor> <booktitle> in: Proc. ACM Conference on LISP and Functional Programming, </booktitle> <pages> 153-163. </pages> <address> Prawitz, D. </address>
Reference: [1965] <author> Natural deduction: </author> <title> a proof-theoretical study, </title> <publisher> Almqvist and Wiksell, Stockholm. Quine, W. V. </publisher> <address> O. </address>
Reference: [1963] <institution> Set theory and its logics, Cambridge, Massachussets. Renardel de Lavalette, G.R. </institution>
Reference-contexts: Also in Tait (1967) it is proved that all terms typable in ! are normalizing. This proof uses the so called method of `computable terms' and was already presented in the unpublished `Stanford Report' by Howard et al. <ref> [1963] </ref>. In fact, using Tait's method one can also prove strong normalization and applies to other systems as well, in particular to Godel's T ; see Troelstra [1973]. 62 H.P.
Reference: [199-] <institution> Strictness analysis via abstract interpretation for recursively defined types, </institution> <note> to appear in: Information and Computation. Reynolds, J.C. </note>
Reference: [1974] <institution> Towards a theory of type structure, </institution> <note> in: Mathematical Foundations of Software Development, </note> <editor> eds. Ehring et al., </editor> <booktitle> Lecture Notes in Computer Science 19, </booktitle> <publisher> Springer, </publisher> <address> 408- 425. </address>
Reference: [1984] <editor> Polymorphism is not settheoretic, </editor> <booktitle> in: Semantics of data types, Lecture Notes in Computer Science 173, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> 145-156. </pages>
Reference-contexts: Moreover, although the Church style typed lambda calculi can be introduced directly, it is nevertheless useful to have some knowledge of the type-free lambda calculus. Therefore this section is devoted to this theory. For more information see Hindley and Seldin [1986] or Barendregt <ref> [1984] </ref>. 2.1 The system In this chapter the type-free lambda calculus will be called `-calculus' or simply . We start with an informal description. Application and abstraction The -calculus has two basic operations. The first one is application. <p> In the - calculus this strategy is not normalizing as is shown by the two reduction paths for KI above. There is, however, a variant of the lambda calculus, called the I-calculus, in which the eager evaluation strategy is normalizing. See Barendregt <ref> [1984] </ref>, Ch 9, and x11.3. In this I-calculus terms like K, 'throwing away' in the reduction KI !! I, do not exist. The 'ordinary' -calculus is sometimes referred to as K-calculus. In several lambda calculi with types one has that typable terms are strongly normalizing, see subsections 4.3 and 5.3. <p> one promises not to bind the variables in 0 by changing e.g. 0:nat, suc:(nat!nat) ` M : oe into ` (0suc:M ) : (nat!(nat!nat)!oe): (If one does not keep the promise no harm is done, since then 0 and suc become ordinary bound variables.) The programming language ML, see Milner <ref> [1984] </ref>, is essentially !- Curry extended with a constant Y and type assignment Y : ((oe!oe)!oe) for all oe. Properties of !-Curry Several properties of type assignment in ! are valid. The first one analyses how much of a basis is necessary in order to derive a type assignment. <p> The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo <ref> [1984] </ref>, Dezani and Margaria [1987] and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time.
Reference: [1985] <editor> Three approaches to type theory, </editor> <booktitle> in: Lecture Notes in Computer Science 185, </booktitle> <publisher> Springer, </publisher> <address> Berlin, 145-146. </address> <publisher> Robinson, J.A. </publisher>
Reference: [1965] <institution> A machine oriented logic based on the resolution principle, </institution> <note> J. ACM. 12 (1), </note> <month> 23-41. </month> <title> Lambda Calculi with Types 191 Sch onfinkel, </title> <publisher> M. </publisher>
Reference: [1924] <institution> Uber die Bausteinen der mathematische Logik, Math. </institution> <address> Ann. 92, 305-316. </address> <publisher> Schwichtenberg, H. </publisher>
Reference: [1977] <institution> Proof theory: </institution> <note> applications of cut-elimination, in: Handbook of Mathematical Logic, </note> <editor> ed. J. Barwise, </editor> <publisher> North-Holland, </publisher> <pages> 867-895. </pages> <note> Smullyan, R. </note>
Reference: [1985] <editor> To mock a mockingbird , Knopf, </editor> <address> New York. Scott, D.S. </address>
Reference: [1976] <institution> Data types as lattices, </institution> <note> SIAM J. Comput. 5, 522-587. Stenlund, S. </note>
Reference: [1972] <author> Combinators, </author> <title> -terms and proof theory, </title> <address> D. </address> <publisher> Reidel, </publisher> <address> Dordrecht. Swaen, M.D.G. </address>
Reference: [1989] <institution> Weak and strong sum-elimination in intuitionistic type theory, </institution> <type> Ph.D. thesis, </type> <institution> University of Amsterdam. Tait, W.W. </institution>
Reference: [1967] <institution> Intensional interpretation of functionals of finite type I, </institution> <note> J. Symbolic Logic 32, 198-212. </note>
Reference: [1975] <institution> A realizability interpretation of the theory of species, </institution> <note> in: Logic Colloquium (Boston), </note> <editor> ed. R. Parikh, </editor> <booktitle> Lecture Notes in Mathematics 453, </booktitle> <publisher> Springer, </publisher> <pages> 240-251. </pages> <note> Terlouw, J. </note>
Reference: [1982] <editor> On definition trees of ordinal recursive functionals: </editor> <title> reduction of the recursion orders by means of type level raising, </title> <editor> J. </editor> <booktitle> Symbolic Logic 47 (2), </booktitle> <pages> 395-402. </pages>
Reference-contexts: See also Hindley <ref> [1982] </ref>. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. In that system the polymorphism is parametrized.
Reference: [1989] <institution> Een nadere bewijstheoretische analyse van GSTT's, ms. Dept. Computer Science, University of Nijmegen, Toernooiveld 1, 6525 ED Nijmegen, The Netherlands. </institution> <note> Troelstra, A.S. </note>
Reference: [1973] <editor> Metamathematical investigations of intuitionistic arithmetic and analysis, </editor> <booktitle> Lecture Notes in Mathematics 344, </booktitle> <publisher> Springer. Turing, </publisher> <address> A.M. </address>
Reference-contexts: In fact, using Tait's method one can also prove strong normalization and applies to other systems as well, in particular to Godel's T ; see Troelstra <ref> [1973] </ref>. 62 H.P. Barendregt Girard (1972) gave an `impredicative twist' to Tait's method in order to show normalization for terms typable in (the Church version of) 2 and in the system ! to be discussed in Section 5.
Reference: [1937] <editor> Computability and -definability, J. </editor> <booktitle> Symbolic Logic 2, </booktitle> <pages> 153-163. </pages> <institution> de Vrijer, R. </institution>
Reference: [1975] <editor> Big trees in a -calculus with -expressions as types, in: </editor> <title> -Calculus and Computer Science Theory, </title> <editor> ed. C. Bohm, </editor> <booktitle> Lecture Notes in Computer Science 37, </booktitle> <publisher> Springer, </publisher> <pages> 252-271 Wadsworth, C.P. </pages>
Reference: [1971] <institution> Semantics and pragmatics of lambda calculus, </institution> <type> Ph.D. thesis, </type> <institution> Oxford University. Wand, M. </institution>
Reference: [1987] <institution> A simple algorithm and proof for type inference, </institution> <note> Fund. Informaticae X, 115-122. 192 H.P. Barendregt Whitehead, A.N. </note> <editor> and B. </editor> <publisher> Russell </publisher>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. <p> " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. In that system the polymorphism is parametrized.
Reference: [1910] <editor> Principia mathematica, </editor> <publisher> Cambridge University Press. Zwicker, W. </publisher>
Reference: [1987] <author> Playing games with games: </author> <title> the hypergame paradox, in: </title> <journal> Amer. Math. Monthly, </journal> <pages> 507-514. </pages>
Reference-contexts: The System " The system " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. <p> " of intersection types is sometimes called the Torino system, since the initial work on this system was done in that city, for example by Coppo, Dezani and Venneri [1981], Barendregt, Coppo and Dezani [1983], Coppo, Dezani, Honsell and Longo [1984], Dezani and Margaria <ref> [1987] </ref> and Coppo, Dezani and Zacchi [1987]. See also Hindley [1982]. The system makes it possible to state that a variable x has two types oe and o at the same time. This kind of polymorphism is to be contrasted to that which is present in 2. In that system the polymorphism is parametrized.
References-found: 123

