URL: http://www.win.tue.nl/~hooman/CRTSC.ps
Refering-URL: http://www.win.tue.nl/~hooman/CRTSC.html
Root-URL: http://www.win.tue.nl
Email: e-mail: wsinjh@win.tue.nl  
Title: Abstract.  
Author: Jozef Hooman 
Note: Appeared in: Proceedings Symposium on Formal Techniques in Real-Time and Fault Tolerant Systems, LNCS 863, Springer-Verlag, pp. 19-40, 1994.  
Address: P.O. Box 513, 5600 MB Eindhoven, The Netherlands  
Affiliation: Dept. of Mathematics and Computing Science Eindhoven University of Technology  
Abstract: To design distributed real-time systems in a top-down way, we present a mixed formalism in which programs and assertional specifications are combined. Specifications consist of an assumption-commitment pair, extending Hoare logic to real-time and progress properties. By defining the theory in the PVS specification language, the interactive proof checker of PVS can be used to reason in this framework. We show how this tool can be used during the design of real-time systems to derive programs that are correct by construction. A formal framework for the top-down design of distributed real-time systems is presented. By verifying all design steps during the process of program development, a real-time system is obtained which is correct by construction. This requires a compositional proof method in which the specification of a compound programming construct can be derived from the specification of its components without knowing the implementation of these components. Inspired by the compositional framework of classical Hoare triples (precondition, program, postcondition) for partial correctness [2], we have developed an assertional method for the specification and verification of real-time systems. The assertion language has been extended with timing primitives and the interpretation of triples has been adapted such that properties of both terminating and nonterminating computations can be verified. To indicate the differences with traditional Hoare logic, we use the words "assumption" and "commitment" instead of, respectively, "precondition" and "postcondition". The resulting framework has been applied to several examples such as a water level monitoring system [4], a distributed real-time arbitration protocol [5], and a chemical batch processing system [6]. In this paper we reformulate this approach slightly to obtain a mixed formalism in which programs and specifications are combined in a unified framework. (Similar to, e.g., the mixed terms of Olderog [8].) In such a framework one can 
Abstract-found: 1
Intro-found: 1
Reference: <institution> a </institution>
References-found: 1

