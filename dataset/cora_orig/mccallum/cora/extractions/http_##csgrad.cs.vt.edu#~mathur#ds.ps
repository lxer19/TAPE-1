URL: http://csgrad.cs.vt.edu/~mathur/ds.ps
Refering-URL: http://csgrad.cs.vt.edu/~mathur/
Root-URL: http://www.cs.vt.edu
Title: A Stochastic Process Model for Transient Trace Data  
Author: by Anup Mathur Dr. James D. Arthur Dr. Robert V. Foutz 
Degree: Dissertation submitted to the faculty of the  in partial fulfillment of the requirements for the degree of DOCTOR OF PHILOSOPHY in Computer Science c flAnup Mathur and VPI SU 1996 APPROVED: Dr. Marc Abrams, Chairman  Dr. Osman Balci Dr. Clifford A. Shaffer  
Date: October, 1996  
Affiliation: Virginia Polytechnic Institute and State University  Blacksburg, Virginia  
Abstract-found: 0
Intro-found: 1
Reference: [Abrams, 1986] <author> Abrams, M. </author> <year> (1986). </year> <title> Performance Analysis of Unconditionally Synchronizing Distributed Computer Programs Using The Geometric Concurrency Model. </title> <type> PhD thesis, </type> <institution> Computer Sci. Dept., Univ. of MD. TR-1696. </institution>
Reference-contexts: Finally, we describe some important stochastic process models that are extensively used in the field of computer performance analysis. 2.1 Modeling as a Tool in Performance Analysis Historically, model building or analysis has been one of the cornerstones of performance evaluation research. Abrams <ref> [Abrams, 1986] </ref> categorizes analytical software performance evaluation literature into several areas, such as queuing network models, complexity analysis, and state space analysis. We shall limit our discussion to state space analysis, because it is most relevant to the research proposed in this document. <p> The sum of weights on the critical path represents a lower bound on the execution time of the simulation program on the chosen platform. Other examples of forward analysis are the geometric concurrency model <ref> [Abrams, 1986] </ref>, stochastic automata [Plateau and Atif, 1991], and stochastic petri nets [Molloy, 1982]. Backward Analysis: Backward analysis techniques, on the other hand, construct models of program behavior from trace data collected after executing a program.
Reference: [Abrams et al., 1994] <author> Abrams, M., Batongbacal, A., Ribler, R., and Vazirani, D. </author> <year> (1994). </year> <title> Chitra94: A tool to dynamically characterize ensembles of traces for input data modeling and output analysis. </title> <type> Technical Report TR 94-21, </type> <institution> Computer Sci. Dept., Vir-ginia Tech, Blacksburg, </institution> <address> VA 24061-0106. </address> <note> Available from World Wide Web location http://info.cs.vt.edu/chitra. </note>
Reference-contexts: LITERATURE SURVEY Markov process models are used by Heyman [Heyman and Lakshman, 1996] to model compressed video and Abrams <ref> [Abrams et al., 1994] </ref> to model program behavior. 2.2.2 Poisson Process The Poisson process is a discrete state, continuous time stochastic process that obeys the Markov dependence property. It therefore belongs to the family of Markov processes.
Reference: [Abrams et al., 1992] <author> Abrams, M., Doraswamy, N., and Mathur, A. </author> <year> (1992). </year> <title> Chitra: Visual analysis of parallel and distributed programs in the time, event, and frequency domain. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 3(6) </volume> <pages> 672-685. </pages>
Reference-contexts: In Chapter 6 we introduce 12 traces representing real and simulated workloads that are then used to evaluate our modeling approach. The Appendix B describes the tools for building a piecewise independent stochastic process model from trace data. These tools are implemented within the Chitra <ref> [Abrams et al., 1992] </ref> performance analysis and visualization system. 4 Chapter 2 LITERATURE SURVEY In this chapter we describe the role that modeling plays in the field of performance analysis. We describe contemporary tools that are used to build models from software performance data. <p> Such an optimal initial assignment of simulation objects to processors is known as a balanced configuration. TWOS offers tools called reduce and balt that use the information in XL STATS from multiple runs of a simulation program to obtain a balanced configuration. Other examples of backward analysis include Chitra <ref> [Abrams et al., 1992] </ref>, a knowledge based monitoring and control tool for distributed systems [Hitson, 1990], and IPS-2 [Miller et al., 1990]. IPS-2 is described below. <p> In fact, Chitra analyzes categorical time series data, and therefore could be used with non-software applications. The evolution of Chitra has proceeded hand-in-hand with its application to actual software problems. Published case studies using Chitra include: the dining philosophers problem <ref> [Abrams et al., 1992] </ref> and a commercial implementation of the TCP/IP protocol for the MS-DOS [Abrams et al., 1992]. The following description overviews the four successive generations of the Chitra performance analysis system. <p> The evolution of Chitra has proceeded hand-in-hand with its application to actual software problems. Published case studies using Chitra include: the dining philosophers problem <ref> [Abrams et al., 1992] </ref> and a commercial implementation of the TCP/IP protocol for the MS-DOS [Abrams et al., 1992]. The following description overviews the four successive generations of the Chitra performance analysis system. The first two generation tools, Chitra91 and Chitra92, use a homogeneous semi-Markov process model to describe program behavior. Third generation tool Chitra93 adds the CHAID based model. <p> Third generation tool Chitra93 adds the CHAID based model. Chitra94 and Chitra95 add new visualizations for categorical data and also add modeling for transient trace data. Chitra91 is a prototype and is described in <ref> [Abrams et al., 1992] </ref>. The input to Chi-tra91 is a textual trace file that contains the trace [Doraswamy, 1991]. The trace, once loaded, can then be displayed by Chitra91 for visual inspection and visual editing by the user. Visual editing is the user directed transformation of the trace. <p> It allows the user to edit the graphical views displayed by Chitra using a mouse. Visual editing reduces the size of the state space and helps the user build an accurate model of the trace. Chitra91 supports four transforms for visual editing of the trace, defined in <ref> [Abrams et al., 1992] </ref>. Clipping is useful in eliminating the initial and final transient portions of the trace. Aggregation is useful in capturing deterministic patterns in a trace. Chitra91 aggregates the states that form a deterministic pattern into one aggregate state. <p> Chitra91 provides three views of the trace represented as a signal: event domain, time domain, and frequency domain. These views permit the human user to look at the trace as time-series data. Chitra92 Application of Chitra91 to the case-studies published in <ref> [Abrams et al., 1992] </ref> prompted the evolution of Chitra92. Unlike Chitra91, which allowed only one trace to be viewed at a time, Chitra92 allows viewing of multiple traces at a time. It also allows multiple views of the same trace at a time. <p> A STOCHASTIC PROCESS MODEL OF TRANSIENT TRACE DATA index parameter space for a trace. The state space for the trace is discrete as well. Rates and frequencies of occurrence are often used as estimates of probabilities (for an example see <ref> [Abrams et al., 1992] </ref>). We estimate the probability that the state x occurs at event number t, in the trace, by the rate of occurrence of state x at t.
Reference: [Abrams et al., 1995] <author> Abrams, M., Williams, S., Abdulla, G., Patel, S., Ribler, R., and Fox, E. </author> <year> (1995). </year> <title> Multimedia traffic analysis using chitra95. </title> <type> Technical Report TR 95-05, </type> <institution> Computer Sci. Dept., Virginia Tech, Blacksburg, </institution> <address> VA 24061-0106. </address> <note> Submitted of pub. </note>
Reference-contexts: The trace records the memory addresses referenced during the execution. WWW Trace: This is trace of WWW traffic originating from a class of undergraduate students at Virginia Tech. The trace was obtained as a part of on-going WWW research <ref> [Abrams et al., 1995] </ref> at Virginia Tech. The trace records the types of files (Graphics, Directory, Audio, Text or HTML, Script, Video, or Other) which were accessed. Ingalls Trace: This is a trace of frame sizes from the MPEG movie of a videotape presentation titled "Object-Oriented Programming" by Dan Ingalls.
Reference: [Ahluwalia and Singhal, 1992] <author> Ahluwalia, A. and Singhal, M. </author> <year> (1992). </year> <title> Performance analysis of the communication architecture of the connection machine. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 3(6) </volume> <pages> 728-738. </pages>
Reference-contexts: Current literature includes several examples of memory-oriented performance tuning [Martonosi et al., 1992, Goldberg and Hennessy, 1993], code-oriented performance tuning [Graham et al., 1982], and performance tuning of interconnection networks <ref> [Ahluwalia and Singhal, 1992] </ref>. Chitra subsumes the function of such tools because of its ability to analyze an arbitrary state representation. Chitra contains a module that generates an empirical model from a set of traces.
Reference: [Balci, 1994] <author> Balci, O. </author> <year> (1994). </year> <title> Validation, verification, and testing techniques throughout the life cycle of a simulation study. </title> <journal> Annals of Operation Research, </journal> <volume> 53 </volume> <pages> 121-173. </pages>
Reference-contexts: Validation techniques for trace models are a subset of those used for simulation models. In the case where only a trace is available and the actual system generating the trace as well as expert users of the system are unavailable, many validation techniques, such as Face Validation <ref> [Balci, 1994] </ref>, cannot be used. In such a case the validation of a trace model focuses on a comparison of the original trace with synthetic traces generated from the model. <p> In such a case the validation of a trace model focuses on a comparison of the original trace with synthetic traces generated from the model. Validation techniques for such trace models fall into two broad categories namely: graphical comparison techniques and statistical techniques. 2.4.1 Graphical Comparison Techniques Balci <ref> [Balci, 1994] </ref> describes graphical comparison techniques as "subjective, inelegant and heuristic, yet quite practical." Law and Kelton [Law and Kelton, 1991] refer to them as heuristic procedures. Though not as credible as statistical validation techniques graphical comparison techniques can help rule out clearly inappropriate models. <p> Other commonly used graphical comparison techniques are histograms, Q-Q plots, P-P plots, and plots of the cumulative distribution function. 2.4.2 Statistical Techniques Application of statistical techniques forms the bulk of model validation research. In <ref> [Balci, 1994] </ref> Balci presents a detailed classification of statistical techniques that have been used to validate simulation models of observable systems. Some of the commonly used 20 CHAPTER 2.
Reference: [Beran, 1994] <author> Beran, J. </author> <year> (1994). </year> <title> Statistics for Long-Memory Processes. </title> <publisher> Chapman Hall, </publisher> <address> New York. </address>
Reference-contexts: Poisson processes are commonly used to model bursty traffic such as the traffic generated by phone calls on a telephone network. 2.2.3 Self Similar Stochastic Process Self-similar stochastic process models were introduced to the field of statistics by Man-delbrot <ref> [Beran, 1994] </ref>. The self-similar models address two characteristics of observed time series data which is not explained by more conventional models namely: 1. Certain observed time series such as the Yearly minimum water levels of the Nile river [Beran, 1994] show that the autocorrelation of the time series does not exponentially <p> stochastic process models were introduced to the field of statistics by Man-delbrot <ref> [Beran, 1994] </ref>. The self-similar models address two characteristics of observed time series data which is not explained by more conventional models namely: 1. Certain observed time series such as the Yearly minimum water levels of the Nile river [Beran, 1994] show that the autocorrelation of the time series does not exponentially decay to zero. This phenomenon of long range dependence (LRD) is contrary to the assumptions of many stochastic process models such as the Markov model. 2. <p> If the original time series fX t g was a sample realization of a self-similar stochastic process then the distribution of fX t g must be equal to the distribution of fX T g. Beran <ref> [Beran, 1994] </ref> provides the following rigorous definition: Let Y t be a stochastic process with continuous time parameter t. <p> Leland and others [Leland et al., 1994] have shown that ethernet traffic shows long range dependence which make Poisson and Markov models inappropriate for it. Such traffic can be modeled by self-similar stochastic processes <ref> [Beran, 1994] </ref>. Self-similar stochastic processes are stationary stochastic processes which exhibit long range dependence. This is in contrast to stationary stochastic processes such as Markov processes which are memoryless.
Reference: [Berry and Jefferson, 1985] <author> Berry, O. and Jefferson, D. </author> <year> (1985). </year> <title> Critical path analysis of distributed simulation. </title> <booktitle> In Soc. for Comp. Simulation, </booktitle> <address> San Diego, CA. </address>
Reference-contexts: Two approaches to 5 CHAPTER 2. LITERATURE SURVEY this end have been used in literature namely: forward analysis and backward analysis. Forward Analysis: Forward analysis techniques construct a model of program behavior based on program code before the program is executed. In <ref> [Berry and Jefferson, 1985] </ref> the authors describe a forward analysis technique that can provide lower bounds on the execution times of object-oriented distributed simulations. The technique involves the construction of a graph.
Reference: [Bhat, 1984] <author> Bhat, U. N. </author> <year> (1984). </year> <title> Elements of Applied Stochastic Processes. </title> <publisher> John Wiley, </publisher> <address> New York, 2nd edition. </address>
Reference-contexts: Workload models for a system can be built from traces collected by observing the system. Such a trace represents the workload. For the purpose of this document we use the term trace to imply a workload. 8 CHAPTER 2. LITERATURE SURVEY 2.2 Stochastic Process Models Bhat <ref> [Bhat, 1984] </ref> defines a stochastic process, fX t g, as a family of random variables fX t ; t 0g indexed by the parameter (usually time) t. The set of all possible values that can be assumed by a stochastic process is called its state space. <p> In the sections below we describe some commonly used stochastic processes that are used to model trace data. 2.2.1 Markov Chains and Processes A Markov process is a continuous-time stochastic process fX t g which displays the Markov dependence <ref> [Bhat, 1984] </ref> property described below. <p> Each group occupies a disjoint section of the event number axis. This suggests that the underlying stochastic process does not return to a state belonging to an already visited group once it has left that group. This interesting behavior is similar to that of certain finite Markov chains <ref> [Bhat, 1984] </ref>. If each of the four group of states in the REG can be considered as an equivalence class of a finite Markov chain. The first three equivalence classes are transient while the last one is recurrent.
Reference: [Box and Jenkins, 1976] <author> Box, G. E. P. and Jenkins, G. M. </author> <year> (1976). </year> <title> TIME SERIES ANALYSIS forecasting and control, Revised Edition. </title> <publisher> Holden-Day, </publisher> <address> Oakland, California. </address>
Reference-contexts: Stationary stochastic processes are governed by probability laws that are invariant to time (index parameter). Two definitions of stationarity, namely strong stationarity and weak stationarity are described in most literature related to stochastic processes. For the purpose of this dissertation we discuss the definition of weak stationarity <ref> [Box and Jenkins, 1976] </ref> below. <p> A trace is a sequence of states that records the behavior of the system over a period of time. Generally a trace can have time stamps associated with every occurrence of a state. Our analysis is limited to traces which can be considered as time series <ref> [Box and Jenkins, 1976] </ref> with an index parameter space that is discrete, equally spaced, and monotonically increasing. The term event numbers has been used throughout this dissertation to refer to the 24 CHAPTER 3. A STOCHASTIC PROCESS MODEL OF TRANSIENT TRACE DATA index parameter space for a trace. <p> Then the autocorrelation of S at lag k, denoted r (k), is defined in terms of all recorded X i s which are k time units distant from each other. See Box and Jenkins <ref> [Box and Jenkins, 1976] </ref> or any other standard book in time series analysis for details about autocorrelation. By varying the lag k we can plot the autocorrelation function r (k) versus k to generate a autocorrelation plot.
Reference: [Crovella and Bestavros, 1995] <author> Crovella, M. E. and Bestavros, A. </author> <year> (1995). </year> <title> Explaining world wide web traffic self-similarity. </title> <type> Technical Report TR-95-015, </type> <institution> Computer Science Department, Boston University, </institution> <address> 111 Cummington St, Boston, MA 02215. 134 REFERENCES </address>
Reference-contexts: This is in contrast to stationary stochastic processes such as Markov processes which are memoryless. Garrett [Garrett and Willinger, 1994] has used a Gamma/Pareto self-similar stochastic process to model variable bit rate (VBR) video packet traffic on a LAN. Crovella <ref> [Crovella and Bestavros, 1995] </ref> has shown some workloads of WWW traffic to be self-similar also. 2.3 Modeling Trace Data In this section we discuss contemporary research towards modeling trace data.
Reference: [Denning, 1968] <author> Denning, P. J. </author> <year> (1968). </year> <title> The working set model for program behavior. </title> <journal> Communications of the ACM, </journal> <volume> 11(5) </volume> <pages> 323-333. </pages>
Reference-contexts: Hence most studies of program behavior model memory reference traces. An early outcome of studying program behavior was the discovery of the working set model of a program by Denning <ref> [Denning, 1968] </ref>. Almost all models of program behavior assume the memory reference trace collected from a program to be the sample realization of a stochastic process. Earlier models of program behavior (1965-1974) used simple stationary stochastic processes to model program behavior.
Reference: [Denning, 1980] <author> Denning, P. J. </author> <year> (1980). </year> <title> Working sets past and present. </title> <journal> IEEE Trans. on Software Engineering, SE-6(1):64-84. </journal>
Reference-contexts: Almost all models of program behavior assume the memory reference trace collected from a program to be the sample realization of a stochastic process. Earlier models of program behavior (1965-1974) used simple stationary stochastic processes to model program behavior. Denning <ref> [Denning, 1980] </ref> describes the Simple Renewal Model (SRM) and Independent Reference Model (IRM) as examples of such models. SRM treats successive references to the same memory segment in a memory reference trace as recurrent events of a renewal process. <p> LITERATURE SURVEY that real programs have different phases of behavior. The memory reference behavior of a program may differ substantially from one phase to another. Denning proposed a two layered phase transition model in <ref> [Denning, 1980] </ref>. The macro model in this two layered model was a semi-Markov chain whose states were mutually disjoint locality sets. Each locality set corresponded to a phase. The micro model described the behavior of the program within a phase.
Reference: [D.Geist and B.Melamed, 1992] <author> D.Geist and B.Melamed (1992). Testool: </author> <title> An environment for visual interactive modeling of autocorrelated traffic. </title> <booktitle> In Proc. of the 1992 International Conference on Communications, </booktitle> <pages> pages 1285-1289, </pages> <address> Chicago. </address>
Reference-contexts: No single model is used for all the traces. The Gamma, Paretto, and Weibull distributions are used to model traffic sequences that not autocorrelated. Markov Chain and Discrete Auto Regressive models are used to model autocorrelated traffic sequences. In <ref> [D.Geist and B.Melamed, 1992] </ref> Geist discusses the TES (Transform-Expand-Sample) modeling methodology for trace data. The authors use stationary stochastic processes called TES processes to model trace data as a time series. The marginal distribution of the TES process model matches the empirical distribution of the trace data.
Reference: [Doraswamy, 1991] <author> Doraswamy, N. </author> <year> (1991). </year> <title> Chitra: A visualization system to analyze the dynamics of parallel programs. </title> <type> Master's thesis, </type> <institution> Computer Sci. Dept., Virginia Tech, Blacksburg, </institution> <address> VA 24061-0106. </address>
Reference-contexts: Chitra94 and Chitra95 add new visualizations for categorical data and also add modeling for transient trace data. Chitra91 is a prototype and is described in [Abrams et al., 1992]. The input to Chi-tra91 is a textual trace file that contains the trace <ref> [Doraswamy, 1991] </ref>. The trace, once loaded, can then be displayed by Chitra91 for visual inspection and visual editing by the user. Visual editing is the user directed transformation of the trace. It allows the user to edit the graphical views displayed by Chitra using a mouse.
Reference: [Ferrari et al., 1983] <author> Ferrari, D., Serazzi, G., and Zeigner, A. </author> <year> (1983). </year> <title> Measurement and Tuning of Computer Systems. </title> <publisher> Prentice-Hall, London. </publisher>
Reference-contexts: Such models capture the behavior of the system generating the trace and can consequently be used to evaluate and tune the performance of the system. In the field of computer performance analysis the term non-executable artificial workload model <ref> [Ferrari et al., 1983] </ref> is often used for models of computer performance trace data. A stationary stochastic process models time series data such that the probability laws governing the process do not change with time.
Reference: [Garrett, 1993] <author> Garrett, M. W. </author> <year> (1993). </year> <title> Statistical Analysis of a Long Trace of Variable Bit Rate Video Traffic. </title> <type> PhD thesis, </type> <institution> Columbia Univ. Chapter IV. </institution>
Reference-contexts: For more details about this trace see [Vazirani, 1996]. The original trace was transformed, as detailed in Appendix C. 48 CHAPTER 6. MODEL VALIDATION Star Wars Trace: This is a trace of frame sizes of the Star Wars movie <ref> [Garrett, 1993] </ref> 1 . The Star Wars trace is a sequence of frame sizes from the movie Star Wars (running time 2 hours). The original trace was transformed, as detailed in Appendix C. Periodic Trace: This trace is generated from a known synthetic distribution.
Reference: [Garrett and Willinger, 1994] <author> Garrett, M. W. and Willinger, W. </author> <year> (1994). </year> <title> Analysis, modeling and generation of self-similar vbr video traffic. </title> <booktitle> In Proc. SIGCOMM, </booktitle> <pages> pages 269-279, </pages> <address> London, UK. </address> <publisher> ACM. </publisher>
Reference-contexts: Such traffic can be modeled by self-similar stochastic processes [Beran, 1994]. Self-similar stochastic processes are stationary stochastic processes which exhibit long range dependence. This is in contrast to stationary stochastic processes such as Markov processes which are memoryless. Garrett <ref> [Garrett and Willinger, 1994] </ref> has used a Gamma/Pareto self-similar stochastic process to model variable bit rate (VBR) video packet traffic on a LAN.
Reference: [Goldberg and Hennessy, 1993] <author> Goldberg, A. J. and Hennessy, J. L. </author> <year> (1993). </year> <title> Mtool: An integrated system for performance debugging shared memory applications. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 4(1) </volume> <pages> 28-40. </pages>
Reference-contexts: A trace records the state of a system as a function of time. Examples of "state" are the memory addresses referenced, the control point of processes, the values of data structures, or a combination of these. Current literature includes several examples of memory-oriented performance tuning <ref> [Martonosi et al., 1992, Goldberg and Hennessy, 1993] </ref>, code-oriented performance tuning [Graham et al., 1982], and performance tuning of interconnection networks [Ahluwalia and Singhal, 1992]. Chitra subsumes the function of such tools because of its ability to analyze an arbitrary state representation.
Reference: [Graham et al., 1982] <author> Graham, S. L., Kessler, P. B., and McKusick, M. K. </author> <year> (1982). </year> <title> gprof: A call graph execution profiler. </title> <booktitle> In Proceedings of the SIGPLAN '82 Symposium on Compiler Construction, </booktitle> <pages> pages 120-126. </pages> <booktitle> SIGPLAN Notices, </booktitle> <pages> 17(6). </pages>
Reference-contexts: Examples of "state" are the memory addresses referenced, the control point of processes, the values of data structures, or a combination of these. Current literature includes several examples of memory-oriented performance tuning [Martonosi et al., 1992, Goldberg and Hennessy, 1993], code-oriented performance tuning <ref> [Graham et al., 1982] </ref>, and performance tuning of interconnection networks [Ahluwalia and Singhal, 1992]. Chitra subsumes the function of such tools because of its ability to analyze an arbitrary state representation. Chitra contains a module that generates an empirical model from a set of traces.
Reference: [Heyman and Lakshman, 1996] <author> Heyman, D. P. and Lakshman, T. V. </author> <year> (1996). </year> <title> Source models for vbr broadcast-video traffic. </title> <journal> IEEE Trans. on Networking, </journal> <volume> 4(1) </volume> <pages> 40-48. </pages>
Reference-contexts: The k-step transition probability matrix P k is defined as the matrix of conditional probabilities [P [X t m +k = i j X t m = j]; 8i; j 2 S]. 9 CHAPTER 2. LITERATURE SURVEY Markov process models are used by Heyman <ref> [Heyman and Lakshman, 1996] </ref> to model compressed video and Abrams [Abrams et al., 1994] to model program behavior. 2.2.2 Poisson Process The Poisson process is a discrete state, continuous time stochastic process that obeys the Markov dependence property. It therefore belongs to the family of Markov processes. <p> In a recent paper <ref> [Heyman and Lakshman, 1996] </ref>, Heyman and Lakshman model twelve video traffic traces by using a variety of stationary distributions. No single model is used for all the traces. The Gamma, Paretto, and Weibull distributions are used to model traffic sequences that not autocorrelated.
Reference: [Heyman et al., 1992] <author> Heyman, D. P., Tabatabai, A., and Laskshman, T. V. </author> <year> (1992). </year> <title> Statistical analysis and simulation study of video teleconference traffic in atm networks. </title> <journal> IEEE Trans. on Circuits and Systems for Video Technology, </journal> <volume> 2(1) </volume> <pages> 49-58. </pages>
Reference: [Hitson, 1990] <author> Hitson, B. </author> <year> (1990). </year> <title> Knowledge-based monitoring and control of distributed systems. </title> <type> Technical Report TR 91-23, </type> <institution> Computer Systems Laboratory, Stanford University, Stanford, </institution> <address> CA. </address>
Reference-contexts: TWOS offers tools called reduce and balt that use the information in XL STATS from multiple runs of a simulation program to obtain a balanced configuration. Other examples of backward analysis include Chitra [Abrams et al., 1992], a knowledge based monitoring and control tool for distributed systems <ref> [Hitson, 1990] </ref>, and IPS-2 [Miller et al., 1990]. IPS-2 is described below. IPS-2 IPS-2 [Miller et al., 1990] is a performance analysis system for parallel and distributed programs from the Computer Science Department at the University of Wisconsin-Madison.
Reference: [ICASE, 1993] <author> ICASE (1993). </author> <title> ICASE/NASA LaRC Workshop on Software Tools and Techniques for Performance and Reliability Estimation, </title> <institution> Langley, VA. NASA Langley Research Center. </institution> <address> 135 REFERENCES </address>
Reference-contexts: It should be possible to incorporate the tool into another tool (e.g., incorporate Chitra94 into an existing CASE or simulation model development tool). Experience from older performance analysis tool projects show that integration is very clumsy with a monolithic tool with its own custom GUI <ref> [ICASE, 1993] </ref>. Finally, the tool should be portable across hardware, operating systems, and GUI's (especially Unix/Motif and Windows for PC's).
Reference: [Jain, 1991] <author> Jain, R. </author> <year> (1991). </year> <title> The Art of Computer Systems Performance Analysis. </title> <publisher> John Wiley, </publisher> <address> New York. </address>
Reference-contexts: In contrast to models used for performance diagnosis, models of a workload may not yield performance metrics directly. Instead they provide an analytical tool that can generate synthetic workloads on demand. Jain <ref> [Jain, 1991] </ref> describes a workload as a list of service requests to a system. To measure and analyze the performance of a system, workloads that characterize the usage of the system are used as an input to the system.
Reference: [JPL, 1991] <author> JPL (1991). </author> <title> Time Warp Operating System Version 2.5.1, User Manual. </title> <institution> Jet Propulsion Laboratory, California Institute of Technology, Pasadena, </institution> <address> CA. </address>
Reference-contexts: Backward Analysis: Backward analysis techniques, on the other hand, construct models of program behavior from trace data collected after executing a program. An example of backward analysis is demonstrated by the assortment of performance tools that accompany the Time Warp Operating System (TWOS) <ref> [JPL, 1991] </ref>. TWOS is a special purpose operating system designed to support parallel discrete event simulations. TWOS runs on platforms such as the BBN GP-1000 multiprocessor on top of the MACH operating system.
Reference: [Law, 1977] <author> Law, A. M. </author> <year> (1977). </year> <title> Confidence intervals in discrete event simulation: A comparison of replication and batch means. </title> <journal> Naval Res. Logist. Quart., </journal> <volume> 24(4) </volume> <pages> 667-678. </pages>
Reference-contexts: This assumption is violated in many traces that are highly autocorrelated. A problem similar to that of having autocorrelated intervals also occurs in the domain of discrete event simulation while estimating the mean and the confidence interval around the mean of a stochastic process as described in <ref> [Law, 1977] </ref>. The highly autocorrelated sample realization of the stochastic process is partitioned into batches such that the sample means of the batches are uncorrelated. The process of batch means is described in [Law and Carson, 1978].
Reference: [Law and Carson, 1978] <author> Law, A. M. and Carson, J. S. </author> <year> (1978). </year> <title> A sequential procedure for determining the length of a steady-state simulation. </title> <journal> Operations Research, </journal> <volume> 27(5) </volume> <pages> 1011-1025. </pages>
Reference-contexts: The highly autocorrelated sample realization of the stochastic process is partitioned into batches such that the sample means of the batches are uncorrelated. The process of batch means is described in <ref> [Law and Carson, 1978] </ref>. In our case the model has a large number of intervals 111 CHAPTER 6. MODEL VALIDATION versus Synthesized Trace (seed 21) per state. Testing for pairwise independence of k intervals will require ( k 2 ) comparisons.
Reference: [Law and Kelton, 1991] <author> Law, A. M. and Kelton, W. D. </author> <year> (1991). </year> <title> Simulation Modeling and Analysis. </title> <publisher> McGraw-Hill, </publisher> <address> New York, 2nd edition. </address>
Reference-contexts: Validation techniques for such trace models fall into two broad categories namely: graphical comparison techniques and statistical techniques. 2.4.1 Graphical Comparison Techniques Balci [Balci, 1994] describes graphical comparison techniques as "subjective, inelegant and heuristic, yet quite practical." Law and Kelton <ref> [Law and Kelton, 1991] </ref> refer to them as heuristic procedures. Though not as credible as statistical validation techniques graphical comparison techniques can help rule out clearly inappropriate models. Graphical comparison techniques usually entail the application of a function to the trace data. <p> Some of the commonly used 20 CHAPTER 2. LITERATURE SURVEY statistical validation techniques for trace models are described below: Chi-square Goodness of Fit Test: The Chi-square goodness of fit test is described in <ref> [Law and Kelton, 1991] </ref>. It is a non-parametric statistical hypothesis test. It is used to test whether a given random sample follows a known hypothesized probability distribution. The hypothesized distribution may be discrete or continuous. Komolgorov-Smirnov Test: Another non-parametric statistical hypothesis test, the Komolgorov-Smirnov test [Law and Kelton, 1991] is used <p> fit test is described in <ref> [Law and Kelton, 1991] </ref>. It is a non-parametric statistical hypothesis test. It is used to test whether a given random sample follows a known hypothesized probability distribution. The hypothesized distribution may be discrete or continuous. Komolgorov-Smirnov Test: Another non-parametric statistical hypothesis test, the Komolgorov-Smirnov test [Law and Kelton, 1991] is used to compare an empirical distribution function to a known hypothesized probability distribution. The hypothesized distribution must be continuous. Wilcoxon Rank Sum Test: The Wilcoxon rank sum test [McClave and Dietrich, 1985] is a non-parametric statistical hypothesis test. <p> It involves the computation of the logarithmic difference of the sample spectra of two given traces. The logarithmic difference of the spectra is used as an estimate of the difference between the autocorrelation functions corresponding to the two traces. This technique is described in detail in <ref> [Law and Kelton, 1991] </ref>. Correlation Analysis: Correlation analysis is based on the time-domain analysis of time-series data. In its simplest form it consists of graphical comparison of the sample autocorrelation functions computed from the two (or more) given traces. However, this simple 21 CHAPTER 2.
Reference: [Leland et al., 1994] <author> Leland, W. E., Taqqu, M. S., Willinger, W., and Wilson, D. V. </author> <year> (1994). </year> <title> On the self-similar nature of ethernet traffic (extended version). </title> <journal> IEEE Trans. on Networking, </journal> <volume> 2(1) </volume> <pages> 1-15. </pages>
Reference-contexts: Recent research has rejected well known and understood stationary stochastic process models such as the Poisson model. In [Paxson and Floyd, 1994] Paxson and Floyd show that the Poisson model does not describe LAN traffic adequately. Leland and others <ref> [Leland et al., 1994] </ref> have shown that ethernet traffic shows long range dependence which make Poisson and Markov models inappropriate for it. Such traffic can be modeled by self-similar stochastic processes [Beran, 1994]. Self-similar stochastic processes are stationary stochastic processes which exhibit long range dependence.
Reference: [Martonosi et al., 1992] <author> Martonosi, M., Gupta, A., and Anderson, T. </author> <year> (1992). </year> <title> MemSpy: Analyzing memory system bottlenecks in programs. </title> <booktitle> In Proc. SIGMETRICS, </booktitle> <pages> pages 1-12, </pages> <address> Newport, RI. </address> <publisher> ACM. </publisher>
Reference-contexts: A trace records the state of a system as a function of time. Examples of "state" are the memory addresses referenced, the control point of processes, the values of data structures, or a combination of these. Current literature includes several examples of memory-oriented performance tuning <ref> [Martonosi et al., 1992, Goldberg and Hennessy, 1993] </ref>, code-oriented performance tuning [Graham et al., 1982], and performance tuning of interconnection networks [Ahluwalia and Singhal, 1992]. Chitra subsumes the function of such tools because of its ability to analyze an arbitrary state representation.
Reference: [McClave and Dietrich, 1985] <author> McClave, J. T. and Dietrich, F. H. </author> <year> (1985). </year> <title> Statistics. </title> <publisher> Dellen Publishing Company, </publisher> <address> San Fransisco, CA, </address> <note> 3rd edition. </note>
Reference-contexts: Komolgorov-Smirnov Test: Another non-parametric statistical hypothesis test, the Komolgorov-Smirnov test [Law and Kelton, 1991] is used to compare an empirical distribution function to a known hypothesized probability distribution. The hypothesized distribution must be continuous. Wilcoxon Rank Sum Test: The Wilcoxon rank sum test <ref> [McClave and Dietrich, 1985] </ref> is a non-parametric statistical hypothesis test. It is used to test whether the two given random samples have identical probability distributions. The probability distributions may be discrete or continuous. Kruskall-Wallis Test: The Kruskall-Wallis test [Ott, 1988] is a non-parametric statistical hypothesis test.
Reference: [Miller et al., 1990] <author> Miller, B., Clark, M., Hollingsworth, J., Kierstead, S., Lim, S., and Torzewski, T. </author> <year> (1990). </year> <title> IPS-2: The second generation of a parallel program measurement system. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 1(2) </volume> <pages> 206-217. </pages>
Reference-contexts: Other examples of backward analysis include Chitra [Abrams et al., 1992], a knowledge based monitoring and control tool for distributed systems [Hitson, 1990], and IPS-2 <ref> [Miller et al., 1990] </ref>. IPS-2 is described below. IPS-2 IPS-2 [Miller et al., 1990] is a performance analysis system for parallel and distributed programs from the Computer Science Department at the University of Wisconsin-Madison. <p> Other examples of backward analysis include Chitra [Abrams et al., 1992], a knowledge based monitoring and control tool for distributed systems [Hitson, 1990], and IPS-2 <ref> [Miller et al., 1990] </ref>. IPS-2 is described below. IPS-2 IPS-2 [Miller et al., 1990] is a performance analysis system for parallel and distributed programs from the Computer Science Department at the University of Wisconsin-Madison.
Reference: [Molloy, 1982] <author> Molloy, M. </author> <year> (1982). </year> <title> Performance analysis using stochastic petri nets. </title> <journal> IEEE Trans. on Computers, C-31(9):913-917. </journal>
Reference-contexts: The sum of weights on the critical path represents a lower bound on the execution time of the simulation program on the chosen platform. Other examples of forward analysis are the geometric concurrency model [Abrams, 1986], stochastic automata [Plateau and Atif, 1991], and stochastic petri nets <ref> [Molloy, 1982] </ref>. Backward Analysis: Backward analysis techniques, on the other hand, construct models of program behavior from trace data collected after executing a program. An example of backward analysis is demonstrated by the assortment of performance tools that accompany the Time Warp Operating System (TWOS) [JPL, 1991].
Reference: [Ott, 1988] <author> Ott, L. </author> <year> (1988). </year> <title> An Introduction to Statistical Methods and Data Analysis. </title> <address> PWS-Kent, Boston, </address> <note> 3rd edition. </note>
Reference-contexts: Wilcoxon Rank Sum Test: The Wilcoxon rank sum test [McClave and Dietrich, 1985] is a non-parametric statistical hypothesis test. It is used to test whether the two given random samples have identical probability distributions. The probability distributions may be discrete or continuous. Kruskall-Wallis Test: The Kruskall-Wallis test <ref> [Ott, 1988] </ref> is a non-parametric statistical hypothesis test. It is used to test whether k given random samples have identical probability distributions. The probability distributions may be discrete or continuous. Spectral Analysis: This approach is based on the spectral analysis of time-series data. <p> We compute the rate i;t a 1 as the slope parameter of the linear regression function <ref> [Ott, 1988] </ref> that fits the points (t a 1 ; g (x i ; t a 1 )); : : :; (t a 2 1; g (x i ; t a 2 1)). <p> The particular test we use is called the Kruskall-Wallis rank sum test <ref> [Ott, 1988] </ref>. The Kruskall-Wallis test is a non-parametric test and thus it does not make any assumptions about the shape of the distribution of the trace data. To validate our model using the Kruskall-Wallis test we first synthesize traces from our model.
Reference: [Paxson and Floyd, 1994] <author> Paxson, V. and Floyd, S. </author> <year> (1994). </year> <title> Wide-area traffic: The failure of poisson modeling. </title> <booktitle> In Proc. SIGCOMM, </booktitle> <pages> pages 257-267, </pages> <address> London, UK. </address> <publisher> ACM. </publisher>
Reference-contexts: Recent research has rejected well known and understood stationary stochastic process models such as the Poisson model. In <ref> [Paxson and Floyd, 1994] </ref> Paxson and Floyd show that the Poisson model does not describe LAN traffic adequately. Leland and others [Leland et al., 1994] have shown that ethernet traffic shows long range dependence which make Poisson and Markov models inappropriate for it.
Reference: [Plateau and Atif, 1991] <author> Plateau, B. and Atif, K. </author> <year> (1991). </year> <title> Stochastic automata network for modeling parallel systems. </title> <journal> IEEE Trans. on Software Engineering, </journal> 1991(10) 1093-1109. 
Reference-contexts: The sum of weights on the critical path represents a lower bound on the execution time of the simulation program on the chosen platform. Other examples of forward analysis are the geometric concurrency model [Abrams, 1986], stochastic automata <ref> [Plateau and Atif, 1991] </ref>, and stochastic petri nets [Molloy, 1982]. Backward Analysis: Backward analysis techniques, on the other hand, construct models of program behavior from trace data collected after executing a program.
Reference: [Reed et al., 1992] <author> Reed, D. A., Aydt, R. A., Madhyastha, T. M., Noe, R. J., Shields, K. A., and Schwartz, B. W. </author> <year> (1992). </year> <title> The Pablo performance analysis environment. </title> <institution> Dept. of Comp. Sci., Univ. of IL. </institution> <address> 136 REFERENCES </address>
Reference-contexts: A CF file represents data as space separated columns of data augmented with header lines that contain a pound sign in column one. Each header line lists one attribute of the data. We chose to define a new format (i.e., CF) over an existing one, such as Pablo's SDDF <ref> [Reed et al., 1992] </ref>, specifically to use a format that can be directly usable by Unix utilities (e.g., sort and 16 CHAPTER 2. LITERATURE SURVEY grep) or exported into other performance analysis tools.
Reference: [Ribler et al., 1995] <author> Ribler, R., Mathur, A., and Abrams, M. </author> <year> (1995). </year> <title> Visualizing and modeling categorical time series data. </title> <booktitle> In ICASE/LaRC Symposium on Visualizing Time-Varying Data, </booktitle> <pages> pages 3-19, </pages> <address> Williamsburg, VA. </address>
Reference-contexts: In its simplest form it consists of graphical comparison of the sample autocorrelation functions computed from the two (or more) given traces. However, this simple 21 CHAPTER 2. LITERATURE SURVEY technique is not applicable to traces that contain categorical data. In <ref> [Ribler et al., 1995] </ref> the authors describe categorical correlation functions that can be used instead to compute the degree of correlation between two given categorical traces. 22 Chapter 3 A STOCHASTIC PROCESS MODEL OF TRANSIENT TRACE DATA In this chapter we explain the term transient behavior (as exhibited in a time <p> We use the autocorrelation plot as a test by first generating synthesized traces from our model, and then comparing autocorrelation plots obtained from the synthesized traces to the autocorrelation plot obtained from the original test case trace. 6.2.4 Categorical Correlation Plots The categorical correlation plots <ref> [Ribler et al., 1995] </ref> measure the degree of correlation between two traces. To validate our model we measure the categorical correlation between 56 CHAPTER 6. MODEL VALIDATION a test case trace and a synthetic trace generated from our model of the test case trace.
Reference: [Rover and Waheed, 1993] <author> Rover, D. T. and Waheed, A. </author> <year> (1993). </year> <title> Multiple-domain analysis methods. </title> <booktitle> In ACM/ONR Workshop on Parallel Debugging and Performance, proceedings appeared in ACM SIGPLAN Notices, </booktitle> <volume> 28(12), </volume> <month> Dec. </month> <year> 1993, </year> <pages> pages 53-63, </pages> <address> San Diego. </address> <publisher> ACM. </publisher>
Reference-contexts: State Numerical 2 100 Time-trend Trace Numerical State Numerical 2 999 Mean-change Trace Numerical State Numerical 4 999 GE Message Trace: This trace was obtained from an instrumented implementation of the Gaussian elimination algorithm, which solves a 64 fi 64 system of equations using 32 processors on an NCUBE multicomputer <ref> [Rover and Waheed, 1993] </ref>. The trace data obtained by executing this algorithm was filtered to retain time-stamped events which represent the receiving of a message from a processor. The state of the system recorded in the trace is the number of the processor that last sent a message.
Reference: [Torgersen, 1991] <author> Torgersen, E. </author> <year> (1991). </year> <title> Comparison of Statisical Experiments. </title> <publisher> Cambridge Univ. Press, </publisher> <address> Cambridge. </address>
Reference-contexts: A model is expressed as a joint probability mass function, consequently, the problem of comparing models for similarity is the same as comparing probability distributions for similarity. Probability distributions can be directly compared by using measures of distance such as the Kullback Liebler distance and Hellinger distance <ref> [Torgersen, 1991] </ref>. However, none of these distances can be measured conveniently for a time dependent discrete probability mass function that describes our model. Therefore, instead of comparing models we compare traces synthesized from the models.
Reference: [Vazirani, 1996] <author> Vazirani, D. </author> <year> (1996). </year> <title> Towards automated network traffic modeling for pack-etized video with Chitra. </title> <type> Master's thesis, </type> <institution> Computer Sci. Dept., Virginia Tech, Blacksburg, </institution> <address> VA 24061-0106. </address>
Reference-contexts: Ingalls Trace: This is a trace of frame sizes from the MPEG movie of a videotape presentation titled "Object-Oriented Programming" by Dan Ingalls. The trace was recorded at 30 frames per second using a display window size of 320 lines fi 240 pixels. <ref> [Vazirani, 1996] </ref>. The original trace was transformed, as detailed in Appendix C. ACM Trace: This is a trace of frame sizes from the MPEG movie of a videotape presentation titled "An introduction to interactive digital video". <p> The trace was recorded at 10 frames per second using a display window size of 320 lines fi 240 pixels. For more details about this trace see <ref> [Vazirani, 1996] </ref>. The original trace was transformed, as detailed in Appendix C. 48 CHAPTER 6. MODEL VALIDATION Star Wars Trace: This is a trace of frame sizes of the Star Wars movie [Garrett, 1993] 1 .
Reference: [Wolfram, 1992] <author> Wolfram, S. </author> <year> (1992). </year> <title> Mathematica, A System for Doing Mathematics by Computer. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA. </address> <month> 137 </month>
Reference-contexts: Polynomial functions that exactly fit a REG path may need the estimation of a large number of parameters. In general, if we have k data points, we may need a k 1 degree polynomial to fit the k data points <ref> [Wolfram, 1992] </ref>.
References-found: 43

