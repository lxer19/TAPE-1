URL: http://www.cs.ucsb.edu/conferences/java98/papers/dcs.ps
Refering-URL: http://www.cs.ucsb.edu/conferences/java98/program.html
Root-URL: http://www.cs.ucsb.edu
Email: fmani,adam,schoolerg@cs.caltech.edu  
Title: Using Announce-Listen with Global Events to Develop Distributed Control Systems  
Author: K. Mani Chandy, Adam Rifkin, and Eve Schooler 
Date: February 6, 1998  
Address: 256-80, Pasadena, CA 91125  
Affiliation: Caltech Department of Computer Science  
Abstract: We specify an abstract model for dynamic distributed control systems in which the component objects make local decisions based on system-wide constraints and approximate global state. We focus on the issue of distributed resource management, exploring a solution that is both compositional and scalable because it builds global events into the Java infrastructure by exploiting its multicast facilities.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. P. Birman and R. van Renesse, </author> <title> Reliable Distributed Computing with the Isis Toolkit, </title> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, </address> <year> 1994. </year>
Reference-contexts: Using global events, an event is announced by a source object in one virtual machine, and notifiers for that event in other virtual machines anywhere on the Internet listen for the event and forward it to the appropriate (distributed) observers. Unlike the group communication in virtual synchrony <ref> [1] </ref>, it is not necessary for the event sources to know at any point who the event observers will be. <p> As illustrated in figure 2, multicast provides a scalable bus abstraction that allows any number of objects to participate in group communications; however, unlike virtual synchrony <ref> [1] </ref>, multicast does not guarantee reliable delivery. Not all listening providers will receive all consumers' requests, but consumers can increase announcement scopes if they receive no viable responses to their requests. Deadlock Avoidance.
Reference: [2] <author> K. M. Chandy and J. Misra, </author> <title> `How Processes Learn', </title> <journal> Journal of Distributed Computing, </journal> <volume> Volume 1, Number 1, </volume> <pages> Pages 40-52, </pages> <year> 1986. </year>
Reference-contexts: In this case, if x in object A has value 1, then object A "knows" that y in object B has value at least 1, and this knowledge is hard <ref> [2] </ref>. Whether soft state can be used depends on the nature of the problem, the relative frequency of announcements to state changes, and the flexibility of constraints. 3.2 Global Events The announce-listen paradigm is used at the messaging layer to assist in resource location, reservation, and scheduling.
Reference: [3] <author> K. M. Chandy and A. Rifkin, </author> <title> `Systematic Composition of Objects in Distributed Internet Applications: Processes and Sessions', Computer Journal, </title> <publisher> Oxford University Press, </publisher> <month> October </month> <year> 1997. </year>
Reference-contexts: Consumers use a two-phase commit protocol to reserve and then to schedule desired resources atomically [5, 6]. The action beginning with resource-request initiation and ending with resource-reservation commitment corresponds functionally to an Infosphere session <ref> [3] </ref>. 4 Status and Future Work The overall goal of any distributed resource management system is the efficient matching of resource providers and requestors. The Infospheres Infrastructure 2.0 includes several packages to assist with this task.
Reference: [4] <author> K. M. Chandy and E. M. Schooler, </author> <title> `Designing Directories in Distributed Systems: A Systematic Framework', </title> <booktitle> Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <pages> Pages 318-328, </pages> <address> Syracuse, New York, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: If at time (t + t 0 ), object A receives a message from B, timestamped t, stating that B is listening, then A has the "soft" information that B is listening at time (t + t 0 ); and the state softness is quantified in terms of probability <ref> [4] </ref>. By contrast, "hard" state is a property that follows from an invariant of the system. For instance, consider the invariant: If variable x in object A has value 1, then variable y in object B has value greater than or equal to 1.
Reference: [5] <author> J. Gray and A. Reuter, </author> <title> Transaction Processing: Concepts and Techniques, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: The reservation of a set of resources is determined when all of the resource managers agree to lock the slots that correspond to the same time. Consumers use a two-phase commit protocol to reserve and then to schedule desired resources atomically <ref> [5, 6] </ref>. The action beginning with resource-request initiation and ending with resource-reservation commitment corresponds functionally to an Infosphere session [3]. 4 Status and Future Work The overall goal of any distributed resource management system is the efficient matching of resource providers and requestors.
Reference: [6] <author> R. Ramamoorthi, A. Rifkin, B. Dimitrov, and K. M. Chandy, </author> <title> `A General Resource Reservation Framework for Scientific Computing', </title> <booktitle> Proceedings of the First International Scientific Computing in Object-Oriented Parallel Environments (ISCOPE) Conference, Volume 1343 of Springer-Verlag's Lecture Notes in Computer Science, </booktitle> <pages> Pages 283-290, </pages> <institution> Marina del Rey, California, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: The reservation of a set of resources is determined when all of the resource managers agree to lock the slots that correspond to the same time. Consumers use a two-phase commit protocol to reserve and then to schedule desired resources atomically <ref> [5, 6] </ref>. The action beginning with resource-request initiation and ending with resource-reservation commitment corresponds functionally to an Infosphere session [3]. 4 Status and Future Work The overall goal of any distributed resource management system is the efficient matching of resource providers and requestors.
Reference: [7] <author> E. M. Schooler, </author> <title> `A Multicast User Directory Service for Synchronous Rendezvous', </title> <type> Technical Report CS-TR-96-18, </type> <institution> Department of Computer Science, California Institute of Technology, Pasadena, California, </institution> <year> 1996. </year> <month> 5 </month>
Reference-contexts: There are several advantages to using global events and soft state. The announce-listen paradigm is fault-resilient <ref> [7] </ref>; that is, if a resource provider goes away, the system adapts dynamically to continue to meet the requests of the consumers. Furthermore, systems constructed using global events and multicast are compositional and scale; providers and consumers can add or remove themselves at any point dynamically.
References-found: 7

