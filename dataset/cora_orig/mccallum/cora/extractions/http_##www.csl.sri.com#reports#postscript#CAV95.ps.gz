URL: http://www.csl.sri.com/reports/postscript/CAV95.ps.gz
Refering-URL: http://www.csl.sri.com/reports/postscript/
Root-URL: 
Email: srivasg@csl.sri.com  
Phone: Phone: +1 (415) 859-5272 Fax: +1 (415) 859-2844  
Title: An Integration of Model Checking with Automated Proof Checking  
Author: S. Rajan, N. Shankar, and M.K. Srivas fsree, shankar, 
Date: May 18, 1995  
Address: Menlo Park CA 94025 USA  
Affiliation: Computer Science Laboratory SRI International  
Note: Short version to appear in the proceedings of CAV '95  
Abstract: Although automated proof checking tools for general-purpose logics have been successfully employed in the verification of digital systems, there are inherent limits to the efficient automation of expressive logics. If the expressiveness is constrained, there are useful logic fragments for which efficient decision procedures can be found. The model checking paradigm yields an important class of decision procedures for establishing temporal properties of finite-state systems. Model checking is remarkably effective for automatically verifying finite automata with relatively small state spaces, but is inadequate when the state spaces are either too large or unbounded. For this reason, it is useful to integrate the complementary technologies of model checking and proof checking. Such an integration has to be carried out in a delicate manner in order to be more than just the sum of the techniques. We describe fl Supported by ARPA under contract PR8556, by NSF Grant CCR-930044, and by NASA under contract NAS1-20334. We thank John Rushby (SRI) for encouraging us to write this paper and providing comments on earlier drafts of the paper. We are grateful to Geert Janssen (Eindhoven University of Technology) for supplying us the BDD-based mu-calculus model checker used in this work and going well beyond the call of duty in responding to our queries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Julian Bradfield and Colin Stirling. </author> <title> Verifying temporal properties of processes. </title> <editor> In J. C. M. Baeten and J. W. Klop, editors, </editor> <booktitle> CONCUR '90, number 458 in Lecture Notes in Computer Science, </booktitle> <pages> pages 115-125. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: We can generalize the propositional mu-calculus to obtain a mu-calculus for an arbitary type by allowing relational terms to be predicates over this state type. Quantification must also be generalized to range over the state type. Stirling and Bradfield <ref> [1] </ref> describe a tableau proof system for a similar mu-calculus. Temporal logics such as CTL with extensions of fairness (fairCTL) and other temporal modalities can be succinctly expressed using the mu-calculus [3, 10] defined above. <p> given by the following PVS declarations: ACK : TYPE = fready, waitg DATA : TYPE = [subrange [0,1] -&gt; bool] state : TYPE = [# request: bool, ack: ACK, data : DATA #] s, s1, s2 : VAR state P, Q : VAR PRED [state] i, j : VAR subrange <ref> [0, 1] </ref> If we take the PVS formula ack (s) = ready IMPLIES EU (N, (LAMBDA s1: ack (s) = ready), (LAMBDA s1: NOT request (s1)))(s) and expand the definition of EU, we obtain ack (s) = ready IMPLIES mu (LAMBDA Q: (LAMBDA s1: NOT request (s1) OR (ack (s1) =
Reference: [2] <author> J. R. Burch, E. M. Clarke, D. E. Long, K. L. McMillan, and D. L. Dill. </author> <title> Symbolic model checking for sequential circuit verification. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(4) </volume> <pages> 401-424, </pages> <month> April </month> <year> 1994. </year>
Reference: [3] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, D. L. Dill, and L. J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> 98(2) </volume> <pages> 142-170, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The primary disadvantage of model checking is that it only works well for small state spaces. This limitation can be partially overcome through the use of binary decision diagrams (BDD) and symbolic model checking <ref> [3] </ref>. Here the state space and the automaton transition relation are represented by means of binary decision diagrams which provide a representation for entire classes of states rather than individual states. Even so, the state explosion problem limits the applicability 2 of model checking in practice. <p> It is strictly more expressive than CTL*, and provides a framework to express fairness and extended temporal modalities [10]. There have been several variations of mu-calculus proposed in the past <ref> [3, 6, 10, 16, 24] </ref>. We closely follow the formal definition of the syntax of propositional mu-calculus from Burch, et al [3], that forms the basis of the model checker [14] used in this work. <p> There have been several variations of mu-calculus proposed in the past [3, 6, 10, 16, 24]. We closely follow the formal definition of the syntax of propositional mu-calculus from Burch, et al <ref> [3] </ref>, that forms the basis of the model checker [14] used in this work. Let be a finite signature, in which every symbol is a propositional variable or a predicate variable with a positive arity. The two syntactic categories formulas and relational terms are defined in the following manner. <p> Quantification must also be generalized to range over the state type. Stirling and Bradfield [1] describe a tableau proof system for a similar mu-calculus. Temporal logics such as CTL with extensions of fairness (fairCTL) and other temporal modalities can be succinctly expressed using the mu-calculus <ref> [3, 10] </ref> defined above. Additionally, it has been shown that LTL model checking can be reduced to fairCTL model checking [4]. CTL is a branching-time temporal logic that can quantify over paths in a computation tree. It can thus capture temporal possibility but not, in general, inevitability. <p> The problem is a simplified version of a real verification problem that arose in the context of verifying a commercial microprocessor [21]. We verify a property of a small microprocessor CPU design that is an extension of the CPU example used by Burch, et al, <ref> [3] </ref> to illustrate the power of symbolic model checking. The example is a register-transfer level design of the datapath and controller of a microprocessor that executes instructions of the form (opcode src1 src2 dstn) to perform both register-register and register-memory operations.
Reference: [4] <author> E. Clarke, O. Grumberg, and K. Hamaguchi. </author> <title> Another look at LTL model checking. </title> <editor> In David Dill, editor, </editor> <booktitle> Computer-Aided Verification 94, volume 818 of Lecture Notes in Computer Science, </booktitle> <pages> pages 415-427, </pages> <address> Stanford, CA, June 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Temporal logics such as CTL with extensions of fairness (fairCTL) and other temporal modalities can be succinctly expressed using the mu-calculus [3, 10] defined above. Additionally, it has been shown that LTL model checking can be reduced to fairCTL model checking <ref> [4] </ref>. CTL is a branching-time temporal logic that can quantify over paths in a computation tree. It can thus capture temporal possibility but not, in general, inevitability. The latter notion requires a linear-time temporal logic. The definitions of selected CTL operators are shown below.
Reference: [5] <author> Edmund M. Clarke, Orna Grumberg, and David E. </author> <title> Long. Model checking and abstraction. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(5) </volume> <pages> 1512-1542, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Model checking is an important instance of the latter approach for the verification of temporal properties of finite-state systems. The finite-state system is represented as a Kripke model and the system property is represented as a formula in propositional temporal logic. For certain temporal logics such as CTL <ref> [5] </ref>, the model-checking problem is linear even when the decidability of the logic itself is EXPTIME-complete [9]. Model checking thus provides a fully automatic technique for deciding an important class of verification problems. The importance of such automation cannot be overemphasized. <p> Such property-preserving abstractions in the context of model checking have also been studied by Graf [13], Clarke, Grumberg, and Long <ref> [5] </ref>, and Dams, Grumberg, and Gerth [7]. The rest of the paper is organized as follows: The propositional mu-calculus is introduced in Section 2.1 The definition of CTL and fairCTL operators in terms of mu-calculus and their embedding in PVS are discussed in Section 2.2. <p> Many simple system properties are expressible in 8CTL whose formulas in negation normal form, i.e., with only atomic negations, contain only the universal A path quantifier and not the existential E path quantifer. As shown by Clarke, Grumberg, and Long <ref> [5] </ref>, there is a simple way to construct abstractions in this case. Given a concrete state type C and an abstract state type A, we need a surjective mapping h from C to A that "preserves" the initialisation predicate, the next-state relation, and the property of interest. <p> A h AGp C iff p A h p C ffi A (p A Uq A ) h A (p C Uq C ) iff p A h p C and q A h q C 1 These conditions are somewhat different from those given by Clarke, Grumberg, and Long <ref> [5] </ref>. 11 ffi (8 (c : C) : p A (h (c)) p C (c)), when p A and p C contain no tem- poral operators. * M A j= p A A stronger version of the above conditions on abstraction is used in Section 4 to verify a liveness property <p> These conditions on the abstraction can be extended in several ways to preserve properties in all of CTL or CTL* <ref> [5, 7] </ref>. Dams, Grumberg, and Gerth [7] present a notion of mixed abstraction that preserves all CTL* properties but involves multiple next-state relations.
Reference: [6] <author> R. Cleaveland. </author> <title> Tableau-based model checking in the propositional mu-calculus. </title> <type> Technical Report 2/89, </type> <institution> University of Sussex, </institution> <month> March </month> <year> 1989. </year>
Reference-contexts: It is strictly more expressive than CTL*, and provides a framework to express fairness and extended temporal modalities [10]. There have been several variations of mu-calculus proposed in the past <ref> [3, 6, 10, 16, 24] </ref>. We closely follow the formal definition of the syntax of propositional mu-calculus from Burch, et al [3], that forms the basis of the model checker [14] used in this work.
Reference: [7] <author> Dennis Dams, Orna Grumberg, and Rob Gerth. </author> <title> Abstract interpretation of reactive systems: Abstractions preserving 8CTL*, </title> <editor> 9CTL* and CTL*. In Ernst-Rudiger Olderog, editor, </editor> <booktitle> Programming Concepts, Methods and Calculi (PROCOMET '94), </booktitle> <pages> pages 561-581, </pages> <year> 1994. </year> <month> 16 </month>
Reference-contexts: Such property-preserving abstractions in the context of model checking have also been studied by Graf [13], Clarke, Grumberg, and Long [5], and Dams, Grumberg, and Gerth <ref> [7] </ref>. The rest of the paper is organized as follows: The propositional mu-calculus is introduced in Section 2.1 The definition of CTL and fairCTL operators in terms of mu-calculus and their embedding in PVS are discussed in Section 2.2. <p> These conditions on the abstraction can be extended in several ways to preserve properties in all of CTL or CTL* <ref> [5, 7] </ref>. Dams, Grumberg, and Gerth [7] present a notion of mixed abstraction that preserves all CTL* properties but involves multiple next-state relations. <p> These conditions on the abstraction can be extended in several ways to preserve properties in all of CTL or CTL* [5, 7]. Dams, Grumberg, and Gerth <ref> [7] </ref> present a notion of mixed abstraction that preserves all CTL* properties but involves multiple next-state relations.
Reference: [8] <author> Jurgen Dingel and Thomas Filkorn. </author> <title> Model checking for infinite state systems using data abstraction, assumption-commitment style reasoning and theorem proving. </title> <booktitle> In Computer-Aided Verification 95, </booktitle> <year> 1995. </year> <note> This volume. </note>
Reference-contexts: Our basic approach can be generalized to also integrate temporal logic model checkers such as SMV [20] and language containment systems such as COSPAN [18]. Our approach is quite similar to that of Dingel and Filkorn <ref> [8] </ref> in that they use a combination of a model checker for LTL and a theorem prover for first-order logic, but with a looser integration than the one we present.
Reference: [9] <author> E. Allen Emerson. </author> <title> Temporal and modal logic. </title> <editor> In Jan van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, chapter 16, </booktitle> <pages> pages 995-1072. </pages> <publisher> Elsevier and MIT press, </publisher> <address> Amsterdam, The Netherlands, and Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: The finite-state system is represented as a Kripke model and the system property is represented as a formula in propositional temporal logic. For certain temporal logics such as CTL [5], the model-checking problem is linear even when the decidability of the logic itself is EXPTIME-complete <ref> [9] </ref>. Model checking thus provides a fully automatic technique for deciding an important class of verification problems. The importance of such automation cannot be overemphasized. The effort required to construct logical proofs of correctness for these problems can be large since it requires the discovery of suitably strong invariant.
Reference: [10] <author> E.A. Emerson and C.L Lei. </author> <title> Efficient model checking in fragments of the propositional mu-calculus. </title> <booktitle> In Proceedings of the 10th Symposium on Principles of Programming Languages, </booktitle> <pages> pages 84-96, </pages> <address> New Orleans, LA, </address> <month> January </month> <year> 1985. </year> <institution> Association for Computing Machinery. </institution>
Reference-contexts: It is strictly more expressive than CTL*, and provides a framework to express fairness and extended temporal modalities <ref> [10] </ref>. There have been several variations of mu-calculus proposed in the past [3, 6, 10, 16, 24]. We closely follow the formal definition of the syntax of propositional mu-calculus from Burch, et al [3], that forms the basis of the model checker [14] used in this work. <p> It is strictly more expressive than CTL*, and provides a framework to express fairness and extended temporal modalities [10]. There have been several variations of mu-calculus proposed in the past <ref> [3, 6, 10, 16, 24] </ref>. We closely follow the formal definition of the syntax of propositional mu-calculus from Burch, et al [3], that forms the basis of the model checker [14] used in this work. <p> Quantification must also be generalized to range over the state type. Stirling and Bradfield [1] describe a tableau proof system for a similar mu-calculus. Temporal logics such as CTL with extensions of fairness (fairCTL) and other temporal modalities can be succinctly expressed using the mu-calculus <ref> [3, 10] </ref> defined above. Additionally, it has been shown that LTL model checking can be reduced to fairCTL model checking [4]. CTL is a branching-time temporal logic that can quantify over paths in a computation tree. It can thus capture temporal possibility but not, in general, inevitability.
Reference: [11] <author> Urban Engberg, Peter Grtnning, and Leslie Lamport. </author> <title> Mechanical verification of concurrent systems with TLA. </title> <editor> In G. v. Bochmann and D. K. Probst, editors, </editor> <booktitle> Computer-Aided Verification 92, number 663 in Lecture Notes in Computer Science, </booktitle> <pages> pages 44-55. </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: They present a proof of a multiplier where the 8-bit multiplier can be verified by COSPAN and N-bit multiplier composed from 8-bit multipliers can be verified in TLP <ref> [11] </ref>. In [17], the two systems used to verify the multiplier were used independently and not actually integrated. Hungar describes a similar effort where a model checker is used to verify properties of processes and a syntactic formalization of MCTL is used to verify the composition of the individual processes.
Reference: [12] <author> M. J. C. Gordon and T. F. Melham, </author> <title> editors. Introduction to HOL: </title>
Reference-contexts: Even so, there has been very little progress in achieving such a combination in an effective manner. The HOL/Voss system [15] is an early attempt in this direction. In this combination, the HOL proof checker <ref> [12] </ref> is given input that contains constants that are uninterpreted for HOL but given an interpretation in Voss which is a symbolic model checker. Voss is used to establish properties of these constants and the resulting assertions are fed back to the HOL proof as lemmas.
References-found: 12

