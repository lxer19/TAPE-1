URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iwls95.FKB.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/kukimoto/
Root-URL: 
Title: BDD Minimization by Truth Table Permutations  
Author: Masahiro Fujita Yuji Kukimoto Robert K. Brayton 
Address: San Jose, CA 95134 Berkeley, CA 94720  
Affiliation: Fujitsu Laboratories of America University of California  
Abstract: Bern, Meinel and Slobodova [1] have recently proposed a novel technique called cube transformations to minimize the size of binary decision diagrams. Given a Boolean function, they try to find a domain transformation such that the function after the transformation has a smaller BDD. It has been shown that well-chosen transformations enable us to represent compactly the hidden-weight-bit functions, which are known to have exponential-sized BDDs for any variable ordering. Although their results are promising, no heuristics for picking good transformations are provided in [1] , i.e. they carefully chose a particular transformation for each function by investigating the characteristic of the function. In this paper, we present a set of heuristic algorithms which construct effective transformations starting from given BDDs. The algorithms are incremental in the sense that they construct a transformation as the combination of local transformations, each of which is guaranteed to generate smaller BDDs. Preliminary experimental results showed that this technique gives us a minimization ability which cannot be captured by dynamic reordering.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bern, C. Meinel, and A. Slobodova. </author> <title> Efficient OBDD-based Boolean manipulation in CAD beyond current limits. </title> <type> Technical report, </type> <institution> Universitat Trier, </institution> <year> 1994. </year>
Reference-contexts: In 1993, Rudell [6] gave a powerful reordering algorithm called sifting and showed that there is an efficient way to change variable ordering dynamically while BDDs are constructed, which significantly enlarged the applicability of BDDs. Recently Bern, Meinel and Slobodova <ref> [1] </ref> have proposed a novel technique called cube transformations to minimize the size of binary decision diagrams. Given a Boolean function, they try to find a domain transformation such that the function after the transformation has a smaller BDD. <p> Notice that the technique can be seen as an extension of variable reordering since any variable reordering can be cast into a simple truth table permutation. It has been shown in <ref> [1] </ref> that well-chosen transformations enable us to represent compactly the hidden-weight-bit functions, which are known to have exponential-sized BDDs for any variable ordering. Although their results are promising, no heuristics for picking good transformations are provided in [1] , i.e. they carefully chose a particular transformation for each function by investigating <p> It has been shown in <ref> [1] </ref> that well-chosen transformations enable us to represent compactly the hidden-weight-bit functions, which are known to have exponential-sized BDDs for any variable ordering. Although their results are promising, no heuristics for picking good transformations are provided in [1] , i.e. they carefully chose a particular transformation for each function by investigating the characteristic of the function. In this paper, we present a set of heuristic algorithms which construct effective transformations starting from given BDDs. <p> In other words, any transformation induced by a truth table permutation is invertible. Note that the inverse transformation is also a truth table permutation. 3 Truth Table Permutations Definition 1 <ref> [1] </ref> A truth table permutation ' is a one-to-one mapping ' : B n ! B n , where B = f0; 1g and n is the number of input variables. Let f : B n ! B n and x 2 B n . <p> As long as we keep the permutation and the resulting function, the original functionality can be always extracted. Therefore, truth table permutations do not cause any loss of information. Bern, Meinel and Slobodova proposed in <ref> [1] </ref> the basic notion of truth table permutations and showed that the hidden-weight bit functions can be represented compactly with a certain truth table permutation. Specifically, they investigated a strict subset of truth table permutations, namely those represented by complete types. <p> Given a complete type represented as a DAG, one can extract a TTP by traversing the graph from its root to its leaves. For the details of complete types, the reader should refer to <ref> [1] </ref>. Due to the structural constraint on complete types, it is known that we cannot explore the entire flexibility of TTPs by complete types. <p> Truth table permutations give us a way to reduce the size of BDDs as seen in Figure 1, but we still remain to answer if they are useful in actual applications. The following properties of TTPs make them attractive <ref> [1] </ref>. 2 1. Let ' be a truth table permutation. f = g iff f ' = g ' 2.
Reference: [2] <author> M. Fujita, H. Fujisawa, and N. Kawato. </author> <title> Evaluation and improvements of Boolean comparison method based on binary decision diagrams. </title> <booktitle> In Proceedings of IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 2-5, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: The fact that the size of BDDs is highly sensitive to variable ordering has spurred a large body of research on heuristic variable ordering <ref> [2, 4, 3] </ref>. In 1993, Rudell [6] gave a powerful reordering algorithm called sifting and showed that there is an efficient way to change variable ordering dynamically while BDDs are constructed, which significantly enlarged the applicability of BDDs.
Reference: [3] <author> M. Fujita, Y. Matsunaga, and T. Kakuda. </author> <title> On variable ordering of binary decision diagrams for the application of multi-level logic synthesis. </title> <booktitle> In Proceedings of European Design Automation Conference, </booktitle> <pages> pages 50-54, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: The fact that the size of BDDs is highly sensitive to variable ordering has spurred a large body of research on heuristic variable ordering <ref> [2, 4, 3] </ref>. In 1993, Rudell [6] gave a powerful reordering algorithm called sifting and showed that there is an efficient way to change variable ordering dynamically while BDDs are constructed, which significantly enlarged the applicability of BDDs.
Reference: [4] <author> S. Malik, A. R. Wang, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Logic verification using binary decision diagrams in a logic synthesis environment. </title> <booktitle> In Proceedings of IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 6-9, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: The fact that the size of BDDs is highly sensitive to variable ordering has spurred a large body of research on heuristic variable ordering <ref> [2, 4, 3] </ref>. In 1993, Rudell [6] gave a powerful reordering algorithm called sifting and showed that there is an efficient way to change variable ordering dynamically while BDDs are constructed, which significantly enlarged the applicability of BDDs. <p> Read in a multi-level network. 2. Compute all the primary output functions of the network using dynamic reordering. The initial ordering is chosen by Malik's heuristic <ref> [4] </ref>. 3. Minimize BDDs by dynamic reordering (pre-reordering). 4. Perform TTP-based minimization. 5. Minimize BDDs further by dynamic reordering (post-reordering). Note that the same TTP is used to minimize all the primary output functions. We picked 19 large multi-level networks for this experiment from the MCNC/ISCAS benchmark suite.
Reference: [5] <author> S. Minato, N. Ishiura, and S. Yajima. </author> <title> Shared binary decision diagrams with attributed edges for efficient Boolean function manipulation. </title> <booktitle> In Proceedings of 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 52-57, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: We want to merge the two 4 nodes into a single node as shown on the right in Figure 4. Note that the reduction shown in Figure 4 is exactly the same as Minato's input complement edges <ref> [5] </ref>.
Reference: [6] <author> R. Rudell. </author> <title> Dynamic variable ordering for ordered binary decision diagrams. </title> <booktitle> In Proceedings of IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 42-47, </pages> <month> November </month> <year> 1993. </year> <month> 9 </month>
Reference-contexts: The fact that the size of BDDs is highly sensitive to variable ordering has spurred a large body of research on heuristic variable ordering [2, 4, 3]. In 1993, Rudell <ref> [6] </ref> gave a powerful reordering algorithm called sifting and showed that there is an efficient way to change variable ordering dynamically while BDDs are constructed, which significantly enlarged the applicability of BDDs.
References-found: 6

