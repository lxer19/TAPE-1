URL: ftp://ftp.cse.unsw.edu.au/pub/users/andrewt/publications/1995/1.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/publications/1995/SCSE_publications.html
Root-URL: 
Email: Email: -jas,bjtong,chenhl,anne-@cse.unsw.edu.au  
Title: A Two-Phase Approach to Data Allocation in Distributed Databases  
Author: John Shepherd Banchong Harangsri Hwee Ling Chen Anne Ngu 
Address: Sydney 2052, AUSTRALIA.  
Affiliation: School of Computer Science and Engineering, The University of New South Wales,  
Abstract: In this paper, we propose a two-phase approach to the problem of optimal allocation of data objects (fragments) on a network in a distributed database system. In the first phase, we perform fragment clustering 1 , in which we form groupings of fragments that tend to be accessed together. In the second phase, we use a "divide and conquer" search technique to allocate clusters to the computing nodes (sites) in the network. We show, via complexity analysis, that the combined process of clustering and data allocation takes time that is polynomial with respect to the number of objects and sites. We also show, via experimental analysis, that our approach produces solutions that are close to optimal for a wide range of fragmentations, queries and network structures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.R. Anderberg. </author> <title> Cluster Analysis for Applications. </title> <publisher> Academic Press, </publisher> <year> 1973. </year>
Reference-contexts: The clustering problem involves placing a set of objects into groups according to some (usually heuris tic) measure of their "relatedness". A large number of clustering techniques have been proposed in the literature <ref> [9, 10, 18, 1, 4, 3, 17, 7, 8, 11] </ref>. In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries.
Reference: [2] <author> P.M.G. Apers. </author> <title> Data allocation in distributed database systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 13(3) </volume> <pages> 263-304, </pages> <month> september </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Data allocation is a critical aspect of distributed database systems: a poorly-designed data allocation can lead to inefficient computation, high access costs, and high network loads [15, 16] whereas a well-designed data allocation can enhance data availability, diminish access time, and minimise overall usage of resources <ref> [15, 2] </ref>. It is thus very important to provide distributed database systems with an efficient means of achieving effective data allocation. 1 In this work, we use the term fragment to denote either a vertical partition, a horizontal partition or a combination of vertical/horizontal partitions of a single relation. <p> Our two-phase method has several advantages over existing data allocation schemes. First, as an experimental approach, the separation into two phases gives more flexibility than integrated approaches such as <ref> [2] </ref> which intertwine the clustering and allocation functions; we can experiment with different combinations of clustering strategies and search methods. Second, it satisfies the efficiency requirement for data allocation; the example clustering and search schemes in this paper have reasonable complexity with respect to the number of sites and objects. <p> This is a complex optimisation problem and an efficient analytic solution has not yet been found. However, a number of heuristic approaches have been suggested <ref> [2, 16] </ref>. In this work, the clusters of fragments produced by BFC serve as the input (the objects) to our data allocation algorithm. <p> Section 5 gives some experimental results that show the effectiveness of our approach on a range of data allocation problems. Section 6 briefly compares our two-phase approach to the single-phase approach described in <ref> [2] </ref> and Section 7 summarises our results. 2 A Two-Phase Approach to Data Al location The problem of data allocation in distributed databases can be dealt with in an elegant and efficient manner by a two-phase approach. <p> The clustering schemes are then given as input to one of the various data allocation search techniques such as MaxP, Divide and Conquer, Branch-and-Bound or the heuristic search techniques proposed in <ref> [2] </ref>, to yield a final efficient placement of the fragments . 3 Fragment Clustering Algorithm In this section, we give a fragment clustering algorithm which is derived from the original BVP algorithm (for complete details of the BVP algorithm, refer to [13]). <p> 5 queries test-case #sites 5 6 7 8 9 10 EXH-BEST 465 671 806 1022 1195 1395 BFC/DAC 466 672 806 1023 1195 1398 EXH-WORST 852 1065 1210 1437 1618 1831 6 Related Work The most well-known previous work on the data allocation problem for distributed databases is by Apers <ref> [2] </ref>, who makes use of a "virtual network" to perform data allocation. This network contains vir tual sites (used for grouping fragments) and physical sites. <p> The second phase performs data alloca processing systems 8 In support of this claim we note that the table of results for the total data allocation heuristic algorithm in <ref> [2] </ref> using a static schedule gives results that are within 3% of the best possible solution; in contrast, our results in Figure 9 and Figure 10 show that the solutions produced by BFC/DAC are within 0.3% of the best possible. tion by a "divide and conquer" technique, which makes use of
Reference: [3] <author> J.C. Bezdek. </author> <title> Pattern Recognition with Fuzzy Objective Function Algorithms. </title> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: The clustering problem involves placing a set of objects into groups according to some (usually heuris tic) measure of their "relatedness". A large number of clustering techniques have been proposed in the literature <ref> [9, 10, 18, 1, 4, 3, 17, 7, 8, 11] </ref>. In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries.
Reference: [4] <editor> Edited by J.V. Ryzin, editor. </editor> <title> Classification and Clustering. </title> <publisher> Academic Press, </publisher> <year> 1977. </year> <note> Conducted by the Mathematics Research Center, </note> <institution> The University of Wisconsin at Madison, </institution> <month> May 3-5, </month> <year> 1976. </year>
Reference-contexts: The clustering problem involves placing a set of objects into groups according to some (usually heuris tic) measure of their "relatedness". A large number of clustering techniques have been proposed in the literature <ref> [9, 10, 18, 1, 4, 3, 17, 7, 8, 11] </ref>. In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries.
Reference: [5] <author> S. Chakravarthy, J. Muthuraj, R. Varadara-jan, and S.B. Navathe. </author> <title> An objective function for vertically partitioning relations in distributed databases and its analysis. </title> <type> Technical Report UF-CIS-TR-92-045, </type> <institution> University of Florida, </institution> <year> 1992. </year> <note> Email: sharma@snapper.cis.ufl.edu, Submitted for publication. </note>
Reference-contexts: This paper addresses the problem of determining where to place a given set of data objects (fragments) on a network of computing nodes (sites) in order to minimise the cost of answering a given set of queries Q. Similar to earlier work <ref> [5, 16] </ref>, we assume that fragmentation of the original relations (either vertical, horizontal or hybrid) has been carried out before the data allocation phase. Fragmentation may be based on pragmatic concerns from the enterprise that owns the database, the semantics of the database itself, or on some performance criteria. <p> scheme 1 1 (12345678910) 3 3 (157) (2389) (4610) 5 5 (15) (2389) (46) (7) (10) 7 7 (1) (2389) (4) (5) (6) (7) (10) 9 9 (1) (28) (3) (4) (5) (6) (7) (9) (10) 3 The table in Figure 6 has been taken from the original table in <ref> [5] </ref>, since this gives a good illustration of how a given set of fragments can be hierarchically broken down to clusters of fragments.
Reference: [6] <author> B. Harangsri and A. Ngu. </author> <title> A new heuristic for data allocation, </title> <booktitle> 1993. in International Symposium on Next Generation Database Systems and Their Applications. </booktitle>
Reference-contexts: This guarantees that the chosen allocation is the global optimum, but is infeasible in practice because the number of possible allocations is very large (exponential with respect to the number of sites and objects). In <ref> [6] </ref>, we proposed a search technique called partial search with maximum probability (MaxP) to reduce the search space to a size which is polynomial with respect to the number of sites and objects, but which generally yields data allocations whose costs are close to the optimal solution. <p> The testbed allows us to specify details of the relations, fragments, queries, access frequencies and network topology. It also allows us to choose alternatives for fragment clustering scheme, data allocation scheme and distributed query optimiser. At present, we have implemented an exhaustive search for data allocation, the M axP <ref> [6] </ref> allocation method, and the combined BFC/DAC scheme. We have also simulated the SDD-1 distributed query optimiser. <p> Under our current implementation (in C under OSF/1 v2.0 on a DEC Alpha 3000/400), the exhaustive case required 30 hours to generate the results in Figure 9 and Figure 10, while the BFC/DAC scheme required around 2 minutes. the M axP scheme <ref> [6] </ref>.
Reference: [7] <author> J.A. Hartigan. </author> <title> Representation of similarity matrices by trees. </title> <journal> Journal of the American Statistical Association, </journal> <volume> 62, </volume> <month> December </month> <year> 1967. </year>
Reference-contexts: The clustering problem involves placing a set of objects into groups according to some (usually heuris tic) measure of their "relatedness". A large number of clustering techniques have been proposed in the literature <ref> [9, 10, 18, 1, 4, 3, 17, 7, 8, 11] </ref>. In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries.
Reference: [8] <author> J.A. Hartigan. </author> <title> Direct clustering of a data matrix. </title> <journal> Journal of the American Statistical Association, </journal> <volume> 67(337) </volume> <pages> 123-129, </pages> <month> March </month> <year> 1972. </year>
Reference-contexts: The clustering problem involves placing a set of objects into groups according to some (usually heuris tic) measure of their "relatedness". A large number of clustering techniques have been proposed in the literature <ref> [9, 10, 18, 1, 4, 3, 17, 7, 8, 11] </ref>. In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries.
Reference: [9] <author> J.A. Hartigan. </author> <title> Clustering Algorithms. </title> <publisher> John Wiley & Sons, </publisher> <year> 1975. </year>
Reference-contexts: The clustering problem involves placing a set of objects into groups according to some (usually heuris tic) measure of their "relatedness". A large number of clustering techniques have been proposed in the literature <ref> [9, 10, 18, 1, 4, 3, 17, 7, 8, 11] </ref>. In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries.
Reference: [10] <author> J.A. Hoffer and D.G. Severance. </author> <title> The use of cluster analysis in physical database design. </title> <booktitle> In Proceedings 1st International Conference on VLDB(Framingham, </booktitle> <address> Mass), </address> <year> 1975. </year>
Reference-contexts: The clustering problem involves placing a set of objects into groups according to some (usually heuris tic) measure of their "relatedness". A large number of clustering techniques have been proposed in the literature <ref> [9, 10, 18, 1, 4, 3, 17, 7, 8, 11] </ref>. In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries. <p> The computation of the affinity values between fragments gives rise to a (symmetric) n fi n fragment affinity matrix (FAM). The FAM is then used by an algorithm called the bond energy algorithm (BEA) <ref> [12, 10] </ref> to produce a clustered fragment affinity matrix (CFAM). In the CFAM, fragments with high affinity tend to stay together with others with high affinity and similarly for low affinity with low affinity.
Reference: [11] <author> S.C. Johnson. </author> <title> Hierarchical clustering schemes. </title> <journal> Psychometrika, </journal> <volume> 32(3) </volume> <pages> 241-254, </pages> <month> September </month> <year> 1967. </year>
Reference-contexts: The clustering problem involves placing a set of objects into groups according to some (usually heuris tic) measure of their "relatedness". A large number of clustering techniques have been proposed in the literature <ref> [9, 10, 18, 1, 4, 3, 17, 7, 8, 11] </ref>. In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries.
Reference: [12] <author> W.T. McCormick, P.J. Schweitzer, and T.W. White. </author> <title> Problem decomposition and data reorganization by a clustering technique. </title> <journal> Operation Research, </journal> <volume> 20(5) </volume> <pages> 993-1009, </pages> <year> 1972. </year>
Reference-contexts: The computation of the affinity values between fragments gives rise to a (symmetric) n fi n fragment affinity matrix (FAM). The FAM is then used by an algorithm called the bond energy algorithm (BEA) <ref> [12, 10] </ref> to produce a clustered fragment affinity matrix (CFAM). In the CFAM, fragments with high affinity tend to stay together with others with high affinity and similarly for low affinity with low affinity.
Reference: [13] <author> S.B. Navathe, S. Ceri, G. Wiederhold, and J. Dou. </author> <title> Vertical partitioning algorithms for database design. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(4) </volume> <pages> 680-710, </pages> <month> december </month> <year> 1984. </year>
Reference-contexts: In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries. This notion has already been used as the basis of a clustering algorithm for distributed databases: the Binary Vertical Partitioning (BVP) algorithm <ref> [13] </ref>. While this method was originally developed to determine clusters of attributes within a relation for the purpose of vertical fragmentation, it can be adapted straightforwardly to determine clusters of fragments. In accordance with its new usage, we rename this algorithm the Binary Fragment-Clustering (BFC) algorithm in this paper. <p> Given the size of the space of possible clusterings, it is extremely important to use an efficient fragment clustering algorithm. The BVP algorithm proposed by <ref> [13] </ref> was chosen because (a) it has a polynomial time complexity and (b) it is based on the idea of grouping fragments that tend to be accessed together into the same cluster. <p> Conquer, Branch-and-Bound or the heuristic search techniques proposed in [2], to yield a final efficient placement of the fragments . 3 Fragment Clustering Algorithm In this section, we give a fragment clustering algorithm which is derived from the original BVP algorithm (for complete details of the BVP algorithm, refer to <ref> [13] </ref>). We call the modified BVP algorithm binary fragment clustering (BFC). The algorithm BFC and its parameters are given in Appendix B. Briefly, the aim of the BFC algorithm is to find a way of partitioning the fragments into two sets such that an objective function is maximised.
Reference: [14] <author> S.B. Navathe and M. Ra. </author> <title> Vertical partitioning for database design: graphical algorithm. </title> <booktitle> In ACM SIGMOD, </booktitle> <pages> pages 30-39, </pages> <address> june 1989. Portland. </address>
Reference-contexts: Step 1 which is the most costly is the cost of executing BFC. Navathe and Ra in <ref> [14] </ref> have addressed the time complexity of BVP (our BFC). Its time complexity is O (n 2 log n). Steps 2, 4, 5, and 6 are done in O (1).
Reference: [15] <author> M.T. Ozsu and P. Valduriez. </author> <title> Principles of Distributed Database Systems. </title> <publisher> Prentice-Hall, </publisher> <address> New Jersey, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Data allocation is a critical aspect of distributed database systems: a poorly-designed data allocation can lead to inefficient computation, high access costs, and high network loads <ref> [15, 16] </ref> whereas a well-designed data allocation can enhance data availability, diminish access time, and minimise overall usage of resources [15, 2]. <p> 1 Introduction Data allocation is a critical aspect of distributed database systems: a poorly-designed data allocation can lead to inefficient computation, high access costs, and high network loads [15, 16] whereas a well-designed data allocation can enhance data availability, diminish access time, and minimise overall usage of resources <ref> [15, 2] </ref>. It is thus very important to provide distributed database systems with an efficient means of achieving effective data allocation. 1 In this work, we use the term fragment to denote either a vertical partition, a horizontal partition or a combination of vertical/horizontal partitions of a single relation.
Reference: [16] <author> D. Sacca and G. Wiederhold. </author> <title> Database partitioning in a cluster of processors. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 10(1) </volume> <pages> 29-56, </pages> <month> march </month> <year> 1985. </year>
Reference-contexts: 1 Introduction Data allocation is a critical aspect of distributed database systems: a poorly-designed data allocation can lead to inefficient computation, high access costs, and high network loads <ref> [15, 16] </ref> whereas a well-designed data allocation can enhance data availability, diminish access time, and minimise overall usage of resources [15, 2]. <p> This paper addresses the problem of determining where to place a given set of data objects (fragments) on a network of computing nodes (sites) in order to minimise the cost of answering a given set of queries Q. Similar to earlier work <ref> [5, 16] </ref>, we assume that fragmentation of the original relations (either vertical, horizontal or hybrid) has been carried out before the data allocation phase. Fragmentation may be based on pragmatic concerns from the enterprise that owns the database, the semantics of the database itself, or on some performance criteria. <p> This is a complex optimisation problem and an efficient analytic solution has not yet been found. However, a number of heuristic approaches have been suggested <ref> [2, 16] </ref>. In this work, the clusters of fragments produced by BFC serve as the input (the objects) to our data allocation algorithm.
Reference: [17] <author> C.T. Zahn. </author> <title> Graph-theoretical methods for detecting and describing gestalt clusters. </title> <journal> IEEE Transactions on Computers, </journal> <note> C-20(1):68-86, Jan- uary 1971. </note>
Reference-contexts: The clustering problem involves placing a set of objects into groups according to some (usually heuris tic) measure of their "relatedness". A large number of clustering techniques have been proposed in the literature <ref> [9, 10, 18, 1, 4, 3, 17, 7, 8, 11] </ref>. In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries.
Reference: [18] <author> J. Zupan. </author> <title> Clustering of Large Data Sets. </title> <publisher> Research Studies Press, A division of John Wiley & Sons LTD, </publisher> <year> 1982. </year> <month> Appendices </month>
Reference-contexts: The clustering problem involves placing a set of objects into groups according to some (usually heuris tic) measure of their "relatedness". A large number of clustering techniques have been proposed in the literature <ref> [9, 10, 18, 1, 4, 3, 17, 7, 8, 11] </ref>. In this work, the "relatedness" we wish to measure is the tendency of fragments to be used together in answering a given set of queries.
References-found: 18

