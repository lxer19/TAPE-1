URL: http://www-csag.cs.uiuc.edu/papers/cr-tpds.ps
Refering-URL: http://www-csag.cs.uiuc.edu/papers/index.html
Root-URL: http://www.cs.uiuc.edu
Title: Compressionless Routing: A Framework for Adaptive and Fault-tolerant Routing  
Author: Jae H. Kim, Ziqiang Liu, and Andrew A. Chien 
Keyword: Routing Networks, Adaptive Routing, Deadlock Prevention, Fault Tolerance, Wormhole Routing  
Note: Accepted  To Appear in IEEE Transactions on Parallel and Distributed Systems  
Address: 1304 W. Springfield Avenue Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Email: Email: fkim,ziqiang,achieng@cs.uiuc.edu  
Date: Submitted March 2, 1994 Revised March 20, 1995  October 14, 1996  
Abstract: Compressionless Routing (CR) is a new adaptive routing framework which provides a unified framework for efficient deadlock-free adaptive routing and fault-tolerance. CR exploits the tight-coupling between wormhole routers for flow control to detect and recover from potential deadlock situations. Fault-tolerant Compressionless Routing (FCR) extends CR to support end-to-end fault-tolerant delivery. Detailed routing algorithms, implementation complexity and performance simulation results for CR and FCR are presented. These results show that the hardware for CR and FCR networks is modest. Further, CR and FCR networks can achieve superior performance to alternatives such as dimension-order routing. Compressionless Routing has several key advantages: deadlock-free adaptive routing in toroidal networks with no virtual channels, simple router designs, order-preserving message transmission, applicability to a wide variety of network topologies, and elimination of the need for buffer allocation messages. Fault-tolerant Compressionless Routing has several additional advantages: data integrity in the presence of transient faults (nonstop fault-tolerance), permanent faults tolerance, and elimination of the need for software buffering and retry for reliability. The advantages of CR and FCR not only simplify hardware support for adaptive routing and fault-tolerance, they also can simplify software communication layers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Dally and C. Seitz, </author> <title> "Deadlock-free message routing in multiprocessor interconnection networks," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-36, no. 5, </volume> <pages> pp. 547-53, </pages> <year> 1987. </year>
Reference-contexts: In fact, the cost of deadlock prevention in adaptive routing networks is one of the factors discouraging its use in commercial massively-parallel machines. Most existing adaptive routing algorithms guarantee deadlock-freedom by defining cycle-free routes on a set of virtual networks implemented with virtual channels. Cycles can be prevented statically <ref> [1, 2, 3, 4] </ref> or dynamically [5, 6]. Unfortunately, virtual channels can be expensive because they complicate routing decision and channel control, increasing router node delay significantly [7]. Consequently, to achieve adaptive routing with speed comparable to dimension-order routers, more efficient adaptive routing algorithms must be developed. <p> In contrast to previous multistage interconnection networks, their hierarchical topologies allow the exploitation of locality. Though these networks are also interesting, our studies focus primarily on direct networks. Many of these networks use cut-through or wormhole routing <ref> [18, 1] </ref>, a technique which reduces message latency by pipelining its transmission over a number of channels along its path. A packet is divided into multiple flits, flow control units. Routing information is stored in the first flit, called the header flit.
Reference: [2] <author> D. Linder and J. Harden, </author> <title> "An adaptive and fault tolerant wormhole routing strategy for k-ary n-cubes," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-40, </volume> <pages> pp. 2-12, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: In fact, the cost of deadlock prevention in adaptive routing networks is one of the factors discouraging its use in commercial massively-parallel machines. Most existing adaptive routing algorithms guarantee deadlock-freedom by defining cycle-free routes on a set of virtual networks implemented with virtual channels. Cycles can be prevented statically <ref> [1, 2, 3, 4] </ref> or dynamically [5, 6]. Unfortunately, virtual channels can be expensive because they complicate routing decision and channel control, increasing router node delay significantly [7]. Consequently, to achieve adaptive routing with speed comparable to dimension-order routers, more efficient adaptive routing algorithms must be developed. <p> Adaptive routing allows paths to be chosen dynamically, providing the potential to improve network performance. However, while increasing routing freedom, adaptive routing also increases the cost of deadlock prevention. For example, Linder and Harden's algorithm requires 2 n1 virtual channels for n-dimensional networks <ref> [2] </ref>. This cost can reduce the achievable network clock speed, overwhelming the benefits of adaptive routing. Recently, a number of researchers have developed algorithms to reduce the number of virtual channels required for deadlock prevention in mesh networks. <p> Many studies have suggested fault-tolerant adaptive routing algorithms [20, 21, 22], but most of these are applicable only in packet-switched (store-and-forwarding), hypercube networks. Because of their advantages in latency and implementation, the routing community has recently begun to focus on adaptive routing algorithms for wormhole-routed, low-dimensional networks <ref> [2, 4, 3, 23, 24] </ref>. Chien and Kim have extended planar-adaptive routing with misrouting to support fault tolerance [3]. By reconfiguring faults to be a convex region, the remainder of the network can continue to operate.
Reference: [3] <author> A. A. Chien and J. H. Kim, </author> <title> "Planar-adaptive routing: Low-cost adaptive networks for multiprocessors," </title> <booktitle> in Proceedings of the International Symposium on Computer Architecture, </booktitle> <pages> pp. 268-77, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: In fact, the cost of deadlock prevention in adaptive routing networks is one of the factors discouraging its use in commercial massively-parallel machines. Most existing adaptive routing algorithms guarantee deadlock-freedom by defining cycle-free routes on a set of virtual networks implemented with virtual channels. Cycles can be prevented statically <ref> [1, 2, 3, 4] </ref> or dynamically [5, 6]. Unfortunately, virtual channels can be expensive because they complicate routing decision and channel control, increasing router node delay significantly [7]. Consequently, to achieve adaptive routing with speed comparable to dimension-order routers, more efficient adaptive routing algorithms must be developed. <p> Recently, a number of researchers have developed algorithms to reduce the number of virtual channels required for deadlock prevention in mesh networks. Chien and Kim developed planar-adaptive routing which requires a constant number (three) of virtual channels regardless of network size and dimension <ref> [3] </ref>. Duato developed a theory of deadlock-free adaptive routing which dynamically prevents deadlock while using only two virtual channels [5]. Sanz et al. developed the *-channels routing algorithm which is based on the same concept. <p> Many studies have suggested fault-tolerant adaptive routing algorithms [20, 21, 22], but most of these are applicable only in packet-switched (store-and-forwarding), hypercube networks. Because of their advantages in latency and implementation, the routing community has recently begun to focus on adaptive routing algorithms for wormhole-routed, low-dimensional networks <ref> [2, 4, 3, 23, 24] </ref>. Chien and Kim have extended planar-adaptive routing with misrouting to support fault tolerance [3]. By reconfiguring faults to be a convex region, the remainder of the network can continue to operate. <p> Because of their advantages in latency and implementation, the routing community has recently begun to focus on adaptive routing algorithms for wormhole-routed, low-dimensional networks [2, 4, 3, 23, 24]. Chien and Kim have extended planar-adaptive routing with misrouting to support fault tolerance <ref> [3] </ref>. By reconfiguring faults to be a convex region, the remainder of the network can continue to operate. Gaughan and Yalamanchili enhanced pipelined circuit switching, a variant of wormhole routing, with backtracking to provide fault-tolerance [23].
Reference: [4] <author> W. J. Dally and H. Aoki, </author> <title> "Deadlock-free adaptive routing in multicomputer networks usin g virtual channels," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 4, </volume> <pages> pp. 466-74, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: In fact, the cost of deadlock prevention in adaptive routing networks is one of the factors discouraging its use in commercial massively-parallel machines. Most existing adaptive routing algorithms guarantee deadlock-freedom by defining cycle-free routes on a set of virtual networks implemented with virtual channels. Cycles can be prevented statically <ref> [1, 2, 3, 4] </ref> or dynamically [5, 6]. Unfortunately, virtual channels can be expensive because they complicate routing decision and channel control, increasing router node delay significantly [7]. Consequently, to achieve adaptive routing with speed comparable to dimension-order routers, more efficient adaptive routing algorithms must be developed. <p> Many studies have suggested fault-tolerant adaptive routing algorithms [20, 21, 22], but most of these are applicable only in packet-switched (store-and-forwarding), hypercube networks. Because of their advantages in latency and implementation, the routing community has recently begun to focus on adaptive routing algorithms for wormhole-routed, low-dimensional networks <ref> [2, 4, 3, 23, 24] </ref>. Chien and Kim have extended planar-adaptive routing with misrouting to support fault tolerance [3]. By reconfiguring faults to be a convex region, the remainder of the network can continue to operate. <p> Network interface bandwidth is an important factor affecting the achievable peak-throughput of CR networks. CR outperforms DOR with equal resources on uniform traffic, and because CR includes adaptive routing, it would likely produce an even larger performance difference for non-uniform traffic patterns <ref> [4, 19, 31] </ref>. 6.2 Fault-Tolerant Compressionless Routing Performance In this section, we explore the performance of Fault-tolerant Compressionless Routing (FCR) with a range of fault rates. FCR networks tolerate any transient faults.
Reference: [5] <author> J. Duato, </author> <title> "On the design of deadlock-free adaptive routing algorithms for multicomputers: </title> <booktitle> design methodologies," in Proceedings of Parallel Architectures and Languages Europe, </booktitle> <pages> pp. 390-405, </pages> <year> 1991. </year>
Reference-contexts: Most existing adaptive routing algorithms guarantee deadlock-freedom by defining cycle-free routes on a set of virtual networks implemented with virtual channels. Cycles can be prevented statically [1, 2, 3, 4] or dynamically <ref> [5, 6] </ref>. Unfortunately, virtual channels can be expensive because they complicate routing decision and channel control, increasing router node delay significantly [7]. Consequently, to achieve adaptive routing with speed comparable to dimension-order routers, more efficient adaptive routing algorithms must be developed. <p> Chien and Kim developed planar-adaptive routing which requires a constant number (three) of virtual channels regardless of network size and dimension [3]. Duato developed a theory of deadlock-free adaptive routing which dynamically prevents deadlock while using only two virtual channels <ref> [5] </ref>. Sanz et al. developed the *-channels routing algorithm which is based on the same concept. In addition, Ni and Glass have developed a unique approach to adaptive routing which prevents deadlock without virtual channels by prohibiting turns [19]. <p> Estimating the number of deadlocks that occur is difficult because a deadlock would normally mean the end of any network simulation the entire network will eventually be blocked. To conservatively estimate the number of PDS, we simulated a deadlock-free routing algorithm (Duato's routing algorithm <ref> [5] </ref>) which uses two virtual networks an adaptive one and a deadlock-free deterministic one. During the simulation, we counted the number of times messages needed to use the dimension-order routed virtual channels (to escape deadlock).
Reference: [6] <author> P. Berman, L. Gravano, G. Pifarre, and J. Sanz, </author> <title> "Adaptive deadlock and livelock free routing with all minimal paths in torus networks," </title> <booktitle> in Proceedings of the Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1992. </year>
Reference-contexts: Most existing adaptive routing algorithms guarantee deadlock-freedom by defining cycle-free routes on a set of virtual networks implemented with virtual channels. Cycles can be prevented statically [1, 2, 3, 4] or dynamically <ref> [5, 6] </ref>. Unfortunately, virtual channels can be expensive because they complicate routing decision and channel control, increasing router node delay significantly [7]. Consequently, to achieve adaptive routing with speed comparable to dimension-order routers, more efficient adaptive routing algorithms must be developed.
Reference: [7] <author> A. A. Chien, </author> <title> "A cost and performance model for k-ary n-cube wormhole routers," </title> <booktitle> in Proceedings of Hot Interconnects Workshop, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Cycles can be prevented statically [1, 2, 3, 4] or dynamically [5, 6]. Unfortunately, virtual channels can be expensive because they complicate routing decision and channel control, increasing router node delay significantly <ref> [7] </ref>. Consequently, to achieve adaptive routing with speed comparable to dimension-order routers, more efficient adaptive routing algorithms must be developed. As large-scale massively-parallel systems have been deployed in the field, it has become increasingly clear that fault-tolerance is a critical factor in the design of machines and particularly multiprocessor networks. <p> A recent study of implementation complexity for a variety of adaptive routers shows that virtual channels can reduce the achievable speed of adaptive routers significantly <ref> [7] </ref>. 2.2 Fault Tolerance Beyond improving network utilization, adaptive routing can also support fault tolerance by exploiting redundant paths in the network. Many studies have suggested fault-tolerant adaptive routing algorithms [20, 21, 22], but most of these are applicable only in packet-switched (store-and-forwarding), hypercube networks.
Reference: [8] <author> Intel Corporation, </author> <title> Paragon XP/S Product Overview, </title> <year> 1991. </year>
Reference-contexts: Section 8 discusses related work. Finally, Section 9 concludes the paper, summarizing the results. 2 Background High performance routing networks, the subject of significant study over the last ten years, are in widespread use in parallel machines <ref> [8, 9, 10, 11, 12] </ref>. All of these multicomputer systems use direct networks, meaning that the computing nodes are embedded in the network topology, and as a result, some nodes are closer than others. <p> For exam 4 ple, a number of machines include parity on each physical channel to detect errors, but can do little but kill the process or reboot the machine when an error occurs <ref> [8, 12, 11, 14, 13] </ref>. More aggressive machines support checksums or error correcting codes for each packet on each link [25, 26]. In all of these machines, faulty channels require reconfiguration of the network and machine with loss of some working processors and network channels. <p> The I min calculation requires a few adders and a distance calculator that is also required in any other network interface. This hardware is much simpler than that found in the Meiko CS-2 [16] and perhaps comparable to that found in the Intel Paragon <ref> [8] </ref> and Thinking Machines CM-5 [25]. 5.2 Receiver Implementation 14 for FCR routing. 15 Fig. 8 shows the message reception interface. It receives messages from the router, interpreting PAD, FKILL and flow control information to implement the FCR protocol. The receiver passes assembled messages to the processor.
Reference: [9] <author> NCUBE, </author> <title> Beaverton, Oregon, NCUBE 2 6400 Series Supercomputer: </title> <type> Technical Overview, </type> <year> 1989. </year>
Reference-contexts: Section 8 discusses related work. Finally, Section 9 concludes the paper, summarizing the results. 2 Background High performance routing networks, the subject of significant study over the last ten years, are in widespread use in parallel machines <ref> [8, 9, 10, 11, 12] </ref>. All of these multicomputer systems use direct networks, meaning that the computing nodes are embedded in the network topology, and as a result, some nodes are closer than others.
Reference: [10] <author> G. Alverson, R. Alverson, D. Callahan, B. Koblenz, A. Porterfield, and B. Smith, </author> <title> "Exploiting heterogeneous parallelism on a multithreaded multiprocessor," </title> <booktitle> in Proceedings of the 6th ACM Interational Conference on Supercomputing, </booktitle> <year> 1992. </year> <month> 27 </month>
Reference-contexts: Section 8 discusses related work. Finally, Section 9 concludes the paper, summarizing the results. 2 Background High performance routing networks, the subject of significant study over the last ten years, are in widespread use in parallel machines <ref> [8, 9, 10, 11, 12] </ref>. All of these multicomputer systems use direct networks, meaning that the computing nodes are embedded in the network topology, and as a result, some nodes are closer than others. <p> In addition to use in multicomputers, direct networks are gaining acceptance in shared memory machines such as the MIT Alewife [13], Stanford DASH [14], and Tera Computer's TERA machine <ref> [10] </ref>. Some recent parallel machines such as the Thinking Machines CM5 [15], Meiko CS-2 [16] and Kendall Square Research KSR1 [17] use indirect networks in which computing nodes are separated from networks. In contrast to previous multistage interconnection networks, their hierarchical topologies allow the exploitation of locality.
Reference: [11] <institution> Cray Research, Inc., Eagan, Minnesota 55121, CRAY T3D Software Overview Technical Note, </institution> <year> 1992. </year>
Reference-contexts: Section 8 discusses related work. Finally, Section 9 concludes the paper, summarizing the results. 2 Background High performance routing networks, the subject of significant study over the last ten years, are in widespread use in parallel machines <ref> [8, 9, 10, 11, 12] </ref>. All of these multicomputer systems use direct networks, meaning that the computing nodes are embedded in the network topology, and as a result, some nodes are closer than others. <p> For exam 4 ple, a number of machines include parity on each physical channel to detect errors, but can do little but kill the process or reboot the machine when an error occurs <ref> [8, 12, 11, 14, 13] </ref>. More aggressive machines support checksums or error correcting codes for each packet on each link [25, 26]. In all of these machines, faulty channels require reconfiguration of the network and machine with loss of some working processors and network channels.
Reference: [12] <author> W. J. Dally, A. Chien, S. Fiske, W. Horwat, J. Keen, M. Larivee, R. Lethin, P. Nuth, S. Wills, P. Carrick, and G. Fyler, </author> <title> "The J-Machine: A fine-grain concurrent computer," </title> <booktitle> in Information Processing 89, Proceedings of the IFIP Congress, </booktitle> <pages> pp. 1147-1153, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Section 8 discusses related work. Finally, Section 9 concludes the paper, summarizing the results. 2 Background High performance routing networks, the subject of significant study over the last ten years, are in widespread use in parallel machines <ref> [8, 9, 10, 11, 12] </ref>. All of these multicomputer systems use direct networks, meaning that the computing nodes are embedded in the network topology, and as a result, some nodes are closer than others. <p> For exam 4 ple, a number of machines include parity on each physical channel to detect errors, but can do little but kill the process or reboot the machine when an error occurs <ref> [8, 12, 11, 14, 13] </ref>. More aggressive machines support checksums or error correcting codes for each packet on each link [25, 26]. In all of these machines, faulty channels require reconfiguration of the network and machine with loss of some working processors and network channels.
Reference: [13] <author> A. Agarwal, D. Chaiken, G. D'Souza, K. Johnson, D. Kranz, J. Kubiatowicz, K. Kurihara, B. Lim, G. Maa, D. Nussbaum, M. Parkin, and D. Yeung, </author> <title> "The MIT Alewife machine: A large-scale distributed-memory multiprocessor," </title> <type> LCS-technical memo 454, </type> <institution> Massachusetts Institute of Technology, Laboratory for Computer Science, </institution> <year> 1991. </year>
Reference-contexts: All of these multicomputer systems use direct networks, meaning that the computing nodes are embedded in the network topology, and as a result, some nodes are closer than others. In addition to use in multicomputers, direct networks are gaining acceptance in shared memory machines such as the MIT Alewife <ref> [13] </ref>, Stanford DASH [14], and Tera Computer's TERA machine [10]. Some recent parallel machines such as the Thinking Machines CM5 [15], Meiko CS-2 [16] and Kendall Square Research KSR1 [17] use indirect networks in which computing nodes are separated from networks. <p> For exam 4 ple, a number of machines include parity on each physical channel to detect errors, but can do little but kill the process or reboot the machine when an error occurs <ref> [8, 12, 11, 14, 13] </ref>. More aggressive machines support checksums or error correcting codes for each packet on each link [25, 26]. In all of these machines, faulty channels require reconfiguration of the network and machine with loss of some working processors and network channels.
Reference: [14] <author> D. Lenoski, J. Laudon, K. Gharacharloo, W. Weber, A. Gupta, J. Hennessy, M. Horowitz, and M. Lam, </author> <title> "The Stanford Dash multiprocessor," </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 63-79, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: In addition to use in multicomputers, direct networks are gaining acceptance in shared memory machines such as the MIT Alewife [13], Stanford DASH <ref> [14] </ref>, and Tera Computer's TERA machine [10]. Some recent parallel machines such as the Thinking Machines CM5 [15], Meiko CS-2 [16] and Kendall Square Research KSR1 [17] use indirect networks in which computing nodes are separated from networks. <p> For exam 4 ple, a number of machines include parity on each physical channel to detect errors, but can do little but kill the process or reboot the machine when an error occurs <ref> [8, 12, 11, 14, 13] </ref>. More aggressive machines support checksums or error correcting codes for each packet on each link [25, 26]. In all of these machines, faulty channels require reconfiguration of the network and machine with loss of some working processors and network channels.
Reference: [15] <author> C. Leiserson, Z. Abuhamdeh, D. Douglas, C. Feynman, M. Ganmukhi, J. Hill, W. Hillis, B. Kuszmaul, M. Pierre, D. Wells, M. Wong, S. Yang, and R. Zak, </author> <title> "The network architecture of the Connection Machine CM-5," </title> <booktitle> in Proceedings of the Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1992. </year> <note> Available from ftp://cmns.think.com/doc/Papers/net.ps.Z. </note>
Reference-contexts: In addition to use in multicomputers, direct networks are gaining acceptance in shared memory machines such as the MIT Alewife [13], Stanford DASH [14], and Tera Computer's TERA machine [10]. Some recent parallel machines such as the Thinking Machines CM5 <ref> [15] </ref>, Meiko CS-2 [16] and Kendall Square Research KSR1 [17] use indirect networks in which computing nodes are separated from networks. In contrast to previous multistage interconnection networks, their hierarchical topologies allow the exploitation of locality. Though these networks are also interesting, our studies focus primarily on direct networks.
Reference: [16] <author> Meiko World Incorporated, </author> <title> Meiko Computing Surface Communications Processor Overview, </title> <year> 1993. </year>
Reference-contexts: In addition to use in multicomputers, direct networks are gaining acceptance in shared memory machines such as the MIT Alewife [13], Stanford DASH [14], and Tera Computer's TERA machine [10]. Some recent parallel machines such as the Thinking Machines CM5 [15], Meiko CS-2 <ref> [16] </ref> and Kendall Square Research KSR1 [17] use indirect networks in which computing nodes are separated from networks. In contrast to previous multistage interconnection networks, their hierarchical topologies allow the exploitation of locality. Though these networks are also interesting, our studies focus primarily on direct networks. <p> The I min calculation requires a few adders and a distance calculator that is also required in any other network interface. This hardware is much simpler than that found in the Meiko CS-2 <ref> [16] </ref> and perhaps comparable to that found in the Intel Paragon [8] and Thinking Machines CM-5 [25]. 5.2 Receiver Implementation 14 for FCR routing. 15 Fig. 8 shows the message reception interface. It receives messages from the router, interpreting PAD, FKILL and flow control information to implement the FCR protocol. <p> The network injector hardware overhead may not be a significant impediment to adoption, as this level of support is much less than the network interface hardware already incorporated in machines such as the Meiko CS-2 <ref> [16] </ref>. Network Depth Though shallow networks are generally preferable, some machines will be built with deep networks (large amounts of buffering). There are a variety of reasons for this, but the most important reason is physical channel delay.
Reference: [17] <institution> Kendall Square Research, Waltham, Massachusetts, </institution> <type> KSR Technical Summary, </type> <year> 1992. </year>
Reference-contexts: In addition to use in multicomputers, direct networks are gaining acceptance in shared memory machines such as the MIT Alewife [13], Stanford DASH [14], and Tera Computer's TERA machine [10]. Some recent parallel machines such as the Thinking Machines CM5 [15], Meiko CS-2 [16] and Kendall Square Research KSR1 <ref> [17] </ref> use indirect networks in which computing nodes are separated from networks. In contrast to previous multistage interconnection networks, their hierarchical topologies allow the exploitation of locality. Though these networks are also interesting, our studies focus primarily on direct networks.
Reference: [18] <author> P. Kermani and L. Kleinrock, </author> <title> "Virtual cut-through: A new computer communications switching technique," </title> <journal> Computer Networks, </journal> <volume> vol. 3, no. 4, </volume> <pages> pp. 267-86, </pages> <year> 1979. </year>
Reference-contexts: In contrast to previous multistage interconnection networks, their hierarchical topologies allow the exploitation of locality. Though these networks are also interesting, our studies focus primarily on direct networks. Many of these networks use cut-through or wormhole routing <ref> [18, 1] </ref>, a technique which reduces message latency by pipelining its transmission over a number of channels along its path. A packet is divided into multiple flits, flow control units. Routing information is stored in the first flit, called the header flit.
Reference: [19] <author> L. Ni and C. Glass, </author> <title> "The turn model for adaptive routing," </title> <booktitle> in Proceedings of the International Symposium on Computer Architecture, </booktitle> <pages> pp. 278-87, </pages> <year> 1992. </year>
Reference-contexts: Sanz et al. developed the *-channels routing algorithm which is based on the same concept. In addition, Ni and Glass have developed a unique approach to adaptive routing which prevents deadlock without virtual channels by prohibiting turns <ref> [19] </ref>. However, this approach only works for meshes; in tori (meshes with wraparounds), additional virtual channels are required for deadlock prevention. Though each novel routing algorithm reduced the virtual channel requirements for deadlock prevention, their virtual channel requirements can have a significant impact on router complexity. <p> Network interface bandwidth is an important factor affecting the achievable peak-throughput of CR networks. CR outperforms DOR with equal resources on uniform traffic, and because CR includes adaptive routing, it would likely produce an even larger performance difference for non-uniform traffic patterns <ref> [4, 19, 31] </ref>. 6.2 Fault-Tolerant Compressionless Routing Performance In this section, we explore the performance of Fault-tolerant Compressionless Routing (FCR) with a range of fault rates. FCR networks tolerate any transient faults.
Reference: [20] <author> J. M. Gordon and Q. F. Stout, </author> <title> "Hypercube message routing in the presence of faults," </title> <booktitle> in Proceedings of the 3rd Conference on Hypercube Concurrent Computers and Applications, </booktitle> <year> 1988. </year>
Reference-contexts: Many studies have suggested fault-tolerant adaptive routing algorithms <ref> [20, 21, 22] </ref>, but most of these are applicable only in packet-switched (store-and-forwarding), hypercube networks. Because of their advantages in latency and implementation, the routing community has recently begun to focus on adaptive routing algorithms for wormhole-routed, low-dimensional networks [2, 4, 3, 23, 24].
Reference: [21] <author> E. Chow, H. S. Madan, J. C. Peterson, D. Grunwald, and D. Reed, </author> <title> "Hyperswitch network for the hypercube computer," </title> <booktitle> in Proceedings of the 15th Annual Symposium on Computer Architecture, </booktitle> <year> 1988. </year>
Reference-contexts: Many studies have suggested fault-tolerant adaptive routing algorithms <ref> [20, 21, 22] </ref>, but most of these are applicable only in packet-switched (store-and-forwarding), hypercube networks. Because of their advantages in latency and implementation, the routing community has recently begun to focus on adaptive routing algorithms for wormhole-routed, low-dimensional networks [2, 4, 3, 23, 24].
Reference: [22] <author> M. S. Chen and K. G. Shin, </author> <title> "Adaptive fault-tolerant routing in hypercube multicomputers," </title> <journal> IEEE Transactions on Computers, </journal> <month> December </month> <year> 1990. </year>
Reference-contexts: Many studies have suggested fault-tolerant adaptive routing algorithms <ref> [20, 21, 22] </ref>, but most of these are applicable only in packet-switched (store-and-forwarding), hypercube networks. Because of their advantages in latency and implementation, the routing community has recently begun to focus on adaptive routing algorithms for wormhole-routed, low-dimensional networks [2, 4, 3, 23, 24].
Reference: [23] <author> P. Gaughan and S. Yalamanchili, </author> <title> "Pipelined circuit-switching: A fault-tolerant variant of wormhole routing," </title> <booktitle> in Proceedings of Symposium on Parallel and Distributed Processing, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: Many studies have suggested fault-tolerant adaptive routing algorithms [20, 21, 22], but most of these are applicable only in packet-switched (store-and-forwarding), hypercube networks. Because of their advantages in latency and implementation, the routing community has recently begun to focus on adaptive routing algorithms for wormhole-routed, low-dimensional networks <ref> [2, 4, 3, 23, 24] </ref>. Chien and Kim have extended planar-adaptive routing with misrouting to support fault tolerance [3]. By reconfiguring faults to be a convex region, the remainder of the network can continue to operate. <p> Chien and Kim have extended planar-adaptive routing with misrouting to support fault tolerance [3]. By reconfiguring faults to be a convex region, the remainder of the network can continue to operate. Gaughan and Yalamanchili enhanced pipelined circuit switching, a variant of wormhole routing, with backtracking to provide fault-tolerance <ref> [23] </ref>. Both of these routing algorithms can tolerate a large number of network faults, but address only fault-tolerant routing, routing around permanent and static faults, not fault-tolerant communication. In general, fault-tolerant communication requires the tolerance of transient faults as well.
Reference: [24] <author> C. Glass and L. Ni, </author> <title> "Fault-tolerant wormhole routing in meshes," </title> <booktitle> in Proceedings of International Symposium on Fault Tolerant Computing, </booktitle> <year> 1993. </year>
Reference-contexts: Many studies have suggested fault-tolerant adaptive routing algorithms [20, 21, 22], but most of these are applicable only in packet-switched (store-and-forwarding), hypercube networks. Because of their advantages in latency and implementation, the routing community has recently begun to focus on adaptive routing algorithms for wormhole-routed, low-dimensional networks <ref> [2, 4, 3, 23, 24] </ref>. Chien and Kim have extended planar-adaptive routing with misrouting to support fault tolerance [3]. By reconfiguring faults to be a convex region, the remainder of the network can continue to operate.
Reference: [25] <institution> Thinking Machines Corporation, </institution> <address> 245 First Street, Cambridge, MA 02154-1264, </address> <booktitle> The Connection Machine CM-5 Technical Summary, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: More aggressive machines support checksums or error correcting codes for each packet on each link <ref> [25, 26] </ref>. In all of these machines, faulty channels require reconfiguration of the network and machine with loss of some working processors and network channels. Generally, data errors cannot be corrected, so the software must layer a retransmission protocol above the hardware to ensure reliable delivery. <p> The I min calculation requires a few adders and a distance calculator that is also required in any other network interface. This hardware is much simpler than that found in the Meiko CS-2 [16] and perhaps comparable to that found in the Intel Paragon [8] and Thinking Machines CM-5 <ref> [25] </ref>. 5.2 Receiver Implementation 14 for FCR routing. 15 Fig. 8 shows the message reception interface. It receives messages from the router, interpreting PAD, FKILL and flow control information to implement the FCR protocol. The receiver passes assembled messages to the processor.
Reference: [26] <author> M. Snir, </author> <title> "The Vulcan project." Oral Presentation, </title> <month> February </month> <year> 1992. </year>
Reference-contexts: More aggressive machines support checksums or error correcting codes for each packet on each link <ref> [25, 26] </ref>. In all of these machines, faulty channels require reconfiguration of the network and machine with loss of some working processors and network channels. Generally, data errors cannot be corrected, so the software must layer a retransmission protocol above the hardware to ensure reliable delivery.
Reference: [27] <author> R. Metcalfe and D. Boggs, </author> <title> "Ethernet: Distributed packet-switching for local computer networks," </title> <journal> Communications of the Association for Computing Machinery, </journal> <volume> vol. 19, no. 7, </volume> <pages> pp. 395-404, </pages> <year> 1976. </year>
Reference-contexts: It is, of course, quite similar to the binary exponential backoff used in Ethernet networks <ref> [27] </ref>. Fig. 11 compares average message latency for several different static retransmission time gaps to the dynamic scheme. The timeout for message kills is fixed at 32 cycles. The dashed lines are the static schemes and the solid line is the dynamic scheme.
Reference: [28] <author> W. J. Dally and C. Seitz, </author> <title> "The torus routing chip," </title> <booktitle> Distributed Computing, </booktitle> <pages> pp. 187-196, </pages> <year> 1986. </year>
Reference-contexts: For a dimension-order routing (DOR) networks, buffer resources are organized as deep FIFO buffers and/or multiple virtual lanes. In a torus, a DOR router requires two virtual channels for deadlock prevention, which are used to break channel dependency cycles at wraparound channels as suggested in <ref> [28] </ref>. Additional virtual channels are used as virtual lanes [29]. For CR networks, we vary the number of virtual channels while fixing the buffer depth of each virtual channel at two flits.
Reference: [29] <author> W. J. Dally, </author> <title> "Virtual channel flow control," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 194-205, </pages> <year> 1992. </year>
Reference-contexts: In a torus, a DOR router requires two virtual channels for deadlock prevention, which are used to break channel dependency cycles at wraparound channels as suggested in [28]. Additional virtual channels are used as virtual lanes <ref> [29] </ref>. For CR networks, we vary the number of virtual channels while fixing the buffer depth of each virtual channel at two flits. This is the right way to organize buffers for CR because increasing buffer depth only increases padding overhead without performance gain. <p> For instance, with equally given two virtual channels, a CR network with 2-flit deep buffers matches the performance of a DOR network with 16-flit deep buffers. Figs. 14-(c) and (d) compare CR and DOR's performance for a range of virtual channels. A previous study <ref> [29] </ref> showed that virtual channels provide more performance benefit than deep FIFO buffers. In the simulations, the DOR networks are given a fixed amount of total buffer space, so more virtual channels mean a lower buffer depth. <p> When more buffering capacity is added to improve network throughput, it can be organized as virtual channels <ref> [29] </ref>. Since CR depends only on the distance in flits, padding overhead is independent of the number of virtual channels. Delivery Guarantee and Latency Distribution While the retransmission mechanism in CR completely eliminates the possibility of deadlock, no explicit mechanism was provided to guarantee completion of each communication.
Reference: [30] <author> S. Borkar, R. Cohn, G. Cox, T. Gross, H. T. Kung, M. Lam, M. Levine, B. Moore, W. Moore, C. Peter-son, J. Susman, J. Sutton, J. Urbanski, and J. Webb, </author> <title> "Supporting systolic and memory communication in iWarp," </title> <booktitle> in Proceedings of the 17th International Symposium on Computer Architecture, </booktitle> <pages> pp. 70-81, </pages> <publisher> IEEE Computer Society, </publisher> <year> 1990. </year>
Reference-contexts: Figs. 14-(e) and (f) show that, when enough source and sink bandwidth is provided, 9 The importance of interface bandwidth has been observed by other researchers and the multichannel interface was actually used in the design of the Intel iWARP <ref> [30] </ref>. 21 (a) (b) (e) (f) allocation. A single source and a single sink channel are used for (a)-(d), and multiple source and sink channels are used for (e)-(f). For CR, timeout = (message length) fi (the number of virtual channels).
Reference: [31] <author> J. H. Kim and A. A. Chien, </author> <title> "An evaluation of planar-adaptive routing (par)," </title> <booktitle> in Proceedings of the Fourth Symposium on Parallel and Distributed Processing, </booktitle> <pages> pp. 470-78, </pages> <month> December </month> <year> 1992. </year> <month> 28 </month>
Reference-contexts: Network interface bandwidth is an important factor affecting the achievable peak-throughput of CR networks. CR outperforms DOR with equal resources on uniform traffic, and because CR includes adaptive routing, it would likely produce an even larger performance difference for non-uniform traffic patterns <ref> [4, 19, 31] </ref>. 6.2 Fault-Tolerant Compressionless Routing Performance In this section, we explore the performance of Fault-tolerant Compressionless Routing (FCR) with a range of fault rates. FCR networks tolerate any transient faults.
Reference: [32] <author> J. H. Kim and A. A. Chien, </author> <title> "Network performance under bimodal traffic loads," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 28, </volume> <pages> pp. 43-64, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: In our simulations this never happened, but repeated kills can give some messages much larger latencies, increasing the variance of message latency. A variety of techniques for modeling and reducing this variance are described in <ref> [32] </ref>. Alternate Timeout Schemes There are a number of possible variations on CR timeout schemes. We have explored several of these and chose a source-based timeout scheme which uses hardware at the source (injector) to identify potential deadlock situations.
Reference: [33] <author> D. Reeves, E. Gehringer, and A. Chandiramani, </author> <title> "Adaptive routing and deadlock recovery: A simulation study," </title> <booktitle> in Proceedings of the 4th Conference on Hypercube Concurrent Computers and Applications, </booktitle> <year> 1989. </year>
Reference-contexts: Consequently, the path-wide schemes produce unnecessary message kills, providing inferior performance. 25 8 Related Work The most closely related work is a study on abort-and-retry routing which explored the idea of detecting possible deadlock situations and canceling switch connections <ref> [33] </ref>. Our work on Com-pressionless Routing extends that work, providing a practical framework for adaptive wormhole and fault-tolerant routing. The major extensions include support of arbitrary topologies, order preserving transmission, end-to-end flow control, and fault tolerance.
Reference: [34] <institution> BBN Advanced Computers, Inc., Butterfly Products Overview, </institution> <month> October </month> <year> 1987. </year>
Reference-contexts: The major extensions include support of arbitrary topologies, order preserving transmission, end-to-end flow control, and fault tolerance. The basic technique used in Compressionless Routing, drop-at-block is not new; machines as early as the BBN Butterfly <ref> [34] </ref> and network designs such as the MIT Transit [35] use similar techniques. The BBN Butterfly network resolves message conflicts by dropping blocked messages. The switch which discards messages initiates a reject signal that tears down the path. The sender retransmits the message some time later.
Reference: [35] <author> T. F. Knight, </author> <title> "Technologies for low latency interconnection switches," </title> <booktitle> in Proceedings of ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1989. </year>
Reference-contexts: The major extensions include support of arbitrary topologies, order preserving transmission, end-to-end flow control, and fault tolerance. The basic technique used in Compressionless Routing, drop-at-block is not new; machines as early as the BBN Butterfly [34] and network designs such as the MIT Transit <ref> [35] </ref> use similar techniques. The BBN Butterfly network resolves message conflicts by dropping blocked messages. The switch which discards messages initiates a reject signal that tears down the path. The sender retransmits the message some time later. The dropping strategy can improve network utilization by eliminating secondary conflicts. <p> Third, CR eliminates the need for acknowledgements by exploiting the underlying hardware handshakes for flow control. In previous schemes, each message requires a positive acknowledgement for buffer management or fault tolerance. Other mechanisms which provide hardware acknowledgements <ref> [36, 35] </ref> have been proposed, but they all consume substantial network bandwidth. 9 Summary We have presented Compressionless Routing, a combined framework for efficient deadlock-free routing and fault-tolerant communication.
Reference: [36] <author> C. F. Joerg, </author> <title> "Design and implementation of a packet switched routing chip," </title> <type> Master's thesis, </type> <institution> Mas-sachusetts Institute of Technology, </institution> <year> 1990. </year> <note> MIT/LCS/TR-482. 29 </note>
Reference-contexts: Third, CR eliminates the need for acknowledgements by exploiting the underlying hardware handshakes for flow control. In previous schemes, each message requires a positive acknowledgement for buffer management or fault tolerance. Other mechanisms which provide hardware acknowledgements <ref> [36, 35] </ref> have been proposed, but they all consume substantial network bandwidth. 9 Summary We have presented Compressionless Routing, a combined framework for efficient deadlock-free routing and fault-tolerant communication.
References-found: 36

