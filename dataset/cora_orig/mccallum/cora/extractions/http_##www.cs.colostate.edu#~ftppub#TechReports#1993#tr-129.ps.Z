URL: http://www.cs.colostate.edu/~ftppub/TechReports/1993/tr-129.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Title: Competencies of Exceptional and Non-Exceptional Software  
Author: Engineers 
Affiliation: Department of Computer Science  Colorado State University  
Abstract: Richard T. Turley and James M. Bieman Technical Report CS-93-129 October 26, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Kaelley and J. Caplan. </author> <title> How Bell Labs creates star performers. </title> <journal> Harvard Business Review, </journal> <volume> 71(4) </volume> <pages> 128-139, </pages> <month> July-August </month> <year> 1993. </year>
Reference-contexts: These unique skills can be identified by careful study of experienced software engineers. Further, once these skills are recognized, we hope that they can be transferred to the software engineering community at large through formal training programs <ref> [1] </ref>. Thus, additional software engineers can be taught these valuable skills. Our overall goal is to identify the skills, techniques, and attributes that differentiate between exceptional and non-exceptional software engineering performance. <p> In order to create the tests the researcher must know which skills are necessary to achieve competent performance in a particular job. The aim of our study is to uncover these competencies. Kelley and Caplan's development of a training program for Bell Laboratories is especially relevant <ref> [1] </ref>. They compared top performers to average workers at Bell Labs. Like our study, the top performers were those identified as "stars" by managers, but top performers also had to also be identified as stars by their peers.
Reference: [2] <author> B. Boehm. </author> <title> Software Engineering Economics. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1981. </year>
Reference-contexts: But the overwhelming determiner of software productivity and quality is still personnel and team capability. Boehm found personnel and team capability to be twice as important as the next most important productivity factor <ref> [2] </ref>. By studying exceptional programmers, the individual capabilities that most influence performance can be identified [3]. Most research into the development of software focuses on the individual only to the extent that individuals are members of a larger development effort.
Reference: [3] <author> B. Curtis. </author> <title> Substantiating programmer variablility. </title> <booktitle> Proc. of the IEEE, </booktitle> <address> 69(7):846, </address> <month> July </month> <year> 1981. </year>
Reference-contexts: But the overwhelming determiner of software productivity and quality is still personnel and team capability. Boehm found personnel and team capability to be twice as important as the next most important productivity factor [2]. By studying exceptional programmers, the individual capabilities that most influence performance can be identified <ref> [3] </ref>. Most research into the development of software focuses on the individual only to the extent that individuals are members of a larger development effort.
Reference: [4] <author> G.M. Weinberg. </author> <title> The Psychology of Computer Programming. </title> <publisher> Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1971. </year>
Reference-contexts: Although the team is a critical component in software development, most research misses a fundamental opportunity to identify and exploit the proven ability of highly talented individual contributors. Weinberg noted the lack of research on individuals observing that "Our profession suffers under an enormous burden of myths and half-truths." <ref> [4] </ref>. The industry has a great lore about the factors affecting software productivity, but few facts are known. Bohem also cites a 25-to-1 ratio between the most productive and least productive software developers and a 10-to-1 difference in their error rates [5].
Reference: [5] <author> B. Boehm. </author> <title> Understanding and controlling software costs. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 14(10) </volume> <pages> 1462-1477, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: The industry has a great lore about the factors affecting software productivity, but few facts are known. Bohem also cites a 25-to-1 ratio between the most productive and least productive software developers and a 10-to-1 difference in their error rates <ref> [5] </ref>.
Reference: [6] <author> F. Brooks, Jr. </author> <title> No silver bullet: </title> <journal> Essence and accidents of software engineering. IEEE Computer, </journal> <volume> 20(4) </volume> <pages> 10-19, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: Brooks suggests the "use of great designers" as one of five promising approaches to improve software development productivity <ref> [6] </ref>. One of Boehm's seven basic principles of software engineering is to use "better and fewer people" [7]. Typical experimental approaches to studying individuals in software development start with an individual's experience and prejudices about software development [8]. A technique for improvement is proposed, implemented and tested [9, 10].
Reference: [7] <author> B. Boehm. </author> <title> Seven basic principles of software engineering. </title> <journal> The Journal of Systems and Software, </journal> <volume> 3(1) </volume> <pages> 3-24, </pages> <month> January </month> <year> 1983. </year>
Reference-contexts: Brooks suggests the "use of great designers" as one of five promising approaches to improve software development productivity [6]. One of Boehm's seven basic principles of software engineering is to use "better and fewer people" <ref> [7] </ref>. Typical experimental approaches to studying individuals in software development start with an individual's experience and prejudices about software development [8]. A technique for improvement is proposed, implemented and tested [9, 10]. The results of these experiments are then analyzed and often valuable results are achieved.
Reference: [8] <author> F. Brooks, Jr. </author> <title> The Mythical Man-Month. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1975. </year>
Reference-contexts: One of Boehm's seven basic principles of software engineering is to use "better and fewer people" [7]. Typical experimental approaches to studying individuals in software development start with an individual's experience and prejudices about software development <ref> [8] </ref>. A technique for improvement is proposed, implemented and tested [9, 10]. The results of these experiments are then analyzed and often valuable results are achieved. This study follows a different approach. We start with professional software developers who are acknowledged for their software ability.
Reference: [9] <author> B. Shneiderman. </author> <title> Exploratory experiments in programmer behavior. </title> <journal> Int. Journal of Computer and Information Sciences, </journal> <volume> 5(2) </volume> <pages> 123-143, </pages> <year> 1976. </year>
Reference-contexts: One of Boehm's seven basic principles of software engineering is to use "better and fewer people" [7]. Typical experimental approaches to studying individuals in software development start with an individual's experience and prejudices about software development [8]. A technique for improvement is proposed, implemented and tested <ref> [9, 10] </ref>. The results of these experiments are then analyzed and often valuable results are achieved. This study follows a different approach. We start with professional software developers who are acknowledged for their software ability. Our focus on the top individual contributors breaks with the traditional emphasis on the team.
Reference: [10] <author> B. Curtis, S. B. Sheppard, and P. Milliman. </author> <title> Third time charm: Stronger prediction of programmer performance by software complexity metrics. </title> <booktitle> Proc. 4th Int. Conf. on Software Engineering (ICSE-4), </booktitle> <pages> pages 356-360, </pages> <year> 1979. </year>
Reference-contexts: One of Boehm's seven basic principles of software engineering is to use "better and fewer people" [7]. Typical experimental approaches to studying individuals in software development start with an individual's experience and prejudices about software development [8]. A technique for improvement is proposed, implemented and tested <ref> [9, 10] </ref>. The results of these experiments are then analyzed and often valuable results are achieved. This study follows a different approach. We start with professional software developers who are acknowledged for their software ability. Our focus on the top individual contributors breaks with the traditional emphasis on the team.
Reference: [11] <author> R. Turley. </author> <title> Essential Competencies of Exceptional Professional Software Engineers. </title> <type> PhD thesis, </type> <institution> Colorado State University, </institution> <address> Ft. Collins, CO, </address> <year> 1991. </year> <month> 26 </month>
Reference-contexts: Our aim is to determine the attributes that are necessary for exceptional performance, so that the performance of all software engineers can be improved. We report the results from a two phase study designed to determine the essential competencies of professional software engineers <ref> [11] </ref>. In Phase 1 we identify these competencies via the Critical Incident Interview technique. <p> For complete a description of all of the identified competencies see <ref> [11] </ref>. 3 Phase 2 In Phase 2, we use the identified competencies, larger samples, and objective survey instruments to detect significant differences between exceptional and non-exceptional software engineers.
Reference: [12] <author> I.B. Myers and M.H. McCaulley. </author> <title> A Guide to the Development and Use of the Myers-Briggs Type Indicator (R) . Consulting Psychologists Press, </title> <address> Palo Alto, CA, </address> <year> 1985. </year>
Reference-contexts: We use a biographical questionnaire and a Meyers-Briggs Type Indicator (MBTI) test <ref> [12] </ref> to characterize our sample. We conduct Critical Incident Interviews to identify the significant competencies of software engineering. 2.1 Phase 1 Subjects Subjects are drawn from five commercial research and development laboratories at three different sites of a single company. <p> the weakness of the identified differences. 4 (n=20) Years at Company Mean Std Range in Software Dev Exceptional 9.05 3.59 4-15 Non-Exceptional 5.00 1.75 2-7.5 Table 2: Years at Company in Software | Differential 2.3 Myers-Briggs Cognitive Style Type Indicator (MBTI) The MBTI is a tool for determining psychological type <ref> [12, 15] </ref>. We use it to determine if type differences exist between exceptional and non-exceptional engineers. <p> The four preferences are assumed to interact in complex nonlinear ways to produce one of 16 psychological types with different attributes [17]. The MBTI can provide a continuous score for each of the four preference scales allowing for statistical analysis of significant differences <ref> [12] </ref>. A detailed description of the MBTI appears in [15]. All 20 subjects completed the Myers-Briggs Type Indicator (MBTI) test. Figure 1 shows the distribution of the Phase 1 study participants according to one of 16 personality types. Eighteen out of twenty subjects exhibit the Introvert type. <p> We also found a that 17 out of 20 subjects exhibited the Thinking type (rather than Feeling type). This result is consistent with broader studies that find that computer specialists exhibit the thinking preference 67% of the time <ref> [12] </ref>. The MBTI test uncovered an interesting tendency for exceptional engineers to favor the Introvert, Thinking type. The most frequent classification for exceptional performers is the INTJ (Introvert, Intuitive, Thinking, Judging) type. The INTJ type occurs in only 10% of the male college graduates [12]. <p> thinking preference 67% of the time <ref> [12] </ref>. The MBTI test uncovered an interesting tendency for exceptional engineers to favor the Introvert, Thinking type. The most frequent classification for exceptional performers is the INTJ (Introvert, Intuitive, Thinking, Judging) type. The INTJ type occurs in only 10% of the male college graduates [12]. Hence these exceptional engineers differ from the (male) population at large. 1 Only one of the exceptional engineers is classified as an Extrovert type. The non-exceptional engineers exhibited more varied personality types. Only two of the non-exceptional engineers exhibited the INTJ type. <p> This indicates that either personally type is not a good predictor of performance or that the sample size is too small. 1 The data given by Myers and McCaulley <ref> [12] </ref> is unfortunately limited to males. 5 Sensing Types Intuitive Types With Thinking With Feeling With Feeling With Thinking ISTJ ISFJ INFJ INTJ Introvert 3|| | | || Judging 33333 ISTP ISFP INFP INTP Introvert 33| 3 || Perceptive ESTP ESFP ENFP ENTP Extrovert | Perceptive ESTJ ESFJ ENFJ ENTJ Extrovert
Reference: [13] <author> I. Vessey. </author> <title> Expertise in debugging computer programs: A process analysis. </title> <journal> Int. J. Man-Machine Studies, </journal> <volume> 23 </volume> <pages> 459-494, </pages> <year> 1985. </year>
Reference-contexts: As a result of this process, manager bias is an inherent part of the research design. Exceptional software engineers are those identified as exceptional by managers. Vessey also used manager assessment as a method (the "ex ante" method) for identifying experts <ref> [13] </ref>. Conducting Critical Incident Interviews is quite labor intensive. As a result, the sample size is fairly small. With this sample we are able to perform an evaluation giving us a rich set of qualitative information.
Reference: [14] <author> A. Pearl, M. Pollack, E. Riskin, B. Thomas, E. Wolf, and A. Wu. </author> <title> Becoming a computer scientist. </title> <journal> Communications of the ACM, </journal> <volume> 33(11) </volume> <pages> 47-57, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The questionnaire requests information concerning education, on the job training, experience, languages used, and methods employed. We find that: * 75% of the subjects are male; 25% are female. The 3 to 1 ratio is consistent with published reports that women constitute only 30% of the employed computer scientists <ref> [14] </ref>. * The mean age of the subjects is 33.45 years. * The mean number of degrees held is 1.6. 65% of the subject hold a Bachelors degree as the highest degree, 30% hold a Masters degree, and one subject (5%) earned a Ph.D. * The mean number of training hours
Reference: [15] <author> B. Shneiderman. </author> <title> Software Psychology: </title> <booktitle> Human Factors in Computer and Information Systems. </booktitle> <publisher> Winthrop Publishers, </publisher> <address> Cambridge, MA, </address> <year> 1980. </year>
Reference-contexts: the weakness of the identified differences. 4 (n=20) Years at Company Mean Std Range in Software Dev Exceptional 9.05 3.59 4-15 Non-Exceptional 5.00 1.75 2-7.5 Table 2: Years at Company in Software | Differential 2.3 Myers-Briggs Cognitive Style Type Indicator (MBTI) The MBTI is a tool for determining psychological type <ref> [12, 15] </ref>. We use it to determine if type differences exist between exceptional and non-exceptional engineers. <p> The MBTI can provide a continuous score for each of the four preference scales allowing for statistical analysis of significant differences [12]. A detailed description of the MBTI appears in <ref> [15] </ref>. All 20 subjects completed the Myers-Briggs Type Indicator (MBTI) test. Figure 1 shows the distribution of the Phase 1 study participants according to one of 16 personality types. Eighteen out of twenty subjects exhibit the Introvert type. <p> not? This question is beyond the scope of this research, but indicates a significant direction for future research. 5 Related Work Approaches for behavior-oriented software engineering research generally lie along a continuum between tightly controlled experiments (often with limited generality) and more broadly defined studies which stress qualitative psychological techniques <ref> [15, 27, 28, 29, 30] </ref>. The bulk of the research to date favors the tightly controlled experimental approach. Studies seeking to correlate easily measured a priori factors with programmer performance have shown mixed results.
Reference: [16] <institution> Buros Institute of Mental Measurement. </institution> <note> The 10th Annual Mental Measurements Yearbook. </note> <institution> University of Nebraska, Lincoln, NE, </institution> <year> 1989. </year>
Reference-contexts: MBTI computes a score for four contrasting personality pairs: * extrovert vs. introvert * sensing vs. intuitive * thinking vs. feeling * judging vs. perceptive The purpose of the MBTI is to identify, from self-report of easily recognized reactions, the basic preferences of people with regard to perception and judgement <ref> [16] </ref>. The four preferences are assumed to interact in complex nonlinear ways to produce one of 16 psychological types with different attributes [17]. The MBTI can provide a continuous score for each of the four preference scales allowing for statistical analysis of significant differences [12].
Reference: [17] <author> O. Isachsen and L. Berens. </author> <title> Working Together A Personality-Centered Approach to Management. </title> <publisher> Neworld Management Press, </publisher> <address> Coronado, CA, </address> <year> 1988. </year>
Reference-contexts: The four preferences are assumed to interact in complex nonlinear ways to produce one of 16 psychological types with different attributes <ref> [17] </ref>. The MBTI can provide a continuous score for each of the four preference scales allowing for statistical analysis of significant differences [12]. A detailed description of the MBTI appears in [15]. All 20 subjects completed the Myers-Briggs Type Indicator (MBTI) test.
Reference: [18] <author> D.M. Kagan and J.M. Douthat. </author> <title> Personality and learning Fortran. </title> <journal> Int. Journal of Man-Machine Studies, </journal> <volume> 22 </volume> <pages> 395-402, </pages> <year> 1985. </year>
Reference-contexts: Eighteen out of twenty subjects exhibit the Introvert type. The Introvert tendency is consistent with the Kagan-Douthat study of students learning Fortran which found a tendency towards introversion in higher performing programming students <ref> [18] </ref>. We also found a that 17 out of 20 subjects exhibited the Thinking type (rather than Feeling type). This result is consistent with broader studies that find that computer specialists exhibit the thinking preference 67% of the time [12]. <p> Thus, the significance of the results from the observational studies have not been demonstrated. Student programmers are common subjects for studies of programmer behavior. Kagan and Douthat used extensive psychological testing to predict student performance <ref> [18] </ref>. They found a relationship between introversion and final success in an introductory Fortran class of 326 students.
Reference: [19] <author> Hewlett-Packard Company, </author> <title> Corporate Training and Development. The Horizon Project, </title> <month> Oc-tober </month> <year> 1989. </year>
Reference-contexts: Each interview was tape-recorded, and the recordings were transcribed for later use. The interviews began with casual conversation followed by a description of the scope of the research and the general flow of the interview. The interview followed the basic structure and practices defined in <ref> [19] </ref>.
Reference: [20] <author> J. Flanagan. </author> <title> The critical incident technique. </title> <journal> Psychological Bulletin, </journal> <volume> 51(4) </volume> <pages> 327-358, </pages> <month> July </month> <year> 1954. </year>
Reference-contexts: discussion of the subject's incidents, the subject was asked to describe the list of essential competencies for an exceptional software engineer. 2.5 Analysis of Critical Incident Interviews The Critical Incident Technique attempts to discover the critical job requirements that have been demonstrated to make a difference between success and failure <ref> [20] </ref>. The technique was introduced during World War II in the Aviation Psychology Program to study combat leadership and pilot disorientation. The technique has since been refined and applied to measures of performance, measures of proficiency, training, selection, job design, equipment design, and leadership.
Reference: [21] <author> K.A. Ericsson and H.A. Simon. </author> <title> Protocol Analysis: Verbal Reports as Data. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1984. </year>
Reference-contexts: The technique has since been refined and applied to measures of performance, measures of proficiency, training, selection, job design, equipment design, and leadership. Protocol Analysis is used to translate the verbatim copy of an interview to a generalized set of cross-transcript results <ref> [21] </ref>. A formal process provides a record of the analysis and allows identified relations to be tied to specific utterances in the original transcripts [22, 23]. We used the Protocol Analysis technique described by McCracken [23].
Reference: [22] <author> R. Weber. </author> <title> Basic Content Analysis, Sage University Paper Series on Quantitative Applications in the Social Sciences, Vol 49. </title> <publisher> Sage Publications, </publisher> <address> Newbury Park, CA, </address> <year> 1985. </year>
Reference-contexts: Protocol Analysis is used to translate the verbatim copy of an interview to a generalized set of cross-transcript results [21]. A formal process provides a record of the analysis and allows identified relations to be tied to specific utterances in the original transcripts <ref> [22, 23] </ref>. We used the Protocol Analysis technique described by McCracken [23]. Each written transcript was reviewed and highlighted to identify tasks, incidents, competencies, self-described skills, and identified competencies for exceptional performance. Each transcript was reviewed individually to identify consistent themes which could be generalized as competencies for that individual.
Reference: [23] <author> G. </author> <title> McCracken. The Long Interview, </title> <journal> Sage University Paper Series on Qualitative Research Methods, </journal> <volume> Vol 13. </volume> <publisher> Sage Publications, </publisher> <address> Newbury Park, CA, </address> <year> 1988. </year>
Reference-contexts: Protocol Analysis is used to translate the verbatim copy of an interview to a generalized set of cross-transcript results [21]. A formal process provides a record of the analysis and allows identified relations to be tied to specific utterances in the original transcripts <ref> [22, 23] </ref>. We used the Protocol Analysis technique described by McCracken [23]. Each written transcript was reviewed and highlighted to identify tasks, incidents, competencies, self-described skills, and identified competencies for exceptional performance. Each transcript was reviewed individually to identify consistent themes which could be generalized as competencies for that individual. <p> A formal process provides a record of the analysis and allows identified relations to be tied to specific utterances in the original transcripts [22, 23]. We used the Protocol Analysis technique described by McCracken <ref> [23] </ref>. Each written transcript was reviewed and highlighted to identify tasks, incidents, competencies, self-described skills, and identified competencies for exceptional performance. Each transcript was reviewed individually to identify consistent themes which could be generalized as competencies for that individual.
Reference: [24] <author> B. McKeown and D. Thomas. </author> <title> Q Methodology, Sage University Paper Series on Quantitative Analysis in the Social Sciences, Series Number 07-066. </title> <publisher> Sage Publications, </publisher> <address> Beverly Hills, CA, </address> <year> 1988. </year>
Reference-contexts: Q Methodology encompasses the Q-Sorting Technique, which is designed to provide practical means for subjects to sort and researchers to analyze large lists of items <ref> [24] </ref>. The method stresses the individual's perception of value in a set of statements as the actual data under study. The technique has a long history being first promoted by Stephenson in the 1930's. His text continues to be a significant reference on the technique [25].
Reference: [25] <author> W. Stephenson. </author> <title> The Study of Behavior: Q-Technique and Its Methodology. </title> <publisher> University of Chicago Press, </publisher> <address> Chicago, </address> <year> 1953. </year>
Reference-contexts: The method stresses the individual's perception of value in a set of statements as the actual data under study. The technique has a long history being first promoted by Stephenson in the 1930's. His text continues to be a significant reference on the technique <ref> [25] </ref>. Using Q-Sort, a subject is asked to rank order a set of items against a specific condition of instruction. The ordering is quasi-normal in that it asks subjects to place the item in one of a limited number of bins or piles.
Reference: [26] <author> E. Chrysler. </author> <title> Some basic determinants of computer programming productivity. </title> <journal> Communications of the ACM, </journal> <volume> 21(6) </volume> <pages> 472-483, </pages> <month> June </month> <year> 1978. </year>
Reference-contexts: We assume that experience rather than age is the important variable here. Since not all of these variables can be used in subsequent analysis, we select Total Years in Software as the most appropriate variable. This choice is consisting with prior literature <ref> [26] </ref>. There is also a natural high correlation between the Number of Degrees Competed and the Highest Degree Completed. We use the Highest Degree Completed in subsequent analysis. <p> On the other hand, Chrysler was able to explain over 85% of the variance in performance based on only thirteen program variables and five programmer variables <ref> [26] </ref>. The subjects in Chrysler's study were experienced professional programmers rather than students. In another similar study, Moher and Schneider were able to explain 45-55% of the performance variability in student programmers, but for professional programmers only the years of experience was significant [32].
Reference: [27] <author> T.P. Moran. </author> <title> An applied psychology of the user. </title> <journal> ACM Computing Surveys, </journal> <volume> 13(1) </volume> <pages> 1-11, </pages> <month> March </month> <year> 1981. </year>
Reference-contexts: not? This question is beyond the scope of this research, but indicates a significant direction for future research. 5 Related Work Approaches for behavior-oriented software engineering research generally lie along a continuum between tightly controlled experiments (often with limited generality) and more broadly defined studies which stress qualitative psychological techniques <ref> [15, 27, 28, 29, 30] </ref>. The bulk of the research to date favors the tightly controlled experimental approach. Studies seeking to correlate easily measured a priori factors with programmer performance have shown mixed results.
Reference: [28] <author> V. Basils, R. Selby, and D. Hutchens. </author> <title> Experimentation in software engineering. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> SE-12(7):733-743, </volume> <month> July </month> <year> 1986. </year>
Reference-contexts: not? This question is beyond the scope of this research, but indicates a significant direction for future research. 5 Related Work Approaches for behavior-oriented software engineering research generally lie along a continuum between tightly controlled experiments (often with limited generality) and more broadly defined studies which stress qualitative psychological techniques <ref> [15, 27, 28, 29, 30] </ref>. The bulk of the research to date favors the tightly controlled experimental approach. Studies seeking to correlate easily measured a priori factors with programmer performance have shown mixed results.
Reference: [29] <author> B. Curtis. </author> <booktitle> Measurement and experimentation in software engineering. Proc. of the IEEE, </booktitle> <volume> 68(9) </volume> <pages> 1144-1157, </pages> <month> September </month> <year> 1980. </year> <month> 27 </month>
Reference-contexts: not? This question is beyond the scope of this research, but indicates a significant direction for future research. 5 Related Work Approaches for behavior-oriented software engineering research generally lie along a continuum between tightly controlled experiments (often with limited generality) and more broadly defined studies which stress qualitative psychological techniques <ref> [15, 27, 28, 29, 30] </ref>. The bulk of the research to date favors the tightly controlled experimental approach. Studies seeking to correlate easily measured a priori factors with programmer performance have shown mixed results.
Reference: [30] <author> B. Curtis. </author> <title> Five paradigms in the psychology of programming. </title> <type> Technical Report STP-132-87, </type> <institution> MCC, Austin, TX, </institution> <month> April </month> <year> 1987. </year>
Reference-contexts: not? This question is beyond the scope of this research, but indicates a significant direction for future research. 5 Related Work Approaches for behavior-oriented software engineering research generally lie along a continuum between tightly controlled experiments (often with limited generality) and more broadly defined studies which stress qualitative psychological techniques <ref> [15, 27, 28, 29, 30] </ref>. The bulk of the research to date favors the tightly controlled experimental approach. Studies seeking to correlate easily measured a priori factors with programmer performance have shown mixed results.
Reference: [31] <author> G.E. Evans and M.G. </author> <title> Simkin. </title> <journal> What best predicts computer proficiency? Communications of the ACM, </journal> <volume> 32(11) </volume> <pages> 1322-1327, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: The bulk of the research to date favors the tightly controlled experimental approach. Studies seeking to correlate easily measured a priori factors with programmer performance have shown mixed results. In a study conducted by Evans and Simkins <ref> [31] </ref>, 34 easily measured demographic, academic, experience, and behavioral variables could account for no more than 23% of the variation in student performance. On the other hand, Chrysler was able to explain over 85% of the variance in performance based on only thirteen program variables and five programmer variables [26]. <p> We also used the MBTI test to determine the personality of the Phase 1 subjects. An abbreviated version of the MBTI was used by Evans and Simkin in their study of programmer productivity and demonstrated correlation between the introversion, intuitive, and judging types and performance on exams <ref> [31] </ref>. We were unable to find significant differences between the personality types of the exceptional and non-exceptional engineers. The focus of our research is on competencies. A competency is any personal characteristic or attribute that contributes to effective performance [40].
Reference: [32] <author> T. Moher and G.M. Schneider. </author> <title> Methods for improving controlled experimentation in software engineering. </title> <booktitle> Proc. 5th Int. Conf. Software Engineering, </booktitle> <year> 1981. </year>
Reference-contexts: The subjects in Chrysler's study were experienced professional programmers rather than students. In another similar study, Moher and Schneider were able to explain 45-55% of the performance variability in student programmers, but for professional programmers only the years of experience was significant <ref> [32] </ref>. Our results on a small sample of professional programmers also found that the number of years of experience is the only statistically significant biographical factor. On the larger sample the total 22 number of languages and the math degree held? variables contributed to the ten variable canonical discriminant function.
Reference: [33] <author> R. Guindon and B. Curtis. </author> <title> Control of cognitive processes during software design: What tools would support software designers? Technical Report STP-296-87, </title> <publisher> MCC, </publisher> <address> Austin, TX, </address> <month> August </month> <year> 1987. </year>
Reference-contexts: Rather than search for other simple predictors of performance, our major emphasis is on studying the actual behavior of software engineers when solving software engineering problems. In behavioral experiments conducted at MCC, three experienced software developers were videotaped during the process of developing a design solution <ref> [33, 34] </ref>. The observed development process was not linear | designers operated simultaneously at various levels of abstraction and detail. Also, each designer exhibited a markedly different approach to design. Guindon describes the nonlinear design process as serendipitous or opportunistic [35].
Reference: [34] <author> R. Guindon, B. Curtis, and H. Krasner. </author> <title> A model of cognitive processes in software design: An analysis of breakdown in early design activities by individuals. </title> <type> Technical Report STP-283-87, </type> <institution> MCC, Austin, TX, </institution> <month> August </month> <year> 1987. </year>
Reference-contexts: Rather than search for other simple predictors of performance, our major emphasis is on studying the actual behavior of software engineers when solving software engineering problems. In behavioral experiments conducted at MCC, three experienced software developers were videotaped during the process of developing a design solution <ref> [33, 34] </ref>. The observed development process was not linear | designers operated simultaneously at various levels of abstraction and detail. Also, each designer exhibited a markedly different approach to design. Guindon describes the nonlinear design process as serendipitous or opportunistic [35].
Reference: [35] <author> R. Guindon. </author> <title> A framework for building software development environments: System design as ill-structured problems and as an opportunistic process. </title> <type> Technical Report STP-298-88, </type> <institution> MCC, Austin, TX, </institution> <month> September </month> <year> 1988. </year>
Reference-contexts: The observed development process was not linear | designers operated simultaneously at various levels of abstraction and detail. Also, each designer exhibited a markedly different approach to design. Guindon describes the nonlinear design process as serendipitous or opportunistic <ref> [35] </ref>. Of particular interest in the MCC studies is the use of an observational technique for gathering information. By observing the video tapes the researchers were able to obtain thinking aloud reports, and by collecting notes used in the designs were able to reconstruct the actual design sequence.
Reference: [36] <author> D. Littman, K. Ehrlich, E. Soloway, and J. Black. </author> <title> `You can observe a lot by just watching' how designers design. </title> <booktitle> Proc. 8th Annual Software Engineering Workshop (NASA Goddard), </booktitle> <month> November </month> <year> 1983. </year>
Reference-contexts: The researchers also used protocol analysis to uncover cognitive factors at work in design. The major drawback to this study is its limited sample size. Littman et al also used the observational technique to study a small sample <ref> [36] </ref>. Four experienced and two novice software designers were interviewed during a two hour period while they designed an electronic mail system. They found that the experienced designers took the users view of the system before proceeding with the design.
Reference: [37] <author> N. Vitalari and G. Dickson. </author> <title> Problem solving for effective systems analysis: An experimental exploration. </title> <journal> Communications of the ACM, </journal> <volume> 26(11) </volume> <pages> 948-956, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: The MCC and Littman et al studies provide insights into the problem solving techniques of experienced software developers; these studies did not examine the differences between exceptional and average performers. Vitalari and Dickson compared the problem-solving behavior of one low-and one high-rated systems analyst from each of nine companies <ref> [37] </ref>. Subjects verbalized their thought processes as they solved a requirements engineering problem over a two hour period. They found that the high-rated performers were more likely than low-rated performers to reject hypothesis, try several strategies, apply heuristics, set more goals, and look for analogies to prior problems.
Reference: [38] <author> L.T. Love. </author> <title> Relating Individual Differences in Computer Programming Performance to Human Information Processing Abilities. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <year> 1977. </year>
Reference-contexts: The results were based on responses to questionnaires that determine personality traits using Eysenck's Personality Inventory, the Crowne-Marlowe Social Desirability Scale, Self-Monitoring of Expressive Behavior, the Hostility Inventory, and a Type A Behavior measure. In another study of students, Love searched for predictive factors in student programming performance <ref> [38] </ref>. The search itself is fairly brute force in that a wide array (24 factors) of data are collected for each run of a student assignment. Each factor is considered in an analysis of 23 variance calculation to determine predictive factors of performance.
Reference: [39] <author> D.C. McClelland. </author> <title> Testing for competence rather than for `intelligence'. </title> <journal> American Psychologist, </journal> <volume> 28(1) </volume> <pages> 1-14, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: The extension of results from the study of students to the realm of experienced professionals is unclear at best. Since the correlation of grades and professional success is not high <ref> [39] </ref>, there is no reason to expect the predictive factors from a study of students to generalize to the study of professionals. We also used the MBTI test to determine the personality of the Phase 1 subjects. <p> However, they are not a job competency unless they contribute to doing the job well. The case for studying competencies rather than intelligence was made by McClelland in a criticism of the predictive validity of intelligence tests <ref> [39] </ref>. McClelland argues that tests which sample job skills are the best predictors of competence. In order to create the tests the researcher must know which skills are necessary to achieve competent performance in a particular job. The aim of our study is to uncover these competencies.
Reference: [40] <author> Charles River Consulting. </author> <title> Job competence assessment: Defining the attributes of the top performer. </title> <booktitle> American Society for Training and Development Research Series, </booktitle> <volume> 8, </volume> <year> 1982. </year> <month> 28 </month>
Reference-contexts: We were unable to find significant differences between the personality types of the exceptional and non-exceptional engineers. The focus of our research is on competencies. A competency is any personal characteristic or attribute that contributes to effective performance <ref> [40] </ref>. A job competency is any attribute that contributes to doing a specific job well. These attributes can be specialized knowledge, an ability, an interest, a trait, or a motivation. However, they are not a job competency unless they contribute to doing the job well.
References-found: 40

