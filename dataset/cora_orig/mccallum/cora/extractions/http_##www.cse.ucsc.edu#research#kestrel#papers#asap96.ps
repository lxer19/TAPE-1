URL: http://www.cse.ucsc.edu/research/kestrel/papers/asap96.ps
Refering-URL: http://www.cse.ucsc.edu/research/kestrel/papers.html
Root-URL: http://www.cse.ucsc.edu
Email: hirsch@cse.ucsc.edu  rph@cse.ucsc.edu  karplus@cse.ucsc.edu  
Title: Kestrel: A Programmable Array for Sequence Analysis  
Author: Jeffrey D. Hirschberg Richard Hughey Kevin Karplus Don Speck 
Address: Santa Cruz, CA 95064  
Affiliation: Computer Engineering, University of California,  
Note: Proc. Int. Conf. Application-Specific Systems, Architectures, and Processors, IEEE CS, August 19-21, 1996, pp. 25-34.  1: Introduction  
Abstract: Kestrel is a programmable linear systolic array processor designed for sequence analysis. Among other features, Kestrel includes an 8-bit word, a single-cycle add-and-minimize instruction, and efficient communication using Systolic Shared Registers. This paper describes Kestrel's functional units in detail, and examines each of their effects on system performance. With prototypes currently in the works, we expect to complete a full Kestrel array, with between 512 and 1024 processing elements, in 1997. Kestrel, named after the small, fast falcon found on the Santa Cruz campus of the University of California, is a project to develop a programmable linear systolic array for sequence analysis. The processing element (PE) architecture is complete, as well as a simulator for performance evaluation. We have fabricated two subunits, the multiplier and SRAM, and will fabricate a prototype chip with 1-4 full PEs in late 1996. A complete system, with 64 PEs per chip and 8-16 chips, is scheduled for late 1997. Kestrel will be an affordable system; a partially-populated Kestrel board could be priced in the low thousands of dollars, while a fully-loaded Kestrel board could cost in the low tens of thousands. This paper discusses the motivation for the Kestrel project and the PE architecture, including descriptions of the major architectural components that help Kestrel achieve its goals. There are three main goals for the Kestrel project. The first is to develop a platform that is well-suited to biological sequence analysis. In projects such as the Human Genome Project, scientists need to analyze large databases containing billions of characters from DNA, RNA, and proteins. Many of the algorithms used in this analysis require scanning large segments of a database. Kestrel has been designed with these algorithms in mind. The second goal is to provide a programmable architecture. In one sense, this is related to the goal of developing an efficient platform for sequence analysis. There are a great number of sequence analysis algorithms in computational biology, and programmability is required to accommodate these different algorithms within a single system. As new algorithms are developed, Kestrel will be able to execute many of them without the need for redesigning the architecture. Additionally, Kestrel will be able to execute unrelated algorithms suitable for linear arrays. A third goal is to build a balanced system. The speed of data input and output (I/O) is a primary consideration in the design of any system, especially a massively parallel one. The speed at which the array operates needs to be balanced with the speed of I/O [18]. In the case of sequence analysis, the large databases involved are typically stored on disk. Most disks available today have a maximum sustained transfer rate of three to five megabytes. Therefore, we have structured the Kestrel PE architecture and cycle time to be in keeping with these transfer rates. The next two sections will briefly review sequence analysis algorithms and architectures. Following this, we describe and justify the design choices that led to the Kestrel architecture. Finally, we evaluate the effects of these choices on performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Marco Annaratone et al. </editor> <title> The Warp computer: Architecture, implementation and performance. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36(12) </volume> <pages> 1523-1537, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: The rightmost SSR of the adjacent chip then stores the value entering the chip. Inter-chip communication does not involve register reading. Although similar in form to inter-PE queues, SSRs have several important differences <ref> [1, 19] </ref>. In queues, data accessed at the ends of the queue. Thus, data must be scheduled so that values appear at the head of the queue at the correct time. This is useful in multiple-instruction stream, multiple-data stream (MIMD) computers where deadlock and contention are key issues.
Reference: [2] <author> Patrice Bertin, Didier Roncin, and Jean Vuillemin. </author> <title> Introduction to programmable active memories. </title> <type> Technical Report 3, </type> <institution> Digital Paris Research Laboratory, Rueil Malmaison, France, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: They are flexible, but the configuration must be changed for each algorithm, which is generally more complicated than writing new code for a programmable architecture. PAM, Splash and Biocellerator are based on FPGAs, while MGAP and PIM have their own reconfigurable designs <ref> [2, 7, 12, 6, 3, 8] </ref>. Kestrel is an example of a programmable co-processor. The goal of programmable co-processors is to achieve flexibility while providing performance on a level with single-purpose VLSI. Kestrel is based on B-SYS, a programmable co-processor developed for sequence analysis (Figure 2b) [16, 13].
Reference: [3] <author> Manjit Borah, Raminder S. Bajwa, Sridhar Hannenhalli, and Mary Jane Irwin. </author> <title> A SIMD solution to the sequence comparison problem on the MGAP. </title> <editor> In Peter Capello et al., editors, </editor> <booktitle> ASAP, </booktitle> <pages> pages 336-45, </pages> <address> Los Alamitos, CA, </address> <month> August </month> <year> 1994. </year> <note> IEEE CS. </note>
Reference-contexts: They are flexible, but the configuration must be changed for each algorithm, which is generally more complicated than writing new code for a programmable architecture. PAM, Splash and Biocellerator are based on FPGAs, while MGAP and PIM have their own reconfigurable designs <ref> [2, 7, 12, 6, 3, 8] </ref>. Kestrel is an example of a programmable co-processor. The goal of programmable co-processors is to achieve flexibility while providing performance on a level with single-purpose VLSI. Kestrel is based on B-SYS, a programmable co-processor developed for sequence analysis (Figure 2b) [16, 13].
Reference: [4] <author> Joseph J. F. Cavanagh. </author> <title> Digital computer arithmetic. </title> <publisher> McGraw-Hill Book Co., </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: Although the multiplier is not needed for most sequence analysis applications, it does add to the general programmability of Kestrel. The multiplier provides an easy way of doing multi-bit and multi-word shifts and is useful for multiplicative division methods <ref> [4] </ref>. The multiplier provides significant speed up over the ALU for these functions with a relatively low design cost and increase in PE area of about 15%.
Reference: [5] <author> E. Chow, T. Hunkapiller, J. Peterson, and M. S. Waterman. </author> <title> Biological information signal processor. </title> <editor> In Matea Valero et al., editors, </editor> <booktitle> ASAP, </booktitle> <pages> pages 144-160, </pages> <address> Los Alamitos, CA, </address> <month> September </month> <year> 1991. </year> <note> IEEE CS. </note>
Reference-contexts: P-NAC was the first such machine, and computed edit distance over a four-character alphabet [22]. More recent examples, better tuned to the needs of computational biology, include BioScan, BISP and Samba <ref> [29, 5, 20] </ref>. Reconfigurable systems are based on programmable logic such as field-programmable gate arrays (FPGAs) or custom-designed arrays. They are generally slower and have far lower PE densities than single-purpose VLSI but can be faster than supercomputers.
Reference: [6] <author> Compugen Ltd. </author> <title> Biocellerator information package. Obtained from compugen@datasrv.co.il, </title> <year> 1994. </year>
Reference-contexts: They are flexible, but the configuration must be changed for each algorithm, which is generally more complicated than writing new code for a programmable architecture. PAM, Splash and Biocellerator are based on FPGAs, while MGAP and PIM have their own reconfigurable designs <ref> [2, 7, 12, 6, 3, 8] </ref>. Kestrel is an example of a programmable co-processor. The goal of programmable co-processors is to achieve flexibility while providing performance on a level with single-purpose VLSI. Kestrel is based on B-SYS, a programmable co-processor developed for sequence analysis (Figure 2b) [16, 13].
Reference: [7] <author> Maya Gokhale et al. </author> <title> Building and using a highly parallel programmable logic array. </title> <journal> Computer, </journal> <volume> 24(1) </volume> <pages> 81-89, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: They are flexible, but the configuration must be changed for each algorithm, which is generally more complicated than writing new code for a programmable architecture. PAM, Splash and Biocellerator are based on FPGAs, while MGAP and PIM have their own reconfigurable designs <ref> [2, 7, 12, 6, 3, 8] </ref>. Kestrel is an example of a programmable co-processor. The goal of programmable co-processors is to achieve flexibility while providing performance on a level with single-purpose VLSI. Kestrel is based on B-SYS, a programmable co-processor developed for sequence analysis (Figure 2b) [16, 13].
Reference: [8] <author> Maya Gokhale et al. </author> <title> Processing in memory: The Terasys massively parallel PIM array. </title> <journal> Computer, </journal> <volume> 28(4) </volume> <pages> 23-31, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: They are flexible, but the configuration must be changed for each algorithm, which is generally more complicated than writing new code for a programmable architecture. PAM, Splash and Biocellerator are based on FPGAs, while MGAP and PIM have their own reconfigurable designs <ref> [2, 7, 12, 6, 3, 8] </ref>. Kestrel is an example of a programmable co-processor. The goal of programmable co-processors is to achieve flexibility while providing performance on a level with single-purpose VLSI. Kestrel is based on B-SYS, a programmable co-processor developed for sequence analysis (Figure 2b) [16, 13].
Reference: [9] <author> M. Gribskov, R. Luthy, and D. Eisenberg. </author> <title> Profile analysis. </title> <booktitle> Methods in Enzymology, </booktitle> <volume> 183 </volume> <pages> 146-159, </pages> <year> 1990. </year>
Reference-contexts: Figure 1 shows a data flow graph for this computation. Variations and restricted forms of this recurrence are used in the classic sequence comparison methods [25, 28, 30]. In the most general form (a generalized profile or linear hidden Markov model <ref> [9, 17, 15] </ref>), all transition costs between the three states (in a run of matches, insertions, or deletions) and character costs are position-dependent.
Reference: [10] <author> J Alicia Grice, Richard Hughey, and Don Speck. </author> <title> Parallel sequence alignment in limited space. </title> <editor> In Christopher Rallings et al., editors, </editor> <booktitle> ISMB, </booktitle> <pages> pages 145-157, </pages> <address> Menlo Park, CA, 1995. </address> <publisher> AAAI/MIT Press. </publisher>
Reference-contexts: The simplest means of generating a sequence alignment is, for each of the O (n 2 ) c i;j values, to store the choices made during minimization. The space requirements can be reduced with a divide-and-conquer strategy [11, 24] or our new checkpoint algorithm <ref> [10] </ref>. <p> When the cost table is complete, the information in the SRAM can be used to determine the minimum-cost set of operations to align the sequences. Storage-efficient variations of this algorithm based on checkpoints enable alignment of sequences up to length n = 30 000 in 256 memory locations <ref> [10] </ref>. Although the SSRs could be expanded to handle larger storage requirements, the cost in area and instruction bits would be high.
Reference: [11] <author> D. S. Hirschberg. </author> <title> A linear space algorithm for computing maximal common subsequences. </title> <journal> Communications of the ACM, </journal> <volume> 18(6) </volume> <pages> 341-343, </pages> <month> June </month> <year> 1975. </year>
Reference-contexts: The simplest means of generating a sequence alignment is, for each of the O (n 2 ) c i;j values, to store the choices made during minimization. The space requirements can be reduced with a divide-and-conquer strategy <ref> [11, 24] </ref> or our new checkpoint algorithm [10].
Reference: [12] <author> Dzung T. Hoang. </author> <title> Searching genetic databases on Splash 2. </title> <editor> In Duncan A. Buell and Kenneth L. Pocek, editors, </editor> <booktitle> Proc. IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <pages> pages 185-191, </pages> <address> Los Alamitos, CA, </address> <month> April </month> <year> 1993. </year> <note> IEEE CS. </note>
Reference-contexts: They are flexible, but the configuration must be changed for each algorithm, which is generally more complicated than writing new code for a programmable architecture. PAM, Splash and Biocellerator are based on FPGAs, while MGAP and PIM have their own reconfigurable designs <ref> [2, 7, 12, 6, 3, 8] </ref>. Kestrel is an example of a programmable co-processor. The goal of programmable co-processors is to achieve flexibility while providing performance on a level with single-purpose VLSI. Kestrel is based on B-SYS, a programmable co-processor developed for sequence analysis (Figure 2b) [16, 13].
Reference: [13] <author> Richard Hughey. </author> <title> Programming systolic arrays. </title> <editor> In Edward Lee and Teresa Meng, editors, </editor> <booktitle> ASAP, </booktitle> <pages> pages 604-618, </pages> <address> Los Alamitos, CA, </address> <month> August </month> <year> 1992. </year> <note> IEEE CS. </note>
Reference-contexts: Kestrel is an example of a programmable co-processor. The goal of programmable co-processors is to achieve flexibility while providing performance on a level with single-purpose VLSI. Kestrel is based on B-SYS, a programmable co-processor developed for sequence analysis (Figure 2b) <ref> [16, 13] </ref>. B-SYS has several shortcomings, in particular when applied to algorithms other than simple edit distance, which Kestrel overcomes.
Reference: [14] <author> Richard Hughey. </author> <title> Parallel sequence comparison and alignment. </title> <editor> In Peter Capello et al., editors, </editor> <booktitle> ASAP, </booktitle> <pages> pages 137-140, </pages> <address> Los Alamitos, CA, </address> <month> July </month> <year> 1995. </year> <note> IEEE CS. </note>
Reference-contexts: For example, we expect Kestrel to perform 16-bit affine cost sequence comparison three times faster than a 1-million-dollar 16 384-PE MasPar MP-2 [26] and 15 times faster than the fastest FPGA-based system, and and about two times slower than BioSCAN's heuristic search method on a typical query <ref> [14] </ref>. 7: Acknowledgements We gratefully acknowledge the contributions of Elizabeth Avila (FP multiplication), Leslie Grate (architecture discussions), J Alicia Grice (sequence alignment), and Eric Rice (division) to the Kestrel project. Inclusion of the bit-shifter was aided by work with Don Roberts on the MISC architecture [27].
Reference: [15] <author> Richard Hughey and Anders Krogh. </author> <title> Hidden Markov models for sequence analysis: Extension and analysis of the basic method. </title> <journal> CABIOS, </journal> <volume> 12(2) </volume> <pages> 95-107, </pages> <year> 1996. </year>
Reference-contexts: Figure 1 shows a data flow graph for this computation. Variations and restricted forms of this recurrence are used in the classic sequence comparison methods [25, 28, 30]. In the most general form (a generalized profile or linear hidden Markov model <ref> [9, 17, 15] </ref>), all transition costs between the three states (in a run of matches, insertions, or deletions) and character costs are position-dependent.
Reference: [16] <author> Richard Hughey and Daniel P. Lopresti. B-SYS: </author> <title> A 470-processor programmable systolic array. In Chuan-lin Wu, editor, </title> <journal> ICPP, </journal> <volume> volume 1, </volume> <pages> pages 580-583, </pages> <address> Boca Raton, FL, August 1991. </address> <publisher> CRC Press. </publisher>
Reference-contexts: 2 s 1 s 2 s 3 T2 T0 T5 8-bit switch Dynamic latch ALU ?? ? 6 ??? f a s West Register Bank (16 fi 8) 6 ? ? 6 East Register Bank (16 fi 8) C l C l C l C l CBA 8 processing element <ref> [16] </ref>. 3: Sequence Analysis Architectures The dynamic programming calculation easily maps to a linear array of processing elements. <p> Kestrel is an example of a programmable co-processor. The goal of programmable co-processors is to achieve flexibility while providing performance on a level with single-purpose VLSI. Kestrel is based on B-SYS, a programmable co-processor developed for sequence analysis (Figure 2b) <ref> [16, 13] </ref>. B-SYS has several shortcomings, in particular when applied to algorithms other than simple edit distance, which Kestrel overcomes. <p> Rather than being local to each PE, as register files usually are, SSRs reside between PEs. This allows neighboring PEs to share a register file. SSRs were invented for the B-SYS co-processor and are well-suited to linear arrays, but can be applied to any planar topology <ref> [16] </ref>. The key idea of SSRs is that communication and computation do not require distinct instructions but occur concurrently. When a result is stored after an instruction is executed, communication automatically takes place. The programmer can naturally think about data streaming through the array as values are computed.
Reference: [17] <author> A. Krogh, M. Brown, I. S. Mian, K. Sjolander, and D. Haussler. </author> <title> Hidden Markov models in computational biology: Applications to protein modeling. </title> <journal> JMB, </journal> <volume> 235 </volume> <pages> 1501-1531, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Figure 1 shows a data flow graph for this computation. Variations and restricted forms of this recurrence are used in the classic sequence comparison methods [25, 28, 30]. In the most general form (a generalized profile or linear hidden Markov model <ref> [9, 17, 15] </ref>), all transition costs between the three states (in a run of matches, insertions, or deletions) and character costs are position-dependent.
Reference: [18] <author> H. T. Kung. </author> <booktitle> Why systolic architectures? Computer, </booktitle> <pages> pages 37-46, </pages> <month> January </month> <year> 1982. </year>
Reference-contexts: A third goal is to build a balanced system. The speed of data input and output (I/O) is a primary consideration in the design of any system, especially a massively parallel one. The speed at which the array operates needs to be balanced with the speed of I/O <ref> [18] </ref>. In the case of sequence analysis, the large databases involved are typically stored on disk. Most disks available today have a maximum sustained transfer rate of three to five megabytes. Therefore, we have structured the Kestrel PE architecture and cycle time to be in keeping with these transfer rates.
Reference: [19] <author> H. T. Kung. </author> <title> Systolic communication. </title> <editor> In K. Bromley, S. Y. Kung, and E. Swartzlander, editors, </editor> <booktitle> First Systolic Arrays, </booktitle> <pages> pages 695-703. </pages> <publisher> IEEE CS, </publisher> <month> May </month> <year> 1988. </year>
Reference-contexts: The rightmost SSR of the adjacent chip then stores the value entering the chip. Inter-chip communication does not involve register reading. Although similar in form to inter-PE queues, SSRs have several important differences <ref> [1, 19] </ref>. In queues, data accessed at the ends of the queue. Thus, data must be scheduled so that values appear at the head of the queue at the correct time. This is useful in multiple-instruction stream, multiple-data stream (MIMD) computers where deadlock and contention are key issues.
Reference: [20] <author> Dominique Lavenier. </author> <title> SAMBA: Systolic accelerators for molecular biological applications. </title> <type> Technical Report 988, </type> <institution> IRISA, </institution> <address> 35042 Rennes Cedex, France, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: P-NAC was the first such machine, and computed edit distance over a four-character alphabet [22]. More recent examples, better tuned to the needs of computational biology, include BioScan, BISP and Samba <ref> [29, 5, 20] </ref>. Reconfigurable systems are based on programmable logic such as field-programmable gate arrays (FPGAs) or custom-designed arrays. They are generally slower and have far lower PE densities than single-purpose VLSI but can be faster than supercomputers.
Reference: [21] <author> R. J. Lipton and D. P. Lopresti. </author> <title> Delta transformations to simplify VLSI processor arrays for serial dynamic programming. </title> <editor> In Kai Hwang et al., editors, </editor> <booktitle> ICPP, </booktitle> <pages> pages 917-920. </pages> <publisher> CRC Press, </publisher> <month> August </month> <year> 1986. </year>
Reference-contexts: As the cost table is generated when comparing two sequences, it is possible for c i;j values to exceed eight bits, which would lead to erroneous results. In certain situations, modulo comparison can be used to avoid this problem <ref> [21] </ref>. The key in modulo comparison is that local differences in costs are small. With m bits of precision for table entries, if delta costs are restricted to being less than 2 m1 , then the msb of subtraction determines the minimum value.
Reference: [22] <author> Daniel P. Lopresti. P-NAC: </author> <title> A systolic array for comparing nucleic acid sequences. </title> <journal> Computer, </journal> <volume> 20(7) </volume> <pages> 98-99, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: A common mapping is to assign one PE to each character of the query string, and then to shift the database through the linear chain of PEs (Figure 2a), performing the computation in 2n 1 steps on n PEs. Alternate mappings have been used by BioSCAN and by P-NAC <ref> [22, 29] </ref>. A number of parallel architectures have been developed for sequence analysis. In addition to architectures specifically designed for sequence analysis, existing programmable sequential and parallel architectures have been used for solving sequence problems. <p> However, they are limited to a single algorithm, and thus cannot supply the flexibility necessary to run the variety of algorithms required for analyzing DNA, RNA, and proteins. P-NAC was the first such machine, and computed edit distance over a four-character alphabet <ref> [22] </ref>. More recent examples, better tuned to the needs of computational biology, include BioScan, BISP and Samba [29, 5, 20]. Reconfigurable systems are based on programmable logic such as field-programmable gate arrays (FPGAs) or custom-designed arrays.
Reference: [23] <author> Carver A. Mead and Lynn A. Conway. </author> <title> Introduction to VLSI Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1980. </year>
Reference-contexts: One bit from each field is selected for propagate and generate for each slice according to the corresponding bits from Operand A and Operand B. This design is derived from the OM2 <ref> [23] </ref>. We chose this type of ALU for two reasons. First, it is programmable. The function of the ALU is determined by the propagate and generate fields. This ALU is capable of 256 functions, including all common logic functions and the standard arithmetic functions of addition and subtraction.
Reference: [24] <author> Eugene W. Myer and Webb Miller. </author> <title> Optimal alignments in linear space. </title> <journal> CABIOS, </journal> <volume> 4(1) </volume> <pages> 11-17, </pages> <year> 1988. </year>
Reference-contexts: The simplest means of generating a sequence alignment is, for each of the O (n 2 ) c i;j values, to store the choices made during minimization. The space requirements can be reduced with a divide-and-conquer strategy <ref> [11, 24] </ref> or our new checkpoint algorithm [10].
Reference: [25] <author> S. B. Needleman and C. D. Wunsch. </author> <title> A general method applicable to the search for similarities in the amino acid sequences of two proteins. </title> <journal> JMB, </journal> <volume> 48 </volume> <pages> 443-453, </pages> <year> 1970. </year>
Reference-contexts: Sequence comparison using affine gap penalties, greatly preferred by bioligists, involves three interconnected recurrences of a similar form. Figure 1 shows a data flow graph for this computation. Variations and restricted forms of this recurrence are used in the classic sequence comparison methods <ref> [25, 28, 30] </ref>. In the most general form (a generalized profile or linear hidden Markov model [9, 17, 15]), all transition costs between the three states (in a run of matches, insertions, or deletions) and character costs are position-dependent.
Reference: [26] <author> John R. Nickolls. </author> <title> The design of the Maspar MP-1: A cost effective massively parallel computer. </title> <booktitle> In COMPCON Spring 1990, </booktitle> <pages> pages 25-28, </pages> <address> Los Alamitos, CA, February 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Special instructions such as this one enable Kestrel to keep reasonable pace with both disk speeds and single-purpose sequence analysis co-processors, yet still be programmable. For example, we expect Kestrel to perform 16-bit affine cost sequence comparison three times faster than a 1-million-dollar 16 384-PE MasPar MP-2 <ref> [26] </ref> and 15 times faster than the fastest FPGA-based system, and and about two times slower than BioSCAN's heuristic search method on a typical query [14]. 7: Acknowledgements We gratefully acknowledge the contributions of Elizabeth Avila (FP multiplication), Leslie Grate (architecture discussions), J Alicia Grice (sequence alignment), and Eric Rice (division)
Reference: [27] <author> James D. Roberts. MISC: </author> <title> A parallel architecture for AI. </title> <type> PhD thesis, </type> <institution> UC, </institution> <address> Santa Cruz, CA, </address> <year> 1995. </year>
Reference-contexts: Inclusion of the bit-shifter was aided by work with Don Roberts on the MISC architecture <ref> [27] </ref>. Kestrel is funded by NSF grant MIP-9423985. More information on Kestrel can be found at http://www.cse.ucsc.edu/research/kestrel/kestrel.html.
Reference: [28] <author> P. H. Sellers. </author> <title> On the theory and computation of evolutionary distances. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 26 </volume> <pages> 787-793, </pages> <year> 1974. </year>
Reference-contexts: Sequence comparison using affine gap penalties, greatly preferred by bioligists, involves three interconnected recurrences of a similar form. Figure 1 shows a data flow graph for this computation. Variations and restricted forms of this recurrence are used in the classic sequence comparison methods <ref> [25, 28, 30] </ref>. In the most general form (a generalized profile or linear hidden Markov model [9, 17, 15]), all transition costs between the three states (in a run of matches, insertions, or deletions) and character costs are position-dependent.
Reference: [29] <author> Raj Singh et al. </author> <title> A scalable systolic multiprocessor system for biosequence similarity analysis. </title> <editor> In Lawrence Snyder, editor, </editor> <booktitle> Symp. Integrated Systems, </booktitle> <pages> pages 169-181, </pages> <address> Cambridge, MA, April 1993. </address> <publisher> MIT Press. </publisher>
Reference-contexts: A common mapping is to assign one PE to each character of the query string, and then to shift the database through the linear chain of PEs (Figure 2a), performing the computation in 2n 1 steps on n PEs. Alternate mappings have been used by BioSCAN and by P-NAC <ref> [22, 29] </ref>. A number of parallel architectures have been developed for sequence analysis. In addition to architectures specifically designed for sequence analysis, existing programmable sequential and parallel architectures have been used for solving sequence problems. <p> P-NAC was the first such machine, and computed edit distance over a four-character alphabet [22]. More recent examples, better tuned to the needs of computational biology, include BioScan, BISP and Samba <ref> [29, 5, 20] </ref>. Reconfigurable systems are based on programmable logic such as field-programmable gate arrays (FPGAs) or custom-designed arrays. They are generally slower and have far lower PE densities than single-purpose VLSI but can be faster than supercomputers.
Reference: [30] <author> T. F. Smith and M. S. Waterman. </author> <title> Identification of common molecular subsequences. </title> <journal> JMB, </journal> <volume> 147 </volume> <pages> 195-197, </pages> <year> 1981. </year>
Reference-contexts: Sequence comparison using affine gap penalties, greatly preferred by bioligists, involves three interconnected recurrences of a similar form. Figure 1 shows a data flow graph for this computation. Variations and restricted forms of this recurrence are used in the classic sequence comparison methods <ref> [25, 28, 30] </ref>. In the most general form (a generalized profile or linear hidden Markov model [9, 17, 15]), all transition costs between the three states (in a run of matches, insertions, or deletions) and character costs are position-dependent. <p> Affine cost functions able to use modulo costs can be evaluated at disk speeds. The 16- and 24-bit affine cost instruction counts are based on a common variant that detects similarities between subsequences of two sequences <ref> [30] </ref>. These two methods require about 1 Mbyte/second disk rates. The floating-point multiply results are based on an earlier version of the simulator that did not include the multiplier, and required 208 cycles to perform 32-bit IEEE-format floating-point multiplication.
References-found: 30

