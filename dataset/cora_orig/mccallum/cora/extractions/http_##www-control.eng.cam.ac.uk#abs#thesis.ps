URL: http://www-control.eng.cam.ac.uk/abs/thesis.ps
Refering-URL: http://www-control.eng.cam.ac.uk/Homepage/Papers.html
Root-URL: 
Title: Computing Environments for Control Engineering  
Author: Anita Bilqees Saifuddin 
Degree: Submitted for the Degree of Doctor of Philosophy  
Date: March 1996  
Address: Cambridge  Cambridge  
Affiliation: Newnham College  Department of Engineering University of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> Advanced Continuous Simulation Language (ACSL). Mitchel and Gauthier Associates, Concord, Massachusetts, </institution> <year> 1986. </year>
Reference-contexts: signal; ns : INTEGER; name : OPTIONAL ARRAY [1:ns] OF STRING; unit : OPTIONAL ARRAY [1:ns] OF STRING; scale : OPTIONAL ARRAY [1:ns] OF REAL; group : SET OF UNIQUE LIST [1:#] OF INTEGER; (* defines a subset of signal components, eg. control_inputs,disturbance_inputs *) WHERE ns &gt; 0; HIBOUND (group <ref> [1] </ref>) &lt;= ns; END_ENTITY; END_SCHEMA; There are several groups and committees working on the standardization of data in different branches of engineering. Some groups working on standardization in control systems analysis and design or related areas are specified in [58].
Reference: [2] <author> S. Ahmed, A. Wong, D. Sriram, and R. Logcher. </author> <title> A Comparison of Object-Oriented Database Management Systems for Engineering Applications. </title> <type> Technical Report R91-12, </type> <institution> Massachusetts Institute of Technology, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Object-oriented databases are in fact gaining popularity in the comparatively new `complex' domains such as CASE, VLSI, CAD/CAM and other branches of CAE. A survey of object-oriented database management systems specifically designed for engineering applications is given in <ref> [2] </ref>. The object-oriented databases surveyed include ORION/ITASCA, ObServer/ENCORE, GEMSTONE, ONTOS, ObjectStore and VERSANT. A table showing the comparative ratings of features is also given which can be useful for selecting a particular product for a specific domain.
Reference: [3] <author> A.A.L. Ambler, M.M. Burnett, and B.A. Zimmerman. </author> <title> Operational versus Definitional|A Perspective on Programming Paradigms. </title> <journal> IEEE Computer, </journal> <volume> 25(9) </volume> <pages> 28-43, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: The remaining work reported in this chapter and in chapter 5 was conducted later as a part of research for this thesis. 54 CHAPTER 4. MATLAB CONTAINERS FOR CACE 55 Containers have some, but not all of the properties of objects which appear in `object-oriented programming' and `object-oriented databases' <ref> [10, 3, 69] </ref>. The term `Container' has been chosen in order to avoid the appearance of claiming real object-like behaviour because certain crucial properties of objects, such as inheritance of class definitions, are absent from `Containers'.
Reference: [4] <author> M. Andersson. Omola: </author> <title> An Object-Oriented Language for Model Representation. </title> <type> Master's thesis, </type> <institution> Department of Automatic Control, Lund Institute of Technology, Lund, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: Considerable efforts have been made to identify appropriate entities which need to be represented for control engineering purposes, such as [45] which primarily identifies a set drawn from the needs of linear systems analysis and <ref> [4] </ref> which provides examples of the representation of nonlinear models. Early software such as Simnon [8] and CLADP [62] defined data models which made use of such system theoretic objects.
Reference: [5] <author> M. Andersson. </author> <title> OmSim and Omola Tutorial and User's Manual. </title> <institution> Department of Automatic Control, Lund Institute of Technology, Lund, </institution> <note> 3rd edition, </note> <month> April </month> <year> 1993. </year>
Reference-contexts: This kernel could then act as a central database of models accessible to all tools as shown in figure 3.2. It is suggested that Omola <ref> [5] </ref> could be used as a textual format for the model database. Omola is useful for model documentation and as a standardized exchange language between users and tools. Federated computer-aided control design system, ECSTASY, and GE-MEAD were also based on the idea of a central database.
Reference: [6] <author> M. Andersson. </author> <title> Object-Oriented Modeling and Simulation of Hybrid Systems. </title> <type> PhD thesis, </type> <institution> Department of Automatic Control, Lund Institute of Technology, Lund, </institution> <year> 1994. </year>
Reference-contexts: Although this approach is quite effective, the closed architecture of such environments precludes easy addition of tools from other vendors. 2.2 Requirements Analysis In this section, some important user requirements are listed. These requirements have been put together from different sources such as <ref> [6, 13, 84, 86, 103] </ref>. Most of the requirements have already been discussed in section 2.1. Here they are summarized and listed separately as requirements for modelling and simulation, programming language and database management support.
Reference: [7] <author> M. Andersson, S.E. Mattsson, and B. Nilsson. </author> <booktitle> On the Architecture of CACE Environments. In IFAC/IMACS Symposium on Computer-Aided Design in Control Systems, </booktitle> <address> Swansea, </address> <year> 1991. </year>
Reference-contexts: The two models for GUIs are in fact similar to the two approaches for information processing called `data-centered' approach and `tool-centered' approach. These two `views' of information processing are discussed in the context of CACE in <ref> [7] </ref> in which it is pointed out that the tool-centered model is best suited for complex operations on simple data while the data-centered model is suitable for simple operations on complex data. <p> In several proposed architectures for integrated CACE, databases hold a central position so that they can be used as a convenient channel for passing data between different software modules. One such architecture is proposed in <ref> [7] </ref> which emphasizes that since models are central to the process of control systems design, the kernel of an integrated environment should support the representation of models and have basic functions for manipulating and accessing models.
Reference: [8] <author> K.J. -Astrom. </author> <title> Computer-Aided Tools for Control Systems Design. </title> <editor> In M. Jamshidi and C. J. Herget, editors, </editor> <booktitle> Computer-Aided Control Systems Engineering. </booktitle> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1985. </year>
Reference-contexts: Early software such as Simnon <ref> [8] </ref> and CLADP [62] defined data models which made use of such system theoretic objects. Simnon distinguished between entities such as `continuous system' and `connecting system', while CLADP distinguished between `state-space models', `transfer function matrices' and others. These facilities gave rise to some sophisticated features.
Reference: [9] <author> K.J. -Astrom and W. Kreutzer. </author> <title> System Representation. </title> <booktitle> In 3rd IEEE Symposium on CACSD, </booktitle> <address> Arlington, VA, </address> <year> 1986. </year>
Reference-contexts: Traditional commercially available databases are therefore not suited for control engineering purposes. What is required is a database which can cope naturally and efficiently with complex structured data. Semantic hierarchical data models that can represent such complex structured data were proposed for CACE in [55] and <ref> [9] </ref>. These data models attached great importance to incorporating semantic information in the database and the ability to change the data model dynamically by defining new attributes for a system or creating system entities of a possibly higher level. <p> The logic programming implementation, in addition to providing the features in the earlier implementations, concentrated more on the declarative style of interaction for querying and updating a semantic database for control engineering. The semantic hierarchical data model proposed in <ref> [9] </ref> was implemented in ExperLisp, which has limited support for object-oriented programming, and the implementation was therefore impeded by a lack of proper inheritance mechanism. However, control engineering database requirements go beyond semantic data modelling capabilities.
Reference: [10] <author> M.P. Atkinson, F. Bancilhon, D. DeWitt, K. Dittrich, D. Maier, and S. Zdonik. </author> <title> The Object-Oriented Database System Manifesto. </title> <booktitle> In The First International Conference on Deductive and Object-Oriented Databases, </booktitle> <month> December </month> <year> 1989. </year> <note> 106 BIBLIOGRAPHY 107 </note>
Reference-contexts: The remaining work reported in this chapter and in chapter 5 was conducted later as a part of research for this thesis. 54 CHAPTER 4. MATLAB CONTAINERS FOR CACE 55 Containers have some, but not all of the properties of objects which appear in `object-oriented programming' and `object-oriented databases' <ref> [10, 3, 69] </ref>. The term `Container' has been chosen in order to avoid the appearance of claiming real object-like behaviour because certain crucial properties of objects, such as inheritance of class definitions, are absent from `Containers'.
Reference: [11] <author> G.J. Balas, J.C. Doyle, K. Glover, A. Packard, and R. Smith. </author> <title> -Analysis and Synthesis Toolbox. The MathWorks, Inc., 24 Prime Way, </title> <address> Natwick, MA 01760, </address> <year> 1994. </year>
Reference-contexts: The success of the flexible Matlab environment led to the development of several software environments, the so-called `Matlab plus data structures'. For example, Xmath [110], CTRL-C [22], Robust Control Toolbox for Matlab [21] and -Analysis and Synthesis Toolbox for Matlab <ref> [11] </ref>. These environments give the users the flexibility of the Matlab environment but the data structures in these tools cannot be modified and there is no facility for user-defined data structures, so they are only suitable for representing simple structures.
Reference: [12] <author> H.A. Barker, M. Chen, P.W. Grant, C.P. Jobling, and P. Townsend. </author> <title> Open Architecture for Computer-Aided Control Engineering. </title> <journal> IEEE Control Systems Magazine, </journal> <month> April </month> <year> 1993. </year>
Reference-contexts: CHAPTER 3. DATABASE MANAGEMENT ASPECTS IN CACE 46 In <ref> [12] </ref> it is suggested that the user interface services, database services and message services in the CACE FRM are application independent and may thus form part of any general computer-aided engineering framework, whereas the task management services and data integration services tend to be application specific and so must be tuned
Reference: [13] <author> H.A. Barker, C.P. Jobling, M. Szymkat, and O. Ravn. </author> <title> A Requirements Analysis of Future Environments for Computer-Aided Control Engineering. </title> <booktitle> In Proc. 12th IFAC World Congress, </booktitle> <address> Sydney, </address> <month> 18-23 July </month> <year> 1993. </year>
Reference-contexts: Although this approach is quite effective, the closed architecture of such environments precludes easy addition of tools from other vendors. 2.2 Requirements Analysis In this section, some important user requirements are listed. These requirements have been put together from different sources such as <ref> [6, 13, 84, 86, 103] </ref>. Most of the requirements have already been discussed in section 2.1. Here they are summarized and listed separately as requirements for modelling and simulation, programming language and database management support. <p> There is a basic problem in CACE at the moment: the end-users, extenders and implementors (see section 2.3) have different perspectives on how `open' the open framework should be <ref> [13] </ref>. The end-users need a user-friendly tool which makes it somewhat restrictive for extenders who require open systems which would give them more flexibility. The developers, in order to sell more products, limit the degree of openness so as to appeal to the larger group of end-users. <p> Although this approach still needs to be explored in detail, it seems to be a promising approach to implementing standard classes of control objects described in <ref> [13] </ref> and [58]. 4.4 Class-Composition Hierarchy Using Matlab Containers In this section we go beyond the functionality of Containers discussed in section 4.2.1 by showing that Containers can be used to support composite classes|namely those whose properties are themselves Containers. Such a composition of objects is desirable in many applications.
Reference: [14] <author> J.M. Boyle, M.P. Ford, and J.M. Maciejowski. </author> <title> A Multivariable Frequency Domain Toolbox for Matlab. </title> <journal> IEEE Control Systems Magazine, </journal> <volume> 9 </volume> <pages> 59-65, </pages> <year> 1989. </year>
Reference: [15] <author> J.M. Boyle and J.M. Maciejowski. </author> <title> Expert-Aided Sequential Design of Multivariable Systems. </title> <booktitle> IEE Proceedings, </booktitle> <volume> 139(5), </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: The simplest way to CHAPTER 3. DATABASE MANAGEMENT ASPECTS IN CACE 43 achieve this is to use a multi-tasking operating system and run the various tools on the same machine, switching between them as necessary. This approach was adopted in the expert-aided sequential design of multivariable systems <ref> [15] </ref>. But there are obvious problems with this approach: translators are needed to resolve the inconsistency of data formats so that data can be transferred between different tools; and users have to switch between different tools with different interfaces which can be extremely confusing.
Reference: [16] <author> P.T. Breuer and J.M. Maciejowski. </author> <title> Representing Control Systems in a Semantic Database Management System within a Functional Programming Environment. </title> <booktitle> Proc. IEE Conference, </booktitle> <address> Oxford, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: The hierarchical data model proposed in [55] was later implemented in a functional programming environment <ref> [16] </ref>, an object-oriented programming environment [79] and a logic programming environment [101]. The principal idea behind all these implementations was to provide a full programming environment in addition to data management facilities.
Reference: [17] <author> D. Bunz and K. Gutschow. </author> <title> CATPAC|An Interactive Software Package for Control System Design. </title> <journal> Automatica, </journal> <volume> 21(2) </volume> <pages> 209-213, </pages> <year> 1985. </year>
Reference-contexts: conditions and parameter values, etc. before a result is generated. (We have explored this feature while designing computational chains using Matlab Containers as explained in the next chapter.) The first effort to track models and results and to integrate database management functionality in a CACE environment appears to be CATPAC <ref> [17] </ref>. The structure of the package allowed users to document their experience in applying an algorithm in a library which consisted of a `procedure library' containing a `procedure catalogue' and a `model library' containing a `model catalogue'. The information stored in these catalogues formed a kind of engineering knowledge base.
Reference: [18] <author> R.G.G. Cattell. </author> <title> Object Data Management. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: DATABASE MANAGEMENT ASPECTS IN CACE 36 ally complete or sufficiently low level database definition and programming language; it would be difficult, for instance, to perform control engineering design using a conventional database programming language like SQL). Almost all of these extra features are included in object-oriented database management systems <ref> [111, 18] </ref>. Object-oriented databases are in fact gaining popularity in the comparatively new `complex' domains such as CASE, VLSI, CAD/CAM and other branches of CAE. A survey of object-oriented database management systems specifically designed for engineering applications is given in [2].
Reference: [19] <author> F.E. </author> <title> Cellier. Continuous System Modeling. </title> <publisher> Springer-Verlag Inc., </publisher> <address> New York, </address> <year> 1991. </year>
Reference: [20] <author> F.E. </author> <title> Cellier. Integrated Continuous-System Modeling and Simulation Environments. </title> <editor> In D. A. Linkens, editor, </editor> <title> CAD for Control Systems. </title> <publisher> Marcel Dekker Inc., </publisher> <year> 1993. </year>
Reference-contexts: Primary emphasis was mostly on core CACE activities such as non-linear simulation, linear analysis and design in the frequency and time domains and model identification. From the mid 80s onwards, several research efforts in the field of requirements analysis for CACE such as <ref> [20, 36, 24, 53, 56, 64, 104, 107] </ref> identified a role for database management facility of some kind. Considerable research in database management aspects has also been carried out in other branches of engineering, such as software engineering, VLSI, ECAD and mechanical design [38].
Reference: [21] <author> R.Y. Chiang and M.G. Safonov. </author> <title> Robust Control Toolbox for Matlab. The MathWorks, Inc., 24 Prime Way, </title> <address> Natwick, MA. 01760, </address> <year> 1994. </year>
Reference-contexts: The success of the flexible Matlab environment led to the development of several software environments, the so-called `Matlab plus data structures'. For example, Xmath [110], CTRL-C [22], Robust Control Toolbox for Matlab <ref> [21] </ref> and -Analysis and Synthesis Toolbox for Matlab [11]. These environments give the users the flexibility of the Matlab environment but the data structures in these tools cannot be modified and there is no facility for user-defined data structures, so they are only suitable for representing simple structures.
Reference: [22] <author> CTRL-C User's Guide, </author> <note> Version 4.0. </note> <institution> Systems Control Technology Inc., 1801 Page Mill Road, </institution> <address> Palo Alto, CA 94304, </address> <month> September </month> <year> 1986. </year>
Reference-contexts: The success of the flexible Matlab environment led to the development of several software environments, the so-called `Matlab plus data structures'. For example, Xmath [110], CTRL-C <ref> [22] </ref>, Robust Control Toolbox for Matlab [21] and -Analysis and Synthesis Toolbox for Matlab [11].
Reference: [23] <author> M.A. Curth and H. Edelmann. </author> <title> APL|A Problem-oriented Introduction. </title> <publisher> Ellis Hor-wood Limited, </publisher> <year> 1989. </year>
Reference: [24] <author> D.A.Linkens. </author> <title> An artificial intelligence approach to environments for modeling and simulation. In D.A. Linkens, editor, CAD for Control Systems. </title> <publisher> Marcel Dekker, Inc., </publisher> <year> 1993. </year>
Reference-contexts: Primary emphasis was mostly on core CACE activities such as non-linear simulation, linear analysis and design in the frequency and time domains and model identification. From the mid 80s onwards, several research efforts in the field of requirements analysis for CACE such as <ref> [20, 36, 24, 53, 56, 64, 104, 107] </ref> identified a role for database management facility of some kind. Considerable research in database management aspects has also been carried out in other branches of engineering, such as software engineering, VLSI, ECAD and mechanical design [38].
Reference: [25] <author> C.J. Date. </author> <title> An Introduction to Database Systems, Volume 1. </title> <publisher> Addison-Wesley, </publisher> <address> 5th edition, </address> <year> 1990. </year> <note> BIBLIOGRAPHY 108 </note>
Reference-contexts: A practical solution is to call an appropriate function (recomputation on demand) for computing data values or to read the data from a file (precomputed only once). This gives the resulting database the separation between `conceptual' and `logical' organization of data, as recommended by the Codasyl standard <ref> [25] </ref>. The property definitions determine the `conceptual' (external, public) model while the local context initialization determines the `logical' (internal, private) model of data. The data values if read from a file would depend on the format of the file such as ASCII or binary MAT-file.
Reference: [26] <author> J.J. Dongarra, C.B. Moler, J.R. Bunch, and G.W. Stewart. </author> <title> LINPACK User's Guide. </title> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, </address> <year> 1979. </year>
Reference: [27] <author> H. Elmqvist. </author> <title> A Structured Model language for Large Continuous Systems. </title> <type> PhD thesis, </type> <institution> Department of Automatic Control, Lund Institute of Technology, Lund, </institution> <year> 1978. </year>
Reference: [28] <author> M. Englehart and M. Jackson. ControlH: </author> <title> An Algorithm Specification Language and Code Generator. </title> <journal> IEEE Control Systems Magazine, </journal> <volume> 15(2) </volume> <pages> 54-64, </pages> <month> April </month> <year> 1995. </year>
Reference: [29] <author> R. Finsterwalder and G. Grubel. </author> <title> Visual Programming in ANDECS for Controlled Systems Design Experimenting. In S.E. </title> <editor> Mattsson, J.O. Gray, and F.E. Cellier, editors, </editor> <booktitle> IEEE/IFAC Joint Symposium on Computer-Aided Control System Design, </booktitle> <address> Tucson, AZ, </address> <year> 1994. </year>
Reference-contexts: This gives the computational module a well-defined interaction style and makes it easy to change the function performed by the module, just as data abstraction gives a good interaction style and allows representation of data structures to change easily. Such an analogy is also made in <ref> [29] </ref>, in which a similarity between tool abstraction and re-usable modular computation sequences in ANDECS is pointed out.
Reference: [30] <author> F. Gallo, R. Minot, I. Thomas, et al. </author> <title> The Object Management System of PCTE as a Software Engineering Database Management System. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 22(1), </volume> <month> January </month> <year> 1987. </year>
Reference-contexts: Object Management System Architecture (OMS) is an example of another architecture for achieving the desirable goal of `plugging in and out' of various applications [40]. The PCTE (Portable Common Tool Environment) <ref> [30] </ref> project, concerned with specification, design and implementation of a host structure for software engineering environments, was one of the first frameworks to be based on this architecture. The OMS architecture is shown in figure 3.6.
Reference: [31] <author> S. Gani and P. Picuri. </author> <title> The Object Revolution: How COM Technology is Changing the Way We Do Business. </title> <journal> IEE Computing & Control Engineering Journal, </journal> <volume> 6(3), </volume> <month> June </month> <year> 1995. </year>
Reference-contexts: The object-oriented operating systems and high-level frameworks for graphical interaction being developed may help in moving towards true `openness'. This is already available to some extent in the Macintosh and Microsoft windows environment where tools have much more potential for integration than in traditional workstation environments. <ref> [31] </ref> gives an example of how Microsoft's OLE 2.0 and OLE Automation technology allow features of one application such as Microsoft Word to be used in another application such as Microsoft Excel.
Reference: [32] <author> B.S. Garbow, J.M. Boyle, J.J. Dongarra, and C.B. Moler. </author> <title> Matrix Eigensystem Routines - Eispack Guide Extension. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1977. </year>
Reference: [33] <author> D. Garlan, G.E. Kaiser, and D. Notkin. </author> <title> Using Tool Abstraction to Compose Systems. </title> <booktitle> IEEE Computer, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Pipes can only be formed in series, whereas computational chains allow parallel connection of `computational modules' and have richer interaction. The concept of computational modules is in essence similar to the tool abstraction paradigm <ref> [33] </ref>. That is, despite some differences, each module in a computational chain has a common structure with encapsulated `computations'.
Reference: [34] <author> G. Grubel. </author> <title> ANDECS|The Way Forward in Computer-Integrated Control Engineering. </title> <booktitle> In IEE Colloquium on `Open Systems: The Way Forward in Computer-Aided Control Engineering', </booktitle> <month> 15 December </month> <year> 1992. </year>
Reference: [35] <author> G. Grubel. </author> <title> ANDECS and CACE `Framework Reference Models'. OPEN-CACSD: Newsletter of the IFAC/IEEE-CSS Working Group on Guidelines for Open CACSD Software, </title> <journal> Swansea, </journal> <volume> 1(11), </volume> <month> February </month> <year> 1993. </year>
Reference-contexts: Another framework called A RSYST (ANDECS enhanced RSYST) framework has been proposed in <ref> [35] </ref>. The basis for this new framework, as stated in [35], is that the CACE FRM based on the CASE FRM is not complete because it does not include `algorithmic services' which are important to CACE. The rest of the services it supports are similar to the CASE-based FRM. <p> Another framework called A RSYST (ANDECS enhanced RSYST) framework has been proposed in <ref> [35] </ref>. The basis for this new framework, as stated in [35], is that the CACE FRM based on the CASE FRM is not complete because it does not include `algorithmic services' which are important to CACE. The rest of the services it supports are similar to the CASE-based FRM.
Reference: [36] <author> G. Grubel. </author> <title> The ANDECS-CACE Framework A RSYST for Integrated Analysis and Design of Controlled Systems. </title> <booktitle> In Proc. IEEE/IFAC Joint Symposium on Computer-Aided Control Systems Design, </booktitle> <address> Tucson, AZ, </address> <year> 1994. </year>
Reference-contexts: Primary emphasis was mostly on core CACE activities such as non-linear simulation, linear analysis and design in the frequency and time domains and model identification. From the mid 80s onwards, several research efforts in the field of requirements analysis for CACE such as <ref> [20, 36, 24, 53, 56, 64, 104, 107] </ref> identified a role for database management facility of some kind. Considerable research in database management aspects has also been carried out in other branches of engineering, such as software engineering, VLSI, ECAD and mechanical design [38]. <p> During different experiment runs the system automatically maintains the evolving data chains. The computational chains support automatic storage and retrieval of design data in a design-history database. Unlike GE-MEAD|which did not use any standard data structures| ANDECS defines its own control-oriented data structures. According to <ref> [36] </ref>, ANDECS automates the process of control design to such an extent that it makes it more like a computer-integrated control engineering environment than a computer-aided control engineering environment. The seven technology layers of ANDECS are discussed in detail in section 3.2 as a reference framework for other CACE environments.
Reference: [37] <author> G. Grubel. </author> <title> The ANDECS CACE Framework. </title> <journal> IEEE Control Systems, </journal> <volume> 15(2), </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: Data structures used or created by the core CACE packages were used and, when required, these were converted to the format used in a specific tool. The computational design experimenting technology in ANDECS <ref> [37] </ref> supports the iterative and exploratory nature of the control systems analysis and design cycle (and hence supports what we call project management to some extent) by allowing three levels of experiments: model experiments, method experiments and parametric experiments. The experiments are structured as modular and configurable computational chains.
Reference: [38] <author> P. Van Den Hamer and K. Lepoeter. </author> <title> Managing Design Data: The Five Dimensions of CAD Frameworks, Configuration Management and Product Data Management. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 84(1) </volume> <pages> 42-56, </pages> <month> January </month> <year> 1996. </year> <note> BIBLIOGRAPHY 109 </note>
Reference-contexts: Considerable research in database management aspects has also been carried out in other branches of engineering, such as software engineering, VLSI, ECAD and mechanical design <ref> [38] </ref>. In this chapter, an attempt has been made to trace the progress made so far in database management support in CACE environments, the directions that various research groups have taken while addressing this issue, and the different levels of database support that these groups have thought important for CACE. <p> (different representations of a complex entity), hierarchy (management of complex designs by breaking them into smaller parts), status (for verification and validation; useful for managing quality, consistency, functionality, reliability and safety) and variants (similar but not identical entities; they require management of both common and different features) is proposed in <ref> [38] </ref>. Usually two or three dimensions are used for most problems. This framework can serve as a tool for analyzing user requirements and alternative solutions for a version management mechanism.
Reference: [39] <author> K.A. Harbisson-Briggs, H.D. Joos, and J.M. Maciejowski. </author> <title> EXPRESS Data Definitions for Control Engineering. </title> <booktitle> In Proc. 12th IFAC World Congress, </booktitle> <address> Sydney, </address> <month> 18-23 July </month> <year> 1993. </year>
Reference-contexts: The use of the EXPRESS data definition language [92] for the definition of control engineering data is explored in [59] and <ref> [39] </ref>. EXPRESS allows for the definition of data types, class structures, and constraints of various kinds. It is an object-oriented language in the sense that class hierarchies can be conveniently defined by means of an inheritance mechanism and by means of individual objects that have distinct identities. <p> The use of a language adopted as a standard in other fields of engineering clearly offers a number of advantages. The German aerospace research organization DLR has produced an EXPRESS schema, part of which is presented in <ref> [39] </ref>. The classes relating to linear models are based on standards of control engineering data developed by a working group of the German engineering institution VDI. <p> For non-linear models, the class definitions which already exist in the modelling language Omola have been used. An example of an EXPRESS schema for a `dynamic system' taken from <ref> [39] </ref> is as follows: SCHEMA cace; ENTITY ds; (* dynamic system *) CHAPTER 3.
Reference: [40] <author> S. </author> <title> Hope. Information Repository Services. </title> <booktitle> In IEE Colloquium on `Open Systems: The Way Forward in Computer-Aided Control Engineering', </booktitle> <month> 15 December </month> <year> 1992. </year>
Reference-contexts: The developers, in order to sell more products, limit the degree of openness so as to appeal to the larger group of end-users. Object Management System Architecture (OMS) is an example of another architecture for achieving the desirable goal of `plugging in and out' of various applications <ref> [40] </ref>. The PCTE (Portable Common Tool Environment) [30] project, concerned with specification, design and implementation of a host structure for software engineering environments, was one of the first frameworks to be based on this architecture. The OMS architecture is shown in figure 3.6.
Reference: [41] <author> S. Hope, P.J. Fleming, and J.G. Wolff. </author> <title> Object-Oriented Database Support for Computer-Aided Control System Design . In H. </title> <editor> A. Barker, editor, </editor> <booktitle> IFAC/IMACS Symposium on Computer-Aided Design in Control Systems, Swansea, </booktitle> <pages> pages 200-204. </pages> <publisher> IFAC, Pergammon Press, </publisher> <month> July </month> <year> 1991. </year>
Reference-contexts: It manages complex structured data in a consistent and reliable manner over the design period. Users are, however, allowed to modify or add to the basic scheme. Another such object-oriented model for CACE is described in <ref> [41] </ref>. It allows changes to be made to existing tools/methods and also allows for the addition of new systems. There have been several developments of Matlab-like tools that incorporate object-oriented functionality such as Impact, ControlH, lab and Xmath (these tools are discussed in detail in chapter 2).
Reference: [42] <institution> Intoduction to lab, V 2.1.1. Institut National de Recherche en Informatique et Automatique, Le Chesnay Cedex, INRIA, France, </institution> <year> 1995. </year>
Reference: [43] <institution> ISID Module for Xmath. Integrated Systems Inc., </institution> <address> 3260 Jay Street, Santa Clara, CA 95054, </address> <year> 1994. </year>
Reference-contexts: GUIs give tools a certain degree of `intelligence' by displaying highlighted menus, buttons and plot handles which guide the users through different procedures. The ISID (Interactive System Identification) Module in Xmath <ref> [43, 77] </ref> makes use of these features of GUIs. The user can interactively identify a model from input-output data, analyze the influence of parameter changes on the resulting model quality, compare and validate different models and re-examine new results.
Reference: [44] <editor> M. Jamshidi and C.J. Herget, editors. </editor> <booktitle> Computer-Aided Control Systems Engineering. </booktitle> <publisher> North-Holland Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1985. </year>
Reference: [45] <author> H.D. Joos and M. </author> <title> Otter. Control Engineering Data Structures for Concurrent Engineering. </title> <booktitle> In IFAC/IMACS Symposium on Computer-Aided Design in Control Systems, Swansea, </booktitle> <pages> pages 107-112, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Considerable efforts have been made to identify appropriate entities which need to be represented for control engineering purposes, such as <ref> [45] </ref> which primarily identifies a set drawn from the needs of linear systems analysis and [4] which provides examples of the representation of nonlinear models. Early software such as Simnon [8] and CLADP [62] defined data models which made use of such system theoretic objects. <p> A basic database scheme based on an object-oriented data model and considered sufficient for building a `control engineering database' is proposed in <ref> [45] </ref>. It defines five general classes for general nonlinear dynamic systems, time invariant state-space systems, transfer functions, real functions (such as time functions) and complex functions (such as frequency response) as well as methods for operating on these classes.
Reference: [46] <author> R.H. Katz and T.J. Lehman. </author> <title> Database Support for Versions and Alternatives of Large Design Files. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(2), </volume> <month> March </month> <year> 1984. </year>
Reference-contexts: The problem of version management is generally addressed at two different levels. One is at low-level and concerns the efficient storage and retrieval mechanisms of different CHAPTER 3. DATABASE MANAGEMENT ASPECTS IN CACE 38 versions and alternatives of large design files. An example of research into these issues is <ref> [46] </ref> which proposes storage structures based on `differential files' in order to overcome large disk requirements in an engineering database. The second level is at high-level and concerns the way users perceive the creation and the use of different versions and alternatives.
Reference: [47] <author> W. Kent. </author> <title> Panel: An Overview of the Versioning Problem. </title> <journal> ACM SIGMOD Record, </journal> <volume> 18(2), </volume> <month> November </month> <year> 1989. </year>
Reference-contexts: This level deals with the functionality of a version management mechanism as it appears to the user. The examples from control engineering cited in this chapter take into account the high-level view of version management. A survey of major issues involved in version management is given in <ref> [47] </ref> along with a framework which can be useful for designing a version management mechanism. The framework includes questions such as: What should be versioned? How are versions used? How is update managed?, etc.
Reference: [48] <author> W. Kim. </author> <title> Introduction to Object-Oriented Databases. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: In object-oriented terminology, a class-composition hierarchy defines a complex object which has an is-part-of relationship with other objects i.e., an object which has a complex structure consisting of other sub-objects <ref> [48] </ref>. In control engineering a complete control system can be viewed as a complex object which contains the objects plant and controller (this is the simplest case; an example of a class-composition hierarchy for a control system with several components is given in chapter 5).
Reference: [49] <author> P. Kolb, C.A. Ganz, and M. Rickli. </author> <title> An Object-Oriented Kernel for Control Systems Engineering. </title> <booktitle> In 12th IFAC World Congress, Sydney, </booktitle> <volume> volume 6, </volume> <pages> pages 443-446, </pages> <year> 1993. </year>
Reference-contexts: The main drawback of the environment was that each Matlab command or function had to have its equivalent defined in the object-oriented system and this limited the extensibility of the environment. An object-oriented kernel for CACE proposed by Kolb et al in <ref> [49] </ref> for workspace and project management is discussed later in this section. Object-oriented approaches for integrated CACE environments are discussed in section 3.2. We now concentrate on a different aspect of CACE database management concerned with workspace organization and project management. <p> The software architecture of GE-MEAD is explained in the next section. CHAPTER 3. DATABASE MANAGEMENT ASPECTS IN CACE 41 The idea of integrating project management aspects within the programming environment is also proposed in <ref> [49] </ref>, whereby a kernel for a control systems engineering tool based on an object-oriented data model which aimed at providing better project management support is presented. <p> The different approaches for database management discussed in the chapter have their own justifications. But the most `practical' seems to be the one proposed by Kolb et al in <ref> [49] </ref>, where they emphasize that data management should be integrated into CACE numerical functionality and automated as far as possible so that users can concentrate more on the numerical processing involved in control systems analysis and design. <p> This is further discussed later in this section. GE-MEAD [104] and a more recent proposal by Kolb et al <ref> [49] </ref> also include some kind of computational chain facility. Van Overschee [77] describes a computational chain facility for a system identification module for use with Xmath, with a graphical interface for assembling the required algorithms. These environments have been discussed in chapter 3.
Reference: [50] <author> A. Kroner, P. Holl, W. Marquardt, and E.D. Gilles. </author> <title> DIVA|An Open Architecture for Dynamic Simulation. </title> <journal> Computers & Chemical Engineering, </journal> <volume> 14(11) </volume> <pages> 1289-1295, </pages> <year> 1990. </year>
Reference: [51] <author> J.N. Little, A. Emami-Naeini, </author> <title> and S.N. Bangert. CTRL-C and Matrix Environments for the Computer-Aided Design of Control Systems. </title> <editor> In M. Jamshidi and C. J. Herget, editors, </editor> <booktitle> Computer-Aided Control Systems Engineering. </booktitle> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1985. </year>
Reference: [52] <author> L. Ljung and T. Glad. </author> <title> Modeling of Dynamic Systems. </title> <publisher> Prentice Hall Information and System Sciences Series, </publisher> <year> 1994. </year> <note> BIBLIOGRAPHY 110 </note>
Reference: [53] <author> A.G.J. MacFarlane, G. Grubel, and J. Ackermann. </author> <title> Future Design Environments for Control Engineering. </title> <journal> Automatica, </journal> <pages> pages 165-176, </pages> <year> 1989. </year>
Reference-contexts: Primary emphasis was mostly on core CACE activities such as non-linear simulation, linear analysis and design in the frequency and time domains and model identification. From the mid 80s onwards, several research efforts in the field of requirements analysis for CACE such as <ref> [20, 36, 24, 53, 56, 64, 104, 107] </ref> identified a role for database management facility of some kind. Considerable research in database management aspects has also been carried out in other branches of engineering, such as software engineering, VLSI, ECAD and mechanical design [38].
Reference: [54] <author> J.M. Maciejowski. </author> <title> A Database Approach to Computer-Aided Control System Design. </title> <booktitle> In Proceedings of the American Control Conference, </booktitle> <address> San Francisco, </address> <month> June </month> <year> 1983. </year>
Reference-contexts: Some languages such as Impact [87] and Basile (now called lab) provide a larger set of data structures. Impact also allows user-defined data structures. This is an enhancement to earlier products since the user can define and modify data structures. As proposed in <ref> [54] </ref>, a useful way of defining a database is to view it as a `simulation' of an organization or of an activity. <p> In present CACE environments, it is most often left to the control engineer to decide how to keep track of such constraints and associations, and as pointed out in <ref> [54] </ref>, most of the efforts for defining compound data structures and control specific abstract data types allow for the alternative representation of systems but do not support the association of alternative representations of the same system.
Reference: [55] <author> J.M. Maciejowski. </author> <title> A Core Data Model for Computer-Aided Control Engineering. </title> <type> Technical Report CUED/F-CAMS/TR.257, </type> <institution> Cambridge University Engineering Department, </institution> <month> March </month> <year> 1985. </year>
Reference-contexts: Traditional commercially available databases are therefore not suited for control engineering purposes. What is required is a database which can cope naturally and efficiently with complex structured data. Semantic hierarchical data models that can represent such complex structured data were proposed for CACE in <ref> [55] </ref> and [9]. These data models attached great importance to incorporating semantic information in the database and the ability to change the data model dynamically by defining new attributes for a system or creating system entities of a possibly higher level. The hierarchical data model proposed in [55] was later implemented <p> for CACE in <ref> [55] </ref> and [9]. These data models attached great importance to incorporating semantic information in the database and the ability to change the data model dynamically by defining new attributes for a system or creating system entities of a possibly higher level. The hierarchical data model proposed in [55] was later implemented in a functional programming environment [16], an object-oriented programming environment [79] and a logic programming environment [101]. The principal idea behind all these implementations was to provide a full programming environment in addition to data management facilities.
Reference: [56] <author> J.M. Maciejowski. </author> <title> Data Structures and Software Tools for the Computer-Aided Design of Control Systems : A Survey. </title> <booktitle> Proc. IFAC Symposium on CADCS, </booktitle> <address> Beijing, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Primary emphasis was mostly on core CACE activities such as non-linear simulation, linear analysis and design in the frequency and time domains and model identification. From the mid 80s onwards, several research efforts in the field of requirements analysis for CACE such as <ref> [20, 36, 24, 53, 56, 64, 104, 107] </ref> identified a role for database management facility of some kind. Considerable research in database management aspects has also been carried out in other branches of engineering, such as software engineering, VLSI, ECAD and mechanical design [38]. <p> An explanation of why Matlab is more popular than software such as Simnon and CLADP, in spite of its having just one data type, is provided in <ref> [56] </ref>, which summarizes a comparison made between these environments: It is not just the definition and provision of sophisticated data structures which is necessary for CACE software. The data structures are valuable only if they are exploited in the construction of a powerful software environment. <p> For example, it made no distinction between tools (functions) for handling data and tools (functions) for calculating, say, stability margins <ref> [56] </ref>. The object-oriented implementation made use of `class mechanism' with full inheritance of properties and methods from general to specific classes for defining new data structures and methods.
Reference: [57] <author> J.M. Maciejowski. </author> <title> Multivariable Feedback Design. </title> <publisher> Addison-Wesley Publishers, </publisher> <year> 1989. </year>
Reference-contexts: The difference is that in LQG/LTR the cost weights Q and R, and the covariance matrices W and V are iterated in a particular way on the basis of computed frequency response properties. (For details see chapter 5 of <ref> [57] </ref>.) In particular, a common choice for the cost function is to set G = B and Q = C T C. The Container cost therefore becomes a Method Container, rather than a Data Container, as shown in figure 5.3, since it obtains B and C from the Container predictor.
Reference: [58] <author> J.M. Maciejowski. </author> <title> Software standards in the control systems community. </title> <booktitle> In Symposium on Computer-Aided Control Systems Design, </booktitle> <address> Napa, </address> <year> 1992. </year>
Reference-contexts: Some groups working on standardization in control systems analysis and design or related areas are specified in <ref> [58] </ref>. The International Federation of Automatic Control (IFAC) has set up a working group on guidelines for CACSD software. IEEE's Control Systems society (IEEE-CSS) also has a standing committee on standards. These two are now merged. <p> While these bodies are concerned entirely with moving live information around their organizations, and in particular around process plant, it is suggested in <ref> [58] </ref> that their activities should be of interest even to offline control engineers concerned with control design. <p> Although this approach still needs to be explored in detail, it seems to be a promising approach to implementing standard classes of control objects described in [13] and <ref> [58] </ref>. 4.4 Class-Composition Hierarchy Using Matlab Containers In this section we go beyond the functionality of Containers discussed in section 4.2.1 by showing that Containers can be used to support composite classes|namely those whose properties are themselves Containers. Such a composition of objects is desirable in many applications.
Reference: [59] <author> J.M. Maciejowski. </author> <title> The Role of EXPRESS in the CACE Environment. </title> <booktitle> In IEE Colloquium on `Open Systems: The Way Forward in Computer-Aided Control Engineering', </booktitle> <month> 15 December </month> <year> 1992. </year>
Reference-contexts: The use of the EXPRESS data definition language [92] for the definition of control engineering data is explored in <ref> [59] </ref> and [39]. EXPRESS allows for the definition of data types, class structures, and constraints of various kinds. It is an object-oriented language in the sense that class hierarchies can be conveniently defined by means of an inheritance mechanism and by means of individual objects that have distinct identities.
Reference: [60] <author> J.M. Maciejowski. </author> <title> Robustness of Multivariable Smith Predictors. </title> <journal> Journal of Process Control, </journal> <volume> 4(1) </volume> <pages> 29-32, </pages> <year> 1994. </year>
Reference-contexts: A linearized model of the distillation column is given as a matrix of transfer functions, each transfer function being a first-order lag with a time delay [81]: P (s) = 6 4:05e 27s 1:77e 28s 5:88e 27s 5:39e 18s 5:72e 14s 6:90e 15s 3 5 In <ref> [60] </ref>, a controller is designed for this plant with the structure of a multivariable Smith predictor. The controller is designed using LQG/LTR technique. The controller performance is analyzed for the nominal plant model and for the case where the plant deviates 84 CHAPTER 5.
Reference: [61] <author> J.M. Maciejowski. </author> <title> CACSD, GUIs and the Multivariable Frequency Domain Toolbox. </title> <booktitle> In IEE Colloquium on Advances in Computer-Aided Control System Design, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: Within any given GUI, results can be graphically compared with those of other models by exchanging models and/or data through variables in the Xmath main partition. CHAPTER 3. DATABASE MANAGEMENT ASPECTS IN CACE 42 In <ref> [61] </ref> two models for GUI, especially in the context of CACE software, are classified as `object-oriented' or `action-oriented'. In an object-oriented GUI the basic notion is that one manipulates `objects' or `things'. The selection of an operation to which the object is to be submitted is secondary.
Reference: [62] <author> J.M. Maciejowski and A.G.J. MacFarlane. CLADP: </author> <title> The Cambridge Linear Analysis and Design Programs. </title> <journal> Control Systems Magazine, </journal> <month> December </month> <year> 1982. </year>
Reference-contexts: Early software such as Simnon [8] and CLADP <ref> [62] </ref> defined data models which made use of such system theoretic objects. Simnon distinguished between entities such as `continuous system' and `connecting system', while CLADP distinguished between `state-space models', `transfer function matrices' and others. These facilities gave rise to some sophisticated features.
Reference: [63] <author> J.M. Maciejowski and M. Szymkat. </author> <title> Containers|A Step Towards Objects with Mat-lab. In S.E. </title> <editor> Mattsson, J.O. Gray, and F.E. Cellier, editors, </editor> <booktitle> IEEE/IFAC Joint Symposium on Computer-Aided Control System Design, </booktitle> <address> Tucson, AZ, </address> <year> 1994. </year>
Reference-contexts: The example on the problem of data management by Taylor et al [105] in section 3.1 shows how easily thousands of such objects can be generated in even modest projects. Matlab Containers <ref> [63, 100] </ref> provide a means of solving some of these problems. The features of class-composition hierarchies [89] and computational chains [90] that have been built on top of the basic Container concept enhance the overall functionality of Containers. The development of Matlab Containers was initiated by Maciejowski and Szymkat [63]. <p> The features of class-composition hierarchies [89] and computational chains [90] that have been built on top of the basic Container concept enhance the overall functionality of Containers. The development of Matlab Containers was initiated by Maciejowski and Szymkat <ref> [63] </ref>. The explanation in section 4.2.1 is a result of their research, except for the concept of `static' and `dynamic' properties which were introduced later as a result of a need that arose during the course of this research. <p> Some descriptions in section 4.3 are also taken from the earlier research by Maciejowski and Szymkat reported in <ref> [63] </ref>. The remaining work reported in this chapter and in chapter 5 was conducted later as a part of research for this thesis. 54 CHAPTER 4. <p> The data structure (packed matrix) for storing the frequency responses and the frequency vector in MUT is called a VARYING matrix. A VARYING matrix is also useful for storing time responses. A way of resolving this problem using Matlab Containers was given in <ref> [63] </ref> and is described here. An obvious way is to define Containers for widely used classes of objects such as the class ltiss defined above.
Reference: [64] <author> J.M. Maciejowski and C.Y. Tan. </author> <title> DB-Prolog Environments for Computer-Aided Control Engineering. </title> <editor> In D. A. Linkens, editor, </editor> <title> CAD for Control Systems. </title> <publisher> Marcel Dekker Inc., </publisher> <month> April </month> <year> 1992. </year>
Reference-contexts: Primary emphasis was mostly on core CACE activities such as non-linear simulation, linear analysis and design in the frequency and time domains and model identification. From the mid 80s onwards, several research efforts in the field of requirements analysis for CACE such as <ref> [20, 36, 24, 53, 56, 64, 104, 107] </ref> identified a role for database management facility of some kind. Considerable research in database management aspects has also been carried out in other branches of engineering, such as software engineering, VLSI, ECAD and mechanical design [38].
Reference: [65] <author> J.M. Maciejowski and J.H. Taylor. </author> <title> A Report on the 1993 IFAC World Congress Standards and Guidelines Session. </title> <booktitle> In Proc. IEEE/IFAC Joint Symposium on Computer-Aided Control Systems Design, </booktitle> <address> Tucson, AZ, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: The requirement exists for passing data around within a single integrated environment CHAPTER 3. DATABASE MANAGEMENT ASPECTS IN CACE 50 as well as for exchanging data between project collaborators <ref> [65] </ref>. An essential prerequisite for this is an agreed definition of the data to be exchanged in terms of both the syntax and the semantics. Once agreement is reached, there are additional benefits to be gained.
Reference: [66] <author> H. Mason. </author> <title> STEP: Overview and Fundamental Principles. </title> <type> Technical report, </type> <institution> ISO TC184/SC4/WGPMAG, </institution> <year> 1991. </year> <note> BIBLIOGRAPHY 111 </note>
Reference-contexts: It is an object-oriented language in the sense that class hierarchies can be conveniently defined by means of an inheritance mechanism and by means of individual objects that have distinct identities. EXPRESS is part of the STEP/PDES <ref> [66] </ref> standard for engineering data exchange which has been adopted by the ISO. The use of a language adopted as a standard in other fields of engineering clearly offers a number of advantages.
Reference: [67] <institution> MATLAB User Guide. The MathWorks Inc., </institution> <address> 24 Prime Park Way, Natick, MA 01760, </address> <year> 1994. </year>
Reference: [68] <institution> M atrix x Products Family. Integrated Systems Inc., </institution> <address> 3260 Jay Street, Santa Clara, CA 95054, </address> <year> 1994. </year>
Reference-contexts: The functionality of ANDECS, especially in the context of computational experimenting and database management, is discussed in detail in the next chapter. The Matrix x <ref> [68] </ref> family of products is another example of an integrated set of CAE tools that aid engineers in the design, simulation and implementation of control systems. It CHAPTER 2.
Reference: [69] <author> S.E. Mattsson and M. Andersson. </author> <title> Omola|An Object-oriented Modeling Language. </title> <editor> In M. Jamshidi and C.J. Herget, editors, </editor> <booktitle> Recent Advances in Computer-Aided Control Systems Engineering. </booktitle> <publisher> Elsevier Science Publishers, </publisher> <year> 1993. </year>
Reference-contexts: The remaining work reported in this chapter and in chapter 5 was conducted later as a part of research for this thesis. 54 CHAPTER 4. MATLAB CONTAINERS FOR CACE 55 Containers have some, but not all of the properties of objects which appear in `object-oriented programming' and `object-oriented databases' <ref> [10, 3, 69] </ref>. The term `Container' has been chosen in order to avoid the appearance of claiming real object-like behaviour because certain crucial properties of objects, such as inheritance of class definitions, are absent from `Containers'.
Reference: [70] <author> S.E. Mattsson, M. Andersson, and K.J. -Astrom. </author> <title> Object-Oriented Modeling and Simulation. In D.A. Linkens, editor, CAD for Control Systems. </title> <publisher> Marcel Dekker, Inc., </publisher> <year> 1993. </year>
Reference: [71] <author> A.D. </author> <title> McGettrick. </title> <booktitle> ALGOL 68|A First and Second Course. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1978. </year>
Reference: [72] <author> N. Munro. </author> <title> ECSTASY|A Control System CAD Environment. </title> <booktitle> In Proc. 11th IFAC World Congress on Automatic Control, </booktitle> <address> Tallinn, Estonia, </address> <month> 13-17 August </month> <year> 1990. </year>
Reference: [73] <author> N. Munro and C.P. Jobling. ECSTASY: </author> <title> A Control System CAD Environment. In D.A. Linkens, editor, CAD for Control Systems. </title> <publisher> Marcel Dekker, Inc., </publisher> <year> 1993. </year>
Reference: [74] <author> L.W. Nagel. </author> <title> SPICE2: A Computer Program to Simulate Semiconductor Circuits. </title> <type> Technical Report ERL-M520, </type> <institution> Electronics Research Laboratory, University of Cali-fornia, Berkeley, </institution> <year> 1975. </year>
Reference: [75] <institution> The Nonlinear Control Design Toolbox. The MathWorks Inc., </institution> <address> 24 Prime Park Way, Natick, MA 01760, </address> <year> 1994. </year>
Reference: [76] <author> B.A. Oggunaike and W.H. Ray. </author> <title> Multivariable controller design for linear systems having multiple time delays. </title> <journal> AIChEJ, </journal> <volume> 25 </volume> <pages> 1043-1057, </pages> <year> 1979. </year>
Reference-contexts: The controller performance is analyzed for the nominal plant model and for the case where the plant deviates 84 CHAPTER 5. CASE STUDY 85 from the assumed model. 5.2 Multivariable Smith Predictors A multivariable Smith predictor controller has the structure shown in figure 5.1 <ref> [76] </ref>. The plant is assumed to be stable and is described by a transfer function matrix P (s).
Reference: [77] <author> P. Van Overschee. </author> <title> Subspace Identification. </title> <type> PhD thesis, </type> <institution> Katholieke Universiteit Leeuven, Belgium, </institution> <year> 1994. </year>
Reference-contexts: GUIs give tools a certain degree of `intelligence' by displaying highlighted menus, buttons and plot handles which guide the users through different procedures. The ISID (Interactive System Identification) Module in Xmath <ref> [43, 77] </ref> makes use of these features of GUIs. The user can interactively identify a model from input-output data, analyze the influence of parameter changes on the resulting model quality, compare and validate different models and re-examine new results. <p> This is further discussed later in this section. GE-MEAD [104] and a more recent proposal by Kolb et al [49] also include some kind of computational chain facility. Van Overschee <ref> [77] </ref> describes a computational chain facility for a system identification module for use with Xmath, with a graphical interface for assembling the required algorithms. These environments have been discussed in chapter 3. The computational chains that we have implemented are used as a tool for `design experimentation' in Matlab.
Reference: [78] <author> C.C. Pantelides. </author> <title> SpeedUp|Recent Advances in Process Simulation. </title> <journal> Computers & Chemical Engineering, </journal> <volume> 12(7) </volume> <pages> 745-755, </pages> <year> 1988. </year>
Reference: [79] <author> P. Phaal. </author> <title> An Object Oriented Environment for Control System Design. </title> <type> PhD thesis, </type> <institution> Cambridge University Engineering Department, </institution> <year> 1987. </year>
Reference-contexts: The hierarchical data model proposed in [55] was later implemented in a functional programming environment [16], an object-oriented programming environment <ref> [79] </ref> and a logic programming environment [101]. The principal idea behind all these implementations was to provide a full programming environment in addition to data management facilities. <p> The object-oriented functionality in these tools is geared more towards `programming style' than database management. An early work on object-oriented pro CHAPTER 3. DATABASE MANAGEMENT ASPECTS IN CACE 37 gramming environment for CACE, mentioned earlier, is <ref> [79] </ref>. This environment did not use any object-oriented database management schemes directly. Rather, a small area of the control system data model was used to evaluate the suitability of object-oriented systems for representing Matlab designs.
Reference: [80] <author> R.S. Pressman. </author> <title> Software Engineering|A Practitioner's Approach. </title> <publisher> McGraw-Hill, </publisher> <year> 1992. </year>
Reference-contexts: The goal of CASE technology is to separate an application program's design from its coded implementation and to automate the generation of software that is based on a design built with CASE tools <ref> [80] </ref>. This is however not true for CACE environments because once an off-line controller design is available, the actual implementation of the controller is not a major problem. There are several tools available for this, for example, CHAPTER 3.
Reference: [81] <author> D.M. Prett and M. Morari. </author> <title> The Shell Process Control Workshop, </title> <address> Boston, </address> <year> 1987. </year> <note> BIBLIOGRAPHY 112 </note>
Reference-contexts: We shall discuss the use of Matlab Containers both with and without computational chains and the advantages of establishing a class-composition hierarchy for representing different system descriptions. 5.1 The Process The case study is based on the so-called `Shell process control problem' <ref> [81] </ref>, which has become well known as a `benchmark' problem. The plant is a distillation column with 7 outputs and 5 inputs, though in this example we will use only 3 inputs and 2 outputs. This will be enough to demonstrate the utility of Containers, without introducing unnecessary complexity. <p> This will be enough to demonstrate the utility of Containers, without introducing unnecessary complexity. A linearized model of the distillation column is given as a matrix of transfer functions, each transfer function being a first-order lag with a time delay <ref> [81] </ref>: P (s) = 6 4:05e 27s 1:77e 28s 5:88e 27s 5:39e 18s 5:72e 14s 6:90e 15s 3 5 In [60], a controller is designed for this plant with the structure of a multivariable Smith predictor. The controller is designed using LQG/LTR technique.
Reference: [82] <editor> A. Ralston and E.D. Reilly, editors. </editor> <booktitle> Encyclopedia of Computer Science. </booktitle> <publisher> Chapman & Hall, </publisher> <address> London, </address> <year> 1993. </year>
Reference: [83] <author> O. Ravn and M. Szymkat. </author> <title> The Evolution of CACSD Tools|A Software Engineering Perspective. </title> <booktitle> In IFAC/IMACS Symposium on Computer-Aided Design in Control Systems, </booktitle> <address> Swansea, </address> <year> 1991. </year>
Reference-contexts: These two simple classifications have had no doubt a great influence on development of CACE software, but modern applications of control theory and the different purposes/tasks for which CACE software is used these days require a broader classification of its users. One such classification is given in <ref> [83] </ref>, where three distinct users of CACE environments are identified as algorithm designers (extenders), software developers (implementors) and end-users. Extenders are numerical analysts or domain specific theorists CHAPTER 2. REVIEW AND REQUIREMENTS ANALYSIS 29 who usually develop prototype systems to test algorithms, abstract formulations and designs.
Reference: [84] <author> O. Ravn and M. Szymkat. </author> <title> Requirements for user interaction support in future cace environments. </title> <booktitle> In Proc. IEEE/IFAC Joint Symposium on Computer-Aided Control Systems Design, </booktitle> <address> Tucson, AZ, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: Although this approach is quite effective, the closed architecture of such environments precludes easy addition of tools from other vendors. 2.2 Requirements Analysis In this section, some important user requirements are listed. These requirements have been put together from different sources such as <ref> [6, 13, 84, 86, 103] </ref>. Most of the requirements have already been discussed in section 2.1. Here they are summarized and listed separately as requirements for modelling and simulation, programming language and database management support. <p> The requirements for user interaction support are closely related to the iterative nature of the design process. Most existing CACE tools support sequential interaction style. As pointed out in <ref> [84] </ref>, there is a need for an asynchronous interaction style, where many tasks are at the disposal of the user at the same time and sequencing within one task is independent of sequencing within the other.
Reference: [85] <author> C.M. Rimvall. </author> <title> Man-machine Interfaces and Implementation Issues in CACSD. </title> <type> PhD thesis, </type> <institution> Swiss Federal Institute of Technology, </institution> <address> Zurich, </address> <year> 1986. </year>
Reference: [86] <author> C.M. Rimvall and M. Wette. </author> <title> Towards Standards for CACE Command Syntax and Graphical Interfaces. </title> <booktitle> In Proc. 12th IFAC World Congress, </booktitle> <address> Sydney, </address> <month> 18-23 July </month> <year> 1993. </year>
Reference-contexts: Although this approach is quite effective, the closed architecture of such environments precludes easy addition of tools from other vendors. 2.2 Requirements Analysis In this section, some important user requirements are listed. These requirements have been put together from different sources such as <ref> [6, 13, 84, 86, 103] </ref>. Most of the requirements have already been discussed in section 2.1. Here they are summarized and listed separately as requirements for modelling and simulation, programming language and database management support.
Reference: [87] <author> M. Rimvall and F.E. </author> <title> Cellier. A Structural Approach to CACSD. </title> <editor> In M. Jamshidi and C. J. Herget, editors, </editor> <booktitle> Computer-Aided Control Systems Engineering. </booktitle> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1985. </year>
Reference-contexts: These environments give the users the flexibility of the Matlab environment but the data structures in these tools cannot be modified and there is no facility for user-defined data structures, so they are only suitable for representing simple structures. Some languages such as Impact <ref> [87] </ref> and Basile (now called lab) provide a larger set of data structures. Impact also allows user-defined data structures. This is an enhancement to earlier products since the user can define and modify data structures.
Reference: [88] <author> H.H. </author> <title> Rosenbrock. On the Design of Linear Multivariable Control Systems. In IFAC, </title> <type> Session 1, Paper 1A, </type> <year> 1966. </year>
Reference: [89] <author> A.B. Saifuddin, J.M. Maciejowski, and M. Szymkat. </author> <title> Analysis of Multivariable Smith Predictors Using Matlab Containers. In IEE Colloquium on Applied Control Techniques using Matlab, Digest No: </title> <address> 1995/014, London, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: The example on the problem of data management by Taylor et al [105] in section 3.1 shows how easily thousands of such objects can be generated in even modest projects. Matlab Containers [63, 100] provide a means of solving some of these problems. The features of class-composition hierarchies <ref> [89] </ref> and computational chains [90] that have been built on top of the basic Container concept enhance the overall functionality of Containers. The development of Matlab Containers was initiated by Maciejowski and Szymkat [63]. <p> In this section, we explore how Matlab Containers can be used on their own (without computational chains) for analysis of multivariable Smith predictors. Such a use of Matlab Containers has been discussed in detail in <ref> [89] </ref>. Two classes of Containers, smith analyze d and smith analyze f, can be defined for the purpose of analysis as follows: &gt;> class ('smith_analyze_d',['CONTROLLER|SENSITIVITY| CMPL_SENSITIVITY'],[5,5,5]); &gt;> class ('smith_analyze_f',['FREQUENCY|CONTROLLER| SENSITIVITY|CMPL_SENSITIVITY'],[1,1,1,1]); The properties of the former are delay multivariable systems, while those of the latter are multivariable frequency responses.
Reference: [90] <author> A.B. Saifuddin, M. Szymkat, and J.M. Maciejowski. </author> <title> Computational Chains for CACSD Using Matlab Containers. </title> <booktitle> To appear in the Proceedings of IFAC/IEEE Symposium on Computer-aided Control Systems Design, </booktitle> <address> Michigan, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Matlab Containers [63, 100] provide a means of solving some of these problems. The features of class-composition hierarchies [89] and computational chains <ref> [90] </ref> that have been built on top of the basic Container concept enhance the overall functionality of Containers. The development of Matlab Containers was initiated by Maciejowski and Szymkat [63].
Reference: [91] <editor> A.S.M. Sajeev and A.J. Hurst. </editor> <booktitle> Programming Persistence in . IEEE Computer, </booktitle> <volume> 25(9) </volume> <pages> 57-66, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Matlab Containers provide something akin to object-oriented database management facilities to engineering users of Matlab. Basically, this enhancement provides a database of objects which is persistent <ref> [91] </ref>, namely one which survives after a particular interactive session has ended (this is in contrast to the transient variable form which only appears in the workspace|dynamic memory) and interactions with it are in the style of database transactions: Containers can be browsed, queried, or updated.
Reference: [92] <author> D. Schenck. </author> <title> Information Modelling Language EXPRESS. </title> <type> Technical report, </type> <institution> ISO TC184/SC4/WG1, </institution> <year> 1988. </year>
Reference-contexts: For example, the agreed definitions could serve as the basis for application specific object-oriented database systems and could be used for the implementation of numerical algorithms that operate on these standard data definitions. The use of the EXPRESS data definition language <ref> [92] </ref> for the definition of control engineering data is explored in [59] and [39]. EXPRESS allows for the definition of data types, class structures, and constraints of various kinds.
Reference: [93] <institution> The System Identification Toolbox. The MathWorks Inc., </institution> <address> 24 Prime Park Way, Natick, MA 01760, </address> <year> 1995. </year>
Reference-contexts: In an object-oriented GUI the basic notion is that one manipulates `objects' or `things'. The selection of an operation to which the object is to be submitted is secondary. An example of such a GUI is the one provided in the new version of the Matlab System Identification Toolbox <ref> [93] </ref> which focuses on management of objects, especially data sets and models. Operations on these are selected one at a time. In an `action-oriented' GUI the basic notion is that one selects `actions' or `operations'.
Reference: [94] <institution> Simulink User's Guide. The MathWorks Inc., </institution> <address> 24 Prime Park Way, Natick, MA 01760, </address> <year> 1994. </year>
Reference: [95] <author> B.T. Smith, J.M. Boyle, J.J. Dongarra, B.S. Garbow, Y. Ikebe, V.C. klema, and C.B. Moler. </author> <title> Matrix Eigensystem Routines|Eispack Guide. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1976. </year> <note> BIBLIOGRAPHY 113 </note>
Reference: [96] <author> H.A. </author> <title> Spang. The Federated Computer-Aided Control Design System. </title> <editor> In M. Jamshidi and C. J. Herget, editors, </editor> <booktitle> Computer-Aided Control Systems Engineering. </booktitle> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1985. </year>
Reference: [97] <author> J.C. Strauss. </author> <title> The SCi Continuous System Simulation Language (CSSL). </title> <journal> Simulation, </journal> <volume> 9 </volume> <pages> 281-303, </pages> <year> 1967. </year>
Reference: [98] <institution> SystemBuild. Integrated Systems Inc., </institution> <address> 3260 Jay Street, Santa Clara, CA 95054, </address> <year> 1994. </year>
Reference: [99] <author> M. Szymkat and J.M. Maciejowski. </author> <title> Time Delay Toolbox for Matlab. In S.E. </title> <editor> Matts-son, J.O. Gray, and F.E. Cellier, editors, </editor> <booktitle> Proceedings, IEEE/IFAC Joint Symposium on Computer-Aided Control System Design, </booktitle> <address> Tucson, AZ, </address> <year> 1994. </year>
Reference-contexts: in earlier chapters, but they are stated here again so as to give a clear background picture of the need for something like Matlab Containers. 4.1 Motivation The original motivation for the development of Containers arose during the development of a Matlab toolbox for working with systems containing time delays <ref> [99] </ref>. It became apparent that a way of aggregating data was needed in order to avoid the users having to specify very long argument lists every time a function was called. <p> Most of these components are linear systems with time delays. A suitable representation for systems with time delays, compatible with Matlab is available in the Time Delay Toolbox <ref> [99] </ref>. This toolbox supports delay matrices and delay multivariable systems; the latter can be used to represent the systems which appear in the multivariable Smith predictor. <p> As stated earlier, a suitable representation for a delay multivariable system is given in the Time Delay Toolbox <ref> [99] </ref>, where it is defined as a composition of five delay matrices where each delay matrix is composed of a matrix of coefficients and a delay vector. These representations add two more levels to the class-composition hierarchy.
Reference: [100] <author> M. Szymkat, J.M. Maciejowski, </author> <title> and A.B. Saifuddin. Matlab Containers for Control Engineering: Concepts and Applications. </title> <note> To be submitted to IEEE Transactions on Control Systems Technology, </note> <year> 1996. </year>
Reference-contexts: The example on the problem of data management by Taylor et al [105] in section 3.1 shows how easily thousands of such objects can be generated in even modest projects. Matlab Containers <ref> [63, 100] </ref> provide a means of solving some of these problems. The features of class-composition hierarchies [89] and computational chains [90] that have been built on top of the basic Container concept enhance the overall functionality of Containers. The development of Matlab Containers was initiated by Maciejowski and Szymkat [63].
Reference: [101] <author> C.Y. Tan. </author> <title> A Logic Programming based CACSD Environment. </title> <type> Technical Report CUED/F-INFENG/TR46, </type> <institution> Cambridge University Engineering Department, </institution> <year> 1990. </year>
Reference-contexts: The hierarchical data model proposed in [55] was later implemented in a functional programming environment [16], an object-oriented programming environment [79] and a logic programming environment <ref> [101] </ref>. The principal idea behind all these implementations was to provide a full programming environment in addition to data management facilities.
Reference: [102] <author> C.Y. Tan and J.M. Maciejowski. DB-Prolog: </author> <title> A Database Programming Environment for Computer Aided Control Engineering. </title> <booktitle> In Proceedings of the Workshop in Expert Systems, AI and Software Engineering Application, in association with the International Logic Programming Symposium, </booktitle> <address> San Diego, California, USA, </address> <month> 28-31 October </month> <year> 1991. </year>
Reference: [103] <author> J.H. Taylor, D.K. Frederick, C.M. Rimvall, and H.A. Sutherland. </author> <title> Computer-Aided Control Engineering Environments: Architecture, User Interface, Database Management, </title> <booktitle> and Expert Aiding. In Proc. 11th IFAC World Congress on Automatic Control, </booktitle> <address> Tallinn, Estonia, </address> <month> 13-17 August </month> <year> 1990. </year>
Reference-contexts: Although this approach is quite effective, the closed architecture of such environments precludes easy addition of tools from other vendors. 2.2 Requirements Analysis In this section, some important user requirements are listed. These requirements have been put together from different sources such as <ref> [6, 13, 84, 86, 103] </ref>. Most of the requirements have already been discussed in section 2.1. Here they are summarized and listed separately as requirements for modelling and simulation, programming language and database management support. <p> In GE-MEAD <ref> [103] </ref>, the data element categories included are project, model, component, description, result and condition specification. Models comprise of components and a description (type, connection, etc.). Associated with each model are results, for example, files containing frequency response data or time-history data. Models and results are CHAPTER 3.
Reference: [104] <author> J.H. Taylor and G. Grubel. </author> <title> Database Management Guidlines for Computer-Aided Control Engineering. </title> <booktitle> In Proc. 12th IFAC World Congress, </booktitle> <address> Sydney, </address> <month> 18-23 July </month> <year> 1993. </year>
Reference-contexts: Primary emphasis was mostly on core CACE activities such as non-linear simulation, linear analysis and design in the frequency and time domains and model identification. From the mid 80s onwards, several research efforts in the field of requirements analysis for CACE such as <ref> [20, 36, 24, 53, 56, 64, 104, 107] </ref> identified a role for database management facility of some kind. Considerable research in database management aspects has also been carried out in other branches of engineering, such as software engineering, VLSI, ECAD and mechanical design [38]. <p> A detailed design for project management support for CACE including a complete hierarchy of projects, models, components, and results, and for version control is presented in [105] and <ref> [104] </ref>. The design is based on the experiences gained from the GE-MEAD and ANDECS projects. It catalogues and categorizes database elements for control engineering, establishes the relations between them, and proposes a hierarchical database framework with the levels project, model, attribute and element as shown in figure 3.1. CHAPTER 3. <p> We think of all Containers as `tools' (even though some `Data Containers' described later might actually store data values) and the results of their computations as `data' (which are stored in files not Containers). This is further discussed later in this section. GE-MEAD <ref> [104] </ref> and a more recent proposal by Kolb et al [49] also include some kind of computational chain facility. Van Overschee [77] describes a computational chain facility for a system identification module for use with Xmath, with a graphical interface for assembling the required algorithms.
Reference: [105] <author> J.H. Taylor, K.H. Nieh, </author> <title> and P.A. Mroz. A Database Management Scheme for Computer-Aided Control Engineering. </title> <booktitle> In American Control Conference, </booktitle> <address> Atlanta, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: All such support is very rudimentary and leaves it entirely up to the user to maintain the integrity of the database. An Example of the CACE Database Management Problem: The magnitude of the control engineer's database management problem can be appreciated by an example given in <ref> [105] </ref>, which shows how in many industrial applications, control engineering activity develops a substantial database. <p> The loss of integrity, in the sense of not knowing which analysis and design results were obtained with which instances of the model, is the most common fault encountered in documenting the control system design cycle, and as stated in <ref> [105] </ref>, results in irreproducible results, unsupportable design decisions and unproductive reiteration. This is where, a version management system which keeps track of different versions and alternatives of models and control systems designs can be very useful. <p> A detailed design for project management support for CACE including a complete hierarchy of projects, models, components, and results, and for version control is presented in <ref> [105] </ref> and [104]. The design is based on the experiences gained from the GE-MEAD and ANDECS projects. It catalogues and categorizes database elements for control engineering, establishes the relations between them, and proposes a hierarchical database framework with the levels project, model, attribute and element as shown in figure 3.1. <p> As discussed in previous chapters, a major problem confronting users of Matlab and other similar products is the proliferation of data objects and custom `scripts' which accumulate rapidly in the workspace and/or filespace during any non-trivial project. The example on the problem of data management by Taylor et al <ref> [105] </ref> in section 3.1 shows how easily thousands of such objects can be generated in even modest projects. Matlab Containers [63, 100] provide a means of solving some of these problems.
Reference: [106] <author> J.H. Taylor, M. Rimvall, and H.A. Sutherland. </author> <title> Future Developments in Modern Environments for CADCS. </title> <booktitle> In IEEE Symposium on Computer-Aided Control Systems Design, </booktitle> <address> Napa, </address> <month> 17-19 March </month> <year> 1992. </year>
Reference: [107] <author> J.H. Taylor, M. Rimvall, and H.A. Sutherland. </author> <title> Computer-Aided Control Engineering Environments. In D.A. Linkens, editor, CAD for Control Systems. </title> <publisher> Marcel Dekker, Inc., </publisher> <year> 1993. </year> <note> BIBLIOGRAPHY 114 </note>
Reference-contexts: Primary emphasis was mostly on core CACE activities such as non-linear simulation, linear analysis and design in the frequency and time domains and model identification. From the mid 80s onwards, several research efforts in the field of requirements analysis for CACE such as <ref> [20, 36, 24, 53, 56, 64, 104, 107] </ref> identified a role for database management facility of some kind. Considerable research in database management aspects has also been carried out in other branches of engineering, such as software engineering, VLSI, ECAD and mechanical design [38].
Reference: [108] <author> R. Walker, C. Gregory Jr., and S. Shah. Matrix-X, </author> <title> A Data Analysis, System Identification, Control Design and Simulation Package. </title> <journal> IEEE Control Systems Magazine, </journal> <volume> 2(4) </volume> <pages> 30-37, </pages> <year> 1982. </year>
Reference: [109] <author> M. Wette. Casey: </author> <title> A Computer-Aided Engineering System. </title> <booktitle> In IEEE Symposium on Computer-Aided Control Systems Design, </booktitle> <address> Napa, </address> <month> 17-19 March </month> <year> 1992. </year>
Reference: [110] <institution> Xmath Basics. Integrated Systems Inc., </institution> <address> 3260 Jay Street, Santa Clara, CA 95054, </address> <year> 1994. </year>
Reference-contexts: The success of the flexible Matlab environment led to the development of several software environments, the so-called `Matlab plus data structures'. For example, Xmath <ref> [110] </ref>, CTRL-C [22], Robust Control Toolbox for Matlab [21] and -Analysis and Synthesis Toolbox for Matlab [11].
Reference: [111] <editor> S.B. Zdonik and D. Maier (editors). </editor> <booktitle> Readings in Object-oriented Database Systems. </booktitle> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <year> 1990. </year>
Reference-contexts: DATABASE MANAGEMENT ASPECTS IN CACE 36 ally complete or sufficiently low level database definition and programming language; it would be difficult, for instance, to perform control engineering design using a conventional database programming language like SQL). Almost all of these extra features are included in object-oriented database management systems <ref> [111, 18] </ref>. Object-oriented databases are in fact gaining popularity in the comparatively new `complex' domains such as CASE, VLSI, CAD/CAM and other branches of CAE. A survey of object-oriented database management systems specifically designed for engineering applications is given in [2].
References-found: 111

