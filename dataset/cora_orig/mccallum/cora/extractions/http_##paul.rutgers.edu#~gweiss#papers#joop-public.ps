URL: http://paul.rutgers.edu/~gweiss/papers/joop-public.ps
Refering-URL: http://paul.rutgers.edu/~gweiss/papers/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: 1 Implementing Design Patterns with Object-Oriented Rules  
Author: Gary M. Weiss Johannes P. Ros Anoop Singhal 
Keyword: Answer Overview  
Abstract: ANSWER-4ESS, an operation support system (OSS) for maintaining and monitoring the 4ESS switches distributed throughout the AT&T network, recently became the first product to use the R++ languagean extension to C++ that adds support for objectoriented rules. This paper shows how these rules facilitate inter-object communication and enable frequently occurring design patterns to be implemented in a way that leads to more understandable, maintainable and reusable code. ANSWER (Automatic Network Surveillance with Expert Rules) can be understood by viewing its input/output behavior: it receives alarms from 4ESS switches and outputs alerts when it believes human action may be warranted. ANSWERs intelligent decision making is controlled by its knowledge base which has been implemented in R++. The 4ESS has a well defined object model and hence ANSWER was able to benefit from objectoriented rules. The object model is based on the view of a 4ESS switch as a hierarchical collection of parts of class Device. Devices are the central objects in ANSWER (devices have state, a list of associated alarms, subparts, etc.). The object model of the 4ESS and the use of rules in ANSWER to implement model-based reasoning have been discussed in detail [1,2,3] 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Crawford, J., Dvorak, D., Litman, D., Mishra, A., Patel-Schneider, P., </author> <title> Path-Based Rules in Object-Oriented Programming, </title> <booktitle> Proceedings of the Thirteenth National Conference on Artificial Intelligence (AAAI-96), </booktitle> <month> August </month> <year> 1996. </year> <note> Available from R++ home page. </note>
Reference: 2. <author> Mishra, A., Ros, J., Singhal, A., Weiss, G., Litman, D., Patel-Schneider, P. Dvorak, D., Crawford, J., </author> <title> R++: Using Rules in Object-Oriented Designs, </title> <booktitle> Addendum Object-Oriented Programming Systems, Languages, and Applications (OOPSLA), </booktitle> <month> October </month> <year> 1996. </year> <note> Available from R++ home page. </note>
Reference: 3. <author> Singhal, A. Weiss, G., Ros, J., </author> <title> A Model-Based Reasoning Approach to Network Monitoring, ACM Workshop on Databases for Active and Real Time Systems (DART-96), </title> <month> November </month> <year> 1996. </year>
Reference: 4. <institution> R++ home page: </institution> <note> http://www.research.att.com/sw/tools/r++. </note>
Reference-contexts: This means that R++ rules respect the object model. The rules in Figure 2 are path based since spouse and children are accessible via class Person. For those interested in a more in-depth understanding of R++, see the R++ home page <ref> [4] </ref>. Design Patterns Building software systems is very difficult. Object oriented technology provides a way of modeling the world which often facilitates the analysis, design and implementation of such systems. <p> The language is available free to academic institutions for noncommercial purposes and in the future should be available to commercial users via licensed software vendors <ref> [4] </ref>. - 6 -
Reference: 5. <author> Gamma, E. Helm, R., Johnson, R. Vlissides, J., </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Design patterns are reusable parts of software design or, more specifically, descriptions of communicating objects and classes that are customized to solve a general design problem in a particular context <ref> [5] </ref>. In this paper we are concerned with behavioral design patterns, which characterize the ways in which classes or objects interact and distribute responsibility. <p> The motivation for this pattern is that a side-effect of partitioning a system into a collection of cooperating classes is the need to maintain consistency between related objectsbut you do not want to achieve consistency by making the classes tightly coupled, because that reduces their reusability <ref> [5] </ref>.
References-found: 5

