URL: http://www.cs.indiana.edu/hyplan/ejohnson/papers/siam97.ps
Refering-URL: http://www.cs.indiana.edu/hyplan/ejohnson.html
Root-URL: http://www.cs.indiana.edu
Title: Programming with the HPC++ Parallel Standard Template Library  
Author: Elizabeth Johnson Dennis Gannon 
Abstract: We present an overview of the HPC++ Parallel Standard Template Library (PSTL), a parallel version of the C++ Standard Template Library (STL). The PSTL is part of HPC++, a C++ library and language extension framework being developed by the HPC++ consortium as a standard model for portable parallel programming in C++. The PSTL includes distributed versions of the seven STL containers (vector, list, deque, set, map, multiset, multimap), as well as parallel versions of the STL algorithms. A key component of the PSTL is the parallel iterator, which provides global access to all elements in the distributed containers and faciliates generic parallel programming. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Anderson, Z. Bai, J. Demmel, J. Dongarra, J. DuCroz, A. Greenbaum, S. Hammarling, A. McKenney, S. Ostrouchov, and D. Sorenson, </author> <note> LAPACK Users' Guide, SIAM, </note> <year> 1992. </year>
Reference-contexts: This array class will support element access via standard array indexing as well as parallel random 3 access iterators. The latter will facilitate the use of STL and PSTL algorithms on the array class. Use of optimized mathematical libraries such as the BLAS [7, 3, 2] and LAPACK <ref> [1] </ref> for computations on HPC++ matrices and vectors will also be supported. 3 Standard Template Library The C++ Standard Template Library has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vector, list, deque, set and map.
Reference: [2] <author> J. J. Dongarra, J. DuCroz, S. Hammarling, and I. Duff, </author> <title> A set of level 3 Basic Linear Algebra Subprograms, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 16 (1990), </volume> <pages> pp. 1-16. </pages>
Reference-contexts: This array class will support element access via standard array indexing as well as parallel random 3 access iterators. The latter will facilitate the use of STL and PSTL algorithms on the array class. Use of optimized mathematical libraries such as the BLAS <ref> [7, 3, 2] </ref> and LAPACK [1] for computations on HPC++ matrices and vectors will also be supported. 3 Standard Template Library The C++ Standard Template Library has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vector, list, deque, set and map.
Reference: [3] <author> J. J. Dongarra, J. DuCroz, S. Hammarling, and R. Hanson, </author> <title> An extended set of FORTRAN Basic Linear Algebra Subprograms, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 14 (1988), </volume> <pages> pp. 1-17. </pages>
Reference-contexts: This array class will support element access via standard array indexing as well as parallel random 3 access iterators. The latter will facilitate the use of STL and PSTL algorithms on the array class. Use of optimized mathematical libraries such as the BLAS <ref> [7, 3, 2] </ref> and LAPACK [1] for computations on HPC++ matrices and vectors will also be supported. 3 Standard Template Library The C++ Standard Template Library has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vector, list, deque, set and map.
Reference: [4] <author> O. M. </author> <title> Group, The Common Object Request Broker: Architecture and specification, </title> <month> July </month> <year> 1995. </year> <note> Revision 2.0. </note>
Reference-contexts: Level 1 of the HPC++ framework consists of the following parts: * parallel loop directives, * a parallel Standard Template Library, * a multidimensional array class, and, in the future, * a library for distributed active objects, * an interface to CORBA via IDL <ref> [4] </ref> mapping, and * a set of programming and performance analysis tools. The parallel loop directives support single context parallelism. A loop can be declared by the programmer to be parallelizable using the compiler directive #pragma HPC_INDEPENDENT placed before the loop.
Reference: [5] <author> T. H. W. </author> <title> Group, HPC++ White Papers, </title> <type> Tech. Rep. TR 95633, </type> <note> Center for Research on Parallel Computation, </note> <year> 1995. </year>
Reference-contexts: The HPC++ consortium, composed of representatives from industry, academia, and government laboratories, has included such a parallel library in their new framework for parallel C++ programming, HPC++ <ref> [5] </ref>. This paper describes the PSTL portion of the HPC++ framework and provides basic examples of PSTL use. 2 Overview of HPC++ The current HPC++ framework (Level 1) describes a C++ library along with compiler directives which support parallel C++ programming.
Reference: [6] <author> S. Kohn and S. Baden, </author> <title> Irregular coarse-grain data parallelism under LPARX, </title> <journal> Journal of Scientific Programming, </journal> <note> (To appear). </note>
Reference-contexts: The STL does not include a multidimensional array class, but such a class is essential for the scientific computation typical of parallel applications. For this reason, HPC++ includes a multidimensional distributed array class based on A++[11] and LPARX <ref> [6] </ref>. This array class will support element access via standard array indexing as well as parallel random 3 access iterators. The latter will facilitate the use of STL and PSTL algorithms on the array class.
Reference: [7] <author> C. L. Lawson, R. J. Hanson, D. R. Kincaid, and F. T. Krogh, </author> <title> Basic Linear Algebra Subprograms for Fortran Usage, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 5 (1979), </volume> <pages> pp. 308-323. </pages>
Reference-contexts: This array class will support element access via standard array indexing as well as parallel random 3 access iterators. The latter will facilitate the use of STL and PSTL algorithms on the array class. Use of optimized mathematical libraries such as the BLAS <ref> [7, 3, 2] </ref> and LAPACK [1] for computations on HPC++ matrices and vectors will also be supported. 3 Standard Template Library The C++ Standard Template Library has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vector, list, deque, set and map.
Reference: [8] <author> D. Musser and A. Saini, </author> <title> STL Tutorial and Reference Guide, </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: While many parallel C++ extensions and libraries have been defined [13], most provide either non-standard tools to build and support data structures or include a set of specialized data structures. Clearly, support is needed for cost-effective, efficient, and reusable software components in parallel processing. The Standard Template Library (STL) <ref> [8, 10, 12] </ref>, a recent addition to the C++ draft standard, is a library of templated algorithms, containers, and iterators which provide support for generic programming.
Reference: [9] <author> D. R. Musser and A. A. Stepanov, </author> <title> Algorithm-Oriented Generic Libraries, </title> <journal> Software Practice and Experience, </journal> <volume> 24 (1994), </volume> <pages> pp. 623-642. </pages>
Reference-contexts: Clearly, support is needed for cost-effective, efficient, and reusable software components in parallel processing. The Standard Template Library (STL) [8, 10, 12], a recent addition to the C++ draft standard, is a library of templated algorithms, containers, and iterators which provide support for generic programming. Generic programming <ref> [9] </ref> is a programming paradigm in which algorithms are written so that they can operate on any type of container with accessibility meeting certain minimal criteria. This element access is provided via iterators, C-pointer-like objects which can traverse through a container.
Reference: [10] <author> M. Nelson, </author> <title> C++ Programmer's Guide to the Standard Template Library, </title> <publisher> IDG Books Worldwide, </publisher> <year> 1995. </year>
Reference-contexts: While many parallel C++ extensions and libraries have been defined [13], most provide either non-standard tools to build and support data structures or include a set of specialized data structures. Clearly, support is needed for cost-effective, efficient, and reusable software components in parallel processing. The Standard Template Library (STL) <ref> [8, 10, 12] </ref>, a recent addition to the C++ draft standard, is a library of templated algorithms, containers, and iterators which provide support for generic programming.
Reference: [11] <author> R. Parsons and D. Quinlan, </author> <title> Run-time recognition of task parallelism within the P++ parallel array class library, </title> <booktitle> in Proceedings of the Workshop of Scalable Parallel Libraries, </booktitle> <year> 1993. </year>
Reference: [12] <author> A. Stepanov and M. Lee, </author> <title> The Standard Template Library, </title> <type> Tech. Rep. </type> <institution> HPL-95-11, Hewlett-Packard Laboratories, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: While many parallel C++ extensions and libraries have been defined [13], most provide either non-standard tools to build and support data structures or include a set of specialized data structures. Clearly, support is needed for cost-effective, efficient, and reusable software components in parallel processing. The Standard Template Library (STL) <ref> [8, 10, 12] </ref>, a recent addition to the C++ draft standard, is a library of templated algorithms, containers, and iterators which provide support for generic programming.
Reference: [13] <author> G. Wilson and P. Lu, </author> <title> Parallel Programming Using C++, </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: This problem is particularly acute in the parallel programming realm, where data structures must be built to utilize concurrency whenever possible. With no widely accepted standard for serial data structures, the parallel data structures roam even farther afield. While many parallel C++ extensions and libraries have been defined <ref> [13] </ref>, most provide either non-standard tools to build and support data structures or include a set of specialized data structures. Clearly, support is needed for cost-effective, efficient, and reusable software components in parallel processing.
References-found: 13

