URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1998/98-18.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1998.html
Root-URL: http://www.cs.rutgers.edu
Email: e-mail: ibaraki@kuamp.kyoto-u.ac.jp  e-mail: kogan@rutcor.rutgers.edu  e-mail: makino@sys.es.osaka-u.ac.jp  
Phone: 2  3  
Title: Functional Dependencies in Horn Theories  
Author: by Toshihide Ibaraki Alexander Kogan Kazuhisa Makino 
Affiliation: Department of Accounting and Information Systems, Faculty of Management, Rutgers University,  and RUTCOR, Rutgers University,  Department of Systems and Human Science, Graduate School of Engineering Science, Osaka Uni  
Address: sity, Kyoto, Japan 606,  Newark, NJ 07102,  640 Bartholomew Road, Piscataway, NJ 08854-8003, U.S.A.,  versity, Toyonaka, Osaka, Japan,  
Date: 1998  
Note: March  DIMACS is a partnership of Rutgers University, Princeton University, AT&T Labs-Research, Bell Labs, Bellcore and NEC Research Institute. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 98-18 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W.W. Armstrong. </author> <title> Dependency structures of database relationships, </title> <booktitle> Proceedings IFIP'74 , North-Holland, </booktitle> <address> Amsterdam, </address> <year> 1974, </year> <pages> 580 - 583. </pages>
Reference-contexts: 1 Introduction Relational databases have been invented, studied and deployed as essential tools of information storage and retrieval (see [9, 34, 43, 35]). Functional dependencies have been recognized to be one of the most important concepts in the relational database theory (see <ref> [1, 14] </ref>). Functional dependencies state that the values of certain attributes in a relation are determined by the values of some other attributes. They are commonly used in the logical database design to express integrity constraints, and thus to express domain knowledge. <p> The concept of Armstrong relations is very important in the theory of relational databases, and has been well studied (see <ref> [1, 2, 28, 35] </ref>). It is known that for any set of functional dependencies there exists an Armstrong relation. However, such relation may not be Boolean.
Reference: [2] <author> C. Beeri, M. Dowd, R. Fagin, R. Statman. </author> <title> On the structure of Armstrong relations for functional dependencies, </title> <journal> Journal of the ACM , 31 (1) (1984), </journal> <volume> 30 - 46. </volume>
Reference-contexts: The concept of Armstrong relations is very important in the theory of relational databases, and has been well studied (see <ref> [1, 2, 28, 35] </ref>). It is known that for any set of functional dependencies there exists an Armstrong relation. However, such relation may not be Boolean.
Reference: [3] <author> J.C. Bioch and T. Ibaraki. </author> <title> Complexity of identification and dualization of positive Boolean functions, </title> <journal> Information and Computation, </journal> <volume> 123 (1995), 51 - 75. </volume>
Reference-contexts: This proves the "if" part. 2 - 26 - The problem of dualizing a positive theory has been well studied. Although it is still unknown whether a polynomial total time algorithm exists for this problem, a wide variety of computationally equivalent problems have been discovered (see e.g., <ref> [3, 13] </ref>), and a quasi-polynomial algorithm has been developed (see [16]). 6 Condensation of Horn Theories The procedure of condensation introduced in Subsection 2.3 aims at simplifying a given theory by eliminating variables that are functionally dependent on other variables in the theory.
Reference: [4] <author> E. Boros, Y. Crama and P.L. Hammer. </author> <title> Polynomial time inference of all valid implications for Horn and related formulae, </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 1 (1990), 21 - 32. </volume>
Reference-contexts: We will describe below an incrementally polynomial algorithm for this problem, which is a modification of the input resolution method discussed in <ref> [4, 8] </ref>. <p> Renamable Horn CNFs and 2-CNFs are well known classes of formulae for which the satisfiability problem can be solved in polynomial time. These two classes turn out to be special cases of the class of so-called q-Horn CNFs which were introduced and studied in <ref> [4, 5, 6] </ref>. It was shown that a q-Horn CNF can be characterized by a special linear programming - 33 - problem associated to the CNF, can therefore be recognized in polynomial time, and the q-Horn satisfiability problem can be solved in polynomial time.
Reference: [5] <author> E. Boros, Y. Crama, P.L. Hammer, M. Saks. </author> <title> A complexity index for satisfiability problems, </title> <journal> SIAM Journal on Computing, </journal> <volume> 23 (1994), 45 - 49. </volume>
Reference-contexts: Renamable Horn CNFs and 2-CNFs are well known classes of formulae for which the satisfiability problem can be solved in polynomial time. These two classes turn out to be special cases of the class of so-called q-Horn CNFs which were introduced and studied in <ref> [4, 5, 6] </ref>. It was shown that a q-Horn CNF can be characterized by a special linear programming - 33 - problem associated to the CNF, can therefore be recognized in polynomial time, and the q-Horn satisfiability problem can be solved in polynomial time.
Reference: [6] <author> E. Boros, P.L. Hammer and X. Sun. </author> <title> Recognition of q-Horn formulae in linear time, </title> <journal> Discrete Applied Mathematics, </journal> <volume> 55 (1994), 1 - 13. </volume>
Reference-contexts: Renamable Horn CNFs and 2-CNFs are well known classes of formulae for which the satisfiability problem can be solved in polynomial time. These two classes turn out to be special cases of the class of so-called q-Horn CNFs which were introduced and studied in <ref> [4, 5, 6] </ref>. It was shown that a q-Horn CNF can be characterized by a special linear programming - 33 - problem associated to the CNF, can therefore be recognized in polynomial time, and the q-Horn satisfiability problem can be solved in polynomial time.
Reference: [7] <author> V. Chandru, C.R. Coullard, P.L. Hammer, M. Monta~nez, X. Sun. </author> <title> On renamable Horn and generalized Horn functions, </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 1 (1990), 33 - 47. </volume>
Reference-contexts: This is the case for the CNF representation: it can be recognized in polynomial time whether a given CNF can be renamed as a Horn CNF, and if yes, a renaming making the CNF Horn can also be determined in polynomial time (see <ref> [32, 7] </ref>). The "envelope-type" representation of a renamable Horn theory is not well defined in the sense that the explicit knowledge of renaming is required to specify the set of models of the theory by appropriately redefining the intersection closure.
Reference: [8] <author> C.L. Chang and R.C.T. Lee. </author> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1973. </year>
Reference-contexts: Thorough theoretical studies of functional dependencies in relational databases (see [11, 14, 42, 15, 28]) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see [37, 22]), and gained prominence in logic programming (see [12]) and artificial intelligence (see <ref> [8, 10, 25] </ref>). In artificial intelligence, the implementation of a knowledge base as a Horn theory is often preferred, since linear time complexity of solving Horn satisfiability problems (see [12, 38]) provides the benefits of computationally tractable reasoning, while Horn clauses have the expressive power sufficient for many applications. <p> We will describe below an incrementally polynomial algorithm for this problem, which is a modification of the input resolution method discussed in <ref> [4, 8] </ref>.
Reference: [9] <author> E.F. Codd. </author> <title> A relational model for large shared data banks, </title> <journal> Communications of the ACM , Vol. </journal> <volume> 13, No. 6, </volume> <month> June </month> <year> 1970, </year> <pages> 377 - 387. </pages>
Reference-contexts: 1 Introduction Relational databases have been invented, studied and deployed as essential tools of information storage and retrieval (see <ref> [9, 34, 43, 35] </ref>). Functional dependencies have been recognized to be one of the most important concepts in the relational database theory (see [1, 14]). Functional dependencies state that the values of certain attributes in a relation are determined by the values of some other attributes.
Reference: [10] <author> R. Dechter and J. Pearl. </author> <title> Structure identification in relational data, </title> <journal> Artificial Intelligence, </journal> <volume> 58 (1992), 237 - 270. </volume>
Reference-contexts: Thorough theoretical studies of functional dependencies in relational databases (see [11, 14, 42, 15, 28]) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see [37, 22]), and gained prominence in logic programming (see [12]) and artificial intelligence (see <ref> [8, 10, 25] </ref>). In artificial intelligence, the implementation of a knowledge base as a Horn theory is often preferred, since linear time complexity of solving Horn satisfiability problems (see [12, 38]) provides the benefits of computationally tractable reasoning, while Horn clauses have the expressive power sufficient for many applications. <p> It is well known (see <ref> [37, 10] </ref>) that a theory is Horn if and only if it is closed under intersection, i.e., ff; fi 2 imply ff " fi 2 . This property leads to an alternative way of representing Horn theories.
Reference: [11] <author> C. Delobel and R.G. Casey. </author> <title> Decomposition of a data base and the theory of Boolean switching functions, </title> <journal> IBM Journal of Research and Development, </journal> <volume> Vol. 17, No. 5, </volume> <month> September </month> <year> 1973, </year> <pages> 374 - 386. - 34 </pages> - 
Reference-contexts: They are commonly used in the logical database design to express integrity constraints, and thus to express domain knowledge. The problems of inferring functional dependencies from relations have been studied in [36, 30]. Thorough theoretical studies of functional dependencies in relational databases (see <ref> [11, 14, 42, 15, 28] </ref>) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see [37, 22]), and gained prominence in logic programming (see [12]) and artificial intelligence (see [8, 10, 25]). <p> It is natural to establish a correspondence between functional dependencies and Horn clauses by introducing for a functional dependency X ! y the definite Horn clause y _ W x2X x. This correspondence has been well studied (see <ref> [11, 14, 15, 42] </ref>), and has been shown to establish the following equivalence between a set of functional dependencies D and its corresponding definite Horn CNF F : a functional dependency X ! y is implied by D if and only if the definite Horn clause y _ W x2X x
Reference: [12] <author> W.F. Dowling and J.H. Gallier. </author> <title> Linear time algorithms for testing the satisfiability of propositional Horn formulae, </title> <journal> Journal of Logic Programming, </journal> <volume> 3 (1984), 267 - 284. </volume>
Reference-contexts: Thorough theoretical studies of functional dependencies in relational databases (see [11, 14, 42, 15, 28]) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see [37, 22]), and gained prominence in logic programming (see <ref> [12] </ref>) and artificial intelligence (see [8, 10, 25]). <p> In artificial intelligence, the implementation of a knowledge base as a Horn theory is often preferred, since linear time complexity of solving Horn satisfiability problems (see <ref> [12, 38] </ref>) provides the benefits of computationally tractable reasoning, while Horn clauses have the expressive power sufficient for many applications. A Horn theory is characterized by the condition that the intersection of any two models is again a model. <p> It is known (see [18, 19]) that every prime implicate of a Horn theory is Horn, and therefore any prime CNF of a Horn theory is Horn. The most important property of Horn CNFs is the linear time complexity of the satisfiability problem (see <ref> [12] </ref>), i.e., the problem of checking whether the theory represented by the CNF contains at least one model. <p> This means that F 1 has a solution if and only if so does F 0 , which is also equivalent to the condition that (1) has a solution. Thus, the linear time algorithm for the Horn satisfiability problem (see <ref> [12] </ref>) can be employed to construct a linear time algorithm for checking whether a functional dependency holds in a theory represented by a Horn CNF. 2 Corollary 3.2 Given a Horn CNF F and a functional dependency X ! y in the theory represented by F , it can be checked
Reference: [13] <author> T. Eiter and G. Gottlob. </author> <title> Identifying the minimal transversals of a hypergraph and related problems, </title> <journal> SIAM Journal on Computing, </journal> <volume> 24 (1995), 1278 - 1304. </volume>
Reference-contexts: Proof. It is known <ref> [13] </ref> that the problem of dualizing a positive theory is equivalent to the problem of generating all minimal solutions y subject to Ay e; and y j 2 f0; 1g for all j = 1; 2; : : : m; (14) where A denotes a 0-1 l fi m matrix (i.e., <p> This proves the "if" part. 2 - 26 - The problem of dualizing a positive theory has been well studied. Although it is still unknown whether a polynomial total time algorithm exists for this problem, a wide variety of computationally equivalent problems have been discovered (see e.g., <ref> [3, 13] </ref>), and a quasi-polynomial algorithm has been developed (see [16]). 6 Condensation of Horn Theories The procedure of condensation introduced in Subsection 2.3 aims at simplifying a given theory by eliminating variables that are functionally dependent on other variables in the theory.
Reference: [14] <author> R. Fagin. </author> <title> Functional dependencies in a relational database and propositional logic, </title> <journal> IBM Journal of Research and Development, </journal> <volume> Vol. 21, No. 6, </volume> <month> November </month> <year> 1977, </year> <pages> 534 - 544. </pages>
Reference-contexts: 1 Introduction Relational databases have been invented, studied and deployed as essential tools of information storage and retrieval (see [9, 34, 43, 35]). Functional dependencies have been recognized to be one of the most important concepts in the relational database theory (see <ref> [1, 14] </ref>). Functional dependencies state that the values of certain attributes in a relation are determined by the values of some other attributes. They are commonly used in the logical database design to express integrity constraints, and thus to express domain knowledge. <p> They are commonly used in the logical database design to express integrity constraints, and thus to express domain knowledge. The problems of inferring functional dependencies from relations have been studied in [36, 30]. Thorough theoretical studies of functional dependencies in relational databases (see <ref> [11, 14, 42, 15, 28] </ref>) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see [37, 22]), and gained prominence in logic programming (see [12]) and artificial intelligence (see [8, 10, 25]). <p> It is natural to establish a correspondence between functional dependencies and Horn clauses by introducing for a functional dependency X ! y the definite Horn clause y _ W x2X x. This correspondence has been well studied (see <ref> [11, 14, 15, 42] </ref>), and has been shown to establish the following equivalence between a set of functional dependencies D and its corresponding definite Horn CNF F : a functional dependency X ! y is implied by D if and only if the definite Horn clause y _ W x2X x
Reference: [15] <author> R. Fagin. </author> <title> Horn clauses and database dependencies, </title> <journal> Journal of the ACM , 29 (4) (1982), </journal> <volume> 952 - 985. </volume>
Reference-contexts: They are commonly used in the logical database design to express integrity constraints, and thus to express domain knowledge. The problems of inferring functional dependencies from relations have been studied in [36, 30]. Thorough theoretical studies of functional dependencies in relational databases (see <ref> [11, 14, 42, 15, 28] </ref>) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see [37, 22]), and gained prominence in logic programming (see [12]) and artificial intelligence (see [8, 10, 25]). <p> It is natural to establish a correspondence between functional dependencies and Horn clauses by introducing for a functional dependency X ! y the definite Horn clause y _ W x2X x. This correspondence has been well studied (see <ref> [11, 14, 15, 42] </ref>), and has been shown to establish the following equivalence between a set of functional dependencies D and its corresponding definite Horn CNF F : a functional dependency X ! y is implied by D if and only if the definite Horn clause y _ W x2X x
Reference: [16] <author> M.L. Fredman and L. Khachiyan. </author> <title> On the complexity of dualization of monotone disjunctive normal forms, </title> <journal> Journal of Algorithms, </journal> <volume> 21 (3) (1996), 618 - 628. </volume>
Reference-contexts: Although it is still unknown whether a polynomial total time algorithm exists for this problem, a wide variety of computationally equivalent problems have been discovered (see e.g., [3, 13]), and a quasi-polynomial algorithm has been developed (see <ref> [16] </ref>). 6 Condensation of Horn Theories The procedure of condensation introduced in Subsection 2.3 aims at simplifying a given theory by eliminating variables that are functionally dependent on other variables in the theory. In the case of general Boolean theories the simplification provided by condensation may come at a price.
Reference: [17] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman & Co., </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: We will show that both these problems are computationally difficult using reductions from the following well known NP-complete problem (see e.g. <ref> [17] </ref>). Problem: Set-Covering Instance: A 0-1 matrix A = (a ij ) lfim and a number k.
Reference: [18] <author> P.L. Hammer and A. Kogan. </author> <title> Horn functions and their DNFs, </title> <journal> Information Processing Letters, </journal> <volume> 44 (1992), 23 - 29. </volume>
Reference-contexts: A CNF is called Horn if it contains only Horn clauses. A CNF containing only negative clauses will be called negative, while a CNF containing only definite clauses will be called definite. A theory is called Horn if there exists a Horn CNF representing it. It is known (see <ref> [18, 19] </ref>) that every prime implicate of a Horn theory is Horn, and therefore any prime CNF of a Horn theory is Horn. <p> Therefore, a set of functional dependencies can be naturally interpreted as a Horn CNF. In what follows we will occasionally make no distinction between a set of functional dependencies and the corresponding definite Horn CNF. Since a Horn CNF represents a Horn theory (or a Horn Boolean function, see <ref> [18, 19] </ref>), we shall call the Horn theory represented by the set of functional dependencies holding in a theory the associated Horn theory of , and view M () as the set of all prime implicates of this associated Horn theory. <p> It consists in simply checking (e.g. as described in <ref> [18, 19] </ref>) whether y _ x2X x and y _ x, for all x 2 X, are prime implicates of F . Corollary 4.2 For a Horn theory , the set of models of M () is a superset of . <p> Let us consider next the time complexity of the algorithm. Clearly, Step 0 can be done in O (1) time. In Step 1, it is known <ref> [18] </ref> that, for each clause C 2 Neg (F ), C fl can be found in O (njF j) time, and (see [40]) that both checking if C fl 62 Q and updating Q can be done in O (n) time by using a binary tree as the data structure.
Reference: [19] <author> P.L. Hammer and A. Kogan. </author> <title> Optimal compression of propositional Horn knowledge bases: Complexity and approximation, </title> <journal> Artificial Intelligence, </journal> <volume> 64 (1993), 131 - 145. </volume>
Reference-contexts: A CNF is called Horn if it contains only Horn clauses. A CNF containing only negative clauses will be called negative, while a CNF containing only definite clauses will be called definite. A theory is called Horn if there exists a Horn CNF representing it. It is known (see <ref> [18, 19] </ref>) that every prime implicate of a Horn theory is Horn, and therefore any prime CNF of a Horn theory is Horn. <p> Therefore, a set of functional dependencies can be naturally interpreted as a Horn CNF. In what follows we will occasionally make no distinction between a set of functional dependencies and the corresponding definite Horn CNF. Since a Horn CNF represents a Horn theory (or a Horn Boolean function, see <ref> [18, 19] </ref>), we shall call the Horn theory represented by the set of functional dependencies holding in a theory the associated Horn theory of , and view M () as the set of all prime implicates of this associated Horn theory. <p> It consists in simply checking (e.g. as described in <ref> [18, 19] </ref>) whether y _ x2X x and y _ x, for all x 2 X, are prime implicates of F . Corollary 4.2 For a Horn theory , the set of models of M () is a superset of . <p> Therefore, by Theorem 4.1, the variable x 1 belongs to F (y) if and only if has a prime implicate of the form y _ x 1 _ W x2X x for some X. Properties of the forward chaining procedure (see <ref> [19, 20] </ref>) then imply that the clause y _ x 1 _ W prime implicate of F 00 if and only if the clause x 1 _ W x2X x is a prime implicate of F 0 . <p> The correctness of this algorithm follows from Lemmas 5.8 and 5.9. Let us analyze now its time complexity. Since F is Horn, we can compute each V i in O (jF j) time by applying the forward chaining procedure (see <ref> [19, 20] </ref>), which adds variables to V i one by one as soon as an appropriate clause in F can be "fired". Once V i is known, F (x l 0 j l2V nV i ) can be obtained from F in O (jF j) time.
Reference: [20] <author> P.L. Hammer and A. Kogan. </author> <title> Quasi-acyclic propositional Horn knowledge bases: Optimal compression, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 7, No. 5, </volume> <month> October </month> <year> 1995, </year> <pages> 751 - 762. </pages>
Reference-contexts: A similar construction was used in [39] in the study of unique Horn satisfiability, and in <ref> [20] </ref> for the compression of Horn knowledge bases. The following statement establishes a fundamental structural property of the graph G (M ()) of the set of all minimal functional dependencies in a Horn theory . <p> Intuitively, a group of logically equivalent variables can be replaced by a single variable without losing any essential information about a theory. This intuition was formalized in the procedure of 2-condensation introduced in <ref> [20] </ref> for the purpose of optimal compression of quasi-acyclic Horn knowledge bases. We call Horn theories without logically equivalent variables 2-condensed . Given a Horn theory , the procedure of 2-condensation constructs the 2-condensed Horn theory 2c by replacing each group of logically equivalent variables with a single representative. <p> If is represented by a Horn CNF F , then a prime Horn CNF representing 2c can be constructed in O (jV jjF j + jF j 2 ) time (see <ref> [20] </ref>). The procedure consists in inferring all the quadratic prime implicates of , identifying groups of logically equivalent variables, reducing F to an equivalent prime CNF F 0 , and replacing in F 0 equivalent variables from the same group with a single representative. <p> For a variable x 2 V , let us denote by r (x) the representative of x in 2c . Similarly, let r (X) denote the set of representatives of X . The following statement was proven in <ref> [20] </ref>. <p> The acyclicity of G (M ( 2c )) is a very important structural property of the Horn theory represented by M ( 2c ). Such Horn theories are called acyclic. They were studied in <ref> [20] </ref>, where it was proven that any acyclic Horn theory has a unique irredundant and prime CNF, thus establishing the next theorem. Theorem 4.11 The set of functional dependencies holding in a 2-condensed Horn theory has a unique irredundant FD-cover. <p> While the set of functional dependencies holding in a 2-condensed Horn theory corresponds to an acyclic Horn theory, the set of functional dependencies holding in a general Horn theory corresponds to a quasi-acyclic Horn theory (following the terminology of <ref> [20] </ref>). In this general case, the irredundant FD-cover will not be unique any more, but the results of [20] together with the presentation above show that all the irredundant FD-covers have essentially the same structure. <p> in a 2-condensed Horn theory corresponds to an acyclic Horn theory, the set of functional dependencies holding in a general Horn theory corresponds to a quasi-acyclic Horn theory (following the terminology of <ref> [20] </ref>). In this general case, the irredundant FD-cover will not be unique any more, but the results of [20] together with the presentation above show that all the irredundant FD-covers have essentially the same structure. <p> Therefore, by Theorem 4.1, the variable x 1 belongs to F (y) if and only if has a prime implicate of the form y _ x 1 _ W x2X x for some X. Properties of the forward chaining procedure (see <ref> [19, 20] </ref>) then imply that the clause y _ x 1 _ W prime implicate of F 00 if and only if the clause x 1 _ W x2X x is a prime implicate of F 0 . <p> The correctness of this algorithm follows from Lemmas 5.8 and 5.9. Let us analyze now its time complexity. Since F is Horn, we can compute each V i in O (jF j) time by applying the forward chaining procedure (see <ref> [19, 20] </ref>), which adds variables to V i one by one as soon as an appropriate clause in F can be "fired". Once V i is known, F (x l 0 j l2V nV i ) can be obtained from F in O (jF j) time.
Reference: [21] <author> P.L. Hammer and A. Kogan. </author> <title> Essential and redundant rules in Horn knowledge bases, Decision Support Systems, </title> <booktitle> 16 (2) (1996), </booktitle> <volume> 119 - 130. </volume>
Reference-contexts: We will develop below polynomial procedures for checking whether a minimal functional dependency in a 2-condensed Horn theory belongs to its unique irredundant FD-cover. These procedures are based on a polynomial algorithm developed in <ref> [21] </ref> for checking whether a definite Horn prime implicate of a Horn CNF is essential, i.e., whether it belongs to every irredundant prime CNF representing the same theory. Using the correspondence between functional dependencies and Horn clauses described in Subsection 2.4, we can paraphrase a result obtained in [21] in the <p> developed in <ref> [21] </ref> for checking whether a definite Horn prime implicate of a Horn CNF is essential, i.e., whether it belongs to every irredundant prime CNF representing the same theory. Using the correspondence between functional dependencies and Horn clauses described in Subsection 2.4, we can paraphrase a result obtained in [21] in the following way. Let I (X) denote the set of all variables y 2 V such that X ! y is a functional dependency in a theory . Obviously, X I (X) for any .
Reference: [22] <author> A. Horn. </author> <title> On sentences which are true of direct unions of algebras, </title> <journal> Journal of Symbolic Logic, </journal> <volume> 16 (1951), 14 - 21. </volume>
Reference-contexts: The problems of inferring functional dependencies from relations have been studied in [36, 30]. Thorough theoretical studies of functional dependencies in relational databases (see [11, 14, 42, 15, 28]) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see <ref> [37, 22] </ref>), and gained prominence in logic programming (see [12]) and artificial intelligence (see [8, 10, 25]).
Reference: [23] <author> T. Ibaraki, A. Kogan and K. Makino. </author> <title> Functional Dependencies in q-Horn Theories, </title> <type> unpublished manuscript, </type> <year> 1998. </year>
Reference-contexts: It was shown that a q-Horn CNF can be characterized by a special linear programming - 33 - problem associated to the CNF, can therefore be recognized in polynomial time, and the q-Horn satisfiability problem can be solved in polynomial time. In a forthcoming paper <ref> [23] </ref>, we study q-Horn theories and show that functional dependencies in a q-Horn theory have the form similar to functional dependencies in a renamable Horn theory, i.e., they are either a single term or a single clause.
Reference: [24] <author> D.S. Johnson, M. Yannakakis and C.H. Papadimitriou. </author> <title> On generating all maximal independent sets, </title> <journal> Information Processing Letters, </journal> <volume> 27 (1988), 119 - 123. </volume>
Reference-contexts: This is the reason why the complexity of the FD-Inference problem should be evaluated in terms of both the input and the output lengths. An algorithm enumerating items a 1 ; a 2 ; : : : ; a p is called incrementally polynomial <ref> [24, 31] </ref> if 1. it iteratively outputs the i-th item a i (for i = 1; 2; : : : ; p) using the input and the items a 1 ; a 2 ; : : : ; a i1 generated before, and 2. the time required for the i-th iteration <p> If an algorithm is incrementally polynomial, it also satisfies the criterion of polynomial total time <ref> [24] </ref> (i.e., polynomial time in the lengths of both input and output). These concepts take into account the fact that the output can be much longer (in particular, exponentially longer) than the input.
Reference: [25] <author> H. Kautz, M. Kearns and B. Selman. </author> <title> Horn approximations of empirical data, </title> <journal> Artificial Intelligence, </journal> <volume> 74 (1995), 129 - 145. </volume>
Reference-contexts: Thorough theoretical studies of functional dependencies in relational databases (see [11, 14, 42, 15, 28]) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see [37, 22]), and gained prominence in logic programming (see [12]) and artificial intelligence (see <ref> [8, 10, 25] </ref>). In artificial intelligence, the implementation of a knowledge base as a Horn theory is often preferred, since linear time complexity of solving Horn satisfiability problems (see [12, 38]) provides the benefits of computationally tractable reasoning, while Horn clauses have the expressive power sufficient for many applications. <p> A Horn theory is characterized by the condition that the intersection of any two models is again a model. A theory can be viewed as the set of its models, and reasoning with models has been developed in recent AI studies (see <ref> [25, 29, 27] </ref>). From the database theory point of view, the set of models is in fact a relation. This relation may have functional dependencies, which reveal important structural properties of the theory by describing the intrinsic determinants of values of certain attributes.
Reference: [26] <author> D. Kavvadias, C.H. Papadimitriou and M. Sideri. </author> <title> On Horn envelopes and hypergraph transversals, in Algorithms and Computation - ISAAC'93, edited by K.W. </title> <editor> Ng et al., </editor> <booktitle> Springer Lecture Notes in Computer Science, 762 (1993), </booktitle> <volume> 399 - 405. </volume>
Reference-contexts: We consider the problems arising when a theory is represented by its Horn clausal form, as well as when it is defined as the Horn envelope (see <ref> [26] </ref>) of a set of models. The results of this paper reveal new properties of Horn theories, and can be used to make knowledge representation and reasoning computationally more efficient. <p> For an arbitrary theory its intersection closure is called the Horn envelope of and is denoted by H () (see <ref> [26] </ref>). Clearly, H () is the minimum Horn superset of ; i.e., for any Horn theory 0 , it holds that H () 0 .
Reference: [27] <author> R. Khardon. </author> <title> Translating between Horn representations and their characteristic models, </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 3 (1995), 349 - 372. </volume>
Reference-contexts: A Horn theory is characterized by the condition that the intersection of any two models is again a model. A theory can be viewed as the set of its models, and reasoning with models has been developed in recent AI studies (see <ref> [25, 29, 27] </ref>). From the database theory point of view, the set of models is in fact a relation. This relation may have functional dependencies, which reveal important structural properties of the theory by describing the intrinsic determinants of values of certain attributes.
Reference: [28] <author> R. Khardon, H. Mannila and D. Roth. </author> <title> Reasoning with Examples: Propositional Formulae and Database Dependencies, </title> <type> Technical Report TR-15-95, </type> <institution> Aiken Computation Laboratory, Harvard University, </institution> <address> Cambridge, MA, </address> <year> 1995. </year>
Reference-contexts: They are commonly used in the logical database design to express integrity constraints, and thus to express domain knowledge. The problems of inferring functional dependencies from relations have been studied in [36, 30]. Thorough theoretical studies of functional dependencies in relational databases (see <ref> [11, 14, 42, 15, 28] </ref>) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see [37, 22]), and gained prominence in logic programming (see [12]) and artificial intelligence (see [8, 10, 25]). <p> The concept of Armstrong relations is very important in the theory of relational databases, and has been well studied (see <ref> [1, 2, 28, 35] </ref>). It is known that for any set of functional dependencies there exists an Armstrong relation. However, such relation may not be Boolean.
Reference: [29] <author> R. Khardon and D. Roth. </author> <title> Reasoning with models, </title> <journal> Artificial Intelligence, </journal> <volume> 87 (1996), 187 - 213. </volume> - <pages> 35 </pages> - 
Reference-contexts: A Horn theory is characterized by the condition that the intersection of any two models is again a model. A theory can be viewed as the set of its models, and reasoning with models has been developed in recent AI studies (see <ref> [25, 29, 27] </ref>). From the database theory point of view, the set of models is in fact a relation. This relation may have functional dependencies, which reveal important structural properties of the theory by describing the intrinsic determinants of values of certain attributes.
Reference: [30] <author> J. Kivinen and H. Mannila. </author> <title> Approximate inference of functional dependencies from relations, </title> <booktitle> Theoretical Computer Science, 149 (1995), </booktitle> <volume> 129 - 149. </volume>
Reference-contexts: They are commonly used in the logical database design to express integrity constraints, and thus to express domain knowledge. The problems of inferring functional dependencies from relations have been studied in <ref> [36, 30] </ref>. Thorough theoretical studies of functional dependencies in relational databases (see [11, 14, 42, 15, 28]) have established a close connection between them and Horn clauses.
Reference: [31] <author> E. Lawler, J.K. Lenstra and A.H.G. Rinnooy Kan. </author> <title> Generating all maximal independent sets: NP-hardness and polynomial-time algorithms, </title> <journal> SIAM Journal on Computing, </journal> <volume> 9 (1980), 558 - 565. </volume>
Reference-contexts: This is the reason why the complexity of the FD-Inference problem should be evaluated in terms of both the input and the output lengths. An algorithm enumerating items a 1 ; a 2 ; : : : ; a p is called incrementally polynomial <ref> [24, 31] </ref> if 1. it iteratively outputs the i-th item a i (for i = 1; 2; : : : ; p) using the input and the items a 1 ; a 2 ; : : : ; a i1 generated before, and 2. the time required for the i-th iteration
Reference: [32] <author> H.R. Lewis. </author> <title> Renaming a set of clauses as a Horn set, </title> <journal> Journal of the ACM , 25 (1978), </journal> <volume> 134 - 135. </volume>
Reference-contexts: This is the case for the CNF representation: it can be recognized in polynomial time whether a given CNF can be renamed as a Horn CNF, and if yes, a renaming making the CNF Horn can also be determined in polynomial time (see <ref> [32, 7] </ref>). The "envelope-type" representation of a renamable Horn theory is not well defined in the sense that the explicit knowledge of renaming is required to specify the set of models of the theory by appropriately redefining the intersection closure.
Reference: [33] <author> C.L. Lucchesi and S.L. Osborn. </author> <title> Candidate keys for relations. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 17 (1978), 270 - 279. </volume>
Reference-contexts: Indeed, if a set X containing x is given, checking whether X ! y is a minimal functional dependency in can be done in polynomial time, by Corollary 3.2. To show that the problem is NP-hard, we shall polynomially reduce the following NP-complete problem (see <ref> [33] </ref>) to our problem. Problem: Prime-Attribute-Name Instance: A definite Horn CNF F in variables x 1 ; : : : ; x n .
Reference: [34] <author> D. Maier. </author> <title> The Theory of Relational Databases. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1983. </year>
Reference-contexts: 1 Introduction Relational databases have been invented, studied and deployed as essential tools of information storage and retrieval (see <ref> [9, 34, 43, 35] </ref>). Functional dependencies have been recognized to be one of the most important concepts in the relational database theory (see [1, 14]). Functional dependencies state that the values of certain attributes in a relation are determined by the values of some other attributes. <p> To analyze the structure of functional dependencies in Horn theories, we shall associate to every set of of functional dependencies D a directed graph G (D) <ref> [34] </ref> whose set of vertices is the set of variables V , and an oriented arc x ! y is in G (D) if and only if the set D contains a functional dependency X ! y such that x 2 X.
Reference: [35] <author> H. Mannila and K.-J. Raiha. </author> <title> Design of Relational Databases. </title> <publisher> Addison-Wesley, </publisher> <address> Wokingham, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Relational databases have been invented, studied and deployed as essential tools of information storage and retrieval (see <ref> [9, 34, 43, 35] </ref>). Functional dependencies have been recognized to be one of the most important concepts in the relational database theory (see [1, 14]). Functional dependencies state that the values of certain attributes in a relation are determined by the values of some other attributes. <p> The concept of Armstrong relations is very important in the theory of relational databases, and has been well studied (see <ref> [1, 2, 28, 35] </ref>). It is known that for any set of functional dependencies there exists an Armstrong relation. However, such relation may not be Boolean.
Reference: [36] <author> H. Mannila and K.-J. Raiha. </author> <title> Algorithms for inferring functional dependencies, </title> <journal> Data and Knowledge Engineering, </journal> <volume> 12 (1994), 83 - 99. </volume>
Reference-contexts: They are commonly used in the logical database design to express integrity constraints, and thus to express domain knowledge. The problems of inferring functional dependencies from relations have been studied in <ref> [36, 30] </ref>. Thorough theoretical studies of functional dependencies in relational databases (see [11, 14, 42, 15, 28]) have established a close connection between them and Horn clauses.
Reference: [37] <author> J.C.C. McKinsey. </author> <title> The decision problem for some classes of sentences without quantifiers, </title> <journal> Journal of Symbolic Logic, </journal> <volume> 8 (3) (1943), 61 - 77. </volume>
Reference-contexts: The problems of inferring functional dependencies from relations have been studied in [36, 30]. Thorough theoretical studies of functional dependencies in relational databases (see [11, 14, 42, 15, 28]) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see <ref> [37, 22] </ref>), and gained prominence in logic programming (see [12]) and artificial intelligence (see [8, 10, 25]). <p> It is well known (see <ref> [37, 10] </ref>) that a theory is Horn if and only if it is closed under intersection, i.e., ff; fi 2 imply ff " fi 2 . This property leads to an alternative way of representing Horn theories.
Reference: [38] <author> M. Minoux. LTUR: </author> <title> A simplified linear-time unit resolution algorithm for Horn formulae and computer implementation, </title> <journal> Information Processing Letters, </journal> <volume> 29 (1988), 1 - 12. </volume>
Reference-contexts: In artificial intelligence, the implementation of a knowledge base as a Horn theory is often preferred, since linear time complexity of solving Horn satisfiability problems (see <ref> [12, 38] </ref>) provides the benefits of computationally tractable reasoning, while Horn clauses have the expressive power sufficient for many applications. A Horn theory is characterized by the condition that the intersection of any two models is again a model.
Reference: [39] <author> M. Minoux. </author> <title> The unique Horn-Satisfiability problem and quadratic Boolean equations, </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 6 (1992), 253 - 266. </volume>
Reference-contexts: A similar construction was used in <ref> [39] </ref> in the study of unique Horn satisfiability, and in [20] for the compression of Horn knowledge bases. The following statement establishes a fundamental structural property of the graph G (M ()) of the set of all minimal functional dependencies in a Horn theory .
Reference: [40] <author> J.S. Provan and M.O. Ball. </author> <title> Efficient recognition of matroids and 2-monotonic systems, Applications of Discrete Mathematics, edited by R. </title> <editor> Ringeisen and F. Roberts, </editor> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> (1988), </year> <pages> 122 - 134. </pages>
Reference-contexts: Let us consider next the time complexity of the algorithm. Clearly, Step 0 can be done in O (1) time. In Step 1, it is known [18] that, for each clause C 2 Neg (F ), C fl can be found in O (njF j) time, and (see <ref> [40] </ref>) that both checking if C fl 62 Q and updating Q can be done in O (n) time by using a binary tree as the data structure. Therefore, Step 1 requires O (njNeg (F )jjFj) time. Steps 2 and 3 are iterated at most jNPI ()j times.
Reference: [41] <author> W. Quine. </author> <title> A way to simplify truth functions, </title> <journal> American Mathematical Monthly, </journal> <volume> 62 (1955), 627 - 631. </volume>
Reference-contexts: Let F = i C i be an arbitrary CNF of a theory . It is known (e.g., <ref> [41] </ref>) that every prime implicate C of can be derived from the clauses in F by applying a resolution procedure which iteratively generates resolvents.
Reference: [42] <author> Y. Sagiv, C. Delobel, D.S. Parker, R. Fagin. </author> <title> An equivalence between relational database dependencies and a fragment of propositional logic, </title> <journal> Journal of the ACM , 28 (3) (1981), </journal> <volume> 435 - 453. </volume>
Reference-contexts: They are commonly used in the logical database design to express integrity constraints, and thus to express domain knowledge. The problems of inferring functional dependencies from relations have been studied in [36, 30]. Thorough theoretical studies of functional dependencies in relational databases (see <ref> [11, 14, 42, 15, 28] </ref>) have established a close connection between them and Horn clauses. Horn clauses were introduced in formal logic (see [37, 22]), and gained prominence in logic programming (see [12]) and artificial intelligence (see [8, 10, 25]). <p> It is natural to establish a correspondence between functional dependencies and Horn clauses by introducing for a functional dependency X ! y the definite Horn clause y _ W x2X x. This correspondence has been well studied (see <ref> [11, 14, 15, 42] </ref>), and has been shown to establish the following equivalence between a set of functional dependencies D and its corresponding definite Horn CNF F : a functional dependency X ! y is implied by D if and only if the definite Horn clause y _ W x2X x
Reference: [43] <author> J.D. Ullman. </author> <title> Principles of Database and Knowledge-Base Systems. </title> <publisher> Computer Science Press, </publisher> <address> New York, NY: </address> <booktitle> Vol. I: Classical Database Systems, 1988; Vol. II: The New Technologies, </booktitle> <year> 1989. </year>
Reference-contexts: 1 Introduction Relational databases have been invented, studied and deployed as essential tools of information storage and retrieval (see <ref> [9, 34, 43, 35] </ref>). Functional dependencies have been recognized to be one of the most important concepts in the relational database theory (see [1, 14]). Functional dependencies state that the values of certain attributes in a relation are determined by the values of some other attributes.
Reference: [44] <author> Yu.I. Zhuravlev and A. Kogan. </author> <title> Realization of Boolean functions with a small number of zeros by disjunctive normal forms and related problems, </title> <journal> Soviet Mathematics - Doklady, </journal> <volume> 32 (3) (1985), 771 - 775. </volume>
Reference-contexts: If all the models of a theory are given, then one can check in polynomial time if the theory is renamable Horn. To see this, it is sufficient to use a given set of models for constructing in polynomial time (as described in <ref> [44] </ref>) a prime CNF representing this theory. One can easily see that a theory is renamable Horn if and only if any its prime CNF can be renamed as a Horn CNF.
References-found: 44

