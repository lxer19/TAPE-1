URL: http://www.cs.yale.edu/pub/TR/tr1116.ps.gz
Refering-URL: http://www.cs.yale.edu/pub/TR/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Molecular Computing, Bounded Nondeterminism, and Efficient Recursion  
Author: Richard Beigel Bin Fu 
Date: November 1996  
Address: YALEU/DCS/TR-1116  
Affiliation: Yale University Department of Computer Science  Yale University and University of Maryland  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> L. Adleman. </author> <title> Molecular computation of solutions to combinatorial problems. </title> <journal> Science, </journal> <volume> 266 </volume> <pages> 1021-1024, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: 1. A model of molecular computing Molecular computation was first studied in <ref> [1, 17] </ref>. The models we define were inspired as well by the work of [3, 23]. A molecular sequence is a string over an alphabet (we can use any alphabet we like, encoding characters of by finite sequences of base pairs). A test tube is a multi-set of molecular sequences.
Reference: [2] <author> L. Adleman. </author> <title> On construction a molecular computer. </title> <booktitle> In 1st DIMACS workshop on DNA Computing, </booktitle> <year> 1995. </year> <month> 12 </month>
Reference-contexts: The running time for a molecular algorithm is proportional to the number of operations on test tubes. An important complexity measure is the solution space size (also called simply space), i.e., the maximum number of strings in all test tubes at any time, counting multiplicities. Adleman <ref> [2] </ref> has speculated that molecular computation with a solution space of size 2 70 might be possible. Recent papers [3, 19] attempt to optimize solution space size for particular combinatorial problems. Problem instances are associated with a parameter n called their size.
Reference: [3] <author> E. Bach, A. Condon, E. Glaser, and C. Tanguay. </author> <title> DNA models and algorithms for NP-complete problems. </title> <booktitle> In Proceedings of the 11th Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pages 290-299, </pages> <year> 1996. </year>
Reference-contexts: 1. A model of molecular computing Molecular computation was first studied in [1, 17]. The models we define were inspired as well by the work of <ref> [3, 23] </ref>. A molecular sequence is a string over an alphabet (we can use any alphabet we like, encoding characters of by finite sequences of base pairs). A test tube is a multi-set of molecular sequences. We describe the allowable operations below. <p> An important complexity measure is the solution space size (also called simply space), i.e., the maximum number of strings in all test tubes at any time, counting multiplicities. Adleman [2] has speculated that molecular computation with a solution space of size 2 70 might be possible. Recent papers <ref> [3, 19] </ref> attempt to optimize solution space size for particular combinatorial problems. Problem instances are associated with a parameter n called their size. In complexity theory, n is the length of a suitable encoding of the instance. <p> Results for Particular Problems Results Previously In This Paper Problem Space Limited Model Reference Space Limited Model Hamiltonian Path n! p SAT 2 n p QBF 2 n fifi [23] 3-SAT 1:62 n fi [19] 1:50 n p 3-Colorability 1:89 n p <ref> [3] </ref> 1:35 n p Independent Set 1:51 n p [3] 1:23 n p (3; 2)-system 1:39 n p 3. Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in [14, 15, 16] and studied further in [10, 11, 20, 9, 12, 25, 13, 7]. <p> for Particular Problems Results Previously In This Paper Problem Space Limited Model Reference Space Limited Model Hamiltonian Path n! p SAT 2 n p QBF 2 n fifi [23] 3-SAT 1:62 n fi [19] 1:50 n p 3-Colorability 1:89 n p <ref> [3] </ref> 1:35 n p Independent Set 1:51 n p [3] 1:23 n p (3; 2)-system 1:39 n p 3. Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in [14, 15, 16] and studied further in [10, 11, 20, 9, 12, 25, 13, 7]. <p> Apply Lemma 1 to to see that L is in MOL (s (n)). 5. Enumerating Search Spaces with Bounded Nondeterminism Let's start with an important example that illustrates the general technique. How do you generate all strings consisting of k 1's and n k 0's? Bach et al. <ref> [3] </ref> show how to do so efficiently on a molecular computer using generalized Split () operations. We will show how to do so using bounded nondeterminism; consequently, generalized Split () operations are not necessary for this problem. <p> The recurrence can be solved in polynomial time by an explicit formula or by dynamic programming so the independent set problem is in MOL (1:47 n ), which is better than prior results <ref> [3] </ref>. Because the algorithm is particularly simple, the molecular algorithm can even be made to run in linear time. 5.4.2. Robson's Algorithm The best published purely recursive algorithm for the independent set problem is due to Robson [22] and runs in time 1:229 n for sufficiently large n.
Reference: [4] <author> D. Beaver. </author> <title> A universal molecular computer. </title> <type> CSE 95-001, </type> <institution> Penn State University, </institution> <year> 1995. </year>
Reference-contexts: Clearly, NPbits (b (n)) = NPinit (2 b (n) ). 4. NPinit (s (n)) MOL (s (n)) In this section we show how simulate to bounded nondeterministic computation via bounded-space molecular computation. Results of this type appear in <ref> [4, 23, 24, 29] </ref>, but they assume models of molecular computation with more powerful operations, such as Amplify, that may be harder to implement in practice. Independently, Boneh et al. [8] obtained a result similar to ours. Lemma 1. Let be a circuit with m gates.
Reference: [5] <author> R. Beigel. </author> <title> Maximum independent set algorithms. </title> <type> Manuscript, </type> <year> 1996. </year>
Reference-contexts: Molecular computing may motivate the search for efficient recursive algorithms that do not use dynamic programming. Towards that end we have found a recursive 1:223 n time (for sufficiently large n) algorithm for independent set <ref> [5] </ref> that is based on a d-self-reduction and hence is directly adaptable to molecular computing. 6. Acknowledgments We are grateful to William Gasarch for his patience in reading this paper as well as his suggestions in improving the presentation.
Reference: [6] <author> R. Beigel and D. Eppstein. </author> <title> 3-coloring in time O(1:3446 n ): a no-MIS algorithm. </title> <booktitle> In Proceedings of the 36th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 444-452, </pages> <year> 1995. </year>
Reference-contexts: The inequalities that Schiermeyer gives in the proofs of his Lemma 4.3 and Lemma 4.4 imply that our T (F ) satisfies the conditions of Definition 6. Hence, 3SAT 2 REC (T (F )) MOL (1:497 n ). 5.3. 3-Coloring and (3; 2)-System Beigel and Eppstein <ref> [6] </ref> give algorithms for (3; 2)-system and 3-coloring. In the (a; b)- system problem, we are given a collection of n vertices, each of which can be given one of a different colors. <p> Beigel and Eppstein's <ref> [6] </ref> (3; 2)-system algorithm can be sketched as follows: function 32SYS (F ) if jF j 5 then return brute-force (F ) else hF 1 ; : : : ; F k i = h 32 (F ) return W m In the algorithm above, brute-force (F ) means "use the
Reference: [7] <author> R. Beigel and J. Goldsmith. </author> <title> Downward separation fails catastrophically for limited nondeterminism classes. </title> <booktitle> In Proceedings of the 9th Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pages 134-138, </pages> <year> 1994. </year>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in [14, 15, 16] and studied further in <ref> [10, 11, 20, 9, 12, 25, 13, 7] </ref>.
Reference: [8] <author> D. Boneh, C. Dunworth, R. J. Lipton, and J. Sgall. </author> <title> On the computational power of DNA. </title> <type> Manuscript, </type> <year> 1996. </year>
Reference-contexts: Results of this type appear in [4, 23, 24, 29], but they assume models of molecular computation with more powerful operations, such as Amplify, that may be harder to implement in practice. Independently, Boneh et al. <ref> [8] </ref> obtained a result similar to ours. Lemma 1. Let be a circuit with m gates.
Reference: [9] <author> J. F. Buss and J. Goldsmith. </author> <title> Nondeterminism within P. </title> <journal> SICOMP, </journal> <volume> 22 </volume> <pages> 560-572, </pages> <year> 1993. </year>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in [14, 15, 16] and studied further in <ref> [10, 11, 20, 9, 12, 25, 13, 7] </ref>.
Reference: [10] <author> J. D. C. Alvarez and J. Toran. </author> <title> Complexity classes with complete problems between P and NP-complete. </title> <booktitle> In Foundations of Computation Theory, </booktitle> <pages> pages 13-24. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year> <note> LNCS 380. </note>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in [14, 15, 16] and studied further in <ref> [10, 11, 20, 9, 12, 25, 13, 7] </ref>.
Reference: [11] <author> J. Daz and J. Toran. </author> <title> Classes of bounded nondeterminism. </title> <journal> MST, </journal> <volume> 23 </volume> <pages> 21-32, </pages> <year> 1990. </year>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in [14, 15, 16] and studied further in <ref> [10, 11, 20, 9, 12, 25, 13, 7] </ref>.
Reference: [12] <author> J. Goldsmith, M. Levy, and M. Mundhenk. </author> <title> Limited nondeterminism. </title> <journal> SIGACT News, </journal> <pages> pages 20-29, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in [14, 15, 16] and studied further in <ref> [10, 11, 20, 9, 12, 25, 13, 7] </ref>.
Reference: [13] <author> L. Hemachandra and S. Jha. </author> <title> Defying upward and downward separation. </title> <booktitle> In Proceedings of the 10th Annual Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pages 185-195. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> LNCS 665. </note>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in [14, 15, 16] and studied further in <ref> [10, 11, 20, 9, 12, 25, 13, 7] </ref>.
Reference: [14] <author> C. M. R. Kintala. </author> <title> Computations with a restricted number of nondeterministic steps. </title> <type> PhD thesis, </type> <institution> Pennsylvania State University, University Park, </institution> <address> PA, </address> <year> 1977. </year>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in <ref> [14, 15, 16] </ref> and studied further in [10, 11, 20, 9, 12, 25, 13, 7].
Reference: [15] <author> C. M. R. Kintala and P. C. Fischer. </author> <title> Computations with a restricted number of nondeterministic steps. </title> <booktitle> In Proceedings of the 9th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 178-185, </pages> <year> 1977. </year>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in <ref> [14, 15, 16] </ref> and studied further in [10, 11, 20, 9, 12, 25, 13, 7].
Reference: [16] <author> C. M. R. Kintala and P. C. Fischer. </author> <title> Refining nondeterminism in relativized polynomial-time bounded computations. </title> <journal> SICOMP, </journal> <volume> 9(1) </volume> <pages> 46-53, </pages> <month> Feb. </month> <year> 1980. </year>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in <ref> [14, 15, 16] </ref> and studied further in [10, 11, 20, 9, 12, 25, 13, 7].
Reference: [17] <author> R. Lipton. </author> <title> Using DNA to solve NP-complete problems. </title> <journal> Science, </journal> <volume> 268 </volume> <pages> 542-545, </pages> <month> Apr. </month> <year> 1995. </year> <month> 13 </month>
Reference-contexts: 1. A model of molecular computing Molecular computation was first studied in <ref> [1, 17] </ref>. The models we define were inspired as well by the work of [3, 23]. A molecular sequence is a string over an alphabet (we can use any alphabet we like, encoding characters of by finite sequences of base pairs). A test tube is a multi-set of molecular sequences.
Reference: [18] <author> B. Monien and E. Speckenmeyer. </author> <title> Solving satisfiability in less than 2 n steps. </title> <journal> Discrete Appl. Math., </journal> <volume> 10 </volume> <pages> 287-295, </pages> <year> 1985. </year>
Reference-contexts: If we use a table to avoid recomputation, the recursion will run in polynomial time. 5.2. 3-SAT In this section, we apply our results to the classic 3-SAT algorithm of Monien and Speckenmeyer <ref> [18] </ref> and a recent unverified 3-SAT algorithm of Schiermeyer [26]. The former yields a simple MOL (1:62 n ) algorithm, and the latter (assuming that Schier-meyer's paper is correct), yields a MOL (1:497 n ) algorithm. 8 5.2.1.
Reference: [19] <author> M. Ogihara. </author> <title> Breadth first search 3SAT algorithms for DNA computers. </title> <type> TR 629, </type> <institution> University of Rochester, </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: An important complexity measure is the solution space size (also called simply space), i.e., the maximum number of strings in all test tubes at any time, counting multiplicities. Adleman [2] has speculated that molecular computation with a solution space of size 2 70 might be possible. Recent papers <ref> [3, 19] </ref> attempt to optimize solution space size for particular combinatorial problems. Problem instances are associated with a parameter n called their size. In complexity theory, n is the length of a suitable encoding of the instance. <p> Results for Particular Problems Results Previously In This Paper Problem Space Limited Model Reference Space Limited Model Hamiltonian Path n! p SAT 2 n p QBF 2 n fifi [23] 3-SAT 1:62 n fi <ref> [19] </ref> 1:50 n p 3-Colorability 1:89 n p [3] 1:35 n p Independent Set 1:51 n p [3] 1:23 n p (3; 2)-system 1:39 n p 3. <p> By Theorem 8 and Theorem 2, 3SAT 2 NPinit (t 3S (n)), so 3-SAT is in MOL (1:62 n ). The same space bound for 3-SAT was obtained previously by Ogihara <ref> [19] </ref>, but in a model that allows more powerful operations like Polymerization, which can implement the Amplify operation. 9 5.2.2. Schiermeyer's Algorithm Schiermeyer [26] reports a 1:497 n time algorithm for 3-SAT problem. His algorithm is a d-self-reduction for the 3-SAT problem.
Reference: [20] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> On limited nondeterminism and the complexity of the V-C dimension. </title> <booktitle> In Proceedings of the 8th Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pages 12-18, </pages> <year> 1993. </year>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in [14, 15, 16] and studied further in <ref> [10, 11, 20, 9, 12, 25, 13, 7] </ref>.
Reference: [21] <author> N. Pippenger and M. Fischer. </author> <title> Relations among complexity measures. </title> <journal> J. ACM, </journal> <volume> 26, </volume> <year> 1979. </year>
Reference-contexts: Obtain M 0 x by fixing the input x, so the only input to M 0 x is the number z. Construct a circuit equivalent to M 0 x in the usual way (see <ref> [21] </ref>). Apply Lemma 1 to to see that L is in MOL (s (n)). 5. Enumerating Search Spaces with Bounded Nondeterminism Let's start with an important example that illustrates the general technique.
Reference: [22] <author> J. Robson. </author> <title> Algorithms for maximum independent sets. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 425-440, </pages> <year> 1986. </year>
Reference-contexts: Because the algorithm is particularly simple, the molecular algorithm can even be made to run in linear time. 5.4.2. Robson's Algorithm The best published purely recursive algorithm for the independent set problem is due to Robson <ref> [22] </ref> and runs in time 1:229 n for sufficiently large n. A d-self-reduction with 1:229 n leaves is evident from Robson's paper, so we have we have a MOL (1:229 n ) algorithm for the independent set problem. Details are given in the Appendix.
Reference: [23] <author> D. Roos and K. Wagner. </author> <title> On the power of bio-computers. </title> <type> Tr, </type> <institution> University of Wurzburg, </institution> <month> Feb. </month> <year> 1995. </year> <month> ftp://haegar.informatik.uni-wuerzburg.de/pub/TRs/ro-wa95.ps.gz. </month>
Reference-contexts: 1. A model of molecular computing Molecular computation was first studied in [1, 17]. The models we define were inspired as well by the work of <ref> [3, 23] </ref>. A molecular sequence is a string over an alphabet (we can use any alphabet we like, encoding characters of by finite sequences of base pairs). A test tube is a multi-set of molecular sequences. We describe the allowable operations below. <p> Results for Particular Problems Results Previously In This Paper Problem Space Limited Model Reference Space Limited Model Hamiltonian Path n! p SAT 2 n p QBF 2 n fifi <ref> [23] </ref> 3-SAT 1:62 n fi [19] 1:50 n p 3-Colorability 1:89 n p [3] 1:35 n p Independent Set 1:51 n p [3] 1:23 n p (3; 2)-system 1:39 n p 3. <p> Clearly, NPbits (b (n)) = NPinit (2 b (n) ). 4. NPinit (s (n)) MOL (s (n)) In this section we show how simulate to bounded nondeterministic computation via bounded-space molecular computation. Results of this type appear in <ref> [4, 23, 24, 29] </ref>, but they assume models of molecular computation with more powerful operations, such as Amplify, that may be harder to implement in practice. Independently, Boneh et al. [8] obtained a result similar to ours. Lemma 1. Let be a circuit with m gates.
Reference: [24] <author> P. Rothemund. </author> <title> A DNA and restriction enzyme implementation of Turing machines. </title> <address> http://www.ugcs.caltech.edu/~pwkr/oett.html. </address>
Reference-contexts: Clearly, NPbits (b (n)) = NPinit (2 b (n) ). 4. NPinit (s (n)) MOL (s (n)) In this section we show how simulate to bounded nondeterministic computation via bounded-space molecular computation. Results of this type appear in <ref> [4, 23, 24, 29] </ref>, but they assume models of molecular computation with more powerful operations, such as Amplify, that may be harder to implement in practice. Independently, Boneh et al. [8] obtained a result similar to ours. Lemma 1. Let be a circuit with m gates.
Reference: [25] <author> L. Sanchis. </author> <title> Constructing language instances based on partial information. </title> <journal> International Jour. Found. Comp. Sci., </journal> <volume> 5(2) </volume> <pages> 209-229, </pages> <year> 1994. </year>
Reference-contexts: Bounded Nondeterminism NP computation with a limited amount of nondeterminism was introduced in [14, 15, 16] and studied further in <ref> [10, 11, 20, 9, 12, 25, 13, 7] </ref>.
Reference: [26] <author> I. Schiermeyer. </author> <title> Pure literal lookahead: An O(1; 497 n ) 3-satisfiability algorithm. </title> <type> Manuscript, </type> <month> August 14, </month> <year> 1996. </year>
Reference-contexts: If we use a table to avoid recomputation, the recursion will run in polynomial time. 5.2. 3-SAT In this section, we apply our results to the classic 3-SAT algorithm of Monien and Speckenmeyer [18] and a recent unverified 3-SAT algorithm of Schiermeyer <ref> [26] </ref>. The former yields a simple MOL (1:62 n ) algorithm, and the latter (assuming that Schier-meyer's paper is correct), yields a MOL (1:497 n ) algorithm. 8 5.2.1. Monien and Speckenmeyer's Algorithm The size of a satisfiability instance is the number of variables. <p> The same space bound for 3-SAT was obtained previously by Ogihara [19], but in a model that allows more powerful operations like Polymerization, which can implement the Amplify operation. 9 5.2.2. Schiermeyer's Algorithm Schiermeyer <ref> [26] </ref> reports a 1:497 n time algorithm for 3-SAT problem. His algorithm is a d-self-reduction for the 3-SAT problem. We will prove that 3SAT 2 REC (T (F )), where the function T (F ) 1:497 n and will be defined below. We follow [26] to define F 3 and F <p> Schiermeyer's Algorithm Schiermeyer <ref> [26] </ref> reports a 1:497 n time algorithm for 3-SAT problem. His algorithm is a d-self-reduction for the 3-SAT problem. We will prove that 3SAT 2 REC (T (F )), where the function T (F ) 1:497 n and will be defined below. We follow [26] to define F 3 and F 0 3 . For a formula F with n variables, let p be the maximum number of 1-clauses and 2-clauses (with preference of 1-clauses) such that no variable occurs more than twice. <p> Acknowledgments We are grateful to William Gasarch for his patience in reading this paper as well as his suggestions in improving the presentation. We are also grateful to Tirza Hirst for helpful discussions and to Ingo Schiermeyer for sharing with us a preliminary draft of <ref> [26] </ref>.
Reference: [27] <author> C. P. Schnorr. </author> <title> Optimal algorithms for self-reducible problems. </title> <booktitle> In Proceedings of the 3rd International Colloquium on Automata, Languages, and Programming, </booktitle> <pages> pages 322-337, </pages> <year> 1976. </year>
Reference-contexts: Nor does our technique apply to more general self-reductions, such as those used for QBF. 5.1. Implementing Recursion with Bounded Nondetermin ism Recursive algorithms for NP problems usually take the form of d-self-reductions ("d" for disjunctive). Self-reductions were defined in <ref> [27] </ref> and d-self-reductions were defined in [28]. Definition 3. Let jyj denote the size of the problem instance y.
Reference: [28] <author> A. L. Selman. </author> <title> Natural self-reducible sets. </title> <type> Tr, </type> <institution> Northeastern University, </institution> <address> Boston, MA 12115, </address> <year> 1986. </year>
Reference-contexts: Nor does our technique apply to more general self-reductions, such as those used for QBF. 5.1. Implementing Recursion with Bounded Nondetermin ism Recursive algorithms for NP problems usually take the form of d-self-reductions ("d" for disjunctive). Self-reductions were defined in [27] and d-self-reductions were defined in <ref> [28] </ref>. Definition 3. Let jyj denote the size of the problem instance y.
Reference: [29] <author> W. Smith and A. Schweitzer. </author> <title> DNA computers in vitro and vivo. </title> <type> Tr, </type> <institution> NEC, </institution> <year> 1995. </year>
Reference-contexts: Clearly, NPbits (b (n)) = NPinit (2 b (n) ). 4. NPinit (s (n)) MOL (s (n)) In this section we show how simulate to bounded nondeterministic computation via bounded-space molecular computation. Results of this type appear in <ref> [4, 23, 24, 29] </ref>, but they assume models of molecular computation with more powerful operations, such as Amplify, that may be harder to implement in practice. Independently, Boneh et al. [8] obtained a result similar to ours. Lemma 1. Let be a circuit with m gates.
Reference: [30] <author> R. Tarjan. </author> <title> Finding a maximum clique. </title> <type> TR 72-123, </type> <institution> Cornell University, </institution> <year> 1972. </year>
Reference-contexts: The independent set problem is "given a graph G and a number k, does G contain an independent set of cardinality at lest k?" 5.4.1. Tarjan's Algorithm Consider the following simple algorithm due to Tarjan <ref> [30] </ref>. (d (v) denotes the degree of v, and N (v) denotes the neighbor set of v. max (S; T ) denotes the larger of the two 11 sets S and T , with ties resolved arbitrarily.) function MIS (G) pick any vertex v in G if d (v) 1 then
References-found: 30

