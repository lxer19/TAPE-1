URL: http://geyer.lcs.mit.edu/~jchapin/6853/Projects/shah-rahul-seyon-cavalaris.ps
Refering-URL: http://geyer.lcs.mit.edu/~jchapin/6853/Projects/index.html
Root-URL: 
Email: fjimmyc,gseyon,hsrahul,azshahg@mit.edu  
Title: Secure Web Services using PGP Encryption  
Author: James Cavalaris, Geoff Lee Seyon Hariharan Rahul, Ahmed Shah 
Date: November 30, 1997  
Address: Cambridge, MA 02139  
Affiliation: Massachusetts Institute of Technology  
Abstract: This paper examines the problem of providing secure and authentic web services using public key cryptography. We extend Jigsaw, a full blown web server, and Plume, an existing web browser to implement a secure HTTP protocol by integrating Pretty Good Privacy (PGP) into the server and the browser. PGP is used for encryption and authentication of messages between web servers and browsers. PGP public keys are stored on trusted keyservers which serve as the key repositories for use by both the web server and browser. As an added measure of security, Access Control Lists (ACLs) are implemented in the web server for providing fine-grained file access to users. We also study the extensibility and modifiability of the Jigsaw and Plume code bases. Our experience shows that new functionality can be added to these systems without adversely impacting the architecture and performance of their existing services. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Pretty Good Privacy documentation. </author> <note> http://web.mit.edu/network/pgp.html. </note>
Reference: [2] <editor> Integrating Security In a Large Distributed System. </editor> <booktitle> ACM Transactions on Computer System, </booktitle> <volume> vol 7, </volume> <pages> pp 247-280, </pages> <month> August </month> <year> 1989. </year>
Reference: [3] <author> Scalable, </author> <title> Secure, and Highly Available Distributed File Access. </title> <journal> IEEE Computer, </journal> <volume> vol 23, </volume> <pages> pp. 9-21, </pages> <month> May </month> <year> 1990. </year>
Reference: [4] <institution> The Mnemonic Project. </institution> <note> http://oloon.student.utwente.nl/ mnemonic/. 11 </note>
Reference-contexts: authentication system. 4 System Implementation In this section, we profile the codebases, discuss our extensions, and examine the issues involved in our implementations of the secure browser and server components. 4.1 Browser 4.1.1 Choice of Code Base In deciding on a code base for the web browser, we considered Mnemonic <ref> [4] </ref>, Arena [5], Amaya [6], Mosaic [7] and Plume [8]. Our choice, Plume is a Tcl/Tk-based browser developed by the Advanced Computational Systems group of the Australian National University for non-commercial research purposes.
Reference: [5] <institution> The Arena Web Browser. </institution> <note> http://www.yggdrasil.com/Products/Arena/. </note>
Reference-contexts: 4 System Implementation In this section, we profile the codebases, discuss our extensions, and examine the issues involved in our implementations of the secure browser and server components. 4.1 Browser 4.1.1 Choice of Code Base In deciding on a code base for the web browser, we considered Mnemonic [4], Arena <ref> [5] </ref>, Amaya [6], Mosaic [7] and Plume [8]. Our choice, Plume is a Tcl/Tk-based browser developed by the Advanced Computational Systems group of the Australian National University for non-commercial research purposes.
Reference: [6] <institution> Amaya the W3C testbed client. </institution> <note> http://www.w3.org/Amaya/. </note>
Reference-contexts: Implementation In this section, we profile the codebases, discuss our extensions, and examine the issues involved in our implementations of the secure browser and server components. 4.1 Browser 4.1.1 Choice of Code Base In deciding on a code base for the web browser, we considered Mnemonic [4], Arena [5], Amaya <ref> [6] </ref>, Mosaic [7] and Plume [8]. Our choice, Plume is a Tcl/Tk-based browser developed by the Advanced Computational Systems group of the Australian National University for non-commercial research purposes.
Reference: [7] <editor> NCSA Mosaic. </editor> <address> http://www.ncsa.uiuc.edu/SDG/Software/Mosaic/. </address>
Reference-contexts: this section, we profile the codebases, discuss our extensions, and examine the issues involved in our implementations of the secure browser and server components. 4.1 Browser 4.1.1 Choice of Code Base In deciding on a code base for the web browser, we considered Mnemonic [4], Arena [5], Amaya [6], Mosaic <ref> [7] </ref> and Plume [8]. Our choice, Plume is a Tcl/Tk-based browser developed by the Advanced Computational Systems group of the Australian National University for non-commercial research purposes.
Reference: [8] <author> Plume: </author> <note> A WWW Browser. http://tcltk.anu.edu.au/index.html. </note>
Reference-contexts: profile the codebases, discuss our extensions, and examine the issues involved in our implementations of the secure browser and server components. 4.1 Browser 4.1.1 Choice of Code Base In deciding on a code base for the web browser, we considered Mnemonic [4], Arena [5], Amaya [6], Mosaic [7] and Plume <ref> [8] </ref>. Our choice, Plume is a Tcl/Tk-based browser developed by the Advanced Computational Systems group of the Australian National University for non-commercial research purposes. Plume version 0.6.2 was available 5 free of charge at [8] and was composed of around 10,000 lines of Tcl/Tk code. 4.1.2 Rationale for Choosing Plume The <p> for the web browser, we considered Mnemonic [4], Arena [5], Amaya [6], Mosaic [7] and Plume <ref> [8] </ref>. Our choice, Plume is a Tcl/Tk-based browser developed by the Advanced Computational Systems group of the Australian National University for non-commercial research purposes. Plume version 0.6.2 was available 5 free of charge at [8] and was composed of around 10,000 lines of Tcl/Tk code. 4.1.2 Rationale for Choosing Plume The primary advantage of Plume as our browser choice was the language in which it was written - Tcl/Tk. An interpreted language afforded us shorter development and debugging cycles.
Reference: [9] <author> Jigsaw Web Server. </author> <note> http://www.w3.org/Jigsaw/. </note>
Reference-contexts: This issue, we feel, should have been accommodated at the design level, especially since many browsers today are evolving with end-to-end encryption facilities. 4.2 Server 4.2.1 Code Base For the server, we used Jigsaw <ref> [9] </ref>, a complete HTTP server written in more than 114K lines of Java. Jigsaw is used by the World Wide Web Consortium as the test bed for testing new extensions to the HTTP protocol.
Reference: [10] <institution> HTTP/1.1 Proposed Standard, </institution> <note> RFC 2068. http://www.w3.org/Protocols/rfc2068/rfc2068. </note>
Reference: [11] <institution> Message Digest Extension to HTTP ftp://ds.internic.net/rfc/rfc2069.txt. </institution>
Reference: [12] <author> Jennifer G. Steiner, Clifford Neuman, Jef-frey I. Schiller. </author> <title> "Kerberos: An Authentication Service for Open Network Systems", </title> <booktitle> USENIX Mar 1988. </booktitle> <address> ftp://athena-dist.mit.edu:pub/kerberos/ doc/usenix.PS </address>
Reference: [13] <institution> Secure HTTP Extension. </institution> <note> http://ds.internic.net/internet-drafts/draft-ietf-wts/shttp-04.txt </note>
Reference: [14] <editor> Secure Sockets Layer. </editor> <address> http://home.netscape.com/eng/ssl3/index.html </address>
Reference: [15] <author> Wulf, W.A., Cohen, E.S., Corwin, W.M., Jones, A.K., Levin, R., Pierson, C., and Pollack, F.J. "HYDRA: </author> <title> The Kernel of a Multiprocessor Operating System." </title> <journal> Communications of the ACM, </journal> <volume> vol. 17, </volume> <pages> pp. 337-345, </pages> <month> June </month> <year> 1974. </year>
Reference: [16] <institution> BAL's PGP Public Key Server. </institution> <note> http://pgp5.ai.mit.edu/. </note>
Reference: [17] <institution> Using PGP/PEM Encryption with NCSA Mosaic. </institution> <note> http://hoohoo.ncsa.uiuc.edu/docs/PEMPGP.html. </note>
Reference: [18] <author> Systemics Corporation. </author> <note> http://www.systemics.com/. 12 </note>
Reference-contexts: On the browser side, we have used existing widely available PGP packages as there were no PGP modules in Tcl. The PGP software we have chosen to use with the Jigsaw web server is the Cryptix cryptography package <ref> [18] </ref>, developed by Systemics corporation, which is written in Java. 4.3.1 Cryptix The Cryptix Java PGP packages have a very modular design. Complex functionality is built from small, independent objects, separating the tasks of computation, crypto data structure manipulation, and key management.
References-found: 18

