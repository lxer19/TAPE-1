URL: http://ballade.cs.ucla.edu:8080/~cong/papers/pdw96_ba.ps.gz
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Email: okamoto@cs.ucla.edu cong@cs.ucla.edu  
Phone: 1  2  
Title: Interconnect Layout Optimization by Simultaneous Steiner Tree Construction and Buffer Insertion  
Author: Takumi Okamoto ; Jason Cong 
Address: Los Angeles, CA 90095  216, Japan  
Affiliation: Dept. of Computer Science, University of California,  C&C Research Laboratories, NEC Corp., Miyamae, Kawasaki  
Abstract: This paper presents an algorithm for interconnect layout optimization with buffer insertion. Given a source and n sinks of a signal net, with given positions and a required arrival time associated with each sink, the algorithm finds a buffered Steiner tree so that the required arrival time (or timing slack) at the source is maximized. In the algorithm, Steiner routing tree construction and buffer insertion are achieved simultaneously by combining A-tree construction and dynamic programming based buffer insertion algorithms, while these two steps were carried out independently in the past. Extensive experimental results indicate that our approach outperforms conventional two-step approaches. Our buffered Steiner trees increase the timing slack at the source by up to 75% compared with those by the conventional approaches. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. L. Berman, J. L. Carter, and K. F. Day, </author> <title> "The fanout problem: From theory to practice," </title> <booktitle> Advanced Research in VLSI: Proc. 1989 Decennial Caltech Conf., </booktitle> <address> pp.69-99, </address> <year> 1989. </year>
Reference-contexts: On fanout optimization problem, most of previous work focused on construction of buffered trees in logic synthesis with consideration of user-defined timing and area constraints <ref> [1, 2, 3] </ref>. The timing measures used during this stage mainly consist of gate delays and a rough approximation for interconnect delay, which is assumed to be piecewise linear with the number of fanouts. <p> In such combination, the concept of critical path isolation (Figure 7 (a)) and balanced load decomposition (Figure 7 (b)) are also applied, which are techniques used for fanout optimization (or buffer insertion) in logic synthesis <ref> [1, 2, 3] </ref>. In logic synthesis, when one or several sinks are timing-critical, the critical path isolation tech nique generates a fanout tree so that the root gate drives the critical sinks and a smaller additional load due to buffered non-critical paths.
Reference: [2] <author> H. J. Touati, C. W. Moon, R. K. Brayton, and A. Wang, </author> <title> "Performance Oriented Technology Mapping," </title> <booktitle> Proc. sixth MIT VLSI Conf., </booktitle> <address> pp.79-97, </address> <year> 1990. </year>
Reference-contexts: On fanout optimization problem, most of previous work focused on construction of buffered trees in logic synthesis with consideration of user-defined timing and area constraints <ref> [1, 2, 3] </ref>. The timing measures used during this stage mainly consist of gate delays and a rough approximation for interconnect delay, which is assumed to be piecewise linear with the number of fanouts. <p> In such combination, the concept of critical path isolation (Figure 7 (a)) and balanced load decomposition (Figure 7 (b)) are also applied, which are techniques used for fanout optimization (or buffer insertion) in logic synthesis <ref> [1, 2, 3] </ref>. In logic synthesis, when one or several sinks are timing-critical, the critical path isolation tech nique generates a fanout tree so that the root gate drives the critical sinks and a smaller additional load due to buffered non-critical paths.
Reference: [3] <author> K. J. Singh and A. Sangiovanni-Vincentelli, </author> <title> "A Heuristic Algorithm for the Fanout Problem," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1990, </year> <month> pp.357-360. </month>
Reference-contexts: On fanout optimization problem, most of previous work focused on construction of buffered trees in logic synthesis with consideration of user-defined timing and area constraints <ref> [1, 2, 3] </ref>. The timing measures used during this stage mainly consist of gate delays and a rough approximation for interconnect delay, which is assumed to be piecewise linear with the number of fanouts. <p> In such combination, the concept of critical path isolation (Figure 7 (a)) and balanced load decomposition (Figure 7 (b)) are also applied, which are techniques used for fanout optimization (or buffer insertion) in logic synthesis <ref> [1, 2, 3] </ref>. In logic synthesis, when one or several sinks are timing-critical, the critical path isolation tech nique generates a fanout tree so that the root gate drives the critical sinks and a smaller additional load due to buffered non-critical paths.
Reference: [4] <author> H. Vaishnav and M. Pedram, </author> <title> "Routability-Driven Fanout Optimization," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <month> pp.230-235. </month>
Reference-contexts: As a result, although the total gate area of the synthesized netlist is quite small, it may not fit into the target die area after layout. In recent years, <ref> [4, 6, 5, 7, 8] </ref> attack the fanout optimization problem after layout information is available. In [4], a fanout optimization algorithm based on alphabetic trees is presented that generates fanout trees free of internal edge crossings thus improving routing area. <p> As a result, although the total gate area of the synthesized netlist is quite small, it may not fit into the target die area after layout. In recent years, [4, 6, 5, 7, 8] attack the fanout optimization problem after layout information is available. In <ref> [4] </ref>, a fanout optimization algorithm based on alphabetic trees is presented that generates fanout trees free of internal edge crossings thus improving routing area. In [5], buffer insertion based on a minimum spanning tree is proposed.
Reference: [5] <author> L. N. Kannan, P. R. Suaris, and H. G. Fang, </author> <title> "A Methodology and Algorithms for Post-Placement Delay Optimization," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1994, </year> <month> pp.327-332. </month>
Reference-contexts: As a result, although the total gate area of the synthesized netlist is quite small, it may not fit into the target die area after layout. In recent years, <ref> [4, 6, 5, 7, 8] </ref> attack the fanout optimization problem after layout information is available. In [4], a fanout optimization algorithm based on alphabetic trees is presented that generates fanout trees free of internal edge crossings thus improving routing area. <p> In recent years, [4, 6, 5, 7, 8] attack the fanout optimization problem after layout information is available. In [4], a fanout optimization algorithm based on alphabetic trees is presented that generates fanout trees free of internal edge crossings thus improving routing area. In <ref> [5] </ref>, buffer insertion based on a minimum spanning tree is proposed.
Reference: [6] <author> L.P.P.P. van Ginneken, </author> <title> "Buffer Placement in Distributed RC-tree Networks for Minimal Elmore Delay," </title> <booktitle> Proc. IEEE Int. Symp. Circuits Syst., </booktitle> <year> 1990, </year> <month> pp.865-868. </month>
Reference-contexts: As a result, although the total gate area of the synthesized netlist is quite small, it may not fit into the target die area after layout. In recent years, <ref> [4, 6, 5, 7, 8] </ref> attack the fanout optimization problem after layout information is available. In [4], a fanout optimization algorithm based on alphabetic trees is presented that generates fanout trees free of internal edge crossings thus improving routing area. <p> In [4], a fanout optimization algorithm based on alphabetic trees is presented that generates fanout trees free of internal edge crossings thus improving routing area. In [5], buffer insertion based on a minimum spanning tree is proposed. In <ref> [6] </ref>, a polynomial time algorithm using dynamic programming is proposed for delay-optimal buffer insertion problem on a fl This work is partially supported by National Science Foundation Young Investigator Award MIP9357582 and a matching grant from Intel Corporation. given tree topology. [7, 8] has integrated wire sizing and power minimization with <p> algorithm using dynamic programming is proposed for delay-optimal buffer insertion problem on a fl This work is partially supported by National Science Foundation Young Investigator Award MIP9357582 and a matching grant from Intel Corporation. given tree topology. [7, 8] has integrated wire sizing and power minimization with the algorithm in <ref> [6] </ref> under a more accurate delay model taking signal slew into account. On interconnect topology optimization problem, the analysis in [9] and [10] showed that as we reduce the device dimension, resistance ratio, which is defined as the ratio of the driver resistance versus the unit wire resistance, decreases. <p> In the algorithm, Steiner tree construction and buffer insertion are achieved simultaneously by combining A-tree algorithm [10] and dynamic programming based buffer insertion algorithm <ref> [6] </ref>. Extensive experimental results indicate that our approach outperforms conventional two-step approaches. Our buffered Steiner trees increase the timing slack at the source by up to 75% compared with those by the conventional approaches. 2. Delay Models and Problem Formulation 2.1. <p> Related Work We briefly review the A-tree algorithm in [10] and the buffer insertion algorithm in <ref> [6] </ref>, which are basis of our proposed algorithm. 3.1. <p> But it is easy to extend the algorithm to the general case. 3.2. Buffer Insertion For given required arrival times at the sinks of a given Steiner tree, the buffer insertion algorithm in <ref> [6] </ref> chooses the buffering position on the tree such that the required arrival time at the source is as late as possible, where the delay is calculated based on the definition in Section 2. <p> The second phase traces back the computations of the first phase that led to this option, and determines the computed buffer positions on the way (Figure 5 (b)). In the algorithm in <ref> [6] </ref>, candidate points for the buffer insertion are right after the Steiner points in the tree, which makes it possible to unload the critical path as much as possible (Figure 6 (a)). <p> order to make it possible to insert buffer in the middle of the wire (Figure 6 (b)). 1 "dc-connected" means "directly connected by wires". 2 Irredundant set has no two options (q; c) and (q 0 ; c 0 ) such that q &gt; q 0 and c c 0 <ref> [6] </ref>. 3 For simplicity, a binary tree is assumed here, but the algorithm is easily applied to general trees by addition of dummy nodes and 0 length wires [8]. <p> The load will be balanced, since R of the merging for the sinks are within a small range. 4.3. Overall Algorithm The algorithm consists of two phases in the same way with the buffer insertion <ref> [6] </ref>: bottom up tree construction with option computation and top down buffer insertion. Formal description for the first phase, bottom up tree construction with option computation, is shown in Figure 10. <p> Option computation at each subtree's root by bottom up () and mcost (v; w; ROOT ) evaluation at the merging are integrated into A-tree algorithm. The second phase, top down buffer insertion, is the same with the one in the buffer insertion <ref> [6] </ref>. The option which gives the maximum required time at root is chosen, then traces back the computations of the first phase that led to this option. During the backtrace, the buffer positions are determined. 5. <p> Resistance r 0 0:12=m Wire Capacitance c 0 0:15f F=m Loading Capacitance of Sink c g 0:05pF 0:15pF Loading Capacitance of Buffer c b 0:05pF Required Time at Sink q s 5:0ns 10:0ns We compared results obtained by the following two meth ods: M1: A-tree [21] followed by buffer insertion <ref> [6] </ref>. M2: BA-tree construction (ff in mcost: 0.2, 0.4) . Table 2 shows average required times at the sources of the buffered Steiner trees generated by the two methods. The difference of the required time is increased as the number of sinks is increased. <p> Note that minimization for the number of buffers as in <ref> [6] </ref> is not considered here. Therefore, redundant buffers might be included in the results.
Reference: [7] <author> J. Lillis, C. K. Cheng, and T. T. Lin, </author> <title> "Optimal and Efficient Buffer Insertion and Wire Sizing," </title> <booktitle> Proc. IEEE Custom Integrated Circuits Conf., </booktitle> <year> 1995, </year> <month> pp.259-262. </month>
Reference-contexts: As a result, although the total gate area of the synthesized netlist is quite small, it may not fit into the target die area after layout. In recent years, <ref> [4, 6, 5, 7, 8] </ref> attack the fanout optimization problem after layout information is available. In [4], a fanout optimization algorithm based on alphabetic trees is presented that generates fanout trees free of internal edge crossings thus improving routing area. <p> In [6], a polynomial time algorithm using dynamic programming is proposed for delay-optimal buffer insertion problem on a fl This work is partially supported by National Science Foundation Young Investigator Award MIP9357582 and a matching grant from Intel Corporation. given tree topology. <ref> [7, 8] </ref> has integrated wire sizing and power minimization with the algorithm in [6] under a more accurate delay model taking signal slew into account. <p> Our algorithm, however, is easily extended to general case, where more than one types of buffer can be used and signal polarity must be considered, by using the methods similar to those in <ref> [7, 8] </ref>. 3. Related Work We briefly review the A-tree algorithm in [10] and the buffer insertion algorithm in [6], which are basis of our proposed algorithm. 3.1.
Reference: [8] <author> J. Lillis, C. K. Cheng, and T. T. Lin, </author> <title> "Optimal Wire Sizing and Buffer Insertion for Low Power and a Generalized Delay Model," </title> <booktitle> Proc. IEEE Int. Conf. Computer-Aided Design, </booktitle> <year> 1995, </year> <month> pp.138-143. </month>
Reference-contexts: As a result, although the total gate area of the synthesized netlist is quite small, it may not fit into the target die area after layout. In recent years, <ref> [4, 6, 5, 7, 8] </ref> attack the fanout optimization problem after layout information is available. In [4], a fanout optimization algorithm based on alphabetic trees is presented that generates fanout trees free of internal edge crossings thus improving routing area. <p> In [6], a polynomial time algorithm using dynamic programming is proposed for delay-optimal buffer insertion problem on a fl This work is partially supported by National Science Foundation Young Investigator Award MIP9357582 and a matching grant from Intel Corporation. given tree topology. <ref> [7, 8] </ref> has integrated wire sizing and power minimization with the algorithm in [6] under a more accurate delay model taking signal slew into account. <p> Our algorithm, however, is easily extended to general case, where more than one types of buffer can be used and signal polarity must be considered, by using the methods similar to those in <ref> [7, 8] </ref>. 3. Related Work We briefly review the A-tree algorithm in [10] and the buffer insertion algorithm in [6], which are basis of our proposed algorithm. 3.1. <p> no two options (q; c) and (q 0 ; c 0 ) such that q &gt; q 0 and c c 0 [6]. 3 For simplicity, a binary tree is assumed here, but the algorithm is easily applied to general trees by addition of dummy nodes and 0 length wires <ref> [8] </ref>. Node which has only one child, where Z l or Z r are NULL in Figure 4, can be also treated by a simple extension.
Reference: [9] <author> D. Zhou, F. P. Preparata, and S. M. Kang, </author> <title> "Interconnection Delay in Very High-Speed VLSI," </title> <journal> IEEE Trans. Circuits Syst., </journal> <volume> 38(7), pp.779-790, </volume> <month> July </month> <year> 1991. </year>
Reference-contexts: On interconnect topology optimization problem, the analysis in <ref> [9] </ref> and [10] showed that as we reduce the device dimension, resistance ratio, which is defined as the ratio of the driver resistance versus the unit wire resistance, decreases.
Reference: [10] <author> J. Cong, K. S. Leung, and D. Zhou, </author> <title> "Performance-Driven Interconnect Design Based on Distributed RC Delay Mode," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <month> pp.606-611. </month>
Reference-contexts: On interconnect topology optimization problem, the analysis in [9] and <ref> [10] </ref> showed that as we reduce the device dimension, resistance ratio, which is defined as the ratio of the driver resistance versus the unit wire resistance, decreases. <p> For interconnect optimization in deep submicron VLSI design, recently a number of interconnect topology optimization algorithms have been proposed, including bounded-radius bounded-cost trees [11], AHHK trees [12], maximum performance trees [13], A-trees <ref> [10] </ref>, low-delay trees [14, 15], and IDW/CFD trees [16]. <p> In the algorithm, Steiner tree construction and buffer insertion are achieved simultaneously by combining A-tree algorithm <ref> [10] </ref> and dynamic programming based buffer insertion algorithm [6]. Extensive experimental results indicate that our approach outperforms conventional two-step approaches. Our buffered Steiner trees increase the timing slack at the source by up to 75% compared with those by the conventional approaches. 2. Delay Models and Problem Formulation 2.1. <p> Our algorithm, however, is easily extended to general case, where more than one types of buffer can be used and signal polarity must be considered, by using the methods similar to those in [7, 8]. 3. Related Work We briefly review the A-tree algorithm in <ref> [10] </ref> and the buffer insertion algorithm in [6], which are basis of our proposed algorithm. 3.1. A-tree Algorithm In [10], it was shown that a routing tree which minimizes the Elmore delay upper bound in [20] can be achieved by minimizing a weighted combination of the objectives of the minimum Steiner <p> Related Work We briefly review the A-tree algorithm in <ref> [10] </ref> and the buffer insertion algorithm in [6], which are basis of our proposed algorithm. 3.1. A-tree Algorithm In [10], it was shown that a routing tree which minimizes the Elmore delay upper bound in [20] can be achieved by minimizing a weighted combination of the objectives of the minimum Steiner tree, the shortest path tree, and the "quadratic minimum Steiner tree" (a tree that minimizes the summation of source-node <p> Definition 1: A rectilinear Steiner tree T is called an A-tree if every path connecting the source s 0 and any node p on the tree is a shortest path. In <ref> [10] </ref>, an efficient algorithm based on bottom-up tree construction from the sinks was proposed for minimum-cost A-tree, which extends the algorithm in [21]. <p> In our approach here, we use only heuristic move in the A-tree algorithm for simplicity (essentially the algorithm in [21]). Despite using only heuristic moves, [21] has similar performance as the A-tree algorithm in <ref> [10] </ref>. The algorithm in [21] works as follows: A set called ROOT consisting of the roots of current subtrees which will eventually be merged to form the solution is maintained; Initially, ROOT contains the roots of n trivial trees, each consisting of a single sink.
Reference: [11] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong, </author> <title> "Provably Good Performance-Driven Global Routing," </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11(6), pp.739-752, </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: For interconnect optimization in deep submicron VLSI design, recently a number of interconnect topology optimization algorithms have been proposed, including bounded-radius bounded-cost trees <ref> [11] </ref>, AHHK trees [12], maximum performance trees [13], A-trees [10], low-delay trees [14, 15], and IDW/CFD trees [16].
Reference: [12] <author> C. J. Alpert, T. C. Hu, H. Huang, and A. B. Kahng, </author> <title> "A Direct Combination of the Prim and Dijkstra Constructions for Improved Performance-Driven Routing," </title> <booktitle> Proc. IEEE Int. Symp. Circuits Syst., </booktitle> <year> 1993, </year> <month> pp.1869-1872. </month>
Reference-contexts: For interconnect optimization in deep submicron VLSI design, recently a number of interconnect topology optimization algorithms have been proposed, including bounded-radius bounded-cost trees [11], AHHK trees <ref> [12] </ref>, maximum performance trees [13], A-trees [10], low-delay trees [14, 15], and IDW/CFD trees [16].
Reference: [13] <author> J. P. Cohoon and L. J. Randall, </author> <title> "Critical Net Routing," </title> <booktitle> Proc. IEEE Int. Conf. Computer Design, </booktitle> <year> 1991, </year> <month> pp.174-177. </month>
Reference-contexts: For interconnect optimization in deep submicron VLSI design, recently a number of interconnect topology optimization algorithms have been proposed, including bounded-radius bounded-cost trees [11], AHHK trees [12], maximum performance trees <ref> [13] </ref>, A-trees [10], low-delay trees [14, 15], and IDW/CFD trees [16].
Reference: [14] <author> K. D. Boese, A. B. Kahng, B. A. McCoy, and G. Robins, </author> <title> "Rectilinear Steiner Trees with Minimum El-more Delay" Proc. </title> <booktitle> ACM/IEEE Design Automation Conf., </booktitle> <year> 1994, </year> <month> pp.381-386. </month>
Reference-contexts: For interconnect optimization in deep submicron VLSI design, recently a number of interconnect topology optimization algorithms have been proposed, including bounded-radius bounded-cost trees [11], AHHK trees [12], maximum performance trees [13], A-trees [10], low-delay trees <ref> [14, 15] </ref>, and IDW/CFD trees [16].
Reference: [15] <author> K. D. Boese, A. B. Kahng, B. A. McCoy, and G. Robins, </author> <title> "Near-Optimal Critical Sink Routing Tree Constructions," </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 14(12), pp.1417-1436, </volume> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: For interconnect optimization in deep submicron VLSI design, recently a number of interconnect topology optimization algorithms have been proposed, including bounded-radius bounded-cost trees [11], AHHK trees [12], maximum performance trees [13], A-trees [10], low-delay trees <ref> [14, 15] </ref>, and IDW/CFD trees [16].
Reference: [16] <author> X. Hong, T. Xue, E. S. Kuh, C. K. Cheng, and J. Huang, </author> <title> "Performance-Driven Steiner Tree Algorithms for Global Routing," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 177-181. </pages>
Reference-contexts: For interconnect optimization in deep submicron VLSI design, recently a number of interconnect topology optimization algorithms have been proposed, including bounded-radius bounded-cost trees [11], AHHK trees [12], maximum performance trees [13], A-trees [10], low-delay trees [14, 15], and IDW/CFD trees <ref> [16] </ref>. Although steady progress has been made in buffer insertion and Steiner tree construction for delay minimization, and encouraging experimental results were reported, we believe that these two steps need to be carried out simultaneously in order to construct even higher performance buffered Steiner trees directly.
Reference: [17] <author> W. C. </author> <title> Elmore, "The Transient Response of Damped Linear Network with Particular Regard to Wideband Amplifier," </title> <journal> J. Applied Physics, </journal> <volume> 19, </volume> <pages> pp. 55-63, </pages> <year> 1948. </year>
Reference-contexts: Our buffered Steiner trees increase the timing slack at the source by up to 75% compared with those by the conventional approaches. 2. Delay Models and Problem Formulation 2.1. Delay Models As in most previous works on interconnect layout optimization, we adopt the Elmore delay model <ref> [17] </ref> for interconnects and standard RC models for buffers. For wire e, let l e , c e and r e be its length, capacitance and resistance, respectively. Further, let e v denote the wire entering node v from its parent.
Reference: [18] <author> J.Cong and C.-K.Koh, </author> <title> "Simultaneous Driver and Wire Sizing for Performance and Power Optimization," </title> <journal> IEEE Trans. VLSI, </journal> <volume> 2(4), pp.408-423, </volume> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Note that we assume wires are of a uniform width. Wiresize optimization can be carried out in a separate step after the buffered tree construction using the algorithm in <ref> [18, 19] </ref> or during the buffered tree construction as mentioned in Section 6. 2.2. Problem Formulation We use required arrival time as our optimization objective.
Reference: [19] <author> J.Cong and K.S.Leung, </author> <title> "Optimal Wiresizing Under the Distributed Elmore Delay Model," </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 14(3), pp.321-336, </volume> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: Note that we assume wires are of a uniform width. Wiresize optimization can be carried out in a separate step after the buffered tree construction using the algorithm in <ref> [18, 19] </ref> or during the buffered tree construction as mentioned in Section 6. 2.2. Problem Formulation We use required arrival time as our optimization objective.
Reference: [20] <author> J. Rubinstein, P. Penfield, and M. A. Horowitz, </author> <title> "Signal Delay in RC Tree Networks," </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 2(3), pp.202-211, </volume> <year> 1983. </year>
Reference-contexts: Related Work We briefly review the A-tree algorithm in [10] and the buffer insertion algorithm in [6], which are basis of our proposed algorithm. 3.1. A-tree Algorithm In [10], it was shown that a routing tree which minimizes the Elmore delay upper bound in <ref> [20] </ref> can be achieved by minimizing a weighted combination of the objectives of the minimum Steiner tree, the shortest path tree, and the "quadratic minimum Steiner tree" (a tree that minimizes the summation of source-node path lengths, taken over all possible node locations).
Reference: [21] <author> S.K. Rao, P. Sadayappan, F.K. Hwang, and P.W. Shor, </author> <title> "The Rectilinear Steiner Arborescence Problem," </title> <address> Algo-rithmica 7, pp.277-288, </address> <year> 1992. </year>
Reference-contexts: Therefore, a minimum-cost rectilinear arborescence (A-tree) formulated in <ref> [21] </ref> is of interest since it heuristically addresses all of these terms in the decomposed upper bound at once. Definition 1: A rectilinear Steiner tree T is called an A-tree if every path connecting the source s 0 and any node p on the tree is a shortest path. <p> In [10], an efficient algorithm based on bottom-up tree construction from the sinks was proposed for minimum-cost A-tree, which extends the algorithm in <ref> [21] </ref>. The algorithm starts with a set of subtrees, each consisting of a sink, and iteratively performs two subtrees "merging" or a subtree "growing" until all subtrees are merged into one tree. <p> In our approach here, we use only heuristic move in the A-tree algorithm for simplicity (essentially the algorithm in <ref> [21] </ref>). Despite using only heuristic moves, [21] has similar performance as the A-tree algorithm in [10]. The algorithm in [21] works as follows: A set called ROOT consisting of the roots of current subtrees which will eventually be merged to form the solution is maintained; Initially, ROOT contains the roots of <p> In our approach here, we use only heuristic move in the A-tree algorithm for simplicity (essentially the algorithm in <ref> [21] </ref>). Despite using only heuristic moves, [21] has similar performance as the A-tree algorithm in [10]. The algorithm in [21] works as follows: A set called ROOT consisting of the roots of current subtrees which will eventually be merged to form the solution is maintained; Initially, ROOT contains the roots of n trivial trees, each consisting of <p> In our approach here, we use only heuristic move in the A-tree algorithm for simplicity (essentially the algorithm in <ref> [21] </ref>). Despite using only heuristic moves, [21] has similar performance as the A-tree algorithm in [10]. The algorithm in [21] works as follows: A set called ROOT consisting of the roots of current subtrees which will eventually be merged to form the solution is maintained; Initially, ROOT contains the roots of n trivial trees, each consisting of a single sink. <p> Buffer d b 0:1ns Wire Resistance r 0 0:12=m Wire Capacitance c 0 0:15f F=m Loading Capacitance of Sink c g 0:05pF 0:15pF Loading Capacitance of Buffer c b 0:05pF Required Time at Sink q s 5:0ns 10:0ns We compared results obtained by the following two meth ods: M1: A-tree <ref> [21] </ref> followed by buffer insertion [6]. M2: BA-tree construction (ff in mcost: 0.2, 0.4) . Table 2 shows average required times at the sources of the buffered Steiner trees generated by the two methods. The difference of the required time is increased as the number of sinks is increased.
References-found: 21

