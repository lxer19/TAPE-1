URL: http://www.cs.virginia.edu/~nr/pubs/specifying.ps
Refering-URL: http://www.cs.virginia.edu/~nr/toolkit/
Root-URL: http://www.cs.virginia.edu
Title: Specifying Representations of Machine Instructions  
Author: NORMAN RAMSEY MARY F. FERN ANDEZ 
Keyword: Categories and Subject Descriptors: C.0 [Computer Systems Organization]: General|systems specification methodology; D.3.2 [Programming Languages]: Language Classifications| specialized application languages; D.3.4 [Programming Languages]: Processors|translator writing systems and compiler generators General Terms: Languages Additional Key Words and Phrases: Compiler generation, decoding, encoding, machine code, machine description, object code, relocation  
Date: 3, May 1997, Pages 492-524.  
Note: ACM Transactions on Programming Languages and Systems, Vol. 19, No.  
Affiliation: University of Virginia and  AT&T Labs  
Abstract: We present SLED, a Specification Language for Encoding and Decoding, which describes abstract, binary, and assembly-language representations of machine instructions. Guided by a SLED specification, the New Jersey Machine-Code Toolkit generates bit-manipulating code for use in applications that process machine code. Programmers can write such applications at an assembly-language level of abstraction, and the toolkit enables the applications to recognize and emit the binary representations used by the hardware. SLED is suitable for describing both CISC and RISC machines; we have specified representations of MIPS R3000, SPARC, Alpha, and Intel Pentium instructions, and toolkit users have written specifications for the Power PC and Motorola 68000. The article includes representative excerpts from our SPARC and Pentium specifications. SLED uses four elements; fields and tokens describe parts of instructions; patterns describe binary representations of instructions or groups of instructions; and constructors map between the abstract and binary levels. By combining the elements in different ways, SLED supports machine-independent implementations of machine-level concepts like conditional assembly, span-dependent instructions, relocatable addresses, object code, sections, and relocation. SLED specifications can be checked automatically for consistency with existing assemblers. The implementation of the toolkit is largely determined by our representations of patterns and constructors. We use a normal form that facilitates construction of encoders and decoders. The article describes the normal form and its use. The toolkit has been used to help build several applications. We have built a retargetable debugger and a retargetable, optimizing linker. Colleagues have built a dynamic code generator, a decompiler, and an execution-time analyzer. The toolkit generates efficient code; for example, the linker emits binary up to 15% faster than it emits assembly language, making it 1.7-2 times faster to produce an a.out directly than by using the assembler. This work has been funded by a Fannie and John Hertz Fellowship, an AT&T Ph.D. Fellowship, an IBM Graduate Research Fellowship, and by Bellcore. Authors' addresses: N. Ramsey, Department of Computer Science, University of Virginia, Char-lottesville, VA 22903; email nr@cs.virginia.edu; M. F. Fernandez, AT&T Labs | Research, 180 Park Avenue, Florham Park, NJ 07932-0971; email mff@research.att.com. Permission to make digital/hard copy of all or part of this material without fee is granted provided that the copies are not made or distributed for profit or commercial advantage, the ACM copyright/server notice, the title of the publication, and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery, Inc. (ACM). To copy otherwise, to republish, to post on servers, or to redistribute to lists requires prior specific permission and/or a fee. c fl 1997 ACM digits-dashes-and-slashes $price
Abstract-found: 1
Intro-found: 1
Reference: <author> Ball, T. and Larus, J. R. </author> <year> 1992. </year> <title> Optimally profiling and tracing programs. </title> <booktitle> In Conference Record of the 19th Annual ACM Symposium on Principles of Programming Languages. </booktitle> <address> Albuquerque, NM, </address> <pages> 59-70. </pages>
Reference: <author> Bell, C. G. and Newell, A. </author> <year> 1971. </year> <title> Computer Structures: Readings and Examples. </title> <publisher> McGraw-Hill, </publisher> <address> New York. </address>
Reference: <author> Braun, O. C. </author> <year> 1996. </year> <title> Retargetability issues in worst-case timing analysis of embedded systems. </title> <type> Bachelor's thesis, </type> <institution> Dept of Computer Science, Princeton University. </institution>
Reference: <author> Cattell, R. G. G. </author> <year> 1980. </year> <title> Automatic derivation of code generators from machine descriptions. </title> <journal> ACM Transactions on Programming Languages and Systems 2, </journal> <volume> 2 (Apr.), </volume> <pages> 173-190. </pages>
Reference: <author> Cmelik, B. and Keppel, D. </author> <year> 1994. </year> <title> Shade: A fast instruction-set simulator for execution profiling. </title> <booktitle> In Proceedings of the 1994 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems. </booktitle> <pages> 128-137. </pages>
Reference: <author> Cook, T. and Harcourt, E. </author> <year> 1994. </year> <title> A functional specification language for instruction set architectures. </title> <booktitle> In Proceedings of the 1994 International Conference on Computer Languages. </booktitle> <pages> 11-19. </pages>
Reference: <author> Dean, J., DeFouw, G., Grove, D., Litvinov, V., and Chambers, C. </author> <year> 1996. </year> <title> Vortex: An optimizing compiler for object-oriented languages. </title> <booktitle> OOPSLA '96 Conference Proceedings, in SIGPLAN Notices 31, 10 (Oct.), </booktitle> <pages> 83-100. </pages>
Reference: <author> Elsner, D., Fenlason, J., et al. </author> <year> 1993. </year> <title> Using as: the GNU Assembler. Free Software Foundation. </title>
Reference: <author> Fauth, A., Praet, J. V., and Freericks, M. </author> <year> 1995. </year> <title> Describing instruction set processors using nML. </title> <booktitle> In The European Design and Test Conference. </booktitle> <month> 503-507. </month> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 19, No. 3, </volume> <month> May </month> <year> 1997. </year> <title> Specifying Representations of Machine Instructions 523 Fern andez, </title> <editor> M. F. and Ramsey, N. </editor> <year> 1996. </year> <title> Automatic checking of instruction specifications. </title> <type> Tech. rep., </type> <institution> AT&T Research. </institution> <month> July. </month> <note> Submitted to ICSE 1997. </note>
Reference: <author> Ferguson, D. E. </author> <year> 1966. </year> <title> The evolution of the meta-assembly program. </title> <journal> Communications of the ACM 9, </journal> <volume> 3, </volume> <pages> 190-193. </pages>
Reference: <author> Fern andez, M. F. </author> <year> 1995. </year> <title> Simple and effective link-time optimization of Modula-3 programs. </title> <booktitle> Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation, in SIGPLAN Notices 30, </booktitle> <month> 6 (June), </month> <pages> 103-115. </pages>
Reference: <author> George, L., Guillame, F., and Reppy, J. H. </author> <year> 1994. </year> <title> A portable and optimizing back end for the SML/NJ compiler. </title> <booktitle> In 5th International Conference on Compiler Construction. </booktitle> <pages> 83-97. </pages>
Reference: <author> Graham, S. L., Lucco, S., and Wahbe, R. </author> <year> 1995. </year> <title> Adaptable binary programs. </title> <booktitle> In Proceedings of the 1995 USENIX Technical Conference. </booktitle> <address> New Orleans, LA, </address> <pages> 315-325. </pages>
Reference: <author> Griswold, R. E. and Griswold, M. T. </author> <year> 1990. </year> <title> The Icon Programming Language, Second ed. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address>
Reference: <author> Hastings, R. and Joyce, B. </author> <year> 1992. </year> <title> Purify: Fast detection of memory leaks and access errors. </title> <booktitle> In Proceedings of the Winter USENIX Conference. </booktitle> <address> San Francisco, CA, </address> <month> 125-136. </month> <title> Intel Corporation 1993. Architecture and Programming Manual. Intel Corporation, Mount Prospect, IL. International Organization for Standardization 1987. Information Processing | Open Systems Interconnection | Specification of Abstract Syntax Notation One (ASN.1). International Organization for Standardization. ISO 8824 (CCITT X.208). </title>
Reference: <author> Johnson, S. C. </author> <year> 1990. </year> <title> Postloading for fun and profit. </title> <booktitle> In Proceedings of the Winter USENIX Conference. </booktitle> <pages> 325-330. </pages>
Reference: <author> Larus, J. R. and Schnarr, E. </author> <year> 1995. </year> <title> EEL: machine-independent executable editing. </title> <booktitle> Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation, in SIGPLAN Notices 30, </booktitle> <month> 6 (June), </month> <pages> 291-300. </pages>
Reference: <author> Nelson, G., Ed. </author> <year> 1991. </year> <title> Systems Programming with Modula-3. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address>
Reference: <author> Ramsey, N. </author> <year> 1992. </year> <title> A retargetable debugger. </title> <type> Ph.D. thesis, </type> <institution> Princeton University, Department of Computer Science. </institution> <note> Also Technical Report CS-TR-403-92. </note>
Reference: <author> Ramsey, N. </author> <year> 1994a. </year> <title> Correctness of trap-based breakpoint implementations. </title> <booktitle> In Proceedings of the 21st ACM Symposium on the Principles of Programming Languages. </booktitle> <address> Portland, OR, </address> <pages> 15-24. </pages>
Reference: <author> Ramsey, N. </author> <year> 1994b. </year> <title> Literate programming simplified. </title> <journal> IEEE Software 11, </journal> <volume> 5 (Sept.), </volume> <pages> 97-105. </pages>
Reference: <author> Ramsey, N. </author> <year> 1996a. </year> <title> Relocating machine instructions by currying. </title> <booktitle> ACM SIGPLAN '96 Conference on Programming Language Design and Implementation, in SIGPLAN Notices 31, </booktitle> <month> 5 (May), </month> <pages> 226-236. </pages>
Reference: <author> Ramsey, N. </author> <year> 1996b. </year> <title> A simple solver for linear equations containing nonlinear operators. </title> <journal> Software| Practice & Experience 26, </journal> <volume> 4 (Apr.), </volume> <pages> 467-487. </pages>
Reference: <author> Ramsey, N. and Fern andez, M. F. </author> <year> 1994a. </year> <title> New Jersey Machine-Code Toolkit architecture specifications. </title> <type> Tech. Rep. </type> <institution> TR-470-94, Department of Computer Science, Princeton University. </institution> <month> Oct. </month>
Reference: <author> Ramsey, N. and Fern andez, M. F. </author> <year> 1994b. </year> <title> New Jersey Machine-Code Toolkit reference manual. </title> <type> Tech. Rep. </type> <institution> TR-471-94, Department of Computer Science, Princeton University. </institution> <month> Oct. </month>
Reference: <author> Ramsey, N. and Hanson, D. R. </author> <year> 1992. </year> <title> A retargetable debugger. </title> <booktitle> ACM SIGPLAN '92 Conference on Programming Language Design and Implementation, in SIGPLAN Notices 27, </booktitle> <month> 7 (July), 22-31. </month> <title> SPARC International 1992. The SPARC Architecture Manual, Version 8. </title> <booktitle> SPARC International, </booktitle> <address> Englewood Cliffs, NJ. </address>
Reference: <author> Srivastava, A. and Eustace, A. </author> <year> 1994. </year> <title> ATOM: A system for building customized program analysis tools. </title> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation, in SIGPLAN Notices 29, </booktitle> <month> 6 (June), </month> <pages> 196-205. </pages>
Reference: <author> Srivastava, A. and Wall, D. W. </author> <year> 1993. </year> <title> A practical system for intermodule code optimization. </title> <journal> Journal of Programming Languages 1, </journal> <pages> 1-18. </pages> <note> Also available as WRL Research Report 92/6, </note> <month> December </month> <year> 1992. </year>
Reference: <author> Szymanski, T. G. </author> <year> 1978. </year> <title> Assembling code for machines with span-dependent instructions. </title> <journal> Communications of the ACM 21, 4 (Apr.), 300-308. ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 19, No. 3, </volume> <month> May </month> <year> 1997. </year> <note> 524 Ramsey and Fernandez Wahbe, </note> <author> R., Lucco, S., Anderson, T. E., and Graham, S. L. </author> <year> 1993. </year> <title> Efficient software-based fault isolation. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating System Principles. </booktitle> <pages> 203-216. </pages>
Reference: <author> Wick, J. D. </author> <year> 1975. </year> <title> Automatic generation of assemblers. </title> <type> Ph.D. thesis, </type> <institution> Yale University. </institution> <note> Received December 1995; revised August 1996; accepted October 1996 ACM Transactions on Programming Languages and Systems, Vol. 19, No. 3, </note> <month> May </month> <year> 1997. </year>
References-found: 30

