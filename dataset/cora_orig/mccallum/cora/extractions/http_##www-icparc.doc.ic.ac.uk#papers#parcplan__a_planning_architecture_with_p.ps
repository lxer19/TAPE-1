URL: http://www-icparc.doc.ic.ac.uk/papers/parcplan:_a_planning_architecture_with_p.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Email: fjml,ebrg@doc.ic.ac.uk  
Title: parcPlan: a Planning Architecture with Parallel Actions, Resources and Constraints  
Author: Jonathan Lever and Barry Richards 
Note: Appears in proceedings of 8th ISMIS, North Carolina, October 1994, Springer Verlag.  
Address: London, SW7 2AZ  
Affiliation: IC-Parc, Imperial College,  
Abstract: We describe the generic planning architecture parcPLAN, which uses constraint-solving to perform both temporal and non-temporal reasoning. The architecture allows considerable temporal sophistication in the specification of actions, integrity constraints and planning problems, and produces plans with a high degree of concurrency in action execution. A feature of parcPLAN is the capability to represent and minimise costs associated with plans. parcPLAN has been implemented in the Constraint Logic Programming language ECL i PS e , and performs well on large-scale planning and resource allocation problems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Allen and J. Koomen. </author> <title> Planning using a temporal world model. </title> <booktitle> In Proceedings of the 2nd IJCAI, </booktitle> <address> Karlsruhe, </address> <year> 1983. </year>
Reference-contexts: In planning, actions can be treated as instantaneous|as is typically the case in state-space planning (e.g. STRIPS [4])|or can be considered to have duration as in interval-based planning <ref> [1] </ref>. The parcPLAN architecture is interval-based, and is also non-linear ([9],[7],[10]) in that the order of action-execution in a plan is independent of the order in which actions are introduced during search. In plans produced by parcPLAN, actions can occur concurrently in a variety of overlapping configurations. <p> A planning system that uses temporal constraint propagation in a sophisticated and flexible way was introduced by Allen and Koomen in <ref> [1] </ref>, but the overhead imposed by the temporal reasoner proved to be a bottleneck [5]. In parcPLAN, constraint-solving supports least-commitment in many aspects of planning, including resource allocation and action ordering. Temporal reasoning is also achieved through constraint-solving. <p> The algorithm is broadly similar to that used by Allen and Koomen in <ref> [1] </ref>, although parcPLAN goes beyond Allen and Koomen's planner in including metric temporal reasoning and facilities for resource handling. <p> These various strategies are described in the next section. If, however, no solution to the collapse exists, the planner must return to the action-introduction phase. At this point, a problem exists as to which goals to regard as unsatisfied and are therefore to be achieved through further actions <ref> [1] </ref>. This problem is not yet addressed in parcPLAN. In order to solve this problem, the failure of the collapse needs to be analysed and a subset of incompatible collapses extracted. <p> on (2, 1), on (1, 5), on (5, table1),on (4, 3), on (3, table2) Goal state: on (1, 2), on (2, 3), on (3, 4), on (4, 5), on (5, table3) Optimising on the number of arms required, we obtain the following solution:: move (2, 1, 3, arm2) over interval <ref> [1, 9] </ref> move (1, 5, 2, arm1) over interval [2, 10] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm3) over interval [5, 6] move (3, table2, 4, arm3) over interval [7, 8] The action move (Block,Source,Destination,Arm) is read as "move Block from Source to Destination <p> This is for the ECL i PS e implementation running on a Sparc 2. Setting the optimisation criterion to length of plan, we obtain the following plan (which uses all five arms): move (2, 1, 3, arm1) over interval <ref> [1, 7] </ref> move (1, 5, 2, arm2) over interval [2, 8] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm4) over interval [4, 5] move (3, table2, 4, arm5) over interval [5, 6] This solution is found and proved to be optimal with respect to plan
Reference: [2] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: Constraint-solving has been used to implement least-commitment on the selection of objects used in actions [8], other aspects of resource reasoning [13], and interval durations ([10], [12], [3]). Chapman's TWEAK system <ref> [2] </ref> applies constraint-solving to temporal and non-temporal aspects of planning, and Yang has described an application of finite domain constraint solving to reason about conflict resolution in planning, taking the TWEAK system as a basis [14]. <p> (4, 3), on (3, table2) Goal state: on (1, 2), on (2, 3), on (3, 4), on (4, 5), on (5, table3) Optimising on the number of arms required, we obtain the following solution:: move (2, 1, 3, arm2) over interval [1, 9] move (1, 5, 2, arm1) over interval <ref> [2, 10] </ref> move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm3) over interval [5, 6] move (3, table2, 4, arm3) over interval [7, 8] The action move (Block,Source,Destination,Arm) is read as "move Block from Source to Destination using Arm". <p> This is for the ECL i PS e implementation running on a Sparc 2. Setting the optimisation criterion to length of plan, we obtain the following plan (which uses all five arms): move (2, 1, 3, arm1) over interval [1, 7] move (1, 5, 2, arm2) over interval <ref> [2, 8] </ref> move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm4) over interval [4, 5] move (3, table2, 4, arm5) over interval [5, 6] This solution is found and proved to be optimal with respect to plan length in 0.78 seconds user-time.
Reference: [3] <author> K. Currie and A. Tate. O-plan: </author> <title> control in the open planning architecture. </title> <booktitle> In Proc. of the BCS Expert Systems 85 Conf., Warwick, 1985. </booktitle> <publisher> Cambridge University Press. </publisher>
Reference-contexts: Constraint-solving has been used to implement least-commitment on the selection of objects used in actions [8], other aspects of resource reasoning [13], and interval durations ([10], [12], <ref> [3] </ref>). Chapman's TWEAK system [2] applies constraint-solving to temporal and non-temporal aspects of planning, and Yang has described an application of finite domain constraint solving to reason about conflict resolution in planning, taking the TWEAK system as a basis [14]. <p> 2), on (2, 3), on (3, 4), on (4, 5), on (5, table3) Optimising on the number of arms required, we obtain the following solution:: move (2, 1, 3, arm2) over interval [1, 9] move (1, 5, 2, arm1) over interval [2, 10] move (5, table1, table3, arm3) over interval <ref> [3, 4] </ref> move (4, 3, 5, arm3) over interval [5, 6] move (3, table2, 4, arm3) over interval [7, 8] The action move (Block,Source,Destination,Arm) is read as "move Block from Source to Destination using Arm". <p> Setting the optimisation criterion to length of plan, we obtain the following plan (which uses all five arms): move (2, 1, 3, arm1) over interval [1, 7] move (1, 5, 2, arm2) over interval [2, 8] move (5, table1, table3, arm3) over interval <ref> [3, 4] </ref> move (4, 3, 5, arm4) over interval [4, 5] move (3, table2, 4, arm5) over interval [5, 6] This solution is found and proved to be optimal with respect to plan length in 0.78 seconds user-time.
Reference: [4] <author> R. Fikes and N. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: 2), on (2, 3), on (3, 4), on (4, 5), on (5, table3) Optimising on the number of arms required, we obtain the following solution:: move (2, 1, 3, arm2) over interval [1, 9] move (1, 5, 2, arm1) over interval [2, 10] move (5, table1, table3, arm3) over interval <ref> [3, 4] </ref> move (4, 3, 5, arm3) over interval [5, 6] move (3, table2, 4, arm3) over interval [7, 8] The action move (Block,Source,Destination,Arm) is read as "move Block from Source to Destination using Arm". <p> Setting the optimisation criterion to length of plan, we obtain the following plan (which uses all five arms): move (2, 1, 3, arm1) over interval [1, 7] move (1, 5, 2, arm2) over interval [2, 8] move (5, table1, table3, arm3) over interval <ref> [3, 4] </ref> move (4, 3, 5, arm4) over interval [4, 5] move (3, table2, 4, arm5) over interval [5, 6] This solution is found and proved to be optimal with respect to plan length in 0.78 seconds user-time. <p> optimisation criterion to length of plan, we obtain the following plan (which uses all five arms): move (2, 1, 3, arm1) over interval [1, 7] move (1, 5, 2, arm2) over interval [2, 8] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm4) over interval <ref> [4, 5] </ref> move (3, table2, 4, arm5) over interval [5, 6] This solution is found and proved to be optimal with respect to plan length in 0.78 seconds user-time.
Reference: [5] <author> J. C. Hogge. Tplan: </author> <title> a temporal interval-based planner with novel extensions. </title> <type> Technical Report UIUCDCS-R-87-1367, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> September </month> <year> 1987. </year>
Reference-contexts: A planning system that uses temporal constraint propagation in a sophisticated and flexible way was introduced by Allen and Koomen in [1], but the overhead imposed by the temporal reasoner proved to be a bottleneck <ref> [5] </ref>. In parcPLAN, constraint-solving supports least-commitment in many aspects of planning, including resource allocation and action ordering. Temporal reasoning is also achieved through constraint-solving. Time points are represented by finite-domain variables, allowing parcPLAN to utilise finite-domain constraint propagation techniques. <p> 5), on (5, table3) Optimising on the number of arms required, we obtain the following solution:: move (2, 1, 3, arm2) over interval [1, 9] move (1, 5, 2, arm1) over interval [2, 10] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm3) over interval <ref> [5, 6] </ref> move (3, table2, 4, arm3) over interval [7, 8] The action move (Block,Source,Destination,Arm) is read as "move Block from Source to Destination using Arm". This solution is found and proved to be optimal with respect to the number of arms required in 1.25 seconds user-time. <p> optimisation criterion to length of plan, we obtain the following plan (which uses all five arms): move (2, 1, 3, arm1) over interval [1, 7] move (1, 5, 2, arm2) over interval [2, 8] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm4) over interval <ref> [4, 5] </ref> move (3, table2, 4, arm5) over interval [5, 6] This solution is found and proved to be optimal with respect to plan length in 0.78 seconds user-time. <p> following plan (which uses all five arms): move (2, 1, 3, arm1) over interval [1, 7] move (1, 5, 2, arm2) over interval [2, 8] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm4) over interval [4, 5] move (3, table2, 4, arm5) over interval <ref> [5, 6] </ref> This solution is found and proved to be optimal with respect to plan length in 0.78 seconds user-time.
Reference: [6] <author> B. Richards, Y. Jiang, and H. Choi. </author> <title> On interval-based temporal planning an IQ strategy. </title> <editor> In Z. W. Ras and M. Zemankova, editors, </editor> <booktitle> Proc. of the 6th International Symposium ISMIS 91, </booktitle> <pages> pages 226-235, </pages> <address> Charlotte, USA, 1991. </address> <publisher> Springer Verlag. </publisher> <pages> 8 </pages>
Reference-contexts: 1 Introduction This paper describes the generic planning architecture parcPLAN. This architecture is a development of IQ-PLAN <ref> [6] </ref>, and continues to offer the temporal expressiveness of IQ-PLAN while including mechanisms to represent and minimise costs associated with plans, and adding constraint-solving to perform inference. In planning, actions can be treated as instantaneous|as is typically the case in state-space planning (e.g. <p> 5), on (5, table3) Optimising on the number of arms required, we obtain the following solution:: move (2, 1, 3, arm2) over interval [1, 9] move (1, 5, 2, arm1) over interval [2, 10] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm3) over interval <ref> [5, 6] </ref> move (3, table2, 4, arm3) over interval [7, 8] The action move (Block,Source,Destination,Arm) is read as "move Block from Source to Destination using Arm". This solution is found and proved to be optimal with respect to the number of arms required in 1.25 seconds user-time. <p> following plan (which uses all five arms): move (2, 1, 3, arm1) over interval [1, 7] move (1, 5, 2, arm2) over interval [2, 8] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm4) over interval [4, 5] move (3, table2, 4, arm5) over interval <ref> [5, 6] </ref> This solution is found and proved to be optimal with respect to plan length in 0.78 seconds user-time.
Reference: [7] <author> E. D. Sacerdoti. </author> <title> A structure for plans and behaviour. </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: arms required, we obtain the following solution:: move (2, 1, 3, arm2) over interval [1, 9] move (1, 5, 2, arm1) over interval [2, 10] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm3) over interval [5, 6] move (3, table2, 4, arm3) over interval <ref> [7, 8] </ref> The action move (Block,Source,Destination,Arm) is read as "move Block from Source to Destination using Arm". This solution is found and proved to be optimal with respect to the number of arms required in 1.25 seconds user-time. <p> This is for the ECL i PS e implementation running on a Sparc 2. Setting the optimisation criterion to length of plan, we obtain the following plan (which uses all five arms): move (2, 1, 3, arm1) over interval <ref> [1, 7] </ref> move (1, 5, 2, arm2) over interval [2, 8] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm4) over interval [4, 5] move (3, table2, 4, arm5) over interval [5, 6] This solution is found and proved to be optimal with respect to plan
Reference: [8] <author> M. Stefik. </author> <title> Planning with constraints (MOLGEN: Part 1). </title> <journal> Artificial Intelligence, </journal> <volume> 16(2) </volume> <pages> 111-139, </pages> <year> 1981. </year>
Reference-contexts: Constraint-solving has been used to implement least-commitment on the selection of objects used in actions <ref> [8] </ref>, other aspects of resource reasoning [13], and interval durations ([10], [12], [3]). <p> arms required, we obtain the following solution:: move (2, 1, 3, arm2) over interval [1, 9] move (1, 5, 2, arm1) over interval [2, 10] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm3) over interval [5, 6] move (3, table2, 4, arm3) over interval <ref> [7, 8] </ref> The action move (Block,Source,Destination,Arm) is read as "move Block from Source to Destination using Arm". This solution is found and proved to be optimal with respect to the number of arms required in 1.25 seconds user-time. <p> This is for the ECL i PS e implementation running on a Sparc 2. Setting the optimisation criterion to length of plan, we obtain the following plan (which uses all five arms): move (2, 1, 3, arm1) over interval [1, 7] move (1, 5, 2, arm2) over interval <ref> [2, 8] </ref> move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm4) over interval [4, 5] move (3, table2, 4, arm5) over interval [5, 6] This solution is found and proved to be optimal with respect to plan length in 0.78 seconds user-time.
Reference: [9] <author> G. J. Sussman. </author> <title> A computer model of skill acquisition. </title> <type> Technical Report AI-TR-297, </type> <institution> MIT AI Laboratory Memo, </institution> <address> Cambridge, MA, </address> <year> 1973. </year>
Reference-contexts: on (2, 1), on (1, 5), on (5, table1),on (4, 3), on (3, table2) Goal state: on (1, 2), on (2, 3), on (3, 4), on (4, 5), on (5, table3) Optimising on the number of arms required, we obtain the following solution:: move (2, 1, 3, arm2) over interval <ref> [1, 9] </ref> move (1, 5, 2, arm1) over interval [2, 10] move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm3) over interval [5, 6] move (3, table2, 4, arm3) over interval [7, 8] The action move (Block,Source,Destination,Arm) is read as "move Block from Source to Destination
Reference: [10] <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proc. of IJCAI-77, </booktitle> <address> Boston, MA, </address> <year> 1977. </year>
Reference-contexts: There are many levels at which choices arise in planning and thus many levels at which the principle may be applied, the most far-reaching being least-commitment on action ordering ([7], <ref> [10] </ref>). The benefit of least-commitment is in a reduction of choice points, but this must be balanced against the cost of consistency-checking. <p> (4, 3), on (3, table2) Goal state: on (1, 2), on (2, 3), on (3, 4), on (4, 5), on (5, table3) Optimising on the number of arms required, we obtain the following solution:: move (2, 1, 3, arm2) over interval [1, 9] move (1, 5, 2, arm1) over interval <ref> [2, 10] </ref> move (5, table1, table3, arm3) over interval [3, 4] move (4, 3, 5, arm3) over interval [5, 6] move (3, table2, 4, arm3) over interval [7, 8] The action move (Block,Source,Destination,Arm) is read as "move Block from Source to Destination using Arm".
Reference: [11] <author> P. Van Hentenryck. </author> <title> Constraint satisfaction in logic programming. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: This notion allows the construction of many isomorphic solutions of identical cost to be avoided in a way that is seen in its most basic form in the graph-colouring example given in <ref> [11] </ref>. In assigning a value to a resource variable, the values considered from each equivalence class are restricted to those values already used in the plan plus only one unused value. In the resource local cost strategy, labelling is again initially on the resource variables.
Reference: [12] <author> S. A. Vere. </author> <title> Splicing plans to achieve misordered goals. </title> <booktitle> In Proc. of IJCAI-85, </booktitle> <pages> pages 1016-1021, </pages> <year> 1985. </year>
Reference-contexts: Constraint-solving has been used to implement least-commitment on the selection of objects used in actions [8], other aspects of resource reasoning [13], and interval durations ([10], <ref> [12] </ref>, [3]). Chapman's TWEAK system [2] applies constraint-solving to temporal and non-temporal aspects of planning, and Yang has described an application of finite domain constraint solving to reason about conflict resolution in planning, taking the TWEAK system as a basis [14].
Reference: [13] <author> D. E. Wilkins. </author> <title> Domain independent planning: representation and plan generation. </title> <journal> Artificial Intelligence, </journal> <volume> 22 </volume> <pages> 269-301, </pages> <year> 1984. </year>
Reference-contexts: Constraint-solving has been used to implement least-commitment on the selection of objects used in actions [8], other aspects of resource reasoning <ref> [13] </ref>, and interval durations ([10], [12], [3]). Chapman's TWEAK system [2] applies constraint-solving to temporal and non-temporal aspects of planning, and Yang has described an application of finite domain constraint solving to reason about conflict resolution in planning, taking the TWEAK system as a basis [14].
Reference: [14] <author> Q. Yang. </author> <title> A theory of conflict resolution in planning. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 361-392, </pages> <year> 1992. </year> <month> 9 </month>
Reference-contexts: Chapman's TWEAK system [2] applies constraint-solving to temporal and non-temporal aspects of planning, and Yang has described an application of finite domain constraint solving to reason about conflict resolution in planning, taking the TWEAK system as a basis <ref> [14] </ref>. A planning system that uses temporal constraint propagation in a sophisticated and flexible way was introduced by Allen and Koomen in [1], but the overhead imposed by the temporal reasoner proved to be a bottleneck [5].
References-found: 14

