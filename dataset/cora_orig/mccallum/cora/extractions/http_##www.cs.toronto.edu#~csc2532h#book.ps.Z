URL: http://www.cs.toronto.edu/~csc2532h/book.ps.Z
Refering-URL: http://www.cs.toronto.edu/~csc2532h/
Root-URL: http://www.cs.toronto.edu
Title: KNOWLEDGE IN ACTION: Logical Foundations for Describing and Implementing Dynamical Systems  
Author: Raymond Reiter 
Degree: c fl1996. All rights reserved.  
Date: January 5, 1999  
Note: Version of  
Address: Toronto  
Affiliation: Department of Computer Science University of  
Abstract: Being a draft of the first nine chapters of a book on the situation calculus and its relevance to artificial intelligence, cognitive robotics, databases, programming languages, simulation, and control theory. Permission is granted to download copies for personal, non-commercial use. Oversights, corrections and advice will be gratefully (and gracefully) received. Parts of this material, especially in Chapters 4, 5, 7 and 9, are as yet unpublished research results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul. </author> <title> Updates, a new frontier. </title> <booktitle> In Second International Conference on Database Theory, </booktitle> <pages> pages 1-18. </pages> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: For more information on relational databases, see Maier [62], and for a relational database perspective on update transactions, see Abiteboul <ref> [1] </ref>. Our perspective on databases, in which the initial database is any first order theory, not necessarily relational, is closest to that held by the deductive database community; see, for example, Minker [71].
Reference: [2] <author> J.F. Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23(2) </volume> <pages> 123-154, </pages> <year> 1984. </year>
Reference-contexts: and Sergot [48], Sandewall's features and fluents [92, 93] and its related temporal action logics developed by Doherty, Gustaffson, Karlsson and Kvarnstrom [22], the family of A languges of Gelfond and Lifschitz [30], the fluent calculus of Holldobler and Schneeberger [42] (see also Thielscher [106]), and temporal logics by Allen <ref> [2] </ref> and McDermott [68]. <p> this simulation, illustrate Zeno's paradox, by choosing suitable initial heights, velocities and rebound coefficients for the two balls. (c) Finally, modify your simulation to provide a graphical plot of the falling balls. 201 7.11 Notes An early, and very influential account of time and actions was due to James Allen <ref> [2] </ref>. The door latch problem of Section 7.2.1 is taken from one of his papers [3]; the other papers in the collection containing the latter give an excellent overview of the recent status of Allen's theory.
Reference: [3] <author> J.F. Allen. </author> <title> Temporal reasoning and planning. </title> <editor> In J.F. Allen, H.A. Kautz, R.N. Pelavin, and J.D. Tenenberg, editors, </editor> <booktitle> Reasoning about Plans, </booktitle> <pages> pages 1-68. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: The door latch problem of Section 7.2.1 is taken from one of his papers <ref> [3] </ref>; the other papers in the collection containing the latter give an excellent overview of the recent status of Allen's theory. Another early, and quite sophisticated, fully axiomatic account of time and actions was due to McDermott [68]. <p> More recent treatments for concurrency in the situation calculus, again, ignoring time, are by Schu-bert [94] and Lin and Shoham [60]. Pelavin [76] addresses the formalization of concurrent actions by extending the ontology of Allen's linear time logic <ref> [3] </ref> to include histories to represent branching futures, and suitable modal operators semantically characterized with respect to these histories. This gives a rich representation for time and concurrency, somewhat like that of the situation calculus, but at the expense of a rather complicated logic. Shanahan.
Reference: [4] <author> F. Bacchus, J.Y. Halpern, and H.J. Levesque. </author> <title> Reasoning about noisy sensors in the situation calculus. </title> <booktitle> In Proc. IJCAI'95, </booktitle> <pages> pages 1933-1940, </pages> <year> 1995. </year>
Reference-contexts: In process control and robotics applications it is necessary to take seriously the possibility of control error and sensor noise. For a situation calculus approach to these issues, see (Bacchus, Halpern and Levesque <ref> [4] </ref>). For some possible approaches to the problem of what it might mean to execute a GOLOG program containing sensing actions, see [52, 55]. Dixon's Amala [21] is a programming language in a conventional im 161 perative style.
Reference: [5] <author> F. Bacchus and F. Kabanza. </author> <title> Using temporal logic to control search in a forward chaining planner. </title> <booktitle> In Proceedings of the Third European Workshop on Planning, </booktitle> <year> 1995. </year>
Reference-contexts: Actually, to fake assignments to arrays as well as scalars, you will probably want something like assign (value; identif ier; args), so that assign (3; X; [ ]) assigns 3 to the scalar identifier X , and assign (3; A; <ref> [5; 6] </ref>) assigns 3 to the [5,6]-th element of the (binary) array A. <p> In 274 1981, Kibler and Morris [46] noticed how useful this procedure can be for the blocks world, and implemented a successful planning system based on it. For mysterious reasons, their paper had no impact, and remained lost in time. In the early 1990's, Bacchus and Kabanza <ref> [5, 6] </ref> independently rediscovered this idea, and recognized its wider applicability than just the blocks world. Unlike ours, their implementation uses a linear temporal logic coupled with a STRIPS representation for actions and a STRIPS database.
Reference: [6] <author> F. Bacchus and F. Kabanza. </author> <title> Planning for temporally extended goals. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI'96), </booktitle> <pages> pages 1215-1222, </pages> <year> 1996. </year>
Reference-contexts: Actually, to fake assignments to arrays as well as scalars, you will probably want something like assign (value; identif ier; args), so that assign (3; X; [ ]) assigns 3 to the scalar identifier X , and assign (3; A; <ref> [5; 6] </ref>) assigns 3 to the [5,6]-th element of the (binary) array A. <p> In 274 1981, Kibler and Morris [46] noticed how useful this procedure can be for the blocks world, and implemented a successful planning system based on it. For mysterious reasons, their paper had no impact, and remained lost in time. In the early 1990's, Bacchus and Kabanza <ref> [5, 6] </ref> independently rediscovered this idea, and recognized its wider applicability than just the blocks world. Unlike ours, their implementation uses a linear temporal logic coupled with a STRIPS representation for actions and a STRIPS database.
Reference: [7] <author> C. Baral and M. Gelfond. </author> <title> Reasoning about effects of concurrent actions. </title> <journal> Journal of Logic Programming, </journal> <note> 1996. to appear. </note>
Reference-contexts: Perhaps the earliest treatment, in the situation calculus, of concurrency and actions with durations was by Gelfond, Lifschitz, and Rabinov [31]. By basing it on the language A of Gelfond and Lifschitz [29], Baral and Gelfond <ref> [7] </ref> provide a semantic account of concurrency that, although not formulated in the situation calculus, has many similarities with ours. The principal difference is that Baral and Gelfond focus exclusively on concurrency, so their ontology does not include time or natural actions.
Reference: [8] <author> K. Van Bellegham, M. Denecker, and D. De Schreye. </author> <title> Representing continuous change in the abductive event calculus. </title> <editor> In P. Van Hentenrijck, editor, </editor> <booktitle> Proc. 1994 Int. Conf. on Logic Programming, </booktitle> <pages> pages 225-240, </pages> <year> 1994. </year>
Reference-contexts: There are several other approaches to modeling natural actions, mostly based upon linear temporal logics. Examples are the work by Miller and Shanahan [95, 69, 70], and 202 Van Bellegham, Denecker and De Schreye <ref> [8] </ref>, both using extended versions of the event calculus of Kowalski and Sergot [48]. Closely related ideas about representing physical processes were proposed earlier by Sandewall [91]. See also Herrmann and Thielscher [41]. Section 7.9.9 indicated how GOLOG might be used for computer graphics applications.
Reference: [9] <author> L. Bertossi, M. Arenas, and C. Ferretti. SCDBR: </author> <title> An automated reasoner for specifications of database updates. </title> <journal> Journal of Intelligent Information Systems, </journal> <note> 1997. To appear. </note>
Reference-contexts: The situation calculus-based approach to formalizing databases evolving under update transactions was described by Reiter in [84]. This approach to database updates is extended by Bertossi, Arenas and Ferretti <ref> [9] </ref>, who also provide an implementation that interfaces to a relational database system, and to automated theorem provers for proving properties of the situation calculus database description. For more information on relational databases, see Maier [62], and for a relational database perspective on update transactions, see Abiteboul [1].
Reference: [10] <author> W.W. Bledsoe and P. Bruell. </author> <title> A man-machine theorem-proving system. </title> <journal> Artificial Intelligence, </journal> <volume> 5(1) </volume> <pages> 51-72, </pages> <year> 1974. </year>
Reference: [11] <author> A. Blum and M. Furst. </author> <title> Fast planning through planning graph analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 90(1-2):281-300, </volume> <year> 1997. </year> <month> 293 </month>
Reference-contexts: Most partial order planners in the literature are based on STRIPS-like representations for actions, and use regression in their search for plans (e.g. Chapman's TWEAK [16], Soderland and Weld's SNLP [101] based on McAllester and Rosenblitt [64], and Blum and Furst's Graphplan <ref> [11] </ref>). There has been very little work on open world planning. Most of what there is focuses on a very interesting, but different approach than ours, namely on how to devise plans that, during their execution, use sensing to obtain information unavailable during the planning phase.
Reference: [12] <author> A. Bonner and M. Kifer. </author> <title> Transaction logic programming. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1992. </year>
Reference-contexts: A number of other groups are also developing formalisms for the specification of artificial agents. See [111] for a detailed survey of this research. Transaction logic (Bonner and Kifer <ref> [12] </ref>) was designed to define complex database transactions, and like GOLOG provides a rich repertoire of operators for defining new transactions in terms of old. These include sequence, nondeterministic choice, conditionals and iteration. The Bonner-Kifer approach focuses on the definition of complex transactions in terms of elementary updates.
Reference: [13] <author> F. M. Brown, </author> <title> editor. </title> <booktitle> The frame problem in artificial intelligence. Proceedings of the 1987 workshop. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, Los Altos, California, </address> <year> 1987. </year>
Reference-contexts: The basic conceptual and formal ingredients of the situation calculus are due to John McCarthy [65] in 1963. The frame problem was first observed by McCarthy and Hayes [67]; since then, it has been the subject of a large body of technical research (e.g. <ref> [13] </ref>), as well as philosophical speculation [80]. Two excellent recent books on theories of actions, with specific focus on solutions to the frame and related problems are by Sandewall [92] and by Shanahan [96].
Reference: [14] <author> M. </author> <title> Cadoli and F.M. Donini. A survey on knowledge compilation. </title> <type> Technical report, </type> <institution> Dipartimento di Informatica e Sistemistica, Universita di Roma "La Sapienza", </institution> <year> 1997. </year>
Reference-contexts: Cadoli and Donini <ref> [14] </ref> give a survey of knowledge base compilation techniques. The most important foundational paper on planning is by Green [36]; it provides the theoretical underpinning for all of the results of this chapter. The NP-hardness of optimal blocks world planning was established by Gupta and Nau [37].
Reference: [15] <author> J.G. Carbonell, J. Blythe, O. Etzioni, Y. Gill, R. Joseph, D. Khan, C. Knoblock, S. Minton, A. Perez, S. Reilly, M. Veloso, and X. Wang. </author> <title> Prodigy 4.0: The manual and tutorial. </title> <type> Technical report, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1992. </year>
Reference-contexts: So this approach seems to be a viable in many cases preferable alternative to more "classical" approaches, that have been based on working backwards, via regression, from the goal statement to the initial situation (e.g. PRODIGY <ref> [15] </ref>, SNLP [64, 101]). Srivastava and Kambhampati [102] have also explored the advantages of domain specific control information for planners, and have confirmed the observations of Bacchus and Kabanza that such planners can significantly outperform more traditional systems.
Reference: [16] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: However, not every partial order plan can be represented in the concurrent situation calculus; Russell and Norvig [90] Figure 11.5 provides an example. Most partial order planners in the literature are based on STRIPS-like representations for actions, and use regression in their search for plans (e.g. Chapman's TWEAK <ref> [16] </ref>, Soderland and Weld's SNLP [101] based on McAllester and Rosenblitt [64], and Blum and Furst's Graphplan [11]). There has been very little work on open world planning.
Reference: [17] <author> K.L. Clark. </author> <title> Negation as failure. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 292-322. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: Chacun a son go^ut. The Lloyd-Topor transformations are taken from Lloyd's book [61] where Clark's theorem in its original and generalized forms are proved. Clark's results were first reported in <ref> [17] </ref>. Eclipse Prolog is the logic programming language that will be used throughout this book. Very little of our code will be so fancy as to be incompatible with other commonly used Prolog systems like CProlog or Quintus.
Reference: [18] <author> E. Davis. </author> <title> Representations of Commonsense Knowledge. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1990. </year>
Reference-contexts: The solution to the frame problem of Section 3.2 was described in Reiter [82]; it combines elements of earlier proposals by Pednault [74], Davis <ref> [18] </ref>, and by Haas [38], as elaborated by Schubert [94]. Independently, Elkan [23] proposed a similar solution. <p> Another early, and quite sophisticated, fully axiomatic account of time and actions was due to McDermott [68]. Here, McDermott addresses the frame problem, continuous time and change, and branching futures quite similar to those of the situation calculus. Chapter 5 of Davis's book <ref> [18] </ref> describes many of the details of this approach. Perhaps the earliest treatment, in the situation calculus, of concurrency and actions with durations was by Gelfond, Lifschitz, and Rabinov [31].
Reference: [19] <author> E. Davis. </author> <title> Infinite loops in finite time: some observations. </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning (KR'92), </booktitle> <pages> pages 47-58. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1992. </year>
Reference-contexts: The precondition interaction problem for concurrent actions is discussed by Pelavin [76] and by Pinto [78]. For an extensive discussion of Zeno's paradox, see Davis <ref> [19] </ref>. The material on sequential, temporal GOLOG, and the coffee delivery program is taken from Reiter [86], and that on concurrency and natural actions from Reiter [85], which in turn relies heavily on earlier work by Pinto [78].
Reference: [20] <author> J. de Kleer. </author> <title> An improved incremental algorithm for generating prime implicates. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI'92), </booktitle> <pages> pages 780-785, </pages> <year> 1992. </year>
Reference-contexts: Tison [108]). The importance of prime implicates for artificial intelligence was first pointed out by Reiter and de Kleer [87], and since that time, there has been considerable work done on better computational methods than simple-minded resolution (e.g. de Kleer <ref> [20] </ref>, Jackson and Pais [43], Palopoli, Pirri and Pizzuti [73]). Cadoli and Donini [14] give a survey of knowledge base compilation techniques. The most important foundational paper on planning is by Green [36]; it provides the theoretical underpinning for all of the results of this chapter.
Reference: [21] <author> M. Dixon. </author> <title> Embedded Computation and the Semantics of Programs. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, Stanford, </institution> <address> CA, </address> <year> 1991. </year> <note> Also appeared as Xerox PARC Technical Report SSL-91-1. </note>
Reference-contexts: For a situation calculus approach to these issues, see (Bacchus, Halpern and Levesque [4]). For some possible approaches to the problem of what it might mean to execute a GOLOG program containing sensing actions, see [52, 55]. Dixon's Amala <ref> [21] </ref> is a programming language in a conventional im 161 perative style. It is designed after the observation that the semantics of embedded programs should reflect the assumptions about the environment as directly as possible.
Reference: [22] <author> P. Doherty, J. Gustaffson, L. Karlsson, and J. Kvarnstrom. TAL: </author> <title> Temporal action logics language specification and tutorial. </title> <booktitle> Linkoping Electronic Articles in Computer and Information Science, </booktitle> <volume> 3(15), </volume> <year> 1998. </year> <note> http//www.ep.liu.se/ea/cis/1998/01fl/. </note>
Reference-contexts: Others include the event calculus, first formulated by Kowalski and Sergot [48], Sandewall's features and fluents [92, 93] and its related temporal action logics developed by Doherty, Gustaffson, Karlsson and Kvarnstrom <ref> [22] </ref>, the family of A languges of Gelfond and Lifschitz [30], the fluent calculus of Holldobler and Schneeberger [42] (see also Thielscher [106]), and temporal logics by Allen [2] and McDermott [68].
Reference: [23] <author> C. Elkan. </author> <title> Reasoning about action in first-order logic maintenance systems. </title> <booktitle> In Proc. of the Ninth Biennial Conf. of the Canadian Society for Computational Studies of Intelligence, </booktitle> <year> 1992. </year>
Reference-contexts: The solution to the frame problem of Section 3.2 was described in Reiter [82]; it combines elements of earlier proposals by Pednault [74], Davis [18], and by Haas [38], as elaborated by Schubert [94]. Independently, Elkan <ref> [23] </ref> proposed a similar solution. The significance of the consistency condition (3.11) in deriving successor state axioms (Result 3.2.1) was first noted by Pednault [74], and generalized slightly by Reiter [82] to fit his solution to the frame problem.
Reference: [24] <author> H.B. Enderton. </author> <title> A Mathematical Introduction to Logic. </title> <publisher> Academic Press, </publisher> <year> 1972. </year> <month> 294 </month>
Reference: [25] <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An approach to planning with incomplete information. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning (KR'92), </booktitle> <pages> pages 115-125, </pages> <address> Cambridge, Mass, </address> <year> 1992. </year>
Reference-contexts: Typically, such plans involve conditionals coupled with sensing actions, for example: senseT raff icLight; if red then stop else go: 275 Etzioni et al <ref> [25] </ref> give a procedural approach to planning with sensing actions for a STRIPS-like representation. Levesque [56] provides an elegant logical specification for such conditional plans based on the situation calculus. In Chapter 12 we shall deal with the approach to sensing actions that underlies Levesque's account of planning.
Reference: [26] <author> R.E. Fikes and N.J. Nilsson. </author> <title> STRIPS: a new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> 2(3/4):189-208, 1971. 
Reference-contexts: One consequence of this is that programs in GOLOG can be executed by a theorem prover, but not those in Amala. Like the classical AI planning work (Section 3.3) of Green [36] and Fikes and Nilsson <ref> [26] </ref>), GOLOG requires primitives and their effects to be formally specified. The major difference is that GOLOG focuses on high-level programming rather than plan synthesis at run-time. But sketchy plans are allowed; nondeterminism can be used to infer the missing details.
Reference: [27] <author> R.E. Fikes and N.J. Nilsson. </author> <title> STRIPS, a retrospective. </title> <journal> Artificial Intelligence, </journal> 59(1/2):227-232, 1993. 
Reference-contexts: This was in the late 1960's and early 1970's, before very much was known about the frame problem or theorem proving, and this first attempt at a situation calculus-based approach to high level robotics was abandoned in the face of the extreme computational inefficiencies that were encountered (Fikes and Nilsson <ref> [27] </ref>). The solution to the frame problem of Section 3.2 was described in Reiter [82]; it combines elements of earlier proposals by Pednault [74], Davis [18], and by Haas [38], as elaborated by Schubert [94]. Independently, Elkan [23] proposed a similar solution.
Reference: [28] <author> J. Funge. </author> <title> Making Them Behave: Cognitive Models for Computer Animation. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1998. </year>
Reference-contexts: Closely related ideas about representing physical processes were proposed earlier by Sandewall [91]. See also Herrmann and Thielscher [41]. Section 7.9.9 indicated how GOLOG might be used for computer graphics applications. For a much more interesting exploration of this idea in a computer animation setting, see Funge <ref> [28] </ref>. An execution monitor for an agent executing a GOLOG program on-line is described in (De Giacomo, Reiter and Soutchanski [34]). 203 Chapter 8 Reactive GOLOG Very few interesting dynamical systems exist in isolation from an external world. This world is itself a dynamical system, and both systems interact.
Reference: [29] <author> M. Gelfond and V. Lifschitz. </author> <title> Representing actions in extended logic programs. </title> <booktitle> In Proc. Joint Int. Conf. and Symp. on Logic Programming, </booktitle> <pages> pages 559-573, </pages> <year> 1992. </year>
Reference-contexts: Chapter 5 of Davis's book [18] describes many of the details of this approach. Perhaps the earliest treatment, in the situation calculus, of concurrency and actions with durations was by Gelfond, Lifschitz, and Rabinov [31]. By basing it on the language A of Gelfond and Lifschitz <ref> [29] </ref>, Baral and Gelfond [7] provide a semantic account of concurrency that, although not formulated in the situation calculus, has many similarities with ours. The principal difference is that Baral and Gelfond focus exclusively on concurrency, so their ontology does not include time or natural actions.
Reference: [30] <author> M. Gelfond and V. Lifschitz. </author> <title> Representing action and change by logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 17 </volume> <pages> 301-322, </pages> <year> 1993. </year>
Reference-contexts: Others include the event calculus, first formulated by Kowalski and Sergot [48], Sandewall's features and fluents [92, 93] and its related temporal action logics developed by Doherty, Gustaffson, Karlsson and Kvarnstrom [22], the family of A languges of Gelfond and Lifschitz <ref> [30] </ref>, the fluent calculus of Holldobler and Schneeberger [42] (see also Thielscher [106]), and temporal logics by Allen [2] and McDermott [68].
Reference: [31] <author> M. Gelfond, V. Lifschitz, and A. Rabinov. </author> <title> What are the limitations of the situation calculus? In Working Notes, </title> <booktitle> AAAI Spring Symposium Series on the Logical Formalization of Commonsense Reasoning, </booktitle> <pages> pages 59-69, </pages> <year> 1991. </year>
Reference-contexts: Chapter 5 of Davis's book [18] describes many of the details of this approach. Perhaps the earliest treatment, in the situation calculus, of concurrency and actions with durations was by Gelfond, Lifschitz, and Rabinov <ref> [31] </ref>. By basing it on the language A of Gelfond and Lifschitz [29], Baral and Gelfond [7] provide a semantic account of concurrency that, although not formulated in the situation calculus, has many similarities with ours.
Reference: [32] <author> G. De Giacomo, L. Iocchi, D. Nardi, and R. Rosati. </author> <title> Planning with sensing for a mobile robot. </title> <booktitle> In Preprints of the Fourth European Conf. on Planning, </booktitle> <pages> pages 158-170, </pages> <address> Toulouse, France, </address> <year> 1997. </year>
Reference-contexts: Levesque [56] provides an elegant logical specification for such conditional plans based on the situation calculus. In Chapter 12 we shall deal with the approach to sensing actions that underlies Levesque's account of planning. A quite different logical specification for planning with sense actions is (De Giacomo et al <ref> [32] </ref>). The first uses for prime implicates in computer science were in the synthesis of digital circuits, and there is an early literature on how to compute them (e.g. Tison [108]).
Reference: [33] <author> G. De Giacomo, Y. Lesperance, and H.J. Levesque. </author> <title> Reasoning about concurrent execution, prioritized interrupts, </title> <booktitle> and exogenous actions in the situation calculus. In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1221-1226, </pages> <address> Nagoya, Japan, </address> <year> 1997. </year>
Reference-contexts: In this case, a number of software agents written in GOLOG handle various parts of the banking process (responding to buttons on an ATM terminal, managing the accounts at a bank, monitoring account levels for a user, etc). CONGOLOG (De Giacomo, Lesperance and Levesque <ref> [33] </ref>), a version of the language supporting concurrency (including interrupts, priorities, and support for exogenous actions) has also being implemented, and experiments with various applications have been performed, e.g. multi-elevator co-ordination, meeting scheduling (Lesperance et al [97]). <p> CONGOLOG is a very sophisticated concurrent version of GOLOG that adopts a different interleaving control structure than RGOLOG. It has been defined and implemented at the University of Toronto (De Giacomo, Lesperance and Levesque <ref> [33] </ref>), and used in a number of applications (multi-agent systems [97]), robotics [54, 104] business process modeling [50]). The reactive elevator of this chapter is an adaptation of the example used in [33]. 224 Chapter 9 Planning The situation calculus has occasionally served as a theoretical device for the study of <p> It has been defined and implemented at the University of Toronto (De Giacomo, Lesperance and Levesque <ref> [33] </ref>), and used in a number of applications (multi-agent systems [97]), robotics [54, 104] business process modeling [50]). The reactive elevator of this chapter is an adaptation of the example used in [33]. 224 Chapter 9 Planning The situation calculus has occasionally served as a theoretical device for the study of planning in AI, but except for a brief period in the early 1970's in connection with the SRI Shakey robot, it has never been taken seriously in the implementation of planning systems.
Reference: [34] <author> G. De Giacomo, R. Reiter, and M. Soutchanski. </author> <title> Execution monitoring of high-level robot programs. In A.G. </title> <editor> Cohn and L.K. Schubert, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Sixth International Conference (KR'98). </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Fran-cisco, CA, </address> <year> 1998. </year>
Reference-contexts: Section 7.9.9 indicated how GOLOG might be used for computer graphics applications. For a much more interesting exploration of this idea in a computer animation setting, see Funge [28]. An execution monitor for an agent executing a GOLOG program on-line is described in (De Giacomo, Reiter and Soutchanski <ref> [34] </ref>). 203 Chapter 8 Reactive GOLOG Very few interesting dynamical systems exist in isolation from an external world. This world is itself a dynamical system, and both systems interact.
Reference: [35] <author> R. Goldblatt. </author> <title> Logics of Time and Computation. CSLI Lecture Notes No. 7. Center for the Study of Language and Information, </title> <address> Stanford Univers ity, Stanford, CA, 2nd edition, </address> <year> 1987. </year>
Reference-contexts: The theorem proving approach to program synthesis is most clearly described in (Manna and Waldinger [63]). Except for procedures, the macro approach to defining the semantics of GOLOG draws considerably from dynamic logic <ref> [35] </ref>. In effect, it reifies as situations in the object language of the situation calculus, the possible worlds with which the semantics of dynamic logic is defined. The macro definition for GOLOG procedures corresponds to the more usual Scott-Strachey least fixed-point definition in standard programming language semantics (Stoy [103]).
Reference: [36] <author> C.C. Green. </author> <title> Theorem proving by resolution as a basis for question-answering systems. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <pages> pages 183-205. </pages> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1969. </year> <month> 295 </month>
Reference-contexts: The first uses of the situation calculus were in planning, following the influential proposal of Green <ref> [36] </ref>. Indeed, Shakey, the very first autonomous robot project, was based on Green's account of planning, using resolution theorem proving with a situation calculus axiomatization of the robot's actions and environment. <p> However, while GOLOG requires that these primitives be formally specified within the language, Amala does not. One consequence of this is that programs in GOLOG can be executed by a theorem prover, but not those in Amala. Like the classical AI planning work (Section 3.3) of Green <ref> [36] </ref> and Fikes and Nilsson [26]), GOLOG requires primitives and their effects to be formally specified. The major difference is that GOLOG focuses on high-level programming rather than plan synthesis at run-time. But sketchy plans are allowed; nondeterminism can be used to infer the missing details. <p> Cadoli and Donini [14] give a survey of knowledge base compilation techniques. The most important foundational paper on planning is by Green <ref> [36] </ref>; it provides the theoretical underpinning for all of the results of this chapter. The NP-hardness of optimal blocks world planning was established by Gupta and Nau [37].
Reference: [37] <author> N. Gupta and D.S. Nau. </author> <title> On the complexity of blocks-world planning. </title> <journal> Arti--ficial Intelligence, </journal> <volume> 56 </volume> <pages> 223-254, </pages> <year> 1992. </year>
Reference-contexts: Cadoli and Donini [14] give a survey of knowledge base compilation techniques. The most important foundational paper on planning is by Green [36]; it provides the theoretical underpinning for all of the results of this chapter. The NP-hardness of optimal blocks world planning was established by Gupta and Nau <ref> [37] </ref>.
Reference: [38] <author> A. R. Haas. </author> <title> The case for domain-specific frame axioms. </title> <editor> In F. M. Brown, editor, </editor> <booktitle> The frame problem in artificial intelligence. Proceedings of the 1987 workshop, </booktitle> <pages> pages 343-348, </pages> <address> Los Altos, California, 1987. </address> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA. </address>
Reference-contexts: The solution to the frame problem of Section 3.2 was described in Reiter [82]; it combines elements of earlier proposals by Pednault [74], Davis [18], and by Haas <ref> [38] </ref>, as elaborated by Schubert [94]. Independently, Elkan [23] proposed a similar solution. The significance of the consistency condition (3.11) in deriving successor state axioms (Result 3.2.1) was first noted by Pednault [74], and generalized slightly by Reiter [82] to fit his solution to the frame problem.
Reference: [39] <author> S. Hanks and D. McDermott. </author> <title> Default reasoning, nonmonotonic logics, and the frame problem. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI'86), </booktitle> <pages> pages 328-333, </pages> <year> 1986. </year>
Reference-contexts: The Yale Shooting Problem was proposed by Hanks and McDermott in 1986 <ref> [39] </ref>, not because it is very difficult it is trivial under our approach to the frame problem but because they wanted to point out that all the formal approaches to solving the frame problem at that time got it wrong.
Reference: [40] <author> E.C.R. Hehner. </author> <title> A Practical Theory of Programming. </title> <publisher> Springer, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: Moreover, they sketch a method for proving properties of strategies. While McCarthy and Hayes provide no formal development of their proposal, it nevertheless anticipates much of the spirit and technical content of our GOLOG project. References for program verification: Hehner <ref> [40] </ref>, Hoare logics. 163 Chapter 7 Time and Concurrency So far, we have ignored three fundamental properties of real actions they occur in time, they normally have durations, and frequently they occur together, i.e. concurrently.
Reference: [41] <author> C.S. Herrmann and M. Thielscher. </author> <title> Reasoning about continuous processes. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI'96), </booktitle> <pages> pages 639-644. </pages> <publisher> AAAI Press/MIT Press, </publisher> <address> Menlo Park, </address> <year> 1996. </year>
Reference-contexts: Closely related ideas about representing physical processes were proposed earlier by Sandewall [91]. See also Herrmann and Thielscher <ref> [41] </ref>. Section 7.9.9 indicated how GOLOG might be used for computer graphics applications. For a much more interesting exploration of this idea in a computer animation setting, see Funge [28].
Reference: [42] <author> S. Holldobler and J. Schneeberger. </author> <title> A new deductive approach to planning. </title> <journal> New Generation Computing, </journal> <volume> 8 </volume> <pages> 225-244, </pages> <year> 1990. </year>
Reference-contexts: Others include the event calculus, first formulated by Kowalski and Sergot [48], Sandewall's features and fluents [92, 93] and its related temporal action logics developed by Doherty, Gustaffson, Karlsson and Kvarnstrom [22], the family of A languges of Gelfond and Lifschitz [30], the fluent calculus of Holldobler and Schneeberger <ref> [42] </ref> (see also Thielscher [106]), and temporal logics by Allen [2] and McDermott [68].
Reference: [43] <author> P. Jackson and J. Pais. </author> <title> Computing prime implicants. </title> <booktitle> In Proc. of CADE-90, </booktitle> <pages> pages 543-557, </pages> <year> 1990. </year>
Reference-contexts: Tison [108]). The importance of prime implicates for artificial intelligence was first pointed out by Reiter and de Kleer [87], and since that time, there has been considerable work done on better computational methods than simple-minded resolution (e.g. de Kleer [20], Jackson and Pais <ref> [43] </ref>, Palopoli, Pirri and Pizzuti [73]). Cadoli and Donini [14] give a survey of knowledge base compilation techniques. The most important foundational paper on planning is by Green [36]; it provides the theoretical underpinning for all of the results of this chapter.
Reference: [44] <author> M. Jenkin, Y. Lesperance, H.J. Levesque, F. Lin, J. Lloyd, D. Marcu, R. Re-iter, R.B. Scherl, and K. Tam. </author> <title> A logical approach to portable high-level robot programming. </title> <booktitle> In Proceedings of the Tenth Australian Joint Conference on Artificial Intelligence (AI'97), </booktitle> <address> Perth, Australia, </address> <year> 1997. </year> <type> Invited paper. </type>
Reference: [45] <author> T.G. Kelley. </author> <title> Modeling complex systems in the situation calculus: A case study using the Dagstuhl steam boiler problem. In L.C. </title> <editor> Aiello, J. Doyle, and S.C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR'96), </booktitle> <pages> pages 26-37. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: For the use of time in the situation calculus for the simulation of physical and mechanical systems, see Kelley <ref> [45] </ref>. There are several other approaches to modeling natural actions, mostly based upon linear temporal logics. Examples are the work by Miller and Shanahan [95, 69, 70], and 202 Van Bellegham, Denecker and De Schreye [8], both using extended versions of the event calculus of Kowalski and Sergot [48].
Reference: [46] <author> D. Kibler and P. Morris. </author> <title> Don't be stupid. </title> <booktitle> In Proceedings of the Seventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 345-347, </pages> <year> 1981. </year>
Reference-contexts: This is not a new idea. In 274 1981, Kibler and Morris <ref> [46] </ref> noticed how useful this procedure can be for the blocks world, and implemented a successful planning system based on it. For mysterious reasons, their paper had no impact, and remained lost in time.
Reference: [47] <author> R. Kowalski and F Sadri. </author> <title> The situation calculus and event calculus compared. </title> <type> Technical report, </type> <institution> Department of Computing, Imperial College, </institution> <address> London, Eng-land, </address> <year> 1994. </year>
Reference-contexts: This is an embarrassing richness of proposals; a few attempts have been made to compare some of them with the situation calculus (Kowalski and Sadri <ref> [47] </ref>, van Belleghem, Denecker and de Schreye [109], Thielscher [107]). 54 Chapter 4 Foundations of the Situation Calculus In the previous chapter, we provided an intuitive introduction to the situation calculus, and an indication of some of the things it is good for.
Reference: [48] <author> R.A. Kowalski and M.J. Sergot. </author> <title> A logic-based calculus of events. New Generation Computing, </title> <address> 4:267, </address> <year> 1986. </year>
Reference-contexts: While the situation calculus was perhaps the first logical proposal within artificial intelligence for representing system dynamics, it has not remained the only such approach. Others include the event calculus, first formulated by Kowalski and Sergot <ref> [48] </ref>, Sandewall's features and fluents [92, 93] and its related temporal action logics developed by Doherty, Gustaffson, Karlsson and Kvarnstrom [22], the family of A languges of Gelfond and Lifschitz [30], the fluent calculus of Holldobler and Schneeberger [42] (see also Thielscher [106]), and temporal logics by Allen [2] and McDermott <p> There are several other approaches to modeling natural actions, mostly based upon linear temporal logics. Examples are the work by Miller and Shanahan [95, 69, 70], and 202 Van Bellegham, Denecker and De Schreye [8], both using extended versions of the event calculus of Kowalski and Sergot <ref> [48] </ref>. Closely related ideas about representing physical processes were proposed earlier by Sandewall [91]. See also Herrmann and Thielscher [41]. Section 7.9.9 indicated how GOLOG might be used for computer graphics applications. For a much more interesting exploration of this idea in a computer animation setting, see Funge [28].
Reference: [49] <author> D. Leivant. </author> <title> Higher order logic. In D.M. </title> <editor> Gabbay, C.J. Hogger, and J.A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <pages> pages 229-321. </pages> <publisher> Clarendon Press, Oxford, </publisher> <year> 1994. </year> <month> 296 </month>
Reference: [50] <author> Y. Lesperance, T.G. Kelley, J. Mylopoulos, and E.S.K. Yu. </author> <title> Modeling dynamic domains with ConGolog. </title> <note> Submitted, </note> <year> 1998. </year>
Reference-contexts: It has been defined and implemented at the University of Toronto (De Giacomo, Lesperance and Levesque [33]), and used in a number of applications (multi-agent systems [97]), robotics [54, 104] business process modeling <ref> [50] </ref>).
Reference: [51] <author> Y. Lesperance, H.J. Levesque, F. Lin, D. Marcu, R. Reiter, and R. Scherl. </author> <title> A logical approach to high-level robot programming a progress report. In Control of the Physical World by Intelligent Systems, </title> <booktitle> Working Notes of the 1994 AAAI Fall Symp., </booktitle> <year> 1994. </year>
Reference-contexts: The GOLOG interpreter and the entire GOLOG framework has been the subject of experimentation with various types of applications at the University of Toronto. The most advanced involves a robotics application mail delivery in an office environment <ref> [51] </ref>. The high-level controller of the robot programmed in GOLOG is interfaced to an existing robotics package that supports path planning and local navigation. The system is currently used to control two different autonomous robots: an RWI B21 and a Nomad200 ([44]).
Reference: [52] <author> Y. Lesperance, H.J. Levesque, F. Lin, and R.B. Scherl. </author> <title> Ability and knowing how in the situation calculus. </title> <note> In preparation, </note> <year> 1995. </year>
Reference-contexts: For a situation calculus approach to these issues, see (Bacchus, Halpern and Levesque [4]). For some possible approaches to the problem of what it might mean to execute a GOLOG program containing sensing actions, see <ref> [52, 55] </ref>. Dixon's Amala [21] is a programming language in a conventional im 161 perative style. It is designed after the observation that the semantics of embedded programs should reflect the assumptions about the environment as directly as possible.
Reference: [53] <author> Y. Lesperance, H.J. Levesque, and S. Ruman. </author> <title> An experiment using Golog to build a personal banking assistant. </title> <editor> In L. Cavedon, A. Rao, and W. Wobke, editors, </editor> <booktitle> Intelligent Agent Systems: Theoretical and Practical Issues. Lecture Notes in Computer Science, </booktitle> <volume> Volume 1209. </volume> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The system is currently used to control two different autonomous robots: an RWI B21 and a Nomad200 ([44]). Another application involves tools for home banking (Shane [89], Lesperance et al <ref> [53] </ref>). In this case, a number of software agents written in GOLOG handle various parts of the banking process (responding to buttons on an ATM terminal, managing the accounts at a bank, monitoring account levels for a user, etc).
Reference: [54] <author> Y. Lesperance, K. Tam, and M. Jenkin. </author> <title> Reactivity in a logic-based robot programming framework. </title> <booktitle> In Cognitive Robotics | Papers from the 1998 AAAI Fall Symposium, </booktitle> <pages> pages 98-105, </pages> <address> Orlando, FL, </address> <month> October </month> <year> 1998. </year> <note> Technical Report FS-98-02, AAAI Press. </note>
Reference-contexts: CONGOLOG is a very sophisticated concurrent version of GOLOG that adopts a different interleaving control structure than RGOLOG. It has been defined and implemented at the University of Toronto (De Giacomo, Lesperance and Levesque [33]), and used in a number of applications (multi-agent systems [97]), robotics <ref> [54, 104] </ref> business process modeling [50]).
Reference: [55] <author> H.J. Levesque. </author> <title> Robot programs with sensing actions: Specification and implementation. </title> <note> In preparation, </note> <year> 1995. </year>
Reference-contexts: For a situation calculus approach to these issues, see (Bacchus, Halpern and Levesque [4]). For some possible approaches to the problem of what it might mean to execute a GOLOG program containing sensing actions, see <ref> [52, 55] </ref>. Dixon's Amala [21] is a programming language in a conventional im 161 perative style. It is designed after the observation that the semantics of embedded programs should reflect the assumptions about the environment as directly as possible. <p> Situated automata [88] share with GOLOG the same objective of designing agents using a high level language, and then compiling these high-level programs into low-level ones that can be immediately executed. In the framework considered here, the low-level programs are simply sequences of primitive actions. Levesque <ref> [55] </ref> considers cases involving sensing where no such sequence exists, and it is necessary to compile to low-level programs containing loops and conditionals.
Reference: [56] <author> H.J. Levesque. </author> <booktitle> What is planning in the presence of sensing? In Proceedings of the National Conference on Artificial Intelligence (AAAI'96), </booktitle> <pages> pages 1139-1146, </pages> <year> 1996. </year>
Reference-contexts: Typically, such plans involve conditionals coupled with sensing actions, for example: senseT raff icLight; if red then stop else go: 275 Etzioni et al [25] give a procedural approach to planning with sensing actions for a STRIPS-like representation. Levesque <ref> [56] </ref> provides an elegant logical specification for such conditional plans based on the situation calculus. In Chapter 12 we shall deal with the approach to sensing actions that underlies Levesque's account of planning. A quite different logical specification for planning with sense actions is (De Giacomo et al [32]).
Reference: [57] <author> H.J. Levesque, F. Lin, and R. Reiter. </author> <title> Defining complex actions in the situation calculus. </title> <type> Technical report, </type> <institution> Dept. of Computer Science, Univ. of Toronto, </institution> <year> 1995. </year> <note> In preparation. </note>
Reference-contexts: The macro definition for GOLOG procedures corresponds to the more usual Scott-Strachey least fixed-point definition in standard programming language semantics (Stoy [103]). For a more technical treatment of this macro approach to complex actions, see Levesque, Lin, and Reiter <ref> [57] </ref>, which also contains a formal statement and proof of correctness of the above Prolog GOLOG interpreter. The GOLOG interpreter and the entire GOLOG framework has been the subject of experimentation with various types of applications at the University of Toronto.
Reference: [58] <author> H.J. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. Scherl. GOLOG: </author> <title> a logic programming language for dynamic domains. </title> <journal> J. of Logic Programming, Special Issue on Actions, </journal> <volume> 31(1-3):59-83, </volume> <year> 1997. </year>
Reference-contexts: Hint: Take a to be OE?; ff. 13. For the blocks world of Section 6.5.2, invent a GOLOG while loop, and prove some correctness property of it. 160 6.8 Notes Much of the material for this chapter was taken from the GOLOG overview paper by Levesque et al. <ref> [58] </ref>. The theorem proving approach to program synthesis is most clearly described in (Manna and Waldinger [63]). Except for procedures, the macro approach to defining the semantics of GOLOG draws considerably from dynamic logic [35].
Reference: [59] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> J. of Logic and Computation, special issue on actions and processes, </journal> <volume> 4 </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: The foundational axioms for the situation calculus of Section 4.2.2 are taken from Pirri and Reiter [79]. Similar axioms were proposed in Pinto [?], Reiter [83] and Lin and Reiter <ref> [59] </ref>. Our view of situations as histories differs from earlier treatments of the situation calculus, in which, at least intuitively, situations were identified with states.
Reference: [60] <author> F. Lin and Y. Shoham. </author> <title> Concurrent actions in the situation calculus. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI'92), </booktitle> <pages> pages 590-595, </pages> <year> 1992. </year>
Reference-contexts: The principal difference is that Baral and Gelfond focus exclusively on concurrency, so their ontology does not include time or natural actions. More recent treatments for concurrency in the situation calculus, again, ignoring time, are by Schu-bert [94] and Lin and Shoham <ref> [60] </ref>. Pelavin [76] addresses the formalization of concurrent actions by extending the ontology of Allen's linear time logic [3] to include histories to represent branching futures, and suitable modal operators semantically characterized with respect to these histories.
Reference: [61] <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer Verlag, </publisher> <address> second edition, </address> <year> 1987. </year>
Reference-contexts: The usual approach to describing the semantics of Prolog see, for example, Lloyd <ref> [61] </ref> begins with a Prolog program P. Next, by applying some straightforward rules to the clauses of P, one transforms P into what we have called a definitional theory, and what logic programmers call the Clark completion of the program. <p> Our point of departure was to start with a definitional theory, show how to obtain a Prolog program from it, then use Clark's Theorem to justify the program as an implementation for the original theory. Chacun a son go^ut. The Lloyd-Topor transformations are taken from Lloyd's book <ref> [61] </ref> where Clark's theorem in its original and generalized forms are proved. Clark's results were first reported in [17]. Eclipse Prolog is the logic programming language that will be used throughout this book.
Reference: [62] <author> D. Maier. </author> <title> The Theory of Relational Databases. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1983. </year>
Reference-contexts: This approach to database updates is extended by Bertossi, Arenas and Ferretti [9], who also provide an implementation that interfaces to a relational database system, and to automated theorem provers for proving properties of the situation calculus database description. For more information on relational databases, see Maier <ref> [62] </ref>, and for a relational database perspective on update transactions, see Abiteboul [1]. Our perspective on databases, in which the initial database is any first order theory, not necessarily relational, is closest to that held by the deductive database community; see, for example, Minker [71].
Reference: [63] <author> Z. Manna and R. Waldinger. </author> <title> How to clear a block: A theory of plans. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 3 </volume> <pages> 343-377, </pages> <year> 1987. </year> <month> 297 </month>
Reference-contexts: The theorem proving approach to program synthesis is most clearly described in (Manna and Waldinger <ref> [63] </ref>). Except for procedures, the macro approach to defining the semantics of GOLOG draws considerably from dynamic logic [35]. In effect, it reifies as situations in the object language of the situation calculus, the possible worlds with which the semantics of dynamic logic is defined.
Reference: [64] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proceed--ings of the National Conference on Artificial Intelligence (AAAI'91), </booktitle> <pages> pages 634-639, </pages> <year> 1991. </year>
Reference-contexts: So this approach seems to be a viable in many cases preferable alternative to more "classical" approaches, that have been based on working backwards, via regression, from the goal statement to the initial situation (e.g. PRODIGY [15], SNLP <ref> [64, 101] </ref>). Srivastava and Kambhampati [102] have also explored the advantages of domain specific control information for planners, and have confirmed the observations of Bacchus and Kabanza that such planners can significantly outperform more traditional systems. <p> Most partial order planners in the literature are based on STRIPS-like representations for actions, and use regression in their search for plans (e.g. Chapman's TWEAK [16], Soderland and Weld's SNLP [101] based on McAllester and Rosenblitt <ref> [64] </ref>, and Blum and Furst's Graphplan [11]). There has been very little work on open world planning.
Reference: [65] <author> J. McCarthy. </author> <title> Situations, actions and causal laws. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <year> 1963. </year> <note> Reprinted in Semantic Information Processing (M. </note> <editor> Minsky ed.), </editor> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1968, </year> <pages> pp. 410-417. </pages>
Reference-contexts: One purpose of this book to disabuse AI researchers and practitioners of this limiting view of the situation calculus. The basic conceptual and formal ingredients of the situation calculus are due to John McCarthy <ref> [65] </ref> in 1963. The frame problem was first observed by McCarthy and Hayes [67]; since then, it has been the subject of a large body of technical research (e.g. [13]), as well as philosophical speculation [80]. <p> Our perspective on databases, in which the initial database is any first order theory, not necessarily relational, is closest to that held by the deductive database community; see, for example, Minker [71]. The monkey-bananas problem the very first planning problem was proposed by McCarthy in 1963 and reprinted in <ref> [65] </ref>; in that paper, Mc-Carthy also gave an axiomatization from which he showed that the monkey can indeed get the bananas.
Reference: [66] <author> J. McCarthy. </author> <booktitle> Epistemological problems of artificial intelligence. In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1038-1044, </pages> <address> Cambridge, MA, </address> <year> 1977. </year>
Reference-contexts: See also the book by Shoham [98] for an earlier treatment of causality and the frame problem. The companion to the frame problem the qualification problem was also first observed by McCarthy <ref> [66] </ref>, although 52 he had in mind a somewhat more general notion of the scope of this problem than that prevailing today, which concerns only the qualifications relevant to action preconditions. The first uses of the situation calculus were in planning, following the influential proposal of Green [36].
Reference: [67] <author> J. McCarthy and P. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, Edinburgh, </publisher> <address> Scotland, </address> <year> 1969. </year>
Reference-contexts: One purpose of this book to disabuse AI researchers and practitioners of this limiting view of the situation calculus. The basic conceptual and formal ingredients of the situation calculus are due to John McCarthy [65] in 1963. The frame problem was first observed by McCarthy and Hayes <ref> [67] </ref>; since then, it has been the subject of a large body of technical research (e.g. [13]), as well as philosophical speculation [80]. Two excellent recent books on theories of actions, with specific focus on solutions to the frame and related problems are by Sandewall [92] and by Shanahan [96]. <p> Our view of situations as histories differs from earlier treatments of the situation calculus, in which, at least intuitively, situations were identified with states. The state-based perspective was already present in the early work of McCarthy and Hayes <ref> [67] </ref> who write: "A situation s is the complete state of the universe at an instant of time." Situations as histories appears to be a new idea; however, it is difficult to be sure of this because no one before has given foundational axioms for any version of the situation calculus. <p> The strategies of McCarthy and Hayes <ref> [67] </ref> were a surprisingly early proposal for representing complex actions in the situation calculus. McCarthy and Hayes even appeal to an Algol-like language for representing their strategies, and they include a mechanism for returning symbolic execution traces, as sequences of actions, of these strategies.
Reference: [68] <author> D. McDermott. </author> <title> A temporal logic for reasoning about processes and plans. </title> <journal> Cognitive Science, </journal> <volume> 6 </volume> <pages> 101-155, </pages> <year> 1982. </year>
Reference-contexts: Sandewall's features and fluents [92, 93] and its related temporal action logics developed by Doherty, Gustaffson, Karlsson and Kvarnstrom [22], the family of A languges of Gelfond and Lifschitz [30], the fluent calculus of Holldobler and Schneeberger [42] (see also Thielscher [106]), and temporal logics by Allen [2] and McDermott <ref> [68] </ref>. <p> Another early, and quite sophisticated, fully axiomatic account of time and actions was due to McDermott <ref> [68] </ref>. Here, McDermott addresses the frame problem, continuous time and change, and branching futures quite similar to those of the situation calculus. Chapter 5 of Davis's book [18] describes many of the details of this approach.
Reference: [69] <author> R. Miller. </author> <title> A case study in reasoning about actions and continuous change. </title> <booktitle> In Proc. </booktitle> <address> ECAI'96. </address> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference-contexts: For the use of time in the situation calculus for the simulation of physical and mechanical systems, see Kelley [45]. There are several other approaches to modeling natural actions, mostly based upon linear temporal logics. Examples are the work by Miller and Shanahan <ref> [95, 69, 70] </ref>, and 202 Van Bellegham, Denecker and De Schreye [8], both using extended versions of the event calculus of Kowalski and Sergot [48]. Closely related ideas about representing physical processes were proposed earlier by Sandewall [91]. See also Herrmann and Thielscher [41].
Reference: [70] <author> R. Miller and M. Shanahan. </author> <title> Reasoning about discontinuities in the event calculus. In L.C. </title> <editor> Aiello, J. Doyle, and S.C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR'96). </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: For the use of time in the situation calculus for the simulation of physical and mechanical systems, see Kelley [45]. There are several other approaches to modeling natural actions, mostly based upon linear temporal logics. Examples are the work by Miller and Shanahan <ref> [95, 69, 70] </ref>, and 202 Van Bellegham, Denecker and De Schreye [8], both using extended versions of the event calculus of Kowalski and Sergot [48]. Closely related ideas about representing physical processes were proposed earlier by Sandewall [91]. See also Herrmann and Thielscher [41].
Reference: [71] <editor> J. Minker, editor. </editor> <booktitle> Foundations of Deductive Databases and Logic Programming. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, Los Altos, CA, </address> <year> 1988. </year>
Reference-contexts: Our perspective on databases, in which the initial database is any first order theory, not necessarily relational, is closest to that held by the deductive database community; see, for example, Minker <ref> [71] </ref>. The monkey-bananas problem the very first planning problem was proposed by McCarthy in 1963 and reprinted in [65]; in that paper, Mc-Carthy also gave an axiomatization from which he showed that the monkey can indeed get the bananas.
Reference: [72] <author> Y.N. Moschovakis. </author> <title> Elementary induction on abstract structures. </title> <publisher> North-Holland Publishing Company, </publisher> <address> Amsterdam, </address> <year> 1974. </year>
Reference: [73] <author> L. Palopoli, F. Pirri, and C. Pizzuti. </author> <title> Algorithms for selective enumeration of prime implicants. </title> <journal> Artificial Intelligence, </journal> <note> 1999. To appear. </note>
Reference-contexts: Tison [108]). The importance of prime implicates for artificial intelligence was first pointed out by Reiter and de Kleer [87], and since that time, there has been considerable work done on better computational methods than simple-minded resolution (e.g. de Kleer [20], Jackson and Pais [43], Palopoli, Pirri and Pizzuti <ref> [73] </ref>). Cadoli and Donini [14] give a survey of knowledge base compilation techniques. The most important foundational paper on planning is by Green [36]; it provides the theoretical underpinning for all of the results of this chapter.
Reference: [74] <author> E.P.D. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <editor> In R.J. Brachman, H. Levesque, and R. Reiter, editors, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 324-332. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1989. </year>
Reference-contexts: The solution to the frame problem of Section 3.2 was described in Reiter [82]; it combines elements of earlier proposals by Pednault <ref> [74] </ref>, Davis [18], and by Haas [38], as elaborated by Schubert [94]. Independently, Elkan [23] proposed a similar solution. The significance of the consistency condition (3.11) in deriving successor state axioms (Result 3.2.1) was first noted by Pednault [74], and generalized slightly by Reiter [82] to fit his solution to the <p> described in Reiter [82]; it combines elements of earlier proposals by Pednault <ref> [74] </ref>, Davis [18], and by Haas [38], as elaborated by Schubert [94]. Independently, Elkan [23] proposed a similar solution. The significance of the consistency condition (3.11) in deriving successor state axioms (Result 3.2.1) was first noted by Pednault [74], and generalized slightly by Reiter [82] to fit his solution to the frame problem. The situation calculus-based approach to formalizing databases evolving under update transactions was described by Reiter in [84]. <p> The concept of regression is an old one in AI (Waldinger [110]), and forms the basis of a number of planning algorithms. Pednault uses it extensively in his paper on the frame problem <ref> [74] </ref>, and also discusses it in [75].
Reference: [75] <author> E.P.D. Pednault. </author> <title> ADL and the state-transition model of action. </title> <journal> J. Logic and Computation, </journal> <volume> 4(5) </volume> <pages> 467-512, </pages> <year> 1994. </year> <month> 298 </month>
Reference-contexts: The concept of regression is an old one in AI (Waldinger [110]), and forms the basis of a number of planning algorithms. Pednault uses it extensively in his paper on the frame problem [74], and also discusses it in <ref> [75] </ref>.
Reference: [76] <author> R.N. Pelavin. </author> <title> Planning with simultaneous actions and external events. </title> <editor> In J.F. Allen, H.A. Kautz, R.N. Pelavin, and J.D. Tenenberg, editors, </editor> <booktitle> Reasoning about Plans, </booktitle> <pages> pages 127-211. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: The principal difference is that Baral and Gelfond focus exclusively on concurrency, so their ontology does not include time or natural actions. More recent treatments for concurrency in the situation calculus, again, ignoring time, are by Schu-bert [94] and Lin and Shoham [60]. Pelavin <ref> [76] </ref> addresses the formalization of concurrent actions by extending the ontology of Allen's linear time logic [3] to include histories to represent branching futures, and suitable modal operators semantically characterized with respect to these histories. <p> Shanahan. The idea of decomposing actions with durations into two instantaneous start and end actions, together with a fluent representing a process, was proposed for the situation calculus by Pinto [78] and Ternovskaia [105]. The precondition interaction problem for concurrent actions is discussed by Pelavin <ref> [76] </ref> and by Pinto [78]. For an extensive discussion of Zeno's paradox, see Davis [19].
Reference: [77] <author> F. J. Pelletier. </author> <title> Seventy-five problems for testing automatic theorem provers. </title> <journal> J. of Automated Reasoning, </journal> <volume> 2(2) </volume> <pages> 191-216, </pages> <year> 1986. </year>
Reference: [78] <author> J.A. Pinto. </author> <title> Temporal Reasoning in the Situation Calculus. </title> <type> PhD thesis, </type> <institution> University of Toronto, Department of Computer Science, </institution> <year> 1994. </year>
Reference-contexts: Shanahan. The idea of decomposing actions with durations into two instantaneous start and end actions, together with a fluent representing a process, was proposed for the situation calculus by Pinto <ref> [78] </ref> and Ternovskaia [105]. The precondition interaction problem for concurrent actions is discussed by Pelavin [76] and by Pinto [78]. For an extensive discussion of Zeno's paradox, see Davis [19]. <p> Shanahan. The idea of decomposing actions with durations into two instantaneous start and end actions, together with a fluent representing a process, was proposed for the situation calculus by Pinto <ref> [78] </ref> and Ternovskaia [105]. The precondition interaction problem for concurrent actions is discussed by Pelavin [76] and by Pinto [78]. For an extensive discussion of Zeno's paradox, see Davis [19]. The material on sequential, temporal GOLOG, and the coffee delivery program is taken from Reiter [86], and that on concurrency and natural actions from Reiter [85], which in turn relies heavily on earlier work by Pinto [78]. <p> and by Pinto <ref> [78] </ref>. For an extensive discussion of Zeno's paradox, see Davis [19]. The material on sequential, temporal GOLOG, and the coffee delivery program is taken from Reiter [86], and that on concurrency and natural actions from Reiter [85], which in turn relies heavily on earlier work by Pinto [78]. For the use of time in the situation calculus for the simulation of physical and mechanical systems, see Kelley [45]. There are several other approaches to modeling natural actions, mostly based upon linear temporal logics.
Reference: [79] <author> F. Pirri and R. Reiter. </author> <title> Some contributions to the metatheory of the situation calculus. </title> <journal> Journal of the ACM, </journal> <note> 1999. To appear. http://www.cs.toronto.edu/~cogrobo/. </note>
Reference-contexts: Prove that D is decidable for the class of regressable sentences. 4.10 Notes The material on induction and its importance in the situation calculus is taken from Reiter [83]. The foundational axioms for the situation calculus of Section 4.2.2 are taken from Pirri and Reiter <ref> [79] </ref>. Similar axioms were proposed in Pinto [?], Reiter [83] and Lin and Reiter [59]. Our view of situations as histories differs from earlier treatments of the situation calculus, in which, at least intuitively, situations were identified with states. <p> Pednault uses it extensively in his paper on the frame problem [74], and also discusses it in [75]. The relative satisfiability of basic action theories and the soundness and completeness of 93 regression for these theories (Theorems 4.4.1 and 4.5.2) are proved in (Pirri and Reiter <ref> [79] </ref>). 94 Chapter 5 Implementing Basic Action Theories This chapter presents a method for implementing basic action theories in the logic programming language Prolog, one that will be used throughout this book.
Reference: [80] <editor> Z.W. Pylyshyn, editor. </editor> <booktitle> The robot's dilemma: The frame problem in artificial intelligence. </booktitle> <publisher> Ablex Publishing Corporation, </publisher> <address> Norwood, New Jersey, </address> <year> 1987. </year>
Reference-contexts: The frame problem was first observed by McCarthy and Hayes [67]; since then, it has been the subject of a large body of technical research (e.g. [13]), as well as philosophical speculation <ref> [80] </ref>. Two excellent recent books on theories of actions, with specific focus on solutions to the frame and related problems are by Sandewall [92] and by Shanahan [96]. See also the book by Shoham [98] for an earlier treatment of causality and the frame problem.
Reference: [81] <author> R. Reiter. </author> <title> Nonmonotonic reasoning. </title> <booktitle> Annual Reviews in Computer Science, </booktitle> <volume> 2 </volume> <pages> 147-186, </pages> <year> 1987. </year>
Reference-contexts: All these approaches were based on nonmonotonic reasoning techniques; in fact, 53 solving the frame problem was one of the principal motivations for the de-velopment of these logics (Reiter <ref> [81] </ref>). Accordingly, the Hanks-McDermott paper presented a serious challenge to these formalisms. The final outcome of this challenge was a flurry of activity on the part of the nonmonotonic research community to correct their story on the frame problem.
Reference: [82] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lif-schitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: The solution to the frame problem of Section 3.2 was described in Reiter <ref> [82] </ref>; it combines elements of earlier proposals by Pednault [74], Davis [18], and by Haas [38], as elaborated by Schubert [94]. Independently, Elkan [23] proposed a similar solution. <p> Independently, Elkan [23] proposed a similar solution. The significance of the consistency condition (3.11) in deriving successor state axioms (Result 3.2.1) was first noted by Pednault [74], and generalized slightly by Reiter <ref> [82] </ref> to fit his solution to the frame problem. The situation calculus-based approach to formalizing databases evolving under update transactions was described by Reiter in [84].
Reference: [83] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: Prove that D is decidable for the class of regressable sentences. 4.10 Notes The material on induction and its importance in the situation calculus is taken from Reiter <ref> [83] </ref>. The foundational axioms for the situation calculus of Section 4.2.2 are taken from Pirri and Reiter [79]. Similar axioms were proposed in Pinto [?], Reiter [83] and Lin and Reiter [59]. <p> decidable for the class of regressable sentences. 4.10 Notes The material on induction and its importance in the situation calculus is taken from Reiter <ref> [83] </ref>. The foundational axioms for the situation calculus of Section 4.2.2 are taken from Pirri and Reiter [79]. Similar axioms were proposed in Pinto [?], Reiter [83] and Lin and Reiter [59]. Our view of situations as histories differs from earlier treatments of the situation calculus, in which, at least intuitively, situations were identified with states.
Reference: [84] <author> R. Reiter. </author> <title> On specifying database updates. </title> <journal> Journal of Logic Programming, </journal> <volume> 25 </volume> <pages> 25-91, </pages> <year> 1995. </year>
Reference-contexts: The situation calculus-based approach to formalizing databases evolving under update transactions was described by Reiter in <ref> [84] </ref>. This approach to database updates is extended by Bertossi, Arenas and Ferretti [9], who also provide an implementation that interfaces to a relational database system, and to automated theorem provers for proving properties of the situation calculus database description.
Reference: [85] <author> R. Reiter. </author> <title> Natural actions, concurrency and continuous time in the situation calculus. In L.C. </title> <editor> Aiello, J. Doyle, and S.C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR'96), </booktitle> <pages> pages 2-13. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: For an extensive discussion of Zeno's paradox, see Davis [19]. The material on sequential, temporal GOLOG, and the coffee delivery program is taken from Reiter [86], and that on concurrency and natural actions from Reiter <ref> [85] </ref>, which in turn relies heavily on earlier work by Pinto [78]. For the use of time in the situation calculus for the simulation of physical and mechanical systems, see Kelley [45]. There are several other approaches to modeling natural actions, mostly based upon linear temporal logics.
Reference: [86] <author> R. Reiter. </author> <title> Sequential, temporal GOLOG. In A.G. </title> <editor> Cohn and L.K. Schubert, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Sixth International Conference (KR'98), </booktitle> <pages> pages 547-556. </pages> <publisher> Morgan Kauf-mann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1998. </year>
Reference-contexts: The precondition interaction problem for concurrent actions is discussed by Pelavin [76] and by Pinto [78]. For an extensive discussion of Zeno's paradox, see Davis [19]. The material on sequential, temporal GOLOG, and the coffee delivery program is taken from Reiter <ref> [86] </ref>, and that on concurrency and natural actions from Reiter [85], which in turn relies heavily on earlier work by Pinto [78]. For the use of time in the situation calculus for the simulation of physical and mechanical systems, see Kelley [45].
Reference: [87] <author> R. Reiter and J. de Kleer. </author> <title> Foundations for assumption-based truth maintenance systems: Preliminary report. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI'87), </booktitle> <pages> pages 183-188, </pages> <year> 1987. </year> <month> 299 </month>
Reference-contexts: The first uses for prime implicates in computer science were in the synthesis of digital circuits, and there is an early literature on how to compute them (e.g. Tison [108]). The importance of prime implicates for artificial intelligence was first pointed out by Reiter and de Kleer <ref> [87] </ref>, and since that time, there has been considerable work done on better computational methods than simple-minded resolution (e.g. de Kleer [20], Jackson and Pais [43], Palopoli, Pirri and Pizzuti [73]). Cadoli and Donini [14] give a survey of knowledge base compilation techniques.
Reference: [88] <author> S.J. </author> <title> Rosenschein and L.P. Kaelbling. The synthesis of digital machines with provable epistemic properties. </title> <editor> In Joseph Y. Halpern, editor, </editor> <booktitle> Proceedings of the 1986 Conference on Theoretical Aspects of Reasoning about Knowledge, </booktitle> <pages> pages 83-98. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, Monterey, CA, </address> <year> 1986. </year>
Reference-contexts: But sketchy plans are allowed; nondeterminism can be used to infer the missing details. In our elevator example, it was left to the GOLOG interpreter to find an executable sequence of actions to serve all active call buttons. Situated automata <ref> [88] </ref> share with GOLOG the same objective of designing agents using a high level language, and then compiling these high-level programs into low-level ones that can be immediately executed. In the framework considered here, the low-level programs are simply sequences of primitive actions.
Reference: [89] <author> S. Ruman. </author> <title> Golog as an agent-programming language: Experiments in developing banking applications. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Toronto, Toronto, </institution> <note> ON, 1995. In preparation. </note>
Reference-contexts: The high-level controller of the robot programmed in GOLOG is interfaced to an existing robotics package that supports path planning and local navigation. The system is currently used to control two different autonomous robots: an RWI B21 and a Nomad200 ([44]). Another application involves tools for home banking (Shane <ref> [89] </ref>, Lesperance et al [53]). In this case, a number of software agents written in GOLOG handle various parts of the banking process (responding to buttons on an ATM terminal, managing the accounts at a bank, monitoring account levels for a user, etc).
Reference: [90] <author> S.J. Russell and P. Norvig. </author> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Pren-tice Hall, </publisher> <year> 1995. </year>
Reference-contexts: However, not every partial order plan can be represented in the concurrent situation calculus; Russell and Norvig <ref> [90] </ref> Figure 11.5 provides an example. Most partial order planners in the literature are based on STRIPS-like representations for actions, and use regression in their search for plans (e.g. Chapman's TWEAK [16], Soderland and Weld's SNLP [101] based on McAllester and Rosenblitt [64], and Blum and Furst's Graphplan [11]).
Reference: [91] <author> E. Sandewall. </author> <title> Combining logic and differential equations for describing real-world systems. </title> <editor> In R.J. Brachman, H. Levesque, and R. Reiter, editors, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 412-420. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1989. </year>
Reference-contexts: Examples are the work by Miller and Shanahan [95, 69, 70], and 202 Van Bellegham, Denecker and De Schreye [8], both using extended versions of the event calculus of Kowalski and Sergot [48]. Closely related ideas about representing physical processes were proposed earlier by Sandewall <ref> [91] </ref>. See also Herrmann and Thielscher [41]. Section 7.9.9 indicated how GOLOG might be used for computer graphics applications. For a much more interesting exploration of this idea in a computer animation setting, see Funge [28].
Reference: [92] <author> E. Sandewall. </author> <title> Features and Fluents: The Representation of Knowledge about Dynamical Systems. </title> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: Two excellent recent books on theories of actions, with specific focus on solutions to the frame and related problems are by Sandewall <ref> [92] </ref> and by Shanahan [96]. See also the book by Shoham [98] for an earlier treatment of causality and the frame problem. <p> While the situation calculus was perhaps the first logical proposal within artificial intelligence for representing system dynamics, it has not remained the only such approach. Others include the event calculus, first formulated by Kowalski and Sergot [48], Sandewall's features and fluents <ref> [92, 93] </ref> and its related temporal action logics developed by Doherty, Gustaffson, Karlsson and Kvarnstrom [22], the family of A languges of Gelfond and Lifschitz [30], the fluent calculus of Holldobler and Schneeberger [42] (see also Thielscher [106]), and temporal logics by Allen [2] and McDermott [68].
Reference: [93] <author> E. Sandewall. </author> <title> Cognitive robotics logic and its metatheory: Features and fluents revisited. </title> <booktitle> Linkoping Electronic Articles in Computer and Information Science, </booktitle> <volume> 3(17), </volume> <year> 1998. </year> <note> http//www.ep.liu.se/ea/cis/1998/017/. </note>
Reference-contexts: While the situation calculus was perhaps the first logical proposal within artificial intelligence for representing system dynamics, it has not remained the only such approach. Others include the event calculus, first formulated by Kowalski and Sergot [48], Sandewall's features and fluents <ref> [92, 93] </ref> and its related temporal action logics developed by Doherty, Gustaffson, Karlsson and Kvarnstrom [22], the family of A languges of Gelfond and Lifschitz [30], the fluent calculus of Holldobler and Schneeberger [42] (see also Thielscher [106]), and temporal logics by Allen [2] and McDermott [68].
Reference: [94] <author> L.K. Schubert. </author> <title> Monotonic solution of the frame problem in the situation calculus: an efficient method for worlds with fully specified actions. In H.E. </title> <editor> Kyberg, R.P. Loui, and G.N. Carlson, editors, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: The solution to the frame problem of Section 3.2 was described in Reiter [82]; it combines elements of earlier proposals by Pednault [74], Davis [18], and by Haas [38], as elaborated by Schubert <ref> [94] </ref>. Independently, Elkan [23] proposed a similar solution. The significance of the consistency condition (3.11) in deriving successor state axioms (Result 3.2.1) was first noted by Pednault [74], and generalized slightly by Reiter [82] to fit his solution to the frame problem. <p> The principal difference is that Baral and Gelfond focus exclusively on concurrency, so their ontology does not include time or natural actions. More recent treatments for concurrency in the situation calculus, again, ignoring time, are by Schu-bert <ref> [94] </ref> and Lin and Shoham [60]. Pelavin [76] addresses the formalization of concurrent actions by extending the ontology of Allen's linear time logic [3] to include histories to represent branching futures, and suitable modal operators semantically characterized with respect to these histories.
Reference: [95] <author> M.P. Shanahan. </author> <title> Representing continuous change in the event calculus. </title> <booktitle> In Proceedings ECAI 90, </booktitle> <pages> pages 598-603, </pages> <year> 1990. </year>
Reference-contexts: For the use of time in the situation calculus for the simulation of physical and mechanical systems, see Kelley [45]. There are several other approaches to modeling natural actions, mostly based upon linear temporal logics. Examples are the work by Miller and Shanahan <ref> [95, 69, 70] </ref>, and 202 Van Bellegham, Denecker and De Schreye [8], both using extended versions of the event calculus of Kowalski and Sergot [48]. Closely related ideas about representing physical processes were proposed earlier by Sandewall [91]. See also Herrmann and Thielscher [41].
Reference: [96] <author> M.P. Shanahan. </author> <title> Solving the Frame Problem: A Mathematical Investigation of the Common Sense Law of Inertia. </title> <publisher> MIT Press, </publisher> <year> 1997. </year>
Reference-contexts: Two excellent recent books on theories of actions, with specific focus on solutions to the frame and related problems are by Sandewall [92] and by Shanahan <ref> [96] </ref>. See also the book by Shoham [98] for an earlier treatment of causality and the frame problem.
Reference: [97] <author> S. Shapiro, Y. Lesperance, and H.J. Levesque. </author> <title> Specifying communicative multi-agent systems with ConGolog. </title> <booktitle> In Working Notes of the AAAI Fall 1997 Symposium on Communicative Action in Humans and Machines. </booktitle> <publisher> AAAI Press, </publisher> <year> 1997. </year>
Reference-contexts: CONGOLOG (De Giacomo, Lesperance and Levesque [33]), a version of the language supporting concurrency (including interrupts, priorities, and support for exogenous actions) has also being implemented, and experiments with various applications have been performed, e.g. multi-elevator co-ordination, meeting scheduling (Lesperance et al <ref> [97] </ref>). In process control and robotics applications it is necessary to take seriously the possibility of control error and sensor noise. For a situation calculus approach to these issues, see (Bacchus, Halpern and Levesque [4]). <p> CONGOLOG is a very sophisticated concurrent version of GOLOG that adopts a different interleaving control structure than RGOLOG. It has been defined and implemented at the University of Toronto (De Giacomo, Lesperance and Levesque [33]), and used in a number of applications (multi-agent systems <ref> [97] </ref>), robotics [54, 104] business process modeling [50]).
Reference: [98] <author> Y. Shoham. </author> <title> Reasoning about Change: Time and Causation from the Standpoint of Artificial Intelligence. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: Two excellent recent books on theories of actions, with specific focus on solutions to the frame and related problems are by Sandewall [92] and by Shanahan [96]. See also the book by Shoham <ref> [98] </ref> for an earlier treatment of causality and the frame problem.
Reference: [99] <author> Y. Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <year> 1993. </year>
Reference-contexts: In the framework considered here, the low-level programs are simply sequences of primitive actions. Levesque [55] considers cases involving sensing where no such sequence exists, and it is necessary to compile to low-level programs containing loops and conditionals. Shoham's AGENT-0 programming language <ref> [99] </ref> includes a model of commitments and capabilities, and has simple communication acts built-in; its agents all have a generic rule-based architecture; there is also a global clock and all beliefs are about time-stamped propositions.
Reference: [100] <author> B.C. Smith. </author> <title> Reflection and semantics in a procedural language. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <address> Cambridge, Mass., </address> <year> 1982. </year> <month> 300 </month>
Reference: [101] <author> S. Soderland, T. Barrett, and D. Weld. </author> <title> The SNLP planner implementation. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Washing-ton, </institution> <year> 1990. </year> <note> Contact bug-snlp@cs.washington.edu. </note>
Reference-contexts: So this approach seems to be a viable in many cases preferable alternative to more "classical" approaches, that have been based on working backwards, via regression, from the goal statement to the initial situation (e.g. PRODIGY [15], SNLP <ref> [64, 101] </ref>). Srivastava and Kambhampati [102] have also explored the advantages of domain specific control information for planners, and have confirmed the observations of Bacchus and Kabanza that such planners can significantly outperform more traditional systems. <p> Most partial order planners in the literature are based on STRIPS-like representations for actions, and use regression in their search for plans (e.g. Chapman's TWEAK [16], Soderland and Weld's SNLP <ref> [101] </ref> based on McAllester and Rosenblitt [64], and Blum and Furst's Graphplan [11]). There has been very little work on open world planning.
Reference: [102] <author> B. Srivastava and S. Kambhampati. </author> <title> Synthesizing customized plans from specifications. </title> <journal> J. of Artificial Intelligence Research, </journal> <note> 1998. To appear. </note>
Reference-contexts: So this approach seems to be a viable in many cases preferable alternative to more "classical" approaches, that have been based on working backwards, via regression, from the goal statement to the initial situation (e.g. PRODIGY [15], SNLP [64, 101]). Srivastava and Kambhampati <ref> [102] </ref> have also explored the advantages of domain specific control information for planners, and have confirmed the observations of Bacchus and Kabanza that such planners can significantly outperform more traditional systems. The concurrent planner of Section 9.3 produces what are normally called partial order plans ([90], Chapter 11).
Reference: [103] <author> J.E. Stoy. </author> <title> Denotational Semantics. </title> <publisher> MIT Press, </publisher> <year> 1977. </year>
Reference-contexts: In effect, it reifies as situations in the object language of the situation calculus, the possible worlds with which the semantics of dynamic logic is defined. The macro definition for GOLOG procedures corresponds to the more usual Scott-Strachey least fixed-point definition in standard programming language semantics (Stoy <ref> [103] </ref>). For a more technical treatment of this macro approach to complex actions, see Levesque, Lin, and Reiter [57], which also contains a formal statement and proof of correctness of the above Prolog GOLOG interpreter.
Reference: [104] <author> K. Tam. </author> <title> Experiments in high-level robot control using ConGolog | reactivity, failure handling, and knowledge-based search. </title> <type> Master's thesis, </type> <institution> Dept. of Computer Science, York University, </institution> <year> 1998. </year>
Reference-contexts: CONGOLOG is a very sophisticated concurrent version of GOLOG that adopts a different interleaving control structure than RGOLOG. It has been defined and implemented at the University of Toronto (De Giacomo, Lesperance and Levesque [33]), and used in a number of applications (multi-agent systems [97]), robotics <ref> [54, 104] </ref> business process modeling [50]).
Reference: [105] <author> E. Ternovskaia. </author> <title> Interval situation calculus. </title> <booktitle> In Proc. of ECAI'94 Workshop W5 on Logic and Change, </booktitle> <pages> pages 153-164, </pages> <address> Amsterdam, </address> <month> August 8-12, </month> <year> 1994. </year>
Reference-contexts: Shanahan. The idea of decomposing actions with durations into two instantaneous start and end actions, together with a fluent representing a process, was proposed for the situation calculus by Pinto [78] and Ternovskaia <ref> [105] </ref>. The precondition interaction problem for concurrent actions is discussed by Pelavin [76] and by Pinto [78]. For an extensive discussion of Zeno's paradox, see Davis [19].
Reference: [106] <author> M. Thielscher. </author> <title> Introduction to the fluent calculus. </title> <booktitle> Linkoping Electronic Articles in Computer and Information Science, </booktitle> <volume> 3(14), </volume> <year> 1998. </year> <note> http//www.ep.liu.se/ea/cis/1998/'1'/. </note>
Reference-contexts: event calculus, first formulated by Kowalski and Sergot [48], Sandewall's features and fluents [92, 93] and its related temporal action logics developed by Doherty, Gustaffson, Karlsson and Kvarnstrom [22], the family of A languges of Gelfond and Lifschitz [30], the fluent calculus of Holldobler and Schneeberger [42] (see also Thielscher <ref> [106] </ref>), and temporal logics by Allen [2] and McDermott [68].
Reference: [107] <author> M. Thielscher. </author> <title> From situation calculus to fluent calculus: State update axioms as a solution to the inferential frame problem. </title> <journal> Artificial Intelligence, </journal> <year> 1999. </year>
Reference-contexts: This is an embarrassing richness of proposals; a few attempts have been made to compare some of them with the situation calculus (Kowalski and Sadri [47], van Belleghem, Denecker and de Schreye [109], Thielscher <ref> [107] </ref>). 54 Chapter 4 Foundations of the Situation Calculus In the previous chapter, we provided an intuitive introduction to the situation calculus, and an indication of some of the things it is good for.
Reference: [108] <author> P. Tison. </author> <title> Generalized consensus theory and applications to the minimization of boolean functions. </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> 4 </volume> <pages> 446-456, </pages> <year> 1967. </year>
Reference-contexts: A quite different logical specification for planning with sense actions is (De Giacomo et al [32]). The first uses for prime implicates in computer science were in the synthesis of digital circuits, and there is an early literature on how to compute them (e.g. Tison <ref> [108] </ref>). The importance of prime implicates for artificial intelligence was first pointed out by Reiter and de Kleer [87], and since that time, there has been considerable work done on better computational methods than simple-minded resolution (e.g. de Kleer [20], Jackson and Pais [43], Palopoli, Pirri and Pizzuti [73]).
Reference: [109] <author> K. van Belleghem, M. Denecker, and D. de Schreye. </author> <title> On the relation between situation calculus and event calculus. </title> <journal> Journal of Logic Programming, </journal> <year> 1994. </year>
Reference-contexts: This is an embarrassing richness of proposals; a few attempts have been made to compare some of them with the situation calculus (Kowalski and Sadri [47], van Belleghem, Denecker and de Schreye <ref> [109] </ref>, Thielscher [107]). 54 Chapter 4 Foundations of the Situation Calculus In the previous chapter, we provided an intuitive introduction to the situation calculus, and an indication of some of the things it is good for.
Reference: [110] <author> R. Waldinger. </author> <title> Achieving several goals simultaneously. </title> <editor> In E. Elcock and D. Michie, editors, </editor> <booktitle> Machine Intelligence 8, </booktitle> <pages> pages 94-136. </pages> <publisher> Ellis Horwood, </publisher> <address> Ed-inburgh, Scotland, </address> <year> 1977. </year>
Reference-contexts: The concept of regression is an old one in AI (Waldinger <ref> [110] </ref>), and forms the basis of a number of planning algorithms. Pednault uses it extensively in his paper on the frame problem [74], and also discusses it in [75].
Reference: [111] <author> M.J. Wooldridge and N.R. Jennings. </author> <title> Intelligent agents: </title> <journal> Theory and practice. Knowledge Engineering Review, </journal> <volume> 10, </volume> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: A number of other groups are also developing formalisms for the specification of artificial agents. See <ref> [111] </ref> for a detailed survey of this research. Transaction logic (Bonner and Kifer [12]) was designed to define complex database transactions, and like GOLOG provides a rich repertoire of operators for defining new transactions in terms of old. These include sequence, nondeterministic choice, conditionals and iteration.
Reference: [112] <author> Q. Yang. </author> <title> Intelligent Planning. </title> <publisher> Springer Verlag, </publisher> <year> 1997. </year> <month> 301 </month>
Reference-contexts: The most important foundational paper on planning is by Green [36]; it provides the theoretical underpinning for all of the results of this chapter. The NP-hardness of optimal blocks world planning was established by Gupta and Nau [37]. An excellent, general book on planning is by Yang <ref> [112] </ref>. 276 Chapter 10 State Constraints 277 Chapter 11 Probability and Decision Theory in the Situation Calculus 278 Chapter 12 Knowledge and Sensing Actions 279 Chapter 13 Concluding Remarks 280 Appendix A Some Useful First Order Inference Rules For finding proofs by hand of complex logical theorems, the following rules are
References-found: 112

