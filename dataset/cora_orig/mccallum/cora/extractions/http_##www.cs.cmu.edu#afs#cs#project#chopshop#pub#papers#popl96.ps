URL: http://www.cs.cmu.edu/afs/cs/project/chopshop/pub/papers/popl96.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/project/compose/www/paper_abstracts/dnj/pop196.html
Root-URL: 
Keyword: k! contributed by each type of k elements. Keywords: validity checking, model enumeration, symmetry relational calculus, formal specification, Z notation.  
Abstract: Both software specifications and their intended properties can be expressed in a simple relational language. The claim that a specification satisfies a property becomes a relational formula that can be checked automatically by enumerating the formu - las interpretations. Because the number of interpretations is usually huge, this approach has not been thought to be practical. But by eliminating isomorphic interpretations, the enu - meration can be reduced substantially, with a factor of rough - ly 
Abstract-found: 1
Intro-found: 1
Reference: [B+94] <author> J. Bicarregui, J.S. F itzgerald, P .A. Lindsay , R . Moore and B. Ritchie. </author> <title> Proof in VDM: A Practitioners Guide. </title> <publisher> FACIT, Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This deprives the specifi er of conjunc - tionarguably the most useful specifi cation constructbut not necessarily non-determinism [LL91]. Aside from our method, theorem proving is the only approach that can accommodate implicit specifications (see [GGH90] for Larch, <ref> [B+94] </ref> for VDM, [Jon92, BG94, ES94] for Z, and [BH94] for scope # cases Claim1 Claim2 2 576 80 (7.2) 144 (4.0) 4 6.6e8 85118 (7699) 580433 (1129) Table 2: Reductions for the elaborated example of Figure 5 (below).
Reference: [BC+92] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, D.L. Dill and L.J. Hwang. </author> <title> Symbolic Model Checking: 10 20 States and Beyond. </title> <journal> Information and Computation, </journal> <volume> Vol. 98, No. 2, </volume> <pages> pp. 142170, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: We are investigating enumerative analyses for checking software specifi cations. Unfortunately, model checking meth - ods that have been remarkably successful in verifying hard - ware designs and protocols (such as <ref> [BC+92, Kur94, Hol91] </ref>) have no obvious application to software. In software designs, state explosion arises more from the data structures of a single machines state than from the product of the control states of several machines, making it hard to analyze even a simple sequential operation.
Reference: [BG94] <author> J. Bowen and M.J.C. Gordon. </author> <title> Z and HOL. </title> <booktitle> Z User Workshop, </booktitle> <address> Cambridge, England, 1994, </address> <publisher> Springer - Verlag Workshops in Computing, </publisher> <pages> pp. 141167. </pages>
Reference-contexts: This deprives the specifi er of conjunc - tionarguably the most useful specifi cation constructbut not necessarily non-determinism [LL91]. Aside from our method, theorem proving is the only approach that can accommodate implicit specifications (see [GGH90] for Larch, [B+94] for VDM, <ref> [Jon92, BG94, ES94] </ref> for Z, and [BH94] for scope # cases Claim1 Claim2 2 576 80 (7.2) 144 (4.0) 4 6.6e8 85118 (7699) 580433 (1129) Table 2: Reductions for the elaborated example of Figure 5 (below).
Reference: [BH94] <institution> Rudolf Berghammer and Claudia Hattensperger . Computer-Aided Manipulation of R elational Expressions and F ormulae Using RALF . Technical Report, Institut fur Informatik und P raktische Mathematik, Christian-Albrechts Universitat Zu Kiel, Kiel, Germany, </institution> <year> 1994. </year>
Reference-contexts: This deprives the specifi er of conjunc - tionarguably the most useful specifi cation constructbut not necessarily non-determinism [LL91]. Aside from our method, theorem proving is the only approach that can accommodate implicit specifications (see [GGH90] for Larch, [B+94] for VDM, [Jon92, BG94, ES94] for Z, and <ref> [BH94] </ref> for scope # cases Claim1 Claim2 2 576 80 (7.2) 144 (4.0) 4 6.6e8 85118 (7699) 580433 (1129) Table 2: Reductions for the elaborated example of Figure 5 (below).
Reference: [BS92] <editor> Belaid Benhamou and Lakhdar Sais. </editor> <title> Theoretical study of symmetries in propositional calculus and applications. </title> <booktitle> Automated Deduction (CADE-11): Proc. 11th Inter national Conference on A utomated Deduction, </booktitle> <address> Saratoga Springs, NY , June 1992. </address> <booktitle> Lecture Notes in Ar tificial Intelligence , V ol. </booktitle> <volume> 607, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: Unfortunately, isomorph elimination and element-wise con - struction seem to be incompatible and it is unlikely that a tool could incorporate both. Symmetry has been investigated in the context of automated deduction: <ref> [BS92] </ref>, for example, shows how to take advantage of symmetries in a formula by ex changing one variable for another. But as far as we know, no other method uses symmetry in the assignable values themselves.
Reference: [CFJ93] <author> E.M. Clarke, T. Filkorn and S. Jha. </author> <title> Exploiting symmetry in temporal logic model checking. </title> <booktitle> Fifth International Confer ence on Computer Aided Verification, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: But as far as we know, no other method uses symmetry in the assignable values themselves. Isomorph elimination is related to a number of model checking techniques that exploit symmetry in the transition relation <ref> [Sta91, CFJ93, ES93, ID93] </ref>. The symmetries identi - fied by our method, in contrast, are not in the entire formula but rather in the individual relation values.
Reference: [DK94] <author> Jeffrey Douglas and Richard A. K emmerer. Aslantest: </author> <title> a symbolic ex ecution tool for testing Aslan formal specifi cations. </title> <booktitle> Proc. of Inter national Symposium on Softwar e T esting and Analysis , Seattle, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: F or this reason, enumerative analysis of software specifi cations has been regarded as infeasible. A specification can be ex ecuted if limited to a constructive subset of the language (see [LL91, ELL94] for VDM, [V al91] for Z, and <ref> [DK94] </ref>). This deprives the specifi er of conjunc - tionarguably the most useful specifi cation constructbut not necessarily non-determinism [LL91].
Reference: [ELL94] <author> Rene Elmstrom, Peter Gorm Larsen and Poul Bogh Lassen. </author> <title> The IF AD VDM-SL toolbo x: a practical approach to formal specifi cations. </title> <journal> ACM SIGPL AN Notices, </journal> <volume> Vol. 29, No. 9, </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: F or this reason, enumerative analysis of software specifi cations has been regarded as infeasible. A specification can be ex ecuted if limited to a constructive subset of the language (see <ref> [LL91, ELL94] </ref> for VDM, [V al91] for Z, and [DK94]). This deprives the specifi er of conjunc - tionarguably the most useful specifi cation constructbut not necessarily non-determinism [LL91].
Reference: [ES93] <author> E. Allen Emerson and A. P rasad Sistla. </author> <title> Symmetry and Model Checking. </title> <booktitle> Proc. F ifth Inter national Conference on Computer Aided V erification, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: But as far as we know, no other method uses symmetry in the assignable values themselves. Isomorph elimination is related to a number of model checking techniques that exploit symmetry in the transition relation <ref> [Sta91, CFJ93, ES93, ID93] </ref>. The symmetries identi - fied by our method, in contrast, are not in the entire formula but rather in the individual relation values.
Reference: [ES94] <author> Marcin Engel and Jens Ulrik Skakkebaek. </author> <title> Applying PVS to Z . T echnical R eport ID/DTU ME 3/1, </title> <institution> ProCos Project, Department of Computer Science, Technical University of Denmark, L yngby, Denmark. </institution>
Reference-contexts: This deprives the specifi er of conjunc - tionarguably the most useful specifi cation constructbut not necessarily non-determinism [LL91]. Aside from our method, theorem proving is the only approach that can accommodate implicit specifications (see [GGH90] for Larch, [B+94] for VDM, <ref> [Jon92, BG94, ES94] </ref> for Z, and [BH94] for scope # cases Claim1 Claim2 2 576 80 (7.2) 144 (4.0) 4 6.6e8 85118 (7699) 580433 (1129) Table 2: Reductions for the elaborated example of Figure 5 (below).
Reference: [GGH90] <author> Stephen Garland, John Guttag and James Horning. </author> <title> Debugging Larch Shared Language Specifi cations. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol 16, No. 9, </volume> <year> 1990. </year>
Reference-contexts: This deprives the specifi er of conjunc - tionarguably the most useful specifi cation constructbut not necessarily non-determinism [LL91]. Aside from our method, theorem proving is the only approach that can accommodate implicit specifications (see <ref> [GGH90] </ref> for Larch, [B+94] for VDM, [Jon92, BG94, ES94] for Z, and [BH94] for scope # cases Claim1 Claim2 2 576 80 (7.2) 144 (4.0) 4 6.6e8 85118 (7699) 580433 (1129) Table 2: Reductions for the elaborated example of Figure 5 (below).
Reference: [Hay93] <author> Ian Hayes. </author> <title> Specification Case Studies . Second ed. </title> <publisher> Prentice Hall International (UK) Ltd, </publisher> <year> 1993. </year>
Reference-contexts: Since the exploitation of symmetry has little runtime over head, the reduction in cases translates into a corresponding reduction in execution time. Our specifi cation language is a relational subset of Z, an increasing popular notation for formalizing software designs and requirements <ref> [Spi92, Hay93] </ref>. Properties are expressed in the same language; checking that a design has a given proper - ty amounts to determining the validity of a relational formula. The method has been implemented in a practical tool, the Nitpick specifi cation checker.
Reference: [Hol91] <author> Gerard J. Holtzmann. </author> <title> Design and V alidation of Computer Protocols. </title> <publisher> Prentice Hall Software Series, Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: We are investigating enumerative analyses for checking software specifi cations. Unfortunately, model checking meth - ods that have been remarkably successful in verifying hard - ware designs and protocols (such as <ref> [BC+92, Kur94, Hol91] </ref>) have no obvious application to software. In software designs, state explosion arises more from the data structures of a single machines state than from the product of the control states of several machines, making it hard to analyze even a simple sequential operation.
Reference: [ID93] <author> C. Ip and D. Dill. </author> <title> Better verifi cation through sym - metry. </title> <booktitle> Proc. 11th Inter national Symposium on Computer Har dware Description L anguages and their Applications, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: But as far as we know, no other method uses symmetry in the assignable values themselves. Isomorph elimination is related to a number of model checking techniques that exploit symmetry in the transition relation <ref> [Sta91, CFJ93, ES93, ID93] </ref>. The symmetries identi - fied by our method, in contrast, are not in the entire formula but rather in the individual relation values.
Reference: [Jac94] <author> Daniel Jackson. </author> <title> Abstract model checking of infinite specifications. </title> <booktitle> Proc. F ormal Methods Europe , Barcelona, </booktitle> <address> Spain, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: For checking safety-critical algorithms, where proof is needed to give perfect assurance, theorem proving will remain indispensable, but its cost rules out its use for everyday specification work. Abstraction can reduce a huge (and even infi nite) space of interpretations to a relatively small number of cases <ref> [Jac94] </ref>, but it has limited applicability and demands ingenuity from the specifier in the choice of abstraction. Techniques for fi nding satisfying assignments of formulae have been investigated before. The FINDER tool [Sla94], for example, uses backtracking to fi nd models of a logic with functions and equality.
Reference: [Jac96] <author> Daniel Jackson. Nitpick: </author> <title> A Checkable Specification Language. Proc.Workshop on F ormal Methods in Software Practice, </title> <address> San Diego, CA, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: The method has been implemented in a practical tool, the Nitpick specifi cation checker. An example of the application of Nitpick to a realistic problem is given, along with the rationale underlying its design, in [JD96]. The principles guiding the form of the specification language are discussed in <ref> [Jac96] </ref>. This paper explains the isomorph elimination method and demonstrates its soundness. Authors postal address: School of Computer Science, Carnegie Mellon University , 5000 F orbes A ve., P ittsburgh, P A 15213. Email: dnj@cs.cmu.edu; http://www .cs.cmu.edu/~dnj.
Reference: [JD96] <author> Daniel Jackson and Craig A. Damon. </author> <title> Elements of Style: Analyzing a Software Design F eature with a Counterexample Detector . Proc. </title> <booktitle> Inter national Symposium on Softwar e Testing and Analysis . San Diego, </booktitle> <address> CA, </address> <year> 1996. </year>
Reference-contexts: The method has been implemented in a practical tool, the Nitpick specifi cation checker. An example of the application of Nitpick to a realistic problem is given, along with the rationale underlying its design, in <ref> [JD96] </ref>. The principles guiding the form of the specification language are discussed in [Jac96]. This paper explains the isomorph elimination method and demonstrates its soundness. Authors postal address: School of Computer Science, Carnegie Mellon University , 5000 F orbes A ve., P ittsburgh, P A 15213. Email: dnj@cs.cmu.edu; http://www .cs.cmu.edu/~dnj.
Reference: [Jon92] <author> R.B. Jones. </author> <title> ICL P roofPower. </title> <journal> British Computer Society Formal Aspects of Computer Science, </journal> <volume> Series 3, 1(1), </volume> <year> 1992, </year> <pages> pp. 1013. </pages>
Reference-contexts: This deprives the specifi er of conjunc - tionarguably the most useful specifi cation constructbut not necessarily non-determinism [LL91]. Aside from our method, theorem proving is the only approach that can accommodate implicit specifications (see [GGH90] for Larch, [B+94] for VDM, <ref> [Jon92, BG94, ES94] </ref> for Z, and [BH94] for scope # cases Claim1 Claim2 2 576 80 (7.2) 144 (4.0) 4 6.6e8 85118 (7699) 580433 (1129) Table 2: Reductions for the elaborated example of Figure 5 (below).
Reference: [Kur86] <author> R.P. K urshan. </author> <title> Testing Containment of Omega-Regular L anguages. </title> <institution> A T&T Bell Laboratories, </institution> <note> Technical Report 1121-861010-33 (1986). </note>
Reference: [Kur94] <author> R.P. K urshan. </author> <title> Computer-Aided V erification of Coordinating Processes:The A utomata-Theoretic Approach. </title> <publisher> Princeton University P ress, P rinceton, </publisher> <address> New Jersey, </address> <year> 1994. </year>
Reference-contexts: We are investigating enumerative analyses for checking software specifi cations. Unfortunately, model checking meth - ods that have been remarkably successful in verifying hard - ware designs and protocols (such as <ref> [BC+92, Kur94, Hol91] </ref>) have no obvious application to software. In software designs, state explosion arises more from the data structures of a single machines state than from the product of the control states of several machines, making it hard to analyze even a simple sequential operation.
Reference: [LL91] <author> Peter Gorm Larsen and P oul Bogh Lassen. </author> <title> An ex e-cutable subset of Meta-IV with loose specifi cation. </title> <editor> In S. P rehn, W.J. Toetenel (eds.), VDM91: </editor> <booktitle> Formal Software Development Methods , V ol. 1, Lecture Notes in Computer Science 551, </booktitle> <publisher> Springer -Verlag, </publisher> <year> 1991. </year>
Reference-contexts: F or this reason, enumerative analysis of software specifi cations has been regarded as infeasible. A specification can be ex ecuted if limited to a constructive subset of the language (see <ref> [LL91, ELL94] </ref> for VDM, [V al91] for Z, and [DK94]). This deprives the specifi er of conjunc - tionarguably the most useful specifi cation constructbut not necessarily non-determinism [LL91]. <p> A specification can be ex ecuted if limited to a constructive subset of the language (see [LL91, ELL94] for VDM, [V al91] for Z, and [DK94]). This deprives the specifi er of conjunc - tionarguably the most useful specifi cation constructbut not necessarily non-determinism <ref> [LL91] </ref>.
Reference: [McK81] <author> Brendan D. </author> <title> McKay . P ractical graph isomorphism. </title> <booktitle> Congressus Numerantium 21 (1981), </booktitle> <pages> pp. 499517. </pages>
Reference-contexts: This feature is purely for research; we have yet to come across a claim that runs faster when a reduction is turned off. Generation of canonical relations is delegated to the pub - lic-domain Nauty tool <ref> [McK81, McK94a, McK94b] </ref>. F or efficiency, scalars, sets, functions and domain/range operators are implemented directly (rather than being translated into the relational calculus as the formalization above suggests).
Reference: [McK94a] <author> Brendan D. </author> <title> McKay . Nauty User s Guide , version 1.5. </title> <institution> Computer Science Department, A ustralian National University , GPO Bo x 4, A CT 2601, Australia. </institution>
Reference-contexts: This feature is purely for research; we have yet to come across a claim that runs faster when a reduction is turned off. Generation of canonical relations is delegated to the pub - lic-domain Nauty tool <ref> [McK81, McK94a, McK94b] </ref>. F or efficiency, scalars, sets, functions and domain/range operators are implemented directly (rather than being translated into the relational calculus as the formalization above suggests).
Reference: [McK94b] <author> Brendan D. McKay . Isomorph-free exhaustive gen - eration. </author> <type> Unpublished manuscript. </type> <institution> Computer Science Department, A ustralian National University, </institution> <address> GPO Box 4, ACT 2601, Australia. </address>
Reference-contexts: This feature is purely for research; we have yet to come across a claim that runs faster when a reduction is turned off. Generation of canonical relations is delegated to the pub - lic-domain Nauty tool <ref> [McK81, McK94a, McK94b] </ref>. F or efficiency, scalars, sets, functions and domain/range operators are implemented directly (rather than being translated into the relational calculus as the formalization above suggests).
Reference: [Sla94] <author> John K. Slaney. </author> <title> Finder: Finite Domain Enumerator, System Description. </title> <booktitle> Proc. 12th Inter national Conference on A utomated Deduction , Lecture Notes in Artifi cial Intelligence series, </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1994, </year> <pages> pp. 798801. </pages>
Reference-contexts: Techniques for fi nding satisfying assignments of formulae have been investigated before. The FINDER tool <ref> [Sla94] </ref>, for example, uses backtracking to fi nd models of a logic with functions and equality. Our example can be translated into its input language, albeit somewhat tediously; relational composition is handled by introducing Skolem constants for the exis - tentially quantifi ed variables.
Reference: [Spi92] <author> J.M. Spivey, </author> <title> The Z Notation: A R eference Manual, </title> <publisher> Prentice Hall International, </publisher> <address> Second Edition, </address> <year> 1992. </year>
Reference-contexts: Since the exploitation of symmetry has little runtime over head, the reduction in cases translates into a corresponding reduction in execution time. Our specifi cation language is a relational subset of Z, an increasing popular notation for formalizing software designs and requirements <ref> [Spi92, Hay93] </ref>. Properties are expressed in the same language; checking that a design has a given proper - ty amounts to determining the validity of a relational formula. The method has been implemented in a practical tool, the Nitpick specifi cation checker. <p> Note that incr and inv are just names for formulae, and have no semantic signifi cance: there is no notion of a label on a transition. R elationships between operations can also be cast as simple formulae using further syntactic conventions <ref> [Spi92] </ref>; the formula (incr ; decr) x = x for example, says that decrementing undoes incrementing. Representing operations, invariants and claims all as logical formulae greatly simplifi es both our language and our check - ing tool.
Reference: [SS93] <author> Gunther Schmidt and Thomas Strohlein. </author> <title> Relations and Graphs . EA TCS Monographs in Theoretical Computer Science, </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: O, J and L are constants denoting the empty , identity and universal relations respectively ; e~ (e ) is the transpose (complement) of e. The formula func (e) is true when e denotes a function.* Although purely relational, this language can express familiar notions of sets and scalars <ref> [SS93] </ref>.
Reference: [Sta91] <author> P. Starke. </author> <title> R eachability analysis of P etri nets using symmetry. Syst. Anal. Model. </title> <journal> Simul. </journal> , <volume> 8 (4/5), </volume> <pages> pp. 293303, </pages> <year> 1991. </year>
Reference-contexts: But as far as we know, no other method uses symmetry in the assignable values themselves. Isomorph elimination is related to a number of model checking techniques that exploit symmetry in the transition relation <ref> [Sta91, CFJ93, ES93, ID93] </ref>. The symmetries identi - fied by our method, in contrast, are not in the entire formula but rather in the individual relation values.
Reference: [Val91] <author> Samuel H. V alentine. </author> <title> Z -, an ex ecutable subset of Z. In J.E. Nicholls (ed.), Z User W orkshop, </title> <address> York, </address> <year> 1991. </year> <booktitle> Springer -Verlag W orkshops in Computing, </booktitle> <year> 1992. </year>
Reference: [WO80] <author> E.J. Weyuker and T .J. </author> <title> Ostrand. Theories of pro - gram testing and the application of revealing sub - domains. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> vol. SE-6, </volume> <pages> pp. 236245, </pages> <month> May </month> <year> 1980. </year>
Reference-contexts: Consequently , the symmetries need not be provided by the specifier, and, because each type contributes an exponential factor, our method tends to give much larger reductions. The equivalence classes into which our method partitions the formulas interpretations are revealing subdomains in the jargon of testing theory <ref> [WO80] </ref>. Our method might have some application in testing, although resource boundaries introduce discontinuities in behaviour where many bugs reside. Consequently , an enumeration that is confi ned to a small scope is unlikely to expose most errors. Isomorph elimination is only one reduction mechanism in Nitpicks repertoire.
References-found: 30

