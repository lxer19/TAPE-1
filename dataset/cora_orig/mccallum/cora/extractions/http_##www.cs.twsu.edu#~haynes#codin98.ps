URL: http://www.cs.twsu.edu/~haynes/codin98.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: haynes@cs.twsu.edu  
Phone: Phone: (316) 978-3925  
Title: Coding Segments Inside and Outside the Chromosome  
Author: Thomas Haynes 
Address: Wichita, KS 67260  
Affiliation: Department of Computer Science Wichita State University  
Abstract: Coding segments are those sub-segments of the chromosome which contribute either positively or negatively to the fitness evaluation of the chromosome. We extract coding segments from chromosomes and we investigate the sharing of coding segments both inside and outside of the chromosome. We find duplication of coding segments inside the chromosomes provides a back-up mechanism for the search heuristics. We further find local search in a collective memory of coding segments outside of the chromosome, collective adaptation, enables the search heuristic to represent partial solutions which are larger than realistic chromosomes lengths and to express the solution outside of the chromosome. 
Abstract-found: 1
Intro-found: 1
Reference: [ Alberts et al., 1989 ] <author> Alberts, B.; Bray, D.; Lewis, J.; Raff, M.; Roberts, K.; and Watson, J. D. </author> <year> 1989. </year> <title> Molecular Biology of the Cell. </title> <publisher> Garland Publishing, Inc. </publisher>
Reference-contexts: The non-coding sequences might also act as a library for adaptation. During RNA splicing the non-coding sequences are stripped, producing a smaller RNA molecule. As the gene can be spliced in a variety of ways, the non-coding sequence for one mRNA could be a coding sequence for another <ref> [ Alberts et al., 1989 ] </ref> . <p> Each candidate clique is a building block from which "better" chromosomes can be constructed. This paring down of the chromosome is similar to the RNA splicing in that non-coding segments are stripped out of the RNA transcript from DNA <ref> [ Alberts et al., 1989 ] </ref> . The evaluation function maps chromosomes from GP space to clique set space, i.e., genotype to phenotype. Repair maps the phenotype back into a genotype.
Reference: [ Altenberg, 1994 ] <author> Altenberg, L. </author> <year> 1994. </year> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kinnear, Jr., K. E., ed., </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press. </publisher> <pages> chapter 3, 47-74. </pages>
Reference-contexts: Altenberg believes the Schema Theorem can not account for the proliferation of copies of subtrees and he applies Price's Theorem and introduces a "constructional fitness" to account for such proliferation <ref> [ Altenberg, 1994 ] </ref> . The key to understanding constructional fitness is in his redefinition of a building block: a building block is not necessarily highly fit, instead it is a block which has a higher probability of increasing fitness in a child chromosome. <p> These subtrees are prevalent due to their contribution to the fitness of the chromosomes in which they appear. Altenberg believes duplications appear inside GP chromosomes due to two selection forces adding blocks of code to the population <ref> [ Altenberg, 1994 ] </ref> . The genetic operators spread a block to different chromosomes, and an emergent selection pressure causes the formation of duplication within a chromosome. The duplication is a result of the fitness of the block being replicated.
Reference: [ Angeline, 1994 ] <author> Angeline, P. J. </author> <year> 1994. </year> <title> Genetic programming and emergent intelligence. </title> <editor> In Kinnear, Jr., K. E., ed., </editor> <booktitle> Advances in Genetic Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher> <pages> 75-97. </pages>
Reference-contexts: The duplication is a result of the fitness of the block being replicated. Angeline reports while there is redundancy in chromosomes, the benefit of these semantically extraneous components is in the prevention of destructive crossover <ref> [ Angeline, 1994 ] </ref> . He highlights a difference between GAs and GPs with regards to non-coding segments: in GAs they are added by design and in GPs they evolve naturally. Nordin investigates the dynamics of non-coding segments in GP evolution [ Nordin, 1996 ] . <p> The tree could be pruned, leaving only the middle subtree. The IFTE (IfThenElse) function can be used to add a duplicate of the coding segment <ref> [ Angeline, 1994 ] </ref> , as shown in Figure 13 (b). duplicate of the coding segment has been added. 4 Collective Adaptation Collective memory is the body of common knowledge that a group shares.
Reference: [ Bui & Eppley, 1995 ] <author> Bui, T. N., and Eppley, P. H. </author> <year> 1995. </year> <title> A hybrid genetic algorithm for the maximum clique problem. </title> <editor> In Eshelman, L., ed., </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> 478-484. </pages> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Corkill, 1989 ] <author> Corkill, D. D. </author> <year> 1989. </year> <title> Design alternatives for parallel and distributed blackboard systems. </title> <editor> In Jagannathan, V.; Dodhiawala, R.; and Baum, L. S., eds., </editor> <title> Blackboard Architectures and Applications. </title> <publisher> Academic Press. </publisher> <pages> 99-136. </pages> <booktitle> (Presented at the Second Workshop on Blackboard Systems, AAAI-88, </booktitle> <address> St. Paul, Minnesota, </address> <month> August 24, </month> <year> 1988.). </year>
Reference-contexts: Common knowledge is knowledge which is either learned through interaction with the environment or explicitly communicated from one individual to all others in the group. The collective memory can itself be either centralized or distributed (for examples of centralized and distributed blackboard architectures see <ref> [ Corkill, 1989 ] </ref> and [ Decker et al., 1993 ] ). Garland and Alterman present a distributed collective memory in their research: agents manipulate their own slice of the collective memory [ Garland & Alterman, 1996 ] .
Reference: [ Davis et al., 1993 ] <author> Davis, L.; Orvosh, D.; Cox, A.; and Qiu, Y. </author> <year> 1993. </year> <title> A genetic algorithm for survivable network design. </title> <editor> In Forrest, S., ed., </editor> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <pages> 408-415. </pages> <address> San Mateo, CA: </address> <publisher> Morgan Kaufman. </publisher> [ <editor> de Souza & Talukdar, 1991 ] de Souza, P. S., and Talukdar, S. N. </editor> <year> 1991. </year> <title> Genetic algorithms in asynchronous teams. </title> <editor> In Belew, R., and Booker, L., eds., </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> 392-397. </pages> <address> San Mateo, CA: </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: With the BCD example, we could use modulo arithmetic to force all combinations to be legal. If we then take the phenotype and map it back into the genotype, we have repaired the chromosome <ref> [ Davis et al., 1993; Orvosh & Davis, 1993 ] </ref> . Furthermore, repair rate denotes the percentage of repaired chromosomes that are returned into the population, overwriting the original.
Reference: [ Decker et al., 1993 ] <author> Decker, K. S.; Garvey, A. J.; Humphrey, M. A.; and Lesser, V. R. </author> <year> 1993. </year> <title> Control heuristics for scheduling in a parallel blackboard system. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence 7(2) </journal> <pages> 243-264. </pages>
Reference-contexts: Common knowledge is knowledge which is either learned through interaction with the environment or explicitly communicated from one individual to all others in the group. The collective memory can itself be either centralized or distributed (for examples of centralized and distributed blackboard architectures see [ Corkill, 1989 ] and <ref> [ Decker et al., 1993 ] </ref> ). Garland and Alterman present a distributed collective memory in their research: agents manipulate their own slice of the collective memory [ Garland & Alterman, 1996 ] .
Reference: [ Falkenauer, 1995 ] <author> Falkenauer, E. </author> <year> 1995. </year> <title> Solving equal piles with the grouping genetic algorithm. </title> <editor> In Es-helman, L., ed., </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> 492-497. </pages> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher> <pages> 26 </pages>
Reference-contexts: ExtCon "separates" two candidate maximal cliques, while IntCon "joins" two candidate cliques to create a larger candidate 4 . For the GA encoding, we fix a maximum number of positions, have a vertex encoding, and adopt a grouping GA <ref> [ Falkenauer, 1995 ] </ref> to allow for a variable number of candidate cliques in a chromosome. We allow a grouping marker to appear with some probability p m (set to 0.1 for all experiments) during both the initial random generation of chromosomes and mutation. <p> The GA encoding of Bui and Eppley could not maintain several candidate cliques in a single chromosome. Soule and Foster utilize a grouping GA <ref> [ Falkenauer, 1995 ] </ref> to maintain multiple candidate cliques in the chromosome. They fix the number of initial groups in a chromosome to be initially 30 and slowly reduce it to 4. <p> In this section, we explore the general applicability of these methods on the FC family of graphs. The FC graphs were constructed to provide a range of difficulty for search heuristics employing collective adaptation. We also turn our attention from a GP to a grouping GA <ref> [ Falkenauer, 1995 ] </ref> . If we make the grouping GA adaptive, i.e., it evolves the number of groups present in the chromosome, then we can represent variable length partial solutions in the chromosome. <p> If we vary the representation used in the chromosome, then the clique domain does satisfy the necessary criteria to be a Royal Road function for both GP and a grouping GA <ref> [ Falkenauer, 1995 ] </ref> . Royal Roads are a tool GA researchers can use to both investigate the formation of building blocks and test GAs against other paradigms [ Mitchell, Forrest, & Holland, 1992 ] .
Reference: [ Futuyma, 1986 ] <author> Futuyma, D. J. </author> <year> 1986. </year> <title> Evolutionary Biology. </title> <address> Sunderland, MA: </address> <publisher> Sinauer Associate. </publisher>
Reference-contexts: We also show that this method can be applied to other domains. 6 3.1 Non-coding segments Non-coding segments model the intragenic regions reported in the biological literature and are the intron segments seen in the GA and GP literature. They account for a large fraction of the DNA <ref> [ Futuyma, 1986 ] </ref> and are believed to be backup material for the coding segments. For example, the frog Xenopus laevis has 450 copies of the gene codings for 18S and 28S rRNA and 24,000 copies of the gene for 5S rRNA [ Futuyma, 1986 ] . <p> account for a large fraction of the DNA <ref> [ Futuyma, 1986 ] </ref> and are believed to be backup material for the coding segments. For example, the frog Xenopus laevis has 450 copies of the gene codings for 18S and 28S rRNA and 24,000 copies of the gene for 5S rRNA [ Futuyma, 1986 ] . The non-coding sequences might also act as a library for adaptation. During RNA splicing the non-coding sequences are stripped, producing a smaller RNA molecule.
Reference: [ Garey & Johnson, 1979 ] <author> Garey, M. R., and Johnson, D. S. </author> <year> 1979. </year> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <address> San Francisco, CA: </address> <publisher> W.H. Freeman and Co. </publisher>
Reference-contexts: While the results we present are specific to the clique domain, our results hold in general: the theory of NP-completeness states there exists a polynomial time mapping from one NP-complete problem to any other. Two of the basic NP-complete problems we can consider while detecting cliques in a graph <ref> [ Garey & Johnson, 1979 ] </ref> (pages 193-194): Covering by cliques: Given that G = (V; E) and a positive integer K E, are there are k K subsets V 1 ; V 2 ; : : : ; V k of V such that each V i induces a complete <p> Both finding the maximum and all cliques in a graph are NP-complete <ref> [ Garey & Johnson, 1979 ] </ref> . A brute force algorithm is to build candidate cliques in increasing levels of size, k. Due to NP-completeness, this algorithm is not guaranteed to be able to find a solution. A viable search heuristic is to detect cliques from the Passive-Active collective memory.
Reference: [ Garland & Alterman, 1996 ] <author> Garland, A., and Alterman, R. </author> <year> 1996. </year> <title> Multiagent learning through collective memory. </title> <editor> In Sen, S., ed., </editor> <booktitle> Working Notes for the AAAI Symposium on Adaptation, Co-evolution and Learning in Multiagent Systems, </booktitle> <pages> 33-38. </pages>
Reference-contexts: Garland and Alterman present a distributed collective memory in their research: agents manipulate their own slice of the collective memory <ref> [ Garland & Alterman, 1996 ] </ref> . Search agents retrieve partial solutions from the problem space and store that knowledge in an collective memory [ Haynes, 1997b ] . They may only communicate with other agents via the collective memory. They may not delete partial solutions from the collective memory.
Reference: [ Goldberg, 1989 ] <author> Goldberg, D. E. </author> <year> 1989. </year> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: They are integral to the schema theorem, which defines how the implicit parallel search of a GA "builds" better solutions over time <ref> [ Holland, 1975; Goldberg, 1989 ] </ref> . Genetic programming (GP) is an off-shoot of GA and the initial "basic theory" describing the operation of GP was borrowed from the GA Schema Theorem [ Koza, 1992 ] . <p> GA chromosomes are typically of fixed length. With a string of length l, and a building block of defining length ffi, any crossover operation has a probability P l = l 1 of destroying a building block <ref> [ Goldberg, 1989 ] </ref> . <p> We use a maximum number of generations of 256, population size of 64, and linear scaling, with the maximum expected offspring being 2.0 <ref> [ Goldberg, 1989 ] </ref> . With the given chromosome length, we can not find all of the clique covers for all of the graphs.
Reference: [ Haynes, Schoenefeld, & Wainwright, 1996 ] <author> Haynes, T.; Schoenefeld, D.; and Wainwright, R. </author> <year> 1996. </year> <title> Type inheritance in strongly typed genetic programming. </title> <editor> In Kinnear, Jr., K. E., and Angeline, P. J., eds., </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <publisher> MIT Press. </publisher> <address> chapter 18. </address>
Reference-contexts: duplicate vertices; #3 (subtree C) is not completely connected; #5 (no corresponding subtree) contains no vertices; and, #6 (subtree E) is subsumed by #2 (subtree B). 3 And for max clique, the goal is to discover the maximal maximal clique. 4 Strong typing [ Montana, 1995 ] and type inheritance <ref> [ Haynes, Schoenefeld, & Wainwright, 1996 ] </ref> are used to ensure that the parent of an ExtCon node is either the root or another ExtCon node. 5 2.1 Prior Encodings Various approaches have been taken within the GA community for clique detection [ Bui & Eppley, 1995; Haynes, 1996; Soule, Foster,
Reference: [ Haynes, 1996 ] <author> Haynes, T. </author> <year> 1996. </year> <title> Duplication of coding segments in genetic programming. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: is such that we can employ the same algorithms for duplication of coding segments and gathering coding segments into the collective memory. 5.1 FC Family of Graphs The properties which make the clique domain ideally suited as a Royal Road function for genetic programming (GP) have been independently reported in <ref> [ Haynes, 1996 ] </ref> and [ Soule, Foster, & Dickinson, 1996 ] . However, it has been shown that the clique domain does not serve as a Royal Road function for binary encoded GAs [ Soule, Foster, & Dickinson, 1996 ] .
Reference: [ Haynes, 1997a ] <author> Haynes, T. </author> <year> 1997a. </year> <title> Augmenting collective adaptation with a simple process agent. </title> <editor> In Sen, S., ed., </editor> <booktitle> AAAI Workshop on Multiagent Learning. </booktitle>
Reference: [ Haynes, 1997b ] <author> Haynes, T. </author> <year> 1997b. </year> <title> Collective memory search. </title> <booktitle> In Proceedings of the 1997 ACM Symposium on Applied Computing. </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: Garland and Alterman present a distributed collective memory in their research: agents manipulate their own slice of the collective memory [ Garland & Alterman, 1996 ] . Search agents retrieve partial solutions from the problem space and store that knowledge in an collective memory <ref> [ Haynes, 1997b ] </ref> . They may only communicate with other agents via the collective memory. They may not delete partial solutions from the collective memory. Process agents search the partial solutions stored in the collective memory.
Reference: [ Haynes, 1997c ] <author> Haynes, T. </author> <year> 1997c. </year> <title> On-line adaptation of search via knowledge reuse. </title> <editor> In Koza, J. R.; Deb, K.; Dorigo, M.; Fogel, D. B.; Garzon, M.; Iba, H.; and Riolo, R. L., eds., </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> 156-161. </pages>
Reference-contexts: At the same time, the knowledge gathered by both the search and process agents can be transfered back into the search agents <ref> [ Haynes, 1997c ] </ref> . This transfer allows the search agents to change which local neighborhood they are searching; if they had become stuck at a local optimum, then they can examine a new neighborhood [ Haynes, 1998 ] .
Reference: [ Haynes, 1998 ] <author> Haynes, T. D. </author> <year> 1998. </year> <title> Collective Adaptation: The Sharing of Building Blocks. </title> <type> Ph.D. Dissertation, </type> <institution> The University of Tulsa. </institution>
Reference-contexts: This transfer allows the search agents to change which local neighborhood they are searching; if they had become stuck at a local optimum, then they can examine a new neighborhood <ref> [ Haynes, 1998 ] </ref> . The interactions of both the process and search agents with the collective memory form two orthogonal dimensions of access. Both dimensions can take on one of two discrete values: passive and active. <p> If the partial solution is stored in a format suited for the collective memory, then the transfer of partial solution process 6 While we consider only GP and GA in this research, we have also examined collective adaptation in the context of random search, hill climbing, and simulated annealing <ref> [ Haynes, 1998 ] </ref> 7 Which is not always possible. 14 can involve a domain dependent translation from the collective memory format to a subtree, which would then be grafted onto the chromosome. <p> All points represent the average of 10 runs. R10Q7 versus PACM-R0. In Figure 15 of Section 4.3, we saw that this was not case. As the complexity of the problem increases, the effectiveness of underlying search engine influences the effectiveness of the collective memory search <ref> [ Haynes, 1998 ] </ref> . <p> With clique detection, the space of partial solutions can become too large for building blocks to be effectively combined <ref> [ Haynes, 1998 ] </ref> . that all vertices in a clique were adjacent. <p> However, we can determine all of the max cliques for all of the graphs. Finally, it is often the case the solution can not be generated within the given chromosomal structure; a collective memory must be used to store and integrate the solution <ref> [ Haynes, 1998 ] </ref> . 5.3.1 Duplication of Coding Segments Even though a tree format is not used, coding and non-coding segments can be determined, which will allow for repair via duplication of coding segments.
Reference: [ Hogg & Williams, 1993 ] <author> Hogg, T., and Williams, C. P. </author> <year> 1993. </year> <title> Solving the really hard problems with cooperative search. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> 231-236. </pages> <address> Menlo Park, CA: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Blackboards have been used by an agent society to solve instances of the graph coloring problem <ref> [ Hogg & Williams, 1993; Hogg & Williams, 1994 ] </ref> . In contrast to our system, information is selected via a triggering mechanism and each agent is executing the same search heuristic.
Reference: [ Hogg & Williams, 1994 ] <author> Hogg, T., and Williams, C. P. </author> <year> 1994. </year> <title> Expected gains from parallelizing constraint solving for hard problems. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> 331-336. </pages> <address> Menlo Park, CA: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Blackboards have been used by an agent society to solve instances of the graph coloring problem <ref> [ Hogg & Williams, 1993; Hogg & Williams, 1994 ] </ref> . In contrast to our system, information is selected via a triggering mechanism and each agent is executing the same search heuristic. <p> They determined while the exchange of information was useful, if there are a large number of candidate solution, few of which can be extended to full solutions, then there is a decrease in the ability of the heuristics to effectively prune unproductive branches <ref> [ Hogg & Williams, 1994 ] </ref> . 4.2 Extracting Partial Solutions from the Chromosomes The transfer of coding segments, i.e., partial solutions, from the chromosomes to the collective memory entails extracting phenotypical knowledge from the chromosomes.
Reference: [ Holland, 1975 ] <author> Holland, J. H. </author> <year> 1975. </year> <booktitle> Adpatation in Natural and Artificial Systems. </booktitle> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press. </publisher>
Reference-contexts: They are integral to the schema theorem, which defines how the implicit parallel search of a GA "builds" better solutions over time <ref> [ Holland, 1975; Goldberg, 1989 ] </ref> . Genetic programming (GP) is an off-shoot of GA and the initial "basic theory" describing the operation of GP was borrowed from the GA Schema Theorem [ Koza, 1992 ] .
Reference: [ Johnson & Trick, 1996 ] <editor> Johnson, D. S., and Trick, M. A., eds. </editor> <year> 1996. </year> <title> Cliques, Coloring, and Satisfiability, </title> <booktitle> volume 26 of DIMACS: Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <publisher> American Mathematical Society. </publisher>
Reference: [ Koza, 1992 ] <author> Koza, J. R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Genetic programming (GP) is an off-shoot of GA and the initial "basic theory" describing the operation of GP was borrowed from the GA Schema Theorem <ref> [ Koza, 1992 ] </ref> . While GP utilizes the basic GA algorithm and also has the concepts of crossover and mutation, the canonical GP chromosome representation is a parse tree (S-expression) and the alphabet is n-ary. <p> While the detection of cliques in a graph readily lends itself to the study of building blocks in the GP chromosome, our results are not domain dependent. Analysis shows that this method can work for any GP domain. Simple editing rules for GP chromosomes have been identified <ref> [ Koza, 1992 ] </ref> . The methods used by compiler writers to optimize code are also applicable to "optimizing" the GP chromosome. An example of the repair and duplication process for other domains is shown in Figure 13. The parse tree to be evaluated is shown in Figure 13 (a).
Reference: [ Levenick, 1991 ] <author> Levenick, J. R. </author> <year> 1991. </year> <title> Inserting introns improves genetic algorithm success rate: Taking a cue from biology. </title> <editor> In Belew, R., and Booker, L., eds., </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> 123-127. </pages> <address> San Mateo, CA: </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: The addition of non-coding segments to chromosomes separates building blocks and protects them from being sliced by crossover <ref> [ Levenick, 1991 ] </ref> . GA chromosomes are typically of fixed length. With a string of length l, and a building block of defining length ffi, any crossover operation has a probability P l = l 1 of destroying a building block [ Goldberg, 1989 ] .
Reference: [ Mitchell, Forrest, & Holland, 1992 ] <author> Mitchell, M.; Forrest, S.; and Holland, J. H. </author> <year> 1992. </year> <title> The royal road for genetic algorithms: Fitness landscapes and GA performance. In Toward a Practice of Autonomous Systems: </title> <booktitle> Proceedings of the First European Conference on Artificial Life, </booktitle> <pages> 245-254. </pages> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher> <pages> 27 </pages>
Reference-contexts: Royal Roads are a tool GA researchers can use to both investigate the formation of building blocks and test GAs against other paradigms <ref> [ Mitchell, Forrest, & Holland, 1992 ] </ref> . The GA researcher can utilize a Royal Road function to carefully craft a fitness landscape, which will allow for controlled experiments to test properties of the GA and other search heuristics. <p> We can illustrate that the combination of the low cardinality candidate cliques into higher cardinality candidate cliques meets the characteristics of a Royal Road function <ref> [ Mitchell, Forrest, & Holland, 1992 ] </ref> : 21 systems have an underlying GP engine with duplication of coding segments repair of chromosomes with a 10% return rate and 7 duplicates) : 1) Active-Active collective memory search (AACM-R10Q7), 2) Passive-Active collective memory search with an underlying GP engine with no repair <p> To facilitate hill climbers, we labeled the vertices such 11 An irony of Royal Road functions is while they are designed to facilitate the hierarchical solving of problems via building blocks, in practice they hinder the integration of building blocks, e.g., hitchhiking <ref> [ Mitchell, Forrest, & Holland, 1992 ] </ref> . With clique detection, the space of partial solutions can become too large for building blocks to be effectively combined [ Haynes, 1998 ] . that all vertices in a clique were adjacent.
Reference: [ Montana, 1995 ] <author> Montana, D. J. </author> <year> 1995. </year> <title> Strongly typed genetic programming. </title> <booktitle> Evolutionary Computation 3(2) </booktitle> <pages> 199-230. </pages>
Reference-contexts: of the rules: #1 (subtree A) contains duplicate vertices; #3 (subtree C) is not completely connected; #5 (no corresponding subtree) contains no vertices; and, #6 (subtree E) is subsumed by #2 (subtree B). 3 And for max clique, the goal is to discover the maximal maximal clique. 4 Strong typing <ref> [ Montana, 1995 ] </ref> and type inheritance [ Haynes, Schoenefeld, & Wainwright, 1996 ] are used to ensure that the parent of an ExtCon node is either the root or another ExtCon node. 5 2.1 Prior Encodings Various approaches have been taken within the GA community for clique detection [ Bui
Reference: [ Nordin, 1994 ] <author> Nordin, P. </author> <year> 1994. </year> <title> A compiling genetic programming system that directly manipulates the machine code. </title> <editor> In Kinnear, Jr., K. E., ed., </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: Nordin investigates the dynamics of non-coding segments in GP evolution [ Nordin, 1996 ] . His chromosomes are comprised of linear genomes which are 32 bit strings and are binary code for a SUN-4 <ref> [ Nordin, 1994 ] </ref> . Non-coding bits are defined to be those that when replaced by a NOP instruction do not change the semantics or phenotype of the chromosome. Using this capability, Nordin investigated the effects of non-coding segments on destructive crossover.
Reference: [ Nordin, 1996 ] <author> Nordin, P. </author> <year> 1996. </year> <title> Explictly defined introns and destructive crossover in genetic programming. </title> <editor> In Angeline, P., and Kinnear, Jr., K. E., eds., </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: He highlights a difference between GAs and GPs with regards to non-coding segments: in GAs they are added by design and in GPs they evolve naturally. Nordin investigates the dynamics of non-coding segments in GP evolution <ref> [ Nordin, 1996 ] </ref> . His chromosomes are comprised of linear genomes which are 32 bit strings and are binary code for a SUN-4 [ Nordin, 1994 ] .
Reference: [ O'Reilly & Oppacher, 1995 ] <author> O'Reilly, U.-M., and Oppacher, F. </author> <year> 1995. </year> <title> The troubling aspects of a building block hypothesis for genetic programming. </title> <editor> In Whitley, L. D., and Vose, M. D., eds., </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> 73-88. </pages> <address> Estes Park, Colorado, USA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Also, are the following schemata equivalent: f (+ 9 6)g f (+ 6 9)g? The inability of the Schema Theorem to account for the multiple appearance of subtrees, i.e., building blocks, and their hierarchical recombination has lead researchers to believe that the Schema Theorem does not hold for GP <ref> [ O'Reilly, 1995; O'Reilly & Oppacher, 1995 ] </ref> . Altenberg believes the Schema Theorem can not account for the proliferation of copies of subtrees and he applies Price's Theorem and introduces a "constructional fitness" to account for such proliferation [ Altenberg, 1994 ] . <p> One function is used, Union, and the terminal set is the set of vertex labels. Soule et al. point out that the arguments provided by O'Reilly and Oppacher against a GP Schema Theorem fail for this domain <ref> [ O'Reilly & Oppacher, 1995 ] </ref> : subtrees do not interact adversely and subtrees represent hyperplanes of the fitness landscape.
Reference: [ O'Reilly, 1995 ] <author> O'Reilly, U.-M. </author> <year> 1995. </year> <title> An Analysis of Genetic Programming. </title> <type> Ph.D. Dissertation, </type> <institution> Carelton University, </institution> <address> Ottawa, Ontario, Canada. </address>
Reference-contexts: Also, are the following schemata equivalent: f (+ 9 6)g f (+ 6 9)g? The inability of the Schema Theorem to account for the multiple appearance of subtrees, i.e., building blocks, and their hierarchical recombination has lead researchers to believe that the Schema Theorem does not hold for GP <ref> [ O'Reilly, 1995; O'Reilly & Oppacher, 1995 ] </ref> . Altenberg believes the Schema Theorem can not account for the proliferation of copies of subtrees and he applies Price's Theorem and introduces a "constructional fitness" to account for such proliferation [ Altenberg, 1994 ] . <p> Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995; Rosca & Ballard, 1996; Tackett, 1995 ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The difference between GA and GP is more than the fixed versus variable genotype representation.
Reference: [ Orvosh & Davis, 1993 ] <author> Orvosh, D., and Davis, L. </author> <year> 1993. </year> <title> Shall we repair? Genetic algorithms, combinatorial optimization, and feasibility constraints. </title> <editor> In Forrest, S., ed., </editor> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, 650. </booktitle> <address> San Mateo, CA: </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: With the BCD example, we could use modulo arithmetic to force all combinations to be legal. If we then take the phenotype and map it back into the genotype, we have repaired the chromosome <ref> [ Davis et al., 1993; Orvosh & Davis, 1993 ] </ref> . Furthermore, repair rate denotes the percentage of repaired chromosomes that are returned into the population, overwriting the original. <p> The 10 node graph (Figure 5) is used for clique covering. All chromosomes are repaired, and we investigate repair rates (the percentage of repaired chromosomes returned into the population) of 0%, 0.5%, 1.5%, 3%, 5%, and 10%. Repair rates greater than 0.5% (small repair rates are desirable <ref> [ Orvosh & Davis, 1993 ] </ref> ) either degrade the performance or cause premature convergence, see fails for GP. Or perhaps the repair is actually damaging the chromosome instead of fixing it up. <p> This contradicts the earlier findings reported in Orvosh and Davis <ref> [ Orvosh & Davis, 1993 ] </ref> . 3.8 Conclusions We utilize the tree structure of GP chromosomes to conduct experimentation into duplication of coding segments. We find that the duplication of three or more copies of the coding segments significantly speeds up the learning process for the clique covering problem.
Reference: [ Rosca & Ballard, 1995 ] <author> Rosca, J., and Ballard, D. H. </author> <year> 1995. </year> <title> Causality in genetic programming. </title> <editor> In Eshel-man, L., ed., </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> 256-263. </pages> <address> Pittsburgh, PA, USA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The GA is able to detect cliques faster than the GP. This increase could be a result of transforming to a more natural representation, but we believe it is due to the difference in the effectiveness of the two crossover operators. As reported in <ref> [ Rosca & Ballard, 1995 ] </ref> , even with the traditional choice of selecting the crossover point at 90% as a function node and 10% as a terminal node, uniform selection causes the majority of subtree crossover to occur at the bottommost levels of the parse tree, i.e., the terminals and
Reference: [ Rosca & Ballard, 1996 ] <author> Rosca, J. P., and Ballard, D. H. </author> <year> 1996. </year> <title> Discovery of subroutines in genetic programming. </title> <editor> In Angeline, P. J., and Kinnear, Jr., K. E., eds., </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA, USA: </address> <publisher> MIT Press. </publisher> <pages> chapter 9, 177-202. </pages>
Reference-contexts: Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995; Rosca & Ballard, 1996; Tackett, 1995 ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The difference between GA and GP is more than the fixed versus variable genotype representation. <p> Genetic programming researchers have extracted knowledge from chromosomes, building "libraries" or "banks" from which material could be extracted at a later date <ref> [ Tackett, 1995; Rosca & Ballard, 1996 ] </ref> . The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility, i.e., they appear often in chromosomes which are highly fit. <p> The collected subtrees are not allowed to return to the population [ Tackett, 1995 ] . Rosca and Ballard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet <ref> [ Rosca & Ballard, 1996 ] </ref> . Finally, Seront [ Seront, 1995 ] considers a concept library system in which the knowledge gained from solving one problem, P a , is applied to the solution of similar problems.
Reference: [ Seront, 1995 ] <author> Seront, G. </author> <year> 1995. </year> <title> External concepts reuse in genetic programming. </title> <editor> In Siegel, E. V., and Koza, J. R., eds., </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> 94-98. </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA: </address> <publisher> AAAI. </publisher>
Reference-contexts: Rosca and Ballard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet [ Rosca & Ballard, 1996 ] . Finally, Seront <ref> [ Seront, 1995 ] </ref> considers a concept library system in which the knowledge gained from solving one problem, P a , is applied to the solution of similar problems.
Reference: [ Soule & Foster, 1997 ] <author> Soule, T., and Foster, J. A. </author> <year> 1997. </year> <title> Genetic algorithm hardness measures applied to the maximum clique problem. </title> <editor> In Back, T., ed., </editor> <booktitle> Proceedings of the Seventh International Conference on Genetic Algorithms (ICGA97). </booktitle> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Soule and Foster have used to investigate the relation between graph characteristics and GA hardness <ref> [ Soule & Foster, 1997 ] </ref> , i.e., how hard a particular problem is for a GA to solve. The GA encoding of Bui and Eppley could not maintain several candidate cliques in a single chromosome.
Reference: [ Soule, Foster, & Dickinson, 1996 ] <author> Soule, T.; Foster, J. A.; and Dickinson, J. </author> <year> 1996. </year> <title> Using genetic programming to approximate maximum clique. </title> <editor> In Koza, J. R.; Goldberg, D. E.; Fogel, D. B.; and Riolo, R. L., eds., </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Conference. </booktitle> <address> Stanford University, CA, USA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Soule et al. point out that such an approach fails to exploit building blocks. If two labels are connected, but not close together on the chromosome, then the defining length will not be short, resulting in a greater chance of disruption of the building block <ref> [ Soule, Foster, & Dickinson, 1996 ] </ref> . GP has also been used to find the max clique [ Soule, Foster, & Dickinson, 1996 ] . One function is used, Union, and the terminal set is the set of vertex labels. <p> If two labels are connected, but not close together on the chromosome, then the defining length will not be short, resulting in a greater chance of disruption of the building block <ref> [ Soule, Foster, & Dickinson, 1996 ] </ref> . GP has also been used to find the max clique [ Soule, Foster, & Dickinson, 1996 ] . One function is used, Union, and the terminal set is the set of vertex labels. <p> employ the same algorithms for duplication of coding segments and gathering coding segments into the collective memory. 5.1 FC Family of Graphs The properties which make the clique domain ideally suited as a Royal Road function for genetic programming (GP) have been independently reported in [ Haynes, 1996 ] and <ref> [ Soule, Foster, & Dickinson, 1996 ] </ref> . However, it has been shown that the clique domain does not serve as a Royal Road function for binary encoded GAs [ Soule, Foster, & Dickinson, 1996 ] . <p> ideally suited as a Royal Road function for genetic programming (GP) have been independently reported in [ Haynes, 1996 ] and <ref> [ Soule, Foster, & Dickinson, 1996 ] </ref> . However, it has been shown that the clique domain does not serve as a Royal Road function for binary encoded GAs [ Soule, Foster, & Dickinson, 1996 ] . If we vary the representation used in the chromosome, then the clique domain does satisfy the necessary criteria to be a Royal Road function for both GP and a grouping GA [ Falkenauer, 1995 ] .
Reference: [ Tackett, 1993 ] <author> Tackett, W. A. </author> <year> 1993. </year> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Forrest, S., ed., </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> 303-309. </pages> <address> University of Illinois at Urbana-Champaign: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: There can also be a duplication of building blocks in a GP chromosome, whereas there may not be any such duplication in a GA chromosome. Tackett compares the difficulty in researching building blocks between GP and GA: different notations of schemata and a non-binary alphabet <ref> [ Tackett, 1993 ] </ref> . He believes that small subtrees which appear frequently in S-expressions are GP's building blocks. These subtrees are prevalent due to their contribution to the fitness of the chromosomes in which they appear. <p> The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility, i.e., they appear often in chromosomes which are highly fit. They are also conjectured to be the blocks from which the solution is built <ref> [ Tackett, 1993 ] </ref> . However, the extracted knowledge is not processed; the partial solution contained in one subtree is not combined with the partial solution contained in other chromosomes. Tackett's gene-bank gathers statistical information about these subtrees.
Reference: [ Tackett, 1995 ] <author> Tackett, W. A. </author> <year> 1995. </year> <title> Mining the genetic program. </title> <booktitle> IEEE Expert 10(3) </booktitle> <pages> 28-38. </pages>
Reference-contexts: Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995; Rosca & Ballard, 1996; Tackett, 1995 ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The difference between GA and GP is more than the fixed versus variable genotype representation. <p> Genetic programming researchers have extracted knowledge from chromosomes, building "libraries" or "banks" from which material could be extracted at a later date <ref> [ Tackett, 1995; Rosca & Ballard, 1996 ] </ref> . The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility, i.e., they appear often in chromosomes which are highly fit. <p> However, the extracted knowledge is not processed; the partial solution contained in one subtree is not combined with the partial solution contained in other chromosomes. Tackett's gene-bank gathers statistical information about these subtrees. The collected subtrees are not allowed to return to the population <ref> [ Tackett, 1995 ] </ref> . Rosca and Ballard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet [ Rosca & Ballard, 1996 ] .
Reference: [ Talukdar, Pyo, & Giras, 1983 ] <author> Talukdar, S. N.; Pyo, S. S.; and Giras, T. </author> <year> 1983. </year> <title> Asynchronous procedures for parallel processing. </title> <journal> IEEE Transactions on PAS PAS-102(11). </journal>
Reference: [ Wu & Lindsay, 1995 ] <author> Wu, A. S., and Lindsay, R. K. </author> <year> 1995. </year> <title> Empirical studies of the genetic algorithm with non-coding segments. </title> <booktitle> Evolutionary Computation 3(2). </booktitle> <pages> 28 </pages>
Reference-contexts: Adding the non-coding segment to the chromosome's tail reduces the probability of destructive crossover, but does not aid the recombination of building blocks as much as placing the non-coding segments between the building blocks <ref> [ Wu & Lindsay, 1995 ] </ref> . The key to inserting non-coding segments into the GA chromosome is that they reduce the chance of destructive crossover. An "artificial" constraint is that only the coding segments are examined to determine the fitness of a chromosome. <p> Thus the non-coding segment material is meaningless, and selection pressure does not drive it to be backup material. 7 Wu and Lindsay point out that there is a drawback to inserting non-coding segments: they retard the growth of building blocks <ref> [ Wu & Lindsay, 1995 ] </ref> . It is hard for evolution to recombine the building blocks if non-coding segments are there to prevent destructive crossover.
References-found: 40

