URL: http://enws318.eas.asu.edu/pub/rao/jair-kids.ps
Refering-URL: 
Root-URL: 
Email: BIPLAV@ASU.EDU  RAO@ASU.EDU  
Title: Synthesizing Customized Planners from Specifications  
Author: Biplav Srivastava Subbarao Kambhampati 
Date: 96-014  
Note: ASU CSE TR  
Address: Tempe, AZ 85287.  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Abstract: Plan synthesis approaches in AI fall into two categories domain-independent and domain-dependent. The domain-independent approaches are applicable across a variety of domains, but may not be very efficient in any one given domain. The domain-dependent approaches need to be (re)designed for each domain separately, but can be very efficient in the domain for which they are designed. One enticing alternative is to automatically synthesize domain-independent planners given the knowledge about the domain and the theory of planning. In this paper, we investigate the feasibility of using existing automated software synthesis tools to support such synthesis. Specifically, we describe an architecture called CLAY in which the Kestrel Interactive Development System (KIDS) is used in conjunction with a declarative theory of planning, and the declarative control knowledge specific to a given domain, to semi-automatically combine them to derive domain-customized planning code. We discuss what it means to write declarative theory of planning and control knowledge for KIDS, and illustrate it by generating a class of domain-specific planners using state space refinements. Our experiments show that the synthesized planners can have superior performance compared to classical refinement planners using the same control knowledge. We will contrast the costs and benefits of the synthesis approach with conventional methods for customizing domain independent planners.
Abstract-found: 1
Intro-found: 1
Reference: <author> Bacchus, F., & Kabanza, F. </author> <year> (1995). </year> <title> Using temporal logic to control search in a forward chaining planner. New Directions in AI Planning: EWSP 95, </title> <publisher> IOS Press, </publisher> <pages> 141-153. </pages>
Reference: <author> Backstrom, C., & Nebel, B. </author> <year> (1993). </year> <title> Complexity results in SAS+ planning. </title> <type> Research Report, </type> <institution> Dept Comp.and Info Sc., Linkoping Univ., Sweden. </institution>
Reference-contexts: The two approaches which are popular in the planning community are the STRIPS representation (Fikes & Nilsson, 1990) and the multi-valued state-variable representation <ref> (Backstrom & Nebel, 1993) </ref>. 7 STRIPS representation * Action: move (?x, ?y, ?z) * Pre: (?x != ?y) ^(?y != ?z) ^(?z != ?x) ^clear (?x) ^clear (?z) ^: clear (?y) ^on (?x, ?y) * Post: on (?x,?z) ^clear (?y) ^: clear (?z) ^: on (?x, ?y) State-variable representation State =
Reference: <author> Barrett, A., & Weld, D. </author> <year> (1994). </year> <title> Partial order planning: Evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67(1). </volume>
Reference-contexts: These are known, respectively, as Forward State Space or progression refinement (FSS), Backward State Space Refinement or regression refinement (BSS), Plan Space Refinement (PSS) and Task Reduction Refinement. STRIPS (Fikes & Nilsson, 1990) is an example of a planner using FSS refinement, TOPI <ref> (Barrett & Weld, 1994) </ref> uses BSS refinement, SNLP (McAllester & Rosenblitt, 1991) uses plan-space refinement and NONLIN (Tate, 1977) uses task reduction refinement. Given this background, the declarative theory of plan generation in CLAY corresponds to theories of these refinements. The algorithm tactic underlying plan generation corresponds to refinement search.
Reference: <author> Blum, A., & Furst, M. </author> <year> (1995). </year> <title> Fast planning through planning graph analysis. </title> <booktitle> Proc IJCAI-95, </booktitle> <pages> 16361642. </pages>
Reference-contexts: The original tyre has to be placed in the boot and all tools returned back to the boot. We used the same domain description as used in Graphplan <ref> (Blum & Furst, 1995) </ref>. The domain dependent pruning test we used were: * If a state variable changes between one state (S1) and the next state (S2), it should not change in the subsequent state (S3).
Reference: <author> Burstein, M., & Smith, D. </author> <year> (1996). </year> <title> ITAS: A portable, interactive transportation scheduling tool using a search engine generated from formal specifications. </title> <booktitle> In Proceedings of 3rd AI Planning Systems Conference, </booktitle> <pages> pp. 3544. </pages>
Reference: <author> Fikes, R., & Nilsson, N. </author> <year> (1990). </year> <title> STRIPS: A new approach to the application of theorem proving to problem solving. Readings in Planning. </title> <publisher> Morgan Kaufmann Publ., </publisher> <address> San Mateo, CA. </address>
Reference-contexts: These are known, respectively, as Forward State Space or progression refinement (FSS), Backward State Space Refinement or regression refinement (BSS), Plan Space Refinement (PSS) and Task Reduction Refinement. STRIPS <ref> (Fikes & Nilsson, 1990) </ref> is an example of a planner using FSS refinement, TOPI (Barrett & Weld, 1994) uses BSS refinement, SNLP (McAllester & Rosenblitt, 1991) uses plan-space refinement and NONLIN (Tate, 1977) uses task reduction refinement. <p> The two approaches which are popular in the planning community are the STRIPS representation <ref> (Fikes & Nilsson, 1990) </ref> and the multi-valued state-variable representation (Backstrom & Nebel, 1993). 7 STRIPS representation * Action: move (?x, ?y, ?z) * Pre: (?x != ?y) ^(?y != ?z) ^(?z != ?x) ^clear (?x) ^clear (?z) ^: clear (?y) ^on (?x, ?y) * Post: on (?x,?z) ^clear (?y) ^: clear
Reference: <author> Fink, E., & Veloso, M. </author> <year> (1994). </year> <title> Formalizing the prodigy planning algorithm. </title> <type> CMU CS Tech Report CMU-CS-94-123. </type>
Reference-contexts: This makes for a fairer comparison between synthesized and general-purpose planners. In some existing planners such as UCPOP (Penberthy & Weld, 1994) and PRODIGY <ref> (Fink & Veloso, 1994) </ref>, customization is supported by allowing the user to specify search control rules that are checked at every choice point during search. Such control rules can be used to rank the children nodes based on some heuristic or prune unpromising node.
Reference: <author> Gomes, C. P. </author> <year> (1995). </year> <title> Planning in KIDS. </title> <type> Technical report RL-TR-95-205, </type> <institution> Rome Laboratory. </institution>
Reference-contexts: In future, we hope to be able to synthesize planners using this more general theory of refinement planning. Although there has not been much work on automated planner synthesis, Gomes <ref> (Gomes, 1995) </ref> had synthesized a state-space problem solver for the missionaries and cannibals problem on KIDS, and has shown that it outperforms general purpose problem solvers in that domain. Our framework can be seen as a generalization of the work done by Gomes.
Reference: <author> Kambhamapti, S. </author> <year> (1995). </year> <title> Comparative analysis of partial order planning and HTN planning. </title> <journal> ACM SIGART Bulletin, </journal> <volume> 6. </volume>
Reference: <author> Kambhampati, S. </author> <year> (1994). </year> <title> Refinement search as a unifying framework for analyzing planning algorithms. </title> <booktitle> Proc. </booktitle> <address> KR-94. </address>
Reference: <author> Kambhampati, S., Katukam, S., & Qu, Y. </author> <year> (1996). </year> <title> Failure driven dynamic search control for partial order planners: An explanation-based approach. </title> <journal> Artificial Intelligence, </journal> <volume> 88, </volume> <pages> 253315. </pages> <note> 31 Kambhampati, </note> <author> S., Knoblock, C., & Yang, Q. </author> <year> (1995). </year> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial order planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76, </volume> <pages> 167238. </pages> <note> Special Issue on Planning and Scheduling. </note>
Reference-contexts: Ideally, we would like to support the synthesis of customized planners based on the full gamut of planning technologies including partial order and task reduction planning. These latter are already subsumed by the refinement planning framework developed in <ref> (Kambhampati & Srivastava, 1996) </ref> and supporting their synthesis is mainly a matter of supporting a more flexible partial plan representation in KIDS (we got away with plans represented as sequences over actions until now, as we were addressing the synthesis of state-space planners). <p> An example of this is the recent research on plan synthesis approaches based on constraint satisfaction. We have taken some preliminary steps towards integrating these approaches into the refinement planning framework by using the notion of disjunctive plan representations (see <ref> (Kambhampati & Yang, 1996) </ref>). As this work matures, we can explore synthesizing planners using the theories of disjunctive plan refinement.
Reference: <author> Kambhampati, S., & Srivastava, B. </author> <year> (1995). </year> <title> Universal classical planning: An algorithm for unifying state space and plan space planning approaches. New Directions in AI Planning: EWSP 95, </title> <publisher> IOS Press, </publisher> <pages> 61-75. </pages>
Reference-contexts: For complete details, readers are referred to (Smith, 1992a). The KIDS' global search paradigm is a general form of the refinement search model used to unify classical planners in UCP <ref> (Kambhampati & Srivastava, 1995) </ref>. Specifically, the partial plans correspond to descriptors and the refinements correspond to splitting strategies. <p> Since there are a variety of traditional classical planners each of which have varying tradeoffs (c.f. (Barrett & Weld, 1994; Kambhampati et al., 1995)), we used a league tournament approach in our comparison. Specifically, since most popular classical planners correspond to different instantiations of UCP <ref> (Kambhampati & Srivastava, 1995) </ref>, we first ran them all on our blocks world problem distribution to isolate the best traditional planners. Similar study is done to isolate the best synthesized planners for our problem distribution. At this point, the best synthesized planner is compared to the best traditional planner.
Reference: <author> Kambhampati, S., & Srivastava, B. </author> <year> (1996). </year> <title> Unifying classical planning approaches. </title> <type> Tech. rep. ASU CSE TR 96-006, </type> <institution> Arizona State University. </institution>
Reference-contexts: Ideally, we would like to support the synthesis of customized planners based on the full gamut of planning technologies including partial order and task reduction planning. These latter are already subsumed by the refinement planning framework developed in <ref> (Kambhampati & Srivastava, 1996) </ref> and supporting their synthesis is mainly a matter of supporting a more flexible partial plan representation in KIDS (we got away with plans represented as sequences over actions until now, as we were addressing the synthesis of state-space planners). <p> An example of this is the recent research on plan synthesis approaches based on constraint satisfaction. We have taken some preliminary steps towards integrating these approaches into the refinement planning framework by using the notion of disjunctive plan representations (see <ref> (Kambhampati & Yang, 1996) </ref>). As this work matures, we can explore synthesizing planners using the theories of disjunctive plan refinement.
Reference: <author> Kambhampati, S., & Yang, X. </author> <year> (1996). </year> <title> On the role and utility of disjunctive representation in refinement planning. </title> <booktitle> In Proc. Fifth Conf. Principles of Knowledge Representation and Reasoning (KR-96), </booktitle> <pages> pp. 135146. </pages>
Reference-contexts: Ideally, we would like to support the synthesis of customized planners based on the full gamut of planning technologies including partial order and task reduction planning. These latter are already subsumed by the refinement planning framework developed in <ref> (Kambhampati & Srivastava, 1996) </ref> and supporting their synthesis is mainly a matter of supporting a more flexible partial plan representation in KIDS (we got away with plans represented as sequences over actions until now, as we were addressing the synthesis of state-space planners). <p> An example of this is the recent research on plan synthesis approaches based on constraint satisfaction. We have taken some preliminary steps towards integrating these approaches into the refinement planning framework by using the notion of disjunctive plan representations (see <ref> (Kambhampati & Yang, 1996) </ref>). As this work matures, we can explore synthesizing planners using the theories of disjunctive plan refinement.
Reference: <author> Lauriere, J. L. </author> <year> (1978). </year> <title> A language and a program for stating and solving combinatorial problems. </title> <journal> Artificial Intelligence, </journal> <volume> 10, </volume> <pages> 29127. </pages>
Reference-contexts: Our approach facilitates the same, in a refinement independent setting, by folding in the control knowledge into the developed planning code. There is some work in constraint satisfaction community that is directed towards producing specialized (customized) programs. COASTOOL (Yoshikawa, Kaneko, Nomura, & Watanabe, 1994) and ALICE systems <ref> (Lauriere, 1978) </ref> take declarative description of CSPs and compile specialized algorithms for solving them, and MULTI-TAC (Minton, 1996) supports automatic configuration of constraint satisfaction programs. MULTI-TAC approach, in particular, provides an interesting contrast to our approach.
Reference: <author> McAllester, D., & Rosenblitt, D. </author> <year> (1991). </year> <title> Systematic Nonlinear Planning. </title> <booktitle> Proc. 9th NCAI-91, </booktitle> <pages> 634-639. </pages>
Reference-contexts: Similarly, in the Tyre domain (Russell & Norvig, 1995), the fixit task was solved in under a minute. To put the performance results in perspective, we compared KIDS' synthesized planners and the instantiations of UCP (which emulate a spectrum of classical planners, including the popular SNLP planner <ref> (McAllester & Rosenblitt, 1991) </ref>, by selecting the appropriate refinement) across many blocks world tasks. In our experiments, the best of the KIDS' synthesized planners outperformed the best of the UCP instantiations when given the same domain-specific information. <p> STRIPS (Fikes & Nilsson, 1990) is an example of a planner using FSS refinement, TOPI (Barrett & Weld, 1994) uses BSS refinement, SNLP <ref> (McAllester & Rosenblitt, 1991) </ref> uses plan-space refinement and NONLIN (Tate, 1977) uses task reduction refinement. Given this background, the declarative theory of plan generation in CLAY corresponds to theories of these refinements. The algorithm tactic underlying plan generation corresponds to refinement search.
Reference: <author> Minton, S. </author> <year> (1988). </year> <title> Learning effective search control knowledge: An explanation-based approach. </title> <type> PhD thesis, </type> <institution> Carnegie -Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: Tasks for the reported experiments are of the type: * Stack Inversion Invert from A-ON-TOP to N-ON-TOP. * Random blocks world tasks A subset of random blocks world task generated using Minton's algorithm <ref> (Minton, 1988) </ref>. In a task with N blocks, the goal state can have up to N/2 goal conditions.
Reference: <author> Minton, S. </author> <year> (1996). </year> <title> Automatically configuring constraint satisfaction problems: A case study. Constraints, </title> <type> 1(1). </type>
Reference-contexts: There is some work in constraint satisfaction community that is directed towards producing specialized (customized) programs. COASTOOL (Yoshikawa, Kaneko, Nomura, & Watanabe, 1994) and ALICE systems (Lauriere, 1978) take declarative description of CSPs and compile specialized algorithms for solving them, and MULTI-TAC <ref> (Minton, 1996) </ref> supports automatic configuration of constraint satisfaction programs. MULTI-TAC approach, in particular, provides an interesting contrast to our approach.
Reference: <author> Minton, S. </author> <year> (1990). </year> <title> Quantitative results concerning the utility of explanation-based learning. </title> <journal> In Artificial Intelligence, </journal> <volume> Vol. 42, </volume> <pages> pp. 363392. </pages>
Reference: <author> Penberthy, J., & Weld, D. </author> <year> (1994). </year> <title> UCPOP: A sound, complete, partial order planner for adl. </title> <booktitle> Proc. AAAI-94, </booktitle> <pages> 103-114. </pages>
Reference-contexts: This makes for a fairer comparison between synthesized and general-purpose planners. In some existing planners such as UCPOP <ref> (Penberthy & Weld, 1994) </ref> and PRODIGY (Fink & Veloso, 1994), customization is supported by allowing the user to specify search control rules that are checked at every choice point during search. Such control rules can be used to rank the children nodes based on some heuristic or prune unpromising node.
Reference: <author> Russell, S., & Norvig, P. </author> <year> (1995). </year> <booktitle> Artificial Intelligence AModern Approach (chap 13). </booktitle> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address>
Reference-contexts: In the logistics domain task set, a task with 12 packages, 4 planes and 8 places was solved in under a minute. Similarly, in the Tyre domain <ref> (Russell & Norvig, 1995) </ref>, the fixit task was solved in under a minute. <p> unloading a package (ii) packages should either be at the goal position to begin with or can be loaded inside a plane and then flown to their goal position and (iii) once a package reaches its goal position, it should not be moved. 5.1.3 TYRE WORLD DOMAIN The Tyre world <ref> (Russell & Norvig, 1995) </ref> is known for its complex causal structure. In the fixit task from this domain, a car's wheel is flat and must be replaced by a spare flat tyre in the boot after inflating it. <p> Without such a heuristic, the progression planner (INDEP-P) could not solve even 2 plane task in the same time. 5.2.3 TYRE WORLD DOMAIN PLANNERS There are 25 operators, 27 state variables and 6 control rules in our manually encoded Tyre world <ref> (Russell & Norvig, 1995) </ref> description.
Reference: <author> Smith, D. R. </author> <year> (1990). </year> <title> KIDS: A semi-automatic program development system. </title> <journal> IEEE Trans. on Software Engineering special issue on Formal Methods, </journal> <volume> 16, No.9, </volume> <month> Sep </month> <year> 1990. </year>
Reference-contexts: Specifically, as shown in Figure 1, a declarative theory of plan synthesis (theory of planning) is combined with the control knowledge specific to a given domain in a semi-automated software synthesis system called KIDS (Kestrel Interactive Development System) <ref> (Smith, 1990, 1992a, 1992b) </ref> to derive a customized planner for the domain. We will draw the declarative theory of plan synthesis from domain independent planning techniques.
Reference: <author> Smith, D. R. </author> <year> (1992a). </year> <title> Structure and design of global search algorithms. </title> <type> Kestrel Tech. Rep. </type> <institution> KES.U.87.11. </institution>
Reference-contexts: Given this background, the declarative theory of plan generation in CLAY corresponds to theories of these refinements. The algorithm tactic underlying plan generation corresponds to refinement search. KIDS system supports an algorithm tactic called global search <ref> (Smith, 1992a) </ref> which can be seen as a generalization of this refinement search. 3. Developing a planner from declarative specification domain knowledge consists of a dynamical model and control knowledge. The dynamical model is in the form of actions or operators that define legal transformations from one plan-state to another. <p> The process can be described as a tree search in which a node represents a set of candidates and an arc represents the split relationship between a set and its subset. For complete details, readers are referred to <ref> (Smith, 1992a) </ref>. The KIDS' global search paradigm is a general form of the refinement search model used to unify classical planners in UCP (Kambhampati & Srivastava, 1995). Specifically, the partial plans correspond to descriptors and the refinements correspond to splitting strategies. <p> In this case, it might be worthwhile to create a new variable, equal to g (x), whose value is maintained and which allows for incremental computation. Finite differencing can be decomposed into two more basic operations: abstraction and simplifica tion <ref> (Smith, 1992a) </ref> * Abstraction of a function f with respect to expression g (x) adds a new parameter c to param eter list of f (now f (x; c)) and adds c = g (x) as a new input invariant to f .
Reference: <author> Smith, D. R. </author> <year> (1992b). </year> <title> Transformational approach to scheduling. </title> <type> Kestrel Institute Tech. Rep. </type> <institution> KES.U.92.2, 54pp. </institution>
Reference: <author> Smith, D., & Parra, E. </author> <year> (1993). </year> <title> Transformational approach to transportation scheduling. </title> <booktitle> In Proceedings of the 8th Knowledge-based Software Engineering Conference, </booktitle> <pages> pp. 1417. </pages> <address> Chicago, IL, </address> <month> Sept </month> <year> 1993. </year>
Reference: <author> Tate, A. </author> <year> (1977). </year> <title> Generating project networks. </title> <booktitle> Proc. 5th IJCAI, </booktitle> <pages> 888893. </pages>
Reference-contexts: STRIPS (Fikes & Nilsson, 1990) is an example of a planner using FSS refinement, TOPI (Barrett & Weld, 1994) uses BSS refinement, SNLP (McAllester & Rosenblitt, 1991) uses plan-space refinement and NONLIN <ref> (Tate, 1977) </ref> uses task reduction refinement. Given this background, the declarative theory of plan generation in CLAY corresponds to theories of these refinements. The algorithm tactic underlying plan generation corresponds to refinement search.
Reference: <author> Yoshikawa, M., Kaneko, K., Nomura, Y., & Watanabe, M. </author> <year> (1994). </year> <title> A constraint-based approach to high school timetabling problems: A case study. </title> <journal> Proc. NCAI-94, </journal> <volume> 11111116. </volume> <pages> 32 </pages>
Reference-contexts: Our approach facilitates the same, in a refinement independent setting, by folding in the control knowledge into the developed planning code. There is some work in constraint satisfaction community that is directed towards producing specialized (customized) programs. COASTOOL <ref> (Yoshikawa, Kaneko, Nomura, & Watanabe, 1994) </ref> and ALICE systems (Lauriere, 1978) take declarative description of CSPs and compile specialized algorithms for solving them, and MULTI-TAC (Minton, 1996) supports automatic configuration of constraint satisfaction programs. MULTI-TAC approach, in particular, provides an interesting contrast to our approach.
References-found: 27

