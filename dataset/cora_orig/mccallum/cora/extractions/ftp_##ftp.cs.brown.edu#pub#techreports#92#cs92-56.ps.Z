URL: ftp://ftp.cs.brown.edu/pub/techreports/92/cs92-56.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-92-56.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Abiteboul, and P. Kanellakis. </author> <title> Object identity as a query language primitive. </title> <booktitle> Proc. of ACM SIG-MOD Conf., </booktitle> <year> 1989. </year>
Reference-contexts: A primary goal of our data model is to combine simplicity, modeling power and performance. Our data model is conceptually simple. It avoids the objects-versus-values dichotomy found in other data models such as in the O 2 data model <ref> [1, 9] </ref>, and the EXTRA data model [6]. This is achieved at no extra cost. <p> But it is sometimes convenient to be able to specify additional constrains on the structure of the data. For example, it is sometimes necessary to prohibit sharing of one object by more than one object. This is achieved in O 2 <ref> [1] </ref> data model by values. O 2 values cannot be shared. Similarly, in EXTRA [6] attributes qualified by the own qualifier can hold only non-shared data. Composite objects in ORION [3, 8] imply a different kind of constraint. In EXTRA, the own ref qualifier provides the same functionality.
Reference: [2] <author> F. Bancilhon, C. Delobel and P. Kanellakis. </author> <title> Building an Object-Oriented Database System The Story of O2. </title> <publisher> Morgan Kaufman, </publisher> <pages> pp. 61-75, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Object-oriented databases <ref> [2, 3, 7, 13] </ref> have been developed in response to the complex data modeling requirements in various application areas such as CAD, Graphics, and Programming Environments.
Reference: [3] <author> J. Banerjee, H-T Chou, J. F. Garza, W. Kim, D. Woelk, N. Ballou, and H-J Kim. </author> <title> Data model issues for object-oriented applications. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 5(1), </volume> <pages> pp. 3-26, </pages> <address> Januray, </address> <year> 1987. </year>
Reference-contexts: 1 Introduction Object-oriented databases <ref> [2, 3, 7, 13] </ref> have been developed in response to the complex data modeling requirements in various application areas such as CAD, Graphics, and Programming Environments. <p> This is achieved at no extra cost. We also show that it is possible to satisfy a variety of data modeling requirements such as composite objects of ORION <ref> [3] </ref>, and own, ref, and own ref objects of EXTRA [6] within the object-oriented paradigm. On the other had, neither O 2 , nor EXTRA provides exclusive access to objects with oid and behavior. The conceptual simplicity of the data model does not imply lower performance. <p> This is achieved in O 2 [1] data model by values. O 2 values cannot be shared. Similarly, in EXTRA [6] attributes qualified by the own qualifier can hold only non-shared data. Composite objects in ORION <ref> [3, 8] </ref> imply a different kind of constraint. In EXTRA, the own ref qualifier provides the same functionality. In ORION, a reference is either a composite link or an ordinary link.
Reference: [4] <author> L. Cardelli. </author> <title> A semantics of multiple inheritance. </title> <journal> Information and Computation, </journal> <volume> 76(1), </volume> <month> January, </month> <year> 1988. </year>
Reference-contexts: The signatures of these methods respectively are Point: distance (Point) ! Float, Edge: length () ! Float, and SegmentedEdge: length () ! Float CurvedEdge: length () ! Float 2 3.3 Inheritance A class declaration may specify a superclass as a part of its class definition. Inheritance <ref> [4, 5] </ref> allows the user to derive new classes from existing classes. Only single-inheritance is allowed in our data model i.e., a class can have at most one superclass 1 . The inheritance relationship is a partial order on the classes, i.e., it is reflexive, antisymmetric and transitive.
Reference: [5] <author> L. Cardelli, and P. Wegner. </author> <title> On understanding types, data abstractions, and polymorphism. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(4), </volume> <pages> pp. 471-522, </pages> <address> De-cember, </address> <year> 1985. </year>
Reference-contexts: The signatures of these methods respectively are Point: distance (Point) ! Float, Edge: length () ! Float, and SegmentedEdge: length () ! Float CurvedEdge: length () ! Float 2 3.3 Inheritance A class declaration may specify a superclass as a part of its class definition. Inheritance <ref> [4, 5] </ref> allows the user to derive new classes from existing classes. Only single-inheritance is allowed in our data model i.e., a class can have at most one superclass 1 . The inheritance relationship is a partial order on the classes, i.e., it is reflexive, antisymmetric and transitive.
Reference: [6] <author> M. Carey, D. DeWitt and S. Vandenberg. </author> <title> A data model and query language for Exodus. </title> <booktitle> Proc. of ACM SIGMOD Conf., </booktitle> <year> 1988. </year>
Reference-contexts: A primary goal of our data model is to combine simplicity, modeling power and performance. Our data model is conceptually simple. It avoids the objects-versus-values dichotomy found in other data models such as in the O 2 data model [1, 9], and the EXTRA data model <ref> [6] </ref>. This is achieved at no extra cost. We also show that it is possible to satisfy a variety of data modeling requirements such as composite objects of ORION [3], and own, ref, and own ref objects of EXTRA [6] within the object-oriented paradigm. <p> O 2 data model [1, 9], and the EXTRA data model <ref> [6] </ref>. This is achieved at no extra cost. We also show that it is possible to satisfy a variety of data modeling requirements such as composite objects of ORION [3], and own, ref, and own ref objects of EXTRA [6] within the object-oriented paradigm. On the other had, neither O 2 , nor EXTRA provides exclusive access to objects with oid and behavior. The conceptual simplicity of the data model does not imply lower performance. It is possible to engineer internal optimizations for good performance. <p> For example, it is sometimes necessary to prohibit sharing of one object by more than one object. This is achieved in O 2 [1] data model by values. O 2 values cannot be shared. Similarly, in EXTRA <ref> [6] </ref> attributes qualified by the own qualifier can hold only non-shared data. Composite objects in ORION [3, 8] imply a different kind of constraint. In EXTRA, the own ref qualifier provides the same functionality. In ORION, a reference is either a composite link or an ordinary link.
Reference: [7] <author> D. H. Fishman, D. Beech, H. P. Cate, E. C. Chow, T. Connors, J. W. Davis, N. Derret, C. G. Hoch, W. Kent, P. Lyngbaek, B. Mahbod, M. A. Neimat, T. A. Ryan, and M. C. Shan. </author> <title> Iris: An object-oriented database management system. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 5(1), </volume> <pages> pp. 48-69, </pages> <address> Januray, </address> <year> 1987. </year>
Reference-contexts: 1 Introduction Object-oriented databases <ref> [2, 3, 7, 13] </ref> have been developed in response to the complex data modeling requirements in various application areas such as CAD, Graphics, and Programming Environments.
Reference: [8] <author> W. Kim, J. Banerjee, H-T Chou, J. F. Garza, and D. Woelk. </author> <title> Composite object support in an objec-oriented database system. </title> <booktitle> Proc. of ACM OOPSLA Conf., </booktitle> <year> 1987. </year>
Reference-contexts: This is achieved in O 2 [1] data model by values. O 2 values cannot be shared. Similarly, in EXTRA [6] attributes qualified by the own qualifier can hold only non-shared data. Composite objects in ORION <ref> [3, 8] </ref> imply a different kind of constraint. In EXTRA, the own ref qualifier provides the same functionality. In ORION, a reference is either a composite link or an ordinary link.
Reference: [9] <author> C. Lecluse, and P. Richard. </author> <title> Modeling complex structures in object-oriented databases. </title> <booktitle> Proc. of ACM PODS Symp., </booktitle> <year> 1989. </year>
Reference-contexts: A primary goal of our data model is to combine simplicity, modeling power and performance. Our data model is conceptually simple. It avoids the objects-versus-values dichotomy found in other data models such as in the O 2 data model <ref> [1, 9] </ref>, and the EXTRA data model [6]. This is achieved at no extra cost.
Reference: [10] <author> O 2 Technology. </author> <title> The O 2 User Manual, </title> <month> June, </month> <year> 1992. </year>
Reference-contexts: Following this philosophy, our data model represents all entities as objects, and provides a separate qualifier for prohibiting sharing. This simplifies the model. It removes any possibility of confusion between objects and values such as in the O 2 data model <ref> [10] </ref>. The simplification does not necessarily imply lower performance. It is possible to engineer internal optimizations to achieve good performance. In the O 2 data model, it is not possible to express restrictions on object sharing.
Reference: [11] <author> S. Reiss, and M. Sarkar. </author> <title> Generating abstractions for visualization. </title> <type> Technical Report CS-92-35. </type> <institution> Computer Science Department, Brown University, </institution> <month> September, </month> <year> 1992. </year>
Reference-contexts: The idea is to generate abstractions by querying the database, the answers to the queries are the target abstractions. These abstractions are subsequently visualized graphically, and our full system is a program visualization system <ref> [11] </ref>. The data model of our full program visualization system is object-oriented, and we wanted a database with a compatible data model. This paper presents the data fl Support for this research was provided by NSF grants CCR9111507 and CCR9113226, by ARPA order 8225 and by ONR grant N00014-91-J-4052 model.
Reference: [12] <author> M. Sarkar, and S. Reiss. </author> <title> A query language for object-oriented databases with tuples, sets and lists. </title> <type> Technical Report CS-92-57. </type> <institution> Computer Science Department, Brown University, </institution> <month> December, </month> <year> 1992. </year>
Reference-contexts: For example, the integer 5 can be thought of as the object ( , 5, Integer). 7 Conclusions We have presented a data model. The operational part of the data model, the query language OQL, and an object algebra is presented in <ref> [12] </ref>. The data model and OQL have been designed with a practical application in mind, i.e., program visualization. Keeping the data model simple in order to achieve a simple but powerful query language was our primary goal.
Reference: [13] <author> J. D. Ullman. </author> <title> Principles of data and knowledge-based systems. </title> <publisher> Computer Science Press. </publisher> <address> ISBN0-7167-8158-1, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction Object-oriented databases <ref> [2, 3, 7, 13] </ref> have been developed in response to the complex data modeling requirements in various application areas such as CAD, Graphics, and Programming Environments.
References-found: 13

