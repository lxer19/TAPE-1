URL: http://www.cs.man.ac.uk/~banach/some.pubs/Retrench.Punct.Sim.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~banach/Recent.publications.html
Root-URL: http://www.cs.man.ac.uk
Email: banach@cs.man.ac.uk m.r.poppleton@coventry.ac.uk  
Title: Retrenchment and Punctured Simulation  
Author: R. Banach a M. Poppleton a,b 
Address: Manchester, M13 9PL, U.K.  CV1 5FB, U.K.  
Affiliation: a Computer Science Dept., Manchester University,  b School of Mathl. and Inf. Sciences, Coventry University, Coventry,  
Abstract: Some of the shortcomings of using refinement alone as the means of passing from high level simple models to actual detailed implementations are reviewed. Retrenchment is presented as a framework for ameliorating these. In retrenchment the relationship between an abstract operation and its concrete counterpart is mediated by extra predicates, allowing most particularly the description of non-refinement-like properties, and the mixing of I/O and state aspects in the passage between levels of abstraction. Stepwise simulation is introduced as the reference point for discussing the broader semantic issues surrounding retrenchment. Punctured simulation is introduced as a naturally occurring phenomenon implicit in the ability of retrenchments to describe of non-refinement-like properties. Two special cases of retrenchment, simple simulable retrenchment and memoryless regular retrenchment are introduced. Both enjoy a unique domain property for large maximal punctured simulations, and the former has an easy stepwise simulation property too. A simple case study is presented. The B-Method and notation are used throughout the paper. Keywords: Retrenchment, Simulation, Punctured Simulation, B-Method. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Banach R., Poppleton M. Retrenchment: </author> <title> An Engineering Variation on Refinement. </title> <booktitle> in: Proc. </booktitle> <editor> B-98, Bert (ed.), </editor> <publisher> Springer, </publisher> <year> 1998, </year> <pages> 129-147, </pages> <note> LNCS 1393. </note>
Reference-contexts: 1 Introduction In <ref> [1] </ref>, we proposed retrenchment in order to liberalise the notion of refinement. The purpose of this was to enable more of the informal aspects of development to be captured within a formal framework. <p> Most specifically, non-refinement-like behaviour can be entertained within the framework via the weakened post-condition. This in turn permits inconvenient low level detail of the true system from interfering with an idealised model at a high level of abstraction, leading to hopefully cleaner, more comprehensible development routes. <ref> [1] </ref> was concerned with making the engineering case for the retrenchment notion. <p> In more detail, the rest of this paper is as follows. In section 2 we briey recall why refinement is too strong a notion to conveniently encompass much of realistic system building activity. For a much fuller treatment of such motivational issues see <ref> [1] </ref>. In section 3 we present retrenchment and the proof obligations that give it semantic content. In section 4 we define stepwise simulation, the central concept for discussing wider semanic issues for retrenchment, and briey comment on our choice of definition. <p> In this manner we briey promote the introduction of a more liberal notion than refinement which we intend to bridge that gap. Such motivational issues are discussed much more ex-tensively in <ref> [1] </ref>. 3 Retrenchment The top level system construct in B is the MACHINE which expresses the abstract model of the system being built. <p> The justif ication of the precise form of this PO was discussed at length in <ref> [1] </ref>. Beyond those considerations which continue to apply here, we will say that it leads to a clean notion of stepwise simulation which we introduce in the next section. We give an example of retrenchment by redoing our failed refinement above within the new framework.
Reference: 2. <editor> Abrial J. R. </editor> <booktitle> The B-Book. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1996. </year>
Reference-contexts: In section 7, another special case is introduced, memo-ryless regular retrenchment, and a similar unique domain property is established. Section 8 presents a small case study of a model power generation plant to illustrate punctured simulation. Section 9 concludes. The B-Method and Abstract Machine Notation <ref> [2, 3, 4] </ref> are used throughout the paper. By providing in particular a fixed syntactic framework for ref inement, they provide a very convenient structure into which the ideas of retrenchment can be placed.
Reference: 3. <author> Wordsworth J. B. </author> <title> Software Engineering with B. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: In section 7, another special case is introduced, memo-ryless regular retrenchment, and a similar unique domain property is established. Section 8 presents a small case study of a model power generation plant to illustrate punctured simulation. Section 9 concludes. The B-Method and Abstract Machine Notation <ref> [2, 3, 4] </ref> are used throughout the paper. By providing in particular a fixed syntactic framework for ref inement, they provide a very convenient structure into which the ideas of retrenchment can be placed.
Reference: 4. <author> Lano K., Haughton H. </author> <title> Specification in B: An Introduction Using the B-Toolkit. </title> <publisher> Imperial College Press, </publisher> <year> 1996. </year>
Reference-contexts: In section 7, another special case is introduced, memo-ryless regular retrenchment, and a similar unique domain property is established. Section 8 presents a small case study of a model power generation plant to illustrate punctured simulation. Section 9 concludes. The B-Method and Abstract Machine Notation <ref> [2, 3, 4] </ref> are used throughout the paper. By providing in particular a fixed syntactic framework for ref inement, they provide a very convenient structure into which the ideas of retrenchment can be placed.
Reference: 5. <author> Abadi M., Lamport L. </author> <title> The Existence of Refinement Mappings. </title> <journal> Theor. Comp. Sci., </journal> <volume> 1991; 82: </volume> <pages> 253-284. </pages>
Reference-contexts: The counterexample also indicates that punctured simulation is not simply an alternative means of dealing with situations that need stuttering (i.e. the interspersing of arbitrary finite runs of skips into abstract execution sequences see eg. <ref> [5] </ref>), because in a punctured simulation the final abstract state of one portion need not coincide with the first abstract state of the next portion: in particular two consecutive portions must have an exception of at least one concrete step between them.
Reference: 6. <author> Banach R., Poppleton M. Sharp Retrenchment, </author> <title> Modulated Ref inement, and Punctured Simulation. </title> <note> in preparation 1999. </note>
Reference-contexts: In fact in this example the CONCEDES clause acts conjunctively more than disjunctively. Where such distinctions need to be vigorously policed, as in the most highly critical developments, we can separate conjunctive and disjunctive aspects to get a more subtle version of retrenchment (called sharp retrenchment, see <ref> [6] </ref>).
Reference: 7. <author> Coleman D., Hughes J. W. </author> <title> The Clean Termination of Pascal Programs. </title> <journal> Acta Inf. </journal> <volume> 1979; 11: </volume> <pages> 195-210. </pages>
Reference-contexts: It is hardly the case that no one else has previously noticed the difficulties imposed by the refinement straitjacket. The complexities arising from being sensitive to the purely finite domains available to real implementations were noted in the work on clean termination (see eg. <ref> [7, 8] </ref>).
Reference: 8. <author> Blikle A. </author> <title> The Clean Termination of Iterative Programs. </title> <journal> Acta Inf. </journal> <volume> 1981; 16: </volume> <pages> 199-217. </pages>
Reference-contexts: It is hardly the case that no one else has previously noticed the difficulties imposed by the refinement straitjacket. The complexities arising from being sensitive to the purely finite domains available to real implementations were noted in the work on clean termination (see eg. <ref> [7, 8] </ref>).
Reference: 9. <author> Neilson D. S. </author> <title> From Z to C: Illustration of a Rigorous Development Method. </title> <type> PhD. Thesis, </type> <institution> Oxford University Computing Laboratory Programming Research Group, Technical Monograph PRG-101, </institution> <year> 1990. </year>
Reference-contexts: The complexities arising from being sensitive to the purely finite domains available to real implementations were noted in the work on clean termination (see eg. [7, 8]). Another approach to the same subject can be found in Neilsons thesis <ref> [9] </ref>, which observes that the infinite idealised domains of textbook examples usually arise as well behaved limits of finite ones, and thus refinement in the idealised case can be understood as the limit of a finite version.
Reference: 10. <author> Owe O. </author> <title> An Approach to Program Reasoning Based on a First Order Logic for Partial Functions. </title> <institution> University of Oslo Institute of Informatics Research Report No. </institution> <address> 89. ISBN 82-90230-88-5, </address> <year> 1985. </year>
Reference-contexts: Yet another attack can be found in <ref> [10, 11] </ref> which propose dealing with finiteness considerations, and the resulting definedness problems, by using a carefully constructed three-valued logic. The I/O side of the coin has been examined by [12], and more recently by [13, 14, 15].
Reference: 11. <author> Owe O. </author> <title> Partial Logics Reconsidered: A Conservative Approach. Form. Asp. </title> <journal> Comp. </journal> <volume> 1993; 3: </volume> <pages> 1-16. </pages>
Reference-contexts: Yet another attack can be found in <ref> [10, 11] </ref> which propose dealing with finiteness considerations, and the resulting definedness problems, by using a carefully constructed three-valued logic. The I/O side of the coin has been examined by [12], and more recently by [13, 14, 15].
Reference: 12. <author> Hayes I. J., Sanders J. </author> <title> W . Specification by Interface Separation. Form. Asp. </title> <journal> Comp. </journal> <volume> 1995; 7: </volume> <pages> 430-439. </pages>
Reference-contexts: Yet another attack can be found in [10, 11] which propose dealing with finiteness considerations, and the resulting definedness problems, by using a carefully constructed three-valued logic. The I/O side of the coin has been examined by <ref> [12] </ref>, and more recently by [13, 14, 15]. Retrenchment provides a relatively simple vessel into which (at least closely related variants of) many of these ideas can be placed. Perhaps the most obvious related development method to retrenchment is the rely/ guarantee method of [16] and its successors.
Reference: 13. <editor> Boiten E., Derrick J. IO-Refinement in Z. </editor> <booktitle> in: Proc. Third BCS-FACS Northern Formal Methods Workshop. </booktitle> <address> Ilkley, U.K, </address> <year> 1998. </year>
Reference-contexts: Yet another attack can be found in [10, 11] which propose dealing with finiteness considerations, and the resulting definedness problems, by using a carefully constructed three-valued logic. The I/O side of the coin has been examined by [12], and more recently by <ref> [13, 14, 15] </ref>. Retrenchment provides a relatively simple vessel into which (at least closely related variants of) many of these ideas can be placed. Perhaps the most obvious related development method to retrenchment is the rely/ guarantee method of [16] and its successors.
Reference: 14. <author> Stepney S., Cooper D., Woodcock J. </author> <title> More Powerful Z Data Refinement: </title> <booktitle> Pushing the State of the Art in Industrial Refinement. in: Proc. </booktitle> <editor> ZUM-98, Bowen, Fett, Hinchey (eds.), </editor> <publisher> Springer, </publisher> <year> 1998, </year> <pages> 284-307, </pages> <note> LNCS 1493. </note>
Reference-contexts: Yet another attack can be found in [10, 11] which propose dealing with finiteness considerations, and the resulting definedness problems, by using a carefully constructed three-valued logic. The I/O side of the coin has been examined by [12], and more recently by <ref> [13, 14, 15] </ref>. Retrenchment provides a relatively simple vessel into which (at least closely related variants of) many of these ideas can be placed. Perhaps the most obvious related development method to retrenchment is the rely/ guarantee method of [16] and its successors.
Reference: 15. <author> Mikhajlova A, Sekerinski E. </author> <title> Class Refinement and Interface Refinement in Object-Oriented Programs. </title> <booktitle> in: Proc. </booktitle> <editor> FME-97, Fitzgerald, Jones, Lucas (eds.), </editor> <publisher> Springer, </publisher> <year> 1997, </year> <pages> 82-101, </pages> <note> LNCS 1313. </note>
Reference-contexts: Yet another attack can be found in [10, 11] which propose dealing with finiteness considerations, and the resulting definedness problems, by using a carefully constructed three-valued logic. The I/O side of the coin has been examined by [12], and more recently by <ref> [13, 14, 15] </ref>. Retrenchment provides a relatively simple vessel into which (at least closely related variants of) many of these ideas can be placed. Perhaps the most obvious related development method to retrenchment is the rely/ guarantee method of [16] and its successors.
Reference: 16. <author> Jones C. B. </author> <title> Tentative Steps Towards a Development Method for Interfering Programs. </title> <journal> ACM Tran. Prog. Lang. Sys. </journal> <volume> 1983; 5: </volume> <pages> 596-619. </pages>
Reference-contexts: Retrenchment provides a relatively simple vessel into which (at least closely related variants of) many of these ideas can be placed. Perhaps the most obvious related development method to retrenchment is the rely/ guarantee method of <ref> [16] </ref> and its successors. Here too a development step is mediated by an additional pair of predicates per operation, the rely and the guarantee clauses, but the crucial difference with respect to retrenchment is that both act conjunctively, and thus allow no weakening of the retrieve relation.
References-found: 16

