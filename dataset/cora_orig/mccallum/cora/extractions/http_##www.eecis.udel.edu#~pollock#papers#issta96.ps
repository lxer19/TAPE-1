URL: http://www.eecis.udel.edu/~pollock/papers/issta96.ps
Refering-URL: http://www.cis.udel.edu/~jochen/passages/pubs.htm
Root-URL: http://www.cis.udel.edu
Phone: (302) 831-1953  
Title: Towards A Structural Load Testing Tool  
Author: Cheer-Sun D. Yang and Lori L. Pollock 
Address: 19716  
Affiliation: Department of Computer and Information Sciences University of Delaware Newark, DE  
Abstract: Load sensitive faults are programming errors with which the program executes successfully if executed for a short time or small workload, but cause the program to fail when it is executed under a heavy load or continuously. Example applications that are prone to load sensitive faults include networking programs, client-server programs, operating system modules, and embedded systems. An important component of testing these programs is load or stress testing, which is directed towards detecting load sensitive faults, and also often performed to insure that a system satisfies a particular performance requirement under a heavy load. Current approaches to load testing treat the system as a black box, generating test data based on parameters specified by the tester within an operational profile. This method of load testing is applied at system integration time, typically resulting in a high maintenance cost in response to detecting a fault. This method can be applied only when the distribution of input data follows some probability distribution. In addition, because it is a functional testing approach, it may not execute every load sensitive path extensively. In this paper, we advocate a structural approach to load testing, which analyzes the program code for each module to produce test data for load testing. There exist many structural testing methods; however, their main goal is generating test data for executing all statements, definition-use pairs, or paths of a program at least once, without consideration for executing any particular path extensively. Thus, previous work on structural testing does not subsume the problem of structural load testing. Our work has focused on the identification of load sensitive modules based on a conservative static analysis of the module's code. A load sensitive module is one with the property that its correctness depends on the amount of input data or the length of time that the program will execute continuously. We have developed an algorithm for computing a load sensitivity index for various points throughout the program module, using a control flow graph representation of the program. Based on this load sensitive index, we identify a program module as either must-be load sensitive, may-be load sensitive, or load insensitive. By developing a structural approach to load testing, we can perform load testing at the stage of program development rather than system integration. Thus, detected load sensitive faults can be fixed more cheaply. In addition, by identifying the load sensitive modules, we can limit the test data to focus on these modules, and reduce the amount of load testing that is performed. Our ultimate goal is to develop a testing tool for structural load testing which takes a program as input, and uses our techniques to automatically determines whether that program needs to be load tested, and if so, automatically generates test data for structural load testing of the load sensitive program. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Avritzer and B. Larson. </author> <title> Load testing software using deterministic static testing. </title> <booktitle> In Proceedings of the International Symposium on Software Testing and Analysis, </booktitle> <pages> pages 82-88, </pages> <month> June </month> <year> 1993. </year>
Reference: [2] <author> A. Avritzer and E. Weyuker. </author> <title> Generating test suites for software load test. </title> <booktitle> In Proceedings of the International Symposium on Software Testing and Analysis, </booktitle> <pages> pages 44-57, </pages> <address> Seattle, Washington, </address> <month> Aug. </month> <year> 1994. </year>
Reference: [3] <author> A. Bertolino and M. Marre. </author> <title> Automatic generation of path covers based on the control flow analysis of computer programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> 20(12) 885-899, Dec. 1994. 
Reference: [4] <author> D.F.Yates and N. Malevris. </author> <title> Reducing the effects of infeasible paths in branch testing. </title> <booktitle> In Proceedings of the 4th Symposium on Testing, Analysis, and Verification, </booktitle> <pages> pages 48-54, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: For example, we could attempt to identify infeasible paths and eliminate their consideration from the LSI computation. That is, by performing a constant propagation and folding phase before the LSI computation, we may find that certain branches will never be executed. Other methods are described in [6] and <ref> [4] </ref>. We are currently working on refining our conservative assumption for the number of executions of loops. Finally, our ultimate goal is the automatic generation of test data for programs that we identify as load sensitive, and then building a useful testing tool that incorporates these techniques.
Reference: [5] <author> D. Hamlet, B. Gifford, and B. Nikolik. </author> <title> Exploring dataflow testing of arrays. </title> <booktitle> In International Conference on Software Engineering, </booktitle> <pages> pages 118-129, </pages> <address> Bal-timore, Maryland, </address> <year> 1993. </year>
Reference: [6] <author> D. Hedley and M. A. Hennell. </author> <title> The cause and effect of infeasible paths in computer programs. </title> <booktitle> In International Conference on Software Engineering, </booktitle> <pages> pages 259-266, </pages> <institution> Imperial College, </institution> <address> London, UK, </address> <year> 1985. </year>
Reference-contexts: For example, we could attempt to identify infeasible paths and eliminate their consideration from the LSI computation. That is, by performing a constant propagation and folding phase before the LSI computation, we may find that certain branches will never be executed. Other methods are described in <ref> [6] </ref> and [4]. We are currently working on refining our conservative assumption for the number of executions of loops. Finally, our ultimate goal is the automatic generation of test data for programs that we identify as load sensitive, and then building a useful testing tool that incorporates these techniques.
Reference: [7] <author> T. J. Ostrand and E. J. Weyuker. </author> <title> Data flow-based test adequacy analysis for languages with pointers. </title> <booktitle> In Proceedings of the 4th Symposium on Testing, Analysis, and Verification, </booktitle> <pages> pages 73-86, </pages> <month> Oct. </month> <year> 1991. </year>
Reference: [8] <author> H. D. Pande, W. A. Landi, and B. G. Ryder. </author> <title> Inter-procedural def-use associations for c systems with single level pointers. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(5) </volume> <pages> 385-403, </pages> <month> May </month> <year> 1994. </year>
Reference: [9] <author> R. E. Pather and J. P. Myers. </author> <title> The path prefix software testing strategy. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(7) </volume> <pages> 761-766, </pages> <month> July </month> <year> 1987. </year>
Reference: [10] <author> S. Venkatesan and B. Dathan. </author> <title> Coverage measurement for path testing based on the concept of essential branches. </title> <journal> Journal of Information Processing, </journal> <volume> 6(4) </volume> <pages> 199-205, </pages> <year> 1983. </year>
References-found: 10

