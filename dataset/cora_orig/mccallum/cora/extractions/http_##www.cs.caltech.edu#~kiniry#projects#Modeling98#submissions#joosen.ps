URL: http://www.cs.caltech.edu/~kiniry/projects/Modeling98/submissions/joosen.ps
Refering-URL: http://www.cs.caltech.edu/~kiniry/projects/Modeling98/submissions.html
Root-URL: http://www.cs.caltech.edu
Title: Building Emergent Distributed Systems with CORRELATE  
Author: Wouter Joosen Stijn Bijnens Frank Matthijs Bert Robben Johan Van Oeyen and Pierre Verbaeten 
Address: Comp. Sc., Celestijnenlaan 200A, B-3001 Leuven, Belgium 2 NetVision N.V., Parijsstraat 74, 3000 Leuven, Belgium  
Affiliation: 1 K.U.Leuven, Dept. of  
Abstract: In this paper, we introduce CORRELATE, a programming language with an open implementation framework. In principle, CORRELATE exploits the know how of concurrent object-oriented programming languages with high level syn-chronisation primitives. This is an essential element to support multi-agent systems as the inherent concurrency between the computational agents must be controlled. Another specific element of CORRELATE is its capability to define autonomous operations: we illustrate how these language elements can be used to program reactive and cognitive multi-agent systems. CORRELATE is aimed to be a powerful testbed and development system at the crossroad of many disciplines: generic aspects of agent models and architectures are supported while the open implementation framework can still be customized to deal with different flavors of agent-oriented programming. 
Abstract-found: 1
Intro-found: 1
Reference: [BDA96] <author> Christof Baeijs, Yves Demazeau, and Luis Alvarez. </author> <title> SIGMA: Application of Multi-Agent Systems to Cartographic Generalization. </title> <booktitle> In Modelling Autonomous Agents in a Mult-Agent World: Agents Breaking Away, </booktitle> <volume> number 1038, </volume> <pages> pages 163-176. </pages> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <year> 1996. </year>
Reference-contexts: The scope of applications we aim to support ranges from large populations of relatively simple agents that expose emergency (for example, see <ref> [BDA96] </ref>) to intelligent software agents on the Internet (for a challenging example, see [Ste94]). In the sequel of this paper, we will use the term agent space as a synonym for a multi-agent system.
Reference: [BJV94] <author> Stijn Bijnens, Wouter Joosen, and Pierre Verbaeten. </author> <title> Language Constructs for Coordination in an Agent Space. </title> <editor> In Y. Demazeau, J-P. Muller, and J. Perram, editors, </editor> <booktitle> Modelling Autonomous Agents in a Multi-Agent World, Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <note> To be published. </note>
Reference-contexts: In order to express a message based interaction the sender must specify the recipient of a particular message. Most programming models employ a name-based scheme to indicate the recipient (s). Agents will have to use neighbor-lists <ref> [BJV94] </ref> to remember the partners to communicate with. The pitfalls of pure name-based interaction are caused by extensive book-keeping operations that become essential when the neighbor lists change dynamically. <p> These primitives are called pattern-based group communication. This facility assists in specifying sender-initiated coordination towards a group of recipients based on some of their properties. We have discussed this feature extensively in <ref> [BJV94] </ref>. 4.2 Synchronisation In section 3, we have introduced the behaviour section of a CORRELATE class. The discussion remained restricted so far: preconditions have been used to show constraints that are solely determined by the internal state of an individual agent. <p> The ElegantDiningPhilosopher class Pattern-based specification of other agents is also possible when expressing multi-agent synchronisation: Figure 6 shows a more elegant solution of the same problem. One can see how explicit data members are removed from the high level agent description 5 . We refer to <ref> [BJV94] </ref> for a more complete description of the syntax for pattern-based interaction/synchronisation. <p> For instance, in <ref> [BJV94] </ref> we have illustrated how CORRELATE can be exploited in the development of reactive multi-agent systems. In this context, the availability of coordination primitives has shifted the programming interface to a level which is far above the traditional stimuli-response paradigm that is often the basis for programming reactive systems.
Reference: [IGR92] <author> F.F. Ingrand, M.P. Georgeff, and Anand S. Rao. </author> <title> An architecture for real--time reasoning and system control. </title> <journal> IEEE Expert, </journal> <volume> 7(6), </volume> <year> 1992. </year>
Reference-contexts: Dependent on a particular agent model/language, a variation on the basic loop of the interpreter may be defined. An excellent and comprehensive example can be found in [Rao96]: here an abstract interpreter is presented for AgentSpeak, a relative of the Procedural Reasoning System PRS <ref> [IGR92] </ref>. One of the key advantages of the CORRELATE open language framework is that the individual meta-object of an agent can be specialised to execute the agent interpreter.
Reference: [JBR + 95] <author> Wouter Joosen, Stijn Bijnens, Bert Robben, Johan Van Oeyen, and Pierre Verbaeten. </author> <title> Flexible load balancing software for parallel applications in a time-sharing environment. </title> <editor> In Bob Hertzberger and Giuseppe Serazzi, editors, </editor> <booktitle> High-Performance Computing and Networking, LNCS-919, </booktitle> <pages> pages 398-406. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The main question which we have to address in this section is related to the overall applicability of our framework. How and to which extent do we support cognitive agents? The answer contains two elements: First, note that sophisticated (intelligent) agents have been built in our framework <ref> [JBR + 95] </ref>. In particular, we refer to a load balancing framework that improves the execution of irregular scientific simulations: load managers that are instantiated from this framework are able to dynamically modify their policy. Appropriate cooperation protocols have been used for this purpose.
Reference: [MMWY92] <author> Hidehiko Masuhara, Satoshi Matsuoka, Takuo Watanabe, and Akinori Yonezawa. </author> <title> Object-oriented concurrent reflective languages can be implemented efficiently. </title> <booktitle> In Proceedings OOPSLA '92, ACM SIGPLAN Notices, </booktitle> <pages> pages 127-XXX, </pages> <month> October </month> <year> 1992. </year> <title> Published as Proceedings OOPSLA '92, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> volume 27, number 10. </volume>
Reference-contexts: It is obvious that local reference objects generate run time overhead which cannot be ignored. However, significant progress has been made in optimizing such architectures <ref> [MMWY92] </ref> and the ratio between computation and communication for one particular application can definitely result in acceptable performance. 5 Discussion CORRELATE has been developed in a close collaboration between application domain experts and language oriented research groups (ourselves in the first place).
Reference: [Rao96] <author> Anand S. Rao. AgentSpeak (L): </author> <title> BDI Agents Speak Out in a Logical Computable Language. </title> <booktitle> In Modelling Autonomous Agents in a Mult-Agent World: Agents Breaking Away, </booktitle> <volume> number 1038, </volume> <pages> pages 42-55. </pages> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <year> 1996. </year>
Reference-contexts: Dependent on a particular agent model/language, a variation on the basic loop of the interpreter may be defined. An excellent and comprehensive example can be found in <ref> [Rao96] </ref>: here an abstract interpreter is presented for AgentSpeak, a relative of the Procedural Reasoning System PRS [IGR92]. One of the key advantages of the CORRELATE open language framework is that the individual meta-object of an agent can be specialised to execute the agent interpreter.
Reference: [SBKL93] <author> Donald Steiner, Alasteir Burt, Michael Kolb, and Christelle Lerin. </author> <title> The Concept MAI2L. </title> <booktitle> In Modelling Autonomous Agents in a Mult-Agent World: From Recation to Cognition, </booktitle> <pages> pages 144-151. </pages> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <year> 1993. </year>
Reference-contexts: Such systems have been called value autonomous systems [VS96]. The relevance of refining a classification of true autonomous agents is limited for the sequel of this paper. A goal is a description of the future state of the world <ref> [SBKL93] </ref>. An agent can only evaluate whether a goal has been satisfied by looking at itself, at other agents or at the environment.
Reference: [Sho93] <author> Y. Shoham. </author> <title> Agent-Oriented Programming. </title> <journal> Artificial Intelligence, </journal> (60):51-92, 1993. 
Reference-contexts: Further on, we will discuss how our work affects the full scope of multi-agent systems. Our background is in modelling distributed systems using concurrent object-oriented technology. Concurrent object-oriented programming is a powerful paradigm to model autonomous agents that interact with each other. Agent-oriented programming <ref> [Sho93] </ref> specialises the object-oriented notions by fixing the state (now called mental state) of the objects (now called agents) to consist of instance variables such as beliefs (including beliefs about the world, about themselves, and about one another), capabilities, and decisions. <p> Also, one can see from some of the examples in this paper (Figure 3) that the construction of sophisticated agents is realistic indeed. Secondly, and much more important, the CORRELATE run time system is a strong base for embedding high level agent interpreters. For example, in <ref> [Sho93] </ref>, an agent interpreter has been modelled to be an execution engine that executes a basic control loop 1. that reads current messages and updates the mental state of the agent; 2. and that executes commitments for the current time.
Reference: [ST90] <author> T. Sueyoshi and M. Tokoro. </author> <title> Dynamic Modeling of Agents for Coordination. </title> <booktitle> In Proceedings of the European Workshop on Modeling Autonomous Agents in a Multi-Agent World (MAAMAW'90), </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Agents interact by sending messages to each other. Messages are pieces of information exchanged among agents and are treated as stimuli by the receiving agent. Different types of messages can be exchanged <ref> [ST90] </ref> ( e.g. action messages, observation messages, ...). At the application level, our interest is in supporting multi-agent systems which have been classified as being either cognitive or reactive.
Reference: [Ste94] <author> Luc Steels. </author> <title> Beyond Objects. </title> <booktitle> In Object-Oriented Programming, Proceedings of ECOOP'94, </booktitle> <pages> pages 1-11. </pages> <booktitle> Lecture Notes in Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: The scope of applications we aim to support ranges from large populations of relatively simple agents that expose emergency (for example, see [BDA96]) to intelligent software agents on the Internet (for a challenging example, see <ref> [Ste94] </ref>). In the sequel of this paper, we will use the term agent space as a synonym for a multi-agent system. An agent space is a system composed of a set of intelligent agents which can cooperate, compete or simply coexist. Agents interact by sending messages to each other.
Reference: [VS96] <author> H.J.E Verhagen and R.A. Smit. </author> <title> Modeling Social Agents in a Multi-Agent World. </title> <booktitle> In Position Paper for the 7th European Workshop on Modelling Autonomous Agents in a Mult-Agent World, </booktitle> <pages> pages 163-176, </pages> <year> 1996. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Note that one can consider the capability of an agent to dynamically change its set of goals. Such systems have been called value autonomous systems <ref> [VS96] </ref>. The relevance of refining a classification of true autonomous agents is limited for the sequel of this paper. A goal is a description of the future state of the world [SBKL93].
References-found: 11

