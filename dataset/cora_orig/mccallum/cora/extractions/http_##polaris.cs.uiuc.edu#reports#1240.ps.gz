URL: http://polaris.cs.uiuc.edu/reports/1240.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: MaxPar Extensions for Isolating Performance Problems  
Author: Samuel Ho 
Address: Urbana, Illinois 61801  
Affiliation: Center for Supercomputing Research and Development University of Illinois,  
Abstract: Many applications are too large for easy hand optimization. The Parallel Performance Analyst is a tool for automatically characterizing and identifying the regions of the application most deserving of programmer attention. Among its components are interactive and traced-based profiling tools, and the MaxPar execution-driven simulator, which computes the amount of parallelism inherent in a code, as opposed to parallelism actually exploited on a particular machine. This report describes the PPA framework, as well as the extensions to MaxPar performed for PPA. Examples show that substantial speedups are achievable, even with no a priori knowledge of the code's structure.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ding-Kai Chen. </author> <title> MaxPar: An Execution Driven Simulator for Studying Parallel Systems. </title> <type> Master's thesis, </type> <institution> Univ. of Illinois at Urbana-Champaign, Center for Supercomputing Res. & Dev., </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: Where it is low, more fundamental changes are necessary. In particular, hints to the compiler are unlikely to be useful, since such hints, by their very nature, cannot change the method by which the final answer is computed. The MaxPar execution-driven simulator <ref> [1] </ref> is an aid to determining the amount of parallelism available within an application code. This report describes a number of extensions and applications of the MaxPar tool. <p> Output options include the following: execution summary; profile histogram; detailed trace; and bottleneck (low parallelism) trace. More detailed information on MaxPar is available from its author <ref> [1] </ref>. In addition, he has also applied MaxPar in additional studies, including the effects of synchronization and granularity on parallelism [2] and cross-iteration dependencies (DOACROSS parallelism)[3].
Reference: [2] <author> Ding-Kai Chen, Hong-Men Su, and Pen-Chung Yew. </author> <title> The Impact of Synchronization and Granularity on Parallel Systems. </title> <booktitle> Proceedings of the 17th Int'l. Symp. on Computer Architecture, </booktitle> <address> Seattle, WA, </address> <month> December </month> <year> 1989. </year>
Reference-contexts: Output options include the following: execution summary; profile histogram; detailed trace; and bottleneck (low parallelism) trace. More detailed information on MaxPar is available from its author [1]. In addition, he has also applied MaxPar in additional studies, including the effects of synchronization and granularity on parallelism <ref> [2] </ref> and cross-iteration dependencies (DOACROSS parallelism)[3]. This continuing work is beyond the scope of this report. 3 MaxPar and TraceView TraceView [6] is a general-purpose trace visualization tool, running under Motif and X. TraceView was designed to accommodate data from the Flow-Trace and PerfTrace tools running on the Cray.
Reference: [3] <author> Ding-Kai Chen and Pen-Chung Yew. </author> <title> An Empirical Study on DOACROSS Loops. </title> <booktitle> Proceedings of Supercomputing'91, </booktitle> <address> Albuquerque, NM, </address> <pages> pages 630-632, </pages> <month> November 18-22, </month> <year> 1991. </year>
Reference: [4] <author> G. Cybenko, J. Bruner, S. Ho, and S. Sharma. </author> <title> Parallel Computing and the Perfect Benchmarks. </title> <booktitle> Presented at the Int'l. Symposium on Supercomputing, </booktitle> <address> Fukwoka, JAPAN, </address> <month> November 6-8, </month> <year> 1991. </year>
Reference-contexts: The Parallel Performance Analyst (PPA) project <ref> [4] </ref> sought to devise a method of drawing attention to those parts of the application which would benefit most from hand optimization.
Reference: [5] <author> Rudolf Eigenmann, Jay Hoeflinger, Zhiyuan Li, and David Padua. </author> <title> Experience in the Automatic Parallelization of Four Perfect-Benchmark Programs. </title> <booktitle> Proceedings of the Fourth Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Santa Clara, CA, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: In fact, the TRACK code was, in large part, parallelized by eliminating these control dependencies <ref> [5] </ref>. Some computers and compilers do have limited support for speculative execution, which has the effect of deferring certain control dependencies.
Reference: [6] <author> Allen Malony, David Hammerslag, and David Jablonowski. </author> <title> TraceView: </title>
Reference-contexts: In addition, he has also applied MaxPar in additional studies, including the effects of synchronization and granularity on parallelism [2] and cross-iteration dependencies (DOACROSS parallelism)[3]. This continuing work is beyond the scope of this report. 3 MaxPar and TraceView TraceView <ref> [6] </ref> is a general-purpose trace visualization tool, running under Motif and X. TraceView was designed to accommodate data from the Flow-Trace and PerfTrace tools running on the Cray. Both of these tools instrument FORTRAN code to produce a record of each routine entry and exit.
References-found: 6

