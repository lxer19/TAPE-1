URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS96-31.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: ASTRAL Software Development Environment Users Manual  
Author: Paul Z. Kolano 
Date: revised July 1996  
Address: Santa Barbara  
Affiliation: Reliable Software Group Computer Science Department University of California,  
Abstract-found: 0
Intro-found: 1
Reference: [CK 93] <author> Coen-Porisini, A. and R.A. Kemmerer, </author> <title> The Composability of ASTRAL Realtime Specifications, </title> <booktitle> Proceedings of the International Symposium on Software Testing and Analysis, </booktitle> <address> Cambridge, Massachusetts, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: The Build button takes the information provided in the call generation and related clauses of the composition level, along with the specifications being composed, and builds the composite specification as described in <ref> [CK 93] </ref>. This procedure can only be invoked if all call generation clauses reference an existing transition exported from an existing process and the formula is in the correct form (as indicated by the validation procedure). <p> The Generate composition proof obligations to f i l e . . button is only available when the SDE is in composition mode. This action produces the proofs described in <ref> [CK 93] </ref> and saves them in the file comp_proofs.output. Finally, About A S T R A L . . displays miscellaneous information about the SDE.
Reference: [CKM 94] <author> Coen-Porisini, A., R.A. Kemmerer and D. Mandrioli, </author> <title> A Formal Framework for ASTRAL Intra-level Proof Obligations, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-20, No. 8, </volume> <month> August </month> <year> 1994. </year>
Reference-contexts: Some examples of these are: hierarchical navigation of specifications syntax directed editing online syntax documentation automatic logic expression formatting ability to jump directly to error locations ASTRAL <ref> [CKM 94] </ref> is a formal specification language for real-time systems. It is intended to support formal software development and, therefore, has been formally defined. The structuring mechanisms in ASTRAL allow one to build modularized specifications of complex systems with layering. <p> The Dump work to default printer.. button uses the command associated with the current print option (section 8) to print the current navigation object on the default printer. Generate intralevel proof obligations to f i l e . . constructs the intralevel 22 proofs described in <ref> [CKM 94] </ref> and outputs them to the file intra.output. Similarly, Generate interlevel proof obligations to f i l e . . constructs the interlevel proofs from [CKM 95] and outputs them to inter.output.
Reference: [CKM 95] <author> Coen-Porisini, A., R.A. Kemmerer and D. Mandrioli, </author> <title> A Formal Framework for ASTRAL Inter-level Proof Obligations, </title> <booktitle> Proceedings of the Fifth European Software Engineering Conference, </booktitle> <address> Barcelona, Spain, </address> <month> September </month> <year> 1995. </year> <month> 23 </month>
Reference-contexts: Generate intralevel proof obligations to f i l e . . constructs the intralevel 22 proofs described in [CKM 94] and outputs them to the file intra.output. Similarly, Generate interlevel proof obligations to f i l e . . constructs the interlevel proofs from <ref> [CKM 95] </ref> and outputs them to inter.output. In order to generate the interlevel proofs, the current specification must be valid or in the case of compositions, each specification must be valid (although the full composition itself is not required to be valid).
References-found: 3

