URL: http://www.cs.wustl.edu/~schmidt/words-99.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/new.html
Root-URL: http://www.cs.wustl.edu
Title: Measuring OS Support for Real-time CORBA ORBs  
Author: David L. Levine, Sergio Flores-Gaitan, and Douglas C. Schmidt 
Keyword: Real-time Object-Oriented Systems, Operating System QoS Support, Real-time CORBA Object Request Broker  
Note: Presented at the 4 th IEEE International Workshop on Object-oriented  
Address: St. Louis, MO 63130, USA  (WORDS'99), Santa Barbara, California,  
Affiliation: Department of Computer Science, Washington University  Real-time Dependable Systems  
Email: flevine,sergio,schmidtg@cs.wustl.edu  
Date: January 2729, 1999.  
Abstract: This paper compares and evaluates the suitability of real-time operating systems, VxWorks and LynxOS, and general-purpose operating systems with real-time extensions, Windows NT, Solaris, and Linux, for real-time ORB middleware. While holding the hardware and ORB constant, we vary these operating systems and measure platform-specific variations in context switching overhead and priority inversions. Our findings illustrate that general-purpose operating systems like Windows NT, Solaris, and Linux are not yet suited to meet the demands of applications with stringent QoS requirements. Although Linux provides good raw performance, its high jitter makes it unsuitable for real-time applications. Both LynxOS and VxWorks do enable predictable and efficient ORB performance, however, thereby making them suitable as OS platforms for real-time CORBA applications. In general, our results underscore the need for a measure-driven methodology to pinpoint sources of overhead and priority inversion in real-time ORB endsystems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Object Management Group, </institution> <note> Realtime CORBA 1.0 Joint Submission, OMG Document orbos/98-12-05 ed., </note> <month> December </month> <year> 1998. </year>
Reference-contexts: 1 Introduction There has been recent progress towards standardizing object-oriented (OO) middleware for real-time and embedded systems. In particular, the OMG is actively investigating standard extensions to CORBA to support distributed real-time applications <ref> [1] </ref>. The goal of standardizing real-time CORBA is fl This work was supported in part by Boeing, CDI/GDIS, DARPA contract 9701516, Lucent, Motorola, NSF grant NCR-9628218, Siemens, and Sprint. to enable real-time applications to interwork throughout small footprint [2] embedded systems and heterogeneous distributed networks, such as the Internet. <p> TAO's real-time Object Adapter [10] uses perfect hashing [15] and active demultiplexing [6] optimizations to dispatch servant operations in constant O (1) time, regardless of the number of active connections, servants, and operations defined in IDL interfaces. ORB Run-time Scheduler: A real-time scheduler <ref> [1] </ref> maps application QoS requirements, such as include bounding end-to-end latency and meeting periodic scheduling deadlines, to ORB endsystem/network resources, such as ORB endsys-tem/network resources include CPU, memory, network connections, and storage devices. TAO's run-time scheduler sup ports both static [4] and dynamic [5] real-time scheduling strategies.
Reference: [2] <author> Object Management Group, </author> <title> Minimum CORBA Request for Proposal, </title> <editor> OMG Document orbos/97-06-14 ed., </editor> <month> June </month> <year> 1997. </year>
Reference-contexts: The goal of standardizing real-time CORBA is fl This work was supported in part by Boeing, CDI/GDIS, DARPA contract 9701516, Lucent, Motorola, NSF grant NCR-9628218, Siemens, and Sprint. to enable real-time applications to interwork throughout small footprint <ref> [2] </ref> embedded systems and heterogeneous distributed networks, such as the Internet. Notwithstanding the significant efforts of the OMG real-time CORBA standardization effort, however, developing, standardizing, and leveraging distributed real-time ORB mid-dleware remains hard.
Reference: [3] <author> D. C. Schmidt, A. Gokhale, T. Harrison, and G. </author> <month> Parulkar, </month>
Reference-contexts: Conventional CORBA ORBs are generally unsuited for performance-sensitive, distributed real-time applications due to their (1) lack of QoS specification interfaces, (2) lack of QoS enforcement, (3) lack of real-time programming features, and (4) overall lack of performance and predictability <ref> [3] </ref>.
References-found: 3

