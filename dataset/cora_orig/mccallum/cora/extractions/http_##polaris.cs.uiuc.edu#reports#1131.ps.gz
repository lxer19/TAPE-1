URL: http://polaris.cs.uiuc.edu/reports/1131.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Email: ftuchman,davej,gcg@uicsrd.csrd.uiuc.edu  
Title: Run-time Visualization of Program Data  
Author: Allan Tuchman, David Jablonowski, and George Cybenko 
Address: Urbana, Illinois 61801  
Affiliation: Center for Supercomputing Research and Development University of Illinois at Urbana-Champaign  
Abstract: An important improvement to visualization systems will provide a graphics "window into an application" displaying program data at run-time through an easy-to-use graphical interface. With little or no instrumentation of the application the user will be able to dynamically select data for graphical display as the program executes on a remote computer system. The data to be displayed and the type of display to be used are chosen interactively while the application is executing. Any data display can be enabled or disabled at any time; it is not necessary to specify the data or graphics technique before compilation as with conventional graphics tools. We propose an architecture for such a remote visualization system, and describe Vista, our implementation. Designed primarily for scientific visualization, Vista also offers an environment for more effective debugging and program development. 
Abstract-found: 1
Intro-found: 1
Reference: [Bro88] <author> Marc H. Brown. </author> <title> Exploring algorithm using Balsa-II. </title> <journal> Computer, </journal> <volume> 21(5) </volume> <pages> 14-36, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: It is possible though, with some small modification to the program, to have the application program write directly to the start of the visualization network. This provides an excellent tool to manipulate predetermined data from an application. However, neither system provides direct access to arbitrary program data. The Balsa-II <ref> [Bro88] </ref> system for algorithm animation provides the same simulation-time animation capabilities that we strive for, yet requires considerable instrumentation of the application source program. It is not easy to dynamically show new data and the system is not inherently distributed.
Reference: [Dye90] <author> D. Scott Dyer. </author> <title> A dataflow toolkit for visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(4) </volume> <pages> 60-69, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Each shares some of the characteristics of our work, but most address a slightly different problem. The most well known systems for scientific visualization are AVS [UTK + 89], developed by Stardent Computer, and aPE <ref> [Dye90] </ref> from Ohio State University. Both of these systems provide a visual programming interface which allows the user to specify a sequence or network of processes to manipulate data. The individual processes can execute on a local or a remote computer.
Reference: [HHR89] <author> Esa Helttula, Aulikki Hyrskykari, and Kari-Jouko Raiha. </author> <title> Graphical specification of algorithm animations with Aladdin. </title> <booktitle> In Proceedings of the Twenty-Second Annual Hawaii International Conference on System Science, </booktitle> <pages> pages 892-901, </pages> <address> Kailua-Kona, Hawaii, </address> <month> January </month> <year> 1989. </year> <note> IEEE. </note>
Reference-contexts: The Balsa-II [Bro88] system for algorithm animation provides the same simulation-time animation capabilities that we strive for, yet requires considerable instrumentation of the application source program. It is not easy to dynamically show new data and the system is not inherently distributed. Aladdin <ref> [HHR89] </ref> has similar use in algorithm animation, and uses a graphical interface to minimize the amount of graphics programming required to visualize the algorithm.
Reference: [JHH + 88] <author> W. E. Johnston, D. E. Hall, J. Huang, M. Rible, and D. Robertson. </author> <title> Distributed scientific video movie making. </title> <booktitle> In Proceedings of Supercomputing '88, </booktitle> <pages> pages 156-161, </pages> <address> Orlando, Florida, </address> <month> November 14-18 </month> <year> 1988. </year>
Reference-contexts: Aladdin [HHR89] has similar use in algorithm animation, and uses a graphical interface to minimize the amount of graphics programming required to visualize the algorithm. Johnston and others at Lawrence Berkeley Laboratory have developed a system for distributed scientific movie making using a Sun workstation and a Cray supercomputer <ref> [JHH + 88] </ref>. By modifying the source program to include calls to their Scry library, an application can have data rendered on the supercomputer or the workstation, displayed on the workstation, then recorded on a low-cost animation system.
Reference: [NT89] <author> Henry Neeman and Allan Tuchman. </author> <title> Simulation time animation system. </title> <type> Technical Report 859, </type> <institution> Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, </institution> <month> February </month> <year> 1989. </year>
Reference-contexts: Their work is most significant in distributed image display and in the low-cost animation solution. Scry does not address dynamic data access. Our own work in this area began as we tried to abstract the necessary control and data access requirements for a distributed simulation-time animation system (STAS) <ref> [NT89] </ref>. This system was unwieldy and required considerable additions and modifications to the program source. In later work we separated data access from data display in a remote visualization environment for looking at matrix data in linear algebra applications [TB90].
Reference: [TB90] <author> Allan M. Tuchman and Michael W. Berry. </author> <title> Matrix visualization in the design of numerical algorithms. </title> <journal> ORSA Journal on Computing, </journal> <volume> 2(1) </volume> <pages> 84-92, </pages> <year> 1990. </year>
Reference-contexts: This system was unwieldy and required considerable additions and modifications to the program source. In later work we separated data access from data display in a remote visualization environment for looking at matrix data in linear algebra applications <ref> [TB90] </ref>. One way to provide distributed graphics is with a distributed window system such as the X Window System or NeWS. Both allow remote display of graphics, but graphics algorithms still execute in the application (client) process.
Reference: [TJC91] <author> Allan Tuchman, David Jablonowski, and George Cybenko. </author> <title> Vista: A system for remote data visualization. </title> <type> Technical Report 1067, </type> <institution> Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: The underlying Vista model shown in Figure 4 identifies each major component of the system. As each module is presented, its primary functions and interface to other processes is described. Implementation is explained in more detail in <ref> [TJC91] </ref>. Each of the four large boxes in Figure 4 represents an independent Vista module and is implemented as a separate process. 6.1 Visualization Manager The user interface is a part of the visualization server process that we call the Visualization Manager, or VM.
Reference: [UTK + 89] <author> Craig Upson, T Faulhaber, Jr., David Kamins, David Laidlaw, David Schlegel, Jeffrey Vroom, Robert Gurwitz, and An-dries van Dam. </author> <title> The application visualization system: A computational environment for scientific visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(4) </volume> <pages> 30-42, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: Each shares some of the characteristics of our work, but most address a slightly different problem. The most well known systems for scientific visualization are AVS <ref> [UTK + 89] </ref>, developed by Stardent Computer, and aPE [Dye90] from Ohio State University. Both of these systems provide a visual programming interface which allows the user to specify a sequence or network of processes to manipulate data. The individual processes can execute on a local or a remote computer.
References-found: 8

