URL: http://www.cs.washington.edu/research/jair/volume8/srivastava98a.ps
Refering-URL: http://www.cs.washington.edu/research/jair/abstracts/srivastava98a.html
Root-URL: 
Email: biplav@asu.edu  rao@asu.edu  
Title: Synthesizing Customized Planners from Specifications  
Author: Biplav Srivastava Subbarao Kambhampati 
Address: Tempe, AZ 85287.  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Note: Journal of Artificial Intelligence Research 8 (1998) 93-128 Submitted 5/97; published 3/98  
Abstract: Existing plan synthesis approaches in artificial intelligence fall into two categories domain independent and domain dependent. The domain independent approaches are applicable across a variety of domains, but may not be very efficient in any one given domain. The domain dependent approaches need to be (re)designed for each domain separately, but can be very efficient in the domain for which they are designed. One enticing alternative to these approaches is to automatically synthesize domain independent planners given the knowledge about the domain and the theory of planning. In this paper, we investigate the feasibility of using existing automated software synthesis tools to support such synthesis. Specifically, we describe an architecture called CLAY in which the Kestrel Interactive Development System (KIDS) is used to derive a domain-customized planner through a semi-automatic combination of a declarative theory of planning, and the declarative control knowledge specific to a given domain, to semi-automatically combine them to derive domain-customized planners. We discuss what it means to write a declarative theory of planning and control knowledge for KIDS, and illustrate our approach by generating a class of domain-specific planners using state space refinements. Our experiments show that the synthesized planners can outperform classical refinement planners (implemented as instan-tiations of UCP, Kambhampati & Srivastava, 1995), using the same control knowledge. We will contrast the costs and benefits of the synthesis approach with conventional methods for customizing domain independent planners.
Abstract-found: 1
Intro-found: 1
Reference: <author> Bacchus, F., & Kabanza, F. </author> <year> (1995). </year> <title> Using temporal logic to control search in a forward chaining planner. New Directions in AI Planning: EWSP 95, </title> <publisher> IOS Press, </publisher> <pages> 141-153. </pages>
Reference: <author> Backstrom, C., & Nebel, B. </author> <year> (1993). </year> <title> Complexity results in sas+ planning. </title> <type> Research Report, </type> <institution> Dept Comp.and Info Sc., Linkoping Univ., Sweden. </institution>
Reference-contexts: The first, called the STRIPS representation (Fikes & Nilsson, 1990) represents the world in terms of ground atoms in a first order logic. The action applicability conditions and effects are also described in terms of conjunctions of ground atoms. The second variant <ref> (Backstrom & Nebel, 1993) </ref> models the world and actions directly in terms of multi-valued state variables and their values.
Reference: <author> Barrett, A., & Weld, D. </author> <year> (1994). </year> <title> Partial order planning: Evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67 (1). </volume>
Reference-contexts: These are known, respectively, as Forward State Space or progression refinement (FSS), Backward State Space Refinement or regression refinement (BSS), Plan Space Refinement (PSS) and Task-Reduction Refinement. STRIPS (Fikes & Nilsson, 1990) is an example of a planner using the FSS refinement, TOPI <ref> (Barrett & Weld, 1994) </ref> uses the BSS refinement, SNLP (McAllester & Rosenblitt, 1991) uses the plan-space refinement and NONLIN (Tate, 1977) uses the task-reduction refinement. Given this background, the declarative theory of plan generation in CLAY corresponds to theories of the refinements.
Reference: <author> Blum, A., & Furst, M. </author> <year> (1995). </year> <title> Fast planning through planning graph analysis. </title> <booktitle> Proc IJCAI 95, </booktitle> <pages> 1636-1642. </pages>
Reference-contexts: Once a package reaches its goal position, it should not be moved. 5.1.3 Tyre World Domain The Tyre world (Russell & Norvig, 1995) is a benchmark domain with complex causal structure <ref> (Blum & Furst, 1995) </ref>. In the "fixit" problem from this domain, a car's tyre is flat and must be replaced by a spare flat tyre (which must first be inflated). The original tyre has to be placed in the boot and all tools must be returned to the boot. <p> An example of this is the recent research on plan synthesis approaches based on constraint satisfaction. In fact, domain independent planners such as Graphplan <ref> (Blum & Furst, 1995) </ref> can solve our test suites in equal or better time compared to the synthesized planners.
Reference: <author> Burstein, M., & Smith, D. </author> <year> (1996). </year> <title> ITAS: A portable, interactive transportation scheduling tool using a search engine generated from formal specifications. </title> <booktitle> In Proceedings of 3rd AI Planning Systems Conference, </booktitle> <pages> pp. 35-44. </pages>
Reference: <author> Fikes, R., & Nilsson, N. </author> <year> (1990). </year> <title> STRIPS: A new approach to the application of theorem proving to problem solving. Readings in Planning. </title> <publisher> Morgan Kaufmann Publ., </publisher> <address> San Mateo, CA. </address>
Reference-contexts: The existing domain independent plan-synthesis algorithms correspond to four different ways of refining partial plans. These are known, respectively, as Forward State Space or progression refinement (FSS), Backward State Space Refinement or regression refinement (BSS), Plan Space Refinement (PSS) and Task-Reduction Refinement. STRIPS <ref> (Fikes & Nilsson, 1990) </ref> is an example of a planner using the FSS refinement, TOPI (Barrett & Weld, 1994) uses the BSS refinement, SNLP (McAllester & Rosenblitt, 1991) uses the plan-space refinement and NONLIN (Tate, 1977) uses the task-reduction refinement. <p> The actions are described in terms of the specific variable-value combinations that are needed for them to be applicable, and the variable-value combinations they will enforce after execution. Two variants of this general modeling approach have become popular in the planning community. The first, called the STRIPS representation <ref> (Fikes & Nilsson, 1990) </ref> represents the world in terms of ground atoms in a first order logic. The action applicability conditions and effects are also described in terms of conjunctions of ground atoms.
Reference: <author> Fink, E., & Veloso, M. </author> <year> (1994). </year> <title> Formalizing the prodigy planning algorithm. </title> <type> CMU CS Tech Report CMU-CS-94-123. </type>
Reference-contexts: This makes for a fairer comparison between synthesized and general-purpose planners. In some existing planners such as UCPOP (Penberthy & Weld, 1994) and PRODIGY <ref> (Fink & Veloso, 1994) </ref>, customization is supported by allowing the user to specify search control rules that are checked at every choice point during search. Such control rules can be used to rank the search nodes based on some heuristic, or prune unpromising nodes.
Reference: <author> Gomes, C., Smith, D., & Westfold, S. </author> <year> (1996). </year> <title> Synthesis of schedulers for planned shut downs of power plants. </title> <booktitle> Proc. of 11th Knowledge-Based Software Engg. Conf., </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos,CA, </publisher> <pages> 12-20. </pages>
Reference-contexts: Although eventually the KIDS system may support a larger variety of design tactics, customizing design tactics to task classes is very much in line with the current practice in automated software synthesis <ref> (Gomes, Smith, & Westfold, 1996) </ref>. 7.2 Future Directions The work presented here can be seen as the beginning of a fairly open-ended research program that complements, rather than competes with, the research into efficient planning algorithms.
Reference: <author> Gomes, C. P. </author> <year> (1995). </year> <title> Planning in kids. </title> <type> Technical report RL-TR-95-205, </type> <institution> Rome Laboratory. </institution>
Reference: <author> Kambhamapti, S. </author> <year> (1995). </year> <title> Comparative analysis of partial order planning and htn planning. </title> <journal> ACM SIGART Bulletin, </journal> <volume> 6. </volume>
Reference: <author> Kambhampati, S. </author> <year> (1997a). </year> <title> Challenges in bridging plan-sythesis paradigms. </title> <booktitle> In Proc. Intl. Joint Conference on Artificial Intelligence (IJCAI-97). </booktitle> <publisher> Morgan-Kaufmann. </publisher>
Reference: <author> Kambhampati, S. </author> <year> (1997b). </year> <title> Refinement planning as a unifying framework for plan synthesis. </title> <journal> AI Magazine, </journal> <volume> 18 (2), </volume> <pages> 67-98. </pages>
Reference-contexts: The planner can then take planning problems as input and return results (plans). In order to support planner synthesis, we have to develop and input a theory of planning to KIDS. As discussed in <ref> (Kambhampati, 1997b) </ref>, the traditional plan synthesis techniques can be described in terms of a common plan representation, with different planners corresponding to different ways of refining the partial plans such as progression, regression and plan-space refinements (see Section 2.2). <p> provided initial impetus for our own research. 2.2 Theories of Plan Synthesis As mentioned earlier, using KIDS to derive planning software in CLAY involves figuring out (a) how declarative theories for different types of classical planning are specified and (b) what algorithmic design templates are best suited to planner synthesis. <ref> (Kambhampati, 1997b) </ref> provides an overview of traditional plan synthesis approaches. As discussed there, plan synthesis approaches come in many varieties with very little superficial commonality between them. <p> We also notice that progression planners perform better in the left plot and regression planners perform better in the right plot. This trend can be explained easily in terms of the way the refinements operate <ref> (Kambhampati, 1997b) </ref>. In the left figure, based on the nature of the goals, the branching factor for the regression planners may become enormous because it cannot detect all the conflicts among the steps that give conditions at the goal (or at steps which eventually support the goal condition).
Reference: <author> Kambhampati, S., Katukam, S., & Qu, Y. </author> <year> (1996). </year> <title> Failure driven dynamic search control for partial order planners: An explanation-based approach. </title> <journal> Artificial Intelligence, </journal> <volume> 88, </volume> <pages> 253-315. </pages>
Reference-contexts: Ideally, we would like to support the synthesis of customized planners based on the full gamut of planning technologies including partial order and task-reduction planning. These latter are already subsumed by the refinement planning framework developed in <ref> (Kambhampati & Srivastava, 1996) </ref> and supporting their synthesis is mainly a matter of supporting a more flexible partial plan representation in KIDS (representing plans as sequences over actions has sufficed until now, as we were only addressing the synthesis of state-space planners).
Reference: <author> Kambhampati, S., Knoblock, C., & Yang, Q. </author> <year> (1995). </year> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial order planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76, </volume> <pages> 167-238. </pages> <note> Special Issue on Planning and Scheduling. </note>
Reference-contexts: Similarly, in the Tyre domain (Russell & Norvig, 1995), the "fixit" problem was solved in under a minute. To put these performance results in perspective, we compared KIDS' synthesized planners to a set of classical planners implemented as the instantiations the UCP planning system <ref> (Kambhampati & Srivastava, 1995) </ref>. As described later, instantiations of UCP can emulate a spectrum of classical planners, including the popular SNLP planner (McAllester & Rosenblitt, 1991), by selecting the appropriate refinement. <p> For complete details, readers are referred to (Smith, 1992a). The KIDS' global search paradigm is a general form of the refinement search model used to unify classical planners in UCP <ref> (Kambhampati & Srivastava, 1995) </ref>. Specifically, the partial plans correspond to descriptors and the refinements correspond to splitting strategies. <p> Since 115 Srivastava & Kambhampati there are a variety of traditional classical planners each of which have varying tradeoffs (c.f. (Barrett & Weld, 1994; Kambhampati et al., 1995)), we used a "league tournament" approach in our comparison. Specifically, since most popular classical planners correspond to different instantiations of UCP <ref> (Kambhampati & Srivastava, 1995) </ref>, we first ran them all on our blocks world problem distribution to isolate the best traditional planners. Similar study was done to isolate the best synthesized planners for our problem distribution. At this point, the best synthesized planner is compared to the best traditional planner. <p> Instantiations of UCP which do only FSS, BSS or PS refinements can emulate classical forward-state space, backward-state space or plan-space planners, respectively. We call these instantiations UCP-FSS, UCP-BSS and UCP-PS. UCP-LCFR is a hybrid strategy which interleaves FSS, BSS and PS refinements depending on the lower branching factor <ref> (Kambhampati & Srivastava, 1995) </ref>. In both the random blocks world problems (left) and the stacking building problems (right), the left and right plots, UCP-FSS solves all of the 6. We also notice that progression planners perform better in the left plot and regression planners perform better in the right plot.
Reference: <author> Kambhampati, S., Parker, E., & Lambrecht, E. </author> <year> (1997). </year> <title> Understanding and extending graphplan. </title> <booktitle> In Proc. 4th European Conference on Planning. </booktitle> <address> Springer Verlag. </address> <note> 126 Synthesizing Customized Planners from Specifications Kambhampati, </note> <author> S., & Srivastava, B. </author> <year> (1995). </year> <title> Universal classical planning: An algorithm for unifying state space and plan space planning approaches. New Directions in AI Planning: EWSP 95, </title> <publisher> IOS Press, </publisher> <pages> 61-75. </pages>
Reference: <author> Kambhampati, S., & Srivastava, B. </author> <year> (1996). </year> <title> Unifying classical planning approaches. </title> <type> Tech. rep. ASU CSE TR 96-006, </type> <institution> Arizona State University. </institution> <note> Available at http://rakaposhi.eas.asu.edu/yochan.html. </note>
Reference-contexts: Ideally, we would like to support the synthesis of customized planners based on the full gamut of planning technologies including partial order and task-reduction planning. These latter are already subsumed by the refinement planning framework developed in <ref> (Kambhampati & Srivastava, 1996) </ref> and supporting their synthesis is mainly a matter of supporting a more flexible partial plan representation in KIDS (representing plans as sequences over actions has sufficed until now, as we were only addressing the synthesis of state-space planners).
Reference: <author> Kambhampati, S., & Yang, X. </author> <year> (1996). </year> <title> On the role and utility of disjunctive representation in refinement planning. </title> <booktitle> In Proc. Fifth Conf. Principles of Knowledge Representation and Reasoning (KR-96), </booktitle> <pages> pp. 135-146. </pages>
Reference-contexts: Ideally, we would like to support the synthesis of customized planners based on the full gamut of planning technologies including partial order and task-reduction planning. These latter are already subsumed by the refinement planning framework developed in <ref> (Kambhampati & Srivastava, 1996) </ref> and supporting their synthesis is mainly a matter of supporting a more flexible partial plan representation in KIDS (representing plans as sequences over actions has sufficed until now, as we were only addressing the synthesis of state-space planners).
Reference: <author> Lauriere, J. L. </author> <year> (1978). </year> <title> A language and a program for stating and solving combinatorial problems. </title> <journal> Artificial Intelligence, </journal> <volume> 10, </volume> <pages> 29-127. </pages>
Reference: <author> McAllester, D., & Rosenblitt, D. </author> <year> (1991). </year> <title> Systematic nonlinear planning. </title> <booktitle> Proc. 9th NCAI-91, </booktitle> <pages> 634-639. </pages>
Reference-contexts: To put these performance results in perspective, we compared KIDS' synthesized planners to a set of classical planners implemented as the instantiations the UCP planning system (Kambhampati & Srivastava, 1995). As described later, instantiations of UCP can emulate a spectrum of classical planners, including the popular SNLP planner <ref> (McAllester & Rosenblitt, 1991) </ref>, by selecting the appropriate refinement. In our experiments, the best of the KIDS' synthesized planners outperformed the best of the UCP instantiations when given the same domain-specific information. <p> STRIPS (Fikes & Nilsson, 1990) is an example of a planner using the FSS refinement, TOPI (Barrett & Weld, 1994) uses the BSS refinement, SNLP <ref> (McAllester & Rosenblitt, 1991) </ref> uses the plan-space refinement and NONLIN (Tate, 1977) uses the task-reduction refinement. Given this background, the declarative theory of plan generation in CLAY corresponds to theories of the refinements.
Reference: <author> Minton, S. </author> <year> (1988). </year> <title> Learning effective search control knowledge: An explanation-based approach. </title> <type> PhD thesis, </type> <institution> Carnegie -Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: Goal state is A-ON-TOP or N-ON-TOP. 3. Random blocks world problems: A subset of random blocks world problems gener ated using Minton's algorithm <ref> (Minton, 1988) </ref>. In a problem with N blocks, the goal state can have up to N/2 goal conditions. Some domain dependent pruning tests for blocks world were covered in Section 3.
Reference: <author> Minton, S. </author> <year> (1996). </year> <title> Automatically configuring constraint satisfaction problems: A case study. Constraints, </title> <type> 1 (1). </type>
Reference-contexts: COASTOOL (Yoshikawa, Kaneko, Nomura, & Watanabe, 1994) and ALICE systems (Lau 120 Synthesizing Customized Planners from Specifications riere, 1978) take declarative description of CSPs and compile specialized algorithms for solving them, and MULTI-TAC <ref> (Minton, 1996) </ref> supports automatic configuration of constraint satisfaction programs. The MULTI-TAC system, in particular, provides an interesting contrast to our approach.
Reference: <author> Minton, S. </author> <year> (1990). </year> <title> Quantitative results concerning the utility of explanation-based learning. </title> <journal> In Artificial Intelligence, </journal> <volume> Vol. 42, </volume> <pages> pp. 363-392. </pages>
Reference: <author> Penberthy, J., & Weld, D. </author> <year> (1994). </year> <title> UCPOP: A sound, complete, partial order planner for adl. </title> <booktitle> Proc. AAAI-94, </booktitle> <pages> 103-114. </pages>
Reference-contexts: This makes for a fairer comparison between synthesized and general-purpose planners. In some existing planners such as UCPOP <ref> (Penberthy & Weld, 1994) </ref> and PRODIGY (Fink & Veloso, 1994), customization is supported by allowing the user to specify search control rules that are checked at every choice point during search. Such control rules can be used to rank the search nodes based on some heuristic, or prune unpromising nodes.
Reference: <author> Russell, S., & Norvig, P. </author> <year> (1995). </year> <booktitle> Artificial intelligence amodern approach (chap 13). </booktitle> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address>
Reference-contexts: In the logistics domain, a problem with 12 packages, 4 planes 1. In future, we plan to extend our approach to plan-space and task-reduction refinements. 95 Srivastava & Kambhampati and 8 places was solved in under a minute. Similarly, in the Tyre domain <ref> (Russell & Norvig, 1995) </ref>, the "fixit" problem was solved in under a minute. To put these performance results in perspective, we compared KIDS' synthesized planners to a set of classical planners implemented as the instantiations the UCP planning system (Kambhampati & Srivastava, 1995). <p> Packages should either be at the goal position to begin with, or may be loaded inside a plane and then flown to their goal position. 3. Once a package reaches its goal position, it should not be moved. 5.1.3 Tyre World Domain The Tyre world <ref> (Russell & Norvig, 1995) </ref> is a benchmark domain with complex causal structure (Blum & Furst, 1995). In the "fixit" problem from this domain, a car's tyre is flat and must be replaced by a spare flat tyre (which must first be inflated). <p> Without such a heuristic, the progression planner (INDEP-P) could not solve even the 2 plane problem in the same time. 5.2.3 Planners in the Tyre World There are 25 operators, 27 state variables and 6 control rules in our manually encoded Tyre world <ref> (Russell & Norvig, 1995) </ref> description.
Reference: <author> Smith, D. R. </author> <year> (1990). </year> <title> KIDS: A semi-automatic program development system. </title> <journal> IEEE Trans. on Software Engineering special issue on Formal Methods, </journal> <volume> 16, No.9, </volume> <month> Sep </month> <year> 1990. </year>
Reference-contexts: Specifically, as shown in Figure 1, a declarative theory of plan synthesis (theory of planning) is combined with the control knowledge specific to a given domain in a semi-automated software synthesis system called Kestrel Interactive Development System KIDS <ref> (Smith, 1990, 1992a, 94 Synthesizing Customized Planners from Specifications 1992b) </ref> to derive a customized planner for the domain. We will draw the declarative theory of plan synthesis from domain independent planning techniques.
Reference: <author> Smith, D. R. </author> <year> (1992a). </year> <title> Structure and design of global search algorithms. </title> <type> Kestrel Tech. Rep. </type> <institution> KES.U.87.11. </institution>
Reference-contexts: Given this background, the declarative theory of plan generation in CLAY corresponds to theories of the refinements. The algorithm tactic underlying plan generation corresponds to "refinement search." The KIDS system supports an algorithm tactic called "global search" <ref> (Smith, 1992a) </ref> which can be seen as a generalization of this refinement search. 98 Synthesizing Customized Planners from Specifications relevant to that level of planning detail. CLAY uses KIDS' feature of theory import to modularize the domain-specific planning theory 3. <p> In practice, we map all the valid values of state variables to integers. 3.2 Specification of a Planner KIDS uses a functional specification and programming language augmented with set-theoretic data types. A specification of the task <ref> (Smith, 1992a) </ref> is represented by a quadruple F = hD; R; I; Oi where D is the input type satisfying the input condition, I : D ! boolean. The output type is R and the output condition, O : D fiR ! boolean, defines a feasible solution. <p> The process can be described as a tree search in which a node represents a set of candidates and an arc represents the split relationship between a set and its subset. For complete details, readers are referred to <ref> (Smith, 1992a) </ref>. The KIDS' global search paradigm is a general form of the refinement search model used to unify classical planners in UCP (Kambhampati & Srivastava, 1995). Specifically, the partial plans correspond to descriptors and the refinements correspond to splitting strategies. <p> In this case, it might be useful to create a new variable, equal to g (x), whose value is maintained across iterations and which allows for incremental computation of g (x) with the next x value. Finite differencing can be decomposed into two more basic operations: abstraction and simplification <ref> (Smith, 1992a) </ref> * First, the function f is abstracted with respect to expression g (x) adding a new parameter c to parameter list of f (now f (x; c)) and adding c = g (x) as a new input invariant to f .
Reference: <author> Smith, D. R. </author> <year> (1992b). </year> <title> Transformational approach to scheduling. </title> <type> Kestrel Institute Tech. Rep. </type> <institution> KES.U.92.2, 54pp. </institution>
Reference: <author> Smith, D., & Parra, E. </author> <year> (1993). </year> <title> Transformational approach to transportation scheduling. </title> <booktitle> In Proceedings of the 8th Knowledge-based Software Engineering Conference, </booktitle> <pages> pp. 14-17. </pages> <address> Chicago, IL, </address> <month> Sept </month> <year> 1993. </year>
Reference: <author> Srivastava, B., Kambhampati, S., & Mali, A. </author> <year> (1997). </year> <title> A structured approach for synthesizing planners from specifications. </title> <booktitle> Proc. of 12th IEEE Intl. Conf. on Automated Software Engg., </booktitle> <address> Lake Tahoe, NV. </address>
Reference-contexts: We are currently in the process of doing this <ref> (Srivastava, Kambham-pati, & Mali, 1997) </ref>. More generally, any time we get insights into the internal workings of a family of planning algorithms, we would like to translate those insights into declarative specifications for KIDS and support synthesis of more efficient customized domain code.
Reference: <author> Tate, A. </author> <year> (1977). </year> <title> Generating project networks. </title> <booktitle> Proc. 5th IJCAI, </booktitle> <pages> 888-893. </pages> <note> 127 Srivastava & Kambhampati Yoshikawa, </note> <author> M., Kaneko, K., Nomura, Y., & Watanabe, M. </author> <year> (1994). </year> <title> A constraint-based approach to high school timetabling problems: A case study. </title> <booktitle> Proc. NCAI-94, </booktitle> <pages> 1111-1116. 128 </pages>
Reference-contexts: STRIPS (Fikes & Nilsson, 1990) is an example of a planner using the FSS refinement, TOPI (Barrett & Weld, 1994) uses the BSS refinement, SNLP (McAllester & Rosenblitt, 1991) uses the plan-space refinement and NONLIN <ref> (Tate, 1977) </ref> uses the task-reduction refinement. Given this background, the declarative theory of plan generation in CLAY corresponds to theories of the refinements.
References-found: 30

