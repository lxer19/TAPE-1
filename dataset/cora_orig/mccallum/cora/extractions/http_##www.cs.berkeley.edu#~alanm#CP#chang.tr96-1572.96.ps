URL: http://www.cs.berkeley.edu/~alanm/CP/chang.tr96-1572.96.ps
Refering-URL: http://www.cs.berkeley.edu/~alanm/CP/bib.html
Root-URL: 
Email: fchichao,grzes,tveg@cs.cornell.edu  
Title: Design and Performance of Active Messages on the IBM SP-2  
Author: Chi-Chao Chang, Grzegorz Czajkowski, Thorsten von Eicken 
Keyword: Passing Layer (MPL) and Split-C benchmarks.  
Date: February 23, 1996  
Address: Ithaca, NY 14853  
Affiliation: Department of Computer Science Cornell University  
Abstract: This technical report describes the design, implementation, and evaluation of Active Messages on the IBM SP-2. The implementation benchmarked here uses the standard TB2 network adapter firmware but does not use any IBM software on the Power2 processor. We assume familiarity with the concepts underlying Active Messages. The main performance characteristics are a one-word message round-trip time of 51.0 s and an asymptotic network bandwidth of 34.3 MB/s 1 . After presenting selected implementation details, the paper focuses on detailed performance analysis, including a comparison with IBM's Message 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anindya Basu, Vineet Buch, Werner Vogels, and Thorsten von Eicken. U-Net: </author> <title> A User-Level Network Interface for Parallel and Distributed Computing. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <address> Cooper Mountain, </address> <month> December </month> <year> 1995. </year>
Reference: [2] <author> D. E. Culler, A. Dusseau, S. C. Goldstein, A. Krishnamurthy, S. Lumeta, and T. von Eicken. </author> <title> Introduction to Split-C. </title> <booktitle> In Proceedings of Supercomputing, </booktitle> <year> 1993. </year>
Reference-contexts: After a brief description of the implementation, the various latencies, bandwidths, and overheads measured are presented. Then, we compare the performance of a split-phase shared-memory extension to C based on Active Messages, Split-C <ref> [2] </ref>, on the SP-2 with the U-Net ATM cluster as well as the CM-5 and Meiko CS-2.
Reference: [3] <author> David Culler et al. </author> <title> Generic Active Message Interface Specification v. </title> <address> 1.1, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Originally developed for the Thinking Machines CM-5, implementations are also available for the Meiko CS-2, HP workstations on FDDI ring [6], Intel Paragon, and the U-Net ATM cluster of Sun Sparcs.[1]. All the implementations are based on the Generic Active Message Specification Version 1.1 <ref> [3] </ref>. This technical report describes the design, implementation, and evaluation of Active Messages on the IBM SP-2. The implementation benchmarked here uses the standard network adapter (a.k.a. TB2) firmware but does not use any IBM software on the Power2 processor.
Reference: [4] <institution> IBM. SP-2 Command and Technical Reference, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The IBM SP-2 supercomputer is a massively parallel processor (MPP) consisting of Power2 nodes interconnected by a custom network fabric as well as by Ethernet. Each node has its own memory, CPU, operating system (AIX), microchannel bus, Ethernet adapter, and high performance switch adapter <ref> [4] </ref>. There are two types of nodes: a thin SP-2 processing node is roughly equivalent to the RS/6000 model 390 (SPECint92: 114.3, SPECfp92: 205.3), and a wide node is equivalent to the RS/6000 model 590 (SPECint92: 121.6, SPECfp92: 259.7) [4]. <p> system (AIX), microchannel bus, Ethernet adapter, and high performance switch adapter <ref> [4] </ref>. There are two types of nodes: a thin SP-2 processing node is roughly equivalent to the RS/6000 model 390 (SPECint92: 114.3, SPECfp92: 205.3), and a wide node is equivalent to the RS/6000 model 590 (SPECint92: 121.6, SPECfp92: 259.7) [4]. The high performance switch provides bandwidth close to 40 MB/s and a round trip latency over "bare-bones" hardware of about 46 s. Active Messages is a low-latency communication mechanism that minimizes overheads and allows communication and computation to be overlapped [9] in multiprocessors. <p> It concludes with a discussion of the design and implementation of Active Messages, focusing on optimizations for bulk transfers and flow control strategies employed for reliable delivery. 2.1 SP-2 Network Interface Operation Thin and wide SP-2 processing nodes are roughly equivalent to the RS/6000 model 390 and 590 respectively <ref> [4] </ref>. They have a clock speed of 66MHz and a peak performance of 266 Mflops.
Reference: [5] <author> IBM. SP2PERF 1.7, </author> <year> 1994. </year>
Reference-contexts: Every message was an am request 1 with a handler returning immediately. Slight jumps are observable every 19 messages, i.e. quarter of the window size in the current implementation. 6 Comparison with MPL This section compares the main performance characteristics of SP-2 AM with IBM's Message Passing Layer (MPL) <ref> [5] </ref>.
Reference: [6] <author> R. P. Martin. HPAM: </author> <title> An Active Message Layer for a Network of Workstations. In Hot Interconnects II, </title> <address> Palo Alto, CA, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: It is a very attractive alternative to the existing IBM Message Passing Layer (MPL) because of the low overhead in setting up messages and reliable transmission. Originally developed for the Thinking Machines CM-5, implementations are also available for the Meiko CS-2, HP workstations on FDDI ring <ref> [6] </ref>, Intel Paragon, and the U-Net ATM cluster of Sun Sparcs.[1]. All the implementations are based on the Generic Active Message Specification Version 1.1 [3]. This technical report describes the design, implementation, and evaluation of Active Messages on the IBM SP-2.
Reference: [7] <author> M. T. Raghunath. </author> <type> Personal Communication, </type> <year> 1995. </year>
Reference-contexts: Locations in the TB2's memory are cacheable by the main processor although no coherence is guaranteed. The software interface uses a send and a receive FIFO to communicate between the CPU and the TB2 adapter <ref> [7] </ref>. The send FIFO has 128 entries while the receive FIFO has 64 entries per active processing node (determined at runtime). Each entry has 256 bytes and corresponds to a packet. A packet length array is associated with the send FIFO. <p> For transfer sizes larger than 16 bytes, bulk store and get operations are used to obtain round-trip latencies. The number we report is higher than the latency of 46.6-47.0 s which we were able to achieve over almost bare-bones hardware <ref> [7] </ref>. In the latter measurement, the message consists of only a 2-word header with no user data.
Reference: [8] <author> C.B. et al. Stunkel. </author> <title> The SP2 Communication Subsystem, </title> <month> August </month> <year> 1994. </year>
Reference-contexts: The switch provides four different routes between each pair of nodes and has a hardware latency of about 500ns. SP-2 nodes are connected to the high-speed interconnection switch via communication adapters 2 . The SP2 network adapter (TB2) <ref> [8] </ref> contains an Intel i860 microprocessor with 8 MB of DRAM. It is connected to the node via a 32-bit microchannel bus with a 80 MB/s peak transfer rate, and to the network switch via the Memory and Switch Management Unit (MSMU), whose interface is on the i860 bus.
Reference: [9] <author> T. von Eicken, D. E. Culler, S. C. Goldstein, and K. E. Schauser. </author> <title> Active Messages: A Mechanism for Integrated Communication and Computation. </title> <booktitle> In Proceedings of the 19th International Symposium on Computer Architecture, </booktitle> <pages> pages 256-266, </pages> <address> Gold Coast, Australia, </address> <month> May </month> <year> 1992. </year> <month> 14 </month>
Reference-contexts: The high performance switch provides bandwidth close to 40 MB/s and a round trip latency over "bare-bones" hardware of about 46 s. Active Messages is a low-latency communication mechanism that minimizes overheads and allows communication and computation to be overlapped <ref> [9] </ref> in multiprocessors. It is a very attractive alternative to the existing IBM Message Passing Layer (MPL) because of the low overhead in setting up messages and reliable transmission.
References-found: 9

