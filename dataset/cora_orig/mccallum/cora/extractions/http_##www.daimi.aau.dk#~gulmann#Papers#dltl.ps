URL: http://www.daimi.aau.dk/~gulmann/Papers/dltl.ps
Refering-URL: http://www.daimi.aau.dk/~gulmann/papers.html
Root-URL: http://www.daimi.aau.dk
Title: Dynamic Linear Time Temporal Logic  
Author: Jesper G. Henriksen, P. S. Thiagarajan, ; G. N. Chetty Road, T. Nagar, Chennai , 
Note: SPIC Mathematical Institute, 92  
Address: Aarhus, Ny Munkegade, DK-8000 Aarhus C, Denmark  
Affiliation: BRICS 1 Department of Computer Science, University of  India  
Abstract: A simple extension of the propositional temporal logic of linear time is proposed. The extension consists of strengthening the until operator by indexing it with the regular programs of propositional dynamic logic. It is shown that DLTL, the resulting logic, is expressively equivalent to the monadic second-order theory of !-sequences. In fact, a sublogic of DLTL which corresponds to propositional dynamic logic with a linear time semantics is already expressively complete. We show that DLTL has an exponential time decision procedure and admits a finitary axiomatization. We also point to a natural extension of the approach presented here to a distributed setting. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. R. Buchi, </author> <title> On a decision method in restricted second order arithmetic, </title> <booktitle> Proceedings of the International Congress on Logic, </booktitle> <institution> Methodology and Philosophy of Science (Stanford University Press, </institution> <year> 1960) </year> <month> 1-11. </month>
Reference-contexts: Suppose we apply this construction to formulas arising from the restricted syntax assumed in the present section. Then it is easy to see that, in the absence of atomic propositions, L ff 0 = L (B ff 0 ). But then the classic result of Buchi <ref> [1] </ref> asserts that L ! is S1S ()-definable iff there exists a Buchi automaton B operating over such that L = L (B). 2 Next we wish to show that if L ! is S1S ()-definable then L is DLTL ()- definable.
Reference: [2] <editor> V. Diekert and G. Rozenberg, eds., </editor> <booktitle> The Book of Traces (World Scientific Singapore, </booktitle> <year> 1995). </year>
Reference: [3] <author> M. J. Fischer and R. E. Ladner, </author> <title> Propositional dynamic logic of regular programs, </title> <note> Journal of Computer and System Sciences 18(2) (1979) 194-211. </note>
Reference: [4] <author> A. Gabbay, A. Pnueli, S. Shelah, and J. Stavi, </author> <title> On the temporal analysis of fairness, </title> <booktitle> Proceedings of the 7th Annual Symposium on Principles of Programming Languages (ACM, </booktitle> <year> 1980) </year> <month> 163-173. </month>
Reference: [5] <author> D. Harel, </author> <title> Dynamic logic, </title> <booktitle> in "Handbook of Philosophical Logic" (D. </booktitle> <editor> Gabbay and F. Guenthner, Eds.), </editor> <volume> Vol. </volume> <booktitle> II (1984) 497-604, </booktitle> <publisher> Reidel, Dordrecht. </publisher> <pages> 24 </pages>
Reference: [6] <author> D. Harel, D. Kozen, and R. Parikh, </author> <title> Process logic: expressiveness, decidability, completeness, </title> <note> Journal of Computer and System Sciences 25 (1982) 144-170. </note>
Reference: [7] <author> J. G. Henriksen and P. S. Thiagarajan, </author> <title> Dynamic Linear Time Temporal Logic, </title> <type> Report RS-97-8, BRICS, </type> <institution> Department of Computer Science, University of Aarhus (1997) </institution>
Reference-contexts: It is then straightforward to exhibit a syntactic translation of formulas of DLTL SF () to FO () essentially re-expressing the semantics by relativizing the formulas arising from the star-free expressions. The details can be found in <ref> [7] </ref>. That (i) implies (iii) is a consequence of the fact that the abovementioned characterization of FO () and star-free regular expressions can be extended to languages of !-sequences [22]. <p> A linear translation from the star-free !- regular expressions to DLTL SF () is then obtained by inductively translating the boolean operations to their logical counterparts, while left concatenation with a star-free language of finite strings is handled by the hi-modality. Once again, the details can be found in <ref> [7] </ref>. 2 6 Axiomatizations Our axiomatization of the set of valid formulas of DLTL is an extension of Segerberg's axiomatization of PDL [19]. Moreover, our completeness argument is based on the elegant proof of completeness of Segerberg's axioms due to Kozen and Parikh [11].
Reference: [8] <author> J. G. Henriksen and P. S. Thiagarajan, </author> <title> A Product Version of Dynamic Linear Time Temporal Logic, </title> <booktitle> Proceedings of the 8th International Conference on Concurrency Theory, Lecture Notes in Computer Science 1243 (Springer-Verlag, </booktitle> <year> 1997) </year> <month> 45-58. </month>
Reference-contexts: It turns out that our idea extends smoothly to richer domains. In particular, we can obtain similar results concerning the so called !-regular product languages [21] in terms of the product version of DLTL <ref> [8] </ref>. Roughly speaking, a !-regular product language is a !-regular language L ! generated by a distributed alphabet f i g K i=1 with = S K i=1 i . <p> Our logical characterization of !-regular product languages is obtained by taking boolean combinations of formulas in S K i=1 DLTL ( i ). More details can be found in <ref> [8] </ref>. It seems likely that one can find a nice generalization of this distributed version of DLTL to capture the full class of !-regular trace languages.
Reference: [9] <author> J. Hromkovic, S. Seibert, and T. Wilke, </author> <title> Translating regular expressions into small "-free nondeterministic automata, </title> <booktitle> Proceedings of the 12th Annual Symposium on Theoretical Aspects of Computer Science, Lecture Notes in Computer Science 1200 (Springer-Verlag, </booktitle> <year> 1997) </year> <month> 55-66. </month>
Reference-contexts: Let ff U fi 2 Req. It is known that for 2 Prg (), we can construct in polynomial time a non-deterministic finite state automaton A with L (A) = jjjj such that jQ j is linear in the size of (see <ref> [9] </ref> for a recent account on converting regular expression to small finite state automata). Let Req = fff 1 U 1 fi 1 ; : : : ; ff m U m fi m g.
Reference: [10] <author> H. R. Kamp, </author> <title> Tense Logic and the Theory of Linear Order, </title> <type> Ph.D. thesis, </type> <institution> University of California (1968) </institution>
Reference: [11] <author> D. Kozen and R. Parikh, </author> <title> An elementary proof of the completeness of PDL, </title> <note> Theoretical Computer Science 14 (1981) 113-118. </note>
Reference-contexts: Preprint submitted to Elsevier Preprint 2 April 1998 In addition to our expressiveness results we show that DLTL has an exponen-tial time decision procedure. We also extend the well known axiomatization of propositional dynamic logic <ref> [11] </ref> to obtain an axiomatization of DLTL. Our work may be viewed from two different perspectives. The first one is from the standpoint of process logics [6,16,18] which attempt a rapprochement between dynamic and temporal logics. <p> We then establish similar results for the first-order fragment of S1S with the help of the "star-free" fragments of DLTL and DLTL . In Section 6, we extend the axiomatization of PDL (propositional dynamic logic) and the completeness proof in <ref> [11] </ref> to obtain finitary axiomatizations of DLTL and DLTL . In the final section we point to a natural generalization in 2 the setting of distributed systems. <p> Moreover, our completeness argument is based on the elegant proof of completeness of Segerberg's axioms due to Kozen and Parikh <ref> [11] </ref>. It will be convenient to first axiomatize DLTL . We begin by augmenting the set of regular programs with the atomic program 1. We set jj1jj = f"g. By abuse of notation this augmented set of programs will also be denoted as Prg (). <p> Then there exists B 2 AT 0 and o 2 jjjj such that ff 2 B and A o Proof. Part (i) can be established by just repeating the proof of <ref> [11, Lemma 1] </ref>. Now part (ii) follows easily from part (i) with the help of a few tautologies of propositional calculus. 2 We are now ready to extract a model of ff 0 from T S 0 .
Reference: [12] <author> Z. Manna and A. Pnueli, </author> <title> The Temporal Logic of Reactive and Concurrent Systems (Specification) (Springer-Verlag, </title> <year> 1992). </year>
Reference: [13] <author> A. Mazurkiewicz, </author> <title> Concurrent program schemes and their interpretations, </title> <type> Technical report DAIMI PB-78, </type> <institution> Computer Science Department, University of Aarhus (1977). </institution>
Reference: [14] <author> R. McNaughton, </author> <title> Testing and generating infinite sequences by a finite automaton, </title> <note> Information and Control 9 (1966) 521-530. </note>
Reference-contexts: The Muller automaton A = (Q; !; Q in ; F ) is deterministic iff jQ in j = 1 and whenever q a a ! q 00 , we have q 0 = q 00 . The well-known theorem of McNaughton <ref> [14] </ref> guarantees that L ! is S1S ()-definable iff there exists 16 a deterministic Muller automaton operating over such that L = L (A). This fact will be the basis for the proof of the next result. Lemma 6 Let L ! .
Reference: [15] <author> R. McNaughton and S. </author> <title> Papert, </title> <publisher> Counter-Free Automata (MIT Press, </publisher> <year> 1971). </year>
Reference-contexts: Then the following statements are equivalent: (i) L is FO ()-definable. (ii) L is DLTL SF ()-definable. (iii) L is DLTL SF ()-definable. Proof. Trivially (iii) implies (ii). The proof that (ii) implies (i) utilizes the well-known fact <ref> [15] </ref> that FO ()-definable languages over finite strings and the languages described by star-free regular expressions coincide. It is then straightforward to exhibit a syntactic translation of formulas of DLTL SF () to FO () essentially re-expressing the semantics by relativizing the formulas arising from the star-free expressions.
Reference: [16] <author> H. Nishimura, </author> <title> Descriptively complete process logic, </title> <note> Acta Informatica 14(4) (1980) 359-369. </note>
Reference: [17] <author> A. Pnueli, </author> <title> The temporal logic of programs, </title> <booktitle> Proceedings of the 18th Annual Symposium on Foundations of Computer Science (IEEE, </booktitle> <year> 1977) </year> <month> 46-57. </month>
Reference: [18] <author> V. R. Pratt, </author> <title> Process logic, </title> <booktitle> Proceedings of the 6th Symposium on Principles of Programming Languages (ACM, </booktitle> <year> 1979) </year> <month> 93-100. </month>
Reference: [19] <author> K. Segerberg, </author> <title> A completeness theorem in the modal logic of programs, </title> <journal> Notices AMS 24(6) (1977) A-522. </journal>
Reference-contexts: Once again, the details can be found in [7]. 2 6 Axiomatizations Our axiomatization of the set of valid formulas of DLTL is an extension of Segerberg's axiomatization of PDL <ref> [19] </ref>. Moreover, our completeness argument is based on the elegant proof of completeness of Segerberg's axioms due to Kozen and Parikh [11]. It will be convenient to first axiomatize DLTL . We begin by augmenting the set of regular programs with the atomic program 1. We set jj1jj = f"g.
Reference: [20] <author> A. P. Sistla, </author> <title> Theoretical issues in the design and verification of distributed systems, </title> <type> Ph.D. Thesis, </type> <institution> Harvard University (1983). </institution>
Reference-contexts: The second perspective has to do with attempts to augment the expressive power of linear time temporal logic. One route consists of permitting quantification over atomic propositions. The resulting logic called QPTL <ref> [20] </ref> is as expressive as S1S, the monadic second-order theory of sequences but its decision procedure has non-elementary time complexity. The second route consists of augmenting linear time temporal logic with the so called automaton con-nectives.
Reference: [21] <author> P. S. Thiagarajan, </author> <title> PTL over product state spaces, </title> <type> Report TCS-95-4, </type> <institution> School of Mathematics, SPIC Science Foundation, </institution> <note> Madras (1995) 25 </note>
Reference-contexts: All these results demonstrate that our means of bringing together propositional dynamic and temporal logics in a linear time setting is natural. It turns out that our idea extends smoothly to richer domains. In particular, we can obtain similar results concerning the so called !-regular product languages <ref> [21] </ref> in terms of the product version of DLTL [8]. Roughly speaking, a !-regular product language is a !-regular language L ! generated by a distributed alphabet f i g K i=1 with = S K i=1 i .
Reference: [22] <author> W. Thomas, </author> <title> Automata over infinite objects, </title> <editor> in: J. van Leeuwen, ed., </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. </volume> <editor> B: </editor> <title> Formal Models and Semantics (Elsevier/MIT Press, </title> <year> 1990) </year> <month> 133-191. </month>
Reference-contexts: Then ff 0 is satisfiable iff L (B ff 0 ) 6= ; where ff 0 is the Buchi automaton constructed above. The emptiness problem for B ff 0 can be settled in time O (jSj) where S is the set of states of B <ref> [22] </ref>. Clearly CL (ff 0 ) is linear in the size of ff 0 and hence jAT j = 2 O (jff 0 j) . Let ff U fi 2 Req. <p> The details can be found in [7]. That (i) implies (iii) is a consequence of the fact that the abovementioned characterization of FO () and star-free regular expressions can be extended to languages of !-sequences <ref> [22] </ref>. A linear translation from the star-free !- regular expressions to DLTL SF () is then obtained by inductively translating the boolean operations to their logical counterparts, while left concatenation with a star-free language of finite strings is handled by the hi-modality.
Reference: [23] <author> M. Vardi and P. Wolper, </author> <title> An Automata-Theoretic Approach to Automatic Program Verification, </title> <booktitle> Proceedings of the 1st Symposium on Logic in Computer Science (IEEE, </booktitle> <year> 1986) </year> <month> 332-344. </month>
Reference-contexts: The last component is used to signal the successful completion of one phase. The automaton will not toggle to the next phase until successful completion of the current phase. The component X corresponds to the so called safety automaton in <ref> [23] </ref>. The point is that the automaton must assert ff U fi at o in case there is some possibility of satisfying this assertion in the unknown future. The component X, in combination with the transition relation, is designed to ensure this.
Reference: [24] <author> M. Vardi and P. Wolper, </author> <title> Reasoning about infinite computations, </title> <note> Information and Computation 115(1) (1994) 1-35. </note>
Reference-contexts: Though the technical details are somewhat different, ETL () captures the spirit of the logic presented in <ref> [24] </ref>. The key drawback of ETL (), as we see it, lies in its lack of structuring principles for forming compound formulas. The only mechanism that ETL () has | apart from the boolean connectives | to form compound formulas is by nesting the automaton formulas. <p> Equally important, this orthogonal component is formulated purely in terms of and not in terms of arbitrary formulas as is the case of ETL. In fact, 5 ETL, as formulated in <ref> [24] </ref> has an uncontrolled amount of "external" elements in the sense that the states and the alphabets of the automata which are used to write down the automaton formulas have little to do with the logic under consideration. <p> It is worth pointing out here that the decision procedure for DLTL is carried out directly in terms 23 of Buchi automata whereas for ETL it is carried out in terms of the so called set-subword automata, which are then translated to Buchi automata <ref> [24] </ref>. Two additional results that are available for DLTL are: A characterization of the first-order fragment of S1S in terms of the sublogics DLTL SF and DLTL SF ; and a relatively clean axiomatization of DLTL and DLTL.
Reference: [25] <author> P. Wolper, </author> <title> Temporal logic can be more expressive, </title> <booktitle> Proceedings of the 22nd Annual Symposium on Foundations of Computer Science (IEEE, </booktitle> <year> 1981) </year> <month> 340-348. </month>
Reference-contexts: Hence this temporal logic, relative to S1S, has limited expressive power. For instance, as pointed out by Wolper <ref> [25] </ref>, the property "p holds at every even position" is not definable in this logic. 3 3 Dynamic Linear Time Temporal Logic Our extension of LTL () basically consists of indexing the until operator with the programs of PDL (e.g. [3,5]). <p> It is easy to see that ff ev = [ ev ]p is a specification of the property "p holds at every even position". We shall close out the section by briefly discussing the key differences between DLTL () and ETL, the extension of LTL proposed by Wolper <ref> [25] </ref>. We shall present a simplified form of ETL so as to stay close to DLTL. First we fix an enumeration of = fa 1 ; a 2 ; : : : ; a n g.
Reference: [26] <author> P. Wolper, M. Y. Vardi, and A. P. Sistla, </author> <title> Reasoning about infinite computation paths, </title> <booktitle> Proceedings of the 24th Annual Symposium on Foundations of Computer Science (IEEE, </booktitle> <year> 1983) </year> <month> 185-194. 26 </month>
Reference-contexts: The resulting logic called QPTL [20] is as expressive as S1S, the monadic second-order theory of sequences but its decision procedure has non-elementary time complexity. The second route consists of augmenting linear time temporal logic with the so called automaton con-nectives. The resulting logic called ETL <ref> [26] </ref> is equal in expressive power to S1S while admitting an exponential time decision procedure. Our logic is, in spirit, inspired by ETL and it can be easily translated into ETL. It may appear to be at first sight to be a mere reformulation of ETL with some cosmetic changes.
References-found: 26

