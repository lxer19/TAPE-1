URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1996/1996-39.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Multiple Destination Bin Packing  
Author: Bram Verweij 
Date: July 11, 1996  
Abstract: There exists ample literature about on-line and off-line algorithms to solve the two and three dimensional bin packing problem. However, non of the off-line algorithms presented in literature are designed for the case that there are constraints on the order in which the objects have to be removed from the bin. This constraint is relevant in the case that we are loading a truck with several orders that have to be unloaded at different destinations. We present a population-based search heuristic for finding optimally packed bins, and present the data structures needed to implement the heuristic in both two and three dimensions. The algorithm is re-entrant and can be called iteratively for each destination to pack a bin with the corresponding orders. Experimental results are given to measure the average performance of the algorithm for the two- and three dimensional case.
Abstract-found: 1
Intro-found: 1
Reference: [Bea85] <author> J. E. Beasly. </author> <title> An exact two-dimensional non-guillotine cutting tree search pro 31 cedure. </title> <journal> Operations Research, </journal> <volume> 33 </volume> <pages> 49-64, </pages> <year> 1985. </year>
Reference-contexts: Layering algorithms trivially fulfil this assumption. Let us briefly review the available literature on the bin packing problem. A number of authors considered the two dimensional packing problem. Bengtsson [Ben82] describes a heuristic algorithm that enumerates several layouts and chooses the best it finds. Beasly <ref> [Bea85] </ref> describes a method to find exact solutions for the problem, which is suitable if the number of pieces that is to be packed is small. The two-dimensional bin packing problem is related to the two-dimensional cutting stock problem, which also is richly documented.
Reference: [Ben82] <author> B. E. Bengtsson. </author> <title> Packing rectangular pieces|a heuristic approach. </title> <journal> The Computer Journal, </journal> <volume> 25(3) </volume> <pages> 353-357, </pages> <year> 1982. </year>
Reference-contexts: Layering algorithms trivially fulfil this assumption. Let us briefly review the available literature on the bin packing problem. A number of authors considered the two dimensional packing problem. Bengtsson <ref> [Ben82] </ref> describes a heuristic algorithm that enumerates several layouts and chooses the best it finds. Beasly [Bea85] describes a method to find exact solutions for the problem, which is suitable if the number of pieces that is to be packed is small.
Reference: [BJR95] <author> E. E. Bischoff, F. Janetz, and M. S. W. Ratcliff. </author> <title> Loading pallets with non-identical items. </title> <journal> European Journal of Operations Research, </journal> <volume> 84 </volume> <pages> 681-692, </pages> <year> 1995. </year>
Reference-contexts: Known heuristic algorithms start by making some assumptions about the form of a good solution, simultaneously reducing the size of the search space taken into account even more. For example, Bischoff et al. <ref> [BJR95] </ref> assume the optimal solution can be found by filling the bin from the bottom upwards by stacking layers consisting of one or two blocks of a single type of box on top of an available surface (an instance of the layering approach). <p> The data structure consists of a stack of two dimensional arrays; this might make the memory requirements of the data structure a bit large. Finally, Bischoff et al. <ref> [BJR95] </ref> focus the attention on the problem of loading pallets. They present a most interesting layering heuristic, and a thorough experimental evaluation. The volume utilisation achieved with this algorithm is the best in the literature known to the author. <p> The intuition behind these definitions is that small differences in one criteria should not make a substantial difference in the selection process, where the notion of small depends on the actual class. Pallet Loading. We applied the algorithm to input with the same characteristics as Bischoff et al. <ref> [BJR95] </ref>. This input consisted of two different types of problems. The Type I problems consisted of small boxes; their dimensions are randomly chosen from the domain ([200; 400] fi [150; 350] fi [100; 300]). <p> However, on Type II problems our algorithm performed better than the algorithm of Bischoff et al. except for the case of k = 20, where both algorithms performed approximately equal. 28 Type I Type II #Box This Paper <ref> [BJR95] </ref> This Paper [BJR95] Types Vol. Ut. Time (s) Vol. Ut. Vol. Ut. Time (s) Vol. Ut. 3 0.848 510 0.83 0.854 489 0.82 8 0.815 1071 0.82 0.815 1039 0.78 12 0.777 1680 0.80 0.788 1479 0.76 20 0.739 2944 0.78 0.744 2552 0.75 Multiple Destination Bin Packing. <p> However, on Type II problems our algorithm performed better than the algorithm of Bischoff et al. except for the case of k = 20, where both algorithms performed approximately equal. 28 Type I Type II #Box This Paper <ref> [BJR95] </ref> This Paper [BJR95] Types Vol. Ut. Time (s) Vol. Ut. Vol. Ut. Time (s) Vol. Ut. 3 0.848 510 0.83 0.854 489 0.82 8 0.815 1071 0.82 0.815 1039 0.78 12 0.777 1680 0.80 0.788 1479 0.76 20 0.739 2944 0.78 0.744 2552 0.75 Multiple Destination Bin Packing.
Reference: [BKOS94] <author> M. de Berg, M. van Kreveld, M. Overmars, and O. Schwarzkopf. </author> <title> Computational geometry by example. </title> <type> Unpublished manuscript, </type> <year> 1994. </year>
Reference-contexts: The same structure is described by de Berg et al. <ref> [BKOS94, Chapter 2.2] </ref>. We extend it to contain the data of the already placed boxes similar as described for the two dimensional case. In the front of a packing, we distinguish vertices, edges and cells.
Reference: [CLR90] <author> T. H. Cormen, E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> second edition, </address> <year> 1990. </year>
Reference-contexts: The length of this list is linear in (N ln V )=*, where N is the number of bins, and V is the upper bound on the total volume of the bins (see <ref> [CLR90, p. 983] </ref>). Next we just use binary search in this list to find a combination of bins with a good volume utilisation. We use the multiple bins algorithm to pack those combinations needed for comparison by the binary search. <p> First, we sort the candidate places on increasing order of their start segment. This can be done in time linear in the number of segments using counting sort <ref> [CLR90, pp. 175-177] </ref>. <p> Then, the hash functions h j () are given by h j (s) = i0 That these hash functions indeed satisfy the required bound on the probability of collision is shown by Cormen et al. <ref> [CLR90, p. 231] </ref>. The random bytes have to be generated only once; and only for those i that have b i 6= 0.
Reference: [Col60] <author> G. E. Collins. </author> <title> A method for overlapping and erasure of lists. </title> <journal> Communications of the ACM, </journal> <volume> 2(12) </volume> <pages> 655-657, </pages> <month> December </month> <year> 1960. </year>
Reference-contexts: Note, that although fronts itself cannot be shared between different individuals in a population, the subsets of boxes can be shared if we keep track of the number of references (or reference count <ref> [Col60] </ref>) to each node in the binary trees that contain the boxes, thus limiting the memory requirements of a whole population. 3.2 Inserting a Box When we generated new packings from an old packing, we placed boxes before the old packing at different locations.
Reference: [DF92] <author> H. Dyckhoff and U. Finke. </author> <title> Cutting and Packing in Production and Distribution. </title> <publisher> Physica-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: The two-dimensional bin packing problem is related to the two-dimensional cutting stock problem, which also is richly documented. However, as this is beyond the scope of this paper, the reader is referred to Dyckhoff and Finke <ref> [DF92] </ref>. The three dimensional bin packing problem has received attention from a number of authors, with differences that are due to the background the authors found most interesting. Haessler and Talbot [HT90] describe a heuristic for rail shipment of orders.
Reference: [FDF + 90] <author> J. D. Foley, A. van Dam, S. K. Feiner, J. F. Hughes, and R. L. Phillips. </author> <title> Introduction to Computer Graphics. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> second edition, </address> <year> 1990. </year>
Reference-contexts: First, we locate all edges that are in the zone of R by searching the dcel starting from c. Let E be the set of edges in the zone of R. Next, we clip the dcel against R similar to the Cohen-Sutherland line clipping algorithm <ref> [FDF + 90, pp. 103-107] </ref> as follows: For each edge e in E, we do the following. If both e's adjacent vertices are outside R, e enters R at one side, and leaves it at the opposite side.
Reference: [Geo92] <author> J. A. George. </author> <title> A method for solving container packing for a single size of box. </title> <journal> Journal of the Operational Research Society, </journal> <volume> 43(4) </volume> <pages> 307-312, </pages> <year> 1992. </year>
Reference-contexts: Haessler and Talbot [HT90] describe a heuristic for rail shipment of orders. A number of algorithms are proposed for the container loading problem. The special case in which there is only one type of box is treated by Han et al. [HKE89] and George <ref> [Geo92] </ref>. The algorithm by Han et al. uses dynamic programming to derive a solution, whereas the algorithm by George is a layering heuristic. Gehring et al. [GMM90] present a layering algorithm for container loading; Portmann [Por91] describes an algorithm for container loading that fills the container from the bottom up.
Reference: [GMM90] <author> H. Gehring, K. Menschner, and M. Meyer. </author> <title> A computer-based heuristic for packing pooled shipment containers. </title> <journal> European Journal of Operational Research, </journal> <volume> 44 </volume> <pages> 277-288, </pages> <year> 1990. </year>
Reference-contexts: The special case in which there is only one type of box is treated by Han et al. [HKE89] and George [Geo92]. The algorithm by Han et al. uses dynamic programming to derive a solution, whereas the algorithm by George is a layering heuristic. Gehring et al. <ref> [GMM90] </ref> present a layering algorithm for container loading; Portmann [Por91] describes an algorithm for container loading that fills the container from the bottom up. George and Robinson [GR80] describe an algorithm for container loading that seeks to construct vertical "walls" across the container.
Reference: [GR80] <author> J. A. George and D. F. Robinson. </author> <title> A heuristic for packing boxes into a container. </title> <journal> Computers & Operations Research, </journal> <volume> 7 </volume> <pages> 147-156, </pages> <year> 1980. </year>
Reference-contexts: Gehring et al. [GMM90] present a layering algorithm for container loading; Portmann [Por91] describes an algorithm for container loading that fills the container from the bottom up. George and Robinson <ref> [GR80] </ref> describe an algorithm for container loading that seeks to construct vertical "walls" across the container. Ngoi et al. [NTC94] have a different approach for the container loading problem; they present a heuristic that uses a data structure for representing a packed container.
Reference: [HKE89] <author> C. P. Han, K. Knott, and P. J. Egbelu. </author> <title> A heuristic approach to the three-dimensional cargo-loading problem. </title> <journal> International Journal of Production Research, </journal> <volume> 27(5) </volume> <pages> 757-774, </pages> <year> 1989. </year>
Reference-contexts: Haessler and Talbot [HT90] describe a heuristic for rail shipment of orders. A number of algorithms are proposed for the container loading problem. The special case in which there is only one type of box is treated by Han et al. <ref> [HKE89] </ref> and George [Geo92]. The algorithm by Han et al. uses dynamic programming to derive a solution, whereas the algorithm by George is a layering heuristic.
Reference: [HT90] <author> R. W. Haessler and F. B. </author> <title> Talbot. Load planning for shipments of low density products. </title> <journal> European Journal of Operational Research, </journal> <volume> 44 </volume> <pages> 289-299, </pages> <year> 1990. </year>
Reference-contexts: However, as this is beyond the scope of this paper, the reader is referred to Dyckhoff and Finke [DF92]. The three dimensional bin packing problem has received attention from a number of authors, with differences that are due to the background the authors found most interesting. Haessler and Talbot <ref> [HT90] </ref> describe a heuristic for rail shipment of orders. A number of algorithms are proposed for the container loading problem. The special case in which there is only one type of box is treated by Han et al. [HKE89] and George [Geo92].
Reference: [IK75] <author> O. H. Ibarra and C. E. Kim. </author> <title> Fast approximation algorithms for the knapsack and sum of subset problems. </title> <journal> Journal of the ACM, </journal> <volume> 22(4) </volume> <pages> 463-468, </pages> <year> 1975. </year>
Reference-contexts: In one dimension, exact solutions can be calculated using dynamic programming in exponential time relative to the size of the input, or by applying a fully polynomial time approximation scheme like the one of Ibarra and Kim <ref> [IK75] </ref>. More serious applications of the bin packing problem involve two and three dimensional problems, such as loading pallets on the floor of a truck, packing pallets with boxes, and loading a container or a truck with a set of boxes. <p> Based on this observation, we can try to find a good set of bins by using a fully polynomial approximation scheme for the subset-sum problem like the algorithm by Ibarra and Kim <ref> [IK75] </ref> to find several feasible combinations of bins, sorted on increasing total volume, and then use binary search in this list of combinations to find one that has a good overall volume utilisation.
Reference: [NTC94] <author> B. K. A. Ngoi, M. L. Tay, and E. S. Chua. </author> <title> Applying spatial representation techniques to the container packing problem. </title> <journal> International Journal of Production Research, </journal> <volume> 32(1) </volume> <pages> 111-123, </pages> <year> 1994. </year> <month> 32 </month>
Reference-contexts: Gehring et al. [GMM90] present a layering algorithm for container loading; Portmann [Por91] describes an algorithm for container loading that fills the container from the bottom up. George and Robinson [GR80] describe an algorithm for container loading that seeks to construct vertical "walls" across the container. Ngoi et al. <ref> [NTC94] </ref> have a different approach for the container loading problem; they present a heuristic that uses a data structure for representing a packed container. The data structure consists of a stack of two dimensional arrays; this might make the memory requirements of the data structure a bit large.
Reference: [Por91] <author> M. C. Portmann. </author> <title> An efficient algorithm for container loading. </title> <journal> Methods of Operations Research, </journal> <volume> 64 </volume> <pages> 563-572, </pages> <year> 1991. </year>
Reference-contexts: The algorithm by Han et al. uses dynamic programming to derive a solution, whereas the algorithm by George is a layering heuristic. Gehring et al. [GMM90] present a layering algorithm for container loading; Portmann <ref> [Por91] </ref> describes an algorithm for container loading that fills the container from the bottom up. George and Robinson [GR80] describe an algorithm for container loading that seeks to construct vertical "walls" across the container.
Reference: [Pug90] <author> W. Pugh. </author> <title> Skip lists: A probabilistic alternative to balanced trees. </title> <journal> Communications of the ACM, </journal> <volume> 33(6) </volume> <pages> 668-676, </pages> <year> 1990. </year>
Reference-contexts: Any data structure that supports these operations in O (log n) time (n denotes the size of the status structure) can be used, the authors favourite is a skip list <ref> [Pug90] </ref>. Although insertion and location only operate in expected O (log n) time, it has tight code and traversal and deletion code can be made as efficient as code for circular doubly-linked lists.
Reference: [Wil64] <author> J. W. J. Williams. </author> <title> Algorithm 232 (heapsort). </title> <journal> Communications of the ACM, </journal> <volume> 7 </volume> <pages> 347-348, </pages> <year> 1964. </year>
Reference-contexts: Events that still have to be processed are kept in a priority queue; any data structure which allows for an O (log n) time (where n denotes the number of events) insertion and extraction of the minimum event is suitable, such as a heap <ref> [Wil64] </ref>. We will be maintaining two different status structures to maintain the status of our plane sweep; one, that contains the candidates that intersect the sweep line, and one that contains the depth of the cells that intersect the sweep line.
References-found: 18

