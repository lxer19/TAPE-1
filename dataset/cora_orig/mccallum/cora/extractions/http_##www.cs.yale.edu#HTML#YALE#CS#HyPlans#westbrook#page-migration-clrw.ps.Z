URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/westbrook/page-migration-clrw.ps.Z
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/westbrook/
Root-URL: http://www.cs.yale.edu
Title: Page Migration Algorithms Using Work Functions )-competitive on-line algorithms are given for trees and products
Author: Marek Chrobak Lawrence L. Larmore Nick Reingold Jeffery Westbrook Marek Thu 
Address: Riverside, CA  Nevada, Las Vegas, NV  Room 2C-320, P.O. Box 636, Murray Hill, NJ  New Haven, CT  
Affiliation: Department of Computer Science, University of California,  Department of Computer Science, University of  University of California, Riverside. AT&T Bell Laboratories,  Department of Computer Science, Yale University,  
Note: 2D  1; 2. These algorithms are shown  Marek Sat  Larry Sat  Marek Mon  Larry Tue  92521-0304. Research partially supported by National Science Foundation grant CCR-9112067.  89154-4019. Research partially supported by National Science Foundation grant CCR-9112067, while the author was in residence at the  07974-0636. Research partially supported by National Science Foundation grant CCR-8958528.  06520-2158. Research partially supported by the National Science Foundation grant CCR-9009753.  
Date: December 19, 1994  Aug 4 16:56:15 PDT 1994  Aug 6 11:38:15 PDT 1994  Sep 3 20:51:15 PDT 1994  Sep 5 11:13:24 PDT 1994  Sep 13 16:24:46 PDT 1994  
Abstract: The page migration problem occurs in managing a globally addressed shared memory in a multiprocessor system. Each physical page of memory is located at a given processor, and memory references to that page by other processors are charged a cost equal to the network distance. At times the page may migrate between processors, at a cost equal to the distance times a page size factor, D. The problem is to schedule movements on-line so as to minimize the total cost of memory references. Page migration can also be viewed as a restriction of the 1-server with excursions problem. This paper presents a collection of algorithms and lower bounds for the page migration problem in various settings. Competitive analysis is used. The competitiveness of an on-line algorithm is the worst-case ratio of its cost to the optimum cost on any sequence of requests. Randomized (2 + 1 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Awerbuch, Y. Bartal and A. Fiat, </author> <title> Competitive distributed file allocation. </title> <booktitle> Proc. of 25th Symposium on Theory of Computation, </booktitle> <pages> pages 164-173, </pages> <year> 1993. </year>
Reference-contexts: They develop 3-competitive deterministic algorithms for these two cases. In addition, they show that no deterministic algorithm could be better than 3-competitive in any metric space with at least two points. Black and Sleator conjecture that a 3-competitive algorithm exists for all metric spaces. Very recently, Awerbuch et al. <ref> [1] </ref> have given a 6-competitive algorithm for the general case, which is the best upper bound known so far. <p> Thus, it makes sense to refer to the algorithm FACTOR on IR 1 . Second, we show that EDGE is (2 + 1=2D)-competitive on the real line segment <ref> [0; 1] </ref>, under the restriction that all requests occur at endpoints. Algorithm EDGE is well-defined: it always keeps its server at either endpoint according to the desired probability. <p> Finally, we show BARY (FACTOR) achieves the best competitive ratio possible on a continuous tree. Theorem 8.9 Let A be an algorithm, randomized or deterministic, for the page migration problem in the interval <ref> [0; 1] </ref>. Then A is no better than (2 + 1=2D)-competitive. Proof: By Theorem 8.2, we may assume A is deterministic. Consider only sequences consisting of requests on points 0 and 1. Let s denote the position of A's server.
Reference: [2] <author> S. Ben-David, A. Borodin, R. Karp, G. Tardos and A. Widgerson, </author> <title> On the power of randomization in on-line algorithms. </title> <booktitle> Proc. 22nd Symposium on Theory of Algorithms, </booktitle> <pages> pages 379-386, </pages> <year> 1990. </year>
Reference: [3] <author> J. L. Bentley and C. C. McGeoch. </author> <title> Amortized analyses of self-organizing sequential search heuristics. </title> <journal> Commun. ACM, </journal> <volume> 28(4) </volume> <pages> 404-411, </pages> <month> Apr. </month> <year> 1985. </year>
Reference-contexts: FACTOR is (2 + 1 2D )- competitive, i.e., optimal. The "factoring" technique is similar to the technique used in <ref> [3, 13] </ref> in studying sequential search. FACTOR can also be applied, with the same competitive constant, to metric spaces that are Cartesian products of trees with the L 1 metric, including hypercubes and meshes. We then present a number of results about deterministic algorithms.
Reference: [4] <author> P. Berman, H. J. Karloff, and G. Tardos. </author> <title> A competitive three-server algorithm. </title> <booktitle> In Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 280-290, </pages> <year> 1990. </year>
Reference-contexts: Among on-line optimization problems, the k-server problem, proposed by Manasse, McGeoch, and Sleator [18] is perhaps the best known and most widely studied <ref> [4, 7, 8, 9, 12, 14, 15, 18, 20] </ref>. In their original paper, Manasse et al. also define the k-server with excursions problem, in which k mobile servers move through a metric space, paying costs for movements and for remote accesses, where these costs need not be related. <p> randomized algorithm for the uniform network whose competitiveness constant approaches (5 + p 17)=4 2:28 as D approaches infinity, a (3 + p 5)=2 2:618-competitive randomized algorithm for general networks, and a randomized algorithm that is 3-competitive against an on-line adaptive adversary. 3 Similar memory management problems are examined in <ref> [4, 7, 12, 14, 15, 18, 20] </ref>. Practical issues and applications of page migration are discussed more fully in [5, 6, 22]. The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system.
Reference: [5] <author> D. Black, A. Gupta, and W. Weber. </author> <title> Competitive management of distributed shared memory. </title> <booktitle> In Proceedings, Spring Compcon 1989, </booktitle> <pages> pages 184-190, </pages> <address> New York, NY, 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: 1 Introduction The page migration problem arises as a memory management problem for a globally addressed shared memory in a multiprocessor system <ref> [5, 6, 22] </ref>. A common design for such a system is a network of processors, each of which has its own local memory [10, 19, 24]. <p> Therefore, various network designers have proposed restricting each writable page to a single copy <ref> [5, 6, 22] </ref>, and allowing the operating system to move the page between processors in response to changes in access patterns. The page migration problem is to decide, on-line, a sequence of page movements that minimizes the total cost of communication over all requests. <p> Practical issues and applications of page migration are discussed more fully in <ref> [5, 6, 22] </ref>. The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system. File assignment has received a great deal of attention in the database community (see e.g. [11]).
Reference: [6] <author> D. L. Black and D. D. Sleator. </author> <title> Competitive algorithms for replication and migration problems. </title> <type> Technical Report CMU-CS-89-201, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1989. </year>
Reference-contexts: 1 Introduction The page migration problem arises as a memory management problem for a globally addressed shared memory in a multiprocessor system <ref> [5, 6, 22] </ref>. A common design for such a system is a network of processors, each of which has its own local memory [10, 19, 24]. <p> Having a given virtual page stored at multiple processors reduces communication overhead during reads, but introduces the problem of maintaining consistency among the multiple copies during writes, something for which most multiprocessors do not provide mechanisms <ref> [6] </ref>. Therefore, various network designers have proposed restricting each writable page to a single copy [5, 6, 22], and allowing the operating system to move the page between processors in response to changes in access patterns. <p> Therefore, various network designers have proposed restricting each writable page to a single copy <ref> [5, 6, 22] </ref>, and allowing the operating system to move the page between processors in response to changes in access patterns. The page migration problem is to decide, on-line, a sequence of page movements that minimizes the total cost of communication over all requests. <p> An on-line adversary must choose its algorithm before any requests are generated. The oblivious on-line and oblivious off-line adversaries are equivalent in power. Our definition of randomized competitiveness assumes that the adversary is oblivious. Black and Sleator <ref> [6] </ref> consider two classes of networks: uniform spaces (complete graphs with each edge having length 1) and trees with arbitrary edge lengths. They develop 3-competitive deterministic algorithms for these two cases. <p> Practical issues and applications of page migration are discussed more fully in <ref> [5, 6, 22] </ref>. The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system. File assignment has received a great deal of attention in the database community (see e.g. [11]). <p> the entire tree to run correctly, an infinite tree can be treated as a dynamic tree. 7 Cartesian Products In this section we show that FACTOR can be used to design an optimally competitive randomized algorithm for any product of trees, by using one instance of FACTOR in each dimension <ref> [6] </ref>. The most common examples of such product topologies include hypercubes and meshes. For i = 1; 2, let M i be a metric space with distance function d i . <p> But by Theorem 4.3, B is no better than 2 + 1 2D -competitive. 8.3 A Lower Bound Black and Sleator <ref> [6] </ref> conjectured the existence of a 3-competitive deterministic page migration algorithm for all metric spaces and for all values of D. <p> Hence for % = % 1 % 2 % 3 there is no constant a x for which cost A (x; %) c cost OPT (x; %) + a x , and so A cannot be c-competitive. 8.4 An Algorithm for Three Points The results of Black and Sleator <ref> [6] </ref> imply that there is a 3-competitive algorithm for each D and each metric space with two points. In this section, we show a 3-competitive algorithm for any three-point metric space and D = 1.
Reference: [7] <author> M. Chrobak, H. Karloff, T. Payne, and S. Vishwanathan. </author> <title> New results on server problems. </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 4 (1991) 172-181. </volume> <booktitle> Also in Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 291-300, </pages> <year> 1990. </year>
Reference-contexts: Among on-line optimization problems, the k-server problem, proposed by Manasse, McGeoch, and Sleator [18] is perhaps the best known and most widely studied <ref> [4, 7, 8, 9, 12, 14, 15, 18, 20] </ref>. In their original paper, Manasse et al. also define the k-server with excursions problem, in which k mobile servers move through a metric space, paying costs for movements and for remote accesses, where these costs need not be related. <p> randomized algorithm for the uniform network whose competitiveness constant approaches (5 + p 17)=4 2:28 as D approaches infinity, a (3 + p 5)=2 2:618-competitive randomized algorithm for general networks, and a randomized algorithm that is 3-competitive against an on-line adaptive adversary. 3 Similar memory management problems are examined in <ref> [4, 7, 12, 14, 15, 18, 20] </ref>. Practical issues and applications of page migration are discussed more fully in [5, 6, 22]. The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system.
Reference: [8] <author> M. Chrobak and L. L. Larmore. </author> <title> Generosity helps, or an 11-competitive algorithm for three servers. </title> <booktitle> Journal of Algorithms 16 (1994) 234-263. Also in Proc. 3rd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 196-202, </pages> <address> Philadelphia, </address> <year> 1992. </year> <institution> Society for Industrial and Applied Mathematics. </institution> <month> 29 </month>
Reference-contexts: Among on-line optimization problems, the k-server problem, proposed by Manasse, McGeoch, and Sleator [18] is perhaps the best known and most widely studied <ref> [4, 7, 8, 9, 12, 14, 15, 18, 20] </ref>. In their original paper, Manasse et al. also define the k-server with excursions problem, in which k mobile servers move through a metric space, paying costs for movements and for remote accesses, where these costs need not be related. <p> For D = 1, we also give an optimal 3-competitive algorithm for any 3-point metric space. This algorithm uses 4 forgiveness, a technique that has recently been applied to develop an 11-competitive algorithm for the 3-server problem <ref> [8] </ref>. We also have a computer-aided proof showing that this result cannot be extended to 4-point spaces. 2 Work Functions and Competitive Analysis Following [9], we introduce the idea of a work function. <p> We do not know whether there is a 3-competitive algorithm for 3 point spaces with D &gt; 1. Our three-point algorithm is based on a technique called forgiveness that has been recently used in an 11-competitive algorithm for 3 servers <ref> [8] </ref>. This technique exploits the flexibility in the definition of work functions. In the previous sections, our algorithms took advantage of the fact that the optimal offset functions for the edge, uniform space, and tree can be compactly characterized and are finite in number.
Reference: [9] <author> M. Chrobak and L. L. Larmore. </author> <title> The server problem and on-line games. </title> <booktitle> In Proc. of the DI--MACS Workshop on On-Line Algorithms, volume 7 of DIMACS Series, </booktitle> <pages> pages 11-64. </pages> <publisher> American Mathematical Society, </publisher> <year> 1992. </year>
Reference-contexts: Among on-line optimization problems, the k-server problem, proposed by Manasse, McGeoch, and Sleator [18] is perhaps the best known and most widely studied <ref> [4, 7, 8, 9, 12, 14, 15, 18, 20] </ref>. In their original paper, Manasse et al. also define the k-server with excursions problem, in which k mobile servers move through a metric space, paying costs for movements and for remote accesses, where these costs need not be related. <p> The approach in this paper is to use work functions, which completely describe the actions of the adversary to the extent that an on-line algorithm can know them, and which provide a systematic approach to problems of competitive analysis. Work functions were defined in <ref> [9] </ref>. A similar concept was defined earlier in [18] in the context of the server problem. <p> This algorithm uses 4 forgiveness, a technique that has recently been applied to develop an 11-competitive algorithm for the 3-server problem [8]. We also have a computer-aided proof showing that this result cannot be extended to 4-point spaces. 2 Work Functions and Competitive Analysis Following <ref> [9] </ref>, we introduce the idea of a work function.
Reference: [10] <author> W. Crowther, J. Goodhue, E. Starr, R. Thomas, W. Milliken, and T. Blackadar. </author> <title> Performance measurements on a 128-node butterfly parallel processor. </title> <booktitle> In Proc. International Conf. on Parallel Processing, </booktitle> <pages> pages 531-540, </pages> <address> New York, NY, 1985. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: 1 Introduction The page migration problem arises as a memory management problem for a globally addressed shared memory in a multiprocessor system [5, 6, 22]. A common design for such a system is a network of processors, each of which has its own local memory <ref> [10, 19, 24] </ref>. In such a design, a programming abstraction of a single global memory address space is supported by a virtual memory system that distributes one or more copies of each physical page of memory among the processors' local memories.
Reference: [11] <author> L. W. Dowdy and D. V. Foster. </author> <title> Comparative models of the file assignment problem. </title> <journal> ACM Computing Surveys, </journal> <volume> 14(2) </volume> <pages> 287-313, </pages> <year> 1982. </year>
Reference-contexts: The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system. File assignment has received a great deal of attention in the database community (see e.g. <ref> [11] </ref>). Adaptive versions of this problem have been studied [25], and our work has bearing on these problems. A major difficulty in traditional competitive analysis has been to understand optimal off-line algorithms.
Reference: [12] <author> A. Fiat, R. Karp, M. Luby, L. McGeoch, D. D. Sleator, and N. Young. </author> <title> Competitive paging algorithms. </title> <journal> Journal of Algorithms, </journal> <volume> 12 </volume> <pages> 685-699, </pages> <year> 1991. </year>
Reference-contexts: Among on-line optimization problems, the k-server problem, proposed by Manasse, McGeoch, and Sleator [18] is perhaps the best known and most widely studied <ref> [4, 7, 8, 9, 12, 14, 15, 18, 20] </ref>. In their original paper, Manasse et al. also define the k-server with excursions problem, in which k mobile servers move through a metric space, paying costs for movements and for remote accesses, where these costs need not be related. <p> randomized algorithm for the uniform network whose competitiveness constant approaches (5 + p 17)=4 2:28 as D approaches infinity, a (3 + p 5)=2 2:618-competitive randomized algorithm for general networks, and a randomized algorithm that is 3-competitive against an on-line adaptive adversary. 3 Similar memory management problems are examined in <ref> [4, 7, 12, 14, 15, 18, 20] </ref>. Practical issues and applications of page migration are discussed more fully in [5, 6, 22]. The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system.
Reference: [13] <author> S. Irani. </author> <title> Two results on the list update problem. </title> <journal> Inf. Process. Lett., </journal> <volume> 38 </volume> <pages> 301-306, </pages> <year> 1991. </year>
Reference-contexts: FACTOR is (2 + 1 2D )- competitive, i.e., optimal. The "factoring" technique is similar to the technique used in <ref> [3, 13] </ref> in studying sequential search. FACTOR can also be applied, with the same competitive constant, to metric spaces that are Cartesian products of trees with the L 1 metric, including hypercubes and meshes. We then present a number of results about deterministic algorithms.
Reference: [14] <author> A. Karlin, M. Manasse, L. Rudolph, and D. D. Sleator. </author> <title> Competitive snoopy caching. </title> <journal> Algorith-mica, </journal> <volume> 3(1) </volume> <pages> 79-119, </pages> <year> 1988. </year>
Reference-contexts: Among on-line optimization problems, the k-server problem, proposed by Manasse, McGeoch, and Sleator [18] is perhaps the best known and most widely studied <ref> [4, 7, 8, 9, 12, 14, 15, 18, 20] </ref>. In their original paper, Manasse et al. also define the k-server with excursions problem, in which k mobile servers move through a metric space, paying costs for movements and for remote accesses, where these costs need not be related. <p> randomized algorithm for the uniform network whose competitiveness constant approaches (5 + p 17)=4 2:28 as D approaches infinity, a (3 + p 5)=2 2:618-competitive randomized algorithm for general networks, and a randomized algorithm that is 3-competitive against an on-line adaptive adversary. 3 Similar memory management problems are examined in <ref> [4, 7, 12, 14, 15, 18, 20] </ref>. Practical issues and applications of page migration are discussed more fully in [5, 6, 22]. The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system.
Reference: [15] <author> A. R. Karlin, M. S. Manasse, L. A. McGeoch, and S. Owicki. </author> <title> Competitive randomized algorithms for non-uniform problems. </title> <booktitle> In Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 301-309, </pages> <year> 1990. </year> <note> Also, to appear in Algorithmica. </note>
Reference-contexts: Among on-line optimization problems, the k-server problem, proposed by Manasse, McGeoch, and Sleator [18] is perhaps the best known and most widely studied <ref> [4, 7, 8, 9, 12, 14, 15, 18, 20] </ref>. In their original paper, Manasse et al. also define the k-server with excursions problem, in which k mobile servers move through a metric space, paying costs for movements and for remote accesses, where these costs need not be related. <p> randomized algorithm for the uniform network whose competitiveness constant approaches (5 + p 17)=4 2:28 as D approaches infinity, a (3 + p 5)=2 2:618-competitive randomized algorithm for general networks, and a randomized algorithm that is 3-competitive against an on-line adaptive adversary. 3 Similar memory management problems are examined in <ref> [4, 7, 12, 14, 15, 18, 20] </ref>. Practical issues and applications of page migration are discussed more fully in [5, 6, 22]. The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system.
Reference: [16] <author> C. Lund and N. Reingold. </author> <title> Linear programs for randomized on-line algorithms. </title> <booktitle> In Proc. 5th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 382-391. </pages> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, </address> <year> 1994. </year>
Reference-contexts: Note that is bounded, since both and fl A are bounded. We first remark that we can assume that if the offset function is a characteristic function at a point, A will be concentrated at that point, according to a theorem of <ref> [16] </ref>. Let the adversary make requests as follows: * If q &lt; p b , the adversary requests x. * If q &gt; p b , the adversary requests y. 13 * If b = D, we can assume that q = 1. <p> We give a description of the strategy below. The notation rr + means that the adversary generates two or more requests to point r until A moves the server to r. By a theorem of <ref> [16] </ref>, we may assume that A eventually moves the server to r. 1. Request y. If the on-line server stays at x, go to next step. If the on-line server moves to y, z or t, request xx + and halt.
Reference: [17] <author> C. Lund, N. Reingold, J. Westbrook, and D. Yan. </author> <title> On-Line Distributed Data Management. </title> <note> To appear in European Symposium on Algorithms, </note> <year> 1994 </year>
Reference-contexts: Conjecture: UNIFORM is (2 + 1 2D )-competitive for each D 3. Subsequent to this work, Lund, et al. <ref> [17] </ref> constructed a randomized algorithm for the uniform case that is C D -competitive for all D.
Reference: [18] <author> M. Manasse, L. A. McGeoch, and D. D. Sleator. </author> <title> Competitive algorithms for on-line problems. </title> <booktitle> Journal of Algorithms 11 (1990) 208-230. Also in Proc. 20th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 322-333, </pages> <year> 1988. </year>
Reference-contexts: We assume that before the first request the server may be moved from its initial position s to an arbitrary point x at cost D d sx . Among on-line optimization problems, the k-server problem, proposed by Manasse, McGeoch, and Sleator <ref> [18] </ref> is perhaps the best known and most widely studied [4, 7, 8, 9, 12, 14, 15, 18, 20]. <p> Among on-line optimization problems, the k-server problem, proposed by Manasse, McGeoch, and Sleator [18] is perhaps the best known and most widely studied <ref> [4, 7, 8, 9, 12, 14, 15, 18, 20] </ref>. In their original paper, Manasse et al. also define the k-server with excursions problem, in which k mobile servers move through a metric space, paying costs for movements and for remote accesses, where these costs need not be related. <p> Apart from a few results for (n 1) servers in a metric space with n points <ref> [18] </ref>, nothing is known about this problem. Page migration can be viewed as a special 2 case of the 1-server problem with excursions, in which the movement cost is a constant factor times the remote access cost. Fix a metric space M and D 1. <p> randomized algorithm for the uniform network whose competitiveness constant approaches (5 + p 17)=4 2:28 as D approaches infinity, a (3 + p 5)=2 2:618-competitive randomized algorithm for general networks, and a randomized algorithm that is 3-competitive against an on-line adaptive adversary. 3 Similar memory management problems are examined in <ref> [4, 7, 12, 14, 15, 18, 20] </ref>. Practical issues and applications of page migration are discussed more fully in [5, 6, 22]. The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system. <p> Work functions were defined in [9]. A similar concept was defined earlier in <ref> [18] </ref> in the context of the server problem.
Reference: [19] <author> G. Pfister, W. C. Brantley, D. A. George, S. L. Harvey, W. J. Kleinfelder, K. P. McAuliffe, E. A. Melton, V. A. Norton, and J. Weiss. </author> <title> The IBM research parallel processor prototype: Introduction and architecture. </title> <booktitle> In Proc. International Conf. on Parallel Processing, </booktitle> <pages> pages 764-771, </pages> <address> New York, NY, 1985. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: 1 Introduction The page migration problem arises as a memory management problem for a globally addressed shared memory in a multiprocessor system [5, 6, 22]. A common design for such a system is a network of processors, each of which has its own local memory <ref> [10, 19, 24] </ref>. In such a design, a programming abstraction of a single global memory address space is supported by a virtual memory system that distributes one or more copies of each physical page of memory among the processors' local memories.
Reference: [20] <author> P. Raghavan and M. Snir. </author> <title> Memory versus randomization in on-line algorithms. Research Report RC 15622 (No. </title> <type> 69444), </type> <institution> IBM T. J. Watson Research Center, </institution> <year> 1990. </year> <title> Also, </title> <booktitle> in 16th International Colloquium on Automata, Languages, and Programming, Lecture Notes in Computer Science vol. </booktitle> <volume> 372, </volume> <publisher> Springer-Verlag, </publisher> <year> 1989, </year> <pages> 687-703. 30 </pages>
Reference-contexts: Among on-line optimization problems, the k-server problem, proposed by Manasse, McGeoch, and Sleator [18] is perhaps the best known and most widely studied <ref> [4, 7, 8, 9, 12, 14, 15, 18, 20] </ref>. In their original paper, Manasse et al. also define the k-server with excursions problem, in which k mobile servers move through a metric space, paying costs for movements and for remote accesses, where these costs need not be related. <p> randomized algorithm for the uniform network whose competitiveness constant approaches (5 + p 17)=4 2:28 as D approaches infinity, a (3 + p 5)=2 2:618-competitive randomized algorithm for general networks, and a randomized algorithm that is 3-competitive against an on-line adaptive adversary. 3 Similar memory management problems are examined in <ref> [4, 7, 12, 14, 15, 18, 20] </ref>. Practical issues and applications of page migration are discussed more fully in [5, 6, 22]. The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system.
Reference: [21] <author> N. Reingold, J. Westbrook, and D. D. Sleator. </author> <title> Randomized algorithms for the list update problem. </title> <journal> Algorithmica, </journal> <volume> 11 </volume> <pages> 15-32, </pages> <year> 1994. </year>
Reference-contexts: A operates by first choosing A i with probability p i , then following A i deterministically. Hence a random choice is made only once, during initialization. We denote a barely random algorithm constructed in this way by A = i=1 Some barely random algorithms are given in <ref> [21, 23] </ref>. On the other hand, a distribution-specified algorithm A is a deterministic function, where A (s; %) is a distribution on a set of states for each start state s and request sequence %.
Reference: [22] <author> C. Scheurich and M. Dubois. </author> <title> Dynamic page migration in multiprocessors with distributed global memory. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(8) </volume> <pages> 1154-1163, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: 1 Introduction The page migration problem arises as a memory management problem for a globally addressed shared memory in a multiprocessor system <ref> [5, 6, 22] </ref>. A common design for such a system is a network of processors, each of which has its own local memory [10, 19, 24]. <p> Therefore, various network designers have proposed restricting each writable page to a single copy <ref> [5, 6, 22] </ref>, and allowing the operating system to move the page between processors in response to changes in access patterns. The page migration problem is to decide, on-line, a sequence of page movements that minimizes the total cost of communication over all requests. <p> Practical issues and applications of page migration are discussed more fully in <ref> [5, 6, 22] </ref>. The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system. File assignment has received a great deal of attention in the database community (see e.g. [11]).
Reference: [23] <author> J. Westbrook. </author> <title> Randomized algorithms for multiprocessor page migration. </title> <note> SIAM J. Comput., 23(5). To appear. </note>
Reference-contexts: Black and Sleator conjecture that a 3-competitive algorithm exists for all metric spaces. Very recently, Awerbuch et al. [1] have given a 6-competitive algorithm for the general case, which is the best upper bound known so far. Westbrook <ref> [23] </ref> gives a randomized algorithm for the uniform network whose competitiveness constant approaches (5 + p 17)=4 2:28 as D approaches infinity, a (3 + p 5)=2 2:618-competitive randomized algorithm for general networks, and a randomized algorithm that is 3-competitive against an on-line adaptive adversary. 3 Similar memory management problems are <p> A operates by first choosing A i with probability p i , then following A i deterministically. Hence a random choice is made only once, during initialization. We denote a barely random algorithm constructed in this way by A = i=1 Some barely random algorithms are given in <ref> [21, 23] </ref>. On the other hand, a distribution-specified algorithm A is a deterministic function, where A (s; %) is a distribution on a set of states for each start state s and request sequence %. <p> Theorem 8.4 There is a b D -competitive deterministic barycentric algorithm for page migration in IR n , where b D is a function defined in <ref> [23] </ref> that tends to 1 + as D grows large. Proof: Westbrook's randomized algorithm [23] is b D -competitive competitive in any metric space. A barycentric simulation yields a deterministic algorithm with equivalent competitive ratio. <p> Theorem 8.4 There is a b D -competitive deterministic barycentric algorithm for page migration in IR n , where b D is a function defined in <ref> [23] </ref> that tends to 1 + as D grows large. Proof: Westbrook's randomized algorithm [23] is b D -competitive competitive in any metric space. A barycentric simulation yields a deterministic algorithm with equivalent competitive ratio.
Reference: [24] <author> A. Wilson. </author> <title> Hierarchical cache/bus architecture for shared memory multiprocessors. </title> <booktitle> In Proc. 14th International Symp. on Computer Architecture, </booktitle> <pages> pages 244-252, </pages> <address> New York, NY, 1987. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: 1 Introduction The page migration problem arises as a memory management problem for a globally addressed shared memory in a multiprocessor system [5, 6, 22]. A common design for such a system is a network of processors, each of which has its own local memory <ref> [10, 19, 24] </ref>. In such a design, a programming abstraction of a single global memory address space is supported by a virtual memory system that distributes one or more copies of each physical page of memory among the processors' local memories.
Reference: [25] <author> O. Wolfson. </author> <title> A distributed algorithm for adaptive replication data. </title> <type> Technical Report CUCS-057-90, </type> <institution> Department of Computer Science, Columbia University, </institution> <year> 1990. </year> <month> 31 </month>
Reference-contexts: The file assignment problem involves the static allocation of multiple copies of data files to the nodes of a distributed system. File assignment has received a great deal of attention in the database community (see e.g. [11]). Adaptive versions of this problem have been studied <ref> [25] </ref>, and our work has bearing on these problems. A major difficulty in traditional competitive analysis has been to understand optimal off-line algorithms. In particular, it is almost always impossible to know when, or to where, an optimal algorithm will move its server (the page).
References-found: 25

