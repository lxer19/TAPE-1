URL: http://www.daimi.aau.dk/~krab/virtuals.ps
Refering-URL: http://www.daimi.aau.dk/~krab/resume.html
Root-URL: http://www.daimi.aau.dk
Email: Email: krab@daimi.aau.dk  
Title: Genericity in Java with Virtual Types  
Author: Kresten Krab Thorup 
Address: Ny Munkegade Bldg. 540, DK-8000 Arhus C, Denmark  
Affiliation: Devise Center for Experimental Computer Science Department of Computer Science, University of Aarhus  
Abstract: This paper suggests virtual types for Java, a language mechanism which subsumes parameterized classes, while also integrating more naturally with Java's object model. The same basic mechanism is also known as virtual patterns in Beta and as generics in Ada95. We discuss various issues in the Java type system, issues with inheritance and genericity in general, and give a specific suggestion as to how virtual types should be integrated into Java. Finally we describe how to make an efficient implementation of virtual types based only upon the existing Java virtual machine. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Agesen, O. </author> <title> Design and implementation of Pep, a Java just-in-time translator. </title> <note> To appear. </note>
Reference-contexts: Much work has already been done to implement such compilers supporting customization as part of the Self project [2, 31]. One such sophisticated Java virtual machine is described in <ref> [1] </ref>. Another similar Java virtual machine has been developed by Animorphic Systems which was recently acquired by JavaSoft.
Reference: [2] <author> Agesen, O., and H olzle, U. </author> <title> Type feedback vs. concrete type inference: A comparison of optimization techniques for object-oriented languages. </title> <booktitle> In Proceedings of OOPSLA'95 (1995), </booktitle> <publisher> ACM Press, </publisher> <pages> pp. 91-107. </pages>
Reference-contexts: Much work has already been done to implement such compilers supporting customization as part of the Self project <ref> [2, 31] </ref>. One such sophisticated Java virtual machine is described in [1]. Another similar Java virtual machine has been developed by Animorphic Systems which was recently acquired by JavaSoft.
Reference: [3] <author> Apple Computer, </author> <title> Eastern Research and Technology. Dylan: An object-oriented dynamic language, 1st ed. </title> <address> Cambridge, MA, </address> <month> April </month> <year> 1992. </year>
Reference: [4] <author> Canning, P., Cook, W., Hill, W., and Olthoff, W. </author> <title> F-bounded qualification for object-oriented programming. </title> <booktitle> In ACM Conference on Functional Programming and Computer Architecture (1989), </booktitle> <publisher> ACM Press. </publisher>
Reference: [5] <author> Canning, P., Cook, W., Hill, W., and Olthoff, W. </author> <title> Interfaces for strongly-typed object-oriented programming. </title> <booktitle> In Proceedings of OOPSLA'89 (1989), SIGPLAN, </booktitle> <publisher> ACM Press. </publisher>
Reference: [6] <author> Dahl, O. J., and Nygaard, K. </author> <title> Simula, an algol-based simulation language. </title> <journal> Communications of the ACM 9, </journal> <volume> 9 (1966), </volume> <pages> 671-678. </pages>
Reference: [7] <institution> Electronic Communities. The E Whitepaper. </institution> <note> from http://www.communities.com/e, 1996. </note>
Reference: [8] <author> Ellis, M. A., and Stroustrup, B. </author> <title> The Annotated C ++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference: [9] <author> Gamma, E., Helm, R., Johnson, R., and Vlissides, J. </author> <title> Design Patterns: Abstraction and Reuse of Object-Oriented Designs. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [10] <author> Goldberg, A., and Robson, D. </author> <title> Smalltalk-80 The Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference: [11] <author> Gosling, J., Joy, B., and Steele, G. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: This would indeed be very useful, but it would require significant changes to the current Java grammar. For instance, the syntactic category VirtualType would have to not only include "TypeName," but also "Ambigu-ousName . TypeName" <ref> [11, x6.5] </ref>, so that a virtual type can be accessed using dot notion for casts, such as in: void m (PointVector pv) - Point p = new Point (2, 2); pv.insert ((pv.ElemType)p); - Which would then be generating the following code: void m (PointVector pv) - Point p = new Point <p> If the value of pv would change between the cast and the call to insert, then the cast is no good, since it may have been replaced by some other subclass of PointVector. This assertion is trivially true for constant, i.e., final declared, fields, variables and parameters <ref> [11, x8.3.1.2] </ref>, or the special variable this which is always constant. One possible restriction could thus be to only allow remote virtual qualifications (and casts) via final variables or fields. <p> While Java at first glance seems like a neat little language, The Java Language Specification <ref> [11] </ref> is more than 800 pages, and it is an unsurmountable task to know it all. Acknowledgements The author would like to present a special thank to Bill Joy and John Rose for their insightful comments and explanations of the finer points of Java.
Reference: [12] <author> JavaSoft. </author> <title> Inner Classes in Java 1.1. </title> <note> from http://www.javasoft.com, 1996. </note>
Reference: [13] <author> Kiczales, G., de Rivi eres, J., and Bobrow, D. G. </author> <title> The Art of the Meta Object Protocol. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [14] <author> Kristensen, B. B., Madsen, O. L., Moller-Pedersen, B., and Nygaard, K. </author> <title> Abstraction mechanisms in the Beta programming language. </title> <booktitle> In Proceedings of POPL'83 (Austin, </booktitle> <address> TX, </address> <year> 1983). </year>
Reference: [15] <author> Liskov, B., Snyder, A., Atkinson, R., and Schaffert, C. </author> <title> Abstraction Mechanisms in CLU. </title> <journal> Communications of the ACM 20, </journal> <month> 8 (August </month> <year> 1977). </year>
Reference-contexts: The Bopl programming language [27] solves this problem in a clean and consistent, albeit very expensive, fashion. 15 7.2 Related Work In their paper [22], Myers et. al. suggest a mechanism for implementing constrained genericity through parameterized classes in Java, where constraints are based on where clauses as in CLU <ref> [15] </ref>. Another recent paper by Odersky et. al. is [25] which describes the design of Pizza, implementing of F-bounded parametric poly-morphism for Java in a fashion very similar to Myers et. al.
Reference: [16] <author> Madsen, O. L. </author> <title> Open issues in object-oriented programming-a scandinavian perspective. </title> <journal> Software-Practice and Experience 25, </journal> <note> S4 (December 1995). </note>
Reference: [17] <author> Madsen, O. L., Magnusson, B., and Moller-Pedersen, B. </author> <title> Strong typing of object-oriented languages revisited. </title> <booktitle> In Proceedings of OOPSLA'90 (Ottawa, Canada, 1990), SIGPLAN, </booktitle> <publisher> ACM Press. </publisher>
Reference: [18] <author> Madsen, O. L., and Moller-Pedersen, B. </author> <title> Virtual classes: A powerful mechanism in object-oriented programming. </title> <booktitle> In Proceedings of OOPSLA'89 (1989), SIGPLAN, </booktitle> <publisher> ACM Press. </publisher> <pages> 17 </pages>
Reference-contexts: This example was introduced in [20], and has been used in the literature to illustrate mechanisms for genericity <ref> [18, 19, 27] </ref>.
Reference: [19] <author> Madsen, O. L., Moller-Pedersen, B., and Nygaard, K. </author> <title> Object-Oriented Programming in the Beta Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: This example was introduced in [20], and has been used in the literature to illustrate mechanisms for genericity <ref> [18, 19, 27] </ref>.
Reference: [20] <author> Meyer, B. </author> <title> Genericity versus Inheritance. </title> <booktitle> In Proceedings of OOPSLA'86 (1986). </booktitle>
Reference-contexts: This example was introduced in <ref> [20] </ref>, and has been used in the literature to illustrate mechanisms for genericity [18, 19, 27].
Reference: [21] <author> Meyer, B. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice Hall International Series in Computer Science. Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference: [22] <author> Myers, A., Bank, J., and Liskov, B. </author> <title> Parameterized types for Java. </title> <booktitle> In Proceedings of POPL'97 (1997). </booktitle>
Reference-contexts: In an effort to estimate the cost of a regular dynamic cast in Java, we tried to run the same test program Myers et. al. used in <ref> [22] </ref> to determine that: "For a simple collection class, avoid ing the runtime casts from Object reduced the run times by up to 17%. . . "|Myers, Bank, and Liskov Their performance figures also compare the cost of "cast from Object" to "hard coded types", and they state that using hard <p> To do this the programmer has to emulate the equivalent of This for the recursive types and extend these appropriately in subclasses. The Bopl programming language [27] solves this problem in a clean and consistent, albeit very expensive, fashion. 15 7.2 Related Work In their paper <ref> [22] </ref>, Myers et. al. suggest a mechanism for implementing constrained genericity through parameterized classes in Java, where constraints are based on where clauses as in CLU [15]. <p> While both of these are very well documented indeed, they still have the conceptual problems with parameterized classes discussed earlier. In addition, since in <ref> [22] </ref> where clauses are based on conformance rather than declared relationships between types, a class may accidentally conform to (match) the where clause without the programmers intent.
Reference: [23] <author> Naroff, S. </author> <type> Personal communication. </type> <pages> 1993-1996. </pages>
Reference: [24] <author> NeXT Computer, Inc. </author> <title> Object Oriented Programming and the Objective C Language. </title> <address> Redwood City, CA, </address> <month> April </month> <year> 1993. </year>
Reference: [25] <author> Odersky, M., and Wadler, P. </author> <title> Pizza into Java: Translating theory into practice. </title> <booktitle> In Proceedings of POPL'97 (Paris, 1997), </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: Another recent paper by Odersky et. al. is <ref> [25] </ref> which describes the design of Pizza, implementing of F-bounded parametric poly-morphism for Java in a fashion very similar to Myers et. al. While both of these are very well documented indeed, they still have the conceptual problems with parameterized classes discussed earlier.
Reference: [26] <author> Omohundro, S. </author> <title> The Sather Programming Language. </title> <journal> Dr. Dobb's Journal 18, </journal> <month> 11 (October </month> <year> 1993). </year>
Reference: [27] <author> Palsberg, J., and Schwartsbach, M. I. </author> <title> Object-Oriented Type Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: This example was introduced in [20], and has been used in the literature to illustrate mechanisms for genericity <ref> [18, 19, 27] </ref>. <p> It is harder to to support mutally recusrive classes that support being subclassed, such as is often the case for design patterns. To do this the programmer has to emulate the equivalent of This for the recursive types and extend these appropriately in subclasses. The Bopl programming language <ref> [27] </ref> solves this problem in a clean and consistent, albeit very expensive, fashion. 15 7.2 Related Work In their paper [22], Myers et. al. suggest a mechanism for implementing constrained genericity through parameterized classes in Java, where constraints are based on where clauses as in CLU [15].
Reference: [28] <author> Schwartsbach, M. I. </author> <title> Object-oriented type systems: </title> <note> Principles and applications. from http://www.daimi.aau.dk/~mis, 1996. </note>
Reference: [29] <author> Seidewitz, E. </author> <title> Genericity Versus Inheritance Reconsidered: Self-Reference Using Generices. </title> <booktitle> In Proceedings of OOPSLA'94 (1994). </booktitle>
Reference: [30] <author> Shang, D. </author> <title> Are cows animals? Object Currents 1, </title> <note> 1 (January 1996). http://www.sigs.com/objectcurrents/. </note>
Reference: [31] <author> Ungar, D., Smith, R. B., Chambers, C., and H olzle, U. </author> <title> Object, message and performance: How they coexist in self. </title> <booktitle> IEEE Computer 25, </booktitle> <month> 10 (October </month> <year> 1992). </year>
Reference-contexts: Much work has already been done to implement such compilers supporting customization as part of the Self project <ref> [2, 31] </ref>. One such sophisticated Java virtual machine is described in [1]. Another similar Java virtual machine has been developed by Animorphic Systems which was recently acquired by JavaSoft.
Reference: [32] <author> Zdonik, S., and Maier, D. </author> <title> Readings in Object Oriented Databases. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990, </year> <title> ch. </title> <booktitle> 1: Fundamentals of Object-Oriented Databases, </booktitle> <pages> pp. 1-32. </pages>
References-found: 32

