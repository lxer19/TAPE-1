URL: ftp://ftp.eecs.umich.edu/groups/gasm/vhdl-ams.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Title: Semantic Validation of VHDL-AMS by an Abstract State Machine  Analog Mixed Signal LSI Design  
Author: Hisashi Sasaki Kazunori Mizushima Takeshi Sasaki 
Affiliation: Dept., Toshiba Corp. 2 Dept. of Computer Science, Tokyo Institute of Technology  
Abstract: This report presents a semantic analysis for VHDL-AMS, a mixed-signal extension of VHDL, based on an abstract state machine. Intended as a validation for the ongoing standardization project, it faithfully reflects the view of simulation proposed. Our experiences proved practical advantages of formal approach in sharing concepts. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> IEEE/DASC 1076.1 Working Group, </author> <title> 1076.1 Working Document Definition of Analog Extensions to IEEE Standard VHDL , June 1996, </title> <note> May 1, and July 1 1997. </note>
Reference-contexts: 1. Introduction As a language validation for VHDL-AMS <ref> [1] </ref>, there are many approaches according to its focus. 1) Preparations of test examples [2] has two purposes: model description that intent is trivial for everyone is effective to check how we combine language constructs (suggesting practical usage) and to reconfirm the semantics by getting approval from language design team. 2)
Reference: [2] <author> Tom Kazmierski, Mark Zwolinski, </author> <note> Southampton VHDL-AMS validation Suits, accessible by http: //www. syssim. ecs. soton. ac.uk/index.html </note>
Reference-contexts: 1. Introduction As a language validation for VHDL-AMS [1], there are many approaches according to its focus. 1) Preparations of test examples <ref> [2] </ref> has two purposes: model description that intent is trivial for everyone is effective to check how we combine language constructs (suggesting practical usage) and to reconfirm the semantics by getting approval from language design team. 2) Test suit attentive to each language construct will be useful not only to check
Reference: [3] <author> Vasu Shanmugasundaram, Hal Carter, </author> <title> the analyzer for VHDL-AMS, </title> <note> accessible by http://www.ececs.uc.edu/~vasu </note>
Reference-contexts: practical usage) and to reconfirm the semantics by getting approval from language design team. 2) Test suit attentive to each language construct will be useful not only to check language semantics separately but also to verify the coverage of tool implementation and its correctness. 3) A development of a parser <ref> [3] </ref> is important to check whether proposed syntax rules is sound for implementation because that language proposal doesn't mention about a language class, such as LR (k). 4) A satisfiability check [4] how design objectives are resolved is important but not so easy to do in some cases, because that design
Reference: [4] <author> Hisashi Sasaki, et. al., </author> <note> 1076.1 validation by EIAJ team, accessible by http: // www. tamaru. kuee.kyoto-u. ac.jp /1076.1 /index. htm. </note>
Reference-contexts: separately but also to verify the coverage of tool implementation and its correctness. 3) A development of a parser [3] is important to check whether proposed syntax rules is sound for implementation because that language proposal doesn't mention about a language class, such as LR (k). 4) A satisfiability check <ref> [4] </ref> how design objectives are resolved is important but not so easy to do in some cases, because that design objective is not explained enough.
Reference: [5] <author> M. Madrid, P. T. Breuer, C. D. </author> <title> Kloos, A semantic model for VHDL-AMS , CHARME 97, </title> <month> October </month> <year> 1997. </year>
Reference-contexts: Another formal approach fl fl1 1000-1, Kasama-cho, Sakae-ku, Yokohama 247, Japan. Email: sasaki @acad.eec.toshiba.co.jp. 2 2-12-1, Oookayama, Meguro-ku, Tokyo 152, Japan. Email: -mizkaz, sasaki-@cs.titech.ac.jp <ref> [5] </ref> is also undertaken independently. Note that each of approach has its reasons to exit. No one is fully superior to others. We have selected an abstract state machine semantics [6] for our foundation because it has already fully described semantics for VHDL'93 and reflected LRM (language reference manual) faithfully.
Reference: [6] <author> Egon Boerger et.al., </author> <title> A Formal Definition of an Abstract VHDL 93 Simulator by EA-Machines, </title> <booktitle> in [7] </booktitle>
Reference-contexts: Email: sasaki @acad.eec.toshiba.co.jp. 2 2-12-1, Oookayama, Meguro-ku, Tokyo 152, Japan. Email: -mizkaz, sasaki-@cs.titech.ac.jp [5] is also undertaken independently. Note that each of approach has its reasons to exit. No one is fully superior to others. We have selected an abstract state machine semantics <ref> [6] </ref> for our foundation because it has already fully described semantics for VHDL'93 and reflected LRM (language reference manual) faithfully. <p> The remainder is composed as follows: Chapter 2 gives a brief introduction for an abstract state machine. In chapter 3, we extend <ref> [6] </ref> for analog and mixed-signal 2 extension. In chapter 4 , based on the developed semantic model, we review our validation experiences. This clarify how misunderstandings are taken. Chapter 5 concludes this report. fl 2. <p> For example, A:=B ; B:=C means that B:=C is executed after A:=B . 3. The Formal Model In this section, we first redefine the basic concept for defining the mixed-signal kernel in order to update the original work <ref> [6] </ref>. Thereafter, we add the formal definition of break statement and simultaneous statements newly invented for mixed signal extension. <p> The rule KA2 find the solutions for each (analog) current time T i including the (digital) next time T n . The rule K2 and K3 are to be modified (not mentioned here, see <ref> [6] </ref>). 3.4.1 Determine Next Time Point Analog kernel will be invoked only when cycle is time_cycle and phase is update_driving_value .
Reference: [7] <editor> Carlos D. Kloos, Peter, T. Breuer (editors), </editor> <title> Formal Semantics for VHDL, 1995, </title> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: No one is fully superior to others. We have selected an abstract state machine semantics [6] for our foundation because it has already fully described semantics for VHDL'93 and reflected LRM (language reference manual) faithfully. As far as we know, other approaches <ref> [7] </ref> provided the VHDL'87 semantics, and most of them treat a small subset of it, thus they seems for us not easy to apply for practical validation.
Reference: [8] <author> Yuri Gurevich, </author> <title> Evolving Algebras 1993: Lipari Guide , in Specification and Validation Methods, </title> <editor> Ed. E. Boerger, </editor> <booktitle> 1994, </booktitle> <publisher> Oxford University Press. </publisher>
Reference-contexts: In chapter 4 , based on the developed semantic model, we review our validation experiences. This clarify how misunderstandings are taken. Chapter 5 concludes this report. fl 2. Abstract State Machine We set out here the basic definition shortly and refer the readers to Gurevich s work <ref> [8] </ref> for a rigorous formalization . Abstract state machine (ASM) can be understood as pseudo-code over abstract data .
References-found: 8

