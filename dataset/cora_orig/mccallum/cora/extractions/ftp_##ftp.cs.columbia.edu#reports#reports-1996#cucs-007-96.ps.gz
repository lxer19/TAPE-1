URL: ftp://ftp.cs.columbia.edu/reports/reports-1996/cucs-007-96.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1996.html
Root-URL: http://www.cs.columbia.edu
Title: Incremental Process Support for Code Reengineering: An Update (Experience Report)  
Author: Gail E. Kaiser George T. Heineman Peter D. Skopp Jack J. Yang fl Gail E. Kaiser, George T. Heineman, Peter D. Skopp and Jack J. Yang 
Keyword: Cross-Referencing, Object-Oriented Database, Process-Centered Environments, System Build, Tool Enveloping.  
Note: c  
Address: 500 West 120th Street New York, NY 10027 212-939-7081/fax:212-666-0140  
Affiliation: Columbia University Department of Computer Science  
Pubnum: CUCS-007-96  
Email: kaiser@cs.columbia.edu  
Date: 15 February 1996  
Abstract: Componentization is an important, emerging approach to software modernization whereby a stovepipe system is restructured into components that can be reused in other systems. More significantly from the system maintenance perspective, selected components in the original system can be completely replaced, e.g., the database or user interface. In some cases, a new architecture can be developed, for example to convert a monolithic system to the client/server paradigm, and the old components plugged into place along with some new ones. We update a 1994 publication in this conference series, where we proposed using process modeling and enactment technology to support both construction of systems from components and re-engineering of systems to permit component replacement. This paper describes our experience following that approach through two generations of component-oriented process models. This paper is based on work sponsored in part by Advanced Research Project Agency under ARPA Order B128 monitored by Air Force Rome Lab F30602-94-C-0197, in part by National Science Foundation CCR-9301092, and in part by New York State Science and Technology Foundation Center for Advanced Technology in High Performance Computing and Communications in Healthcare NYSSTF-CAT-95013. Heineman is supported in part by an AT&T Fellowship. Skopp is now an employee of D.E. Shaw & Co. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the US or NYS government, ARPA, Air Force, NSF, NYSSTF, AT&T or D.E. Shaw & Co. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Modeling concurrency in rule-based development environments. </title> <journal> IEEE Expert, </journal> <volume> 5(6) </volume> <pages> 15-27, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: (pathnames to files in an intentionally opaque "hidden file system" that should not be accessed except through 2 the PCE), composite attributes in an aggregation hierarchy, and reference attributes allowing arbi-trary 1-to-N relations among objects, and one or more superclasses from which it inherits attributes (and rules treated as multi-methods <ref> [1] </ref>). Ad hoc and embedded (in rules) queries may combine navigational and associative clauses in a declarative style. Rules perform all data manipulation.
Reference: [2] <author> Israel Ben-Shaul and Gail E. Kaiser. </author> <title> A Paradigm for Decentralized Process Modeling. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: Then we describe the OzMarvel and EmeraldCity processes, with some discussion on how we used each of them in our componentization efforts. The paper concludes by summarizing lessons learned. 2 Marvel and Oz Background Marvel [6, 13] and Oz <ref> [4, 2] </ref> employ client/server architectures. Clients provide the graphical user interface and invoke external tools. Servers context-switch among multiple clients, and include the process engine, object management, and transaction management for concurrency control and failure recovery (transaction management details are not addressed in this paper).
Reference: [3] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> Process evolution in the Marvel environment. </title> <editor> In Wilhelm Schafer, editor, </editor> <booktitle> 8th International Software Process Workshop: State of the Practice in Process Technology, </booktitle> <pages> pages 104-106, </pages> <address> Wadern, Germany, </address> <month> March </month> <year> 1993. </year> <note> Position paper. </note>
Reference-contexts: Over its lifetime, OzMarvel was actively used by 14 people (not all at the same time). Although the basic philosophy and design remained the same, OzMarvel was modified several times to fix bugs in the process and to improve multi-user support; see <ref> [3] </ref> for a brief discussion of the schema and process evolution utility, called Evolver, used by Marvel and Oz to upgrade the state of an in-progress process to match the semantic constraints of a new process model.
Reference: [4] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the oz environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <pages> pages 179-188, </pages> <address> Sorrento, Italy, May 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Then we describe the OzMarvel and EmeraldCity processes, with some discussion on how we used each of them in our componentization efforts. The paper concludes by summarizing lessons learned. 2 Marvel and Oz Background Marvel [6, 13] and Oz <ref> [4, 2] </ref> employ client/server architectures. Clients provide the graphical user interface and invoke external tools. Servers context-switch among multiple clients, and include the process engine, object management, and transaction management for concurrency control and failure recovery (transaction management details are not addressed in this paper).
Reference: [5] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> Process support for synchronous groupware activities. </title> <type> Technical Report CUCS-002-95, </type> <institution> Columbia University Department of Computer Science, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: Built-in operations such as add an object, delete an object, etc., are modeled as rules for a uniform approach. Oz provides means for modeling and enacting synchronous and asynchronous "groupware" tools <ref> [19, 5] </ref>, which were not supported by Marvel, but the details aren't relevant to this paper. Marvel and Oz support nearly the same object-oriented data definition and query languages.
Reference: [6] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: Then we describe the OzMarvel and EmeraldCity processes, with some discussion on how we used each of them in our componentization efforts. The paper concludes by summarizing lessons learned. 2 Marvel and Oz Background Marvel <ref> [6, 13] </ref> and Oz [4, 2] employ client/server architectures. Clients provide the graphical user interface and invoke external tools. Servers context-switch among multiple clients, and include the process engine, object management, and transaction management for concurrency control and failure recovery (transaction management details are not addressed in this paper).
Reference: [7] <author> Michael J. Carey, David J. Dewitt, Goetz Graefe, David M. Haight, Joek E. Richardson, Daniel T. Schuh, Eugene J. Shekita, and Scott L. Vandenburg. </author> <title> The exodus extensible DBMS project: An overview. </title> <editor> In Stanley B. Zdonik and David Maier, editors, </editor> <booktitle> Readings in Object-Oriented Database Systems, chapter 7.3, </booktitle> <pages> pages 474-499. </pages> <publisher> Morgan Kaufman, </publisher> <address> San Mateo CA, </address> <year> 1990. </year>
Reference-contexts: from these components (the final phase, replacement of the process engine, is now in progress using EmeraldCity), after performing a set of experiments concerned with integrating some of our components into externally developed systems (notably Cap Gemini's ProcessWEAVER process-centered environment framework [8] and University of Wisconsin's Exodus database management system <ref> [7] </ref>) and replacing portions of Oz with externally developed components (notably the object management system from GIE Emeraude's PCTE industry-standard environment framework [18]); these experiments are discussed in [11, 16, 12, 15]. The OzMarvel data schema structures the objectbase into two main parts.
Reference: [8] <author> Christer Fernstrom. </author> <title> PROCESS WEAVER: Adding process support to UNIX. </title> <booktitle> In 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The long-term plan was to eventually reconstitute Oz from these components (the final phase, replacement of the process engine, is now in progress using EmeraldCity), after performing a set of experiments concerned with integrating some of our components into externally developed systems (notably Cap Gemini's ProcessWEAVER process-centered environment framework <ref> [8] </ref> and University of Wisconsin's Exodus database management system [7]) and replacing portions of Oz with externally developed components (notably the object management system from GIE Emeraude's PCTE industry-standard environment framework [18]); these experiments are discussed in [11, 16, 12, 15].
Reference: [9] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 12 </pages>
Reference-contexts: Rules perform all data manipulation. Commercial off-the-shelf tools and other external application programs are interfaced to an environment instance through shell script envelopes, using augmented notation that hides from tool integrators the details of accessing the "hidden file system" and passing input and output parameters <ref> [9] </ref>. A return code from the envelope determines which of the several rule effects is asserted. A Marvel environment consists of an arbitrary number of clients connected via an interprocess communication layer to a central server. Each server enacts one process, in which all its clients participate.
Reference: [10] <author> George T. Heineman and Gail E. Kaiser. </author> <title> Incremental process support for code reengineering. </title> <booktitle> In International Conference on Software Maintenance, </booktitle> <pages> pages 282-290, </pages> <address> Victoria BC, Canada, September 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The paper can be viewed as a status report on the current and future research directions we described in a previous publication in this conference series, which presented our ideas and the implementation status as of July 1994 <ref> [10] </ref>. We are particularly concerned in this paper with process support for componentization of process-centered environments (PCEs), which involved breaking up a particular existing PCE into components and reusing some of its components in a variety of environment architectures and frameworks.
Reference: [11] <author> George T. Heineman and Gail E. Kaiser. </author> <title> An architecture for integrating concurrency control into environment frameworks. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 305-313, </pages> <address> Seattle WA, April 1995. </address> <publisher> ACM Press. </publisher>
Reference-contexts: our components into externally developed systems (notably Cap Gemini's ProcessWEAVER process-centered environment framework [8] and University of Wisconsin's Exodus database management system [7]) and replacing portions of Oz with externally developed components (notably the object management system from GIE Emeraude's PCTE industry-standard environment framework [18]); these experiments are discussed in <ref> [11, 16, 12, 15] </ref>. The OzMarvel data schema structures the objectbase into two main parts. One part consists of a set of teams, each consisting in turn of a group of private programmer workspaces. <p> Over the summer 1995 we converted Oz from its native pointer-based object management system to using a OID-based object-oriented database component, Darkover [14]. An OID (or object identifier) is a unique identifier represented as an integer. The native transaction manager had already been replaced with a component <ref> [11] </ref>, a much simpler effort performed using OzMarvel, and work on the new process engine component was still progressing independently.
Reference: [12] <author> George T. Heineman and Gail E. Kaiser. </author> <title> The CORD approach to extensible concurrency control. </title> <type> Technical Report CUCS-024-95 (revised), </type> <institution> Columbia University Department of Computer Science, </institution> <month> February </month> <year> 1996. </year> <note> Submitted for publication. </note>
Reference-contexts: our components into externally developed systems (notably Cap Gemini's ProcessWEAVER process-centered environment framework [8] and University of Wisconsin's Exodus database management system [7]) and replacing portions of Oz with externally developed components (notably the object management system from GIE Emeraude's PCTE industry-standard environment framework [18]); these experiments are discussed in <ref> [11, 16, 12, 15] </ref>. The OzMarvel data schema structures the objectbase into two main parts. One part consists of a set of teams, each consisting in turn of a group of private programmer workspaces.
Reference: [13] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Then we describe the OzMarvel and EmeraldCity processes, with some discussion on how we used each of them in our componentization efforts. The paper concludes by summarizing lessons learned. 2 Marvel and Oz Background Marvel <ref> [6, 13] </ref> and Oz [4, 2] employ client/server architectures. Clients provide the graphical user interface and invoke external tools. Servers context-switch among multiple clients, and include the process engine, object management, and transaction management for concurrency control and failure recovery (transaction management details are not addressed in this paper).
Reference: [14] <institution> Programming Systems Lab. </institution> <note> Darkover 1.0 manual. Technical Report CUCS-023-95e, </note> <institution> Columbia University, Department of Computer Science, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Figure 2 shows a (somewhat more readable) horizontal view from that site, with an open connection to the pds site (Peter Skopp's workspace). Over the summer 1995 we converted Oz from its native pointer-based object management system to using a OID-based object-oriented database component, Darkover <ref> [14] </ref>. An OID (or object identifier) is a unique identifier represented as an integer. The native transaction manager had already been replaced with a component [11], a much simpler effort performed using OzMarvel, and work on the new process engine component was still progressing independently.
Reference: [15] <author> Wenke Lee and Gail E. Kaiser. </author> <title> Interfacing Oz with the PCTE OMS. </title> <type> Technical Report CUCS-012-95, </type> <institution> Columbia University, Department of Computer Science, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: our components into externally developed systems (notably Cap Gemini's ProcessWEAVER process-centered environment framework [8] and University of Wisconsin's Exodus database management system [7]) and replacing portions of Oz with externally developed components (notably the object management system from GIE Emeraude's PCTE industry-standard environment framework [18]); these experiments are discussed in <ref> [11, 16, 12, 15] </ref>. The OzMarvel data schema structures the objectbase into two main parts. One part consists of a set of teams, each consisting in turn of a group of private programmer workspaces.
Reference: [16] <author> Steven S. Popovich and Gail E. Kaiser. </author> <title> Integrating an existing environment with a rule-based process server. </title> <type> Technical Report CUCS-004-95, </type> <institution> Columbia University Department of Computer Science, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: our components into externally developed systems (notably Cap Gemini's ProcessWEAVER process-centered environment framework [8] and University of Wisconsin's Exodus database management system [7]) and replacing portions of Oz with externally developed components (notably the object management system from GIE Emeraude's PCTE industry-standard environment framework [18]); these experiments are discussed in <ref> [11, 16, 12, 15] </ref>. The OzMarvel data schema structures the objectbase into two main parts. One part consists of a set of teams, each consisting in turn of a group of private programmer workspaces.
Reference: [17] <author> Michael H. Sokolsky and Gail E. Kaiser. </author> <title> A framework for immigrating existing software into new software development environments. </title> <journal> Software Engineering Journal, </journal> <volume> 6(6) </volume> <pages> 435-453, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: After an initial flurry to convert the Master Area baseline, the work has proceeded more gradually: any C code (from OzMarvel or elsewhere) may be immigrated using Ozify (the Oz version of Marvelizer <ref> [17] </ref>) into an EmeraldCity workspace. There it is converted using a combination of the Gnu protoize tool, extensions to the envelopes of other tools, and manual changes to header files to preserve the conventions discussed below.
Reference: [18] <author> Ian Thomas. </author> <title> PCTE interfaces: Supporting tools in software-engineering environments. </title> <journal> IEEE Software, </journal> <volume> 6(6) </volume> <pages> 15-23, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: experiments concerned with integrating some of our components into externally developed systems (notably Cap Gemini's ProcessWEAVER process-centered environment framework [8] and University of Wisconsin's Exodus database management system [7]) and replacing portions of Oz with externally developed components (notably the object management system from GIE Emeraude's PCTE industry-standard environment framework <ref> [18] </ref>); these experiments are discussed in [11, 16, 12, 15]. The OzMarvel data schema structures the objectbase into two main parts. One part consists of a set of teams, each consisting in turn of a group of private programmer workspaces.
Reference: [19] <author> Giuseppe Valetto and Gail E. Kaiser. </author> <title> Enveloping sophisticated tools into computer-aided software engineering environments. </title> <booktitle> In IEEE 7th International Workshop on Computer-Aided Software Engineering, </booktitle> <pages> pages 40-48, </pages> <address> Toronto Ontario, Canada, </address> <month> July </month> <year> 1995. </year> <month> 13 </month>
Reference-contexts: Built-in operations such as add an object, delete an object, etc., are modeled as rules for a uniform approach. Oz provides means for modeling and enacting synchronous and asynchronous "groupware" tools <ref> [19, 5] </ref>, which were not supported by Marvel, but the details aren't relevant to this paper. Marvel and Oz support nearly the same object-oriented data definition and query languages.
References-found: 19

