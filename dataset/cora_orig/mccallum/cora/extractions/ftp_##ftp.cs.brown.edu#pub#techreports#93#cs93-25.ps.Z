URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-25.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-25.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> B. Bhargava and S. R. Lian, </author> <title> ``Independent check-pointing and concurrent rollback for recovery - An optimistic approach,'' </title> <booktitle> Proc. IEEE Symp. on Reliable Distr. System, </booktitle> <pages> pp. </pages> <month> 3-12 </month> <year> (1988). </year>
Reference-contexts: 1. Introduction Checkpointing and rollback recovery are techniques to provide fault-tolerance in distributed systems <ref> [1, 2, 3, 4, 5, 6, 12, 13, 14, 16] </ref>. With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints [1, 4, 12, 13, 16]. <p> With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints <ref> [1, 4, 12, 13, 16] </ref>. Because processes do not coordinate checkpoints during normal execution, independent checkpointing is simple and has low run-time overhead. However, it can have potentially high recovery overhead because of the domino effect [11]. <p> Our goal is to always rollback to a consistent checkpoint. The ``'' s indicate checkpoints. To recover, all processes must be rolled back to their initial checkpoints. Two approaches exist to achieving consistent checkpoints: independent and coordinated checkpointing. With independent checkpointing, each process checkpoints independently without coordinating with others <ref> [1, 12, 16] </ref>. The consistent checkpoint for starting a recovery is computed after a fault. However, such a checkpoint does not always exist, so rolling back could incur the domino effect.
Reference: [2] <author> D. Briatico, A. Ciuffoletti, and L. Simoncini, </author> <title> ``A Distributed Domino-Effect Free Recovery Algorithm,'' </title> <booktitle> 4th IEEE Symp. on Reliability in Dist. Software and Database Syst., </booktitle> <pages> pp. </pages> <month> 207-215 </month> <year> (1984). </year>
Reference-contexts: 1. Introduction Checkpointing and rollback recovery are techniques to provide fault-tolerance in distributed systems <ref> [1, 2, 3, 4, 5, 6, 12, 13, 14, 16] </ref>. With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints [1, 4, 12, 13, 16]. <p> Russell calls this phenomenon cyclic restoration, when rolling back some process p to point x causes further restoration of p to a point preceding x [12]. Coordinated checkpointing eliminates cyclic restoration by guaranteeing that consistent checkpoints always exist <ref> [2, 3, 5, 6, 14] </ref>. By coordinating processes in setting up checkpoints, every checkpoint belongs to a consistent checkpoint, so these systems are domino-free. To coordinate checkpoints, some systems use explicit control messages. Other systems piggyback checkpoint markers on regular messages [2, 3, 5, 14]. <p> By coordinating processes in setting up checkpoints, every checkpoint belongs to a consistent checkpoint, so these systems are domino-free. To coordinate checkpoints, some systems use explicit control messages. Other systems piggyback checkpoint markers on regular messages <ref> [2, 3, 5, 14] </ref>. Piggybacked markers are appended to outgoing messages after a process decides to initiate a new checkpoint, and processes receiving a marker take a new checkpoint (to ensure it is consistent with the process initiating the checkpoint). <p> Thus, although in the worst case our algorithm could checkpoint frequently, this worst case does not occur in practice. This behavior is in contrast to some domino-free systems <ref> [2, 14] </ref> that take (potentially) many checkpoints to guarantee domino-free recovery. We virtually avoid the domino effect with little increase in checkpoint overhead. 6. Experimental Results To measure the effectiveness of our adaptive check-pointing algorithm at reducing rollback propagation, we analyzed executions of six message-passing programs.
Reference: [3] <author> K. M. Chandy and L. Lamport, </author> <title> ``Distributed Snapshots: Determining Global States of Distributed Systems,'' </title> <journal> ACM Trans on Comp Syst 3(1) pp. </journal> <month> 63-75 (Feb, </month> <year> 1985). </year>
Reference-contexts: 1. Introduction Checkpointing and rollback recovery are techniques to provide fault-tolerance in distributed systems <ref> [1, 2, 3, 4, 5, 6, 12, 13, 14, 16] </ref>. With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints [1, 4, 12, 13, 16]. <p> Russell calls this phenomenon cyclic restoration, when rolling back some process p to point x causes further restoration of p to a point preceding x [12]. Coordinated checkpointing eliminates cyclic restoration by guaranteeing that consistent checkpoints always exist <ref> [2, 3, 5, 6, 14] </ref>. By coordinating processes in setting up checkpoints, every checkpoint belongs to a consistent checkpoint, so these systems are domino-free. To coordinate checkpoints, some systems use explicit control messages. Other systems piggyback checkpoint markers on regular messages [2, 3, 5, 14]. <p> By coordinating processes in setting up checkpoints, every checkpoint belongs to a consistent checkpoint, so these systems are domino-free. To coordinate checkpoints, some systems use explicit control messages. Other systems piggyback checkpoint markers on regular messages <ref> [2, 3, 5, 14] </ref>. Piggybacked markers are appended to outgoing messages after a process decides to initiate a new checkpoint, and processes receiving a marker take a new checkpoint (to ensure it is consistent with the process initiating the checkpoint).
Reference: [4] <author> D. B. Johnson and W. Zwaenepoel, </author> <title> ``Recovery in Distributed Systems Using Optimistic Message Logging and Checkpointing,'' </title> <note> Journal of Algorithms 11 pp. </note> <month> 462-491 </month> <year> (1990). </year>
Reference-contexts: 1. Introduction Checkpointing and rollback recovery are techniques to provide fault-tolerance in distributed systems <ref> [1, 2, 3, 4, 5, 6, 12, 13, 14, 16] </ref>. With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints [1, 4, 12, 13, 16]. <p> With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints <ref> [1, 4, 12, 13, 16] </ref>. Because processes do not coordinate checkpoints during normal execution, independent checkpointing is simple and has low run-time overhead. However, it can have potentially high recovery overhead because of the domino effect [11]. <p> Previous work either makes simplifying assumptions to avoid this effect, or incurs run-time overhead by checkpointing unnecessarily often (or coordinating checkpoints). Our goal is to study when unbounded restoration occurs, and develop an efficient checkpointing algorithm to reduce it. Some systems assume the execution between message receives is deterministic <ref> [4, 13] </ref>. Rolling back process p (after a fault) then requires no other processes to be rolled back. When p is resumed, messages recomputed by p during recovery will be identical to those computed originally and can be ignored.
Reference: [5] <author> K. H. Kim, J. H. You, and A. Abouelnaga, </author> <title> ``A Scheme for Coordinated Execution of Independently Designed Recoverable Distributed Processes,'' </title> <booktitle> Proc. IEEE Fault-Tolerant Computing Symposium, </booktitle> <pages> pp. </pages> <month> 130-135 </month> <year> (1986). </year>
Reference-contexts: 1. Introduction Checkpointing and rollback recovery are techniques to provide fault-tolerance in distributed systems <ref> [1, 2, 3, 4, 5, 6, 12, 13, 14, 16] </ref>. With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints [1, 4, 12, 13, 16]. <p> Russell calls this phenomenon cyclic restoration, when rolling back some process p to point x causes further restoration of p to a point preceding x [12]. Coordinated checkpointing eliminates cyclic restoration by guaranteeing that consistent checkpoints always exist <ref> [2, 3, 5, 6, 14] </ref>. By coordinating processes in setting up checkpoints, every checkpoint belongs to a consistent checkpoint, so these systems are domino-free. To coordinate checkpoints, some systems use explicit control messages. Other systems piggyback checkpoint markers on regular messages [2, 3, 5, 14]. <p> By coordinating processes in setting up checkpoints, every checkpoint belongs to a consistent checkpoint, so these systems are domino-free. To coordinate checkpoints, some systems use explicit control messages. Other systems piggyback checkpoint markers on regular messages <ref> [2, 3, 5, 14] </ref>. Piggybacked markers are appended to outgoing messages after a process decides to initiate a new checkpoint, and processes receiving a marker take a new checkpoint (to ensure it is consistent with the process initiating the checkpoint).
Reference: [6] <author> R. Koo and S. Toueg, </author> <title> ``Checkpointing and rollback-recovery for distributed systems,'' </title> <journal> IEEE Trans. on Soft. Eng. </journal> <pages> 13(1) pp. </pages> <month> 23-31 (Jan </month> <year> 1987). </year>
Reference-contexts: 1. Introduction Checkpointing and rollback recovery are techniques to provide fault-tolerance in distributed systems <ref> [1, 2, 3, 4, 5, 6, 12, 13, 14, 16] </ref>. With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints [1, 4, 12, 13, 16]. <p> Russell calls this phenomenon cyclic restoration, when rolling back some process p to point x causes further restoration of p to a point preceding x [12]. Coordinated checkpointing eliminates cyclic restoration by guaranteeing that consistent checkpoints always exist <ref> [2, 3, 5, 6, 14] </ref>. By coordinating processes in setting up checkpoints, every checkpoint belongs to a consistent checkpoint, so these systems are domino-free. To coordinate checkpoints, some systems use explicit control messages. Other systems piggyback checkpoint markers on regular messages [2, 3, 5, 14].
Reference: [7] <author> R.H.B. Netzer and B. P. Miller, </author> <title> ``Optimal Tracing and Replay for Debugging Message-Passing Parallel Programs,'' </title> <booktitle> Supercomputing '92, </booktitle> <pages> pp. </pages> <address> 502-511 Minneapolis, MN, </address> <month> (November </month> <year> 1992). </year>
Reference-contexts: Thus, we achieve the benefits of no rollback propagation but without the run-time overhead of coordinated checkpoints or other schemes that attempt to reduce rollback. This work is part of our larger effort toward adaptive strategies for replaying parallel programs <ref> [7, 8, 10] </ref>. 2. Motivation and Related Work Checkpointing and rollback recovery are techniques for recovering from faults during execution. A drawback is the domino effect, the unbounded restoration of states among the processes. <p> There are two sources of overhead. First, each process maintains a dependence vector, and checks at each receive for zigzag cycles. Second, overhead is incurred by checkpointing. Since there is evidence that maintaining vector timestamps and performing simple checks introduce low overhead <ref> [7] </ref>, we concentrate on the checkpointing overhead. We measured the percentage increase in the number of checkpoints taken by our adaptive algorithm over the traditional periodic checkpointing algorithm (for the same checkpoint period).
Reference: [8] <author> R.H.B. Netzer, </author> <title> ``Optimal Tracing and Replay for Debugging Shared-Memory Parallel Programs,'' </title> <booktitle> ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pp. </pages> <address> 1-11 San Diego, CA, </address> <month> (May </month> <year> 1993). </year>
Reference-contexts: Thus, we achieve the benefits of no rollback propagation but without the run-time overhead of coordinated checkpoints or other schemes that attempt to reduce rollback. This work is part of our larger effort toward adaptive strategies for replaying parallel programs <ref> [7, 8, 10] </ref>. 2. Motivation and Related Work Checkpointing and rollback recovery are techniques for recovering from faults during execution. A drawback is the domino effect, the unbounded restoration of states among the processes.
Reference: [9] <author> R.H.B. Netzer and J. Xu, </author> <title> ``Necessary and Sufficient Conditions for Consistent global Snapshots,'' </title> <institution> Brown University Computer Science Dept. </institution> <type> Technical Report CS-93-32, </type> <month> (July </month> <year> 1993). </year>
Reference-contexts: Zigzag paths exactly capture both the necessary and sufficient conditions for an arbitrary set S of checkpoints to belong to the same consistent global checkpoint, as described in the follow theorem (proofs appear elsewhere <ref> [9] </ref> due to limited space). Theorem 1 (Consistency Theorem) A set of checkpoints, S, from different processes can belong to the same consistent global check point iff no checkpoint in S has a zigzag path to any other checkpoint (including itself) in S.
Reference: [10] <author> R.H.B. Netzer and J. Xu, </author> <title> ``Adaptive Message Logging for Incremental Replay of Message-Passing Programs,'' </title> <booktitle> Supercomputing '93, </booktitle> <address> Port-land, OR, </address> <month> (November </month> <year> 1993). </year>
Reference-contexts: Thus, we achieve the benefits of no rollback propagation but without the run-time overhead of coordinated checkpoints or other schemes that attempt to reduce rollback. This work is part of our larger effort toward adaptive strategies for replaying parallel programs <ref> [7, 8, 10] </ref>. 2. Motivation and Related Work Checkpointing and rollback recovery are techniques for recovering from faults during execution. A drawback is the domino effect, the unbounded restoration of states among the processes.
Reference: [11] <author> B. Randell, </author> <title> ``System Structure for Software Fault Tolerance,'' </title> <journal> IEEE Trans. on Software Engineering SE-1(2) pp. </journal> <month> 220-232 (June </month> <year> 1975). </year>
Reference-contexts: Because processes do not coordinate checkpoints during normal execution, independent checkpointing is simple and has low run-time overhead. However, it can have potentially high recovery overhead because of the domino effect <ref> [11] </ref>.
Reference: [12] <author> D. Russell, </author> <title> ``State restoration in systems of communicating processes,'' </title> <journal> IEEE Trans. on Software Engineering SE-6(2) pp. </journal> <month> 183-194 (Mar </month> <year> 1980). </year>
Reference-contexts: 1. Introduction Checkpointing and rollback recovery are techniques to provide fault-tolerance in distributed systems <ref> [1, 2, 3, 4, 5, 6, 12, 13, 14, 16] </ref>. With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints [1, 4, 12, 13, 16]. <p> With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints <ref> [1, 4, 12, 13, 16] </ref>. Because processes do not coordinate checkpoints during normal execution, independent checkpointing is simple and has low run-time overhead. However, it can have potentially high recovery overhead because of the domino effect [11]. <p> Our goal is to always rollback to a consistent checkpoint. The ``'' s indicate checkpoints. To recover, all processes must be rolled back to their initial checkpoints. Two approaches exist to achieving consistent checkpoints: independent and coordinated checkpointing. With independent checkpointing, each process checkpoints independently without coordinating with others <ref> [1, 12, 16] </ref>. The consistent checkpoint for starting a recovery is computed after a fault. However, such a checkpoint does not always exist, so rolling back could incur the domino effect. <p> We must then roll back p2 further to C 2,0 (because of the undone message m4) and so on. Russell calls this phenomenon cyclic restoration, when rolling back some process p to point x causes further restoration of p to a point preceding x <ref> [12] </ref>. Coordinated checkpointing eliminates cyclic restoration by guaranteeing that consistent checkpoints always exist [2, 3, 5, 6, 14]. By coordinating processes in setting up checkpoints, every checkpoint belongs to a consistent checkpoint, so these systems are domino-free. To coordinate checkpoints, some systems use explicit control messages. <p> Instead, a cyclic restoration is required, since we must roll back p to find an earlier checkpoint that can belong to a consistent global set of checkpoints <ref> [12] </ref>. If we could ensure that all checkpoints are useful in the sense that they belong to such a consistent set, then we can always roll back a faulty process to its most recent checkpoint, avoiding cyclic restoration (and guaranteeing faster recovery).
Reference: [13] <author> R. E. Strom and S. Yemini, </author> <title> ``Optimistic Recovery in Distributed Systems,'' </title> <journal> ACM Trans. on Computer Systems 3 pp. </journal> <month> 204-226 (August </month> <year> 1985). </year>
Reference-contexts: 1. Introduction Checkpointing and rollback recovery are techniques to provide fault-tolerance in distributed systems <ref> [1, 2, 3, 4, 5, 6, 12, 13, 14, 16] </ref>. With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints [1, 4, 12, 13, 16]. <p> With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints <ref> [1, 4, 12, 13, 16] </ref>. Because processes do not coordinate checkpoints during normal execution, independent checkpointing is simple and has low run-time overhead. However, it can have potentially high recovery overhead because of the domino effect [11]. <p> Previous work either makes simplifying assumptions to avoid this effect, or incurs run-time overhead by checkpointing unnecessarily often (or coordinating checkpoints). Our goal is to study when unbounded restoration occurs, and develop an efficient checkpointing algorithm to reduce it. Some systems assume the execution between message receives is deterministic <ref> [4, 13] </ref>. Rolling back process p (after a fault) then requires no other processes to be rolled back. When p is resumed, messages recomputed by p during recovery will be identical to those computed originally and can be ignored.
Reference: [14] <author> K. Venkatesh, T. Radhakrishnan, and H. F. Li, </author> <title> ``Optimal Checkpointing and Local Recording for Domino-Free Rollback Recovery,'' </title> <note> Information Processing Letter 25 pp. </note> <month> 295--303 (July </month> <year> 1987). </year>
Reference-contexts: 1. Introduction Checkpointing and rollback recovery are techniques to provide fault-tolerance in distributed systems <ref> [1, 2, 3, 4, 5, 6, 12, 13, 14, 16] </ref>. With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints [1, 4, 12, 13, 16]. <p> Russell calls this phenomenon cyclic restoration, when rolling back some process p to point x causes further restoration of p to a point preceding x [12]. Coordinated checkpointing eliminates cyclic restoration by guaranteeing that consistent checkpoints always exist <ref> [2, 3, 5, 6, 14] </ref>. By coordinating processes in setting up checkpoints, every checkpoint belongs to a consistent checkpoint, so these systems are domino-free. To coordinate checkpoints, some systems use explicit control messages. Other systems piggyback checkpoint markers on regular messages [2, 3, 5, 14]. <p> By coordinating processes in setting up checkpoints, every checkpoint belongs to a consistent checkpoint, so these systems are domino-free. To coordinate checkpoints, some systems use explicit control messages. Other systems piggyback checkpoint markers on regular messages <ref> [2, 3, 5, 14] </ref>. Piggybacked markers are appended to outgoing messages after a process decides to initiate a new checkpoint, and processes receiving a marker take a new checkpoint (to ensure it is consistent with the process initiating the checkpoint). <p> Thus, although in the worst case our algorithm could checkpoint frequently, this worst case does not occur in practice. This behavior is in contrast to some domino-free systems <ref> [2, 14] </ref> that take (potentially) many checkpoints to guarantee domino-free recovery. We virtually avoid the domino effect with little increase in checkpoint overhead. 6. Experimental Results To measure the effectiveness of our adaptive check-pointing algorithm at reducing rollback propagation, we analyzed executions of six message-passing programs.
Reference: [15] <author> Y. M. Wang and W. K. Fuchs, </author> <title> ``Scheduling Message Processing for Reducing Rollback Propagation,'' </title> <booktitle> Proc. IEEE Fault-Tolerant Computing Symposium, </booktitle> <pages> pp. </pages> <month> 204-211 (July </month> <year> 1992). </year>
Reference-contexts: Although in the worst case the domino effect could still occur, experiments with our algorithm show that this does not happen. Wang and Fuchs have developed a transparent message scheduling technique for reducing rollback propagation for independent checkpointing <ref> [15] </ref>. They observe that the order of processing received messages can be manipulated to reduce rollback propagation. By delaying the processing of a received message until the sender passes its next checkpoint, rollback propagation can be reduced. Although this strategy is effective, message scheduling cannot always be manipulated.
Reference: [16] <author> Y. M. Wang and W. K. Fuchs, </author> <title> ``Optimistic message logging for independent checkpointing in message-passing systems,'' </title> <booktitle> IEEE Symp. on Reliable Distributed Syst., </booktitle> <pages> pp. </pages> <month> 147-154 (Oct </month> <year> 1992). </year> <pages> 8 9 </pages>
Reference-contexts: 1. Introduction Checkpointing and rollback recovery are techniques to provide fault-tolerance in distributed systems <ref> [1, 2, 3, 4, 5, 6, 12, 13, 14, 16] </ref>. With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints [1, 4, 12, 13, 16]. <p> With independent checkpointing, each process checkpoints its state independently during normal execution, and when a fault is detected, the execution is rolled back and resumed from earlier checkpoints <ref> [1, 4, 12, 13, 16] </ref>. Because processes do not coordinate checkpoints during normal execution, independent checkpointing is simple and has low run-time overhead. However, it can have potentially high recovery overhead because of the domino effect [11]. <p> Our goal is to always rollback to a consistent checkpoint. The ``'' s indicate checkpoints. To recover, all processes must be rolled back to their initial checkpoints. Two approaches exist to achieving consistent checkpoints: independent and coordinated checkpointing. With independent checkpointing, each process checkpoints independently without coordinating with others <ref> [1, 12, 16] </ref>. The consistent checkpoint for starting a recovery is computed after a fault. However, such a checkpoint does not always exist, so rolling back could incur the domino effect.
References-found: 16

