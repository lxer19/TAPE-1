URL: http://www.cs.toronto.edu/~grigoris/ascma/papers/thomas.ps.Z
Refering-URL: http://www.cs.toronto.edu/~grigoris/ascma/acceptedPapers.html
Root-URL: http://www.cs.toronto.edu
Email: jthomas+@cs.cmu.edu  katia+@ri.cmu.edu  
Title: Heterogeneity, Root-finding, and Decentralization  
Author: James D Thomas Katia Sycara 
Address: Pittsburgh, PA 15213  Pittsburgh, PA 15213  
Affiliation: Dept of Computer Science Carnegie Mellon University  Robotics Institute Carnegie Mellon University  
Abstract: Increasing interest in agent-based systems both in AI (in terms of multiagent systems and distributed artificial intelligence) and in computational approaches to the social sciences calls for a greater understanding of their computational properties. Often, problems that are difficult for agent-based systems because of issues of coordination or delayed information could be solved using a centralized root-finding algorthim. This paper proposes a method that allows for the approximation of such centralized root-finding solutions by systems of decentralized agents. By making each agent's responses to payoff signals heterogeneous, proper coordination emerges among the agents without the need for communication or negotiation. We apply this technique to both Newton's method and Gallager's algorithm for multi-commodity flow. In empirical simulations, the method is shown to produce results comparable to the original algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Michael D. Whinston Andreu Mas-Colell and Jerry R. Green. </author> <title> Microeconomic Theory. </title> <publisher> Oxford Press, </publisher> <year> 1995. </year>
Reference-contexts: Root finding algorithms take an equation f (x) and find the x such that f (x) = 0, usually by incrementally adjusting x closer and closer to the true root. In economics, the existence of general equilibrium <ref> [1] </ref> depends on finding an allocation such that the excess demand function is zero. <p> We will describe a root finding method, and then show its equivalence to an idealized decentralized system with an infinite continuum of agents. Normally, root finding works over arbitrary domains, but in order to deal with the infinite number of agents, we normalize the domain to the interval <ref> [0; 1] </ref>. In our continuum of agents, we let the agents be either 'on' or 'off', and denote the proportion of agents turned 'on' at time t by x (t). <p> How we do this depends on the design of the particular system we are building. If we can control the agent design, one way to accomplish this is to give each agent a different 'switching threshold' a parameter drawn from a uniform distribution over the interval <ref> [0; 1] </ref>. We could then globally broadcast the P x (t) , and an agent would only switch if the P x (t) term exceeded the switching threshold. Since each agent has a different threshold, some will switch and some won't. <p> Since each agent has a different threshold, some will switch and some won't. For an arbitrary agent, the probability of switching is equal to P x (t) being less than some number randomly drawn from a uniform distribution over <ref> [0; 1] </ref>, or simply P x (t) itself. If we aggregate this behavior over many agents, each with its own switching threshold, the expected proportion of agents who switch is exactly P x (t) . <p> The similarity to the root finding case should be clear. Again, we can assign each agent a switching threshold uniformly drawn from <ref> [0; 1] </ref>, and broadcast the signal j fl (m i;j (k) m i;j min )=t i (k).
Reference: [2] <author> Robert G. Gallager. </author> <title> A mimimum delay routing algorithm using distributed computation. </title> <journal> IEEE Trans. Communication, </journal> <volume> 25(1) </volume> <pages> 73-85, </pages> <month> January </month> <year> 1977. </year>
Reference-contexts: In economics, the existence of general equilibrium [1] depends on finding an allocation such that the excess demand function is zero. In many resource allocation problems, for example multicommodity flow <ref> [2] </ref>, the optimal allocation is one that equalizes the marginal costs of the resources (the derivative of total costs with respect to the usage of each individual resource); this is accomplished by pairwise subtracting the marginal costs of resources from each other, and somehow finding the allocation that sets all these <p> Sponsored by NSF grant IRI-9612131 and ONR grant N-00014-96-1-1222 been developed for their quick convergence [7], and more application oriented methods such as Gallager's algorithm for multicommodity flow <ref> [2] </ref> have proven convergence results in specific settings. Unfortunately, these techniques are difficult to apply in decentralized settings where decision making is spread across autonomous agents instead of under central control. <p> The organization of the paper is as follows. First, we introduce the technique by applying it to Newton's method, a canonical root finding method. We then take Gallager's solution to the multicommodity flow problem <ref> [2] </ref> and show how the technique allows us to mimic his algorithm. 2 Decentralizing Root Finding Root finding algorithms [7] are a core part of the numerical computation toolbox; they are used to find the roots of unknown functions. <p> There are batches of cargo that must be shipped between the locations. The problem is to route the cargo so that total shipping time is minimized; since the links grow congested with overuse, this often means splitting each batch of cargo over different routes. Gallager <ref> [2] </ref> described an algorithm that distributed the computation across locations. Essentially his solution estimates the marginal cost (where cost meant total shipping time across the whole system) of transport along each link and incrementally adjusts flows across competing links until the marginal costs were equalized.
Reference: [3] <author> P. T. Harker. </author> <title> Multiple equilibrium behaviors on networks. </title> <journal> Transportation Science, </journal> <volume> 22 </volume> <pages> 39-46, </pages> <year> 1988. </year>
Reference: [4] <author> Tad Hogg and Bernardo A. Huberman. </author> <title> Controlling chaos in distributed systems. </title> <journal> IEEE Trans. on Systems, Man and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1325-1332, </pages> <month> Novem-ber/December </month> <year> 1991. </year>
Reference-contexts: This leads to instability and failure to converge. Huberman & Hogg <ref> [4] </ref> first explored the idea of exploiting agent heterogeneity to stabilize the system. Thomas & Sycara [9] expanded on that insight.
Reference: [5] <author> John H. Miller Ken Kollman and Scott E. </author> <title> Page. Political institutions and sorting in a tiebout model. </title> <note> To Appear in American Economic Review, </note> <year> 1998. </year>
Reference-contexts: the computational ecosystem model [6], the approach potentially offers new insight into the aggregate behavior of any system that models the decisions of agents that must make 'all or nothing' de cisions in the face of payoff signals, both in social science inspired models such as the computational Tiebout models <ref> [5] </ref> and traditional computer science problems like load balancing [8]. The organization of the paper is as follows. First, we introduce the technique by applying it to Newton's method, a canonical root finding method.
Reference: [6] <author> J. O. Kephart, Tad Hogg, and Bernardo A. Huberman. </author> <title> Dynamics of computational ecosystems. </title> <journal> Physical Review A, </journal> <volume> 40, </volume> <year> 1989. </year>
Reference-contexts: First, when we must solve a problem with a system of agents, it allows us to design a system that exactly mimics the behavior of existing serial algorithms. Second, it allows us to view many problems in a new light. In addition to the computational ecosystem model <ref> [6] </ref>, the approach potentially offers new insight into the aggregate behavior of any system that models the decisions of agents that must make 'all or nothing' de cisions in the face of payoff signals, both in social science inspired models such as the computational Tiebout models [5] and traditional computer science
Reference: [7] <author> William H. Press, Saul A. Tukolsky, William T. Vert-terling, and Brian P. Flannery. </author> <title> Numerical Recipies in C. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: The properties of root finding algorithms are well understood. Numerical methods such as Newton's method have fl Thanks to Matt Glickman, Bryan Routledge, John Miller, Onn Shehory, and Somesh Jha for helpful discussion. Sponsored by NSF grant IRI-9612131 and ONR grant N-00014-96-1-1222 been developed for their quick convergence <ref> [7] </ref>, and more application oriented methods such as Gallager's algorithm for multicommodity flow [2] have proven convergence results in specific settings. Unfortunately, these techniques are difficult to apply in decentralized settings where decision making is spread across autonomous agents instead of under central control. <p> First, we introduce the technique by applying it to Newton's method, a canonical root finding method. We then take Gallager's solution to the multicommodity flow problem [2] and show how the technique allows us to mimic his algorithm. 2 Decentralizing Root Finding Root finding algorithms <ref> [7] </ref> are a core part of the numerical computation toolbox; they are used to find the roots of unknown functions.
Reference: [8] <author> Andrea Schaerf, Yoav Shoham, and Moshe Tennen-holtz. </author> <title> Adaptive load balancing: A study in multi-agent learning. </title> <journal> Journal of Artificial Intelligence Research, </journal> (2):475-500, 1995. 
Reference-contexts: new insight into the aggregate behavior of any system that models the decisions of agents that must make 'all or nothing' de cisions in the face of payoff signals, both in social science inspired models such as the computational Tiebout models [5] and traditional computer science problems like load balancing <ref> [8] </ref>. The organization of the paper is as follows. First, we introduce the technique by applying it to Newton's method, a canonical root finding method.
Reference: [9] <author> James Thomas and Katia Sycara. </author> <title> Heterogeneity, stability, and efficiency in distributedsystems. </title> <type> Technical report, </type> <institution> Carnegie Mellon University, </institution> <year> 1997. </year>
Reference-contexts: This leads to instability and failure to converge. Huberman & Hogg [4] first explored the idea of exploiting agent heterogeneity to stabilize the system. Thomas & Sycara <ref> [9] </ref> expanded on that insight.
Reference: [10] <author> Michael Wellman. </author> <title> A market-oriented programming environment and its application to distributed multicom-modity flow problems. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 22 </volume> <pages> 39-46, </pages> <year> 1988. </year>
Reference-contexts: Gallager [2] described an algorithm that distributed the computation across locations. Essentially his solution estimates the marginal cost (where cost meant total shipping time across the whole system) of transport along each link and incrementally adjusts flows across competing links until the marginal costs were equalized. Wellman <ref> [10] </ref> took that one step further by his application of the Walras algorithm, a distributed optimization method based on general equilibrium theory. <p> This paper explores a different kind of decentralization, that of letting the flow consist of discrete, autonomous agents. We will assume (as Gallager did) that the marginal costs are already estimated this contrasts to Wellman <ref> [10] </ref>, where the estimation of costs emerged out of the market equilibrium. We will use Gallager's algorithm, and show how to implement it with discrete agents.
References-found: 10

