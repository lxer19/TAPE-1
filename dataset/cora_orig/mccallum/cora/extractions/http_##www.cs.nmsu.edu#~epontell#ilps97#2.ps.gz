URL: http://www.cs.nmsu.edu/~epontell/ilps97/2.ps.gz
Refering-URL: http://www.cs.nmsu.edu/lldap/ilps97/programme.html
Root-URL: http://www.cs.nmsu.edu
Email: -zsnemeth, kacsuk-@sunserv.kfki.hu  
Phone: Phone: (36 1) 395 9220, Fax: (36 1) 395 9027  
Title: Analysis and Improvement of the Variable Binding Scheme in LOGFLOW  
Author: Zsolt Nmeth Pter Kacsuk 
Address: H-1525 Budapest, P.O. Box 49.  
Affiliation: KFKI Research Institute for Measurement and Computing Techniques  
Abstract: The handling of variables is a crucial issue in designing a parallel Prolog system. The so called closed binding environment is an excellent candidate for a binding scheme in a distributed system, however, it has several weaknesses when the computation is not migrating. In this paper the closed binding method is analysed, a possible modification is introduced and the implementation and performance measurement of the hybrid binding scheme in LOGFLOW is described. Keywords: distributed Prolog implementation, binding schemes, closed binding environment, performance evaluation 
Abstract-found: 1
Intro-found: 1
Reference: [AitKaci91] <author> H. Ait-Kaci: </author> <title> Warren's Abstract Machine. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: In such a way the execution is deterministic and the differences between binding schemes can be observed. 5.3.1 Execution speed The whole idea of hybrid binding environment tries to treat some weaknesses of closed binding environment (3DPAM) and is not related to WAM <ref> [AitKaci91] </ref> at all. In such a way, it will not cause great improvement in performance when a big amount of work is done by a WAM engine.
Reference: [Borgwardt84] <author> P. Borgwardt: </author> <title> Parallel Prolog Using Stack Segments on Shared-Memory Multiprocessors. </title> <booktitle> Proceedings of the 1984 Symposium on Logic Programming. </booktitle>
Reference-contexts: To solve the contradiction with the single assignment property of logical variables, these conditional variables are handled in a different way. The usage of the hash tables for such purposes is an old idea. The proposed usage of hash tables in LOGFLOW is different from Borgwardt's implementation. <ref> [Borgwardt84] </ref> The key is in the pointer array that can be considered as an access path to the hash table. In this way different tokens (representing different binding environments) can reach different points in the hash table.
Reference: [Conery87] <author> J.S. Conery: </author> <title> Binding Environments for Parallel Logic Programs in Non-Shared Memory Multiprocessors. </title> <booktitle> Proceedings of the 1987 Symp. on Logic Programming, </booktitle> <year> 1987. </year>
Reference-contexts: A closed environment in Conery's definition is a set of frames E so that no pointers or links originating from E reference to slots in frames that are not members of E. A closed environment containing just one frame is called a closed frame <ref> [Conery87] </ref>. In another way the environment holds all the necessary information to continue the computation at a given point. It has two special procedures to close an environment with respect to another one: the (two-phase) unification and the back-unification. The details of closed binding environments are in [Conery87] [Kacsuk92]. <p> a closed frame <ref> [Conery87] </ref>. In another way the environment holds all the necessary information to continue the computation at a given point. It has two special procedures to close an environment with respect to another one: the (two-phase) unification and the back-unification. The details of closed binding environments are in [Conery87] [Kacsuk92]. The most important features of the unification and back-unification in the LOGFLOW 1 are described in [Kacsuk92]. The LOGFLOW is a distributed-memory implementation of Prolog [Kacsuk94]. Its abstract execution model is the logicflow model based on dataflow principles [Kacsuk97]. <p> The execution is governed by token streams. * The work presented in this paper was supported partially by the Hungarian-Portuguese joint project "PAR-PROLOPPE" registered under No. H-9305-02/1095 and by two National Science Research Fund (OTKA) projects under grant number T016091 and T022106. 1 There are slight differences between <ref> [Conery87] </ref> and the closed environment scheme in LOGFLOW. Tokens represent a given state of the machine where the computation is continued. There are different tokens according to the different roles they play: representing a query (Do), representing an answer: solution (Succ) or failure (Fail).
Reference: [ChassCod94] <author> J.Chassin de Kergommeaux, P.Codognet: </author> <title> Parallel Logic Programming Systems. </title> <journal> ACM Computing Surveys Vol 26. </journal> <volume> No 3. </volume> <month> Sept </month> <year> 1994 </year>
Reference: [MarCun96] <author> R. Marques and J.C. Cunha, PVM-Prolog: </author> <title> A Prolog interface to PVM, </title> <booktitle> Proc. </booktitle> <address> DAPSYS'96, Miskolc, </address> <year> 1996, </year> <pages> 173-181 </pages>
Reference-contexts: All these techniques have a common feature: references (either physical or logical) are allowed from an environment to any other environments. In a distributed memory system (e.g. <ref> [MarCun96] </ref>) these environments may reside on different processing elements, and dereferencing a variable through several processing elements is a tremendously expensive operation. From one point of view the recomputation model aimed at implementing Prolog in a distributed environment.
Reference: [GuJa90] <author> G. Gupta, B. Jayarman: </author> <title> On Criteria for OR-Parallel Execution of Logic Programs. </title> <booktitle> Proc. of the 1990 North American Logic Prog. Conf., </booktitle> <year> 1990, </year> <pages> pp. 737-756. </pages>
Reference-contexts: In <ref> [GuJa90] </ref> it was shown that all the three conditions can not be satisfied. Additionally, low memory consumption must be taken into consideration at designing a binding scheme. There are a number of techniques for treating multiple bindings [KacsWise92][ChassCod94].
Reference: [Kacsuk92] <author> P. Kacsuk: </author> <title> Distributed Data Driven Prolog Abstract Machine. </title> <editor> In: P. Kacsuk, M.J.Wise: </editor> <title> Implementations of Distributed Prolog. </title> <publisher> Wiley, </publisher> <year> 1992. </year>
Reference-contexts: In another way the environment holds all the necessary information to continue the computation at a given point. It has two special procedures to close an environment with respect to another one: the (two-phase) unification and the back-unification. The details of closed binding environments are in [Conery87] <ref> [Kacsuk92] </ref>. The most important features of the unification and back-unification in the LOGFLOW 1 are described in [Kacsuk92]. The LOGFLOW is a distributed-memory implementation of Prolog [Kacsuk94]. Its abstract execution model is the logicflow model based on dataflow principles [Kacsuk97]. <p> It has two special procedures to close an environment with respect to another one: the (two-phase) unification and the back-unification. The details of closed binding environments are in [Conery87] <ref> [Kacsuk92] </ref>. The most important features of the unification and back-unification in the LOGFLOW 1 are described in [Kacsuk92]. The LOGFLOW is a distributed-memory implementation of Prolog [Kacsuk94]. Its abstract execution model is the logicflow model based on dataflow principles [Kacsuk97].
Reference: [Kacsuk93] <author> P. </author> <title> Kacsuk: </title> <booktitle> Memory management in LOGFLOW. Microprocessing and Microprogramming 39. (1993) pp. </booktitle> <pages> 79-82. </pages>
Reference-contexts: The Pointer Array is used to save some parameters as well, so it has two extra fields. The role of these fields is explained in Section 4.7.1. The newly introduced Pointer Array and Hash Table are implemented as Dynamically Allocated Static (DAS) <ref> [Kacsuk93] </ref>. The DAS is much faster 2 than the conventional malloc-free memory management, however, it statically occupies a large amount of memory. Apart from the greater speed this solution can handle the available memory more economically. <p> However, the heap copying is optimized and strongly reduced in LOGFLOW there are proposed optimizations for efficient use (detecting and reclaiming unused cells) of PA and HT that have not been implemented yet. The DAS (Dynamically Allocated Static <ref> [Kacsuk93] </ref>) data structure of PA and HT offers an easy way for memory management in these areas. 1 processor 100 10000 1000000 P e r m 4 P e r m 6 Closed Hybrid 5.2.2 2 processor execution Although the heap utilization is still lower, the proportion of the heap usage
Reference: [KacsWise92] <author> P. Kacsuk, M.J.Wise: </author> <title> Implementations of Distributed Prolog. </title> <publisher> Wiley, </publisher> <year> 1992. </year>
Reference: [Kacsuk94] <author> P. Kacsuk: LOGFLOW: </author> <title> Prolog on Massively Parallel Machines. Invited Paper, </title> <booktitle> 6th International Conference on AI and Information-Control Systems of Robots, </booktitle> <address> Smolenice, </address> <year> 1994. </year> <pages> pp. 71-80. </pages>
Reference-contexts: The details of closed binding environments are in [Conery87] [Kacsuk92]. The most important features of the unification and back-unification in the LOGFLOW 1 are described in [Kacsuk92]. The LOGFLOW is a distributed-memory implementation of Prolog <ref> [Kacsuk94] </ref>. Its abstract execution model is the logicflow model based on dataflow principles [Kacsuk97]. Prolog programs are transformed into the so called Dataflow Search Graph (DSG.) Nodes in this graph represent Prolog procedures, e.g. unification (Unify), handling the alternatives (Or), goals (And), facts (Unit).
Reference: [Kacsuk97] <author> P. Kacsuk: </author> <title> Execution Models for a Massively Parallel Prolog Implementation. </title> <journal> Journal of Computers and Artificial Intelligence. Slovak Academy of Sciences, </journal> <note> 1997. (accepted for publication) </note>
Reference-contexts: The details of closed binding environments are in [Conery87] [Kacsuk92]. The most important features of the unification and back-unification in the LOGFLOW 1 are described in [Kacsuk92]. The LOGFLOW is a distributed-memory implementation of Prolog [Kacsuk94]. Its abstract execution model is the logicflow model based on dataflow principles <ref> [Kacsuk97] </ref>. Prolog programs are transformed into the so called Dataflow Search Graph (DSG.) Nodes in this graph represent Prolog procedures, e.g. unification (Unify), handling the alternatives (Or), goals (And), facts (Unit). <p> The stream is terminated by a Fail token. It can be shown that when the Fail token in the answer stream has arrived to a node, there are no more tokens belonging to the stream in the subgraph <ref> [Kacsuk97] </ref>. It means that when the Fail token has arrived for the initial query, there are no more tokens in the whole system. Each request token represents a jump to a Unify, Or or Unit node.
Reference: [KaAm97] <author> P. Kacsuk, M. Amamiya: </author> <title> A Multithreaded Implementation Concept of Prolog for Datarol-II. </title> <booktitle> Proceedings of ISHPC97 (accepted). </booktitle>
Reference-contexts: This idea is presented in <ref> [KaAm97] </ref>.
Reference: [KalRam92] <author> L.V. Kal, B. Ramkumar: </author> <title> The Reduce-Or Process Model for Parallel Logic Programming on Non-Shared Memory Machines. </title> <editor> In: P. Kacsuk, M.J.Wise: </editor> <title> Implementations of Distributed Prolog. </title> <publisher> Wiley, </publisher> <year> 1992. </year>
Reference-contexts: When it remains on the same processor, the complete closure is superfluous. The proposed solutions so far try to combine the local addressing scheme of the closed environment with the global addressing scheme of non-closed environments. In <ref> [KalRam92] </ref> the molecules are introduced to avoid copying when all the arguments of a structure became ground. In [SasPat91] the so called tagged variable scheme is used which is a variation of hash tables for dataflow machines.
Reference: [KimGaudiot94] <author> H. Kim, J-L. Gaudiot: </author> <title> A Binding Environment for Processing Logic Programs on Large Scale Parallel Architectures. </title> <type> Technical Report, </type> <institution> University of Southern California 1994. </institution>
Reference-contexts: However, the implementation showed some of the drawbacks of the closed binding scheme. After analysing the possible alternatives, the Quasi Closed Environment (QCE) idea <ref> [KimGaudiot94] </ref> seemed to be the closest to solving the problems in LOGFLOW. A new, combined binding scheme was elaborated for LOGFLOW that relies on the ideas of the QCE. <p> In Section 4 the design and implementation of the new binding scheme in LOGFLOW are described then in Section 5 its performance is analysed. 2 The overhead in closed binding environments The environment closing is a costly operation both in time and in memory consumption. In <ref> [KimGaudiot94] </ref> the sources of overhead were investigated and divided into three groups as: overhead from environment scanning, overhead from environment extension and overhead from structure copying. <p> In [KalRam92] the molecules are introduced to avoid copying when all the arguments of a structure became ground. In [SasPat91] the so called tagged variable scheme is used which is a variation of hash tables for dataflow machines. In <ref> [KimGaudiot94] </ref> variables are divided into two groups whether they can occur in a structure or not. Variables occurring in a structure are stored globally whereas others are stored still locally. <p> The new binding scheme manipulates within a single PE. Some special procedures should be done when the computation migrates between PEs In the rest of Section 4 these issues are described. 4.1 The auxiliary storage: hash tables There are several possibilities to store the global variables. In <ref> [KimGaudiot94] </ref> the hash table is proposed due to its efficiency in variable access and handling the alternative branches. In LOGFLOW the Hash Table (HT) is accessed through a Pointer Array (PA) which can be considered as an access path for different ORbranches.
Reference: [NemKa96a] <author> Zs. Nmeth, P. Kacsuk: </author> <title> Analysis and Improvement of the Variable Binding Scheme in LOGFLOW. </title> <type> Technical report, </type> <month> KFKI-MSZKI </month> <year> 1996. </year>
Reference-contexts: Furthermore, several possible optimizations were proposed in <ref> [NemKa96a] </ref> and [NemKa96b] which have not been implemented yet (e.g. hash cache, garbage collection in the auxiliary data storage, etc.) Test results suggest that some of them could further improve the performance of the new binding method. 7 Acknowledgments Authors would gratefully acknowledge the work of Portuguese partners, especially J.C.
Reference: [NemKa96b] <author> Zs. Nmeth, P. Kacsuk: </author> <title> Technical Description of Implementing a Hybrid Binding Scheme in LOGFLOW. </title> <type> Technical report, </type> <month> KFKI-MSZKI </month> <year> 1996. </year>
Reference-contexts: After analysing the overheads, a new binding scheme was designed and implemented for LOGFLOW. This hybrid binding method tries to combine the benefits of closed binding environments and the efficiency of non-closed environment. The new binding scheme was implemented and tested on a transputer network <ref> [NemKa96b] </ref>. The model proved to be functionally correct both in single node and multiple node execution. Performance tests showed that the primary goal, the reduction of closing overhead within a single processing element, was successfully fulfilled. <p> Furthermore, several possible optimizations were proposed in [NemKa96a] and <ref> [NemKa96b] </ref> which have not been implemented yet (e.g. hash cache, garbage collection in the auxiliary data storage, etc.) Test results suggest that some of them could further improve the performance of the new binding method. 7 Acknowledgments Authors would gratefully acknowledge the work of Portuguese partners, especially J.C. Cunha, J.
Reference: [Podh97] <author> N. Podhorszki: </author> <title> Multi-phase Garbage Collection in LOGFLOW. Accepted for Workshop on Parallelism and Implementation Technologies for (Constraint) Logic Programming Languages, </title> <type> Port Jefferson, </type> <year> 1997. </year>
Reference-contexts: Token tables and context tables are used in this way. The heap is difficult to be reallocated since the unused structures are scattered over the heap and therefore, a sophisticated garbage collection technique must be introduced <ref> [Podh97] </ref>. However, the Pointer Array and the Hash Table can be organized in such a way that it supports the reallocation of unused hash items. The incoming request token first appears on the input of a Unify or Or node.
Reference: [SasPat91] <author> A.V.S. Sastry, L.M. Patnaik: </author> <title> OR-Parallel Evaluation of Logic Programs on a Multi-Ring Dataflow Machine. </title> <journal> New Generation Computing, </journal> <volume> 10 (1991), </volume> <pages> pp. 23-53. </pages>
Reference-contexts: The proposed solutions so far try to combine the local addressing scheme of the closed environment with the global addressing scheme of non-closed environments. In [KalRam92] the molecules are introduced to avoid copying when all the arguments of a structure became ground. In <ref> [SasPat91] </ref> the so called tagged variable scheme is used which is a variation of hash tables for dataflow machines. In [KimGaudiot94] variables are divided into two groups whether they can occur in a structure or not. Variables occurring in a structure are stored globally whereas others are stored still locally.
References-found: 18

