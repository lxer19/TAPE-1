URL: http://www.cs.twsu.edu/~haynes/jcollect.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: haynes@euler.mcs.utulsa.edu  
Phone: phone: (918) 631-3243 fax: (918) 631-3077  
Title: Collective Memory Search 1 Collective Memory Search: Exploiting an Information Center for Exploration  
Author: Thomas Haynes 
Address: College Ave.  Tulsa, OK 74104-3189 USA  
Affiliation: 600 South  Department of Mathematical Computer Sciences The University of Tulsa  
Abstract-found: 0
Intro-found: 1
Reference: [ Adler and Gordon, 1992 ] <author> Frederick R. Adler and Deborah M. Gordon. </author> <title> Information collection and spread by networks of patrolling ants. </title> <journal> American Naturalist, </journal> <volume> 140 </volume> <pages> 373-400, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction A popular misconception of intelligence in insect societies is that of the group mind: somehow the limited processing abilities of the insects is combined to form a collective intelligence. The colony-level behavior which arises in insect societies is a complex dynamical result of the interactions of simple insects <ref> [ Adler and Gordon, 1992, Gordon, 1994 ] </ref> . Indeed, the insects exhibit redundancy in their operations, allowing mistakes at the individual level to not influence success at the colony-level [ Herbers and Choiniere, 1996, Oster and Wilson, 1978 ] . <p> In the context of ant colonies, Adler and Gordon have identified that integration of such simple behavior into more complex colony-level behavior must take place through information exchange <ref> [ Adler and Gordon, 1992 ] </ref> . They further state that such exchange can be either centralized in the nest or distributed outside the nest.
Reference: [ Brown, 1989 ] <author> Charles R. Brown. </author> <title> Enhanced foraging efficiency through information centers: A benefit of colonies in cliff swallows. </title> <journal> Ecology, </journal> <volume> 69 </volume> <pages> 602-613, </pages> <year> 1989. </year>
Reference-contexts: Besides the power the queen (s) can exert over the colony, centralized control exists in the potential of the colony as an information center. Brown has shown, with cliff swallows (Hirundo pyrrhonota), that animal groups other than the social insects can exploit information transfer among colony residents <ref> [ Brown, 1989 ] </ref> . We present an algorithm for collective memory search which combines the power of the group mind (i.e. an information center), the simplicity of distributed action (i.e. search), and the focus of centralized control.
Reference: [ Chandy and Misra, 1988 ] <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: We encode Collective Memory Search 12 sentences using UNITY 3 <ref> [ Chandy and Misra, 1988 ] </ref> operators to form both the KB and ff, and, then, use propositional inference rules from the UNITY proof logic to show that the knowledge base entails that sentence, KB j= i ff. <p> The terminal set is comprised of the predicate variables fP, Q, R, S, Tg. Both a subset of the theorems presented in Chandy and Misra <ref> [ Chandy and Misra, 1988 ] </ref> and some additional simple logic rules were chosen as the propositional inference rules used to prove entailment. The subset and the simple rules combine to form the function set as reported in [ Haynes et al., 1996a ] . <p> The members of the function set map trees from GP space into trees in propositional logic space. A simple heuristic in the logical inference process is to only apply inferences when there is a match between the "arguments" of the hypothesis and sentences in the KB <ref> [ Chandy and Misra, 1988, Russell and Norvig, 1995 ] </ref> . Strong typing enables the GP system to guide the pattern matching rule.
Reference: [ Clearwater et al., 1992 ] <author> Scott H. Clearwater, Bernardo A. Huberman, and Tad Hogg. </author> <title> Cooperative problem solving. </title> <editor> In Bernardo Huberman, editor, </editor> <booktitle> Computation: The Micro and the Macro View, </booktitle> <pages> pages 33-70. </pages> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1992. </year>
Reference: [ Cobb, 1993 ] <author> Helen Cobb. </author> <title> Is the genetic algorithm a cooperative learner? In L. </title> <editor> Darrell Whitley, editor, </editor> <booktitle> Foundations of Genetic Algorithms 2, </booktitle> <pages> pages 277-296. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1993. </year>
Reference-contexts: Each chromosome in the population can be searching different parts of the search space or fitness landscape. Each chromosome can be considered as a behavioral strategy for controlling an agent [ Haynes et al., 1995 ] , indeed Cobb views each chromosome as an agent <ref> [ Cobb, 1993 ] </ref> . The agents, i.e. chromosomes, are considered to be autonomous in the sense that they do not typically interact to find a solution. <p> Genetic algorithms are often interpreted as competitive learning systems: the driving force for exploring the fitness landscape is "survival of the fittest." GAs can also be considered as cooperative learning systems <ref> [ Cobb, 1993 ] </ref> : GBML systems certainly fall into this category. <p> function as a mechanism to determine which solutions are to be shared among the agents, with the crossover operator (a biologically inspired operator which exchanges genetic material between two parents as they produce two children) as the vehicle for which "partial solutions" are Collective Memory Search 5 shared between agents <ref> [ Cobb, 1993 ] </ref> . In this paper, we investigate the addition of collective memory to GP-based learning systems. We allow the explicit reuse of knowledge from one generation to the next 1 .
Reference: [ Collins, 1992 ] <author> Robert James Collins. </author> <title> Studies in Artificial Evolution. </title> <type> PhD thesis, </type> <institution> University of Califonia, </institution> <address> Los Angeles, </address> <year> 1992. </year>
Reference-contexts: We can also consider the utility of a distributed collective memory. The GP population can be split into demes, or isolated subpopulations, with each deme having its own collective memory. Typically each deme explores different parts of the fitness landscape <ref> [ Collins, 1992 ] </ref> . In parallel GP systems, chromosomes are swapped between demes, allowing the diffusion of genetic material, i.e. an information transfer, through the entire population. In nature, individuals often mate outside their colony, decreasing the odds of inbreeding.
Reference: [ Davis, 1991 ] <editor> Lawrence Davis, editor. </editor> <booktitle> Handbook of genetic algorithms. </booktitle> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: Genetic algorithms (GA) [ Holland, 1975 ] are a class of distributed search algorithms inspired by biological evolutionary adaptation. GA's are used for parameter optimization, process control, learning classifier systems, etc <ref> [ Davis, 1991, Goldberg, 1989, Goldberg, 1994 ] </ref> . Genetic programming is an off-shoot of GA's, and is typically used in the automatic induction of programs. Both GA and GP represent search strategies in a population of chromosomes.
Reference: [ DeJong, 1990 ] <author> Kenneth A. DeJong. </author> <title> Genetic-algorithm-based learning. </title> <editor> In Y. Kodratoff and R. S. Michalski, editors, </editor> <booktitle> Machine Learning, Volume III. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Alamos, CA, </address> <year> 1990. </year>
Reference-contexts: A notable exception arises in genetic-based machine learning (GBML) systems: both rules and rulesets must be maintained. In the "Michigan approach" each chromosome is a rule and the population as a whole is the ruleset. In the "Pitt approach" each chromosome is a ruleset, being comprised of multiple rules <ref> [ DeJong, 1990 ] </ref> . Genetic algorithms are often interpreted as competitive learning systems: the driving force for exploring the fitness landscape is "survival of the fittest." GAs can also be considered as cooperative learning systems [ Cobb, 1993 ] : GBML systems certainly fall into this category.
Reference: [ Dorigo et al., 1996 ] <author> Marco Dorigo, Vittorio Maniezzo, and Alberto Colorni. </author> <title> The Ant System: Optimization by a colony of cooperating agents. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics Part B: Cybernetics, </journal> <volume> 26(1) </volume> <pages> 29-41, </pages> <year> 1996. </year>
Reference-contexts: As such, we do not model societies where the individual agents directly exchange information, i.e., we disallow both antennae contact and pheromone trails. We are not downplaying the importance of such communication (which has been shown to be effective in solving combinatorial optimization problems <ref> [ Dorigo et al., 1996 ] </ref> ), but rather we are exploring the applicability of the centralized communication model to computational tasks and in particular to combinatorial search and optimization problems. The model of the collective memory can itself be either centralized or distributed.
Reference: [ Dorigo, 1992 ] <editor> Marco Dorigo. </editor> <title> Optimization, Learning and Natural Algorithms. </title> <type> PhD thesis, </type> <institution> Politecnico di Milano, Italy, </institution> <year> 1992. </year> <title> Collective Memory Search 43 </title>
Reference: [ Fennell and Lesser, 1977 ] <author> Richard D. Fennell and Victor R. Lesser. </author> <title> Parallelism in Artificial Intelligence problem solving: A case study of Hearsay II. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-26(2):98-111, </volume> <month> February </month> <year> 1977. </year> <note> (Also published in Readings in Distributed Artificial Intelligence, </note> <editor> Alan H. Bond and Les Gasser, editors, </editor> <address> pages 106-119, </address> <publisher> Morgan Kaufmann, 1988.). </publisher>
Reference: [ Garey and Johnson, 1979 ] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Co., </publisher> <address> San Francisco, CA, </address> <year> 1979. </year>
Reference-contexts: These simpler actions reflect a computational bound on either the reasoning power or memory storage of the individual agent. Such bounds are caused by the combinatorial explosion found in either search or optimization of the class of NP complete problems <ref> [ Garey and Johnson, 1979 ] </ref> . Collective memory can be defined as the combined knowledge gained by the interaction of the agents with both themselves and their environment [ Garland and Alterman, 1995, Garland and Alterman, 1996 ] . <p> Both finding the maximum and all cliques in a graph is NP complete <ref> [ Garey and Johnson, 1979 ] </ref> . We conjecture, without formal proof, that finding all of the cliques in a graph is "more difficult", i.e., more computationally expensive, than finding the maximum clique of a graph. <p> One brute force algorithm is presented in pseudo-code in Figure 6. The algorithm builds candidate cliques in increasing levels of size, k. Since the clique detection problem is NP complete <ref> [ Garey and Johnson, 1979 ] </ref> , this algorithm is not guaranteed to be able to find a solution. A viable search heuristic is to detect cliques from the Passive-Active collective memory.
Reference: [ Garland and Alterman, 1995 ] <author> Andrew Garland and Richard Alterman. </author> <title> Preparation of multi-agent knowledge for reuse. </title> <editor> In David W. Aha and Ashwin Ram, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Adaptation of Knowldege for Reuse, </booktitle> <address> Cambridge, MA, </address> <month> November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: Collective memory can be defined as the combined knowledge gained by the interaction of the agents with both themselves and their environment <ref> [ Garland and Alterman, 1995, Garland and Alterman, 1996 ] </ref> . In this paper, we combine the raw power of Collective Memory Search 4 collective action with the expressiveness of collective memory to enhance a distributed search process. <p> The model of the collective memory can itself be either centralized or distributed. Garland and Alterman present a distributed collective memory in their research: agents manipulate their own slice of the collective memory <ref> [ Garland and Alterman, 1995, Garland and Alterman, 1996 ] </ref> . We present a centralized collective memory, which is a knowledge repository, not local to the agents. As agents gather knowledge, they deposit it into the collective Collective Memory Search 7 memory. Agents can have read, write, and delete privileges.
Reference: [ Garland and Alterman, 1996 ] <author> Andrew Garland and Richard Alterman. </author> <title> Mul-tiagent learning through collective memory. </title> <editor> In Sandip Sen, editor, </editor> <booktitle> Working Notes for the AAAI Symposium on Adaptation, Co-evolution and Learning in Multiagent Systems, </booktitle> <pages> pages 33-38, </pages> <address> Stanford University, CA, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Collective memory can be defined as the combined knowledge gained by the interaction of the agents with both themselves and their environment <ref> [ Garland and Alterman, 1995, Garland and Alterman, 1996 ] </ref> . In this paper, we combine the raw power of Collective Memory Search 4 collective action with the expressiveness of collective memory to enhance a distributed search process. <p> The model of the collective memory can itself be either centralized or distributed. Garland and Alterman present a distributed collective memory in their research: agents manipulate their own slice of the collective memory <ref> [ Garland and Alterman, 1995, Garland and Alterman, 1996 ] </ref> . We present a centralized collective memory, which is a knowledge repository, not local to the agents. As agents gather knowledge, they deposit it into the collective Collective Memory Search 7 memory. Agents can have read, write, and delete privileges.
Reference: [ Goldberg, 1989 ] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: Genetic algorithms (GA) [ Holland, 1975 ] are a class of distributed search algorithms inspired by biological evolutionary adaptation. GA's are used for parameter optimization, process control, learning classifier systems, etc <ref> [ Davis, 1991, Goldberg, 1989, Goldberg, 1994 ] </ref> . Genetic programming is an off-shoot of GA's, and is typically used in the automatic induction of programs. Both GA and GP represent search strategies in a population of chromosomes. <p> Building blocks have a small defining length and are highly fit. They are integral to the schema theorem, which defines how the implicit parallel search of a GA "builds" better solutions over time <ref> [ Goldberg, 1989 ] </ref> . The "basic" theory of GP is borrowed from that of GA.
Reference: [ Goldberg, 1994 ] <author> David E. Goldberg. </author> <title> Genetic and evolutionary algorithms come of age. </title> <journal> Communications of the ACM, </journal> <volume> 37(3) </volume> <pages> 113-119, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Genetic algorithms (GA) [ Holland, 1975 ] are a class of distributed search algorithms inspired by biological evolutionary adaptation. GA's are used for parameter optimization, process control, learning classifier systems, etc <ref> [ Davis, 1991, Goldberg, 1989, Goldberg, 1994 ] </ref> . Genetic programming is an off-shoot of GA's, and is typically used in the automatic induction of programs. Both GA and GP represent search strategies in a population of chromosomes.
Reference: [ Gordon, 1989 ] <author> Deborah M. Gordon. </author> <title> Dynamics of task switching in harvester ants. Animal Behaviour, </title> <booktitle> 38 </booktitle> <pages> 194-204, </pages> <year> 1989. </year>
Reference-contexts: While the collective application of physical force is distributed in social insect colonies, e.g. ants sorting and upkeeping the colony refuse pile <ref> [ Gordon, 1989 ] </ref> , the control of the colony need not be distributed. Besides the power the queen (s) can exert over the colony, centralized control exists in the potential of the colony as an information center.
Reference: [ Gordon, 1994 ] <author> Deborah M. Gordon. </author> <title> The development of organization in ant colonies. </title> <journal> American Scientist, </journal> <volume> 83 </volume> <pages> 50-57, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction A popular misconception of intelligence in insect societies is that of the group mind: somehow the limited processing abilities of the insects is combined to form a collective intelligence. The colony-level behavior which arises in insect societies is a complex dynamical result of the interactions of simple insects <ref> [ Adler and Gordon, 1992, Gordon, 1994 ] </ref> . Indeed, the insects exhibit redundancy in their operations, allowing mistakes at the individual level to not influence success at the colony-level [ Herbers and Choiniere, 1996, Oster and Wilson, 1978 ] .
Reference: [ Guha and Lenat, 1990 ] <author> R. V. Guha and Douglas B. Lenat. </author> <title> Cyc: A midterm report. </title> <journal> AI Magazine, </journal> <volume> 11(3) </volume> <pages> 33-59, </pages> <month> Fall </month> <year> 1990. </year>
Reference-contexts: Indeed, the central thesis of the Cyc project is that the inability of computational systems to effectively interact with humans (whether it be in direct communication or by reading encyclopedia articles) is that the computational systems lack the basic common knowledge that we as humans possess <ref> [ Guha and Lenat, 1990 ] </ref> ; thus the goal of the Cyc project is to encode the common knowledge of a four year old human into a computational system.
Reference: [ Haynes et al., 1995 ] <author> Thomas Haynes, Roger Wainwright, Sandip Sen, and Dale Schoenefeld. </author> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <editor> In Larry Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 271-278, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann Publishers, </publisher> <editor> Inc. </editor> <title> Collective Memory Search 44 </title>
Reference-contexts: Both GA and GP represent search strategies in a population of chromosomes. Each chromosome in the population can be searching different parts of the search space or fitness landscape. Each chromosome can be considered as a behavioral strategy for controlling an agent <ref> [ Haynes et al., 1995 ] </ref> , indeed Cobb views each chromosome as an agent [ Cobb, 1993 ] . The agents, i.e. chromosomes, are considered to be autonomous in the sense that they do not typically interact to find a solution. <p> The only restriction is that the data type for each element be specified beforehand. This causes the initialization process and the various genetic operations to only construct syntactically correct trees. It has been shown that STGP can significantly reduce the search space <ref> [ Montana, 1995, Haynes et al., 1995 ] </ref> . The STGP variant mainly restricts the construction and reproduction of chromosomes; the basic algorithm is GP. <p> Strong typing enables the GP system to guide the pattern matching rule. The restriction of only considering valid child nodes has a side effect of reducing the size of the possible search space <ref> [ Montana, 1995, Haynes et al., 1995 ] </ref> . Each chromosome represents a propositional logical inference from the KB and is evaluated to determine its fitness. The fitness function evaluates the soundness of an inference from the KB.
Reference: [ Haynes et al., 1996a ] <author> Thomas Haynes, Rose Gamble, Leslie Knight, and Roger Wainwright. </author> <title> Entailment for specification refinement. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Proceedings of the First Genetic Programming Conference, </booktitle> <year> 1996. </year>
Reference-contexts: The chromosome should be comprised of small and simple building blocks, which can easily be combined. 4 Theorem Proving We have used STGP to apply inference rules in the derivation of a target sentence ff from a knowledge base KB <ref> [ Haynes et al., 1996a ] </ref> . <p> Both a subset of the theorems presented in Chandy and Misra [ Chandy and Misra, 1988 ] and some additional simple logic rules were chosen as the propositional inference rules used to prove entailment. The subset and the simple rules combine to form the function set as reported in <ref> [ Haynes et al., 1996a ] </ref> . Both the terminal and function set provide sufficient functionality and representation to prove the entailment of sentences from the provided KB. The members of the function set map trees from GP space into trees in propositional logic space.
Reference: [ Haynes et al., 1996b ] <author> Thomas Haynes, Dale Schoenefeld, and Roger Wainwright. </author> <title> Type inheritance in strongly typed genetic programming. </title> <editor> In Ken-neth E. Kinnear, Jr. and Peter J. Angeline, editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 18. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: They do not need to re-derive everything from scratch. 4 leads-to is a UNITY progress property which is denoted by p 7! q. Collective Memory Search 14 5 Clique Detection We have used clique detection as a benchmark for improving learning in GP systems <ref> [ Haynes, 1996, Haynes et al., 1996b ] </ref> . A collection of cliques in a graph can be represented as a list of a list of nodes which, in turn, can be represented by a tree structure. <p> Due to the stochastic nature of the GP algorithm, each curve shown in Figure 4 is an average of 10 different runs. Each of the methods extends the previous methods. The first method (R0) is a STGP system modified with the type inheritance presented in <ref> [ Haynes et al., 1996b ] </ref> . In this method, chromosomes are repaired during the fitness evaluation, but they are not returned into the population. The second search method (R10Q7) replaces the original chromosome with the repaired one with a probability of 0:1.
Reference: [ Haynes, 1996 ] <author> Thomas Haynes. </author> <title> Duplication of coding segments in genetic programming. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: They do not need to re-derive everything from scratch. 4 leads-to is a UNITY progress property which is denoted by p 7! q. Collective Memory Search 14 5 Clique Detection We have used clique detection as a benchmark for improving learning in GP systems <ref> [ Haynes, 1996, Haynes et al., 1996b ] </ref> . A collection of cliques in a graph can be represented as a list of a list of nodes which, in turn, can be represented by a tree structure. <p> There are exactly 10 cliques: C = f f0; 3; 4g; f0; 1; 4g; f1; 4; 5g; f1; 2; 5g; f2; 5; 6g; This example graph exhibits nice regularities which allows for the efficient comparison of results across different test runs. In our prior research <ref> [ Haynes, 1996 ] </ref> , we utilized these regularities to identify and enumerate the building blocks, i.e., the connected components. We repaired chromosomes by stripping out all invalid candidate cliques. We investigated various rates of return of repaired chromosomes into the population. <p> The candidate cliques are duplicated in the chromosome following the repair strategy presented in Section 5 and in <ref> [ Haynes, 1996 ] </ref> . The parameters for the duplication follows that for the duplication of coding segments used while repairing and replacing chromosomes during fitness evaluation; for our purposes this means seven duplicates of the set of k candidate cliques are added to the chromosome. <p> In the theorem proving domain, valid sentences form the building blocks. In the clique detector domain, candidate cliques form the building blocks. The identification of building blocks in genetic programming is in general a difficult task <ref> [ O'Reilly, 1995, Rosca and Ballard, 1996, Haynes, 1996 ] </ref> . In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 10 . <p> In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 10 . The repair of chromosome by duplication of coding segments strategy holds promise in automating the detection of building blocks <ref> [ Haynes, 1996 ] </ref> . If the system designer can identify function nodes that allow for addition of non-coding 10 Building block are easier to find in GA chromosomes, but the typical string representation is the binary alphabet and of fixed length. <p> As such, GA building blocks are at the structural level, whilst GP building blocks are at the semantical level <ref> [ Haynes, 1996 ] </ref> . Collective Memory Search 38 segments without changing the semantical meaning of the chromosome, the detection of building blocks can be automated.
Reference: [ Herbers and Choiniere, 1996 ] <author> Joan M. Herbers and Eric Choiniere. </author> <title> Foraging behavior and colony structure in ants. Animal Behavior, </title> <booktitle> 51 </booktitle> <pages> 141-153, </pages> <year> 1996. </year>
Reference-contexts: The colony-level behavior which arises in insect societies is a complex dynamical result of the interactions of simple insects [ Adler and Gordon, 1992, Gordon, 1994 ] . Indeed, the insects exhibit redundancy in their operations, allowing mistakes at the individual level to not influence success at the colony-level <ref> [ Herbers and Choiniere, 1996, Oster and Wilson, 1978 ] </ref> . While the group mind theory is no longer in vogue in the "natural" research community, we in the "artificial" research community can exploit the concept in creating computational agent societies.
Reference: [ Holland, 1975 ] <author> John H. Holland. </author> <booktitle> Adpatation in Natural and Artificial Systems. </booktitle> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, MI, </address> <year> 1975. </year>
Reference-contexts: The collective memory allows for either communication among the agents or for a centralized search of the gathered knowledge. In this paper, we consider simple computational search agents, which are chromosomes in a genetic programming (GP) [ Koza, 1992 ] population. Genetic algorithms (GA) <ref> [ Holland, 1975 ] </ref> are a class of distributed search algorithms inspired by biological evolutionary adaptation. GA's are used for parameter optimization, process control, learning classifier systems, etc [ Davis, 1991, Goldberg, 1989, Goldberg, 1994 ] . <p> Also, the GP can effectively utilize C 7 to search for all candidate cliques of size 8 for which C 7 forms a core set of nodes. With Random Search, this potential to exploit exploration is lost. The belief in emergent selection and the schema theorem <ref> [ Holland, 1975 ] </ref> , i.e., the building over time of the solution piece by piece from the elementary blocks, shields us from the fact that for cliques of maximum size 4 and parse trees of maximum depth 10, Random Search will effectively generate candidate cliques.
Reference: [ Holland, 1996 ] <author> Owen Holland. </author> <title> Multiagent systems: Lessons from social insects and collective robotics. </title> <editor> In Sandip Sen, editor, </editor> <booktitle> Working Notes for the AAAI Symposium on Adaptation, Co-evolution and Learning in Multia-gent Systems, </booktitle> <pages> pages 57-62, </pages> <address> Stanford University, CA, </address> <month> March </month> <year> 1996. </year>
Reference: [ Johnson and Trick, 1993 ] <author> David S. Johnson and M. A. </author> <title> Trick. Cliques, coloring, and satisfiability: </title> <note> The second DIMACS challange. (to appear), </note> <year> 1993. </year>
Reference-contexts: The ten graph node we use to illustrate the clique detection is contrived and thus facilitates the search process, i.e., a known optimal solution exists. The search for the optimal solution for this graph is not trivial with either plain GP or STGP systems. In the Second DIMACS Challenge <ref> [ Johnson and Trick, 1993 ] </ref> random graphs were generated as tests for the maximum clique detection problem. While the duplication of coding segments repair process is able to search such graphs, the plain STGP system will prematurely converge.
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: The collective memory allows for either communication among the agents or for a centralized search of the gathered knowledge. In this paper, we consider simple computational search agents, which are chromosomes in a genetic programming (GP) <ref> [ Koza, 1992 ] </ref> population. Genetic algorithms (GA) [ Holland, 1975 ] are a class of distributed search algorithms inspired by biological evolutionary adaptation. GA's are used for parameter optimization, process control, learning classifier systems, etc [ Davis, 1991, Goldberg, 1989, Goldberg, 1994 ] . <p> Unlike insects, we allow our computational agents the possibility of adaption during the search process, which can eventually allow them to become quite complex. 3 Genetic Programming Genetic programming is a machine learning technique used in the automatic induction of computer programs <ref> [ Koza, 1992 ] </ref> . A GP system is primarily comprised of three main parts: * A population of chromosomes. * A chromosome evaluator. * A selection and recombination mechanism.
Reference: [ Krebs and Davies, 1993 ] <author> J. R. Krebs and N. B. Davies. </author> <title> An Introduction to Behavioural Ecology. </title> <publisher> Blackwell Scientific Publications, </publisher> <year> 1993. </year>
Reference-contexts: To avoid this confusion, we define ancestral knowledge to be that knowledge which is not explicitly communicated from one individual to another. Some examples of ancestral knowledge include dogs and cats not getting along, stickleback fish (Gas-terosteus aculeatus) hiding when a model kingfisher (Alecedo atthis) swoops overhead <ref> [ Krebs and Davies, 1993 ] </ref> , and female cuckoos (Cuculus canorus) depositing their eggs in the nests of other birds, with the hatchling pushing 1 As argued above, selection allows for the implicit reuse of knowledge. <p> <ref> [ Krebs and Davies, 1993 ] </ref> , and female cuckoos (Cuculus canorus) depositing their eggs in the nests of other birds, with the hatchling pushing 1 As argued above, selection allows for the implicit reuse of knowledge. Collective Memory Search 6 out the eggs or hatchlings of the "host" parents [ Krebs and Davies, 1993 ] . Some examples of common knowledge include cars have four wheels, boiling water will burn you, and James Bond always gets the girl.
Reference: [ Montana, 1995 ] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230, </pages> <year> 1995. </year> <note> (Also published as BBN Technical Report #7866, </note> <institution> Cambridge, </institution> <address> MA, March 1994.). </address>
Reference-contexts: Montana claims that closure is a serious limitation to genetic programming. He introduces a variant of GP in strongly typed genetic programming (STGP), in which variables, constants, arguments, and returned values can be of any type <ref> [ Montana, 1995 ] </ref> . The only restriction is that the data type for each element be specified beforehand. This causes the initialization process and the various genetic operations to only construct syntactically correct trees. <p> The only restriction is that the data type for each element be specified beforehand. This causes the initialization process and the various genetic operations to only construct syntactically correct trees. It has been shown that STGP can significantly reduce the search space <ref> [ Montana, 1995, Haynes et al., 1995 ] </ref> . The STGP variant mainly restricts the construction and reproduction of chromosomes; the basic algorithm is GP. <p> Strong typing enables the GP system to guide the pattern matching rule. The restriction of only considering valid child nodes has a side effect of reducing the size of the possible search space <ref> [ Montana, 1995, Haynes et al., 1995 ] </ref> . Each chromosome represents a propositional logical inference from the KB and is evaluated to determine its fitness. The fitness function evaluates the soundness of an inference from the KB.
Reference: [ O'Reilly, 1995 ] <author> Una-May O'Reilly. </author> <title> An Analysis of Genetic Programming. </title> <type> PhD thesis, </type> <institution> Carelton University, Ottawa-Carleton Institute for Computer Science, </institution> <address> Ottawa, Ontario, Canada, </address> <month> 22 September </month> <year> 1995. </year> <title> Collective Memory Search 45 </title>
Reference-contexts: The "basic" theory of GP is borrowed from that of GA. Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995, Rosca, 1995, Tackett, 1995 ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The difference between GA and GP is more than the fixed versus variable genotype representation. In GA there is a close relationship between the genotype and phenotype structure of a chromosome. <p> In the theorem proving domain, valid sentences form the building blocks. In the clique detector domain, candidate cliques form the building blocks. The identification of building blocks in genetic programming is in general a difficult task <ref> [ O'Reilly, 1995, Rosca and Ballard, 1996, Haynes, 1996 ] </ref> . In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 10 .
Reference: [ Oster and Wilson, 1978 ] <author> George F. Oster and Edward O. Wilson. </author> <title> Caste and Ecology in the Social Insects. Monographs in Population Biology. </title> <publisher> Princeton University Press, </publisher> <year> 1978. </year>
Reference-contexts: The colony-level behavior which arises in insect societies is a complex dynamical result of the interactions of simple insects [ Adler and Gordon, 1992, Gordon, 1994 ] . Indeed, the insects exhibit redundancy in their operations, allowing mistakes at the individual level to not influence success at the colony-level <ref> [ Herbers and Choiniere, 1996, Oster and Wilson, 1978 ] </ref> . While the group mind theory is no longer in vogue in the "natural" research community, we in the "artificial" research community can exploit the concept in creating computational agent societies.
Reference: [ Rosca and Ballard, 1996 ] <author> Justinian Rosca and Dana H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In P. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Genetic programming researchers have extracted knowledge from chromosomes, building "libraries" or "banks" from which material could be extracted at a later date <ref> [ Tackett, 1995, Rosca, 1995, Rosca and Ballard, 1996 ] </ref> . Collective Memory Search 11 The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility, i.e. they appear often in chromosomes which are highly fit. <p> The collected subtrees are not allowed to return to the population [ Tackett, 1995 ] . Rosca and Bal-lard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet <ref> [ Rosca and Ballard, 1996 ] </ref> . Finally, Seront [ Seront, 1995 ] considers a concept library system in which the knowledge gained from solving one problem, P a , is applied to the solution of similar problems. <p> In the theorem proving domain, valid sentences form the building blocks. In the clique detector domain, candidate cliques form the building blocks. The identification of building blocks in genetic programming is in general a difficult task <ref> [ O'Reilly, 1995, Rosca and Ballard, 1996, Haynes, 1996 ] </ref> . In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 10 .
Reference: [ Rosca, 1995 ] <author> Justinian Rosca. </author> <title> Towards automatic discovery of building blocks in genetic programming. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 78-85, </pages> <address> Menlo Park, CA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: The "basic" theory of GP is borrowed from that of GA. Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995, Rosca, 1995, Tackett, 1995 ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The difference between GA and GP is more than the fixed versus variable genotype representation. In GA there is a close relationship between the genotype and phenotype structure of a chromosome. <p> Genetic programming researchers have extracted knowledge from chromosomes, building "libraries" or "banks" from which material could be extracted at a later date <ref> [ Tackett, 1995, Rosca, 1995, Rosca and Ballard, 1996 ] </ref> . Collective Memory Search 11 The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility, i.e. they appear often in chromosomes which are highly fit.
Reference: [ Russell and Norvig, 1995 ] <author> Stuart Russell and Peter Norvig. </author> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: The members of the function set map trees from GP space into trees in propositional logic space. A simple heuristic in the logical inference process is to only apply inferences when there is a match between the "arguments" of the hypothesis and sentences in the KB <ref> [ Chandy and Misra, 1988, Russell and Norvig, 1995 ] </ref> . Strong typing enables the GP system to guide the pattern matching rule.
Reference: [ Seront, 1995 ] <author> Gregory Seront. </author> <title> External concepts reuse in genetic programming. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 94-98, </pages> <address> Menlo Park, CA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: Rosca and Bal-lard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet [ Rosca and Ballard, 1996 ] . Finally, Seront <ref> [ Seront, 1995 ] </ref> considers a concept library system in which the knowledge gained from solving one problem, P a , is applied to the solution of similar problems.
Reference: [ Tackett, 1993 ] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <booktitle> In Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Collective Memory Search 11 The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility, i.e. they appear often in chromosomes which are highly fit. They are also conjectured to be the blocks from which the solution is built <ref> [ Tackett, 1993 ] </ref> . However, the extracted knowledge is not processed: the information contained in one subtree is not combined with the information contained in other chromosomes. Tackett's gene-bank gathers statistical information about these subtrees.
Reference: [ Tackett, 1995 ] <author> Walter Alden Tackett. </author> <title> Mining the genetic program. </title> <journal> IEEE Expert, </journal> <volume> 10(3) </volume> <pages> 28-38, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The "basic" theory of GP is borrowed from that of GA. Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995, Rosca, 1995, Tackett, 1995 ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The difference between GA and GP is more than the fixed versus variable genotype representation. In GA there is a close relationship between the genotype and phenotype structure of a chromosome. <p> Genetic programming researchers have extracted knowledge from chromosomes, building "libraries" or "banks" from which material could be extracted at a later date <ref> [ Tackett, 1995, Rosca, 1995, Rosca and Ballard, 1996 ] </ref> . Collective Memory Search 11 The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility, i.e. they appear often in chromosomes which are highly fit. <p> However, the extracted knowledge is not processed: the information contained in one subtree is not combined with the information contained in other chromosomes. Tackett's gene-bank gathers statistical information about these subtrees. The collected subtrees are not allowed to return to the population <ref> [ Tackett, 1995 ] </ref> . Rosca and Bal-lard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet [ Rosca and Ballard, 1996 ] .
References-found: 38

