URL: http://shangrila.cs.ucdavis.edu:1234/silo/tphols96.ps
Refering-URL: http://shangrila.cs.ucdavis.edu:1234/silo/
Root-URL: http://www.cs.ucdavis.edu
Email: email:  olssong@cs.ucdavis.edu  
Title: Towards Applying the Composition Principle to Verify a Microkernel Operating System  
Author: Mark R. Heckman, Cui Zhang, Brian R. Becker, Dave Peticolas, Karl N. Levitt and Ron A. Olsson zhang, beckerb, peticola, levitt, 
Note: fheckman,  
Address: Davis, CA 95616, USA  
Affiliation: Department of Computer Science, University of California,  
Abstract: A compositional proof method allows the components of a system to be specified and verified independently, instead of having to verify the entire system as a monolithic unit. This paper describes how the composition principle of Abadi and Lamport can be applied to specify and compose systems that consist of both safety and progress properties, using the HOL theorem proving system. We discuss the translation of the composition principle into HOL and the resulting proof obligations, and introduce an example system, modeled after a microkernel operating system, that we composed using the method. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Mart in Abadi and Leslie Lamport. </author> <title> The existence of refinement mappings. </title> <journal> Theoretical Computer Science, </journal> <volume> 82 </volume> <pages> 253-284, </pages> <year> 1991. </year>
Reference-contexts: Abadi and Lamport have provided a composition principle and proof rule for composing modular specifications that consist of both safety and progress properties [2]. Their composition method is based on the transition-axiom specification method [9] and a refinement mapping method of proving that one specification implements another <ref> [1] </ref>. In this paper we describe a translation of their specification, composition, and refinement mapping methods into HOL [7], and suggest how the composition principle could eventually be applied to specify and verify a microkernel based, message-passing operating system.
Reference: 2. <author> Mart in Abadi and Leslie Lamport. </author> <title> Composing specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(3) </volume> <pages> 73-132, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: This problem is compounded when a system is reactive and concurrent, as in a distributed operating system. Abadi and Lamport have provided a composition principle and proof rule for composing modular specifications that consist of both safety and progress properties <ref> [2] </ref>. Their composition method is based on the transition-axiom specification method [9] and a refinement mapping method of proving that one specification implements another [1]. <p> The concurrency of the system is represented by the different possible event orderings. A stuttering step is a transition from a state s to the same state s (i.e., the state doesn't change) <ref> [2] </ref>. If we consider non-stuttering transitions to be changes to the observable system state, then stuttering steps would correspond to invisible changes to the internal state of the system. <p> From now on, we refer to M 1 ^ M 2 as the "composed system" and M as the "overall system." Abadi and Lamport describe four conditions that must be satisfied by a refinement mapping <ref> [2] </ref>: 1. f must preserve the external state so that the external state is the same for both the composed system and the overall system. 2. f must map initial states in the composed system to initial states in the overall system. 3. f must map state transitions in the composed <p> In the best case, incremental composition of components with this characteristic might lead to only a linear increase in the number of proofs. 3.7 Refinement We define a refinement mapping f as a function that corresponds to Abadi and Lamport's f fl formula <ref> [2] </ref>.
Reference: 3. <author> Mart in Abadi and Leslie Lamport. </author> <title> Conjoining specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 17(3) </volume> <pages> 507-534, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Abadi and Lamport developed a semantic model for the composition principle and did not tie it to any particular specification language or logic (although their model was influenced by Lamport's temporal logic of actions (TLA) [10]). The principle has been applied to specifications written in TLA <ref> [3] </ref> and an extension has been made to UNITY to allow the composition principle to be applied within the UNITY reasoning framework [6].
Reference: 4. <author> Willam R. Bevier. </author> <title> Kit: A study in operating system verification. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(11) </volume> <pages> 1382-1396, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: CLI verified a "short stack"|a system that includes a microprocessor, compiler, assembler, and linker|using a vertical-layer proof method [5]. Their method was also applied to the proof of an operating system kernel <ref> [4] </ref>. CLI's system, however, was not distributed, and their approach was not intended to handle horizontal composition. An advantage of composing modular specifications is that each module can be specified and proved independently, instead of having to prove the entire system as a single, large unit. <p> section we give a very high level overview of the system and discuss why it was necessary to apply a refinement function to the external state. 3 4.1 System Description In the specifications for the system and environment we assume the existence of a kernel, similar to the KIT kernel <ref> [4] </ref>, that implements message passing and process separation. The kernel provides the processes with the basic operations for sending and receiving messages through mailboxes. Each process has its own mailbox from which it alone can read messages, but processes can send messages to any other process's mailbox.
Reference: 5. <author> William R. Bevier, Warren A. Hunt, Jr., J. Strother Moore, and William D. Young. </author> <title> An approach to systems verification. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 5 </volume> <pages> 411-428, </pages> <year> 1989. </year>
Reference-contexts: CLI verified a "short stack"|a system that includes a microprocessor, compiler, assembler, and linker|using a vertical-layer proof method <ref> [5] </ref>. Their method was also applied to the proof of an operating system kernel [4]. CLI's system, however, was not distributed, and their approach was not intended to handle horizontal composition.
Reference: 6. <author> Pierre Collette. </author> <title> Application of the composition principle to unity-like specifications. </title> <editor> In M.-C. Gaudel and J.-P. Jouannaud, editors, </editor> <booktitle> TAPSOFT '93: Theory and Practice of Software Development, number 668 in Lecture Notes in Computer Science, </booktitle> <pages> pages 230-242. </pages> <publisher> Springer-Verlag, </publisher> <month> April </month> <year> 1993. </year>
Reference-contexts: The principle has been applied to specifications written in TLA [3] and an extension has been made to UNITY to allow the composition principle to be applied within the UNITY reasoning framework <ref> [6] </ref>.
Reference: 7. <author> M. J. C. Gordon and T. F. Melham. </author> <title> Introduction to HOL: A Theorem Proving Environment for Higer Order Logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: Their composition method is based on the transition-axiom specification method [9] and a refinement mapping method of proving that one specification implements another [1]. In this paper we describe a translation of their specification, composition, and refinement mapping methods into HOL <ref> [7] </ref>, and suggest how the composition principle could eventually be applied to specify and verify a microkernel based, message-passing operating system.
Reference: 8. <author> Judith A. Hemenway and Dr. Jonathan Fellows. </author> <title> Applying the Abadi-Lamport composition theorem in real-world secure system integration environments. </title> <booktitle> In Proceedings of the Tenth Annual Computer Security Applications Conference, </booktitle> <pages> pages 44-53, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: of the principle was also ? This work was sponsored by DARPA under contract USN N00014-93-1-1322 with the Office of Naval Research and by the National Security Agency's UR Program. made to the composition of a secure system using the FDM theorem prover, but this application used only safety properties <ref> [8] </ref>. Our interest in a composition method stems from our current project to verify a system that includes a concurrent programming language and compiler, distributed and secure operating system, and reliable network [11, 12, 13].
Reference: 9. <author> Leslie Lamport. </author> <title> A simple approach to specifying concurrent systems. </title> <journal> Communications of the ACM, </journal> <volume> 32(1) </volume> <pages> 32-45, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Abadi and Lamport have provided a composition principle and proof rule for composing modular specifications that consist of both safety and progress properties [2]. Their composition method is based on the transition-axiom specification method <ref> [9] </ref> and a refinement mapping method of proving that one specification implements another [1].
Reference: 10. <author> Leslie Lamport. </author> <title> The temporal logic of actions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3) </volume> <pages> 872-923, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Abadi and Lamport developed a semantic model for the composition principle and did not tie it to any particular specification language or logic (although their model was influenced by Lamport's temporal logic of actions (TLA) <ref> [10] </ref>). The principle has been applied to specifications written in TLA [3] and an extension has been made to UNITY to allow the composition principle to be applied within the UNITY reasoning framework [6].
Reference: 11. <author> C. Zhang, R. Shaw, M. R. Heckman, G. D. Benson, M. Archer, K. Levitt, and R. A. Olsson. </author> <title> Towards a formal verification of a secure distributed system and its applications. </title> <booktitle> In Proceedings of the 17th National Computer Security Conference, </booktitle> <address> Baltimore, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Our interest in a composition method stems from our current project to verify a system that includes a concurrent programming language and compiler, distributed and secure operating system, and reliable network <ref> [11, 12, 13] </ref>. CLI verified a "short stack"|a system that includes a microprocessor, compiler, assembler, and linker|using a vertical-layer proof method [5]. Their method was also applied to the proof of an operating system kernel [4].
Reference: 12. <author> C. Zhang, R. Shaw, R. Olsson, K. Levitt, M. Archer, M. Heckman, and G. Benson. </author> <title> Mechanizing a programming logic for the concurrent programming language mi-croSR in HOL. </title> <booktitle> In Proceedings of the International Higher-Order-Logic Theorem Proving Workshop, </booktitle> <pages> pages 31-44, </pages> <address> Vancouver, B.C., </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Our interest in a composition method stems from our current project to verify a system that includes a concurrent programming language and compiler, distributed and secure operating system, and reliable network <ref> [11, 12, 13] </ref>. CLI verified a "short stack"|a system that includes a microprocessor, compiler, assembler, and linker|using a vertical-layer proof method [5]. Their method was also applied to the proof of an operating system kernel [4].
Reference: 13. <author> Cui Zhang, Brian R. Becker, Mark R. Heckman, Karl Levitt, and Ron A. Olsson. </author> <title> A hierarchical method for reasoning about distributed programming languages. </title> <editor> In E. Thomas Schubert, Phillip J. Windley, and James Alves-Foss, editors, </editor> <title> Higher-Order-Logic Theorem Proving and Its Applications: </title> <booktitle> 8th International Workshop, number 668 in Lecture Notes in Computer Science, </booktitle> <pages> pages 385-400, </pages> <address> Aspen Grove, Utah, </address> <month> September </month> <year> 1995. </year> <title> Springer-Verlag. This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Our interest in a composition method stems from our current project to verify a system that includes a concurrent programming language and compiler, distributed and secure operating system, and reliable network <ref> [11, 12, 13] </ref>. CLI verified a "short stack"|a system that includes a microprocessor, compiler, assembler, and linker|using a vertical-layer proof method [5]. Their method was also applied to the proof of an operating system kernel [4].
References-found: 13

