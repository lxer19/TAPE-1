URL: http://www.cse.ogi.edu/DISC/DIOM/online_pub/papers/v0-diom.ps
Refering-URL: http://www.cse.ogi.edu/DISC/DIOM/
Root-URL: http://www.cse.ogi.edu
Email: email: lingliu@cs.ualberta.ca  email: calton@cse.ogi.edu  
Title: The Distributed Interoperable Object Model and Its Application to Large-scale Interoperable Database Systems  
Author: Ling Liu Calton Pu 
Keyword: Index Terms: Large scale interoperable database systems, Distributed object management, Dynamic object binding interfaces, Scalability, System evolution, Object-oriented systems  
Address: GSB 615, Edmonton, Alberta T6G 2H1 Canada  P.O.Box 91000 Portland, Oregon 97291-1000 USA  
Affiliation: Department of Computing Science University of Alberta  Dept. of Computer Science and Engineering Oregon Graduate Institute  
Abstract: A large-scale interoperable database system operating in a dynamic environment should provide uniform access user interface to its components, scalability to larger networks, evolution of database schema and applications, flexible composability of client and server components, and preserve component autonomy. To address the research issues presented by such systems, we introduce the Distributed Interoperable Object Model (DIOM). DIOM's main features include the explicit representation of and access to semantics in data sources through the DIOM base interfaces, the use of interface abstraction mechanisms (such as specialization, generalization, aggregation and import) to support incremental design and construction of compound interoperation interfaces, the deferment of conflict resolution to the query submission time instead of at the time of schema integration, and a clean interface between distributed interoperable objects that supports the independent evolution and management of such objects. To make DIOM concrete, we outline the Diorama architecture, which includes important auxiliary services such as domain-specific library functions, object linking databases, and query decomposition and packaging strategies. Several practical examples and application scenarios illustrate the usefulness of DIOM. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Betz. </author> <title> Interoperable objects: laying the foundation for distributed object computing. Dr. Dobb's Journal: Software Tools for Professional Programmer, </title> <month> October </month> <year> 1994. </year>
Reference-contexts: regardless of the language in which the objects are defined and their physical location (e.g., hardware platforms, operating systems, DBMS's). 3 Distributed interoperable objects are objects that support a level of interoperability beyond the tradi-tional object computing boundaries imposed by programming languages, data models, process address space, and network interface <ref> [1] </ref>. The abstractions of distributed interoperable objects are captured in the Distributed Interoperable Object Model (DIOM), described in Section 3. Diorama is an interoperable software architecture based on DIOM to support USECA properties.
Reference: [2] <author> C. Bowman, P. Danzig, D. Hardy, U. Manber, and M. F. Schwartz. </author> <title> The harvest information discovery and access system. </title> <booktitle> In Proceedings of the Second International World Wide Web Conference, </booktitle> <pages> pages 763-771, </pages> <address> Chicago, Illinois, </address> <year> 1994. </year>
Reference-contexts: Diorama approach allows new sources to become useful to the DIOM users as soon as a wrapper is supplied. This approach allows a flexible integration of information resources gathered by other mediators or resource discovery systems <ref> [2, 12, 33] </ref>. For a further discussion, refer to Section 5. In the middle right of Figure 1, the DIOM meta object library consists of DIOM interface repository and DIOM implementation repository. <p> Currently, our main implementation effort is devoted to the Mosaic-based browser for DIOM, with one wrapper to Oracle, one wrapper to ObjectStore, and one wrapper to HARVEST, an internet information resource discovery system <ref> [2] </ref>. 5 Related Work Over the last decade, many published results on database interoperability have primarily focused on resolving schematic and semantic incompatibilities arising from autonomy of the underlying databases. They use two integration strategies: tight-coupling and loose-coupling [30]. Tight-coupling insists on total schema integration. <p> In terms of the TSIMMIS approach to mediation, Diorama can be considered as a mediator that may con-mmunicate either directly with another Diorama system, or indirectly with, for example, the TSIMMIS mediators [12] or the HARVEST resource discovery system <ref> [2] </ref>, by providing the wrappers/translators between Diorama and TSIMMIS or between Diorama and HARVEST (see Figure 13). In addition, a number of proposals have competed as the basic enabling technologies for implementing interoperable objects in distributed and dynamic object computing environments.
Reference: [3] <author> M. Bright, A. Hurson, and S. H. Pakzad. </author> <title> A taxonomy and current issues in multidatabase systems. </title> <journal> IEEE Computer Magazine, </journal> <month> March </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Many papers on multidatabase systems or federated database systems <ref> [3, 11, 25, 28] </ref>, focused on the resolution of schematic and semantic incompatibilities among autonomous and heterogeneous component databases in relatively static system configurations.
Reference: [4] <author> S. M. C. Goh and M. Siegel. </author> <title> Context interchange: overcoming the challenges of large-scale interoperable database systems in a dynamic environment. </title> <booktitle> In Proceedings of International Conference on Information and Knowledge Management, </booktitle> <year> 1994. </year>
Reference-contexts: DIOM are mainly motivated by the mediator architecture [33, 34] and the Context Interchange approach <ref> [26, 4] </ref>. For example, the idea of using repository wrapper to bridge between the interoperable database system and the individual component repositories is to some extent encouraged by the mediator approach. The intelligent integration of information through query compilation is also supported in the DIOM framework.
Reference: [5] <author> L. Cardelli. </author> <title> A semantics of multiple inheritance. </title> <editor> In G. Kahn, D. MacQueen, and G. Plotkin, editors, </editor> <booktitle> Semantics of Data Types, </booktitle> <pages> pages 51-67. </pages> <publisher> Springer Verlag, </publisher> <year> 1984. </year>
Reference-contexts: It may also "override" the properties and operations it inherits to make them specialized to the behavior and range of state values appropriate for instances of the subtype. The formal semantics of inheritance along with subtype/supertype graph is based on the usual notion of subtyping <ref> [5] </ref>. Figure 4 shows the subtyping relationships between types, and the instance-of relationship between types and their instances. 8 * Extents. The extent of a type denotes the set of all instances of the type.
Reference: [6] <author> L. Cardelli and P. Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(4):471, </volume> <month> December </month> <year> 1985. </year> <month> 24 </month>
Reference-contexts: As a result, the operations defined in the component interfaces can be invoked via the container's interface. The aggregation abstraction mechanism is a useful facility for implementing behavioral composition [18, 19] and ad-hoc polymorphism <ref> [6] </ref> based on coercion of operations. Recall the Claim Folder example given earlier. Assume that each claim may contain more than one X-ray image but involve only one doctor's diagnosis report.
Reference: [7] <author> M. Carey, L. Haas, and P. S. et al. </author> <title> Towards heterogeneous multimedia information systems: the garlic approach. </title> <type> In Technical Report, </type> <institution> IBM Almaden Research Center, </institution> <year> 1994. </year>
Reference-contexts: Recent research in database interoperability has started to pay more attention to interoperation architectures that may support both tight-coupling and loose-coupling (cf. [12, 10, 24, 27, 34]). A few prototype systems are under development. Examples include the Garlic project at IBM Almaden Research Center <ref> [7] </ref>, which targets at developing a system and tools for the management of large quantities of heterogeneous multimedia information, and the TSIMMIS project at Stanford [12, 23], which proposes an object exchange model (OEM) and a declarative language (LOREL) to intelligent information mediation.
Reference: [8] <author> M. Castellanos, F. Saltor, and M. Garcia-Solaco. </author> <title> A canonical model for interoperability among object-oriented and relational databases. </title> <booktitle> In Proceedings of the 1992 International Workshop on Distributed Object Management, </booktitle> <address> Edmonton, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Another related field is the area of Distributed Object Management [22]. A representative effort is the ongoing research at GTE Labs [21] to divide object models into components and then map them into each other. Another example is the BLOOM model <ref> [8] </ref>, which is a semantic data model that includes abstractions such as specialization, generalization, and aggregation.
Reference: [9] <author> R. Cattell and et al. </author> <title> The Object Database Standard: ODMG-93 (Release 1.1). </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Recently, a consortium of major OODBMS vendors proposed a candidate for such a model, called ODMG-93 object database standard <ref> [9, 13] </ref>, which was developed by adding database features to the OMG object model standard.
Reference: [10] <author> D. D.Fang, S.Ghandeharizadeh and A. </author> <title> Si. The design, implementation, and evaluation of an object-based sharing mechanism for federated database systems. </title> <booktitle> In Proceedings of International Conference on Data Engineering, </booktitle> <address> Vienna Austria, </address> <year> 1993. </year>
Reference-contexts: Recent research in database interoperability has started to pay more attention to interoperation architectures that may support both tight-coupling and loose-coupling (cf. <ref> [12, 10, 24, 27, 34] </ref>). A few prototype systems are under development.
Reference: [11] <author> A. K. Elmagarmid and C. Pu. </author> <title> Special Issue on Heterogeneous Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 22, No. 3, </volume> <month> September </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Many papers on multidatabase systems or federated database systems <ref> [3, 11, 25, 28] </ref>, focused on the resolution of schematic and semantic incompatibilities among autonomous and heterogeneous component databases in relatively static system configurations.
Reference: [12] <author> H. Garcia-Molina and et al. </author> <title> The tsimmis approach to mediation: data models and languages (extended abstract). </title> <type> In Technical Report, </type> <institution> Stanford University, </institution> <year> 1994. </year>
Reference-contexts: Diorama approach allows new sources to become useful to the DIOM users as soon as a wrapper is supplied. This approach allows a flexible integration of information resources gathered by other mediators or resource discovery systems <ref> [2, 12, 33] </ref>. For a further discussion, refer to Section 5. In the middle right of Figure 1, the DIOM meta object library consists of DIOM interface repository and DIOM implementation repository. <p> Recent research in database interoperability has started to pay more attention to interoperation architectures that may support both tight-coupling and loose-coupling (cf. <ref> [12, 10, 24, 27, 34] </ref>). A few prototype systems are under development. <p> A few prototype systems are under development. Examples include the Garlic project at IBM Almaden Research Center [7], which targets at developing a system and tools for the management of large quantities of heterogeneous multimedia information, and the TSIMMIS project at Stanford <ref> [12, 23] </ref>, which proposes an object exchange model (OEM) and a declarative language (LOREL) to intelligent information mediation. DIOM are mainly motivated by the mediator architecture [33, 34] and the Context Interchange approach [26, 4]. <p> In terms of the TSIMMIS approach to mediation, Diorama can be considered as a mediator that may con-mmunicate either directly with another Diorama system, or indirectly with, for example, the TSIMMIS mediators <ref> [12] </ref> or the HARVEST resource discovery system [2], by providing the wrappers/translators between Diorama and TSIMMIS or between Diorama and HARVEST (see Figure 13). In addition, a number of proposals have competed as the basic enabling technologies for implementing interoperable objects in distributed and dynamic object computing environments.
Reference: [13] <author> W. Kim. </author> <title> Observations on the odmg-93 proposal. </title> <booktitle> ACM SIGMOD RECORD on Management of Data, </booktitle> <volume> 23(1), </volume> <month> March </month> <year> 1994. </year>
Reference-contexts: Recently, a consortium of major OODBMS vendors proposed a candidate for such a model, called ODMG-93 object database standard <ref> [9, 13] </ref>, which was developed by adding database features to the OMG object model standard.
Reference: [14] <author> W. Kim and J. Seo. </author> <title> Classifying schematic and data heterogeneity in multidatabase systems. </title> <journal> IEEE Computer Magazine, </journal> <volume> 24(2) </volume> <pages> 12-18, </pages> <year> 1991. </year>
Reference-contexts: Consider Scalability. A large-scale interoperable database environment (e.g., three hundreds databases as opposed to three databases) presents challenging questions to the viability of loose-coupling approach to system development (cf. [16, 17]) and the tight-coupling integration framework that concentrates primarily on circumventing schematic and semantic heterogeneity (cf. <ref> [14, 29, 30, 31, 32] </ref>). As the number of databases participating the interoperable database system increases, the design of an integrated schema involving n different systems requires to reconcile an order of n 2 possibly conflicting representations (i.e., heterogeneity in semantics or in data formats).
Reference: [15] <author> C. Lamb, G. Landis, J. Orenstein, and D. Weinreb. </author> <title> The objectstore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10), </volume> <year> 1991. </year>
Reference-contexts: The DIOM linking database should be considered just as yet another persistent data repository in the DIOM architecture. In the first phase, we intend to implement the link database using an object-oriented database management system such as ObjectStore <ref> [15] </ref>. Note that in Diorama, there is neither a single global database containing the integrated information nor even a global database schema that describes all the information accessible via Diorama. Each application may set up its own interoperable interface schema using DIOM/IDL.
Reference: [16] <author> T. Landers, W. Litwin, and W. Kent. </author> <title> Language features for interoperability of databases with schematic discrepancies. </title> <booktitle> In Proceedings of ACM/SIGMOD Annual Conference on Management of Data, </booktitle> <year> 1991. </year>
Reference-contexts: Consider Scalability. A large-scale interoperable database environment (e.g., three hundreds databases as opposed to three databases) presents challenging questions to the viability of loose-coupling approach to system development (cf. <ref> [16, 17] </ref>) and the tight-coupling integration framework that concentrates primarily on circumventing schematic and semantic heterogeneity (cf. [14, 29, 30, 31, 32]). <p> In contrast, loose-coupling goes to another extreme by favoring 21 zero schema integration, for example, by promoting integration and interoperability via a multidatabase query language <ref> [16, 17] </ref>. It does not require the existence of an integrated schema, leaving many responsibilities, such as resolving semantic mismatch, dealing with multiple representations of data, and coping with dynamic system evolution, to the users.
Reference: [17] <author> W. Litwin and A. Abdellatif. </author> <title> An overview of the multidatabase manipulation language mdsl. </title> <booktitle> In Proceedings of the IEEE 75, </booktitle> <volume> 5, </volume> <year> 1987. </year>
Reference-contexts: Consider Scalability. A large-scale interoperable database environment (e.g., three hundreds databases as opposed to three databases) presents challenging questions to the viability of loose-coupling approach to system development (cf. <ref> [16, 17] </ref>) and the tight-coupling integration framework that concentrates primarily on circumventing schematic and semantic heterogeneity (cf. [14, 29, 30, 31, 32]). <p> In contrast, loose-coupling goes to another extreme by favoring 21 zero schema integration, for example, by promoting integration and interoperability via a multidatabase query language <ref> [16, 17] </ref>. It does not require the existence of an integrated schema, leaving many responsibilities, such as resolving semantic mismatch, dealing with multiple representations of data, and coping with dynamic system evolution, to the users.
Reference: [18] <author> L. Liu. </author> <title> A recursive object algebra based on aggregation abstraction for complex objects. </title> <journal> Journal of Data and Knowledge Engineering, </journal> <volume> 11(1) </volume> <pages> 21-60, </pages> <year> 1993. </year>
Reference-contexts: As a result, the operations defined in the component interfaces can be invoked via the container's interface. The aggregation abstraction mechanism is a useful facility for implementing behavioral composition <ref> [18, 19] </ref> and ad-hoc polymorphism [6] based on coercion of operations. Recall the Claim Folder example given earlier. Assume that each claim may contain more than one X-ray image but involve only one doctor's diagnosis report.
Reference: [19] <author> L. Liu and R. Meersman. </author> <title> Activity model: a declarative approach for capturing communication behavior in object-oriented databases. </title> <booktitle> In Proceeding of the 18th International Conference on Very Large Databases, </booktitle> <address> Vancouver, Canada, </address> <year> 1992. </year>
Reference-contexts: As a result, the operations defined in the component interfaces can be invoked via the container's interface. The aggregation abstraction mechanism is a useful facility for implementing behavioral composition <ref> [18, 19] </ref> and ad-hoc polymorphism [6] based on coercion of operations. Recall the Claim Folder example given earlier. Assume that each claim may contain more than one X-ray image but involve only one doctor's diagnosis report.
Reference: [20] <author> L. Liu and C. Pu. </author> <title> The distributed interoperable object model and its application to large scale interoperable database systems. </title> <type> Technical report, </type> <institution> University of Alberta, </institution> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: Due to the space limitation, we omit the discussion on the DIOM built-in type hierarchy and the BNF syntax of the IDL in this paper. Readers who are interested in this part may refer to our technical 10 report <ref> [20] </ref>. 3.3 Advanced Concepts for Interface Definitions 3.3.1 Base Interface and Compound Interfaces As mentioned earlier, a type of distributed interoperable objects is defined by specifying its interface in the DIOM Interface Definition Language (DIOM-IDL). The DIOM interfaces are classified into two categories: base interfaces and compound interfaces. <p> In the first phase of DIOM implementation, the specialization abstraction is only supported for construction of a new interface based on one or more base interfaces whose scope is the same data repository (see <ref> [20] </ref> for more detail). 3.3.5 The Import Mechanism The import mechanism is designed for importing selected portions of the data from a given export schema, instead of importing everything that is available. <p> We may specify the University interface by using the DIOM import facility as shown in Figure 10 (a). Three types are explicitly imported from UnivDB1. They are Person, TA, and Professor. For the BNF syntax of the IDL import specification, readers may refer to our technical report <ref> [20] </ref>. According to the referential integrity and type closure property, the type Course needs to be imported as well, because the Course objects are referenced by the imported types such as Professor and TA (see Figure 10 (b)).
Reference: [21] <author> F. Manola and S. Heiler. </author> <title> An approach to interoperable object models. </title> <booktitle> In Proceedings of the 1992 International Workshop on Distributed Object Management, </booktitle> <address> Edmonton, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: DIOM can be seen as a glue that spans and integrates these interface models. Another related field is the area of Distributed Object Management [22]. A representative effort is the ongoing research at GTE Labs <ref> [21] </ref> to divide object models into components and then map them into each other. Another example is the BLOOM model [8], which is a semantic data model that includes abstractions such as specialization, generalization, and aggregation.
Reference: [22] <author> M. Ozsu, U. Dayal, and P. Valduriez, </author> <title> editors. Distributed Object Management, Edmonton, Canada, August 1992. </title> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: DIOM can be seen as a glue that spans and integrates these interface models. Another related field is the area of Distributed Object Management <ref> [22] </ref>. A representative effort is the ongoing research at GTE Labs [21] to divide object models into components and then map them into each other. Another example is the BLOOM model [8], which is a semantic data model that includes abstractions such as specialization, generalization, and aggregation.
Reference: [23] <author> Y. Papakonstantinou, H. Garcia-Molina, and J. Widom. </author> <title> Object exchange across heterogeneous information sources. </title> <booktitle> In Proceedings of International Conference on Data Engineering, </booktitle> <address> Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: A few prototype systems are under development. Examples include the Garlic project at IBM Almaden Research Center [7], which targets at developing a system and tools for the management of large quantities of heterogeneous multimedia information, and the TSIMMIS project at Stanford <ref> [12, 23] </ref>, which proposes an object exchange model (OEM) and a declarative language (LOREL) to intelligent information mediation. DIOM are mainly motivated by the mediator architecture [33, 34] and the Context Interchange approach [26, 4].
Reference: [24] <author> C. Pu. </author> <title> Superdatabases for composition of heterogeneous databases. In Chapter in IEEE Computer Society Tutorial Multidatabase Systems: An Advanced Solutions for Global Information Sharing, </title> <editor> ed. A.R. Hurson, M.W. Bright, and S.Pakzad. </editor> <booktitle> An extended abstract was published in the Proceedings of International Conference on Data Engineering (Los Angeles 1988). </booktitle> <pages> 25 </pages>
Reference-contexts: Recent research in database interoperability has started to pay more attention to interoperation architectures that may support both tight-coupling and loose-coupling (cf. <ref> [12, 10, 24, 27, 34] </ref>). A few prototype systems are under development.
Reference: [25] <author> S. Ram. </author> <title> Special Issue on Heterogeneous Distributed Database Systems. </title> <journal> IEEE Computer Magazine, </journal> <volume> Vol. 24, No. 12, </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Many papers on multidatabase systems or federated database systems <ref> [3, 11, 25, 28] </ref>, focused on the resolution of schematic and semantic incompatibilities among autonomous and heterogeneous component databases in relatively static system configurations.
Reference: [26] <author> E. Sciore, M. Siegel, and A. Rosenthal. </author> <title> Using semantic values to facilitate interoperability among heterogeneous information systems. </title> <journal> ACM Trans. Database Syst., </journal> <volume> Vol. 19, No. </volume> <month> 2 June </month> <year> 1994. </year>
Reference-contexts: DIOM are mainly motivated by the mediator architecture [33, 34] and the Context Interchange approach <ref> [26, 4] </ref>. For example, the idea of using repository wrapper to bridge between the interoperable database system and the individual component repositories is to some extent encouraged by the mediator approach. The intelligent integration of information through query compilation is also supported in the DIOM framework.
Reference: [27] <author> M. Shan. </author> <booktitle> Pegasus architecture and design principles. In Proceedings of ACM/SIGMOD Annual Conference on Management of Data, </booktitle> <year> 1993. </year>
Reference-contexts: Recent research in database interoperability has started to pay more attention to interoperation architectures that may support both tight-coupling and loose-coupling (cf. <ref> [12, 10, 24, 27, 34] </ref>). A few prototype systems are under development.
Reference: [28] <author> A. Sheth. </author> <title> Special Issue in Multidatabase Systems. </title> <journal> ACM SIGMOD Record, Vol.20, </journal> <volume> No. 4, </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Many papers on multidatabase systems or federated database systems <ref> [3, 11, 25, 28] </ref>, focused on the resolution of schematic and semantic incompatibilities among autonomous and heterogeneous component databases in relatively static system configurations.
Reference: [29] <author> A. Sheth and V. Kashyap. </author> <title> So far (schematically) yet so near (semantically). </title> <booktitle> In Proceeding of the IFIP WG2.6 Database Semantics, </booktitle> <address> Victoria, Australia, </address> <year> 1992. </year>
Reference-contexts: Consider Scalability. A large-scale interoperable database environment (e.g., three hundreds databases as opposed to three databases) presents challenging questions to the viability of loose-coupling approach to system development (cf. [16, 17]) and the tight-coupling integration framework that concentrates primarily on circumventing schematic and semantic heterogeneity (cf. <ref> [14, 29, 30, 31, 32] </ref>). As the number of databases participating the interoperable database system increases, the design of an integrated schema involving n different systems requires to reconcile an order of n 2 possibly conflicting representations (i.e., heterogeneity in semantics or in data formats).
Reference: [30] <author> A. Sheth and J. Larson. </author> <title> Federated database systems for managing distributed, heterogeneous, and autonomous databases. </title> <journal> ACM Trans. Database Syst., </journal> <volume> Vol. 22, </volume> <month> No.3 </month> <year> 1990. </year>
Reference-contexts: Consider Scalability. A large-scale interoperable database environment (e.g., three hundreds databases as opposed to three databases) presents challenging questions to the viability of loose-coupling approach to system development (cf. [16, 17]) and the tight-coupling integration framework that concentrates primarily on circumventing schematic and semantic heterogeneity (cf. <ref> [14, 29, 30, 31, 32] </ref>). As the number of databases participating the interoperable database system increases, the design of an integrated schema involving n different systems requires to reconcile an order of n 2 possibly conflicting representations (i.e., heterogeneity in semantics or in data formats). <p> They use two integration strategies: tight-coupling and loose-coupling <ref> [30] </ref>. Tight-coupling insists on total schema integration. Since the creation and maintenance of such an integrated schema has been recognized as a fundamental roadblock towards system scalability and evolution, tight-coupling is generally considered a small-system strategy.
Reference: [31] <author> M. Siegel and S. Madnick. </author> <title> A metadata approach to solving semantic conflicts. </title> <booktitle> In International Conference on Very Large Data Bases, </booktitle> <year> 1991. </year>
Reference-contexts: Consider Scalability. A large-scale interoperable database environment (e.g., three hundreds databases as opposed to three databases) presents challenging questions to the viability of loose-coupling approach to system development (cf. [16, 17]) and the tight-coupling integration framework that concentrates primarily on circumventing schematic and semantic heterogeneity (cf. <ref> [14, 29, 30, 31, 32] </ref>). As the number of databases participating the interoperable database system increases, the design of an integrated schema involving n different systems requires to reconcile an order of n 2 possibly conflicting representations (i.e., heterogeneity in semantics or in data formats).
Reference: [32] <author> V. Ventrone and S. Heiler. </author> <title> Semantic heterogeneity as a result of domain evolution. </title> <booktitle> ACM SIGMOD RECORD on Management of Data, </booktitle> <volume> 20(4), </volume> <year> 1991. </year>
Reference-contexts: Consider Scalability. A large-scale interoperable database environment (e.g., three hundreds databases as opposed to three databases) presents challenging questions to the viability of loose-coupling approach to system development (cf. [16, 17]) and the tight-coupling integration framework that concentrates primarily on circumventing schematic and semantic heterogeneity (cf. <ref> [14, 29, 30, 31, 32] </ref>). As the number of databases participating the interoperable database system increases, the design of an integrated schema involving n different systems requires to reconcile an order of n 2 possibly conflicting representations (i.e., heterogeneity in semantics or in data formats).
Reference: [33] <author> G. Wiederhold. </author> <title> Mediators in the architecture of future information systems. </title> <journal> IEEE Computer Magazine, </journal> <month> March </month> <year> 1992. </year>
Reference-contexts: Diorama approach allows new sources to become useful to the DIOM users as soon as a wrapper is supplied. This approach allows a flexible integration of information resources gathered by other mediators or resource discovery systems <ref> [2, 12, 33] </ref>. For a further discussion, refer to Section 5. In the middle right of Figure 1, the DIOM meta object library consists of DIOM interface repository and DIOM implementation repository. <p> DIOM are mainly motivated by the mediator architecture <ref> [33, 34] </ref> and the Context Interchange approach [26, 4]. For example, the idea of using repository wrapper to bridge between the interoperable database system and the individual component repositories is to some extent encouraged by the mediator approach.
Reference: [34] <author> G. Wiederhold. </author> <title> Intelligent integration of information. </title> <booktitle> In Proceedings of ACM/SIGMOD Annual Conference on Management of Data, </booktitle> <year> 1993. </year> <month> 26 </month>
Reference-contexts: Recent research in database interoperability has started to pay more attention to interoperation architectures that may support both tight-coupling and loose-coupling (cf. <ref> [12, 10, 24, 27, 34] </ref>). A few prototype systems are under development. <p> DIOM are mainly motivated by the mediator architecture <ref> [33, 34] </ref> and the Context Interchange approach [26, 4]. For example, the idea of using repository wrapper to bridge between the interoperable database system and the individual component repositories is to some extent encouraged by the mediator approach.
References-found: 34

