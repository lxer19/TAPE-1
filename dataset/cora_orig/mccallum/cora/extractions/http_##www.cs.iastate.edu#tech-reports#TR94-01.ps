URL: http://www.cs.iastate.edu/tech-reports/TR94-01.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: 
Title: A Gentle Introduction to Larch Smalltalk Specification Browsers TR94-01  
Author: Yoonsik Cheon and Gary T. Leavens 
Address: 226 Atanasoff Ames, IA 50011  
Affiliation: Iowa State University of Science and Technology Department of Computer Science  
Date: January 24, 1994  
Abstract-found: 0
Intro-found: 1
Reference: [Ame91] <author> Pierre America. </author> <title> Designing an object-oriented programming language with behavioral subtyping. </title> <editor> In J.W. de Bakker, W.P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Foundations of Object-Oriented Languages, REX School/Workshop Noordwijker-hout, The Nertherlands, May 28-June 1, 1990, Proceedings, volume 489 of Lecture Notes in Computer Science, </booktitle> <pages> pages 60-90. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: This in turn give us the freedom to use a behavioral notion of subtyping for Larch/Smalltalk. That is, each object of a subtype should behave like some object of each of its supertypes <ref> [Lea91, Ame91] </ref>. Larch/Smalltalk type specifications are organized according to this subtype relationship. Behavioral subtyping is not enforced but is more useful for organizing specification than other notions. Larch/Smalltalk also supports inheritance of specifications; a subtype can inherit specifications from its supertypes, e.g., instance method specifications and invariants.
Reference: [CL93a] <author> Yoonsik Cheon and Gary T. Leavens. </author> <title> The Larch/Smalltalk interface specification language. </title> <type> Technical Report TR #93-24, </type> <institution> Department of Computer Science; Iowa State University, Ames, IA, </institution> <month> October </month> <year> 1993. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu, and by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: The Larch/Smalltalk specification browser provides a powerful and sophisticated environment for writing and managing Larch/Smalltalk specifications, which is integrated with the Smalltalk-80 programming system. Larch/Smalltalk <ref> [CL93a] </ref> is a Larch interface specification language for Smalltalk. As writing Smalltalk programs is quite different from writing programs in the conventional programming languages, so writing Larch/Smalltalk specifications quite different from the traditional approaches to developing specifications. The major difference is the interactive and incremental style of specification development. <p> Assertions in the pre- and post-conditions should sort-check in the sense that LSL trait function applications conform to their signatures. Larch/Smalltalk sort inference rules can be found in <ref> [CL93a] </ref>. Visual feedback is provided when such errors occur by inserting an error message at the point in the specification where the error was discovered.
Reference: [CL93b] <author> Yoonsik Cheon and Gary T. Leavens. </author> <title> A quick overview of Larch/C++. </title> <type> Technical Report 93-18, </type> <institution> Department of Computer Science, Iowa State University, </institution> <month> June </month> <year> 1993. </year> <note> To appear in the Journal of Object-Oriented Programming. Available by anonymous ftp from ftp.cs.iastate.edu, and by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: Larch/Smalltalk is a formal notation for specifying program modules in Smalltalk. It is a member of the Larch family of specification languages such as Larch/C [GH93, Chapter 5], Larch/Modula3 [GH93, Chapter 6], and Larch/C ++ <ref> [LC92, CL93b] </ref>. In addition, it supports the notion of subtyping and inheritance of specification. The unit of specification is an abstract data type, which is implemented by one or more Smalltalk classes.
Reference: [Coo92] <author> William R. Cook. </author> <title> Interfaces and specifications for the Smalltalk-80 collection classes. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(10) </volume> <pages> 1-15, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Appendix A lists all the menu items available from the specification browsers accompanied by short descriptions. 1.1 Larch/Smalltalk Object-oriented programming languages, such as Smalltalk [GR83], help one to build reusable program modules. However, the reuse of program modules requires adequate documentation | formal or informal <ref> [LC91, Coo92] </ref>. Larch/Smalltalk is a formal notation for specifying program modules in Smalltalk. It is a member of the Larch family of specification languages such as Larch/C [GH93, Chapter 5], Larch/Modula3 [GH93, Chapter 6], and Larch/C ++ [LC92, CL93b].
Reference: [GH78] <author> J. Guttag and J. J. Horning. </author> <title> The algebraic specification of abstract data types. </title> <journal> Acta Informatica, </journal> <volume> 10(1) </volume> <pages> 27-52, </pages> <year> 1978. </year>
Reference-contexts: The trait provides us vocabulary (sort names and trait function names) to specify pre- and post-conditions of method specifications. A major concern in constructing traits is deciding what axioms are needed. The notion of sufficient-completeness is a helpful technique for writing traits <ref> [Gut77, GH78, LG86] </ref>. In a trait there is a distinguished sort, sometimes called the type of interest or data sort. For 2 In reality one could use the trait from the LSL Handbook ([GH93, Appendix A]). 13 example, the sort S in the SetTrait is the distinguished sort.
Reference: [GH93] <author> John V. Guttag and James J. Horning. </author> <title> Larch: Languages and Tools for Formal Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1993. </year>
Reference-contexts: 1 Introduction For specifications to be practically and productively used in the programming, adequate support tools are needed. They help specifiers to check and maintain the consistency of formal text and assist in managing large volume of specifications. The Larch family of specification languages <ref> [GH93] </ref> provides a set of specification support tools such as syntax and sort checkers, and a theorem prover called LP [GH93, Chapter 7]. The Larch/Smalltalk specification browser provides a powerful and sophisticated environment for writing and managing Larch/Smalltalk specifications, which is integrated with the Smalltalk-80 programming system. <p> They help specifiers to check and maintain the consistency of formal text and assist in managing large volume of specifications. The Larch family of specification languages [GH93] provides a set of specification support tools such as syntax and sort checkers, and a theorem prover called LP <ref> [GH93, Chapter 7] </ref>. The Larch/Smalltalk specification browser provides a powerful and sophisticated environment for writing and managing Larch/Smalltalk specifications, which is integrated with the Smalltalk-80 programming system. Larch/Smalltalk [CL93a] is a Larch interface specification language for Smalltalk. <p> However, the reuse of program modules requires adequate documentation | formal or informal [LC91, Coo92]. Larch/Smalltalk is a formal notation for specifying program modules in Smalltalk. It is a member of the Larch family of specification languages such as Larch/C <ref> [GH93, Chapter 5] </ref>, Larch/Modula3 [GH93, Chapter 6], and Larch/C ++ [LC92, CL93b]. In addition, it supports the notion of subtyping and inheritance of specification. The unit of specification is an abstract data type, which is implemented by one or more Smalltalk classes. <p> However, the reuse of program modules requires adequate documentation | formal or informal [LC91, Coo92]. Larch/Smalltalk is a formal notation for specifying program modules in Smalltalk. It is a member of the Larch family of specification languages such as Larch/C [GH93, Chapter 5], Larch/Modula3 <ref> [GH93, Chapter 6] </ref>, and Larch/C ++ [LC92, CL93b]. In addition, it supports the notion of subtyping and inheritance of specification. The unit of specification is an abstract data type, which is implemented by one or more Smalltalk classes. <p> In addition, it supports the notion of subtyping and inheritance of specification. The unit of specification is an abstract data type, which is implemented by one or more Smalltalk classes. The underlying abstract model of a type is specified equationally in the Larch Shared Language (LSL) <ref> [GH93, Chapter 4] </ref>, and the behavior of its methods is modeled as a relation between program states and specified by Hoare-style pre- and post-conditions [Hoa69]. A type can be a subtype of other types, called its supertypes. <p> An LSL trait denotes a theory in typed first-order logic with equality. A theory contains the trait's assertions, the conventional axioms of first-order logic, everything that follows from them, and nothing else. LSL provides a set of reusable traits in the form of LSL Handbook <ref> [GH93, Appendix A] </ref>. 1.2 Basics of Larch/Smalltalk Specification Browsers The Larch/Smalltalk specification browsers are opened from the ParcPlace Objectworks TM for Smalltalk system's main menu, called the Launcher. <p> For traits, fill in the semantic information (axioms). 4. Check. Check whether the current specification adequately captures the intended meaning and repeat previous steps until they converge. As specifications are developed, it is also necessary to evaluate them for certain properties such as consistency and completeness. The Larch Prover <ref> [GH93, Chapter 7] </ref> may be used to prove some of such properties.
Reference: [Gol84] <author> Adele Goldberg. </author> <title> Smalltalk-80: The Interactive Programming Environment. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1984. </year>
Reference-contexts: The system type browser is for viewing, entering, modifying, removing, and sort-checking Larch/Smalltalk specifications, where as the system trait browser is for browsing through LSL traits. Figure 4 shows both the system type browser and the system trait browser. Using the terminology of the Orange book <ref> [Gol84] </ref> and the more recent [LP90], a short description of the specification browsers are given here so that we can refer to them in the later sections. The look and functionality of the specification browsers are similar to the Smalltalk system class browsers [LP90, Chapter 4].
Reference: [GR83] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1983. </year>
Reference-contexts: In Section 3 and 4 we describe other useful features of the specification browsers. Appendix A lists all the menu items available from the specification browsers accompanied by short descriptions. 1.1 Larch/Smalltalk Object-oriented programming languages, such as Smalltalk <ref> [GR83] </ref>, help one to build reusable program modules. However, the reuse of program modules requires adequate documentation | formal or informal [LC91, Coo92]. Larch/Smalltalk is a formal notation for specifying program modules in Smalltalk.
Reference: [Gut77] <author> John Guttag. </author> <title> Abstract data types and the development of data structures. </title> <journal> Communications of the ACM, </journal> <volume> 20(6) </volume> <pages> 396-404, </pages> <month> June </month> <year> 1977. </year>
Reference-contexts: The trait provides us vocabulary (sort names and trait function names) to specify pre- and post-conditions of method specifications. A major concern in constructing traits is deciding what axioms are needed. The notion of sufficient-completeness is a helpful technique for writing traits <ref> [Gut77, GH78, LG86] </ref>. In a trait there is a distinguished sort, sometimes called the type of interest or data sort. For 2 In reality one could use the trait from the LSL Handbook ([GH93, Appendix A]). 13 example, the sort S in the SetTrait is the distinguished sort.
Reference: [Hoa69] <author> C. A. R. Hoare. </author> <title> An axiomatic basis for computer programming. </title> <journal> Communications of the ACM, </journal> <volume> 12(10) </volume> <pages> 576-583, </pages> <month> October </month> <year> 1969. </year>
Reference-contexts: The underlying abstract model of a type is specified equationally in the Larch Shared Language (LSL) [GH93, Chapter 4], and the behavior of its methods is modeled as a relation between program states and specified by Hoare-style pre- and post-conditions <ref> [Hoa69] </ref>. A type can be a subtype of other types, called its supertypes.
Reference: [LC91] <author> Gary T. Leavens and Yoonsik Cheon. </author> <title> Overview and specification of the built-in types in Little Smalltalk. </title> <type> Technical Report 91-22, </type> <institution> Iowa State University, Department of Computer Science, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: Appendix A lists all the menu items available from the specification browsers accompanied by short descriptions. 1.1 Larch/Smalltalk Object-oriented programming languages, such as Smalltalk [GR83], help one to build reusable program modules. However, the reuse of program modules requires adequate documentation | formal or informal <ref> [LC91, Coo92] </ref>. Larch/Smalltalk is a formal notation for specifying program modules in Smalltalk. It is a member of the Larch family of specification languages such as Larch/C [GH93, Chapter 5], Larch/Modula3 [GH93, Chapter 6], and Larch/C ++ [LC92, CL93b].
Reference: [LC92] <author> Gary T. Leavens and Yoonsik Cheon. </author> <title> Preliminary design of Larch/C++. </title> <editor> In U. Martin and J. Wing, editors, </editor> <booktitle> Proceedings of the First International Workshop on Larch, Workshops in Computing Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Larch/Smalltalk is a formal notation for specifying program modules in Smalltalk. It is a member of the Larch family of specification languages such as Larch/C [GH93, Chapter 5], Larch/Modula3 [GH93, Chapter 6], and Larch/C ++ <ref> [LC92, CL93b] </ref>. In addition, it supports the notion of subtyping and inheritance of specification. The unit of specification is an abstract data type, which is implemented by one or more Smalltalk classes.
Reference: [Lea91] <author> Gary T. Leavens. </author> <title> Modular specification and verification of object-oriented programs. </title> <journal> IEEE Software, </journal> <volume> 8(4) </volume> <pages> 72-80, </pages> <month> July </month> <year> 1991. </year> <month> 24 </month>
Reference-contexts: This in turn give us the freedom to use a behavioral notion of subtyping for Larch/Smalltalk. That is, each object of a subtype should behave like some object of each of its supertypes <ref> [Lea91, Ame91] </ref>. Larch/Smalltalk type specifications are organized according to this subtype relationship. Behavioral subtyping is not enforced but is more useful for organizing specification than other notions. Larch/Smalltalk also supports inheritance of specifications; a subtype can inherit specifications from its supertypes, e.g., instance method specifications and invariants.
Reference: [LG86] <author> Barbara Liskov and John Guttag. </author> <title> Abstraction and Specification in Program Development. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1986. </year>
Reference-contexts: The trait provides us vocabulary (sort names and trait function names) to specify pre- and post-conditions of method specifications. A major concern in constructing traits is deciding what axioms are needed. The notion of sufficient-completeness is a helpful technique for writing traits <ref> [Gut77, GH78, LG86] </ref>. In a trait there is a distinguished sort, sometimes called the type of interest or data sort. For 2 In reality one could use the trait from the LSL Handbook ([GH93, Appendix A]). 13 example, the sort S in the SetTrait is the distinguished sort. <p> That is, write equational axioms for each terms resulting from applying an observer or an extension to each combination of generators. Refer to <ref> [LG86] </ref> more details on this topic. "empty" and "insert", and observers are "include", "size", and "isEmpty". The extension is "delete". The trait was created by first editing previous definition and then accepting it using the &lt;operate&gt; menu of the text pane. Step 5.
Reference: [LP90] <author> Wilf R. LaLonde and John R. Pugh. </author> <title> Inside Smalltalk: Volume I. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1990. </year>
Reference-contexts: Figure 4 shows both the system type browser and the system trait browser. Using the terminology of the Orange book [Gol84] and the more recent <ref> [LP90] </ref>, a short description of the specification browsers are given here so that we can refer to them in the later sections. The look and functionality of the specification browsers are similar to the Smalltalk system class browsers [LP90, Chapter 4]. <p> The look and functionality of the specification browsers are similar to the Smalltalk system class browsers <ref> [LP90, Chapter 4] </ref>. The system type browser (see Figure 4) is divided into eight scrollable panes (or views) and two switch panes labeled instance and meta. The top four and bottom three are list panes, while the center one is a text pane. <p> It is brought up by pressing the right button (also called the blue button) of a three-buttoned mouse. When a browser window is deactivated or collapsed, the current selections are remembered and restored when the browser is reactivated or framed at some later time. Refer to Chapter 4 of <ref> [LP90] </ref> for details on the Smalltalk user interfaces. Appendix A gives short explanations all the &lt;operate&gt; menu items of each subwindow's of the specifications browser. <p> Appendix A gives short explanations all the &lt;operate&gt; menu items of each subwindow's of the specifications browser. An &lt;operate&gt; menu is a pop-up menu that allows a user to choose one of several actions to be performed on the contents of the selected pane (see Chapter 3 of <ref> [LP90] </ref>). It is opened by pressing the middle button (also called the yellow button) of a three-buttoned mouse. 2 A Guided Example In this section, we develop a simple Larch/Smalltalk specification to show how to use the Larch/Smalltalk specification browsers. <p> To enter a new type Set, we need to edit this template. Using the keyboard and the &lt;operate&gt; menu of the text pane, edit the template to replace dummy names with actual names. (Refer to Section 3.4 of <ref> [LP90] </ref> for details of editing text.) For example, typeName should be replaced by Set. Set will be parameterized with a type variable Elem which denotes the type of elements. And it will be a direct subtype of type Object. The used trait will be SetTrait, which will be defined later. <p> A new snapshot of the Smalltalk system image can be created either at any time during a session by selecting save from the Launcher, or when quitting from Smalltalk by making proper selection in the quit submenu of the Launcher (see Chapter 4 of <ref> [LP90] </ref>). However, a typical way of saving specifications is to store them to external files so that they can be subsequently read back into the system. This processes are known as filing-out and filing-in in Smalltalk jargon. <p> A text file containing Larch/Smalltalk or LSL specification as formatted by the file out can be subsequently read back into the system. The File List 3 is used to file in specification exactly the same way as one does with Smalltalk code (see Chapter 4 of <ref> [LP90] </ref>); that is, select the file in the list pane of a File List, then choose file in from the code pane's &lt;operate&gt; menu. <p> must choose update on the &lt;operate&gt; menu of type (or trait) category pane to reflect newly filed-in specifications. 3 A File List is a special Smalltalk system browser used to list the contents of a directory or file, edit a file, and create a new file (see Chapter 4 of <ref> [LP90] </ref>). It is opened from the Launcher. 18 3.2 Printing The menu entry print out also appears in each of the list pane of the system type browser (and the system trait browser).
Reference: [Win87] <author> Jeannette M. Wing. </author> <title> Writing Larch interface language specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 9(1) </volume> <pages> 1-24, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: The iterative nature of developing formal specification is well supported by the Larch/Smalltalk specification browsers | support for graphical user interfaces and interactive and incremental style of writing specifications. Writing Larch specifications can be broken down into several steps <ref> [Win87] </ref>: 1. Understand the problem. An analysis of the problem is often best done by first identifying important concepts of the problems that can be represented by sorts (types), then the important relationships between them. 2. Decide on the major abstractions.
References-found: 16

