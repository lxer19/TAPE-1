URL: http://www.cse.ucsc.edu/research/concurrent/papers/mmdbms98.ps
Refering-URL: http://www.cse.ucsc.edu/research/concurrent/reports/
Root-URL: http://www.cse.ucsc.edu
Email: randal@almaden.ibm.com  narang@almaden.ibm.com  
Title: Version Management and Recoverability for Large Object Data  
Author: Randal Burns Inderpal Narang 
Address: 650 Harry Rd., San Jose, CA 95120  650 Harry Rd., San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  IBM Almaden Research Center  
Abstract: We describe an architecture, based on the Datalink data type, in which large objects in a database are continuously available for read access and can be read and written through a file system interface. Additionally, this system does not relax version management, consistency and recov-erability guarantees, as with the BLOB data type. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Miklos Ajtai, Randal Burns, Ronald Fagin, Darrell Long, and Larry Stockmeyer. </author> <title> Compactly encoding arbitrary inputs with differential compression. </title> <journal> IBM Research: </journal> <note> In Preparation, </note> <year> 1997. </year>
Reference-contexts: Recently, efficient algorithms have been developed for delta encoding binary inputs at fine granularity <ref> [3, 1] </ref> and have been applied to file system backup and restore [2]. The semantics of updating a Datalink imply that two subsequent versions of the same file exist. Datalinks takes advantage of the presence of an older file version to compactly encode the backup of the new version. <p> The time required to perform backup is now proportional to the number of changed bytes, rather than the file size. It is noteworthy that these delta files, like un-encoded files, can be further reduced with standard file compression <ref> [1] </ref>. 7. Conclusions We have presented a system in which large object data may be placed under the control of database where it may be associated with arbitrarily complex metadata in a consistent fashion. At the same time, the data may be read and written through a file system interface.
Reference: [2] <author> Randal C. Burns and Darrell D. E. </author> <title> Long. Efficient distributed backup with delta compression. </title> <booktitle> In Proceedings of the 1997 I/O in Parallel and Distributed Systems (IOPADS'97), 17 November 1997, </booktitle> <address> San Jose, CA, USA, </address> <month> November </month> <year> 1997. </year>
Reference-contexts: For fine grained consistency and write sharing, backing up the file each time turns out to be prohibitively expensive. With a delta backup mechanism <ref> [2] </ref> that transmits only the modified bytes, a small portion of the entire file, backup time decreases and file availability increases. 6.1. Backup Semantics in Datalinks The Datalinker performs file backup when any link operation occurs. <p> Recently, efficient algorithms have been developed for delta encoding binary inputs at fine granularity [3, 1] and have been applied to file system backup and restore <ref> [2] </ref>. The semantics of updating a Datalink imply that two subsequent versions of the same file exist. Datalinks takes advantage of the presence of an older file version to compactly encode the backup of the new version. For example, a system updates its copy of linked file A 1 . <p> file system, the Datalinker will not compute a delta file. after creating n versions of file A, the backup server con-tains the following files: A 1 ; A 1 :A 2 ; A 2 :A 3 ; :::; A n1 :A n This storage sequence is a forward delta chain <ref> [2] </ref>. Delta chains are an optimally compact version storage method. However, this storage necessitates all dependent files to be available to restore a file. <p> The time required to restore a version is dependent upon the time to restore all of the intermediate versions. In general, restoration time grows linearly with the number of intermediate versions. There exist version storage methods that provide faster reconstruction in exchange for degraded file compression <ref> [2] </ref>, but these methods are either inappropriate for binary data or require the maintenance of additional files at the client. In Datalinks, the reconstruction of a file from its deltas occurs infrequently only for database restore.
Reference: [3] <author> Randal C. Burns and Darrell D. E. </author> <title> Long. A linear time, constant space differencing algorithm. </title> <booktitle> In Proceedings of the 1997 International Performance, Computing and Communications Conference (IPCCC'97), </booktitle> <month> Feb. </month> <pages> 5-7, </pages> <address> Tempe/Phoenix, Arizona, USA, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: Recently, efficient algorithms have been developed for delta encoding binary inputs at fine granularity <ref> [3, 1] </ref> and have been applied to file system backup and restore [2]. The semantics of updating a Datalink imply that two subsequent versions of the same file exist. Datalinks takes advantage of the presence of an older file version to compactly encode the backup of the new version. <p> In this case, the data to be backed up would grow as the product of the file size and the number of backups performed. Previous, experiments indicate that for weekly backups, one can expect a delta file to be 10 to 100 times smaller than the original file <ref> [3] </ref>. For our application, we expect even better compression as the time granularity of file modification is less than weekly. For general file update, the cooperating file system runs a delta compression algorithm [3] on its local versions of the linked and unlinked data. <p> one can expect a delta file to be 10 to 100 times smaller than the original file <ref> [3] </ref>. For our application, we expect even better compression as the time granularity of file modification is less than weekly. For general file update, the cooperating file system runs a delta compression algorithm [3] on its local versions of the linked and unlinked data. However, many types of data, such as newsfeeds and system logs, have append only semantics. These data have obvious delta files implicit from the modifications.
Reference: [4] <author> Judith R. Davis. Datalinks: </author> <title> Managing external data with DB2 universal database. </title> <address> http://www.software.ibm.com/- data/pubs/papers/datalink.html, </address> <month> August </month> <year> 1997. </year> <title> Prepared for the IBM Corporation by InfoIT, </title> <publisher> Inc., a Database Associates Company. </publisher>
Reference-contexts: 1. Introduction The Datalinks system and its associated Datalink data type have been developed at the IBM Almaden Research Center and implemented in IBM's DB/2 database system <ref> [4] </ref>. This system integrates the desirable elements from file systems and databases. Large object data can be stored in a database, i.e. a database system manages metadata, access control, consistency and integrity. At the same time, the data is stored on a cooperating file system.
Reference: [5] <author> B. Hwang, I. Jung, and S. Moon. </author> <title> Efficient storage management for large dynamic objects. </title> <booktitle> In Proceedings of the 20th EUROMICRO Conference, </booktitle> <month> September 94. </month>
Reference-contexts: Storing large object data greatly taxes the I/O and storage capabilities of existing databases. For this reason, the development of BLOB storage has lead to new research describing enhancements to buffer management and paging [11], improved database storage systems <ref> [5] </ref> and the need for fast networks [12]. All of this work points in one direction, to DBMSs that permit interrogation of object data without overutilizing database system resources. Datalinks provides these capabilities by storing object data externally in file systems and linking object data into databases. 3.
Reference: [6] <author> IBM. </author> <title> DATABASE 2 SQL Reference for Common Servers. Part No. </title> <publisher> S20H-4665-00. </publisher>
Reference-contexts: Alternatively, a DBMS manages data well, but may not be appropriate for the storage of large data objects. Many databases store object data using the Binary Large OBject (BLOB) data type <ref> [6] </ref>. BLOBs stores arbitrarily large objects in a database and allow an object to have complex metadata which may be interrogated using a general query interface. However, BLOBs do not provide an adequately efficient interface for accessing the contents of an object. <p> By separating the metadata and data management tasks associated with large object data, Datalinks exhibits the best features of both file systems and databases ease of access and a method to associate and interrogate complex meta-data. 4. Comparing the Datalink and BLOB Data Types BLOBs <ref> [6] </ref> differ from the linked files of Datalinks in that they are wholly contained within a database. It follows that the ability to associate and query complex meta-data with BLOBs is equally powerful to that of Datalinks.
Reference: [7] <author> P. Jackson. </author> <title> Unleashing the database. </title> <journal> Management Computing, </journal> <volume> 13(12), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: We conclude in x7. 2. Related Work The desire to access multimedia data with version control and recoverability guarantees created a need for large object storage in existing databases. The simplest solution to this problem creates a new binary large object (BLOB) type embedded in relational tables <ref> [7] </ref>. However, BLOBs present two significant problems: first, applications have neither semantic knowledge nor an interface to the contents of a BLOB, and, the management of large object data for import/export, update or logging prohibitively taxes system resources.
Reference: [8] <author> J. Martinez. </author> <title> The design of an extensible multimedia library for an OODBMS. </title> <booktitle> In Seventh International Workshop on Database and Expert Systems Applications (DEXA), </booktitle> <pages> pages 208213, </pages> <year> 1996. </year>
Reference-contexts: BLOBs provide their own functions for interrogation and applications may query this interface. In relational databases this is called type-extensibility [10, 14], also called the object-relational model. This type-extensibility or self-describing data is a feature inherent to object databases management systems (ODBMS) <ref> [13, 8] </ref>. In either case, this model for object interrogation is limited to published methods and therefore not general. Storing large object data greatly taxes the I/O and storage capabilities of existing databases.
Reference: [9] <author> Nelson Mattos, Jim Melton, and Jeff Rickey. </author> <title> Database language SQL Part 9: Management of external data (SQL/MED), </title> <month> June </month> <year> 1997. </year> <note> Available at ftp://jerry.ece.umassd.edu/isowg3/x3h2/1997docs/97-233.pdf. </note>
Reference-contexts: Datalinks provides these capabilities by storing object data externally in file systems and linking object data into databases. 3. Description of Datalinks The Datalinks system centers around a new data type called a Datalink <ref> [9] </ref> which associates external object data with a database (Figure 1). The Datalink makes an external reference to an object on a remote and cooperating file system, called a Datalinker.
Reference: [10] <author> M. Rennhackkamp. </author> <title> Extending relational DBMSs. DBMS, </title> <address> 10(13):456,48, </address> <month> December </month> <year> 1997. </year>
Reference-contexts: To address this problem, researchers and developers embed methods associated with the object in the database. BLOBs provide their own functions for interrogation and applications may query this interface. In relational databases this is called type-extensibility <ref> [10, 14] </ref>, also called the object-relational model. This type-extensibility or self-describing data is a feature inherent to object databases management systems (ODBMS) [13, 8]. In either case, this model for object interrogation is limited to published methods and therefore not general.
Reference: [11] <author> M. F. Riley, J. J. Feenan, Jr., J. L. Janosik, and T. K. Rengara-jan. </author> <title> The design of multimedia object support in DECrdb. </title> <journal> Digital Technical Journal, </journal> <volume> 5(2):5064, </volume> <year> 1993. </year>
Reference-contexts: Storing large object data greatly taxes the I/O and storage capabilities of existing databases. For this reason, the development of BLOB storage has lead to new research describing enhancements to buffer management and paging <ref> [11] </ref>, improved database storage systems [5] and the need for fast networks [12]. All of this work points in one direction, to DBMSs that permit interrogation of object data without overutilizing database system resources.
Reference: [12] <author> T. Sacks. </author> <title> BLOBs and the need for FDDI. </title> <journal> Telecommunications, </journal> <volume> 25(9), </volume> <year> 1991. </year>
Reference-contexts: Storing large object data greatly taxes the I/O and storage capabilities of existing databases. For this reason, the development of BLOB storage has lead to new research describing enhancements to buffer management and paging [11], improved database storage systems [5] and the need for fast networks <ref> [12] </ref>. All of this work points in one direction, to DBMSs that permit interrogation of object data without overutilizing database system resources. Datalinks provides these capabilities by storing object data externally in file systems and linking object data into databases. 3.
Reference: [13] <author> B. Sayrs. </author> <title> Architecting multimedia database systems. </title> <journal> Object Magazine, </journal> <volume> 6(12), </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: BLOBs provide their own functions for interrogation and applications may query this interface. In relational databases this is called type-extensibility [10, 14], also called the object-relational model. This type-extensibility or self-describing data is a feature inherent to object databases management systems (ODBMS) <ref> [13, 8] </ref>. In either case, this model for object interrogation is limited to published methods and therefore not general. Storing large object data greatly taxes the I/O and storage capabilities of existing databases.
Reference: [14] <author> M. Ubell and M. Olson. </author> <title> Embedding image query operations in an object-relational database management system. </title> <booktitle> In Proceedings of the SPIE The International Society for Optical Engineering, </booktitle> <pages> pages 197203, </pages> <year> 1995. </year>
Reference-contexts: To address this problem, researchers and developers embed methods associated with the object in the database. BLOBs provide their own functions for interrogation and applications may query this interface. In relational databases this is called type-extensibility <ref> [10, 14] </ref>, also called the object-relational model. This type-extensibility or self-describing data is a feature inherent to object databases management systems (ODBMS) [13, 8]. In either case, this model for object interrogation is limited to published methods and therefore not general.
References-found: 14

