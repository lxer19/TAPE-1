URL: http://ai.eecs.umich.edu/people/wrayre/pubs/aaai-96.ps.gz
Refering-URL: http://ai.eecs.umich.edu/people/wrayre/pubs.html
Root-URL: http://www.cs.umich.edu
Email: fwrayre,laird,rjonesg@umich.edu  
Title: Compilation of Non-Contemporaneous Constraints  
Author: Robert E. Wray, III and John E. Laird and Randolph M. Jones 
Address: 1101 Beal Ave. Ann Arbor, MI 48109-2110  
Affiliation: Artificial Intelligence Laboratory The University of Michigan  
Abstract: Hierarchical execution of domain knowledge is a useful approach for intelligent, real-time systems in complex domains. In addition, well-known techniques for knowledge compilation allow the reorganization of knowledge hierarchies into more efficient forms. However, these techniques have been developed in the context of systems that work in static domains. Our investigations indicate that it is not straightforward to apply knowledge compilation methods for hierarchical knowledge to systems that generate behavior in dynamic environments. One particular problem involves the compilation of non-contemporaneous constraints. This problem arises when a training instance dynamically changes during execution. After defining the problem, we analyze several theoretical approaches that address non-contemporaneous constraints. We have implemented the most promising of these alternatives within Soar, a software architecture for performance and learning. Our results demonstrate that the proposed solutions eliminate the problem in some situations and suggest that knowledge compilation methods are appropriate for interactive environments. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bresina, J.; Drummond, M.; and Kedar, S. </author> <year> 1993. </year> <title> Reactive, integrated systems pose new problems for machine learning. </title> <editor> In Minton, S., ed., </editor> <title> Machine Learning Methods for Planning. </title> <publisher> Morgan Kaufmann. </publisher> <pages> chapter 6, 159-195. </pages>
Reference-contexts: This guarantees that the execution will not use any goals that depend on outdated features of the environment. However, this means that reasoning must be restarted 1 Some systems make such relationships explicit. For example, the ERE architecture <ref> (Bresina, Drummond, & Kedar 1993) </ref> includes domain constraints, which specify all possible co-occurrences. every time the external environment changes. This can be time consuming, although as more reactive rules are learned, the need to generate goals decreases.
Reference: <author> Chien, S. A.; Gervasio, M. T.; and DeJong, G. F. </author> <year> 1991. </year> <title> On becoming decreasingly reactive: Learning to deliberate minimally. </title> <booktitle> In Proceedings of the Eighth International Workshop on Machine Learning, </booktitle> <pages> 288-292. </pages>
Reference: <author> DeJong, G., and Bennett, S. </author> <year> 1995. </year> <title> Extending classical planning to real-world execution with machine learning. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1153-1159. </pages>
Reference: <author> DeJong, G., and Mooney, R. </author> <year> 1986. </year> <title> Explantion-based learning: An alternative view. </title> <booktitle> Machine Learning 1(2) </booktitle> <pages> 145-176. </pages>
Reference-contexts: Many multi-level real-time systems approximate this general framework. Critical questions concern which reactive knowledge should be included and where such knowledge would come from. A promising answer is the dynamic compilation of reactive knowledge from the system's hierarchical knowledge. To date, knowledge compilation algorithms such as explanation-based learning (EBL) <ref> (DeJong & Mooney 1986) </ref> have been used to compile the results of off-line planning activities into control knowledge for faster execution at runtime.
Reference: <author> Doorenbos, R. </author> <year> 1994. </year> <title> Combining left and right unlinking for matching a large number of learned rules. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence (AAAI-94). </booktitle>
Reference-contexts: Rule-based systems are an attractive representation for reactive knowledge because it is possible to build new rules incrementally and add them to very large rule bases as the system is running <ref> (Doorenbos 1994) </ref>. Given this representation, we consider how a knowledge compilation process could work using EBL--like techniques. What we find is that a direct application of EBL to a straightforward domain theory can lead to complications in a dynamic domain.
Reference: <author> Erol, K.; Hendler, J.; and Nau, D. S. </author> <year> 1994. </year> <title> HTN planning: Complexity and expressivity. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> 1123-1128. </pages>
Reference-contexts: Higher levels can also include intermediate data structures that are not used at the primitive levels. This representation is very similar to that used in HTN planners <ref> (Erol, Hendler, & Nau 1994) </ref>. The difference is that in this approach all the necessary control knowledge is part of the domain theory.
Reference: <author> Georgeff, M., and Lansky, A. L. </author> <year> 1987. </year> <title> Reactive reasoning and planning. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> 677-682. </pages>
Reference: <author> Gervasio, M. T. </author> <year> 1994. </year> <title> An incremental learning approach for completeable planning. </title> <booktitle> In Proceedings of the Eleventh International Conference on Machine Learning, </booktitle> <pages> 78-86. </pages>
Reference: <author> Hanks, S.; Pollack, M.; and Cohen, P. R. </author> <year> 1993. </year> <title> Benchmarks, test beds, controlled experimentation and the design of agent architectures. </title> <journal> AI Magazine 14 </journal> <pages> 17-42. </pages>
Reference-contexts: For a task environment, we have developed the dynamic blocks world, a test bed <ref> (in the sense of Hanks, Pollack & Cohen 1993) </ref> that facilitates controlled experimentation while posing tasks that distill important properties of domains like flight control. Tasks in the test bed are similar to blocks world problems familiar in the planning literature. However, there are two key differences.
Reference: <author> Knoblock, C. A. </author> <year> 1994. </year> <title> Automatically generating abstractions for planning. </title> <booktitle> Artificial Intelligence 68 </booktitle> <pages> 243-302. </pages>
Reference: <author> Laird, J. E., and Rosenbloom, P. S. </author> <year> 1990. </year> <title> Integrating execution, planning, and learning in Soar for external environments. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> 1022-1029. </pages>
Reference: <author> Laird, J. E.; Newell, A.; and Rosenbloom, P. S. </author> <year> 1987. </year> <title> Soar: An architecture for general intelligence. </title> <booktitle> Artificial Intelligence 33 </booktitle> <pages> 1-64. </pages>
Reference-contexts: Our execution strategy demands a performance system with these features: 1) interacts responsively to an external environment; 2) represents and executes hierarchical knowledge; 3) operationalizes experience using a knowledge compilation mechanism. The Soar architecture <ref> (Laird, Newell, & Rosenbloom 1987) </ref> meets these demands.
Reference: <author> Mitchell, T. M.; Kellar, R. M.; and Kedar-Cabelli, S. T. </author> <year> 1986. </year> <title> Explantion-based generalization: A unifying view. </title> <booktitle> Machine Learning 1(1) </booktitle> <pages> 47-80. </pages>
Reference-contexts: Compilation of Hierarchical Knowledge Now we consider one knowledge compilation technique, EBL, for compiling hierarchical knowledge. EBL uses a domain theory to generate an explanation of why a training instance is an example of a goal concept <ref> (Mitchell, Kellar, & Kedar-Cabelli 1986) </ref>. It then com piles the explanation into a representation that satisfies appropriate operationality criteria. In our case, an explanation is a trace of the reasoning generated using the domain theory for a given level in the hierarchy.
Reference: <author> Mitchell, T. M. </author> <year> 1990. </year> <title> Becoming increasingly reactive. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> 1051-1058. </pages>
Reference-contexts: This requires no further overhead for tracking knowledge dependencies than an execution system would already use for matching rules. This approach has been demonstrated in Theo-Agent <ref> (Mitchell 1990) </ref>. However, eliminating all persistence means that the intelligent agent can have no memory. Suppose, for example, that the flight controller received a radio message to come to a particular heading.
Reference: <author> Pearson, D. J.; Huffman, S. B.; Willis, M. B.; Laird, J. E.; and Jones, R. M. </author> <year> 1993. </year> <title> A symbolic solution to intelligent real-time control. </title> <booktitle> Robotics and Autonomous Systems 11 </booktitle> <pages> 279-291. </pages>
Reference-contexts: The hierarchy of goals develops dynamically, in response to goals higher in the hierarchy as well as to changes in the environment, but the task is executed without search. This style of knowledge representation has been used for both stick-level control of a simulated aircraft <ref> (Pearson et al. 1993) </ref> and higher-level control of a tactical flight simulator (Tambe et al. 1995) using 400 to 3500 rules and from five to ten levels of goals. We will 1. IF NotEqual (Heading, GoalHeading) THEN CreateGoal (ACHIEVE-HEADING) 2.
Reference: <author> Rosenbloom, P., and Laird, J. </author> <year> 1986. </year> <title> Mapping explanation-based generalization onto Soar. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> 561-567. </pages>
Reference-contexts: Specifically, Soar has been applied to a number of different external domains using hierarchical, procedural knowledge (Laird & Rosenbloom 1990; Pearson et al. 1993; Tambe et al. 1995) and Soar's learning mechanism, chunking, has been described as a form of explanation-based generalization <ref> (Rosenbloom & Laird 1986) </ref>. For a task environment, we have developed the dynamic blocks world, a test bed (in the sense of Hanks, Pollack & Cohen 1993) that facilitates controlled experimentation while posing tasks that distill important properties of domains like flight control.
Reference: <author> Sacerdoti, E. D. </author> <year> 1974. </year> <title> Planning in a hierarchy of abstraction spaces. </title> <booktitle> Artificial Intelligence 5 </booktitle> <pages> 115-135. </pages>
Reference: <author> Tambe, M.; Johnson, W. L.; Jones, R. M.; Koss, F.; Laird, J. E.; Rosenbloom, P. S.; and Schwamb, K. </author> <year> 1995. </year> <title> Intelligent agents for interactive simulation environments. </title> <journal> AI Magazine 16(1) </journal> <pages> 15-39. </pages>
Reference-contexts: This style of knowledge representation has been used for both stick-level control of a simulated aircraft (Pearson et al. 1993) and higher-level control of a tactical flight simulator <ref> (Tambe et al. 1995) </ref> using 400 to 3500 rules and from five to ten levels of goals. We will 1. IF NotEqual (Heading, GoalHeading) THEN CreateGoal (ACHIEVE-HEADING) 2. IF Goal (ACHIEVE-HEADING) AND LeftOf (Heading, GoalHeading) THEN Execute (ROLL (right)) 3.
References-found: 18

