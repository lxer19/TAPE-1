URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/EUConstraint.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Email: farthur,tvdwg@cs.kun.nl  
Title: Fact Orientation in Complex Object Role Modelling Techniques Fact Orientation in Complex Object Role Modelling
Author: A.H.M. ter Hofstede and Th.P. van der Weide A.H.M. ter Hofstede and Th.P. van der Weide. T.A. Halpin and R. Meersman, 
Date: July 1994.  
Note: Published as:  editors, Proceedings of the First International Conference on Object-Role Modelling (ORM-1), pages 45-59, Townsville, Australia,  
Address: Toernooiveld, NL-6525 ED Nijmegen, The Netherlands  
Affiliation: Department of Information Systems, University of Nijmegen  
Abstract: A number of proposals have been made to extend conventional data modelling techniques with concepts for modelling complex object structures, such as power types, sequence types and schema types. A drawback of the introduction of such new concepts is that the original simplicity of a single populatable concept is lost. In this paper we will show how a new kind of constraint, the extensional uniqueness constraint, can overcome this problem. Another advantage of this constraint is that it enables a less rigid identification schema. The usefulness of this new constraint is demonstrated in some concrete modelling situations.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and R. Hull. </author> <title> IFO: A Formal Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 525-565, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: Therefore, a decision criterion as in the case of specialisation (the subtype defining rule) is not necessary. Furthermore, properties are inherited "upward" in a 3 generalisation hierarchy instead of "downward", which is the case for specialisation (see also <ref> [1] </ref>). This also implies that the identification of a generalised object type depends on the identification of its specifiers. constructed by some function (say f ) from simpler formulas.
Reference: [2] <author> P. van Bommel, A.H.M. ter Hofstede, and Th.P. van der Weide. </author> <title> Semantics and verification of object-role models. </title> <journal> Information Systems, </journal> <volume> 16(5) </volume> <pages> 471-495, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: type, not only the extensional uniqueness constraint is needed, but also the definitions of identification (section 4), type relatedness (section 5) and populations (section 6) have to be adapted. 2 Introduction to PSM The object-role data modelling technique PSM is an extension of PM (a formalisation of NIAM described in <ref> [2] </ref>). As additional concepts, PSM offers generalisation, power types, sequence types and schema types. In this section we restrict ourselves to a (short) description of those parts of PSM that are necessary for a complete understanding of the rest of this paper. <p> As stated, ~(t ) represents a derived fact type. Derived fact types are specified by means of relational operators. To this end, a relational algebra for PSM has been defined (see e.g. <ref> [2, 12] </ref>). On each relational expression two functions can be applied, Val and Schema. The expression Val [[r]] (Pop) denotes the values that occur in relational expression r in population Pop. The expression Schema (r) yields the schema of relational expression r, a set of predicators.
Reference: [3] <author> M.L. Brodie. </author> <title> On the development of data models. In M.L. </title> <editor> Brodie, J. Mylopoulos, and J.W. Schmidt, editors, </editor> <booktitle> On Conceptual Modelling, Perspectives from Artificial Intelligence, Databases and Programming Languages, </booktitle> <pages> pages 19-48. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: Power 2 typing corresponds to the notion of grouping as present in the IFO data model ([1]), the notion of user-controllable grouping classes in SDM ([11]) and the notion of association in <ref> [3] </ref>. A simple example of the application of power types can be found in the Convoy Problem ([11]), depicted in figure 1. In this diagram, the object type Convoy is a power type with element type Ship.
Reference: [4] <editor> J.N. Crossley, C.J. Ash, C.J. Brickhill, J.C. Stillwell, and N.H. Williams. </editor> <publisher> What is mathematical logic? Oxford University Press, Oxford, </publisher> <address> United Kingdom, </address> <year> 1972. </year>
Reference-contexts: of this information structure, denoted as Pop j= extuniq (fqg) iff: 8 b [fp : x; q : bg 2 Pop (R) () fp : y; q : bg 2 Pop (R)] ) x = y Note the similarity with the Axiom of Extensionality of classic set theory (see e.g. <ref> [4] </ref>): 8 z [z 2 x () z 2 y] ) x = y A population of fact type R in figure 8 that is excluded by the extensional uniqueness constraint is e.g.: A power type A with as element type B can now be modelled as in figure 8 except
Reference: [5] <author> O.M.F. De Troyer, R. Meersman, and P. Verlinden. </author> <title> RIDL* on the CRIS Case: A Workbench for NIAM. </title> <editor> In T.W. Olle, A.A. Verrijn-Stuart, and L. Bhabuta, editors, </editor> <booktitle> Computerized Assistance during the Information Systems Life Cycle, </booktitle> <pages> pages 375-459, </pages> <address> Amsterdam, The Netherlands, </address> <year> 1988. </year> <month> North-Holland/IFIP. </month>
Reference-contexts: Many approaches to conceptual modelling of the data perspective exist. A well established class of conceptual data modelling techniques are the Object-Role Modelling techniques. Examples of Object-Role Modelling techniques are NIAM [18], FORM [10], BRM <ref> [5] </ref> and PSM [14]. Although Object-Role Modelling techniques are not the most popular techniques employed for data modelling, they have advantages over other, more popular, approaches (see e.g. [7, 8, 10]). Some Object Role Modelling techniques contain constructors for complex objects such as sets and sequences. <p> Specialisation is to be applied when certain facts are to be recorded for specific instances of an object type only. Each specialisation network has a unique top, the so-called pater familias (see <ref> [5] </ref>). For an in-depth treatment of specialisation we refer to [9]. 2.1.6 Generalisation Generalisation is a mechanism that allows for the creation of new object types by uniting existing object types. Contrary to what its name suggests, generalisation is not the inverse of specialisation.
Reference: [6] <author> E.D. Falkenberg and Th.P. van der Weide. </author> <title> Formal Description of the TOP Model. </title> <type> Technical Report 88-01, </type> <institution> Department of Information Systems, University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1988. </year>
Reference-contexts: In NIAM, FORM and PSM, a relationship type is referred to as a fact type. A fact type consists of a number of roles denoting the way object types participate in that fact type. A theoretical term for role, is predicator (a term first introduced in <ref> [6] </ref>). Both the term role and the term predicator are used throughout this paper. In the graphical representation of fact types in NIAM, FORM and PSM, roles seem to be ordered as a consequence of the graphical layout.
Reference: [7] <author> T.A. Halpin. </author> <title> A logical analysis of information systems: static aspects of the data-oriented perspective. </title> <type> PhD thesis, </type> <institution> University of Queensland, Brisbane, Australia, </institution> <year> 1989. </year>
Reference-contexts: Examples of Object-Role Modelling techniques are NIAM [18], FORM [10], BRM [5] and PSM [14]. Although Object-Role Modelling techniques are not the most popular techniques employed for data modelling, they have advantages over other, more popular, approaches (see e.g. <ref> [7, 8, 10] </ref>). Some Object Role Modelling techniques contain constructors for complex objects such as sets and sequences. In this paper, focus is on the concept of set type, or power type in PSM terminology.
Reference: [8] <author> T.A. Halpin. </author> <title> Fact-oriented schema optimization. In A.K. </title> <editor> Majumdar and N. Prakash, editors, </editor> <booktitle> Proceedings of the International Conference on Information Systems and Management of Data (CISMOD 92), </booktitle> <pages> pages 288-302, </pages> <address> Bangalore, India, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Examples of Object-Role Modelling techniques are NIAM [18], FORM [10], BRM [5] and PSM [14]. Although Object-Role Modelling techniques are not the most popular techniques employed for data modelling, they have advantages over other, more popular, approaches (see e.g. <ref> [7, 8, 10] </ref>). Some Object Role Modelling techniques contain constructors for complex objects such as sets and sequences. In this paper, focus is on the concept of set type, or power type in PSM terminology.
Reference: [9] <author> T.A. Halpin, J. Harding, and C-H. Oh. </author> <title> Automated Support for Subtyping. </title> <editor> In B. Theodoulidis and A. Sutcliffe, editors, </editor> <booktitle> Proceedings of the Third Workshop on the Next Generation of CASE Tools, </booktitle> <pages> pages 99-113, </pages> <address> Manchester, United Kingdom, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Specialisation is to be applied when certain facts are to be recorded for specific instances of an object type only. Each specialisation network has a unique top, the so-called pater familias (see [5]). For an in-depth treatment of specialisation we refer to <ref> [9] </ref>. 2.1.6 Generalisation Generalisation is a mechanism that allows for the creation of new object types by uniting existing object types. Contrary to what its name suggests, generalisation is not the inverse of specialisation.
Reference: [10] <author> T.A. Halpin and M.E. Orlowska. </author> <title> Fact-oriented modelling for data analysis. </title> <journal> Journal of Information Systems, </journal> <volume> 2(2) </volume> <pages> 97-119, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Usually, two perspectives are distinguished at the conceptual level, the data and the process perspective. Many approaches to conceptual modelling of the data perspective exist. A well established class of conceptual data modelling techniques are the Object-Role Modelling techniques. Examples of Object-Role Modelling techniques are NIAM [18], FORM <ref> [10] </ref>, BRM [5] and PSM [14]. Although Object-Role Modelling techniques are not the most popular techniques employed for data modelling, they have advantages over other, more popular, approaches (see e.g. [7, 8, 10]). Some Object Role Modelling techniques contain constructors for complex objects such as sets and sequences. <p> Examples of Object-Role Modelling techniques are NIAM [18], FORM [10], BRM [5] and PSM [14]. Although Object-Role Modelling techniques are not the most popular techniques employed for data modelling, they have advantages over other, more popular, approaches (see e.g. <ref> [7, 8, 10] </ref>). Some Object Role Modelling techniques contain constructors for complex objects such as sets and sequences. In this paper, focus is on the concept of set type, or power type in PSM terminology.
Reference: [11] <author> M. Hammer and D. McLeod. </author> <title> Database Description with SDM: A Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(3) </volume> <pages> 351-386, </pages> <month> September </month> <year> 1981. </year>
Reference: [12] <author> A.H.M. ter Hofstede. </author> <title> Information Modelling in Data Intensive Domains. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: In this section we restrict ourselves to a (short) description of those parts of PSM that are necessary for a complete understanding of the rest of this paper. For an in-depth treatment of PSM refer to [14], [13] or <ref> [12] </ref>. 2.1 Informal introduction to PSM 2.1.1 Label types, entity types and fact types In many conceptual data modelling techniques, a distinction exists between objects that can be represented directly (concrete objects) and objects without that property (abstract objects). <p> As a result, each instance of object type Convoy is a set of instances of Ship. Convoys are identified by their constituent ships, whereas ships are identified by a Ship-code, which is a label type. More realistic examples of power types can be found in <ref> [12] </ref>. 2.1.3 Sequence types Sequence types can be compared to power types. The differences are that, in the case of sequence types, the ordering of elements is important and elements may occur more than once. <p> In this paper the only relevant type of constraint is the uniqueness constraint. For a complete treatment of the syntax and the semantics of the uniqueness constraint in the context of PM and PSM we refer to [23] and <ref> [12] </ref>. In this section only a synopsis is given by means of some examples. The semantics of the uniqueness constraint in PSM is determined by means of the ~ operator. A uniqueness constraint t is a nonempty set of predicators, i.e. t P ^ t 6= ?. <p> As stated, ~(t ) represents a derived fact type. Derived fact types are specified by means of relational operators. To this end, a relational algebra for PSM has been defined (see e.g. <ref> [2, 12] </ref>). On each relational expression two functions can be applied, Val and Schema. The expression Val [[r]] (Pop) denotes the values that occur in relational expression r in population Pop. The expression Schema (r) yields the schema of relational expression r, a set of predicators. <p> well as all its supertypes are structurally identifiable: [IDT3] spec (x) ^ 8 y2O [x Spec y _ x Dep y ) Identifiable (y)] ` Identifiable (x) where x Dep y expresses that y is an object type needed for the evaluation of the subtype defining rule of x (see <ref> [12] </ref>) and spec (x) indicates whether x is a subtype. A generalised entity type inherits its identification from some of its specifiers.
Reference: [13] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal definition of a conceptual language for the description and manipulation of information models. </title> <journal> Information Systems, </journal> <volume> 18(7) </volume> <pages> 489-523, </pages> <year> 1993. </year>
Reference-contexts: In this section we restrict ourselves to a (short) description of those parts of PSM that are necessary for a complete understanding of the rest of this paper. For an in-depth treatment of PSM refer to [14], <ref> [13] </ref> or [12]. 2.1 Informal introduction to PSM 2.1.1 Label types, entity types and fact types In many conceptual data modelling techniques, a distinction exists between objects that can be represented directly (concrete objects) and objects without that property (abstract objects). <p> The set of natural numbers INI has to be one of the sorts of the many-sorted algebra D. This algebra is not important for this example and is therefore omitted. 2 For information structures a number of axioms are defined (see <ref> [13] </ref>). A concept that will be of importance in the rest of this paper is the concept of root entity type. A root entity type is an entity type that is neither a subtype nor a generalised object type. The set of root entity types is denoted as Q. <p> Formally, Pop is a mapping Pop : O ! fin (), where is the set of instances that can occur in populations of information structures. For a definition of and a complete treatment of the set of population rules, we refer to <ref> [13] </ref>. The only two population rules that deserve some extra attention in the context of this paper are the Root Entity Type Rule and the Conformity Rule. <p> As examples consider figures 9 and 10. In both cases, root entity type Convoy can be identified via entity type Ship. Conceivably, a particular root entity type e could have several identificators. To facilitate the denotation of entities (see <ref> [13] </ref>), the choice for one of the identificators should be explicitly recorded in PSM schemata. This is achieved by means of object type formulation rules (see e.g. [22]). <p> In this section, this is formalised in the concept of type relatedness: only type related object types may have values in common. Again, the restriction to simple PSM schemata is made. Type relatedness plays an important role in query optimization <ref> [13] </ref>. Formally, type relatedness is captured by a binary relation ~ on O. Two object types are type related if and only if this can be proved from a number of derivation rules.
Reference: [14] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Many approaches to conceptual modelling of the data perspective exist. A well established class of conceptual data modelling techniques are the Object-Role Modelling techniques. Examples of Object-Role Modelling techniques are NIAM [18], FORM [10], BRM [5] and PSM <ref> [14] </ref>. Although Object-Role Modelling techniques are not the most popular techniques employed for data modelling, they have advantages over other, more popular, approaches (see e.g. [7, 8, 10]). Some Object Role Modelling techniques contain constructors for complex objects such as sets and sequences. <p> As additional concepts, PSM offers generalisation, power types, sequence types and schema types. In this section we restrict ourselves to a (short) description of those parts of PSM that are necessary for a complete understanding of the rest of this paper. For an in-depth treatment of PSM refer to <ref> [14] </ref>, [13] or [12]. 2.1 Informal introduction to PSM 2.1.1 Label types, entity types and fact types In many conceptual data modelling techniques, a distinction exists between objects that can be represented directly (concrete objects) and objects without that property (abstract objects). <p> From the schema of figure 2 it is clear that instances from the object type Formula inherit the structure from the specifier from which they originate (Variable or f). For an in-depth discussion of generalisation we refer to <ref> [14] </ref>. 2.2 Information structures In this section the formal syntax of PSM schemata without constraints is briefly outlined. A PSM schema without constraints is referred to as an information structure. An information structure is a structure consisting of the following basic components: 1. <p> Type relatedness plays an important role in query optimization [13]. Formally, type relatedness is captured by a binary relation ~ on O. Two object types are type related if and only if this can be proved from a number of derivation rules. The following derivation rules, taken from <ref> [14] </ref>, are valid for simple PSM schemata: 13 [T1] ` x ~ x [T3] u (x) = u (y) ^ y ~ z ` x ~ z The rule for power types in [14], stating that two power types are type related iff their element types are type related, is omitted. <p> The following derivation rules, taken from <ref> [14] </ref>, are valid for simple PSM schemata: 13 [T1] ` x ~ x [T3] u (x) = u (y) ^ y ~ z ` x ~ z The rule for power types in [14], stating that two power types are type related iff their element types are type related, is omitted. As in our approach power types are translated to root entity types, we need a new rule dealing with root entity types.
Reference: [15] <author> R. Hull and R. King. </author> <title> Semantic Database Modelling: Survey, Applications and Research Issues. </title> <journal> Computing Surveys, </journal> <volume> 19(3) </volume> <pages> 201-260, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: An instance of a power type is identified by its elements, just as a set is identified by its elements in set theory (axiom of extensionality), see also <ref> [15] </ref>. Power 2 typing corresponds to the notion of grouping as present in the IFO data model ([1]), the notion of user-controllable grouping classes in SDM ([11]) and the notion of association in [3].
Reference: [16] <author> A. Lew. </author> <title> Computer Science: A Mathematical Introduction. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference-contexts: This subject is addressed in section 4. A more complex situation is the situation in which several predicators of the same fact type are involved in an extensional uniqueness constraint. As a concrete example consider figure 11. Multisets (see e.g. <ref> [16] </ref>), sometimes referred to as bags (see e.g. [19]), are completely characterized 9 by their elements and their respective occurrence frequencies. This is expressed by the extensional uniqueness constraint.
Reference: [17] <author> D. Maier. </author> <title> The Theory of Relational Databases. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1988. </year>
Reference-contexts: A disadvantage of this approach is that algebraic operators lack useful properties as commutativity and associativity. The modern approach is to use the mapping mechanism to describe relations, the so-called mapping oriented approach, see also <ref> [17] </ref>. In PSM a fact type is therefore considered to be a set of predicators. <p> The operator is the usual projection operator, allowing predicators to be renamed <ref> [17] </ref>. As an example of the application of this rule consider figure 15. In this schema root entity type A is identified via the sequence of predicators hq; si (i.e. Ident (A) = hq; si), while root entity type B is identified via the sequence of predicators hu; wi (i.e.
Reference: [18] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference-contexts: Usually, two perspectives are distinguished at the conceptual level, the data and the process perspective. Many approaches to conceptual modelling of the data perspective exist. A well established class of conceptual data modelling techniques are the Object-Role Modelling techniques. Examples of Object-Role Modelling techniques are NIAM <ref> [18] </ref>, FORM [10], BRM [5] and PSM [14]. Although Object-Role Modelling techniques are not the most popular techniques employed for data modelling, they have advantages over other, more popular, approaches (see e.g. [7, 8, 10]). Some Object Role Modelling techniques contain constructors for complex objects such as sets and sequences. <p> Although the concept of power type is a useful one from the view-point of conceptual modelling, the original simplicity of the fact-oriented approach is lost. Besides fact types, power types have also become populatable object types. This introduces for example update problems <ref> [18] </ref>. In this paper we demonstrate that power types can also be modelled by the use of a new type of constraint, the extensional uniqueness constraint. The formal semantics of this constraint type, 1 and examples of its use, are presented in section 3. <p> The gap between concrete and abstract object types can only be crossed by special binary relationship types between label types and entity types, called bridge types in [24] and reference types in <ref> [18] </ref>. Identification deals with the question whether instances of object types can be denoted. This includes determining whether each entity can be denoted in terms of one or more labels. Identification is discussed in section 4. One of the key concepts in data modelling is the concept of relationship type.
Reference: [19] <author> H. Partsch. </author> <title> Specification and Transformation of Programs a Formal Approach to Software Development. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1990. </year>
Reference-contexts: This subject is addressed in section 4. A more complex situation is the situation in which several predicators of the same fact type are involved in an extensional uniqueness constraint. As a concrete example consider figure 11. Multisets (see e.g. [16]), sometimes referred to as bags (see e.g. <ref> [19] </ref>), are completely characterized 9 by their elements and their respective occurrence frequencies. This is expressed by the extensional uniqueness constraint.
Reference: [20] <author> J.L. Peterson. </author> <title> Petri Net Theory and the Modelling of Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewoods Cliffs, New Jersey, </address> <year> 1981. </year>
Reference-contexts: Consider for example figure 12. In this figure, part of the metamodel of elementary Petri nets (see e.g. <ref> [21, 20] </ref>) is depicted. Petri nets can be considered bipartite directed multigraphs. Places can be connected via multiple edges to transitions. A marked net is a Petri net where tokens are assigned to places.
Reference: [21] <author> W. Reisig. </author> <title> Petri Nets: An Introduction. </title> <booktitle> EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1985. </year>
Reference-contexts: Consider for example figure 12. In this figure, part of the metamodel of elementary Petri nets (see e.g. <ref> [21, 20] </ref>) is depicted. Petri nets can be considered bipartite directed multigraphs. Places can be connected via multiple edges to transitions. A marked net is a Petri net where tokens are assigned to places.
Reference: [22] <author> H. van der Lek. </author> <title> On the Structure of an Information Grammar. </title> <editor> In G.M. Nijssen, editor, </editor> <booktitle> Proceedings of NIAM-ISDM. </booktitle> <publisher> NIAM-GUIDE, </publisher> <month> September </month> <year> 1993. </year> <month> 16 </month>
Reference-contexts: Conceivably, a particular root entity type e could have several identificators. To facilitate the denotation of entities (see [13]), the choice for one of the identificators should be explicitly recorded in PSM schemata. This is achieved by means of object type formulation rules (see e.g. <ref> [22] </ref>). An object type formulation rule states how object types are verbalized and as such is a grammar rule, containing predicators as syntactic categories. From this rule the identificator and an ordering of its constituent predicators is obtained.
Reference: [23] <author> Th.P. van der Weide, A.H.M. ter Hofstede, and P. van Bommel. Uniquest: </author> <title> Determining the Semantics of Complex Uniqueness Constraints. </title> <journal> The Computer Journal, </journal> <volume> 35(2) </volume> <pages> 148-156, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: In this paper the only relevant type of constraint is the uniqueness constraint. For a complete treatment of the syntax and the semantics of the uniqueness constraint in the context of PM and PSM we refer to <ref> [23] </ref> and [12]. In this section only a synopsis is given by means of some examples. The semantics of the uniqueness constraint in PSM is determined by means of the ~ operator. A uniqueness constraint t is a nonempty set of predicators, i.e. t P ^ t 6= ?.
Reference: [24] <author> J.J.V.R. Wintraecken. </author> <title> The NIAM Information Analysis Method: Theory and Practice. </title> <publisher> Kluwer, </publisher> <address> Deventer, The Netherlands, </address> <year> 1990. </year> <month> 17 </month>
Reference-contexts: The gap between concrete and abstract object types can only be crossed by special binary relationship types between label types and entity types, called bridge types in <ref> [24] </ref> and reference types in [18]. Identification deals with the question whether instances of object types can be denoted. This includes determining whether each entity can be denoted in terms of one or more labels. Identification is discussed in section 4.
References-found: 24

