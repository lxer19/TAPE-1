URL: ftp://ftp.cs.bham.ac.uk/pub/tech-reports/1997/CSRP-97-16.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Fitness Causes Bloat: Mutation  
Author: W. B. Langdon and R. Poli 
Address: B15 2TT, UK  
Affiliation: School of Computer Science, The University of Birmingham, Birmingham  
Note: Submitted to Late-Breaking Papers at the Genetic Programming 1997 Conference, J. R. Koza (ed)  
Pubnum: Technical Report: CSRP-97-16  
Email: fW.B.Langdon,R.Polig@cs.bham.ac.uk  
Phone: Tel: +44 (0) 121 414 4791, Fax: +44 (0) 121 414 4281  
Date: 21 May 1997  
Web: http://www.cs.bham.ac.uk/~wbl, ~rmp  
Abstract: Comparison between runs with and without fitness selection pressure, backed by Price's Theorem, shows the tendency for solutions to grow in size is caused by fitness based selection. We argue that such growth is inherent in using a fixed evaluation function with a discrete but variable length representation. With simple static evaluation search converges to mainly finding trial solutions with the same fitness as existing trial solutions. In general variable length allows many more long representations of a given solution than short ones. Thus in search (without a length bias) we expect longer representations to occur more often and so representation length to tend to increase. I.e. fitness based selection leads to bloat.
Abstract-found: 1
Intro-found: 1
Reference: [ Altenberg, 1995 ] <author> Lee Altenberg. </author> <title> The Schema Theorem and Price's Theorem. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, 1995. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: More formally Price's theorem applies (provided length and genetic operators are uncorrelated) since representation length is a measurement function of the genotype <ref> [ Altenberg, 1995, page 28 ] </ref> . If it held exactly a plot of covariance vs. change in mean length would be a straight line (assuming z is constant).
Reference: [ Angeline, 1994 ] <author> Peter John Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kinn-ear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle>
Reference-contexts: These can consume the bulk of the available machine resources and by "clogging up" the population may prevent GP from effectively searching for better programs. On the other hand <ref> [ Angeline, 1994, page 84 ] </ref> quotes results from fixed length GAs in favour of representations which include introns, to argue we should "not ... impede this emergent property [i.e. introns] as it may be crucial to the successful development of genetic programs".
Reference: [ Blickle and Thiele, 1994 ] <author> Tobias Blickle and Lothar Thiele. </author> <title> Genetic programming and redundancy. </title> <editor> In J. Hopf, editor, </editor> <booktitle> Genetic Algorithms within the Framework of Evolutionary Computation (Workshop at KI-94, Saarbrucken), </booktitle> <year> 1994. </year> <institution> Max-Planck-Institut fur In-formatik (MPI-I-94-241). </institution>
Reference: [ Blickle, 1996 ] <author> Tobias Blickle. </author> <title> Theory of Evolutionary Algorithms and Application to System Synthesis. </title> <type> PhD thesis, </type> <institution> Swiss Federal Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: The third method is to tailor the genetic operations. [ Sims, 1993, page 469 ] uses several mutation operators 7 10 of 50 normal runs. but adjusts their frequencies so a "decrease in complexity is slightly more probable than an increase". <ref> [ Blickle, 1996 ] </ref> suggests targeting genetic operations at redundant code. This is seldom used, perhaps due to the complexity of identifying redundant code. [ Soule et al., 1996 ] showed bloat continuing despite their targeted genetic operations. Possibly this was because of the difficulty of reliably detecting introns.
Reference: [ Gathercole and Ross, 1994 ] <author> Chris Gathercole and Peter Ross. </author> <title> Dynamic training subset selection for supervised learning in genetic programming. </title> <editor> In Yuval Davidor, Hans-Paul Schwefel, and Reinhard Manner, editors, </editor> <booktitle> Parallel Problem Solving from Nature III, </booktitle> <year> 1994. </year>
Reference-contexts: In complex problems it may not be possible to test every solution on every aspect of the problem and some form of dynamic selection of test cases may be required <ref> [ Gathercole and Ross, 1994 ] </ref> . For example in some cases co-evolution has been claimed to be beneficial to GP.
Reference: [ Gathercole and Ross, 1996 ] <author> Chris Gathercole and Peter Ross. </author> <title> An adverse interaction between crossover and restricted tree depth in genetic programming. </title> <editor> In John R. Koza, etal, editors, </editor> <booktitle> Genetic Programming 1996. </booktitle> <pages> 8 </pages>
Reference-contexts: Means of 50 runs. 6.2 Three Ways to Control Bloat Three methods of controlling bloat have been suggested. Firstly, and most widely used (e.g. in these experiments), is to place a universal upper bound either on tree depth [ Koza, 1992 ] or program length. ( <ref> [ Gathercole and Ross, 1996; Langdon and Poli, 1997a ] </ref> discuss unexpected problems with this approach).
Reference: [ Haynes, 1996 ] <author> Thomas Haynes. </author> <title> Duplication of coding segments in genetic programming. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 344-349, </pages> <address> Portland, OR, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: This may be 6 removed halfway through. Means of 50 runs. of 50 runs. especially important where fitness criteria are dynamic. A change in circumstance may make it advantageous to execute genetic material which had previously been hidden in an intron. <ref> [ Haynes, 1996 ] </ref> shows an example where a difficult GP representation is improved by deliberately inserting duplicates of evolved code.
Reference: [ Iba et al., 1994 ] <author> Hitoshi Iba, Hugo de Garis, and Taisuke Sato. </author> <title> Genetic programming using a minimum description length principle. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <year> 1994. </year>
Reference: [ Koza, 1992 ] <editor> John R. Koza. </editor> <booktitle> Genetic Programming: On the Programming of Computers by Natural Selection. </booktitle>
Reference-contexts: In GP this has become known as bloat. 3 The Artificial Ant Problem The artificial ant problem is described in <ref> [ Koza, 1992, pages 147-155 ] </ref> . It is a well studied problem and was chosen as it has a simple fitness function. Briefly the problem is to devise a program which can successfully navigate an artificial ant along a twisting trail on a square 32 fi 32 toroidal grid. <p> On each version of the problem 50 independent runs were conducted. Note in these experiments we allow the evolved programs to be far bigger than required to solve the problem. For example the 100% correct solution given in <ref> [ Koza, 1992, page 154 ] </ref> takes about 543 time steps to traverse the Santa Fe trail but has a length of only 18 nodes and this is not the most compact solution possible. 4 Tree Mutation For our purposes it is necessary that the mutation operator be able to change <p> Error bars indicate one standard deviation. Means of 50 runs. created tree. The new tree is created using the same "half and half" method used to create the initial population <ref> [ Koza, 1992, Page 92-93 ] </ref> however its maximum height is chosen at random from one to the height of the tree it is to replace. Finally a check is made that the new program does not exceed the maximum allowed size. <p> However in practice we may not wish to operate the system continually. For example it may quickly find a satisfactory solution or better performance may be achieved by cutting short its operation and running it repeatedly with different starting configurations <ref> [ Koza, 1992, page 758 ] </ref> . In some data fitting problems growth in solution size may be indicative of "over fitting", i.e. better matching on the test data but at the expense of general performance. <p> Means of 50 runs. 6.2 Three Ways to Control Bloat Three methods of controlling bloat have been suggested. Firstly, and most widely used (e.g. in these experiments), is to place a universal upper bound either on tree depth <ref> [ Koza, 1992 ] </ref> or program length. ( [ Gathercole and Ross, 1996; Langdon and Poli, 1997a ] discuss unexpected problems with this approach).
Reference: [ Koza, 1994 ] <author> John R. Koza. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <year> 1994. </year>
Reference-contexts: The amount of food eaten is used as the fitness measure of the control program. The evolutionary system we use is identical to [ Lang-don and Poli, 1997b ] except the crossover operator is replaced by mutation. The details are given in Table 1, parameters not shown are as <ref> [ Koza, 1994, page 655 ] </ref> . On each version of the problem 50 independent runs were conducted. Note in these experiments we allow the evolved programs to be far bigger than required to solve the problem.
Reference: [ Langdon and Poli, 1997a ] <author> W. B. Langdon and R. Poli. </author> <title> An analysis of the MAX problem in genetic programming. </title> <editor> In John R. Koza, etal, editors, </editor> <publisher> Genetic Programming 1997 Morgan Kaufmann. </publisher>
Reference-contexts: to the next, to the covariance of the gene's frequency in the original population with the number of offspring z produced by individuals in that population: q = z We have used it to help explain the evolution of the number of copies of functions and terminals in GP populations <ref> [ Langdon, 1996a; Langdon and Poli, 1997a ] </ref> . In our experiments the size of the population does not 3 rank based fitness v. change in mean length in next generation. <p> Means of 50 runs. 6.2 Three Ways to Control Bloat Three methods of controlling bloat have been suggested. Firstly, and most widely used (e.g. in these experiments), is to place a universal upper bound either on tree depth [ Koza, 1992 ] or program length. ( <ref> [ Gathercole and Ross, 1996; Langdon and Poli, 1997a ] </ref> discuss unexpected problems with this approach).
Reference: [ Langdon and Poli, 1997b ] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat. </title> <type> Technical Report CSRP-97-09, </type> <institution> University of Birmingham, </institution> <month> 26 March </month> <year> 1997. </year> <note> Submitted to WSC2. </note>
Reference-contexts: In the next section we repeat our argument that bloat is inherent in variable length representations such as GP <ref> [ Langdon and Poli, 1997b ] </ref> . <p> Thus (in the absence of a parsimony bias) we expect longer representations to occur more often and so representation length to tend to increase. I.e. fitness based selection leads to bloat. In earlier work <ref> [ Langdon and Poli, 1997b ] </ref> we took a typical GP problem and demonstrated with fitness selection it suffers from bloat whereas without selection it does not. In Sections 3, 4 and 5 we repeated these experiments replacing crossover with mutation and showed fitness selection can still cause bloat.
Reference: [ Langdon, 1995 ] <author> W. B. Langdon. </author> <title> Evolving data structures using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle>
Reference: [ Langdon, 1996a ] <author> W. B. Langdon. </author> <title> Data Structures and Genetic Programming. </title> <type> PhD thesis, </type> <institution> University College, </institution> <address> London, </address> <month> 27 September </month> <year> 1996. </year>
Reference-contexts: On problems of interest, finding improved solutions is relatively easy initially but becomes increasingly more difficult. In these circumstances, especially with a discrete fitness function, there is little chance of finding a representation that does better than the representation (s) from which it was created (cf. "death of crossover" <ref> [ Langdon, 1996a, page 222 ] </ref> ). So the selection bias favours representations which have the same fitness as those from which they were created. In general the easiest way to create one representation from another and retain the same fitness is for the new representation to represent identical behaviour. <p> to the next, to the covariance of the gene's frequency in the original population with the number of offspring z produced by individuals in that population: q = z We have used it to help explain the evolution of the number of copies of functions and terminals in GP populations <ref> [ Langdon, 1996a; Langdon and Poli, 1997a ] </ref> . In our experiments the size of the population does not 3 rank based fitness v. change in mean length in next generation. <p> By the end of the run, only 0.02% of the population are fitter than their parent. Similar behaviour has been reported using crossover on other problems [ Nordin et al., 1996 ] [ Rosca and Ballard, 1996b, page 183 ] <ref> [ Langdon, 1996a, Chapter 7 ] </ref> . 5.6 Non-Disruptive Mutation and Program Length In Section 2 we argued that there are more long programs with a given performance than short ones and so a random search for programs with a given level of performance is more likely to find long programs.
Reference: [ Langdon, 1996b ] <author> William B. Langdon. </author> <title> Data structures and genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <title> Advances in Genetic Programming 2, </title> <note> chapter 20.MIT Press, 1996. </note> [ <author> McPhee and Miller, 1995 ] Nicholas Freitag McPhee and Justin Darwin Miller. </author> <title> Accurate replication in genetic programming. </title> <editor> In L. Es-helman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <publisher> Mor-gan Kaufmann. </publisher>
Reference-contexts: Multi-objective fitness measures where one objective is compact or fast programs have also been used <ref> [ Langdon, 1996b ] </ref> .
Reference: [ Nordin and Banzhaf, 1995 ] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Complexity compression and evolution. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95). </booktitle>
Reference: [ Nordin et al., 1995 ] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Jus-tinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 6-22, </pages> <month> 9 July </month> <year> 1995. </year>
Reference: [ Nordin et al., 1996 ] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 6,.1996. </booktitle>
Reference-contexts: By the end of the run, only 0.02% of the population are fitter than their parent. Similar behaviour has been reported using crossover on other problems <ref> [ Nordin et al., 1996 ] </ref> [ Rosca and Ballard, 1996b, page 183 ] [ Langdon, 1996a, Chapter 7 ] . 5.6 Non-Disruptive Mutation and Program Length In Section 2 we argued that there are more long programs with a given performance than short ones and so a random search for <p> By providing a "defence against crossover" <ref> [ Nordin et al., 1996, page 118 ] </ref> bloat causes the production of many programs of identical performance. These can consume the bulk of the available machine resources and by "clogging up" the population may prevent GP from effectively searching for better programs.
Reference: [ Price, 1970 ] <author> George R. Price. </author> <title> Selection and covariance. </title> <journal> Nature, </journal> <volume> 227, August 1 </volume> <pages> 520-521, </pages> <year> 1970. </year>
Reference-contexts: Section 5.1.1). In the later generations the mean program length and length of the best program on average lie close to each other. 5.1.1 Fitness is Necessary for Bloat - Price's Theorem Applied to Representation Size Price's Covariance and Selection Theorem <ref> [ Price, 1970 ] </ref> from population genetics relates the expected change in frequency of a gene q in a population from one generation to the next, to the covariance of the gene's frequency in the original population with the number of offspring z produced by individuals in that population: q =
Reference: [ Rosca and Ballard, 1996a ] <author> Justinian P. Rosca and Dana H. Ballard. </author> <title> Complexity drift in evolutionary computation with tree representations. </title> <type> Technical Report NRL5, </type> <institution> University of Rochester, </institution> <year> 1996. </year>
Reference-contexts: This shows that, with some function sets, longer programs can "replicate" more "accurately" when using crossover. I.e. offspring produced by crossover between longer programs are more likely to behave as their parents than children of shorter programs. <ref> [ Rosca and Ballard, 1996a ] </ref> provides a detailed analysis of bloat using tree schemata specifically for GP. In this paper we advance a more general explanation which should apply generally to any discrete variable length representation and generally to any progressive search technique. <p> The second (also commonly used) is to incorporate program size directly into the fitness measure (often called parsimony pressure) [ Koza, 1992; Zhang and Muhlenbein, 1993; Iba et al., 1994 ] . <ref> [ Rosca and Ballard, 1996a ] </ref> gives an analysis of the effect of parsimony pressure which varies linearly with program length. Multi-objective fitness measures where one objective is compact or fast programs have also been used [ Langdon, 1996b ] . <p> Possibly this was because of the difficulty of reliably detecting introns. I.e. there was a route whereby the GP could evolve junk code which masqueraded as being useful and thereby protected itself from removal. While <ref> [ Rosca and Ballard, 1996a ] </ref> propose a method where the likelihood of potentially disruptive genetic operations increases with parent size. 7 Conclusions We have generalised existing explanations for the widely observed growth in GP program size with successive generations (bloat) to give a simple statistical argument which should be generally
Reference: [ Rosca and Ballard, 1996b ] <author> Justinian P. Rosca and Dana H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2. </booktitle>
Reference-contexts: By the end of the run, only 0.02% of the population are fitter than their parent. Similar behaviour has been reported using crossover on other problems [ Nordin et al., 1996 ] <ref> [ Rosca and Ballard, 1996b, page 183 ] </ref> [ Langdon, 1996a, Chapter 7 ] . 5.6 Non-Disruptive Mutation and Program Length In Section 2 we argued that there are more long programs with a given performance than short ones and so a random search for programs with a given level of
Reference: [ Sims, 1993 ] <author> K. Sims. </author> <title> Interactive evolution of equations for procedural models. </title> <journal> The Visual Computer, </journal> <volume> 9 </volume> <pages> 466-476, </pages> <year> 1993. </year>
Reference-contexts: Multi-objective fitness measures where one objective is compact or fast programs have also been used [ Langdon, 1996b ] . The third method is to tailor the genetic operations. <ref> [ Sims, 1993, page 469 ] </ref> uses several mutation operators 7 10 of 50 normal runs. but adjusts their frequencies so a "decrease in complexity is slightly more probable than an increase". [ Blickle, 1996 ] suggests targeting genetic operations at redundant code.
Reference: [ Soule et al., 1996 ] <author> Terence Soule, James A. Foster, and John Dickinson. </author> <title> Code growth in genetic programming. </title> <editor> In John R. Koza, etal, editors, </editor> <booktitle> Genetic Programming 1996, </booktitle> <pages> pages 215-223, </pages> <address> 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: This is seldom used, perhaps due to the complexity of identifying redundant code. <ref> [ Soule et al., 1996 ] </ref> showed bloat continuing despite their targeted genetic operations. Possibly this was because of the difficulty of reliably detecting introns. I.e. there was a route whereby the GP could evolve junk code which masqueraded as being useful and thereby protected itself from removal.
Reference: [ Tackett, 1993 ] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 303-309, </pages> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In some data fitting problems growth in solution size may be indicative of "over fitting", i.e. better matching on the test data but at the expense of general performance. For example <ref> [ Tackett, 1993, page 309 ] </ref> suggests "parsimony may be an important factor not for `aesthetic' reasons or ease of analysis, but because of a more direct relationship to fitness: there is a bound on the `appropriate size' of solution tree for a given problem".
Reference: [ Tackett, 1994 ] <author> Walter Alden Tackett. </author> <title> Recombination, Selection, and the Genetic Construction of Computer Programs. </title> <type> PhD thesis, </type> <institution> University of Southern Califor-nia, </institution> <year> 1994. </year>
Reference-contexts: If it is negative, then the GA will tend to reduce it in the next generation. For a given distribution of representation lengths Equation 1 says the change in mean representation length will be linearly related to the selection pressure, z. This provides some theoretical justification for the claim <ref> [ Tackett, 1994, page 112 ] </ref> that "average growth in size ... is proportional to selection pressure".
Reference: [ Tackett, 1995 ] <author> Walter Alden Tackett. </author> <title> Greedy recombination and genetic search on the space of computer programs. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3. </booktitle>
Reference: [ Wu and Lindsay, 1996 ] <author> Annie S. Wu and Robert K. Lindsay. </author> <title> A survey of intron research in genetics. </title> <editor> In Hans-Michael Voigt, Werner Ebeling, Ingo Rechen-berg, and Hans-Paul Schwefel, editors, </editor> <title> Parallel Problem Solving From Nature IV. </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This tendency has gone under various names such as "bloat", "fluff" and increasing "structural complexity". The principal explanation advanced for bloat has been the growth of "introns" or "redundancy", i.e. code which has no effect on the operation of the program which contains it. ( <ref> [ Wu and Lindsay, 1996 ] </ref> contains a survey of recent research in biology on "introns".) Such introns are said to protect the program containing them from crossover [ Blickle and Thiele, 1994; Blickle, 1996; Nordin et al., 1995; Nordin et al., 1996 ] . [ McPhee and Miller, 1995 ]
Reference: [ Zhang and Muhlenbein, 1993 ] <author> Byoung-Tak Zhang and Heinz Muhlenbein. </author> <title> Evolving optimal neural networks using genetic algorithms with Occam's razor. </title> <journal> Complex Systems, </journal> <volume> 7 </volume> <pages> 199-220, </pages> <year> 1993. </year> <month> 9 </month>
References-found: 28

