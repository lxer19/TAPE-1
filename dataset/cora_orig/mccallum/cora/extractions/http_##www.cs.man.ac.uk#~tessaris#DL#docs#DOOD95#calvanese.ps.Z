URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/DOOD95/calvanese.ps.Z
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Email: fcalvanese,degiacomo,lenzerinig@dis.uniroma1.it  
Title: Structured Objects: Modeling and Reasoning Proc. of DOOD'95  
Author: Diego Calvanese, Giuseppe De Giacomo, Maurizio Lenzerini 
Address: Via Salaria 113, I-00198 Roma, Italy  
Affiliation: Dipartimento di Informatica e Sistemistica Universita di Roma "La Sapienza"  
Abstract: One distinctive characteristic of object-oriented data models over traditional database systems is that they provide more expressive power in schema definition. Nevertheless, the defining power of object-oriented models is still somewhat limited, mainly because it is commonly accepted that part of the semantics of the application can be represented within methods. The research work reported in this paper explores the possibility of enhancing the power of object-oriented data models in schema definition, thus offering more possibilities to reason about the intension of the database and better supporting data management. We demonstrate our approach by presenting a new data model, called CVL, that extends the usual object-oriented data models with several aspects, including view definition, recursive structure modeling, navigation of the schema through forward and backward traversal of links (attributes and relations), subsetting of attributes, and cardinality ratio constraints on links. CVL is equipped with sound, complete, and terminating inference procedures, that allow various forms of reasoning to be carried out on the intensional level of the database. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Abiteboul and A. Bonner. </author> <title> Objects and views. </title> <editor> In J. Clifford and R. King, editors, </editor> <booktitle> Proc. of ACM SIGMOD, </booktitle> <pages> pages 238-247, </pages> <year> 1991. </year>
Reference-contexts: CVL extends the usual expressive power of object-oriented data models by allowing: To specify both necessary and sufficient conditions for an object to belong to a class; necessary conditions are generally used when defining the classes that constitute the schema, whereas sufficient conditions help in the specification of views <ref> [1] </ref>. With this feature, views are part of the schema, and can be reasoned upon exactly like any other class. Note that this approach is different from considering views just as predefined queries.
Reference: 2. <author> S. Abiteboul and P. Kanellakis. </author> <title> Object identity as a query language primitive. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 159-173, </pages> <year> 1989. </year>
Reference-contexts: Additionally, by means of ^, _, and :, we are allowed not only to include intersection and union in structure expressions (as in <ref> [2] </ref>), but also to refer to all entities that do not have a certain structure. Note that often object-oriented models make either explicitly or implicitly the assumption that every object belongs to exactly one most specific class. <p> Under this assumption, intersection can be eliminated from the schema definition since if an object is an instance of two classes, the schema contains also a class that specializes both and of which the object is an instance of <ref> [2] </ref>. In contrast, in CVL we do not want to enforce the "most specific class assumption", consistently with most knowledge representation formalisms [4] and semantic data models [19].
Reference: 3. <author> F. Bancilhon, C. Delobel, and P. Kanellakis. </author> <title> Building an Object-Oriented Database System The story of O 2 . Morgan Kaufmann, </title> <year> 1992. </year>
Reference-contexts: We argue that the ability to define recursive structures in our model is an important enhancement with respect to traditional object-oriented models, where such structures, if present at all, are ad hoc additions requiring a special treatment by the reasoning procedures <ref> [9, 3] </ref>. Well-foundedness-declarations also allow us to represent well-founded binary relations. An interesting example is the definition of the part-of relation, which has a special importance in modeling certain applications [10]. This relation is characterized by being finite, antisymmetric, irreflexive, and transitive. <p> on three relevant examples, remarking that our work focuses on modeling the structural components of a schema. 5.1 CV L versus O 2 We have already mentioned that object-oriented models in general, and O 2 in particular distinguish between objects characterized by their object identifier and values associated to them <ref> [3] </ref>. <p> Tailoring CVL to O 2 class C is a kind of PureObject all hasvalue in T endclass, where T is the structure expression corresponding to the O 2 -type o . Note also that disjoint object assignments (see <ref> [3] </ref>) can be imposed in CVL by using negation. 5.2 CV L versus Entity-Relationship model The Entity-Relationship (ER) model is a semantic database model extensively used in the conceptual phase of database design [14].
Reference: 4. <author> S. Bergamaschi and C. Sartori. </author> <title> On taxonomic reasoning in conceptual design. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 17(3) </volume> <pages> 385-422, </pages> <year> 1992. </year>
Reference-contexts: Such reasoning can be exploited for deriving useful information for the design of the database, for the use of the database (for example in type checking), for querying purposes (e.g., in query optimization <ref> [4, 5] </ref>), and for the solution of new problems posed by cooperative and distributed information systems (for example, schema comparison and integration [8]). In this paper, we present a new data model, called CVL (for Class, View, and Link), specifically designed following the above guidelines. <p> In contrast, in CVL we do not want to enforce the "most specific class assumption", consistently with most knowledge representation formalisms <ref> [4] </ref> and semantic data models [19]. Such assumption would also be against the spirit of our notion of polymor-phism, which allows an object to simultaneously have more than one structure (and thus to belong to different unrelated classes).
Reference: 5. <author> M. Buchheit, M. A. Jeusfeld, W. Nutt, and M. Staudt. </author> <title> Subsumption between queries to Object-Oriented databases. </title> <journal> Information Systems, </journal> <volume> 19(1) </volume> <pages> 33-54, </pages> <year> 1994. </year>
Reference-contexts: Such reasoning can be exploited for deriving useful information for the design of the database, for the use of the database (for example in type checking), for querying purposes (e.g., in query optimization <ref> [4, 5] </ref>), and for the solution of new problems posed by cooperative and distributed information systems (for example, schema comparison and integration [8]). In this paper, we present a new data model, called CVL (for Class, View, and Link), specifically designed following the above guidelines.
Reference: 6. <author> D. Calvanese and M. Lenzerini. </author> <title> Making object-oriented schemas more expressive. </title> <booktitle> In Proc. of PODS-94, </booktitle> <pages> pages 243-254. </pages> <publisher> ACM Press and Addison Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Space limitations prevent us from exposing the details of our inference method. Here we would like to discuss the main idea, which is based on previous work relating formalisms used in knowledge representation and databases to modal logics developed for modeling properties of programs <ref> [6, 7, 12, 13] </ref>. The key point of our method is to take advantage of the strong similarity that exists between the interpretative structures of object-oriented models and labeled transition systems used in computer science to describe the behavior of program schemes.
Reference: 7. <author> D. Calvanese, M. Lenzerini, and D. Nardi. </author> <title> A unified framework for class based representation formalisms. </title> <editor> In J. Doyle, E. Sandewall, and P. Torasso, editors, </editor> <booktitle> Proc. of KR-94, </booktitle> <pages> pages 109-120. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Space limitations prevent us from exposing the details of our inference method. Here we would like to discuss the main idea, which is based on previous work relating formalisms used in knowledge representation and databases to modal logics developed for modeling properties of programs <ref> [6, 7, 12, 13] </ref>. The key point of our method is to take advantage of the strong similarity that exists between the interpretative structures of object-oriented models and labeled transition systems used in computer science to describe the behavior of program schemes.
Reference: 8. <author> T. Catarci and M. Lenzerini. </author> <title> Representing and using interschema knowledge in cooperative information systems. </title> <journal> J. of Intelligent and Cooperative Information Systems, </journal> <volume> 2(4) </volume> <pages> 375-398, </pages> <year> 1993. </year>
Reference-contexts: for deriving useful information for the design of the database, for the use of the database (for example in type checking), for querying purposes (e.g., in query optimization [4, 5]), and for the solution of new problems posed by cooperative and distributed information systems (for example, schema comparison and integration <ref> [8] </ref>). In this paper, we present a new data model, called CVL (for Class, View, and Link), specifically designed following the above guidelines.
Reference: 9. <author> R. G. G. Cattell, </author> <title> editor. The Object Database Standard: ODMG-93. </title> <publisher> Morgan Kauf-mann, </publisher> <year> 1994. </year> <note> Release 1.1. </note>
Reference-contexts: Examples of useful representation mechanisms that are considered important especially for new applications, but are generally not considered in object-oriented schemas are: recursive class definitions, view definitions, cardinality ratio constraints on attributes, subsetting of attributes, inverse of attributes, union and complement of classes (see for example <ref> [9] </ref>). One reason for limiting the expressivity of schemas is that object-oriented models support method definitions, and it is generally accepted that some of the semantics of the application could be very well represented within methods. <p> We argue that the ability to define recursive structures in our model is an important enhancement with respect to traditional object-oriented models, where such structures, if present at all, are ad hoc additions requiring a special treatment by the reasoning procedures <ref> [9, 3] </ref>. Well-foundedness-declarations also allow us to represent well-founded binary relations. An interesting example is the definition of the part-of relation, which has a special importance in modeling certain applications [10]. This relation is characterized by being finite, antisymmetric, irreflexive, and transitive. <p> Tailoring CVL to the Entity-Relationship model 5.3 CV L versus ODMG ODMG is intended as a standard for object-oriented models and as such it gives precise directives about the requirements a candidate object-model should possess <ref> [9] </ref>. The expressivity of CVL goes far beyond the one required by the current version of the standard. In fact, most of the functionality that is under consideration for the next release of the ODMG model is already captured by CVL.
Reference: 10. <author> V. Christophides, S. Abiteboul, S. Cluet, and M. Scholl. </author> <title> From structured documents to novel query facilities. </title> <editor> In R. T. Snodgrass and M. Winslett, editors, </editor> <booktitle> Proc. of ACM SIGMOD, </booktitle> <pages> pages 313-324, </pages> <year> 1994. </year>
Reference-contexts: Well-foundedness-declarations also allow us to represent well-founded binary relations. An interesting example is the definition of the part-of relation, which has a special importance in modeling certain applications <ref> [10] </ref>. This relation is characterized by being finite, antisymmetric, irreflexive, and transitive. The first three properties are captured by imposing well-foundedness, while transitivity is handled by a careful use of the fl operator.
Reference: 11. <author> G. De Giacomo. </author> <title> Decidability of Class-Based Knowledge Representation Formalisms and their Application to Medical Terminology Servers. </title> <type> PhD thesis, </type> <institution> Dip. di Inf. e Sist., Univ. di Roma "La Sapienza", </institution> <year> 1995. </year>
Reference-contexts: However, the high expressivity of CVL, and in particular the combination of cardinality declarations, meeting declarations and the possibility to force structures to be well-founded requires to extend the known reasoning techniques in several directions, which we now briefly sketch. Exploiting techniques developed in <ref> [11] </ref> we reduce reasoning on a schema to satisfiability of a formula of an extension of Converse-PDL, which is a well known modal logic of programs studied in [16]. The extension in obtained from Converse-PDL by including the repeat construct [24] and local functionality on direct and converse programs [12].
Reference: 12. <author> G. De Giacomo and M. Lenzerini. </author> <title> Boosting the correspondence between description logics and propositional dynamic logics. </title> <booktitle> In Proc. of AAAI-94, </booktitle> <pages> pages 205-212. </pages> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Space limitations prevent us from exposing the details of our inference method. Here we would like to discuss the main idea, which is based on previous work relating formalisms used in knowledge representation and databases to modal logics developed for modeling properties of programs <ref> [6, 7, 12, 13] </ref>. The key point of our method is to take advantage of the strong similarity that exists between the interpretative structures of object-oriented models and labeled transition systems used in computer science to describe the behavior of program schemes. <p> The extension in obtained from Converse-PDL by including the repeat construct [24] and local functionality on direct and converse programs <ref> [12] </ref>. It is known that Converse-PDL is EXPTIME-complete, and that adding just one of the two constructs above does not increase the complexity [15, 12]. However, de-cidability was not known for the logic including both constructs. <p> The extension in obtained from Converse-PDL by including the repeat construct [24] and local functionality on direct and converse programs [12]. It is known that Converse-PDL is EXPTIME-complete, and that adding just one of the two constructs above does not increase the complexity <ref> [15, 12] </ref>. However, de-cidability was not known for the logic including both constructs.
Reference: 13. <author> G. De Giacomo and M. Lenzerini. </author> <title> What's in an aggregate: Foundations for description logics with tuples and sets. </title> <booktitle> In Proc. of IJCAI-95, </booktitle> <year> 1995. </year>
Reference-contexts: Space limitations prevent us from exposing the details of our inference method. Here we would like to discuss the main idea, which is based on previous work relating formalisms used in knowledge representation and databases to modal logics developed for modeling properties of programs <ref> [6, 7, 12, 13] </ref>. The key point of our method is to take advantage of the strong similarity that exists between the interpretative structures of object-oriented models and labeled transition systems used in computer science to describe the behavior of program schemes.
Reference: 14. <author> G. Di Battista and M. Lenzerini. </author> <title> Deductive entity-relationship modeling. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 5(3) </volume> <pages> 439-450, </pages> <year> 1993. </year>
Reference-contexts: Note also that disjoint object assignments (see [3]) can be imposed in CVL by using negation. 5.2 CV L versus Entity-Relationship model The Entity-Relationship (ER) model is a semantic database model extensively used in the conceptual phase of database design <ref> [14] </ref>. The ER model distinguishes between entity-types (called simply entities in ER), denoting classes of objects, and relationships, used to model relations between entity-types. The entity-types are connected to relationships by means of ER-roles. Additionally, ER-attributes are used to associate further properties to entity-types and relationships.
Reference: 15. <author> E. A. Emerson and C. S. Jutla. </author> <title> On simultaneously determinizing and complementing !-automata. </title> <booktitle> In Proc. of LICS-89, </booktitle> <pages> pages 333-342, </pages> <year> 1989. </year>
Reference-contexts: The extension in obtained from Converse-PDL by including the repeat construct [24] and local functionality on direct and converse programs [12]. It is known that Converse-PDL is EXPTIME-complete, and that adding just one of the two constructs above does not increase the complexity <ref> [15, 12] </ref>. However, de-cidability was not known for the logic including both constructs.
Reference: 16. <author> M. J. Fischer and R. E. Ladner. </author> <title> Propositional dynamic logic of regular programs. </title> <journal> J. of Computer and System Sciences, </journal> <volume> 18 </volume> <pages> 194-211, </pages> <year> 1979. </year>
Reference-contexts: Exploiting techniques developed in [11] we reduce reasoning on a schema to satisfiability of a formula of an extension of Converse-PDL, which is a well known modal logic of programs studied in <ref> [16] </ref>. The extension in obtained from Converse-PDL by including the repeat construct [24] and local functionality on direct and converse programs [12]. It is known that Converse-PDL is EXPTIME-complete, and that adding just one of the two constructs above does not increase the complexity [15, 12].
Reference: 17. <author> D. Harel. </author> <title> Dynamic logic. </title> <booktitle> In Handbook of Philosophical Logic, </booktitle> <volume> volume 2, </volume> <pages> pages 497-640. </pages> <address> D. </address> <publisher> Reidel, Dordrecht, Holland, </publisher> <year> 1984. </year>
Reference-contexts: The unrestricted use in CVL of either difference or intersection on complex links would make the formalism undecidable. This can be easily proved by exploiting known undecidability results for logics of programs <ref> [17] </ref> together with the correspondence between this logics and a restricted version of CVL (see Section 3). Usually, in object-oriented models every class has an associated type which specifies the structure of the value associated to an instance of the class.
Reference: 18. <author> R. Hull. </author> <title> A survey of theoretical research on typed complex database objects. </title> <editor> In J. Paredaens, editor, </editor> <booktitle> Databases, </booktitle> <pages> pages 193-256. </pages> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: All these inferences can be carried out by relying on the basic reasoning task introduced in the previous section. 5 Discussion and conclusion The combination of constructs of the CVL data model makes it powerful enough to capture most common object-oriented and semantic data models presented in the literature <ref> [19, 18] </ref>. In fact, by adding suitable definitions to a schema we can impose conditions that reflect the assumptions made in the various models, forcing such a schema to be interpreted exactly in the way required by each model.
Reference: 19. <author> R. B. Hull and R. King. </author> <title> Semantic database modelling: Survey, applications and research issues. </title> <journal> ACM Computing Surveys, </journal> <volume> 19(3) </volume> <pages> 201-260, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: In contrast, in CVL we do not want to enforce the "most specific class assumption", consistently with most knowledge representation formalisms [4] and semantic data models <ref> [19] </ref>. Such assumption would also be against the spirit of our notion of polymor-phism, which allows an object to simultaneously have more than one structure (and thus to belong to different unrelated classes). <p> All these inferences can be carried out by relying on the basic reasoning task introduced in the previous section. 5 Discussion and conclusion The combination of constructs of the CVL data model makes it powerful enough to capture most common object-oriented and semantic data models presented in the literature <ref> [19, 18] </ref>. In fact, by adding suitable definitions to a schema we can impose conditions that reflect the assumptions made in the various models, forcing such a schema to be interpreted exactly in the way required by each model.
Reference: 20. <author> D. Kozen and J. Tiuryn. </author> <title> Logics of programs. </title> <editor> In J. V. Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science Formal Models and Semantics, </booktitle> <pages> pages 789-840. </pages> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <year> 1990. </year>
Reference-contexts: The similarity between the interpretative structures in object-oriented models and labeled transition systems reflects in a similarity between object-oriented models and modal logics of programs, which are formalisms specifically designed for reasoning about program schemes, and which are interpreted in terms of labeled transition systems (see <ref> [20, 23] </ref> for surveys). class Condominium is a kind of fApartmentg^ [loc: Address; budget: Integer] key loc exists (1; 1) manages in Manager endclass view CondominiumManager is a kind of Manager exists manages in Condominium endview class Address is a kind of [city: String; street: String, num: Integer] key city, street,
Reference: 21. <author> C. Lecluse and P. Richard. </author> <title> Modeling complex structures in object-oriented databases. </title> <booktitle> In Proc. of PODS-89, </booktitle> <pages> pages 362-369, </pages> <year> 1989. </year>
Reference-contexts: It is outside the scope of this paper to discuss these aspects in detail, but we present an example in Section 4. In general, schema level reasoning in object-oriented data models can be performed by means of relatively simple algorithms (see for example <ref> [21] </ref>). The richness of CVL makes reasoning much more difficult with respect to usual data models. Indeed the question arises if consistency checking in CVL is decidable at all. One of our main results is a sound, complete, and terminating reasoning procedure to perform consistency checking.
Reference: 22. <author> M. Staudt, M. Nissen, and M. Jeusfeld. </author> <title> Query by class, rule and concept. </title> <journal> J. of Applied Intelligence, </journal> <volume> 4(2) </volume> <pages> 133-157, </pages> <year> 1994. </year>
Reference-contexts: A class definition expresses necessary conditions for an entity to be an instance of the defined class, whereas a view definition characterizes exactly (through necessary and sufficient conditions) the entities belonging to the defined view. Our concept of view bears similarity to the concept of query class of <ref> [22] </ref>. Class and view definitions have the following forms (C is the name of the class or of the view to be defined): class C view C structure-declaration structure-declaration link-declarations link-declarations method-declarations method-declarations endclass endview We now explain the different parts of a class (view) definition.
Reference: 23. <author> C. Stirling. </author> <title> Modal and temporal logic. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <pages> pages 477-563. </pages> <publisher> Clarendon Press, </publisher> <year> 1992. </year>
Reference-contexts: The similarity between the interpretative structures in object-oriented models and labeled transition systems reflects in a similarity between object-oriented models and modal logics of programs, which are formalisms specifically designed for reasoning about program schemes, and which are interpreted in terms of labeled transition systems (see <ref> [20, 23] </ref> for surveys). class Condominium is a kind of fApartmentg^ [loc: Address; budget: Integer] key loc exists (1; 1) manages in Manager endclass view CondominiumManager is a kind of Manager exists manages in Condominium endview class Address is a kind of [city: String; street: String, num: Integer] key city, street,
Reference: 24. <author> R. E. Streett. </author> <title> Propositional dynamic logic of looping and converse is elementarily decidable. </title> <journal> Information and Computation, </journal> <volume> 54 </volume> <pages> 121-141, </pages> <year> 1982. </year>
Reference-contexts: Exploiting techniques developed in [11] we reduce reasoning on a schema to satisfiability of a formula of an extension of Converse-PDL, which is a well known modal logic of programs studied in [16]. The extension in obtained from Converse-PDL by including the repeat construct <ref> [24] </ref> and local functionality on direct and converse programs [12]. It is known that Converse-PDL is EXPTIME-complete, and that adding just one of the two constructs above does not increase the complexity [15, 12]. However, de-cidability was not known for the logic including both constructs.
Reference: 25. <author> M. Y. Vardi and P. Wolper. </author> <title> Automata-theoretic techniques for modal logics of programs. </title> <journal> J. of Computer and System Sciences, </journal> <volume> 32 </volume> <pages> 183-221, </pages> <year> 1986. </year>
Reference-contexts: It is known that Converse-PDL is EXPTIME-complete, and that adding just one of the two constructs above does not increase the complexity [15, 12]. However, de-cidability was not known for the logic including both constructs. By extending the automata-theoretic techniques developed in <ref> [25] </ref> we have proved that such logic is decidable and EXPTIME-complete. 4 Expressivity of CV L In this section we discuss by means of examples the main distinguished features of CVL with the goal of illustrating its expressivity. 4.1 Object polymorphism In CVL, entities can be seen as having different structures
Reference: 26. <author> W. A. Woods and J. G. Schmolze. </author> <title> The KL-ONE family. </title> <editor> In F. W. Lehmann, editor, </editor> <booktitle> Semantic Networks in Artificial Intelligence, </booktitle> <pages> pages 133-178. </pages> <publisher> Pergamon Press, </publisher> <year> 1992. </year> <title> Published as a special issue of Computers & Mathematics with Applications, Volume 23, Number 2-9. This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Such a declaration allows for representing inclusions between attributes, and is a restricted form of role-value map, a type of constraint commonly used in 2 Note that requiring the link to be basic (and not generic) is essential for preserving the decidability of inference on the schema. knowledge representation formalisms <ref> [26] </ref>. 3 * A key-declaration has the form: key A 1 ; : : : ; A m ; A 0 m 0 ; U 1 ; : : : ; U n ; U 0 n 0 : It is allowed only in class definitions and states that each entity
References-found: 26

