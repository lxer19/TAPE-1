URL: http://www.cs.kuleuven.ac.be/~kristof/papers/supercalc.ps
Refering-URL: http://www.cs.kuleuven.ac.be/~kristof/publications.html
Root-URL: 
Email: fkristof, marcd, dannydg@cs.kuleuven.ac.be  
Title: Combining Situation Calculus and Event Calculus  
Author: Kristof Van Belleghem, Marc Denecker, Danny De Schreye 
Address: Celestijnenlaan 200A, B-3001 Heverlee, Belgium.  
Affiliation: Department of Computer Science, K.U.Leuven,  
Abstract: In this paper we study the differences between two logic theories for temporal reasoning, the Situation Calculus and the Event Calculus, and the implications of these differences. We construct a new formalism that combines the advantages of both Situation and Event Calculus and avoids the problems of either. The new formalism is useful for general temporal reasoning in worlds with discrete and continuous change, and enables representation of a wide range of hypothetical temporal reasoning problems. We show that both Situation and Event Calculus are instances of this new formalism. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Apt and M. Bezem. </author> <title> Acyclic programs. </title> <booktitle> In Proc. of the International Conference on Logic Programming, </booktitle> <pages> pages 579-597. </pages> <publisher> MIT press, </publisher> <year> 1990. </year>
Reference-contexts: It is important to note that many other versions of the Situation Calculus have been used in the litterature ( [ 15 ] , [ 8 ] , <ref> [ 1 ] </ref> , [ 20 ] , [ 2 ] , [ 18 ] ,).
Reference: [2] <author> A. Baker. </author> <title> Nonmonotonic Reasoning in the Framework of the Situation Calculus. </title> <journal> Artifical Intelligence, </journal> <volume> 49 </volume> <pages> 5-23, </pages> <year> 1991. </year>
Reference-contexts: Otherwise, the property does not hold. Formulations of the Situation Calculus in first order logic often use one predicate abnormal instead of initiates and terminates, not distinguishing possible positive changes in truth value from negative ones ( <ref> [ 2 ] </ref> , [ 15 ] ). Since this distinction is always explicit in Event Calculus, we make it explicit in Situation Calculus as well to facilitate comparison of the formalisms. <p> It is important to note that many other versions of the Situation Calculus have been used in the litterature ( [ 15 ] , [ 8 ] , [ 1 ] , [ 20 ] , <ref> [ 2 ] </ref> , [ 18 ] ,). We have chosen a simple logic programming formulation which is very close to the one used in [ 13 ] . 4 The Event Calculus The Event Calculus has a world view which differs in some aspects from the Situation Calculus view. <p> In [ 12 ] an explicit division of properties into primitive and derived ones is proposed as a solution. In [ 20 ] domain dependent explanation closure axioms are applied to (among others) solve this form of the ramification problem. In <ref> [ 2 ] </ref> a special form of circumscription is used to solve the ramification problem in certain, but not all, cases. It is clear that the problems with the Situation Calculus axiom can be overcome in several ways.
Reference: [3] <author> K. Clark. </author> <title> Negation as failure. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Logic and databases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <year> 1978. </year>
Reference-contexts: The semantics of an abductive logic program is its Console completion semantics ( [ 4 ] ). Essentially, an abductive logic program is equivalent to the first order logic theory obtained by completing the definitions of all predicates in P that are not undefined (Clark completion, <ref> [ 3 ] </ref> ), and adding the integrity constraints and Clark's equality axioms to the resulting theory. In the sequel, we write clauses in the form A B 1 ; ::B n : and constraints as first order logic formulae.
Reference: [4] <author> L. Console, D. Theseider Dupre, and P. Torasso. </author> <title> On the relationship between abduction and deduction. </title> <journal> Journal of Logic and Computation, </journal> <volume> 1(5) </volume> <pages> 661-690, </pages> <year> 1991. </year>
Reference-contexts: The semantics of an abductive logic program is its Console completion semantics ( <ref> [ 4 ] </ref> ). Essentially, an abductive logic program is equivalent to the first order logic theory obtained by completing the definitions of all predicates in P that are not undefined (Clark completion, [ 3 ] ), and adding the integrity constraints and Clark's equality axioms to the resulting theory.
Reference: [5] <author> M. Denecker and D. De Schreye. </author> <title> Representing incomplete knowledge in abductive logic programming. </title> <note> to appear in: Journal of Logic and Computation, </note> <year> 1994. </year>
Reference-contexts: Where a transformation of A to Abductive Situation Calculus was established and proven sound and complete in <ref> [ 5 ] </ref> , our proposed transformation to Event Calculus was incorrect. A detailed analysis pointed out that the problem could not be fixed by modifying the transformation, but was actually inherent to the Event Calculus, and in particular to its linear time structure.
Reference: [6] <author> M. Denecker, L. Missiaen, and M. Bruynooghe. </author> <title> Temporal reasoning with abductive event calculus. </title> <booktitle> In Proceedings of ECAI 92, </booktitle> <address> Vienna, </address> <year> 1992. </year>
Reference-contexts: so the following axioms certainly need to be satisfied for all T 1 , T 2 and T 3 : ((T 1 &lt; T 2 )&(T 2 &lt; T 3 )) ) (T 1 &lt; T 3 ) It has been indicated before, for example in [ 17 ] and <ref> [ 6 ] </ref> , that not restricting time to a linear order leads to certain problems. Partial orders often give rise to undesired models by allowing events to be unrelated in time. This is especially a problem when actions can have context-dependent effects.
Reference: [7] <author> K. Eshghi. </author> <title> Abductive planning with event calculus. </title> <editor> In R. Kowalski and K. Bowen, editors, </editor> <booktitle> Proceedings of the 5th ICLP, </booktitle> <year> 1988. </year>
Reference-contexts: Again, we must indicate that the version of the Event Calculus used here is not the only one. For one, the Event Calculus has changed considerably since its original presentation in [ 14 ] , and a number of simplifications led to several formulations ( <ref> [ 7 ] </ref> , [ 21 ] , [ 17 ] , [ 12 ] ) which are all slightly different.
Reference: [8] <author> C. Evans. </author> <title> Negation as failure as an approach to the Hanks and McDer-mott problem. </title> <booktitle> In Proceedings of the second International Symposium on Artificial Intelligence, </booktitle> <year> 1989. </year>
Reference-contexts: It is important to note that many other versions of the Situation Calculus have been used in the litterature ( [ 15 ] , <ref> [ 8 ] </ref> , [ 1 ] , [ 20 ] , [ 2 ] , [ 18 ] ,).
Reference: [9] <author> M. Gelfond and V. Lifschitz. </author> <title> Describing Action and Change by Logic Programs. </title> <booktitle> In Proc. of the 9th Int. Joint Conf. and Symp. on Logic Programming, </booktitle> <year> 1992. </year>
Reference-contexts: illustrate the implications of these three differences for knowledge rep-resentation and problem solving below. 5.1.1 Branching Time The importance of the first difference, the use of branching versus linear time, came to our attention during an attempt to provide a transformation from temporal domain descriptions in the A language ( <ref> [ 9 ] </ref> ) to Abductive Event Calculus theories. Where a transformation of A to Abductive Situation Calculus was established and proven sound and complete in [ 5 ] , our proposed transformation to Event Calculus was incorrect.
Reference: [10] <author> S. Hanks and D. McDermott. </author> <title> Default reasoning, nonmonotonic logic, and the frame problem. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, Philadelphia, </booktitle> <pages> pages 328-333, </pages> <year> 1986. </year>
Reference-contexts: This is for example the case if derived properties are allowed, in which case we are confronted with a form of the ramification problem ( <ref> [ 10; 11 ] </ref> ). Derived properties are properties defined in terms of others by rules like holds (dead; T ) not holds (alive; T ): Such rules are added to the definition of holds in the theory before completing that definition.
Reference: [11] <author> S. Hanks and D. McDermott. </author> <title> Nonmonotonic logic and temporal projection. </title> <journal> Artificial Intelligence, </journal> <volume> 33 </volume> <pages> 379-412, </pages> <year> 1987. </year>
Reference-contexts: This is for example the case if derived properties are allowed, in which case we are confronted with a form of the ramification problem ( <ref> [ 10; 11 ] </ref> ). Derived properties are properties defined in terms of others by rules like holds (dead; T ) not holds (alive; T ): Such rules are added to the definition of holds in the theory before completing that definition.
Reference: [12] <author> R. A. Kowalski. </author> <title> Database updates in the event calculus. </title> <journal> Journal of Logic Programming, </journal> <year> 1992, 1992. </year>
Reference-contexts: For one, the Event Calculus has changed considerably since its original presentation in [ 14 ] , and a number of simplifications led to several formulations ( [ 7 ] , [ 21 ] , [ 17 ] , <ref> [ 12 ] </ref> ) which are all slightly different. <p> This kind of rules interacts incorrectly with the Situation Calculus frame axiom, as indicated among others in [ 16 ] and <ref> [ 12 ] </ref> . The problem is that the frame axiom, which describes holds dependencies between states, is not compatible with rules that describe dependencies within one state. The Situation Calculus frame axiom implicitly assumes that all fluents are independent, which is not always true. As shown in [ 12 ] <p> ] and <ref> [ 12 ] </ref> . The problem is that the frame axiom, which describes holds dependencies between states, is not compatible with rules that describe dependencies within one state. The Situation Calculus frame axiom implicitly assumes that all fluents are independent, which is not always true. As shown in [ 12 ] , in Event Calculus the frame axiom does not lead to such problems. There, the frame axiom is completely orthogonal to other dependency rules, and does not assume their absence. <p> Of course, there are other ways to avoid the problems with the Situation Calculus axiom, the most obvious one being not allowing derived properties, or finding another way of representing them. In <ref> [ 12 ] </ref> an explicit division of properties into primitive and derived ones is proposed as a solution. In [ 20 ] domain dependent explanation closure axioms are applied to (among others) solve this form of the ramification problem.
Reference: [13] <author> R. A. Kowalski. </author> <title> The situation calculus and event calculus compared. </title> <editor> In M. Bruynooghe, editor, </editor> <booktitle> Proceedings of ILPS 1994, </booktitle> <year> 1994. </year>
Reference-contexts: In [ 18 ] an Event Calculus-like time line has been incorporated in the Situation Calculus. More recently, in <ref> [ 13 ] </ref> a thorough comparison of the frame axioms of Situation and Event Calculus was made, and the similarities between the formalisms were highlighted. In this paper we compare Abductive Logic Programming formalisations of the two formalisms. We consider the similarities between the formalisms sufficiently indicated in [ 13 ] <p> recently, in <ref> [ 13 ] </ref> a thorough comparison of the frame axioms of Situation and Event Calculus was made, and the similarities between the formalisms were highlighted. In this paper we compare Abductive Logic Programming formalisations of the two formalisms. We consider the similarities between the formalisms sufficiently indicated in [ 13 ] , and will instead concentrate on the differences between them, hoping to find an explanation for the strong and weak points of either, and to ultimately construct a new, more expressive formalism that combines the advantages of Situation and Event Calculus while avoiding their shortcomings. <p> Since this distinction is always explicit in Event Calculus, we make it explicit in Situation Calculus as well to facilitate comparison of the formalisms. Moreover, as indicated in <ref> [ 13 ] </ref> , where this distinction is also explicitated, it is obvious that such explicitation results in a more detailed and therefore more "meaningful" theory. <p> We have chosen a simple logic programming formulation which is very close to the one used in <ref> [ 13 ] </ref> . 4 The Event Calculus The Event Calculus has a world view which differs in some aspects from the Situation Calculus view. In Event Calculus there is one real line of time points. Properties can hold or not hold at a certain time point. <p> The above axioms are closest to those in <ref> [ 13 ] </ref> . 5 A comparison of Situation and Event Calculus It is clear that the Situation and Event Calculus share an important basic concept: that of properties initiated and terminated by actions. In [ 13 ] it was argued that with a number of rather small modifications to both <p> The above axioms are closest to those in <ref> [ 13 ] </ref> . 5 A comparison of Situation and Event Calculus It is clear that the Situation and Event Calculus share an important basic concept: that of properties initiated and terminated by actions. In [ 13 ] it was argued that with a number of rather small modifications to both theory and notation, the formalisms can be made essentially equivalent. However, in fact the differences between the two formalisms are not unimportant and sometimes crucial, as we hope to demonstrate in this section. <p> In Situation Calculus something holds if it was initiated by the last action, or if it held in the previous situation and was not terminated by the last action. Under certain conditions these statements are just two equivalent formulations of the same axiom, as shown in <ref> [ 13 ] </ref> . But these conditions are not always satisfied. For example, the Situation Calculus axiom assumes the existence of a notion of "previous state of the world". Time is in a sense considered a row of blocks (situations) instead of a continuous line. <p> Earlier comparative studies have been presented in [ 18 ] and <ref> [ 13 ] </ref> . In the former, an Event Calculus-like time line is embedded in the Situation Calculus, running through one branch of situations (the real branch). It is shown that this formalism is more expressive than an early version of the Event Calculus.
Reference: [14] <author> R. A. Kowalski and M. Sergot. </author> <title> A logic-based calculus of events. </title> <journal> New Generation Computing, </journal> <volume> 4(4) </volume> <pages> 319-340, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction The Situation Calculus ( [ 15 ] ) and the Event Calculus ( <ref> [ 14 ] </ref> ) are two well-known formalisms for temporal reasoning. Although the original versions of both formalisms were created with clearly different goals in mind and did not look alike at all, later simplified versions of both started to show more and more similarities. <p> To facilitate a comparison of the calculi, we will always introduce it in our theory. Again, we must indicate that the version of the Event Calculus used here is not the only one. For one, the Event Calculus has changed considerably since its original presentation in <ref> [ 14 ] </ref> , and a number of simplifications led to several formulations ( [ 7 ] , [ 21 ] , [ 17 ] , [ 12 ] ) which are all slightly different.
Reference: [15] <author> J. McCarthy and P. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: 1 Introduction The Situation Calculus ( <ref> [ 15 ] </ref> ) and the Event Calculus ( [ 14 ] ) are two well-known formalisms for temporal reasoning. <p> Otherwise, the property does not hold. Formulations of the Situation Calculus in first order logic often use one predicate abnormal instead of initiates and terminates, not distinguishing possible positive changes in truth value from negative ones ( [ 2 ] , <ref> [ 15 ] </ref> ). Since this distinction is always explicit in Event Calculus, we make it explicit in Situation Calculus as well to facilitate comparison of the formalisms. <p> It is important to note that many other versions of the Situation Calculus have been used in the litterature ( <ref> [ 15 ] </ref> , [ 8 ] , [ 1 ] , [ 20 ] , [ 2 ] , [ 18 ] ,).
Reference: [16] <author> L. Missiaen. </author> <title> Situation calculus and event calculus in modal logic Z. </title> <type> Technical Report 85, </type> <institution> Department of Computer Science, K.U.Leuven, </institution> <year> 1989. </year>
Reference-contexts: This kind of rules interacts incorrectly with the Situation Calculus frame axiom, as indicated among others in <ref> [ 16 ] </ref> and [ 12 ] . The problem is that the frame axiom, which describes holds dependencies between states, is not compatible with rules that describe dependencies within one state. The Situation Calculus frame axiom implicitly assumes that all fluents are independent, which is not always true.
Reference: [17] <author> L. Missiaen. </author> <title> Localized abductive planning with the event calculus. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, K.U.Leuven, </institution> <year> 1991. </year>
Reference-contexts: be a linear order, so the following axioms certainly need to be satisfied for all T 1 , T 2 and T 3 : ((T 1 &lt; T 2 )&(T 2 &lt; T 3 )) ) (T 1 &lt; T 3 ) It has been indicated before, for example in <ref> [ 17 ] </ref> and [ 6 ] , that not restricting time to a linear order leads to certain problems. Partial orders often give rise to undesired models by allowing events to be unrelated in time. This is especially a problem when actions can have context-dependent effects. <p> For one, the Event Calculus has changed considerably since its original presentation in [ 14 ] , and a number of simplifications led to several formulations ( [ 7 ] , [ 21 ] , <ref> [ 17 ] </ref> , [ 12 ] ) which are all slightly different.
Reference: [18] <author> J. Pinto and R. Reiter. </author> <title> Temporal Reasoning in Logic Programming: A Case for the Situation Calculus. </title> <booktitle> In Proc. of the International Conference on Logic Programming, </booktitle> <pages> pages 203-221, </pages> <year> 1993. </year>
Reference-contexts: Although the original versions of both formalisms were created with clearly different goals in mind and did not look alike at all, later simplified versions of both started to show more and more similarities. In <ref> [ 18 ] </ref> an Event Calculus-like time line has been incorporated in the Situation Calculus. More recently, in [ 13 ] a thorough comparison of the frame axioms of Situation and Event Calculus was made, and the similarities between the formalisms were highlighted. <p> It is important to note that many other versions of the Situation Calculus have been used in the litterature ( [ 15 ] , [ 8 ] , [ 1 ] , [ 20 ] , [ 2 ] , <ref> [ 18 ] </ref> ,). We have chosen a simple logic programming formulation which is very close to the one used in [ 13 ] . 4 The Event Calculus The Event Calculus has a world view which differs in some aspects from the Situation Calculus view. <p> As shown in [ 19 ] , it is possible to extend the Situation Calculus to deal with continuous change as well, though the extension requires more substantial modifications to the formalism than in Event Calculus. The introduction of an Event Calculus-like time line as in <ref> [ 18 ] </ref> and [ 19 ] is a necessary first step. In [ 19 ] properties are then divided into two classes: discrete fluents and continuous parameters. <p> Earlier comparative studies have been presented in <ref> [ 18 ] </ref> and [ 13 ] . In the former, an Event Calculus-like time line is embedded in the Situation Calculus, running through one branch of situations (the real branch). It is shown that this formalism is more expressive than an early version of the Event Calculus.
Reference: [19] <author> J. A. Pinto. </author> <title> Temporal reasoning in the situation calculus. </title> <type> Technical Report KRR-TR-94-1, </type> <institution> Computer Science Department, University of Toronto, </institution> <year> 1994. </year>
Reference-contexts: Extensions of the Event Calculus to model continuous change have for example been proposed in [ 22 ] and [ 23 ] . As shown in <ref> [ 19 ] </ref> , it is possible to extend the Situation Calculus to deal with continuous change as well, though the extension requires more substantial modifications to the formalism than in Event Calculus. The introduction of an Event Calculus-like time line as in [ 18 ] and [ 19 ] is <p> As shown in <ref> [ 19 ] </ref> , it is possible to extend the Situation Calculus to deal with continuous change as well, though the extension requires more substantial modifications to the formalism than in Event Calculus. The introduction of an Event Calculus-like time line as in [ 18 ] and [ 19 ] is a necessary first step. In [ 19 ] properties are then divided into two classes: discrete fluents and continuous parameters. <p> The introduction of an Event Calculus-like time line as in [ 18 ] and <ref> [ 19 ] </ref> is a necessary first step. In [ 19 ] properties are then divided into two classes: discrete fluents and continuous parameters. The former behave like properties in the classical Situation Calculus, the latter have a more complex behaviour and can for example change their value continuously within one situation.
Reference: [20] <author> L. Schubert. </author> <title> Monotonic solution of the frame problem in the situation calculus. In H.E. </title> <editor> Kyburg, Jr et al., editor, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year>
Reference-contexts: It is important to note that many other versions of the Situation Calculus have been used in the litterature ( [ 15 ] , [ 8 ] , [ 1 ] , <ref> [ 20 ] </ref> , [ 2 ] , [ 18 ] ,). <p> In [ 12 ] an explicit division of properties into primitive and derived ones is proposed as a solution. In <ref> [ 20 ] </ref> domain dependent explanation closure axioms are applied to (among others) solve this form of the ramification problem. In [ 2 ] a special form of circumscription is used to solve the ramification problem in certain, but not all, cases.
Reference: [21] <author> M. Shanahan. </author> <title> Prediction is deduction but explanation is abduction. </title> <booktitle> In Proceedings of IJCAI 89, </booktitle> <pages> page 1055, </pages> <year> 1989. </year>
Reference-contexts: Again, we must indicate that the version of the Event Calculus used here is not the only one. For one, the Event Calculus has changed considerably since its original presentation in [ 14 ] , and a number of simplifications led to several formulations ( [ 7 ] , <ref> [ 21 ] </ref> , [ 17 ] , [ 12 ] ) which are all slightly different.
Reference: [22] <author> M. Shanahan. </author> <title> Representing continuous change in the event calculus. </title> <booktitle> In Proceedings of the 9th ECAI, </booktitle> <pages> page 598, </pages> <year> 1990. </year>
Reference-contexts: Extensions of the Event Calculus to model continuous change have for example been proposed in <ref> [ 22 ] </ref> and [ 23 ] . As shown in [ 19 ] , it is possible to extend the Situation Calculus to deal with continuous change as well, though the extension requires more substantial modifications to the formalism than in Event Calculus. <p> A discussion of continuous change at this point would lead us too far, but we refer the reader to for example <ref> [ 22 ] </ref> or [ 23 ] . The formalism described in the latter paper does not suffer from an extension to branching time, though the one in [ 22 ] , due to its use of a numerical time line, might not be so easily adapted to branching time applications. <p> A discussion of continuous change at this point would lead us too far, but we refer the reader to for example <ref> [ 22 ] </ref> or [ 23 ] . The formalism described in the latter paper does not suffer from an extension to branching time, though the one in [ 22 ] , due to its use of a numerical time line, might not be so easily adapted to branching time applications. Finally, there are those cases where hypothetical reasoning is required in the presence of indeterministic actions.
Reference: [23] <author> K. Van Belleghem, M. Denecker, and D. De Schreye. </author> <title> Representing continuous change in the abductive event calculus. </title> <booktitle> In Proc. of the International Conference on Logic Programming, </booktitle> <year> 1994. </year>
Reference-contexts: Extensions of the Event Calculus to model continuous change have for example been proposed in [ 22 ] and <ref> [ 23 ] </ref> . As shown in [ 19 ] , it is possible to extend the Situation Calculus to deal with continuous change as well, though the extension requires more substantial modifications to the formalism than in Event Calculus. <p> A discussion of continuous change at this point would lead us too far, but we refer the reader to for example [ 22 ] or <ref> [ 23 ] </ref> . The formalism described in the latter paper does not suffer from an extension to branching time, though the one in [ 22 ] , due to its use of a numerical time line, might not be so easily adapted to branching time applications.
References-found: 23

