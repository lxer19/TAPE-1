URL: http://www.neci.nj.nec.com/homepages/eric/dpr.ps
Refering-URL: http://www.neci.nj.nec.com/homepages/eric/
Root-URL: 
Email: baum@research.nj.nec.com dabo@cs.princeton.edu  
Title: Running dynamic programming algorithms on a DNA computer  
Author: Eric B. Baum Dan Boneh 
Address: Princeton, NJ 08544  
Affiliation: NEC Research Institute  
Abstract: In this paper we show that DNA computers are especially useful for running algorithms which are based on dynamic programming. This class of algorithms takes advantage of the large memory capacity of a DNA computer. We present algorithms for solving the knapsack problem and argue that a DNA computer can solve much larger instances of this problem than a conventional computer. Unlike other algorithms[1],[8] for DNA computers, which are brute force, dynamic programming is the same algorithm one would use to solve (smaller) problems on a conventional computer.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Adleman, </author> <title> "Molecular Computation of Solutions to Combinatorial Problems", </title> <booktitle> Science 266 </booktitle> <month> 1021-1024 (Nov. 11) </month> <year> 1994. </year>
Reference-contexts: 1 Introduction In a recent seminal paper <ref> [1] </ref>, Adleman introduced the idea of computing using DNA molecules. Adleman's techniques were then generalized by Lipton [8] who showed that formula-SAT can be solved on a DNA computer. These algorithms essentially use a brute force approach to solve hard combinatorial problems. <p> Thus, a DNA computer might be useful for solving large instances 1 of the problems mentioned above. Note that this application of a DNA computer is radically different than the one suggested by Adleman <ref> [1] </ref>. The algorithm we run on the DNA computer is not a brute force algorithm. It is exactly the same algorithm which one would use to solve the problem on a conventional machine.
Reference: [2] <author> D. Boneh, C. Dunworth, R. Lipton, </author> <title> "Breaking DES using a molecular computer", </title> <type> Technical Report CS-TR-489-95, </type> <institution> Princeton University, </institution> <year> 1995. </year>
Reference-contexts: These algorithms essentially use a brute force approach to solve hard combinatorial problems. This approach is interesting due to the massive parallelism available in DNA computers. However, the brute force approach is limited by the number of DNA molecules in solution. Breaking the DES cryptosystem <ref> [2] </ref> is the only "real world" application yet suggested for this approach. In this paper we propose a new class of algorithms which can be implemented on a DNA computer, namely some algorithms based on dynamic programming. Graph connectivity and knapsack are classical problems solvable in this way.
Reference: [3] <author> D. Boneh, C. Dunworth, R. Lipton, J. Sgall, </author> <title> "On Computational Power of DNA", </title> <note> to appear. </note>
Reference-contexts: Such applications are ideal for a DNA computer. 3 Solving graph connectivity using DNA In this section we show how to run the BFS algorithm on a DNA computer. We first need to recall a basic result from <ref> [3] </ref>. Theorem 3.1 ([3]) Let f : f0; 1g n ! f0; 1g m be a function that can be computed by a circuit of size s. Let T be a solution of DNA strands which represents 1 a set S f0; 1g n . <p> This example may also thus illustrate a limitation of DNA computers. We note that since the knapsack problem is in NP, one could try to use the circuit satisfaction algorithm of <ref> [3] </ref> to solve the problem. However, the circuit satisfaction algorithm is a brute force approach. The algorithm will try all possible subsets of numbers fb 1 ; : : : ; b n g to test if one of them sums up to B.
Reference: [4] <author> T. Corman, C. Leiserson, R. Rivest, </author> <title> "Introduction to Algorithms", </title> <publisher> McGraw Hill, </publisher> <year> 1991. </year>
Reference-contexts: Thus, to solve the original problem we first solve many easier sub-problems. Classical problems that can be solved using this approach include the shortest path in a graph problem, finding a minimal cost triangulation, the knapsack problem and many others <ref> [4] </ref>. The reason dynamic programming algorithms are suitable for DNA computers is that the sub-problems can be solved in parallel. Thus, a DNA computer might be useful for solving large instances 1 of the problems mentioned above. <p> The graph connectivity problem can be solved using a simple dynamic programming algorithm known as breadth-first-search or BFS for short <ref> [4] </ref>. As was stated above, our objective is to solve the graph connectivity problem for very large graphs. The graph will be described by a set of m functions f i : V ! V for i = 1; : : : ; m. <p> But we do not have communication from one DNA molecule to another which can enable them to recognize that they are identical 2 . 4 Solving the knapsack problem The dynamic programming approach for solving the knapsack problem <ref> [4] </ref> can be easily stated as a graph connectivity problem. The diameter of the resulting graph is linear in the size of the knapsack 2 Reif [9] proposes a solution to this problem. His solution, however, involves using enough DNA molecules to encode all pairs of virtual processors.
Reference: [5] <author> G. Dantzig, </author> <title> "Discrete-variable extremum problems", </title> <journal> Operations Research 5, </journal> <pages> pp. 266-277. </pages>
Reference-contexts: This problem is known to be NP-complete [7]. The knapsack problem comes up often in optimization (see <ref> [5] </ref> and references therein).
Reference: [6] <author> M. Garey, D. Johnson, "Computers and Interactability", Freeman, </author> <year> 1979. </year>
Reference-contexts: Using this notation, an instance of the graph connectivity problem is (S; T; m; C (f 1 ); : : : ; C (f m )). Using this formulation it is not difficult to see that the graph connectivity problem is PSPACE complete <ref> [6] </ref>. The BFS algorithm will solve the graph reachbility problem in time O (jEj) on a conventional machine. Let d be the diameter of the graph G, i.e. d = maxfdistance (u; v) j u; v 2 V g.
Reference: [7] <author> R. M. Karp, </author> <title> "Reducibility among combinatorial problems", </title> <editor> in R. E. Miller and J. W. Thatcher (eds), </editor> <title> Complexity of Computer Computations, </title> <publisher> Plenum Press, NY, </publisher> <pages> pp 85-103, </pages> <year> 1972. </year>
Reference-contexts: This problem is known to be NP-complete <ref> [7] </ref>. The knapsack problem comes up often in optimization (see [5] and references therein).
Reference: [8] <author> R. Lipton, </author> <title> "Using DNA to solve NP-Complete Problems", </title> <booktitle> Science 268 </booktitle> <month> 542-545 (Apr. 28) </month> <year> 1995. </year>
Reference-contexts: 1 Introduction In a recent seminal paper [1], Adleman introduced the idea of computing using DNA molecules. Adleman's techniques were then generalized by Lipton <ref> [8] </ref> who showed that formula-SAT can be solved on a DNA computer. These algorithms essentially use a brute force approach to solve hard combinatorial problems. This approach is interesting due to the massive parallelism available in DNA computers.
Reference: [9] <author> J. Reif, </author> <title> "Parallel Molecular Computation", </title> <booktitle> SPAA 95. </booktitle> <pages> 6 </pages>
Reference-contexts: The diameter of the resulting graph is linear in the size of the knapsack 2 Reif <ref> [9] </ref> proposes a solution to this problem. His solution, however, involves using enough DNA molecules to encode all pairs of virtual processors. If one might (optimistically) have 10 18 DNA molecules, then, his proposal would restrict one to 10 9 virtual processors.
References-found: 9

