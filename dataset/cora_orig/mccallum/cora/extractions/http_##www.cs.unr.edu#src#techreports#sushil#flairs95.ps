URL: http://www.cs.unr.edu/src/techreports/sushil/flairs95.ps
Refering-URL: http://www.cs.unr.edu/src/techreports/TechReports.html
Root-URL: 
Email: email: fsushil,murrayg@cs.unr.edu  
Title: Adapting Control Strategies for Situated Autonomous Agents  
Author: Sushil J. Louis Andrew Murray 
Address: Reno 89557  
Affiliation: Department of Computer Science University of Nevada  
Abstract: This paper studies how to balance evolutionary design and human expertise in order to best design situated autonomous agents which can learn specific tasks. A genetic algorithm designs control circuits to learn simple behaviors, and given control strategies for simple behaviors, the genetic algorithm designs a combinational circuit that switches between these simple behaviors to perform a navigation task. Keywords: Genetic Algorithms, Computational Design, Autonomous Agents, Robotics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Valentino Braitenberg. </author> <title> Vehicles. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1986. </year>
Reference-contexts: Recent work in this field has explored the evolution of structure and control [3, 4, 7], while evolving combinational circuits is described in [8]. Braitenberg's book elegantly outlines the emergence of complex behavior from simpler ones <ref> [1] </ref>. The next section describes genetic algorithms. Section 3 explains the agent, environment, and learning task while section 4 discusses the genetic algorithm encoding.
Reference: [2] <author> R. A. Brooks. </author> <title> A robot that walks; emergent behaviors from a carefully evolved network. </title> <booktitle> Neural Computation, </booktitle> <address> 1(2):253, </address> <year> 1989. </year>
Reference-contexts: 1 INTRODUCTION Our primary objective is to investigate the balance between human design and computational design as a foundation for designing autonomous agents. Brook's subsumption architecture built up complex behaviors by combining simpler behaviors <ref> [2] </ref>. However, combining these behaviors is often difficult, time consuming, and error prone. This paper uses genetic algorithms to design control circuits to learn a simple behavior and attacks a related problem design a switch to swap between simple behaviors to improve a robot's performance in a simulated environment.
Reference: [3] <author> D. Cliff, P. Husbands, and I. Harvey. </author> <title> Evolving visually guided robots. </title> <type> Technical Report CSRP 220, </type> <institution> School of Cognitive and Computing Science, University of Sussex, </institution> <year> 1992. </year>
Reference-contexts: Humans do what they are good at structuring a problem and breaking it into simpler parts; the genetic algorithm does what it is good at combining subsolutions into more complete solutions. Recent work in this field has explored the evolution of structure and control <ref> [3, 4, 7] </ref>, while evolving combinational circuits is described in [8]. Braitenberg's book elegantly outlines the emergence of complex behavior from simpler ones [1]. The next section describes genetic algorithms. Section 3 explains the agent, environment, and learning task while section 4 discusses the genetic algorithm encoding.
Reference: [4] <editor> Marco Dorigo and Marco Colombetti. </editor> <title> Robot shaping: Developing situated agents through learning. </title> <type> Technical Report TR-92-040 Revised, </type> <institution> International Computer Science Institute, University of California, Berkeley, </institution> <year> 1993. </year>
Reference-contexts: Humans do what they are good at structuring a problem and breaking it into simpler parts; the genetic algorithm does what it is good at combining subsolutions into more complete solutions. Recent work in this field has explored the evolution of structure and control <ref> [3, 4, 7] </ref>, while evolving combinational circuits is described in [8]. Braitenberg's book elegantly outlines the emergence of complex behavior from simpler ones [1]. The next section describes genetic algorithms. Section 3 explains the agent, environment, and learning task while section 4 discusses the genetic algorithm encoding.
Reference: [5] <author> D. E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: Section 5 provides some results and the last section furnishes conclusions and indicates future directions. 2 GENETIC ALGORITHMS Genetic algorithms (GAs) are stochastic, parallel search algorithms based on the mechanics of natural selection, the process of evolution <ref> [6, 5] </ref>. GAs were designed to efficiently search large, non-linear search spaces where expert knowledge is lacking or difficult to encode and where traditional optimization tech-niques fail. They are flexible and robust, exhibiting the adaptiveness and graceful degradation of biological systems.
Reference: [6] <author> J. Holland. </author> <title> Adaptation In Natural and Artificial Systems. </title> <publisher> The University of Michigan Press, </publisher> <address> Ann Arbour, </address> <year> 1975. </year>
Reference-contexts: Section 5 provides some results and the last section furnishes conclusions and indicates future directions. 2 GENETIC ALGORITHMS Genetic algorithms (GAs) are stochastic, parallel search algorithms based on the mechanics of natural selection, the process of evolution <ref> [6, 5] </ref>. GAs were designed to efficiently search large, non-linear search spaces where expert knowledge is lacking or difficult to encode and where traditional optimization tech-niques fail. They are flexible and robust, exhibiting the adaptiveness and graceful degradation of biological systems.
Reference: [7] <editor> John R. Koza. </editor> <booktitle> Genetic Programming. </booktitle> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: Humans do what they are good at structuring a problem and breaking it into simpler parts; the genetic algorithm does what it is good at combining subsolutions into more complete solutions. Recent work in this field has explored the evolution of structure and control <ref> [3, 4, 7] </ref>, while evolving combinational circuits is described in [8]. Braitenberg's book elegantly outlines the emergence of complex behavior from simpler ones [1]. The next section describes genetic algorithms. Section 3 explains the agent, environment, and learning task while section 4 discusses the genetic algorithm encoding.
Reference: [8] <author> Sushil J. Louis and Gregory J. E. Rawlins. </author> <title> Designer genetic algorithms: </title> <booktitle> Genetic algorithms in structure design. In Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pages 53-60. </pages> <publisher> Morgan Kauffman, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: Recent work in this field has explored the evolution of structure and control [3, 4, 7], while evolving combinational circuits is described in <ref> [8] </ref>. Braitenberg's book elegantly outlines the emergence of complex behavior from simpler ones [1]. The next section describes genetic algorithms. Section 3 explains the agent, environment, and learning task while section 4 discusses the genetic algorithm encoding.
Reference: [9] <author> A. Murray and S. J. Louis. </author> <title> Design strategies for evolutionary robotics. </title> <booktitle> In Proceedings of the Third Golden West International Conference on Intelligent Systems. </booktitle> <publisher> Kluwer Academic Press, </publisher> <month> to appear </month> <year> 1995. </year>
Reference-contexts: In previous work, we explored the tradeoff between human design of structure and control, and computational design of structure and control <ref> [9] </ref>. Inspired by nature, we used genetic algorithms to computa-tionally design two structure and control strategies (the simple behaviors) of an autonomous agent. The programmer designed the switch between behaviors.
References-found: 9

