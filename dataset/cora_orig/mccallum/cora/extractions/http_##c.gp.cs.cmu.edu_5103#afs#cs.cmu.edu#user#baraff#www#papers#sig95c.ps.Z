URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/baraff/www/papers/sig95c.ps.Z
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/baraff/www/papers/index.html
Root-URL: http://www.cs.cmu.edu
Title: Interactive Physically-Based Manipulation of Discrete/Continuous Models  
Author: Mikako Harada Andrew Witkin David Baraff 
Keyword: KeywordsInteractive techniques, physically-based modeling, grammars.  
Address: Pittsburgh, PA 15213  
Affiliation: Department of Architecture  Department of Computer Science  Robotics Institute Carnegie Mellon University  
Date: 1995  
Note: SIGGRAPH 95, Los Angeles, August 6-11 COMPUTER GRAPHICS Proceedings, Annual Conference Series,  
Abstract: Physically-based modeling has been used in the past to support a variety of interactive modeling tasks including free-form surface design, mechanism design, constrained drawing, and interactive camera control. In these systems, the user interacts with the model by exerting virtual forces, to which the system responds subject to the active constraints. In the past, this kind of interaction has been applicable only to models that are governed by continuous parameters. In this paper we present an extension to mixed continuous/discrete models, emphasizing constrained layout problems that arise in architecture and other domains. When the object being dragged is blocked from further motion by geometric constraints, a local discrete search is triggered, during which transformations such as swapping of adjacent objects may be performed. The result of the search is a nearby state in which the target object has been moved in the indicated direction and in which all constraints are satisfied. The transition to this state is portrayed using simple but effective animated visual effects. Following the transition, continuous dragging is resumed. The resulting seamless transitions between discrete and continuous manipulation allow the user to easily explore the mixed design space just by dragging objects. We demonstrate the method in application to architectural floor plan design, circuit board layout, art analysis, and page layout. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Baraff. </author> <title> Analytical methods for dynamic simulation of non-penetrating rigid bodies. </title> <journal> Computer Graphics (Proc. SIG-GRAPH), </journal> <volume> 23 </volume> <pages> 223-232, </pages> <year> 1989. </year>
Reference-contexts: The jth constraint then becomes an active constraint at this time, and a more accurate projection of q.t C 1t/ can be computed. The process is the same as the collision-resolution processes employed in physical simulation systems <ref> [1] </ref>. 4 Discrete Manipulation We wish to extend the paradigm of continuous physically-based interaction to allow the state of the system to undergo discrete structural change in response to the user's actions.
Reference: [2] <author> David Baraff. </author> <title> Fast contact force computation for nonpene-trating rigid bodies. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH), </booktitle> <volume> 28 </volume> <pages> 23-34, </pages> <year> 1994. </year>
Reference-contexts: The evolution of this type of constrained system over time exactly parallels work on physical simulation of impenetrable objects <ref> [2] </ref>; accordingly, we cast the continuous manipulation of our models as a problem in constrained physical simulation. <p> This last condition prevents the constraint force from gratuitously changing q.t/ so that an active constraint becomes inactive. Baraff <ref> [2] </ref> discusses the implementation of a fast, efficient algorithm for computing a vector f which satisfies all of these conditions; our system computes f using the described implementation.
Reference: [3] <author> David Baraff. </author> <title> Interactive simulation of solid rigid bodies. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 15 </volume> <pages> 63-75, </pages> <year> 1995. </year>
Reference-contexts: Henceforth we use shape grammar in the broader sense of these extended geometric grammars. 2 SIGGRAPH 95, Los Angeles, August 6-11 COMPUTER GRAPHICS Proceedings, Annual Conference Series, 1995 a system for interactive molecular simulations. Interactive simulations that include contact constraints were described by Baraff <ref> [3] </ref>; the continuous simulation techniques in this paper most closely follow that work. 3 Continuous Manipulation During any interval of time in which the discrete variables of the model stay fixed, the model is represented simply as a continuous function of state q.t/, where q.t/ 2 IR n is a vector
Reference: [4] <author> Christopher Carlson. </author> <title> Structure grammars and their application to design. </title> <type> Technical Report EDRC-01-09-89, </type> <institution> Engineering Design Research Center, Carnegie Mellon University, </institution> <address> Pitts-burgh, PA, </address> <year> 1989. </year>
Reference-contexts: Surles [27] describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity. Several additional formalisms were introduced on which system implementations were based <ref> [4, 13] </ref>. Henceforth we use shape grammar in the broader sense of these extended geometric grammars. 2 SIGGRAPH 95, Los Angeles, August 6-11 COMPUTER GRAPHICS Proceedings, Annual Conference Series, 1995 a system for interactive molecular simulations.
Reference: [5] <author> George Celniker and Dave Gossard. </author> <title> Deformable curve and surface finite-elements for free-form shape design. </title> <journal> Computer Graphics, </journal> <volume> 25(4), </volume> <month> July </month> <year> 1991. </year> <note> Proceedings SIGGRAPH '91. </note>
Reference-contexts: This approach has been applied to animation, image analysis, drawing, free-form surface modeling, mechanical design, and interactive molecular simulation <ref> [29, 28, 30, 5, 31, 33, 27] </ref>. Despite its successes, this approach has been subject to the severe limitation that it only supports manipulation of systems gov Author's affiliations: Mikako Harada, (mh3i@andrew.cmu.edu), Department of Architecture; Andrew Witkin, (aw@cs.cmu.edu), Department of Computer Science; David Baraff, (baraff@cs.cmu.edu), Robotics Institute. <p> The use of constrained dynamics simulations for interactive geometric modeling was described by Witkin et al. [32]. Flexible-surface simulations for interactive computer vision and free-form surface modeling are areas that have also been extensively investigated <ref> [29, 28, 30, 5, 31, 33] </ref>. Constrained dynamics simulations have also been used to support drawing applications [11] and for interactive camera control for animation [10]. Surles [27] describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity.
Reference: [6] <author> Ulrich Flemming. </author> <title> Wall representations of rectangular dissections and their use in automated space allocation. Environment and Planning B: </title> <journal> Planning and Design, </journal> <volume> 5 </volume> <pages> 215-232, </pages> <year> 1978. </year>
Reference-contexts: The goal of floor-planning problems varies with the application, but often involves an optimization subject to the constraints, and may also involve aesthetic or other subjective criteria. Floor planning problems have long been investigated [12] and are of particular interest in architecture <ref> [22, 6, 8] </ref> and VLSI design [34, 20, 35]. In this section, we describe the implementation of a system for attacking this class of floor layout problem interactively.
Reference: [7] <author> Ulrich Flemming. </author> <title> More than the sum of parts: the grammar of Queen Anne houses. Environment and Planning B: </title> <journal> Planning and Design, </journal> <volume> 14 </volume> <pages> 323-350, </pages> <year> 1987. </year>
Reference-contexts: The second portion of this section reviews this prior work. 2.1 Shape Grammars in Architecture Shape grammars were first introduced to architecture by Stiny and Gips in the 1970's [25, 24]. Since then, shape grammars have been used theoretically to describe the historical style of architectural designs <ref> [26, 7, 17] </ref> and to specify new forms [15]. Shape grammars are appealing to architecture researchers because they are visual, and because they offer a formal mechanism for capturing the previously vague and ambiguous notion of style.
Reference: [8] <author> Ulrich Flemming and Robert F. Coyne. </author> <title> A design system with multiple abstraction capabilities. </title> <booktitle> In Avignon '90: Tools, Techniques & Applications, </booktitle> <volume> volume 1, </volume> <pages> pages 107-122. </pages> <publisher> EC2, </publisher> <year> 1990. </year>
Reference-contexts: Several computer programs have been developed based on the theoretical foundation of shape grammars. 1 These systems have been used to demonstrate grammars representing floor plan layouts <ref> [8] </ref>, framing structures [21], and a class of building designs [13]. Interacting with grammar-based systems has been problematic. <p> The goal of floor-planning problems varies with the application, but often involves an optimization subject to the constraints, and may also involve aesthetic or other subjective criteria. Floor planning problems have long been investigated [12] and are of particular interest in architecture <ref> [22, 6, 8] </ref> and VLSI design [34, 20, 35]. In this section, we describe the implementation of a system for attacking this class of floor layout problem interactively.
Reference: [9] <author> Philip E. Gill, Walter Murray, Michael A. Saunders, and Mar-garet H. Wright. </author> <title> User's guide for NPSOL (version 4.0): A fortran package for nonlinear programming. </title> <type> Technical Report SOL 86-2, </type> <institution> Stanford University, Stanford, California, </institution> <year> 1986. </year>
Reference-contexts: To satisfy the constraints, we consider topological constraints first, such as adjacency requirements. If a candidate state meets all the topological constraints, we then perform a numerical constraint solution in an effort to meet the applicable continuous geometric constraints, using a general purpose continuous constrained optimization program <ref> [9] </ref>. Since we are making incremental changes, the previous geometric parameter values generally give good initial estimates for finding a new state that satisfies the constraints. Of the states that satisfy the topological and geometric constraints, we choose the best one as measured by a compound objective function. <p> To perform the continuous constrained optimization we use a general purpose optimization package called NPSOL <ref> [9] </ref> to compute a new state vector q. The NPSOL package optimizes smooth nonlinear functions subject to both linear and nonlinear constraints.
Reference: [10] <author> Michael Gleicher and Andrew Witkin. </author> <title> Through-the-lens camera control. </title> <journal> Computer Graphics, </journal> <volume> 26, </volume> <year> 1992. </year> <note> Proc. Siggraph '92. </note>
Reference-contexts: Flexible-surface simulations for interactive computer vision and free-form surface modeling are areas that have also been extensively investigated [29, 28, 30, 5, 31, 33]. Constrained dynamics simulations have also been used to support drawing applications [11] and for interactive camera control for animation <ref> [10] </ref>. Surles [27] describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity. Several additional formalisms were introduced on which system implementations were based [4, 13].
Reference: [11] <author> Michael Gleicher and Andrew Witkin. </author> <title> Drawing with constraints. </title> <booktitle> The Visual Computer, </booktitle> <year> 1994. </year>
Reference-contexts: Flexible-surface simulations for interactive computer vision and free-form surface modeling are areas that have also been extensively investigated [29, 28, 30, 5, 31, 33]. Constrained dynamics simulations have also been used to support drawing applications <ref> [11] </ref> and for interactive camera control for animation [10]. Surles [27] describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity. Several additional formalisms were introduced on which system implementations were based [4, 13].
Reference: [12] <author> John Grason. </author> <title> Methods for the computer-implemented solution of a class of floor plan. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, Carnegie Mellon University, </institution> <year> 1970. </year> <type> 9 SIGGRAPH 95, </type> <address> Los Angeles, </address> <booktitle> August 6-11 COMPUTER GRAPHICS Proceedings, Annual Conference Series, </booktitle> <year> 1995 </year>
Reference-contexts: There may also be structural constraints between rectangles, such as adjacency constraints. The goal of floor-planning problems varies with the application, but often involves an optimization subject to the constraints, and may also involve aesthetic or other subjective criteria. Floor planning problems have long been investigated <ref> [12] </ref> and are of particular interest in architecture [22, 6, 8] and VLSI design [34, 20, 35]. In this section, we describe the implementation of a system for attacking this class of floor layout problem interactively.
Reference: [13] <author> Jeff Heisserman. </author> <title> Generative geometric design and boundary solid grammars. </title> <type> PhD thesis, </type> <institution> Department of Architecture, Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: The hope is that relatively simple rule sets can be devised that capture some aspect of architectural style, for example, generating designs for all and only Queen Anne Houses <ref> [13] </ref>. Several computer programs have been developed based on the theoretical foundation of shape grammars. 1 These systems have been used to demonstrate grammars representing floor plan layouts [8], framing structures [21], and a class of building designs [13]. Interacting with grammar-based systems has been problematic. <p> style, for example, generating designs for all and only Queen Anne Houses <ref> [13] </ref>. Several computer programs have been developed based on the theoretical foundation of shape grammars. 1 These systems have been used to demonstrate grammars representing floor plan layouts [8], framing structures [21], and a class of building designs [13]. Interacting with grammar-based systems has been problematic. The only means of exploring the discrete space of designs defined by a grammar has been sequential manual rule selection by the user, with, in some systems, the ability to edit an existing derivation. <p> Surles [27] describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity. Several additional formalisms were introduced on which system implementations were based <ref> [4, 13] </ref>. Henceforth we use shape grammar in the broader sense of these extended geometric grammars. 2 SIGGRAPH 95, Los Angeles, August 6-11 COMPUTER GRAPHICS Proceedings, Annual Conference Series, 1995 a system for interactive molecular simulations.
Reference: [14] <author> Michael Kass, Andrew Witkin, and Demetri Terzopoulos. Snakes: </author> <title> Active contour models. </title> <journal> Int. J. of Computer Vision, </journal> <volume> 1(4), </volume> <year> 1987. </year>
Reference-contexts: In computer vision and image analysis, quasi-physical active contour models known as snakes are widely used for interactive edge finding and tracking <ref> [14] </ref>. Snakes are essentially simulated springy wires that are attracted to edge features in images, and simultaneously subjected to manipulation forces imposed by the user. The use of constrained dynamics simulations for interactive geometric modeling was described by Witkin et al. [32].
Reference: [15] <author> Terry W. Knight. </author> <title> Designing with grammars. </title> <editor> In Gerhard N. Schmitt, editor, </editor> <booktitle> CAAD Futures '91 Proceedings, </booktitle> <pages> pages 19-34, </pages> <year> 1991. </year>
Reference-contexts: Since then, shape grammars have been used theoretically to describe the historical style of architectural designs [26, 7, 17] and to specify new forms <ref> [15] </ref>. Shape grammars are appealing to architecture researchers because they are visual, and because they offer a formal mechanism for capturing the previously vague and ambiguous notion of style.
Reference: [16] <author> T.W. Knight. </author> <title> Transformations of De Stijl art: the paintings of Georges Vantongerloo and Fritz Glarner. Environment and Planning B: </title> <journal> Planning and Design, </journal> <volume> 16 </volume> <pages> 51-98, </pages> <year> 1989. </year>
Reference-contexts: In the rich combinatorial space of design, an artist's method of selective search through that space is thought to be a key element of style [23]. Our last example focuses on images from abstract painting. This example is taken from Knight <ref> [16] </ref>, who has analyzed stylistic changes in the paintings by De Stijl artists. The purpose of this example is to show the usefulness of exploratory manipulation as a tool to study styles. Knight studied artists' paintings over periods of time.
Reference: [17] <author> H. Koning and J. Eizenberg. </author> <title> The language of the prairie: </title> <editor> Frank Lloyd Wright's prairie houses. </editor> <title> Environment and Planning B: </title> <journal> Planning and Design, </journal> <volume> 8 </volume> <pages> 295-323, </pages> <year> 1981. </year>
Reference-contexts: The second portion of this section reviews this prior work. 2.1 Shape Grammars in Architecture Shape grammars were first introduced to architecture by Stiny and Gips in the 1970's [25, 24]. Since then, shape grammars have been used theoretically to describe the historical style of architectural designs <ref> [26, 7, 17] </ref> and to specify new forms [15]. Shape grammars are appealing to architecture researchers because they are visual, and because they offer a formal mechanism for capturing the previously vague and ambiguous notion of style.
Reference: [18] <author> Sukhamay Kundu. </author> <title> The equivalence of the subregion representation and the wall representation for a certain class of rectangular dissections. </title> <journal> Communications of the ACM, </journal> <volume> 31(6) </volume> <pages> 752-763, </pages> <year> 1988. </year>
Reference-contexts: Kundu <ref> [18] </ref> gives a detailed description of subregion trees. A rectangular dissection and its sub-region tree are shown in figure 1a. The chief advantage of this representation is that it guarantees a non-overlapping arrangement of boxes, with no empty space.
Reference: [19] <author> Cornelius Lanczos. </author> <title> The Variational Principles of Mechanics. </title> <publisher> Dover Publications, Inc., </publisher> <year> 1970. </year>
Reference-contexts: Treating our manipulation problem as a physical problem, we choose F c .t/ to be a workless, compressive constraint force <ref> [19] </ref>. At any particular time t, such a constraint force depends on the applied force F a .t/ and the set of active constraints. A constraint C i is said to be active at time t if C i .q.t// D 0.
Reference: [20] <author> David P. LaPotin. Mason: </author> <title> A global floor-planning approach for VLSI design. </title> <type> Technical Report IBMC-11657, </type> <institution> IBM T.J. Watson Research Center, </institution> <address> Yorktown Heights, NY 10598, </address> <month> Jan-uary </month> <year> 1986. </year>
Reference-contexts: The goal of floor-planning problems varies with the application, but often involves an optimization subject to the constraints, and may also involve aesthetic or other subjective criteria. Floor planning problems have long been investigated [12] and are of particular interest in architecture [22, 6, 8] and VLSI design <ref> [34, 20, 35] </ref>. In this section, we describe the implementation of a system for attacking this class of floor layout problem interactively. After showing examples, we describe the results of our experiments. 5.1 Implementation of a Floor Planning Program Our representation for floor planning problems is based on rectangular dissection.
Reference: [21] <author> William J. Mitchell, Robin S. Ligget, Spiro N. Pollalis, and Milton Tan. </author> <title> Integrating shape grammars and design analysis. </title> <booktitle> In CAAD futures '91 proceedings, </booktitle> <pages> pages 1-18, </pages> <year> 1991. </year>
Reference-contexts: Several computer programs have been developed based on the theoretical foundation of shape grammars. 1 These systems have been used to demonstrate grammars representing floor plan layouts [8], framing structures <ref> [21] </ref>, and a class of building designs [13]. Interacting with grammar-based systems has been problematic. The only means of exploring the discrete space of designs defined by a grammar has been sequential manual rule selection by the user, with, in some systems, the ability to edit an existing derivation. <p> A further issue has been that these systems do not handle continuous dimensional variations (the flip side of the problem we have faced in physically-based manipulation.) A few applications allow grammars to include continuous parameters, with some user control over parameter values <ref> [21] </ref>. However, the problem of solving simultaneously for parameter values that satisfy constraints has been finessed. No existing grammar-based system allows the user to directly manipulate designs to produce geometric variations.
Reference: [22] <author> W.J. Mitchell, J.P. Steadman, and Robin S. Ligget. </author> <title> Synthesis and optimization of small rectangular floor plans. Environment and Planning B: </title> <journal> Planning and Design, </journal> <volume> 3(1) </volume> <pages> 37-70, </pages> <year> 1976. </year>
Reference-contexts: The goal of floor-planning problems varies with the application, but often involves an optimization subject to the constraints, and may also involve aesthetic or other subjective criteria. Floor planning problems have long been investigated [12] and are of particular interest in architecture <ref> [22, 6, 8] </ref> and VLSI design [34, 20, 35]. In this section, we describe the implementation of a system for attacking this class of floor layout problem interactively.
Reference: [23] <author> Herbert A. Simon. </author> <title> Style in design. </title> <editor> In Charles M. Eastman, editor, </editor> <title> Spatial Synthesis in Computer-Aided Building Design, </title> <booktitle> chapter 9, </booktitle> <pages> pages 287-309. </pages> <publisher> Applied Science Publishers LTD, </publisher> <address> Ripple Road, Barking, Essex, England, </address> <year> 1975. </year>
Reference-contexts: Analysis of Abstract Painting Constraints are known to be one of the essential elements in defining an artistic style. In the rich combinatorial space of design, an artist's method of selective search through that space is thought to be a key element of style <ref> [23] </ref>. Our last example focuses on images from abstract painting. This example is taken from Knight [16], who has analyzed stylistic changes in the paintings by De Stijl artists. The purpose of this example is to show the usefulness of exploratory manipulation as a tool to study styles.
Reference: [24] <author> G. Stiny. </author> <title> Introduction to shape and shape grammars. Environment and Planning B: </title> <journal> Planning and Design, </journal> <volume> 7(3) </volume> <pages> 343-351, </pages> <year> 1980. </year>
Reference-contexts: Our approach to this sub-problem closely follows previous work in the use of physically-based methods for interactive manipulation. The second portion of this section reviews this prior work. 2.1 Shape Grammars in Architecture Shape grammars were first introduced to architecture by Stiny and Gips in the 1970's <ref> [25, 24] </ref>. Since then, shape grammars have been used theoretically to describe the historical style of architectural designs [26, 7, 17] and to specify new forms [15].
Reference: [25] <author> G. Stiny and J. Gips. </author> <title> Shape grammars and the generative specification of painting and sculpture. </title> <booktitle> Information Processing, </booktitle> <pages> pages 1460-1465, </pages> <year> 1972. </year>
Reference-contexts: Our approach to this sub-problem closely follows previous work in the use of physically-based methods for interactive manipulation. The second portion of this section reviews this prior work. 2.1 Shape Grammars in Architecture Shape grammars were first introduced to architecture by Stiny and Gips in the 1970's <ref> [25, 24] </ref>. Since then, shape grammars have been used theoretically to describe the historical style of architectural designs [26, 7, 17] and to specify new forms [15].
Reference: [26] <author> G. Stiny and W.J. Mitchell. </author> <title> The Palladian grammar. Environment and Planning B: </title> <journal> Planning and Design, </journal> <volume> 5(1) </volume> <pages> 5-18, </pages> <year> 1978. </year>
Reference-contexts: The second portion of this section reviews this prior work. 2.1 Shape Grammars in Architecture Shape grammars were first introduced to architecture by Stiny and Gips in the 1970's [25, 24]. Since then, shape grammars have been used theoretically to describe the historical style of architectural designs <ref> [26, 7, 17] </ref> and to specify new forms [15]. Shape grammars are appealing to architecture researchers because they are visual, and because they offer a formal mechanism for capturing the previously vague and ambiguous notion of style.
Reference: [27] <author> Mark C. Surles. </author> <title> An algorithm with linear complexity for interactive, physically-based modeling of large proteins. </title> <editor> In Ed-win E. Catmull, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> volume 26, </volume> <pages> pages 221-230, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: This approach has been applied to animation, image analysis, drawing, free-form surface modeling, mechanical design, and interactive molecular simulation <ref> [29, 28, 30, 5, 31, 33, 27] </ref>. Despite its successes, this approach has been subject to the severe limitation that it only supports manipulation of systems gov Author's affiliations: Mikako Harada, (mh3i@andrew.cmu.edu), Department of Architecture; Andrew Witkin, (aw@cs.cmu.edu), Department of Computer Science; David Baraff, (baraff@cs.cmu.edu), Robotics Institute. <p> Flexible-surface simulations for interactive computer vision and free-form surface modeling are areas that have also been extensively investigated [29, 28, 30, 5, 31, 33]. Constrained dynamics simulations have also been used to support drawing applications [11] and for interactive camera control for animation [10]. Surles <ref> [27] </ref> describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity. Several additional formalisms were introduced on which system implementations were based [4, 13].
Reference: [28] <author> Demetri Terzopoulos, Andrew Witkin, and Michael Kass. </author> <title> Energy constraints on deformable models: recovering shape and non-rigid motion. </title> <booktitle> In Proc. AAAI-87, </booktitle> <address> Seattle, </address> <year> 1987. </year>
Reference-contexts: This approach has been applied to animation, image analysis, drawing, free-form surface modeling, mechanical design, and interactive molecular simulation <ref> [29, 28, 30, 5, 31, 33, 27] </ref>. Despite its successes, this approach has been subject to the severe limitation that it only supports manipulation of systems gov Author's affiliations: Mikako Harada, (mh3i@andrew.cmu.edu), Department of Architecture; Andrew Witkin, (aw@cs.cmu.edu), Department of Computer Science; David Baraff, (baraff@cs.cmu.edu), Robotics Institute. <p> The use of constrained dynamics simulations for interactive geometric modeling was described by Witkin et al. [32]. Flexible-surface simulations for interactive computer vision and free-form surface modeling are areas that have also been extensively investigated <ref> [29, 28, 30, 5, 31, 33] </ref>. Constrained dynamics simulations have also been used to support drawing applications [11] and for interactive camera control for animation [10]. Surles [27] describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity.
Reference: [29] <author> Demetri Terzopoulos, Andrew Witkin, and Michael Kass. </author> <title> Symmetry-seeking models for 3D object reconstruction. </title> <journal> International Journal of Computer Vision, </journal> <volume> 3(1), </volume> <year> 1987. </year>
Reference-contexts: This approach has been applied to animation, image analysis, drawing, free-form surface modeling, mechanical design, and interactive molecular simulation <ref> [29, 28, 30, 5, 31, 33, 27] </ref>. Despite its successes, this approach has been subject to the severe limitation that it only supports manipulation of systems gov Author's affiliations: Mikako Harada, (mh3i@andrew.cmu.edu), Department of Architecture; Andrew Witkin, (aw@cs.cmu.edu), Department of Computer Science; David Baraff, (baraff@cs.cmu.edu), Robotics Institute. <p> The use of constrained dynamics simulations for interactive geometric modeling was described by Witkin et al. [32]. Flexible-surface simulations for interactive computer vision and free-form surface modeling are areas that have also been extensively investigated <ref> [29, 28, 30, 5, 31, 33] </ref>. Constrained dynamics simulations have also been used to support drawing applications [11] and for interactive camera control for animation [10]. Surles [27] describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity.
Reference: [30] <author> Jeffrey A. Thingvold and Elaine Cohen. </author> <title> Physical modeling with B-spline surfaces for interactive design and animation. </title> <journal> Computer Graphics, </journal> <volume> 24(2) </volume> <pages> 129-138, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: This approach has been applied to animation, image analysis, drawing, free-form surface modeling, mechanical design, and interactive molecular simulation <ref> [29, 28, 30, 5, 31, 33, 27] </ref>. Despite its successes, this approach has been subject to the severe limitation that it only supports manipulation of systems gov Author's affiliations: Mikako Harada, (mh3i@andrew.cmu.edu), Department of Architecture; Andrew Witkin, (aw@cs.cmu.edu), Department of Computer Science; David Baraff, (baraff@cs.cmu.edu), Robotics Institute. <p> The use of constrained dynamics simulations for interactive geometric modeling was described by Witkin et al. [32]. Flexible-surface simulations for interactive computer vision and free-form surface modeling are areas that have also been extensively investigated <ref> [29, 28, 30, 5, 31, 33] </ref>. Constrained dynamics simulations have also been used to support drawing applications [11] and for interactive camera control for animation [10]. Surles [27] describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity.
Reference: [31] <author> William Welch and Andrew Witkin. </author> <title> Variational surface modeling. </title> <journal> Computer Graphics, </journal> <volume> 26, </volume> <year> 1992. </year> <note> Proc. Siggraph '92. </note>
Reference-contexts: This approach has been applied to animation, image analysis, drawing, free-form surface modeling, mechanical design, and interactive molecular simulation <ref> [29, 28, 30, 5, 31, 33, 27] </ref>. Despite its successes, this approach has been subject to the severe limitation that it only supports manipulation of systems gov Author's affiliations: Mikako Harada, (mh3i@andrew.cmu.edu), Department of Architecture; Andrew Witkin, (aw@cs.cmu.edu), Department of Computer Science; David Baraff, (baraff@cs.cmu.edu), Robotics Institute. <p> The use of constrained dynamics simulations for interactive geometric modeling was described by Witkin et al. [32]. Flexible-surface simulations for interactive computer vision and free-form surface modeling are areas that have also been extensively investigated <ref> [29, 28, 30, 5, 31, 33] </ref>. Constrained dynamics simulations have also been used to support drawing applications [11] and for interactive camera control for animation [10]. Surles [27] describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity.
Reference: [32] <author> Andrew Witkin, Michael Gleicher, and William Welch. </author> <title> Interactive dynamics. </title> <journal> Computer Graphics, </journal> <volume> 24(2) </volume> <pages> 11-21, </pages> <month> March </month> <year> 1990. </year> <booktitle> Proc. 1990 Symposium on 3-D Interactive Graphics. </booktitle>
Reference-contexts: Snakes are essentially simulated springy wires that are attracted to edge features in images, and simultaneously subjected to manipulation forces imposed by the user. The use of constrained dynamics simulations for interactive geometric modeling was described by Witkin et al. <ref> [32] </ref>. Flexible-surface simulations for interactive computer vision and free-form surface modeling are areas that have also been extensively investigated [29, 28, 30, 5, 31, 33]. Constrained dynamics simulations have also been used to support drawing applications [11] and for interactive camera control for animation [10].
Reference: [33] <author> Andrew Witkin and William Welch. </author> <title> Fast animation and control of non-rigid structures. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 243-252, </pages> <month> July </month> <year> 1990. </year> <note> Proc. Siggraph '90. </note>
Reference-contexts: This approach has been applied to animation, image analysis, drawing, free-form surface modeling, mechanical design, and interactive molecular simulation <ref> [29, 28, 30, 5, 31, 33, 27] </ref>. Despite its successes, this approach has been subject to the severe limitation that it only supports manipulation of systems gov Author's affiliations: Mikako Harada, (mh3i@andrew.cmu.edu), Department of Architecture; Andrew Witkin, (aw@cs.cmu.edu), Department of Computer Science; David Baraff, (baraff@cs.cmu.edu), Robotics Institute. <p> The use of constrained dynamics simulations for interactive geometric modeling was described by Witkin et al. [32]. Flexible-surface simulations for interactive computer vision and free-form surface modeling are areas that have also been extensively investigated <ref> [29, 28, 30, 5, 31, 33] </ref>. Constrained dynamics simulations have also been used to support drawing applications [11] and for interactive camera control for animation [10]. Surles [27] describes 1 Shape grammars in their original form could not be implemented directly, due to problems of ambiguity.
Reference: [34] <author> D.F. Wong, H.W. Leong, and C.L. Liu. </author> <title> Simulated Annealing for VLSI Design. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> 101 Philip Drive, Assinippi Park, Norwell, Massachusetts 02061, </address> <year> 1988. </year>
Reference-contexts: The goal of floor-planning problems varies with the application, but often involves an optimization subject to the constraints, and may also involve aesthetic or other subjective criteria. Floor planning problems have long been investigated [12] and are of particular interest in architecture [22, 6, 8] and VLSI design <ref> [34, 20, 35] </ref>. In this section, we describe the implementation of a system for attacking this class of floor layout problem interactively. After showing examples, we describe the results of our experiments. 5.1 Implementation of a Floor Planning Program Our representation for floor planning problems is based on rectangular dissection.
Reference: [35] <author> Lin S. Woo, C.K. Wong, and D.T. Tang. Pioneer: </author> <title> a macro-based floor-planning design system. </title> <booktitle> VLSI System Design, </booktitle> <pages> pages 32-43, </pages> <month> August </month> <year> 1986. </year> <month> 10 </month>
Reference-contexts: The goal of floor-planning problems varies with the application, but often involves an optimization subject to the constraints, and may also involve aesthetic or other subjective criteria. Floor planning problems have long been investigated [12] and are of particular interest in architecture [22, 6, 8] and VLSI design <ref> [34, 20, 35] </ref>. In this section, we describe the implementation of a system for attacking this class of floor layout problem interactively. After showing examples, we describe the results of our experiments. 5.1 Implementation of a Floor Planning Program Our representation for floor planning problems is based on rectangular dissection.
References-found: 35

