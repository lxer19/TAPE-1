URL: http://robotics.eecs.berkeley.edu/~lygeros/Postscript/case.ps
Refering-URL: http://robotics.eecs.berkeley.edu/~lygeros/Publications/case.html
Root-URL: 
Email: godbole, lygeros, sastry@robotics.eecs.berkeley.edu  
Title: Hierarchical Hybrid Control: a Case Study  
Author: Datta N. Godbole John Lygeros Shankar Sastry 
Address: Berkeley, CA 94720  
Affiliation: Intelligent Machines and Robotics Laboratory University of California, Berkeley  
Abstract: A case study of the difficulties associated with the design of hybrid control systems is presented. We use the Intelligent Vehicle Highway System (IVHS) architecture of [1, 2], a system that involves both continuous state and discrete event controllers as our example of a hierarchical hybrid system. We point out that even though conventional analysis tools suggest that the proposed design should fulfill certain performance requirements simulation results show that it does not. We consider this as an indication that the conventional tools currently in use for the design and verification of control systems may be inadequate for the design of hierarchical control of hybrid systems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Varaiya and S. E. Shladover, </author> <title> "Sketch of an IVHS systems architecture," </title> <type> Tech. Rep. </type> <institution> UCB-ITS-PRR-91-3, Institute of Transportation Studies, University of California, Berke-ley, </institution> <year> 1991. </year>
Reference-contexts: More details on the parts of the design that are relevant to this study will be given in Section 3. 2 Intelligent Vehicle Highway System Architecture One example where the hybrid system structure of Figure 1 can be found is the Intelligent Vehicle Highway System described in <ref> [1, 2] </ref>. The goal is to design a system that can significantly increase safety and highway capacity without having to build new roads, by adding intelligence to both the vehicles and the roadside. In order to achieve this the notion of "platooning" is introduced in [2].
Reference: [2] <author> P. Varaiya, </author> <title> "Smart cars on smart roads: problems of control," </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> vol. AC-38, no. 2, </volume> <pages> pp. 195-207, </pages> <year> 1993. </year>
Reference-contexts: More details on the parts of the design that are relevant to this study will be given in Section 3. 2 Intelligent Vehicle Highway System Architecture One example where the hybrid system structure of Figure 1 can be found is the Intelligent Vehicle Highway System described in <ref> [1, 2] </ref>. The goal is to design a system that can significantly increase safety and highway capacity without having to build new roads, by adding intelligence to both the vehicles and the roadside. In order to achieve this the notion of "platooning" is introduced in [2]. <p> The goal is to design a system that can significantly increase safety and highway capacity without having to build new roads, by adding intelligence to both the vehicles and the roadside. In order to achieve this the notion of "platooning" is introduced in <ref> [2] </ref>. It is assumed that traffic on the highway is organized in groups of tightly spaced vehicles, which are given the name platoons. <p> Clearly implementation of such a scheme would require the vehicles to be automatically controlled, as human drivers are not fast and reliable enough to be able to form platoons. The design of such a large scale control system pauses a formidable problem. In the architecture outlined in <ref> [2] </ref> the system is organized in five layers. The top layer, called the network layer, is responsible for the flow of traffic on the entire highway system 1 . Its task is to prevent congestion and maximize throughput by dynamic routing of traffic.
Reference: [3] <author> A. Nerode and W. Kohn, </author> <title> "Models for hybrid systems: Automata, topologies, controllability, observability," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, </editor> <booktitle> eds.), </booktitle> <pages> pp. 317-356, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction The term hybrid system is used to describe a large and varied class of systems. A large class of hybrid systems can be described by the architecture of Figure 1. A typical hybrid system is arranged in two (or more) layers <ref> [3, 4] </ref>. Different levels of abstractions of the plant model are used at each layer of the hierarchy. In the bottom layer the plant model is usually described by means of differential and/or difference equations.
Reference: [4] <author> R. L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, </author> <title> Hybrid Systems. </title> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction The term hybrid system is used to describe a large and varied class of systems. A large class of hybrid systems can be described by the architecture of Figure 1. A typical hybrid system is arranged in two (or more) layers <ref> [3, 4] </ref>. Different levels of abstractions of the plant model are used at each layer of the hierarchy. In the bottom layer the plant model is usually described by means of differential and/or difference equations.
Reference: [5] <author> P. J. G. Ramadge and W. M. Wonham, </author> <title> "The control of discrete event dynamical systems," </title> <booktitle> Proceedings of IEEE, </booktitle> <volume> vol. Vol.77, no. 1, </volume> <pages> pp. 81-98, </pages> <year> 1989. </year>
Reference-contexts: In the top layer the plant description is more abstract. Typical choices of description language at this level are finite state machines, fuzzy logic, Petri nets etc. Typically the controllers designed at this level are discrete event supervisory controllers (see e.g. <ref> [5] </ref>). The two levels communicate by means of an interface that plays the role of a translator between signals and symbols.
Reference: [6] <author> A. S. Morse, </author> <title> "Supervisory control of family of linear set point controllers," </title> <booktitle> in IEEE Control and Decision Conference, </booktitle> <pages> pp. 1055-1060, </pages> <year> 1993. </year>
Reference-contexts: The control architecture described above appears in wide variety of applications and forms the heart of most hybrid system formalisms. Switching controllers <ref> [6, 7] </ref>, Intelligent Control [8, 9], Expert Control [10], Motion Control [11], among others, make use of the structure of Figure 1.
Reference: [7] <author> K. S. Narendra and J. Balakrishnan, </author> <title> "Improving transient response of adaptive control systems using multiple models and switching," </title> <booktitle> in IEEE Control and Decision Conference, </booktitle> <pages> pp. 1067-1072, </pages> <year> 1993. </year>
Reference-contexts: The control architecture described above appears in wide variety of applications and forms the heart of most hybrid system formalisms. Switching controllers <ref> [6, 7] </ref>, Intelligent Control [8, 9], Expert Control [10], Motion Control [11], among others, make use of the structure of Figure 1.
Reference: [8] <author> M. Lemmon, J. A. Stiver, and P. J. Antsaklis, </author> <title> "Event identification and intelligent hybrid control," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, </editor> <booktitle> eds.), </booktitle> <pages> pp. 268-296, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The control architecture described above appears in wide variety of applications and forms the heart of most hybrid system formalisms. Switching controllers [6, 7], Intelligent Control <ref> [8, 9] </ref>, Expert Control [10], Motion Control [11], among others, make use of the structure of Figure 1.
Reference: [9] <author> K. M. Passino and P. J. Antsaklis, </author> <title> "Modeling and analysis of artificially intelligent planning systems," in An Introduction to Intelligent and Autonomous Control (P. </title> <editor> J. Antsaklis and K. M. Passino, </editor> <booktitle> eds.), </booktitle> <pages> pp. 191-214, </pages> <address> Boston: </address> <publisher> Kluwer Academic Publishing, </publisher> <year> 1993. </year> <title> 4 There exists a different scheme of organizing traffic without merge maneuver due to A. Hitchcock [26]. This architecture is currently under investigation. It will probably still be vulnerable to crashes during lane changes 15 </title>
Reference-contexts: The control architecture described above appears in wide variety of applications and forms the heart of most hybrid system formalisms. Switching controllers [6, 7], Intelligent Control <ref> [8, 9] </ref>, Expert Control [10], Motion Control [11], among others, make use of the structure of Figure 1.
Reference: [10] <author> K. M. Passino and A. D. Lunardhi, </author> <title> "Stability analysis of expert control systems," </title> <booktitle> in IEEE Control and Decision Conference, </booktitle> <pages> pp. 765-770, </pages> <year> 1993. </year>
Reference-contexts: The control architecture described above appears in wide variety of applications and forms the heart of most hybrid system formalisms. Switching controllers [6, 7], Intelligent Control [8, 9], Expert Control <ref> [10] </ref>, Motion Control [11], among others, make use of the structure of Figure 1. For most of these systems the design approach has been "divide and conquer", that is the continuous and discrete controllers are designed independently and then combined by an interface which is designed with the specific problem.
Reference: [11] <author> R. W. Brockett, </author> <title> "Hybrid models for motion control systems," </title> <booktitle> in European Control Conference, </booktitle> <year> 1993. </year>
Reference-contexts: The control architecture described above appears in wide variety of applications and forms the heart of most hybrid system formalisms. Switching controllers [6, 7], Intelligent Control [8, 9], Expert Control [10], Motion Control <ref> [11] </ref>, among others, make use of the structure of Figure 1. For most of these systems the design approach has been "divide and conquer", that is the continuous and discrete controllers are designed independently and then combined by an interface which is designed with the specific problem.
Reference: [12] <author> A. Nerode and W. Kohn, </author> <title> "Multiple agent hybrid control architecture," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, </editor> <booktitle> eds.), </booktitle> <pages> pp. 297-316, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: This is not a rule however as the literature also contains examples of systems that show active (on-line) design of the hybrid controllers (e.g. <ref> [12] </ref> and [13]) as well as attempts of formulating a consistent interface that is not case specific (e.g. [14]). In addition to theoretical formalisms a lot of work has also been done on techniques for simulating hierarchical, hybrid systems (e.g. [15] and [16]).
Reference: [13] <author> V. Borkar, M. S. Branicky, and S. K. Mitter, </author> <title> "A unified framework for hybrid control." </title> <type> (preprint). </type>
Reference-contexts: This is not a rule however as the literature also contains examples of systems that show active (on-line) design of the hybrid controllers (e.g. [12] and <ref> [13] </ref>) as well as attempts of formulating a consistent interface that is not case specific (e.g. [14]). In addition to theoretical formalisms a lot of work has also been done on techniques for simulating hierarchical, hybrid systems (e.g. [15] and [16]).
Reference: [14] <author> R. W. Brockett, </author> <title> "Pulse driven dynamical systems." </title> <type> preprint. </type>
Reference-contexts: This is not a rule however as the literature also contains examples of systems that show active (on-line) design of the hybrid controllers (e.g. [12] and [13]) as well as attempts of formulating a consistent interface that is not case specific (e.g. <ref> [14] </ref>). In addition to theoretical formalisms a lot of work has also been done on techniques for simulating hierarchical, hybrid systems (e.g. [15] and [16]). In this paper we present a case study in the design of hybrid control systems.
Reference: [15] <author> A. Back, J. Guckenheimer, and M. Myers, </author> <title> "A dynamical simulation facility for hybrid systems," </title> <type> Tech. Rep. 92-6, </type> <institution> Cornell University, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: In addition to theoretical formalisms a lot of work has also been done on techniques for simulating hierarchical, hybrid systems (e.g. <ref> [15] </ref> and [16]). In this paper we present a case study in the design of hybrid control systems. We illustrate the problems associated with their design and verification by means of an example, the Intelligent Vehicle Highway System (IVHS) designed in the framework of the PATH 2 project.
Reference: [16] <author> L. Tavernini, </author> <title> "Differential automata and their simulators," Nonlinear Analysis, </title> <journal> Theory, Methods and Applications, </journal> <volume> vol. 11(6), </volume> <pages> pp. 665-683, </pages> <year> 1987. </year>
Reference-contexts: In addition to theoretical formalisms a lot of work has also been done on techniques for simulating hierarchical, hybrid systems (e.g. [15] and <ref> [16] </ref>). In this paper we present a case study in the design of hybrid control systems. We illustrate the problems associated with their design and verification by means of an example, the Intelligent Vehicle Highway System (IVHS) designed in the framework of the PATH 2 project.
Reference: [17] <author> A. Hsu, F. Eskafi, S. Sachs, and P. Varaiya, </author> <title> "The design of platoon maneuver protocols for IVHS," </title> <type> Tech. Rep. </type> <institution> UCB-ITS-PRR-91-6, University of California, Berkeley, </institution> <year> 1991. </year>
Reference-contexts: The current design <ref> [17] </ref> uses protocols, in the form of finite state machines, to organize the maneuvers in a systematic way. They receive the commands of the link layer and aggregated sensor information from the individual vehicles (of the form "there is a vehicle in the adjacent lane"). <p> In Section 3.1 the results in [21] that describe a possible design for the regulation layer will be presented while in Section 3.2 we will give an outline of the results in <ref> [17] </ref> where the design of the coordination layer is described. Finally in Section 3.3 we will discuss the results in [22] where an interface between these two layers is presented. References to alternative designs are also provided. The references provide proofs of performance bounds for the individual layers. <p> The task of this discrete layer is to provide a consistent way of coordinating the maneuvers of adjacent platoons so that they are effective (vehicles get to their destination) and efficient (capacity is maximized) without compromising safety. To facilitate the analysis and keep the problem tractable, the design in <ref> [17] </ref> distinguishes only three maneuvers: Merge to form a single platoon from two platoons, Split to do the opposite and Change to move a vehicle from one lane to the other. <p> The coordination layer controller is supposed to carry out these three maneuvers efficiently and safely. To accomplish this, the coordination layer of each vehicle exchanges messages with neighboring vehicles according to certain protocols (which in <ref> [17] </ref> are modeled by finite state machines). When mutual agreement (coordination) is reached, it commands the regulation layer to carry out the appropriate maneuver. The protocols were verified, to posses certain desirable properties using an automated software verification tool, COSPAN [27].
Reference: [18] <author> J. K. Hedrick, D.McMahon, V. Narendran, and D. Swaroop, </author> <title> "Longitudinal vehicle controller design for IVHS system," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 3107-3112, </pages> <year> 1991. </year>
Reference-contexts: similar to the objectives of human drivers, this control law is used as the default for a leader, i.e. it is the law implemented unless there is a specific command to do otherwise. * Follower control law: This is the default control law for the followers in a platoon (see <ref> [18, 20] </ref>). Its task is simply to track the velocity of the vehicle in front of it in the same platoon, while keeping a close distance behind it (1 meter in this case). * Merge control law: Merge is the action taken by two platoons that want to become one.
Reference: [19] <author> H. Peng and M. Tomizuka, </author> <title> "Vehicle lateral control for highway automation," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 788-794, </pages> <year> 1990. </year>
Reference: [20] <author> S. Sheikholeslam and C. A. Desoer, </author> <title> "Longitudinal control of a platoon of vehicles," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 291-297, </pages> <year> 1990. </year>
Reference-contexts: similar to the objectives of human drivers, this control law is used as the default for a leader, i.e. it is the law implemented unless there is a specific command to do otherwise. * Follower control law: This is the default control law for the followers in a platoon (see <ref> [18, 20] </ref>). Its task is simply to track the velocity of the vehicle in front of it in the same platoon, while keeping a close distance behind it (1 meter in this case). * Merge control law: Merge is the action taken by two platoons that want to become one.
Reference: [21] <author> D. Godbole and J. Lygeros, </author> <title> "Longitudinal control of the lead car of a platoon," </title> <type> Tech. Rep. PATH Memorandum 93-7, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1993. </year>
Reference-contexts: In order to do this we will first describe briefly a possible IVHS design for which a dedicated simulation tool has been developed. In Section 3.1 the results in <ref> [21] </ref> that describe a possible design for the regulation layer will be presented while in Section 3.2 we will give an outline of the results in [17] where the design of the coordination layer is described. <p> This process simplifies the task of analyzing the stability and performance of the algorithms. The regulation layer contains six such control laws: * Leader Control law: We assume that the platoon leaders will implement an Autonomous Intelligent Cruise Control 2 (AICC) law like the one presented in <ref> [21] </ref>. The goal of this controller is to maintain safe inter-platoon spacing (which in [21] is taken as a constant time headway of 1 second) and track the optimal velocity determined by the link layer (typically 60-65 miles per hour) if possible. <p> The regulation layer contains six such control laws: * Leader Control law: We assume that the platoon leaders will implement an Autonomous Intelligent Cruise Control 2 (AICC) law like the one presented in <ref> [21] </ref>. The goal of this controller is to maintain safe inter-platoon spacing (which in [21] is taken as a constant time headway of 1 second) and track the optimal velocity determined by the link layer (typically 60-65 miles per hour) if possible. <p> State feedback is then used to stabilize the closed loop system about this trajectory and hence eliminate the effect of any acceleration or deceleration of the leading platoon (see <ref> [21] </ref>). 2 See [25] for a different design of AICC control law. 6 * Split Control law: Split is exactly the opposite of merge. <p> This action is in principle similar to a split as discussed in <ref> [21] </ref>. Both the longitudinal and lateral components of this maneuver are carried out by controllers that are designed in the same way as the merge or split controllers. * Lateral control law: The objective of this law is to keep the vehicle in the center of the lane. <p> In particular, we can identify a region in the state space of the lead vehicle, corresponding to certain severe disturbances, from which the lead control can not recover. (see <ref> [21] </ref> for details.) 7 3.2 Discrete Layer The discrete layer works at a more abstract level than the continuous layer. Many different formalisms exist for describing this layer; standard choices include finite state machines, Petri or Neural Nets and Fuzzy Logic among others.
Reference: [22] <author> J. Lygeros and D. Godbole, </author> <title> "An interface between continuous and discrete-event controllers for vehicle automation," </title> <type> Tech. Rep. PATH Memorandum 93-8, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1993. </year>
Reference-contexts: Finally in Section 3.3 we will discuss the results in <ref> [22] </ref> where an interface between these two layers is presented. References to alternative designs are also provided. The references provide proofs of performance bounds for the individual layers. Still however no proof of performance for the overall design exists. <p> If at any stage the maneuver becomes hazardous it aborts it, notifies the coordination layer of its decision (symbol) and switches to a different continuous control law that will get the system back to a safe configuration. Unfortunately there is no systematic way of verifying the complete interface. <ref> [22] </ref> describes the verification of the discrete part of the interface, where the continuous state considerations are ignored or abstracted. However, the addition of the actual continuous effects to the framework in a consistent way is not supported by the current theory. <p> However, the actual trajectory will deviate from the desired one if the limits of the actuators (throttle and brake) are reached. To avoid this possibility, the interface aborts the maneuver when it detects the danger of actuator saturation (see <ref> [22] </ref>). After aborting the maneuver the system should find itself in a position from which it can continue safely under the AICC lead control law. The simulation indicates that under extreme conditions this may not be true and merging may cause a major hazard.
Reference: [23] <author> F. Eskafi, D. Khorramabadi, and P. Varaiya, "Smartpath: </author> <title> An automated highway system simulator," </title> <type> Tech. Rep. PATH Memorandum 92-3, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: References to alternative designs are also provided. The references provide proofs of performance bounds for the individual layers. Still however no proof of performance for the overall design exists. The only means available for testing it at the moment is the SmartPath simulator <ref> [23] </ref>. In Section 4 of this report we will present the results of extensive simulations performed using this tool. It turns out that the performance of the combined system is not quite the expected. <p> The result was a dedicated simulator, SmartPath, which is described in <ref> [23] </ref>. An effort was made to make the simulator as flexible and modular as possible so that changes in the design (e.g. alternative regulation layer controllers) can be implemented easily.
Reference: [24] <author> B. Rao and P. Varaiya, </author> <title> "Roadside intelligence for flow control in an IVHS," </title> <type> tech. rep., PATH Technical Memo, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1993. </year> <month> 16 </month>
Reference-contexts: We will focus our attention on the regulation (continuous) and coordination (discrete) layers and their interface. It should be noted that extensive work has also been done in the link layer design (see <ref> [24] </ref>) while work is already in progress for the network layer. The link layer control scheme has also been added to the SmartPath simulator.
Reference: [25] <author> P. Ioannou, Z. Xu, S. Eckert, D. Clemons, and T. Sieja, </author> <title> "Intelligent cruise control: Theory and experiments," </title> <booktitle> in IEEE Control and Decision Conference, </booktitle> <pages> pp. 1885-1890, </pages> <year> 1993. </year>
Reference-contexts: State feedback is then used to stabilize the closed loop system about this trajectory and hence eliminate the effect of any acceleration or deceleration of the leading platoon (see [21]). 2 See <ref> [25] </ref> for a different design of AICC control law. 6 * Split Control law: Split is exactly the opposite of merge. A follower becomes the leader of all the cars that follow it (in the same platoon) and decelerates until it reaches safe inter-platoon distance from the mother platoon.
Reference: [26] <author> A. Hitchcock, </author> <title> "A specification of an automated freeway with vehicle-born intelligence," </title> <type> tech. rep., PATH Technical Memo, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1994. </year>
Reference-contexts: Clearly these assumptions lead to a rather restricted set of possible behaviors. It may be possible to obtain better designs by relaxing some of them (see for example <ref> [26] </ref>). However, the restrictions allow us to keep track of the problem and prove that the design possesses certain desirable properties. The coordination layer controller is supposed to carry out these three maneuvers efficiently and safely.
Reference: [27] <author> Z. Har'El and R. Kurshan, </author> <title> Cospan User's Guide. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1987. </year>
Reference-contexts: When mutual agreement (coordination) is reached, it commands the regulation layer to carry out the appropriate maneuver. The protocols were verified, to posses certain desirable properties using an automated software verification tool, COSPAN <ref> [27] </ref>. For the purpose of this verification, the behavior of the continuous layer was abstracted by a set of finite state machines, that are supposed to model the behavior of the sensors and the conventional controllers from the protocol point of view.
Reference: [28] <author> A. Hitchcock, </author> <title> "Casualties in accidents occuring during split and merge maneuvers," </title> <type> tech. rep., PATH Technical Memo 93-9, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1993. </year>
Reference-contexts: Hence, even though A decelerates at saturation level as well, a crash is unavoidable. A situation where such a crash is observed is shown in Figures 9 and 10. Note: Vehicle crashes associated with merge maneuver were also predicted by A. Hitchcock (See <ref> [28] </ref>) using Fault Tree analysis method. 4.4 Multiple lane changes from a single platoon The situation described above, where many vehicles wish to change out of a lane thus creating multiple splits, caused yet another kind of crash. The scenario is outlined in Figure 6.
Reference: [29] <author> R. Alur, C. Courcoubetis, and D. Dill, </author> <title> "Model checking for real-time systems," </title> <booktitle> Logic in Computer Science, </booktitle> <pages> pp. 414-425, </pages> <year> 1990. </year>
Reference-contexts: These observations led to the conclusion that in order to fully trust the design we need verification tools that test the performance of the combined hybrid system. Computer aided verification of timed <ref> [29] </ref> and hybrid systems [30, 31] is currently an active area of research. For verification, the actual behaviors of the hybrid systems are usually abstracted into a finite set of behaviors.
Reference: [30] <author> R. Alur, C. Courcoubetis, T. A. Henzinger, and P. H. Ho, </author> <title> "Hybrid automaton: An algorithmic approach to the specification and verification of hybrid systems," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, </editor> <booktitle> eds.), </booktitle> <pages> pp. 209-229, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: These observations led to the conclusion that in order to fully trust the design we need verification tools that test the performance of the combined hybrid system. Computer aided verification of timed [29] and hybrid systems <ref> [30, 31] </ref> is currently an active area of research. For verification, the actual behaviors of the hybrid systems are usually abstracted into a finite set of behaviors. Thus one trajectory of the abstraction will include many possible system trajectories which are "close" to it in some sense.
Reference: [31] <author> A. Puri and P. Varaiya, </author> <title> "Decidebility of hybrid systems with rectangular differential inclusions." </title> <type> (preprint). 17 </type>
Reference-contexts: These observations led to the conclusion that in order to fully trust the design we need verification tools that test the performance of the combined hybrid system. Computer aided verification of timed [29] and hybrid systems <ref> [30, 31] </ref> is currently an active area of research. For verification, the actual behaviors of the hybrid systems are usually abstracted into a finite set of behaviors. Thus one trajectory of the abstraction will include many possible system trajectories which are "close" to it in some sense.
References-found: 31

