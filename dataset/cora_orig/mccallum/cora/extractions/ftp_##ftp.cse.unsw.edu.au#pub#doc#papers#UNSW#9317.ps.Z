URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9317.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Title: Semantics for CCS and Fast Deadlock Detection  
Author: Jacek Olszewski 
Affiliation: SCHOOL OF COMPUTER SCIENCE AND ENGINEERING THE UNIVERSITY OF NEW SOUTH WALES  
Note: Non-Interleaving  
Abstract: SCS&E Report 9317 December, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cleaveland R., Parrow J., Steffen B.: </author> <title> The Concurrency Workbench: A Semantics-Based Tool for the Verification of Concurrent Systems, </title> <journal> ACM TOPLAS 15, </journal> <volume> No. 1, </volume> <pages> pp. 36-72, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction The first step of analysis of parallel system specifications is usually an attempt to detect or to disprove deadlocks (cf. for instance examples of specifications in <ref> [1] </ref>). It is also the most time consuming function of any available analysis tool set. Known deadlock detection techniques suffer from so-called state space explosion problem. The problem lies in a very large number of states in which the system under analysis can be found. <p> Before other examples are considered, the notion of deadlock should be clarified. In [8] deadlock is said to be possible, if the composition is not ready for all actions that might be required by its environment. On the other hand, in <ref> [1] </ref> two not identical notions of deadlock are given. One describes deadlock as a state in which the composition cannot perform any actions. In the other, a state of the composition is said to be deadlocked, if it can engage in o but is never capable of any observable actions. <p> In the practical direction, the analyser described here should be equipped with a CCS syntax checker, and a verifier of compliance with assumptions under which analysis makes sense. Ideally, it should become a part of a software set of tools for verification of parallel systems (cf. eg. <ref> [1] </ref>).
Reference: [2] <author> Droste M.: </author> <title> Concurrent Automata and Domains, </title> <journal> Intern. J. of Foundations of Comp. Sc. </journal> <volume> 3, No. 4, </volume> <pages> pp. 389-417, </pages> <year> 1992. </year>
Reference-contexts: The possibility of firing a transition simultaneously with others reduces the number of states by half. In another example of such an approach, Droste <ref> [2] </ref> also proposes models of parallel systems where interactions between components take place simultaneously. For CCS, the same idea can be expressed as a possibility of simultaneous actions performed by different components of a given composition (cf. eg. [4, 5]).
Reference: [3] <author> Inmos Limited: </author> <title> Occam 2 reference manual. </title> <address> New York: </address> <publisher> Prentice-Hall 1988 </publisher>
Reference-contexts: Assumptions 1-3 of section 3). The first 2 of them are not new. The requirement that choices are guarded by input actions can be found eg. in OCCAM <ref> [3] </ref> and ADA [12]. One action name in definitions of only 2 composition components is also required by CSP [6] (one channel of communication may be used by 2 processes only). The latter is a serious limitation, since it practically excludes systems where processes are instantiated dynamically.
Reference: [4] <author> Fidge C.J.: </author> <title> Process Algebra Traces Augmented with Casual Relationships, in (K.R. Parker, G.A. </title> <editor> Rose, eds.) </editor> <title> Formal Description Techniques 4, </title> <publisher> North-Holland, </publisher> <pages> pp. 527-541, </pages> <year> 1992. </year>
Reference-contexts: In another example of such an approach, Droste [2] also proposes models of parallel systems where interactions between components take place simultaneously. For CCS, the same idea can be expressed as a possibility of simultaneous actions performed by different components of a given composition (cf. eg. <ref> [4, 5] </ref>). However, the main aim of the cited works is to extend CCS with information concerning required timing of process interactions, so as to allow specification and modelling of real time systems.
Reference: [5] <author> Fidge C.J.: </author> <title> A Constraint-Oriented Real-Time Process Calculus, </title> <editor> in (M. Diaz, R. Groz, eds.) </editor> <title> Formal Description Techniques 5, </title> <publisher> North-Holland, </publisher> <pages> pp. 363-378, </pages> <year> 1993. </year>
Reference-contexts: In another example of such an approach, Droste [2] also proposes models of parallel systems where interactions between components take place simultaneously. For CCS, the same idea can be expressed as a possibility of simultaneous actions performed by different components of a given composition (cf. eg. <ref> [4, 5] </ref>). However, the main aim of the cited works is to extend CCS with information concerning required timing of process interactions, so as to allow specification and modelling of real time systems.
Reference: [6] <author> Hoare C.A.R.: </author> <title> Communicating Sequential Processes, </title> <publisher> Prentice-Hall, </publisher> <year> 1985 </year>
Reference-contexts: The next section presents such a tool based on transformation of CCS compositions into Petri nets, and generation of the nets reachability trees [11]. 4 Analysis of CCS compositions The tool described here is a modification and extension of a program developed originally for analysis of CSP <ref> [6] </ref> specifications of parallel systems under interleaving semantics [10]. Reasons for using Petri net techniques in both cases, CSP and CCS, lie in their ability to 9 generate reachability trees as finite representations of possibly infinite languages of given nets. <p> Occurrence of such a line on output indicates that Assumption 2 of section 3 is not satisfied. The next section presents some examples of CCS compositions and results of their analysis using the program described above. 13 5 Examples The first example, analysis of 5 philosophers (cf. eg. <ref> [6] </ref>), illustrates a very efficient way of deadlock detection. <p> Assumptions 1-3 of section 3). The first 2 of them are not new. The requirement that choices are guarded by input actions can be found eg. in OCCAM [3] and ADA [12]. One action name in definitions of only 2 composition components is also required by CSP <ref> [6] </ref> (one channel of communication may be used by 2 processes only). The latter is a serious limitation, since it practically excludes systems where processes are instantiated dynamically. Assumption 3 processes are cyclic may seem natural.
Reference: [7] <author> Mazurkiewicz A., Rabinovich A., Trakhtenbrot B.A.: </author> <title> Connectedness and Synchronization, </title> <booktitle> Theor. Comp. Science 90, </booktitle> <pages> 171-184, </pages> <year> 1991. </year>
Reference-contexts: The theoretical direction should aim at relaxing the constraints imposed upon CCS specifications to which fast deadlock detection techniques can be applied. For instance, it should be investigated whether Assumptions 1-3 could be reformulated and relaxed by an assumption that compositions were connected <ref> [7] </ref>. Two processes are said to be connected, if the same action or co-action name occurs in their definitions. A composition is said to be connected, if its components are connected with one another. For practical reasons, this assumption should be satisfied notwithstanding.
Reference: [8] <author> Milner R.: </author> <title> Communication and Concurrency. </title> <publisher> Prentice-Hall 1989 </publisher>
Reference-contexts: The aim of this work is to provide a tool for fast analysis of untimed CCS specifications under non-interleaving semantics. The next section presents the formalism of CCS as defined by Milner <ref> [8] </ref>, and its transitional non-interleaving semantics. Section 3 gives a proof of equivalence between interleaving and non-interleaving semantics for a certain class of CCS compositions. Section 4 describes a Petri net based analysis tool for CCS specifications of parallel systems. Section 5 presents some examples of its use. <p> Section 4 describes a Petri net based analysis tool for CCS specifications of parallel systems. Section 5 presents some examples of its use. Section 6 concludes the paper. 2 CCS and its transitional non-interleaving seman tics The notation for CCS specifications and its transitional semantics is taken directly from <ref> [8] </ref>. Let A be a set of actions, and A a set of co-actions. Also, let Act = A [ A [ fo g, where o is a so-called silent action (handshake). Further, let fE i : i 2 Ig be a family of expressions indexed by I. <p> summation and composition have to be taken into the consideration: 1 1. a:E, a Prefix (a 2 Act) 2. fa:E i : i 2 Ig, a Summation (a 2 A) 3. fE i : i 2 Ig, a Composition (E i 1 jE i 2 j : : :) Milner <ref> [8] </ref> explains why (2) has to be the sum of all expressions E i . Here, for reasons explained below, (2) allows only choices guarded by input actions (c.f. the next section). <p> It only represents some number of them, from 1 to the maximum. We may, however, require that it represent all, if we want maximum parallelism at every step of the composition evolution. Before other examples are considered, the notion of deadlock should be clarified. In <ref> [8] </ref> deadlock is said to be possible, if the composition is not ready for all actions that might be required by its environment. On the other hand, in [1] two not identical notions of deadlock are given.
Reference: [9] <author> Mukund M.: </author> <title> Petri Nets and Step Transition Systems, </title> <journal> Intern. Journal of Foundations of Computer Science 3, </journal> <volume> No. 4, </volume> <pages> pp. 443-478, </pages> <year> 1992. </year>
Reference-contexts: As mentioned in the introduction, an analogue to non-interleaving semantics has recently been proposed for Petri nets [15]. Apart from sequences of net-transitions that can be fired one after another, sequences of bags (multisets) of net-transitions are investigated (cf. eg. <ref> [9] </ref>). Each bag is a collection of net-transitions that can be fired simultaneously. It is a bag rather than a set because of so-called autoconcurrency, i.e. assumption that one net-transition may be fired as many times in one multiple firing as marking of its input places allows.
Reference: [10] <author> Olszewski J.: </author> <title> Automatic Analysis of CSP Programs Using Petri Nets, </title> <journal> Australian Computer Science Communications 15, </journal> <volume> No. 1, </volume> <month> February </month> <year> 1993 </year>
Reference-contexts: a tool based on transformation of CCS compositions into Petri nets, and generation of the nets reachability trees [11]. 4 Analysis of CCS compositions The tool described here is a modification and extension of a program developed originally for analysis of CSP [6] specifications of parallel systems under interleaving semantics <ref> [10] </ref>. Reasons for using Petri net techniques in both cases, CSP and CCS, lie in their ability to 9 generate reachability trees as finite representations of possibly infinite languages of given nets. A CCS or CSP specification can be transformed into a Petri net [13].
Reference: [11] <author> Peterson J.L.: </author> <title> Petri net theory and the modelling of systems. </title> <publisher> Prentice-Hall 1981 </publisher>
Reference-contexts: The next section presents such a tool based on transformation of CCS compositions into Petri nets, and generation of the nets reachability trees <ref> [11] </ref>. 4 Analysis of CCS compositions The tool described here is a modification and extension of a program developed originally for analysis of CSP [6] specifications of parallel systems under interleaving semantics [10].
Reference: [12] <author> Pyle I.C.: </author> <title> The Ada Programming Language. </title> <publisher> Prentice Hall, </publisher> <year> 1981 </year>
Reference-contexts: Assumptions 1-3 of section 3). The first 2 of them are not new. The requirement that choices are guarded by input actions can be found eg. in OCCAM [3] and ADA <ref> [12] </ref>. One action name in definitions of only 2 composition components is also required by CSP [6] (one channel of communication may be used by 2 processes only). The latter is a serious limitation, since it practically excludes systems where processes are instantiated dynamically.
Reference: [13] <author> Taubner D.: </author> <title> Finite Representation of CCS and TCSP Programs by Automata and Petri Nets. </title> <publisher> LNCS 369, Springer 1989 16 </publisher>
Reference-contexts: Reasons for using Petri net techniques in both cases, CSP and CCS, lie in their ability to 9 generate reachability trees as finite representations of possibly infinite languages of given nets. A CCS or CSP specification can be transformed into a Petri net <ref> [13] </ref>. Then, the net reachability tree can be generated and interpreted as a representation of all possible sequences of single or multiple transitions that may take place in the life of the specified system.
Reference: [14] <author> Turner D.: Miranda: </author> <title> a Non-Strict Functional Language with Polymorphic Types. </title> <booktitle> In Functional Languages and Computer Architectures, </booktitle> <publisher> Springer 1985. </publisher>
Reference-contexts: It may mean taking more than one token from one place, and/or putting more than one token 12 into one, possibly different place of the net. The tool of analysis has been developed as a Miranda <ref> [14] </ref> program that accepts CCS compositions specified in a notation that requires the words: In for actions, Out for co-actions, Or for summation, Par for composition, and Proc for the use of process names on the right hand sides of process definitions. Process and action names are arbitrary strings.
Reference: [15] <author> Valmari A.: </author> <title> Stubborn Sets for Reduced State Space Generation, </title> <editor> in (Rozenberg G., ed.) </editor> <booktitle> Advances in Petri Nets 1990, </booktitle> <publisher> LNCS 483, Springer 1991. </publisher> <pages> 17 </pages>
Reference-contexts: So far, only moderately sized systems have been analysed successfully with the use of existing tools. Recently, new analysis techniques have been proposed, that take advantage of con-currency with which state transitions can take place. For instance, Valmari <ref> [15] </ref> proposes such a technique for analysis of Petri nets. It requires determination of which transitions of a given net can be fired simultaneously, without any change to the terminal states of the net and to the existence of non-termination. <p> It corresponds to interleaving semantics for both, the CCS composition and its corresponding Petri net. As mentioned in the introduction, an analogue to non-interleaving semantics has recently been proposed for Petri nets <ref> [15] </ref>. Apart from sequences of net-transitions that can be fired one after another, sequences of bags (multisets) of net-transitions are investigated (cf. eg. [9]). Each bag is a collection of net-transitions that can be fired simultaneously.
References-found: 15

