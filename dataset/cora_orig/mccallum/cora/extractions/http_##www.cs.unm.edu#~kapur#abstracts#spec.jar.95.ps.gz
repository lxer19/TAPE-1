URL: http://www.cs.unm.edu/~kapur/abstracts/spec.jar.95.ps.gz
Refering-URL: http://www.cs.unm.edu/~kapur/abstracts/spec.jar.95.html
Root-URL: http://www.cs.unm.edu
Email: email: kapur@cs.albany.edu, subu@cs.albany.edu  
Title: New Uses of Linear Arithmetic in Automated Theorem Proving by Induction  
Author: Deepak Kapur and M. Subramaniam 
Keyword: Key Words: Induction, Automated Theorem Proving, Heuristics, Linear Arith metic, Presburger Arithmetic, Generalization, Semantic Unification.  
Address: New York, Albany, NY 12222, U.S.A.  
Affiliation: Computer Science Department, State University of  
Abstract: Zhang, Kapur and Krishnamoorthy introduced a cover set method for designing induction schemes for automating proofs by induction from specifications expressed as equations and conditional equations. This method has been implemented in the theorem prover Rewrite Rule Laboratory (RRL) and a proof management system Tecton built on top of RRL, and it has been used to prove many nontrivial theorems and reason about sequential as well as parallel programs. The cover set method is based on the assumption that a function symbol is defined using a finite set of terminating (conditional or unconditional) rewrite rules. The termination ordering employed in orienting the rules is used to perform proofs by well-founded induction. The left side of the rules are used to design different cases of an induction scheme, and recursive calls to the function made in the right side can be used to design appropriate instantiations for generating induction hypotheses. A weakness of this method is that it relies on syntactic unification for generating an induction scheme for a conjecture. This paper goes a step further by proposing semantic analysis for generating an induction scheme for a conjecture from a cover set. We discuss the use of a decision procedure for Presburger arithmetic (quantifier-free theory of numbers with the addition operation and relational predicates &gt;; &lt;; 6=; =; ; ) for performing semantic analysis about numbers. The decision procedure is used to generate appropriate induction schemes for a conjecture using cover sets of function taking numbers as arguments. This extension of the cover set method automates proofs of many theorems which otherwise, require human guidance and hints. The effectiveness of the method is demonstrated using some examples which commonly arise in reasoning about specifications and programs. It is also shown how semantic analysis using a Presburger arithmetic decision procedure can be used for checking the completeness of a cover set of a function defined using operations such as + and on numbers. Using this check, many function definitions used in a proof of the prime factorization theorem stating that every number can be factored uniquely into prime factors, which had to be checked manually, can now be checked automatically in RRL. The use of the decision procedure for guiding generalization for generating conjectures and merging induction schemes is also illustrated. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R.S. Boyer and J S. Moore, </author> <title> A Computational Logic. </title> <booktitle> ACM Monographs in Computer Science, </booktitle> <year> 1979. </year>
Reference-contexts: This insight often results in generation of appropriate induction hypotheses which in many cases, can be used to prove (or disprove) a conjecture. This approach is supported in Boyer and Moore's theorem prover along with other heuristics <ref> [1, 2] </ref>, and has been successfully used to prove many nontrivial theorems as well as reason about hardware and software. Inspired by Boyer and Moore's work, Zhang, Kapur and Krishnamoorthy [13, 12] introduced a cover set method for designing induction schemes for automating proofs by induction from equations. <p> Examples We illustrate the algorithm on some examples involving the greatest common divisor (gcd) function. The properties illustrated below cannot be proved with the cover set induction method without using LA. The methods implemented for induction in N qthm <ref> [1] </ref> are also unsuccessful in establishing these properties (these properties can be proved using hints and other tricks, however). <p> Related Work The seminal work on mechanizing induction is that of Boyer and Moore <ref> [1, 2] </ref>. In [1], Boyer and Moore discussed recursion analysis of definitions and the formulation of induction schemes for a given conjecture. Many other heuristics which manipulate induction schemes towards the choice of the most appropriate induction scheme for a given conjecture are also developed there. <p> Related Work The seminal work on mechanizing induction is that of Boyer and Moore [1, 2]. In <ref> [1] </ref>, Boyer and Moore discussed recursion analysis of definitions and the formulation of induction schemes for a given conjecture. Many other heuristics which manipulate induction schemes towards the choice of the most appropriate induction scheme for a given conjecture are also developed there. <p> A template applies to a term if the changeables are all distinct variables and none of them is among the unchangeables." In almost all the examples discussed in this paper, the methods given in <ref> [1] </ref> would be inapplicable. For instance, in the definition of gcd both the arguments of gcd are required to justify the termination of the definition and hence are in measured positions. <p> Further, both of them are changed in the recursive calls to gcd in the definition and are therefore, changeables in the sense of <ref> [1] </ref>. Thus given a conjecture of the form gcd (m + m; 2) = 2 , an induction scheme cannot be formulated corresponding to the term gcd (m + m; 2) since the arguments to gcd are nonvariables. <p> Some induction schemes which must otherwise be specified using hint, can be automatically generated using the linear arithmetic procedure. The description of merging schemes in this paper follows along the lines of <ref> [1] </ref>. In [1] whenever two schemes are merged, the basis case of the merged scheme is obtained by negating the conditions of the merged induction cases. <p> Some induction schemes which must otherwise be specified using hint, can be automatically generated using the linear arithmetic procedure. The description of merging schemes in this paper follows along the lines of <ref> [1] </ref>. In [1] whenever two schemes are merged, the basis case of the merged scheme is obtained by negating the conditions of the merged induction cases.
Reference: 2. <author> R.S. Boyer and J S. Moore, </author> <title> A Computational Logic Handbook. </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: This insight often results in generation of appropriate induction hypotheses which in many cases, can be used to prove (or disprove) a conjecture. This approach is supported in Boyer and Moore's theorem prover along with other heuristics <ref> [1, 2] </ref>, and has been successfully used to prove many nontrivial theorems as well as reason about hardware and software. Inspired by Boyer and Moore's work, Zhang, Kapur and Krishnamoorthy [13, 12] introduced a cover set method for designing induction schemes for automating proofs by induction from equations. <p> Related Work The seminal work on mechanizing induction is that of Boyer and Moore <ref> [1, 2] </ref>. In [1], Boyer and Moore discussed recursion analysis of definitions and the formulation of induction schemes for a given conjecture. Many other heuristics which manipulate induction schemes towards the choice of the most appropriate induction scheme for a given conjecture are also developed there. <p> N qthm provides a mechanism for performing user-directed induction using the so-called hint directive <ref> [2] </ref>. A user can specify a function definition to be used for generating an induction scheme. The variables in the conjecture and additional dummy variables, if required are provided as arguments to the function being specified.
Reference: 3. <author> R.S. Boyer and J S. Moore, </author> <title> "Integrating decision procedures into heuristic theorem provers: A case study of linear arithmetic," </title> <booktitle> Machine Intelligence 11 (1988) 83-157. </booktitle>
Reference: 4. <author> N. Dershowitz, </author> <title> "Termination of rewriting," </title> <journal> J. of Symbolic Computation 3, </journal> <pages> 69-116, </pages> <year> 1987. </year>
Reference-contexts: Subramaniam into a terminating rewrite rule, i.e. there exists a well-founded reduction ordering O over T (F; X ) such that l i O r i and l i O cond i <ref> [4] </ref>. Constructors of a data structure need not be free (as in the case of integers and finite sets). It is assumed that constructor relations can be expressed as a finite set of equations. A function may be defined using nonconstructor symbols.
Reference: 5. <author> J.-P. Jouannaud and E. Kounalis, </author> <title> "Automatic proofs by induction in theories without constructors," </title> <booktitle> Information and Computation 82, </booktitle> <pages> 1-33, </pages> <year> 1989. </year>
Reference-contexts: As proved earlier, an induction scheme generated using a complete cover set is sound. This is ensured if the terminating rewrite rules defining a function whose left sides are used as the basis for constructing the cover set, completely define the function. In <ref> [5, 8] </ref>, algorithms for checking completeness of constructor-based definitions expressed as terminating rewrite rules arithjar.tex; 14/06/1995; 17:08; no v.; p.30 30 Deepak Kapur and M. Subramaniam are discussed; for background information on this topic, an interested reader may also consult [6].
Reference: 6. <author> D. Kapur, </author> <title> "An automated tool for analyzing completeness of equational specifications," </title> <booktitle> Proc. of International Symposium on Software Testing and Analysis (ISSTA), </booktitle> <address> Seattle, </address> <month> August </month> <year> 1994, </year> <pages> 28-43. </pages>
Reference-contexts: In [5, 8], algorithms for checking completeness of constructor-based definitions expressed as terminating rewrite rules arithjar.tex; 14/06/1995; 17:08; no v.; p.30 30 Deepak Kapur and M. Subramaniam are discussed; for background information on this topic, an interested reader may also consult <ref> [6] </ref>. For LA-based definitions the linear arithmetic procedure can be used for checking the completeness. This fills a major gap in the use of the cover set method for mechanizing induction in RRL.
Reference: 7. <author> D. Kapur, D.R. Musser, and X. Nie, </author> <title> "An Overview of the Tecton Proof System," </title> <journal> Theoretical Computer Science Journal, </journal> <note> special issue on Formal Methods in Databases and Software Engineering, </note> <editor> (ed. V. Alagar), </editor> <volume> Vol. 133, </volume> <month> October, </month> <year> 1994, </year> <pages> 307-339. </pages>
Reference-contexts: This method has been implemented in the theorem prover Rewrite Rule Laboratory (RRL) [10] and a proof management system Tecton built on top of RRL <ref> [7] </ref>, and has been used to prove many nontrivial theorems and reason about sequential as well as parallel programs. The cover set method is based on the assumption that a function symbol is defined using a finite set of terminating (conditional or unconditional) rewrite rules.
Reference: 8. <author> D. Kapur, P. Narendran, D. Rosenkrantz, H. Zhang., "Sufficient-completeness, </author> <title> quasi-reducibility and their complexity," </title> <journal> Acta Informatica, </journal> <volume> 28, </volume> <year> 1991, </year> <pages> 311-350. </pages>
Reference-contexts: As proved earlier, an induction scheme generated using a complete cover set is sound. This is ensured if the terminating rewrite rules defining a function whose left sides are used as the basis for constructing the cover set, completely define the function. In <ref> [5, 8] </ref>, algorithms for checking completeness of constructor-based definitions expressed as terminating rewrite rules arithjar.tex; 14/06/1995; 17:08; no v.; p.30 30 Deepak Kapur and M. Subramaniam are discussed; for background information on this topic, an interested reader may also consult [6].
Reference: 9. <author> D. Kapur and X. Nie, </author> <title> "Reasoning about numbers in Tecton", </title> <booktitle> Proceedings of the 8th International Symposium on Methodologies for Intelligent Systems, </booktitle> <address> (ISMIS'94), Charlotte, North Carolina, </address> <month> October </month> <year> 1994, </year> <pages> 57-70. </pages>
Reference-contexts: The main reason for focusing on a linear arithmetic procedure is that it is already integrated in several theorem proving systems such as Nqthm, PVS, NEVER and RRL. Currently in RRL, the linear arithmetic procedure is used to prove simple facts or discharge conditions arising in lemmas or definitions <ref> [9] </ref>. In this paper, we are proposing another important use of the linear arithmetic procedure. <p> Further if there are no relations on constructors, implying E is the empty set, then in the definition of a complete cover set, = E is replaced by = and matching can be used. Contextual rewriting with linear arithmetic procedure implemented in <ref> [10, 9] </ref> is used to discharge the conditions while checking completeness of cover sets. Henceforth, unless stated explicitly, all the cover sets of the function symbols are assumed to be complete. 2.2. <p> We have manually exercised this extension quite a bit on a number of examples and the results are extremely encouraging. Since RRL already supports a decision procedure for linear arithmetic <ref> [9] </ref>, we plan to extend the procedure to handle the various applications discussed in this paper.
Reference: 10. <author> D. Kapur and H. Zhang, </author> <title> "An Overview of Rewrite Rule Laboratory (RRL)," </title> <journal> J. of Computer and Mathematics with Applications, </journal> <volume> 29, 2, </volume> <year> 1995, </year> <pages> 91-114. </pages>
Reference-contexts: Inspired by Boyer and Moore's work, Zhang, Kapur and Krishnamoorthy [13, 12] introduced a cover set method for designing induction schemes for automating proofs by induction from equations. This method has been implemented in the theorem prover Rewrite Rule Laboratory (RRL) <ref> [10] </ref> and a proof management system Tecton built on top of RRL [7], and has been used to prove many nontrivial theorems and reason about sequential as well as parallel programs. <p> Further if there are no relations on constructors, implying E is the empty set, then in the definition of a complete cover set, = E is replaced by = and matching can be used. Contextual rewriting with linear arithmetic procedure implemented in <ref> [10, 9] </ref> is used to discharge the conditions while checking completeness of cover sets. Henceforth, unless stated explicitly, all the cover sets of the function symbols are assumed to be complete. 2.2.
Reference: 11. <author> C. Walther, </author> <title> "Combining Induction Axioms By Machine", </title> <booktitle> Proc. of Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: Using the merged induction cases the conjecture is easily proved. As the next example consider the following conjecture from <ref> [11] </ref>, (P 7 ) : quot (m; 4) = hf (hf (m)); based on the following two definitions, quot which computes the quotient of dividing a natural number x by a natural number y and hf which halves a natural number, 1: quot (x; 0) ! 0; 2: quot (x; y)
Reference: 12. <author> H. Zhang, </author> <title> Reduction, superposition and induction: automated reasoning in an equational logic. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, Rensselaer Polytechnic Institute, </institution> <address> Troy, NY, </address> <year> 1988. </year>
Reference-contexts: This approach is supported in Boyer and Moore's theorem prover along with other heuristics [1, 2], and has been successfully used to prove many nontrivial theorems as well as reason about hardware and software. Inspired by Boyer and Moore's work, Zhang, Kapur and Krishnamoorthy <ref> [13, 12] </ref> introduced a cover set method for designing induction schemes for automating proofs by induction from equations. <p> We use O E to denote such an ordering. For any two terms t 1 and t 2 , t 1 O E t 2 iff for any ground substitution oe and t = E oe (t 1 ), t O oe (t 2 ) <ref> [13, 12] </ref>. 6 C [fp 1 t 1 ; ; p n t n g] denotes the conjecture C with its subterm at position p i replaced by the term t i 1 i n. 7 See, however, subsection 4.1.1 in which it is shown how incomplete cover sets can be
Reference: 13. <author> H. Zhang, D. Kapur, </author> <title> and M.S. Krishnamoorthy, "A mechanizable induction principle for equational specifications," </title> <booktitle> Proc. of Ninth International Conference on Automated Deduction (CADE-9), </booktitle> <address> Argonne, IL. </address> <publisher> Springer-Verlag LNCS 310, </publisher> <pages> 250-265, </pages> <year> 1988. </year> <note> arithjar.tex; 14/06/1995; 17:08; no v.; p.39 </note>
Reference-contexts: This approach is supported in Boyer and Moore's theorem prover along with other heuristics [1, 2], and has been successfully used to prove many nontrivial theorems as well as reason about hardware and software. Inspired by Boyer and Moore's work, Zhang, Kapur and Krishnamoorthy <ref> [13, 12] </ref> introduced a cover set method for designing induction schemes for automating proofs by induction from equations. <p> We use O E to denote such an ordering. For any two terms t 1 and t 2 , t 1 O E t 2 iff for any ground substitution oe and t = E oe (t 1 ), t O oe (t 2 ) <ref> [13, 12] </ref>. 6 C [fp 1 t 1 ; ; p n t n g] denotes the conjecture C with its subterm at position p i replaced by the term t i 1 i n. 7 See, however, subsection 4.1.1 in which it is shown how incomplete cover sets can be <p> For LA-based definitions the linear arithmetic procedure can be used for checking the completeness. This fills a major gap in the use of the cover set method for mechanizing induction in RRL. For example, in the proof of unique prime factorization theorem reported in <ref> [13] </ref>, the completeness of the definitions of some of the functions (such as div, rem, gcd, primef ac, etc.) and the associated cover sets was established manually. Using the linear arithmetic procedure, all these proofs can be carried out automatically in RRL.
References-found: 13

