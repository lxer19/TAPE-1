URL: http://www.cs.berkeley.edu/~wilkerso/firingfinal.ps
Refering-URL: http://www.cs.berkeley.edu/~wilkerso/
Root-URL: 
Email: E-mail: rafail@cs.Berkeley.EDU  wilkerso@math.berkeley.edu  
Title: Faster Computation On Directed Networks of Automata (Extended Abstract)  
Author: Rafail Ostrovsky Daniel Shawcross Wilkerson 
Address: E-mail:  
Note: and ICSI. Supported by an NSF Postdoctoral Fellowship and ICSI.  
Affiliation: U.C. Berkeley Computer Science Division  U.C. Berkeley Department of Mathematics.  
Abstract: We show how an arbitrary strongly-connected directed network of synchronous finite-state automata (with bounded in- and out-degree) can accomplish a number of basic distributed network tasks in O(N D) time (where D is the diameter of the network and N is the number of processors). These tasks include (among others) the Firing Synchronization Problem; Network Search and Traversal; building outgoing and incoming Spanning Trees; Wake-up and Report When Done; and simulating a step of an undirected network protocol on the underlying graph of the directed network. 
Abstract-found: 1
Intro-found: 1
Reference: [AG-93] <author> Y. Afek and E. </author> <title> Gafni Dis tributed algorithms for Unidirectional networks. </title> <type> manuscript. </type>
Reference-contexts: The network traversal algorithm is a fundamental primitive in its own right <ref> [GA-84, Kut88, ELW-90, AG-93] </ref>. For example, it can be used to convert protocols designed for a bidirectional network to run on the underlying undi-rected graph of the directed network. <p> Tokens are of constant-size (and can be thought of as carrying constant-size messages with them.) This problem is also known as the "Chinese postman problem", where one must completely explore an unknown city which has many one-way streets <ref> [AG-93] </ref>. In undirected networks, a simple DFS will suffice to traverse the network. However, in directed networks, one-way edges may prevent a token from going "back" on a directed edge, and a "detour" must be found instead. <p> A DFS may then be performed using this procedure to traverse edges in the reverse direction <ref> [GA-84, Kut88, ELW-90, AG-93] </ref>. <p> Previously, (in the setting of strongly-connected bounded degree directed networks of synchronous automata) <ref> [GA-84, AG-93] </ref> exhibited a O (N 2 D) solution for the traversal problem, and [ELW-90] showed a O (N 2 ) solution. <p> The token may now travel backwards again on some other edge without interference from the previous backwards communication process. This is the key point of our algorithm, which allows us to avoid a costly "down-tree" <ref> [GA-84, AG-93, ELW-90] </ref> construction, the bottleneck of the previous solutions. Consider a setting where B has a token M that it would like to communicate to A, and A has an edge to B, as above.
Reference: [ELW-90] <author> S. Even, A. Litman and P. </author> <title> Winkler Computing with Snakes in Directed Networks of Automata. </title> <booktitle> FOCS 1990. </booktitle>
Reference-contexts: DFS, BFS, simulating a step of an undirected graph protocol, etc.). We give O (N D) time solutions to all these problems. Our approach builds upon the best previously known O (N 2 ) algorithms of Even, Lit-man and Winkler <ref> [ELW-90] </ref> for these problems. 1.1 The model In this paper, we consider directed strongly-connected networks. That is, there may exist a one-way communication link between two processors without a link in the opposite direction. <p> Let the synchronization time be the number of time-steps after the first "start" signal until the processors "fire". The goal is to minimize this time. In addition to a large body of work for undi-rected networks (see [M-86]), the FSP problem was considered for directed networks of automata in <ref> [K-78, HN-81, ELW-90] </ref>, where O (N 2 ) was the best previously known synchronization time [ELW-90]. <p> The goal is to minimize this time. In addition to a large body of work for undi-rected networks (see [M-86]), the FSP problem was considered for directed networks of automata in [K-78, HN-81, ELW-90], where O (N 2 ) was the best previously known synchronization time <ref> [ELW-90] </ref>. In this paper, we show how to solve the FSP in O (N D) steps, where D is the diameter of the network and N the the number of processors: Theorem 1 There exists an O (N D) firing synchronization algorithm for strongly-connected directed networks of automata. <p> The network traversal algorithm is a fundamental primitive in its own right <ref> [GA-84, Kut88, ELW-90, AG-93] </ref>. For example, it can be used to convert protocols designed for a bidirectional network to run on the underlying undi-rected graph of the directed network. <p> A DFS may then be performed using this procedure to traverse edges in the reverse direction <ref> [GA-84, Kut88, ELW-90, AG-93] </ref>. <p> A DFS may then be performed using this procedure to traverse edges in the reverse direction [GA-84, Kut88, ELW-90, AG-93]. In this paper we show how a single token can go "backwards" on an edge in an unknown graph (i.e. without any pre-processing, such as the down-tree of <ref> [ELW-90] </ref>.) We call such such an algorithm a backwards communication algorithm since the token can carry a constant-size message with it: Theorem 2 There exists an O (D) backwards communication algorithm for strongly-connected directed networks of automata. <p> We remark that our theorem is actually stronger than stated, and, in fact, is optimal: we achieve backwards communication in time proportional to the length of the smallest directed cycle that includes the edge in question. (The best previous <ref> [ELW-90] </ref> solution for this task which takes O (N 2 ) time.) We use the backwards communication algorithm as a building block in our traversal algorithm. <p> Previously, (in the setting of strongly-connected bounded degree directed networks of synchronous automata) [GA-84, AG-93] exhibited a O (N 2 D) solution for the traversal problem, and <ref> [ELW-90] </ref> showed a O (N 2 ) solution. <p> Using our backwards communication algorithm, in this paper we further reduce this time to O (N D): Theorem 3 There exists an O (N D) network traversal algorithm for strongly-connected directed networks of automata. 1.4 Our contribution The starting point of our investigation is the algorithm of <ref> [ELW-90] </ref> for these tasks. We show how to simplify and speed-up the basic approach proposed there. <p> In order to design O (D) backwards communication algorithm, we extend the analysis of "snakes" of <ref> [ELW-90] </ref>, and propose a way to cancel their propagation in the network when they are no longer needed. <p> We first survey the preexisting techniques which we will use in our general solution. 2.1 Background: Firing on the di rected ring and on the ring-of-trees An FSP algorithm for the directed ring was given by [K-78, HN-81]. For an informal description of their algorithm see <ref> [ELW-90] </ref>. Here we describe the idea for rings whose diameter is a power of two (the algorithm can be easily extended to non-power-of-two diameter rings as well). First note that the network can simulate a constant number of messages that travel at different speeds relative to one another. <p> For any ring-of-trees, let D 0 denote the diam Page 4 eter of the ring. [K-78, HN-81] have shown that there exists an O (D 0 ) FSP algorithm for any ring-of-trees. The proof is an extension of the solution to the ring (see, <ref> [K-78, HN-81, ELW-90] </ref>). The idea of the algorithm is that every processor executes the same ring algorithm, independent of whether it is on the ring or in one of the trees. <p> This is accomplished by the backwards communication algorithm. The types of messages employed by this algorithm, their uses, and their rules of propagation Page 6 are detailed below. After that follows a top-down description of the algorithm itself. We extend the idea of snakes (and their propagation), introduced in <ref> [ELW-90] </ref>. A snake is a message consisting of many characters that follow each other through the graph. Many types of snakes can be constructed. We use two particular kinds, growing snakes and dying snakes and introduce abort messages to remove unwanted growing snakes. <p> The propagation of growing snakes and abort messages occurs within the first level, whereas dying snakes propagate in the second. Messages do not interact across the two levels. The following fact about growing and dying snakes was used in <ref> [ELW-90] </ref>: If a growing snake happens to return Page 7 to its point of origin and is than mutated into a dying snake, it will retrace its path again. <p> The token may now travel backwards again on some other edge without interference from the previous backwards communication process. This is the key point of our algorithm, which allows us to avoid a costly "down-tree" <ref> [GA-84, AG-93, ELW-90] </ref> construction, the bottleneck of the previous solutions. Consider a setting where B has a token M that it would like to communicate to A, and A has an edge to B, as above.
Reference: [GA-84] <author> E. Gafni and Y. </author> <title> Afek Elec tion and Traversal in Unidirectional Networks PODC 1984. </title>
Reference-contexts: The network traversal algorithm is a fundamental primitive in its own right <ref> [GA-84, Kut88, ELW-90, AG-93] </ref>. For example, it can be used to convert protocols designed for a bidirectional network to run on the underlying undi-rected graph of the directed network. <p> A DFS may then be performed using this procedure to traverse edges in the reverse direction <ref> [GA-84, Kut88, ELW-90, AG-93] </ref>. <p> Previously, (in the setting of strongly-connected bounded degree directed networks of synchronous automata) <ref> [GA-84, AG-93] </ref> exhibited a O (N 2 D) solution for the traversal problem, and [ELW-90] showed a O (N 2 ) solution. <p> The token may now travel backwards again on some other edge without interference from the previous backwards communication process. This is the key point of our algorithm, which allows us to avoid a costly "down-tree" <ref> [GA-84, AG-93, ELW-90] </ref> construction, the bottleneck of the previous solutions. Consider a setting where B has a token M that it would like to communicate to A, and A has an edge to B, as above.
Reference: [AO-94] <author> B. Awerbuch, R. Ostrovsky Memory-Efficient and Self-Stab-ilizing Network RESET. </author> <month> PODC </month> <year> 1994 </year>
Reference-contexts: In this paper we are also concerned with reducing the amount of memory required per processor. The current technological trend is to implement network protocols in hardware and to minimize the amount of memory required (for further discussion, see <ref> [MOOY-92, AO-94] </ref>). We model processors as identical deterministic finite-state machines (i.e. chips) of a constant size (that is, Page 1 independent of the size of the network) with a constant number of input and output ports. A finite alphabet of signals is used.
Reference: [HN-81] <author> N. Honda and Y. </author> <title> Nishitani The Firing Squad Synchronization Problem for Graphs Theoretical Computer Sciences Vol 14. </title> <year> 1981. </year>
Reference-contexts: Let the synchronization time be the number of time-steps after the first "start" signal until the processors "fire". The goal is to minimize this time. In addition to a large body of work for undi-rected networks (see [M-86]), the FSP problem was considered for directed networks of automata in <ref> [K-78, HN-81, ELW-90] </ref>, where O (N 2 ) was the best previously known synchronization time [ELW-90]. <p> We first survey the preexisting techniques which we will use in our general solution. 2.1 Background: Firing on the di rected ring and on the ring-of-trees An FSP algorithm for the directed ring was given by <ref> [K-78, HN-81] </ref>. For an informal description of their algorithm see [ELW-90]. Here we describe the idea for rings whose diameter is a power of two (the algorithm can be easily extended to non-power-of-two diameter rings as well). <p> For any ring-of-trees, let D 0 denote the diam Page 4 eter of the ring. <ref> [K-78, HN-81] </ref> have shown that there exists an O (D 0 ) FSP algorithm for any ring-of-trees. The proof is an extension of the solution to the ring (see, [K-78, HN-81, ELW-90]). <p> For any ring-of-trees, let D 0 denote the diam Page 4 eter of the ring. [K-78, HN-81] have shown that there exists an O (D 0 ) FSP algorithm for any ring-of-trees. The proof is an extension of the solution to the ring (see, <ref> [K-78, HN-81, ELW-90] </ref>). The idea of the algorithm is that every processor executes the same ring algorithm, independent of whether it is on the ring or in one of the trees.
Reference: [K-78] <author> K. </author> <title> Kobayashi The firing squad synchronization problem for a class of polyautomata networks. </title> <journal> Journal of Computer and System Science 17 </journal> <pages> 300-318, </pages> <year> 1978. </year>
Reference-contexts: Let the synchronization time be the number of time-steps after the first "start" signal until the processors "fire". The goal is to minimize this time. In addition to a large body of work for undi-rected networks (see [M-86]), the FSP problem was considered for directed networks of automata in <ref> [K-78, HN-81, ELW-90] </ref>, where O (N 2 ) was the best previously known synchronization time [ELW-90]. <p> We first survey the preexisting techniques which we will use in our general solution. 2.1 Background: Firing on the di rected ring and on the ring-of-trees An FSP algorithm for the directed ring was given by <ref> [K-78, HN-81] </ref>. For an informal description of their algorithm see [ELW-90]. Here we describe the idea for rings whose diameter is a power of two (the algorithm can be easily extended to non-power-of-two diameter rings as well). <p> For any ring-of-trees, let D 0 denote the diam Page 4 eter of the ring. <ref> [K-78, HN-81] </ref> have shown that there exists an O (D 0 ) FSP algorithm for any ring-of-trees. The proof is an extension of the solution to the ring (see, [K-78, HN-81, ELW-90]). <p> For any ring-of-trees, let D 0 denote the diam Page 4 eter of the ring. [K-78, HN-81] have shown that there exists an O (D 0 ) FSP algorithm for any ring-of-trees. The proof is an extension of the solution to the ring (see, <ref> [K-78, HN-81, ELW-90] </ref>). The idea of the algorithm is that every processor executes the same ring algorithm, independent of whether it is on the ring or in one of the trees.
Reference: [Kut88] <author> S. </author> <title> Kutten Stepwise construction of an efficient distributed traversing algorithm for general strongly-connected networks. </title> <booktitle> Proceedings of the 9'th International Conference on Computer Communication pp.446-452, </booktitle> <month> October </month> <year> 1988. </year>
Reference-contexts: The network traversal algorithm is a fundamental primitive in its own right <ref> [GA-84, Kut88, ELW-90, AG-93] </ref>. For example, it can be used to convert protocols designed for a bidirectional network to run on the underlying undi-rected graph of the directed network. <p> A DFS may then be performed using this procedure to traverse edges in the reverse direction <ref> [GA-84, Kut88, ELW-90, AG-93] </ref>.
Reference: [M-86] <author> J. </author> <title> Mazoyer An overview on the Firing Squad Synchronization Problem. </title> <publisher> in Automata Networks Springer Verlag LNCS 316, </publisher> <year> 1986. </year>
Reference-contexts: Of course, the objective is to minimize the time to perform the task. 1.2 The firing synchronization prob lem The classic Firing Synchronization Problem (FSP) has a rich history (see, for example, overview of <ref> [M-86] </ref>). In essence, it is the problem of achieving micro-synchronization, given macro-synchronization. <p> Let the synchronization time be the number of time-steps after the first "start" signal until the processors "fire". The goal is to minimize this time. In addition to a large body of work for undi-rected networks (see <ref> [M-86] </ref>), the FSP problem was considered for directed networks of automata in [K-78, HN-81, ELW-90], where O (N 2 ) was the best previously known synchronization time [ELW-90].
Reference: [MOOY-92] <author> A. Mayer, Y. Ofek, R. Os trovsky, and M. </author> <note> Yung Self-Stabilizing Symmetry Breaking in Constant-Space STOC 1992. Page 9 </note>
Reference-contexts: In this paper we are also concerned with reducing the amount of memory required per processor. The current technological trend is to implement network protocols in hardware and to minimize the amount of memory required (for further discussion, see <ref> [MOOY-92, AO-94] </ref>). We model processors as identical deterministic finite-state machines (i.e. chips) of a constant size (that is, Page 1 independent of the size of the network) with a constant number of input and output ports. A finite alphabet of signals is used.
References-found: 9

