URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/ImplSel.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Title: Implementation Selection for Object-Role Models  
Author: Patrick van Bommel 
Date: August 11, 1994  
Abstract: Published as: P. van Bommel. Implementation Selection for Object-Role Models. In T.A. Halpin and R. Meersman, editors, Proceedings of the First International Conference on Object-Role Modelling (ORM-1), pages 103-112, Magnetic Island, Australia, July 1994. Abstract The focus of this paper is database design in the context of converting a conceptual data model into an internal representation. For a given conceptual data model, an access profile specifies statistical information about (retrieval and update) requests to be performed, while a data profile specifies a statistical characterization of the database contents. The corresponding time/space trade-off and update/retrieval trade-off are usually very untrans-parent, especially in the case of large databases with many different fact types, combined with complex profiles. In this paper we describe a general strategy for examining the tradeoffs for a given application, and for constructing and trying-out several (different) databases for the same conceptual data model (multiprototyping).
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. van Bommel. </author> <title> A Randomised Schema Mutator for Evolutionary Database Optimisation. </title> <journal> The Australian Computer Journal, </journal> <volume> 25(2) </volume> <pages> 61-69, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Maximal grouping may be obtained by representing the entire information structure in a single tree, while minimal grouping corresponds to representations where each fact type is taken separately. For more details about these internal representations of conceptual models, we refer to [5], [3] and <ref> [1] </ref>. The internal representation shown in figure 3 satisfies the wellformedness conditions introduced in [5], [3]. It is easily shown that the number of correct internal representations (in the style of figure 3) is exponential in the number of fact types in the conceptual model. <p> This evolution may be used for examining the time/space trade-off and the update/retrieval trade-off. 3.1 Transformation of internal representations Evolutionary (or adaptive) search within the solution space of internal representations is based on transformations. Two basic transformations are used ([6], <ref> [1] </ref>): 1. Promote (p), promoting the upper predicator p in node m by swapping edge hm; ni to hn; mi. 2. Move (p; q), moving Fact (p) with all its descendants to Node (q). Predicators p and q should have the same object type. <p> If this is not the case, becomes the root of a new tree. Also some other operators may be used, such as crossover ([6], [4]). For the transformations mentioned above, correctness (i.e. invariance of wellformedness) and completeness is discussed in [6] and <ref> [1] </ref>. 3.2 Evolution strategies The intention of evolutionary search for internal representations is to allow a database designer to define alternative internal representations for a given database application, and to manipulate these (preliminary) designs, i.e. to modify them and to make them evolve into more desirable designs. <p> In each iteration the search process attempts to find a mutation leading to an improved fitness. This can be done according to several hill-climbing schemes. An example of this strategy is found in <ref> [1] </ref>. The third kind of strategies can be used in complex solution spaces with many local optima. In order to find the global optimum, a decreasing fitness can (temporarily) occur. Well-known examples of these strategies are simulated annealing and genetic algorithms ([4], [10], [16]). <p> In order to interrelate the values of the conflicting criteria Space and Time, we use the parameters shown in figure 5. An example of a cost model for computing Space and Time is discussed in section 3.4. The parameter fi 2 <ref> [0; 1] </ref> is a weight coefficient for storage space. It expresses the importance of space minimization for the database under development. As a consequence, the importance of minimization of response times is expressed by 1 fi.
Reference: [2] <author> P. van Bommel, A.H.M. ter Hofstede, and Th.P. van der Weide. </author> <title> Semantics and verification of object-role models. </title> <journal> Information Systems, </journal> <volume> 16(5) </volume> <pages> 471-495, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: We do not delve into the formal semantics of this mechanism. The semantics of the underlying object-role structure may be found in <ref> [2] </ref>, while a detailed treatment of the corresponding internal representations is found in [5] and [3]. 2.1 Basics We assume that the reader is familiar with data modelling techniques having an underlying object-role structure (e.g. NIAM [13], [15] and BRM [12], [18]). The basic notions are informally summarized as follows. <p> I is a (preprocessed) flattened information structure, consisting of n-ary fact types. 2. D is a data profile, specifying the number of instances of entity types and fact types in I. Furthermore, a data profile specifies the size of the naming reference (also called unique identifier or standard name <ref> [2] </ref>, [15]) for each entity type. Usually naming references are lexical label types, in contrast with non-lexical entity types. 3. A is an access profile, specifying the expected pattern of retrieval and update requests to be performed on I. 4.
Reference: [3] <author> P. van Bommel, Gy. Kovacs, and A. Micsik. </author> <title> Transformation of database populations and operations from the conceptual to the internal level. </title> <journal> Information Systems, </journal> <volume> 19(2) </volume> <pages> 175-191, </pages> <year> 1994. </year>
Reference-contexts: We do not delve into the formal semantics of this mechanism. The semantics of the underlying object-role structure may be found in [2], while a detailed treatment of the corresponding internal representations is found in [5] and <ref> [3] </ref>. 2.1 Basics We assume that the reader is familiar with data modelling techniques having an underlying object-role structure (e.g. NIAM [13], [15] and BRM [12], [18]). The basic notions are informally summarized as follows. <p> This representation consists of two trees. Maximal grouping may be obtained by representing the entire information structure in a single tree, while minimal grouping corresponds to representations where each fact type is taken separately. For more details about these internal representations of conceptual models, we refer to [5], <ref> [3] </ref> and [1]. The internal representation shown in figure 3 satisfies the wellformedness conditions introduced in [5], [3]. It is easily shown that the number of correct internal representations (in the style of figure 3) is exponential in the number of fact types in the conceptual model. <p> For more details about these internal representations of conceptual models, we refer to [5], <ref> [3] </ref> and [1]. The internal representation shown in figure 3 satisfies the wellformedness conditions introduced in [5], [3]. It is easily shown that the number of correct internal representations (in the style of figure 3) is exponential in the number of fact types in the conceptual model. <p> As an example, in the case of a hierarchical data model the upper predicator in each node must be total. For more details we refer to [5] and <ref> [3] </ref>. Mapping approaches with special emphasis to constraint conversion are found in [17], [11], [9] and [8]. These approaches also consider subset, equality and exclusion constraints. 3 Transformation, evolution and optimization In this section we consider the evolution of internal representations. <p> This kind of encoding is common practice in the world of evolutionary algorithms (see e.g. [10], [16]). We summarize the encoding which is used in EDO. Formally a tree representation is defined in terms of labelled edges, where each edge is labelled by a fact type ([5], <ref> [3] </ref>). The encoding mechanism exploits the property that each edge e = hm; ni with label `(e) = f has a source node m containing a unique predicator from fact type f. For source node m this predicator is denoted as Anchor (m). <p> We described a multiobjective fitness function, along with an abstract cost model for the expected storage requirements and the expected average response time. The approach supports multiprototyping, which may be further enhanced by automatic transformation of database operations (see e.g. <ref> [3] </ref>). It is currently being tested in cooperation with a large Dutch organization. Acknowledgement The author wishes to thank Theo van der Weide, Eckhard Falkenberg, Arthur ter Hofstede and Carlos Lucasius for helpful discussions and constructive comments on this research.
Reference: [4] <author> P. van Bommel, C.B. Lucasius, and Th.P. van der Weide. </author> <title> Genetic Algorithms for Optimal Database Design. </title> <type> Technical Report 93-01, </type> <institution> Information Systems Group, Computing Science Institute, University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: Move (p; q), moving Fact (p) with all its descendants to Node (q). Predicators p and q should have the same object type. If this is not the case, becomes the root of a new tree. Also some other operators may be used, such as crossover ([6], <ref> [4] </ref>).
Reference: [5] <author> P. van Bommel and Th.P. van der Weide. </author> <title> Reducing the search space for conceptual schema transformation. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 8 </volume> <pages> 269-292, </pages> <year> 1992. </year>
Reference-contexts: We do not delve into the formal semantics of this mechanism. The semantics of the underlying object-role structure may be found in [2], while a detailed treatment of the corresponding internal representations is found in <ref> [5] </ref> and [3]. 2.1 Basics We assume that the reader is familiar with data modelling techniques having an underlying object-role structure (e.g. NIAM [13], [15] and BRM [12], [18]). The basic notions are informally summarized as follows. <p> This representation consists of two trees. Maximal grouping may be obtained by representing the entire information structure in a single tree, while minimal grouping corresponds to representations where each fact type is taken separately. For more details about these internal representations of conceptual models, we refer to <ref> [5] </ref>, [3] and [1]. The internal representation shown in figure 3 satisfies the wellformedness conditions introduced in [5], [3]. It is easily shown that the number of correct internal representations (in the style of figure 3) is exponential in the number of fact types in the conceptual model. <p> For more details about these internal representations of conceptual models, we refer to <ref> [5] </ref>, [3] and [1]. The internal representation shown in figure 3 satisfies the wellformedness conditions introduced in [5], [3]. It is easily shown that the number of correct internal representations (in the style of figure 3) is exponential in the number of fact types in the conceptual model. <p> As an example, in the case of a hierarchical data model the upper predicator in each node must be total. For more details we refer to <ref> [5] </ref> and [3]. Mapping approaches with special emphasis to constraint conversion are found in [17], [11], [9] and [8]. These approaches also consider subset, equality and exclusion constraints. 3 Transformation, evolution and optimization In this section we consider the evolution of internal representations. <p> In general, evolutionary search for internal representations uses the following framework. First an initial pool of internal representations is generated, using an algorithm in the style of <ref> [5] </ref>. Next a database designer has the opportunity to activate evolution strategies, modifying the preliminary representations into new representations. In this way a database designer is allowed to `walk' through the solution space of alternative internal representations. Figure 4 gives a generic description of the framework. <p> Although these strategies do not perform a real optimization, they may find rather good solutions. Several guidance parameters may be used for finding solutions with certain desirable properties (cf. <ref> [5] </ref>). The second kind of evolution strategies may be used for finding solutions with high fitness (see section 3.3). In each iteration the search process attempts to find a mutation leading to an improved fitness. This can be done according to several hill-climbing schemes.
Reference: [6] <author> P. van Bommel and Th.P. van der Weide. </author> <title> Towards Database Optimization by Evolution. In A.K. </title> <editor> Majumdar and N. Prakash, editors, </editor> <booktitle> Proceedings of the International Conference on Information Systems and Management of Data (CISMOD 92), </booktitle> <pages> pages 273-287, </pages> <address> Bangalore, India, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: If this is not the case, becomes the root of a new tree. Also some other operators may be used, such as crossover (<ref> [6] </ref>, [4]). For the transformations mentioned above, correctness (i.e. invariance of wellformedness) and completeness is discussed in [6] and [1]. 3.2 Evolution strategies The intention of evolutionary search for internal representations is to allow a database designer to define alternative internal representations for a given database application, and to manipulate these (preliminary) designs, i.e. to modify them and to make them evolve into more desirable designs.
Reference: [7] <editor> L. Davis, editor. </editor> <booktitle> Handbook of genetic algorithms. </booktitle> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: In this way a database designer is allowed to `walk' through the solution space of alternative internal representations. Figure 4 gives a generic description of the framework. Several classifications for evolution strategies are found in the literature (see e.g. <ref> [7] </ref>, [10], [16]). In our research prototype (see section 4), four kinds of evolution strategies are distinguished: parameter explanation fi weight coefficient for storage space fl s the average cost of storage media fl t the average cost of processing time 1.
Reference: [8] <author> O.M.F. De Troyer. </author> <title> RIDL*: A Tool for the Computer-Assisted Engineering of Large Databases in the Presence of Integrity Constraints. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 418-429, </pages> <address> Portland, Oregon, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction Object-role models are widely used for conceptual data modelling. Although several approaches exist for converting an object-role model into a `good' internal representation (see e.g. [11], [13], [15], [17], [18], <ref> [8] </ref> and [9]), there is no general strategy for examining the time/space and update/retrieval trade-off for a given database application. However, if the actual implementation of a given conceptual model must satisfy the requirements of a particular application environment, such a strategy is essential. <p> As an example, in the case of a hierarchical data model the upper predicator in each node must be total. For more details we refer to [5] and [3]. Mapping approaches with special emphasis to constraint conversion are found in [17], [11], [9] and <ref> [8] </ref>. These approaches also consider subset, equality and exclusion constraints. 3 Transformation, evolution and optimization In this section we consider the evolution of internal representations.
Reference: [9] <author> O.M.F. De Troyer. </author> <title> On Data Schema Transformations. </title> <type> PhD thesis, </type> <institution> University of Tilburg (K.U.B.), </institution> <address> Tilburg, The Netherlands, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Object-role models are widely used for conceptual data modelling. Although several approaches exist for converting an object-role model into a `good' internal representation (see e.g. [11], [13], [15], [17], [18], [8] and <ref> [9] </ref>), there is no general strategy for examining the time/space and update/retrieval trade-off for a given database application. However, if the actual implementation of a given conceptual model must satisfy the requirements of a particular application environment, such a strategy is essential. <p> As an example, in the case of a hierarchical data model the upper predicator in each node must be total. For more details we refer to [5] and [3]. Mapping approaches with special emphasis to constraint conversion are found in [17], [11], <ref> [9] </ref> and [8]. These approaches also consider subset, equality and exclusion constraints. 3 Transformation, evolution and optimization In this section we consider the evolution of internal representations.
Reference: [10] <author> D.E. Goldberg. </author> <title> Genetic algorithms in search, optimization, and machine learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: In this way a database designer is allowed to `walk' through the solution space of alternative internal representations. Figure 4 gives a generic description of the framework. Several classifications for evolution strategies are found in the literature (see e.g. [7], <ref> [10] </ref>, [16]). In our research prototype (see section 4), four kinds of evolution strategies are distinguished: parameter explanation fi weight coefficient for storage space fl s the average cost of storage media fl t the average cost of processing time 1. <p> The third kind of strategies can be used in complex solution spaces with many local optima. In order to find the global optimum, a decreasing fitness can (temporarily) occur. Well-known examples of these strategies are simulated annealing and genetic algorithms ([4], <ref> [10] </ref>, [16]). <p> The rather complex internal representations are encoded into simple strings of integers. This kind of encoding is common practice in the world of evolutionary algorithms (see e.g. <ref> [10] </ref>, [16]). We summarize the encoding which is used in EDO. Formally a tree representation is defined in terms of labelled edges, where each edge is labelled by a fact type ([5], [3]).
Reference: [11] <author> T.A. Halpin. </author> <title> A Fact-Oriented Approach to Schema Transformation. </title> <editor> In B. Thalheim, J. Demetrovics, and H.-D. Gerhardt, editors, </editor> <booktitle> MFDBS 91, volume 495 of Lecture Notes in Computer Science, </booktitle> <pages> pages 342-356, </pages> <address> Rostock, Germany, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: 1 Introduction Object-role models are widely used for conceptual data modelling. Although several approaches exist for converting an object-role model into a `good' internal representation (see e.g. <ref> [11] </ref>, [13], [15], [17], [18], [8] and [9]), there is no general strategy for examining the time/space and update/retrieval trade-off for a given database application. However, if the actual implementation of a given conceptual model must satisfy the requirements of a particular application environment, such a strategy is essential. <p> As an example, in the case of a hierarchical data model the upper predicator in each node must be total. For more details we refer to [5] and [3]. Mapping approaches with special emphasis to constraint conversion are found in [17], <ref> [11] </ref>, [9] and [8]. These approaches also consider subset, equality and exclusion constraints. 3 Transformation, evolution and optimization In this section we consider the evolution of internal representations.
Reference: [12] <author> I. Kobayashi. </author> <title> Classification and transformations of binary relationship relation schemata. </title> <journal> Information Systems, </journal> <volume> 11(2) </volume> <pages> 109-122, </pages> <year> 1986. </year>
Reference-contexts: NIAM [13], [15] and BRM <ref> [12] </ref>, [18]). The basic notions are informally summarized as follows. An object-role data model consists of an information structure and a set of constraints on the possible populations of the information structure ([2]).
Reference: [13] <author> C.M.R. Leung and G.M. Nijssen. </author> <title> Relational database design using the NIAM conceptual schema. </title> <journal> Information Systems, </journal> <volume> 13(2) </volume> <pages> 219-227, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Object-role models are widely used for conceptual data modelling. Although several approaches exist for converting an object-role model into a `good' internal representation (see e.g. [11], <ref> [13] </ref>, [15], [17], [18], [8] and [9]), there is no general strategy for examining the time/space and update/retrieval trade-off for a given database application. However, if the actual implementation of a given conceptual model must satisfy the requirements of a particular application environment, such a strategy is essential. <p> The semantics of the underlying object-role structure may be found in [2], while a detailed treatment of the corresponding internal representations is found in [5] and [3]. 2.1 Basics We assume that the reader is familiar with data modelling techniques having an underlying object-role structure (e.g. NIAM <ref> [13] </ref>, [15] and BRM [12], [18]). The basic notions are informally summarized as follows. An object-role data model consists of an information structure and a set of constraints on the possible populations of the information structure ([2]).
Reference: [14] <author> F.J. McErlean, D.A. Bell, and S.I. McClean. </author> <title> The use of simulated annealing for clustering data in databases. </title> <journal> Information Systems, </journal> <volume> 15(2) </volume> <pages> 233-245, </pages> <year> 1990. </year>
Reference-contexts: In order to find the global optimum, a decreasing fitness can (temporarily) occur. Well-known examples of these strategies are simulated annealing and genetic algorithms ([4], [10], [16]). Previous applications in the field of databases are found in e.g. <ref> [14] </ref>. 3.3 Optimal internal representations Let I be an information structure, let D be a data profile specifying a statistical characterization of the database contents, and let A be an access profile specifying statistical information about (retrieval and update) requests to be performed.
Reference: [15] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction Object-role models are widely used for conceptual data modelling. Although several approaches exist for converting an object-role model into a `good' internal representation (see e.g. [11], [13], <ref> [15] </ref>, [17], [18], [8] and [9]), there is no general strategy for examining the time/space and update/retrieval trade-off for a given database application. However, if the actual implementation of a given conceptual model must satisfy the requirements of a particular application environment, such a strategy is essential. <p> The semantics of the underlying object-role structure may be found in [2], while a detailed treatment of the corresponding internal representations is found in [5] and [3]. 2.1 Basics We assume that the reader is familiar with data modelling techniques having an underlying object-role structure (e.g. NIAM [13], <ref> [15] </ref> and BRM [12], [18]). The basic notions are informally summarized as follows. An object-role data model consists of an information structure and a set of constraints on the possible populations of the information structure ([2]). <p> D is a data profile, specifying the number of instances of entity types and fact types in I. Furthermore, a data profile specifies the size of the naming reference (also called unique identifier or standard name [2], <ref> [15] </ref>) for each entity type. Usually naming references are lexical label types, in contrast with non-lexical entity types. 3. A is an access profile, specifying the expected pattern of retrieval and update requests to be performed on I. 4.
Reference: [16] <author> C.R. Reeves, </author> <title> editor. Modern heuristic techniques for combinatorial problems. </title> <publisher> Blackwell Scientific Publications, Oxford, </publisher> <address> United Kingdom, </address> <year> 1993. </year>
Reference-contexts: In this way a database designer is allowed to `walk' through the solution space of alternative internal representations. Figure 4 gives a generic description of the framework. Several classifications for evolution strategies are found in the literature (see e.g. [7], [10], <ref> [16] </ref>). In our research prototype (see section 4), four kinds of evolution strategies are distinguished: parameter explanation fi weight coefficient for storage space fl s the average cost of storage media fl t the average cost of processing time 1. <p> The third kind of strategies can be used in complex solution spaces with many local optima. In order to find the global optimum, a decreasing fitness can (temporarily) occur. Well-known examples of these strategies are simulated annealing and genetic algorithms ([4], [10], <ref> [16] </ref>). <p> The rather complex internal representations are encoded into simple strings of integers. This kind of encoding is common practice in the world of evolutionary algorithms (see e.g. [10], <ref> [16] </ref>). We summarize the encoding which is used in EDO. Formally a tree representation is defined in terms of labelled edges, where each edge is labelled by a fact type ([5], [3]).
Reference: [17] <author> P.R. Ritson and T.A. Halpin. </author> <title> Mapping Integrity Constraints to a Relational Schema. In M.E. </title> <editor> Orlowska and M. Papazoglou, editors, </editor> <booktitle> Proceedings of the Fourth Australian Conference on Information Systems, </booktitle> <pages> pages 381-400. </pages> <publisher> World Scientific, </publisher> <address> Brisbane, Australia, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Object-role models are widely used for conceptual data modelling. Although several approaches exist for converting an object-role model into a `good' internal representation (see e.g. [11], [13], [15], <ref> [17] </ref>, [18], [8] and [9]), there is no general strategy for examining the time/space and update/retrieval trade-off for a given database application. However, if the actual implementation of a given conceptual model must satisfy the requirements of a particular application environment, such a strategy is essential. <p> As an example, in the case of a hierarchical data model the upper predicator in each node must be total. For more details we refer to [5] and [3]. Mapping approaches with special emphasis to constraint conversion are found in <ref> [17] </ref>, [11], [9] and [8]. These approaches also consider subset, equality and exclusion constraints. 3 Transformation, evolution and optimization In this section we consider the evolution of internal representations.
Reference: [18] <author> P. Shoval and M. Even-Chaime. </author> <title> ADDS: A system for automatic database schema design based on the binary-relationship model. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 3(2) </volume> <pages> 123-144, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Object-role models are widely used for conceptual data modelling. Although several approaches exist for converting an object-role model into a `good' internal representation (see e.g. [11], [13], [15], [17], <ref> [18] </ref>, [8] and [9]), there is no general strategy for examining the time/space and update/retrieval trade-off for a given database application. However, if the actual implementation of a given conceptual model must satisfy the requirements of a particular application environment, such a strategy is essential. <p> NIAM [13], [15] and BRM [12], <ref> [18] </ref>). The basic notions are informally summarized as follows. An object-role data model consists of an information structure and a set of constraints on the possible populations of the information structure ([2]).
Reference: [19] <author> T.L. Vincent and W.J. Grantham. </author> <title> Optimality in Parametric Systems. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: However, it may be argued that defining such a function has practical difficulties. In that case, optimality cannot be defined in terms of a single fitness function. This problem can be solved using the notion of Pareto optimality (see e.g. <ref> [19] </ref>). In our case, the Pareto optimal set is the set of internal representations that are nondominated. An internal representation is called nondominated, if there is no other internal representation which is better on both Space and Time.
References-found: 19

