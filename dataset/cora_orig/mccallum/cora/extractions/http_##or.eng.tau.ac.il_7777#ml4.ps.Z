URL: http://or.eng.tau.ac.il:7777/ml4.ps.Z
Refering-URL: http://or.eng.tau.ac.il:7777/topics/eprotos.html
Root-URL: 
Title: In Machine Learning: A Multistrategy Approach, Vol. IV  Macro and Micro Perspectives of Multistrategy Learning  
Author: (R. S. Michalski and G. Tecuci, Yoram Reich 
Affiliation: (Carnegie Mellon University)  
Date: 1994  
Address: San Francisco, CA,  
Note: eds.), pp. 379-401, Morgan Kaufmann,  Bridger a system that learns to design bridges.  
Abstract: Machine learning techniques are perceived to have a great potential as means for the acquisition of knowledge; nevertheless, their use in complex engineering domains is still rare. Most machine learning techniques have been studied in the context of knowledge acquisition for well defined tasks, such as classification. Learning for these tasks can be handled by relatively simple algorithms. Complex domains present difficulties that can be approached by combining the strengths of several complementing learning techniques, and overcoming their weaknesses by providing alternative learning strategies. This study presents two perspectives, the macro and the micro, for viewing the issue of multistrategy learning. The macro perspective deals with the decomposition of an overall complex learning task into relatively well-defined learning tasks, and the micro perspective deals with designing multistrategy learning techniques for supporting the acquisition of knowledge for each task. The two perspectives are discussed in the context of 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bareiss, R. </author> <year> (1989). </year> <title> Exemplar-Based Knowledge Acquisition, </title> <publisher> Academic Press, </publisher> <address> Boston, MA. </address>
Reference-contexts: Redesign is a diagnosis task which can be supported by concept learning. The characteristics of cable-stayed bridge design allow the use of weak domain knowledge. A learning program that supports such learning activity is Protos <ref> (Bareiss, 1989) </ref>. Evaluation is not explicitly captured as knowledge; nevertheless, candidate designs generated by Bridger that are chosen by the designer can be used as training examples for enhancing synthesis knowledge. <p> The automatic control of these strategies is complex and is the subject of future research. 3.2 Eprotos Protos is an exemplar-based learning program that integrates empirical learning with weak domain knowledge in the form of explanation <ref> (Bareiss, 1989) </ref>. Therefore, Protos is a multistrategy learning system. The task of Protos is heuristic classification: given a new case and knowledge in the form of category structure, find the best category for the new case. Protos' operation is detailed in the following paragraphs.
Reference: <author> Bergadano, F. Giordana, A. and Saitta, L. </author> <year> (1988). </year> <title> "Automated concept acquisition in noisy environments." </title> <journal> IEEE Transaction on Pattern Analysis and Machine Intelligence, </journal> <volume> 10(4) </volume> <pages> 555-578. </pages>
Reference: <author> Bergadano, F., Gemello, R., Giordana, A., and Saitta, L. </author> <year> (1989). </year> <title> "ML-SMART: A problem solver for learning from examples." </title> <note> Fundamenta Informaticae, XII(1):29-50. </note>
Reference-contexts: Several recent studies employ multistrategy learning. MTL (Tecuci and Michalski, 1991) uses deduction, analogy, abduction, and induction, to justify an input and potentially learn new knowledge from observations. Although currently the control of these strategies is fixed, future extensions will allow the dynamic execution of the strategies. ML-Smart <ref> (Bergadano et al, 1989) </ref> views learning as a problem-solving activity. It uses knowledge and different strategies, and allows the user to specify which strategies are applicable for the particular application domain. AIMS (Lu and Tcheng, 1991) supports the dynamic selection of learning techniques in the recursive-splitting learning paradigm.
Reference: <author> Bratko, I., Mozetic, I., and Lavrac, N. </author> <year> (1989). </year> <title> KARDIO: A Study in Deep and Qualitative Knowledge for Expert Systems, </title> <publisher> MIT Press, </publisher> <address> Boston, MA. </address>
Reference: <author> Buchanan, B. G., Sulivan, J., Cheng, T.-P., and Clearwater, S. H. </author> <year> (1988). </year> <title> "Simulation-assisted inductive learning." </title> <booktitle> In Proceedings of AAAI-88, </booktitle> <pages> pages 552-557, </pages> <address> St. Paul, Minnesota, </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Chandrasekaran, B. </author> <year> (1986). </year> <title> "Generic tasks in knowledge-based reasoning: high-level building blocks for expert system design." </title> <journal> IEEE Expert, </journal> <volume> 1(3) </volume> <pages> 23-30. </pages>
Reference-contexts: Similar information requirements emerge from Chandrasekaran's work on generic tasks as high level building blocks for expert systems design <ref> (Chandrasekaran, 1986) </ref>. A generic task is a tuple G = (I=O; KR; C). Its components are described as follows. I/O is the Input/Output of the generic task. It represents the task functionality. KR is the representation of knowledge required to achieve the task functionality.
Reference: <author> Fisher, D., Ling, X., Carnes, R., Reich, Y., Fenves, S., Chen, J., Shiavi, R., Biswas, G., and Weinberg, J. </author> <year> (1991). </year> <title> "Selected applications of an AI clustering technique to engineering tasks." </title> <type> Technical Report CS-91-08, </type> <institution> Vanderbilt University, Nashville, TN. </institution>
Reference-contexts: It is therefore important to devise a method that will allow the generation of the most useful examples, such that the improvement in knowledge due to learning is maximized with minimal training resources. The problem of selecting good examples is especially dominant when using an incremental learning system <ref> (Fisher et al, 1991) </ref>. In this case, even if all the examples are available, it is useful to impose a good ordering on the training examples (MacGregor, 1988).
Reference: <author> Fisher, D. H. </author> <year> (1987). </year> <title> "Knowledge acquisition via incremental conceptual clustering." </title> <journal> Machine Learning, </journal> <volume> 2(7) </volume> <pages> 139-172. </pages>
Reference-contexts: The design domain characteristics determine the use of techniques that do not use knowledge since it does not exist 3 . Step (4) suggests that a program such as Cobweb <ref> (Fisher, 1987) </ref>, can perform 3 Later we show how, in fact, if knowledge exist, it can be used to enhance learning performance. Machine Learning: A Multistrategy Approach, Vol. IV, 1994, pp. 379-401 5 Reich (1994) the learning activity. <p> Due to space limitation, the description assumes a certain level of familiarity with the original Cobweb and Protos. 3.1 Ecobweb Cobweb is a concept formation program for the creation of hierarchical classification trees <ref> (Fisher, 1987) </ref>. A classification is `good' if the description of an example can be guessed with high accuracy, given that it belongs to a specific class. <p> The measurement is normalized with respect to the number of classes. When a new example is introduced, Cobweb tries to accommodate it into an existing hierarchy starting at the root. The system can perform one of the following operators (See <ref> (Fisher, 1987) </ref> for a detailed description): Machine Learning: A Multistrategy Approach, Vol. <p> The problem of selecting good examples is especially dominant when using an incremental learning system (Fisher et al, 1991). In this case, even if all the examples are available, it is useful to impose a good ordering on the training examples (MacGregor, 1988). While using Cobweb <ref> (Fisher, 1987) </ref> in several design domains (Reich, 1991b) it has been observed that the order of training examples used to generate synthesis knowledge has a substantial effect on the synthesis ability. Deviation of 90% in synthesis performance were observed in statistical experiments with random orderings of training examples.
Reference: <author> Gennari, J. H., Langley, P., and Fisher, D. </author> <year> (1989). </year> <title> "Models of incremental concept formation." </title> <journal> Artificial Intelligence, 40(1-3):11-61. </journal>
Reference-contexts: Cobweb has a number of drawbacks for its use in an engineering design domain. 1. Cobweb can only manipulate nominal properties. Classit is a descendant of Cobweb that handles continuous properties <ref> (Gennari et al, 1989) </ref>. Elsewhere, we contrast its approach with the extension to continuous properties implemented in Ecobweb (Reich, 1991b) and conclude that Ecobweb's strategy is more flexible. 2. Cobweb has a stiff prediction scheme. It makes a strong commitment to continue prediction until a complete existing design is retrieved.
Reference: <author> Herrmann, J. </author> <year> (1991). </year> <title> "Learning analytical knowledge about VLSI-design from observations." </title> <editor> In Birnbaum, L. A. and Collins, G., editors, </editor> <booktitle> Proceedings of the Eight International Workshop on Machine Learning (Evanston, </booktitle> <address> IL), </address> <pages> pages 610-614, </pages> <address> San Mateo, CA., </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The system divides the domain based on some criteria, such as information gain, and selects a technique to further learn the subdomain based on the desired accuracy, comprehensibility, and efficiency of the learned knowledge and the characteristics of the available techniques. LIMES <ref> (Herrmann, 1991) </ref> employs several learning techniques for learning estimation knowledge. The techniques used are generalizations, specializations, graph annotation (used in prediction), and class addition. The strategies are used in response to problem solving scenarios. 2 Note that any engineering task is usually complex.
Reference: <author> Lu, S. C.-Y. and Chen, K. </author> <year> (1987). </year> <title> "A machine learning approach to the automatic synthesis of mechanistic knowledge for engineering decision-making." </title> <booktitle> Artificial Intelligence for Engineering Design, Analysis, and Manufacturing, </booktitle> <volume> 1(2) </volume> <pages> 109-118. </pages>
Reference: <author> Lu, S. C.-Y. and Tcheng, D. K. </author> <year> (1991). </year> <title> "Building layered models to support engineering decision making: a machine learning approach." </title> <journal> Journal of Engineering for Industry, Transactions of the ASME, </journal> <volume> 113(1) </volume> <pages> 1-9. </pages>
Reference-contexts: ML-Smart (Bergadano et al, 1989) views learning as a problem-solving activity. It uses knowledge and different strategies, and allows the user to specify which strategies are applicable for the particular application domain. AIMS <ref> (Lu and Tcheng, 1991) </ref> supports the dynamic selection of learning techniques in the recursive-splitting learning paradigm.
Reference: <author> MacGregor, J. N. </author> <year> (1988). </year> <title> "The effects of order on learning classifications by example: heuristics for finding the optimal order." </title> <journal> Artificial Intelligence, </journal> <volume> 34(3) </volume> <pages> 361-370, </pages> <month> April. </month>
Reference-contexts: The problem of selecting good examples is especially dominant when using an incremental learning system (Fisher et al, 1991). In this case, even if all the examples are available, it is useful to impose a good ordering on the training examples <ref> (MacGregor, 1988) </ref>. While using Cobweb (Fisher, 1987) in several design domains (Reich, 1991b) it has been observed that the order of training examples used to generate synthesis knowledge has a substantial effect on the synthesis ability.
Reference: <author> Michalski, R. S. and Stepp, R. </author> <year> (1983). </year> <title> "Learning from observation: Conceptual clustering." </title> <editor> In Michalski, R. S., Carbonell, J. G., and Mitchell, T. M., editors, </editor> <booktitle> Machine Learning: An Artificial Intelligence Approach, </booktitle> <pages> pages 331-363, </pages> <address> Palo Alto, CA, Tioga Press. </address> <booktitle> Machine Learning: A Multistrategy Approach, Vol. IV, </booktitle> <year> 1994, </year> <pages> pp. </pages> <note> 379-401 19 Reich (1994) Michalski, </note> <author> R. S., Mozetic, I., Hong, J., and Lavrac, N. </author> <year> (1986). </year> <title> "The multi-purpose incremental learning system AQ15 and its testing application to three medical domains." </title> <booktitle> In Proceedings of AAAI-86 (Philadelphia, PA), </booktitle> <pages> pages 1041-1045, </pages> <address> San Mateo, CA, </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Again, the two modules are necessary for performing the learning task. Lu and Chen (1987) described a method for learning evaluations in a manufacturing domain. In the first stage the behavior of objects is clustered by Cluster/2 <ref> (Michalski and Stepp, 1983) </ref>. Then, each class is treated as a concept to be learned by the concept learning program AQ15 (Michalski et al, 1986). The rules generated by AQ15 can assign a new object to the class of behaviors to which it belongs.
Reference: <author> Quinlan, J. R. </author> <year> (1986). </year> <title> "Induction of decision trees." </title> <journal> Machine Learning, </journal> <volume> 1(1) </volume> <pages> 81-106. </pages>
Reference-contexts: They decomposed the learning task into two subtasks. In the first task, descriptions of routings of products in a mill are used to induce a grammar; which can then be modified by an expert. In the second task, examples are used by ID3 <ref> (Quinlan, 1986) </ref> to induce routing decisions which are expressed as different branches in the grammar. The rules generated can then be evaluated by an expert. The grammar induction was necessary for the execution of the second learning task.
Reference: <author> Reich, Y. and Fenves, S. J. </author> <year> (1989). </year> <title> "Integration of generic learning tasks." </title> <type> Technical Report EDRC 12-28-89, </type> <institution> Engineering Design Research Center, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference: <author> Reich, Y. and Fenves, S. J. </author> <year> (1991). </year> <title> "The formation and use of abstract concepts in design." </title> <editor> In Fisher, D. H. J., Pazzani, M. J., and Langley, P., editors, </editor> <title> Concept Formation: </title> <journal> Knowledge and Experience in Unsupervised Learning, </journal> <pages> pages 323-353, </pages> <address> Los Altos, CA, </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In cable-stayed bridge design, both specifications and artifact descriptions can be represented by lists of property-value pairs (Reich, 1991b). A learning process that can capture a relation between two sets of properties is concept formation, which is believed to be fundamental for capturing synthesis knowledge <ref> (Reich and Fenves, 1991) </ref>. To briefly illustrate this idea, Figure 4 shows the mappings possible when using concept learning: a mapping from several inputs to a single classification outcome, and concept formation: a mapping between several inputs to several outcomes; the latter is required for synthesis. <p> Analysis is coded directly, no learning is used in this task. Nevertheless, an experiment was performed to show that Ecobweb can learn heuristic analysis <ref> (Reich and Fenves, 1991) </ref>. Redesign is a diagnosis task which can be supported by concept learning. The characteristics of cable-stayed bridge design allow the use of weak domain knowledge. A learning program that supports such learning activity is Protos (Bareiss, 1989). <p> It is expected that in complex domains, a synergistic approach of human-computer induction will be more beneficial than the fully automatic approach <ref> (Reich et al, 1991) </ref>. Future extensions will allow the user incorporating knowledge while controlling Ecobweb's operation. Summary. This list of implemented and potential uses of knowledge or other learning strategies in the Cobweb framework is not exhaustive.
Reference: <author> Reich, Y., Coyne, R., Modi, A., Steier, D., and Subrahmanian, E. </author> <year> (1991). </year> <title> "Learning in design: An EDRC (US) perspective." </title> <editor> In Gero, J., editor, </editor> <booktitle> Artificial Intelligence in Design'91, Proceedings of The First International Conference on Artificial Intelligence in Design, </booktitle> <address> Edinburgh, UK, </address> <pages> pages 303-321, </pages> <address> Oxford, UK, </address> <publisher> Butterworths. </publisher>
Reference-contexts: In cable-stayed bridge design, both specifications and artifact descriptions can be represented by lists of property-value pairs (Reich, 1991b). A learning process that can capture a relation between two sets of properties is concept formation, which is believed to be fundamental for capturing synthesis knowledge <ref> (Reich and Fenves, 1991) </ref>. To briefly illustrate this idea, Figure 4 shows the mappings possible when using concept learning: a mapping from several inputs to a single classification outcome, and concept formation: a mapping between several inputs to several outcomes; the latter is required for synthesis. <p> Analysis is coded directly, no learning is used in this task. Nevertheless, an experiment was performed to show that Ecobweb can learn heuristic analysis <ref> (Reich and Fenves, 1991) </ref>. Redesign is a diagnosis task which can be supported by concept learning. The characteristics of cable-stayed bridge design allow the use of weak domain knowledge. A learning program that supports such learning activity is Protos (Bareiss, 1989). <p> It is expected that in complex domains, a synergistic approach of human-computer induction will be more beneficial than the fully automatic approach <ref> (Reich et al, 1991) </ref>. Future extensions will allow the user incorporating knowledge while controlling Ecobweb's operation. Summary. This list of implemented and potential uses of knowledge or other learning strategies in the Cobweb framework is not exhaustive.
Reference: <author> Reich, Y. </author> <year> (1990). </year> <title> "Constructive induction by incremental concept formation." </title> <editor> In Feldman, Y. A. and Bruckstein, A., editors, </editor> <booktitle> Proceedings of the Seventh Israeli Symposium on Artificial Intelligence and Computer Vision (Ramat-Gan), </booktitle> <pages> pages 195-208, </pages> <address> Amsterdam, </address> <publisher> Elsevier Science Publishers. </publisher>
Reference-contexts: Constructive induction. Cobweb makes use of the original property-value pairs appearing in example descriptions, assuming that the description language is adequate. Ecobweb has a constructive induction scheme that can generate higher-order features from existing property values <ref> (Reich, 1990) </ref>. The extension to continuous properties can be viewed as grouping values into samples from an assumed distribution. For example, two values V 11 and V 12 can be combined into a new feature G 1 = fV 11 ; V 12 g.
Reference: <author> Reich, Y. </author> <year> (1991). </year> <title> "Automatic selection of examples for training a learning design system." </title> <type> Technical Report 12-42-91, </type> <institution> Engineering Design Research Center, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: In cable-stayed bridge design, both specifications and artifact descriptions can be represented by lists of property-value pairs (Reich, 1991b). A learning process that can capture a relation between two sets of properties is concept formation, which is believed to be fundamental for capturing synthesis knowledge <ref> (Reich and Fenves, 1991) </ref>. To briefly illustrate this idea, Figure 4 shows the mappings possible when using concept learning: a mapping from several inputs to a single classification outcome, and concept formation: a mapping between several inputs to several outcomes; the latter is required for synthesis. <p> Analysis is coded directly, no learning is used in this task. Nevertheless, an experiment was performed to show that Ecobweb can learn heuristic analysis <ref> (Reich and Fenves, 1991) </ref>. Redesign is a diagnosis task which can be supported by concept learning. The characteristics of cable-stayed bridge design allow the use of weak domain knowledge. A learning program that supports such learning activity is Protos (Bareiss, 1989). <p> It is expected that in complex domains, a synergistic approach of human-computer induction will be more beneficial than the fully automatic approach <ref> (Reich et al, 1991) </ref>. Future extensions will allow the user incorporating knowledge while controlling Ecobweb's operation. Summary. This list of implemented and potential uses of knowledge or other learning strategies in the Cobweb framework is not exhaustive.
Reference: <author> Reich, Y. </author> <year> (1991). </year> <title> "Building and improving design systems: A machine learning approach." </title> <type> PhD thesis, </type> <institution> Department of Civil Engineering, Carnegie Mellon University, Pittsburgh, PA. </institution> <note> (Available as Technical Report EDRC 02-16-91). </note>
Reference-contexts: In cable-stayed bridge design, both specifications and artifact descriptions can be represented by lists of property-value pairs (Reich, 1991b). A learning process that can capture a relation between two sets of properties is concept formation, which is believed to be fundamental for capturing synthesis knowledge <ref> (Reich and Fenves, 1991) </ref>. To briefly illustrate this idea, Figure 4 shows the mappings possible when using concept learning: a mapping from several inputs to a single classification outcome, and concept formation: a mapping between several inputs to several outcomes; the latter is required for synthesis. <p> Analysis is coded directly, no learning is used in this task. Nevertheless, an experiment was performed to show that Ecobweb can learn heuristic analysis <ref> (Reich and Fenves, 1991) </ref>. Redesign is a diagnosis task which can be supported by concept learning. The characteristics of cable-stayed bridge design allow the use of weak domain knowledge. A learning program that supports such learning activity is Protos (Bareiss, 1989). <p> It is expected that in complex domains, a synergistic approach of human-computer induction will be more beneficial than the fully automatic approach <ref> (Reich et al, 1991) </ref>. Future extensions will allow the user incorporating knowledge while controlling Ecobweb's operation. Summary. This list of implemented and potential uses of knowledge or other learning strategies in the Cobweb framework is not exhaustive.
Reference: <author> Reich, Y. </author> <year> (1991). </year> <title> "Design knowledge acquisition: Task analysis and a partial implementation." </title> <journal> Knowledge Acquisition, </journal> <volume> 3(3) </volume> <pages> 237-254. </pages>
Reference-contexts: In cable-stayed bridge design, both specifications and artifact descriptions can be represented by lists of property-value pairs (Reich, 1991b). A learning process that can capture a relation between two sets of properties is concept formation, which is believed to be fundamental for capturing synthesis knowledge <ref> (Reich and Fenves, 1991) </ref>. To briefly illustrate this idea, Figure 4 shows the mappings possible when using concept learning: a mapping from several inputs to a single classification outcome, and concept formation: a mapping between several inputs to several outcomes; the latter is required for synthesis. <p> Analysis is coded directly, no learning is used in this task. Nevertheless, an experiment was performed to show that Ecobweb can learn heuristic analysis <ref> (Reich and Fenves, 1991) </ref>. Redesign is a diagnosis task which can be supported by concept learning. The characteristics of cable-stayed bridge design allow the use of weak domain knowledge. A learning program that supports such learning activity is Protos (Bareiss, 1989). <p> It is expected that in complex domains, a synergistic approach of human-computer induction will be more beneficial than the fully automatic approach <ref> (Reich et al, 1991) </ref>. Future extensions will allow the user incorporating knowledge while controlling Ecobweb's operation. Summary. This list of implemented and potential uses of knowledge or other learning strategies in the Cobweb framework is not exhaustive.
Reference: <author> Shalin, V. L., Wisniewski, E. J., Levi, K. R., and Scott, P. D. </author> <year> (1988). </year> <title> "A formal analysis of machine learning systems for knowledge acquisition." </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 29(4) </volume> <pages> 429-446. </pages>
Reference: <author> Stirling, D. and Buntine, W. </author> <year> (1988). </year> <title> "Process routings in a steel mill: a challenging induction problem." </title> <editor> In Gero, J. S. and Stanton, R., editors, </editor> <booktitle> Artificial Intelligence Developments and Applications, </booktitle> <pages> pages 301-313, </pages> <publisher> North-Holland, Amsterdam. </publisher>
Reference-contexts: Similar ideas to the use of interactive induction, in which the user of the learning program observes the results of the program and modifies its input, are discussed in <ref> (Stirling and Buntine, 1988) </ref>. It is expected that in complex domains, a synergistic approach of human-computer induction will be more beneficial than the fully automatic approach (Reich et al, 1991). Future extensions will allow the user incorporating knowledge while controlling Ecobweb's operation. Summary.
Reference: <author> Tecuci, G. D. and Michalski, R. S. </author> <year> (1991). </year> <title> "A method for multistrategy task-adaptive learning based on plausible justifications." </title> <editor> In Birnbaum, L. A. and Collins, G., editors, </editor> <booktitle> Proceedings of the Eight International Workshop on Machine Learning (Evanston, </booktitle> <address> IL), </address> <pages> pages 549-553, </pages> <address> San Mateo, CA., </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Usually, even this matching difficult since most machine learning techniques use only one strategy that can partially match the requirements of real learning tasks <ref> (Tecuci and Michalski, 1991) </ref>. Since single strategy learning approaches are not sufficient for supporting learning in real domains, multistrategy approaches must be employed. Two perspectives of using multistrategy learning techniques emerge: the macro and the micro, elaborated below. <p> In real domains, these procedures are bound to employ several learning strategies, operating in an integrated manner. The crucial issue in this perspective is the control of and cooperation between the different strategies. Several recent studies employ multistrategy learning. MTL <ref> (Tecuci and Michalski, 1991) </ref> uses deduction, analogy, abduction, and induction, to justify an input and potentially learn new knowledge from observations. Although currently the control of these strategies is fixed, future extensions will allow the dynamic execution of the strategies.
Reference: <author> Tecuci, G. </author> <year> (1991). </year> <title> "A multistrategy learning approach to domain modeling and knowledge acquisition." </title> <editor> In Kodratoff, Y., editor, </editor> <booktitle> Machine Learning-EWSL91, Proceedings of the European Workshop on Machine Learning, </booktitle> <address> Berlin, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Usually, even this matching difficult since most machine learning techniques use only one strategy that can partially match the requirements of real learning tasks <ref> (Tecuci and Michalski, 1991) </ref>. Since single strategy learning approaches are not sufficient for supporting learning in real domains, multistrategy approaches must be employed. Two perspectives of using multistrategy learning techniques emerge: the macro and the micro, elaborated below. <p> In real domains, these procedures are bound to employ several learning strategies, operating in an integrated manner. The crucial issue in this perspective is the control of and cooperation between the different strategies. Several recent studies employ multistrategy learning. MTL <ref> (Tecuci and Michalski, 1991) </ref> uses deduction, analogy, abduction, and induction, to justify an input and potentially learn new knowledge from observations. Although currently the control of these strategies is fixed, future extensions will allow the dynamic execution of the strategies.
Reference: <author> Witten, I. H. and MacDonald, B. A. </author> <year> (1988). </year> <title> "Using concept learning for knowledge acquisition." </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 29(2) </volume> <pages> 171-196. </pages> <booktitle> Machine Learning: A Multistrategy Approach, Vol. IV, </booktitle> <year> 1994, </year> <pages> pp. 379-401 20 </pages>
References-found: 27

