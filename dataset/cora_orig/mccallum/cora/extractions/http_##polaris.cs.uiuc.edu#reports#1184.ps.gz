URL: http://polaris.cs.uiuc.edu/reports/1184.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: Tools That Led To Increased Program Performance  
Date: 1992  
Note: January  
Abstract: Patrick McClaughry and Rudolf Eigenmann fl CSRD Report 1184 Abstract This papers describes a set of tools that help a programmer be more efficient in optimizing scientific programs for a parallel computer. The design of these tools emerged from experience gained during a successful optimization effort on a set of representative supercomputer application codes. We have developed a number of utilities that complement available Unix tools. Additional tools offer a higher degree of interactivity; they are currently built into the Emacs editor which offers help and customization facilities. The new tools mainly facilitate two development phases that were identified as most time-consuming in the optimization project: The process of creating a consistent set of experimental program variants and the analysis and interpretation of compilation and performance results. 
Abstract-found: 1
Intro-found: 1
Reference: [ASM89] <author> Bill Appelbe, Kevin Smith, and Charles McDowell. Start/Pat: </author> <title> A Parallel-Programming Toolkit. </title> <journal> IEEE Software, </journal> <volume> 6(4) </volume> <pages> 29-38, </pages> <month> July </month> <year> 1989. </year>
Reference: [CCH + 87] <author> Alan Carle, Keith D. Cooper, Robert T. Hood, Ken Kennedy, Linda Torczon, and Scott K. Warren. </author> <title> A Practical Environment for Scientific Programming. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 75-89, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: works by compiling all routines of the default file separately (if not yet done so) and then linking only those needed. 3 Related Work There are several programming environments offering tool sets that are similar in some part to what ptopp offers (Faust [VGGJ + 89], Start/Pat [ASM89],sigmacs [SG90],R N <ref> [CCH + 87] </ref>). However, the similarities are somewhat superficial. All of these environments, including ours, attempt to make the life of a programmer easier. They all make an effort to integrate the tools into a common interface that tries to be intuitive to use.
Reference: [EHJP90] <author> R. Eigenmann, J. Hoeflinger, G. Jaxon, and D. Padua. </author> <title> Cedar fortran and its restructuring compiler. </title> <editor> In A. Nicolau D. Gelernter, T. Gross and D. Padua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing II. </booktitle> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: In all codes, significant performance improvements were gained using the methodology underlying this paper. Initially, the tools used for this project were the parallelizing compiler Kap/Cedar <ref> [EHJP90] </ref> and ordinary Unix utilities for manually improving the parallel Fortran code generated by Kap. Additional tool sets were considered, mainly the ones discussed in Section 3.
Reference: [Eig91] <author> Rudolf Eigenmann. </author> <title> Towards a methodology of optimizing programs for high-performance computers. </title> <type> Technical Report 1178, </type> <institution> Univ. of Illinois at Urbana-Champaign, Center for Supercomp. R&D, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: The success of these utilities warranted our tool project. The tool design was derived from a careful analysis of the time-consuming development phases in the optimization effort. The results of this analysis are described in <ref> [Eig91] </ref>. The following paragraphs summarize the important development steps. fl Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, 305 Tal-bot Laboratory, 104 South Wright St., Urbana, IL 61801-2932. This work was supported by the U.S. Department of Energy under grant no. <p> The huge amount of result data calls for some sort of a database that can manage and filter the data. A methodology was introduced in <ref> [Eig91] </ref> that determines important factors from this data and helps the user explain the program performance and find transformations for its improvement. Here is a possible place for major growth in new tool designs. <p> They would have to facilitate the analysis of all available sources of information and guide the user to a successful program transformation. The process of editing the program transformations was comparably fast, although errors introduced in this phase have caused extra debugging sessions. It is mentioned in <ref> [Eig91] </ref> that transformation-directed editors could be of some help. The need for a certain degree of tool integration arose from many situations. We have already mentioned the issue of managing the result data of many program runs. <p> Start/Pat and R N include debugging interpreters and the ability to interactively replay the execution of a program. Users of ptopp use the debugging techniques available at the UNIX level while within Emacs. Several techniques used in the porting process are mentioned in <ref> [Eig91] </ref>. At this point we do not plan on providing replay/simulation capabilities in ptopp. Some of ptopp's differences. Perhaps because of its close ties to the actual porting of benchmark programs, ptopp offers some functionality not well supported by the other environments.
Reference: [SG90] <author> Bruce Shei and Dennis Gannon. SIGMACS: </author> <title> A Programmable Programming Environment. </title> <booktitle> 3rd Workshop on Languages and Compilers for Parallel Programming, </booktitle> <year> 1990. </year>
Reference: [VGGJ + 89] <author> Jr. Vincent Guarna, Dennis Gannon, David Jablonowski, Allen Malony, and Yo-gesh Gaur. </author> <title> Faust: An Integrated Environment for the Development of Parallel Programs. </title> <journal> IEEE Software, </journal> <pages> pages 20-27, </pages> <month> July </month> <year> 1989. </year> <month> 10 </month>
Reference-contexts: The cfmake command works by compiling all routines of the default file separately (if not yet done so) and then linking only those needed. 3 Related Work There are several programming environments offering tool sets that are similar in some part to what ptopp offers (Faust <ref> [VGGJ + 89] </ref>, Start/Pat [ASM89],sigmacs [SG90],R N [CCH + 87]). However, the similarities are somewhat superficial. All of these environments, including ours, attempt to make the life of a programmer easier.
References-found: 6

