URL: http://www.cs.duke.edu/~jsv/Papers/TaV95.cooperative.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node60.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: rt@cs.brown.edu  jsv@cs.duke.edu  
Title: Optimal Cooperative Search in Fractional Cascaded Data Structures  
Author: Roberto Tamassia Jeffrey Scott Vitter 
Note: (May 15, 1995)  
Address: Providence, RI 02912-1910  Durham, NC 27708-0129  
Affiliation: Dept. of Computer Science Brown University  Dept. of Computer Science Duke University  
Abstract: Fractional cascading is a technique designed to allow efficient sequential search in a graph with catalogs of total size n. The search consists of locating a key in the catalogs along a path. In this paper we show how to preprocess a variety of fractional cascaded data structures whose underlying graph is a tree so that searching can be done efficiently in parallel. The preprocessing takes O(log n) time with n= log n processors on an EREW PRAM. For a balanced binary tree cooperative search along root-to-leaf paths can be done in O((log n)= log p) time using p processors on a CREW PRAM. Both of these time/processor constraints are optimal. The searching in the fractional cascaded data structure can be either explicit, in which the search path is specified before the search starts, or implicit, in which the branching is determined at each node. We apply this technique to a variety of geometric problems, including point location, range search, and segment intersection search. fl Support was provided in part by National Science Foundation grant CCR-9007851, by the U.S. Army Research Office under grants DAAL03-91-G-0035 and DAAH04-93-0134, and and by the Office of Naval Research and the Advanced Research Projects Agency under contract N00014-91-J-4052, ARPA order 8225. y The research was performed while the author was at Brown University. Support was provided in part by an NSF Presidential Young Investigator Award CCR- CCR-9047466, with matching funds from IBM, by National Science Foundation grant CCR-9007851, by the U.S. Army Research Office under grant DAAL03-91-G-0035, and and by the Office of Naval Research and the Advanced Research Projects Agency under contract N00014-91-J-4052, ARPA order 8225. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Atallah, R. Cole, and M. T. Goodrich. </author> <title> Cascading divide-and-conquer: A technique for designing parallel algorithms. </title> <journal> SIAM J. Comput., </journal> <volume> 18 </volume> <pages> 499-532, </pages> <year> 1989. </year>
Reference-contexts: If cooperative search is done within the EREW PRAM model, the lower bound increases to (log (n=p)). Intuitively we form a preprocessed version T 0 of T by starting with the fractional cascaded data structure constructed by <ref> [1] </ref> and introducing certain substructures. For cooperative searches, we use p processors to traverse fi (log p) levels of the appropriate substructure in constant time, by simulating p-way branching. <p> The preprocessing can be done in O (log n) time with n= log n processors on an EREW PRAM. It consists of two main steps: Step 1. Form the fractional cascading data structure of <ref> [1] </ref>. Step 2. Form dlog log ne 1 search substructures T i , for 0 i dlog log ne 1. <p> Step 1 can be done within the desired time bounds <ref> [1] </ref>. The rest of this subsection is devoted to the design and analysis of Step 2. The difficulty in implementing Step 2 is twofold: The first problem is how to modify the fractional cascading data structure of [1] so that fi (log p) levels can be traversed in one "hop" in <p> Step 1 can be done within the desired time bounds <ref> [1] </ref>. The rest of this subsection is devoted to the design and analysis of Step 2. The difficulty in implementing Step 2 is twofold: The first problem is how to modify the fractional cascading data structure of [1] so that fi (log p) levels can be traversed in one "hop" in constant time, even when the search is implicit and thus the path is not known a priori. <p> The second problem is that individual catalogs may be large, even though the total size of all catalogs is O (n), and this impacts the space needed for the data structures. Let S be the fractional cascaded data structure constructed by the parallel algorithm of <ref> [1] </ref> when applied to a bidirectional version of tree T , in which each parent-to-child edge is replaced by two directed edges. For convenience, we will use S to refer to the portion of S corresponding only to parent-to-child directed edges. <p> Since there are dk=(p 1* log n)e groups of subpaths, the total time complexity is O ((log n)= log p + k=(p 1* log p)). 2 When the maximum degree d of the tree is not bounded, we can use standard techniques (see, for example, <ref> [1] </ref>) to replace each level of the tree by log d levels of a binary tree. <p> We assume that the subdivision S is monotone and is given with a standard representation such as doubly-connected edge lists [15]. Nonmonotone subdivisions are handled via a preliminary triangulation that takes O (log n) time using a CREW PRAM with n processors <ref> [1, 18, 10] </ref>, or a CRCW PRAM with n= log n processors [11]. Parallel triangulation can also be performed using a randomized CREW PRAM algorithm that runs in O (log n log log n) time and does O (n) expected work [6, 5].
Reference: [2] <author> B. Chazelle. </author> <title> How to search in history. </title> <journal> Inform. Control, </journal> <volume> 64 </volume> <pages> 77-99, </pages> <year> 1985. </year>
Reference-contexts: This problem was previously solved using an O (n)-space data structure (called canal tree) that supports sequential point location search in O (log 2 n) time <ref> [2] </ref>. For cooperative search we use a data structure based on separating surfaces, a three-dimensional extension of separators. This data structure can be efficiently constructed in parallel if a topological ordering of the cells (with respect to the dominance relation) is available.
Reference: [3] <author> B. Chazelle and L. J. Guibas. Fractional cascading: I. </author> <title> A data structuring technique. </title> <journal> Algorith-mica, </journal> <volume> 1 </volume> <pages> 133-162, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Fractional cascading is a preprocessing technique that allows efficient searching of the same key in a collection of catalogs (sorted lists) <ref> [3, 4] </ref>. More formally, there is a catalog associated with each node of a graph G. Given a search argument y and a search path in G, the goal is to find the smallest entry y in each of the catalogs of the nodes on the search path.
Reference: [4] <author> B. Chazelle and L. J. Guibas. </author> <title> Fractional cascading: II. </title> <journal> Applications. Algorithmica, </journal> <volume> 1 </volume> <pages> 163-191, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Fractional cascading is a preprocessing technique that allows efficient searching of the same key in a collection of catalogs (sorted lists) <ref> [3, 4] </ref>. More formally, there is a catalog associated with each node of a graph G. Given a search argument y and a search path in G, the goal is to find the smallest entry y in each of the catalogs of the nodes on the search path.
Reference: [5] <author> K. L. Clarkson, R. Cole, and R. E. Tarjan. </author> <title> Erratum: Randomized parallel algorithms for trapezoidal diagrams. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 2(3) </volume> <pages> 341-343, </pages> <year> 1992. </year>
Reference-contexts: Parallel triangulation can also be performed using a randomized CREW PRAM algorithm that runs in O (log n log log n) time and does O (n) expected work <ref> [6, 5] </ref>. The bridged separator tree [13, 9] uses O (n) space and supports point location queries in S in O (log n) time. It is a balanced binary tree T with catalogs where searches are performed implicitly.
Reference: [6] <author> K. L. Clarkson, R. Cole, and R. E. Tarjan. </author> <title> Randomized parallel algorithms for trapezoidal diagrams. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 2(2) </volume> <pages> 117-133, </pages> <year> 1992. </year>
Reference-contexts: Parallel triangulation can also be performed using a randomized CREW PRAM algorithm that runs in O (log n log log n) time and does O (n) expected work <ref> [6, 5] </ref>. The bridged separator tree [13, 9] uses O (n) space and supports point location queries in S in O (log n) time. It is a balanced binary tree T with catalogs where searches are performed implicitly.
Reference: [7] <author> N. Dadoun and D. G. Kirkpatrick. </author> <title> Cooperative subdivision search algorithms with applications. </title> <booktitle> In Proc. 27th Allerton Conf. Commun. Control Comput., </booktitle> <pages> pages 538-547, </pages> <year> 1989. </year>
Reference-contexts: Both of these time/processor tradeoffs are optimal. One motivation for this work is the problem of cooperative point location search in an n-vertex planar subdivision. Dadoun and Kirkpatrick <ref> [7] </ref> show how to perform cooperative point location on their hierarchical data structure [12] in O ((log n)= log p) time, which is optimal. Unfortunately, the preprocessing requirements are high: they use O (log 2 n) time with O (n 3 ) processors on a CREW PRAM. <p> Similar truncation ideas appear often in the parallel computing literature, for example, in evaluating n-node complete binary trees in optimal O (log n) time with n= log n processors, and in a cooperative search context in <ref> [7] </ref>. The problem that remains is how to reduce the storage requirement for each individual T i .
Reference: [8] <author> M. Edahiro, I. Kokubo, and Ta. Asano. </author> <title> A new point-location algorithm and its practical efficiency: comparison with existing algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 3 </volume> <pages> 86-109, </pages> <year> 1984. </year>
Reference-contexts: In [17] we show how to construct the bridged separator tree data structure [13, 9] for a monotone subdivision in O (log n) time using n= log n processors on an EREW PRAM. The bridged separator tree is very efficient in practice <ref> [8] </ref>. The search path used to process a point location query is "highly" implicit, due to the space-saving nature of the bridged separator tree, which makes cooperative search seem especially difficult.
Reference: [9] <author> H. Edelsbrunner, L. J. Guibas, and J. Stolfi. </author> <title> Optimal point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 317-340, </pages> <year> 1986. </year>
Reference-contexts: Unfortunately, the preprocessing requirements are high: they use O (log 2 n) time with O (n 3 ) processors on a CREW PRAM. In [17] we show how to construct the bridged separator tree data structure <ref> [13, 9] </ref> for a monotone subdivision in O (log n) time using n= log n processors on an EREW PRAM. The bridged separator tree is very efficient in practice [8]. <p> Parallel triangulation can also be performed using a randomized CREW PRAM algorithm that runs in O (log n log log n) time and does O (n) expected work [6, 5]. The bridged separator tree <ref> [13, 9] </ref> uses O (n) space and supports point location queries in S in O (log n) time. It is a balanced binary tree T with catalogs where searches are performed implicitly.
Reference: [10] <author> M. T. Goodrich. </author> <title> Triangulating a polygon in parallel. </title> <journal> J. Algorithms, </journal> <volume> 10 </volume> <pages> 327-351, </pages> <year> 1989. </year>
Reference-contexts: We assume that the subdivision S is monotone and is given with a standard representation such as doubly-connected edge lists [15]. Nonmonotone subdivisions are handled via a preliminary triangulation that takes O (log n) time using a CREW PRAM with n processors <ref> [1, 18, 10] </ref>, or a CRCW PRAM with n= log n processors [11]. Parallel triangulation can also be performed using a randomized CREW PRAM algorithm that runs in O (log n log log n) time and does O (n) expected work [6, 5].
Reference: [11] <author> M. T. Goodrich. </author> <title> Planar separators and parallel polygon triangulation. </title> <booktitle> In Proc. 24th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 507-516, </pages> <year> 1992. </year>
Reference-contexts: Nonmonotone subdivisions are handled via a preliminary triangulation that takes O (log n) time using a CREW PRAM with n processors [1, 18, 10], or a CRCW PRAM with n= log n processors <ref> [11] </ref>. Parallel triangulation can also be performed using a randomized CREW PRAM algorithm that runs in O (log n log log n) time and does O (n) expected work [6, 5].
Reference: [12] <author> D. G. Kirkpatrick. </author> <title> Optimal search in planar subdivisions. </title> <journal> SIAM J. Comput., </journal> <volume> 12 </volume> <pages> 28-35, </pages> <year> 1983. </year>
Reference-contexts: Both of these time/processor tradeoffs are optimal. One motivation for this work is the problem of cooperative point location search in an n-vertex planar subdivision. Dadoun and Kirkpatrick [7] show how to perform cooperative point location on their hierarchical data structure <ref> [12] </ref> in O ((log n)= log p) time, which is optimal. Unfortunately, the preprocessing requirements are high: they use O (log 2 n) time with O (n 3 ) processors on a CREW PRAM.
Reference: [13] <author> D. T. Lee and F. P. Preparata. </author> <title> Location of a point in a planar subdivision and its applications. </title> <journal> SIAM J. Comput., </journal> <volume> 6 </volume> <pages> 594-606, </pages> <year> 1977. </year>
Reference-contexts: Unfortunately, the preprocessing requirements are high: they use O (log 2 n) time with O (n 3 ) processors on a CREW PRAM. In [17] we show how to construct the bridged separator tree data structure <ref> [13, 9] </ref> for a monotone subdivision in O (log n) time using n= log n processors on an EREW PRAM. The bridged separator tree is very efficient in practice [8]. <p> Parallel triangulation can also be performed using a randomized CREW PRAM algorithm that runs in O (log n log log n) time and does O (n) expected work [6, 5]. The bridged separator tree <ref> [13, 9] </ref> uses O (n) space and supports point location queries in S in O (log n) time. It is a balanced binary tree T with catalogs where searches are performed implicitly.
Reference: [14] <author> K. Mehlhorn and S. Naher. </author> <title> Dynamic fractional cascading. </title> <journal> Algorithmica, </journal> <volume> 5 </volume> <pages> 215-241, </pages> <year> 1990. </year>
Reference-contexts: Extend the results to generalized search paths (the catalogs to be searched are at the nodes of a subgraph). 4. Study cooperative update in dynamic data structures. Dynamic fractional cascading can be done sequentially with update time O (log log n) <ref> [14] </ref>. 17
Reference: [15] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: an Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Find the region of S containing a given query point q = (x; y). We assume that the subdivision S is monotone and is given with a standard representation such as doubly-connected edge lists <ref> [15] </ref>. Nonmonotone subdivisions are handled via a preliminary triangulation that takes O (log n) time using a CREW PRAM with n processors [1, 18, 10], or a CRCW PRAM with n= log n processors [11]. <p> Proof : All of these problems can be solved by using data structures consisting of a balanced binary tree with O (n) nodes, each containing a catalog, such that the overall size of the catalogs is O (n log n) <ref> [15] </ref>. We describe only the data structure for the Orthogonal Segment Intersection Problem. The data structures for the other problems are constructed with a similar approach. We set up a segment tree T on the y-coordinates of the segments in V .
Reference: [16] <author> M. Snir. </author> <title> On parallel searching. </title> <journal> SIAM J. Comput., </journal> <volume> 14(3) </volume> <pages> 688-708, </pages> <year> 1989. </year>
Reference-contexts: The time O ((log n)= log p) for the cooperative search is optimal, since we can reduce the problem of dictionary searching to cooperative search in a binary tree with catalogs, and thus the lower bound from <ref> [16] </ref> applies. If cooperative search is done within the EREW PRAM model, the lower bound increases to (log (n=p)). Intuitively we form a preprocessed version T 0 of T by starting with the fractional cascaded data structure constructed by [1] and introducing certain substructures. <p> We assume that we know the catalog entry c = find (y; u). (If u is the root of S, we can determine c by a parallel binary search in O (log p n) = O ((log n)= log p) time <ref> [16] </ref>; otherwise, we will be able to determine c as a result of the search of the ancestor subtree of U .) We define the reach in U of catalog entry c, denoted by reach (c; U ), to be the set of all possible catalog entries that can be returned
Reference: [17] <author> R. Tamassia and J. S. Vitter. </author> <title> Parallel transitive closure and point location in planar structures. </title> <journal> SIAM J. Comput., </journal> <volume> 20(4) </volume> <pages> 708-725, </pages> <year> 1991. </year>
Reference-contexts: Unfortunately, the preprocessing requirements are high: they use O (log 2 n) time with O (n 3 ) processors on a CREW PRAM. In <ref> [17] </ref> we show how to construct the bridged separator tree data structure [13, 9] for a monotone subdivision in O (log n) time using n= log n processors on an EREW PRAM. The bridged separator tree is very efficient in practice [8]. <p> The search path used to process a point location query is "highly" implicit, due to the space-saving nature of the bridged separator tree, which makes cooperative search seem especially difficult. In this paper, we show how to modify the bridged separator tree data structure of <ref> [17] </ref> within the same optimal time-processor bound so that it supports optimal cooperative point location. In the next section we sketch our cooperative search algorithm for trees. We focus on balanced binary trees since the majority of applications of fractional cascading fall into this category. <p> The parallel construction of the data structure uses a variation of the techniques described in <ref> [17] </ref>. 2 13 a query point q = (x; y). The sets of proper edges of each node of the tree are displayed as chains. The edges whose vertical span includes y and that are proper edges of a node of U are drawn with thick lines.
Reference: [18] <author> C. K. Yap. </author> <title> Parallel triangulation of a polygon in two calls to the trapezoidal map. </title> <journal> Algorithmica, </journal> <volume> 3 </volume> <pages> 279-288, </pages> <year> 1988. </year>
Reference-contexts: We assume that the subdivision S is monotone and is given with a standard representation such as doubly-connected edge lists [15]. Nonmonotone subdivisions are handled via a preliminary triangulation that takes O (log n) time using a CREW PRAM with n processors <ref> [1, 18, 10] </ref>, or a CRCW PRAM with n= log n processors [11]. Parallel triangulation can also be performed using a randomized CREW PRAM algorithm that runs in O (log n log log n) time and does O (n) expected work [6, 5].
References-found: 18

