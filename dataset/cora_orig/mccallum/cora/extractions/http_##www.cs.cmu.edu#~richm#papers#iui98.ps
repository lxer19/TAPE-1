URL: http://www.cs.cmu.edu/~richm/papers/iui98.ps
Refering-URL: http://www.cs.cmu.edu/~bam/uicourse/1998spring/lecture14demo.html
Root-URL: 
Keyword: End-User Programming, User Interface Software, Application Builders, Programming-by-Demonstration, Programming-by-Example, Inductive Learning, Gamut  
Abstract: By combining the strengths of multiple interaction techniques and inferencing algorithms, Gamut can infer behaviors from examples that previously required a developer to annotate or otherwise modify code by hand. Gamut is a programming-by-demonstration (PBD) tool for building whole applications. It revises code automatically when new examples are demonstrated using a recursive procedure that efficiently scans for the differences between a new example and the original behavior. Differences that cannot be resolved by generating a suitable description are handled by another AI algorithm, decision tree learning, providing a significantly greater ability to infer complex relationships. Gamuts interaction techniques facilitate demonstrating many examples quickly and allow the user to give the system hints that show relationships that would be too time consuming to discover by search alone. Altogether, the concepts combined in Gamut will allow nonprogrammers to build software they never could before. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> G.L. Fisher, D.E. Busse, D. A. Wolber. </author> <title> Adding Rule-Based Reasoning to a Demonstrational Interface Builder. </title> <booktitle> Proceedings of UIST92, </booktitle> <pages> pp. 89-97. </pages>
Reference-contexts: Guide objects are graphical objects that are visible only when the application is being built and are made invisible when the game is played. Using guide objects is not new. Metamouse [8] and Demo II <ref> [1] </ref> use a nearly identical abstraction, and Rehearsal World [3] developed offstage actors as its term for offscreen objects. <p> Gamuts behavior structure as well as the means for generating descriptions were taken from Marquise. Also, Gamuts mouse arrow icons for demonstrating mouse events came from Marquise. The guide object ideas in Gamut were first used in Demo II <ref> [1] </ref>, Metamouse [8], and Rehearsal World [3] as was previously mentioned. Grizzly Bear [2] has a good inferencing system for finding linear constraints and some forms of conditions. It also had an algorithm for recognizing certain groups of objects.
Reference: 2. <author> M. Frank. </author> <title> Model-Based User Interface Design by Demonstration and by Interview. </title> <type> Ph.D. thesis. </type> <institution> Graphics, Visualization, & Usability Center, Georgia Inst. of Tech., </institution> <address> Atlanta, GA, </address> <year> 1996. </year>
Reference-contexts: Also, Gamuts mouse arrow icons for demonstrating mouse events came from Marquise. The guide object ideas in Gamut were first used in Demo II [1], Metamouse [8], and Rehearsal World [3] as was previously mentioned. Grizzly Bear <ref> [2] </ref> has a good inferencing system for finding linear constraints and some forms of conditions. It also had an algorithm for recognizing certain groups of objects. For instance, it could learn the set of all objects whose color is blue. Moving beyond that level of description, though, was not possible.
Reference: 3. <author> L. Gould, W. Finzer. </author> <title> Programming by Rehearsal. </title> <institution> Palo Alto Research Center, Xerox Corporation, </institution> <year> 1984. </year>
Reference-contexts: Guide objects are graphical objects that are visible only when the application is being built and are made invisible when the game is played. Using guide objects is not new. Metamouse [8] and Demo II [1] use a nearly identical abstraction, and Rehearsal World <ref> [3] </ref> developed offstage actors as its term for offscreen objects. Next to the pyramid, the developer draws a rectangle to act as a state variable to show which path the droplet follows and adds a timer to make the droplet move independently. <p> Gamuts behavior structure as well as the means for generating descriptions were taken from Marquise. Also, Gamuts mouse arrow icons for demonstrating mouse events came from Marquise. The guide object ideas in Gamut were first used in Demo II [1], Metamouse [8], and Rehearsal World <ref> [3] </ref> as was previously mentioned. Grizzly Bear [2] has a good inferencing system for finding linear constraints and some forms of conditions. It also had an algorithm for recognizing certain groups of objects. For instance, it could learn the set of all objects whose color is blue.
Reference: 4. <author> D.C. Halbert. </author> <title> Programming by Example. </title> <type> Ph.D. thesis, </type> <institution> Computer Science Division, EECS Department, University of California, Berkeley, </institution> <address> CA, </address> <year> 1984. </year>
Reference-contexts: Expressions which use a boolean test encode the test as a decision tree. Gamut uses three kinds of objects to represent application behavior: events, actions, and descriptions. These components are similar to the language invented by Halbert in his SmallStar system <ref> [4] </ref>. An event object is the same as an Amulet command object [12]. Command objects are stored in widgets and input objects (called interactors). In some systems, a command object would be likened to a callback procedure.
Reference: 5. <institution> Hypercard. Apple Computer Inc., Cupertino, </institution> <address> CA, </address> <year> 1993. </year>
Reference-contexts: Tools like interface builders facilitate the design of the layout and the look of some parts of the program, but still require pro gramming to make the interface actually work. Authoring tools like HyperCard <ref> [5] </ref> and Director [7] provide more support, but require the developer to learn baroque programming languages to produce anything beyond simple interactions. Application builders such as Klik & Play [6] which do eliminate programming also impose severe limits on the kinds of programs one can make.
Reference: 6. <author> F. Lionet, Y. Lamoureux. </author> <title> Klik & Play. </title> <booktitle> Europress software, </booktitle> <year> 1996. </year>
Reference-contexts: Authoring tools like HyperCard [5] and Director [7] provide more support, but require the developer to learn baroque programming languages to produce anything beyond simple interactions. Application builders such as Klik & Play <ref> [6] </ref> which do eliminate programming also impose severe limits on the kinds of programs one can make. A typical solution has been to simplify the language with which one programs.
Reference: 7. <author> Macromedia. </author> <title> Director. </title> <address> 600 Townsend Street, San Francisco, CA 94103, macropr@macromedia.com, http://www.macrome-dia.com/ 1996. </address>
Reference-contexts: Tools like interface builders facilitate the design of the layout and the look of some parts of the program, but still require pro gramming to make the interface actually work. Authoring tools like HyperCard [5] and Director <ref> [7] </ref> provide more support, but require the developer to learn baroque programming languages to produce anything beyond simple interactions. Application builders such as Klik & Play [6] which do eliminate programming also impose severe limits on the kinds of programs one can make.
Reference: 8. <author> D. Maulsby. </author> <title> Inducing Procedures Interactively: Adventures with Metamouse. </title> <type> Masters thesis. </type> <institution> Research Rept. 88/335/47. University of Calgary, </institution> <month> December, </month> <year> 1988. </year>
Reference-contexts: In Gamut, we call these guide objects because they are meant to guide the actions of other objects. Guide objects are graphical objects that are visible only when the application is being built and are made invisible when the game is played. Using guide objects is not new. Metamouse <ref> [8] </ref> and Demo II [1] use a nearly identical abstraction, and Rehearsal World [3] developed offstage actors as its term for offscreen objects. <p> Gamuts behavior structure as well as the means for generating descriptions were taken from Marquise. Also, Gamuts mouse arrow icons for demonstrating mouse events came from Marquise. The guide object ideas in Gamut were first used in Demo II [1], Metamouse <ref> [8] </ref>, and Rehearsal World [3] as was previously mentioned. Grizzly Bear [2] has a good inferencing system for finding linear constraints and some forms of conditions. It also had an algorithm for recognizing certain groups of objects.

References-found: 8

