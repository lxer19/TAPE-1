URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-93-59.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Formal Specification for Procedure Calling Conventions  
Author: Mark W. Bailey Jack W. Davidson 
Abstract: Computer Science Report No. CS-93-59 November 5, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [Abr93] <author> Abrahams, P.W. </author> <title> Typographical Extensions for Programming Languages: Breaking out of the ASCII Straitjacket. </title> <journal> SIGPLAN Notices 28(2):6168 February 1993. </journal>
Reference: [DW91] <author> Davidson, J.W. and Whalley, </author> <title> D.B. Methods for Saving and Restoring Register Values across Function Calls. </title> <note> SoftwarePractice and Experience 21(2):149165 February 1991. - 12 </note> - 
Reference-contexts: However, the convention makes many choices that directly affect the efficiency of calling procedures. We therefore feel that it is important to experiment with different conventions on each to tune the convention to the machine. Davidson and Whalley have performed a limited experiment in investigating different calling conventions <ref> [DW91] </ref>. However, due to the enormous amount of work required to change their compiler from one calling convention to another, their experiment was limited to several different methods of saving and restoring registers. We divide the remainder of this paper into three sections.
Reference: [DEC78] <institution> Digital Equipment Corporation. VAX Architecture Handbook. Digital Equipment Corporation, </institution> <year> 1978. </year>
Reference-contexts: Additionally, in this convention, some registers values must be preserved across the procedure call. Consequently, the callee must save the values of these registers if it uses them. This convention is almost identical to Digitals VAX C language calling convention <ref> [DEC78] </ref>. 3.3.1 Placement of Procedure Arguments First, we examine the placement of procedure arguments. In this scheme, all the arguments, regardless of type, are passed by value on the stack. Further, there are no alignment constraints placed on the stack pointer, or the locations of argument values.
Reference: [DEC93] <institution> Digital Equipment Corporation. Calling Standard for AXP Systems. Digital Equipment Corporation, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: However, this is understandable since the convention, once understood, is so difficult to implement that the GNU ANSI C compiler fails on an example listed in the manual. Digital, in recognizing the problem, has published a calling standard document for their new Alpha series processors <ref> [DEC93] </ref> that exceeds 100 pages 1 . Thus, it should be clear that there is a need for an accurate, concise description of procedure calling conventions. 1.2 Applications Any application that must process or generate assembly language code is likely to need to know about a procedure calling convention.
Reference: [JR] <author> Johnson, S.C. and Ritchie, </author> <title> D.M. The C Language Calling Sequence. </title> <institution> Bell Laboratories. </institution>
Reference-contexts: The existence of a method for accurately specifying calling conventions also makes it possible to experiment with different conventions. Johnson and Richie have set forth the issues in providing an efficient calling sequence having already defined a calling convention <ref> [JR] </ref>. However, the convention makes many choices that directly affect the efficiency of calling procedures. We therefore feel that it is important to experiment with different conventions on each to tune the convention to the machine. Davidson and Whalley have performed a limited experiment in investigating different calling conventions [DW91]. <p> resources -r 2 ,f 0 - map RVAL 1 fi RVAL 1 .type ^ - byte, word, longword:&lt;<<r 2 &gt;>>, oat, double:&lt;<<f 0 &gt;>>, struct:&lt;-(&lt;<r 2 &gt;>)> - end data transfer end callee epilogue - 11 - spend considerable time explaining the ramifications that varargs has on the calling sequence <ref> [JR] </ref>. In fact, providing support for Cs varargs frequently has profound inuence on the calling convention. However, in C, procedures that receive variable numbers of arguments still adhere to the defined calling convention.
Reference: [KH92] <author> Kane, G. and Heinrich, J. </author> <title> MIPS RISC Architecture. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Using the programmers reference manual may be equally problematical. As with much of the information in the programmers manual, the description is likely to be written in English and is liable to be ambiguous, or inaccurate. For example, in the MIPS programmers manual <ref> [KH92] </ref> the 1. The calling procedure is known as the caller. 2. The called procedure is known as the callee. A Formal Specification for Procedure Calling Conventions Mark W. Bailey Jack W.
Reference: [KR78] <author> Kernighan, B.W. and Ritchie, </author> <title> D.M. The C Programming Language. </title> <publisher> Prentice-Hall, </publisher> <year> 1978. </year>
Reference-contexts: A CCL description is typically language depended as well. This is, in part, because the language definition inuences the calling convention. For example, the C language <ref> [KR78] </ref> defines a slightly different calling convention than its successor ANSI C [KR88]. One difference is that C always promotes arguments of type oat to type double, ANSI C does not. These differences are part of the calling convention, and are, therefore, present in the resulting CCL descriptions.
Reference: [KR88] <author> Kernighan, B.W. and Ritchie, </author> <title> D.M. The C Programming Language, 2nd edition. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: A CCL description is typically language depended as well. This is, in part, because the language definition inuences the calling convention. For example, the C language [KR78] defines a slightly different calling convention than its successor ANSI C <ref> [KR88] </ref>. One difference is that C always promotes arguments of type oat to type double, ANSI C does not. These differences are part of the calling convention, and are, therefore, present in the resulting CCL descriptions.
References-found: 8

