URL: http://www.cse.psu.edu/~catuscia/papers/Acireale/acireale.ps.gz
Refering-URL: http://www.cse.psu.edu/~catuscia/publications.html
Root-URL: http://www.cse.psu.edu
Email: frb@cwi.nl  catuscia@di.unipi.it  
Title: From Concurrent Logic Programming to Concurrent Constraint Programming  
Author: Frank S. de Boer Catuscia Palamidessi 
Address: Boelelaan 1081, 1081 HV Amsterdam, The Netherlands  via Benedetto XV 3, 16132, Genova, Italy  
Affiliation: Department of Mathematics and Computer Science Free University de  Dipartimento di Informatica e Scienze dell'Informazione (DISI) Universita di Genova  
Abstract: The endeavor to extend logic programming to a language suitable for concurrent systems has stimulated in the last decade an intensive research, resulting in a large variety of proposals. A common feature of the various approaches is the attempt to define mechanisms for concurrency within the logical paradigm, the driving ideal being the balance between expressiveness and declarative reading. In this survey we present the motivations, the principal lines along which the field has developed, the various paradigms which have been proposed, and the main approaches to the semantic foundations. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Andreoli, J.-M. and Pareschi, R. </author> <year> (1991). </year> <title> Linear Objects: Logical processes with built-in inheritance. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 445-473. </pages> <booktitle> Also in the Proc. of the Seventh International Conference on Logic programming, 1990, </booktitle> <address> Jerusalem. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: These kind of sequences (reactive sequences) were already one component of the semantics in (Gerth et al. 1988) and in (Gaifman et al. 1989), the other component being the refusal information. 6 Concurrent Logic and Concurrent Constraint Programming Independently, an intriguing approach was developed by Saraswat et al. <ref> (1991) </ref>. The basic idea consists of denoting processes by Scott's closure operators, which have the nice property of being representable via the set of their fixpoints. The operators of the language can then be described as operations on those sets. In particular, parallelism can be modeled simply by intersection. <p> The operators of the language can then be described as operations on those sets. In particular, parallelism can be modeled simply by intersection. This semantics abstracts from deadlock, however it should be possible to extend it so to model deadlock as well. The approach of Saraswat et al. <ref> (1991) </ref> is suitable for languages without atomic unification, i.e. languages which do not support the consistency check as a guard of a choice. In this context, the approach of de Boer and Palamidessi (1991a) is equivalent. <p> Linear logic is particularly suitable to deal with concrete aspects of the computation, such as the consumption of resources. Furthermore, it seems to be an appropriate basis for the integration of logic programming and object-oriented programming <ref> (Andreoli and Pareschi 1991) </ref>. De Boer and Palamidessi (1992) have made a first step towards the algebraic axiomatization of ccp. Process algebra is one of the most widespread methods in concurrency theory both for specification and for program verification, and it has been intensively investigated in the synchronous case. <p> In the asynchronous case however a lot of work remains to be done: modeling various notions of observables and capturing by axioms the specificity of the communication mechanisms of the various languages. Recently there has been a lot of interest concerning expressiveness questions. Shapiro <ref> (1991, 1992) </ref> and de Boer and Palamidessi (1990b, 1991b, 1994) have done some preliminary work aimed at the development of a general theory to compare the expressive power of concurrent languages in general, and cc languages in particular. <p> The idea is to consider a denotational semantics which correctly approximate the observables, without being correct in the classical sense. This allows us to consider simpler semantic structures which make the analysis more efficient. An efficient distributed implementation of ccp requires the development of non-interleaving models. Montanari and Rossi <ref> (1991) </ref> have developed a first proposal for a `true concurrent' model. Such a model is based on graph grammars: the inference rules of the underlying constraint system and the (user specified) agents are expressed as graph productions. <p> tg: Given a set of equations E = ft 1 = u 1 ; : : : ; t n = u n g, we extend the notion of most general unifier by defining mgu (E) as the least (up to ') substitution # such that for each i 2 <ref> [1; n] </ref> we have t i # = u i #. If such a substitution does not exist then we define mgu (E) = false. Definition 3.3. <p> In GHC it is not possible to write an append program having the feature above described: the kind of argument (input or output) is fixed by the program. 5 Concurrent constraint programming Concurrent constraint programming was proposed by Saraswat (1989), Saraswat and Rinard (1990), Saraswat et al. <ref> (1991) </ref>. We follow here the definition given in (Saraswat and Rinard 1990), which is more general than the later formulations, because it covers the case of atomic unification. <p> On this basis we prove the isomorphism of our restricted model with the model developed by Saraswat et al. <ref> (1991) </ref>. The consistency check requires to perform, before executing an action of the form tell (c), a test on the consistency of c with respect to the current 48 Concurrent Logic and Concurrent Constraint Programming store. <p> = b) + ask (true) ! ask (x = a) ! tell (x = a ^ y = b) + ask (true) ! Stop A 2 = ask (true) ! tell (x = a ^ y = b) + ask (true) ! Stop The semantics proposed by Saraswat et al. <ref> (1991) </ref> does not distinguishes between A 1 and A 2 , whereas the semantics presented in previous sections does. In fact, the second branch of A 1 can generate deadlock (depending upon the store) whereas this possibility is excluded in A 2 . <p> The identification of deadlock and success is maybe questionable from Frank S. de Boer and Catuscia Palamidessi 49 rR1 htell (c); di!hStop; c ^ di rR2 h i=1 ask (c i ) ! A i ; di!hA j ; di j 2 <ref> [1; n] </ref> and c j d hA; ci!hA 0 ; c 0 i hB k A; ci!hB k A 0 ; c 0 i hA; d ^ 9 x ci!hB; d 0 i x A; ci!h9 d 0 rR5 hp (x); ci!h x Table 18 The restricted Transition System rT the <p> In the following, we will identify and its range. Frank S. de Boer and Catuscia Palamidessi 51 Closure operators are used by Saraswat et al. <ref> (1991) </ref> to give semantics to determinate cc programming, namely cc programming without nondeterministic choice. A priori the absence of nondeterministic choice does not imply that the language is deterministic, because the parallel operator might re-introduce nondeterminism. <p> Concerning the nondeterminate case, the behavior of a process cannot be described anymore as a single function from the initial store to the final store: we need at least a set of functions. This turns out to be sufficient to obtain compositionality <ref> (Saraswat et al. 1991) </ref>. Actually it is sufficient to consider a special class of functions: the so-called bounded trace operators. <p> Moreover, the inverse of , defined as 1 = (# c n ) [ fcg is a closure operator on # c as well. For the definition of the semantic operators on sets of bto's consult <ref> (Saraswat et al. 1991) </ref>. Saraswat et al. (1991) also obtain full abstraction by applying a sort of saturation condition: if the denotation of a process contains a bto , then it contains also all the bto's on the same domain which are superset of . <p> Moreover, the inverse of , defined as 1 = (# c n ) [ fcg is a closure operator on # c as well. For the definition of the semantic operators on sets of bto's consult (Saraswat et al. 1991). Saraswat et al. <ref> (1991) </ref> also obtain full abstraction by applying a sort of saturation condition: if the denotation of a process contains a bto , then it contains also all the bto's on the same domain which are superset of . <p> For every operator op of the language, let fop be the corresponding semantics operator of our approach, and cop the corresponding semantic operator as defined by Saraswat et al. <ref> (1991) </ref>. <p> The fully abstract semantics A presented in previous sections and the semantics defined by Saraswat et al. <ref> (1991) </ref> are isomorphic. The representation of the semantics in terms of upward closed sets of bto's has the advantage that full abstraction is very easy to prove.
Reference: 2. <author> Apt, K. </author> <year> (1990). </year> <title> Introduction to logic programming. </title> <editor> In van Leeuwen, J., editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B. </booktitle> <address> Elsevier Science Publishers. </address> <note> Also available as Technical Report CS-R8826, </note> <institution> Centre for Mathematics and Computer Science (CWI), </institution> <address> Amsterdam, </address> <year> 1988. </year>
Reference-contexts: As opposite to this principle, synchronous communication requires the partners to exchange the information simultaneously. This latter mechanism has been adopted in Distributed Logic, Generalized Horn Clauses, Delta Prolog and the language of Communicating Clauses <ref> (Jacquet and Monteiro 1990, 1991, 1992) </ref>. A rather different approach to synchronization has been proposed in P-Prolog (Yang 1986; Yang and Aiso 1986). The idea is to suspend a process until enough bindings are produced so that the number of consistent alternatives for the next step reduces to one.
Reference: 3. <author> Apt, K., Marchiori, E., and Palamidessi, C. </author> <year> (1992). </year> <title> A Theory of First-Order Built-in's of Prolog. </title> <editor> In Kirchner, H. and Levi, G., editors, </editor> <booktitle> Proc. of the Third Int. Conference on Algebraic and Logic Programming (ALP), volume 632 of Lecture Notes in Computer Science, </booktitle> <pages> pages 69-83. </pages> <publisher> Springer-Verlag. </publisher>
Reference: 4. <author> Bergstra, J. and Klop, J. </author> <year> (1984). </year> <title> Process algebra for synchronous communication. Information and Control, </title> <publisher> 60(1,3):109-137. </publisher>
Reference-contexts: The few languages which maintain don't know nondeterminism, thus preserving the characteristics of logic programming to compute all solutions, are Distributed Logic (Monteiro 1981,1982), the language of Generalized Horn Clauses <ref> (Falaschi et al. 1984) </ref>, Delta Prolog (Pereira and Nasr 1984) and the language cc (#; !; )) (Saraswat 1986, 1989). <p> The few languages which maintain don't know nondeterminism, thus preserving the characteristics of logic programming to compute all solutions, are Distributed Logic (Monteiro 1981,1982), the language of Generalized Horn Clauses (Falaschi et al. 1984), Delta Prolog <ref> (Pereira and Nasr 1984) </ref> and the language cc (#; !; )) (Saraswat 1986, 1989). <p> A synchronization mechanism can be based on asynchronous communication. 4 Concurrent Logic and Concurrent Constraint Programming logical operators typical of the concurrent paradigms, like CCS (Milner 1980), TCSP <ref> (Brookes et al. 1984) </ref> and ACP (Bergstra and Klop 1984, 1986); in particular, the choice (+), the action prefixing (!), and the hiding operator (9). Additionally, concurrent constraint programming embodies explicit mechanisms for communication and synchronization consisting of two kinds of actions, ask and tell. <p> A synchronization mechanism can be based on asynchronous communication. 4 Concurrent Logic and Concurrent Constraint Programming logical operators typical of the concurrent paradigms, like CCS (Milner 1980), TCSP (Brookes et al. 1984) and ACP <ref> (Bergstra and Klop 1984, 1986) </ref>; in particular, the choice (+), the action prefixing (!), and the hiding operator (9). Additionally, concurrent constraint programming embodies explicit mechanisms for communication and synchronization consisting of two kinds of actions, ask and tell. <p> de Boer et al. (1989,1991) used tree-like structures labeled with functions; Gabbrielli and Levi (1990) considered trees labeled with constraints; Saraswat and Rinard (1990) used similar structures modulo equivalence relations based on bisimulation; Gerth et al. (1988) and Gaifman et al. (1989) used refusal pairs like in the failure semantics <ref> (Brookes et al. 1984) </ref>, although in (Gerth et al. 1988) the refusal set is reduced to be a singleton. Tree-like structures, bisimulation and failure semantics encode, in various degrees of abstraction, the branching structure of a process. <p> [ f Ag has a refutationg; FF = fA j A is ground and all fair derivations of P [ f Ag failg: 3 The failure set is usually defined in terms of a finitely failing SLD-tree; however, the definition that we consider here is equivalent to the standard one <ref> (Lassez and Maher, 1984) </ref>. Frank S. de Boer and Catuscia Palamidessi 9 3 Concurrent logic languages In this section we discuss various approaches to turn logic programming into a language suitable for concurrent systems.
Reference: 5. <author> Bergstra, J. and Klop, J. </author> <year> (1986). </year> <title> Process algebra: specification and verification in bisimulation semantics. </title> <booktitle> In Mathematics and Computer Science II, CWI Monographs, pages 61 - 94. North-Holland. 54 Concurrent Logic and Concurrent Constraint Programming </booktitle>
Reference: 6. <author> Bouge, L. </author> <year> (1988). </year> <title> On the existence of symmetric algorithms to find leaders in networks of communicating sequential processes. </title> <journal> Acta Informatica, </journal> <volume> 25 </volume> <pages> 179-201. </pages>
Reference: 7. <author> Brookes, S., Hoare, C., and Roscoe, W. </author> <year> (1984). </year> <title> A theory of communicating sequential processes. </title> <journal> Journal of ACM, </journal> <volume> 31 </volume> <pages> 499-560. </pages>
Reference: 8. <author> Clark, K. and Gregory, S. </author> <year> (1981). </year> <title> A relational language for parallel programming. Res. </title> <type> Report DOC 81/16, </type> <institution> Imperial College, Dept. of Computing, </institution> <address> London. </address>
Reference-contexts: The few languages which maintain don't know nondeterminism, thus preserving the characteristics of logic programming to compute all solutions, are Distributed Logic <ref> (Monteiro 1981,1982) </ref>, the language of Generalized Horn Clauses (Falaschi et al. 1984), Delta Prolog (Pereira and Nasr 1984) and the language cc (#; !; )) (Saraswat 1986, 1989). <p> In many concurrent paradigms synchronization is in symbiosis with communication. This is the case also in most concurrent logic languages. Some of the first concurrent logic languages, the Relational Language <ref> (Clark and Gregory 1981) </ref>, Concurrent Prolog (Shapiro 1983, 1986, 1988), the language of Guarded Horn Clauses (Ueda 1987, 1988) and PARLOG (Clark and Gregory 1986; Gregory 1987), enforced synchroniza 1 The dichotomy sequential programming/concurrent programming is closely related to the distinction between transformational systems and interactive (or reactive) systems, see (Harel <p> At the operational level, these constructs can be appropriately described by means of a transition system in the style of SOS <ref> (Plotkin 1981) </ref>, see for instance (Saraswat 1987a, 1987b). However, problems arise when developing semantics which account for the declarative nature. There are various differences with respect to the pure languages, which make problematic a simple extension of the standard model-theoretic approach. <p> Thus the condition cond 1 (#; p ( t)) holds iff # does not bind the input arguments of p. A guard is not allowed to bind the input variables; such a situation generates an error. The Relational Language <ref> (Clark and Gregory 1981) </ref>, which is the predecessor of PARLOG and corresponds to the subset called Directional PAR-LOG (Gregory 1987), has more restrictions. In particular, the substitution generated by the head unification cannot bind the variables occurring in an output argument of the head of the clause.

Reference: 22. <author> Dijkstra, E. </author> <year> (1986). </year> <title> A Discipline of Programming. </title> <publisher> Prentice Hall, </publisher> <address> En-glewood Cliffs, N.J. </address>
Reference: 23. <author> Ever-Hadani, R. </author> <year> (1987). </year> <title> Operational and denotational linear sequence semantics for full Concurrent Prolog. </title> <type> Technical report, </type> <institution> Department of Computer Science, The Weizmann Institute of Science, Rehovot, Israel. M.Sc. </institution> <type> Thesis, </type> <year> 1992. </year>
Reference: 24. <author> Falaschi, M., Levi, G., and Palamidessi, C. </author> <year> (1984). </year> <title> A synchronization logic: Axiomatics and formal semantics of generalized Horn clauses. </title> <journal> Information and Control, </journal> <volume> 60(6) </volume> <pages> 36-69. </pages>
Reference: 25. <author> Falaschi, M., Gabbrielli, M., Marriott, K., and Palamidessi, C. </author> <year> (1993). </year> <title> Compositional analysis for concurrent constraint programming. </title> <booktitle> In Proc. of the Eight Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 210-221, </pages> <address> Los Alamitos, California. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: 26. <author> Gabbrielli, M. and Levi, G. </author> <year> (1990). </year> <title> Unfolding and fixpoint semantics for concurrent constraint logic programs. </title> <editor> In Kirchner, H. and Wechler, W., editors, </editor> <booktitle> Proc. of the Second Int. Conf. on Algebraic and Logic Programming, Lecture Notes in Computer Science, </booktitle> <pages> pages 204-216, </pages> <address> Nancy, France. </address> <publisher> Springer-Verlag. </publisher>
Reference: 27. <author> Gaifman, H., Maher, M. J., and Shapiro, E. </author> <year> (1989). </year> <title> Reactive Behaviour semantics for Concurrent Constraint Logic Programs. </title> <editor> In Lusk, E. and Overbeck, R., editors, </editor> <booktitle> North American Conference on Logic Programming. </booktitle>
Reference: 28. <author> Gerth, R., Codish, M., Lichtenstein, Y., and Shapiro, E. </author> <year> (1988). </year> <title> Fully abstract denotational semantics for Concurrent Prolog. </title> <booktitle> In Proc. of the 56 Concurrent Logic and Concurrent Constraint Programming Third Annual IEEE Symposium on Logic In Computer Science, </booktitle> <pages> pages 320-335. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> New York. </address>
Reference: 29. <author> Gregory, S. </author> <year> (1987). </year> <title> Parallel Logic Programming in PARLOG: the Language and its Implementation. </title> <publisher> Addison-Wesley. </publisher>
Reference: 30. <author> Harel, D. and Pnueli, A. </author> <year> (1985). </year> <title> On the development of reactive systems. </title> <editor> In Apt, K. R., editor, </editor> <title> Logics and Models of Concurrent Systems. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference: 31. <author> Haridi, S. </author> <year> (1990). </year> <title> A logic programming language based on the Andorra model. </title> <journal> New Generation Computing, </journal> 7(2/3):109-125. 
Reference: 32. <author> Haridi, S. and Brand, P. </author> <year> (1988). </year> <title> Andorra Prolog: an integration of Pro-log and committed choice languages. </title> <booktitle> In Proc. of the International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 745-754, </pages> <address> Tokyo. </address> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: 33. <author> Haridi, S. and Janson, S. </author> <year> (1990). </year> <title> Kernel Andorra Prolog and its computation model. </title> <editor> In Warren, D. and Szeredi, P., editors, </editor> <booktitle> Proc. of the Seventh International Conference on Logic Programming, </booktitle> <pages> pages 31-48. </pages>
Reference: 34. <author> Haridi, S. and Janson, S. </author> <year> (1991). </year> <title> Programming paradigms of the An-dorra Kernel Language. </title> <editor> In Saraswat V. and Ueda K., editors, </editor> <booktitle> Proc. of the International Logic Programming Symposium, </booktitle> <pages> pages 167-186. </pages>
Reference: 35. <author> Haridi, S., Janson, S., and Palamidessi, C. </author> <year> (1992). </year> <title> Structural tran-formational semantics for Andorra Kernel Prolog. </title> <journal> Future Generation Computer Systems, </journal> <volume> 8(4) </volume> <pages> 409-421. </pages>
Reference: 36. <author> Henkin, L., Monk, J., and Tarski, A. </author> <year> (1971). </year> <title> Cylindric Algebras (Part I). </title> <publisher> North-Holland. </publisher>
Reference: 37. <author> Hoare, C. </author> <year> (1978). </year> <title> Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677. </pages>
Reference: 38. <author> Jacquet, J.-M. </author> <year> (1991). </year> <title> Conclog: a Methodological Approach to Concurrent Logic Programming, </title> <booktitle> volume 556 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference: 39. <author> Jacquet, J.-M. and Monteiro, L. </author> <year> (1990). </year> <title> Comparative semantics for a Parallel Contextual Logic Programming Language. </title> <editor> In Debray, S. and Hermenegildo, M., editors, </editor> <booktitle> Proc. of the North American Conference on Logic Programming, </booktitle> <pages> pages 195-214. </pages> <publisher> The MIT Press. </publisher>
Reference: 40. <author> Jacquet, J.-M. and Monteiro, L. </author> <year> (1991). </year> <title> Extended Horn Clauses: the framework and its semantics. </title> <editor> In Baeten, J. and Groote, J., editors, </editor> <booktitle> Proc. of CONCUR 91, volume 527 of Lecture Notes in Computer Science, </booktitle> <pages> pages 281-297. </pages> <publisher> Springer-Verlag. </publisher>
Reference: 41. <author> Jacquet, J.-M. and Monteiro, L. </author> <year> (1992). </year> <title> Communication Clauses: towards synchronous communication in Contextual Logic Programming. </title> <editor> In Apt, K., editor, </editor> <booktitle> Proc. of the Joint International Conference and Symposium on Logic Programming, Series in Logic Programming, </booktitle> <pages> pages 98-112. </pages> <editor> Frank S. </editor> <publisher> de Boer and Catuscia Palamidessi 57 The MIT Press. </publisher>
Reference: 42. <author> Jaffar, J. and Lassez, J.-L. </author> <year> (1987). </year> <title> Constraint logic programming. </title> <booktitle> In Proc,. of ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 111-119. </pages> <publisher> ACM, </publisher> <address> New York. </address>
Reference: 43. <author> Kliger, S., Yardeni, E., Kahn, K., and Shapiro, E. </author> <year> (1988). </year> <title> The language FCP(:,?). </title> <booktitle> In Proc. of the International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 763-773, </pages> <address> Tokyo. </address> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: 44. <author> Knijnenburg, P. and Kok, J. </author> <year> (1989). </year> <title> A compositional semantics for the finite failures of a language with atomized statements. </title> <booktitle> In Proc. Computer Science in the Netherlands (CSN 89). </booktitle>
Reference: 45. <author> Lassez, J. L. and Maher, M. J. </author> <year> (1984). </year> <title> Closures and fairness in the semantics of programming logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 29 </volume> <pages> 167-184. </pages>
Reference: 46. <author> Levi, G. and Palamidessi, C. </author> <year> (1985). </year> <title> The declarative semantics of logical read-only variables. </title> <booktitle> In Proc. of the Third IEEE Symposium on Logic Programming, </booktitle> <pages> pages 128-137, </pages> <address> Boston. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: 47. <author> Levi, G. and Palamidessi, C. </author> <year> (1987). </year> <title> An approach to the declarative semantics of synchronization in logic languages. </title> <editor> In Lassez, J.-L., editor, </editor> <booktitle> Proc. of the Fourth International Conference on Logic Programming, </booktitle> <pages> pages 877-893, </pages> <address> Melbourne. </address> <publisher> MTI Press. </publisher>
Reference: 48. <author> Levi, G., Martelli, M., and Palamidessi, C. </author> <year> (1990). </year> <title> Failure and success made symmetric. </title> <editor> In Debray, S. and Hermenegildo, M., editors, </editor> <booktitle> Proc. of the North American Conference on Logic Programming, Series in Logic Programming, </booktitle> <pages> pages 3-22. </pages> <publisher> The MIT Press. </publisher>
Reference: 49. <author> Levy, J. </author> <year> (1988). </year> <title> Concurrent Prolog and Related Languages. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, The Weizmann Institute of Science, Rehovot, Israel. </institution>
Reference: 50. <author> Lloyd, J. </author> <year> (1987). </year> <note> Foundations of Logic Programming. Springer-Verlag, second edition. </note>
Reference: 51. <author> Maher, M. J. </author> <year> (1987). </year> <title> Logic semantics for a class of committed-choice programs. </title> <editor> In Lassez, J.-L., editor, </editor> <booktitle> Proc. of the Fourth International Conference on Logic Programming, Series in Logic Programming, </booktitle> <pages> pages 858-876, </pages> <address> Melbourne. </address> <publisher> The MIT Press. </publisher>
Reference: 52. <author> Milner, R. </author> <year> (1980). </year> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York. </address>
Reference: 53. <author> Montanari, U. and Rossi, F. </author> <year> (1991). </year> <title> True concurrency semantics for concurrent constraint programming. </title> <editor> In Saraswat, V. and Ueda, K., editors, </editor> <booktitle> Proc. of the International Logic Programming Symposium, Series in Logic Programming, </booktitle> <pages> pages 694-716, </pages> <address> San Diego, CA. The MIT Press. </address> <booktitle> 58 Concurrent Logic and Concurrent Constraint Programming </booktitle>
Reference: 54. <author> Monteiro, L. </author> <year> (1981). </year> <title> An extension to Horn Clause Logic allowing the definition of concurrent processes. </title> <booktitle> In Proc. of Formalization of Programming Concepts, volume 107 of Lecture Notes in Computer Science, </booktitle> <pages> pages 401-407. </pages> <publisher> Springer-Verlag. </publisher>
Reference: 55. <author> Monteiro, L. </author> <year> (1982). </year> <title> A Horn Clause-like Logic for specifying concur-rency. </title> <booktitle> In Proc. of the First Int. Conf. on Logic Programming, </booktitle> <pages> pages 1-8. </pages>
Reference: 56. <author> Palamidessi, C. </author> <year> (1990). </year> <title> Algebraic properties of idempotent substitutions. </title> <editor> In Paterson, M., editor, </editor> <booktitle> Proc. of the 17th International Colloquium on Automata, Languages and Programming (ICALP), volume 443 of Lecture Notes in Computer Science, </booktitle> <pages> pages 386-399, </pages> <address> Warwick, England. </address> <note> Springer-Verlag. Full version available as Technical Report TR-33/89, </note> <institution> Dipartimento di Informatica, Universita di Pisa. </institution>
Reference: 57. <author> Panangaden, P., Saraswat, V., Scott, P., and Seely, R. </author> <year> (1992). </year> <title> A Hiperdoctrinal view of Constraint Systems. </title> <booktitle> In Proceedings of the REX Workshop "Semantics: Foundations and Applications", Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference: 58. <author> Pereira, L. and Nasr, R. </author> <year> (1984). </year> <title> Delta-prolog: A distributed logic programming language. </title> <booktitle> In Proc. of the International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 283-291, </pages> <address> Tokyo. </address> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: 59. <author> Plotkin, G. </author> <year> (1981). </year> <title> A structured approach to operational semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> Computer Science Department, Aarhus University. </institution>
Reference: 60. <author> Safra, S. </author> <year> (1986). </year> <title> Partial evaluation of concurrent prolog and its implications. </title> <type> Technical Report CS86-24, </type> <institution> Dept. of Computer Science, The Weizmann Institute of Science, Rehovot, Israel. M.Sc. </institution> <type> Thesis. </type>
Reference: 61. <author> Saraswat, V. </author> <year> (1986). </year> <title> Problems with concurrent prolog. </title> <type> Technical Report CMU-CS-86-100, </type> <institution> Computer Science Department, Carnegie-Mellon University. </institution>
Reference: 62. <author> Saraswat, V. </author> <year> (1987a). </year> <title> The concurrent logic programming language CP: definition and operational semantics. </title> <booktitle> In Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 49-63. </pages> <publisher> ACM, </publisher> <address> New York. </address>
Reference: 63. <author> Saraswat, V. </author> <year> (1987b). </year> <title> GHC: operational semantics, problems and relationship with CP(#; j). </title> <booktitle> In Proc. of the Fourth IEEE Symposium on Logic Programming, </booktitle> <pages> pages 347-358, </pages> <address> San Francisco. </address> <publisher> IEEE, </publisher> <address> New York. </address>
Reference: 64. <author> Saraswat, V. </author> <year> (1989). </year> <title> Concurrent Constraint Programming. </title> <type> PhD thesis, </type> <address> Carnegie-Mellon University. </address> <booktitle> In ACM distinguished dissertation series. </booktitle> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference: 65. <author> Saraswat, V. </author> <year> (1992). </year> <title> The Category of Constraint Systems is Cartesian-closed. </title> <booktitle> In Proc. of the Seventh Annual IEEE Symposium on Logic in Frank S. de Boer and Catuscia Palamidessi 59 Computer Science, </booktitle> <address> Los Alamitos, California. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: 66. <author> Saraswat, V. and Lincoln, P. </author> <year> (1992). </year> <title> Higher-order, linear concurrent constraint programming. </title> <type> Technical report, </type> <note> Xerox PARC. </note>
Reference: 67. <author> Saraswat, V. and Rinard, M. </author> <year> (1990). </year> <title> Concurrent constraint programming. </title> <booktitle> In Proc. of the seventeenth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 232-245. </pages> <publisher> ACM, </publisher> <address> New York. </address>
Reference: 68. <author> Saraswat, V., Rinard, M., and Panangaden, P. </author> <year> (1991). </year> <title> Semantics foundations of Concurrent Constraint Programming. </title> <booktitle> In Proc. of the eighteenth ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York. </address>
Reference: 69. <author> Scott, D. </author> <year> (1982). </year> <title> Domains for denotational semantics. </title> <booktitle> In Proc. of ICALP. </booktitle>
Reference: 70. <author> Shapiro, E. </author> <year> (1983). </year> <title> A subset of Concurrent Prolog and its interpreter. </title> <type> Technical Report TR-003, </type> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <address> Tokyo. </address>
Reference: 71. <author> Shapiro, E. </author> <year> (1988). </year> <title> Concurrent Prolog: </title> <booktitle> Collected Papers. Number Vol. 1-2 in Series in Logic Programming. </booktitle> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass. </address>
Reference: 72. <author> Shapiro, E. </author> <year> (1989). </year> <title> The family of concurrent logic programming languages. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 412-510. </pages>
Reference: 73. <author> Shapiro, E. </author> <year> (1991). </year> <title> Separating concurrent languages with categories of language embeddings. </title> <booktitle> In Proceedings of the 23 rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 198-208. </pages>
Reference: 74. <author> Shapiro, E. </author> <year> (1992). </year> <title> Embeddings among concurrent programming languages. </title> <editor> In Cleaveland, W., editor, </editor> <booktitle> Proc. of CONCUR 92, volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pages 486-503. </pages> <publisher> Springer-Verlag. </publisher>
Reference: 75. <author> Shapiro, E. </author> <year> (1986). </year> <title> Concurrent Prolog: A progress report. </title> <journal> Computer, </journal> <volume> 19(8) </volume> <pages> 44-58. </pages>
Reference: 76. <author> Takeuchi, A. and Furukawa, K. </author> <year> (1986). </year> <title> Parallel logic programming languages. </title> <editor> In Shapiro, E., editor, </editor> <booktitle> Proc. of the Third International Conference on Logic Programming, volume 225 of Lecture Notes in Computer Science, </booktitle> <pages> pages 335-349, </pages> <address> London. </address> <publisher> Springer-Verlag. </publisher>
Reference: 77. <author> Ueda, K. </author> <year> (1987). </year> <title> Guarded Horn Clauses. </title> <editor> In Shapiro, E. Y., editor, </editor> <title> Concurrent Prolog: </title> <booktitle> Collected Papers, Series in Logic Programming. </booktitle> <publisher> The MIT Press. </publisher>
Reference: 78. <author> Ueda, K. </author> <year> (1988). </year> <title> Guarded Horn Clauses, a parallel logic programming language with the concept of a guard. </title> <editor> In Nivat, M. and Fuchi, K., editors, </editor> <booktitle> Programming of Future Generation Computers, </booktitle> <pages> pages 441-456. </pages> <publisher> North Holland, </publisher> <address> Amsterdam. </address> <note> 79. </note> <author> van Emden, M. and de Lucena, G. </author> <year> (1982). </year> <title> Predicate logic as language for parallel programming. </title> <editor> In Clark, K. and Tarnlund, S., editors, </editor> <booktitle> Logic 60 Concurrent Logic and Concurrent Constraint Programming Programming, </booktitle> <pages> pages 189-198. </pages> <publisher> Academic Press, London. </publisher>
Reference: 80. <author> Yang, R. </author> <year> (1986). </year> <title> A Parallel Logic Programming Language and its implementation. </title> <type> PhD thesis, </type> <institution> Keio University. </institution>
Reference: 81. <author> Yang, R. and Aiso, H. </author> <year> (1986). </year> <title> P-Prolog: a parallel language based on exclusive relation. </title> <editor> In Shapiro, E., editor, </editor> <booktitle> Proc. of the Third International Conference on Logic Programming, volume 225 of Lecture Notes in Computer Science, </booktitle> <pages> pages 255-269, </pages> <address> London. </address> <publisher> Springer-Verlag. </publisher>
References-found: 67

