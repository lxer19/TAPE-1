URL: http://www.csl.sri.com/shankar/srt-long.ps.gz
Refering-URL: http://www.csl.sri.com/shankar/
Root-URL: 
Email: ruess@informatik.uni-ulm.de  srivasg@csl.sri.com  
Title: Modular Verification of SRT Division  
Author: HARALD RUESS NATARAJAN SHANKAR AND MANDAYAM K. SRIVAS fshankar, 
Keyword: Computer Arithmetic, Hardware Verification, SRT Division  
Address: 89069 Ulm, Germany  Menlo Park, CA 94025 USA  
Affiliation: Universitat Ulm, Fakultat fur Informatik,  SRI International Computer Science Laboratory,  
Note: 1-28 c Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Abstract: We describe a formal specification and mechanized verification in PVS of the general theory of SRT division along with a specific hardware realization of the algorithm. The specification demonstrates how attributes of the PVS language (in particular, predicate subtypes) allow the general theory to be developed in a readable manner that is similar to textbook presentations, while the PVS table construct allows direct specification of the implementation's quotient lookup table. Verification of the derivations in the SRT theory and for the data path and lookup table of the implementation are highly automated and performed for arbitrary, but finite precision; in addition, the theory is verified for general radix, while the implementation is specialized to radix 4. The effectiveness of the automation stems from the tight integration in PVS of rewriting with decision procedures for equality, linear arithmetic over integers and rationals, and propositional logic. This example demonstrates that the resources of an expressive specification language and of a general-purpose theorem prover are not inimical to highly automated verification in this domain, and can contribute to clarity, generality, and reuse. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> Rajeev Alur and Thomas A. Henzinger, editors. </editor> <booktitle> Computer-Aided Verification, CAV '96, volume 1102 of Lecture Notes in Computer Science, </booktitle> <address> New Brunswick, NJ, July/August 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: signal declarations are listed in 8 and the complete structural specification of the SRT circuit is given in Appendix A.3. 8 d: signal [bvec [N]] P: signal [bvec [7]] Next, arithmetic interpretations of the bit-vector signals are assigned to the signals of the circuit. 9 d (i): rational = fp <ref> [1, N - 1] </ref>.val (d (i)) P (i): rational = fp2c [4, 3].val (P (i)) The divisor bit-vector d (i), for example, is interpreted as an unsigned and normalized fixed-point bit-vector, and the output of the guess ALU galu (i) is interpreted as a 2's-complement fixed-point bit-vector with two integral bits
Reference: 2. <author> D.E. Atkins. </author> <title> Higher-radix Division Using Estimates of the Divisor and Partial Remainders. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-17(10):925-934, </volume> <month> October </month> <year> 1968. </year>
Reference-contexts: 1. Introduction The SRT division algorithm is one of the most popular methods for implementing floating-point division and related operations in high-performance arithmetic units. Even though the theory of SRT division has been extensively studied <ref> [2] </ref>, the design of dividers still remains a serious challenge [23], and it is easy to make mistakes in its implementation|as was highlighted by the much publicized FDIV error in the Intel Pentium chip.
Reference: 3. <author> Randal E. Bryant and Yirng-An Chen. </author> <title> Verification of arithmetic circuits with binary moment diagrams. </title> <booktitle> In Proceedings of the 32nd Design Automation Conference, </booktitle> <pages> pages 535-541, </pages> <address> San Francisco, CA, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: They also showed how PVS could be used in the rapid design of new division circuits starting from existing ones. Methods based on ordered BDDs and symbolic model checking are not well-suited for verifying multipliers and dividers since BDD graphs for such operations grow exponentially with the word size <ref> [3] </ref>. However, Bryant [5] has used BDDs to check the relation that one iteration of the SRT circuit must preserve for the circuit to divide correctly. <p> Bryant and Chen showed that a data-structure similar to BDDs called binary moment diagrams (BMDs) could be used to efficiently verify multipliers against their number-theoretic specification <ref> [3] </ref>. Since BMDs can be inefficient for checking 4 inequalities over bit-vectors, Clarke, Fujita, and Zhao use an extension of BDDs called hybrid decision diagrams [7] to represent integer functions and check relations on them. <p> of the SRT circuit is given in Appendix A.3. 8 d: signal [bvec [N]] P: signal [bvec [7]] Next, arithmetic interpretations of the bit-vector signals are assigned to the signals of the circuit. 9 d (i): rational = fp [1, N - 1].val (d (i)) P (i): rational = fp2c <ref> [4, 3] </ref>.val (P (i)) The divisor bit-vector d (i), for example, is interpreted as an unsigned and normalized fixed-point bit-vector, and the output of the guess ALU galu (i) is interpreted as a 2's-complement fixed-point bit-vector with two integral bits and 6 residual bits. <p> The inputs to the quotient selection unit lookup are the three bit truncation D of the divisor d and the seven bit approximation P of the next partial remainder. 10 lookup ((D: bvec <ref> [3] </ref>), (P: bvec [7] | P_bound_by_D?(1 + fp [0,3].val (D), fp2c [4, 3].val (P)))) :f q: subrange (-2, 2) | lookup_legitimate?(q, 1 + fp [0,3].val (D), fp2c [4, 3].val (P)) g In 10 , predicate subtypes serve as a specification of a set of quotient lookup tables by means of domain <p> The inputs to the quotient selection unit lookup are the three bit truncation D of the divisor d and the seven bit approximation P of the next partial remainder. 10 lookup ((D: bvec [3]), (P: bvec [7] | P_bound_by_D?(1 + fp [0,3].val (D), fp2c <ref> [4, 3] </ref>.val (P)))) :f q: subrange (-2, 2) | lookup_legitimate?(q, 1 + fp [0,3].val (D), fp2c [4, 3].val (P)) g In 10 , predicate subtypes serve as a specification of a set of quotient lookup tables by means of domain and range constraints, and a specific implementation of these 18 constraints <p> three bit truncation D of the divisor d and the seven bit approximation P of the next partial remainder. 10 lookup ((D: bvec [3]), (P: bvec [7] | P_bound_by_D?(1 + fp [0,3].val (D), fp2c <ref> [4, 3] </ref>.val (P)))) :f q: subrange (-2, 2) | lookup_legitimate?(q, 1 + fp [0,3].val (D), fp2c [4, 3].val (P)) g In 10 , predicate subtypes serve as a specification of a set of quotient lookup tables by means of domain and range constraints, and a specific implementation of these 18 constraints is proven correct in Section 7. <p> The Lookup Table The legitimacy constraint lookup legitimate? (see Section 4) on quotient lookup tables permits different implementations, and Taylor [34] develops a particularly compact one. This table computes the next quotient digit from the truncation D:bvec <ref> [3] </ref> of the divisor to the three leading bits and the estimation P:bvec [7] of the next partial remainder. Bits 6 down to 2 of P are used as a table index and the remaining bits are used in some cases to compute the resulting value.
Reference: 4. <author> W. W. Bledsoe. </author> <title> The SUP-INF method in Presburger arithmetic. </title> <type> Technical Report Memo ATP-18, </type> <institution> The University of Texas at Austin, Math Department, </institution> <month> December </month> <year> 1974. </year>
Reference-contexts: This work provided the main impetus for our work (see also [29]). Clarke, German, and Zhao [9] have subsequently and independently mechanized their verification of Taylor's circuit using the Analytica theorem prover augmented with an implementation of the SUP-INF method <ref> [4, 33] </ref> for linear arithmetic. Our work goes beyond a verification of a specific SRT circuit by also formalizing the general theory of SRT division within a modular framework that can be used to verify other similar circuits. <p> of the SRT circuit is given in Appendix A.3. 8 d: signal [bvec [N]] P: signal [bvec [7]] Next, arithmetic interpretations of the bit-vector signals are assigned to the signals of the circuit. 9 d (i): rational = fp [1, N - 1].val (d (i)) P (i): rational = fp2c <ref> [4, 3] </ref>.val (P (i)) The divisor bit-vector d (i), for example, is interpreted as an unsigned and normalized fixed-point bit-vector, and the output of the guess ALU galu (i) is interpreted as a 2's-complement fixed-point bit-vector with two integral bits and 6 residual bits. <p> The inputs to the quotient selection unit lookup are the three bit truncation D of the divisor d and the seven bit approximation P of the next partial remainder. 10 lookup ((D: bvec [3]), (P: bvec [7] | P_bound_by_D?(1 + fp [0,3].val (D), fp2c <ref> [4, 3] </ref>.val (P)))) :f q: subrange (-2, 2) | lookup_legitimate?(q, 1 + fp [0,3].val (D), fp2c [4, 3].val (P)) g In 10 , predicate subtypes serve as a specification of a set of quotient lookup tables by means of domain and range constraints, and a specific implementation of these 18 constraints <p> three bit truncation D of the divisor d and the seven bit approximation P of the next partial remainder. 10 lookup ((D: bvec [3]), (P: bvec [7] | P_bound_by_D?(1 + fp [0,3].val (D), fp2c <ref> [4, 3] </ref>.val (P)))) :f q: subrange (-2, 2) | lookup_legitimate?(q, 1 + fp [0,3].val (D), fp2c [4, 3].val (P)) g In 10 , predicate subtypes serve as a specification of a set of quotient lookup tables by means of domain and range constraints, and a specific implementation of these 18 constraints is proven correct in Section 7.
Reference: 5. <author> Randal E. Bryant. </author> <title> Bit-level analysis of an SRT divider circuit. </title> <booktitle> In Proceedings of the 33rd Design Automation Conference, </booktitle> <pages> pages 661-665, </pages> <address> Las Vegas, NV, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Methods based on ordered BDDs and symbolic model checking are not well-suited for verifying multipliers and dividers since BDD graphs for such operations grow exponentially with the word size [3]. However, Bryant <ref> [5] </ref> has used BDDs to check the relation that one iteration of the SRT circuit must preserve for the circuit to divide correctly.
Reference: 6. <author> Yirng-An Chen, Edmund Clarke, Pei-Hsin Ho, Yatin Hoskote, Timothy Kam, Manpreet Khaira, John O'Leary, and Xudong Zhao. </author> <title> Verification of all circuits in a floating-point unit using word-level model checking. </title> <booktitle> In Srivas and Camilleri [32], </booktitle> <pages> pages 19-33. 21 </pages>
Reference-contexts: Clarke, Khaira, and Zhao [11] have used hybrid decision diagrams to extend the symbolic model-checking algorithm used in SMV to express and verify word-level properties on numbers (see also <ref> [6, 18] </ref> for practical applications of word-level model checking). Their word-level model-checker can be used to check if finite-sized arithmetic circuits satisfy the desired number-theoretic properties. It has been used to verify Taylor's SRT circuit by checking that a state transition model of the circuit satisfies the main SRT invariants.
Reference: 7. <author> E. M. Clarke, M. Fujita, and X. Zhao. </author> <title> Hybrid decision diagrams: Overcoming the limitations of MTBDDs and BMDs. </title> <type> Technical Report CMU-CS-95-159, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Since BMDs can be inefficient for checking 4 inequalities over bit-vectors, Clarke, Fujita, and Zhao use an extension of BDDs called hybrid decision diagrams <ref> [7] </ref> to represent integer functions and check relations on them. Clarke, Khaira, and Zhao [11] have used hybrid decision diagrams to extend the symbolic model-checking algorithm used in SMV to express and verify word-level properties on numbers (see also [6, 18] for practical applications of word-level model checking). <p> constant N, where N &gt; 8, determines the width of the data paths for the divisor and the partial remainders; examples of signal declarations are listed in 8 and the complete structural specification of the SRT circuit is given in Appendix A.3. 8 d: signal [bvec [N]] P: signal [bvec <ref> [7] </ref>] Next, arithmetic interpretations of the bit-vector signals are assigned to the signals of the circuit. 9 d (i): rational = fp [1, N - 1].val (d (i)) P (i): rational = fp2c [4, 3].val (P (i)) The divisor bit-vector d (i), for example, is interpreted as an unsigned and normalized <p> The inputs to the quotient selection unit lookup are the three bit truncation D of the divisor d and the seven bit approximation P of the next partial remainder. 10 lookup ((D: bvec [3]), (P: bvec <ref> [7] </ref> | P_bound_by_D?(1 + fp [0,3].val (D), fp2c [4, 3].val (P)))) :f q: subrange (-2, 2) | lookup_legitimate?(q, 1 + fp [0,3].val (D), fp2c [4, 3].val (P)) g In 10 , predicate subtypes serve as a specification of a set of quotient lookup tables by means of domain and range constraints, <p> This table computes the next quotient digit from the truncation D:bvec [3] of the divisor to the three leading bits and the estimation P:bvec <ref> [7] </ref> of the next partial remainder. Bits 6 down to 2 of P are used as a table index and the remaining bits are used in some cases to compute the resulting value. <p> The type correctness conditions generated by the type-checker for the lookup table are proven with similar strategies. 13 (FORALL (D, (P: bvec <ref> [7] </ref> | P bound by D?(valD (D), valP (P)))): lookup_legitimate?(lookup (D, P), valD (D), valP (P))) In the course of proving the consistency of the lookup table in Appendix A.2, PVS has proven helpful as a debugging tool and came up with precise counterexamples. 4 By injecting, for example, a wrong
Reference: 8. <author> E.M. Clarke and S.M. </author> <title> German. </title> <type> Personal Communication, </type> <year> 1995. </year>
Reference-contexts: The circuits verified in both of these efforts are not based on the SRT method and hence do not contain the kinds of optimizations used in SRT division. German and Clarke <ref> [8, 13] </ref> performed a verification of Taylor's SRT division circuit considered in this paper by deriving a set of inequalities that the circuit imposes on the data path signals and then showing, in the MAPLE symbolic algebraic system, that two main SRT correctness invariants are preserved by the data path inequalities.
Reference: 9. <author> E. M. Clarke, S. M. German, and X. Zhao. </author> <title> Verifying the SRT division algorithm using theorem proving techniques. </title> <booktitle> In Alur and Henzinger [1], </booktitle> <pages> pages 111-122. </pages>
Reference-contexts: This work provided the main impetus for our work (see also [29]). Clarke, German, and Zhao <ref> [9] </ref> have subsequently and independently mechanized their verification of Taylor's circuit using the Analytica theorem prover augmented with an implementation of the SUP-INF method [4, 33] for linear arithmetic. <p> In our proofs within the abstract SRT theory, manual guidance is needed to invoke specific lemmas and to cope with nonlinear arithmetic. In the concrete proofs, manual guidance is needed to circumvent some inefficiencies in the PVS decision procedures in dealing with bit-level representations. The above verification efforts <ref> [9, 29] </ref> are restricted to the fixed-point kernel of the division circuit. Recently, Miner and Leathrum [21] used PVS to verify a general class of subtractive division algorithms as well as specific instances in this class including Taylor's SRT circuit, with respect to the IEEE floating-point arithmetic standards [15, 16].
Reference: 10. <author> Shiu-Kai Chin. </author> <title> Verified functions for generating signed-binary arithmetic hardware. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(12) </volume> <pages> 1529-1558, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: There are several papers describing the verification of multiplier circuits using various theorem provers <ref> [10, 17, 30] </ref>. 3. An Overview of PVS The PVS system combines an expressive specification language with an interactive proof checker based on automated procedures for simplification and rewriting using decision procedures.
Reference: 11. <author> E. M. Clarke, M. Khaira, and X. Zhao. </author> <title> Word level symbolic model checking|Avoiding the Pentium FDIV error. </title> <booktitle> In Proceedings of the 33rd Design Automation Conference, </booktitle> <pages> pages 645-648, </pages> <address> Las Veqas, NV, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Since BMDs can be inefficient for checking 4 inequalities over bit-vectors, Clarke, Fujita, and Zhao use an extension of BDDs called hybrid decision diagrams [7] to represent integer functions and check relations on them. Clarke, Khaira, and Zhao <ref> [11] </ref> have used hybrid decision diagrams to extend the symbolic model-checking algorithm used in SMV to express and verify word-level properties on numbers (see also [6, 18] for practical applications of word-level model checking). <p> Their word-level model-checker can be used to check if finite-sized arithmetic circuits satisfy the desired number-theoretic properties. It has been used to verify Taylor's SRT circuit by checking that a state transition model of the circuit satisfies the main SRT invariants. Word-level model checking <ref> [11] </ref> can be applied only to datapaths of a specific size, whereas theorem proving can be parametric in the width of the datapath. There is a large body of loosely related work on the deductive verification of computer arithmetic circuits that does not deal with SRT division.
Reference: 12. <author> D. Cyrluk, S. Rajan, N. Shankar, and M. K. Srivas. </author> <title> Effective theorem proving for hardware verification. </title> <editor> In Ramayya Kumar and Thomas Kropf, editors, </editor> <booktitle> Theorem Provers in Circuit Design (TPCD '94), volume 910 of Lecture Notes in Computer Science, </booktitle> <pages> pages 203-222, </pages> <address> Bad Herrenalb, Germany, </address> <month> September </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: The strategy then, for example, applies a sequence of sub-strategies, case* case splits for a given list of formulas along all the different branches, and the defined rule grind combines rewriting with propositional simplification using BDDs and decision procedures <ref> [12] </ref>. 6 4. SRT Division Digit recurrence algorithms use subtraction as the iterative operator. The quotient is represented in radix-r form and one quotient digit is calculated in each iteration. This class can be further divided into restoring and nonrestoring division.
Reference: 13. <author> S.M. </author> <title> German. Towards Automatic Verification of Arithmetic Hardware. </title> <booktitle> Lecture notes, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: The circuits verified in both of these efforts are not based on the SRT method and hence do not contain the kinds of optimizations used in SRT division. German and Clarke <ref> [8, 13] </ref> performed a verification of Taylor's SRT division circuit considered in this paper by deriving a set of inequalities that the circuit imposes on the data path signals and then showing, in the MAPLE symbolic algebraic system, that two main SRT correctness invariants are preserved by the data path inequalities.
Reference: 14. <author> M. Gordon, R. Milner, and C. Wadsworth. </author> <title> Edinburgh LCF: A Mechanized Logic of Computation, </title> <booktitle> volume 78 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: The skolem* command, for example, repeatedly introduces Skolem constants for universal-strength quantifiers, and assert combines rewriting with decision procedures. Finally, PVS has an LCF-like <ref> [14] </ref> strategy language for combining inference steps into more complicated proof strategies.
Reference: 15. <institution> Standard for Binary Floating-Point Arithmetic, </institution> <year> 1985. </year> <note> ANSI/IEEE Std 754-1985. </note>
Reference-contexts: Recently, Miner and Leathrum [21] used PVS to verify a general class of subtractive division algorithms as well as specific instances in this class including Taylor's SRT circuit, with respect to the IEEE floating-point arithmetic standards <ref> [15, 16] </ref>. They also showed how PVS could be used in the rapid design of new division circuits starting from existing ones.
Reference: 16. <institution> Standard for Radix-Independent Floating-Point Arithmetic, </institution> <year> 1987. </year> <note> ANSI/IEEE Std 854-1987. </note>
Reference-contexts: Recently, Miner and Leathrum [21] used PVS to verify a general class of subtractive division algorithms as well as specific instances in this class including Taylor's SRT circuit, with respect to the IEEE floating-point arithmetic standards <ref> [15, 16] </ref>. They also showed how PVS could be used in the rapid design of new division circuits starting from existing ones.
Reference: 17. <author> Deepak Kapur and M. Subramaniam. </author> <title> Mechanically verifying a family of multiplier circuits. </title> <booktitle> In Alur and Henzinger [1], </booktitle> <pages> pages 135-146. </pages>
Reference-contexts: There are several papers describing the verification of multiplier circuits using various theorem provers <ref> [10, 17, 30] </ref>. 3. An Overview of PVS The PVS system combines an expressive specification language with an interactive proof checker based on automated procedures for simplification and rewriting using decision procedures.
Reference: 18. <author> Gila Kamhi, Osnat Weissberg, Limor Fix, Ziv Binyamini, and Ze'ev Shtadler. </author> <title> Automatic datapath extraction for efficient usage of HDDs. In Orna Grumberg, editor, Computer-Aided Verification, </title> <booktitle> CAV '97, volume 1254 of Lecture Notes in Computer Science, </booktitle> <pages> pages 95-106, </pages> <address> Haifa, Israel, June 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Clarke, Khaira, and Zhao [11] have used hybrid decision diagrams to extend the symbolic model-checking algorithm used in SMV to express and verify word-level properties on numbers (see also <ref> [6, 18] </ref> for practical applications of word-level model checking). Their word-level model-checker can be used to check if finite-sized arithmetic circuits satisfy the desired number-theoretic properties. It has been used to verify Taylor's SRT circuit by checking that a state transition model of the circuit satisfies the main SRT invariants.
Reference: 19. <author> M. Leeser and J. O'Leary. </author> <title> Verification of a Subtractive Radix-2 Square Root Algorithm and Implementation. </title> <booktitle> In Proc. of ICCD'95, </booktitle> <pages> pages 526-531. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Section 8 contains some concluding observations. Some of the details of the PVS formalization are relegated to the Appendices. 2. Related Work Verkest, Claesen, and de Man [36] and Leeser and O'Leary <ref> [19] </ref> have used theorem provers to verify a non-restoring divider and a radix-2 subtractive square root algorithm, respectively. The circuits verified in both of these efforts are not based on the SRT method and hence do not contain the kinds of optimizations used in SRT division.
Reference: 20. <author> O.L. McSorley. </author> <title> High-speed Arithmetic in Binary Computers. </title> <booktitle> In Proc. of IRE, </booktitle> <pages> pages 67-91, </pages> <year> 1961. </year>
Reference-contexts: This can be accomplished by allowing positive as well as negative values of the quotient digits so that an overestimation of the quotient digit in one iteration can be corrected in subsequent iterations through the generation of negative quotient digits. The SRT class of dividers <ref> [20, 28, 35] </ref> constitute a widely used technique for implementing efficient nonrestoring division in high-speed floating point units. This section presents some fundamental concepts of SRT division. These formalizations are applied in Sections 6 and 7 to prove the correctness of a specific circuit.
Reference: 21. <author> Paul S. Miner and James F. Leathrum, Jr. </author> <title> Verification of IEEE compliant subtractive division algorithms. </title> <booktitle> In Srivas and Camilleri [32], </booktitle> <pages> pages 64-78. </pages>
Reference-contexts: In the concrete proofs, manual guidance is needed to circumvent some inefficiencies in the PVS decision procedures in dealing with bit-level representations. The above verification efforts [9, 29] are restricted to the fixed-point kernel of the division circuit. Recently, Miner and Leathrum <ref> [21] </ref> used PVS to verify a general class of subtractive division algorithms as well as specific instances in this class including Taylor's SRT circuit, with respect to the IEEE floating-point arithmetic standards [15, 16].
Reference: 22. <author> J Strother Moore, Tom Lynch, and Matt Kaufmann. </author> <title> A mechanically checked proof of the correctness of the kernel of the AMD5 K 86 floating-point division algorithm. </title> <journal> IEEE Transactions on Computers, </journal> <note> 1997. To appear. </note>
Reference-contexts: There is a large body of loosely related work on the deductive verification of computer arithmetic circuits that does not deal with SRT division. Moore, Lynch, and Kaufmann <ref> [22] </ref> verified the floating point division microcode consisting of 32 microinstructions for the AMD5 K 86 microprocessor using ACL2. 1 Subsequently, Russinoff [31] verified the square root microcode for the same processor. There are several papers describing the verification of multiplier circuits using various theorem provers [10, 17, 30]. 3.
Reference: 23. <author> S.F. Oberman and M.J. Flynn. </author> <title> Design issues in division and other floating-point operations. </title> <journal> IEEE Transactions on Computers, </journal> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: 1. Introduction The SRT division algorithm is one of the most popular methods for implementing floating-point division and related operations in high-performance arithmetic units. Even though the theory of SRT division has been extensively studied [2], the design of dividers still remains a serious challenge <ref> [23] </ref>, and it is easy to make mistakes in its implementation|as was highlighted by the much publicized FDIV error in the Intel Pentium chip.
Reference: 24. <author> Sam Owre, John Rushby, and N. Shankar. </author> <title> Integration in PVS: Tables, types, and model checking. </title> <editor> In Ed Brinksma, editor, </editor> <booktitle> Tools and Algorithms for the Construction and Analysis of Systems (TACAS '97), volume 1217 of Lecture Notes in Computer Science, </booktitle> <pages> pages 366-383, </pages> <address> Enschede, The Netherlands, April 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Bits 6 down to 2 of P are used as a table index and the remaining bits are used in some cases to compute the resulting value. The formalization of the resulting table in Appendix A.2 uses the TABLE construct of the PVS specification language <ref> [24] </ref>. This construct was added to the PVS specification language in order to provide visually appealing two-dimensional tabular specifications in the manner advocated by Parnas and others [26]. It proved adequate to express the lookup table of this SRT circuit in a concise and perspicuous way.
Reference: 25. <author> S. Owre, J. Rushby, N. Shankar, and F. von Henke. </author> <title> Formal Verification for Fault-Tolerant Architectures: Prolegomena to the Design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: This circuit implements the IEEE floating-point standard, and its kernel consists of a fixed-point iteration. The verification of this kernel was performed in the interactive theorem proving system PVS <ref> [25] </ref>. Since our goal is to perform the * Supported in part by DARPA under Darpa Order A721 through NASA Ames Research Center under contract NASA-NAG-2-891, and by NSF Grants CCR-9300444 and CCR-9712383. A shorter version of this paper appeared in the proceedings of CAV'96 [29]. <p> An Overview of PVS The PVS system combines an expressive specification language with an interactive proof checker based on automated procedures for simplification and rewriting using decision procedures. It has been used for reasoning in domains as diverse as microprocessor verification, protocol verification, and algorithms and architectures concerning fault-tolerance <ref> [25] </ref>. The PVS specification language builds on classical typed higher-order logic with the usual base types bool, nat, rational, real, . . . and the function type constructor [A -&gt; B]. The type system of PVS is augmented with dependent types and abstract data types.
Reference: 26. <author> D. L. Parnas. </author> <title> Using mathematical models in the inspection of critical software. </title> <editor> In Michael G. Hinchey and Jonathan P. Bowen, editors, </editor> <booktitle> Applications of Formal Methods, International Series in Computer Science, chapter 2, </booktitle> <pages> pages 17-31. </pages> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: The formalization of the resulting table in Appendix A.2 uses the TABLE construct of the PVS specification language [24]. This construct was added to the PVS specification language in order to provide visually appealing two-dimensional tabular specifications in the manner advocated by Parnas and others <ref> [26] </ref>. It proved adequate to express the lookup table of this SRT circuit in a concise and perspicuous way. In particular, blank entries in the lookup table in Appendix A.2 cause the type-checker to generate TCCs which ensure that viable arguments D, P never point to such a blank entry.
Reference: 27. <author> V. Pratt. </author> <title> Anatomy of the Pentium Bug. </title> <editor> In P.D. Mosses, M. Nielsen, and M.I. Schwartzbach, editors, TAPSOFT'95: </editor> <booktitle> Theory and Practice of Software Development, number 915 in Lecture Notes in Computer Science, </booktitle> <pages> pages 97-107. </pages> <publisher> Springer Verlag, </publisher> <month> May </month> <year> 1995. </year>
Reference-contexts: Even though the theory of SRT division has been extensively studied [2], the design of dividers still remains a serious challenge [23], and it is easy to make mistakes in its implementation|as was highlighted by the much publicized FDIV error in the Intel Pentium chip. Pratt <ref> [27] </ref> points in his analysis that it is unlikely testing alone would have caught that error as it was due to five wrong entries in the quotient lookup table in a region of the table that was thought to be unreachable. <p> This can be explained in terms of a Robertson diagram. Both the explanation and the diagram are adapted from Pratt <ref> [27] </ref>. Fixing a as 2 and r as 4, the Robertson diagram consists of the x-axis ranging from 8=3 to 8=3 (more generally, a fl r=(r 1) to a fl r=(r 1)), and a y-axis ranging from 2=3 to 2=3 (more generally, a=(r 1) to a=(r 1)).
Reference: 28. <author> J.E. Robertson. </author> <title> A new Class of Digital Division Methods. </title> <journal> In IRE Trans. on Electron. Computers, </journal> <volume> volume EC-7, </volume> <pages> pages 218-222, </pages> <year> 1958. </year>
Reference-contexts: This can be accomplished by allowing positive as well as negative values of the quotient digits so that an overestimation of the quotient digit in one iteration can be corrected in subsequent iterations through the generation of negative quotient digits. The SRT class of dividers <ref> [20, 28, 35] </ref> constitute a widely used technique for implementing efficient nonrestoring division in high-speed floating point units. This section presents some fundamental concepts of SRT division. These formalizations are applied in Sections 6 and 7 to prove the correctness of a specific circuit.
Reference: 29. <author> H. Rue, N. Shankar, and M. K. Srivas. </author> <title> Modular verification of SRT division. </title> <booktitle> In Alur and Henzinger [1], </booktitle> <pages> pages 123-134. </pages>
Reference-contexts: Since our goal is to perform the * Supported in part by DARPA under Darpa Order A721 through NASA Ames Research Center under contract NASA-NAG-2-891, and by NSF Grants CCR-9300444 and CCR-9712383. A shorter version of this paper appeared in the proceedings of CAV'96 <ref> [29] </ref>. <p> This work provided the main impetus for our work (see also <ref> [29] </ref>). Clarke, German, and Zhao [9] have subsequently and independently mechanized their verification of Taylor's circuit using the Analytica theorem prover augmented with an implementation of the SUP-INF method [4, 33] for linear arithmetic. <p> In our proofs within the abstract SRT theory, manual guidance is needed to invoke specific lemmas and to cope with nonlinear arithmetic. In the concrete proofs, manual guidance is needed to circumvent some inefficiencies in the PVS decision procedures in dealing with bit-level representations. The above verification efforts <ref> [9, 29] </ref> are restricted to the fixed-point kernel of the division circuit. Recently, Miner and Leathrum [21] used PVS to verify a general class of subtractive division algorithms as well as specific instances in this class including Taylor's SRT circuit, with respect to the IEEE floating-point arithmetic standards [15, 16].
Reference: 30. <author> Harald Rue. </author> <title> Hierarchical verification of two-dimensional high-speed multiplication in PVS: A case study. </title> <booktitle> In Srivas and Camilleri [32], </booktitle> <pages> pages 79-93. 22 </pages>
Reference-contexts: There are several papers describing the verification of multiplier circuits using various theorem provers <ref> [10, 17, 30] </ref>. 3. An Overview of PVS The PVS system combines an expressive specification language with an interactive proof checker based on automated procedures for simplification and rewriting using decision procedures.
Reference: 31. <author> David M. Russinoff. </author> <title> A mechanically checked proof of the correctness of the AMD K5 floating-point square root algorithm. </title> <note> This Journal. </note>
Reference-contexts: Moore, Lynch, and Kaufmann [22] verified the floating point division microcode consisting of 32 microinstructions for the AMD5 K 86 microprocessor using ACL2. 1 Subsequently, Russinoff <ref> [31] </ref> verified the square root microcode for the same processor. There are several papers describing the verification of multiplier circuits using various theorem provers [10, 17, 30]. 3.
Reference: 32. <author> Mandayam Srivas and Albert Camilleri, </author> <title> editors. </title> <booktitle> Formal Methods in Computer-Aided Design (FMCAD '96), volume 1166 of Lecture Notes in Computer Science, </booktitle> <address> Palo Alto, CA, </address> <month> November </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference: 33. <author> Robert E. Shostak. </author> <title> On the SUP-INF method for proving Presburger formulas. </title> <journal> Journal of the ACM, </journal> <volume> 24(4) </volume> <pages> 529-543, </pages> <month> October </month> <year> 1977. </year>
Reference-contexts: This work provided the main impetus for our work (see also [29]). Clarke, German, and Zhao [9] have subsequently and independently mechanized their verification of Taylor's circuit using the Analytica theorem prover augmented with an implementation of the SUP-INF method <ref> [4, 33] </ref> for linear arithmetic. Our work goes beyond a verification of a specific SRT circuit by also formalizing the general theory of SRT division within a modular framework that can be used to verify other similar circuits.
Reference: 34. <author> G.S. Taylor. </author> <title> Compatible Hardware For Division and Square Root. </title> <booktitle> In Proceedings of the 5th Symposium on Computer Arithmetic, </booktitle> <pages> pages 127-134. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1981. </year>
Reference-contexts: In this paper, we demonstrate that machine-assisted formal verification can be effectively used in the design and debugging of arithmetic circuits. We present a formal development and mechanized verification of a general SRT division algorithm and an implementation of it based on the circuit given by Tay-lor <ref> [34] </ref>. This circuit implements the IEEE floating-point standard, and its kernel consists of a fixed-point iteration. The verification of this kernel was performed in the interactive theorem proving system PVS [25]. <p> In the second step, we specify a data path circuit based on the implementation given by Taylor <ref> [34] </ref>. This circuit is defined in terms of bit-vector signals over time and computes the partial remainder, an approximate partial remainder, and the quotient digit using a specific quotient digit lookup table. <p> Whenever these conditions hold, theorem invariant, and consequently theorem convergence is applicable, and correctness follows. 6. Modeling The Data Path The data path of an SRT division circuit with r = 4 and a = 2 as described by Taylor <ref> [34] </ref> is specified and proven to be correct by applying the general SRT theory developed in Section 4. 16 In any given iteration i, the circuit in Figure 3 computes a next partial remainder p (i + 1) and a new quotient digit q (i + 1) of the next partial <p> Note also that overloading the name of the bit-vector signal with its arithmetic interpretation mimics a specification style often found in textbooks about computer arithmetic. The datapath specification differs slightly from that of Taylor <ref> [34] </ref> where he implicitly, i.e., without explanation, uses an optimization in which the two leading bits (the sign bit and the most significant integer bit) of the partial remainder inputs to the GALU and the DALU are discarded. <p> The Lookup Table The legitimacy constraint lookup legitimate? (see Section 4) on quotient lookup tables permits different implementations, and Taylor <ref> [34] </ref> develops a particularly compact one. This table computes the next quotient digit from the truncation D:bvec [3] of the divisor to the three leading bits and the estimation P:bvec [7] of the next partial remainder. <p> The entire proof consisting of 85 lemmas and TCC proof obligations can be checked in around 4500 seconds of wallclock time on a Sparc-20. Acknowledgements. We are grateful to Ed Clarke and Steven German who pointed us to Taylor's paper <ref> [34] </ref> on SRT division and challenged us to verify Tay-lor's algorithm and lookup table in PVS. <p> The URL www.csl.sri.com/pvs/examples/SRT contains the relevant PVS specifications and proofs. 3. Actually four bits, but the divisor d (i) is assumed to be normalized; therefore the first bit of d (i) is always 1. 4. Even though the original design of Taylor's lookup table in <ref> [34] </ref> proved to be correct, we still managed to accidentally inject errors in the initial PVS transcriptions.
Reference: 35. <author> K.D. Tochter. </author> <title> Techniques of Multiplication and Division for Automatic Binary Computers. In Quart. </title> <journal> J. Mech. Appl. Match, </journal> <volume> volume Part 3, </volume> <pages> pages 364-384, </pages> <year> 1958. </year>
Reference-contexts: This can be accomplished by allowing positive as well as negative values of the quotient digits so that an overestimation of the quotient digit in one iteration can be corrected in subsequent iterations through the generation of negative quotient digits. The SRT class of dividers <ref> [20, 28, 35] </ref> constitute a widely used technique for implementing efficient nonrestoring division in high-speed floating point units. This section presents some fundamental concepts of SRT division. These formalizations are applied in Sections 6 and 7 to prove the correctness of a specific circuit.
Reference: 36. <author> D. Verkest, L. Claesen, and H. De Man. </author> <title> A Proof of the Nonrestoring Division Algorithm and its Implementation on an ALU. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 3 </volume> <pages> 5-31, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The second part of the verification involving the datapath and lookup 3 table is presented in Sections 6 and 7. Section 8 contains some concluding observations. Some of the details of the PVS formalization are relegated to the Appendices. 2. Related Work Verkest, Claesen, and de Man <ref> [36] </ref> and Leeser and O'Leary [19] have used theorem provers to verify a non-restoring divider and a radix-2 subtractive square root algorithm, respectively.
References-found: 36

