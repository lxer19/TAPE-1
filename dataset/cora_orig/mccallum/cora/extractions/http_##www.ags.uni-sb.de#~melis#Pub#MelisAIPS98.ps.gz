URL: http://www.ags.uni-sb.de/~melis/Pub/MelisAIPS98.ps.gz
Refering-URL: http://jswww.cs.uni-sb.de/~melis/
Root-URL: 
Email: melis@cs.uni-sb.de  
Title: The "Limit" Domain  
Author: Erica Melis 
Address: D-66041 Saarbrucken, Germany,  
Affiliation: Universitat des Saarlandes, Fachbereich Informatik,  
Abstract: Proof planning is an application of AI-planning in mathematical domains. As opposed to planning for domains such as blocks world or transportation, the domain knowledge for mathematical domains is difficult to extract. Hence proof planning requires clever knowledge engineering and representation of the domain knowledge. We think that on the one hand, the resulting domain definitions that include operators, supermethods, control-rules, and constraint solver are interesting in itself. On the other hand, they can provide ideas for modeling other realistic domains and for means of search reduction in planning. Therefore, we present proof planning and an exemplary domain used for planning proofs of so-called limit theorems that lead to proofs that were beyond the capabilities of other current proof planners and theorem provers. 1 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bartle, R., and Sherbert, D. </author> <year> 1982. </year> <title> Introduction to Real Analysis. </title> <address> New York: </address> <publisher> John Wiley& Sons. </publisher>
Reference-contexts: The textbook <ref> (Bartle & Sherbert 1982) </ref> proposes to construct ffi by estimating range restrictions with the help of auxiliary variables that propagate certain range restrictions from * to ffi.
Reference: <author> Benzmueller, C.; Cheikhrouhou, L.; Fehrer, D.; Fiedler, A.; Huang, X.; Kerber, M.; Kohlhase, M.; Konrad, K.; Meier, A.; Melis, E.; Schaarschmidt, W.; Siekmann, J.; and Sorge, V. </author> <year> 1997. </year> <title> OMEGA: Towards a mathematical assistant. </title> <editor> In McCune, W., ed., </editor> <booktitle> Proceedings 14th International Conference on Automated Deduction (CADE-14), </booktitle> <pages> 252-255. </pages> <address> Townsville: </address> <publisher> Springer. </publisher>
Reference-contexts: The first proof planner, CL A M (Bundy et al. 1991), has successfully planned inductive proofs and some proof planning attempts have previously been performed in the OMEGA system <ref> (Benzmueller et al. 1997) </ref> 2 . fl This work was supported by the Deutsche Forschungs-gemeinschaft, SFB 378 y published in the Fourth Internationale Conference on Artificial Intelligence Planning Systems, 1998 1 Copyright (c) 1998, American Association for Artificial Intelligence (www.aaai.org).
Reference: <author> Bledsoe, W., and Hines, L. </author> <year> 1980. </year> <title> Variable elimination and chaining in a resolution-based prover for inequalities. </title> <booktitle> In Proceedings of the Fifth Conference on Automated Deduction (CADE). </booktitle>
Reference-contexts: CL A M knows operators such as induction, fertilize, symbolic-evaluation that are important for a class of typical inductive proofs. Related from the knowledge acquisition perspective is the work of Bledsoe and Hines on special-purpose theorem provers <ref> (Bledsoe & Hines 1980) </ref>. Related with respect to planning with control-rules is Prodigy (Minton et al. 1989).
Reference: <author> Bledsoe, W.; Boyer, R.; and Henneman, W. </author> <year> 1972. </year> <title> Computer proofs of limit theorems. </title> <booktitle> Artificial Intelligence 3(1) </booktitle> <pages> 27-60. </pages>
Reference: <author> Bledsoe, W. </author> <year> 1990. </year> <title> Challenge problems in elementary analysis. </title> <journal> Journal of Automated Reasoning 6 </journal> <pages> 341-359. </pages>
Reference: <author> Bundy, A.; van Harmelen, F.; Hesketh, J.; and Smaill, A. </author> <year> 1991. </year> <title> Experiments with proof plans for induction. </title> <journal> Journal of Automated Reasoning 7 </journal> <pages> 303-324. </pages>
Reference-contexts: As opposed to classical theorem proving, proof planning employs high-level planning operators rather than calculus-level rules and global control rather than the more local search heuristics which are used for search control in automated theorem proving, see (Melis & Bundy 1996). The first proof planner, CL A M <ref> (Bundy et al. 1991) </ref>, has successfully planned inductive proofs and some proof planning attempts have previously been performed in the OMEGA system (Benzmueller et al. 1997) 2 . fl This work was supported by the Deutsche Forschungs-gemeinschaft, SFB 378 y published in the Fourth Internationale Conference on Artificial Intelligence Planning Systems,
Reference: <author> Bundy, A. </author> <year> 1988. </year> <title> The use of explicit plans to guide inductive proofs. </title> <editor> In Lusk, E., and Overbeek, R., eds., </editor> <booktitle> Proc. 9th International Conference on Automated Deduction (CADE-9), volume 310 of Lecture Notes in Computer Science, </booktitle> <pages> 111-120. </pages> <address> Argonne: </address> <publisher> Springer. </publisher>
Reference: <author> Gordon, M.; Milner, R.; and Wadsworth, C. </author> <year> 1979. </year> <title> Edinburgh LCF: A Mechanized Logic of Computation. </title> <booktitle> Lecture Notes in Computer Science 78. </booktitle> <address> Berlin: </address> <publisher> Springer. </publisher>
Reference-contexts: Its meaning is F is derived from . A proof line additionally contains a label and a line-justification, e.g., (l1 ` F :E) 5 A tactic is a program that executes a number of logical inferences <ref> (Gordon, Milner, & Wadsworth 1979) </ref>. operator: MP-b (F 1 ; F 2 ) premises L1, L2 conclusions L3 appl-cond subset (1; ) proof schema L1. ` F 1 ! F 2 (OPEN) L2. 1 ` F 1 (j) The annotations indicate that L3 is removed from the planning state as a
Reference: <author> Hentenryck, P. V. </author> <year> 1989. </year> <title> Constraint Satisfaction in Logic Programming. </title> <address> Cambridge, MA, London: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Constraint solvers represent objects by specialized data types and handle them efficiently. For many kinds of constraints , e.g., for finite domains <ref> (Hentenryck 1989) </ref> there exist very efficient specialized procedures for constraint solving (consistency check, entailment check, and simplification). Actually, we could have taken off the shelf a constraint solver for linear arithmetic over the real numbers, e.g., CLP (R) (Jaffar et al. 1992).
Reference: <author> Jaffar, J.; Michaylow, S.; Stuckey, P.; and Yap, R. </author> <year> 1992. </year> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages 14(3) </journal> <pages> 339-395. </pages>
Reference-contexts: For many kinds of constraints , e.g., for finite domains (Hentenryck 1989) there exist very efficient specialized procedures for constraint solving (consistency check, entailment check, and simplification). Actually, we could have taken off the shelf a constraint solver for linear arithmetic over the real numbers, e.g., CLP (R) <ref> (Jaffar et al. 1992) </ref>. For the first experiments, however, we used our own constraint solver, LINEQ, capable of handling value constraints that are expressed by linear equalities and inequalities over IR that may contain the absolute value function. It can restrict the range of variables.
Reference: <author> Kambhampati, S.; Knoblock, C.; and Yang, Q. </author> <year> 1995. </year> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial-order planning. </title> <journal> Artificial Intelligence, special issue on Planning and Scheduling 76 </journal> <pages> 167-238. </pages>
Reference: <author> Leron, U. </author> <year> 1983. </year> <title> Structuring mathematical proofs. </title> <journal> The American Mathematical Monthly 90 </journal> <pages> 174-185. </pages>
Reference-contexts: Supermethods In proof planning, a hierarchical decomposition is desirable because it can restrict the search space by planning at a higher level. Furthermore, a hierarchical presentation of the proof plan is easier to grasp by the user, as shown in <ref> (Leron 1983) </ref>.
Reference: <author> McCune, W. </author> <year> 1990. </year> <title> Otter 2.0 users guide. </title> <type> Technical Report ANL-90/9, </type> <institution> Argonne National Laboratory, Maths and CS Division, Argonne, Illinois. </institution>
Reference-contexts: The lines in proof schema contain a label, a sequent, and a line-justification. Since a proof line can be justified by calculus rules from Natural Deduction (ND) calculus), by an operator, by invoking tactics 5 , or by invoking automated theorem provers such as OTTER <ref> (McCune 1990) </ref> the line-justification can be a name of a ND-rule, the name of an operator, a tactic, or a prover, a meta-variable, or OPEN in case the sequent is to be planned for. Additionally, the line-justification may include supporting lines.
Reference: <author> Melis, E., and Bundy, A. </author> <year> 1996. </year> <title> Planning and proof planning. </title> <editor> In Biundo, S., ed., </editor> <booktitle> ECAI-96 Workshop on Cross-Fertilization in Planning, </booktitle> <pages> 37-40. </pages>
Reference-contexts: As opposed to classical theorem proving, proof planning employs high-level planning operators rather than calculus-level rules and global control rather than the more local search heuristics which are used for search control in automated theorem proving, see <ref> (Melis & Bundy 1996) </ref>.
Reference: <author> Melis, E. </author> <year> 1996. </year> <title> Island planning and refinement. </title> <type> Seki Report SR-96-10, </type> <institution> Universitat des Saarlandes, FB Informatik. </institution> <note> available from http://www.ags.uni-sb.de/publications/deduktion/seki/SR-96/index.html. </note>
Reference-contexts: As opposed to classical theorem proving, proof planning employs high-level planning operators rather than calculus-level rules and global control rather than the more local search heuristics which are used for search control in automated theorem proving, see <ref> (Melis & Bundy 1996) </ref>.
Reference: <author> Melis, E. </author> <year> 1997. </year> <title> Progress in proof planning: Planning limit theorems automatically. </title> <type> Technical Report SR-97-08, </type> <institution> Fachbereich Informatik, Universitat des Saarlandes. </institution> <note> available from http://www.ags.uni-sb.de/publications/deduktion/seki/SR-97/index.html. </note>
Reference-contexts: All rights reserved. 2 OMEGA is an assistant system that has proof planning as a central component and interfaces several external rea Based on AI-planning experience and on theorem proving heuristics, we have gained a deeper understanding of the general needs of proof planning and extended proof planning in <ref> (Melis 1997) </ref>. The objective was to plan more and difficult proofs in several mathematical domains. One of the key extensions is the extension of the domain knowledge available to the planner. <p> The operators Solve &lt; b, Solve*&lt;b, and Solve &lt; f call the function tell that provides an interface to the constraint solver LINEQ <ref> (Melis 1997) </ref>. We describe Solve &lt; b only. For the other operators see (Melis 1997). operator: Solve &lt; b (a; b) premises conclusions L1 appl-cond :occurs (a; b) & tell (a &lt; b) = true proof schema L1. ` (a &lt; b) (solverCS) The operator Solve &lt; b is applied to <p> The operators Solve &lt; b, Solve*&lt;b, and Solve &lt; f call the function tell that provides an interface to the constraint solver LINEQ <ref> (Melis 1997) </ref>. We describe Solve &lt; b only. For the other operators see (Melis 1997). operator: Solve &lt; b (a; b) premises conclusions L1 appl-cond :occurs (a; b) & tell (a &lt; b) = true proof schema L1. ` (a &lt; b) (solverCS) The operator Solve &lt; b is applied to a goal (a &lt; b) and can be described as follows. <p> Evaluation By proof planning in the presented domain we have automatically planned proofs of many limit theorems, e.g., of LIM+ and LIM*. In the technical report <ref> (Melis 1997) </ref>, we discussed experiments that have shown that the planning would not have succeeded without control-rules. With the control-rules that are used for all problems from the limit domain, the planning effort is infinitesimal compared to classical theorem proving.
Reference: <author> Minton, S.; Knoblock, C.; Koukka, D.; Gil, Y.; Joseph, R.; and Carbonell, J. </author> <year> 1989. </year> <title> PRODIGY 2.0: The Manual and Tutorial. </title> <institution> School of Computer Science, Carnegie Mellon University, Pittsburgh. CMU-CS-89-146. </institution>
Reference-contexts: Related from the knowledge acquisition perspective is the work of Bledsoe and Hines on special-purpose theorem provers (Bledsoe & Hines 1980). Related with respect to planning with control-rules is Prodigy <ref> (Minton et al. 1989) </ref>.
Reference: <author> Minton, S. </author> <year> 1989. </year> <title> Explanation-based learning: A problem solving perspective. </title> <booktitle> Artificial Intelligence 40 </booktitle> <pages> 63-118. </pages>
Reference-contexts: Related from the knowledge acquisition perspective is the work of Bledsoe and Hines on special-purpose theorem provers (Bledsoe & Hines 1980). Related with respect to planning with control-rules is Prodigy <ref> (Minton et al. 1989) </ref>.
Reference: <author> Schoenfeld, A. </author> <year> 1985. </year> <title> Mathematical Problem Solving. </title> <address> New York: </address> <publisher> Academic Press. </publisher>
Reference-contexts: For established mathematical fields, this knowledge exists, however often implicitly. The appropriate operators and control knowledge can be pretty difficult to extract and to represent, however. This is one reason why mathematics appears to be hard for humans <ref> (Schoenfeld 1985) </ref>. Therefore, our representation of the limit domain is interesting in itself and, in addition, it can be interesting for the planning community because * the limit domain is prototypical for planning proofs that include constructions.
Reference: <author> Sehn, A. </author> <year> 1995. </year> <title> DECLAME - eine deklarative Sprache zur Reprasentation von Methoden. </title> <type> Master's thesis, </type> <institution> Universitat des Saarlandes. </institution> <note> published as SEKI Working Paper SWP-95-02. </note>
Reference-contexts: An operator with a premise and a conclusion is introduced in planning from a goal, whereas an operator with premise and conclusion is introduced in planning from the assumptions. For more details see <ref> (Sehn 1995) </ref>. The application-conditions are formulated in a meta-language and restrict the applicability of an operator and the instantiations of the parameters. The operator is applicable with an instantiation I of parameters, if for I application-conditions evaluates to true.
Reference: <author> Tate, A. </author> <year> 1977. </year> <title> Generating project networks. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 888-893. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The planner searches for a solution, i.e., for a sequence of instantiated operators whose application transforms the initial state into a final state that has no open sequents. Forward and backward search is possible. Similar to HTN planning <ref> (Tate 1977) </ref>, the planner expands the operators if possible as soon as a plan is complete. Eventually, planning and recursive expansion leads to a ND-proof that can be checked for correctness. <p> Furthermore, a hierarchical presentation of the proof plan is easier to grasp by the user, as shown in (Leron 1983). What a technique can serve this purpose? HTN planning <ref> (Tate 1977) </ref> replaces an abstract operator by one of its predefined reduction schemas, but this is appropriate for proof planning only for abstract operators that have a proof schema that provides a fixed expansion such as the operators presented above.
Reference: <author> Weld, D. </author> <year> 1994. </year> <title> An introduction to least commitment planning. </title> <journal> AI magazine 15(4) </journal> <pages> 27-61. </pages>
References-found: 22

