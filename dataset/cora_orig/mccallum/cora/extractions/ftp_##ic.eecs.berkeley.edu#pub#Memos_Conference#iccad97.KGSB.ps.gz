URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iccad97.KGSB.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/kukimoto/
Root-URL: 
Email: fkukimoto,wilsin,braytong@eecs.berkeley.edu saldanha@cadence.com  
Title: Approximate Timing Analysis of Combinational Circuits under the XBD0 Model  
Author: Yuji Kukimotoy Wilsin Gostiy Alexander Saldanhaz Robert K. Braytony 
Address: Berkeley, CA 94720y  Berkeley, CA 94704z  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  Cadence Berkeley Laboratories,  
Abstract: This paper is concerned with approximate delay computation algorithms for combinational circuits. As a result of intensive research in the early 90's [3, 8] efficient tools exist which can analyze circuits of thousands of gates in a few minutes or even in seconds for many cases. However, the computation time of these tools is not so predictable since the internal engine of the analysis is either a SAT solver [8] or a modified ATPG algorithm [3], both of which are just heuristic algorithms for an NP-complete problem. Although they are highly tuned for CAD applications, there exists a class of problem instances which exhibits the worst-case exponential CPU time behavior. In the context of timing analysis, circuits with a high amount of reconvergence, e.g. C6288 of the ISCAS benchmark suite, are known to be difficult to analyze under sophisticated delay models even with state-of-the-art techniques. For example [8] could not complete the analysis of C6288 under the mapped delay model. To make timing analysis of such corner case circuits feasible we propose an approximate computation scheme to the timing analysis problem as an extension to the exact analysis method proposed in [8]. Sensitization conditions are conservatively approximated in a selective fashion so that the size of SAT problems solved during analysis is controlled. Experimental results show that the approximation technique is effective in reducing the total analysis time without losing accuracy for the case where the exact approach takes much time or cannot complete. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H.-C. Chen and D. H.-C. Du. </author> <title> Path sensitization in critical path problem. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 12(2) </volume> <pages> 196-207, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Those paths along which signals never propagate are called false paths. The extended bounded delay-0 model [8], the XBD0 model, is the delay model most commonly used in false path analysis. It is the underlying model for the floating mode analysis <ref> [1] </ref> and viability analysis [7]. Under the XBD0 model, each gate in a network has a maximum positive delay and a minimum delay which is zero. Sensitization analysis is done under the assumption that each gate can take any delay between its maximum value and zero.
Reference: [2] <author> S. Devadas, K. Keutzer, and S. Malik. </author> <title> Computation of floating mode delay in combinational circuits: Theory and algorithms. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 12(12) </volume> <pages> 1913-1923, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: 1 Introduction During late 80's and early 90's significant progress <ref> [2, 8] </ref> was made in the theory of exact gate-level timing analysis. In this, false paths are correctly identified so that exact delays can be computed. As the theory progressed, the efficiency and size limitation of actual implementations of timing analysis tools were dramatically improved [3, 8].
Reference: [3] <author> S. Devadas, K. Keutzer, S. Malik, and A. Wang. </author> <title> Computation of floating mode delay in combinational circuits: Practice and implementation. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 12(12) </volume> <pages> 1924-1936, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: In this, false paths are correctly identified so that exact delays can be computed. As the theory progressed, the efficiency and size limitation of actual implementations of timing analysis tools were dramatically improved <ref> [3, 8] </ref>. Although state-of-the-art implementations can handle circuits composed of thousands of gates under mapped delay models, it is evident that the current size limitation is far from satisfactory for analyzing industrial-strength circuits.
Reference: [4] <author> S.-T. Huang, T.-M. Parng, and J.-M. Shyu. </author> <title> A new approach to solving false path problem in timing analysis. </title> <booktitle> In Proceedings of IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 216-219, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: To alleviate this problem several researchers have proposed approximate timing analysis algorithms. The goal is to compute a conservative yet accurate enough approximation of true delays in less computation time to make analysis of large circuits tractable. Huang et al. <ref> [4, 6] </ref> proposed, as part of optimization techniques used in exact analysis, a simple approximation heuristic, in which a complex timed Boolean calculus expression at an internal node is simplified to a new independent variable arriving at the latest 1 This work was supported by SRC-97-DC-324. time referred to in the <p> Analysis is then performed on this subcircuit as if it were the circuit given. Notice that this has a similar flavor to the approximation proposed in <ref> [4] </ref>. The difference between this approximation and the previous method is that the subcircuit has a new set of primary inputs, which are assumed independent. However, it is possible that in the original circuit only a certain subset of signal combinations appears at the boundary variables.
Reference: [5] <author> S.-T. Huang, T.-M. Parng, and J.-M. Shyu. </author> <title> A polynomial-time heuristic approach to approximate a solution to the false path problem. </title> <booktitle> In Proceedings of 30th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 118-122, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Accuracy loss comes from the fact that the original functional relationship is completely lost by the substitution. They also investigated a more powerful approximation technique in <ref> [5] </ref>, in which each timed Boolean calculus formula is under- and over-approximated by sum of literals and products of literals respectively so that each sensitizability check, which is a satisfiability problem in the exact analysis, can be performed conservatively in polynomial time. <p> Since this approximation is fairly aggressive to guarantee the polynomial time complexity, estimated delays do not seem accurate enough to be useful. Unfortunately their results, shown in <ref> [5] </ref>, are not clear about the accuracy of approximate delays. They merely showed ratios of internal nodes whose delays match the exact delays at the nodes. No result was shown on the accuracy of circuit delays.
Reference: [6] <author> S.-T. Huang, T.-M. Parng, and J.-M. Shyu. </author> <title> Timed boolean calculus and its applications in timing analysis. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(3) </volume> <pages> 318-337, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: To alleviate this problem several researchers have proposed approximate timing analysis algorithms. The goal is to compute a conservative yet accurate enough approximation of true delays in less computation time to make analysis of large circuits tractable. Huang et al. <ref> [4, 6] </ref> proposed, as part of optimization techniques used in exact analysis, a simple approximation heuristic, in which a complex timed Boolean calculus expression at an internal node is simplified to a new independent variable arriving at the latest 1 This work was supported by SRC-97-DC-324. time referred to in the
Reference: [7] <author> P. C. McGeer and R. K. Brayton. </author> <title> Integrating Functional and Temporal Domains in Logic Design. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: Those paths along which signals never propagate are called false paths. The extended bounded delay-0 model [8], the XBD0 model, is the delay model most commonly used in false path analysis. It is the underlying model for the floating mode analysis [1] and viability analysis <ref> [7] </ref>. Under the XBD0 model, each gate in a network has a maximum positive delay and a minimum delay which is zero. Sensitization analysis is done under the assumption that each gate can take any delay between its maximum value and zero.
Reference: [8] <author> P. C. McGeer, A. Saldanha, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Delay models and exact timing analysis. </title> <editor> In T. Sasao, editor, </editor> <booktitle> Logic Synthesis and Optimiza--tion, </booktitle> <pages> pages 167-189. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction During late 80's and early 90's significant progress <ref> [2, 8] </ref> was made in the theory of exact gate-level timing analysis. In this, false paths are correctly identified so that exact delays can be computed. As the theory progressed, the efficiency and size limitation of actual implementations of timing analysis tools were dramatically improved [3, 8]. <p> In this, false paths are correctly identified so that exact delays can be computed. As the theory progressed, the efficiency and size limitation of actual implementations of timing analysis tools were dramatically improved <ref> [3, 8] </ref>. Although state-of-the-art implementations can handle circuits composed of thousands of gates under mapped delay models, it is evident that the current size limitation is far from satisfactory for analyzing industrial-strength circuits. <p> Moreover, their CPU times for exact analysis are much worse than state-of-the-art implementations available, which cancels some of the speed-up since their speed-up is reported relative to this slower algorithm 1 . In this paper we apply their idea of using data/control separation to a state-of-the-art timing analysis technique <ref> [8] </ref> to design an approximate algorithm. The sensitization criterion here is the XBD0 model [8], which is one of the well-accepted delay models shown to be correct and accurate. In addition a novel technique to control the complexity of the analysis is proposed. <p> In this paper we apply their idea of using data/control separation to a state-of-the-art timing analysis technique <ref> [8] </ref> to design an approximate algorithm. The sensitization criterion here is the XBD0 model [8], which is one of the well-accepted delay models shown to be correct and accurate. In addition a novel technique to control the complexity of the analysis is proposed. <p> This paper is organized as follows. Section 2 summarizes false path analysis, which forms a basis of this work. We specially focus on the technique proposed in <ref> [8] </ref>. Section 3 proposes two approximation schemes and discusses how they can be selectively applied to trade off accuracy and speed-up. Experimental results are given in Section 4. Section 5 concludes the paper. 2 Preliminaries In this section, we review sensitization theory for the false path problem. <p> Experimental results are given in Section 4. Section 5 concludes the paper. 2 Preliminaries In this section, we review sensitization theory for the false path problem. Specifically, the theory developed in <ref> [8] </ref> is detailed below since the analysis following this section is heavily based on this particular theory. 2.1 Functional Delay Analysis Functional delay analysis, or false path analysis, seeks to determine when all the primary output signals of a Boolean network become stable at their final values given maximum delays of <p> Those paths along which signals never propagate are called false paths. The extended bounded delay-0 model <ref> [8] </ref>, the XBD0 model, is the delay model most commonly used in false path analysis. It is the underlying model for the floating mode analysis [1] and viability analysis [7]. <p> Under the XBD0 model, each gate in a network has a maximum positive delay and a minimum delay which is zero. Sensitization analysis is done under the assumption that each gate can take any delay between its maximum value and zero. The core idea of <ref> [8] </ref> is to characterize recursively the set of all input vectors that make the signal value of a primary output stable to a constant by a given required time. <p> The Boolean network is called a -network. 2.2 Optimal Construction of -Networks To argue the approximation algorithms presented in this paper, further details on the construction of -networks need to be understood. We have mentioned that a -network is constructed recursively from a primary output. In <ref> [8] </ref> further optimization to reduce the size of -networks is discussed. Given a required time at a primary output, assume that a backward required-time propagation of N is done to primary inputs so that the list of all required times at each internal node is computed. <p> This optimization avoids creating redundant nodes in the network thereby reducing the size of the network without losing any accuracy in analysis. Only those arrival times which have a match with required times yield nodes in the network. Another type of optimization suggested in <ref> [8] </ref> is to generate the list of arrival times more carefully. For each potential arrival time, equivalence between the corresponding function and the on-set or the off-set (whichever suitable) is checked by a satisfiability call and a new node is created in network only if the two functions are different. <p> Although this requires additional CPU time spent on satisfiability calls, it is experimentally confirmed that the size reduction of the final network is so significant that the the total run-time decreases in most cases. 3 Approximation Algorithms 3.1 Limitation of the Exact Algorithm Although the exact algorithm proposed in <ref> [8] </ref> can handle many circuits of thousands of gates, it still has a size limitation. If a large network is given and timing analysis is requested under a detailed delay model like the technology mapped delay model, it is likely that the algorithm runs practically forever 3 . <p> Although this method is more conservative than the one without subcircuit extraction, it reduces the size of a circuit to be analyzed much more significantly than the other one. 4 Experimental Results We implemented the new approximation scheme on top of the implementation of <ref> [8] </ref> under SIS environment. To evaluate the effectiveness of the approximation, we focused on timing analysis of mapped ISCAS combinational circuits, which is generally much more time-consuming than analysis based on simpler delay models. <p> Each circuit is technology-mapped first with the option specified in the second column using the lib2.genlib library. The delay of the circuit is then analyzed using three techniques. The first one (exact) is the exact method presented in <ref> [8] </ref>. The remaining two are approximate methods; the second, called approx (1), is the technique in Section 3.3.2 and the third, called approx (2), is the one in Section 3.3.3 which involves subcircuit extraction. <p> These exact analyses were possible after 7 If the set of all possible signal combinations at the boundary variables can be represented compactly, one can safely avoid this pessimism by multiplying the additional constraint to the SAT formula generated. 8 Timing analysis was done in the linear search mode <ref> [8] </ref> where the decrement time step is 0.1 and the error tolerance is 0.01. 9 If exact analysis is already efficient, approximation cannot make significant improvement in CPU time; in fact the overall performance can be degraded due to additional tasks involved in approximation. 10 More precisely, C1908 (1) and C3540 <p> where the exact analysis took 18390.8 seconds to conclude that any path of length 119.21 is false while the approximate method took only about 1.4% of this time to finish off the entire analysis. 5 Conclusions We have proposed new approximation algorithms as an extension to the XBD0 timing analysis <ref> [8] </ref>. The core idea of the algorithms is to control the size of sensitization networks to prevent the size of SAT formulas to be solved from getting large.
Reference: [9] <author> H. Yalcin. </author> <title> Private communication, </title> <month> March </month> <year> 1997. </year>
Reference-contexts: More recently they confirmed that a similar speed-up and accuracy can be achieved for a correct sensitization criterion (the floating mode) under the unit-delay model <ref> [9] </ref>. Although an application of the same technique to more sophisticated delay models is theoretically possible, it is not clear whether their algorithm can handle large circuits under those delay models.
Reference: [10] <author> H. Yalcin and J. P. Hayes. </author> <title> Hierarchical timing analysis using conditional delays. </title> <booktitle> In Proceedings of IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 371-377, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: They applied this idea to speed up their timing analysis technique using conditional delays <ref> [10] </ref> by simplifying signal propagation conditions of data variables.
Reference: [11] <author> H. Yalcin, J. P. Hayes, and K. A. Sakallah. </author> <title> An approximate timing analysis method for datapath circuits. </title> <booktitle> In Proceedings of IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 114-118, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: Unfortunately their results, shown in [5], are not clear about the accuracy of approximate delays. They merely showed ratios of internal nodes whose delays match the exact delays at the nodes. No result was shown on the accuracy of circuit delays. More recently Yalcin et al. <ref> [11] </ref> proposed an approximation technique, which utilizes user's knowledge about primary inputs. They categorize each primary input either as data or control and label all the internal nodes either data or control using a certain rule. <p> The sensitization condition at each node is then simplified conservatively so that it becomes independent of the data variables. The intuition behind this is that the delay of a circuit is most likely determined by control signals while data signals have only minor effects in the final delay. <ref> [11] </ref> shows experimentally that a dramatic speed-up is possible without losing much accuracy for unit-delay timing analysis based on static sensitization. Unfortunately this sensitization criterion is known to underapproximate true delays, i.e. it is not a safe criterion, which defeats the whole purpose of timing analysis. <p> Similar extensions which give tighter approximations are possible by allowing more arrival times to remain after the mapping. A set of various approximations gives a tradeoff between compactness of networks and accuracy of analysis. 3.3 Control/Data Dichotomy in Approximation Strate gies In <ref> [11] </ref> Yalcin et al. proposed to use designer's knowledge on control-data separation of primary inputs for effective approximate timing analysis. They applied this idea to speed up their timing analysis technique using conditional delays [10] by simplifying signal propagation conditions of data variables. <p> Hence nodes labeled data are pure data variables with no dependency on control variables, while those labeled control are all the other variables with some dependency on control variables. This labeling policy is different from the one used in <ref> [11] </ref>, where a node is labeled data if at least one of its fanins is labeled data. In their labeling, nodes labeled data are variables with some dependency on data whereas nodes labeled control are pure control variables. <p> The remaining two are approximate methods; the second, called approx (1), is the technique in Section 3.3.2 and the third, called approx (2), is the one in Section 3.3.3 which involves subcircuit extraction. Control/Data specification for the primary inputs of these circuits are the same as those in <ref> [11] </ref> 10 . For each of the three analyses, estimated delay and CPU time are shown in the last two columns. One can observe that accuracy is preserved in the three examples in both of the approximation methods while CPU time is reduced significantly. <p> decrement time step is 0.1 and the error tolerance is 0.01. 9 If exact analysis is already efficient, approximation cannot make significant improvement in CPU time; in fact the overall performance can be degraded due to additional tasks involved in approximation. 10 More precisely, C1908 (1) and C3540 (1) in <ref> [11] </ref> were used. circuit tech.map #gates topological delay type of approx. estimated delay CPU time exact 34.77 29.1 C1908 -m 1 536 39.25 approx (1) 34.77 8.9 approx (2) 34.77 5.4 exact 35.76 41.2 C1908 -m 0 602 40.76 approx (1) 35.76 12.0 approx (2) 35.76 5.2 exact 35.66 727.0 C3540 <p> The core idea of the algorithms is to control the size of sensitization networks to prevent the size of SAT formulas to be solved from getting large. The use of knowledge on data/control separation of primary inputs originally proposed in <ref> [11] </ref> was adapted to choose an appropriate approximation at each node. We showed experimentally that the technique helps simplify the analysis while maintaining accuracy well within the accuracy of the delay model. Acknowledgments Hakan Yalcin kindly offered detailed data on ISCAS benchmark circuits.
References-found: 11

