URL: http://www.isi.edu/~gts/paps/stw99.ps.gz
Refering-URL: http://www.isi.edu/~gts/pubs.html
Root-URL: http://www.isi.edu
Email: sti@zurich.ibm.com  gts@isi.edu  wmi@zurich.ibm.com  
Title: Key Agreement in Dynamic Peer Groups  
Author: Michael Steiner Gene Tsudik yz Michael Waidner 
Date: January 29, 1999  
Address: CH-8803 Ruschlikon, Switzerland  Marina del Rey, CA 90292  CH-8803 Ruschlikon, Switzerland  
Affiliation: IBM Research Division, Zurich Research Laboratory  USC Information Sciences Institute  IBM Research Division, Zurich Research Laboratory  
Abstract: As a result of the increased popularity of group-oriented applications and protocols, group communication occurs in many different settings: from network multicasting to application layer tele- and video-conferencing. Regardless of the application environment, security services are necessary to provide communication privacy and integrity. This paper considers the problem of key agreement in dynamic peer groups. (Key agreement, especially in a group setting, is the steeping stone for all other security services.) Dynamic peer groups require not only initial key agreement (IKA) but also auxiliary key agreement (AKA) operations such as member addition, member deletion and group fusion. We discuss all group key agreement operations and present a concrete protocol suite, CLIQUES, which offers complete key agreement services. CLIQUES is based on multi-party extensions of the well-known Diffie-Hellman key exchange method. The protocols are efficient and provably secure against passive adversaries. Keywords: Key Agreement, Secure Group Communication, Cryptography, Multi-Party Computation, Dynamic Peer Groups. fl Some of the material in this paper has been adapted from [20] and [21]. y Research supported by the Defense Advanced Research Project Agency, Information Technology Office (DARPA-ITO), under contract DABT63-97-C-0031. z Contact Author. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Ateniese, M. Steiner, and G. Tsudik. </author> <title> Authenticated group key agreement and friends. </title> <booktitle> In ACM Symposium on Computer and Communication Security, </booktitle> <month> November </month> <year> 1998. </year>
Reference-contexts: However, it should be noted from the outset, that many other group security properties and services are not treated in this paper. These include: key authentication/integrity, entity authentication, key confirmation, group signatures and non-repudiation of group membership. Protocols and mechanisms in support of these are treated in another paper <ref> [1] </ref>. 2 Dimensions of Key Agreement All our protocols are based on contributory key agreement. <p> Furthermore, our protocols can be easily extended to authenticated group key agreement providing perfect forward secrecy (PFS) [15, 16, 12, 19], as shown in <ref> [1] </ref>. This is necessary for robust protocols withstanding active attacks. 2.1 Initial Key Agreement (IKA) IKA takes place at the time of group genesis. This is the time when protocol overhead should be minimized since key agreement is a pre-requisite for secure group communication. <p> group fission is only relevant in special scenarios and in most cases it might not be worth the bookkeeping effort of keeping track of subgroups. 5 n number of protocol participants (group members) i; j; h; p; d; c indices of group members M i i-th group member; i 2 <ref> [1; n] </ref> G cyclic algebraic group q order of the algebraic group ff exponentiation base; generator in the algebraic group G delimited by q N i random (secret) exponent 2 ZZ q generated by M i S; T subsets of fN 1 ; . . . ; N n g (S) <p> plays a special role by having to broadcast the last round of inter mediate values. (However, this special role does not afford M n any added rights or privileges.) 2 Assuming atomic, one-message broadcast. 8 M i M i+1 fff (N p jp2 [1;i] ^ p6= j) j j 2 <ref> [1; i] </ref>g; ff (N p jp2 [1;i]) Stage 1 (Upflow): round i; i 2 [1; n 1] M i M n fff (N p jp2 [1;n] ^ p6= j) j j 2 [1; n]g Stage 2 (Broadcast): round n 4.2 Group Initial Key Agreement: IKA.2 In certain environments, it is desirable <p> values. (However, this special role does not afford M n any added rights or privileges.) 2 Assuming atomic, one-message broadcast. 8 M i M i+1 fff (N p jp2 [1;i] ^ p6= j) j j 2 [1; i]g; ff (N p jp2 [1;i]) Stage 1 (Upflow): round i; i 2 <ref> [1; n 1] </ref> M i M n fff (N p jp2 [1;n] ^ p6= j) j j 2 [1; n]g Stage 2 (Broadcast): round n 4.2 Group Initial Key Agreement: IKA.2 In certain environments, it is desirable to minimize the amount of computation performed by each group member. <p> one-message broadcast. 8 M i M i+1 fff (N p jp2 [1;i] ^ p6= j) j j 2 [1; i]g; ff (N p jp2 [1;i]) Stage 1 (Upflow): round i; i 2 [1; n 1] M i M n fff (N p jp2 [1;n] ^ p6= j) j j 2 <ref> [1; n] </ref>g Stage 2 (Broadcast): round n 4.2 Group Initial Key Agreement: IKA.2 In certain environments, it is desirable to minimize the amount of computation performed by each group member. This is particularly the case in large groups or groups involving low-power entities such as smart-cards or PDAs. <p> This might lead to congestion at M n . 9 M i M i+1 ff fN p jp2 [1;i]g Stage 1 (Upflow): Round i; i 2 <ref> [1; n 2] </ref> M i M n1 ff fN p jp2 [1;n1]g Stage 2 (Broadcast): Round n 1 M i M n ff N i g Stage 3 (Response): Round n M i M n fff N j j j 2 [1; n]g Stage 4 (Broadcast): Round n + 1 5 <p> jp2 [1;i]g Stage 1 (Upflow): Round i; i 2 [1; n 2] M i M n1 ff fN p jp2 [1;n1]g Stage 2 (Broadcast): Round n 1 M i M n ff N i g Stage 3 (Response): Round n M i M n fff N j j j 2 <ref> [1; n] </ref>g Stage 4 (Broadcast): Round n + 1 5 CLIQUES: Auxiliary Key Agreement Both IKA protocols operate in two phases: a gathering phase whereby M n collects all fff N 1 N n and a final broadcast phase. <p> the IKA protocol of Figure 2. 3 3 This is only the case for the very first member addition; subsequent member additions require the current controller to save the most recent Broadcast message from the preceding member addition protocol. 10 M n M n+1 fff N j j j 2 <ref> [1; n] </ref>g; ff c N n (N p jp2 [1;n]) Upflow: round 1 (N n N n c N n ) M i M n+1 fff N j j j 2 [1; n + 1]g Broadcast: round 2 In effect, M n extends Stage 1 of the IKA protocol by one <p> Broadcast message from the preceding member addition protocol. 10 M n M n+1 fff N j j j 2 [1; n]g; ff c N n (N p jp2 [1;n]) Upflow: round 1 (N n N n c N n ) M i M n+1 fff N j j j 2 <ref> [1; n + 1] </ref>g Broadcast: round 2 In effect, M n extends Stage 1 of the IKA protocol by one round: it generates a new exponent c N n N n and creates a new upflow message (where c N n N n is used in place of N n .) <p> cases, the new members 4 On the other hand, it can also be argued that this approach is fair since it off-loads the bulk of the computation to the newcomer. 11 M n new member M n+1 formerly M n M n M n+1 fff N j j j 2 <ref> [1; n 1] </ref>g; ff (N p jp2 [1;n1]) (N p jp2 [1;n]) ! Simulated Upflow : rounds 1 &2 (N n new member's contribution) M i M n+1 fff N i j i 2 [1; n + 1]g Broadcast: round 3 are disparate (i.e., have no prior common association) and need <p> member M n+1 formerly M n M n M n+1 fff N j j j 2 [1; n 1]g; ff (N p jp2 [1;n1]) (N p jp2 [1;n]) ! Simulated Upflow : rounds 1 &2 (N n new member's contribution) M i M n+1 fff N i j i 2 <ref> [1; n + 1] </ref>g Broadcast: round 3 are disparate (i.e., have no prior common association) and need to be added in a hurry. Alternatively, the new members may already form a subgroup but policy might dictate that they should be admitted individually. <p> Thus, it is important to recognize from the outset that the most expedient way to address group fusion is to treat it as either: 12 M n+i M n+i+1 fff N j j j 2 <ref> [1; n + i] </ref>g; ff c N n (N p jp2 [1;n+i] Upflow: round i (0 i m, if (i = 0)fN n N n c N n g) M i M n+m fff N j j j 2 [1; n + m]g Broadcast: round m + 1 1) Special case <p> 12 M n+i M n+i+1 fff N j j j 2 [1; n + i]g; ff c N n (N p jp2 [1;n+i] Upflow: round i (0 i m, if (i = 0)fN n N n c N n g) M i M n+m fff N j j j 2 <ref> [1; n + m] </ref>g Broadcast: round m + 1 1) Special case of mass join as in Figure 6 or 2) Creation of a new super-group via IKA of Figure 2 The first choice is appropriate if one of the groups is small. (Recall that mass join takes m + 1 <p> The private exponents of the other group members remain unchanged. 5 Because re-running an IKA involves a liveness test of all group members. 13 M n M i fff N j j j 2 <ref> [1; n] </ref> ^ j 6= dg Broadcast: round 1 (N n N n c N n ) Let M d be the member to be excluded from the group. We assume, for the moment, that d 6= n. <p> leads to following key refresh protocol: The member M h which is the least recent to have refreshed its key share 7 generates a new share (exponent) c N h and "re-runs" the broadcast round as shown in figure 8 M h M i fff N j j j 2 <ref> [1; n] </ref>g Broadcast: round 1 (N h N h c N h ) This procedure guarantees key independence between session keys and limits the damage of leaked key share to at most n epochs. <p> In practice, one must contend with active attacks and intruders; to this end, authenticated key agreement must be employed. Related issues include key confirmation, group integrity and member authentication. These and other group security services are addressed in another paper <ref> [1] </ref>. 9 Acknowledgements The authors thank N. Asokan, G. Ateniese, V. Shoup and U. Wille for comments on the drafts of this paper.
Reference: [2] <author> Stefan Brands. </author> <title> An efficient off-line electronic cash system based on the representation problem. </title> <type> Technical Report CS-R9323, </type> <institution> CWI, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Remark: Polynomial indistinguishability of the 2-party Diffie-Helman key is considered, e.g., in <ref> [2] </ref>. The notion of polynomial indistinguishability is related to polynomial time statistical test as defined in [22, 14]. In this context, it means that no polynomial-time algorithm can distinguish between a Diffie-Hellman key and a random value with probability significantly greater that 1 2 .
Reference: [3] <author> M. Burmester. </author> <title> On the risk of opening distributed keys. </title> <booktitle> In Advances in Cryptology - CRYPTO, </booktitle> <year> 1994. </year>
Reference-contexts: In other words, a group member must not have knowledge of keys used before it joined the group. * New keys must remain out of reach of former group members. A related term found in the security literature is resistance to known key attacks (KKA) <ref> [15, 3] </ref>. A protocol is said to be KKA-resistant if knowledge of one or more past session (short-term) keys cannot be used to compute a current session key or a long-term secret. Generally, a known-key attack can be passive or active. The latter is addressed in detail by Burmester [3]. <p> A protocol is said to be KKA-resistant if knowledge of one or more past session (short-term) keys cannot be used to compute a current session key or a long-term secret. Generally, a known-key attack can be passive or active. The latter is addressed in detail by Burmester <ref> [3] </ref>. Since this paper (and our protocol model) is concerned with key agreement without any related services (e.g., implicit key authentication) we only consider passive known-key attacks on short-term session keys.
Reference: [4] <author> M. Burmester and Y. Desmedt. </author> <title> A secure and efficient conference key distribution system. </title> <booktitle> In Advances in Cryptology - EUROCRYPT, </booktitle> <year> 1994. </year>
Reference-contexts: The first two requirements are obviously needed. The last property ensures that the inputs x i can be reused for subsequent key agreements. This is essential for DPGs, as will be seen below. Several contributory schemes key agreement have been proposed in the literature <ref> [8, 18, 4, 11, 20, 9] </ref>, however, none have been widely used. In practice, group key agreement is typically done in a centralized manner: one dedicated party (typically, a group leader) chooses the group key and distributes it to all group members. <p> In general, re-computing a common key (when M i leaves) is straight-forward for all M j , j &lt; i. While, all M j , j &gt; i need to receive input from lower-numbered members. One notable recent result is due to Burmester and Desmedt <ref> [4] </ref>. They construct a very efficient protocol (BD) which executes in only three rounds: 8 It is also not very efficient. 16 M i M n+1 ff N n+1 Broadcast: round 1 M n M n+1 ff K n Exchange: round 2 1.
Reference: [5] <author> W. Diffie and M. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-22(6):644-654, </volume> <month> November </month> <year> 1976. </year>
Reference-contexts: . . ; N n g (S) product of all elements in set S K n group key shared among n members 3.1 Security proof outline All our key agreement protocols belong to a family of protocols that we refer to as "natural" extensions of the 2-party Diffie-Hellman key exchange <ref> [5] </ref>: Like in the 2-party case, all participants M 1 ; . . . ; M n agree a priori on a cyclic group, G. Let ff be a generator of G.
Reference: [6] <institution> The digital signature standard proposed by NIST. CACM, </institution> <month> 35(7) </month> <pages> 36-40, </pages> <month> Jul </month> <year> 1992. </year>
Reference-contexts: Groups of this type are used, e.g., in Schnorr signatures [17] and DSS <ref> [6] </ref>.
Reference: [7] <author> H. Harney, C. Muckenhirn, and T. </author> <title> Rivers. Group key management protocol (gkmp) architecture, </title> <month> July </month> <year> 1997. </year> <note> RFC 2094. </note>
Reference-contexts: In large groups, it is unclear that key agreement is appropriate since collecting contributions from all members can become very costly. Instead, key distribution mechanisms can be used. This subject (key distribution in large and dynamic groups) is an active research area; for example, <ref> [7, 13, 10] </ref>. Our emphasis has been on bare key agreement resistant to passive attacks. In practice, one must contend with active attacks and intruders; to this end, authenticated key agreement must be employed. Related issues include key confirmation, group integrity and member authentication.
Reference: [8] <author> Ingemar Ingemarsson, Donald Tang, and C. Wong. </author> <title> A conference key distribution system. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 28(5) </volume> <pages> 714-720, </pages> <month> September </month> <year> 1982. </year>
Reference-contexts: The first two requirements are obviously needed. The last property ensures that the inputs x i can be reused for subsequent key agreements. This is essential for DPGs, as will be seen below. Several contributory schemes key agreement have been proposed in the literature <ref> [8, 18, 4, 11, 20, 9] </ref>, however, none have been widely used. In practice, group key agreement is typically done in a centralized manner: one dedicated party (typically, a group leader) chooses the group key and distributes it to all group members. <p> is polynomially indistinguishable from a random value. 2 Consequently, all AKA protocols presented above fall into the class of "natural" DH extensions defined in Section 3.2 and benefit from the same security properties. 7 Related Work The earliest attempt to extend DH to groups is due to Ingemarsson et al. <ref> [8] </ref> The protocol in figure 9 (called ING) requires synchronous startup and executes in (n 1) rounds. The members must be arranged in a logical ring.
Reference: [9] <author> Mike Just and Serge Vaudenay. </author> <title> Authenticated multi-party key agreement. </title> <editor> In Ueli Maurer, editor, </editor> <booktitle> Advances in Cryptology - EUROCRYPT 96, number 1070 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany, </address> <year> 1996. </year> <month> 18 </month>
Reference-contexts: The first two requirements are obviously needed. The last property ensures that the inputs x i can be reused for subsequent key agreements. This is essential for DPGs, as will be seen below. Several contributory schemes key agreement have been proposed in the literature <ref> [8, 18, 4, 11, 20, 9] </ref>, however, none have been widely used. In practice, group key agreement is typically done in a centralized manner: one dedicated party (typically, a group leader) chooses the group key and distributes it to all group members.
Reference: [10] <author> W. Kei, M. Gouda, and S. Lam. </author> <title> Secure group communications using key graphs. </title> <type> Technical report, </type> <institution> UT Austin, CS Dept. TR-97-23, </institution> <year> 1997. </year>
Reference-contexts: In large groups, it is unclear that key agreement is appropriate since collecting contributions from all members can become very costly. Instead, key distribution mechanisms can be used. This subject (key distribution in large and dynamic groups) is an active research area; for example, <ref> [7, 13, 10] </ref>. Our emphasis has been on bare key agreement resistant to passive attacks. In practice, one must contend with active attacks and intruders; to this end, authenticated key agreement must be employed. Related issues include key confirmation, group integrity and member authentication.
Reference: [11] <author> Michael K.Just. </author> <title> Methods of multi-party cryptographic key establishment. </title> <type> Master's thesis, </type> <institution> Carleton University, Computer Science Department, Caleton University, </institution> <address> Ottawa, Ontario, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: The first two requirements are obviously needed. The last property ensures that the inputs x i can be reused for subsequent key agreements. This is essential for DPGs, as will be seen below. Several contributory schemes key agreement have been proposed in the literature <ref> [8, 18, 4, 11, 20, 9] </ref>, however, none have been widely used. In practice, group key agreement is typically done in a centralized manner: one dedicated party (typically, a group leader) chooses the group key and distributes it to all group members.
Reference: [12] <author> Hugo Krawczyk. SKEME: </author> <title> A versatile secure key exchange mechanism for internet. </title> <booktitle> In Symposium on Network and Distributed Systems Security, </booktitle> <pages> pages 114-127, </pages> <address> San Diego, California, </address> <month> February </month> <year> 1996. </year> <institution> Internet Society. </institution>
Reference-contexts: Furthermore, our protocols can be easily extended to authenticated group key agreement providing perfect forward secrecy (PFS) <ref> [15, 16, 12, 19] </ref>, as shown in [1]. This is necessary for robust protocols withstanding active attacks. 2.1 Initial Key Agreement (IKA) IKA takes place at the time of group genesis.
Reference: [13] <author> D. McGrew and A. Sherman. </author> <title> One-way function trees. </title> <type> Technical report, </type> <institution> DARFT, in submission, </institution> <year> 1998. </year>
Reference-contexts: In large groups, it is unclear that key agreement is appropriate since collecting contributions from all members can become very costly. Instead, key distribution mechanisms can be used. This subject (key distribution in large and dynamic groups) is an active research area; for example, <ref> [7, 13, 10] </ref>. Our emphasis has been on bare key agreement resistant to passive attacks. In practice, one must contend with active attacks and intruders; to this end, authenticated key agreement must be employed. Related issues include key confirmation, group integrity and member authentication.
Reference: [14] <author> A. Menezes, P. Van Oorschot, and S. Vanstone. </author> <title> Handbook of applied cryptography. CRC Press series on discrete mathematics and its applications. </title> <publisher> CRC Press, </publisher> <year> 1996. </year> <note> ISBN 0-8493-8523-7. </note>
Reference-contexts: Remark: Polynomial indistinguishability of the 2-party Diffie-Helman key is considered, e.g., in [2]. The notion of polynomial indistinguishability is related to polynomial time statistical test as defined in <ref> [22, 14] </ref>. In this context, it means that no polynomial-time algorithm can distinguish between a Diffie-Hellman key and a random value with probability significantly greater that 1 2 . More specifically, let K and R be l-bit strings such that R is random and K is a Diffie-Hellman key.
Reference: [15] <author> A. Menezes, P. van Oorschot, and S. Vanstone. </author> <title> Handbook of applied cryptography. CRC Press series on discrete mathematics and its applications. </title> <publisher> CRC Press, </publisher> <year> 1996. </year> <note> ISBN 0-8493-8523-7. </note>
Reference-contexts: Furthermore, our protocols can be easily extended to authenticated group key agreement providing perfect forward secrecy (PFS) <ref> [15, 16, 12, 19] </ref>, as shown in [1]. This is necessary for robust protocols withstanding active attacks. 2.1 Initial Key Agreement (IKA) IKA takes place at the time of group genesis. <p> In other words, a group member must not have knowledge of keys used before it joined the group. * New keys must remain out of reach of former group members. A related term found in the security literature is resistance to known key attacks (KKA) <ref> [15, 3] </ref>. A protocol is said to be KKA-resistant if knowledge of one or more past session (short-term) keys cannot be used to compute a current session key or a long-term secret. Generally, a known-key attack can be passive or active. The latter is addressed in detail by Burmester [3].
Reference: [16] <author> H. Orman. </author> <title> The oakley key determination protocol, </title> <note> Version 2.0 1997. INTERNET-DRAFT, work in progress. </note>
Reference-contexts: Furthermore, our protocols can be easily extended to authenticated group key agreement providing perfect forward secrecy (PFS) <ref> [15, 16, 12, 19] </ref>, as shown in [1]. This is necessary for robust protocols withstanding active attacks. 2.1 Initial Key Agreement (IKA) IKA takes place at the time of group genesis.
Reference: [17] <author> C. Schnorr. </author> <title> Efficient signature generation by smart cards. </title> <journal> Journal of Cryptology, </journal> <volume> 4(3) </volume> <pages> 161-174, </pages> <year> 1991. </year>
Reference-contexts: Groups of this type are used, e.g., in Schnorr signatures <ref> [17] </ref> and DSS [6].
Reference: [18] <author> D. Steer, L. Strawczynski, W. Diffie, and M. Wiener. </author> <title> A secure audio teleconference system. </title> <editor> In S. Gold-wasser, editor, </editor> <booktitle> Advances in Cryptology - CRYPTO 88, number 403 in Lecture Notes in Computer Science, </booktitle> <pages> pages 520-528, </pages> <address> Santa Barbara, CA, USA, August 1990. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany. </address>
Reference-contexts: The first two requirements are obviously needed. The last property ensures that the inputs x i can be reused for subsequent key agreements. This is essential for DPGs, as will be seen below. Several contributory schemes key agreement have been proposed in the literature <ref> [8, 18, 4, 11, 20, 9] </ref>, however, none have been widely used. In practice, group key agreement is typically done in a centralized manner: one dedicated party (typically, a group leader) chooses the group key and distributes it to all group members. <p> Although this remains a subject for future work, we briefly sketch one possible solution below. One promising approach to group fusion is a technique fashioned after the one developed by Steer et al. in <ref> [18] </ref>. In brief, suppose that two groups G 1 and G 2 currently using group keys K 1 and K 2 , respectively, would like to form a super-group. <p> It is, thus, suitable for use as an IKA protocol. However, because of its symmetry 8 (no natural group leader) it is difficult to use it as a foundation for auxiliary key agreement protocols. Another DH extension geared towards teleconferencing was proposed by Steer et al. in <ref> [18] </ref>. This protocol (referred to as STR) requires all members to have broadcasting facilities and takes n rounds to complete. In some ways, STR is similar to IKA.1. Both take the same number of rounds and involve asymmetric operation.
Reference: [19] <author> M. Steiner, G. Tsudik, and M. Waidner. </author> <title> Refinement and extension of encrypted key exchange. </title> <journal> ACM Operating Systems Review, </journal> <volume> 29(3) </volume> <pages> 22-30, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Furthermore, our protocols can be easily extended to authenticated group key agreement providing perfect forward secrecy (PFS) <ref> [15, 16, 12, 19] </ref>, as shown in [1]. This is necessary for robust protocols withstanding active attacks. 2.1 Initial Key Agreement (IKA) IKA takes place at the time of group genesis.
Reference: [20] <author> M. Steiner, G. Tsudik, and M. Waidner. </author> <title> Diffie-hellman key distribution extended to groups. </title> <booktitle> In ACM Symposium on Computer and Communication Security, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The first two requirements are obviously needed. The last property ensures that the inputs x i can be reused for subsequent key agreements. This is essential for DPGs, as will be seen below. Several contributory schemes key agreement have been proposed in the literature <ref> [8, 18, 4, 11, 20, 9] </ref>, however, none have been widely used. In practice, group key agreement is typically done in a centralized manner: one dedicated party (typically, a group leader) chooses the group key and distributes it to all group members. <p> construct a number of protocols belonging to the natural DH extensions family without worrying about their individual security. 4 CLIQUES: Initial Key Agreement The cornerstone of the CLIQUES protocol suite is formed by two IKA protocols called IKA.1 and IKA.2. (They were referred to as GDH.2 and GDH3, respectively, in <ref> [20] </ref>.) 4.1 IKA.1 The first IKA protocol (IKA.1) depicted in Figure 2 is simple and straight-forward. It consists of an upflow and downflow stages. The purpose of the upflow stage is to collect contributions from all group members, one per round. <p> After (n 1) rounds everyone computes the same key K n . M i M (i+1)mod n ff N (ik)mod n N i We note that this protocol falls into the class of natural DH extensions as defined in <ref> [20] </ref>. It is, thus, suitable for use as an IKA protocol. However, because of its symmetry 8 (no natural group leader) it is difficult to use it as a foundation for auxiliary key agreement protocols. Another DH extension geared towards teleconferencing was proposed by Steer et al. in [18].
Reference: [21] <author> M. Steiner, G. Tsudik, and M. Waidner. </author> <title> Cliques: A new approach to group key agreement. </title> <booktitle> In IEEE Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1998. </year>
Reference: [22] <author> Douglas R. Stinson. </author> <title> Cryptography: theory and practice. CRC Press Series on Discrete Mathematics and Its Applications, edited by Kenneth Rosen. </title> <publisher> CRC Press, </publisher> <address> Boca Raton, Florida, </address> <year> 1995. </year> <month> 19 </month>
Reference-contexts: Remark: Polynomial indistinguishability of the 2-party Diffie-Helman key is considered, e.g., in [2]. The notion of polynomial indistinguishability is related to polynomial time statistical test as defined in <ref> [22, 14] </ref>. In this context, it means that no polynomial-time algorithm can distinguish between a Diffie-Hellman key and a random value with probability significantly greater that 1 2 . More specifically, let K and R be l-bit strings such that R is random and K is a Diffie-Hellman key.
References-found: 22

