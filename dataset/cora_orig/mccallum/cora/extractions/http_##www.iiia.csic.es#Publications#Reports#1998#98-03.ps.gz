URL: http://www.iiia.csic.es/Publications/Reports/1998/98-03.ps.gz
Refering-URL: http://www.iiia.csic.es/Publications/Reports/1998/
Root-URL: 
Email: Email: fbeckert,haehnleg@ira.uka.de,  Email: gonzalo@sinera.iiia.csic.es,  
Title: Simplification of Many-Valued Logic Formulas Using Anti-Links  
Author: Bernhard Beckert Reiner Hahnle Gonzalo Escalada-Imaz 
Keyword: many-valued logic, subsumption, prime implicants/implicates.  
Web: WWW: http://i12www.ira.uka.de/  WWW: http://www.iiia.csic.es  
Address: D-76128 Karlsruhe, Germany  Barcelona E-08193 Bellaterra, Barcelona, Spain  
Affiliation: Universitat Karlsruhe Institut fur Logik, Komplexitat und Deduktionssysteme  Institut d'Investigacio en Intelligencia Artificial Campus Universitat Autonoma de  
Abstract: We present the theoretical foundations of the many-valued generalization of a technique for simplifying large non-clausal formulas in propositional logic, that is called removal of anti-links. Possible applications include computation of prime implicates of large non-clausal formulas as required, for example, in diagnosis. With the anti-link technique, one does not compute any normal form of a given formula; rather, one removes certain forms of redundancy from formulas in negation normal form (NNF). Its main advantage is that no clausal normal form has to be computed in order to remove redundant parts of a formula. In this paper, we define an anti-link operation on a generic language for expressing many-valued logic formulas called signed NNF and we show that all interesting properties of two-valued anti-links generalize to the many-valued setting, although in a non-trivial way. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Randal E. Bryant. </author> <title> Graph-based algorithms for Boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35:677-691, </volume> <year> 1986. </year>
Reference-contexts: As a consequence, the set of prime implicates of the resulting clause set and of the original formula bear no straightforward relationship, see [8, Section 3.5.1] and [6] for details. In such settings often binary decision diagrams 2 (BDDs) <ref> [1] </ref> are used. In contrast to these, with the anti-link technique, one does not compute any normal form of a given formula; rather, one removes certain forms of redundancy from formulas in negation normal form (NNF, cf. Definition 1).
Reference: [2] <author> Johan de Kleer, Alan K. Mackworth, and Raymond Reiter. </author> <title> Characterizing diagnoses and systems. </title> <journal> Artificial Intelligence, </journal> <volume> 56(2-3):192-222, </volume> <year> 1992. </year>
Reference-contexts: of the anti-link technique include computation of prime fl This research was supported in part within an Accion Integrada called "Discrete Function Ma nipulation Using Anti-Links" granted by DAAD (Germany) and M.E.C. (Spain). 1 implicates 1 of large non-clausal formulas as required, for example, in logic design [9] and diagnosis <ref> [2] </ref>. Purely clausal approaches, applied after doing a polynomial time structure preserving clause form transformation [5], cannot be used here, because such transformations do not preserve models but merely satisfiability.
Reference: [3] <author> Siegfried Gottwald. </author> <title> Fuzzy Sets and Fuzzy Logic. </title> <publisher> Vieweg, </publisher> <address> Braunschweig, </address> <year> 1993. </year>
Reference-contexts: This is significant for computing prime implicates, since such computations tend to be dominated by subsumption checks. Anti-link techniques are not restricted to many-valued formulas in NNF. Principally, they can be adapted to work with other normal forms as well, for example, normal forms based on T-norms and S-norms <ref> [3] </ref>, as well as with other logics such as modal logics. Necessary conditions are that path subsumption and the subset relation coincide, and that an adequate distributivity law can be formulated for the chosen logical connectives. The details will be the subject of forthcoming work.
Reference: [4] <author> Neil V. Murray and Erik Rosenthal. </author> <title> Dissolution: Making Paths Vanish. </title> <journal> Journal of the ACM, </journal> <volume> 3(40) </volume> <pages> 504-535, </pages> <year> 1993. </year>
Reference-contexts: This can greatly reduce the size required for intermediate representations. We stress that the anti-link technique is not intended to replace existing and successful techniques such as BDDs or dissolution <ref> [4] </ref> (it is not even a complete inference rule for propositional logic); rather, the latter can be augmented and improved by our analysis. <p> In this paper, we define an anti-link operation on a generic language for expressing many-valued logic formulas called signed NNF and we show that all interesting properties of two-valued anti-links generalize to the many-valued setting, although in a non-trivial way. Our notation follows <ref> [4] </ref>; but instead of employing the special concept of semantic graphs for the representation of NNF formulas, we use terminology that solely relies on well-known notions like formulas, subformulas, etc. Before giving the technical details, in the remainder of this section we briefly outline our results on an informal level. <p> We regard ^ and _ as implicitly associative and commutative operators. For example, according to the above definition, H _ F is a subformula of F _ G _ H. Our notion of subformulas corresponds to Murray and Rosenthal's full blocks <ref> [4] </ref>. 4 As signed literals are the only kind of literals we deal with, we often simply say "literal" instead of "signed literal". 4 Definition 3 Let G, H be subformulas of an NNF formula F . <p> The set f`(A) j A 2 g of literals on a path is denoted with `(). One may think of a literal occurrence as a uniquely labeled subformula. The above definition of paths is the same as in <ref> [4, 7] </ref>. In the following a different, but equivalent definition of paths through a formula will be convenient.
Reference: [5] <author> David A. Plaisted and Steven Greenbaum. </author> <title> A structure-preserving clause form translation. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 2 </volume> <pages> 293-304, </pages> <year> 1986. </year>
Reference-contexts: Purely clausal approaches, applied after doing a polynomial time structure preserving clause form transformation <ref> [5] </ref>, cannot be used here, because such transformations do not preserve models but merely satisfiability. As a consequence, the set of prime implicates of the resulting clause set and of the original formula bear no straightforward relationship, see [8, Section 3.5.1] and [6] for details.
Reference: [6] <author> Anavai Ramesh, George Becker, and Neil V. Murray. </author> <title> CNF and DNF considered harmful for computing prime implicants/implicates. </title> <journal> Journal of Automated Reasoning, </journal> <note> to appear. </note>
Reference-contexts: As a consequence, the set of prime implicates of the resulting clause set and of the original formula bear no straightforward relationship, see [8, Section 3.5.1] and <ref> [6] </ref> for details. In such settings often binary decision diagrams 2 (BDDs) [1] are used. In contrast to these, with the anti-link technique, one does not compute any normal form of a given formula; rather, one removes certain forms of redundancy from formulas in negation normal form (NNF, cf.
Reference: [7] <author> Anavai Ramesh, Bernhard Beckert, Reiner Hahnle, and Neil V. Murray. </author> <title> Fast subsumption checks using anti-links. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 18(1) </volume> <pages> 47-84, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction In this article we present the theoretical foundations of the many-valued generalization of a novel technique for simplifying large non-clausal formulas in propositional logic. This technique, called removal of anti-links (or just anti-links, for short) has been introduced for the two-valued case in <ref> [7] </ref>. <p> The set f`(A) j A 2 g of literals on a path is denoted with `(). One may think of a literal occurrence as a uniquely labeled subformula. The above definition of paths is the same as in <ref> [4, 7] </ref>. In the following a different, but equivalent definition of paths through a formula will be convenient. <p> It is partly taken from <ref> [7] </ref>, where also proofs of all the results in this section can be found. All formulas in this section are classical NNF formulas. Likewise, subsumed means always classically subsumed, path equivalent means classically path equivalent, etc. <p> Although we can remove all the redundant disjunctive anti-links in the formula, this process can introduce new conjunctive anti-links. Such anti-links may indicate the presence of subsumed d-paths, but the sufficient requirement for redundancy is much stronger than in Definition 19, see <ref> [7, Section 3.7] </ref>. 3.4 Simplifications Obviously, DADV (hA X ; A Y i; M ) can be syntactically larger than M = X _Y . Under certain conditions we may use simplified alternative definitions for DADV . <p> S X ( S Y f 2 dp (F ) j passes through CE (A Y ) fA Y g and A X g if S Y ( S X ; otherwise The following theorem is the many-valued version of Theorem 22 (and the proof for Theorem 22 given in <ref> [7] </ref> can easily be adapted): Theorem 31 Let hA X ; A Y i be a redundant many-valued anti-link in an NNF formula F .
Reference: [8] <author> Anavai G. Ramesh. </author> <title> Some Applications of Non-Clausal Deduction. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, State University of New York at Albany, </institution> <year> 1995. </year>
Reference-contexts: As a consequence, the set of prime implicates of the resulting clause set and of the original formula bear no straightforward relationship, see <ref> [8, Section 3.5.1] </ref> and [6] for details. In such settings often binary decision diagrams 2 (BDDs) [1] are used.
Reference: [9] <editor> Tsutomu Sasao, editor. </editor> <title> Logic Synthesis and Optimization. </title> <publisher> Kluwer, </publisher> <address> Norwell/MA, USA, </address> <year> 1993. </year> <month> 20 </month>
Reference-contexts: Possible applications of the anti-link technique include computation of prime fl This research was supported in part within an Accion Integrada called "Discrete Function Ma nipulation Using Anti-Links" granted by DAAD (Germany) and M.E.C. (Spain). 1 implicates 1 of large non-clausal formulas as required, for example, in logic design <ref> [9] </ref> and diagnosis [2]. Purely clausal approaches, applied after doing a polynomial time structure preserving clause form transformation [5], cannot be used here, because such transformations do not preserve models but merely satisfiability.
Reference: [10] <author> A. Srinivasan, T. Kam, S. Malik, and R. E. Brayton. </author> <title> Algorithms for discrete function manipulation. </title> <booktitle> In Proceedings, IEEE International Conference on CAD, </booktitle> <address> Santa Clara/CA, USA, </address> <pages> pages 92-95. </pages> <publisher> IEEE Press, </publisher> <year> 1990. </year> <month> 21 </month>
Reference-contexts: In other words, the latter paths are all subsumed by one of the former 1 There is a strong duality between implicates and implicants. Therefore, all techniques presented in this paper can be used as well for the computation of prime implicants. 2 Or, rather, many-valued decision diagrams <ref> [10] </ref> as the present paper deals with many-valued logic. 2 X A X F _ G A Y _ H I F _ G _ I A X _ ^ paths, where subsumption on disjunctive paths coincides with the subset relation. Generalizing, we have this kind of situation whenever 1.
References-found: 10

