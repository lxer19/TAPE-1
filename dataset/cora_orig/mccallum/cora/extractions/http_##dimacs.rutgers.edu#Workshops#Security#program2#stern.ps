URL: http://dimacs.rutgers.edu/Workshops/Security/program2/stern.ps
Refering-URL: http://dimacs.rutgers.edu/Workshops/Security/program2/program.html
Root-URL: http://www.cs.rutgers.edu
Email: fmitchell, shmat, uli.sterng@cs.stanford.edu  
Title: Finite-State Analysis of SSL 3.0 and Related Protocols  
Author: John C. Mitchell Vitaly Shmatikov Ulrich Stern 
Date: August 1, 1997  
Address: CA 94305  
Affiliation: Computer Science Department, Stanford University, Stanford,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Dietrich. </author> <title> A Formal Analysis of the Secure Sockets Layer Protocol. </title> <type> PhD thesis, </type> <institution> Dept. Mathematics and Computer Science, Adelphi University, </institution> <month> April </month> <year> 1997. </year> <month> 16 </month>
Reference-contexts: In the process of conducting this study, we uncovered the major problems with SSL 2.0 that motivated the design of SSL 3.0. We are currently investigating various anomalies related to protocol resumption. Another formal analysis of SSL 3.0, using a logic formalizing concepts of knowledge and belief, appears in <ref> [1] </ref>. We did not become aware of this other study until after we had completed our analysis.
Reference: [2] <author> D. L. Dill. </author> <title> The Mur' verification system. </title> <booktitle> In Computer Aided Verification. 8th International Conference, </booktitle> <pages> pages 390-3, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction In previous work [8], a general-purpose finite-state analysis tool, Mur' <ref> [2] </ref>, has been successfully applied to the verification of small protocols such as Needham-Schroeder, Kerberos, and TMN. In an effort to understand the difficulties involved in analyzing larger and more complex protocols, we use Mur' to analyze the SSL 3.0 handshake protocol. <p> The basic approach is similar to the CSP approach to model checking of cryptographic protocols outlined in [7, 9]. However, there are some differences between Mur' and FDR. 2.1 The Mur' verification system Mur' <ref> [2] </ref> is a protocol verification tool that has been successfully applied to several industrial protocols, especially in the domains of multiprocessor cache coherence protocols and multiprocessor memory models [3, 11, 12].
Reference: [3] <author> D. L. Dill, S. Park, and A. G. Nowatzyk. </author> <title> Formal specification of abstract memory models. </title> <booktitle> In Symposium on Research on Integrated Systems, </booktitle> <pages> pages 38-52, </pages> <year> 1993. </year> <note> [4] http://www.digicash.com/ecash/ecash-home.html. </note>
Reference-contexts: However, there are some differences between Mur' and FDR. 2.1 The Mur' verification system Mur' [2] is a protocol verification tool that has been successfully applied to several industrial protocols, especially in the domains of multiprocessor cache coherence protocols and multiprocessor memory models <ref> [3, 11, 12] </ref>. To use Mur' for verification, one has to model the protocol in the Mur' language and augment this model with a specification of the desired properties. The Mur' system automatically checks, by explicit state enumeration, if all reachable states of the model satisfy the given specification.
Reference: [5] <author> A. O. Freier, P. Karlton, and P. C. Kocher. </author> <title> The SSL protocol version 3.0. </title> <address> draft-ietf-tls-ssl-version3-00.txt, </address> <month> November 18, </month> <year> 1996. </year>
Reference-contexts: Experiment with alternate formulations and repeat. This is discussed in detail in Section 4. 3 The SSL 3.0 handshake protocol The primary goal of the SSL 3.0 handshake protocol is to establish secret keys that "provide privacy and reliability between two communicating applications" <ref> [5] </ref>. Henceforth, we call the communicating applications the client (C) and the server (S). The basic approach taken by SSL is to have C generate a fresh random number (the secret or shared secret) and deliver it to S in a secure manner. <p> Upon receipt of this message, the client generates the shared secret and sends it securely to the server in the secret exchange message. Since we were not aware of any formal definition of SSL 3.0, we based our model of the handshake protocol on the Internet draft <ref> [5] </ref>. The draft does not include a precise list of requirements that must be satisfied by the communication channel created after the handshake protocol completes. <p> The SSL definition, however, does not include encryption in this step <ref> [5, Section 5.6.8] </ref>. We used hashing instead of encryption as well since we intend our incremental reconstruction of SSL to follow the definition as closely as possible. <p> Section 5.6.9 of <ref> [5] </ref> states: "No acknowledgment of the finished message is required; parties may begin sending encrypted data immediately after sending the finished message. <p> No bugs were discovered. We are currently investigating several protocol resumption anomalies related to the version rollback attack. 4.10 Protocol G vs. SSL 3.0 Following is the definition of the SSL 3.0 handshake protocol according to <ref> [5] </ref>. When several messages from the same party follow each other in the original definition, they have been collapsed into a single protocol step (e.g., Certificate, ClientKeyExchange, and CertificateVerify were joined into ClientVerify).
Reference: [6] <author> C. N. </author> <title> Ip. State Reduction Methods for Automatic Formal Verification. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1996. </year>
Reference-contexts: Second, Mur' currently implements a richer set of methods for increasing the size of the protocols that can be verified consisting of both several techniques to reduce the number of reachable states <ref> [6] </ref> and several techniques to perform the state space search more efficiently, reducing runtime and memory requirements [10]. 2.2 The methodology In outline, we have analyzed protocols using the following sequence of steps: 1. Formulate the protocol. This generally involves simplifying the protocol by identifying the key steps and primitives.
Reference: [7] <author> G. Lowe. </author> <title> Breaking and fixing the Needham-Schroeder public-key protocol using CSP and FDR. </title> <booktitle> In 2nd International Workshop on Tools and Algorithms for the Construction and Analysis of Systems. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The basic approach is similar to the CSP approach to model checking of cryptographic protocols outlined in <ref> [7, 9] </ref>. However, there are some differences between Mur' and FDR. 2.1 The Mur' verification system Mur' [2] is a protocol verification tool that has been successfully applied to several industrial protocols, especially in the domains of multiprocessor cache coherence protocols and multiprocessor memory models [3, 11, 12].
Reference: [8] <author> J. C. Mitchell, M. Mitchell, and U. Stern. </author> <title> Automated analysis of cryptographic protocols using Mur'. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 141-51, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction In previous work <ref> [8] </ref>, a general-purpose finite-state analysis tool, Mur' [2], has been successfully applied to the verification of small protocols such as Needham-Schroeder, Kerberos, and TMN. In an effort to understand the difficulties involved in analyzing larger and more complex protocols, we use Mur' to analyze the SSL 3.0 handshake protocol. <p> author (s) and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency, NASA, NSF or the US Government. 1 2 Outline of the methodology Our general methodology for modeling security protocols in Mur' is outlined in our previous paper <ref> [8] </ref>. The basic approach is similar to the CSP approach to model checking of cryptographic protocols outlined in [7, 9].
Reference: [9] <author> S. Schneider. </author> <title> Security properties and CSP. </title> <booktitle> In IEEE Symp. Security and Privacy, </booktitle> <year> 1996. </year>
Reference-contexts: The basic approach is similar to the CSP approach to model checking of cryptographic protocols outlined in <ref> [7, 9] </ref>. However, there are some differences between Mur' and FDR. 2.1 The Mur' verification system Mur' [2] is a protocol verification tool that has been successfully applied to several industrial protocols, especially in the domains of multiprocessor cache coherence protocols and multiprocessor memory models [3, 11, 12].
Reference: [10] <author> U. Stern. </author> <title> Algorithmic Techniques in Verification by Explicit State Enumeration. </title> <type> PhD thesis, </type> <institution> Technical University of Munich, </institution> <year> 1997. </year>
Reference-contexts: Second, Mur' currently implements a richer set of methods for increasing the size of the protocols that can be verified consisting of both several techniques to reduce the number of reachable states [6] and several techniques to perform the state space search more efficiently, reducing runtime and memory requirements <ref> [10] </ref>. 2.2 The methodology In outline, we have analyzed protocols using the following sequence of steps: 1. Formulate the protocol. This generally involves simplifying the protocol by identifying the key steps and primitives.
Reference: [11] <author> U. Stern and D. L. Dill. </author> <title> Automatic verification of the SCI cache coherence protocol. </title> <booktitle> In Advanced Research Working Conference on Correct Hardware Design and Verification Methods, </booktitle> <pages> pages 21-34, </pages> <year> 1995. </year>
Reference-contexts: However, there are some differences between Mur' and FDR. 2.1 The Mur' verification system Mur' [2] is a protocol verification tool that has been successfully applied to several industrial protocols, especially in the domains of multiprocessor cache coherence protocols and multiprocessor memory models <ref> [3, 11, 12] </ref>. To use Mur' for verification, one has to model the protocol in the Mur' language and augment this model with a specification of the desired properties. The Mur' system automatically checks, by explicit state enumeration, if all reachable states of the model satisfy the given specification.
Reference: [12] <author> L. Yang, D. Gao, J. Mostoufi, R. Joshi, and P. Loewenstein. </author> <title> System design methodology of UltraSPARC TM -I. </title> <booktitle> In 32nd Design Automation Conference, </booktitle> <pages> pages 7-12, </pages> <year> 1995. </year> <month> 17 </month>
Reference-contexts: However, there are some differences between Mur' and FDR. 2.1 The Mur' verification system Mur' [2] is a protocol verification tool that has been successfully applied to several industrial protocols, especially in the domains of multiprocessor cache coherence protocols and multiprocessor memory models <ref> [3, 11, 12] </ref>. To use Mur' for verification, one has to model the protocol in the Mur' language and augment this model with a specification of the desired properties. The Mur' system automatically checks, by explicit state enumeration, if all reachable states of the model satisfy the given specification.
References-found: 11

