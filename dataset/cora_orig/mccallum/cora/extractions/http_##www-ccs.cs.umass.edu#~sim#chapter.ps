URL: http://www-ccs.cs.umass.edu/~sim/chapter.ps
Refering-URL: http://www-ccs.cs.umass.edu/rtdb/applications.html
Root-URL: 
Title: Real-Time Databases: Issues and Applications 1  
Author: Bhaskar Purimetla, Rajendran M. Sivasankaran, Krithi Ramamritham and John A. Stankovic 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts,  
Abstract: Data in real-time databases has to be logically and temporally consistent. The latter arises from the need to preserve the temporal validity of data items that reflect the state of the environment that is being controlled by the system. Some of the timing constraints on the transactions that process real-time data come from this need. These constraints, in turn, necessitate time-cognizant transaction processing so that transactions can be processed to meet their deadlines. This paper explores the issues in real-time database systems and studies two real-time database applications: Cooperative distributed navigation systems and Network services database systems. The purpose of the paper is to discuss the general characteristics of data and transactions in real-time database systems and further explore them in the context of these two applications. Cooperative distributed navigation systems appear in several complex applications such as road following and robot navigation. Network services databases provide support for the services in an intelligent network (IN). These services include dialed number services (800 service), personal mobility service, virtual business group service, and televoting. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Abbott and H. Garcia-Molina. </author> <title> "Scheduling I/O Requests with Deadlines: A Performance Evaluation". </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: Many concurrency control protocols have been developed to process transactions with time constraints. The reader is referred to <ref> [1, 7, 9, 13, 21, 24] </ref> for more details. 3 Relationship to Active Databases Many of the characteristics of data and transactions discussed in the last two sections may remind a reader of active databases.
Reference: [2] <author> N. Audsley, A. Burns, M. Richardson, and A. Wellings. </author> <title> "A Database Model for Hard Real-Time Systems". </title> <type> Technical Report, </type> <institution> Real-Time Systems Group, Univ. of York, U.K., </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Needless to say, such a mishap can result in a major catastrophe. The need to maintain consistency between the actual state of the environment and the state as reflected by the contents of the database leads to the notion of temporal consistency. Temporal consistency has two components <ref> [24, 2] </ref>: * Absolute consistency between the state of the environment and its reflection in the database.
Reference: [3] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1987. </year>
Reference-contexts: Details can be found in [17]. To satisfy logical consistency we can use standard concurrency control techniques such as two phase locking <ref> [3] </ref> and to satisfy temporal consistency requirements we need to use time-cognizant transaction processing by tailoring the traditional concurrency control and transaction management techniques to explicitly deal with time. 2.2 Characteristics of Transactions in Real-Time Database Systems In this section, transactions are characterized along three dimensions : the manner in which
Reference: [4] <author> U. Dayal, et. al. </author> <title> "The HiPAC Project: Combining Active Databases and Timing Constraints". </title> <booktitle> SIGMOD Record, </booktitle> <volume> 17, 1, </volume> <month> March </month> <year> 1988, </year> <pages> 51-70. </pages>
Reference-contexts: The condition can correspond to conditions on the state of the data or the environment. The action is said to be triggered <ref> [12, 4] </ref> and it can be an arbitrary transaction or set of transactions. Given this, it is not difficult to see that active databases provide a good model for the arrival (i.e., triggering) of periodic/aperiodic activities based on events and conditions which is so typical of real-time systems. <p> Report generating transactions are read-only. The transaction that does accounting is an example of a read-write transaction. It should be noted that the application is conducive to the usage of the Event-Condition-Action (ECA) paradigm from active databases <ref> [4] </ref>. We can set triggers to update routing data when the traffic load reaches a minimum or a maximum value. A service request may be forwarded to different nodes depending on the time of the day. <p> An action can be a subtransaction or an independent transaction depending on the type of coupling mode chosen <ref> [4] </ref>. Hence we may have to consider the coupling mode in the assignment of priorities and deadlines of the actions. Moreover, rules can have deadlines specified for their actions when a constraint has to be restored within a certain time from the point where the constraint has been violated.
Reference: [5] <author> K. R. Dittrich and U. Dayal. </author> <title> Active Database Systems (Tutorial Notes). </title> <booktitle> The Seventeenth International Conference on Very Large Databases, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: Upon the occurrence of the specified event, if the condition holds, then the specified action can be taken. This construct provides a good mechanism by which integrity constraints can be maintained among related or overlapping data or by which views can be constructed <ref> [5] </ref>. The event can be arbitrary, including external events (as in the case of real-time events generated by the environment), timer events, or transaction related events (such as the begin, commit or abort of transactions). The condition can correspond to conditions on the state of the data or the environment.
Reference: [6] <author> M.C. Graham. </author> <title> "Issues in Real-Time Data Management". </title> <journal> Real-Time Systems Journal, </journal> <month> September </month> <year> 1992. </year>
Reference: [7] <author> J.R. Haritsa, M.J. Carey and M. Livny. </author> <title> "Dynamic Real-Time Optimistic Con-currency Control". </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: Typi cally, the value drops to zero at a certain point past the deadline. * Firm deadline transactions impart no value to the system once their deadlines expire, i.e., the value drops to zero at deadline <ref> [7] </ref>. For example, if components of a transaction are assigned deadlines derived from the deadline of the original transaction, then even if a component misses its deadline, the overall transaction might still be able to make its deadline. Hence, these deadlines are soft. <p> Many concurrency control protocols have been developed to process transactions with time constraints. The reader is referred to <ref> [1, 7, 9, 13, 21, 24] </ref> for more details. 3 Relationship to Active Databases Many of the characteristics of data and transactions discussed in the last two sections may remind a reader of active databases.
Reference: [8] <author> J. Huang, J.A. Stankovic, D. Towsley and K. Ramamritham. </author> <title> "Experimental Evaluation of Real-Time Transaction Processing". </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1989 </year>
Reference: [9] <author> J. Huang, J.A. Stankovic, K. Ramamritham, D. Towsley and Bhaskar Purimetla. </author> <title> "Priority Inheritance in Soft Real-Time Databases". </title> <note> Real-Time Systems Journal September 1992. </note>
Reference-contexts: Many concurrency control protocols have been developed to process transactions with time constraints. The reader is referred to <ref> [1, 7, 9, 13, 21, 24] </ref> for more details. 3 Relationship to Active Databases Many of the characteristics of data and transactions discussed in the last two sections may remind a reader of active databases.
Reference: [10] <author> E. D. Jensen, C. D. Locke, and H. Tokuda. </author> <title> "A Time-Driven Scheduling Model For Real-Time Operating Systems". </title> <booktitle> Proceedings of 1985 IEEE Real-Time Systems Symposium, </booktitle> <pages> pp. 112-122. </pages>
Reference-contexts: This categorization tells us the value imparted to the system when a transaction meets its deadline. In systems which use priority driven scheduling algorithms, value and deadline are used to derive the priority. Whereas arbitrary types of value functions can be associated with transactions <ref> [10] </ref>, the following simple functions occur more often: * Hard deadline transactions are those which may result in a catastrophe if the deadline is missed. One can say that a large negative value is imparted to the system if a hard deadline is missed.
Reference: [11] <author> H. F. Korth, E. Levy, and A. Silberschatz. </author> <title> Compensating Transactions: A New Recovery Paradigm. </title> <booktitle> Proceedings of the Sixteenth International Conference on Very Large Databases, </booktitle> <pages> pages 95-106, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: If absolute consistency is not satisfied and the mode is normal, then extrapolation of archival data can be used to maintain consistency. The concept of invoking contingency transactions for compensation has applicability here <ref> [11] </ref>. If two or more sensors from one or more agents are used to track a common target, then relative consistency among the data from these sensors needs to be maintained in order to make correct decisions.
Reference: [12] <author> H. F. Korth, Soparkar, Silberschatz, A.. </author> <title> "Triggered Real-Time databases with consistency constraints". </title> <booktitle> Proceedings of the Conference on Very Large Data Bases, </booktitle> <year> 1990. </year> <month> 19 </month>
Reference-contexts: The condition can correspond to conditions on the state of the data or the environment. The action is said to be triggered <ref> [12, 4] </ref> and it can be an arbitrary transaction or set of transactions. Given this, it is not difficult to see that active databases provide a good model for the arrival (i.e., triggering) of periodic/aperiodic activities based on events and conditions which is so typical of real-time systems.
Reference: [13] <author> Y. Lin and S.H. Son. </author> <title> "Concurrency Control in Real-Time Databases by Dy--namic Adjustment of Serialization Order". </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: Many concurrency control protocols have been developed to process transactions with time constraints. The reader is referred to <ref> [1, 7, 9, 13, 21, 24] </ref> for more details. 3 Relationship to Active Databases Many of the characteristics of data and transactions discussed in the last two sections may remind a reader of active databases.
Reference: [14] <author> J. Liu, K. Lin, W. Shih, A. Yu, J. Chung, and W. Zhao. </author> <title> "Algorithms for Scheduling Imprecise Computation". </title> <journal> IEEE Computer, </journal> <volume> Vol. 24, No. 5, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: Second, temporally-correct serializable schedules are a subset of the serializable schedules. Third, since timeliness is more important than correctness, in many situations, precision can be traded for timeliness. Similarly, atomicity may be relaxed. For instance, this happens with monotonic queries and transactions, which are the counterparts of monotonic tasks <ref> [14] </ref> in real-time systems. Furthermore, many of the extensions to serializability that have been proposed in databases are also applicable to real-time databases (See [18] for a review of these proposals). Some of these assume that isolation of transactions may not always be needed.
Reference: [15] <author> C. Pu and A. Leff. </author> <title> Replica Control in Distributed Systems: An Asynchronous Approach. </title> <booktitle> Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 377-386, </pages> <month> May </month> <year> 1991. </year>
Reference: [16] <author> K. Ramamritham and C. Pu. </author> <title> "A Formal Characterization of Epsilon Serializ-ability". </title> <note> To appear in IEEE Transactions on Knowledge and Data Engineering. </note>
Reference-contexts: There are other 5 Isolation of the Atomicity, Consistency, Isolation and Durability (ACID) properties of transactions. 6 Epsilon Serializability <ref> [16] </ref> is a weaker form of consistency criterion that allows transactions to view inconsistent data in a controlled way thus providing more concurrency. 15 transactions such as the monthly billing and accounting that are periodic and have soft deadlines.
Reference: [17] <author> K. Ramamritham. </author> <title> "Real-Time Databases". </title> <journal> International Journal of Distributed and Parallel Databases, </journal> <year> 1993. </year>
Reference-contexts: This is because, achieving a given rvi implies that the data items that belong to a relative consistency set have to be observed at times close to each other. Details can be found in <ref> [17] </ref>. <p> The processing of real-time transactions must take their different characteristics into account. Since meeting time constraints is the goal, it is important to 5 understand how transactions obtain their time constraints. Since handling avis is quite involved <ref> [17] </ref>, in the rest of this section, we discuss how absolute validity requirements on the data induce periodicity requirements. Suppose the avi of temperature is 10, i.e., the temperature must be no more than 10 seconds old.
Reference: [18] <author> K. Ramamritham and P. Chrysanthis. </author> <title> "In Search of Acceptability Criteria: Database Consistency Requirements and Transaction Correctness Properties". Distributed Object Management, </title> <editor> Ozsu, Dayal, and Valduriez Ed., </editor> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: Similarly, atomicity may be relaxed. For instance, this happens with monotonic queries and transactions, which are the counterparts of monotonic tasks [14] in real-time systems. Furthermore, many of the extensions to serializability that have been proposed in databases are also applicable to real-time databases (See <ref> [18] </ref> for a review of these proposals). Some of these assume that isolation of transactions may not always be needed. In spite of these differences, given the many advantages of database technology, it will be beneficial if we can make use of them for managing data found in real-time systems.
Reference: [19] <author> N. Redding. </author> <title> "Network Services Databases",. </title> <type> Globecom '86, </type> <year> 1986. </year>
Reference-contexts: They are Service Switching Points (SSP), Signal Transfer Points (STP), Service Control Points (SCP), the Signal Engineering and Administration System (SEAS), and the Service Management System (SMS) <ref> [19] </ref>. The SSPs are simple electronic switches and the STPs are highly reliable packet switches. The SCPs are on-line, fault-tolerant, real-time databases containing 800 2 Code to process the service. 12 records. They handle inquiries from SSP and return data to the SSP for call processing.
Reference: [20] <author> B. Purimetla, R. Sivasankaran, J. Stankovic, and K. Ramamritham. </author> <title> "A Study of Distributed Real-time Active Database Applications". </title> <type> Technical Report 93-10, </type> <institution> Department of Computer Science, University of Massachusetts, Amherst, </institution> <month> Jan 93. </month>
Reference: [21] <author> L. Sha, R. Rajkumar and J.P. Lehoczky. </author> <title> "Concurrency Control for Distributed Real-Time Databases". </title> <booktitle> ACM SIGMOD Record, </booktitle> <month> March </month> <year> 1988. </year>
Reference-contexts: This, for example, will be the case if the rate monotonic static priority approach, extended to deal with resources <ref> [21] </ref>, is used to schedule periodic transactions executing on a main memory database. Thus, it follows from the above periodicity semantics that to maintain the avi of temperature, the period of the transaction that reads the temperature must be no more than half the avi, that is 5. <p> Many concurrency control protocols have been developed to process transactions with time constraints. The reader is referred to <ref> [1, 7, 9, 13, 21, 24] </ref> for more details. 3 Relationship to Active Databases Many of the characteristics of data and transactions discussed in the last two sections may remind a reader of active databases.
Reference: [22] <author> K. P. Smith and J.W.S. Liu. </author> <title> "Monotonically improving approximate answers to relational algebra queries". </title> <booktitle> Proceedings of Compsac, </booktitle> <month> September </month> <year> 1989. </year>
Reference-contexts: But the time available for doing the job may be constrained by the present velocity of the vehicle and other physical parameters. This leads firm real time transactions. It may be useful to borrow ideas from the theory of imprecise computation <ref> [22] </ref> if a threat cannot be completely identified. The system can roughly identify the characteristics of the threat and assume a worst case threat possibility. An incomplete result may be useful here.
Reference: [23] <author> R. Snodgrass and I. Ahn. </author> <title> "Temporal Databases". </title> <journal> IEEE Computer, </journal> <volume> Vol 19, No. 9, </volume> <month> September </month> <year> 1986, </year> <pages> pp. 35-42. </pages>
Reference-contexts: This derivation typically would depend on past trends and so some of the needed information may have to be fetched from archival storage (a temporal database <ref> [23] </ref>). Based on the derived data, where the derivation may involve multiple steps, actuator commands are set. In general, the history of the environment and the interactions with it are also logged in archival storage.
Reference: [24] <author> X. Song and J.W.S. Liu. </author> <title> "How Well Can Data Temporal Consistency be Maintained?". </title> <journal> Proceedings of the IEEE Symposium on Computer-Aided Control Systems Design, </journal> <note> (to appear) 1992. </note>
Reference-contexts: Needless to say, such a mishap can result in a major catastrophe. The need to maintain consistency between the actual state of the environment and the state as reflected by the contents of the database leads to the notion of temporal consistency. Temporal consistency has two components <ref> [24, 2] </ref>: * Absolute consistency between the state of the environment and its reflection in the database. <p> Many concurrency control protocols have been developed to process transactions with time constraints. The reader is referred to <ref> [1, 7, 9, 13, 21, 24] </ref> for more details. 3 Relationship to Active Databases Many of the characteristics of data and transactions discussed in the last two sections may remind a reader of active databases.
Reference: [25] <editor> AT&T Technical Journal. </editor> <title> "Intelligent Networking: </title> <journal> Network Systems". </journal> <volume> Volume 70, </volume> <month> Summer </month> <year> 1991. </year>
Reference-contexts: The features for IN that they desire are a service independent architecture, flexible distribution of service logic 2 and service supporting functions, user friendly and flexible service creation functions, open architecture with a set of standard interfaces, compatibility with existing networks, self-awareness, and self-adapting and self-provisioning capabilities <ref> [25, 26] </ref>. 5.1 Characteristics of the 800 service atypical IN service Current implementation of the 800 number service network consists of five major components as shown in figure 2.
Reference: [26] <institution> IEEE Computer. </institution> <note> "Special issue on Telecommunications". </note> <month> August </month> <year> 1993. </year>
Reference-contexts: The features for IN that they desire are a service independent architecture, flexible distribution of service logic 2 and service supporting functions, user friendly and flexible service creation functions, open architecture with a set of standard interfaces, compatibility with existing networks, self-awareness, and self-adapting and self-provisioning capabilities <ref> [25, 26] </ref>. 5.1 Characteristics of the 800 service atypical IN service Current implementation of the 800 number service network consists of five major components as shown in figure 2.
Reference: [27] <author> Ramamritham, K., </author> <title> "Time for Real-Time Temporal Databases?" International Workshop on an Infrastructure for Temporal Databases, </title> <month> June </month> <year> 1993. </year> <month> 20 </month>
Reference-contexts: So temporal databases and real-time databases complement each other in their capabilities and a lot is to be gained by considering the two in conjunction <ref> [27] </ref>. 7 Conclusions In this paper, we presented the characteristics of data and transactions in real-time database systems and discussed the differences between real-time database systems and traditional databases. Many of the differences arise because temporal consistency requirements are imposed on the data in addition to the usual integrity constraints.
References-found: 27

