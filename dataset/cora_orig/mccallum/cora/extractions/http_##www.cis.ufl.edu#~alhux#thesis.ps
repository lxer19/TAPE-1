URL: http://www.cis.ufl.edu/~alhux/thesis.ps
Refering-URL: http://www.cis.ufl.edu/~alhux/
Root-URL: http://www.cis.ufl.edu
Title: NETWORK ARCHITECTURE SPECIFICATION TOOL FOR THE ADAPTIVE IMAGE MANAGER  
Author: By W. ALLEN HUX 
Degree: A THESIS PRESENTED TO THE GRADUATE SCHOOL OF THE UNIVERSITY OF FLORIDA IN PARTIAL FULFILLMENT OF THE REQUIREMENTS FOR THE DEGREE OF MASTER OF ENGINEERING  
Date: 1998  
Affiliation: UNIVERSITY OF FLORIDA  
Abstract-found: 0
Intro-found: 1
Reference: <author> Booch, Grady. </author> <title> ObjectOriented Analysis and Design. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <address> Redwood City, California, </address> <year> 1994. </year>
Reference-contexts: The design is extensible, allowing new computing or network elements to be added to NAST without modifying any of the original code. An objectoriented approach was chosen for the development of NAST. Object-oriented design is a methodology for reducing the complexity of a problem into comprehensible portions <ref> (Booch, 1994) </ref>. ObjectOriented programming associates methods and attributes of entities into reusable classes. Classes with similar functionality can derive from the same base class, which defines the functionality, enhancing code reuse. The objectoriented process consists of three steps: analysis, design, and implementation. <p> In the design phase, common attributes and methods of the classes 4 allow collaborations to be identified and abstractions to be formed, leading to the development of a class hierarchy. In the implementation stage, the classes are realized using a programming language that supports polymorphism and inheritance, e.g. C++ <ref> (Booch, 1994) </ref>. Two design tools were used to aid the development process: design patterns and the Unified Modeling Language (UML). Design patterns provide core aspects of a solution to a frequently encountered problem (Gamma et al., 1995). Iterator, prototype, and singleton design patterns were used to overcome issues in NAST. <p> Finally, a summary is provided discussing improvements that could be made to NAST, tasks remaining to complete AIM, and the role of NAST in the development of AIM. 6 ANALYSIS The first analysis step is to identify the classes and objects in NAST <ref> (Booch, 1994) </ref>. To assist in identifying the objects and their methods, a prototype GUI was drawn which closely resembles the current implementation (for a screen shot of the interface, see Figure 13, page 33). <p> FPGA, SISD, SIMD, SMP, and Network Link classes will be needed to represent each of the AIM components A Simulation class will implement the simulator methods. 9 DESIGN The next step is to identify methods and common attributes <ref> (Booch, 1994) </ref>. Much of the functionality of the objects can be identified from the function points: Insert a computing or network element (FPGA, SIMD, SISD, SMP, Link) The Interface object must decide which element type to create.
Reference: <author> Coplien, James and Douglas Schmidt. </author> <title> Pattern Languages of Program Design. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1995. </year>
Reference-contexts: Rather than having one object responsible for all these duties, it would be better to separate them into three types <ref> (Coplien and Schmidt, 1995) </ref>: Element objects will provide the implementation of the elements to be simulated and store elementspecific information (such as topology and number of processors).
Reference: <author> Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1995. </year>
Reference-contexts: C++ (Booch, 1994). Two design tools were used to aid the development process: design patterns and the Unified Modeling Language (UML). Design patterns provide core aspects of a solution to a frequently encountered problem <ref> (Gamma et al., 1995) </ref>. Iterator, prototype, and singleton design patterns were used to overcome issues in NAST. UML provides a way to visualize complex software, and was used to diagram the classes of NAST. <p> The insertion process can be made uniform across the element types if a prototype of each element type is kept in a list, and the elements implement a Clone method <ref> (see the Prototype pattern, Gamma et al., 1995) </ref>. A Manager class can keep the prototypes used for cloning, and also maintain a list of all the instances of an element type. <p> Design patterns help provide a framework for some of the tasks. A design pattern provides the core aspects of a solution to a frequently encountered problem, and can be tailored to a specific situation <ref> (Gamma et al., 1995) </ref>. The Prototype design pattern allows the elements used by NAST (FPGA, SIMD, etc.) to remain unknown until runtime, promoting extensibility (the system does not need to be rewritten to support new element types). <p> Many objects need access to its functionality, and a solution to this problem was found with the Singleton pattern. There can be only one interface, and it must be accessible to many other objects. Rather than creating a global variable, the Singleton pattern was implemented <ref> (Gamma et al., 1995) </ref>, providing one common access point. Below is the relevant portion of the AIM header file (AIM.H). <p> Also, it may be necessary to search through the elements to perform a simulation or other operation. Both of these classes ( Glob and Element ) derive from a Container class, which resembles the Iterator pattern <ref> (Gamma et al., 1995) </ref> by providing a standard interface for searching through all the instances of a class. Unlike the Iterator pattern, Container provides the data structure to contain its instances.
Reference: <author> Hinnershitz, Scott E. </author> <title> CISP Workstation Development Library User's Manual. </title>
Reference: <institution> Lockheed Martin Corporation, </institution> <address> Orlando, FL, </address> <year> 1995. </year>
Reference: <author> Ousterhout, John K. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year> <title> Rational Software Co. UML Notation Guide. 1997. http://www.rational.com/uml/html/notation/ Schmalz, Mark. AIM Project - Adaptive Image Manager, 1998. http://www.cise.ufl.edu/~mssz/AIM/Top-Level.html SGI Corp. Origin Servers Technical Overview, 1998. http://www.sgi.com/tech/origin-tech.html Stroustrup, Bjarne. The C++ Programming Language. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: To allow NAST to be recompiled easily on many platforms, the interface was created using Tcl/Tk, a freely available library available for Windows, Unix, and Macintosh environments <ref> (Ousterhout, 1994) </ref>. The screen elements are described in scripts that are loaded at runtime by the Tcl/Tk interpreter. The Tcl/Tk libraries supply routines to allow C code to be called from the interpreter, and Tcl/Tk elements to be accessed from C (or C++).
Reference: <author> Trimberger, Stephen. </author> <title> A Reprogrammable Gate Array and Applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> Vol. 81, No. 7. </volume> <month> July, </month> <year> 1993. </year>
Reference-contexts: Architectures anticipated by AIM include Field-Programmable Gate Array (FPGA), Single Instruction stream Multiple Data stream (SIMD), Single Instruction stream Single Data stream (SISD), and Symmetric MultiProcessor (SMP) (Schmalz, 1998). 2 Field Programmable Gate Arrays (FPGA) consist of an array of as many as ten thousand logic gates <ref> (Trimberger, 1993) </ref>. Connections between the gates are assigned according to a design description, processed in software. Because FPGAs are reprogrammable, parts of the FPGA can be programmed for different logic and switched between applications. Clock speeds for FPGAs are on the order of 10 MHz.
Reference: <author> Wall, Larry, Tom Christiansen, and Randal L. Schwartz. </author> <title> Programming Perl. </title> <publisher> OReilly & Associates, Inc., </publisher> <address> Sebastopol, California, </address> <year> 1996. </year>
Reference-contexts: The Perl script was developed to expedite the tedious task of installing C commands into the Tcl interpreter. Perl was chosen as the language for this task because it is ideally suited for dealing with string manipulations, due to its roots as a reporting language <ref> (Wall, Christiansen, and Schwartz, 1996) </ref>. For example, the following code in commands.pre: is processed by tk_commands.pl and transforms into the following procedure in GUI_procs.cpp: All routines defined in commands.pre are installed into the Tcl interpreter by code in GUI_procs.cpp (generated by tk_commands.pl) that iterates through arrays of command strings.

Reference: <author> Joseph N. Wilson, </author> <title> Chairman Assistant Professor of Computer and Information Science and Engineering I certify that I hav e read this study and that in my opinion it conforms to acceptable standards of scholarly presentation and is fully adequate, in scope and quality, as a thesis for the degree of Master of Engineering. </title>
Reference: <institution> Gerhard Ritter Professor of Computer and Information Science and Engineering I certify that I have read this study and that in my opinion it conforms to acceptable standards of scholarly presentation and is fully adequate, </institution> <note> in scope and quality, as a thesis for the degree of Master of Engineering. </note>
Reference: <institution> Douglas Dankel Assistant Professor of Computer and Information Science and Engineering This thesis was submitted to the Graduate Faculty of the College of Engineering and to the Graduate School and was accepted as partial fulfillment of the requirements for the degree of Master of Engineering. </institution> <note> August 1998 Winfred M. Phillips Dean, </note> <institution> College of Engineering Karen A. Holbrook Dean, Graduate School </institution>
References-found: 11

