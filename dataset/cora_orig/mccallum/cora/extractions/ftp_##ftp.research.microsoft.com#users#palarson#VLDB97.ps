URL: ftp://ftp.research.microsoft.com/users/palarson/VLDB97.ps
Refering-URL: http://www.research.microsoft.com/db/
Root-URL: http://www.research.microsoft.com
Email: w2zhang@bluebox.uwaterloo.ca  palarson@microsoft.com  
Title: Dynamic Memory Adjustment for External Mergesort  
Author: Weiye Zhang Per -Ake Larson 
Address: Waterloo, Ontario, Canada N2L 3G1  One Microsoft Way Redmond, WA 98052-6399, USA  
Affiliation: Department of Computer Science University of Waterloo  Microsoft Corporation  
Abstract: Sorting is a memory intensive operation whose performance is greatly affected by the amount of memory available as work space. When the input size is unknown or available memory space varies, static memory allocation either wastes memory space or fails to make full use of memory to speed up sorting. This paper presents a method for run-time adjustment of in-memory work space for external mergesort and a policy for allocating memory among concurrent, competing sorts. Experimental results confirm that the new method enables sorts to adapt their memory usage gracefully to the actual input size and available memory space. When multiple sorts compete for memory resources, we found that sort throughput and response time are improved significantly by our policy for memory allocation combined with limiting the number of sorts processed concurrently. 
Abstract-found: 1
Intro-found: 1
Reference: [DG94] <author> Diane L. Davison and Goetz Graefe. </author> <title> Memory-contention responsive hash joins. </title> <booktitle> In Proc. of Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 379-390, </pages> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: More memory is required for sorting the two input tables and the performance of sort-merge join depends largely on sort performance. Dynamic memory adjustment is more important to hash join algorithms. Memory adjustment for hash joins has been studied by [ZG90], [PCL93b], and <ref> [DG94] </ref>. However, their work focused on how a single join can use extra space or release part of its space to affect I/O transfer unit size.
Reference: [Gra93] <author> Goetz Graefe. </author> <title> Query evaluation techniques for large databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(2) </volume> <pages> 73-170, </pages> <month> Jun. </month> <year> 1993. </year>
Reference-contexts: Sorting is a frequent operation in database systems. It is used not only to produce sorted output, but also in many sort-based algorithms, such as grouping with aggregation, duplicate removal, sort-merge join and set operations <ref> [Gra93] </ref>. Sorting can also improve the efficiency of algorithms like nested-loop joins and row retrieval via an index. This paper concentrates on dynamic memory adjustment for sorting but the same approach can be applied to other memory intensive operations.
Reference: [Knu73] <author> Donald E. Knuth. </author> <title> Sorting and Searching, </title> <booktitle> volume 3 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <note> second edition, </note> <year> 1973. </year>
Reference-contexts: We then discuss adjustment policies and describe the policy we adopted. 2.1 A Memory Adaptive Mergesort External mergesort consists of two phases: a run formation phase and a merge phase. The standard algorithms for run formation are quicksort and replacement selection <ref> [Knu73] </ref>. Processor speeds continue to increase faster than memory speeds causing an algorithm's cache behavior to become increasingly important. Following [NBC + 94] we therefore opted for a two-phase algorithm for run formation which first sorts data within buffers, followed by an in-memory merge. <p> So given S initial runs, possibly of variable length, and a maximum merge fan-in of K, which merge pattern results in the minimum data transmission? Under the assumption that K remains fixed, this problem has a surprisingly simple solution (see <ref> [Knu73] </ref>, pp 365-366): first add enough dummy runs of length zero to make the number of runs minus one divisible by K 1 and then repeatedly merge together the K shortest remaining runs until only one run remains.
Reference: [NBC + 94] <author> Chris Nyberg, Tom Barclay, Zarka Cve-tanovic, J. Gray, and Dave Lomet. Alpha-sort: </author> <title> A risc machine sort. </title> <booktitle> In Proc. of the 1994 ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 233-242, </pages> <year> 1994. </year>
Reference-contexts: The standard algorithms for run formation are quicksort and replacement selection [Knu73]. Processor speeds continue to increase faster than memory speeds causing an algorithm's cache behavior to become increasingly important. Following <ref> [NBC + 94] </ref> we therefore opted for a two-phase algorithm for run formation which first sorts data within buffers, followed by an in-memory merge. When a sort cannot be completed entirely in memory, the in-memory merge produces runs and external merging is required.
Reference: [PCL93a] <author> HweeHwa Pang, Michael J. Carey, and Miron Livny. </author> <title> Memory-adaptive external sorting. </title> <booktitle> In Proc. of Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 618-629, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: Sorting can also improve the efficiency of algorithms like nested-loop joins and row retrieval via an index. This paper concentrates on dynamic memory adjustment for sorting but the same approach can be applied to other memory intensive operations. Pang, Carey and Livny <ref> [PCL93a] </ref> first studied dynamic memory adjustment for sorting and proposed memory adjustment strategies for external mergesort. For the run formation phase, they considered quick-sort and replacement selection. When using quicksort, adjustments can only be done when a run has been finished and output.
Reference: [PCL93b] <author> HweeHwa Pang, Michael J. Carey, and Miron Livny. </author> <title> Partially preemptible hash joins. </title> <booktitle> In Proc. of ACM SIGMOD Conf., </booktitle> <pages> pages 59-69, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: More memory is required for sorting the two input tables and the performance of sort-merge join depends largely on sort performance. Dynamic memory adjustment is more important to hash join algorithms. Memory adjustment for hash joins has been studied by [ZG90], <ref> [PCL93b] </ref>, and [DG94]. However, their work focused on how a single join can use extra space or release part of its space to affect I/O transfer unit size.
Reference: [Raa95] <author> F. Raab. </author> <title> TPC Benchmark(tm) D (Decision Support), Working Draft 9.1. Transaction Processing Performance Council, </title> <address> San Jose CA, 95112-6311, USA, </address> <month> February </month> <year> 1995. </year>
Reference-contexts: If the degree of concurrency is n, n sort jobs would be started initially and as soon as one finished another one would be started. To get some basis for deciding on a distribution of sort sizes, we analyzed the sorts generated when running the TPC-D benchmark queries <ref> [Raa95] </ref>. More specifically, we analyzed the execution plans used by DB2/6000 version 2 for each of the 17 queries on a TPC-D database with 26 indexes. We found a total of 55 sorts with the size distribution shown in Table 3.
Reference: [ZG90] <author> Hansjorg Zeller and Jim Gray. </author> <title> An adaptive hash join algorithm for multiuser environments. </title> <booktitle> In Proc. of Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 186-197, </pages> <month> Aug </month> <year> 1990. </year>
Reference-contexts: More memory is required for sorting the two input tables and the performance of sort-merge join depends largely on sort performance. Dynamic memory adjustment is more important to hash join algorithms. Memory adjustment for hash joins has been studied by <ref> [ZG90] </ref>, [PCL93b], and [DG94]. However, their work focused on how a single join can use extra space or release part of its space to affect I/O transfer unit size.
References-found: 8

