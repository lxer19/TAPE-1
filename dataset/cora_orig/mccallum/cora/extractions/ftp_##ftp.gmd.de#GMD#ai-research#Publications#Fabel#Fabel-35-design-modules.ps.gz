URL: ftp://ftp.gmd.de/GMD/ai-research/Publications/Fabel/Fabel-35-design-modules.ps.gz
Refering-URL: http://nathan.gmd.de/projects/fabel/fabel-pub.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Modules for Design Support  
Author: Katy Borner (Ed.) 
Date: 35  
Note: c 1995  
Address: Sankt Augustin  
Affiliation: Druck: GMD Forschungszentrum Informationstechnik GmbH,  University of Freiburg, Center for Cognitive Science  University of Freiburg Center for Cognitive Science  
Pubnum: FABEL-Report No.  
Abstract: Reihe FABEL-Report Status: extern Dokumentbezeichner: Org/Reports/nr-35 Erstellt am: 21.06.94 Korrigiert am: 28.05.95 ISSN 0942-413X 
Abstract-found: 1
Intro-found: 1
Reference: [ Aamodt and Plaza, 1994 ] <author> A. Aamodt and E. </author> <title> Plaza. Case-based reasoning: Foundational issues, methodological variations, and system approaches. </title> <journal> AICOM, </journal> <volume> 7 </volume> <pages> 39-59, </pages> <year> 1994. </year>
Reference: [ Aamodt, 1990 ] <author> A. </author> <title> Aamodt. Knowledge-intensive case-based reasoning and sustained reasoning. </title> <booktitle> In Proceedings of ECAI-90, </booktitle> <pages> pages 1-6, </pages> <address> Stockholm, </address> <year> 1990. </year>
Reference-contexts: The solution of the most similar case is transferred to the new problem and adapted if necessary. Storing the new problem including its solution and updating the similarity relation can be seen as a kind of learning <ref> [ Aamodt, 1990 ] </ref> . Detailed introductions into Cbr may be found in [ Riesbeck and Schank, 1989; Kolodner, 1993 ] . Up until now, Cbr has been applied mainly to analytic tasks. Here, properties or symptoms and corresponding concepts or diagnoses are readily at hand.
Reference: [ Aarts and Korst, 1989 ] <author> E. Aarts and J. Korst. </author> <title> Simulated Annealing and Boltzmann Machine. </title> <publisher> Wiley & Sons, </publisher> <address> Chichester, England, </address> <year> 1989. </year>
Reference-contexts: There are a lot of `classical' approaches and problem solving methods. An inference structure is given in [ Karbach and Vo, 1992 ] . Simulated annealing as a problem solving method could be a second type of approach <ref> [ Aarts and Korst, 1989 ] </ref> ; metaphorically spoken one can think of shaking the pipes from the grid lines into correct places. Shaking is done with decreasing physical power the starting power should be so large that the pipes were moving at maximum `grid size' distances.
Reference: [ Babel and Tinhofer, 1990 ] <author> L. Babel and G. Tinhofer. </author> <title> A branch and bound algorithm for the maximum clique problem. </title> <booktitle> ZOR Methods and Models of Operations-Research, </booktitle> <volume> 34 </volume> <pages> 207-217, </pages> <year> 1990. </year>
Reference-contexts: This is done by computing a edge-graph representation of the layout and the query and searching for the largest common subgraph. In order to solve a similar problem, the problem 38 4.4 APPROACH completely. of finding a maximum clique of a graph, various algorithms were developed <ref> [ Babel and Tinhofer, 1990 ] </ref> . A clique is a complete connected subpart of a graph (every node knows every other).
Reference: [ Bakhtari and Bartsch-Sporl, 1994 ] <author> S. Bakhtari and B. Bartsch-Sporl. </author> <title> Bridging the gap between AI technology and design requirements. </title> <booktitle> In AI in Design'94, </booktitle> <address> Lausanne, </address> <year> 1994. </year>
Reference-contexts: And last not least, we have developed DOM's software architecture in a way that enables the system to work on top of different drawing or CAD tools. 3.1.1 Underlying Assumptions The DOM approach is built upon the following application-oriented assumptions <ref> [ Bakhtari and Bartsch-Sporl, 1994 ] </ref> : * There is a need for active assistance functions like assessment, adaptation and completion-oriented construction aids. * All these assistance functions can and should be carried out both on small and on larger portions of the artefact to be designed. * These functions can
Reference: [ Bakhtari and Oertel, 1995 ] <author> S. Bakhtari and W. Oertel. </author> <title> Quality Assessment of Design Cases within the DOM Environment. </title> <booktitle> In Proceedings of the 3rd German CBR Workshop. </booktitle> <institution> University of Kaiserslauten, </institution> <year> 1995. </year>
Reference-contexts: Furthermore we found out that the adaptation functions have much in common with the assessment functions and that construction functions also rely to a large extent on the same knowledge <ref> [ Bakhtari and Oertel, 1995 ] </ref> .
Reference: [ Bakhtari et al., 1995 ] <author> S. Bakhtari, B. Bartsch-Sporl, W. Oertel, and U. Eltz. </author> <title> DOM: </title> <booktitle> Domain Ontology Modelling in Architectural and Engineering Design. Fabel-Report 33, GMD, </booktitle> <address> Sankt Augustin, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: An example for such an association is that all supply air subsystem concepts belong to the class of supply concepts and inherit certain attributes from there. A much more detailed description of the DOM ontology is contained in the report <ref> [ Bakhtari et al., 1995 ] </ref> . 3.3 Approach The DOM system concept shown in figure 3.2 is useful to illustrate the DOM approach from both a global and a conceptual point of view.
Reference: [ Barrow and Burstall, 1976 ] <author> H. G. Barrow and R. M. Burstall. </author> <title> Subgraph isomorphism relational structures and maximal cliques. </title> <journal> Information Processing Letters, </journal> <volume> 4 </volume> <pages> 83-84, </pages> <year> 1976. </year>
Reference-contexts: Instead of searching for a common subgraph of two graphs one searches for a maximum clique in one graph representing all possible matchings between the two graphs, called "combination graph". A maximum clique is the largest of all cliques of a graph. Using the transformation described in <ref> [ Barrow and Burstall, 1976 ] </ref> the nodes of the combination graph represent all matchings of nodes of equal type of the source graphs. Figure 4.8 shows an example.
Reference: [ Bartsch-Sporl and Bakhtari, 1995 ] <author> B. Bartsch-Sporl and S. Bakhtari. </author> <title> A support system for building design experiences and convictions from the FABEL project. </title> <booktitle> In Proceedings of the International Workshop on Engineering Design: AI System Support for Conceptual Design, </booktitle> <volume> LIWED 95, </volume> <year> 1995. </year>
Reference-contexts: Another important point is that with the DOM system we want to make a contribution to one of the main methodological goals of the FABEL project which is the seamless integration of case-based and model-based problem solving approaches <ref> [ Bartsch-Sporl and Bakhtari, 1995 ] </ref> .
Reference: [ Bartsch-Sporl and Tammer, 1994 ] <author> B. Bartsch-Sporl and E.-C. </author> <title> Tammer. Graph-based approach to structural similarity. </title> <editor> In A. Vo, editor, </editor> <booktitle> Similarity concepts and retrieval methods, </booktitle> <pages> pages 45-58. </pages> <address> GMD, Sankt Augustin, </address> <year> 1994. </year>
Reference-contexts: By using the context it is also possible to determine which B&lt;A4d of case 2 correspond to the B&lt;A4d of the query. To p o represents the context in a graph like <ref> [ Bartsch-Sporl and Tammer, 1994 ] </ref> . Building a graph out of objects and relations, one must decide which ones should be the nodes and and which ones the edges. Depending on this decision different parts of two similar situations become identical (Fig. 4.6).
Reference: [ Bhat, 1995 ] <author> R. R. Bhat. </author> <title> An Agent Approach to Case Adaptation. </title> <type> Fabel-Report 26, </type> <institution> GMD, Sankt Augustin, </institution> <month> January </month> <year> 1995. </year> <note> 90 Fabel-Report No. 35 91 </note>
Reference-contexts: The knowledge base consists of the elements of this system and functional and spatial relations between the components. Agents are software objects encoded with domain knowledge, capable of reactive behaviour <ref> [ Bhat, 1995 ] </ref> , and possess properties of observation, default actions and a simple negotiation mechanism. <p> Given this structuring the problem can be formulated as a spatial assignment problem. In the domain of building design an agent approach seems to be very natural and promising. Our work is strongly influenced by Ludger Hovestadt and other related work of FABEL, especially <ref> [ Bhat, 1995 ] </ref> and [ Morgenstern, 1993 ] . The next section will point out the knowledge needed and its representation. We then outline the concepts, structures and functions used in ANOPLA.
Reference: [ Borner and Janetzko, 1995 ] <author> K. Borner and D. Janetzko. </author> <title> System architecture for computer-aided building engineering. </title> <booktitle> In 6th International Conference on Computing in Civil and Building Engineering, </booktitle> <address> Berlin, Germany, </address> <year> 1995. </year>
Reference-contexts: Similarity of complex case representations is determined in terms of adaptability. The approach has been shown to be integrable into a highly interactive, adaptive system architecture that allows for incremental knowledge acquisition and user support (see <ref> [ Borner and Janetzko, 1995; Borner, 1995b ] </ref> ). It is especially suited to tasks where explicit rules about the derivation of design solutions are not available but huge amounts of CAD-data are electronically available.
Reference: [ Borner et al., 1993 ] <editor> K. Borner, R. Faauer, and S. Seewald. Term- und Baumreprasen-tationen raumlichen Wissens in der Bauarchitektur. In V. Kamp, M. Kopitsch, M. M. Richter, M. Schick, and A. Schoeller, editors, Workshop Raumliche Problemstellungen in technischen Domanen auf der KI-93, LKI-M-93/2. </editor> <address> Universitat Hamburg, </address> <year> 1993. </year>
Reference-contexts: Part IV Construction Modules 57 Chapter 7 Analogical Layout Design (SYN) Katy Borner and Roland Faauer 7.1 The Idea The module Syn (for Synthesis) partially implements the approach to Conceptual Analogy (CA) that was proposed in [ Borner, 1995a ] based on previous work reported in <ref> [ Borner et al., 1993; Borner, 1994a; Borner, 1994b ] </ref> . CA is an approach that integrates conceptualization based on prior experiences, i.e., case memory organization, and analogical reasoning. It was developed to support the design of geometrical layouts, a subtask of building engineering.
Reference: [ Borner, 1994a ] <author> K. Borner. </author> <title> Structural similarity as guidance in case-based design. </title> <editor> In S. Wess, K.-D. Althoff, and M. M. Richter, editors, </editor> <booktitle> Topics in Case-Based Reasoning: Selected Papers from the First European Workshop on Case-Based Reasoning (EWCBR-93), volume 837 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 197-208. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Instead of comparing all possible subparts a future version of our algorithm will match those abstract Fabel-Report No. 35 45 elements. The used knowledge will be similar to part of the knowledge used in <ref> [ Borner, 1994a ] </ref> . The difference is that in our approach the content of such abstract chains is not restricted. Chapter 5 Adaptation by Active Autonomous Ob jects (AAAO) Parivash Adami 5.1 The Idea In Architecture, many constraints and rules deal with a restricted neighbourhood of building elements only. <p> Part IV Construction Modules 57 Chapter 7 Analogical Layout Design (SYN) Katy Borner and Roland Faauer 7.1 The Idea The module Syn (for Synthesis) partially implements the approach to Conceptual Analogy (CA) that was proposed in [ Borner, 1995a ] based on previous work reported in <ref> [ Borner et al., 1993; Borner, 1994a; Borner, 1994b ] </ref> . CA is an approach that integrates conceptualization based on prior experiences, i.e., case memory organization, and analogical reasoning. It was developed to support the design of geometrical layouts, a subtask of building engineering.
Reference: [ Borner, 1994b ] <author> K. Borner. </author> <title> Towards formalizations in case-based reasoning for synthesis. </title> <editor> In D. W. Aha, editor, </editor> <booktitle> AAAI-94 Workshop on Case-Based Reasoning, </booktitle> <pages> pages 177-181, </pages> <year> 1994. </year>
Reference-contexts: Part IV Construction Modules 57 Chapter 7 Analogical Layout Design (SYN) Katy Borner and Roland Faauer 7.1 The Idea The module Syn (for Synthesis) partially implements the approach to Conceptual Analogy (CA) that was proposed in [ Borner, 1995a ] based on previous work reported in <ref> [ Borner et al., 1993; Borner, 1994a; Borner, 1994b ] </ref> . CA is an approach that integrates conceptualization based on prior experiences, i.e., case memory organization, and analogical reasoning. It was developed to support the design of geometrical layouts, a subtask of building engineering.
Reference: [ Borner, 1995a ] <author> K. Borner. </author> <title> Conceptual analogy. </title> <editor> In D. W. Aha and A. Ram, editors, </editor> <booktitle> accepted at AAAI 1995 Fall Symposium Series: Adaptation of Knowledge for Reuse, </booktitle> <year> 1995. </year>
Reference-contexts: Part IV Construction Modules 57 Chapter 7 Analogical Layout Design (SYN) Katy Borner and Roland Faauer 7.1 The Idea The module Syn (for Synthesis) partially implements the approach to Conceptual Analogy (CA) that was proposed in <ref> [ Borner, 1995a ] </ref> based on previous work reported in [ Borner et al., 1993; Borner, 1994a; Borner, 1994b ] . CA is an approach that integrates conceptualization based on prior experiences, i.e., case memory organization, and analogical reasoning. <p> In such a way, the design prototype represents knowledge generalized from a set of similar design cases and form a class from which individual ones can be inferred. 7.3 Approach This section does not present the general approach of conceptual analogy that was proposed in <ref> [ Borner, 1995a ] </ref> . Instead of this, it explains the part of CA implemented in Syn.
Reference: [ Borner, 1995b ] <author> K. Borner. </author> <title> Interactive, adaptive, </title> <booktitle> computer aided design. In accepted at International Conference CAAD Futures 95, </booktitle> <year> 1995. </year>
Reference-contexts: Similarity of complex case representations is determined in terms of adaptability. The approach has been shown to be integrable into a highly interactive, adaptive system architecture that allows for incremental knowledge acquisition and user support (see <ref> [ Borner and Janetzko, 1995; Borner, 1995b ] </ref> ). It is especially suited to tasks where explicit rules about the derivation of design solutions are not available but huge amounts of CAD-data are electronically available.
Reference: [ Bron and Kerbosch, 1973 ] <author> C. Bron and J. Kerbosch. </author> <title> Finding all cliques in an undirected graph. </title> <journal> Communications of the ACM, </journal> <volume> 16 </volume> <pages> 575-577, </pages> <year> 1973. </year>
Reference-contexts: The maximum clique in this combination graph and the corresponding maximum subgraphs are marked in black. 4.4.1.1 A common maximum clique algorithm The algorithm of <ref> [ Bron and Kerbosch, 1973 ] </ref> (for further use called "max-clique BK ") finds all cliques in a graph by enumerating and extending all complete subgraphs.
Reference: [ Brown and Chandrasekaran, 1989 ] <author> D. C. Brown and B. Chandrasekaran. </author> <title> Design Problem Solving: Knowledge Structures and Control Strategies. </title> <booktitle> Research Notes in Artificial Intelligence. </booktitle> <publisher> Pitman, </publisher> <address> London, </address> <year> 1989. </year>
Reference-contexts: If tasks have to be carried out that can be described with respect to * the objects involved, * the requirements to be obeyed, and * the problem solving rationale to be pursued; these tasks may be described as routine design tasks <ref> [ Brown and Chandrasekaran, 1989 ] </ref> . Even in very complex domains, e.g., building design, there are some sub-tasks that qualify as routine design.
Reference: [ Chandrasekaran et al., 1992 ] <author> B. Chandrasekaran, T. R. Johnson, and J. W. Smith. </author> <title> Task-structure analysis for modeling domain knowledge and problem solving for knowledge system construction. Paper presented on a Workshop on Problem-Solving Methods, </title> <publisher> Stanford, </publisher> <month> July 9-11, </month> <year> 1992. </year>
Reference-contexts: Tasks play an important role in research on expert-systems, knowledge acquisition, man-machine interaction, distributed artificial intelligence, work analysis, etc.. In general, tasks are considered as something to be achieved, i.e. goals that require problem solving activities <ref> [ Chandrasekaran et al., 1992 ] </ref> . Tasks differ with respect to granularity and abstraction. Subsequently, we apply the task approach that is dedicated toward modeling problem-solving activities to task-knowledge imbalances in Cbr as applied to building design 2 .
Reference: [ Coulon et al., 1993 ] <author> C.-H. Coulon, F. van Harmelen, W. Karbach, and A. Vo. </author> <title> Controlling generate & test in any time. </title> <booktitle> In Proceedings of GWAI-92, volume 671 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 304-306, </pages> <address> Berlin, 1993. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: largest possible clique depends on the minimum of the number of relations of the case and the query for each type of relation occurring in the query: X t2T ypesofquerymin (#relations typet (query); #relations typet (case)) Reflective knowledge: The algorithm estimates its own runtime till completion before and during running <ref> [ Coulon et al., 1993 ] </ref> . If the runtime is higher than a threshold it asks the user for a strategy in order to reduce the problem. <p> This knowledge will be acquired and added as described in <ref> [ Coulon et al., 1993 ] </ref> . For some of the comparisons the measured runtime was exponentially higher than expected. In these cases the query and the case had chains consisting of identical links.
Reference: [ Coulon, 1995 ] <author> C.-H. Coulon. </author> <title> Automatic Indexing, Retrieval and Reuse of Topologies in Complex Designs. </title> <note> In accepted at the ISCCSE-95, </note> <year> 1995. </year>
Reference-contexts: Figure 4.8 shows an example. As mentioned before we decided to match the topological relations instead of the objects themselves for reasons described in <ref> [ Coulon, 1995 ] </ref> . Therefore the nodes of the combination graph shown in figure 4.8 represent all matchings between the relations of the source graph of equal type. The source graphs (f) and (g) contain objects of type a and b connected by directed relations.
Reference: [ Domeshek and Kolodner, 1992 ] <author> E. A. Domeshek and J. L. Kolodner. </author> <title> A case-based design aid for architecture. </title> <editor> In J. S. Gero, editor, </editor> <booktitle> Artificial Intelligence in Design '92, </booktitle> <pages> pages 497-516, </pages> <address> Pittsburgh, </address> <year> 1992. </year> <title> AID, </title> <publisher> Kluwer Academic Publishers, Dordrecht. </publisher>
Reference-contexts: That is, no particular method is applied. Applying a task-oriented approach to knowledge acquisition, cases are specified as instances of tasks. They provide episodic or specific knowledge about state transitions. Concerning the grainsize, in an application domain like architecture complete buildings have been taken as cases <ref> [ Goel, 1989; Domeshek and Kolodner, 1992; Hinrichs, 1992 ] </ref> . Again, the task-structure may be employed to achieve units which are better suited to problem solving.
Reference: [ Genesereth, 1984 ] <author> M. Genesereth. </author> <title> The use of design descriptions in automated diagnosis. </title> <journal> Artificial Intelligence, </journal> <volume> 24 </volume> <pages> 411-436, </pages> <year> 1984. </year> <note> 92 BIBLIOGRAPHY </note>
Reference-contexts: To test accomplishments of design tasks, artifacts in design problem solving are scrutinized whether or not they meet a set of conditions <ref> [ Genesereth, 1984 ] </ref> , [ Silverman and Wenig, 1993 ] . In real-world domains, like building design, there is seldom an explicit rationale to prove the correctness and completeness of solutions automatically. Hence, the assessment of design tasks is performed predominantly by human experts.
Reference: [ Gero, 1990 ] <author> J. S. Gero. </author> <title> Design prototypes: A knowledge representation schema for design. </title> <journal> AI Magazine, </journal> <volume> 11(4) </volume> <pages> 26-36, </pages> <year> 1990. </year>
Reference-contexts: This working style points to case based reasoning (Cbr) as the predominant problem solving method [ Kolodner, 1993; Wess et al., 1994; Aamodt and Plaza, 1994 ] . Additionally, architects form concrete individual design experiences into generalized concepts. Later on, these general concepts, named "design prototypes"by <ref> [ Gero, 1990 ] </ref> , are used to guide the design process. Another characteristic of geometric layout design refers to the importance of relations between objects rather than the attribute-values of single objects. Retrieval and adaptation of prior CAD-layouts mainly proceeds via the spatial relations of their constituents.
Reference: [ Goel, 1989 ] <author> A. K. Goel. </author> <title> Integration of case-based reasoning and model-based reasoning for adaptive design problem solving. </title> <type> PhD thesis, </type> <institution> Ohio State University, Columbus, Ohio, </institution> <year> 1989. </year>
Reference-contexts: That is, no particular method is applied. Applying a task-oriented approach to knowledge acquisition, cases are specified as instances of tasks. They provide episodic or specific knowledge about state transitions. Concerning the grainsize, in an application domain like architecture complete buildings have been taken as cases <ref> [ Goel, 1989; Domeshek and Kolodner, 1992; Hinrichs, 1992 ] </ref> . Again, the task-structure may be employed to achieve units which are better suited to problem solving.
Reference: [ Haller, 1974 ] <author> F. </author> <type> Haller. </type> <institution> MIDI - ein offenes system fur mehrgeschossige bauten mit inte-grierter medieninstallation. USM bausysteme haller, Munsingen, </institution> <year> 1974. </year>
Reference-contexts: Several tools have been developed to handle this complex and not well understood geometrical domain. The tools are listet in a chronological order: Construction kits, among which we chose the MIDI system <ref> [ Haller, 1974 ] </ref> for medium sized industrial buildings like schools and laboratories (see Fig. 1.1). <p> The architect can also fix pipes at definite positions. Resizing and movement of pipes during the problem solving process will be visualized. The knowledge provided by ARMILLA together with the component based building system MIDI <ref> [ Haller, 1974 ] </ref> -, heuristics acquired from our expert, and the representation 1 ANOPLA is an acronym of the german term ANOrdnungsPLAnung (arrangement planning). 2 The bounding boxes for pipes are placed on grid lines. 69 70 8.2 KNOWLEDGE AND ITS REPRESENTATION scheme A4 ( [ Hovestadt, 1993a ] and
Reference: [ Haller, 1985 ] <author> F. Haller. ARMILLA - ein installationsmodell. IFIB, </author> <year> 1985. </year>
Reference-contexts: The kits come with a catalogue of beams and columns suitable for installation according to the graphic rule system ARMILLA. 3 4 1.1 INDUSTRIAL BUILDING DESIGN ARMILLA <ref> [ Haller, 1985; Hovestadt, 1993c ] </ref> is used for the systematic and conflict free layout of various subsystems in a building, such systems being water, air, etc.. <p> Thus we are forced to concentrate particularly our implementation work on a meaningful section of the design domain for each new DOM prototype system. We decided to focus on the design of heating, ventilation and air conditioning (HVAC) systems, on ARMILLA <ref> [ Haller, 1985 ] </ref> as a Fabel-Report No. 35 25 methodology for the spatial organisation of HVAC systems and on DANCER [ Hovestadt, 1993a ] as a first example for an external layout platform. <p> Since functional relations can have many spatial realisations, a case provides an actual example of desired spatial relation between components. A particular domain, that of conflict free layout of supply air pipes is chosen as the problem domain using the knowledge provided by the ARMILLA system <ref> [ Haller, 1985 ] </ref> . The knowledge base consists of the elements of this system and functional and spatial relations between the components. <p> In this design step the horizontal co-ordination of the various subsystems takes place. Such subsystems are typically supply-air, return-air, water-supply, and water-return systems etc. The spatial units for this kind of co-ordination are floors or part of floors. ANOPLA 1 uses domain knowledge provided by the ARMILLA system <ref> [ Haller, 1985 ] </ref> to solve this design problem. ARMILLA provides us with generic templates, rules, and heuristics for installations. More than that ARMILLA forces a particular model of usage. This model envisages an increasing resolution of the design solution; this is achieved by way of stepwise refinement. <p> Such a strategic plan connects the vertical pipes of the various subsystems with the corresponding areas of connection for the inlets and outlets. The connection network satisfies the special requirements of the different subsystems and has typical access patterns (cf. <ref> [ Haller, 1985, pp 20 ] </ref> ). Case adaptation is a second task ANOPLA supports. A complex case adaptation is necessary when the pipes in the retrieved case do not fit the installation templates derived from the actual service plenum. <p> Twig lines connect pipes to inlets and outlets. The number of layers and number of lines depend on the size of the planning grid and the type of construction. The generic structure of a grid element is shown in Fig. 8.3 (cf. <ref> [ Haller, 1985, p 17 ] </ref> ). black lines mark the grid, the broad areas near the grid are spaces for branches. The ARMILLA structure of the service plenum is also used to define definite axes for pipes. <p> Thus a finite number of patterns exists; we call such patterns templates. Figure 8.4 shows three generic templates; for a detailed motivation and a more complete overview please refer to <ref> [ Haller, 1985, pp 22 ] </ref> . Fabel-Report No. 35 73 diameters. Only templates for the layers O1 and O2 are shown. A horizontal flip generates the corresponding templates for U1 and U2. The generic ARMILLA templates have to be adapted according to the construction system.
Reference: [ Haller, 1988 ] <author> F. Haller. bauen und forschen. Fritz Haller, Solothurn, </author> <year> 1988. </year> <note> Ausstellung des Kunstvereins Solothurn. </note>
Reference-contexts: Fig. 8.7) shows a strategic plan that could be an input for ANOPLA. This intermediate design contains bounding boxes for pipes of the subsystems supply-air, water-return, and water-supply. Note that some of the pipes are overlaid by others. This strategic plan is taken out of <ref> [ Haller, 1988 ] </ref> . Unfortunately we cannot show the intermediate steps with moving and resizing pipes. In Fig. 8.8 a solution is shown. This solution is correct with respect to the generic ARMILLA templates. 8.5 Implementation The implementation of ANOPLA is currently under development.
Reference: [ Hinrichs, 1992 ] <author> T. R. Hinrichs. </author> <title> Problem solving in open worlds: a case study in design. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1992. </year>
Reference-contexts: That is, no particular method is applied. Applying a task-oriented approach to knowledge acquisition, cases are specified as instances of tasks. They provide episodic or specific knowledge about state transitions. Concerning the grainsize, in an application domain like architecture complete buildings have been taken as cases <ref> [ Goel, 1989; Domeshek and Kolodner, 1992; Hinrichs, 1992 ] </ref> . Again, the task-structure may be employed to achieve units which are better suited to problem solving.
Reference: [ Hovestadt and Schmidt-Belz, 1994 ] <author> L. Hovestadt and B. Schmidt-Belz. </author> <title> The domain of FABEL: building design. </title> <editor> In A. Vo, editor, </editor> <booktitle> Similarity concepts and retrieval methods, </booktitle> <pages> pages 6-11. </pages> <address> GMD, Sankt Augustin, </address> <year> 1994. </year>
Reference-contexts: For more details see also <ref> [ Hovestadt and Schmidt-Belz, 1994 ] </ref> and the first section of chapter 2. DANCER is a special design editor [ Hovestadt, 1993b ] , which allows the inspection and graphic manipulation of A4 objects 1 graphically.
Reference: [ Hovestadt, 1992 ] <author> L. Hovestadt. A4 - digitales bauen: </author> <title> Ein Modell fur die weitgehende Computerunterstutzung von Entwurf, Konstruktion und Betrieb von Gebauden. In CAD im Architekturburo: </title> <booktitle> ACS-Kompendium `92, </booktitle> <pages> pages 97-111, </pages> <address> Wiesbaden, 1992. Ar-chitektenkammer Hessen, Wiesbaden. </address>
Reference-contexts: A4 represents any object occurring in architectural design by its geometrical attributes and its type attributes <ref> [ Hovestadt, 1992; Hovestadt, 1993a; Hovestadt, 1993b ] </ref> . The former represent the placement and extension of objects.
Reference: [ Hovestadt, 1993a ] <author> L. Hovestadt. </author> <title> A4 Digital Building Extensive Computer Support for the Design, </title> <booktitle> Construction, and Management of Buildings. In CAAD Futures '93, Proceedings of the Fifth International Conference on Computer-Aided Architectural Design Futures, </booktitle> <pages> pages 405-422, </pages> <address> Pittsburgh, June 1993. </address> <publisher> North-Holland, Amsterdam. </publisher>
Reference-contexts: A4 represents any object occurring in architectural design by its geometrical attributes and its type attributes <ref> [ Hovestadt, 1992; Hovestadt, 1993a; Hovestadt, 1993b ] </ref> . The former represent the placement and extension of objects. <p> In addition, we describe Check-L, which is an enlargement of CheckUp that uses CAD-based accomplishments of design activities to learn the knowledge required by CheckUp. 15 16 2.2 KNOWLEDGE AND ITS REPRESENTATION 2.2 Knowledge and its Representation 2.2.1 TheKnowledgeRepresentationSchemaA4 In what follows, we make use of A4 <ref> [ Hovestadt, 1993a ] </ref> , i.e., a representation scheme developed to support computer-based building design. Seen from the viewpoint of the application domain, A4 allows to represent objects used in building design on a graphical level and on a code level. <p> We decided to focus on the design of heating, ventilation and air conditioning (HVAC) systems, on ARMILLA [ Haller, 1985 ] as a Fabel-Report No. 35 25 methodology for the spatial organisation of HVAC systems and on DANCER <ref> [ Hovestadt, 1993a ] </ref> as a first example for an external layout platform. The figure 3.1 showing the DOM system 1 environment is given in order to clarify the relations between DOM and other tools within the FABEL framework. <p> based building system MIDI [ Haller, 1974 ] -, heuristics acquired from our expert, and the representation 1 ANOPLA is an acronym of the german term ANOrdnungsPLAnung (arrangement planning). 2 The bounding boxes for pipes are placed on grid lines. 69 70 8.2 KNOWLEDGE AND ITS REPRESENTATION scheme A4 ( <ref> [ Hovestadt, 1993a ] </ref> and [ Hovestadt, 1993c ] ) for design objects are prerequisites for structuring the problem of spatial arrangement of pipes. Given this structuring the problem can be formulated as a spatial assignment problem.
Reference: [ Hovestadt, 1993b ] <author> L. Hovestadt. A4 - digitales bauen: </author> <title> Ein Modell fur die weitgehende Computerunterstutzung von Entwurf, Konstruktion und Betrieb von Gebauden. </title> <type> PhD thesis, </type> <institution> Institut fur industrielle Bauproduktion der Universitat Karlsruhe, </institution> <year> 1993. </year>
Reference-contexts: A4 represents any object occurring in architectural design by its geometrical attributes and its type attributes <ref> [ Hovestadt, 1992; Hovestadt, 1993a; Hovestadt, 1993b ] </ref> . The former represent the placement and extension of objects. <p> For more details see also [ Hovestadt and Schmidt-Belz, 1994 ] and the first section of chapter 2. DANCER is a special design editor <ref> [ Hovestadt, 1993b ] </ref> , which allows the inspection and graphic manipulation of A4 objects 1 graphically. Figure 1.2 shows a projection of the Murten project on the climate system represented on the x and y axes.
Reference: [ Hovestadt, 1993c ] <author> L. Hovestadt. </author> <title> Armilla4 An Integrated Building Model based on Visualisation. </title> <booktitle> In Advanced Technologies architecture- planning civil engineering, Fourth EuropIA International Conference on the application of Artificial Intelligence, Robotics and Image Processing to Architecture, Building Engineering, Urban Design and Urban Planning, </booktitle> <pages> pages 243-250, </pages> <address> Delft, The Netherlands, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The kits come with a catalogue of beams and columns suitable for installation according to the graphic rule system ARMILLA. 3 4 1.1 INDUSTRIAL BUILDING DESIGN ARMILLA <ref> [ Haller, 1985; Hovestadt, 1993c ] </ref> is used for the systematic and conflict free layout of various subsystems in a building, such systems being water, air, etc.. <p> The figure 3.1 showing the DOM system 1 environment is given in order to clarify the relations between DOM and other tools within the FABEL framework. This figure illustrates that DOM is one of several tools which interact on the one hand with the A4 data world <ref> [ Hovestadt, 1993c ] </ref> and on the other hand with the architects and engineers through a user interface which is common to all FABEL modules. <p> Haller, 1974 ] -, heuristics acquired from our expert, and the representation 1 ANOPLA is an acronym of the german term ANOrdnungsPLAnung (arrangement planning). 2 The bounding boxes for pipes are placed on grid lines. 69 70 8.2 KNOWLEDGE AND ITS REPRESENTATION scheme A4 ( [ Hovestadt, 1993a ] and <ref> [ Hovestadt, 1993c ] </ref> ) for design objects are prerequisites for structuring the problem of spatial arrangement of pipes. Given this structuring the problem can be formulated as a spatial assignment problem. In the domain of building design an agent approach seems to be very natural and promising.
Reference: [ Hovestadt, 1995 ] <author> L. Hovestadt. PM5 - Plannungsmodul. </author> <note> Fabel-Report to appear, </note> <institution> GMD, Sankt Augustin, </institution> <year> 1995. </year>
Reference-contexts: These task objects, their place in a planning hierarchy and their interelation are specifed as a directed graph by the planning guide PM5 <ref> [ Hovestadt, 1995 ] </ref> . For each of the task objects for the domain supply air, there exists a list of subgoals, heuristics for their ordering and rules for achieving each subgoal.
Reference: [ Hua et al., 1993 ] <author> K. Hua, I. Smith, and B. Faltings. </author> <title> Exploring case-based design: CADRE. </title> <booktitle> Artificial Intelligence for Engineering Design, Analysis and Manufacturing, </booktitle> <volume> 7(2) </volume> <pages> 135-144, </pages> <year> 1993. </year>
Reference: [ Janetzko and Borner, 1993 ] <author> D. Janetzko and K. Borner. </author> <note> Task-methods-knowledge interdependencies in CBR systems. Fabel-Report 9, </note> <institution> GMD, Sankt Augustin, </institution> <month> March </month> <year> 1993. </year> <note> Fabel-Report No. 35 93 </note>
Reference-contexts: Storage, retrieval and adaptation of prior layouts require geometrical and topological aspects to be taken into account. This present chapter is organized as follows: Firstly, we provide an overview of the particular school of industrial building design we are using to motivate and evaluate our work. Borrowed from <ref> [ Janetzko and Borner, 1993; Janetzko et al., 1994a ] </ref> , we introduce the task-structure that has been developed to organize this complex domain and to offer task-oriented support. In particular, we discuss how the task-structure may be exploited for knowledge acquisition and system design. <p> Whenever we refer to problem solving activities like design, planning, or testing we use the concept of task <ref> [ Janetzko and Borner, 1993 ] </ref> . The 4-tuple of the numerical entries x; dx; y, and dy of a reduct, is an area. By using the numerical components of areas we are able to define predicates that represent relationships of placement between them, e.g., cover, overlap (cf. Fig. 2.3). <p> This is what we call the scope of application. It relies on the task decomposition <ref> [ Janetzko and Borner, 1993; Janetzko et al., 1994a ] </ref> and has already been mentioned and graphically illustrated in chapter 1, Tab. 1.4 to Tab. 1.6.
Reference: [ Janetzko et al., 1994a ] <author> D. Janetzko, K. Borner, O. Jaschke, and G. Strube. </author> <title> Task-oriented Knowledge Acquisition and Reasoning for Design Support Systems. </title> <booktitle> In Proceedings of the First European Conference on Cognitive Science in Industry, </booktitle> <pages> pages 153-184, </pages> <year> 1994. </year>
Reference-contexts: Storage, retrieval and adaptation of prior layouts require geometrical and topological aspects to be taken into account. This present chapter is organized as follows: Firstly, we provide an overview of the particular school of industrial building design we are using to motivate and evaluate our work. Borrowed from <ref> [ Janetzko and Borner, 1993; Janetzko et al., 1994a ] </ref> , we introduce the task-structure that has been developed to organize this complex domain and to offer task-oriented support. In particular, we discuss how the task-structure may be exploited for knowledge acquisition and system design. <p> Fabel-Report No. 35 5 a system. In Fabel, results of knowledge engineering promote a task-oriented user support. Based on this decision, we developed a methodology for task-oriented knowledge acquisition and system design <ref> [ Janetzko et al., 1994a ] </ref> . Tasks play an important role in research on expert-systems, knowledge acquisition, man-machine interaction, distributed artificial intelligence, work analysis, etc.. In general, tasks are considered as something to be achieved, i.e. goals that require problem solving activities [ Chandrasekaran et al., 1992 ] . <p> CA integrates and automates memory organization and analogical reasoning on the basis of attribute-value representations of prior CAD layouts which are electronically accessible. As for memory organization, CA acquires cases in a task-oriented way <ref> [ Janetzko et al., 1994a ] </ref> . Thus, the task-structure determines the grainsize of cases (CAD-layouts). Cases are represented by the geometrical attributes of their constituent objects (e.g., accesses, pipes etc.). Every case is assumed to represent implicitly some the rules inherent in a CAD-layout. <p> Dividing a given area into subareas according to some criteria (e.g., minimal and maximal size or number of the subareas) is an example of a routine design task. To find out which tasks are of this type a task analysis may be conducted <ref> [ Janetzko et al., 1994a ] </ref> . A task-analysis does not only help identifying which tasks are routine design and which are not. In addition it provides guidelines for developing operators that may be applied to accomplish routine design tasks. <p> This is what we call the scope of application. It relies on the task decomposition <ref> [ Janetzko and Borner, 1993; Janetzko et al., 1994a ] </ref> and has already been mentioned and graphically illustrated in chapter 1, Tab. 1.4 to Tab. 1.6. <p> As for episodic knowledge, three kinds of sets of A4 objects may be distinguished: (i) projects which comprise the set of all A4 objects in a building, (ii) cases according to the task dependency analysis <ref> [ Janetzko et al., 1994a ] </ref> , which may be 'cut' from projects automatically, and (iii) cases that are sets of A4 objects arbitrarily defined by the user. Considering the number of objects in a project (usually some ten thousands), projects as such are clearly unsuitable for Cbr.
Reference: [ Janetzko et al., 1994b ] <author> D. Janetzko, O. Jaschke, and K. Borner. </author> <title> Learning and Applying Conditions for Testing Realizations of Design Tasks. </title> <editor> In C. Globig and K.-D. Althoff, editors, </editor> <booktitle> Beitrage zum 7. Fachgruppentreffen Maschinelles Lernen, </booktitle> <address> Kaiserslautern, </address> <month> August </month> <year> 1994, </year> <pages> pages 129-135. </pages> <institution> Zentrum fur Lernende Systeme und Anwendungen, Fachbereich Informatik, </institution> <year> 1994. </year>
Reference-contexts: For example, 95 % of air-condition supply zones have a relation to air-condition connection zones, which overlap them in x- and y-dimension and touch them in z-dimension. A similar approach has been introduced by <ref> [ Janetzko et al., 1994b ] </ref> . Topology consists of more than binary relations. In order to retrieve similar situations the context of relations must be considered. Fig. 4.5 gives an example.
Reference: [ Jaschke and Janetzko, 1994a ] <author> O. Jaschke and D. Janetzko. </author> <title> Die Verwendung von Opera-toren beim Routine-Design. </title> <type> Fabel-Report 20, </type> <institution> GMD, Sankt Augustin, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: j m), with w ij being defined by w ij := ( x + c fl (j 1); c ; y + c fl (k i); c ): 9.5 Implementation An elaborated documentation of the rationale of employing operators used in routine design and its implementation has been published elsewhere <ref> [ Jaschke and Janetzko, 1994a ] </ref> . Part V Comparison 81 Chapter 10 Comparison of the Modules Katy Borner and Gerhard Strube The chapters in this volume testify to the variety of support Fabel now supplies for design.
Reference: [ Jaschke and Janetzko, 1994b ] <author> O. Jaschke and D. Janetzko. </author> <title> On Testing in Design. </title> <booktitle> In Proceedings of the First European Conference on Cognitive Science in Industry, </booktitle> <pages> pages 207-216, </pages> <year> 1994. </year>
Reference-contexts: Second, we will delineate the approach from a more general perspective and delineate how the knowledge is brought to bear in assessment. Third, we provide examples of how design tasks are tested by CheckUp, which is a system developed to that purpose <ref> [ Jaschke and Janetzko, 1994b ] </ref> .
Reference: [ Karbach and Vo, 1992 ] <author> W. Karbach and A. Vo. </author> <title> An inference structure for assignment problems. </title> <editor> In Bauer and W. Karbach, editors, </editor> <booktitle> Interpretation models for KADS Proc. 2nd KADS User Meeting, volume 212 of GMD-Studien, </booktitle> <pages> pages 323-332. </pages> <address> GMD, Sankt Augustin, </address> <year> 1992. </year>
Reference-contexts: The complexity of these problems is well known; in general such problems are NP-complete. There are a lot of `classical' approaches and problem solving methods. An inference structure is given in <ref> [ Karbach and Vo, 1992 ] </ref> . Simulated annealing as a problem solving method could be a second type of approach [ Aarts and Korst, 1989 ] ; metaphorically spoken one can think of shaking the pipes from the grid lines into correct places.
Reference: [ Keene, 1989 ] <author> S. Keene. </author> <title> Object-Oriented Programming in Common Lisp. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The next step would be performed as exemplified in figure c). 5.5 Implementation The AAAO model is implemented in Common Lisp [ Steele, 1984 ] Steele:84) and its object oriented extension CLOS (Common Lisp Object System, <ref> [ Keene, 1989 ] </ref> ). Keene:89). The AAAO model is implemented in full detail for the adaptation of column positions on a floor to fit a certain use. The object oriented implementation, however, was designed to be extendable to other tasks in building design as well.
Reference: [ Kolodner, 1993 ] <author> J. L. Kolodner. </author> <title> Case-Based Reasoning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1993. </year>
Reference-contexts: Storing the new problem including its solution and updating the similarity relation can be seen as a kind of learning [ Aamodt, 1990 ] . Detailed introductions into Cbr may be found in <ref> [ Riesbeck and Schank, 1989; Kolodner, 1993 ] </ref> . Up until now, Cbr has been applied mainly to analytic tasks. Here, properties or symptoms and corresponding concepts or diagnoses are readily at hand. The former are represented by the problem, the latter constitute the solution to a case.
Reference: [ Lee and Hsu, 1992 ] <author> S.-Y. Lee and F.-J. Hsu. </author> <title> Spatial reasoning and similarity retrieval of images using 2D C-string knowledge representation. </title> <journal> Pattern Recognition, </journal> <volume> 25 </volume> <pages> 305-318, </pages> <year> 1992. </year>
Reference-contexts: The type of a relation is determined by the type of the involved objects and their 3-dimensional relation (Fig. 4.3). The six shown and their opposites. The symbolical representation is like the common representation used in the field of pattern recognition <ref> [ Lee and Hsu, 1992 ] </ref> . In order to use them to reconstruct the position of objects some of them are extended by the parameter 4d. A 3-dimensional example is shown in Fig. 4.4. Relations of connected objects are visualized by circles.
Reference: [ Luo et al., 1994 ] <author> Q. Y. Luo, P. G. Hendry, and J. T. Buchanan. </author> <title> Strategies for distributed constraint satisfaction problems. </title> <editor> In M. Klein, editor, </editor> <booktitle> Distributed artificial intelligence: papers from the Thirteenth International Workshop, </booktitle> <pages> pages 186-200, </pages> <address> Lake Quinalt, WA, July 1994. </address> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA. </address>
Reference-contexts: Our approach is different. We try to solve the problem of arrangement with a distributed-agent-based strategy including a decentralized control structure. Each pipe is controlled by one agent attempting to assign a legal position. Our decentralized control structure is comparable to distributed hill climbing with no backtracking (cf. <ref> [ Luo et al., 1994 ] </ref> ). The ANOPLA system will become one module (tool) in FABEL's next prototype. The use of ANOPLA should be naturally integrated into the architect's workflow.
Reference: [ McDermott, 1988 ] <author> J. McDermott. </author> <title> Preliminary steps toward a taxonomy of problem-solving methods. </title> <editor> In S. Marcus, editor, </editor> <booktitle> Automating Knowledge Acquisition for Expert Systems, </booktitle> <pages> pages 225 - 256. </pages> <publisher> Kluwer Academic, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: For example, using Cbr as a problem solving method decomposes the overall task of design into the subtasks storage, retrieval, and adaptation of design. In general, a number of methods may be used to tackle a task <ref> [ McDermott, 1988 ] </ref> . Which method is chosen and applied to the task hinges on criteria like availability of knowledge, computational costs, and reliability of the solution. A method which is applied at one level of a task-structure may also be applied at another level of the same task-structure.
Reference: [ Morgenstern, 1993 ] <author> K. Morgenstern. Anpassung im Bauentwurf mittels aktiver autono-mer Objekte. </author> <type> Master's thesis, </type> <institution> Universitat Bonn, </institution> <year> 1993. </year>
Reference-contexts: This led in a very natural way to a model of active autonomous objects, columns beeing the objects, that behave according to simple heuristics trying to perform a set of applicable constraints. The model has already been fully described in FABEL by <ref> [ Morgenstern, 1993 ] </ref> . We are currently implementing it and experimenting with different sets of constraints and heuristics. <p> Given this structuring the problem can be formulated as a spatial assignment problem. In the domain of building design an agent approach seems to be very natural and promising. Our work is strongly influenced by Ludger Hovestadt and other related work of FABEL, especially [ Bhat, 1995 ] and <ref> [ Morgenstern, 1993 ] </ref> . The next section will point out the knowledge needed and its representation. We then outline the concepts, structures and functions used in ANOPLA. A detailed example is given in section 8.4. 8.2 Knowledge and its Representation ANOPLA uses data and knowledge from different knowledge sources.
Reference: [ Navinchandra, 1991 ] <author> D. Navinchandra. </author> <title> Exploration and innovation in design: Towards a computational model. </title> <booktitle> Symbolic Computation Artificial Intelligence. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference: [ Oertel, 1994 ] <author> W. Oertel. FAENSY: </author> <title> Fabel development system. </title> <type> Fabel-Report 27, </type> <institution> GMD, Sankt Augustin, </institution> <month> December </month> <year> 1994. </year> <note> 94 BIBLIOGRAPHY </note>
Reference-contexts: This KE user interface is significantly different from DOM's end user interface. Fabel-Report No. 35 29 3.3.1 Current Status of the Implementation The first prototype of the DOM system is implemented in Allegro Common Lisp on the basis of the FABEL development system FAENSY <ref> [ Oertel, 1994 ] </ref> . The system in its current state of implementation runs on SUN workstations under UNIX.
Reference: [ Paulokat et al., 1992 ] <author> J. Paulokat, R. Prager, and S. </author> <title> We. </title> <editor> CAbPlan - fallbasierte Arbeitsplanung. In T. Messer and A. Winkelhofer, editors, </editor> <booktitle> 6. Workshop Planen und Konfigurieren, </booktitle> <pages> pages 169-176, </pages> <year> 1992. </year>
Reference: [ Riesbeck and Schank, 1989 ] <author> C. K. Riesbeck and R. C. Schank. </author> <title> Inside Case-Based Reasoning. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, </address> <year> 1989. </year>
Reference-contexts: Storing the new problem including its solution and updating the similarity relation can be seen as a kind of learning [ Aamodt, 1990 ] . Detailed introductions into Cbr may be found in <ref> [ Riesbeck and Schank, 1989; Kolodner, 1993 ] </ref> . Up until now, Cbr has been applied mainly to analytic tasks. Here, properties or symptoms and corresponding concepts or diagnoses are readily at hand. The former are represented by the problem, the latter constitute the solution to a case.
Reference: [ Russell and Zilberstein, 1991 ] <author> S. Russell and S. Zilberstein. </author> <title> Composing real-time systems. </title> <booktitle> In Proceedings of the 12th International Joint Conference on Artificial Intelligence, Sydney, Australia, </booktitle> <volume> volume 1, </volume> <pages> pages 212 - 217, </pages> <address> San Mateo, 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: very efficient, but has still an exponential complexity, it provides in addition several features in order for controlling the runtime: Anytime behaviour: The algorithm can be interrupted by the user at any time and the quality of the result is always better than or equal to the best earlier result <ref> [ Russell and Zilberstein, 1991 ] </ref> . Transparency: In order to help the user to decide if and at which moment he might interrupt the process, To p o visualizes three indicators during runtime: The progress indicator shows how much of the search space is already searched.
Reference: [ Schmidt-Belz et al., 1995 ] <author> B. Schmidt-Belz, W. Grather, E. Gro, J. Walther, W. Oertel, and L. Hovestadt. </author> <note> FABEL-IDEA 2, Intelligente Designunterstutzung fur Architekten, Version 2: Fallretrieval. Fabel-Report 30, </note> <institution> GMD, Sankt Augustin, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: It is front end connected to the design editor and navigator Dancer running on Next Cube via TCP/IP communication. A tk/tcl-based X11 user interface is provided by Fabel-Idea-prototype 2.1 <ref> [ Schmidt-Belz et al., 1995 ] </ref> . Whereas the overall system provides interfaces (see the Fig. 7.5 for the Fabel-Idea control panel), databases etc., Syn supplies the system with solutions for actual design problems.
Reference: [ Schmidt-Belz, 1995 ] <author> B. Schmidt-Belz. Szenarien. </author> <note> Fabel-Report to appear, </note> <institution> GMD, Sankt Augustin, </institution> <year> 1995. </year>
Reference-contexts: The architecture of the Fabel system <ref> [ Schmidt-Belz, 1995 ] </ref> allows these diverse approaches to coexist side by side in the same system, operating on the same data, and making themselves available to the user of Fabel by means of the same interface.
Reference: [ Silverman and Wenig, 1993 ] <author> B. G. Silverman and G. Wenig. </author> <title> Engineering expert critics for cooperative systems. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 8 </volume> <pages> 309-328, </pages> <year> 1993. </year>
Reference-contexts: To test accomplishments of design tasks, artifacts in design problem solving are scrutinized whether or not they meet a set of conditions [ Genesereth, 1984 ] , <ref> [ Silverman and Wenig, 1993 ] </ref> . In real-world domains, like building design, there is seldom an explicit rationale to prove the correctness and completeness of solutions automatically. Hence, the assessment of design tasks is performed predominantly by human experts.
Reference: [ Smolka et al., 1993 ] <author> G. Smolka, M. Henz, and J. Wurtz. </author> <title> Object-oriented concurrent constraint programming in oz. </title> <note> Research Report RR-93-16, DFKI, Saarbrucken, </note> <month> April </month> <year> 1993. </year>
Reference-contexts: This case would then be applied concurrently to all or only some of the zeb6 objects in the users focus by the focusing agent. 6.5 Implementation The language for implementation for agents is Oz <ref> [ Smolka et al., 1993 ] </ref> a concurrent, constraint programming language which combines ideas from logic, concurrent and object-oriented programming. The prototype is under development at the moment and is expected to be ready by the end of August 95. <p> This solution is correct with respect to the generic ARMILLA templates. 8.5 Implementation The implementation of ANOPLA is currently under development. For testing this approach the prototypical implementation will be done object orientedly in Common Lisp (CLOS); maybe we later change to OZ <ref> [ Smolka et al., 1993 ] </ref> .
Reference: [ Smyth and Keane, 1994 ] <author> B. Smyth and M. T. Keane. </author> <title> Retrieving adaptable cases: The role of adaptation knowledge in case retrieval. </title> <editor> In Wess et al. </editor> [ <year> 1994 </year> <month> ] , pages 209-220. </month>
Reference: [ Sprigg, 1987 ] <author> J. Sprigg. Shaker, </author> <title> Life, Work, and Art. Stewart, Tabori & Change, </title> <publisher> Inc., </publisher> <address> New York, </address> <year> 1987. </year>
Reference: [ Steele, 1984 ] <author> G. Steele. </author> <title> Common Lisp. </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, </address> <year> 1984. </year>
Reference-contexts: Figure d) shows the new situation after all problem columns have moved one step. The new scores are indicated and we see that there are still violated constraints. The next step would be performed as exemplified in figure c). 5.5 Implementation The AAAO model is implemented in Common Lisp <ref> [ Steele, 1984 ] </ref> Steele:84) and its object oriented extension CLOS (Common Lisp Object System, [ Keene, 1989 ] ). Keene:89). The AAAO model is implemented in full detail for the adaptation of column positions on a floor to fit a certain use.
Reference: [ Strube et al., 1994 in press ] <author> G. Strube, D. Janetzko, and M. Knauff. </author> <title> Cooperative construction of experts knowledge: The case of knowledge engineering. </title> <editor> In P. B. Baltes and U. M. Staudinger, editors, </editor> <title> Interactive minds. Life-span perspectives on the social foundation of cognition. </title> <publisher> Academic Press, </publisher> <address> London, </address> <note> 1994 (in press). </note>
Reference-contexts: In so doing, the flat list of subtasks is replaced by a structure made up of tasks and enabling relations. The task-structure is constructed in collaboration between domain experts and knowledge engineers using knowledge elicitation techniques that range from observation and interviews to highly structured methods (cf. <ref> [ Strube et al., 1994 in press ] </ref> ). Once the task-structure is specified it provides a useful platform for incremental knowledge acquisition, problem solving, and system design. In knowledge acquisition, the elicitation of cases and rules may be advanced in a focused manner. <p> Note, that this approach is not atomistic in nature since conditions to be met may very well refer to quite a number of other subtasks. Techniques of manual knowledge acquisition have been employed to elicit the conditions to be met when attacking design tasks <ref> [ Strube et al., 1994 in press ] </ref> . However, the scope of this knowledge acquisition has been small, i.e., only conditions pertaining to a few design tasks could be specified in this way.
Reference: [ Vo et al., 1994 ] <author> A. Vo, C.-H. Coulon, W. Grather, B. Linowski, J. W. Schaaf, B. Bartsch-Sporl, K. Borner, E.-C. Tammer, H. Durschke, and M. Knauff. </author> <title> Retrieval of similar layouts about a very hybrid approach in FABEL. </title> <editor> In J. Gero and F. Sudweeks, editors, </editor> <booktitle> AI in Design'94, </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <pages> pages 625-640, </pages> <address> Dordrecht, </address> <year> 1994. </year>
Reference-contexts: We distinguish three main degrees of support involved in building design, browsing, assessment, and design. Corresponding to the reasoning methods applied, design may be further divided into adaptation and construction. Whereas an overview about modules supporting browsing has been provided in <ref> [ Vo, 1994; Vo et al., 1994 ] </ref> , this report presents and discusses modules supporting assessment, adaptation, and construction.
Reference: [ Vo, 1994 ] <author> A. Vo. </author> <title> Similarity concepts and retrieval methods. </title> <type> FABEL-Report 13, </type> <institution> GMD, Sankt Augustin, </institution> <year> 1994. </year>
Reference-contexts: We distinguish three main degrees of support involved in building design, browsing, assessment, and design. Corresponding to the reasoning methods applied, design may be further divided into adaptation and construction. Whereas an overview about modules supporting browsing has been provided in <ref> [ Vo, 1994; Vo et al., 1994 ] </ref> , this report presents and discusses modules supporting assessment, adaptation, and construction. <p> Retrieval of the case matching the current task is done using the methods for retrieval detailed earlier <ref> [ Vo, 1994 ] </ref> . The retrieved case matches the current task and shows an elaboration. <p> In fact, retrieval is covered by some of the modules that do adaptation. Some modules require the user to select a case by other means (e.g., manually, or by means of some other retrieval module; see the Fabel report on retrieval by similarity: <ref> [ Vo, 1994 ] </ref> ). (ii) Assessment in order to check designs, either the present one, or designs from the case base with respect to the present problem.
Reference: [ Wess et al., 1994 ] <editor> S. Wess, K.-D. Althoff, and M. M. Richter, editors. </editor> <booktitle> Topics in Case-Based Reasoning Selected Papers from the First European Workshop on Case-Based Reasoning (EWCBR-93), volume 837 of LNAI. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
References-found: 65

