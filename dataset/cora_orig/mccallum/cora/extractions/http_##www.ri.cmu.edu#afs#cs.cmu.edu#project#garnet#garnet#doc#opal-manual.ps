URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/garnet/garnet/doc/opal-manual.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/garnet/garnet/doc/
Root-URL: 
Title: Opal Reference Manual The Garnet Graphical Object System  
Author: Andrew Mickish Brad A. Myers David Kosbie Richard McDaniel Edward Pervin Matthew Goldberg 
Affiliation: Carnegie Mellon University  
Note: Copyright 1994  
Date: December 1994  
Abstract: This document is a reference manual for the graphical object system used by the Garnet project, which is called Opal. ``Opal'' stands for the Object Programming Aggregate Layer. Opal makes it very simple to create and manipulate graphical objects. In particular, Opal automatically handles object redrawing when properties of objects are changed. This research was sponsored by NCCOSC under Contract No. N66001-94-C-6037, Arpa Order No. B326. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of NCCOSC or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [Dannenberg 89] <author> Roger B. Dannenberg. </author> <title> Debugging Tools for Garnet; Reference Manual. The Garnet Toolkit Reference Manuals: Support for Highly-Interactive, Graphical User Interfaces in Lisp. </title> <institution> Carnegie Mellon University Computer Science Department Technical Report CMU-CS-89-196, </institution> <year> 1989, </year> <pages> pages 223-238. </pages>
Reference-contexts: Then the first window will not be erased and will be orphaned. The default is orphans-only. Another useful value is :opal. The other options are mainly useful when attempts to use these fail due to bugs. See also the function Fix-Up-Window in the Garnet Debugging Manual <ref> [Dannenberg 89] </ref>. opal:Convert-Coordinates win1 x1 y1 &optional win2 [Function] (declare (values x2 y2)) Section 10.6 Methods and Functions on Window objects Page 207 This function converts the coordinates x1 and y1 which are in window win1's coordinate system to be in win2's.
Reference: [Giuse 89] <author> Dario Giuse. KR: </author> <title> Constraint-Based Knowledge Representation. </title> <type> Technical Report CMU-CS-89-142, </type> <institution> Carnegie Mellon University Computer Science Department, </institution> <month> April, </month> <year> 1989. </year>
Reference-contexts: Opal will also work with any window manager on top of X/11, such as uwm, twm, awm, etc. Additionally, Opal provides support for color and gray-scale displays. Within the Garnet toolkit, Opal forms an intermediary layer. It uses facilities provided by the KR object and constraint system <ref> [Giuse 89] </ref>, and provides graphical objects that comprise the higher level gadgets. To use Opal, the programmer should be familiar with the ideas of objects and constraints presented in the Tour and Tutorial. Opal does not handle any input from the keyboard or mouse. <p> The coordinate system is one-to-one with the pixels on the screen (each pixel is one unit of the coordinate system). Garnet windows are discussed fully in section 10. The basics of object-oriented programming are beyond the scope of this manual. The objects in Opal use the KR object system <ref> [Giuse 89] </ref>, and therefore operate as a prototype-instance model. This means that each object can serve as a prototype (like a class) for any further instances; there is (almost) no distinction between classes and instances. Each graphic primitive in Opal is implemented as an object.
Reference: [Marchal 89] <author> Philippe Marchal and Andrew Mickish. </author> <title> Aggregadgets and AggreLists Reference Manual. The Garnet Toolkit Reference Manuals: Support for Highly-Interactive, Graphical User Interfaces in Lisp. </title> <institution> Carnegie Mellon University Computer Science Department Technical Report CMU-CS-89-196, </institution> <year> 1989, </year> <pages> pages 179-200. </pages>
Reference-contexts: If you use Aggregadgets instead, then you do get copies of all the components. Aggregadgets also provide a convenient syntax for defining the components. Therefore, it is often more appropriate to use Aggregadgets than aggregates. See the Aggregadgets manual <ref> [Marchal 89] </ref>. 8.1. Class Description (create-instance 'opal:Aggregate opal:view-object (:components NIL) (:hit-threshold 0) (:overlapping T)) The :components slot holds a list of the graphical objects that are components of the aggregate. This slot should not be set directly but rather changed using add-component and remove-component (section 8.2). <p> Aggregadgets also allow lists of items to be created by simply giving a single prototype for all the list elements, and a controlling value that the list iterates through. Aggregadgets are described in their own manual <ref> [Marchal 89] </ref>. Interactors are used to handle all input from the user. Interactor objects control input and perform actions on Opal graphical objects. There are high-level interactor objects to handle all the common forms of mouse and keyboard input. Interactors are described in their own manual [Myers 89].
Reference: [Mickish 89] <author> Andrew Mickish. </author> <title> Garnet Gadgets Reference Manual. The Garnet Toolkit Reference Manuals: Support for Highly-Interactive, Graphical User Interfaces in Lisp. </title> <institution> Carnegie Mellon University Computer Science Department Technical Report CMU-CS-89-196, </institution> <year> 1989, </year> <pages> pages 201-222. </pages>
Reference-contexts: These slots are useful if the arrow is closed (see Figure 6-3 below). If you want an arrowhead connected to a line, you might want to use the arrow-line object (with one arrowhead) or double-arrow-line (with arrow-heads optionally at either or both ends) supplied in the Garnet Gadget Set <ref> [Mickish 89] </ref>. 6.5. Arcs (create-instance 'opal:Arc opal:graphical-object (:maybe-constant '(:left :top :width :height :line-style :filling-style :draw-function :angle1 :angle2 :visible)) (:angle1 0) (:angle2 0)) The opal:arc class provides objects that are arcs, which are pieces of ovals.
Reference: [Myers 88] <author> Brad A. Myers. </author> <title> The Garnet User Interface Development Environment: A Proposal. </title> <type> Technical Report CMU-CS-88-153, </type> <institution> Carnegie Mellon University Computer Science Department, </institution> <month> September, </month> <year> 1988. </year>
Reference-contexts: 1. Introduction This document is the reference manual for the Opal graphical object system. Opal, which stands for the Object Programming Aggregate Layer, is being developed as part of the Garnet project <ref> [Myers 88] </ref>. The goal of Opal is to make it easy to create and edit graphical objects. To this end, Opal provides default values for all of the properties of objects, so simple objects can be drawn by setting only a few parameters.

References-found: 5

