URL: http://www.cis.upenn.edu/~switchware/papers/planet.ps
Refering-URL: http://www.cis.upenn.edu/~switchware/home.html
Root-URL: 
Title: PLANet: An Active Network Testbed  
Author: Michael Hicks, Jonathan T. Moore, D. Scott Alexander Carl A. Gunter, and Scott Nettles 
Date: 9 February 1998  
Affiliation: Department of Computer and Information Science University of Pennsylvania  
Abstract: Active networking addresses the issue of slow network evolution by making the network programmable and extensible. We believe that an understanding of the tradeoffs of this new approach can only be gained by experience in using this technology to build real networking systems. To this end, we have built a programming system, PLAN, that embodies several of the key design tradeoffs; in particular, PLAN supports both programmable packets and dynamic server extensions. We have used PLAN to build a non-trivial network, PLANet. PLANet is an active internetwork in which all packets are PLAN programs and in which new services can be dynamically added to the network. PLANet is implemented in user-space using a byte-code interpreted version of the Caml language running on on Linux PCs and currently supports 100 Mbps Ethernet and IP as link layers. On 300 MHz Pentium-II's over 100 Mbps Ethernet, PLANet routers can achieve 48 Mbps and can switch over 5000 packets per second. In addition to our basic performance measurements, we also present several experiments that demonstrate how PLANet's flexibility can support a variety of strategies for coping with contention. In general, PLANet permits us to explore the rather large design space of active networking. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Scott Alexander, Marianne Shaw, Scott M. Nettles, and Jonathan M. Smith. </author> <title> Active bridging. </title> <booktitle> In Proceedings, 1997 SIGCOMM Conference. ACM, </booktitle> <year> 1997. </year>
Reference-contexts: Our implementation was in part based on work described in <ref> [1] </ref>. Our choice of OCaml is motivated by several concerns. OCaml is a type-safe, garbage-collected language.
Reference: [2] <author> Albert Banchs, Wolfgang Effelsberg, Christian Tschudin, and Volker Turau. </author> <title> Multicasting multimedia streams with active networks. </title> <type> Technical Report 97-050, </type> <institution> International Computer Science Institute, </institution> <year> 1997. </year>
Reference-contexts: This measurement uses a Java JIT, and represents about a 60% improvement over byte-code interpretation. For larger packets, over a slower link, Banchs et al. <ref> [2] </ref>, measure rates of 3.8 Mbps for M0, and about half that rate for ANTS. Finally, Hartmann et al. [10] show that by using aggressive compilation and special purpose operating systems, they can reduce the latency of ANTS by about a factor of about 3.5.
Reference: [3] <author> Edo Biagioni. </author> <title> A structured TCP in standard ML. </title> <booktitle> In Proceedings, 1994 SIGCOMM Conference. ACM, </booktitle> <year> 1994. </year>
Reference-contexts: Two projects that are similar to PLANet are the Fox project, which has built IP for Ethernet and ATM link layers using the ML programming language, and the Active Network Transfer System (ANTS), which is an active network built in Java on top of IP. The Fox project <ref> [3, 4] </ref> implements the TCP/IP protocol suite using the approach of the x-kernel [16]. This work provides a number of insights into the challenge of implementing network software using a high-level language like ML.
Reference: [4] <author> Edoardo Biagioni, Robert Harper, Peter Lee, and Brian G. Milnes. </author> <title> Signatures for a network protocol stack: A systems application of standard ml. </title> <booktitle> In Pro--ceedings of the 1994 ACM Conference on Lisp and Functional Programming, </booktitle> <pages> pages 55-64. </pages> <publisher> ACM, </publisher> <year> 1994. </year>
Reference-contexts: Two projects that are similar to PLANet are the Fox project, which has built IP for Ethernet and ATM link layers using the ML programming language, and the Active Network Transfer System (ANTS), which is an active network built in Java on top of IP. The Fox project <ref> [3, 4] </ref> implements the TCP/IP protocol suite using the approach of the x-kernel [16]. This work provides a number of insights into the challenge of implementing network software using a high-level language like ML.
Reference: [5] <author> S. Bradner and A. Mankin. </author> <title> The recommendation for the ip next generation protocol. </title> <type> Technical report, IETF RFC 1752, </type> <month> January </month> <year> 1995. </year>
Reference-contexts: We have used the PLAN system to build an active inter-network, PLANet. PLANet provides connectionless, best-effort datagram delivery. Many of its basic design decisions are taken from IP, drawing on both IPv4 [20] and IPv6 <ref> [5] </ref>. Thus we leverage the significant engineering experience embodied in those systems, and can focus on active networking rather than reinventing the wheel.
Reference: [6] <institution> Caml home page. pauillac.inria.fr/ caml/ index-eng.html. </institution>
Reference-contexts: PLAN programs are typically small and serve as glue for router-resident services that are implemented by dynamically loadable code (switchlets) written in OCaml <ref> [6] </ref>, a dialect of the ML programming language. A PLAN packet may choose to rely on these switchlets for "passive" transport and thus need not be evaluated at every intermediate node. We have used the PLAN system to build an active inter-network, PLANet. PLANet provides connectionless, best-effort datagram delivery. <p> In particular, the distributed database aspects of these protocols seem attractive for further active networking research in areas like public key management for security purposes [22]. 2.3 Implementation Details PLANet is implemented in OCaml <ref> [6] </ref> in the user space of the Linux operating system. Our implementation was in part based on work described in [1]. Our choice of OCaml is motivated by several concerns. OCaml is a type-safe, garbage-collected language. <p> Space prevents us from presenting all of our measurements, but we will make final versions available over the World Wide Web. 3.1 Experimental Conditions PLAN and PLANet are implemented using the 1.07 distribution of OCaml <ref> [6] </ref>. Our system runs entirely in user-space, and makes use of OCaml's user-level threads package. 3 We use Linux as our operating system, since it provides a special socket type for direct access to the Ethernet. <p> Typically most of the minor heap is garbage and need not be copied, so minor collections are usually cheap. The major heap is collected by an incremental mark-and-sweep collector <ref> [6] </ref> which does some marking or sweeping work on the major heap with each minor collection. Because the major heap contains long-lived data, much of it is live at each collection and in general major collections are expensive.
Reference: [7] <editor> Objective caml | questions and answers. </editor> <address> http://pauillac.inria.fr/ocaml/speed.html. </address>
Reference-contexts: It appears that most of that path involves executing OCaml bytecodes, so compiling to native code might result in a substantial benefit. OCaml provides a native code compiler, which produces code claimed typically to be six times as fast as the interpreted byte-codes <ref> [7] </ref>. We currently do not use this version of OCaml because of a bug that interacts badly with the Linux kernel threads and the fact that it does not support the dynamic code loading we use for switchlets.
Reference: [8] <author> Douglas E. Comer and David L. Stevens. </author> <title> Internetwork-ing with TCP/IP, volume II. </title> <publisher> Prentice-Hall, </publisher> <address> 2 edition, </address> <year> 1994. </year>
Reference-contexts: An alternate approach would have been to age the entries, and once the table filled up, to replace the oldest entries with the new ones coming in. We based our approach on <ref> [8] </ref>, while the latter approach is taken by Linux kernel 2.0.30. The point of the experiment was not to study various fragmentation policies (although this is clearly a worthwhile experiment), but to illustrate how an application may adapt to existing, potentially poor conditions.
Reference: [9] <author> Martin de Prycker. </author> <title> Asynchronous Transfer Mode: Solution for Broadband ISDN. </title> <publisher> Ellis Horwood, </publisher> <address> West Sussex, England, </address> <year> 1991. </year>
Reference-contexts: At each router on the return trip, the packet installs an entry in a flow-based routing table which maps the flow ID to the next hop. This results in routing quite similar to the VC-switching used in ATM networks <ref> [9] </ref>. Finally, the packet reports the flow ID to the controlling application, which can then start sending the transport packets along the route just set up by the returning scout packet. The results of this experiment are shown in Figure 6.
Reference: [10] <author> John H. Hartman, Larry L. Peterson, Andy Bavier, Peter A. Bigot, Patrick Bridges, Brady Montz, Rob Piltz, Todd A. Proebsting, and Oliver Spatscheck. Joust: </author> <title> A platform for communication-oriented liquid software. </title> <type> Technical report, </type> <institution> University of Arizona, </institution> <year> 1997. </year>
Reference-contexts: This measurement uses a Java JIT, and represents about a 60% improvement over byte-code interpretation. For larger packets, over a slower link, Banchs et al. [2], measure rates of 3.8 Mbps for M0, and about half that rate for ANTS. Finally, Hartmann et al. <ref> [10] </ref> show that by using aggressive compilation and special purpose operating systems, they can reduce the latency of ANTS by about a factor of about 3.5. Conclusions It seems clear that the term "active networking" encompasses a large design space.
Reference: [11] <author> C. Hedrick. </author> <title> Routing information protocol. </title> <type> Technical report, RFC 1058, </type> <month> June </month> <year> 1988. </year>
Reference-contexts: In PLANet, we provide a compromise between the two in the form of a per-packet routing function. Most packets will specify the defaultRoute function, which in PLANet is implemented with a simple distance vector routing service based closely on RIP <ref> [11] </ref>. On the other hand, more savvy applications may make use of customized routing functions, as illustrated in Section 4. Currently, default routing in PLANet is simplified from that of the current Internet in two ways. First, we make no provisions for routing between autonomous domains.
Reference: [12] <author> Mike Hicks, Pankaj Kakkar, Jonathan T. Moore, Carl A. Gunter, and Scott Nettles. </author> <title> PLAN: A programming language for active networks. </title> <note> www.cis.upenn.edu/ ~switchware/ papers/ plan.ps. </note>
Reference-contexts: Packets contain programs written in a special-purpose packet language called PLAN (Programming Language for Active Networks) <ref> [12] </ref>; these programs serve a role similar to a header in a traditional packet, in that they provide control of how packets operate inside the network. <p> Another special characteristic of PLAN is a resource-limited semantics which ensures that PLAN programs always terminate and visit only a fixed number of nodes. We refer the reader to <ref> [12] </ref> for more details about the PLAN language. In addition to the PLAN interpreter, each node is augmented by loadable, extensible services, or switchlets, which may in some way be invoked during the evaluation of PLAN programs.
Reference: [13] <author> R. Jain. </author> <title> The Art of Computer Systems Performance Analysis. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: In all cases we collect 21 trials and compute the mean, median, standard deviation, and quartiles. For most of our measurements, the standard deviation is less than 5% of the mean, but we do observe somewhat skewed distributions. For this reason, as recommended by Jain <ref> [13] </ref>, we report medians, since they are less sensitive to influence by skewed distributions.
Reference: [14] <author> Francois Louaix. </author> <title> A web navigator with applets in Caml. </title> <booktitle> In Fifth WWW Conference, </booktitle> <year> 1996. </year>
Reference-contexts: OCaml has been used like Java to provide for web-based mobile code <ref> [14] </ref>. Our earlier IP-based implementation used Java (or, more precisely, Pizza [17], a Java extension). However, when we attempted a parallel development in OCaml we found that the code was easier to write and more efficient, so OCaml was adopted as the preferred language for PLANet. <p> Their implementation uses SML/NJ rather than OCaml so there are some differences; in particular, our programs are byte-code interpreted and we make use of OCaml's dynamic loading. These aspects of OCaml have been exploited to provide mobile programs for the MMM browser <ref> [14] </ref>. OCaml has been used for other serious distributed systems. The Ensemble Project [25] provides a generalization of TCP/IP to group communication, and its (native code) OCaml implementation has a performance comparable to similar systems written in C.
Reference: [15] <author> J. Moy. </author> <type> Ospf version 2. Technical report, IETF RFC 1583, </type> <month> March </month> <year> 1994. </year>
Reference-contexts: For instance, aside from the need to implement a comparatively complex protocol, there would be no problem with the design of PLANet for implementing a link state routing protocol like OSPF <ref> [15] </ref> if the network needed to handle a large number of nodes.
Reference: [16] <author> Sean W. O'Malley and Larry L. Peterson. </author> <title> A dynamic network architecture. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(2), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: The Fox project [3, 4] implements the TCP/IP protocol suite using the approach of the x-kernel <ref> [16] </ref>. This work provides a number of insights into the challenge of implementing network software using a high-level language like ML. For instance we may be able to learn from their experience in implementing TCP [21] when we design some form of (active) adaptive reliable transport for PLANet.
Reference: [17] <institution> Pizza home page. </institution> <note> www.math.luc.edu/ pizza. </note>
Reference-contexts: OCaml has been used like Java to provide for web-based mobile code [14]. Our earlier IP-based implementation used Java (or, more precisely, Pizza <ref> [17] </ref>, a Java extension). However, when we attempted a parallel development in OCaml we found that the code was easier to write and more efficient, so OCaml was adopted as the preferred language for PLANet.
Reference: [18] <author> David C. Plummer. </author> <title> An ethernet address resolution protocol. </title> <type> Technical report, IETF RFC 826, </type> <year> 1982. </year>
Reference-contexts: This choice makes it easy for us to use UDP/IP as a "link layer" to create tunnels between physically separated PLANets. Sending data requires a link-layer address, and so inter-nets need a mechanism to resolve network addresses into link layer ones. PLANet adopts the same basic technique as ARP <ref> [18] </ref>. The key difference is that in PLANet an ARP request is not a special kind of packet, but rather a PLAN program. ARP serves as a suitable example for how distributed protocols are written in the PLAN system, so we shall briefly cover how it works. <p> In this case we will need to dynamically adjust segment sizes. 1 This illustrative protocol differs from ARP in not attempting to modify the bindings of the responder if it is missing binding information about the requester. Our actual implementation more closely adheres to the ARP protocol <ref> [18] </ref>. 2.2.3 Routing Recall that in the PLAN system, when a packet arrives at a node that is not its evaluation destination it must be properly routed onward.
Reference: [19] <author> J. Postel. </author> <title> Internet control message protocol. </title> <type> Technical report, IETF RFC 792, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: In particular, it is an area where the use of a special-purpose programming language like PLAN is likely to have a good payoff. In the IP Internet, diagnostics and error reporting are provided by ICMP <ref> [19] </ref>. In PLANet, diagnostics such as ping or traceroute are just PLAN programs that query nodes for the information they need.
Reference: [20] <author> J. Postel. </author> <title> Internet protocol. </title> <type> Technical report, IEFT RFC 791, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: We have used the PLAN system to build an active inter-network, PLANet. PLANet provides connectionless, best-effort datagram delivery. Many of its basic design decisions are taken from IP, drawing on both IPv4 <ref> [20] </ref> and IPv6 [5]. Thus we leverage the significant engineering experience embodied in those systems, and can focus on active networking rather than reinventing the wheel.
Reference: [21] <author> J. Postel. </author> <title> Transmission control protocol. </title> <type> Technical report, IETF RFC 793, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: This work provides a number of insights into the challenge of implementing network software using a high-level language like ML. For instance we may be able to learn from their experience in implementing TCP <ref> [21] </ref> when we design some form of (active) adaptive reliable transport for PLANet. Their implementation uses SML/NJ rather than OCaml so there are some differences; in particular, our programs are byte-code interpreted and we make use of OCaml's dynamic loading.
Reference: [22] <institution> Query Certificate Manager project home page. </institution> <address> www.cis.upenn.edu/ ~qcm. </address>
Reference-contexts: Adding them, however, would be extremely straightforward, in much the same style with which we implemented ARP and RIP. In particular, the distributed database aspects of these protocols seem attractive for further active networking research in areas like public key management for security purposes <ref> [22] </ref>. 2.3 Implementation Details PLANet is implemented in OCaml [6] in the user space of the Linux operating system. Our implementation was in part based on work described in [1]. Our choice of OCaml is motivated by several concerns. OCaml is a type-safe, garbage-collected language.
Reference: [23] <author> Robert J. Sternberg. </author> <title> The triarchic mind : a new theory of human intelligence. </title> <publisher> Viking, </publisher> <year> 1988. </year>
Reference-contexts: It is worthwhile to note that it is not the particular algorithms presented here which are important. Rather, it is the way 4 Our three examples were partly inspired by <ref> [23] </ref>, which proposes a theory of intelligence based on balancing abilities to adapt to the environment, modify the environment, or select an entirely new environment. in which the algorithms are deployed that is significant.
Reference: [24] <author> David L. Tennenhouse, Jonathan M. Smith, W. David Sincoskie, David J. Wetherall, and Gary J. Minden. </author> <title> A survey of active network research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(1) </volume> <pages> 80-86, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: It has been used to implement ANTS and could be used to implement the Java/IP version of PLAN. The reader is referred to <ref> [24] </ref> and the Active Network Program home page, www.ito.darpa.mil/ research/ anets for a fuller listing of active network projects. There is a scarcity of information available about active networking performance, and so it is difficult to compare our results to others.
Reference: [25] <author> Robbert van Renesse, Ken Birman, Mark Hayden, Alexey Vaysburd, and David Karr. </author> <title> Building adaptive systems using ensemble. </title> <type> Technical Report TR97-1638, </type> <institution> Cornell University, </institution> <year> 1997. </year>
Reference-contexts: These aspects of OCaml have been exploited to provide mobile programs for the MMM browser [14]. OCaml has been used for other serious distributed systems. The Ensemble Project <ref> [25] </ref> provides a generalization of TCP/IP to group communication, and its (native code) OCaml implementation has a performance comparable to similar systems written in C.
Reference: [26] <author> David J. Wetherall, John Guttag, and David L. Tennen-house. </author> <title> ANTS: A toolkit for building and dynamically deploying network protocols. </title> <booktitle> In IEEE OPENARCH, </booktitle> <month> April </month> <year> 1998. </year>
Reference-contexts: OCaml has been used for other serious distributed systems. The Ensemble Project [25] provides a generalization of TCP/IP to group communication, and its (native code) OCaml implementation has a performance comparable to similar systems written in C. In <ref> [26] </ref> there is a discussion of the distinction we made in the introduction between programs that travel in the packet versus those that reside on the router. ANTS takes a specific position in this design space by choosing to provide programming entirely at what we have called the switch-let level. <p> The reader is referred to [24] and the Active Network Program home page, www.ito.darpa.mil/ research/ anets for a fuller listing of active network projects. There is a scarcity of information available about active networking performance, and so it is difficult to compare our results to others. Wetherall et al. <ref> [26] </ref> report a maximum packet forwarding rate for ANTS on a 167 MHz Ultrasparc over 100 Mbps Ethernet of 1680 packets per second for minimum size packets. This measurement uses a Java JIT, and represents about a 60% improvement over byte-code interpretation.
Reference: [27] <author> Y. Yemini and S. da Silva. </author> <title> Towards programmable networks. </title> <booktitle> In IFIP/IEEE International Workshop on Distributed Systems: Operations and Management, </booktitle> <address> L'Aquila, Italy, </address> <year> 1996. </year>
Reference-contexts: ANTS and PLANet also differ substantially on the other design dimension we mentioned in the introduction since ANTS evaluates its packets on all nodes, an approach we have gone to some lengths to avoid. There are a variety of active network projects that propose different architectures. For instance, Netscript <ref> [27] </ref> is a language for programming IP-based active networks at the service layer and Joust is an operating system based on Java (with just-in-time native code compilation) and using IP for network communication.
References-found: 27

