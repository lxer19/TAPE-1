URL: http://www.cs.wisc.edu/wpis/papers/informatik97.ps
Refering-URL: http://www.cs.wisc.edu/~reps/
Root-URL: 
Title: The Use of Program Profiling in Software Testing  
Author: Thomas Reps 
Affiliation: University of Wisconsin  
Abstract: This paper describes new techniques to help with testing and debugging, using information obtained from path profiling. A path profiler instruments a program so that each run of the program generates a path spectrum for the executiona distribution of acyclic path fragments that were executed during that run. Our techniques are based on the idea of comparing path spectra from different runs of the program. When different runs produce different spectra, the spectral differences can be used to identify paths in the program along which control diverges in the two runs. By choosing input datasets to hold all factors constant except one, the divergence can be attributed to this factor. The point of divergence itself may not be the cause of the underlying problem, but provides a starting place for a programmer to begin his exploration. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Bala, V., </author> <title> Low overhead path profiling, </title> <type> Tech. Rep., </type> <institution> Hewlett-Packard Labs (1996). </institution>
Reference: 2. <author> Ball, T. and Larus, J., </author> <title> Efficient path profiling, </title> <booktitle> in Proc. of MICRO-29, </booktitle> <month> (Dec. </month> <year> 1996). </year>
Reference-contexts: Path profiling in programs with loops is typically carried out by considering loop-free segments of the program. See below, or reference <ref> [2] </ref> for more discussion of this issue.) For purposes of this example, assume that years are represented with only two digits and that no person recorded in the database who is younger than fifteen years old possesses a college Proc. of Informatik 97 (Aachen, Germany, Sept. 24-27, 1997) hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh a: birth_year <p> Ball and Larus report that execution-time overheads on the order of only 30-40% can be achieved with their method for collecting path profiles <ref> [2] </ref>. Example. Returning to our running example, Figure 2 shows how the control-flow graph of the program fragment that reads and processes data from a database of customer information would be annotated. <p> the original program, Proc. of Informatik 97 (Aachen, Germany, Sept. 24-27, 1997) hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh cal (m, y, p, w) char *p; - register d, i; register char *s; int foo = 0; d = jan1 (y); mon [9] = 30; switch ((jan1 (y+1)+7-d)%7) - case 1: /* non-leap year */ mon <ref> [2] </ref> = 28; break; default: /* 1752 */ mon [9] = 19; break; case 2: /* leap year */ foo = foo + 1; /* Statement added so that something in the leap-year case */ break; /* could be highlighted */ - d += mon [i]; s += 3*d; hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh input
Reference: 3. <author> Clarke, L.A., Podgurski, A., Richardson, D.J., and Zeil, S.J., </author> <title> A comparison of data flow path selection criteria, pp. </title> <booktitle> 244-251 in Proc. of the Eighth Int. Conf. on Softw. Eng., IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <address> Wash., DC (1985). </address>
Reference: 4. <author> Horwitz, S., Reps, T., and Binkley, D., </author> <title> Interprocedural slicing using dependence graphs, </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <pages> 12(1) pp. </pages> <month> 26-60 (Jan. </month> <year> 1990). </year>
Reference: 5. <author> Johnson, </author> <title> S.C., Postloading for fun and profit, pp. </title> <booktitle> 325-330 in Proc. of the Winter 1990 USENIX Conf., </booktitle> <month> (Jan. </month> <year> 1990). </year>
Reference: 6. <author> Larus, J.R. and Schnarr, E., EEL: </author> <title> Machine-independent executable editing, </title> <booktitle> Proc. of the ACM SIGPLAN 95 Conf. on Programming Language Design and Implementation, </booktitle> <address> (La Jolla, CA, </address> <month> June 18-21, </month> <year> 1995), </year> <journal> ACM SIGPLAN Notices 30(6) pp. </journal> <month> 291-300 (June </month> <year> 1995). </year>
Reference: 7. <author> Ottenstein, K.J. and Ottenstein, L.M., </author> <title> The program dependence graph in a software development environment, </title> <booktitle> Proc. of the ACM SIGSOFT/SIGPLAN Softw. Eng. Symp. on Practical Software Development Environments, </booktitle> <address> (Pittsburgh, PA, </address> <month> Apr. </month> <pages> 23-25, </pages> <year> 1984), </year> <journal> ACM SIGPLAN Notices 19(5) pp. </journal> <month> 177-184 (May </month> <year> 1984). </year> <booktitle> Proc. of Informatik 97 (Aachen, </booktitle> <address> Germany, </address> <month> Sept. </month> <pages> 24-27, </pages> <year> 1997) </year>
Reference: 8. <author> Rapps, S. and Weyuker, E.J., </author> <title> Selecting software test data using data flow information, </title> <journal> IEEE Trans. on Softw. Eng. SE-11(4) pp. </journal> <month> 367-375 (Apr. </month> <year> 1985). </year>
Reference: 9. <author> Reps, T., Horwitz, S., Sagiv, M., and Rosay, G., </author> <title> Speeding up slicing, </title> <booktitle> SIGSOFT 94: Proc. of the Second ACM SIGSOFT Symp. on the Found. of Softw. </booktitle> <address> Eng., (New Orleans, LA, </address> <month> Dec. </month> <pages> 7-9, </pages> <year> 1994), </year> <journal> ACM SIGSOFT Softw. Eng. </journal> <note> Notes 19(5) pp. 11-20 (Dec. </note> <year> 1994). </year>
Reference-contexts: With the original program, Proc. of Informatik 97 (Aachen, Germany, Sept. 24-27, 1997) hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh cal (m, y, p, w) char *p; - register d, i; register char *s; int foo = 0; d = jan1 (y); mon <ref> [9] </ref> = 30; switch ((jan1 (y+1)+7-d)%7) - case 1: /* non-leap year */ mon [2] = 28; break; default: /* 1752 */ mon [9] = 19; break; case 2: /* leap year */ foo = foo + 1; /* Statement added so that something in the leap-year case */ break; /* <p> Sept. 24-27, 1997) hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh cal (m, y, p, w) char *p; - register d, i; register char *s; int foo = 0; d = jan1 (y); mon <ref> [9] </ref> = 30; switch ((jan1 (y+1)+7-d)%7) - case 1: /* non-leap year */ mon [2] = 28; break; default: /* 1752 */ mon [9] = 19; break; case 2: /* leap year */ foo = foo + 1; /* Statement added so that something in the leap-year case */ break; /* could be highlighted */ - d += mon [i]; s += 3*d; hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh input cal 2 1997.
Reference: 10. <author> Reps, T., Ball, T., Das, M., and Larus, J., </author> <title> The use of program profiling for software maintenance with applications to the Year 2000 Problem, </title> <booktitle> in Proc. of ESEC/FSE 97: Sixth European Softw. Eng. Conf. and Fifth ACM SIGSOFT Symp. on the Found. of Softw. </booktitle> <address> Eng., (Zurich, Switzerland, </address> <month> Sept. </month> <pages> 22-25, </pages> <year> 1997), </year> <title> Lec. </title> <booktitle> Notes in Comp. </booktitle> <publisher> Sci., Springer-Verlag, </publisher> <address> New York, NY (1997). </address>
Reference-contexts: Although there is no way to surmount this fundamental difficulty, testing is an extremely importantand costlyaspect of software development. Recently, Reps et al. proposed a new class of software-testing tools <ref> [10] </ref> that make use of information obtained from path profiling. <p> The principle offers new perspectives on testing, on the task of creating test data, and on what tools can be created to support program testing. This approach to testing is a new variant of white-box testing, which we have termed I/B testing <ref> [10] </ref>, for Input/Behavior testing, by analogy with I/O testing. In contrast to I/O testing, I/B testing can reveal possible problemsby finding path-spectrum differenceseven when the output of an execution run is correct. <p> Author's address: Computer Sciences Department, University of Wisconsin, 1210 W. Dayton St., Madison, WI 53706, USA. E-mail: reps@cs.wisc.edu; WWW: http://www.cs.wisc.edu/reps/ Portions of this paper are excerpted from <ref> [10] </ref>. The Wisconsin Alumni Research Foundation is in the process of seeking patent protection for the ideas described herein.
Reference: 11. <author> Roper, M., </author> <title> Software Testing, </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY (1994). </address>
Reference: 12. <author> Sedgewick, R., </author> <title> Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1983). </address>
Reference-contexts: the post-2000 run? Again, the programmer is led to the statement that computes age as a function of current_year (). ` One can find the shortest prefix of a path p that is not a prefix of any executed path in a spectrum S using a trie structure on S <ref> [12] </ref>: The first edge of p that deviates from the trie identifies the edge at which p veers into unknown territory, and the prefix of p, up to and including this edge, is the shortest prefix of p that distinguishes p from S. Example.
Reference: 13. <author> Srivastava, A. and Eustace, A., </author> <title> ATOM: A system for building customized program analysis tools, </title> <booktitle> Proc. of the ACM SIGPLAN 94 Conf. on Programming Language Design and Implementation, </booktitle> <address> (Orlando, FL, </address> <month> June 22-24, </month> <year> 1994), </year> <journal> ACM SIGPLAN Notices 29(6) pp. </journal> <month> 196-205 (June </month> <year> 1994). </year>
Reference: 14. <author> Weiser, M., </author> <title> Program slicing, </title> <journal> IEEE Trans. on Softw. Eng. SE-10(4) pp. </journal> <month> 352-357 (July </month> <year> 1984). </year>
Reference: 15. <author> Woodward, M.R., Hedley, D., and Hennell, M.A., </author> <title> Experience with path analysis and testing of programs, </title> <journal> IEEE Trans. on Softw. Eng. SE-6(3) pp. </journal> <month> 278-286 (May </month> <year> 1980). </year> <booktitle> Proc. of Informatik 97 (Aachen, </booktitle> <address> Germany, </address> <month> Sept. </month> <pages> 24-27, </pages> <year> 1997) </year>
References-found: 15

