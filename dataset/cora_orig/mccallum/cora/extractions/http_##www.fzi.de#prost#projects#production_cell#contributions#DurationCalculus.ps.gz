URL: http://www.fzi.de/prost/projects/production_cell/contributions/DurationCalculus.ps.gz
Refering-URL: http://www.fzi.de/prost/projects/production_cell/contributions/DurationCalculus.html
Root-URL: http://www.fzi.de
Title: Specifying a Computer Controlled Forging Machine  
Author: Jakob Lyng Petersen 
Date: September 5, 1994  
Note: Date:  Doc. Id.: [ID/DTU JLP 1/1]  
Abstract-found: 0
Intro-found: 1
Reference: [BL94] <author> Artur Brauer and Thomas Lindner. </author> <title> Simulation. </title> <editor> In Claus Lewerentz and Thomas Lindner, editors, </editor> <title> Case Study "Production Cell". A Comparative Study in Formal Software Development, </title> <type> pages 273-284. </type> <institution> Forschungszentrum Informatik, University of Karlsruhe, </institution> <year> 1994. </year>
Reference-contexts: Its usage is described in <ref> [BL94] </ref>. It simulates the behavior of the real production cell. Since it has the same interface to the control program as the real production cell, it can be used to test an implemented controller.
Reference: [CHR91] <author> Z. Chaochen, </author> <title> C.A.R. Hoare, and A.P. Ravn. A calculus of durations. </title> <journal> Information Processing Letters, </journal> <volume> 40(5) </volume> <pages> 269-276, </pages> <year> 1991. </year>
Reference-contexts: This example, which has been introduced to the world by the Forschungszentrum Informatik at the university of Karlsruhe, has been used as a benchmark in a comparative study in formal software development [LL94]. In this thesis, Duration Calculus (DC) <ref> [CHR91, HC92] </ref> is used as the mathematical tool for specifying the production cell system.
Reference: [HC92] <author> M.R. Hansen and Z. Chaochen. </author> <title> Semantics and completeness of duration calculus. </title> <editor> In J.W. de Bakker, C. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Real-Time: Theory in Practice, REX Workshop, pages 2-0-225. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1992. </year> <note> LNCS 600. </note>
Reference-contexts: This example, which has been introduced to the world by the Forschungszentrum Informatik at the university of Karlsruhe, has been used as a benchmark in a comparative study in formal software development [LL94]. In this thesis, Duration Calculus (DC) <ref> [CHR91, HC92] </ref> is used as the mathematical tool for specifying the production cell system.
Reference: [KR88] <author> Brian W. Kernighan and Dennis M. Richie. </author> <title> The C programming language. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1988. </year>
Reference-contexts: However we would like to use it as a conventional programming language. This can be done by the use of the ST2C compiler [Mar94] which translates an ST program into a C-program <ref> [KR88] </ref>. Since ST is a hardware description language, it has no input/output facilities.
Reference: [Lin94] <author> Thomas Lindner. </author> <title> Task description. </title> <editor> In Claus Lewerentz and Thomas Lindner, editors, </editor> <title> Case Study "Production Cell". A Comparative Study in Formal Software Development, </title> <type> chapter 2. </type> <institution> Forschungszentrum Informatik, University of Karlsruhe, </institution> <year> 1994. </year>
Reference-contexts: Taken from <ref> [Lin94] </ref>. The travelling crane consists of a crane body with a gripper arm attached. An electro magnet is placed at the end of the gripper arm. <p> The crane will remain loaded while it is at position Deposit . This follows from the definition of the Conditional Buffer Connection of CRANE FEED BELT CON NEC TI ON . Chapter 4 High level safety requirements Some safety requirements for the production cell system are given in <ref> [Lin94] </ref>. These safety requirements are divided into four groups: 1. Restrictions of machine mobility. For instance the robot must not rotate further than necessary. 2. Avoidance of machine collisions. For example, the press must not close when a robot arm is positioned inside it. 3. <p> Table pos = Lower e!!dTable pos = Lower e SAFETY b= ARM 1 SAFETY ^ ARM 2 SAFETY ^ ROBOT SAFETY TABLE SAFETY ^ PRESS SAFETY ^ CRANE SAFETY It can be proved that the new specification implies that the safety requirement SD5 is fulfilled. 4.5 The liveness requirement In <ref> [Lin94] </ref> a liveness requirement for the production cell system is mentioned: "Every blank introduced into the system via the feed belt will eventually be dropped by the crane on the feed belt and will have been forged." We shall prove that the liveness requirement is fulfilled by our specification. <p> When there is not a plate at the start of the feed belt then there will eventually be dropped a plate by the crane onto the feed belt. Any plate inserted into the press will be forged. This is not exactly the liveness requirement mentioned in <ref> [Lin94] </ref>: we have not proved that any plate which is put onto the feed belt (after having been cycled around in the system) has 4.5. THE LIVENESS REQUIREMENT 35 been forged. <p> It is possible to prove this. 60 CHAPTER 5. LOW LEVEL REFINEMENTS Chapter 6 Low level safety requirements As mentioned in chapter 4 not all of the safety requirements given in <ref> [Lin94] </ref> are expressible at the high level of abstraction. With our new low level design we can express the remaining requirements. Because the new design still implements the old one, the safety requirements which have already been proved are still fulfilled. 6.1 Machine mobility restriction requirements In [Lin94] the safety requirements <p> requirements given in <ref> [Lin94] </ref> are expressible at the high level of abstraction. With our new low level design we can express the remaining requirements. Because the new design still implements the old one, the safety requirements which have already been proved are still fulfilled. 6.1 Machine mobility restriction requirements In [Lin94] the safety requirements were divided into four groups. One of the groups only contains requirements which we could not express at the higher level of abstraction. This group is about restrictions on the mobility of the components in the system. <p> OTHER REQUIREMENTS 67 6.4 Other requirements Since all of the "keep blanks sufficiently distant" requirements are fulfilled by the high level specification and since our low level specification is a refinement of that, we have proved all of the safety requirements mentioned in <ref> [Lin94] </ref>. Since we have also proved that the liveness requirement mentioned in [Lin94] is fulfilled we have completed our specification. 68 CHAPTER 6. <p> requirements Since all of the "keep blanks sufficiently distant" requirements are fulfilled by the high level specification and since our low level specification is a refinement of that, we have proved all of the safety requirements mentioned in <ref> [Lin94] </ref>. Since we have also proved that the liveness requirement mentioned in [Lin94] is fulfilled we have completed our specification. 68 CHAPTER 6. LOW LEVEL SAFETY REQUIREMENTS Chapter 7 Implementing the specification Since we have now completed the specification phase and all safety and liveness requirements are proved, we can now begin the task of implementing the DC-specification. <p> When the physical components are then specified by different instances of that generic component, all of the instances fulfill similar requirements. This has been used to prove both safety requirements and refinement relations. 8.4 Regarding the production cell system In <ref> [Lin94] </ref> a few "other" requirements than the safety and liveness requirements are mentioned. 8.4.1 Efficiency One is the question of efficiency: for instance it might be required that no plate is longer than a certain minimum of time in the production cell (that is: the system without the crane). <p> For example, the arms could extend while the robot is rotating instead of first letting the robot rotate and then extend the arms. 8.4.2 Flexibility Another matter mentioned in <ref> [Lin94] </ref> is the matter of flexibility. <p> Again the strength of using generic components is seen: it is much easier to change an instance of a generic component that changing several formulas which are not so easily understood. 8.4.3 Questions A few additional questions are posed in <ref> [Lin94] </ref>, some of which have been mentioned above.
Reference: [LL94] <author> Claus Lewerentz and Thomas Lindner, </author> <title> editors. Case Study "Production Cell". A Comparative Study in Formal Software Development. </title> <institution> Forschungszentrum Informatik, University of Karlsruhe, </institution> <year> 1994. </year>
Reference-contexts: Introduction In this thesis a safety critical real time system, the FZI production cell, is to be specified. This example, which has been introduced to the world by the Forschungszentrum Informatik at the university of Karlsruhe, has been used as a benchmark in a comparative study in formal software development <ref> [LL94] </ref>. In this thesis, Duration Calculus (DC) [CHR91, HC92] is used as the mathematical tool for specifying the production cell system.
Reference: [Mar94] <author> Niels B. Maretti. </author> <title> A guide to ST2C. </title> <institution> Department of Computer Science, Technical University of Denmark, </institution> <month> January </month> <year> 1994. </year> <note> Version 3.5 (preliminary). </note>
Reference-contexts: However we would like to use it as a conventional programming language. This can be done by the use of the ST2C compiler <ref> [Mar94] </ref> which translates an ST program into a C-program [KR88]. Since ST is a hardware description language, it has no input/output facilities.
Reference: [MRR93] <author> Paulo C. Masiero, Anders P. Ravn, and Hans Rischel. </author> <title> Refinement of real time specifications (draft). </title> <institution> Technical University of Denmark, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: It is different from the the definition of the latching/untimed progress operator which is defined in [Rav94]. The property that the operator forces dP e when D becomes false (rather than as long as D is true and when D becomes false) resembles the latching operators defined in <ref> [MRR93] </ref>. Unlike the latching operator defined in [RRH93] this operator ensures that dP e is true after D . When this operator is used in Z-schemas it should not be confused with the arrow "!!" used in Z to denote total surjections. <p> (T &gt; 0) leads to dP e is defined by: D ! dP e b= : 3 ((D ^ ` = T ); d:P e) Definition 3 is taken from [Rav94] and this definition is a little different from earlier versions of this operator which has also been used in <ref> [MRR93] </ref>.
Reference: [Rav94] <author> A.P. Ravn. </author> <title> Design of embedded real-time computing systems. </title> <institution> Department of Computer Science, Technical University of Denmark, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: It is different from the the definition of the latching/untimed progress operator which is defined in <ref> [Rav94] </ref>. The property that the operator forces dP e when D becomes false (rather than as long as D is true and when D becomes false) resembles the latching operators defined in [MRR93]. <p> Definition 3 (Timed Progress) D for time T (T &gt; 0) leads to dP e is defined by: D ! dP e b= : 3 ((D ^ ` = T ); d:P e) Definition 3 is taken from <ref> [Rav94] </ref> and this definition is a little different from earlier versions of this operator which has also been used in [MRR93]. <p> Definition 5 is taken from <ref> [Rav94] </ref>. 91 92 APPENDIX A. NOTATIONS A.2 Form of proofs Most of the proofs use the symbol "a". This should be read as "Which follows from". Often there is a reference to a formula, in which case it should be read as "Which by (reference) follows from".
Reference: [RRH93] <author> Anders P. Ravn, Hans Rischel, and Kirsten Mark Hansen. </author> <title> Specifying and verifying requirements of real-time systems. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 19(1) </volume> <pages> 41-55, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: The property that the operator forces dP e when D becomes false (rather than as long as D is true and when D becomes false) resembles the latching operators defined in [MRR93]. Unlike the latching operator defined in <ref> [RRH93] </ref> this operator ensures that dP e is true after D . When this operator is used in Z-schemas it should not be confused with the arrow "!!" used in Z to denote total surjections.
Reference: [Spi89] <author> J.M. Spivey. </author> <title> The Z Notation: A Reference Manual. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: In this thesis, Duration Calculus (DC) [CHR91, HC92] is used as the mathematical tool for specifying the production cell system. The Z notation <ref> [Spi89, Z S92] </ref> is used to modularize the specification. 1.1 A description of the production cell The task of the production cell is to transport metal plates to a press, to let the press forge the plates and finally to transport the forged metal plates away from the press. <p> Appendix A contains definitions of the used operators. Also a remark about the form of the proofs is given in this appendix. 1.2.7 Using the Z notation We shall use the Z notation <ref> [Z S92, Spi89] </ref> to modularize the DC specification. The specification uses Z schemas to group constraints regarding buffers, buffer connections and safety constraints into different places. In this way the specification gets easier to read. The Z notation is also used to specify each of the generic components.
Reference: [Sta94] <author> Jorgen Staunstrup. </author> <title> A formal approach to hardware design. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year>
Reference-contexts: The example above is straight forward to implemented in ST. In some other cases it is necessary to add some transitions (to control/react to timers) or the implementation must be modified to ensure that inconsistencies do not occur. 7.5 Modifications of the ST-program In <ref> [Sta94] </ref> it is mentioned that synchronous composition is not defined unless the Exclusive Write Condition is satisfied. This condition is defined in [Sta94] as: Definition 1 (Exclusive Write Condition) The transitions t 1 ; t 2 ; : : : ; t n meet the Exclusive Write Condition if and only <p> necessary to add some transitions (to control/react to timers) or the implementation must be modified to ensure that inconsistencies do not occur. 7.5 Modifications of the ST-program In <ref> [Sta94] </ref> it is mentioned that synchronous composition is not defined unless the Exclusive Write Condition is satisfied. This condition is defined in [Sta94] as: Definition 1 (Exclusive Write Condition) The transitions t 1 ; t 2 ; : : : ; t n meet the Exclusive Write Condition if and only if: 8 i ; j 2 [1::n] : W t i " W t j 6= ; ) :(c i ^ c
Reference: [Z S92] <author> The Z Standards Review Committee. </author> <title> Z Base Standard version 1.0, </title> <month> November </month> <year> 1992. </year> <month> 141 </month>
Reference-contexts: In this thesis, Duration Calculus (DC) [CHR91, HC92] is used as the mathematical tool for specifying the production cell system. The Z notation <ref> [Spi89, Z S92] </ref> is used to modularize the specification. 1.1 A description of the production cell The task of the production cell is to transport metal plates to a press, to let the press forge the plates and finally to transport the forged metal plates away from the press. <p> Appendix A contains definitions of the used operators. Also a remark about the form of the proofs is given in this appendix. 1.2.7 Using the Z notation We shall use the Z notation <ref> [Z S92, Spi89] </ref> to modularize the DC specification. The specification uses Z schemas to group constraints regarding buffers, buffer connections and safety constraints into different places. In this way the specification gets easier to read. The Z notation is also used to specify each of the generic components.
References-found: 13

