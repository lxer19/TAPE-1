URL: http://www.ai.mit.edu/people/cshelton/papers/cgmemo.ps.gz
Refering-URL: http://www.ai.mit.edu/people/cshelton/
Root-URL: 
Title: A Perturbation Scheme for Spherical Arrangements with Application to Molecular Modeling  
Author: Dan Halperin Christian R. Shelton 
Address: 69978, Israel.  
Note: This work has been supported in part by a grant from Pfizer Central Research. Dan Halperin has also been supported in part by an Alon Fellowship, by ESPRIT IV LTR Project No. 21957 (CGAL), by the USA-Israel Binational Science Foundation, by The Israel Science Foundation founded by the Israel Academy of Sciences and Humanities, and by the Hermann Minkowski Minerva Center for Geometry at Tel Aviv University. This document can be retrieved by anonymous ftp to publications.ai.mit.edu.  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY ARTIFICIAL INTELLIGENCE LABORATORY  Tel Aviv University  Massachusetts Institute of Technology  Department of Computer Science, Tel Aviv University, Tel Aviv  
Pubnum: A.I. Memo No.  
Email: E-mail: halperin@math.tau.ac.il.  
Date: 1618 December, 1997  
Abstract: We describe a software package for computing and manipulating the subdivision of a sphere by a collection of (not necessarily great) circles and for computing the boundary surface of the union of spheres. We present problems that arise in the implementation of the software and the solutions that we have found for them. At the core of the paper is a novel perturbation scheme to overcome degeneracies and precision problems in computing spherical arrangements while using floating point arithmetic. The scheme is relatively simple, it balances between the efficiency of computation and the magnitude of the perturbation, and it performs well in practice. In one O(n) time pass through the data, it perturbs the inputs necessary to insure no potential degeneracies and then passes the perturbed inputs on to the geometric algorithm. We report and discuss experimental results. Our package is a major component in a larger package aimed to support geometric queries on molecular models; it is currently employed by chemists working in `rational drug design.' The spherical subdivisions are used to construct a geometric model of a molecule where each sphere represents an atom. We also give an overview of the molecular modeling package and detail additional features and implementation issues. z Department of Computer Science, MIT, Cambridge, MA 02139. E-mail: cshelton@ai.mit.edu. Part of the work on this paper was carried out while Christian Shelton was at the Department of Computer Science, Stanford University 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Avnaim, J.-D. Boissonnat, O. Devillers, F. Preparata, and M. Yvinec. </author> <title> Evaluation of a new method to compute signs of determinants. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages C16-C17, </pages> <year> 1995. </year>
Reference: [2] <author> L.M. Balbes, </author> <title> S.W. Mascarella, and D.B. Boyd. A perspective of modern methods for computer aided drug design. </title> <booktitle> In Reviews in Computational Chemistry, </booktitle> <volume> volume 5, </volume> <pages> pages 265-294. </pages> <publisher> VCH Publishers Inc., </publisher> <year> 1994. </year>
Reference-contexts: Our experimental results show that in most cases the time taken up by the perturbation scheme is negligible (Section 6). Our software is part of a toolbox of data structures and algorithms aimed to support the chemist in the rational drug design process <ref> [2] </ref>, and it is currently being used by chemists in a pharmaceutical company. Further details on the larger software (the toolbox) can be found in [12]. 1.3 Comparison with Related Work As mentioned above our approach to robustness can be categorized as fixed precision approximation.
Reference: [3] <author> H. Bronnimann, I. Emiris, V. Pan, and S. Pion. </author> <title> Computing exact geometric predicates using modular arithmetic with single precision. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 174-182, </pages> <year> 1997. </year>
Reference: [4] <author> H. Bronnimann and M. Yvinec. </author> <title> Efficient exact evaluation of signs of determinants. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 166-173, </pages> <year> 1997. </year>
Reference: [5] <author> C. Burnikel, K. Mehlhorn, and S. Schirra. </author> <title> On degeneracy in geometric computations. </title> <booktitle> In Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 16-23, </pages> <year> 1994. </year>
Reference-contexts: The second step is more challenging, especially when degeneracies need to be taken into account. Burnikel et al. <ref> [5] </ref> handle degeneracies also at the second stage. Indeed they achieve a clean solution for a 2D problem. We work with degeneracies only at the first stage, which is much simpler since we only work with features rather than with adjacencies.
Reference: [6] <author> K. L. Clarkson. </author> <title> Safe and effective determinant evaluation. </title> <booktitle> In Proc. 33rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 387-395, </pages> <year> 1992. </year> <month> 19 </month>
Reference: [7] <author> M.L. Connolly. </author> <title> Analytical molecular surface calculation. </title> <journal> Journal of Applied Crystallography, </journal> <volume> 16:548--558, </volume> <year> 1983. </year>
Reference: [8] <author> M.L. Connolly. </author> <title> Molecular surfaces: A review. </title> <institution> Network Science, </institution> <year> 1996. </year> <note> http://www.awod.com/netsci/Issues/Apr96/feature1.html. </note>
Reference-contexts: Ours is definitely not the first implementation of an algorithm for computing molecular surfaces; see, e.g., [7],[9],[29],[34] and the recent survey by Connolly <ref> [8] </ref>.
Reference: [9] <author> H. Edelsbrunner, M. Facello, P. Fu, and J. Liang. </author> <title> Measuring proteins and voids in proteins. </title> <type> Technical Report HKUST-CS94-19, </type> <institution> The Hong Kong University of Science and Technology, </institution> <year> 1994. </year>
Reference: [10] <author> H. Edelsbrunner and E. P. Mucke. </author> <title> Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 9 </volume> <pages> 66-104, </pages> <year> 1990. </year>
Reference: [11] <author> I. Emiris and J. Canny. </author> <title> An efficient approach to removing geometric degeneracies. </title> <booktitle> In Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 74-82, </pages> <year> 1992. </year>
Reference: [12] <author> P.W. Finn, D. Halperin, L. Kavraki, J.-C. Latombe, R. Motwani, C. Shelton, and S. Venkatsubrama-nian. </author> <title> Geometric manipulation of flexible ligands. </title> <editor> In Ming C. Lin and Dinesh Manocha, editors, </editor> <booktitle> Applied Computational Geometry: Towards Geometric Engineering, volume 1148 of Lecture Notes in Computer Science, </booktitle> <pages> pages 67-78. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Our software is part of a toolbox of data structures and algorithms aimed to support the chemist in the rational drug design process [2], and it is currently being used by chemists in a pharmaceutical company. Further details on the larger software (the toolbox) can be found in <ref> [12] </ref>. 1.3 Comparison with Related Work As mentioned above our approach to robustness can be categorized as fixed precision approximation. The approximation is achieved by a controlled perturbation that removes all degeneracies.
Reference: [13] <author> P.W. Finn, L. Kavraki, J.-C. Latombe, R. Motwani, C. Shelton, S. Venkatsubramanian, and F. Yao. </author> <title> Rapid: randomized pharmacophore identification for drug design. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 324-333, </pages> <year> 1997. </year>
Reference: [14] <author> S. Fortune. </author> <title> Ronustness issues in geometric algorithms. </title> <editor> In Ming C. Lin and Dinesh Manocha, editors, </editor> <booktitle> Applied Computational Geometry: Towards Geometric Engineering, volume 1148 of Lecture Notes in Computer Science, </booktitle> <pages> pages 9-14. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Here again there is a gap between what could in theory be handled by exact arithmetic and what current technology offers <ref> [14] </ref>. The software package that we describe in this paper computes the boundary of a union of spheres, the surface area of the boundary, and the intersection pattern of any sphere with all the other spheres in a given set.
Reference: [15] <author> S. Fortune and C. J. Van Wyk. </author> <title> Static analysis yields efficient exact arithmetic for computational geometry. </title> <journal> ACM Trans. on Graphics, </journal> <volume> 25(3) </volume> <pages> 223-248, </pages> <year> 1996. </year>
Reference: [16] <author> M. Goldwasser. </author> <title> An implementation for maintaining arrangements of polygons. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages C32-C33, </pages> <year> 1995. </year>
Reference-contexts: We call such a partitioning a spherical arrangement; see Figure 2 (a). If all the circles are great circles, then one can transform the spherical arrangement into a planar arrangement of lines [20], which is a simpler object to handle <ref> [16] </ref>. However, in our application the circles are not necessarily great circles. Each of the circles is the result of the intersection of S with another sphere. We refer to these more general circles as little circles.
Reference: [17] <author> M.T. Goodrich, L.J. Guibas, J. Hersgberger, and P.J. Tanenbaum. </author> <title> Snap rounding line segments efficiently in two and three dimensions. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 284-293, </pages> <year> 1997. </year>
Reference-contexts: In such cases, our scheme, if applied, can be viewed as part of the approximation. Another approach in the framework of fixed precision approximation is snap rounding [22]. This approach has been recently revisited <ref> [17] </ref> and has been successfully implemented for two-dimensional arrangements of segments. The disadvantage of this approach relative to ours is that not only snap-rounding does not resolve degeneracies, it in fact creates degeneracies.
Reference: [18] <author> D. H. Greene and F. F. Yao. </author> <title> Finite-resolution computational geometry. </title> <booktitle> In Proc. 27th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 143-152, </pages> <year> 1986. </year>
Reference: [19] <author> L. J. Guibas and J. Stolfi. </author> <title> Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams. </title> <journal> ACM Trans. Graph., </journal> <volume> 4 </volume> <pages> 74-123, </pages> <year> 1985. </year>
Reference-contexts: Higher level data structures for keeping track of atoms within multiple molecules and lower level code for computing intersections and storing the geometry of points and arc segments will be assumed for our discussion. For representing the spherical decompositions, we chose a variant of the quad-edge data structure <ref> [19] </ref>. This structure makes updating the subdivision simple. Each arc is stored as a plane and two points (thus the arc is the intersection of the plane and the sphere between the two points).
Reference: [20] <editor> D. Halperin. Arrangements. In Jacob E. Goodman and Joseph O'Rourke, editors, </editor> <booktitle> Handbook of Discrete and Computational Geometry, chapter 21, </booktitle> <pages> pages 389-412. </pages> <publisher> CRC Press LLC, </publisher> <year> 1997. </year>
Reference-contexts: We call such a partitioning a spherical arrangement; see Figure 2 (a). If all the circles are great circles, then one can transform the spherical arrangement into a planar arrangement of lines <ref> [20] </ref>, which is a simpler object to handle [16]. However, in our application the circles are not necessarily great circles. Each of the circles is the result of the intersection of S with another sphere. We refer to these more general circles as little circles. <p> We can apply a standard refinement procedure, called a trapezoidal decomposition that will make each face homeomorphic to a disc and have at most four edges on its boundary, as illustrated in Figure 2 (b); see, e.g., <ref> [20, Section 21.3] </ref> for more details on trapezoidal decompositions. In this context, we fix a pair of antipodal points as poles.
Reference: [21] <author> D. Halperin and M. H. Overmars. </author> <title> Spheres, molecules, and hidden surface removal. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 113-122, </pages> <year> 1994. </year>
Reference-contexts: We denote the maximum number of spheres in M intersecting any single sphere in M by k (as was shown in <ref> [21] </ref>, k is a constant for the hard sphere model of molecules; see also Section 2.2). For any given resolution value " &gt; 0, we determine a parameter ffi that depends on ", on k, and on the maximum radius R of a sphere in M . <p> It is evident that various properties of molecules are disregarded in this simple model. However, in spite of its approximate nature, it has proven useful in many practical applications. For more background material and references, see for example the survey paper by Mezey [26]. In <ref> [21] </ref> the hard sphere model is studied from a computational geometry point of view. Several observations are made in that paper showing that, because of certain special properties, the spheres in this model can be efficiently manipulated. We cite below the results that will be needed in later sections. <p> We cite below the results that will be needed in later sections. Theorem 2.1 states the conditions that make the sphere model of a molecule favorable. Theorem 2.2 summarizes a hash-table based data structure that is constructed exploiting these conditions. Theorem 2.1 <ref> [21] </ref> Let M = fB 1 ; : : : ; B n g be a collection of n balls in 3-space with radii r 1 ; : : : ; r n and centers at c 1 ; : : : ; c n . <p> Theorem 2.2 <ref> [21] </ref> Given a collection M of n balls as defined in Theorem 2.1, one can construct a data structure using O (n) space, to answer intersection queries for balls whose radii are not greater than R, the maximum radius of the balls of M , in O (1) time.
Reference: [22] <author> J. </author> <title> Hobby. Prcatical segment intersection with finite precision output. </title> <type> Technical Report 93/2-27, </type> <institution> Bell Laboratories (Lucent Technologies), </institution> <year> 1993. </year>
Reference-contexts: In such cases, our scheme, if applied, can be viewed as part of the approximation. Another approach in the framework of fixed precision approximation is snap rounding <ref> [22] </ref>. This approach has been recently revisited [17] and has been successfully implemented for two-dimensional arrangements of segments. The disadvantage of this approach relative to ours is that not only snap-rounding does not resolve degeneracies, it in fact creates degeneracies.
Reference: [23] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: The resolution parameter " depends on the floating point precision and on the type of operations (e.g., computing the intersection points of three spheres). We assume here that " is given. There are numerical analysis methods to compute useful bounds on "; see <ref> [23, Chapter 4] </ref> for examples concerning linear objects. We point out that in our algorithms the `depth of operations', namely how many times in a row the result of one operation is the operand in another operation, is bounded by a small constant.
Reference: [24] <author> C.M. Hoffmann. </author> <title> The problems of accuracy and robustness in geometric computation. </title> <journal> IEEE Computer, </journal> <volume> 22(3) </volume> <pages> 31-41, </pages> <month> March </month> <year> 1989. </year>
Reference: [25] <author> Ming C. Lin and Dinesh Manocha, </author> <title> editors. Applied Computational Geometry: Towards geometric Engineering. </title> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: These issues are collectively referred to as "robustness" and they have been the topic of extensive research. Surveys on the topic can be found in [24],[27],[36], also several brief state-of-the-art summaries on the topic are collected in <ref> [25] </ref>. In theory degeneracies are often handled by assuming general position, namely assuming that degeneracies do not occur. The general position assumption had contributed significantly to the advancement of geometric algorithms by letting the researchers focus on the key (theoretical) problems while ignoring many technical issues.
Reference: [26] <author> P.G. Mezey. </author> <title> Molecular surfaces. In K.B. </title> <editor> Lipkowitz and D.B. Boyd, editors, </editor> <booktitle> Reviews in Computational Chemistry, </booktitle> <volume> volume 1, </volume> <pages> pages 265-294. </pages> <publisher> VCH Publishers Inc., </publisher> <year> 1990. </year>
Reference-contexts: It is evident that various properties of molecules are disregarded in this simple model. However, in spite of its approximate nature, it has proven useful in many practical applications. For more background material and references, see for example the survey paper by Mezey <ref> [26] </ref>. In [21] the hard sphere model is studied from a computational geometry point of view. Several observations are made in that paper showing that, because of certain special properties, the spheres in this model can be efficiently manipulated.
Reference: [27] <author> V. Milenkovic. </author> <title> Verifiable implementations of geometric algorithms using finite precision arithmetic. </title> <journal> Artif. Intell., </journal> <volume> 37 </volume> <pages> 377-401, </pages> <year> 1988. </year> <month> 20 </month>
Reference: [28] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: When implementing a geometric algorithm however, degeneracies must be taken into consideration. The numerical precision problem was solved in the theory of geometric algorithms by assuming infinite precision real arithmetic <ref> [28] </ref>. For certain algorithms and geometric objects this assumption is realizable in practice by using exact arithmetic [1],[3],[4],[6],[15],[31],[37]. Computing with exact arithmetic is in general more costly than using floating point arithmetic, and in certain cases not realizable because of the geometric primitives that need to be manipulated.
Reference: [29] <author> M. F. Sanner, A. J. Olson, and J.-C. Spehner. </author> <title> Fast and robust computation of molecular surfaces. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages C6-C7, </pages> <year> 1995. </year>
Reference: [30] <author> R. Seidel. </author> <title> The nature and meaning of perturbations in geometric computing. </title> <booktitle> In Proc. 11th Sympos. Theoret. Aspects Comput. Sci. (STACS), volume 775 of Lecture Notes in Computer Science, </booktitle> <pages> pages 3-17. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [31] <author> J. R. Shewchuk. </author> <title> Robust adaptive floating-point geometric predicates. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 141-150, </pages> <year> 1996. </year>
Reference: [32] <author> K. Sugihara. </author> <title> On finite-precision representations of geometric objects. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 39 </volume> <pages> 236-247, </pages> <year> 1989. </year>
Reference: [33] <author> K. Sugihara and M. Iri. </author> <title> Two design principles of geometric algorithms in finite-precision arithmetic. </title> <journal> Appl. Math. Lett., </journal> <volume> 2(2) </volume> <pages> 203-206, </pages> <year> 1989. </year>
Reference-contexts: Our goal here is to devise robust algorithms that deal with intersecting spheres in IR 3 while using floating point arithmetic. Some examples of previous and related work on robust floating point geometric algorithms can be found in [17],[18],[22],[27],[32], and <ref> [33] </ref>. Our motivating application is geometric modeling of molecules. Our software package is part of a toolbox aimed to support the chemist in the drug design process [12],[13].
Reference: [34] <author> A. Varshney, F.P. Brooks Jr., and W.V. Wright. </author> <title> Computing smooth molecular surfaces. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 14 </volume> <pages> 19-25, </pages> <year> 1994. </year>
Reference: [35] <author> C. K. Yap. </author> <title> A geometric consistency theorem for a symbolic perturbation sch eme. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 40 </volume> <pages> 2-18, </pages> <year> 1990. </year>
Reference: [36] <author> C. K. Yap. </author> <title> Robust geometric computation. </title> <editor> In Jacob E. Goodman and Joseph O'Rourke, editors, </editor> <booktitle> Handbook of Discrete and Computational Geometry, chapter 35, </booktitle> <pages> pages 653-668. </pages> <publisher> CRC Press LLC, </publisher> <year> 1997. </year>
Reference: [37] <author> C. K. Yap and T. Dube. </author> <title> The exact computation paradigm. </title> <editor> In D.Z. Du and F. Hwang, editors, </editor> <booktitle> Computing in Euclidean Geometry, </booktitle> <pages> pages 452-492. </pages> <publisher> World Scientific, </publisher> <year> 1995. </year>
References-found: 37

