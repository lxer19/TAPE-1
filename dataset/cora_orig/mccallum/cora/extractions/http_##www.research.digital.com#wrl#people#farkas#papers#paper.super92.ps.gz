URL: http://www.research.digital.com/wrl/people/farkas/papers/paper.super92.ps.gz
Refering-URL: http://www.research.digital.com/wrl/people/farkas/papers/paper.super92.html
Root-URL: http://www.research.digital.com
Email: email: farkas@eecg.toronto.edu  
Title: Cache Consistency in Hierarchical-Ring-Based Multiprocessors  
Author: Keith Farkas Zvonko Vranesic Michael Stumm 
Web: EECG TR-92-09-01  
Address: Toronto, Ontario, Canada M5S 1A4  
Affiliation: Department of Electrical Engineering University of Toronto  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Luiz Barroso and Michel Dubois. </author> <title> Cache coherence on a slotted ring. </title> <booktitle> Proc. of the International Conference on Parallel Processing, </booktitle> <volume> 1 (Architecture):230-237, </volume> <year> 1991. </year>
Reference-contexts: For example, in a ring-connected system a message may have to traverse the entire ring n times in the worst case, if there are n active copies of the data to be invalidated. Barroso and Dubois <ref> [1] </ref> have proposed a scheme for a system of processors interconnected by a unidirectional ring that relies on snooping and thus avoids the multiple-traversal problem of the SCI protocol. <p> In this paper, we propose a selective-broadcast based cache consistency protocol that addresses the three complications listed above for a class of multiprocessors based on hierarchical rings. Ring-based networks have been investigated <ref> [1, 6, 10, 11, 16] </ref> as a means for implementing high performance interconnection backplanes because they offer a number of advantages. Having point-to-point interconnections, large rings can be driven at very high clock rates. Rings also exhibit natural broadcast and ordering properties that facilitate the implementation of cache consistency protocols.
Reference: [2] <author> D. Chaiken, C. Fields, K. Kurihara, and A. Agar-wal. </author> <title> Directory-based cache coherence in large-scale multiprocessors. </title> <journal> Computer, </journal> <volume> 23(6) </volume> <pages> 49-58, </pages> <year> 1990. </year>
Reference-contexts: A description of the fourth application and the method used to acquire the trace was presented by Chaiken et al. <ref> [2] </ref>. This is a pure data trace that contains only shared-data accesses.
Reference: [3] <author> D. Chaiken, J. Kubiatowicz, and A. Agarwal. </author> <title> Limitless directories: A scalable cache coherence scheme. </title> <booktitle> Proceedings of the Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 224-234, </pages> <year> 1991. </year>
Reference-contexts: Limited-map directory schemes attempt to address the issue of bandwidth consumption by limiting the broadcasts of cache control messages to only those processors which have a copy of the accessed item, while at the same time reducing the amount of state information. The MIT Alewife multiprocessor <ref> [3] </ref> implements a version of such a protocol in which the broadcasting is handled by the hardware if the degree of sharing is small and otherwise by software. In using this hardware/software approach, the poor scalability of limited-directory schemes is avoided [3]. <p> The MIT Alewife multiprocessor <ref> [3] </ref> implements a version of such a protocol in which the broadcasting is handled by the hardware if the degree of sharing is small and otherwise by software. In using this hardware/software approach, the poor scalability of limited-directory schemes is avoided [3]. A related approach is implemented by the DASH multiprocessor [14], which uses a full-map directory but the amount of state information is reduced by grouping processors into clusters. Consistency within a cluster is maintained via snooping.
Reference: [4] <author> Michel Dubois, Christoph Scheurich, and Faye A. Briggs. </author> <title> Memory access buffering in multiprocessors. </title> <booktitle> Proc. of the 13th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 434-442, </pages> <year> 1986. </year>
Reference-contexts: Sequential Consistency It is essential to be able to demonstrate that a cache-consistency protocol correctly enforces the desired memory model. To do so entails showing that the necessary ordering of shared-memory accesses is preserved. Methods for demonstrating consistency have been put forth by a number of researchers <ref> [4, 7, 13, 15] </ref>, where a set of memory-model specific conditions are specified that must be met by each processor in the multiprocessor system. If it can be shown that each processor adheres to these conditions, then the system correctly enforces the desired memory model.
Reference: [5] <author> Keith I. Farkas. </author> <title> A decentralized hierarchi-cal cache-consistency scheme for shared-memory multiprocessors. </title> <type> Master's thesis, </type> <institution> University of Toronto, </institution> <month> April </month> <year> 1991. </year> <month> April. </month>
Reference-contexts: If it can be shown that each processor adheres to these conditions, then the system correctly enforces the desired memory model. Using the conditions proposed by Scheurich, it can be shown that the proposed invalidation protocol enforces sequential consistency <ref> [5] </ref>. Three features of the Hector architecture guarantee that the necessary ordering of shared accesses is preserved. <p> To implement this locking, the protocol is augmented by a third phase. In the second phase of the protocol, the cached copies are updated and are also locked, thus preventing read or write accesses to the data item. Then, in the third phase, all copies are unlocked <ref> [5] </ref>. As in the case of the invalidation protocol, the locking of the cache lines is required to prevent two processors from observing updates to different locations in different orders. <p> This policy requires first detecting that an access to an item that is dirty has been made and second guaranteeing that for a read request, the requester gets a copy of the valid data; the difficulties with this approach are discussed in more detail in <ref> [5] </ref>. For single bus-based systems, these two requirements are easily accommodated as all data transfers are simultaneously visible to all processor modules. <p> Because of the differences, the invalidating protocol described in Section 3 had to be slightly modified. These modifications and the simulator are described in <ref> [5] </ref>. 5.1 Simulation Methodology A number of different system topologies were simulated for 32 processor and 64 processor systems. In each system, processor modules comprised 64-Kbyte instruction and 64-Kbyte data caches, a processor, and 16 Mbytes of the global memory. <p> We will illustrate by an example why locking is necessary to impose a global ordering on the updates. A more formal discussion on locking and on the requirements for sequential consistency is given in <ref> [5] </ref>. Invalidating caches are assumed, although the discussion is also applicable to updating caches. Consider four processors A,B,C and D which share two locations X and Y. Assume that processor A is close to B in the network, and processor C is close to D.
Reference: [6] <author> M. Ferrante. </author> <title> Cyberplus and map v interprocessor communications for parallel and array processor systems. </title> <booktitle> Proc. of Third Conference on Multiprocessors and Array Processors, </booktitle> <pages> pages 45-54, </pages> <year> 1987. </year>
Reference-contexts: In this paper, we propose a selective-broadcast based cache consistency protocol that addresses the three complications listed above for a class of multiprocessors based on hierarchical rings. Ring-based networks have been investigated <ref> [1, 6, 10, 11, 16] </ref> as a means for implementing high performance interconnection backplanes because they offer a number of advantages. Having point-to-point interconnections, large rings can be driven at very high clock rates. Rings also exhibit natural broadcast and ordering properties that facilitate the implementation of cache consistency protocols.
Reference: [7] <author> K. Gharachorloo, D. Lenoski, J. Laudon, P. Gibbons, A. Gupta, and J. Hennessy. </author> <title> Memory consistency and event ordering in scalable shared-memory multiprocessors. </title> <booktitle> Proc. of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 15-26, </pages> <year> 1990. </year>
Reference-contexts: Sequential Consistency It is essential to be able to demonstrate that a cache-consistency protocol correctly enforces the desired memory model. To do so entails showing that the necessary ordering of shared-memory accesses is preserved. Methods for demonstrating consistency have been put forth by a number of researchers <ref> [4, 7, 13, 15] </ref>, where a set of memory-model specific conditions are specified that must be met by each processor in the multiprocessor system. If it can be shown that each processor adheres to these conditions, then the system correctly enforces the desired memory model. <p> In so doing, it prevents many hardware optimizations that could increase system performance. For these reasons, weaker memory models have been considered. One such model is the processor consistency model [8] provided by several commercial multiprocessors, including the VAX 8800 and the Silicon Graphics POWER Station <ref> [7] </ref> which both employ a single bus thus rendering the consistency protocol simpler that the one we propose.
Reference: [8] <author> James Goodman. </author> <title> Cache consistency and sequential consistency. </title> <type> Technical Report 61, </type> <institution> SCI Committee, </institution> <year> 1989. </year>
Reference-contexts: Having point-to-point interconnections, large rings can be driven at very high clock rates. Rings also exhibit natural broadcast and ordering properties that facilitate the implementation of cache consistency protocols. The proposed protocol can easily be used to achieve various consistency models, including sequential consistency [12] and processor consistency <ref> [8] </ref>. In the next section, we define the class of machines for which the protocol is targeted. Section 3 presents the new protocol. Section 4 discusses several performance issues and enhancements to the basic protocol. <p> In so doing, it prevents many hardware optimizations that could increase system performance. For these reasons, weaker memory models have been considered. One such model is the processor consistency model <ref> [8] </ref> provided by several commercial multiprocessors, including the VAX 8800 and the Silicon Graphics POWER Station [7] which both employ a single bus thus rendering the consistency protocol simpler that the one we propose.
Reference: [9] <author> D.B. Gustavson. </author> <title> The scalable coherent interface and related standards projects. </title> <journal> IEEE Micro, </journal> <volume> 12(1) </volume> <pages> 10-22, </pages> <year> 1992. </year>
Reference-contexts: A related approach is implemented by the DASH multiprocessor [14], which uses a full-map directory but the amount of state information is reduced by grouping processors into clusters. Consistency within a cluster is maintained via snooping. A third cache-consistency scheme, implemented by the IEEE SCI protocol <ref> [9] </ref>, uses linked lists as opposed to the directories used in the DASH and Alewife systems. The linked lists, maintained by pointers in each cache block frame, are used to identify the nodes with a copy of a given data item.
Reference: [10] <author> Robert Halstead, Jr., Thomas I. Anderson, Randy B. Osborne, and Thomas L. Sterling. </author> <title> Concert: Design of a multiprocessor development system. </title> <booktitle> Proc. of the 13th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 40-48, </pages> <year> 1986. </year>
Reference-contexts: In this paper, we propose a selective-broadcast based cache consistency protocol that addresses the three complications listed above for a class of multiprocessors based on hierarchical rings. Ring-based networks have been investigated <ref> [1, 6, 10, 11, 16] </ref> as a means for implementing high performance interconnection backplanes because they offer a number of advantages. Having point-to-point interconnections, large rings can be driven at very high clock rates. Rings also exhibit natural broadcast and ordering properties that facilitate the implementation of cache consistency protocols.
Reference: [11] <author> David V. James, Anthony T. Laundrie, Stein Gjessing, and Gurindar S. Sohi. </author> <title> Scalable coherent interface. </title> <journal> Computer, </journal> <volume> 23(6) </volume> <pages> 74-77, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: In this paper, we propose a selective-broadcast based cache consistency protocol that addresses the three complications listed above for a class of multiprocessors based on hierarchical rings. Ring-based networks have been investigated <ref> [1, 6, 10, 11, 16] </ref> as a means for implementing high performance interconnection backplanes because they offer a number of advantages. Having point-to-point interconnections, large rings can be driven at very high clock rates. Rings also exhibit natural broadcast and ordering properties that facilitate the implementation of cache consistency protocols.
Reference: [12] <author> Leslie Lamport. </author> <title> How to make a multiprocessor computer that correctly executes multiprocess programs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> c-28(9):690-691, </volume> <month> Sep </month> <year> 1979. </year>
Reference-contexts: Having point-to-point interconnections, large rings can be driven at very high clock rates. Rings also exhibit natural broadcast and ordering properties that facilitate the implementation of cache consistency protocols. The proposed protocol can easily be used to achieve various consistency models, including sequential consistency <ref> [12] </ref> and processor consistency [8]. In the next section, we define the class of machines for which the protocol is targeted. Section 3 presents the new protocol. Section 4 discusses several performance issues and enhancements to the basic protocol.
Reference: [13] <author> A. Landin, E. Hagersten, and S. Haridi. </author> <title> Race-free interconnection networks and multiprocessor consistency. </title> <booktitle> Proc. of the 18th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 106-115, </pages> <year> 1991. </year>
Reference-contexts: First, due to limited bandwidth of a single bus, large-scale multiprocessors have more complex interconnection networks. These networks use split-cycle protocols and allow concurrent memory accesses. In some cases these networks are not race-free <ref> [13] </ref>, which makes it difficult to impose a global ordering on accesses. The second complication pertains to the increased potential for contention at some of the system nodes such as network links or memory modules. <p> Sequential Consistency It is essential to be able to demonstrate that a cache-consistency protocol correctly enforces the desired memory model. To do so entails showing that the necessary ordering of shared-memory accesses is preserved. Methods for demonstrating consistency have been put forth by a number of researchers <ref> [4, 7, 13, 15] </ref>, where a set of memory-model specific conditions are specified that must be met by each processor in the multiprocessor system. If it can be shown that each processor adheres to these conditions, then the system correctly enforces the desired memory model.
Reference: [14] <author> A. D. Lenoski, J. Laudon, K. Gharachorloo, A. Gupta, and J. Hennessy. </author> <title> Directory-based cache coherence protocol for the DASH multiprocessor. </title> <booktitle> Proc. of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 148-158, </pages> <year> 1990. </year>
Reference-contexts: In using this hardware/software approach, the poor scalability of limited-directory schemes is avoided [3]. A related approach is implemented by the DASH multiprocessor <ref> [14] </ref>, which uses a full-map directory but the amount of state information is reduced by grouping processors into clusters. Consistency within a cluster is maintained via snooping.
Reference: [15] <author> Christoph Ernst Scheurich. </author> <title> Access Ordering and Coherence in Shared Memory Multiprocessors. </title> <type> PhD thesis, </type> <institution> University of Southern California, </institution> <month> May </month> <year> 1989. </year> <note> Tech Report no. CENG 89-19. </note>
Reference-contexts: Sequential Consistency It is essential to be able to demonstrate that a cache-consistency protocol correctly enforces the desired memory model. To do so entails showing that the necessary ordering of shared-memory accesses is preserved. Methods for demonstrating consistency have been put forth by a number of researchers <ref> [4, 7, 13, 15] </ref>, where a set of memory-model specific conditions are specified that must be met by each processor in the multiprocessor system. If it can be shown that each processor adheres to these conditions, then the system correctly enforces the desired memory model.
Reference: [16] <author> Zvonko G. Vranesic, Michael Stumm, David M. Lewis, and Ron White. Hector: </author> <title> A hierarchically structured shared-memory multiprocessor. </title> <journal> Computer, </journal> <volume> 24(1) </volume> <pages> 72-79, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: In this paper, we propose a selective-broadcast based cache consistency protocol that addresses the three complications listed above for a class of multiprocessors based on hierarchical rings. Ring-based networks have been investigated <ref> [1, 6, 10, 11, 16] </ref> as a means for implementing high performance interconnection backplanes because they offer a number of advantages. Having point-to-point interconnections, large rings can be driven at very high clock rates. Rings also exhibit natural broadcast and ordering properties that facilitate the implementation of cache consistency protocols. <p> In order to clarify the presentation, we will describe without loss of generality the protocol as it would apply to the Hector multiprocessor architecture <ref> [16] </ref>. The target architecture consists of clusters of processor and memory modules, interconnected by rings. In Hector, a cluster is called a station, within which a split-cycle bus is used as the interconnection medium. <p> Because a meaningful evaluation demands that a detailed simulation model be employed, we decided to model the Hector multiprocessor at the register level. The Hector multiprocessor <ref> [16] </ref> is similar to the target system, with the most important differences being that in Hector the memory is distributed among the processor modules instead of residing in separate modules. Because of the differences, the invalidating protocol described in Section 3 had to be slightly modified.
Reference: [17] <author> Wolf-Dietrich Weber and Anoop Gupta. </author> <title> Analysis of cache invalidations patterns in multiprocessors. </title> <booktitle> Proceedings of the Third International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 243-255, </pages> <year> 1989. </year>
Reference-contexts: x 16 x 1 2 x 8 x 2 4 x 4 x 2 2 x 4 x 4 4 x 2 x 4 measured at the time the first processor completed its task. the applications and the methods used to acquire the traces was presented by Weber and Gupta <ref> [17] </ref>. A description of the fourth application and the method used to acquire the trace was presented by Chaiken et al. [2]. This is a pure data trace that contains only shared-data accesses.
References-found: 17

