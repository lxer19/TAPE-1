URL: http://info.internet.isi.edu:80/in-notes/rfc/files/rfc1129.ps
Refering-URL: http://info.internet.isi.edu:80/in-notes/rfc/files/
Root-URL: http://www.isi.edu
Title: Abstract  Internet Time Synchronization: the Network Time Protocol  
Author: D. L. Mills Mills Page i 
Keyword: network clock synchronization, standard time distribution, fault-tolerant architecture, maximum-likelihood estimation, disciplined oscillator, Internet protocol.  
Date: October 1989  
Affiliation: University of Delaware  
Note: This memo describes the Network Time Protocol, which is specified as an Internet Standard in RFC-1119. Distribution of this memo is unlimited.  Network Working Group  Request for Comments: 1129  
Abstract: This memo describes the Network Time Protocol (NTP) designed to distribute time information in a large, diverse internet system operating at speeds from mundane to lightwave. It uses a returnable-time architecture in which a distributed subnet of time servers operating in a self-organizing, hierarchical, master-slave configuration synchronizes local clocks within the subnet and to national time standards via wire or radio. The servers can also redistribute time information within a network via local routing algorithms and time daemons. The architectures, algorithms and protocols which have evolved to NTP over several years of implementation and refinement are described in this paper. The synchronization subnet which has been in regular operation in the Internet for the last several years is described along with performance data which shows that timekeeping accuracy throughout most portions of the Internet can be ordinarily maintained to within a few tens of milliseconds, even in cases of failure or disruption of clocks, time servers or networks. 
Abstract-found: 1
Intro-found: 1
Reference: [BER87] <author> Bertsekas, D., and R. Gallager. </author> <title> Data Networks. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1987. </year>
Reference-contexts: An additional factor is that each increment in stratum involves a potentially unreliable time server which introduces additional measurement errors. The selection algorithm used in NTP uses a variant of the Bellman-Ford distributed routing algorithm <ref> [BER87] </ref> to compute the minimum-weight spanning trees rooted on the primary servers. With the foregoing factors in mind, the distance metric used by the algorithm was chosen using the stratum number as the high-order bits and synchronizing distance as the low-order bits. 3.
Reference: [BLA74] <author> Blair, </author> <title> B.E. (Ed.). Time and Frequency Theory and Fundamentals. </title> <institution> National Bureau of Standards Monograph 140, U.S. Department of Commerce, </institution> <year> 1974. </year>
Reference-contexts: Time Standards and Distribution Since 1972 the time and frequency standards of the world have been based on International Atomic Time (TAI), which is currently maintained using multiple cesium-beam clocks to an accuracy of a few parts in 10 12 <ref> [BLA74] </ref>. The Bureau International de l'Heure (BIH) uses astronomical observations provided by the U.S. Naval Observatory and other observatories to determine corrections for small changes in the mean solar rotation period of the Earth, which results in Coordinated Universal Time (UTC). <p> As experience accumulates, improvements are being made continuously to the filtering and selection algorithms described in this paper. For example, a possible way to improve accuracy involves the combination of selected peer offsets and computing the ensemble offset using techniques suggested in <ref> [BLA74] </ref>. Another improvement involves the dynamic activation of selected peer associations when other peer associations become unreachable. The intent of this suggestion is to further reduce the polling overheads when a large number of possible peers are available, but only a few are needed for reliable synchronization.
Reference: [BRA80] <author> Braun, W.B. </author> <title> Short term frequency effects in networks of coupled oscillators. </title> <journal> IEEE Trans. Communications COM-28, </journal> <month> 8 (August </month> <year> 1980), </year> <pages> 1269-1275. </pages>
Reference-contexts: As the stratum increases from one, the accuracies achievable will degrade depending on the network paths and local clock stabilities. In order to avoid the tedious calculations <ref> [BRA80] </ref> necessary to estimate errors in each specific configuration, it is useful to assume the measurement errors accumulate approximately in proportion to the total roundtrip path delay to the root of the synchronization subnet, which is called the synchronizing distance.
Reference: [COL88] <author> Cole, R., and C. Foxcroft. </author> <title> An experiment in clock synchronisation. </title> <journal> The Computer Journal 31, </journal> <volume> 6 (1988), </volume> <pages> 496-502. </pages>
Reference-contexts: The Unix 4.3bsd time daemon timed [GUS85a] uses an elected master host [GUS85b] to measure offsets of a number of slave hosts and send periodic corrections to them. Experimental results on measured times and delays in the Internet are discussed in <ref> [COL88] </ref>, [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies.
Reference: [DAR81a] <institution> Defense Advanced Research Projects Agency. Internet Control Message Protocol. DARPA Network Working Group Report RFC-792, U.S.C. Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: Various mechanisms have been used in the Internet protocol suite to record and transmit the time at which an event takes place, including the Daytime protocol [POS83a], Time protocol [POS83b], ICMP Timestamp message <ref> [DAR81a] </ref> and IP Timestamp option [SU81]. In the Hellospeak routing protocol [MIL83b] one or more processes synchronize to an external reference source, such as a timecode receiver or time daemon, and the corrections are distributed via routing updates and a minimum-delay spanning tree rooted on these processes. <p> It is evolved from the Time Protocol [POS83b] and the RFC 1129 Network Time Synchronization October 1989 Mills Page 5 ICMP Timestamp Message <ref> [DAR81a] </ref>, but is specifically designed to maintain accuracy and reliability, even when used over typical Internet paths involving multiple gateways and unreliable nets. There is no provision for peer discovery, acquisition, or authentication in NTP itself, although some implementations include these features.
Reference: [DAR81b] <institution> Defense Advanced Research Projects Agency. Internet Protocol. DARPA Network Working Group Report RFC-791, U.S.C. Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: The protocol was first described in [MIL85c], extensively revised in successive versions and recently established as a formal Internet Standard protocol [MIL89a]. NTP is built on the Internet Protocol (IP) <ref> [DAR81b] </ref> and User Datagram Protocol (UDP) [POS80], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites.
Reference: [GUS84] <author> Gusella, R., and S. Zatti. </author> <title> TEMPO - A network time controller for a distributed Berkeley UNIX system. </title> <note> IEEE Distributed Processing Technical Committee Newsletter 6, NoSI-2 (June 1984), 7-15. Also in: Proc. </note> <institution> Summer 1984 USENIX (Salt Lake City, </institution> <month> June </month> <year> 1984). </year>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in <ref> [GUS84] </ref>, [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies.
Reference: [GUS85a] <author> Gusella, R., and S. Zatti. </author> <title> The Berkeley UNIX 4.3BSD time synchronization protocol: protocol specification. </title> <type> Technical Report UCB/CSD 85/250, </type> <institution> University of California, Berkeley, </institution> <month> June </month> <year> 1985. </year>
Reference-contexts: In the Hellospeak routing protocol [MIL83b] one or more processes synchronize to an external reference source, such as a timecode receiver or time daemon, and the corrections are distributed via routing updates and a minimum-delay spanning tree rooted on these processes. The Unix 4.3bsd time daemon timed <ref> [GUS85a] </ref> uses an elected master host [GUS85b] to measure offsets of a number of slave hosts and send periodic corrections to them. Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b].
Reference: [GUS85b] <author> Gusella, R., and S. Zatti. </author> <title> An election algorithm for a distributed clock synchronization program. </title> <type> Technical Report UCB/CSD 86/275, </type> <institution> University of California, Berkeley, </institution> <month> December </month> <year> 1985. </year>
Reference-contexts: The Unix 4.3bsd time daemon timed [GUS85a] uses an elected master host <ref> [GUS85b] </ref> to measure offsets of a number of slave hosts and send periodic corrections to them. Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b].
Reference: [HAL84] <author> Halpern, J.Y., B. Simons, R. Strong and D. Dolly. </author> <title> Fault-tolerant clock synchronization. </title> <booktitle> Proc. Third Annual ACM Sympos. on Principles of Distributed Computing (August 1984), </booktitle> <pages> 89-102. </pages>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], <ref> [HAL84] </ref>, [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. <p> In following subsections the issues, approaches and designs of these algorithms are discussed. 4.1. Data Filtering A number of algorithms for deglitching and filtering time-offset data have been described previously, such as in [MIL85a], <ref> [HAL84] </ref> and [KOP87]. These fall in two classes: majority-subset algorithms, which attempt to separate good subsets from bad by comparing statistics such as mean and variance, and clustering algorithms, which attempt to improve the estimate by repeatedly casting out outlyers. <p> There are two classes of convergence functions, those involving interactive convergence algorithms and those involving interactive consistency algorithms. Interactive convergence algorithms use statistical clustering techniques such as the fault-tolerant average algorithm of <ref> [HAL84] </ref>, the CNV algorithm of [LUN84], the majority-subset algorithm of [MIL85a], the non-Byzantine algorithm of [RIC88], the egocentric algorithm of [SCH86] and the algorithm described below in this paper. <p> Interactive consistency algorithms are designed to detect faulty clock processes which might indicate grossly inconsistent offsets in successive readings or to different readers. These algorithms use an agreement protocol involving successive rounds of readings, possibly relayed and possibly augmented by digital signatures. Examples include the fireworks algorithm of <ref> [HAL84] </ref> and the optimum algorithm of [SRI87]. However, these algorithms require an excessive burden of messages, especially when large numbers of clocks are involved, and are designed to detect faults that have rarely been found in the Internet experience. For these reasons they are not considered further in this paper.
Reference: [KOP87] <author> Kopetz, H., and W. Ochsenreiter. </author> <title> Clock synchronization in distributed real-time systems. </title> <journal> IEEE Trans. Computers C-36, </journal> <month> 8 (August </month> <year> 1987), </year> <pages> 933-939. </pages>
Reference-contexts: In following subsections the issues, approaches and designs of these algorithms are discussed. 4.1. Data Filtering A number of algorithms for deglitching and filtering time-offset data have been described previously, such as in [MIL85a], [HAL84] and <ref> [KOP87] </ref>. These fall in two classes: majority-subset algorithms, which attempt to separate good subsets from bad by comparing statistics such as mean and variance, and clustering algorithms, which attempt to improve the estimate by repeatedly casting out outlyers.
Reference: [LAM78] <author> Lamport, L., </author> <title> Time, clocks and the ordering of events in a distributed system. </title> <journal> Comm. ACM 21, </journal> <month> 7 (July </month> <year> 1978), </year> <pages> 558-565. </pages>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], <ref> [LAM78] </ref>, [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. <p> A good deal of research has gone into mechanisms to synchronize clocks in a community where some clocks cannot be trusted. Determining whether a particular clock is a truechimer or falseticker is an interesting abstract problem which can be attacked using methods such as described in <ref> [LAM78] </ref>, [LAM85], [MAR85] and [SCH86]. In methods described in the literature a convergence function operates upon the offsets between the clocks in a system to increase the reliability by reducing or eliminating errors caused by falsetickers.
Reference: [LAM85] <author> Lamport, L., </author> <title> and P.M. Melliar-Smith. Synchronizing clocks in the presence of faults. </title> <type> JACM 32, </type> <month> 1 (January </month> <year> 1985), </year> <pages> 52-78. </pages>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], <ref> [LAM85] </ref>, [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. <p> NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [LIN80], while Byzantine methods for clock synchronization are summarized in <ref> [LAM85] </ref>. In an internet system involving many networks and gateways a useful approach is to equip a few strategically located time-server hosts (or gateways) with timecode receivers and coordinate time distribution using a suitable internet protocol. <p> While reliable clock synchronization has been studied using agreement algorithms <ref> [LAM85] </ref>, [SRI87], in practice it is not possible to distinguish the truechimer clocks, which maintain timekeeping accuracy to a previously published (and trusted) standard, from the falseticker clocks, which do not, on other than a statistical basis. <p> A good deal of research has gone into mechanisms to synchronize clocks in a community where some clocks cannot be trusted. Determining whether a particular clock is a truechimer or falseticker is an interesting abstract problem which can be attacked using methods such as described in [LAM78], <ref> [LAM85] </ref>, [MAR85] and [SCH86]. In methods described in the literature a convergence function operates upon the offsets between the clocks in a system to increase the reliability by reducing or eliminating errors caused by falsetickers.
Reference: [LIN80] <author> Lindsay, W.C., and A.V. Kantak. </author> <title> Network synchronization of random signals. </title> <journal> IEEE Trans. Communications COM-28, </journal> <month> 8 (August </month> <year> 1980), </year> <month> 1260-1266. </month> <title> RFC 1129 Network Time Synchronization October 1989 Mills Page 25 </title>
Reference-contexts: NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in <ref> [LIN80] </ref>, while Byzantine methods for clock synchronization are summarized in [LAM85]. In an internet system involving many networks and gateways a useful approach is to equip a few strategically located time-server hosts (or gateways) with timecode receivers and coordinate time distribution using a suitable internet protocol.
Reference: [LUN84] <author> Lundelius, J., and N.A. Lynch. </author> <title> A new fault-tolerant algorithm for clock synchronization. </title> <booktitle> Proc. Third Annual ACM Sympos. on Principles of Distributed Computing (August 1984), </booktitle> <pages> 75-88. </pages>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], <ref> [LUN84] </ref>, [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. <p> There are two classes of convergence functions, those involving interactive convergence algorithms and those involving interactive consistency algorithms. Interactive convergence algorithms use statistical clustering techniques such as the fault-tolerant average algorithm of [HAL84], the CNV algorithm of <ref> [LUN84] </ref>, the majority-subset algorithm of [MIL85a], the non-Byzantine algorithm of [RIC88], the egocentric algorithm of [SCH86] and the algorithm described below in this paper. Interactive consistency algorithms are designed to detect faulty clock processes which might indicate grossly inconsistent offsets in successive readings or to different readers.
Reference: [MAR85] <author> Marzullo, K., and S. Owicki. </author> <title> Maintaining the time in a distributed system. </title> <booktitle> ACM Operating Systems Review 19, </booktitle> <month> 3 (July </month> <year> 1985), </year> <pages> 44-54. </pages>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], <ref> [MAR85] </ref>, [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. <p> A good deal of research has gone into mechanisms to synchronize clocks in a community where some clocks cannot be trusted. Determining whether a particular clock is a truechimer or falseticker is an interesting abstract problem which can be attacked using methods such as described in [LAM78], [LAM85], <ref> [MAR85] </ref> and [SCH86]. In methods described in the literature a convergence function operates upon the offsets between the clocks in a system to increase the reliability by reducing or eliminating errors caused by falsetickers.
Reference: [MIL81] <author> Mills, </author> <title> D.L. Time Synchronization in DCNET Hosts. DARPA Internet Project Report IEN-173, </title> <institution> COMSAT Laboratories, </institution> <month> February </month> <year> 1981. </year>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in <ref> [MIL81] </ref>, [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [LIN80], while Byzantine methods for clock synchronization are summarized in [LAM85].
Reference: [MIL83a] <author> Mills, </author> <title> D.L. Internet Delay Experiments. DARPA Network Working Group Report RFC-889, </title> <address> M/A-COM Linkabit, </address> <month> December </month> <year> 1983. </year>
Reference-contexts: The Unix 4.3bsd time daemon timed [GUS85a] uses an elected master host [GUS85b] to measure offsets of a number of slave hosts and send periodic corrections to them. Experimental results on measured times and delays in the Internet are discussed in [COL88], <ref> [MIL83a] </ref> and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies.
Reference: [MIL83b] <author> Mills, </author> <title> D.L. DCN local-network protocols. DARPA Network Working Group Report RFC-891, </title> <address> M/A-COM Linkabit, </address> <month> December </month> <year> 1983. </year>
Reference-contexts: Various mechanisms have been used in the Internet protocol suite to record and transmit the time at which an event takes place, including the Daytime protocol [POS83a], Time protocol [POS83b], ICMP Timestamp message [DAR81a] and IP Timestamp option [SU81]. In the Hellospeak routing protocol <ref> [MIL83b] </ref> one or more processes synchronize to an external reference source, such as a timecode receiver or time daemon, and the corrections are distributed via routing updates and a minimum-delay spanning tree rooted on these processes.
Reference: [MIL85a] <author> Mills, </author> <title> D.L. Algorithms for synchronizing network clocks. DARPA Network Working Group Report RFC-956, </title> <address> M/A-COM Linkabit, </address> <month> September </month> <year> 1985. </year>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], <ref> [MIL85a] </ref>, [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. <p> Therefore, the development of algorithms appropriate for ubiquitous Internet application has involved a process of stepwise refinement, beginning with the designs suggested in <ref> [MIL85a] </ref>, refined as the results of experiments described in [MIL85b] and [MIL89b] and evolved over several years of operation under widely varying conditions of path qualities and reliabilities. In following subsections the issues, approaches and designs of these algorithms are discussed. 4.1. <p> In following subsections the issues, approaches and designs of these algorithms are discussed. 4.1. Data Filtering A number of algorithms for deglitching and filtering time-offset data have been described previously, such as in <ref> [MIL85a] </ref>, [HAL84] and [KOP87]. These fall in two classes: majority-subset algorithms, which attempt to separate good subsets from bad by comparing statistics such as mean and variance, and clustering algorithms, which attempt to improve the estimate by repeatedly casting out outlyers. <p> There are two classes of convergence functions, those involving interactive convergence algorithms and those involving interactive consistency algorithms. Interactive convergence algorithms use statistical clustering techniques such as the fault-tolerant average algorithm of [HAL84], the CNV algorithm of [LUN84], the majority-subset algorithm of <ref> [MIL85a] </ref>, the non-Byzantine algorithm of [RIC88], the egocentric algorithm of [SCH86] and the algorithm described below in this paper. Interactive consistency algorithms are designed to detect faulty clock processes which might indicate grossly inconsistent offsets in successive readings or to different readers.
Reference: [MIL85b] <author> Mills, </author> <title> D.L. Experiments in network clock synchronization. DARPA Network Working Group Report RFC-957, </title> <address> M/A-COM Linkabit, </address> <month> September </month> <year> 1985. </year>
Reference-contexts: The Unix 4.3bsd time daemon timed [GUS85a] uses an elected master host [GUS85b] to measure offsets of a number of slave hosts and send periodic corrections to them. Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and <ref> [MIL85b] </ref>. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. <p> Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and <ref> [MIL85b] </ref>. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. <p> Therefore, the development of algorithms appropriate for ubiquitous Internet application has involved a process of stepwise refinement, beginning with the designs suggested in [MIL85a], refined as the results of experiments described in <ref> [MIL85b] </ref> and [MIL89b] and evolved over several years of operation under widely varying conditions of path qualities and reliabilities. In following subsections the issues, approaches and designs of these algorithms are discussed. 4.1.
Reference: [MIL85c] <author> Mills, </author> <title> D.L. Network Time Protocol (NTP). DARPA Network Working Group Report RFC-958, </title> <address> M/A-COM Linkabit, </address> <month> September </month> <year> 1985. </year>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], <ref> [MIL85c] </ref>, [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [LIN80], while Byzantine methods for clock synchronization are summarized in [LAM85]. <p> Network Time Protocol The Network Time Protocol (NTP) is used to construct and maintain a set of time servers and transmission paths as a synchronization subnet. The protocol was first described in <ref> [MIL85c] </ref>, extensively revised in successive versions and recently established as a formal Internet Standard protocol [MIL89a]. NTP is built on the Internet Protocol (IP) [DAR81b] and User Datagram Protocol (UDP) [POS80], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites.
Reference: [MIL88] <author> Mills, </author> <title> D.L. </title> <booktitle> The fuzzball. Proc. ACM SIGCOMM 88 Symposium (Palo Alto, </booktitle> <address> CA, </address> <month> August </month> <year> 1988), </year> <pages> 115-122. </pages>
Reference-contexts: In this section an overview of the Fuzzball and Unix NTP time servers is presented along with a description of the NTP synchronization subnet now operating in the Internet. 6.1. Time Servers The Fuzzball <ref> [MIL88] </ref> is a software package consisting of a fast, compact operating system, support for the Internet architecture and an array of application programs for network protocol development, testing and evaluation.
Reference: [MIL89a] <author> Mills, </author> <title> D.L. Network Time Protocol (Version 2) specification and implementation. </title> <institution> DARPA Network Working Group Report RFC-1119, University of Delaware, </institution> <month> September </month> <year> 1989. </year>
Reference-contexts: The architecture of the NTP synchronization subnet, including the primary time references and distribution mechanisms, is described in Section 2. An overview of the NTP protocol is given in Section 3 and further intricacies in a formal specification and implementation guide published elsewhere <ref> [MIL89a] </ref>. Section 4 describes the algorithms used to improve the accuracy of delay and offset measurements made over statistically noisy internet paths and to select the best clock from among a set of mutually suspicious clocks. <p> Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], <ref> [MIL89a] </ref>, [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. <p> Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], <ref> [MIL89a] </ref>, [RIC88], [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [LIN80], while Byzantine methods for clock synchronization are summarized in [LAM85]. <p> Network Time Protocol The Network Time Protocol (NTP) is used to construct and maintain a set of time servers and transmission paths as a synchronization subnet. The protocol was first described in [MIL85c], extensively revised in successive versions and recently established as a formal Internet Standard protocol <ref> [MIL89a] </ref>. NTP is built on the Internet Protocol (IP) [DAR81b] and User Datagram Protocol (UDP) [POS80], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites. <p> In appropriate modes a set of state variables is maintained for the host itself along with separate copies for each peer with an active association. Further information on these variables is given later in this paper. A complete description is given in <ref> [MIL89a] </ref>. Following is a description of the various fields. Version Number (VN). Identifies the present NTP version. Leap Indicator (LI). Warns of an impending leap second to be inserted or deleted in the timescale at the end of the current day. Mode, Stratum, Precision. <p> A typical logical-clock implementation such as the Fuzzball <ref> [MIL89a] </ref> can maintain time in room-temperature environments to within a few milliseconds and frequency to within a few milliseconds per day in the absence of corrections. Substantially better performance can be achieved using precision oven-compensated quartz oscillators.
Reference: [MIL89b] <author> Mills, </author> <title> D.L. Measured performance of the Network Time Protocol in the Internet system. </title> <institution> DARPA Network Working Group Report RFC-1128, University of Delaware, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: 1. Introduction How do hosts and gateways in a large, dispersed networking community know what time it is? How accurate are their clocks? In a recent survey involving 94,260 hosts and gateways of the Internet system <ref> [MIL89b] </ref>, 20,758 provided local time using three time-transfer protocols. About half of the replies had errors greater than two minutes, while ten percent had errors greater than four hours. A few had errors over two weeks. <p> The international NTP synchronization subnet of time servers and clients now operating on the Internet is described and its performance assessed in Section 6. Further details on measured performance in the Internet can be found in <ref> [MIL89b] </ref>. Section 7 discusses further development and issues for future research. RFC 1129 Network Time Synchronization October 1989 Mills Page 1 1.1. <p> For instance, while only a few comparisons are usually adequate to determine local time in the Internet to within a few tens of milliseconds, dozens of measurements over many days are required to reliably resolve oscillator drift and stabilize frequency to a few milliseconds per day <ref> [MIL89b] </ref>. Thus, the performance requirements of an internet-based time synchronization system are particularly demanding. A basic set of requirements must include the following: 1. The primary time reference source (s) must be synchronized to national standards by wire, radio or portable clock. <p> Using existing stations, available timecode receivers with propagation-delay corrections and allowing for sample accumulations up to a week or more, accuracies in the order of a millisecond can be achieved at the network interface of a primary server <ref> [MIL89b] </ref>. As the stratum increases from one, the accuracies achievable will degrade depending on the network paths and local clock stabilities. <p> Therefore, the development of algorithms appropriate for ubiquitous Internet application has involved a process of stepwise refinement, beginning with the designs suggested in [MIL85a], refined as the results of experiments described in [MIL85b] and <ref> [MIL89b] </ref> and evolved over several years of operation under widely varying conditions of path qualities and reliabilities. In following subsections the issues, approaches and designs of these algorithms are discussed. 4.1. <p> The results show consistently lower errors for the minimum filter when compared with the median filter of similar length. Perhaps the most dramatic result of the minimum filter is the greatly reduced maximum error at the upper end of the throughput range <ref> [MIL89b] </ref>. Based on these data the minimum filter was selected as the preferred algorithm. Since its performance did not seem to much improve for values of n above eight, this value was chosen for use in the reference implementation. <p> It includes all of the algorithms described in this paper and adjusts the system time using special Unix kernel primitives to control the local clock phase and frequency. Almost 1000 ntpd hosts were found in a recent survey <ref> [MIL89b] </ref>; however, this survey did not cover all Internet hosts. From other reports and personal communication it is estimated that the total number is well over 2000.
Reference: [MIT80] <author> Mitra, D. </author> <title> Network synchronization: analysis of a hybrid of master-slave and mutual synchronization. </title> <journal> IEEE Trans. Communications COM-28, </journal> <month> 8 (August </month> <year> 1980), </year> <pages> 1245-1259. </pages>
Reference: [NBS79] <institution> Time and Frequency Dissemination Services. </institution> <note> NBS Special Publication 432, </note> <institution> U.S. Depart ment of Commerce, </institution> <year> 1979. </year>
Reference-contexts: Discussion of Approaches There are many ways that hosts distributed throughout a large geographic area can synchronize clocks to UTC. In North America the U.S. and Canada operate broadcast radio services with a UTC timecode modulation which can be decoded by suitable receivers <ref> [NBS79] </ref>. One approach to time synchronization is to provide timecode receivers at every site where required. However, these receivers are specialized, moderately expensive and subject to occasional gross errors due to propagation and equipment failures. The U.S.
Reference: [NBS88] <institution> Automated Computer Time Service (ACTS). NBS Research Material 8101, U.S. Depart ment of Commerce, </institution> <year> 1988. </year>
Reference-contexts: The U.S. National Institute of Standards and Technology (NIST) (formerly National Bureau of Standards), recently announced a computer time service available to the general public by means of a standard telephone modem <ref> [NBS88] </ref>. The service is intended for use by personal workstations to set clock-calenders, for example, but would not be suitable for a large population of clients calling on a frequent, regular basis without further redistribution. <p> In addition, the current timecode formats do not include advance notice of leap-second insertion. Clearly, a revised timecode format including these data is needed. In fact, the recently introduced NBS telephone time service <ref> [NBS88] </ref> does include both the year and advance leap-second information. The current mechanism of time delivery using WWVB, WWV and GOES requires relatively expensive timecode receivers subject to occasional disruption due to propagation path or transmitter failure.
Reference: [POS80] <author> Postel, J. </author> <title> User Datagram Protocol. </title> <institution> DARPA Network Working Group Report RFC-768, USC Information Sciences Institute, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: The protocol was first described in [MIL85c], extensively revised in successive versions and recently established as a formal Internet Standard protocol [MIL89a]. NTP is built on the Internet Protocol (IP) [DAR81b] and User Datagram Protocol (UDP) <ref> [POS80] </ref>, which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites.
Reference: [POS83a] <author> Postel, J. </author> <title> Daytime protocol. </title> <institution> DARPA Network Working Group Report RFC-867, USC Information Sciences Institute, </institution> <month> May </month> <year> 1983. </year> <title> RFC 1129 Network Time Synchronization October 1989 Mills Page 26 </title>
Reference-contexts: However, neither of these methods would be economically viable for widespread deployment in a large, diverse internet system. Various mechanisms have been used in the Internet protocol suite to record and transmit the time at which an event takes place, including the Daytime protocol <ref> [POS83a] </ref>, Time protocol [POS83b], ICMP Timestamp message [DAR81a] and IP Timestamp option [SU81].
Reference: [POS83b] <author> Postel, J. </author> <title> Time protocol. </title> <institution> DARPA Network Working Group Report RFC-868, USC Information Sciences Institute, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: However, neither of these methods would be economically viable for widespread deployment in a large, diverse internet system. Various mechanisms have been used in the Internet protocol suite to record and transmit the time at which an event takes place, including the Daytime protocol [POS83a], Time protocol <ref> [POS83b] </ref>, ICMP Timestamp message [DAR81a] and IP Timestamp option [SU81]. <p> NTP is built on the Internet Protocol (IP) [DAR81b] and User Datagram Protocol (UDP) [POS80], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites. It is evolved from the Time Protocol <ref> [POS83b] </ref> and the RFC 1129 Network Time Synchronization October 1989 Mills Page 5 ICMP Timestamp Message [DAR81a], but is specifically designed to maintain accuracy and reliability, even when used over typical Internet paths involving multiple gateways and unreliable nets.
Reference: [REF85] <institution> Reference Data for Engineers: Radio, Electronics, </institution> <note> Computer and Communications (Seventh Edition). </note> <editor> Howard W. Sams, Indianapolis, IN, </editor> <year> 1985. </year>
Reference: [RIC88] <author> Rickert, N.W. </author> <title> Non Byzantine clock synchronization - a programming experiment. </title> <booktitle> ACM Operating Systems Review 22, </booktitle> <month> 1 (January </month> <year> 1988), </year> <pages> 73-78. </pages>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], <ref> [RIC88] </ref>, [SCH86], [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. <p> There are two classes of convergence functions, those involving interactive convergence algorithms and those involving interactive consistency algorithms. Interactive convergence algorithms use statistical clustering techniques such as the fault-tolerant average algorithm of [HAL84], the CNV algorithm of [LUN84], the majority-subset algorithm of [MIL85a], the non-Byzantine algorithm of <ref> [RIC88] </ref>, the egocentric algorithm of [SCH86] and the algorithm described below in this paper. Interactive consistency algorithms are designed to detect faulty clock processes which might indicate grossly inconsistent offsets in successive readings or to different readers.
Reference: [SCH86] <author> Schneider, </author> <title> F.B. A paradigm for reliable clock synchronization. </title> <institution> Department of Computer Science Technical Report TR 86-735, Cornell University, </institution> <month> February </month> <year> 1986. </year>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], <ref> [SCH86] </ref>, [SRI87] and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [LIN80], while Byzantine methods for clock synchronization are summarized in [LAM85]. <p> Determining whether a particular clock is a truechimer or falseticker is an interesting abstract problem which can be attacked using methods such as described in [LAM78], [LAM85], [MAR85] and <ref> [SCH86] </ref>. In methods described in the literature a convergence function operates upon the offsets between the clocks in a system to increase the reliability by reducing or eliminating errors caused by falsetickers. There are two classes of convergence functions, those involving interactive convergence algorithms and those involving interactive consistency algorithms. <p> Interactive convergence algorithms use statistical clustering techniques such as the fault-tolerant average algorithm of [HAL84], the CNV algorithm of [LUN84], the majority-subset algorithm of [MIL85a], the non-Byzantine algorithm of [RIC88], the egocentric algorithm of <ref> [SCH86] </ref> and the algorithm described below in this paper. Interactive consistency algorithms are designed to detect faulty clock processes which might indicate grossly inconsistent offsets in successive readings or to different readers.
Reference: [SRI87] <author> Srikanth, T.K., and S. Toueg. </author> <title> Optimal clock synchronization. </title> <type> JACM 34, </type> <month> 3 (July </month> <year> 1987), </year> <pages> 626-645. </pages>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], <ref> [SRI87] </ref> and [TRI86] and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [LIN80], while Byzantine methods for clock synchronization are summarized in [LAM85]. <p> While reliable clock synchronization has been studied using agreement algorithms [LAM85], <ref> [SRI87] </ref>, in practice it is not possible to distinguish the truechimer clocks, which maintain timekeeping accuracy to a previously published (and trusted) standard, from the falseticker clocks, which do not, on other than a statistical basis. <p> These algorithms use an agreement protocol involving successive rounds of readings, possibly relayed and possibly augmented by digital signatures. Examples include the fireworks algorithm of [HAL84] and the optimum algorithm of <ref> [SRI87] </ref>. However, these algorithms require an excessive burden of messages, especially when large numbers of clocks are involved, and are designed to detect faults that have rarely been found in the Internet experience. For these reasons they are not considered further in this paper.
Reference: [SU81] <author> Su, Z. </author> <title> A specification of the Internet protocol (IP) timestamp option. DARPA Network Working Group Report RFC-781. </title> <booktitle> SRI International, </booktitle> <month> May </month> <year> 1981. </year>
Reference-contexts: Various mechanisms have been used in the Internet protocol suite to record and transmit the time at which an event takes place, including the Daytime protocol [POS83a], Time protocol [POS83b], ICMP Timestamp message [DAR81a] and IP Timestamp option <ref> [SU81] </ref>. In the Hellospeak routing protocol [MIL83b] one or more processes synchronize to an external reference source, such as a timecode receiver or time daemon, and the corrections are distributed via routing updates and a minimum-delay spanning tree rooted on these processes.
Reference: [TRI86] <author> Tripathi, S.K., and S.H. Chang. ETempo: </author> <title> a clock synchronization algorithm for hierarchical LANs - implementation and measurements. </title> <institution> Systems Research Center Technical Report TR-86-48, University of Maryland, </institution> <year> 1986. </year> <title> Security considerations See Section 3.3. Author's address David L. </title> <institution> Mills Electrical Engineering Department University of Delaware Newark, </institution> <note> DE 19716 Phone (302) 451-8247 EMail mills@udel.edu RFC 1129 Network Time Synchronization October 1989 Mills Page 27 </note>
Reference-contexts: Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and <ref> [TRI86] </ref> and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [LIN80], while Byzantine methods for clock synchronization are summarized in [LAM85]. <p> Experimental results on measured times and delays in the Internet are discussed in [COL88], [MIL83a] and [MIL85b]. Other synchronization algorithms are discussed in [GUS84], [HAL84], [LAM78], [LAM85], [LUN84], [MAR85], [MIL85a], [MIL85b], [MIL89a], [RIC88], [SCH86], [SRI87] and <ref> [TRI86] </ref> and protocols based on them in [MIL81], [MIL85c], [MIL89a] and [TRI86]. NTP uses techniques evolved from them and both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [LIN80], while Byzantine methods for clock synchronization are summarized in [LAM85].
References-found: 37

