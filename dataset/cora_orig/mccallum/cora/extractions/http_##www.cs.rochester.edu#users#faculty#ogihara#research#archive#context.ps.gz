URL: http://www.cs.rochester.edu/users/faculty/ogihara/research/archive/context.ps.gz
Refering-URL: http://www.cs.rochester.edu/stats/oldmonths/1998.04/docs-name.html
Root-URL: 
Email: (ogiwara@cs.rochester.edu)  (thierauf@informatik.uni-ulm.de)  (toda@cs.uec.ac.jp)  (watanabe@cs.titech.ac.jp)  
Title: On Closure Properties of #P in the Context of PF ffi #P  
Author: Mitsunori Ogihara Thomas Thierauf Seinosuke Toda Osamu Watanabe 
Address: Rochester  Universtat Ulm  Electro-Communications  
Affiliation: Dept. Computer Science Univ. of  Fakultat fur Informatik  Dept. Computer Science Univ.  Dept. Computer Science Tokyo Institute of Technology  
Abstract: For any operator t on integer-valued functions, we say that #P is closed under t in context PFffi#P if, for every f 2 #P, t [f] belongs to PF ffi #P. For several operators t , it is shown that the closure properties of #P under t in the above sense is closely related to the relationships between P #P[1] and higher classes such as PH PP and PP PP .
Abstract-found: 1
Intro-found: 1
Reference: [BDG88] <author> J. Balcazar, J. Daz, and J. Gabarro, </author> <title> Structural Complexity I, </title> <note> EATCS Monographs on Theoretical Computer Science, Springer-Verlag (1988). </note>
Reference-contexts: We think such characterizations will be useful (in some cases) for analyzing relationships among counting classes. In Section 4, we provide such results with respect to closure properties median, plurality, and maximum. 2. Preliminaries In this paper, we follow standard definitions and notations in computational complexity theory (see, e.g., <ref> [BDG88, BDG91] </ref>). Throughout this paper, we fix our alphabet to = f0; 1g; by a string we mean an element of fl , and by a language we mean a subset of fl .
Reference: [BDG91] <author> J. Balcazar, J. Daz, and J. Gabarro, </author> <title> Structural Complexity II, </title> <note> EATCS Monographs on Theoretical Computer Science, Springer-Verlag (1991). </note>
Reference-contexts: We think such characterizations will be useful (in some cases) for analyzing relationships among counting classes. In Section 4, we provide such results with respect to closure properties median, plurality, and maximum. 2. Preliminaries In this paper, we follow standard definitions and notations in computational complexity theory (see, e.g., <ref> [BDG88, BDG91] </ref>). Throughout this paper, we fix our alphabet to = f0; 1g; by a string we mean an element of fl , and by a language we mean a subset of fl .
Reference: [BCH86] <author> P. Beame, S. Cook and H. </author> <title> Hoover, Log depth circuits for division and related problems, </title> <journal> SIAM J. Comput. </journal> <volume> 15 (1986), </volume> <pages> 994-1003. 15 </pages>
Reference-contexts: It is easy to design a #P function, say h (x) = f (x)2 p (jxj) + g (x) for some suitably large polynomial p, from which logarithmically depth-bounded circuits can compute the division (see <ref> [BCH86] </ref>). But, combining the result of Furst, Saxe and Sipser [FSS84] with the easily provable fact that the parity function is AC 0 -reducible to integer division, it is seen that no AC 0 circuit can compute the division from h above.
Reference: [BHW91] <author> R. Beigel, L. Hemachandra, and G. Wechsung, </author> <title> Probabilistic polynomial time is closed under parity reductions, </title> <journal> Inform. Proc. Lett. </journal> <volume> 37 (1991), </volume> <pages> 91-94. </pages>
Reference-contexts: Closure properties of #P have played important roles, both explicitly and implicitly, in the study of counting classes of languages <ref> [BHW91, BRS91, CH90, FR91] </ref>, and many closure properties possessed by #P have been found (See [OH93]). Nevertheless, the class does not seem to possess closure properties under some primitive operations, such as modified subtraction. 1 Ogiwara and Hemachandra [OH93] have established the theory for closure properties of function classes.
Reference: [BRS91] <author> R. Beigel, N. Reingold, and D. Spielman, </author> <title> PP is closed under intersection, </title> <booktitle> In Proc. 23rd Symp. on Theory of Comput., </booktitle> <publisher> ACM Press (1991), </publisher> <pages> pp. 1-9. </pages>
Reference-contexts: Closure properties of #P have played important roles, both explicitly and implicitly, in the study of counting classes of languages <ref> [BHW91, BRS91, CH90, FR91] </ref>, and many closure properties possessed by #P have been found (See [OH93]). Nevertheless, the class does not seem to possess closure properties under some primitive operations, such as modified subtraction. 1 Ogiwara and Hemachandra [OH93] have established the theory for closure properties of function classes.
Reference: [BTT92] <author> R. Beigel, J. Tarui, and S. </author> <title> Toda, On probabilistic ACC circuits with an exact-threshold output gate, </title> <booktitle> In Proc. 3rd Int. Symp. on Algorithms and Computation, Lecture Notes in Computer Science #650 (1992), </booktitle> <pages> pp. 420-429. </pages>
Reference-contexts: But, in the conference version <ref> [BTT92] </ref>, the result is stated in a weaker form.
Reference: [CH90] <author> J. Cai and L. Hemachandra, </author> <title> On the power of parity polynomial time, Math. </title> <booktitle> Systems Theory 23 (1990), </booktitle> <pages> 95-106. </pages>
Reference-contexts: Closure properties of #P have played important roles, both explicitly and implicitly, in the study of counting classes of languages <ref> [BHW91, BRS91, CH90, FR91] </ref>, and many closure properties possessed by #P have been found (See [OH93]). Nevertheless, the class does not seem to possess closure properties under some primitive operations, such as modified subtraction. 1 Ogiwara and Hemachandra [OH93] have established the theory for closure properties of function classes.
Reference: [Gil77] <author> J. Gill, </author> <title> Computational complexity of probabilistic Turing machines, </title> <journal> SIAM J. Com-put. </journal> <volume> 6 (1977), </volume> <pages> 675-695. </pages>
Reference-contexts: Recently, various counting problems have received considerable attention (see, e.g., [Sch90]) and, in order to model them, there have been introduced and extensively studied complexity classes called counting classes, typified by function classes #P [Val79], spanP [KST89], and GapP [FFK94], and language classes PP <ref> [Gil77] </ref>, P [PZ83], C = P [Sim75, Wag86a], and the counting hierarchy CH [Tor91, Wag86b]. Unfortunately, many of the questions regarding counting classes, even the ones about inclusion relation, are left open.
Reference: [FFK94] <author> S. Fenner, L. Fortnow, and S. Kurtz, </author> <title> Gap-definable counting classes, </title> <journal> J. Comput. System Sci. </journal> <volume> 48 (1994), </volume> <pages> 116-148. </pages>
Reference-contexts: 1. Introduction Counting is one of the key notions in computation. Recently, various counting problems have received considerable attention (see, e.g., [Sch90]) and, in order to model them, there have been introduced and extensively studied complexity classes called counting classes, typified by function classes #P [Val79], spanP [KST89], and GapP <ref> [FFK94] </ref>, and language classes PP [Gil77], P [PZ83], C = P [Sim75, Wag86a], and the counting hierarchy CH [Tor91, Wag86b]. Unfortunately, many of the questions regarding counting classes, even the ones about inclusion relation, are left open.
Reference: [FR91] <author> L. Fortnow and N. Reingold, </author> <title> PP is closed under truth-table reductions, </title> <booktitle> In Proc. 6th Conf. on Structure in Complexity Theory IEEE (1991), </booktitle> <pages> pp. 13-15. </pages>
Reference-contexts: Closure properties of #P have played important roles, both explicitly and implicitly, in the study of counting classes of languages <ref> [BHW91, BRS91, CH90, FR91] </ref>, and many closure properties possessed by #P have been found (See [OH93]). Nevertheless, the class does not seem to possess closure properties under some primitive operations, such as modified subtraction. 1 Ogiwara and Hemachandra [OH93] have established the theory for closure properties of function classes.
Reference: [FSS84] <author> M. Furst, J. Saxe and M. Sipser, </author> <title> Party, circuits and the polynomial-time hierarchy, Math. </title> <booktitle> Systems Theory 17 (1984), </booktitle> <pages> 13-27. </pages>
Reference-contexts: It is easy to design a #P function, say h (x) = f (x)2 p (jxj) + g (x) for some suitably large polynomial p, from which logarithmically depth-bounded circuits can compute the division (see [BCH86]). But, combining the result of Furst, Saxe and Sipser <ref> [FSS84] </ref> with the easily provable fact that the parity function is AC 0 -reducible to integer division, it is seen that no AC 0 circuit can compute the division from h above.
Reference: [KST89] <author> J. Kobler, U. Schoning, and J. Toran, </author> <title> On counting and approximation, </title> <journal> Acta Inform. </journal> <volume> 26 (1989), </volume> <pages> 363-379. </pages>
Reference-contexts: 1. Introduction Counting is one of the key notions in computation. Recently, various counting problems have received considerable attention (see, e.g., [Sch90]) and, in order to model them, there have been introduced and extensively studied complexity classes called counting classes, typified by function classes #P [Val79], spanP <ref> [KST89] </ref>, and GapP [FFK94], and language classes PP [Gil77], P [PZ83], C = P [Sim75, Wag86a], and the counting hierarchy CH [Tor91, Wag86b]. Unfortunately, many of the questions regarding counting classes, even the ones about inclusion relation, are left open.
Reference: [Kre88] <author> M. Krentel, </author> <title> The complexity of optimization Problems, </title> <journal> J. Comput. System Sci. </journal> <volume> 36 (1988), </volume> <pages> 490-509. </pages>
Reference-contexts: Finally, we consider the maximum operators. Here, we have a slightly different result, which indicates in turn that the maximum operators are weaker than the other operators considered so far. Krentel <ref> [Kre88] </ref> showed that the maximum operators applied to polynomial-time computable functions characterize PF NP . By this result, we can observe that the maximum operators are strong enough to capture the computational power of NP-computations.
Reference: [OH93] <author> M. Ogiwara and L. Hemachandra, </author> <title> A complexity theory for feasible closure properties, </title> <journal> J. Comput. System Sci. </journal> <volume> 46 (1993), </volume> <pages> 295-325. </pages>
Reference-contexts: Closure properties of #P have played important roles, both explicitly and implicitly, in the study of counting classes of languages [BHW91, BRS91, CH90, FR91], and many closure properties possessed by #P have been found (See <ref> [OH93] </ref>). Nevertheless, the class does not seem to possess closure properties under some primitive operations, such as modified subtraction. 1 Ogiwara and Hemachandra [OH93] have established the theory for closure properties of function classes. They have clarified why #P seems to lack such primitive closure properties. <p> both explicitly and implicitly, in the study of counting classes of languages [BHW91, BRS91, CH90, FR91], and many closure properties possessed by #P have been found (See <ref> [OH93] </ref>). Nevertheless, the class does not seem to possess closure properties under some primitive operations, such as modified subtraction. 1 Ogiwara and Hemachandra [OH93] have established the theory for closure properties of function classes. They have clarified why #P seems to lack such primitive closure properties. They showed that #P is closed under modified subtraction if and only if the counting hierarchy collapses to UP, which is the smallest counting class. <p> Indeed, it is easy to see that, in context of PF ffi #P, the class is closed not only under modified subtraction but also under many `hard' closure properties <ref> [OH93] </ref>. <p> However, when m is even, there are two candidates for the median, namely the b (m + 1)=2c-th and the d (m+1)=2e-th smallest element, which are called the left and right median, respectively. We defined "mid" as a function taking the left median. As shown in <ref> [OH93] </ref>, sometimes one has to be careful about which median function is chosen. However, our results concerned with the median operator hold for the right median operator as well. An operator is defined as a functor mapping one function to another. <p> So, we may say that #P is closed under modified subtraction in context AC 0 ffi#P. But, this argument does not seem to hold for several other `hard' closure properties in <ref> [OH93] </ref>. Consider, for example, bf (x)=g (x)c for f 2 #P and nonzero g 2 #P.
Reference: [PZ83] <author> C. Papadimitriou and S. Zachos, </author> <title> Two remarks on the power of counting, </title> <booktitle> In Proc. 6th GI Conf. on Theoret. Comput. Sci., Lecture Notes in Computer Science #145 (1983), </booktitle> <pages> pp. 269-276. </pages>
Reference-contexts: Recently, various counting problems have received considerable attention (see, e.g., [Sch90]) and, in order to model them, there have been introduced and extensively studied complexity classes called counting classes, typified by function classes #P [Val79], spanP [KST89], and GapP [FFK94], and language classes PP [Gil77], P <ref> [PZ83] </ref>, C = P [Sim75, Wag86a], and the counting hierarchy CH [Tor91, Wag86b]. Unfortunately, many of the questions regarding counting classes, even the ones about inclusion relation, are left open.
Reference: [Sch90] <author> U. Schoning, </author> <title> The power of counting, In Complexity Theory Retrospective (A. </title> <editor> Selman, ed.), </editor> <publisher> Springer-Verlag (1990), </publisher> <pages> 204-223. </pages>
Reference-contexts: 1. Introduction Counting is one of the key notions in computation. Recently, various counting problems have received considerable attention (see, e.g., <ref> [Sch90] </ref>) and, in order to model them, there have been introduced and extensively studied complexity classes called counting classes, typified by function classes #P [Val79], spanP [KST89], and GapP [FFK94], and language classes PP [Gil77], P [PZ83], C = P [Sim75, Wag86a], and the counting hierarchy CH [Tor91, Wag86b].
Reference: [Sim75] <author> J. Simon, </author> <title> On some central problems in computational complexity, </title> <type> PhD thesis, </type> <institution> Cor-nell University, </institution> <address> Ithaca, N.Y., </address> <month> January </month> <year> 1975. </year> <note> Available as Cornell Department of Computer Science Technical Report TR75-224. 16 </note>
Reference-contexts: Recently, various counting problems have received considerable attention (see, e.g., [Sch90]) and, in order to model them, there have been introduced and extensively studied complexity classes called counting classes, typified by function classes #P [Val79], spanP [KST89], and GapP [FFK94], and language classes PP [Gil77], P [PZ83], C = P <ref> [Sim75, Wag86a] </ref>, and the counting hierarchy CH [Tor91, Wag86b]. Unfortunately, many of the questions regarding counting classes, even the ones about inclusion relation, are left open. <p> We will further use the following technical result on C = P due to Simon <ref> [Sim75] </ref> and the results on PP PP and NP PP that are slight modification of the results due to Toran [Tor91]. Lemma 2.2. (1) [Sim75] Let A 2 C = P. <p> We will further use the following technical result on C = P due to Simon <ref> [Sim75] </ref> and the results on PP PP and NP PP that are slight modification of the results due to Toran [Tor91]. Lemma 2.2. (1) [Sim75] Let A 2 C = P.
Reference: [Tod90] <author> S. </author> <title> Toda, Simple characterization of P(#P) and complete problems, </title> <institution> J. Comput. Sys--tem Sci. </institution> <month> 49 </month> <year> (1994), </year> <pages> 1-17. </pages>
Reference-contexts: For 10 the maximum operators, we can argue along the same line, but we need a slightly stronger hypothesis. We start by considering the median operators. In light of Toda's result <ref> [Tod90] </ref> that the mid operators applied to polynomial-time computable functions characterize PF #P = PF PP , we can observe that the mid operators are strong enough to capture the computational power of PP-computations. Our result below is inspired with this observation.
Reference: [Tod91] <author> S. </author> <title> Toda, PP is as hard as the polynomial-time hierarchy, </title> <journal> SIAM J. Comput. </journal> <volume> 20 (1991), </volume> <pages> 865-877. </pages>
Reference-contexts: We will mainly deal with the following language classes: P #P [1] , P #P , PH, PH PP , PP PP , and CH. We know that PP PH P #P [1] <ref> [Tod91] </ref> and P #P [1] P #P PH PP P PP PP CH. None of these inclusions are known to be proper. Below, we list several elementary facts on these classes, which are used in proving our results. They are either obvious or easy to prove. <p> In the proof of our first theorem, we need the following result of Toda <ref> [Tod91] </ref>. Lemma 3.1. [Tod91] Let T 0 2 #P, q be a polynomial, and m 2 be a natural number. <p> In the proof of our first theorem, we need the following result of Toda <ref> [Tod91] </ref>. Lemma 3.1. [Tod91] Let T 0 2 #P, q be a polynomial, and m 2 be a natural number.
Reference: [Tor91] <author> J. Toran, </author> <title> An oracle characterization of the counting hierarchy, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 38 (1991), </volume> <pages> 753-774. </pages>
Reference-contexts: attention (see, e.g., [Sch90]) and, in order to model them, there have been introduced and extensively studied complexity classes called counting classes, typified by function classes #P [Val79], spanP [KST89], and GapP [FFK94], and language classes PP [Gil77], P [PZ83], C = P [Sim75, Wag86a], and the counting hierarchy CH <ref> [Tor91, Wag86b] </ref>. Unfortunately, many of the questions regarding counting classes, even the ones about inclusion relation, are left open. <p> We will further use the following technical result on C = P due to Simon [Sim75] and the results on PP PP and NP PP that are slight modification of the results due to Toran <ref> [Tor91] </ref>. Lemma 2.2. (1) [Sim75] Let A 2 C = P. <p> M such that for all x, the following conditions are satisfied: (i) total M (x) = 2 q (jxj) , (ii) acc M (x) 2 q (jxj)1 , and (iii) x 2 A if and only if acc M (x) = rej M (x) = 2 q (jxj)1 . (2) <ref> [Tor91] </ref> A set L is in PP PP if and only if there exist a polynomial p and a set A 2 C = P such that for every x, x 2 L () jjf w 2 p (jxj) : x#w 2 A gjj 2 p (jxj)1 + 1; and (3) <p> A set L is in PP PP if and only if there exist a polynomial p and a set A 2 C = P such that for every x, x 2 L () jjf w 2 p (jxj) : x#w 2 A gjj 2 p (jxj)1 + 1; and (3) <ref> [Tor91] </ref> A set L is in NP PP if and only if there exist a polynomial p and a set A 2 C = P such that for every x, we have x 2 L () jjf w 2 p (jxj) : x#w 2 A gjj 1.
Reference: [Val79] <author> L. Valiant, </author> <title> The complexity of enumeration and reliability problems, </title> <journal> SIAM J. Com-put. </journal> <volume> 8 (1979), </volume> <pages> 410-421. </pages>
Reference-contexts: 1. Introduction Counting is one of the key notions in computation. Recently, various counting problems have received considerable attention (see, e.g., [Sch90]) and, in order to model them, there have been introduced and extensively studied complexity classes called counting classes, typified by function classes #P <ref> [Val79] </ref>, spanP [KST89], and GapP [FFK94], and language classes PP [Gil77], P [PZ83], C = P [Sim75, Wag86a], and the counting hierarchy CH [Tor91, Wag86b]. Unfortunately, many of the questions regarding counting classes, even the ones about inclusion relation, are left open. <p> The class #P is known to contain many natural functions, such as the permanent of integer matrices, which is one of the first nontrivial functions proven to be in #P and, in fact, proven to be #P-complete <ref> [Val79] </ref>. With the increase in the number of interesting examples, the properties of #P, especially, the closure properties of #P, has become a central research topic.
Reference: [Wag86a] <author> K. Wagner, </author> <title> Some observations on the connection between counting and recursion, </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <month> 47 </month> <year> (1986), </year> <pages> 131-147. </pages>
Reference-contexts: Recently, various counting problems have received considerable attention (see, e.g., [Sch90]) and, in order to model them, there have been introduced and extensively studied complexity classes called counting classes, typified by function classes #P [Val79], spanP [KST89], and GapP [FFK94], and language classes PP [Gil77], P [PZ83], C = P <ref> [Sim75, Wag86a] </ref>, and the counting hierarchy CH [Tor91, Wag86b]. Unfortunately, many of the questions regarding counting classes, even the ones about inclusion relation, are left open.
Reference: [Wag86b] <author> K. Wagner, </author> <title> The complexity of combinatorial problems with succinct input representations, </title> <journal> Acta Inform. </journal> <volume> 23 (1986), </volume> <pages> 325-356. 17 </pages>
Reference-contexts: attention (see, e.g., [Sch90]) and, in order to model them, there have been introduced and extensively studied complexity classes called counting classes, typified by function classes #P [Val79], spanP [KST89], and GapP [FFK94], and language classes PP [Gil77], P [PZ83], C = P [Sim75, Wag86a], and the counting hierarchy CH <ref> [Tor91, Wag86b] </ref>. Unfortunately, many of the questions regarding counting classes, even the ones about inclusion relation, are left open.
References-found: 23

