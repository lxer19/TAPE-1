URL: http://www.eecs.berkeley.edu/~tah/Publications/whats_decidable_about_hybrid_automata.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/whats_decidable_about_hybrid_automata.html
Root-URL: 
Title: What's Decidable About Hybrid Automata?  
Author: Thomas A. Henzinger Peter W. Kopke Anuj Puri Pravin Varaiya 
Abstract: Hybrid automata model systems with both digital and analog components, such as embedded control programs. Many verification tasks for such programs can be expressed as reachability problems for hybrid automata. By improving on previous decidability and undecidability results, we identify a boundary between decidability and undecidability for the reachability problem of hybrid automata. On the positive side, we give an (optimal) PSPACE reachability algorithm for the case of initialized rectangular automata, where all analog variables follow independent trajectories within piecewise-linear envelopes and are reinitialized whenever the envelope changes. Our algorithm is based on the construction of a timed automaton that contains all reachability information about a given initialized rectangular automaton. The translation has practical significance for verification, because it guarantees the termination of symbolic procedures for the reachability analysis of initialized rectangular automata. The translation also preserves the !-languages of initialized rectangular automata with bounded nondeterminism. On the negative side, we show that several slight generalizations of initialized rectangular automata lead to an undecidable reachability problem. In particular, we prove that the reachability problem is undecidable for timed automata augmented with a single stopwatch.
Abstract-found: 1
Intro-found: 1
Reference: [ACH + 95] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Oliv-ero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: Case studies indicate that the model of hybrid automata is useful for the analysis of embedded software and hardware, including distributed processes with drifting clocks, real-time schedulers, and protocols for the control of manufacturing plants, vehicles, and robots (see, for example, <ref> [HRP94, ACH + 95, HHWT95, HW95, NS95, AHH96, Cor96, HWT96, SMF97] </ref>). <p> The first decidability 2 result for hybrid automata was obtained for timed automata, whose reachability and !-language emptiness problems are PSPACE-complete [AD94]. Under restrictions (1) and (2), that result was later generalized to automata with variables that run at any constant positive slopes <ref> [ACH + 95] </ref>, and to the reachability problem for automata with nonstrict rectangular flow constraints [PV94]. <p> It was also known that reachability is undecidable for timed automata with six memory cells and no assignments [AHV93], for timed automata with two three-slope variables and restriction (1) [KPSY93], for timed automata with two nonclock constant-slope variables <ref> [ACH + 95] </ref>, and for timed automata with additive clock constraints [AD94]. 2 Rectangular Automata A hybrid automaton of dimension n is an infinite-state machine whose state has a discrete part, which ranges over the vertices of a graph, and a continuous part, which ranges over the n-dimensional euclidean space R <p> 95], and for timed automata with additive clock constraints [AD94]. 2 Rectangular Automata A hybrid automaton of dimension n is an infinite-state machine whose state has a discrete part, which ranges over the vertices of a graph, and a continuous part, which ranges over the n-dimensional euclidean space R n <ref> [ACH + 95] </ref>. A run of a hybrid automaton is a sequence of edge steps and time steps. During an edge step (also called jump), the discrete and continuous states are updated according to a guarded command. <p> In Section 3.4, we explain our translations in terms of simulations and bisimulations of the underlying labeled transition systems. In Section 3.5, we supply a practical implication of our translations, showing that symbolic execution <ref> [ACH + 95] </ref> terminates on initialized rectangular automata after a linear-time preprocessing step. 3.1 From Initialized Singular Automata To Timed Automata We begin by defining several special cases of rectangular automata for which, using known results about timed automata, the reachability and !-language emptiness problems can be solved easily. <p> Similar rescaling techniques for hybrid state spaces can be found in 11 fi Init C B Init B Z Pre C B Post C B Pre B Post B Post C B Post B Pre C B : : : : : : in <ref> [ACH + 95] </ref>. The maps fi v are extended to regions in the natural way, and the map fi is extended to zones in the natural way. The remaining components of the initialized stopwatch automaton C B are defined as follows. <p> This procedure, which we call the symbolic execution of A <ref> [ACH + 95] </ref>, will terminate if the zone Z f is reachable or if there is a natural number i 2 N such that Reach (A) = Post i (Init), but it will not terminate if Z f is not reachable and no such i exists.
Reference: [ACH97] <author> R. Alur, C. Courcoubetis, and T.A. Henzinger. </author> <title> Computing accumulated delays in real-time systems. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 11(2) </volume> <pages> 137-156, </pages> <year> 1997. </year>
Reference-contexts: Under restrictions (1) and (2), that result was later generalized to automata with variables that run at any constant positive slopes [ACH + 95], and to the reachability problem for automata with nonstrict rectangular flow constraints [PV94]. In <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>, it was shown that, under various strong side conditions, reachability is decidable for timed automata with one stopwatch, but the general problem of one-stopwatch automata was left open. <p> Since the digitization technique requires closed guard and invariant regions, restriction (4) implies that the technique does not generalize beyond very special cases. Many limited decidability results apply to automata with a single stopwatch <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>. Restriction (1) implies that these results do not generalize either. All of our undecidability proofs are reductions from the halting problem for two-counter machines to the reachability problem for simple rectangular automata.
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction A hybrid automaton <ref> [ACHH93, NOSY93] </ref> combines the discrete dynamics of a finite automaton with the continuous dynamics of a dynamical system. Hybrid automata thus provide a mathematical model for digital computer systems that interact with an analog environment in real time.
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: While a scattering of previous results show that both problems are decidable in certain special cases, and undecidable in certain general cases, this paper attempts a systematic characterization of the boundary between decidability and undecidability. Hybrid automata generalize timed automata. Timed automata <ref> [AD94] </ref> equip finite automata with clocks, which are real-valued variables that follow continuous trajectories with constant slope 1. Hybrid automata equip finite automata with real-valued variables whose trajectories follow more general dynamical laws. For each class of dynamical laws, we obtain a class of hybrid automata. <p> Previous work. Over the past few years, there have been many decidability and undecidability results about hybrid systems; we list only those that led to the present work. The first decidability 2 result for hybrid automata was obtained for timed automata, whose reachability and !-language emptiness problems are PSPACE-complete <ref> [AD94] </ref>. Under restrictions (1) and (2), that result was later generalized to automata with variables that run at any constant positive slopes [ACH + 95], and to the reachability problem for automata with nonstrict rectangular flow constraints [PV94]. <p> It was also known that reachability is undecidable for timed automata with six memory cells and no assignments [AHV93], for timed automata with two three-slope variables and restriction (1) [KPSY93], for timed automata with two nonclock constant-slope variables [ACH + 95], and for timed automata with additive clock constraints <ref> [AD94] </ref>. 2 Rectangular Automata A hybrid automaton of dimension n is an infinite-state machine whose state has a discrete part, which ranges over the vertices of a graph, and a continuous part, which ranges over the n-dimensional euclidean space R n [ACH + 95]. <p> We then show that the reachability prob-lem (and therefore !-language emptiness) is undecidable for very restricted classes of uninitialized rectangular automata, and also for initialized automata with slightly generalized invariant, flow, preguard, postguard, or jump functions. 3 Decidability We translate a given initialized rectangular automaton A into a timed automaton <ref> [AD94] </ref> that contains all reachability information about A. The translation proceeds in two steps: from initialized rectangular automata to initialized singular automata (Section 3.2), and from initialized singular automata to timed automata (Section 3.1). <p> Notice that, if A has deterministic jumps and every variable of A is a finite-slope variable, then A has bounded nondeterminism. Timed automata A timed automaton D is a rectangular automaton with deterministic jumps such that every variable of D is a clock. 9 Theorem 3.1 <ref> [AD94] </ref> The reachability and !-language emptiness problems for timed automata (with or without " moves) are complete for PSPACE. <p> Second, we show that the rectangularity of the model must remain inviolate. Any coupling between coordinates, such as comparisons between variables, brings undecidability already with a single nonclock variable. (Timed automata, which have only clock variables, remain decidable in the presence of variable comparisons <ref> [AD94] </ref>.) A main consequence is the undecidability of compact automata with clocks and one stopwatch, which are of interest for the specification of duration properties [KPSY93]. An n-dimensional rectangular automaton A is simple if it meets the following restrictions: 1. Exactly one variable of A is not a clock. 2. <p> Similarly, the slope 2 of z is enforced by resetting z 1 to 0 whenever a wraps to 0, and later checking that a = 4 ^ z 1 = 8. 5 Conclusion There are three uniform extensions of finite-state machines with real-valued variables. Timed automata <ref> [AD94] </ref> equip finite-state machines with perfect clocks, and the reachability and !-language emptiness problems for timed automata are decidable. Linear hybrid automata [AHH96] equip finite-state machines with continuous variables whose behavior satisfies linear constraints, and the reachability problem for linear hybrid automata is undecidable.
Reference: [AHH96] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(3) </volume> <pages> 181-201, </pages> <year> 1996. </year>
Reference-contexts: Case studies indicate that the model of hybrid automata is useful for the analysis of embedded software and hardware, including distributed processes with drifting clocks, real-time schedulers, and protocols for the control of manufacturing plants, vehicles, and robots (see, for example, <ref> [HRP94, ACH + 95, HHWT95, HW95, NS95, AHH96, Cor96, HWT96, SMF97] </ref>). <p> In addition, the translation implies that, when applied to rectangular-flow automata that meet restrictions (1) and (2), existing semidecision procedures for the reachability problem of hybrid automata terminate. Such procedures have been implemented in the HyTech verification tool <ref> [AHH96, HHWT97] </ref>. The third result is proven by reduction from the halting problem for two-counter machines. In an attempt to characterize the undecidability frontier, we sharpen the reduction as much as possible. <p> A rectangular automaton with " moves may traverse " edges during time steps. Note that if we replace rectangular regions with arbitrary linear regions in the definition of rectangular automata, we obtain the linear hybrid automata of <ref> [AHH96] </ref>. Thus rectangular automata are the subclass of linear hybrid automata in which all defining regions are rectangular. <p> Timed automata [AD94] equip finite-state machines with perfect clocks, and the reachability and !-language emptiness problems for timed automata are decidable. Linear hybrid automata <ref> [AHH96] </ref> equip finite-state machines with continuous variables whose behavior satisfies linear constraints, and the reachability problem for linear hybrid automata is undecidable.
Reference: [AHV93] <author> R. Alur, T.A. Henzinger, and M.Y. Vardi. </author> <title> Parametric real-time reasoning. </title> <booktitle> In Proceedings of the 25th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 592-601. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: It was also known that reachability is undecidable for timed automata with six memory cells and no assignments <ref> [AHV93] </ref>, for timed automata with two three-slope variables and restriction (1) [KPSY93], for timed automata with two nonclock constant-slope variables [ACH + 95], and for timed automata with additive clock constraints [AD94]. 2 Rectangular Automata A hybrid automaton of dimension n is an infinite-state machine whose state has a discrete part,
Reference: [BER94] <author> A. Bouajjani, R. Echahed, and R. Robbana. </author> <title> Verifying invariance properties of timed systems with duration variables. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 193-210. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Under restrictions (1) and (2), that result was later generalized to automata with variables that run at any constant positive slopes [ACH + 95], and to the reachability problem for automata with nonstrict rectangular flow constraints [PV94]. In <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>, it was shown that, under various strong side conditions, reachability is decidable for timed automata with one stopwatch, but the general problem of one-stopwatch automata was left open. <p> Restrictions (2) and (3) ensure that every simple automaton has deterministic jumps, which eliminates the nondeterminism of jumps as a possible source of undecidability. Many limited decidability results are based on a technique, called digitization, which discretizes time steps with noninteger durations <ref> [HMP92, BES93, BER94, PV94] </ref>. Since the digitization technique requires closed guard and invariant regions, restriction (4) implies that the technique does not generalize beyond very special cases. Many limited decidability results apply to automata with a single stopwatch [BES93, KPSY93, BER94, MV94, BR95, ACH97]. <p> Since the digitization technique requires closed guard and invariant regions, restriction (4) implies that the technique does not generalize beyond very special cases. Many limited decidability results apply to automata with a single stopwatch <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>. Restriction (1) implies that these results do not generalize either. All of our undecidability proofs are reductions from the halting problem for two-counter machines to the reachability problem for simple rectangular automata.
Reference: [BES93] <author> A. Bouajjani, R. Echahed, and J. Sifakis. </author> <title> On model checking for real-time properties with durations. </title> <booktitle> In Proceedings of the Eighth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 147-159. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: Under restrictions (1) and (2), that result was later generalized to automata with variables that run at any constant positive slopes [ACH + 95], and to the reachability problem for automata with nonstrict rectangular flow constraints [PV94]. In <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>, it was shown that, under various strong side conditions, reachability is decidable for timed automata with one stopwatch, but the general problem of one-stopwatch automata was left open. <p> Restrictions (2) and (3) ensure that every simple automaton has deterministic jumps, which eliminates the nondeterminism of jumps as a possible source of undecidability. Many limited decidability results are based on a technique, called digitization, which discretizes time steps with noninteger durations <ref> [HMP92, BES93, BER94, PV94] </ref>. Since the digitization technique requires closed guard and invariant regions, restriction (4) implies that the technique does not generalize beyond very special cases. Many limited decidability results apply to automata with a single stopwatch [BES93, KPSY93, BER94, MV94, BR95, ACH97]. <p> Since the digitization technique requires closed guard and invariant regions, restriction (4) implies that the technique does not generalize beyond very special cases. Many limited decidability results apply to automata with a single stopwatch <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>. Restriction (1) implies that these results do not generalize either. All of our undecidability proofs are reductions from the halting problem for two-counter machines to the reachability problem for simple rectangular automata.
Reference: [BR95] <author> A. Bouajjani and R. Robbana. </author> <title> Verifying !-regular properties for subclasses of linear hybrid systems. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 437-450. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Under restrictions (1) and (2), that result was later generalized to automata with variables that run at any constant positive slopes [ACH + 95], and to the reachability problem for automata with nonstrict rectangular flow constraints [PV94]. In <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>, it was shown that, under various strong side conditions, reachability is decidable for timed automata with one stopwatch, but the general problem of one-stopwatch automata was left open. <p> Since the digitization technique requires closed guard and invariant regions, restriction (4) implies that the technique does not generalize beyond very special cases. Many limited decidability results apply to automata with a single stopwatch <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>. Restriction (1) implies that these results do not generalize either. All of our undecidability proofs are reductions from the halting problem for two-counter machines to the reachability problem for simple rectangular automata.
Reference: [Cer92] <author> K. Cerans. </author> <title> Algorithmic Problems in Analysis of Real-time System Specifications. </title> <type> PhD thesis, </type> <institution> University of Latvia, </institution> <year> 1992. </year>
Reference-contexts: In [BES93, KPSY93, BER94, MV94, BR95, ACH97], it was shown that, under various strong side conditions, reachability is decidable for timed automata with one stopwatch, but the general problem of one-stopwatch automata was left open. As far as undecidability results are concerned, in <ref> [Cer92] </ref> it was shown that reachability is undecidable for timed automata with three stopwatches, as well as for timed automata with one memory cell (a variable of constant slope 0) and assignments between variables. <p> The wrapping edges ensure that variables take the same values at the beginning and end of a round, unless they are explicitly reassigned by a nonwrapping edge. This is the content of the wrapping lemma. A similar wrapping technique can be found in <ref> [Cer92] </ref>. In figures of simple automata, we use the following conventions. First, all variables whose slopes are not listed are clocks, i.e., they have slope 1. <p> The former gives a new proof of a result from <ref> [Cer92] </ref>.
Reference: [Cor96] <author> J.C. Corbett. </author> <title> Timing analysis of Ada tasking programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(7) </volume> <pages> 461-483, </pages> <year> 1996. </year> <month> 46 </month>
Reference-contexts: Case studies indicate that the model of hybrid automata is useful for the analysis of embedded software and hardware, including distributed processes with drifting clocks, real-time schedulers, and protocols for the control of manufacturing plants, vehicles, and robots (see, for example, <ref> [HRP94, ACH + 95, HHWT95, HW95, NS95, AHH96, Cor96, HWT96, SMF97] </ref>). <p> The procedure has been implemented in the automatic verification tool HyTech [HHWT97], and successfully applied to examples of practical interest <ref> [HHWT95, HW95, NS95, Cor96, HWT96, SMF97] </ref>. While the reachability problem is decidable for all initialized rectangular automata, even for timed automata symbolic execution does not always terminate. To see this, consider the 2D timed automaton ^ B from Figure 13, with first coordinate c and second coordinate d.
Reference: [HHWT95] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> the next generation. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 56-65. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Case studies indicate that the model of hybrid automata is useful for the analysis of embedded software and hardware, including distributed processes with drifting clocks, real-time schedulers, and protocols for the control of manufacturing plants, vehicles, and robots (see, for example, <ref> [HRP94, ACH + 95, HHWT95, HW95, NS95, AHH96, Cor96, HWT96, SMF97] </ref>). <p> The procedure has been implemented in the automatic verification tool HyTech [HHWT97], and successfully applied to examples of practical interest <ref> [HHWT95, HW95, NS95, Cor96, HWT96, SMF97] </ref>. While the reachability problem is decidable for all initialized rectangular automata, even for timed automata symbolic execution does not always terminate. To see this, consider the 2D timed automaton ^ B from Figure 13, with first coordinate c and second coordinate d.
Reference: [HHWT97] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> a model checker for hybrid systems. </title> <booktitle> Software Tools for Technology Transfer, </booktitle> <volume> 1 </volume> <pages> 110-122, </pages> <year> 1997. </year>
Reference-contexts: In addition, the translation implies that, when applied to rectangular-flow automata that meet restrictions (1) and (2), existing semidecision procedures for the reachability problem of hybrid automata terminate. Such procedures have been implemented in the HyTech verification tool <ref> [AHH96, HHWT97] </ref>. The third result is proven by reduction from the halting problem for two-counter machines. In an attempt to characterize the undecidability frontier, we sharpen the reduction as much as possible. <p> The procedure has been implemented in the automatic verification tool HyTech <ref> [HHWT97] </ref>, and successfully applied to examples of practical interest [HHWT95, HW95, NS95, Cor96, HWT96, SMF97]. While the reachability problem is decidable for all initialized rectangular automata, even for timed automata symbolic execution does not always terminate. <p> While translation doubles the dimension, the dimension of A bd remains n, which alleviates a major practical bottleneck in the verification of hybrid systems <ref> [HHWT97] </ref>. To facilitate the proof of condition (2), we first introduce a third automaton A 0 bd , which satifies both (1) and (2) but is exponentially larger than A. The automaton A 0 bd will have bounded invariant regions, and therefore satisfy condition (2) by Proposition 3.30. <p> Yet, because the Pre and Post operations of linear hybrid automata maintain the linearity of zones, the reachability problem is semidecidable, and thus the verification of many linear hybrid systems is possible. This observation has been exploited in the model checker HyTech <ref> [HHWT97] </ref>. Initialized rectangular automata equip finite-state machines with drifting clocks, that is, continuous variables whose behavior satisfies rectangular constraints. Initialized rectangular automata lie strictly between timed automata and linear hybrid automata, at the boundary of decidability. On one hand, initialized rectangular automata generalize timed automata without incurring a complexity penalty.
Reference: [HHWT98] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 43(4) </volume> <pages> 540-554, </pages> <year> 1998. </year>
Reference-contexts: Rectangular-flow automata are interesting from a practical point of view, as they permit the modeling of clocks with bounded drift and the conservative approximation of arbitrary trajectory sets <ref> [OSY94, PBV96, HHWT98] </ref>, and from a theoretical point of view, as they lie at the boundary of decidability. Our results are threefold. <p> Such protocols are naturally modeled as initialized rectangular hybrid automata. For example, HyTech has been applied successfully to verify one such protocol used in Philips audio components [HW95]. Third, initialized rectangular automata can be used to conservatively approximate, arbitrarily closely, hybrid systems with general dynamical laws <ref> [OSY94, PBV96, HHWT98] </ref>. Acknowledgement. We thank Howard Wong-Toi for a careful reading and for A bd .
Reference: [HMP92] <author> T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> What good are digital clocks? In W. </title> <editor> Kuich, editor, </editor> <booktitle> ICALP 92: Automata, Languages, and Programming, Lecture Notes in Computer Science 623, </booktitle> <pages> pages 545-558. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Restrictions (2) and (3) ensure that every simple automaton has deterministic jumps, which eliminates the nondeterminism of jumps as a possible source of undecidability. Many limited decidability results are based on a technique, called digitization, which discretizes time steps with noninteger durations <ref> [HMP92, BES93, BER94, PV94] </ref>. Since the digitization technique requires closed guard and invariant regions, restriction (4) implies that the technique does not generalize beyond very special cases. Many limited decidability results apply to automata with a single stopwatch [BES93, KPSY93, BER94, MV94, BR95, ACH97].
Reference: [HNSY94] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: Since we are interested only in infinite timed words that diverge, we relax the requirement of limit closure as follows <ref> [HNSY94] </ref>. The set L is closed under divergent limits if for all divergent timed words t , if every finite prefix of t is a prefix of some word in L, then t itself is in L. <p> Hence the fixpoint computation does not converge. To blame is the unbounded invariant region. This is because symbolic execution is known to termi nate for every timed automaton with bounded invariant regions <ref> [HNSY94] </ref> (where A has bounded invariant regions if for every vertex v of A, inv (v) is bounded). It follows that symbolic execution terminates also for initialized rectangular automata with bounded invariant regions. This is the content of the next proposition.
Reference: [HRP94] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. </title> <editor> In B. LeCharlier, editor, </editor> <booktitle> SAS 94: Static Analysis Symposium, Lecture Notes in Computer Science 864, </booktitle> <pages> pages 223-237. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Case studies indicate that the model of hybrid automata is useful for the analysis of embedded software and hardware, including distributed processes with drifting clocks, real-time schedulers, and protocols for the control of manufacturing plants, vehicles, and robots (see, for example, <ref> [HRP94, ACH + 95, HHWT95, HW95, NS95, AHH96, Cor96, HWT96, SMF97] </ref>).
Reference: [HW95] <author> P.-H. Ho and H. Wong-Toi. </author> <title> Automated analysis of an audio control protocol. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 381-394. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Case studies indicate that the model of hybrid automata is useful for the analysis of embedded software and hardware, including distributed processes with drifting clocks, real-time schedulers, and protocols for the control of manufacturing plants, vehicles, and robots (see, for example, <ref> [HRP94, ACH + 95, HHWT95, HW95, NS95, AHH96, Cor96, HWT96, SMF97] </ref>). <p> The procedure has been implemented in the automatic verification tool HyTech [HHWT97], and successfully applied to examples of practical interest <ref> [HHWT95, HW95, NS95, Cor96, HWT96, SMF97] </ref>. While the reachability problem is decidable for all initialized rectangular automata, even for timed automata symbolic execution does not always terminate. To see this, consider the 2D timed automaton ^ B from Figure 13, with first coordinate c and second coordinate d. <p> Second, many distributed communication protocols assume that local clocks have bounded drift. Such protocols are naturally modeled as initialized rectangular hybrid automata. For example, HyTech has been applied successfully to verify one such protocol used in Philips audio components <ref> [HW95] </ref>. Third, initialized rectangular automata can be used to conservatively approximate, arbitrarily closely, hybrid systems with general dynamical laws [OSY94, PBV96, HHWT98]. Acknowledgement. We thank Howard Wong-Toi for a careful reading and for A bd .
Reference: [HWT96] <author> T.A. Henzinger and H. Wong-Toi. </author> <title> Using HyTech to synthesize control parameters for a steam boiler. </title> <editor> In J.-R. Abrial, E. Borger, and H. Langmaack, editors, </editor> <title> Formal Methods for Industrial Applications: Specifying and Programming the Steam Boiler Control, </title> <booktitle> Lecture Notes in Computer Science 1165, </booktitle> <pages> pages 265-282. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Case studies indicate that the model of hybrid automata is useful for the analysis of embedded software and hardware, including distributed processes with drifting clocks, real-time schedulers, and protocols for the control of manufacturing plants, vehicles, and robots (see, for example, <ref> [HRP94, ACH + 95, HHWT95, HW95, NS95, AHH96, Cor96, HWT96, SMF97] </ref>). <p> The procedure has been implemented in the automatic verification tool HyTech [HHWT97], and successfully applied to examples of practical interest <ref> [HHWT95, HW95, NS95, Cor96, HWT96, SMF97] </ref>. While the reachability problem is decidable for all initialized rectangular automata, even for timed automata symbolic execution does not always terminate. To see this, consider the 2D timed automaton ^ B from Figure 13, with first coordinate c and second coordinate d.
Reference: [Kop96] <author> P.W. Kopke. </author> <title> The Theory of Rectangular Hybrid Automata. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1996. </year>
Reference-contexts: It is not difficult to check that A does not timed forward simulate B A , and B A does not timed backward simulate A <ref> [Kop96] </ref>. 3.5 Symbolic Reachability Analysis Consider an n-dimensional rectangular automaton A, and a rectangular zone Z f of A.
Reference: [KPSY93] <author> Y. Kesten, A. Pnueli, J. Sifakis, and S. Yovine. </author> <title> Integration graphs: a class of decidable hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 179-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Under restrictions (1) and (2), that result was later generalized to automata with variables that run at any constant positive slopes [ACH + 95], and to the reachability problem for automata with nonstrict rectangular flow constraints [PV94]. In <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>, it was shown that, under various strong side conditions, reachability is decidable for timed automata with one stopwatch, but the general problem of one-stopwatch automata was left open. <p> It was also known that reachability is undecidable for timed automata with six memory cells and no assignments [AHV93], for timed automata with two three-slope variables and restriction (1) <ref> [KPSY93] </ref>, for timed automata with two nonclock constant-slope variables [ACH + 95], and for timed automata with additive clock constraints [AD94]. 2 Rectangular Automata A hybrid automaton of dimension n is an infinite-state machine whose state has a discrete part, which ranges over the vertices of a graph, and a continuous <p> between variables, brings undecidability already with a single nonclock variable. (Timed automata, which have only clock variables, remain decidable in the presence of variable comparisons [AD94].) A main consequence is the undecidability of compact automata with clocks and one stopwatch, which are of interest for the specification of duration properties <ref> [KPSY93] </ref>. An n-dimensional rectangular automaton A is simple if it meets the following restrictions: 1. Exactly one variable of A is not a clock. 2. The automaton A has only one initial state q 0 , and q 0 has the form (v; (0; 0; : : :; 0)). 3. <p> Since the digitization technique requires closed guard and invariant regions, restriction (4) implies that the technique does not generalize beyond very special cases. Many limited decidability results apply to automata with a single stopwatch <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>. Restriction (1) implies that these results do not generalize either. All of our undecidability proofs are reductions from the halting problem for two-counter machines to the reachability problem for simple rectangular automata.
Reference: [LV96] <author> N.A. Lynch and F. Vaandrager. </author> <title> Forward and backward simulations, part II: </title> <journal> timing-based systems. Information and Computation, </journal> <volume> 128(1) </volume> <pages> 1-25, </pages> <year> 1996. </year>
Reference-contexts: We were interested only that the mappings preserve reachability and !-languages. Now we study the mappings in greater detail and show that they are timed (bi)simulations <ref> [LV96] </ref> on the underlying labeled transition systems.
Reference: [MV94] <author> J. McManis and P. Varaiya. </author> <title> Suspension automata: a decidable class of hybrid automata. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 105-117. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Under restrictions (1) and (2), that result was later generalized to automata with variables that run at any constant positive slopes [ACH + 95], and to the reachability problem for automata with nonstrict rectangular flow constraints [PV94]. In <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>, it was shown that, under various strong side conditions, reachability is decidable for timed automata with one stopwatch, but the general problem of one-stopwatch automata was left open. <p> Since the digitization technique requires closed guard and invariant regions, restriction (4) implies that the technique does not generalize beyond very special cases. Many limited decidability results apply to automata with a single stopwatch <ref> [BES93, KPSY93, BER94, MV94, BR95, ACH97] </ref>. Restriction (1) implies that these results do not generalize either. All of our undecidability proofs are reductions from the halting problem for two-counter machines to the reachability problem for simple rectangular automata.
Reference: [NOSY93] <author> X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> An approach to the description and analysis of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 149-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 47 </month>
Reference-contexts: 1 Introduction A hybrid automaton <ref> [ACHH93, NOSY93] </ref> combines the discrete dynamics of a finite automaton with the continuous dynamics of a dynamical system. Hybrid automata thus provide a mathematical model for digital computer systems that interact with an analog environment in real time.
Reference: [NS95] <author> S. Nadjm-Tehrani and J.-E. Stromberg. </author> <title> Proving dynamic properties in an aerospace application. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 2-10. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Case studies indicate that the model of hybrid automata is useful for the analysis of embedded software and hardware, including distributed processes with drifting clocks, real-time schedulers, and protocols for the control of manufacturing plants, vehicles, and robots (see, for example, <ref> [HRP94, ACH + 95, HHWT95, HW95, NS95, AHH96, Cor96, HWT96, SMF97] </ref>). <p> The procedure has been implemented in the automatic verification tool HyTech [HHWT97], and successfully applied to examples of practical interest <ref> [HHWT95, HW95, NS95, Cor96, HWT96, SMF97] </ref>. While the reachability problem is decidable for all initialized rectangular automata, even for timed automata symbolic execution does not always terminate. To see this, consider the 2D timed automaton ^ B from Figure 13, with first coordinate c and second coordinate d.
Reference: [OSY94] <author> A. Olivero, J. Sifakis, and S. Yovine. </author> <title> Using abstractions for the verification of linear hybrid systems. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 81-94. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Rectangular-flow automata are interesting from a practical point of view, as they permit the modeling of clocks with bounded drift and the conservative approximation of arbitrary trajectory sets <ref> [OSY94, PBV96, HHWT98] </ref>, and from a theoretical point of view, as they lie at the boundary of decidability. Our results are threefold. <p> Such protocols are naturally modeled as initialized rectangular hybrid automata. For example, HyTech has been applied successfully to verify one such protocol used in Philips audio components [HW95]. Third, initialized rectangular automata can be used to conservatively approximate, arbitrarily closely, hybrid systems with general dynamical laws <ref> [OSY94, PBV96, HHWT98] </ref>. Acknowledgement. We thank Howard Wong-Toi for a careful reading and for A bd .
Reference: [PBV96] <author> A. Puri, V. Borkar, and P. Varaiya. </author> <title> "-Approximation of differential inclusions. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 362-376. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Rectangular-flow automata are interesting from a practical point of view, as they permit the modeling of clocks with bounded drift and the conservative approximation of arbitrary trajectory sets <ref> [OSY94, PBV96, HHWT98] </ref>, and from a theoretical point of view, as they lie at the boundary of decidability. Our results are threefold. <p> Such protocols are naturally modeled as initialized rectangular hybrid automata. For example, HyTech has been applied successfully to verify one such protocol used in Philips audio components [HW95]. Third, initialized rectangular automata can be used to conservatively approximate, arbitrarily closely, hybrid systems with general dynamical laws <ref> [OSY94, PBV96, HHWT98] </ref>. Acknowledgement. We thank Howard Wong-Toi for a careful reading and for A bd .
Reference: [PV94] <author> A. Puri and P. Varaiya. </author> <title> Decidability of hybrid systems with rectangular differential inclusions. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 95-104. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Under restrictions (1) and (2), that result was later generalized to automata with variables that run at any constant positive slopes [ACH + 95], and to the reachability problem for automata with nonstrict rectangular flow constraints <ref> [PV94] </ref>. In [BES93, KPSY93, BER94, MV94, BR95, ACH97], it was shown that, under various strong side conditions, reachability is decidable for timed automata with one stopwatch, but the general problem of one-stopwatch automata was left open. <p> Restrictions (2) and (3) ensure that every simple automaton has deterministic jumps, which eliminates the nondeterminism of jumps as a possible source of undecidability. Many limited decidability results are based on a technique, called digitization, which discretizes time steps with noninteger durations <ref> [HMP92, BES93, BER94, PV94] </ref>. Since the digitization technique requires closed guard and invariant regions, restriction (4) implies that the technique does not generalize beyond very special cases. Many limited decidability results apply to automata with a single stopwatch [BES93, KPSY93, BER94, MV94, BR95, ACH97].
Reference: [SMF97] <author> T. Stauner, O. Muller, and M. Fuchs. </author> <title> Using HyTech to verify an automotive control system. </title> <editor> In O. Maler, editor, </editor> <title> HART 97: Hybrid and Real-time Systems, </title> <booktitle> Lecture Notes in Computer Science 1201, </booktitle> <pages> pages 139-153. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Case studies indicate that the model of hybrid automata is useful for the analysis of embedded software and hardware, including distributed processes with drifting clocks, real-time schedulers, and protocols for the control of manufacturing plants, vehicles, and robots (see, for example, <ref> [HRP94, ACH + 95, HHWT95, HW95, NS95, AHH96, Cor96, HWT96, SMF97] </ref>). <p> The procedure has been implemented in the automatic verification tool HyTech [HHWT97], and successfully applied to examples of practical interest <ref> [HHWT95, HW95, NS95, Cor96, HWT96, SMF97] </ref>. While the reachability problem is decidable for all initialized rectangular automata, even for timed automata symbolic execution does not always terminate. To see this, consider the 2D timed automaton ^ B from Figure 13, with first coordinate c and second coordinate d.
Reference: [VW86] <author> M.Y. Vardi and P. Wolper. </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> In Proceedings of the First Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 322-331. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1986. </year> <month> 48 </month>
Reference-contexts: The solution of the reachability problem for a given hybrid automaton allows us to check if the trajectories of the automaton meet a given safety requirement; the solution of the !-language emptiness problem allows us to check if the trajectories of the automaton meet a liveness requirement <ref> [VW86] </ref>. While a scattering of previous results show that both problems are decidable in certain special cases, and undecidable in certain general cases, this paper attempts a systematic characterization of the boundary between decidability and undecidability. Hybrid automata generalize timed automata.
References-found: 30

