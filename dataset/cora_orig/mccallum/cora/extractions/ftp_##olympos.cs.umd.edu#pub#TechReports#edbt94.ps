URL: ftp://olympos.cs.umd.edu/pub/TechReports/edbt94.ps
Refering-URL: http://www.cs.umd.edu/~christos/cpub.html
Root-URL: 
Title: Bit-Sliced Signature Files for Very Large Text Databases on a Parallel Machine Architecture  
Author: George Panagopoulos and Christos Faloutsos 
Keyword: Connection Machine.  
Address: College Park, MD 20742  
Affiliation: Department of Computer Science and Institute for Systems Research (ISR) University of Maryland,  
Abstract: Free text retrieval is an important problem which can significantly benefit from a parallel architecture. Signature methods have been proposed to answer text retrieval queries in parallel machines [Sta88, LF92], under the assumption that the main memory is sufficient to hold the entire signature file. We propose the use of a Parallel Bit-Sliced Signature File method on a SIMD machine architecture when the size of the signature file exceeds the available memory. We propose that we need not examine all the bit slices; instead we use a partial fetch slice swapping algorithm. This method achieves graceful performance degradation according to the database size. We provide formulae for the optimal number of signature slices to fetch and match with the query signature. Arithmetic examples show that our method can handle a 128GB database with a 2sec response time on a machine with the characteristics of the 
Abstract-found: 1
Intro-found: 1
Reference: [CF84] <author> Stavros Christodoulakis and Christos Faloutsos. </author> <title> Design Considerations for a Message File Server. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(2) </volume> <pages> 201-210, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: Text databases are traditionally large, unstructured and archival in nature. Retrieval methods based on inverted indices introduce large space overhead (typically 50%-300% [Has81]) and large insertion cost. Signature-based text retrieval methods <ref> [CF84, FC87, Fal90] </ref> constitute an alternative between fast but space-expensive inversion methods and full text scanning. Signature methods have been shown to have a modest space overhead (typically 10%-15%), to be efficient in text retrieval and insertion, and to be well suited to the archival nature of text databases.
Reference: [Fal90] <author> Christos Faloutsos. </author> <title> Signature-Based Text Retrieval Methods: A Survey. </title> <journal> IEEE Data Engineering, </journal> <pages> pages 25-32, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Text databases are traditionally large, unstructured and archival in nature. Retrieval methods based on inverted indices introduce large space overhead (typically 50%-300% [Has81]) and large insertion cost. Signature-based text retrieval methods <ref> [CF84, FC87, Fal90] </ref> constitute an alternative between fast but space-expensive inversion methods and full text scanning. Signature methods have been shown to have a modest space overhead (typically 10%-15%), to be efficient in text retrieval and insertion, and to be well suited to the archival nature of text databases.
Reference: [FC87] <author> Christos Faloutsos and Stavros Christodoulakis. </author> <title> Description and Performance Analysis of Signature File Methods for Office Filing. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(3) </volume> <pages> 237-257, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Text databases are traditionally large, unstructured and archival in nature. Retrieval methods based on inverted indices introduce large space overhead (typically 50%-300% [Has81]) and large insertion cost. Signature-based text retrieval methods <ref> [CF84, FC87, Fal90] </ref> constitute an alternative between fast but space-expensive inversion methods and full text scanning. Signature methods have been shown to have a modest space overhead (typically 10%-15%), to be efficient in text retrieval and insertion, and to be well suited to the archival nature of text databases.
Reference: [FC88] <author> Christos Faloutsos and Raphael Chan. </author> <title> Fast Text Access Methods for Optical Disks: Designs and Performance Comparison. </title> <booktitle> In Proceedings of the 14th International Conference on Very Large Databases, </booktitle> <pages> pages 280-293, </pages> <address> Long Beach, California, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: The main contribution of this paper is the presentation of a parallel signature method that fits better to a SIMD architecture for large database applications. This method is based on the Bit-Sliced Signature File (BSSF) method as described in <ref> [FC88] </ref>. When the signature size exceeds the available main memory of the computer system in use, we propose the use of partial fetch slice swapping. The idea is to examine the bit slices already in memory and to fetch as many from the disk as necessary. <p> In section 5 we discuss the performance of the method for various application and system parameters. Finally, section 6 contains our conclusions. 2 Background In this section we will present our terminology and review the Bit-Sliced Signature File text retrieval method <ref> [FC88] </ref>. The algorithms for insertion and retrieval will be presented. For the purposes of signature construction, each document is considered here as a set of words. The words that appear in queries are called terms and are the only ones that take part in the construction of the document signatures. <p> In the Sequential Signature File (SSF) method, which is the basic organization, signatures are stored sequentially. This organization is useful for small database applications only, because retrieval requires the sequential search of the entire signature file. In the Bit-Sliced Signature File (BSSF) method <ref> [FC88] </ref>, on the other hand, the signature matrix is vertically partitioned in F bit slices. Each bit slice is stored in consecutive disk blocks. <p> It is easy to extend the basic retrieval algorithm to accommodate more general boolean queries with no negated terms. One can simply convert the query in disjunctive normal form and merge the lists of documents that qualify for each conjunct. As in previous papers (see for example <ref> [FC88] </ref>) we will assume that the database consists of N documents with D terms on the average.
Reference: [FJ91] <author> Christos Faloutsos and H. V. Jagadish. </author> <title> Hybrid Index Organizations for Text Databases. </title> <institution> Technical Report UMIACS-TR-91-33 and CS-TR-2621, Department of Computer Science, University of Maryland, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: Future research could examine (a) the effects of skewness in the frequencies of query terms (e.g. Zipf distribution [Zip49]), (b) the parallelization of vertical [LF92] and horizontal [SD83, LL89] partitioning signature methods, and (c) the parallelization of hybrid methods that combine signature retrieval with inverted indices <ref> [FJ91] </ref>.
Reference: [Has81] <author> R. Haskin. </author> <title> Special-Purpose Processors for Text Retrieval. </title> <journal> Database Engineering, </journal> <volume> 4(1) </volume> <pages> 16-29, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: Text databases are traditionally large, unstructured and archival in nature. Retrieval methods based on inverted indices introduce large space overhead (typically 50%-300% <ref> [Has81] </ref>) and large insertion cost. Signature-based text retrieval methods [CF84, FC87, Fal90] constitute an alternative between fast but space-expensive inversion methods and full text scanning.
Reference: [LF92] <author> Zheng Lin and Christos Faloutsos. </author> <title> Frame Sliced Signature Files. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 4(3) </volume> <pages> 158-180, </pages> <month> June </month> <year> 1992. </year> <note> Also available as UMD CS-TR-2146 and UMIACS-TR-88-88. </note>
Reference-contexts: Future research could examine (a) the effects of skewness in the frequencies of query terms (e.g. Zipf distribution [Zip49]), (b) the parallelization of vertical <ref> [LF92] </ref> and horizontal [SD83, LL89] partitioning signature methods, and (c) the parallelization of hybrid methods that combine signature retrieval with inverted indices [FJ91].
Reference: [Lin92] <author> Zheng Lin. </author> <title> CAT: An Execution Model for Concurrent Full Text Search. </title> <booktitle> In PDIS, </booktitle> <year> 1992. </year>
Reference-contexts: Large text database applications would benefit significantly by parallelism, especially in the bit matching step, as previous work has suggested <ref> [Sta88, Lin92] </ref>. The paper in [Sta88] presented a parallel signature-based algorithm for high-speed interactive querying of a text database on a SIMD computer, the Connection Machine. The results were based on the assumption that the main memory was sufficient to hold all the document signatures.
Reference: [LL89] <author> D. L. Lee and C. W. Leng. </author> <title> Partitioned Signature File: Designs and Performance Evaluation. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 7(2) </volume> <pages> 158-180, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Future research could examine (a) the effects of skewness in the frequencies of query terms (e.g. Zipf distribution [Zip49]), (b) the parallelization of vertical [LF92] and horizontal <ref> [SD83, LL89] </ref> partitioning signature methods, and (c) the parallelization of hybrid methods that combine signature retrieval with inverted indices [FJ91].
Reference: [Pan92] <author> George Panagopoulos. </author> <title> Bit-Sliced Signature Files for Very Large Databases on a Parallel Machine Architecture. </title> <type> Technical Report CSC-809, </type> <institution> Department of Computer Science, University of Maryland, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: The details of the analysis can be found in <ref> [Pan92] </ref>. We will assume that the cost of a local operation in each processor is t op and the cost of a global operation is t glob . <p> The database size ranges from 1GB (250,000 documents) to 1000GB (250 million documents). The diagram depicts the performance with optimal values of the design parameters F and m for the corresponding database size 3 . 3 It can also be shown (see <ref> [Pan92] </ref>) that the PBSSF method behaves well in a dynamically growing database environment, even when the database size deviates from the estimated size when the signature parameter were chosen. Fig. 5.
Reference: [SD83] <author> Ron Sacks-Davis. </author> <title> Two Level Superimposed Coding Scheme for Partial Match Retrieval. </title> <journal> Information Systems, </journal> <volume> 8(4) </volume> <pages> 273-280, </pages> <year> 1983. </year>
Reference-contexts: Future research could examine (a) the effects of skewness in the frequencies of query terms (e.g. Zipf distribution [Zip49]), (b) the parallelization of vertical [LF92] and horizontal <ref> [SD83, LL89] </ref> partitioning signature methods, and (c) the parallelization of hybrid methods that combine signature retrieval with inverted indices [FJ91].
Reference: [SM83] <author> G. Salton and M. J. McGill. </author> <title> Introduction to Modern Information Retrieval. </title> <publisher> McGraw-Hill, </publisher> <year> 1983. </year>
Reference-contexts: 1 Introduction Free text retrieval in large text databases is an important problem involved in numerous applications, for example electronic office filing [TC83], computerized libraries <ref> [SM83] </ref>, and electronic encyclopedias. Text databases are traditionally large, unstructured and archival in nature. Retrieval methods based on inverted indices introduce large space overhead (typically 50%-300% [Has81]) and large insertion cost.
Reference: [Sta88] <author> Craig Stanfill. </author> <title> Parallel Computing for Information Retrieval: Recent Developments. </title> <type> Technical Report DR88-1, </type> <institution> Thinking Machines Corporation, </institution> <address> Cam-bridge, Mass., </address> <month> January </month> <year> 1988. </year>
Reference-contexts: Large text database applications would benefit significantly by parallelism, especially in the bit matching step, as previous work has suggested <ref> [Sta88, Lin92] </ref>. The paper in [Sta88] presented a parallel signature-based algorithm for high-speed interactive querying of a text database on a SIMD computer, the Connection Machine. The results were based on the assumption that the main memory was sufficient to hold all the document signatures. <p> Large text database applications would benefit significantly by parallelism, especially in the bit matching step, as previous work has suggested [Sta88, Lin92]. The paper in <ref> [Sta88] </ref> presented a parallel signature-based algorithm for high-speed interactive querying of a text database on a SIMD computer, the Connection Machine. The results were based on the assumption that the main memory was sufficient to hold all the document signatures.
Reference: [Sti60] <author> Simon Stiassny. </author> <title> Mathematical Analysis of Various Superimposed Coding Methods. </title> <journal> American Documentation, </journal> <volume> 11(2) </volume> <pages> 155-169, </pages> <month> February </month> <year> 1960. </year>
Reference-contexts: The false drop probability is: F d = w s match where w is the average weight of the document signature, i.e. the probability that a signature bit in the signature file is set to 1. The value of w is <ref> [Sti60] </ref>: w = 1 (1 F mD The last approximation works for mD t F .
Reference: [Sto87] <author> Harold S. Stone. </author> <title> Parallel Querying of Large Databases: A Case Study. </title> <journal> IEEE Computer, </journal> 20(10) 11-21, October 1987. 
Reference-contexts: We will first present the architecture model of the underlying hardware. Then we will describe the application of the Parallel BSSF method on the architecture model used. 3.1 The System Architecture Model The architecture model that we will use follows the parallel processor model in <ref> [Sto87] </ref>. The model corresponds to a SIMD machine architecture like the Connection Machine. It contains an array of P parallel processors, each with its own local memory of size M bits.
Reference: [TC83] <author> D. Tsichritzis and S. Christodoulakis. </author> <title> Message Files. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 1(1) </volume> <pages> 88-98, </pages> <month> January </month> <year> 1983. </year>
Reference-contexts: 1 Introduction Free text retrieval in large text databases is an important problem involved in numerous applications, for example electronic office filing <ref> [TC83] </ref>, computerized libraries [SM83], and electronic encyclopedias. Text databases are traditionally large, unstructured and archival in nature. Retrieval methods based on inverted indices introduce large space overhead (typically 50%-300% [Has81]) and large insertion cost.
Reference: [Thi89] <institution> Thinking Machines Corporation, </institution> <address> Cambridge, Mass. </address> <note> Parallel Instruction Set, Version 5.2, </note> <month> October </month> <year> 1989. </year>
Reference-contexts: The signature file parameters have been tuned for optimal expected response time. We assumed an architecture with characteristics similar to that of a fully configured CM-2 <ref> [Thi89] </ref>. We have used the following parameter values: t seek = 25ms, t xfer = 5ns (i.e. transfer rate of the Parallel I/O system 200Mbits/sec), t op = 10ns, t glob = 100ns, t hash = 0:8ms, t blk = 1ms and t scan = 1ms. Fig. 3.
Reference: [Zip49] <author> G. K. Zipf. </author> <title> Human Behavior and Principle of Least Effort: An Introduction to Human Ecology. </title> <publisher> Addison-Wesley, </publisher> <address> Cambridge, MA, </address> <year> 1949. </year>
Reference-contexts: A response time of 2sec can be expected from a Sparc-like architecture with a main memory buffer of 16MB, operating on a 5GB database (figure 6). Future research could examine (a) the effects of skewness in the frequencies of query terms (e.g. Zipf distribution <ref> [Zip49] </ref>), (b) the parallelization of vertical [LF92] and horizontal [SD83, LL89] partitioning signature methods, and (c) the parallelization of hybrid methods that combine signature retrieval with inverted indices [FJ91].
References-found: 18

