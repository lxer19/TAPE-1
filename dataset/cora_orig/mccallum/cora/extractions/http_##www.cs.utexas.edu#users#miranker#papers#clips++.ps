URL: http://www.cs.utexas.edu/users/miranker/papers/clips++.ps
Refering-URL: http://www.cs.utexas.edu/users/miranker/papers/index.html
Root-URL: 
Email: lanceo@arlut.utexas.edu miranker@cs.utexas.edu  
Title: CLIPS++: Embedding CLIPS into C++ with several class libraries, including Rogue Wave Software's Tools.h++, GNU's
Author: Lance Obermeyer and Daniel P. Miranker 
Note: The implementation has been tested  has been determined to be 5 to 700 times the execution speed of CLIPS 6.0 (10 to 20 typical).  
Address: Austin, TX 78713 Austin, TX 78712  
Affiliation: Tactical Simulation Division Applied Research Laboratories Department of Computer Sciences The University of Texas at Austin The University of Texas at Austin  
Abstract: This paper describes a set of C++ extensions to the CLIPS language and their embodyment in CLIPS++. These extensions and the implementation approach of CLIPS++ provide a new level of embeddability with C and C++. These extensions are a C++ include statement and a defcon-tainer construct; (include &lt;c++-header-file.h&gt;) and (defcontainer &lt;c++-type&gt;). The include construct allows C++ functions to be embedded in both the LHS and RHS of CLIPS rules. The header file in an include construct is the same header file the programmer uses for his/her own C++ code, independent of CLIPS. The defcontainer con-truct allows the inference engine to treat C++ class instances as CLIPS deftemplate facts. Consequently, existing C++ class libraries may be transparently imported into CLIPS. These C++ types may use advanced features like inheritance, virtual functions, and templates. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.A. Brant, T. Grose, B. Lofaso, </author> <title> and D.P. Mi-ranker. Effects of Database Size on Rule System Performance:Five Case Studies. </title> <booktitle> In Proceedings of the 17th International Conference on Very Large Data Bases (VLDB), </booktitle> <year> 1991. </year>
Reference-contexts: CLIPS++ The system includes a debugger capable of monitoring system execution and inspecting data, and a profiler capable of guiding the user through the program optimization sequence. 3.2 Performance and Matching Technol ogy The CLIPS++ system employs both published and unpublished optimization techniques developed over the last 12 years <ref> [7, 6, 4, 1, 5, 2] </ref>. The CLIPS++ system features the LEAPS matching technique asymptotically better than RETE or TREAT. <p> CLIPS++ 4 Benchmark Results We detail the performance of 4 of the 5 programs in the Texas Benchmark suite, Waltz, Waltzdb, Manners and ARP <ref> [1] </ref> 3 Performance results are for CLIPS++ vs. CLIPS 6.0 on standard benchmark programs. All times reported are user + system cpu seconds. The test platform was a Sun Sparcstation 2 running SunOS 4.1.3.
Reference: [2] <author> D.A Brant and D.P. Miranker. </author> <title> Index Support for Rule Activation. </title> <booktitle> In Proceedings of the 1993 ACM SIGMOD International Conference on the Management of Data, </booktitle> <year> 1993. </year>
Reference-contexts: CLIPS++ The system includes a debugger capable of monitoring system execution and inspecting data, and a profiler capable of guiding the user through the program optimization sequence. 3.2 Performance and Matching Technol ogy The CLIPS++ system employs both published and unpublished optimization techniques developed over the last 12 years <ref> [7, 6, 4, 1, 5, 2] </ref>. The CLIPS++ system features the LEAPS matching technique asymptotically better than RETE or TREAT.
Reference: [3] <author> J.C. Giarratano. </author> <note> CLIPS User's Guide, Version 6.0. Artificial Intelligence Section, </note> <author> Lyndon B. Johnson Space Center, </author> <year> 1994. </year>
Reference-contexts: 1 Introduction CLIPS++ is a reimplementation of NASA's CLIPS 6.0 <ref> [3] </ref> that has been tailored to support applications fl This effort was funded in part by the State of Texas Advanced Technology Program, the Applied Research Laboratories Internal Research and Development Program DABT63-92-0042. with large data and performance requirements or applications that must coexist with C++.
Reference: [4] <author> D. P. Miranker, D. Brant, B.J. Lofaso, and D. Gadbois. </author> <title> On the Performance of Lazy Matching in Production Systems. </title> <booktitle> In Proceedings of the 1990 National Conference on Artificial Intelligence, </booktitle> <pages> pages 685-692. </pages> <publisher> AAAI, </publisher> <month> July </month> <year> 1990. </year>
Reference-contexts: CLIPS++ The system includes a debugger capable of monitoring system execution and inspecting data, and a profiler capable of guiding the user through the program optimization sequence. 3.2 Performance and Matching Technol ogy The CLIPS++ system employs both published and unpublished optimization techniques developed over the last 12 years <ref> [7, 6, 4, 1, 5, 2] </ref>. The CLIPS++ system features the LEAPS matching technique asymptotically better than RETE or TREAT.
Reference: [5] <author> D. P. Miranker, F.H. Burke, J. J. Steele, J. Kolts, and D. R. Haug. </author> <title> The C++ Embeddable Rule System. </title> <journal> Int. Journal on Artificial Intelligence Tools, </journal> <volume> 2(1) </volume> <pages> 33-46, </pages> <year> 1993. </year> <booktitle> Also in the Proc. of the 1991 Int. Conf. on Tools for Artificial Intelligence. </booktitle>
Reference-contexts: CLIPS++ The system includes a debugger capable of monitoring system execution and inspecting data, and a profiler capable of guiding the user through the program optimization sequence. 3.2 Performance and Matching Technol ogy The CLIPS++ system employs both published and unpublished optimization techniques developed over the last 12 years <ref> [7, 6, 4, 1, 5, 2] </ref>. The CLIPS++ system features the LEAPS matching technique asymptotically better than RETE or TREAT.
Reference: [6] <author> D. P. Miranker, B.J. Lofaso, G. Farmer, A. Chandra, and D. </author> <title> Brant. On a TREAT Based Production System Compiler. </title> <booktitle> In Proceedings of the 10th International Conference on Expert System, </booktitle> <address> Avignon, France, </address> <pages> pages 617-630, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: CLIPS++ The system includes a debugger capable of monitoring system execution and inspecting data, and a profiler capable of guiding the user through the program optimization sequence. 3.2 Performance and Matching Technol ogy The CLIPS++ system employs both published and unpublished optimization techniques developed over the last 12 years <ref> [7, 6, 4, 1, 5, 2] </ref>. The CLIPS++ system features the LEAPS matching technique asymptotically better than RETE or TREAT.
Reference: [7] <author> D.P. Miranker and B. J. Lofaso. </author> <title> The Organization and Performance of a TREAT Based Production System Compiler. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <pages> pages 3-10, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: CLIPS++ The system includes a debugger capable of monitoring system execution and inspecting data, and a profiler capable of guiding the user through the program optimization sequence. 3.2 Performance and Matching Technol ogy The CLIPS++ system employs both published and unpublished optimization techniques developed over the last 12 years <ref> [7, 6, 4, 1, 5, 2] </ref>. The CLIPS++ system features the LEAPS matching technique asymptotically better than RETE or TREAT.
References-found: 7

