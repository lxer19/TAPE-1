URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9601.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Title: Supporting Persistent Object Systems in a Single Address Space  
Author: Kevin Elphinstone, Stephen Russell, Gernot Heiser Jochen Liedtke 
Note: 1 This work was supported by grants from the Australian Research Council (ARC) and the German Ministry for Research and Technology  
Address: Sydney 2052, Australia  SET-RS, Schlo Birlinghoven, 53757 Sankt Augustin, Germany  
Affiliation: School of Computer Science Engineering, The University of New South Wales,  GMD  
Pubnum: UNSW-CSE-TR-9601  
Email: E-mail: G.Heiser@unsw.edu.au,  
Phone: 2  fax: +61 2 395 5995, phone: +61 2 395 5156  
Date: 28 February 1996  
Web: (BMFT).  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> K. Murray, A. Saulsbury, T. Stiemerling, T. Wilkinson, P. Kelly, and P. Osmon. </author> <title> Design and implementation of an object-orientated 64-bit single address space microkernel. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Microkernels and other Kernel Architectures, </booktitle> <pages> pages 31-43, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Single address space operating systems (SASOS) such as Angel <ref> [1] </ref>, Opal [2] and Mungi [3] are based on the idea that a single, large virtual address space holds all data in a (potentially distributed) computing system.
Reference: [2] <author> J. S. Chase, H. M. Levy, M. J. Feeley, and E. D. Lazowska. </author> <title> Sharing and protection in a single address space operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12 </volume> <pages> 271-307, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Single address space operating systems (SASOS) such as Angel [1], Opal <ref> [2] </ref> and Mungi [3] are based on the idea that a single, large virtual address space holds all data in a (potentially distributed) computing system. <p> WriteProtect has been used as an alias for a Map call which only serves to make an object read-only, and size parameters have 4 typedef struct St map f Address a <ref> [2] </ref>; Bool pm [...]; g typedef struct St page f Date d 0; St map m; Char fill [...]; Date d 1; g St page st page [2]; put stable (Int index, St map m) f st page [index].d 0 = timestamp (); st page [index].m = m; st page [index].d <p> a Map call which only serves to make an object read-only, and size parameters have 4 typedef struct St map f Address a <ref> [2] </ref>; Bool pm [...]; g typedef struct St page f Date d 0; St map m; Char fill [...]; Date d 1; g St page st page [2]; put stable (Int index, St map m) f st page [index].d 0 = timestamp (); st page [index].m = m; st page [index].d 1 = st page [index].d 0; Flush (st page [index],ps); g get stable (Int &index, St map &m) f if (st page [0].d 0 == st page
Reference: [3] <author> J. Vochteloo, S. Russell, and G. Heiser. </author> <title> Capability-based protection in the Mungi operating system. </title> <booktitle> In Proceedings of the 3rd International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 108-15, </pages> <address> Asheville, NC, USA, </address> <month> December </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: 1 Introduction Single address space operating systems (SASOS) such as Angel [1], Opal [2] and Mungi <ref> [3] </ref> are based on the idea that a single, large virtual address space holds all data in a (potentially distributed) computing system.
Reference: [4] <author> S. Russell, A. Skea, K. Elphinstone, G. Heiser, K. Burston, I. Gorton, and G. Hellestrand. </author> <title> Distribution + persistence = global virtual memory. </title> <booktitle> In Proceedings of the 2nd International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 96-99, </pages> <address> Dourdan, France, </address> <month> September </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: 1 Introduction Single address space operating systems (SASOS) such as Angel [1], Opal [2] and Mungi [3] are based on the idea that a single, large virtual address space holds all data in a (potentially distributed) computing system. It has been pointed out before <ref> [4] </ref> that this class of operating systems provides a natural solution to an old problem of persistent programming: How to save arbitrary data structures on secondary storage having to translating them first into a form that allows reconstruction in memory at a later time.
Reference: [5] <author> F. A. Henskens and J. Rosenberg. </author> <title> Distributed persistent stores. </title> <journal> Microprocessors and Microsystems, </journal> <volume> 17 </volume> <pages> 147-59, </pages> <year> 1993. </year>
Reference-contexts: However, stability in case of an unplanned system shutdown, e.g. in the case of a power failure, is a much harder problem. Classical approaches to achieving stability are logging and shadow paging. It is obviously possible to implement such stability schemes in the kernel, as was done in Monads <ref> [5] </ref>. However, this dictates a specific stability model to applications, and makes it difficult to adapt to specific needs of applications. For example, some applications never require stability, and should not have to pay the runtime overhead, while other applications require stability at certain times, others again require it constantly.
Reference: [6] <author> C. Lamb, G. Landis, J. Orenstein, and D. Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 51-63, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: It is not, a priori, clear that this can be done in a SASOS without incurring overhead in the form of having to keep redundant memory copies or to perform extra copy operations. Object-oriented database systems, such as ObjectStore <ref> [6] </ref> or O 2 [7], seem well-suited for implementation on top of a SASOS, as their data model fits the SASOS model very well. In fact, one of the main difficulties facing the implementation of these system is the need to construct and efficiently handle system-wide unique object identifiers.
Reference: [7] <editor> O. Deux et al. </editor> <title> The O 2 system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 34-48, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: It is not, a priori, clear that this can be done in a SASOS without incurring overhead in the form of having to keep redundant memory copies or to perform extra copy operations. Object-oriented database systems, such as ObjectStore [6] or O 2 <ref> [7] </ref>, seem well-suited for implementation on top of a SASOS, as their data model fits the SASOS model very well. In fact, one of the main difficulties facing the implementation of these system is the need to construct and efficiently handle system-wide unique object identifiers.
Reference: [8] <author> J. Liedtke. </author> <title> A persistent system in real useexperience of the first 13 years. </title> <booktitle> In Proceedings of the 3rd International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 2-11, </pages> <address> Asheville, NC, USA, </address> <month> December </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: The kernel uses a stable logging scheme for storing these mappings on disk. No write will occur on a clean page. 2.4 Virtual memory mapping primitives The mapping primitives Map and Unmap are based on similar calls in the L3 operating system <ref> [8] </ref> (although semantics differ significantly from the L3 operations). Copy is related to these as it also affects mappings. Address and length parameters must be page aligned, and if a range of pages is specified, all pages within the range must be part of the same object.
Reference: [9] <author> A. Dearle, R. di Bona, J. Farrow, F. Henskens, A. Lindstr om, and F. Vaughan. Grasshopper: </author> <title> An orthogonally persistent operating system. </title> <journal> Computing Systems, </journal> <volume> 7(3) </volume> <pages> 289-312, </pages> <year> 1994. </year>
Reference-contexts: Fig. 3 shows an example of an Unmap operation. ABC VM: from to ABC ABC from to 2.5 Recursive address spaces? Systems like Grasshopper <ref> [9] </ref> and L4 [10] use similar mapping operations, but use them in a hierarchical fashion to recursively construct address spaces. This does not fit the SASOS model, as there can only be one address-space, so mappings can only operate between different parts of the same address-space.
Reference: [10] <editor> J. Liedtke. </editor> <booktitle> On -kernel construction. In Proceedings of the 15th ACM Symposium on OS Principles, </booktitle> <address> Copper Mountain, CO, USA, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Fig. 3 shows an example of an Unmap operation. ABC VM: from to ABC ABC from to 2.5 Recursive address spaces? Systems like Grasshopper [9] and L4 <ref> [10] </ref> use similar mapping operations, but use them in a hierarchical fashion to recursively construct address spaces. This does not fit the SASOS model, as there can only be one address-space, so mappings can only operate between different parts of the same address-space.
Reference: [11] <author> R. A. Lorie. </author> <title> Physical integrity in a large segmented database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 2 </volume> <pages> 91-104, </pages> <year> 1997. </year> <title> 1 In a distributed system, the word same needs to be taken with a grain of salt, as some threads may see a somewhat newer copy than others. This is not different from any other distributed shared memory system. </title> <type> 9 </type>
Reference-contexts: The copy-on-write semantics of the default pager for the Copy system call ensures that only dirty pages are actually copied. A stable version of the checkpointing scheme can be built with the help of a user-level pager using explicit shadow-paging <ref> [11] </ref> and an atomic update operation [12]. For the purpose of using Challis' atomic update algorithm we use a two-page object st page which is located at a well-known address (e.g. pointed to by the checkpointed object's entry in the object table).
Reference: [12] <author> M. F. Challis. </author> <title> Database consistency and integrity in a multi-user environment. </title> <editor> In B. Shneiderman, editor, </editor> <booktitle> Databases: Improving Usability and Responsiveness, </booktitle> <pages> pages 245-70. </pages> <publisher> Academic Press, </publisher> <year> 1978. </year> <month> 10 </month>
Reference-contexts: The copy-on-write semantics of the default pager for the Copy system call ensures that only dirty pages are actually copied. A stable version of the checkpointing scheme can be built with the help of a user-level pager using explicit shadow-paging [11] and an atomic update operation <ref> [12] </ref>. For the purpose of using Challis' atomic update algorithm we use a two-page object st page which is located at a well-known address (e.g. pointed to by the checkpointed object's entry in the object table). We can then do atomic updates to stored values as shown in Fig. 4.
References-found: 12

