URL: http://www.cs.cornell.edu/home/paskin/documents/cc.ps
Refering-URL: 
Root-URL: 
Title: Data Caching in Client-Server DBMS Architectures  
Author: Mark Paskin 
Affiliation: Cornell University  
Abstract: Caching is a common technique used to avoid the latency involved in accessing objects stored on disk. Caching is essential in the context of query processing, where data must be both nonvolatile and efficiently accessible. One of the most popular DBMS architectures is the client-server model, where clients are separated from the server by a network. In this model, the latency created by the network provides a new opportunity to apply caching techniques to improve performance. In this paper we survey recent work in data caching for client-server architectures, including different caching architectures, algorithms for maintaining cache consistency, optimizations on caching (in-cluding prefetching), and the tradeoffs involved in caching data. 
Abstract-found: 1
Intro-found: 1
Reference: [AGLM95] <author> A. Adya, R. Gruber, B. Liskov, and U. Maheshwari. </author> <title> Efficient Optimistic Con-currency Control Using Loosely Synchronized Clocks. </title> <booktitle> In Proceedings of ACM SIGMOD '95 International Conference on Management of Data, </booktitle> <address> San Jose, CA, </address> <pages> pages 23-34, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Maintaining cache consistency in page-server architectures has been studied extensively in <ref> [WN90, CFLS91, WR91, FC92, AGLM95] </ref>. [FCL97] surveys these algorithms, proposes a taxonomy which classifies them, and compares their performance across a range of workloads. According to [FCL97], cache consistency algorithms can be classified into two groups: 1.
Reference: [BG81] <author> Philip Bernstein and Nathan Good man. </author> <title> Concurrency Control in Distributed Database Systems. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <month> August </month> <year> 1981. </year>
Reference-contexts: Because we confine our study to client-server architectures (see Section 2), we are not concerned with whether other clients can access cached data. (Such architectures are called distributed databases, and caching in these architectures is explored in papers like <ref> [BG81] </ref>.) Finally, in this paper we will explore both volatile (main-memory) caches and non-volatile (on-disk) caches (see Section 4). However, unless otherwise stated, caches are assumed to exist in client memory.
Reference: [BHG87] <author> P. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: Unless otherwise noted, we assume the memory page to be the atomic caching unit. Data-shipping servers which serve memory pages are, un-surprisingly, called page-servers [DFMV90]. Page-serving architectures closely resemble multiprocessor environments, and many of the results presented in this survey are direct extensions of the well-known replica management theory <ref> [BHG87] </ref>. 3 4 Cache Location Alternatives Most of the results presented in this survey were designed with client memory caches in mind. This is a reasonable assumption, as client memory is significantly less expensive to access than server memory or disk, which resides over a network.
Reference: [BK96] <author> Julie Basu and Arthur M. Keller. </author> <title> Degrees of Transaction Isolation in SQL*Cache: </title> <type> 9 </type>
Reference-contexts: Their results are decisive, showing that detection-based algorithms are not competitive with avoidance schemes unless they are highly optimistic (e.g., deferred validity check). In contrast to page-server architectures, comparatively less work has been done on maintaining consistency in associative caches. <ref> [BK96] </ref> describes algorithms which guarantee the four levels of transaction sonsistenct for the SQL*Cache, proposed in [KB96]. They present two algorithms, one detection-based and one avoidance-based, for guaranteeing level three consistency.
References-found: 4

