URL: http://www.wi.leidenuniv.nl/home/joost/icec.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: kemenade@cwi.nl  fjoost,guszg@wi.leidenuniv.nl  
Title: Raising GA Performance by Simultaneous Tuning of Selective Pressure and Recombination Disruptiveness  
Author: C.H.M. van Kemenade J.N. Kok A.E. Eiben 
Address: P.O. Box 94079, 1090 GB Amsterdam, The Netherlands  P.O. Box 9512, 2300 RA Leiden, The Netherlands  
Affiliation: CWI, Dept. of Software Technology  Leiden University, Dept. of Computer Science  
Abstract: In many Genetic Algorithms applications the objective is to find a (near-)optimal solution using a limited amount of computation. Given these requirements it is difficult to find a good balance between exploration and exploitation. Usually such a balance is found by tuning the various parameters (like the selective pressure, population size, the mutation- and crossover rate) of the Genetic Algorithm. As an alternative we propose simultaneous tuning of the selective pressure and the disruptiveness of the recombination operators. Our experiments show that the combination of a proper selective pressure and a highly disruptive recombination operator yields superior performance. The reduction mechanism used in a Steady-State GA has a strong influence on the optimal crossover disruptiveness. Using the worst fitness deletion strategy the building blocks present in the current best individuals are always preserved. This releases the crossover operator from the burden to maintain good building blocks and allows us to tune crossover disruptiveness to improve the search for better individuals.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.A. De Jong and W.M. Spears. </author> <title> A formal analysis of the role of multi-point crossover in genetic algorithms. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 5 </volume> <pages> 1-26, </pages> <year> 1992. </year>
Reference-contexts: One way of tuning the disruptiveness of recombination operators is to control the number of crossover points. De Jong et al. studied the influence of multi-point crossover <ref> [1] </ref> and Syswerda defined and tested the uniform crossover [5], which can be tuned using a biased coin. The generalized n-ary crossover operators [2, 3] adjusts the number of parents in order to tune disruptiveness. In this paper we focus on Steady-State GA's [8, 6] using a bit representation. <p> The back of this graph corresponds to the random initial population, where alle bit-variances are close to their maximal value. When studying operators, their disruptiveness is an important aspect <ref> [4, 1] </ref>. <p> Although many interesting observations regarding operator behavior can be obtained using this definition <ref> [1] </ref>, we are more interested interaction between the recombination operator and a finite population, and therefore in the probability that a discovered schemata will survive in a population. <p> We give three examples: 1. The n-point crossover. By increasing the number of crossover points this operator gets more disrup tive <ref> [1] </ref>. 2. The generalized n-ary recombination operators, with adjustable arity, as introduced in [2, 3]. 3. The uniform crossover of Syswerda [5] can be tuned by using a biased coin (P 0 6= 0:5) [1]. <p> By increasing the number of crossover points this operator gets more disrup tive <ref> [1] </ref>. 2. The generalized n-ary recombination operators, with adjustable arity, as introduced in [2, 3]. 3. The uniform crossover of Syswerda [5] can be tuned by using a biased coin (P 0 6= 0:5) [1]. In the experiments we are going to apply the diagonal crossover (a generalized n-ary version of the one-point crossover) and n-point crossover. The disruptiveness of this operator can be tuned easily by adjusting its number of parents.
Reference: [2] <author> A.E. Eiben, P-E. Raue, and Zs. Ruttkay. </author> <title> Genetic algorithms with multi-parent recombination. </title> <booktitle> In Parallel Problem Solving from Nature - 3, </booktitle> <pages> pages 78-87, </pages> <year> 1994. </year>
Reference-contexts: De Jong et al. studied the influence of multi-point crossover [1] and Syswerda defined and tested the uniform crossover [5], which can be tuned using a biased coin. The generalized n-ary crossover operators <ref> [2, 3] </ref> adjusts the number of parents in order to tune disruptiveness. In this paper we focus on Steady-State GA's [8, 6] using a bit representation. This GA will be applied to function optimization problems, as these problems are often used as a test suite in GA related papers. <p> We give three examples: 1. The n-point crossover. By increasing the number of crossover points this operator gets more disrup tive [1]. 2. The generalized n-ary recombination operators, with adjustable arity, as introduced in <ref> [2, 3] </ref>. 3. The uniform crossover of Syswerda [5] can be tuned by using a biased coin (P 0 6= 0:5) [1]. In the experiments we are going to apply the diagonal crossover (a generalized n-ary version of the one-point crossover) and n-point crossover.
Reference: [3] <author> A.E. Eiben, C.H.M. van Kemenade, and J.N. Kok. </author> <booktitle> Orgy in the computer: Multi-parent reproduction in genetic algorithms. In Third European Conference on Artificial Life, </booktitle> <pages> pages 934-945. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: De Jong et al. studied the influence of multi-point crossover [1] and Syswerda defined and tested the uniform crossover [5], which can be tuned using a biased coin. The generalized n-ary crossover operators <ref> [2, 3] </ref> adjusts the number of parents in order to tune disruptiveness. In this paper we focus on Steady-State GA's [8, 6] using a bit representation. This GA will be applied to function optimization problems, as these problems are often used as a test suite in GA related papers. <p> We give three examples: 1. The n-point crossover. By increasing the number of crossover points this operator gets more disrup tive [1]. 2. The generalized n-ary recombination operators, with adjustable arity, as introduced in <ref> [2, 3] </ref>. 3. The uniform crossover of Syswerda [5] can be tuned by using a biased coin (P 0 6= 0:5) [1]. In the experiments we are going to apply the diagonal crossover (a generalized n-ary version of the one-point crossover) and n-point crossover.
Reference: [4] <editor> L.J. Eshelman and R.A. Caruana andJ.D. Schaffer. </editor> <title> Biases in the crossover landscape. </title> <booktitle> In Third International Conference on Genetic Algorithms, </booktitle> <pages> pages 10-19, </pages> <year> 1989. </year>
Reference-contexts: The back of this graph corresponds to the random initial population, where alle bit-variances are close to their maximal value. When studying operators, their disruptiveness is an important aspect <ref> [4, 1] </ref>.
Reference: [5] <author> G. Syswerda. </author> <title> Uniform crossover in genetic algorithms. </title> <booktitle> In Third International Conference on Genetic Algorithms, </booktitle> <pages> pages 2-9, </pages> <year> 1989. </year>
Reference-contexts: One way of tuning the disruptiveness of recombination operators is to control the number of crossover points. De Jong et al. studied the influence of multi-point crossover [1] and Syswerda defined and tested the uniform crossover <ref> [5] </ref>, which can be tuned using a biased coin. The generalized n-ary crossover operators [2, 3] adjusts the number of parents in order to tune disruptiveness. In this paper we focus on Steady-State GA's [8, 6] using a bit representation. <p> We give three examples: 1. The n-point crossover. By increasing the number of crossover points this operator gets more disrup tive [1]. 2. The generalized n-ary recombination operators, with adjustable arity, as introduced in [2, 3]. 3. The uniform crossover of Syswerda <ref> [5] </ref> can be tuned by using a biased coin (P 0 6= 0:5) [1]. In the experiments we are going to apply the diagonal crossover (a generalized n-ary version of the one-point crossover) and n-point crossover.
Reference: [6] <author> G. Syswerda. </author> <title> A study of reproduction in generational and steady-state genetic algorithms. </title> <editor> In G. Rawlins, editor, </editor> <booktitle> Foundations of Genetic Algorithms - 1, </booktitle> <pages> pages 94-101. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: The generalized n-ary crossover operators [2, 3] adjusts the number of parents in order to tune disruptiveness. In this paper we focus on Steady-State GA's <ref> [8, 6] </ref> using a bit representation. This GA will be applied to function optimization problems, as these problems are often used as a test suite in GA related papers. <p> Given the second definition of P d , we see that a raising value for PI [H q ], which corresponds to a schemata of relatively high fitness, will result in the recombination operator getting less disruptive for schemata H. 4 Set-up of the Experiments We consider Steady-State GA's <ref> [8, 6] </ref>. During a single cycle of such a GA only a small fraction of the total population is replaced. In our experiments one child is produced, and replaces an individual of the population. A single cycle consist of selection, production and reduction. <p> During a single cycle of such a GA only a small fraction of the total population is replaced. In our experiments one child is produced, and replaces an individual of the population. A single cycle consist of selection, production and reduction. According to Syswerda <ref> [6] </ref> a Steady-State algorithm will behave almost identically to a Generational GA when random deletion is used as a reduction schedule.
Reference: [7] <author> D. Thierens and D.E. Goldberg. </author> <title> Mixing in genetic algorithms. </title> <editor> In S. Forrest, editor, </editor> <booktitle> Fifth International Conference on Genetic Algorithms, </booktitle> <pages> pages 38-45. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: The Generational GA converges much slower than the Steady-State GA. After approximately 2 10 4 function evaluations the best individual starts even to deteriorate. This is probably the result of cross-competition between the well performing building blocks of short defining length <ref> [7] </ref>. When the diversity in these building blocks decreases the probability the current best individual is present in subsequent generations starts to decrease too. When applying a more disruptive crossover, such as the 9-point crossover, this deterioration appears even earlier.
Reference: [8] <author> D. Whitley. </author> <title> The GENITOR algorithm and selective pressure. </title> <booktitle> In Third International Conference on Genetic Algorithms, </booktitle> <pages> pages 116-121, </pages> <year> 1989. </year>
Reference-contexts: The generalized n-ary crossover operators [2, 3] adjusts the number of parents in order to tune disruptiveness. In this paper we focus on Steady-State GA's <ref> [8, 6] </ref> using a bit representation. This GA will be applied to function optimization problems, as these problems are often used as a test suite in GA related papers. <p> Given the second definition of P d , we see that a raising value for PI [H q ], which corresponds to a schemata of relatively high fitness, will result in the recombination operator getting less disruptive for schemata H. 4 Set-up of the Experiments We consider Steady-State GA's <ref> [8, 6] </ref>. During a single cycle of such a GA only a small fraction of the total population is replaced. In our experiments one child is produced, and replaces an individual of the population. A single cycle consist of selection, production and reduction.
Reference: [9] <author> D. Whitley and T. Starkweather. </author> <title> GENITOR II: A distributed genetic algorithm. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-214, </pages> <year> 1990. </year> <month> 8 </month>
Reference-contexts: In that case relatively fit individuals never get lost, and there is no reason to assign multiple copies to such individuals. In fact, assigning multiple copies is a waste of computation, and might lead to an allocation of too many reproductive trials to the multiplied individuals <ref> [9] </ref>, and therefore lead to premature convergence. For this reason the worst fitness deletion mechanism is best combined with a low tournament size. The same set of experiments has been applied to optimize the Griewangk function.
References-found: 9

