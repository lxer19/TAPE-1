URL: http://www.research.ibm.com/security/bck2.ps
Refering-URL: http://www.cs.arizona.edu/xkernel/www/ipsec/ipsec.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: mihir@cs.ucsd.edu.  Email: canetti@  Email:hugo@watson.ibm.  
Title: Keying Hash Functions for Message Authentication  
Author: Mihir Bellare Ran Canetti Hugo Krawczyk 
Web: http://www-cse.ucsd.edu/users/mihir.  
Address: San Diego, 9500 Gilman Drive, La Jolla, CA 92093.  PO Box 704, Yorktown Heights, New York 10598.  PO Box 704, Yorktown Heights, New York 10598.  
Affiliation: Department of Computer Science Engineering, Mail Code 0114, University of California at  IBM T.J. Watson Research Center,  IBM T.J. Watson Research Center,  com.  
Date: June 1996  
Note: Lecture Notes in Computer Science Vol. 1109, N. Koblitz ed., Springer-Verlag, 1996.  watson.ibm.com. Work done while author was at MIT, supported by a post-doctoral grant from the Rothschild Foundation.  
Abstract: An abridged version of this paper appears in Advances in Cryptology - Crypto 96 Proceedings, Abstract The use of cryptographic hash functions like MD5 or SHA for message authentication has become a standard approach in many Internet applications and protocols. Though very easy to implement, these mechanisms are usually based on ad hoc techniques that lack a sound security analysis. We present new constructions of message authentication schemes based on a cryptographic hash function. Our schemes, NMAC and HMAC, are proven to be secure as long as the underlying hash function has some reasonable cryptographic strengths. Moreover we show, in a quantitative way, that the schemes retain almost all the security of the underlying hash function. In addition our schemes are efficient and practical. Their performance is essentially that of the underlying hash function. Moreover they use the hash function (or its compression function) as a black box, so that widely available library code or hardware can be used to implement them in a simple way, and replaceability of the underlying hash function is easily supported. 
Abstract-found: 1
Intro-found: 1
Reference: [At1] <author> R. Atkinson, </author> <title> "Security Architecture for the Internet Protocol", IETF Network Working Group, </title> <type> RFC 1825, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: Efficiency. Our constructions use the cryptographic hash functions in a very simple way. In particular, the performance degradation relative to the underlying hash scheme is minimal. This is motivated by the use of these functions in basic applications like IP (Internet Protocol) security <ref> [At1, At2] </ref> where the performance cost of such a function influences the computational and network performance of many other applications. Black box usage of hash functions. The constructions and analysis presented here are free from any dependency on the peculiarities of the underlying hash function.
Reference: [At2] <author> R. Atkinson, </author> <title> "IP Authentication Header", IETF Network Working Group, </title> <type> RFC 1826, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: Efficiency. Our constructions use the cryptographic hash functions in a very simple way. In particular, the performance degradation relative to the underlying hash scheme is minimal. This is motivated by the use of these functions in basic applications like IP (Internet Protocol) security <ref> [At1, At2] </ref> where the performance cost of such a function influences the computational and network performance of many other applications. Black box usage of hash functions. The constructions and analysis presented here are free from any dependency on the peculiarities of the underlying hash function.
Reference: [BCK1] <author> M. Bellare, R. Canetti and H. Krawczyk, </author> <title> "Pseudorandom functions revisted: the cascade construction," </title> <note> Available via http://www.research.ibm.com/security/ or http://www-cse. ucsd.edu/users/mihir/papers/papers.html. </note>
Reference-contexts: In this work we have initiated the first rigorous treatment of the subject and, in particular, present the first constructions whose security can be formally analyzed, without resorting to unrealistic assumptions such as the "ideality" of the underlying hash functions. In a companion work <ref> [BCK1] </ref> we consider how to design "pseudo-random functions" based on iterated compression functions. We show that if the compression function is pseudo-random then so is its iteration. <p> Nonetheless it is instructive to actually see what known attacks achieve, and cross-check that indeed they don't work. We also compare our construction to other proposals. Birthday attacks. As shown in [PV1] and our companion work <ref> [BCK1] </ref>, birthday attacks, that are the basis to finding collisions in cryptographic hash functions, can be applied to attack also keyed MAC schemes based on iterated functions (including also CBC-MAC, and other schemes). These attacks apply to our new constructions as well. <p> Finally, we mention that these birthday attacks (at least in their straightforward form) can be avoided by randomizing the MAC construction in a per-message basis. We refer to <ref> [BCK1] </ref> for further details. Collision attacks on the key-less hash function. Consider the "append-only" construction: MAC k (x) = F (x; k). Assume that two strings x and x 0 are known for which F (x) = F (x 0 ) (this collision corresponds to the key-less hash function). <p> This function, which uses MD5 as the underlying hash function, is based on the envelope method, but pads the prepended key to a full block boundary. In addition, it uses the same key for prepend-ing and appending. The best analysis known for this type of functions is given in <ref> [BCK1] </ref> which show that when using different and independent keys (for prepend and append) the security of the function can be based on the pseudorandom properties of the underlying compression function. <p> security analysis in two important aspects: it requires weaker assumptions on the underlying hash function (since the pseudorandom-ness of the compression function implies our assumptions), and the security of the underlying hash function is preserved in a significantly stronger way (as quantified in Theorem 4.1) than in the analysis in <ref> [BCK1] </ref>. Another important difference is that the HMAC variant deals better with the use of a single key than does the construction of RFC1828; in the latter, the use of the same key for prepend and append makes the analysis in [BCK1] less applicable and, in particular, makes the scheme susceptible <p> quantified in Theorem 4.1) than in the analysis in <ref> [BCK1] </ref>. Another important difference is that the HMAC variant deals better with the use of a single key than does the construction of RFC1828; in the latter, the use of the same key for prepend and append makes the analysis in [BCK1] less applicable and, in particular, makes the scheme susceptible to the above mentioned key recovery attack of [PV2].
Reference: [BGR] <author> M. Bellare, R. Gu erin and P. Rogaway, </author> <title> "XOR MACs: New methods for message authentication using finite pseudorandom functions," </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Further block cipher based constructions were provided and analyzed in <ref> [BGR] </ref>. MAC constructions based on cryptographic hash functions have been in use for a few years (see Tsudik [Ts] for an early description of such constructions and Touch [To] for a list of Internet protocols that use this approach).
Reference: [BKR] <author> M. Bellare, J. Kilian and P. Rogaway. </author> <title> "The security of cipher block chaining." </title> <booktitle> Advances in Cryptology - Crypto 94 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 839, </volume> <editor> Y. Desmedt ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: A precise definition of MACs and their security is in Section 2. 1.2 MACing with cryptographic hash functions MACs have most commonly been constructed out of block ciphers like DES. (The most popular in this genre is the CBC MAC, analyzed in <ref> [BKR, PV1] </ref>.) More recently, however, there has been a surge of interest in the idea of constructing MACs from cryptographic hash functions like MD5 [Ri] and SHA-1 [SHA]. <p> HMAC even when used with MD5. 5 (See Section 6 for further discussion.) A more complex set of assumptions on the hash functions can be formulated to capture these extra strengths of our constructions but it is omitted here. 1.5 Related work The exact security treatment of MACs began in <ref> [BKR] </ref> (where CBC-MAC is analyzed), and we use their definitions. Further block cipher based constructions were provided and analyzed in [BGR]. <p> Notice that a message m i can be chosen by the adversary as a function of the previously seen messages and corresponding authentication tags. Following <ref> [BKR] </ref>, we quantify security in terms of the success probability achievable as a function of the number q of valid MAC examples seen by the adversary, and the available time t. (Note the success probability achievable for given t; q depends on the parameters of the MAC scheme, in particular its
Reference: [BGV] <author> A. Bosselaers, R. Govaerts, J. Vandewalle, </author> <title> "Fast hashing on the Pentium," </title> <booktitle> Advances in Cryptology - Crypto 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 1109, </volume> <editor> N. Koblitz ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: But in practice they are infeasible. See Section 6 for more information.) They also present a heuristic construction, the MDx-MAC, based on these findings. Kaliski and Robshaw [KR] discuss and compare various constructions. Performance issues are discussed in <ref> [To, BGV] </ref>. In this work we have initiated the first rigorous treatment of the subject and, in particular, present the first constructions whose security can be formally analyzed, without resorting to unrealistic assumptions such as the "ideality" of the underlying hash functions.
Reference: [Da] <author> I. Damg -ard, </author> <title> "A design principle for hash functions," </title> <booktitle> Advances in Cryptology - Crypto 89 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 435, </volume> <editor> G. Brassard ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: We concentrate on a particular class of cryptographic hash functions, which we call iterated constructions. Iterated constructions. A particular methodology for constructing collision-resistant hash function has been proposed by Merkle [Me] (and later by Damg-ard <ref> [Da] </ref>.) This methodology forms the basis for the design of the most common cryptographic hash functions like MD5 and SHA-1. It is based on a basic component called compression function which processes short fixed-length inputs, and is then iterated in a particular way in order to hash arbitrarily long inputs. <p> Notice that a way to pad messages to an exact multiple of b bits needs to be defined, in particular, MD5 and SHA pad inputs to always include an encoding of their length. The motivation for this iterative structure arises from the observation (of Merkle [Me] and Damg-ard <ref> [Da] </ref>) that if the compression function is collision-resistant then so is the resultant iterated hash function. (The converse is not necessarily true). Thus, this structure provides a general design criterion for collision resistant hash functions since.
Reference: [Do1] <author> H. Dobbertin, </author> <title> "Cryptanalysis of MD4," Fast Software Encryption Workshop, </title> <booktitle> Lecture Notes in Computer Sciences, </booktitle> <volume> vol. 1039, </volume> <publisher> Springer Verlag, </publisher> <year> 1996, </year> <pages> pp. 53-69. </pages>
Reference-contexts: Moreover, our constructions require from the hash function significantly weaker properties than standard collision-freeness. In particular, current successful methods for finding collisions in MD5 <ref> [Do1, Do2] </ref> seem inapplicable to breaking our schemes when the hash function in use is MD5 [Do3]. Efficiency. Our constructions use the cryptographic hash functions in a very simple way. In particular, the performance degradation relative to the underlying hash scheme is minimal. <p> If the hashing can be done at a speed of 1Gbit/second this would require continuous hashing (using the same key) during 250,000 years. 9 We note that attacks that find collisions on the hash function with random and known IVs (such attacks are known for MD4 <ref> [Do1] </ref>) can be adapted (via extension attacks) to find collisions even if the IV is secret. Such an attack would compromise the weak collision resistance property of the hash function. <p> None of these advantages for the attacker exist when attacking NMAC. In addition, as the recent experience teaches us, it is much easier to find collisions via analytical methods (e.g., <ref> [Do1, Do2, Do3] </ref>) against the key-less function than breaking our schemes. <p> As noted in section 3 extension attacks can allow the transformation of attacks against a hash function that uses a random but known IV into an attack against secret IVs. Such attacks are known against MD4 <ref> [Do1] </ref> and are plaussible to exist against MD5 [Do2, Do3]. However, these attacks are inapplicable against our MAC constructions where, as said above, the outer application 16 of the hash function prevents the extension attacks. Divide and conquer attacks.
Reference: [Do2] <author> H. Dobbertin, </author> <title> "MD5 is not collision-free," </title> <type> Manuscript, </type> <year> 1996. </year>
Reference-contexts: Moreover, our constructions require from the hash function significantly weaker properties than standard collision-freeness. In particular, current successful methods for finding collisions in MD5 <ref> [Do1, Do2] </ref> seem inapplicable to breaking our schemes when the hash function in use is MD5 [Do3]. Efficiency. Our constructions use the cryptographic hash functions in a very simple way. In particular, the performance degradation relative to the underlying hash scheme is minimal. <p> The later remark is relevant to the recently discovered collision attacks on MD5 <ref> [Do2, Do3] </ref>. <p> None of these advantages for the attacker exist when attacking NMAC. In addition, as the recent experience teaches us, it is much easier to find collisions via analytical methods (e.g., <ref> [Do1, Do2, Do3] </ref>) against the key-less function than breaking our schemes. <p> As noted in section 3 extension attacks can allow the transformation of attacks against a hash function that uses a random but known IV into an attack against secret IVs. Such attacks are known against MD4 [Do1] and are plaussible to exist against MD5 <ref> [Do2, Do3] </ref>. However, these attacks are inapplicable against our MAC constructions where, as said above, the outer application 16 of the hash function prevents the extension attacks. Divide and conquer attacks.
Reference: [Do3] <author> H. Dobbertin, </author> " <title> The Status of MD5 After a Recent Attack", </title> <journal> RSA Labs' CryptoBytes, </journal> <volume> Vol. 2 No. 2, </volume> <month> Summer </month> <year> 1996. </year> <note> http://www.rsa.com/rsalabs/pubs/cryptobytes.html </note>
Reference-contexts: Moreover, our constructions require from the hash function significantly weaker properties than standard collision-freeness. In particular, current successful methods for finding collisions in MD5 [Do1, Do2] seem inapplicable to breaking our schemes when the hash function in use is MD5 <ref> [Do3] </ref>. Efficiency. Our constructions use the cryptographic hash functions in a very simple way. In particular, the performance degradation relative to the underlying hash scheme is minimal. <p> The later remark is relevant to the recently discovered collision attacks on MD5 <ref> [Do2, Do3] </ref>. <p> None of these advantages for the attacker exist when attacking NMAC. In addition, as the recent experience teaches us, it is much easier to find collisions via analytical methods (e.g., <ref> [Do1, Do2, Do3] </ref>) against the key-less function than breaking our schemes. <p> As noted in section 3 extension attacks can allow the transformation of attacks against a hash function that uses a random but known IV into an attack against secret IVs. Such attacks are known against MD4 [Do1] and are plaussible to exist against MD5 <ref> [Do2, Do3] </ref>. However, these attacks are inapplicable against our MAC constructions where, as said above, the outer application 16 of the hash function prevents the extension attacks. Divide and conquer attacks.
Reference: [DSS] <author> National Institute for Standards and Technology, </author> <title> "Digital Signature Standard (DSS)", </title> <journal> Federal Register, </journal> <volume> Vol. 56, No. 169, </volume> <month> August, </month> <year> 1991 </year>
Reference-contexts: This use for pseudorandom generation of functions like MD5 or SHA-1 is very common in practical implementations (in fact, the designers of SHA-1 recommended using this function for pseudorandom derivation of various quantities in the DSS standard <ref> [DSS] </ref>). The above particular values of opad and ipad were chosen to have a very simple representation (to simplify the function's specification and minimize the potential of implementation errors), and to provide a high Hamming distance between the pads.
Reference: [GGM] <author> O. Goldreich, S. Goldwasser and S. Micali, </author> <title> "How to construct random functions," </title> <journal> Journal of the ACM, </journal> <volume> Vol. 33, No. 4, </volume> <pages> 210-217, </pages> <year> (1986). </year>
Reference: [KR] <author> B. Kaliski and M. Robshaw, </author> <title> "Message Authentication with MD5", </title> <journal> RSA Labs' Cryp-toBytes, </journal> <volume> Vol. 1 No. 1, </volume> <month> Spring </month> <year> 1995. </year> <month> 18 </month>
Reference-contexts: But in practice they are infeasible. See Section 6 for more information.) They also present a heuristic construction, the MDx-MAC, based on these findings. Kaliski and Robshaw <ref> [KR] </ref> discuss and compare various constructions. Performance issues are discussed in [To, BGV].
Reference: [KBC] <author> H. Krawczyk, M. Bellare and R. Canetti, </author> <title> Internet draft draft-ietf-ipsec-hmac-md5--txt.00, </title> <month> March </month> <year> 1996. </year>
Reference-contexts: Our HMAC construction was recently chosen as the mandatory to implement authentication transform for Internet security protocols and for this purpose is described in an Internet draft <ref> [KBC] </ref> and an upcoming RFC. 2 Basic Notions 2.1 MACs and their security A MAC is a function which takes the secret key k (shared between the parties) and the message m to return a tag MAC k (m). <p> HMAC has now replaced the RFC1828 construction as the mandatory to implement authentication transform for Internet security protocols <ref> [KBC] </ref>. 17 Acknowledgments We thank Burt Kaliski, Bart Preneel, Matt Robshaw, Adi Shamir and Paul van Oorschot for helpful discussions on the subject of this paper. In particular we thank Adi Shamir for suggesting the use of XOR pads instead of concatenated pads in our original design of HMAC.
Reference: [MS] <author> P. Metzger and W. Simpson, </author> <title> "IP Authentication using Keyed MD5", IETF Network Working Group, </title> <type> RFC 1828, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: We note that this construction is more "intrusive" in the sense that it requires some more changes to the existing hash functions, and it impacts performance in a moderate but noticeable way. Comparison with rfc1828. The MAC scheme described in RFC1828 <ref> [MS] </ref> has been proposed as a standard mechanism for message authentication in the context of IP (Internet Protocol) security. This function, which uses MD5 as the underlying hash function, is based on the envelope method, but pads the prepended key to a full block boundary.
Reference: [Me] <author> R. Merkle, </author> <title> "One way hash functions and DES," </title> <booktitle> Advances in Cryptology - Crypto 89 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 435, </volume> <editor> G. Brassard ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1989. </year> <title> (Based on unpublished paper from 1979 and his Ph. </title> <type> D thesis, </type> <institution> Stanford, </institution> <year> 1979). </year>
Reference-contexts: We concentrate on a particular class of cryptographic hash functions, which we call iterated constructions. Iterated constructions. A particular methodology for constructing collision-resistant hash function has been proposed by Merkle <ref> [Me] </ref> (and later by Damg-ard [Da].) This methodology forms the basis for the design of the most common cryptographic hash functions like MD5 and SHA-1. <p> See Figure 2. Notice that a way to pad messages to an exact multiple of b bits needs to be defined, in particular, MD5 and SHA pad inputs to always include an encoding of their length. The motivation for this iterative structure arises from the observation (of Merkle <ref> [Me] </ref> and Damg-ard [Da]) that if the compression function is collision-resistant then so is the resultant iterated hash function. (The converse is not necessarily true). Thus, this structure provides a general design criterion for collision resistant hash functions since.
Reference: [Ne] <author> J. Nechvatal, </author> <title> "Public Key Cryptography," </title> <booktitle> in Contemporary Cryptography, The Science of Information Integrity, </booktitle> <editor> G. Simmons ed., </editor> <publisher> IEEE Press, </publisher> <year> 1992. </year>
Reference-contexts: The prime motivation for such functions is to be combined with digital signatures in a way that makes these signatures more efficient and yet unforgeable. For that application it is required that the function be publicly computable and, in particular, that it involve no secret key. (See <ref> [Ne] </ref> for background on collision-resistant hash functions.) In addition to the basic collision-resistance property, cryptographic hash functions are usually designed to have some randomness-like properties, like good mixing properties, independence of input/output, unpredictability of the output when parts of the input are unknown, etc.
Reference: [PV1] <author> B. Preneel and P. van Oorschot, </author> <title> "MD-x MAC and building fast MACs from hash functions," </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: A precise definition of MACs and their security is in Section 2. 1.2 MACing with cryptographic hash functions MACs have most commonly been constructed out of block ciphers like DES. (The most popular in this genre is the CBC MAC, analyzed in <ref> [BKR, PV1] </ref>.) More recently, however, there has been a surge of interest in the idea of constructing MACs from cryptographic hash functions like MD5 [Ri] and SHA-1 [SHA]. <p> MAC constructions based on cryptographic hash functions have been in use for a few years (see Tsudik [Ts] for an early description of such constructions and Touch [To] for a list of Internet protocols that use this approach). Preneel and van Oorschot <ref> [PV1, PV2] </ref> survey existing constructions and point out to some of their properties and weaknesses; in particular, they present a detailed description of the effect of birthday attacks on iterated constructions. (These attacks remain the best possible ones on our schemes. But in practice they are infeasible. <p> For more details on this aspect see the divide and conquer attack in Section 6. Remark 4.8 Preneel and van Oorschot <ref> [PV1] </ref> recommend outputting only half of the bits of the hash output as the authentication tag. <p> Nonetheless it is instructive to actually see what known attacks achieve, and cross-check that indeed they don't work. We also compare our construction to other proposals. Birthday attacks. As shown in <ref> [PV1] </ref> and our companion work [BCK1], birthday attacks, that are the basis to finding collisions in cryptographic hash functions, can be applied to attack also keyed MAC schemes based on iterated functions (including also CBC-MAC, and other schemes). These attacks apply to our new constructions as well. <p> Divide and conquer attacks. Consider the method, known as the "envelope" method, that combines the above prepend and append constructions, namely, MAC k 1 ;k 2 (x) = F (k 1 ; x; k 2 ). Pre-neel and van Oorschot <ref> [PV1] </ref> observe that in an attack directed to recover the whole key one does not need to work exponential time on the added length of keys k 1 and k 2 but one can recover both keys in a total time which is exponential on the length of one key. <p> It also serves to show that the use of a single `-bit long key in HMAC does not weaken the function against exhaustive search. Comparison with the construction of <ref> [PV1] </ref>. In [PV1] a construction is proposed which is also a variant of the envelope method. <p> It also serves to show that the use of a single `-bit long key in HMAC does not weaken the function against exhaustive search. Comparison with the construction of <ref> [PV1] </ref>. In [PV1] a construction is proposed which is also a variant of the envelope method.
Reference: [PV2] <author> B. Preneel and P. van Oorschot, </author> <title> "On the security of two MAC algorithms," </title> <booktitle> Advances in Cryptology - Eurocrypt 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> ??, <editor> U. Maurer ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: MAC constructions based on cryptographic hash functions have been in use for a few years (see Tsudik [Ts] for an early description of such constructions and Touch [To] for a list of Internet protocols that use this approach). Preneel and van Oorschot <ref> [PV1, PV2] </ref> survey existing constructions and point out to some of their properties and weaknesses; in particular, they present a detailed description of the effect of birthday attacks on iterated constructions. (These attacks remain the best possible ones on our schemes. But in practice they are infeasible. <p> This is in sharp contrast to birthday attacks on key-less hash functions which allow for far more efficient and close-to-realistic attacks [VW]. Notice that these attacks produce forgery of the MAC function but not key recovery. In <ref> [PV2] </ref>, however, it is shown that in some versions of the envelope method (the case where the same key is used to prepend and append and no block alignment of the appended key is performed), the birthday attacks can be further enhanced to provide full key recovery in time much shorter <p> deals better with the use of a single key than does the construction of RFC1828; in the latter, the use of the same key for prepend and append makes the analysis in [BCK1] less applicable and, in particular, makes the scheme susceptible to the above mentioned key recovery attack of <ref> [PV2] </ref>. HMAC has now replaced the RFC1828 construction as the mandatory to implement authentication transform for Internet security protocols [KBC]. 17 Acknowledgments We thank Burt Kaliski, Bart Preneel, Matt Robshaw, Adi Shamir and Paul van Oorschot for helpful discussions on the subject of this paper.
Reference: [Ri] <author> R. Rivest, </author> <title> "The MD5 message-digest algorithm," IETF Network Working Group, </title> <type> RFC 1321, </type> <month> April </month> <year> 1992. </year>
Reference-contexts: hash functions MACs have most commonly been constructed out of block ciphers like DES. (The most popular in this genre is the CBC MAC, analyzed in [BKR, PV1].) More recently, however, there has been a surge of interest in the idea of constructing MACs from cryptographic hash functions like MD5 <ref> [Ri] </ref> and SHA-1 [SHA]. This is particularly visible in the Internet community, where the development of security protocols has led to the need for simple, efficient, and widely available MAC mechanisms. <p> For the detailed description of the compression functions of these functions see <ref> [Ri, SHA] </ref>.) See Figure 1. The operation of the iterated hash function is as follows. First, an b-bit value IV is fixed. Next an input is hashed by iterating the compression function. <p> The NMAC construction presented in Section 4 requires direct access to code for the compression function (rather than for the overall hash function), in order to key the IV. Such a change is trivial for functions with well-structured code like MD5 (see <ref> [Ri] </ref>). However, in some cases one would still like to avoid even those minimal changes, and use the code (or hardware implementation) as is. Here we present an adaptation of NMAC that achieves this goal.
Reference: [SHA] <editor> FIPS 180-1. </editor> <title> Secure Hash Standard. Federal Information Processing Standard (FIPS), </title> <type> Publication 180-1, </type> <institution> National Institute of Standards and Technology, US Department of Commerce, </institution> <address> Washington D.C., </address> <month> April </month> <year> 1995. </year>
Reference-contexts: have most commonly been constructed out of block ciphers like DES. (The most popular in this genre is the CBC MAC, analyzed in [BKR, PV1].) More recently, however, there has been a surge of interest in the idea of constructing MACs from cryptographic hash functions like MD5 [Ri] and SHA-1 <ref> [SHA] </ref>. This is particularly visible in the Internet community, where the development of security protocols has led to the need for simple, efficient, and widely available MAC mechanisms. <p> For the detailed description of the compression functions of these functions see <ref> [Ri, SHA] </ref>.) See Figure 1. The operation of the iterated hash function is as follows. First, an b-bit value IV is fixed. Next an input is hashed by iterating the compression function.
Reference: [To] <author> J. </author> <title> Touch, "Performance Analysis of MD5", </title> <booktitle> Proceedings of Sigcomm '95, </booktitle> <pages> pp. 77-86. </pages> <note> (See also RFC 1810). </note>
Reference-contexts: Further block cipher based constructions were provided and analyzed in [BGR]. MAC constructions based on cryptographic hash functions have been in use for a few years (see Tsudik [Ts] for an early description of such constructions and Touch <ref> [To] </ref> for a list of Internet protocols that use this approach). <p> But in practice they are infeasible. See Section 6 for more information.) They also present a heuristic construction, the MDx-MAC, based on these findings. Kaliski and Robshaw [KR] discuss and compare various constructions. Performance issues are discussed in <ref> [To, BGV] </ref>. In this work we have initiated the first rigorous treatment of the subject and, in particular, present the first constructions whose security can be formally analyzed, without resorting to unrealistic assumptions such as the "ideality" of the underlying hash functions.
Reference: [Ts] <author> G. Tsudik, </author> <title> "Message authentication with one-way hash functions," </title> <booktitle> Proceedings of Info-com 92. </booktitle>
Reference-contexts: Further block cipher based constructions were provided and analyzed in [BGR]. MAC constructions based on cryptographic hash functions have been in use for a few years (see Tsudik <ref> [Ts] </ref> for an early description of such constructions and Touch [To] for a list of Internet protocols that use this approach). <p> Therefore, we first need to define a way to use cryptographic hash functions in conjunction with a key. The most common approach to key a hash function (see <ref> [Ts] </ref>) is to input the key as part of the data hashed by the function, e.g., hashing data x using key k is performed by applying the hash function F to the concatenation of k and x. Our approach is to key the function's IV.
Reference: [VW] <author> P. van Oorschot and M. Wiener, </author> <title> "Parallel Collision Search with Applications to Hash Functions and Discrete Logarithms", </title> <booktitle> Proceedings of the 2nd ACM Conf. Computer and Communications Security, </booktitle> <address> Fairfax, VA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: In the key-less case, the attacker can work in finding collisions independently of any user or key. Moreover, even brute force collision search attacks can become feasible for functions like MD5 due to the easiness of parallelization of these attacks (see <ref> [VW] </ref>). In contrast, attacks on secretly keyed hash functions cannot be parallelized as they require interaction with the legal user. <p> This is in sharp contrast to birthday attacks on key-less hash functions which allow for far more efficient and close-to-realistic attacks <ref> [VW] </ref>. Notice that these attacks produce forgery of the MAC function but not key recovery. <p> As showed in the above discussion on birthday attacks, while the latter is totally infeasible even for hash lengths of ` = 128, finding collisions to the plain hash function through birthday attacks approaches feasibility (see <ref> [VW] </ref>). The reason is that such a collision attack on the plain hash function can be performed off-line and independently of any secret key (and thus requires no interaction with the legitimate owner of k), and it is strongly parallelizable.
Reference: [X9.9] <author> ANSI X9.9, </author> <title> "American National Standard for Financial Institution Message Authentication (Wholesale)," </title> <journal> American Bankers Association, </journal> <note> 1981. Revised 1986. 19 </note>
References-found: 25

