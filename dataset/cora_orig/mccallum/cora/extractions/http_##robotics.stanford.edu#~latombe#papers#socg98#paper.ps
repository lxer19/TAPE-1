URL: http://robotics.stanford.edu/~latombe/papers/socg98/paper.ps
Refering-URL: http://robotics.stanford.edu/~latombe/projects/
Root-URL: http://www.robotics.stanford.edu
Email: halperin@math.tau.ac.il.  latombe@cs.stanford.edu.  rwilson@kodak.com.  
Title: A General Framework for Assembly Planning: The Motion Space Approach which are in general still
Author: Dan Halperin Jean-Claude Latombe Randall H. Wilson Eastman Kodak Company 
Note: Work on this paper by D. Halperin has been supported in part by an Alon Fellowship, by ESPRIT IV LTR Project No. 21957 (CGAL), by the USA-Israel Binational Science Foundation, by The Israel Science Foundation founded by the Israel Academy of Sciences and Humanities, and by the Hermann Minkowski Minerva Center for Geometry  Work on this paper by J.C. Latombe has been supported by Army MURI grant DAAH04-96-1-007. Eastman Kodak Company,  topics where some progress has recently been achieved but  
Address: Aviv 69978, Israel.  Stan-ford, CA 94305, USA.  Albuquerque, NM 87112-1881, USA.  
Affiliation: Tel Aviv University  Stanford University  Department of Computer Science, Tel Aviv University, Tel  at Tel Aviv University. Department of Computer Science, Stanford University,  
Abstract: Assembly planning is the problem of finding a sequence of motions to assemble a product from its parts. We present a general framework for finding assembly motions based on the concept of motion space. Assembly motions are parameterized such that each point in motion space represents a mating motion that is independent of the moving part set. For each motion we derive blocking relations that explicitly state which parts collide with other parts; each subassembly (rigid subset of parts) that does not collide with the rest of the assembly can easily be derived from the blocking relations. Motion space is partitioned into an arrangement of cells such that the blocking relations are fixed within each cell. In the first part of the paper we give background material, present the motion space approach and describe applications of the approach to assembly motions of several useful types, including one-step translations, multi-step translations, and infinitesimal rigid motions. Several efficiency improvements over the basic algorithms are described. The resulting algorithms have been implemented and tested extensively on complex assemblies and we describe some of the experimental results. Most of the results described in this part have been published separately before and we integrate them here under the unifying concept of motion space. In the second part (the last section) of the paper we survey major open problems in this domain. We discuss four 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Agarwal, M. de Berg, D. Halperin, and M. Sharir. </author> <title> Efficient generation of k-directional assembly sequences. </title> <booktitle> In Proc. 7th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 122-131, </pages> <year> 1996. </year>
Reference-contexts: If we are allowed to move the parts along k different directions (still one part at a time and each move is a single translation to infinity) then a more elaborate algorithm needs to be used <ref> [1] </ref> which runs in O (kN 4=3+" ) time. The latter algorithm has been also extended to deal with rotational motions along a small fixed set of axes, and with a slightly higher running time. For details see [1]. <p> translation to infinity) then a more elaborate algorithm needs to be used <ref> [1] </ref> which runs in O (kN 4=3+" ) time. The latter algorithm has been also extended to deal with rotational motions along a small fixed set of axes, and with a slightly higher running time. For details see [1]. The motion space approach that we present below is primarily concerned with determining one or several (or all) assembly sequences of a type, if these exist. More involved questions arise when one attempts to optimize certain cost measures of an assembly sequence|see Section 5.4. <p> The sets @P ij for all i; j 2 <ref> [1; n] </ref>; i 6= j decompose the motion space into an arrangement of cells [18] such that the dbg of A remains fixed over each cell. The arcs of the dbg on any cell c in this arrangement correspond exactly to the M-regions that contain c.
Reference: [2] <author> E. M. Arkin, R. Connelly, and J. S. B. Mitchell. </author> <title> On monotone paths among obstacles, with applications to planning assemblies. </title> <booktitle> In Proc. 5th ACM Symp. on Computational Geometry, </booktitle> <pages> pages 334-343, </pages> <year> 1989. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [44]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [27]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 9, 21, 23, 29, 48] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Some were quite general and hence limited to assemblies with small part count [3]. The ndbg was introduced to avoid this combinatorial trap [42, 45]. Arkin, Connelly, and Mitchell <ref> [2] </ref> use the concept of a monotone path among obstacles to derive a polynomial-time algorithm for partitioning an assembly of polygons in the plane with a one-step translation.
Reference: [3] <author> D. F. Baldwin, T. E. Abell, M.-C. M. Lui, T. L. De Fazio, and D. E. Whitney. </author> <title> An integrated computer aid for generating and evaluating assembly sequences for mechanical products. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 7(1) </volume> <pages> 78-94, </pages> <year> 1991. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [44]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [27]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 9, 21, 23, 29, 48] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Moreover, when all parts are rigid, there is a bijection between assembly and disassembly sequences, as far as geometric constraints are concerned. (This bijection would also be broken when physics, e.g., gravity, and motion control uncertainty are taken into account.) In many planners (e.g. <ref> [3, 23] </ref>), the procedure partition is based on generate-and-test: given S, enumerate all candidate partitions fS 1 ; S 2 g of S, until a path p is found that separates S 2 from S 1 . <p> Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [9, 21]. Some were quite general and hence limited to assemblies with small part count <ref> [3] </ref>. The ndbg was introduced to avoid this combinatorial trap [42, 45]. Arkin, Connelly, and Mitchell [2] use the concept of a monotone path among obstacles to derive a polynomial-time algorithm for partitioning an assembly of polygons in the plane with a one-step translation.
Reference: [4] <author> N. Birnbaum and D. Halperin. </author> <title> A randomized approach to assembly planning along paths. </title> <type> Manuscript, </type> <year> 1998. </year>
Reference-contexts: If we need to find a removable subset along a complicated path, then this is the partitioning problem which is even harder. Can the motion space approach be of help when compound assembly motions are necessary? We are currently examining a randomized variant of the motion space approach <ref> [4] </ref>. We aim to solve the assembly partitioning problem for polygonal parts with multi-translation paths, with about five-to-ten segments in a path. <p> The algorithm for solving the problem as described in Section 4 would require the construction of an arrangement in ten (or more) dimensional space|far beyond what current geometric software technology offers. In <ref> [4] </ref> instead of constructing the full arrangement, we sample vertices, namely 0-dimensional cells, of this arrangement. This is in contrast with prevailing randomized motion planners that sample with very high probability points inside d-dimensional cells in d-dimensional ar rangements.
Reference: [5] <author> H. Chang and T. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Rob. and Autom., </booktitle> <pages> pages 1012-1019, </pages> <year> 1995. </year>
Reference-contexts: Answering maintainability questions for such products can be a very difficult task|it often calls for planning a single operation which may be extremely complicated. Motion planning techniques have already been applied to solve problems of this nature <ref> [5] </ref>. However, recent experiments have shown that current motion planning technology can offer only partial solution to these problems. Even the most advanced practical motion planners take enormous time to solve maintainability problems. Furthermore, their running time varies greatly and unpredictably.
Reference: [6] <author> M. de Berg. </author> <title> Ray Shooting, Depth Orders and Hidden Surface Removal, </title> <booktitle> volume 703 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1993. </year>
Reference-contexts: Such a sequence, when one exists, defines a depth order of the parts in the assembly along the direction d. Depth orders were extensively studied, mainly in relation to computer graphics <ref> [6] </ref>. A depth order for an assembly of polyhedral parts with a total of N vertices can be computed in O (N 4=3+" ), for any " &gt; 0 [8].
Reference: [7] <author> M. de Berg, L. J. Guibas, and D. Halperin. </author> <title> Vertical decompositions for triangles in 3-space. </title> <journal> Discrete Comput. Geom., </journal> <volume> 15 </volume> <pages> 35-61, </pages> <year> 1996. </year>
Reference-contexts: In [19] we give a detailed account of how to compute the family S; we omit the details here for lack of space. The next step is to construct the arrangement induced by S. For a three-dimensional motion space, this can be done by a fairly simple algorithm <ref> [7] </ref> whose output enables us to traverse the arrangement cell by adjacent cell.
Reference: [8] <author> M. de Berg, M. Overmars, and O. Schwarzkopf. </author> <title> Computing and verifying depth orders. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23 </volume> <pages> 437-446, </pages> <year> 1994. </year>
Reference-contexts: Depth orders were extensively studied, mainly in relation to computer graphics [6]. A depth order for an assembly of polyhedral parts with a total of N vertices can be computed in O (N 4=3+" ), for any " &gt; 0 <ref> [8] </ref>. If we are allowed to move the parts along k different directions (still one part at a time and each move is a single translation to infinity) then a more elaborate algorithm needs to be used [1] which runs in O (kN 4=3+" ) time.
Reference: [9] <author> A. Delchambre and P. Gaspart. KBAP: </author> <title> An industrial prototype of knowledge-based assembly planner. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 2404-2409, </pages> <year> 1992. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [44]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [27]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 9, 21, 23, 29, 48] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Some reduced time complexity by only allowing partitioning operations in which one subassembly is a single part [21, 29, 47]. Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step <ref> [9, 21] </ref>. Some were quite general and hence limited to assemblies with small part count [3]. The ndbg was introduced to avoid this combinatorial trap [42, 45].
Reference: [10] <author> B. R. Donald. </author> <title> The complexity of planar compliant motion planning under uncertainty. </title> <journal> Algorithmica, </journal> <volume> 5 </volume> <pages> 353-382, </pages> <year> 1990. </year>
Reference-contexts: The representation of a motion planning problem in a motion space is not completely new. In motion planning with uncertainty in control and sensing, the notion of a nondirectional preimage is also based on a decomposition of a motion space <ref> [10, 32] </ref>. The part-orienting technique proposed in [11] makes use of a similar decomposition. 3 The Motion Space Approach A widespread representation tool used in robot motion planning [30, 33] is configuration space.
Reference: [11] <author> K. Y. Goldberg. </author> <title> Orienting polygonal parts without sen-sors. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 201-225, </pages> <year> 1993. </year>
Reference-contexts: The representation of a motion planning problem in a motion space is not completely new. In motion planning with uncertainty in control and sensing, the notion of a nondirectional preimage is also based on a decomposition of a motion space [10, 32]. The part-orienting technique proposed in <ref> [11] </ref> makes use of a similar decomposition. 3 The Motion Space Approach A widespread representation tool used in robot motion planning [30, 33] is configuration space.
Reference: [12] <author> M. Goldwasser. </author> <title> An implementation for maintaining arrangements of polygons. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages C32-C33, </pages> <year> 1995. </year>
Reference-contexts: One of the distinguishing features of STAAT is an efficient implementation of the decomposition of S 2 induced by infinitesimal translations in 3-D <ref> [12] </ref>. The observation regarding maximally covered cells (see Section 4.3.2) has been exploited in an implementation of an algorithm for polyhedral assembly partitioning under infinitesimal rigid motions (translation and rotation) [17]. This implementation uses efficient linear programming to access the maximally covered cells.
Reference: [13] <author> M. Goldwasser, J.-C. Latombe, and R. Motwani. </author> <title> Complexity measures for assembly sequences. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 1581-1587, </pages> <year> 1996. </year>
Reference-contexts: For example, one may wish to minimize the number of directions of extended motion (one-step translation) used in an assembly sequence. Recently it has been shown that several variants of cost measure optimization in assembly planning are hard, even in their approximate versions <ref> [13, 14] </ref>. We cite here one hardness result from [14], for a problem that at first glance seems very simple. We are give n pairwise interior-disjoint unit disks in the plane. <p> The goal is to minimize the number of the disks removed before the key disk can be removed. It is shown that obtaining a 2 log 1fl n -approximation to this problem is hard for any fl &gt; 0. We refer the reader to <ref> [13, 14] </ref> for full technical details on this and other hardness results in this area. In general the problem of efficient computation of cost measures is open.
Reference: [14] <author> M. Goldwasser and R. Motwani. </author> <title> Complexity measures for assembly sequences. </title> <journal> International Journal of Computational Geometry and Applications. </journal> <note> To appear. </note>
Reference-contexts: For example, one may wish to minimize the number of directions of extended motion (one-step translation) used in an assembly sequence. Recently it has been shown that several variants of cost measure optimization in assembly planning are hard, even in their approximate versions <ref> [13, 14] </ref>. We cite here one hardness result from [14], for a problem that at first glance seems very simple. We are give n pairwise interior-disjoint unit disks in the plane. <p> Recently it has been shown that several variants of cost measure optimization in assembly planning are hard, even in their approximate versions [13, 14]. We cite here one hardness result from <ref> [14] </ref>, for a problem that at first glance seems very simple. We are give n pairwise interior-disjoint unit disks in the plane. One disk is marked as the key disk that we need to access, and we are allowed to remove disks in one-step translational motions. <p> The goal is to minimize the number of the disks removed before the key disk can be removed. It is shown that obtaining a 2 log 1fl n -approximation to this problem is hard for any fl &gt; 0. We refer the reader to <ref> [13, 14] </ref> for full technical details on this and other hardness results in this area. In general the problem of efficient computation of cost measures is open.
Reference: [15] <author> R. Grupen, T. Henderson, and I. McCammon. </author> <title> A survey of general-purpose manipulation. </title> <journal> Intl. J. of Robotics Research, </journal> <volume> 8(1) </volume> <pages> 38-62, </pages> <year> 1989. </year>
Reference-contexts: Finally, a worst-case exponential-time algorithm searches the space of possible sequences and fixtures. Improvements in these areas will require careful representation and integration of the various geometric constraints. Grasping Grasping and gripper design for single parts has been well studied (see e.g. <ref> [15, 34, 36, 41] </ref>). When applied in an assembly context, two important open problems arise: grasping sets of parts, and grasping sequences of parts. The former problem is closely related to fixture design for a static assembly.
Reference: [16] <author> L. Guibas and F. F. Yao. </author> <title> On translating a set of rectangles. </title> <booktitle> Advances in Computing Research, </booktitle> <volume> 1 </volume> <pages> 235-260, </pages> <year> 1983. </year>
Reference-contexts: The maximum, over all the operations in the sequence, of the number of hands required by an operation is called the number of hands of the sequence. A two-handed assembly sequence is one that requires two hands only. It has been shown in <ref> [16] </ref> that every assembly of convex polygons in the plane admits a two-handed assembly sequence of translations; but, in the worst-case, s hands are necessary and sufficient for assemblies of s star-shaped polygons/polyhedra [35].
Reference: [17] <author> L. J. Guibas, D. Halperin, H. Hirukawa, J.-C. Latombe, and R. H. Wilson. </author> <title> A simple and efficient procedure for polyhedral assembly partitioning under infinitesimal motions. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 2553-2560, </pages> <year> 1995. </year>
Reference-contexts: The dbg is fixed over each such region. From this point on applying the general scheme is fairly straightforward (see [46] for details). In <ref> [17] </ref> we show that for the purpose of infinitesimal partitioning it is not necessary to build the entire ndbg, and this observation yields big savings in computation time; see also Section 4.3.2 below. 4.2 The Case of Multi-Step Motions We present two ways to cope with multi-step motions. <p> Informally, a cell is maximally covered if it is covered by (or contained in) more Q-regions than any of its immediate neighbors. Being maximally covered implies that the set of dbg arcs of the cell is locally minimal. In <ref> [17] </ref> we show that it suffices to test the dbgs of maximally covered cells for strong connectivity in order to solve the partitioning problem. Note that if some Q-regions touch one another without overlapping, the maximally covered cell may not be full-dimensional. <p> We have shown the following result in <ref> [17] </ref>: Given an assembly A of n polyhedral parts, the ndbg (A) of the assembly for infinitesimal motions, where any direction of motion is defined by d parameters, has at most O (K d ) maximally covered cells, where K is the number of ordered pairs of parts in contact in <p> The observation regarding maximally covered cells (see Section 4.3.2) has been exploited in an implementation of an algorithm for polyhedral assembly partitioning under infinitesimal rigid motions (translation and rotation) <ref> [17] </ref>. This implementation uses efficient linear programming to access the maximally covered cells. The program has been successfully run on elaborate examples, and experimental results are reported in [17]. <p> Section 4.3.2) has been exploited in an implementation of an algorithm for polyhedral assembly partitioning under infinitesimal rigid motions (translation and rotation) <ref> [17] </ref>. This implementation uses efficient linear programming to access the maximally covered cells. The program has been successfully run on elaborate examples, and experimental results are reported in [17]. In Figure 4 we display a model aircraft engine with twelve parts inducing 1; 112 point-plane contacts that has been successfully handled by this program. ordered pairs of parts in contact and N = 1; 112 point plane contacts [17]: the program finds infinitesimal partitionings under translation and rotation. <p> run on elaborate examples, and experimental results are reported in <ref> [17] </ref>. In Figure 4 we display a model aircraft engine with twelve parts inducing 1; 112 point-plane contacts that has been successfully handled by this program. ordered pairs of parts in contact and N = 1; 112 point plane contacts [17]: the program finds infinitesimal partitionings under translation and rotation. Previous solutions required time O (N 5 K 2 ), while in the novel approach the required time is O (K 4 N + K 6 log N + N 2+" ), for any " &gt; 0.
Reference: [18] <editor> D. Halperin. Arrangements. In J. E. Goodman and J. O'Rourke, editors, </editor> <booktitle> Handbook of Discrete and Computational Geometry, chapter 21, </booktitle> <pages> pages 389-412. </pages> <publisher> CRC Press LLC, </publisher> <year> 1997. </year>
Reference-contexts: The sets @P ij for all i; j 2 [1; n]; i 6= j decompose the motion space into an arrangement of cells <ref> [18] </ref> such that the dbg of A remains fixed over each cell. The arcs of the dbg on any cell c in this arrangement correspond exactly to the M-regions that contain c.
Reference: [19] <author> D. Halperin and R. H. Wilson. </author> <title> Assembly partitioning along simple paths: the case of multiple translations. </title> <booktitle> Advanced Robotics, </booktitle> <volume> 11 </volume> <pages> 127-145, </pages> <year> 1997. </year>
Reference-contexts: The resulting ndbg is a refinement of the ndbg that would have been computed if we had only computed the boundaries of the M-regions. In <ref> [19] </ref> we give a detailed account of how to compute the family S; we omit the details here for lack of space. The next step is to construct the arrangement induced by S. <p> The next step is to construct the arrangement induced by S. For a three-dimensional motion space, this can be done by a fairly simple algorithm [7] whose output enables us to traverse the arrangement cell by adjacent cell. In <ref> [19] </ref> we also extend this approach to handle paths consisting of three or more translations in the plane. 4.3 Improved Efficiency This section describes two improvements to the efficiency of the motion space approach that apply in certain cases.
Reference: [20] <author> H. Hirukawa, T. Matsui, and K. Takase. </author> <title> Automatic determination of possible velocity and applicable force of frictionless objects in contact from a geometric model. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 10(3) </volume> <pages> 309-322, </pages> <year> 1994. </year>
Reference-contexts: The set of motions dX allowed by this contact is the intersection of all the closed half-spaces n F j J V k dX 0 computed for the vertices V k of the convex hull of the intersection of F i and F j <ref> [20, 46] </ref>. For each vertex V k of the convex hull of the intersection of two parts, the equation n F J V k dX = 0 defines a 5-D hyperplane in the 6-D space of infinitesimal motions, which partitions S 5 into two open half-spheres and a great circle.
Reference: [21] <author> R. L. Hoffman. </author> <title> Automated assembly in a CSG domain. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 210-215, </pages> <year> 1989. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [44]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [27]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 9, 21, 23, 29, 48] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Several effective planners were nevertheless built along this principle. Some reduced time complexity by only allowing partitioning operations in which one subassembly is a single part <ref> [21, 29, 47] </ref>. Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [9, 21]. Some were quite general and hence limited to assemblies with small part count [3]. <p> Some reduced time complexity by only allowing partitioning operations in which one subassembly is a single part [21, 29, 47]. Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step <ref> [9, 21] </ref>. Some were quite general and hence limited to assemblies with small part count [3]. The ndbg was introduced to avoid this combinatorial trap [42, 45].
Reference: [22] <author> L. S. Homem de Mello. </author> <title> Task Sequence Planning for Robotic Assembly. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon Univ., </institution> <year> 1989. </year>
Reference-contexts: Most often p is a simple path (e.g., a translation) that is inferred from contacts between parts <ref> [22, 48] </ref>. But even with the cutset approach the number of candidate partitions is exponential in the number of parts in S, while the number of feasible partitions is usually much smaller. Several effective planners were nevertheless built along this principle.
Reference: [23] <author> L. S. Homem de Mello and A. C. Sanderson. </author> <title> A correct and complete algorithm for the generation of mechanical assembly sequences. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 7(2) </volume> <pages> 228-240, </pages> <year> 1991. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [44]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [27]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 9, 21, 23, 29, 48] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Moreover, when all parts are rigid, there is a bijection between assembly and disassembly sequences, as far as geometric constraints are concerned. (This bijection would also be broken when physics, e.g., gravity, and motion control uncertainty are taken into account.) In many planners (e.g. <ref> [3, 23] </ref>), the procedure partition is based on generate-and-test: given S, enumerate all candidate partitions fS 1 ; S 2 g of S, until a path p is found that separates S 2 from S 1 . <p> This was supplemented by dbgs for additional directions of motion identified from feature-based part contacts, such as cylinder-cylinder and threaded contacts. The resulting one-step translations were then checked for collisions. GRASP explicitly compared ndbg-based partitioning against the cutset approach <ref> [23] </ref> for assemblies of up to 42 parts. The ndbg was somewhat faster in most tests; however, one assembly constituted a worst case for the cut-set approach, which not surprisingly took a very long time to partition that assembly.
Reference: [24] <author> R. E. Jones and R. H. Wilson. </author> <title> A survey of constraints in assembly planning. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 1525-32, </pages> <year> 1996. </year>
Reference-contexts: Extending the algorithms effectively to handle such angular tolerances, as well as developing strategies for dif-ferent tolerancing languages, remain open problems. 5.3 Additional Constraints The motion space approach presented here addresses the motions of the parts of an assembly, but many other constraints apply to the assembly process <ref> [24] </ref>. For example, fixtures are required to support unstable subassemblies; human hands or robot grippers must manipulate the parts; and various tools must be applied to fasten, move, or test parts [43]. These are active research areas by themselves, but the application to assembly raises important additional issues.
Reference: [25] <author> R. E. Jones and R. H. Wilson. </author> <title> An interactive assembly planning system. </title> <booktitle> In Video Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <year> 1997. </year>
Reference-contexts: This planner is written in C++. It was tested on several polygonal assemblies of small size. Experiments with this planner show that tolerances can have profound impact on the set of feasible assembly sequences. The Archimedes computer-aided assembly planning system <ref> [25, 26] </ref> was designed to bring ndbg-based assembly sequence generation to practical use. Its ndbg implementation is very similar to GRASP's (above), but it includes ndbg extensions to handle additional constraints (such as grasping|see Section 5.3), including a library of over 100 common hand and robotic tools.
Reference: [26] <author> R. E. Jones, R. H. Wilson, and T. L. Calton. </author> <title> Constraint-based interactive assembly planning. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 913-920, </pages> <year> 1997. </year>
Reference-contexts: This planner is written in C++. It was tested on several polygonal assemblies of small size. Experiments with this planner show that tolerances can have profound impact on the set of feasible assembly sequences. The Archimedes computer-aided assembly planning system <ref> [25, 26] </ref> was designed to bring ndbg-based assembly sequence generation to practical use. Its ndbg implementation is very similar to GRASP's (above), but it includes ndbg extensions to handle additional constraints (such as grasping|see Section 5.3), including a library of over 100 common hand and robotic tools. <p> These are active research areas by themselves, but the application to assembly raises important additional issues. A human-interactive approach to various assembly constraints that integrates well with the motion space approach is presented in <ref> [26] </ref>, but we will focus here on computational solutions. We describe some characteristic open problems in fixturing and grasping for assembly. Fixturing An assembly fixture must locate and support all partial assemblies in a chosen assembly sequence, but cannot interfere with any of the assembly operations.
Reference: [27] <author> L. Kavraki and M. N. Kolountzakis. </author> <title> Partitioning a planar assembly into two connected parts is NP-complete. </title> <journal> Information Processing Letters, </journal> <volume> 55(3) </volume> <pages> 159-165, </pages> <year> 1995. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [44]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations <ref> [27] </ref>. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning [2, 3, 9, 21, 23, 29, 48]. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state.
Reference: [28] <author> S. Khanna, R. Motwani, and R. H. Wilson. </author> <title> On certificates and lookahead in dynamic graph problems. </title> <booktitle> In Proc. 7th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 222-231, </pages> <year> 1996. </year>
Reference-contexts: Khanna et al <ref> [28] </ref> derive a more efficient algorithm to test all the dbgs for strong connectivity that is applicable in cases where the number of arcs in a blocking graph can be (n 2 ), such as in one-step translation ndbgs. <p> Preprocess the common subgraph G 0 n E for the phase by computing its transitive closure and storing the result in a subgraph H restricted to active nodes. Khanna et al <ref> [28] </ref> prove that G i is strongly connected if and only if both G 0 [ E and H i = H [ (G i " E) are strongly connected. The graph H i has at most 2K nodes, so testing its strong connectivity requires O (K 2 ) time. <p> This expression is minimized when K = T (n) 1=3 . However, observe that testing the sequence of graphs H i for strong connectivity is equivalent to our original problem. This leads to a recursive approach with further improved running time. Using fast matrix multiplication to compute transitive closure, <ref> [28] </ref> achieve an amortized cost of O (T (n)=n) or O (n 1:376 ) per graph tested. 4.3.2 Maximally Covered Cells Let (A) be an ndbg for an assembly A.
Reference: [29] <author> H. Ko and K. Lee. </author> <title> Automatic assembling procedure generation from mating conditions. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 19(1) </volume> <pages> 3-10, </pages> <year> 1987. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [44]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [27]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 9, 21, 23, 29, 48] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Several effective planners were nevertheless built along this principle. Some reduced time complexity by only allowing partitioning operations in which one subassembly is a single part <ref> [21, 29, 47] </ref>. Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [9, 21]. Some were quite general and hence limited to assemblies with small part count [3].
Reference: [30] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer, </publisher> <year> 1991. </year>
Reference-contexts: The part-orienting technique proposed in [11] makes use of a similar decomposition. 3 The Motion Space Approach A widespread representation tool used in robot motion planning <ref> [30, 33] </ref> is configuration space. The configuration space of a given robot is the space of parametric representations of the robot configurations: every point in the configuration space defines a unique placement of the robot in the physical space. <p> are identical; in some cases, however, @P ij is a superset of P ij 's bound 2 In the earlier papers on the ndbg, we only considered paths that were directions of motion, hence the term "directional blocking graph." We retain this terminology for consistency with the existing work. ary <ref> [30] </ref>. The sets @P ij for all i; j 2 [1; n]; i 6= j decompose the motion space into an arrangement of cells [18] such that the dbg of A remains fixed over each cell. <p> If we allowed P i to be tightly inserted into P j , we would have to be more careful, since the set of positions where P i touches P j would then be a superset of the boundary of P j P i <ref> [30] </ref>. In the general case where P i and P j are non-convex polygons with q i and q j edges, respectively, the computation of P ij can easily be done in total time O (q i q j ).
Reference: [31] <author> J.-C. Latombe, R. H. Wilson, and F. Cazals. </author> <title> Assembly sequencing with toleranced parts. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 29(2) </volume> <pages> 159-174, </pages> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: The special ndbg mentioned below in Section 5.2 to deal with toleranced parts was implemented in an assembly planner described in <ref> [31] </ref>. This planner is written in C++. It was tested on several polygonal assemblies of small size. Experiments with this planner show that tolerances can have profound impact on the set of feasible assembly sequences. <p> Any partitioning of A that can be computed from this ndbg is guaranteed to be feasible for any geometry of the parts in A. The novel issue here is the computation of P ij . In <ref> [31] </ref> we describe an algorithm that performs this computation in time O (r ij (q i q j + log r ij )), where q i and q j are the number of edges of P i and P j , respectively, and r ij is the length of the path <p> The algorithm generalizes to polyhedral assemblies; in that case, the ndbg is computed in time O ((nr) 2 q 4 log (nq)). The algorithms in <ref> [31] </ref> assume a relatively simple toler-ancing language. In particular, it allows no tolerancing on the orientation of an edge/face of a polygonal/polyhedral part.
Reference: [32] <author> A. Lazanas and J. C. Latombe. </author> <title> Landmark-based robot navigation. </title> <journal> Algorithmica, </journal> <volume> 13 </volume> <pages> 472-501, </pages> <year> 1995. </year>
Reference-contexts: The representation of a motion planning problem in a motion space is not completely new. In motion planning with uncertainty in control and sensing, the notion of a nondirectional preimage is also based on a decomposition of a motion space <ref> [10, 32] </ref>. The part-orienting technique proposed in [11] makes use of a similar decomposition. 3 The Motion Space Approach A widespread representation tool used in robot motion planning [30, 33] is configuration space.
Reference: [33] <author> T. Lozano-Perez. </author> <title> Spatial planning: A configuration space approach. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(2):108-120, </volume> <year> 1983. </year>
Reference-contexts: The part-orienting technique proposed in [11] makes use of a similar decomposition. 3 The Motion Space Approach A widespread representation tool used in robot motion planning <ref> [30, 33] </ref> is configuration space. The configuration space of a given robot is the space of parametric representations of the robot configurations: every point in the configuration space defines a unique placement of the robot in the physical space.
Reference: [34] <author> B. Mishra, J. T. Schwartz, and M. Sharir. </author> <title> On the existence and synthesis of multifinger positive grips. </title> <journal> Algo-rithmica, </journal> <volume> 2 </volume> <pages> 541-558, </pages> <year> 1987. </year>
Reference-contexts: Finally, a worst-case exponential-time algorithm searches the space of possible sequences and fixtures. Improvements in these areas will require careful representation and integration of the various geometric constraints. Grasping Grasping and gripper design for single parts has been well studied (see e.g. <ref> [15, 34, 36, 41] </ref>). When applied in an assembly context, two important open problems arise: grasping sets of parts, and grasping sequences of parts. The former problem is closely related to fixture design for a static assembly.
Reference: [35] <author> B. K. Natarajan. </author> <title> On planning assemblies. </title> <booktitle> In Proc. 4th ACM Symp. on Computational Geometry, </booktitle> <pages> pages 299-308, </pages> <year> 1988. </year>
Reference-contexts: A two-handed assembly sequence is one that requires two hands only. It has been shown in [16] that every assembly of convex polygons in the plane admits a two-handed assembly sequence of translations; but, in the worst-case, s hands are necessary and sufficient for assemblies of s star-shaped polygons/polyhedra <ref> [35] </ref>. <p> When arbitrary sequences are allowed, assembly sequencing is PSPACE-hard, both for assemblies of polyhedra each with a constant number of vertices <ref> [35] </ref> and for assemblies of polygons [47]. When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [44]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [27].
Reference: [36] <author> J. Ponce, S. Sullivan, A. Sudsand, J.-D. Boissonnat, and J.-P. Merlet. </author> <title> On computing four-finger equilibrium and force-closure grasps of polyhedral objects. </title> <journal> Intl. J. of Robotics Research, </journal> <note> 1997. To appear. </note>
Reference-contexts: Finally, a worst-case exponential-time algorithm searches the space of possible sequences and fixtures. Improvements in these areas will require careful representation and integration of the various geometric constraints. Grasping Grasping and gripper design for single parts has been well studied (see e.g. <ref> [15, 34, 36, 41] </ref>). When applied in an assembly context, two important open problems arise: grasping sets of parts, and grasping sequences of parts. The former problem is closely related to fixture design for a static assembly.
Reference: [37] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: They calculate the M-region for a pair of parts by triangulating the faces of both polyhedra, computing the M-region for every pair of triangles, and taking their union. They use a standard line sweep <ref> [37] </ref> to construct the 2-D arrangement of regions and corresponding blocking graphs. The implementation was tested on hand-generated and random examples. Romney et al [39] reimplement and refine the methods of [42] and apply them to determine various measures of assembly complexity.
Reference: [38] <author> B. Romney. </author> <title> On the Concurrent Design of Assembly Sequences and Fixtures. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Stanford Univ., </institution> <year> 1997. </year>
Reference-contexts: The most complex is the guidance section of the Hughes AIM-9X air-to-air missile shown in Figure 5, consisting of 472 parts described by over 55Mb of CAD data. A method which concurrently plans an assembly sequence and generates a fixture that stabilizes all intermediate subassemblies (see <ref> [38] </ref> and Section 5.3 below) is implemented in a system called Atlas 3 written in C. It has been successfully tested on many planar assemblies having 5 to 11 parts [38]. missile. (Figure used by permission of Hughes Aircraft and the U.S. <p> A method which concurrently plans an assembly sequence and generates a fixture that stabilizes all intermediate subassemblies (see <ref> [38] </ref> and Section 5.3 below) is implemented in a system called Atlas 3 written in C. It has been successfully tested on many planar assemblies having 5 to 11 parts [38]. missile. (Figure used by permission of Hughes Aircraft and the U.S. <p> The sequence and fixture can be very dependent on each other. Hence solving the assembly fixturing problem efficiently requires considering fixture design and assembly sequencing together. An initial step in this direction is described in <ref> [38] </ref>. The method models a fixture as a collection of frictionless points called fixels (for "fixture elements"). An initial fixture is created by distributing fixels at random on the boundary of the assembly. As assembly operations are generated, fix-els that interfere with the part motions are removed. <p> As assembly operations are generated, fix-els that interfere with the part motions are removed. The remaining fixels must be sufficient to guarantee stability of all partial assemblies that appear in the sequence. Linear programming techniques test for assembly stability. The approach described in <ref> [38] </ref> is limited in several ways. A single fixture must be used for the entire assembly sequence, and the set of fixels specified may not be physically realizable. It only allows adding a single part at a time to the assembly.
Reference: [39] <author> B. Romney, C. Godard, M. Goldwasser, and G. Ramku-mar. </author> <title> An efficient system for geometric assembly sequence generation and evaluation. </title> <booktitle> In Proc. ASME Intl. Computers in Engineering Conf., </booktitle> <pages> pages 699-712, </pages> <year> 1995. </year>
Reference-contexts: They use a standard line sweep [37] to construct the 2-D arrangement of regions and corresponding blocking graphs. The implementation was tested on hand-generated and random examples. Romney et al <ref> [39] </ref> reimplement and refine the methods of [42] and apply them to determine various measures of assembly complexity. They pay particular attention to issues affecting average-case performance.
Reference: [40] <author> A. Schweikard and R. H. Wilson. </author> <title> Assembly sequences for polyhedra. </title> <journal> Algorithmica, </journal> <volume> 13(6) </volume> <pages> 539-552, </pages> <year> 1995. </year>
Reference-contexts: The ndbg was somewhat faster in most tests; however, one assembly constituted a worst case for the cut-set approach, which not surprisingly took a very long time to partition that assembly. Wilson and Schweikard <ref> [40] </ref> describe experiments with an extended 3-D translational ndbg for assemblies of polyhedral parts. They calculate the M-region for a pair of parts by triangulating the faces of both polyhedra, computing the M-region for every pair of triangles, and taking their union.
Reference: [41] <author> C. Wentink, A. F. van der Stappen, and M. Overmars. </author> <title> Algorithms for fixture design. </title> <editor> In J.-P. Laumond and M. Overmars, editors, </editor> <title> Algorithms for Robotic Motion and Manipulation: </title> <booktitle> 1996 WAFR, </booktitle> <pages> pages 321-346. </pages> <editor> A. K. Peters, </editor> <year> 1997. </year>
Reference-contexts: Finally, a worst-case exponential-time algorithm searches the space of possible sequences and fixtures. Improvements in these areas will require careful representation and integration of the various geometric constraints. Grasping Grasping and gripper design for single parts has been well studied (see e.g. <ref> [15, 34, 36, 41] </ref>). When applied in an assembly context, two important open problems arise: grasping sets of parts, and grasping sequences of parts. The former problem is closely related to fixture design for a static assembly.
Reference: [42] <author> R. H. Wilson. </author> <title> On Geometric Assembly Planning. </title> <type> PhD thesis, </type> <institution> Stanford Univ., </institution> <month> March </month> <year> 1992. </year> <note> Stanford Technical Report STAN-CS-92-1416. </note>
Reference-contexts: Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [9, 21]. Some were quite general and hence limited to assemblies with small part count [3]. The ndbg was introduced to avoid this combinatorial trap <ref> [42, 45] </ref>. Arkin, Connelly, and Mitchell [2] use the concept of a monotone path among obstacles to derive a polynomial-time algorithm for partitioning an assembly of polygons in the plane with a one-step translation. <p> If G (p) is not strongly connected, then one strong component must have no outgoing arcs, and is therefore removable along p. A straightforward computation on the strong components of G (p) yields all possible partitions of A for path p if desired <ref> [42] </ref>. Notice also that the ndbg of any subassembly S of A is obtained by restricting every dbg to the parts of S; it does not have to be recomputed from scratch, it is computed once, before running disassemble. <p> Thus, once a dbg has been computed, all other dbgs can be computed in total time O (n 2 ) by scanning the sequence of cells in S 1 and, for each cell, modifying the dbg constructed for the previous cell <ref> [42] </ref>. The complete ndbg takes time O (n 2 (log n + q 2 )) to compute. Computing the strong components of a dbg of A takes time O (n 2 ). <p> Then the motion space is the unit sphere S 2 in &lt; 3 , and each region P ij is obtained by "projecting" P j P i onto S 2 , for pairs of polyhedral parts P i and P j . For further details see <ref> [42] </ref>. 4.1.2 Infinitesimal Motions in 3-D The direction of a one-step motion is given by a unit vector in 6-D. Hence, the set of all possible directions of motion make up the unit 5-D sphere S 5 . <p> Some of these were part of experimental assembly planning systems, while others were stand-alone implementations. In this section we give brief descriptions and pointers to those implementations and corresponding experiments. The ndbg was initially implemented in the assembly planner GRASP, described in <ref> [42, 45] </ref>. GRASP implemented an infinitesimal translation ndbg in 3-D for polyhedral parts. Its implementation was simple but inefficient: it created and analyzed a dbg for the direction of translation given by the intersection of every pair of contact planes in the target assembly. <p> They use a standard line sweep [37] to construct the 2-D arrangement of regions and corresponding blocking graphs. The implementation was tested on hand-generated and random examples. Romney et al [39] reimplement and refine the methods of <ref> [42] </ref> and apply them to determine various measures of assembly complexity. They pay particular attention to issues affecting average-case performance. Their program, STAAT, explicitly constructs an ndbg for infinitesimal translations on the unit sphere, resulting in a much smaller set of translation directions to analyze than GRASP analyzes.
Reference: [43] <author> R. H. Wilson. </author> <title> Geometric reasoning about assembly tools. </title> <type> Technical Report SAND95-2423, </type> <institution> Sandia National Labs, </institution> <year> 1996. </year> <note> To appear in Artificial Intelligence. </note>
Reference-contexts: For example, fixtures are required to support unstable subassemblies; human hands or robot grippers must manipulate the parts; and various tools must be applied to fasten, move, or test parts <ref> [43] </ref>. These are active research areas by themselves, but the application to assembly raises important additional issues. A human-interactive approach to various assembly constraints that integrates well with the motion space approach is presented in [26], but we will focus here on computational solutions.
Reference: [44] <author> R. H. Wilson, L. Kavraki, T. Lozano-Perez, and J.-C. Latombe. </author> <title> Two-handed assembly sequencing. </title> <journal> Intl. J. of Robotics Research, </journal> <volume> 14(4) </volume> <pages> 335-350, </pages> <year> 1995. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete <ref> [44] </ref>. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [27]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning [2, 3, 9, 21, 23, 29, 48].
Reference: [45] <author> R. H. Wilson and J.-C. Latombe. </author> <title> Geometric reasoning about mechanical assembly. </title> <journal> Artificial Intelligence, </journal> <volume> 71(2) </volume> <pages> 371-396, </pages> <year> 1994. </year>
Reference-contexts: Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [9, 21]. Some were quite general and hence limited to assemblies with small part count [3]. The ndbg was introduced to avoid this combinatorial trap <ref> [42, 45] </ref>. Arkin, Connelly, and Mitchell [2] use the concept of a monotone path among obstacles to derive a polynomial-time algorithm for partitioning an assembly of polygons in the plane with a one-step translation. <p> Some of these were part of experimental assembly planning systems, while others were stand-alone implementations. In this section we give brief descriptions and pointers to those implementations and corresponding experiments. The ndbg was initially implemented in the assembly planner GRASP, described in <ref> [42, 45] </ref>. GRASP implemented an infinitesimal translation ndbg in 3-D for polyhedral parts. Its implementation was simple but inefficient: it created and analyzed a dbg for the direction of translation given by the intersection of every pair of contact planes in the target assembly.
Reference: [46] <author> R. H. Wilson and T. Matsui. </author> <title> Partitioning an assembly for infinitesimal motions in translation and rotation. </title> <booktitle> In Proc. Intl. Conf. on Intelligent Robots and Systems, </booktitle> <pages> pages 1311-1318, </pages> <year> 1992. </year>
Reference-contexts: The set of motions dX allowed by this contact is the intersection of all the closed half-spaces n F j J V k dX 0 computed for the vertices V k of the convex hull of the intersection of F i and F j <ref> [20, 46] </ref>. For each vertex V k of the convex hull of the intersection of two parts, the equation n F J V k dX = 0 defines a 5-D hyperplane in the 6-D space of infinitesimal motions, which partitions S 5 into two open half-spheres and a great circle. <p> The dbg is fixed over each such region. From this point on applying the general scheme is fairly straightforward (see <ref> [46] </ref> for details). <p> For infinitesimal motions in 3-D, the dimension of the motion space is 5. The maximally covered cells approach leads to significant savings over the best previously known algorithm <ref> [46] </ref> to solve this partitioning problem. In addition, the algorithm is based on linear programming techniques and hence simpler to implement robustly than the arrangement computations required by most ndbgs.
Reference: [47] <author> J. D. Wolter. </author> <title> On the Automatic Generation of Plans for Mechanical Assembly. </title> <type> PhD thesis, </type> <institution> Univ. of Michigan, </institution> <year> 1988. </year>
Reference-contexts: With the above definitions, an assembly sequence only generates subassemblies of the final assembly. Such a sequence is said to be monotone <ref> [47] </ref>. A more general assembly sequence is one in which some operation brings a body to an intermediate placement (relative to other bodies), before another operation transfers it to its final placement. Such a sequence is called non-monotone. <p> When arbitrary sequences are allowed, assembly sequencing is PSPACE-hard, both for assemblies of polyhedra each with a constant number of vertices [35] and for assemblies of polygons <ref> [47] </ref>. When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [44]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [27]. <p> Several effective planners were nevertheless built along this principle. Some reduced time complexity by only allowing partitioning operations in which one subassembly is a single part <ref> [21, 29, 47] </ref>. Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [9, 21]. Some were quite general and hence limited to assemblies with small part count [3].
Reference: [48] <author> T. C. Woo. </author> <title> Automatic disassembly and total ordering in three dimensions. </title> <booktitle> In Conf. on Intelligent and Integrated Manufacturing Analysis and Synthesis, </booktitle> <pages> pages 291-303, </pages> <year> 1987. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [44]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [27]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 9, 21, 23, 29, 48] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Most often p is a simple path (e.g., a translation) that is inferred from contacts between parts <ref> [22, 48] </ref>. But even with the cutset approach the number of candidate partitions is exponential in the number of parts in S, while the number of feasible partitions is usually much smaller. Several effective planners were nevertheless built along this principle.
References-found: 48

