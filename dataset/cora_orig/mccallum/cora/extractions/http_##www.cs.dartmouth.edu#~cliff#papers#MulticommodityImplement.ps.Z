URL: http://www.cs.dartmouth.edu/~cliff/papers/MulticommodityImplement.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~cliff/papers/
Root-URL: http://www.cs.dartmouth.edu
Title: Implementation of a Combinatorial Multicommodity Flow Algorithm  
Author: TISHYA LEONG AND PETER SHOR AND CLIFFORD STEIN 
Date: December 11, 1992  
Note: DIMACS Series in Discrete Mathematics and Theoretical Computer Science Volume 00, 0000  1991 Mathematics Subject Classification. Primary 90B10; Secondary 68Q25, 68A10. Research of the first author was done at AT&T Bell Laboratories. Support for the third author provided by NSF PYI Award CCR-89-96272 with matching support from UPS and Sun and by an AT&T Bell Laboratories Graduate Fellowship. Most of this work was done while at AT&T Bell Laboratories. c fl0000 American Mathematical Society 0000-0000/00 $1.00 $.25 per page  
Abstract: The multicommodityflow problem involves simultaneouslyship-ping multiple commodities through a single network so that the total amount of flow on each edge is no more than the capacity of the edge. This problem can be expressed as a large linear program, and most known algorithms for it, both theoretical and practical, are linear programming algorithms designed to take advantage of the structure of multicommodity flow problems. The size of the linear programs, however, makes it prohibitively difficult to solve large multicommodity flow problems. In this paper, we describe and examine a multicommodity flow implementation based on the recent combinatorial approximation algorithm of Leighton et al. [13]. The theory predicts that the running time of the algorithm increases linearly with the number of commodities. Our experiments verify this behavior. The theory also predicts that the running time increases as the square of the desired precision. Our experiments show that the running time increases at most this fast, and often slower. We also compare our combinatorial implementation against two different linear programming-based codes. First we compare our code to that of of Kennington [10], which is a network simplex code known to perform well on multicommodity flow problems. For many problems, our combinatorial algorithm outperforms this simplex-based linear programming algorithm. More precisely, as the number of commodities increases, the running time of our algorithm grows much more slowly than that of Kennington's linear programming-based algorithm. Second, we compared our code to an interior point code of Karmarkar and Ramakrishnan. Here too, we achieved similar, but less dramatic results. Our results suggest that our algorithm may be able to solve larger multicommodity flow problems than have been solved in the past. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> I. Adler, N. Karmarkar, M. Resende, and G. Veiga. </author> <title> An implementation of Karmarkar's algorithm for linear programming. </title> <journal> Mathematical Programming, </journal> <volume> 44 </volume> <pages> 297-335, </pages> <year> 1989. </year>
Reference-contexts: These algorithms fall into three main classes: price-directive decomposition, resource-directive decomposition, and partitioning approaches. (See the surveys of Assad [2] and Kennington [8] and the thesis of Schneur [16] for more information on these approaches.) More recent approaches include interior-point methods <ref> [1] </ref> A COMBINATORIAL MULTICOMMODITY FLOW ALGORITHM 3 and a combinatorial scaling algorithm [16]. All of the aforementioned algorithms solve multicommodity flow problems using one of two different objective functions. Some find a minimum-cost multicommodity flow, while others find a flow which maximizes the total amount of flow in the network. <p> The algorithm is mcnf85, a special purpose simplex code for multicommodity flow problems written by Kennington [10], and we chose it for two reasons. First, we had access to the code on our machine. Second, and more importantly, previous tests by Adler, Karmarkar, Resende and Veiga <ref> [1] </ref> demonstrate its efficiency. Adler et al. compared three different codes for multicommodity flow: minos 5.0, an advanced implementation of the simplex method [15], mcnf85, and their own interior point method.
Reference: 2. <author> A. A. Assad. </author> <title> Multicommodity network flows a survey. </title> <journal> Networks, </journal> <volume> 8 </volume> <pages> 37-91, </pages> <year> 1978. </year>
Reference-contexts: Some algorithms which take advantage of the special structure of multicommodity flow problems have been proposed. These algorithms fall into three main classes: price-directive decomposition, resource-directive decomposition, and partitioning approaches. (See the surveys of Assad <ref> [2] </ref> and Kennington [8] and the thesis of Schneur [16] for more information on these approaches.) More recent approaches include interior-point methods [1] A COMBINATORIAL MULTICOMMODITY FLOW ALGORITHM 3 and a combinatorial scaling algorithm [16].
Reference: 3. <author> D. P. Bertsekas and P. Tseng. relaxt-III: </author> <title> A new and improved version of the relax code. </title> <type> Technical Report LIDS-P-1990, </type> <institution> MIT, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: Handling the Minimum-cost Flow. Once the algorithm has chosen a commodity group to reroute, it must find an appropriate minimum-cost flow. For this purpose, we use the relaxt-iii minimum-cost flow code of Bertsekas and Tseng <ref> [3] </ref>. One drawback of the routine we have chosen is that it requires integer capacities, costs, and demands, making preprocessing and postprocessing necessary each time it is called.
Reference: 4. <author> J. Cheriyan, </author> <month> October </month> <year> 1991. </year> <title> Private communication. </title>
Reference-contexts: In order to estimate a more realistic running time for this problem, we will compute an upper bound on the what the running time would have if we were using the RNET code of Grigoriadis. Joseph Cheriyan <ref> [4] </ref> has reported that on a representative sample of these minimum-cost flow problems, the running time of RNET on a SPARC2 (which is slower than our machine) never exceeds 0:66 seconds.
Reference: 5. <author> A. V. Goldberg, </author> <type> Personal communication. </type> <month> Jan., </month> <year> 1991. </year>
Reference-contexts: Goldberg <ref> [5] </ref> and Grigoriadis and Khachiyan 6 TISHYA LEONG AND PETER SHOR AND CLIFFORD STEIN [6] have shown how to reduce the number of computations used by the randomized version to O (k (log k + * 2 ) log n). <p> We reroute, in decreasing order, the k 0 =2 groups with the greatest difference between cost and minimum-cost followed by k 0 =2 randomly chosen commodity groups. To prevent domination by a limited number of groups, the random selection weights all commodity groups equally as proposed by Goldberg <ref> [5] </ref> and Grigoriadis and Khachiyan [6]. 3.3. Handling the Minimum-cost Flow. Once the algorithm has chosen a commodity group to reroute, it must find an appropriate minimum-cost flow. For this purpose, we use the relaxt-iii minimum-cost flow code of Bertsekas and Tseng [3].
Reference: 6. <author> M. D. Grigoriadis and L. G. Khachiyan. </author> <title> Fast approximation schemes for convex programs with many blocks and coupling constraints. </title> <type> Technical Report DCS-TR-273, </type> <institution> Department of Computer Science, Rutgers University, </institution> <address> New Brunswick, NJ, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: Goldberg [5] and Grigoriadis and Khachiyan 6 TISHYA LEONG AND PETER SHOR AND CLIFFORD STEIN <ref> [6] </ref> have shown how to reduce the number of computations used by the randomized version to O (k (log k + * 2 ) log n). The running time therefore depends polynomially on * 1 and linearly on the number of commodities. <p> To prevent domination by a limited number of groups, the random selection weights all commodity groups equally as proposed by Goldberg [5] and Grigoriadis and Khachiyan <ref> [6] </ref>. 3.3. Handling the Minimum-cost Flow. Once the algorithm has chosen a commodity group to reroute, it must find an appropriate minimum-cost flow. For this purpose, we use the relaxt-iii minimum-cost flow code of Bertsekas and Tseng [3].
Reference: 7. <author> S. Kapoor and P. M. Vaidya. </author> <title> Fast algorithms for convex quadratic programming and multicommodity flows. </title> <booktitle> In Proceedings of the 18th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 147-159, </pages> <year> 1986. </year>
Reference-contexts: Recently, Leighton, Makedon, Plotkin, Stein, Tardos, and Tragoudas [13] proposed a combinatorial approximation algorithm for the multicommodity flow problem. This algorithm has a faster theoretical running time than the best theoretical linear programming algorithms <ref> [7, 18] </ref>. Also, the running time of this algorithm is dominated by the computation of minimum-cost flows, which are often efficiently computable in practice. These two facts caused Leighton et al. to conjecture that the algorithm would perform well in practice.
Reference: 8. <author> J. Kennington. </author> <title> A survey of linear cost multicommoditynetwork flows. </title> <journal> Operations Research, </journal> <volume> 26 </volume> <pages> 206-236, </pages> <year> 1978. </year>
Reference-contexts: Some algorithms which take advantage of the special structure of multicommodity flow problems have been proposed. These algorithms fall into three main classes: price-directive decomposition, resource-directive decomposition, and partitioning approaches. (See the surveys of Assad [2] and Kennington <ref> [8] </ref> and the thesis of Schneur [16] for more information on these approaches.) More recent approaches include interior-point methods [1] A COMBINATORIAL MULTICOMMODITY FLOW ALGORITHM 3 and a combinatorial scaling algorithm [16]. All of the aforementioned algorithms solve multicommodity flow problems using one of two different objective functions.
Reference: 9. <author> N.K. Karmarkar and K. G. Ramakrishnan. </author> <title> Computational results of an interior point algorithm for large scale linear programming. </title> <journal> Mathematical Programming, </journal> <volume> 52 </volume> <month> 555-586 </month> <year> 1991. </year>
Reference-contexts: Thus we concluded that mcnf85 was one of the best codes available at that time. We have also compared our algorithm to a state-of-the-art interior point code called ADP <ref> [9] </ref>. ADP is an approximate dual projective interior point code, written by Karmarkar and Ramakrishnan, and is the latest variant of the interior point algorithm.
Reference: 10. <author> J. Kennington. </author> <title> A primal partitioning code for solving multicommodity flow problems (version 1). </title> <type> Technical Report Techincal Report 79009, </type> <institution> Department of Industrial Engineering and Operations Research, Southern Methodist University, </institution> <year> 1979. </year>
Reference-contexts: We show that the algorithm performs at least as well as the theory predicts. We also compare our combinatorial implementation against two different linear programming-based codes. First we compare our code to that of Kennington <ref> [10] </ref>, which is a network simplex code known to perform well on multicommodity flow problems. For many problems, our combinatorial algorithm outperforms this simplex-based linear programming algorithm. <p> However, the comparison reveals sufficiently consistent trends which enable us to draw some general conclusions. We begin with a brief discussion of the first algorithm to which we have compared our algorithm. The algorithm is mcnf85, a special purpose simplex code for multicommodity flow problems written by Kennington <ref> [10] </ref>, and we chose it for two reasons. First, we had access to the code on our machine. Second, and more importantly, previous tests by Adler, Karmarkar, Resende and Veiga [1] demonstrate its efficiency.
Reference: 11. <author> P. Klein, A. Agrawal, R. Ravi, and S. Rao. </author> <title> Approximation through multicommodity flow. </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 726-727, </pages> <year> 1990. </year>
Reference: 12. <author> P. Klein, S. A. Plotkin, C. Stein, and E. Tardos. </author> <title> Faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts. </title> <type> Technical Report 961, </type> <institution> School of Operations Research and Industrial Engineering, Cornell University, </institution> <year> 1991. </year> <note> A preliminary version of this paper appeared in Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, pages 310-321, </note> <year> 1990. </year>
Reference-contexts: Shahrokhi and Matula implemented their algorithm and tested it on small examples. For the same problem, Klein, Plotkin, Stein, and Tardos later proposed a faster algorithm with an expected running time of O (* 3 min fn; kg (m + n log n)) <ref> [12] </ref>. Building on this framework, Leighton et al. proposed an algorithm for solving the general concurrent flow problem with arbitrary capacities and demands [13].
Reference: 13. <author> T. Leighton, F. Makedon, S. Plotkin, C. Stein, E. Tardos, and S. Tragoudas. </author> <title> Fast approximation algorithms for multicommodity flow problems. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 101-111, </pages> <year> 1991. </year>
Reference-contexts: The size of the linear programs, however, makes it prohibitively difficult to solve large multicommodity flow problems. Recently, Leighton, Makedon, Plotkin, Stein, Tardos, and Tragoudas <ref> [13] </ref> proposed a combinatorial approximation algorithm for the multicommodity flow problem. This algorithm has a faster theoretical running time than the best theoretical linear programming algorithms [7, 18]. Also, the running time of this algorithm is dominated by the computation of minimum-cost flows, which are often efficiently computable in practice. <p> Building on this framework, Leighton et al. proposed an algorithm for solving the general concurrent flow problem with arbitrary capacities and demands <ref> [13] </ref>. They also start with an arbitrarily routed flow and gradually improve it by rerouting individual commodities to move flow from highly congested edges to lightly congested edges. To reroute flow, they compute minimum-cost flows in suitably defined auxiliary graphs. <p> To avoid wasting time rerouting small amounts of flow, we reroute a commodity only if f is at least as large as min . We know from <ref> [13] </ref> that we may have to reroute fractions as small as O (*=ff f ), and so we must decrease min faster than we increase ff to lower the minimum value for f . <p> We note that one of the motivations for this work comes from multicommodity flow problems which arise in approximating a number of NP-hard problems. (See [14],[11],[12], and <ref> [13] </ref> for details.) These problems have large numbers of commodities, i.e., at least as many commodities as the number of nodes. Our algorithm provides a practical means for solving such problems. 4.4. An Anomaly.
Reference: 14. <author> T. Leighton and S. Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicom-modity flow problems with applications to approximation algorithms. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference: 15. <author> B.A. Murtaugh and M.A. Saunders. </author> <title> minos 5.0 user's guide. </title> <type> Technical Report Technical Report 83-20, </type> <institution> Systems Optimization Laboratory, Stanford University, </institution> <year> 1983. </year>
Reference-contexts: First, we had access to the code on our machine. Second, and more importantly, previous tests by Adler, Karmarkar, Resende and Veiga [1] demonstrate its efficiency. Adler et al. compared three different codes for multicommodity flow: minos 5.0, an advanced implementation of the simplex method <ref> [15] </ref>, mcnf85, and their own interior point method. Their experiments show that the running time of minos grows much faster than that of the other two algorithms and that, for the problems they tested, mcnf85 and the interior point algorithm have comparable running times.
Reference: 16. <author> R. Schneur. </author> <title> Scaling algorithms for multicommodity flow problems and network flow problems with side constraints. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <month> February </month> <year> 1991. </year>
Reference-contexts: Some algorithms which take advantage of the special structure of multicommodity flow problems have been proposed. These algorithms fall into three main classes: price-directive decomposition, resource-directive decomposition, and partitioning approaches. (See the surveys of Assad [2] and Kennington [8] and the thesis of Schneur <ref> [16] </ref> for more information on these approaches.) More recent approaches include interior-point methods [1] A COMBINATORIAL MULTICOMMODITY FLOW ALGORITHM 3 and a combinatorial scaling algorithm [16]. All of the aforementioned algorithms solve multicommodity flow problems using one of two different objective functions. <p> into three main classes: price-directive decomposition, resource-directive decomposition, and partitioning approaches. (See the surveys of Assad [2] and Kennington [8] and the thesis of Schneur <ref> [16] </ref> for more information on these approaches.) More recent approaches include interior-point methods [1] A COMBINATORIAL MULTICOMMODITY FLOW ALGORITHM 3 and a combinatorial scaling algorithm [16]. All of the aforementioned algorithms solve multicommodity flow problems using one of two different objective functions. Some find a minimum-cost multicommodity flow, while others find a flow which maximizes the total amount of flow in the network. In 1986, Shahrokhi and Matula proposed a different objective function [17]. <p> For problems with large numbers of commodities, this means a significant reduction in running time. Because our algorithm uses O (km) space, commodity grouping also reduces the space requirement, making it possible to run larger problems. The advantages gained by grouping commodities have also been documented by Schneur <ref> [16] </ref>. 3.2. Choosing a Commodity to Reroute. Leighton et al. propose both a deterministic strategy and a randomized strategy for choosing a commodity group (or a commodity) to reroute. <p> The first, by Shahrokhi and Matula [17], works only for graphs in which every capacity and demand is 1, but it would still be interesting to see how our algorithm compares to theirs on this class of graphs. The second, by Schneur <ref> [16] </ref>, also works by gradually rerouting flow. She has shown that her algorithm runs well on many problems. We would like to compare the algorithms on the same machine and the same problems.
Reference: 17. <author> F. Shahrokhi and D. W. Matula. </author> <title> The maximum concurrent flow problem. </title> <journal> Journal of the ACM, </journal> <volume> 37:318 - 334, </volume> <year> 1990. </year>
Reference-contexts: All of the aforementioned algorithms solve multicommodity flow problems using one of two different objective functions. Some find a minimum-cost multicommodity flow, while others find a flow which maximizes the total amount of flow in the network. In 1986, Shahrokhi and Matula proposed a different objective function <ref> [17] </ref>. They defined the concurrent flow problem, which involves finding the maximum z such that there exists a flow which satisfies a percentage z of every demand without exceeding the capacity of any edge. <p> Using the solution to the previous problem as a starting point for the new problem might improve the running time. We are aware of two other implementations of combinatorial algorithms to which we should compare our algorithm. The first, by Shahrokhi and Matula <ref> [17] </ref>, works only for graphs in which every capacity and demand is 1, but it would still be interesting to see how our algorithm compares to theirs on this class of graphs. The second, by Schneur [16], also works by gradually rerouting flow.
Reference: 18. <author> P. M. Vaidya. </author> <title> Speeding up linear programming using fast matrix multiplication. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 332-337, </pages> <year> 1989. </year>
Reference-contexts: Recently, Leighton, Makedon, Plotkin, Stein, Tardos, and Tragoudas [13] proposed a combinatorial approximation algorithm for the multicommodity flow problem. This algorithm has a faster theoretical running time than the best theoretical linear programming algorithms <ref> [7, 18] </ref>. Also, the running time of this algorithm is dominated by the computation of minimum-cost flows, which are often efficiently computable in practice. These two facts caused Leighton et al. to conjecture that the algorithm would perform well in practice.
References-found: 18

