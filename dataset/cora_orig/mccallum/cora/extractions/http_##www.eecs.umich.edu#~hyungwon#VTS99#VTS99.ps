URL: http://www.eecs.umich.edu/~hyungwon/VTS99/VTS99.ps
Refering-URL: http://www.eecs.umich.edu/~hyungwon/VTS99.html
Root-URL: http://www.eecs.umich.edu
Title: Delay Fault Testing of Designs with Embedded IP Cores  
Author: Hyungwon Kim and John P. Hayes 
Address: Ann Arbor, MI 48109-2122, USA  
Affiliation: Advanced Computer Architecture Laboratory Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: Conventional methods cannot effectively verify path delays of designs employing IP circuits (cores) whose implementation details are hidden. A delay f ault ATPG method for such designs is proposed that emplo ys a scan technique called selectively transparent scan (STS). Experimental results are presented which show that the STS method can rob ustly test paths of a specified delay range in core-based circuits, and substantially reduce test length. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Bhattacharya, </author> <title> Hierarchical Test Access Architecture for Embedded Cores in an Integrated Circuit, </title> <booktitle> Proc. VLSI Test Symp., </booktitle> <pages> pp. 8-13, </pages> <year> 1998. </year>
Reference-contexts: 1 Introduction Design methodologies for VLSI system-on-a-chip (SOC) circuits based on reusable predesigned circuits, which are variously called intellectual property (IP) circuits or cores <ref> [1, 4, 9, 11] </ref>, are becoming v ery popular. Verifying that such designs meet their performance objecti ves is difficult due to the hidden implementation details of the IP circuits. Conventional delay testing methods cannot ef fectively handle IP-based SOCs. <p> Conventional delay testing methods cannot ef fectively handle IP-based SOCs. In particular, paths between IP circuits and user-defined (UD) circuits cannot be tested by standard scan [3, 16], boundary scan <ref> [1, 4, 15] </ref>, or enhanced scan methods [3, 5]. To address this problem, we introduce a delay testing method based on a scan design style called selecti vely transparent scan (STS), and an associated path-delay f ault test generation algorithm STSTEST. <p> This is because UDB1s implementation details are unknown to the IP providers, while IPB1s implementation is hidden from the system designers. Unlike stuck-at fault testing using boundary scan <ref> [1, 4, 15] </ref>, even if precomputed tests are applied to the IP circuit via boundary scan, no delay f ault involving a complete path from R1 to R2 can be detected. <p> Consequently, each complete path requires four test vectors, which may lead to excessive test application time, especially in IP-based system designs that employ boundary scan <ref> [1, 4, 15] </ref>. Ho wever, the STS test vectors can be compressed substantially, so the test application time tends to be shorter than that of con ven-tional 2-pattern delay testing methods. We now describe the overall structure of STSTEST, including its test compaction procedure.
Reference: [2] <author> T. J. Chakraborty, et al., </author> <title> On Variable Clock Methods for Path Delay Testing of Sequential Circuits, </title> <journal> IEEE Trans. CAD, </journal> <volume> vol. 16, </volume> <pages> pp. 1237-1249, </pages> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: W e also present a test compaction technique that reduces both the test vector size and the number of test vectors. Most delay fault testing methods <ref> [2, 3, 10, 12, 13, 16] </ref> apply two test patterns to the tar get circuit to detect each delay fault. They often employ an approach called enhanced scan which uses two flip-flops in each scan cell to hold the two patterns [3, 5]. <p> Using the v alues f and r, we avoid unnecessary backtrace operations for internal nodes whose values cannot be changed. STSTEST can be further extended to handle hazard-free rob ustly testable path delay faults by employing the 13-valued logic used in <ref> [2] </ref> and defined earlier in [8]; see Fig. 9. <p> Our 7-valued logic Related 13-valued logic Value Interpretation Chakraborty, et al. <ref> [2] </ref> Hayes [8] Interpretation 0 Static 0 signal 0|nh|0 A Static 0 signal 1 Static 1 signal 1|nh|1 B Static 1 signal F Falling transition 1|nh|0 1|h|0 E 1-to-0 transition Static 0 hazard Dynamic 0 hazard R Rising transition 0|nh|1 0|h|1 F 0-to-1 transition Static 1 hazard Dynamic 1 hazard f
Reference: [3] <author> K.-T. Cheng, et al., </author> <title> A Partial Enhanced-Scan Approach to Robust Delay-Fault Test Generation for Sequential Circuits, </title> <booktitle> Proc. Intl Test Conf., </booktitle> <pages> pp. 403-410, </pages> <year> 1991. </year>
Reference-contexts: Verifying that such designs meet their performance objecti ves is difficult due to the hidden implementation details of the IP circuits. Conventional delay testing methods cannot ef fectively handle IP-based SOCs. In particular, paths between IP circuits and user-defined (UD) circuits cannot be tested by standard scan <ref> [3, 16] </ref>, boundary scan [1, 4, 15], or enhanced scan methods [3, 5]. To address this problem, we introduce a delay testing method based on a scan design style called selecti vely transparent scan (STS), and an associated path-delay f ault test generation algorithm STSTEST. <p> Conventional delay testing methods cannot ef fectively handle IP-based SOCs. In particular, paths between IP circuits and user-defined (UD) circuits cannot be tested by standard scan [3, 16], boundary scan [1, 4, 15], or enhanced scan methods <ref> [3, 5] </ref>. To address this problem, we introduce a delay testing method based on a scan design style called selecti vely transparent scan (STS), and an associated path-delay f ault test generation algorithm STSTEST. Selectively transparent scan allows testing of any complete path between IP and UD circuits. <p> W e also present a test compaction technique that reduces both the test vector size and the number of test vectors. Most delay fault testing methods <ref> [2, 3, 10, 12, 13, 16] </ref> apply two test patterns to the tar get circuit to detect each delay fault. They often employ an approach called enhanced scan which uses two flip-flops in each scan cell to hold the two patterns [3, 5]. <p> Most delay fault testing methods [2, 3, 10, 12, 13, 16] apply two test patterns to the tar get circuit to detect each delay fault. They often employ an approach called enhanced scan which uses two flip-flops in each scan cell to hold the two patterns <ref> [3, 5] </ref>. Such methods can f ail when applied to the paths between an IP circuit and a user defined circuit, although they work for paths between scan chains internal to the IP circuit or the UD circuit. <p> STS k denotes the k-th cell in the STS re gister linking UDB and IPB. We assume that any I/O line left unconnected, such as the IPBs input n1, is controlled by an enhanced scan re g-ister <ref> [3, 5] </ref>. We compute the path delays using the Synopsys cell library [14], and treat each path as tw o separate paths with rising and the falling transitions, as in [10, 12, 13]. First consider the simple case where we w ant to test the critical (maximum-delay) complete path. <p> There is no prior w ork with which we can directly com-pare our results with respect to the co verage of complete paths. STSTESTs test compaction ratio appears to be superior to the 2-pattern test compaction technique using partial enhanced scan proposed in <ref> [3] </ref>, although the latter is not aimed at testing IP-based designs. 6 Conclusions We have presented a testing method STSTEST for path delay faults aimed at IP-based SOCs.
Reference: [4] <author> K. De, </author> <title> Test Methodology for Embedded Cores which Protects Intellectual Property, </title> <booktitle> Proc. VLSI Test Symp., </booktitle> <pages> pp. 2-9, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction Design methodologies for VLSI system-on-a-chip (SOC) circuits based on reusable predesigned circuits, which are variously called intellectual property (IP) circuits or cores <ref> [1, 4, 9, 11] </ref>, are becoming v ery popular. Verifying that such designs meet their performance objecti ves is difficult due to the hidden implementation details of the IP circuits. Conventional delay testing methods cannot ef fectively handle IP-based SOCs. <p> Conventional delay testing methods cannot ef fectively handle IP-based SOCs. In particular, paths between IP circuits and user-defined (UD) circuits cannot be tested by standard scan [3, 16], boundary scan <ref> [1, 4, 15] </ref>, or enhanced scan methods [3, 5]. To address this problem, we introduce a delay testing method based on a scan design style called selecti vely transparent scan (STS), and an associated path-delay f ault test generation algorithm STSTEST. <p> This is because UDB1s implementation details are unknown to the IP providers, while IPB1s implementation is hidden from the system designers. Unlike stuck-at fault testing using boundary scan <ref> [1, 4, 15] </ref>, even if precomputed tests are applied to the IP circuit via boundary scan, no delay f ault involving a complete path from R1 to R2 can be detected. <p> Consequently, each complete path requires four test vectors, which may lead to excessive test application time, especially in IP-based system designs that employ boundary scan <ref> [1, 4, 15] </ref>. Ho wever, the STS test vectors can be compressed substantially, so the test application time tends to be shorter than that of con ven-tional 2-pattern delay testing methods. We now describe the overall structure of STSTEST, including its test compaction procedure.
Reference: [5] <author> B. I. Dervisoglu and G. E. </author> <title> Strong, Design for Testability: Using Scanpath Techniques for Path-Delay Test and Measurement, </title> <booktitle> Proc. Intl Test Conf., </booktitle> <pages> pp. 365-374, </pages> <year> 1991. </year>
Reference-contexts: Conventional delay testing methods cannot ef fectively handle IP-based SOCs. In particular, paths between IP circuits and user-defined (UD) circuits cannot be tested by standard scan [3, 16], boundary scan [1, 4, 15], or enhanced scan methods <ref> [3, 5] </ref>. To address this problem, we introduce a delay testing method based on a scan design style called selecti vely transparent scan (STS), and an associated path-delay f ault test generation algorithm STSTEST. Selectively transparent scan allows testing of any complete path between IP and UD circuits. <p> Most delay fault testing methods [2, 3, 10, 12, 13, 16] apply two test patterns to the tar get circuit to detect each delay fault. They often employ an approach called enhanced scan which uses two flip-flops in each scan cell to hold the two patterns <ref> [3, 5] </ref>. Such methods can f ail when applied to the paths between an IP circuit and a user defined circuit, although they work for paths between scan chains internal to the IP circuit or the UD circuit. <p> STS k denotes the k-th cell in the STS re gister linking UDB and IPB. We assume that any I/O line left unconnected, such as the IPBs input n1, is controlled by an enhanced scan re g-ister <ref> [3, 5] </ref>. We compute the path delays using the Synopsys cell library [14], and treat each path as tw o separate paths with rising and the falling transitions, as in [10, 12, 13]. First consider the simple case where we w ant to test the critical (maximum-delay) complete path.
Reference: [6] <author> S. Devadas and K. Keutzer, </author> <title> Synthesis of Robust Delay-Fault-Testable Circuits: </title> <journal> Theory, IEEE Trans. CAD, </journal> <volume> vol. 11, </volume> <pages> pp. 87-101, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: This is a v ariant of PODEM [7] designed to handle logic v alues that represent signal transitions. Our current implementation is aimed at non-hazard-free robustly testable path delay faults <ref> [6, 16] </ref>. It employs a 7-valued logic whose values are given in Fig. 9. This e xtends the classical 5-valued logic of [10] to speed up the backtrace operation of the PODEM algorithm [7].
Reference: [7] <author> P. Goel, </author> <title> An Implicit Enumeration Algorithm to Generate Tests for Combinational Logic Circuits, </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-30, </volume> <pages> pp. 215-222, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: Enhanced scan register STS 1 The critical complete path R R F F F . . . grated into STSTEST. This is a v ariant of PODEM <ref> [7] </ref> designed to handle logic v alues that represent signal transitions. Our current implementation is aimed at non-hazard-free robustly testable path delay faults [6, 16]. It employs a 7-valued logic whose values are given in Fig. 9. <p> Our current implementation is aimed at non-hazard-free robustly testable path delay faults [6, 16]. It employs a 7-valued logic whose values are given in Fig. 9. This e xtends the classical 5-valued logic of [10] to speed up the backtrace operation of the PODEM algorithm <ref> [7] </ref>. Using the v alues f and r, we avoid unnecessary backtrace operations for internal nodes whose values cannot be changed.
Reference: [8] <author> J. P. Hayes, </author> <title> Digital Simulation with Multiple Logic Values, </title> <journal> IEEE Trans. CAD, </journal> <volume> vol. CAD-2, </volume> <pages> pp. 274-283, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Using the v alues f and r, we avoid unnecessary backtrace operations for internal nodes whose values cannot be changed. STSTEST can be further extended to handle hazard-free rob ustly testable path delay faults by employing the 13-valued logic used in [2] and defined earlier in <ref> [8] </ref>; see Fig. 9. <p> Our 7-valued logic Related 13-valued logic Value Interpretation Chakraborty, et al. [2] Hayes <ref> [8] </ref> Interpretation 0 Static 0 signal 0|nh|0 A Static 0 signal 1 Static 1 signal 1|nh|1 B Static 1 signal F Falling transition 1|nh|0 1|h|0 E 1-to-0 transition Static 0 hazard Dynamic 0 hazard R Rising transition 0|nh|1 0|h|1 F 0-to-1 transition Static 1 hazard Dynamic 1 hazard f Unknown-to-0 X|~|0
Reference: [9] <author> H. Kim and J. P. Hayes, </author> <title> High-Coverage ATPG for Datapath Circuits with Unimplemented Blocks, </title> <booktitle> Proc. Intl Test Conf., </booktitle> <pages> pp. 577-586, </pages> <year> 1998. </year>
Reference-contexts: 1 Introduction Design methodologies for VLSI system-on-a-chip (SOC) circuits based on reusable predesigned circuits, which are variously called intellectual property (IP) circuits or cores <ref> [1, 4, 9, 11] </ref>, are becoming v ery popular. Verifying that such designs meet their performance objecti ves is difficult due to the hidden implementation details of the IP circuits. Conventional delay testing methods cannot ef fectively handle IP-based SOCs.
Reference: [10] <author> C. J. Lin and S. M. Reddy, </author> <title> On Delay Fault Testing in Logic Circuits, </title> <journal> IEEE Trans. CAD, </journal> <volume> vol. CAD-6, </volume> <pages> pp. 694-703, </pages> <month> Sep. </month> <year> 1987. </year>
Reference-contexts: W e also present a test compaction technique that reduces both the test vector size and the number of test vectors. Most delay fault testing methods <ref> [2, 3, 10, 12, 13, 16] </ref> apply two test patterns to the tar get circuit to detect each delay fault. They often employ an approach called enhanced scan which uses two flip-flops in each scan cell to hold the two patterns [3, 5]. <p> Complete single-c ycle paths exist from register R1 to R2 that tra verse both UDB1 and IPB1. Neither the IP pro viders nor the system designers can generate tests for these complete paths using con ventional ATPG methods for path-delay faults <ref> [10, 12] </ref>. This is because UDB1s implementation details are unknown to the IP providers, while IPB1s implementation is hidden from the system designers. <p> Common choices are a set of paths that ha ve a certain delay range <ref> [10, 16] </ref> and a set of longest paths passing through every gate [13]. We focus on the former case in this paper . <p> We compute the path delays using the Synopsys cell library [14], and treat each path as tw o separate paths with rising and the falling transitions, as in <ref> [10, 12, 13] </ref>. First consider the simple case where we w ant to test the critical (maximum-delay) complete path. In general, a critical complete path can be composed of UD and IP paths that are not critical by themselves. <p> Test Cube Generation: To compute the test cubes for the IP paths included in the IP specif ication, we developed a 2-pattern ATPG program similar to that of <ref> [10] </ref>, which is inte Fig. 5 : (a) Some representative IP paths from Fig. 4; (b) all the corresponding complete UDB-IPB paths that exceed the complete path threshold delay. <p> Our current implementation is aimed at non-hazard-free robustly testable path delay faults [6, 16]. It employs a 7-valued logic whose values are given in Fig. 9. This e xtends the classical 5-valued logic of <ref> [10] </ref> to speed up the backtrace operation of the PODEM algorithm [7]. Using the v alues f and r, we avoid unnecessary backtrace operations for internal nodes whose values cannot be changed. <p> If test compaction were not considered, we could determine the STS tests as follows. Compute the UD test pair such that the path delay fault of P i,j is robustly detected as in <ref> [10, 12, 13] </ref>. Then obtain the IP test pair by assigning the IP test cube to the propag ation vector and setting the selection vector to make the STS k in P i,j transparent.
Reference: [11] <author> B. T. Murray and J. P. Hayes, </author> <title> Testing ICs: Getting to the Core of the Problem, </title> <journal> IEEE Computer, </journal> <volume> vol. 29, </volume> <pages> pp. 32-38, </pages> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Design methodologies for VLSI system-on-a-chip (SOC) circuits based on reusable predesigned circuits, which are variously called intellectual property (IP) circuits or cores <ref> [1, 4, 9, 11] </ref>, are becoming v ery popular. Verifying that such designs meet their performance objecti ves is difficult due to the hidden implementation details of the IP circuits. Conventional delay testing methods cannot ef fectively handle IP-based SOCs.
Reference: [12] <author> I. Pomeranz, et al., </author> <title> NEST: A Nonenumerative Test Generation Method for Path Delay Faults in Combinational Circuits, </title> <journal> IEEE Trans. CAD, </journal> <volume> vol. 14, </volume> <pages> pp. 1505-1515, </pages> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: W e also present a test compaction technique that reduces both the test vector size and the number of test vectors. Most delay fault testing methods <ref> [2, 3, 10, 12, 13, 16] </ref> apply two test patterns to the tar get circuit to detect each delay fault. They often employ an approach called enhanced scan which uses two flip-flops in each scan cell to hold the two patterns [3, 5]. <p> Complete single-c ycle paths exist from register R1 to R2 that tra verse both UDB1 and IPB1. Neither the IP pro viders nor the system designers can generate tests for these complete paths using con ventional ATPG methods for path-delay faults <ref> [10, 12] </ref>. This is because UDB1s implementation details are unknown to the IP providers, while IPB1s implementation is hidden from the system designers. <p> We compute the path delays using the Synopsys cell library [14], and treat each path as tw o separate paths with rising and the falling transitions, as in <ref> [10, 12, 13] </ref>. First consider the simple case where we w ant to test the critical (maximum-delay) complete path. In general, a critical complete path can be composed of UD and IP paths that are not critical by themselves. <p> If test compaction were not considered, we could determine the STS tests as follows. Compute the UD test pair such that the path delay fault of P i,j is robustly detected as in <ref> [10, 12, 13] </ref>. Then obtain the IP test pair by assigning the IP test cube to the propag ation vector and setting the selection vector to make the STS k in P i,j transparent.
Reference: [13] <author> M. H. Schultz, et al., </author> <title> Advanced Automatic Test Pattern Generation Techniques for Path Delay Faults, </title> <booktitle> Proc. Fault Tolerant Comp. Symp., </booktitle> <pages> pp. 44-51, </pages> <year> 1989. </year>
Reference-contexts: W e also present a test compaction technique that reduces both the test vector size and the number of test vectors. Most delay fault testing methods <ref> [2, 3, 10, 12, 13, 16] </ref> apply two test patterns to the tar get circuit to detect each delay fault. They often employ an approach called enhanced scan which uses two flip-flops in each scan cell to hold the two patterns [3, 5]. <p> Common choices are a set of paths that ha ve a certain delay range [10, 16] and a set of longest paths passing through every gate <ref> [13] </ref>. We focus on the former case in this paper . Given a set of paths in an IP block IPB, we derive a set of complete paths by combining the IP paths with paths in a UD block UDB linked to IPB by an STS re gister. <p> We compute the path delays using the Synopsys cell library [14], and treat each path as tw o separate paths with rising and the falling transitions, as in <ref> [10, 12, 13] </ref>. First consider the simple case where we w ant to test the critical (maximum-delay) complete path. In general, a critical complete path can be composed of UD and IP paths that are not critical by themselves. <p> If test compaction were not considered, we could determine the STS tests as follows. Compute the UD test pair such that the path delay fault of P i,j is robustly detected as in <ref> [10, 12, 13] </ref>. Then obtain the IP test pair by assigning the IP test cube to the propag ation vector and setting the selection vector to make the STS k in P i,j transparent.
Reference: [14] <author> Synopsys Inc., </author> <title> Synopsys Design Compiler Family Reference, </title> <month> March </month> <year> 1995. </year>
Reference-contexts: STS k denotes the k-th cell in the STS re gister linking UDB and IPB. We assume that any I/O line left unconnected, such as the IPBs input n1, is controlled by an enhanced scan re g-ister [3, 5]. We compute the path delays using the Synopsys cell library <ref> [14] </ref>, and treat each path as tw o separate paths with rising and the falling transitions, as in [10, 12, 13]. First consider the simple case where we w ant to test the critical (maximum-delay) complete path.
Reference: [15] <author> N. A. Touba and B. Pouya, </author> <title> Testing Embedded Cores Using Partial Isolation Rings, </title> <booktitle> Proc. VLSI Test Symp., </booktitle> <pages> pp. 10-16, </pages> <year> 1997. </year>
Reference-contexts: Conventional delay testing methods cannot ef fectively handle IP-based SOCs. In particular, paths between IP circuits and user-defined (UD) circuits cannot be tested by standard scan [3, 16], boundary scan <ref> [1, 4, 15] </ref>, or enhanced scan methods [3, 5]. To address this problem, we introduce a delay testing method based on a scan design style called selecti vely transparent scan (STS), and an associated path-delay f ault test generation algorithm STSTEST. <p> This is because UDB1s implementation details are unknown to the IP providers, while IPB1s implementation is hidden from the system designers. Unlike stuck-at fault testing using boundary scan <ref> [1, 4, 15] </ref>, even if precomputed tests are applied to the IP circuit via boundary scan, no delay f ault involving a complete path from R1 to R2 can be detected. <p> Consequently, each complete path requires four test vectors, which may lead to excessive test application time, especially in IP-based system designs that employ boundary scan <ref> [1, 4, 15] </ref>. Ho wever, the STS test vectors can be compressed substantially, so the test application time tends to be shorter than that of con ven-tional 2-pattern delay testing methods. We now describe the overall structure of STSTEST, including its test compaction procedure.

References-found: 15

