URL: http://www.ri.cmu.edu/afs/cs/project/prodigy-1/eugene/Public/Papers/selecting-method.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/eugene/Public/Www/Research/Papers/reps.html
Root-URL: 
Email: eugene@cs.cmu.edu  
Title: Statistical Selection Among Problem-Solving Methods  
Author: Eugene Fink 
Web: http://www.cs.cmu.edu/~eugene  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: The choice of an appropriate problem-solving method, from available methods, is a crucial skill for human experts in many areas. We describe a technique for automatic selection among methods, based on a statistical analysis of their past performances. We formalize the statistical problem involved in selecting an efficient problem-solving method, derive a solution to this problem, and describe a selection algorithm. The algorithm not only chooses among available methods, but also decides when to abandon the chosen method, if it proves to take too much time. We extend our basic statistical technique to account for problem sizes and for similarity between problems. We give empirical results of the use of this technique to select among search engines in the prodigy system. We also test the selection technique on artificially generated performance data, using several different probability distributions. 
Abstract-found: 1
Intro-found: 1
Reference: [ Bacchus and Yang, 1992 ] <author> Fahiem Bacchus and Qiang Yang. </author> <title> The expected value of hierarchical problem-solving. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <year> 1992. </year>
Reference-contexts: Experiments have demonstrated that delaying the application improves the efficiency of problem solving in some domains, but slows prodigy down in others [ Stone et al., 1994 ] ; abstraction sometimes gives drastic time savings and sometimes worsens the performance <ref> [ Knoblock, 1991; Bacchus and Yang, 1992 ] </ref> . The most reliable way to select an efficient method for a given problem domain is by empirical comparison.
Reference: [ Blumer et al., 1987 ] <author> Anselm Blumer, Andrzej Ehrenfeucht, David Haussler, and Manfred K. Warmuth. </author> <title> Occam's razor. </title> <journal> Information Processing Letters, </journal> <volume> 24 </volume> <pages> 377-380, </pages> <year> 1987. </year>
Reference: [ Cohen, 1992 ] <author> William W. Cohen. </author> <title> Using distribution-free learning theory to analyze solution-path caching mechanisms. </title> <journal> Computational Intelligence, </journal> <volume> 8(2) </volume> <pages> 336-375, </pages> <year> 1992. </year>
Reference: [ Cohen, 1995 ] <author> Paul R. Cohen. </author> <title> Empirical Methods for Artificial Intelligence. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1995. </year>
Reference: [ Gentner and Stevens, 1983 ] <author> Dedre Gentner and Albert L. Stevens, </author> <title> editors. Mental Models, </title> <address> Hillside, NJ, 1983. </address> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: Psychologists have accumulated much evidence that confirms Polya's pioneering insight: the performance of human experts in many areas depends on their proficiency in choosing a method that fits a problem <ref> [ Newell and Simon, 1972; Gentner and Stevens, 1983 ] </ref> . The purpose of our research is to automate the selection of a problem-solving method.
Reference: [ Knoblock, 1991 ] <author> Craig A. Knoblock. </author> <title> Automatically Generating Abstractions for Problem Solving. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1991. </year> <note> Technical Report CMU-CS-91-120. 36 </note>
Reference-contexts: Experiments have demonstrated that delaying the application improves the efficiency of problem solving in some domains, but slows prodigy down in others [ Stone et al., 1994 ] ; abstraction sometimes gives drastic time savings and sometimes worsens the performance <ref> [ Knoblock, 1991; Bacchus and Yang, 1992 ] </ref> . The most reliable way to select an efficient method for a given problem domain is by empirical comparison.
Reference: [ Knoblock, 1994 ] <author> Craig A. Knoblock. </author> <title> Automatically generating abstractions for planning. </title> <journal> Artificial Intelligence, </journal> <volume> 68 </volume> <pages> 243-302, </pages> <year> 1994. </year>
Reference-contexts: This method is a combination of the saba search algorithm, implemented by Veloso and Stone, with the domain-specific control rules. The third method, alpine <ref> [ Knoblock, 1994 ] </ref> , is a combination of apply with an abstraction generator, which determines relative importance of the elements of a problem domain. alpine first ignores the less important elements and generates an outline of a solution; it then refines the solution to take care of the initially ignored
Reference: [ Mendenhall, 1987 ] <author> William Mendenhall. </author> <title> Introduction to Probability and Statistics. </title> <publisher> Duxbury Press, </publisher> <address> Boston, MA, seventh edition, </address> <year> 1987. </year>
Reference: [ Newell and Simon, 1972 ] <author> Allen Newell and Herbert A. Simon. </author> <title> Human Problem Solving. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1972. </year>
Reference-contexts: Psychologists have accumulated much evidence that confirms Polya's pioneering insight: the performance of human experts in many areas depends on their proficiency in choosing a method that fits a problem <ref> [ Newell and Simon, 1972; Gentner and Stevens, 1983 ] </ref> . The purpose of our research is to automate the selection of a problem-solving method.
Reference: [ Perez, 1995 ] <author> M. Alicia Perez. </author> <title> Learning Search Control Knowledge to Improve Plan Quality. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1995. </year> <note> Technical Report CMU-CS-95-175. </note>
Reference: [ Polya, 1957 ] <author> George Polya. </author> <title> How to Solve It. </title> <publisher> Doubleday, </publisher> <address> Garden City, NY, </address> <note> second edition, </note> <year> 1957. </year>
Reference-contexts: 1 Introduction The choice of an appropriate problem-solving method is one of the main themes of Polya's famous book How to Solve It <ref> [ Polya, 1957 ] </ref> . Polya showed that the selection of an effective approach to a problem is a crucial skill for a student of mathematics.
Reference: [ Stone et al., 1994 ] <author> Peter Stone, Manuela M. Veloso, and Jim Blythe. </author> <title> The need for different domain-independent heuristics. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning Systems, </booktitle> <pages> pages 164-169, </pages> <year> 1994. </year>
Reference-contexts: Experiments have demonstrated that delaying the application improves the efficiency of problem solving in some domains, but slows prodigy down in others <ref> [ Stone et al., 1994 ] </ref> ; abstraction sometimes gives drastic time savings and sometimes worsens the performance [ Knoblock, 1991; Bacchus and Yang, 1992 ] . The most reliable way to select an efficient method for a given problem domain is by empirical comparison.
Reference: [ Valiant, 1984 ] <author> Leslie G. Valiant. </author> <title> A theory of the learnable. </title> <journal> Communications of the ACM, </journal> <volume> 27 </volume> <pages> 1134-1142, </pages> <year> 1984. </year>
Reference-contexts: Given a reward R for solving a new problem and a time bound B, estimate the expected gain and determine the standard deviation of the estimate. We use the stationarity assumption <ref> [ Valiant, 1984 ] </ref> ; that is, we assume that the past problems and the new problem are drawn randomly from the same population, using the same probability distribution. We also assume that the method's performance does not improve over time (that is, no learning).
Reference: [ Veloso and Stone, 1995 ] <author> Manuela M. Veloso and Peter Stone. flecs: </author> <title> Planning with a flexible commitment strategy. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 3 </volume> <pages> 25-52, </pages> <year> 1995. </year>
Reference-contexts: The purpose of our research is to automate the selection of a problem-solving method. This research is motivated by our work on the prodigy problem-solving system, which includes several search engines <ref> [ Veloso and Stone, 1995 ] </ref> and a number of learning modules [ Veloso et al., 1995 ] . We need to provide a mechanism for deciding which learning modules and which search engine are appropriate for a given problem. <p> The second method uses the same control rules and a special rule that delays the application of the selected actions and forces more emphasis on the backward search <ref> [ Veloso and Stone, 1995 ] </ref> ; we call it delay. This method is a combination of the saba search algorithm, implemented by Veloso and Stone, with the domain-specific control rules.
Reference: [ Veloso et al., 1995 ] <author> Manuela M. Veloso, Jaime G. Carbonell, M. Alicia Perez, Daniel Bor-rajo, Eugene Fink, and Jim Blythe. </author> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7(1) </volume> <pages> 81-120, </pages> <year> 1995. </year>
Reference-contexts: The purpose of our research is to automate the selection of a problem-solving method. This research is motivated by our work on the prodigy problem-solving system, which includes several search engines [ Veloso and Stone, 1995 ] and a number of learning modules <ref> [ Veloso et al., 1995 ] </ref> . We need to provide a mechanism for deciding which learning modules and which search engine are appropriate for a given problem. Moreover, since programs in the real world cannot run forever, we need some means to decide when to interrupt an unsuccessful search.
Reference: [ Veloso, 1994 ] <author> Manuela M. Veloso. </author> <title> Planning and Learning by Analogical Reasoning. </title> <publisher> Springer Verlag, </publisher> <year> 1994. </year> <month> 37 </month>
Reference-contexts: Suppose that we use prodigy to construct plans for transporting packages by vans between different locations in a city <ref> [ Veloso, 1994 ] </ref> . We consider the use of three different search methods. The first of them is based on the control rules designed by Veloso [1994] and Perez [1995], which guide prodigy's search in the transportation domain. <p> We now give results in two other domains. We first consider an extended version of the transportation domain, in which we use airplanes to carry packages between cities and vans for the local delivery within cities <ref> [ Veloso, 1994 ] </ref> . The problems in this domain are more complex, and the behavior of prodigy search methods differs from that in the simpler domain used in the previous sections. In Table 3, we give the performance of apply, delay, and alpine on thirty problems.
References-found: 16

