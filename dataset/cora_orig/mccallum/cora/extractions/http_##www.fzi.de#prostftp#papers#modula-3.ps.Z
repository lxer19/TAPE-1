URL: http://www.fzi.de/prostftp/papers/modula-3.ps.Z
Refering-URL: http://www.fzi.de/prost/people/rueping.html
Root-URL: http://www.fzi.de
Title: Modula-3 Modelling and Implementation of an Industrial Production Cell  
Author: Andreas Rping, Emil Sekerinski 
Abstract: We present the modelling, implementation, and verification of a software system for the control of an industrial production cell. We use techniques of object-oriented and of parallel programming for both modelling and implementation. The implementation is done in Modula-3. We demonstrate the verification of safety requirements for the production cell. We discuss how well Modula-3 is suited for developing the control software in this case study. In detail, we analyse the benefits of object-oriented and parallel constructs and how both can be integrated with each other. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. W. Dijkstra. </author> <title> A Discipline of Programming. </title> <publisher> Prentice Hall, </publisher> <year> 1976. </year>
Reference-contexts: unload arm2 at the deposit belt &gt;; -INV-SR INV-RO-Unloaded- (RO-C 5 ) RO.Unloaded !!; &lt; load metal plate on arm1 from the elevating rotary table &gt;; RO.position := arm2_to_press; RO.arm1 := in; RO.arm2 := in END 10 Andreas Rping, Emil Sekerinski 3.2 Proving invariants Using the weakest precondition calculus (cf. <ref> [1] </ref>, [7]), we can now formally prove that the conditions presented in Figure 3 indeed hold.
Reference: [2] <author> M. Felger. </author> <title> Spezifikation und Implementierung einer Fertigungszelle mit Modula-3. </title> <type> Studienarbeit, </type> <institution> Forschungszentrum Informatik, Karlsruhe (German language), </institution> <year> 1994. </year>
Reference-contexts: We obtain the exemplary specification of the press and the robot presented in the entire production cell is presented in <ref> [2] </ref>. WaitPress RO.Unloaded !! Press Load PR.Load !! Unload PR.Unload !! Load1 RO.Load1 !! UnloadLoad2 WaitUnload RO.Loaded2 !! WaitLoad1 WaitLoad2 RO.Press ?? RO.Unload ?? ERT.Unload ?? PR.Unload ?? PR.Load ?? DB.Load ?? 6 Andreas Rping, Emil Sekerinski PROCEDURE ControlPress () = BEGIN &lt; initialize &gt; WHILE TRUE DO PR. <p> Further safety requirements (cf. [5]) can be verified according to the same principle. Modula-3 11 4 Implementation We only outline the principles of the implementation in Modula-3 since the implementation details are beyond the scope of this paper. For details we refer to <ref> [2] </ref> where a preliminary version of the implementation is presented. 4.1 Objects and classes We introduce one object for each of the six devices. Thus we obtain the classes FeedBelt, ElevatingRotaryTable, Robot, Press, DepositBelt, and TravellingCrane. <p> In some cases, the condition to continue a thread is fulfilled before the thread is actually blocked. To deal with this problem, we use a mechanism to put received signals into a queue. For the details we refer to <ref> [2] </ref>. 5 Evaluation and Conclusions The case study of applying Modula-3 to the industrial production cell has two major characteristics, both stemming from the language features of Modula-3: object-orientation, concurrency. Object-oriented features were successfully applied in the case study. The features used include encapsulation, abstraction, subclassing. <p> Thus, safety requirements were successfully proven which were placed on several processes working in parallel. Modula-3 15 We conclude with some remarks on the effort that was placed on the case study presented. The preliminary version of the implementation (cf. <ref> [2] </ref>) includes 1.400 lines of code, organized in 20 classes and 21 modules. The development of the whole case study took 80 hours, in detail: 15 hours on specification and design, 60 hours on the preliminary implementation, 5 hours on the exemplary verification of safety requirements.
Reference: [3] <author> S. P. Harbison. </author> <title> Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Several approaches from the field of formal methods have been applied to this example, with the focus on discussing their practicability. The different approaches include this one which deals with the modelling, implementation, and verification of a control software system for the production cell using Modula-3 (cf. <ref> [3] </ref>, [6]), a successor to Modula-2. <p> Evaluation We evaluate the integration of techniques of object-orientation and parallel programming. We conclude with some remarks on the effort that was necessary for carrying out this case study. Before going into details of the specification, we briey introduce the main features of Modula-3 (cf. <ref> [3] </ref>, [6]): Basic features Basic features include declarations, statements, basic types, structured types, and procedures. Modules As indicated by its name, Modula-3 provides a modularisation concept. Above all, modules are compilation units.
Reference: [4] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: Synchronization requires that two objects communicate via signals. Objects can send a signal and continue their thread. They can also wait for a signal and not continue until the signal is received. We use CSP-like communication constructs (cf. <ref> [4] </ref>), with !! representing the sending of a signal and ?? representing the waiting for it. In Figure 1 we exemplarily present the possible states of the robot and the press and their communication.
Reference: [5] <author> T. Lindner. </author> <title> Task Description. </title> <type> Technical Report, </type> <institution> Forschungszentrum Informatik, Karlsruhe, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction This report is part of a comparative study analysing different modelling, specification, verification, and implementation techniques when applied to a realistic example: an industrial production cell, consisting of six interacting devices (cf. <ref> [5] </ref>). Several approaches from the field of formal methods have been applied to this example, with the focus on discussing their practicability. <p> The concurrent facilities of Modula-3 are lightweight, since all threads in a program live in the same address space. To guarantee mutual exclusion with entering critical sections, Modula-3 provides mechanisms for the synchronization of threads. 2 Modelling For a detailed task description of the production cell we refer to <ref> [5] </ref>. The task description presented in [5] serves as a requirement specification. The basic idea of our approach is to model each major device of the production cell as an individual object. <p> To guarantee mutual exclusion with entering critical sections, Modula-3 provides mechanisms for the synchronization of threads. 2 Modelling For a detailed task description of the production cell we refer to <ref> [5] </ref>. The task description presented in [5] serves as a requirement specification. The basic idea of our approach is to model each major device of the production cell as an individual object. Hence we have six major objects: the feed belt, the elevating rotary table, the robot, the press, the deposit belt, and the travelling crane. <p> Thus, we have verified that the invariant representing the above safety requirement holds whenever the state of the production cell is observed. Further safety requirements (cf. <ref> [5] </ref>) can be verified according to the same principle. Modula-3 11 4 Implementation We only outline the principles of the implementation in Modula-3 since the implementation details are beyond the scope of this paper.
Reference: [6] <author> G. Nelson (Ed.). </author> <title> Systems Programming with Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Several approaches from the field of formal methods have been applied to this example, with the focus on discussing their practicability. The different approaches include this one which deals with the modelling, implementation, and verification of a control software system for the production cell using Modula-3 (cf. [3], <ref> [6] </ref>), a successor to Modula-2. <p> Evaluation We evaluate the integration of techniques of object-orientation and parallel programming. We conclude with some remarks on the effort that was necessary for carrying out this case study. Before going into details of the specification, we briey introduce the main features of Modula-3 (cf. [3], <ref> [6] </ref>): Basic features Basic features include declarations, statements, basic types, structured types, and procedures. Modules As indicated by its name, Modula-3 provides a modularisation concept. Above all, modules are compilation units.
Reference: [7] <author> A. U. Shankar. </author> <title> An Introduction to Assertional Reasoning for Concurrent Systems, </title> <journal> in ACM Computing Surveys, </journal> <volume> Vol. 25, No. 3. </volume> <publisher> ACM Press, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: arm2 at the deposit belt &gt;; -INV-SR INV-RO-Unloaded- (RO-C 5 ) RO.Unloaded !!; &lt; load metal plate on arm1 from the elevating rotary table &gt;; RO.position := arm2_to_press; RO.arm1 := in; RO.arm2 := in END 10 Andreas Rping, Emil Sekerinski 3.2 Proving invariants Using the weakest precondition calculus (cf. [1], <ref> [7] </ref>), we can now formally prove that the conditions presented in Figure 3 indeed hold.
References-found: 7

