URL: http://www.cs.mu.oz.au/tr_db/mu_93_12.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Title: Using Optimized Multi-attribute Hash Indexes for Hash Joins  
Author: Evan P. Harris Kotagiri Ramamohanarao 
Address: Parkville, Victoria 3052 Australia  
Affiliation: Department of Computer Science The University of Melbourne  
Pubnum: Technical Report 93/12  
Abstract: The join operation is one of the most frequently used and expensive query processing operations in relational database systems. One method of joining two relations is to use a hash-based join algorithm. Hash-based join algorithms typically have two phases, a partitioning phase and a partition joining phase. We describe how an optimal multi-attribute hash (MAH) indexing scheme can be used to reduce the average cost of the partitioning phase of any hash-based join algorithm, by eliminating the partitioning phase entirely for many of the most common join queries. We demonstrate that the technique can be extended to include multiple copies of the data file, each with a different organization of the MAH indexing scheme, and that this further reduces the average cost of performing the partitioning phase of the hash join algorithm. We describe a relatively inexpensive method for determining a good MAH indexing scheme. Our experiments show that the schemes found using this method are usually optimal and performs the partitioning phase of the hash join algorithm at least three times faster than using the standard approach. We show that a significant change in the query pattern is required for a reorganization of the data file to be necessary, and show that reorganizing the data file is an inexpensive operation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho and J. D. Ullman. </author> <title> Optimal partial-match retrieval when fields are independently specified. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(2) </volume> <pages> 168-179, </pages> <month> June </month> <year> 1979. </year>
Reference-contexts: 1 Introduction Much work has been done in constructing indexing schemes to cluster relations to increase the performance of partial match queries. The indexing technique we will consider is multi-attribute hash (MAH) indexing. Examples of this research include the work of Aho and Ullman <ref> [1] </ref>, Lloyd [19], Moran [23] and Ramamohanarao, Shepherd and Sacks-Davis [28]. MAH indexing has been used in preference to indexing schemes such as B-trees because these schemes are primary key indexing schemes and do not perform well when multiple, non-primary, keys are required in an operation.
Reference: [2] <author> J. L. Bentley. </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> Communications of the ACM, </journal> <volume> 18(9) </volume> <pages> 509-517, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: Several other non-primary key methods of performing partial match queries have been studied. In addition to multi-attribute hashing, effective solutions include the grid file of Nievergelt, Hinterberger and Sevcik [25], the BANG file of Freeston [8], the multidimensional binary search tree (k-d tree) of Bentley <ref> [2] </ref>, the multilevel grid file of Whang and Krishnamurthy [33] and the k-d-B-tree of Robinson [30]. The technique we will describe can be applied to many of these schemes. Only a small number of the retrieval based operations of a database will only be partial match queries. <p> It is also the standard method suggested, and used, to divide a data space between attributes for many different data structures. These include the grid file of Nievergelt, Hinterberger and Sevcik [25], and the multidimensional binary search trees (k-d tree) of Bentley <ref> [2, 3] </ref>, in addition to files with multi-attribute hash indexes. * HIGH: All bits in the hash key are allocated to the attribute with the highest probability of appearing in a join operation. <p> We have discussed these other operations in more detail in another paper [10]. 21 The technique of determining the best attribute to allocate bits to can also be used by other data structures. For example, the optimal dimension to split on by the multidimensional binary search tree of Bentley <ref> [2, 3] </ref>, or the grid file of Nievergelt, Hinterberger and Sevcik [25] could be determined in a similar way, once the cost functions are modified to reflect the cost of using these data structures.
Reference: [3] <author> J. L. Bentley. </author> <title> Multidimensional binary search trees in database applications. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5(4):333-340, </volume> <month> July </month> <year> 1979. </year>
Reference-contexts: It is also the standard method suggested, and used, to divide a data space between attributes for many different data structures. These include the grid file of Nievergelt, Hinterberger and Sevcik [25], and the multidimensional binary search trees (k-d tree) of Bentley <ref> [2, 3] </ref>, in addition to files with multi-attribute hash indexes. * HIGH: All bits in the hash key are allocated to the attribute with the highest probability of appearing in a join operation. <p> We have discussed these other operations in more detail in another paper [10]. 21 The technique of determining the best attribute to allocate bits to can also be used by other data structures. For example, the optimal dimension to split on by the multidimensional binary search tree of Bentley <ref> [2, 3] </ref>, or the grid file of Nievergelt, Hinterberger and Sevcik [25] could be determined in a similar way, once the cost functions are modified to reflect the cost of using these data structures.
Reference: [4] <author> K. Bratbergsengen. </author> <title> Hashing methods and relational algebra operations. </title> <editor> In U. Dayal, G. Schlageter, and L. H. Seng, editors, </editor> <booktitle> Proceedings of the Tenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 323-333, </pages> <address> Singapore, </address> <month> August </month> <year> 1984. </year>
Reference-contexts: This results in the cost of the partitioning phase being zero. This does not preclude using any other join method which may be faster than the nested loop for the data in each prepartitioned relation. Several, including Bratbergsengen <ref> [4] </ref> and Nakayama, Kitsuregawa and Takagi [24], have reported that the hash-based variant of the nested loop method is the fastest possible for small multiples of the memory buffer size (typically up to four or five times).
Reference: [5] <author> C. Y. Chen, C. C. Chang, and R. C. T. Lee. </author> <title> Optimal MMI file systems for orthogonal range queries. </title> <journal> Information Systems, </journal> <volume> 18(1) </volume> <pages> 37-54, </pages> <year> 1993. </year>
Reference-contexts: Subsequently, it has been used for similar problems. For example, it was used independently by both Chen, Chang and Lee <ref> [5] </ref> and Harris and Ramamohanarao [11] for determining the optimal bit allocation for partial match range queries. The method of minimal marginal increase commences with no bits allocated to any of the attributes.
Reference: [6] <author> D. J. DeWitt, R. H. Katz, F. Olken, L. D. Shapiro, M. R. Stonebraker, and D. Wood. </author> <title> Implementation techniques for main memory database systems. </title> <editor> In B. Yormark, editor, </editor> <booktitle> Proceedings of the 1984 ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 1-8, </pages> <address> Boston, MA, USA, </address> <month> June </month> <year> 1984. </year> <month> 24 </month>
Reference-contexts: Mishra and Eich have surveyed join processing [22]. Several different join algorithms based on hashing have been proposed. The first was the GRACE hash join algorithm of Kitsuregawa, Tanaka and Moto-oka [16]. DeWitt et al. have described a hybrid-hash join algorithm <ref> [6] </ref>. Both of these algorithms were shown to perform better than the sort-merge join algorithm. Since these two papers a number of variations on these algorithms have been proposed, such as the superjoin of Thom, Ramamohanarao and Naish [32]. <p> These include the work by Kitsuregawa, Nakayama and Takagi [15, 24]. They show that their methods perform better than the hybrid-hash join of DeWitt, et al. <ref> [6] </ref> for skew distributions. Any of these methods may be used in place of the GRACE hash join strategy described above without affecting our method of determining the optimal bit allocation. Our method attempts to determine an optimal bit allocation for supporting the hash join method.
Reference: [7] <author> R. Fagin, J. Nievergelt, and H. R. </author> <title> Strong. Extendible hashing|a fast access method for dynamic files. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(3) </volume> <pages> 315-344, </pages> <month> September </month> <year> 1979. </year>
Reference-contexts: Primary key hashing schemes which may be used include the linear hashing schemes of Larson [17] and Litwin [18], the extendible hashing scheme of Fagin, Nievergelt and Strong <ref> [7] </ref>, the adaptive hashing of Hsiao and Tharp [12], and variations of both these schemes, such as those suggested by Ramamohanarao and Lloyd [20, 27]. A problem with MAH indexing occurs when attributes are correlated.
Reference: [8] <author> M. Freeston. </author> <title> Grid files for efficient Prolog clause access. </title> <editor> In P. M. D. Gray and R. J. Lucas, editors, </editor> <title> Prolog and Databases Implementations and Future Directions, </title> <booktitle> chapter 12, </booktitle> <pages> pages 188-211. </pages> <publisher> Ellis Horwood, </publisher> <year> 1988. </year>
Reference-contexts: Several other non-primary key methods of performing partial match queries have been studied. In addition to multi-attribute hashing, effective solutions include the grid file of Nievergelt, Hinterberger and Sevcik [25], the BANG file of Freeston <ref> [8] </ref>, the multidimensional binary search tree (k-d tree) of Bentley [2], the multilevel grid file of Whang and Krishnamurthy [33] and the k-d-B-tree of Robinson [30]. The technique we will describe can be applied to many of these schemes.
Reference: [9] <author> L. Harada, M. Nakano, M. Kitsuregawa, and M. Takagi. </author> <title> Query processing method for multi-attribute clustered relations. </title> <editor> In D. McLeod, R. Sacks-Davis, and H. Schek, editors, </editor> <booktitle> Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 59-70, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Additionally, it would also be compatible with join algorithms based on these structures, such as those of Harada, et al. <ref> [9] </ref>. 9.4 Data file reorganization Although we have shown, in Section 8, that an optimal bit allocation performs very well even after the query probabilities are changed by up to 80%, if the query distribution changes substantially, the data file should be reorganized to achieve the best performance.
Reference: [10] <author> E. P. Harris and K. Ramamohanarao. </author> <title> Storage of relations using optimal multi-attribute hash indexes. </title> <note> In preparation. </note>
Reference-contexts: Similarly, the union operation can use a partitioning phase to reduce the amount of work needed to eliminate duplicates because each duplicate attribute must be in the same partition. We have discussed these other operations in more detail in another paper <ref> [10] </ref>. 21 The technique of determining the best attribute to allocate bits to can also be used by other data structures.
Reference: [11] <author> E. P. Harris and K. Ramamohanarao. </author> <title> Optimal dynamic multi-attribute hashing for range queries. </title> <journal> BIT, </journal> <note> to appear. </note>
Reference-contexts: Subsequently, it has been used for similar problems. For example, it was used independently by both Chen, Chang and Lee [5] and Harris and Ramamohanarao <ref> [11] </ref> for determining the optimal bit allocation for partial match range queries. The method of minimal marginal increase commences with no bits allocated to any of the attributes. It works in d steps, where d is the number of bits in the hash key of the relation. <p> These include query optimization, by Ioannidis and Wong [14]; join query optimization, by Swami [31] and Ioannidis and Kang [13]; bit allocation for partial match range queries, by Harris and Ramamohanarao <ref> [11] </ref>; and bit allocation for partial match queries using multiple files, by Ramamohanarao, Shepherd and Sacks-Davis [28]. The method of simulated annealing works by performing T trials and returning the bit allo cation which results in the minimal value for the cost function from amongst these trials. <p> The first three sets of constants are the same as those used in the past by Ramamohanarao, Shepherd and Sacks-Davis [28] and Harris and Ramamohanarao <ref> [11] </ref>. In addition, a hybrid method, SEED, was tested.
Reference: [12] <author> Y. Hsiao and A. L. Tharp. </author> <title> Adaptive hashing. </title> <journal> Information Systems, </journal> <volume> 13(1) </volume> <pages> 111-127, </pages> <year> 1988. </year>
Reference-contexts: Primary key hashing schemes which may be used include the linear hashing schemes of Larson [17] and Litwin [18], the extendible hashing scheme of Fagin, Nievergelt and Strong [7], the adaptive hashing of Hsiao and Tharp <ref> [12] </ref>, and variations of both these schemes, such as those suggested by Ramamohanarao and Lloyd [20, 27]. A problem with MAH indexing occurs when attributes are correlated.
Reference: [13] <author> Y. E. Ioannidis and Y. C. Kang. </author> <title> Randomized algorithms for optimizing large join queries. </title> <editor> In H. Garcia-Molina and H. V. Jagadish, editors, </editor> <booktitle> Proceedings of the 1990 ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 312-321, </pages> <address> Atlantic City, NJ, USA, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: These include query optimization, by Ioannidis and Wong [14]; join query optimization, by Swami [31] and Ioannidis and Kang <ref> [13] </ref>; bit allocation for partial match range queries, by Harris and Ramamohanarao [11]; and bit allocation for partial match queries using multiple files, by Ramamohanarao, Shepherd and Sacks-Davis [28].
Reference: [14] <author> Y. E. Ioannidis and E. Wong. </author> <title> Query optimization by simulated annealing. </title> <editor> In U. Dayal and I. Traiger, editors, </editor> <booktitle> Proceedings of the 1987 ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 9-22, </pages> <address> San Francisco, California, USA, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: These include query optimization, by Ioannidis and Wong <ref> [14] </ref>; join query optimization, by Swami [31] and Ioannidis and Kang [13]; bit allocation for partial match range queries, by Harris and Ramamohanarao [11]; and bit allocation for partial match queries using multiple files, by Ramamohanarao, Shepherd and Sacks-Davis [28].
Reference: [15] <author> M. Kitsuregawa, M. Nakayama, and M. Takagi. </author> <title> The effect of bucket size tuning in the dynamic hybrid GRACE hash join method. </title> <editor> In P. M. G. Apers and G. Wiederhold, editors, </editor> <booktitle> Proceedings of the Fifteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 257-266, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: Since these two papers a number of variations on these algorithms have been proposed, such as the superjoin of Thom, Ramamohanarao and Naish [32]. Some of the problems of unequal bucket sizes have been addressed by Kitsuregawa, Nakayama 2 and Takagi <ref> [15, 24] </ref>. In this paper we use the GRACE hash join algorithm as our standard hash join algorithm, however the hybrid-hash join algorithm, or any of the other hash join algorithms, may equally be used on the resulting data files. <p> While most hash join methods assume that the distribution of records to buffers is even, and thus do not perform as well under a skew distribution, a couple of methods have been proposed which do not assume this. These include the work by Kitsuregawa, Nakayama and Takagi <ref> [15, 24] </ref>. They show that their methods perform better than the hybrid-hash join of DeWitt, et al. [6] for skew distributions. Any of these methods may be used in place of the GRACE hash join strategy described above without affecting our method of determining the optimal bit allocation.
Reference: [16] <author> M. Kitsuregawa, H. Tanaka, and T. Moto-oka. </author> <title> Application of hash to data base machine and its architecture. </title> <journal> New Generation Computing, </journal> <volume> 1(1) </volume> <pages> 66-74, </pages> <year> 1983. </year>
Reference-contexts: These are the nested loop, sort-merge and hash join algorithms. Mishra and Eich have surveyed join processing [22]. Several different join algorithms based on hashing have been proposed. The first was the GRACE hash join algorithm of Kitsuregawa, Tanaka and Moto-oka <ref> [16] </ref>. DeWitt et al. have described a hybrid-hash join algorithm [6]. Both of these algorithms were shown to perform better than the sort-merge join algorithm. Since these two papers a number of variations on these algorithms have been proposed, such as the superjoin of Thom, Ramamohanarao and Naish [32].
Reference: [17] <author> P. A. Larson. </author> <title> Linear hashing with partial expansions. </title> <booktitle> In Proceedings of the Sixth International Conference on Very Large Data Bases, </booktitle> <pages> pages 224-232, </pages> <address> Montreal, Canada, </address> <month> October </month> <year> 1980. </year>
Reference-contexts: Primary key hashing schemes which may be used include the linear hashing schemes of Larson <ref> [17] </ref> and Litwin [18], the extendible hashing scheme of Fagin, Nievergelt and Strong [7], the adaptive hashing of Hsiao and Tharp [12], and variations of both these schemes, such as those suggested by Ramamohanarao and Lloyd [20, 27]. A problem with MAH indexing occurs when attributes are correlated.
Reference: [18] <author> W. Litwin. </author> <title> Linear hashing: a new tool for file and table addressing. </title> <booktitle> In Proceedings of the Sixth International Conference on Very Large Data Bases, </booktitle> <pages> pages 212-223, </pages> <address> Montreal, Canada, </address> <month> October </month> <year> 1980. </year>
Reference-contexts: Primary key hashing schemes which may be used include the linear hashing schemes of Larson [17] and Litwin <ref> [18] </ref>, the extendible hashing scheme of Fagin, Nievergelt and Strong [7], the adaptive hashing of Hsiao and Tharp [12], and variations of both these schemes, such as those suggested by Ramamohanarao and Lloyd [20, 27]. A problem with MAH indexing occurs when attributes are correlated.
Reference: [19] <author> J. W. Lloyd. </author> <title> Optimal partial-match retrieval. </title> <journal> BIT, </journal> <volume> 20 </volume> <pages> 406-413, </pages> <year> 1980. </year>
Reference-contexts: 1 Introduction Much work has been done in constructing indexing schemes to cluster relations to increase the performance of partial match queries. The indexing technique we will consider is multi-attribute hash (MAH) indexing. Examples of this research include the work of Aho and Ullman [1], Lloyd <ref> [19] </ref>, Moran [23] and Ramamohanarao, Shepherd and Sacks-Davis [28]. MAH indexing has been used in preference to indexing schemes such as B-trees because these schemes are primary key indexing schemes and do not perform well when multiple, non-primary, keys are required in an operation.
Reference: [20] <author> J. W. Lloyd and K. Ramamohanarao. </author> <title> Partial-match retrieval for dynamic files. </title> <journal> BIT, </journal> <volume> 22 </volume> <pages> 150-168, </pages> <year> 1982. </year>
Reference-contexts: If the file is required to be dynamic, the bits from each attribute are usually interleaved so that the optimal performance is achieved for each file size. This has been discussed by Lloyd and Ramamohanarao <ref> [20, 27] </ref>. An advantage of the multi-attribute hash indexing scheme is that it is based upon a dynamic data structure whose maintenance costs are the same as that of the primary key hashing algorithm upon which it is based. <p> key hashing schemes which may be used include the linear hashing schemes of Larson [17] and Litwin [18], the extendible hashing scheme of Fagin, Nievergelt and Strong [7], the adaptive hashing of Hsiao and Tharp [12], and variations of both these schemes, such as those suggested by Ramamohanarao and Lloyd <ref> [20, 27] </ref>. A problem with MAH indexing occurs when attributes are correlated. If bits are used from the bit strings correlated attributes to form the hash key for records, bits in the hash key will be correlated. All bits composing the hash key should be independent. <p> If all joins are based on one attribute only this method is identical to PROB1. Thus, the result of this method will be the optimal allocation if the conditions of Theorem 1 are satisfied. 6.2 Minimal marginal increase Minimal marginal increase (MMI) was used successfully by Lloyd and Ramamohanarao <ref> [20] </ref> to determine the optimal bit allocation for partial match queries when the attributes are not independent. Subsequently, it has been used for similar problems. <p> This process can be extended to include multiple relations or multiple files. At each step the bit is added to the attribute across all relations or files which minimizes the value of the cost function. Previous results using the MMI algorithm has been mixed. Lloyd and Ramamohanarao <ref> [20] </ref> showed that in their domain that MMI would find the optimal solution if the probabilities were independent, and would give very good, usually optimal, solutions for arbitrary probabilities.
Reference: [21] <author> L. W. McVoy and S. R. Kleiman. </author> <title> Extent-like performance from a UNIX file system. </title> <booktitle> In Proceedings of the USENIX 1991 Winter Conference, </booktitle> <pages> pages 33-43, </pages> <address> Dallas, Texas, USA, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: The experiments were performed on an unloaded Sun Sparc2 IPX with 28 Mbyte of main memory. Elapsed time was recorded. The disk page size used was 56 kbyte because the Sun extent-based file system uses this as the unit of transfer to the disk <ref> [21] </ref>. The size of each file was 28 Mbyte, so d was 9, and 64 pages (3.5 Mbyte) of main memory were used. Table 1 shows the results for both relations.
Reference: [22] <author> P. Mishra and M. H. Eich. </author> <title> Join processing in relational databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(1) </volume> <pages> 63-113, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Three classes of join algorithm have been described and analysed in the literature. These are the nested loop, sort-merge and hash join algorithms. Mishra and Eich have surveyed join processing <ref> [22] </ref>. Several different join algorithms based on hashing have been proposed. The first was the GRACE hash join algorithm of Kitsuregawa, Tanaka and Moto-oka [16]. DeWitt et al. have described a hybrid-hash join algorithm [6]. Both of these algorithms were shown to perform better than the sort-merge join algorithm.
Reference: [23] <author> S. Moran. </author> <title> On the complexity of designing optimal partial-match retrieval systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(4) </volume> <pages> 543-551, </pages> <month> December </month> <year> 1983. </year> <month> 25 </month>
Reference-contexts: 1 Introduction Much work has been done in constructing indexing schemes to cluster relations to increase the performance of partial match queries. The indexing technique we will consider is multi-attribute hash (MAH) indexing. Examples of this research include the work of Aho and Ullman [1], Lloyd [19], Moran <ref> [23] </ref> and Ramamohanarao, Shepherd and Sacks-Davis [28]. MAH indexing has been used in preference to indexing schemes such as B-trees because these schemes are primary key indexing schemes and do not perform well when multiple, non-primary, keys are required in an operation.
Reference: [24] <author> M. Nakayama, M. Kitsuregawa, and M. Takagi. </author> <title> Hash-partitioned join method using dynamic destaging strategy. </title> <editor> In F. Bancilhon and D. J. DeWitt, editors, </editor> <booktitle> Proceedings of the Fifteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 468-478, </pages> <address> Los Angeles, CA, USA, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Since these two papers a number of variations on these algorithms have been proposed, such as the superjoin of Thom, Ramamohanarao and Naish [32]. Some of the problems of unequal bucket sizes have been addressed by Kitsuregawa, Nakayama 2 and Takagi <ref> [15, 24] </ref>. In this paper we use the GRACE hash join algorithm as our standard hash join algorithm, however the hybrid-hash join algorithm, or any of the other hash join algorithms, may equally be used on the resulting data files. <p> While most hash join methods assume that the distribution of records to buffers is even, and thus do not perform as well under a skew distribution, a couple of methods have been proposed which do not assume this. These include the work by Kitsuregawa, Nakayama and Takagi <ref> [15, 24] </ref>. They show that their methods perform better than the hybrid-hash join of DeWitt, et al. [6] for skew distributions. Any of these methods may be used in place of the GRACE hash join strategy described above without affecting our method of determining the optimal bit allocation. <p> This results in the cost of the partitioning phase being zero. This does not preclude using any other join method which may be faster than the nested loop for the data in each prepartitioned relation. Several, including Bratbergsengen [4] and Nakayama, Kitsuregawa and Takagi <ref> [24] </ref>, have reported that the hash-based variant of the nested loop method is the fastest possible for small multiples of the memory buffer size (typically up to four or five times).
Reference: [25] <author> J. Nievergelt, H. Hinterberger, and K. C. Sevcik. </author> <title> The grid file: An adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: Several other non-primary key methods of performing partial match queries have been studied. In addition to multi-attribute hashing, effective solutions include the grid file of Nievergelt, Hinterberger and Sevcik <ref> [25] </ref>, the BANG file of Freeston [8], the multidimensional binary search tree (k-d tree) of Bentley [2], the multilevel grid file of Whang and Krishnamurthy [33] and the k-d-B-tree of Robinson [30]. The technique we will describe can be applied to many of these schemes. <p> The partitioned join is applied to a multidimensional data structure not unlike a multilevel version of the grid file of Nievergelt, Hinterberger and Sevcik <ref> [25] </ref>. The superjoin is applied to a multikey hash file. While similar to our approach, neither of these two methods attempt to optimize the performance of the average join query. <p> This is the simplest method and does not depend on the query probability distribution. It is also the standard method suggested, and used, to divide a data space between attributes for many different data structures. These include the grid file of Nievergelt, Hinterberger and Sevcik <ref> [25] </ref>, and the multidimensional binary search trees (k-d tree) of Bentley [2, 3], in addition to files with multi-attribute hash indexes. * HIGH: All bits in the hash key are allocated to the attribute with the highest probability of appearing in a join operation. <p> For example, the optimal dimension to split on by the multidimensional binary search tree of Bentley [2, 3], or the grid file of Nievergelt, Hinterberger and Sevcik <ref> [25] </ref> could be determined in a similar way, once the cost functions are modified to reflect the cost of using these data structures.
Reference: [26] <author> E. A. Ozkarahan and M. Ouksel. </author> <title> Dynamic and order preserving data partitioning for database machines. </title> <booktitle> In Proceedings of the Eleventh International Conference on Very Large Data Bases, </booktitle> <pages> pages 358-368, </pages> <address> Stockholm, Sweden, </address> <year> 1985. </year>
Reference-contexts: The process of using a data structure to partition the data producing a more efficient join algorithm is a feature of the partitioned join described by Ozkarahan and Ouksel <ref> [26] </ref> and the superjoin described by Thom, Ramamohanarao and Naish [32]. The partitioned join is applied to a multidimensional data structure not unlike a multilevel version of the grid file of Nievergelt, Hinterberger and Sevcik [25]. The superjoin is applied to a multikey hash file.
Reference: [27] <author> K. Ramamohanarao and J. W. Lloyd. </author> <title> Dynamic hashing schemes. </title> <journal> The Computer Journal, </journal> <volume> 25 </volume> <pages> 478-485, </pages> <year> 1982. </year>
Reference-contexts: This important property is easily met by a MAH indexing scheme. It has excellent dynamic properties, as described by Ramamohanarao and Lloyd <ref> [27] </ref>. As the cost of mass storage devices decreases, it is becoming feasible to store multiple copies of data, each with a different clustering organization. We will show that multiple copies of a data file can be used to increase the performance of the average join operation. <p> If the file is required to be dynamic, the bits from each attribute are usually interleaved so that the optimal performance is achieved for each file size. This has been discussed by Lloyd and Ramamohanarao <ref> [20, 27] </ref>. An advantage of the multi-attribute hash indexing scheme is that it is based upon a dynamic data structure whose maintenance costs are the same as that of the primary key hashing algorithm upon which it is based. <p> key hashing schemes which may be used include the linear hashing schemes of Larson [17] and Litwin [18], the extendible hashing scheme of Fagin, Nievergelt and Strong [7], the adaptive hashing of Hsiao and Tharp [12], and variations of both these schemes, such as those suggested by Ramamohanarao and Lloyd <ref> [20, 27] </ref>. A problem with MAH indexing occurs when attributes are correlated. If bits are used from the bit strings correlated attributes to form the hash key for records, bits in the hash key will be correlated. All bits composing the hash key should be independent.
Reference: [28] <author> K. Ramamohanarao, J. Shepherd, and R. Sacks-Davis. </author> <title> Multi-attribute hashing with multiple file copies for high performance partial-match retrieval. </title> <journal> BIT, </journal> <volume> 30 </volume> <pages> 404-423, </pages> <year> 1990. </year>
Reference-contexts: The indexing technique we will consider is multi-attribute hash (MAH) indexing. Examples of this research include the work of Aho and Ullman [1], Lloyd [19], Moran [23] and Ramamohanarao, Shepherd and Sacks-Davis <ref> [28] </ref>. MAH indexing has been used in preference to indexing schemes such as B-trees because these schemes are primary key indexing schemes and do not perform well when multiple, non-primary, keys are required in an operation. Several other non-primary key methods of performing partial match queries have been studied. <p> We will show that multiple copies of a data file can be used to increase the performance of the average join operation. This is similar to the use of multiple files to improve the performance of partial match retrieval presented by Ramamohanarao, Shepherd and Sacks-Davis <ref> [28] </ref>. In the next section we briefly describe multi-attribute hashing. In Section 3 we describe the join operation and the hash join algorithm. In Section 4 we analyse the cost of the partition phase of the hash join algorithm. <p> In other domains, such as determining the optimal bit allocation for partial match queries using multiple files of Ramamohanarao, Shepherd and Sacks-Davis <ref> [28] </ref>, MMI has not found near-optimal solutions. 6.3 Simulated annealing Simulated annealing (SA) has been used in, or examined for use in, a number of similar problem domains. <p> These include query optimization, by Ioannidis and Wong [14]; join query optimization, by Swami [31] and Ioannidis and Kang [13]; bit allocation for partial match range queries, by Harris and Ramamohanarao [11]; and bit allocation for partial match queries using multiple files, by Ramamohanarao, Shepherd and Sacks-Davis <ref> [28] </ref>. The method of simulated annealing works by performing T trials and returning the bit allo cation which results in the minimal value for the cost function from amongst these trials. Each 10 trial operates as follows. <p> The first three sets of constants are the same as those used in the past by Ramamohanarao, Shepherd and Sacks-Davis <ref> [28] </ref> and Harris and Ramamohanarao [11]. In addition, a hybrid method, SEED, was tested.
Reference: [29] <author> R. L. Rivest. </author> <title> Partial-match retrieval algorithms. </title> <journal> SIAM Journal on Computing, </journal> <volume> 5(1) </volume> <pages> 19-50, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: An attribute is a field which may be specified in a query. One method used to index the records in a hash file is multi-attribute hash indexing, as described by Rivest <ref> [29] </ref>. In multi-attribute hashing a single hash key is calculated for each record in a data file from a number of attributes.
Reference: [30] <author> J. T. Robinson. </author> <title> The k-d-B-tree: a search structure for large multidimensional dynamic indexes. </title> <booktitle> In Proceedings of the SIGMOD Conference, </booktitle> <pages> pages 10-18, </pages> <address> Ann Arbor, MI, USA, </address> <month> April </month> <year> 1981. </year>
Reference-contexts: In addition to multi-attribute hashing, effective solutions include the grid file of Nievergelt, Hinterberger and Sevcik [25], the BANG file of Freeston [8], the multidimensional binary search tree (k-d tree) of Bentley [2], the multilevel grid file of Whang and Krishnamurthy [33] and the k-d-B-tree of Robinson <ref> [30] </ref>. The technique we will describe can be applied to many of these schemes. Only a small number of the retrieval based operations of a database will only be partial match queries. Other common operations include projection, join, division, intersection, union and difference.
Reference: [31] <author> A. Swami. </author> <title> Optimization of large join queries: combining heuristic and combinatorial techniques. </title> <editor> In J. Clifford, B. Lindsay, and D. Maier, editors, </editor> <booktitle> Proceedings of the 1989 ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 367-376, </pages> <address> Portland, Oregon, USA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: These include query optimization, by Ioannidis and Wong [14]; join query optimization, by Swami <ref> [31] </ref> and Ioannidis and Kang [13]; bit allocation for partial match range queries, by Harris and Ramamohanarao [11]; and bit allocation for partial match queries using multiple files, by Ramamohanarao, Shepherd and Sacks-Davis [28].
Reference: [32] <author> J. A. Thom, K. Ramamohanarao, and L. Naish. </author> <title> A superjoin algorithm for deductive databases. </title> <editor> In Y. Kambayashi, editor, </editor> <booktitle> Proceedings of the Twelfth International Conference on Very Large Data Bases, </booktitle> <pages> pages 189-196, </pages> <address> Kyoto, Japan, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: DeWitt et al. have described a hybrid-hash join algorithm [6]. Both of these algorithms were shown to perform better than the sort-merge join algorithm. Since these two papers a number of variations on these algorithms have been proposed, such as the superjoin of Thom, Ramamohanarao and Naish <ref> [32] </ref>. Some of the problems of unequal bucket sizes have been addressed by Kitsuregawa, Nakayama 2 and Takagi [15, 24]. <p> The process of using a data structure to partition the data producing a more efficient join algorithm is a feature of the partitioned join described by Ozkarahan and Ouksel [26] and the superjoin described by Thom, Ramamohanarao and Naish <ref> [32] </ref>. The partitioned join is applied to a multidimensional data structure not unlike a multilevel version of the grid file of Nievergelt, Hinterberger and Sevcik [25]. The superjoin is applied to a multikey hash file.
Reference: [33] <author> K.-Y. Whang and R. Krishnamurthy. </author> <title> The multilevel grid file | a dynamic hierarchical multidimensional file structure. </title> <booktitle> In International Symposium on Database Systems for Advanced Applications, </booktitle> <pages> pages 449-459, </pages> <address> Tokyo, Japan, </address> <month> April </month> <year> 1991. </year> <month> 26 </month>
Reference-contexts: In addition to multi-attribute hashing, effective solutions include the grid file of Nievergelt, Hinterberger and Sevcik [25], the BANG file of Freeston [8], the multidimensional binary search tree (k-d tree) of Bentley [2], the multilevel grid file of Whang and Krishnamurthy <ref> [33] </ref> and the k-d-B-tree of Robinson [30]. The technique we will describe can be applied to many of these schemes. Only a small number of the retrieval based operations of a database will only be partial match queries. Other common operations include projection, join, division, intersection, union and difference.
References-found: 33

