URL: http://www.eecs.umich.edu/~zaher/rtas98.ps
Refering-URL: http://www.eecs.umich.edu/RTCL/adaptware/
Root-URL: http://www.cs.umich.edu
Email: fzaher, kgshing@eecs.umich.edu  
Title: End-host Architecture for QoS-Adaptive Communication  
Author: Tarek Abdelzaher and Kang G. Shin 
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: The proliferation of communication-intensive real-time applications with "elastic" real-time constraints, such as streaming stored video, and the advent of differential services over the Internet require a new design for end-host communication subsystems. The design should (i) provide per-flow or per-service-class guarantees on the end-host, (ii) maximize the aggregate utility (or revenue) of the end-host's communication service across all clients, (iii) gracefully adapt to transient overload and resource shortage, and (iv) not starve lower-priority service classes during the period of sustained overload. This paper presents a new architecture for QoS-adaptive end-host communication subsystems in order to meet the above-stated goals. This architecture differs from others in that it provides generic end-host communication subsystem support for QoS-adaptive communication, as opposed to devising QoS adaptation for a particular type of real-time applications. Our architecture provides each client its contracted QoS, while adapting gracefully to transient overload and resource shortage. This is done by allowing clients to specify multiple acceptable levels of service (QoS levels for short), and express their relative desirability by assigning them the corresponding "rewards." The client-specified QoS levels express a nominal mode of operation as well as degraded modes. Rewards may be tied to certain application-level performance measures, or may represent actual monetary payment for receiving service at the corresponding QoS level. Specifying multiple acceptable QoS levels for each client allows the server to predictably degrade client's QoS under transient overload or resource shortage. This, in turn, leads to a more flexible, yet predictable QoS contract between the server and clients. The proposed architecture is geared primarily towards soft real-time applications, but, in the presence of resource-reservation support, it can provide hard real-time guarantees. We implemented the architecture on a network of Pentium-based PCs each running under OG MK7.2. The evaluation results demonstrate the capability of our communication subsystem in meeting its design goals. The work reported in this paper was supported in part by the Office of Naval Research under Grant No. N00014-94-1-0229 and the National Science Foundation under grant No. MIP-9203895. Any opinions, findings, and conclusions or recommendations expressed in this publication are those of the authors and do not necessarily reflect the view of the funding agencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 5, no. 10, </volume> <pages> pp. 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Real-time communication protocols such as RTP [3], can be used with our scheme to help clients adapt application-level performance to network delays. RSVP [4], or real-time channels <ref> [1, 2] </ref> can be used to reserve host and network bandwidth, when applicable. Unlike "hard real-time" communication architectures [19], our design makes no assumptions about the existence of resource-reservation support both on the end-host OS and in the network, although it can make use of such support if available. <p> Let there be n ANAs considered by the load control module (including any newly-arrived ANA-creation request). Let the QoS contract Q i of ANA i , have m i QoS levels, denoted by L i <ref> [1] </ref>; :::; L i [m i ], let their rewards be R i [1]; :::; R i [m i ], respectively, and let the QoS violation penalty be V i . <p> Let there be n ANAs considered by the load control module (including any newly-arrived ANA-creation request). Let the QoS contract Q i of ANA i , have m i QoS levels, denoted by L i <ref> [1] </ref>; :::; L i [m i ], let their rewards be R i [1]; :::; R i [m i ], respectively, and let the QoS violation penalty be V i .
Reference: [2] <author> A. Banerjea, D. Ferrari, B. Mah, M. Moran, D. Verma, and H. Zhang, </author> <title> "The tenet real-time protocol suite: Design, implementation, and experiences," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 4, no. 1, </volume> <pages> pp. 1-10, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Real-time communication protocols such as RTP [3], can be used with our scheme to help clients adapt application-level performance to network delays. RSVP [4], or real-time channels <ref> [1, 2] </ref> can be used to reserve host and network bandwidth, when applicable. Unlike "hard real-time" communication architectures [19], our design makes no assumptions about the existence of resource-reservation support both on the end-host OS and in the network, although it can make use of such support if available.
Reference: [3] <author> H. Schulzrinne, "RTP: </author> <title> The real-time transport protocol," in MCNC 2nd Packet Video Workshop, </title> <type> volume 2, </type> <institution> Research Triangle Park, North Carolina, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: By contrast, we present a generic communication subsystem architecture for end-hosts that is capable of providing hard guarantees if the OS and network support resource reservation, yet is flexible enough to adapt to variations in resource capacity when no reservation support is present. Real-time communication protocols such as RTP <ref> [3] </ref>, can be used with our scheme to help clients adapt application-level performance to network delays. RSVP [4], or real-time channels [1, 2] can be used to reserve host and network bandwidth, when applicable.
Reference: [4] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zappala, "RSVP: </author> <title> A new resource reservation protocol," </title> <journal> IEEE Network, </journal> <month> September </month> <year> 1993. </year>
Reference-contexts: Real-time communication protocols such as RTP [3], can be used with our scheme to help clients adapt application-level performance to network delays. RSVP <ref> [4] </ref>, or real-time channels [1, 2] can be used to reserve host and network bandwidth, when applicable.
Reference: [5] <author> H. Schulzrinne, </author> <title> "A comprehensive multimedia control architecture for the Internet," </title> <booktitle> in NOSSDAV, </booktitle> <address> St. Louis, Missouri, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: We present the design and implementation of a resource-management mechanism that enforces the proposed notion of QoS contract. Our work is complementary to the research on real-time communication protocols [1-4], network support for QoS <ref> [5, 6] </ref>, and real-time operating system support [7-10]. We focus on the communication subsystem within an end-host, and develop an end-host communication resource-management architecture for QoS guarantees that is independent of the particular communication protocol stack or specifics of the client application.
Reference: [6] <author> L. Georgiadis, R. Guerin, V. Peris, and R. Rajan, </author> <title> "Efficient support of delay and rate guarantees 23 in an Internet," </title> <booktitle> in ACM SIGCOMM, </booktitle> <address> Stanford, California, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: We present the design and implementation of a resource-management mechanism that enforces the proposed notion of QoS contract. Our work is complementary to the research on real-time communication protocols [1-4], network support for QoS <ref> [5, 6] </ref>, and real-time operating system support [7-10]. We focus on the communication subsystem within an end-host, and develop an end-host communication resource-management architecture for QoS guarantees that is independent of the particular communication protocol stack or specifics of the client application.
Reference: [7] <author> C. Mercer, S. Savage, and H. Tokuda, </author> <title> "Processor capacity reserves: Operating system support for multimedia applications," </title> <booktitle> in Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <pages> pp. 90-99, </pages> <month> May </month> <year> 1994. </year>
Reference: [8] <author> C. Lee, K. Yoshida, C. Mercer, and R. Rajkumar, </author> <title> "Predictable communication protocol processing in real-time Mach"," </title> <booktitle> in Proceedings of the Real-time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1996. </year>
Reference: [9] <author> R. Rajkumar, K. Juvva, A. Molano, and S. Oikawa, </author> <title> "Resource kernels: A resource-centric approach to real-time systems," </title> <booktitle> in Proceedings of the SPIE/ACM Conference on Multimedia Computing and Networking, </booktitle> <month> January </month> <year> 1998. </year>
Reference: [10] <author> M. Jones, D. Rosu, and M.-C. Rosu, </author> <title> "CPU reservations and time constraints: Efficient, predictable scheduling of independent activities," </title> <booktitle> in 16th ACM Symposium on Operating Systems Principles, </booktitle> <address> Saint-Malo, France, </address> <month> October </month> <year> 1997. </year>
Reference: [11] <author> A. Cambell, G. Coulson, and D. Hutchison, </author> <title> "A quality of service architecture," </title> <journal> ACM Computer Communications Review, </journal> <month> April </month> <year> 1994. </year>
Reference-contexts: We focus on the communication subsystem within an end-host, and develop an end-host communication resource-management architecture for QoS guarantees that is independent of the particular communication protocol stack or specifics of the client application. Different communication architectures have been proposed to support QoS guarantees. Examples include the QoS-A framework <ref> [11] </ref>, the Heidelberg QoS model [12], V-net [13], NetWorld [14], COMETS' Extended Integrated Reference Model (XRM) [15], the OMEGA end-point architecture [16], and the QoS Broker [17]. A good survey of these and other communication architectures can be found in [18]. Such architectures are designed specifically for multimedia applications.
Reference: [12] <author> C. Volg, L. Wolf, R. Herrwich, and H. Wittig, </author> <title> "HeiRAT quality of service management for distibuted multimedia systems," </title> <journal> Multimedia Systems Journal, </journal> <year> 1996. </year>
Reference-contexts: Different communication architectures have been proposed to support QoS guarantees. Examples include the QoS-A framework [11], the Heidelberg QoS model <ref> [12] </ref>, V-net [13], NetWorld [14], COMETS' Extended Integrated Reference Model (XRM) [15], the OMEGA end-point architecture [16], and the QoS Broker [17]. A good survey of these and other communication architectures can be found in [18]. Such architectures are designed specifically for multimedia applications.
Reference: [13] <author> B. Field, T. Znati, and D. Mosse, "V-net: </author> <title> A framework for a versatile network architecture to support real-time communication performance guarantees," </title> <booktitle> in InfoComm, </booktitle> <year> 1995. </year>
Reference-contexts: Different communication architectures have been proposed to support QoS guarantees. Examples include the QoS-A framework [11], the Heidelberg QoS model [12], V-net <ref> [13] </ref>, NetWorld [14], COMETS' Extended Integrated Reference Model (XRM) [15], the OMEGA end-point architecture [16], and the QoS Broker [17]. A good survey of these and other communication architectures can be found in [18]. Such architectures are designed specifically for multimedia applications.
Reference: [14] <author> D. Chen, R. Colwell, H. Gelman, P. K. Chrysanthis, and D. Mosse, </author> <title> "A framework for experimenting with QoS for multimedia services," </title> <booktitle> in International Conference on Multimedia Computing and Networking, </booktitle> <year> 1996. </year>
Reference-contexts: Different communication architectures have been proposed to support QoS guarantees. Examples include the QoS-A framework [11], the Heidelberg QoS model [12], V-net [13], NetWorld <ref> [14] </ref>, COMETS' Extended Integrated Reference Model (XRM) [15], the OMEGA end-point architecture [16], and the QoS Broker [17]. A good survey of these and other communication architectures can be found in [18]. Such architectures are designed specifically for multimedia applications.
Reference: [15] <author> A. Lazar, S. Bhonsle, and K. Lim, </author> <title> "A binding architecture for multimedia networks," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 30, </volume> <pages> pp. 204-216, </pages> <month> Nevember </month> <year> 1995. </year>
Reference-contexts: Different communication architectures have been proposed to support QoS guarantees. Examples include the QoS-A framework [11], the Heidelberg QoS model [12], V-net [13], NetWorld [14], COMETS' Extended Integrated Reference Model (XRM) <ref> [15] </ref>, the OMEGA end-point architecture [16], and the QoS Broker [17]. A good survey of these and other communication architectures can be found in [18]. Such architectures are designed specifically for multimedia applications.
Reference: [16] <author> K. Nahrstedt and J. Smith, </author> <title> "Design, imlementation, and experiences with the OMEGA end-point architecture," </title> <journal> IEEE JSAC, </journal> <month> September </month> <year> 1996. </year>
Reference-contexts: Different communication architectures have been proposed to support QoS guarantees. Examples include the QoS-A framework [11], the Heidelberg QoS model [12], V-net [13], NetWorld [14], COMETS' Extended Integrated Reference Model (XRM) [15], the OMEGA end-point architecture <ref> [16] </ref>, and the QoS Broker [17]. A good survey of these and other communication architectures can be found in [18]. Such architectures are designed specifically for multimedia applications.
Reference: [17] <author> K. Nahrstedt and J. Smith, </author> <title> "The QoS broker," </title> <journal> IEEE Multimedia, </journal> <volume> vol. 2, no. 1, </volume> <pages> pp. 53-67, </pages> <year> 1995. </year>
Reference-contexts: Different communication architectures have been proposed to support QoS guarantees. Examples include the QoS-A framework [11], the Heidelberg QoS model [12], V-net [13], NetWorld [14], COMETS' Extended Integrated Reference Model (XRM) [15], the OMEGA end-point architecture [16], and the QoS Broker <ref> [17] </ref>. A good survey of these and other communication architectures can be found in [18]. Such architectures are designed specifically for multimedia applications.
Reference: [18] <author> C. Aurrecoechea, A. Cambell, and L. Hauw, </author> <title> "A survey of QoS architectures," </title> <booktitle> in 4th IFIP International Conference on Quality of Service, </booktitle> <address> Paris, France, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Examples include the QoS-A framework [11], the Heidelberg QoS model [12], V-net [13], NetWorld [14], COMETS' Extended Integrated Reference Model (XRM) [15], the OMEGA end-point architecture [16], and the QoS Broker [17]. A good survey of these and other communication architectures can be found in <ref> [18] </ref>. Such architectures are designed specifically for multimedia applications.
Reference: [19] <author> A. Mehra, A. Indiresan, and K. G. Shin, </author> <title> "Structuring communication for quality of service guarantees," </title> <booktitle> in IEEE Real-Time Systems Symposium, </booktitle> <pages> pp. 144-154, </pages> <address> Washington, DC, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: Real-time communication protocols such as RTP [3], can be used with our scheme to help clients adapt application-level performance to network delays. RSVP [4], or real-time channels [1, 2] can be used to reserve host and network bandwidth, when applicable. Unlike "hard real-time" communication architectures <ref> [19] </ref>, our design makes no assumptions about the existence of resource-reservation support both on the end-host OS and in the network, although it can make use of such support if available. <p> While the latter requirement is satisfied by adequate memory allocation, the former is an end-host scheduling requirement. A proper scheduling mechanism must thus be implemented to ensure QoS contract enforcement. A thread-per-connection model has been suggested for communication subsystem design in <ref> [19] </ref>. The model facilitates per-connection policing to prevent misbehaving communication clients from violating their traffic specification, and makes it possible to assign thread priorities to ensure the required QoS on a per-connection basis. We extend this model to ANAs, offering a thread-per-ANA architecture.
Reference: [20] <author> T. F. Abdelzaher, E. M. Atkins, and K. G. Shin, </author> <title> "QoS negotiation in real-time systems and its application to automated flight control," </title> <booktitle> in IEEE Real-Time Technology and Applications Symposium, </booktitle> <address> Montreal, Canada, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: In other applications the reward of a QoS level may represent the achieved value of some physical measure for the client, and the rebate is the client-perceived cost of QoS violation. An example of how rewards and penalties can be set in such a case is described in <ref> [20] </ref>. Either way, the resource-management mechanism for enforcing clients' QoS contracts and maximizing the aggregate reward remains the same. Hence we design an end-host communication subsystem to meet the following goals. * Provide per-flow or per-service-class guarantees on the end-host. <p> QoS-level and reward specification for applications that deal with an external physical environment, as opposed to a human user, should be done based an objective performance measure. For example, in <ref> [20] </ref> we illustrated a case where QoS levels and rewards were specified by an AI agent representing an application domain expert for an automated flight application to minimize mission failure probability.
Reference: [21] <author> V. G. Kulkarni and N. Gautam, </author> <title> "Leaky buckets : Sizing and admission control," </title> <booktitle> in Proceedings of the 35th IEEE Conference on Decision and Control, </booktitle> <address> Kobe, Japan, </address> <year> 1996. </year>
Reference-contexts: Finally, the general architecture of the communication subsystem is highlighted in Section 2.4. 2.1 QoS Levels and Communication-Capacity Reserves In order to provide a predictable communication service, the amount of communication traffic generated at the source must be bounded. The leaky bucket model <ref> [21] </ref> has been commonly used to control input traffic. Thus, at the communication subsystem level, each QoS level may be represented by a leaky-bucket-like traffic specification of different size and rate. From a resource management view-point, the abstraction is somewhat similar to a resource-capacity reserve.
Reference: [22] <author> A. Mehra, A. Indiresan, and K. G. Shin, </author> <title> "Resource management for real-time communication: Making theory meet practice," </title> <booktitle> in 2nd IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1996. </year> <month> 24 </month>
Reference-contexts: The cost is not proportional to the number of bytes transmitted due to cache effects, packetization, and depacketization overheads. An accurate expression of f c (x) is given in <ref> [22] </ref>. The processor utilization requested by a QoS level L i [k] is: U i [k] = E i [k]=P i [k]: (3.2) This utilization must be less than U server for the QoS to be feasible.
References-found: 22

