URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1995/TR18.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: -law, yagel-@cis.ohio-state.edu  
Title: A LA-COMA Implementation of Parallel Volume Rendering  
Author: Asish Law and Roni Yagel 
Address: Columbus, Ohio  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Object dataow is a popular approach often used for parallel rendering. The scene is statically distributed among processors and objects are fetched and cached only on demand. Most previous object dataow methods were implemented on shared memory architectures, and exploit image/object space coherency to reduce cache misses. In this paper, we propose an efficient object dataow incremental rotation system on distributed memory machines. It uses a distributed-directory scheme to trace the location of objects at other nodes. The objects migrate and replicate at different processors as in Cache-Only Memory Architectures (COMA). During the animation process, the processors predict and prefetch the data that will be needed for subsequent frame generations, thus employing a look-ahead (LA) data acquisition to hide the latency of communication. Load balancing, minimizing network congestion, and optimal algorithm embedding are some of the other issues considered in the design process. The results on the Cray T3D show good load balancing and significant speedup. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Badouel, D., K. Bouatouch, T. Priol. </author> <title> Ray Tracing on Distributed Memory Parallel Computers: Strategies for Distributing Computations and Data. </title> <booktitle> SIGGRAPH 90 Parallel Algorithms and Architecture for 3D Image Generation Course Notes. </booktitle> <pages> pp. 185-198. </pages>
Reference: 2. <author> Burkhardt III, H., S. Frank, B. Knobe, and J. Rothnie. </author> <title> Overview of the KSR1 Computer System. </title> <type> Technical Report KSR-TR-9202001, </type> <institution> Kendall Square Research, </institution> <address> Boston, </address> <month> February </month> <year> 1992. </year> <month> 25 </month>
Reference-contexts: The state of a block is either exclusive in exactly one node or shared in several nodes. The directories only contain state information to reduce memory overhead, data are not stored. Such hierarchical directory organization can be found in machines like the Kendall Square Research KSR-1 <ref> [2] </ref> and Swedish Institute of Computer Sciences DDM machine [6]. In another organization of the distributed directories, Stenstrom et al [14] proposed a COMA-F architecture (at COMA), which does not use hierarchical directory-based cache coherency protocol.
Reference: 3. <author> Cleary, J.G., B. Wyvill, G.M. Birtwistle, R. Vatti. </author> <title> Multiprocessor Ray Tracing. </title> <type> Research Report 83/128/17, </type> <institution> University of Calgary, </institution> <month> October </month> <year> 1983. </year>
Reference: 4. <author> Dippe, M., and J. Swensen. </author> <title> An Adaptive Subdivision Algorithm and Parallel Architecture for Realistic Image Synthesis. </title> <booktitle> Computer Graphics 18(3), </booktitle> <year> 1984. </year> <pages> pp. 149-158. </pages>
Reference: 5. <author> Green, S.A. and D.J.Paddon. </author> <title> Exploiting Coherence for Multiprocessor Ray Tracing. </title> <journal> IEEE Com puter Graphics & Applications, </journal> <month> November </month> <year> 1989, </year> <pages> pp. 12-26. </pages>
Reference-contexts: The results shown in Figure 8 are for a fixed MRA irrespective of the number of processors. 8. Discussion Object dataow approaches are known to take advantage of object space coherency to reduce the num ber of misses <ref> [5] </ref>. This helps to reduce the amount of communication between processors compared with ray dataow approaches. The hit ratio can further be increased if frame-to-frame coherence is also (a) (b) FIGURE 8. (a) Average time taken for rendering, per phase of rotation, on different number of processors.
Reference: 6. <author> Hagersten, E., S. Haridi, and D.H.D. Warren. </author> <title> The Cache-Coherence Protocol of the Data Diffusion Machine. </title> <editor> Michel Dubois and Shreekant Thakkar, editors, </editor> <title> Cache and Interconnect Architec tures in Multiprocessors. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year>
Reference-contexts: The directories only contain state information to reduce memory overhead, data are not stored. Such hierarchical directory organization can be found in machines like the Kendall Square Research KSR-1 [2] and Swedish Institute of Computer Sciences DDM machine <ref> [6] </ref>. In another organization of the distributed directories, Stenstrom et al [14] proposed a COMA-F architecture (at COMA), which does not use hierarchical directory-based cache coherency protocol.
Reference: 7. <author> Joe, T., J.L. Hennessy. </author> <title> Evaluating the Memory Overhead Required for COMA Architectures. </title> <booktitle> IEEE Computer, </booktitle> <month> September </month> <year> 1994, </year> <pages> pp. 82-93. </pages>
Reference-contexts: Furthermore, it incurs some additional storage and computational overhead to place the requested cells in buckets, both at the requesting node and at the directory node. Some of the storage overheads are similar to the memory overhead required for COMA architectures <ref> [7] </ref>. The extra start-up helps to reduce network congestion. In a 2-hop request system, data is statically distributed, and each request will be handled by the owning processor.
Reference: 8. <author> Kobayashi, H., H. Kubota, S. Horiguchi, T. Nakamura. </author> <title> Effective Parallel Processing for Synthesizing Continuous Images. </title> <booktitle> New Advances in Computer Graphics, Proceedings of CGI 89, </booktitle> <pages> pp. 343-352. </pages>
Reference: 9. <author> Kobayashi, H., S. Nishimura, H. Kubota, T. Nakamura, Y. Shegei. </author> <title> Load Balancing Strategies for a Parallel Ray-Tracing System Based on Constant Subdivision. </title> <booktitle> The Visual Computer, </booktitle> <year> 1988. </year> <pages> pp. 197-209. </pages>
Reference: 10. <author> Law, A., R. Yagel, and D.N. Jayasimha. VoxelFlow: </author> <title> A Parallel Volume Rendering Method for Scientific Visualization. </title> <booktitle> Proceedings of ISCA International Conference on Computer Applications in Engineering and Medicine, </booktitle> <address> Indianapolis, March 15-17, </address> <year> 1995, </year> <pages> pp. 260-264. </pages>
Reference-contexts: To reduce the complexity in the description of the algorithm, we briey illustrate the method for the case of a 2D grid projected on a 1D screen as shown in Figure 2. For a more elaborate description, refer to the two earlier papers on VoxelFlow <ref> [10] </ref> and CellFlow [11]. The screen is divided into P regions, and assigned to P processors. The initial data distribution is done in a way such that each processor contains all the voxels needed to generate the final image for the assigned region without communicating with other processors.
Reference: 11. <author> Law, A., and R. Yagel. CellFlow: </author> <title> A Parallel Rendering Scheme for Distributed Memory Architectures. </title> <type> Technical Research Report OSU-CISRC-03/95-TR11, </type> <institution> Department of Computer and Infor mation Science, The Ohio State University, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: To reduce the complexity in the description of the algorithm, we briey illustrate the method for the case of a 2D grid projected on a 1D screen as shown in Figure 2. For a more elaborate description, refer to the two earlier papers on VoxelFlow [10] and CellFlow <ref> [11] </ref>. The screen is divided into P regions, and assigned to P processors. The initial data distribution is done in a way such that each processor contains all the voxels needed to generate the final image for the assigned region without communicating with other processors.
Reference: 12. <author> Levoy, M., </author> <title> Display of Surfaces from Volume Data, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 8, No. 5, </volume> <month> May </month> <year> 1988, </year> <pages> pp. 29-37. </pages>
Reference-contexts: The volume is projected onto an 88 screen. Only one ray is shown in the figure. The dark circles along the ray shows the sampling points of the volume along the ray. 3D Volume (865 voxels) Voxel (111) 2D Screen (88 pixels) 4 During volume rendering (Figure 1) <ref> [12] </ref>, rays are cast into the volume through the screen pixels. For each ray, the volume is sampled at regular intervals along the ray.
Reference: 13. <author> Nieh, J., Levoy, </author> <title> M.,Volume Rendering on Scalable Shared-Memory MIMD Architecture, </title> <booktitle> Pro ceedings of 1992 Workshop on Volume Visualization, </booktitle> <address> Boston, MA, </address> <pages> pp. 17-24. </pages>
Reference: 14. <author> Stenstrom, P., T. Joe, and A. Gupta. </author> <title> Comparative Performance Evaluation of Cache-Coherent NUMA and COMA Architectures. </title> <booktitle> Proceedings of the 19th Annual International Symposium on Computer Architecture, </booktitle> <volume> 20(2): </volume> <pages> 80-91. </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: The directories only contain state information to reduce memory overhead, data are not stored. Such hierarchical directory organization can be found in machines like the Kendall Square Research KSR-1 [2] and Swedish Institute of Computer Sciences DDM machine [6]. In another organization of the distributed directories, Stenstrom et al <ref> [14] </ref> proposed a COMA-F architecture (at COMA), which does not use hierarchical directory-based cache coherency protocol. COMA-F uses a at directory organization in which the directory memories are physically distributed across the machine but directory information for a given memory line is kept in a fixed location.
Reference: 15. <author> Westover, L., Splatting: </author> <title> A Parallel, Feed-Forward Volume Rendering Algorithm, </title> <type> Ph.D Thesis, </type> <institution> Department of Computer Science, University of North Carolina at Chapel Hill, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: The composed color of the ray is the final color of the screen pixel. This approach to volume rendering is referred to as backward projection. The other popular approach is the forward projection suggested by Westover <ref> [15] </ref>. In this approach, each voxel is projected on the screen, and the final color of a pixel is the accumulated effect of all the voxels which project on this pixel. The parallel algorithm described in this paper is independent of the approach taken to volume rendering.
References-found: 15

