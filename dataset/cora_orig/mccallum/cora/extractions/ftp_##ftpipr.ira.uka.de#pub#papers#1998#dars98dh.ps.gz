URL: ftp://ftpipr.ira.uka.de/pub/papers/1998/dars98dh.ps.gz
Refering-URL: 
Root-URL: 
Title: A parallel control architecture for industrial robot cells  for Process Control and Robotics,  
Author: Dominik HENRICH, Frank ABEGG, Christian WURLL and Heinz WRN o. Prof. Dr.-Ing. H. Wrn, 
Keyword: Key Words. industrial robots, robot control architectures, parallel processing, distributed processing  
Note: Further information can be found on the Web pages of the PaRo group (Parallel Robotics) of the IPR at  
Address: PO Box 6980, D-76128 Karlsruhe, Germany,  
Affiliation: Institute  University of Karlsruhe, Depar t-ment of Computer Science,  
Email: e-mail: dHenrich@ira.uka.de.  
Web: http://wwwipr.ira.uka.de/~paro/  
Abstract: We present a parallel control architecture for industrial robot cells. It is based on closed functional components arranged in a flat communication hierarchy. The components may be executed by different processing elements, and each component itself may run on multiple processing elements. The system is driven by the instructions of a central cell control component. We set up necessary requirements for industrial robot cells and possible parallelization levels. These are met by the suggested robot control architecture. As an example we present a robot work cell and a component for motion planning, which fits well in this concept. 
Abstract-found: 1
Intro-found: 1
Reference: <author> BarOn D., Gershon D., Israeli A., Zuniga G. </author> <year> (1993). </year> <title> TRACK II: A multiprocessor robot controller, </title> <booktitle> In: Proc. CompEuro Int. Conf. on Computers in Design, Manufacturing, and Production, </booktitle> <pages> pp. 86-93, </pages> <address> Prix-Erry, France. </address>
Reference: <author> Coulouris G., Dollimore J., Kindberg T. </author> <year> (1994). </year> <title> Distributed systems. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Thus, we get a more efficient system with little waste of computing time (Gruhler, 1993) and a system which is not restricted to a synchronous remote procedure call concept, like the system reported in <ref> (Coulouris et al., 1994) </ref>. For this reason and for its flexibility, we use the Parallel Virtual Machine System (Geist et al., 1994) for communication between the components. <p> Future work will regard the way of implementing the proposed concept. This includes implementing both further components and the communication protocol. Then, a validation of the concept for a workcell for handling flexible material is regarded. Future implementations may also include an error detection and recovery component <ref> (Coulouris et al., 1994) </ref> which at least provides transitions into save error states and an online scheduling component in order to provide better system performance by redistributing the resources dynamically.
Reference: <author> Dilts D. M., Boy N. P., Whoirms H. H. </author> <year> (1991). </year> <title> The evolution of control architectures for automated manufacturing systems. In: </title> <journal> Jour. of Manufacturing Systems, </journal> <volume> vol. </volume> <pages> 10. </pages>
Reference-contexts: In several cases, fundamentally new concepts have to be developed, so that a parallelization is possible. Specially designed computer architectures for robot control are surveyed in (Graham, 1989). The historical development of control structures of automated manufacturing can be followed in <ref> (Dilts et al., 1991) </ref>. A classification scheme for robot control architectures has been proposed in (Hrmann, 1989). It covers the extreme viewpoints of the historical development, hierarchical and distributed control. Additionally, function-oriented and behavior-oriented approaches are distinguished. Altogether, this results in four different classes. <p> The related work is presented and analyzed in Section 6. Finally, the paper closes with a conclusion and the future work in Section 7. 2 System Concept Before discussing parallel control architectures, it is important to explain what a control architecture is. According to <ref> (Dilts et al., 1991) </ref>, a control architecture makes a control system from control components. The architecture determines the interrelationships between the components and the mechanisms for coordination. <p> According to <ref> (Dilts et al., 1991) </ref>, a control architecture makes a control system from control components. The architecture determines the interrelationships between the components and the mechanisms for coordination. Requirements on robot control architectures can be described from a general point of view (Fayek et al., 1993), for manufacturing systems (Dilts et al., 1991), and for software architectures of robot control (Fleury et al., 1994). Important requirements from the parallel processing point of view are reported in (Henrich and Hniger, 1997).
Reference: <author> Drachenfels H. </author> <year> (1997). </year> <editor> Eine Definitionssprache fr die Kommunikationsverbindungen in verteilten Automatisierungssystemen. In: Informatik-Spektrum, </editor> <volume> vol. 20, no. 5, </volume> <pages> pp. 286-293, </pages> <publisher> Springer-Verlag, </publisher> <address> Germany. </address>
Reference-contexts: Messages are sent to message handler modules, thus simplifying structural programming and detecting errors in component coordination. In order to cooperate with other components, the components have a well defined, reusable and simple interface. It provides at least send and receive instructions with a syntax common to all components <ref> (Drachenfels, 1997) </ref>. Thus, the coordination part of the components can again be subdivided into the communication functions and a set of data types (see Section 2). The data types are available to all other components enabling them to handle the transferred data (see Figure 2c).
Reference: <author> Fayek R. E., Liscano R., Karam G. M. </author> <year> (1993). </year> <title> A system architecture for a mobile robot based on activities and a blackboard control unit. </title> <booktitle> In: IEEE Int. Conf. on Robotics and Automation, </booktitle> <volume> vol. 2, </volume> <pages> pp. 267-274. </pages>
Reference-contexts: According to (Dilts et al., 1991), a control architecture makes a control system from control components. The architecture determines the interrelationships between the components and the mechanisms for coordination. Requirements on robot control architectures can be described from a general point of view <ref> (Fayek et al., 1993) </ref>, for manufacturing systems (Dilts et al., 1991), and for software architectures of robot control (Fleury et al., 1994). Important requirements from the parallel processing point of view are reported in (Henrich and Hniger, 1997).
Reference: <author> Fleury S., Herrb M., Chatila R. </author> <year> (1994). </year> <title> Design of a modular architecture for autonomous robots. </title> <booktitle> In: Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 3508-3513. </pages>
Reference-contexts: The architecture determines the interrelationships between the components and the mechanisms for coordination. Requirements on robot control architectures can be described from a general point of view (Fayek et al., 1993), for manufacturing systems (Dilts et al., 1991), and for software architectures of robot control <ref> (Fleury et al., 1994) </ref>. Important requirements from the parallel processing point of view are reported in (Henrich and Hniger, 1997).
Reference: <author> Gaedke M., Wicke R. </author> <year> (1997). </year> <title> Softwaretechnik fr Entwicklung, Betrieb und Wartung von Anwendungen im WorldWide Web. </title> <type> Masters Thesis, </type> <institution> Telecooperation Office, University of Karlsruhe, Germany. </institution>
Reference-contexts: Even more convenient to program are distributed objectoriented systems. They offer all the possibilities of common distributed systems and support remote object access. Though often remote object access can be used asynchronously, the system performance still is dependent on the low level communication structure and protocol <ref> (Gaedke and Wicke, 1997) </ref>. A fully objectoriented system, which is similar to our system, is reported in (Kim et al., 1997). A flexible software architecture was designed, which allows software to be easily adapted to system changes.
Reference: <author> Geist A., Beguelin A., Dongarra J., Jiang W., Manchek R., Sunderam V. </author> <year> (1994). </year> <title> PVM: Parallel Virtual Machine, a user guide and tutorial for networked parallel computing. </title> <publisher> MIT-Press. </publisher>
Reference-contexts: For this reason and for its flexibility, we use the Parallel Virtual Machine System <ref> (Geist et al., 1994) </ref> for communication between the components. Another feature of our protocol is the use of messages including several instructions for different components, each used in a sequence of component calls which we call instruction chains.
Reference: <author> Graham J. H. </author> <year> (1989). </year> <title> Special computer architectures for robotics: Tutorial and survey. In: </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> vol. 5, no. 5, </volume> <pages> pp. 543-554. </pages>
Reference-contexts: In order to use a parallel system, it is important to show the feasibility of parallel-izing existing problem solutions in robotics. In several cases, fundamentally new concepts have to be developed, so that a parallelization is possible. Specially designed computer architectures for robot control are surveyed in <ref> (Graham, 1989) </ref>. The historical development of control structures of automated manufacturing can be followed in (Dilts et al., 1991). A classification scheme for robot control architectures has been proposed in (Hrmann, 1989). It covers the extreme viewpoints of the historical development, hierarchical and distributed control. <p> Those systems typically provide extensible inter-processor communication bandwidth. In the following, some classes will be distinguished: Shared memory systems communicate through a common memory. An efficient system which solves the dynamics of a robot and which is hierarchically organized is described in <ref> (Graham, 1989) </ref>. Besides analyzing the different buffering strategies, this work investigates pipelining the data flow for achieving maximum parallelism. Another possibility for running distributed robot task controllers which are independent from the network structure are the commonly used distributed operating systems.
Reference: <author> Gruhler G. </author> <year> (1993). </year> <title> Parallelverarbeitung von Anwenderprogrammen bei Industriero-botersteuerungen - Konzepte und Anwendungen. </title> <booktitle> VDI-Bericht 1094, </booktitle> <pages> pp. 669-680. </pages>
Reference-contexts: Thus, we get a more efficient system with little waste of computing time <ref> (Gruhler, 1993) </ref> and a system which is not restricted to a synchronous remote procedure call concept, like the system reported in (Coulouris et al., 1994). For this reason and for its flexibility, we use the Parallel Virtual Machine System (Geist et al., 1994) for communication between the components.
Reference: <author> Henrich D., Cheng X. </author> <year> (1992). </year> <title> Fast distance computation for online collision detection with multi-arm robots. </title> <booktitle> IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 2514-2519, </pages> <address> Nice, France, </address> <month> May 10.-15. </month>
Reference-contexts: The main task of the A*-algorithm consists of the expansion and the processing of configurations, which are saved in a priority list. Collisions are detected by a fast, hierarchical distance computation in the 3D workspace, based on the given CAD model of the environment and the robot <ref> (Henrich and Cheng, 1992) </ref> 6 Related Work Much work has been done in designing and implementing robot systems but most of the presented systems have special control architectures for solving special problems. Distributed architectures using explicit parallelism at the high level control are especially rare.
Reference: <author> Henrich D., Hniger Th. </author> <year> (1997). </year> <booktitle> Parallel processing approaches in robotics. In: Proc. of the IEEE Int. Symp. on Industrial Electronics (ISIE97), Guimaraes, </booktitle> <address> Portugal, </address> <institution> University of Minho, </institution> <month> 7-11 July, </month> <pages> pp 702-707. </pages>
Reference-contexts: Requirements on robot control architectures can be described from a general point of view (Fayek et al., 1993), for manufacturing systems (Dilts et al., 1991), and for software architectures of robot control (Fleury et al., 1994). Important requirements from the parallel processing point of view are reported in <ref> (Henrich and Hniger, 1997) </ref>. The goal of our system concept is to provide a scalable and flexible high level robot control architecture for a complex manipulation task that fulfills the requirements described in (Henrich and Hniger, 1997) and which covers many levels of paralleli-zation. <p> Important requirements from the parallel processing point of view are reported in <ref> (Henrich and Hniger, 1997) </ref>. The goal of our system concept is to provide a scalable and flexible high level robot control architecture for a complex manipulation task that fulfills the requirements described in (Henrich and Hniger, 1997) and which covers many levels of paralleli-zation. A definition of these levels can be found in the same reference. <p> These subcomponents have the same structure as described above. The subcomponents fulfill the component task by cooperation and may be easily be processed in parallel. This introduces parallel processing on the algorithm level of a robot control architecture, confer <ref> (Henrich and Hniger, 1997) </ref>. Still, the coordination part of the component is necessary to keep control of the subcomponents. Additionally, the coordination part hides the subcomponents from the other components of the system. The proposed control architecture covers several levels of parallelism introduced in (Henrich and Hniger, 1997). <p> of a robot control architecture, confer <ref> (Henrich and Hniger, 1997) </ref>. Still, the coordination part of the component is necessary to keep control of the subcomponents. Additionally, the coordination part hides the subcomponents from the other components of the system. The proposed control architecture covers several levels of parallelism introduced in (Henrich and Hniger, 1997). It can be clearly seen that parallelism at the robotics level is supported by the component concept when running components on different PEs.
Reference: <author> Hrmann A. </author> <year> (1989). </year> <institution> Steuerung und Systemarchitektur von fortgeschrittenen autonomen Sys-temen. </institution> <address> Robotersysteme 5, </address> <publisher> Springer-Verlag, </publisher> <pages> pp. 173-185. </pages>
Reference-contexts: Specially designed computer architectures for robot control are surveyed in (Graham, 1989). The historical development of control structures of automated manufacturing can be followed in (Dilts et al., 1991). A classification scheme for robot control architectures has been proposed in <ref> (Hrmann, 1989) </ref>. It covers the extreme viewpoints of the historical development, hierarchical and distributed control. Additionally, function-oriented and behavior-oriented approaches are distinguished. Altogether, this results in four different classes. For parallel processing, each function or each behavior can be performed by an extra PE.
Reference: <author> Hwong Y. K., Ahuja N. </author> <year> (1992). </year> <title> Gross motion planning A survey, </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 24, no 3, </volume> <pages> pp. 219-291. </pages>
Reference-contexts: The subject of robot motion planning has been studied for a couple of decades and many important contributions to the problem have been made <ref> (Hwong and Ahuja, 1992) </ref>. Motion planning algorithms are of great theoretical interest, but are rarely used in practice because of their computational complexity (Kamal et al., 1996). Generally speaking, speeding up the computation will enable the motion planner to cope better with problems occurring in practice.
Reference: <author> Kamal L., Gupta K., del Pobil, A.P. </author> <year> (1996). </year> <title> Practical motion planning in robotics: current approaches and future directions. </title> <journal> IEEE Robotics & Automation Magazine, </journal> <month> December. </month>
Reference-contexts: The subject of robot motion planning has been studied for a couple of decades and many important contributions to the problem have been made (Hwong and Ahuja, 1992). Motion planning algorithms are of great theoretical interest, but are rarely used in practice because of their computational complexity <ref> (Kamal et al., 1996) </ref>. Generally speaking, speeding up the computation will enable the motion planner to cope better with problems occurring in practice. We have introduced a new approach to parallel motion planning for industrial robot arms with 6 DOF (Wurll et al., 1998).
Reference: <author> Kim Y., Jo J.-Y., Velasco V.B., Barendt N.A., Podgurski A., Ozsoyoglu G., Merat F.L. </author> <year> (1997). </year> <title> A flexible software architecture for agile manufacturing, </title> <booktitle> In: Proc. Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 3043-3047, </pages> <address> Albuquerque, USA. </address>
Reference-contexts: Though often remote object access can be used asynchronously, the system performance still is dependent on the low level communication structure and protocol (Gaedke and Wicke, 1997). A fully objectoriented system, which is similar to our system, is reported in <ref> (Kim et al., 1997) </ref>. A flexible software architecture was designed, which allows software to be easily adapted to system changes. In contrast to our approach, the system is hierarchically organized and the tasks are evaluated synchronously.
Reference: <author> Lngle T.W. </author> <year> (1997). </year> <institution> Verteiltes Steuerungskonzept fr komplexe inhomogene Roboter-systeme. </institution> <type> PhD. Thesis, </type> <institution> University of Karlstuhe, </institution> <note> VDI-Fortschritts-berichte Nr. 8/614, VDI-Verlag, Dsseldorf, Germany. </note>
Reference-contexts: The dataflow must correspond directly to the flow of the material. Temporal consistency is monitored and managed by a timer component. Unfortunately, the results show no remarkable speedup and require reengineering. More loosely coupled system architectures are defined by the multi-agent systems <ref> (Lngle, 1997) </ref> and especially the blackboard systems (Occello and Thomas, 1992). The subsystems called agents are of similar size to the components of our concept and also use asynchronous communication.
Reference: <author> Mehlhaus U. </author> <year> (1994). </year> <title> Verteilte Programmierung zur Integration von Simulation und Steuerung von Robotern. </title> <note> Reprinted in VDI Fortschrittsberichte vol 10. </note>
Reference-contexts: Thus, we can concentrate on developing the high level control architecture which is important for overall system efficiency. In the following, a subsystem is also called a component. According to the definition of <ref> (Mehlhaus, 1994) </ref> a component implements a set of related functions and can either be a physical or a logical component. Logical components run as different processes in order to have the possibility to run them on different PEs for higher efficiency. <p> Additionally, a graphical user interface and a high level cell control component are introduced. The latter provides a common clock, resource management, task scheduling, action planning, action coordination and process monitoring according to <ref> (Mehlhaus, 1994) </ref>. All instructions to other components are given or planned by it and all results return to it without passing several layers of components. <p> Another feature of our protocol is the use of messages including several instructions for different components, each used in a sequence of component calls which we call instruction chains. Using a state transition model for components, every component has a defined state at any point in time <ref> (Mehlhaus, 1994) </ref>. With the knowledge about the states of a communication partner, the coordination between the components becomes easier. Messages are sent to message handler modules, thus simplifying structural programming and detecting errors in component coordination. <p> Another system architecture similar to our approach is the distributed simulation system presented in <ref> (Mehlhaus, 1994) </ref>. Here, a distributed and flexible system divided into functional subsystems is suggested, which can be run in parallel. One main problem investigated is the temporal and functional consistency of the world model. The dataflow must correspond directly to the flow of the material.
Reference: <author> Occello M., Thomas M.-C. </author> <year> (1992). </year> <title> Intelligent control in robotics through real-time distributed blackboards, </title> <booktitle> In IMACS/SICE Int. Symp. on Robotics, Mechatronics and Manufacturing Sys-tems92, </booktitle> <pages> pp. 567-572, </pages> <address> Kobe, Japan. </address>
Reference-contexts: The dataflow must correspond directly to the flow of the material. Temporal consistency is monitored and managed by a timer component. Unfortunately, the results show no remarkable speedup and require reengineering. More loosely coupled system architectures are defined by the multi-agent systems (Lngle, 1997) and especially the blackboard systems <ref> (Occello and Thomas, 1992) </ref>. The subsystems called agents are of similar size to the components of our concept and also use asynchronous communication. But due to the fact that every agent negotiates for each task with the other agents, the system includes an unacceptable overhead.
Reference: <author> Schill A. </author> <year> (1993). </year> <title> DCE - Das OSF Distributed Computing Environment. </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Another possibility for running distributed robot task controllers which are independent from the network structure are the commonly used distributed operating systems. They have the advantage that basic communication and coordination functions are provided at the system level. Systems like DCE <ref> (Schill, 1993) </ref>, therefore, provide a mechanism for remote procedure calls. With this simple form, only synchronous communication is supported and deadlocks are possible. Even more convenient to program are distributed objectoriented systems. They offer all the possibilities of common distributed systems and support remote object access.
Reference: <author> Whitcomb L.L, Koditschek D.E. </author> <year> (1996). </year> <title> Robot control in message passing environment: Theoretical questions and preliminary experiments. </title> <booktitle> In: Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 1198-1203, </pages> <address> MN, USA. </address>
Reference: <author> Wurll Ch., Henrich D. </author> <year> (1997). </year> <title> Ein Workstation-Cluster fr paralleles Rechnen in Robotik-Anwendungen. </title> <booktitle> In: Proc. of 4. ITG/GI-Fachtagung, Arbeitsplatz-Rechensysteme (APS'97), </booktitle> <pages> pp. 187-197, </pages> <institution> Koblenz-Landau, Germany, </institution> <month> May 21.-22. </month>
Reference-contexts: The platform for the high level control architecture is a PC-based workstation cluster, the IPR-ParaStation. Each of the nine workstations has a 133 MHz Intel Pentium processor and 64 Mbytes memory. The communication is established either by an Ethernet bus or a parallel mesh-based network described in <ref> (Wurll and Hen-rich, 1997) </ref>. For the robot system example, the location and interaction of the components are shown in Figure 4. Each physical component is reflected by a corresponding logical component which runs at least at one node of our (parallel) host computer.
Reference: <author> Wurll Ch., Henrich D., Wrn H. </author> <year> (1998). </year> <title> Parallel online motion planning for industrial robots. </title> <booktitle> In: Proc. of Robotics 98: The Third ASCE Speciality Conf. on Robotics for Challenging Environments, </booktitle> <address> Albuquerque, New Mexico, April 26.-30., </address> <year> 1998 </year>
Reference-contexts: Generally speaking, speeding up the computation will enable the motion planner to cope better with problems occurring in practice. We have introduced a new approach to parallel motion planning for industrial robot arms with 6 DOF <ref> (Wurll et al., 1998) </ref>. The algorithm works in an implicit and discretisized C-space and collisions are detected by distance computation in the Cartesian workspace. This avoids the time and memory consuming obstacle transformation and free C-space calculation and, thus, enables the motion planner to work reasonably fast.
References-found: 23

