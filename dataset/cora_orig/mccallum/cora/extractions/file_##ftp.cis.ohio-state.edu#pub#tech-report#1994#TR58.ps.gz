URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1994/TR58.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: 1 Rapid Previewing via Volume-based Solid Modeling  
Author: Naeem Shareef and Roni Yagel 
Address: Columbus, OH 43210-1277  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Quick previewing of 3D models is necessary for efficient product design and rapid prototyping. An inherent weakness of most solid modeling systems is that as model complexity increases quick 3D viewing suffers, especially on low cost workstations. We explore an alternative approach to surface representation in which object space, called volume, is subdivided into a 3D grid of cubic cells, each containing information on the object(s) which occupy it. A data structure is introduced that consists of a 2D array of pointers each holding a linked list of adjacent non empty cells. To benefit from data coherency along one dimension, we have developed new modeling and rendering algorithms that are beam-oriented, incremental, and integer-based. To illustrate the usefulness of our approach, we use our approach in Constructive Solid Geometry (CSG) modeling. We describe our prototype system and show, by comparing it to existing systems, that our data structure and its associated algorithms while being of finite resolution provide for suitable and more efficient model visualization.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cohen D. and A. Kaufman, </author> <title> Scan-Conversion Algorithms for Linear and Quadratic Objects, in Volume Visualization, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1990, </year> <editor> A. </editor> <publisher> Kaufman (ed.) </publisher> <pages> pp. 280-301. </pages>
Reference-contexts: Recently, a number of 3D voxelization algorithms for 3D primitives such as lines, curves, circles, cones, and tori have been developed <ref> [1] </ref>. Some methods extend 2D scan conversion algorithms to 3D, which is not straightforward for some object. All these 3D approaches assume a full grid volume. The SW structure has limited access via the pointer wall, so new voxelization algorithms are required.
Reference: [2] <author> Frieder G., D. Gordon and R.A. Reynolds, </author> <title> Back-to-Front Display of Voxel-Based Objects, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 5, 1, </volume> <month> January </month> <year> 1985, </year> <pages> pp. 52-60. </pages>
Reference-contexts: The algorithm for opaque volumes compares projected voxels with the Z-buffer and writes a voxel if its depth is smaller than an already residing voxel. Semi-transparent volumes require some structure to keep track of all projected voxels for compositing, which increases Z-buffer operations and updating time. Frieder et al <ref> [2] </ref> utilized the regular order of voxels to develop a backward projection algorithm called Back-to-Front (BTF). Voxels are traversed in slice-row-column order such that farther vox-els from the screen are projected before closer ones.
Reference: [3] <author> Foley, J., A. van Dam, S. Feiner, and J. Hughes, </author> <title> Computer Graphics: </title> <booktitle> Principles and Prac tice, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: In addition, we provide beam-oriented voxelization algorithm that are best suited to the SW. In order to illustrate its usefulness, we use SW to implement Constructive Solid Geometry (CSG), a powerful modeling technique due to its large object definition domain <ref> [3] </ref>. Models are defined by primitives, usually geometric objects such as boxes, spheres, and cylinders, that are combined using regularized boolean set operations such as union, intersection, and subtraction. Primitives are defined parametrically, for example a sphere is defined by its center location and radius. <p> Essentially it is a point classification process where all voxels that reside on the surface or inside a continuous object are identified. 2D scan conversion algorithms for 1D objects such as lines, curves, and circles are well known <ref> [3] </ref>. Recently, a number of 3D voxelization algorithms for 3D primitives such as lines, curves, circles, cones, and tori have been developed [1]. Some methods extend 2D scan conversion algorithms to 3D, which is not straightforward for some object. All these 3D approaches assume a full grid volume. <p> We use a more efficient 2D incremental circle algorithm <ref> [3] </ref> to extract scanlines from the circle. For each scanline extracted the circle algorithm is applied again to generate scanlines for a circle of radius the length of the scanline and inserted as segments in a similar way to what is shown in Figure 3.
Reference: [4] <author> Goldstein R.A. and R. Nagel, </author> <title> 3-D Visual Simulation, </title> <journal> Simulation, </journal> <volume> 16, 1, </volume> <month> January </month> <year> 1971, </year> <pages> pp. 25-31. </pages>
Reference-contexts: Leaf nodes correspond to primitives and internal nodes to boolean operations. Model construction is a bottom-up tree traversal process ending at the root. The method used by most systems to visualize CSG models is called Ray Casting. It defers model evaluation to rendering time <ref> [4] </ref>. A ray is traced from the eye, through each pixel on the image, into the scene. Each such ray is intersected with all primitives at the leaf nodes. A list of enter and exit points, called spans, are extracted and sorted in depth order from the screen.
Reference: [5] <author> Gordon, D. and J.K. Udupa, </author> <title> Fast Surface Tracking in Three-Dimensional Binary Images, Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 45, 989, </volume> <pages> pp. 96-214. </pages> <note> [6] van Hook, </note> <author> T., </author> <title> Real-Time Shaded NC Milling Display, </title> <booktitle> SIGGRAPH 86, </booktitle> <volume> Vol. 20, No. 4, </volume> <month> Aug. </month> <year> 1986, </year> <pages> pp. 15-20. </pages>
Reference-contexts: Viewing Algorithm Many rendering algorithms have recently been developed for volumes. A straightforward approach is to convert to a surface-based representation and then render using existing surface algorithms. Two methods which construct a polygonal mesh from volume traversal are surface tracking <ref> [5] </ref> and marching cubes [9]. Since polygons are inserted at the voxel level, which may introduce more surface primitives than if surfaces were used to start with, the overhead of conversion can be large.
Reference: [7] <author> A. Kaufman (ed.), </author> <title> Volume Visualization, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: Each voxel contains information on the object that reside within it. Converting geometric objects to their voxel representation (3D scan-conversion) is called voxelization. Many volume-based algorithms for volume visualization and manipulation have recently appeared in the literature <ref> [7] </ref>. Most require simple calculations because voxels are simple primitives. For example, a common operation of a cutting tool that drills holes in an object simply requires identifying and removing those voxels that intersect with the tool.
Reference: [8] <author> Kaufman A., D. Cohen, and R. Yagel, </author> <title> Volumetric Graphics, </title> <journal> IEEE Computer, </journal> <volume> Vol. 26, No. 7, </volume> <month> July </month> <year> 1993, </year> <pages> pp. 51-64. </pages>
Reference-contexts: As another example, a box primitive with only six polygons may experience a polygon explosion if a dent, created by subtraction of a sphere, is introduced. Volume Graphics is a new and rapidly growing subfield of Computer Graphics which is based on spatial partitioning <ref> [8] </ref>. Object space, called a volume is defined as a set of disjoint ordered cubic regions, called voxels, centered at grid points in Z 3 . Each voxel represents a region with distance - 0.5 units from the grid point in each axis direction.
Reference: [9] <author> Lorensen W.E. and H.E. Cline, </author> <title> Marching Cubes: A High Resolution 3D Surface Construc tion Algorithm, </title> <journal> Computer Graphics, </journal> <volume> 21, 4, </volume> <month> July </month> <year> 1987, </year> <pages> pp. 163-169. </pages>
Reference-contexts: Viewing Algorithm Many rendering algorithms have recently been developed for volumes. A straightforward approach is to convert to a surface-based representation and then render using existing surface algorithms. Two methods which construct a polygonal mesh from volume traversal are surface tracking [5] and marching cubes <ref> [9] </ref>. Since polygons are inserted at the voxel level, which may introduce more surface primitives than if surfaces were used to start with, the overhead of conversion can be large.
Reference: [10] <author> Machiraju, R., Yagel, R. </author> <title> Efficient Feed-Forward Volume Rendering Techniques for Vector and Parallel Processors, </title> <booktitle> Proceedings of SUPERCOMPUTING93, </booktitle> <address> Portland, Oregon, </address> <month> November </month> <year> 1993, </year> <pages> pp. 699-708. </pages>
Reference-contexts: We denote this matrix by T: T 00 10 20 30 01 11 21 31 02 12 22 32 03 13 23 33 - 13 - Machiraju and Yagel <ref> [10] </ref> introduced an optimization to this algorithm by observing that the projection values for face-adjacent neighbors of a transformed and projected voxel is a simple increment added to its computed projection value.
Reference: [11] <author> Meagher, D., </author> <title> Geometric Modeling Using Octree Encoding, </title> <booktitle> Computer Graphics and Image Processing, </booktitle> <year> 1982, </year> <pages> pp. 129-147. </pages>
Reference-contexts: Another data structure for volume representation is octree which subdivides the volume into octants [14]. Uniform octants are represented by leaf nodes while non-homogeneous regions are further subdivided and represented by a tree node with eight sub trees. Although modeling and CSG have been successfully implemented with octrees <ref> [11] </ref> (and variations of octrees [13]) we chose to explore AR since the algorithms for octree are more complex, require tree traversal with backtracking for model generation and rendering. In addition, spatial coherency in 3D is much harder to be identified and exploited.
Reference: [12] <author> Montani, C., and R. Scopigno, </author> <title> Rendering Volumetric Data Using The STICKS Represen tation Scheme, </title> <journal> Computer Graphics, </journal> <volume> Vol. 24, No. 5, </volume> <month> Nov. </month> <year> 1990, </year> <pages> pp. 87-93. </pages>
Reference-contexts: Each run is a linked list of triplets consisting of distance from the pointer array, a 6-bit code indicating neighboring non-empty voxels, and a unit normal vector. Cutting planes are used to quickly remove object data. Montani and Scopigno <ref> [12] </ref> introduced a structure called STICKS where the pointer array is called the Sticks Holder Array (SHA). Each voxel is assigned color. Each run is a list of adjacent voxels with iso-color, called a Stick. <p> In contrast to [6] it is view independent and provide for sampled volume as well as synthetic geometry. Unlike [16] it provides the means to represent the interior of solids as well as their surface. It extends on <ref> [12] </ref> to include not only iso-value but multi-valued surfaces. In addition, we provide beam-oriented voxelization algorithm that are best suited to the SW. In order to illustrate its usefulness, we use SW to implement Constructive Solid Geometry (CSG), a powerful modeling technique due to its large object definition domain [3]. <p> This is an improvement over voxel-voxel full grid implementations which take O (n 3 ) time. Running the algorithm on SW will be faster than the STICKS representation <ref> [12] </ref> because SW will always have equal or fewer number of segments. To handle multivalued segments, attribute lists are combined according to segment bounds. <p> A backward projection approach, e.g. ray casting, casts rays from the screen and sample the volume along the ray. Montani <ref> [12] </ref> presented a ray casting algorithm for their STICKS volume structure. This algorithm may directly be employed with the SW structure with minor variations to handle attribute list access. A forward projection approach traverses and projects voxels onto the screen.
Reference: [13] <author> Naylor, </author> <title> B.F., Interactive Solid Geometry Via Partitioning Trees, </title> <booktitle> Graphics Interface 92, </booktitle> <pages> pp. 11-18. </pages>
Reference-contexts: Uniform octants are represented by leaf nodes while non-homogeneous regions are further subdivided and represented by a tree node with eight sub trees. Although modeling and CSG have been successfully implemented with octrees [11] (and variations of octrees <ref> [13] </ref>) we chose to explore AR since the algorithms for octree are more complex, require tree traversal with backtracking for model generation and rendering. In addition, spatial coherency in 3D is much harder to be identified and exploited.
Reference: [14] <author> Samet, H., and R. Webber, </author> <title> Hierarchical Data Structures And Algorithms For Computer Graphics, </title> <journal> IEEE Computer Graphics & Applications, </journal> <month> July </month> <year> 1988, </year> <pages> pp. 59-75. </pages>
Reference-contexts: We later present algorithms that make use of the 1D coherency along the run. Another data structure for volume representation is octree which subdivides the volume into octants <ref> [14] </ref>. Uniform octants are represented by leaf nodes while non-homogeneous regions are further subdivided and represented by a tree node with eight sub trees. <p> All these 3D approaches assume a full grid volume. The SW structure has limited access via the pointer wall, so new voxelization algorithms are required. Algorithms either enumerate voxels using point classification in an exhaustive fashion or use recursive subdivision to decompose the model <ref> [14] </ref>. In this paper we restrict ourselves to solid objects with an inside and outside.
Reference: [15] <author> Schroeder W., J. Zarge, and W. Lorensen, </author> <title> Decimation of Triangle Meshes, </title> <journal> Computer Graphics, </journal> <volume> 26, 3, </volume> <month> July </month> <year> 1992. </year>
Reference-contexts: Two methods which construct a polygonal mesh from volume traversal are surface tracking [5] and marching cubes [9]. Since polygons are inserted at the voxel level, which may introduce more surface primitives than if surfaces were used to start with, the overhead of conversion can be large. Decimation algorithms <ref> [15] </ref> can reduce the number of surface primitives, but may loose details in small object features and add to conversion overhead. Segment A: Segment B: Result: Attribute Lists Segment A Segment B Result [(a,1), (b,2), (c,1)] [(e,3), (f,4),(g,3)] (f,4), (g,3)] c d Color ID 1 3 resultant attribute list.
Reference: [16] <author> Udupa, J.K., and D. Odhner, </author> <title> Fast Visualization, Manipulation, and Analysis of Binary Vol umetric Objects, </title> <journal> IEEE Computer Graphics & Applications, </journal> <month> Nov. </month> <year> 1991, </year> <pages> pp. 53-62. </pages>
Reference-contexts: A dexel is named as such because it represents depth at a pixel location. A cutting tool is converted into dexel format and subtraction implemented by removing those scene dexels which the tool overlaps. Udupa and Odhner <ref> [16] </ref> use an AR scheme in a representation called Semiboundary (SB). Runs contain only surface voxels, i.e. face-adjacent to at least one k n - 4 - empty voxel. <p> In this paper we describe a structure we call Segment Wall (SW) which we contend is a further improvement over previous structures in terms of data compression and broad applicability. In contrast to [6] it is view independent and provide for sampled volume as well as synthetic geometry. Unlike <ref> [16] </ref> it provides the means to represent the interior of solids as well as their surface. It extends on [12] to include not only iso-value but multi-valued surfaces. In addition, we provide beam-oriented voxelization algorithm that are best suited to the SW.
Reference: [17] <author> Yagel R., D. Cohen, and A. Kaufman, </author> <title> Normal Estimation in 3D Discrete Space, </title> <journal> The Visual Computer, </journal> <volume> Vol. 8, No. </volume> <pages> 5-6, </pages> <month> June </month> <year> 1992, </year> <pages> pp. 278-291. </pages>
Reference-contexts: a separate table), (2) by computing the grey-level gradients in object space, (3) by computing depth gradients in image space by using a depth buffer, and (4) by employing context sensitive shading where a depth buffer is segmented into regions and normals are computed with information available within a context <ref> [17] </ref>. 6. Results Our prototype CSG system, we call VolCSG, currently implements box, sphere, and cylinder primitives and union, intersection, and difference boolean set operations. We compare timings of our system and a CSG model rendering called RayShade, which uses the common ray tracing approach used by many systems.
Reference: [18] <author> Westover, </author> <title> L.,Footprint Evaluation for Volume Rendering,, </title> <journal> Computer Graphics, </journal> <volume> Vol. 24, No. 4, </volume> <month> August </month> <year> 1990, </year> <pages> pp. 367-376. </pages>
Reference-contexts: Multi-valued segments can be partitioned in object space and then partitioned in screen space via the line algorithm. This method does not handle holes between segments. Splatting <ref> [18] </ref> is an approach which increases the area of inuence of a voxel on the screen by coloring the pixel it - 15 - hits and some local region or pixels around it.
References-found: 17

