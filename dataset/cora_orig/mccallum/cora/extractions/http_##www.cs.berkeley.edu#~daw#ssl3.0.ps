URL: http://www.cs.berkeley.edu/~daw/ssl3.0.ps
Refering-URL: http://www.isaac.cs.berkeley.edu/
Root-URL: http://www.cs.berkeley.edu
Email: daw@cs.berkeley.edu schneier@counterpane.com  
Title: Analysis of the SSL 3.0 protocol  
Author: David Wagner Bruce Schneier 
Date: Revised November 19, 1996  
Affiliation: University of California, Berkeley Counterpane Systems  
Abstract: The SSL protocol is intended to provide a practical, application-layer, widely applicable connection-oriented mechanism for Internet client/server communications security. This note gives a detailed technical analysis of the cryptographic strength of the SSL 3.0 protocol. A number of minor flaws in the protocol and several new active attacks on SSL are presented; however, these can be easily corrected without overhauling the basic structure of the protocol. We conclude that, while there are still a few technical wrinkles to iron out, on the whole SSL 3.0 is a valuable contribution towards practical communications security. 
Abstract-found: 1
Intro-found: 1
Reference: [Aba96] <author> M. Abadi, </author> <type> personal communication, </type> <month> Oc-tober </month> <year> 1996. </year>
Reference-contexts: As written, the document indicates that the server should sign an empty structure when an-onymous key-exchange is in use. An earlier version of this paper included a critical analysis based on that erroneous interpretation. However, we have since been informed <ref> [Aba96, Die96] </ref> that our understanding of the specification was faulty: the SSL 3.0 designers intended that the signature be omitted entirely when the server was anonymous, and implementors have followed this route. To prevent confusion, we recommend that this small typo be fixed.
Reference: [AN96] <author> M. Abadi and R. Needham, </author> <title> "Prudent Engineering Practice for Cryptographic Protocols", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(1) </volume> <pages> 2-15, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Seuss) of semantic authentication: roughly speaking we want SSL to "authenticate what was meant, not what was said." To phrase it another way, Eschew unauthenticated security-critical context. This design principle is hardly original; Abadi and Needham <ref> [AN96] </ref> gave a version of it in the context of building secure protocols.
Reference: [BCK96] <author> M. Bellare, R. Canetti, and H. Kraw-czyk, </author> <title> "Keying Hash Functions for Message Authentication," </title> <booktitle> Advances in Cryptology|CRYPTO '96 Proceedings, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996, </year> <pages> pp. 1-15. </pages>
Reference-contexts: This calls for strong message authentication. SSL protects the integrity of application data by using a cryptographic MAC. The SSL designers have chosen to use HMAC, a simple, fast hash-based construction with some strong theoretical evidence for its security <ref> [BCK96] </ref>. In an area where several initial ad-hoc proposals for MACs have been cryptana-lyzed, these provable security results are very attractive. HMAC is rapidly becoming the gold standard of message authentication, and it is an excellent choice for SSL.
Reference: [Bel96] <author> S. Bellovin, </author> <title> "Problem Areas for the IP Security Protocols", </title> <booktitle> Proceedings of the Sixth USENIX Security Symposium, Usenix Association, </booktitle> <year> 1996, </year> <pages> pp. 205-214. </pages> <address> ftp://ftp.research.att.com/dist/ smb/badesp.ps. </address>
Reference-contexts: Recent research motivated by the IETF ipsec (IP security) working group has revealed that sophisticated active attacks on a record layer can breach a system's confidentiality even when the underlying cipher is strong <ref> [Bel96] </ref>. It appears that the SSL 3.0 record layer resists these powerful attacks; it is worth discussing in some depth why they are foiled. One important active attack on ipsec is Bellovin's cut-and-paste attack [Bel96]. <p> on a record layer can breach a system's confidentiality even when the underlying cipher is strong <ref> [Bel96] </ref>. It appears that the SSL 3.0 record layer resists these powerful attacks; it is worth discussing in some depth why they are foiled. One important active attack on ipsec is Bellovin's cut-and-paste attack [Bel96]. Recall that, to achieve confidentiality, link encryption is not enough|the receiving endpoint must also guard the sensitive data from inadvertent disclosure. <p> The most comprehensive defense against cut-and-paste attacks is to use strong authentication on all encrypted packets to prevent enemy modification of the ciphertext data. The SSL record layer does employ this defense, so cut-and-paste attacks are completely foiled. For a more complete exposition on cut-and-paste attacks, see Bellovin's paper <ref> [Bel96] </ref>. The short-block attack is another active attack against ipsec which can be found in Bellovin's paper [Bel96]. The short-block attack was originally applied against DES-CBC ipsec-protected TCP data when the final message block contains a short one-byte plaintext and the remainder of it is filled by random padding. <p> The SSL record layer does employ this defense, so cut-and-paste attacks are completely foiled. For a more complete exposition on cut-and-paste attacks, see Bellovin's paper <ref> [Bel96] </ref>. The short-block attack is another active attack against ipsec which can be found in Bellovin's paper [Bel96]. The short-block attack was originally applied against DES-CBC ipsec-protected TCP data when the final message block contains a short one-byte plaintext and the remainder of it is filled by random padding. <p> Because the receiving ipsec stack ignores the padding bytes, the short-block attack requires about 2 8 known plaintexts and 2 8 active online trials to recover such an unknown trailing byte. Many distracting technicalities have been significantly simplified; see Bellovin's paper <ref> [Bel96] </ref> for more details. There are no obvious short-block attacks on SSL. The SSL record layer format is rather similar to the old vulnerable ipsec layout, so it is admittedly conceivable that a modified version of the attack might work against SSL.
Reference: [Bro96] <author> D. Brownell, </author> <type> personal communication, </type> <month> October </month> <year> 1996. </year>
Reference-contexts: if the client's and server's random nonces were bound more tightly to the pre master secret in the RSA key-exchange|perhaps a hash of the nonces should be included in the RSA encryption input. 6 This behavior is apparently not prohibited by the SSL 3.0 specification, but David Brownell has indicated <ref> [Bro96] </ref> that any server exhibiting this behavior would probably not be interoperable with today's clients. 4.8 Diffie-Hellman key-exchange SSL 3.0 includes support for ephemerally-keyed Diffie-Hellman key-exchange. Since Diffie-Hellman is the only public key algorithm known which can efficiently provide perfect forward secrecy, this is an excellent addition to SSL.
Reference: [Die96] <author> T. Dierks, </author> <type> personal communication, </type> <month> November </month> <year> 1996. </year>
Reference-contexts: For convenience, we reprint the relevant SSL 3.0 data structures from the the server key exchange message here. 5 A SSLRef implementor has notified us that, after learning of this attack, he fixed the flaw; SSLRef 3.0b3 should contain the fix <ref> [Die96] </ref>. enum - rsa, diffie_hellman, ... - KeyExchangeAlgorithm; struct - opaque rsa_modulus; opaque rsa_exponent; - ServerRSAParams; struct - opaque dh_p; opaque dh_g; opaque dh_Ys; - ServerDHParams; struct - select (KeyExchangeAlgorithm) - case diffie_hellman: ServerDHParams params; Signature signed_params; case rsa: ServerRSAParams params; Signature signed_params; - - ServerKeyExchange; The KeyExchangeAlgorithm value is implicitly <p> As written, the document indicates that the server should sign an empty structure when an-onymous key-exchange is in use. An earlier version of this paper included a critical analysis based on that erroneous interpretation. However, we have since been informed <ref> [Aba96, Die96] </ref> that our understanding of the specification was faulty: the SSL 3.0 designers intended that the signature be omitted entirely when the server was anonymous, and implementors have followed this route. To prevent confusion, we recommend that this small typo be fixed.
Reference: [FKK96] <author> A. Freier, P. Karlton, and P. Kocher, </author> <title> "The SSL Protocol Version 3.0", </title> <address> ftp://ftp.netscape.com/pub/review/ ssl-spec.tar.Z, </address> <month> March 4 </month> <year> 1996, </year> <title> Internet Draft, </title> <booktitle> work in progress. </booktitle>
Reference-contexts: The IETF Transport Layer Security working group is also using SSL 3.0 as a base for their standards efforts. In short, SSL 3.0 aims to provide Internet client/server applications with a practical, widely-applicable connection-oriented communications security mechanism. This note analyzes the SSL 3.0 specification <ref> [FKK96] </ref>, with a strong focus on its cryptographic security. We assume familiarity with the SSL 3.0 specification. Explanations of some of the cryptographic concepts can be found in [Sch96]. The paper is organized as follows. Section 2 briefly gives some background on SSL 3.0 and its predecessor SSL 2.0.
Reference: [Koc96] <author> P. </author> <title> Kocher, </title> <type> personal communication, </type> <year> 1996. </year>
Reference-contexts: Others have also discovered some of these weaknesses: Dan Simon independently pointed out the ciphersuite rollback attack, Paul Kocher has addressed these concerns <ref> [Koc96] </ref>, and the PCT 1.0 protocol [PCT95] discussed and countered some (though not all) of these flaws. 3 The record layer This section considers the cryptographic strength of the record layer protocol, and assumes that the key-exchange protocol has securely set up session state, keys, and security parameters.
Reference: [KV83] <author> V. Voydock and S. Kent, </author> <title> "Security Mechanisms in High-Level Network Protocols", </title> <journal> ACM Computing Surveys, v. </journal> <volume> 5, </volume> <editor> n. </editor> <volume> 2, </volume> <month> June </month> <year> 1983, </year> <pages> pp. 135-171. </pages>
Reference-contexts: Of course, a secure key-exchange protocol is vital to the security of application data, but an examination of attacks on the SSL key-exchange protocol is postponed until the next section. The SSL record layer addresses fairly standard problems that have received much attention in the cryptographic and security literature <ref> [KV83] </ref>, so it is reasonable to hope that SSL 3.0 provides fairly solid protection in this respect. As we shall see, this is not far from the truth.
Reference: [PCT95] <author> J. Benaloh, B. Lampson, D. Simon, T. Spies, and B. Yee, "Microsoft Corporation's PCT Protocol", </author> <month> October </month> <year> 1995, </year> <title> Internet Draft, </title> <booktitle> work in progress. </booktitle>
Reference-contexts: Others have also discovered some of these weaknesses: Dan Simon independently pointed out the ciphersuite rollback attack, Paul Kocher has addressed these concerns [Koc96], and the PCT 1.0 protocol <ref> [PCT95] </ref> discussed and countered some (though not all) of these flaws. 3 The record layer This section considers the cryptographic strength of the record layer protocol, and assumes that the key-exchange protocol has securely set up session state, keys, and security parameters.
Reference: [RSA93] <institution> RSA Data Security, Inc., "Public-Key Cryptography Standards (PKCS)," </institution> <month> Nov 93. </month>
Reference: [Sch96] <author> B. Schneier, </author> <title> Applied Cryptography, 2nd Edition, </title> <publisher> John Wiley & Sons, </publisher> <year> 1996. </year>
Reference-contexts: This note analyzes the SSL 3.0 specification [FKK96], with a strong focus on its cryptographic security. We assume familiarity with the SSL 3.0 specification. Explanations of some of the cryptographic concepts can be found in <ref> [Sch96] </ref>. The paper is organized as follows. Section 2 briefly gives some background on SSL 3.0 and its predecessor SSL 2.0.
Reference: [Yee96] <author> B. Yee, </author> <type> personal communication, </type> <month> June </month> <year> 1996. </year>
Reference-contexts: Ignoring coarse-grained traffic analysis seems like a reasonable design decision. However, there are some more subtle threats posed by traffic analysis in the SSL architecture. Bennet Yee has noted that examination of ciphertext lengths can reveal information about URL requests in SSL-or SSL-encrypted Web traffic <ref> [Yee96] </ref>. When a Web browser connects to a Web server via an encrypted transport such as SSL, the GET request containing the URL is transmitted in encrypted form.
References-found: 13

