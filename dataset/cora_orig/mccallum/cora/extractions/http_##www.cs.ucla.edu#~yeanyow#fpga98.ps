URL: http://www.cs.ucla.edu/~yeanyow/fpga98.ps
Refering-URL: http://www.cs.ucla.edu/~yeanyow/
Root-URL: http://www.cs.ucla.edu
Email: -cong, yeanyow-@cs.ucla.edu  
Title: Boolean Matching for Complex PLBs in LUT-based FPGAs with Application to Architecture Evaluation  
Author: Jason Cong and Yean-Yow Hwang 
Address: Los Angeles  
Affiliation: Department of Computer Science University of California,  
Abstract: In this paper, we developed Boolean matching techniques for complex programmable logic blocks (PLBs) in LUT-based FPGAs. A complex PLB can not only be used as a K-input LUT, but also can implement some wide functions of more than K variables. We apply previous and develop new functional decomposition methods to match wide functions to PLBs. We can determine exactly whether a given wide function can be implemented with a XC4000 CLB or other three PLB architectures (including the XC5200 CLB). We evaluate functional capabilities of the four PLB architectures on implementing wide functions in MCNC benchmarks. Experiments show that the XC4000 CLB can be used to implement up to 98% of 6-cuts and 88% of 7-cuts in MCNC benchmarks, while two of the other three PLB architectures have a smaller cost in terms of logic capability per silicon area. Our results are useful for designing future logic unit architectures in LUT based FPGAs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ashenhurst, R. L., </author> <title> ``The Decomposition of Switching Functions,'' </title> <booktitle> Proc. Int'l Symp. on Theory of Switching Functions, </booktitle> <year> 1959. </year>
Reference-contexts: In the following section, we solve the Boolean matching for PLB problem by decomposing functions with consideration of both factors. 3. Boolean Matching Techniques for PLBs In this section, we first introduce terminologies and review classical functional decomposition results given in <ref> [1, 7] </ref>, and then present complete characterizations of wide functions that can be implemented with the XC4000 CLB, PLB1 (incl. the XC5200 CLB), PLB2, and PLB3 architectures. 3.1. <p> It is clear that cs B (f ) represents the set of distinct columns in the decomposition chart <ref> [1] </ref> or the set of compatible classes [13]. <p> Functions y 1 (B) to y t (B) are called the encoding functions of the decomposition. The condition for the existence of a disjoint decomposition of f (X) is given in the next theorem. Theorem 1 <ref> [1, 7] </ref> f (X) has a disjoint decomposition g (Y (B),X -B) under the bound set B if and only if | cs B ( f ) | 2 t where | Y (B) | = t. <p> The inputs in X 3 are the bridged inputs in the implementation. In general, X 3 may contain multiple inputs. The following two theorems give necessary and sufficient conditions for the existence of bi-decompositions of functions. Theorem 2 <ref> [1] </ref> f (X) has a disjoint bi-decomposition g (y 1 (X 1 ),y 2 (X 2 )) if and only if f (X) has simple disjoint decompositions under the bound set of X 1 and the bound set X 2 .
Reference: [2] <author> Bryant, R. E., </author> <title> ``Graph-based Algorithms for Boolean Function Manipulation,'' </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. C-35, </volume> <pages> pp. 677-691, </pages> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: To compute a disjoint decomposition of f (X) under a bound set B, we employ the reduced ordered binary decision diagram (OBDD) representation of functions <ref> [2] </ref> and use efficient functional decomposition approaches in [3, 9] based on cut computation in OBDDs. 3.2.
Reference: [3] <author> Chang, S.-C. and M. Marek-Sadowska, </author> <title> ``Technology Mapping via Transformations of Function Graphs,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer Design, </booktitle> <pages> pp. 159-162, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: To compute a disjoint decomposition of f (X) under a bound set B, we employ the reduced ordered binary decision diagram (OBDD) representation of functions [2] and use efficient functional decomposition approaches in <ref> [3, 9] </ref> based on cut computation in OBDDs. 3.2.
Reference: [4] <author> Cong, J. and Y. Ding, </author> <title> ``Combinational Logic Synthesis for LUT Based Field Programmable Gate Arrays,'' </title> <journal> ACM Trans. on Design Automation of Electronic Systems, </journal> <volume> Vol. 1, 2, </volume> <pages> pp. 145-204, </pages> <year> 1996. </year>
Reference-contexts: However, the problem of matching wide functions to (LUT based) PLBs has not been understood well before. As a result, most existing technology mapping algorithms (see <ref> [4] </ref> for a comprehensive survey) focus on K-LUT covering for area or delay minimization, or LUT to PLB packing for area minimization. Recently, Sasao and Butler [12] studied the bi-decomposition f (X) = h (g 1 (X 1 ),g 2 (X 2 )) of logic functions.
Reference: [5] <author> Cong, J. and Y.-Y. Hwang, </author> <title> ``Partially-Dependent Functional Decomposition with Applications in FPGA Synthesis and Mapping,'' </title> <booktitle> Proc. ACM 5th Int'l Symp. on FPGA, </booktitle> <pages> pp. 35-42, </pages> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: They gave necessary and sufficient conditions for non-disjoint bi-decompositions and considered the case when h is an AND, OR, or EXOR function, but they did not relate their results to Boolean matching for LUT based PLBs. Cong and Hwang <ref> [5] </ref> characterized two classes of wide functions for the XC4000 CLB based on the partially-dependent decomposition of logic functions and applied their results to LUT based FPGA technology mapping. Good results were reported (13% decrease on circuit depth). <p> The functional decomposition that produces partially-dependent encoding functions is called a partially-dependent decomposition. An extreme case is the non-disjoint decomposition where some encoding function y i has | sup (y i ) | = 1. A few approaches <ref> [10, 8, 5] </ref> have been proposed in the past to compute partially-dependent decompositions. In particular, a necessary and sufficient condition for the existence of partially-dependent encoding functions was given in [5]. <p> A few approaches [10, 8, 5] have been proposed in the past to compute partially-dependent decompositions. In particular, a necessary and sufficient condition for the existence of partially-dependent encoding functions was given in <ref> [5] </ref>. To obtain a maximum number of partially-dependent encoding functions in a decomposition, the set of all partially-dependent encoding functions is computed first, and assignable encoding functions are chosen from the set to construct such a decomposition [10]. Note that partially-dependent encoding functions may or may not share their inputs. <p> Note that partially-dependent encoding functions may or may not share their inputs. Such a procedure has been implemented based on the existence condition in <ref> [5] </ref>. We now match functions to the configuration B.2. Let X i = X xi-. Recall that cs X i (f ) represents the set of distinct cofactors of f (X) with respect to variables in X i . <p> Since in general sup (y i ) = X i and | X i | = | X | - 1 &gt; 4, the decomposition is a partially-dependent decomposition. We can test the existence of such decompositions using the procedure developed in <ref> [5] </ref>. By selecting x i enumeratively from X, we can conclude the existence of matching to configuration B.2 under case (ii).
Reference: [6] <author> Cong, J., J. Peck, and Y. Ding, ``RASP: </author> <title> A General Logic Synthesis System for SRAM-based FPGAs,'' </title> <booktitle> Proc. ACM 4th Int'l Symp. on FPGA, </booktitle> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: Experimental Results We implemented our Boolean matching methods in C language and incorporated it into the RASP logic synthesis system for FPGAs <ref> [6] </ref>. We evaluated PLB functional capability by counting the number of 5-cuts, 6-cuts, and 7-cuts that PLB can implement in MCNC benchmarks. Our approach is as follows. All benchmark circuits are decomposed into 2-input networks.
Reference: [7] <author> Curtis, H. A., </author> <title> ``A Generalized Tree Circuit,'' </title> <journal> Journal of the ACM, </journal> <volume> Vol. </volume> <pages> 8(4) pp. 484-496, </pages> <year> 1961. </year>
Reference-contexts: In the following section, we solve the Boolean matching for PLB problem by decomposing functions with consideration of both factors. 3. Boolean Matching Techniques for PLBs In this section, we first introduce terminologies and review classical functional decomposition results given in <ref> [1, 7] </ref>, and then present complete characterizations of wide functions that can be implemented with the XC4000 CLB, PLB1 (incl. the XC5200 CLB), PLB2, and PLB3 architectures. 3.1. <p> Functions y 1 (B) to y t (B) are called the encoding functions of the decomposition. The condition for the existence of a disjoint decomposition of f (X) is given in the next theorem. Theorem 1 <ref> [1, 7] </ref> f (X) has a disjoint decomposition g (Y (B),X -B) under the bound set B if and only if | cs B ( f ) | 2 t where | Y (B) | = t.
Reference: [8] <author> Huang, J.-D., J.-Y. Jou, and W.-Z. Shen, </author> <title> ``Compatible Class Encoding in Roth-Karp Decomposition for Two-Output LUT Architecture,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 359-363, </pages> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: The functional decomposition that produces partially-dependent encoding functions is called a partially-dependent decomposition. An extreme case is the non-disjoint decomposition where some encoding function y i has | sup (y i ) | = 1. A few approaches <ref> [10, 8, 5] </ref> have been proposed in the past to compute partially-dependent decompositions. In particular, a necessary and sufficient condition for the existence of partially-dependent encoding functions was given in [5].
Reference: [9] <author> Lai, Y.-T., K.-R. R. Pan, and M. Pedram, </author> <title> ``FPGA Synthesis using Function Decomposition,'' </title> <booktitle> Proc. Int'l Conf. on Computer Design: VLSI in Computers, </booktitle> <pages> pp. 30-35, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: To compute a disjoint decomposition of f (X) under a bound set B, we employ the reduced ordered binary decision diagram (OBDD) representation of functions [2] and use efficient functional decomposition approaches in <ref> [3, 9] </ref> based on cut computation in OBDDs. 3.2.
Reference: [10] <author> Legl, C., B. Wurth, and K. Eckl, </author> <title> ``An Implicit Algorithm for Support Minimization during Functional Decomposition,'' </title> <booktitle> Proc. European Design and Test Conf., </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The functional decomposition that produces partially-dependent encoding functions is called a partially-dependent decomposition. An extreme case is the non-disjoint decomposition where some encoding function y i has | sup (y i ) | = 1. A few approaches <ref> [10, 8, 5] </ref> have been proposed in the past to compute partially-dependent decompositions. In particular, a necessary and sufficient condition for the existence of partially-dependent encoding functions was given in [5]. <p> To obtain a maximum number of partially-dependent encoding functions in a decomposition, the set of all partially-dependent encoding functions is computed first, and assignable encoding functions are chosen from the set to construct such a decomposition <ref> [10] </ref>. Note that partially-dependent encoding functions may or may not share their inputs. Such a procedure has been implemented based on the existence condition in [5]. We now match functions to the configuration B.2. Let X i = X xi-.
Reference: [11] <author> Rudell, R., </author> <title> Private Communication 1996. </title>
Reference-contexts: A cut in N u 1 and a cut in N u 2 can be combined to form a cut in N v . As a result, starting from primary inputs toward primary outputs in a topological order, we can enumerate all K-cuts for each node in N <ref> [11] </ref>. Table 1 shows the number of 5-cuts, 6-cuts, and 7-cuts in each MCNC benchmarks. To evaluate the functional capability of a PLB, we enumerated the cuts, computed their functions, matched the functions to the PLB, and computed the percentage of functions that can be matched to the PLB.
Reference: [12] <author> Sasao, T. and J. T. Butler, </author> <title> ``On Bi-Decompositions of Logic Functions,'' </title> <booktitle> Proc. Int'l Workshop on Logic Synthesis, </booktitle> <year> 1997. </year>
Reference-contexts: As a result, most existing technology mapping algorithms (see [4] for a comprehensive survey) focus on K-LUT covering for area or delay minimization, or LUT to PLB packing for area minimization. Recently, Sasao and Butler <ref> [12] </ref> studied the bi-decomposition f (X) = h (g 1 (X 1 ),g 2 (X 2 )) of logic functions. <p> Theorem 2 [1] f (X) has a disjoint bi-decomposition g (y 1 (X 1 ),y 2 (X 2 )) if and only if f (X) has simple disjoint decompositions under the bound set of X 1 and the bound set X 2 . Theorem 3 <ref> [12] </ref> Let X i = X xi- and (X 1 ,X 2 ) be a partition of X i . f (X) has a non-disjoint bi-decomposition g (y 1 (X 1 ,x i ),y 2 (X 2 ,x i )) if and only if f x h i and f x <p> Our techniques and results are useful for developing future logic units as well as new technology mapping algorithms in LUT based FPGAs. Acknowledgement We would like to thank Prof. Marek-Sadowska for pointing the reference <ref> [12] </ref> and Prof. Sasao for providing an early version of his work. This work is partially supported by NSF Young Investigator (NYI) Award MIP-9357582, and grants from Xilinx, Quickturn, and Lucent Technologies under the California MICRO programs.
Reference: [13] <author> Wurth, B., K. Eckl, and K. Antreich, </author> <title> ``Functional Multiple-Output Decomposition: Theory and an Implicit Algorithm,'' </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. </pages> <address> 54--59, </address> <month> Jun. </month> <year> 1995. </year>
Reference-contexts: It is clear that cs B (f ) represents the set of distinct columns in the decomposition chart [1] or the set of compatible classes <ref> [13] </ref>.
References-found: 13

