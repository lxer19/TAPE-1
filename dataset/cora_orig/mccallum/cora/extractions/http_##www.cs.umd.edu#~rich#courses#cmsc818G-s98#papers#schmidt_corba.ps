URL: http://www.cs.umd.edu/~rich/courses/cmsc818G-s98/papers/schmidt_corba.ps
Refering-URL: http://www.cs.umd.edu/~rich/courses/cmsc818G-s98/schedule.html
Root-URL: 
Email: fschmidt,sumedh,gokhaleg@cs.wustl.edu  
Title: Alleviating Priority Inversion and Non-determinism in Real-time CORBA ORB Core Architectures  
Author: Douglas C. Schmidt, Sumedh Mungee, and Aniruddha Gokhale 
Keyword: Real-time CORBA Object Request Broker, QoS-enabled OO Middleware, Performance Measurements  
Address: St. Louis, MO 63130, USA  
Affiliation: Department of Computer Science, Washington University  
Abstract: This paper has been submitted to the 4 th IEEE Real-time Technology and Applications Symposium (RTAS), Denver, Colorado, June 3-5, 1998. Abstract There is increasing demand to extend CORBA to support applications with stringent real-time requirements. However, conventional CORBA Object Request Brokers (ORBs) exhibit substantial priority inversion and non-determinism, which makes them unsuitable for applications with deterministic real-time requirements. This paper focuses on software architectures that help to alleviate priority inversion and non-determinism in real-time CORBA ORBs. It also illustrates empirically why conventional ORBs do not yet support real-time quality of service. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Gopalakrishnan and G. Parulkar, </author> <title> Bringing Real-time Scheduling Theory and Practice Closer for Multimedia Computing, </title> <booktitle> in SIGMET-RICS Conference, </booktitle> <address> (Philadelphia, PA), </address> <publisher> ACM, </publisher> <month> May </month> <year> 1996. </year>
Reference-contexts: 1 Introduction 1.1 Emerging Trends in Distributed Real-time Systems Next-generation distributed and real-time applications, such as video-on-demand, teleconferencing, and avionics, require endsystems that can provide statistical and deterministic quality of service (QoS) guarantees for latency <ref> [1] </ref>, bandwidth, and reliability [2].
Reference: [2] <author> S. Landis and S. Maffeis, </author> <title> Building Reliable Distributed Systems with CORBA, </title> <booktitle> Theory and Practice of Object Systems, </booktitle> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: 1 Introduction 1.1 Emerging Trends in Distributed Real-time Systems Next-generation distributed and real-time applications, such as video-on-demand, teleconferencing, and avionics, require endsystems that can provide statistical and deterministic quality of service (QoS) guarantees for latency [1], bandwidth, and reliability <ref> [2] </ref>.
Reference: [3] <author> R. Johnson, </author> <title> Frameworks = Patterns + Components, </title> <journal> Communications of the ACM, </journal> <volume> vol. 40, </volume> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: on middleware and integration frameworks: There is a general industry trend away from programming real-time applications from scratch to integrat fl This work was supported in part by Boeing, CDI, DARPA contract 9701516, NSF grant NCR-9628218, Siemens, and US Sprint. ing applications using reusable components based on object-oriented (OO) middleware <ref> [3] </ref>. Increased focus on QoS-enabled components and open systems: There is increasing demand for remote method invocation and messaging technology to simplify the collaboration of open distributed application components [4] that possess stringent QoS requirements.
Reference: [4] <author> Z. Deng and J. W.-S. Liu, </author> <title> Scheduling Real-Time Applications in an Open Environment, </title> <booktitle> in Proceedings of the 18th IEEE Real-Time Systems Symposium, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Dec. </month> <year> 1997. </year>
Reference-contexts: Increased focus on QoS-enabled components and open systems: There is increasing demand for remote method invocation and messaging technology to simplify the collaboration of open distributed application components <ref> [4] </ref> that possess stringent QoS requirements. Increased focus on standardizing real-time middleware: Several international efforts are currently addressing QoS for OO middleware. The most prominent is the OMG CORBA standardization effort [5].
Reference: [5] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.0 ed., </editor> <month> July </month> <year> 1995. </year>
Reference-contexts: Increased focus on standardizing real-time middleware: Several international efforts are currently addressing QoS for OO middleware. The most prominent is the OMG CORBA standardization effort <ref> [5] </ref>. CORBA is OO middleware that allows clients to invoke operations on objects without concern for where the objects reside, what language the objects are written in, what OS/hardware platform they run on, or what communication protocols and networks are used to interconnect distributed objects [6]. <p> Likewise, lack of proper I/O subsystem integration yields excessive data copying, fragmentation, reassembly, context switching, synchronization, checksumming, demultiplexing, marshaling, and demarshaling overhead [24]. 3. ORB transport protocols: Inefficient implementation of ORB transport protocols e.g., the CORBA Internet Interoperability Protocol (such as IIOP) <ref> [5] </ref> and Simple Flow Protocol (SFP) [25] can cause priority inversions. Specific factors responsible for these inversions include improper connection management strategies, improper sharing of resources, and excessive synchronization overhead in ORB protocol implementations. 4. <p> examines key issues that cause priority inversion in I/O subsystems and describes how TAO's real-time I/O subsystem avoids priority inversion by co-scheduling pools of user-level and kernel-level real-time threads. 2.2.2 ORB Core A CORBA ORB Core implements the GIOP protocol, which defines a standard format for interoperating between heterogeneous ORBs <ref> [5] </ref>. The mechanisms in an ORB Core establish connections and implement the concurrency architecture for processing GIOP requests. The following presents the common sources of priority inversion in conventional ORB Core implementations. Connection architecture: The ORB Core's architecture for managing connections has a substantial impact on real-time ORB behavior.
Reference: [6] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: CORBA is OO middleware that allows clients to invoke operations on objects without concern for where the objects reside, what language the objects are written in, what OS/hardware platform they run on, or what communication protocols and networks are used to interconnect distributed objects <ref> [6] </ref>. There has been recent progress towards standardizing [7, 8] real-time CORBA. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications.
Reference: [7] <author> Object Management Group, </author> <title> Minimum CORBA Request for Proposal, </title> <editor> OMG Document orbos/97-06-14 ed., </editor> <month> June </month> <year> 1997. </year>
Reference-contexts: There has been recent progress towards standardizing <ref> [7, 8] </ref> real-time CORBA. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications. The intent of the real-time CORBA standardization effort is to enable real-time applications to in-terwork throughout embedded systems and heterogeneous distributed environments.
Reference: [8] <institution> Object Management Group, Realtime CORBA 1.0 Request for Proposals, OMG Document orbos/97-09-31 ed., </institution> <month> September </month> <year> 1997. </year>
Reference-contexts: There has been recent progress towards standardizing <ref> [7, 8] </ref> real-time CORBA. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications. The intent of the real-time CORBA standardization effort is to enable real-time applications to in-terwork throughout embedded systems and heterogeneous distributed environments.
Reference: [9] <author> D. C. Schmidt, A. Gokhale, T. Harrison, and G. Parulkar, </author> <title> A High-Performance Endsystem Architecture for Real-time CORBA, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: In particular, conventional CORBA ORBs are not well suited for performance-sensitive, distributed real-time applications due to (1) lack of QoS specification interfaces, (2) lack of QoS enforcement, (3) lack of real-time programming features, and (4) general lack of performance and predictability <ref> [9] </ref>. Although some operating systems, networks, and protocols now support real-time scheduling, they do not provide integrated end-to-end real-time ORB endsystem solutions [10]. Moreover, relatively little systems research has focused on 1 strategies and tactics for real-time CORBA.
Reference: [10] <author> D. C. Schmidt, D. L. Levine, and S. Mungee, </author> <title> The Design and Performance of Real-Time Object Request Brokers, </title> <journal> Computer Communications, </journal> <note> to appear, </note> <year> 1998. </year>
Reference-contexts: Although some operating systems, networks, and protocols now support real-time scheduling, they do not provide integrated end-to-end real-time ORB endsystem solutions <ref> [10] </ref>. Moreover, relatively little systems research has focused on 1 strategies and tactics for real-time CORBA. In particular, QoS research at the network and OS layers has not addressed key requirements and programming aspects of CORBA middle-ware. <p> The ORB software architectures presented in this paper are based on our experience developing, profiling, and optimizing next-generation avionics [13] and telecommunications [14] systems using OO real-time middleware such as ACE [15] and TAO <ref> [10] </ref>. ACE is an OO framework that implements core concurrency and distribution patterns [16] for communication software. <p> the requisite enhancements to standard ORB specifications, such as OMG CORBA, that will enable applications to specify their Quality of Service (QoS) re quirements to ORB endsystems [17]. * Empirically determining the features required to build real-time ORB endsystems that can enforce deterministic and statistical end-to-end applications QoS guaran tees <ref> [10] </ref>. * Integrating the strategies for I/O subsystem architectures and optimizations [18] with ORB endsystems to provide end-to-end bandwidth, latency, and reliability guarantees to distributed applications. * Capturing and documenting the key design patterns [19] necessary to develop, maintain, and extend real-time ORB endsystems. <p> Our earlier work on CORBA and TAO explores aspects of real-time ORB endsystem design including real-time scheduling <ref> [10] </ref>, real-time request demultiplexing [20], real-time event processing [13], and real-time I/O subsystem integration [18]. This paper focuses on a previously unexamined point in the real-time ORB endsystem design space: software architectures that minimize priority inversion and non-determinism in CORBA ORB Core implementations. <p> These benchmarks will simplify the communication and comparison of performance results and real-time ORB behavior patterns. 5 Related Work An increasing number of research efforts are focusing on integrating QoS into CORBA. The work presented in this paper is based on the TAO project <ref> [10] </ref>. This section compares TAO with related work. Krupp, et al, at MITRE Corporation were among the first to elucidate the needs of real-time CORBA systems [39]. They identified key requirements and outlined mechanisms for supporting end-to-end timing constraints [40]. <p> The system supports expression and enforcement of dynamic end-to-end timing constraints through timed distributed operation invocations (TDMIs) [43]. A TDMI corresponds to TAO's RT Operation [18] and an RT Environment structure contains QoS parameters similar to those in TAO's RT Info <ref> [10] </ref>. One difference between TAO and the URI approaches is that TDMIs [40] express required timing constraints, e.g., deadlines relative to the current time, whereas TAO's RT Operations publish their resource, e.g., CPU time, requirements.
Reference: [11] <author> Z. D. Dittia, G. M. Parulkar, and J. Jerome R. Cox, </author> <title> The APIC Approach to High Performance Network Interface Design: Protected DMA and Other Techniques, </title> <booktitle> in Proceedings of INFOCOM '97, </booktitle> <address> (Kobe, Japan), </address> <publisher> IEEE, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: In particular, QoS research at the network and OS layers has not addressed key requirements and programming aspects of CORBA middle-ware. For instance, research on QoS for ATM networks has focused largely on policies for allocating bandwidth on a per-connection basis <ref> [11] </ref>.
Reference: [12] <author> R. Rajkumar, L. Sha, and J. P. Lehoczky, </author> <title> Real-Time Synchronization Protocols for Multiprocessors, </title> <booktitle> in Proceedings of the Real-Time Systems Symposium, </booktitle> <address> (Huntsville, Alabama), </address> <month> December </month> <year> 1988. </year>
Reference-contexts: For instance, research on QoS for ATM networks has focused largely on policies for allocating bandwidth on a per-connection basis [11]. Likewise, research on real-time operating systems has focused largely on avoiding priority inversions and non-determinism in synchronization and scheduling mechanisms for multi-threaded applications <ref> [12] </ref>. 1.2 Towards Real-time CORBA We believe that developing real-time CORBA requires a systematic, measurement-driven methodology to identify and alleviate sources of ORB endsystem overhead, priority inversion, and non-determinism.
Reference: [13] <author> T. H. Harrison, D. L. Levine, and D. C. Schmidt, </author> <title> The Design and Performance of a Real-time CORBA Event Service, </title> <booktitle> in Proceedings of OOPSLA '97, </booktitle> <address> (Atlanta, GA), </address> <publisher> ACM, </publisher> <month> October </month> <year> 1997. </year>
Reference-contexts: The ORB software architectures presented in this paper are based on our experience developing, profiling, and optimizing next-generation avionics <ref> [13] </ref> and telecommunications [14] systems using OO real-time middleware such as ACE [15] and TAO [10]. ACE is an OO framework that implements core concurrency and distribution patterns [16] for communication software. <p> Our earlier work on CORBA and TAO explores aspects of real-time ORB endsystem design including real-time scheduling [10], real-time request demultiplexing [20], real-time event processing <ref> [13] </ref>, and real-time I/O subsystem integration [18]. This paper focuses on a previously unexamined point in the real-time ORB endsystem design space: software architectures that minimize priority inversion and non-determinism in CORBA ORB Core implementations. <p> These applications manage sensors and operator displays, navigate the aircraft's course, and control weapon release. To meet the scheduling demands of mission computing applications, TAO supports real-time scheduling and dispatching of periodic processing operations, as well as efficient event filtering and correlation mechanisms <ref> [13] </ref>. The C++ source code for TAO and ACE is freely available at www.cs.wustl.edu/~schmidt/TAO.html. This release also contains the real-time ORB benchmarking test suite described in Section 4.1. Acknowledgments We gratefully acknowledge Sun and IONA for providing us with their ORB software for the benchmarking testbed.
Reference: [14] <author> D. C. Schmidt, </author> <title> A Family of Design Patterns for Application-level Gateways, </title> <journal> The Theory and Practice of Object Systems (Special Issue on Patterns and Pattern Languages), </journal> <volume> vol. 2, no. 1, </volume> <year> 1996. </year>
Reference-contexts: The ORB software architectures presented in this paper are based on our experience developing, profiling, and optimizing next-generation avionics [13] and telecommunications <ref> [14] </ref> systems using OO real-time middleware such as ACE [15] and TAO [10]. ACE is an OO framework that implements core concurrency and distribution patterns [16] for communication software.
Reference: [15] <author> D. C. Schmidt, </author> <title> ACE: an Object-Oriented Framework for Developing Distributed Applications, </title> <booktitle> in Proceedings of the 6 th USENIX C++ Technical Conference, </booktitle> <address> (Cambridge, Massachusetts), </address> <publisher> USENIX Association, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: The ORB software architectures presented in this paper are based on our experience developing, profiling, and optimizing next-generation avionics [13] and telecommunications [14] systems using OO real-time middleware such as ACE <ref> [15] </ref> and TAO [10]. ACE is an OO framework that implements core concurrency and distribution patterns [16] for communication software.
Reference: [16] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The ORB software architectures presented in this paper are based on our experience developing, profiling, and optimizing next-generation avionics [13] and telecommunications [14] systems using OO real-time middleware such as ACE [15] and TAO [10]. ACE is an OO framework that implements core concurrency and distribution patterns <ref> [16] </ref> for communication software. It provides reusable C++ wrapper facades and framework components that support high-performance, real-time applications across a wide range of OS platforms, including Win32, most versions of UNIX, and real-time operating systems like Vx-Works, Chorus Classix, pSoS, and LynxOS. <p> In MT-Orbix, an application can install a thread filter at the top of a chain of filters that are called successively by the ORB core. This architecture is a variant of the Chain of Responsibility pattern <ref> [16] </ref>. As shown in the figure, filters are called by the ORB after it has read a CORBA request. The thread filter determines which thread should handle this request, i.e., it implements the desired concurrency policy.
Reference: [17] <author> A. Gokhale and D. C. Schmidt, </author> <title> Design Principles and Optimizations for High-performance ORBs, </title> <booktitle> in 12 th OOPSLA Conference, poster session, </booktitle> <address> (Atlanta, Georgia), </address> <publisher> ACM, </publisher> <month> October </month> <year> 1997. </year>
Reference-contexts: The TAO project focuses on the following topics related to real-time CORBA and ORB endsystems: * Identifying the requisite enhancements to standard ORB specifications, such as OMG CORBA, that will enable applications to specify their Quality of Service (QoS) re quirements to ORB endsystems <ref> [17] </ref>. * Empirically determining the features required to build real-time ORB endsystems that can enforce deterministic and statistical end-to-end applications QoS guaran tees [10]. * Integrating the strategies for I/O subsystem architectures and optimizations [18] with ORB endsystems to provide end-to-end bandwidth, latency, and reliability guarantees to distributed applications. * Capturing
Reference: [18] <author> D. C. Schmidt, R. Bector, D. Levine, S. Mungee, and G. Parulkar, </author> <title> An ORB Endsystem Architecture for Statically Scheduled Real-time Applications, </title> <booktitle> in Proceedings of the Workshop on Middleware for Real-Time Systems and Services, </booktitle> <address> (San Francisco, CA), </address> <publisher> IEEE, </publisher> <month> December </month> <year> 1997. </year>
Reference-contexts: that will enable applications to specify their Quality of Service (QoS) re quirements to ORB endsystems [17]. * Empirically determining the features required to build real-time ORB endsystems that can enforce deterministic and statistical end-to-end applications QoS guaran tees [10]. * Integrating the strategies for I/O subsystem architectures and optimizations <ref> [18] </ref> with ORB endsystems to provide end-to-end bandwidth, latency, and reliability guarantees to distributed applications. * Capturing and documenting the key design patterns [19] necessary to develop, maintain, and extend real-time ORB endsystems. <p> Our earlier work on CORBA and TAO explores aspects of real-time ORB endsystem design including real-time scheduling [10], real-time request demultiplexing [20], real-time event processing [13], and real-time I/O subsystem integration <ref> [18] </ref>. This paper focuses on a previously unexamined point in the real-time ORB endsystem design space: software architectures that minimize priority inversion and non-determinism in CORBA ORB Core implementations. <p> Below, we classify key sources of priority inversion and non-determinism in conventional ORB endsys tems. 3 2.2.1 I/O Subsystem The I/O subsystems of general-purpose operating systems, such as Solaris and Windows NT, do not perform preemptive, prioritized protocol processing <ref> [18] </ref>. Therefore, the protocol processing of lower priority packets is not deferred due to the arrival of higher priority packets. Instead, incoming packets are processed according to their order of arrival rather than their priority. <p> For instance, if a low-priority request arrives immediately before a high priority request, the I/O subsystem will process the lower priority packet and pass it to an application servant before the higher priority packet. The time spent in the low-priority servant represents the degree of ORB priority inversion. <ref> [18] </ref> examines key issues that cause priority inversion in I/O subsystems and describes how TAO's real-time I/O subsystem avoids priority inversion by co-scheduling pools of user-level and kernel-level real-time threads. 2.2.2 ORB Core A CORBA ORB Core implements the GIOP protocol, which defines a standard format for interoperating between heterogeneous ORBs <p> The drawback with a non-multiplexed connection architecture is that it can uses a larger number of sockets than the multiplexed connection model. Therefore, it is most effective when used for statically configured, fixed priority real-time applications, such as avionics mission computing systems <ref> [18] </ref>. 3.2 Alternative ORB Core Concurrency Archi tecture There are several strategies for structuring concurrency in an ORB Core. A common ORB concurrency architecture for real-time ORBs is the thread pool concurrency architecture. <p> In addition, different priority levels have their own connection, thus avoiding priority inversion due to the FIFO ordering of packet transmission by the network and I/O subsystem. * TAO Concurrency architecture: TAO supports a variety of concurrency architectures, as described in <ref> [18] </ref>. The thread-per-rate architecture was used for the benchmarks described in this paper. In this concurrency architecture, a separate thread is created for each priority level i.e., rate-group. Thus, the low-priority client issues CORBA requests at a lower rate (10 Hz) than the high-priority client (20 Hz). <p> The system supports expression and enforcement of dynamic end-to-end timing constraints through timed distributed operation invocations (TDMIs) [43]. A TDMI corresponds to TAO's RT Operation <ref> [18] </ref> and an RT Environment structure contains QoS parameters similar to those in TAO's RT Info [10].
Reference: [19] <author> D. C. Schmidt and C. Cleeland, </author> <title> Applying Patterns to Develop Extensible and Maintainable ORB Middleware, </title> <journal> Communications of the ACM, </journal> <note> to appear, </note> <year> 1998. </year>
Reference-contexts: to build real-time ORB endsystems that can enforce deterministic and statistical end-to-end applications QoS guaran tees [10]. * Integrating the strategies for I/O subsystem architectures and optimizations [18] with ORB endsystems to provide end-to-end bandwidth, latency, and reliability guarantees to distributed applications. * Capturing and documenting the key design patterns <ref> [19] </ref> necessary to develop, maintain, and extend real-time ORB endsystems. Our earlier work on CORBA and TAO explores aspects of real-time ORB endsystem design including real-time scheduling [10], real-time request demultiplexing [20], real-time event processing [13], and real-time I/O subsystem integration [18].
Reference: [20] <author> A. Gokhale and D. C. Schmidt, </author> <title> Evaluating the Performance of Demul-tiplexing Strategies for Real-time CORBA, </title> <booktitle> in Proceedings of GLOBE-COM '97, </booktitle> <address> (Phoenix, AZ), </address> <publisher> IEEE, </publisher> <month> November </month> <year> 1997. </year> <month> 16 </month>
Reference-contexts: Our earlier work on CORBA and TAO explores aspects of real-time ORB endsystem design including real-time scheduling [10], real-time request demultiplexing <ref> [20] </ref>, real-time event processing [13], and real-time I/O subsystem integration [18]. This paper focuses on a previously unexamined point in the real-time ORB endsystem design space: software architectures that minimize priority inversion and non-determinism in CORBA ORB Core implementations. <p> Section 2.2 then describes the key sources of priority inversion and non-determinism that affect real-time ORB endsystems. After this overview, Section 3 focuses even more specifically on alternative ORB Core concurrency and connection architectures. 2.1 General Sources of ORB Endsystem Over head Our prior experience <ref> [21, 22, 20] </ref> measuring the throughput and latency of CORBA ORBs indicated that the performance overhead of real-time ORB endsystems stem from inefficiencies in the following: 1. <p> Conventional implementations of CORBA incur significant demultiplexing overhead. In particular, [21, 28] show that ~17% of the total server processing time is spent demultiplex-ing requests. Unless this overhead is reduced and demultiplex-ing is performed predictably, ORBs cannot provide uniform quality of service guarantees to applications. <ref> [20] </ref> presents alternative ORB demultiplexing techniques and describes how TAO's real-time Object Adapter provides optimal demultiplexing strategies that (1) execute deterministically in constant time and (2) avoid priority inversion via de-layered demultiplexing. 3 Alternative ORB Core Concurrency and Connection Architectures This section describes alternative architectures for ORB Core concurrency and connection <p> In addition, the results show that priority inversion is a significant problem in conventional ORBs. As a result, these ORBs are currently unsuitable for applications with deterministic real-time requirements. Based on our results, and our past experience <ref> [21, 20, 28, 22] </ref> measuring the performance of CORBA ORB endsystems, we suggest the following recommendations to decrease non-determinism and limit priority inversions in real-time ORB endsystems. 1. An ORB should avoid dynamic connection establishment: ORBs that establish connections dynamically suffer from high jitter. <p> The selection of ORB endsystem architectures should be driven by empirical performance benchmarks: Our prior research on pinpointing performance bottlenecks and optimizing middleware like Web servers [37, 38] and CORBA ORBs <ref> [21, 20, 28, 22] </ref> demonstrates the efficacy of this measurement-driven research methodology. We recommend that the OMG adopt standard real-time CORBA benchmarking techniques and metrics.
Reference: [21] <author> A. Gokhale and D. C. Schmidt, </author> <title> Measuring the Performance of Com--munication Middleware on High-Speed Networks, </title> <booktitle> in Proceedings of SIGCOMM '96, </booktitle> <address> (Stanford, CA), </address> <pages> pp. 306317, </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: Section 2.2 then describes the key sources of priority inversion and non-determinism that affect real-time ORB endsystems. After this overview, Section 3 focuses even more specifically on alternative ORB Core concurrency and connection architectures. 2.1 General Sources of ORB Endsystem Over head Our prior experience <ref> [21, 22, 20] </ref> measuring the throughput and latency of CORBA ORBs indicated that the performance overhead of real-time ORB endsystems stem from inefficiencies in the following: 1. <p> Therefore, the Object Adapter must demultiplex packets according to their (FIFO) order of arrival. FIFO demultiplexing can cause higher priority packets to wait while lower priority packets are demultiplexed. Conventional implementations of CORBA incur significant demultiplexing overhead. In particular, <ref> [21, 28] </ref> show that ~17% of the total server processing time is spent demultiplex-ing requests. <p> In addition, the results show that priority inversion is a significant problem in conventional ORBs. As a result, these ORBs are currently unsuitable for applications with deterministic real-time requirements. Based on our results, and our past experience <ref> [21, 20, 28, 22] </ref> measuring the performance of CORBA ORB endsystems, we suggest the following recommendations to decrease non-determinism and limit priority inversions in real-time ORB endsystems. 1. An ORB should avoid dynamic connection establishment: ORBs that establish connections dynamically suffer from high jitter. <p> The selection of ORB endsystem architectures should be driven by empirical performance benchmarks: Our prior research on pinpointing performance bottlenecks and optimizing middleware like Web servers [37, 38] and CORBA ORBs <ref> [21, 20, 28, 22] </ref> demonstrates the efficacy of this measurement-driven research methodology. We recommend that the OMG adopt standard real-time CORBA benchmarking techniques and metrics.
Reference: [22] <author> A. Gokhale and D. C. Schmidt, </author> <title> The Performance of the CORBA Dynamic Invocation Interface and Dynamic Skeleton Interface over High-Speed ATM Networks, </title> <booktitle> in Proceedings of GLOBECOM '96, </booktitle> <address> (London, England), </address> <pages> pp. 5056, </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: Section 2.2 then describes the key sources of priority inversion and non-determinism that affect real-time ORB endsystems. After this overview, Section 3 focuses even more specifically on alternative ORB Core concurrency and connection architectures. 2.1 General Sources of ORB Endsystem Over head Our prior experience <ref> [21, 22, 20] </ref> measuring the throughput and latency of CORBA ORBs indicated that the performance overhead of real-time ORB endsystems stem from inefficiencies in the following: 1. <p> In addition, the results show that priority inversion is a significant problem in conventional ORBs. As a result, these ORBs are currently unsuitable for applications with deterministic real-time requirements. Based on our results, and our past experience <ref> [21, 20, 28, 22] </ref> measuring the performance of CORBA ORB endsystems, we suggest the following recommendations to decrease non-determinism and limit priority inversions in real-time ORB endsystems. 1. An ORB should avoid dynamic connection establishment: ORBs that establish connections dynamically suffer from high jitter. <p> The selection of ORB endsystem architectures should be driven by empirical performance benchmarks: Our prior research on pinpointing performance bottlenecks and optimizing middleware like Web servers [37, 38] and CORBA ORBs <ref> [21, 20, 28, 22] </ref> demonstrates the efficacy of this measurement-driven research methodology. We recommend that the OMG adopt standard real-time CORBA benchmarking techniques and metrics.
Reference: [23] <author> Z. D. Dittia, J. Jerome R. Cox, and G. M. Parulkar, </author> <booktitle> Design of the APIC: </booktitle>
Reference-contexts: Network connections and host-network interfaces: These endsystem components handle heterogeneous network connections and bandwidths, which can significantly affect latencies and cause variability in performance. Inefficient design of host-network interfaces can cause queueing delays and in some cases lost packets <ref> [23] </ref>, which is unacceptable in hard real-time systems. 2. Communication protocol implementations and integration with the I/O subsystem and network interfaces: Inefficient protocol implementations and improper integration with I/O subsystems can adversely affect endsystem performance.
References-found: 23

