URL: ftp://theory.lcs.mit.edu/pub/people/mass/STOC94.ps
Refering-URL: http://theory.lcs.mit.edu/~mass/stoc94.html
Root-URL: 
Title: Efficient Asynchronous Distributed Symmetry Breaking  
Author: Baruch Awerbuch Lenore Cowen Mark Smith 
Abstract: This paper considers symmetry-breaking in an asynchronous distributed network. We present and analyze a randomized protocol that constructs a maximal independent set in O(log n) expected time, and also a protocol for the dining philosophers problem that schedules a job that competes with ffi other jobs in expected O(ffi) time, which is optimal. The best previous algorithms for dining philosophers achieved only O(ffi 2 ). In addition, the new protocols are 2-wait-free which means that delays at a process are only dependent on processors or links at most distance two in the communication graph. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Awerbuch. </author> <title> Complexity of network synchronization. </title> <journal> J. of the ACM, </journal> <volume> 32(4) </volume> <pages> 804-823, </pages> <month> Oct. </month> <year> 1985. </year>
Reference-contexts: Alternately, when not reasoning specifically about exact delays, the normalized delays can be used, namely physical execution time divided by maximum link or process delay. This is equivalent to measuring physical time assuming message delay varies between 0 and 1 time units of a global clock <ref> [1, 8] </ref>. 2.3 The problem specification We define both a stable and an infinite dynamic version of these problems; the infinite dynamic version in anticipation of the application to dining philosophers.
Reference: [2] <author> B. Awerbuch. </author> <title> Complexity of network synchronization. </title> <journal> J. of the ACM, </journal> <volume> 32(4) </volume> <pages> 804-823, </pages> <month> Oct. </month> <year> 1985. </year>
Reference-contexts: Luby's protocol worked because in each round every process only had one chance to kill a neighbor that flipped 1. With asynchrony this is no longer guaranteed. One could instead try adding, for example, the ff synchronizer of <ref> [2] </ref> to generate global pulses, but this may add an overhead of O (D) for the first step in the protocol, where D is the diameter of the network.
Reference: [3] <author> B. Awerbuch and M. Saks. </author> <title> A dining philosophers algorithm with polynomial response time. </title> <booktitle> In Proc. 31st IEEE Symp. on Found. of Comp. Science, </booktitle> <year> 1990. </year>
Reference-contexts: They also use constant space per edge, sending messages of size at most O (log log n). We sketch how the protocols are extended to work in the infinite dynamic model considered for dining philosophers by Awerbuch and Saks in 1990 <ref> [3] </ref>. (In this case, the protocols will be 3-wait-free, and the complexity bounds are still O (ffi), where ffi = the maximum number of jobs a job competes with at any point in time). 1.2 Previous work For the maximal independent set problem, there are the famous randomized synchronous algorithms of <p> We consider the generalized dining philosophers problem, as modeled in <ref> [3] </ref>, first in the stable model defined in section 2.3, and then extend this below. <p> We consider the generalized dining philosophers problem, as modeled in [3], first in the stable model defined in section 2.3, and then extend this below. The dining philosophers problem, studied by Dijkstra and others <ref> [7, 12, 16, 5, 11, 3, 6] </ref>, models a set of resources (such as printers, disk drives) which can only be used by one competing process at a time. <p> This meets the lower bound, where the best known previous algorithms had response times O (ffi 2 ). (The best known deterministic algorithms for dining philosophers are still <ref> [3] </ref> with a response time of O (ffi 2 log n) or [6] with a response time of O (ffi 2 ) (special hardware assumptions)). <p> by definition by j ; yielding the result. 2 We remark that the dependence on local link delays and job execution times in Theorem 6.1 shows that our dining philosophers algorithm is 2-wait-free. 6.3 The infinite model We now discuss extending this protocol to the dynamic non-stable case considered by <ref> [3] </ref> (see also section 2.3), where new jobs can be added online to the neighbor set of old jobs throughout the protocol, and we re-quire that a job j is scheduled in time O (ffi j ), where ffi j is the maximum number of jobs that conflict with j at
Reference: [4] <author> J. Bar-Ilan and D. Peleg. </author> <title> Distributed resource allocation algorithms. </title> <booktitle> In 6th International Workshop on Distributed Algorithms, </booktitle> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: It is also worth mentioning a recent paper of Bar-Ilan and Peleg <ref> [4] </ref> who have a variety of algorithms, including optimal algorithms for dining philosophers in the synchronous model. <p> The relation between dining philosophers and MIS was noticed earlier by <ref> [4] </ref>. Our protocol is quite simple and works as follows. Each process with no neighbor in the MIS and with an unscheduled job, runs the MIS protocol of Section 4.
Reference: [5] <author> K. Chandy and J. Misra. </author> <title> The drinking philosophers problem. </title> <journal> ACM TOPLAS, </journal> <volume> 6(4) </volume> <pages> 632-646, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: We consider the generalized dining philosophers problem, as modeled in [3], first in the stable model defined in section 2.3, and then extend this below. The dining philosophers problem, studied by Dijkstra and others <ref> [7, 12, 16, 5, 11, 3, 6] </ref>, models a set of resources (such as printers, disk drives) which can only be used by one competing process at a time.
Reference: [6] <author> M. Choy and A. Singh. </author> <title> Efficient fault tolerant algorithms for resource allocation in distributed systems. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <year> 1992. </year> <note> to appear. </note>
Reference-contexts: We consider the generalized dining philosophers problem, as modeled in [3], first in the stable model defined in section 2.3, and then extend this below. The dining philosophers problem, studied by Dijkstra and others <ref> [7, 12, 16, 5, 11, 3, 6] </ref>, models a set of resources (such as printers, disk drives) which can only be used by one competing process at a time. <p> This meets the lower bound, where the best known previous algorithms had response times O (ffi 2 ). (The best known deterministic algorithms for dining philosophers are still [3] with a response time of O (ffi 2 log n) or <ref> [6] </ref> with a response time of O (ffi 2 ) (special hardware assumptions)). It is also worth mentioning a recent paper of Bar-Ilan and Peleg [4] who have a variety of algorithms, including optimal algorithms for dining philosophers in the synchronous model.
Reference: [7] <author> E. Dijkstra. </author> <title> Hierarchical ordering of sequential processes. </title> <journal> ACTA Informatica, </journal> <pages> pages 115-138, </pages> <year> 1971. </year>
Reference-contexts: We consider the generalized dining philosophers problem, as modeled in [3], first in the stable model defined in section 2.3, and then extend this below. The dining philosophers problem, studied by Dijkstra and others <ref> [7, 12, 16, 5, 11, 3, 6] </ref>, models a set of resources (such as printers, disk drives) which can only be used by one competing process at a time.
Reference: [8] <author> R. G. Gallager, P. A. Humblet, and P. M. Spira. </author> <title> A distributed algorithm for minimum-weight spanning trees. </title> <journal> ACM Trans. on Programming Lang. and Syst., </journal> <volume> 5(1) </volume> <pages> 66-77, </pages> <month> Jan. </month> <year> 1983. </year>
Reference-contexts: Alternately, when not reasoning specifically about exact delays, the normalized delays can be used, namely physical execution time divided by maximum link or process delay. This is equivalent to measuring physical time assuming message delay varies between 0 and 1 time units of a global clock <ref> [1, 8] </ref>. 2.3 The problem specification We define both a stable and an infinite dynamic version of these problems; the infinite dynamic version in anticipation of the application to dining philosophers.
Reference: [9] <author> R. M. Karp and A. Wigderson. </author> <title> A fast parallel algorithm for the maximal independent set problem. </title> <journal> J. of the ACM, </journal> <volume> 32(4) </volume> <pages> 762-773, </pages> <month> Oct. </month> <year> 1985. </year>
Reference-contexts: this case, the protocols will be 3-wait-free, and the complexity bounds are still O (ffi), where ffi = the maximum number of jobs a job competes with at any point in time). 1.2 Previous work For the maximal independent set problem, there are the famous randomized synchronous algorithms of Karp-Widgerson <ref> [9] </ref> and Luby [10]. 1 There is an extensive literature on the dining philosophers problem and resource allocation (e.g.[7, 12, 16, 5, 11, 3, 6]) and we survey these results at the beginning of Section 6. 1.3 Outline The structure of this extended abstract is as follows.
Reference: [10] <author> M. Luby. </author> <title> A simple parallel algorithm for the maximal independent set problem. </title> <journal> SIAM J. on Comput., </journal> <volume> 15(4) </volume> <pages> 1036-1053, </pages> <month> Nov. </month> <year> 1986. </year>
Reference-contexts: protocols will be 3-wait-free, and the complexity bounds are still O (ffi), where ffi = the maximum number of jobs a job competes with at any point in time). 1.2 Previous work For the maximal independent set problem, there are the famous randomized synchronous algorithms of Karp-Widgerson [9] and Luby <ref> [10] </ref>. 1 There is an extensive literature on the dining philosophers problem and resource allocation (e.g.[7, 12, 16, 5, 11, 3, 6]) and we survey these results at the beginning of Section 6. 1.3 Outline The structure of this extended abstract is as follows. <p> algorithm has i producing an output in O (r (+-)) steps, in fact the global and can be replaced by i and i where these are the maximum delays among links and processors in the k-neighborhood of i. 3 Review of Luby's protocol Luby's synchronous MIS protocol, as given in <ref> [10] </ref> proceeds in rounds. In each round, process i flips a coin c i , where c i = 1 with probability 1=(2d i ) 0 otherwise, where d i is the degree of node i in the underlying graph. <p> Finally, next j is the next coin processor j flips after c j , an independent cointoss which is 0 with probability (1 1=8d j ) for each j. 2 Now an analysis similar to <ref> [10] </ref>, using Lemma 5.7 that for a constant fraction of the nodes i, we expect that some neighbor k of i flips 01, while all same or higher degree neighbors j of k flip c j , and next j all 0. (Details omitted for lack of space, they appear in
Reference: [11] <author> J. Lundelius and N. Lynch. </author> <title> Synthesis of efficient drinking philosophers algorithms. </title> <type> unpublished manuscript, </type> <month> Jan. </month> <year> 1988. </year>
Reference-contexts: We consider the generalized dining philosophers problem, as modeled in [3], first in the stable model defined in section 2.3, and then extend this below. The dining philosophers problem, studied by Dijkstra and others <ref> [7, 12, 16, 5, 11, 3, 6] </ref>, models a set of resources (such as printers, disk drives) which can only be used by one competing process at a time.
Reference: [12] <author> N. Lynch. </author> <title> Upper bounds for static resource allocation in a distributed system. </title> <journal> Journal Of Computation And Systems Sciences, </journal> <volume> 23(2) </volume> <pages> 254-278, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: for a constant fraction of the nodes i, we expect that some neighbor k of i flips 01, while all same or higher degree neighbors j of k flip c j , and next j all 0. (Details omitted for lack of space, they appear in Authors Response time Wait-dependency <ref> [12] </ref> O (c ffi ) O (ffi) [17] O (ffi log ffi ) O (log ffi) This paper O (ffi) 2 Lower bound (ffi) 1 c is the number of colors used to color the network graph, n is the number of nodes in the network, and ffi is the number <p> We consider the generalized dining philosophers problem, as modeled in [3], first in the stable model defined in section 2.3, and then extend this below. The dining philosophers problem, studied by Dijkstra and others <ref> [7, 12, 16, 5, 11, 3, 6] </ref>, models a set of resources (such as printers, disk drives) which can only be used by one competing process at a time.
Reference: [13] <author> N. Lynch and H. Attiya. </author> <title> Using mappings to prove timing properties. </title> <journal> Distributed Computing, </journal> <volume> 6(2), </volume> <year> 1992. </year>
Reference-contexts: Section 5 then analyzes the performance of the algorithm. Section 6 gives the application to resource allocation and the first optimal solution to the generalized dining philosophers problem. 2 The model We model each process as a probabilistic timed I/O automaton (see <ref> [15, 13, 14] </ref> for formal definitions). The algorithm begins when a process has an input action from an external system that activates the process (WAKEUP message). The input action message has the neighbor set of the newly activated process.
Reference: [14] <author> N. Lynch and R. Segala. </author> <title> Notes on probababilistic automata. </title> <type> Unpublished manuscript., </type> <year> 1993. </year>
Reference-contexts: Section 5 then analyzes the performance of the algorithm. Section 6 gives the application to resource allocation and the first optimal solution to the generalized dining philosophers problem. 2 The model We model each process as a probabilistic timed I/O automaton (see <ref> [15, 13, 14] </ref> for formal definitions). The algorithm begins when a process has an input action from an external system that activates the process (WAKEUP message). The input action message has the neighbor set of the newly activated process.
Reference: [15] <author> N. A. Lynch and M. R. Tuttle. </author> <title> An introduction to input/output automata. </title> <journal> CWI Quarterly, </journal> <volume> 2(3) </volume> <pages> 219-246, </pages> <year> 1989. </year>
Reference-contexts: Section 5 then analyzes the performance of the algorithm. Section 6 gives the application to resource allocation and the first optimal solution to the generalized dining philosophers problem. 2 The model We model each process as a probabilistic timed I/O automaton (see <ref> [15, 13, 14] </ref> for formal definitions). The algorithm begins when a process has an input action from an external system that activates the process (WAKEUP message). The input action message has the neighbor set of the newly activated process.
Reference: [16] <author> M. Rabin and D. Lehmann. </author> <title> On the advantages of free choice: a symmetric and fully distributed solution to the dining philosophers problem. </title> <booktitle> In Proceedings of 8th POPL, </booktitle> <pages> pages 133-138, </pages> <year> 1981. </year>
Reference-contexts: We consider the generalized dining philosophers problem, as modeled in [3], first in the stable model defined in section 2.3, and then extend this below. The dining philosophers problem, studied by Dijkstra and others <ref> [7, 12, 16, 5, 11, 3, 6] </ref>, models a set of resources (such as printers, disk drives) which can only be used by one competing process at a time.
Reference: [17] <author> E. Styer and G. Peterson. </author> <title> Improved algorithms for distributed resource allocation. </title> <booktitle> In Proc. 7th ACM Symp. on Principles of Distrib. Computing, </booktitle> <pages> pages 105-116. </pages> <booktitle> ACM SIGACT and SIGOPS, ACM, </booktitle> <year> 1988. </year>
Reference-contexts: i, we expect that some neighbor k of i flips 01, while all same or higher degree neighbors j of k flip c j , and next j all 0. (Details omitted for lack of space, they appear in Authors Response time Wait-dependency [12] O (c ffi ) O (ffi) <ref> [17] </ref> O (ffi log ffi ) O (log ffi) This paper O (ffi) 2 Lower bound (ffi) 1 c is the number of colors used to color the network graph, n is the number of nodes in the network, and ffi is the number of conflicting jobs. the full paper).
References-found: 17

