URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR94504.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Email: Email: hsmaini/kishan/mohan/ranka@top.cis.syr.edu  
Phone: Telephone: 315-443-2368 FAX: 315-443-1122  
Title: Genetic Algorithms for Graph Partitioning and Incremental Graph Partitioning  
Author: Harpal S. Maini Kishan G. Mehrotra Chilukuri K. Mohan Sanjay Ranka 
Note: The author to whom all the correspondence should be sent. The work of this author was supported in part by DARPA under contract DABT63-91-C-0028. The content of the information does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred.  
Date: March 15, 1994  
Address: Syracuse, NY 13244-4100  
Affiliation: School of Computer and Information Science 4-116 Center for Science and Technology Syracuse University  
Abstract: Partitioning graphs into equally large groups of nodes, minimizing the number of edges between different groups, is an extremely important problem in parallel computing. For instance, efficiently parallelizing several scientific and engineering applications requires partitioning data or tasks among processors, such that the computational load on each node is roughly the same, while communication is minimized. Obtaining exact solutions is computationally intractable since graph partitioning is an NP-complete problem. This paper presents genetic algorithms for suboptimal graph partitioning, with new crossover operators (KNUX, DKNUX) that lead to orders of magnitude improvement over traditional genetic operators in solution quality and speed. Our method can improve on good solutions previously obtained by using other algorithms or graph theoretic heuristics. We also extend our algorithm to Incremental Graph Partitioning problems, in which the graph structure or system properties changes with time. This opens up the field of applying genetic algorithms to various incremental problem solving tasks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. E. Baker, </author> <title> "Reducing bias and inefficiency in the selection algorithm," </title> <booktitle> Proc. of an International Conference on Genetic Algorithms and their Applications, </booktitle> <publisher> Erlbaum, </publisher> <year> 1985. </year>
Reference-contexts: Generalizing this idea, KNUX uses a crossover mask p = (p 1 ; : : : ; p n ), where each p i is a real number 2 <ref> [0; 1] </ref>. The nonuniformity comes from the fact that the p i 's are not necessarily equal for all i. <p> The crossover disruption probability changes from (1 P c ffi (S)=(m 1)) to Q P r i , where the product is taken over o (S) terms corresponding to schema-defined positions. In our algorithms, utilizing KNUX, we use ranking selection instead of fitness proportionate selection <ref> [1] </ref>. Individuals are assigned a rank based on their fitness and we can interpret this rank as an assigned fitness value [28]. <p> If random-num 2 <ref> [0; 1] </ref> &gt; pcross, then introduce both individuals into the next generation with equal probability, else (a) KNUX ((a; (b) to produce offspring c. (b) Mutate c. (c) Perform hill-climbing on offspring, HillClimb (c). (c) Introduce c into the next generation. fl end while end while in more than one partition),
Reference: [2] <author> L. Booker, </author> <title> "Improving search in genetic algorithms," Genetic Algorithms and Simulated Annealing, </title> <editor> L. Davis, </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: It is referred to as one-point crossover since a single site is chosen for splitting the chromosome. 2. Since the probability of schema disruption using one-point crossover is proportional to the defining length of a schema, Spears and DeJong [25] suggested (and Booker <ref> [2] </ref> later confirmed) that a reduction in the disruptive effect could be obtained by choosing two crossover points instead of one. This was shown empirically to lead to an improved per formance. 3.
Reference: [3] <author> Alok Choudhary, Geoffrey C. Fox, Seema Hiranandani, Ken Kennedy, Charles Koelbel, Sanjay Ranka, and Joel Saltz, </author> <title> "Software support for irregular and loosely synchronous problems," </title> <booktitle> In Proceedings of the Conference on High Performance Computing for Flight Vehicles, </booktitle> <year> 1992. </year>
Reference-contexts: Obtaining suboptimal solutions quickly is desirable and often satisfactory. For a large class of irregular and adaptive data parallel applications such as adaptive meshes <ref> [3] </ref>, the computational structure changes from one phase to another in an incremental fashion. In "incremental graph partitioning" problems, the partitioning of the graph needs to be updated as the graph changes over time; a small number of nodes or edges may be added or deleted at any given instant.
Reference: [4] <author> Yeh-Ching Chung, Sanjay Ranka, </author> <title> "Mapping finite element graphs on hypercubes," </title> <journal> The Journal of Supercomputing, </journal> <volume> 6, </volume> <year> 1992, </year> <pages> pp. 257-282. </pages>
Reference-contexts: found Using DKNUX and RSB: starting with a population initialized with an IBP solution 5.1.2 Absence of Coordinate Information: Recursive Spectral Bisection In the absence of coordinate information it is possible to assign pseudo-coordinates to the nodes of a graph by using a breadth first search procedure as discussed in <ref> [4] </ref>. Recursive spectral bisection is a heuristic that has been widely reported to give very good solutions to the graph partitioning problem. This eigenvalue method does not use coordinate information and can thus be applied to graphs where such knowledge is not available.
Reference: [5] <author> Cohoon, Martin, and Richards, </author> <title> "A multi-population genetic algorithm for solving the k-partition problem on hypercubes," </title> <booktitle> Proc. 4th ICGA, </booktitle> <year> 1991, </year> <pages> pp. 244-248. </pages>
Reference-contexts: Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem <ref> [5, 17, 14, 15] </ref>. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results. However, our experiments with the traditional crossover operators used by some of these researchers gave results of lower quality than using the operators presented in this paper. <p> partitioned into, b = number of boundary points in a partition (a boundary node is one whose nearest neighbors lie 3 Several researchers have made a very strong case for distributed genetic algorithms such as DPGA with advantages ranging from linear scalable speedups to improved solution quality due to niching <ref> [27, 18, 24, 5] </ref>. The results of a study conducted by Collins and Jefferson [6] indicates that local mating is more appropriate for artificial evolution than panmictic mating, i.e., where any individual can mate with any other.
Reference: [6] <author> R. Collins and D. Jefferson, </author> <title> "Selection in massively parallel genetic algorithms," </title> <booktitle> Proc. 4th ICGA, </booktitle> <year> 1991, </year> <pages> pp. 249-256. </pages>
Reference-contexts: The results of a study conducted by Collins and Jefferson <ref> [6] </ref> indicates that local mating is more appropriate for artificial evolution than panmictic mating, i.e., where any individual can mate with any other. It has been observed that genetic algorithms typically converge on a single peak of a multi-modal objective function when several solutions of equal quality exist.
Reference: [7] <author> F. Ercal, </author> <title> "Heuristic Approaches to Task Allocation for Parallel Computing", </title> <type> Ph.D. Thesis, </type> <institution> Ohio State University , 1988. </institution> <month> 19 </month>
Reference-contexts: Important heuristics include recursive coordinate bisection, recursive graph bisection, recursive spectral bisection, mincut based methods, clustering techniques, geometry-based mapping, block-based spatial decomposition, and scattered decomposition <ref> [7, 8, 9, 13, 19, 21, 22, 29] </ref>. Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem [5, 17, 14, 15]. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results.
Reference: [8] <author> Geoffrey C. Fox, </author> <title> "A graphical approach to load balancing and sparse matrix vector multiplication on the hypercube," Numerical Algorithms for Modern Parallel Computers, </title> <editor> M. Schultz, ed., </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: Important heuristics include recursive coordinate bisection, recursive graph bisection, recursive spectral bisection, mincut based methods, clustering techniques, geometry-based mapping, block-based spatial decomposition, and scattered decomposition <ref> [7, 8, 9, 13, 19, 21, 22, 29] </ref>. Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem [5, 17, 14, 15]. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results.
Reference: [9] <author> Geoffrey C. Fox, M. Johnson, G. Lyzenga, S. Otto, J. Salmon and D. Walker, </author> <title> Solving Problems on Concurrent Processors, </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: Important heuristics include recursive coordinate bisection, recursive graph bisection, recursive spectral bisection, mincut based methods, clustering techniques, geometry-based mapping, block-based spatial decomposition, and scattered decomposition <ref> [7, 8, 9, 13, 19, 21, 22, 29] </ref>. Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem [5, 17, 14, 15]. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results.
Reference: [10] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability, </title> <address> San Francisco, CA, </address> <publisher> Freeman, </publisher> <year> (1979), </year> <pages> pp. 209-210. </pages>
Reference-contexts: The computational graph often has the property that adjacent vertices are physically proximate, and vice versa. For many applications, the computational graph can be derived only at runtime, and requires that graph partitioning also be done in parallel. Like all good things in life, graph-partitioning is NP-complete <ref> [10] </ref>. Optimally bipartitioning a 1000-node graph may require examining a search space of O (2 1000 ), and no machine would wait to obtain such a solution. Obtaining suboptimal solutions quickly is desirable and often satisfactory.
Reference: [11] <author> J. J. Grefenstette, </author> <title> "Incorporating problem specific knowledge into genetic Algorithms," Genetic Algorithms and Simulated Annealing, </title> <editor> L. Davis, ed., </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: For a more detailed discussion on population seeding the reader is referred to <ref> [11] </ref>. 2 It increases population diversity, and also ensures that the search space remains fully connected, so that the search process does not become restricted to a small subspace. 5 * The crossover rate should be chosen so as to balance exploration with exploitation: if it is too high, high performance <p> This leads to orders of magnitude improvement over traditional genetic techniques without an increase in computational cost. A precedent for incorporating knowledge into the crossover operator is <ref> [11] </ref>, wherein Grefenstette solved the Traveling Salesperson Problem (TSP) by using the cost of tour edges in the construction of offspring. We propose a more general formulation of KNUX, a knowledge-based nonuniform crossover operator. The uniform crossover operator (UX) selects either bit of the parent with equal probability.
Reference: [12] <author> J. H. Holland, </author> <booktitle> Adaption in Natural and Artificial Systems, </booktitle> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, </address> <year> 1975. </year>
Reference-contexts: If the computational load is balanced in all partitions it is enough to minimize P 3 2 Genetic Algorithms Genetic algorithms are stochastic state-space search techniques modeled on natural evolutionary mechanisms <ref> [12] </ref>. Though they are powerful, robust methods, applicable to a wide range of problems, satisfactory performance often necessitates tailoring them to the task at hand. <p> The most important operator is crossover, which extracts different pieces of information from two parent chromosomes, resulting in an offspring that inherits certain schema from its parents, while creating new ones. 2.3.1 Crossover There are many kinds of crossover operators, and their choice is problem-dependent. 1. Holland <ref> [12] </ref> suggested the one-point crossover operator, which is defined in terms of a `crossover point,' i.e., a place between loci of a chromosome where individuals can be split. Let ff and fi represent strings. <p> According to Holland's Schema Theorem <ref> [12] </ref>, schema that have been observed to have a higher average fitness are allocated an exponentially increasing number of trials by commonly used genetic algorithms. This strategy is optimal: in applying a genetic algorithm to the k-armed bandit problem, for instance, one can show that the strategy maximizes payoff.
Reference: [13] <author> E. N. Houstis et al., </author> <title> "A numerical simulation programming environment for parallel MIMD machines," </title> <booktitle> Proc.Int. Conf. on Supercomputing, </booktitle> <publisher> ACM Press, </publisher> <pages> 3-23. </pages>
Reference-contexts: Important heuristics include recursive coordinate bisection, recursive graph bisection, recursive spectral bisection, mincut based methods, clustering techniques, geometry-based mapping, block-based spatial decomposition, and scattered decomposition <ref> [7, 8, 9, 13, 19, 21, 22, 29] </ref>. Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem [5, 17, 14, 15]. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results.
Reference: [14] <author> D. R. Jones and M. A. Beltramo, </author> <title> "Solving partitioning problems with genetic algorithms," </title> <booktitle> Proc. of the 4th ICGA, </booktitle> <year> 1991, </year> <pages> pp. 442-450. </pages>
Reference-contexts: Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem <ref> [5, 17, 14, 15] </ref>. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results. However, our experiments with the traditional crossover operators used by some of these researchers gave results of lower quality than using the operators presented in this paper.
Reference: [15] <author> Gregor von Laszewski, </author> <title> "Intelligent structural operators for the k-way graph partitioning problem," </title> <booktitle> Proc. of the 4th ICGA, </booktitle> <year> 1991, </year> <pages> pp. 45-52. </pages>
Reference-contexts: Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem <ref> [5, 17, 14, 15] </ref>. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results. However, our experiments with the traditional crossover operators used by some of these researchers gave results of lower quality than using the operators presented in this paper.
Reference: [16] <author> Harpal Maini, Kishan Mehrotra, Chilukuri Mohan, Sanjay Ranka, </author> <title> "Genetic algorithms for soft-decision decoding of linear block codes," </title> <type> Technical Report SU-CIS-93-25, </type> <institution> School of Computer and Information Science, Syracuse University, </institution> <year> 1993. </year>
Reference-contexts: In the rest of this section, we describe how p i values are obtained for the graph partitioning problem. Elsewhere, we have successfully applied this operator to the soft-decision decoding problem <ref> [16] </ref>. 3.1 Obtaining bias probabilities for graph partitioning We obtain the vector p by first generating an initial candidate solution. From this initial solution, locality information about the graph can be used to give a probability structure to each component in the crossover mask. <p> The crossover operators introduced for this purpose, KNUX and DKNUX, have also been applied with great success to another NP-hard optimization problem: soft-decision decoding of linear block codes <ref> [16] </ref>. We believe these methods will find wide application in optimization problems. We also believe that these 17 methods are especially well suited to incremental problems. We have compared DPGA with a systematic exhaustive procedure that examines the same number of candidate solutions as the genetic algorithm.
Reference: [17] <author> Nashat Mansour, </author> <title> Physical Optimization Algorithms for Mapping Data to Distributed-Memory Multiprocessors, </title> <type> Ph.D. Thesis, </type> <institution> School of Computer and Information Science, Syracuse University, </institution> <year> 1992. </year>
Reference-contexts: Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem <ref> [5, 17, 14, 15] </ref>. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results. However, our experiments with the traditional crossover operators used by some of these researchers gave results of lower quality than using the operators presented in this paper.
Reference: [18] <author> H. Muhlenbein, </author> <title> "Parallel genetic algorithms, population genetics and combinatorial optimization," </title> <booktitle> Proc. 3rd ICGA, </booktitle> <year> 1989, </year> <pages> pp. 416-422. </pages>
Reference-contexts: partitioned into, b = number of boundary points in a partition (a boundary node is one whose nearest neighbors lie 3 Several researchers have made a very strong case for distributed genetic algorithms such as DPGA with advantages ranging from linear scalable speedups to improved solution quality due to niching <ref> [27, 18, 24, 5] </ref>. The results of a study conducted by Collins and Jefferson [6] indicates that local mating is more appropriate for artificial evolution than panmictic mating, i.e., where any individual can mate with any other.
Reference: [19] <author> S. Nolting, </author> <title> "Nonlinear adaptive finite element systems on distributed memory computers," </title> <booktitle> Proc. European Distributed Memory Computing Conference (April), </booktitle> <year> 1991, </year> <pages> pp. 283-293. </pages>
Reference-contexts: Important heuristics include recursive coordinate bisection, recursive graph bisection, recursive spectral bisection, mincut based methods, clustering techniques, geometry-based mapping, block-based spatial decomposition, and scattered decomposition <ref> [7, 8, 9, 13, 19, 21, 22, 29] </ref>. Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem [5, 17, 14, 15]. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results.
Reference: [20] <author> Chao-Wei Ou, Sanjay Ranka, and Geoffrey Fox, </author> <title> "Fast mapping and remapping algorithm for irregular and adaptive problems," </title> <booktitle> Proc. of the International Conference on Parallel and Distributed Computing, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: The initial solution can be obtained by any reasonable "heuristic" such as the Index Based Partitioner, if coordinate information is available. In the absence of coordinate information, it is possible to use breadth-first search techniques such as the "graph-layering" heuristic discussed in <ref> [20] </ref>. The DKNUX operator uses a random or other good initial solution, dynamically changing the vector p as generations proceed; this allows use of successively better solutions to bias the crossover mechanism. <p> discuss the relative performance of KNUX and DKNUX when the initial population is seeded with a heuristic solution. 13 5.1.1 Utilizing Coordinate Information: Index Based Partitioner We have experimented with graphs that have 258, 167, 144 and 66 nodes which are illustrated in such as the Index Based Partitioning method <ref> [20] </ref>. This heuristic utilizes the inherent proximity of graph nodes as given by their coordinates to determine an approximate partition of the graph.
Reference: [21] <author> A. Pothen, H. Simon, and K-P. Liou, </author> <title> "Partitioning sparse matrices with eigenvectors of graphs," </title> <journal> SIAM J. Matrix Anal. Appl., </journal> <volume> 11, </volume> <month> 3 (July), </month> <year> 1990, </year> <pages> pp. 430-452. </pages>
Reference-contexts: Important heuristics include recursive coordinate bisection, recursive graph bisection, recursive spectral bisection, mincut based methods, clustering techniques, geometry-based mapping, block-based spatial decomposition, and scattered decomposition <ref> [7, 8, 9, 13, 19, 21, 22, 29] </ref>. Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem [5, 17, 14, 15]. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results.
Reference: [22] <author> H. Simon, </author> <title> "Partitioning of unstructured mesh problems for parallel processing," </title> <booktitle> Proc. Conf. Parallel Methods on Large Scale Structural Analysis and Physics Applications, </booktitle> <publisher> Permagon Press, </publisher> <year> 1991. </year> <month> 20 </month>
Reference-contexts: Important heuristics include recursive coordinate bisection, recursive graph bisection, recursive spectral bisection, mincut based methods, clustering techniques, geometry-based mapping, block-based spatial decomposition, and scattered decomposition <ref> [7, 8, 9, 13, 19, 21, 22, 29] </ref>. Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem [5, 17, 14, 15]. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results.
Reference: [23] <author> S. T. Barnard, H. D. Simon, </author> <title> "A fast multilevel implementation of recursive spectral bisection for partitioning unstructured problems." </title> <booktitle> Proc. of the 3rd ICGA, </booktitle> <year> 1989, </year> <pages> pp. 116-121. </pages>
Reference-contexts: We are currently parallelizing the algorithm to run on distributed memory machines such as the CM-5 and the Intel Paragon. We have applied these techniques to partitioning small graphs although a prior graph contraction step would allow these techniques to be applied to larger graphs <ref> [23] </ref>. Actually, the improvements mentioned here would be correspondingly scaled up in relation to the larger graph. 7 Acknowledgements We gratefully acknowledge all the help provided by Chao Wei-Ou and Tseng Hui Lin. Discussions with Chao Wei-Ou, Rahul Bharagava and Virinder Singh were enlightening.
Reference: [24] <author> M. G. Schleuter, </author> <title> "An asynchronous parallel genetic optimization strategy," </title> <booktitle> Proc. 3rd ICGA, </booktitle> <year> 1989, </year> <pages> pp. 422-428. </pages>
Reference-contexts: partitioned into, b = number of boundary points in a partition (a boundary node is one whose nearest neighbors lie 3 Several researchers have made a very strong case for distributed genetic algorithms such as DPGA with advantages ranging from linear scalable speedups to improved solution quality due to niching <ref> [27, 18, 24, 5] </ref>. The results of a study conducted by Collins and Jefferson [6] indicates that local mating is more appropriate for artificial evolution than panmictic mating, i.e., where any individual can mate with any other.
Reference: [25] <author> W. M. Spears and K. A. DeJong, </author> <title> "An analysis of multipoint crossover," Foundations of Genetic Algorithms edited by G. </title> <editor> Rawlins, </editor> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: It is referred to as one-point crossover since a single site is chosen for splitting the chromosome. 2. Since the probability of schema disruption using one-point crossover is proportional to the defining length of a schema, Spears and DeJong <ref> [25] </ref> suggested (and Booker [2] later confirmed) that a reduction in the disruptive effect could be obtained by choosing two crossover points instead of one. This was shown empirically to lead to an improved per formance. 3.
Reference: [26] <author> G. Syswerda, </author> <title> "Uniform crossover in genetic algorithms," </title> <booktitle> Proc. of the 3rd ICGA, </booktitle> <year> 1989, </year> <pages> pp. 2-9. </pages>
Reference-contexts: This was shown empirically to lead to an improved per formance. 3. A natural generalization of two-point crossover is k-point crossover where k could be as large as the number of nodes in the graph. 4. Uniform crossover, considered in <ref> [26] </ref>, can be viewed as a generalization of k-point crossover, where 0 k chromosome length. k-point crossover can be understood in terms of a bit- "crossover mask" [26]. <p> Uniform crossover, considered in <ref> [26] </ref>, can be viewed as a generalization of k-point crossover, where 0 k chromosome length. k-point crossover can be understood in terms of a bit- "crossover mask" [26]. The i th bit of the offspring is inherited from one parent if the i th bit in the mask is 0, and from the second parent otherwise. For instance, the mask 000011110000 represents a two-point crossover with the crossover points being positions 4 and 8.
Reference: [27] <author> Reiko Tanese, </author> <title> "Distributed genetic algorithms," </title> <booktitle> Proc. Third ICGA, </booktitle> <year> 1989, </year> <pages> pp. 434-439. </pages>
Reference-contexts: partitioned into, b = number of boundary points in a partition (a boundary node is one whose nearest neighbors lie 3 Several researchers have made a very strong case for distributed genetic algorithms such as DPGA with advantages ranging from linear scalable speedups to improved solution quality due to niching <ref> [27, 18, 24, 5] </ref>. The results of a study conducted by Collins and Jefferson [6] indicates that local mating is more appropriate for artificial evolution than panmictic mating, i.e., where any individual can mate with any other.
Reference: [28] <author> D. Whitley, </author> <title> "The GENITOR algorithm and selection pressure: Why rank-based allocation of reproductive trials is best," </title> <booktitle> Proc. Third ICGA, </booktitle> <year> 1989, </year> <pages> pp 116-121. </pages>
Reference-contexts: In our algorithms, utilizing KNUX, we use ranking selection instead of fitness proportionate selection [1]. Individuals are assigned a rank based on their fitness and we can interpret this rank as an assigned fitness value <ref> [28] </ref>. Therefore, instead of using the fitness ratio av (S; t)=F av (t), we use F = P i2S rank (i)=n (S; t), where rank (i) = rank of individual i, and n (S; t) is the number of instances of schema S, in the population at time t.
Reference: [29] <author> R. D. Williams, </author> <title> "Performance of dynamic load balancing algorithms for unstructured mesh calculations," </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3(5), </volume> <year> 1991, </year> <pages> pp. 457-481. </pages>
Reference-contexts: Important heuristics include recursive coordinate bisection, recursive graph bisection, recursive spectral bisection, mincut based methods, clustering techniques, geometry-based mapping, block-based spatial decomposition, and scattered decomposition <ref> [7, 8, 9, 13, 19, 21, 22, 29] </ref>. Genetic algorithms have been used in the past to find good suboptimal solutions to the graph-partitioning problem [5, 17, 14, 15]. Exact comparisons of the different algorithms are not available due to the nonexistence of benchmark problems and results.
Reference: [30] <author> D. Goldberg, K. Deb, </author> <title> "A Comparitive Analysis of Selection Schemes used in Genetic Algorithms", Foundations of Genetic Algorithms edited by G. </title> <editor> Rawlins, </editor> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: The traditional selection strategy is "fitness proportionate" selection, allocating each individual a number of offspring that is roughly proportional to its fitness. We prefer to use the ranking selection method which assigns a measure of reproduction capability to each individual in a sorted population. Goldberg and Deb <ref> [30] </ref>, argue that ranking selection maintains a strong growth rate under normal conditions while proportionate selection without scaling is shown to be less effective in keeping a steady pressure towards convergence. 3 New Crossover Operators Traditional genetic algorithms (GA's) are widely applicable weak methods, which do not perform very well in

References-found: 30

