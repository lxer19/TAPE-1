URL: ftp://ftp.cs.columbia.edu/reports/reports-1991/cucs-032-91.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1991.html
Root-URL: http://www.cs.columbia.edu
Phone: (212) 854-2736  
Title: Marvel 3.0 Administrator's Manual Programming Systems  
Note: c fl1991, Programming Systems Laboratory All Rights Reserved  
Date: October 9, 1991  
Address: Building New York, NY 10027  
Affiliation: Columbia University 450 Computer Science  
Pubnum: Laboratory  TR CUCS-032-91  
Abstract: The Programming Systems Laboratory is supported by National Science Foundation grants CCR-9106368, CCR-9000930 and CCR-8858029, by grants from AT&T, BNR, DEC and SRA, by the New York State Center for Advanced Technology in Computers and Information Systems and by the NSF Engineering Research Center for Telecommunications Research. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Naser S. Barghouti. </author> <title> Concurrency Control in Rule-Based Software Development Environments. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <year> 1991. </year>
Reference-contexts: Marvel 3.1 (expected to be released around January 1992) will support relaxation of serializability as defined by the administrator in the coordination model, specified in terms of control rules, which describe how to handle conflicts among particular kinds of rules. Refer to <ref> [1] </ref> for an extensive discussion of these issues. 1.3.1 System Components the implementor's manual and to [5]. The server is composed of the following modules: * Storage Manager (SM) This bottom layer provides persistent storage and controls the flow of data from main to secondary storage.
Reference: [2] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Implementation of a knowledge-based programming environment. </title> <booktitle> In 21st Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 54-63, </pages> <address> Kona HI, </address> <month> January </month> <year> 1988. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: A selected list follows: (the full list is presented in the preface). The concept of Marvel and the implementation details of the single-user version are covered in <ref> [7, 12, 2, 8, 13] </ref>. Our experience using single-user Marvel is documented in [6]. The concept of the multi-user version of Marvel and the problems encountered when scaling up the system are described in [3, 4, 5].
Reference: [3] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Modeling concurrency in rule-based development environments. </title> <journal> IEEE Expert, </journal> <volume> 5(6) </volume> <pages> 15-27, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: The concept of Marvel and the implementation details of the single-user version are covered in [7, 12, 2, 8, 13]. Our experience using single-user Marvel is documented in [6]. The concept of the multi-user version of Marvel and the problems encountered when scaling up the system are described in <ref> [3, 4, 5] </ref>.
Reference: [4] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Multi-agent rule-based software development environments. </title> <booktitle> In 5th Annual Knowledge-Based Software Assistant Conference, </booktitle> <pages> pages 375-387, </pages> <address> Syracuse NY, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: The concept of Marvel and the implementation details of the single-user version are covered in [7, 12, 2, 8, 13]. Our experience using single-user Marvel is documented in [6]. The concept of the multi-user version of Marvel and the problems encountered when scaling up the system are described in <ref> [3, 4, 5] </ref>.
Reference: [5] <author> Israel Z. Ben-Shaul. </author> <title> An object management system for multi-user programming environments. </title> <type> Master's thesis, </type> <institution> Columbia University, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: The concept of Marvel and the implementation details of the single-user version are covered in [7, 12, 2, 8, 13]. Our experience using single-user Marvel is documented in [6]. The concept of the multi-user version of Marvel and the problems encountered when scaling up the system are described in <ref> [3, 4, 5] </ref>. <p> Our experience integrating external tools through SEL, our shell envelope language, are described in [10]. 7 Further work on the rule processor, in particular the dynamic binding of parameters during chaining, is described in [9]. 1.3 System Overview The Marvel system is based on a client/server architecture <ref> [5] </ref>, where the clients communicate with the server via tcp/ip sockets. A Marvel server can support zero or more clients sharing access to the same objectbase. <p> Refer to [1] for an extensive discussion of these issues. 1.3.1 System Components the implementor's manual and to <ref> [5] </ref>. The server is composed of the following modules: * Storage Manager (SM) This bottom layer provides persistent storage and controls the flow of data from main to secondary storage. This layer has no knowledge of the data model and therefore can be easily replaced.
Reference: [6] <author> Naser S. Barghouti Gail E. Kaiser and Michael H. Sokolsky. </author> <title> Experience with process modeling in the marvel software development environment kernel. </title> <editor> In Bruce Shriver, editor, </editor> <booktitle> 23rd Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 131-140, </pages> <address> Kona HI, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: A selected list follows: (the full list is presented in the preface). The concept of Marvel and the implementation details of the single-user version are covered in [7, 12, 2, 8, 13]. Our experience using single-user Marvel is documented in <ref> [6] </ref>. The concept of the multi-user version of Marvel and the problems encountered when scaling up the system are described in [3, 4, 5].
Reference: [7] <author> Peter H. Feiler Gail E. Kaiser and Steven S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <volume> 5(3) </volume> <pages> 40-49, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: A selected list follows: (the full list is presented in the preface). The concept of Marvel and the implementation details of the single-user version are covered in <ref> [7, 12, 2, 8, 13] </ref>. Our experience using single-user Marvel is documented in [6]. The concept of the multi-user version of Marvel and the problems encountered when scaling up the system are described in [3, 4, 5].
Reference: [8] <author> Peter H. Feiler Gail E. Kaiser, Naser S. Barghouti and Robert W. Schwanke. </author> <title> Database support for knowledge-based engineering environments. </title> <journal> IEEE Expert, </journal> <volume> 3(2) </volume> <pages> 18-32, </pages> <month> Summer </month> <year> 1988. </year>
Reference-contexts: A selected list follows: (the full list is presented in the preface). The concept of Marvel and the implementation details of the single-user version are covered in <ref> [7, 12, 2, 8, 13] </ref>. Our experience using single-user Marvel is documented in [6]. The concept of the multi-user version of Marvel and the problems encountered when scaling up the system are described in [3, 4, 5].
Reference: [9] <author> Naser S. Barghouti George T. Heineman, Gail E. Kaiser and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <booktitle> In 6th Knowledge-Based Software Engineering Conference, </booktitle> <pages> pages 276-287, </pages> <address> Syracuse NY, </address> <month> September </month> <year> 1991. </year> <institution> Rome Laboratory. </institution>
Reference-contexts: Our experience integrating external tools through SEL, our shell envelope language, are described in [10]. 7 Further work on the rule processor, in particular the dynamic binding of parameters during chaining, is described in <ref> [9] </ref>. 1.3 System Overview The Marvel system is based on a client/server architecture [5], where the clients communicate with the server via tcp/ip sockets. A Marvel server can support zero or more clients sharing access to the same objectbase. <p> This is another reason why purely associative queries are not encouraged in Marvel . However, a combination of associative and navigational queries in an AND clause, will still allow to find the parameter objects always. For more information on parameter-passing refer to <ref> [9] </ref>. 45 3.6 The Environment Directory All the information about a specific environment is contained in a specific directory, called the "environment" directory. When either the server or the client are invoked, they try to connect to the current directory as the environment.
Reference: [10] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <booktitle> In 1st International Conference on the Software Process, </booktitle> <address> Los Angeles CA, </address> <month> Octo-ber </month> <year> 1991. </year> <note> In press. </note> <institution> Available as Columbia University Department of Computer Science CUCS-014-91, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Our experience using single-user Marvel is documented in [6]. The concept of the multi-user version of Marvel and the problems encountered when scaling up the system are described in [3, 4, 5]. Our experience integrating external tools through SEL, our shell envelope language, are described in <ref> [10] </ref>. 7 Further work on the rule processor, in particular the dynamic binding of parameters during chaining, is described in [9]. 1.3 System Overview The Marvel system is based on a client/server architecture [5], where the clients communicate with the server via tcp/ip sockets. <p> The error return in the example envelope returns a literal null string as the ret string parameter. For more imformation on the envelope mechanism, refer to <ref> [10] </ref>. 51 5 Administrator's Built-in commands This section describes the subset of the Marvel commands that can be invoked only by the administrator. For the rest of the commands, refer to Marvel user's manual.
Reference: [11] <author> Gail E. Kaiser Israel Z. Ben-Shaul and Naser S. Barghouti. </author> <title> An object-oriented framework for rule-based development environments. </title> <booktitle> In ECOOP/OOPSLA '90 Workshop on Object-Oriented Program Development Environments, </booktitle> <address> Ottawa, Canada, </address> <month> October </month> <year> 1990. </year> <note> Position paper. 138 </note>
Reference-contexts: If the second rule didn't exist and the user requested the compile rule on an object O f of class file, Marvel would report that the compile rule can't be invoked with that argument. For more information refer to <ref> [11] </ref>. 3.4.8 Importing and Exporting Strategies Rules are written in files called strategies. Each msl source file must have a ".load" extension since the loader searches only for such files. Marvel provides for some degree of modularity in writing rules, using the import and export operators.
Reference: [12] <author> Gail E. Kaiser and Peter H. Feiler. </author> <title> An architecture for intelligent assistance in software development. </title> <booktitle> In 9th International Conference on Software Engineering, </booktitle> <pages> pages 180-188, </pages> <address> Monterey CA, March 1987. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: A selected list follows: (the full list is presented in the preface). The concept of Marvel and the implementation details of the single-user version are covered in <ref> [7, 12, 2, 8, 13] </ref>. Our experience using single-user Marvel is documented in [6]. The concept of the multi-user version of Marvel and the problems encountered when scaling up the system are described in [3, 4, 5].
Reference: [13] <author> Michael H. Sokolsky and Gail E. Kaiser. </author> <title> A framework for immigrating existing software into new software development environments. </title> <journal> Software Engineering Journal, </journal> <note> 1991. In press. </note> <institution> Available as Columbia University Department of Computer Science CUCS-027-90, </institution> <month> May </month> <year> 1990. </year> <month> 139 </month>
Reference-contexts: A selected list follows: (the full list is presented in the preface). The concept of Marvel and the implementation details of the single-user version are covered in <ref> [7, 12, 2, 8, 13] </ref>. Our experience using single-user Marvel is documented in [6]. The concept of the multi-user version of Marvel and the problems encountered when scaling up the system are described in [3, 4, 5]. <p> The messages might indicate either a new command (either built-in or a rule) or the completion of an activity. The server takes a message from the queue. If it is a built-in, it executes the command atomically even if it is an extremely long duration command, notably Marvelizer <ref> [13] </ref>. Marvel 3.0's concurrency control mechanism supports relatively conventional seri-alizability among multiple users. Rules are subtransactions and rule chains are nested transactions. Two-phase locking is used to enforce serializability. <p> Marvel 2.6 had two immigration 53 tools available: The Marvelizer, for simple immigration, and the Complex Mar--velizer (CM), for immigration of complex source SDEs. However, Marvel 3.0 has only a simple Marvelizer . More information about the complex Marvelizer can be found in <ref> [13] </ref>.
References-found: 13

