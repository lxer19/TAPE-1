URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9303.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Title: Protection in a Persistent Global Virtual Memory System  
Author: Jerry Vochteloo, Stephen Russell, Gernot Heiser 
Affiliation: SCHOOL OF COMPUTER SCIENCE AND ENGINEERING THE UNIVERSITY OF NEW SOUTH WALES  
Note: Capability-Based  
Abstract: SCS&E Report 9303 March, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Atkinson, P. Bailey, K. Chisholm, P. Cockshott, and R. Morrison. </author> <title> An approach to persistent programming. </title> <journal> The Computer Journal, </journal> <volume> 26 </volume> <pages> 360-5, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction Persistent systems (PS) offer the potential to greatly simplify application programming, as complex memory data structures no longer have to be translated into low-level linear arrays for permanent storage <ref> [1] </ref>. However, their practical use has so far been hampered by the problems associated with the storage of pointers on secondary memory, which lose their meaning if taken out of their address-space.
Reference: [2] <author> S. Russell, A. Skea, K. Elphinstone, G. Heiser, K. Burston, I. Gorton, and G. Hellestrand. </author> <title> Distribution + persistence = global virtual memory. </title> <editor> In L.-F. Cabrera and E. Jul, editors, </editor> <booktitle> International Workshop on Object Orientation in Operating Systems, </booktitle> <volume> volume 2, </volume> <pages> pages 96-99, </pages> <address> Dourdan, France, 1992. </address> <publisher> IEEE. </publisher>
Reference-contexts: However, their practical use has so far been hampered by the problems associated with the storage of pointers on secondary memory, which lose their meaning if taken out of their address-space. As we have pointed out earlier <ref> [2] </ref>, a clean and elegant solution to this dilemma is to provide an all-encompassing single address-space, which contains the virtual memory of all processes on all nodes in a distributed computing system.
Reference: [3] <institution> MIPS Computer Systems, Inc., Sunnyvale, CA. </institution> <note> MIPS R4000 Microprocessor User's Manual, 1st edition, </note> <year> 1991. </year>
Reference-contexts: Such a global virtual memory system (GVMS) is automatically persistent as the validity of an object's address is decoupled from the existence of the object's creator process. The recent advent of 64-bit microprocessors (MIPS R4000 <ref> [3] </ref> and DEC Alpha [4]) makes such a single address-space operating system possible. In the GVMS user processes only see a single, flat virtual memory. An individually allocated segment of virtual memory is called an object; objects are page-aligned and are the basic unit of protection.
Reference: [4] <institution> Digital Equipment Corp., Maynard, MA. Alpha Architecture Handbook, </institution> <year> 1992. </year>
Reference-contexts: Such a global virtual memory system (GVMS) is automatically persistent as the validity of an object's address is decoupled from the existence of the object's creator process. The recent advent of 64-bit microprocessors (MIPS R4000 [3] and DEC Alpha <ref> [4] </ref>) makes such a single address-space operating system possible. In the GVMS user processes only see a single, flat virtual memory. An individually allocated segment of virtual memory is called an object; objects are page-aligned and are the basic unit of protection.
Reference: [5] <author> G. Heiser, K. Elphinstone, S. Russell, and G. R. Hellestrand. </author> <title> A distributed single address space system supporting persistence. </title> <institution> School of Computer Science and Engineering Report 9302, University of NSW, Kensington, NSW, Australia, </institution> <year> 2033, </year> <month> March </month> <year> 1993. </year>
Reference-contexts: More details of the system, including support for replication and fault tolerance, can be found in <ref> [5] </ref>. Potentially the biggest problem associated with a single address-space is security.
Reference: [6] <author> M. Anderson, R. Pose, and C. Wallace. </author> <title> A password-capability system. </title> <journal> The Computer Journal, </journal> <volume> 29(1) </volume> <pages> 1-8, </pages> <year> 1986. </year>
Reference-contexts: In a single address-space, however, every object is visible to each process, and no explicit system interaction is required to access an arbitrary object. Different protection mechanisms, which do not depend on address-space separation, must be employed in the GVMS. We propose a system based on password capabilities <ref> [6] </ref>, which is largely transparent to the user, yet maintains a level of protection comparable to traditional approaches. In particular it gives users control over their protection domains and allows them to deal safely with untrusted programs. A set-uid-like service for temporary extension of protection domains is also provided.
Reference: [7] <author> M. Anderson and C. Wallace. </author> <title> Some comments on the implementation of capabilities. </title> <journal> The Australian Computer Journal, </journal> <volume> 30(3) </volume> <pages> 122-33, </pages> <year> 1988. </year>
Reference-contexts: Section 6 compares our proposal with other systems described in the literature, and Section 7 contains our conclusions. 1 2 Capabilities in a GVMS 2.1 Password Capabilities Capabilities represent a location-independent object name, and are therefore ideally suited to a GVMS. There are three kinds of capabilities <ref> [7] </ref>: Tagged capabilities are distinguished from normal data by system-maintained hardware memory tags. Since this involves specialised hardware, they were not considered suitable for our system. Partitioned capabilities are kept in protected segments that cannot be manipulated by user programs. <p> These are simply long bit strings which are protected from forgery by the fact that only a very small number of all possible strings are valid capabilities. We have opted for password capabilities, rather that other sparse capability schemes which require encryption <ref> [7] </ref>, making creation and validation of capabilities expensive. Our capabilities consist of two parts: a 64-bit address and an (at least) 64-bit password. Therefore there are two kinds of pointers in our system: plain 64-bit addresses, and capabilities which contain an address as well as the corresponding password.
Reference: [8] <author> A. Jones. </author> <title> Capability architecture revisited. </title> <journal> Operating Systems Review, </journal> <volume> 14(3) </volume> <pages> 33-5, </pages> <year> 1980. </year>
Reference-contexts: Both kinds of pointers can be freely passed around by users, and can be stored in any user-level data structure. The advantage of allowing capabilities (as pointers) to reside in user-level data structures has been pointed out by Jones <ref> [8] </ref>. To make the system easy to use, the protection system aims to be as unintrusive as possible. In the normal case of a plain address being used for accessing memory, a capability must somehow be presented to the system so that it can validate the access.
Reference: [9] <author> S. J. Mullender and A. S. Tanenbaum. </author> <title> The design of a capability-based distributed operating system. </title> <journal> The Computer Journal, </journal> <volume> 29 </volume> <pages> 289-99, </pages> <year> 1986. </year> <month> 11 </month>
Reference-contexts: A scheme is provided which allows users to derive less powerful capabilities as required. This method is similar to one proposed for Amoeba <ref> [9] </ref>. From the owner capability, C rwxd , a new capability C rwx = f (C rwxd ), where f is a well-known one-way function, can be derived which only gives permission to read, write and execute the object. <p> We also do not want to impose limitations on the storage of capabilities, whereas MONADS uses partitioned capabilities which are kept in user-inaccessible system areas. 9 6.2 Amoeba Although not a distributed virtual memory system, Amoeba <ref> [9] </ref> uses sparse capabilities, consisting of the port number of the server responsible for the object, an object id, access rights, and a signature. The signature is computed by applying a one-way function to the access rights and a random number which is stored with the object.
Reference: [10] <author> E. Cohen and D. Jefferson. </author> <title> Protection in the HYDRA operating system. </title> <booktitle> In ACM Symposium on OS Principles, </booktitle> <volume> volume 5, </volume> <pages> pages 141-59, </pages> <year> 1975. </year>
Reference-contexts: To overcome these problems, we introduce an active protection domain (APD), which is a data structure defining the protection domain in which a process is executing. APDs are similar to local name spaces in HYDRA <ref> [10] </ref>, and process resource lists in CAP [11], and consist of an array of Clist and protection fault handler pointers held in the PCB.
Reference: [11] <author> R. Needham and R. Walker. </author> <title> The Cambridge CAP computer and its protection system. </title> <booktitle> In ACM Symposium on OS Principles, </booktitle> <pages> pages 1-10, </pages> <year> 1977. </year>
Reference-contexts: To overcome these problems, we introduce an active protection domain (APD), which is a data structure defining the protection domain in which a process is executing. APDs are similar to local name spaces in HYDRA [10], and process resource lists in CAP <ref> [11] </ref>, and consist of an array of Clist and protection fault handler pointers held in the PCB. <p> We therefore use a fixed-size list in the PCB which can hold up to 16 Clist and handler pointers. This size is based on the experience of the CAP project <ref> [11] </ref>, which also used pointers to capability segments, and which found that six were sufficient (even though there was space for 16).
Reference: [12] <author> E. J. Koldinger, J. S. Chase, and S. J. Eggers. </author> <title> Architectural support for single address space operating systems. </title> <booktitle> In Symposium on Architectural Support for Programming Languages and Operating Systems, </booktitle> <volume> volume 5, </volume> <pages> pages 175-86, </pages> <year> 1992. </year>
Reference-contexts: We propose a special kind of procedure, the PDX (protection domain extension) procedure, to perform a similar task in the GVMS. 3 A similar approach has been proposed by Koldinger et al. <ref> [12] </ref> 8 Each time a user process attempts to call a PDX procedure, the system consults the object table in the usual manner to validate the execute capability for the procedure. <p> The Opal system uses a form of password capabilities called protected pointers to control access to objects. The protected pointers also contain portal numbers which are used in cross-domain procedure calls. As well, the Opal group is investigating hardware mechanisms to support the separation of translation and protection <ref> [12] </ref>. Opal also provides two methods of validating access to an object. The first is by explicitly presenting a capability to the attach system call. Attempts to access unattached objects cause a protection fault and the system then attempts to validate the access implicitly.
Reference: [13] <author> J. Kaiser and K. Czaja. ACOM: </author> <title> An access control monitor providing protection in persistent object-oriented systems. </title> <booktitle> In International Workshop on Persistent Object Systems, </booktitle> <volume> volume 5, </volume> <pages> pages 359-73, </pages> <address> Pisa, Italy, </address> <year> 1992. </year> <month> Morgan-Kauffman. </month>
Reference-contexts: The PLB does not need to be flushed if it is tagged with a process ID. The PLB can also be smaller if it is object-based rather than page-based. Recent work suggests that such a device could be feasible <ref> [13] </ref>. 5 Changing Protection Domains 5.1 Tailoring Protection Domains Enlarging an APD by adding new capabilities is necessary to allow processes to create and share objects.
Reference: [14] <author> D. Cohn, A. Benerji, P. Greenawalt, M. Casey, and D. Kulkarni. </author> <title> Workstation cooperation through a typed distributed shared memory abstraction. </title> <booktitle> In Workshop on Workstation Operating Systems [21], </booktitle> <pages> pages 70-4. </pages>
Reference-contexts: However, the caller can tailor a confined protection domain before calling the procedure if necessary. 6 Comparison In this section we contrast our proposal to other approaches to protection in distributed virtual memory systems. Other GVM-like systems have recently been proposed, but these have either ignored protection <ref> [14, 15, 16] </ref>, or have failed to provide sufficient details of its operation [17]. 6.1 MONADS The MONADS project has long recognised the value of a global address-space for the support of persistence. The system was designed to provide strong support for software engineering principles, such as modularisation and encapsulation.
Reference: [15] <author> M. L. Scott and W. Garrett. </author> <title> Shared memory ought to be commonplace. </title> <booktitle> In Workshop on Workstation Operating Systems [21], </booktitle> <pages> pages 86-90. </pages>
Reference-contexts: However, the caller can tailor a confined protection domain before calling the procedure if necessary. 6 Comparison In this section we contrast our proposal to other approaches to protection in distributed virtual memory systems. Other GVM-like systems have recently been proposed, but these have either ignored protection <ref> [14, 15, 16] </ref>, or have failed to provide sufficient details of its operation [17]. 6.1 MONADS The MONADS project has long recognised the value of a global address-space for the support of persistence. The system was designed to provide strong support for software engineering principles, such as modularisation and encapsulation.
Reference: [16] <author> A. Bartoli, S. J. Mullender, and M. van der Valk. </author> <title> Wide-address spacesexploring the design space. </title> <journal> Operating Systems Review, </journal> <volume> 27 </volume> <pages> 11-17, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: However, the caller can tailor a confined protection domain before calling the procedure if necessary. 6 Comparison In this section we contrast our proposal to other approaches to protection in distributed virtual memory systems. Other GVM-like systems have recently been proposed, but these have either ignored protection <ref> [14, 15, 16] </ref>, or have failed to provide sufficient details of its operation [17]. 6.1 MONADS The MONADS project has long recognised the value of a global address-space for the support of persistence. The system was designed to provide strong support for software engineering principles, such as modularisation and encapsulation.
Reference: [17] <author> J. B. Carter, A. L. Cox, D. B. Johnson, and W. Zwaenepoel. </author> <title> Distributed operating systems based on a protected global virtual address space. </title> <booktitle> In Workshop on Workstation Operating Systems [21], </booktitle> <pages> pages 75-9. </pages>
Reference-contexts: Other GVM-like systems have recently been proposed, but these have either ignored protection [14, 15, 16], or have failed to provide sufficient details of its operation <ref> [17] </ref>. 6.1 MONADS The MONADS project has long recognised the value of a global address-space for the support of persistence. The system was designed to provide strong support for software engineering principles, such as modularisation and encapsulation. The MONADS protection model is a reflection of this fact.
Reference: [18] <author> J. Rosenberg. </author> <title> Architectural support for persistent object systems. </title> <editor> In L.-F. Cabrera, V. Russo, and M. Shapiro, editors, </editor> <booktitle> International Workshop on Object Orientation in Operating Systems, </booktitle> <volume> volume 1, </volume> <pages> pages 48-60, </pages> <address> Palo Alto, USA, 1991. </address> <publisher> IEEE. </publisher>
Reference-contexts: Besides modules (large-grain objects), MONADS also supports fine-grained objects within a module. The two kinds of objects are supported by different access and protection mechanisms, a reflection of differing usage patterns <ref> [18] </ref>. The main disadvantage of MONADS is that it is based on a specialised architecture, and so cannot easily make use of advances in processor design. Porting MONADS to a SPARC, for example, required the development of several items of customised hardware, which was a major investment in effort [19].
Reference: [19] <author> D. Koch and J. Rosenberg. </author> <title> A secure RISC-based architecture supporting data persistence. </title> <editor> In J. Rosenberg and J. L. Keedy, editors, </editor> <booktitle> International Workshop on Computer Architectures to Support Security and Persistence of Information, </booktitle> <pages> pages 188-201, </pages> <address> Bremen, Germany, 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The main disadvantage of MONADS is that it is based on a specialised architecture, and so cannot easily make use of advances in processor design. Porting MONADS to a SPARC, for example, required the development of several items of customised hardware, which was a major investment in effort <ref> [19] </ref>. Our design is based on a conventional architecture, though it is most suited to machines with a software-loaded TLB.
Reference: [20] <author> J. S. Chase, H. M. Levy, E. D. Lazowska, and M. Baker-Harvey. </author> <title> Lightweight shared objects in a 64-bit operating system. </title> <booktitle> In Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <year> 1992. </year>
Reference-contexts: Furthermore, Amoeba has protected directory servers, which contain capabilities. In our system we have completely separated naming from protection by introducing separate data structures. Hence, directory servers do not require special privileges in our system. 6.3 Opal The protection system in Opal <ref> [20] </ref> bears some similarity to our model. The Opal system uses a form of password capabilities called protected pointers to control access to objects. The protected pointers also contain portal numbers which are used in cross-domain procedure calls.
Reference: [21] <editor> IEEE. </editor> <booktitle> Workshop on Workstation Operating Systems, volume 3, </booktitle> <address> Key Biscayne, Florida, </address> <year> 1992. </year>
References-found: 21

