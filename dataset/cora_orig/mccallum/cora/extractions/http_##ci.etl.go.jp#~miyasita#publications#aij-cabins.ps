URL: http://ci.etl.go.jp/~miyasita/publications/aij-cabins.ps
Refering-URL: http://ci.etl.go.jp/~miyasita/projects/CABINS.html
Root-URL: 
Email: miyasita@etl.go.jp  katia@cs.cmu.edu  
Title: CABINS A Framework of Knowledge Acquisition and Iterative Revision for Schedule Improvement and Reactive Repair  
Author: Kazuo Miyashita Katia Sycara 
Date: July 29, 1995  
Address: 1-1-4 Umezono, Tsukuba, Ibaraki 305, JAPAN  Pittsburgh, PA 15213, U.S.A.  
Affiliation: Electrotechnical Laboratory  The Robotics Institute Carnegie Mellon University  
Abstract-found: 0
Intro-found: 1
Reference: [ABZ88] <author> J. Adams, E. Balas, and D. Zawack. </author> <title> The shifting bottleneck procedure for job shop scheduling. </title> <journal> Management Science, </journal> <volume> 34(3) </volume> <pages> 391-401, </pages> <year> 1988. </year>
Reference-contexts: A revision-based approach is attractive for solving practical scheduling problems. There are no known efficient search algorithms for schedule optimization except for a very limited set of simple objectives such as make-span (e.g. <ref> [ABZ88] </ref>) and the amount of computation required for finding a solution is generally unpredictable [Fre82]. <p> It is only after some proposed problem has defied solution by extensive experimentation by many researchers that it is understood ipso facto to be difficult <ref> [ABZ88, Bak74] </ref>.
Reference: [AKA91] <author> David W. Aha, Dennis Kibler, and Marc K. Albert. </author> <title> Instance-based learning algorithms. </title> <journal> Machine Learning, </journal> <volume> 6 </volume> <pages> 37-66, </pages> <year> 1991. </year> <month> 67 </month>
Reference-contexts: Rule-based approaches, while having the potential to capture context-dependent tradeoffs in rules, require considerable knowledge acquisition effort [Pre90]. Our approach uses case-based reasoning (CBR) which has the potential for dealing with noisy data <ref> [RK92, AKA91] </ref>, acquiring user knowledge in complex domains [Cha93, MBS88], and expending less effort in knowledge acquisition compared with knowledge acquisition for rule-based systems [SM91, LMB91].
Reference: [Ash87] <author> K.D. Ashley. </author> <title> Modeling Legal Argument: Reasoning with Cases and Hypotheticals. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, Amherst, </institution> <year> 1987. </year>
Reference-contexts: However, applying CBR to schedule improvement, a numerical optimization problem, is very challenging. In general, CBR has been used for ill-structured symbolic problems, such as planning [Ham89, KH92, Vel92], legal reasoning <ref> [Ash87, RA88] </ref>, argumentation [Syc89], conceptual design [SGK + 91], medical diagnosis [Kot88] where the primary concern has been plausibility or correctness of the resulting artifact (plan, argument, design) and computational efficiency of the process rather than artifact quality.
Reference: [Bak74] <author> K. R. Baker. </author> <title> Introduction to Sequencing and Scheduling. </title> <publisher> Wiley, </publisher> <year> 1974. </year> <note> Course Textbook. </note>
Reference-contexts: Based on the results, we make a variety of observations. First, CABINS improved the initial schedule across all scheduling methods according to the objectives. It should be noted that these dispatch heuristics have been extensively used in Operations Research experimentation with very good results <ref> [Bak74, MRV84] </ref>. The initial schedules generated by the dispatch heuristics can be considered as local minima, in the sense that they cannot be 41 Table 2: Repair by CABINS and SA based on Different Methods of Initial Schedule Generation WT. WIP WT+WIP CPU Sec. <p> It is only after some proposed problem has defied solution by extensive experimentation by many researchers that it is understood ipso facto to be difficult <ref> [ABZ88, Bak74] </ref>.
Reference: [Bar89] <author> Ray Bareiss. </author> <title> Exemplar-Based Knowledge Acquisition : A Unified Approach to Concept Representation, Classification, and Learning. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1989. </year>
Reference-contexts: This method of generating a new case base by random deletion of cases from a bigger case base is similar to the ablation study performed in <ref> [Bar89] </ref>. The initial schedule generation method was CBS. From the viewpoint of knowledge acquisition, an interesting question is when knowledge acquisition can be terminated because sufficient knowledge has been acquired to enable high quality performance of a knowledge based system. <p> Research by [KH92, Vel92] are based on the hypothesis that the plan built by their planner is causally and teleologically correct, and use CBR to find the satisfying plan efficiently. CABINS as a knowledge acquisition system is also related to previous case-based knowledge acquisition systems (e.g. Protos <ref> [Bar89] </ref>). These approaches usually require causal explanations from an expert teacher to acquire domain knowledge. In CBR-based schedule repair embodied in CABINS, neither the user nor the program are assumed to possess causal domain knowledge.
Reference: [BC91] <author> E. Biefeld and L. Cooper. </author> <title> Bottleneck identification using process chronologies. </title> <booktitle> In Proceedings of the 12th International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <pages> pages 218-224, </pages> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: The scheduling problem has been addressed by two general types of methods, constructive scheduling and revision-based scheduling. In constructive approaches (e.g., [Fox83, Sad91]), a schedule is constructed by incremental construction and merging of partial schedules. In revision-based approaches (e.g., <ref> [MJPL90, ZDG90, BC91, LAL92] </ref>) a complete but suboptimal initial schedule is incrementally repaired by several techniques, such as a min-conflict heuristic [MJPL90] or simulated annealing. <p> Our approach, generates schedules by repair based scheduling in the space of complete schedules. In this respect it is similar to <ref> [ZDG90, ZDDD93, MJPL90, BC91] </ref>. In [ZDG90, ZDDD93] simulated annealing has been used to perform iterative repair. <p> This is because min-conflicts relies 57 on a good initial assignment [MJPL92]. The CBR-based repair of CAB--INS, on the other hand has been shown experimentally to improve schedule quality irrespective of initial schedule generation method, although the percent improvement and the quality of the final repaired schedule varies. In <ref> [BC91] </ref> schedule modifications are procedurally encoded. Small snapshots of the scheduling process, called chronologies, are used to focus the search by using information gained incrementally during the scheduling process to locate, classify and resolve bottlenecks.
Reference: [Cha93] <author> Alok R. Chaturvedi. </author> <title> Acquiring implicit knowledge in a complex domain. </title> <journal> Expert Systems With Applications, </journal> <volume> 6(1) </volume> <pages> 23-35, </pages> <year> 1993. </year>
Reference-contexts: Rule-based approaches, while having the potential to capture context-dependent tradeoffs in rules, require considerable knowledge acquisition effort [Pre90]. Our approach uses case-based reasoning (CBR) which has the potential for dealing with noisy data [RK92, AKA91], acquiring user knowledge in complex domains <ref> [Cha93, MBS88] </ref>, and expending less effort in knowledge acquisition compared with knowledge acquisition for rule-based systems [SM91, LMB91]. Because of the characteristics of the scheduling domain described in the previous section and our interest in capturing context dependent user preferences, CBR seems a natural method for knowledge acquisition.
Reference: [CKT91] <author> P. Cheeseman, B. Kanefsky, and W. Taylor. </author> <title> Where the really hard problems are. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: This question, albeit of great theoretical and practical importance, is very difficult to answer in a theoretical way. In contrast to other NP-complete problems (e.g. graph-coloring, satisfiability, traveling salesman) for which insightful analysis has been performed (e.g. <ref> [MR92, CKT91] </ref>) as to their structure and properties that characterize "easy" or "hard" problem instances, similar characterization of job shop schedule optimization problems is currently an open research problem (e.g.[CKT91, Bak74]).
Reference: [CMSW92] <author> Robert H. Creecy, Brij M. Masand, Stephen J. Smith, and David L. Waltz. </author> <title> A traiding MIPS and memory for knowledge engineering. </title> <journal> Communications of ACM, </journal> <volume> 35(8) </volume> <pages> 48-64, </pages> <year> 1992. </year>
Reference-contexts: The repair tactics currently available in CABINS are: 5 This method has been successfully applied in domains without clear causal structure, such as English word pronunciation and text classification in <ref> [SW86, CMSW92] </ref>. 26 left slide : try to move focal activity on the same resource as much to the left on the timeline as possible within the repair time horizon, while preserving the sequence of all the activities. left shift : try to move focal activity on a same resource as
Reference: [Das90] <author> Belur V. Dasarathy, </author> <title> editor. Nearest Neighbor (NN) Norms: NN Pattern Classification Techniques. </title> <publisher> IEEE Computer Society Press, </publisher> <address> Los Alamos, CA, </address> <year> 1990. </year>
Reference-contexts: If the result is acceptable, then CABINS proceeds to repair another activity. For each of the three case retrieval situations described above, CABINS uses a k-Nearest Neighbor method (k-NN) <ref> [Das90] </ref> for case retrieval. The space over which the k-Nearest Neighbor calculation is done is the set of features corresponding to each of the three retrieval situations.
Reference: [DB88] <author> T. Dean and M. Boddy. </author> <title> An analysis of time dependent planning. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 49-54, </pages> <address> Saint Paul, Minnesota, 1988. </address> <publisher> AAAI. </publisher>
Reference-contexts: a feasible solution (e.g. [ZDG90, MJPL90]), where executability of the schedule was not guaranteed at the end of each repair iteration, CABINS produces an executable schedule after each repair that has guaranteed monotonic increase in quality the more time it is allowed for repair, thus exhibiting anytime 4 executable behavior <ref> [DB88] </ref>. This is a very desirable quality especially in reactive contexts since there could only be a certain limited amount of time for the system to react. Our approach uses integration of Case-based Reasoning (CBR) [KSS85] and fine granularity constraint-directed scheduling mechanisms based on [SF90].
Reference: [Fox83] <author> Mark Fox. </author> <title> Constraint-Directed Search: A Case Study in Jop Shop Scheduling. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <year> 1983. </year> <month> 68 </month>
Reference-contexts: It is clear that any effective scheduling system should be reactive, i.e. perform schedule revision in response to unforeseen events during schedule execution. The scheduling problem has been addressed by two general types of methods, constructive scheduling and revision-based scheduling. In constructive approaches (e.g., <ref> [Fox83, Sad91] </ref>), a schedule is constructed by incremental construction and merging of partial schedules. In revision-based approaches (e.g., [MJPL90, ZDG90, BC91, LAL92]) a complete but suboptimal initial schedule is incrementally repaired by several techniques, such as a min-conflict heuristic [MJPL90] or simulated annealing. <p> This information is then used to augment/refine the system's knowledge. The approach seems promising but has not been experimentally tested. Our approach is rooted on concepts and mechanisms of a long line of research in constraint-directed scheduling <ref> [Fox83, SOL + 86, Sad91] </ref>. In that work, schedules are generated by incrementally constructing and merging partial schedules. That work has extensively investigated various properties and aspects of this scheduling methodology and has proposed sophisticated procedures and techniques for constraint-directed scheduling.
Reference: [Fre82] <author> Simon French. </author> <title> Sequencing and Scheduling: An Introduction to the Mathematics of the Job-Shop. </title> <publisher> Ellis Horwood, </publisher> <address> London, </address> <year> 1982. </year>
Reference-contexts: The produced schedule should also respect user preferences. Scheduling is difficult to automate for the following reasons: 1. Computational Complexity Scheduling is a problem in the "hardest" subset of NP-complete prob lems <ref> [Fre82] </ref>. 2. Tight Constraint Interactions Due to the tight interactions among scheduling constraints and the non-linear nature of scheduling objectives, there is no general way to predict the effect of a local optimization decision on global optimality, even for the simplest objective. 3. <p> A revision-based approach is attractive for solving practical scheduling problems. There are no known efficient search algorithms for schedule optimization except for a very limited set of simple objectives such as make-span (e.g. [ABZ88]) and the amount of computation required for finding a solution is generally unpredictable <ref> [Fre82] </ref>. Therefore, the construction of a cheap but suboptimal schedule that is then incrementally repaired to meet optimiza 5 tion objectives is preferable in practice, because one can interrupt the repair process and use the interim result for execution when no more time is allowed for further repair. <p> constraints include non-relaxable release dates, and initially, non-relaxable due dates between which all activities in a job need to be performed. 2.2 Objectives and Preferences In practice, scheduling objectives are numerous, complex, often conflicting and the mathematics of the problem can be extremely difficult with even the simplest of objectives <ref> [Fre82] </ref>. Below, we define the objectives, 1 These constraints have to be generalized when dealing with resources of capacity larger than one. 8 that are among the most common in the literature (e.g. [Fre82]), that we used to develop the performance evaluation of CABINS. <p> conflicting and the mathematics of the problem can be extremely difficult with even the simplest of objectives <ref> [Fre82] </ref>. Below, we define the objectives, 1 These constraints have to be generalized when dealing with resources of capacity larger than one. 8 that are among the most common in the literature (e.g. [Fre82]), that we used to develop the performance evaluation of CABINS. These objectives are mathematical simplifications of state-dependent objectives that are difficult to model precisely. <p> These results indicate that CABINS can acquire different and subjective user preferences on the tradeoffs of diverse objectives in scheduling from the cases. Thus in our approach, unlike traditional heuristic scheduling approaches <ref> [Fre82, MP93] </ref>, it is not necessary to devise a particular heuristic to suit the optimization criterion. Only the case-base must be changed for different optimization objectives.
Reference: [Ham89] <author> Kristian J. Hammond. </author> <title> Case-Based Planning : Viewing Planning as a Memory Task. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1989. </year>
Reference-contexts: However, applying CBR to schedule improvement, a numerical optimization problem, is very challenging. In general, CBR has been used for ill-structured symbolic problems, such as planning <ref> [Ham89, KH92, Vel92] </ref>, legal reasoning [Ash87, RA88], argumentation [Syc89], conceptual design [SGK + 91], medical diagnosis [Kot88] where the primary concern has been plausibility or correctness of the resulting artifact (plan, argument, design) and computational efficiency of the process rather than artifact quality. <p> A second difficulty with respect to having a whole schedule as a case came in the form of what indices to choose. Indexing a case in terms of the goals that must be achieved and problems that must be avoided <ref> [Ham89] </ref> is a good guideline and has served many CBR systems well. However, in our domain, the goals to be achieved (the optimization criteria) cannot be explicitly stated since they reflect context-dependent user preferences and tradeoffs. <p> The repair-based scheduling methods considered here are related to the repair-based methods that have been previously used in case-based planning systems (e.g. <ref> [Vel92, KH92, Ham89] </ref>). Previous case-based systems for incremental solution revision have been motivated primarily by concerns of computational efficiency, preserving plan correctness rather than improving plan quality, and have assumed the existence of a strong domain model to get information as to plan correctness. <p> Previous case-based systems for incremental solution revision have been motivated primarily by concerns of computational efficiency, preserving plan correctness rather than improving plan quality, and have assumed the existence of a strong domain model to get information as to plan correctness. For example, CHEF <ref> [Ham89] </ref> assumes the existence of a model-based simulator to evaluate a derived plan and detect a plan failure and uses well-studied domain rules for selecting repairs.
Reference: [JAMS89] <author> D. S. Johnson, C. R. Aragon, L. A. McGeoch, and C. Schevon. </author> <title> Optimization by simulated annealing: An experimental evaluation, part I (graph partioning). </title> <journal> Operations Research, </journal> <volume> 37(6) </volume> <pages> 865-892, </pages> <year> 1989. </year>
Reference-contexts: The results show that in predictive schedule generation, the methodology 39 improves the quality of schedules generated by a variety of scheduling meth-ods and also generates schedules of higher quality along a variety of optimization objectives with lower processing cost as compared to simulated annealing, a well-known iterative optimization method <ref> [JAMS89, ZDG90, LAL92] </ref>.
Reference: [JAMS91] <author> D. S. Johnson, C. R. Aragon, L. A. McGeoch, and C. Schevon. </author> <title> Optimization by simulated annealing: An experimental evaluation, part Ii (graph coloring and number partitioning). </title> <journal> Operations Research, </journal> <volume> 39(3) </volume> <pages> 378-406, </pages> <year> 1991. </year>
Reference: [Joh90] <author> Mark D. Johnston. SPIKE: </author> <title> AI sheduling for NASA's Hubble Space Telescope. </title> <booktitle> In Proceedings of the Sixth Conference on Artificial Intelligence for Applications, </booktitle> <pages> pages 184-190, </pages> <address> Santa Bar-bara, CA, </address> <year> 1990. </year> <note> IEEE CS. </note>
Reference-contexts: As a consequence, they result in suboptimal schedules. However, because of their efficiency, they are widely used by practitioners. Therefore, as has already been pointed out by other researchers (e.g., [ZDB + 92, MJPL92]), combining a repair methodology, such as a simple gradient search [KS90], neural networks <ref> [Joh90] </ref>, or the one advocated in our work, with a dispatch driven scheduler for creation of the initial schedule is promising for real world scheduling environments.
Reference: [KH92] <author> Subbarao Kambhampati and James A. Hendler. </author> <title> A validation-structure-based theory of plan modification and reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55(2-3):193-258, </volume> <year> 1992. </year>
Reference-contexts: However, applying CBR to schedule improvement, a numerical optimization problem, is very challenging. In general, CBR has been used for ill-structured symbolic problems, such as planning <ref> [Ham89, KH92, Vel92] </ref>, legal reasoning [Ash87, RA88], argumentation [Syc89], conceptual design [SGK + 91], medical diagnosis [Kot88] where the primary concern has been plausibility or correctness of the resulting artifact (plan, argument, design) and computational efficiency of the process rather than artifact quality. <p> The repair-based scheduling methods considered here are related to the repair-based methods that have been previously used in case-based planning systems (e.g. <ref> [Vel92, KH92, Ham89] </ref>). Previous case-based systems for incremental solution revision have been motivated primarily by concerns of computational efficiency, preserving plan correctness rather than improving plan quality, and have assumed the existence of a strong domain model to get information as to plan correctness. <p> For example, CHEF [Ham89] assumes the existence of a model-based simulator to evaluate a derived plan and detect a plan failure and uses well-studied domain rules for selecting repairs. Research by <ref> [KH92, Vel92] </ref> are based on the hypothesis that the plan built by their planner is causally and teleologically correct, and use CBR to find the satisfying plan efficiently. CABINS as a knowledge acquisition system is also related to previous case-based knowledge acquisition systems (e.g. Protos [Bar89]).
Reference: [KLSF91] <author> K. Kempf, C. LePape, S. F. Smith, and B. R. Fox. </author> <title> Issues in the design of AI-based schedulers: workshop report. </title> <journal> AI Magazine, </journal> <volume> 11(5) </volume> <pages> 37-46, </pages> <year> 1991. </year>
Reference-contexts: But, (1) rule-based knowledge acquisition is extremely laborious [Pre90] and (2) a scheduling problem is so ill-structured that even a domain expert cannot have a sufficient knowledge for making a good schedule efficiently <ref> [KLSF91] </ref>. Nevertheless, the CBR-based methodology of CABINS can induce efficient control model from the cases obtained through the applications of insufficient rules. In another set of experiments with objective WIP+WT, we used RBR itself to repair the set of test problems.
Reference: [Kot88] <author> P. Koton. </author> <title> Reasoning about evidence in causal explanations. </title> <booktitle> In Proceedings of the 1988 Case-Based Reasoning Workshop, </booktitle> <pages> pages 260-270, </pages> <address> Clearwater, Fla., </address> <year> 1988. </year>
Reference-contexts: However, applying CBR to schedule improvement, a numerical optimization problem, is very challenging. In general, CBR has been used for ill-structured symbolic problems, such as planning [Ham89, KH92, Vel92], legal reasoning [Ash87, RA88], argumentation [Syc89], conceptual design [SGK + 91], medical diagnosis <ref> [Kot88] </ref> where the primary concern has been plausibility or correctness of the resulting artifact (plan, argument, design) and computational efficiency of the process rather than artifact quality.
Reference: [KS90] <author> John J. Kanet and V. Sridharan. </author> <title> The electronic leitstand: a new tool for shop scheduling. </title> <journal> Manufacturing Review, </journal> <volume> 3(3) </volume> <pages> 161-169, </pages> <year> 1990. </year>
Reference-contexts: As a consequence, they result in suboptimal schedules. However, because of their efficiency, they are widely used by practitioners. Therefore, as has already been pointed out by other researchers (e.g., [ZDB + 92, MJPL92]), combining a repair methodology, such as a simple gradient search <ref> [KS90] </ref>, neural networks [Joh90], or the one advocated in our work, with a dispatch driven scheduler for creation of the initial schedule is promising for real world scheduling environments.
Reference: [KSS85] <author> J. Kolodner, R. Simpson, and K. Sycara. </author> <title> A process of case-based reasoning in problem solving. </title> <booktitle> In Proceedings of the Ninth 69 International Joint Conference on Aritificial Intelligence, </booktitle> <pages> pages 284-290, </pages> <address> Los Angeles, CA, </address> <year> 1985. </year> <pages> IJCAI. </pages>
Reference-contexts: This is a very desirable quality especially in reactive contexts since there could only be a certain limited amount of time for the system to react. Our approach uses integration of Case-based Reasoning (CBR) <ref> [KSS85] </ref> and fine granularity constraint-directed scheduling mechanisms based on [SF90]. Integrating CBR with constraint-based scheduling stems from a variety of motivations. Although scheduling is an ill-structured domain, we assume that it exhibits domain regularities that could be captured, albeit only approximately, in a case.
Reference: [KY89] <author> Naiping Keng and David Y. Y. Yun. </author> <title> A planning/scheduling methodology for the constrained resource problem. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Aritificial Intelligence, </booktitle> <pages> pages 998-1003, </pages> <address> Detroit, MI, </address> <year> 1989. </year> <pages> IJCAI. </pages>
Reference: [LAL92] <author> Peter J. M. Van Laarhoven, Emile H. L. Aarts, and Jan Karel Lenstra. </author> <title> Job shop scheduling by simulated annealing. </title> <journal> Operations Research, </journal> <volume> 40(1) </volume> <pages> 113-125, </pages> <year> 1992. </year>
Reference-contexts: The scheduling problem has been addressed by two general types of methods, constructive scheduling and revision-based scheduling. In constructive approaches (e.g., [Fox83, Sad91]), a schedule is constructed by incremental construction and merging of partial schedules. In revision-based approaches (e.g., <ref> [MJPL90, ZDG90, BC91, LAL92] </ref>) a complete but suboptimal initial schedule is incrementally repaired by several techniques, such as a min-conflict heuristic [MJPL90] or simulated annealing. <p> The results show that in predictive schedule generation, the methodology 39 improves the quality of schedules generated by a variety of scheduling meth-ods and also generates schedules of higher quality along a variety of optimization objectives with lower processing cost as compared to simulated annealing, a well-known iterative optimization method <ref> [JAMS89, ZDG90, LAL92] </ref>.
Reference: [Lan92] <author> P. Langley. </author> <title> Systematic and non-systematic search strategies. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <address> San Jose, CA, 1992. </address> <publisher> AAAI. </publisher>
Reference-contexts: allowing CBR-based repair to take advantage of this coverage. 55 Since, however, we cannot conjecture whether good quality solutions are evenly distributed in the search space as a whole, backtrack search, for example, could be potentially disadvantaged if good solutions are "bunched up" in particular parts of the search space <ref> [MJPL92, Lan92] </ref>, whereas dispatch heuristics are too myopic to take advantage of promising search paths. Finally, we believe that some of the regularities in the structure of the experimental problems were captured in cases during the training phase and this information was transferable to solve the test problems.
Reference: [LMB91] <author> L.M. Lewis, D.V. Minior, and S.J. Brown. </author> <title> A case-based reasoning solution to the problem of redundant engineering in large scale manufacturing. </title> <journal> International Journal of Expert Systems, </journal> <volume> 4(2) </volume> <pages> 189-201, </pages> <year> 1991. </year>
Reference-contexts: Our approach uses case-based reasoning (CBR) which has the potential for dealing with noisy data [RK92, AKA91], acquiring user knowledge in complex domains [Cha93, MBS88], and expending less effort in knowledge acquisition compared with knowledge acquisition for rule-based systems <ref> [SM91, LMB91] </ref>. Because of the characteristics of the scheduling domain described in the previous section and our interest in capturing context dependent user preferences, CBR seems a natural method for knowledge acquisition. However, applying CBR to schedule improvement, a numerical optimization problem, is very challenging.
Reference: [LS93] <author> J. Liu and K. Sycara. </author> <title> Distributed constraint satisfaction through constraint partition and coordinated reaction. </title> <booktitle> In Proceedings of the 12th International Workshop on Distributed Artificial Intelligence, </booktitle> <address> Hidden Valley, PA., </address> <year> 1993. </year>
Reference-contexts: It is interesting to note that this transfer carries over even if the number of orders is varied (see Table 5). 35 The benchmark problems are variations of the problems originally re-ported in [Sad91] and used as a benchmark by a number of researchers (e.g. <ref> [Mus93, LS93] </ref>).
Reference: [MBS88] <author> K. Mckay, J. Buzacott, and F. Safayeni. </author> <title> The scheduler's knowledge of uncertainty: The missing link. </title> <booktitle> In Proceedings of IFIP Working Conference on Knowledge Based Production Management Systems, Galway, </booktitle> <address> Ireland, </address> <year> 1988. </year>
Reference-contexts: Such tradeoffs typically reflect the presence of context-dependent user preferences and domain constraints not captured in the scheduling model. The value of incorporating such user preferences and constraints in operational scheduling 3 environments is becoming increasingly recognized (e.g. <ref> [MBS88] </ref>) but good techniques are currently lacking. 4. Dynamic Environment Operational environments for scheduling systems (e.g. factories) are dynamic. Unpredictable events, such as machine breakdown or operator absence, often happen during schedule execution. <p> Rule-based approaches, while having the potential to capture context-dependent tradeoffs in rules, require considerable knowledge acquisition effort [Pre90]. Our approach uses case-based reasoning (CBR) which has the potential for dealing with noisy data [RK92, AKA91], acquiring user knowledge in complex domains <ref> [Cha93, MBS88] </ref>, and expending less effort in knowledge acquisition compared with knowledge acquisition for rule-based systems [SM91, LMB91]. Because of the characteristics of the scheduling domain described in the previous section and our interest in capturing context dependent user preferences, CBR seems a natural method for knowledge acquisition. <p> structure in job shop optimization, with explicit optimization criteria, this would not help with our analysis since CABINS does not have an explicit objective function, but instead aims at capturing implicitly context-dependent user preferences. 56 6 Related Work Our work shares the same motivations and goals with the work in <ref> [MBS88] </ref> where the motivations for interactive user manipulation of schedules is presented. In that work, the system monitors the user's manipulation of a schedule, requesting the reasons for each revision that is made. This information is then used to augment/refine the system's knowledge.
Reference: [MJPL90] <author> S. Minton, M. D. Johnston, A. B. Philips, and P. Laird. </author> <title> Solving large-scale constraint satisfaction and scheduling problems using a heuristic repair method. </title> <booktitle> In Proceedings, Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 17-24, </pages> <address> Boston, MA., 1990. </address> <publisher> AAAI. </publisher>
Reference-contexts: The scheduling problem has been addressed by two general types of methods, constructive scheduling and revision-based scheduling. In constructive approaches (e.g., [Fox83, Sad91]), a schedule is constructed by incremental construction and merging of partial schedules. In revision-based approaches (e.g., <ref> [MJPL90, ZDG90, BC91, LAL92] </ref>) a complete but suboptimal initial schedule is incrementally repaired by several techniques, such as a min-conflict heuristic [MJPL90] or simulated annealing. <p> In constructive approaches (e.g., [Fox83, Sad91]), a schedule is constructed by incremental construction and merging of partial schedules. In revision-based approaches (e.g., [MJPL90, ZDG90, BC91, LAL92]) a complete but suboptimal initial schedule is incrementally repaired by several techniques, such as a min-conflict heuristic <ref> [MJPL90] </ref> or simulated annealing. In [OST88], while predictive schedules are generated from scratch, incremental revision has been used to repair a pre-computed schedule in response to unanticipated events during schedule execution. <p> Unlike other systems that utilize iterative repair to find a feasible solution (e.g. <ref> [ZDG90, MJPL90] </ref>), where executability of the schedule was not guaranteed at the end of each repair iteration, CABINS produces an executable schedule after each repair that has guaranteed monotonic increase in quality the more time it is allowed for repair, thus exhibiting anytime 4 executable behavior [DB88]. <p> Our approach, generates schedules by repair based scheduling in the space of complete schedules. In this respect it is similar to <ref> [ZDG90, ZDDD93, MJPL90, BC91] </ref>. In [ZDG90, ZDDD93] simulated annealing has been used to perform iterative repair. <p> In <ref> [MJPL90, MJPL92] </ref> the min-conflict heuristic, a repair heuristic that chooses the repair that minimizes the number of conflicts that result from a one-step lookahead has been investigated and its performance analyzed.
Reference: [MJPL92] <author> S. Minton, M Johnston, A. Philips, and P. Laird. </author> <title> Minimizing conflicts: a heuristic repair method for constraint satisfaction and scheduling problems. </title> <journal> Artificial Intelligence, </journal> <volume> 58(1-3):161-205, </volume> <year> 1992. </year>
Reference-contexts: Hence, in general they cannot address issues of balancing tradeoffs with respect to a variety of optimization objectives. As a consequence, they result in suboptimal schedules. However, because of their efficiency, they are widely used by practitioners. Therefore, as has already been pointed out by other researchers (e.g., <ref> [ZDB + 92, MJPL92] </ref>), combining a repair methodology, such as a simple gradient search [KS90], neural networks [Joh90], or the one advocated in our work, with a dispatch driven scheduler for creation of the initial schedule is promising for real world scheduling environments. <p> This is also consistent with the behavior of other repair-based methods, for example the behavior of simulated annealing in our experiments, and also the min-conflict heuristic's behavior for constraint satisfaction problems <ref> [MJPL92] </ref>. Other interesting experimental results we got so far are: * Evaluation of revision control model learning We conducted another set of experiments to ascertain the effectiveness of case-based learning of the control model for selecting the repair actions. <p> In this section, we will attempt to answer the question "what makes the approach powerful"? We believe the power of the approach stems from the following four reasons. First, as has been pointed out by others (e.g. <ref> [MJPL92] </ref>), revision-based approaches by making available a complete assignment (a complete schedule for our domain) provide more information that can guide search as compared with constructive methods where only a partial assignment is available. <p> allowing CBR-based repair to take advantage of this coverage. 55 Since, however, we cannot conjecture whether good quality solutions are evenly distributed in the search space as a whole, backtrack search, for example, could be potentially disadvantaged if good solutions are "bunched up" in particular parts of the search space <ref> [MJPL92, Lan92] </ref>, whereas dispatch heuristics are too myopic to take advantage of promising search paths. Finally, we believe that some of the regularities in the structure of the experimental problems were captured in cases during the training phase and this information was transferable to solve the test problems. <p> In <ref> [MJPL90, MJPL92] </ref> the min-conflict heuristic, a repair heuristic that chooses the repair that minimizes the number of conflicts that result from a one-step lookahead has been investigated and its performance analyzed. <p> Though the heuristic has been shown to be powerful for solving the N-queens problem, it has been shown inadequate for some types of job shop scheduling constraint satisfaction problems [Mus93] when the initial assignment is random. This is because min-conflicts relies 57 on a good initial assignment <ref> [MJPL92] </ref>. The CBR-based repair of CAB--INS, on the other hand has been shown experimentally to improve schedule quality irrespective of initial schedule generation method, although the percent improvement and the quality of the final repaired schedule varies. In [BC91] schedule modifications are procedurally encoded.
Reference: [MP93] <author> Thomas E. Morton and David W. Pentico. </author> <title> Heuristic Scheduling Systems: With Application to Production Systems and Product Management. </title> <publisher> John Wiley and Sons Inc., </publisher> <address> New York, N.Y., </address> <year> 1993. </year>
Reference-contexts: In our model we allow substitutable resources for each activity of a job, thus being able to deal with parallel machine job shop scheduling, a more complicated version of the job shop scheduling problem <ref> [MP93] </ref>. CABINS's revision based approach has two-phases: (1) create an initial schedule by utilizing any method (e.g. dispatching rules), and (2) improve the (possibly) suboptimal schedule that was generated in the first step so as to incorporate user preferences and tradeoffs. <p> These results indicate that CABINS can acquire different and subjective user preferences on the tradeoffs of diverse objectives in scheduling from the cases. Thus in our approach, unlike traditional heuristic scheduling approaches <ref> [Fre82, MP93] </ref>, it is not necessary to devise a particular heuristic to suit the optimization criterion. Only the case-base must be changed for different optimization objectives. <p> These heuristics have been reported to be particularly good at reducing tardiness under different scheduling conditions <ref> [MP93] </ref>. We also used the constrained-based scheduler (CBS), which uses ARR variable ordering heuristic and GV value ordering heuristic with pre-determined biased start time utility-functions (see section 2.3). In our experiments, the user's objective function was assumed to be minimizing weighted linear combination of work-in-process inventory (WIP) plus weighted tardiness. <p> From the table 3 we can see that CABINS also performs well on these randomly generated initial schedules. The behavior of CABINS with regard to the method of initial schedule generation confirms intuitions in the Operations Research community (e.g. <ref> [MP93] </ref>) that the higher the quality of the initial solution, the better the repaired solution. This is also consistent with the behavior of other repair-based methods, for example the behavior of simulated annealing in our experiments, and also the min-conflict heuristic's behavior for constraint satisfaction problems [MJPL92].
Reference: [MR92] <author> Ron Musick and Stuart Russell. </author> <booktitle> How long will it take? In Proceedings of AAAI-92, </booktitle> <pages> pages 466-471, </pages> <address> San Jose, CA, 1992. </address> <publisher> AAAI. </publisher>
Reference-contexts: This question, albeit of great theoretical and practical importance, is very difficult to answer in a theoretical way. In contrast to other NP-complete problems (e.g. graph-coloring, satisfiability, traveling salesman) for which insightful analysis has been performed (e.g. <ref> [MR92, CKT91] </ref>) as to their structure and properties that characterize "easy" or "hard" problem instances, similar characterization of job shop schedule optimization problems is currently an open research problem (e.g.[CKT91, Bak74]).
Reference: [MRV84] <author> T. E. Morton, R. M. Rachamadugu, and A. Vepsaleinen. </author> <title> Accurate myopic heurisrics for tardiness scheduling. </title> <type> Technical Report 36083-84, </type> <institution> Graduate School of Industrial Administration, Carnegie Mellon University, </institution> <year> 1984. </year>
Reference-contexts: Based on the results, we make a variety of observations. First, CABINS improved the initial schedule across all scheduling methods according to the objectives. It should be noted that these dispatch heuristics have been extensively used in Operations Research experimentation with very good results <ref> [Bak74, MRV84] </ref>. The initial schedules generated by the dispatch heuristics can be considered as local minima, in the sense that they cannot be 41 Table 2: Repair by CABINS and SA based on Different Methods of Initial Schedule Generation WT. WIP WT+WIP CPU Sec.
Reference: [MS94] <author> Kazuo Miyashita and Katia Sycara. </author> <title> Learning control knowledge through cases in schedule optimization problems. </title> <booktitle> In Proceedings of the Tenth IEEE Conference on Aritificial Intelligence for Application, </booktitle> <pages> pages 33-39, </pages> <address> San Antonio, TX, 1994. </address> <publisher> IEEE. </publisher>
Reference-contexts: WIP WT+WIP CPU Sec. Repair by RBR 375.2 1446.6 1821.8 498.6 Repair by CABINS 405.3 1195.0 1600.3 296.5 for these results is that, as described in section 4.3, CABINS can effectively utilize failure information stored in the cases (Refer to <ref> [MS94] </ref> for more details and some experimental results.) 5.2 Predictive and Reactive Scheduling We evaluated CABINS against other scheduling methods using standard criteria (e.g. [OST88, ZDG90]) for evaluating schedule revision quality. These criteria are also appropriate for planning.
Reference: [Mus93] <author> N. Muscettola. </author> <title> Scheduling by iterative partition of bottleneck conflicts. </title> <booktitle> In Proceedings of the Ninth Conference on AI Applications, </booktitle> <pages> pages 49-55, </pages> <address> Orlando, Fla., </address> <month> March </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: It is interesting to note that this transfer carries over even if the number of orders is varied (see Table 5). 35 The benchmark problems are variations of the problems originally re-ported in [Sad91] and used as a benchmark by a number of researchers (e.g. <ref> [Mus93, LS93] </ref>). <p> Though the heuristic has been shown to be powerful for solving the N-queens problem, it has been shown inadequate for some types of job shop scheduling constraint satisfaction problems <ref> [Mus93] </ref> when the initial assignment is random. This is because min-conflicts relies 57 on a good initial assignment [MJPL92].
Reference: [OST88] <author> P. S. Ow, S. F. Smith, and A. Thiriez. </author> <title> Reactive plan revision. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 77-82, </pages> <address> St-Paul, Minnesota, 1988. </address> <publisher> AAAI. </publisher>
Reference-contexts: In constructive approaches (e.g., [Fox83, Sad91]), a schedule is constructed by incremental construction and merging of partial schedules. In revision-based approaches (e.g., [MJPL90, ZDG90, BC91, LAL92]) a complete but suboptimal initial schedule is incrementally repaired by several techniques, such as a min-conflict heuristic [MJPL90] or simulated annealing. In <ref> [OST88] </ref>, while predictive schedules are generated from scratch, incremental revision has been used to repair a pre-computed schedule in response to unanticipated events during schedule execution. <p> The local features that we have identified are in the same spirit as those utilized in <ref> [OST88] </ref>. For example, predictive-shift-gain predicts how much overall gain will be achieved by moving the current focal activity earlier in its time horizon. In particular, it predicts the likely reduction of the focal activity's waiting time when moved to the left within the repair time horizon. <p> 405.3 1195.0 1600.3 296.5 for these results is that, as described in section 4.3, CABINS can effectively utilize failure information stored in the cases (Refer to [MS94] for more details and some experimental results.) 5.2 Predictive and Reactive Scheduling We evaluated CABINS against other scheduling methods using standard criteria (e.g. <ref> [OST88, ZDG90] </ref>) for evaluating schedule revision quality. These criteria are also appropriate for planning. <p> In particular, the activities that were scheduled on the broken machine M and whose scheduled reservations overlapped with the time interval 46 47 of the breakdown, are unscheduled and re-scheduled in the same sequence on M after the end time of the breakdown (this has been called right-shifting in <ref> [OST88] </ref>). Right-shifting of these activities on M typically results in constraint conflicts of related activities that are fixed by the constraint propagation mechanisms in CABINS so that a feasible but worse schedule results. propagated effects. The weighted tardiness of this schedule is 4500, a more than ten-fold worsening of quality. <p> This strategy is obviously suboptimal. A second repair strategy could be to throw away the rest of the plan/schedule and re-plan/re-schedule from the point of the occurrence of the unexpected event. It has been speculated in the literature (e.g., <ref> [OST88, ZDG90] </ref>) that such strategy may efficiently produce high quality schedules but may increase schedule disruption (though no measure of disruption was given in previous work). A third repair strategy could be incremental revision of the existing schedule. <p> Although this research tradition has come to view scheduling as an opportunistic repair process, it has operated under static design assumptions (e.g. deterministic application of variable and value ordering heuristics in [Sad91], or statically determined control level model for application of repair actions <ref> [OST88] </ref>). Our approach advances the state of the art by learning to dynamically adapt the focusing mechanism of the search procedure and by adapting the repair model according to current problem solving circumstances and user preferences and tradeoffs.
Reference: [Pre90] <author> D. S. Prerau. </author> <title> Developing and Managing Expert Systems: Proven Techniques for Business and Industry. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Rule-based approaches, while having the potential to capture context-dependent tradeoffs in rules, require considerable knowledge acquisition effort <ref> [Pre90] </ref>. Our approach uses case-based reasoning (CBR) which has the potential for dealing with noisy data [RK92, AKA91], acquiring user knowledge in complex domains [Cha93, MBS88], and expending less effort in knowledge acquisition compared with knowledge acquisition for rule-based systems [SM91, LMB91]. <p> It is true that user's objectives could be elicited by intensely interviewing domain experts and represented in the form of rules as we have done in constructing RBR modules to gather cases in the experiments. But, (1) rule-based knowledge acquisition is extremely laborious <ref> [Pre90] </ref> and (2) a scheduling problem is so ill-structured that even a domain expert cannot have a sufficient knowledge for making a good schedule efficiently [KLSF91]. Nevertheless, the CBR-based methodology of CABINS can induce efficient control model from the cases obtained through the applications of insufficient rules.
Reference: [RA88] <author> E.L. Rissland and K.D. Ashley. </author> <title> Credit assignment and the problem of competing factors in case-based reasoning. </title> <booktitle> In Proceedings of the Case-Based Reasoning Workshop, </booktitle> <pages> pages 327-344, </pages> <address> Clear-water, Fla., </address> <year> 1988. </year>
Reference-contexts: However, applying CBR to schedule improvement, a numerical optimization problem, is very challenging. In general, CBR has been used for ill-structured symbolic problems, such as planning [Ham89, KH92, Vel92], legal reasoning <ref> [Ash87, RA88] </ref>, argumentation [Syc89], conceptual design [SGK + 91], medical diagnosis [Kot88] where the primary concern has been plausibility or correctness of the resulting artifact (plan, argument, design) and computational efficiency of the process rather than artifact quality.
Reference: [RK92] <author> David Ruby and Dennis Kibler. </author> <title> Learning episodes for optimization. </title> <booktitle> In Machine Learning : proceedings of the Ninth International Workshop (ML92), </booktitle> <pages> pages 379-384, </pages> <year> 1992. </year> <month> 71 </month>
Reference-contexts: Rule-based approaches, while having the potential to capture context-dependent tradeoffs in rules, require considerable knowledge acquisition effort [Pre90]. Our approach uses case-based reasoning (CBR) which has the potential for dealing with noisy data <ref> [RK92, AKA91] </ref>, acquiring user knowledge in complex domains [Cha93, MBS88], and expending less effort in knowledge acquisition compared with knowledge acquisition for rule-based systems [SM91, LMB91].
Reference: [Sad91] <author> Norman Sadeh. </author> <title> Look-Ahead Techniques for Micro-Opportunistic Job Shop Scheduling. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: It is clear that any effective scheduling system should be reactive, i.e. perform schedule revision in response to unforeseen events during schedule execution. The scheduling problem has been addressed by two general types of methods, constructive scheduling and revision-based scheduling. In constructive approaches (e.g., <ref> [Fox83, Sad91] </ref>), a schedule is constructed by incremental construction and merging of partial schedules. In revision-based approaches (e.g., [MJPL90, ZDG90, BC91, LAL92]) a complete but suboptimal initial schedule is incrementally repaired by several techniques, such as a min-conflict heuristic [MJPL90] or simulated annealing. <p> That is the reason that the authors think acquiring preferences adaptively is important. 10 2.3 Constraint-Based Search Procedure The constraint-based search procedure used in CABINS for applying a selected repair action (see section 4.4) is based on <ref> [SF90, Sad91] </ref>. Search is interleaved with the application of consistency enforcing mechanisms and variable/value ordering heuristics that attempt to avoid dead-end states. A search state is associated with each partial solution. <p> Durations for activities in each order were also randomly generated. Generating problem instances "in the neighborhood" of a problem by controlled variation of problem parameters is a well-accepted method in Operations Research and knowledge-based scheduling communities for evaluating the performance of scheduling methods (e.g., <ref> [Sad91, SC93] </ref>). <p> It is interesting to note that this transfer carries over even if the number of orders is varied (see Table 5). 35 The benchmark problems are variations of the problems originally re-ported in <ref> [Sad91] </ref> and used as a benchmark by a number of researchers (e.g. [Mus93, LS93]). <p> This information is then used to augment/refine the system's knowledge. The approach seems promising but has not been experimentally tested. Our approach is rooted on concepts and mechanisms of a long line of research in constraint-directed scheduling <ref> [Fox83, SOL + 86, Sad91] </ref>. In that work, schedules are generated by incrementally constructing and merging partial schedules. That work has extensively investigated various properties and aspects of this scheduling methodology and has proposed sophisticated procedures and techniques for constraint-directed scheduling. <p> Although this research tradition has come to view scheduling as an opportunistic repair process, it has operated under static design assumptions (e.g. deterministic application of variable and value ordering heuristics in <ref> [Sad91] </ref>, or statically determined control level model for application of repair actions [OST88]). Our approach advances the state of the art by learning to dynamically adapt the focusing mechanism of the search procedure and by adapting the repair model according to current problem solving circumstances and user preferences and tradeoffs.
Reference: [SC93] <author> Smith S.F. and Cheng C.C. </author> <title> Slack-based heuristics for constraint satisfaction scheduling. </title> <booktitle> In Proceedings of The Eleventh National Conference of Artificial Intelligence, </booktitle> <address> Washington, D.C., 1993. </address> <publisher> AAAI. </publisher>
Reference-contexts: Durations for activities in each order were also randomly generated. Generating problem instances "in the neighborhood" of a problem by controlled variation of problem parameters is a well-accepted method in Operations Research and knowledge-based scheduling communities for evaluating the performance of scheduling methods (e.g., <ref> [Sad91, SC93] </ref>).
Reference: [SF90] <author> Norman Sadeh and Mark S. Fox. </author> <title> Variable and value ordering heuristics for activity-based job-shop scheduling. </title> <booktitle> In Proceedings of the Fourth International Conference on Expert Systems in Production and Operations Management, </booktitle> <pages> pages 134-144, </pages> <address> Hilton Head Island, SC, </address> <year> 1990. </year>
Reference-contexts: This is a very desirable quality especially in reactive contexts since there could only be a certain limited amount of time for the system to react. Our approach uses integration of Case-based Reasoning (CBR) [KSS85] and fine granularity constraint-directed scheduling mechanisms based on <ref> [SF90] </ref>. Integrating CBR with constraint-based scheduling stems from a variety of motivations. Although scheduling is an ill-structured domain, we assume that it exhibits domain regularities that could be captured, albeit only approximately, in a case. <p> That is the reason that the authors think acquiring preferences adaptively is important. 10 2.3 Constraint-Based Search Procedure The constraint-based search procedure used in CABINS for applying a selected repair action (see section 4.4) is based on <ref> [SF90, Sad91] </ref>. Search is interleaved with the application of consistency enforcing mechanisms and variable/value ordering heuristics that attempt to avoid dead-end states. A search state is associated with each partial solution. <p> A variable ordering determines which activity is going to be scheduled next and value ordering determines which reservation should be assigned to the selected activity. The variable ordering heuristic utilized in the system is called Activity Resource Reliance (ARR) <ref> [SF90] </ref> and selects the most critical activity first, i.e., the activity with the highest probability of being involved in a capacity constraint violation over particular time intervals. For more details on the approach, see [SF90]. <p> The variable ordering heuristic utilized in the system is called Activity Resource Reliance (ARR) <ref> [SF90] </ref> and selects the most critical activity first, i.e., the activity with the highest probability of being involved in a capacity constraint violation over particular time intervals. For more details on the approach, see [SF90]. Value Ordering : Once the activity to be scheduled next has been selected, the value ordering heuristic determines which reservation to assign to the activity. <p> This biases value ordering to prefer activity start times with high utility values. For scheduling problems with substitutable resources, static utilities that express differential resource preferences are used in the selection of an activity's reservation. Experiments in <ref> [SF90] </ref> 2 on some rather small job shop problems (each with 20 activities) indicate that the ARR variable ordering with LCV value ordering produces suboptimal schedules with minimal backtracking; ARR variable ordering with GV value ordering with statically predetermined utility functions, henceforth referred to as constraint-based scheduling (CBS), was shown to
Reference: [SGK + 91] <author> K. Sycara, R. Guttal, J. Koning, S. Narasimhan, and D. Navin-chandra. Cadet: </author> <title> A case-based synthesis tool for engineering design. </title> <journal> International Journal of Expert Systems, </journal> <volume> 4(2), </volume> <year> 1991. </year>
Reference-contexts: However, applying CBR to schedule improvement, a numerical optimization problem, is very challenging. In general, CBR has been used for ill-structured symbolic problems, such as planning [Ham89, KH92, Vel92], legal reasoning [Ash87, RA88], argumentation [Syc89], conceptual design <ref> [SGK + 91] </ref>, medical diagnosis [Kot88] where the primary concern has been plausibility or correctness of the resulting artifact (plan, argument, design) and computational efficiency of the process rather than artifact quality.
Reference: [Sim85] <author> R.L. Simpson. </author> <title> A Computer Model of Case-Based Reasoning in Problem Solving: An Investigation in the Domain of Dispute Mediation. </title> <type> PhD thesis, </type> <institution> School of Information and Computer Science Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <year> 1985. </year>
Reference-contexts: Invoking CBR with these indices retrieves cases that have failed in the past in a similar manner as the current revision. This use of CBR in the space of failures is a domain-independent method of failure recovery <ref> [Syc88, Sim85] </ref>, and allows the problem solver to access past solutions to the failure. If the result is acceptable, then CABINS proceeds to repair another activity. For each of the three case retrieval situations described above, CABINS uses a k-Nearest Neighbor method (k-NN) [Das90] for case retrieval.
Reference: [SM91] <author> E. Simoudis and J.S. Miller. </author> <title> The application of CBR to help desk applications. </title> <booktitle> In Proceedings: Case-Based Reasoning Workshop, </booktitle> <pages> pages 25-36, </pages> <year> 1991. </year>
Reference-contexts: Our approach uses case-based reasoning (CBR) which has the potential for dealing with noisy data [RK92, AKA91], acquiring user knowledge in complex domains [Cha93, MBS88], and expending less effort in knowledge acquisition compared with knowledge acquisition for rule-based systems <ref> [SM91, LMB91] </ref>. Because of the characteristics of the scheduling domain described in the previous section and our interest in capturing context dependent user preferences, CBR seems a natural method for knowledge acquisition. However, applying CBR to schedule improvement, a numerical optimization problem, is very challenging.
Reference: [SOL + 86] <author> S. F. Smith, P. S. Ow, C. LePape, B. McLaren, and N. Muscet-tola. </author> <title> Integrating multiple scheduling perspectives to generate detailed production plans. </title> <booktitle> In Proceedings SME Conference on AI in Manufacturing, </booktitle> <address> Long Beach, CA, </address> <month> September </month> <year> 1986. </year>
Reference-contexts: This information is then used to augment/refine the system's knowledge. The approach seems promising but has not been experimentally tested. Our approach is rooted on concepts and mechanisms of a long line of research in constraint-directed scheduling <ref> [Fox83, SOL + 86, Sad91] </ref>. In that work, schedules are generated by incrementally constructing and merging partial schedules. That work has extensively investigated various properties and aspects of this scheduling methodology and has proposed sophisticated procedures and techniques for constraint-directed scheduling.
Reference: [SW86] <author> Craig Stanfill and David Waltz. </author> <title> Toward memory-based reasoning. </title> <journal> Communications of ACM, </journal> <volume> 29(12) </volume> <pages> 1213-1228, </pages> <year> 1986. </year>
Reference-contexts: The repair tactics currently available in CABINS are: 5 This method has been successfully applied in domains without clear causal structure, such as English word pronunciation and text classification in <ref> [SW86, CMSW92] </ref>. 26 left slide : try to move focal activity on the same resource as much to the left on the timeline as possible within the repair time horizon, while preserving the sequence of all the activities. left shift : try to move focal activity on a same resource as
Reference: [Syc88] <author> K. Sycara. </author> <title> Patching up old plans. </title> <booktitle> In Proceedings of the Tenth Annual Conference of the Cognitive Science Society, </booktitle> <address> Montreal, Canada, </address> <year> 1988. </year> <month> 72 </month>
Reference-contexts: Invoking CBR with these indices retrieves cases that have failed in the past in a similar manner as the current revision. This use of CBR in the space of failures is a domain-independent method of failure recovery <ref> [Syc88, Sim85] </ref>, and allows the problem solver to access past solutions to the failure. If the result is acceptable, then CABINS proceeds to repair another activity. For each of the three case retrieval situations described above, CABINS uses a k-Nearest Neighbor method (k-NN) [Das90] for case retrieval.
Reference: [Syc89] <author> K. Sycara. </author> <title> Argumentation: Planning other agents' plans. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence (IJCAI-89), </booktitle> <address> Detroit, Mich, </address> <year> 1989. </year>
Reference-contexts: However, applying CBR to schedule improvement, a numerical optimization problem, is very challenging. In general, CBR has been used for ill-structured symbolic problems, such as planning [Ham89, KH92, Vel92], legal reasoning [Ash87, RA88], argumentation <ref> [Syc89] </ref>, conceptual design [SGK + 91], medical diagnosis [Kot88] where the primary concern has been plausibility or correctness of the resulting artifact (plan, argument, design) and computational efficiency of the process rather than artifact quality.
Reference: [Vel92] <author> Manuela M. Veloso. </author> <title> Learning by Analogical Reasoning in General Problem Solving. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1992. </year>
Reference-contexts: However, applying CBR to schedule improvement, a numerical optimization problem, is very challenging. In general, CBR has been used for ill-structured symbolic problems, such as planning <ref> [Ham89, KH92, Vel92] </ref>, legal reasoning [Ash87, RA88], argumentation [Syc89], conceptual design [SGK + 91], medical diagnosis [Kot88] where the primary concern has been plausibility or correctness of the resulting artifact (plan, argument, design) and computational efficiency of the process rather than artifact quality. <p> The repair-based scheduling methods considered here are related to the repair-based methods that have been previously used in case-based planning systems (e.g. <ref> [Vel92, KH92, Ham89] </ref>). Previous case-based systems for incremental solution revision have been motivated primarily by concerns of computational efficiency, preserving plan correctness rather than improving plan quality, and have assumed the existence of a strong domain model to get information as to plan correctness. <p> For example, CHEF [Ham89] assumes the existence of a model-based simulator to evaluate a derived plan and detect a plan failure and uses well-studied domain rules for selecting repairs. Research by <ref> [KH92, Vel92] </ref> are based on the hypothesis that the plan built by their planner is causally and teleologically correct, and use CBR to find the satisfying plan efficiently. CABINS as a knowledge acquisition system is also related to previous case-based knowledge acquisition systems (e.g. Protos [Bar89]).
Reference: [ZDB + 92] <author> M. Zweben, E. Davis, D. Brian, E. Drascher, M. Deale, and M. Eskey. </author> <title> Learning to improve constraint-based scheduling. </title> <journal> Artificial Intelligence, </journal> <volume> 58(1-3):271-296, </volume> <year> 1992. </year>
Reference-contexts: Hence, in general they cannot address issues of balancing tradeoffs with respect to a variety of optimization objectives. As a consequence, they result in suboptimal schedules. However, because of their efficiency, they are widely used by practitioners. Therefore, as has already been pointed out by other researchers (e.g., <ref> [ZDB + 92, MJPL92] </ref>), combining a repair methodology, such as a simple gradient search [KS90], neural networks [Joh90], or the one advocated in our work, with a dispatch driven scheduler for creation of the initial schedule is promising for real world scheduling environments. <p> In [BC91] schedule modifications are procedurally encoded. Small snapshots of the scheduling process, called chronologies, are used to focus the search by using information gained incrementally during the scheduling process to locate, classify and resolve bottlenecks. In <ref> [ZDB + 92] </ref> plausible explanation based learning (PEBL) has been applied to learn search control rules to increase search efficiency in scheduling tasks for NASA Space Shuttle payload and ground processing. PEBL enables a system to generalize a given target concept (e.g. chronic resource contention) over a distribution of examples.
Reference: [ZDDD92] <author> M. Zweben, E. Davis, B. Daun, and M. Deale. </author> <title> Rescheduling with iterative repair. </title> <booktitle> In Proceedings of AAAI-92 workshop on Production Planning, Scheduling and control, </booktitle> <address> San Jose, CA., 1992. </address> <publisher> AAAI. </publisher>
Reference-contexts: In [ZDG90, ZDDD93] simulated annealing has been used to perform iterative repair. Knowledge in the form of constraint types and evaluation criteria has been added to the basic simulated annealing framework and has been shown to improve convergence speed [ZDDD93]. <ref> [ZDDD92] </ref> has studied the tradeoff of minimizing perturbations vs. speed of convergence to a conflict free schedule and vs. schedule quality measured in terms of number of violated resource constraints.
Reference: [ZDDD93] <author> M. Zweben, E. Davis, B. Daun, and M. Deale. </author> <title> Iterative repair for scheduling and rescheduling. </title> <journal> IEEE Transactions on System, Man and Cybernetics, </journal> <volume> 23(6) </volume> <pages> 1588-1596, </pages> <year> 1993. </year>
Reference-contexts: Our approach, generates schedules by repair based scheduling in the space of complete schedules. In this respect it is similar to <ref> [ZDG90, ZDDD93, MJPL90, BC91] </ref>. In [ZDG90, ZDDD93] simulated annealing has been used to perform iterative repair. <p> Our approach, generates schedules by repair based scheduling in the space of complete schedules. In this respect it is similar to [ZDG90, ZDDD93, MJPL90, BC91]. In <ref> [ZDG90, ZDDD93] </ref> simulated annealing has been used to perform iterative repair. <p> In [ZDG90, ZDDD93] simulated annealing has been used to perform iterative repair. Knowledge in the form of constraint types and evaluation criteria has been added to the basic simulated annealing framework and has been shown to improve convergence speed <ref> [ZDDD93] </ref>. [ZDDD92] has studied the tradeoff of minimizing perturbations vs. speed of convergence to a conflict free schedule and vs. schedule quality measured in terms of number of violated resource constraints.
Reference: [ZDG90] <author> M. Zweben, M. Deale, and M. Gargan. Anytime rescheduling. </author> <booktitle> In Proceedings of the DARPA Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pages 251-259, </pages> <address> San Diego, CA., </address> <year> 1990. </year> <title> DARPA. </title> <type> 73 </type>
Reference-contexts: The scheduling problem has been addressed by two general types of methods, constructive scheduling and revision-based scheduling. In constructive approaches (e.g., [Fox83, Sad91]), a schedule is constructed by incremental construction and merging of partial schedules. In revision-based approaches (e.g., <ref> [MJPL90, ZDG90, BC91, LAL92] </ref>) a complete but suboptimal initial schedule is incrementally repaired by several techniques, such as a min-conflict heuristic [MJPL90] or simulated annealing. <p> Unlike other systems that utilize iterative repair to find a feasible solution (e.g. <ref> [ZDG90, MJPL90] </ref>), where executability of the schedule was not guaranteed at the end of each repair iteration, CABINS produces an executable schedule after each repair that has guaranteed monotonic increase in quality the more time it is allowed for repair, thus exhibiting anytime 4 executable behavior [DB88]. <p> 405.3 1195.0 1600.3 296.5 for these results is that, as described in section 4.3, CABINS can effectively utilize failure information stored in the cases (Refer to [MS94] for more details and some experimental results.) 5.2 Predictive and Reactive Scheduling We evaluated CABINS against other scheduling methods using standard criteria (e.g. <ref> [OST88, ZDG90] </ref>) for evaluating schedule revision quality. These criteria are also appropriate for planning. <p> The results show that in predictive schedule generation, the methodology 39 improves the quality of schedules generated by a variety of scheduling meth-ods and also generates schedules of higher quality along a variety of optimization objectives with lower processing cost as compared to simulated annealing, a well-known iterative optimization method <ref> [JAMS89, ZDG90, LAL92] </ref>. <p> This strategy is obviously suboptimal. A second repair strategy could be to throw away the rest of the plan/schedule and re-plan/re-schedule from the point of the occurrence of the unexpected event. It has been speculated in the literature (e.g., <ref> [OST88, ZDG90] </ref>) that such strategy may efficiently produce high quality schedules but may increase schedule disruption (though no measure of disruption was given in previous work). A third repair strategy could be incremental revision of the existing schedule. <p> Our approach, generates schedules by repair based scheduling in the space of complete schedules. In this respect it is similar to <ref> [ZDG90, ZDDD93, MJPL90, BC91] </ref>. In [ZDG90, ZDDD93] simulated annealing has been used to perform iterative repair. <p> Our approach, generates schedules by repair based scheduling in the space of complete schedules. In this respect it is similar to [ZDG90, ZDDD93, MJPL90, BC91]. In <ref> [ZDG90, ZDDD93] </ref> simulated annealing has been used to perform iterative repair.
References-found: 54

