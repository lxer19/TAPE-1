URL: http://www.cs.washington.edu/homes/josh/lighting.ps
Refering-URL: http://www.cs.washington.edu/homes/josh/lighting.html
Root-URL: 
Title: Intelligent Exploration of Lighting Spaces  
Degree: A Thesis presented by Joshua Seims to Computer Science in partial fulfillment of the honors requirements for the degree of Bachelor of Arts  
Date: April 8, 1996  
Address: Cambridge, Massachusetts  
Affiliation: Harvard College  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Dorsey, J. Arvo, and D. Greenberg. </author> <title> Interactive design of complex time-dependent lighting. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 26-36, </pages> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: A set of complementary lights allows the user to explore many lighting variations because of the additive property of light <ref> [1] </ref>: given n light sources, l 1 ; : : : ; l n , then IM G (l 1 ) + + IM G (l n ) = IM G (l 1 + + l n ) where IM G (l i ) denotes the image generated under l i
Reference: [2] <author> J. K. Kawai, J. S. Painter, and M. F. Cohen. </author> <booktitle> Radioptimization - goal-based rendering. In Proc. of SIGGRAPH 93, </booktitle> <pages> pages 147-154, </pages> <address> Anaheim, California, </address> <month> Aug. </month> <year> 1993. </year> <booktitle> ACM SIGGRAPH, </booktitle> <address> New York. </address> <booktitle> In Computer Graphics Annual Conference Series, </booktitle> <year> 1993. </year>
Reference-contexts: After the user specifies the color and brightness of certain regions of the image, the system solves a linear optimization problem to find the colors for the lights that most closely matches the desired image. * In another approach <ref> [2] </ref>, the user picks one of three goals that specify how the scene should look: clear, pleasant, or private. These goals translate to some objective function that rates how well the scene matches the goal.
Reference: [3] <author> P. Poulin and A. Fournier. </author> <title> Lights from highlights and shadows. </title> <booktitle> In Proc. of the 1992 Symposium on Interactive Graphics, </booktitle> <pages> pages 31-38, </pages> <address> Boston, Massachusetts, </address> <month> Mar. </month> <year> 1992. </year> <booktitle> ACM SIGGRAPH, </booktitle> <address> New York. </address> <booktitle> In Computer Graphics 25(2), </booktitle> <year> 1992. </year>
Reference-contexts: Non-linear optimization techniques are used to find the brightness for each light source that best satisfies the goal. * A third approach <ref> [3] </ref> requires the user to specify the shape of specular highlights on objects and the shape of the shadows the objects cast. This information allows the computer to calculate the position of the lights that would most closely create these effects.
Reference: [4] <author> C. Schoeneman, J. Dorsey, B. Smits, J. Arvo, and D. Greenberg. </author> <title> Painting with light. </title> <booktitle> In Proc. of SIGGRAPH 93, </booktitle> <pages> pages 143-146, </pages> <address> Anaheim, California, </address> <month> Aug. </month> <title> REFERENCES 40 1993. </title> <booktitle> ACM SIGGRAPH, </booktitle> <address> New York. </address> <booktitle> In Computer Graphics Annual Conference Series, </booktitle> <year> 1993. </year>
Reference-contexts: The general inverse lighting problem is, given a description of lighting effects desired in a scene, to calculate the types and positions of lights necessary to produce the effect. The papers describing previous work gave three approaches to this inverse problem: * One inverse approach <ref> [4] </ref> is to allow the user to paint colors onto the image. <p> possible lightings, that simply regenerating until the winnower happens to pick an interesting lighting is time-consuming. * The BRIGHTER and DARKER suggestions give a finer degree of control than the DIFFERENT suggestion; however, the approach to specify illumination in regions of an image was done more elegantly in other systems <ref> [4] </ref>.
Reference: [5] <author> J. Foley, A. van Dam, S. Feiner, and J. Hughes. </author> <title> Computer Graphics Principles and Practice. </title> <publisher> Addison Wesley, </publisher> <editor> 2nd ed., </editor> <year> 1990. </year>
Reference-contexts: These goals translate to some objective function that rates how well the scene matches the goal. The objective function works by computing the overall brightness of the scene, the variation of brightness, and the amount of brightness on the walls. The goals 2 Ray tracing and radiosity <ref> [5] </ref> are two of the most common ways to generate high-quality images in computer graphics. Ray tracing is good at rendering images with many shiny, reflective surfaces, and can produce images with reflections within reflections, and objects bending when seen through a lens.
Reference: [6] <author> K. Sims. </author> <title> Artificial Evolution for Computer Graphics. </title> <journal> In Computer Graphics, </journal> <volume> Vol. 25, No. 4, </volume> <year> 1991, </year> <pages> pages 319-328. </pages>
Reference-contexts: Instead, we wanted the user only to rate composite lighting scenes as being good or bad, and have the computer figure out what lighting effects the user desires. This approach is an example of an evolutionary algorithm. 3.1 Evolutionary Techniques Evolutionary approaches <ref> [6, 7, 8] </ref> have been used to interactively create artificial plant structures and textures. These algorithms are inspired by the biological model, in which every living being is a representation of some genetic code (DNA).
Reference: [7] <author> P. Oppenheimer. </author> <title> Real time design and animation of fractal plants and trees. </title> <journal> In Computer Graphics, </journal> <volume> Vol. 20, No. 4, </volume> <year> 1986, </year> <pages> pages 55-64. </pages>
Reference-contexts: Instead, we wanted the user only to rate composite lighting scenes as being good or bad, and have the computer figure out what lighting effects the user desires. This approach is an example of an evolutionary algorithm. 3.1 Evolutionary Techniques Evolutionary approaches <ref> [6, 7, 8] </ref> have been used to interactively create artificial plant structures and textures. These algorithms are inspired by the biological model, in which every living being is a representation of some genetic code (DNA).
Reference: [8] <author> S. Todd and W. Latham. Mutator, </author> <title> a Subjective Human Interface for Evolution of Computer Sculptures. </title> <institution> IBM United Kingdom Scientific Centre Report 248, </institution> <year> 1991. </year>
Reference-contexts: Instead, we wanted the user only to rate composite lighting scenes as being good or bad, and have the computer figure out what lighting effects the user desires. This approach is an example of an evolutionary algorithm. 3.1 Evolutionary Techniques Evolutionary approaches <ref> [6, 7, 8] </ref> have been used to interactively create artificial plant structures and textures. These algorithms are inspired by the biological model, in which every living being is a representation of some genetic code (DNA).
Reference: [9] <author> T. Kang, J. Seims, J. Marks, S. Shieber. </author> <title> Exploring Lighting Spaces. </title> <institution> Mitsubishi Electric Research Labs, </institution> <type> Technical Report TR95-18. </type> <month> Jan. </month> <year> 1996 </year>
Reference: [10] <author> T. Kang. </author> <title> Designing an Automated System for Lighting Specification. </title> <type> BA Thesis, </type> <institution> Harvard University, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: For each proposed light, a low-resolution thumbnail image is rendered using the desired rendering algorithm. 4 3 I implemented the proposal phase, and Tom Kang was responsible for the culling algorithm <ref> [10] </ref>. I wrote the interface in Tcl/Tk. Tom Kang and I both wrote different winnowing algorithms. I describe the version I wrote. 4 We have used ray tracing as our rendering algorithm of choice. However, our approach is essentially independent of the rendering algorithm used. 3 EVOLUTIONARY APPROACH 7 2.
Reference: [11] <author> G. Karypis and V. Kumar. METIS: </author> <title> Unstructured Graph Partitioning and Sparse Matrix Ordering System. </title> <institution> University of Minnesota, Department of Computer Science. </institution> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: It is significantly simpler than the evolutionary algorithm's interface shown in Figure 6, because controlling the evolution of an image is much more complicated than selecting base lights. 8 The actual partitioning was done by METIS <ref> [11] </ref>, a graph-partitioning software. METIS creates k-way partitions using a variant of the Kernighan-Lin graph bisection algorithm. While METIS was very fast at returning k-way partitions, the partitions were not all the same size.
References-found: 11

