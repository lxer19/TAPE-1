URL: ftp://ftp.cs.dartmouth.edu/pub/CS-papers/Kotz/johnson:freshmen.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/ILI/
Root-URL: http://www.cs.dartmouth.edu
Email: fdjohnson,dfk,makedong@cs.dartmouth.edu  
Title: Teaching Parallel Computing to Freshmen  
Author: Donald Johnson, David Kotz, and Fillia Makedon 
Address: Hanover, NH 03755-3510  
Affiliation: Department of Math and Computer Science Dartmouth College  
Web: ftp://ftp.cs.dartmouth.edu/pub/CS-papers/Kotz/johnson:freshmen.ps.Z  
Note: Copyright 1994 by David Kotz. Appeared in Conference on Parallel Computing for Undergraduates. Available at  
Abstract: Parallelism is the future of computing and computer science and should therefore be at the heart of the CS curriculum. Instead of continuing along the evolutionary path by introducing parallel computation "top down" (first in special junior-senior level courses), we are taking a radical approach and introducing parallelism at the earliest possible stages of instruction. Specifically, we are developing a completely new freshman-level course on data structures that integrates parallel computation naturally, and retains the emphasis on laboratory instruction. This will help to steer our curriculum as expeditiously as possible toward parallel computing. Our approach is novel in three distinct and essential ways. First, we will teach parallel computing to freshmen in a course designed from beginning to end to do so. Second, we will motivate the course with examples from scientific computation. Third, we use multimedia and visualization as instructional aids. We have two primary objectives: to begin a reform of our undergraduate curriculum with an laboratory-based freshman course on parallel computation, and to produce tools and methodologies that improve student understanding of the basic principles of parallel computing.
Abstract-found: 1
Intro-found: 1
Reference: [BBES91] <author> Ingo Barth, Thomas Braunl, Stefan Engelhardt, and Frank Sembach. </author> <title> Parallaxis Version 2 User Manual. </title> <institution> Universitat Stuttgart, </institution> <month> February </month> <year> 1991. </year> <note> Computer Science Report Number 2/91. </note>
Reference-contexts: Parallel Programming. To avoid the "informational clutter" of a survey course, we will carefully select one programming model, language, and platform, to minimize implementation details and maximize the conceptual content. Our tentative plan is to use the Parallaxis programming language on the Macintosh. The Parallaxis programming language <ref> [BBES91] </ref> supports the SIMD programming paradigm, can simulate many topologies, is similar to the Pascal language that many students already know, runs a variety of platforms (including Macintosh, Unix, and the Maspar parallel processor), and is free.
Reference: [BEW88] <author> Ralph M. Butler, Roger E. Eggen, and Susan R. Wallace. </author> <title> Introducing parallel processing at the undergraduate level. </title> <booktitle> In 19th SIGCSE, </booktitle> <pages> pages 63-67, </pages> <year> 1988. </year>
Reference-contexts: Dartmouth, like many other schools, is presently taking the evolutionary path of introducing parallel computation in special junior-senior level courses. This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum <ref> [BEW88, FG91, HS91, Hyd89, Joh92, Mer92] </ref>, although some have introduced parallel computation into parts of other courses [SH90, Sil89, Har92, Whi88, Yea91]. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction.
Reference: [BK89] <author> Jon Bentley and Brian W. Kernighan. </author> <title> A system for algorithm animation. </title> <journal> Computing Systems, </journal> <volume> 23(3) </volume> <pages> 137-146, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: These tools include animation programs, hypermedia, video clips, and audio. The goal is to create a well-managed and seamless exploratory environment <ref> [BK89, Bro88, Sta91] </ref>, including tools for program visualization [Mye86, SBN89]. The course will thus be composed of ten multimedia modules. 4 As an example of a multimedia module that employs video, text, graphics, algorithm an-imation, data structure visualization, and hypermedia, consider a case study on genome sequence comparison.
Reference: [Bro88] <author> Marc H. Brown. </author> <title> Algorithm Animation. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: These tools include animation programs, hypermedia, video clips, and audio. The goal is to create a well-managed and seamless exploratory environment <ref> [BK89, Bro88, Sta91] </ref>, including tools for program visualization [Mye86, SBN89]. The course will thus be composed of ten multimedia modules. 4 As an example of a multimedia module that employs video, text, graphics, algorithm an-imation, data structure visualization, and hypermedia, consider a case study on genome sequence comparison.
Reference: [FG91] <author> Allan L. Fisher and Thomas Gross. </author> <title> Teaching the programming of parallel computers. </title> <booktitle> In 22nd SIGCSE, </booktitle> <pages> pages 102-107, </pages> <year> 1991. </year>
Reference-contexts: Dartmouth, like many other schools, is presently taking the evolutionary path of introducing parallel computation in special junior-senior level courses. This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum <ref> [BEW88, FG91, HS91, Hyd89, Joh92, Mer92] </ref>, although some have introduced parallel computation into parts of other courses [SH90, Sil89, Har92, Whi88, Yea91]. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction.
Reference: [Har92] <author> Stephen J. </author> <title> Hartley. Experience with the language SR in an undergraduate operating systems course. </title> <booktitle> In 23rd SIGCSE, </booktitle> <pages> pages 176-180, </pages> <year> 1992. </year> <month> 5 </month>
Reference-contexts: This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum [BEW88, FG91, HS91, Hyd89, Joh92, Mer92], although some have introduced parallel computation into parts of other courses <ref> [SH90, Sil89, Har92, Whi88, Yea91] </ref>. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction. This will provide a foundation for the higher level courses, such as languages, operating systems, and architecture, that will soon be covering aspects of parallel computing.
Reference: [Hay88] <author> Helen Duerr Hays. </author> <title> Interactive graphics: A tool for beginning programming stu-dents in discovering solutions to novel problems. </title> <booktitle> In 19th SIGCSE, </booktitle> <pages> pages 137-141, </pages> <year> 1988. </year>
Reference-contexts: Second, we will motivate the course with examples from scientific computation. Third, we will use multimedia and visualization as instructional aids. While the use of visualization to teach parallel computation is not new to computer science education <ref> [Hay88, Mye86, Nap90, Rob92, Sch92, Wag89] </ref>, the effective integration of interactive visualization and multimedia into a rewarding experience for freshmen is unusual. 2 3 A New Course: Parallel Data Structures and Algo- rithms Students enter CS 15 having learned to program in Pascal or C++, the use of arrays and lists, <p> In many cases we will include hypermedia, with clips of video, audio, and animation. Multimedia. The use of visualization and animation has been shown to help students learn computer science <ref> [Hay88, Nap90] </ref>. Multimedia materials will be used in lecture and for self-study, for the animation of parallel data structures, visualization of algorithms, experimentation with various architectures, monitoring of parallel programs, and demonstration of scientific visualization, with a focus on algorithmic over architectural issues.
Reference: [HS91] <author> Janet Hartman and Dean Sanders. </author> <title> Teaching a course in parallel processing with limited resources. </title> <booktitle> In 22nd SIGCSE, </booktitle> <pages> pages 97-101, </pages> <year> 1991. </year>
Reference-contexts: Dartmouth, like many other schools, is presently taking the evolutionary path of introducing parallel computation in special junior-senior level courses. This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum <ref> [BEW88, FG91, HS91, Hyd89, Joh92, Mer92] </ref>, although some have introduced parallel computation into parts of other courses [SH90, Sil89, Har92, Whi88, Yea91]. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction.
Reference: [Hyd89] <author> Daniel C. Hyde. </author> <title> A parallel processing course for undergraduates. </title> <booktitle> In 20th SIGCSE, </booktitle> <pages> pages 170-173, </pages> <year> 1989. </year>
Reference-contexts: Dartmouth, like many other schools, is presently taking the evolutionary path of introducing parallel computation in special junior-senior level courses. This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum <ref> [BEW88, FG91, HS91, Hyd89, Joh92, Mer92] </ref>, although some have introduced parallel computation into parts of other courses [SH90, Sil89, Har92, Whi88, Yea91]. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction.
Reference: [Joh92] <author> David J. John. </author> <title> Integration of parallel computation into introductory computer science. </title> <booktitle> In 23rd SIGCSE, </booktitle> <pages> pages 281-285, </pages> <year> 1992. </year>
Reference-contexts: Dartmouth, like many other schools, is presently taking the evolutionary path of introducing parallel computation in special junior-senior level courses. This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum <ref> [BEW88, FG91, HS91, Hyd89, Joh92, Mer92] </ref>, although some have introduced parallel computation into parts of other courses [SH90, Sil89, Har92, Whi88, Yea91]. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction.
Reference: [Mer92] <author> Marsha J. Meredith. </author> <title> Introducing parallel computing into the undergraduate computer science curriculum: a progress report. </title> <booktitle> In 23rd SIGCSE, </booktitle> <pages> pages 187-191, </pages> <year> 1992. </year>
Reference-contexts: Dartmouth, like many other schools, is presently taking the evolutionary path of introducing parallel computation in special junior-senior level courses. This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum <ref> [BEW88, FG91, HS91, Hyd89, Joh92, Mer92] </ref>, although some have introduced parallel computation into parts of other courses [SH90, Sil89, Har92, Whi88, Yea91]. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction.
Reference: [Mye86] <author> Brad A. Myers. </author> <title> Visual programming, programming by example and program visualization: A taxonomy. </title> <booktitle> In SIGCHI Proceedings, </booktitle> <pages> pages 59-66, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Second, we will motivate the course with examples from scientific computation. Third, we will use multimedia and visualization as instructional aids. While the use of visualization to teach parallel computation is not new to computer science education <ref> [Hay88, Mye86, Nap90, Rob92, Sch92, Wag89] </ref>, the effective integration of interactive visualization and multimedia into a rewarding experience for freshmen is unusual. 2 3 A New Course: Parallel Data Structures and Algo- rithms Students enter CS 15 having learned to program in Pascal or C++, the use of arrays and lists, <p> These tools include animation programs, hypermedia, video clips, and audio. The goal is to create a well-managed and seamless exploratory environment [BK89, Bro88, Sta91], including tools for program visualization <ref> [Mye86, SBN89] </ref>. The course will thus be composed of ten multimedia modules. 4 As an example of a multimedia module that employs video, text, graphics, algorithm an-imation, data structure visualization, and hypermedia, consider a case study on genome sequence comparison. We would begin by describing the Human Genome Project.
Reference: [Nap90] <author> T. L. Naps. </author> <title> Algorithm visualization in computer science laboratories. </title> <booktitle> In 21st SIGCSE, </booktitle> <pages> pages 105-110, </pages> <year> 1990. </year>
Reference-contexts: Second, we will motivate the course with examples from scientific computation. Third, we will use multimedia and visualization as instructional aids. While the use of visualization to teach parallel computation is not new to computer science education <ref> [Hay88, Mye86, Nap90, Rob92, Sch92, Wag89] </ref>, the effective integration of interactive visualization and multimedia into a rewarding experience for freshmen is unusual. 2 3 A New Course: Parallel Data Structures and Algo- rithms Students enter CS 15 having learned to program in Pascal or C++, the use of arrays and lists, <p> In many cases we will include hypermedia, with clips of video, audio, and animation. Multimedia. The use of visualization and animation has been shown to help students learn computer science <ref> [Hay88, Nap90] </ref>. Multimedia materials will be used in lecture and for self-study, for the animation of parallel data structures, visualization of algorithms, experimentation with various architectures, monitoring of parallel programs, and demonstration of scientific visualization, with a focus on algorithmic over architectural issues.
Reference: [NSF91] <author> Grand Challenges: </author> <title> High Performance Computing and Communications. A Report by the Committee on Physical, </title> <institution> Mathematical and Engineering Sciences, </institution> <address> NSF/CISE, 1800 G Street NW, Washington, D.C. 20550, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction The High Performance Computing and Communications Program <ref> [NSF91] </ref> cites many grand challenges, including weather prediction, molecular structure models, and human genome mapping. Meeting these challenges will require two things of computer scientists: an understanding of the sciences and an ascent to unprecedented levels of algorithmic and computational power.
Reference: [Rob92] <author> James Roberge. </author> <title> Creating programming projects with visual impact. </title> <booktitle> In 23rd SIGCSE, </booktitle> <pages> pages 230-234, </pages> <year> 1992. </year>
Reference-contexts: Second, we will motivate the course with examples from scientific computation. Third, we will use multimedia and visualization as instructional aids. While the use of visualization to teach parallel computation is not new to computer science education <ref> [Hay88, Mye86, Nap90, Rob92, Sch92, Wag89] </ref>, the effective integration of interactive visualization and multimedia into a rewarding experience for freshmen is unusual. 2 3 A New Course: Parallel Data Structures and Algo- rithms Students enter CS 15 having learned to program in Pascal or C++, the use of arrays and lists,
Reference: [SBN89] <author> David Socha, Mary L. Bailey, and David Notkin. Voyeur: </author> <title> Graphical views of parallel programs. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 24(1), </volume> <pages> 89. </pages>
Reference-contexts: These tools include animation programs, hypermedia, video clips, and audio. The goal is to create a well-managed and seamless exploratory environment [BK89, Bro88, Sta91], including tools for program visualization <ref> [Mye86, SBN89] </ref>. The course will thus be composed of ten multimedia modules. 4 As an example of a multimedia module that employs video, text, graphics, algorithm an-imation, data structure visualization, and hypermedia, consider a case study on genome sequence comparison. We would begin by describing the Human Genome Project.
Reference: [Sch92] <author> D. Schweitzer. </author> <title> Designing interactive visualization tools for the graphics classroom. </title> <booktitle> In 23rd SIGCSE, </booktitle> <pages> pages 299-303, </pages> <year> 1992. </year>
Reference-contexts: Second, we will motivate the course with examples from scientific computation. Third, we will use multimedia and visualization as instructional aids. While the use of visualization to teach parallel computation is not new to computer science education <ref> [Hay88, Mye86, Nap90, Rob92, Sch92, Wag89] </ref>, the effective integration of interactive visualization and multimedia into a rewarding experience for freshmen is unusual. 2 3 A New Course: Parallel Data Structures and Algo- rithms Students enter CS 15 having learned to program in Pascal or C++, the use of arrays and lists,
Reference: [SH90] <author> Dean Sanders and Janet Hartman. </author> <title> Getting started with parallel programming. </title> <booktitle> In 21st SIGCSE, </booktitle> <pages> pages 86-88, </pages> <year> 1990. </year>
Reference-contexts: This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum [BEW88, FG91, HS91, Hyd89, Joh92, Mer92], although some have introduced parallel computation into parts of other courses <ref> [SH90, Sil89, Har92, Whi88, Yea91] </ref>. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction. This will provide a foundation for the higher level courses, such as languages, operating systems, and architecture, that will soon be covering aspects of parallel computing.
Reference: [Sil89] <author> James L. Silver. </author> <title> Concurrent programming in an upper-level operating systems course. </title> <booktitle> In 20th SIGCSE, </booktitle> <pages> pages 217-221, </pages> <year> 1989. </year>
Reference-contexts: This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum [BEW88, FG91, HS91, Hyd89, Joh92, Mer92], although some have introduced parallel computation into parts of other courses <ref> [SH90, Sil89, Har92, Whi88, Yea91] </ref>. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction. This will provide a foundation for the higher level courses, such as languages, operating systems, and architecture, that will soon be covering aspects of parallel computing.
Reference: [Sta91] <author> John Stasko. </author> <title> Using direct manipulation to build algorithm animations by demonstration. </title> <booktitle> In Proc. of the ACM SIGCHI '91 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 307-314, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: These tools include animation programs, hypermedia, video clips, and audio. The goal is to create a well-managed and seamless exploratory environment <ref> [BK89, Bro88, Sta91] </ref>, including tools for program visualization [Mye86, SBN89]. The course will thus be composed of ten multimedia modules. 4 As an example of a multimedia module that employs video, text, graphics, algorithm an-imation, data structure visualization, and hypermedia, consider a case study on genome sequence comparison.
Reference: [Wag89] <author> Leslie J. Waguespack. </author> <title> Visual metaphors for teaching programming concepts. </title> <booktitle> In 20th SIGCSE, </booktitle> <pages> pages 141-144, </pages> <year> 1989. </year> <month> 6 </month>
Reference-contexts: Second, we will motivate the course with examples from scientific computation. Third, we will use multimedia and visualization as instructional aids. While the use of visualization to teach parallel computation is not new to computer science education <ref> [Hay88, Mye86, Nap90, Rob92, Sch92, Wag89] </ref>, the effective integration of interactive visualization and multimedia into a rewarding experience for freshmen is unusual. 2 3 A New Course: Parallel Data Structures and Algo- rithms Students enter CS 15 having learned to program in Pascal or C++, the use of arrays and lists,
Reference: [Whi88] <author> G. M. Whitson. </author> <title> An introduction to the parallel distributed processing model of cognition and some examples of how it is changing the teaching of artificial intelligence. </title> <booktitle> In 19th SIGCSE, </booktitle> <pages> pages 59-62, </pages> <year> 1988. </year>
Reference-contexts: This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum [BEW88, FG91, HS91, Hyd89, Joh92, Mer92], although some have introduced parallel computation into parts of other courses <ref> [SH90, Sil89, Har92, Whi88, Yea91] </ref>. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction. This will provide a foundation for the higher level courses, such as languages, operating systems, and architecture, that will soon be covering aspects of parallel computing.
Reference: [Yea91] <author> Dorian P. Yeager. </author> <title> Teaching concurrency in the programming languages course. </title> <booktitle> In 22nd SIGCSE, </booktitle> <pages> pages 155-161, </pages> <year> 1991. </year> <month> 7 </month>
Reference-contexts: This top-down strategy has been the approach of most similar efforts to introduce parallel computation into the undergraduate curriculum [BEW88, FG91, HS91, Hyd89, Joh92, Mer92], although some have introduced parallel computation into parts of other courses <ref> [SH90, Sil89, Har92, Whi88, Yea91] </ref>. We plan a more radical approach, to introduce parallelism bottom-up, at the earliest possible stages of instruction. This will provide a foundation for the higher level courses, such as languages, operating systems, and architecture, that will soon be covering aspects of parallel computing.
References-found: 23

