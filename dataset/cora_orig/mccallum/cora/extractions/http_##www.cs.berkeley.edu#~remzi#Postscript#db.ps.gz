URL: http://www.cs.berkeley.edu/~remzi/Postscript/db.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~remzi/papers.html
Root-URL: 
Title: NOW-Sort: A Scalable, Commodity-Workstation Sort  
Author: Remzi H. Arpaci Andrea C. Dusseau 
Address: Berkeley  
Affiliation: Computer Science Division University of California,  
Note: Final Project Report CS-286: Implementation of Database Systems  
Abstract: We have implemented and measured the performance of various sorting implementations on a Network of Workstations (NOW). In our preliminary study, we find that NOWs are competitive to the large-scale SMPs that are usually dominant in the sorting arena. Fast communication based on active messages is key in making the parallel versions of sorting scale, as is the distribution of disks across the cluster. We have also evaluated operating system support for managing memory and interacting with the file system, finding that most of the necessary support is in place.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. E. Anderson, D. E. Culler, and D. A. Patterson. </author> <title> A Case for NOW (Networks of Workstations). </title> <booktitle> IEEE Micro, </booktitle> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: The main difference between the two environments is that NOWs do not currently provide the same level of support for parallel program and remote job execution; fortunately, several research projects are addressing this issue <ref> [1, 10] </ref>. The cluster used as a prototype in this study is part of the Berkeley NOW project. The cluster consists of four UltraSparc workstations from Sun running Solaris 2.5, connected with a single high-speed Myrinet switch.
Reference: [2] <author> K. Batcher. </author> <title> Sorting Networks and their Applications. </title> <booktitle> In Proceedings of the AFIPS Spring Joint Computing Conference, </booktitle> <year> 1986. </year>
Reference-contexts: Our intention is to show that the NOW environment is natural and cost-effective for memory and I/O intensive parallel applications as well. The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community <ref> [2, 3, 9, 11, 12, 16] </ref>, among parallel programmers [5, 13, 18, 20], and the database world [7, 6, 8, 15, 17]. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system.
Reference: [3] <author> G. Blelloch, C. Leiserson, and B. Maggs. </author> <title> A Comparison of Sorting Algorithms for the Connection Machine CM-2. </title> <booktitle> In Symposium on Parallel Algorithms and Architectures, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: Our intention is to show that the NOW environment is natural and cost-effective for memory and I/O intensive parallel applications as well. The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community <ref> [2, 3, 9, 11, 12, 16] </ref>, among parallel programmers [5, 13, 18, 20], and the database world [7, 6, 8, 15, 17]. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system. <p> Note that this partitioning scheme works well only for uniformly distributed data; if the key values have a different distribution, then an approach such as sample sort is necessary to determine splitter values that partition the keys into groups of nearly equal sizes <ref> [3, 6] </ref>. However, for a benchmark such as Datamation that does not specify a particular distribution of keys, using sample sort introduces unnecessary overhead for first calculating the splitters across all nodes and then for comparing each key to the P splitters.
Reference: [4] <author> D. Culler, A. Dusseau, S. Goldstein, A. Krishnamurthy, S. Lumetta, T. von Eicken, and K. Yelick. </author> <title> Parallel Programming in Split-C. </title> <booktitle> In Supercomputing '93, </booktitle> <year> 1993. </year>
Reference-contexts: Our parallel applications are written in Split-C, a parallel extension of the C programming language that supports efficient access to a global address space on current distributed memory machines <ref> [4] </ref>. It promotes careful engineering and optimization of programs by providing a simple, predictable cost model.
Reference: [5] <author> D. Culler, A. Dusseau, R. Martin, and K. Schauser. </author> <title> Portability and Performance for Parallel Processing, chapter 4: Fast Parallel Sorting under LogP: </title> <booktitle> from Theory to Practice, </booktitle> <pages> pages 71-98. </pages> <publisher> John Wiley & Sons Ltd., </publisher> <year> 1994. </year>
Reference-contexts: The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community [2, 3, 9, 11, 12, 16], among parallel programmers <ref> [5, 13, 18, 20] </ref>, and the database world [7, 6, 8, 15, 17]. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system.
Reference: [6] <author> D. Dewitt, J. Naughton, and D. Schneider. </author> <title> Parallell Sorting on a Shared-Nothing Architecture using Probabilistic Splitting. </title> <booktitle> In Proceedings of the International Conference on Parallel and Distributed Information Systmes, </booktitle> <year> 1991. </year>
Reference-contexts: The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community [2, 3, 9, 11, 12, 16], among parallel programmers [5, 13, 18, 20], and the database world <ref> [7, 6, 8, 15, 17] </ref>. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system. <p> Note that this partitioning scheme works well only for uniformly distributed data; if the key values have a different distribution, then an approach such as sample sort is necessary to determine splitter values that partition the keys into groups of nearly equal sizes <ref> [3, 6] </ref>. However, for a benchmark such as Datamation that does not specify a particular distribution of keys, using sample sort introduces unnecessary overhead for first calculating the splitters across all nodes and then for comparing each key to the P splitters.
Reference: [7] <author> A. et. al. </author> <title> A Measure of Transaction Processing Power. </title> <journal> Datamation, </journal> <volume> 31(7) </volume> <pages> 112-118, </pages> <year> 1985. </year> <note> Also in Readings in Database Systems, </note> <editor> M.H. Stonebraker ed., </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1989. </year>
Reference-contexts: The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community [2, 3, 9, 11, 12, 16], among parallel programmers [5, 13, 18, 20], and the database world <ref> [7, 6, 8, 15, 17] </ref>. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system. <p> Our goal is to beat the current records on two popular sorting benchmarks, both of which are currently held by a 12 CPU, 200 MHz, 96 disk SGI Challenge multiprocessor with 2.25 GB of memory [17]. In the first benchmark, Datamation <ref> [7] </ref>, the input is a disk-resident file of one million 100-byte records, where the records have an incompressible 10-byte key field, and the output file must be a permutation of the input file sorted in key ascending order.
Reference: [8] <author> G. Graefe. </author> <title> Parallel External Sorting in Volcano. </title> <institution> Computer Science CU-CS-459, University of Colorado at Boulder, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community [2, 3, 9, 11, 12, 16], among parallel programmers [5, 13, 18, 20], and the database world <ref> [7, 6, 8, 15, 17] </ref>. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system. <p> According to the taxonomy specified in <ref> [8] </ref>, this is a multiple-input, multiple-output algorithm. 4.2 Baseline Algorithm We begin describing a simple parallel sorting algorithm which we will optimize later in this section. Our parallel algorithms use knowledge of the precise layout of the keys across disks and processors to minimize communication.
Reference: [9] <author> W. Hightower, J. Prins, and J. Reif. </author> <title> Implementations of Randominzed Sorting on Large Parallel Machines. </title> <booktitle> In Symposium on Parallel Algorithms and Architectures, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Our intention is to show that the NOW environment is natural and cost-effective for memory and I/O intensive parallel applications as well. The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community <ref> [2, 3, 9, 11, 12, 16] </ref>, among parallel programmers [5, 13, 18, 20], and the database world [7, 6, 8, 15, 17]. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system.
Reference: [10] <author> M. D. Hill, J. R. Larus, S. Reinhardt, and D. A. Wood. </author> <title> Cooperative-Shared Memory: Software and Hardware for Scalable Multiprocessors. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 11(4) </volume> <pages> 300-318, </pages> <year> 1993. </year>
Reference-contexts: The main difference between the two environments is that NOWs do not currently provide the same level of support for parallel program and remote job execution; fortunately, several research projects are addressing this issue <ref> [1, 10] </ref>. The cluster used as a prototype in this study is part of the Berkeley NOW project. The cluster consists of four UltraSparc workstations from Sun running Solaris 2.5, connected with a single high-speed Myrinet switch.
Reference: [11] <author> D. E. Knuth, </author> <title> editor. Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <year> 1973. </year>
Reference-contexts: Our intention is to show that the NOW environment is natural and cost-effective for memory and I/O intensive parallel applications as well. The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community <ref> [2, 3, 9, 11, 12, 16] </ref>, among parallel programmers [5, 13, 18, 20], and the database world [7, 6, 8, 15, 17]. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system.
Reference: [12] <author> T. Leighton. </author> <title> Tight Bounds on the Complexity of Parallel Sorting. </title> <journal> IEEE Transactions on Computers, </journal> <month> Apr. </month> <year> 1985. </year>
Reference-contexts: Our intention is to show that the NOW environment is natural and cost-effective for memory and I/O intensive parallel applications as well. The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community <ref> [2, 3, 9, 11, 12, 16] </ref>, among parallel programmers [5, 13, 18, 20], and the database world [7, 6, 8, 15, 17]. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system.
Reference: [13] <author> X. Li, G. Linoff, S. Smith, C. Stanfill, and K. Thearling. </author> <title> A Practical External Sort for Shared Disk MPPs. </title> <booktitle> In Proceedings of SUPERCOMPUTING '93, </booktitle> <pages> pages 666-675, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community [2, 3, 9, 11, 12, 16], among parallel programmers <ref> [5, 13, 18, 20] </ref>, and the database world [7, 6, 8, 15, 17]. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system.
Reference: [14] <author> A. M. Mainwaring. </author> <title> Active Message Application Programming Interface and Communication Subsystem Organization. </title> <type> Master's thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1995. </year>
Reference-contexts: Split-C is built on top of Active Messages, which provides low overhead, high bandwidth communication [19]. A specification for Active Messages 2.0 <ref> [14] </ref> has been written and is currently being implemented on the NOW cluster that will allow multiple programs using AM to execute simultaneously. However, currently, we are using Active Messages 1.0, which implies that no other parallel programs can run at the same time as our sorting programs.
Reference: [15] <author> C. Nyberg, T. Barclay, Z. Cvetanovic, J. Gray, and D. Lomet. AlphaSort: </author> <title> A RISC Machine Sort. </title> <booktitle> In Proceedings of 1994 ACM SIGMOD Conference, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community [2, 3, 9, 11, 12, 16], among parallel programmers [5, 13, 18, 20], and the database world <ref> [7, 6, 8, 15, 17] </ref>. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system. <p> Therefore, a new benchmark, MinuteSort, has been defined that measures the number of keys that can be sorted in a minute, instead of specifying a fixed number of keys <ref> [15] </ref>. The current record-holder for the MinuteSort an SGI system, which sorts 1.6 GB in less than one minute. An auxiliary goal of this study is to evaluate current operating system support for this class of applications. <p> By definition, the data does not fit into memory, which implies that the sort must be done in phases. We first describe the algorithm we use for the sort, largely based on work in <ref> [15] </ref>. <p> We apply the simple optimization of buffering the writes into large chunks. However, we do not apply a more advanced selection of the least key (e.g. a tournament tree, as in <ref> [15] </ref>), since we are thoroughly disk limited anyhow. The performance of the algorithm on one disk is woeful: by reading and writing at the same time, we actually perform worse than we would had we used a synchronous first phase (read, sort, write, repeatedly).
Reference: [16] <author> J. H. Reif and L. G. Valiant. </author> <title> A Logarithmic time Sort for Linear Size Networks. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 60-76, </pages> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: Our intention is to show that the NOW environment is natural and cost-effective for memory and I/O intensive parallel applications as well. The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community <ref> [2, 3, 9, 11, 12, 16] </ref>, among parallel programmers [5, 13, 18, 20], and the database world [7, 6, 8, 15, 17]. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system.
Reference: [17] <author> A. Sweeney, D. Doucette, W. Hu, C. Anderson, M. Nishimoto, and G. Peck. </author> <title> Scalability in the XFS File System. </title> <booktitle> In Proceedings of the USENIX 1996 Annual Technical Conference, </booktitle> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community [2, 3, 9, 11, 12, 16], among parallel programmers [5, 13, 18, 20], and the database world <ref> [7, 6, 8, 15, 17] </ref>. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system. <p> Our goal is to beat the current records on two popular sorting benchmarks, both of which are currently held by a 12 CPU, 200 MHz, 96 disk SGI Challenge multiprocessor with 2.25 GB of memory <ref> [17] </ref>. In the first benchmark, Datamation [7], the input is a disk-resident file of one million 100-byte records, where the records have an incompressible 10-byte key field, and the output file must be a permutation of the input file sorted in key ascending order. <p> May 10, 1996 - 17 : 45 DRAFT 13 The current record for the MinuteSort benchmark is 1.6 GB, performed by a 12-processor SGI Challenge with 2.2 GB of memory and 96 disks <ref> [17] </ref>.
Reference: [18] <author> K. Thearling and S. Smith. </author> <title> An Improved Supercomputer Sorting Benchmark. </title> <type> Technical report, </type> <institution> Thinking Machines Corporation, </institution> <year> 1991. </year>
Reference-contexts: The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community [2, 3, 9, 11, 12, 16], among parallel programmers <ref> [5, 13, 18, 20] </ref>, and the database world [7, 6, 8, 15, 17]. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system.
Reference: [19] <author> T. von Eicken, D. E. Culler, S. C. Goldstein, and K. E. Schauser. </author> <title> Active Messages: a Mechanism for Integrated Communication and Computation. </title> <booktitle> In Proceedings of the 19th Annual Symposium on Computer Architecture, </booktitle> <address> Gold Coast, Australia, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Split-C is built on top of Active Messages, which provides low overhead, high bandwidth communication <ref> [19] </ref>. A specification for Active Messages 2.0 [14] has been written and is currently being implemented on the NOW cluster that will allow multiple programs using AM to execute simultaneously.
Reference: [20] <author> M. Zagha and G. Blelloch. </author> <title> Radix Sort for Vector Multiprocessors. </title> <booktitle> In Supercomputing, </booktitle> <year> 1991. </year>
Reference-contexts: The problem we will focus on in this paper is sorting, which has a extensive research history in the theoretical community [2, 3, 9, 11, 12, 16], among parallel programmers <ref> [5, 13, 18, 20] </ref>, and the database world [7, 6, 8, 15, 17]. One of the advantages of a network of workstations is that the configuration of disks to processors is more flexible than in a vendor-constructed system.
References-found: 20

