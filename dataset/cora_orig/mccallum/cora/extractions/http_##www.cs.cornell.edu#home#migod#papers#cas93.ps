URL: http://www.cs.cornell.edu/home/migod/papers/cas93.ps
Refering-URL: http://www.cs.cornell.edu/home/migod/papersIndex.html
Root-URL: 
Title: Visual Formalisms for Configuration Management  
Author: Michael W. Godfrey 
Affiliation: Department of Computer Science University of Toronto and IBM Centre for Advanced Studies  
Abstract: As reuse of software components becomes more commonplace, being able to understand, manipulate and reason about software system architectures acquires new importance. Although commercial software development environments have addressed many of the issues of configuration management, there is still a need for visual formalisms that can aid in representing and manipulating architectures of software systems. This paper introduces ConForm (Configuration Formalism), a graphical notation for representing configurations of software systems. Several of the basic concepts of ConForm were inspired by the C/Mesa language [8]; however, ConForm is both language and tool independent. ConForm is notable because it is both a visual and a formal approach to representing software architectures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Luca Cardelli, James Donahue, Lucille Glassman, Mick Jordan, Bill Kalsow and Greg Nelson, </author> <type> "Modula-3 Report (revised)", Technical Report 52, </type> <institution> Digital Systems Research Center, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: Program Units Implement Interfaces Each program unit is assumed to implement a named interface. Although this rule might seem restrictive, it can be added on top of most conventional programming languages with minimal effort. In some languages, such as Modula-3 <ref> [1] </ref> and Mesa [8], this convention is actually part of the language. 2 In oth 2 In practice, Modula-3 programmers often omit creating an explicit interface when no other Modula-3 module will implement the same interface.
Reference: [2] <author> Peter H. Feiler, </author> <title> "Configuration Man--agement Models in Commercial Environments", </title> <type> Technical Report CMU/SEI-91-TR-7, </type> <institution> Software Engineering Institute, Carnegie-Mellon University, </institution> <month> March </month> <year> 1991. </year>
Reference: [3] <author> David Garlan, Mary Shaw, Chris Okasaki, Cur-tis M. Scott, and Roy F Swonger, </author> <title> "Experience with a Course on Architectures for Software Systems", </title> <type> Technical Report CMU/SEI-92-TR-17, </type> <month> August </month> <year> 1992. </year>
Reference: [4] <author> David Harel, </author> <title> "On Visual Formalisms", </title> <journal> Communications of the ACM, </journal> <volume> vol. 31, no. 5, </volume> <month> May </month> <year> 1988. </year>
Reference: [5] <author> David Harel, </author> <title> "Biting the Silver Bullet", </title> <journal> IEEE Computer, </journal> <volume> vol. 25, no. 1, </volume> <month> January </month> <year> 1992, </year> <pages> pp 8-20. </pages>
Reference-contexts: System modelling, however, is common to all languages and environments 1 "It is our duty to forge ahead to turn system mod-elling into a predominantly visual and graphical process. I believe this is one of the most promising trends in our field." <ref> [5] </ref> that have the concept of configurations, and many of the issues of system modelling can be attacked at a language-independent level.
Reference: [6] <author> R. C. Holt, </author> <title> Turing Reference Manual, Third Edition, </title> <publisher> Holt Software Associates, </publisher> <address> Toronto, </address> <year> 1993. </year>
Reference-contexts: Many of the concepts in ConForm were inspired by the C/Mesa language [8]; however, ConForm is programming language independent. Indeed, much of the investigation into ConForm was done using example systems written in a variety of programming languages, including Mesa and Object-Oriented Turing <ref> [6] </ref>. The main intended benefit of ConForm is to facilitate system modelling. Other aspects of configuration management | such as ver-sioning, access/concurrency control and system building | are not explicitly addressed by ConForm. <p> In this case, a default interface is considered to be created with the same name as the implementing module. However, the language definition presumes the existence of the interface, even if it is not created explicitly by the programmer. ers, such as Object-Oriented Turing <ref> [6] </ref>, it is optional; in this case, interfaces can be trivially extracted from unit definitions and given names. In most programming languages, an interface provides a listing of items that will be implemented and "exported" by a subsequent program unit.
Reference: [7] <author> Spiros Mancoridis, R. C. Holt and David Penny, </author> <title> "A Conceptual Framework for Software Development", </title> <booktitle> Proc. of the Twenty-First ACM Computer Science Conference, </booktitle> <address> Indianapolis, Indiana, Febru-ary, </address> <year> 1993. </year>
Reference-contexts: A complete component can be built, but exactly what this entails will depend on the underlying platform. However, this is transparent to the configurer. 4 Summary and Research Directions Currently, no tools exist to perform checking or enforce constraints. However, previous experience with the Object-Oriented Turing (OOT) environment <ref> [7] </ref> suggests that building and integrating ConForm tools into the OOT system should be straightforward.
Reference: [8] <author> James G. Mitchell, William Maybury and Richard Sweet, </author> <title> Mesa Language Manual, </title> <note> Version 5.0, Technical Report No. CSL-79-3, Xerox-PARC, </note> <month> April </month> <year> 1979. </year>
Reference-contexts: Visual notations hold promise, yet they have not yet been investigated very thoroughly. 1 This paper introduces ConForm (configuration formalism), a visual formalism for representing software architectures. Many of the concepts in ConForm were inspired by the C/Mesa language <ref> [8] </ref>; however, ConForm is programming language independent. Indeed, much of the investigation into ConForm was done using example systems written in a variety of programming languages, including Mesa and Object-Oriented Turing [6]. The main intended benefit of ConForm is to facilitate system modelling. <p> Program Units Implement Interfaces Each program unit is assumed to implement a named interface. Although this rule might seem restrictive, it can be added on top of most conventional programming languages with minimal effort. In some languages, such as Modula-3 [1] and Mesa <ref> [8] </ref>, this convention is actually part of the language. 2 In oth 2 In practice, Modula-3 programmers often omit creating an explicit interface when no other Modula-3 module will implement the same interface.
Reference: [9] <author> Peter Wegner, </author> <title> "Dimensions of Object-Based Language Design", OOPSLA '87 Proceedings, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> vol. 22, no. 12, </volume> <year> 1987. </year>
Reference-contexts: The tab is labelled with the name of the interface implemented by the program unit. Configurations may also implement interfaces; this will be discussed later. Program Units Define Classes and Import Unit Instances ConForm supports object-based computing <ref> [9] </ref>; that is, it supports instantiation of program units.
References-found: 9

