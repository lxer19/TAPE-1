URL: ftp://ftp.cs.rochester.edu/pub/u/rosca/gp/96.drift.ps.gz
Refering-URL: http://www.cs.rochester.edu/u/rosca/research.html
Root-URL: 
Title: Complexity Drift in Evolutionary Computation with Tree Representations  
Author: Justinian P. Rosca, Dana H. Ballard 
Date: December 1996  
Address: Rochester, New York 14627  
Affiliation: The University of Rochester Computer Science Department  
Pubnum: Technical Report NRL5  
Abstract: One serious problem of standard Genetic Programming (GP) is that evolved expressions appear to drift towards large and slow forms on average. This report presents a novel analysis of the role played by variable complexity in the selection and survival of GP expressions. It defines a particular property of GP representations, called rooted tree-schema, that sheds light on the role of variable complexity of evolved representations. A tree-schema is a relation on the space of tree-shaped structures which provides a quantifiable partitioning of the search space. The present analysis answers questions such as: What role does variable complexity play in the selection and survival of evolved expressions? What is the influence of a parsimony penalty? How heavy should parsimony penalty be weighted or how should it be adapted in order to preserve the underlying optimization process? Are there alternative approaches to simulating a parsimony penalty that do not result in a change of the fitness landscape? The present report provides theoretical answers to these questions, interpretation of these results, and an experimental perspective. This material is based upon work supported by the National Science Foundation under grant numbers IRI-9406481 and CDA-9491142, and by the National Institutes of Health under grant number 1 P41 RR09283. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of these agencies. 
Abstract-found: 1
Intro-found: 1
Reference: [Altenberg, 1995] <author> Lee Altenberg, </author> <title> "The Schema Theorem and Price's Theorem," </title> <editor> In L. Dar-rell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 23-49, </pages> <address> San Mateo, CA, USA, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: A formal notion of schema independence should take into account such effects. This would focus the analysis and interpretations on the relevant entities, i.e. the independent competing schemata. Another critique is that schemata do not necessarily capture relationships among meaningful properties that determine fitness <ref> [Altenberg, 1995] </ref>. Generalized schemata can be defined by partitioning the space of structures with many other relations. Such attempts 4 have been presented in the GA literature [Vose and Liepins, 1991; Radcliffe, 1991]. Rela--tions analogous to the schema theorem will hold for other representations as well [Radcliffe, 1992]. <p> Price outlined that his theorem helps in constructing hypothesis about selection, such as whether a certain behavioral feature is advantageous: Recognition of covariance is of no advantage for numerical calculation, but of much advantage for evolutionary reasoning and mathematical model building [[Price, 1970], page 521] Altenberg <ref> [Altenberg, 1995] </ref> brought the attention on Price's theory and its general implications in GA theory.
Reference: [Andre and Teller, 1996] <author> David Andre and Astro Teller, </author> <title> "A Study in Program Response and the Negative Effects of Introns in Genetic Programming," </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 12-20, </pages> <address> Cambridge, MA, 1996. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: For hierarchical GP representations [Rosca, 1996] showed that much of the size increase is due to ineffective code too. However, the role of introns has been disputed in the case of GP using tree representations <ref> [Andre and Teller, 1996] </ref>. For one thing, the overhead introduced by exponentially increasing tree sizes may offset any protective effects of introns. Tackett pointed out that bloating cannot be selection-neutral [Tackett, 1994]. He presented experiments suggesting that the average growth in size is proportional to the selection pressure.
Reference: [Angeline, 1994] <author> Peter J. Angeline, </author> <title> "Genetic Programming and Emergent Intelligence," </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 4, </booktitle> <pages> pages 75-98. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1994. </year>
Reference: [Back et al., 1991] <editor> Thomas Back, Frank Hoffmeister, and Hans-Paul Schwefel, </editor> <title> "A Survey of Evolutionary Strategies," </title> <booktitle> In Proceedings of the Fourth International Conference on Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction Complexity of evolved structures is a non-issue in most of the recent evolutionary computation (EC) literature. EC techniques such as genetic algorithms (GAs) [Holland, 1975], evolutionary programming (EP) [Fogel et al., 1966; Fogel, 1995], and evolution strategies (ES) <ref> [Back et al., 1991] </ref> use mostly fixed length encodings of the structures to be evolved. This design decision seriously limits their applicability to the domain of parametric problems.
Reference: [Fogel, 1995] <author> David B. Fogel, </author> <title> Evolutionary computation : toward a new philosophy of machine intelligence, </title> <publisher> IEEE Press, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Complexity of evolved structures is a non-issue in most of the recent evolutionary computation (EC) literature. EC techniques such as genetic algorithms (GAs) [Holland, 1975], evolutionary programming (EP) <ref> [Fogel et al., 1966; Fogel, 1995] </ref>, and evolution strategies (ES) [Back et al., 1991] use mostly fixed length encodings of the structures to be evolved. This design decision seriously limits their applicability to the domain of parametric problems.
Reference: [Fogel et al., 1966] <author> Lawrence J. Fogel, Alvin J. Owens, and Michael J. Walsh, </author> <title> Artificial intelligence through simulated evolution, </title> <publisher> Wiley, </publisher> <year> 1966. </year>
Reference-contexts: 1 Introduction Complexity of evolved structures is a non-issue in most of the recent evolutionary computation (EC) literature. EC techniques such as genetic algorithms (GAs) [Holland, 1975], evolutionary programming (EP) <ref> [Fogel et al., 1966; Fogel, 1995] </ref>, and evolution strategies (ES) [Back et al., 1991] use mostly fixed length encodings of the structures to be evolved. This design decision seriously limits their applicability to the domain of parametric problems.
Reference: [Geman et al., 1992] <author> S. Geman, E.Bienenstock, and R.Doursat, </author> <title> "Neural Networks and the Bias/Variance Dilemma," </title> <journal> Neural Computation, </journal> (4):1-58, 1992. 
Reference-contexts: In statistical terms this is the problem of learning with low bias or tabula-rasa learning. However, low bias in the choice of models is paid for by a high variance (see <ref> [Geman et al., 1992] </ref> for an excellent introduction to the bias/variance dilemma). Methods for balancing bias and variance include techniques that rely on a complexity penalty function which is added to the error term in order to promote parsimonious solutions.
Reference: [Goldberg, 1989] <author> David E. Goldberg, </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning, </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: interpreted as a template string whose 0 and 1 bits represent a fragment, or block of a chromosome. 3 The Schema Theorem, gives an estimate of the change in the frequency of a schema in the population as a result of fitness-proportionate reproduction, crossover, and mutation ([Holland, 1992], see also <ref> [Goldberg, 1989] </ref>). We will restate it below. Let H be a fixed schema of defining length ffi (H) and m (H; t) be the number of copies of H in the population at time (generation) t. <p> Offspring are created through copying or single-point crossover, and additional variation through mutation. The probabilities for crossover and mutation are respectively p c and p m . Then, a lower bound on the number of copies of H in the next generation is given by <ref> [Goldberg, 1989] </ref>: m (H; t + 1) m (H; t) f 1 p c L 1 (1 p m ) o (H) (1) The coefficient of m (H; t) on the right hand side of relation (1) represents an approximation of the growth factor of schema H. <p> Such schemata are building blocks. Good individuals tend to be made up of good schemata, i.e. building blocks. The GA discovers and recombines such building blocks in parallel to create solutions. This is the essence of the Building Block Hypothesis as presented in <ref> [Goldberg, 1989] </ref>. Moreover, Holland argued that the search for an optimal string combines exploitation (preservation of schemata) and exploration (creation of new schemata) in close to an optimal proportion.
Reference: [Graham et al., 1994] <author> Ronald L. Graham, Donald E. Knuth, and Oren Patashnik, </author> <title> Concrete mathematics : a foundation for computer science, </title> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1994. </year>
Reference-contexts: Also, the sense of the inequality is reversed if b 1 b 2 ::: b n , <ref> [Graham et al., 1994] </ref>. 11 on factors b and c. An increased value of the product b c results in an increased threshold value in equation 13. The b factor captures the interaction between fitness and size within tree-schema H.
Reference: [Grefenstette and Baker, 1989] <author> J.J. Grefenstette and J.E. Baker, </author> <title> "How Genetic Algorithms work: a critical look at implicit parallelism," </title> <editor> In J.D. Schaffer, editor, </editor> <booktitle> Proceedings of the 3rd International Conference on Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: Schemata theory has been criticized for not reflecting the processing done by a GA and not being really informative. One such critique is that GA allocates trials to schemata very differently from the optimal allocation given by the Two-Armed-Bandit solution. This was shown on contrived examples <ref> [Grefenstette and Baker, 1989; Muhlenbein, 1991] </ref>. Some of the discussions of schemata theory caveats, such as that schema frequency variation in disharmony with the Schema Theorem, are summarized in [Mitchell, 1996]. The problem with current interpretations is the consideration of possibly non-independent schemata.
Reference: [Holland, 1992] <author> John H. Holland, </author> <title> Adaptation in Natural and Artificial Systems, An Introductory Analysis with Applications to Biology, </title> <booktitle> Control and Artificial Intelligence, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992, </year> <note> Second edition (First edition, </note> <year> 1975). </year>
Reference-contexts: Such results are considered critical in the challenging attempt of understanding and controlling the behavior of evolutionary computation algorithms operating with variable complexity representations and on future work in EC. The layout of the report is as follows. Section 2 overviews schema theory <ref> [Holland, 1992] </ref> and attempts to define the notion of GP schema. Section 3 defines the rooted tree-schema relation. It then develops a theoretical analysis of the role played by the variable complexity of evolved representations and discusses interpretations of the theory. <p> The argument relied on the analogy between the allocation of samples to schemata in the GA with the allocation of effort in the Two-Armed-Bandit problem <ref> [Holland, 1975; Holland, 1992] </ref>. Schemata theory has been criticized for not reflecting the processing done by a GA and not being really informative. One such critique is that GA allocates trials to schemata very differently from the optimal allocation given by the Two-Armed-Bandit solution.
Reference: [Holland, 1975] <author> John H. Holland, </author> <title> Adaptation in Natural and Artificial Systems, An Introductory Analysis with Applications to Biology, </title> <booktitle> Control and Artificial Intelligence, </booktitle> <institution> The University of Michigan, </institution> <address> 1st edition, </address> <year> 1975. </year>
Reference-contexts: 1 Introduction Complexity of evolved structures is a non-issue in most of the recent evolutionary computation (EC) literature. EC techniques such as genetic algorithms (GAs) <ref> [Holland, 1975] </ref>, evolutionary programming (EP) [Fogel et al., 1966; Fogel, 1995], and evolution strategies (ES) [Back et al., 1991] use mostly fixed length encodings of the structures to be evolved. This design decision seriously limits their applicability to the domain of parametric problems. <p> The argument relied on the analogy between the allocation of samples to schemata in the GA with the allocation of effort in the Two-Armed-Bandit problem <ref> [Holland, 1975; Holland, 1992] </ref>. Schemata theory has been criticized for not reflecting the processing done by a GA and not being really informative. One such critique is that GA allocates trials to schemata very differently from the optimal allocation given by the Two-Armed-Bandit solution.
Reference: [Iba et al., 1994] <author> Hitoshi Iba, Hugo de Garis, and Taisuke Sato, </author> <title> "Genetic Programming Using a Minimum Description Length Principle," </title> <editor> In Kim Kinnear Jr., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year> <month> 28 </month>
Reference-contexts: Nonetheless GP manages to sample the space of programs and to discover automatically satisfiable models of variable complexity. The MDL principle has been also applied in GP to extend the fitness function of hybrid classification models <ref> [Iba et al., 1993; Iba et al., 1994] </ref>. For example [Iba et al., 1994] applied the MDL principle in the learning rule of a GP-regression tree hybrid. [Zhang and Muhlenbein, 1995] used an adaptive parsimony strategy in a GP-neural net hybrid. <p> Nonetheless GP manages to sample the space of programs and to discover automatically satisfiable models of variable complexity. The MDL principle has been also applied in GP to extend the fitness function of hybrid classification models [Iba et al., 1993; Iba et al., 1994]. For example <ref> [Iba et al., 1994] </ref> applied the MDL principle in the learning rule of a GP-regression tree hybrid. [Zhang and Muhlenbein, 1995] used an adaptive parsimony strategy in a GP-neural net hybrid. <p> MDL-based fitness functions have been unsuccessful in the case of GP evolving pure program structures. Iba outlined that the MDL-based fitness measure can be applied problems satisfying the "size-based performance" criterion <ref> [Iba et al., 1994] </ref>, where the more the tree structure grows the better its performance becomes.[Rosca and Ballard, 1994] has used the MDL principle to assess the suitability of an extension of GP with subroutines called adaptive representation (AR).
Reference: [Iba et al., 1993] <author> Hitoshi Iba, Takio Kurita, Hugo de Garis, and Taisuke Sato, </author> <title> "System Identification using Structured Genetic Algorithms," </title> <booktitle> In Proceedings of the Fifth International Conference on Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc, </publisher> <year> 1993. </year>
Reference-contexts: Nonetheless GP manages to sample the space of programs and to discover automatically satisfiable models of variable complexity. The MDL principle has been also applied in GP to extend the fitness function of hybrid classification models <ref> [Iba et al., 1993; Iba et al., 1994] </ref>. For example [Iba et al., 1994] applied the MDL principle in the learning rule of a GP-regression tree hybrid. [Zhang and Muhlenbein, 1995] used an adaptive parsimony strategy in a GP-neural net hybrid.
Reference: [Koza, 1992] <author> John R. Koza, </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection, </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: This would be particularly the case with complex design or control problems where the structure of a satisfactory solution is unknown. Genetic programming (GP) is a GA-derived technique that uses open-ended complexity representations of flexible semantics <ref> [Koza, 1992] </ref>. GP evolves a population of programs in some problem dependent language, in the form of tree expressions of variable length (complexity) and shape that encode solutions to the problem. <p> Let f H be the average fitness of all trees matching H in the population and f be the average fitness of the population. 4 Consider the standard GP procedure, as defined in <ref> [Koza, 1992] </ref>, that uses fitness proportionate selection for reproduction. Offspring are created through copying, tree crossover, and mutation. The probabilities for crossover and mutation are respectively p c and p m . Let also p d = p c + p m . <p> This is true if and only if the right hand side below holds p , s x f (23) 7 So far we have bypassed details about the nature of f, such as whether f is raw fitness or normalized fitness (see <ref> [Koza, 1992] </ref>), and rather considered that the fitness function f supplies values used during the selection phase of the GP algorithm. 14 The following theorem covers the general case: Theorem 3. <p> The second problem is the induction of a controller for a robotic agent in a dynamic and nondeterministic environment, as in the Pac-Man game <ref> [Koza, 1992; Rosca and Ballard, 1996a] </ref>. Raw fitness here is computed from 17 the performance of evolved controllers over a number of simulations.
Reference: [Koza, 1994] <editor> John R. Koza, </editor> <booktitle> Genetic Programming II, </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Two test problems are used. The first problem is the induction of a Boolean formula (circuit) that computes parity on a set of bits <ref> [Koza, 1994] </ref>. The raw fitness function has access to fitness cases that show the parity value for all inputs, and counts the number of correct parity computations. <p> Another suggestion for confining the increase in complexity is to employ modular GP extensions such as algorithms based on the evolution of the architecture <ref> [Koza, 1994] </ref>, heuristic extensions for the discovery of subroutines [Rosca and Ballard, 1994; Rosca and Ballard, 1996a], or GP with architecture modifying operation using code duplication [Koza, 1995]. 26 Evolved modular programs theoretically have a lower descriptional complexity [Rosca and Ballard, 1994] and also appear to present better generality [Rosca, 1996;
Reference: [Koza, 1995] <author> John R. Koza, </author> <title> "Gene Duplication to Enable Genetic Programming to Concurrently Evolve both the Architecture and Work-Performing Steps of a Computer Program," </title> <editor> In Chris S. Mellish, editor, </editor> <booktitle> IJCAI, </booktitle> <volume> volume 1, </volume> <pages> pages 734-740. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: Another suggestion for confining the increase in complexity is to employ modular GP extensions such as algorithms based on the evolution of the architecture [Koza, 1994], heuristic extensions for the discovery of subroutines [Rosca and Ballard, 1994; Rosca and Ballard, 1996a], or GP with architecture modifying operation using code duplication <ref> [Koza, 1995] </ref>. 26 Evolved modular programs theoretically have a lower descriptional complexity [Rosca and Ballard, 1994] and also appear to present better generality [Rosca, 1996; Rosca and Ballard, 1996b].
Reference: [Li and Vitanyi, 1993] <author> Ming Li and Paul Vitanyi, </author> <title> An Introduction to Kolmogorov Complexity and its Applications, </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: What is simple often turns out to be more general. One common approach to dealing with a variable complexity model within the Bayesian estimation framework is Rissanen's minimum description length (MDL) principle <ref> [Li and Vitanyi, 1993] </ref>. The MDL principle trades off the model code length, i.e. the complexity term, against the error code length, i.e. the data not explained by the model or error term. Complexity is naturally expressed as the size of code or data in bits of information.
Reference: [Li and Vitanyi, 1992] <author> Ming Li and Paul M. B. Vitanyi, </author> <title> "Inductive Reasonong and Kol-mogorov Complexity," </title> <journal> Journal of Computer and Systems Sciences, </journal> <volume> 44 </volume> <pages> 343-384, </pages> <year> 1992. </year>
Reference-contexts: This idea resonates with one of the fundamental principles in inductive learning represented by Ockham's razor principle, which is interpreted as: "Among the several theories that are consistent with the observed phenomena, one should pick the simplest theory" <ref> [Li and Vitanyi, 1992] </ref>. What is simple often turns out to be more general. One common approach to dealing with a variable complexity model within the Bayesian estimation framework is Rissanen's minimum description length (MDL) principle [Li and Vitanyi, 1993].
Reference: [Muhlenbein, 1991] <author> Heinz Muhlenbein, </author> <title> "Evolution in Time and Space The Parallel Genetic Algorithm," </title> <editor> In Gregory J.E. Rawlins, editor, </editor> <booktitle> Foundations of Genetic Algorithms 1, </booktitle> <pages> pages 316-337, </pages> <address> San Mateo, CA, USA, 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Schemata theory has been criticized for not reflecting the processing done by a GA and not being really informative. One such critique is that GA allocates trials to schemata very differently from the optimal allocation given by the Two-Armed-Bandit solution. This was shown on contrived examples <ref> [Grefenstette and Baker, 1989; Muhlenbein, 1991] </ref>. Some of the discussions of schemata theory caveats, such as that schema frequency variation in disharmony with the Schema Theorem, are summarized in [Mitchell, 1996]. The problem with current interpretations is the consideration of possibly non-independent schemata.
Reference: [Mitchell, 1996] <author> Melanie Mitchell, </author> <title> An Introduction To Genetic Algorithms, </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: This was shown on contrived examples [Grefenstette and Baker, 1989; Muhlenbein, 1991]. Some of the discussions of schemata theory caveats, such as that schema frequency variation in disharmony with the Schema Theorem, are summarized in <ref> [Mitchell, 1996] </ref>. The problem with current interpretations is the consideration of possibly non-independent schemata. Independence is defined relative to the contribution to fitness. Schema interdependence is due to inclusion relationships and epistasis. A formal notion of schema independence should take into account such effects.
Reference: [Nordin et al., 1995] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf, </author> <title> "Explicitly Defined Introns and Destructive Crossover in Genetic Programming," </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceeedings of the Workshop on Genetic Programming: From Theory to Real-World Applications (NRL TR 95.2, University of Rochester), </booktitle> <pages> pages 6-22, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Related to the size problem (also called the bloating phenomenon), GP research has focused on the analysis of introns . Introns are pieces of code with no effect on the output. An analysis of introns goes hand in hand with an analysis of bloating. <ref> [Nordin et al., 1995] </ref> tracked introns in an assembly language GP system based on a linear (sequential) but variable length program representation. The analysis suggested that the increase in size is a "defense against crossover." A similar conclusion is reached here in Theorem 1 (see section 11). <p> In the linear representation, the noticed increase in the size of programs was attributed to introns. Based on experiments with controlled crossover or mutation rate within intron fragments, <ref> [Nordin et al., 1995] </ref> suggested that a representation which generates introns leads to better search effectiveness. Thus, introns may have a positive role in GP search protecting against destructive genetic operations. For hierarchical GP representations [Rosca, 1996] showed that much of the size increase is due to ineffective code too.
Reference: [Olsson, 1995] <author> Roland Olsson, </author> <title> "Inductive functional programming using incremental program transformation," </title> <journal> Artificial Intelligence, </journal> <volume> 74 </volume> <pages> 55-81, </pages> <year> 1995. </year>
Reference-contexts: In both cases GP manipulates tree structures corresponding to a hierarchical multiple regression model of variable complexity, decision trees, or sigma-pi neural networks, rather than 8 An alternative approach to program induction based on an iterative deepening exhaustive search is taken in ADATE <ref> [Olsson, 1995] </ref>. However, ADATE can not hope to solve problems for which the complexity of a solution is large. 25 programs. MDL-based fitness functions have been unsuccessful in the case of GP evolving pure program structures.
Reference: [O'Reilly and Oppacher, 1995] <author> Una-May O'Reilly and Franz Oppacher, </author> <title> "The Troubling Aspects of a Building Block Hypothesis for Genetic Programming," </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 73-88, </pages> <address> San Mateo, CA, USA, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The definition above suggests the intuitive idea that subtrees may play the role of functional features and that good features may be functionally combined to create good representations [Rosca and Ballard, 1996a]. Another, more general, GP schema definition is provided in <ref> [O'Reilly and Oppacher, 1995] </ref>. The previous definition allows for trees to be combined only as subtrees in larger structures. This second definition makes explicit how schema components can be combined in larger structures in analogy to a GA schema by using wildcards. A GP-schema H is a set of pairs. <p> This makes it extremely difficult to characterize how GP allocates trials to regions of the space of program trees. The difficulty is reflected in the inconclusive attempt for deriving a GP Schema Theorem based on the second schema definition presented above <ref> [O'Reilly and Oppacher, 1995] </ref>. 3 Portraying Variable Complexity Representations In contrast to fixed length GA representations, each member x of the GP population has a variable size s x .
Reference: [Price, 1970] <author> Price, </author> <title> "Selection and Covariance," </title> <journal> Nature, </journal> <volume> 227 </volume> <pages> 520-521, </pages> <month> August </month> <year> 1970. </year>
Reference-contexts: Indeed, schema theory explains the proliferation of substructures through selection but this fact is indicative more of when a schema hypothesis can be refuted. An argument for this remark is the intended use of Price's covariance and selection theorem <ref> [Price, 1970] </ref>. Price's theorem states that the variation in the frequency of a gene between the offspring and the parent population is proportional to the covariance between the frequency of the gene in an individual and the number of offspring of that individual over the parent population.
Reference: [Quinlan and Rivest, 1989] <author> J. Ross Quinlan and Ronald L. Rivest, </author> <title> "Inferring Decision Trees Using the Minimum Description Length Principle," </title> <booktitle> Information and Computation, </booktitle> <pages> pages 227-248, </pages> <year> 1989. </year>
Reference-contexts: Both error and complexity are measured in information bits that have to be transmitted over a line in order to be able to recreate the original data at the other end of the line. By applying the minimum description length principle similarly to <ref> [Quinlan and Rivest, 1989] </ref>, we obtain the following definition of the parsimony component: p (s x ) = k 1 s x logs x k 2 s x (17) where k 1 depends on the inverse of the log of the number of fitness cases and k 2 is proportional to
Reference: [Radcliffe, 1991] <author> Nicholas J. Radcliffe, </author> <title> "Equivalence Class Analysis of Genetic Algorithms," </title> <journal> Complex Systems 5, </journal> (2):183-205, 1991. <volume> 29 </volume>
Reference-contexts: Another critique is that schemata do not necessarily capture relationships among meaningful properties that determine fitness [Altenberg, 1995]. Generalized schemata can be defined by partitioning the space of structures with many other relations. Such attempts 4 have been presented in the GA literature <ref> [Vose and Liepins, 1991; Radcliffe, 1991] </ref>. Rela--tions analogous to the schema theorem will hold for other representations as well [Radcliffe, 1992]. Indeed, schema theory explains the proliferation of substructures through selection but this fact is indicative more of when a schema hypothesis can be refuted. <p> Such attempts have been presented in the GA literature <ref> [Vose and Liepins, 1991; Radcliffe, 1991] </ref>. Next we propose a simple structural property that defines a different type of partitioning of the space of programs. The space of programs will be partitioned based on the topmost structure of trees.
Reference: [Radcliffe, 1992] <author> Nicholas J. Radcliffe, </author> <title> "Non-linear Genetics Representations," </title> <editor> In R. M fagnner and B. Manderick, editors, </editor> <title> Parallel Problem Solving from Nature, 2. </title> <publisher> Else-vier Science Publishers, </publisher> <year> 1992. </year>
Reference-contexts: Generalized schemata can be defined by partitioning the space of structures with many other relations. Such attempts 4 have been presented in the GA literature [Vose and Liepins, 1991; Radcliffe, 1991]. Rela--tions analogous to the schema theorem will hold for other representations as well <ref> [Radcliffe, 1992] </ref>. Indeed, schema theory explains the proliferation of substructures through selection but this fact is indicative more of when a schema hypothesis can be refuted. An argument for this remark is the intended use of Price's covariance and selection theorem [Price, 1970].
Reference: [Rosca, 1996] <author> Justinian P. Rosca, </author> <title> "Generality versus size in genetic programming," </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 381-387, </pages> <address> Cam-bridge, MA, 1996. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Based on experiments with controlled crossover or mutation rate within intron fragments, [Nordin et al., 1995] suggested that a representation which generates introns leads to better search effectiveness. Thus, introns may have a positive role in GP search protecting against destructive genetic operations. For hierarchical GP representations <ref> [Rosca, 1996] </ref> showed that much of the size increase is due to ineffective code too. However, the role of introns has been disputed in the case of GP using tree representations [Andre and Teller, 1996]. <p> architecture [Koza, 1994], heuristic extensions for the discovery of subroutines [Rosca and Ballard, 1994; Rosca and Ballard, 1996a], or GP with architecture modifying operation using code duplication [Koza, 1995]. 26 Evolved modular programs theoretically have a lower descriptional complexity [Rosca and Ballard, 1994] and also appear to present better generality <ref> [Rosca, 1996; Rosca and Ballard, 1996b] </ref>. The problem that evolved expressions tend to drift towards large and slow forms without necessarily improving the results was recognized in some excellent early work in GP applied to the simulation of textures for use in computer graphics [Sims, 1991].
Reference: [Rosca and Ballard, 1994] <author> Justinian P. Rosca and Dana H. Ballard, </author> <title> "Hierarchical Self-Organization in Genetic Programming," </title> <booktitle> In 11th ICML, </booktitle> <pages> pages 251-258. </pages> <publisher> Morgan Kauf-mann, </publisher> <year> 1994. </year>
Reference-contexts: logs x k 2 s x (17) where k 1 depends on the inverse of the log of the number of fitness cases and k 2 is proportional to the number of bits needed to encode all symbols and inversely proportional to the log of the number of fitness cases <ref> [Rosca and Ballard, 1994] </ref>. <p> Another suggestion for confining the increase in complexity is to employ modular GP extensions such as algorithms based on the evolution of the architecture [Koza, 1994], heuristic extensions for the discovery of subroutines <ref> [Rosca and Ballard, 1994; Rosca and Ballard, 1996a] </ref>, or GP with architecture modifying operation using code duplication [Koza, 1995]. 26 Evolved modular programs theoretically have a lower descriptional complexity [Rosca and Ballard, 1994] and also appear to present better generality [Rosca, 1996; Rosca and Ballard, 1996b]. <p> GP extensions such as algorithms based on the evolution of the architecture [Koza, 1994], heuristic extensions for the discovery of subroutines [Rosca and Ballard, 1994; Rosca and Ballard, 1996a], or GP with architecture modifying operation using code duplication [Koza, 1995]. 26 Evolved modular programs theoretically have a lower descriptional complexity <ref> [Rosca and Ballard, 1994] </ref> and also appear to present better generality [Rosca, 1996; Rosca and Ballard, 1996b].
Reference: [Rosca and Ballard, 1996a] <author> Justinian P. Rosca and Dana H. Ballard, </author> <title> "Discovery of Subroutines in Genetic Programming," </title> <editor> In P. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: The definition above suggests the intuitive idea that subtrees may play the role of functional features and that good features may be functionally combined to create good representations <ref> [Rosca and Ballard, 1996a] </ref>. Another, more general, GP schema definition is provided in [O'Reilly and Oppacher, 1995]. The previous definition allows for trees to be combined only as subtrees in larger structures. <p> The second problem is the induction of a controller for a robotic agent in a dynamic and nondeterministic environment, as in the Pac-Man game <ref> [Koza, 1992; Rosca and Ballard, 1996a] </ref>. Raw fitness here is computed from 17 the performance of evolved controllers over a number of simulations. <p> Another suggestion for confining the increase in complexity is to employ modular GP extensions such as algorithms based on the evolution of the architecture [Koza, 1994], heuristic extensions for the discovery of subroutines <ref> [Rosca and Ballard, 1994; Rosca and Ballard, 1996a] </ref>, or GP with architecture modifying operation using code duplication [Koza, 1995]. 26 Evolved modular programs theoretically have a lower descriptional complexity [Rosca and Ballard, 1994] and also appear to present better generality [Rosca, 1996; Rosca and Ballard, 1996b].
Reference: [Rosca and Ballard, 1996b] <author> Justinian P. Rosca and Dana H. Ballard, </author> <title> "Evolution-based Discovery of Hierarchical Behaviors," </title> <booktitle> In Proc. of the Thirteenth National Conference on Artificial Intelligence (AAAI-96), </booktitle> <pages> pages 888-894. </pages> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: architecture [Koza, 1994], heuristic extensions for the discovery of subroutines [Rosca and Ballard, 1994; Rosca and Ballard, 1996a], or GP with architecture modifying operation using code duplication [Koza, 1995]. 26 Evolved modular programs theoretically have a lower descriptional complexity [Rosca and Ballard, 1994] and also appear to present better generality <ref> [Rosca, 1996; Rosca and Ballard, 1996b] </ref>. The problem that evolved expressions tend to drift towards large and slow forms without necessarily improving the results was recognized in some excellent early work in GP applied to the simulation of textures for use in computer graphics [Sims, 1991].
Reference: [Ryan, 1994] <editor> Conor. O. Ryan, "Pygmies and Civil Servants," In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The quality and in particular the generality of solutions may also be improved in inductive problems. However, adding the right parsimony pressure has been more of an art. One example of avoiding this decision in an ad-hoc algorithm is "disassortative mating" <ref> [Ryan, 1994] </ref>. This GP algorithm selects parents for crossover from two different lists of individuals. One list of individuals is ranked based on fitness while the other is ranked based on the sum of size and weighted fitness.
Reference: [Sims, 1991] <author> Karl Sims, </author> <title> "Artificial Evolution for Computer Graphics," </title> <journal> Computer Graphics, </journal> <volume> 25(4) </volume> <pages> 319-328, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: The problem that evolved expressions tend to drift towards large and slow forms without necessarily improving the results was recognized in some excellent early work in GP applied to the simulation of textures for use in computer graphics <ref> [Sims, 1991] </ref>. The solution devised was heuristic. Mutation frequencies were adjusted so that a decrease in complexity was slightly more probable than an increase. This did not prevent increases towards larger complexity but more complex solutions were due to the selection of improvements.
Reference: [Tackett, 1994] <author> Walter Alden Tackett, </author> <title> Recombination, Selection and the Genetic Construction of Computer Programs, </title> <type> PhD thesis, </type> <institution> University of Southern California, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: However, the role of introns has been disputed in the case of GP using tree representations [Andre and Teller, 1996]. For one thing, the overhead introduced by exponentially increasing tree sizes may offset any protective effects of introns. Tackett pointed out that bloating cannot be selection-neutral <ref> [Tackett, 1994] </ref>. He presented experiments suggesting that the average growth in size is proportional to the selection pressure. In our analysis, selection pressure itself is complexity dependent.
Reference: [Vose and Liepins, 1991] <author> Michael D. Vose and G.E. Liepins, </author> <title> "Punctuated Equilibria in Genetic Search," </title> <journal> Complex Systems, </journal> (5):31-44, 1991. 
Reference-contexts: Another critique is that schemata do not necessarily capture relationships among meaningful properties that determine fitness [Altenberg, 1995]. Generalized schemata can be defined by partitioning the space of structures with many other relations. Such attempts 4 have been presented in the GA literature <ref> [Vose and Liepins, 1991; Radcliffe, 1991] </ref>. Rela--tions analogous to the schema theorem will hold for other representations as well [Radcliffe, 1992]. Indeed, schema theory explains the proliferation of substructures through selection but this fact is indicative more of when a schema hypothesis can be refuted. <p> Such attempts have been presented in the GA literature <ref> [Vose and Liepins, 1991; Radcliffe, 1991] </ref>. Next we propose a simple structural property that defines a different type of partitioning of the space of programs. The space of programs will be partitioned based on the topmost structure of trees.
Reference: [Zhang and Muhlenbein, 1995] <author> Byoung-Tak Zhang and Heinz Muhlenbein, </author> <title> "Balancing Accuracy and Parsimony in Genetic Programming," </title> <journal> Evolutionary Computation, </journal> <volume> 3(1) </volume> <pages> 17-38, </pages> <year> 1995. </year>
Reference-contexts: The MDL principle has been also applied in GP to extend the fitness function of hybrid classification models [Iba et al., 1993; Iba et al., 1994]. For example [Iba et al., 1994] applied the MDL principle in the learning rule of a GP-regression tree hybrid. <ref> [Zhang and Muhlenbein, 1995] </ref> used an adaptive parsimony strategy in a GP-neural net hybrid.
References-found: 37

