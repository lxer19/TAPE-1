URL: http://www.cs.ucsd.edu/users/ckrintz/agent.ps
Refering-URL: http://www.cs.ucsd.edu/users/ckrintz/
Root-URL: http://www.cs.ucsd.edu
Title: Security in Agent-based Computing Environments Using Existing Tools: A Survey  
Author: Chandra Krintz 
Address: La Jolla, CA 92093-0114  
Affiliation: Computer Science and Engineering Department University of California, San Diego  
Note: DRAFT, Please Do Not Distribute  
Abstract: Agent-based computing allows efficient utilization of resources and amortizes communication delay in a distributed system. In a dynamically changing, heterogeneous environment like the Internet, no assumptions can be made about execution environments of agents. The diverse system may offer a multitude of opportunities for users and applications to utilize a wide variety of services and resources. At the same time, agents and servers face security threats inherent in the use of such systems. In this paper we examine security in an agent-based system in terms of specific requirements: authentication, protection, privacy, and transaction correctness. We review current methods found in existing non-agent-based and agent-based security systems that address problems in terms of each security requirement. Many believe the cost of implementing security specific to an agent-based computing environment will be prohibitive. Our goal is to provide a reasonable for the adoption of agent-based systems by showing that many security problems can be addressed using existing security mechanisms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bellare and P. Rogaway. </author> <title> Entity authentication and key distribution. </title> <booktitle> In Advances in Cryptology - Crypto 93 Proceedings, Lecture Notes in Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: Existing authentication systems solve the problem of mutual entity authentication and provide a mechanism for key certification and exchange <ref> [1, 37] </ref>. These and other existing techniques, like those for the Authentication Services [11], in the Taos Operating System [44], and in DIMACS [3], can be used to address authentication problems for the agent and the server in both agent execution path configurations. Single Server Agent Execution Path. <p> The server is in complete control of the execution state of the agent, and thus, there is no way to verify that the server has acted as expected. Protocols that ensure partial agent data modification detection include requiring partial results returned (authenticated using message authentication codes) <ref> [1] </ref>, agent lifetimes (timeouts) to be kept at agent-sender, execution traces from the server, and encryption of agents by servers. The latter protocol is not feasible for instances of agents that use collected information as part of their computation [19]. Server Perspective.
Reference: [2] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. Fiuczynski, D. Becker, S. Eggers, and C. Chambers. </author> <title> Extensibility, safety and performance in the SPIN operating system. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Simulation of a program can be done but requires a vast amount of resources and time. Neither alternative is a good solution in an agent-based environment. However, approaches do exist that protect the server to some degree from the executing code: code interpretation, safe languages, and secure environments <ref> [2, 11, 19, 21, 41, 43, 47] </ref>. Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java [21], Safe-Tcl [22], Kali [8], Telescript [43]. <p> Just-In-Time (JIT) compilers can be used to improve performance of agent execution by creating an executable file during initial interpretation of an agent. Other types of compilers used, like those used in <ref> [2] </ref>, sign executable code to reduce the amount of system protection required and to enhance performance. However compiler attacks resulting in key loss compromise the security of all previously compiled programs. Secure Environments. Secure environments are agent-based systems that are isolated, i.e., exist independent of other environments and security domains.
Reference: [3] <author> M. Blaze, J. Feigenbaum, and J. Lacy. </author> <title> Decentralized trust management. </title> <type> In DIMACS Technical Report 96-17, </type> <month> October </month> <year> 1996. </year>
Reference-contexts: Existing authentication systems solve the problem of mutual entity authentication and provide a mechanism for key certification and exchange [1, 37]. These and other existing techniques, like those for the Authentication Services [11], in the Taos Operating System [44], and in DIMACS <ref> [3] </ref>, can be used to address authentication problems for the agent and the server in both agent execution path configurations. Single Server Agent Execution Path. Secure authentication of the server by the agent is impossible to achieve since the server controls the entire state of the agent.
Reference: [4] <author> G. Borcherding and M. Borcherding. </author> <title> Covered trust values in distributed systems. </title> <booktitle> In Proceedings of the Working Conference on Multimedia and Communication Security, </booktitle> <year> 1995. </year>
Reference-contexts: Trust inference provides an alternative way to establish authentication and authorization (Section 4.2.1) of entities. In [46], the authors offer a formalism for determining trust relationships in system with different security domains. In <ref> [4] </ref>, the authors extend this work to allow for estimation of trust levels when there are conflicting recommendations and advisement. These and related protocols are necessary for use in an agent-based security system to provide agent autonomy. Every agent-based computing environment requires some degree of trust or risk taking. <p> In addition, this level can be provided by certification agencies so that it is globally available. Such a system would discourage improper behavior as it would provide a mechanism for accountability. Additional information on trust inference engines can be found in <ref> [4, 40, 46] </ref> 4.2 Protection The protection requirement addresses problems related to the prevention or detection of unintentional or malicious harm caused to entities in an agent based system.
Reference: [5] <author> G. Brassard, D. Chaum, and C. Crepeau. </author> <title> Minimum disclosure proofs of knowledge. </title> <booktitle> In JCSS, </booktitle> <year> 1988. </year>
Reference-contexts: For example, it may not be necessary for an agent-sender to determine a server's identity. It may be enough to authenticate information (a proof) from the server of a prior interaction with the server <ref> [5] </ref>. In this way, authentication proceeds without identification of the entity being authenticated, i.e., anonymously. <p> Public-key certification agencies can be extended to provide identity escrow in the agent-based environment. The certifying agency can provide a certificate to the agent-sender after it identifies the agent-sender. The agent-sender can then convince the server that the agent-sender holds the certificate using a zero-knowledge proof <ref> [5] </ref>. Using the protocol described in [29], an agent can be authenticated and the server would not know the identity of the agent-sender unless the agent was malicious. Pseudonyms can be used in the same manner to provide privacy from the server.
Reference: [6] <author> L. Cardelli. </author> <title> A language with distributed scope. </title> <booktitle> In 22nd ACM Symposium on Principles in Programming Languages, </booktitle> <pages> pages 286-298, </pages> <year> 1995. </year>
Reference-contexts: A safe language is one that is interpreted, compiled with a special compiler that ensures proper behavior, or one with mechanisms that control all system calls made by a process. Safe languages, e.g., Java [21], Safe-Tcl (Agent-Tcl) [22], 9 Kali [8], Telescript [43], Obliq <ref> [6] </ref>, and KQML [41], provide extensions for agent creation and execution as well as for Internet applications. Just-In-Time (JIT) compilers can be used to improve performance of agent execution by creating an executable file during initial interpretation of an agent.
Reference: [7] <author> Recommendation x.509 CCITT. </author> <title> The directory-authentication framework. In Consultation Committee International Telephone and Telegraph, International Telecommunications Union, </title> <address> Geneva, </address> <year> 1989. </year>
Reference-contexts: For an agent-based system, however, public-key cryptography should be heavily relied upon to enable security. We believe, based on the implementation and acceptance of existing public-key systems, e.g., PEM [28], PGP [48], SDSI [36], and X.509 <ref> [7] </ref>, and public security service systems, e.g., TERISA [13], that this is a reasonable assumption. All of the security requirements include problems that can be met by an agent-based security system based on public-key certification. <p> The registry, like the yellow pages phone book, is made available to the public. Existing protocols in which public-key certificates play an important role include PEM [28], PGP [48], and X.509 <ref> [7] </ref>. An alternative to a single centralized agency is to allow many different agencies for public-key management. Existing systems like [48] incorporate multiple independent entities to sign public-keys. In an agent-based environment these entities can be coordinated in order to reduce complexity [36], and to provide a secure infrastructure.
Reference: [8] <author> H. Cejtin, S. Jagannathan, and R. Kelsey. </author> <title> Higher order distributed objects. </title> <booktitle> In Transactions on Programming Languages and Systems, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java [21], Safe-Tcl [22], Kali <ref> [8] </ref>, Telescript [43]. The only way to damage a system is to perform system calls; and interpretation allows each system call to be trapped (halting execution) and approved of prior to execution. <p> A safe language is one that is interpreted, compiled with a special compiler that ensures proper behavior, or one with mechanisms that control all system calls made by a process. Safe languages, e.g., Java [21], Safe-Tcl (Agent-Tcl) [22], 9 Kali <ref> [8] </ref>, Telescript [43], Obliq [6], and KQML [41], provide extensions for agent creation and execution as well as for Internet applications. Just-In-Time (JIT) compilers can be used to improve performance of agent execution by creating an executable file during initial interpretation of an agent.
Reference: [9] <author> D. Chaum. </author> <title> Untraceable electronic mail, return addresses, and digital pseudonyms. </title> <journal> Communications of the ACM, </journal> <volume> 24 </volume> <pages> 84-88, </pages> <month> February </month> <year> 1981. </year>
Reference-contexts: At the location, the next part of the return path is decrypted and the data is forwarded. The ultimate return destination is unknown to the server. Protocols for anonymous mailers can be found in <ref> [9] </ref>. In an agent-based environment, such a protocol may be desired to ensure anonymity of the agent-sender. Because the IP address from which the agent originates is kept in the header of the agent, it cannot be kept private using pseudonyms.
Reference: [10] <author> D. Chaum. </author> <title> Achieving electronic privacy. </title> <booktitle> In Scientific American, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: Privacy problems in electronic transactions are solved by using protocols for the transaction fairness requirement (Section 4.4). Existing protocols for privacy use encryption (via session key or public-key schemes) to obscure information from parties not involved in an exchange <ref> [10] </ref>. In addition to cryptography, protocols can be used to ensure privacy of information accessed at a server, the identity of the entities involved, and the location of the agent-sender. Private Information Retrieval.
Reference: [11] <author> D. Chess, B. Grosof, C. Harrison, D. Levine, and C. Parris. </author> <title> Itinerant agents for mobile computing. In IBM Research Report, </title> <month> March </month> <year> 1995. </year>
Reference-contexts: 1 Introduction An agent-based computer system is a distributed computing environment in which mobile processes, called agents, operate on behalf of users. The autonomous agent concept has been proposed for a variety of applications on large, heterogeneous, distributed systems, e.g., the Internet <ref> [11] </ref>. Mobile agent operation is a natural extension to remote execution of programs (remote procedure calls) since agents are processes which execute on remote computers (servers) [23]. Agent-based computing has been popularized recently by widespread use of the Internet as well as by advances in technology. <p> Agents in an agent-based computing environment are mobile processes that execute on a variety of servers in a variety of security domains. Servers are resources that provide agents with an execution environment and services. Servers in <ref> [11] </ref> are referred to as Agent Meeting Places (AMP's). Other participants in an agent-based environment may include agencies that provide a foundation for certification of accountability and problem management. Our analysis assumes such agencies exist, where necessary, as part of the underlying infrastructure. <p> There are many existing agent support environments (ASE's). These environments provide mechanisms for communication, migration, and agent-server interaction. The systems are isolated and require system wide system administration and consistency among agents and servers <ref> [11, 12, 23] </ref>. Many of the ASE's assume the presence of language-based, e.g, universally similar interpreters [31], or hardware-based, e.g., secure co-processors [47], security infrastructure. Such infrastructures and consistency cannot be assumed throughout the Internet; hence, the issues these mechanisms address must be accounted for by other mechanisms. <p> Solutions to security problems of ASE security systems can be solved incorporated into solutions for related problems in an environment like the Internet. However, additional security issues for a less restrictive, agent-based environment based on the Internet, must be 4 addressed. Additional information about ASE's can be found in <ref> [11, 36, 41] </ref>. 4 Finding Solutions In this section, we describe how existing research and protocols can be used to meet the security requirements of an agent-based computing environment. <p> Existing authentication systems solve the problem of mutual entity authentication and provide a mechanism for key certification and exchange [1, 37]. These and other existing techniques, like those for the Authentication Services <ref> [11] </ref>, in the Taos Operating System [44], and in DIMACS [3], can be used to address authentication problems for the agent and the server in both agent execution path configurations. Single Server Agent Execution Path. <p> The agent-sender must be assured that a server executes an agent as instructed by the agent-sender and reliably transmits the results to the agent-sender via messaging (stateless in <ref> [11] </ref>) or within an agent (stateful in [11]) back to the agent-sender. Since collected data and agent execution state is dynamic information, this part of the agent cannot be digitally signed by the agent-sender a priori. Ultimately, the agent-sender must trust the server. <p> The agent-sender must be assured that a server executes an agent as instructed by the agent-sender and reliably transmits the results to the agent-sender via messaging (stateless in <ref> [11] </ref>) or within an agent (stateful in [11]) back to the agent-sender. Since collected data and agent execution state is dynamic information, this part of the agent cannot be digitally signed by the agent-sender a priori. Ultimately, the agent-sender must trust the server. <p> Simulation of a program can be done but requires a vast amount of resources and time. Neither alternative is a good solution in an agent-based environment. However, approaches do exist that protect the server to some degree from the executing code: code interpretation, safe languages, and secure environments <ref> [2, 11, 19, 21, 41, 43, 47] </ref>. Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java [21], Safe-Tcl [22], Kali [8], Telescript [43]. <p> Secure Environments. Secure environments are agent-based systems that are isolated, i.e., exist independent of other environments and security domains. These environments are also called ASE's and are described in Section 3. Additional information on these and similar environments can be found in <ref> [11, 23, 26, 27, 41, 47] </ref>. In an agent-based environment based on the Internet, ASE's and secure co-processor systems may exist as part of the infrastructure. An agent outside of such a security domain, may be able to access such domains as part of the entire system.
Reference: [12] <author> D.M. </author> <title> Chess. Security considerations in agent-based systems. In IBM, </title> <type> T.J. </type> <institution> Watson Research Center White Paper, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: In addition, agent-based computing provides a mechanism for potentially greater efficiency of the Internet. A user will no longer communicate with servers individually; autonomous agents can visit many servers accumulating information at each server then communicating the result to the user with little participation on behalf of the user <ref> [12] </ref>. <p> There are many existing agent support environments (ASE's). These environments provide mechanisms for communication, migration, and agent-server interaction. The systems are isolated and require system wide system administration and consistency among agents and servers <ref> [11, 12, 23] </ref>. Many of the ASE's assume the presence of language-based, e.g, universally similar interpreters [31], or hardware-based, e.g., secure co-processors [47], security infrastructure. Such infrastructures and consistency cannot be assumed throughout the Internet; hence, the issues these mechanisms address must be accounted for by other mechanisms.
Reference: [13] <author> S. Chokhani. </author> <title> Toward a national public key infrastructure. </title> <journal> In IEEE Communications Magazine, </journal> <volume> volume 32(9), </volume> <pages> pages 70-74, </pages> <month> September </month> <year> 1984. </year>
Reference-contexts: For an agent-based system, however, public-key cryptography should be heavily relied upon to enable security. We believe, based on the implementation and acceptance of existing public-key systems, e.g., PEM [28], PGP [48], SDSI [36], and X.509 [7], and public security service systems, e.g., TERISA <ref> [13] </ref>, that this is a reasonable assumption. All of the security requirements include problems that can be met by an agent-based security system based on public-key certification.
Reference: [14] <author> B. Chor and N. Gilboa. </author> <title> Computationally private information retrieval. </title> <booktitle> In 29th STOC, </booktitle> <pages> pages 304-313, </pages> <year> 1997. </year>
Reference-contexts: Private information retrieval allows an entity to query a set of distributed duplicated databases at different servers without server knowledge of what information is retrieved. For example, stock prices can be affected if entities are aware that a specific stock is being accessed repeatedly. The scheme in <ref> [14, 15] </ref> requires that k+1 databases collude before the data accessed is retrieved. In [30], the authors extend this work so that a single database can be used and the proprietor has no way of determining what data is actually being accessed. <p> An agent-based system may include applications that require agents to access information from servers while retaining privacy of the data being accessed. Private information retrieval protocols in <ref> [14, 15, 30] </ref> can be used in an agent-based environment to enable privacy of information queried from servers (database). Privacy of Identity and Agent Origin. Identity escrow enables an agent-sender to be authenticated by a server without revealing the agent-sender's identity [29].
Reference: [15] <author> B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. </author> <title> Private information retrieval. </title> <booktitle> In 36th FOCS, IEEE 1995. </booktitle> <pages> 13 </pages>
Reference-contexts: Private information retrieval allows an entity to query a set of distributed duplicated databases at different servers without server knowledge of what information is retrieved. For example, stock prices can be affected if entities are aware that a specific stock is being accessed repeatedly. The scheme in <ref> [14, 15] </ref> requires that k+1 databases collude before the data accessed is retrieved. In [30], the authors extend this work so that a single database can be used and the proprietor has no way of determining what data is actually being accessed. <p> An agent-based system may include applications that require agents to access information from servers while retaining privacy of the data being accessed. Private information retrieval protocols in <ref> [14, 15, 30] </ref> can be used in an agent-based environment to enable privacy of information queried from servers (database). Privacy of Identity and Agent Origin. Identity escrow enables an agent-sender to be authenticated by a server without revealing the agent-sender's identity [29].
Reference: [16] <author> D. Cooper. Scom: </author> <title> A security and privacy layer for Horus. </title> <booktitle> In TBA. </booktitle>
Reference-contexts: Existing operating system mechanisms that are needed in an agent-based environment include process profiling, system logs, and fault tolerance, among others. Fault tolerance is beyond the scope of this paper, but we direct the reader to <ref> [16, 18, 33, 35, 42] </ref>. These references contain additional information on distributed system security. Operating system profiling allows traces of agent execution to be made by a server. Profiling, like resource monitoring tools, e.g., ptrace in UNIX, can be used to monitor resource usage.
Reference: [17] <author> W. Diffie and M.E. Hellman. </author> <title> New directions in cryptography. </title> <journal> In IEEE Transactions on Informations Theory, </journal> <pages> pages 644-654, </pages> <month> November </month> <year> 1976. </year>
Reference-contexts: All of the security requirements include problems that can be met by an agent-based security system based on public-key certification. Public-key certification is a mechanism for key management in which public keys are digitally signed by a trusted entity and thereby considered valid <ref> [17] </ref>. Authorized certifying agencies sign public keys once the agency has physically identified the entities requesting public-private key pairs. Signed public keys are called certificates and are stored in a registry with personal data (name, rank) that has been verified by the trusted certification authority.
Reference: [18] <author> R. Dobry and M.D. Schanken. </author> <title> Security concerns for distributed systems. </title> <booktitle> In IEEE, </booktitle> <year> 1994. </year>
Reference-contexts: Existing operating system mechanisms that are needed in an agent-based environment include process profiling, system logs, and fault tolerance, among others. Fault tolerance is beyond the scope of this paper, but we direct the reader to <ref> [16, 18, 33, 35, 42] </ref>. These references contain additional information on distributed system security. Operating system profiling allows traces of agent execution to be made by a server. Profiling, like resource monitoring tools, e.g., ptrace in UNIX, can be used to monitor resource usage.
Reference: [19] <author> W.M. Farmer, J.D Guttman, and V. Swarup. </author> <title> Security for mobile agents: Issues and requirements. </title> <booktitle> In Proceedings of the Fourth European Symposium on Research in Computer Security, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: The latter protocol is not feasible for instances of agents that use collected information as part of their computation <ref> [19] </ref>. Server Perspective. For servers, public-key certification can be used to protect against execution of code by malicious agents (agent-senders). <p> Simulation of a program can be done but requires a vast amount of resources and time. Neither alternative is a good solution in an agent-based environment. However, approaches do exist that protect the server to some degree from the executing code: code interpretation, safe languages, and secure environments <ref> [2, 11, 19, 21, 41, 43, 47] </ref>. Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java [21], Safe-Tcl [22], Kali [8], Telescript [43].
Reference: [20] <author> N. Ferguson. </author> <title> Extensions of single-term coins. </title> <booktitle> In Crypto '93, </booktitle> <year> 1993. </year>
Reference-contexts: Transaction fairness between the agent-sender and the server can be performed using any of the protocols for non-agent-based systems for fair exchange (see [24, 25]). In addition, private exchange and anonymity during an exchange can be provided by protocols in <ref> [20, 24] </ref>. Existing fair exchange and payment protocols allow for nonreprudiation of origin by the server and and the nonreprudiation of receipt by the agent-sender, i.e., the server cannot deny that it sent the contract and the agent-sender cannot deny receipt of goods. <p> Other protocols that can be useful for addressing problems in agent-based security systems include those for recognizing unauthorized and double spending of currency <ref> [20] </ref>. For example, an agent-sender may try to pay two different servers with the same electronic currency or a server may deposit a payment from an agent-sender and try to deny that the payment was made. The protocols in [20, 24] address these problems by detecting and preventing such activities. <p> For example, an agent-sender may try to pay two different servers with the same electronic currency or a server may deposit a payment from an agent-sender and try to deny that the payment was made. The protocols in <ref> [20, 24] </ref> address these problems by detecting and preventing such activities. Transaction fairness can also be made more efficient using optimistic protocols which use a trusted third party only when there is a problem with the exchange.
Reference: [21] <author> J. Gosling and McGilton H. </author> <title> The Java Language Environment: A white paper. In Sun Microsystems, </title> <publisher> Inc., </publisher> <address> White Paper, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Simulation of a program can be done but requires a vast amount of resources and time. Neither alternative is a good solution in an agent-based environment. However, approaches do exist that protect the server to some degree from the executing code: code interpretation, safe languages, and secure environments <ref> [2, 11, 19, 21, 41, 43, 47] </ref>. Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java [21], Safe-Tcl [22], Kali [8], Telescript [43]. <p> Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java <ref> [21] </ref>, Safe-Tcl [22], Kali [8], Telescript [43]. The only way to damage a system is to perform system calls; and interpretation allows each system call to be trapped (halting execution) and approved of prior to execution. <p> Safe Languages. Existing languages currently being used for agent-based security systems are called safe languages. A safe language is one that is interpreted, compiled with a special compiler that ensures proper behavior, or one with mechanisms that control all system calls made by a process. Safe languages, e.g., Java <ref> [21] </ref>, Safe-Tcl (Agent-Tcl) [22], 9 Kali [8], Telescript [43], Obliq [6], and KQML [41], provide extensions for agent creation and execution as well as for Internet applications. Just-In-Time (JIT) compilers can be used to improve performance of agent execution by creating an executable file during initial interpretation of an agent.
Reference: [22] <author> R.S. Gray. </author> <title> Agent tcl: A flexible and secure mogile-agent system. </title> <booktitle> In 4th Annual Usenix Tcl/Tk Workshop, </booktitle> <year> 1996. </year>
Reference-contexts: Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java [21], Safe-Tcl <ref> [22] </ref>, Kali [8], Telescript [43]. The only way to damage a system is to perform system calls; and interpretation allows each system call to be trapped (halting execution) and approved of prior to execution. <p> A safe language is one that is interpreted, compiled with a special compiler that ensures proper behavior, or one with mechanisms that control all system calls made by a process. Safe languages, e.g., Java [21], Safe-Tcl (Agent-Tcl) <ref> [22] </ref>, 9 Kali [8], Telescript [43], Obliq [6], and KQML [41], provide extensions for agent creation and execution as well as for Internet applications. Just-In-Time (JIT) compilers can be used to improve performance of agent execution by creating an executable file during initial interpretation of an agent.
Reference: [23] <author> C.G. Harrison, D.M. Chess, and A. Kershenbaum. </author> <title> Mobile agents: Are they a good idea? In IBM Research Report, </title> <year> 1996. </year>
Reference-contexts: The autonomous agent concept has been proposed for a variety of applications on large, heterogeneous, distributed systems, e.g., the Internet [11]. Mobile agent operation is a natural extension to remote execution of programs (remote procedure calls) since agents are processes which execute on remote computers (servers) <ref> [23] </ref>. Agent-based computing has been popularized recently by widespread use of the Internet as well as by advances in technology. In addition, agent-based computing provides a mechanism for potentially greater efficiency of the Internet. <p> To do this exhaustively, we examine security in terms of requirements to better able us to categorize and analyze subproblems. Since it has been suggested in <ref> [23] </ref>, that security is the primary obstacle in the adoption of agent-based systems, we show how existing algorithms and protocols can be used to provide solutions for security requirements in an agent-based environment. In Section 2 we identify the security divisions, called requirements, for the problem analysis. <p> There are many existing agent support environments (ASE's). These environments provide mechanisms for communication, migration, and agent-server interaction. The systems are isolated and require system wide system administration and consistency among agents and servers <ref> [11, 12, 23] </ref>. Many of the ASE's assume the presence of language-based, e.g, universally similar interpreters [31], or hardware-based, e.g., secure co-processors [47], security infrastructure. Such infrastructures and consistency cannot be assumed throughout the Internet; hence, the issues these mechanisms address must be accounted for by other mechanisms. <p> Secure Environments. Secure environments are agent-based systems that are isolated, i.e., exist independent of other environments and security domains. These environments are also called ASE's and are described in Section 3. Additional information on these and similar environments can be found in <ref> [11, 23, 26, 27, 41, 47] </ref>. In an agent-based environment based on the Internet, ASE's and secure co-processor systems may exist as part of the infrastructure. An agent outside of such a security domain, may be able to access such domains as part of the entire system.
Reference: [24] <author> M. Jakobsson. </author> <title> Ripping coins for fair exchange. </title> <booktitle> In Eurocrypt '95, </booktitle> <year> 1995. </year>
Reference-contexts: Transaction fairness between the agent-sender and the server can be performed using any of the protocols for non-agent-based systems for fair exchange (see <ref> [24, 25] </ref>). In addition, private exchange and anonymity during an exchange can be provided by protocols in [20, 24]. <p> Transaction fairness between the agent-sender and the server can be performed using any of the protocols for non-agent-based systems for fair exchange (see [24, 25]). In addition, private exchange and anonymity during an exchange can be provided by protocols in <ref> [20, 24] </ref>. Existing fair exchange and payment protocols allow for nonreprudiation of origin by the server and and the nonreprudiation of receipt by the agent-sender, i.e., the server cannot deny that it sent the contract and the agent-sender cannot deny receipt of goods. <p> For example, an agent-sender may try to pay two different servers with the same electronic currency or a server may deposit a payment from an agent-sender and try to deny that the payment was made. The protocols in <ref> [20, 24] </ref> address these problems by detecting and preventing such activities. Transaction fairness can also be made more efficient using optimistic protocols which use a trusted third party only when there is a problem with the exchange.
Reference: [25] <author> M. Jakobsson. </author> <title> Revokable and versitile electronic money. </title> <booktitle> In 3rd ACM Conf. on Computer and Communications Security, </booktitle> <year> 1996. </year>
Reference-contexts: Since the server controls the entire state of the agent, it seems reasonable to separate shopping and reservation requests from the actual purchase. For example, the 11 agent can retrieve a contract or invoice that can be used by the agent-sender as the first flow in a payment protocol <ref> [25] </ref>. Other electronic commerce protocols that can be used in an agent-based environment can be found in [43]. 4.4.2 Fair Exchange and Payment Protocols Fair exchange must be provided in any agent-based security system so that electronic transactions can be performed between the entities. <p> Transaction fairness between the agent-sender and the server can be performed using any of the protocols for non-agent-based systems for fair exchange (see <ref> [24, 25] </ref>). In addition, private exchange and anonymity during an exchange can be provided by protocols in [20, 24].
Reference: [26] <author> D. Johansen, R. van Renesse, and F.B. Schneider. </author> <title> An introduction to the TACOMA distributed system: Version 1.0. In University of Tromso: </title> <type> Technical Report 95-23, </type> <year> 1995. </year>
Reference-contexts: Secure Environments. Secure environments are agent-based systems that are isolated, i.e., exist independent of other environments and security domains. These environments are also called ASE's and are described in Section 3. Additional information on these and similar environments can be found in <ref> [11, 23, 26, 27, 41, 47] </ref>. In an agent-based environment based on the Internet, ASE's and secure co-processor systems may exist as part of the infrastructure. An agent outside of such a security domain, may be able to access such domains as part of the entire system.
Reference: [27] <author> D. Johansen, R. van Renesse, and F.B. Schneider. </author> <title> Supporting broad internet access to TACOMA. </title> <booktitle> In Proceedings of the 7th ACM SIGOPS European Workshop, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Secure Environments. Secure environments are agent-based systems that are isolated, i.e., exist independent of other environments and security domains. These environments are also called ASE's and are described in Section 3. Additional information on these and similar environments can be found in <ref> [11, 23, 26, 27, 41, 47] </ref>. In an agent-based environment based on the Internet, ASE's and secure co-processor systems may exist as part of the infrastructure. An agent outside of such a security domain, may be able to access such domains as part of the entire system.
Reference: [28] <author> S.T. Kent. </author> <title> Privacy enhancement for internet electronic mail: Part ii: Certificate-based key management. </title> <booktitle> In RFC 1422, </booktitle> <month> February </month> <year> 1993. </year>
Reference-contexts: In a system like that of the Internet, all of these paradigms will be present. For an agent-based system, however, public-key cryptography should be heavily relied upon to enable security. We believe, based on the implementation and acceptance of existing public-key systems, e.g., PEM <ref> [28] </ref>, PGP [48], SDSI [36], and X.509 [7], and public security service systems, e.g., TERISA [13], that this is a reasonable assumption. All of the security requirements include problems that can be met by an agent-based security system based on public-key certification. <p> The registry, like the yellow pages phone book, is made available to the public. Existing protocols in which public-key certificates play an important role include PEM <ref> [28] </ref>, PGP [48], and X.509 [7]. An alternative to a single centralized agency is to allow many different agencies for public-key management. Existing systems like [48] incorporate multiple independent entities to sign public-keys.
Reference: [29] <author> J. Kilian and E. Petrank. </author> <title> Identity escrow. </title> <booktitle> In TBA, </booktitle> <year> 1997. </year>
Reference-contexts: Private information retrieval protocols in [14, 15, 30] can be used in an agent-based environment to enable privacy of information queried from servers (database). Privacy of Identity and Agent Origin. Identity escrow enables an agent-sender to be authenticated by a server without revealing the agent-sender's identity <ref> [29] </ref>. Identity escrow allows an entity to register its identity with a certifying agency and use a pseudonym for interaction with a second entity. <p> The second entity can request identification if behavior by the pseudonym is malicious or inappropriate (according to the rules established by certifying agencies) <ref> [29] </ref>. 10 In identity escrow, the certifying agency and the entity filing the complaint must use their accumulated information to determine the identity the pseudonym belongs to. <p> The certifying agency can provide a certificate to the agent-sender after it identifies the agent-sender. The agent-sender can then convince the server that the agent-sender holds the certificate using a zero-knowledge proof [5]. Using the protocol described in <ref> [29] </ref>, an agent can be authenticated and the server would not know the identity of the agent-sender unless the agent was malicious. Pseudonyms can be used in the same manner to provide privacy from the server.
Reference: [30] <author> E. Kushilevitz and R. Ostrovsky. </author> <title> Replication is not needed: Database, </title> <note> computationally-private information retrieval: Extended abstract. In TBA: http://www.cs.technion.ac.il/ eyalk, </note> <year> 1997. </year>
Reference-contexts: For example, stock prices can be affected if entities are aware that a specific stock is being accessed repeatedly. The scheme in [14, 15] requires that k+1 databases collude before the data accessed is retrieved. In <ref> [30] </ref>, the authors extend this work so that a single database can be used and the proprietor has no way of determining what data is actually being accessed. An agent-based system may include applications that require agents to access information from servers while retaining privacy of the data being accessed. <p> An agent-based system may include applications that require agents to access information from servers while retaining privacy of the data being accessed. Private information retrieval protocols in <ref> [14, 15, 30] </ref> can be used in an agent-based environment to enable privacy of information queried from servers (database). Privacy of Identity and Agent Origin. Identity escrow enables an agent-sender to be authenticated by a server without revealing the agent-sender's identity [29].
Reference: [31] <author> B. Lampson, M. Abadi, M. Burrows, and E. Wobber. </author> <title> Authentication in distributed systems: </title> <journal> Theory and practice. In ACM Transactions on Computer Systems, </journal> <volume> volume 10, </volume> <pages> pages 265-310, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: These environments provide mechanisms for communication, migration, and agent-server interaction. The systems are isolated and require system wide system administration and consistency among agents and servers [11, 12, 23]. Many of the ASE's assume the presence of language-based, e.g, universally similar interpreters <ref> [31] </ref>, or hardware-based, e.g., secure co-processors [47], security infrastructure. Such infrastructures and consistency cannot be assumed throughout the Internet; hence, the issues these mechanisms address must be accounted for by other mechanisms. <p> Authentication, trust levels, and information about previous interactions can be used to determine accessible objects and the extent to which operations may be performed on the objects. Authorization is a well studied mechanism primarily in the domain of operating (distributed and non-distributed) systems <ref> [31, 45] </ref>. Authorization establishes the rights entities have for accessing specified resources. This information can then be used to recognize entities that are allowed to access and operate on resources enabling the system to guard against attacks by malicious intruders and to limit the damage caused by errant processes.
Reference: [32] <author> C. Landwehr. </author> <title> How far can you trust a computer? In 12th International Conference on Computer Safety, Reliability, and Security, </title> <month> October </month> <year> 1993. </year> <month> 14 </month>
Reference-contexts: Every agent-based computing environment requires some degree of trust or risk taking. The level of trust by an entity in an interaction with another is adjustable and can range from complete to little or no trust <ref> [32, 34, 40] </ref>. In addition, this level can be provided by certification agencies so that it is globally available. Such a system would discourage improper behavior as it would provide a mechanism for accountability.
Reference: [33] <author> Y. Minsky, R. van Renesse, F.B. Schneider, and S.D. Stoller. </author> <title> Cryptographic support for fault-tolerant distributed computing. </title> <month> July </month> <year> 1995. </year>
Reference-contexts: Existing operating system mechanisms that are needed in an agent-based environment include process profiling, system logs, and fault tolerance, among others. Fault tolerance is beyond the scope of this paper, but we direct the reader to <ref> [16, 18, 33, 35, 42] </ref>. These references contain additional information on distributed system security. Operating system profiling allows traces of agent execution to be made by a server. Profiling, like resource monitoring tools, e.g., ptrace in UNIX, can be used to monitor resource usage.
Reference: [34] <author> J.J. Ordille. </author> <title> When agents roam, who can you trust? In etaCOM'96, </title> <year> 1996. </year>
Reference-contexts: We must consider each security requirement from the perspective of the agent and separately, of the server, for two configurations. These configurations are the single server agent execution path and the multiple server agent execution path. These configurations are not novel. The authors in <ref> [34] </ref> refer to an agent that visits a single server, not returning to the agent-sender, as a one-hop agent, an agent that visits a single server and returns to the agent-sender, as a boomerang agent, and an agent that visits multiple servers, as a multi-hop agent. The Environment. <p> Every agent-based computing environment requires some degree of trust or risk taking. The level of trust by an entity in an interaction with another is adjustable and can range from complete to little or no trust <ref> [32, 34, 40] </ref>. In addition, this level can be provided by certification agencies so that it is globally available. Such a system would discourage improper behavior as it would provide a mechanism for accountability.
Reference: [35] <author> M. Reiter, K. Birman, and L. Gong. </author> <title> Integrating security in a group oriented distributed system. </title> <booktitle> In IEEE Symposium on Research in Security and Privacy, </booktitle> <year> 1992. </year>
Reference-contexts: Existing operating system mechanisms that are needed in an agent-based environment include process profiling, system logs, and fault tolerance, among others. Fault tolerance is beyond the scope of this paper, but we direct the reader to <ref> [16, 18, 33, 35, 42] </ref>. These references contain additional information on distributed system security. Operating system profiling allows traces of agent execution to be made by a server. Profiling, like resource monitoring tools, e.g., ptrace in UNIX, can be used to monitor resource usage.
Reference: [36] <author> R.L. Rivest and B. Lampson. </author> <title> SDSI-A simple distributed security infrastructure. </title> <month> April </month> <year> 1996. </year>
Reference-contexts: Solutions to security problems of ASE security systems can be solved incorporated into solutions for related problems in an environment like the Internet. However, additional security issues for a less restrictive, agent-based environment based on the Internet, must be 4 addressed. Additional information about ASE's can be found in <ref> [11, 36, 41] </ref>. 4 Finding Solutions In this section, we describe how existing research and protocols can be used to meet the security requirements of an agent-based computing environment. <p> In a system like that of the Internet, all of these paradigms will be present. For an agent-based system, however, public-key cryptography should be heavily relied upon to enable security. We believe, based on the implementation and acceptance of existing public-key systems, e.g., PEM [28], PGP [48], SDSI <ref> [36] </ref>, and X.509 [7], and public security service systems, e.g., TERISA [13], that this is a reasonable assumption. All of the security requirements include problems that can be met by an agent-based security system based on public-key certification. <p> An alternative to a single centralized agency is to allow many different agencies for public-key management. Existing systems like [48] incorporate multiple independent entities to sign public-keys. In an agent-based environment these entities can be coordinated in order to reduce complexity <ref> [36] </ref>, and to provide a secure infrastructure. The increasing number of implementations of public-key certification mechanisms indicate that agency coordination can be realized. 4.1 Authentication Authentication ensures that the identity of an agent or a server cannot be ambiguated or misrepresented.
Reference: [37] <author> R.L. Rivest and A. Shamir. </author> <title> How to expose an eavesdropper. </title> <booktitle> In Communications of the ACM, </booktitle> <pages> pages 393-395, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: Existing authentication systems solve the problem of mutual entity authentication and provide a mechanism for key certification and exchange <ref> [1, 37] </ref>. These and other existing techniques, like those for the Authentication Services [11], in the Taos Operating System [44], and in DIMACS [3], can be used to address authentication problems for the agent and the server in both agent execution path configurations. Single Server Agent Execution Path.
Reference: [38] <author> B. Schneier. </author> <title> Applied Cyrptography, Second Edition, Protocols, Algorithms, and Source Code in C. </title> <publisher> John Wiley and Sons, Inc, </publisher> <year> 1996. </year>
Reference-contexts: In order to provide security in any agent-based system, it is imperative to assume a security infrastructure in which both servers and agents act as proxies for real identities. Cryptographic techniques include public-key cryptography and symmetric cryptography (secret key schemes) <ref> [38] </ref>. Alternate methods use password systems [39]. In a system like that of the Internet, all of these paradigms will be present. For an agent-based system, however, public-key cryptography should be heavily relied upon to enable security.
Reference: [39] <author> J.G. Steiner, C. Neuman, and J.I. Schiller. </author> <title> Kerberos: An authentication service for open network systems. In Technical Report, </title> <publisher> MIT, </publisher> <month> March </month> <year> 1988. </year>
Reference-contexts: In order to provide security in any agent-based system, it is imperative to assume a security infrastructure in which both servers and agents act as proxies for real identities. Cryptographic techniques include public-key cryptography and symmetric cryptography (secret key schemes) [38]. Alternate methods use password systems <ref> [39] </ref>. In a system like that of the Internet, all of these paradigms will be present. For an agent-based system, however, public-key cryptography should be heavily relied upon to enable security.
Reference: [40] <author> S.G. Stubblebine and R.N. Wright. </author> <title> An authentication logic supporting synchronization, revocation, </title> <booktitle> and recency. In 3rd ACM Conference on Computer and Communications Security, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: Every agent-based computing environment requires some degree of trust or risk taking. The level of trust by an entity in an interaction with another is adjustable and can range from complete to little or no trust <ref> [32, 34, 40] </ref>. In addition, this level can be provided by certification agencies so that it is globally available. Such a system would discourage improper behavior as it would provide a mechanism for accountability. <p> In addition, this level can be provided by certification agencies so that it is globally available. Such a system would discourage improper behavior as it would provide a mechanism for accountability. Additional information on trust inference engines can be found in <ref> [4, 40, 46] </ref> 4.2 Protection The protection requirement addresses problems related to the prevention or detection of unintentional or malicious harm caused to entities in an agent based system.
Reference: [41] <author> C. Thirunavukkarasu, T. Finin, and J. Mayfield. </author> <title> Secret agents a security architecture for the KQML communication language. </title> <booktitle> In CIKM'95 Intelligent Information Agents Workshop, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Solutions to security problems of ASE security systems can be solved incorporated into solutions for related problems in an environment like the Internet. However, additional security issues for a less restrictive, agent-based environment based on the Internet, must be 4 addressed. Additional information about ASE's can be found in <ref> [11, 36, 41] </ref>. 4 Finding Solutions In this section, we describe how existing research and protocols can be used to meet the security requirements of an agent-based computing environment. <p> Simulation of a program can be done but requires a vast amount of resources and time. Neither alternative is a good solution in an agent-based environment. However, approaches do exist that protect the server to some degree from the executing code: code interpretation, safe languages, and secure environments <ref> [2, 11, 19, 21, 41, 43, 47] </ref>. Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java [21], Safe-Tcl [22], Kali [8], Telescript [43]. <p> A safe language is one that is interpreted, compiled with a special compiler that ensures proper behavior, or one with mechanisms that control all system calls made by a process. Safe languages, e.g., Java [21], Safe-Tcl (Agent-Tcl) [22], 9 Kali [8], Telescript [43], Obliq [6], and KQML <ref> [41] </ref>, provide extensions for agent creation and execution as well as for Internet applications. Just-In-Time (JIT) compilers can be used to improve performance of agent execution by creating an executable file during initial interpretation of an agent. <p> Secure Environments. Secure environments are agent-based systems that are isolated, i.e., exist independent of other environments and security domains. These environments are also called ASE's and are described in Section 3. Additional information on these and similar environments can be found in <ref> [11, 23, 26, 27, 41, 47] </ref>. In an agent-based environment based on the Internet, ASE's and secure co-processor systems may exist as part of the infrastructure. An agent outside of such a security domain, may be able to access such domains as part of the entire system.
Reference: [42] <author> D. Wetherall. </author> <title> Safety mechanisms for mobile code. In Area Examination Paper, </title> <month> Novem-ber </month> <year> 1995. </year>
Reference-contexts: Existing operating system mechanisms that are needed in an agent-based environment include process profiling, system logs, and fault tolerance, among others. Fault tolerance is beyond the scope of this paper, but we direct the reader to <ref> [16, 18, 33, 35, 42] </ref>. These references contain additional information on distributed system security. Operating system profiling allows traces of agent execution to be made by a server. Profiling, like resource monitoring tools, e.g., ptrace in UNIX, can be used to monitor resource usage.
Reference: [43] <author> J.E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. In General Magic White Paper, </title> <year> 1994. </year>
Reference-contexts: Simulation of a program can be done but requires a vast amount of resources and time. Neither alternative is a good solution in an agent-based environment. However, approaches do exist that protect the server to some degree from the executing code: code interpretation, safe languages, and secure environments <ref> [2, 11, 19, 21, 41, 43, 47] </ref>. Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java [21], Safe-Tcl [22], Kali [8], Telescript [43]. <p> Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java [21], Safe-Tcl [22], Kali [8], Telescript <ref> [43] </ref>. The only way to damage a system is to perform system calls; and interpretation allows each system call to be trapped (halting execution) and approved of prior to execution. <p> A safe language is one that is interpreted, compiled with a special compiler that ensures proper behavior, or one with mechanisms that control all system calls made by a process. Safe languages, e.g., Java [21], Safe-Tcl (Agent-Tcl) [22], 9 Kali [8], Telescript <ref> [43] </ref>, Obliq [6], and KQML [41], provide extensions for agent creation and execution as well as for Internet applications. Just-In-Time (JIT) compilers can be used to improve performance of agent execution by creating an executable file during initial interpretation of an agent. <p> For example, the 11 agent can retrieve a contract or invoice that can be used by the agent-sender as the first flow in a payment protocol [25]. Other electronic commerce protocols that can be used in an agent-based environment can be found in <ref> [43] </ref>. 4.4.2 Fair Exchange and Payment Protocols Fair exchange must be provided in any agent-based security system so that electronic transactions can be performed between the entities.
Reference: [44] <author> E. Wobber, M. Abadi, M. Burrows, and B. Lampson. </author> <title> Authentication in the Taos operating system. </title> <booktitle> In 14th ACM Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: Existing authentication systems solve the problem of mutual entity authentication and provide a mechanism for key certification and exchange [1, 37]. These and other existing techniques, like those for the Authentication Services [11], in the Taos Operating System <ref> [44] </ref>, and in DIMACS [3], can be used to address authentication problems for the agent and the server in both agent execution path configurations. Single Server Agent Execution Path.
Reference: [45] <author> W. Wulf, C. Wang, and D. Kienzle. </author> <title> A new model of security for distributed systems. </title> <note> In Technical Report CS-95-34, </note> <month> August </month> <year> 1995. </year>
Reference-contexts: Authentication, trust levels, and information about previous interactions can be used to determine accessible objects and the extent to which operations may be performed on the objects. Authorization is a well studied mechanism primarily in the domain of operating (distributed and non-distributed) systems <ref> [31, 45] </ref>. Authorization establishes the rights entities have for accessing specified resources. This information can then be used to recognize entities that are allowed to access and operate on resources enabling the system to guard against attacks by malicious intruders and to limit the damage caused by errant processes. <p> Operating system security mechanisms prevent processes from interfering with other processes, from accessing resources for which they do not have permission (authorization), and from harming the system. Prevention of all of these activities is also required when an agent executes at a server <ref> [45] </ref>. Existing operating system mechanisms that are needed in an agent-based environment include process profiling, system logs, and fault tolerance, among others. Fault tolerance is beyond the scope of this paper, but we direct the reader to [16, 18, 33, 35, 42].
Reference: [46] <author> R. Yahalom, B. Klein, and Th. Beth. </author> <title> Trust relationships in secure systems a distributed authentication perspective. </title> <booktitle> In IEEE Symp. on Research in Security and Privacy, </booktitle> <pages> pages 150-164, </pages> <year> 1993. </year>
Reference-contexts: Protocols implementing trust inference are called trust inference engines and are algorithms that determine the degree to which an entity can be trusted based on existing information, e.g., experience, recommendations, etc. Trust inference provides an alternative way to establish authentication and authorization (Section 4.2.1) of entities. In <ref> [46] </ref>, the authors offer a formalism for determining trust relationships in system with different security domains. In [4], the authors extend this work to allow for estimation of trust levels when there are conflicting recommendations and advisement. <p> In addition, this level can be provided by certification agencies so that it is globally available. Such a system would discourage improper behavior as it would provide a mechanism for accountability. Additional information on trust inference engines can be found in <ref> [4, 40, 46] </ref> 4.2 Protection The protection requirement addresses problems related to the prevention or detection of unintentional or malicious harm caused to entities in an agent based system.
Reference: [47] <author> Bennet Yee. </author> <title> A sanctuary for mobile agents. </title> <type> Technical report, </type> <institution> University of California, </institution> <address> San Diego, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: The agent or agents may visit many servers to be sure that the ticket purchased is the one that most closely meets the specification. There are a number of security concerns in this small example. For example, the agents may be modified, copied, re-routed, or brainwashed by malicious servers <ref> [47] </ref>, the data collected by the agent may be modified or deleted by unauthorized servers, or the servers may be maliciously or inadvertently harmed by the agent. These and many other problems must addressed in any secure agent-based system. <p> These environments provide mechanisms for communication, migration, and agent-server interaction. The systems are isolated and require system wide system administration and consistency among agents and servers [11, 12, 23]. Many of the ASE's assume the presence of language-based, e.g, universally similar interpreters [31], or hardware-based, e.g., secure co-processors <ref> [47] </ref>, security infrastructure. Such infrastructures and consistency cannot be assumed throughout the Internet; hence, the issues these mechanisms address must be accounted for by other mechanisms. <p> Simulation of a program can be done but requires a vast amount of resources and time. Neither alternative is a good solution in an agent-based environment. However, approaches do exist that protect the server to some degree from the executing code: code interpretation, safe languages, and secure environments <ref> [2, 11, 19, 21, 41, 43, 47] </ref>. Code Interpretation. Code interpretation is a time consuming process but enables each instruction to be approved prior to its execution. Examples of interpreted languages include Java [21], Safe-Tcl [22], Kali [8], Telescript [43]. <p> Secure Environments. Secure environments are agent-based systems that are isolated, i.e., exist independent of other environments and security domains. These environments are also called ASE's and are described in Section 3. Additional information on these and similar environments can be found in <ref> [11, 23, 26, 27, 41, 47] </ref>. In an agent-based environment based on the Internet, ASE's and secure co-processor systems may exist as part of the infrastructure. An agent outside of such a security domain, may be able to access such domains as part of the entire system.
Reference: [48] <author> P.R. Zimmerman. </author> <title> The Official PGP User's Guide. </title> <publisher> MIT Press, </publisher> <year> 1995. </year> <month> 15 </month>
Reference-contexts: In a system like that of the Internet, all of these paradigms will be present. For an agent-based system, however, public-key cryptography should be heavily relied upon to enable security. We believe, based on the implementation and acceptance of existing public-key systems, e.g., PEM [28], PGP <ref> [48] </ref>, SDSI [36], and X.509 [7], and public security service systems, e.g., TERISA [13], that this is a reasonable assumption. All of the security requirements include problems that can be met by an agent-based security system based on public-key certification. <p> The registry, like the yellow pages phone book, is made available to the public. Existing protocols in which public-key certificates play an important role include PEM [28], PGP <ref> [48] </ref>, and X.509 [7]. An alternative to a single centralized agency is to allow many different agencies for public-key management. Existing systems like [48] incorporate multiple independent entities to sign public-keys. <p> Existing protocols in which public-key certificates play an important role include PEM [28], PGP <ref> [48] </ref>, and X.509 [7]. An alternative to a single centralized agency is to allow many different agencies for public-key management. Existing systems like [48] incorporate multiple independent entities to sign public-keys. In an agent-based environment these entities can be coordinated in order to reduce complexity [36], and to provide a secure infrastructure.
References-found: 48

