URL: http://www.cs.utah.edu/~ack/publications/tau95_partition_complexgate.ps.Z
Refering-URL: http://www.cs.utah.edu/~ack/
Root-URL: 
Email: fpkudva,ganeshg@cs.utah.edu  
Title: Techniques for Synthesizing Efficient Burst-mode Circuits  
Author: Prabhakar Kudva Ganesh Gopalakrishnan 
Date: June 29, 1995  
Address: Salt Lake City, UT 84112  
Affiliation: Department of Computer Science, University of Utah,  
Abstract: We present two techniques for synthesizing efficient burst-mode asynchronous circuits. First, a technique for decomposing a high-level Petri-net-based description into a collection of burst-mode controllers is described, and illustrated on the example of a CD player error corrector from Philips research. Second, a new technique for the hazard-free realization of Boolean equations using customized CMOS complex-gates is presented, and illustrated on a collection of benchmark designs. These techniques form the central core of an asynchronous high-level synthesis tool being developed at Utah that can map an enhanced subset of Verilog into asynchronous circuits. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Custom layout/Virtuoso LAS user's manual, cadence design systems, inc., </institution> <year> 1992. </year>
Reference-contexts: One reason why customized CMOS complex-gates might not have been actively pursued in the past may be that they were harder to lay out. However, with the progress in layout synthesis, numerous tools for laying out arbitrary transistor networks (such as LAS from Cadence <ref> [1] </ref>) have become available. This makes design using customized CMOS complex-gates a viable option. In addition, (as elaborated later) using complex-gates often relaxes many of the constraints present in existing hazard-free realization methods for Boolean functions. <p> These circuits were then run through the LAS <ref> [1] </ref> layout synthesizer available with the Cadence tool-set, to obtain the layout of the circuits. The critical paths of these layouts taking into account the parasitics in the circuit were found.
Reference: [2] <author> Akella, V., and Gopalakrishnan, G. SHILPA: </author> <title> A high-level synthesis system for self-timed circuits. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 587-591. </pages>
Reference-contexts: It also makes the synthesis tools run faster by breaking up the problem into sub-problems. Another class of synthesis techniques that start from high level concurrent specifications are the syntax directed translation techniques <ref> [26, 3, 2] </ref> that target macromodules [7, 24] (also known as "handshake elements"). In these techniques, one starts from nets (Petri nets, occam programs, process descriptions) which have actions that represent two-phase signal transitions or events (i.e., signal transitions without polarity).
Reference: [3] <author> Brunvand, E., and Sproull, R. F. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1989), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 262-265. </pages>
Reference-contexts: It also makes the synthesis tools run faster by breaking up the problem into sub-problems. Another class of synthesis techniques that start from high level concurrent specifications are the syntax directed translation techniques <ref> [26, 3, 2] </ref> that target macromodules [7, 24] (also known as "handshake elements"). In these techniques, one starts from nets (Petri nets, occam programs, process descriptions) which have actions that represent two-phase signal transitions or events (i.e., signal transitions without polarity).
Reference: [4] <author> Bryant, R. E. </author> <title> A survey of switch-level algorithms. </title> <booktitle> IEEE Design and Test of Computers 4, </booktitle> <month> 4 (Aug. </month> <year> 1987), </year> <pages> 26-41. </pages>
Reference-contexts: Similarly, we can define a close hazard. The notion of a dynamic hazard for switch-level networks can be similarly defined. We assume that the output of this complex-gate is a storage node <ref> [4] </ref> (the capacitance C L signifies this fact). This assumption is, in all practical cases, easily met because the output of 11 complex-gates such as this connect to the inputs of other gates.
Reference: [5] <author> Burns, S. M., and Martin, A. J. </author> <title> Syntax-directed translation of concurrent programs into self-timed circuits. </title> <booktitle> In Proceedings of the Fifth MIT Conference on Advanced Research in VLSI (1988), </booktitle> <editor> J. Allen and F. Leighton, Eds., </editor> <publisher> MIT Press, </publisher> <pages> pp. 35-50. </pages>
Reference-contexts: This can often result in area- and time-inefficient controllers. In addition, although these approaches result in distributed control, they rely on mapping onto pre-existing primitive controller types (e.g., C-elements, toggles, Call elements, XORs, etc.) which may not be the most efficient collection for all situations. In the work of <ref> [15, 5] </ref>, decomposition is carried out at the CSP-program level. The individual modules obtained through decomposition are further optimized, and after four-phase expansion, mapped onto complex gates. Their method also relies on mapping onto a pre-existing library and hence can suffer from the same inefficiencies as pointed out earlier.
Reference: [6] <author> Chu, T.-A. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph Theoretic Specifications. </title> <type> PhD thesis, </type> <institution> Department of EECS, Massachusetts Institute of Technology, </institution> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: Related Work Many past efforts relate to what we propose to do. One class of methods for concurrent system specification and synthesis using Petri nets is based on STGs. Contraction <ref> [6, 21] </ref> has been suggested as a decomposition technique for STG specifications. In this method, output partitioning is performed on the specification before state encoding. Contraction generally does not provide distributed control. Circuits synthesized through contraction are similar to those synthesized without contraction.
Reference: [7] <author> Clark, W. A. </author> <booktitle> Macromodular computer systems. In AFIPS Conference Proceedings: 1967 Spring Joint Computer Conference (Atlantic City, NJ, 1967), </booktitle> <volume> vol. 30, </volume> <publisher> Academic Press, </publisher> <pages> pp. 335-336. </pages>
Reference-contexts: It also makes the synthesis tools run faster by breaking up the problem into sub-problems. Another class of synthesis techniques that start from high level concurrent specifications are the syntax directed translation techniques [26, 3, 2] that target macromodules <ref> [7, 24] </ref> (also known as "handshake elements"). In these techniques, one starts from nets (Petri nets, occam programs, process descriptions) which have actions that represent two-phase signal transitions or events (i.e., signal transitions without polarity).
Reference: [8] <author> Davis, A., Coates, B., and Stevens, K. </author> <title> Automatic synthesis of fast compact asynchronous control circuits. In Asynchronous Design Methodologies (1993), </title> <editor> S. Furber and M. Edwards, Eds., </editor> <volume> vol. </volume> <booktitle> A-28 of IFIP Transactions, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <pages> pp. 193-207. </pages>
Reference-contexts: These techniques have received wide attention in the context of of synchronous circuits, but not so much in the context of asynchronous circuits. In this paper, we describe new techniques for doing the same in the context of burst-model asynchronous circuits <ref> [9, 8, 19, 29] </ref>. Related Work Many past efforts relate to what we propose to do. One class of methods for concurrent system specification and synthesis using Petri nets is based on STGs. Contraction [6, 21] has been suggested as a decomposition technique for STG specifications.
Reference: [9] <author> Davis, A., Coates, B., and Stevens, K. </author> <title> The Post Office experience: Designing a large asynchronous chip. </title> <booktitle> In Proc. Hawaii International Conf. System Sciences (Jan. 1993), </booktitle> <volume> vol. I, </volume> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 409-418. </pages>
Reference-contexts: These techniques have received wide attention in the context of of synchronous circuits, but not so much in the context of asynchronous circuits. In this paper, we describe new techniques for doing the same in the context of burst-model asynchronous circuits <ref> [9, 8, 19, 29] </ref>. Related Work Many past efforts relate to what we propose to do. One class of methods for concurrent system specification and synthesis using Petri nets is based on STGs. Contraction [6, 21] has been suggested as a decomposition technique for STG specifications. <p> There have, however, been some exceptions, in which single-output Boolean functions are realized through a single CMOS complex-gate, similar to what we propose. Work in <ref> [9] </ref> and [23] explored the basic ideas in the implementation of large controllers as networks of hazard-free customized CMOS complex-gate circuits. Their work brought out the basic issues involved in deriving hazard-free complex-gate implementations.
Reference: [10] <author> Ebergen, J. C. </author> <title> Translating Programs into Delay-Insensitive Circuits, </title> <type> vol. </type> <institution> 56 of CWI Tract. Centre for Mathematics and Computer Science, </institution> <year> 1989. </year>
Reference-contexts: This requirement is usually satisfied by using additional macromodules such as Toggles [24] and/or Decision-waits <ref> [10] </ref> that are used to "steer" the global input to the "right" sub-controller (we call these input translators). This can often result in area- and time-inefficient controllers.
Reference: [11] <author> Gopalakrishnan, G. C., Kudva, P., Brunvand, E. L., and Akella, V. </author> <title> Peephole optimization of asynchronous macromodule networks. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD) (1994), </booktitle> <pages> pp. 442-446. </pages>
Reference-contexts: This results in machine Glue1 which can be seen to steer the global input a to the appropriate sub-machine. Synthesize Final Circuits Each of the controller descriptions can now be synthesized into asynchronous burst-mode circuits following the procedure described in <ref> [11] </ref>. Briefly, this procedure works as follows. Given a Petri-net in state-machine form with bursts of signals labeling its transitions, first generate an encoded interface stage graph (EISG). From this structure, through a procedure called burst-mode reduction [11], retain only the fundamental-mode delay insensitive behaviors in the EISG. <p> can now be synthesized into asynchronous burst-mode circuits following the procedure described in <ref> [11] </ref>. Briefly, this procedure works as follows. Given a Petri-net in state-machine form with bursts of signals labeling its transitions, first generate an encoded interface stage graph (EISG). From this structure, through a procedure called burst-mode reduction [11], retain only the fundamental-mode delay insensitive behaviors in the EISG. The resulting description can be synthesized into a burst-mode machine which can then be synthesized using (e.g.) Yun's 3D tool [28].
Reference: [12] <author> Hoare, C. A. R. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM 21, </journal> <month> 8 (August </month> <year> 1978), </year> <pages> 666-677. </pages> <note> Original article on CSP. 16 </note>
Reference-contexts: Thus, SFJ descriptions generally involve channel handshakes as some of their signal transitions. We also assume that the communication-guards <ref> [12] </ref> allowed in the input description are deterministic (if not, external arbiters are explicitly allocated by the designer). Further, expression guards are assumed to be evaluated using dedicated combinational blocks, situated outside the framework of SFJs.
Reference: [13] <author> Kung, D. </author> <title> Hazard-non-increasing gate level optimization algorithms. </title> <booktitle> In International Conference on Computer Aided Design (ICCAD), </booktitle> <address> Santa Clara (Nov. </address> <year> 1992). </year>
Reference-contexts: Techniques such as factorization, where larger sum-of-product expression can be reduced to a set of factors and a factorized function can be used for this purpose. The hazard-preserving properties of factorization of boolean functions have been discussed in <ref> [13, 25] </ref>. In this approach, complex gate implementations are obtained for factors of an expression. The outputs of these factors then serve as inputs to the complex gate which implements the quotient expression.
Reference: [14] <author> Lin, B., and Devadas, S. </author> <title> Synthesis of hazard-free multi-level implementations under multiple-input changes from binary decision diagrams. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. </booktitle> <year> 1994). </year>
Reference-contexts: In contrast to what we propose to do, in many modern asynchronous synthesis tools, hazard-free realizations of Boolean functions are always in the form of two-level AND/OR implementations (e.g., [18]), multi-level AND/OR/MUX implementations (e.g., <ref> [14] </ref>), or complex-gate implementations that target a fixed collection of complex-gate types such as AOI (e.g., [22]). There have, however, been some exceptions, in which single-output Boolean functions are realized through a single CMOS complex-gate, similar to what we propose. <p> of the partitioning method; (2) developing heuristics on which kinds of partitions really pay-off all said and done (e.g., when the layout is finished and simulated); (3) investigating multi-level methods for realizing customized CMOS complex-gates (an investigation of a multi-level method based on the BDD-based method of Lin and Devadas <ref> [14] </ref> is in progress); (4) investigate factorization and its potential; (5) further understand hazard-properties of complex-gates to see if they offer further advantages, when coupled with factorization; and (last but not least) (6) develop and release the synthesis tool.
Reference: [15] <author> Martin, A. J. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. </title> <booktitle> In UT Year of Programming Institute on Concurrent Programming (1989), </booktitle> <editor> e. C.A.R. Hoare, Ed., </editor> <publisher> Addison-Wesley. </publisher>
Reference-contexts: This can often result in area- and time-inefficient controllers. In addition, although these approaches result in distributed control, they rely on mapping onto pre-existing primitive controller types (e.g., C-elements, toggles, Call elements, XORs, etc.) which may not be the most efficient collection for all situations. In the work of <ref> [15, 5] </ref>, decomposition is carried out at the CSP-program level. The individual modules obtained through decomposition are further optimized, and after four-phase expansion, mapped onto complex gates. Their method also relies on mapping onto a pre-existing library and hence can suffer from the same inefficiencies as pointed out earlier. <p> Other approaches in using transistor level single gate implementations have been the DCVSL approach in [16] and the generalized C-element approach in <ref> [15] </ref>. Their methods are developed in the context of specific synthesis methods, and do not directly apply to the general problem we are considering: that of implementing standard Boolean functions using standard static CMOS implementations for a given set of allowed multiple-input transitions.
Reference: [16] <author> Meng, T. H., Brodersen, R. W., and Messerchmitt, D. G. </author> <title> Automatic synthesis of asynchronous circuits from high-level specifications. </title> <journal> IEEE Transactions on Computer-Aided Design 8, </journal> <volume> 11 (Nov. </volume> <year> 1989), </year> <pages> 1185-1205. </pages>
Reference-contexts: Other approaches in using transistor level single gate implementations have been the DCVSL approach in <ref> [16] </ref> and the generalized C-element approach in [15]. Their methods are developed in the context of specific synthesis methods, and do not directly apply to the general problem we are considering: that of implementing standard Boolean functions using standard static CMOS implementations for a given set of allowed multiple-input transitions.
Reference: [17] <author> Nowick, S. M. </author> <title> Automatic synthesis of burst-mode asynchronous controllers. </title> <type> Tech. rep., Ph.D Thesis, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: Implementation The implementation of hazard-free SOP-SOP gates proceeds through three steps. In the first step, we run our algorithm Complex-Make-Sets, which is a modified version of Make-sets <ref> [17] </ref>. The latter is described in Figure 9, and the former can be obtained just by deleting the lines marked with a "*". Complex-Make-Sets computes the required cubes (req-set), the off-set cubes, and the privileged set (priv-set) cubes (all to be explained shortly). <p> Using Complex-Make-sets, this covering problem becomes less constrained since the number of required cubes is lesser. Therefore, we increase the number of functions for which a solution exists. For instance, the example used in <ref> [17] </ref> to demonstrate the absence of a solution for AND-OR implementations has a solution in the SOP-SOP form of complex-gate implementations. Contrast with SOP-POS Implementation We now compare the hazard-behavior of complex-gates implemented in the SOP-POS form with the SOP-SOP form.
Reference: [18] <author> Nowick, S. M., and Dill, D. L. </author> <title> Automatic synthesis of locally-clocked asynchronous state machines. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1991), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 318-321. </pages>
Reference-contexts: In contrast to what we propose to do, in many modern asynchronous synthesis tools, hazard-free realizations of Boolean functions are always in the form of two-level AND/OR implementations (e.g., <ref> [18] </ref>), multi-level AND/OR/MUX implementations (e.g., [14]), or complex-gate implementations that target a fixed collection of complex-gate types such as AOI (e.g., [22]). There have, however, been some exceptions, in which single-output Boolean functions are realized through a single CMOS complex-gate, similar to what we propose.
Reference: [19] <author> Nowick, S. M., Yun, K. Y., and Dill, D. L. </author> <title> Practical asynchronous controller design. </title> <booktitle> In Proceedings of the International Conference on Computer Design (1992). </booktitle>
Reference-contexts: These techniques have received wide attention in the context of of synchronous circuits, but not so much in the context of asynchronous circuits. In this paper, we describe new techniques for doing the same in the context of burst-model asynchronous circuits <ref> [9, 8, 19, 29] </ref>. Related Work Many past efforts relate to what we propose to do. One class of methods for concurrent system specification and synthesis using Petri nets is based on STGs. Contraction [6, 21] has been suggested as a decomposition technique for STG specifications. <p> We also show that because of the elimination of static hazard covers, the covering requirements for dynamic hazard covers becomes simpler, and as a result a larger class of Boolean functions become synthesizable using techniques such as developed by <ref> [19] </ref>. Roadmap In Section 2, we illustrate our decomposition procedure on a generic example, also sketching the overall decomposition algorithm side by side. Results obtained by applying this technique on the error corrector of a CD player (an example from Philips labs) are presented.
Reference: [20] <author> Peterson, J. L. </author> <title> Petri Net Theory and The Modeling Of Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: This will be followed by results obtained from synthesizing the error-corrector of a CD player through partitioned synthesis. Check for Syntactic Restrictions The Petri-nets underlying the controller descriptions that our procedure can handle are "state machines <ref> [20] </ref> with fork/joins" (we call them SFJ for short). Each SFJ graph can only have two kinds of transitions: * signal transitions, that have in- and out-degree of one.
Reference: [21] <author> Puri, R., and Gu, J. </author> <title> A modular partitioning approach for asynchronous circuit synthesis. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (June 1994), </booktitle> <pages> pp. 63-69. </pages>
Reference-contexts: Related Work Many past efforts relate to what we propose to do. One class of methods for concurrent system specification and synthesis using Petri nets is based on STGs. Contraction <ref> [6, 21] </ref> has been suggested as a decomposition technique for STG specifications. In this method, output partitioning is performed on the specification before state encoding. Contraction generally does not provide distributed control. Circuits synthesized through contraction are similar to those synthesized without contraction.
Reference: [22] <author> Siegel, P., Micheli, G. D., and Dill, D. </author> <title> Automatic technology mapping for generalized fundamental-mode asynchronous designs. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (June 1993), </booktitle> <pages> pp. 61-67. </pages>
Reference-contexts: In contrast to what we propose to do, in many modern asynchronous synthesis tools, hazard-free realizations of Boolean functions are always in the form of two-level AND/OR implementations (e.g., [18]), multi-level AND/OR/MUX implementations (e.g., [14]), or complex-gate implementations that target a fixed collection of complex-gate types such as AOI (e.g., <ref> [22] </ref>). There have, however, been some exceptions, in which single-output Boolean functions are realized through a single CMOS complex-gate, similar to what we propose. Work in [9] and [23] explored the basic ideas in the implementation of large controllers as networks of hazard-free customized CMOS complex-gate circuits.
Reference: [23] <author> Stevens, K. </author> <type> Ph.d thesis. Tech. rep., </type> <institution> Computer Systems Dept, University of Calgary, </institution> <year> 1994. </year>
Reference-contexts: There have, however, been some exceptions, in which single-output Boolean functions are realized through a single CMOS complex-gate, similar to what we propose. Work in [9] and <ref> [23] </ref> explored the basic ideas in the implementation of large controllers as networks of hazard-free customized CMOS complex-gate circuits. Their work brought out the basic issues involved in deriving hazard-free complex-gate implementations. <p> Their work brought out the basic issues involved in deriving hazard-free complex-gate implementations. Although a large set of designs including a large routing chip has been designed using this approach, there have been no reported attempts of automatic synthesis techniques for obtaining hazard-free complex gate circuits. <ref> [23] </ref> proposes the use of techniques such as proper layout, transistor reordering, etc., to make circuits hazard-free.
Reference: [24] <author> Sutherland, I. Micropipelines. </author> <note> Communications of the ACM (June 1989). The 1988 ACM Turing Award Lecture. </note>
Reference-contexts: It also makes the synthesis tools run faster by breaking up the problem into sub-problems. Another class of synthesis techniques that start from high level concurrent specifications are the syntax directed translation techniques [26, 3, 2] that target macromodules <ref> [7, 24] </ref> (also known as "handshake elements"). In these techniques, one starts from nets (Petri nets, occam programs, process descriptions) which have actions that represent two-phase signal transitions or events (i.e., signal transitions without polarity). <p> This requirement is usually satisfied by using additional macromodules such as Toggles <ref> [24] </ref> and/or Decision-waits [10] that are used to "steer" the global input to the "right" sub-controller (we call these input translators). This can often result in area- and time-inefficient controllers.
Reference: [25] <author> Unger, S. H. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, John Wiley & Sons, Inc., </publisher> <address> New York, </address> <year> 1969. </year> <title> [26] van Berkel, </title> <editor> C., Niessen, C., M.Rem, and R.Saeijs. </editor> <title> Vlsi programming and silicon compilation: a novel approach from phillips research. </title> <booktitle> In Proceedings of IEEE International Conference on Computer Design (ICCD) (1988). </booktitle> <publisher> [27] van Berkel, </publisher> <editor> K. </editor> <title> Handshake Circuits: an Asynchronous Architecture for VLSI Programming, </title> <booktitle> vol. 5 of International Series on Parallel Computation. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: This follows from the fact that F and F are in two-level AND-OR SOP form, and we assume that we do not have both a variable and its complement in the same product term <ref> [25] </ref>. However, in the case of MIC, we will have to make the top and bottom stacks hazard-free for dynamic transitions. Therefore we do require dynamic hazard-free (DHF) covers. <p> A property of SOP-POS forms is that if one of the stacks (P or N) has any hazard, the other stack has the dual of this hazard. This fact follows from the result in <ref> [25] </ref> pertaining to AND/OR gate networks: "the dual of a circuit (AND and OR gates interchanged) realizes the dual function with dual hazards". For example, if the P-stack changes open ! close ! open, then the N-stack changes close ! open ! close. <p> Techniques such as factorization, where larger sum-of-product expression can be reduced to a set of factors and a factorized function can be used for this purpose. The hazard-preserving properties of factorization of boolean functions have been discussed in <ref> [13, 25] </ref>. In this approach, complex gate implementations are obtained for factors of an expression. The outputs of these factors then serve as inputs to the complex gate which implements the quotient expression.
Reference: [28] <author> Yun, K. Y. </author> <title> Synthesis of asynchronous controllers for heterogeneous systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: From this structure, through a procedure called burst-mode reduction [11], retain only the fundamental-mode delay insensitive behaviors in the EISG. The resulting description can be synthesized into a burst-mode machine which can then be synthesized using (e.g.) Yun's 3D tool <ref> [28] </ref>. <p> In 10 addition, the overall circuit area also compares favorably with that of traditional two-level cir-cuits, with two-level CMOS complex-gate circuits often requiring lower area. These results were obtained by modifying the 3D tool developed by <ref> [28] </ref> to generate two-level customized CMOS complex-gate circuits. 3.1 Terminology to realize function F when it presents a connected path between X and Y (i.e., the network is closed). <p> If the close periods overlap, an output hazard results. Thus, to obtain hazard-free realizations of SOP-POS networks, one has to use the original Make-Sets algorithm. As observed previously, this further limits the number of functions for which a solution exists. 3.3 SOP/SOP Results Circuits from the state machine benchmarks <ref> [28] </ref> were synthesized to find the practical applicability of the techniques presented earlier. In this section we will present comparisons between a CMOS complex gate based approach and the gate level design approach.
Reference: [29] <author> Yun, K. Y., Dill, D. L., and Nowick, S. M. </author> <title> Synthesis of 3D asynchronous state machines. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD) (Oct. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 346-350. 17 </pages>
Reference-contexts: These techniques have received wide attention in the context of of synchronous circuits, but not so much in the context of asynchronous circuits. In this paper, we describe new techniques for doing the same in the context of burst-model asynchronous circuits <ref> [9, 8, 19, 29] </ref>. Related Work Many past efforts relate to what we propose to do. One class of methods for concurrent system specification and synthesis using Petri nets is based on STGs. Contraction [6, 21] has been suggested as a decomposition technique for STG specifications.
References-found: 27

