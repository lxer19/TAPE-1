URL: file://ftp.di.unipi.it/pub/Papers/giacobazzi/survey.ps.gz
Refering-URL: http://www.di.unipi.it/di/groups/lp/papers.html
Root-URL: 
Email: fgilberto,franzg@hilbert.math.unipd.it  giaco@di.unipi.it  
Title: A Unifying View on Abstract Domain Design  
Author: Gilberto File Roberto Giacobazzi flfl Francesco Ranzato 
Address: Via Belzoni 7, 35131 Padova, Italy  Corso Italia 40, 56125 Pisa, Italy  
Affiliation: Dipartimento di Matematica Pura ed Applicata, Universita di Padova  flfl Dipartimento di Informatica, Universita di Pisa  
Abstract: Introduction. The concept of abstract interpretation has been introduced by Patrick and Radhia Cousot in [4, 5], in order to formalize static program analyses. Within this framework, our goal is to offer a unifying view on operators for enhancing and simplifying abstract domains. Enhancing and simplifying operators are viewed, respectively, as domain refinements and inverses of domain refinements. This new unifying viewpoint makes both the understanding and the design of operators on abstract domains much simpler. Enhancing operators increase the expressiveness of an abstract domain: they comprise the Cousot and Cousot reduced product, disjunctive completion and reduced cardinal power ([5]), the Nielson tensor product ([9]), the open product and the pattern completion by Cortesi et al. ([3]), and the functional dependencies by Giacobazzi and Ranzato ([7]). Simplifying operators are used to reduce complex abstract domains into simpler ones with respect to the efficiency of the corresponding analysis as well as with respect to the proof of their correctness. Simplifying operators comprise the complementation of Cortesi et al. ([2]) and the Giacobazzi and Ranzato least disjunctive basis ([8]). Domain Refinements and their Inversion. Program analysis is defined in abstract interpretation as non-standard program evaluation. This non-standard semantics is obtained from the standard one by substituting the actual domain of computation (called concrete) and its basic operations with, respectively, an abstract domain and corresponding abstract operations. Both the concrete and the abstract domain are required to be complete lattices, where the ordering relations describe the relative precision of the denotations the top elements representing no information. An abstraction of a concrete domain C can be viewed as an upper closure operator on C , i.e., a function : C ! C which associates with each x 2 C , an object (x ) approximating x (i.e. x (x )), and which is both monotonic and idempotent (cf. [5]). Therefore, any domain A which is isomorphic to the image (C ) by an upper closure operator on C , can be considered a proper abstraction of C . Once a concrete domain C has been fixed, all its possible abstractions can be compared with each other with respect to their precision of representation. This order corresponds in the most natural way to the usual functional pointwise order 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Codish, A. Mulkers, M. Bruynooghe, M. Garca de la Banda, and M. Hermenegildo. </author> <title> Improving abstract interpretations by combining domains. </title> <journal> ACM Trans. on Program. Lang. and Systems, </journal> <volume> 17(1) </volume> <pages> 28-44, </pages> <year> 1995. </year>
Reference-contexts: and A by combining, through set intersection, 0+ and 0, and, + and , respectively. * * 0+ A + * ZZ * * * * ; ZZ + Sign H H H @ @ The practical impact of reduced product has been experimentally shown by Codish et al. in <ref> [1] </ref> for the analysis of logic programs. Reduced product can be inverted. In fact, it corresponds precisely to the operation of complementation introduced in [2].
Reference: [2] <author> A. Cortesi, G. File, R. Giacobazzi, C. Palamidessi, and F. Ranzato. </author> <title> Complementation in abstract interpretation. </title> <editor> In A. Mycroft, ed., </editor> <booktitle> Proc. of the 2nd Static Analysis Symp., Lecture Notes in Comp. Sc. </booktitle> <volume> 983, </volume> <pages> pp. 100-117. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Reduced product can be inverted. In fact, it corresponds precisely to the operation of complementation introduced in <ref> [2] </ref>.
Reference: [3] <author> A. Cortesi, B. Le Charlier, and P. Van Hentenryck. </author> <title> Combinations of abstract domains for logic programming. </title> <booktitle> In Proc. of the 21st ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pp. 227-239. </pages> <publisher> ACM Press, </publisher> <year> 1994. </year>
Reference-contexts: Refinements could be a basis for an environment for developing expressive abstract domains. In such an environment, optimal bases represent the least effort that a domain designer has to provide in order to obtain a fully refined domain. Such a situation is considered by Cortesi et al. in <ref> [3] </ref> for the case of pattern completion in logic program analysis. Using their environment, designers need only to contribute about 20% of the 3 whole implementation. A case study of the cost savings when domains are automatically upgraded from their optimal bases is one important direction for future research.
Reference: [4] <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Proc. of the 4th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pp. 238-252. </pages> <publisher> ACM Press, </publisher> <year> 1977. </year>
Reference-contexts: Introduction. The concept of abstract interpretation has been introduced by Patrick and Radhia Cousot in <ref> [4, 5] </ref>, in order to formalize static program analyses. Within this framework, our goal is to offer a unifying view on operators for enhancing and simplifying abstract domains. Enhancing and simplifying operators are viewed, respectively, as domain refinements and inverses of domain refinements.
Reference: [5] <author> P. Cousot and R. Cousot. </author> <title> Systematic design of program analysis frameworks. </title> <booktitle> In Proc. of the 6th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pp. 269-282. </pages> <publisher> ACM Press, </publisher> <year> 1979. </year>
Reference-contexts: Introduction. The concept of abstract interpretation has been introduced by Patrick and Radhia Cousot in <ref> [4, 5] </ref>, in order to formalize static program analyses. Within this framework, our goal is to offer a unifying view on operators for enhancing and simplifying abstract domains. Enhancing and simplifying operators are viewed, respectively, as domain refinements and inverses of domain refinements. <p> abstraction of a concrete domain C can be viewed as an upper closure operator on C , i.e., a function : C ! C which associates with each x 2 C , an object (x ) approximating x (i.e. x (x )), and which is both monotonic and idempotent (cf. <ref> [5] </ref>). Therefore, any domain A which is isomorphic to the image (C ) by an upper closure operator on C , can be considered a proper abstraction of C .
Reference: [6] <author> P. Cousot and R. Cousot. </author> <title> Inductive definitions, semantics and abstract interpretation. </title> <booktitle> In Proc. of the 19th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pp. 83-94. </pages> <publisher> ACM Press, </publisher> <year> 1992. </year>
Reference-contexts: This would provide an equational-like presentation of abstract domains, similarly to what is well known in standard domain theory, e.g. for denotational semantics. This algebra may also provide systematic methods to design semantics for programming languages. Cousot and Cousot proved in <ref> [6] </ref> that it is possible to relate different semantic definitions, at different levels of abstraction, by abstract interpretation. The algebra of basic operators for domain refinement and their inverses would provide here new methods to derive semantic definitions.
Reference: [7] <author> R. Giacobazzi and F. Ranzato. </author> <title> Functional dependencies and Moore-set completions of abstract interpretations and semantics. </title> <editor> In J. Lloyd, ed., </editor> <booktitle> Proc. of the 1995 Int. Logic Programming Symp., </booktitle> <pages> pp. 321-335. </pages> <publisher> The MIT Press, </publisher> <year> 1995. </year>
Reference: [8] <author> R. Giacobazzi and F. Ranzato. </author> <title> Compositional optimization of disjunctive abstract interpretations. </title> <editor> In H.R. Nielson, ed., </editor> <booktitle> Proc. of the 6th European Symp. on Programming. Lecture Notes in Comp. </booktitle> <address> Sc., </address> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: A further example of invertible domain refinement is disjunctive completion &lt; _ ([5]). An abstract domain is here upgraded by including denotations for concrete disjunctions of its values. This is achieved by suitable powerset completions. It turns out that &lt; _ is a refinement. Giacobazzi and Ranzato proved in <ref> [8] </ref> that, under non restrictive hypotheses on the concrete domain, &lt; 1 _ exists, and for a domain A, &lt; 1 _ (A) depends on the set of the join-irreducible elements of &lt; _ (A).
Reference: [9] <author> F. Nielson. </author> <title> Tensor products generalize the relational data flow analysis method. </title> <editor> In M. Arato et al., eds., </editor> <booktitle> Proc. of the 4th Hungarian Computer Science Conf., </booktitle> <pages> pp. 211-225, </pages> <year> 1985. </year> <month> 4 </month>
References-found: 9

