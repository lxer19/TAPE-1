URL: http://www.cse.psu.edu/~veeramac/publications/reencoding.ps
Refering-URL: http://www.cse.psu.edu/~veeramac/
Root-URL: http://www.cse.psu.edu
Title: Re-encoding for Low Area/Power State Assignment of FSMs  
Author: Vamshi Veeramachaneni, Akhilesh Tyagi Suresh Rajgopal 
Address: Santa Clara, CA 95052 Ames, IA 50011-1041  
Affiliation: Department of Computer Science Intel Corporation Iowa State University  
Abstract: The state assignment problem for finite state machines has been explored extensively by the logic synthesis and asynchronous design communities. In this paper, we present a greedy and efficient algorithm to search the neighborhood of a given state assignment to improve either the area or power or some combination of the two. Experimental results on sequential circuits from the MCNC benchmark set show that switching activity on the state latches can be reduced by 75% (max) and 35-47% (average). Power savings of 50% (max) and 10% on average over JEDI, and 18% on average over NOVA were obtained with negligible increase in area. This re-encoding algorithm when targeting area reduces area by 3.57% over JEDI and by 6.79% over NOVA on average for the MCNC benchmark circuits. We also introduce the concepts of base switching and relative switching which provide a lower bound on the average switching for any state assignment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Devadas, K. Ma, A. R. Newton, and A. Vincentelli. MUSTANG: </author> <title> State Assignment of Finite State Machines Targeting Multilevel Logic Implementations. </title> <journal> IEEE Trans. on CAD, </journal> <volume> 7(12), </volume> <month> December </month> <year> 1988. </year> <month> 20 </month>
Reference-contexts: For instance, for area MUSTANG <ref> [1] </ref> computes these weights to model potential cube sharing. For one class of low power assignments [10, 15, 2], w (s i ; s j ) simply corresponds to the steady-state probability of the transition from s i to s j , p (s i ; s j ). <p> Section 6 concludes the paper with a brief summary and proposals for future work. 2 Review of prior work The first major framework to model the multilevel logic implementation costs for a FSM was introduced in MUSTANG <ref> [1] </ref>. A complete affinity graph with states as vertices is derived from a given FSM. Each edge (s i ; s j ) in this graph is labeled by a weight w (s i ; s j ). <p> Olson and Kang present a MWHD algorithm called GALOPS which uses genetic search in [8]. But the weight on a transition is a linear combination of its steady state probability and an area factor computed as in <ref> [1] </ref>. By scaling these two factors appropriately different area-power trade-offs can be achieved. However, the choice of the constants used for scaling is not always obvious. A higher weight for the area term can sometimes result in an implementation with lower power. <p> According to our test cases, the best deterministic choice for a starting point is the encoding computed by NOVA. 5.2 Area Weights Re-encoding These experiments use weights computed for area optimization. We used MUSTANG's fanout based method <ref> [1] </ref> for weights. Recall that fanout based method focuses on the output side of a transition output and next state. The goal is to maximize the size of shared cubes in the output and next state computation in a multi-level logic implementation of the FSM. <p> This re-encoding algorithm works only if the cost function is stated as a weight between state pairs and the minimized quantity is the product of this weight and Hamming distance summed up over all transitions. Most state assignment algorithms follow this paradigm first introduced in MUSTANG <ref> [1] </ref>. The run time for this heuristic is O (n 3 ) for an n-state FSM. However, in practice, it took about twice as long as JEDI simulated annealing method. The re-encoding for low power uses steady state transition probabilities as edge weights.
Reference: [2] <author> G. D. Hachtel, M. Hermida De La Rica, A. Pardo, M. Poncino, and F. Somenzi. </author> <title> Re-encoding Sequential Circuits to Reduce Power Dissipation. </title> <booktitle> In Proc. of ICCAD, </booktitle> <pages> pages 70-73. </pages> <address> ACM/IEEE, </address> <year> 1994. </year>
Reference-contexts: For instance, for area MUSTANG [1] computes these weights to model potential cube sharing. For one class of low power assignments <ref> [10, 15, 2] </ref>, w (s i ; s j ) simply corresponds to the steady-state probability of the transition from s i to s j , p (s i ; s j ). <p> It can be used to improve the results of an existing state assignment algorithm. For area optimizing state assignment, the re-encoding can be applied to the results of NOVA or JEDI. For low power applications, an existing low power state assignment algorithm <ref> [13, 2] </ref> can be re-encoded. Yet another experiment may generate initial assignments at random and then re-encode them either with low area or with low power objective resulting in a self-contained state assignment system. <p> They suggest the use of simulation to obtain transition probabilities. Once the probabilities are available, high probability chains are constructed. States in higher weight chains are coded first. The remaining states are coded using a branch and bound method. In <ref> [2] </ref>, Hachtel et al. present a fully implicit MWHD based encoding algorithm. They use ADDs (Algebraic Decision Diagram) to solve the Chapman- Kolmogorov equations for machines too large to be processed through conventional techniques. <p> We used four sources of initial state assignments: (1) NOVA generated, optimized for area, (2) JEDI generated, optimized for area, (3) generated by recursive bipartitioning <ref> [2, 13] </ref>, optimized for average switching, (4) five sets of randomly generated state assignments. Each of these state assignments was re-encoded for better average switching. 13 Orig. JEDI Imp. JEDI Avg. <p> NOVA. Best Rand: The area and power of the Rx implementation with the lowest power were compared with Org. NOVA. Bipartition: The encoding obtained by our algorithm when provided the state assignment produced by recursive mincut bipartitioning <ref> [2] </ref> as the starting point was compared with Orig. NOVA. Table 4 should be interpreted similarly. The cell library needed for mapping was an industrial strength library obtained from Intel Corp. Mapping targeting minimal area was done using SIS after optimization with script.rugged. <p> 1.9 0.7 ex1 5.0 6.3 keyb 3.5 8.1 kirkman 3.0 1.0 opus 0.4 0.4 planet 113.4 284.8 pma 8.2 8.2 s1488 111.8 253.3 s386 1.0 0.9 s820 11.1 11.6 sand 23.8 22.3 styr 18.9 28.4 Table 7: Run Times of JEDI hill-climbing assignment and Re-encoding (3) generated by recursive bipartitioning <ref> [2, 13] </ref>, optimized for average area weight, (4) five sets of randomly generated state assignments. Again, each of these state assignments was re-encoded for better average weight, a measure of area. Table 5 reports the area values for NOVA assignments. Column 4 shows the reduction in area of re-encoded assignments.
Reference: [3] <author> Brian W. Kernighan and S. Lin. </author> <title> An efficient heuristic procedure for partitioning graphs. </title> <journal> Bell System Technical Journal, </journal> <volume> 49 </volume> <pages> 291-307, </pages> <year> 1970. </year>
Reference-contexts: They use ADDs (Algebraic Decision Diagram) to solve the Chapman- Kolmogorov equations for machines too large to be processed through conventional techniques. They suggest two methods for re-encoding: recursive weighted matching, recursive mincut bi-partitioning (extension of the Kernighan-Lin heuristic <ref> [3] </ref> to the symbolic ADD setting). Olson and Kang present a MWHD algorithm called GALOPS which uses genetic search in [8]. But the weight on a transition is a linear combination of its steady state probability and an area factor computed as in [1]. <p> This is the first of a series of steps in identifying edges with the maximum slack. It constitutes an instance of the Balanced Bipartition problem which is NP-hard. Fortunately, successful heuristics exist for this problem. We have used a modified version of the Kernighan-Lin mincut heuristic <ref> [3] </ref>. The heuristic as described in [6] requires O (n 3 ) time per iteration. This can be reduced to O (n 2 log (n)) according to the authors.
Reference: [4] <author> H. W. Kuhn. </author> <title> The Hungarian Method for the Assignment Problem. </title> <journal> Naval Research Logistics Quarterly, </journal> <pages> pages 83-97, </pages> <year> 1955. </year>
Reference-contexts: This step identifies the most crucial edges in the cut . The bipartite weighted matching problem (assignment problem) can be described as a linear program that can be solved by a primal-dual method called the Hungarian method <ref> [4] </ref>. An O (n 3 ) algorithm from [9] was implemented. The result of this step is a function mate:Q ! Q s.t. 8s 2 Q; (s; mate [s]) is an edge in the assignment. Step 4: Sort the edges in the assignment in decreasing order with respect to slack.
Reference: [5] <author> E. L. Lawler. </author> <title> Combinatorial Ootimization: Networks and Matroids. </title> <publisher> Holt, Reinhart & Winston, </publisher> <address> NY, </address> <year> 1976. </year>
Reference-contexts: Otherwise, the heuristic terminates. Note that Step 2 and Step 3 can be combined into a single step wherein maximum weighted matching is computed in the non-bipartite graph G s . An O (n 3 ) algorithm for the general matching problem is described in <ref> [5] </ref> and its use would eliminate the need for the iterative Kernighan-Lin mincut heuristic. Exchange based brute-force and simulated annealing algorithms carry out exchanges at random.
Reference: [6] <author> T. Lengauer. </author> <title> Combinatorial Algorithms for Integrated Circuit Layout. </title> <publisher> John Wiley & Sons, </publisher> <year> 1990. </year>
Reference-contexts: It constitutes an instance of the Balanced Bipartition problem which is NP-hard. Fortunately, successful heuristics exist for this problem. We have used a modified version of the Kernighan-Lin mincut heuristic [3]. The heuristic as described in <ref> [6] </ref> requires O (n 3 ) time per iteration. This can be reduced to O (n 2 log (n)) according to the authors.
Reference: [7] <author> B. Lin and A.R. </author> <title> Newton. Synthesis of Muliple-Level Logic from Symbolic High-Level Description Languages. </title> <booktitle> In Proceedings of IFIP International Conference on VLSI, </booktitle> <pages> pages 187-196, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: JEDI <ref> [7] </ref> uses MUSTANG weights for area optimization, however it also provides alternative methods for minimizing the area objective function such as hill climbing. Several state assignment algorithms which optimize for power have appeared in the last few years.
Reference: [8] <author> E. Olson and S. M. Kang. </author> <title> Low-Power State Assignment for Finite State Machines. </title> <booktitle> In Proc. of International Workshop on Low Power Design, </booktitle> <pages> pages 63-68. </pages> <address> ACM/IEEE, </address> <year> 1994. </year>
Reference-contexts: They suggest two methods for re-encoding: recursive weighted matching, recursive mincut bi-partitioning (extension of the Kernighan-Lin heuristic [3] to the symbolic ADD setting). Olson and Kang present a MWHD algorithm called GALOPS which uses genetic search in <ref> [8] </ref>. But the weight on a transition is a linear combination of its steady state probability and an area factor computed as in [1]. By scaling these two factors appropriately different area-power trade-offs can be achieved. However, the choice of the constants used for scaling is not always obvious.
Reference: [9] <author> C. H. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice-Hall, </publisher> <year> 1982. </year>
Reference-contexts: This step identifies the most crucial edges in the cut . The bipartite weighted matching problem (assignment problem) can be described as a linear program that can be solved by a primal-dual method called the Hungarian method [4]. An O (n 3 ) algorithm from <ref> [9] </ref> was implemented. The result of this step is a function mate:Q ! Q s.t. 8s 2 Q; (s; mate [s]) is an edge in the assignment. Step 4: Sort the edges in the assignment in decreasing order with respect to slack.
Reference: [10] <author> K. Roy and S.C. Prasad. </author> <title> Circuit Activity Based Logic Synthesis for Low Power Reliable Operations. </title> <journal> IEEE Trans. on VLSI Systems, </journal> <pages> pages 503-513, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: For instance, for area MUSTANG [1] computes these weights to model potential cube sharing. For one class of low power assignments <ref> [10, 15, 2] </ref>, w (s i ; s j ) simply corresponds to the steady-state probability of the transition from s i to s j , p (s i ; s j ). <p> All the algorithms that use average switching as their cost functions (classified as a MWHD, Minimum Weighted Hamming Distance, algorithm by the concise notation of [11]) are amenable to our re-encoding technique. The features of some of the MWHD state assignment algorithms are given below. In <ref> [10] </ref>, Roy and Prasad present a MWHD algorithm called SYCLOP. The weights attached to the transitions are conditional probabilities instead of steady state probabilities. Simulated annealing is used to improve a randomly chosen state assignment. In [15] Washabaugh et al. present a greedy MWHD algorithm called SABSA. <p> Wang et al. present a recursive matching based algorithm in [14]. They address the problem of state assignment to minimize both area and power dissipation. At every stage of the matching, matched nodes are combined to form supernodes. Their method is similar to that of <ref> [10] </ref>. The results presented show a 20% decrease in average switching when compared with NOVA. Actual power figures, however, were not reported. 3 Tsui et al. propose a new power cost model in [11]. Their model considers both capacitive loading and switching activity simultaneously.
Reference: [11] <author> C. Y. Tsui, M. Pedram, C. Chen, and A. M. Despain. </author> <title> Low Power State Assignment Targeting Two- and Multi-level Logic Implementations. </title> <booktitle> In Proc. of ICCAD, </booktitle> <pages> pages 82-87. </pages> <address> ACM/IEEE, </address> <year> 1994. </year>
Reference-contexts: Several state assignment algorithms which optimize for power have appeared in the last few years. All the algorithms that use average switching as their cost functions (classified as a MWHD, Minimum Weighted Hamming Distance, algorithm by the concise notation of <ref> [11] </ref>) are amenable to our re-encoding technique. The features of some of the MWHD state assignment algorithms are given below. In [10], Roy and Prasad present a MWHD algorithm called SYCLOP. The weights attached to the transitions are conditional probabilities instead of steady state probabilities. <p> Their method is similar to that of [10]. The results presented show a 20% decrease in average switching when compared with NOVA. Actual power figures, however, were not reported. 3 Tsui et al. propose a new power cost model in <ref> [11] </ref>. Their model considers both capacitive loading and switching activity simultaneously. They also describe encoding techniques that minimize the power for two- and multi-level logic implementations. Simulated annealing is used as the search strategy.
Reference: [12] <author> A. Tyagi. </author> <title> Integrated Area-Power Optimal State Assignment. </title> <booktitle> In Proceedings of the Synthesis and Simulation Meeting and International Interchange, SASIMI '96. </booktitle> <publisher> Daichisha Press, </publisher> <address> Kyoto, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: For integrated low area-power, w (s i ; s j ) can be derived to model the energy of the potential common cubes and expected degree of sharing <ref> [12] </ref>. In this paper, we present a greedy algorithm for improving the value of an objective function of the form P over all state pairs:s i ;s j w (s i ; s j )h (s i ; s j ).
Reference: [13] <author> V. M. Veeramachaneni. </author> <title> Low Power State Assignments of FSMs. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, Iowa State University, Ames, Iowa, </institution> <month> May </month> <year> 1995. </year> <month> 21 </month>
Reference-contexts: It can be used to improve the results of an existing state assignment algorithm. For area optimizing state assignment, the re-encoding can be applied to the results of NOVA or JEDI. For low power applications, an existing low power state assignment algorithm <ref> [13, 2] </ref> can be re-encoded. Yet another experiment may generate initial assignments at random and then re-encode them either with low area or with low power objective resulting in a self-contained state assignment system. <p> We used four sources of initial state assignments: (1) NOVA generated, optimized for area, (2) JEDI generated, optimized for area, (3) generated by recursive bipartitioning <ref> [2, 13] </ref>, optimized for average switching, (4) five sets of randomly generated state assignments. Each of these state assignments was re-encoded for better average switching. 13 Orig. JEDI Imp. JEDI Avg. <p> 1.9 0.7 ex1 5.0 6.3 keyb 3.5 8.1 kirkman 3.0 1.0 opus 0.4 0.4 planet 113.4 284.8 pma 8.2 8.2 s1488 111.8 253.3 s386 1.0 0.9 s820 11.1 11.6 sand 23.8 22.3 styr 18.9 28.4 Table 7: Run Times of JEDI hill-climbing assignment and Re-encoding (3) generated by recursive bipartitioning <ref> [2, 13] </ref>, optimized for average area weight, (4) five sets of randomly generated state assignments. Again, each of these state assignments was re-encoded for better average weight, a measure of area. Table 5 reports the area values for NOVA assignments. Column 4 shows the reduction in area of re-encoded assignments.
Reference: [14] <author> K. Wang, W. Wang, T. Hwang, A. C. H. Wu, and Y. Lin. </author> <title> State Assignment for Power and Area Minimization. </title> <booktitle> In Proc. of ICCAD, </booktitle> <pages> pages 250-254. </pages> <address> ACM/IEEE, </address> <year> 1994. </year>
Reference-contexts: A higher weight for the area term can sometimes result in an implementation with lower power. Surprisingly, a higher weight for the probability term can result in an implementation with a smaller area. Wang et al. present a recursive matching based algorithm in <ref> [14] </ref>. They address the problem of state assignment to minimize both area and power dissipation. At every stage of the matching, matched nodes are combined to form supernodes. Their method is similar to that of [10]. The results presented show a 20% decrease in average switching when compared with NOVA.
Reference: [15] <author> S. Washabaugh, P. Franzon, and H. Nagle. SABSA: </author> <title> Switching Activity Based State Assigment. </title> <booktitle> In Proceedings of IEEE Solid State Circuits and Technology Committee Workshop on Low Power Electronics. IEEE, </booktitle> <year> 1993. </year> <month> 22 </month>
Reference-contexts: For instance, for area MUSTANG [1] computes these weights to model potential cube sharing. For one class of low power assignments <ref> [10, 15, 2] </ref>, w (s i ; s j ) simply corresponds to the steady-state probability of the transition from s i to s j , p (s i ; s j ). <p> In [10], Roy and Prasad present a MWHD algorithm called SYCLOP. The weights attached to the transitions are conditional probabilities instead of steady state probabilities. Simulated annealing is used to improve a randomly chosen state assignment. In <ref> [15] </ref> Washabaugh et al. present a greedy MWHD algorithm called SABSA. They suggest the use of simulation to obtain transition probabilities. Once the probabilities are available, high probability chains are constructed. States in higher weight chains are coded first. The remaining states are coded using a branch and bound method.
References-found: 15

