URL: ftp://ftp.cs.umass.edu/pub/lesser/decker-93-21.ps
Refering-URL: http://dis.cs.umass.edu/research/integ.html
Root-URL: 
Title: Quantitative Modeling of Complex Environments  
Author: Keith Decker and Victor Lesser 
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: UMass Computer Science Technical Report 93-21 April 18, 1994 Abstract There are many formal approaches to specifying how the mental state of an agent entails the particular actions it will perform. These approaches put the agent at the center of analysis. For some questions and purposes, it is more realistic and convenient for the center of analysis to be the task environment, domain, or society of which agents will be a part. This paper presents such a task environment-oriented modeling framework that can work hand-in-hand with more agent-centered approaches. Our approach features careful attention to the quantitative computational interrelationships between tasks, to what information is available (and when) to update an agent's mental state, and to the general structure of the task environment rather than single-instance examples. A task environment model can be used for both analysis and simulation, it avoids the methodological problems of relying solely on single-instance examples, and provides concrete, meaningful characterizations with which to state general theories. This paper is organized around an example model of cooperative problem solving in a distributed sensor network. 1 This paper, which extends our AAAI-93 paper, will appear in the International Journal of Intelligent Systems 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mark Boddy and Thomas Dean. </author> <title> Solving time-dependent planning problems. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1989. </year>
Reference-contexts: The desired Q (M; t) can be easily defined for any of these. As an example of the power of this representation, we consider the two main schools of thought on quality accumulation: the anytime algorithm camp <ref> [1] </ref> and the design-to-time (approximate processing) camp [14, 20]. <p> The following formula is more easily understood if one keeps in mind that, in general, the ratio of available quality to maximum quality will go from 0 to 1 as methods are executed. precedes (T a ; M; t; d; q; d ; q ) = 8 : <ref> [1; 0] </ref> Q avail (T a ; S (M )) 0 [d 0 (M )=R (T a ; S (M )) d ; q 0 (M )R (T a ; S (M )) q ] Q avail (T a ; S (M )) &gt; 0 (3) 3.4 Expanding the DSN Model
Reference: [2] <author> Piero P. Bonissone and Keith S. Decker. </author> <title> Selecting uncertainty calculi and granularity: An experiment in trading-off precision and complexity. </title> <editor> In L. N. Karnak and J. F. Lemmer, editors, </editor> <booktitle> Uncertainty in Artificial Intelligence. </booktitle> <publisher> North Holland, </publisher> <year> 1986. </year>
Reference-contexts: We write this relation respectively satisfy the semantic requirements of the three basic classes of aggregation operators <ref> [2, 15] </ref>. 2 In Boddy's paper, the assumption is made that Q (M; t) has monotonically decreasing gain. 5 NLE (T ; M; e; p 1 ; p 2 ; : : :), where the p's are parameters specific to a class of effects.
Reference: [3] <author> Richard M. Burton and Brge Obel. </author> <title> Designing Efficient Organizations: Modelling and Experimentation. </title> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1984. </year>
Reference-contexts: The form of the framework is more detailed in structure than many organizational-theoretic models of organizational environments, such as Thompson's notions of pooled, sequential, and reciprocal processes [34], Burton and Obel's linear programs <ref> [3] </ref>, or Malone's queueing models [26], but is influenced by them, and by the importance of environmental uncertainty and dependency that appear in contingency-theoretic and open systems views of organizations [24, 18, 32, 29] 1 Section 2 will discuss the general nature of the three modeling framework layers. <p> and Obel: is there a significant difference in performance due to either the choice of organizational structure or the decomposability of technology? Technology is used here in the management science sense of the physical method by which resources are converted into products or services or a means for doing work <ref> [3, 29] </ref>. We equate a technology with a task structure, instead of a linear program. Task structures allow us to use a clear interval measure for decomposability, namely the probability of a task interrelationship (in this example enables, facilitates, and overlaps).
Reference: [4] <author> Norman Carver and Victor Lesser. </author> <title> A new framework for sensor interpretation: Planning to resolve sources of uncertainty. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 724-731, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: The simulator supports the graphical display of generated subjective and objective task structures, agent actions, and statistical data collection in CLOS on the TI Explorer and DEC Alpha. The basic form of the computational task environment frameworkthe execution of interrelated computational tasksis taken from several domain environment simulators <ref> [4, 5, 16] </ref>. If this were the only impetus, the result might have been a simulator like Tileworld [28].
Reference: [5] <author> Paul Cohen, Michael Greenberg, David Hart, and Adele Howe. </author> <title> Trial by fire: Understanding the design requirements for agents in complex environments. </title> <journal> AI Magazine, </journal> <volume> 10(3) </volume> <pages> 33-48, </pages> <month> Fall </month> <year> 1989. </year> <note> Also COINS-TR-89-61. </note>
Reference-contexts: The simulator supports the graphical display of generated subjective and objective task structures, agent actions, and statistical data collection in CLOS on the TI Explorer and DEC Alpha. The basic form of the computational task environment frameworkthe execution of interrelated computational tasksis taken from several domain environment simulators <ref> [4, 5, 16] </ref>. If this were the only impetus, the result might have been a simulator like Tileworld [28].
Reference: [6] <author> Paul R. Cohen. </author> <booktitle> A survey of the Eighth National Conference on Artificial Intelligence: Pulling together or pulling apart? AI Magazine, </booktitle> <volume> 12(1) </volume> <pages> 16-41, </pages> <month> Spring </month> <year> 1991. </year>
Reference-contexts: We have recently extended the TMS framework to model physical resources as well (see Section 4). The reason we have created the TMS framework is rooted in the desire to produce general theories in AI <ref> [6] </ref>. Consider the difficulties facing an experimenter asking under what environmental conditions a particular local scheduler produces acceptable results, or when the overhead associated with a certain coordination algorithm is acceptable given the frequency of particular subtask interrelationships. <p> TMS does not at this time automatically learn models or automatically verify them. While we have taken initial steps at designing a methodology for verification (see [12]), this is still an open area of research <ref> [6] </ref>. Our future work will include building new models of different environments that include physical resource constraints, such as airport resource scheduling.
Reference: [7] <author> Philip R. Cohen and Hector J. Levesque. </author> <title> Intention is choice with commitment. </title> <journal> Artificial Intelligence, </journal> <volume> 42(3), </volume> <year> 1990. </year>
Reference-contexts: However, formal research into multi-agent problem solving has been productive in specifying formal properties, and sometimes algorithms, for the control process by which the mental state of agents (termed variously: beliefs, desires, goals, intentions, etc.) causes the agents to perform particular actions <ref> [7, 30, 35] </ref>. This research has helped to circumscribe the behaviors or actions that agents can produce based on their knowledge or beliefs. The final influence on TMS was the desire to avoid the individualistic agent-centered approaches that characterize most AI and Distributed AI.
Reference: [8] <author> Keith S. Decker, Alan J. Garvey, Marty A. Humphrey, and Victor R. Lesser. </author> <title> Control heuristics for scheduling in a parallel blackboard system. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 7(2) </volume> <pages> 243-264, </pages> <year> 1993. </year>
Reference-contexts: First the control mechanisms assert (commit to) information-gathering, communication, and method execution actions and then these actions are computed one at a time, after which the cycle of meta-states repeats. A simple model of parallel computation, similar to the implementation in <ref> [8] </ref>, is to allow control, information gathering, and communication to run on one (abstract) processor, and multiple method executions on the other processors.
Reference: [9] <author> Keith S. Decker, Alan J. Garvey, Marty A. Humphrey, and Victor R. Lesser. </author> <title> A real-time control architecture for an approximate processing blackboard system. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 7(2) </volume> <pages> 265-284, </pages> <year> 1993. </year>
Reference-contexts: We will add the characteristic that each agent has two methods with which to deal with sensed data: a normal VLM and a `level-hopping' (LH) VLM (the level-hopping VLM produces less quality than the full method but requires less time; see <ref> [14, 9] </ref> for this and other approximate methods; a similar technique can be used to model agents who have different capabilities such as processor speed).
Reference: [10] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Generalizing the partial global planning algorithm. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(2) </volume> <pages> 319-346, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The description of an agent's control and coordination algorithms will describe when and where communication actually occurs (see communication actions in Section 5.3, and the concept of agency in Section 5.1). 6 model will define different classes of effects, such as causes, facilitates, cancels, constrains, inhibits, and enables <ref> [10] </ref>. This section contains definitions for four common classes of effects that have been useful in modeling different environments. When non-local effects occur between methods associated with different agents, we call them coordination relationships [11, 10]. Enables. <p> This section contains definitions for four common classes of effects that have been useful in modeling different environments. When non-local effects occur between methods associated with different agents, we call them coordination relationships <ref> [11, 10] </ref>. Enables. If task T a enables method M , then the maximum quality q (M; t) = 0 until T a is completed and the result is available, when the maximum quality will change to the initial maximum quality q (M; t) = q 0 (M ). <p> These features help in both the model-building stage and the verification stage. The TMS simulator is being used not only for research into the coordination of distributed problem solvers <ref> [12, 11, 10] </ref>, but also for research into real-time scheduling of a single agent [20], scheduling at an agent with parallel processing resources available, and soon, learning coordination algorithm parameters. TMS does not at this time automatically learn models or automatically verify them.
Reference: [11] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Analyzing a quantitative coordination relationship. Group Decision and Negotiation, </title> <booktitle> 2(3) </booktitle> <pages> 195-217, </pages> <year> 1993. </year>
Reference-contexts: When local or non-local effects exist between tasks that are known by more than one agent, we call them coordination relationships <ref> [11] </ref>. The basic purpose of the objective model is to formally specify how the execution and timing of tasks affect this measure of quality. 3.1 Local Effects: The Subtask Relationship Task or task group quality (Q (T )) is based on the subtask relationship. <p> This section contains definitions for four common classes of effects that have been useful in modeling different environments. When non-local effects occur between methods associated with different agents, we call them coordination relationships <ref> [11, 10] </ref>. Enables. If task T a enables method M , then the maximum quality q (M; t) = 0 until T a is completed and the result is available, when the maximum quality will change to the initial maximum quality q (M; t) = q 0 (M ). <p> The second clause of the definition indicates that communication after the start of processing has no effect. In other work <ref> [11] </ref> we explored the effects on coordination of a facilitates effect with varying duration power d , and with q = 0. Hinders. The hinders effect is the opposite of facilitates, because it increases the duration and decreases the maximum quality of the consequent. <p> We examined this question somewhat in <ref> [11] </ref>. At the end of the next section, we will return to this example and add to it subjective features: what information is available to agents, when, and at what cost. 4 Resources We have recently extended TMS so that resources can be represented directly in task structures. <p> The models we build typically further divide control into local scheduling and coordination (see <ref> [11] </ref>), but this is not required. Besides describing how an agent's beliefs entail commitments to particular information gathering, communication, and method execution actions, a control component model must also describe the duration of its deliberations. <p> Our previous work has created generative models of task interarrival times (exponential distribution), amount of work in a task group (Poisson), task durations (exponential), and the likelihood of a particular non-local effect 13 between two tasks <ref> [12, 11, 20] </ref>. Generative level statistical parameters can also be used by agents in their subjective reasoning, for example, an agent may make control decisions based on the knowledge of the expected duration of methods. <p> We have used simulation to explore the effect of exploiting the presence of facilitation between tasks in a multi-agent real-time environment where no quality is accrued after a task's deadline <ref> [11] </ref>. The environmental generative characteristics here included the mean interarrival time for tasks, the likelihood of one task facilitating another, and the strength of the facilitation ( d ). The TMS framework is not limited to experimentation in distributed problem solving. <p> These features help in both the model-building stage and the verification stage. The TMS simulator is being used not only for research into the coordination of distributed problem solvers <ref> [12, 11, 10] </ref>, but also for research into real-time scheduling of a single agent [20], scheduling at an agent with parallel processing resources available, and soon, learning coordination algorithm parameters. TMS does not at this time automatically learn models or automatically verify them.
Reference: [12] <author> Keith S. Decker and Victor R. Lesser. </author> <title> An approach to analyzing the need for meta-level communication. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Chamb ery, France, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: We have used this model to develop expressions for the expected value of, and confidence intervals 3 on, the time of termination of a set of agents in any arbitrary DSN environment that has a static organizational structure and coordination algorithm <ref> [12, 13] </ref>. We have also used this model to analyze a dynamic, one-shot reorganization algorithm (and have shown when the extra overhead is worthwhile versus the static algorithm). <p> Next we turn to the control of the agents in an environment. As an example, we will now present a very simple static control algorithm that uses no meta-level communication (more information about this and other algorithms can be found in <ref> [12] </ref>). In a static organization, agents divide their overlapping areas of responsibility as evenly as possible, resulting in new areas of responsibility for each agent with no overlap (to avoid redundant processing). <p> Our previous work has created generative models of task interarrival times (exponential distribution), amount of work in a task group (Poisson), task durations (exponential), and the likelihood of a particular non-local effect 13 between two tasks <ref> [12, 11, 20] </ref>. Generative level statistical parameters can also be used by agents in their subjective reasoning, for example, an agent may make control decisions based on the knowledge of the expected duration of methods. <p> To do this, we build probabilistic models of the relevant objective and subjective parameters (now viewed as random variables) that are based on generative level parameters. Another paper, <ref> [12] </ref>, details this process, and shows how the distributions of objective parameters such as the number of VLM methods seen by the maximally loaded agent ( ^ S) and the max number of task groups seen by the same agent ( ^ N ) can be defined from just the generative <p> Again, we refer the interested reader to <ref> [12] </ref> for derivations, verification, and applications of these results. <p> If the agent's coordination algorithm changes, then Eqn. 6 will change (see <ref> [12] </ref>). The coordination algorithm discussed in Section 5.4 results in a static organization; a dynamic organization is one in which the responsibilities of agents can be reassigned based on a developing view of the problem at hand. <p> In this way, information that resolves uncertainties about the current environment becomes available to the agents, allowing the agents to then create the most efficient organization for the situation. In <ref> [12] </ref> we present equations similar to Eq. 6 that show the potential benefits of dynamic reorganization in an arbitrary environment D, and discuss when the overhead of meta-level communication is worthwhile. 6.2 Simulation Simulation is a useful tool for learning parameters to control algorithms, for quickly exploring the behavior space of <p> These features help in both the model-building stage and the verification stage. The TMS simulator is being used not only for research into the coordination of distributed problem solvers <ref> [12, 11, 10] </ref>, but also for research into real-time scheduling of a single agent [20], scheduling at an agent with parallel processing resources available, and soon, learning coordination algorithm parameters. TMS does not at this time automatically learn models or automatically verify them. <p> TMS does not at this time automatically learn models or automatically verify them. While we have taken initial steps at designing a methodology for verification (see <ref> [12] </ref>), this is still an open area of research [6]. Our future work will include building new models of different environments that include physical resource constraints, such as airport resource scheduling.
Reference: [13] <author> Keith S. Decker and Victor R. Lesser. </author> <title> A one-shot dynamic coordination algorithm for distributed sensor networks. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 210-216, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: We have used this model to develop expressions for the expected value of, and confidence intervals 3 on, the time of termination of a set of agents in any arbitrary DSN environment that has a static organizational structure and coordination algorithm <ref> [12, 13] </ref>. We have also used this model to analyze a dynamic, one-shot reorganization algorithm (and have shown when the extra overhead is worthwhile versus the static algorithm).
Reference: [14] <author> Keith S. Decker, Victor R. Lesser, and Robert C. Whitehair. </author> <title> Extending a blackboard architecture for approximate processing. </title> <journal> The Journal of Real-Time Systems, </journal> 2(1/2):47-79, 1990. 
Reference-contexts: The desired Q (M; t) can be easily defined for any of these. As an example of the power of this representation, we consider the two main schools of thought on quality accumulation: the anytime algorithm camp [1] and the design-to-time (approximate processing) camp <ref> [14, 20] </ref>. <p> We will add the characteristic that each agent has two methods with which to deal with sensed data: a normal VLM and a `level-hopping' (LH) VLM (the level-hopping VLM produces less quality than the full method but requires less time; see <ref> [14, 9] </ref> for this and other approximate methods; a similar technique can be used to model agents who have different capabilities such as processor speed).
Reference: [15] <author> D. Dubois and H. Prade. </author> <title> Criteria aggregation and ranking of alternatives in the framework of fuzzy set theory. </title> <editor> In H.J. Zimmermen, L. A. Zadeh, and B.R. Gains, editors, </editor> <booktitle> TIMS/Studies in Management Science, </booktitle> <volume> volume 20, </volume> <pages> pages 209-240. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1984. </year>
Reference-contexts: We write this relation respectively satisfy the semantic requirements of the three basic classes of aggregation operators <ref> [2, 15] </ref>. 2 In Boddy's paper, the assumption is made that Q (M; t) has monotonically decreasing gain. 5 NLE (T ; M; e; p 1 ; p 2 ; : : :), where the p's are parameters specific to a class of effects.
Reference: [16] <author> Edmund H. Durfee, Victor R. Lesser, and Daniel D. Corkill. </author> <title> Coherent cooperation among communicating problem solvers. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36(11) </volume> <pages> 1275-1291, </pages> <month> November </month> <year> 1987. </year> <month> 19 </month>
Reference-contexts: The simulator supports the graphical display of generated subjective and objective task structures, agent actions, and statistical data collection in CLOS on the TI Explorer and DEC Alpha. The basic form of the computational task environment frameworkthe execution of interrelated computational tasksis taken from several domain environment simulators <ref> [4, 5, 16] </ref>. If this were the only impetus, the result might have been a simulator like Tileworld [28]. <p> This example grows out of the set of single instance examples of distributed sensor network (DSN) problems presented in <ref> [16] </ref>. The authors of that paper compared the performance of several different coordination algorithms on these examples, and concluded that no one algorithm was always the bestnot a very surprising result and one that can be viewed as the central tenet of contingency theory. <p> Such situations occur computationally when there are multiple methods for a task and one fails to provide as many constraints as the other. Hinders can also be used as a high-level model of distraction <ref> [16] </ref>, where inappropriate constraints communicated from one agent to another lead the second agent on a wild goose chase. Precedence. We define the precedence effect as a combination of enables and hinders. <p> An assumption made in <ref> [16] </ref> is that redundant work is not generally useful; this is indicated by using max as the combination function for each agent's redundant methods. <p> We then alter this default for the case of faulty (i.e., noisy) sensorsan agent with a faulty sensor will not initially realize it (d 0 (faulty-VLM) = 2d 0 (VLM), but '(A; d 0 (faulty-VLM)) = d 0 (VLM)). 6 Other subjective level artifacts that are seen in <ref> [16] </ref> and other DVMT work can also be modeled easily in our framework.
Reference: [17] <author> E.H. Durfee and V.R. Lesser. </author> <title> Partial global planning: A coordination framework for distributed hypothesis formation. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(5) </volume> <pages> 1167-1183, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The objective level describes the essential, `real' task structure of a particular problem-solving situation or instance over time. It is roughly equivalent to a formal description of a single problem-solving situation such as those presented in <ref> [17] </ref>, without the information about particular agents. <p> Another effect, used by the PGP algorithm <ref> [17] </ref> but never formally defined, is the facilitates effect. In organization theory, Stinchcombe defines facilitation as an `external effect' in relation to the spatial properties of environmental activities [31], but also recognizes computational facilitation through the transmission of information.
Reference: [18] <author> J. </author> <title> Galbraith. Organizational Design. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1977. </year>
Reference-contexts: models of organizational environments, such as Thompson's notions of pooled, sequential, and reciprocal processes [34], Burton and Obel's linear programs [3], or Malone's queueing models [26], but is influenced by them, and by the importance of environmental uncertainty and dependency that appear in contingency-theoretic and open systems views of organizations <ref> [24, 18, 32, 29] </ref> 1 Section 2 will discuss the general nature of the three modeling framework layers. <p> ghost track, etc. 6.1 Analysis Summary Organizational theorists have long held that the organization of a set of agents cannot be analyzed separately from the agents' task environment, that there is no single best organization for all environments, and that different organizations are not equally effective in a given environment <ref> [18] </ref>. Most of these theorists view the uncertainties present in the environment as a key characteristic, though they differ in the mechanisms that link environmental uncertainty to effective organization.
Reference: [19] <author> Alan Garvey, Marty Humphrey, and Victor Lesser. </author> <title> Task interdependencies in design-to-time real-time scheduling. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 580-585, </pages> <address> Washington, D.C., </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Maximum duration could be defined, but is generally a useless concept. A more useful concept for schedulingthe minimum duration required for achieving maximum quality at a taskis explored in <ref> [19] </ref>. The clear specification of such concepts is one of the benefits of using our framework. 3.3.1 Non-local Effect Examples Non-local effects are the most important part of the TMS framework, since they supply most of the characteristics that make one task environment unique and different from another.
Reference: [20] <author> Alan Garvey and Victor Lesser. </author> <title> Design-to-time real-time scheduling. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 23(6), </volume> <year> 1993. </year> <note> Special Issue on Scheduling, Planning, and Control. </note>
Reference-contexts: The desired Q (M; t) can be easily defined for any of these. As an example of the power of this representation, we consider the two main schools of thought on quality accumulation: the anytime algorithm camp [1] and the design-to-time (approximate processing) camp <ref> [14, 20] </ref>. <p> We have also considered pre-emptable method execution, where a method execution action is given a set upper time limit, after which computation will proceed to the next meta-state. The agent can then monitor the execution of long methods, and interleave their execution with other actions or pre-empt them entirely <ref> [20] </ref>. Communication. How do the actions of an agent affect other agents? Communication actions allow agents to affect each others' beliefs to a limited extent. Many people have worked on formalizing aspects of communication; the semantics of communication actions can be freely defined for each environment. <p> Our previous work has created generative models of task interarrival times (exponential distribution), amount of work in a task group (Poisson), task durations (exponential), and the likelihood of a particular non-local effect 13 between two tasks <ref> [12, 11, 20] </ref>. Generative level statistical parameters can also be used by agents in their subjective reasoning, for example, an agent may make control decisions based on the knowledge of the expected duration of methods. <p> The environmental generative characteristics here included the mean interarrival time for tasks, the likelihood of one task facilitating another, and the strength of the facilitation ( d ). The TMS framework is not limited to experimentation in distributed problem solving. In <ref> [20] </ref>, Garvey and Lesser used the framework to describe the effects of various task environment and agent design features on the performance of their real-time `design-to-time' algorithm. They manipulate the objective-to-subjective mapping to examine questions about monitoring the execution of tasks when true method durations are not known. <p> These features help in both the model-building stage and the verification stage. The TMS simulator is being used not only for research into the coordination of distributed problem solvers [12, 11, 10], but also for research into real-time scheduling of a single agent <ref> [20] </ref>, scheduling at an agent with parallel processing resources available, and soon, learning coordination algorithm parameters. TMS does not at this time automatically learn models or automatically verify them.
Reference: [21] <author> Les Gasser. </author> <title> Social conceptions of knowledge and action. </title> <journal> Artificial Intelligence, </journal> <volume> 47(1) </volume> <pages> 107-138, </pages> <year> 1991. </year>
Reference-contexts: Ours is one of the few comprehensive descriptions of computational task environments, but there are many formal and informal descriptions of the concept of agency (see <ref> [21, 22, 27] </ref>). Rather than add our own description, we notice that these formulations define the notion of computation at one or more agents, not the environment that the agents are part of.
Reference: [22] <author> Carl Hewitt. </author> <title> Open information systems semantics for distributed artificial intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 47(1) </volume> <pages> 79-106, </pages> <year> 1991. </year>
Reference-contexts: Ours is one of the few comprehensive descriptions of computational task environments, but there are many formal and informal descriptions of the concept of agency (see <ref> [21, 22, 27] </ref>). Rather than add our own description, we notice that these formulations define the notion of computation at one or more agents, not the environment that the agents are part of.
Reference: [23] <author> Jack P. C. Kleijnen. </author> <title> Statistical Tools for Simulation Practitioners. </title> <publisher> Marcel Dekker, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: Our approach so far has been to verify our assumptions about the environment with simple statistical approaches <ref> [23] </ref>. Detailed model verification will be more important when using our framework to optimize parameters in a real application, as opposed to learning the general effects of parameters on a coordination or negotiation algorithm (see Section 7).
Reference: [24] <author> Paul Lawrence and Jay Lorsch. </author> <title> Organization and Environment. </title> <publisher> Harvard University Press, </publisher> <address> Cambridge, MA, </address> <year> 1967. </year>
Reference-contexts: models of organizational environments, such as Thompson's notions of pooled, sequential, and reciprocal processes [34], Burton and Obel's linear programs [3], or Malone's queueing models [26], but is influenced by them, and by the importance of environmental uncertainty and dependency that appear in contingency-theoretic and open systems views of organizations <ref> [24, 18, 32, 29] </ref> 1 Section 2 will discuss the general nature of the three modeling framework layers.
Reference: [25] <author> J. W. S. Liu, K. J. Lin, W. K. Shih, A. C. Yu, J. Y. Chung, and W. Zhao. </author> <title> Algorithms for scheduling imprecise computations. </title> <journal> IEEE Computer, </journal> <volume> 24(5) </volume> <pages> 58-68, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: linear quality functions) have been proposed and are used, such as concave quality functions (must execute most of a task before quality begins to accumulate), convex quality functions (most quality is achieved early on in a method, and only small increases occur later), and `mandatory and optional parts' quality functions <ref> [25] </ref>. The desired Q (M; t) can be easily defined for any of these. As an example of the power of this representation, we consider the two main schools of thought on quality accumulation: the anytime algorithm camp [1] and the design-to-time (approximate processing) camp [14, 20].
Reference: [26] <author> Thomas W. Malone. </author> <title> Modeling coordination in organizations and markets. </title> <journal> Management Science, </journal> <volume> 33 </volume> <pages> 1317-1332, </pages> <year> 1987. </year>
Reference-contexts: The form of the framework is more detailed in structure than many organizational-theoretic models of organizational environments, such as Thompson's notions of pooled, sequential, and reciprocal processes [34], Burton and Obel's linear programs [3], or Malone's queueing models <ref> [26] </ref>, but is influenced by them, and by the importance of environmental uncertainty and dependency that appear in contingency-theoretic and open systems views of organizations [24, 18, 32, 29] 1 Section 2 will discuss the general nature of the three modeling framework layers.
Reference: [27] <author> Terry M. Moe. </author> <title> The new economics of organization. </title> <journal> American Journal of Political Science, </journal> <volume> 28(4) </volume> <pages> 739-777, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: Ours is one of the few comprehensive descriptions of computational task environments, but there are many formal and informal descriptions of the concept of agency (see <ref> [21, 22, 27] </ref>). Rather than add our own description, we notice that these formulations define the notion of computation at one or more agents, not the environment that the agents are part of. <p> Most of these theorists view the uncertainties present in the environment as a key characteristic, though they differ in the mechanisms that link environmental uncertainty to effective organization. In particular, the transaction cost economics approach <ref> [27] </ref> focuses on the relative efficiencies of various organizations given an uncertain environment, while the updated versions of the contingency theory approach [32] focus on the need for an organization to expand toward the earliest available information that resolves uncertainties in the current environment.
Reference: [28] <author> Martha E. Pollack and Marc Ringuette. </author> <title> Introducing Tileworld: Experimentally evaluating agent architectures. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 183-189, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: The basic form of the computational task environment frameworkthe execution of interrelated computational tasksis taken from several domain environment simulators [4, 5, 16]. If this were the only impetus, the result might have been a simulator like Tileworld <ref> [28] </ref>. However, formal research into multi-agent problem solving has been productive in specifying formal properties, and sometimes algorithms, for the control process by which the mental state of agents (termed variously: beliefs, desires, goals, intentions, etc.) causes the agents to perform particular actions [7, 30, 35].
Reference: [29] <author> W. Richard Scott. </author> <title> Organizations: Rational, Natural, and Open Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1987. </year>
Reference-contexts: models of organizational environments, such as Thompson's notions of pooled, sequential, and reciprocal processes [34], Burton and Obel's linear programs [3], or Malone's queueing models [26], but is influenced by them, and by the importance of environmental uncertainty and dependency that appear in contingency-theoretic and open systems views of organizations <ref> [24, 18, 32, 29] </ref> 1 Section 2 will discuss the general nature of the three modeling framework layers. <p> In organizational theoretic terms, subjective perception can be used to predict agent actions or outputs, but unperceived, objective environmental characteristics can still affect performance (or outcomes) <ref> [29] </ref>. Finally, the generative level describes the statistical characteristics required to generate the objective and subjective situations in a domain. <p> and Obel: is there a significant difference in performance due to either the choice of organizational structure or the decomposability of technology? Technology is used here in the management science sense of the physical method by which resources are converted into products or services or a means for doing work <ref> [3, 29] </ref>. We equate a technology with a task structure, instead of a linear program. Task structures allow us to use a clear interval measure for decomposability, namely the probability of a task interrelationship (in this example enables, facilitates, and overlaps).
Reference: [30] <author> Yoav Shoham. AGENT0: </author> <title> A simple agent language and its interpreter. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 704-709, </pages> <address> Anaheim, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: However, formal research into multi-agent problem solving has been productive in specifying formal properties, and sometimes algorithms, for the control process by which the mental state of agents (termed variously: beliefs, desires, goals, intentions, etc.) causes the agents to perform particular actions <ref> [7, 30, 35] </ref>. This research has helped to circumscribe the behaviors or actions that agents can produce based on their knowledge or beliefs. The final influence on TMS was the desire to avoid the individualistic agent-centered approaches that characterize most AI and Distributed AI. <p> The agent's control mechanism uses the agent's current set of beliefs A to update three special subsets of these beliefs (alternatively, commitments <ref> [30] </ref>) identified as the sets of information gathering, communication, and method execution actions to be computed. The models we build typically further divide control into local scheduling and coordination (see [11]), but this is not required. <p> Method execution actions are similar to what Shoham terms `private actions' like DO <ref> [30] </ref>. We have also considered pre-emptable method execution, where a method execution action is given a set upper time limit, after which computation will proceed to the next meta-state.
Reference: [31] <author> Arthur L. Stinchcombe. </author> <title> Constructing Social Theories. </title> <publisher> University of Chicago Press, </publisher> <address> Chicago, </address> <year> 1987. </year>
Reference-contexts: Another effect, used by the PGP algorithm [17] but never formally defined, is the facilitates effect. In organization theory, Stinchcombe defines facilitation as an `external effect' in relation to the spatial properties of environmental activities <ref> [31] </ref>, but also recognizes computational facilitation through the transmission of information. Computationally, facilitation occurs when information from one task, often in the form of constraints, is provided that either reduces or changes the search space to make some other task easier to solve.
Reference: [32] <author> Arthur L. Stinchcombe. </author> <title> Information and Organizations. </title> <publisher> University of California Press, </publisher> <address> Berkeley, CA, </address> <year> 1990. </year>
Reference-contexts: models of organizational environments, such as Thompson's notions of pooled, sequential, and reciprocal processes [34], Burton and Obel's linear programs [3], or Malone's queueing models [26], but is influenced by them, and by the importance of environmental uncertainty and dependency that appear in contingency-theoretic and open systems views of organizations <ref> [24, 18, 32, 29] </ref> 1 Section 2 will discuss the general nature of the three modeling framework layers. <p> In particular, the transaction cost economics approach [27] focuses on the relative efficiencies of various organizations given an uncertain environment, while the updated versions of the contingency theory approach <ref> [32] </ref> focus on the need for an organization to expand toward the earliest available information that resolves uncertainties in the current environment.
Reference: [33] <author> Toshiharu Sugawara and Victor R. Lesser. </author> <title> On-line learning of coordination plans. </title> <institution> Computer Science Technical Report 93-27, University of Massachusetts, </institution> <year> 1993. </year>
Reference-contexts: The method-to-resource NLE's change the state of the resource, and the resource-to-method NLE's affect duration and max quality as usual. For example, take the situation of a low-bandwidth communication link as described in <ref> [33] </ref>. Two agents have a diagnosis method that uses the low-bandwidth link. When more than one of these diagnosis methods are executed at the same time, the link is saturated and the durations of the methods are lengthened.
Reference: [34] <author> James D. Thompson. </author> <title> Organizations in Action. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1967. </year>
Reference-contexts: The form of the framework is more detailed in structure than many organizational-theoretic models of organizational environments, such as Thompson's notions of pooled, sequential, and reciprocal processes <ref> [34] </ref>, Burton and Obel's linear programs [3], or Malone's queueing models [26], but is influenced by them, and by the importance of environmental uncertainty and dependency that appear in contingency-theoretic and open systems views of organizations [24, 18, 32, 29] 1 Section 2 will discuss the general nature of the three
Reference: [35] <author> G. Zlotkin and J. S. Rosenschein. </author> <title> Incomplete information and deception in multi-agent negotiation. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 225-231, </pages> <address> Sydney, Australia, </address> <month> August </month> <year> 1991. </year> <month> 20 </month>
Reference-contexts: However, formal research into multi-agent problem solving has been productive in specifying formal properties, and sometimes algorithms, for the control process by which the mental state of agents (termed variously: beliefs, desires, goals, intentions, etc.) causes the agents to perform particular actions <ref> [7, 30, 35] </ref>. This research has helped to circumscribe the behaviors or actions that agents can produce based on their knowledge or beliefs. The final influence on TMS was the desire to avoid the individualistic agent-centered approaches that characterize most AI and Distributed AI.
References-found: 35

