URL: ftp://ftp.cs.washington.edu/tr/1993/05/UW-CSE-93-05-03.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: The Practical Application of Retiming to the Design of High-Performance Systems 1  
Author: Brian Lockyear and Carl Ebeling 
Note: provided by IBM Corporation and Sun Microsystems.  
Address: Seattle, Washington 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Technical Report 93-5-03 May, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Burns. </author> <title> Performance Analysis and Optimization of Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, </institution> <year> 1991. </year> <month> Caltech-CS-TR-91-01. </month>
Reference-contexts: Thus required setup time S does not appear as a parameter in cycle constraints. Using a maximum-ratio-cycle algorithm such as the one in <ref> [1] </ref> we solve for the maximum value of w (c) over all circuit cycles. This in turn identifies the critical cycle bound, or the minimum possible value of T to which the circuit can be retimed.
Reference: [2] <author> D. W. Dobberpuhl, R. T. Witek, R. Allmon, et al. </author> <title> A 200-MHz 64-b dual-issue CMOS microprocessor. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 27(11) </volume> <pages> 1555-1567, </pages> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Recently there has been a resurgence of interest in the technique of circuit retiming, largely because of the development of efficient retiming algorithms for latch-based circuits and the emphasis placed by modern high-performance systems such as the Alpha processor <ref> [2] </ref> on this type of circuit. Retiming is the process of moving the synchronizers within a circuit to reduce the clock period. In essence, retiming repositions synchronizers to utilize the clock period as fully as possible.
Reference: [3] <author> G. </author> <title> Even. A real-time systolic integer multiplier. </title> <type> Technical Report 763, </type> <institution> Technion- Israel Institute of Technology, </institution> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: The tool is capable of edge-triggered [6] and symmetric or asymmetric level-clocked circuit retiming [7, 4]. It incorporates the techniques of retiming with skew discussed in this paper and can optimize circuits for greatest skew tolerance. The serial-parallel multiplier circuit of Figure 10 <ref> [3] </ref> provides a good example where clock skew is a factor. The vertices v 1 through v 4 are summand-adders used to perform the multiplication operation.
Reference: [4] <author> A. T. Ishii, C. E. Leiserson, and M. C. Papaefthymiou. </author> <title> Optimizing two-phase, </title> <booktitle> level-clocked circuitry. In Advanced Research in VLSI and Parallel Systems: Proc. of the Brown/MIT Conference, </booktitle> <pages> pages 245-264, </pages> <year> 1992. </year>
Reference-contexts: For this reason, they are generally faster but more difficult to analyze in terms of timing behavior. Only recently has retiming been extended to circuits that use level-clocked circuits <ref> [7, 4] </ref>. These new algorithms make it possible to design circuits as if they used registers, convert them to level-clocked circuits and then optimize them using retiming. <p> We make the simplifying assumption that P and S are the same for all latches in the circuit. Algorithms for asymmetric level-clocked circuits in <ref> [7, 4] </ref> could be extended to solve problems in which latch setup time varies with the physical placement of latches. <p> ILP constraints are now formed as r (u) r (v) W (u; v) L (u; v) which may be solved using the Bellman-Ford algorithm. Mixed-ILP constraints may also be formed and the more efficient solution technique (O (jV j 2 log jV j)) for them used <ref> [4] </ref>. The formulation may also be extended for unequal phase schedules as shown in [7] and solved using extensions to the Bellman-Ford algorithm in O (k jV j 3 ) time. <p> In summary, incorporating these additional parameters into the retiming model does not change the form of the constraints and thus the same algorithms described in the previous papers <ref> [7, 4] </ref> can still be used. 6 Making Circuits Robust to Parameter Variations Retiming is usually cast as a way to find the minimum clock period for a circuit, but often the problem is to meet some goal clock period rather than find the minimum period. <p> The tool is implemented as a library of routines implemented in C and has been interfaced to the SIS sequential synthesis tools as well as the xdp drawing program. The tool is capable of edge-triggered [6] and symmetric or asymmetric level-clocked circuit retiming <ref> [7, 4] </ref>. It incorporates the techniques of retiming with skew discussed in this paper and can optimize circuits for greatest skew tolerance. The serial-parallel multiplier circuit of Figure 10 [3] provides a good example where clock skew is a factor.
Reference: [5] <author> C. E. Leiserson, F. Rose, and J. B. Saxe. </author> <title> Optimizing synchronous circuitry by retiming. </title> <booktitle> In Proc. of the 3rd Caltech Conference on VLSI, </booktitle> <month> Mar. </month> <year> 1983. </year>
Reference-contexts: An efficient algorithm for retiming circuits using edge-triggered registers, known as edge-clocked circuits, was first described by Leiserson, Rose and Saxe in 1983 <ref> [5] </ref>. Circuits that use level-sensitive latches, known as level-clocked circuits, allow more flexibility in the scheduling of a computation in the circuit. For this reason, they are generally faster but more difficult to analyze in terms of timing behavior. <p> Before describing this extension, we review the circuit and clock models used in <ref> [5, 7] </ref> for level-clocked circuits. The reader is encouraged to read these earlier papers for full details. 3.1 Circuit Graph Model A circuit is represented as a graph with a vertex, v, for each functional element and an edge, u e for each interconnecting wire.
Reference: [6] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Retiming synchronous circuitry. </title> <journal> Algorithmica, </journal> <volume> 6(1) </volume> <pages> 5-35, </pages> <year> 1991. </year> <note> Also available as MIT/LCS/TM-372. 19 </note>
Reference-contexts: The tool is implemented as a library of routines implemented in C and has been interfaced to the SIS sequential synthesis tools as well as the xdp drawing program. The tool is capable of edge-triggered <ref> [6] </ref> and symmetric or asymmetric level-clocked circuit retiming [7, 4]. It incorporates the techniques of retiming with skew discussed in this paper and can optimize circuits for greatest skew tolerance. The serial-parallel multiplier circuit of Figure 10 [3] provides a good example where clock skew is a factor.
Reference: [7] <author> B. E. Lockyear and C. Ebeling. </author> <title> Retiming of multi-phase, </title> <booktitle> level-clocked circuits. In Advanced Research in VLSI and Parallel Systems: Proc. of the Brown/MIT Conference, </booktitle> <pages> pages 265-280, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: For this reason, they are generally faster but more difficult to analyze in terms of timing behavior. Only recently has retiming been extended to circuits that use level-clocked circuits <ref> [7, 4] </ref>. These new algorithms make it possible to design circuits as if they used registers, convert them to level-clocked circuits and then optimize them using retiming. <p> Before describing this extension, we review the circuit and clock models used in <ref> [5, 7] </ref> for level-clocked circuits. The reader is encouraged to read these earlier papers for full details. 3.1 Circuit Graph Model A circuit is represented as a graph with a vertex, v, for each functional element and an edge, u e for each interconnecting wire. <p> Non-interference: A m = D l + d (p) E P (l);P (m) &gt; t hold These constraints assume that clock skew, latch propagation delay and setup time are all zero. These parameters will be added later in this paper. The retiming techniques in <ref> [7] </ref> restrict the type of clocks and circuits that can be retimed. Clock schedules must be "valid" so that only maximum delay constraints need to be satisfied for correct operation. Valid clock schedules do not allow races to occur even if all circuit delays are zero. <p> We make the simplifying assumption that P and S are the same for all latches in the circuit. Algorithms for asymmetric level-clocked circuits in <ref> [7, 4] </ref> could be extended to solve problems in which latch setup time varies with the physical placement of latches. <p> Lemma 5 provides a characteristic of critical paths which allows them to be identified using an all-pairs-shortest-paths algorithm. Lemma 5: (modified from Lemma 5.5 <ref> [7] </ref>) A path u p !! v in a well-formed circuit is a critical path iff: fw (p) T P d (p)g fw (q) T P d (q)g for all u !! v: Proof sketch. <p> Mixed-ILP constraints may also be formed and the more efficient solution technique (O (jV j 2 log jV j)) for them used [4]. The formulation may also be extended for unequal phase schedules as shown in <ref> [7] </ref> and solved using extensions to the Bellman-Ford algorithm in O (k jV j 3 ) time. <p> In summary, incorporating these additional parameters into the retiming model does not change the form of the constraints and thus the same algorithms described in the previous papers <ref> [7, 4] </ref> can still be used. 6 Making Circuits Robust to Parameter Variations Retiming is usually cast as a way to find the minimum clock period for a circuit, but often the problem is to meet some goal clock period rather than find the minimum period. <p> The tool is implemented as a library of routines implemented in C and has been interfaced to the SIS sequential synthesis tools as well as the xdp drawing program. The tool is capable of edge-triggered [6] and symmetric or asymmetric level-clocked circuit retiming <ref> [7, 4] </ref>. It incorporates the techniques of retiming with skew discussed in this paper and can optimize circuits for greatest skew tolerance. The serial-parallel multiplier circuit of Figure 10 [3] provides a good example where clock skew is a factor.
Reference: [8] <author> M. C. Papaefthymiou. </author> <title> Edge-triggering vs. two-phase level-clocking. </title> <booktitle> In Research on Integrated Systems: Proc. of the 1993 Symposium, </booktitle> <pages> pages 201-218, </pages> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: We address two of the reasons for this in this paper. The first reason is that the few results that have been reported on retiming benchmark circuits have not been encouraging <ref> [8, 10] </ref>. One reason for this has been the choice of circuits such as FSMs for which retiming has little or no benefit. Even more important, we believe, is the use of retiming at the very end of the design process.
Reference: [9] <author> K. A. Sakallah, T. N. Mudge, and O. A. Olukotun. </author> <title> Analysis and design of latch-controlled synchronous circuits. </title> <booktitle> In Proc. 27th ACM-IEEE Design Automation Conf., </booktitle> <year> 1990. </year>
Reference-contexts: The resulting weight of an edge u e ! v in the retimed graph is: w r (e) = w (e) + r (v) r (u). 3.2 Clock Model For our retiming work we have adopted the clock model of Sakallah, Mudge & Olukotun <ref> [9] </ref> which provides a convenient way to describe the resulting timing constraints. A k-phase clock is a set of k periodic signals, = f 1 : : : k g, where i is phase i of the clock . All i have a common cycle time T .
Reference: [10] <author> H. Touati, N. Shenoy, and A. Sangiovanni-Vincentelli. </author> <title> Retiming for table-lookup field-programmable gate arrays. </title> <booktitle> In First Intl. ACM/SIGDA Workshop on FPGAs, </booktitle> <pages> pages 89-94, </pages> <address> California, 1992. Berkeley. </address> <month> 20 </month>
Reference-contexts: We address two of the reasons for this in this paper. The first reason is that the few results that have been reported on retiming benchmark circuits have not been encouraging <ref> [8, 10] </ref>. One reason for this has been the choice of circuits such as FSMs for which retiming has little or no benefit. Even more important, we believe, is the use of retiming at the very end of the design process.
References-found: 10

