URL: http://www.cs.concordia.ca/~faculty/grogono/sembrow.ps
Refering-URL: http://www.cs.concordia.ca/~faculty/grogono/techpubs.html
Root-URL: http://www.cs.concordia.ca
Email: e-mail: grogono@concour.cs.concordia.ca bcheung@concour.cs.concordia.ca  
Phone: Tel: (514) 848-3000  
Title: A Semantic Browser for Object Oriented Program Development  
Author: Peter Grogono and Benjamin Cheung 
Address: 1455 deMaisonneuve Blvd., Montreal, Quebec Canada H3G 1M8  
Affiliation: Department of Computer Science, Concordia University  
Abstract: Object oriented methods allow programmers to construct software with a simple and uniform structure. Object oriented programs should be simple to maintain and extend. These desirable goals will not be achieved if programmers have to deal with an unorganized collection of hundreds of classes and thousands of methods. Source code browsers are not sufficient for understanding object oriented programs. The development environment must provide rapid access to processed information that programmers can use immediately. We have combined a strongly-typed object oriented language with an integrated, interactive development environment. The language and the environment are both called "Dee". For several reasons, we designed the compiler as an integral component of the environment. Coupling the compiler and the browser simplifies symbol table management in the compiler. Conversely, the same coupling ensures that information is semantically checked before the browser displays it. Also, programmers do not have to understand the class hierarchy, because the compiler creates class views. Finally, information generated by the compiler allows the browser to determine the appropriate response to a query from the source of the query. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Biggerstaff and C. Richter. </author> <title> Reusability framework, assessment, and directions. </title> <editor> In T. Biggerstaff and A. Perlis, editors, </editor> <booktitle> Software Reusability. Volume I: Concepts and Models, </booktitle> <pages> pages 1-17. </pages> <publisher> ACM Press (Addison Wesley), </publisher> <year> 1989. </year>
Reference: [2] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Ad-dison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Interactive browsing is more commonly associated with dynamic systems, which interpret or compile incrementally and do not perform static type checking, than it is with systems which perform semantic analysis during compilation. Development environments for typed object oriented languages, such as C++ <ref> [2] </ref> and Eiffel [9], usually appear after the language itself has been implemented rather than being developed as an integral part of the language design. In fact, many programmers are required to develop object oriented programs with no tools other than an editor, compiler, and debugger.
Reference: [3] <author> A. Goldberg. </author> <title> The influence of an object-oriented language on the programming environment. </title> <editor> In D. Barstow, H. Shrobe, and E. Sandewall, editors, </editor> <booktitle> Interactive Programming Environments, chapter 8, </booktitle> <pages> pages 141-174. </pages> <publisher> McGraw-Hill, </publisher> <year> 1984. </year>
Reference-contexts: Object oriented languages have supported browsing since their beginning. For example, the Smalltalk-80 programming environment allows programmers not only to inspect the class hierarchy, the classes themselves, and individual methods, but also to ask questions such as "what messages does this method send?" <ref> [3] </ref>. Since Smalltalk is interpreted, however, browsing reveals only what the programmer wrote: the browser does not provide any semantic information or any indication of validity.
Reference: [4] <author> Peter Grogono. </author> <title> Issues in the design of an object oriented programming language. </title> <journal> Structured Programming, </journal> <volume> 12(1) </volume> <pages> 1-15, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: 1 INTRODUCTION 2 We describe a development environment which provides semantic browsing capabilities for an object oriented programming language. Both the language and the environment are called "Dee" <ref> [4] </ref>. The Dee browser satisfies two of the criteria identified by Biggerstaff as fundamental to software reuse: finding suitable components and understanding them. A significant aspect of the Dee environment is that we designed the language and the compiler in parallel. The compiler is tightly integrated into the environment. <p> One of the design principles of Dee required that programmers should not have to provide the same information more than once. Another important principle was that all of the information about a particular entity should be in one place <ref> [4] </ref>. The canonical document and views support these principles: programmers are not required to write separate interface and implementation modules. In the canonical document, the definition of an instance variable or method consists of a single block of text; there are no export lists.
Reference: [5] <author> M. Kilian. </author> <title> Trellis: Turning designs into programs. </title> <journal> Comm. ACM, </journal> <volume> 33(9) </volume> <pages> 65-67, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The approach is similar to ours but, as in Smalltalk and Eiffel, the stored information is obtained from program text rather than from the compiler. Trellis is a programming environment which supports programming in Trellis/Owl <ref> [11, 5] </ref>. The Trellis browser provides access to source code. Realizing that source code alone is inadequate for object oriented development, the designers of Trellis provided additional information to programmers, including information generated by the compiler. In this respect, Trellis is quite similar to Dee.
Reference: [6] <author> Y. Li and T. O'Shea. BRRR: </author> <title> a tool for facilitating user's navigation in Smalltalk-80. </title> <booktitle> In Proc. Symp. on Object-Oriented Programming Emphasizing Practical Applications (SOOPPA), </booktitle> <pages> pages 175-189, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Li and O'Shea, for example, report that navigation in Smalltalk can be difficult, and they have implemented a tool called BRRR (Browser for Retrieval by Reformulation) which helps programmers to find their way around the Smalltalk-80 class library <ref> [6] </ref>. Although we have not yet implemented anything along these lines, we feel that such a tool would fit very naturally into the environment. 6 Conclusion The short and flatten utilities of Eiffel extract information, including source comments, from source code [9].
Reference: [7] <author> M. Linton. </author> <title> Implementing relational views of programs. </title> <editor> In P. Henderson, editor, </editor> <booktitle> Proc. ACM Software Engineering Symp. on Practical Software Development Environments, </booktitle> <pages> pages 132-140. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1984. </year> <note> Published as SIGPLAN Notices, 19(5), May 1984. REFERENCES 11 </note>
Reference-contexts: The CIDB in Dee contributes to project management, but its primary purpose is to store specific information needed by the compiler and by programmers. The OMEGA programming system uses a relational database to provide various views of a program, including configurations, versions, call graphs, and slices <ref> [7] </ref>. The approach is similar to ours but, as in Smalltalk and Eiffel, the stored information is obtained from program text rather than from the compiler. Trellis is a programming environment which supports programming in Trellis/Owl [11, 5]. The Trellis browser provides access to source code.
Reference: [8] <author> L.-C. Liu and E. Horowitz. </author> <title> Object database support for a software project management environment. </title> <editor> In P. Henderson, editor, </editor> <booktitle> Proc. ACM Software Engineering Symp. on Practical Software Development Environments, </booktitle> <pages> pages 85-96. </pages> <publisher> ACM, </publisher> <month> December </month> <year> 1988. </year> <note> Also published in SIGPLAN Notices, 24(2), </note> <month> February </month> <year> 1989. </year>
Reference-contexts: We decided against automatic compilation because the problem of circular dependencies does not arise frequently and we did not want the compiler to surprise programmers by performing unexpected compilations. 5 Related Work Database management systems have long been associated with software engineering <ref> [8, 12] </ref>. The databases described by these authors, however, are primarily concerned with project management. The CIDB in Dee contributes to project management, but its primary purpose is to store specific information needed by the compiler and by programmers.
Reference: [9] <author> Bertrand Meyer. </author> <title> Object-oriented Software Construction. </title> <publisher> Prentice Hall International, </publisher> <year> 1988. </year>
Reference-contexts: Interactive browsing is more commonly associated with dynamic systems, which interpret or compile incrementally and do not perform static type checking, than it is with systems which perform semantic analysis during compilation. Development environments for typed object oriented languages, such as C++ [2] and Eiffel <ref> [9] </ref>, usually appear after the language itself has been implemented rather than being developed as an integral part of the language design. In fact, many programmers are required to develop object oriented programs with no tools other than an editor, compiler, and debugger. <p> Although we have not yet implemented anything along these lines, we feel that such a tool would fit very naturally into the environment. 6 Conclusion The short and flatten utilities of Eiffel extract information, including source comments, from source code <ref> [9] </ref>. These utilities are syntactic tools which extract information from the source REFERENCES 10 text of a class, whether or not the class has been validated by compilation. Although the view that Dee provides resembles the output of flatten, it is generated by the compiler.
Reference: [10] <author> S. Meyers. </author> <title> Working with object-oriented programs: the view from the trenches is not always pretty. </title> <booktitle> In Proc. Symp. on Object-Oriented Programming Emphasizing Practical Applications (SOOPPA), </booktitle> <pages> pages 51-65, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Meyers reports that debugging an object oriented program under these circumstances can be difficult and frustrating because the information provided by the debugger is often not relevant to the problem <ref> [10] </ref>. In comparison, our approach has three major advantages. First, the information that the browser displays is correct and up-to-date. Moreover, the browser has access to information obtained during semantic analysis. Second, programmers do not usually need to be aware of the inheritance hierarchy because the compiler processes inheritance information.
Reference: [11] <author> P. O'Brien, D. Halbert, and M. Kilian. </author> <title> The Trellis programming environment. </title> <editor> In N. Mey-rowitz, editor, </editor> <booktitle> Proc. ACM Conf. on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 91-102, </pages> <year> 1987. </year>
Reference-contexts: The approach is similar to ours but, as in Smalltalk and Eiffel, the stored information is obtained from program text rather than from the compiler. Trellis is a programming environment which supports programming in Trellis/Owl <ref> [11, 5] </ref>. The Trellis browser provides access to source code. Realizing that source code alone is inadequate for object oriented development, the designers of Trellis provided additional information to programmers, including information generated by the compiler. In this respect, Trellis is quite similar to Dee.
Reference: [12] <author> M. Penedo. </author> <title> Prototyping a project master data base for software engineering environments. </title> <editor> In P. Henderson, editor, </editor> <booktitle> Proc. ACM Software Engineering Symp. on Practical Software Development Environments, </booktitle> <pages> pages 1-11. </pages> <publisher> ACM, </publisher> <month> December </month> <year> 1986. </year> <note> Also published in SIGPLAN Notices, 22(1), </note> <month> January </month> <year> 1987. </year>
Reference-contexts: We decided against automatic compilation because the problem of circular dependencies does not arise frequently and we did not want the compiler to surprise programmers by performing unexpected compilations. 5 Related Work Database management systems have long been associated with software engineering <ref> [8, 12] </ref>. The databases described by these authors, however, are primarily concerned with project management. The CIDB in Dee contributes to project management, but its primary purpose is to store specific information needed by the compiler and by programmers.
Reference: [13] <author> J. Shilling and P. Sweeney. </author> <title> Three steps to views: Extending the object-oriented paradigm. </title> <editor> In N. Meyrowitz, editor, </editor> <booktitle> Proc. ACM Conf. on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 353-361, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: In this respect, Trellis is quite similar to Dee. Shilling and Sweeney propose that a class should be able to expose different interfaces to different clients <ref> [13] </ref>. Dee effectively provides four different interfaces. Which interface is used depends on the viewer, who may be the compiler or a programmer, and on the class relation, which may be descendant or client. Programmers need ways of discovering classes which might be useful to them.
References-found: 13

