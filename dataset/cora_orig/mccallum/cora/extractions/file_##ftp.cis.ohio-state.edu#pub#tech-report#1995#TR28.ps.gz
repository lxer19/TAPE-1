URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1995/TR28.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: E-mail: fujimura@cis.ohio-state.edu  
Phone: Phone: 614-292-6730 Fax: 614-292-2911  
Title: Visibility Computation on Reconfigurable Meshes  
Author: Kikuo Fujimura 
Keyword: visibility, hidden line and surface elimination, reconfigurable meshes, parallel algo rithms.  
Address: 2015 Neil Avenue, Columbus, Ohio 43210-1277  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Visibility problems are investigated using reconfigurable meshes. A set of algorithms are proposed on the architecture for visibility computation in two and three dimensions. We show that visibility of a total of n disjoint edges in the plane can be computed in O(1) time on an n fi n mesh. The result is optimal in the word model of VLSI. For the case that the edges are not disjoint, the problem is shown to be solvable in O(1) time by using a mesh of slightly larger size or in slightly more time on an n fi n mesh. We also present hidden line and surface elimination algorithms that run on an n fi n fi n mesh for a set of disjoint triangles in 3-space containing a total of n vertices in O(1) time and O(k) time, respectively, where 0 k &lt; n is an input-dependent constant. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Atallah, M. Cole, and M. Goodrich. </author> <title> Cascading divide-and-conquer: A technique for de-signing parallel algorithms. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(3) </volume> <pages> 499-532, </pages> <year> 1989. </year>
Reference-contexts: Besides object- space algorithms as above, many image-space algorithms for raster graphics are known [5]. The visibility problem for disjoint edges in the plane has been solved in O (log n) time on a PRAM model using O (n) processors <ref> [1, 2] </ref>. Hidden surface removal and its parallelization is studied in [27]. The organization of this paper is as follows. In the next section, we briefly review the reconfigurable mesh model and some basic operations on it.
Reference: [2] <author> P. Bertolazzi and S. Salza. </author> <title> A parallel algorithm for the visibility problem. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9 </volume> <pages> 11-14, </pages> <year> 1990. </year>
Reference-contexts: Besides object- space algorithms as above, many image-space algorithms for raster graphics are known [5]. The visibility problem for disjoint edges in the plane has been solved in O (log n) time on a PRAM model using O (n) processors <ref> [1, 2] </ref>. Hidden surface removal and its parallelization is studied in [27]. The organization of this paper is as follows. In the next section, we briefly review the reconfigurable mesh model and some basic operations on it.
Reference: [3] <author> V. Bokka, H. Gurla, S. Olariu, and J.L. Schwing. </author> <title> Constant time convexity problems on dense reconfigurable meshes. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <note> 1995. (to appear). </note>
Reference-contexts: Instructions consist of an arithmetic or boolean operation, broadcasting a data on a bus and receiving a data from a bus. Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry <ref> [3, 13, 15, 22] </ref>, image processing [4, 11, 12, 20], and computer vision [25]. See [21] for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28].
Reference: [4] <author> K. Chung and H. Lin. </author> <title> Hough transform on reconfigurable meshes. </title> <booktitle> Computer Vision and Image Understanding, </booktitle> <volume> 61(2) </volume> <pages> 278-284, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: Instructions consist of an arithmetic or boolean operation, broadcasting a data on a bus and receiving a data from a bus. Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry [3, 13, 15, 22], image processing <ref> [4, 11, 12, 20] </ref>, and computer vision [25]. See [21] for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28].
Reference: [5] <author> J. Foley, A. van Dam, S. Feiner, and J. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Hidden line and surface elimination problems can also be solved in a manner dependent on k, where k is the number of intersections between projected edges [6, 24, 8, 26]. Besides object- space algorithms as above, many image-space algorithms for raster graphics are known <ref> [5] </ref>. The visibility problem for disjoint edges in the plane has been solved in O (log n) time on a PRAM model using O (n) processors [1, 2]. Hidden surface removal and its parallelization is studied in [27]. The organization of this paper is as follows.
Reference: [6] <author> M.T. Goodrich. </author> <title> A polygonal approach to hidden-line and hidden-surface elimination. </title> <booktitle> CVGIP:Graphical Models and Image Processing, </booktitle> <volume> 54(1) </volume> <pages> 1-12, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Hidden line and surface elimination problems can also be solved in a manner dependent on k, where k is the number of intersections between projected edges <ref> [6, 24, 8, 26] </ref>. Besides object- space algorithms as above, many image-space algorithms for raster graphics are known [5]. The visibility problem for disjoint edges in the plane has been solved in O (log n) time on a PRAM model using O (n) processors [1, 2].
Reference: [7] <author> L. Guibas and M. Sharir. </author> <title> Combinatorics and algorithms of arrangements. </title> <editor> In J. Pack, editor, </editor> <booktitle> New Trends in Discrete and Computational Geometry, </booktitle> <pages> pages 10-36. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: The visibility problem in the plane can be solved by using a sequential computer in O (n log n) time <ref> [7] </ref> and hidden surface and line elimination problems can be solved in O (n 2 ) worst-case optimal time [19]. Hidden line and surface elimination problems can also be solved in a manner dependent on k, where k is the number of intersections between projected edges [6, 24, 8, 26]. <p> the complexity of the lower envelope of n curve segments any two of which may intersect at most in s points (i.e., the total number n LE of visible segments produced by n curve segments) is s+2 (n), where s (n) is the maximum length of an (n; s)-Davenport-Schinzel sequence <ref> [7] </ref>. In our case, s = 1 and it is known that 3 (n) = O (nff (n)), where ff (n) is the extremely slowly growing functional inverse of Ackermann's function. In fact, ff (n) &lt; 4 for most practical n. <p> Since ff (n) &lt; 4 for virtually all practical applications <ref> [7] </ref>, the above theorem indicates that for all practical values for n, visibility of n edges can be computed in O (1) time on an nfin R-mesh.
Reference: [8] <author> R.H. Guting and T. Ottmann. </author> <title> New algorithms for special cases of the hidden line elimnation problem. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 40 </volume> <pages> 188-204, </pages> <year> 1987. </year>
Reference-contexts: Hidden line and surface elimination problems can also be solved in a manner dependent on k, where k is the number of intersections between projected edges <ref> [6, 24, 8, 26] </ref>. Besides object- space algorithms as above, many image-space algorithms for raster graphics are known [5]. The visibility problem for disjoint edges in the plane has been solved in O (log n) time on a PRAM model using O (n) processors [1, 2].
Reference: [9] <author> W.B. Ligon III and U. Ramachandran. </author> <title> An empirical methodology for exploring reconfigurable architectures. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <pages> pages 323-337, </pages> <year> 1993. </year>
Reference-contexts: Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry [3, 13, 15, 22], image processing [4, 11, 12, 20], and computer vision [25]. See [21] for a survey. Experimental systems have also begun to be implemented <ref> [9, 18] </ref>. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28].
Reference: [10] <author> J. Jang and V. Prasanna. </author> <title> An optimal sorting algorithm on reconfigurable meshes. </title> <booktitle> In International Parallel Processing Symposium, </booktitle> <pages> pages 130-137. </pages> <publisher> IEEE Computer Society, Los Alamitos, </publisher> <address> CA, </address> <year> 1992. </year>
Reference-contexts: Another basic operation which we need is sorting of n numbers. Several researchers have discovered sorting algorithms which run in constant steps on an n fi n R-mesh <ref> [10, 14, 17, 23] </ref>. Some sorting algorithms are scalable, in the sense that n numbers can be sorted in a mesh of size smaller than n fi n. <p> Some sorting algorithms are scalable, in the sense that n numbers can be sorted in a mesh of size smaller than n fi n. Let us cite their result as below. 3 Theorem (Scalable sorting <ref> [10, 14] </ref>) Sorting n numbers can be performed in O (c) time on n c R-mesh for 1 c p In the above theorem, if we let m = n c , then n = cm and the constraint 1 c p be replaced by 1 c p cm, which in
Reference: [11] <author> J. Jenq and S. Sahni. </author> <title> Reconfigurable mesh algorithms for image shrinking, expanding, cluster-ing, and template matching. </title> <booktitle> In International Parallel Processing Symposium, </booktitle> <pages> pages 208-215, </pages> <year> 1991. </year>
Reference-contexts: Instructions consist of an arithmetic or boolean operation, broadcasting a data on a bus and receiving a data from a bus. Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry [3, 13, 15, 22], image processing <ref> [4, 11, 12, 20] </ref>, and computer vision [25]. See [21] for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28].
Reference: [12] <author> J. Jenq and S. Sahni. </author> <title> Reconfigurable mesh algorithms for the Hough transform. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 20(1) </volume> <pages> 69-77, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Instructions consist of an arithmetic or boolean operation, broadcasting a data on a bus and receiving a data from a bus. Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry [3, 13, 15, 22], image processing <ref> [4, 11, 12, 20] </ref>, and computer vision [25]. See [21] for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28].
Reference: [13] <author> T.H. Lai and M.J. Sheng. </author> <title> Constant time algorithms for computational geometry problems on a reconfigurable mesh. </title> <booktitle> In The Proceedings of the ISCA International Conference on Parallel and Distributed Computing and Systems, </booktitle> <year> 1993. </year>
Reference-contexts: Instructions consist of an arithmetic or boolean operation, broadcasting a data on a bus and receiving a data from a bus. Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry <ref> [3, 13, 15, 22] </ref>, image processing [4, 11, 12, 20], and computer vision [25]. See [21] for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28].
Reference: [14] <author> T.H. Lai and M.J. Sheng. </author> <title> An irregular decomposition scheme for designing fast sorting algorithms on reconfigurable meshes. </title> <type> Technical report, </type> <institution> Ohio State University, </institution> <year> 1994. </year> <month> 19 </month>
Reference-contexts: Another basic operation which we need is sorting of n numbers. Several researchers have discovered sorting algorithms which run in constant steps on an n fi n R-mesh <ref> [10, 14, 17, 23] </ref>. Some sorting algorithms are scalable, in the sense that n numbers can be sorted in a mesh of size smaller than n fi n. <p> Some sorting algorithms are scalable, in the sense that n numbers can be sorted in a mesh of size smaller than n fi n. Let us cite their result as below. 3 Theorem (Scalable sorting <ref> [10, 14] </ref>) Sorting n numbers can be performed in O (c) time on n c R-mesh for 1 c p In the above theorem, if we let m = n c , then n = cm and the constraint 1 c p be replaced by 1 c p cm, which in
Reference: [15] <author> T.H. Lai and M.J. Sheng. </author> <title> Computations on reconfigurable meshes: an irregular approach. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <note> 1995. (to appear). </note>
Reference-contexts: Instructions consist of an arithmetic or boolean operation, broadcasting a data on a bus and receiving a data from a bus. Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry <ref> [3, 13, 15, 22] </ref>, image processing [4, 11, 12, 20], and computer vision [25]. See [21] for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28]. <p> At this point, let us show how to compute the minimum of n numbers on an n fi c p n R-mesh to give a flavor of how algorithms are designed on a reconfigurable mesh. The following procedure FindMin adopted from <ref> [15] </ref> is often used in our visibility algorithms. Procedure FindMin Input: n numbers are initially stored in the topmost n processors each holding one number. Output: PE (0; 0) holds the minimum number. 1. Divide n numbers into n 1 1 c groups each containing n 1 c numbers. <p> In the above algorithm, all faces are assumed to be triangles. Note that a simple polygon with n edges can be triangulated in constant steps on an n fi n R-mesh <ref> [15] </ref>, which may be used as a preprossing step to this algorithm. The above algorithm is a so-called object-space hidden surface removal, whose output consists of polygons of floating-point precision. Procedure Midpoint-Probing can also be used for scanline- based image-space hidden surface elimination for a polyhedral scene.
Reference: [16] <author> T. Leighton. </author> <title> Tight bounds on the complexity of parallel sorting. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 344-354, </pages> <year> 1985. </year>
Reference-contexts: The sorting algorithm is optimal in the word model of VLSI, since the area time square (AT 2 ) lower bound for sorting n numbers is O (n 2 ) <ref> [16] </ref>. One other basic operation that we make use of is count, i.e., counting the number of bits that are 1, given n bits.
Reference: [17] <author> R. Lin, S. Olariu, J. Schwing, and J. Zhang. </author> <title> A vlsi-optimal constant time sorting on a reconfigurable mesh. </title> <booktitle> In Proceedings of Ninth European Workshop on Parallel Computing, </booktitle> <pages> pages 1-16, </pages> <address> Madrid, Spain, </address> <year> 1992. </year>
Reference-contexts: Another basic operation which we need is sorting of n numbers. Several researchers have discovered sorting algorithms which run in constant steps on an n fi n R-mesh <ref> [10, 14, 17, 23] </ref>. Some sorting algorithms are scalable, in the sense that n numbers can be sorted in a mesh of size smaller than n fi n.
Reference: [18] <author> M. Maresca, H.W. Li, and P. Baglietto. </author> <title> Hardware support for fast reconfigurability in processor arrays. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <pages> pages 282-289, </pages> <year> 1993. </year>
Reference-contexts: Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry [3, 13, 15, 22], image processing [4, 11, 12, 20], and computer vision [25]. See [21] for a survey. Experimental systems have also begun to be implemented <ref> [9, 18] </ref>. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28].
Reference: [19] <author> M. Mckenna. </author> <title> Worst-case optimal hidden-surface removal. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 6(1) </volume> <pages> 19-28, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: The visibility problem in the plane can be solved by using a sequential computer in O (n log n) time [7] and hidden surface and line elimination problems can be solved in O (n 2 ) worst-case optimal time <ref> [19] </ref>. Hidden line and surface elimination problems can also be solved in a manner dependent on k, where k is the number of intersections between projected edges [6, 24, 8, 26]. Besides object- space algorithms as above, many image-space algorithms for raster graphics are known [5]. <p> In fact, our hidden line elimination algorithm, visible segments are not ordered in a left-to-right manner (although they are ordered within a single edge). In other words, our algorithm divides the projection plane finer compared to the partition generated by a method using an arrangement for a sequential algorithm <ref> [19] </ref>. In a sense, procedure Hidden-Surface-Elimination outputs somewhat additional information together with visible areas of the input polygons, which may account for the higher complexity compared with that for hidden line elimination.
Reference: [20] <author> R. Miller, V.K. Prasanna Kumar, D. Reisis, and Q.F. Sout. </author> <title> Parallel computations on recon-figurable meshes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 42(6) </volume> <pages> 678-692, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Instructions consist of an arithmetic or boolean operation, broadcasting a data on a bus and receiving a data from a bus. Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry [3, 13, 15, 22], image processing <ref> [4, 11, 12, 20] </ref>, and computer vision [25]. See [21] for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28]. <p> Assign each group of n 1 c numbers to each n 1 1 c submesh. 2. In each submesh, find the min of n 1 c numbers by using the method in <ref> [20] </ref>. As a result, we have a minimum from each of the n 1 1 c groups. 3. Divide the resulting numbers into groups again each containing n 1 c numbers and find their minimums in each group.
Reference: [21] <author> R. Miller, V.K. Prasanna Kumar, D. I. Reisis, and Q.F. Stout. </author> <title> Efficient parallel algorithms for intermediate-level vision analysis on the reconfigurable mesh. </title> <editor> In V.K. Prasanna Kumar, editor, </editor> <booktitle> Parallel Architectures and Algorithms for Image Understanding, </booktitle> <pages> pages 185-207. </pages> <publisher> Academic Press, </publisher> <year> 1991. </year>
Reference-contexts: Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry [3, 13, 15, 22], image processing [4, 11, 12, 20], and computer vision [25]. See <ref> [21] </ref> for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28].
Reference: [22] <author> M. Nigam and S. Sahni. </author> <title> Computational geometry on a reconfigurable mesh. </title> <booktitle> In International Parallel Processing Symposium, </booktitle> <pages> pages 258-261, </pages> <year> 1994. </year>
Reference-contexts: Instructions consist of an arithmetic or boolean operation, broadcasting a data on a bus and receiving a data from a bus. Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry <ref> [3, 13, 15, 22] </ref>, image processing [4, 11, 12, 20], and computer vision [25]. See [21] for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28].
Reference: [23] <author> M. Nigam and S. Sahni. </author> <title> Sorting n numbers on n x n reconfigurable meshes with buses. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 23(1) </volume> <pages> 37-48, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Another basic operation which we need is sorting of n numbers. Several researchers have discovered sorting algorithms which run in constant steps on an n fi n R-mesh <ref> [10, 14, 17, 23] </ref>. Some sorting algorithms are scalable, in the sense that n numbers can be sorted in a mesh of size smaller than n fi n.
Reference: [24] <author> O. Nurmi. </author> <title> A fast line-sweep algorithm for hidden line elimination. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 466-472, </pages> <year> 1985. </year>
Reference-contexts: Hidden line and surface elimination problems can also be solved in a manner dependent on k, where k is the number of intersections between projected edges <ref> [6, 24, 8, 26] </ref>. Besides object- space algorithms as above, many image-space algorithms for raster graphics are known [5]. The visibility problem for disjoint edges in the plane has been solved in O (log n) time on a PRAM model using O (n) processors [1, 2].
Reference: [25] <author> S. Olariu, J.L. Schwing, and J. Zhang. </author> <title> Fast computer vision algorithms for reconfigurable meshes. </title> <booktitle> In International Parallel Processing Symposium, </booktitle> <pages> pages 258-261, </pages> <year> 1992. </year>
Reference-contexts: Instructions consist of an arithmetic or boolean operation, broadcasting a data on a bus and receiving a data from a bus. Reconfigurable meshes have been used to design efficient algorithms in various areas including computational geometry [3, 13, 15, 22], image processing [4, 11, 12, 20], and computer vision <ref> [25] </ref>. See [21] for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh [28].
Reference: [26] <author> M. Overmars and M. Sharir. </author> <title> A simple output-sensitive algorithm for hidden surface removal. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11 </volume> <pages> 1-11, </pages> <year> 1992. </year>
Reference-contexts: Hidden line and surface elimination problems can also be solved in a manner dependent on k, where k is the number of intersections between projected edges <ref> [6, 24, 8, 26] </ref>. Besides object- space algorithms as above, many image-space algorithms for raster graphics are known [5]. The visibility problem for disjoint edges in the plane has been solved in O (log n) time on a PRAM model using O (n) processors [1, 2].
Reference: [27] <author> J. Reif and S. Sen. </author> <title> An efficient output-sensitive hidden-surface removal algorithm and its parallelzation. </title> <booktitle> In 4th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 193-200, </pages> <year> 1988. </year>
Reference-contexts: The visibility problem for disjoint edges in the plane has been solved in O (log n) time on a PRAM model using O (n) processors [1, 2]. Hidden surface removal and its parallelization is studied in <ref> [27] </ref>. The organization of this paper is as follows. In the next section, we briefly review the reconfigurable mesh model and some basic operations on it. Visibility problems in the plane are discussed in Section 3 and algorithms for hidden-line and surface elimination are presented in Section 4.
Reference: [28] <author> A. Schuster and Y. Ben-Asher. </author> <title> Algorithms and optic implementation for reconfigurable networks. </title> <booktitle> In Proceedings of 5th Jerusalem Conference on Information Tecynology, </booktitle> <year> 1990. </year> <month> 20 </month>
Reference-contexts: See [21] for a survey. Experimental systems have also begun to be implemented [9, 18]. Reconfigurable meshes using optical fibers provide a reasonable support for constant time data transmission over buses in the mesh <ref> [28] </ref>. At this point, let us show how to compute the minimum of n numbers on an n fi c p n R-mesh to give a flavor of how algorithms are designed on a reconfigurable mesh. The following procedure FindMin adopted from [15] is often used in our visibility algorithms.
References-found: 28

