URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr93/tr93-024.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr93-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: fhanson,vijay,rkdg@cis.ufl.edu  
Title: An Architecture for Recoverable Interaction Between Applications and Active Databases (extended abstract)  
Author: Eric N. Hanson Roxana Dastur Vijay Ramaswamy 
Note: CIS-TR-93-024  
Date: July 22, 1993  
Address: Gainseville, FL 32611  
Affiliation: CIS Department University of Florida  
Abstract-found: 0
Intro-found: 1
Reference: [BHM90] <author> Philip A. Bernstein, Meichun Hsu, and Bruce Mann. </author> <title> Implementing recoverable requests using queues. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Managment of Data, </booktitle> <pages> pages 112-122, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The extended version of Ariel being developed avoids this problem by making event transmission depend on commit of the transaction raising the event. As part of the solution to these problems, recoverable queues <ref> [BHM90] </ref> are used to help communicate events from servers back to clients. Recoverable queues and other techniques have been used in commercial products for many years to ensure recoverable message delivery in distributed systems [GR93]. <p> Reconnecting is done 9 via a variation of the normal mechanism used for durable queues <ref> [BHM90] </ref>. If the database system fails and comes back up, then the normal recovery mechanism will restore all the durable queues to a transaction-consistent state. Once the durable queues have been recovered, applications can start taking events out of them. <p> This mechanism gives application programmers a convenient and reliable way to write programs that can be signaled when an event is raised by a rule action. A variation of Bernstein's recoverable queue architecture <ref> [BHM90] </ref> has been developed to support this event mechanism. These recoverable queues provide the infrastructure needed to ensure that event signals from the server to client applications will never be lost, nor processed prior to the commitment of the transaction that generated the event.
Reference: [GR93] <author> Jim Gray and Andreas Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: As part of the solution to these problems, recoverable queues [BHM90] are used to help communicate events from servers back to clients. Recoverable queues and other techniques have been used in commercial products for many years to ensure recoverable message delivery in distributed systems <ref> [GR93] </ref>. The goal of this work is to provide an integrated framework for recoverable event communication between an active DBMS and applications. At least one commercial product has an event mechanism similar in many ways to the one described here.
Reference: [Han92] <author> Eric N. Hanson. </author> <title> Rule condition testing and action execution in Ariel. </title> <booktitle> In Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 49-58, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction This paper describes the design of the event mechanism used to support reliable interaction between client applications and the Ariel active database system. Ariel is an active database system based on a production system model <ref> [HCKW90, Han92] </ref>. A new command called raise event is introduced. This command can be called from the action of a rule or can be submitted directly by a user or application. A companion of raise event is register for event. <p> Client application programs can be written in a high-level language (C or C++) with embedded query language statements written in Ariel's version of POSTQUEL <ref> [SR86, Han92] </ref>. A client application establishes communication with server processes through a multi-threaded data communications (DC) process. When a client will have multiple interactions with a server, a session is established between them and the client is given a server handle to identify the server temporarily dedicated to the client.
Reference: [HCKW90] <author> Eric N. Hanson, Moez Chaabouni, Chang-ho Kim, and Yu-wang Wang. </author> <title> A predicate matching algorithm for database rule systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 271-280, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: 1 Introduction This paper describes the design of the event mechanism used to support reliable interaction between client applications and the Ariel active database system. Ariel is an active database system based on a production system model <ref> [HCKW90, Han92] </ref>. A new command called raise event is introduced. This command can be called from the action of a rule or can be submitted directly by a user or application. A companion of raise event is register for event.
Reference: [MD89] <author> Dennis R. McCarthy and Umeshwar Dayal. </author> <title> The architecture of an active data base management system. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 215-224, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: However, at least in its original form, that product is susceptible to the LDO and DDO problems. In addition, a mechanism whereby applications could be signalled by rules was conceived as part of the HiPAC project, and a main-memory prototype was done <ref> [MD89] </ref>. However, issues related to recoverable communication between applications and an active DBMS were not considered as part of that work. Though extensions to Ariel described here can solve the LDO and DDO problems, it is not mandatory for applications to use the added mechanisms for solving these problems.
Reference: [SR86] <author> M. Stonebraker and L. Rowe. </author> <title> The design of POSTGRES. </title> <booktitle> In Proceedings of the 1986 ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1986. </year> <month> 10 </month>
Reference-contexts: Client application programs can be written in a high-level language (C or C++) with embedded query language statements written in Ariel's version of POSTQUEL <ref> [SR86, Han92] </ref>. A client application establishes communication with server processes through a multi-threaded data communications (DC) process. When a client will have multiple interactions with a server, a session is established between them and the client is given a server handle to identify the server temporarily dedicated to the client.
References-found: 6

