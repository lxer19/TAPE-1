URL: http://theory.lcs.mit.edu/~miccianc/papers/pow.ps
Refering-URL: http://theory.lcs.mit.edu/~cis/rom/rom.html
Root-URL: 
Title: Perfectly One-Way Probabilistic Hash Functions (Preliminary Version)  
Author: Ran Canetti Daniele Micciancio Omer Reingold 
Abstract: Probabilistic hash functions that hide all partial information on their input were recently introduced. This new cryptographic primitive can be regarded as a function that offers "perfect one-wayness", in the following sense: Having access to the function value on some input is equivalent to having access only to an oracle that answers "yes" if the correct input is queried, and answers "no" otherwise. Constructions of this primitive (originally called oracle hashing and here re-named perfectly one-way functions) were given based on certain strong variants of the Diffie-Hellman assumption. In this work we present several constructions of perfectly one-way functions; some constructions are based on claw-free permutation, and others are based on any one-way permutation. One of our constructions is simple and efficient to the point of being attractive from a practical point of view. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bellare and P. Rogaway, </author> <title> "Random oracles are practical: a paradigm for designing efficient protocols", </title> <booktitle> 1st ACM Conference on Computer and Communications Security, </booktitle> <year> 1993, </year> <pages> 62-73. </pages>
Reference-contexts: Applications of perfectly one-way hashing. First and foremost, perfect one-way hashing seems interesting in its own right. In addition, several applications are described in [3]. One is for transforming an encryption scheme designed by <ref> [1] </ref> in the idealized Random Oracle Model to a real-life encryption scheme. Another application is to constructing signature schemes where the signature by itself does not yield any information on the signed document.
Reference: [2] <author> M. Blum and S. Micali, </author> <title> "How to generate cryptographically strong sequences of pseudo-random bits" SIAM J. </title> <journal> on Computing, </journal> <volume> Vol. 13, </volume> <year> 1984, </year> <pages> pp. 850-864. </pages>
Reference: [3] <author> R. </author> <title> Canetti "Toward Realizing Random Oracles: Hash Functions that Hide All Partial Information" in Advances in Cryptology - CRYPTO97, </title> <booktitle> Lecture Notes in Computer Science 1294, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997, </year> <pages> pp. 455-469. </pages>
Reference-contexts: fact, it is often assumed in practice, without mathematical justification, that existing collision-resistant hash functions such as MD5 and SHA [14, 16] have this property.) In an attempt to capture this property, the following cryptographic primitive, called oracle hashing and re-named here as perfectly one-way hash functions was proposed in <ref> [3] </ref>. These are families of probabilistic functions; A function h in the family is chosen at random, fixed and let known for the entire computation. Yet, h incorporates additional intrinsic randomness, so that two applications of h on the same input yield different outputs. <p> Thus, when the domain is small (or when some inputs have non-negligible probability) then the input value may be recovered in full and semantic security is not maintained. Some formulations of perfect one-wayness are presented in <ref> [3] </ref>. Here we present yet another formulation, that is easy to work with, and implies the corresponding ones there. Several parameters emerge as salient when discussing perfect one-wayness. <p> Another parameter is the number of independently gener-ated hash values of the same input seen by the adversary. Other parameters are discussed within. At the end of the Introduction we describe some applications of perfectly one-way hash functions. In <ref> [3] </ref> a construction based on number-theoretic assumptions, specifically some variants of the the Diffie-Hellman Indistinguishability (or, Decisional Diffie-Hellman) assumption, is given. In addition, some simple constructions based on existing cryptographic hash functions are suggested. Yet, these constructions make strong assumptions on the hash functions in use. <p> That is, we obtain a construction (based on claw-free pairs) that withstands any input distribution where max x Prfxg &lt; 2 n * , and where the adversary may see any (unknown a-priori) polynomial number of hash values of the same input. We remark that in <ref> [3] </ref> another strong variant of perfect one-wayness, namely perfect one-wayness with respect to a-priori information, is defined. None of our constructions meets that definition. Coming up with a construction that meets this requirement based on general complexity assumptions is an interesting open problem. Applications of perfectly one-way hashing. <p> Coming up with a construction that meets this requirement based on general complexity assumptions is an interesting open problem. Applications of perfectly one-way hashing. First and foremost, perfect one-way hashing seems interesting in its own right. In addition, several applications are described in <ref> [3] </ref>. One is for transforming an encryption scheme designed by [1] in the idealized Random Oracle Model to a real-life encryption scheme. Another application is to constructing signature schemes where the signature by itself does not yield any information on the signed document. Another interesting application (not mentioned in [3]) is <p> in <ref> [3] </ref>. One is for transforming an encryption scheme designed by [1] in the idealized Random Oracle Model to a real-life encryption scheme. Another application is to constructing signature schemes where the signature by itself does not yield any information on the signed document. Another interesting application (not mentioned in [3]) is to constructing commitment schemes: To commit to a value m given a perfectly one-way hash function h, choose a (sufficiently long) random value and let the commitment be h (; m; r) (here `;' denotes concatenation, and r is the intrinsic randomness of h). <p> Unlike the case of encryption functions, here we do not know whether the above notions are all equivalent. We suspect they are not. Another, seemingly stronger notion is perfect one wayness with auxiliary information. This notion, addressed in <ref> [3] </ref>, is concerned with an adversary who may already have some auxiliary partial information on the input x, and makes sure that the hash value, h (x), does not give the adversary any extra information. We do not deal with that notion in this paper.
Reference: [4] <author> J.L. Carter and M.N. Wegman, </author> " <title> Universal classes of hash functions", </title> <journal> JCSS No. </journal> <volume> 18, </volume> <year> 1979, </year> <pages> 143-154. </pages>
Reference-contexts: This construction satisfies perfect one-wayness in a statistical sense; no computational assumptions are involved. Yet, verifiability (i.e., collision-resistance) is met only computationally. The construction is simple: Given a permutation chosen at random from a 2-universal permutation family on f0; 1g n (see <ref> [4] </ref>), and a regular, length reducing collision-resistant hash function `, let h (x; ) = h; `((x))i.
Reference: [5] <author> I.B. Damg-ard, </author> <title> "Collision free hash functions and public key signature schemes", </title> <booktitle> EUROCRYPT 87 (LNCS 304), </booktitle> <pages> pp. 203-216, </pages> <year> 1988. </year>
Reference-contexts: That is, all PPT adversaries are polynomial-size circuits (of course, the algorithms we propose are in uniform PPT). Notice that if collisions exist, a non-uniform adversary can have such collisions wired in its circuit. Therefore, our formalization requires the introduction of function families (see <ref> [5] </ref> for details).
Reference: [6] <author> I.B. Damg-ard and T.P. Pedersen and B. Pfitzmann, </author> <title> "On the Existence of Statistically Hiding Bit Commitment Schemes and Fail-Stop Signatures", Crypto '93, </title> <publisher> LNCS 773, Springer-Verlag, </publisher> <address> Berlin 1994, </address> <pages> 250-265. </pages>
Reference-contexts: Consequently, the constructions here imply alternatives to known non-interactive commitment schemes with unconditional secrecy, based on claw-free pairs. A commitment scheme with similar properties and based on somewhat weaker assumptions is given in <ref> [11, 6] </ref>. Yet another application is to key-exchange protocols, where one wants to publicize a hash of a secret key to verify that all legitimate parties have the same key while making sure that the hash value reveals no information to an adversary who does not know the key. Organization. <p> Remark 2 The POW hash function just defined (and the commitment scheme based on it, as described in the Intro duction) use the same basic ingredients used by the commitment scheme described in <ref> [11, 6] </ref>: collision-resistant hashing and 2-universal functions. However, the two construction are different both in the way these two tools are combined, and in the goal achieved by the resulting functions.
Reference: [7] <author> O. Gol-dreich, </author> <title> "Foundations of Cryptography (Fragments of a book)", </title> <institution> Weizmann Inst. of Science, </institution> <year> 1995. </year> <note> (Avaliable at http://theory.lcs.mit.edu/ ~ tcryptol/) </note>
Reference-contexts: Yet, these constructions make strong assumptions on the hash functions in use. In this work we construct perfectly one-way hash functions based on general complexity assumptions. A first construction assumes the existence of regular collision-resistant hash functions (which can in turn be constructed from claw-free permutation pairs <ref> [7] </ref>). This construction satisfies perfect one-wayness in a statistical sense; no computational assumptions are involved. Yet, verifiability (i.e., collision-resistance) is met only computationally. <p> It is attractive in being intuitive, and in being reminiscent of semantic security of encryption functions [10]. The other notion (Definition 3) is somewhat reminiscent of "security by indistinguishability" of encryption functions <ref> [10, 7] </ref>. It introduces a sequence of variants, where each variants implies the preceding ones. All of these variants imply semantic perfect one-wayness. The second notion is also easier to work with; we prove perfect one-wayness of our constructions using this notion.
Reference: [8] <author> O. Goldreich and S. Goldwasser and S. </author> <title> Micali "How to Construct Random Functions" Journal of the ACM, </title> <type> 33(4), </type> <year> 1984, </year> <pages> 792-807. </pages>
Reference-contexts: In both constructions collision-freeness holds in a statistical sense; that is, collisions do not exist, except for negligible probability.) From collision-free generators we construct collision-free pseudorandom function families (PRFs), generalizing the <ref> [8] </ref> construction. (Here a function family is collision-free if there almost never exist two functions f; g in the family and a value x such that f (x) = g (x).) Given a collision-free PRF family ff k g, we set h (x; r) = hr; f x (r)i. <p> This construction only assumes that one way permutations exist. In addition, this construction achieves collision resistance in a statistical (rather than a computational) sense. The main idea is to use the input x as the key to a pseudorandom function <ref> [8] </ref> and output the value of the function on a random point r. I.e., h (x) = hr; f x (r)i, where r is chosen uniformly at random and ff k g is a PRF ensemble. <p> Our construction of a PRF ensemble is a variant of the Goldreich-Goldwasser-Micali (GGM) pseudo random function <ref> [8] </ref>. In the GGM construction, a PRF family is built from a length doubling PRG G (x) = G 0 (x); G 1 (x). <p> Moreover, the probability (over the choice of tribe key t) that there exist k 6= k 0 and x such that f t k (x) = f t most 2 n . Proof:(sketch) The pseudo-randomness of F is proven in essentially the same way as in <ref> [8] </ref>. <p> Proof: The proof that fF (n) t g is a PRF tribe ensemble is essentially the same as in <ref> [8] </ref>. Let's prove collision freeness. We first bound the probability that F (n) one when the p i are (possibly constant) random polynomial of degree &lt; 6n.
Reference: [9] <author> O. Goldreich and L. Levin, </author> <title> "A Hard-Core Predicate to any One-Way Function", </title> <booktitle> 21st STOC, </booktitle> <year> 1989, </year> <pages> pp. 25-32. </pages>
Reference-contexts: However, it only works for uniformly distributed inputs. This construction uses a new primitive: families of pseudorandom generators that are also collision-free. We construct such pseudorandom generators given any one-way permutation, generalizing the <ref> [9] </ref> construction of hard-core predicates. (We present two such constructions. <p> A one-way function f is padded if f (x; r) = f 0 (x); r for all input jxj = jrj and some function f 0 . In <ref> [9] </ref>, the predicate B (x; r) = hx yi (i.e. the inner product mod 2 of x and r) is shown to be a hard-core for any padded one-way function f (x; r). <p> This construction gives the weaker notion of security for PRF tribe ensembles as discussed in Remark 3. I.e., in this construction the tribe key is also used for pseudo-randomness (and not just for collision freeness). Recall that the Goldreich-Levin hard-core predicate <ref> [9] </ref> is defined by B (x; r) = hx yi (i.e. the inner product mod 2 of x and r). Denote by B r the predicate B r (x) = B (x; r). <p> Define the predicate B p : f0; 1g 2n ! f0; 1g by B p (x; r) = p (x) r. Lemma 3 For any non-constant polynomial p, the predi-cate B p is hard-core for any padded one-way function g 0 (x; r) = g (x); r. Proof: In <ref> [9] </ref> it is proved that for p (x) = x, B p (x; r) = x r is hard-core for any padded one-way function g 0 .
Reference: [10] <author> S. Goldwasser and S. Micali, </author> <title> "Probabilistic encryption", </title> <journal> JCSS, </journal> <volume> Vol. 28, No 2, </volume> <year> 1984, </year> <pages> 270-299. </pages>
Reference-contexts: Intuitively, this means that the only way to gather any information on x given h (x) is by exhaustively searching the domain for a value x such that V (x; h (x)) = 1. We remark that perfect one-wayness is reminiscent of semantic security of encryption functions <ref> [10] </ref>: "whatever can be computed given the ciphertext can be computed from scratch". Indeed, when the input is taken uniformly from a large domain (or, more generally, when the min-entropy of the input distribution grows super-logarithmically) then the two notions are equivalent. <p> Here we present two alternative notions. One notion, called semantic perfect one-wayness (see Definition 2), formalizes in a straightforward way the intuitive concept presented in the Introduction. It is attractive in being intuitive, and in being reminiscent of semantic security of encryption functions <ref> [10] </ref>. The other notion (Definition 3) is somewhat reminiscent of "security by indistinguishability" of encryption functions [10, 7]. It introduces a sequence of variants, where each variants implies the preceding ones. All of these variants imply semantic perfect one-wayness. <p> It is attractive in being intuitive, and in being reminiscent of semantic security of encryption functions [10]. The other notion (Definition 3) is somewhat reminiscent of "security by indistinguishability" of encryption functions <ref> [10, 7] </ref>. It introduces a sequence of variants, where each variants implies the preceding ones. All of these variants imply semantic perfect one-wayness. The second notion is also easier to work with; we prove perfect one-wayness of our constructions using this notion.
Reference: [11] <author> S. Halevi and S. Micali, </author> <title> "Practical and Provably-Secure Commitment Schemes from Collision-Free Hashing", </title> <booktitle> in Advances in Cryptology - CRYPTO96, Lecture Notes in Computer Science 1109, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996, </year> <pages> pp. 201-215. </pages>
Reference-contexts: Consequently, the constructions here imply alternatives to known non-interactive commitment schemes with unconditional secrecy, based on claw-free pairs. A commitment scheme with similar properties and based on somewhat weaker assumptions is given in <ref> [11, 6] </ref>. Yet another application is to key-exchange protocols, where one wants to publicize a hash of a secret key to verify that all legitimate parties have the same key while making sure that the hash value reveals no information to an adversary who does not know the key. Organization. <p> Remark 2 The POW hash function just defined (and the commitment scheme based on it, as described in the Intro duction) use the same basic ingredients used by the commitment scheme described in <ref> [11, 6] </ref>: collision-resistant hashing and 2-universal functions. However, the two construction are different both in the way these two tools are combined, and in the goal achieved by the resulting functions.
Reference: [12] <author> R. Impagliazzo, L. Levin and M. Luby, </author> <title> "Pseudorandom number generation from one-way functions", </title> <booktitle> STOC, </booktitle> <year> 1989, </year> <pages> pp. 12-24 </pages>
Reference-contexts: 2-universal function family with the same domain and range R k can be defined as follows: F = : D ! R fi fi (x) = 1 (x); 2 (x); : : : ; k (x) for some 1 ; : : : k 2 F The following lemma (see <ref> [12] </ref>) asserts that 2-universal hash function families can be used to smooth the min-entropy of a random variable X. Lemma 1 (Leftover Hash Lemma) Let H be a 2-universal hash function family with domain D and range R and let X be a random variable over D.
Reference: [13] <author> M. Naor and M. Yung, </author> <title> "Universal one-way hash functions and their cryptographic applications," </title> <booktitle> STOC, </booktitle> <year> 1989. </year>
Reference-contexts: collision resistance, i.e., for any input x 2 f0; 1g n and any adversary A the probability (over the choice of k 2 K n ) that A (k; x) outputs y; c such that x 6= y and x; y; c is a collision is negligible in n. (See <ref> [13] </ref> for details.) All probabilistic hash functions H considered in this paper have public randomness, i.e., h k (x; r) = hr; h 0 k (x; r)i for 1 We assume that n can be inferred from any k 2 K n ; thus it need not be explicitly denoted in
Reference: [14] <author> R. Rivest, </author> <title> "The MD5 Message-Digest Algorithm," </title> <type> IETF RFC 1321, </type> <month> April </month> <year> 1992. </year>
Reference-contexts: property is very attractive in the context of cryptographic hashing, where one wants to make sure that the hash value yields as little information as possible on the preimage. (In fact, it is often assumed in practice, without mathematical justification, that existing collision-resistant hash functions such as MD5 and SHA <ref> [14, 16] </ref> have this property.) In an attempt to capture this property, the following cryptographic primitive, called oracle hashing and re-named here as perfectly one-way hash functions was proposed in [3].
Reference: [15] <author> A. Yao, </author> <title> "Theory and Applications of Trapdoor Functions", </title> <booktitle> FOCS, </booktitle> <year> 1982, </year> <pages> pp. 80-91. </pages>
Reference: [16] <editor> FIPS 180-1. </editor> <title> "Secure Hash Standard," Federal Information Processing Standard (FIPS), </title> <type> Publication 180-1, </type> <institution> National Institute of Standards and Technology, US Department of Commerce, </institution> <address> Washington D.C., </address> <month> April </month> <year> 1995. </year>
Reference-contexts: property is very attractive in the context of cryptographic hashing, where one wants to make sure that the hash value yields as little information as possible on the preimage. (In fact, it is often assumed in practice, without mathematical justification, that existing collision-resistant hash functions such as MD5 and SHA <ref> [14, 16] </ref> have this property.) In an attempt to capture this property, the following cryptographic primitive, called oracle hashing and re-named here as perfectly one-way hash functions was proposed in [3].
References-found: 16

