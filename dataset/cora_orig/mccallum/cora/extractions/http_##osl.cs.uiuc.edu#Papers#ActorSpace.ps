URL: http://osl.cs.uiuc.edu/Papers/ActorSpace.ps
Refering-URL: http://osl.cs.uiuc.edu/Papers/Language.html
Root-URL: http://www.cs.uiuc.edu
Email: Email: chris@iesd.auc.dk  Email: agha@cs.uiuc.edu  
Title: Open Heterogeneous Computing in ActorSpace  
Author: Christian J. Callsen Gul Agha 
Address: Frederik Bajers Vej 7E  9220 Aalborg st, DENMARK  1304 W. Springfield Avenue  Urbana, IL 61801, USA  
Affiliation: Department of Math. and Comp. Sci.  Aalborg University  Department of Comp. Sci.  University of Illinois at U.-C.  
Abstract: A number of efforts in heterogeneous computing involve the development of basic architecture independent communication primitives. We present a new programming paradigm, called ActorSpace, which provides a new communication model based on destination patterns. An actorspace is a computationally passive container of actors which acts as a context for matching patterns. Patterns are matched against listed attributes of actors and actorspaces that are visible in the actorspace. Both visibility and attributes are dynamic. Messages may be sent to one or all members of a group defined by a pattern. The paradigm provides powerful support for component-based construction of heterogeneous scalable distributed applications. In particular, it supports open interfaces to servers and pattern-directed access to software repositories. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> The MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: Broadcasting provides a flexible way of replicating a service, where a client broadcasts a request to a group of servers, and collects one or more responses using 2 Related Work 6 some voting criteria [22]. ActorSpace builds on a concurrent object-oriented programming paradigm (COOP). COOP systems, such as Actors <ref> [1] </ref>, Emerald [29], Orca [10] and Concurrent Aggregates [20] support an object-based programming model, where objects may invoke methods in other objects by giving a reference to the object and parameters for the invocation. As in Ac-torSpace, the location of the object and its representation is transparent. <p> Note that membership and containment relationships in this model correspond to a strict hierarchy. 3 Actors The Actor model was first proposed by Hewitt [26], and later developed by Agha <ref> [1, 3] </ref>. The model can be thought of as providing an abstract representation of multi-computer 3 Actors 8 architectures. An actor 1 is an active object which interacts with other actors using asynchronous point-to-point message passing.
Reference: [2] <author> G. Agha, P. Wegner, and A. Yonezawa. </author> <title> Research Directions in Object-Oriented Programming. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachussetts, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: On the other hand, ActorSpace also supports open interfaces that allow pattern-based access between objects which have no reference to each other. An overview of recent Actor research by the authors' group may be found in [5]. A survey of COOP systems appears in <ref> [2] </ref>. Linda [16] provides process interaction through a globally shared memory with associative operations on the contents. Thus information is available so that anyone can potentially access it.
Reference: [3] <author> Gul Agha. </author> <title> Supporting Multiparadigm Programming on Actor Architectures. </title> <editor> In E. Odjik, M. Rem, and J.-C. Syre, editors, </editor> <booktitle> PARLE '89, </booktitle> <volume> volume 2, LNCS 366, </volume> <pages> pages 1-19. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1989. </year> <note> References 30 </note>
Reference-contexts: Note that membership and containment relationships in this model correspond to a strict hierarchy. 3 Actors The Actor model was first proposed by Hewitt [26], and later developed by Agha <ref> [1, 3] </ref>. The model can be thought of as providing an abstract representation of multi-computer 3 Actors 8 architectures. An actor 1 is an active object which interacts with other actors using asynchronous point-to-point message passing.
Reference: [4] <author> Gul Agha and Christian J. Callsen. ActorSpaces: </author> <title> An Open Distributed Programming Paradigm. </title> <booktitle> In Proceedings of the 4th ACM Symposium on Principles & Practice of Parallel Programming, </booktitle> <pages> pages 23-32, </pages> <month> May </month> <year> 1993. </year> <note> Appears as ACM SIGPLAN Notices 28(7), </note> <month> July </month> <year> 1993. </year>
Reference-contexts: The authors would like to thank Svend Frtlund, WooYoung Kim, Rajendra Panwar, Anna Patterson, Daniel Sturman and Carolyn Talcott for helpful comments and stimulating discussions on the structure and problems of ActorSpace, as well as critical reading of the manuscript. This paper extends and subsumes <ref> [4] </ref>.
Reference: [5] <author> Gul Agha, Svend Frtlund, WooYoung Kim, Rajendra Panwar, Anna Patterson, and Daniel Sturman. </author> <title> Abstraction and Modularity Mechanisms for Concurrent Computing. </title> <journal> IEEE Parallel and Distributed Technology, </journal> <volume> 1(2) </volume> <pages> 3-14, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: As in Ac-torSpace, the location of the object and its representation is transparent. On the other hand, ActorSpace also supports open interfaces that allow pattern-based access between objects which have no reference to each other. An overview of recent Actor research by the authors' group may be found in <ref> [5] </ref>. A survey of COOP systems appears in [2]. Linda [16] provides process interaction through a globally shared memory with associative operations on the contents. Thus information is available so that anyone can potentially access it.
Reference: [6] <author> Gul Agha and WooYoung Kim. </author> <title> Compilation of a Highly Parallel Actor-Based Language. </title> <editor> In U. Banerjee, D. Gelernter, A. Nicolau, and D. Padua, editors, </editor> <booktitle> Proceedings of the Fifth Workshop on Languages and Compilers for Parallel Computing, </booktitle> <publisher> Yale University Technical Report YALEU/DCS/RR-915, </publisher> <pages> pages 1-12, </pages> <address> New Haven, CT, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Note that RPC-style message protocol is not primitive in Actors, however, such message-passing may be transformed to asynchronous message-passing <ref> [6] </ref>. These three methods are architecture independent, and do not assume any structure of the message that is to be sent or received. This class is used for the message passing between the coordinators, and could in principle also be used between the actors and the coordinator.
Reference: [7] <author> Gul Agha, Ian Mason, Scott Smith, and Carolyn Talcott. </author> <title> Towards a Theory of Actor Computation. </title> <booktitle> In Proceedings of the Third International Conference on Concurrency Theory (CONCUR '92), </booktitle> <volume> LNCS 630, </volume> <pages> pages 565-579, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: The mail address allows an actor to be referenced in a location transparent way. An actor's acquaintances are the mail addresses of actors it knows. An actor can only send messages to its acquaintances, an important property which allows local reasoning about the safety property of actor systems <ref> [7] </ref>. Furthermore, communication in Actors is secure: for example, it is not possible to "steal" messages by creating an actor with the same name as an existing actor.
Reference: [8] <author> Gul Agha and Rajendra Panwar. </author> <title> An Actor-Based Framework for Heterogenous Computing. </title> <booktitle> In Workshop on Heterogeneous Processing, </booktitle> <pages> pages 35-42. </pages> <publisher> IEEE, IEEE Computer Society Press, </publisher> <month> March </month> <year> 1992. </year>
Reference: [9] <author> Ozalp Babaoglu. </author> <booktitle> Report on the 4th ACM SIGOPS European Workshop on Fault Tolerance Support in Distributed Systems. ACM Operating Systems Review, </booktitle> <volume> 25(1) </volume> <pages> 19-43, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: In operating systems research, the notion of process groups has been introduced in several systems, among them the V Distributed System [19] and the ISIS Toolkit [38]. Broadcasting has also been discussed as a way of achieving fault-tolerance in operating systems <ref> [9] </ref>. Broadcasting provides a flexible way of replicating a service, where a client broadcasts a request to a group of servers, and collects one or more responses using 2 Related Work 6 some voting criteria [22]. ActorSpace builds on a concurrent object-oriented programming paradigm (COOP).
Reference: [10] <author> Henri E. Bal, M. Frans Kaashoek, and Andrew S. Tanenbaum. Orca: </author> <title> A Language For Parallel Programming of Distributed Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(3) </volume> <pages> 190-205, </pages> <month> March </month> <year> 1992. </year> <note> References 31 </note>
Reference-contexts: ActorSpace builds on a concurrent object-oriented programming paradigm (COOP). COOP systems, such as Actors [1], Emerald [29], Orca <ref> [10] </ref> and Concurrent Aggregates [20] support an object-based programming model, where objects may invoke methods in other objects by giving a reference to the object and parameters for the invocation. As in Ac-torSpace, the location of the object and its representation is transparent.
Reference: [11] <author> Edward Balkovich, Steven Lerman, and Richard P. Parmelee. </author> <title> Computing in Higher Education: </title> <journal> The Athena Experience. Communications of the ACM, </journal> <volume> 28(11) </volume> <pages> 1214-1224, </pages> <month> November </month> <year> 1985. </year>
Reference-contexts: Specifically, by trying to enforce a high-level uniformity in software while allowing differences in hardware, architectural differences between individual nodes are masked. MIT's Project Athena <ref> [11] </ref> supports heterogeneous systems at the application level, by trying to standardize the appearance of applications at the interface level.
Reference: [12] <author> Brian N. Bershad, Dennis T. Ching, Edward D. Lazowska, Jan Sanislo, and Michael Schwartz. </author> <title> A Remote Procedure Call Facility for Interconnecting Heterogenous Computer Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(8):880-894, </volume> <month> August </month> <year> 1987. </year>
Reference-contexts: THERE supports multiple standards for data 2 Related Work 5 representation, transport- and control prototols, instead of legislating a single standard. Other proposals use a more low-level approach. HRPC <ref> [12] </ref> being developed at the University of Washington provides remote procedure calls (RPC) to machines with different architectures. The Agora System [14] offers shared memory for coordination between and writing of parallel applications in multiple programming languages. <p> The design builds on the work done on Heterogeneous Remote Procedure Calls (HRPC) <ref> [12] </ref>. HRPC uses three components at call-time: a transport protocol, a control protocol, and a data representation format.
Reference: [13] <author> Kenneth Birman, Andre Schiper, and Pat Stephenson. </author> <title> Lightweight Causal and Atomic Group Multicast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Initial work was done on extending RPC to support replication [22], on broadcasting as a programming paradigm [25], and on protocols for reliable broadcasting [18]. Later work has focused on protocol design [30, 34] and on improving and supporting reliability of broadcasting protocols <ref> [24, 13] </ref>. In operating systems research, the notion of process groups has been introduced in several systems, among them the V Distributed System [19] and the ISIS Toolkit [38]. Broadcasting has also been discussed as a way of achieving fault-tolerance in operating systems [9]. <p> Thus the broadcast primitive greatly simplifies expressing many applications. We assume that delivery of normal and broadcast messages is only finitely delayed, but that the message order is not necessarily preserved; thus, unlike other broadcast implementations such as the ISIS Toolkit <ref> [13] </ref>, we do not guarantee a global or partial order on broadcast messages. Broadcasts may be received by two actors in a different order and point to point messages may be interleaved between two broadcasts. <p> However, better performance may be obtained by not guaranteeing any order on broadcast messages, when such an ordering is not necessary or desirable <ref> [13, 38] </ref>, which is why we do not enforce any ordering of broadcasts. 4.4 Visibility in ActorSpace When an actor or an actorspace is created, it is not automatically placed in an actorspace; thus it may not be subject to pattern matching on its attributes.
Reference: [14] <author> Roberto Bisiani and Alessandro Forin. </author> <title> Architectural Support for Multilanguage Parallel Programming on Heterogenous Systems. </title> <journal> ACM Operating Systems Review, </journal> <volume> 21(10) </volume> <pages> 21-30, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: Other proposals use a more low-level approach. HRPC [12] being developed at the University of Washington provides remote procedure calls (RPC) to machines with different architectures. The Agora System <ref> [14] </ref> offers shared memory for coordination between and writing of parallel applications in multiple programming languages. ARCADE [21] offers shared memory with operations to transmit memory blocks to other machines and sharing of blocks with other processes.
Reference: [15] <author> Christian J. Callsen. </author> <title> Open Heterogeneous Distributed Computing. </title> <type> PhD thesis, </type> <institution> Aalborg University, </institution> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: However, we have not provided specific structure or mechanisms for capabilities. Current research includes moving the ActorSpace prototype implementation to several architectures, to evaluate the prototype design and the programming paradigm on a larger scale. A formal semantic definition of ActorSpace has been developed and will appear in <ref> [15] </ref>. However, a theory of ActorSpace which allows abstract equational reasoning about actorspaces remains to be developed.
Reference: [16] <author> Nicholas J. Carriero and David Gelernter. </author> <title> How to Write Parallel Programs: A Guide to the Perplexed. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 323-357, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: On the other hand, ActorSpace also supports open interfaces that allow pattern-based access between objects which have no reference to each other. An overview of recent Actor research by the authors' group may be found in [5]. A survey of COOP systems appears in [2]. Linda <ref> [16] </ref> provides process interaction through a globally shared memory with associative operations on the contents. Thus information is available so that anyone can potentially access it. <p> The behavior of tuple spaces may be customized, as tuple spaces define policies which allow customization of matching rules, conditions for automatic forwarding to other tuple spaces, blocking of other processes and exception handling for failures in tuple operations. Note that in Linda and its variants <ref> [16, 28, 33] </ref>, processes must actively poll a tuple space and specify the type of tuple they want to retrieve. This model results in a number of significant differences with the ActorSpace paradigm.
Reference: [17] <author> Nicholas J. Carriero, David Gelernter, and T. G. Mattson. </author> <title> Linda in Heterogenous Computing Environments. </title> <booktitle> In Workshop on Heterogeneous Processing, </booktitle> <pages> pages 43-46. </pages> <publisher> IEEE, IEEE Computer Society Press, </publisher> <month> March </month> <year> 1992. </year>
Reference: [18] <author> Jo-Mei Chang and N. F. Maxemchuk. </author> <title> Reliable Broadcast Protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: Broadcasting has been studied for some time now. Initial work was done on extending RPC to support replication [22], on broadcasting as a programming paradigm [25], and on protocols for reliable broadcasting <ref> [18] </ref>. Later work has focused on protocol design [30, 34] and on improving and supporting reliability of broadcasting protocols [24, 13]. In operating systems research, the notion of process groups has been introduced in several systems, among them the V Distributed System [19] and the ISIS Toolkit [38]. <p> The 6 Design and Implementation of a Prototype 24 broadcasting between the coordinators could, for instance, be done using either the Amoeba broadcast protocol [30] or a centralized broadcaster and sequencer <ref> [18] </ref>. 6.2 The Coordinator A coordinator is the main component of the run-time support for an actorspace. A coordinator has two main tasks: storing information about the current "state" of an actorspace, and handling request messages from local actors and other coordinators.
Reference: [19] <author> David R. Cheriton and Willy Zwaenepoel. </author> <title> Distributed Process Groups in the V Kernel. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(2) </volume> <pages> 77-107, </pages> <month> May </month> <year> 1985. </year> <note> References 32 </note>
Reference-contexts: Later work has focused on protocol design [30, 34] and on improving and supporting reliability of broadcasting protocols [24, 13]. In operating systems research, the notion of process groups has been introduced in several systems, among them the V Distributed System <ref> [19] </ref> and the ISIS Toolkit [38]. Broadcasting has also been discussed as a way of achieving fault-tolerance in operating systems [9].
Reference: [20] <author> Andrew A. Chien and William J. Dally. </author> <title> Concurrent Aggregates. </title> <booktitle> In Proceedings of the Second ACM Symposium on Principles & Practice of Parallel Programming, </booktitle> <pages> pages 187-196, </pages> <month> March </month> <year> 1990. </year> <note> Appears as ACM SIGPLAN Notices 25(3), </note> <month> March </month> <year> 1990. </year>
Reference-contexts: ActorSpace builds on a concurrent object-oriented programming paradigm (COOP). COOP systems, such as Actors [1], Emerald [29], Orca [10] and Concurrent Aggregates <ref> [20] </ref> support an object-based programming model, where objects may invoke methods in other objects by giving a reference to the object and parameters for the invocation. As in Ac-torSpace, the location of the object and its representation is transparent. <p> In fact, the Sprites model and Linda are remarkably close: the main difference between them is that Linda allows communication objects (tuples) to be removed from the tuple space whereas Sprites support only a monotonically increasing knowledge base [31]. Concurrent Aggregates <ref> [20] </ref> offers another communication model based on groups; clients name a group of actors when sending a message, and one of these actors will actually receive the message. Furthermore, Concurrent Aggregates supports nesting of aggregates, so that an entire group of aggregates may be targeted for a message.
Reference: [21] <author> David L. Cohn, William P. Delaney, and Karen M. Tracey. ARCADE: </author> <title> A Platform for Heterogeneous Distributed Operating Systems. </title> <booktitle> In Usenix Workshop on Experiences with Distributed and Multiprocessor Systems, </booktitle> <pages> pages 373-390, </pages> <address> Fort Lauderdale, FL, 1989. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: Other proposals use a more low-level approach. HRPC [12] being developed at the University of Washington provides remote procedure calls (RPC) to machines with different architectures. The Agora System [14] offers shared memory for coordination between and writing of parallel applications in multiple programming languages. ARCADE <ref> [21] </ref> offers shared memory with operations to transmit memory blocks to other machines and sharing of blocks with other processes. The Parallel Virtual Machine (PVM) [39] has been used to build a heterogeneous system called Heterogeneous Network Computing Environment, or HeNCE [23].
Reference: [22] <author> Eric C. Cooper. </author> <title> Replicated Procedure Call. </title> <booktitle> In Proceedings of the Third Annual ACM Symposium on Principles of Distributed Computing Conference, </booktitle> <pages> pages 220-232. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1984. </year>
Reference-contexts: The ActorSpace coordination primitives we will develop include broadcasting messages to groups of receivers, also known as multicasting. Broadcasting has been studied for some time now. Initial work was done on extending RPC to support replication <ref> [22] </ref>, on broadcasting as a programming paradigm [25], and on protocols for reliable broadcasting [18]. Later work has focused on protocol design [30, 34] and on improving and supporting reliability of broadcasting protocols [24, 13]. <p> Broadcasting has also been discussed as a way of achieving fault-tolerance in operating systems [9]. Broadcasting provides a flexible way of replicating a service, where a client broadcasts a request to a group of servers, and collects one or more responses using 2 Related Work 6 some voting criteria <ref> [22] </ref>. ActorSpace builds on a concurrent object-oriented programming paradigm (COOP). COOP systems, such as Actors [1], Emerald [29], Orca [10] and Concurrent Aggregates [20] support an object-based programming model, where objects may invoke methods in other objects by giving a reference to the object and parameters for the invocation.
Reference: [23] <author> Jack Dongarra, G. A. Geist, Robert Manchek, and V. S. Sunderam. </author> <title> Integrated PVM Framework Supports Heterogeneous Network Computing. </title> <journal> Computers in Physics, </journal> <volume> 7(2) </volume> <pages> 166-175, </pages> <year> 1993. </year>
Reference-contexts: ARCADE [21] offers shared memory with operations to transmit memory blocks to other machines and sharing of blocks with other processes. The Parallel Virtual Machine (PVM) [39] has been used to build a heterogeneous system called Heterogeneous Network Computing Environment, or HeNCE <ref> [23] </ref>. HeNCE is a tool for developing parallel applications with PVM, which is the main task of PVM.
Reference: [24] <author> Hector Garcia-Molina and Annemarie Spauster. </author> <title> Ordered and Reliable Multicast Communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 242-271, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Initial work was done on extending RPC to support replication [22], on broadcasting as a programming paradigm [25], and on protocols for reliable broadcasting [18]. Later work has focused on protocol design [30, 34] and on improving and supporting reliability of broadcasting protocols <ref> [24, 13] </ref>. In operating systems research, the notion of process groups has been introduced in several systems, among them the V Distributed System [19] and the ISIS Toolkit [38]. Broadcasting has also been discussed as a way of achieving fault-tolerance in operating systems [9].
Reference: [25] <author> Narain H. Gehani. </author> <title> Broadcasting Sequential Processes (BSP). </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(4):343-351, </volume> <month> July </month> <year> 1984. </year>
Reference-contexts: The ActorSpace coordination primitives we will develop include broadcasting messages to groups of receivers, also known as multicasting. Broadcasting has been studied for some time now. Initial work was done on extending RPC to support replication [22], on broadcasting as a programming paradigm <ref> [25] </ref>, and on protocols for reliable broadcasting [18]. Later work has focused on protocol design [30, 34] and on improving and supporting reliability of broadcasting protocols [24, 13].
Reference: [26] <author> Carl Hewitt. </author> <title> Viewing Control Structures as Patterns of Passing Messages. </title> <journal> Journal of Artificial Intelligence, </journal> <volume> 8(3) </volume> <pages> 323-364, </pages> <year> 1977. </year>
Reference-contexts: Furthermore, Concurrent Aggregates supports nesting of aggregates, so that an entire group of aggregates may be targeted for a message. Note that membership and containment relationships in this model correspond to a strict hierarchy. 3 Actors The Actor model was first proposed by Hewitt <ref> [26] </ref>, and later developed by Agha [1, 3]. The model can be thought of as providing an abstract representation of multi-computer 3 Actors 8 architectures. An actor 1 is an active object which interacts with other actors using asynchronous point-to-point message passing.
Reference: [27] <author> Chris Houck and Gul Agha. HAL: </author> <title> A High-level Actor Language and Its Distributed Implementation. </title> <booktitle> In Proceedings of th 21st International Conference on Parallel Processing (ICPP '92), </booktitle> <volume> volume II, </volume> <pages> pages 158-165, </pages> <address> St. Charles, IL, </address> <month> August </month> <year> 1992. </year> <note> References 33 </note>
Reference-contexts: is desired, it can be obtained by sending all messages that are to be broadcast to a special actor whose sole purpose is to receive messages from group members, and then broadcast these serially to the group using some agreed upon protocol (cf. sequenced send in the actor language Hal <ref> [27] </ref>).
Reference: [28] <author> Suresh Jagannathan. </author> <title> Customization of First-Class Tuple-Spaces in a Higher-Order Language. </title> <editor> In E. H. L. Arts, J. van Leeuwen, and M. Rem, editors, </editor> <booktitle> PARLE '91, </booktitle> <volume> volume 2, LNCS 506, </volume> <pages> pages 254-276. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: Our goal is to capture the open access similar to Linda, where processes are decoupled from each other, but at the same time offer locality to provide more efficient, secure communication. Variations of the Linda model include Jagannathan's first-class tuple spaces embedded in Scheme <ref> [28] </ref>. In Jagannathan's model, tuple spaces are first class objects, i.e., tuple spaces may be created dynamically, passed as arguments or returned as results from functions, and used in tuples or data structures. <p> The behavior of tuple spaces may be customized, as tuple spaces define policies which allow customization of matching rules, conditions for automatic forwarding to other tuple spaces, blocking of other processes and exception handling for failures in tuple operations. Note that in Linda and its variants <ref> [16, 28, 33] </ref>, processes must actively poll a tuple space and specify the type of tuple they want to retrieve. This model results in a number of significant differences with the ActorSpace paradigm.
Reference: [29] <author> Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: ActorSpace builds on a concurrent object-oriented programming paradigm (COOP). COOP systems, such as Actors [1], Emerald <ref> [29] </ref>, Orca [10] and Concurrent Aggregates [20] support an object-based programming model, where objects may invoke methods in other objects by giving a reference to the object and parameters for the invocation. As in Ac-torSpace, the location of the object and its representation is transparent.
Reference: [30] <author> M. Frans Kaashoek, Andrew S. Tanenbaum, Susan Flynn Hummel, and Henri E. Bal. </author> <title> An Efficient Reliable Broadcast Protocol. </title> <journal> ACM Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Broadcasting has been studied for some time now. Initial work was done on extending RPC to support replication [22], on broadcasting as a programming paradigm [25], and on protocols for reliable broadcasting [18]. Later work has focused on protocol design <ref> [30, 34] </ref> and on improving and supporting reliability of broadcasting protocols [24, 13]. In operating systems research, the notion of process groups has been introduced in several systems, among them the V Distributed System [19] and the ISIS Toolkit [38]. <p> In order to maintain a coherent view of ActorSpace, an ordering on these coordinator broadcast messages is necessary (however not for performing the broadcast primitive). The 6 Design and Implementation of a Prototype 24 broadcasting between the coordinators could, for instance, be done using either the Amoeba broadcast protocol <ref> [30] </ref> or a centralized broadcaster and sequencer [18]. 6.2 The Coordinator A coordinator is the main component of the run-time support for an actorspace. A coordinator has two main tasks: storing information about the current "state" of an actorspace, and handling request messages from local actors and other coordinators.
Reference: [31] <author> Kenneth M. Kahn and Mark S. Miller. </author> <title> Response to: "Linda in Context", Carriero and Gelernter, </title> <journal> Commun. </journal> <volume> ACM 32 (4):444-458, Apr. 1989. Communications of the ACM, 32(10) </volume> <pages> 1253-1255, </pages> October 1989. 
Reference-contexts: In fact, the Sprites model and Linda are remarkably close: the main difference between them is that Linda allows communication objects (tuples) to be removed from the tuple space whereas Sprites support only a monotonically increasing knowledge base <ref> [31] </ref>. Concurrent Aggregates [20] offers another communication model based on groups; clients name a group of actors when sending a message, and one of these actors will actually receive the message.
Reference: [32] <author> William A. Kornfeld and Carl Hewitt. </author> <title> The Scientific Community Metaphor. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 11(1) </volume> <pages> 24-33, </pages> <month> January </month> <year> 1981. </year>
Reference-contexts: Some industrial experience using actors as a high-level distributed shell language suggests that such dynamic linking capability is extremely useful (e.g. [40]). An earlier proposal using pattern based data storage and retrieval was the Scientific Community Metaphor <ref> [32] </ref>. The Scientific Community Metaphor proposed problem-solving by pattern based access to a shared knowledge base by a community of computational agents, called Sprites. <p> Linda does not allow the sender to determine persistence instead, any potential recipient may remove any tuple. In contrast, Sprites <ref> [32] </ref> do not allow any message to be removed from the database. A more flexible solution would allow messages with different behaviors: persistence in some potentially bounded time, use once only (linearity), persistent until explicitly removed by a potential recipient, etc.
Reference: [33] <author> Satoshi Matsuoka and Satoru Kawai. </author> <title> Using Tuple Space Communication in Distributed Object-Oriented Languages. </title> <booktitle> In OOPSLA '88 Conference Proceedings, </booktitle> <pages> pages 276-284, </pages> <month> November </month> <year> 1988. </year> <note> Appears as ACM SIGPLAN Notices 23(11), </note> <month> November </month> <year> 1988. </year>
Reference-contexts: The behavior of tuple spaces may be customized, as tuple spaces define policies which allow customization of matching rules, conditions for automatic forwarding to other tuple spaces, blocking of other processes and exception handling for failures in tuple operations. Note that in Linda and its variants <ref> [16, 28, 33] </ref>, processes must actively poll a tuple space and specify the type of tuple they want to retrieve. This model results in a number of significant differences with the ActorSpace paradigm.
Reference: [34] <author> P. M. Melliar-Smith, Louise E. Moser, and Vivek Agrawala. </author> <title> Broadcast Protocols for Distributed Systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 17-25, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Broadcasting has been studied for some time now. Initial work was done on extending RPC to support replication [22], on broadcasting as a programming paradigm [25], and on protocols for reliable broadcasting [18]. Later work has focused on protocol design <ref> [30, 34] </ref> and on improving and supporting reliability of broadcasting protocols [24, 13]. In operating systems research, the notion of process groups has been introduced in several systems, among them the V Distributed System [19] and the ISIS Toolkit [38].
Reference: [35] <author> James H. Morris, Mahadev Satyanarayanan, Michael H. Conner, John H. Howard, David S. H. Rosenthal, and F. Donelson Smith. Andrew: </author> <title> A Distributed Personal Computing Environment. </title> <journal> Communications of the ACM, </journal> <volume> 29(3) </volume> <pages> 184-201, </pages> <month> March </month> <year> 1986. </year> <note> Figures 34 </note>
Reference-contexts: MIT's Project Athena [11] supports heterogeneous systems at the application level, by trying to standardize the appearance of applications at the interface level. Carnegie-Mellon University's Andrew System and its successor Coda File System <ref> [35, 37] </ref> offer heterogeneity at the resource level by supporting a large shared file system on a network of different computers. The same goes for SUN-NFS, a Networked File System developed by SUN Microsystems.
Reference: [36] <author> David Notkin, Andrew P. Black, Edward D. Lazowska, Henry M. Levy, Jan Sanislo, and John Zahorjan. </author> <title> Interconnecting Heterogenous Computer Systems. </title> <journal> Communications of the ACM, </journal> <volume> 31(3) </volume> <pages> 258-273, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: The protocol used in SUN-NFS is stateless and makes SUN-NFS partially fault-tolerant: if a server fails, clients can simply wait until the server comes online, at which point the transfer is retried. The University of Washington's "The HCS Environment for Remote Execution" (THERE) system <ref> [36] </ref>, uses Heterogeneous Remote Procedure Calls, or HRPC (see below), as means of interaction. THERE supports multiple standards for data 2 Related Work 5 representation, transport- and control prototols, instead of legislating a single standard. Other proposals use a more low-level approach.
Reference: [37] <author> Mahadev Satyanarayanan. </author> <title> Scalable, Secure and Highly Available Distributed File Access. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 9-21, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: MIT's Project Athena [11] supports heterogeneous systems at the application level, by trying to standardize the appearance of applications at the interface level. Carnegie-Mellon University's Andrew System and its successor Coda File System <ref> [35, 37] </ref> offer heterogeneity at the resource level by supporting a large shared file system on a network of different computers. The same goes for SUN-NFS, a Networked File System developed by SUN Microsystems.
Reference: [38] <author> Pat Stephenson and Kenneth Birman. </author> <title> Fast Causal Multicast. </title> <journal> ACM Operating Systems Review, </journal> <volume> 25(2) </volume> <pages> 75-79, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Later work has focused on protocol design [30, 34] and on improving and supporting reliability of broadcasting protocols [24, 13]. In operating systems research, the notion of process groups has been introduced in several systems, among them the V Distributed System [19] and the ISIS Toolkit <ref> [38] </ref>. Broadcasting has also been discussed as a way of achieving fault-tolerance in operating systems [9]. <p> However, better performance may be obtained by not guaranteeing any order on broadcast messages, when such an ordering is not necessary or desirable <ref> [13, 38] </ref>, which is why we do not enforce any ordering of broadcasts. 4.4 Visibility in ActorSpace When an actor or an actorspace is created, it is not automatically placed in an actorspace; thus it may not be subject to pattern matching on its attributes.
Reference: [39] <author> V. S. Sunderam. </author> <title> PVM: A Framework for Parallel Distributed Computing. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: The Agora System [14] offers shared memory for coordination between and writing of parallel applications in multiple programming languages. ARCADE [21] offers shared memory with operations to transmit memory blocks to other machines and sharing of blocks with other processes. The Parallel Virtual Machine (PVM) <ref> [39] </ref> has been used to build a heterogeneous system called Heterogeneous Network Computing Environment, or HeNCE [23]. HeNCE is a tool for developing parallel applications with PVM, which is the main task of PVM.
Reference: [40] <author> Christine Tomlinson, Phil Cannata, Greg Meredith, and Darrell Woelk. </author> <title> The Extensible Services Switch in Carnot. </title> <journal> IEEE Parallel and Distributed Technology, </journal> <volume> 1(2) </volume> <pages> 16-20, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Finally, in Linda, one cannot give an abstract specification which guarantees that communication is localized once initiated (using patterns). Some industrial experience using actors as a high-level distributed shell language suggests that such dynamic linking capability is extremely useful (e.g. <ref> [40] </ref>). An earlier proposal using pattern based data storage and retrieval was the Scientific Community Metaphor [32]. The Scientific Community Metaphor proposed problem-solving by pattern based access to a shared knowledge base by a community of computational agents, called Sprites.
Reference: [41] <author> Nalini Venkatasubramanian, Gul Agha, and Carolyn Talcott. </author> <title> Scalable Distributed Garbage Collection for Systems of Active Objects. </title> <booktitle> In Proceedings of the International Workshop on Memory Management, </booktitle> <volume> LNCS 637, </volume> <pages> pages 134-148, </pages> <address> St. Malo, France, </address> <month> September </month> <year> 1992. </year> <booktitle> ACM SIGPLAN and INRIA, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Note that since actorspaces are viewed as passive containers, garbage collecting them is simpler than actors: inverse reachability need not be considered. We will not discuss garbage collection further, but we expect that a garbage collection algorithm for the Actor model <ref> [41] </ref> may be adapted in designing a garbage collector for ActorSpace. 4.7 Fairness and Asynchrony Generally, ActorSpace messages have the same properties as Actor messages: delivery is asynchronous, but is guaranteed to eventually happen. There are however a few exceptions which we describe briefly. <p> In the prototype implementation we have not implemented garbage collection. A distributed garbage collection process may be added later a garbage collection algorithm similar to the one that Actors use may be applied <ref> [41] </ref>. 6.3 Support for Heterogeneity Of great importance to the design is the support for run-time heterogeneity. The design builds on the work done on Heterogeneous Remote Procedure Calls (HRPC) [12]. HRPC uses three components at call-time: a transport protocol, a control protocol, and a data representation format.
Reference: [42] <author> G. Wiederhold, P. Wegner, and S. Ceri. </author> <title> Towards Megaprogramming. </title> <journal> Communications of the ACM, </journal> <volume> 35(11), </volume> <month> November </month> <year> 1992. </year>
Reference: [43] <editor> Akinori Yonezawa, editor. </editor> <title> ABCL: An Object-Oriented Concurrent System. </title> <booktitle> Computer Systems Series. </booktitle> <publisher> The MIT Press, </publisher> <year> 1990. </year> <title> Figures 35 categories, which may contain several actual subcontractors. Each filled circle corresponds to a manufacturer. </title>
References-found: 43

