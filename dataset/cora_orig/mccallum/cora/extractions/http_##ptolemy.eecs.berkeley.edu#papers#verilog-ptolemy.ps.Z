URL: http://ptolemy.eecs.berkeley.edu/papers/verilog-ptolemy.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/publications.html/pubs_1992.html
Root-URL: 
Title: An Implementation of the Behavioral Verilog Simulator in Ptolemy  
Author: Pai Chou 
Date: April 14, 1994  
Abstract: Modeling and simulation of digital hardware at the behavioral level enable designers to experiment with a system without specifying implementation details. Verilog is a language that supports modeling and simulation at different levels of abstraction. However, all components in the same design must conform to a certain timing model, which may not be natural for all components. Ptolemy is a simulation environment for systems with heterogeneous timing models. This report describes the incorporation of the behavioral Verilog simulator into Ptolemy by a compiler, which expresses the simulation semantics of Verilog in C++.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> The Almagest: Manual for Ptolemy v0.3, EECS Dept., Univ. of California, Berkeley, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: This restriction can impose an unnatural timing model on the designer for some subsystems. Ptolemy is a prototyping and simulation environment designed specifically to address this problem by acting as a coordinator for different timing models. Originally designed at UC Berkeley <ref> [1] </ref> for modeling digital signal processing (DSP) applications, Ptolemy is gaining applications in general digital hardware simulation. Ptolemy differs from most simulators because it does not impose any given timing model, but rather it coordinates the interaction between different models.
Reference: [2] <author> Donald E. Thomas, Philip R. Moorby, </author> <title> The Verilog Hardware Description Language, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year> <type> [3] "Thor Tutorial," </type> <institution> VLSI/CAD Group. Stanford University, </institution> <year> 1986. </year>
Reference-contexts: Ptolemy is also well known for its sophisticated graphical user interface, including an integrated schematic editor, graphical library components ranging from scopes and chart plotters to video display windows. Verilog is one of the major hardware description languages in use today <ref> [2] </ref>. Originally a proprietary An Implementation of the Behavioral Verilog Simulator in Ptolemy 2 language from Cadence Design Systems, and now openly available, Verilog supports mixed behavioral and structural descriptions of hardware. It supports concurrent programming constructs and hardware data-types.
Reference: [4] <author> M. E. Conway, </author> <title> "Design of a Separate Transition-Diagram Compiler," </title> <journal> Comm. of the ACM, </journal> <volume> vol. 6, pp.396-408, </volume> <year> 1963. </year>
Reference-contexts: Most thread packages are both too general and not expressive enough for Verilog threads: Verilog does not have dynamic thread creation and has no preemption, and ordinary threads packages cannot express disables. To satisfy the required properties, VCC implements the threads using a technique called description by cases <ref> [4] </ref>.
References-found: 3

