URL: http://www.cs.umass.edu/~immerman/pub/canon.ps
Refering-URL: http://www.cs.umass.edu/~immerman/pub_immerman.html
Root-URL: 
Title: Describing Graphs: a First-Order Approach to Graph Canonization  
Author: Neil Immerman Eric Lander 
Note: Springer-Verlag (1990), 59-81. 1.1 Introduction  
Abstract: In this paper we ask the question, "What must be added to first-order logic plus least-fixed point to obtain exactly the polynomial-time properties of unordered graphs?" We consider the languages L k consisting of first-order logic restricted to k variables and C k consisting of L k plus "counting quantifiers". We give efficient canonization algorithms for graphs characterized by C k or L k . It follows from known results that all trees and almost all graphs are characterized by C 2 . This paper appeared in Complexity Theory Retrospective, Alan Selman, ed., In this paper we present a new and different approach to the graph canonization and isomorphism problems. Our approach involves a combination of complexity theory with mathematical logic. We consider first-order languages for describing graphs. We define what it means for a language to characterize a set of graphs (Definition 1.4.2). We next define the languages L k (resp. C k ) consisting of the formulas of first-order logic in which only k variables occur (resp. L k plus `counting quantifiers'). We then study which sets of graphs are characterized by certain L k 's and C k 's. It follows by a result of Babai and Kucera [4] that the language C 2 characterizes almost all graphs. We also show that C 2 characterizes all trees. In Section 1.9 we give a simple O[n k log n] step algorithm to test if two graphs G and H on 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft and J.D. </author> <title> Ullman (1974), The Design and Analysis of Computer Algorithms, </title> <publisher> Addison- Wesley. </publisher>
Reference-contexts: This language includes the logical relation which must be interpreted as the usual ordering on the vertices, V = f0; 1; : : : ; n 1g. We will see in Fact 1.2.8 that FO () is contained in CRAM <ref> [1] </ref> the set of properties that can be checked by a concurrent, parallel, random access machine in constant time, using polynomially many processors. <p> Let the relations BIT (x; y) be true just if the x th bit in the binary expansion of y is a one. In [22] it is shown that FO (; BIT)[t (n)]VAR [O <ref> [1] </ref>] is exactly the set of properties checkable by a CRAM in parallel time O [t (n)] using poly-nomially many processors. (In fact, FO (; BIT)[t (n)]VAR [v] corresponds to CRAM-TIME [t (n)] using roughly n v processors.) Fact 1.2.7 For all t (n), FO (; BIT)[t (n)]VAR [O [1]] = <p> [O <ref> [1] </ref>] is exactly the set of properties checkable by a CRAM in parallel time O [t (n)] using poly-nomially many processors. (In fact, FO (; BIT)[t (n)]VAR [v] corresponds to CRAM-TIME [t (n)] using roughly n v processors.) Fact 1.2.7 For all t (n), FO (; BIT)[t (n)]VAR [O [1]] = CRAM [t (n)]-PROC [n O [1] ] In particular, we have that the first-order properties are those checkable in constant time by a CRAM using polynomially many processors, Fact 1.2.8 FO (; BIT) = CRAM [1]-PROC [n O [1] ] 1. <p> properties checkable by a CRAM in parallel time O [t (n)] using poly-nomially many processors. (In fact, FO (; BIT)[t (n)]VAR [v] corresponds to CRAM-TIME [t (n)] using roughly n v processors.) Fact 1.2.7 For all t (n), FO (; BIT)[t (n)]VAR [O <ref> [1] </ref>] = CRAM [t (n)]-PROC [n O [1] ] In particular, we have that the first-order properties are those checkable in constant time by a CRAM using polynomially many processors, Fact 1.2.8 FO (; BIT) = CRAM [1]-PROC [n O [1] ] 1. <p> 1.2.7 For all t (n), FO (; BIT)[t (n)]VAR [O <ref> [1] </ref>] = CRAM [t (n)]-PROC [n O [1] ] In particular, we have that the first-order properties are those checkable in constant time by a CRAM using polynomially many processors, Fact 1.2.8 FO (; BIT) = CRAM [1]-PROC [n O [1] ] 1. Describing Graphs: a First-Order Approach to Graph Canonization 7 1.3 Properties of (Unordered) Graphs Facts 1.2.2 and 1.2.4 give natural languages expressing respectively the polynomial-time and nondeterministic logspace properties of ordered graphs. <p> First, it is well known that the set of finite trees is characterized by stable coloring <ref> [1] </ref>. Thus: Corollary 1.8.2 Let TREES be the set of finite trees. Then vc (TREES) = 2.
Reference: [2] <author> Laszlo Babai, </author> <title> "Moderately Exponential Bound for Graph Isomor-phism," </title> <booktitle> Proc. Conf. on Fundamentals of Computation Theory, </booktitle> <address> Szeged, </address> <month> August </month> <year> 1981. </year>
Reference-contexts: Thus Player II can always preserve the partial isomorphism. 2 1.8 Vertex Refinement Corresponds to C 2 It turns out that the expressive power of C 2 is characterized by the well known method of vertex refinement (see <ref> [2, 16] </ref>). Let G = hV; E; C 1 ; : : : ; C r i 1. Describing Graphs: a First-Order Approach to Graph Canonization 17 be a colored graph in which every vertex statisfies exactly one color relation.
Reference: [3] <author> L. Babai, W.M. Kantor, </author> <title> E.M. Luks, "Computational Complexity and the Classification of Finite Simple Groups," </title> <booktitle> 24th IEEE FOCS Symp., </booktitle> <year> (1983), </year> <pages> 162-171. </pages>
Reference-contexts: We hope that variants of these algorithms will be powerful enough to provide simple canonical forms for all graphs; and do so without resorting to the the high powered group theory needed in the present, best graph isomorphism algorithms <ref> [27, 3] </ref>. 1.2 Descriptive Complexity In this section we discuss an alternate view of complexity in which the complexity of the descriptions of problems is measured. This approach has provided new insights and techniques to help us understand the standard complexity notions: time, memory space, parallel time, number of processors.
Reference: [4] <author> Laszlo Babai and Ludek Kucera (1980), </author> <title> Canonical Labelling of Graphs in Linear Average Time," </title> <booktitle> 20th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> 39-46. </pages>
Reference-contexts: C k ) consisting of the formulas of first-order logic in which only k variables occur (resp. L k plus `counting quantifiers'). We then study which sets of graphs are characterized by certain L k 's and C k 's. It follows by a result of Babai and Kucera <ref> [4] </ref> that the language C 2 characterizes almost all graphs. We also show that C 2 characterizes all trees. <p> Then, 1. Describing Graphs: a First-Order Approach to Graph Canonization 19 1. 8 : 3 if 2 k 3 2. 8 : 3 if 3 k 6 Babai and Kucera have proved the following result about stable colorings of random graphs: Fact 1.8.4 <ref> [4] </ref> There exists a constant ff &lt; 1 such that if G is chosen randomly from the set of all labeled graphs on n vertices then ProbfG has two vertices of the same stable colorg &lt; ff n : Corollary 1.8.5 Almost all finite graphs are characterized by C 2 .
Reference: [5] <author> Laszlo Babai and Eugene M. Luks, </author> <title> "Canonical Labeling of Graphs," </title> <booktitle> 15th ACM STOC Symp., </booktitle> <year> (1983), </year> <pages> 171-183. </pages>
Reference: [6] <author> D. Mix Barrington, N. Immerman, and H. Straubing, </author> <booktitle> "On Uniformity Within NC 1 ," Third Annual Structure in Complexity Theory Symp. </booktitle> <year> (1988), </year> <pages> 47-59. </pages>
Reference-contexts: Uniformity is discussed extensively in <ref> [6] </ref>. In this paper the reader may think of uniform as meaning that the map from n to ' n is easily computable, e.g. in logspace. 1.
Reference: [7] <author> Jon Barwise, </author> <title> "On Moschovakis Closure Ordinals," </title> <editor> J. Symb. </editor> <booktitle> Logic 42 (1977), </booktitle> <pages> 292-296. </pages>
Reference-contexts: We will use the combinatorial games of Ehrenfeucht and Fraisse [10, 12] as modified for L k (see <ref> [18, 7, 29] </ref>). All of the results in this section could be proved by induction on the complexity of the sentences in question; but, we find that the games offer more intuitive arguments. Let G and H be two graphs, and let k be a natural number.
Reference: [8] <author> J. Cai, M. Furer, N. Immerman, </author> <title> "An Optimal Lower Bound on the Number of Variables for Graph Identification," </title> <booktitle> 30th IEEE FOCS Symp. </booktitle> <year> (1989), </year> <pages> 612-617. </pages>
Reference-contexts: In particular it would be very interesting to determine vc (Planar Graphs) and vc (Genus k) graphs. 2. Question 1.3.3 in its new form, "What must we add to first-order logic with fixed point and counting in order to obtain all polynomial-time graph properties" deserves considerable further study, cf. <ref> [8] </ref>. 3. Fact 1.3.4 implies that (FO + LFP + counting) does not even include all of DSPACE [log n]. It would be very interesting, and perhaps more tractable to answer question 2 for other classes such as NSPACE [log n].
Reference: [9] <author> Ashok Chandra and David Harel, </author> <title> "Structure and Complexity of Relational Queries," </title> <booktitle> JCSS 25 (1982), </booktitle> <pages> 99-128. </pages>
Reference-contexts: n]. 8 Neil Immerman, Eric Lander known that graphs are the most general logical structures. 6 Thus these questions are equivalent to the corresponding questions concerning relational databases: i.e. give a database query language for expressing exactly the polynomial-time queries that are independent of the arbitrary ordering of tuples, cf. <ref> [9] </ref>.
Reference: [10] <author> A. Ehrenfeucht, </author> <title> "An Application of Games to the Completeness Problem for Formalized Theories," </title> <journal> Fund. Math. </journal> <volume> 49 (1961), </volume> <pages> 129-141. </pages>
Reference-contexts: Fact 1.3.4) that no fixed L k suffices to characterize the graphs of color class size 4. 1.6 Lower Bounds In this section we will show that L k is not expressive enough to characterize graphs efficiently. We will use the combinatorial games of Ehrenfeucht and Fraisse <ref> [10, 12] </ref> as modified for L k (see [18, 7, 29]). All of the results in this section could be proved by induction on the complexity of the sentences in question; but, we find that the games offer more intuitive arguments.
Reference: [11] <author> Ron Fagin, </author> <title> "Probabilities on Finite Models," </title> <journal> J. Symbolic Logic 41, </journal> <volume> No. 1 (1976), </volume> <pages> 50-58. </pages>
Reference-contexts: Thus if two graphs of size n k are chosen at random they will almost certainly be L k equivalent, but not isomorphic. Fact 1.6.3 [18],cf <ref> [11] </ref> Fix k and let P r n (G L k H) be the probability that two randomly chosen graphs of size n are L k equivalent.
Reference: [12] <author> R. Fraisse, </author> <title> "Sur les Classifications des Systems de Relations," </title> <type> Publ. </type> <institution> Sci. Univ. </institution> <note> Alger I (1954). </note>
Reference-contexts: Fact 1.3.4) that no fixed L k suffices to characterize the graphs of color class size 4. 1.6 Lower Bounds In this section we will show that L k is not expressive enough to characterize graphs efficiently. We will use the combinatorial games of Ehrenfeucht and Fraisse <ref> [10, 12] </ref> as modified for L k (see [18, 7, 29]). All of the results in this section could be proved by induction on the complexity of the sentences in question; but, we find that the games offer more intuitive arguments.
Reference: [13] <author> Leslie Goldschlager, </author> <title> "The Monotone and Planar Circuit Value Problems are Log Space Complete for P," </title> <journal> SIGACT News 9, </journal> <volume> No. </volume> <month> 2 </month> <year> (1977). </year>
Reference-contexts: Describing Graphs: a First-Order Approach to Graph Canonization 5 Example 1.2.3 The monotone circuit value problem is an example of a complete problem for P which we will use to illustrate Fact 1.2.2, <ref> [13] </ref>. Instances of this problem consist of boolean circuits with only "and" and "or" gates and a unique output gate whose value as determined by the inputs is one.
Reference: [14] <author> Yuri Gurevich, </author> <booktitle> "Logic and the Challenge of Computer Science," in Current Trends in Theoretical Computer Science, </booktitle> <editor> ed. Egon Borger, </editor> <publisher> Computer Science Press. </publisher> <month> 1. </month> <title> Describing Graphs: a First-Order Approach to Graph Canonization 23 </title>
Reference-contexts: Let a graph property be an order independent property of ordered graphs. One can ask the question, Question 1.3.1 Is there a natural language for the polynomial-time graph properties? Gurevich has conjectured that the answer to Question 1.3.1 is, "No," <ref> [14] </ref>. An affirmative answer to this question would imply a similar answer to the more basic, Question 1.3.2 Is there a recursively enumerable listing of all polynomial-time graph properties? Questions 1.3.1 and 1.3.2 are important in various settings.
Reference: [15] <author> Christoph M. Hoffmann, </author> <title> Group-Theoretic Algorithms and Graph Iso-morphism, </title> <booktitle> Springer-Verlag Lecture Notes in Computer Science 136 (1982). </booktitle>
Reference: [16] <author> John E. Hopcroft and Robert Tarjan, </author> <title> "Isomorphism of Planar Graphs," in Complexity of Computer Computations, </title> <editor> R. Miller and J.W Thatcher, eds., </editor> <booktitle> (1972), </booktitle> <publisher> Plenum Press, </publisher> <pages> 131-152. </pages>
Reference-contexts: Thus Player II can always preserve the partial isomorphism. 2 1.8 Vertex Refinement Corresponds to C 2 It turns out that the expressive power of C 2 is characterized by the well known method of vertex refinement (see <ref> [2, 16] </ref>). Let G = hV; E; C 1 ; : : : ; C r i 1. Describing Graphs: a First-Order Approach to Graph Canonization 17 be a colored graph in which every vertex statisfies exactly one color relation. <p> from his results that: Corollary 1.8.6 For all d, and sufficiently large n, C 3 characterizes more than 1 O [1=n] of the regular graphs of degree d on n vertices. 1.9 Equivalence and Canonization Algorithms The stable coloring of a graph is computable in O [jEj log n] steps <ref> [16] </ref>. We present the algorithm for completeness. Algorithm 1.9.1 1. Place indices 1; : : : ; r of initial color classes on list L. 2. While L 6= ; do begin 3.
Reference: [17] <author> Neil Immerman, </author> <title> "Number of Quantifiers is Better than Number of Tape Cells," </title> <journal> JCSS 22, </journal> <volume> No. 3, </volume> <month> June </month> <year> 1981, </year> <pages> 65-72. </pages>
Reference-contexts: It thus follows that k variables are necessary and sufficient to express the existence of a complete subgraph of size k. If these bounds applied to the languages with ordering they would imply that P 6= NP. In <ref> [17] </ref> there is a similar construction of a sequence of pairs of graphs which differ on a polynomial-time complete property, but agree on all sentences of poly-logarithmic length without ordering.
Reference: [18] <author> Neil Immerman, </author> <title> "Upper and Lower Bounds for First Order Express-ibility," </title> <journal> JCSS 25, </journal> <volume> No. 1 (1982), </volume> <pages> 76-98. </pages>
Reference-contexts: Let FO [t (n)]VAR [v] be the restriction of FO [t (n)] to sentences with at most v distinct variables. Then the following bounds can be derived from the proof of Fact 1.2.1 in <ref> [18] </ref>: Fact 1.2.6 [18] DTIME [n k ] FO ()[n k ]VAR [k + 3] DTIME [n 2k+4 ] Thus the DTIME [n k ] properties of ordered graphs are roughly the properties expressible by first-order sentences with k variables and length n k . Obviously this is very rough. <p> Let FO [t (n)]VAR [v] be the restriction of FO [t (n)] to sentences with at most v distinct variables. Then the following bounds can be derived from the proof of Fact 1.2.1 in <ref> [18] </ref>: Fact 1.2.6 [18] DTIME [n k ] FO ()[n k ]VAR [k + 3] DTIME [n 2k+4 ] Thus the DTIME [n k ] properties of ordered graphs are roughly the properties expressible by first-order sentences with k variables and length n k . Obviously this is very rough. <p> When the ordering is not present, it is possible to prove nearly optimal upper and lower bounds on the number of quantifiers and variables needed to express various properties in first-order logic. For example, in <ref> [18] </ref> the graphs Y k and N k are constructed. These graphs have the property that Y k has a complete subgraph on k vertices, but N k does not. However using Ehrenfeucht-Fraisse games (cf. <p> We will use the combinatorial games of Ehrenfeucht and Fraisse [10, 12] as modified for L k (see <ref> [18, 7, 29] </ref>). All of the results in this section could be proved by induction on the complexity of the sentences in question; but, we find that the games offer more intuitive arguments. Let G and H be two graphs, and let k be a natural number. <p> The reader should convince himself or herself that in fact Player II has a winning strategy for the L 2 game on the given G and H. The relevant theorem concerning the relationship between this game and the matter at hand is: Fact 1.6.1 <ref> [18, Theorem C.1] </ref> Let (u; v) be a k-configuration over G; H.
Reference: [19] <author> Neil Immerman, </author> <title> "Relational Queries Computable in Polynomial Time," </title> <journal> Information and Control, </journal> <volume> 68 (1986), </volume> <pages> 86-104. </pages>
Reference-contexts: Fact 1.2.1 ([18]) P = k=1 The Least Fixed Point (LFP) operator has long been used by logicians to formalize the power to define new relations by induction, cf. [28]. In <ref> [19] </ref> and in [31] it is shown that the uniform sequence of formulas in Fact 1.2.1 can be represented by a single use of LFP applied to a first-order formula.
Reference: [20] <author> Neil Immerman, </author> <title> "Languages That Capture Complexity Classes," </title> <journal> SIAM J. Comput. </journal> <volume> 16, No. 4 (1987), </volume> <pages> 760-778. </pages>
Reference-contexts: formula, (9x)(ff (x) ^ (8y)(ff (y) ! y = x)) The circuit value problem can now be expressed as follows: (9!w)(R (w)) ^ (9w)(R (w) ^ (LFP (V; x))(w)) A particular kind of inductive operator that is worth studying on its own is the transitive closure operator (TC) introduced in <ref> [20] </ref>. Let '(x; y) be any binary relation on k-tuples. Then (TC '(x; y)) denotes the reflexive, transitive closure of '. The following was proved in [20] with the finishing touch proved in [21]. <p> (LFP (V; x))(w)) A particular kind of inductive operator that is worth studying on its own is the transitive closure operator (TC) introduced in <ref> [20] </ref>. Let '(x; y) be any binary relation on k-tuples. Then (TC '(x; y)) denotes the reflexive, transitive closure of '. The following was proved in [20] with the finishing touch proved in [21]. Fact 1.2.4 FO (; TC) = NSPACE [log n] 6 Neil Immerman, Eric Lander Example 1.2.5 Consider the following complete problem for NSPACE [log n].
Reference: [21] <author> Neil Immerman, </author> <title> "Nondeterministic Space is Closed Under Complementation," </title> <journal> SIAM J. Comput. </journal> <volume> 17, No. 5 (1988), </volume> <pages> 935-938. </pages>
Reference-contexts: Let '(x; y) be any binary relation on k-tuples. Then (TC '(x; y)) denotes the reflexive, transitive closure of '. The following was proved in [20] with the finishing touch proved in <ref> [21] </ref>. Fact 1.2.4 FO (; TC) = NSPACE [log n] 6 Neil Immerman, Eric Lander Example 1.2.5 Consider the following complete problem for NSPACE [log n].
Reference: [22] <author> Neil Immerman, </author> <title> "Expressibility and Parallel Complexity," </title> <journal> SIAM J. of Comput 18 (1989), </journal> <pages> 625-638. </pages>
Reference-contexts: Since variables range over the universe f0; 1; : : : ; n 1g they may be thought of as log n bit numbers. Let the relations BIT (x; y) be true just if the x th bit in the binary expansion of y is a one. In <ref> [22] </ref> it is shown that FO (; BIT)[t (n)]VAR [O [1]] is exactly the set of properties checkable by a CRAM in parallel time O [t (n)] using poly-nomially many processors. (In fact, FO (; BIT)[t (n)]VAR [v] corresponds to CRAM-TIME [t (n)] using roughly n v processors.) Fact 1.2.7 For
Reference: [23] <author> Neil Immerman, </author> <title> "Expressibility as a Complexity Measure: Results and Directions," </title> <booktitle> Second Structure in Complexity Theory Conf. </booktitle> <year> (1987), </year> <pages> 194-202. </pages>
Reference: [24] <author> Neil Immerman, </author> <title> "Descriptive and Computational Complexity," in Computational Complexity Theory, </title> <editor> ed. J. Hartmanis, </editor> <booktitle> Proc. Symp. in Applied Math., 38, American Mathematical Society (1989), </booktitle> <pages> 75-91. </pages>
Reference-contexts: This approach has provided new insights and techniques to help us understand the standard complexity notions: time, memory space, parallel time, number of processors. The motivations for the present paper come from Descriptive Complexity. We can only sketch this area here. The interested reader should consult <ref> [24] </ref> for a more extensive survey. Given a property, S, one can discuss the computational complexity of checking whether or not an input satisfies S. One can also ask, "What is the complexity of expressing the property S?" It is natural that these two questions are related.
Reference: [25] <author> Neil Immerman and Dexter Kozen, </author> <title> "Definability with Bounded Number of Bound Variables," </title> <journal> Information and Computation, </journal> <volume> 83 (1989), </volume> <pages> 121-139. </pages>
Reference-contexts: We are interested in knowing when a language suffices to characterize a particular graph, or class of graphs. Some of the following definitions and notation are adapted from <ref> [25] </ref>. <p> Thus: Corollary 1.8.2 Let TREES be the set of finite trees. Then vc (TREES) = 2. It is interesting to compare Corollary 1.8.2 with the more complicated situation in which counting is not present: Fact 1.8.3 <ref> [25] </ref> Let T k be the set of finite trees such that each node has at most k children, and let S k be the subset of T k in which each non-leaf has exactly k children. Then, 1.
Reference: [26] <author> Ludek Kucera, </author> <title> "Canonical Labeling of Regular Graphs in Linear Average Time," </title> <booktitle> 28th IEEE FOCS Symp. </booktitle> <year> (1987), </year> <pages> 271-279. </pages>
Reference-contexts: It is easy to see that Fact 1.8.4 fails for regular graphs: all regular graphs of degree d on n vertices are C 2 equivalent. More recently, Kucera has given a linear algorithm for canonization of regular graphs of a given, fixed degree <ref> [26] </ref>.
Reference: [27] <author> Eugene M. Luks, </author> <title> "Isomorphism of Graphs of Bounded Valence Can be Tested in Polynomial Time," </title> <booktitle> JCSS 25 (1982), </booktitle> <pages> pp. 42-65. </pages>
Reference-contexts: We hope that variants of these algorithms will be powerful enough to provide simple canonical forms for all graphs; and do so without resorting to the the high powered group theory needed in the present, best graph isomorphism algorithms <ref> [27, 3] </ref>. 1.2 Descriptive Complexity In this section we discuss an alternate view of complexity in which the complexity of the descriptions of problems is measured. This approach has provided new insights and techniques to help us understand the standard complexity notions: time, memory space, parallel time, number of processors.
Reference: [28] <author> Yiannis N. Moschovakis, </author> <title> Elementary Induction on Abstract Structures, </title> <publisher> North Holland, </publisher> <year> 1974. </year>
Reference-contexts: Fact 1.2.1 ([18]) P = k=1 The Least Fixed Point (LFP) operator has long been used by logicians to formalize the power to define new relations by induction, cf. <ref> [28] </ref>. In [19] and in [31] it is shown that the uniform sequence of formulas in Fact 1.2.1 can be represented by a single use of LFP applied to a first-order formula.
Reference: [29] <author> Bruno Poizat, "Deux ou trois chose que je sais de Ln," J. </author> <title> Symbolic Logic, 47 (1982), </title> <type> 641-658. 24 Neil Immerman, Eric Lander </type>
Reference-contexts: We will use the combinatorial games of Ehrenfeucht and Fraisse [10, 12] as modified for L k (see <ref> [18, 7, 29] </ref>). All of the results in this section could be proved by induction on the complexity of the sentences in question; but, we find that the games offer more intuitive arguments. Let G and H be two graphs, and let k be a natural number.
Reference: [30] <author> Simon Thomas, </author> <title> "Theories With Finitely Many Models," </title> <journal> J. Symbolic Logic, </journal> <volume> 51, No. 2 (1986), </volume> <pages> 374-376. </pages>
Reference: [31] <author> M. Vardi, </author> <title> "Complexity of Relational Query Languages," </title> <booktitle> 14th Symposium on Theory of Computation, </booktitle> <year> 1982, </year> <pages> (137-146). </pages>
Reference-contexts: Fact 1.2.1 ([18]) P = k=1 The Least Fixed Point (LFP) operator has long been used by logicians to formalize the power to define new relations by induction, cf. [28]. In [19] and in <ref> [31] </ref> it is shown that the uniform sequence of formulas in Fact 1.2.1 can be represented by a single use of LFP applied to a first-order formula.
References-found: 31

