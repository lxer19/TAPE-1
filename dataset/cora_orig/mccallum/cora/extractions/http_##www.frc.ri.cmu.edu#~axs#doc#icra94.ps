URL: http://www.frc.ri.cmu.edu/~axs/doc/icra94.ps
Refering-URL: http://www.frc.ri.cmu.edu/~axs/
Root-URL: 
Title: Optimal and Efficient Path Planning for Partially-Known Environments  
Author: Anthony Stentz 
Address: Pittsburgh, PA 15213  
Affiliation: The Robotics Institute; Carnegie Mellon University;  
Date: May 1994.  
Note: In Proceedings IEEE International Conference on Robotics and Automation,  1.0 Introduction  
Abstract: The task of planning trajectories for a mobile robot has received considerable attention in the r esearch literature. Most of the work assumes the r obot has a complete and accurate model of its envir onment before it begins to move; less attention has been paid to the pr oblem of partially known environments. This situation occurs for an exploratory robot or one that must move to a goal location without the benefit of a floorplan or terrain map. Existing approaches plan an initial path based on known information and then modify the plan locally or replan the entire path as the r obot discovers obstacles with its sensors, sacrificing optimality or computational efficiency respectively. This paper introduces a new algorithm, D*, capable of planning paths in unknown, partially known, and changing environments in an efficient, optimal, and complete manner. The research literature has addressed extensively the motion planning problem for one or more robots moving through a field of obstacles to a goal. Most of this work assumes that the environment is completely known before the robot begins its traverse (see Latombe [4] for a good survey). The optimal algorithms in this literature search a state space (e.g., visibility graph, grid cells) using the distance transform [2] or heuristics [8] to find the lowest cost path from the robots start state to the goal state. Cost can be defined to be distance travelled, energy expended, time exposed to danger, etc. Unfortunately, the robot may have partial or no information about the environment before it begins its traverse but is equipped with a sensor that is capable of measuring the environment as it moves. One approach to path planning in this scenario is to generate a global path using the known information and then attempt to locally circumvent obstacles on the route detected by the sensors [1]. If the route is completely obstructed, a new global path is planned. Lumelsky [7] initially assumes the environment to be devoid of obstacles and moves the robot directly toward the goal. If an obstacle obstructs the path, the robot moves around the perimeter until the point on the obstacle nearest the goal is found. The robot then proceeds to move directly toward the goal again. Pirzadeh [9] adopts a strategy whereby the robot wanders about the environment until it discovers the goal. The robot repeatedly moves to the adjacent location with lowest cost and increments the cost of a location each time it visits it to penalize later traverses of the same space. Korf [3] uses initial map information to estimate the cost to the goal for each state and efficiently updates it with backtracking costs as the robot moves through the environment. While these approaches are complete, they are also suboptimal in the sense that they do not generate the lowest cost path given the sensor information as it is acquired and assuming all known, a priori information is correct. It is possible to generate optimal behavior by c o m p u t i n g a n o p t i m a l p a t h f r o m t h e k n o w n m a p information, moving the robot along the path until either it reaches the goal or its sensors detect a discrepancy between the map and the environment, updating the map, and then replanning a new optimal path from the robot s current location to the goal. Although this brute-force, r ep lann ing a ppr oa ch is optima l, it c a n be gr ossly inefficient, particularly in expansive environments where the goal is far away and little map information exists. Zelinsky [15] increases ef ficiency by using a quad-tree [13] to represent free and obstacle space, thus reducing the number of states to search in the planning space. For natural terrain, however, the map can encode robot traversability at each location ranging over a continuum, thus rendering quad-trees inappropriate or suboptimal. This paper presents a new algorithm for generating optimal paths for a robot operating with a sensor and a map of the environment. The map can be complete, empty , or contain partial information about the environment. For 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Goto, Y., Stentz, A., </author> <title> Mobile Robot Navigation: The CMU System, </title> <journal> IEEE Expert, </journal> <volume> Vol. 2, No. 4, </volume> <month> Winter, </month> <year> 1987. </year>
Reference-contexts: One approach to path planning in this scenario is to generate a global path using the known information and then attempt to locally circumvent obstacles on the route detected by the sensors <ref> [1] </ref>. If the route is completely obstructed, a new global path is planned. Lumelsky [7] initially assumes the environment to be devoid of obstacles and moves the robot directly toward the goal.
Reference: [2] <author> Jarvis, R. A., </author> <title> Collision-Free Trajectory Planning Using the Distance Transforms, </title> <journal> Mechanical Engineering Trans. of the Institution of Engineers, Australia, </journal> <volume> Vol. ME10, No. 3, Septem-ber, </volume> <year> 1985. </year>
Reference-contexts: Most of this work assumes that the environment is completely known before the robot begins its traverse (see Latombe [4] for a good survey). The optimal algorithms in this literature search a state space (e.g., visibility graph, grid cells) using the distance transform <ref> [2] </ref> or heuristics [8] to find the lowest cost path from the robots start state to the goal state. Cost can be defined to be distance travelled, energy expended, time exposed to danger, etc.
Reference: [3] <author> Korf, R. E., </author> <title> Real-Time Heuristic Search: First Results, </title> <booktitle> Proc. Sixth National Conference on Artificial Intelligence, </booktitle> <month> July, </month> <year> 1987. </year>
Reference-contexts: Pirzadeh [9] adopts a strategy whereby the robot wanders about the environment until it discovers the goal. The robot repeatedly moves to the adjacent location with lowest cost and increments the cost of a location each time it visits it to penalize later traverses of the same space. Korf <ref> [3] </ref> uses initial map information to estimate the cost to the goal for each state and efficiently updates it with backtracking costs as the robot moves through the environment.
Reference: [4] <author> Latombe, J.-C., </author> <title> Robot Motion Planning, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: 1.0 Introduction The research literature has addressed extensively the motion planning problem for one or more robots moving through a field of obstacles to a goal. Most of this work assumes that the environment is completely known before the robot begins its traverse (see Latombe <ref> [4] </ref> for a good survey). The optimal algorithms in this literature search a state space (e.g., visibility graph, grid cells) using the distance transform [2] or heuristics [8] to find the lowest cost path from the robots start state to the goal state.
Reference: [5] <author> Lozano-Perez, T., </author> <title> Spatial Planning: A Configuration Space Approach, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-32, No. 2, </volume> <month> February, </month> <year> 1983. </year> <title> OBSTACLE EMPTY </title>
Reference-contexts: The robots sensor is able to measure arc costs in the vicinity of the robot, and the known and estimated arc values comprise the map. Thus, the algorithm can be used for any planning representation, including visibility graphs <ref> [5] </ref> and grid cell structures.
Reference: [6] <author> Lumelsky, V. J., Mukhopadhyay, S., Sun, K., </author> <title> Dynamic Path Planning in Sensor-Based Terrain Acquisition, </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> Vol. 6, No. 4, </volume> <month> August, </month> <year> 1990. </year>
Reference: [7] <author> Lumelsky, V. J., Stepanov, A. A., </author> <title> Dynamic Path Planning for a Mobile Automaton with Limited Information on the Environment, </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> Vol. AC-31, No. 11, </volume> <month> November, </month> <year> 1986. </year>
Reference-contexts: One approach to path planning in this scenario is to generate a global path using the known information and then attempt to locally circumvent obstacles on the route detected by the sensors [1]. If the route is completely obstructed, a new global path is planned. Lumelsky <ref> [7] </ref> initially assumes the environment to be devoid of obstacles and moves the robot directly toward the goal. If an obstacle obstructs the path, the robot moves around the perimeter until the point on the obstacle nearest the goal is found.
Reference: [8] <author> Nilsson, N. J., </author> <booktitle> Principles of Artificial Intelligence, </booktitle> <publisher> Tioga Publishing Company, </publisher> <year> 1980. </year>
Reference-contexts: Most of this work assumes that the environment is completely known before the robot begins its traverse (see Latombe [4] for a good survey). The optimal algorithms in this literature search a state space (e.g., visibility graph, grid cells) using the distance transform [2] or heuristics <ref> [8] </ref> to find the lowest cost path from the robots start state to the goal state. Cost can be defined to be distance travelled, energy expended, time exposed to danger, etc. <p> The paper describes the algorithm, illustrates its operation, presents informal proofs of its soundness, optimality, and completeness, and then concludes with an empirical comparison of the algorithm to the optimal replanner. 2.0 The D* Algorithm The name of the algorithm, D*, was chosen because it resembles A* <ref> [8] </ref>, except that it is dynamic in the sense that arc cost parameters can change during the problem-solving process. Provided that robot motion is properly coupled to the algorithm, D* generates optimal trajectories. <p> The replanner repeatedly expands states on the list with the minimum value. Since is a lower bound on the actual cost from to the robot for all , the replanner is optimal <ref> [8] </ref>. The two algorithms were compared on planning problems of varying size. Each environment was square, consisting of a start state in the center of the left wall and a goal state in center of the right wall.
Reference: [9] <author> Pirzadeh, A., Snyder, W., </author> <title> A Unified Solution to Coverage and Search in Explored and Unexplored Terrains Using Indirect Control, </title> <booktitle> Proc. of the IEEE International Conference on Robotics and Automation, </booktitle> <month> May, </month> <year> 1990. </year>
Reference-contexts: If an obstacle obstructs the path, the robot moves around the perimeter until the point on the obstacle nearest the goal is found. The robot then proceeds to move directly toward the goal again. Pirzadeh <ref> [9] </ref> adopts a strategy whereby the robot wanders about the environment until it discovers the goal. The robot repeatedly moves to the adjacent location with lowest cost and increments the cost of a location each time it visits it to penalize later traverses of the same space.
Reference: [10] <author> Rao, N. S. V., </author> <title> An Algorithmic Framework for Navigation in Unknown Terrains, </title> <booktitle> IEEE Computer, </booktitle> <month> June, </month> <year> 1989. </year>
Reference: [11] <author> Rao, N.S.V., Stoltzfus, N., Iyengar, S. S., </author> <title> A Retraction Method for Learned Navigation in Unknown Terrains for a Circular Robot, </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> Vol. 7, No. 5, </volume> <month> October, </month> <year> 1991. </year>
Reference: [12] <author> Rosenblatt, J. K., Langer, D., Hebert, M., </author> <title> An Integrated System for Autonomous Off-Road Navigation, </title> <booktitle> Proc. of the IEEE International Conference on Robotics and Automation, </booktitle> <month> May, </month> <year> 1994. </year>
Reference-contexts: Future work will incorporate the quad tree representation for these environments as well as those with binary cost values (e.g., and ) in order to reduce memory requirements [15]. Work is underway to integrate D* with an of froad obstacle avoidance system <ref> [12] </ref> on an outdoor mobile robot. To date, the combined system has demonstrated the ability to find the goal after driving several hundred meters in a cluttered environment with no initial map.
Reference: [13] <author> Samet, H., </author> <title> An Overview of Quadtrees, Octrees and Related Hierarchical Data Structures, </title> <booktitle> in NATO ASI Series, Vol. F40, Theoretical Foundations of Computer Graphics, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Although this brute-force, r ep lann ing a ppr oa ch is optima l, it c a n be gr ossly inefficient, particularly in expansive environments where the goal is far away and little map information exists. Zelinsky [15] increases ef ficiency by using a quad-tree <ref> [13] </ref> to represent free and obstacle space, thus reducing the number of states to search in the planning space. For natural terrain, however, the map can encode robot traversability at each location ranging over a continuum, thus rendering quad-trees inappropriate or suboptimal.
Reference: [14] <author> Stentz, A., </author> <title> Optimal and Efficient Path Planning for Unknown and Dynamic Environments, </title> <institution> Carnegie Mellon Robotics Institute Technical Report CMU-RI-TR-93-20, </institution> <month> August, </month> <year> 1993. </year>
Reference-contexts: For brevity, the proofs for the above three properties are informal. See Stentz <ref> [14] </ref> for the detailed, formal p r o o f s . C o n s i d e r P r o p e r t y 1 f i r s t . <p> Algorithm 1,000 10,000 100,000 1,000,000 Replanner 427 msec 14.45 sec 10.86 min 50.82 min D* 261 msec 1.69 sec 10.93 sec 16.83 sec Speed-Up 1.67 10.14 56.30 229.30 See Stentz <ref> [14] </ref> for an extensive description of related applications for D*, including planning with robot shape, field of view considerations, dead-reckoning error , changing environments, occupancy maps, potential fields, natural terrain, multiple goals, and multiple robots. 5.2 Future Work For unknown or partially-known terrains, recent research has addressed the exploration and map
Reference: [15] <author> Zelinsky, A., </author> <title> A Mobile Robot Exploration Algorithm, </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> Vol. 8, No. 6, </volume> <month> December, </month> <year> 1992. </year>
Reference-contexts: Although this brute-force, r ep lann ing a ppr oa ch is optima l, it c a n be gr ossly inefficient, particularly in expansive environments where the goal is far away and little map information exists. Zelinsky <ref> [15] </ref> increases ef ficiency by using a quad-tree [13] to represent free and obstacle space, thus reducing the number of states to search in the planning space. For natural terrain, however, the map can encode robot traversability at each location ranging over a continuum, thus rendering quad-trees inappropriate or suboptimal. <p> Future work will incorporate the quad tree representation for these environments as well as those with binary cost values (e.g., and ) in order to reduce memory requirements <ref> [15] </ref>. Work is underway to integrate D* with an of froad obstacle avoidance system [12] on an outdoor mobile robot. To date, the combined system has demonstrated the ability to find the goal after driving several hundred meters in a cluttered environment with no initial map.
References-found: 15

