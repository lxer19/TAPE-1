URL: ftp://ftp.cs.jhu.edu/pub/subodh/papers/tribez.ps.gz
Refering-URL: http://www.cs.jhu.edu/~subodh/research/render.html
Root-URL: http://www.cs.jhu.edu
Email: subodh@cs.jhu.edu  
Title: Interactive Visualization of Triangular Bezier Surfaces  
Author: Subodh Kumar 
Keyword: Figure 1: Teapot base: a triangle-shaped patch (shaded)  
Web: http://www.cs.jhu.edu/~subodh  
Address: Baltimore, MD, 21218. USA.  
Affiliation: Department of Computer Science Johns Hopkins University  
Abstract: We present an efficient algorithm for rendering surface models comprising triangular Bezier surfaces. Each surface patch is dynamically triangulated using uniform domain tessellation. The density of tessellation depends on the viewing position. The overall algorithm includes efficient visibility computation and use of coherence to perform incremental tessellation. The algorithm allows models to consist of both triangular and tensor-product surfaces and generates triangulations without cracks at surface boundaries. In addition, techniques to convert degenerate tensor-product surfaces to triangular form are presented. 
Abstract-found: 1
Intro-found: 1
Reference: [AES91] <author> S.S. Abi-Ezzi and L.A. Shirman. </author> <title> Tessellation of curved surfaces under highly varying transformations. </title> <booktitle> Proceedings of Eurographics, </booktitle> <pages> pages 385-397, </pages> <year> 1991. </year>
Reference-contexts: Often these surfaces are approximated with triangles for efficient display on current graphics systems. A one-time static tessellation typically requires the generation of a large number of triangles, which can lead to a slow rendering speed. However, recent advances in dynamic tessellation algorithms <ref> [RHD89, AES91, KML96] </ref> have resulted in significant speedup in rendering curved surfaces. Unfortunately, all of these algorithms assume the tensor-product representation. Due to the lack of support for displaying triangular Bezier surfaces, designers are restricted to using degenerate, tensor-product parametrization for triangular surfaces. <p> As a result they are not as efficient as the techniques based on surface polygonization. A number of different methods, based on adaptive or uniform subdivision, have been proposed for polygonization of tensor-product surfaces <ref> [RHD89, FK90, AES91, LC93, PR95, KML96] </ref>. Adaptive tessellation of triangular surfaces [Pet84, Fil86] have also been used. Surprisingly, however, literature seems silent on algorithms for uniform tessellation for triangular parametric surfaces.
Reference: [Cat74] <author> E. Catmull. </author> <title> A Subdivision Algorithm for Computer Display of Curved Surfaces. </title> <type> PhD thesis, </type> <institution> University of Utah, </institution> <year> 1974. </year>
Reference-contexts: Curved surface rendering has been an active area of research for more than two decades. The techniques based on pixel-level surface subdivision, ray tracing and scan-line display <ref> [Cat74, LCWB80, Kaj82, NSK90] </ref> (See [Kum96] for a treatise.) typically do not take advantage of hardware rendering acceleration available on current graphics systems. As a result they are not as efficient as the techniques based on surface polygonization.
Reference: [DGHM93] <author> T. DeRose, R. Goldman, H. Hagen, and S. Mann. </author> <title> Functional composition algorithm via blossoming. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 12(2) </volume> <pages> 113-135, </pages> <year> 1993. </year>
Reference-contexts: Since det [u u u v ] 6= 0, we obtain the exact Bezier triangle. To obtain the control points of the corresponding triangular patch, we can employ functional composition <ref> [DGHM93] </ref>. However, a degree m fi n tensor-product patch can result in degree (m + n) triangular surface. This increase in degree not only slows down the surface evaluation (which is quadratic in degree), but also induces stability problems in computation of bounds on surface derivatives.
Reference: [DMS92] <author> W. Dahmen, C. Michelli, </author> <title> and H.P. Seidel. Blossoming begets B-spline bases built better by B-patches. </title> <journal> Mathematics of Computation, </journal> <volume> 59(199) </volume> <pages> 97-115, </pages> <year> 1992. </year>
Reference-contexts: Sabin [Sab77] first generalized Bezier to triangular B-splines. The theory of triangular NURBS has been further developed recently by Dahmen et al. <ref> [DMS92] </ref>. c = (001) a = (100) w u = 0 . q We use the barycentric coordinates of the domain triangle. In Fig. 2, the triangle abc represents the domain triangle. Each point on the domain is represented by three coordinates, (u; v; w).
Reference: [Far93] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1993. </year>
Reference-contexts: We equate the control points F u along u = 0 and those of F h along u = 0. First, we must elevate the degree <ref> [Far93] </ref> of F to n + 1 in order to ensure that we have the same number of control points on both sides.
Reference: [Fil86] <author> D. </author> <title> Filip. Adaptive subdivision algorithms for a set of Bezier triangles. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 18(2) </volume> <pages> 74-78, </pages> <year> 1986. </year>
Reference-contexts: As a result they are not as efficient as the techniques based on surface polygonization. A number of different methods, based on adaptive or uniform subdivision, have been proposed for polygonization of tensor-product surfaces [RHD89, FK90, AES91, LC93, PR95, KML96]. Adaptive tessellation of triangular surfaces <ref> [Pet84, Fil86] </ref> have also been used. Surprisingly, however, literature seems silent on algorithms for uniform tessellation for triangular parametric surfaces. As shown by a study in [Kum96], uniform tessellation algorithms often outperform adaptive algorithms as they do not require multiple termination tests.
Reference: [FK90] <author> D.R. Forsey and V. Klassen. </author> <title> An adaptive subdivision algorithm for crack prevention in the display of parametric surfaces. </title> <booktitle> In Proc. Graphics Interface, </booktitle> <pages> pages 1-8, </pages> <year> 1990. </year>
Reference-contexts: As a result they are not as efficient as the techniques based on surface polygonization. A number of different methods, based on adaptive or uniform subdivision, have been proposed for polygonization of tensor-product surfaces <ref> [RHD89, FK90, AES91, LC93, PR95, KML96] </ref>. Adaptive tessellation of triangular surfaces [Pet84, Fil86] have also been used. Surprisingly, however, literature seems silent on algorithms for uniform tessellation for triangular parametric surfaces.
Reference: [IW92] <author> K. Iino and D. Wilde. </author> <title> Subdivision of triangular Bezier patches into rectangular Bezier patches. </title> <journal> Transactions of the ASME, </journal> <year> 1992. </year>
Reference-contexts: This paper extends the results of Kumar et al. [KML96, Kum96] to triangular domains. In particular, it presents algorithms for view-point dependent uniform sampling and tessellation of triangular patches. While it is possible to reparametrize a triangular domain onto a rectangular domain <ref> [IW92] </ref> and then apply the algorithms designed for tensor-product surfaces, that defeats the purpose of using triangular Bezier surfaces (see section 3). We present an algorithm to directly generate (planar) triangle strips for triangular Bezier patches. This algorithm is similar in approach to that for display of tensor-product surfaces [Kum96].
Reference: [Kaj82] <author> J. Kajiya. </author> <title> Ray tracing parametric patches. </title> <journal> ACM Computer Graphics, </journal> <volume> 6(3) </volume> <pages> 245-254, </pages> <year> 1982. </year> <note> (SIG-GRAPH Proceedings). </note>
Reference-contexts: Curved surface rendering has been an active area of research for more than two decades. The techniques based on pixel-level surface subdivision, ray tracing and scan-line display <ref> [Cat74, LCWB80, Kaj82, NSK90] </ref> (See [Kum96] for a treatise.) typically do not take advantage of hardware rendering acceleration available on current graphics systems. As a result they are not as efficient as the techniques based on surface polygonization.
Reference: [KM96] <author> S. Kumar and D. Manocha. </author> <title> Hierarchical visibility culling for spline models. </title> <booktitle> In Proc. Graphics Interface, </booktitle> <pages> pages 142-150, </pages> <address> Toronto, Canada, </address> <year> 1996. </year>
Reference-contexts: In section 2 we present the mathematical basics to introduce our notation. Section 3 presents the reparametriza-tion technique we use to rid our models of degenerate parametrization. The recently discovered back-patch visibility computation algorithm <ref> [KM96] </ref> extends rather trivially to triangular surfaces and is briefly described in section 4. The sampling theory for tensor-product patches extends quite gracefully to triangular patches as described in section 5. We present the tessellation algorithm for triangular surfaces in section 6. <p> The cross product N = W 4 = W 3 is a degree 3n triangular Bezier patch. Once we compute the bounding volumes of the control points of this patch, we store the volumes in a ON E-tree <ref> [KM96] </ref>. The tree traversal algorithm of [KM96] then culls the patch if the volume lies in back-space. 5 Sampling In order to generate sufficiently dense (with respect to the current view-point) tessellation for a surface patch, we impose restrictions on the property of triangles generated. <p> The cross product N = W 4 = W 3 is a degree 3n triangular Bezier patch. Once we compute the bounding volumes of the control points of this patch, we store the volumes in a ON E-tree <ref> [KM96] </ref>. The tree traversal algorithm of [KM96] then culls the patch if the volume lies in back-space. 5 Sampling In order to generate sufficiently dense (with respect to the current view-point) tessellation for a surface patch, we impose restrictions on the property of triangles generated.
Reference: [KML95] <author> S. Kumar, D. Manocha, and A. Lastra. </author> <title> Interactive display of large scale NURBS models. </title> <booktitle> In Proc. Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 51-58, </pages> <address> Monterey, CA, </address> <year> 1995. </year>
Reference-contexts: If F is trimmed, we retain the same trimming curve equations. These equations evaluate to point (u; v) on the domain of F. We simply transform the result to (u; v; w) on the domain of F before performing the triangulation. 4 Visibility Recently <ref> [KML95] </ref> introduced the concept of back-patch culling to discard Bezier patches facing away from the viewpoint in addition to those outside the viewing frustum. A patch is marked as outside the viewing frustum if all its control points lie outside the frustum. <p> The pseudo-normal surface for a degree m fi n tensor-product patch, F, is N = F u fi F v , which was shown to be a Bezier patch of degree 3m fi 3n by <ref> [KML95] </ref>. The pseudo-normal patch for a triangular Bezier patch is computed similarly; only F u and F v are directional derivatives along the primary axis, namely, D u (F) and D v (F), each of which is a degree 2n triangular Bezier patch.
Reference: [KML96] <author> S. Kumar, D. Manocha, and A. Lastra. </author> <title> Interactive display of large NURBS models. </title> <journal> IEEE Transactions on Visualization and Computer Graphics, </journal> <volume> 2(4) </volume> <pages> 323-336, </pages> <month> Dec </month> <year> 1996. </year>
Reference-contexts: Often these surfaces are approximated with triangles for efficient display on current graphics systems. A one-time static tessellation typically requires the generation of a large number of triangles, which can lead to a slow rendering speed. However, recent advances in dynamic tessellation algorithms <ref> [RHD89, AES91, KML96] </ref> have resulted in significant speedup in rendering curved surfaces. Unfortunately, all of these algorithms assume the tensor-product representation. Due to the lack of support for displaying triangular Bezier surfaces, designers are restricted to using degenerate, tensor-product parametrization for triangular surfaces. <p> A triangular domain provides a better behaved parametrization for such surfaces. If such a triangular patch is ill-parametrized as a tensor product, we convert it to the more appropriate triangular form. This paper extends the results of Kumar et al. <ref> [KML96, Kum96] </ref> to triangular domains. In particular, it presents algorithms for view-point dependent uniform sampling and tessellation of triangular patches. <p> As a result they are not as efficient as the techniques based on surface polygonization. A number of different methods, based on adaptive or uniform subdivision, have been proposed for polygonization of tensor-product surfaces <ref> [RHD89, FK90, AES91, LC93, PR95, KML96] </ref>. Adaptive tessellation of triangular surfaces [Pet84, Fil86] have also been used. Surprisingly, however, literature seems silent on algorithms for uniform tessellation for triangular parametric surfaces. <p> Our desire to interactively render large models made of triangular Bezier surfaces inspired us to investigate uniform tessellation for triangular patches. We present such an algorithm which has the performance characteristics similar to the one for tensor-product surfaces <ref> [KML96] </ref> and can render more than ten thousand Gouraud shaded triangular patches per second on an SGI Indigo 2 with Maximum Impact graphics. The main components of our algorithm are: 1. Re-parametrize degenerate tensor-product patches on a triangular domain 2. <p> A patch is marked as outside the viewing frustum if all its control points lie outside the frustum. Similarly a patch is marked as back-facing if all its normals face away from the view point. This condition can be verified by checking if a bounding volume of the pseudo-normal <ref> [KML96] </ref> surface of the patch lies in the back-space (shaded region in Fig. 5). The pseudo-normal surface for a degree m fi n tensor-product patch, F, is N = F u fi F v , which was shown to be a Bezier patch of degree 3m fi 3n by [KML95]. <p> Interestingly, if we generalize this technique to tensor-product surfaces and compute F d = min (jF u+v j max ; jF uv j max ) 1 in addition to jF u j max and jF v j max , we can reduce the total number of triangles generated by <ref> [KML96] </ref>: Instead of using M u p 2 and M v p respectively, for the step-sizes along the u and v axes we can choose max ( M u p 2 ; F d ) and max ( M v p 2 ; F d ), respectively. <p> In order to avoid these cracks, while still allowing the two patches to be tessellated independently, we sample the interior separately from the boundary curves. Thus the 1 The maxima are computed coordinate-wise. See <ref> [KML96] </ref> for details. sampling algorithm also computes ffi 1 , ffi 2 and ffi 3 , the number of samples needed to satisfactorily tessellate each boundary curve. <p> Thus only a small update of triangulation is needed each frame. In fact, the incremental tessellation can be performed in O (# samples added or deleted). If trimming curves are present, this is the expected complexity [Kum96]. Like <ref> [KML96] </ref>, our uniform tessellation algorithm has the property that a whole row or column of samples is updated at a time. Thus the cache management algorithm of [KML96] for incremental placement of event rows or columns for tensor-product surfaces extends directly to the triangular case. <p> If trimming curves are present, this is the expected complexity [Kum96]. Like <ref> [KML96] </ref>, our uniform tessellation algorithm has the property that a whole row or column of samples is updated at a time. Thus the cache management algorithm of [KML96] for incremental placement of event rows or columns for tensor-product surfaces extends directly to the triangular case. We add a row between two adjacent rows that have the maximum difference in the magnitude of their derivatives in the corresponding direction. <p> Columns updates are analogous. 7 Implementation and Performance We have presented an efficient algorithm for displaying Bezier triangles. The complexity of this algorithm is linear in the number of updates needed, which matches that of the algorithm to tessellate tensor-product patches <ref> [KML96] </ref>. The general pipeline of our algorithm is also similar to that of [KML96]. In addition, the visibility and coherence management schemes of [KML96] extend trivially to the triangular case due to the choice of our tessellation strategy. We have implemented and tested our algorithm on a number of models. <p> The complexity of this algorithm is linear in the number of updates needed, which matches that of the algorithm to tessellate tensor-product patches <ref> [KML96] </ref>. The general pipeline of our algorithm is also similar to that of [KML96]. In addition, the visibility and coherence management schemes of [KML96] extend trivially to the triangular case due to the choice of our tessellation strategy. We have implemented and tested our algorithm on a number of models. <p> The complexity of this algorithm is linear in the number of updates needed, which matches that of the algorithm to tessellate tensor-product patches <ref> [KML96] </ref>. The general pipeline of our algorithm is also similar to that of [KML96]. In addition, the visibility and coherence management schemes of [KML96] extend trivially to the triangular case due to the choice of our tessellation strategy. We have implemented and tested our algorithm on a number of models.
Reference: [KMZH97] <author> S. Kumar, D. Manocha, H. Zhang, and K. Hoff. </author> <title> Accelerated walkthrough of large spline models. </title> <booktitle> In Proc. Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 91-101, </pages> <address> Providence, RI, </address> <year> 1997. </year>
Reference-contexts: This matches the rendering rates we achieved for the tensor-product patches. Dynamic tessellation achieves better frame rates for highly varying viewing transformation. On the other hand, employing static levels of detail can produce LODs with much fewer triangles for far-away models. Combining static and dynamic tessellations <ref> [KMZH97] </ref> can yield significant model size reduction and rendering speed-up over a large range of view-points. For further analysis of dynamic tessellation we refer the reader to [Kum96].
Reference: [Kum96] <author> S. Kumar. </author> <title> Interactive Rendering of Parametric Spline Surfaces. </title> <type> PhD thesis, </type> <institution> University of North Carolina, Department of Computer Science, </institution> <year> 1996. </year> <note> Also available as UNC Technical Report TR96-039. </note>
Reference-contexts: A triangular domain provides a better behaved parametrization for such surfaces. If such a triangular patch is ill-parametrized as a tensor product, we convert it to the more appropriate triangular form. This paper extends the results of Kumar et al. <ref> [KML96, Kum96] </ref> to triangular domains. In particular, it presents algorithms for view-point dependent uniform sampling and tessellation of triangular patches. <p> We present an algorithm to directly generate (planar) triangle strips for triangular Bezier patches. This algorithm is similar in approach to that for display of tensor-product surfaces <ref> [Kum96] </ref>. This similarity allows us to mix triangular and tensor-product surfaces in the same model and generate tessellations free of cracks between adjacent surfaces even if they are parametrized on different domains. Curved surface rendering has been an active area of research for more than two decades. <p> Curved surface rendering has been an active area of research for more than two decades. The techniques based on pixel-level surface subdivision, ray tracing and scan-line display [Cat74, LCWB80, Kaj82, NSK90] (See <ref> [Kum96] </ref> for a treatise.) typically do not take advantage of hardware rendering acceleration available on current graphics systems. As a result they are not as efficient as the techniques based on surface polygonization. <p> Adaptive tessellation of triangular surfaces [Pet84, Fil86] have also been used. Surprisingly, however, literature seems silent on algorithms for uniform tessellation for triangular parametric surfaces. As shown by a study in <ref> [Kum96] </ref>, uniform tessellation algorithms often outperform adaptive algorithms as they do not require multiple termination tests. Our desire to interactively render large models made of triangular Bezier surfaces inspired us to investigate uniform tessellation for triangular patches. <p> These properties include on-screen size of the triangles, their deviation from the surface, etc. <ref> [Kum96] </ref> discusses several other tessellation criteria. These criteria require the evaluation of bounds on the maximum magnitude of different surface derivatives. <p> One commonly employed assurance is a user-specified bound on the screen size of the triangles generated: To assure this bound we need to compute the maximum magnitudes of the first derivatives of a given surface patch in screen coordinates. Given , <ref> [Kum96] </ref> shows how the computation of the sampling size (assuming uniform sampling) may be decomposed into an expensive object space computation and a cheap screen space transformation: 1. <p> Along each dimension, determine ffi o , the number of domain steps needed to ensure that each resulting triangle has no edge larger than o in object space. This is an off-line process. 2. At run time, find S, the minimum scaling factor <ref> [Kum96] </ref> of vectors due to viewing transformation. A step size of ffi = ffi o S guarantees that the screen size of each edge of the resulting triangle is less than . <p> This is equivalent to finding the maxima of differences of partial derivatives M w = jF u F v j; M v = jF u F w j and M u = jF v F w j: These maxima are computed using the method of resultants <ref> [MD94, Kum96] </ref>. A domain step-size of ffi o in the direction parallel to u = 0 results in an object space step-size of no more than M w ffi o (by mean value theorem). <p> Stage 2, the on-line part, is exactly the same as that for tensor-product patches. For each patch, we compute its maximum scaling factor <ref> [Kum96] </ref> for the current frame and multiply the corresponding ffi o by the factor. This sampling algorithm computes ffi u , ffi v , and ffi w , the step sizes needed in each of the primary directions. <p> This implies that the sampling required for a guaranteed triangulation quality changes slowly. Indeed, more than 80% of the patches <ref> [Kum96] </ref> do not need to be re-triangulated in an average frame of a typical animation sequence. We take advantage of this property by adding or deleting only a row or a column of samples at a time. <p> Thus only a small update of triangulation is needed each frame. In fact, the incremental tessellation can be performed in O (# samples added or deleted). If trimming curves are present, this is the expected complexity <ref> [Kum96] </ref>. Like [KML96], our uniform tessellation algorithm has the property that a whole row or column of samples is updated at a time. Thus the cache management algorithm of [KML96] for incremental placement of event rows or columns for tensor-product surfaces extends directly to the triangular case. <p> Combining static and dynamic tessellations [KMZH97] can yield significant model size reduction and rendering speed-up over a large range of view-points. For further analysis of dynamic tessellation we refer the reader to <ref> [Kum96] </ref>.
Reference: [LC93] <author> W.L. Luken and Fuhua Cheng. </author> <title> Rendering trimmed NURB surfaces. </title> <institution> Computer science research report 18669(81711), IBM Research Division, </institution> <year> 1993. </year>
Reference-contexts: As a result they are not as efficient as the techniques based on surface polygonization. A number of different methods, based on adaptive or uniform subdivision, have been proposed for polygonization of tensor-product surfaces <ref> [RHD89, FK90, AES91, LC93, PR95, KML96] </ref>. Adaptive tessellation of triangular surfaces [Pet84, Fil86] have also been used. Surprisingly, however, literature seems silent on algorithms for uniform tessellation for triangular parametric surfaces.
Reference: [LCWB80] <author> J.M. Lane, L.C. Carpenter, J. T. Whitted, and J.F. </author> <title> Blinn. Scan line methods for displaying parametrically defined surfaces. </title> <journal> Communications of ACM, </journal> <volume> 23(1) </volume> <pages> 23-34, </pages> <year> 1980. </year>
Reference-contexts: Curved surface rendering has been an active area of research for more than two decades. The techniques based on pixel-level surface subdivision, ray tracing and scan-line display <ref> [Cat74, LCWB80, Kaj82, NSK90] </ref> (See [Kum96] for a treatise.) typically do not take advantage of hardware rendering acceleration available on current graphics systems. As a result they are not as efficient as the techniques based on surface polygonization.
Reference: [MD94] <author> D. Manocha and J. Demmel. </author> <title> Algorithms for intersecting parametric and algebraic curves i: simple intersections. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 13(1) </volume> <pages> 73-100, </pages> <year> 1994. </year>
Reference-contexts: This is equivalent to finding the maxima of differences of partial derivatives M w = jF u F v j; M v = jF u F w j and M u = jF v F w j: These maxima are computed using the method of resultants <ref> [MD94, Kum96] </ref>. A domain step-size of ffi o in the direction parallel to u = 0 results in an object space step-size of no more than M w ffi o (by mean value theorem).
Reference: [NSK90] <author> T. Nishita, T.W. Sederberg, and M. Kakimoto. </author> <title> Ray tracing trimmed rational surface patches. </title> <journal> ACM Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 337-345, </pages> <year> 1990. </year> <note> (SIG-GRAPH Proceedings). </note>
Reference-contexts: Curved surface rendering has been an active area of research for more than two decades. The techniques based on pixel-level surface subdivision, ray tracing and scan-line display <ref> [Cat74, LCWB80, Kaj82, NSK90] </ref> (See [Kum96] for a treatise.) typically do not take advantage of hardware rendering acceleration available on current graphics systems. As a result they are not as efficient as the techniques based on surface polygonization.
Reference: [Pet84] <author> C. Peterson. </author> <title> Adaptive contouring of three-dimensional surfaces. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 1 </volume> <pages> 61-74, </pages> <year> 1984. </year>
Reference-contexts: As a result they are not as efficient as the techniques based on surface polygonization. A number of different methods, based on adaptive or uniform subdivision, have been proposed for polygonization of tensor-product surfaces [RHD89, FK90, AES91, LC93, PR95, KML96]. Adaptive tessellation of triangular surfaces <ref> [Pet84, Fil86] </ref> have also been used. Surprisingly, however, literature seems silent on algorithms for uniform tessellation for triangular parametric surfaces. As shown by a study in [Kum96], uniform tessellation algorithms often outperform adaptive algorithms as they do not require multiple termination tests.
Reference: [PR95] <author> L. Piegl and A. Richard. </author> <title> Tessellating trimmed NURBS surfaces. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 27(1) </volume> <pages> 16-26, </pages> <year> 1995. </year>
Reference-contexts: As a result they are not as efficient as the techniques based on surface polygonization. A number of different methods, based on adaptive or uniform subdivision, have been proposed for polygonization of tensor-product surfaces <ref> [RHD89, FK90, AES91, LC93, PR95, KML96] </ref>. Adaptive tessellation of triangular surfaces [Pet84, Fil86] have also been used. Surprisingly, however, literature seems silent on algorithms for uniform tessellation for triangular parametric surfaces.
Reference: [RHD89] <author> A. Rockwood, K. Heaton, and T. Davis. </author> <title> Real-time rendering of trimmed surfaces. </title> <journal> ACM Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 107-117, </pages> <year> 1989. </year> <note> (SIGGRAPH Proceedings). </note>
Reference-contexts: Often these surfaces are approximated with triangles for efficient display on current graphics systems. A one-time static tessellation typically requires the generation of a large number of triangles, which can lead to a slow rendering speed. However, recent advances in dynamic tessellation algorithms <ref> [RHD89, AES91, KML96] </ref> have resulted in significant speedup in rendering curved surfaces. Unfortunately, all of these algorithms assume the tensor-product representation. Due to the lack of support for displaying triangular Bezier surfaces, designers are restricted to using degenerate, tensor-product parametrization for triangular surfaces. <p> As a result they are not as efficient as the techniques based on surface polygonization. A number of different methods, based on adaptive or uniform subdivision, have been proposed for polygonization of tensor-product surfaces <ref> [RHD89, FK90, AES91, LC93, PR95, KML96] </ref>. Adaptive tessellation of triangular surfaces [Pet84, Fil86] have also been used. Surprisingly, however, literature seems silent on algorithms for uniform tessellation for triangular parametric surfaces.
Reference: [Sab77] <author> M. Sabin. </author> <title> The Use of Piecewise Forms for Numerical Representation of Shape. </title> <type> PhD thesis, </type> <institution> Hungarian Academy of Sciences, </institution> <address> Budapest, </address> <year> 1977. </year>
Reference-contexts: We present the tessellation algorithm for triangular surfaces in section 6. Section 7 discusses some results of our prototype implementation and presents our conclusions. 2 Mathematical Background Bezier surfaces defined over a triangular domain are often called Bezier triangles. Sabin <ref> [Sab77] </ref> first generalized Bezier to triangular B-splines. The theory of triangular NURBS has been further developed recently by Dahmen et al. [DMS92]. c = (001) a = (100) w u = 0 . q We use the barycentric coordinates of the domain triangle.
References-found: 22

