URL: http://www.cs.bu.edu/~best/res/papers/icdcs97.ps
Refering-URL: http://cs-www.bu.edu/faculty/best/res/Home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (best@cs.bu.edu)  
Title: Load Profiling A Methodology for Scheduling Real-Time Tasks in a Distributed System  
Author: Azer Bestavros 
Address: Boston University, MA 02215  
Affiliation: Computer Science Department  
Date: May 1997.  
Note: In Proceedings of ICDCS'97: The IEEEInternational Conference on Distributed Computing Systems, Baltimore,Maryland,  
Abstract: Traditionally, the goal of load management protocols for distributed systems has been to ensure that nodes are equally loaded. In this paper, we show that for real-time systems, load balancing is not desirable since it results in the available bandwidth being distributed equally amongst all nodes|in effect making all nodes in the system capable of offering almost the same bandwidth (e.g., in cycles per second) to incoming tasks. We show that this "one size fits all" practice leads to a higher rate of missed deadlines as incoming tasks may be denied service because they require bandwidth that cannot be granted at any single node|while plenty of fragmented bandwidth is collectively available in the system. We propose a new load-profiling strategy that allows the nodes of a distributed system to be unequally loaded so as to maximize the chances of finding a node that would satisfy the computational needs of incoming real-time tasks. The performance of the proposed protocol is evaluated via simulation, and is contrasted to other dynamic scheduling protocols for real-time distributed systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Chetto and M. Chetto. </author> <title> Some results of the earliest deadline scheduling algorithm. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(10) </volume> <pages> 1261-1269, </pages> <month> October </month> <year> 1989. </year>
Reference: [2] <author> R. I. Davis, K. W. Tindell, and A. Burns. </author> <title> Scheduling slack time in fixed priority pre-emptive systems. </title> <booktitle> In Proceedings of the IEEE Real-time Systems Symposium, </booktitle> <pages> pages 222 - 231, </pages> <month> December </month> <year> 1993. </year>
Reference: [3] <author> M.L. Dertouzos and A.K. Mok. </author> <title> Multiprocessor on-line scheduling of hard-real-time tasks. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-15, </volume> <month> December </month> <year> 1989. </year>
Reference: [4] <author> D. L. Eager, E. D. Lazowska, and J. Zahorjan. </author> <title> Adaptive load sharing in homogeneous distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12:662-675, </volume> <month> May </month> <year> 1986. </year> <month> 7 </month>
Reference-contexts: A load-profiled system would tend to distribute this load in such a way that the probability of satisfying the utilization requirements of incoming tasks is maximized. Let S denote the set of nodes in the system. For distributed scheduling purposes, we assume the availability of a location policy <ref> [4] </ref> that allows a scheduler to select a subset of nodes from S that are believed to be be capable of satisfying the utilization requirement u of an incoming sporadic task. We denote this candidate set by C.
Reference: [5] <author> R. L. Graham et al. </author> <title> Optimization and approximation in deterministic sequencing and scheduling: A survey. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 5 </volume> <pages> 287-326, </pages> <year> 1979. </year>
Reference: [6] <author> M. Hailperin. </author> <title> Load Balancing Using Time Series Analysis for Soft Real Time Systems with Statistically Periodic Loads. </title> <type> PhD thesis, </type> <institution> Stanford University, Computer Science Department, </institution> <year> 1994. </year> <note> Also TR: CS-TR-94-1514. </note>
Reference: [7] <author> C. L. Liu and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in hard real-time environments. </title> <journal> Journal of the Assocation of Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference: [8] <author> C. McGeoch and J. Tygar. </author> <title> When are best fit and first fit optimal? In Proceedings of 1988 SIAM Conference of Discrete Mathematics, </title> <year> 1988. </year>
Reference-contexts: Since the perfect fit implied in equation 3 is known to be NP-hard, heuristics such as first-fit or best-fit are usually employed for on-line scheduling. Asymptotically, both the first-fit and best-fit heuristics are known to be optimal <ref> [8] </ref>. However, for a small value of N |which is likely to be the case in most distributed systems|best-fit outperforms first-fit. To quantify the benefits of load profiling versus load balancing, we performed a number of simulations to compare the schedulability of sporadic tasks under two task allocation strategies.
Reference: [9] <author> Michael Mitzenmacher. </author> <title> Large Markovian Particle Processes and Some Applications to Load Balancing. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, Berkeley, </institution> <address> CA, </address> <year> 1996. </year>
Reference-contexts: The fact that LPA without reforwarding delivers most of the performance gains achievable using LPA with reforwarding could be thought of as a generalization of the Markovian analysis of Mitzenmacher <ref> [9] </ref>, which considers a dynamic scheduling policy that randomly selects d out of n servers in a distributed system and then chooses one of these d servers based on some performance metric (e.g., queue length). The analysis and simulations in [9] show that a d value of 2 seems to deliver <p> of as a generalization of the Markovian analysis of Mitzenmacher <ref> [9] </ref>, which considers a dynamic scheduling policy that randomly selects d out of n servers in a distributed system and then chooses one of these d servers based on some performance metric (e.g., queue length). The analysis and simulations in [9] show that a d value of 2 seems to deliver most of the possible performance gains. LPA without reforwarding is a scheduling policy that examines exactly 2 servers for possibly executing an incoming sporadic task. <p> LPA with re-forwarding could be thought of as a scheduling policy that examines d servers through successive forwarding, where 2 t d n. While the results in <ref> [9] </ref> were only targetted at systems that attempt to balance their load, our simulations illustrated in figure 6 suggest that these results also hold for systems that attempt to profile their load. protocol to other load-cognizant algorithms, namely the focused addressing and bidding mechanisms [14], as well as to load-incognizant algorithms,
Reference: [10] <author> K. Ramamritham, J. Stankovic, and W. Zhao. </author> <title> Distributed scheduling of tasks with deadlines and resource requirements. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-38, </volume> <month> August </month> <year> 1989. </year>
Reference: [11] <author> Krithi Ramamritham and John Stankovic. </author> <title> Scheduling strategies adopted in spring: An overview. </title> <type> Technical Report COINS-TR-91-45, </type> <institution> University of Massachusetts at Amherst, </institution> <month> December </month> <year> 1991. </year>
Reference: [12] <author> C. Shen, K. Ramamritham, and J. A. Stankovic. </author> <title> Resource reclaiming in real-time. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 41 - 50, </pages> <month> December </month> <year> 1989. </year>
Reference: [13] <author> John Stankovic. </author> <title> Stability and distributed scheduling algorithms. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 1141-1152, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: GossipDelay and Multicas-tSet are chosen in such a way that the dissemination of major workload changes is guaranteed to propagate fast enough using both MULTICAST and GOSSIP. This is necessary to ensure stability <ref> [13] </ref>. Generally speaking, by reducing the value of GossipDelay (i.e. by gossiping frequently), the size of MulticastSet is reduced.
Reference: [14] <author> John Stankovic and Krithi Ramamritham. </author> <title> The Spring Kernel: A new paradigm for real-time operating systems. </title> <journal> ACM Operating Systems Review, </journal> <volume> 23(3) </volume> <pages> 54-71, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: While the results in [9] were only targetted at systems that attempt to balance their load, our simulations illustrated in figure 6 suggest that these results also hold for systems that attempt to profile their load. protocol to other load-cognizant algorithms, namely the focused addressing and bidding mechanisms <ref> [14] </ref>, as well as to load-incognizant algorithms, namely a random forwarding mechanism and a no-forwarding (local scheduling only) mechanism. Our LPA protocol performs demonstrably better than all others, especially under moderate and heavy loads.
Reference: [15] <author> John Stankovic, Krithi Ramamritham, and S. Cheng. </author> <title> Evaluation of a flexible task scheduling algorithm for distributed hard real-time systems. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 1130-1143, </pages> <month> December </month> <year> 1985. </year>
Reference: [16] <author> John Stankovic, Krithi Ramamritham, and S. Cheng. </author> <title> The Spring Kernel: A new paradigm for real-time systems. </title> <journal> IEEE Software, </journal> <pages> pages 54-71, </pages> <month> May </month> <year> 1992. </year>
Reference: [17] <author> S. R. Thuel and J. P. Lehoczky. </author> <title> Algorithms for scheduling hard aperiodic tasks in fixed-priority systems using slack stealing. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 22 - 33, </pages> <month> December </month> <year> 1994. </year>
Reference: [18] <author> Songnian Zhou. </author> <title> Performance Studies of Dynamic Load Balancing in Distributed Systems. </title> <type> PhD thesis, </type> <institution> University of California Berkeley, Computer Science Department, </institution> <year> 1987. </year> <note> Also TR: CSD-87-376. 8 </note>
References-found: 18

