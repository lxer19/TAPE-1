URL: ftp://ftp.cs.washington.edu/tr/1993/06/UW-CSE-93-06-03.PS.Z
Refering-URL: http://www.cs.washington.edu/research/projects/ai/www/bur.html
Root-URL: 
Email: weldg@cs.washington.edu  
Title: An Algorithm for Probabilistic Planning  
Author: Nicholas Kushmerick Steve Hanks Daniel Weld fnick, hanks, 
Date: March 10, 1994  93-06-03  
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  
Pubnum: Technical Report  
Abstract: We define the probabilistic planning problem in terms of a probability distribution over initial world states, a boolean combination of propositions representing the goal, a probability threshold, and actions whose effects depend on the execution-time state of the world and on random chance. Adopting a probabilistic model complicates the definition of plan success: instead of demanding a plan that provably achieves the goal, we seek plans whose probability of success exceeds the threshold. In this paper, we present buridan, an implemented least-commitment planner that solves problems of this form. We prove that the algorithm is both sound and complete. We then explore buridan's efficiency by contrasting four algorithms for plan evaluation, using a combination of analytic methods and empirical experiments. We also describe the interplay between generating plans and evaluating them, and discuss the role of search control in probabilistic planning. fl We gratefully acknowledge the comments and suggestions of Tony Barrett, Tom Dean, Denise Draper, Mike Erdmann, Keith Golden, Rex Jacobovits, Oren Etzioni, Neal Lesh, Mike Wellman, Mike Williamson, and the anonymous reviewers. This research was funded in part by National Science Foundation Grants IRI-9206733 and IRI-8957302, Office of Naval Research Grant 90-J-1904, and the Xerox Corporation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> J. Allen, J. Hendler, and A. Tate, editors. </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1990. </year>
Reference: [2] <author> J Ambros-Ingerson and S. Steel. </author> <title> Integrating planning, execution, and monitoring. </title> <booktitle> In Proc. 7th Nat. Conf. on Artificial Intelligence, </booktitle> <pages> pages 735-740, </pages> <year> 1988. </year>
Reference-contexts: Another extension would allow buridan to handle probabilistic exogenous events and incorporate the model of sensing and information advanced in the uwl language [20]. We'd like to integrate Peot and Smith's [52] algorithm for generating conditional plans with this framework and to consider interleaved planning and execution <ref> [2, 43, 35] </ref> as well. Recent work on c-buridan [16, 15] has addressed some of these issues. We also hope to introduce an explicit temporal model (perhaps using ideas from zeno [48, 49]) so we can represent deadline goals.
Reference: [3] <author> J. Breese, R. Goldman, and M. Wellman, </author> <title> editors. </title> <booktitle> Notes from the Ninth National Conference on Artificial Intelligence (AAAI-91) Workshop on Knowledge-Based Construction of Probabilistic and Decision Models. AAAI, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: Recent work, however, has recognized the importance of interleaving the model-construction and the model-solution problems, both in general [25] and as applied to the planning problem in particular [51]. Also see <ref> [3] </ref> for a survey of work in this area. 40 7.4 Probabilistic temporal reasoning The representation for the network algorithm is similar to the network proposed by Dean and Kanazawa [13].
Reference: [4] <author> R. Brost. </author> <title> Automatic grasp planning in the presence of uncertainty. </title> <journal> International Journal of Robotics Research, </journal> <volume> 7(1) </volume> <pages> 3-17, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: An interesting connection between these approaches and ours is the analogy between the use of compliant motion and conditional effects for reducing uncertainty, but there are more differences than similarities. Most obvious is their emphasis on geometry. Second, they model sensing actions (but see Brost <ref> [4] </ref>) which are omitted from buridan, though the extensions cited above address that deficiency. Third, their preimage notion of uncertainty bears more of a resemblance to a possible-worlds model of incomplete information than our probabilistic model.
Reference: [5] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: For example, there exist domains in which the number of states with non-zero probability grows exponentially with the length of the plan. This inefficiency motivates a second focus of our research, an investigation of alternative assessment algorithms. Since the general plan assessment problem is NP-hard <ref> [5, 8] </ref>, we can not hope to produce an assessment algorithm that runs efficiently in every domain. However, by exploiting the structure of the actions, goals and state space, we can sometimes realize tremendous efficiency gains. <p> Support for this 8 We ignore separation (the addition of variable-binding constraints <ref> [5] </ref>) since buridan is propositional. Lifting techniques [39] could be used to extend buridan to a more expressive language. 17 subgoal is then provided by linking directly to the initial action A 0 with the link A 0;ff GD !A 1 . The resulting plan is shown in Figure 6. <p> On the one hand, results on classical planning with infinite state spaces <ref> [5, 19] </ref> do not apply because buridan's state space is propositional and does not allow functions (thus is finite). <p> This section examines plan assessment in isolation. Assessing an arbitrary partially ordered plan with conditional effects is NP-hard even when all probabilities are zero or one <ref> [5, 10] </ref>.
Reference: [6] <author> L. Chrisman. </author> <title> Abstract Probabilistic Modeling of Action. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <year> 1992. </year>
Reference-contexts: Recent results [9] also suggest that an approximation algorithm may not be more effective than an exact method. 7.5 Action representation and plan evaluation Our action representation comes from Hanks's work [29, 30, 28] on probabilistic projection. Chrisman <ref> [6] </ref> develops an action representation and projection rule for planning under uncertainty, and Martin and Allen [38] develop statistical techniques to gather probabilities like the ones our algorithm uses. None of this work directly addresses the problem of plan generation.
Reference: [7] <author> G. Collins and L. Pryor. </author> <title> Achieving the functionality of filter conditions in a partial order planner. </title> <booktitle> In Proc. 10th Nat. Conf. on Artificial Intelligence, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: They exploit multiattribute utility theory to devise techniques for composing separate preference specifications. 7.6 Classical planning Dealing with state-dependent effects is an essential requirement for any useful probabilistic planner. In this regard buridan can be seen as generalizing the work on planning with deterministic conditional effects, e.g. in <ref> [47, 7, 50] </ref>. A deterministic form of confrontation is used in ucpop [50]. Pednault's adl language allowed for disjunctive effects and he used them to solve a simple symbolic version of the "Bomb in the Toilet" example [46] which we extended in Section 6.
Reference: [8] <author> G. Cooper. </author> <title> The computational complexity of probabilistic inference using bayesian belief networks. </title> <journal> Artificial Intelligence, </journal> <volume> 42, </volume> <year> 1990. </year>
Reference-contexts: For example, there exist domains in which the number of states with non-zero probability grows exponentially with the length of the plan. This inefficiency motivates a second focus of our research, an investigation of alternative assessment algorithms. Since the general plan assessment problem is NP-hard <ref> [5, 8] </ref>, we can not hope to produce an assessment algorithm that runs efficiently in every domain. However, by exploiting the structure of the actions, goals and state space, we can sometimes realize tremendous efficiency gains. <p> This section examines plan assessment in isolation. Assessing an arbitrary partially ordered plan with conditional effects is NP-hard even when all probabilities are zero or one [5, 10]. While refine doesn't generate arbitrary partial orders, we believe that the additional complexity of probabilistic computations <ref> [8] </ref> can make assessment (even of a totally ordered plan) require time that is exponential in the length of the plan | the computation might require considering all combinations of consequences of every action in the plan.
Reference: [9] <author> P. Dagum and M. Luby. </author> <title> Approximating Probabilistic Inference in Bayesian Networks is NP-Hard. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 141-153, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Although our experiments with the network assessment algorithm showed that the Jensen clustering algorithm is probably inappropriate for problems of this type, other approaches might be more suitable. Dean and Kanazawa [13] advocate stochastic simulation techniques, but these lack convergence bounds and thus sacrifice soundness and completeness. Recent results <ref> [9] </ref> also suggest that an approximation algorithm may not be more effective than an exact method. 7.5 Action representation and plan evaluation Our action representation comes from Hanks's work [29, 30, 28] on probabilistic projection.
Reference: [10] <author> T. Dean and M. Boddy. </author> <title> Reasoning about partially ordered events. </title> <journal> Artificial Intelligence, </journal> <volume> 36(3) </volume> <pages> 375-400, </pages> <month> October </month> <year> 1988. </year> <note> Reprinted in [56]. </note>
Reference-contexts: This section examines plan assessment in isolation. Assessing an arbitrary partially ordered plan with conditional effects is NP-hard even when all probabilities are zero or one <ref> [5, 10] </ref>.
Reference: [11] <author> T. Dean and M. Wellman. </author> <title> Planning and Control. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Donald's work [14] extends the basic LMT paradigm to handle incomplete knowledge of the world's geometry and to provide error detection and recovery. 7.3 Graphical decision models Work on graphical probabilistic and decision models (see Howard [32], Pearl [44], or the overview in <ref> [11, Chapter 7] </ref>) also deals with decision making and planning problems, but has focused more on solving a given probabilistic or decision model whereas our algorithm interleaves the process of constructing and evaluating solutions.
Reference: [12] <author> Thomas Dean, Leslie Kaelbling, Jak Kirman, and Ann Nicholson. </author> <title> Planning with deadlines in stochastic domains. </title> <booktitle> In Proc. 11th Nat. Conf. on Artificial Intelligence, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: More recent work divides according to how the planning problem is defined, and how states and operators are represented. Markov decision processes Several research efforts (e.g. <ref> [34, 12] </ref>) adopt a planning model based on fully observable Markov processes. There are two main differences between this work and ours.
Reference: [13] <author> Thomas Dean and Keiji Kanazawa. </author> <title> A model for reasoning about persistence and causation. </title> <journal> Computational Intelligence, </journal> <volume> 5 </volume> <pages> 142-150, </pages> <year> 1989. </year>
Reference-contexts: This strategy suggests using a belief network [44] for assessment whose is similar to that proposed by Dean and Kanazawa <ref> [13] </ref> and Hanks [31]. Figure 9 shows such a network for a domain with propositions fp 1 ; : : : ; p m g and a plan with action sequence hA i i N The graph consists of two types of nodes. <p> Dean and Kanazawa <ref> [13] </ref> argue that a stochastic simulation technique might be more suitable, but also point out the absence of convergence bounds for these algorithms. <p> Also see [3] for a survey of work in this area. 40 7.4 Probabilistic temporal reasoning The representation for the network algorithm is similar to the network proposed by Dean and Kanazawa <ref> [13] </ref>. As we discussed in Section 5, a totally ordered plan can be formulated as a probabilistic network allowing assessment to be performed using standard propagation techniques [44]. <p> Although our experiments with the network assessment algorithm showed that the Jensen clustering algorithm is probably inappropriate for problems of this type, other approaches might be more suitable. Dean and Kanazawa <ref> [13] </ref> advocate stochastic simulation techniques, but these lack convergence bounds and thus sacrifice soundness and completeness.
Reference: [14] <author> B. Donald. </author> <title> A geometric approach to error detection and recovery for robot motion planning with uncertainty. </title> <journal> Artificial Intelligence, </journal> <volume> 37 </volume> <pages> 223-271, </pages> <year> 1988 1988. </year>
Reference-contexts: Fourth, their focus is on planning strategies that are guaranteed to succeed despite uncertainty (as are the Markov-process approaches above); in contrast, buridan plans need only have probability of success that exceeds a user specified threshold. Donald's work <ref> [14] </ref> extends the basic LMT paradigm to handle incomplete knowledge of the world's geometry and to provide error detection and recovery. 7.3 Graphical decision models Work on graphical probabilistic and decision models (see Howard [32], Pearl [44], or the overview in [11, Chapter 7]) also deals with decision making and planning
Reference: [15] <author> D. Draper, S. Hanks, and D. Weld. </author> <title> A probabilistic model of action for least-commitment planning with information gathering. </title> <booktitle> In Proceedings, Uncertainty in AI, </booktitle> <year> 1994. </year> <note> Submitted. 51 </note>
Reference-contexts: A plan embodies the opposite assumption|that the agent will get no additional information about the world at execution time|so it might as well plan what to do ahead of time. Recent extensions to buridan <ref> [16, 15] </ref> take a middle ground: that information is available at execution time, but it has to be explicitly gathered, and is potentially inaccurate. Symbolic planning approaches Farley [21] proposes a similar action representation, though he attaches probabilities directly to postconditions rather than to sets of postcon-ditions. <p> Preliminary work by Goldman and Boddy [24] attacks a similar problem: building plans that are likely to achieve the goal, where likely is defined in terms of a threshold. They develop an extended action and plan representation that incorporates observations and contingencies, so a comparison to c-buridan <ref> [16, 15] </ref> is more apt. Their approach to planning is quite different from ours, however. They use a deterministic planner (based on cnlp [52]) and they manage uncertainty using an external probabilistic network model to assign probabilities to propositions with unknown truth values. <p> We'd like to integrate Peot and Smith's [52] algorithm for generating conditional plans with this framework and to consider interleaved planning and execution [2, 43, 35] as well. Recent work on c-buridan <ref> [16, 15] </ref> has addressed some of these issues. We also hope to introduce an explicit temporal model (perhaps using ideas from zeno [48, 49]) so we can represent deadline goals. This would allow us to consider integrating our probabilistic plan refinement algorithm with the utility model presented in [26].
Reference: [16] <author> D. Draper, S. Hanks, and D. Weld. </author> <title> Probabilistic planning with information gathering and contingent execution. </title> <booktitle> In Proceedings, AI Planning Systems, </booktitle> <year> 1994. </year>
Reference-contexts: A plan embodies the opposite assumption|that the agent will get no additional information about the world at execution time|so it might as well plan what to do ahead of time. Recent extensions to buridan <ref> [16, 15] </ref> take a middle ground: that information is available at execution time, but it has to be explicitly gathered, and is potentially inaccurate. Symbolic planning approaches Farley [21] proposes a similar action representation, though he attaches probabilities directly to postconditions rather than to sets of postcon-ditions. <p> Preliminary work by Goldman and Boddy [24] attacks a similar problem: building plans that are likely to achieve the goal, where likely is defined in terms of a threshold. They develop an extended action and plan representation that incorporates observations and contingencies, so a comparison to c-buridan <ref> [16, 15] </ref> is more apt. Their approach to planning is quite different from ours, however. They use a deterministic planner (based on cnlp [52]) and they manage uncertainty using an external probabilistic network model to assign probabilities to propositions with unknown truth values. <p> We'd like to integrate Peot and Smith's [52] algorithm for generating conditional plans with this framework and to consider interleaved planning and execution [2, 43, 35] as well. Recent work on c-buridan <ref> [16, 15] </ref> has addressed some of these issues. We also hope to introduce an explicit temporal model (perhaps using ideas from zeno [48, 49]) so we can represent deadline goals. This would allow us to consider integrating our probabilistic plan refinement algorithm with the utility model presented in [26].
Reference: [17] <author> M. Drummond and J. Bresina. </author> <title> Anytime Synthetic Projection: Maximizing the Probability of Goal Satisfaction. </title> <booktitle> In Proc. 8th Nat. Conf. on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: After these plans are built, the algorithm tries to merge the distinct plans. This approach is similar to the "robustification" approach proposed by Drummond and Bresina <ref> [17] </ref>. buridan can be forced to operate in this mode 39 (by allowing it to link to only a single initial state at a time), though the advantage of postponing the merging process to the end of the planning episode is not clear. <p> None of this work directly addresses the problem of plan generation. The query algorithm is described in [30, 28]; Drummond <ref> [17] </ref> presents an alternative algorithm for a similar problem. Haddawy and Hanks [26] motivate building a planner such as buridan.
Reference: [18] <author> M. Erdmann. </author> <title> On Motion Planning with Uncertainty. </title> <institution> AI-TR-810, MIT AI LAB, </institution> <month> August </month> <year> 1984. </year>
Reference-contexts: For example, Lozano-Perez, Mason and Taylor [36] introduced a backward chaining strategy (LMT) for motion planning given sensing and control uncertainty which has been extended by Erdmann <ref> [18] </ref> and others. An interesting connection between these approaches and ours is the analogy between the use of compliant motion and conditional effects for reducing uncertainty, but there are more differences than similarities. Most obvious is their emphasis on geometry.
Reference: [19] <author> K. Erol, D. Nau, and V. Subrahmanian. </author> <title> When is planning decidable? In Proc. </title> <booktitle> 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 222-227, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: On the one hand, results on classical planning with infinite state spaces <ref> [5, 19] </ref> do not apply because buridan's state space is propositional and does not allow functions (thus is finite).
Reference: [20] <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <month> October </month> <year> 1992. </year> <note> Available via anonymous FTP from ~ftp/pub/ai/ at cs.washington.edu. </note>
Reference-contexts: Another extension would allow buridan to handle probabilistic exogenous events and incorporate the model of sensing and information advanced in the uwl language <ref> [20] </ref>. We'd like to integrate Peot and Smith's [52] algorithm for generating conditional plans with this framework and to consider interleaved planning and execution [2, 43, 35] as well. Recent work on c-buridan [16, 15] has addressed some of these issues.
Reference: [21] <author> Arthur M. Farley. </author> <title> A Probabilistic Model for Uncertain Problem Solving. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 13(4), </volume> <month> July </month> <year> 1983. </year>
Reference-contexts: Recent extensions to buridan [16, 15] take a middle ground: that information is available at execution time, but it has to be explicitly gathered, and is potentially inaccurate. Symbolic planning approaches Farley <ref> [21] </ref> proposes a similar action representation, though he attaches probabilities directly to postconditions rather than to sets of postcon-ditions. His planning algorithm is linear and "progressive": it starts from the initial state (assumed unique) and builds linear plan sequences, always adding steps to the end of the plan.
Reference: [22] <author> J. Feldman and R. Sproull. </author> <booktitle> Decision theory and artificial intelligence II: The hungry monkey. Cognitive Science, </booktitle> <volume> 1 </volume> <pages> 158-192, </pages> <year> 1977. </year>
Reference-contexts: and the type of search control guidance that the assessor can provide. 38 7 Related Work Related work can be found in several areas: other AI approaches to probabilistic planning, robotic motion planning, decision models, and classical planning and plan evaluation techniques. 7.1 Probabilistic planning Several early pieces of work <ref> [22, 42] </ref> cast planning in probabilistic or decision-theoretic terms, but did not provide concrete representations or algorithms to solve the problem. More recent work divides according to how the planning problem is defined, and how states and operators are represented.
Reference: [23] <author> R. Fikes and N. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2(3/4), </volume> <year> 1971. </year>
Reference-contexts: Fourth, we compare the efficiency of four different probabilistic assessment algorithms both analytically and with empirical experiments. Finally, we explore the interface between the process of generating plans and the process of evaluating them. 1.1 Action representation Following [29], we extend the standard strips <ref> [23] </ref> representation to allow conditional and probabilistic effects. In strips, an action is "enabled" if its preconditions are satisfied when the action is executed, in which case the action has a deterministic effect.
Reference: [24] <author> Robert P. Goldman and Mark S. Boddy. </author> <title> Epsilon-safe planning. </title> <publisher> forthcoming, </publisher> <year> 1994. </year>
Reference-contexts: Preliminary work by Goldman and Boddy <ref> [24] </ref> attacks a similar problem: building plans that are likely to achieve the goal, where likely is defined in terms of a threshold. They develop an extended action and plan representation that incorporates observations and contingencies, so a comparison to c-buridan [16, 15] is more apt.
Reference: [25] <author> Robert P. Goldman and John S. Breese. </author> <title> Integrating Model Construction and Evaluation. </title> <booktitle> In Proc. 8th Conf. on Uncertainty in Artifical Intelligence, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: The problem modelled by an influence diagram involves choosing options from a fixed set of choices rather than constructing a course of action dynamically from a goal description. Recent work, however, has recognized the importance of interleaving the model-construction and the model-solution problems, both in general <ref> [25] </ref> and as applied to the planning problem in particular [51]. Also see [3] for a survey of work in this area. 40 7.4 Probabilistic temporal reasoning The representation for the network algorithm is similar to the network proposed by Dean and Kanazawa [13].
Reference: [26] <author> Peter Haddawy and Steve Hanks. </author> <title> Utility Models for Goal-Directed Decision-Theoretic Planners. </title> <type> Technical Report 93-06-04, </type> <institution> Univ. of Washington, Dept. of Computer Science and Engineering, </institution> <month> September </month> <year> 1993. </year> <note> Submitted to Artificial Intelligence. Available via anonymous FTP from ~ftp/pub/ai/ at cs.washington.edu. </note>
Reference-contexts: None of this work directly addresses the problem of plan generation. The query algorithm is described in [30, 28]; Drummond [17] presents an alternative algorithm for a similar problem. Haddawy and Hanks <ref> [26] </ref> motivate building a planner such as buridan. <p> We also hope to introduce an explicit temporal model (perhaps using ideas from zeno [48, 49]) so we can represent deadline goals. This would allow us to consider integrating our probabilistic plan refinement algorithm with the utility model presented in <ref> [26] </ref>. On the algorithmic side we have just begun to explore methods of controlling the search for good plans. As Section 6 demonstrates, there are a number of important architectural issues which deserve exploration.
Reference: [27] <author> K. Hammond. </author> <title> Explaining and repairing plans that fail. </title> <journal> Artificial Intelligence, </journal> <volume> 45 </volume> <pages> 173-228, </pages> <year> 1990. </year>
Reference-contexts: In fact, a powerful way to view the assessment task is as one of discovering flaws in the plan and communicating that information back to the planner <ref> [54, 27, 29] </ref>. Our query algorithm builds a structure called a scenario that is the basis for assessment, but is also a temporal trace of the plan's execution. One can identify from this structure the point at which the plan's probability of success decreased, and why.
Reference: [28] <author> S. Hanks. </author> <title> Practical temporal projection. </title> <booktitle> In Proc. 8th Nat. Conf. on Artificial Intelligence, </booktitle> <pages> pages 158-163, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: An expression is a set (implicit conjunction) of literals. We define the probability of an expression E with respect to a state s as P [E j s] = 1 if E s 0 otherwise (1) 2.2 Actions and action sequences Our model of action, taken from <ref> [29, 30, 28] </ref>, combines a symbolic model of the changes the action makes to propositions with probabilistic parameters that represent chance (un-modeled) influences. <p> These inefficiencies can lead to degraded performance; our second algorithm, query, is designed to overcome both problems. 5.2 The query assessment algorithm The query assessor is an adaptation of Hanks's <ref> [28, 30] </ref> projection algorithm which actually applies to a richer action representation than buridan's, including continuous quantities and sets, and conditional (branching) plan execution. query is goal directed|it tries to articulate the state space only when doing so is necessary to decide the state of a query proposition. <p> If G is all that is relevant to plan success, query will consider A to have a single consequence class that makes G true and is realized with probability one. We omit the details of the query algorithm from this paper; see instead <ref> [28, 30] </ref>. 5.3 The network assessment algorithm forward and query are similar in that they represent world states explicitly: both ma nipulate structures that represent elements of the state space. An alternative is to dispense with an explicit representation of a state and represent its component propositions directly. <p> Recent results [9] also suggest that an approximation algorithm may not be more effective than an exact method. 7.5 Action representation and plan evaluation Our action representation comes from Hanks's work <ref> [29, 30, 28] </ref> on probabilistic projection. Chrisman [6] develops an action representation and projection rule for planning under uncertainty, and Martin and Allen [38] develop statistical techniques to gather probabilities like the ones our algorithm uses. None of this work directly addresses the problem of plan generation. <p> Chrisman [6] develops an action representation and projection rule for planning under uncertainty, and Martin and Allen [38] develop statistical techniques to gather probabilities like the ones our algorithm uses. None of this work directly addresses the problem of plan generation. The query algorithm is described in <ref> [30, 28] </ref>; Drummond [17] presents an alternative algorithm for a similar problem. Haddawy and Hanks [26] motivate building a planner such as buridan.
Reference: [29] <author> S. Hanks. </author> <title> Projecting plans about uncertain worlds. </title> <type> Ph.d. thesis, </type> <institution> Yale University Computer Science Department, </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: Third, we prove the planner both sound and complete. Fourth, we compare the efficiency of four different probabilistic assessment algorithms both analytically and with empirical experiments. Finally, we explore the interface between the process of generating plans and the process of evaluating them. 1.1 Action representation Following <ref> [29] </ref>, we extend the standard strips [23] representation to allow conditional and probabilistic effects. In strips, an action is "enabled" if its preconditions are satisfied when the action is executed, in which case the action has a deterministic effect. <p> An expression is a set (implicit conjunction) of literals. We define the probability of an expression E with respect to a state s as P [E j s] = 1 if E s 0 otherwise (1) 2.2 Actions and action sequences Our model of action, taken from <ref> [29, 30, 28] </ref>, combines a symbolic model of the changes the action makes to propositions with probabilistic parameters that represent chance (un-modeled) influences. <p> In fact, a powerful way to view the assessment task is as one of discovering flaws in the plan and communicating that information back to the planner <ref> [54, 27, 29] </ref>. Our query algorithm builds a structure called a scenario that is the basis for assessment, but is also a temporal trace of the plan's execution. One can identify from this structure the point at which the plan's probability of success decreased, and why. <p> Recent results [9] also suggest that an approximation algorithm may not be more effective than an exact method. 7.5 Action representation and plan evaluation Our action representation comes from Hanks's work <ref> [29, 30, 28] </ref> on probabilistic projection. Chrisman [6] develops an action representation and projection rule for planning under uncertainty, and Martin and Allen [38] develop statistical techniques to gather probabilities like the ones our algorithm uses. None of this work directly addresses the problem of plan generation.
Reference: [30] <author> Steve Hanks. </author> <title> Modeling a Dynamic and Uncertain World II: Action Representation and Plan Evaluation. </title> <type> Technical report, </type> <institution> Univ. of Washington, Dept. of Computer Science and Engineering, </institution> <month> September </month> <year> 1993. </year> <month> 52 </month>
Reference-contexts: An expression is a set (implicit conjunction) of literals. We define the probability of an expression E with respect to a state s as P [E j s] = 1 if E s 0 otherwise (1) 2.2 Actions and action sequences Our model of action, taken from <ref> [29, 30, 28] </ref>, combines a symbolic model of the changes the action makes to propositions with probabilistic parameters that represent chance (un-modeled) influences. <p> These inefficiencies can lead to degraded performance; our second algorithm, query, is designed to overcome both problems. 5.2 The query assessment algorithm The query assessor is an adaptation of Hanks's <ref> [28, 30] </ref> projection algorithm which actually applies to a richer action representation than buridan's, including continuous quantities and sets, and conditional (branching) plan execution. query is goal directed|it tries to articulate the state space only when doing so is necessary to decide the state of a query proposition. <p> If G is all that is relevant to plan success, query will consider A to have a single consequence class that makes G true and is realized with probability one. We omit the details of the query algorithm from this paper; see instead <ref> [28, 30] </ref>. 5.3 The network assessment algorithm forward and query are similar in that they represent world states explicitly: both ma nipulate structures that represent elements of the state space. An alternative is to dispense with an explicit representation of a state and represent its component propositions directly. <p> Recent results [9] also suggest that an approximation algorithm may not be more effective than an exact method. 7.5 Action representation and plan evaluation Our action representation comes from Hanks's work <ref> [29, 30, 28] </ref> on probabilistic projection. Chrisman [6] develops an action representation and projection rule for planning under uncertainty, and Martin and Allen [38] develop statistical techniques to gather probabilities like the ones our algorithm uses. None of this work directly addresses the problem of plan generation. <p> Chrisman [6] develops an action representation and projection rule for planning under uncertainty, and Martin and Allen [38] develop statistical techniques to gather probabilities like the ones our algorithm uses. None of this work directly addresses the problem of plan generation. The query algorithm is described in <ref> [30, 28] </ref>; Drummond [17] presents an alternative algorithm for a similar problem. Haddawy and Hanks [26] motivate building a planner such as buridan.
Reference: [31] <author> Steve Hanks and Drew McDermott. </author> <title> Modeling a Dynamic and Uncertain World I: Symbolic and Probabilistic Reasoning about Change. </title> <journal> Artificial Intelligence, </journal> <volume> 65(2), </volume> <year> 1994. </year>
Reference-contexts: This strategy suggests using a belief network [44] for assessment whose is similar to that proposed by Dean and Kanazawa [13] and Hanks <ref> [31] </ref>. Figure 9 shows such a network for a domain with propositions fp 1 ; : : : ; p m g and a plan with action sequence hA i i N The graph consists of two types of nodes.
Reference: [32] <author> R. Howard and J. Matheson. </author> <title> Influence Diagrams. In The Principles and Applications of Decision Analysis. Strategic Decisions Group, </title> <year> 1984. </year>
Reference-contexts: Donald's work [14] extends the basic LMT paradigm to handle incomplete knowledge of the world's geometry and to provide error detection and recovery. 7.3 Graphical decision models Work on graphical probabilistic and decision models (see Howard <ref> [32] </ref>, Pearl [44], or the overview in [11, Chapter 7]) also deals with decision making and planning problems, but has focused more on solving a given probabilistic or decision model whereas our algorithm interleaves the process of constructing and evaluating solutions.
Reference: [33] <author> S. Kambhampati. </author> <title> Characterizing multi-contributor causal structures for planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 116-125, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: A planner that does not allow actions with disjunctive effects need not consider multiple causal support, although it may choose to do so for efficiency reasons <ref> [33] </ref>. The whole notion of causal support is more complex in the probabilistic case. For example, linking to a new action, even if it does not involve threats, may not increase the probability of goal satisfaction. Suppose that consequences from two different actions are used to support the same subgoal.
Reference: [34] <author> S. Koenig. </author> <title> Optimal probabilistic and decision-theoretic planning using markovian decision theory. </title> <address> UCB/CSD 92/685, Berkeley, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: More recent work divides according to how the planning problem is defined, and how states and operators are represented. Markov decision processes Several research efforts (e.g. <ref> [34, 12] </ref>) adopt a planning model based on fully observable Markov processes. There are two main differences between this work and ours.
Reference: [35] <author> K. Krebsbach, D. Olawsky, and M. Gini. </author> <title> An empirical study of sensing and defaulting in planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 136-144, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Another extension would allow buridan to handle probabilistic exogenous events and incorporate the model of sensing and information advanced in the uwl language [20]. We'd like to integrate Peot and Smith's [52] algorithm for generating conditional plans with this framework and to consider interleaved planning and execution <ref> [2, 43, 35] </ref> as well. Recent work on c-buridan [16, 15] has addressed some of these issues. We also hope to introduce an explicit temporal model (perhaps using ideas from zeno [48, 49]) so we can represent deadline goals.
Reference: [36] <author> T. Lozano-Perez, M. Mason, and R. Taylor. </author> <title> Automatic synthesis of fine motion strategies for robots. </title> <journal> International Journal of Robotics Research, </journal> <volume> 3(1) </volume> <pages> 3-24, </pages> <month> Spring </month> <year> 1984. </year>
Reference-contexts: Splitting the problem into a deterministic planner and an external mechanism for managing uncertainty is more similar to Mansell's approach than to ours. 7.2 Robotic motion planning Robotics researchers have also considered the problem of planning with actions whose effects are uncertain. For example, Lozano-Perez, Mason and Taylor <ref> [36] </ref> introduced a backward chaining strategy (LMT) for motion planning given sensing and control uncertainty which has been extended by Erdmann [18] and others.
Reference: [37] <author> T. Mansell. </author> <title> A method for planning given uncertain and incomplete information. </title> <booktitle> In Proc. 9th Conf. on Uncertainty in Artifical Intelligence, </booktitle> <year> 1993. </year>
Reference-contexts: His planning algorithm is linear and "progressive": it starts from the initial state (assumed unique) and builds linear plan sequences, always adding steps to the end of the plan. Mansell <ref> [37] </ref> proposes a strategy in which the planner attacks each possible initial world state in isolation (beginning with the most likely), and uses a deterministic hierarchical planning algorithm to build a plan for each. After these plans are built, the algorithm tries to merge the distinct plans.
Reference: [38] <author> N. Martin and J. Allen. </author> <title> A Language for Planning with Statistics. </title> <booktitle> In Proc. 7th Conf. on Uncertainty in Artifical Intelligence, </booktitle> <year> 1991. </year>
Reference-contexts: Chrisman [6] develops an action representation and projection rule for planning under uncertainty, and Martin and Allen <ref> [38] </ref> develop statistical techniques to gather probabilities like the ones our algorithm uses. None of this work directly addresses the problem of plan generation. The query algorithm is described in [30, 28]; Drummond [17] presents an alternative algorithm for a similar problem.
Reference: [39] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. 9th Nat. Conf. on Artificial Intelligence, </booktitle> <pages> pages 634-639, </pages> <month> July </month> <year> 1991. </year> <title> internet file at ftp.ai.mit.edu: </title> <publisher> /pub/users/dam/aaai91c.ps. </publisher>
Reference-contexts: Each plan consists of a set of actions, a partial temporal ordering relation over the actions, a set of causal links, and a set of subgoals (each a proposition-action pair). The first two items are straightforward; the last two require some explanation. A causal link <ref> [39] </ref> A i; p !A j caches the planner's reasoning that proposition p could be true at the time action A j (the link's consumer) is executed because consequence of action A i (the link's producer) makes it true. The link is said to provide causal support for p. <p> In Section 1.4 we illustrate these two operations using the example described earlier, but first we discuss some significant differences between the buridan planning algorithm and other least-commitment planners. 1.3 Discussion Refining a plan with conditional and probabilistic operators differs from classical plan refinement (e.g. snlp <ref> [39] </ref>) in three important ways. First, snlp establishes a single causal link between a producing action and a consuming action, and that link alone ensures that the link's literal will be true when the consuming action is executed. Our planner links one of an action's consequences to a later action. <p> Support for this 8 We ignore separation (the addition of variable-binding constraints [5]) since buridan is propositional. Lifting techniques <ref> [39] </ref> could be used to extend buridan to a more expressive language. 17 subgoal is then provided by linking directly to the initial action A 0 with the link A 0;ff GD !A 1 . The resulting plan is shown in Figure 6. <p> From a purely practical perspective, buridan's functionality is limited by its propositional representation, so we plan to implement a lifted <ref> [53, 39] </ref> version using the codesignation constraint code developed for ucpop 42 [50]. The major challenge of this endeavor is devising an efficient means for handling the disjunctive bindings that could result when a lifted trigger condition is supported by multiple causal links from different ground consequences.
Reference: [40] <author> D. McDermott. </author> <title> Regression planning. </title> <journal> International Journal of Intelligent Systems, </journal> <volume> 6 </volume> <pages> 357-416, </pages> <year> 1991. </year>
Reference-contexts: A deterministic form of confrontation is used in ucpop [50]. Pednault's adl language allowed for disjunctive effects and he used them to solve a simple symbolic version of the "Bomb in the Toilet" example [46] which we extended in Section 6. However, no implementations of adl (e.g., Pedestal <ref> [40] </ref> and ucpop [50]) have implemented the functionality of disjunctive effects, which buridan does. 41 8 Conclusions buridan represents a significant step in the development of practical algorithms for probabilistic planning. <p> Then there exists a sequence of nondeterministic choices such that buridan () will return hA i i N To finesse issues of search control, we use hA i i N i=1 as an oracle to guide the construction of the partially ordered plan; McDermott <ref> [40] </ref> refers to this technique as a clairvoyant algorithm. Our implementation uses exhaustive search to ensure that every sequence of nondeterministic choices is eventually considered. We first establish a useful lemma.
Reference: [41] <author> R. Moore. </author> <title> A Formal Theory of Knowledge and Action. </title> <editor> In J. Hobbs and R. Moore, editors, </editor> <title> Formal Theories of the Commonsense World. </title> <publisher> Ablex, </publisher> <address> Norwood, NJ, </address> <year> 1985. </year>
Reference-contexts: We have tested it on many small examples, including the simple Slippery Gripper example just described, an extension of this example that will be used throughout this paper to describe our algorithm in detail, and the Bomb and Toilet example <ref> [41] </ref> (see Section 6). We make the following advances to the field of planning: 1. We define an expressive action representation for which we provide a probabilistic semantics (Section 2). 2. We describe buridan, an implemented algorithm for probabilistic planning (Section 3). 3. <p> As a preliminary effort toward a more thorough empirical study we tested the four algorithms on two additional problems. The first is the example used throughout this paper, which we will refer to as the Slippery Gripper problem. The second is an extension of Moore's <ref> [41] </ref> Bomb and Toilet problem, which we describe below: A robot is given two packages, and told that exactly one of them contains a bomb. It wants to defuse the bomb, and the only way to do so is to dunk the package containing the bomb in the toilet.
Reference: [42] <author> John H. Munson. </author> <title> Robot Planning, Execution, and Monitoring in an Uncertain Environment. </title> <booktitle> In Proc. 2nd Int. Joint Conf. on Artificial Intelligence, </booktitle> <pages> pages 338-349, </pages> <month> August </month> <year> 1971. </year>
Reference-contexts: and the type of search control guidance that the assessor can provide. 38 7 Related Work Related work can be found in several areas: other AI approaches to probabilistic planning, robotic motion planning, decision models, and classical planning and plan evaluation techniques. 7.1 Probabilistic planning Several early pieces of work <ref> [22, 42] </ref> cast planning in probabilistic or decision-theoretic terms, but did not provide concrete representations or algorithms to solve the problem. More recent work divides according to how the planning problem is defined, and how states and operators are represented.
Reference: [43] <author> D. Olawsky and M. Gini. </author> <title> Deferred planning and sensor use. In Proceedings, DARPA Workshop on Innovative Approaches to Planning, Scheduling, and Control. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: Another extension would allow buridan to handle probabilistic exogenous events and incorporate the model of sensing and information advanced in the uwl language [20]. We'd like to integrate Peot and Smith's [52] algorithm for generating conditional plans with this framework and to consider interleaved planning and execution <ref> [2, 43, 35] </ref> as well. Recent work on c-buridan [16, 15] has addressed some of these issues. We also hope to introduce an explicit temporal model (perhaps using ideas from zeno [48, 49]) so we can represent deadline goals.
Reference: [44] <author> J. Pearl. </author> <title> Probablistic Reasoning in Intelligent Systems. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: Instead of reasoning about actions as transformations from state distributions to state distributions we instead reason about the circumstances under which an action makes a proposition true, makes it false, or leaves it unchanged. This strategy suggests using a belief network <ref> [44] </ref> for assessment whose is similar to that proposed by Dean and Kanazawa [13] and Hanks [31]. <p> SUCCESS p 1 p m . . . . . . of the same proposition at the next stage. Finally, there is a binary SUCCESS node that is true exactly when all propositions in the goal expression hold. We may solve this network of constraints using standard propagation techniques <ref> [44] </ref>, provided we supply appropriate numeric parameters for the model: a conditional probability table ("link matrix") indicating the probability that the node will take on one of its values, conditioned on the states of all the arcs that point to it. <p> Donald's work [14] extends the basic LMT paradigm to handle incomplete knowledge of the world's geometry and to provide error detection and recovery. 7.3 Graphical decision models Work on graphical probabilistic and decision models (see Howard [32], Pearl <ref> [44] </ref>, or the overview in [11, Chapter 7]) also deals with decision making and planning problems, but has focused more on solving a given probabilistic or decision model whereas our algorithm interleaves the process of constructing and evaluating solutions. <p> As we discussed in Section 5, a totally ordered plan can be formulated as a probabilistic network allowing assessment to be performed using standard propagation techniques <ref> [44] </ref>. Although our experiments with the network assessment algorithm showed that the Jensen clustering algorithm is probably inappropriate for problems of this type, other approaches might be more suitable. Dean and Kanazawa [13] advocate stochastic simulation techniques, but these lack convergence bounds and thus sacrifice soundness and completeness.
Reference: [45] <author> E. Pednault. </author> <title> Toward a Mathematical Theory of Plan Synthesis. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1986. </year>
Reference-contexts: A final difference between classical planners and buridan concerns the relationship between buridan's subgoals and a classical planner's goal agenda <ref> [45] </ref>. In a classical planner, every entry on the agenda must be made true before the plan can be considered a solution, but in the case of a probabilistic planner this is no longer the case.
Reference: [46] <author> E. Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference-contexts: A deterministic form of confrontation is used in ucpop [50]. Pednault's adl language allowed for disjunctive effects and he used them to solve a simple symbolic version of the "Bomb in the Toilet" example <ref> [46] </ref> which we extended in Section 6. However, no implementations of adl (e.g., Pedestal [40] and ucpop [50]) have implemented the functionality of disjunctive effects, which buridan does. 41 8 Conclusions buridan represents a significant step in the development of practical algorithms for probabilistic planning.
Reference: [47] <author> E.. Pednault. </author> <title> Generalizing nonlinear planning to handle complex goals and actions with context-dependent effects. </title> <booktitle> In Proceedings IJCAI-91, </booktitle> <pages> pages 240-245, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: They exploit multiattribute utility theory to devise techniques for composing separate preference specifications. 7.6 Classical planning Dealing with state-dependent effects is an essential requirement for any useful probabilistic planner. In this regard buridan can be seen as generalizing the work on planning with deterministic conditional effects, e.g. in <ref> [47, 7, 50] </ref>. A deterministic form of confrontation is used in ucpop [50]. Pednault's adl language allowed for disjunctive effects and he used them to solve a simple symbolic version of the "Bomb in the Toilet" example [46] which we extended in Section 6.
Reference: [48] <author> J. S. Penberthy and Daniel S. Weld. </author> <title> A new approach to temporal planning (preliminary report). </title> <booktitle> In Proceedings of the AAAI 1993 Symposium on Foundations of Automatic Planning: The Classical Approach and Beyond, </booktitle> <pages> pages 112-116, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Recent work on c-buridan [16, 15] has addressed some of these issues. We also hope to introduce an explicit temporal model (perhaps using ideas from zeno <ref> [48, 49] </ref>) so we can represent deadline goals. This would allow us to consider integrating our probabilistic plan refinement algorithm with the utility model presented in [26]. On the algorithmic side we have just begun to explore methods of controlling the search for good plans.
Reference: [49] <author> J.S. Penberthy. </author> <title> Planning with Continuous Change. </title> <type> PhD thesis, </type> <institution> University of Washing-ton, </institution> <year> 1993. </year> <note> Available as UW CSE Tech Report 93-12-01. </note>
Reference-contexts: Recent work on c-buridan [16, 15] has addressed some of these issues. We also hope to introduce an explicit temporal model (perhaps using ideas from zeno <ref> [48, 49] </ref>) so we can represent deadline goals. This would allow us to consider integrating our probabilistic plan refinement algorithm with the utility model presented in [26]. On the algorithmic side we have just begun to explore methods of controlling the search for good plans.
Reference: [50] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A sound, complete, partial order planner for ADL. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-114, </pages> <month> October </month> <year> 1992. </year> <note> Available via anonymous FTP from ~ftp/pub/ai/ at cs.washington.edu. </note>
Reference-contexts: They exploit multiattribute utility theory to devise techniques for composing separate preference specifications. 7.6 Classical planning Dealing with state-dependent effects is an essential requirement for any useful probabilistic planner. In this regard buridan can be seen as generalizing the work on planning with deterministic conditional effects, e.g. in <ref> [47, 7, 50] </ref>. A deterministic form of confrontation is used in ucpop [50]. Pednault's adl language allowed for disjunctive effects and he used them to solve a simple symbolic version of the "Bomb in the Toilet" example [46] which we extended in Section 6. <p> In this regard buridan can be seen as generalizing the work on planning with deterministic conditional effects, e.g. in [47, 7, 50]. A deterministic form of confrontation is used in ucpop <ref> [50] </ref>. Pednault's adl language allowed for disjunctive effects and he used them to solve a simple symbolic version of the "Bomb in the Toilet" example [46] which we extended in Section 6. However, no implementations of adl (e.g., Pedestal [40] and ucpop [50]) have implemented the functionality of disjunctive effects, which <p> deterministic form of confrontation is used in ucpop <ref> [50] </ref>. Pednault's adl language allowed for disjunctive effects and he used them to solve a simple symbolic version of the "Bomb in the Toilet" example [46] which we extended in Section 6. However, no implementations of adl (e.g., Pedestal [40] and ucpop [50]) have implemented the functionality of disjunctive effects, which buridan does. 41 8 Conclusions buridan represents a significant step in the development of practical algorithms for probabilistic planning. <p> From a purely practical perspective, buridan's functionality is limited by its propositional representation, so we plan to implement a lifted [53, 39] version using the codesignation constraint code developed for ucpop 42 <ref> [50] </ref>. The major challenge of this endeavor is devising an efficient means for handling the disjunctive bindings that could result when a lifted trigger condition is supported by multiple causal links from different ground consequences.
Reference: [51] <author> M. Peot and John S. Breese. </author> <title> Model Construction in Planning. </title> <booktitle> In Notes from the Ninth National Conference on Artificial Intelligence (AAAI-91) Workshop on Knowledge-Based Construction of Probabilistic and Decision Models, </booktitle> <pages> pages 95-100, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Recent work, however, has recognized the importance of interleaving the model-construction and the model-solution problems, both in general [25] and as applied to the planning problem in particular <ref> [51] </ref>. Also see [3] for a survey of work in this area. 40 7.4 Probabilistic temporal reasoning The representation for the network algorithm is similar to the network proposed by Dean and Kanazawa [13].
Reference: [52] <author> M. Peot and D. Smith. </author> <title> Conditional Nonlinear Planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 189-197, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: They develop an extended action and plan representation that incorporates observations and contingencies, so a comparison to c-buridan [16, 15] is more apt. Their approach to planning is quite different from ours, however. They use a deterministic planner (based on cnlp <ref> [52] </ref>) and they manage uncertainty using an external probabilistic network model to assign probabilities to propositions with unknown truth values. <p> Another extension would allow buridan to handle probabilistic exogenous events and incorporate the model of sensing and information advanced in the uwl language [20]. We'd like to integrate Peot and Smith's <ref> [52] </ref> algorithm for generating conditional plans with this framework and to consider interleaved planning and execution [2, 43, 35] as well. Recent work on c-buridan [16, 15] has addressed some of these issues.
Reference: [53] <author> J. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> Journal of the ACM, </journal> <volume> 12(1), </volume> <month> January </month> <year> 1965. </year>
Reference-contexts: From a purely practical perspective, buridan's functionality is limited by its propositional representation, so we plan to implement a lifted <ref> [53, 39] </ref> version using the codesignation constraint code developed for ucpop 42 [50]. The major challenge of this endeavor is devising an efficient means for handling the disjunctive bindings that could result when a lifted trigger condition is supported by multiple causal links from different ground consequences.
Reference: [54] <author> R. Simmons. </author> <title> A theory of debugging plans and interpretations. </title> <booktitle> In Proc. 7th Nat. Conf. on Artificial Intelligence, </booktitle> <pages> pages 94-99, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: In fact, a powerful way to view the assessment task is as one of discovering flaws in the plan and communicating that information back to the planner <ref> [54, 27, 29] </ref>. Our query algorithm builds a structure called a scenario that is the basis for assessment, but is also a temporal trace of the plan's execution. One can identify from this structure the point at which the plan's probability of success decreased, and why.
Reference: [55] <author> Sampath Srinivas and Jack Breese. </author> <title> IDEAL: Influence diagram evaluation and analysis in lisp; documentation and users guide. </title> <type> Technical Memo 23, </type> <institution> Rockwell International Science Center, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: Each of these boolean functions can easily be coded into an appropriate link matrix. Section 5.5 reports on an implementation of network that uses the IDEAL <ref> [55] </ref> influence diagram processor, using the Jensen clustering algorithm.
Reference: [56] <author> D. Weld and J. de Kleer, </author> <title> editors. Readings in Qualitative Reasoning about Physical Systems. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1989. </year>
Reference: [57] <author> M. Wellman and J. Doyle. </author> <title> Modular utility reprsentation for decision theoretic planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 236-242, </pages> <month> June </month> <year> 1992. </year> <month> 54 </month>
Reference-contexts: Doyle and Wellman <ref> [57] </ref> discuss the general problem of modular specification of a planner's objectives in a decision theoretic framework. They exploit multiattribute utility theory to devise techniques for composing separate preference specifications. 7.6 Classical planning Dealing with state-dependent effects is an essential requirement for any useful probabilistic planner.
References-found: 57

