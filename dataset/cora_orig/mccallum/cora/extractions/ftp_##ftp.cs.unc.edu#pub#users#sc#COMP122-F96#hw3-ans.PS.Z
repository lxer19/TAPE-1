URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP122-F96/hw3-ans.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP122-F1996/homework.html
Root-URL: http://www.cs.unc.edu
Phone: 12 endif 13 enddo  [1; 2; 3; 4; 5; 6; 7],  [7; 5; 6; 4; 2; 1; 3],  0 [7; 4; 6; 1; 3; 2; 5].  
Title: COMP 122: Algorithms and Analysis Solutions to Problem Set 3 Practice problems P-1 Exercise 7.5-6
Author: Siddhartha Chatterjee Heap-Insert(A, (d, L d [i d fi(); and Heap-Insert, fi(lg k). 
Address: i d i d 1  
Affiliation: 11  
Note: 1 for a 1 to k do 3 i a 2 4 enddo 5 Build-Heap(A, k) 6 for j 1 to n do 7 (d, M[j]) Extract-Min(A)  This easily establishes the desired bound on the worst-case running time. P-2 Problem 7-1 (page 152). The procedure Build-Heap is Section 7.3 can be implemented by repeatedly  3 for i 2 to length[A] do 4 Heap-Insert(A, A[i]) 5 enddo  A  Build-Heap creates the heap H  while Build-Heap 0 creates the heap H  
Date: Fall 1996  2 heap-size[A] 1  
Abstract: Solution: The idea is to use a heap of k elements to merge the lists. Call the input lists L 1 through L k , and have k indices into these lists named i 1 through i k . The output goes to list M, and its associated index is j. The heap will contain k pairs of the form (a; L a [i a ]), for 1 a k, keyed on the second component. Here is the code. 
Abstract-found: 1
Intro-found: 1
References-found: 0

