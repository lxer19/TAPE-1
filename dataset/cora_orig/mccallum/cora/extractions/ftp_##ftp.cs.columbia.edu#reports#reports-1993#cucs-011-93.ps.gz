URL: ftp://ftp.cs.columbia.edu/reports/reports-1993/cucs-011-93.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1993.html
Root-URL: http://www.cs.columbia.edu
Email: israel@cs.columbia.edu  
Title: Oz A Decentralized Process Centered Environment  
Author: Israel Z. Ben-Shaul 
Degree: (Thesis Proposal)  
Date: May 5, 1993  
Address: 500 West 120th Street New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Pubnum: TR CUCS-011-93  
Abstract: This is a proposal for a model and an architecture for decentralized process centered environments, supporting collaboration and concerted efforts among geographically-dispersed teams each team with its own autonomous process with emphasis on flexible control over the degree of collaboration and autonomy provided. The focus is on decentralized process modeling and on decentralized process enaction. c fl1993 Israel Z. Ben-Shaul
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Ambriola, P. Ciancarini, and C. Montangero. </author> <title> Software process enactment in Oikos. </title> <editor> In Richard N. Taylor, editor, </editor> <booktitle> 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 183-192, </pages> <address> Irvine CA, </address> <month> December </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: Various PCEs have been constructed as research prototypes and non-commercial systems, and some have been recently released as commercial products. Examples of relatively well-known academic and other research PCEs include Arcadia [26], Common Lisp Framework (CLF) [37], Melmac [14], Merlin [47], Adele [33], and Oikos <ref> [1] </ref>. Examples of commercial products include Process Weaver [10], and HP SynerVision. 1.1 Why Decentralization ? Large-scale product development (be it software, or other engineering) typically requires participation of multiple users, often divided in multiple groups, each of which is concerned with a different aspect of the product. <p> Thus, unlike the ProcessWall approach, the inter-operation is not 50 only at the logical level but at the physical, architectural level. But decentralization per se is not addressed in the architecture. Oikos <ref> [1] </ref> is a rule-based PCE that supports distribution using a hierarchy of blackboards that resemble the tuple spaces in Linda [11]. Oikos enables to specify a wide range of services as part of process enactment, including database schemas and transactions.
Reference: [2] <author> Naser S. Barghouti. </author> <title> Concurrency Control in Rule-Based Software Development Environments. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <month> February </month> <year> 1992. </year> <month> CUCS-001-92. </month>
Reference-contexts: For more on the consistency model in Marvel see [3]. 1.2.4 Synchronization and Coordination Modeling In addition to process modeling, Marvel provides capabilities to model coordination among team members, by means of a Coordination Rule Language (CRL) <ref> [2] </ref> that defines how to resolve concurrency conflicts in accessing data. In addition to the programmable interface for conflict resolution, the actual conflict detection scheme is modifiable by project-specific external tables which are loaded at environment start up. 1.2.5 Marvel 3.1 Architecture Marvel's architecture [7] is illustrated in figure 3. <p> A coordination modeling language in the context of a PCE was proposed by Barghouti <ref> [2] </ref>. However, just as the synchronization mechanisms have to be extended for DEPCEs, the coordination modeling language should be able to express (the degree of) remoteness, replication, etc. Another interesting problem is to support multiple synchronization policies at different sites, while still providing consistency.
Reference: [3] <author> Naser S. Barghouti. </author> <title> Supporting cooperation in the marvel process-centered SDE. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 21-31, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: It is important to understand that only automation chaining is optional; users are still obliged to follow some legal process step sequence implied by the conditions and effects of rules, whether through manual selection of commands or automation chaining. For more on the consistency model in Marvel see <ref> [3] </ref>. 1.2.4 Synchronization and Coordination Modeling In addition to process modeling, Marvel provides capabilities to model coordination among team members, by means of a Coordination Rule Language (CRL) [2] that defines how to resolve concurrency conflicts in accessing data.
Reference: [4] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Modeling concurrency in rule-based development environments. </title> <journal> IEEE Expert, </journal> <volume> 5(6) </volume> <pages> 15-27, </pages> <month> December </month> <year> 1990. </year> <month> 55 </month>
Reference-contexts: Enforcement and automation are the two forms of enaction supported in Marvel. Marvel's process enaction is user-driven. When a user enters a command, the environment selects the rule with the same name and "closest" signature to the provided actual parameters considering multiple-inheritance <ref> [4] </ref>. If the condition of the selected rule is not satisfied, backward chaining is attempted. If the condition is already satisfied or becomes satisfied during backward chaining, the activity is initiated. After the activity has completed, the appropriate effect is asserted.
Reference: [5] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Scaling up rule-based development environments. </title> <editor> In A. van Lamsweerde and A. Fugetta, editors, </editor> <booktitle> 3rd European Software Engineering Conference, volume 550 of Lecture Notes in Computer Science, </booktitle> <pages> pages 380-395, </pages> <address> Milano, Italy, </address> <month> October </month> <year> 1991. </year> <note> Springer-Verlag. </note>
Reference-contexts: However, it should be able to be activated upon a (local or remote) request for service, which requires an automatic activation mechanism. 2 The actual implementation does not support deviations at all. See <ref> [5] </ref> for a design of such a mechanism for Marvel 9 2 The Problems The goals of this research are to devise a model and an architecture for decentralized PCEs that support collaboration and concerted efforts among teams, while retaining their autonomy. This thesis addresses three major problems: 1.
Reference: [6] <author> Israel Z. Ben-Shaul. </author> <title> An object management system for multi-user programming environments. </title> <type> Master's thesis, </type> <institution> Columbia University, Department of Computer Science, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Marvel's multi-user architecture (which was designed by the author in his MS thesis <ref> [6] </ref>) is perhaps the strongest evidence that Oz is likely to succeed, since the Oz architecture is founded on Marvel's, although it extends it significantly.
Reference: [7] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 149-158, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: In addition to the programmable interface for conflict resolution, the actual conflict detection scheme is modifiable by project-specific external tables which are loaded at environment start up. 1.2.5 Marvel 3.1 Architecture Marvel's architecture <ref> [7] </ref> is illustrated in figure 3. <p> The rationale behind the Marvel architecture can be found in <ref> [7] </ref>. This architecture is adequate for a small to medium number of people interacting with the server through clients in the same local-area network (we have experienced using Marvel successfully with up to 20 concurrent clients and 8 users). <p> Another general requirement is that as far as local work is concerned, a DEPCE should provide the same capabilities and same support as a PCE does. This section addresses mainly the additional requirements from a DEPCE that are not PCE-specific, and extensions to existing PCE requirements. ( <ref> [7] </ref> discusses general requirements for a PCE). Finally, a fundamental requirement that is orthogonal to the whole concept of decentralization is componentization of the system into independent, replaceable components. <p> Com-ponentization, among other things, is important to support architectural design autonomy, where SubEnvs can be built with different components (e.g., different OMS, or different transaction management). Preliminary work on componentization has been done by the author and others in the Marvel project (see <ref> [7] </ref>). However, componentization (as well as architectural autonomy) is in general outside the scope of this thesis as a research topic, 11 but is one of the main goals of the Oz project, and will be addressed as appropriate in the thesis. <p> Synchronization Mechanisms - PCEs in general require flexibility of selection and ap-plication of concurrency control (CC) policies <ref> [7] </ref>. A DEPCE adds the dimension of remote vs. local access.
Reference: [8] <author> Philip A. Bernstein. </author> <title> Database system support for software engineering. </title> <booktitle> In 9th International Conference on Software Engineering, </booktitle> <pages> pages 166-178, </pages> <address> Monterey CA, </address> <month> March </month> <year> 1987. </year>
Reference-contexts: As most PCEs are essentially data-centered, they require special-purpose databases for management of persistent storage of the artifacts being developed <ref> [8] </ref> (also known as software engineering databases). Similarly, data-centered DEPCEs (including Oz) require mechanisms to support distributed and decentralized data, and therefore HDDB technology is of major importance.
Reference: [9] <author> Sara A. Bly, Steve R. Harrison, and Susan Irwin. </author> <title> Media spaces: Bringing people together in a video, audio, and computing environment. </title> <journal> Communications of the ACM, </journal> <volume> 36(1) </volume> <pages> 28-47, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: The underlying bus architecture of CB allows for componentized flavor, and can be potentially integrated within the framework of Oz . This is currently under investigation both in the Oz and the CB groups. Media Spaces <ref> [9] </ref> Amulti-media project at Xerox PARC, that has been in use for several years and connected two sites. It was intended to support "virtual-reality" (i.e., provide 52 an environment whereby people that are physically separated can feel and operate as if they were co-located).
Reference: [10] <author> Maryse Bourdon. </author> <title> Building process models using PROCESS WEAVER: a progressive approach. </title> <editor> In Wilhelm Schafer, editor, </editor> <booktitle> Reprints of the 8th International Software Process Workshop, </booktitle> <address> Schloss Dagstuhl, Wadern, Germany, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: Examples of relatively well-known academic and other research PCEs include Arcadia [26], Common Lisp Framework (CLF) [37], Melmac [14], Merlin [47], Adele [33], and Oikos [1]. Examples of commercial products include Process Weaver <ref> [10] </ref>, and HP SynerVision. 1.1 Why Decentralization ? Large-scale product development (be it software, or other engineering) typically requires participation of multiple users, often divided in multiple groups, each of which is concerned with a different aspect of the product.
Reference: [11] <author> Nicholas Carriero and David Gelernter. </author> <title> Linda in context. </title> <journal> Communications of the ACM, </journal> <volume> 32(4) </volume> <pages> 444-458, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: But decentralization per se is not addressed in the architecture. Oikos [1] is a rule-based PCE that supports distribution using a hierarchy of blackboards that resemble the tuple spaces in Linda <ref> [11] </ref>. Oikos enables to specify a wide range of services as part of process enactment, including database schemas and transactions.
Reference: [12] <author> Stefano Ceri and Giuseppe Pelagatti. </author> <title> Distributed Databases. </title> <publisher> McGraw Hill, </publisher> <year> 1985. </year>
Reference-contexts: Distribution vs. Federation Broadly speaking, a distributed system is defined as one that provides a single logical view to its applications, but is physically distributed into multiple computing units, most often distributed across machines of a single site <ref> [12] </ref>. That is, a distributed system transparently shields the distribution from its applications. In contrast, a decentralized system is comprised of relatively independent subsystems with some degree of correlation between them.
Reference: [13] <author> Bill Curtis, Marc I. Kellner, and Jim Over. </author> <title> Process modeling. </title> <journal> Communications of the ACM, </journal> <volume> 35(9) </volume> <pages> 75-90, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Since the rule-based approach is in general the most dominant process formalism in PCE research <ref> [13] </ref>, this assumption does not seem too restrictive. In addition, it is hoped that the results of this research will be applicable to a wider range of process formalisms.
Reference: [14] <author> Wolfgang Deiters and Volker Gruhn. </author> <title> Managing software processes in the environment MEL-MAC. </title> <editor> In Richard N. Taylor, editor, </editor> <booktitle> 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 193-205, </pages> <address> Irvine CA, </address> <month> December </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: Various PCEs have been constructed as research prototypes and non-commercial systems, and some have been recently released as commercial products. Examples of relatively well-known academic and other research PCEs include Arcadia [26], Common Lisp Framework (CLF) [37], Melmac <ref> [14] </ref>, Merlin [47], Adele [33], and Oikos [1]. <p> One approach to supporting interoperability among various formalisms (see [36]) is to use the rule-based language as an "assembly" process language, and translate into it other formalisms such as procedural [42] or petri-net <ref> [14] </ref>. (An experiment of this approach is described in [28], and is further studied by Popovich.) This approach resembles the approach taken in some heterogeneous databases [31], where it is assumed that there is a translation from the various schemas and query formalisms into a common formalism which enables interoperability. <p> The process fragments and their associated engines are: (1) interworking process engine for cooperation between teams or within a team (using MEL-MAC <ref> [14] </ref>); (2) interaction process engine for a single-user workspace; and (3) a software bus for tool interoperation. Thus, unlike the ProcessWall approach, the inter-operation is not 50 only at the logical level but at the physical, architectural level. But decentralization per se is not addressed in the architecture.
Reference: [15] <author> Prasun Dewan and John Riedl. </author> <title> Toward computer-supported concurrent software engineering. </title> <journal> Computer, </journal> <volume> 26(1) </volume> <pages> 17-36, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: It is based on the idea of a logical blackboard as a shared workspace. As such, it does not support the issue of autonomy. It supports collaboration and heterogeneity at the application level, but not at the data level. FLexible Environment for Collaborative Software Engineering (Flecse) <ref> [15] </ref> is an environment intended to support product development of a group of geographically-dispersed engineers, focusing on multi-user tools for editing, debugging, and versioning.
Reference: [16] <author> W. Emmerich, G. Junkermann, B. Peuschel, W. Schafer, and S. Wolf. Merlin: </author> <title> Knowledge-based process modeling. </title> <booktitle> In 1st European Workshop on Software Process Modeling, </booktitle> <pages> pages 181-187, </pages> <address> Milan, Italy, </address> <month> May </month> <year> 1991. </year> <month> AICA. </month>
Reference-contexts: Peuschel and Wolf explain in [35] why current client-server architectures are not adequate to support distributed software processes, analyze the requirements for supporting such processes, and discuss possible architectural approaches to supporting them, with the intent to investigate a future distributed architecture for the Merlin PCE <ref> [16] </ref>. This work can also be regarded as motivational work. Kernel/2r [25], from the Eureka Software Factory project, is an actual system that supports process inter-operation.
Reference: [17] <author> R. Ahmed et al. </author> <title> The Pegasus heterogenous multidatabase system. </title> <journal> Computer, </journal> <volume> 24(12) </volume> <pages> 19-27, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Such an approach, if adopted by Oz, would preempt decentralization. Furthermore, it allows only for two modes, namely private and shared, and presupposes a check-out model for concurrency. This may not be suitable for more advanced cooperation models within and among teams. Pegasus <ref> [17] </ref> from HP laboratories is an HDDB that supports integration of various database models (e.g., relational, hierarchical) with an object-oriented language called Heterogeneous Object SQL (HOSQL) that allows to define mappings from other schemas (local data sources) into a unified Pegasus data model by supporting "attachments" of actual databases to a
Reference: [18] <author> Simon M. Kaplan et al. </author> <title> Supporting collaborative software developement with conversation builder. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 11-20, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year> <month> 56 </month>
Reference-contexts: Conversation Builder (CB) <ref> [18] </ref> is a CSCW system that supports collaborative software development.
Reference: [19] <author> G. Forte and R.J. Norman. </author> <title> A self assessment by the software engineering community. </title> <journal> Com--munications of the ACM, </journal> <volume> 35(4) </volume> <pages> 29-32, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: At the same time 2 the teams need to collaborate in order to develop the product, and as research in Software Engineering (SE) has shown, the interaction among team members accounts for a significant part of the total cost of the product being developed <ref> [19] </ref>. The degree of team autonomy and of the collaboration between teams depends on the nature of the product being developed and on the organizational policies (e.g., centralized vs. decentralized management).
Reference: [20] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: An activity involves invocation of an external tool to operate on the product data encapsulated within the bound objects. In Marvel, tools are encapsulated via an envelope mechanism written in a Shell Extended Language (sel) <ref> [20] </ref>. If there is no activity, then by definition there can be only one effect. If there is an activity, then in general the invoked tool may have several possible results corresponding one-to-one with the given effects. <p> Nevertheless, the activity would still be executed in its entirety in one host. The main reason for this decision is that activities in Marvel (and subsequently in Oz) are considered as encapsulating external tools using a "black-box" approach and interfacing them to the environment <ref> [20] </ref>.
Reference: [21] <author> Dennis Heimbigner. </author> <title> A federated architecture for envrionments: Take II. In Preprints of the Process Sensitive SEE Architectures Workshop, </title> <address> Boulder CO, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Heimbigner argues in <ref> [21] </ref> that just like databases, "environments will move to looser, federated, architectures ... address inter-operability between partial-environments of varying degrees of openness". He also notes that part of the reason for not adopting this approach until recently was due to the inadequacy of existing software process technology.
Reference: [22] <author> Dennis Heimbigner. </author> <title> The ProcessWall: A process state server approach to process programming. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 159-168, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: He also notes that part of the reason for not adopting this approach until recently was due to the inadequacy of existing software process technology. However, his focus is on support for multiple formalisms, and in retro-fitting a process onto a process-ignorant environment. The ProcessWall <ref> [22] </ref> proposed by Heimbigner is an attempt to address one particular aspect of federation, namely: process formalism inter-operability.
Reference: [23] <author> Dennis Heimbigner and Marc Kellner. </author> <title> Software process example for ISPW-7, </title> <month> August </month> <year> 1991. </year> <note> /pub/cs/techreports/ISPW7/ispw7.ex.ps.Z available by anonymous ftp from ftp.cs.colorado.edu. </note>
Reference-contexts: The evaluation of the system will be mainly done against the requirements and its intended goals. In addition, with lack of benchmarks for software processes in general (except the "ISPW" problem <ref> [23] </ref>) and for decentralized processes in particular, metrics for evaluating the system would have to be defined. As part of the evaluation, the ISPW problem will be extended to cover cooperation among teams (as opposed to cooperation within team).
Reference: [24] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Marvel then waits for the next user command. Due to the event-driven nature of the enaction model, the actual parameter-selection for rules invoked through chaining is done by an algorithm that "inverts" the logic of the bindings of the chained-to rules <ref> [24] </ref>. Predicates in effects of rules are each annotated as either consistency or automation. By definition, all forward chaining from a consistency predicate in an asserted effect to rules with satisfied conditions and empty activities is mandatory. <p> Specific extensions include: Process Management * Decentralized binding and condition evaluation. 38 * Chaining across SubEnvs mechanisms for chaining from one SubEnv to another. This includes exchanging relevant information between OSVs and extensions to the current "inversion" algorithm for binding objects to parameters of rules <ref> [24] </ref>. * Scheduling Marvel has a single context-switch point within a single rule (before sending an activity for execution at the client). This is adequate since both the condition evaluation and the assertion of an effect of a rule is performed atomically.
Reference: [25] <author> Bernhard Holtkamp. </author> <title> Process engine interoperation in PSEEs. In Preprints of the Process Sensitive SEE Architectures Workshop, </title> <address> Boulder CO, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: This work can also be regarded as motivational work. Kernel/2r <ref> [25] </ref>, from the Eureka Software Factory project, is an actual system that supports process inter-operation. The approach taken here is to identify and divide the global process into three distinguished kinds of process fragments, and support each with a separate process engine (and formalism).
Reference: [26] <author> R. Kadia. </author> <title> Issues encountered in building a flexible software development environment. </title> <editor> In Her-bert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 169-180, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: Various PCEs have been constructed as research prototypes and non-commercial systems, and some have been recently released as commercial products. Examples of relatively well-known academic and other research PCEs include Arcadia <ref> [26] </ref>, Common Lisp Framework (CLF) [37], Melmac [14], Merlin [47], Adele [33], and Oikos [1].
Reference: [27] <author> Gail E. Kaiser, Israel Z. Ben-Shaul, George T. Heineman, and Wilfredo Marrero. </author> <title> Process evolution for the marvel environment. </title> <type> Technical Report CUCS-047-92, </type> <institution> Columbia University Department of Computer Science, </institution> <month> April </month> <year> 1993. </year> <note> Submitted for publication. </note>
Reference-contexts: Initial work on process evolution in PCEs has been done in Marvel <ref> [27] </ref>, and an Evolver tool was developed that is able to detect and update an objectbase to correspond to the newly defined process consistency.
Reference: [28] <author> Gail E. Kaiser, Steven S. Popovich, and Israel Z. Ben-Shaul. </author> <title> A bi-level language for software process modeling. </title> <booktitle> In 15th International Conference on Software Engineering, </booktitle> <address> Baltimore MD, </address> <month> May </month> <year> 1993. </year> <note> IEEE Computer Society Press. In press. </note> <institution> Available as Columbia University Department of Computer Science, CUCS-016-91, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: However, the process is not in any sense limited to a deterministic sequence of steps. (See <ref> [28] </ref> for discussion of the specification of alternatives, iteration and synchronization through the conditions and effects of rules.) 5 archive [?m:MODULE]: ### bindings (and (forall CFILE ?c suchthat (and no_chain (member [?m.cfiles ?c]) (or (?c.config = ?m.config) (?c.possible_config = "")))) (forall YFILE ?y suchthat (and no_chain (member [?m.yfiles ?y]) (or (?y.config <p> One approach to supporting interoperability among various formalisms (see [36]) is to use the rule-based language as an "assembly" process language, and translate into it other formalisms such as procedural [42] or petri-net [14]. (An experiment of this approach is described in <ref> [28] </ref>, and is further studied by Popovich.) This approach resembles the approach taken in some heterogeneous databases [31], where it is assumed that there is a translation from the various schemas and query formalisms into a common formalism which enables interoperability.
Reference: [29] <author> Takuya Katayama, </author> <title> editor. </title> <booktitle> 6th International Software Process Workshop: Support for the Software Process, </booktitle> <address> Hakodate, Japan, October 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: There has been an on-going debate in the PCE community on what is the preferred process-modeling paradigm (e.g., rule-based, petri-nets, imperative) and comparative studies were made in <ref> [29] </ref> and [45]. This topic is in general outside the scope of this paper, but for the approach described here the rule-based paradigm is clearly favorable.
Reference: [30] <author> Won Kim, Nat Ballou, Jorge F. Garza, and Darrel Woelk. </author> <title> A distributed object-oriented database system suporting shared and private databases. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 9(1) </volume> <pages> 31-51, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Specifically, it assumes an object-oriented data model in the flavor of Marvel 3.1. As for the actual schema, some but not all of the schema must be identical. That is, a shared sub-schema is required for process interoperability. On the other hand, no single-schema system (like Orion-2 <ref> [30] </ref>) is assumed, and schemas of different sub-environments can be arbitrarily different from each other. The details are discussed in 3.2.1. 18 3.1.4 Multiple Processes This is a key characteristic in the design of the architecture. <p> This is the subject of this section. Object Ids Distributed object naming schemes have been thoroughly investigated over the years, especially in the area of distributed databases (e.g., <ref> [30] </ref>). This is in general outside the scope of this thesis. However, an approach which fits the requirements of a DEPCE is presented below. <p> As most PCEs are essentially data-centered, they require special-purpose databases for management of persistent storage of the artifacts being developed [8] (also known as software engineering databases). Similarly, data-centered DEPCEs (including Oz) require mechanisms to support distributed and decentralized data, and therefore HDDB technology is of major importance. Orion-2 <ref> [30] </ref> is the latest in the series of Orion databases developed at Microelectronics and Computer Technology Corp. (Itasca is a later commercial version based on the Orion systems). It is a distributed (but not heterogeneous) Object-Oriented Data Base (OODB) supporting private and shared databases.
Reference: [31] <author> Won Kim and Jungyun Seo. </author> <title> Classifying schematic and data heterogeneity in multidatabase systems. </title> <journal> Computer, </journal> <volume> 24(12) </volume> <pages> 12-18, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: [36]) is to use the rule-based language as an "assembly" process language, and translate into it other formalisms such as procedural [42] or petri-net [14]. (An experiment of this approach is described in [28], and is further studied by Popovich.) This approach resembles the approach taken in some heterogeneous databases <ref> [31] </ref>, where it is assumed that there is a translation from the various schemas and query formalisms into a common formalism which enables interoperability. <p> Solutions to the aforementioned problems are partially addressed in section 3.2.2. However, the issue of schematic and data heterogeneity is in general a big problem in decentralized database research (see <ref> [31] </ref>), and is mostly out of scope for this thesis, so mainly practical and partial solutions to this problem will be given. <p> Pegasus integrates function and object-oriented programming techniques to enable mapping of any data model and schema into the Pegasus model by attaching optional functions that implement the mapping. UniSQL"M <ref> [31] </ref> is an HDDB that assumes a common relational data model to which all component database systems must convert their schemas. The paper provides a complete framework for classifying schematic and data heterogeneity as a basis for a later "homogenization" of the databases.
Reference: [32] <institution> Programming Systems Laboratory. </institution> <note> Marvel 3.1 Administrator's manual. Technical Report CUCS-009-93, </note> <institution> Columbia University Department of Computer Science, </institution> <month> March </month> <year> 1993. </year> <month> 57 </month>
Reference-contexts: which will be used throughout the proposal, and to understand what is part of this proposal and what has already been done and is taken as "given" in Oz the system that will realize the proposed model. (For a detailed description of Marvel and for a list of publications, see <ref> [32] </ref>.) Marvel's generic kernel is tailored by an administrator (or process engineer, these terms will be used interchangeably) who provides the data model, process model, tool envelopes, and coordination model for a specific organization or project.
Reference: [33] <author> Jacky Estublier Noureddine Belkhatir and Walcelio L. Melo. </author> <title> Adele 2: A support to large software development process. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 159-170, </pages> <address> Redondo Beach CA, Oc-tober 1991. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Various PCEs have been constructed as research prototypes and non-commercial systems, and some have been recently released as commercial products. Examples of relatively well-known academic and other research PCEs include Arcadia [26], Common Lisp Framework (CLF) [37], Melmac [14], Merlin [47], Adele <ref> [33] </ref>, and Oikos [1].
Reference: [34] <author> Maria H. Penedo and William Riddle. </author> <title> Process-sensitive SEE architecture (PSEA) workshop summary. </title> <booktitle> In ACM SIGSOFT Software Engineering Notes, </booktitle> <address> Boulder CO, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Section 4 briefly discusses some of that work. However, it has been hardly explored in the area of PCEs, mainly because the field is relatively young and the state-of-the-art in PCE technology has not reached this stage yet. But it has been recently acknowledged <ref> [34] </ref> as one of the main future research directions, and seems to be a natural evolution of PCE technology.
Reference: [35] <author> Burkhard Peuschel and Stefan Wolf. </author> <title> Architectural support for distributed process centered software development environments. </title> <booktitle> In Eighth International Software Process Workshop, </booktitle> <address> Schloss Dagstuhl, Wadern, Germany, </address> <month> March </month> <year> 1993. </year> <note> Position paper. </note>
Reference-contexts: A process server as a distinguished component of Oz that supports multiple formalisms is being investigated by Popovich [36] and complements the homogeneous process interoperability described in the proposal. Peuschel and Wolf explain in <ref> [35] </ref> why current client-server architectures are not adequate to support distributed software processes, analyze the requirements for supporting such processes, and discuss possible architectural approaches to supporting them, with the intent to investigate a future distributed architecture for the Merlin PCE [16].
Reference: [36] <author> Steven S. Popovich. </author> <title> Rule-based process servers for software development environments. </title> <booktitle> In 1992 Centre for Advanced Studies Conference, </booktitle> <volume> volume I, </volume> <pages> pages 477-497, </pages> <address> Toronto ON, Canada, </address> <month> November </month> <year> 1992. </year> <institution> IBM Canada Ltd. Laboratory. </institution>
Reference-contexts: In addition, it is hoped that the results of this research will be applicable to a wider range of process formalisms. One approach to supporting interoperability among various formalisms (see <ref> [36] </ref>) is to use the rule-based language as an "assembly" process language, and translate into it other formalisms such as procedural [42] or petri-net [14]. (An experiment of this approach is described in [28], and is further studied by Popovich.) This approach resembles the approach taken in some heterogeneous databases [31], <p> However, decentralization per se is not addressed, and in particular, the process state server is inherently centralized. A process server as a distinguished component of Oz that supports multiple formalisms is being investigated by Popovich <ref> [36] </ref> and complements the homogeneous process interoperability described in the proposal.
Reference: [37] <institution> CLF Project. CLF Manual. USC Information Sciences Institute, </institution> <month> January </month> <year> 1988. </year>
Reference-contexts: Various PCEs have been constructed as research prototypes and non-commercial systems, and some have been recently released as commercial products. Examples of relatively well-known academic and other research PCEs include Arcadia [26], Common Lisp Framework (CLF) <ref> [37] </ref>, Melmac [14], Merlin [47], Adele [33], and Oikos [1].
Reference: [38] <author> M. J. Rochkind. </author> <title> The source code control system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-1:364-370, </volume> <year> 1975. </year>
Reference-contexts: After editing, and if changes were made, the file should be compiled, and if successful, notify dependent "caller" modules about the change. In SubEnv SE2, an edit activity on a CFILE cannot be executed unless the file has been reserved with SCCS <ref> [38] </ref>. After editing, and if changes were made, the file should be analyzed using lint, and if successful proceed with compilation. Rule multi-edit takes two CFILEs as parameters. Assume that multi-edit is fired from SE1 with one local object, a, and one object from SE2, b.
Reference: [39] <author> Izhar Shy, Richard Taylor, and Leon Osterweil. </author> <title> A metaphor and a conceptual architecture for software development enviornments. </title> <booktitle> In Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 77-97, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. </note>
Reference-contexts: The work surveyed here can be categorized into two kinds: (1) "motivational" papers that realize the need for decentralization of PCEs and specify requirements for DEPCEs, and (2) few attempts to build systems which support some form of decentralization, distribution, and/or process inter-operation. Shy, Taylor, and Osterweil <ref> [39] </ref> draw an analogy between software development and the corporation model, and advocate that the "federated decentralization" model is the most 47 # # collect subenv_information about the new subenv, # and replicate it in all current subenvs using a batch file # consisting of adding the object and calling init_remote_subenv
Reference: [40] <author> Nandit Soparkar, Henry F. Korth, and Abraham Silberschatz. </author> <title> Failure-resilient transaction management in multidatabases. </title> <journal> Computer, </journal> <volume> 24(12) </volume> <pages> 28-36, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Another interesting problem is to support multiple synchronization policies at different sites, while still providing consistency. This problem is also being investigated in the context of heterogeneous data bases <ref> [40] </ref>. 9. Failure Recovery Like synchronization, failure recovery in decentralized environments introduces new problems, such as handling of new cases of failures (e.g., network fail ures), and recovery of a decentralized process state.
Reference: [41] <author> D. Sriram. </author> <title> Computer-aided collaborative product development. </title> <type> Technical Report IESL-91-05 IESL-92-02, </type> <institution> Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: CE is relevant to PCEs and (particularly) DEPCEs in that DEPCE requires cooperative tools and mechanisms for implementation of the functionality as specified in a multi-user decentralized process. Distributed & Integrated environment for Computer-aided Engineering (DICE) <ref> [41] </ref> is used to integrate multiple engineering disciplines and applications. It is based on the idea of a logical blackboard as a shared workspace. As such, it does not support the issue of autonomy. It supports collaboration and heterogeneity at the application level, but not at the data level.
Reference: [42] <author> Stanley M. Sutton, Jr. APPL/A: </author> <title> A Prototype Language for Software-Process Programming. </title> <type> PhD thesis, </type> <institution> University of Colorado, </institution> <year> 1990. </year>
Reference-contexts: One approach to supporting interoperability among various formalisms (see [36]) is to use the rule-based language as an "assembly" process language, and translate into it other formalisms such as procedural <ref> [42] </ref> or petri-net [14]. (An experiment of this approach is described in [28], and is further studied by Popovich.) This approach resembles the approach taken in some heterogeneous databases [31], where it is assumed that there is a translation from the various schemas and query formalisms into a common formalism which <p> For example, it is far from clear how to export a procedure of an imperative process program (e.g., as written in APPL/A <ref> [42] </ref>) with possible persistent data of its own, between processes. For example, this requires addition of a calling interface, input-output specifications, data-structure compatibility, and so forth.
Reference: [43] <author> Carl Tait and Dan Duchamp. </author> <title> Service interface and replica management algorithm for mobile file system clients. </title> <booktitle> In IEEE First International Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 190-197, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: The main difference is that executing an activity on a remote objectbase requires physical transfer of product data, since the file system is not necessarily shared among SubEnvs. Thus, under the "variable bandwidth" assumption, prefetching techniques such as in <ref> [43] </ref> would be employed to enhance the performance of remote activity execution. OLD * Language extensions to support CPM (import-export). * Distributed process translation and loading mechanism to support CPM.
Reference: [44] <author> Richard N. Taylor, Richard W. Selby, Michal Young, Frank C. Belz, Lori A. Clarke, Jack C. Wileden, Leon Osterweil, and Alex L. Wolf. </author> <title> Foundations for the Arcadia environment architecture. </title> <editor> In Peter Henderson, editor, </editor> <booktitle> ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 1-13, </pages> <address> Boston MA, </address> <month> November </month> <year> 1988. </year> <title> Special issues of Software Engineering Notes, 13(5), </title> <journal> November 1988 and SIGPLAN Notices, </journal> <volume> 24(2), </volume> <month> February </month> <year> 1989. </year>
Reference-contexts: 1 Introduction and Motivation Software Development Environments (SDEs) emerged in an attempt to address the problems associated with developing, maintaining and managing large-scale software projects. One of the main issues in SDE research is how to construct environments that are flexible and extensible, while at the same time integrated <ref> [44] </ref>. Early SDEs focused on integration, by providing frameworks in which tools and users could communicate and exchange information. However, most SDEs were either knowledge-less with respect to the actual process of development or maintenance, or imposed a hard-wired process.
Reference: [45] <author> Ian Thomas, </author> <title> editor. </title> <booktitle> 7th International Software Process Workshop, </booktitle> <address> Yountville CA, </address> <month> October </month> <year> 1991. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: There has been an on-going debate in the PCE community on what is the preferred process-modeling paradigm (e.g., rule-based, petri-nets, imperative) and comparative studies were made in [29] and <ref> [45] </ref>. This topic is in general outside the scope of this paper, but for the approach described here the rule-based paradigm is clearly favorable.
Reference: [46] <author> Walter F. Tichy. </author> <title> RCS | a system for version control. </title> <journal> Software | Practice & Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year> <month> 58 </month>
Reference-contexts: This example involve collaboration at the "micro" level, involving fine-grained activities. The next section described a solution to the "motivation problem" given earlier. In SubEnv SE1, an edit activity on a CFILE cannot be executed unless the file has been reserved with RCS <ref> [46] </ref>. After editing, and if changes were made, the file should be compiled, and if successful, notify dependent "caller" modules about the change. In SubEnv SE2, an edit activity on a CFILE cannot be executed unless the file has been reserved with SCCS [38].
Reference: [47] <author> Wilhelm Schafer, Burkhard Peuschel and Stefan Wolf. </author> <title> A knowledge-based software develop-ment environment supporting cooperative work. </title> <journal> International Journal on Software Engineering & Knowledge Engineering, </journal> <volume> 2(1) </volume> <pages> 79-106, </pages> <month> March </month> <year> 1992. </year> <month> 59 </month>
Reference-contexts: Various PCEs have been constructed as research prototypes and non-commercial systems, and some have been recently released as commercial products. Examples of relatively well-known academic and other research PCEs include Arcadia [26], Common Lisp Framework (CLF) [37], Melmac [14], Merlin <ref> [47] </ref>, Adele [33], and Oikos [1].
References-found: 47

