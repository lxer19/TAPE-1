URL: http://theory.lcs.mit.edu/~luca/pubs/parapxfull.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~luca/papers.html
Root-URL: 
Title: Parallel Approximation Algorithms by Positive Linear Programming  
Author: Luca Trevisan 
Keyword: PCP classes.  
Address: Via Salaria 113, I-00198 Roma, Italy.  
Affiliation: Universita di Roma La Sapienza Dipartimento di Scienze dell'Informazione  
Email: Email: trevisan@dsi.uniroma1.it.  
Web: Url: http://www.dsi.uniroma1.it/~trevisan  
Date: September 30, 1996  
Abstract: Several sequential approximation algorithms for combinatorial optimization problems are based on the following paradigm: solve a linear or semidefinite programming relaxation, then use randomized rounding to convert fractional solutions of the relaxation into integer solutions for the original combinatorial problem. We demonstrate that such a paradigm can also yield parallel approximation algorithms by showing how to convert certain linear programming relaxations into essentially equivalent positive linear programming [LN93] relaxations that can be near-optimally solved in NC. Building on this technique, and finding some new linear programming relaxations, we develop improved parallel approximation algorithms for Max Sat, Max Directed Cut, and Max kCSP. The Max Sat algorithm essentially matches the best approximation obtainable with sequential algorithms and has a fast sequential version. The Max kCSP algorithm improves even over previous sequential algorithms. We also show a connection between probabilistic proof checking and a restricted version of Max kCSP. This implies that our approximation algorithm for Max kCSP can be used to prove inclusion in P for certain 
Abstract-found: 1
Intro-found: 1
Reference: [AKK95] <author> S. Arora, D. Karger, and M. Karpinski. </author> <title> Polynomial time approximation schemes for dense instances of NP-hard problems. </title> <booktitle> In Proceedings of the 27th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 284-293, </pages> <year> 1995. </year>
Reference-contexts: This problem is somehow implicit in [PY91] and has been defined in [KMSV94] (it has also been called "Max k Function Sat" in <ref> [AKK95] </ref> and "Max k-GSAT" in [Pap94]). The interest in this problem has been mainly related to the fact that it can express any Max SNP problem. Variations of this problem have also been studied due to their applications to the field of Artificial Intelligence (see [LW96] and the references therein).
Reference: [AS92] <author> N. Alon and J. Spencer. </author> <title> The Probabilistic Method. </title> <publisher> Wiley Interscience, </publisher> <year> 1992. </year>
Reference-contexts: Proof: Regarding the first claim, in order to compute a 2 1k -approximate solution it is sufficient to optimally solve (CSP) using a polynomial time algorithm for linear programming [Kha79, Kar84], then use the random rounding scheme described in Theorem 10 and finally use conditional expectation (see <ref> [AS92] </ref>) to obtain an assigment whose measure is no smaller than the average measure of such random assigment. The approximation guarantee follows from Theorem 10.
Reference: [Baz96] <author> C. Bazgan. </author> <type> Personal communication. </type> <year> 1996. </year>
Reference-contexts: Such results strengthen previous ones by Bellare, Goldreich and Sudan [BGS95]. Related and independent results After completing this research, we learnt that Cristina Bazgan independentely used linear programming and random rounding to approximate Max k Conj Sat within a factor e=(e 1=k + 1) k <ref> [Baz96] </ref>. Such approximation is better than 2 k , but is worse than 2 1k . Lau and Watanabe [LW96] used linear programming and random rounding to approximate the Max 2CSP problem over non-boolean domains: both their relaxations and their 3 rounding schemes are different from ours.
Reference: [BC93] <author> D.P. Bovet and P. Crescenzi. </author> <title> Introduction to the Theory of Complexity. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: See e.g. <ref> [BC93] </ref> for formal definitions about optimization problems and approximation algorithms. 1 where a simple deterministic rounding scheme is used. However, randomized rounding schemes (first introduced by Raghavan and Thompson [RT87]) are in general more efficient and are usually derandomizable. <p> previous NC approximation for this problem was 1/2, due to Bongiovanni et al. [BCA91] and, independentely, to Hunt et al. [HMR + 93] 2 Recall that, informally, an NC algorithm is an algorithm that runs on a parallel computer in poly-logarithmic time using a polynomial number of processors (see e.g. <ref> [BC93] </ref> for formal definitions). 2 using techniques of Luby [Lub86]. More generally, [BCA91, HMR + 93] developed NC approximation algorithms for all the problems in the Max SNP [PY91] class. In particular, their algorithm for Max Sat requires a quadratic number of processors.
Reference: [BCA91] <author> G. Bongiovanni, P. Crescenzi, and S. De Agostino. </author> <title> Descriptive complexity and parallel approximation of optimization problems. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference-contexts: Our algorithm achieves similar approximation with a remarkably faster running time. The best previous NC approximation for this problem was 1/2, due to Bongiovanni et al. <ref> [BCA91] </ref> and, independentely, to Hunt et al. [HMR + 93] 2 Recall that, informally, an NC algorithm is an algorithm that runs on a parallel computer in poly-logarithmic time using a polynomial number of processors (see e.g. [BC93] for formal definitions). 2 using techniques of Luby [Lub86]. <p> More generally, <ref> [BCA91, HMR + 93] </ref> developed NC approximation algorithms for all the problems in the Max SNP [PY91] class. In particular, their algorithm for Max Sat requires a quadratic number of processors. <p> For both problems, only 2 k -approximate (see e.g. [KMSV94]) sequential algorithms are known. The same approximation factor is easily achievable in NC using ideas from <ref> [Lub86, BCA91, HMR + 93] </ref>. We define a linear programming relaxation of the Max k Conj Sat problem and we show that a proper random rounding scheme can be used to yield a 2 1k approximation.
Reference: [BGS95] <author> M. Bellare, O. Goldreich, and M. Sudan. </author> <title> Free bits, PCP's and non-approximability - towards tight results (3rd version). Technical Report TR95-24, </title> <booktitle> Electronic Colloquium on Computational Complexity, </booktitle> <year> 1995. </year> <note> Extended abstract in Proc. of FOCS'95. </note>
Reference-contexts: Such results strengthen previous ones by Bellare, Goldreich and Sudan <ref> [BGS95] </ref>. Related and independent results After completing this research, we learnt that Cristina Bazgan independentely used linear programming and random rounding to approximate Max k Conj Sat within a factor e=(e 1=k + 1) k [Baz96]. <p> The ratio between the two values is arbitrarily close to 1=2. 6 Relations with Proof Checking We start by giving some definitions about probabilistically checkable proofs (we follow the notation used in <ref> [BGS95] </ref>). A verifier is an oracle probabilistic polynomial-time Turing machine V . During its computation, V tosses random coins, reads its input and has oracle access to a string called proof. Let x be an input and be a proof. <p> Several recent results about the hardness of approximation of combinatorial optimization problems (including Max Sat <ref> [BGS95] </ref> and Max Directed Cut [BGS95, TSSW96]) have been proved using the fact, proved in [BGS95], that NP = PCP 1;s [log; 3] for any s &gt; 0:85. The verifier developed to prove such result is adaptive. <p> Several recent results about the hardness of approximation of combinatorial optimization problems (including Max Sat [BGS95] and Max Directed Cut <ref> [BGS95, TSSW96] </ref>) have been proved using the fact, proved in [BGS95], that NP = PCP 1;s [log; 3] for any s &gt; 0:85. The verifier developed to prove such result is adaptive. Using less than 3 queries or having a soundness smaller than 0.85 would immediately imply improved non-approximability results. <p> Several recent results about the hardness of approximation of combinatorial optimization problems (including Max Sat <ref> [BGS95] </ref> and Max Directed Cut [BGS95, TSSW96]) have been proved using the fact, proved in [BGS95], that NP = PCP 1;s [log; 3] for any s &gt; 0:85. The verifier developed to prove such result is adaptive. Using less than 3 queries or having a soundness smaller than 0.85 would immediately imply improved non-approximability results. <p> Theorem 19 (Hardness of Max k Conj Sat) For any k 11, if Max k Conj Sat is 2 bk=11c -approximable, then P = NP. Proof: Bellare Goldreich and Sudan <ref> [BGS95] </ref> prove that an s &lt; :5 exists such that NP = PCP 1;s [log; 11]. <p> In particular, PCP 1;0:249 [log; 3] P. The above theorem improves over previous results by Bellare, Goldreich and Sudan <ref> [BGS95] </ref>, stating that PCP c;s [log; q] P for any c=s &gt; 2 q and PCP 1;0:18 [log; 3] P, respectively. 7 Conclusions Following the work of [Rag88, GW94] we considered linear programming relaxations of combinatorial optimization problems and used random rounding to obtain feasible solutions from the fractional solutions of
Reference: [CS95] <author> B. Chor and M. Sudan. </author> <title> A geometric approach to betweennes. </title> <booktitle> In Proceedings of the 3rd European Symposium on Algorithms, </booktitle> <year> 1995. </year>
Reference-contexts: the celebrated results by Goemans and Williamson [GW95], who showed that Max Cut and Max 2Sat are :878-approximable with this technique, an increasing number of results have been obtained using semidefinite programming, including better results for Max 2Sat [FG95] and new results for graph coloring [KMS94], and the "betweeness" problem <ref> [CS95] </ref>. Shmoys' recent survey on approximation algorithms [Shm95] contains other applications of linear and semidefinite programming.
Reference: [FG95] <author> U. Feige and M.X. Goemans. </author> <title> Approximating the value of two provers proof systems, with applications to MAX 2SAT and MAX DICUT. </title> <booktitle> In Proceedings of the 3rd Israel Symposium on Theory of Computing and Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Starting with the celebrated results by Goemans and Williamson [GW95], who showed that Max Cut and Max 2Sat are :878-approximable with this technique, an increasing number of results have been obtained using semidefinite programming, including better results for Max 2Sat <ref> [FG95] </ref> and new results for graph coloring [KMS94], and the "betweeness" problem [CS95]. Shmoys' recent survey on approximation algorithms [Shm95] contains other applications of linear and semidefinite programming. <p> Since PLP can be solved sequentially in quasi-linear time, our translation also implies a (3=4 o (1))-approximate sequential algorithm that runs in ~ O (m) time, where m is the number of clauses. Recall that the best approximation that is currently achievable for Max Sat using sequential algorithms <ref> [GW94, GW95, FG95] </ref> is roughly :76, and to obtain such approximation it is necessary to solve semidefinite programs; Yannakakis' 3=4-approximate algorithm [Yan94] requires to solve max flow problems. Our algorithm achieves similar approximation with a remarkably faster running time. <p> Previous results [Lub86] implied that this problem was 1=4-approximable in NC. Sequential approximation algorithms for this problem are, however, far better: Feige and Goemans <ref> [FG95] </ref> (improving a previous :796-approximate algorithm by Goemans and Williamson [GW95]) recently gave a :855-approximate algorithm using semidefinite programming. Relation to PCP's.
Reference: [GW94] <author> M.X. Goemans and D.P. Williamson. </author> <title> New 3/4-approximation algorithms for the maximum satisfiability problem. </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 7(4) </volume> <pages> 656-666, </pages> <year> 1994. </year> <note> Preliminary version in Proc. of IPCO'93. </note>
Reference-contexts: However, randomized rounding schemes (first introduced by Raghavan and Thompson [RT87]) are in general more efficient and are usually derandomizable. A very nice application of randomly rounding a linear programming (LP) relaxation is Goemans and Williamson's 3/4-approximate algorithm for Max Sat <ref> [GW94] </ref> that achieves the same performance of a previous algorithm by Yannakakis [Yan94] but that is much easier to describe and analyse. Outstanding approximation results have been obtained in the last two years by randomly rounding semidefinite relaxations of combinatorial problems. <p> The Max Sat problem. We then consider the Max Sat problem, and its linear programming relaxation due to Goemans and Williamson <ref> [GW94] </ref>. <p> Since PLP can be solved sequentially in quasi-linear time, our translation also implies a (3=4 o (1))-approximate sequential algorithm that runs in ~ O (m) time, where m is the number of clauses. Recall that the best approximation that is currently achievable for Max Sat using sequential algorithms <ref> [GW94, GW95, FG95] </ref> is roughly :76, and to obtain such approximation it is necessary to solve semidefinite programs; Yannakakis' 3=4-approximate algorithm [Yan94] requires to solve max flow problems. Our algorithm achieves similar approximation with a remarkably faster running time. <p> Goemans and Williamson <ref> [GW94] </ref> consider the following linear programming relaxation of the Max Sat problem. max j=1 w j z j z j i2C + t i + i2C (1 t i ) for all j 2 [m] 0 t i 1 for all i 2 [n] To see that (SAT) is indeed a <p> In particular, PCP 1;0:249 [log; 3] P. The above theorem improves over previous results by Bellare, Goldreich and Sudan [BGS95], stating that PCP c;s [log; q] P for any c=s &gt; 2 q and PCP 1;0:18 [log; 3] P, respectively. 7 Conclusions Following the work of <ref> [Rag88, GW94] </ref> we considered linear programming relaxations of combinatorial optimization problems and used random rounding to obtain feasible solutions from the fractional solutions of the linear programs.
Reference: [GW95] <author> M.X. Goemans and D.P. Williamson. </author> <title> Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. </title> <journal> Journal of the ACM, </journal> <volume> 42(6) </volume> <pages> 1115-1145, </pages> <year> 1995. </year> <note> Preliminary version in Proc. of STOC'94. </note>
Reference-contexts: Outstanding approximation results have been obtained in the last two years by randomly rounding semidefinite relaxations of combinatorial problems. Starting with the celebrated results by Goemans and Williamson <ref> [GW95] </ref>, who showed that Max Cut and Max 2Sat are :878-approximable with this technique, an increasing number of results have been obtained using semidefinite programming, including better results for Max 2Sat [FG95] and new results for graph coloring [KMS94], and the "betweeness" problem [CS95]. <p> Since PLP can be solved sequentially in quasi-linear time, our translation also implies a (3=4 o (1))-approximate sequential algorithm that runs in ~ O (m) time, where m is the number of clauses. Recall that the best approximation that is currently achievable for Max Sat using sequential algorithms <ref> [GW94, GW95, FG95] </ref> is roughly :76, and to obtain such approximation it is necessary to solve semidefinite programs; Yannakakis' 3=4-approximate algorithm [Yan94] requires to solve max flow problems. Our algorithm achieves similar approximation with a remarkably faster running time. <p> Previous results [Lub86] implied that this problem was 1=4-approximable in NC. Sequential approximation algorithms for this problem are, however, far better: Feige and Goemans [FG95] (improving a previous :796-approximate algorithm by Goemans and Williamson <ref> [GW95] </ref>) recently gave a :855-approximate algorithm using semidefinite programming. Relation to PCP's. Finally, we show that an approximation algorithm for Max k Conj Sat can be used to approximate the probability of acceptance of probabilistic verifiers that adaptively read k bits.
Reference: [Hag92] <author> D.J. Haglin. </author> <title> Approximating maximum 2-CNF satisfiability. </title> <journal> Parallel Processing Letters, </journal> <volume> 2 </volume> <pages> 181-187, </pages> <year> 1992. </year>
Reference-contexts: More generally, [BCA91, HMR + 93] developed NC approximation algorithms for all the problems in the Max SNP [PY91] class. In particular, their algorithm for Max Sat requires a quadratic number of processors. More recently, Haglin <ref> [Hag92] </ref> presented an NC 1/2-approximate algorithm for Max 2Sat that uses a linear number of processors, and Serna and Xhafa [SX95] showed that a linear number of processors is sufficient to 1/2-approximate the general Max Sat problem. The Max kCSP problem.
Reference: [HMR + 93] <author> H. B. Hunt III, M.V. Marathe, V. Radhakrishnan, S.S. Ravi, D.J. Rosenkrantz, and R.E. Stearns. </author> <title> Every problem in MAX SNP has a parallel approximation algorithm. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: Our algorithm achieves similar approximation with a remarkably faster running time. The best previous NC approximation for this problem was 1/2, due to Bongiovanni et al. [BCA91] and, independentely, to Hunt et al. <ref> [HMR + 93] </ref> 2 Recall that, informally, an NC algorithm is an algorithm that runs on a parallel computer in poly-logarithmic time using a polynomial number of processors (see e.g. [BC93] for formal definitions). 2 using techniques of Luby [Lub86]. <p> More generally, <ref> [BCA91, HMR + 93] </ref> developed NC approximation algorithms for all the problems in the Max SNP [PY91] class. In particular, their algorithm for Max Sat requires a quadratic number of processors. <p> For both problems, only 2 k -approximate (see e.g. [KMSV94]) sequential algorithms are known. The same approximation factor is easily achievable in NC using ideas from <ref> [Lub86, BCA91, HMR + 93] </ref>. We define a linear programming relaxation of the Max k Conj Sat problem and we show that a proper random rounding scheme can be used to yield a 2 1k approximation.
Reference: [Hoc82] <author> D. Hochbaum. </author> <title> Approximation algorithms for set covering and vertex cover problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11 </volume> <pages> 555-556, </pages> <year> 1982. </year>
Reference-contexts: Thus, if we round an optimum solution for the relaxation we will get an r-approximate 1 solution for the combinatorial problem. A well known early example of this technique is Hochbaum's approximation algorithm for Min Weighted Vertex Cover <ref> [Hoc82] </ref>, fl Research partially supported by the HCM SCOOP project of the European Union.
Reference: [Kar84] <author> N. Karmakar. </author> <title> A new polynomial-time algorithm for linear programming. </title> <journal> Combinator-ica, </journal> <volume> 4 </volume> <pages> 373-395, </pages> <year> 1984. </year>
Reference-contexts: Proof: Regarding the first claim, in order to compute a 2 1k -approximate solution it is sufficient to optimally solve (CSP) using a polynomial time algorithm for linear programming <ref> [Kha79, Kar84] </ref>, then use the random rounding scheme described in Theorem 10 and finally use conditional expectation (see [AS92]) to obtain an assigment whose measure is no smaller than the average measure of such random assigment. The approximation guarantee follows from Theorem 10.
Reference: [Kha79] <author> L. G. </author> <title> Khachian. A polynomial time algorithm for linear programming. </title> <journal> Doklady Akademia Nauk SSR, </journal> <volume> 224 </volume> <pages> 1093-1096, </pages> <year> 1979. </year>
Reference-contexts: Proof: Regarding the first claim, in order to compute a 2 1k -approximate solution it is sufficient to optimally solve (CSP) using a polynomial time algorithm for linear programming <ref> [Kha79, Kar84] </ref>, then use the random rounding scheme described in Theorem 10 and finally use conditional expectation (see [AS92]) to obtain an assigment whose measure is no smaller than the average measure of such random assigment. The approximation guarantee follows from Theorem 10.
Reference: [KMS94] <author> D. Karger, R. Motwani, and M. Sudan. </author> <title> Approximate graph coloring by semidefinite programming. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1994. </year> <month> 15 </month>
Reference-contexts: Starting with the celebrated results by Goemans and Williamson [GW95], who showed that Max Cut and Max 2Sat are :878-approximable with this technique, an increasing number of results have been obtained using semidefinite programming, including better results for Max 2Sat [FG95] and new results for graph coloring <ref> [KMS94] </ref>, and the "betweeness" problem [CS95]. Shmoys' recent survey on approximation algorithms [Shm95] contains other applications of linear and semidefinite programming.
Reference: [KMSV94] <author> S. Khanna, R. Motwani, M. Sudan, and U. Vazirani. </author> <title> On syntactic versus computational views of approximability. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 819-830, </pages> <year> 1994. </year>
Reference-contexts: The Max kCSP problem. For any k 1, the Max kCSP problem is the variation of the Max Sat problem where any clause (also called constraint) is allowed to be an arbitrary boolean function over k variables. This problem is somehow implicit in [PY91] and has been defined in <ref> [KMSV94] </ref> (it has also been called "Max k Function Sat" in [AKK95] and "Max k-GSAT" in [Pap94]). The interest in this problem has been mainly related to the fact that it can express any Max SNP problem. <p> We show that in order to r-approximate this problem it is sufficient to r-approximate its restricted version Max k Conj Sat, where each clause is a conjunction of literals. For both problems, only 2 k -approximate (see e.g. <ref> [KMSV94] </ref>) sequential algorithms are known. The same approximation factor is easily achievable in NC using ideas from [Lub86, BCA91, HMR + 93].
Reference: [LN93] <author> M. Luby and N. Nisan. </author> <title> A parallel approximation algorithm for positive linear programming. </title> <booktitle> In Proceedings of the 25th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 448-457, </pages> <year> 1993. </year>
Reference-contexts: However, there exists a restricted version of linear programming (called Positive Linear Programming, PLP for short) that can be near-optimally solved using an NC algorithm 2 by Luby and Nisan <ref> [LN93] </ref>. <p> Given an instance I of Max Sat we let opt MS (I) be the measure of an optimum solution for I. Definition 1 (Positive Linear Programming <ref> [LN93] </ref>) A maximization linear program is said to be an instance of positive linear programming (PLP for short) if it is written as max c T x Ax b where all the entries of A, b and c are non-negative. Maximization positive linear programs are also called fractional packing problems.
Reference: [Lub86] <author> M. Luby. </author> <title> A simple parallel algorithm for the maximal independent set problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15 </volume> <pages> 1036-1053, </pages> <year> 1986. </year>
Reference-contexts: to Bongiovanni et al. [BCA91] and, independentely, to Hunt et al. [HMR + 93] 2 Recall that, informally, an NC algorithm is an algorithm that runs on a parallel computer in poly-logarithmic time using a polynomial number of processors (see e.g. [BC93] for formal definitions). 2 using techniques of Luby <ref> [Lub86] </ref>. More generally, [BCA91, HMR + 93] developed NC approximation algorithms for all the problems in the Max SNP [PY91] class. In particular, their algorithm for Max Sat requires a quadratic number of processors. <p> For both problems, only 2 k -approximate (see e.g. [KMSV94]) sequential algorithms are known. The same approximation factor is easily achievable in NC using ideas from <ref> [Lub86, BCA91, HMR + 93] </ref>. We define a linear programming relaxation of the Max k Conj Sat problem and we show that a proper random rounding scheme can be used to yield a 2 1k approximation. <p> Since it is well known that Max Directed Cut can be seen as a special case of Max 2 Conj Sat, our result for Max kCSP implies that we have an NC (1=2 o (1))-approximate algorithm for Max Directed Cut. Previous results <ref> [Lub86] </ref> implied that this problem was 1=4-approximable in NC. Sequential approximation algorithms for this problem are, however, far better: Feige and Goemans [FG95] (improving a previous :796-approximate algorithm by Goemans and Williamson [GW95]) recently gave a :855-approximate algorithm using semidefinite programming. Relation to PCP's.
Reference: [LW95] <author> M. Luby and A. Wigderson. </author> <title> Pairwise independence and derandomization. </title> <type> Technical Report TR-95-035, </type> <institution> International Computer Science Institute, </institution> <year> 1995. </year>
Reference-contexts: The following result is useful to derandomize parallel algorithms where randomization is only needed to generate random variables with limited independence. Theorem 3 (see e.g. <ref> [LW95, Section 16] </ref>) A pairwise independent distribution of n random variables of size O (n) is explicitely constructable in NC.
Reference: [LW96] <author> H.C. Lau and O. Watanabe. </author> <title> Randomized approximation of the constraint satisfaction problem. </title> <booktitle> In Proceedings of the 5th Scandinavian Workshop on Algorithm Theory, </booktitle> <year> 1996. </year>
Reference-contexts: The interest in this problem has been mainly related to the fact that it can express any Max SNP problem. Variations of this problem have also been studied due to their applications to the field of Artificial Intelligence (see <ref> [LW96] </ref> and the references therein). We show that in order to r-approximate this problem it is sufficient to r-approximate its restricted version Max k Conj Sat, where each clause is a conjunction of literals. For both problems, only 2 k -approximate (see e.g. [KMSV94]) sequential algorithms are known. <p> Such approximation is better than 2 k , but is worse than 2 1k . Lau and Watanabe <ref> [LW96] </ref> used linear programming and random rounding to approximate the Max 2CSP problem over non-boolean domains: both their relaxations and their 3 rounding schemes are different from ours. Motivated by the results of the present paper, a :3674--approximate algorithm for Max 3 Conj Sat has been recently developed in [TSSW96].
Reference: [Pap94] <author> C.H. Papadimitriou. </author> <title> Computational Complexity. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: This problem is somehow implicit in [PY91] and has been defined in [KMSV94] (it has also been called "Max k Function Sat" in [AKK95] and "Max k-GSAT" in <ref> [Pap94] </ref>). The interest in this problem has been mainly related to the fact that it can express any Max SNP problem. Variations of this problem have also been studied due to their applications to the field of Artificial Intelligence (see [LW96] and the references therein).
Reference: [PY91] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Optimization, approximation, and complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 425-440, </pages> <year> 1991. </year> <note> Preliminary version in Proc. of STOC'88. </note>
Reference-contexts: More generally, [BCA91, HMR + 93] developed NC approximation algorithms for all the problems in the Max SNP <ref> [PY91] </ref> class. In particular, their algorithm for Max Sat requires a quadratic number of processors. <p> The Max kCSP problem. For any k 1, the Max kCSP problem is the variation of the Max Sat problem where any clause (also called constraint) is allowed to be an arbitrary boolean function over k variables. This problem is somehow implicit in <ref> [PY91] </ref> and has been defined in [KMSV94] (it has also been called "Max k Function Sat" in [AKK95] and "Max k-GSAT" in [Pap94]). The interest in this problem has been mainly related to the fact that it can express any Max SNP problem. <p> Proof: We will essentially describe an L-reduction <ref> [PY91] </ref> from LP in (fl; k) form to PLP. <p> It is a folklore result that has been mentioned a few times in the litterature (e.g. in [TSSW96]) and can be traced back to the idea of giving logical formulations of combinatorial optimization problems <ref> [PY91] </ref>. Such equivalence immediately implies the existence of a parallel approximation algorithm for Max Directed Cut. Corollary 14 (Approximation for Max Directed Cut) 1.
Reference: [Rag88] <author> P. Raghavan. </author> <title> Probabilistic construction of deterministic algorithms: approximating packing integer programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 37 </volume> <pages> 130-143, </pages> <year> 1988. </year>
Reference-contexts: In particular, PCP 1;0:249 [log; 3] P. The above theorem improves over previous results by Bellare, Goldreich and Sudan [BGS95], stating that PCP c;s [log; q] P for any c=s &gt; 2 q and PCP 1;0:18 [log; 3] P, respectively. 7 Conclusions Following the work of <ref> [Rag88, GW94] </ref> we considered linear programming relaxations of combinatorial optimization problems and used random rounding to obtain feasible solutions from the fractional solutions of the linear programs.
Reference: [RT87] <author> P. Raghavan and C.D. Thompson. </author> <title> Randomized rounding: a technique for provably good algorithms and algorithmic proofs. </title> <journal> Combinatorica, </journal> <volume> 7 </volume> <pages> 365-374, </pages> <year> 1987. </year>
Reference-contexts: See e.g. [BC93] for formal definitions about optimization problems and approximation algorithms. 1 where a simple deterministic rounding scheme is used. However, randomized rounding schemes (first introduced by Raghavan and Thompson <ref> [RT87] </ref>) are in general more efficient and are usually derandomizable.
Reference: [Ser91] <author> M. Serna. </author> <title> Approximating linear programming is log-space complete for P. </title> <journal> Information Processing Letters, </journal> <volume> 37, </volume> <year> 1991. </year>
Reference-contexts: Unfortunately, such powerful techniques do not seem to be useful to develop efficient parallel approximation algorithms, the main reason being that both linear and semidefinite programming not only are P-hard problems, but it is even P-hard to approximate them <ref> [Ser91] </ref>. However, there exists a restricted version of linear programming (called Positive Linear Programming, PLP for short) that can be near-optimally solved using an NC algorithm 2 by Luby and Nisan [LN93].
Reference: [Shm95] <author> D. Shmoys. </author> <title> Computing near-optimal solutions to combinatorial optimization problems. In Combinatorial Optimization. </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> Vol. 20, </volume> <year> 1995. </year>
Reference-contexts: Shmoys' recent survey on approximation algorithms <ref> [Shm95] </ref> contains other applications of linear and semidefinite programming. Unfortunately, such powerful techniques do not seem to be useful to develop efficient parallel approximation algorithms, the main reason being that both linear and semidefinite programming not only are P-hard problems, but it is even P-hard to approximate them [Ser91].
Reference: [SX95] <author> M. Serna and F. Xhafa. </author> <title> On parallel versus sequential approximation. </title> <booktitle> In Proceedings of the 3rd European Symposium on Algorithms, </booktitle> <pages> pages 409-419, </pages> <year> 1995. </year>
Reference-contexts: In particular, their algorithm for Max Sat requires a quadratic number of processors. More recently, Haglin [Hag92] presented an NC 1/2-approximate algorithm for Max 2Sat that uses a linear number of processors, and Serna and Xhafa <ref> [SX95] </ref> showed that a linear number of processors is sufficient to 1/2-approximate the general Max Sat problem. The Max kCSP problem.
Reference: [TSSW96] <author> L. Trevisan, G.B. Sorkin, M. Sudan, and D.P. Williamson. Gadgets, </author> <title> approximation and linear programming. </title> <booktitle> In Proceedings of the 37th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1996. </year>
Reference-contexts: Motivated by the results of the present paper, a :3674--approximate algorithm for Max 3 Conj Sat has been recently developed in <ref> [TSSW96] </ref>. Seemingly, such an algorithm does not extend to the general Max k Conj Sat problem, and, since it involves semidefinite programming, it cannot be easily parallelized. <p> Indeed, there is a natural correspondence between nodes and boolean variables, edges and constraints; and partitions and assigments. It is a folklore result that has been mentioned a few times in the litterature (e.g. in <ref> [TSSW96] </ref>) and can be traced back to the idea of giving logical formulations of combinatorial optimization problems [PY91]. Such equivalence immediately implies the existence of a parallel approximation algorithm for Max Directed Cut. Corollary 14 (Approximation for Max Directed Cut) 1. <p> Several recent results about the hardness of approximation of combinatorial optimization problems (including Max Sat [BGS95] and Max Directed Cut <ref> [BGS95, TSSW96] </ref>) have been proved using the fact, proved in [BGS95], that NP = PCP 1;s [log; 3] for any s &gt; 0:85. The verifier developed to prove such result is adaptive. Using less than 3 queries or having a soundness smaller than 0.85 would immediately imply improved non-approximability results.
Reference: [Yan94] <author> M. Yannakakis. </author> <title> On the approximation of maximum satisfiability. </title> <journal> Journal of Algorithms, </journal> <volume> 17, </volume> <year> 1994. </year> <note> Preliminary version in Proc. of SODA'92. 16 </note>
Reference-contexts: A very nice application of randomly rounding a linear programming (LP) relaxation is Goemans and Williamson's 3/4-approximate algorithm for Max Sat [GW94] that achieves the same performance of a previous algorithm by Yannakakis <ref> [Yan94] </ref> but that is much easier to describe and analyse. Outstanding approximation results have been obtained in the last two years by randomly rounding semidefinite relaxations of combinatorial problems. <p> Recall that the best approximation that is currently achievable for Max Sat using sequential algorithms [GW94, GW95, FG95] is roughly :76, and to obtain such approximation it is necessary to solve semidefinite programs; Yannakakis' 3=4-approximate algorithm <ref> [Yan94] </ref> requires to solve max flow problems. Our algorithm achieves similar approximation with a remarkably faster running time. <p> Starting with an optimum solution for (SAT), one gets a random assigment that, on the average, has a cost that is at least 3/4 of the optimum. An explicit 3/4-approximate assignment can be found deterministically using the method of conditional expectation ([AS92], see also <ref> [Yan94] </ref>). We are now ready to prove the main result of this section. Theorem 8 (Approximation for Max Sat) 1. <p> After applying random rounding, derandomization can be done in linear time using conditional expectation (see e.g. <ref> [Yan94] </ref>). Observe that, while doing the derandomization, we can ignore all literals occuring in a clause but the first five (this is compatible with our approximation analysis).
References-found: 30

