URL: http://pertsserver.cs.uiuc.edu/members/wfeng/paper/wmdrtss97.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/members/wfeng/paper/paper.html
Root-URL: http://www.cs.uiuc.edu
Email: ffeng, syyid, janeliug@cs.uiuc.edu  
Title: Providing for an Open, Real-Time CORBA  
Author: W. Feng, U. Syyid, and J. W.-S. Liu 
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: While CORBA provides an infrastructure which allows objects to communicate, independent of the specific techniques, languages, and platforms used to implement the objects, it is not yet suited for real-time applications since CORBA lacks essential quality-of-service (QoS) features. Current work on real-time CORBA includes an off-line scheduled, hard, real-time system based on rate-monotonic scheduling and an on-line scheduled, best-effort, real-time system based on the earliest-deadline-first algorithm. The former provides QoS guarantees at the expense of run-time scheduling flexibility while the latter provides the complement. In this paper, we propose an approach which provides the advantages of both, that is, QoS guarantees and run-time scheduling flexibility. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Abdelzaher, S. Dawson, W-C. Feng, F. Ja-hanian, S. Johnson, A. Mehra, T. Mitton, A. Shaickh, K. Shin, Z. Wang, and H. Zou. </author> <title> Armada middleware suite. </title> <booktitle> In IEEE Workshop on Middleware for Distributed Real-Time Systems and Services, </booktitle> <month> December </month> <year> 1997. </year>
Reference-contexts: Other related work in QoS distributed computing, but not directly related to CORBA, includes the EPIQ project at the University of Illinois [13, 3] and the ARMADA project at the University of Michigan <ref> [1] </ref>. 2.1 TAO The ACE ORB (TAO) by Schmidt et al. [16] addresses many of the issues involved in providing support for hard and soft real-time applications in a static environment.
Reference: [2] <author> D. D. Clark and D. L. Tennenhouse. </author> <title> Architectural considerations for a new generation of protocols. </title> <booktitle> In Proceedings of the Symposium on Communications Architectures and Protocols (SIG-COMM), </booktitle> <pages> pages 200-208, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Instead of using a layered de-multiplexing scheme i.e., de-multiplex to server and then to operation, de-multiplexing can be performed using the active de-multiplexing scheme in O (1) time and thus is deterministic [16]. The presentation layer has been recognized as one of the major bottlenecks in high-performance communication sub-systems <ref> [2] </ref>, and several optimizations have been suggested to improve performance, however most of these lead to improved, albeit nondeterministic performance. TAO, for example, caches pre-marshalled application data units to improve performance, this can however lead to non-determinism. Another tradeoff is between using compiled or interpreted code for marshalling.
Reference: [3] <author> Z. Deng and J. W.-S. Liu. </author> <title> Scheduling real-time applications in an open environment. </title> <booktitle> In Proceedings of the 18th IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1997. </year>
Reference-contexts: Other related work in QoS distributed computing, but not directly related to CORBA, includes the EPIQ project at the University of Illinois <ref> [13, 3] </ref> and the ARMADA project at the University of Michigan [1]. 2.1 TAO The ACE ORB (TAO) by Schmidt et al. [16] addresses many of the issues involved in providing support for hard and soft real-time applications in a static environment. <p> Another potential drawback is the need for global knowledge of the real-time constraints of each application to perform schedulability analysis for the system. 2.3 EPIQ The EPIQ <ref> [13, 3] </ref> framework consists of an end-to-end quality-of-service (QoS) management architecture for complex, distributed real-time systems. The system handles all types of scheduling policies and guarantees QoS to all real-time applications. <p> Specifically, EPIQ provides a two-level scheduling scheme where each application is assigned a constant utilization server or total bandwidth server <ref> [3] </ref> at the upper level. The applications themselves may use any scheduling policy which is suitable for the application, e.g., RM, EDF, cyclic executive. At the lower level, the OS scheduler maintains and schedules each of the servers by an EDF policy.
Reference: [4] <author> W. Feng and J. W.-S. Liu. </author> <title> Algorithms for scheduling real-time tasks with end-to-end deadlines and input error. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 23(2) </volume> <pages> 93-106, </pages> <month> February </month> <year> 1997. </year>
Reference-contexts: To further ensure that real-time tasks meet their deadlines, the scheduling broker's server object can employ the imprecise-computation technique to trade off service quality for information timeliness <ref> [12, 4] </ref>. Since many large, complex, and distributed real-time application systems are built based on an estimate of the worst-case load level, transient overloads can occur whenever the actual load level of the system temporarily exceeds its estimated worst-case load level.
Reference: [5] <author> R. Ginis, V.F. Wolfe, and J. J. Prichard. </author> <title> The design of an open system with distributed real-time requirements. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: The former is implemented in a real-time middleware framework called TAO (The ACE ORB) [16], and the latter is part of the NRaD/URI real-time CORBA system <ref> [5, 18] </ref>.
Reference: [6] <author> Object Management Group. </author> <title> The common object request broker: Architecture and specification, 2.0. </title> <type> Technical report, OMG, </type> <month> July </month> <year> 1995. </year>
Reference-contexts: 1 Introduction The Common Object Request Broker Architecture (CORBA) <ref> [6] </ref>, an evolving standard for distributed object-computing middleware, is a specification of an architecture and interface that allows an application to operate on objects (servers) in a transparent, independent manner, regardless of platform, operating system or locale considerations.
Reference: [7] <institution> Object Management Group. Realtime technologies: Request for information. </institution> <type> Technical report, OMG, </type> <month> February </month> <year> 1997. </year>
Reference-contexts: Thus, over the past few years, there has been a movement to standardize middleware for real-time technologies. In particular, the Object Management Group (OMG) recently put out a Request for Information (RFI) to solicit proposals for the need of real-time capabilities in CORBA <ref> [7] </ref>. The results of which are available in [8]. 2 Related Work In order to shorten the software development time of real-time applications, programmers need to automate as much of the development process as possible with maximum code re-use.
Reference: [8] <institution> Object Management Group. </institution> <note> Responses to re-altime technologies: Request for information. Technical report, OMG (www.omg.org), Febru-ary 1997. </note>
Reference-contexts: In particular, the Object Management Group (OMG) recently put out a Request for Information (RFI) to solicit proposals for the need of real-time capabilities in CORBA [7]. The results of which are available in <ref> [8] </ref>. 2 Related Work In order to shorten the software development time of real-time applications, programmers need to automate as much of the development process as possible with maximum code re-use.
Reference: [9] <author> D. L. Hull, W. Feng, and J. W.-S.. Liu. </author> <title> Enhancing the performance and dependability of real-time systems. </title> <booktitle> In IEEE Computer Performance and Dependability Symposium, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: During these transient overloads, the imprecise-computation technique prevents missed deadlines and provides graceful degradation by ensuring that an approximate result of acceptable quality is available whenever the exact result cannot be obtained in time. The details of creating such an imprecise-computation server can be found in <ref> [9] </ref>. 3.2 An Open System Until recently, many classical scheduling algorithms required that schedulability analysis be done globally by analyzing all the real-time applications in the system [11, 10, 17]. We call such a system a closed system because all the real-time applications on each processor are known a priori.
Reference: [10] <author> J. P. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling algorithm | exact characterization and average case behavior. </title> <booktitle> In Proceedings of 10th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: The details of creating such an imprecise-computation server can be found in [9]. 3.2 An Open System Until recently, many classical scheduling algorithms required that schedulability analysis be done globally by analyzing all the real-time applications in the system <ref> [11, 10, 17] </ref>. We call such a system a closed system because all the real-time applications on each processor are known a priori. This is in contrast to an open system where applications may be dynamically added at run-time and validated independently of the other applications in the system.
Reference: [11] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: The details of creating such an imprecise-computation server can be found in [9]. 3.2 An Open System Until recently, many classical scheduling algorithms required that schedulability analysis be done globally by analyzing all the real-time applications in the system <ref> [11, 10, 17] </ref>. We call such a system a closed system because all the real-time applications on each processor are known a priori. This is in contrast to an open system where applications may be dynamically added at run-time and validated independently of the other applications in the system.
Reference: [12] <author> J. W.-S. Liu, K.-J. Lin, W.-K. Shih, A. C.-S. Yu, J.-Y. Chung, and W. Zhao. </author> <title> Algorithms for scheduling imprecise computations. </title> <journal> IEEE Computer, </journal> <volume> 24(5) </volume> <pages> 58-68, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: To further ensure that real-time tasks meet their deadlines, the scheduling broker's server object can employ the imprecise-computation technique to trade off service quality for information timeliness <ref> [12, 4] </ref>. Since many large, complex, and distributed real-time application systems are built based on an estimate of the worst-case load level, transient overloads can occur whenever the actual load level of the system temporarily exceeds its estimated worst-case load level.
Reference: [13] <author> J. W.-S. Liu, K. Nahrstedt, D. Hull, S. Chen, and B. Li. </author> <title> Epiq qos characterization: A draft version. </title> <type> Technical report, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> July </month> <year> 1997. </year>
Reference-contexts: Other related work in QoS distributed computing, but not directly related to CORBA, includes the EPIQ project at the University of Illinois <ref> [13, 3] </ref> and the ARMADA project at the University of Michigan [1]. 2.1 TAO The ACE ORB (TAO) by Schmidt et al. [16] addresses many of the issues involved in providing support for hard and soft real-time applications in a static environment. <p> Another potential drawback is the need for global knowledge of the real-time constraints of each application to perform schedulability analysis for the system. 2.3 EPIQ The EPIQ <ref> [13, 3] </ref> framework consists of an end-to-end quality-of-service (QoS) management architecture for complex, distributed real-time systems. The system handles all types of scheduling policies and guarantees QoS to all real-time applications. <p> In any case, the aforementioned admissions test is simple and is of the same variety that the two-level scheduler in EPIQ performs for real-time applications which enter the system, independent of all other applications currently running on the system <ref> [13] </ref>. So, rather than having to examine the schedulability of every combination of server objects together globally and a priori, each server object can be validated independently at run-time.
Reference: [14] <author> K. Nahrstedt. </author> <title> Experiences with qos brokerage and enforcement. </title> <booktitle> In Proceedings of 2nd International Conference on Multimedia Information Systems, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: In addition to using TAO's Scheduling Service (SS) in a deterministic, static, and off-line manner for hard real-time applications, we also instantiate an SS object at run-time for each server object. This run-time SS object can be viewed as a scheduling broker <ref> [14] </ref> for the server object because it performs schedulability analysis on behalf of the server object.
Reference: [15] <author> ObjecTime. </author> <title> Overcoming the crisis in real-time software. </title> <type> White Paper, </type> <year> 1997. </year>
Reference-contexts: A recent IEEE survey found that 30% of all software development projects are cancelled, 50% are more than 150% over budget, and only 60% of desired functionality on average is achieved <ref> [15] </ref>. Many researchers have recognized that while CORBA is well-suited for conventional non-real-time applications, the same cannot be said for real-time applications. Thus, over the past few years, there has been a movement to standardize middleware for real-time technologies.
Reference: [16] <author> D. C. Schmidt, D. L. Levine, and S. Mungee. </author> <title> The design of the tao real-time object request broker. </title> <journal> Computer Communications Journal, </journal> <month> Summer </month> <year> 1997. </year>
Reference-contexts: The former is implemented in a real-time middleware framework called TAO (The ACE ORB) <ref> [16] </ref>, and the latter is part of the NRaD/URI real-time CORBA system [5, 18]. <p> Other related work in QoS distributed computing, but not directly related to CORBA, includes the EPIQ project at the University of Illinois [13, 3] and the ARMADA project at the University of Michigan [1]. 2.1 TAO The ACE ORB (TAO) by Schmidt et al. <ref> [16] </ref> addresses many of the issues involved in providing support for hard and soft real-time applications in a static environment. Schmidt identifies three major weaknesses in CORBA which prevent its use in real-time applications: QoS specification and enforcement, real-time scheduling, and performance. <p> Schmidt identifies three major weaknesses in CORBA which prevent its use in real-time applications: QoS specification and enforcement, real-time scheduling, and performance. The performance problems, which caused priority inversion and non--determinism in several areas of the ORB, have been identified and rectified <ref> [16] </ref>. Currently, TAO relies on an off-line, rate-monotonic (RM) scheduler to guarantee that the deadlines of real-time tasks will be met on a particular object, and hence, guarantee the QoS for that object. While this approach works exquisitely for real-time applications like avionics [16], it is not well-suited for real-time applications <p> the ORB, have been identified and rectified <ref> [16] </ref>. Currently, TAO relies on an off-line, rate-monotonic (RM) scheduler to guarantee that the deadlines of real-time tasks will be met on a particular object, and hence, guarantee the QoS for that object. While this approach works exquisitely for real-time applications like avionics [16], it is not well-suited for real-time applications which require dynamic admission of clients at run-time, efficient handling of changing resource requirements, or availability of other scheduling policies for applications which may require them. <p> For example, Figure 1 shows a scenario with three clients, a server, and the server's scheduling broker. Before run-time, the off-line SS creates a real-time schedule for the server based on the QoS parameters of Clients 1 and 2, as in <ref> [16] </ref>. At run-time, this schedule is then used by the server's run-time scheduler to schedule Client 1 and Client 2 IDL operations (or tasks). <p> This includes the presentation layer conversions (de-marshalling) and the de-multiplexing to the appropriate server object. Instead of using a layered de-multiplexing scheme i.e., de-multiplex to server and then to operation, de-multiplexing can be performed using the active de-multiplexing scheme in O (1) time and thus is deterministic <ref> [16] </ref>. The presentation layer has been recognized as one of the major bottlenecks in high-performance communication sub-systems [2], and several optimizations have been suggested to improve performance, however most of these lead to improved, albeit nondeterministic performance.
Reference: [17] <author> B. Sprunt, Sha L., and J. P. Lehoczky. </author> <title> Aperiodic task scheduling for hard real-time systems. </title> <booktitle> In Real-Time Systems: The International Jounal of Time-Critical Computing Systems, </booktitle> <volume> volume 1, </volume> <pages> pages 27-60, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: The details of creating such an imprecise-computation server can be found in [9]. 3.2 An Open System Until recently, many classical scheduling algorithms required that schedulability analysis be done globally by analyzing all the real-time applications in the system <ref> [11, 10, 17] </ref>. We call such a system a closed system because all the real-time applications on each processor are known a priori. This is in contrast to an open system where applications may be dynamically added at run-time and validated independently of the other applications in the system.
Reference: [18] <author> V. F. Wolfe, L. C. DiPippo, R. Ginis, M. Squadrito, S. Wohlever, I. Zykh, and R. John-ston. </author> <title> Expressing and enforcing timing constraints in a dynamic real-time corba system. </title> <type> Technical report, </type> <institution> University of Rhode Island, </institution> <month> June </month> <year> 1997. </year>
Reference-contexts: The former is implemented in a real-time middleware framework called TAO (The ACE ORB) [16], and the latter is part of the NRaD/URI real-time CORBA system <ref> [5, 18] </ref>. <p> Due to the dynamic nature of NRaD/URI's RT-CORBA, their online EDF scheduler does not offer the guarantees of an off-line RM scheduler and unfortunately can behave non-deterministically under heavy loads, thus providing only best-effort guarantees <ref> [18] </ref>. Another potential drawback is the need for global knowledge of the real-time constraints of each application to perform schedulability analysis for the system. 2.3 EPIQ The EPIQ [13, 3] framework consists of an end-to-end quality-of-service (QoS) management architecture for complex, distributed real-time systems.
Reference: [19] <author> V. F. Wolfe, L. C. DiPippo, R. Ginis, M. Squadrito, S. Wohlever, I. Zykh, and R. John-ston. </author> <title> Real-time corba. </title> <type> Technical report, </type> <institution> University of Rhode Island, </institution> <month> June </month> <year> 1997. </year>
Reference-contexts: In addition, the scheduling in TAO focuses on a single CPU rather than the distributed scheduling problem. 2.2 NRaD/URI Real-Time CORBA Wolfe's NRaD/URI RT-CORBA system <ref> [19] </ref>, on the other hand, uses the earliest-deadline-first (EDF) scheduling algorithm and allows clients to be admitted at run-time; hence, many of its benefits and drawbacks are complementary to those of TAO.
References-found: 19

