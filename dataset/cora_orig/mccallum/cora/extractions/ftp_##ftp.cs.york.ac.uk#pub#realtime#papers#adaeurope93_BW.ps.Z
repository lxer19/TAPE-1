URL: ftp://ftp.cs.york.ac.uk/pub/realtime/papers/adaeurope93_BW.ps.Z
Refering-URL: http://www.csd.uu.se/~bjornfot/r2.html
Root-URL: 
Note: blank  
Abstract-found: 0
Intro-found: 1
Reference: 1. <institution> York Ada Compiler Environment (York ACE) Reference Guide, York Software Engineering Limited (1991). </institution> <note> (Release 5.1) </note>
Reference-contexts: Rather attention is focussed on the normal executing phase of the application. In this phase all the process are deemed to exist (i.e. none are created and none terminate). 3. The Kernel and Performance Measures The kernel under investigation was a modified stand-alone Ada run-time system for York Ada <ref> [1] </ref>. The hardware platform consists of a Motorola 68020 (with an internal cache) and a floating point unit, a clock interrupt source and an interval timer. Other interrupts are allowed but no I/O devices use DMA. The code for the kernel is written in a mixture of C and assembler.
Reference: 2. <author> N.C. Audsley, A. Burns, M.F. Richardson and A.J. Wellings, </author> <title> ``Hard Real-Time Scheduling: The Deadline Monotonic Approach'', </title> <booktitle> Proceedings 8th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <address> Atlanta, GA, USA (15-17 May 1991). </address>
Reference-contexts: When the deadline monotonic scheme is used, the tests are more complicated. Joseph and Pandya [4] showed how an iterative relation can be developed. This scheme has the advantage that it also caters for arbitrary priority assignment. For each process (i) the following relationship is true <ref> [2] </ref>: C i + B i + S J R i hhh J C j = R i (2) where R i is the actual worst case response time of the process.
Reference: 3. <author> N.C. Audsley, K. Tindell, A. Burns, M.F. Richardson and A.J. Wellings, </author> <title> ``The DrTee Architecture for Distributed Hard Real-Time Systems'', </title> <booktitle> Proceedings IEEE Workshop on Architecture Support for Real-time Systems, </booktitle> <address> San Antonio, </address> <note> Texas (December 1991). </note>
Reference-contexts: It is obtained by summing the process' execution time, its blocking time, and the interference it gets from higher priority process executing in the interval (0, R i ]. Equation (2) can be solved <ref> [3] </ref> by giving an initial estimate to R i : R i and then iterating around on the calculated values of the left hand side of the equation: C i + B i + S J R i hhhhh H J n (3) In general there may be more than one
Reference: 4. <author> M. Joseph and P. Pandya, </author> <title> ``Finding Response Times in a Real-Time System'', </title> <journal> BCS Computer Journal, pp. </journal> <volume> 390-395 (Vol. 29, No. 5, </volume> <month> Oct 86). </month>
Reference-contexts: When the deadline monotonic scheme is used, the tests are more complicated. Joseph and Pandya <ref> [4] </ref> showed how an iterative relation can be developed. This scheme has the advantage that it also caters for arbitrary priority assignment.
Reference: 5. <author> J.P. Lehoczky, L. Sha and V. Ding, </author> <title> ``The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior'', </title> <type> Tech Report, </type> <institution> Department of Statistics, Carnegie-Mellon (1987). </institution>
Reference-contexts: Equation (1) is sufficient but not necessary; i.e. there exist process sets that fail this test but which execute without missing a deadline. Exact analysis has been undertaken by Ding et al <ref> [5] </ref>. The above formulae (and those below) assume that there are no overheads associated with the kernel; for example, the time of a context switch is taken to be zero.
Reference: 6. <author> C.L. Liu and J.W. Layland, </author> <title> ``Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment'', </title> <journal> JACM 20(1), </journal> <pages> pp. </pages> <month> 46-61 </month> <year> (1973). </year>
Reference-contexts: The priority may be assigned via an optimal scheme such as rate monotonic (P inversely related to T ) or deadline monotonic (P inversely related to D ), or via the application programmer to reflect issues of criticality. When the rate monotonic scheme <ref> [6] </ref> (D equal to T ) is extended to include blocking times (due to process interaction) the result is a set of inequalities that must all be satisfied if the process set is to be guaranteed.
Reference: 7. <author> C.D. Locke, D.R. Vogel and T.J. Mesler, </author> <title> Building a Predictable Avionics Platform in Ada: A Case Study, </title> <booktitle> Proceedings of the IEEE 12th Real Time Systems Symposium (December 1991). </booktitle>
Reference-contexts: This is an example of priority inversion in the kernel and may well be responsible for the results reported in the case study by Locke et al <ref> [7] </ref>. 3.2. Ramifications for the Scheduling Models The values given above for the various kernel routines are constant; they do not depend on the size of the application (other than in the number of processes involved).
References-found: 7

