URL: ftp://ftp.cs.washington.edu/pub/ai/tr94-01-03.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/weld/pubs.html
Root-URL: 
Email: fkgolden, etzioni, weldg@cs.washington.edu  
Title: Omnipotence Without Omniscience: Efficient Sensor Management for Planning  
Author: Keith Golden Oren Etzioni Daniel Weld 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Note: To appear, AAAI-94 1  
Abstract: This paper describes the fully-implemented xii planner, which solves both problems by representing and reasoning about local closed world information (LCW). We report on experiments utilizing our UNIX softbot (software robot) which demonstrate that LCW can substantially improve the soft-bot's performance by eliminating redundant information gathering. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ambros-Ingerson, J., and Steel, S. </author> <year> 1988. </year> <title> Integrating planning, execution, and monitoring. </title> <booktitle> In Proc. 7th Nat. Conf. on A.I., </booktitle> <pages> 735-740. </pages>
Reference: <author> Chapman, D. </author> <year> 1987. </year> <title> Planning for conjunctive goals. </title> <booktitle> Artificial Intelligence 32(3) </booktitle> <pages> 333-377. </pages>
Reference-contexts: Introduction Classical planners (e.g., <ref> (Chapman 1987) </ref>) presuppose correct and complete information about the world.
Reference: <author> Etzioni, O., and Lesh, N. </author> <year> 1993. </year> <title> Planning with incomplete information in the UNIX domain. </title> <booktitle> In Working Notes of the AAAI Spring Symposium: Foundations of Automatic Planning: The Classical Approach and Beyond, </booktitle> <pages> 24-28. </pages> <address> Menlo Park, CA: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Our action language borrows both from adl (Pednault 1986) and uwl (Etzioni et al. 1992). Our research on LCW has its roots in the socrates planner, where the problem of redundant information gathering was initially discovered <ref> (Etzioni & Lesh 1993) </ref>. Like xii, socrates utilized the UNIX domain as its testbed, supported the uwl representation, and interleaved planning with execution. In addition, socrates supported a restricted representation of LCW, which enabled it to avoid redundant information gathering in many cases.
Reference: <author> Etzioni, O., Hanks, S., Weld, D., Draper, D., Lesh, N., and Williamson, M. </author> <year> 1992. </year> <title> An Approach to Planning with Incomplete Information. </title> <note> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning. Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: However, a discussion of this mechanism is beyond the scope of this paper. 4 xii operator schemata explicitly distinguish between causal effects (that change the state of the external world) and observational effects (that only change the state of xii's model) as explained in <ref> (Etzioni et al. 1992) </ref>. 5 This is written in the operator effects as (cause (length ?f ?l) U). (defoperator LS ((directory ?d) (path ?dp)) (precond (and (satisfy (current.shell csh)) (satisfy (current.dir ?d)) (satisfy (protection ?d readable)) (find-out (pathname ?d ?dp)))) (effect (forall ((file !f) :in (parent.dir $ ?d)) (exists ((path !p) <p> Related work xii is based on the ucpop algorithm (Penberthy & Weld 1992). The algorithm we used for interleaving planning and execution closely follows ipem, by Ambros-Ingerson and Steel (Ambros-Ingerson & Steel 1988). Our action language borrows both from adl (Pednault 1986) and uwl <ref> (Etzioni et al. 1992) </ref>. Our research on LCW has its roots in the socrates planner, where the problem of redundant information gathering was initially discovered (Etzioni & Lesh 1993). Like xii, socrates utilized the UNIX domain as its testbed, supported the uwl representation, and interleaved planning with execution.
Reference: <author> Etzioni, O., Golden, K., and Weld, D. </author> <year> 1994. </year> <title> Tractable closed-world reasoning with updates. </title> <booktitle> In Proc. 4th Int. Conf. on Principles of Knowledge Representation and Reasoning. </booktitle>
Reference-contexts: This compilation process takes time linear in the length of the operator schemata and the number of unique-value axioms <ref> (Golden, Etzioni, & Weld 1994) </ref>. Observational effects (e.g., those of LS) can only create LCW, but causal effects can both create and destroy LCW. 4 For example, deleting all files in /tex provides complete information on the contents of the directory regardless of what the agent knew previously. <p> Compressing a file in /tex, on the other hand, makes the length of the file unknown, 5 thus invalidating previously obtained LCW on the lengths of all files in that directory. The theory behind LCW is complex; <ref> (Etzioni, Golden, & Weld 1994) </ref> defines LCW formally, explains the connection to circumscription, and presents a set of tractable update rules for the case of conjunctive LCW formulas. <p> For completeness, xii also considers combinations of these mechanisms to solve a single 8 goal, via a technique called partitioning; see <ref> (Golden, Etzioni, & Weld 1994) </ref> for details. 6 In the remainder of this section we explain these two mechanisms in more detail. Protecting 8 links In the simplest case, xii can use a universally quan tified effect to directly support a universally quantified goal. <p> Doing this in an efficient but sound manner is complex | see <ref> (Golden, Etzioni, & Weld 1994) </ref> for the details. each problem the softbot benefited from the information gained in solving the previous problems. Maintaining D C introduced less than 15% overhead per plan explored, and reduced the number of plans explored substantially.
Reference: <author> Etzioni, O., Lesh, N., and Segal, R. </author> <year> 1993. </year> <title> Building softbots for UNIX (preliminary report). </title> <type> Technical Report 93-09-01, </type> <institution> University of Washington. </institution> <note> Available via anonymous FTP from pub/etzioni/softbots/ at cs.washington.edu. </note>
Reference-contexts: Our action language borrows both from adl (Pednault 1986) and uwl (Etzioni et al. 1992). Our research on LCW has its roots in the socrates planner, where the problem of redundant information gathering was initially discovered <ref> (Etzioni & Lesh 1993) </ref>. Like xii, socrates utilized the UNIX domain as its testbed, supported the uwl representation, and interleaved planning with execution. In addition, socrates supported a restricted representation of LCW, which enabled it to avoid redundant information gathering in many cases.
Reference: <author> Genesereth, M., and Nilsson, N. </author> <year> 1987. </year> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <address> Los Altos, CA: </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: The universal base of such a formula equals the conjunction 1 ^: : :^ n in which the i s correspond to each possible interpretation of (v) under the universe of discourse, fC 1 ; : : : ; C n g, i.e. the possible objects of type t <ref> (Genesereth & Nilsson 1987, p. 10) </ref>. In each i , all references to v have been replaced with the constant C i .
Reference: <author> Genesereth, M., and Nourbakhsh, I. </author> <year> 1993. </year> <title> Time-saving tips for problem solving with incomplete information. </title> <booktitle> In Proc. 11th Nat. Conf. on A.I., </booktitle> <pages> 724-730. </pages>
Reference-contexts: Our advances over socrates include the ability to satisfy universally quantified goals, and the machinery for automatically generating LCW effects and for detecting threats to LCW links. Genesereth and Nourbakhsh <ref> (Genesereth & Nour-bakhsh 1993) </ref> share our goal of avoiding redundant information gathering, but do so using radically different mechanisms, and in the context of state-space search. They derive completeness-preserving rules for pruning the search as well as rules for terminating planning and beginning execution.
Reference: <author> Golden, K., Etzioni, O., and Weld, D. </author> <year> 1994. </year> <title> xii: Planning for Universal Quantification and Incomplete Information. </title> <type> Technical report, </type> <institution> University of Washington, Department of Computer Science and Engineering. </institution> <note> Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: This compilation process takes time linear in the length of the operator schemata and the number of unique-value axioms <ref> (Golden, Etzioni, & Weld 1994) </ref>. Observational effects (e.g., those of LS) can only create LCW, but causal effects can both create and destroy LCW. 4 For example, deleting all files in /tex provides complete information on the contents of the directory regardless of what the agent knew previously. <p> Compressing a file in /tex, on the other hand, makes the length of the file unknown, 5 thus invalidating previously obtained LCW on the lengths of all files in that directory. The theory behind LCW is complex; <ref> (Etzioni, Golden, & Weld 1994) </ref> defines LCW formally, explains the connection to circumscription, and presents a set of tractable update rules for the case of conjunctive LCW formulas. <p> For completeness, xii also considers combinations of these mechanisms to solve a single 8 goal, via a technique called partitioning; see <ref> (Golden, Etzioni, & Weld 1994) </ref> for details. 6 In the remainder of this section we explain these two mechanisms in more detail. Protecting 8 links In the simplest case, xii can use a universally quan tified effect to directly support a universally quantified goal. <p> Doing this in an efficient but sound manner is complex | see <ref> (Golden, Etzioni, & Weld 1994) </ref> for the details. each problem the softbot benefited from the information gained in solving the previous problems. Maintaining D C introduced less than 15% overhead per plan explored, and reduced the number of plans explored substantially.
Reference: <author> Krebsbach, K., Olawsky, D., and Gini, M. </author> <year> 1992. </year> <title> An empirical study of sensing and defaulting in planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> 136-144. </pages>
Reference: <author> Levy, A., Sagiv, Y., and Srivastava, D. </author> <year> 1994. </year> <title> Towards efficient information gathering agents. </title> <booktitle> In Working Notes of the AAAI Spring Symposium: Software Agents, </booktitle> <pages> 64-70. </pages> <address> Menlo Park, CA: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Suppose that we ask a softbot to find an Alaska Airlines flight from Seattle to San Francisco, cheaper than $80. The soft-bot can contact travel agents and airlines, which are listed in various telephone directories (cf <ref> (Levy, Sagiv, & Srivastava 1994) </ref>). In general, the separate information sources will contain overlapping information. A given travel agent might provide information on all domestic flights within a given price range, while an airline will provide information on all flights it offers.
Reference: <author> McAllester, D., and Rosenblitt, D. </author> <year> 1991. </year> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. 9th Nat. Conf. on A.I., </booktitle> <pages> 634-639. </pages>
Reference-contexts: Protecting 8 links In the simplest case, xii can use a universally quan tified effect to directly support a universally quantified goal. However, 8 goals, like ordinary goals, can get clobbered by subgoal interactions; to avoid this, xii uses an extension of the causal link <ref> (McAllester & Rosenblitt 1991) </ref> mechanism to protect 8 goals. A causal link is a triple, written A p G !A c , where G is a goal, A p is the step that produces G and A c is the step that consumes G.
Reference: <author> Minton, S., Carbonell, J. G., Knoblock, C. A., Kuokka, D. R., Etzioni, O., and Gil, Y. </author> <year> 1989. </year> <title> Explanation-based learning: A problem-solving perspective. </title> <booktitle> Artificial Intelligence 40 </booktitle> <pages> 63-118. </pages> <note> Available as technical report CMU-CS-89-103. </note>
Reference-contexts: Golden is supported in part by a UniForum Research Award. * Satisfying Universally Quantified Goals: Goals of the form "Move all widgets to the warehouse" or "Make all files in /tex write-protected" are common in real-world domains. Classical planners such as prodigy <ref> (Minton et al. 1989) </ref> or ucpop (Pen-berthy & Weld 1992) reduce universally quantified goals to the set of ground instances of the goal, and satisfy each instance in turn.
Reference: <author> Olawsky, D., and Gini, M. </author> <year> 1990. </year> <title> Deferred planning and sensor use. In Proceedings, DARPA Workshop on Innovative Approaches to Planning, Scheduling, and Control. </title> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: However, they do not have notions that correspond to LCW, a database like D C , or our threat resolution techniques. Other researchers have investigated alternative approaches for planning with incomplete information (see <ref> (Olawsky & Gini 1990) </ref> for a nice taxonomy). Contingent planners (Warren 1976; Schoppers 1987; Peot & Smith 1992) seek to exhaustively enumerate alternative courses of action; while this strategy is ap propriate in critical domains with irreversible actions, the exponential increase in planning time is daunting.
Reference: <author> Pednault, E. </author> <year> 1986. </year> <title> Toward a Mathematical Theory of Plan Synthesis. </title> <type> Ph.D. Dissertation, </type> <institution> Stanford University. </institution>
Reference-contexts: Related work xii is based on the ucpop algorithm (Penberthy & Weld 1992). The algorithm we used for interleaving planning and execution closely follows ipem, by Ambros-Ingerson and Steel (Ambros-Ingerson & Steel 1988). Our action language borrows both from adl <ref> (Pednault 1986) </ref> and uwl (Etzioni et al. 1992). Our research on LCW has its roots in the socrates planner, where the problem of redundant information gathering was initially discovered (Etzioni & Lesh 1993).
Reference: <author> Penberthy, J., and Weld, D. </author> <year> 1992. </year> <title> UCPOP: A sound, complete, partial order planner for ADL. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 103-114. </pages> <note> Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: We allow incomplete information in the initial conditions, and uncertainty in the effects, 2 but assume the information that is known is correct, and that there are no exogenous events. xii's planning algorithm is based on ucpop <ref> (Penberthy & Weld 1992) </ref>, but xii interleaves planning and execution and, unlike ucpop, does not make the closed world assumption. The next section introduces the central concept underlying xii's operation: local closed world informa tion (LCW). <p> Confrontation works when the threatening effect is conditional; the link is protected by subgoaling on the negation of the threat's antecedent <ref> (Penberthy & Weld 1992) </ref>. /papers. <p> While much more experimentation is necessary, these experiments suggest that local closed world reasoning, as implemented in xii, has the potential to substantially improve performance in a real-world domain. Related work xii is based on the ucpop algorithm <ref> (Penberthy & Weld 1992) </ref>. The algorithm we used for interleaving planning and execution closely follows ipem, by Ambros-Ingerson and Steel (Ambros-Ingerson & Steel 1988). Our action language borrows both from adl (Pednault 1986) and uwl (Etzioni et al. 1992).
Reference: <author> Peot, M., and Smith, D. </author> <year> 1992. </year> <title> Conditional Nonlinear Planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> 189-197. </pages>
Reference: <author> Schoppers, M. </author> <year> 1987. </year> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In Proceedings of IJCAI-87, </booktitle> <pages> 1039-1046. </pages>
Reference: <author> Stockton, F. R. </author> <title> 1888. The lady, or the tiger? and other stories. </title> <address> New York: </address> <publisher> Charles Scribner's Sons. </publisher>
Reference: <author> Warren, D. </author> <year> 1976. </year> <title> Generating Conditional Plans and Programs. </title> <booktitle> In Proceedings of AISB Summer Conference, </booktitle> <pages> 344-354. </pages>
Reference: <author> Weld, D. </author> <year> 1994. </year> <title> An introduction to least-commitment planning. </title> <journal> AI Magazine. </journal> <note> Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: This compilation process takes time linear in the length of the operator schemata and the number of unique-value axioms <ref> (Golden, Etzioni, & Weld 1994) </ref>. Observational effects (e.g., those of LS) can only create LCW, but causal effects can both create and destroy LCW. 4 For example, deleting all files in /tex provides complete information on the contents of the directory regardless of what the agent knew previously. <p> Compressing a file in /tex, on the other hand, makes the length of the file unknown, 5 thus invalidating previously obtained LCW on the lengths of all files in that directory. The theory behind LCW is complex; <ref> (Etzioni, Golden, & Weld 1994) </ref> defines LCW formally, explains the connection to circumscription, and presents a set of tractable update rules for the case of conjunctive LCW formulas. <p> The first of these says to output the string "ls -a" to the UNIX shell. The second says to use the function ls-sense to translate the output of the shell into a set of bindings for the variables !f, !n and !p. universal base <ref> (Weld 1994) </ref>. <p> For completeness, xii also considers combinations of these mechanisms to solve a single 8 goal, via a technique called partitioning; see <ref> (Golden, Etzioni, & Weld 1994) </ref> for details. 6 In the remainder of this section we explain these two mechanisms in more detail. Protecting 8 links In the simplest case, xii can use a universally quan tified effect to directly support a universally quantified goal. <p> Doing this in an efficient but sound manner is complex | see <ref> (Golden, Etzioni, & Weld 1994) </ref> for the details. each problem the softbot benefited from the information gained in solving the previous problems. Maintaining D C introduced less than 15% overhead per plan explored, and reduced the number of plans explored substantially.
Reference: <author> Wellman, M. </author> <year> 1993. </year> <title> Challenges for decision-theoretic planning. </title> <booktitle> In Proceedings of the AAAI 1993 Symposium on Foundations of Automatic Planning: The Classical Approach and Beyond. </booktitle>
Reference-contexts: Decision theory provides an elegant framework for computing the value of information; however, although work in this direction is promising, many challenges remain <ref> (Wellman 1993) </ref>. Our approach sacrifices the elegance of a probabilistic framework to achieve a complete implementation able to tackle practical problems. Conclusion This paper describes the fully-implemented xii planner which uses local closed world information (LCW) to han dle universally quantified goals and to avoid the problem of redundant sensing.
References-found: 22

