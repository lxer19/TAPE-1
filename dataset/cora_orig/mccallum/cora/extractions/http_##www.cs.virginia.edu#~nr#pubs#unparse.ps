URL: http://www.cs.virginia.edu/~nr/pubs/unparse.ps
Refering-URL: http://www.cs.virginia.edu/~nr/pubs/unparse-abstract.html
Root-URL: http://www.cs.virginia.edu
Title: Unparsing Expressions With Prefix and Postfix Operators  SUMMARY  
Author: Norman Ramsey 
Keyword: KEY WORDS KEY WORDS Unparsing Parsing Prettyprinting Literate Programming Standard ML  
Address: Charlottesville, VA 22903  
Affiliation: Department of Computer Science, University of Virginia,  
Date: 1998)  August 13, 1998  
Note: SOFTWAREPRACTICE AND EXPERIENCE, VOL. 0(0), 130 (MONTH  
Abstract: Unparsing is the problem of transforming an internal representation of a program into an external, concrete syntax. In conjunction with prettyprinting, it is useful for generating readable programs from internal representations. If the target language uses prefix and postfix operators, the problem is nontrivial. This paper shows how to unparse expressions using a simple, bottom-up tree walk, which keeps track of the least tightly binding operator not enclosed by parentheses. During the tree walk, this operator is compared with the operator of the parent expression, and parentheses are inserted based on the precedence, associativity, and fixity (infix, prefix, or postfix) of the two operators. The paper is a literate program. It includes code for the unparser and for its inverse parser, both of which can handle operators of dynamically chosen precedence and associativity. Supporting such operators is useful for languages like ML, in which programmers may assign precedence and associativity to their own functions. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Derek C. Oppen, </author> <title> `Prettyprinting', </title> <journal> ACM Transacations on Programming Languages and Systems, </journal> <volume> 2(4), </volume> <month> 465 483 </month> <year> (1980). </year>
Reference: 2. <author> John Hughes, </author> <title> `The Design of a Pretty-printing Library', </title> <editor> J. Jeuring and E. Meijer (eds.), </editor> <booktitle> Advanced Functional Programming. </booktitle> <publisher> Springer Verlag, LNCS 925, </publisher> <year> 1995, </year> <pages> pp. 5396. </pages>
Reference: 3. <author> Donald E. Knuth, </author> <title> `Literate programming', </title> <journal> The Computer Journal, </journal> <volume> 27(2), </volume> <month> 97111 </month> <year> (1984). </year>
Reference: 4. <author> Robin Milner, Mads Tofte, and Robert W. Harper, </author> <title> The Definition of Standard ML, </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1990. </year>
Reference: 5. <author> Norman Ramsey and Mary F. Fernandez, </author> <title> `Specifying representations of machine instructions', </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 19(3), </volume> <month> 492524 </month> <year> (1997). </year>
Reference: 6. <author> Norman Ramsey and Jack W. Davidson, </author> <title> `Machine descriptions to build tools for embedded systems', </title> <booktitle> ACM SIGPLAN Workshop on Languages, Compilers, and Tools for Embedded Systems (LCTES'98), volume 1474 of LNCS. </booktitle> <publisher> Springer Verlag, </publisher> <month> June </month> <year> 1998, </year> <pages> pp. 172188. </pages>
Reference: 7. <author> Jeffrey D. Ullman, </author> <title> Elements of ML Programming, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1994. </year>
Reference: 8. <author> Laurence C. Paulson, </author> <title> ML for the working programmer, </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <note> second edition, </note> <year> 1996. </year>
Reference: 9. <author> Matthias Felleisen and Daniel P. Friedman, </author> <title> The Little MLer, </title> <publisher> MIT Press, </publisher> <month> December </month> <year> 1997. </year>
Reference: 10. <author> Niklaus Wirth, </author> <title> `What can we do about the unnecessary diversity of notation for syntactic definitions?', </title> <journal> Communications of the ACM, </journal> <month> 20(11), 822823 </month> <year> (1977). </year>
Reference: 11. <author> Alfred V. Aho, Ravi Sethi, and Jeffrey D. Ullman, </author> <booktitle> Compilers: Principles, Techniques, and Tools, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference: 12. <editor> David Gries, </editor> <booktitle> The Science of Programming, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: 13. <author> Wei Chen and Jan Tijmen Udding, </author> <title> `Program inversion: More than fun!', </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 15(1), </volume> <month> 113 </month> <year> (1990). </year> <note> 28 NORMAN RAMSEY </note>
Reference: 14. <author> J. von Wright, </author> <title> `Program inversion in the refinement calculus', </title> <journal> Information Processing Letters, </journal> <volume> 37(2), </volume> <month> 95100 </month> <year> (1991). </year>
Reference: 15. <author> Norman Ramsey and Mary F. Fernandez, </author> <title> `The New Jersey Machine-Code Toolkit', </title> <booktitle> Proceedings of the 1995 USENIX Technical Conference, </booktitle> <address> New Orleans, LA, </address> <month> January </month> <year> 1995, </year> <pages> pp. 289302. </pages>
Reference: 16. <author> Alfred V. Aho, Brian W. Kernighan, and Peter J. Weinberger, </author> <title> The AWK Programming Language, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1988. </year>
References-found: 16

