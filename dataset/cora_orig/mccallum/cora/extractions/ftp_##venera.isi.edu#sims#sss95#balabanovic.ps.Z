URL: ftp://venera.isi.edu/sims/sss95/balabanovic.ps.Z
Refering-URL: http://ai.iit.nrc.ca/II_public/WebBird/community.html
Root-URL: 
Email: marko@cs.stanford.edu, shoham@robotics.stanford.edu  
Title: Learning Information Retrieval Agents: Experiments with Automated Web Browsing  
Author: Marko Balabanovic and Yoav Shoham 
Address: Stanford, CA 94305  
Affiliation: Department of Computer Science, Stanford University,  
Abstract: The current exponential growth of the Internet precipitates a need for new tools to help people cope with the volume of information. To complement recent work on creating searchable indexes of the World-Wide Web and systems for filtering incoming e-mail and Usenet news articles, we describe a system which helps users keep abreast of new and interesting information. Every day it presents a selection of interesting web pages. The user evaluates each page, and given this feedback the system adapts and attempts to produce better pages the following day. We present some early results from an AI programming class to whom this was set as a project, and then describe our current implementation. Over the course of 24 days the output of our system was compared to both randomly-selected and human-selected pages. It consistently performed better than the random pages, and was better than the human-selected pages half of the time. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bowman, C. M.; Danzig, P. B.; Hardy, D. R.; Manber, U.; and Schwartz, M. F. </author> <year> 1994. </year> <title> Harvest: A scalable, customizable discovery and access system. </title> <type> Technical Report CU-CS-732-94, </type> <institution> Department of Computer Science, University of Colorado|Boulder. </institution>
Reference-contexts: There is a possibility of an interesting symbiosis between these indexes and our searcher: the searcher could potentially make use of the indexes when searching, and the pages it produced could, if publicly accessible, be indexed by the indexer. The Harvest framework <ref> (Bowman et al. 1994) </ref> is more general and allows indexes and search engines to be created in a modular way. Another related area of work attempts to automatically filter incoming information, notably (Maes & Kozierok 1993), (Lashkari, Metral, & Maes 1994).
Reference: <author> Davis, G. </author> <year> 1994. </year> <title> Cool site of the day. </title> <address> http://www.infi.net/cool.html. </address>
Reference-contexts: In this way neither the user nor the experimenter know which page comes from which source. We keep a log of the evaluations received for each of the three sources. For the human-selected page we make use of the "Cool Site of the Day" link <ref> (Davis 1994) </ref>. Note that this is not tuned to a particular user. The random pages are selected from a static list of several hundred thousand URLs, checked for accessibility.
Reference: <author> Frakes, W. B. </author> <year> 1992. </year> <title> Stemming algorithms. </title> <editor> In Frakes, W. B., and Baeza-Yates, R., eds., </editor> <booktitle> Information Retrieval Data Structures and Algorithms. </booktitle> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall, Inc. </publisher> <pages> 131-160. </pages>
Reference-contexts: This reduces words to their `stems', and thus diminishes redundancy. For instance, computer, computers, computing and computability all reduce to comput. We use the Porter suffix-stripping algorithm (Porter 1980), as implemented in <ref> (Frakes 1992) </ref>.
Reference: <author> Goldberg, D.; Nichols, D.; Oki, B. M.; and Terry, D. </author> <year> 1992. </year> <title> Using collaborative filtering to weave an information tapestry. </title> <journal> Communications of the ACM 35(12) </journal> <pages> 61-70. </pages>
Reference: <author> Lashkari, Y.; Metral, M.; and Maes, P. </author> <year> 1994. </year> <title> Collaborative interface agents. </title> <booktitle> In Proccedings of the 12 th National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: The Harvest framework (Bowman et al. 1994) is more general and allows indexes and search engines to be created in a modular way. Another related area of work attempts to automatically filter incoming information, notably (Maes & Kozierok 1993), <ref> (Lashkari, Metral, & Maes 1994) </ref>. In this case, the system is not contributing new information but attempting to organize the existing flow to the user. This kind of application is inherently more risky. For instance, an inadvertently deleted mail message could have disastrous consequences.
Reference: <author> Maes, P., and Kozierok, R. </author> <year> 1993. </year> <title> Learning interface agents. </title> <booktitle> In Proccedings of the 11 th National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Users then evaluate each document, and the system adjusts its parameters in order to try to improve its performance. There are obvious advantages to the use of machine learning for retrieval and interface agents, as discussed in <ref> (Maes & Kozierok 1993) </ref>. However, note that our application is different from filtering, where the system filters a stream of incoming information (such as e-mail or Usenet newsgroups) to reduce the burden on the user. <p> The Harvest framework (Bowman et al. 1994) is more general and allows indexes and search engines to be created in a modular way. Another related area of work attempts to automatically filter incoming information, notably <ref> (Maes & Kozierok 1993) </ref>, (Lashkari, Metral, & Maes 1994). In this case, the system is not contributing new information but attempting to organize the existing flow to the user. This kind of application is inherently more risky. For instance, an inadvertently deleted mail message could have disastrous consequences.
Reference: <author> Mauldin, M. L., and Leavitt, J. R. </author> <year> 1994. </year> <booktitle> Web-agent related research at the CMT. In Proceedings of the ACM Special Interest Group on Networked Information Discovery and Retrieval. </booktitle>
Reference-contexts: Related Work There has been much recent work in a similar vein where the aim is to build an index of the web, and then allow users to search that index: <ref> (Mauldin & Leavitt 1994) </ref>, (Pinkerton 1994). In this other work the system is supporting a directed search, initiated by the user.
Reference: <author> Pinkerton, B. </author> <year> 1994. </year> <title> Finding what people want: Experiences with the WebCrawler. </title> <note> In The Second International WWW Conference: Mosaic and the Web. </note>
Reference-contexts: Related Work There has been much recent work in a similar vein where the aim is to build an index of the web, and then allow users to search that index: (Mauldin & Leavitt 1994), <ref> (Pinkerton 1994) </ref>. In this other work the system is supporting a directed search, initiated by the user.
Reference: <author> Porter, M. </author> <year> 1980. </year> <title> An algorithm for suffix stripping. </title> <booktitle> Program 14(3) </booktitle> <pages> 130-137. </pages>
Reference-contexts: This reduces words to their `stems', and thus diminishes redundancy. For instance, computer, computers, computing and computability all reduce to comput. We use the Porter suffix-stripping algorithm <ref> (Porter 1980) </ref>, as implemented in (Frakes 1992).
Reference: <author> Rocchio, Jr., J. </author> <year> 1971. </year> <title> Relevance feedback in information retrieval. In The Smart System|Experiments in Automatic Document Processing. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall Inc. </publisher> <pages> 313-323. </pages>
Reference-contexts: Given this information we update the weights of ~ M by a simple addition: ~ M ~ M + i=1 In the IR literature this is referred to as relevance feedback <ref> (Rocchio 1971) </ref>. vertical axis shows both the number of users each day and the average score for each source of pages. The gaps indicate holidays or periods when the system was down for debugging.
Reference: <author> Salton, G., and Buckley, C. </author> <year> 1987. </year> <title> Term weighting approaches in automatic text retrieval. </title> <type> Technical Report 87-881, </type> <institution> Cornell University, Department of Computer Science. </institution>
Reference-contexts: For instance, computer, computers, computing and computability all reduce to comput. We use the Porter suffix-stripping algorithm (Porter 1980), as implemented in (Frakes 1992). Word weights are calculated using a more sophiti-cated TFIDF scheme which normalizes for document length, following recommendations in <ref> (Salton & Buck-ley 1987) </ref>: tf (i) n u t d j 2T 0:5 + 0:5 tf max log df (j) ! where tf max is the maximum term frequency over all words in T .
Reference: <author> Salton, G., and McGill, M. J. </author> <year> 1983. </year> <title> An Introduction to Modern Information Retrieval. </title> <publisher> McGraw-Hill. </publisher>
Reference-contexts: Various approaches which have been tried. The most promising uses the vector space information retrieval paradigm, where documents are represented as vectors <ref> (Salton & McGill 1983) </ref>. Assume some dictionary vector ~ D, where each element d i is a word. Each document then has a vector ~ V, where element v i is the weight of word d i for that document.
Reference: <author> Yan, T. W., and Garcia-Molina, H. </author> <year> 1995. </year> <title> SIFT| a tool for wide-area information dissemination. </title> <booktitle> In Proceedings of the USENIX Technical Conference. </booktitle>
Reference-contexts: For instance, an inadvertently deleted mail message could have disastrous consequences. Thus it is more important not only that the agent have a model of the user but also that the user has a model of the agent, in order to build up trust. The SIFT system <ref> (Yan & Garcia-Molina 1995) </ref> shares our goal of continuously informing the user of new information. In contrast, however, SIFT requires that users submit a profile which represents their interests, and then allows them to modify this by relevance feedback.
References-found: 13

