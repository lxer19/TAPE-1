URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/the_next_generation.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/the_next_generation.html
Root-URL: http://www.cs.berkeley.edu
Email: (hytechjtahjhojhoward)@cs.cornell.edu  
Title: HYTECH: The Next Generation  
Author: Thomas A. Henzinger Pei-Hsin Ho Howard Wong-Toi 
Address: Ithaca, NY 14853  
Affiliation: Computer Science Department Cornell University  
Abstract: We describe a new implementation of HyTech 1 , a symbolic model checker for hybrid systems. Given a parametric description of an embedded system as a collection of communicating automata, HyTech automatically computes the conditions on the parameters under which the system satisfies its safety and timing requirements. While the original HyTech prototype was based on the symbolic algebra tool Mathe-matica, the new implementation is written in C ++ and builds on geometric algorithms instead of formula manipulation. The new HyTech offers a cleaner and more expressive input language, greater portability, superior performance (typically two to three orders of magnitude), and new features such as diagnostic error-trace generation. We illustrate the effectiveness of the new implementation by applying HyTech to the automatic parametric analysis of the generic railroad crossing benchmark problem [HJL93] and to an active structure control algorithm [ECB94].
Abstract-found: 1
Intro-found: 1
Reference: [ACD + 92] <author> R. Alur, C. Courcoubetis, D. Dill, N. Halbwachs, and H. Wong-Toi. </author> <title> An implementation of three algorithms for timing verification based on automata emptiness. </title> <booktitle> In Proc. of 13th IEEE Real-time Systems Symposium, </booktitle> <pages> pp. 157-166, </pages> <year> 1992. </year>
Reference-contexts: Solutions to the problem have been formally verified using a number of techniques, including modecharts [JS88], process algebras [GL90], Alur-Dill timed automata <ref> [ACD + 92] </ref>, machine-assisted theorem proving [Sha93], model checking [WM93], and Lynch-Vaandrager timed automata [HL94]. Using linear hybrid automata, we provide the first automatic synthesis of critical timing constraints, namely, the maximal amount of time the controller can wait before commanding the gate to lower.
Reference: [ACH + 95] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Oliv-ero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: Model checking is an algorithmic verification technique that determines whether an automaton model of a discrete finite-state system satisfies its temporal-logic requirements. Model checking has been extended to real-time systems that are modeled as timed automata [AD94, HNSY94], and to hybrid systems that are modeled as linear hybrid automata <ref> [ACHH93, ACH + 95] </ref>. <p> Last, the new verifier is portable, because it no longer relies on Mathematica. We have recomputed more than 20 case studies that had been analyzed with the HyTech prototype <ref> [AHH93, ACH + 95, HH95a, HH95b, HH95c, HWT95] </ref>. Our results show a verification-time improvement of roughly two to three orders of magnitude.
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In Hybrid Systems, </title> <publisher> LNCS 736, </publisher> <pages> pp. 209-229. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: Model checking is an algorithmic verification technique that determines whether an automaton model of a discrete finite-state system satisfies its temporal-logic requirements. Model checking has been extended to real-time systems that are modeled as timed automata [AD94, HNSY94], and to hybrid systems that are modeled as linear hybrid automata <ref> [ACHH93, ACH + 95] </ref>. <p> g 90 raising _g 2 [9; 10] lower lower raise raise g = 0 g = 90 g = 0 raise lowering _g 2 [10; 9] g = 90 lowerraise lower open closed 2 Linear Hybrid Automata We model embedded systems as the parallel composition of coordinating linear hybrid automata <ref> [ACHH93] </ref>. Informally, a linear hybrid automaton consists of a finite set X of real-valued variables and a labeled multigraph (V; E). The edges E represent discrete events, each labeled with conditions on the old and new values of X. <p> The region pre fl (W ) backward reachable from W is the infinite union S i0 pre i (W ). If W is linear, then post (W ) and pre (W ) are also linear regions, and they can be computed effectively <ref> [ACHH93] </ref>. In practice, many verification problems can be posed in a natural way as reachability problems. Often, the system is composed with a special monitor process that "watches" the system and enters a violation state whenever the execution of the system violates a given safety or timing requirement.
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: Model checking is an algorithmic verification technique that determines whether an automaton model of a discrete finite-state system satisfies its temporal-logic requirements. Model checking has been extended to real-time systems that are modeled as timed automata <ref> [AD94, HNSY94] </ref>, and to hybrid systems that are modeled as linear hybrid automata [ACHH93, ACH + 95].
Reference: [AHH93] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <booktitle> In Proc. of 14th IEEE Real-time Systems Symposium, </booktitle> <pages> pp. 2-11, </pages> <year> 1993. </year>
Reference-contexts: Previously, we developed a prototype to test the feasibility of this approach <ref> [AHH93, HH95a] </ref>. The prototype was written in Mathematica for rapid development and easy experimentation, at the cost of portability and performance. Motivated by the prototype's success, we have reimplemented the tool. The new version offers a marked improvement in efficiency, convenience, and generality. <p> Last, the new verifier is portable, because it no longer relies on Mathematica. We have recomputed more than 20 case studies that had been analyzed with the HyTech prototype <ref> [AHH93, ACH + 95, HH95a, HH95b, HH95c, HWT95] </ref>. Our results show a verification-time improvement of roughly two to three orders of magnitude. <p> The earliest prototype we developed <ref> [AHH93] </ref> was written entirely in Mathematica. Regions are represented as symbolic expressions denoting state predicates. The definition of a successor region uses existential quantification over the reals, which is easily encoded in Mathematica. Mathematica offers powerful symbolic manipulation, and allows rapid development and experimentation with algorithms and heuristics. <p> The region primitives supported by HyTech include boolean operations, pre, post, existential quantification on variables and locations (see below), and abstract interpretation operators such as convex hull. These operations allow the model checking of branching temporal-logic requirements <ref> [HNSY94, AHH93] </ref>, and the abstract interpretation of hybrid automata [HRP94, HH95c]. The analysis-command language defines convenient macros for reachability analysis, and for the verification and parametric analysis of safety and timing requirements. <p> Second, we synthesized timing parameters for the correctness of Fischer's mutual exclusion protocol [AL92] with perfect clocks. We provide data for analyzing various numbers of concurrent processes contending for a resource. Third, we synthesize a critical upper bound on the controller's response time for the simple train-gate crossing of <ref> [AHH93] </ref>. All analysis was done on a Sun 670MP, and unless otherwise stated all times are in seconds. Data for the prototype over the active structure control examples are not available, since the prototype's input language does not allow a modular specification of the system's urgent transitions.
Reference: [AHV93] <author> R. Alur, T.A. Henzinger, and M.Y. </author> <title> Vardi Parametric real-time reasoning. </title> <booktitle> Proc. of 25th ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 592-601, </pages> <year> 1995. </year>
Reference-contexts: The system is incorrect for parameter values for which there exists a state in the region post fl (I )" U <ref> [CH78, AHV93] </ref>. Thus we may obtain necessary and sufficient conditions for system correctness by performing reachability analysis followed by existential quantification over all variables that are not parameters. Our study of the GRC demonstrates this technique.
Reference: [AL92] <author> M. Abadi and L. Lamport. </author> <title> An old-fashioned recipe for real time. In Real Time: </title> <journal> Theory in Practice, </journal> <volume> LNCS 600, </volume> <pages> pp. 1-27. </pages> <publisher> Springer, </publisher> <year> 1992. </year>
Reference-contexts: Second, we synthesized timing parameters for the correctness of Fischer's mutual exclusion protocol <ref> [AL92] </ref> with perfect clocks. We provide data for analyzing various numbers of concurrent processes contending for a resource. Third, we synthesize a critical upper bound on the controller's response time for the simple train-gate crossing of [AHH93].
Reference: [BPV94] <author> D. Bosscher, I. Polak, and F. Vaandrager. </author> <title> Verification of an audio-control protocol. </title> <booktitle> In FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, </booktitle> <volume> LNCS 863, </volume> <pages> pp. 170-192. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: We have recomputed more than 20 case studies that had been analyzed with the HyTech prototype [AHH93, ACH + 95, HH95a, HH95b, HH95c, HWT95]. Our results show a verification-time improvement of roughly two to three orders of magnitude. For example, using our new implementation, the Philips audio control protocol <ref> [BPV94] </ref> can be analyzed in 19 seconds as opposed to 5.0 hours [HWT95]. 2 Indeed, without sacrificing generality, the performance of HyTech is now comparable to automatic verifiers for more specialized types of real-time systems. <p> Two of these | the generic railroad crossing and the active structure controller | are new examples of automatic parametric analysis, and are described in more detail in Section 4 below. In addition, we first analyzed the Philips audio control protocol <ref> [BPV94] </ref> in [HWT95], and provide comparative performance data for the new generation HyTech. The protocol communicates bit sequences using the timing-based Manchester encoding. The sender and receiver processes operate with unsynchronized clocks whose rates are subject to bounded drift.
Reference: [CH78] <author> P. Cousot and N. Halbwachs. </author> <title> Automatic discovery of linear restraints among variables of a program. </title> <booktitle> In Proc. of 5th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 84-97, </pages> <year> 1978. </year>
Reference-contexts: The system is incorrect for parameter values for which there exists a state in the region post fl (I )" U <ref> [CH78, AHV93] </ref>. Thus we may obtain necessary and sufficient conditions for system correctness by performing reachability analysis followed by existential quantification over all variables that are not parameters. Our study of the GRC demonstrates this technique.
Reference: [Che68] <author> N.V. Chernikova. </author> <title> Algorithm for discovering the set of all solutions of a linear programming problem. </title> <journal> U.S.S.R. Computational Mathematics and Mathematical Physics, </journal> <volume> 8(6) </volume> <pages> 282-293, </pages> <year> 1968. </year>
Reference-contexts: First, infinite state sets are represented as polyhedra in multidimensional real space, instead of Mathematica formulas. Polyhedra provide a uniform representation that is implemented, entirely in C ++ , using standard data structures and geometric algorithms for manipulation <ref> [Che68] </ref>. For example, for computing the set of states that can be reached by a time delay, we compute the "shadow" of a polyhedron (which is easy) instead of eliminating an existential quantifier from a Mathematica formula (which is expensive).
Reference: [CPS93] <author> R.J. Cleaveland, J. Parrow, and B. Steffen. </author> <title> The Concurrency Workbench: a semantics-based tool for the verification of finite-state systems. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 15(1) </volume> <pages> 36-72, </pages> <year> 1993. </year>
Reference-contexts: The system is modeled in Modechart [JS88], a graphical language for hierarchical state machines subject to timed enabling conditions. A translation technique from Modechart into Temporal CCS is provided. The Temporal CCS description is then verified using the Concurrency Workbench <ref> [CPS93] </ref>. 14 "send y 10 Synch xs Synch 0 xp y := 0 "receive y = 0 #calc y 5 Synch xp y = 5 #send y 10 y 5 read SC 0 y := 0 write SC 1 y := 0 ! "calc y 45 "receive 0 y = 0
Reference: [DWT95] <author> D.L. Dill and H. Wong-Toi. </author> <title> Verification of real-time systems by successive over and under approximation. </title> <booktitle> In CAV 95: Computer-aided Verification, </booktitle> <volume> LNCS 939, </volume> <pages> pp. 409-422. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Three examples of tools for the symbolic analysis of timed automata are Kronos [DY95], Veriti <ref> [DWT95] </ref>, and Uppaal [LPY95]. Another verification tool for linear hybrid automata is Polka [HRP94], which focuses on abstract-interpretation techniques. In Section 2, we give a brief review of the hybrid automaton model and corresponding analysis techniques. In Section 3, we present the new implementation of HyTech.
Reference: [DY95] <author> C. Daws and S. Yovine. </author> <title> Two examples of verification of multirate timed automata with Kronos. This volume. </title>
Reference-contexts: Three examples of tools for the symbolic analysis of timed automata are Kronos <ref> [DY95] </ref>, Veriti [DWT95], and Uppaal [LPY95]. Another verification tool for linear hybrid automata is Polka [HRP94], which focuses on abstract-interpretation techniques. In Section 2, we give a brief review of the hybrid automaton model and corresponding analysis techniques. In Section 3, we present the new implementation of HyTech.
Reference: [ECB94] <author> W.M. Elseaidy, R. Cleaveland, and J.W. Baugh Jr. </author> <title> Verifying an intelligent structural control system: a case study. </title> <booktitle> In Proc. of 15th IEEE Real-Time Systems Symposium, </booktitle> <pages> pp. 271-275, </pages> <year> 1994. </year>
Reference-contexts: For more detail, the user guide [HHWT95] may be consulted. In Section 4, we include two case studies that, previously, have not been formalized using hybrid automata. Neither one of these case studies was designed by us, and both were published at the last symposium in this series <ref> [HL94, ECB94] </ref>. The generic railroad crossing (GRC) problem, which is derived from the train-gate crossing of [LS85], was posed in [HJL93] as a challenge benchmark for formal methods for real-time systems. <p> Using linear hybrid automata, we provide the first automatic synthesis of critical timing constraints, namely, the maximal amount of time the controller can wait before commanding the gate to lower. The active control structure problem was posed and verified in <ref> [ECB94] </ref> using the Concurrency Workbench. A sensor and an actuator are coordinated using a pulse control algorithm to apply controls to an active structure. <p> is written entirely in Mathematica, whereas its reachability-analysis code is a mixture of Mathematica and C ++ routines. 4 Case Studies We demonstrate HyTech's symbolic analysis techniques and diagnostic capabilities, by presenting new parametric results for the benchmark generic railroad crossing problem of [HJL93] and the active control structures of <ref> [ECB94] </ref>. 11 4.1 Generic railroad crossing We provide the first automatic synthesis of critical timing constraints for this system involving trains entering an intersection from multiple tracks. The GRC problem is stated in [HJL93] as follows. The system to be developed operates a gate at a railroad crossing. <p> Our tool takes 34 seconds to determine that the controller is correct whenever the parameter ff has value strictly less than 20. 4.2 Active structure control A formal description of an intelligent structural control system appears in <ref> [ECB94] </ref>. The control system uses a pulse control algorithm that performs three basic tasks: sampling the state of the structure, updating its model of the structure, and applying a pulse to the structure. The system consists of three main components | the sensor, the actuator, and the controller. <p> It repeatedly activates the sensor. When it receives data back from the sensor, it decides whether to update its model of the structure and reactivate the sensor, or to first calculate the appropriate pulse and then signal the actuator to proceed with a pulse application. It is verified in <ref> [ECB94] </ref> that the control system satisfies lower and upper bounds on the time between consecutive pulse applications. The system is modeled in Modechart [JS88], a graphical language for hierarchical state machines subject to timed enabling conditions. A translation technique from Modechart into Temporal CCS is provided. <p> Note that we need separate automata to model the variables synch control and synch sensor, rather than declaring them as explicit variables, because there are urgent transitions dependent on their values. 4.2.2 System requirements According to <ref> [ECB94] </ref>, the system should meet certain periodic constraints on the times between the starts of successive pulses. <p> The delays between pulses are required to lie between 37 and 145 time units. 4.2.3 Parametric analysis Rather than simply verifying these bounds are met, we instead synthesize the exact bounds on the system's period. Following <ref> [ECB94] </ref>, we add a monitor automaton to the system (see Figure 9). It "watches" the executions of the control system and enters a special violation location whenever the system violates its safety specification. In our case, we also introduce two parameters, period low and period hi . <p> HyTech shows that the period can only take values in the interval [135; 145], where the bounds are tight. 4.2.4 Error-trace generation In our analysis of the system, HyTech revealed a typographical error in the presentation of the Modechart specification in <ref> [ECB94] </ref>. The typographical error admits a subtle, but critical, race condition in the controller that enables delays of up to 210 time units between pulses, thereby violating the system's periodic requirements. We use this example to demonstrate HyTech's diagnostic capabilities. By literally translating the Modechart in [ECB94] for the controller into <p> the Modechart specification in <ref> [ECB94] </ref>. The typographical error admits a subtle, but critical, race condition in the controller that enables delays of up to 210 time units between pulses, thereby violating the system's periodic requirements. We use this example to demonstrate HyTech's diagnostic capabilities. By literally translating the Modechart in [ECB94] for the controller into a hybrid automaton, the transition (see Figure 8) out of location "receive with guard t 135 would have destination location "update, and location "receive 0 and all associated transitions would not appear.
Reference: [GL90] <author> R. Gerber and I. Lee. </author> <title> A proof system for communicating shared resources. </title> <booktitle> In Proc. of 11th IEEE Real-time Systems Symposium, </booktitle> <pages> pp. 288-299, </pages> <year> 1990. </year> <month> 17 </month>
Reference-contexts: The generic railroad crossing (GRC) problem, which is derived from the train-gate crossing of [LS85], was posed in [HJL93] as a challenge benchmark for formal methods for real-time systems. Solutions to the problem have been formally verified using a number of techniques, including modecharts [JS88], process algebras <ref> [GL90] </ref>, Alur-Dill timed automata [ACD + 92], machine-assisted theorem proving [Sha93], model checking [WM93], and Lynch-Vaandrager timed automata [HL94]. Using linear hybrid automata, we provide the first automatic synthesis of critical timing constraints, namely, the maximal amount of time the controller can wait before commanding the gate to lower.
Reference: [Hal93] <author> N. Halbwachs. </author> <title> Delay analysis in synchronous programs. </title> <booktitle> In CAV 93: Computer-aided Verification, </booktitle> <volume> LNCS 697, </volume> <pages> pp. 333-346. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: Our reimplementation uses an efficient C ++ library of polyhedral operations <ref> [Hal93, HRP94] </ref>. Second, the input language is now substantially cleaner and more expressive. By incorporating generalized linear conditions on the rates of analog variables, nondeterministic and simultaneous assignments, and urgent transitions into the input language, we allow the specification and analysis of a wider class of hybrid systems. <p> The synchronization labels are used to define the parallel composition of automata. In the gate automaton, syn (open; lowering) = lower . In the graphical representation, t A is omitted. The polyhedral library <ref> [Hal93] </ref> supports only nonstrict linear inequalities. This limitation imposes two restrictions on the automata that can be analyzed by the current implementation of HyTech. <p> HyTech [HH95a] 7 was rewritten to avoid this bottleneck. The second prototype uses a Mathematica main program and computes time-step successors by calling efficient C ++ routines from a library for manipulating polyhedra <ref> [Hal93] </ref>. However, this prototype requires inefficient conversions between Mathematica expressions and C ++ data structures. It also still relies on Mathematica for computing transition-step successor states. The total speed-up achieved is roughly one order of magnitude. <p> Symbolic analysis of a linear hybrid automaton requires boolean operations on linear regions and the computation of successor and predecessor regions. The new HyTech uses an efficient C ++ library for manipulating polyhedra <ref> [Hal93, HRP94] </ref>. The library supports boolean operations. We now show how to compute successor and predecessor regions. The polyhedral library offers two internal representations of polyhedra. One is a set of linear constraints defining a polyhedron in the natural way.
Reference: [HH95a] <author> T.A. Henzinger and P.-H. Ho. HyTech: </author> <title> The Cornell Hybrid Technology Tool. </title> <booktitle> In Proc. of 1994 Workshop on Hybrid Systems and Autonomous Control. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Previously, we developed a prototype to test the feasibility of this approach <ref> [AHH93, HH95a] </ref>. The prototype was written in Mathematica for rapid development and easy experimentation, at the cost of portability and performance. Motivated by the prototype's success, we have reimplemented the tool. The new version offers a marked improvement in efficiency, convenience, and generality. <p> Last, the new verifier is portable, because it no longer relies on Mathematica. We have recomputed more than 20 case studies that had been analyzed with the HyTech prototype <ref> [AHH93, ACH + 95, HH95a, HH95b, HH95c, HWT95] </ref>. Our results show a verification-time improvement of roughly two to three orders of magnitude. <p> The automaton state changes either instantaneously through the action associated with a discrete event, or while time elapses, through the continuous activity associated with a control mode. Our automata are more expressive than those of the prototype <ref> [HH95a] </ref> in that we allow more general instantaneous actions (arbitrary linear conditions on old and new variable values), more general continuous activities (arbitrary linear conditions on slopes), and urgent events (which must take place as soon as they are enabled). <p> Mathematica offers powerful symbolic manipulation, and allows rapid development and experimentation with algorithms and heuristics. However, its operations over state predicates are computationally inefficient; in particular, the computation of time-step successor states requires expensive quantifier elimination operations. HyTech <ref> [HH95a] </ref> 7 was rewritten to avoid this bottleneck. The second prototype uses a Mathematica main program and computes time-step successors by calling efficient C ++ routines from a library for manipulating polyhedra [Hal93]. However, this prototype requires inefficient conversions between Mathematica expressions and C ++ data structures.
Reference: [HH95b] <author> T.A. Henzinger and P.-H. Ho. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <booktitle> In CAV 95: Computer-aided Verification, </booktitle> <volume> LNCS 939, </volume> <pages> pp. 225-238. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Last, the new verifier is portable, because it no longer relies on Mathematica. We have recomputed more than 20 case studies that had been analyzed with the HyTech prototype <ref> [AHH93, ACH + 95, HH95a, HH95b, HH95c, HWT95] </ref>. Our results show a verification-time improvement of roughly two to three orders of magnitude.
Reference: [HH95c] <author> T.A. Henzinger and P.-H. Ho. </author> <title> A note on abstract-interpretation strategies for hybrid automata. </title> <booktitle> In Proc. of 1994 Workshop on Hybrid Systems and Autonomous Control. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Last, the new verifier is portable, because it no longer relies on Mathematica. We have recomputed more than 20 case studies that had been analyzed with the HyTech prototype <ref> [AHH93, ACH + 95, HH95a, HH95b, HH95c, HWT95] </ref>. Our results show a verification-time improvement of roughly two to three orders of magnitude. <p> The region primitives supported by HyTech include boolean operations, pre, post, existential quantification on variables and locations (see below), and abstract interpretation operators such as convex hull. These operations allow the model checking of branching temporal-logic requirements [HNSY94, AHH93], and the abstract interpretation of hybrid automata <ref> [HRP94, HH95c] </ref>. The analysis-command language defines convenient macros for reachability analysis, and for the verification and parametric analysis of safety and timing requirements. There is also a routine for outputting trajectories (sequences of transition and time steps) between regions, which is useful for diagnostic error-trace generation (see below).
Reference: [HHWT95] <author> T. A. Henzinger, P.-H. Ho, and H. Wong-Toi. </author> <title> A user guide to HyTech. In TACAS 95: Tools and Algorithms for the Construction and Analysis of Systems. </title> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Another verification tool for linear hybrid automata is Polka [HRP94], which focuses on abstract-interpretation techniques. In Section 2, we give a brief review of the hybrid automaton model and corresponding analysis techniques. In Section 3, we present the new implementation of HyTech. For more detail, the user guide <ref> [HHWT95] </ref> may be consulted. In Section 4, we include two case studies that, previously, have not been formalized using hybrid automata. Neither one of these case studies was designed by us, and both were published at the last symposium in this series [HL94, ECB94]. <p> It includes macros for common verification tasks such as reachability analysis and error-trace generation. In the following, we describe only a couple of aspects of each language. More detail, and formal definitions of both languages, can be found in <ref> [HHWT95] </ref>. 3.1 System-description language The user describes a system as the composition of a collection of components. Each component is given as a direct textual representation of a linear hybrid automaton. Type checking Variable type declarations allow more readable descriptions and enable simple static checking by the parser.
Reference: [HJL93] <author> C.L. Heitmeyer, R.D. Jeffords, and B.G. Labaw. </author> <title> A benchmark for comparing different approaches for specifying and verifying real-time systems. </title> <booktitle> In Proc. of 10th IEEE Int. Workshop on Real-time Operating Systems and Software, </booktitle> <year> 1993. </year>
Reference-contexts: Neither one of these case studies was designed by us, and both were published at the last symposium in this series [HL94, ECB94]. The generic railroad crossing (GRC) problem, which is derived from the train-gate crossing of [LS85], was posed in <ref> [HJL93] </ref> as a challenge benchmark for formal methods for real-time systems. Solutions to the problem have been formally verified using a number of techniques, including modecharts [JS88], process algebras [GL90], Alur-Dill timed automata [ACD + 92], machine-assisted theorem proving [Sha93], model checking [WM93], and Lynch-Vaandrager timed automata [HL94]. <p> that the prototype's code for forming products is written entirely in Mathematica, whereas its reachability-analysis code is a mixture of Mathematica and C ++ routines. 4 Case Studies We demonstrate HyTech's symbolic analysis techniques and diagnostic capabilities, by presenting new parametric results for the benchmark generic railroad crossing problem of <ref> [HJL93] </ref> and the active control structures of [ECB94]. 11 4.1 Generic railroad crossing We provide the first automatic synthesis of critical timing constraints for this system involving trains entering an intersection from multiple tracks. The GRC problem is stated in [HJL93] as follows. <p> parametric results for the benchmark generic railroad crossing problem of <ref> [HJL93] </ref> and the active control structures of [ECB94]. 11 4.1 Generic railroad crossing We provide the first automatic synthesis of critical timing constraints for this system involving trains entering an intersection from multiple tracks. The GRC problem is stated in [HJL93] as follows. The system to be developed operates a gate at a railroad crossing. The railroad crossing I lies in a region of interest R, i.e., I R. A set of trains travel through R on multiple tracks in both directions. <p> If the other train is far enough away, the controller enters location must raise. Then the urgent transition to location open is taken, corresponding to sending an immediate raise command to the gate. 4.1.2 System requirements Both the safety and utility properties of <ref> [HJL93] </ref> can be expressed as reachability properties. The controlled system satisfies the safety property provided it never reaches a state in which a train is in location I, and the gate is not in location closed. By symmetry we need only consider the case concerning train 1.
Reference: [HKPV95] <author> T.A. Henzinger, P.W. Kopke, A. Puri, and P. Varaiya. </author> <title> What's decidable about hybrid automata? In Proc. </title> <booktitle> of 27th ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 373-382, </pages> <year> 1995. </year>
Reference-contexts: Analogously, the backward reachable region pre fl (U ) is found by iterating pre . These iteration schemes are semi-decision procedures; there is no guarantee of termination. However, it has been shown that for a large class of hybrid systems, the initialized rectangular automata of <ref> [HKPV95] </ref>, termination is guaranteed after a simple preprocessing step. 2.4 Parametric analysis A system description often contains parameters. The system is incorrect for parameter values for which there exists a state in the region post fl (I )" U [CH78, AHV93].
Reference: [HL94] <author> C. Heitmeyer and N. Lynch. </author> <title> The generalized railroad crossing: a case study in formal verification of real-time systems. </title> <booktitle> In Proc. of 15th IEEE Real-time Systems Symposium, </booktitle> <pages> pp. 120-131, </pages> <year> 1994. </year>
Reference-contexts: For more detail, the user guide [HHWT95] may be consulted. In Section 4, we include two case studies that, previously, have not been formalized using hybrid automata. Neither one of these case studies was designed by us, and both were published at the last symposium in this series <ref> [HL94, ECB94] </ref>. The generic railroad crossing (GRC) problem, which is derived from the train-gate crossing of [LS85], was posed in [HJL93] as a challenge benchmark for formal methods for real-time systems. <p> Solutions to the problem have been formally verified using a number of techniques, including modecharts [JS88], process algebras [GL90], Alur-Dill timed automata [ACD + 92], machine-assisted theorem proving [Sha93], model checking [WM93], and Lynch-Vaandrager timed automata <ref> [HL94] </ref>. Using linear hybrid automata, we provide the first automatic synthesis of critical timing constraints, namely, the maximal amount of time the controller can wait before commanding the gate to lower. The active control structure problem was posed and verified in [ECB94] using the Concurrency Workbench.
Reference: [HNSY94] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: Model checking is an algorithmic verification technique that determines whether an automaton model of a discrete finite-state system satisfies its temporal-logic requirements. Model checking has been extended to real-time systems that are modeled as timed automata <ref> [AD94, HNSY94] </ref>, and to hybrid systems that are modeled as linear hybrid automata [ACHH93, ACH + 95]. <p> The region primitives supported by HyTech include boolean operations, pre, post, existential quantification on variables and locations (see below), and abstract interpretation operators such as convex hull. These operations allow the model checking of branching temporal-logic requirements <ref> [HNSY94, AHH93] </ref>, and the abstract interpretation of hybrid automata [HRP94, HH95c]. The analysis-command language defines convenient macros for reachability analysis, and for the verification and parametric analysis of safety and timing requirements.
Reference: [HRP94] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. </title> <booktitle> In SAS 94: Static Analysis Symposium, </booktitle> <volume> LNCS 864, </volume> <pages> pp. 223-237. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Our reimplementation uses an efficient C ++ library of polyhedral operations <ref> [Hal93, HRP94] </ref>. Second, the input language is now substantially cleaner and more expressive. By incorporating generalized linear conditions on the rates of analog variables, nondeterministic and simultaneous assignments, and urgent transitions into the input language, we allow the specification and analysis of a wider class of hybrid systems. <p> Three examples of tools for the symbolic analysis of timed automata are Kronos [DY95], Veriti [DWT95], and Uppaal [LPY95]. Another verification tool for linear hybrid automata is Polka <ref> [HRP94] </ref>, which focuses on abstract-interpretation techniques. In Section 2, we give a brief review of the hybrid automaton model and corresponding analysis techniques. In Section 3, we present the new implementation of HyTech. For more detail, the user guide [HHWT95] may be consulted. <p> The region primitives supported by HyTech include boolean operations, pre, post, existential quantification on variables and locations (see below), and abstract interpretation operators such as convex hull. These operations allow the model checking of branching temporal-logic requirements [HNSY94, AHH93], and the abstract interpretation of hybrid automata <ref> [HRP94, HH95c] </ref>. The analysis-command language defines convenient macros for reachability analysis, and for the verification and parametric analysis of safety and timing requirements. There is also a routine for outputting trajectories (sequences of transition and time steps) between regions, which is useful for diagnostic error-trace generation (see below). <p> Symbolic analysis of a linear hybrid automaton requires boolean operations on linear regions and the computation of successor and predecessor regions. The new HyTech uses an efficient C ++ library for manipulating polyhedra <ref> [Hal93, HRP94] </ref>. The library supports boolean operations. We now show how to compute successor and predecessor regions. The polyhedral library offers two internal representations of polyhedra. One is a set of linear constraints defining a polyhedron in the natural way.
Reference: [HWT95] <author> P.-H. Ho and H. Wong-Toi. </author> <title> Automated analysis of an audio control protocol. </title> <booktitle> In CAV 95: Computer-aided Verification, </booktitle> <volume> LNCS 939, </volume> <pages> pp. 381-394. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Last, the new verifier is portable, because it no longer relies on Mathematica. We have recomputed more than 20 case studies that had been analyzed with the HyTech prototype <ref> [AHH93, ACH + 95, HH95a, HH95b, HH95c, HWT95] </ref>. Our results show a verification-time improvement of roughly two to three orders of magnitude. <p> Our results show a verification-time improvement of roughly two to three orders of magnitude. For example, using our new implementation, the Philips audio control protocol [BPV94] can be analyzed in 19 seconds as opposed to 5.0 hours <ref> [HWT95] </ref>. 2 Indeed, without sacrificing generality, the performance of HyTech is now comparable to automatic verifiers for more specialized types of real-time systems. Three examples of tools for the symbolic analysis of timed automata are Kronos [DY95], Veriti [DWT95], and Uppaal [LPY95]. <p> There is also a routine for outputting trajectories (sequences of transition and time steps) between regions, which is useful for diagnostic error-trace generation (see below). Parametric analysis A major strength of HyTech is its ability to perform exact parametric analysis <ref> [HWT95] </ref>. Usually we are only interested in the values of the parameters that cause a system to fail; the specific values of other variables when failure occurs is often irrelevant. <p> Two of these | the generic railroad crossing and the active structure controller | are new examples of automatic parametric analysis, and are described in more detail in Section 4 below. In addition, we first analyzed the Philips audio control protocol [BPV94] in <ref> [HWT95] </ref>, and provide comparative performance data for the new generation HyTech. The protocol communicates bit sequences using the timing-based Manchester encoding. The sender and receiver processes operate with unsynchronized clocks whose rates are subject to bounded drift.
Reference: [JS88] <author> F. Jahanian and D.A. Stuart. </author> <title> A method for verifying properties of modechart specifications. </title> <booktitle> In Proc. of 9th IEEE Real-time Systems Symposium, </booktitle> <pages> pp. 12-21, </pages> <year> 1988. </year>
Reference-contexts: The generic railroad crossing (GRC) problem, which is derived from the train-gate crossing of [LS85], was posed in [HJL93] as a challenge benchmark for formal methods for real-time systems. Solutions to the problem have been formally verified using a number of techniques, including modecharts <ref> [JS88] </ref>, process algebras [GL90], Alur-Dill timed automata [ACD + 92], machine-assisted theorem proving [Sha93], model checking [WM93], and Lynch-Vaandrager timed automata [HL94]. <p> It is verified in [ECB94] that the control system satisfies lower and upper bounds on the time between consecutive pulse applications. The system is modeled in Modechart <ref> [JS88] </ref>, a graphical language for hierarchical state machines subject to timed enabling conditions. A translation technique from Modechart into Temporal CCS is provided.
Reference: [LPY95] <author> K.G. Larsen, P. Pettersson, and W. Yi. </author> <title> Compositional and symbolic model-checking of real-time systems. This volume. </title>
Reference-contexts: Three examples of tools for the symbolic analysis of timed automata are Kronos [DY95], Veriti [DWT95], and Uppaal <ref> [LPY95] </ref>. Another verification tool for linear hybrid automata is Polka [HRP94], which focuses on abstract-interpretation techniques. In Section 2, we give a brief review of the hybrid automaton model and corresponding analysis techniques. In Section 3, we present the new implementation of HyTech.
Reference: [LS85] <author> N. Leveson and J. Stolzy. </author> <title> Analyzing safety and fault tolerance using timed petri nets. </title> <booktitle> In Proc. of Int. Joint Conference on Theory and Practice of Software Development, </booktitle> <volume> LNCS 186, </volume> <pages> pp. 339-355. </pages> <publisher> Springer, </publisher> <year> 1985. </year>
Reference-contexts: Neither one of these case studies was designed by us, and both were published at the last symposium in this series [HL94, ECB94]. The generic railroad crossing (GRC) problem, which is derived from the train-gate crossing of <ref> [LS85] </ref>, was posed in [HJL93] as a challenge benchmark for formal methods for real-time systems.
Reference: [Sha93] <author> N. Shankar. </author> <title> Verification of real-time systems using PVS. </title> <booktitle> In CAV 93: Computer-aided Verification, </booktitle> <volume> LNCS 697, </volume> <pages> pp. 280-291. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: Solutions to the problem have been formally verified using a number of techniques, including modecharts [JS88], process algebras [GL90], Alur-Dill timed automata [ACD + 92], machine-assisted theorem proving <ref> [Sha93] </ref>, model checking [WM93], and Lynch-Vaandrager timed automata [HL94]. Using linear hybrid automata, we provide the first automatic synthesis of critical timing constraints, namely, the maximal amount of time the controller can wait before commanding the gate to lower.
Reference: [WM93] <author> F. Wang and A.K. Mok. </author> <title> A verifier for distributed real-time systems with bounded integer variables. </title> <booktitle> In Proc. of 8th IEEE Conference on Computer Assurance, </booktitle> <pages> pp. 135-151, </pages> <year> 1993. </year> <month> 18 </month>
Reference-contexts: Solutions to the problem have been formally verified using a number of techniques, including modecharts [JS88], process algebras [GL90], Alur-Dill timed automata [ACD + 92], machine-assisted theorem proving [Sha93], model checking <ref> [WM93] </ref>, and Lynch-Vaandrager timed automata [HL94]. Using linear hybrid automata, we provide the first automatic synthesis of critical timing constraints, namely, the maximal amount of time the controller can wait before commanding the gate to lower.
References-found: 31

