URL: http://www.wi.leidenuniv.nl/home/joost/iso.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Isomorphisms between Predicate and State Transformers  
Author: Marcello Bonsangue Joost N. Kok 
Keyword: and Phrases: Predicates, liveness, safety, predicate transformers, state transformers, weakest preconditions, refinement, Hoare power domain, Smyth power domain, Plotkin power domain.  
Note: 1991 Mathematics Subject Classification: 68Q55, 68Q10, 68Q60, 06A06. 1991 CR Categories:  Note: The research of Marcello Bonsangue was supported by a grant of the  announcement no. 203.15.3 of 15/2/90.  
Address: P.O. Box 4079, 1009 AB Amsterdam, The Netherlands  P.O. Box 80.089, 3508 TB Utrecht, The Netherlands  
Affiliation: CWI  Department of Computer Science, Utrecht University  Centro Nazionale delle Ricerche (CNR), Italy,  
Email: marcello@cwi.nl  joost@cs.ruu.nl  
Web: D.3.1, F.1.2, F.3.1, F.3.2.  
Abstract: We study the relation between state transformers based on directed complete partial orders and predicate transformers. Concepts like `predicate', `liveness', `safety' and `predicate transformers' are formulated in a topological setting. We treat state transformers based on the Hoare, Smyth and Plotkin powerdomains and consider continuous, monotonic and unrestricted functions. We relate the transformers by isomorphisms thereby extending and completing earlier results and giving a complete picture of all the relationships. 
Abstract-found: 1
Intro-found: 1
Reference: [Abr91] <author> S. Abramsky. </author> <title> A domain equation for bisimulation. </title> <journal> Information and Computation, </journal> <volume> 92 </volume> <pages> 161-218, </pages> <year> 1991. </year>
Reference-contexts: Power domains for dcpo's were introduced in [Plo76], [Smy78] and [Plo81]. Our power domains are slightly more general in the sense that we do no restrict to non-empty (Scott-) compact sets. Besides the standard ways of adding the empty set to the Smyth [Smy83] and to the Plotkin <ref> [MM79, Plo81, Abr91] </ref> power domains, we also add the empty set in all the three power domains as a separate element, comparable only with itself and with the bottom. Predicate transformers were introduced in [Dij76] with a series of healthness conditions. <p> First we show how to add the empty set to the power domains. These extended power domains can then be used in state transformers. The empty set is usually added to the Plotkin power domain by means of a smash-product [MM79],[Plo81] and also <ref> [Abr91] </ref>. The same is done [BK92] for the Smyth power domain in the flat case. We have the following: Definition 6.1 Let X be an algebraic dcpo. <p> We have that Pffi co (X ) coincides with the standard way of adding the empty set to the Plotkin power domain [MM79], [Plo81] and also <ref> [Abr91] </ref>. Next we turn to the predicate transformers. We modify the implication order both on safety and liveness predicate transformers to preserve deadlock states (states that are the image of the empty set).
Reference: [AP86] <author> K.R. Apt and G. Plotkin. </author> <title> Countable nondeterminism and random assignment. </title> <journal> Journal of the ACM, </journal> <volume> 33(4) </volume> <pages> 724-767, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: Isomorphisms between state and predicate transformers have been given for the flat case of the Smyth power domain in [Plo79] (and for countable nondeterminism in <ref> [AP86] </ref>), and for the flat case of the Hoare power domain in [Plo81]. Also De Bakker and De Roever [Bak80, Roe76] studied (from a semantical point of view) for the flat case the relation between state transformer and predicate transformer semantics. <p> If is intersection (union) extensible then the logical `8' (`9') of of an arbitrary collection of predicates on Y is always a predicate in P (X ). For multiplicative predicate transformers we prove the following stability lemma (a generalization of a lemma due to Plotkin <ref> [Plo79, AP86] </ref>)in which the collections of predicates are not necessarily closed under arbitrary intersection: Lemma 3.6 Let : P (Y ) ! M P (X ) be a multiplicative predicate transformer between two collections of predicates.
Reference: [AS85] <author> B. Alpern and F.B. Schneider. </author> <title> Defining liveness. </title> <journal> Information Processing Letters, </journal> <volume> 21 </volume> <pages> 181-185, </pages> <year> 1985. </year>
Reference-contexts: Our treatment includes the Plotkin power domain. For state transformers we use an extension of the standard power domains. For predicate transformers we start from the (informal) classification of predicates in liveness and safety predicates of Lamport [Lam77]. Later Smyth [Smy83] followed by <ref> [AS85, Kwi91] </ref> used topology to formalize this classification. Also we use topology for defining predicates and safety and liveness predicate transformers. We consider a new kind of predicate transformers with predicates that are the intersection of safety and liveness predicates. <p> Due to computability, Smyth uses closedness under countable intersection (such specifications are known in topology as G ffi sets: countable intersections of open sets) while we take arbitrary intersections of open sets as liveness predicates. In [Kwi91] liveness predicates are also G ffi -sets. We differ from <ref> [AS85] </ref> where liveness predicates are the dense sets (the complement does not contain non-empty open sets). To provide some more intuition we show that taking different topologies corresponds to different restrictions on the function space: Lemma 3.1 Let Bool = ftt; ff g with ff v tt.
Reference: [Bac80] <author> R.-J.R. </author> <title> Back. Correctness Preserving Program Refinements: Proof Theory and Applications, volume 131 of Mathematical Centre Tracts. </title> <publisher> Mathematical Centre, </publisher> <address> Amsterdam, </address> <year> 1980. </year>
Reference-contexts: Predicate transformers were introduced in [Dij76] with a series of healthness conditions. Back and von Wright <ref> [Bac80, vW90] </ref> use only the monotonicity restriction on predicate transformers. They use predicate transformers for refinement and provide a nice lattice theoretical framework. Nelson [Nel89] has (for the flat case) used "compatible" pairs of predicate transformers for giving semantics to a language with backtracking.
Reference: [Bak80] <author> J.W. de Bakker. </author> <title> Mathematical Theory of Program Corretness. </title> <publisher> Prentice-Hall, </publisher> <year> 1980. </year>
Reference-contexts: Isomorphisms between state and predicate transformers have been given for the flat case of the Smyth power domain in [Plo79] (and for countable nondeterminism in [AP86]), and for the flat case of the Hoare power domain in [Plo81]. Also De Bakker and De Roever <ref> [Bak80, Roe76] </ref> studied (from a semantical point of view) for the flat case the relation between state transformer and predicate transformer semantics. Moreover, for the flat case of the Plotkin power domain we have proposed an isomorphism in [BK92].
Reference: [BK92] <author> M. Bonsangue and J.N. Kok. </author> <title> Semantics, orderings and recursion in the weakest precondition calculus. </title> <type> Technical Report CS-R9267, </type> <institution> Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, </address> <year> 1992. </year> <note> Extended abstract published in the proceedings of the Rex Workshop '92 'Semantics: Foundations and Applications' LNCS 666, </note> <year> 1993. </year>
Reference-contexts: Also De Bakker and De Roever [Bak80, Roe76] studied (from a semantical point of view) for the flat case the relation between state transformer and predicate transformer semantics. Moreover, for the flat case of the Plotkin power domain we have proposed an isomorphism in <ref> [BK92] </ref>. For the general case of the compact Smyth power domain in the paper [Smy83] an isomorphism is given for continuous state transformers. He uses a topological technique which Plotkin later used in [Plo81] for the continuous Hoare state transformers. <p> First we show how to add the empty set to the power domains. These extended power domains can then be used in state transformers. The empty set is usually added to the Plotkin power domain by means of a smash-product [MM79],[Plo81] and also [Abr91]. The same is done <ref> [BK92] </ref> for the Smyth power domain in the flat case. We have the following: Definition 6.1 Let X be an algebraic dcpo. <p> Then A v Pffi B , A"v Sffi B" ^ A v H ffi B , A"v S B" ^ A v H ffi B Proof: Trivial. 2 7 Fixed Point Transformation Technique In <ref> [BK92] </ref> a backtrack operator 3 S from (X ! S (X )) 2 to X ! S (X ) is defined (where X and Y are flat dcpo's) and it is not monotone with respect to the lifting of v S to the function space. <p> In order to be able to calculate least fixed points of equations in which we use these non monotonic functions, a transfer lemma is used in <ref> [BK92] </ref>. This lemma requires the existence of a function between Pffi (X ) and S (X ) (or Sffi (X )).
Reference: [Bre93] <author> F. van Breugel. </author> <title> Relating state transformation semantics and predicate transformer semantics for parallel programs. </title> <type> Technical report, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: He uses a topological technique which Plotkin later used in [Plo81] for the continuous Hoare state transformers. A recent work includes an operational point of view in Van Breugel <ref> [Bre93] </ref>. In the present paper we give some new isomorphisms for the Hoare and the Smyth power domains, showing also how the previous ones can be obtained as combinations of the new isomorphisms.
Reference: [Dij76] <author> E.W. Dijkstra. </author> <title> A Discipline of Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1976. </year>
Reference-contexts: Predicate transformers were introduced in <ref> [Dij76] </ref> with a series of healthness conditions. Back and von Wright [Bac80, vW90] use only the monotonicity restriction on predicate transformers. They use predicate transformers for refinement and provide a nice lattice theoretical framework.
Reference: [Eng77] <author> R. Engelking. </author> <title> General Topology. </title> <publisher> Polish Scientific Publishers, </publisher> <year> 1977. </year>
Reference-contexts: For a more detailed discussions on domain theory consult for example [Plo81], and for topology we refer to <ref> [Eng77] </ref>. A partial order v on a set P is a reflexive, transitive and antisymmetric relation in P fi P . Let P be ordered by the partial order v, x 2 P and A a subset of P .
Reference: [HP72] <author> P. Hitchcock and D. Park. </author> <title> Induction rules and termination proofs. </title> <booktitle> In International Conference on Automata, Languages and Programming, </booktitle> <year> 1972. </year>
Reference-contexts: monotone function f : P ! m P the least fixed point of f always exists and it can be calculated by iteration: there exists an ordinal such that :f = f , where the ff-iteration of f is defined by f ff = f ( F every ordinal ff <ref> [HP72] </ref>. If f is also continuous then ! 0 .
Reference: [Hrb87] <author> K. Hrbacek. </author> <title> Convex Powerdomains I. </title> <journal> Information and computation, </journal> <volume> 74 </volume> <pages> 198-225, </pages> <year> 1987. </year>
Reference-contexts: However if X is an !-algebraic dcpo then P + co (X ) is also an !-algebraic dcpo with finite elements the fl -closures of finite subsets of B X (cf. [Plo76], [Plo81]). For a treatment of more general algebraic dcpo's we refer to <ref> [Hrb87] </ref> and [Hrb89]. Definition 4.3 Let X ; Y be two algebraic dcpo's.
Reference: [Hrb89] <author> K. Hrbacek. </author> <title> Convex Powerdomains II. </title> <journal> Information and computation, </journal> <volume> 81 </volume> <pages> 290-317, </pages> <year> 1989. </year>
Reference-contexts: However if X is an !-algebraic dcpo then P + co (X ) is also an !-algebraic dcpo with finite elements the fl -closures of finite subsets of B X (cf. [Plo76], [Plo81]). For a treatment of more general algebraic dcpo's we refer to [Hrb87] and <ref> [Hrb89] </ref>. Definition 4.3 Let X ; Y be two algebraic dcpo's.
Reference: [Kni93a] <author> P.M.W. Knijnenburg. </author> <title> Algebraic Domains, Chain Completion and the Plotkin Power-domain Construction. </title> <type> Technical Report RUU-CS-93-03, </type> <institution> Utrecth University Department of Computer Science, Utrecht, </institution> <year> 1993. </year> <month> 29 </month>
Reference-contexts: Let X be an algebraic dcpo and A X . Define the set of minimal elements of A by min (A) = fx jx 2 A ^ (8y 2 A : x v X y ) x = y )g: Minimal elements are used in [Kni93b] and <ref> [Kni93a] </ref> for the construction of the power domains S + co (X ) from an !-algebraic dcpo's X .
Reference: [Kni93b] <author> P.M.W. Knijnenburg. </author> <title> A Note on the Smyth Powerdomain Construction. </title> <institution> Technical Re--port RUU-CS-93-02, Utrecth University Department of Computer Science, Utrecht, </institution> <year> 1993. </year>
Reference-contexts: Let X be an algebraic dcpo and A X . Define the set of minimal elements of A by min (A) = fx jx 2 A ^ (8y 2 A : x v X y ) x = y )g: Minimal elements are used in <ref> [Kni93b] </ref> and [Kni93a] for the construction of the power domains S + co (X ) from an !-algebraic dcpo's X .
Reference: [Kwi91] <author> M.Z. Kwiatowska. </author> <title> On topological characterization of behavioural properties. </title> <editor> In G.M. Reed, A.W. Roscoe, and R.F. Wachter, editors, </editor> <booktitle> Topology and Category Theory in Computer Sciences Proc. Oxford Topology Symposioum, </booktitle> <month> June </month> <year> 1989, </year> <pages> pages 153-177. </pages> <address> Oxford Science Pubblications, </address> <year> 1991. </year>
Reference-contexts: Our treatment includes the Plotkin power domain. For state transformers we use an extension of the standard power domains. For predicate transformers we start from the (informal) classification of predicates in liveness and safety predicates of Lamport [Lam77]. Later Smyth [Smy83] followed by <ref> [AS85, Kwi91] </ref> used topology to formalize this classification. Also we use topology for defining predicates and safety and liveness predicate transformers. We consider a new kind of predicate transformers with predicates that are the intersection of safety and liveness predicates. <p> Topology provides an elegant way of selecting classes of predicates of programs ([Smy83], <ref> [Kwi91] </ref>) in which the open sets of a topological space X are the observable predicates, closed sets are the safety predicates and arbitrary intersections of open sets are the liveness predicates. In this paper we consider algebraic dcpo's together with the Scott topology. <p> Liveness predicates are the arbitrary intersections of Scott-open sets (that is Alexandroff open sets). The liveness predicates are ordered by subset inclusion. Consider as an example the set of sequences (finite and infinite) over an alphabet ordered by the prefix ordering (for more examples see <ref> [Kwi91] </ref>). <p> Due to computability, Smyth uses closedness under countable intersection (such specifications are known in topology as G ffi sets: countable intersections of open sets) while we take arbitrary intersections of open sets as liveness predicates. In <ref> [Kwi91] </ref> liveness predicates are also G ffi -sets. We differ from [AS85] where liveness predicates are the dense sets (the complement does not contain non-empty open sets). <p> The diagram in Figure 1 summarizes the situation. 8 Conclusions and Future Work We have proposed a formal definition of safety and liveness predicates and of predicate transformers following the line of <ref> [Smy83, Kwi91] </ref>. Furthermore we have given generalizations of 28 the standard definitions of power domains and of state transformers, which give us a complete series of isomorphisms between predicate and state transformers (including the Plotkin state transformers).
Reference: [Lam77] <author> L. Lamport. </author> <title> Proving the correctness of a multiprocess program. </title> <journal> IEEE Transaction on Software Eng., </journal> <volume> SE-3:125-143, </volume> <year> 1977. </year>
Reference-contexts: Our treatment includes the Plotkin power domain. For state transformers we use an extension of the standard power domains. For predicate transformers we start from the (informal) classification of predicates in liveness and safety predicates of Lamport <ref> [Lam77] </ref>. Later Smyth [Smy83] followed by [AS85, Kwi91] used topology to formalize this classification. Also we use topology for defining predicates and safety and liveness predicate transformers. We consider a new kind of predicate transformers with predicates that are the intersection of safety and liveness predicates. <p> The safety and liveness predicates are introduced informally in <ref> [Lam77] </ref>. Smyth [Smy83, Smy92] introduces the topological view that closed sets represent safety predicates and the liveness predicates are intersections of open sets.
Reference: [MM79] <author> G. Milne and R. Milner. </author> <title> Concurrent processes and their syntax. </title> <journal> J. ACM, </journal> <volume> 26, 2 </volume> <pages> 302-321, </pages> <year> 1979. </year>
Reference-contexts: Power domains for dcpo's were introduced in [Plo76], [Smy78] and [Plo81]. Our power domains are slightly more general in the sense that we do no restrict to non-empty (Scott-) compact sets. Besides the standard ways of adding the empty set to the Smyth [Smy83] and to the Plotkin <ref> [MM79, Plo81, Abr91] </ref> power domains, we also add the empty set in all the three power domains as a separate element, comparable only with itself and with the bottom. Predicate transformers were introduced in [Dij76] with a series of healthness conditions. <p> We have that Pffi co (X ) coincides with the standard way of adding the empty set to the Plotkin power domain <ref> [MM79] </ref>, [Plo81] and also [Abr91]. Next we turn to the predicate transformers. We modify the implication order both on safety and liveness predicate transformers to preserve deadlock states (states that are the image of the empty set).
Reference: [Nel89] <author> G. Nelson. </author> <title> A generalization of Dijkstra's calculus. </title> <journal> ACM Transaction on Programming Languages and Systems, </journal> <volume> 11 - 4 </volume> <pages> 517-561, </pages> <year> 1989. </year>
Reference-contexts: Predicate transformers were introduced in [Dij76] with a series of healthness conditions. Back and von Wright [Bac80, vW90] use only the monotonicity restriction on predicate transformers. They use predicate transformers for refinement and provide a nice lattice theoretical framework. Nelson <ref> [Nel89] </ref> has (for the flat case) used "compatible" pairs of predicate transformers for giving semantics to a language with backtracking. Smyth [Smy83] introduced predicate transformers (with the Dijkstra healthiness conditions) for non-flat domains.
Reference: [Plo76] <author> G.D. Plotkin. </author> <title> A powerdomain construction. </title> <journal> SIAM J. Comput., </journal> <volume> 5 </volume> <pages> 452-487, </pages> <year> 1976. </year>
Reference-contexts: So for the first time we are able to give a full picture of all the relationships filling several gaps that were present in the literature. 2 Next we discuss how this paper is related to previous work. Power domains for dcpo's were introduced in <ref> [Plo76] </ref>, [Smy78] and [Plo81]. Our power domains are slightly more general in the sense that we do no restrict to non-empty (Scott-) compact sets. <p> However if X is an !-algebraic dcpo then P + co (X ) is also an !-algebraic dcpo with finite elements the fl -closures of finite subsets of B X (cf. <ref> [Plo76] </ref>, [Plo81]). For a treatment of more general algebraic dcpo's we refer to [Hrb87] and [Hrb89]. Definition 4.3 Let X ; Y be two algebraic dcpo's.
Reference: [Plo79] <author> G.D. Plotkin. </author> <title> Dijkstra's predicate transformer and Smyth's powerdomain. </title> <booktitle> In Proceedings of the Winter School on Abstract Software Specification, volume 86 of Lecture Notes in Computer Science, </booktitle> <pages> pages 527-553. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1979. </year>
Reference-contexts: Furthermore, a new (generalization) of the multiplicativity restriction is introduced and a generalization to the non-flat case of "compatible" pairs of predicate transformers is given. Isomorphisms between state and predicate transformers have been given for the flat case of the Smyth power domain in <ref> [Plo79] </ref> (and for countable nondeterminism in [AP86]), and for the flat case of the Hoare power domain in [Plo81]. Also De Bakker and De Roever [Bak80, Roe76] studied (from a semantical point of view) for the flat case the relation between state transformer and predicate transformer semantics. <p> If is intersection (union) extensible then the logical `8' (`9') of of an arbitrary collection of predicates on Y is always a predicate in P (X ). For multiplicative predicate transformers we prove the following stability lemma (a generalization of a lemma due to Plotkin <ref> [Plo79, AP86] </ref>)in which the collections of predicates are not necessarily closed under arbitrary intersection: Lemma 3.6 Let : P (Y ) ! M P (X ) be a multiplicative predicate transformer between two collections of predicates.
Reference: [Plo81] <editor> G.D. Plotkin. </editor> <booktitle> Post-graduate lecture notes in advanced domain theory (incorporating the "Pisa Notes"). </booktitle> <institution> Department of Computer Science, Univ. of Edinburgh, </institution> <year> 1981. </year>
Reference-contexts: So for the first time we are able to give a full picture of all the relationships filling several gaps that were present in the literature. 2 Next we discuss how this paper is related to previous work. Power domains for dcpo's were introduced in [Plo76], [Smy78] and <ref> [Plo81] </ref>. Our power domains are slightly more general in the sense that we do no restrict to non-empty (Scott-) compact sets. <p> Power domains for dcpo's were introduced in [Plo76], [Smy78] and [Plo81]. Our power domains are slightly more general in the sense that we do no restrict to non-empty (Scott-) compact sets. Besides the standard ways of adding the empty set to the Smyth [Smy83] and to the Plotkin <ref> [MM79, Plo81, Abr91] </ref> power domains, we also add the empty set in all the three power domains as a separate element, comparable only with itself and with the bottom. Predicate transformers were introduced in [Dij76] with a series of healthness conditions. <p> Isomorphisms between state and predicate transformers have been given for the flat case of the Smyth power domain in [Plo79] (and for countable nondeterminism in [AP86]), and for the flat case of the Hoare power domain in <ref> [Plo81] </ref>. Also De Bakker and De Roever [Bak80, Roe76] studied (from a semantical point of view) for the flat case the relation between state transformer and predicate transformer semantics. Moreover, for the flat case of the Plotkin power domain we have proposed an isomorphism in [BK92]. <p> Moreover, for the flat case of the Plotkin power domain we have proposed an isomorphism in [BK92]. For the general case of the compact Smyth power domain in the paper [Smy83] an isomorphism is given for continuous state transformers. He uses a topological technique which Plotkin later used in <ref> [Plo81] </ref> for the continuous Hoare state transformers. A recent work includes an operational point of view in Van Breugel [Bre93]. <p> Furthermore we give isomorphisms for the Plotkin power domain. As far as we know no isomorphism was known for the non-flat Plotkin power domain (as for example is remarked in <ref> [Plo81] </ref> and in [Smy83]). 2 Mathematical Preliminaries We introduce some basic notions on domain theory and topology. For a more detailed discussions on domain theory consult for example [Plo81], and for topology we refer to [Eng77]. <p> As far as we know no isomorphism was known for the non-flat Plotkin power domain (as for example is remarked in <ref> [Plo81] </ref> and in [Smy83]). 2 Mathematical Preliminaries We introduce some basic notions on domain theory and topology. For a more detailed discussions on domain theory consult for example [Plo81], and for topology we refer to [Eng77]. A partial order v on a set P is a reflexive, transitive and antisymmetric relation in P fi P . Let P be ordered by the partial order v, x 2 P and A a subset of P . <p> (Y ) " ! OM O (X ) " ) ~ = (O Sc (Y ) ! M O (X )), 4 State Transformers In this section we give generalizations of the three "classical" power domains on !-algebraic dcpo's, the so-called Hoare, Smyth and Plotkin power domains ([Plo76], [Smy78] and <ref> [Plo81] </ref>). and on these power domains we base our state transformers. We need the following two closure operators for the definition of the power domains. Let A be a subset of an algebraic dcpo X : 1. <p> For an algebraic dcpo X , the Hoare power domain is a complete lattice. Furthermore it is also an algebraic dcpo with finite elements the Scott closure of finite subsets of B X <ref> [Plo81] </ref>. Also the Smyth power domain is a complete lattice, but in general it is not an algebraic dcpo. However its restriction S co (X ) is an algebraic dcpo with finite elements the upper closures of finite subsets of B X [Plo81, Smy78, Smy83]. <p> Also the Smyth power domain is a complete lattice, but in general it is not an algebraic dcpo. However its restriction S co (X ) is an algebraic dcpo with finite elements the upper closures of finite subsets of B X <ref> [Plo81, Smy78, Smy83] </ref>. In general, the Plotkin power domain is neither a complete lattice nor a (pointed) dcpo (there is no bottom element because the empty set is related only with itself and f?g is less than any other set different from the empty set). <p> However if X is an !-algebraic dcpo then P + co (X ) is also an !-algebraic dcpo with finite elements the fl -closures of finite subsets of B X (cf. [Plo76], <ref> [Plo81] </ref>). For a treatment of more general algebraic dcpo's we refer to [Hrb87] and [Hrb89]. Definition 4.3 Let X ; Y be two algebraic dcpo's. <p> Because the isomorphism is the same for every case we can combine different cases of the theorem to obtain more isomorphisms. For example by combining 2. and 4. we get as a corollary the result of <ref> [Plo81] </ref>: X ! c H + (Y ) ~ = C Sc (Y ) ! sM C Sc (X )): Next we prove Theorem 5.1. We split the theorem in the five lemma's corresponding to the five parts of the theorem. For each part we also give some intuition. <p> We have that Pffi co (X ) coincides with the standard way of adding the empty set to the Plotkin power domain [MM79], <ref> [Plo81] </ref> and also [Abr91]. Next we turn to the predicate transformers. We modify the implication order both on safety and liveness predicate transformers to preserve deadlock states (states that are the image of the empty set). <p> Moreover, if X is an !-algebraic dcpo, then () co and ()" co : P co (X ) ! S co (X ) are continuous function (see [Smy83] and also <ref> [Plo81] </ref>). This means that given an !- algebraic dcpo and a function f : P co (X ) ! m P co (X ), every representation as quotient of f via ()" co or () co has least fixed point that can be calculated by iteration by Theorem 7.1.
Reference: [Roe76] <author> W.P. de Roever. </author> <title> Dijkstra's predicate transformer, non-determinism, recursion, </title> <booktitle> and terminations. In Mathematical foundations of computer science, volume 45 of Lecture Notes in Computer Science, </booktitle> <pages> pages 472-481. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1976. </year>
Reference-contexts: Isomorphisms between state and predicate transformers have been given for the flat case of the Smyth power domain in [Plo79] (and for countable nondeterminism in [AP86]), and for the flat case of the Hoare power domain in [Plo81]. Also De Bakker and De Roever <ref> [Bak80, Roe76] </ref> studied (from a semantical point of view) for the flat case the relation between state transformer and predicate transformer semantics. Moreover, for the flat case of the Plotkin power domain we have proposed an isomorphism in [BK92].
Reference: [Smy78] <author> M.B. Smyth. </author> <title> Power domains. </title> <institution> J. Comput. Syst. Sci., 16,1:23-36, </institution> <year> 1978. </year>
Reference-contexts: So for the first time we are able to give a full picture of all the relationships filling several gaps that were present in the literature. 2 Next we discuss how this paper is related to previous work. Power domains for dcpo's were introduced in [Plo76], <ref> [Smy78] </ref> and [Plo81]. Our power domains are slightly more general in the sense that we do no restrict to non-empty (Scott-) compact sets. <p> (O Sc (Y ) " ! OM O (X ) " ) ~ = (O Sc (Y ) ! M O (X )), 4 State Transformers In this section we give generalizations of the three "classical" power domains on !-algebraic dcpo's, the so-called Hoare, Smyth and Plotkin power domains ([Plo76], <ref> [Smy78] </ref> and [Plo81]). and on these power domains we base our state transformers. We need the following two closure operators for the definition of the power domains. Let A be a subset of an algebraic dcpo X : 1. <p> Also the Smyth power domain is a complete lattice, but in general it is not an algebraic dcpo. However its restriction S co (X ) is an algebraic dcpo with finite elements the upper closures of finite subsets of B X <ref> [Plo81, Smy78, Smy83] </ref>. In general, the Plotkin power domain is neither a complete lattice nor a (pointed) dcpo (there is no bottom element because the empty set is related only with itself and f?g is less than any other set different from the empty set).
Reference: [Smy83] <author> M.B. Smyth. </author> <title> Power domains and predicate transformers: A topological view. </title> <booktitle> In Proceedings of ICALP '83 (Barcelona), volume 154 of Lecture Notes in Computer Science, </booktitle> <pages> pages 662-675. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1983. </year>
Reference-contexts: Our treatment includes the Plotkin power domain. For state transformers we use an extension of the standard power domains. For predicate transformers we start from the (informal) classification of predicates in liveness and safety predicates of Lamport [Lam77]. Later Smyth <ref> [Smy83] </ref> followed by [AS85, Kwi91] used topology to formalize this classification. Also we use topology for defining predicates and safety and liveness predicate transformers. We consider a new kind of predicate transformers with predicates that are the intersection of safety and liveness predicates. <p> Power domains for dcpo's were introduced in [Plo76], [Smy78] and [Plo81]. Our power domains are slightly more general in the sense that we do no restrict to non-empty (Scott-) compact sets. Besides the standard ways of adding the empty set to the Smyth <ref> [Smy83] </ref> and to the Plotkin [MM79, Plo81, Abr91] power domains, we also add the empty set in all the three power domains as a separate element, comparable only with itself and with the bottom. Predicate transformers were introduced in [Dij76] with a series of healthness conditions. <p> Back and von Wright [Bac80, vW90] use only the monotonicity restriction on predicate transformers. They use predicate transformers for refinement and provide a nice lattice theoretical framework. Nelson [Nel89] has (for the flat case) used "compatible" pairs of predicate transformers for giving semantics to a language with backtracking. Smyth <ref> [Smy83] </ref> introduced predicate transformers (with the Dijkstra healthiness conditions) for non-flat domains. Our definition of predicate transformers is parametric with respect to the collection of predicates (observable, liveness and safety). <p> Moreover, for the flat case of the Plotkin power domain we have proposed an isomorphism in [BK92]. For the general case of the compact Smyth power domain in the paper <ref> [Smy83] </ref> an isomorphism is given for continuous state transformers. He uses a topological technique which Plotkin later used in [Plo81] for the continuous Hoare state transformers. A recent work includes an operational point of view in Van Breugel [Bre93]. <p> Furthermore we give isomorphisms for the Plotkin power domain. As far as we know no isomorphism was known for the non-flat Plotkin power domain (as for example is remarked in [Plo81] and in <ref> [Smy83] </ref>). 2 Mathematical Preliminaries We introduce some basic notions on domain theory and topology. For a more detailed discussions on domain theory consult for example [Plo81], and for topology we refer to [Eng77]. <p> The safety and liveness predicates are introduced informally in [Lam77]. Smyth <ref> [Smy83, Smy92] </ref> introduces the topological view that closed sets represent safety predicates and the liveness predicates are intersections of open sets. <p> Also the Smyth power domain is a complete lattice, but in general it is not an algebraic dcpo. However its restriction S co (X ) is an algebraic dcpo with finite elements the upper closures of finite subsets of B X <ref> [Plo81, Smy78, Smy83] </ref>. In general, the Plotkin power domain is neither a complete lattice nor a (pointed) dcpo (there is no bottom element because the empty set is related only with itself and f?g is less than any other set different from the empty set). <p> We can combine 2., 3. and 5. to obtain the result of <ref> [Smy83] </ref>, because S co (Y ) is an algebraic dcpo with finite elements the upper closures of the finite subsets of B Y , thus every continuous function from X to S co (Y ) is also fi-algebraic. <p> Moreover, if X is an !-algebraic dcpo, then () co and ()" co : P co (X ) ! S co (X ) are continuous function (see <ref> [Smy83] </ref> and also [Plo81]). <p> The diagram in Figure 1 summarizes the situation. 8 Conclusions and Future Work We have proposed a formal definition of safety and liveness predicates and of predicate transformers following the line of <ref> [Smy83, Kwi91] </ref>. Furthermore we have given generalizations of 28 the standard definitions of power domains and of state transformers, which give us a complete series of isomorphisms between predicate and state transformers (including the Plotkin state transformers).
Reference: [Smy92] <editor> M.B. Smyth. Topology. In S. Abramsky, D.O.V.M. Gabbay, and T.S.E. Malbaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, volume I Background: Mathematical Structures, </booktitle> <pages> pages 641-761. </pages> <publisher> Clarendon Press, </publisher> <year> 1992. </year>
Reference-contexts: The safety and liveness predicates are introduced informally in [Lam77]. Smyth <ref> [Smy83, Smy92] </ref> introduces the topological view that closed sets represent safety predicates and the liveness predicates are intersections of open sets.
Reference: [SP82] <author> M.B. Smyth and G.D. Plotkin. </author> <title> The category-theoretic solution of recursive domain equations. </title> <journal> SIAM J. Comput., </journal> <volume> 11 </volume> <pages> 761-783, </pages> <year> 1982. </year>
Reference-contexts: A directed set A is eventually constant if F A partially ordered set P has a least upper bound for every !-chain if and only if it contains all least upper bounds of all directed countable sets <ref> [SP82] </ref>. In this case P is called a !-complete partially ordered set (!-cpo). 3 An element b of a dcpo P is finite if for every directed set A P , b v F A implies b v x for some x 2 A.
Reference: [vW90] <author> J. von Wright. </author> <title> A Lattice-theoretical Basis for Program Refinement. </title> <type> PhD thesis, </type> <institution> Abo Akademi, </institution> <year> 1990. </year> <month> 30 </month>
Reference-contexts: Predicate transformers were introduced in [Dij76] with a series of healthness conditions. Back and von Wright <ref> [Bac80, vW90] </ref> use only the monotonicity restriction on predicate transformers. They use predicate transformers for refinement and provide a nice lattice theoretical framework. Nelson [Nel89] has (for the flat case) used "compatible" pairs of predicate transformers for giving semantics to a language with backtracking.
References-found: 27

