URL: ftp://theory.lcs.mit.edu/pub/people/mass/forte96.ps
Refering-URL: http://theory.lcs.mit.edu/~mass/forte96.html
Root-URL: 
Email: mass@lcs.mit.edu  
Phone: (617)253-1499, (617)253-3480,  
Title: Formal Verification of Communication Protocols  
Author: M. A. S. Smith 
Keyword: Verification, automata and languages, network protocols  
Address: Cambridge, MA 02139, USA,  
Affiliation: Laboratory for Computer Science, MIT  
Abstract: In this paper we present a formal abstract specification for TCP/IP transport level protocols and formally verify that TCP satisfies this specification. We also present a formal description of an experimental protocol, T/TCP, which proposes to provide the same service as TCP, but with optimizations to make it efficient for transactions. We further show that this protocol does not provide the same service as TCP, and propose a weaker specification for this protocol. Our specifications are presented using an untimed automaton model, and we present the protocols using a timed automaton model. The formal verification is done using invariant assertion and simulation techniques. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abadi, M. and Lamport, L. </author> <title> (1991) The existence of refinement mappings. </title> <journal> Theoretical Computer Science, </journal> <volume> 82(2) </volume> <pages> 253-284. </pages>
Reference-contexts: Since we only need to consider the steps of the implementation automaton which start in a reachable state, an invariant that avoids these "bad" states is found. Invariants are properties that are true of all reachable states. In <ref> (Abadi and Lamport, 1991) </ref> it is shown that in some instances even though it is not possible to find a refinement mapping from implementation I to specification S, by adding history variables to I a mapping can be found.
Reference: <author> Belsnes, D. </author> <title> (1976) Single message communication. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 24(2). </volume>
Reference-contexts: However, we could not find any work that verified TCP in sufficient generality to use in our work. Other works have verified parts of TCP or protocols similar to TCP. In (Stgaard-Andersen, Lampson, and Lynch, 1993) the correctness the five packet handshake protocol <ref> (Belsnes, 1976) </ref> which forms the basis of the open and close phase of TCP and ISO-TP4 is formally verified. However, this work does not verify enough of TCP for us to use directly in the verification of T/TCP.
Reference: <author> Braden, R. </author> <title> (1992) Extending TCP for transactions concepts. Internet RFC-1379. </title>
Reference: <author> Braden, R. </author> <title> (1994) T/TCP - TCP extensions for transactions functional specification. Internet RFC-1644. </title>
Reference-contexts: The interface where the actions are combined facilitates such a transaction without losing any of the functionality of the usual TCP interface. Braden <ref> (Braden, 1994) </ref> suggests a similar interface for T/TCP. We do not combine the three actions into one action on the server side because that side is passive and cannot send any data until it has formed a connection with the client.
Reference: <author> Braden, R. and Clark, D. </author> <title> (1993) Transport protocols for transactions and streaming. </title> <publisher> Unpub lished manuscript. </publisher>
Reference-contexts: Therefore, they thought a formal correctness proof would be useful <ref> (Braden and Clark, 1993) </ref>. Our initial plan of attack for verifying T/TCP was to assume the correctness of TCP and leverage off this correctness in the verification of T/TCP. However, we could not find any work that verified TCP in sufficient generality to use in our work.
Reference: <author> Lampson, B., Lynch N, and Stgaard-Andersen, J. </author> <title> (1993) Correctness of at-most-once message delivery protocols. </title> <booktitle> In FORTE'93 Sixth International Conference on Formal Description Techniques, </booktitle> <pages> pages 387-402, </pages> <address> Boston, MA. </address>
Reference-contexts: However, we could not find any work that verified TCP in sufficient generality to use in our work. Other works have verified parts of TCP or protocols similar to TCP. In <ref> (Stgaard-Andersen, Lampson, and Lynch, 1993) </ref> the correctness the five packet handshake protocol (Belsnes, 1976) which forms the basis of the open and close phase of TCP and ISO-TP4 is formally verified. However, this work does not verify enough of TCP for us to use directly in the verification of T/TCP. <p> Simulation techniques are known to be quite useful in the verification of concurrent systems, and other researchers use this method in their work (Abadi and Lamport, 1991; Lampson, Lynch, and Stgaard-Andersen 1993; Murphy and Shankar 1989). This paper is closest in scope to the work in <ref> (Lampson, Lynch, and Stgaard-Andersen, 1993) </ref>. The rest of the paper is organized as follows. Section 2 contains a brief description of the formal models we use in the paper. Section 3 contains an informal description of TCP and T/TCP. <p> However, TCP and T/TCP are timed systems, so we presented them as timed automata. The methods we used do not allow direct simulations between timed and untimed systems. The same issue comes up in <ref> (Stgaard-Andersen, Lynch and Lampson, 1993) </ref>, and they develop the patient operator which converts an untimed automaton into a timed automaton by adding arbitrary time passage steps. 3 INFORMAL DESCRIPTION OF PROTOCOLS In this section we present informal descriptions of TCP and T/TCP. <p> This decision is dependent on race conditions that may exist on the channels. The postponing of nondeterministic choices in the implementations suggests the need for a backward simulation. A similar situation comes up in <ref> (Stgaard-Andersen, Lynch and Lampson, 1993) </ref> and they develop the idea of a Delayed-Decision Specification. We use this idea, and our Delayed-Decision Specification D is similar to the one in their work. <p> As we discussed in Section 2 we have to apply the patient operator to D to get a timed version. We call this new automaton D p . The Embedding Theorem of <ref> (Stgaard-Andersen, Lynch and Lampson, 1993) </ref> states that automaton A implements an automaton B iff patient (A) implements patient (B). Applying the theorem here means D p implements patient (S). We also add history variables to T . We call the resulting automaton T h .
Reference: <author> Lynch, N. and Tuttle, M. </author> <title> (1989) An introduction to input/output automata. </title> <journal> CWI Quarterly, </journal> <volume> 3(2). </volume>
Reference-contexts: However, we combine the send-msg and close actions to facilitate a reply message and an immediate close. We use the untimed automaton model described in Section 2 to formally present the specification. The steps are presented in a precondition, effect style commonly used with I/O automata <ref> (Lynch and Tuttle, 1989) </ref>. That is, the state during which an act is enabled is given as a precondition, and the resulting state is given by the effects of the action. Input actions have no precondition.
Reference: <author> Lynch, N. and Vaandrager, F. </author> <title> (1995) Forward and backward simulations part II: Time-based systems. </title> <note> To Appear in Information and Computation. </note>
Reference-contexts: These methods are used for proving trace inclusion relationships between concurrent systems. The methodology is developed in the context of a very simple and general automaton for both untimed (Lynch and Vaandrager, 1993) and timed <ref> (Lynch and Vaandrager, 1995) </ref> systems. We elaborate on the model and methodology in Section 2. <p> The union of the input actions and output actions we denote as external actions, those actions visible to the environment. We describe TCP and T/TCP as timed automata. A timed automaton <ref> (Lynch and Vaandrager, 1995) </ref> is an automaton as described above, but its set of actions includes R + , the set of positive reals. Actions from R + are referred to as time-passage actions.
Reference: <author> Lynch, N. and Vaandrager, F. </author> <title> (1993) Forward and backward simulations part I: </title> <journal> Untimed systems. </journal> <note> Technical Memo MIT/LCS/TM-486, M.I.T.. </note>
Reference-contexts: However, we could not find any work that verified TCP in sufficient generality to use in our work. Other works have verified parts of TCP or protocols similar to TCP. In <ref> (Stgaard-Andersen, Lampson, and Lynch, 1993) </ref> the correctness the five packet handshake protocol (Belsnes, 1976) which forms the basis of the open and close phase of TCP and ISO-TP4 is formally verified. However, this work does not verify enough of TCP for us to use directly in the verification of T/TCP. <p> We use the formalization of simulations developed in (Lynch and Vaandrager, 1993; Lynch and Vaandrager, 1995). These methods are used for proving trace inclusion relationships between concurrent systems. The methodology is developed in the context of a very simple and general automaton for both untimed <ref> (Lynch and Vaandrager, 1993) </ref> and timed (Lynch and Vaandrager, 1995) systems. We elaborate on the model and methodology in Section 2. <p> Simulation techniques are known to be quite useful in the verification of concurrent systems, and other researchers use this method in their work (Abadi and Lamport, 1991; Lampson, Lynch, and Stgaard-Andersen 1993; Murphy and Shankar 1989). This paper is closest in scope to the work in <ref> (Lampson, Lynch, and Stgaard-Andersen, 1993) </ref>. The rest of the paper is organized as follows. Section 2 contains a brief description of the formal models we use in the paper. Section 3 contains an informal description of TCP and T/TCP. <p> 3 2 FORMAL MODELS In this section we give a definition of untimed and timed automata and also give a description of the simulation techniques we use. 2.1 Automata models The formal model we use to represent the specification of the transport level problem is the untimed automaton model of <ref> (Lynch and Vaandrager, 1993) </ref>. An automaton A consists of four components, a set states (A) of states, a nonempty set start (A) states (A) of start states, a set acts (A) of actions, and a set steps (A) states (A) fi acts (A) fi states (A) of steps. <p> However, TCP and T/TCP are timed systems, so we presented them as timed automata. The methods we used do not allow direct simulations between timed and untimed systems. The same issue comes up in <ref> (Stgaard-Andersen, Lynch and Lampson, 1993) </ref>, and they develop the patient operator which converts an untimed automaton into a timed automaton by adding arbitrary time passage steps. 3 INFORMAL DESCRIPTION OF PROTOCOLS In this section we present informal descriptions of TCP and T/TCP. <p> This decision is dependent on race conditions that may exist on the channels. The postponing of nondeterministic choices in the implementations suggests the need for a backward simulation. A similar situation comes up in <ref> (Stgaard-Andersen, Lynch and Lampson, 1993) </ref> and they develop the idea of a Delayed-Decision Specification. We use this idea, and our Delayed-Decision Specification D is similar to the one in their work. <p> As we discussed in Section 2 we have to apply the patient operator to D to get a timed version. We call this new automaton D p . The Embedding Theorem of <ref> (Stgaard-Andersen, Lynch and Lampson, 1993) </ref> states that automaton A implements an automaton B iff patient (A) implements patient (B). Applying the theorem here means D p implements patient (S). We also add history variables to T . We call the resulting automaton T h .
Reference: <author> Murphy, S. </author> <title> (1996) Private communication. </title>
Reference-contexts: However, we discovered that under certain circumstances T/TCP does not behave the way TCP does, and in fact does not satisfy the specification we have for the transport layer. <ref> (Murphy, 1996) </ref> has also found a situation different from the one we discovered where T/TCP does not behave as TCP. We present the scenario we discovered in this paper and also discuss a weaker specification for T/TCP that is not violated by the scenario.
Reference: <author> Murphy, S. and Shankar, A. </author> <title> (1989) Connection management for the transport layer: Service specification and protocol verification. </title> <type> Technical Report UMIACS-TR-88-45.1, </type> <institution> University of Maryland, </institution> <month> June </month> <year> 1988. </year> <note> Revised December. </note> <year> 1989. </year>
Reference-contexts: However, this work does not verify enough of TCP for us to use directly in the verification of T/TCP. In <ref> (Murphy and Shankar, 1989) </ref> a connection management protocol for the transport layer is also specified and verified, but the protocol is of their own design, not TCP.
Reference: <author> Postel, J. </author> <title> (1981) Transmission conrol protocol - DARPA Internet program specification (Internet standard STC-007). Internet RFC-793. </title>
Reference-contexts: In (Murphy and Shankar, 1989) a connection management protocol for the transport layer is also specified and verified, but the protocol is of their own design, not TCP. The informal specification of TCP <ref> (Postel, 1981) </ref> is quite complicated, and an important contribution of this work is the presentation of a precise specification of the transport level problem TCP is supposed to solve. In our formal presentation of TCP we do make some simplifications. <p> The specification defines a relationship on the inputs and outputs that gives precisely the desired behavior any protocol solving the problem should have. The user interface for TCP and our specification, S, is shown in Figure 1. The user interface for TCP in the Internet standard <ref> (Postel, 1981) </ref>, has an explicit active-open input and separate send-msg and close inputs.
Reference: <author> Stgaard-Anderson, J., Lynch, N. and Lampson, B. </author> <title> (1993) Correctness of communications pro tocols, a case study. </title> <type> Technical Report MIT/LCS/TR-589, </type> <institution> M.I.T.. </institution>
Reference: <author> Smith, M. </author> <title> (1996) Formal Verification of Communications Protocols for Data Streaming and Transactions. </title> <type> PhD thesis, </type> <institution> M.I.T. </institution> <note> In progress. </note>
Reference-contexts: Due to space limitations we present only part of the specification here. The full specification appears in <ref> (Smith, 1996) </ref>. The specification can be viewed as a "black box", which 6 has a user interface that gets all the inputs that the protocol receives and sends out all the outputs that we want the protocol to produce. <p> The protocol is too large to present in its entirety in this paper, so we only present the steps of the open phase. The steps are also somewhat simplified to ease the exposition in this paper. For the full protocol see <ref> (Smith, 1996) </ref>. and Channel sc , for sending packets from the client to the server and from the server to the client respectively. We model the channels as timed automata. When a packet gets placed on the network and is not dropped, it eventually gets delivered. <p> Marked messages can still be delivered to users. The specification D and the backward simulation from D to S are presented in <ref> (Smith, 1996) </ref>. The next step in the verification of TCP is to show the refinement mapping from automaton T to D. As we discussed in Section 2 we have to apply the patient operator to D to get a timed version. We call this new automaton D p . <p> We also need some invariants on the reachable states of T h . These invariants, I T , are presented and proved in <ref> (Smith, 1996) </ref>. In our definition of the refinement mapping from T h to D p we write k:variable to denote the value of variable in state k. <p> Lemma 1 R T D is a refinement mapping from T h to D p with respect to I T . Proof. The proof of this Lemma is in <ref> (Smith, 1996) </ref>. We give a brief sketch here. The proof has two parts. The first part, which is quite straightforward, is to show that the start states of T h and D p correspond.
References-found: 14

