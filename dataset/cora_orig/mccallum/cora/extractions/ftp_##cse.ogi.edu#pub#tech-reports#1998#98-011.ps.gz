URL: ftp://cse.ogi.edu/pub/tech-reports/1998/98-011.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Email: ecklund@teleport.com lmd@cse.ogi.edu  
Title: The Shared Model: The Key to Analysis without Paralysis  
Author: by Lois M. L. Delcambre Earl F. Ecklund, Jr. 
Address: 97008, USA Portland, Oregon 97291-1000  
Affiliation: Computer Science and Engineering Department OBJECTive Technology Group Oregon Graduate Institute Beaverton, Oregon  
Abstract: The concept of the shared model is introduced in this paper to direct the analysis process. The shared model is a mental model in the mind of the various users of the system; it corresponds to their understanding of what the software system does. The shared model is manifested first in the use case model which describes how the system functions and how it manipulates various domain concepts/objects, from the point of view of the user. The shared model is elaborated in the analysis object model, consisting of objects and responsibilities that support the use cases. The shared model provides clear guidance about when to stop the analysis chase. We believe that the analysis step is critical to the development of a software system because it identifies the cumulative demand on the domain objects and because it enables reuse of objects and responsibilities at the domain level. One of the key challenges in analysis is deciding when to stop, to resist the temptation to forge ahead with decisions that rightly belong in design. The shared model provides the key to deciding what is in and what is out of both the use case and the analysis models.
Abstract-found: 1
Intro-found: 1
Reference: [Aksit92] <author> M. Aksit and L. Bergmans, </author> <title> Obstacles in ObjectOriented Software Development, </title> <booktitle> Proc. OOPSLA '92 </booktitle>
Reference-contexts: There is popular folklore that an objectoriented approach makes it easier to model the real world. Aksit and Bergmans consider that The preparatory work in the analysis phase consists of mapping between the real world entities and the entities in the analysis model: objects <ref> [Aksit92] </ref>. They appear to be in good company, as the three amigos have all espoused to model the real world [Booch94, Jacobson86, Rumbaugh87, Rumbaugh91]. Rubin et al discuss modeling a real-time control system, where the Current Problem Space models the state of the real controlled system [Rubin88].
Reference: [Alabiso88] <author> B. Alabiso, </author> <title> Transformation of Data Flow Analysis Models to Object Oriented Design, </title> <booktitle> Proc. OOPSLA '88 </booktitle>
Reference-contexts: As such, the shared model cannot be validated, and it can only be extracted by interviews with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior [Page89] , essential model <ref> [Alabiso88] </ref>, mental objects [Beech88], mental model [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90].
Reference: [Beech88] <author> D. Beech, </author> <title> Intensional Concepts in an Object Database Model, </title> <booktitle> Proc. OOPSLA '88 </booktitle>
Reference-contexts: shared model cannot be validated, and it can only be extracted by interviews with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior [Page89] , essential model [Alabiso88], mental objects <ref> [Beech88] </ref>, mental model [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90].
Reference: [Booch94] <author> G. Booch, </author> <title> ObjectOriented Analysis and Design, </title> <editor> 2nd Ed., Benjamin/Cummings, </editor> <year> 1994 </year>
Reference-contexts: For example, Vayda states that the dividing line between requirements modeling and early analysis is often hard to distinguish, but this causes no real problem. [Vayda95] And Booch observes that the boundaries between analysis and design are fuzzy, although the focus of each is quite distinct. <ref> [Booch94] </ref> Some practitioners appear to minimize or elide analysis, often by moving analysis-level reasoning earlier (into use cases) and/or later (into design) in the development process [e.g., Firesmith91, Jordan94, Wirfs-Brock90]. Firesmith states, I do not make a strong barrier between analysis and logical design. <p> Firesmith states, I do not make a strong barrier between analysis and logical design. I make a stronger barrier between logical design and implementation design. Booch changed the name of <ref> [Booch94] </ref> to avoid this appearance. Often, one sees characterizations of analysis as describing what the system will do, and design as describing how the system will do it. <p> Aksit and Bergmans consider that The preparatory work in the analysis phase consists of mapping between the real world entities and the entities in the analysis model: objects [Aksit92]. They appear to be in good company, as the three amigos have all espoused to model the real world <ref> [Booch94, Jacobson86, Rumbaugh87, Rumbaugh91] </ref>. Rubin et al discuss modeling a real-time control system, where the Current Problem Space models the state of the real controlled system [Rubin88]. Others endorse modeling the problem domain [Hayes91, Kerth91, Seidewitz87].
Reference: [Bos89] <author> J. Van Den Bos and C. Laffra, </author> <title> PROCOL A Parallel Object Language with Protocols, </title> <booktitle> Proc. OOPSLA '89 </booktitle>
Reference-contexts: be validated, and it can only be extracted by interviews with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior [Page89] , essential model [Alabiso88], mental objects [Beech88], mental model <ref> [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] </ref> and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90].
Reference: [Champeaux92a] <author> D. de Champeaux, D. Lea and P. Faure, </author> <title> The Process Of ObjectOriented Design, </title> <booktitle> Proc. OOPSLA '92 </booktitle>
Reference-contexts: Champeaux et al state that Analysis models may omit mention of classes, constraints, operations, etc., that do not appear to affect the overall functionality of the system, with the expectation that these issues will be further examined downstream <ref> [Champeaux92a] </ref>.
Reference: [Champeaux92b] <author> D. de Champeaux, A. Anderson and E. Feldhousen, </author> <title> Case Study of Object-Oriented Software Development, </title> <booktitle> Proc. OOPSLA '92 </booktitle>
Reference-contexts: A client, if different from the development team, will be able to agree (or not) that the analysis output captures the best insights about what the target system is supposed to be. Secondly, the output of the analysis is channeled into the design phase <ref> [Champeaux92b] </ref>. The most important lesson is to insist on a distinct analysis phase and to keep the analysis work products relatively free of implementation aspects. <p> project to get the most fundamental development product, the analysis model, into good shape [Vayda95]. and In retrospect, it is now clear that a primary benefit of using the OO approach was the way that some of the analysis models become a powerful framework upon which the design was built <ref> [Champeaux92b] </ref>. 6. Conclusions and Future Work This paper defines the shared model, a mental model of the domain objects, interface, and operations that must be embodied in the software system to be built. The shared model provides focus for the analysis activities by setting the scope.
Reference: [Coleman94] <author> D. Coleman, S. Arnold, D. Bodoff, C. Dollin, H. Gilchrist, F. Hayes and P. Jeremaes, </author> <title> ObjectOriented Development: the Fusion Method, </title> <publisher> Prentice Hall, </publisher> <year> 1994 </year>
Reference-contexts: Thus analysis is focused on the domain of the problem and is concerned with externally visible behavior. <ref> [Coleman94] </ref> This is fairly close to the shared model orientation, since the focus on the problem domain is a side effect of viewing analysis from the users perspective, or from the shared model.
Reference: [Cook94] <author> S. Cook and J. Daniels, </author> <title> Designing Object Systems: objectoriented modeling with Syntropy, </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1994 </year>
Reference-contexts: Only Goldberg and Rubins concept space share this characteristic with the shared model. 5.5 Cook and Danielss Specification Model Cook and Daniels describe three models <ref> [Cook94] </ref>. The first is an abstraction of the real world, a model of selected entities from the world. The other two are models of the software at two levels, which they call the specification level and the implementation level.
Reference: [Ecklund96] <author> E. Ecklund, L. Delcambre and M. Freiling, </author> <title> "Change Cases: Use cases that identify future requirements", </title> <booktitle> Proc. OOPSLA '96 </booktitle>
Reference-contexts: But either way, the analysis process can lead to reuse of responsibilities. The details of the QDRO example showing how analysis of anticipated functionality expressed as change cases can improve the quality of an analysis model, can be found elsewhere <ref> [Ecklund96] </ref>. It is through the statement and refinement of the purpose that we discover reuse. If there is an object or responsibility for which there is disagreement about its purpose, then this raises a red flag [Tonge97].
Reference: [Firesmith91] <author> D. Firesmith, </author> <title> Workshop: Object Oriented (Domain) Analysis, </title> <booktitle> OOPSLA '91 Addendum to the Proceedings </booktitle>
Reference-contexts: no real problem. [Vayda95] And Booch observes that the boundaries between analysis and design are fuzzy, although the focus of each is quite distinct. [Booch94] Some practitioners appear to minimize or elide analysis, often by moving analysis-level reasoning earlier (into use cases) and/or later (into design) in the development process <ref> [e.g., Firesmith91, Jordan94, Wirfs-Brock90] </ref>. Firesmith states, I do not make a strong barrier between analysis and logical design. I make a stronger barrier between logical design and implementation design. Booch changed the name of [Booch94] to avoid this appearance.
Reference: [Fowler97a] <author> M. Fowler, </author> <title> Analysis Patterns: Reusable Object Models, </title> <publisher> Addison-Wesley, </publisher> <year> 1997 </year>
Reference-contexts: Regardless of the underlying reason, the fact that the unix userid is mentioned in the use case is tantamount to declaring that the unix userid for all users is in the shared model. What do analysis patterns <ref> [Fowler97a] </ref> have to do with the shared model and the analysis-level object model? Analysis patterns, as described by Fowler, provide elegant object model structures for domain objects. As such, they offer an opportunity for the analysts to refine the analysis-level object model.
Reference: [Fowler97b] <author> M. Fowler and Scott, </author> <title> UML Distilled: Applying the Standard Object Modeling Language, </title> <publisher> Addison-Wesley, </publisher> <year> 1997 </year>
Reference-contexts: User makes selection, which is forwarded to calling use case. Postconditions: Either a work item or component is selected, or the selection is cancelled. The CRC session driven by these use cases is captured in an analysis-level, UML sequence diagram <ref> [Fowler97b] </ref>. These sequence diagrams indicate the objects that were introduced (shown as labels on the top of the vertical lines) and the responsibilities assigned to objects (shown on the labels of arcs inbound to the vertical line.
Reference: [Fraser92] <author> S. Fraser, L. Marshall and T. Bailetti, </author> <title> Workshop: Team Approaches to OO Design, </title> <booktitle> OOPSLA '92 Addendum to the Proceedings </booktitle>
Reference-contexts: be validated, and it can only be extracted by interviews with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior [Page89] , essential model [Alabiso88], mental objects [Beech88], mental model <ref> [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] </ref> and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90]. <p> Fraser et al warn us that the problems with mental models lie not in whether they are right or wrong by definition, all models are simplifications. The problems with mental models arise when the models are tacit when they exist below the level of awareness <ref> [Fraser92] </ref>. The shared model shares this exposure to the unstated. Therefore it is very important that all models understandable to the domain experts be reviewed by them. This provides an opportunity for these users to learn from the developers understanding of the shared model and perhaps refine the shared model.
Reference: [Gamma95] <author> E. Gamma, R. Helm, R. Johnson and J. Vlissides, </author> <title> Design Patterns, Elements of Reusable ObjectOriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1995 </year>
Reference-contexts: As such, they offer an opportunity for the analysts to refine the analysis-level object model. Such refinement should be reviewed and approved by the users, as with all other aspects of the analysis-level object model. What do design patterns <ref> [Gamma95] </ref> have to do with the shared model? How should design patterns influence analysis? What seems like a nonsensical question is not. We believe that knowledge of design patterns can give the analyst the confidence to stop the analysis chase.
Reference: [Goldberg95] <author> A. Goldberg and K. Rubin, </author> <title> Succeeding with Objects, Decision Frameworks for Project Management, </title> <publisher> Addison-Wesley, </publisher> <year> 1995 </year>
Reference-contexts: with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior [Page89] , essential model [Alabiso88], mental objects [Beech88], mental model [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] and concept space <ref> [Goldberg95] </ref> Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90]. <p> The shared model aligns with these desirable behaviors. Goldberg and Rubins concept space is an abstraction for what the expert knows, believes, assumes about analysis, and analysis focuses on what a system is supposed to do, rather than on how it is supposed to do it <ref> [Goldberg95] </ref>. Therefore we see that their concept space models what the expert knows, believes, assumes [about] what a system is supposed to do, which comes as close to the shared model as any other work in the literature. <p> Others endorse modeling the problem domain [Hayes91, Kerth91, Seidewitz87]. These problem domain models are abstractions of the real world, and model things external to the system. Goldberg and Rubin, Jacobson et al, and Jordan et al propose conceptual models of various names: concept space <ref> [Goldberg95] </ref>, conceptual picture of the system [Jacobson92], and conceptual model of the system [Jordan94]. These conceptual models (picture) seem to be models of the software. Jacobson et al and Jordan et al are referring to explicit object models of the software, perhaps their respective finished analysis and requirements models.
Reference: [Harrison93] <author> W. Harrison and H. Ossher, </author> <title> Subject-Oriented Programming (A Critique of Pure Objects), </title> <booktitle> Proc. OOPSLA '93 </booktitle>
Reference-contexts: be validated, and it can only be extracted by interviews with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior [Page89] , essential model [Alabiso88], mental objects [Beech88], mental model <ref> [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] </ref> and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90].
Reference: [Hartman94] <author> M. Hartman, F. Jewell, C. Scott and D. Thornton, </author> <title> Taking an ObjectOriented Methodology into the Real World, </title> <booktitle> OOPSLA '94 Addendum to the Proceedings </booktitle>
Reference-contexts: be validated, and it can only be extracted by interviews with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior [Page89] , essential model [Alabiso88], mental objects [Beech88], mental model <ref> [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] </ref> and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90]. <p> Hartman et al observe that the goal of Information Design is to create an accurate mapping between the information modeled by the system and the user's mental model <ref> [Hartman94] </ref>. The shared model aligns with these desirable behaviors. Goldberg and Rubins concept space is an abstraction for what the expert knows, believes, assumes about analysis, and analysis focuses on what a system is supposed to do, rather than on how it is supposed to do it [Goldberg95]. <p> Hartman et al add, The goal of Information Design is to create an accurate mapping between the information modeled by the system and the user's mental model <ref> [Hartman94] </ref>. There is popular folklore that an objectoriented approach makes it easier to model the real world. Aksit and Bergmans consider that The preparatory work in the analysis phase consists of mapping between the real world entities and the entities in the analysis model: objects [Aksit92].
Reference: [Hayes91] <author> F. Hayes and D. Coleman, </author> <title> Coherent Models for ObjectOriented Analysis, </title> <booktitle> Proc. OOPSLA '91 </booktitle>
Reference-contexts: Hayes and Coleman stated that Analysis is intended to facilitate the formulation and communication of objectoriented descriptions of the problem domain <ref> [Hayes91] </ref>. Jordan et al sought a similar user (e.g., system engineer) developer communication role with their ObjectOriented Requirements (OOR): The OOR should not be considered the design, but rather a conceptual model of the system. The important thing is that system engineers and developers have the same model. <p> Rubin et al discuss modeling a real-time control system, where the Current Problem Space models the state of the real controlled system [Rubin88]. Others endorse modeling the problem domain <ref> [Hayes91, Kerth91, Seidewitz87] </ref>. These problem domain models are abstractions of the real world, and model things external to the system.
Reference: [Horn92] <author> B. Horn, </author> <title> Constraint Patterns As a Basis For Object Oriented Programming, </title> <booktitle> Proc. OOPSLA '92 </booktitle>
Reference-contexts: be validated, and it can only be extracted by interviews with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior [Page89] , essential model [Alabiso88], mental objects [Beech88], mental model <ref> [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] </ref> and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90].
Reference: [Hydalsvik93] <author> G. Hydalsvik and G. Sindre, </author> <title> On the purpose of ObjectOriented Analysis, </title> <booktitle> Proc. OOPSLA '93 </booktitle>
Reference-contexts: of what/how, the real difference between analysis and design should be defined in terms of whether the constructs used in the model are part of the problem-domain (analysis) or part of the solution (design), and whether the method addresses communication with the user, including the need for verification and validation. <ref> [Hydalsvik93] </ref> In Fusion, Coleman et al also identify analysis with the problem domain and design with the implementation domain: Separating the behavior of a system from the way it is implemented requires viewing the system from the users perspective rather than that of the machine.
Reference: [Jackson95] <author> M. Jackson, </author> <title> Software Requirements & Specifications, </title> <publisher> Addison-Wesley, </publisher> <year> 1995 </year>
Reference-contexts: The paper concludes with a discussion of related work followed by conclusions. 2. The Importance of Analysis Analysis consists of the activities that follow the requirements specification. In the sense of Jackson, requirements are necessarily about the application domain and not about the machine <ref> [Jackson95] </ref>. In analysis, and in the shared model, we focus entirely on the users understanding of what takes place inside the machine. Neither the shared model nor the analysis step is focused on the real world. Neither produces a model of the real world. <p> We focus on discovering the relevant domain objects and behaviors of the shared model rather than attempting to create any model of the real-world. This places our work as an activity that follows what Jackson describes as requirements <ref> [Jackson95] </ref>. Another significant difference in our work from that of Cook and Daniels and the work of Rumbaugh is that we focus in the shared model on use cases, objects, and responsibilities during analysis rather than states and events.
Reference: [Jacobson86] <author> I. </author> <title> Jacobson , Language Support for Changeable Large Real Time Systems. </title> <booktitle> Proc. OOPSLA 86 </booktitle>
Reference-contexts: Aksit and Bergmans consider that The preparatory work in the analysis phase consists of mapping between the real world entities and the entities in the analysis model: objects [Aksit92]. They appear to be in good company, as the three amigos have all espoused to model the real world <ref> [Booch94, Jacobson86, Rumbaugh87, Rumbaugh91] </ref>. Rubin et al discuss modeling a real-time control system, where the Current Problem Space models the state of the real controlled system [Rubin88]. Others endorse modeling the problem domain [Hayes91, Kerth91, Seidewitz87].
Reference: [Jacobson92] <author> I. Jacobson, M. Christerson, P. Jonsson and G. Ostergaard, </author> <title> ObjectOriented Software Engineering, </title> <publisher> Addison-Wesley, </publisher> <year> 1992 </year>
Reference-contexts: These sequence diagrams indicate the objects that were introduced (shown as labels on the top of the vertical lines) and the responsibilities assigned to objects (shown on the labels of arcs inbound to the vertical line. We use three type of objects based on the work of Jacobson <ref> [Jacobson92] </ref>: control objects, interface objects, and entity objects to provide a separation of concerns and robustness to change. Figures 4, 5, and 6 show the analysis-level sequence diagrams for the above three use cases, respectively. <p> The question: Does this concept or action belong in the use case? is answered by the question: Is this concept or action in the shared model? Consider the Manage Teams use case, shown in Figure 1. As described by Jacobson <ref> [Jacobson92] </ref>, user interface sketches can be developed in conjunction with the use case model. One possible user interface sketch is shown in Figure 7. The purpose of the sketch is to help discover what functions are required in the shared model. <p> These problem domain models are abstractions of the real world, and model things external to the system. Goldberg and Rubin, Jacobson et al, and Jordan et al propose conceptual models of various names: concept space [Goldberg95], conceptual picture of the system <ref> [Jacobson92] </ref>, and conceptual model of the system [Jordan94]. These conceptual models (picture) seem to be models of the software. Jacobson et al and Jordan et al are referring to explicit object models of the software, perhaps their respective finished analysis and requirements models. <p> We drive the articulation of the shared model by writing use cases and then discovering objects and their responsibilities based on the work of Wirfs-Brock [Wirfs-Brock90] using three types of objects (interface, control and entity) from Jacobson <ref> [Jacobson92] </ref>. We see the use case model as an early manifestation of the shared model which then drives the discovery of objects, responsibilities, and collaborations, the elaboration of the shared model. <p> For example, Jacobson et al advise us that the analysis model is the basis of the systems structure. In this model, we specify all the logical objects to be included in the system and how these are related and grouped <ref> [Jacobson92] </ref>. Champeaux et al and Vayda et al report the following observations and lessons learned regarding the importance of a solid analysis model: The output of the analysis serves two different purposes. First, it provides a check on the requirements.
Reference: [Jordan94] <author> R. Jordan, R. Smilan and A. Wilkinson, </author> <title> Streamlining the Project Cycle With Object-Oriented Requirements, </title> <booktitle> Proc. OOPSLA '94 </booktitle>
Reference-contexts: no real problem. [Vayda95] And Booch observes that the boundaries between analysis and design are fuzzy, although the focus of each is quite distinct. [Booch94] Some practitioners appear to minimize or elide analysis, often by moving analysis-level reasoning earlier (into use cases) and/or later (into design) in the development process <ref> [e.g., Firesmith91, Jordan94, Wirfs-Brock90] </ref>. Firesmith states, I do not make a strong barrier between analysis and logical design. I make a stronger barrier between logical design and implementation design. Booch changed the name of [Booch94] to avoid this appearance. <p> The important thing is that system engineers and developers have the same model. This eliminates the paradigm shift and is the overriding factor in easing the transition from requirements to development. On the other hand the common model does help developers think through alternative designs while reviewing requirements. <ref> [Jordan94] </ref> The shared model is a mental model, an abstraction based on the collective perceptions of the users and domain experts, and their expectations for the systems operation. <p> These problem domain models are abstractions of the real world, and model things external to the system. Goldberg and Rubin, Jacobson et al, and Jordan et al propose conceptual models of various names: concept space [Goldberg95], conceptual picture of the system [Jacobson92], and conceptual model of the system <ref> [Jordan94] </ref>. These conceptual models (picture) seem to be models of the software. Jacobson et al and Jordan et al are referring to explicit object models of the software, perhaps their respective finished analysis and requirements models.
Reference: [Kerth91] <author> N. Kerth, </author> <title> A Structured Approach to ObjectOriented Design, </title> <booktitle> OOPSLA '91 Addendum to the Proceedings </booktitle>
Reference-contexts: Rubin et al discuss modeling a real-time control system, where the Current Problem Space models the state of the real controlled system [Rubin88]. Others endorse modeling the problem domain <ref> [Hayes91, Kerth91, Seidewitz87] </ref>. These problem domain models are abstractions of the real world, and model things external to the system.
Reference: [Leathers90] <author> B. Leathers, </author> <title> cited by K.C. Burgess Yakemovic, Workshop: The Bottom Line: Using OOP in a Commercial Environment, </title> <booktitle> OOPSLA '90 Addendum to the Proceedings </booktitle>
Reference-contexts: be validated, and it can only be extracted by interviews with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior [Page89] , essential model [Alabiso88], mental objects [Beech88], mental model <ref> [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] </ref> and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90].
Reference: [Page89] <author> T. Page, Jr., S. Berson, W. Cheng and R. Muntz, </author> <title> An ObjectOriented Modeling Environment, </title> <booktitle> Proc. OOPSLA '89 </booktitle>
Reference-contexts: As such, the shared model cannot be validated, and it can only be extracted by interviews with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior <ref> [Page89] </ref> , essential model [Alabiso88], mental objects [Beech88], mental model [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90].
Reference: [Rubin88] <author> K.Rubin, P. Jones, C. Mitchell and T. Goldstein, </author> <title> A Smalltalk Implementation of an Intelligent Operator's Associate, </title> <booktitle> Proc. OOPSLA '88 </booktitle>
Reference-contexts: They appear to be in good company, as the three amigos have all espoused to model the real world [Booch94, Jacobson86, Rumbaugh87, Rumbaugh91]. Rubin et al discuss modeling a real-time control system, where the Current Problem Space models the state of the real controlled system <ref> [Rubin88] </ref>. Others endorse modeling the problem domain [Hayes91, Kerth91, Seidewitz87]. These problem domain models are abstractions of the real world, and model things external to the system.
Reference: [Rubin92] <author> K. Rubin and A. Goldberg, </author> <title> "Object behavioral analysis", </title> <journal> CACM, </journal> <volume> 35 (9), </volume> <pages> 48-62, </pages> <year> 1992 </year>
Reference: [Rumbaugh87] <author> J. Rumbaugh, </author> <title> Relations as Semantic Constructs in an ObjectOriented Language, </title> <booktitle> Proc. OOPSLA 87 </booktitle>
Reference-contexts: Aksit and Bergmans consider that The preparatory work in the analysis phase consists of mapping between the real world entities and the entities in the analysis model: objects [Aksit92]. They appear to be in good company, as the three amigos have all espoused to model the real world <ref> [Booch94, Jacobson86, Rumbaugh87, Rumbaugh91] </ref>. Rubin et al discuss modeling a real-time control system, where the Current Problem Space models the state of the real controlled system [Rubin88]. Others endorse modeling the problem domain [Hayes91, Kerth91, Seidewitz87].
Reference: [Rumbaugh91] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy and W. Lorensen, </author> <title> Object-Oriented Modeling and Design, </title> <publisher> Prentice Hall, </publisher> <year> 1991 </year>
Reference-contexts: Aksit and Bergmans consider that The preparatory work in the analysis phase consists of mapping between the real world entities and the entities in the analysis model: objects [Aksit92]. They appear to be in good company, as the three amigos have all espoused to model the real world <ref> [Booch94, Jacobson86, Rumbaugh87, Rumbaugh91] </ref>. Rubin et al discuss modeling a real-time control system, where the Current Problem Space models the state of the real controlled system [Rubin88]. Others endorse modeling the problem domain [Hayes91, Kerth91, Seidewitz87].
Reference: [Seidewitz87] <author> E. Seidewitz, </author> <title> ObjectOriented Programming in Smalltalk and Ada, </title> <booktitle> Proc. OOPSLA '87 </booktitle>
Reference-contexts: Rubin et al discuss modeling a real-time control system, where the Current Problem Space models the state of the real controlled system [Rubin88]. Others endorse modeling the problem domain <ref> [Hayes91, Kerth91, Seidewitz87] </ref>. These problem domain models are abstractions of the real world, and model things external to the system.
Reference: [Spinelli94] <author> A. Spinelli, P. Salvaneschi, M. Cadei and M. Rocca, </author> <title> MI - An Object Oriented Environment For Integration Of Scientific Applications, </title> <booktitle> Proc. OOPSLA '94 </booktitle>
Reference-contexts: Spinelli et al note that a user often has a model of a system which is different from the real physical structure of the software <ref> [Spinelli94] </ref>. Hartman et al add, The goal of Information Design is to create an accurate mapping between the information modeled by the system and the user's mental model [Hartman94]. There is popular folklore that an objectoriented approach makes it easier to model the real world.
Reference: [Tonge97] <author> F. Tonge, </author> <title> private communication, </title> <month> June </month> <year> 1997 </year>
Reference-contexts: It is through the statement and refinement of the purpose that we discover reuse. If there is an object or responsibility for which there is disagreement about its purpose, then this raises a red flag <ref> [Tonge97] </ref>. The users and the developers must be clear about the purpose of each object and each responsibility. A disagreement may signal that the current object embodies two different objects, in fact.
Reference: [Vayda95] <author> T. Vayda, </author> <title> Lessons From the Battlefield, </title> <booktitle> Proc. OOPSLA '95 </booktitle>
Reference-contexts: For example, Vayda states that the dividing line between requirements modeling and early analysis is often hard to distinguish, but this causes no real problem. <ref> [Vayda95] </ref> And Booch observes that the boundaries between analysis and design are fuzzy, although the focus of each is quite distinct. [Booch94] Some practitioners appear to minimize or elide analysis, often by moving analysis-level reasoning earlier (into use cases) and/or later (into design) in the development process [e.g., Firesmith91, Jordan94, Wirfs-Brock90]. <p> Analysts new to OT often feel that they must have a perfect analysis model before proceeding on to design and implementation. This ailment has been referred to as analysis paralysis <ref> [Vayda95] </ref>. <p> The most important lesson is to insist on a distinct analysis phase and to keep the analysis work products relatively free of implementation aspects. This combined with the other points should allow a project to get the most fundamental development product, the analysis model, into good shape <ref> [Vayda95] </ref>. and In retrospect, it is now clear that a primary benefit of using the OO approach was the way that some of the analysis models become a powerful framework upon which the design was built [Champeaux92b]. 6.
Reference: [Wirfs-Brock90] <author> R. Wirfs-Brock, B. Wilkerson and L. Wiener, </author> <title> Designing ObjectOriented Software, </title> <publisher> Prentice Hall, </publisher> <year> 1990 </year>
Reference-contexts: The analysis-level object model is the first object model. We translate the user-visible functions, as described in the use case model, into responsibilities of objects. A use-case-driven approach to CRC, much like <ref> [Wirfs-Brock90] </ref>, results in the initial choice of objects. Responsibilities are assigned to objects precisely because they are needed to support the use cases. This provides a direct connection between the use case model and the actual objects that appear in the software system. <p> But during analysis, the second or subsequent time that an object or responsibility is used represents one step towards a cleaner object model. We describe the analysis-level object model using class names and responsibility names, expressed in natural language <ref> [Wirfs-Brock90] </ref>. We also document the purpose of each class and the purpose of each responsibility. It is through the statement of purpose that we have the chance to identify opportunities for reuse. <p> no real problem. [Vayda95] And Booch observes that the boundaries between analysis and design are fuzzy, although the focus of each is quite distinct. [Booch94] Some practitioners appear to minimize or elide analysis, often by moving analysis-level reasoning earlier (into use cases) and/or later (into design) in the development process <ref> [e.g., Firesmith91, Jordan94, Wirfs-Brock90] </ref>. Firesmith states, I do not make a strong barrier between analysis and logical design. I make a stronger barrier between logical design and implementation design. Booch changed the name of [Booch94] to avoid this appearance. <p> be validated, and it can only be extracted by interviews with multiple users, who possess their individual views of the shared model. 5.3 Mental Models Such mental abstractions are common, and go by many names, such as the: essential behavior [Page89] , essential model [Alabiso88], mental objects [Beech88], mental model <ref> [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] </ref> and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features [Wirfs-Brock90]. <p> many names, such as the: essential behavior [Page89] , essential model [Alabiso88], mental objects [Beech88], mental model [Bos89, Fraser92, Harrison93, Hartman94, Horn92, Leathers90, Wirfs-Brock90] and concept space [Goldberg95] Wirfs-Brock et al state that mental models abstract out those features of a system required for our understanding, while ignoring irrelevant features <ref> [Wirfs-Brock90] </ref>. Hartman et al observe that the goal of Information Design is to create an accurate mapping between the information modeled by the system and the user's mental model [Hartman94]. The shared model aligns with these desirable behaviors. <p> We drive the articulation of the shared model by writing use cases and then discovering objects and their responsibilities based on the work of Wirfs-Brock <ref> [Wirfs-Brock90] </ref> using three types of objects (interface, control and entity) from Jacobson [Jacobson92]. We see the use case model as an early manifestation of the shared model which then drives the discovery of objects, responsibilities, and collaborations, the elaboration of the shared model.
References-found: 37

