URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/dac95.SPR.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/~vigyan/publications/index.html
Root-URL: http://www.cs.berkeley.edu
Title: The Validity of Retiming Sequential Circuits  
Author: Vigyan Singhal Carl Pixley Richard L. Rudell Robert K. Brayton 
Abstract: Retiming has been proposed as an optimization step for sequential circuits represented at the net-list level. Retiming moves the latches across the logic gates and in doing so changes the number of latches and the longest path delay between the latches. In this paper we show by example that retiming a design may lead to differing simulation results when the re-timed design replaces the original design. We also show, by example, that retiming may not preserve the testability of a sequential test sequence for a given stuck-at fault as measured by a simulator. We identify the cause of the problem as forward re-timing moves across multiple-fanout points in the circuit. The primary contribution of this paper is to show that, while an accurate logic simulation may distinguish the retimed circuit from the original circuit, a conservative three-valued simulator cannot do so. Hence, retiming is a safe operation when used in a design methodology based on conservative three-valued simulation starting each latch with the unknown value. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.-T. Cheng. </author> <title> Redundancy Removal for Sequential Circuits Without Reset States. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 12(1) </volume> <pages> 13-24, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: One future area we wish to explore further is the notion of three-valued safe replacement. This is similar to the notion of equivalence used by Cheng <ref> [1] </ref> for synthesis via redundancy removal. We have shown in this paper that if we replace the strict notion of equivalent output sequences with the weaker notion of equivalent output from a conservative three-valued simulator, that retiming can be viewed as an operation preserving safe replaceability.
Reference: [2] <author> E. B. Eichelberger. </author> <title> Hazard Detection in Combinational and Sequential Circuits. </title> <journal> IBM J. Res. and Devep., </journal> <pages> pages 90-99, </pages> <month> March </month> <year> 1965. </year>
Reference-contexts: Simulation is an important component of the IC design verification process. The most popular and fastest way of simulating gate-level designs is three-valued simulation [3]. It is assumed that all latches power up as X, meaning that the value is undetermined. Three-valued logic is well-known for gate-level elements <ref> [2] </ref>. Three-valued simulation results give the output sequences for a given input sequence.
Reference: [3] <author> J. S. Jephson, R. P. McQuarrie, and R. E. Vogelsberg. </author> <title> A Three-Value Computer Design Verification System. </title> <journal> IBM J. Res. and Devep., </journal> <pages> pages 178-188, </pages> <year> 1969. </year>
Reference-contexts: We show that this is a general phenomena relating three valued simulation and retiming. Simulation is an important component of the IC design verification process. The most popular and fastest way of simulating gate-level designs is three-valued simulation <ref> [3] </ref>. It is assumed that all latches power up as X, meaning that the value is undetermined. Three-valued logic is well-known for gate-level elements [2]. Three-valued simulation results give the output sequences for a given input sequence.
Reference: [4] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing Synchronous Systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1) </volume> <pages> 41-67, </pages> <month> Spring </month> <year> 1983. </year>
Reference-contexts: Replacement requires that the environment be able to drive a replacement machine into its steady-state behavior (i.e., reset the machine) with the same sequence used to reset the original machine. Retiming was first formulated by Leiserson and Saxe <ref> [4] </ref> in the context of systolic systems. When applied to digital circuits, retiming is an optimization step which moves the latches across the logic gates and in doing so changes the number of latches and the longest path delay between the latches. <p> Thus, 0 1 is no longer a test sequence for the retimed design D. 3 Background 3.1 Leiserson-Saxe Retiming Model Leiserson and Saxe introduced retiming <ref> [4] </ref> through a graph-theoretic model. A design is modeled as a finite edge-weighted directed graph G = (V; E). Each vertex in V represents either a gate in the design, a primary input or output, or a special dummy node called the host. <p> Thus, given s 1 , for any input sequence , there is a state in D (namely s 0 ) such that s 1 and s 0 output the same sequence on . 3.4 Delayed Designs We need the notion of delayed designs (similar to sufficiently old configuration of <ref> [4] </ref>) to show the results in our paper. Given a design D, an n-cycle-delayed design (denoted by D n ) is the set of states of D if we allow arbitrary inputs to run through design D for n clock cycles after power-up. <p> The rest of the proof is identical to that of case (ii) in Proposition 2. Propositions 2 and 3 lead to the following corollary, which is the primary correctness result proven by Leiserson and Saxe <ref> [4] </ref> (notice that our proof is much simpler than the 4-page proof given in [4]). Corollary 4 (Retiming Lemma in [4]) If C is obtained from D using an arbitrary sequence of retiming moves, then C n D, for some positive finite integer n. <p> The rest of the proof is identical to that of case (ii) in Proposition 2. Propositions 2 and 3 lead to the following corollary, which is the primary correctness result proven by Leiserson and Saxe <ref> [4] </ref> (notice that our proof is much simpler than the 4-page proof given in [4]). Corollary 4 (Retiming Lemma in [4]) If C is obtained from D using an arbitrary sequence of retiming moves, then C n D, for some positive finite integer n. The retiming lemma requires us to delay using the retimed design for n clock cycles after power-up. <p> Propositions 2 and 3 lead to the following corollary, which is the primary correctness result proven by Leiserson and Saxe <ref> [4] </ref> (notice that our proof is much simpler than the 4-page proof given in [4]). Corollary 4 (Retiming Lemma in [4]) If C is obtained from D using an arbitrary sequence of retiming moves, then C n D, for some positive finite integer n. The retiming lemma requires us to delay using the retimed design for n clock cycles after power-up. <p> Corollary 5 If C is obtained from D using an arbitrary sequence of retiming moves, none of which is a forward retiming move across a non-justifiable element, then C D. In the proof of Lemma 1 in <ref> [4] </ref>, the integer n was shown to be the equal to max v2V (lag (v)), i.e. the maximum number of forward retiming moves across any combinational element in the circuit. 4 We can tighten this result to make it independent of the number of forward retiming moves across any non-justifiable element.
Reference: [5] <author> T. E. Marchok, A. El-Maleh, W. Maly, and J. Rajski. </author> <title> Test Set Preservation under Retiming Transformation. </title> <type> Technical Report CMUCAD-94-23, </type> <institution> Carnegie Mellon University, </institution> <year> 1994. </year> <booktitle> Presented at Intl. Test Synthesis Workshop, </booktitle> <address> Santa Barbara, CA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Next we show that test sets can also be affected similarly, contradicting the result of Marchok et al. <ref> [5] </ref>: (Theorem 1 in [5]) The retiming transformation preserves testability with respect to a single stuck-at-fault test set. This theorem implies that if a test sequence uncovers a given stuck-at-fault in a circuit, then the same sequence can detects the same faults in a retimed version of the circuit. <p> Next we show that test sets can also be affected similarly, contradicting the result of Marchok et al. <ref> [5] </ref>: (Theorem 1 in [5]) The retiming transformation preserves testability with respect to a single stuck-at-fault test set. This theorem implies that if a test sequence uncovers a given stuck-at-fault in a circuit, then the same sequence can detects the same faults in a retimed version of the circuit.
Reference: [6] <author> C. Pixley. </author> <title> A Theory and Implementation of Sequential Hardware Equivalence. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 11(12) </volume> <pages> 1469-1494, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: A weaker condition, which is both necessary and sufficient for replacement was described 2 by Pixley et al. and is called safe-replacement [7]. Pixley introduced Sequential Hardware Equivalence (SHE) <ref> [6] </ref> to consider the equivalence of digital circuits under the assumption that digital circuits must operate correctly starting from a random power-up state. Consider the state transition graph of a digital circuit, which, by his definition, is a completely-specified machine with 2 n states given n latches.
Reference: [7] <author> C. Pixley, V. Singhal, A. Aziz, and R. K. Brayton. </author> <title> Multilevel Synthesis for Safe Replaceability. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 442-449, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: A weaker condition, which is both necessary and sufficient for replacement was described 2 by Pixley et al. and is called safe-replacement <ref> [7] </ref>. Pixley introduced Sequential Hardware Equivalence (SHE) [6] to consider the equivalence of digital circuits under the assumption that digital circuits must operate correctly starting from a random power-up state. <p> This has sparked further interest in exploring the application of retiming as a general optimization step during logic synthesis. Prior literature has assumed that retiming can be directly applied to sequential circuit optimization. However, it has been recently pointed out by Pixley et al. <ref> [7] </ref> that retiming does not satisfy the safe-replacement condition. Note that the theorem of Leiserson and Saxe on the validity of retiming is not in doubt. <p> We view retiming starting from an initial circuit and applying a sequence of these atomic moves to result in the retimed circuit. 3.3 Notions of Replaceability Here we discuss the various notions of design replacement that are relevant to our work. The notion of safe replaceability was presented in <ref> [7] </ref>. <p> It has been shown in <ref> [7] </ref>, that if C D, there may be a state in C which is not equivalent to any state in D. Thus, is a strictly stronger notion than . In the following sections we will prove results which characterize the conditions under which the relation holds between two designs.
Reference: [8] <author> I. Pomeranz and S. M. Reddy. </author> <title> Classification of Faults in Synchronous Sequential Circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 42(9) </volume> <pages> 1066-1077, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Note that the theorem of Leiserson and Saxe on the validity of retiming is not in doubt. They simply made the assumption that the environment of the circuit could be modified to wait a fixed number of cycles 2 In the context of fault detection, Pomeranz and Reddy <ref> [8] </ref> have presented an equivalent condition which is used to identify sequentially redundant faults. (dependent upon the retiming) before applying its inputs. It is this requirement which violates safe-replacement and casts a doubt on whether retiming is valid as part of a synthesis methodology for net-list level sequential circuits.
Reference: [9] <author> N. Shenoy and R. Rudell. </author> <title> Efficient Implementation of Retiming. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 226-233, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: In this manner, the number of latches can be reduced, and/or the cycle time of the circuit can be improved. Recent results by Shenoy and Rudell <ref> [9] </ref> have improved the efficiency of retiming so that circuits up to 50,000 equivalent gates can be retimed for minimum area under a delay constraint. This has sparked further interest in exploring the application of retiming as a general optimization step during logic synthesis.
Reference: [10] <author> H. J. Touati and R. K. Brayton. </author> <title> Computing the Initial States of Retimed Circuits. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 12(1) </volume> <pages> 157-162, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: As a final comment, note that our model of a synchronous circuit does not require a latch to have a set or reset line and does not require any notion of the initial state of the circuit. Hence, we avoid the problem pursued by Touati and Brayton <ref> [10] </ref> in retiming the initial state. 2 Retiming Violates Safe-Replacement 2.1 Simulation Example Here we show how a simple retiming move might change the behavior of a design. Consider the circuit D and the retimed version C in Figure 1. The STGs for these circuits are shown in Figure 2.
References-found: 10

