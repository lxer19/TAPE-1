URL: http://www.cs.umass.edu/~ramesh/Pub/LeightonMS95.ps
Refering-URL: http://www.cs.umass.edu/~ramesh/Pub/LeightonMS95.html
Root-URL: 
Email: ftl@math.mit.edu  bmm@cs.cmu.edu  ramesh@cs.umass.edu  
Title: On the Fault Tolerance of Some Popular Bounded-Degree Networks  
Author: F. Thomson Leighton Bruce M. Maggs Ramesh K. Sitaraman 
Address: Cambridge, MA 02139  Pittsburgh, PA 15213  Amherst, MA 01003  
Affiliation: Mathematics Department, and Laboratory for Computer Science Massachusetts Institute of Technology  School of Computer Science Carnegie Mellon University  Dept. of Computer Science University of Massachusetts  
Abstract: In this paper, we analyze the fault tolerance of several bounded-degree networks that are commonly used for parallel computation. Among other things, we show that an N -node butterfly network containing N 1* worst-case faults (for any constant * &gt; 0) can emulate a fault-free butterfly of the same size with only constant slowdown. The same result is proved for the shu*e-exchange network. Hence, these networks become the first connected bounded-degree networks known to be able to sustain more than a constant number of worst-case faults without suffering more than a constant-factor slowdown in performance. We also show that an N -node butterfly whose nodes fail with some constant probability p can emulate a fault-free network of the same type and size with a slowdown of 2 O(log fl N) . These emulation schemes combine the technique of redundant computation with new algorithms for routing packets around faults in hypercubic networks. We also present techniques for tolerating faults that do not rely on redundant computation. These techniques tolerate fewer faults but are more widely applicable because they can be used with other networks such as binary trees and meshes of trees. 
Abstract-found: 1
Intro-found: 1
Reference: [AAB + 92] <author> M. Ajtai, N. Alon, J. Bruck, R. Cypher, C. T. Ho, M. Naor, and E. Szemeredi. </author> <title> Fault tolerant graphs, perfect hash functions and 43 disjoint paths. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 693-702, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: In particular, [AL91, Ann89, BCLR92, CMS93, HLN87, HLN89, KKL + 90, LSGH87, Rab89, Tam92b] show how to reconfigure a network with faults so that it can emulate a fault-free network of the same type and size. A fault-tolerant area-universal network is presented in [Tol92]. References <ref> [AAB + 92, BCH91, BCH93, DH90, DH91] </ref> show how to design a network H that contains G as a subnetwork even if H contains some faults. Algorithms for routing messages around faults appear in [AS82, ALM90, AB91, CMS95, HLN89, KKL + 90, LM92, Lin92, Lyu90, OT71, PL92, Rab89, SR80].
Reference: [AB91] <author> Y. Aumann and M. Ben-Or. </author> <title> Asymptotically optimal PRAM emulation on faulty hypercubes. </title> <booktitle> In Proceedings of the 32nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 440-457. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1991. </year>
Reference: [Aie92] <author> W. A. Aiello, </author> <month> July </month> <year> 1992. </year> <type> Personal communication. </type>
Reference-contexts: Proof: The proof follows from Theorems 2.1.2 and 2.2.1. The results of this subsection can also be shown by using the fact that the butterfly and the mesh of trees can be expressed as the Layered Cross Product [EL92] of two complete binary trees (or variations thereof) <ref> [Aie92] </ref>, and proving a theorem analogous to Theorem 2.2.1 for Layered Cross Product graphs. 14 2.3 Limitations of level-preserving embeddings We do not know whether Theorems 2.1.2, 2.2.2, and 2.2.3 can be improved if the level-preserving constraint is removed.
Reference: [AL91] <author> W. Aiello and T. Leighton. </author> <title> Coding theory, hypercube embed-dings, and fault tolerance. </title> <booktitle> In Proceedings of the 3rd Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 125-136, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: array of the same size containing more than a constant number of worst-case faults must have more than constant load, congestion, or dilation [GE84, KKL + 90, LL85], and 2. the N -node hypercube can be reconfigured around log O (1) N worst-case faults with constant load, congestion, and dilation <ref> [AL91, BCS90] </ref>. The embeddings that we use in Section 2 are level-preserving, i.e., nodes in a particular level of the fault-free network are mapped to nodes on the same level of the faulty network. <p> with N 1* worst-case faults can emulate T steps of any normal algorithm [Lei92] in O (T + log N ) time. (The set of normal algorithms include FFT, bitonic sort, and other important ascend-descend algorithms.) Previously, such results were known only for hypercubes containing log O (1) N faults <ref> [AL91, BCS90, BCS92] </ref>. Whether or not an N -node hypercube can tolerate more than log O (1) N faults with constant slowdown for general computations remains an important unresolved question.
Reference: [ALM90] <author> S. Arora, T. Leighton, and B. Maggs. </author> <title> On-line algorithms for path selection in a non-blocking network. </title> <booktitle> In Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 149-158, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The ability of the butterfly to withstand faults in this context is important because butterflies are often used solely for their routing abilities. Previously, it was known that expander-based multibutterfly networks can tolerate large numbers of worst-case faults without losing their routing powers <ref> [ALM90, LM92] </ref>, but no such results were known for butterflies or other hypercubic networks. A corollary of this result is that an N -input butterfly with N=12 worst-case faults can support an O (log N )-step randomized routing algorithm for a majority of its nodes.
Reference: [Ann89] <author> F. Annexstein. </author> <title> Fault tolerance in hypercube-derivative networks. </title> <booktitle> In Proceedings of the 1989 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 179-198, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Whether or not this result can be improved remains an interesting open question. Until recently, no results along these lines were known for the butterfly (unless routing is allowed through faulty nodes <ref> [Ann89] </ref>, which simplifies matters substantially). Tamaki [Tam92a] has recently discovered an emulation scheme with slowdown O ((log log N ) 8:2 ).
Reference: [AS82] <author> G. B. Adams, III and H. J. Siegel. </author> <title> The extra stage cube: A fault-tolerant interconnection network for supersystems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(5):443-454, </volume> <month> May </month> <year> 1982. </year>
Reference: [AU90] <author> S. Assaf and E. Upfal. </author> <title> Fault-tolerant sorting network. </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 275-284, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Algorithms for routing messages around faults appear in [AS82, ALM90, AB91, CMS95, HLN89, KKL + 90, LM92, Lin92, Lyu90, OT71, PL92, Rab89, SR80]. The fault-tolerance of sorting networks is studied in <ref> [AU90, LMP91] </ref>. Finally, [BCS90, WC92, WCM91] show how to perform certain computations in hypercubes containing faults. 1.5 Network definitions In this section, we review the structure of some of the networks that we study in this paper.
Reference: [BCH91] <author> J. Bruck, R. Cypher, and C.-T. Ho. </author> <title> Fault-tolerant meshes with minimal numbers of spares. </title> <booktitle> In Proceedings of the 3rd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 288-295, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: In particular, [AL91, Ann89, BCLR92, CMS93, HLN87, HLN89, KKL + 90, LSGH87, Rab89, Tam92b] show how to reconfigure a network with faults so that it can emulate a fault-free network of the same type and size. A fault-tolerant area-universal network is presented in [Tol92]. References <ref> [AAB + 92, BCH91, BCH93, DH90, DH91] </ref> show how to design a network H that contains G as a subnetwork even if H contains some faults. Algorithms for routing messages around faults appear in [AS82, ALM90, AB91, CMS95, HLN89, KKL + 90, LM92, Lin92, Lyu90, OT71, PL92, Rab89, SR80].
Reference: [BCH93] <author> J. Bruck, R. Cypher, and C.-T. Ho. </author> <title> Fault-tolerant meshes with small degree. </title> <booktitle> In Proceedings of the 5th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 1-10, </pages> <month> June </month> <year> 1993. </year> <month> 44 </month>
Reference-contexts: In particular, [AL91, Ann89, BCLR92, CMS93, HLN87, HLN89, KKL + 90, LSGH87, Rab89, Tam92b] show how to reconfigure a network with faults so that it can emulate a fault-free network of the same type and size. A fault-tolerant area-universal network is presented in [Tol92]. References <ref> [AAB + 92, BCH91, BCH93, DH90, DH91] </ref> show how to design a network H that contains G as a subnetwork even if H contains some faults. Algorithms for routing messages around faults appear in [AS82, ALM90, AB91, CMS95, HLN89, KKL + 90, LM92, Lin92, Lyu90, OT71, PL92, Rab89, SR80].
Reference: [BCLR92] <author> S. N. Bhatt, F. R. K. Chung, F. T. Leighton, and A. L. Rosen--berg. </author> <title> Tolerating faults in synchronization networks. </title> <type> Technical Report 92-14, </type> <institution> University of Massachusetts, </institution> <address> Amherst, MA, </address> <month> April </month> <year> 1992. </year>
Reference: [BCS90] <author> J. Bruck, R. Cypher, and D. Soroker. </author> <title> Running algorithms efficiently on faulty hypercubes. </title> <booktitle> In Proceedings of the 2nd Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 37-44, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: array of the same size containing more than a constant number of worst-case faults must have more than constant load, congestion, or dilation [GE84, KKL + 90, LL85], and 2. the N -node hypercube can be reconfigured around log O (1) N worst-case faults with constant load, congestion, and dilation <ref> [AL91, BCS90] </ref>. The embeddings that we use in Section 2 are level-preserving, i.e., nodes in a particular level of the fault-free network are mapped to nodes on the same level of the faulty network. <p> with N 1* worst-case faults can emulate T steps of any normal algorithm [Lei92] in O (T + log N ) time. (The set of normal algorithms include FFT, bitonic sort, and other important ascend-descend algorithms.) Previously, such results were known only for hypercubes containing log O (1) N faults <ref> [AL91, BCS90, BCS92] </ref>. Whether or not an N -node hypercube can tolerate more than log O (1) N faults with constant slowdown for general computations remains an important unresolved question. <p> Algorithms for routing messages around faults appear in [AS82, ALM90, AB91, CMS95, HLN89, KKL + 90, LM92, Lin92, Lyu90, OT71, PL92, Rab89, SR80]. The fault-tolerance of sorting networks is studied in [AU90, LMP91]. Finally, <ref> [BCS90, WC92, WCM91] </ref> show how to perform certain computations in hypercubes containing faults. 1.5 Network definitions In this section, we review the structure of some of the networks that we study in this paper. In all of these networks, the edges are assumed to be undirected (or bidirectional).
Reference: [BCS92] <author> J. Bruck, R. Cypher, and D. Soroker. </author> <title> Tolerating faults in hyper-cubes using subcube partitioning. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(5) </volume> <pages> 599-605, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: with N 1* worst-case faults can emulate T steps of any normal algorithm [Lei92] in O (T + log N ) time. (The set of normal algorithms include FFT, bitonic sort, and other important ascend-descend algorithms.) Previously, such results were known only for hypercubes containing log O (1) N faults <ref> [AL91, BCS90, BCS92] </ref>. Whether or not an N -node hypercube can tolerate more than log O (1) N faults with constant slowdown for general computations remains an important unresolved question. <p> The class of algorithms in which every node of the hypercube uses exactly one edge for communication at every time step and all of the edges used in a time step belong to the same dimension of the hypercube are called leveled algorithms (also known as regular algorithms <ref> [BCS92] </ref>). A useful subclass of leveled algorithms are normal algorithms. A normal algorithm has the additional restriction that the dimensions used in consecutive time steps are consecutive. Many algorithms such including bitonic sort, FFT, and tree-based algorithms like branch-and-bound can be implemented on the hypercube as normal algorithms [Lei92].
Reference: [CMS93] <author> R. Cole, B. Maggs, and R. Sitaraman. </author> <title> Multi-scale self-simulation: A technique for reconfiguring arrays with faults. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 561-572, </pages> <month> May </month> <year> 1993. </year>
Reference: [CMS95] <author> R. Cole, B. Maggs, and R. Sitaraman. </author> <title> Routing on butterfly networks with random faults. </title> <booktitle> In Proceedings of the 36th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 558-570, </pages> <month> October </month> <year> 1995. </year>
Reference: [DH90] <author> S. Dutt and J. P. Hayes. </author> <title> On designing and reconfiguring k-fault-tolerant tree architectures. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-39(4):490-503, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: In particular, [AL91, Ann89, BCLR92, CMS93, HLN87, HLN89, KKL + 90, LSGH87, Rab89, Tam92b] show how to reconfigure a network with faults so that it can emulate a fault-free network of the same type and size. A fault-tolerant area-universal network is presented in [Tol92]. References <ref> [AAB + 92, BCH91, BCH93, DH90, DH91] </ref> show how to design a network H that contains G as a subnetwork even if H contains some faults. Algorithms for routing messages around faults appear in [AS82, ALM90, AB91, CMS95, HLN89, KKL + 90, LM92, Lin92, Lyu90, OT71, PL92, Rab89, SR80].
Reference: [DH91] <author> S. Dutt and J. P. Hayes. </author> <title> Designing fault-tolerant systems using automorphisms. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 12 </volume> <pages> 249-268, </pages> <year> 1991. </year>
Reference-contexts: In particular, [AL91, Ann89, BCLR92, CMS93, HLN87, HLN89, KKL + 90, LSGH87, Rab89, Tam92b] show how to reconfigure a network with faults so that it can emulate a fault-free network of the same type and size. A fault-tolerant area-universal network is presented in [Tol92]. References <ref> [AAB + 92, BCH91, BCH93, DH90, DH91] </ref> show how to design a network H that contains G as a subnetwork even if H contains some faults. Algorithms for routing messages around faults appear in [AS82, ALM90, AB91, CMS95, HLN89, KKL + 90, LM92, Lin92, Lyu90, OT71, PL92, Rab89, SR80].
Reference: [EL92] <author> S. Even and A. Litman. </author> <title> Layered Cross Product a technique to construct interconnection networks. </title> <booktitle> In Proceedings of the 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 60-69, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Proof: The proof follows from Theorems 2.1.2 and 2.2.1. The results of this subsection can also be shown by using the fact that the butterfly and the mesh of trees can be expressed as the Layered Cross Product <ref> [EL92] </ref> of two complete binary trees (or variations thereof) [Aie92], and proving a theorem analogous to Theorem 2.2.1 for Layered Cross Product graphs. 14 2.3 Limitations of level-preserving embeddings We do not know whether Theorems 2.1.2, 2.2.2, and 2.2.3 can be improved if the level-preserving constraint is removed.
Reference: [GE84] <author> J. W. Greene and A. El Gamal. </author> <title> Configuration of VLSI arrays in the presence of defects. </title> <journal> Journal of the ACM, </journal> <volume> 31(4) </volume> <pages> 694-717, </pages> <month> October </month> <year> 1984. </year> <month> 45 </month>
Reference-contexts: Indeed, it was only known that 1. any embedding of an N -node (2 or 3-dimensional) array into an array of the same size containing more than a constant number of worst-case faults must have more than constant load, congestion, or dilation <ref> [GE84, KKL + 90, LL85] </ref>, and 2. the N -node hypercube can be reconfigured around log O (1) N worst-case faults with constant load, congestion, and dilation [AL91, BCS90].
Reference: [GHR90] <author> D. S. Greenberg, L. S. Heath, and A. L. Rosenberg. </author> <title> Optimal em--beddings of butterfly-like graphs in the hypercube. </title> <journal> Mathematical Systems Theory, </journal> <volume> 23 </volume> <pages> 61-77, </pages> <year> 1990. </year>
Reference-contexts: We state a result due to Schwabe [Sch91] to this effect. 37 Lemma 4.4.1 An N -node butterfly can emulate any normal algorithm of an N -node hypercube with constant slowdown. We also require the following well known result concerning the embedding of a butterfly in a hypercube. (See <ref> [GHR90] </ref> for the stronger result that the butterfly is a subgraph of the hypercube). Lemma 4.4.2 An N -node butterfly can be embedded in an N -node hypercube with constant load, congestion, and dilation.
Reference: [GL89] <author> R. I. Greenberg and C. E. Leiserson. </author> <title> Randomized routing on fat-trees. </title> <editor> In Silvio Micali, editor, </editor> <booktitle> Randomness and Computation. Volume 5 of Advances in Computing Research, </booktitle> <pages> pages 345-374. </pages> <publisher> JAI Press, </publisher> <address> Greenwich, CT, </address> <year> 1989. </year>
Reference-contexts: We first consider embedding a complete binary tree in a complete binary tree with faults only at its leaves. This result also holds for fat-trees <ref> [GL89, Lei85] </ref> with faults at the leaves. We use this result to find reconfigurations of butterflies and meshes of trees in which faults may occur at any node. <p> Hence the figure shows a 4-ary fat-tree. This fat-tree was chosen for the figure because a fat-tree of this form has been shown to be area-universal <ref> [Lei85, GL89, LMR94] </ref>. Corollary 2.1.3 is stated for binary fat-trees (i.e., fat-trees in which the root has two subtrees), but similar results can be proven for 4-ary fat-trees.
Reference: [HLN87] <author> J. Hastad, T. Leighton, and M. Newman. </author> <title> Reconfiguring a hypercube in the presence of faults. </title> <booktitle> In Proceedings of the 19th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 274-284, </pages> <month> May </month> <year> 1987. </year>
Reference: [HLN89] <author> J. Hastad, T. Leighton, and M. Newman. </author> <title> Fast computation using faulty hypercubes. </title> <booktitle> In Proceedings of the 21st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 251-263, </pages> <month> May </month> <year> 1989. </year>
Reference: [KKL + 90] <author> C. Kaklamanis, A. R. Karlin, F. T. Leighton, V. Milenkovic, P. Raghavan, S. Rao, C. Thomborson, and A. Tsantilas. </author> <title> Asymptotically tight bounds for computing with faulty arrays of processors. </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 285-296. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1990. </year>
Reference-contexts: Indeed, it was only known that 1. any embedding of an N -node (2 or 3-dimensional) array into an array of the same size containing more than a constant number of worst-case faults must have more than constant load, congestion, or dilation <ref> [GE84, KKL + 90, LL85] </ref>, and 2. the N -node hypercube can be reconfigured around log O (1) N worst-case faults with constant load, congestion, and dilation [AL91, BCS90].
Reference: [KLM + 89] <author> R. Koch, T. Leighton, B. Maggs, S. Rao, and A. Rosenberg. </author> <title> Work-preserving emulations of fixed-connection networks. </title> <booktitle> In Proceedings of the 21st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 227-240, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: This technique was previously used in the context of (fault-free) work-preserving emulations of one network by another <ref> [KLM + 89, Sch90] </ref>. The techniques developed in Section 4 also have applications for hyper-cubes.
Reference: [Lei85] <author> C. E. Leiserson. Fat-trees: </author> <title> universal networks for hardware-efficient supercomputing. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-34(10):892-901, </volume> <month> October </month> <year> 1985. </year>
Reference-contexts: We first consider embedding a complete binary tree in a complete binary tree with faults only at its leaves. This result also holds for fat-trees <ref> [GL89, Lei85] </ref> with faults at the leaves. We use this result to find reconfigurations of butterflies and meshes of trees in which faults may occur at any node. <p> Hence the figure shows a 4-ary fat-tree. This fat-tree was chosen for the figure because a fat-tree of this form has been shown to be area-universal <ref> [Lei85, GL89, LMR94] </ref>. Corollary 2.1.3 is stated for binary fat-trees (i.e., fat-trees in which the root has two subtrees), but similar results can be proven for 4-ary fat-trees.
Reference: [Lei92] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays * Trees * Hypercubes. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference-contexts: The techniques developed in Section 4 also have applications for hyper-cubes. For example, in Section 4.4, we use them to show than an N -node hypercube with N 1* worst-case faults can emulate T steps of any normal algorithm <ref> [Lei92] </ref> in O (T + log N ) time. (The set of normal algorithms include FFT, bitonic sort, and other important ascend-descend algorithms.) Previously, such results were known only for hypercubes containing log O (1) N faults [AL91, BCS90, BCS92]. <p> An N fi N mesh of trees network <ref> [Lei92] </ref>, is formed by first arranging N 2 nodes (but no edges) in a grid of N rows and N columns. Then for each row, an N -leaf complete binary tree, called a row tree, is added. The leaves of the row tree are the nodes of the corresponding row. <p> A useful subclass of leveled algorithms are normal algorithms. A normal algorithm has the additional restriction that the dimensions used in consecutive time steps are consecutive. Many algorithms such including bitonic sort, FFT, and tree-based algorithms like branch-and-bound can be implemented on the hypercube as normal algorithms <ref> [Lei92] </ref>. An additional property of normal algorithms is that they can be emulated efficiently by bounded-degree networks such as the shu*e-exchange network and the butterfly.
Reference: [Lin92] <author> G. Lin. </author> <title> Fault tolerant planar communication networks. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 133-139, </pages> <month> May </month> <year> 1992. </year> <month> 46 </month>
Reference: [LL85] <author> T. Leighton and C. E. Leiserson. </author> <title> Wafer-scale integration of sys-tolic arrays. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-34(5):448-461, </volume> <month> May </month> <year> 1985. </year>
Reference-contexts: Indeed, it was only known that 1. any embedding of an N -node (2 or 3-dimensional) array into an array of the same size containing more than a constant number of worst-case faults must have more than constant load, congestion, or dilation <ref> [GE84, KKL + 90, LL85] </ref>, and 2. the N -node hypercube can be reconfigured around log O (1) N worst-case faults with constant load, congestion, and dilation [AL91, BCS90].
Reference: [LM92] <author> F. T. Leighton and B. M. Maggs. </author> <title> Fast algorithms for routing around faults in multibutterflies and randomly-wired splitter networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(5) </volume> <pages> 578-587, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: The ability of the butterfly to withstand faults in this context is important because butterflies are often used solely for their routing abilities. Previously, it was known that expander-based multibutterfly networks can tolerate large numbers of worst-case faults without losing their routing powers <ref> [ALM90, LM92] </ref>, but no such results were known for butterflies or other hypercubic networks. A corollary of this result is that an N -input butterfly with N=12 worst-case faults can support an O (log N )-step randomized routing algorithm for a majority of its nodes. <p> The same result (without the high probability caveat) was previously shown for the expander-based multibutterfly network <ref> [LM92] </ref>. A special case of this result is that when f N=12 we can route arbitrary permutations between a 19 majority of nodes in the butterfly.
Reference: [LMP91] <author> T. Leighton, Y. Ma, and C. G. Plaxton. </author> <title> Highly fault-tolerant sorting circuits. </title> <booktitle> In Proceedings of the 32nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 458-469. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Algorithms for routing messages around faults appear in [AS82, ALM90, AB91, CMS95, HLN89, KKL + 90, LM92, Lin92, Lyu90, OT71, PL92, Rab89, SR80]. The fault-tolerance of sorting networks is studied in <ref> [AU90, LMP91] </ref>. Finally, [BCS90, WC92, WCM91] show how to perform certain computations in hypercubes containing faults. 1.5 Network definitions In this section, we review the structure of some of the networks that we study in this paper.
Reference: [LMR94] <author> F. T. Leighton, B. M. Maggs, and S. B. Rao. </author> <title> Packet routing and job-shop scheduling in O(congestion + dilation) steps. </title> <journal> Combi-natorica, </journal> <volume> 14(2) </volume> <pages> 167-180, </pages> <year> 1994. </year>
Reference-contexts: The load, congestion, and dilation of the embedding determine the time required to emulate each step of G on H. In particular, Leighton, Maggs, and Rao have shown <ref> [LMR94] </ref> that if there is an embedding of G in H with load l, congestion c, and dilation d, then H can emulate any computation on G with slowdown O (l + c + d). <p> Hence the figure shows a 4-ary fat-tree. This fat-tree was chosen for the figure because a fat-tree of this form has been shown to be area-universal <ref> [Lei85, GL89, LMR94] </ref>. Corollary 2.1.3 is stated for binary fat-trees (i.e., fat-trees in which the root has two subtrees), but similar results can be proven for 4-ary fat-trees.
Reference: [LMRR94] <author> F. T. Leighton, B. M. Maggs, A. G. Ranade, and S. B. Rao. </author> <title> Randomized routing and sorting on fixed-connection networks. </title> <journal> Journal of Algorithms, </journal> <volume> 17(1) </volume> <pages> 157-205, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: In networks such as the butterfly with O (log N ) levels, as long as the (leveled) paths of the packets have congestion O (log N ), a Ranade-type queuing protocol can be used to route the packets in O (log N ) steps using constant-size queues, with high probability <ref> [LMRR94] </ref>. Therefore it is sufficient to derive high probabilty bounds on the congestion of the paths in a routing scheme. Our goal is to identify a large set of "good" nodes in a faulty butterfly between which we can route permutations using an algorithm like Valiant's. <p> The choice is made by consulting a table of all such m 00 . Lemma 3.1.2 shows that, with high probability, these paths have 22 congestion O (log N ). Finally, once the paths are selected, the algorithm for routing on leveled networks <ref> [LMRR94] </ref> can be applied to deliver the packets in O (log N ) steps using constant-size queues, with high probability. 3.1.1 Packet routing without routing tables In the previous algorithm, every good input node m was required to store a table containing information about REACH (m) " REACH (m 0 ) <p> The analysis for Stage 2 is similar. Thus we have shown that if the inductive hypothesis is true, the congestion of any node is O (log N ) with high probability. Therefore, using the algorithm for routing on leveled networks <ref> [LMRR94] </ref> to schedule the packets, the routing completes in C log N steps with probability at least 1 2=AN k+2 , for an appropriate constant C. The ACKs follow the paths of the packets in the reverse direction.
Reference: [LSGH87] <author> M. Livingston, Q. Stout, N. Graham, and F. Hararay. </author> <title> Sub-cube fault-tolerance in hypercubes. </title> <type> Technical Report CRL-TR-12-87, </type> <institution> University of Michigan Computing Research Laboratory, </institution> <month> September </month> <year> 1987. </year>
Reference: [Lyu90] <author> Y.-D. Lyuu. </author> <title> Fast fault-tolerant parallel communication and online maintenance using information dispersal. </title> <booktitle> In Proceedings of the 2nd Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 378-387, </pages> <month> July </month> <year> 1990. </year>
Reference: [MS92] <author> B. M. Maggs and R. K. Sitaraman. </author> <title> Simple algorithms for routing on butterfly networks with bounded queues. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 150-161, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: In particular, we focus on the problem of routing packets between the nodes of the network in a one-to-one fashion. This type of routing is also called permutation routing. (See <ref> [MS92] </ref> for references to permutation routing algorithms). In a permutation routing problem, every node is the origin of at most one packet and the destination of at most one packet.
Reference: [OT71] <author> D. C. Opferman and N. T. Tsao-Wu. </author> <title> On a class of rearrangeable switching networks-part II: Enumeration studies and fault diagnosis. </title> <journal> Bell System Technical Journal, </journal> <volume> 50(5) </volume> <pages> 1601-1618, </pages> <month> May-June </month> <year> 1971. </year> <month> 47 </month>
Reference-contexts: This result substantially improves upon previous algorithms for fault-tolerant circuit switching in Benes networks <ref> [OT71, SR80] </ref> which dealt with a constant number of faults by adding an extra stage to the network. 1.3 Emulations using redundant computation In Section 4, we use the fault-tolerant routing algorithm from Section 3.2 to show that an N -input butterfly with N 1* worst-case faults (for any constant *
Reference: [Pip82] <author> N. Pippenger. </author> <title> Telephone switching networks. </title> <booktitle> In Proceedings of Symposia in Applied Mathematics, </booktitle> <volume> volume 26, </volume> <pages> pages 101-133. </pages> <publisher> American Mathematical Society, </publisher> <year> 1982. </year>
Reference-contexts: The result is a 2-regular N fi N bipartite graph. The second step is to split the edges of this graph into two perfect matchings, M 0 and M 1 . (See <ref> [Pip82] </ref> for a nice proof that such a split is possible.) Next, we pick a binary value for random variable X at random.
Reference: [PL92] <author> N. Pippenger and G. Lin. </author> <title> Fault-tolerant circuit-switching networks. </title> <booktitle> In Proceedings of the 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 229-235, </pages> <month> June </month> <year> 1992. </year>
Reference: [Rab89] <author> M. O. Rabin. </author> <title> Efficient dispersal of information for security, load balancing, and fault tolerance. </title> <journal> Journal of the ACM, </journal> <volume> 36(2), </volume> <month> April </month> <year> 1989. </year>
Reference: [Rag88] <author> P. Raghavan. </author> <title> Probabilistic construction of deterministic algorithms: approximate packing integer programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 37(4) </volume> <pages> 130-143, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: In this section we construct a deterministic algorithm that finds these paths using the technique due to Raghavan <ref> [Rag88] </ref> and Spencer [Spe87] to remove the randomness. Like Waksman's algorithm for finding the switch settings in a fault-free Benes network with N input switches, the algorithm runs in O (N log N ) time.
Reference: [Rag90] <author> P. Raghavan. </author> <title> Lecture notes on randomized algorithms. </title> <type> Research Report RC 15340 (#68237), </type> <institution> IBM Research Division, T.J. Wat-son Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: Therefore the expected number of packets that pass through a node in Stage 1 is at most (2 l (log N + 1))(2 logNl )=(3N=5) = 5 (log N + 1)=3. We can use Chernoff-type bounds <ref> [Rag90] </ref> to show that the number of packets that pass through s in Stage 1 is O (log N ) with probability at least 1 1=2N k , for any constant k. The calculation for a node in Stage 2 is exactly analagous. <p> For ff &gt; 4e, the probability that more than ff p M k log M k nodes fail is at most 2 ff p (for a proof, see <ref> [Rag90] </ref>). Since ff p M k log M k &gt; log (k) N , this probability is at most 2 log (k) N = 1= log (k1) N .
Reference: [Sch90] <author> E. J. Schwabe. </author> <title> On the computational equivalence of hypercube-derived networks. </title> <booktitle> In Proceedings of the 2nd Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 388-397, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: This technique was previously used in the context of (fault-free) work-preserving emulations of one network by another <ref> [KLM + 89, Sch90] </ref>. The techniques developed in Section 4 also have applications for hyper-cubes. <p> Hence, T 0 = 0&lt;iT l i (16=* + 1)T + 4 log N + 1 = O (T + log N ). We can extend these results to the shu*e-exchange network using Schwabe's proof <ref> [Sch90] </ref> that an N -node butterfly can emulate an N -node shu*e exchange network with constant slowdown, and vice versa. 36 Theorem 4.3.3 Any computation on a fault-free N -node shu*e-exchange network G that takes time T can be emulated in O (T + log N ) time by an N <p> Proof: Schwabe <ref> [Sch90] </ref> shows how to emulate any computation of a butterfly on a shu*e-exchange network with constant slowdown and vice versa. First we use Schwabe's result to map the computation of a butterfly B to the faulty shu*e-exchange network H.
Reference: [Sch91] <author> E. J. Schwabe. </author> <title> Efficient Embeddings and Simulations for Hy-percubic Networks. </title> <type> PhD thesis, </type> <institution> Department of Mathematics, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: An additional property of normal algorithms is that they can be emulated efficiently by bounded-degree networks such as the shu*e-exchange network and the butterfly. We state a result due to Schwabe <ref> [Sch91] </ref> to this effect. 37 Lemma 4.4.1 An N -node butterfly can emulate any normal algorithm of an N -node hypercube with constant slowdown.
Reference: [Spe87] <author> J. Spencer. </author> <title> Ten Lectures on the Probabilistic Method. </title> <publisher> SIAM, </publisher> <address> Philadelphia, PA, </address> <year> 1987. </year>
Reference-contexts: In this section we construct a deterministic algorithm that finds these paths using the technique due to Raghavan [Rag88] and Spencer <ref> [Spe87] </ref> to remove the randomness. Like Waksman's algorithm for finding the switch settings in a fault-free Benes network with N input switches, the algorithm runs in O (N log N ) time.
Reference: [SR80] <author> S. Sowrirajan and S. M. Reddy. </author> <title> A design for fault-tolerant full connection networks. </title> <booktitle> In Proceedings of the International Conference on Science and Systems, </booktitle> <pages> pages 536-540, </pages> <month> March </month> <year> 1980. </year>
Reference-contexts: This result substantially improves upon previous algorithms for fault-tolerant circuit switching in Benes networks <ref> [OT71, SR80] </ref> which dealt with a constant number of faults by adding an extra stage to the network. 1.3 Emulations using redundant computation In Section 4, we use the fault-tolerant routing algorithm from Section 3.2 to show that an N -input butterfly with N 1* worst-case faults (for any constant *
Reference: [Tam92a] <author> H. Tamaki. </author> <title> Efficient self-embedding of butterfly networks with random faults. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <month> October </month> <year> 1992. </year> <pages> 533-541. 48 </pages>
Reference-contexts: Whether or not this result can be improved remains an interesting open question. Until recently, no results along these lines were known for the butterfly (unless routing is allowed through faulty nodes [Ann89], which simplifies matters substantially). Tamaki <ref> [Tam92a] </ref> has recently discovered an emulation scheme with slowdown O ((log log N ) 8:2 ). <p> Furthermore, for k = O (log fl N ) the node failure probability, p, is constant, and the slowdown 38 is 2 O (log fl N) . Previously, the most efficient self-emulation scheme known for an N -input butterfly required !(log log N ) slowdown <ref> [Tam92a] </ref>. The proof has the following outline. We begin by showing that the host, H, can emulate another N -input butterfly network B k with constant slowdown.
Reference: [Tam92b] <author> H. Tamaki. </author> <title> Robust bounded-degree networks with small diame-ters. </title> <booktitle> In Proceedings of the 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 247-256, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Tamaki [Tam92a] has recently discovered an emulation scheme with slowdown O ((log log N ) 8:2 ). He also introduced a class of bounded-degree networks called cube-connected arrays <ref> [Tam92b] </ref>, and showed that an N -node network in this class with constant-probability random faults can emulate itself with expected slowdown approximately log log N . (These networks can also tolerate up to log O (1) N worst-case faults with approximately log log N slowdown.) 5 1.4 Additional previous work There
Reference: [Tol92] <author> S. Toledo. </author> <title> Competitive fault-tolerance in area-universal networks. </title> <booktitle> In Proceedings of the 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 236-246, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: In particular, [AL91, Ann89, BCLR92, CMS93, HLN87, HLN89, KKL + 90, LSGH87, Rab89, Tam92b] show how to reconfigure a network with faults so that it can emulate a fault-free network of the same type and size. A fault-tolerant area-universal network is presented in <ref> [Tol92] </ref>. References [AAB + 92, BCH91, BCH93, DH90, DH91] show how to design a network H that contains G as a subnetwork even if H contains some faults.
Reference: [Val82] <author> L. G. Valiant. </author> <title> A scheme for fast parallel communication. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(2) </volume> <pages> 350-361, </pages> <month> May </month> <year> 1982. </year>
Reference-contexts: The embedding has load 4, congestion 4, and dilation 1. We start by describing Valiant's algorithm <ref> [Val82] </ref> for permutation routing on a butterfly without faults.
Reference: [Wak68] <author> A. Waksman. </author> <title> A permutation network. </title> <journal> Journal of the ACM, </journal> <volume> 15(1) </volume> <pages> 159-163, </pages> <month> January </month> <year> 1968. </year>
Reference-contexts: The same is true for paths that end on output edges that share the same output switch. A full permutation consists of a set of 2N input-output pairs to be connected by edge-disjoint paths. The standard algorithm for setting the switches in a Benes network, due to Waksman <ref> [Wak68] </ref>, uses bipartite graph matching to split the set of 2N pairs into two sets of N pairs which are each then routed recursively in one of the smaller sub-Benes networks. We now present Waksman's algorithm with a twist. We call this algorithm RANDSET (for RANDom switch SETting).
Reference: [WC92] <author> A. Wang and R. Cypher. </author> <title> Fault-tolerant embeddings of rings, meshes and tori in hypercubes. </title> <type> Technical Report IBM RJ 8569, </type> <institution> IBM Almaden Research Center, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: Algorithms for routing messages around faults appear in [AS82, ALM90, AB91, CMS95, HLN89, KKL + 90, LM92, Lin92, Lyu90, OT71, PL92, Rab89, SR80]. The fault-tolerance of sorting networks is studied in [AU90, LMP91]. Finally, <ref> [BCS90, WC92, WCM91] </ref> show how to perform certain computations in hypercubes containing faults. 1.5 Network definitions In this section, we review the structure of some of the networks that we study in this paper. In all of these networks, the edges are assumed to be undirected (or bidirectional).
Reference: [WCM91] <author> A. Wang, R. Cypher, and E. Mayr. </author> <title> Embedding complete binary trees in faulty hypercubes. </title> <booktitle> In Proceedings of the 3rd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 112-119. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1991. </year> <month> 49 </month>
Reference-contexts: Algorithms for routing messages around faults appear in [AS82, ALM90, AB91, CMS95, HLN89, KKL + 90, LM92, Lin92, Lyu90, OT71, PL92, Rab89, SR80]. The fault-tolerance of sorting networks is studied in [AU90, LMP91]. Finally, <ref> [BCS90, WC92, WCM91] </ref> show how to perform certain computations in hypercubes containing faults. 1.5 Network definitions In this section, we review the structure of some of the networks that we study in this paper. In all of these networks, the edges are assumed to be undirected (or bidirectional).
References-found: 53

