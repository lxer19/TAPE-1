URL: http://www.cs.brown.edu/people/dgk/Papers/pods96.ps
Refering-URL: http://www.cs.brown.edu/people/dgk/papers.html
Root-URL: http://www.cs.brown.edu/
Email: chomicki@moncol.monmouth.edu  dgk@cs.brown.edu  kuper@ecrc.de  
Title: Variable Independence and Aggregation Closure  
Author: J. Chomicki D. Q. Goldin G. M. Kuper 
Address: West Long Branch, NJ  Providence, RI  Munchen, Germany  
Affiliation: Monmouth University  Brown University  ECRC  
Abstract: We discuss the issue of adding aggregation to constraint databases. Previous work has shown that, in general, adding aggregates to constraint databases results in languages that are not closed. We show that by imposing a natural restriction, called variable independence (which is a generalization of the assumptions underlying the classical relational model of data) on the schema, we can guarantee that a restricted version of the language with aggregation is closed. We illustrate our approach in the context of linear constraint databases. 
Abstract-found: 1
Intro-found: 1
Reference: [AS91] <author> W.G. Aref and H. Samet. </author> <title> Extending a DBMS with Spatial Operations. </title> <booktitle> In International Symposium on Large Spatial Databases, </booktitle> <pages> pages 299-318, </pages> <year> 1991. </year>
Reference-contexts: Generalizing aggregation operators to constraint databases has been identified as one of the most important open research issues in this area [KG94, Kan95]. Some aggregation operators like count are not applicable to infinite relations. On the other hand, new operators like area <ref> [AS91] </ref> (or its generalization: n-dimensional volume [GK94]) occur there quite naturally. A query language resulting from adding aggregation to a constraint query calculus [KKR90] or algebra [KG96] should be well behaved. [Kup94] describes a general framework, modelled after [Klu82], for adding aggregate operators to relational algebra and calculus.
Reference: [BJM93] <author> A. Brodsky, J. Jaffar, and M.J. Maher. </author> <title> Towards Practical Constraint Databases. </title> <booktitle> In International Conference on Very Large Data Bases, </booktitle> <address> Dublin, Ireland, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Constraint databases [KKR90] are a natural generalization of the relational model of data by allowing infinite relations that are finitely representable using constraints. Constraint databases find numerous applications in spatial <ref> [BJM93, BK95, BLLM95, PVdBVG94, VGVG95] </ref> and temporal databases [Cho94]. Generalizing aggregation operators to constraint databases has been identified as one of the most important open research issues in this area [KG94, Kan95]. Some aggregation operators like count are not applicable to infinite relations.
Reference: [BK95] <author> A. Brodsky and Y. Kornatzky. </author> <title> The LyriC Language: Constraining Objects. </title> <booktitle> In ACM SIGMOD International Conference on Management of Data, </booktitle> <address> San Jose, California, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction Constraint databases [KKR90] are a natural generalization of the relational model of data by allowing infinite relations that are finitely representable using constraints. Constraint databases find numerous applications in spatial <ref> [BJM93, BK95, BLLM95, PVdBVG94, VGVG95] </ref> and temporal databases [Cho94]. Generalizing aggregation operators to constraint databases has been identified as one of the most important open research issues in this area [KG94, Kan95]. Some aggregation operators like count are not applicable to infinite relations.
Reference: [BLLM95] <author> A. Brodsky, C. Lassez, J-L. Lassez, and M.J. Maher. </author> <title> Separability of Polyhedra for Optimal Filtering of Spatial and Constraint Data. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <address> San Jose, California, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction Constraint databases [KKR90] are a natural generalization of the relational model of data by allowing infinite relations that are finitely representable using constraints. Constraint databases find numerous applications in spatial <ref> [BJM93, BK95, BLLM95, PVdBVG94, VGVG95] </ref> and temporal databases [Cho94]. Generalizing aggregation operators to constraint databases has been identified as one of the most important open research issues in this area [KG94, Kan95]. Some aggregation operators like count are not applicable to infinite relations.
Reference: [Cho94] <author> J. Chomicki. </author> <title> Temporal Query Languages: A Survey. In D.M. </title> <editor> Gabbay and H.J. Ohlbach, editors, </editor> <booktitle> Temporal Logic, First International Conference, </booktitle> <pages> pages 506-534. </pages> <publisher> Springer-Verlag, LNAI 827, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Constraint databases [KKR90] are a natural generalization of the relational model of data by allowing infinite relations that are finitely representable using constraints. Constraint databases find numerous applications in spatial [BJM93, BK95, BLLM95, PVdBVG94, VGVG95] and temporal databases <ref> [Cho94] </ref>. Generalizing aggregation operators to constraint databases has been identified as one of the most important open research issues in this area [KG94, Kan95]. Some aggregation operators like count are not applicable to infinite relations.
Reference: [CK70] <author> D.R.Chand, S.S. Kapur. </author> <title> An Algorithm for Convex Polytopes. </title> <journal> JACM, </journal> <volume> 17(1): </volume> <pages> 78-86, </pages> <year> 1970. </year>
Reference-contexts: This is done using standard techniques from CAD, summarized below. Each generalized tuple t corresponds to a convex set P t of n-dimensional points, bounded by n-dimensional half-planes. The boundary representation of P t is computed by a convex hull algorithm, such as the "gift wrapping" method in <ref> [CK70] </ref>. B (R) is obtained by unioning together the boundary representations of the individual tuples, a standard Solid Modeling operation. See [FvDFH] for an introduction to polyhedral Solid Modeling, or [MM] for details of the algorithms. These algorithms extend to an arbitrary number of dimensions, as in [PS86]. Step 2.
Reference: [CK95] <author> J. Chomicki and G. Kuper. </author> <title> Measuring Infinite Relations. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <year> 1995. </year>
Reference-contexts: The second approach was illustrated by the max aggregate operator that (trivially) produces a closed language. Also, a new nontrivial aggregation operator producing a closed language was introduced and studied in <ref> [CK95] </ref>. A new approach, restricting the way aggregate operators are used in the query language, is proposed here. <p> We have shown that for constraint databases with linear arithmetic constraints variable independence is decidable with acceptable complexity. We have also provided a set of rules for inferring variable independence in relational expressions. Previous work on aggregation, with the exception of <ref> [Klu82, OOM87, Kup94, CK95] </ref>, has concentrated on a fixed set of aggregation operators, e.g., sum or count, motivated by traditional database applications. Such operators are applicable to finite relations and do not generalize to infinite ones. <p> Previous work on aggregation, with the exception of [Klu82, OOM87, Kup94, CK95], has concentrated on a fixed set of aggregation operators, e.g., sum or count, motivated by traditional database applications. Such operators are applicable to finite relations and do not generalize to infinite ones. In <ref> [CK95] </ref>, a special aggregation operator for generalized relations that preserved closure of relational algebra operations was proposed. The issue of closure of general aggregation operators was not, however, addressed.
Reference: [FvDFH] <author> J.D.Foley, A. van Dam, S.K.Feiner, J.F. </author> <title> Hughes Computer Graphics, </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: The boundary representation of P t is computed by a convex hull algorithm, such as the "gift wrapping" method in [CK70]. B (R) is obtained by unioning together the boundary representations of the individual tuples, a standard Solid Modeling operation. See <ref> [FvDFH] </ref> for an introduction to polyhedral Solid Modeling, or [MM] for details of the algorithms. These algorithms extend to an arbitrary number of dimensions, as in [PS86]. Step 2. The next step of the algorithm is to create a vertex grid partitioning R of R.
Reference: [GK94] <author> P. Gritzmann and V. Klee. </author> <title> On the Complexity of Some Basic Problems in Computational Convexity: II. Volume and Mixed Volumes. </title> <type> Technical Report TR-94-31, </type> <institution> DIMACS, Rut-gers University, </institution> <address> New Brunswick, NJ, </address> <year> 1994. </year>
Reference-contexts: Generalizing aggregation operators to constraint databases has been identified as one of the most important open research issues in this area [KG94, Kan95]. Some aggregation operators like count are not applicable to infinite relations. On the other hand, new operators like area [AS91] (or its generalization: n-dimensional volume <ref> [GK94] </ref>) occur there quite naturally. A query language resulting from adding aggregation to a constraint query calculus [KKR90] or algebra [KG96] should be well behaved. [Kup94] describes a general framework, modelled after [Klu82], for adding aggregate operators to relational algebra and calculus.
Reference: [Kan90] <author> P.C. Kanellakis. </author> <title> Elements of Relational Database Theory. </title> <editor> In Jan van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B, chapter 17, </booktitle> <pages> pages 1073-1158. </pages> <publisher> Elsevier/MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: We say that X and Y are independent in t if: they are related in t otherwise. Clearly, variable independence in a tuple is decidable. Also, note that variable independence in a tuple t may be viewed as an embedded join dependency <ref> [Kan90] </ref> holding in the unrestricted relation corresponding to t. Definition 3.2 We say that X and Y are independent in R if there exists a relation R 0 equivalent to R where X and Y are independent in every (generalized) tuple of R 0 .
Reference: [Kan95] <author> P.C. Kanellakis. </author> <title> Constraint Programming and Database Languages: A Tutorial. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Constraint databases find numerous applications in spatial [BJM93, BK95, BLLM95, PVdBVG94, VGVG95] and temporal databases [Cho94]. Generalizing aggregation operators to constraint databases has been identified as one of the most important open research issues in this area <ref> [KG94, Kan95] </ref>. Some aggregation operators like count are not applicable to infinite relations. On the other hand, new operators like area [AS91] (or its generalization: n-dimensional volume [GK94]) occur there quite naturally.
Reference: [KG94] <author> P. C. Kanellakis and D. Q. Goldin. </author> <title> Constraint programming and database query languages. </title> <booktitle> In Proc. 2nd Conference on Theoretical Aspects of Computer Software (TACS), </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: Constraint databases find numerous applications in spatial [BJM93, BK95, BLLM95, PVdBVG94, VGVG95] and temporal databases [Cho94]. Generalizing aggregation operators to constraint databases has been identified as one of the most important open research issues in this area <ref> [KG94, Kan95] </ref>. Some aggregation operators like count are not applicable to infinite relations. On the other hand, new operators like area [AS91] (or its generalization: n-dimensional volume [GK94]) occur there quite naturally.
Reference: [KG96] <author> P.C. Kanellakis and D.Q. </author> <title> Goldin Constraint Query Algebras Constraints Journal, </title> <journal> 1st issue, </journal> <note> 1996 (to be published). </note>
Reference-contexts: Some aggregation operators like count are not applicable to infinite relations. On the other hand, new operators like area [AS91] (or its generalization: n-dimensional volume [GK94]) occur there quite naturally. A query language resulting from adding aggregation to a constraint query calculus [KKR90] or algebra <ref> [KG96] </ref> should be well behaved. [Kup94] describes a general framework, modelled after [Klu82], for adding aggregate operators to relational algebra and calculus. <p> Such a query is well-defined if the result of substituting a generalized relation for each occurrence of the corresponding relation symbol, is equivalent to some generalized relation over the same constraint domain. A query algebra can also be defined, using natural extensions of the normal relational algebra (see <ref> [KG96] </ref> for an extensive treatment of constraint query algebras). The extension to aggregation is described later in this section.
Reference: [KKR90] <author> P.C. Kanellakis, G.M. Kuper, and P.Z. Revesz. </author> <title> Constraint Query Languages. </title> <journal> JCSS, </journal> <volume> 51(1): </volume> <pages> 26-52, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Constraint databases <ref> [KKR90] </ref> are a natural generalization of the relational model of data by allowing infinite relations that are finitely representable using constraints. Constraint databases find numerous applications in spatial [BJM93, BK95, BLLM95, PVdBVG94, VGVG95] and temporal databases [Cho94]. <p> Some aggregation operators like count are not applicable to infinite relations. On the other hand, new operators like area [AS91] (or its generalization: n-dimensional volume [GK94]) occur there quite naturally. A query language resulting from adding aggregation to a constraint query calculus <ref> [KKR90] </ref> or algebra [KG96] should be well behaved. [Kup94] describes a general framework, modelled after [Klu82], for adding aggregate operators to relational algebra and calculus. <p> In section 6, we present some results about inferring variable independence in relational algebra expressions. In section 7, we draw conclusions and discuss related and further work. 2 Basic notions For a full account of constraint databases, see <ref> [KKR90] </ref>. The basic definitions are as follows: Definition 2.1 Let be a class of constraints. 1.
Reference: [Klu82] <author> A. Klug. </author> <title> Equivalence of Relational Algebra and Relational Calculus Query Languages Having Aggregate Functions. </title> <journal> Journal of the ACM, </journal> <volume> 29(3) </volume> <pages> 699-717, </pages> <year> 1982. </year>
Reference-contexts: On the other hand, new operators like area [AS91] (or its generalization: n-dimensional volume [GK94]) occur there quite naturally. A query language resulting from adding aggregation to a constraint query calculus [KKR90] or algebra [KG96] should be well behaved. [Kup94] describes a general framework, modelled after <ref> [Klu82] </ref>, for adding aggregate operators to relational algebra and calculus. <p> We have shown that for constraint databases with linear arithmetic constraints variable independence is decidable with acceptable complexity. We have also provided a set of rules for inferring variable independence in relational expressions. Previous work on aggregation, with the exception of <ref> [Klu82, OOM87, Kup94, CK95] </ref>, has concentrated on a fixed set of aggregation operators, e.g., sum or count, motivated by traditional database applications. Such operators are applicable to finite relations and do not generalize to infinite ones.
Reference: [Kup94] <author> G. Kuper. </author> <title> Aggregation in Constraint Databases. </title> <booktitle> In PPCP'93, First International Workshop on Principles and Practice of Constraint Programming, </booktitle> <pages> pages 161-172. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: On the other hand, new operators like area [AS91] (or its generalization: n-dimensional volume [GK94]) occur there quite naturally. A query language resulting from adding aggregation to a constraint query calculus [KKR90] or algebra [KG96] should be well behaved. <ref> [Kup94] </ref> describes a general framework, modelled after [Klu82], for adding aggregate operators to relational algebra and calculus. <p> Unrestricted aggregation may fail to produce a closed language, as shown in <ref> [Kup94] </ref>. That paper proposes several approaches to deal with this problem. On the one hand, one may try to restrict the query language, and on the other, to restrict the classes of aggregate operators allowed. <p> In particular, our approach is applicable to the area aggregate operator and its higher-dimensional versions. As shown in <ref> [Kup94] </ref>, relational algebra over linear constraint databases is not closed under aggregation using area. The typical example where a query is not closed, is where we have, say, a region whose boundaries vary with time, and we want to know how the area of the region varies with time. <p> As shown in <ref> [Kup94] </ref>, Klug's relational calculus and algebra with aggregation can be extended to constraint databases with minor modifications, at least as far as the underlying semantics on unrestricted relations is concerned. The definitions in [Kup94] are as follows: Definition 2.3 An aggregate function f maps (possibly infinite) relations with an appropriate schema <p> As shown in <ref> [Kup94] </ref>, Klug's relational calculus and algebra with aggregation can be extended to constraint databases with minor modifications, at least as far as the underlying semantics on unrestricted relations is concerned. The definitions in [Kup94] are as follows: Definition 2.3 An aggregate function f maps (possibly infinite) relations with an appropriate schema to the domain D of the constraints. <p> For more details, including the construction of an equivalent calculus, see <ref> [Kup94] </ref>. Generalized relational algebra with aggregation may fail to be closed even for dense order constraints [Kup94]. <p> For more details, including the construction of an equivalent calculus, see <ref> [Kup94] </ref>. Generalized relational algebra with aggregation may fail to be closed even for dense order constraints [Kup94]. Example 2.1 Consider the instance of R consisting of a single generalized tuple: 0 &lt; x &lt; y &lt; z &lt; 1 The query R hz; area x;y i evaluates to a binary relation S (z; t) where S (z; t) holds iff z 2 = 2t. <p> We have shown that for constraint databases with linear arithmetic constraints variable independence is decidable with acceptable complexity. We have also provided a set of rules for inferring variable independence in relational expressions. Previous work on aggregation, with the exception of <ref> [Klu82, OOM87, Kup94, CK95] </ref>, has concentrated on a fixed set of aggregation operators, e.g., sum or count, motivated by traditional database applications. Such operators are applicable to finite relations and do not generalize to infinite ones.
Reference: [Las90] <author> J.L. Lassez. </author> <title> Querying Constraints. </title> <booktitle> In 9th ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 288-298, </pages> <year> 1990. </year>
Reference-contexts: In this section, we provide such an independence test for linear constraint databases. As a side effect, this test generates on success a relation R equivalent to R where X and Y are independent for all tuples. Unlike the work of <ref> [Las90] </ref>, where all tests are performed on constraint sets (i.e., tuples), this test is for disjunctions of constraint sets (i.e., relations). The independence test consists of three steps: Step 1.
Reference: [MM] <author> Martti Mantyla. </author> <title> Solid Modeling. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: B (R) is obtained by unioning together the boundary representations of the individual tuples, a standard Solid Modeling operation. See [FvDFH] for an introduction to polyhedral Solid Modeling, or <ref> [MM] </ref> for details of the algorithms. These algorithms extend to an arbitrary number of dimensions, as in [PS86]. Step 2. The next step of the algorithm is to create a vertex grid partitioning R of R.
Reference: [MPR90] <author> I.S. Mumick, H. Pirahesh, and R. Ramakrish-nan. </author> <title> Duplicates and Aggregates in Deductive Databases. </title> <booktitle> In International Conference on Very Large Data Bases, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Other possible extensions of this work include: larger classes of constraints (e.g., polynomial constraints), other query languages with aggregation (e.g., relational calculus, Datalog <ref> [MPR90, RS92, SSRB93, VG92] </ref>), properties of variable independence considered as a dependency class (axiomatization, implication).
Reference: [OOM87] <author> G. Ozsoyoglu, Z.M. Ozsoyoglu, and V. Matos. </author> <title> Extending Relational Algebra and Relational Calculus with Set-Valued Attributes and Aggregate Functions. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12 </volume> <pages> 566-592, </pages> <year> 1987. </year>
Reference-contexts: We have shown that for constraint databases with linear arithmetic constraints variable independence is decidable with acceptable complexity. We have also provided a set of rules for inferring variable independence in relational expressions. Previous work on aggregation, with the exception of <ref> [Klu82, OOM87, Kup94, CK95] </ref>, has concentrated on a fixed set of aggregation operators, e.g., sum or count, motivated by traditional database applications. Such operators are applicable to finite relations and do not generalize to infinite ones.
Reference: [PBCF93] <author> A.Paoluzzi, F.Bernandini, C.Cattani, </author> <title> V.Ferrucci. </title> <journal> Dimension-Independent Modeling with Simplicial Complexes ACM Trans. Graphics, </journal> <volume> 12(1): </volume> <pages> 56-102, </pages> <year> 1993. </year> <month> 8 </month>
Reference: [PVdBVG94] <author> J. Paredaens, J. Van den Bussche, and D. Van Gucht. </author> <title> Towards a Theory of Spatial Database Queries. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 279-288, </pages> <address> Minneapolis, Minnesota, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Constraint databases [KKR90] are a natural generalization of the relational model of data by allowing infinite relations that are finitely representable using constraints. Constraint databases find numerous applications in spatial <ref> [BJM93, BK95, BLLM95, PVdBVG94, VGVG95] </ref> and temporal databases [Cho94]. Generalizing aggregation operators to constraint databases has been identified as one of the most important open research issues in this area [KG94, Kan95]. Some aggregation operators like count are not applicable to infinite relations.
Reference: [PS86] <author> L.K. Putnam, </author> <title> P.A. Subrahmanyam. Boolean Operations on n-dimensional objects. </title> <journal> IEEE Comput. Graph. Appl., </journal> <volume> 6(6): </volume> <pages> 43-51, </pages> <year> 1986. </year>
Reference-contexts: B (R) is obtained by unioning together the boundary representations of the individual tuples, a standard Solid Modeling operation. See [FvDFH] for an introduction to polyhedral Solid Modeling, or [MM] for details of the algorithms. These algorithms extend to an arbitrary number of dimensions, as in <ref> [PS86] </ref>. Step 2. The next step of the algorithm is to create a vertex grid partitioning R of R. We project the set of B (R)'s vertices onto each of the n axes, and sort the k j obtained values, for 1 j n.
Reference: [Rev95] <author> P. Z. Revesz. </author> <title> Safe Stratified Datalog with Integer Order Programs. </title> <booktitle> In International Conference on Constraint Programming, </booktitle> <address> Mar-seilles, France, </address> <month> September </month> <year> 1995. </year> <note> Springer-Verlag, LNCS 1000. </note>
Reference-contexts: In [CK95], a special aggregation operator for generalized relations that preserved closure of relational algebra operations was proposed. The issue of closure of general aggregation operators was not, however, addressed. The idea of variable independence can be potentially applied beyond the context of aggregation. <ref> [Rev95] </ref> defined a restricted form of Datalog with negation and integer gap-order constraints. The restriction required essentially that all attributes be independent in every generalized tuple in order to guarantee the termination of bottom-up query evaluation.
Reference: [RS92] <author> K. A. Ross and Y. Sagiv. </author> <title> Monotonic Aggregation in Deductive Databases. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 114-126, </pages> <year> 1992. </year>
Reference-contexts: Other possible extensions of this work include: larger classes of constraints (e.g., polynomial constraints), other query languages with aggregation (e.g., relational calculus, Datalog <ref> [MPR90, RS92, SSRB93, VG92] </ref>), properties of variable independence considered as a dependency class (axiomatization, implication).
Reference: [SSRB93] <author> S. Sudarshan, D. Srivastava, R. Ramakr-ishnan, and C. Beeri. </author> <title> Extending the Well-Founded and Valid Model Semantics for Aggregation. </title> <booktitle> In International Logic Programming Symposium, </booktitle> <year> 1993. </year>
Reference-contexts: Other possible extensions of this work include: larger classes of constraints (e.g., polynomial constraints), other query languages with aggregation (e.g., relational calculus, Datalog <ref> [MPR90, RS92, SSRB93, VG92] </ref>), properties of variable independence considered as a dependency class (axiomatization, implication).
Reference: [VG92] <author> A. Van Gelder. </author> <title> The Well-Founded Semantics of Aggregation. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 127-138, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Other possible extensions of this work include: larger classes of constraints (e.g., polynomial constraints), other query languages with aggregation (e.g., relational calculus, Datalog <ref> [MPR90, RS92, SSRB93, VG92] </ref>), properties of variable independence considered as a dependency class (axiomatization, implication).
Reference: [VGVG95] <author> L. Vandeurzen, M. Gyssens, and D. Van Gucht. </author> <title> On the Desirability and Limitations of Linear Spatial Database Models. </title> <booktitle> In International Symposium on Large Spatial Databases, </booktitle> <pages> pages 14-28, </pages> <year> 1995. </year> <month> 9 </month>
Reference-contexts: 1 Introduction Constraint databases [KKR90] are a natural generalization of the relational model of data by allowing infinite relations that are finitely representable using constraints. Constraint databases find numerous applications in spatial <ref> [BJM93, BK95, BLLM95, PVdBVG94, VGVG95] </ref> and temporal databases [Cho94]. Generalizing aggregation operators to constraint databases has been identified as one of the most important open research issues in this area [KG94, Kan95]. Some aggregation operators like count are not applicable to infinite relations.
References-found: 28

