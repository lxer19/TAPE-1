URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-494.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/trlow.html
Root-URL: 
Title: MIT/LCS/TR-494 TCP Packet Trace Analysis  
Author: Timothy Jason Shepard 
Affiliation: MIT Laboratory for Computer Science.  
Note: This document has been made available free of charge via ftp from the  
Date: February, 1991  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Aronoff, K. Mills, and M. Wheatley. </author> <title> Transport layer performance tools and measurement. </title> <journal> IEEE Network, </journal> <volume> 1(3) </volume> <pages> 21-31, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Sanghi et. al. instrumented a particular TCP to collect a trace of its state [17]. Aronoff et. al. built an instrumented testbed where transport protocols can be developed and studied <ref> [1] </ref>. Both of these systems allow the conduct of experiments and the collection of data for analysis but are not directly applicable to general monitoring of operational networks. 11 Improvements to TCP Another category of related work includes studies to improve the understanding of transport protocols by using collected data.
Reference: [2] <author> R. Braden. </author> <title> Requirements for Internet Hosts | Communication Layers. Request for Comments 1122, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> Oc-tober </month> <year> 1989. </year>
Reference-contexts: Examination of a 6 The fast-retransmit algorithm is described in [9]. 7 It is currently recommended that a TCP send at least one acknowledgment for every two data-carrying segments received <ref> [2] </ref>. <p> Historically much of the wisdom needed to implement the TCP/IP protocol suite well was not available formally from a single source but was passed around among implementors as folklore. The Host-Requirements RFC <ref> [2] </ref> will help ensure that implementors are more aware of this wisdom. What further improvements to TCP can be made? The problematic behavior of an up-to-date TCP shown in Figure 4.6 might be improved by adding selective acknowledgments, rate-controlled transmission, or both.
Reference: [3] <author> Robert T. Braden and Annette L. DeSchon. NNStat: </author> <title> Internet Statistics Collection | Introduction and User Guide. </title> <journal> USC / Information Sciences Institute, </journal> <note> release 2.4 edition, </note> <month> December </month> <year> 1989. </year>
Reference-contexts: In [10], Jain and Routhier developed a model for traffic on a token ring network using data collected by a monitoring system built by Feldmeier [6]. More recently, Braden and DeSchon have developed a system NNStat <ref> [3] </ref> for gathering statistics from the Internet for traffic studies. All of these studies have been concerned with studying traffic in the network as a whole and do not examine traces of individual connections in detail. The performance of transport protocols has been studied in simulation.
Reference: [4] <author> D. D. Clark. </author> <title> Window and Acknowledgement Strategy in TCP. Request for Comments 813, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> July </month> <year> 1982. </year>
Reference-contexts: When the sender has refrained from sending completely to the end of the window, zero length packets are sent in response to the duplicate acknowledgments. 5 3 On a much closer view not included here they appear about 2ms apart. 4 The silly-window-syndrome is described in <ref> [4] </ref>. 5 It is hard to distinguish zero length packets from very short packets at this scale, but those are indeed zero length. 42 The detailed behavior of the slow-start and congestion avoidance algorithms can be seen in Figure 3.12.
Reference: [5] <author> David D. Clark. </author> <title> The design philosophy of the darpa internet protocols. </title> <booktitle> In Proceedings of SIGCOMM '88, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: Interoperability was the chief goal of the TCP specification. Performance issues such as window sizes, how quickly segments should be sent, and whether to try to batch acknowledgments by dallying were left 8 almost entirely to the designer of a particular implementation <ref> [5] </ref>. The performance of a TCP connection is the collection of behavior of the TCP implementations involved in the connection that may affect data throughput, efficient use of bandwidth, timely recovery from lost packets, and interaction with other resources in the network.
Reference: [6] <author> David C. Feldmeier. </author> <title> Empirical Analysis of a Token Ring Network. </title> <type> Technical Report MIT/LCS/TM-254, </type> <institution> Massachusetts Institute of Technology, </institution> <month> January </month> <year> 1984. </year>
Reference-contexts: In [10], Jain and Routhier developed a model for traffic on a token ring network using data collected by a monitoring system built by Feldmeier <ref> [6] </ref>. More recently, Braden and DeSchon have developed a system NNStat [3] for gathering statistics from the Internet for traffic studies. All of these studies have been concerned with studying traffic in the network as a whole and do not examine traces of individual connections in detail.
Reference: [7] <author> Eman Salaheddin Hashem. </author> <title> Analysis of Random Drop for Gateway Congestion Control. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Techonology, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: All of these studies have been concerned with studying traffic in the network as a whole and do not examine traces of individual connections in detail. The performance of transport protocols has been studied in simulation. Hashem <ref> [7] </ref> studied the effect of gateway policy on performance in a simulated network carrying TCP connections using Jacobson's slow-start and other algorithms. More closely related to this thesis are two projects which studied the performance of transport protocols by collecting and examining data of actual protocol operations.
Reference: [8] <author> Bruce Hitson. </author> <title> Knowledge-based monitoring and control: an approach to understanding the behavior of tcp/ip network protocols. </title> <booktitle> In Proceedings of SIGCOMM '88, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: The graphical method presented in Chapter 2 was inspired by time-sequence plots created by Jacobson. Mankin and Thompson studied the performance of the slow-start algorithm using data collected from a host and an Internet gateway [12]. Packet Trace Analysis The most closely related work is that of Hitson <ref> [8] </ref>. Hitson recognized the difficulty of packet trace analysis (as is shown in Chapter 2 of this thesis) and tackled the difficulty using expert-system techniques. Hitson's goals are the same as goals of this thesis, but the techniques are different. <p> Often, insight into the cause of performance problems can be gained from constructing this story. This method leaves the human analyst to do all of the data reduction of the analysis. The analyst must reconstruct the story from raw data. Hitson <ref> [8] </ref> discusses the difficulties of leaving the human with the packet trace in this raw form and states that it took human experts about 20 minutes to examine such traces in detail.
Reference: [9] <author> Van Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proceedings of SIGCOMM '88, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: Motivated by reports of poor performance in the Internet, Jacobson and Karels developed a collection of algorithms, including the slow-start algorithm, for improving the behavior of the TCP in 4.3BSD Berkeley Unix <ref> [9] </ref>. The graphical method presented in Chapter 2 was inspired by time-sequence plots created by Jacobson. Mankin and Thompson studied the performance of the slow-start algorithm using data collected from a host and an Internet gateway [12]. Packet Trace Analysis The most closely related work is that of Hitson [8]. <p> In <ref> [9] </ref>, Jacobson first applied this idea to TCP connections when he used it to show the progress of a TCP connection by plotting the sequence number field of packets versus the time each packet was sent. <p> One machine, at IP address 18.26.0.59, was running Ultrix 2.2 (whose TCP is probably based on the standard 4.3 BSD TCP) and the other, at IP address 18.26.0.115, was running 4.3 BSD Unix with Jacobson's TCP improvements which are described in <ref> [9] </ref>. The test program opens a TCP connection to a remote sink port and calls write () on the socket with a 1,024,000 byte buffer. <p> This, and the success of the other TCP connection, suggests that this TCP implementation is the cause of its own troubles. In the closer view of the operation of the improved TCP in Figure 3.10 the basic behavior of the combined slow-start and congestion-avoidance algorithm <ref> [9] </ref> is evident. Whenever a packet needs to be retransmitted, the improved TCP refrains from 40 This is an enlarged view of a portion of the trace shown in Figure 3.9. sending bursts of packets. <p> Examination of a 6 The fast-retransmit algorithm is described in <ref> [9] </ref>. 7 It is currently recommended that a TCP send at least one acknowledgment for every two data-carrying segments received [2]. <p> The vertical axis is the number of bytes sent and the horizontal axis is bytes per second. in the network. Improvements made to this method in 4.3 BSD [11], and later by Jacobson <ref> [9] </ref>, all attempted to reduce congestion by holding back transmissions and retransmissions, effectively reducing the rates at which packets were sent. Examination of time-sequence plots of the two TCP connections shown in Figures 3.7 through 3.12 motivated a closer look at the behavior of the two TCP transmission algorithms involved. <p> The improved TCP tries to use the incoming acknowledgments to determine when to send more data. The rationale for this is that the spacing in time of the returning acknowledgments should correspond to the spacing in time of the transmitted packets exiting the bottleneck <ref> [9] </ref>. So why is there any burstiness at all in the improved TCP? 54 This is an enlarged view of a portion of the trace shown in Figure 3.8. After 10:38:05 a retransmit timer expired and a single packet was retransmitted. <p> Recent related work has shown that some definite improvements can be made to TCP transmitter, so the performance problems of TCP in existing networks can probably be ameliorated by incorporation of these improvements into the hosts. 5.1 State of the Art TCP Currently Jacobson's slow-start and congestion avoidance algorithms <ref> [9] </ref> are being widely accepted as the correct methods of controlling when a TCP transmitter sends 57 a packet.
Reference: [10] <author> Raj Jain and Shawn A. Routhier. </author> <title> Packet trains measurements and a new model for computer network traffic. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> SAC-4(6):986-995, </volume> <month> September </month> <year> 1986. </year>
Reference-contexts: This allowed use of the standard Unix data manipulation utilities to rapidly prototype utilities. 1.4 Related Work Studies of Networks and Protocols Related work includes studies to characterize the traffic of operational networks and systems built to collect data for such studies. In <ref> [10] </ref>, Jain and Routhier developed a model for traffic on a token ring network using data collected by a monitoring system built by Feldmeier [6]. More recently, Braden and DeSchon have developed a system NNStat [3] for gathering statistics from the Internet for traffic studies.
Reference: [11] <author> Michael J. Karels. </author> <title> Changes to the Kernel in 4.3BSD. </title> <institution> University of California, Berkeley, </institution> <address> 4.3 bsd edition, </address> <month> April </month> <year> 1986. </year> <month> 68 </month>
Reference-contexts: In the 4.3BSD TCP, this algorithm was improved to send only the first unacknowledged segment when the retransmit timer expired. Once an acknowledgment is received which covers previously unacknowledged data, any segments on the retransmit queue which have not yet been acknowledged are retransmitted <ref> [11] </ref>. Further improvements to the 4.3BSD TCP retransmission algorithm, including the slow-start algorithm, were later made by Jacobson and Karels [11]. <p> Once an acknowledgment is received which covers previously unacknowledged data, any segments on the retransmit queue which have not yet been acknowledged are retransmitted <ref> [11] </ref>. Further improvements to the 4.3BSD TCP retransmission algorithm, including the slow-start algorithm, were later made by Jacobson and Karels [11]. <p> This is probably the algorithm used in the 4.3BSD Unix <ref> [11] </ref> where once a retransmit timer has gone off, the TCP refrains from dumping the entire retransmit queue until it receives an acknowledgment covering previously unacknowledged data. <p> The vertical axis is the number of bytes sent and the horizontal axis is bytes per second. in the network. Improvements made to this method in 4.3 BSD <ref> [11] </ref>, and later by Jacobson [9], all attempted to reduce congestion by holding back transmissions and retransmissions, effectively reducing the rates at which packets were sent.
Reference: [12] <author> Allison Mankin and Kevin Thompson. </author> <title> Limiting factors in the peformance of the slow-start tcp algorithms. </title> <booktitle> In Proceedings of USENIX | Winter '89, </booktitle> <month> January </month> <year> 1989. </year>
Reference-contexts: The graphical method presented in Chapter 2 was inspired by time-sequence plots created by Jacobson. Mankin and Thompson studied the performance of the slow-start algorithm using data collected from a host and an Internet gateway <ref> [12] </ref>. Packet Trace Analysis The most closely related work is that of Hitson [8]. Hitson recognized the difficulty of packet trace analysis (as is shown in Chapter 2 of this thesis) and tackled the difficulty using expert-system techniques.
Reference: [13] <author> D. L. Mills. </author> <title> Internet Time Synchronization: the Network Time Protocol. Request for Comments 1129, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: Most of the functionality needed by these programs is available in libraries. The time on the workstation was kept accurate (to within about ten milliseconds) by ntpd. Ntpd is a system program that uses the Network Time Protocol described in <ref> [13] </ref>. The kernel was modified to keep time using some external microsecond resolution clocks on the MicroVAX-III so that the packets could be timestamped to microsecond resolution when the interrupt is received from the Ethernet interface.
Reference: [14] <author> Jon Postel. </author> <title> Internet Protocol. Request for Comments 791, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> Sept </month> <year> 1981. </year>
Reference-contexts: The TCP modules provide the end-to-end reliable byte stream by arranging for the transmission, sequencing and acknowledgment of bytes. They also provide automatic detection and recovery from lost packets by using timers and retransmissions. TCP is fully described in [16], and IP is fully described in <ref> [14] </ref>. Because TCP needed to work over a wide variety of networks and was expected to provide a variety of types of service, the TCP protocol specification leaves some of the details to be decided by each implementor. Interoperability was the chief goal of the TCP specification.
Reference: [15] <author> Jon Postel. SMTP. </author> <title> Request for Comments 788, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> Nov </month> <year> 1981. </year>
Reference-contexts: This plot shows how the data was sent to the SMTP server. The entire connection from SYN to FIN is shown here. Figure 3.2 shows the other half of this connection. ferring a computer mail message using the SMTP protocol. The SMTP protocol is described in <ref> [15] </ref>. The SMTP protocol first exchanges some short messages identifying the hosts involved and the intended recipients of the message. After these have been sent, verified, and acknowledge by the SMTP server the message is transferred to the SMTP server.
Reference: [16] <author> Jon Postel. </author> <title> Transmission Control Protocol. Request for Comments 793, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> Sept </month> <year> 1981. </year>
Reference-contexts: The TCP modules provide the end-to-end reliable byte stream by arranging for the transmission, sequencing and acknowledgment of bytes. They also provide automatic detection and recovery from lost packets by using timers and retransmissions. TCP is fully described in <ref> [16] </ref>, and IP is fully described in [14]. Because TCP needed to work over a wide variety of networks and was expected to provide a variety of types of service, the TCP protocol specification leaves some of the details to be decided by each implementor. <p> at the burstiness of the TCP transmitter, the most interesting of the graphical methods tried, and discuss how this burstiness might have affected the performance of the two TCP connections presented in chapter 3. 4.1 Burstiness of the TCP transmitter A major part of the TCP protocol left unspecified by <ref> [16] </ref> is when a TCP should transmit or retransmit a segment carrying data. The choice of method is left to the implementor. TCP is specified so that interoperation is possible for almost any choice.
Reference: [17] <author> Dheeraj Sanghi, M. C. V. Subramaniam, A. Udaya Shankar, Olafur Gudmunds-son, and Pankaj Jalote. </author> <title> Instrumenting a TCP Implementation. </title> <type> Technical Report UMIACS-TR-88-50, </type> <institution> CS-TR-2061, Institute for Advanced Computer Studies, Computer Science Department, University of Maryland, </institution> <month> July </month> <year> 1988. </year> <month> 69 </month>
Reference-contexts: More closely related to this thesis are two projects which studied the performance of transport protocols by collecting and examining data of actual protocol operations. Sanghi et. al. instrumented a particular TCP to collect a trace of its state <ref> [17] </ref>. Aronoff et. al. built an instrumented testbed where transport protocols can be developed and studied [1].
References-found: 17

