URL: http://graphics.lcs.mit.edu/~marekt/papers/skanim.ps.gz
Refering-URL: http://graphics.lcs.mit.edu/~marekt/publications.html
Root-URL: 
Title: Assisted Articulation of Closed Polygonal Models  
Author: Marek Teichmann Seth Teller 
Keyword: Animation, I-K skeleton, Medial axis, modeling, mesh deformation.  
Affiliation: MIT Computer Graphics Group  
Abstract: Creating articulated geometric models is a common task in animation systems. In some instances, models are procedurally instanced, and articulated degrees of freedom are designed into the model. In other instances, the model is some geometric assemblage, and an articulated skeleton (sometimes called an "I-K skeleton") is bound to the model by the user, typically by manual indication of a correspondence between elements of each structure. In either case, some binding must be made to couple boundary motions to those of the skeleton; this can be done for example by generating spring networks or spatial deformation fields. Both processes can be tedious in the ordinary case, especially when the model to be articulated is given only as a boundary representation, for example a polygonal mesh representing a character's skin or clothing, or an object's surface. We present a simple method for assisted articulation of geometric models. Given a 3D polygonal mesh representing an object, an approximation to the mesh's medial axis is efficiently computed using a 3D Voronoi diagram of the mesh vertices, and connectivity information within the mesh. The medial axis is then simplified; the resulting tree structure has chains of edges and nodes. We interpret selected nodes as joints of an I-K skeleton, and the chains connecting them as its links. A spring network is then generated to bind the I-K skeleton to the object boundary, so that skeletal motions will affect the boundary in a reasonable way, as specified by the animator. We show a user interface that allows interactive editing of the automatically constructed skeleton, and demonstrate the import, and mapping of key-framed motion capture data to, a variety of initially static polygonal objects. 
Abstract-found: 1
Intro-found: 1
Reference: [Cla] <author> H. Clarkson. Hull. </author> <title> Convex hull library, </title> <address> http://cm.bell-labs.com/netlib/voronoi/hull.html. </address>
Reference-contexts: We can save a model at each frame for later rendering after the spring network has stabilized. In figure 3 we show several models in varying poses. 5 Implementation Details The Delaunay triangulation computations are done using the robust hull package of Clark-son <ref> [Cla] </ref>, which implements a randomized incremental construction algorithm [CMS93]. This package computes the convex hull of a set of points in any (small) dimension, which by well known transformations can can be used for finding the Delaunay triangulation, or as outlined above, the Voronoi diagram of a set of points.
Reference: [CLR90] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: small amount of user input to solve this problem. 3 Contributions This paper builds on a number of fundamental ideas from computational geometry and graph theory: * The Voronoi diagram and medial axis of a set of polygons [SPB95]. * Graph algorithms for computing the biconnected components of a graph <ref> [CLR90] </ref>. * An approximation algorithm for the medial axis of the model polygons, by the Voronoi diagram of a set of points on the surface or the objects [Hub96]. For dense meshes, this can be taken as the mesh vertices. <p> We accomplish this as follows. We consider the skeleton as an abstract graph, where the nodes are the vertices and the edges are the Voronoi edges. This graph is mostly connected. Occasionally, small stray connected components appear, and we take the largest connected component. We refer the reader to <ref> [CLR90] </ref> for definitions and algorithms related to graphs. We next iterate the following steps until the graph is a tree: 1. We compute the biconnected components of the current graph, initially the largest con nected component. 2. <p> We are thus guaranteed by the property of biconnected components that the graph remains connected. We thus obtain a tree (assuming the user did not select three adjacent vertices; an application of a Spanning Tree algorithm <ref> [CLR90] </ref> takes care of this problem.) An example of a model with its associated skeleton can be seen in Figure 1. The running time of one iteration above is O (v + e), where v is the number of vertices, e the number of edges in the graph.
Reference: [CMS93] <author> K. L. Clarkson, K. Mehlhorn, and R. Seidel. </author> <title> Four results on randomized incremental constructions. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 3(4) </volume> <pages> 185-212, </pages> <year> 1993. </year>
Reference-contexts: This produces a number of points lying on the medial axis, in the interior and exterior of the object. This process takes O (m 2 ) time in the worst case, where m is the number of mesh vertices, but we use an efficient randomized algorithm <ref> [CMS93] </ref> and this is not a bottleneck in our system. For example, for the Doll model with 20710 triangles (see Section 6), this process took 32 seconds. The next step is to eliminate those Voronoi vertices on the outside of the object. <p> In figure 3 we show several models in varying poses. 5 Implementation Details The Delaunay triangulation computations are done using the robust hull package of Clark-son [Cla], which implements a randomized incremental construction algorithm <ref> [CMS93] </ref>. This package computes the convex hull of a set of points in any (small) dimension, which by well known transformations can can be used for finding the Delaunay triangulation, or as outlined above, the Voronoi diagram of a set of points.
Reference: [CR94] <author> Yu-Kuang Chang and Alyn P. Rockwood. </author> <title> A generalized de Casteljau approach to 3D free-Form deformation. </title> <editor> In Andrew Glassner, editor, </editor> <booktitle> Proceedings of SIGGRAPH '94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994), </year> <booktitle> Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 257-260. </pages> <publisher> ACM SIGGRAPH, ACM Press, </publisher> <month> July </month> <year> 1994. </year> <note> ISBN 0-89791-667-0. </note>
Reference-contexts: In [WV97] a parameterization of the muscles is used to create such attachment points. Free Form Deformation. Free form deformation techniques are important techniques for animating meshes. They do however require some manually constructed underlying structure. Recent examples include [MJ96], and <ref> [CR94] </ref>. For example, in [MJ96], a lattice around the part to be animated is required (see for example Figure 9 in [MJ96]). It is not clear how such a lattice would be constructed automatically, or be made consistent across an entire model.
Reference: [Ede87] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry, </title> <booktitle> volume 10 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: This paper introduces several new techniques: * Use of the Delaunay triangulation <ref> [Ede87] </ref> of mesh vertices and points inside the object. <p> Next, we construct the Voronoi Diagram of the mesh vertices. For this purpose we compute the Delaunay triangulation of the mesh vertices. For each resulting tetrahedron, we compute the circumsphere of the tetrahedron, whose center point is a Voronoi vertex <ref> [Ede87] </ref>. Adjacency of Voronoi vertices is apparent; two Voronoi vertices are adjacent if their corresponding tetrahedra share a face. We thus obtain the skeleton of the Voronoi diagram of the mesh vertices.
Reference: [Hop96] <author> Hugues Hoppe. </author> <title> Progressive meshes. </title> <editor> In Holly Rushmeier, editor, </editor> <booktitle> SIGGRAPH 96 Conference Proceedings, Annual Conference Series, </booktitle> <pages> pages 99-108. </pages> <publisher> ACM SIG-GRAPH, Addison Wesley, </publisher> <month> August </month> <year> 1996. </year> <title> held in New Orleans, </title> <address> Louisiana, </address> <month> 04-09 August </month> <year> 1996. </year>
Reference-contexts: Finally, an easy extension is to place sampled cylinders around skeleton edges, tapered toward the ends, to improve control of skin when skeleton edges are twisted. Finally, it would be interesting to combine our methods with multiresolution representations, as in <ref> [Hop96] </ref>. We would like to thank Viewpoint Data Labs for their generosity in providing many of the models for our work, and the Stanford Data Repository for making their models available.
Reference: [Hub96] <author> P. M. Hubbard. </author> <title> Approximating polyhedra with spheres for time-critical collision detection. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 15(3) </volume> <pages> 179-210, </pages> <year> 1996. </year> <month> 12 </month>
Reference-contexts: Voronoi diagram and medial axis of a set of polygons [SPB95]. * Graph algorithms for computing the biconnected components of a graph [CLR90]. * An approximation algorithm for the medial axis of the model polygons, by the Voronoi diagram of a set of points on the surface or the objects <ref> [Hub96] </ref>. For dense meshes, this can be taken as the mesh vertices. <p> There are a number of techniques for approximating the medial axis of a polyhedral object [SPB95]. The method we use is to sample the surface of the object and compute the Voronoi Diagram of the sample points <ref> [Hub96] </ref>. 4.1 Medial Axis Approximation The first step in the construction of the skeleton is to ensure the mesh is sufficiently dense, which is required for a good approximation of the medial axis. We add points on its surface recursively until a user specified inter-point distance maximum is met.
Reference: [KGC + 96] <author> R. M. Koch, M. H. Gross, F. R. Carls, D. F. von Buren, G. Fankhauser, and Y. Parish. </author> <title> Simulating facial surgery using finite element methods. </title> <editor> In Holly Rush-meier, editor, </editor> <booktitle> SIGGRAPH 96 Conference Proceedings, Annual Conference Series, </booktitle> <pages> pages 421-428. </pages> <publisher> ACM SIGGRAPH, Addison Wesley, </publisher> <month> August </month> <year> 1996. </year> <title> held in New Orleans, </title> <address> Louisiana, </address> <month> 04-09 August </month> <year> 1996. </year>
Reference-contexts: The mesh is then automatically attached to the skeleton via a spring network. Subsequent user or keyframe-based manipulation of the skeleton results automatically in corresponding articulation of the original model. 2 Related Work Springs and Bones. Koch et. al. <ref> [KGC + 96] </ref> use data from CT and range scans to construct a bone structure, onto which they connect a skin mesh using a set of springs. <p> In both methods the skin is a triangular mesh with springs at edges, is connected via a spring network and is relatively close to the underlying simulated muscles or bone. The springs are generated by locating one (or several in <ref> [KGC + 96] </ref>) points close to the mesh vertices on the underlying structure. In [WV97] a parameterization of the muscles is used to create such attachment points. Free Form Deformation. Free form deformation techniques are important techniques for animating meshes. They do however require some manually constructed underlying structure.
Reference: [MJ96] <author> Ron MacCracken and Kenneth I. Joy. </author> <title> Free-Form deformations with lattices of arbitrary topology. </title> <editor> In Holly Rushmeier, editor, </editor> <booktitle> SIGGRAPH 96 Conference Proceedings, Annual Conference Series, </booktitle> <pages> pages 181-188. </pages> <publisher> ACM SIGGRAPH, Addison Wesley, </publisher> <month> August </month> <year> 1996. </year> <title> held in New Orleans, </title> <address> Louisiana, </address> <month> 04-09 August </month> <year> 1996. </year>
Reference-contexts: In [WV97] a parameterization of the muscles is used to create such attachment points. Free Form Deformation. Free form deformation techniques are important techniques for animating meshes. They do however require some manually constructed underlying structure. Recent examples include <ref> [MJ96] </ref>, and [CR94]. For example, in [MJ96], a lattice around the part to be animated is required (see for example Figure 9 in [MJ96]). It is not clear how such a lattice would be constructed automatically, or be made consistent across an entire model. <p> In [WV97] a parameterization of the muscles is used to create such attachment points. Free Form Deformation. Free form deformation techniques are important techniques for animating meshes. They do however require some manually constructed underlying structure. Recent examples include <ref> [MJ96] </ref>, and [CR94]. For example, in [MJ96], a lattice around the part to be animated is required (see for example Figure 9 in [MJ96]). It is not clear how such a lattice would be constructed automatically, or be made consistent across an entire model. In this setting it appears difficult to assign intuitive animation variables. <p> Free Form Deformation. Free form deformation techniques are important techniques for animating meshes. They do however require some manually constructed underlying structure. Recent examples include <ref> [MJ96] </ref>, and [CR94]. For example, in [MJ96], a lattice around the part to be animated is required (see for example Figure 9 in [MJ96]). It is not clear how such a lattice would be constructed automatically, or be made consistent across an entire model. In this setting it appears difficult to assign intuitive animation variables. Mesh editing.
Reference: [MN95] <author> K. Mehlhorn and S. Naher. LEDA: </author> <title> a platform for combinatorial and geometric computing. </title> <journal> Commun. ACM, </journal> <volume> 38 </volume> <pages> 96-102, </pages> <year> 1995. </year>
Reference-contexts: This code returns a list of simplices triangulating the input points. We use the LEDA <ref> [MN95] </ref> graph data type to store and manipulate the result. For the Delaunay triangulation, we in 9 sert the input points as nodes in the graph, along with their position and other bookkeeping information. Tetrahedral edges become graph edges.
Reference: [OK95] <author> R.L. Ogniewicz and O. Kubler. </author> <title> Hierarchic voronoi skeletons. </title> <journal> Pattern Recognition, </journal> <volume> 28(3) </volume> <pages> 343-359, </pages> <year> 1995. </year>
Reference-contexts: Here too however, it appears difficult to assign simple animation variables to the model in an automatic fashion. 2 Skeleton construction. The problem of constructing a skeleton that is representative of an object is a well studied problem in pattern recognition, especially in two dimensions <ref> [OK95] </ref>. However, the notion of skeleton quality is domain dependent at present; there seems to be no algorithm that would always satisfy the subjective needs of an animator. <p> For dense meshes, this can be taken as the mesh vertices. For meshes with larger triangles, these are recursively subsampled. * The notion of importance of a point on the medial axis: points with larger distance to the surface have greater importance <ref> [OK95] </ref>, as do points selected by the user in our case. This paper introduces several new techniques: * Use of the Delaunay triangulation [Ede87] of mesh vertices and points inside the object.
Reference: [SPB95] <editor> E.C. Sherbrooke, N.M. Patrikalakis, and E. Brisson. </editor> <title> An algorithm for the medial axis transform of 3d polyhedral solids. </title> <booktitle> In Proc. ACM Siggraph Sympos. Solid Modeling, </booktitle> <pages> pages 187-199, </pages> <year> 1995. </year>
Reference-contexts: In our method, we solicit a small amount of user input to solve this problem. 3 Contributions This paper builds on a number of fundamental ideas from computational geometry and graph theory: * The Voronoi diagram and medial axis of a set of polygons <ref> [SPB95] </ref>. * Graph algorithms for computing the biconnected components of a graph [CLR90]. * An approximation algorithm for the medial axis of the model polygons, by the Voronoi diagram of a set of points on the surface or the objects [Hub96]. <p> We conclude in Section 7. 4 Skeleton Construction Our technique is based on approximating the medial axis of the mesh. There are a number of techniques for approximating the medial axis of a polyhedral object <ref> [SPB95] </ref>.
Reference: [SZL92] <author> William J. Schroeder, Jonathan A. Zarge, and William E. Lorensen. </author> <title> Decimation of triangle meshes. </title> <editor> In Edwin E. Catmull, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> volume 26, </volume> <pages> pages 65-70, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: In our case, v is the number of mesh and Voronoi vertices, which can 6 the I-K skeleton superposed. be quite large for a complex mesh. For large models, we use a simplified version of the model generated with the algorithm of <ref> [SZL92] </ref>. The final step is a simplification of the resulting skeleton. Neighboring vertices that are closer than an interactively set user specified threshold are merged, producing a vertex at their midpoint.
Reference: [WV97] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> Anatomically based modeling. </title> <editor> In Turner Whitted, editor, </editor> <booktitle> SIGGRAPH 97 Conference Proceedings, Annual Conference Series, </booktitle> <pages> pages 173-180. </pages> <publisher> ACM SIGGRAPH, Addison Wesley, </publisher> <month> August </month> <year> 1997. </year> <note> ISBN 0-89791-896-7. </note>
Reference-contexts: Koch et. al. [KGC + 96] use data from CT and range scans to construct a bone structure, onto which they connect a skin mesh using a set of springs. Wilhelms and Van Gelder <ref> [WV97] </ref> use existing bone models, and a simple model of the underlying muscles to determine the changes in muscle shape. In both methods the skin is a triangular mesh with springs at edges, is connected via a spring network and is relatively close to the underlying simulated muscles or bone. <p> The springs are generated by locating one (or several in [KGC + 96]) points close to the mesh vertices on the underlying structure. In <ref> [WV97] </ref> a parameterization of the muscles is used to create such attachment points. Free Form Deformation. Free form deformation techniques are important techniques for animating meshes. They do however require some manually constructed underlying structure. Recent examples include [MJ96], and [CR94]. <p> This is useful for tuning spring constants and deciding which degrees of freedom to add to or remove from the animation skeleton, and specifying local coordinate systems for easy attachment of external animation generators. An important advantage of our technique with respect to anatomical modeling methods <ref> [WV97] </ref>, is the low user interaction requirements. Our methods allow model importation and skeleton construction after approximately 30 minutes of user interaction. Finding the I-K skeleton then takes a few minutes of computation for a small model (5000 polygons). <p> The weights are determined according to the number of springs connecting the vertex to each branch. The springs constants are selected in a way similar to that in <ref> [WV97] </ref>. Our main contribution here is the introduction of "smart springs", to improve handing of cases where the mesh folds on itself during large motions. In [WV97], the problem is solved by shortening the spring rest length on the springs corresponding to the the mesh edges, and reducing the constant when <p> The springs constants are selected in a way similar to that in <ref> [WV97] </ref>. Our main contribution here is the introduction of "smart springs", to improve handing of cases where the mesh folds on itself during large motions. In [WV97], the problem is solved by shortening the spring rest length on the springs corresponding to the the mesh edges, and reducing the constant when these springs are compressed. <p> A relative advantage of our method over anatomical modeling methods such as <ref> [WV97] </ref> is the absence of a requirement of a detailed structure below the skin, thus avoiding the need for the manual construction of such a structure.
Reference: [ZSS97] <author> Denis Zorin, Peter Schroder, and Wim Sweldens. </author> <title> Interactive multiresolution mesh editing. </title> <editor> In Turner Whitted, editor, </editor> <booktitle> SIGGRAPH 97 Conference Proceedings, Annual Conference Series, </booktitle> <pages> pages 259-268. </pages> <publisher> ACM SIGGRAPH, Addison Wesley, </publisher> <month> August </month> <year> 1997. </year> <note> ISBN 0-89791-896-7. 13 </note>
Reference-contexts: It is not clear how such a lattice would be constructed automatically, or be made consistent across an entire model. In this setting it appears difficult to assign intuitive animation variables. Mesh editing. Techniques for multiresolution editing, as in <ref> [ZSS97] </ref> allow a user to manipulate meshes on a large or small scale. Here too however, it appears difficult to assign simple animation variables to the model in an automatic fashion. 2 Skeleton construction.
References-found: 15

