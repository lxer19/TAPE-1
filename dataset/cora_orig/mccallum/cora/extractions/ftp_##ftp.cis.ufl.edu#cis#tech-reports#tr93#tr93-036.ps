URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr93/tr93-036.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr93-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Gator: An Optimized Discrimination Network for Active Database Rule Condition Testing  
Author: Eric N. Hanson Mohammed S. Hasan 
Address: Gainesville, FL 32611  Gainesville, FL 32611  
Affiliation: 301 CSE CIS Department University of Florida  301 CSE CIS Department University of Florida  
Pubnum: TR93-036  
Email: hanson@cis.ufl.edu  msh@cis.ufl.edu  
Phone: (904) 392-2691  
Date: December 1993  
Abstract: This paper introduces a new discrimination network structure called Gator that is a generalization of the widely known Rete and TREAT algorithms. Gator can be used as a replacement for Rete or TREAT in active database rule systems and production system interpreters. In Gator, fi-memory nodes that hold intermediate join results can have two or more inputs, not exactly two inputs as they do in Rete. Gator is designed as the target structure for a discrimination network optimizer. Algorithms for performing pattern matching using a Gator network to see if a rule condition has been satisfied are given. Cost estimation functions for Gator networks based on cardinality, predicate selectivity, and update frequency information are introduced, and a technique for constructing optimized Gator networks is described. A Gator network optimizer has been developed, and the optimizer has been tested with simulated inputs. The results show that in terms of time, Gator can substantially outperform unoptimized Rete networks, TREAT networks, and optimized Rete networks, often by an order of magnitude. Gator also uses space effectively, requiring only slightly more space than TREAT and much less then Rete.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anurag Acharya and Milind Tambe. </author> <title> Collection-oriented match: Scaling up the data in production systems. </title> <type> Technical Report CMU-CS-92-218, </type> <institution> Carnegie-Mellon University, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: That is the optimum network (line 17-18). 9 Gator optimize (RuleCond rule) f Gator INet,JNet; Nets netsJ,netsIMinusJ,*NetsArray; Gator T,T1; (0) n = sizeOf (rule); (1) initialize NetsArray to size n (2) Initialize NetsArray <ref> [1] </ref>; (3) for I = 2 to n do 2 e do (5) netsIMinusJ =NetsArray [I-J]; (6) netsJ = NetsArray [J]; (7) for each JNet 2 netsJ do (8) for each INet 2 netsIMinusJ do (9) if ( isConnected (INet,JNet) && isDisjoint (INet,JNet)) (10) T = combine (INet,JNet,rule); (11) if (there <p> In addition, a variation of Gator is being considered that would support a new match strategy called collection-oriented match <ref> [1] </ref>. A collection-oriented Rete strategy has given up to a 1000-times speedup for some main-memory OPS5 applications. Finally, parallel versions of Gator and collection-oriented Gator are also being considered.
Reference: [2] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5: an Introduction to Rule-Based Programming. </title> <publisher> Addison Wesley, </publisher> <year> 1985. </year>
Reference-contexts: If so, they are deleted. In turn, more tokens are generated and passed to the successor of the multiple input node. Detailed algorithms for tokens are not presented. A discussion of how Gator supports negated condition elements like those that can be specified in OPS5 <ref> [2] </ref> is given elsewhere [7]. To perform well, the Gator rule condition matching strategy needs a Gator network with a good structure.
Reference: [3] <author> Francoise Fabret, Mireille Regnier, and Eric Simon. </author> <title> An adaptive algorithm for incremental evaluation of production rules in databases. </title> <booktitle> In Proceedings of the VLDB Conference, </booktitle> <year> 1993. </year> <month> 26 </month>
Reference-contexts: The feasibility of generating an optimizer for Rete networks was demonstrated by Ishida [11]. Use of heuristics to construct a good discrimination network for testing active database rule conditions was discussed by Fabret 24 et al. <ref> [3] </ref>, but that work did not introduce a general discrimination network structure, a detailed cost model, or a search-based optimization strategy like the ones given in this paper. The results presented in this paper build on fundamental query optimization and query plan cost estimation techniques [15].
Reference: [4] <author> S. Finkelstein. </author> <title> Common expression analysis in database applications. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 235-245, </pages> <year> 1982. </year>
Reference-contexts: There is also some similarity between the problem of optimizing the discrimination network for a collection of rules, and optimizing an execution plan for simultaneously evaluating a set of queries <ref> [4, 14, 16] </ref>. A major difference between work on discrimination network optimization and query optimization is that in discrimination network optimization, update frequency is a key variable.
Reference: [5] <author> C. L. Forgy. </author> <title> Rete: A fast algorithm for the many pattern/many object pattern match problem. </title> <journal> Artificial Intelligence, </journal> <volume> 19 </volume> <pages> 17-37, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction Both production systems and active database systems must perform rule condition matching during execution to determine which rules to fire. The most successful rule condition testing mechanisms developed for main memory production systems system are discrimination networks known as Rete <ref> [5] </ref> and TREAT [12]. Like production systems, active database systems must also test rule conditions, and we believe some kind of discrimination network will be the best tool for doing so. <p> The rule condition matching strategy of Gator is similar to the algorithms for rule condition matching in Rete and TREAT <ref> [5, 12] </ref>. Gator performs rule condition matching by propagating tokens through the network. When a tuple is inserted into a base relation table, an insert token, or "+" token, is created by tagging a copy of the tuple with a + tag. <p> Figure 12 (d) has only three fi nodes, each taking inputs from three ff nodes. 7 Related work The Gator network is a descendant of Rete and TREAT <ref> [5, 12] </ref>. The Gator network is only useful with an optimizer or at least a good set of heuristics for constructing a network for a particular rule or set of rules. The feasibility of generating an optimizer for Rete networks was demonstrated by Ishida [11].
Reference: [6] <author> Eric N. Hanson. </author> <title> Rule condition testing and action execution in Ariel. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 49-58, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The concept of virtual ff-memories has been used in a variation of the TREAT algorithm called A-TREAT <ref> [6] </ref>. Use of virtual ff-memories for rule condition matching in Gator is identical to that in A-TREAT. Virtual ff-memories save space since the matching tokens need not be stored in the memory node.
Reference: [7] <author> Eric N. Hanson. Gator: </author> <title> A discrimination network suitable for optimizing production rule matching. </title> <type> Technical Report CIS-TR-007-93, </type> <institution> University of Florida CIS Dept., </institution> <month> February </month> <year> 1993. </year> <note> Available by anonymous ftp from ftp.cis.ufl.edu. See README file under /cis/techreports. </note>
Reference-contexts: The rest of this section covers handling of + tokens and tokens. The algorithms for processing tokens are described here in a set-oriented style that is suitable for use in active database systems. A tuple-at-a-time, recursive style of the algorithm suitable for main-memory production systems is presented elsewhere <ref> [7] </ref>. In the following discussion, memory nodes of type ff and fi will be referred to together as memory nodes. Nodes that can have multiple inputs, including fi-memories and P-nodes, will be called multiple input nodes. <p> If so, they are deleted. In turn, more tokens are generated and passed to the successor of the multiple input node. Detailed algorithms for tokens are not presented. A discussion of how Gator supports negated condition elements like those that can be specified in OPS5 [2] is given elsewhere <ref> [7] </ref>. To perform well, the Gator rule condition matching strategy needs a Gator network with a good structure. <p> The formula for the cost of a P-node is similar to the one for a fi-memory except the cost to update the contents of the P-node is a CPU-only cost <ref> [7] </ref>. For brevity, the detailed cost functions for P-nodes are omitted. 5.3.5 Estimating update frequency of fi nodes Formulas given previously have used the frequency functions F i and F d on fi nodes.
Reference: [8] <author> Mohammed Hasan. </author> <title> Optimization of discrimination networks for active databases. </title> <type> Master's thesis, </type> <institution> University of Florida, CIS Department, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: Though the cost estimates are approximate, they are useful for purposes of comparing relative network cost. Query optimizers based on similar approximate cost estimates have proven highly effective [15]. 6 Optimizer implementation and evaluation A Gator optimizer has been implemented in a simulated database environment <ref> [8] </ref>. Inputs to the optimizer are a collection of relation descriptors, and a collection of rule descriptors. A relation descriptor describes a relation though the actual tuples of the relation are not stored.
Reference: [9] <author> Yiannis Ioannidis and Younkyung Cha Kang. </author> <title> Randomized algorithms for optimizing large join queries. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 312-321, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Most will have one to five nodes. The optimization technique discussed above has been implemented as part of a simulator to compare Gator with Rete and TREAT. Randomized optimization strategies such as simulated annealing, iterative improvement, and two-phase optimization <ref> [9, 10] </ref> can also be applied to Gator networks, and are also being investigated [13]. <p> The results presented in this paper build on fundamental query optimization and query plan cost estimation techniques [15]. Work on extended query optimization problems such as optimizing large join queries and considering bushy join trees <ref> [9, 10] </ref> is also relevant. There is also some similarity between the problem of optimizing the discrimination network for a collection of rules, and optimizing an execution plan for simultaneously evaluating a set of queries [4, 14, 16].
Reference: [10] <author> Yiannis Ioannidis and Younkyung Cha Kang. </author> <title> Left-deep vs. bush trees: An analysis of strategy spaces and its implications for query optimization. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 168-177, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Most will have one to five nodes. The optimization technique discussed above has been implemented as part of a simulator to compare Gator with Rete and TREAT. Randomized optimization strategies such as simulated annealing, iterative improvement, and two-phase optimization <ref> [9, 10] </ref> can also be applied to Gator networks, and are also being investigated [13]. <p> The results presented in this paper build on fundamental query optimization and query plan cost estimation techniques [15]. Work on extended query optimization problems such as optimizing large join queries and considering bushy join trees <ref> [9, 10] </ref> is also relevant. There is also some similarity between the problem of optimizing the discrimination network for a collection of rules, and optimizing an execution plan for simultaneously evaluating a set of queries [4, 14, 16].
Reference: [11] <author> Toru Ishida. </author> <title> Optimizing rules in production system programs. </title> <booktitle> In Proc. AAAI National Conference on Artificial Intelligence, </booktitle> <pages> pages 699-704, </pages> <year> 1988. </year>
Reference-contexts: The Gator network is only useful with an optimizer or at least a good set of heuristics for constructing a network for a particular rule or set of rules. The feasibility of generating an optimizer for Rete networks was demonstrated by Ishida <ref> [11] </ref>.
Reference: [12] <author> Daniel P. Miranker. </author> <title> TREAT: A better match algorithm for AI production systems. </title> <booktitle> In Proc. AAAI National Conference on Artificial Intelligence, </booktitle> <pages> pages 42-47, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Both production systems and active database systems must perform rule condition matching during execution to determine which rules to fire. The most successful rule condition testing mechanisms developed for main memory production systems system are discrimination networks known as Rete [5] and TREAT <ref> [12] </ref>. Like production systems, active database systems must also test rule conditions, and we believe some kind of discrimination network will be the best tool for doing so. <p> is far more important in the active database environment than in main-memory production systems because of the volume of data involved, and the fact that some or all of the data may be on secondary storage. 1 Previous work has shown that the TREAT algorithm usually out-performs the Rete algorithm <ref> [12] </ref>. A recent performance study comparing Rete and TREAT in a database environment showed that neither Rete nor TREAT always is best, TREAT normally is better than Rete, but sometimes Rete can vastly outperform TREAT [18]. This lead us to search for a more general structure than Rete or TREAT. <p> The rule condition matching strategy of Gator is similar to the algorithms for rule condition matching in Rete and TREAT <ref> [5, 12] </ref>. Gator performs rule condition matching by propagating tokens through the network. When a tuple is inserted into a base relation table, an insert token, or "+" token, is created by tagging a copy of the tuple with a + tag. <p> Figure 12 (d) has only three fi nodes, each taking inputs from three ff nodes. 7 Related work The Gator network is a descendant of Rete and TREAT <ref> [5, 12] </ref>. The Gator network is only useful with an optimizer or at least a good set of heuristics for constructing a network for a particular rule or set of rules. The feasibility of generating an optimizer for Rete networks was demonstrated by Ishida [11].
Reference: [13] <author> Jayashree Rangarajan. </author> <title> A randomized optimizer for rule condition testing in active databases. </title> <type> Master's thesis, </type> <institution> University of Florida, CIS Department, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: The optimization technique discussed above has been implemented as part of a simulator to compare Gator with Rete and TREAT. Randomized optimization strategies such as simulated annealing, iterative improvement, and two-phase optimization [9, 10] can also be applied to Gator networks, and are also being investigated <ref> [13] </ref>. <p> Rules in any database will rarely contain more than 12 RCE's, thus performance of the dynamic programming-based optimizer will be adequate for most situations. Randomized optimization methods are being investigated to handle rules with more than 12 RCE's <ref> [13] </ref>. 6.4 Generality of the Gator network structure One of the targets of the design of the Gator network optimizer was that it will not favor any particular discrimination network configuration; it will always choose the best, in terms of network cost, regardless of whether it is Rete, TREAT or anything <p> Preliminary results from a study of optimization of Gator networks using randomized algorithms shows that it is feasible to build optimized networks for rules with up to 24 rule condition elements in a few seconds <ref> [13] </ref>. Plans for future work include optimization of Gator networks for multiple rules with subexpression sharing, extending the Ariel system to use the Gator algorithm instead of the currently used modified TREAT strategy, and then testing Gator in a real database environment.
Reference: [14] <author> A. Rosenthal and U.S. Chakravarthy. </author> <title> Anatomy of a modular multiple query optimizer. </title> <booktitle> In Proc. of VLDB Conf., </booktitle> <pages> pages 230-239, </pages> <year> 1988. </year>
Reference-contexts: There is also some similarity between the problem of optimizing the discrimination network for a collection of rules, and optimizing an execution plan for simultaneously evaluating a set of queries <ref> [4, 14, 16] </ref>. A major difference between work on discrimination network optimization and query optimization is that in discrimination network optimization, update frequency is a key variable.
Reference: [15] <author> P. Selinger et al. </author> <title> Access path selection in a relational database management system. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <month> June </month> <year> 1979. </year> <note> (reprinted in [17]). </note>
Reference-contexts: These statistics can be used by the optimizer to compute estimates of selection predicate and join predicate selectivity, just as they are used by query optimizers <ref> [15] </ref>. The most important variable in the problem of discrimination network optimization that is different from those used for query optimization is update frequency. Relative frequency of updates to different memory nodes in a discrimination network can have a major impact on the choice of the optimal structure. <p> S (N ) is the cardinality of a given node. P ages (N ) is the number of pages occupied by N . Sel (ff) is the selectivity of the predicate associated with the ff-memory node ff. This value can be estimated from catalog data using standard techniques <ref> [15] </ref>. J SF (N 1 ; N 2 ) is the estimated join selectivity factor between a pair of nodes N 1 and N 2 . <p> Though the cost estimates are approximate, they are useful for purposes of comparing relative network cost. Query optimizers based on similar approximate cost estimates have proven highly effective <ref> [15] </ref>. 6 Optimizer implementation and evaluation A Gator optimizer has been implemented in a simulated database environment [8]. Inputs to the optimizer are a collection of relation descriptors, and a collection of rule descriptors. A relation descriptor describes a relation though the actual tuples of the relation are not stored. <p> The results presented in this paper build on fundamental query optimization and query plan cost estimation techniques <ref> [15] </ref>. Work on extended query optimization problems such as optimizing large join queries and considering bushy join trees [9, 10] is also relevant. <p> Because the Gator structure is so general, an optimizer is essential to pick a good structure for a rule depending on the environment. A dynamic programming optimization strategy somewhat akin to a query optimization method <ref> [15] </ref>, but taking into consideration additional factors such as update frequency and memory node size, has been designed, implemented, and tested in a simulation. Results show that Gator can be expected to outperform Rete and TREAT by and order of magnitude or more in terms of time in some cases.
Reference: [16] <author> Timos Sellis. </author> <title> Global query optimization. </title> <journal> ACM TODS, </journal> <volume> 13(1) </volume> <pages> 23-52, </pages> <year> 1988. </year>
Reference-contexts: There is also some similarity between the problem of optimizing the discrimination network for a collection of rules, and optimizing an execution plan for simultaneously evaluating a set of queries <ref> [4, 14, 16] </ref>. A major difference between work on discrimination network optimization and query optimization is that in discrimination network optimization, update frequency is a key variable.
Reference: [17] <author> Michael Stonebraker, </author> <title> editor. </title> <booktitle> Readings in Database Systems. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference: [18] <author> Yu-wang Wang and Eric N. Hanson. </author> <title> A performance comparison of the Rete and TREAT algorithms for testing database rule conditions. </title> <booktitle> In Proc. IEEE Data Eng. Conf., </booktitle> <pages> pages 88-97, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: A recent performance study comparing Rete and TREAT in a database environment showed that neither Rete nor TREAT always is best, TREAT normally is better than Rete, but sometimes Rete can vastly outperform TREAT <ref> [18] </ref>. This lead us to search for a more general structure than Rete or TREAT. This paper presents a generalized discrimination network structure called the Gator (Generalized TREAT/Rete) network. Gator networks are general tree structures. Rete and TREAT networks are special cases of Gator.
Reference: [19] <author> S. B. Yao. </author> <title> Approximating block accesses in database organizations. </title> <journal> Communications of the ACM, </journal> <volume> 20(4), </volume> <year> 1977. </year>
Reference-contexts: In the cost formulas to follow, it will sometimes be necessary to estimate the number of pages touched in a memory node of size m blocks when k records in it are accessed at random. For this the following approximation to the Yao function <ref> [19] </ref> is used: Y ao (m; k) = m (1 (1 1=m) k ) if k &gt; 1 13 In the cost functions that follow, unless stated otherwise, it is assumed that any disk pages read are not already in the buffer pool. 5.3.1 Total cost of a Gator network The
References-found: 19

