URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P529.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/preprints.htm
Root-URL: http://www.mcs.anl.gov
Email: @cat.syr.edu  thakur@mcs.anl.gov  
Title: PASSION Runtime Library for the Intel Paragon  
Author: Alok Choudhary Rajesh Bordawekar Sachin More K. Sivaram choudhar, rajesh, ssmore, sivaram Rajeev Thakur 
Address: Syracuse, NY 13244  Argonne, IL 60439  
Affiliation: Dept. of Electrical and Computer Engineering Syracuse University,  Mathematics and Computer Science Division Argonne National Laboratory  
Abstract: We are developing a runtime library which provides a number of routines to perform the I/O required in parallel applications in an efficient and convenient manner. This is part of a project called PASSION, which aims to provide software support for high-performance parallel I/O at the compiler, run-time and file system levels. The PASSION Runtime Library uses a high-level interface which makes it easy for the user to specify the I/O required in the program. The user only needs to specify what portion of the data structure needs to read from or written to the file, and the PASSION routines will perform all the necessary I/O efficiently. This paper gives an overview of the PASSION Runtime Library and describes in detail its high-level interface. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Choudhary, R. Bordawekar, M. Harry, R. Krishnaiyer, R. Ponnusamy, T. Singh, and R. Thakur. </author> <title> PASSION: Parallel and Scalable Software for Input-Output. </title> <type> Technical Report SCCS-636, </type> <institution> NPAC, Syracuse University, </institution> <note> Septem-ber 1994. Also available as CRPC Technical Report CRPC-TR94483-S. </note>
Reference-contexts: I/O may also be required for the purpose of debugging a parallel program. We are working on a project called PASSION (Parallel and Scalable Software for Input-Output) which aims to provide software support for high-performance parallel I/O on distributed memory parallel computers <ref> [1] </ref>. PASSION provides support at the compiler, runtime and file system levels. The PASSION Run-time Library provides a number of optimized routines to perform the I/O required in parallel applications in an efficient manner.
Reference: [2] <author> A. Choudhary, R. Bordawekar, S. More, K. Sivaram, and R. Thakur. </author> <title> A User's Guide for the PASSION Runtime Library Version 1.0. </title> <type> Technical Report SCCS-702, </type> <institution> NPAC, Syracuse University, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: It is a two dimensional array; row i specifies the lower bound, upper bound and stride in dimension i of the section to be accessed. 5 PASSION Interface We describe the interface used by several of the PASSION routines. Further details can be found in the PASSION User's Guide <ref> [2] </ref>. 5.1 Setting up the OCAD All PASSION routines which access arrays require a pointer to the OCAD. The OCAD can be created and initialized as follows : * The OCAD has to first be allocated using the rou tine PASSION malloc OCAD.
Reference: [3] <author> P. Corbett, D. Feitelson, Y. Hsu, J. Prost, M. Snir, S. Fineberg, B. Nitzberg, B. Traversat, and P. Wong. </author> <title> MPI-IO: A Parallel I/O Interface for MPI, Version 0.3. </title> <type> Technical Report NAS-95-002, </type> <institution> NASA Ames Research Center, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: There have also been some proposals for file system interfaces which allow the user to specify strided requests in a single read/write call <ref> [3, 8] </ref>. Specialized interfaces are also provided by other runtime libraries such as [7, 9]. The PASSION Runtime Library provides a very general high-level interface. For example, the user can access arbitrary array sections with strides in each dimension. The array elements can be of any type, even user-defined records.
Reference: [4] <author> P. Corbett, D. Feitelson, J. Prost, and S. Baylor. </author> <title> Parallel Access to Files in the Vesta File System. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 472-481, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: PASSION provides such a high-level interface for the convenience of the user, and a library of routines which support this interface efficiently. Recently, some file systems have been developed, such as the Vesta file system <ref> [4] </ref> and the nCUBE file system [5], which provide some limited support for the user to specify a logical view of the data to be accessed.
Reference: [5] <author> E. DeBenedictis and J. del Rosario. </author> <title> nCUBE Parallel I/O Software. </title> <booktitle> In Proceedings of 11 th International Phoenix Conference on Computers and Communications, </booktitle> <pages> pages 117-124, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: PASSION provides such a high-level interface for the convenience of the user, and a library of routines which support this interface efficiently. Recently, some file systems have been developed, such as the Vesta file system [4] and the nCUBE file system <ref> [5] </ref>, which provide some limited support for the user to specify a logical view of the data to be accessed. There have also been some proposals for file system interfaces which allow the user to specify strided requests in a single read/write call [3, 8].
Reference: [6] <author> J. del Rosario, R. Bordawekar, and A. Choud-hary. </author> <title> Improved Parallel I/O via a Two-Phase Runtime Access Strategy. </title> <booktitle> In Proceedings of the Workshop on I/O in Parallel Computer Systems at IPPS '93, </booktitle> <pages> pages 56-70, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: The disadvantage is that each processor's data may not be stored contiguously in the GAF, resulting in multiple read requests and higher I/O latency time. However, this drawback can be overcome to a large extent by using the Two-Phase Method for I/O <ref> [6, 12] </ref>. Also, in the Global Placement Model, explicit synchronization is required when a processor needs to access data that may have been previously modified by another processor. 2.3 Optimizations A number of optimizations have been incorporated in the PASSION Runtime Library. We briefly describe some of them below. <p> On the other hand, if processors use collective I/O, they can cooperate among themselves to perform I/O efficiently in large chunks and in the right order. The PASSION library performs collective I/O using a Two-Phase Method <ref> [6, 12] </ref>. This can be used to read/write either entire arrays or sections of arrays with/without strides in each dimension. In the Two-Phase Method, I/O is done in two phases. In the first phase, processors cooperate to read data in large contiguous chunks.
Reference: [7] <author> N. Galbreath, W. Gropp, and D. Levine. </author> <title> Applications-Driven Parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 462-471, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: This results in the I/O system being the bottleneck in many cases. There are a number of reasons why I/O may be needed in a parallel program <ref> [7] </ref>. In many applications, all the data required by the program cannot fit in main memory and so has to be stored in files on disks. Such programs are called out-of-core programs. In out-of-core programs, I/O is needed to access the entire data set. <p> There have also been some proposals for file system interfaces which allow the user to specify strided requests in a single read/write call [3, 8]. Specialized interfaces are also provided by other runtime libraries such as <ref> [7, 9] </ref>. The PASSION Runtime Library provides a very general high-level interface. For example, the user can access arbitrary array sections with strides in each dimension. The array elements can be of any type, even user-defined records.
Reference: [8] <author> N. Nieuwejaar and D. Kotz. </author> <title> Low-level Interfaces for High-level Parallel I/O. </title> <booktitle> In Proceedings of the Third Annual Workshop on I/O in Parallel and Distributed Systems, </booktitle> <pages> pages 47-62, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: There have also been some proposals for file system interfaces which allow the user to specify strided requests in a single read/write call <ref> [3, 8] </ref>. Specialized interfaces are also provided by other runtime libraries such as [7, 9]. The PASSION Runtime Library provides a very general high-level interface. For example, the user can access arbitrary array sections with strides in each dimension. The array elements can be of any type, even user-defined records.
Reference: [9] <author> K. Seamons and M. Winslett. </author> <title> An Efficient Abstract Interface for Multidimensional Array I/O. </title> <booktitle> In Proceedings of Supercomputing '94, </booktitle> <pages> pages 650-659, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: There have also been some proposals for file system interfaces which allow the user to specify strided requests in a single read/write call [3, 8]. Specialized interfaces are also provided by other runtime libraries such as <ref> [7, 9] </ref>. The PASSION Runtime Library provides a very general high-level interface. For example, the user can access arbitrary array sections with strides in each dimension. The array elements can be of any type, even user-defined records.
Reference: [10] <author> R. Thakur. </author> <title> Runtime Support for In-Core and Out-of-Core Data-Parallel Programs. </title> <type> PhD thesis, </type> <institution> Dept. of Electrical and Computer Engineering, Syracuse University, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: A number of optimizations, such as two-phase I/O, data sieving, data prefetch-ing and data reuse, have been incorporated in the library <ref> [11, 12, 10] </ref>. 2.1 Architectural Model The architectural model assumed by PASSION is that of any general distributed memory computer in which the processors are connected together in some fashion. The system is assumed to be provided with a set of disks and I/O nodes. <p> We briefly describe some of them below. Further details and performance results are given in <ref> [11, 12, 10] </ref>. 2.3.1 Collective I/O Using a Two-Phase Method In data parallel programs, all processors perform similar operations but on different data sets. <p> In the Two-Phase Method, I/O is done in two phases. In the first phase, processors cooperate to read data in large contiguous chunks. A dynamic scheme is used to partition the I/O workload among processors, depending on the access requests <ref> [12, 10] </ref>. In the second phase, data is redistributed among processors using interprocessor communication, so that each processor gets the data it requested. <p> The advantage of data sieving is that it results in higher granularity data transfer, though extra data is also transferred in the process. We found that data sieving provides considerable performance improvement <ref> [11, 10] </ref>. 2.3.3 Data Prefetching In both the Local and Global Placement Models, program execution proceeds by fetching data from a file, performing the computation on the data and writing the results back to a file. This is repeated on other data sets till the end of the program. <p> This is called data prefetching. Since the read request is asynchronous, the reading of the next data set can be overlapped with the computation being performed on the current data set. If the computation time is comparable to the I/O time, this can result in significant performance improvement <ref> [11, 10] </ref>. 2.3.4 Data Reuse In many applications, a portion of the current data set fetched from the file is also needed for computation on the next data set. <p> Data sieving is used to read strided sections <ref> [11, 10] </ref>. This routine reads the array section from the local array file to the specified location in memory. The shape of the section is retained. To save memory, the section is stored without stride in memory, even if there was a stride in the OCLA. 2. <p> This routine uses the Extended Two-Phase Method described in <ref> [12, 10] </ref>. 5.4.2 Data Prefetching The PASSION library provides routines for prefetch-ing data before it is needed. Prefetching is basically a non-blocking read operation. This can be used to overlap computation with I/O and thus reduce the time spent in waiting for I/O. <p> Data sieving is used to write strided sections <ref> [11, 10] </ref>. <p> The Extended Two-Phase Method is used for writing sections <ref> [12, 10] </ref>. 6 Conclusions Portable high-level interfaces, such as the PASSION interface, make it easier for the user to specify the I/O required in parallel applications.
Reference: [11] <author> R. Thakur, R. Bordawekar, A. Choudhary, R. Ponnusamy, and T. Singh. </author> <title> PASSION Run-time Library for Parallel I/O. </title> <booktitle> In Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <pages> pages 119-128, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: A number of optimizations, such as two-phase I/O, data sieving, data prefetch-ing and data reuse, have been incorporated in the library <ref> [11, 12, 10] </ref>. 2.1 Architectural Model The architectural model assumed by PASSION is that of any general distributed memory computer in which the processors are connected together in some fashion. The system is assumed to be provided with a set of disks and I/O nodes. <p> We briefly describe some of them below. Further details and performance results are given in <ref> [11, 12, 10] </ref>. 2.3.1 Collective I/O Using a Two-Phase Method In data parallel programs, all processors perform similar operations but on different data sets. <p> This requires as many reads as the number of elements in the section. The major disadvantage of this method is the large number of I/O calls and low granularity of data transfer. Since I/O latency is very high, this method proves to be very expensive <ref> [11] </ref>. An optimization called data sieving is used in PASSION to read/write strided data efficiently. For reading a strided section, instead of reading only the requested elements, large contiguous chunks of data are read at a time into a temporary buffer in main memory. This includes unwanted data. <p> The advantage of data sieving is that it results in higher granularity data transfer, though extra data is also transferred in the process. We found that data sieving provides considerable performance improvement <ref> [11, 10] </ref>. 2.3.3 Data Prefetching In both the Local and Global Placement Models, program execution proceeds by fetching data from a file, performing the computation on the data and writing the results back to a file. This is repeated on other data sets till the end of the program. <p> This is called data prefetching. Since the read request is asynchronous, the reading of the next data set can be overlapped with the computation being performed on the current data set. If the computation time is comparable to the I/O time, this can result in significant performance improvement <ref> [11, 10] </ref>. 2.3.4 Data Reuse In many applications, a portion of the current data set fetched from the file is also needed for computation on the next data set. <p> Data sieving is used to read strided sections <ref> [11, 10] </ref>. This routine reads the array section from the local array file to the specified location in memory. The shape of the section is retained. To save memory, the section is stored without stride in memory, even if there was a stride in the OCLA. 2. <p> Data sieving is used to write strided sections <ref> [11, 10] </ref>.
Reference: [12] <author> R. Thakur and A. Choudhary. </author> <title> Collective I/O Using an Extended Two-Phase Method with Dynamic Partitioning. </title> <type> Technical Report SCCS-704, </type> <institution> NPAC, Syracuse University, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: A number of optimizations, such as two-phase I/O, data sieving, data prefetch-ing and data reuse, have been incorporated in the library <ref> [11, 12, 10] </ref>. 2.1 Architectural Model The architectural model assumed by PASSION is that of any general distributed memory computer in which the processors are connected together in some fashion. The system is assumed to be provided with a set of disks and I/O nodes. <p> The disadvantage is that each processor's data may not be stored contiguously in the GAF, resulting in multiple read requests and higher I/O latency time. However, this drawback can be overcome to a large extent by using the Two-Phase Method for I/O <ref> [6, 12] </ref>. Also, in the Global Placement Model, explicit synchronization is required when a processor needs to access data that may have been previously modified by another processor. 2.3 Optimizations A number of optimizations have been incorporated in the PASSION Runtime Library. We briefly describe some of them below. <p> We briefly describe some of them below. Further details and performance results are given in <ref> [11, 12, 10] </ref>. 2.3.1 Collective I/O Using a Two-Phase Method In data parallel programs, all processors perform similar operations but on different data sets. <p> On the other hand, if processors use collective I/O, they can cooperate among themselves to perform I/O efficiently in large chunks and in the right order. The PASSION library performs collective I/O using a Two-Phase Method <ref> [6, 12] </ref>. This can be used to read/write either entire arrays or sections of arrays with/without strides in each dimension. In the Two-Phase Method, I/O is done in two phases. In the first phase, processors cooperate to read data in large contiguous chunks. <p> In the Two-Phase Method, I/O is done in two phases. In the first phase, processors cooperate to read data in large contiguous chunks. A dynamic scheme is used to partition the I/O workload among processors, depending on the access requests <ref> [12, 10] </ref>. In the second phase, data is redistributed among processors using interprocessor communication, so that each processor gets the data it requested. <p> This routine uses the Extended Two-Phase Method described in <ref> [12, 10] </ref>. 5.4.2 Data Prefetching The PASSION library provides routines for prefetch-ing data before it is needed. Prefetching is basically a non-blocking read operation. This can be used to overlap computation with I/O and thus reduce the time spent in waiting for I/O. <p> The Extended Two-Phase Method is used for writing sections <ref> [12, 10] </ref>. 6 Conclusions Portable high-level interfaces, such as the PASSION interface, make it easier for the user to specify the I/O required in parallel applications.
References-found: 12

