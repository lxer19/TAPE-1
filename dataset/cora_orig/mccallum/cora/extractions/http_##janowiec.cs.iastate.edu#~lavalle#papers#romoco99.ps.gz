URL: http://janowiec.cs.iastate.edu/~lavalle/papers/romoco99.ps.gz
Refering-URL: http://janowiec.cs.iastate.edu/~lavalle/
Root-URL: http://www.cs.iastate.edu
Email: fprasanth,lavalleg@cs.iastate.edu  
Phone: 1-515-294-2259 1-515-294-0258 (FAX)  
Title: Efficient Computation of Optimal Navigation Functions for Nonholonomic Planning  
Author: Prashanth Konkimalla Steven M. LaValle 
Address: Ames, IA 50011 USA  
Affiliation: Department of Computer Science Iowa State University  
Abstract: We present a fast, numerical approach to computing optimal feedback motion strategies for a nonholo-nomic robot in a cluttered environment. Although many techniques exist to compute navigation functions that can incorporate feedback, none of these methods is directly able to determine optimal strategies for general nonholonomic systems. Our approach builds on previous techniques in numerical optimal control, and on our previous efforts in developing algorithms that compute feedback strategies for problems that involve nondeterministic and stochastic uncertainties in prediction. The proposed approach efficiently computes an optimal navigation function for nonholonomic systems by exploiting two ideas: 1) the principle of Dijkstra's algorithm can be generalized to continuous configuration spaces and non-holonomic systems, and 2) a simplicial mesh representation can be used to reduce the complexity of numerical interpolation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, J.-C. Latombe, R. Motwani, and P. Raghavan. </author> <title> Nonholonomic path planning for pushing a disk among obstacles. </title> <booktitle> In IEEE Int. Conf. </booktitle> <institution> Robot. & Autom., </institution> <year> 1997. </year>
Reference-contexts: Many of these systems involve nonholo-nomic constraints due to contacts between the robot and its environment. For example, these constraints can arise from wheeled mobile robots [3, 11, 25], or manipulation of an object without form or force closure <ref> [1, 19] </ref>. We are particularly interested in computing motion strategies for problems that involve the following assumptions: 1. A complete geometric model is known for the robot and the static part of its environment. 2. <p> Given any initial configuration, the car goes to the nearest goal, thus demonstrating the optimality of the solution. b) The level sets of the cost-to-go function for a particular orientation of a car that can go only forward. 5.2 Push-Planning In the case of the push planning problem <ref> [1, 19] </ref>, the robot's task is to push a box to the goal while avoiding obstacles. The box can be pushed from along one of two edges (which are highlighted in the figure). It is assumed that the robot makes a line contact with the robot.
Reference: [2] <author> J. Barraquand and J.-C. Latombe. </author> <title> Nonholonomic multibody mobile robots: Controllability and motion planning in the presence of obstacles. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 121-155, </pages> <year> 1993. </year>
Reference-contexts: Most of these methods do not produce optimal paths (an exception is the case of a car-like robot with reverse), and in general, these methods do not attempt to construct a navigation function or feedback strategy. The method presented in <ref> [2] </ref> is perhaps most related to ours because it is able to find optimal solutions for very general nonholonomic problems; however, the key distinction is that the method in [2] does not construct an optimal navigation function. <p> The method presented in <ref> [2] </ref> is perhaps most related to ours because it is able to find optimal solutions for very general nonholonomic problems; however, the key distinction is that the method in [2] does not construct an optimal navigation function. Our goal is to present general, numerical approach to computing an optimal navigation function for a non-holonomic planning problem.
Reference: [3] <author> L. G. Bushnell, D. M. Tilbury, and S. S. Sastry. </author> <title> Steering three-input nonholonomic systems: the fire truck example. </title> <journal> Int. J. Robot. Res., </journal> <volume> 14(4) </volume> <pages> 366-381, </pages> <year> 1995. </year>
Reference-contexts: Many of these systems involve nonholo-nomic constraints due to contacts between the robot and its environment. For example, these constraints can arise from wheeled mobile robots <ref> [3, 11, 25] </ref>, or manipulation of an object without form or force closure [1, 19]. We are particularly interested in computing motion strategies for problems that involve the following assumptions: 1. A complete geometric model is known for the robot and the static part of its environment. 2.
Reference: [4] <author> J. Hershberger and S. Suri. </author> <title> Efficient computation of Euclidean shortest paths in the plane. </title> <booktitle> In Proc. 34th Annual IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 508-517, </pages> <year> 1995. </year>
Reference-contexts: The second condition motivates us to define a navigation function or potential function that is free of local minima and can be used to define a feedback motion strategy. Navigation functions have been proposed for this purpose in many robotics works (e.g., [6, 22, 24]). The continuous Dijkstra paradigm <ref> [4, 20] </ref> has been developed for the 2D shortest-path problem, using techniques from computational geometry. Level-set methods have also been proposed to compute navigation functions for holonomic planning problems [7].
Reference: [5] <author> L. E. Kavraki. </author> <title> Computation of configuration-space obstacles using the Fast Fourier Transform. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 11(3) </volume> <pages> 408-413, </pages> <year> 1995. </year>
Reference-contexts: Figure 6 shows the computation times for the problem in Figure 1. The precomputation time is shown separately, which is a simple bitmap computation of the configuration space (it can be accomplished by much fast techniques than what is shown here; see, for example, <ref> [5] </ref>). connected components. The navigation function naturally steers the robot to the appropriate component of G. point car-like robot that can only go forward.
Reference: [6] <author> O. Khatib. </author> <title> Real-time obstacle avoidance for manipula tors and mobile robots. </title> <journal> Int. J. Robot. Res., </journal> <volume> 5(1) </volume> <pages> 90-98, </pages> <year> 1986. </year>
Reference-contexts: The second condition motivates us to define a navigation function or potential function that is free of local minima and can be used to define a feedback motion strategy. Navigation functions have been proposed for this purpose in many robotics works (e.g., <ref> [6, 22, 24] </ref>). The continuous Dijkstra paradigm [4, 20] has been developed for the 2D shortest-path problem, using techniques from computational geometry. Level-set methods have also been proposed to compute navigation functions for holonomic planning problems [7].
Reference: [7] <author> R. Kimmel, N. Kiryati, and A. M. Bruckstein. </author> <title> Multi-valued distance maps for motion planning on surfaces with moving obstacles. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 14(3) </volume> <pages> 427-435, </pages> <month> June </month> <year> 1998. </year>
Reference-contexts: Navigation functions have been proposed for this purpose in many robotics works (e.g., [6, 22, 24]). The continuous Dijkstra paradigm [4, 20] has been developed for the 2D shortest-path problem, using techniques from computational geometry. Level-set methods have also been proposed to compute navigation functions for holonomic planning problems <ref> [7] </ref>. Although existing methods apply to a broad class of problems, they do not directly 1 apply to our problems because of inclusion of both the third and fourth conditions: optimality and nonholon-omy.
Reference: [8] <author> R. E. Larson. </author> <title> A survey of dynamic programming computational procedures. </title> <journal> IEEE Trans. Autom. Control, </journal> <volume> 12(6) </volume> <pages> 767-774, </pages> <month> December </month> <year> 1967. </year>
Reference-contexts: Now we need to figure out how many neighboring control points need to be considered, which are they, and how to interpolate the cost-to-go at these neighbors. 3.1 A Simple Interpolation Scheme Linear interpolation schemes have been used extensively for numerical optimal control computations (e.g., <ref> [8, 9] </ref>). We can define an interpolation scheme as follows. Let us consider a 3D C-space, although the ideas apply to higher dimensions. Let C be divided into cubes with control points as vertices.
Reference: [9] <author> R. E. Larson and J. L. Casti. </author> <title> Principles of Dynamic Programming, Part II. </title> <publisher> Dekker, </publisher> <address> New York, NY, </address> <year> 1982. </year>
Reference-contexts: The expression _x = f (x (t); u (t)) can be approximated in discrete time as a difference equation, x k+1 = f (x k ; u k ). For stationary systems the cost-to-go function can be expressed as <ref> [9] </ref>: u k in which l k (x k ; u k ) is the loss (1) that accumulates over time t. Our computational approach can be considered as a fast numerical technique that approximately solves this difference equation. <p> Now we need to figure out how many neighboring control points need to be considered, which are they, and how to interpolate the cost-to-go at these neighbors. 3.1 A Simple Interpolation Scheme Linear interpolation schemes have been used extensively for numerical optimal control computations (e.g., <ref> [8, 9] </ref>). We can define an interpolation scheme as follows. Let us consider a 3D C-space, although the ideas apply to higher dimensions. Let C be divided into cubes with control points as vertices.
Reference: [10] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: The first condition is reasonable for many problems, and forms the basis for the vast majority of motion planning research (see, for example, <ref> [10] </ref>). The second condition motivates us to define a navigation function or potential function that is free of local minima and can be used to define a feedback motion strategy. Navigation functions have been proposed for this purpose in many robotics works (e.g., [6, 22, 24]).
Reference: [11] <author> J.-P. Laumond, P. E. Jacobs, M. Taix, and R. M. Mur-ray. </author> <title> A motion planner for nonholonomic mobile robots. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 10(5) </volume> <pages> 577-593, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Many of these systems involve nonholo-nomic constraints due to contacts between the robot and its environment. For example, these constraints can arise from wheeled mobile robots <ref> [3, 11, 25] </ref>, or manipulation of an object without form or force closure [1, 19]. We are particularly interested in computing motion strategies for problems that involve the following assumptions: 1. A complete geometric model is known for the robot and the static part of its environment. 2.
Reference: [12] <author> J. P. Laumond, S. Sekhavat, and F. Lamiraux. </author> <title> Guidelines in nonholonomic motion planning for mobile robots. </title> <editor> In J.-P. Laumond, editor, </editor> <booktitle> Robot Motion Plannning and Control, </booktitle> <pages> pages 1-53. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1998. </year>
Reference-contexts: Many computational techniques exist for computing optimal solutions to holonomic problems, and many others exist for computing a path for nonholo-nomic problems. A recent survey of nonholonomic planning methods appears in <ref> [12] </ref>. Most of these methods do not produce optimal paths (an exception is the case of a car-like robot with reverse), and in general, these methods do not attempt to construct a navigation function or feedback strategy.
Reference: [13] <author> S. M. LaValle. </author> <title> A Game-Theoretic Framework for Robot Motion Planning. </title> <type> PhD thesis, </type> <institution> University of Illinois, Urbana, IL, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Two improvements are made over our previous approach to the problem of numerically computing optimal cost-to-go functions <ref> [13] </ref>: 1) The solution can be obtained in a single iteration over the configuration space; 2) the complexity of the interpolation has been reduced from O (2 n ) to O (n lg n). The technique developed is general in nature and can be extended to higher degree-of-freedom problems.
Reference: [14] <author> S. M. LaValle. </author> <title> Numerical computation of optimal navigation functions on a simplicial complex. </title> <editor> In P. Agarwal, L. Kavraki, and M. Mason, editors, </editor> <title> Robotics: The Algorithmic Perspective. A K Peters, </title> <address> Wellesley, MA, </address> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: The improvement is also significant in practice (i.e., the scaling constant in the analysis is small). 4 The Algorithm This algorithm is an adaptation of the method in <ref> [14] </ref>, and it performs a kind of wavefront propagation by iteratively constructing nonholonomic preimages. The n-dimensional C-space is divided into simplexes as described above. Let p be a control point, and let P be the set of all control points.
Reference: [15] <author> S. M. LaValle and S. A. Hutchinson. </author> <title> An objective-based framework for motion planning under sensing and control uncertainties. </title> <journal> International Journal of Robotics Research, </journal> <volume> 17(1) </volume> <pages> 19-42, </pages> <month> January </month> <year> 1998. </year>
Reference-contexts: In previous efforts we have demonstrated the use of numerical dynamic programming computations with interpolation <ref> [15, 16] </ref> for computing optimal feedback strategies for problems that involve nondeterministic and stochastic uncertainties in prediction. The current approach can be considered as a significant advancement over the techniques in [15, 16] that is much faster in practice (typically by a couple of orders of magnitude). <p> In previous efforts we have demonstrated the use of numerical dynamic programming computations with interpolation <ref> [15, 16] </ref> for computing optimal feedback strategies for problems that involve nondeterministic and stochastic uncertainties in prediction. The current approach can be considered as a significant advancement over the techniques in [15, 16] that is much faster in practice (typically by a couple of orders of magnitude). The current approach applies both to the problems defined in [15, 16] and to the nonholonomic planning problem, which the primary focus of this paper. 2 Problem Formulation Our problem is defined in a bounded <p> The current approach can be considered as a significant advancement over the techniques in <ref> [15, 16] </ref> that is much faster in practice (typically by a couple of orders of magnitude). The current approach applies both to the problems defined in [15, 16] and to the nonholonomic planning problem, which the primary focus of this paper. 2 Problem Formulation Our problem is defined in a bounded 2D or 3D world, W &lt; N , such that N = 2 or N = 3.
Reference: [16] <author> S. M. LaValle and R. Sharma. </author> <title> On motion planning in changing, partially-predictable environments. </title> <journal> International Journal of Robotics Research, </journal> <volume> 16(6) </volume> <pages> 775-805, </pages> <month> December </month> <year> 1997. </year>
Reference-contexts: In previous efforts we have demonstrated the use of numerical dynamic programming computations with interpolation <ref> [15, 16] </ref> for computing optimal feedback strategies for problems that involve nondeterministic and stochastic uncertainties in prediction. The current approach can be considered as a significant advancement over the techniques in [15, 16] that is much faster in practice (typically by a couple of orders of magnitude). <p> In previous efforts we have demonstrated the use of numerical dynamic programming computations with interpolation <ref> [15, 16] </ref> for computing optimal feedback strategies for problems that involve nondeterministic and stochastic uncertainties in prediction. The current approach can be considered as a significant advancement over the techniques in [15, 16] that is much faster in practice (typically by a couple of orders of magnitude). The current approach applies both to the problems defined in [15, 16] and to the nonholonomic planning problem, which the primary focus of this paper. 2 Problem Formulation Our problem is defined in a bounded <p> The current approach can be considered as a significant advancement over the techniques in <ref> [15, 16] </ref> that is much faster in practice (typically by a couple of orders of magnitude). The current approach applies both to the problems defined in [15, 16] and to the nonholonomic planning problem, which the primary focus of this paper. 2 Problem Formulation Our problem is defined in a bounded 2D or 3D world, W &lt; N , such that N = 2 or N = 3.
Reference: [17] <author> Carl W. Lee. </author> <title> Subdivisions and Triangulations of Poly-topes. </title> <publisher> CRC Press, </publisher> <year> 1997. </year>
Reference-contexts: Dividing the space into cubes can make the point location problem easy, but computing the cost-to-go (step 3) becomes complicated. To overcome this problem, we further divide the cube into tetrahedra (in general, we divide hy-percubes into simplexes). It has been shown in <ref> [17] </ref> that an nD-cube must be di vided into at least 2 n (n + 1) (n+1)=2 n! simplexes. Thus, a 2D-cube (a square) can be divided into no less than two triangles (2D-simplex).
Reference: [18] <author> A. De Luca, G. Oriolo, and C. Samson. </author> <title> Feedback control of a nonholonomic car-like robot. </title> <editor> In J.-P. Lau-mond, editor, </editor> <booktitle> Robot Motion Plannning and Control, </booktitle> <pages> pages 171-253. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1998. </year>
Reference-contexts: We also allow the optimal motion strategy to have nonsmooth inputs. Under the restriction to smooth inputs, Brockett's condition would imply that time-varying feedback control is needed. A recent overview of dynamics, control, and tracking issues for car-like robots is given in <ref> [18] </ref> Emphasis is placed on developing a technique that can be applied to a broad set of problems, as opposed to requiring major adjustments to be made for a particular problem.
Reference: [19] <author> K. M. Lynch and M. T. Mason. </author> <title> Stable pushing: Mechanics, controllability, and planning. </title> <journal> Int. J. Robot. Res., </journal> <volume> 15(6) </volume> <pages> 533-556, </pages> <year> 1996. </year>
Reference-contexts: Many of these systems involve nonholo-nomic constraints due to contacts between the robot and its environment. For example, these constraints can arise from wheeled mobile robots [3, 11, 25], or manipulation of an object without form or force closure <ref> [1, 19] </ref>. We are particularly interested in computing motion strategies for problems that involve the following assumptions: 1. A complete geometric model is known for the robot and the static part of its environment. 2. <p> Given any initial configuration, the car goes to the nearest goal, thus demonstrating the optimality of the solution. b) The level sets of the cost-to-go function for a particular orientation of a car that can go only forward. 5.2 Push-Planning In the case of the push planning problem <ref> [1, 19] </ref>, the robot's task is to push a box to the goal while avoiding obstacles. The box can be pushed from along one of two edges (which are highlighted in the figure). It is assumed that the robot makes a line contact with the robot.
Reference: [20] <author> J. S. B. Mitchell. </author> <title> Planning Shortest Paths. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1986. </year>
Reference-contexts: The second condition motivates us to define a navigation function or potential function that is free of local minima and can be used to define a feedback motion strategy. Navigation functions have been proposed for this purpose in many robotics works (e.g., [6, 22, 24]). The continuous Dijkstra paradigm <ref> [4, 20] </ref> has been developed for the 2D shortest-path problem, using techniques from computational geometry. Level-set methods have also been proposed to compute navigation functions for holonomic planning problems [7].
Reference: [21] <author> J. A. Reeds and L. A. Shepp. </author> <title> Optimal paths for a car that goes both forwards and backwards. </title> <journal> Pacific J. Math., </journal> <volume> 145(2) </volume> <pages> 367-393, </pages> <year> 1990. </year>
Reference-contexts: An optimal strategy is requested that brings the robot from an initial configuration to a goal region. 4. Nonholonomic constraints exist for which there are no analytical solutions to the shortest path problem (e.g., there exist solutions in the case of Reeds and Shepp curves <ref> [21] </ref>). The first condition is reasonable for many problems, and forms the basis for the vast majority of motion planning research (see, for example, [10]).
Reference: [22] <author> E. Rimon and D. E. Koditschek. </author> <title> Exact robot navigation using artificial potential fields. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 8(5) </volume> <pages> 501-518, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The second condition motivates us to define a navigation function or potential function that is free of local minima and can be used to define a feedback motion strategy. Navigation functions have been proposed for this purpose in many robotics works (e.g., <ref> [6, 22, 24] </ref>). The continuous Dijkstra paradigm [4, 20] has been developed for the 2D shortest-path problem, using techniques from computational geometry. Level-set methods have also been proposed to compute navigation functions for holonomic planning problems [7]. <p> In most motion planning research the solution takes the form of a path; however, in our case the solution involves configuration feedback. Therefore, we construct a real-valued function on the configuration space that is used for navigation in the sense proposed in <ref> [22] </ref>. Let the cost-to-go function, L fl : C free ! &lt; [ f1g repre sent the loss according to (1), that would be received by choosing the optimal control input and driving the system until time t = T f . <p> Instead of precomputing a path, the 5 a. b. added for switching edges; b) when a finite cost is added for switching edges. solution takes the form of a navigation function, as considered in <ref> [22] </ref>.
Reference: [23] <author> J. J. Rotman. </author> <title> Introduction to Algebraic Topology. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: It is important to note that we do not explicitly store simplexes; only the control points are stored. In each simplex, the interpolation weights are selected as the barycentric coordinates <ref> [23] </ref>.
Reference: [24] <author> S. Sundar and Z. Shiller. </author> <title> Optimal obstacle avoidance based on the Hamilton-Jacobi-Bellman equation. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 13(2) </volume> <pages> 305-310, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: The second condition motivates us to define a navigation function or potential function that is free of local minima and can be used to define a feedback motion strategy. Navigation functions have been proposed for this purpose in many robotics works (e.g., <ref> [6, 22, 24] </ref>). The continuous Dijkstra paradigm [4, 20] has been developed for the 2D shortest-path problem, using techniques from computational geometry. Level-set methods have also been proposed to compute navigation functions for holonomic planning problems [7]. <p> The cost-to-go is also referred to as a value function in <ref> [24] </ref>. We next define a discrete-time approximation in which actions are performed at each t. The expression _x = f (x (t); u (t)) can be approximated in discrete time as a difference equation, x k+1 = f (x k ; u k ).
Reference: [25] <author> P. Svestka and M. H. Overmars. </author> <title> Coordinated motion planning for multiple car-like robots using probabilistic roadmaps. </title> <booktitle> In IEEE Int. Conf. Robot. & Autom., </booktitle> <pages> pages 1631-1636, </pages> <year> 1995. </year>
Reference-contexts: Many of these systems involve nonholo-nomic constraints due to contacts between the robot and its environment. For example, these constraints can arise from wheeled mobile robots <ref> [3, 11, 25] </ref>, or manipulation of an object without form or force closure [1, 19]. We are particularly interested in computing motion strategies for problems that involve the following assumptions: 1. A complete geometric model is known for the robot and the static part of its environment. 2.
References-found: 25

