URL: http://www.cs.vt.edu/~irchen/ps/cj95.3.ps
Refering-URL: http://www.cs.vt.edu/~irchen/
Root-URL: http://www.cs.vt.edu
Title: Analysis of Probabilistic Error Checking Procedures on Storage Systems  
Author: Ing-Ray Chen and I-Ling Yen 
Keyword: Key words: Error checking/recovery, storage systems, fault tolerance, performability, reliability, performance, Markov modeling, periodic error checking.  
Abstract: Conventionally, error checking on storage systems is performed on-the-fly (with probability 1) as the storage system is being accessed in order to improve the reliability of the storage system. However, such a procedure may needlessly cause degraded performance due to the extra processing time needed for executing the error checking code. In this paper, we consider fault-tolerant storage systems designed to provide continuous services to customers over a mission period and the design goal is (a) to maximize the cumulative number of requests that the storage system can service without failure over the mission period, or (b) to be able to service at least a given number of requests without failure over the mission period with its system reliability maximized. We develop a Markov reward model to identify the design conditions under which probabilistic error checking procedures can better satisfy this design goal than conventional on-the-fly error checking procedures. The result helps determine the best time interval between successive executions of the error checking procedure to meet such design goal and is useful for designing adaptive systems that can temporarily tradeoff reliability for performance to meet design goal (b) in response to dynamic workload changes in the environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft and J.D. Ullman, </author> <title> Data Structures and Algorithms, </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: The 1-correctable doubly linked list is useful, for example, in hashing and buddy systems <ref> [1] </ref>. The storage system is embedded within a larger open system.
Reference: [2] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman, </author> <title> Concurrency Control and Recovery in Database Systems, 1987, </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Further, the storage system is assumed to be an atomic entity <ref> [2] </ref> so that a request is either fully serviced or not serviced at all. The storage system receives access operations to process the information stored in the system and sends back responses on a per access basis.
Reference: [3] <author> T.E. Bihari and K. Schwan, </author> <title> "Dynamic adaptation of real-time software," </title> <journal> ACM Trans. Computer Systems, </journal> <volume> Vol. 9, No. 2, </volume> <month> May </month> <year> 1991, </year> <pages> pp. 143-174. </pages>
Reference-contexts: Example application systems include dynamic adaptive systems such as CHAOS <ref> [3] </ref> that must adapt to changes in the environment to tune the system to meet required performance and reliability goals demanded by the environment, given bounded computational resources.
Reference: [4] <author> I.R. Chen and S.A. Banawan, </author> <title> "A reduced Markov model for the performance analysis of data structure servers with periodic maintenance," </title> <journal> The Computer Journal, </journal> <volume> Vol. 35, </volume> <year> 1992, </year> <month> A363-A368. </month>
Reference-contexts: In the literature, many research efforts have been reported in the area of performance evaluation of periodic data structure maintenance algorithms for optimizing the service rate of data structure servers (e.g., <ref> [4, 5, 6] </ref>), but no performance analysis of periodic error checking algorithms for fault-tolerant storage systems has yet been carried out. Conceivably, a long error checking interval will increase the probability of multiple errors, thus making the 2 system unreliable.
Reference: [5] <author> I.R. Chen and S.A. Banawan, </author> <title> "Modeling and analysis of concurrent maintenance policies for data structures using pointers," </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. 19, No. 9, </volume> <month> Sept. </month> <year> 1993, </year> <pages> pp. 902-911. </pages>
Reference-contexts: In the literature, many research efforts have been reported in the area of performance evaluation of periodic data structure maintenance algorithms for optimizing the service rate of data structure servers (e.g., <ref> [4, 5, 6] </ref>), but no performance analysis of periodic error checking algorithms for fault-tolerant storage systems has yet been carried out. Conceivably, a long error checking interval will increase the probability of multiple errors, thus making the 2 system unreliable.
Reference: [6] <author> I.R. Chen, </author> <title> "A degradable B link -tree with periodic data reorganization," </title> <journal> The Computer Journal, </journal> <note> to appear. </note>
Reference-contexts: In the literature, many research efforts have been reported in the area of performance evaluation of periodic data structure maintenance algorithms for optimizing the service rate of data structure servers (e.g., <ref> [4, 5, 6] </ref>), but no performance analysis of periodic error checking algorithms for fault-tolerant storage systems has yet been carried out. Conceivably, a long error checking interval will increase the probability of multiple errors, thus making the 2 system unreliable.
Reference: [7] <author> I.R. Chen and I.L. Yen, </author> <title> "Probabilistic Error Checking on Storage Systems," </title> <type> Technical Report NCKU-IIE-95-05, </type> <institution> Institute of Information Engineering, National Cheng-Kung University, Tainan, Taiwan, </institution> <year> 1995. </year>
Reference-contexts: q Q Qk Q Q Qk Q Q Qk q Q - - fl - fi fi fi fi fi fi fi fiffi fl + q fl + q fl error check is being performed considers a nonzero error rate during these periods is similar to the one given above <ref> [7] </ref>. 4. An error checking operation takes place with probability q following every access operation. It is an action which may occur when the system contains 0 or 1 error.
Reference: [8] <author> I.J. Davis, </author> <title> "Local correction of helix(k) lists," </title> <journal> IEEE Trans. Comp., </journal> <volume> Vol. 38, No. 5, </volume> <month> May </month> <year> 1989, </year> <pages> pp. 718-724. </pages>
Reference-contexts: 1 Introduction A storage system with error checking/recovery capability must incorporate redundant data for discovering and recovering from errors caused by hardware or software faults. An example of such a storage system is a robust data structure <ref> [8, 10, 14, 18] </ref> which contains useful data as fl Institute of Information Engineering, National Cheng Kung University; No. 1, University Road; Tainan, Taiwan; E-mail: irchen@iie.ncku.edu.tw. y Department of Computer Science, Michigan State University, East Lansing, MI 48824-1027; E-mail: yen@cps.msu.edu. well as structural, redundant information such as extra identifier fields, additional
Reference: [9] <author> G.L. Feng, T.R.N. Rao and M.S. Kolluru, </author> <title> "Error correcting codes over Z 2 m for algorithm-based fault tolerance," </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. 43, No. 3, </volume> <month> March </month> <year> 1993, </year> <pages> pp. 370-373. </pages>
Reference-contexts: In general, a storage system formed this way can cope with more errors by incorporating more redundant information into the system. Other examples include error correcting codes (ECCs) derived from Hamming codes [12], such as those based on algorithm-based fault-tolerance <ref> [9, 11, 13] </ref>. Naturally, due to the use of redundancy, the reliability of the storage system is improved; however, system performance is degraded unavoidably due to the extra processing time required for performing error checking/recovery activities.
Reference: [10] <author> K. Fujimura and P. Jalote, </author> <title> "On robustness of B-trees," </title> <journal> IEEE Trans. Knowledge and Data Eng., </journal> <volume> Vol. 5, No. 3, </volume> <month> March </month> <year> 1993, </year> <pages> pp. 530-533. </pages>
Reference-contexts: 1 Introduction A storage system with error checking/recovery capability must incorporate redundant data for discovering and recovering from errors caused by hardware or software faults. An example of such a storage system is a robust data structure <ref> [8, 10, 14, 18] </ref> which contains useful data as fl Institute of Information Engineering, National Cheng Kung University; No. 1, University Road; Tainan, Taiwan; E-mail: irchen@iie.ncku.edu.tw. y Department of Computer Science, Michigan State University, East Lansing, MI 48824-1027; E-mail: yen@cps.msu.edu. well as structural, redundant information such as extra identifier fields, additional
Reference: [11] <author> D. Gu, D.J. Rosenkrantz and S.S. Ravi, </author> <title> "Construction of check sets for algorithm-based fault tolerance," </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. 43, No. 6, </volume> <month> June </month> <year> 1994, </year> <pages> pp. 641-650. </pages>
Reference-contexts: In general, a storage system formed this way can cope with more errors by incorporating more redundant information into the system. Other examples include error correcting codes (ECCs) derived from Hamming codes [12], such as those based on algorithm-based fault-tolerance <ref> [9, 11, 13] </ref>. Naturally, due to the use of redundancy, the reliability of the storage system is improved; however, system performance is degraded unavoidably due to the extra processing time required for performing error checking/recovery activities.
Reference: [12] <author> R.W. </author> <title> Hamming, "Error detecting and error correcting codes," </title> <journal> Bell Syst. Tech. J., </journal> <volume> Vol 29, </volume> <month> April </month> <year> 1950, </year> <pages> pp. 147-160. </pages>
Reference-contexts: In general, a storage system formed this way can cope with more errors by incorporating more redundant information into the system. Other examples include error correcting codes (ECCs) derived from Hamming codes <ref> [12] </ref>, such as those based on algorithm-based fault-tolerance [9, 11, 13]. Naturally, due to the use of redundancy, the reliability of the storage system is improved; however, system performance is degraded unavoidably due to the extra processing time required for performing error checking/recovery activities.
Reference: [13] <author> R. Johansson, </author> <title> "A class of (12,8) codes for correcting single errors and detecting double errors within a nibble," </title> <journal> IEEE Trans. Comp., </journal> <volume> Vol. 42, No. 12, </volume> <month> Dec. </month> <year> 1993, </year> <pages> pp. 1504-1510. </pages>
Reference-contexts: In general, a storage system formed this way can cope with more errors by incorporating more redundant information into the system. Other examples include error correcting codes (ECCs) derived from Hamming codes [12], such as those based on algorithm-based fault-tolerance <ref> [9, 11, 13] </ref>. Naturally, due to the use of redundancy, the reliability of the storage system is improved; however, system performance is degraded unavoidably due to the extra processing time required for performing error checking/recovery activities.
Reference: [14] <author> C.-C.J. Li, P.P. Chen, and W.K. Fuchs, </author> <title> "Local concurrent error detection and correction in data structures using virtual back pointers," </title> <journal> IEEE Trans. Comp., </journal> <volume> Vol. 38, No. 11, </volume> <month> Nov. </month> <year> 1989, </year> <pages> pp. 1481-1492. </pages>
Reference-contexts: 1 Introduction A storage system with error checking/recovery capability must incorporate redundant data for discovering and recovering from errors caused by hardware or software faults. An example of such a storage system is a robust data structure <ref> [8, 10, 14, 18] </ref> which contains useful data as fl Institute of Information Engineering, National Cheng Kung University; No. 1, University Road; Tainan, Taiwan; E-mail: irchen@iie.ncku.edu.tw. y Department of Computer Science, Michigan State University, East Lansing, MI 48824-1027; E-mail: yen@cps.msu.edu. well as structural, redundant information such as extra identifier fields, additional
Reference: [15] <author> J.F. Meyer, </author> <title> "On evaluating the performability of degradable computing systems," </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. 29, No. 8, </volume> <month> August </month> <year> 1980, </year> <pages> pp. 720-731. </pages>
Reference-contexts: When such a system is overloaded during a transient period it can temporarily tradeoff reliability for improved performance by adjusting the error checking interval so as to meet the design goal. In the literature, such design goal corresponds to the performability metric <ref> [15, 16] </ref>. It is a mission-specific measure of system effectiveness that combines the reliability and performance measures of the system since the system is not able to service any operation when it fails. In this paper, "probabilistic error checking" is a form of periodic error checking.
Reference: [16] <author> K.R. Pattipati, Y. Li and H.A.P. Blom, </author> <title> "A unified framework for the performability evaluation of fault tolerant computer systems," </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. 42, No. 3, </volume> <month> March </month> <year> 1993, </year> <pages> pp. 312-326. </pages>
Reference-contexts: When such a system is overloaded during a transient period it can temporarily tradeoff reliability for improved performance by adjusting the error checking interval so as to meet the design goal. In the literature, such design goal corresponds to the performability metric <ref> [15, 16] </ref>. It is a mission-specific measure of system effectiveness that combines the reliability and performance measures of the system since the system is not able to service any operation when it fails. In this paper, "probabilistic error checking" is a form of periodic error checking.
Reference: [17] <author> R.A. Sahner, </author> <title> and K.S. Trivedi, SHARPE Language Description, </title> <institution> Duke University, </institution> <year> 1991. </year>
Reference-contexts: We also investigate how the optimal value of q varies when one of the parameters varies, i.e., changing the value from 1 to 10 sec 1 in increment of 1, while keeping the others fixed. The SHARPE tool <ref> [17] </ref> was used to yield numerical results for c (t) and P (T ) from evaluating the Markov reward model instantiated with these parameter values.
Reference: [18] <author> D.J. Taylor, D.E. Morgan, and J.P. Black, </author> <title> "Redundancy in data structures: improving software fault tolerance," </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> Vol. SE-6, No. 6, </volume> <month> Nov. </month> <year> 1980, </year> <pages> pp. 585-594. </pages>
Reference-contexts: 1 Introduction A storage system with error checking/recovery capability must incorporate redundant data for discovering and recovering from errors caused by hardware or software faults. An example of such a storage system is a robust data structure <ref> [8, 10, 14, 18] </ref> which contains useful data as fl Institute of Information Engineering, National Cheng Kung University; No. 1, University Road; Tainan, Taiwan; E-mail: irchen@iie.ncku.edu.tw. y Department of Computer Science, Michigan State University, East Lansing, MI 48824-1027; E-mail: yen@cps.msu.edu. well as structural, redundant information such as extra identifier fields, additional <p> This is especially the case when the error checking/recovery action is performed on-the-fly (i.e., on a per access basis). In the context of robust data structures <ref> [18] </ref> , it was suggested that periodic error checking/recovery procedures be used to reduce the error checking overhead; however, neither an analysis nor a performance metric was discussed, although not performing on-the-fly error checking for robust data structures to tradeoff reliability for performance was considered a design possibility. <p> system under consideration is implemented with a disk-resident, 1-correctable, 2-detectable doubly linked list data structure containing not only useful data, but redundant information for error recovery, including back pointers, a count field storing the total number of nodes on the list, and an extra identifier field associated with each node <ref> [18] </ref>. The 1-correctable doubly linked list is useful, for example, in hashing and buddy systems [1]. The storage system is embedded within a larger open system.
References-found: 18

