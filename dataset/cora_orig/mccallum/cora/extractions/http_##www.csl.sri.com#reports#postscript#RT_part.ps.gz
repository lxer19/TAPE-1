URL: http://www.csl.sri.com/reports/postscript/RT_part.ps.gz
Refering-URL: http://www.csl.sri.com/reports/postscript/
Root-URL: 
Email: e-mail: jav@informatik.uni-kiel.d400.de  e-mail: wsinjh@win.tue.nl  
Phone: 2  
Title: Specification and Verification of the Real-Time Part of a Steam Boiler Control System  
Author: Jan Vitt and Jozef Hooman 
Address: Preusserstrae 1-9, 24105 Kiel, Germany  P.O. Box 513, 5600 MB Eindhoven, The Netherlands  
Affiliation: 1 Institut fur Informatik und Praktische Mathematik Christian-Albrechts-Universitat zu Kiel  Dept. of Mathematics and Computing Science Eindhoven University of Technology  
Abstract: The goal of this paper is the correct derivation of an implementation of a steam boiler control system. Using a mixed formalism that is presented in [Hoo94b] in which programs and asser-tional specifications are combined within a unified framework, we refine its top-level specification in a top-down manner. Having the formalism defined in the PVS specification language, the interactive proof checker of PVS is used to check the correctness of each refinement step, thereby guaranteeing the correctness of the resulting program. 
Abstract-found: 1
Intro-found: 1
Reference: [Abr94] <author> Jean-Raymond Abrial. </author> <title> Steam-boiler control specification problem. suggested for Participants of the Dagstuhl Meeting Methods for Sematics and Specification, </title> <address> June 4-9, </address> <year> 1995, </year> <month> August </month> <year> 1994. </year>
Reference-contexts: 1 Introduction We aim at a specification of a steam boiler control system <ref> [Abr94] </ref>, a typical example of a hybrid system. A hybrid system is a mixture of discrete and continuous components, such as program controlled digital computers and continuous processes [GNRR93]. <p> C2: VAR pred [State] rulepar: AXIOM par (spec (A1,C1), spec (A2,C2) ) =&gt; spec (A1 AND A2, C1 AND C2) 3 Example Steam Boiler Control System Top-Level Specification To illustrate top-down design of distributed real-time systems in our framework, we consider a steam boiler control system which is inspired upon <ref> [Abr94] </ref>.
Reference: [For83] <author> Otto Forster. </author> <title> Analysis 1 Differential- und Integralrechnung einer Veranderlichen, </title> <booktitle> volume 24 of Grund-kurs Mathematik. </booktitle> <publisher> Vieweg Studium, </publisher> <year> 1983. </year>
Reference-contexts: We do not define integrals mathematically but specify some simple properties of integrals. Proving them is beyond the scope of this paper so they are given as axioms. Proofs can be found in many textbooks like <ref> [For83] </ref>. val: VAR Value f1, f2: VAR [Time -&gt; Value] axsplit_integral: AXIOM integral (t1, t2, f) = integral (t1, t, f) + integral (t, t2, f) axconst_integral: AXIOM t1 &lt;= t2 AND (FORALL t: t1 &lt;= t AND t &lt;= t1 IMPLIES f (t) = val) IMPLIES integral (t1, t2, f)
Reference: [GNRR93] <author> Robert Grossman, Anil Nerode, Anders Ravn, and Hans Rischel, </author> <title> editors. Hybrid Systems, </title> <booktitle> volume 736 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction We aim at a specification of a steam boiler control system [Abr94], a typical example of a hybrid system. A hybrid system is a mixture of discrete and continuous components, such as program controlled digital computers and continuous processes <ref> [GNRR93] </ref>. The intention is to design a real-time control program that keeps the water level inside a steam boiler between certain critical values Min and Max. The level is influenced by outflow in the form of steam and inflow of water through a pump system.
Reference: [Hoa69] <author> C.A.R. Hoare. </author> <title> An axiomatic basis for computer programming. </title> <journal> Communications of the ACM, </journal> <volume> 12(10) </volume> <pages> 576-580, 583, </pages> <month> October </month> <year> 1969. </year>
Reference-contexts: THEOREM (prog1 =&gt; prog2) IFF (EXISTS prog: (prog1 =&gt; prog) AND (prog =&gt; prog2)) For instance, prog =&gt; spec (A,C) expresses that program prog satisfies the specification spec (A,C). 4 2.3 Proof System The proof system contains the following consequence rule that reflects the classical consequence rule of Hoare logic <ref> [Hoa69] </ref>. A0, C0: VAR pred [State] rulecons: THEOREM Valid (A IMPLIES A0) AND Valid (C0 IMPLIES C) IMPLIES (spec (A0,C0) =&gt; spec (A,C)) The rule for parallel composition of processes is given as an axiom rather than a rule.
Reference: [Hoo91] <author> Jozef Hooman. </author> <title> Specification and Compositional Verification of Real-Time Systems, </title> <booktitle> volume 558 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: In this section we give a brief overview over its essential parts. Since the whole design process was accomplished using the PVS system, we only give names and notations of the formalism in their PVS versions. The original names and notations can be found in <ref> [Hoo91] </ref>. In general, a PVS specification consists of a number of theories. A theory can import other theories. The entire mixed formalism builds a chain of seven theories. In Section 2.1 we formulate the basic theory defining values, time constructs, and programs. <p> Also, for simplicity, the syntactic constraints which require that the assertions of one process do not refer to observables of the other process are omitted. Additionally, assume that now and term do not occur in the commitments. We refer to <ref> [Hoo91] </ref> for more details and a soundness proof of the parallel composition rule. Here we concentrate on the use of this rule during top-down program design of distributed systems. <p> Similar to the parallel composition rule this rule has not been proved sound in PVS yet. Again, a proof can be found in <ref> [Hoo91] </ref>. prog3, prog4: VAR program monopar: AXIOM (prog3 =&gt; prog1) AND (prog4 =&gt; prog2) IMPLIES (par (prog3, prog4) =&gt; par (prog1, prog2)) Regarding all constraints on parameters that have evolved during refinement steps we can prove the final theorem cortotal. totalreq: bool = TLreq AND Contr_programreq AND DelSTBC1 &gt;= DelPS1 + <p> For instance, the parallel composition rule is only given as an axiom rather than a theorem. Thus, soundness of the rule is currently not provable in PVS. However, it is proved sound in <ref> [Hoo91] </ref>. Acknowledgment Many thanks go to Kai Engelhardt who frequently gave helpful advice to problems of all kind and to Willem-Paul de Roever for providing valuable hints when writing this paper. 22
Reference: [Hoo94a] <author> Jozef Hooman. </author> <title> An assertional method for real-time hybrid systems. </title> <booktitle> In Symposium ADPM '94 Automation of Mixed Processes: Dynamical Hybrid Systems, </booktitle> <pages> pages 67-75. </pages> <address> IBRA, </address> <year> 1994. </year>
Reference-contexts: Further, relevant properties of the physical processes to be controlled are formalized. Then we can describe a control strategy in terms of a continuous interface and prove that it leads to the top-level specification, similar to the approach presented in <ref> [Hoo94a] </ref>. To implement the control strategy we introduce a water sensor and a pump system to transform the continuous interface into discrete events. Next we specify the control program and prove that its specification and the specifications of the physical components indeed imply the control strategy.
Reference: [Hoo94b] <author> Jozef Hooman. </author> <title> Correctness of real-time systems by construction. </title> <editor> In Hans Langmaack, Willem-Paul de Roever, and Jan Vytopil, editors, </editor> <booktitle> Formal Techniques in Real-Time and Fault-Tolerant Systems, volume 863 of LNCS, </booktitle> <pages> pages 19-40. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Since the application of a formal method in the design process requires the user to check a large number of often trivial proofs, it is desirable to have some form of mechanical support. For instance, one would like to check proofs mechanically and discharge simple verification conditions automatically. In <ref> [Hoo94b] </ref> a mixed formalism, in which one can freely combine assertional specifications and constructs of the programming language, is formulated in the specification language of PVS (Prototype Verification System) [ORS92]. The PVS specification language is based on strongly-typed higher-order logic which is sufficiently expressive to incorporate this formal approach. <p> The control component is implemented in the programming language in Section 7. Concluding remarks can be found in Section 8. Finally, in Section 9, topics of future work are listed. 2 Basic Framework A detailed introduction into the mixed formalism can be found in <ref> [Hoo94b] </ref>. In this section we give a brief overview over its essential parts. Since the whole design process was accomplished using the PVS system, we only give names and notations of the formalism in their PVS versions. The original names and notations can be found in [Hoo91]. <p> After initialization the system would run as specified in this paper. Next, the implementation of the mixed formalism in <ref> [Hoo94b] </ref> in the PVS specification language is not complete yet. For instance, the parallel composition rule is only given as an axiom rather than a theorem. Thus, soundness of the rule is currently not provable in PVS. However, it is proved sound in [Hoo91].
Reference: [ORS92] <author> Sam Owre, John Rushby, and Natarajan Shankar. PVS: </author> <title> A prototype verification system. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> Automated Deduction - CADE-11, volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 748-752. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: For instance, one would like to check proofs mechanically and discharge simple verification conditions automatically. In [Hoo94b] a mixed formalism, in which one can freely combine assertional specifications and constructs of the programming language, is formulated in the specification language of PVS (Prototype Verification System) <ref> [ORS92] </ref>. The PVS specification language is based on strongly-typed higher-order logic which is sufficiently expressive to incorporate this formal approach.
References-found: 8

