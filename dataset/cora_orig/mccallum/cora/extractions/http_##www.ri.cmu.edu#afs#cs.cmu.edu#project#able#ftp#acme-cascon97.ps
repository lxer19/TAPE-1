URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/able/ftp/acme-cascon97.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/able/www/paper_abstracts/acme-cascon97.html
Root-URL: 
Title: Acme: An Architecture Description Interchange Language  
Author: David Garlan Robert Monroe David Wile flfl 
Date: November, 1997.  
Note: Proceedings of CASCON'97,  
Address: 4676 Admiralty Way Pittsburgh, PA 15217 USA Marina del Rey, CA 90292 USA  
Affiliation: Computer Science Department USC/Inf. Sciences Institute flfl Carnegie Mellon University  
Abstract: Numerous architectural description languages (ADLs) have been developed, each providing complementary capabilities for architectural development and analysis. Unfortunately, each ADL and supporting toolset operates in isolation, making it difficult to integrate those tools and share architectural descriptions. Acme is being developed as a joint effort of the software architecture research community as a common interchange format for architecture design tools. Acme provides a structural framework for characterizing architectures, together with annotation facilities for additional ADL-specific information. This scheme permits subsets of ADL tools to share architectural information that is jointly understood, while tolerating the presence of information that falls outside their common vocabulary. In this paper we describe Acme's key features, rationale, and technical innovations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Robert Allen and David Garlan. </author> <title> Formalizing architectural connection. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 71-80, </pages> <address> Sorrento, Italy, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: They also typically provide tools for parsing, unparsing, displaying, compiling, ana 1 lyzing, or simulating architectural descriptions written in their associated language. Examples of ADLs include Aesop, Adage, Meta-H, C2, Rapide, SADL, UniCon, and Wright <ref> [5, 3, 2, 11, 10, 12, 14, 1] </ref>. <p> Likewise, the "protocol" property of the RPC connector is declared to be in the "Wright" language and would only be meaningful to a tool that knows how to process that language. (For simplicity we have elided the specification: see <ref> [1] </ref> for details.) Of course, in order for properties to be useful when interchanged between different ADLs, there must be a common understanding of their meaning. <p> and by allowing the definition of new property sublanguages. 5 Example To illustrate how Acme can be used to support architectural interchange, we briefly describe our experience integrating Wright and Rapide using Acme. 4 Wright is an ADL that allows one to specify and analyze the abstract behavior of architectures <ref> [1] </ref>. Components and connectors behaviors are specified using a event/process notation based on CSP [9]. In particular, connector semantics are defined by a protocol that specifies the behavior of participating components.
Reference: [2] <author> Pam Binns and Steve Vestal. </author> <title> Formal real-time architecture specification and analysis. </title> <booktitle> In Tenth IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: They also typically provide tools for parsing, unparsing, displaying, compiling, ana 1 lyzing, or simulating architectural descriptions written in their associated language. Examples of ADLs include Aesop, Adage, Meta-H, C2, Rapide, SADL, UniCon, and Wright <ref> [5, 3, 2, 11, 10, 12, 14, 1] </ref>.
Reference: [3] <author> L. Coglianese and R. Szymanski. </author> <title> DSSA-ADAGE: An Environment for Architecture-based Avionics Development. </title> <booktitle> In Proceedings of AGARD'93, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: They also typically provide tools for parsing, unparsing, displaying, compiling, ana 1 lyzing, or simulating architectural descriptions written in their associated language. Examples of ADLs include Aesop, Adage, Meta-H, C2, Rapide, SADL, UniCon, and Wright <ref> [5, 3, 2, 11, 10, 12, 14, 1] </ref>.
Reference: [4] <editor> David Garlan, editor. </editor> <booktitle> Proceedings of the First International Workshop on Architectures for Software Systems, </booktitle> <address> Seattle, WA, </address> <month> April </month> <year> 1995. </year> <note> Published as CMU Technical Report CMU-CS-95-151, </note> <month> April </month> <year> 1995. </year>
Reference-contexts: To understand why, consider the following two observations about architecture description languages. First, an examination of existing ADLs reveals that there is, in fact, considerable agreement about the role of structure in architectural description. One of the results of the First International Workshop on Architectures for Software Systems <ref> [4] </ref> was that virtually all ADLs take as their starting point the need to express an architectural design as a hierarchical collection of interacting components.
Reference: [5] <author> David Garlan, Robert Allen, and John Ockerbloom. </author> <title> Exploiting style in architectural design environments. </title> <booktitle> In Proceedings of SIG-SOFT'94: The Second ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 179-185. </pages> <publisher> ACM Press, </publisher> <month> Decem-ber </month> <year> 1994. </year>
Reference-contexts: They also typically provide tools for parsing, unparsing, displaying, compiling, ana 1 lyzing, or simulating architectural descriptions written in their associated language. Examples of ADLs include Aesop, Adage, Meta-H, C2, Rapide, SADL, UniCon, and Wright <ref> [5, 3, 2, 11, 10, 12, 14, 1] </ref>.
Reference: [6] <author> David Garlan, Bob Monroe, and David Wile. ACME: </author> <title> An interchange language for software architecture. </title> <type> Technical Report CMU-CS-95-219, </type> <institution> Carnegie Mellon University, </institution> <year> 1997. </year> <note> Available in draft form at http://www.cs.cmu.edu/~acme. </note>
Reference-contexts: Additional details and examples can be found in <ref> [6] </ref>. key features are: 1. an architectural ontology consisting of seven basic architectural design elements; 2. a flexible annotation mechanism supporting association of non-structural information using externally defined sublan guages; 3. a template mechanism for abstracting common, reusable architectural idioms and styles; and 4. an open semantic framework for reasoning about <p> One is a standard for specifying visualization properties to be used by graphical editors to display architectural descriptions. Another sublanguage is being developed to describe temporal constraints on an architectural description. Details of these sub-languages are beyond the scope of this report, but can be found in <ref> [6] </ref>. 3.3 Acme Templates and Style Definition The Acme features described thus far are sufficient to define an architectural instance, and, in fact, form the basis for the core capabilities of Acme parsing and unparsing tools.
Reference: [7] <author> David Garlan and Dewayne Perry. </author> <title> Introduction to the special issue on software architecture. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4), </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: A well-defined architecture allows an engineer to reason about system properties at a high level of abstraction. Typical properties of concern include protocols of interaction, bandwidths and latencies, locations of central data stores, and anticipated dimensions of evolution <ref> [7, 8, 13] </ref>. Architectural design has always played a strong role in determining the success of complex software-based systems: the choice of an appropriate architecture can lead to a product that satisfies its requirements and is easily modified as new requirements present themselves, while an inappropriate architecture can be disastrous.
Reference: [8] <author> David Garlan and Mary Shaw. </author> <title> An introduction to software architecture. </title> <editor> In V. Ambri-ola and G. Tortora, editors, </editor> <booktitle> Advances in Software Engineering and Knowledge Engineering, </booktitle> <pages> pages 1-39, </pages> <address> Singapore, </address> <year> 1993. </year> <title> World Scientific Publishing Company. </title> <note> Also appears as SCS and SEI technical reports: CMU-CS-94-166, CMU/SEI-94-TR-21, ESC-TR-94-021. </note>
Reference-contexts: A well-defined architecture allows an engineer to reason about system properties at a high level of abstraction. Typical properties of concern include protocols of interaction, bandwidths and latencies, locations of central data stores, and anticipated dimensions of evolution <ref> [7, 8, 13] </ref>. Architectural design has always played a strong role in determining the success of complex software-based systems: the choice of an appropriate architecture can lead to a product that satisfies its requirements and is easily modified as new requirements present themselves, while an inappropriate architecture can be disastrous.
Reference: [9] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: Components and connectors behaviors are specified using a event/process notation based on CSP <ref> [9] </ref>. In particular, connector semantics are defined by a protocol that specifies the behavior of participating components.
Reference: [10] <author> David C Luckham, Lary M. Augustin, John J. Kenney, James Veera, Doug Bryan, and Wal-ter Mann. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4) </volume> <pages> 336-355, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: They also typically provide tools for parsing, unparsing, displaying, compiling, ana 1 lyzing, or simulating architectural descriptions written in their associated language. Examples of ADLs include Aesop, Adage, Meta-H, C2, Rapide, SADL, UniCon, and Wright <ref> [5, 3, 2, 11, 10, 12, 14, 1] </ref>. <p> Rapide is an ADL that allows one to specify systems in terms of partially ordered sets of events <ref> [10] </ref>. Component computations are triggered by received events, and in turn trigger other computations by sending events to other components. The Rapide toolset permits simulation of such descriptions, animation of those simulations, and analysis of the resulting trace graphs to check for anomalous behavior.
Reference: [11] <author> Nenad Medvidovic, Peyman Oreizy, Jason E. Robbins, and Richard N. Taylor. </author> <title> Using object-oriented typing to support architectural design in the C2 style. </title> <booktitle> In SIGSOFT'96: Proceedings of the Fourth ACM Symposium on the Foundations of Software Engineering. </booktitle> <publisher> ACM Press, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: They also typically provide tools for parsing, unparsing, displaying, compiling, ana 1 lyzing, or simulating architectural descriptions written in their associated language. Examples of ADLs include Aesop, Adage, Meta-H, C2, Rapide, SADL, UniCon, and Wright <ref> [5, 3, 2, 11, 10, 12, 14, 1] </ref>.
Reference: [12] <author> M. Moriconi, X. Qian, and R. Riemenschnei-der. </author> <title> Correct architecture refinement. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4) </volume> <pages> 356-372, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: They also typically provide tools for parsing, unparsing, displaying, compiling, ana 1 lyzing, or simulating architectural descriptions written in their associated language. Examples of ADLs include Aesop, Adage, Meta-H, C2, Rapide, SADL, UniCon, and Wright <ref> [5, 3, 2, 11, 10, 12, 14, 1] </ref>.
Reference: [13] <author> Dewayne E. Perry and Alexander L. Wolf. </author> <title> Foundations for the study of software architecture. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 17(4) </volume> <pages> 40-52, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: A well-defined architecture allows an engineer to reason about system properties at a high level of abstraction. Typical properties of concern include protocols of interaction, bandwidths and latencies, locations of central data stores, and anticipated dimensions of evolution <ref> [7, 8, 13] </ref>. Architectural design has always played a strong role in determining the success of complex software-based systems: the choice of an appropriate architecture can lead to a product that satisfies its requirements and is easily modified as new requirements present themselves, while an inappropriate architecture can be disastrous.
Reference: [14] <author> Mary Shaw, Robert DeLine, Daniel V. Klein, Theodore L. Ross, David M. Young, and Gre-gory Zelesnik. </author> <title> Abstractions for software architecture and tools to support them. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4) </volume> <pages> 314-335, </pages> <month> April </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: They also typically provide tools for parsing, unparsing, displaying, compiling, ana 1 lyzing, or simulating architectural descriptions written in their associated language. Examples of ADLs include Aesop, Adage, Meta-H, C2, Rapide, SADL, UniCon, and Wright <ref> [5, 3, 2, 11, 10, 12, 14, 1] </ref>.
References-found: 14

