URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/TechRep/rutgers/lcsr-tr-238.ps.Z
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Title: Modular Implementation of Individual Reasoning in protodl the Extensible Description Logic Management System.  
Author: Alex Borgida Daniel Kudenko 
Date: December 1994  
Web: fborgida,kudenkogcs.rutgers.edu  
Address: New Brunswick, NJ 08903  
Affiliation: Dept. of Computer Science Rutgers University  
Abstract: This is the second report in a series on the PROTODL system, which is an *extensible* knowledge representation and reasoning system based on Description Logics (DLs). We have motivated elsewhere [Borgida&Brachman92, Borgida92] the utility of being able to add new concept constructors to a DL, and, while in previous papers we have concentrated on subsumption reasoning, in this paper we consider reasoning about individuals. We present the modular implementation of a Description Logic-based KBMS which performs inferences about individuals in such a way that the addition of each new concept constructors is achieved by introducing a series of functions (and possibly modifying some old ones). Considerable emphasis has been placed on the efficient handling of *incremental* updates. This is accomplished by combining the primitive procedures in different ways in order to obtain variants of the standard procedures for infering concept (non)membership variants that take into account the fact that the previous state of the KB was consistent, and that we know what specific kind of update has been performed, and when dependency links have been set. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Borgida, A. </author> <title> "Towards the systematic development of terminological reasoners: clasp reconstructed", </title> <booktitle> Proc. Conf. on Principles of Knowledge Representation (KR'92), </booktitle> <address> Boston, MA, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: In a nut-shell, the subsumption relation can be used to detect incoherence and to organize generic ideas; and if queries are descriptions and subsumption is used as part of query processing then descriptions can be used to assert incomplete information about individuals. In previous papers <ref> [3, 1] </ref>, we have argued that the expressiveness-intractability trade-off for DL rea-soners can be most advantageously resolved by abandoning the search for an "ideal" DL, and by adopting a framework where one starts with a small set of description constructors, and extends them on a per-application (family) basis with new constructors, <p> over time, so that a significant part of the job is to reduce the amount of work needed to re-check the inferences that might 15 be applicable after an update. (As an analogy, suppose that concept definitions might evolve over time; then, in addition to techniques for efficiently classifying concepts <ref> [1] </ref>, a relevant research question would be to consider concept re-classification).
Reference: [2] <author> A. Borgida, </author> <title> "Description Logics are not Just for the Flightless Birds", </title> <type> Technical Report DCS-TR-295, </type> <month> June </month> <year> 1992, </year> <institution> Dept. of Computer Science, Rutgers University. </institution>
Reference-contexts: The reader is assumed to be familiar with the advantages of using DLs for these tasks, as reviewed, for example, in <ref> [2] </ref>. In a nut-shell, the subsumption relation can be used to detect incoherence and to organize generic ideas; and if queries are descriptions and subsumption is used as part of query processing then descriptions can be used to assert incomplete information about individuals.
Reference: [3] <author> Borgida, A., and Brachman, R., </author> " <title> Customizable Classification Inference in the ProtoDL Description Management System", </title> <booktitle> Proc. Conf. Information and Knowledge Management, </booktitle> <address> Baltimore, MD, </address> <month> November </month> <year> 1992, </year> <month> pp.482-490. </month>
Reference-contexts: In a nut-shell, the subsumption relation can be used to detect incoherence and to organize generic ideas; and if queries are descriptions and subsumption is used as part of query processing then descriptions can be used to assert incomplete information about individuals. In previous papers <ref> [3, 1] </ref>, we have argued that the expressiveness-intractability trade-off for DL rea-soners can be most advantageously resolved by abandoning the search for an "ideal" DL, and by adopting a framework where one starts with a small set of description constructors, and extends them on a per-application (family) basis with new constructors, <p> To begin with, whenever the intensional description of an individual is changed, we need to make sure that descr (b) is not nothing. The way to do this is to normalize descr (b) using the standard description procedures (see <ref> [3] </ref>). Second, we need to invoke InconsistentW?(b, descr (b)) as part of an update, in order to check that no contradiction arises. As before, we can specialize the kind of procedure to call depending on the update, having InconsistentW?filling, InconsistentW?closing, InconsistentW?asserting. <p> Readers interested in experimenting with extended DLs are invited to contact the first author to obtain a copy of the protodl implementation described in this paper and in <ref> [3] </ref>. Acknowledgment Our ideas for the architecture of PROTODL's implementation are evidently influenced by the implementation of the CLASSIC system at AT&T Bell Laboratories.
Reference: [4] <author> Borgida, A., Brachman, R. J., McGuinness, D. L., and Resnick, L. A. </author> <title> "CLASSIC: A Structural Data Model for Objects," </title> <booktitle> Proc. 1989 ACM SIGMOD International Conference on Management of Data, </booktitle> <month> June, </month> <year> 1989, </year> <pages> pp. 59-67. </pages>
Reference-contexts: And we have illustrated this approach by reconstructing the clasp reasoner about plans. This report performs a similar task for the process of reasoning about individuals in a DL-KBMS. Based on an empirical analysis of the implementation of classic <ref> [4] </ref>, we have factored out a variety of procedures for each concept constructor, so that the final KBMS can be reconstructed from these components.
Reference: [5] <author> A. Borgida, and P. Devanbu, </author> <title> "Knowledge Base Management Systems using Description Logics and their role in Software Information Systems"Information Processing 92 (Vol.3), </title> <publisher> pp.171-181, Elsevier Science Publishers, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Information Systems can be viewed as mechanisms that support users in developing and maintaining models of their application domain. Following Levesque's functional approach to knowledge servers [9], we have developed <ref> [5] </ref> a view of Information Systems as abstract data types on which one can perform two kinds of operations: tells and asks, using a variety of languages. tells are used to build or modify the domain model tell: L Tell fi KB ! KB while asks retrieve information ask: L Query
Reference: [6] <author> Brachman, R. J., Fikes, R. E., and Levesque, H. J., </author> <title> "Krypton: A functional approach to knowledge representation", </title> <journal> IEEE Computer, </journal> <note> Special Issue on Knowledge Representation 16 (10) (1983) 67-73. </note>
Reference-contexts: InferFrom-filling-SAMEAS (b,p,f,eql) - if p = first (first (eql)) | p=first (second (eql)) then do the same as InferFrom-asserting-SAMEAS but with path computed taking into account b--p--&gt;f. - which would be called from Inferfromfilling-AND. 7 Summary In the Krypton system <ref> [6] </ref>, reasoning about individuals was carried out using a first order theorem prover, which made calls to the subsumption reasoner of a DL in order to take into account the semantics of predicates. In contrast, DL-KBMS build special services for reasoning with individuals.
Reference: [7] <author> Cohen, W., Borgida, A., and Hirsh H., </author> <title> "Computing Least Common Subsumers in Description Logics", </title> <booktitle> Proc. of AAAI'92, </booktitle> <address> San Jose, CA., </address> <month> May </month> <year> 1992. </year>
Reference-contexts: The approach presented here, and implemented in Common Lisp, is based on the "structural subsump-tion" paradigm <ref> [7] </ref>, where a description D is normalized to a conjunction of "independent" descriptions D j , each built with one of the primitive concept constructors K. Then reasoning is carried out by special procedures for each kind of constructor K, under the "direction" of procedures for the constructor and.
Reference: [8] <author> Donini, F.M. and A. </author> <title> Era, "Most specific concepts for knowledge bases with incomplete information", </title> <booktitle> Proc. </booktitle> <address> CIKM-92, Baltimor, MD, pp.545-551, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Some DL-KBMS, including classic and protodl, have chosen not to reduce individual reasoning to subsumption reasoning. This is based on several observations. First, with a weaker DL, it is not always possible <ref> [8] </ref> to find a "most specific description" that can be used for the classification inference. Second, it is an empirical observation that in our applications the number of individuals and role-fillers is orders of magnitude larger than the number of distinct concepts/descriptions appearing in the KB.
Reference: [9] <author> Levesque, H. </author> <title> "Foundations of a Functional Approach to Knowledge Representation", </title> <booktitle> Artificial Intelligence 23(2), </booktitle> <year> 1984, </year> <pages> pp. 155-212. 17 </pages>
Reference-contexts: 1 Introduction Information Systems can be viewed as mechanisms that support users in developing and maintaining models of their application domain. Following Levesque's functional approach to knowledge servers <ref> [9] </ref>, we have developed [5] a view of Information Systems as abstract data types on which one can perform two kinds of operations: tells and asks, using a variety of languages. tells are used to build or modify the domain model tell: L Tell fi KB ! KB while asks retrieve
References-found: 9

