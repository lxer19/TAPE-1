URL: http://www.cs.utexas.edu/users/haizhou/decomp.ps
Refering-URL: http://www.cs.utexas.edu/users/haizhou/publications.html
Root-URL: 
Title: An Exact Gate Decomposition Algorithm for Low-Power Technology Mapping  
Author: Hai Zhou and D.F. Wong 
Address: Austin, TX 78712-1188  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: With the remarkable growth of portable application and the increasing frequency and integration density, power is being given comparable weight to speed and area in IC designs. In technology mapping, how decomposition is done can have a significant impact on the power dissipation of the final implementation. In the literature, only heuristic algorithms are given for the low-power gate decomposition problem. In this paper, we prove many properties an optimal decomposition tree must have. Based on these optimality properties, we design an efficient exact algorithm to solve the low-power gate decomposition problem. Moreover, the exact algorithm can be easily modified to a heuristic algorithm which performs much better than the known heuristics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T.H. Cormen, C.E. Leiserson, and R.L. Rivest, </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Implemented by the priority queue data structure <ref> [1] </ref>, the running time can also be upper bounded by O (n log n), which is much faster than the modified Huffman algorithm. Furthermore, since HeuDecomp is strongly based on the optimality properties, its performance should be better than that of the modified Huffman algorithm.
Reference: [2] <author> D.E. Knuth, </author> <title> Fundamental Algorithms, </title> <booktitle> Volume 1 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1968. </year> <note> Second edition, </note> <year> 1973. </year>
Reference-contexts: According to Knuth <ref> [2] </ref>, the number of different la beled oriented binary trees with n leaves is 2n1 2)!=2 n1 . In a decomposition tree, only leaves are labeled, the internal nodes are indistinguishable.
Reference: [3] <author> D.A. Huffman, </author> <title> A Method for the Construction of Minimum Redundancy Codes. </title> <booktitle> In Proceedings of the IRE, </booktitle> <volume> volume 40, </volume> <pages> pages 1098-1101, </pages> <month> Sept. </month> <year> 1952. </year>
Reference-contexts: The problem appears in a few recent papers. Tiwari et al. [6] mentioned the importance of a good decomposition on the final result of technology mapping, but did not give any solution. At the same time, Tsui et al. [7] analyzed the problem and found that Huffman's algorithm <ref> [3] </ref> can only be used in domino dynamic logic. For static logic which is more important in low-power applications, only a greedy heuristic called the modified Huffman algorithm is given. Murgai et al. [4] also considered the decomposition problem, but their minimization objective was the power consumptions due to glitches. <p> shown in Figure 2 (b) has 1.22748 as its total switching activities. 3 Huffman's algorithm Given n leaves v 1 ; v 2 ; : : : ; v n with their weights w (v 1 ); w (v 2 ); : : : ; w (v n ), Huffman <ref> [3] </ref> gave an algorithm to construct a binary tree with minimum weighted path length P n i=1 w (v i )l i , where l i is the path length from the root to v i . The algorithm can be described as follows.
Reference: [4] <author> R. Murgai, R.K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> Decomposition of Logic Functions for Minimum Transition Activity. </title> <booktitle> Proceeding of the International Workshop on Low Power Design, </booktitle> <year> 1994. </year>
Reference-contexts: In technology mapping, the subject netlist is usually first decomposed into a netlist composed of only inverters and two-input NAND gates. How the decomposition is done can have a significant impact on the power dissipation of the final implementation <ref> [4, 6, 7] </ref>. We deal with the low-power gate decomposition problem in this paper. The problem appears in a few recent papers. Tiwari et al. [6] mentioned the importance of a good decomposition on the final result of technology mapping, but did not give any solution. <p> At the same time, Tsui et al. [7] analyzed the problem and found that Huffman's algorithm [3] can only be used in domino dynamic logic. For static logic which is more important in low-power applications, only a greedy heuristic called the modified Huffman algorithm is given. Murgai et al. <ref> [4] </ref> also considered the decomposition problem, but their minimization objective was the power consumptions due to glitches. Since the problem for dynamic logics can be easily solved, we only consider static logics. In our approach, we first study the structure of an optimal decomposition tree.
Reference: [5] <author> M. Pedram, </author> <title> Power Minimization in IC Design: Principles and Applications. </title> <journal> ACM Trans. on Design Automation of Electronic Systems, </journal> <month> Jan., </month> <year> 1996. </year>
Reference-contexts: Power dissipation in digital CMOS circuits is dominated by the dynamic dissipation, which is mainly the charging and discharging of the node capacitances <ref> [5] </ref>.
Reference: [6] <author> V. Tiwari, P. Ashar, and S. Malik, </author> <title> Technology Mapping for Low Power. </title> <booktitle> ACM/IEEE Design Automation Conference, </booktitle> <year> 1993. </year>
Reference-contexts: In technology mapping, the subject netlist is usually first decomposed into a netlist composed of only inverters and two-input NAND gates. How the decomposition is done can have a significant impact on the power dissipation of the final implementation <ref> [4, 6, 7] </ref>. We deal with the low-power gate decomposition problem in this paper. The problem appears in a few recent papers. Tiwari et al. [6] mentioned the importance of a good decomposition on the final result of technology mapping, but did not give any solution. <p> How the decomposition is done can have a significant impact on the power dissipation of the final implementation [4, 6, 7]. We deal with the low-power gate decomposition problem in this paper. The problem appears in a few recent papers. Tiwari et al. <ref> [6] </ref> mentioned the importance of a good decomposition on the final result of technology mapping, but did not give any solution. At the same time, Tsui et al. [7] analyzed the problem and found that Huffman's algorithm [3] can only be used in domino dynamic logic. <p> We call this gate decomposition. We will treat the signals in a circuit as random variables and define the signal probability of a signal x as the probability of x being 1, denoted by p (x). We use the same model as in <ref> [6, 7] </ref>, that is, we assume the zero delay model where gate delays are assumed to be zero and thus signal transitions due to glitching are ignored; primary inputs are assumed to be uncorrelated (spatial independent); and the present input signal value is independent of those in the past (temporal independent).
Reference: [7] <author> C.-Y. Tsui, M. Pedram, and A.M. Despain, </author> <title> Technology Decomposition and Mapping Targeting Low Power Dissipation. </title> <booktitle> ACM/IEEE Design Automation Conference, </booktitle> <year> 1993. </year>
Reference-contexts: In technology mapping, the subject netlist is usually first decomposed into a netlist composed of only inverters and two-input NAND gates. How the decomposition is done can have a significant impact on the power dissipation of the final implementation <ref> [4, 6, 7] </ref>. We deal with the low-power gate decomposition problem in this paper. The problem appears in a few recent papers. Tiwari et al. [6] mentioned the importance of a good decomposition on the final result of technology mapping, but did not give any solution. <p> The problem appears in a few recent papers. Tiwari et al. [6] mentioned the importance of a good decomposition on the final result of technology mapping, but did not give any solution. At the same time, Tsui et al. <ref> [7] </ref> analyzed the problem and found that Huffman's algorithm [3] can only be used in domino dynamic logic. For static logic which is more important in low-power applications, only a greedy heuristic called the modified Huffman algorithm is given. <p> As a by-product, a heuristic algorithm can be easily derived from the exact algorithm. Its running time is O (n log n), which is much faster than the O (n 2 log n) running time of the modified Huffman algorithm <ref> [7] </ref>. Since the heuristic is strongly based on the optimality properties, it also performs much better than the modified Huffman algorithm. In fact our experimental results show that our heuristic gives optimal results in most cases. The rest of the paper is organized as follows. <p> We call this gate decomposition. We will treat the signals in a circuit as random variables and define the signal probability of a signal x as the probability of x being 1, denoted by p (x). We use the same model as in <ref> [6, 7] </ref>, that is, we assume the zero delay model where gate delays are assumed to be zero and thus signal transitions due to glitching are ignored; primary inputs are assumed to be uncorrelated (spatial independent); and the present input signal value is independent of those in the past (temporal independent). <p> The objective function we want to minimize in domino logic is P v2V p (v). Because of this simple objective function, it can be shown that Huffman's algorithm can be used to give an optimal decomposition tree in domino logic designs <ref> [7] </ref>. Because of the pre-discharges or pre-charges, domino logic designs dissipate more power than static logic designs, which never do extra charges or discharges. <p> In a decomposition tree, only leaves are labeled, the internal nodes are indistinguishable. Therefore, the number of different decomposition trees is 2n1 2 n1 (n 1)! Thus, an exhaustive enumeration method is prohibitively expensive. Tsui et al. <ref> [7] </ref> found Huffman's algorithm can not solve this problem. Instead, they gave a heuristic which was called modified Huffman algorithm. It starts with a forest composed of all the inputs, and incrementally combines two trees into one until there is only one tree. <p> It is a greedy algorithm, and each time tries all pairs and chooses the combination which gives the minimum increase on the objective function. The time complexity of the algorithm is O (n 2 log n) <ref> [7] </ref>. This algorithm is by far not optimal. This can be shown by a simple example. Here we have six input signals with the following probabilities: 0.4, 0.4, 0.4, 0.94, 0.94, 0.95. <p> This formulation leads us to consider Huffman's algorithm for the low-power gate decomposition problem. Unfortunately, it can not solve the problem in general case <ref> [7] </ref>. However, we find that under some conditions Huffman's algorithm can give optimal solutions. Before we give these conditions, we will describe two variations of Huffman's algorithm, which are a little different with the original one. <p> Our experiments focus on two aspects: the running time of the exact algorithm and the performance of the heuristic. In order to compare the performance of the heuristic, we also implement the modified Huffman algorithm <ref> [7] </ref>. According to Lemma 2 and Theorem 1, the input signals whose probabilities are not greater than 0.5 can be easily combined into a subtree by the Min-Huffman algorithm. Therefore, the complexity only depends on the number of signals whose probabilities are greater than 0.5.
Reference: [8] <author> Q. Wu, M. Pedram, and X. Wu, </author> <title> A Note on the Relationship Between Signal Probability and Switching Activity. </title> <booktitle> Asian and South Pacific Design Automation Conference, </booktitle> <year> 1997. </year>
Reference-contexts: In static logic, under the temporal independence assumption, the switching activity E sw of signal x can be written as E sw (x) = Pr [x : 0 ! 1] + Pr [x : 1 ! 0] = 2Pr [x = 1]Pr [x = 0] However, in their recent work <ref> [8] </ref>, Wu et al. showed that, even in the absence of temporal independence, 2p (x)(1 p (x)) also gives the expected value of the switching activities among all sequences that satisfy the given signal probability. The problem we will solve in this paper can be defined as follows.
Reference: [9] <author> H. Zhou and D.F. Wong, </author> <title> An Exact Gate Decomposition Algorithm for Low-Power Technology Mapping. </title> <type> Technical Report TR97-21, </type> <institution> Department of Computer Sciences, University of Texas at Austin, </institution> <year> 1997. </year>
Reference-contexts: Based on these properties, section 5 presents two algorithms: one exact algorithm and one heuristic. Section 6 gives the experimental results and some concluding remarks. Due to space limit, most of the proofs are omitted. All of them can be found in <ref> [9] </ref>. 2 Problem formulation In technology decomposition, we need to decompose a multi-input gate into a tree of two-input gates.
References-found: 9

