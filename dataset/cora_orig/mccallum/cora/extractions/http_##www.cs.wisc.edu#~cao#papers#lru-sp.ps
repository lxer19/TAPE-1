URL: http://www.cs.wisc.edu/~cao/papers/lru-sp.ps
Refering-URL: http://www.cs.wisc.edu/~cao/publications.html
Root-URL: http://www.cs.wisc.edu
Email: cao@cs.wisc.edu  
Title: Allocation Policies for Application-Controlled File Cache Management  
Author: Pei Cao 
Address: Madison, WI 53706  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Abstract: Application control on file cache management promises to improve file I/O performance dramatically by exploiting user-level knowledge. A file cache allocation policy is essential in order for kernel to support application control. This paper presents the design, validation and refinement of the LRU-SP allocation policy, which guarantees fair usage of resources and protects system performance. The paper highlights three key aspects in successfully applying theoretical analysis to system problems: proper abstraction, experimental validation, and simple solutions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Pei Cao. </author> <title> Application-Controlled File Caching and Prefetching. </title> <type> PhD thesis, </type> <institution> Princeton University, </institution> <note> De-cember 1995. Also published as technical report CS TR-522-95. </note>
Reference-contexts: Then at every r t , 1 t n, H (A 1k (t)) = G (t): (1) The proof is essentially by case study and inductions. The details are in <ref> [1] </ref>. The techniques used in proving Lemma 1 also prove the following lemma. Lemma 2 At every reference r t of !, let N v (P i ; Alg i ; t) be the number of virtual blocks in A (t) that are in P i 's access sequence.
Reference: [2] <author> Pei Cao, Edward W. Felten, Anna R. Karlin, and Kai Li. </author> <title> Implementation and performance of integrated application-controlled file caching, prefetching and disk scheduling. </title> <booktitle> In TOCS, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: Partly because the interaction between theoretical modelling and system experiments has enabled a much better understanding of the behavior of LRU-SP. LRU-SP has been employed in a variety of environments, including application-directed prefetching in single disk <ref> [2] </ref> and multi-disk systems [8], and adaptive physical memory management in modern virtual memory systems [5]. 2 Establishing a Model How do we characterize the above vaguely stated properties that an allocation algorithm should satisfy? We need a model of behavior for multiple processes' file accesses.
Reference: [3] <author> Pei Cao, Edward W. Felten, and Kai Li. </author> <title> Application-controlled file caching policies. </title> <booktitle> In Proc. USENIX Summer 1994 Technical Conference, </booktitle> <pages> pages 171-182, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: This paper describes the design and evolution of one allocation algorithm, LRU with Swapping and Placeholder (LRU-SP). The design of LRU-SP started from an abstract model capturing the desired properties of allocation algorithms <ref> [3] </ref>, proceeded with an algorithm that is proven to satisfy the properties, and continued through implementation and experimentation [4]. The experiments revealed that although theoretical predictions do match most experimental results, there are important aspects of system behaviors that are missing in the abstract model. <p> Theorem 1 Both swapping and placeholders are necessary for LRU-SP to meet the fairness conditions. Proof. The proof is by examples showing when the fairness conditions are violated if swapping or place-holders are not employed. Details can be found in <ref> [3] </ref>. Page 2 The following theorem shows that swapping and placeholders are also sufficient for LRU-SP to meet the fairness conditions.
Reference: [4] <author> Pei Cao, Edward W. Felten, and Kai Li. </author> <title> Implementation and performance of application-controlled file caching. </title> <booktitle> In Proc. First USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 165-178, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: The design of LRU-SP started from an abstract model capturing the desired properties of allocation algorithms [3], proceeded with an algorithm that is proven to satisfy the properties, and continued through implementation and experimentation <ref> [4] </ref>. The experiments revealed that although theoretical predictions do match most experimental results, there are important aspects of system behaviors that are missing in the abstract model. The discovery then led to a refinement of both the model and the algorithm. <p> Page 3 4 Experimental Validation To test whether LRU-SP indeed performs well in real systems, we implemented the algorithm in the Ultrix 4.3 kernel and designed a series of experiments using a collection of I/O intensive applications <ref> [4] </ref>. The experiments showed that a simple-minded allocation policy, which does not satisfy the fairness conditions, can indeed hurt system performance even when all applications use smart replacement policies. In contrast, LRU-SP improves system performance by up to 45% when applications use good replacement policies.
Reference: [5] <author> Gideon Glass. </author> <title> Adaptive page replacement. </title> <type> Technical report, Master's Thesis, </type> <institution> University of Wisconsin-Madison, </institution> <year> 1997, </year> <month> May </month> <year> 1997. </year>
Reference-contexts: LRU-SP has been employed in a variety of environments, including application-directed prefetching in single disk [2] and multi-disk systems [8], and adaptive physical memory management in modern virtual memory systems <ref> [5] </ref>. 2 Establishing a Model How do we characterize the above vaguely stated properties that an allocation algorithm should satisfy? We need a model of behavior for multiple processes' file accesses.
Reference: [6] <author> K. Harty and D.R. Cherition. </author> <title> Application-controlled physical memory using external page-cache management. </title> <booktitle> In The 5th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: 1 Introduction As disk performance continues to lag behind microprocessor performance, file cache management becomes increasingly important for file system performance. Application-controlled cache management promises to improve file caching and prefetching through policies tailored to individual applications' needs <ref> [7, 6] </ref>. In order to allow applications to control file cache, operating systems must have an allocation policy to decide how the physical memory is allocated to competing processes. The complication in designing an allocation policy is that applications may be either "smart" or "stupid".
Reference: [7] <author> Michael Stonebraker. </author> <title> Virtual memory transaction processing. </title> <journal> Operating Systems Review, </journal> <volume> 18(2) </volume> <pages> 8-16, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: 1 Introduction As disk performance continues to lag behind microprocessor performance, file cache management becomes increasingly important for file system performance. Application-controlled cache management promises to improve file caching and prefetching through policies tailored to individual applications' needs <ref> [7, 6] </ref>. In order to allow applications to control file cache, operating systems must have an allocation policy to decide how the physical memory is allocated to competing processes. The complication in designing an allocation policy is that applications may be either "smart" or "stupid".
Reference: [8] <author> Andrew Tomkins, R. Hugo Patterson, and Garth Gib-son. </author> <title> Informed multi-process prefetching and caching. </title> <booktitle> In SIGMETRICS'97, </booktitle> <month> June </month> <year> 1997. </year> <pages> Page 5 </pages>
Reference-contexts: Partly because the interaction between theoretical modelling and system experiments has enabled a much better understanding of the behavior of LRU-SP. LRU-SP has been employed in a variety of environments, including application-directed prefetching in single disk [2] and multi-disk systems <ref> [8] </ref>, and adaptive physical memory management in modern virtual memory systems [5]. 2 Establishing a Model How do we characterize the above vaguely stated properties that an allocation algorithm should satisfy? We need a model of behavior for multiple processes' file accesses.
References-found: 8

