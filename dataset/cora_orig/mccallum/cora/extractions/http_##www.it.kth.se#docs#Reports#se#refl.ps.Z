URL: http://www.it.kth.se/docs/Reports/se/refl.ps.Z
Refering-URL: http://www.it.kth.se/docs/Reports/se/
Root-URL: http://www.it.kth.se
Abstract-found: 0
Intro-found: 1
Reference: <author> V. Kotkas, E. Tyugu. </author> <year> (1994). </year> <title> Knowledge-Based Techniques for Network Management. </title> <institution> Research Report TRITA-IT R 94:09, Dept. of Teleinformatics, KTH, Stockholm. </institution>
Reference-contexts: According to the idea of the declarative reection, the model changes in the process of operation of the self, and planning has to be dynamical during this process. As an example of this approach, we mention experiments with intelligent network management <ref> (Kotkas, Tyugu 94) </ref> where a network configuration model is being changed by network daemons, and management tasks are described declaratively on the network model used for management action planning. 2. <p> The most promising application area is network management, because a need for a reective network management system appears as soon as one tries to provide some management tools to inexperienced network users <ref> (Kotkas, Tyugu 94) </ref>. The complexity of management tasks prevents most of the users from taking any control over the rich environment provided by the networks of today.
Reference: <author> M. Matskin, J. Komorowski. </author> <year> (1993). </year> <title> Program Synthesis and Transformations in an Object-Oriented Environment. </title> <booktitle> Proc. ERCIM Workshop on Development and Transformations of Programs. Nancy, France. </booktitle> <pages> pp. 131 - 140. </pages>
Reference-contexts: Actually, the meta-rules have been implemented already in an earlier version of the NUT system (Tyugu 91), but now they are reimplemented using the set of functions mentioned above <ref> (Matskin 93) </ref>. The main idea here is to use classes as implementations of predicates which will be then used in the rules.
Reference: <author> E. Tyugu. </author> <year> (1991). </year> <title> Three New-Generation Software Environments. </title> <journal> Communications of the ACM, </journal> <volume> v.34, </volume> <pages> pp. 46-59. </pages>
Reference-contexts: These specifications are used by the synthesizer whose work has an explanation in terms of higher-order constraint networks as well as in terms of a type theory and intuitionistic logic. <ref> (Tyugu 91,b) </ref>. r4 r3 r0 f4 f5 f6 f9 r1 4. Agent shells The NUT system supports distributed computing by running NUT processes on different computers in a network (Vlassov et al. 94). We use this in an intelligent programming environment for distributed agents. <p> We are developing meta-level tools on top of the basic set of reection tools in the form of rules for manipulating classes. Actually, the meta-rules have been implemented already in an earlier version of the NUT system <ref> (Tyugu 91) </ref>, but now they are reimplemented using the set of functions mentioned above (Matskin 93). The main idea here is to use classes as implementations of predicates which will be then used in the rules.
Reference: <author> E. Tyugu. </author> <year> (1991b). </year> <title> Declarative Programming in a Type Theory. </title> <editor> B. Moeller (ed.), </editor> <title> Constructing Programs from Specifications. </title> <booktitle> North-Hol-land. </booktitle> <pages> pp. 451 - 469. </pages>
Reference-contexts: These specifications are used by the synthesizer whose work has an explanation in terms of higher-order constraint networks as well as in terms of a type theory and intuitionistic logic. <ref> (Tyugu 91,b) </ref>. r4 r3 r0 f4 f5 f6 f9 r1 4. Agent shells The NUT system supports distributed computing by running NUT processes on different computers in a network (Vlassov et al. 94). We use this in an intelligent programming environment for distributed agents. <p> We are developing meta-level tools on top of the basic set of reection tools in the form of rules for manipulating classes. Actually, the meta-rules have been implemented already in an earlier version of the NUT system <ref> (Tyugu 91) </ref>, but now they are reimplemented using the set of functions mentioned above (Matskin 93). The main idea here is to use classes as implementations of predicates which will be then used in the rules.
Reference: <author> E. Tyugu, T. Uustalu. </author> <year> (1994). </year> <title> Higher-order functional constraint networks. </title> <booktitle> Proc. NATO ASI on Constraint Programming. Springer Ver-lag. NATO ASI Series F: Computer and System Sciences, </booktitle> <volume> Vol. 131. </volume> <publisher> Springer Verlag. </publisher> <pages> pp. 116 - 139. </pages>
Reference-contexts: According to the idea of the declarative reection, the model changes in the process of operation of the self, and planning has to be dynamical during this process. As an example of this approach, we mention experiments with intelligent network management <ref> (Kotkas, Tyugu 94) </ref> where a network configuration model is being changed by network daemons, and management tasks are described declaratively on the network model used for management action planning. 2. <p> The NUT system The NUT system has been developed as an object-oriented system with additional powerful features for declarative programming, in particular, supporting program synthesis and oracle (planner) self model of self and environment D D planning <ref> (Tyugu 94) </ref>. This enabled us to add declarative reection tools to it with a moderate effort. The specification language of NUT is suitable for representing computational models and constitutes a basis of a language for reection. <p> This enabled us to add declarative reection tools to it with a moderate effort. The specification language of NUT is suitable for representing computational models and constitutes a basis of a language for reection. Knowledge representation in NUT is based on higher-order constraint networks <ref> (Tyugu, Uustalu 94) </ref>, which guarantees sufficiently high performance of the planner of NUT. This planner is immediately usable as an oracle in a reective system as we shall see later. <p> The most promising application area is network management, because a need for a reective network management system appears as soon as one tries to provide some management tools to inexperienced network users <ref> (Kotkas, Tyugu 94) </ref>. The complexity of management tasks prevents most of the users from taking any control over the rich environment provided by the networks of today.
Reference: <author> E. Tyugu. </author> <year> (1994). </year> <title> Classes as program specifications in NUT. </title> <journal> Journal of Automated Software Engineering, v. </journal> <volume> 1, </volume> <pages> pp. 315 - 334. </pages>
Reference-contexts: According to the idea of the declarative reection, the model changes in the process of operation of the self, and planning has to be dynamical during this process. As an example of this approach, we mention experiments with intelligent network management <ref> (Kotkas, Tyugu 94) </ref> where a network configuration model is being changed by network daemons, and management tasks are described declaratively on the network model used for management action planning. 2. <p> The NUT system The NUT system has been developed as an object-oriented system with additional powerful features for declarative programming, in particular, supporting program synthesis and oracle (planner) self model of self and environment D D planning <ref> (Tyugu 94) </ref>. This enabled us to add declarative reection tools to it with a moderate effort. The specification language of NUT is suitable for representing computational models and constitutes a basis of a language for reection. <p> This enabled us to add declarative reection tools to it with a moderate effort. The specification language of NUT is suitable for representing computational models and constitutes a basis of a language for reection. Knowledge representation in NUT is based on higher-order constraint networks <ref> (Tyugu, Uustalu 94) </ref>, which guarantees sufficiently high performance of the planner of NUT. This planner is immediately usable as an oracle in a reective system as we shall see later. <p> The most promising application area is network management, because a need for a reective network management system appears as soon as one tries to provide some management tools to inexperienced network users <ref> (Kotkas, Tyugu 94) </ref>. The complexity of management tasks prevents most of the users from taking any control over the rich environment provided by the networks of today.
Reference: <author> V. Vlassov, E. Tyugu, M. Addibpour. </author> <year> (1994). </year>
Reference-contexts: Agent shells The NUT system supports distributed computing by running NUT processes on different computers in a network <ref> (Vlassov et al. 94) </ref>. We use this in an intelligent programming environment for distributed agents. The largest modular unit in NUT is a package. It is a collection of classes (frames), objects and graphic views together with a script which represents an agent. <p> The reection tools described below are accessible for agents, and objects classes script the reection can be separately (in a unique way) implemented for each agent. Figure 4 taken from <ref> (Vlassov et al. 94) </ref> shows three agents: Boss, Worker 1 and Worker 2 as NUT processes. Low-level communication protocol via shared variables is visible, as well as package windows (NUT main windows) for the processes.
References-found: 7

