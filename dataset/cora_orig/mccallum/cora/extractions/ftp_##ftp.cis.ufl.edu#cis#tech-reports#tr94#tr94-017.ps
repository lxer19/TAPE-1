URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr94/tr94-017.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr94-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: fhanson,tedg@cis.ufl.edu  
Title: Selection Predicate Indexing for Active Databases Using Interval Skip Lists  
Author: Eric N. Hanson Theodore Johnson 
Date: 15 April 1994 (revised 13 October 1994)  
Address: Gainesville, FL 32611  
Affiliation: Computer and Information Sciences Department University of Florida  
Pubnum: TR94-017  
Abstract: A new, efficient selection predicate indexing scheme for active database systems is introduced. The selection predicate index proposed uses an interval index on an attribute of a relation or object collection when one or more rule condition clauses are defined on that attribute. The selection predicate index uses a new type of interval index called the interval skip list (IS-list). The IS-list is designed to allow efficient retrieval of all intervals that overlap a point, while allowing dynamic insertion and deletion of intervals. IS-list algorithms are described in detail. The IS-list allows efficient on-line searches, insertions, and deletions, yet is much simpler to implement than other comparable interval index data structures such as the priority search tree and balanced interval binary search tree (IBS-tree). IS-lists require only one third as much code to implement as balanced IBS-trees. The combination of simplicity, performance, and dynamic updateability of the IS-list is unmatched by any other interval index data structure. This makes the IS-list a good interval index structure for implementation in an active database predicate index. fl
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. M. Adel'son-Vel'skii and E. M. Landis. </author> <title> An algorithm for the organization of information. </title> <journal> Soviet Math. Dokl., </journal> <volume> 3 </volume> <pages> 1259-1262, </pages> <year> 1962. </year>
Reference-contexts: They support search, insertion, deletion, and ordered scan operations. What is astonishing about skip lists is that they can do what balanced trees such as AVL trees <ref> [1] </ref> can do, but they are much simpler to implement [26]. Skip lists also have other advantages over balanced trees, including lower storage use, and smaller constant factor overhead in actual implementations. <p> The variance of 11 the search times is also quite low, making the probability that a search will take significantly longer than log n time vanishingly small. Comparing actual implementations of skip lists and AVL trees <ref> [1] </ref>, skip lists perform as well as or better than highly-tuned non-recursive implementations of AVL trees, yet programmers tend to agree that skip lists are significantly easier to implement than AVL trees [26]. <p> Theorem 2 If the endpoints of the distribution are chosen independently and identically distributed (iid) from a continuous distribution, then D (i) = O (p i ). Proof: We consider, without loss of generality, that the endpoints are chosen iid from the uniform random distribution on <ref> [0; 1] </ref> (other continuous distributions can be mapped to a uniform [0; 1] distribution). Let us count M (w), the expected number of markers placed on a level i edge of length w (the distance between the endpoints is w). <p> Proof: We consider, without loss of generality, that the endpoints are chosen iid from the uniform random distribution on <ref> [0; 1] </ref> (other continuous distributions can be mapped to a uniform [0; 1] distribution). Let us count M (w), the expected number of markers placed on a level i edge of length w (the distance between the endpoints is w). <p> The theory of order statistics [11] tells us that the density of the joint distribution g (a; b) is a constant 2 in the region b 2 <ref> [0; 1] </ref>, a 2 [0; b]. Let us define w 1 and w 2 to be the lower and higher endpoints of e w .
Reference: [2] <author> Virginia E. Barker and Dennis E. O'Connor. </author> <title> Expert systems for configuration at Digital: XCON and beyond. </title> <journal> Communications of the ACM, </journal> <volume> 32(3) </volume> <pages> 298-318, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: We believe that this assumption is reasonable because rules are a form of intentional data (schema) as opposed to extensional data (contents). Moreover, the largest expert system applications built to date have on the order of 10,000 rules <ref> [2] </ref>, which is few enough that data structures associated with the rules will fit in a few megabytes of main memory. More typical rule-based system applications have on the order of 50 to 1000 rules.
Reference: [3] <author> David A. Brant and Daniel P. Miranker. </author> <title> Index support for rule activation. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 42-48, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 [4], KEE [20] and ART [21], and in active databases, including Ariel [16], POSTGRES [28, 32, 29], DATEX <ref> [3] </ref>, RPL [7], Starburst [33], HiPAC [6] and others.
Reference: [4] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5: an Introduction to Rule-Based Programming. </title> <publisher> Addison Wesley, </publisher> <year> 1985. </year>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 <ref> [4] </ref>, KEE [20] and ART [21], and in active databases, including Ariel [16], POSTGRES [28, 32, 29], DATEX [3], RPL [7], Starburst [33], HiPAC [6] and others.
Reference: [5] <author> Moez Chaabouni. </author> <title> A top-level discrimination network for database rule systems. </title> <type> Master's thesis, </type> <institution> Dept. of Computer Science and Eng., Wright State Univ., </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: Measurements of the actual Ariel IBS-tree-based selection predicate index <ref> [5] </ref> show results quite close to those estimated here for a IS-list-based selection predicate index. Given that the 2.35 msec figure is a per-tuple CPU cost, the time is significant, but not prohibitive. <p> We have implemented IS-lists in less than 1000 lines of C++ code, which is about one-third the amount of C++ code required in our implementation of interval binary search trees <ref> [5, 18] </ref>. Though implementation of IS-lists is not trivial, no other known interval index that is based on a self-balancing data structure and supports 32 both stabbing queries and dynamic updates can match the simplicity of implementation of the IS-list.
Reference: [6] <author> S. Chakravarthy et al. HiPAC: </author> <title> A research project in active, time-constrained database management, </title> <type> Final Technical Report. Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 [4], KEE [20] and ART [21], and in active databases, including Ariel [16], POSTGRES [28, 32, 29], DATEX [3], RPL [7], Starburst [33], HiPAC <ref> [6] </ref> and others. <p> A given database contains a set of n relations, R 1 ... R n , and m active database rules (triggers), r 1 ... r m . Rules are of the form on event if condition then action Rules of this type are called event-condition-action (ECA) rules <ref> [6] </ref>, and are the most popular type of rules being proposed in active database research at the time of this writing.
Reference: [7] <author> Lois M. L. Delcambre and James N. Etheredge. </author> <title> The relational production language: A production language for relational databases. </title> <booktitle> In Proceedings of the Second International Conference on Expert Database Systems, </booktitle> <pages> pages 153-162, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 [4], KEE [20] and ART [21], and in active databases, including Ariel [16], POSTGRES [28, 32, 29], DATEX [3], RPL <ref> [7] </ref>, Starburst [33], HiPAC [6] and others.
Reference: [8] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections: Part I. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 13(3-4):209-219, </volume> <year> 1983. </year>
Reference-contexts: The segment tree works well in a static environment, but is not adequate when it is necessary to dynamically add and delete intervals, as it is in an active database predicate index. Another data structure that can be used to process stabbing queries is the interval tree <ref> [8, 9] </ref>. Unfortunately, as with the segment tree, all the intervals must be known in advance to construct an interval tree. R-trees can index intervals dynamically [15]. Subtrees of each R-tree index node contain only data that lies within a containing rectangle in the index node.
Reference: [9] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections: Part II. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 13(3-4):221-229, </volume> <year> 1983. </year>
Reference-contexts: The segment tree works well in a static environment, but is not adequate when it is necessary to dynamically add and delete intervals, as it is in an active database predicate index. Another data structure that can be used to process stabbing queries is the interval tree <ref> [8, 9] </ref>. Unfortunately, as with the segment tree, all the intervals must be known in advance to construct an interval tree. R-trees can index intervals dynamically [15]. Subtrees of each R-tree index node contain only data that lies within a containing rectangle in the index node.
Reference: [10] <author> Ramez Elmasri, Gene T. J. Wuu, and Yeong-Joon Kim. </author> <title> The time index: An access structure for temporal data. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Databases, </booktitle> <pages> pages 1-12, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: A useful property of R-trees is that they require only O (n) space. Their performance should be good for rectangles (or intervals in the 1-dimensional case) with low overlap, but when there is heavy overlap, search time can degenerate rapidly. The time index <ref> [10] </ref> is designed to support efficient retrieval of versions of objects in a temporal database. Object versions are valid over time intervals. <p> We have not pursued development of such a structure because we felt that it would be more complex than IS-lists to implement and not perform better. An "interval B-tree" would be a close cousin of the time index <ref> [10] </ref>. 5.2 IS-list Algorithms The IS-list is formed by augmenting a skip list with additional information. IS-lists can accommodate points as well as open and closed intervals with inclusive and exclusive boundaries.
Reference: [11] <author> W. Feller. </author> <title> An Introduction to Probability Theory and Its Applications, Vol. II. </title> <publisher> John Wiley, </publisher> <year> 1970. </year>
Reference-contexts: The endpoints of the interval are uniformly randomly chosen, so that the joint distribution of (a; b) has the distribution of a two element order statistic. The theory of order statistics <ref> [11] </ref> tells us that the density of the joint distribution g (a; b) is a constant 2 in the region b 2 [0; 1], a 2 [0; b]. Let us define w 1 and w 2 to be the lower and higher endpoints of e w .
Reference: [12] <author> C. L. Forgy. </author> <title> Rete: A fast algorithm for the many pattern/many object pattern match problem. </title> <journal> Artificial Intelligence, </journal> <volume> 19 </volume> <pages> 17-37, </pages> <year> 1982. </year>
Reference-contexts: Some of the work on inference engines and active databases has fl The C++ source code for interval skip lists can be obtained by sending a request by e-mail to hanson@cis.ufl.edu, or from http://www.cis.ufl.edu/~hanson/IS-lists/ 1 lead to the development of the Rete algorithm <ref> [12] </ref>, a modified version of Rete called TREAT [24], extensions to the Rete algorithm to exploit parallelism [22], and an optimized generalization of Rete and TREAT called Gator [17]. All these algorithms can be enhanced by speeding up testing of selection predicates.
Reference: [13] <author> Charles L. Forgy. </author> <title> OPS5 user's manual. </title> <type> Technical Report CMU-CS-81-135, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> July </month> <year> 1981. </year>
Reference-contexts: The predicates on the list are then tested against the tuple sequentially. This is essentially the algorithm used in many main-memory-based production rule systems including some implementations of OPS5 <ref> [13, 24] </ref>.
Reference: [14] <author> Gaston H. Gonnet, J. Ian Munro, and Derick Wood. </author> <title> Direct dynamic structures for some line segment problems. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 23 </volume> <pages> 178-186, </pages> <year> 1983. </year>
Reference-contexts: A data structure closely related to the IBS-tree called the stabbing tree has been developed to find the stabbing number for a point given a collection of intervals <ref> [14] </ref>. The stabbing number is the number of intervals that overlap a point. In contrast, the IBS-tree and the IS-list return a stabbing set containing all the intervals overlapping the query point, not just the number.
Reference: [15] <author> A. Guttman. R-trees: </author> <title> A dynamic index structure for spatial searching. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 47-57, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: In addition, the need to set locks on index intervals and on tuples complicates the implementation of storage structures. 2.4 Multi-dimensional indexing This technique stores a collection of predicates in a multi-dimensional structure designed for indexing region data. Applicable indexes include the R-tree <ref> [15] </ref> and R+-tree [30] . Predicates are treated as regions in a k-dimensional space (where k is the number of attributes in the relation on which the predicates are defined), and inserted into a k-dimensional index. <p> Another data structure that can be used to process stabbing queries is the interval tree [8, 9]. Unfortunately, as with the segment tree, all the intervals must be known in advance to construct an interval tree. R-trees can index intervals dynamically <ref> [15] </ref>. Subtrees of each R-tree index node contain only data that lies within a containing rectangle in the index node. Since rectangles in each node may overlap, on searching or updating the tree it may be necessary to examine more than one subtree of any node.
Reference: [16] <author> Eric N. Hanson. </author> <title> Rule condition testing and action execution in Ariel. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 49-58, </pages> <month> June </month> <year> 1992. </year> <month> 34 </month>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 [4], KEE [20] and ART [21], and in active databases, including Ariel <ref> [16] </ref>, POSTGRES [28, 32, 29], DATEX [3], RPL [7], Starburst [33], HiPAC [6] and others. <p> Consider this relation schema: EMP (name, age, salary, dept, job) An example of the event and condition parts of an ECA rule on this EMP relation in the Ariel rule language <ref> [16] </ref> is: define rule r1 on append to emp if 20000 &lt; emp.salary and emp.salary &lt;= 30000 then ... <p> The data structures and algorithms presented, while not trivial, are simple enough to be feasible to implement in an active database system. The algorithm presented in this paper, using the 33 IBS-tree instead of the IS-list, has been implemented in the Ariel active DBMS <ref> [19, 16] </ref>. This implementation was done before the IS-list was discovered. If we were to implement the selection predicate index again, we would use the IS-list rather than the IBS-tree because the IS-list is simpler.
Reference: [17] <author> Eric N. Hanson. Gator: </author> <title> A generalized discrimination network for production rule matching. </title> <booktitle> In Pro--ceedings of the IJCAI Workshop on Production Systems and Their Innovative Applications, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: be obtained by sending a request by e-mail to hanson@cis.ufl.edu, or from http://www.cis.ufl.edu/~hanson/IS-lists/ 1 lead to the development of the Rete algorithm [12], a modified version of Rete called TREAT [24], extensions to the Rete algorithm to exploit parallelism [22], and an optimized generalization of Rete and TREAT called Gator <ref> [17] </ref>. All these algorithms can be enhanced by speeding up testing of selection predicates. The problem of determining which of a set of predicates match an object arises independent of the type of data or knowledge model used.
Reference: [18] <author> Eric N. Hanson and Moez Chaabouni. </author> <title> The IBS tree: A data structure for finding all intervals that overlap a point. </title> <type> Technical Report WSU-CS-90-11, </type> <institution> Wright State University, </institution> <month> April </month> <year> 1990. </year> <note> Also appears as Univ. of Florida CIS-TR-94-040, available at http://www.cis.ufl.edu:80/cis/tech-reports/. </note>
Reference-contexts: The interval binary search tree (IBS-tree) can handle stabbing queries, and can be balanced more easily and is easier to implement than the priority search tree, although it requires O (n log n) storage <ref> [18, 19] </ref>. We conjecture that balanced IBS-trees require O (log n) time for searching and O (log 2 n) average time for insertion and deletion, though a definitive performance analysis has not been done. <p> We have implemented IS-lists in less than 1000 lines of C++ code, which is about one-third the amount of C++ code required in our implementation of interval binary search trees <ref> [5, 18] </ref>. Though implementation of IS-lists is not trivial, no other known interval index that is based on a self-balancing data structure and supports 32 both stabbing queries and dynamic updates can match the simplicity of implementation of the IS-list. <p> The IS-list is useful anywhere an index for intervals is required which must be dynamically updatable. IS-lists offer a unique blend of simplicity and performance. Another dynamic data structure, the IBS-tree, has been developed that can match the performance of IS-lists (at least empirically) <ref> [19, 18] </ref>. But a definitive analytical performance analysis of IBS-tree has not been done. More importantly, IBS-trees require three times as many lines of code to implement as IS-lists. We conjecture that any interval index based on a balanced-tree scheme would require substantially more code than IS-lists.
Reference: [19] <author> Eric N. Hanson, Moez Chaabouni, Chang-ho Kim, and Yu-wang Wang. </author> <title> A predicate matching algorithm for database rule systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 271-280, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The interval binary search tree (IBS-tree) can handle stabbing queries, and can be balanced more easily and is easier to implement than the priority search tree, although it requires O (n log n) storage <ref> [18, 19] </ref>. We conjecture that balanced IBS-trees require O (log n) time for searching and O (log 2 n) average time for insertion and deletion, though a definitive performance analysis has not been done. <p> The IS-list is useful anywhere an index for intervals is required which must be dynamically updatable. IS-lists offer a unique blend of simplicity and performance. Another dynamic data structure, the IBS-tree, has been developed that can match the performance of IS-lists (at least empirically) <ref> [19, 18] </ref>. But a definitive analytical performance analysis of IBS-tree has not been done. More importantly, IBS-trees require three times as many lines of code to implement as IS-lists. We conjecture that any interval index based on a balanced-tree scheme would require substantially more code than IS-lists. <p> The data structures and algorithms presented, while not trivial, are simple enough to be feasible to implement in an active database system. The algorithm presented in this paper, using the 33 IBS-tree instead of the IS-list, has been implemented in the Ariel active DBMS <ref> [19, 16] </ref>. This implementation was done before the IS-list was discovered. If we were to implement the selection predicate index again, we would use the IS-list rather than the IBS-tree because the IS-list is simpler.
Reference: [20] <author> Sara Hedberg and Marilyn Steizner. </author> <title> Knowledge Engineering Environment (KEE) System: Summary of Release 3.1. </title> <publisher> Intellicorp Inc., </publisher> <address> Mountain View, CA, </address> <month> July </month> <year> 1987. </year>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 [4], KEE <ref> [20] </ref> and ART [21], and in active databases, including Ariel [16], POSTGRES [28, 32, 29], DATEX [3], RPL [7], Starburst [33], HiPAC [6] and others.
Reference: [21] <institution> Inference Corporation, </institution> <address> Los Angeles, CA. </address> <note> ART Reference Manual, </note> <year> 1990. </year>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 [4], KEE [20] and ART <ref> [21] </ref>, and in active databases, including Ariel [16], POSTGRES [28, 32, 29], DATEX [3], RPL [7], Starburst [33], HiPAC [6] and others.
Reference: [22] <author> Michael A. Kelly and Rudolph E. Seviora. </author> <title> An evaluation of DRete on CUPID for OPS5. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <year> 1989. </year>
Reference-contexts: has fl The C++ source code for interval skip lists can be obtained by sending a request by e-mail to hanson@cis.ufl.edu, or from http://www.cis.ufl.edu/~hanson/IS-lists/ 1 lead to the development of the Rete algorithm [12], a modified version of Rete called TREAT [24], extensions to the Rete algorithm to exploit parallelism <ref> [22] </ref>, and an optimized generalization of Rete and TREAT called Gator [17]. All these algorithms can be enhanced by speeding up testing of selection predicates. The problem of determining which of a set of predicates match an object arises independent of the type of data or knowledge model used.
Reference: [23] <author> Edward M. McCreight. </author> <title> Priority search trees. </title> <journal> SIAM Journal of Computing, </journal> <volume> 14(2) </volume> <pages> 257-278, </pages> <year> 1985. </year>
Reference-contexts: Another data structure which solves the stabbing query problem efficiently (among others), and does allow dynamic insertion and deletion of intervals is the priority search tree <ref> [23] </ref>. An advantage of the priority search tree is that it requires only O (n) space to index n intervals. However, the priority search tree in its balanced form is very complex to implement [34].
Reference: [24] <author> Daniel P. Miranker. </author> <title> TREAT: A better match algorithm for AI production systems. </title> <booktitle> In Proc. AAAI National Conference on Artificial Intelligence, </booktitle> <pages> pages 42-47, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: of the work on inference engines and active databases has fl The C++ source code for interval skip lists can be obtained by sending a request by e-mail to hanson@cis.ufl.edu, or from http://www.cis.ufl.edu/~hanson/IS-lists/ 1 lead to the development of the Rete algorithm [12], a modified version of Rete called TREAT <ref> [24] </ref>, extensions to the Rete algorithm to exploit parallelism [22], and an optimized generalization of Rete and TREAT called Gator [17]. All these algorithms can be enhanced by speeding up testing of selection predicates. <p> The predicates on the list are then tested against the tuple sequentially. This is essentially the algorithm used in many main-memory-based production rule systems including some implementations of OPS5 <ref> [13, 24] </ref>.
Reference: [25] <author> William Pugh. </author> <title> A skip list cookbook. </title> <type> Technical Report CS-TR-2286, </type> <institution> Dept. of Computer Science, Univ. of Maryland, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: For a full description of the algorithms for maintaining skip lists and skip lists extended to support additional capabilities such as searching with fingers, efficient merging, finding the kth item in a list etc. the reader is referred to <ref> [26, 25] </ref>. The performance of skip lists is quite similar to that of balanced binary search trees. The expected value of times for searching, insertion and deletion in a skip list with n elements are all O (log n).
Reference: [26] <author> William Pugh. </author> <title> Skip lists: A probabilistic alternative to balanced trees. </title> <journal> Communications of the ACM, </journal> <volume> 33(6) </volume> <pages> 668-676, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Queries of this kind are called stabbing queries [27]. This section introduces the interval skip list (IS-list), which is designed to handle stabbing queries efficiently. The IS-list is an extension of the randomized list structure known as the skip list <ref> [26] </ref>. <p> An "interval B-tree" would be a close cousin of the time index [10]. 5.2 IS-list Algorithms The IS-list is formed by augmenting a skip list with additional information. IS-lists can accommodate points as well as open and closed intervals with inclusive and exclusive boundaries. The skip list data structure <ref> [26] </ref> is reviewed below and then extensions needed to index intervals are described. 5.2.1 Review of Skip Lists Skip lists are a probabilistic alternative to balanced binary trees. They support search, insertion, deletion, and ordered scan operations. <p> They support search, insertion, deletion, and ordered scan operations. What is astonishing about skip lists is that they can do what balanced trees such as AVL trees [1] can do, but they are much simpler to implement <ref> [26] </ref>. Skip lists also have other advantages over balanced trees, including lower storage use, and smaller constant factor overhead in actual implementations. <p> For a full description of the algorithms for maintaining skip lists and skip lists extended to support additional capabilities such as searching with fingers, efficient merging, finding the kth item in a list etc. the reader is referred to <ref> [26, 25] </ref>. The performance of skip lists is quite similar to that of balanced binary search trees. The expected value of times for searching, insertion and deletion in a skip list with n elements are all O (log n). <p> Comparing actual implementations of skip lists and AVL trees [1], skip lists perform as well as or better than highly-tuned non-recursive implementations of AVL trees, yet programmers tend to agree that skip lists are significantly easier to implement than AVL trees <ref> [26] </ref>. <p> The next step is to start at A, search for B, and place markers for (A,B) in a way that satisfies the marker invariant. To place an interval end-point A into the list, the first step is to use the standard interval skip list insertion algorithm <ref> [26] </ref> to insert A. During this step, one must save a pointer to the new IS-list node containing A (call this N ) and save the updated array which contains pointers to the nodes with pointers to N that had to be adjusted when A was inserted.
Reference: [27] <author> Hanan Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addision Wesley, </publisher> <address> Reading, Mass., </address> <year> 1990. </year>
Reference-contexts: Queries of this kind are called stabbing queries <ref> [27] </ref>. This section introduces the interval skip list (IS-list), which is designed to handle stabbing queries efficiently. The IS-list is an extension of the randomized list structure known as the skip list [26]. <p> The simplest solution is to place all n intervals in Q in a list and traverse the list sequentially, checking each interval to see if it overlaps the query point. This algorithm has a search complexity of O (n). A more sophisticated approach is based on the segment tree <ref> [27] </ref>. To form a segment tree, the set of all endpoints of intervals in Q is formed, and an ordered complete binary tree is built that has the endpoints 8 as its leaves.
Reference: [28] <author> M. Stonebraker, M. Hearst, and S. Potaminos. </author> <title> A commentary on the POSTGRES rules system. </title> <journal> SIG-MOD Record, </journal> <volume> 18(3) </volume> <pages> 5-11, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 [4], KEE [20] and ART [21], and in active databases, including Ariel [16], POSTGRES <ref> [28, 32, 29] </ref>, DATEX [3], RPL [7], Starburst [33], HiPAC [6] and others.
Reference: [29] <author> M. Stonebraker and G. Kemnitz. </author> <title> The POSTGRES next-generation database management system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 78-92, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 [4], KEE [20] and ART [21], and in active databases, including Ariel [16], POSTGRES <ref> [28, 32, 29] </ref>, DATEX [3], RPL [7], Starburst [33], HiPAC [6] and others.
Reference: [30] <author> M. Stonebraker, T. Sellis, and E. Hanson. </author> <title> An analysis of rule indexing implementations in data base systems. </title> <booktitle> In Proceedings of the First Annual Conference on Expert Database Systems, </booktitle> <pages> pages 353-364, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: The algorithm performs well when the average number of predicates per relation is small, and the predicates are distributed evenly over the relations. 4 2.3 Physical Locking This method, discussed in <ref> [30, 31] </ref>, involves treating a predicate clause like a query, and running the standard query optimizer to produce an access plan for the query. <p> In addition, the need to set locks on index intervals and on tuples complicates the implementation of storage structures. 2.4 Multi-dimensional indexing This technique stores a collection of predicates in a multi-dimensional structure designed for indexing region data. Applicable indexes include the R-tree [15] and R+-tree <ref> [30] </ref> . Predicates are treated as regions in a k-dimensional space (where k is the number of attributes in the relation on which the predicates are defined), and inserted into a k-dimensional index.
Reference: [31] <author> Michael Stonebraker, Eric Hanson, and Spiros Potamianos. </author> <title> The POSTGRES rule manager. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(7) </volume> <pages> 897-907, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: The algorithm performs well when the average number of predicates per relation is small, and the predicates are distributed evenly over the relations. 4 2.3 Physical Locking This method, discussed in <ref> [30, 31] </ref>, involves treating a predicate clause like a query, and running the standard query optimizer to produce an access plan for the query.
Reference: [32] <author> Michael Stonebraker, Lawrence Rowe, and Michael Hirohama. </author> <title> The implementation of POSTGRES. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(7) </volume> <pages> 125-142, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 [4], KEE [20] and ART [21], and in active databases, including Ariel [16], POSTGRES <ref> [28, 32, 29] </ref>, DATEX [3], RPL [7], Starburst [33], HiPAC [6] and others.
Reference: [33] <author> Jennifer Widom, Roberta J. Cochrane, and Bruce G. Lindsay. </author> <title> Implementing set-oriented production rules as an extension to Starburst. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <year> 1991. </year>
Reference-contexts: Extensive research has been done on processing rule conditions efficiently in inference engines for developing knowledge-based systems, such as OPS5 [4], KEE [20] and ART [21], and in active databases, including Ariel [16], POSTGRES [28, 32, 29], DATEX [3], RPL [7], Starburst <ref> [33] </ref>, HiPAC [6] and others.
Reference: [34] <author> Nicklaus Wirth. </author> <title> Algorithms + Data Structures = Programs. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year> <month> 35 </month>
Reference-contexts: An advantage of the priority search tree is that it requires only O (n) space to index n intervals. However, the priority search tree in its balanced form is very complex to implement <ref> [34] </ref>. In addition, for a priority search tree to handle a set 9 of intervals with non-unique lower bounds, a special transformation must be used to transform the set of intervals into one where the intervals have unique lower bounds.
References-found: 34

