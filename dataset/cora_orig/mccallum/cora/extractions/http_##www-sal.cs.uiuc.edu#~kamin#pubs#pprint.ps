URL: http://www-sal.cs.uiuc.edu/~kamin/pubs/pprint.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~kamin/pubs/index.html
Root-URL: http://www.cs.uiuc.edu
Title: An implementation-oriented semantics of Wadler's pretty-printing combinators  
Author: Sam Kamin 
Date: June 10, 1998  
Address: DRAFT  
Affiliation: Oregon Graduate Institute  
Abstract: We present a new implementation of Wadler's pretty-printing combinators. In this implementation, the combinators explicitly manipulate document values, rather than being abstract syntax operators. The purpose of this paper is to advance a point of view about domain mod-elling and language embedding: that the first and most essential step in domain modelling is finding appropriate values to represent objects in the domain. In this case, we have found what appears to be the appropriate notion of "document value" (to the extent that Wadler's combinators represent an appropriate notion of "document"). We argue that proceeding from this point of view provides greater insight into the domain, as well as a more efficient implementation of the combinators. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Hughes, </author> <title> "The design of a pretty-printer library," </title> <editor> in J. Jeuring and E. Meijer (eds.), </editor> <booktitle> Advanced Functional Programming, </booktitle> <publisher> Springer-Verlag LNCS 925, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction In <ref> [1] </ref>, John Hughes presented a case study in the embedding of a domain in a functional language.
Reference: [2] <author> S. L. Peyton Jones, </author> <title> Haskell pretty-printing library, </title> <note> available at http://www.dcs.gla.ac.uk/~simonpj/, 1997. </note>
Reference-contexts: The domain was that of pretty-printing | displaying a data type such as an abstract syntax tree neatly with appropriate indentations and line breaks | and the case study presented a set of operations, or combinators, for the domain, and their implementation. Simon Peyton Jones <ref> [2] </ref> added a modified version of Hughes's combinators to the libraries for the major Haskell implementations (GHC and Hugs). Phil Wadler [3, 4] presented a different set of pretty-printing combinators, with somewhat more satisfactory algebraic properties.
Reference: [3] <author> P. Wadler, </author> <title> "A prettier printer," </title> <institution> Bell Labs, </institution> <month> March </month> <year> 1998. </year>
Reference-contexts: Simon Peyton Jones [2] added a modified version of Hughes's combinators to the libraries for the major Haskell implementations (GHC and Hugs). Phil Wadler <ref> [3, 4] </ref> presented a different set of pretty-printing combinators, with somewhat more satisfactory algebraic properties. The presentations by Hughes and Wadler are distinguished by the method used to develop the implementations. In each case, algebraic properties were deduced from an abstract (not efficiently implementable) version of the combinators. <p> Our point in reiterating them is to say that they are still valid for embeddings of new domains | domains which are generally much simpler than the domain of general-purpose computing | into functional languages. 3 Wadler's pretty-printing combinators The pretty-printing combinators given by Wadler in <ref> [3] </ref> and [4] are slightly different. We implement those given in the more recent [4]. They are: text s. Print s. s is assumed not to contain any newline characters, i.e. to be "flat." empty. Print nothing. line. Print a newline. <p> Needs more thought. 5 Needs work. Need to prove that there is actually some connection between the three components of a document, e.g. the document is really able to produce a first line containing ! characters. 8 7 Algebraic properties In <ref> [3, 4] </ref>, Wadler lists various algebraic properties of these combinators, upon which his imple mentation is based. <p> In <ref> [3] </ref>, he gives the following identities: text "" = empty text (st) = text s &lt;&gt; text t nest i (D &lt;&gt; D 0 ) = nest i D &lt;&gt; nest i D 0 nest i empty = empty nest (i + j) D = nest i (nest j D) nest <p> The examples have been tested using both the definitions given in this paper and using Thomas Nordin's SML version of Wadler's combinators, giving identical results in all cases. 15 The following proposed identity, given by Wadler in <ref> [3] </ref>, comes from the intuition that these combinators work by lifting all the choice operators to the top.
Reference: [4] <editor> P. Wadler, </editor> <booktitle> Notes for presentation at IFIP Working Group 2.8 meeting, </booktitle> <month> March </month> <year> 1998. </year> <month> 19 </month>
Reference-contexts: Simon Peyton Jones [2] added a modified version of Hughes's combinators to the libraries for the major Haskell implementations (GHC and Hugs). Phil Wadler <ref> [3, 4] </ref> presented a different set of pretty-printing combinators, with somewhat more satisfactory algebraic properties. The presentations by Hughes and Wadler are distinguished by the method used to develop the implementations. In each case, algebraic properties were deduced from an abstract (not efficiently implementable) version of the combinators. <p> Our point in reiterating them is to say that they are still valid for embeddings of new domains | domains which are generally much simpler than the domain of general-purpose computing | into functional languages. 3 Wadler's pretty-printing combinators The pretty-printing combinators given by Wadler in [3] and <ref> [4] </ref> are slightly different. We implement those given in the more recent [4]. They are: text s. Print s. s is assumed not to contain any newline characters, i.e. to be "flat." empty. Print nothing. line. Print a newline. <p> are still valid for embeddings of new domains | domains which are generally much simpler than the domain of general-purpose computing | into functional languages. 3 Wadler's pretty-printing combinators The pretty-printing combinators given by Wadler in [3] and <ref> [4] </ref> are slightly different. We implement those given in the more recent [4]. They are: text s. Print s. s is assumed not to contain any newline characters, i.e. to be "flat." empty. Print nothing. line. Print a newline. <p> Needs more thought. 5 Needs work. Need to prove that there is actually some connection between the three components of a document, e.g. the document is really able to produce a first line containing ! characters. 8 7 Algebraic properties In <ref> [3, 4] </ref>, Wadler lists various algebraic properties of these combinators, upon which his imple mentation is based. <p> ) &lt;|&gt; D 00 nest i (D &lt;|&gt; D 0 ) = nest i D &lt;|&gt; nest i D 0 (D &lt;|&gt; D 0 ) &lt;&gt; D 00 = (D &lt;&gt; D 00 ) &lt;|&gt; (D 0 &lt;&gt; D 00 ) The last three of these are not mentioned in <ref> [4] </ref>; the last one is, in fact, untrue (we explain why in section 8). Wadler adds two rules in [4] involving the new constant none, stating that it is a right and left identity for &lt;|&gt;. none does not appear to be a "user-level" combinator, as it is not used in <p> 0 (D &lt;|&gt; D 0 ) &lt;&gt; D 00 = (D &lt;&gt; D 00 ) &lt;|&gt; (D 0 &lt;&gt; D 00 ) The last three of these are not mentioned in <ref> [4] </ref>; the last one is, in fact, untrue (we explain why in section 8). Wadler adds two rules in [4] involving the new constant none, stating that it is a right and left identity for &lt;|&gt;. none does not appear to be a "user-level" combinator, as it is not used in any of the examples given in [4]. <p> Wadler adds two rules in <ref> [4] </ref> involving the new constant none, stating that it is a right and left identity for &lt;|&gt;. none does not appear to be a "user-level" combinator, as it is not used in any of the examples given in [4].
References-found: 4

