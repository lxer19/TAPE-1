URL: ftp://ftp.cs.brown.edu/pub/techreports/95/cs95-09.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-95-09.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Gul Agha. </author> <title> Concurrent object-oriented programming. </title> <journal> Comm. of the ACM, </journal> <volume> 33(9), </volume> <month> September, </month> <year> 1990. </year>
Reference-contexts: None of the programming languages, however, recognize processes. Our language recognizes multi-threaded entities and provides a higher level model for entities than the process model of Unix. The actor model was first developed by Hewitt [5] to model active entities. It was further developed by Agha <ref> [1, 2] </ref>. Our entity model have some similarities with the actor model. Agha modeled actors as autonomous and concurrently executing objects which send each other messages asynchronously.
Reference: [2] <author> Gul Agha. </author> <title> Actors: A model of Concurrent Computation is Distributed Systems. </title> <publisher> The MIT Press. </publisher> <year> 1986. </year>
Reference-contexts: None of the programming languages, however, recognize processes. Our language recognizes multi-threaded entities and provides a higher level model for entities than the process model of Unix. The actor model was first developed by Hewitt [5] to model active entities. It was further developed by Agha <ref> [1, 2] </ref>. Our entity model have some similarities with the actor model. Agha modeled actors as autonomous and concurrently executing objects which send each other messages asynchronously.
Reference: [3] <author> Maurice J. Bach. </author> <title> The design of the Unix operating systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, USA, </address> <year> 1986. </year>
Reference-contexts: In this paper, we discuss what constitutes an entity and present a language for describing them. An active entity, or simply an entity, is modeled as an object with a private state and one or more independent threads of control. 2 Related Research A Unix process <ref> [3] </ref> is a good example of an entity. Unix based distributed systems are usually built using multiple processes. Traditionally Unix processes were single-threaded, but modern Unix processes can be multi-threaded. None of the programming languages, however, recognize processes.
Reference: [4] <author> J. van den Bos and C. Laffra. </author> <title> PROCOL: A concurrent object-oriented language with protocols delegation and constraints. </title> <journal> Acta Informatica 28 </journal> <pages> 511-538. </pages> <year> 1991. </year>
Reference-contexts: In response to receiving a message, an actor can send another message asynchronously, change its state before processing the next message, or create a new actor. Several other concurrent object-oriented programming languages have been proposed recently <ref> [4, 8, 9, 10] </ref>. Liskov and Scheier [6, 7] developed a system and a programming language called Argus for building distributed systems under some special problems such as network partitions and crashes of remote nodes.
Reference: [5] <author> C. Hewitt. </author> <title> Viewing control structures as patterns of passing messages. </title> <journal> Journal of Artificial Intelligence, </journal> <volume> 8(3):323364, </volume> <year> 1977. </year>
Reference-contexts: Traditionally Unix processes were single-threaded, but modern Unix processes can be multi-threaded. None of the programming languages, however, recognize processes. Our language recognizes multi-threaded entities and provides a higher level model for entities than the process model of Unix. The actor model was first developed by Hewitt <ref> [5] </ref> to model active entities. It was further developed by Agha [1, 2]. Our entity model have some similarities with the actor model. Agha modeled actors as autonomous and concurrently executing objects which send each other messages asynchronously.
Reference: [6] <author> Barbara Liskov. </author> <title> Distributed programming in Argus. </title> <journal> Comm. of the ACM, </journal> <volume> 31(3). </volume> <month> March, </month> <year> 1988. </year>
Reference-contexts: In response to receiving a message, an actor can send another message asynchronously, change its state before processing the next message, or create a new actor. Several other concurrent object-oriented programming languages have been proposed recently [4, 8, 9, 10]. Liskov and Scheier <ref> [6, 7] </ref> developed a system and a programming language called Argus for building distributed systems under some special problems such as network partitions and crashes of remote nodes.
Reference: [7] <author> Barbara Liskov and Robert Scheier. </author> <title> Guardians and actions: Linguistic support for robust, distributed programs. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 5(3):381404, </volume> <month> July, </month> <year> 1993 </year>
Reference-contexts: In response to receiving a message, an actor can send another message asynchronously, change its state before processing the next message, or create a new actor. Several other concurrent object-oriented programming languages have been proposed recently [4, 8, 9, 10]. Liskov and Scheier <ref> [6, 7] </ref> developed a system and a programming language called Argus for building distributed systems under some special problems such as network partitions and crashes of remote nodes.
Reference: [8] <author> Chris Tomlinson and Vineet Singh. </author> <title> Inheritance and synchronization with enabled-sets. </title> <booktitle> OOPSLA 1989. </booktitle>
Reference-contexts: In response to receiving a message, an actor can send another message asynchronously, change its state before processing the next message, or create a new actor. Several other concurrent object-oriented programming languages have been proposed recently <ref> [4, 8, 9, 10] </ref>. Liskov and Scheier [6, 7] developed a system and a programming language called Argus for building distributed systems under some special problems such as network partitions and crashes of remote nodes.
Reference: [9] <author> Anand Tripathi, Eric Berge and Mehmet Aksit. </author> <title> An implementation of the object-oriented programming language SINA. </title> <journal> Software-Practice and Experience, </journal> <volume> 19(3), </volume> <month> March, </month> <year> 1989. </year>
Reference-contexts: In response to receiving a message, an actor can send another message asynchronously, change its state before processing the next message, or create a new actor. Several other concurrent object-oriented programming languages have been proposed recently <ref> [4, 8, 9, 10] </ref>. Liskov and Scheier [6, 7] developed a system and a programming language called Argus for building distributed systems under some special problems such as network partitions and crashes of remote nodes.
Reference: [10] <author> Akinori Yonezawa. </author> <title> ABCL: An Object-Oriented Comcurrent System. </title> <booktitle> Computer Systems Series. </booktitle> <publisher> The MIT Press. </publisher> <year> 1990. </year>
Reference-contexts: In response to receiving a message, an actor can send another message asynchronously, change its state before processing the next message, or create a new actor. Several other concurrent object-oriented programming languages have been proposed recently <ref> [4, 8, 9, 10] </ref>. Liskov and Scheier [6, 7] developed a system and a programming language called Argus for building distributed systems under some special problems such as network partitions and crashes of remote nodes.
References-found: 10

