URL: ftp://theory.lcs.mit.edu/pub/tds/CONCUR93.ps.Z
Refering-URL: http://theory.lcs.mit.edu/tds/reflist.html
Root-URL: 
Title: Quiescence, Fairness, Testing, and the Notion of Implementation (Extended abstract)  
Author: Roberto Segala 
Address: Cambridge, MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: Two different formalisms for concurrency are compared and are shown to have common foundations. The Input/Output automaton model and the theory of testing are analyzed in the framework of transition systems. The relationship between the fair and quiescent preorders of I/O automata is investigated and the two preorders are shown to coincide on a large class of automata. I/O automata are encoded into the theory of testing and the reversed must preorder is shown to be equivalent to the quiescent preorder for strongly convergent, finitely branching automata up to encoding. Conversely, a theory of testing is defined directly on I/O automata, and the new reversed must preorder is shown to coincide with the quiescent preorder on strongly convergent, finitely branching automata. Finally, some considerations are given on the issue of divergence, and on other existing theories with an I/O distinction.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Brookes, C. Hoare, and A. Roscoe. </author> <title> A theory of communicating sequential processes. </title> <journal> J. ACM, </journal> <volume> 31(3) </volume> <pages> 560-599, </pages> <year> 1984. </year>
Reference-contexts: 1 Introduction Several theories of concurrency deal with the idea of implementation. Among them, one of the most accepted theories is connected with the failure preorder of <ref> [1, 8] </ref> and with the theory of testing of [3, 7], which are closely related each other [4]. <p> In [3] it is shown that the must preorder coincides with the reversed failure preorder of CSP [8] on objects that can never diverge. The failure preorder is used as an implementation relation within the CSP community <ref> [1, 2] </ref> and the intuitive idea at the base of its use is that an implementation has to be more deterministic than its specification. Therefore, the result of [3] also suggests a possible use of the must preorder as an implementation relation.
Reference: 2. <author> S. Brookes and A. Roscoe. </author> <title> An improved failures model for communicating processes. </title> <editor> In S. Brookes, A. Roscoe, and G. Winskel, editors, </editor> <booktitle> Seminar on Concur-rency, volume 197 of Lecture Notes in Computer Science, </booktitle> <pages> pages 281-305. </pages> <publisher> Springer-Verlag, </publisher> <month> july </month> <year> 1984. </year> <booktitle> Lecture and Notes in Computer Science, </booktitle> <volume> Vol 197. </volume>
Reference-contexts: In [3] it is shown that the must preorder coincides with the reversed failure preorder of CSP [8] on objects that can never diverge. The failure preorder is used as an implementation relation within the CSP community <ref> [1, 2] </ref> and the intuitive idea at the base of its use is that an implementation has to be more deterministic than its specification. Therefore, the result of [3] also suggests a possible use of the must preorder as an implementation relation.
Reference: 3. <author> R. De Nicola. </author> <title> Testing Equivalences and Fully Abstract Models for Communicating Processes. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <year> 1985. </year>
Reference-contexts: 1 Introduction Several theories of concurrency deal with the idea of implementation. Among them, one of the most accepted theories is connected with the failure preorder of [1, 8] and with the theory of testing of <ref> [3, 7] </ref>, which are closely related each other [4]. Other theories deal with receptive systems [6, 9, 10], where there is a clear separation between the events under the control of the external environment of a given object and those events under the control of the object itself. <p> Two preorders can then be defined over objects: the may preorder, which orders objects by the sets of experiments that may succeed, and the must preorder, which orders objects by the sets of experiments that must succeed. In <ref> [3] </ref> it is shown that the must preorder coincides with the reversed failure preorder of CSP [8] on objects that can never diverge. <p> The failure preorder is used as an implementation relation within the CSP community [1, 2] and the intuitive idea at the base of its use is that an implementation has to be more deterministic than its specification. Therefore, the result of <ref> [3] </ref> also suggests a possible use of the must preorder as an implementation relation. In the I/O automaton model, each object is associated with an explicit interface consisting of input, output and internal event names (actions). <p> are rather intuitive, however in this paper we validate them by relating the fair and quiescent preorders to the theory of testing. 2.3 The Theory of Testing A different method for comparing transition systems is based on the observation of the interactions between a transition system and an external experimenter <ref> [3, 5, 7] </ref>. An experimenter for a transition system T is a transition system E, compatible with T , whose external actions are those of T plus an action w, called the success action. <p> T 1 v MUST T 2 iff 8 E T 1 must E implies T 2 must E The may and must preorders can be characterized differently without referring to a notion of external experimenter <ref> [3] </ref>. In particular the may preorder coincides with the external trace preorder; for the must preorder we need some definitions.
Reference: 4. <author> R. De Nicola. </author> <title> Extensional equivalences for transition systems. </title> <journal> Acta Informatica, </journal> <volume> 24 </volume> <pages> 211-237, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Several theories of concurrency deal with the idea of implementation. Among them, one of the most accepted theories is connected with the failure preorder of [1, 8] and with the theory of testing of [3, 7], which are closely related each other <ref> [4] </ref>. Other theories deal with receptive systems [6, 9, 10], where there is a clear separation between the events under the control of the external environment of a given object and those events under the control of the object itself.
Reference: 5. <author> R. De Nicola and M. Hennessy. </author> <title> Testing equivalences for processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 34 </volume> <pages> 83-133, </pages> <year> 1984. </year>
Reference-contexts: are rather intuitive, however in this paper we validate them by relating the fair and quiescent preorders to the theory of testing. 2.3 The Theory of Testing A different method for comparing transition systems is based on the observation of the interactions between a transition system and an external experimenter <ref> [3, 5, 7] </ref>. An experimenter for a transition system T is a transition system E, compatible with T , whose external actions are those of T plus an action w, called the success action.
Reference: 6. <author> D. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. </title> <publisher> ACM Distinguished Dissertations. MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: Among them, one of the most accepted theories is connected with the failure preorder of [1, 8] and with the theory of testing of [3, 7], which are closely related each other [4]. Other theories deal with receptive systems <ref> [6, 9, 10] </ref>, where there is a clear separation between the events under the control of the external environment of a given object and those events under the control of the object itself. <p> In the I/O automaton model, each object is associated with an explicit interface consisting of input, output and internal event names (actions). Input actions are always enabled and the occurrence of output actions cannot be blocked by the external environment. In other words, each object has to be receptive <ref> [6] </ref> on its inputs and each action is the output action of at most one object. <p> Finally, we consider two other well known formalisms with an Input/Output distinction: the Receptive Process Theory of Mark Josephs [9], which is used for the specification and verification of delay-insensitive circuits, and the Complete Trace Structures of David Dill <ref> [6] </ref> which are used for the specification and verification of speed-independent circuits. Both of these formalisms are closely related to I/O automata and to the theory of testing. <p> The quiescent preorder of [16], in fact, has to consider quiescent and external traces at the same time in order to correctly handle transition systems that can output forever. 7.2 Complete Trace Structures In his PhD thesis <ref> [6] </ref> David Dill introduces Complete Trace Structures for the description of speed-independent circuits. <p> Our main result is that for strongly convergent and input enabled transition systems the quiescent preorder of I/O automata coincides with the reversed must preorder. Finally we have shown how other two widely known theories of receptive systems <ref> [6, 9] </ref> relate to the above models. We also have outlined some of the problems of divergences. It is not clear yet what a divergence should really represent.
Reference: 7. <author> M. Hennessy. </author> <title> Algebraic Theory of Processes. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mas-sachusetts, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction Several theories of concurrency deal with the idea of implementation. Among them, one of the most accepted theories is connected with the failure preorder of [1, 8] and with the theory of testing of <ref> [3, 7] </ref>, which are closely related each other [4]. Other theories deal with receptive systems [6, 9, 10], where there is a clear separation between the events under the control of the external environment of a given object and those events under the control of the object itself. <p> In this paper we investigate how and when receptive theories can be viewed as a special case of a general, non-receptive theory. The formalisms we use for our analysis are the theory of testing <ref> [7] </ref> and the Input/Output automaton model [10], which has been widely used for the verification of complex distributed algorithms [17, ?]. <p> As a corollary it is possible to identify a class of I/O automata for which the fair preorder coincides with the notion of implementation of the CSP community. We also show that it is possible to define a theory of testing similar to that of <ref> [7] </ref> directly on I/O automata. Once again, the main theorem is that for strongly convergent and finitely branching I/O automata the quiescent preorder coincides with the reversed must preorder. <p> are rather intuitive, however in this paper we validate them by relating the fair and quiescent preorders to the theory of testing. 2.3 The Theory of Testing A different method for comparing transition systems is based on the observation of the interactions between a transition system and an external experimenter <ref> [3, 5, 7] </ref>. An experimenter for a transition system T is a transition system E, compatible with T , whose external actions are those of T plus an action w, called the success action.
Reference: 8. <author> C. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <address> En-glewood Cliffs, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction Several theories of concurrency deal with the idea of implementation. Among them, one of the most accepted theories is connected with the failure preorder of <ref> [1, 8] </ref> and with the theory of testing of [3, 7], which are closely related each other [4]. <p> In [3] it is shown that the must preorder coincides with the reversed failure preorder of CSP <ref> [8] </ref> on objects that can never diverge. The failure preorder is used as an implementation relation within the CSP community [1, 2] and the intuitive idea at the base of its use is that an implementation has to be more deterministic than its specification. <p> As for I/O automata, two RPT objects can be composed in parallel only if they do not have any common output actions. The semantics of an RPT expression is denotational and is given in terms of "failures", however these failures are not those of <ref> [8] </ref>. The failures of [9] coincide with the quiescent traces of [16] (see Section 2) if we assume that a system performing infinitely many output actions without being provided with any input has a chaotic behavior (it is divergent). <p> The relation is called conformation preorder and expresses the notion of implementation for complete trace structures. The idea of a failure, which is not the same as the idea of <ref> [8] </ref>, is the aspect of complete trace structures that has no corresponding notion within the other theories we are considering in this paper. In fact, I/O automata and Receptive Process Theory are receptive in the sense that they always respond to input stimuli.
Reference: 9. <author> M. Josephs. </author> <title> Receptive process theory. </title> <journal> Acta Informatica, </journal> <volume> 29 </volume> <pages> 17-31, </pages> <year> 1992. </year>
Reference-contexts: Among them, one of the most accepted theories is connected with the failure preorder of [1, 8] and with the theory of testing of [3, 7], which are closely related each other [4]. Other theories deal with receptive systems <ref> [6, 9, 10] </ref>, where there is a clear separation between the events under the control of the external environment of a given object and those events under the control of the object itself. <p> Once again, the main theorem is that for strongly convergent and finitely branching I/O automata the quiescent preorder coincides with the reversed must preorder. Finally, we consider two other well known formalisms with an Input/Output distinction: the Receptive Process Theory of Mark Josephs <ref> [9] </ref>, which is used for the specification and verification of delay-insensitive circuits, and the Complete Trace Structures of David Dill [6] which are used for the specification and verification of speed-independent circuits. Both of these formalisms are closely related to I/O automata and to the theory of testing. <p> It is the scope of further research to find a reasonable extension of the analyzed preorder relations to divergent transition systems. 7 Other Theories with I/O Distinction 7.1 Receptive Process Theory Receptive Process Theory (RPT) <ref> [9] </ref> is an algebraic theory of receptive (input enabled) objects which is used for the description of delay insensitive circuits. Each object has an interface consisting of input and output actions and is receptive on its inputs. <p> As for I/O automata, two RPT objects can be composed in parallel only if they do not have any common output actions. The semantics of an RPT expression is denotational and is given in terms of "failures", however these failures are not those of [8]. The failures of <ref> [9] </ref> coincide with the quiescent traces of [16] (see Section 2) if we assume that a system performing infinitely many output actions without being provided with any input has a chaotic behavior (it is divergent). <p> The reason for this choice is to avoid an hiding operator to introduce new divergences. RPT does not consider infinite sequences of output actions to be desirable. Another reason for the choice of <ref> [9] </ref> about divergence of infinite output se-quences, and probably the most important one, is that it gives a simple way of handling systems that output forever. <p> Our main result is that for strongly convergent and input enabled transition systems the quiescent preorder of I/O automata coincides with the reversed must preorder. Finally we have shown how other two widely known theories of receptive systems <ref> [6, 9] </ref> relate to the above models. We also have outlined some of the problems of divergences. It is not clear yet what a divergence should really represent.
Reference: 10. <author> N. Lynch and M. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings of the 6 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 137-151, </pages> <address> Vancouver, Canada, </address> <month> August </month> <year> 1987. </year> <note> A full version is available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference-contexts: Among them, one of the most accepted theories is connected with the failure preorder of [1, 8] and with the theory of testing of [3, 7], which are closely related each other [4]. Other theories deal with receptive systems <ref> [6, 9, 10] </ref>, where there is a clear separation between the events under the control of the external environment of a given object and those events under the control of the object itself. <p> In this paper we investigate how and when receptive theories can be viewed as a special case of a general, non-receptive theory. The formalisms we use for our analysis are the theory of testing [7] and the Input/Output automaton model <ref> [10] </ref>, which has been widely used for the verification of complex distributed algorithms [17, ?]. <p> On the other hand fairness allows us to capture some liveness properties that are not captured in general by the testing preorders and that are important for the verification of several distributed systems <ref> [10, 17, ?] </ref>. A first step toward the study of the relationship between the process algebraic and the I/O automata based approaches is in [16], where the impact of input enabling on the operators of a generic process algebra is analyzed. <p> automaton may perform; the quiescent preorder [16] is defined as A 1 v Q A 2 iff A 1 v fl E A 2 and qtraces (A 1 ) qtraces (A 2 ) and considers also those sequences of actions leading an automaton to a quiescent state; the fair preorder <ref> [10] </ref> is defined as A 1 v F A 2 iff ftraces (A 1 ) ftraces (A 2 ) and considers those sequences of actions generable from executions in which each subcomponent of the automaton that is continuously willing to perform some local action is eventually allowed to proceed. <p> Input enabling guarantees that each implementation accepts all external stimuli, while fairness guarantees that each implementation provides some output whenever the specification must provide some output. Mark Tuttle <ref> [10] </ref> writes: "The requirement that input be constantly enabled ensures that our solutions are able to respond to all patterns of input.
Reference: 11. <author> N. Lynch and F. Vaandrager. </author> <title> Forward and backward simulations for timing-based systems. </title> <editor> In J. de Bakker, C. Huizing, W. d. Roever, and G. Rozenberg, editors, </editor> <booktitle> Proceedings of the REX Workshop "Real-Time: Theory in Practice", volume 600 of Lecture Notes in Computer Science, </booktitle> <pages> pages 397-446. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: A transition system with FIN might reach infinitely many states with a trace h; however, the set of states reachable with the last external transition of any given trace h is finite. For this reason our definition of FIN is weaker than that of <ref> [11] </ref>. Note also that FIN is weaker than finitely branching when a transition systems is strongly convergent. In general infinitely branching transition systems are considered to be ill-formed. However, they can be used to model the possibility of receiving infinitely many different inputs.
Reference: 12. <author> D. Muller and W. Bartky. </author> <title> A theory of asynchronous circuits. </title> <journal> Annals of the Computation Laboratory of Harvard University. </journal> <volume> Volume XXIX: </volume> <booktitle> Proceedings of an International Symposium on the Theory of Switching, Part I, </booktitle> <pages> pages 204-243, </pages> <year> 1959. </year>
Reference-contexts: Examples of systems satisfying the condition of Proposition 8 are the monotone automata for dataflow networks of [15] and the semi-modular, speed independent circuits of <ref> [12] </ref>. 4 From I/O Automata to Testing The main intuition behind I/O automata is that input actions are under the control of the external environment while output actions are under the control of the system.
Reference: 13. <author> N. Reingold, D. Wang, and L. Zuck. </author> <title> Games I/O automata play. </title> <editor> In W. Cleaveland, editor, </editor> <booktitle> Proceedings CONCUR 92, </booktitle> <address> Stony Brook, NY, USA, </address> <booktitle> volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pages 325-339. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The rest of this section shows how the two preorders differ and provides some sufficient conditions for them to coincide. We only consider I/O automata without subcomponents (no partitioning of the locally controlled actions). These automata are called automata with a trivial fairness partition in <ref> [13] </ref>. In our examples we also assume to have an internal action t . Example 2. The transition systems * * * * a = a ! # // ** ** are equivalent according to the quiescent preorder if we consider a and b as output actions. <p> The proof of Proposition 15 is based on the results about union-game realizable languages of <ref> [13] </ref> and builds an infinite state automaton starting from a complete trace structure T . An open problem is to find a construction giving a finite state I/O automaton from a complete trace structure or at least show whether or not such a finite state automaton exists. Proposition 16.
Reference: 14. <author> R. Segala. </author> <title> A process algebraic view of I/O automata. </title> <type> Technical Memo MIT/LCS/TR-557, </type> <institution> Laboratory for Computer Science, MIT, </institution> <address> Cambridge, MA 02139, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Among these is the quiescent preorder, which is the reduction of the fair preorder to the finitary behavior of a system. A quiescent trace is a sequence of actions leading a system to a state from which only input actions are enabled. In <ref> [14] </ref> the quiescent preorder is studied within a process algebraic theory of I/O automata and a fixpoint theorem is put forward. In [14] there is also an attempt at using the quiescent preorder as an implementation relation; however some counterexamples in [14] show that the quiescent preorder does not provide an <p> A quiescent trace is a sequence of actions leading a system to a state from which only input actions are enabled. In <ref> [14] </ref> the quiescent preorder is studied within a process algebraic theory of I/O automata and a fixpoint theorem is put forward. In [14] there is also an attempt at using the quiescent preorder as an implementation relation; however some counterexamples in [14] show that the quiescent preorder does not provide an intuitively reasonable notion of implementation in general. Thus, some restrictions are necessary. <p> In <ref> [14] </ref> the quiescent preorder is studied within a process algebraic theory of I/O automata and a fixpoint theorem is put forward. In [14] there is also an attempt at using the quiescent preorder as an implementation relation; however some counterexamples in [14] show that the quiescent preorder does not provide an intuitively reasonable notion of implementation in general. Thus, some restrictions are necessary. In this paper we first study the relationship between the fair and the quiescent preorders, and present a large class of automata for which they coincide. <p> The quiescent preorder is a simplification of the fair preorder that is based only on the finitary behavior of a transition system. It allows fixpoint reasoning. In <ref> [14] </ref> it is shown that the quiescent preorder does not coincide with the fair preorder and does not express an intuitively reasonable notion of implementation in general. The rest of this section shows how the two preorders differ and provides some sufficient conditions for them to coincide.
Reference: 15. <author> E. Stark. </author> <title> On the relations computable by a class of concurrent automata. </title> <booktitle> In Proceedings of the 1990 SIGACT-SIGPLAN Symposium on Principles of Programming Languages, </booktitle> <year> 1990. </year>
Reference-contexts: In fact, from A 0 v Q S we derive A 0 v F S, and, from Proposition 8, we derive A v F S. Examples of systems satisfying the condition of Proposition 8 are the monotone automata for dataflow networks of <ref> [15] </ref> and the semi-modular, speed independent circuits of [12]. 4 From I/O Automata to Testing The main intuition behind I/O automata is that input actions are under the control of the external environment while output actions are under the control of the system.
Reference: 16. <author> F. Vaandrager. </author> <title> On the relationship between process algebra and Input/Output automata. </title> <booktitle> In Proceedings of the Sixth Annual Symposium on Logic in Computer Science, </booktitle> <year> 1991. </year>
Reference-contexts: A first step toward the study of the relationship between the process algebraic and the I/O automata based approaches is in <ref> [16] </ref>, where the impact of input enabling on the operators of a generic process algebra is analyzed. The analysis of [16] includes the definition of several preorder relations that gradually approximate the fair preorder. <p> A first step toward the study of the relationship between the process algebraic and the I/O automata based approaches is in <ref> [16] </ref>, where the impact of input enabling on the operators of a generic process algebra is analyzed. The analysis of [16] includes the definition of several preorder relations that gradually approximate the fair preorder. Among these is the quiescent preorder, which is the reduction of the fair preorder to the finitary behavior of a system. <p> The external trace preorder is defined as A 1 v fl E A 2 iff etraces (A 1 ) etraces (A 2 ) and bases its observations on the sequences of external actions that an automaton may perform; the quiescent preorder <ref> [16] </ref> is defined as A 1 v Q A 2 iff A 1 v fl E A 2 and qtraces (A 1 ) qtraces (A 2 ) and considers also those sequences of actions leading an automaton to a quiescent state; the fair preorder [10] is defined as A 1 v <p> The semantics of an RPT expression is denotational and is given in terms of "failures", however these failures are not those of [8]. The failures of [9] coincide with the quiescent traces of <ref> [16] </ref> (see Section 2) if we assume that a system performing infinitely many output actions without being provided with any input has a chaotic behavior (it is divergent). <p> RPT does not consider infinite sequences of output actions to be desirable. Another reason for the choice of [9] about divergence of infinite output se-quences, and probably the most important one, is that it gives a simple way of handling systems that output forever. The quiescent preorder of <ref> [16] </ref>, in fact, has to consider quiescent and external traces at the same time in order to correctly handle transition systems that can output forever. 7.2 Complete Trace Structures In his PhD thesis [6] David Dill introduces Complete Trace Structures for the description of speed-independent circuits.
Reference: 17. <author> J. Welch, L. Lamport, and N. Lynch. </author> <title> A lattice-structured proof technique applied to a minimum spanning tree algorithm. </title> <type> Technical Report MIT/LCS/TM-361, </type> <institution> Laboratory for Computer Science, MIT, </institution> <month> June </month> <year> 1988. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: The formalisms we use for our analysis are the theory of testing [7] and the Input/Output automaton model [10], which has been widely used for the verification of complex distributed algorithms <ref> [17, ?] </ref>. At the end we also consider other two receptive models that are closely related to the models used in our analysis. ? Supported by NSF grant CCR-89-15206, by DARPA contracts N00014-89-J-1988 and N00014-92-J-4033, and by ONR contract N00014-91-J-1046. <p> On the other hand fairness allows us to capture some liveness properties that are not captured in general by the testing preorders and that are important for the verification of several distributed systems <ref> [10, 17, ?] </ref>. A first step toward the study of the relationship between the process algebraic and the I/O automata based approaches is in [16], where the impact of input enabling on the operators of a generic process algebra is analyzed.
References-found: 17

