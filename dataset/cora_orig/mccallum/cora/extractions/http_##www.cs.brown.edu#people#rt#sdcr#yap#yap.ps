URL: http://www.cs.brown.edu/people/rt/sdcr/yap/yap.ps
Refering-URL: http://www.cs.brown.edu/people/rt/sdcr/report/report.html
Root-URL: 
Title: White Paper on Exact Computation and Reliable Geometric Software  
Author: Chee K. Yap 
Date: May 17, 1996  
Address: New York University 251, Mercer Street New York, NY 10012  
Affiliation: Courant Institute of Mathematical Sciences  
Abstract: Fixed-precision computation, typically in the form of floating-point arithmetic, is inherently incapable of delivering reliability in geometric computation. The alternative is an emerging computing paradigm called exact computation. We describe the main features of this computational mode, its applications and challenges.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Baraff. </author> <title> Issues in computing contact forces for non-penetrating rigid bodies. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 292-352, </pages> <year> 1993. </year>
Reference-contexts: We believe that exact computation is only technology that can deliver on the basic goals of a reference software, and have begun work in this area. Physical Simulation. This is a difficult but growing area of interest (see <ref> [1] </ref>). A typical system is the interaction of solid bodies in a dynamically evolving situation. E.g., bodies tumbling down a staircase. Numerical inaccuracies in such simulations quickly accumulate, leading to qualitative errors in the final result. No present simulation system can give a qualitatively guaranteed performance.
Reference: [2] <author> David Baraff. </author> <title> Fast contact force computation for nonpenetrating rigid bodies. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH), </booktitle> <volume> 28 </volume> <pages> 23-34, </pages> <year> 1994. </year>
Reference-contexts: E.g., bodies tumbling down a staircase. Numerical inaccuracies in such simulations quickly accumulate, leading to qualitative errors in the final result. No present simulation system can give a qualitatively guaranteed performance. A major problem is the current numerical software packages which are used in such simulations <ref> [2] </ref>. Mixed-mode of computation. We feel that with the advent of faster and parallel computers, many applications can begin to migrate to exact computation. Nevertheless, fixed-precision computation will always be around. An important line of research is to investigate mixed-mode computations where we inter-mix fixed-precision with exact computation.
Reference: [3] <author> J. Choi, J. Sellen, and C. Yap. </author> <title> Approximate Euclidean shortest path in 3-space. </title> <booktitle> 10th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 41-48, </pages> <year> 1994. </year> <note> Also: NYU Computer Science Technical Report No. 670, </note> <month> September </month> <year> 1994. </year>
Reference-contexts: The second answer to (II) is that if the input has some known error-bounds, we can often modify the problem to solve a related problem in which the output object has a corresponding error-bound, albeit exactly! E.g., <ref> [13, 3] </ref>. (III) How practical is exact computation? There are two aspects. First, we are implicitly comparing exact approaches to floating-point computation. Of course, exact computation is slower. We are trading off speed for accuracy and robustness. The user must decide which is more important for the application.
Reference: [4] <author> J. Choi, J. Sellen, and C. Yap. </author> <title> Precision-sensitive Euclidean shortest path in 3-Space. </title> <booktitle> 11th ACM Symposium on Computational Geometry, </booktitle> <month> June, </month> <year> 1995. </year> <month> 7 </month>
Reference-contexts: Although we cannot avoid high precision in some cases, we hope to only pay this cost when it is necessary (so the cost is "fair"). This could lead to practical solutions if most input instances do not need high precision. A formalization of this idea is the paper <ref> [4] </ref> that introduced the concept of precision-sensitive algorithms. They applied this to the Euclidean shortest path problem (which is known to be N P -hard).
Reference: [5] <author> P. Cinquin, S. Lavallee, and J. Troccaz. IGOR: </author> <title> image guided operating robot. Methodology, </title> <booktitle> applications. IEEE Eng. in Medicine and Biology, 14th Annual Conference, </booktitle> <volume> 3:?, </volume> <year> 1992. </year>
Reference-contexts: This is an example of mission-critical situations. There is an increasing use of robots in surgery (e.g., <ref> [5, 19, 9] </ref>). Grenoble University reported over 200 robot interventions in neurosurgery. The computer reconstructs a 3-D image of the brain which is displayed to the surgeon, who then specifies the trajectory using visual feedback. This trajectory is linearized and transferred to the robot kinematics.
Reference: [6] <author> C.W. Clenshaw and F.W.J. Olver. </author> <title> Beyond floating point. </title> <journal> Journal of the ACM, </journal> <volume> 31 </volume> <pages> 319-328, </pages> <year> 1984. </year>
Reference-contexts: Nevertheless, the achievements of this IEEE standard should be put in perspective: it simply ensures that numerical code performs consistently across machine architectures. It does little to remove the inevitable failures of floating-point code. Other proposals such as level-index arithmetic <ref> [6, 7] </ref> are still fixed-precision and only serves to delay the onset of such errors. Geometric Computation. In this white paper we want to distinguish between (purely) numerical computing and geometric computing.
Reference: [7] <author> C.W. Clenshaw and P.R. Turner. </author> <title> The symmetric level-index system. </title> <journal> IMA J. Num. Anal., </journal> <volume> 8 </volume> <pages> 517-526, </pages> <year> 1988. </year>
Reference-contexts: Nevertheless, the achievements of this IEEE standard should be put in perspective: it simply ensures that numerical code performs consistently across machine architectures. It does little to remove the inevitable failures of floating-point code. Other proposals such as level-index arithmetic <ref> [6, 7] </ref> are still fixed-precision and only serves to delay the onset of such errors. Geometric Computation. In this white paper we want to distinguish between (purely) numerical computing and geometric computing.
Reference: [8] <author> Herbert Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry. </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Informally, let us say that a problem is algebraic if it does not require anything beyond algebraic numbers. All the problems treated in contemporary computational geometry (e.g., <ref> [15, 8] </ref>) are algebraic. Many problems that appear to require transcendental functions are actually algebraic. For algebraic problems, it is known that the problems can in principle be solved within single-exponential space (this is related to Tarski's theory of real closed fields). There is a corresponding single-exponential time lower bound.
Reference: [9] <author> Young et al. </author> <title> Application of robotics to stereotactic neurosurgery. </title> <journal> Neurological Research, </journal> <volume> 9(2) </volume> <pages> 123-128, </pages> <year> 1987. </year>
Reference-contexts: This is an example of mission-critical situations. There is an increasing use of robots in surgery (e.g., <ref> [5, 19, 9] </ref>). Grenoble University reported over 200 robot interventions in neurosurgery. The computer reconstructs a 3-D image of the brain which is displayed to the surgeon, who then specifies the trajectory using visual feedback. This trajectory is linearized and transferred to the robot kinematics.
Reference: [10] <author> Steven J. </author> <title> Fortune. </title> <booktitle> Progress in Computational Geometry, chapter 3, </booktitle> <pages> pages 81-127. </pages> <note> Information Geometers, 1993. </note> <editor> Editor: R. </editor> <publisher> Martin. </publisher>
Reference-contexts: The initial approaches taken by these researchers stayed within the fixed-precision computing paradigm: that is, assuming that we have a fixed-precision for our arithmetic, how can we device geometric algorithms that are robust? See surveys of these approaches in <ref> [10, 17] </ref>). Briefly, the approaches can be classified into basic groups: Interval geometry: Introduce the geometric analogue of interval arithmetic. That is, replace classical geometric objects by the "thick objects" (points by suitable "balls", lines by "linear zones", etc).
Reference: [11] <author> David Goldberg. </author> <title> What every computer scientist should know about floating-point arithmetic. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1) </volume> <pages> 5-48, </pages> <year> 1991. </year>
Reference-contexts: The backwards error analysis of Wilkinson greatly helped to remove the mysteries of floating-point errors, leading to the present ascendent position of floating-point computation. For further references on floating point hardware, see <ref> [11, 14] </ref>. A major development in floating-point computation occurred in the 1980s, when high performance computer architectures proliferated. There are many (non-obvious) possibilities when implementing floating-point arithmetic, with the result that practically no two architectures have compatible floating-point conventions. The result was a confusing non-portability of numerical code. <p> There are many (non-obvious) possibilities when implementing floating-point arithmetic, with the result that practically no two architectures have compatible floating-point conventions. The result was a confusing non-portability of numerical code. This led to the now widely accepted IEEE standard <ref> [11] </ref>, which greatly ameliorated the confusion. Kahan won the 1989 Turing award for his key role in this standard. Nevertheless, the achievements of this IEEE standard should be put in perspective: it simply ensures that numerical code performs consistently across machine architectures.
Reference: [12] <author> Christoff M. Hoffmann. </author> <title> The problems of accuracy and robustness in geometric computation. </title> <journal> IEEE Computer, </journal> <volume> 22(3), </volume> <month> March </month> <year> 1989. </year>
Reference-contexts: The latter can easily lead to unexpected states or inconsistencies 2 (e.g., the boundary of a convex-hull may self-intersect) that are catastrophic. Michelucci 1 pointed out that even infinite looping may arise. See also Hoffmann <ref> [12] </ref>. The computational geometry community started investigating nonrobust-ness issues in geometric algorithms about a decade ago.
Reference: [13] <author> C. H. Papadimitriou. </author> <title> An algorithm for shortest-path motion in three dimensions. </title> <journal> Inform. Process. Lett., </journal> <volume> 20 </volume> <pages> 259-263, </pages> <year> 1985. </year>
Reference-contexts: The second answer to (II) is that if the input has some known error-bounds, we can often modify the problem to solve a related problem in which the output object has a corresponding error-bound, albeit exactly! E.g., <ref> [13, 3] </ref>. (III) How practical is exact computation? There are two aspects. First, we are implicitly comparing exact approaches to floating-point computation. Of course, exact computation is slower. We are trading off speed for accuracy and robustness. The user must decide which is more important for the application. <p> They applied this to the Euclidean shortest path problem (which is known to be N P -hard). But whether we modify the criteria of judging performance of algorithms (as in introducing precision-sensitivity) or by modifying the problem (as in Papadimitriou <ref> [13] </ref>), we remain committed to the principles of exact geometric computation. 3 Applications Exact computation is a potentially useful in any application that places a high premium on reliability. Here we use the term reliability to encompass two aspects of a computation: accuracy and robustness.
Reference: [14] <author> David A. Patterson and John L. Hennessy. </author> <title> Computer Architecture: a quantitative approach. </title> <publisher> Morgan Kaufmann Publishers, Inc, </publisher> <address> San Mateo, Califor-nia, </address> <year> 1990. </year> <title> (with an appendix on Computer Arithmetic by David Goldberg). </title>
Reference-contexts: The backwards error analysis of Wilkinson greatly helped to remove the mysteries of floating-point errors, leading to the present ascendent position of floating-point computation. For further references on floating point hardware, see <ref> [11, 14] </ref>. A major development in floating-point computation occurred in the 1980s, when high performance computer architectures proliferated. There are many (non-obvious) possibilities when implementing floating-point arithmetic, with the result that practically no two architectures have compatible floating-point conventions. The result was a confusing non-portability of numerical code.
Reference: [15] <author> Franco P. Preparata and Michael I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Informally, let us say that a problem is algebraic if it does not require anything beyond algebraic numbers. All the problems treated in contemporary computational geometry (e.g., <ref> [15, 8] </ref>) are algebraic. Many problems that appear to require transcendental functions are actually algebraic. For algebraic problems, it is known that the problems can in principle be solved within single-exponential space (this is related to Tarski's theory of real closed fields). There is a corresponding single-exponential time lower bound.
Reference: [16] <author> Chee K. Yap. </author> <title> Towards exact geometric computation. </title> <booktitle> In Fifth Cana-dian Conference on Computational Geometry, </booktitle> <pages> pages 405-419, </pages> <address> Waterloo, Canada, </address> <month> August 5-9 </month> <year> 1993. </year> <note> Invited Lecture. To appear CGTA. </note>
Reference-contexts: Perhaps the biggest practical barrier to such approaches is that the "robustified algorithms" remains a handful; it is daunting to think of all the geometric algorithms that remains to be treated. We suggest in <ref> [16] </ref> that the approach based on exact geometric computation is generally preferable (even though fixed-precision approaches may be useful for specific applications). <p> There is a corresponding single-exponential time lower bound. So in principle all these problems can be computed exactly. This framework is described in <ref> [16] </ref>. (II) What is the point of computing exactly when the input data may be inherently inexact? In other words, it seems silly to perform calculations with more precision than the input data.
Reference: [17] <author> Chee K. Yap. </author> <title> Robust geometric computation. </title> <editor> In J. E. Goodman and J. O'Rourke, editors, </editor> <title> CRC Handbook in Computational Geometry. </title> <publisher> CRC Press, </publisher> <year> 1996. </year> <note> (to appear). </note>
Reference-contexts: The latter involves some geometric structure D which is some combinatorial object (say a graph G) that is associated with numerical data (say, numerical labels on the nodes and edges of G), together with some consistency predicate constraining the possible variations on the numerical data. See <ref> [17] </ref> for one formalization. Geometric computation normally constructs such a D or searches within D. Examples of geometric computing include (i) computing an arrangement of hy-perplanes, (ii) intersecting two polyhedra, and (iii) point location in a planar map. <p> The initial approaches taken by these researchers stayed within the fixed-precision computing paradigm: that is, assuming that we have a fixed-precision for our arithmetic, how can we device geometric algorithms that are robust? See surveys of these approaches in <ref> [10, 17] </ref>). Briefly, the approaches can be classified into basic groups: Interval geometry: Introduce the geometric analogue of interval arithmetic. That is, replace classical geometric objects by the "thick objects" (points by suitable "balls", lines by "linear zones", etc). <p> Specifically, all the treated problems are of bounded depth and the exact approach to such problem do not run into high precision issues, the usual bane of exact computation. For a survey of recent papers using exact geometric computation, see <ref> [18, 17] </ref>. 1 Private communication. 3 2 Exact Computation Briefly, exact geometric computation is the approach to algorithm design and implementation that demands all branching tests to be performed without error. A corollary is that numerical values must be computed to sufficient precision to ensure this.
Reference: [18] <author> Chee K. Yap and Thomas Dube. </author> <title> The exact computation paradigm. </title> <editor> In D.-Z. Du and F. K. Hwang, editors, </editor> <booktitle> Computing in Euclidean Geometry, </booktitle> <pages> pages 452-486. </pages> <publisher> World Scientific Press, </publisher> <year> 1995. </year> <note> 2nd edition. </note>
Reference-contexts: Specifically, all the treated problems are of bounded depth and the exact approach to such problem do not run into high precision issues, the usual bane of exact computation. For a survey of recent papers using exact geometric computation, see <ref> [18, 17] </ref>. 1 Private communication. 3 2 Exact Computation Briefly, exact geometric computation is the approach to algorithm design and implementation that demands all branching tests to be performed without error. A corollary is that numerical values must be computed to sufficient precision to ensure this.
Reference: [19] <author> Y.S.Kwoh, J. Hou, E.A. Jonckheere, and S. Hayaty. </author> <title> A robot with improved absolutositioning accuracy for CT guided stereotactic brain surgery. </title> <journal> IEEE Trans. on Biomedical Eng., </journal> <volume> 35(2) </volume> <pages> 153-160, </pages> <year> 1988. </year> <month> 8 </month>
Reference-contexts: This is an example of mission-critical situations. There is an increasing use of robots in surgery (e.g., <ref> [5, 19, 9] </ref>). Grenoble University reported over 200 robot interventions in neurosurgery. The computer reconstructs a 3-D image of the brain which is displayed to the surgeon, who then specifies the trajectory using visual feedback. This trajectory is linearized and transferred to the robot kinematics.
References-found: 19

