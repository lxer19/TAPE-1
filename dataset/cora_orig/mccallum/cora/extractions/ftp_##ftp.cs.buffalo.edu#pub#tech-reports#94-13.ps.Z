URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/94-13.ps.Z
Refering-URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/README.html
Root-URL: 
Email: E-mail fgovin-k,bharatg@cs.buffalo.edu  
Title: Intensional Algorithmic Debugging Preliminary Version  
Author: Kannan Govindarajan Bharat Jayaraman 
Keyword: Key Words: Dec;arative semantics, interpretations, models, debugging, incorrectness, incompleteness, extensional semantics, intensional semantics.  
Date: May 24, 1994  
Address: New York Buffalo, NY 14260  
Affiliation: Department of Computer Science State University of  
Abstract: Declarative error diagnosis of logic programs was introduced in [Sh82]. Other work in error diagnosis has focused on adding various kinds of control to the declarative diagnoser [Av84], or extending the debugging to a larger class of programs [Pe86]. In all this work the error that is detected is either an incorrect clause instance, which represents an incorrect implication in the intended interpretation, or there is a goal on which the program fails when it should succeed because the clauses in the program don't "cover" it. In this work we refine the notion of an error so that the exact place in the clause where the error occurs can be identified. This is made possible by reasoning with the intensional semantics of the program rather than the extensional semantics. 
Abstract-found: 1
Intro-found: 1
Reference: [Av84] <author> Av-Ron E., </author> <title> "Top-Down Diagnosis of Prolog Programs", M.Sc. </title> <type> Thesis, </type> <institution> Weizmann Institute of Science, Rehovot Israel, </institution> <year> (1984). </year>
Reference: [DeLe87] <author> Dershowitz N. and Lee Y., </author> <title> "Deductive Debugging", </title> <booktitle> in IEEE Symposium on Logic Programming, </booktitle> <pages> 298-306, </pages> <year> (1987). </year>
Reference-contexts: When a program is incorrect because of an uncovered atom, it could be the case that a "new" clause might have to be added to "cover" the uncovered atom. Indeed this is the approach taken in <ref> [DeLe87] </ref>. In other words, A is uncovered because there should have been another applicable clause A k+1 B k+1 where the goals in B k+1 are true and hence the atom A is covered by the "new" clause.
Reference: [DrNaMa89] <author> Drabent W., Nadjm-Tehrani S., Maluszynski J. </author> , <title> "Algorithmic Debugging with Assertions", in Meta-Programming in Logic Programming, </title> <editor> Harvey Abramson and M.H. Rogers (eds.), </editor> <publisher> MIT Press, </publisher> <pages> 501-522, </pages> <year> (1989). </year>
Reference: [Fe85] <author> Gerard Ferrand, </author> <title> "Error Diagnosis in Logic Programming, An Adaptation of E.Y.Shapiro's Method", </title> <institution> Rapports de Recherche, INRIA Centre de Rocquencourt, </institution> <year> (1985). </year>
Reference: [Jay92] <author> Bharat Jayaraman, </author> <title> "Implementation of Subset Equational Languages, </title> <journal> Journal of Logic Programming, </journal> <volume> 12(4) </volume> <pages> 299-324, </pages> <year> (1992). </year>
Reference-contexts: This technique generalizes easily and can be used to debug programs written in any logic programming language whose operational semantics is based on an immediate consequence operator. For example, programs written in languages such as SEL <ref> [Jay92] </ref> can also be debugged using the techniques described here. We have implemented a simple debugger based on ideas presented in this paper and are using that to test out the feasibility of this approach to debugging programs.
Reference: [Ll87] <author> John W. Lloyd, </author> <title> "Foundations of Logic Programming", </title> <publisher> Springer-Verlag, </publisher> <year> (1987) </year>
Reference-contexts: The rest of the paper is orgranised as follows: Section 2 briefly describes algorithmic debugging of relational programs as described in [Sh82] and <ref> [Ll87] </ref>. Section 3 describes our technique to locate the error in the incorrect clause. It introduces a relation among atoms in the Herbrand Base forced by any program, which is the supportedness relation. <p> We assume that the reader is familiar with concepts like models, interpretations, declarative semantics, fixed point semantics, completion of programs, SLDNF search trees, computed answers, correct answers etc.. A good treatment of this material can be found in <ref> [Ll87] </ref>. * Let P be a definite clause program. * Let B P denote its Herbrand Base. * Let t P denote the immediate consequence operator defined by the clauses in the program P. * Let gfp (t P ) denote the greatest fixed point of the operator t P and
Reference: [Pe86] <author> Pereira, L.M., </author> <title> "Rational Debugging in Logic Programming", </title> <booktitle> `Proc. Third Int'l Conf. on Logic Programming, </booktitle> <publisher> LNCS 225, Springer-Verlag, </publisher> <pages> 272-280, </pages> <year> (1986). </year>
Reference: [Sh82] <author> Ehud Y. Shapiro, </author> <title> "Algorithmic Program Debugging", </title> <type> Ph.D. Thesis, </type> <institution> Yale University, </institution> <address> New Haven, Connecticut, </address> <year> (1982). </year> <month> 12 </month>
Reference-contexts: The rest of the paper is orgranised as follows: Section 2 briefly describes algorithmic debugging of relational programs as described in <ref> [Sh82] </ref> and [Ll87]. Section 3 describes our technique to locate the error in the incorrect clause. It introduces a relation among atoms in the Herbrand Base forced by any program, which is the supportedness relation.
References-found: 8

