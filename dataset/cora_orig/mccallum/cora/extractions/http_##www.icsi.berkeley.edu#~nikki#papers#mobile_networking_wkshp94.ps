URL: http://www.icsi.berkeley.edu/~nikki/papers/mobile_networking_wkshp94.ps
Refering-URL: http://www.icsi.berkeley.edu/~nikki/papers/
Root-URL: http://www.icsi.berkeley.edu
Email: fnikki,annefg@cs.berkeley.edu  
Title: A Design for File Access in a Mobile Environment  
Author: Nikki Mirghafori and Anne Fontaine 
Address: Berkeley, CA 94720-1776  
Affiliation: Computer Science Division University of California at Berkeley  
Abstract: Reducing communication cost is important in a mobile environment, because transmission of data over the radio link is slow, expensive, and unreliable. Providing data consistency is crucial because many mobile applications are database applications [7] which rely on consistent data. In this paper we propose a design for a file access mechanism specific to a mobile environment. Our two main design goals are to reduce communication cost and to provide data consistency. We reduce the amount of communication by extensive use of caching, profile information (files the user accesses), a proxy process, delayed writes, and availability of loose-reads. We provide data consistency by using the proxy services, a centralized data manager with callbacks, and strict-reads. Our design is general enough to suit the needs of both mobile database and office applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Adams, R. Gold, B. Schilit, M.M. Tso, & R. </author> <title> Want. "An Infrared Network for Mobile Computers," </title> <booktitle> USENIX Symposium on Mobile and Loc. Indep Computing, </booktitle> <month> Aug </month> <year> 1993. </year>
Reference-contexts: For example, "Where is the nearest doctor from my current location?". Although these queries produce interesting problems of their own, they do not address the more common case of office-type or location-independent applications. The proxy idea has been used previously with limited functionality <ref> [3, 15, 1] </ref>. We expanded the responsibility of the proxy to include not only RPC requests and retries but also cache management for the MH (invalidations, page requests) and consistency management (e.g., acquire and releasing locks).
Reference: [2] <author> R. Alonso, H.F. Korth. </author> <title> "Database System Issues in Nomadic Computing," </title> <institution> Matsushita Information Technology Laboratory, U.S., </institution> <year> 1992. </year>
Reference-contexts: We assume that communication bandwidth is likely to remain a major performance bottleneck in the future <ref> [2] </ref>. Furthermore, scalability is difficult to achieve when servers are used as compute servers, as well as data servers, thereby becoming hot-spots. <p> This divides the most common mobile file access into the following groups: query processing (read-only, potentially high degree of sharing; e.g., weather reports), transaction processing (read and update, some amount of sharing; e.g., real-time salesperson query and update <ref> [2] </ref>), and engineering/office applications (read and update, low sharing; e.g., e-mail). 2.5 Communication Issues Communication and its cost are a major concern in mobile computing.
Reference: [3] <author> B.R. Badrinath, A. Bakre, T. Imielinski, R. Marantz. </author> <title> "Handling Mobile Clients: A Case for Indirect Interaction," </title> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference-contexts: mechanism which is specifically designed to address these two problems. 2 Mobile Environment (ME) In this section we describe the elements of an ME, explain our assumptions, and discuss the constraints of the environment. 2.1 Components of the ME The following are the major elements of a mobile computing environment <ref> [3, 4] </ref> (figure 1): * Mobile Host (MH): We assume a walkstation with a cache, disk, and small display screen, for example a 386/486-based lap or palm-top. We explain the reason for this choice in section 2.2. The MH is capable of wireless communication and is battery operated. <p> For example, "Where is the nearest doctor from my current location?". Although these queries produce interesting problems of their own, they do not address the more common case of office-type or location-independent applications. The proxy idea has been used previously with limited functionality <ref> [3, 15, 1] </ref>. We expanded the responsibility of the proxy to include not only RPC requests and retries but also cache management for the MH (invalidations, page requests) and consistency management (e.g., acquire and releasing locks).
Reference: [4] <author> B.R. Badrinath and T.Imielinski. </author> <title> "Replication and Mobility," </title> <booktitle> Proc. of 2nd IEEE Workshop in Management of Replicated Data, </booktitle> <month> Nov </month> <year> 1992. </year>
Reference-contexts: mechanism which is specifically designed to address these two problems. 2 Mobile Environment (ME) In this section we describe the elements of an ME, explain our assumptions, and discuss the constraints of the environment. 2.1 Components of the ME The following are the major elements of a mobile computing environment <ref> [3, 4] </ref> (figure 1): * Mobile Host (MH): We assume a walkstation with a cache, disk, and small display screen, for example a 386/486-based lap or palm-top. We explain the reason for this choice in section 2.2. The MH is capable of wireless communication and is battery operated.
Reference: [5] <author> M. Baker, J. Hartman, M. Kupfer, K. Shirrif, and J. Ousterhout. </author> <title> "Measurements of a Distributed File System," </title> <booktitle> Proceedings of the 13th ACM Symposium on Operating System Principles, </booktitle> <pages> pp 198-212, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: We support strict-read consistency, but also increase availability through loose-read consistency. 4.1 Caching Caching is used extensively in our design. Effective caching can reduce network traffic significantly; for Unix type applications, client caches filter out approximately 50% of the raw traffic <ref> [5] </ref>. Database applications can benefit from caching in much the same way that small file applications can; the mobile user can access data more quickly if it is cached. <p> Batching updates results in a few longer messages rather than many small messages. This conserves power on the MH by reducing the setup and tear-down costs. In addition to power savings, delayed writes also provide bandwidth savings | writes may die off before they are propagated to the MSS <ref> [5] </ref>, also the amount of header data is less with batched messages. 4.4 Proxy Process The MH must transfer data over the wireless link which is slow and unreliable. Because of its slowness, the requests of the MH may time-out; because of its unreliability, several retries may be required.
Reference: [6] <author> D. Barbara and T. Imielinski. "Sleepers and Workaholics: </author> <title> Caching Strategies in Mobile Environments," </title> <institution> Department of Computer Science, Rutgers University, U.S., </institution> <year> 1992. </year>
Reference-contexts: Coda's design assumptions are unsuitable for highly-interactive applications; besides, there may be data merging problems upon re-integration. We use the idea of profile previously used in Coda. However, we use the profile to reduce communication, rather than in expectation of disconnected operation. Barbara and Imielinski <ref> [6] </ref> have investigated caching methods in a mobile environment. However, the mobile devices they consider are read-only, that is, the mobile hosts are not able to update any information.
Reference: [7] <author> D. Duchamp. </author> <title> "Issues in Wireless Mobile Computing," </title> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference: [8] <author> D. Hayden. </author> <title> "The new age of wireless," Mobile Office, </title> <month> May </month> <year> 1992. </year>
Reference-contexts: In other words, the communication cost between the MSS and the MH is asymmetric. * The dollar cost of sending information over a wireless network is high <ref> [8] </ref>. * The overhead of connection setup and tear-down is high.
Reference: [9] <author> J. Howard, et. al. </author> <title> "Scale and Performance in a Distributed File System," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6, 1, </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: Callbacks are useful because they identify invalidated pages, yet allow the page to be cached on the MH. Callbacks combined with loose-reads (described below) can greatly reduce the amount of traffic generate over the network <ref> [9] </ref>. Note that the callbacks are sent from the HS to the proxy, and propagated to the MH only if in-MH-cache is true for the page. 4.6 Strict- and loose-reads Two levels of read consistency are available | strict-read and loose-read [14].
Reference: [10] <author> T. Imielinski and B.R. Badrinath. </author> <title> "Querying in highly mobile distributed environments," </title> <booktitle> Proc of the 18th VLDB, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: This is appropriate for applications such as weather reporting, movie listings, but not for the office type applications or transaction processing applications that we considered. Our design is more general in this respect. Imielinski and Badrinath <ref> [10] </ref> address location-dependent data-access. By location-dependent queries we mean queries whose response will change as the host moves. For example, "Where is the nearest doctor from my current location?".
Reference: [11] <author> K. Li and P. Hudak. </author> <title> "Memory Coherence in Shared Virtual Memory Systems," </title> <booktitle> Proceedings of the 5th Annual ACM Symposium on Principles of Distributed Computing. </booktitle>
Reference-contexts: It serves as the permanent storage of the MH files. The HS may physically "own" an MH's pages (centralized data management) or just have the appropriate information to retrieve them from other servers (distributed data management) 1 <ref> [11] </ref>. * Mobile Support Station (MSS): This server provides services (cache, RPC requests and retries, etc.) to the MH. The MSS communicates with the MHs within its cell (the area of its broadcasting range) via radio waves.
Reference: [12] <author> J.J. Kistler and M. Satyanarayanan. </author> <title> "Disconnected Operation in the Coda File System," </title> <booktitle> Proc. 13th ACM Symposium on Operating System Principles, </booktitle> <pages> pages 198-207. </pages> <publisher> IEEE, </publisher> <month> December </month> <year> 1991. </year>
Reference-contexts: Therefore, we advocate a more powerful computing device (such as a laptop), in an attempt to reduce communication and to avoid bottlenecks. 2.3 Connectivity Assumption We envision a connected-operation (non-Coda style) <ref> [12] </ref> mobile environment. That is, the mobile host is continuously connected to a server via a radio link while accessing data. <p> We found our resources rather limited when searching for previous work dealing with file access designs and measurements. In what follows, we briefly explain the relevant previous work we have studied, point out which ideas we have reused, and mention how our design is different from others'. Coda <ref> [12] </ref> is a file access mechanism which provides consistency but supposes complete disconnected operation. Our design is different from Coda in that we assume that the MH manipulates data only when connected. Coda's design assumptions are unsuitable for highly-interactive applications; besides, there may be data merging problems upon re-integration.
Reference: [13] <author> J. Ousterhout and F. Douglis. </author> <title> "Beating the I/O Bottleneck: A Case for Log-Structured File Systems," </title> <journal> Operating Systems Review, </journal> <volume> 23(1) </volume> <pages> 11-28, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: BS does not play a direct role in file access, we have conceptually merged it with the MSS. 2.4 Applications File access patterns in a conventional, fixed environment have been divided into three principle categories, according to file size and degree of sharing: scientific jobs, transaction processing and engineering/office applications <ref> [13] </ref>. In mobile computing, we differentiate between types of file usage according to: 1) the mode of accessing, that is: read-only versus read and update; and 2) the degree of sharing.
Reference: [14] <author> C. Tait and D. Duchamp. </author> <title> "Service Interface and Replica Management Algorithm for Mobile File System Clients," </title> <booktitle> Proc 1st Intl. Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 190-197. </pages> <publisher> IEEE, </publisher> <month> December </month> <year> 1991. </year>
Reference-contexts: Note that the callbacks are sent from the HS to the proxy, and propagated to the MH only if in-MH-cache is true for the page. 4.6 Strict- and loose-reads Two levels of read consistency are available | strict-read and loose-read <ref> [14] </ref>. Strict-read returns the most up-to-date information while loose-read returns the most accessible information. 4.6.1 Loose-Read Loose-read allows the mobile user to access data which is available in the MH cache or in the proxy cache. The information is not necessarily the most up-to-data, but it is the most accessible. <p> The proxy idea has been used previously with limited functionality [3, 15, 1]. We expanded the responsibility of the proxy to include not only RPC requests and retries but also cache management for the MH (invalidations, page requests) and consistency management (e.g., acquire and releasing locks). Tait and Duchamp <ref> [14] </ref> describe a loose-consistency model which is server-based; the server picks up updates at its convenience. However, in a mobile environment, we believe the communication with the mobile host is the bottleneck rather than the server.
Reference: [15] <author> T. Watson and B. Bershad. </author> <title> "Local Area Mobile Computing on Stock Hardware and Mostly Stock Software," </title> <booktitle> Mobile and Location-Independent Computing Symposium, USENIX Symposium, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: For example, "Where is the nearest doctor from my current location?". Although these queries produce interesting problems of their own, they do not address the more common case of office-type or location-independent applications. The proxy idea has been used previously with limited functionality <ref> [3, 15, 1] </ref>. We expanded the responsibility of the proxy to include not only RPC requests and retries but also cache management for the MH (invalidations, page requests) and consistency management (e.g., acquire and releasing locks).
References-found: 15

