URL: http://www.idt.unit.no/~epos/Papers/pm-v9-metaprocess-tse92.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: A Conceptual Framework for Evolving Software Processes  
Author: Reidar Conradi p. - Anthony Finkelstein and Jeff Kramer and Bashar A. Nuseibeh: 
Note: Printed in First PROMOTER book on  "Software Process Modelling and Technology", Advanced Software Development Series, Research Studies Press/John Wiley Sons, ISBN 0-86380-169-2, 362 p., 1994.  
Address: CEFRIEL, Italy  Telematics, NTH, N-7034 Trondheim, Norway.  7 Chemin du Vieux Ch^ene, F-38240 Meylan, France.  P.za Leonardo da Vinci 32, I-20133 Milano, Italy.  
Affiliation: Norwegian Institute of Technology, Norway Christer Fernstrom CAP Gemini Innovation, France Alfonso Fuggetta Politecnico di Milano and  Dept. of Computer Systems and  CAP Gemini Innovation,  Politecnico di Milano, Dipartimento di Elettronica e Informazione,  
Email: E-Mail: conradi@idt.unit.no.  E-Mail: christer@capsogeti.fr.  E-Mail: Alfonso.Fuggetta@mailer.cefriel.it.  
Phone: Tel.: +47-7-593444, Fax: +47-7-594466,  Tel.: +33-76-764720, Fax: +33-76-764748,  Tel.: +39-2-23993623, Fax: +39-2-23993411,  
Date: 12 October 1993  
Abstract: Software processes are complex entities that may last for long periods of time and are carried out through the interaction of humans and computerized tools. They need to continuously evolve in order to cope with different kinds of changes or customizations both in the organization and in the technologies used to support software production activities. In recent years, many software process support technologies have been developed, and have currently been further extended and used in trial projects. Moreover, some research prototypes have generated commercial products, that are marketed and currently used in industrial organizations. Despite these significant efforts and results, however, there is still little conceptual characterization and assessment of the properties of software processes and related support environments. It is difficult to compare and assess existing approaches. Even a common characterization of the problems to be addressed seems to be problematic and difficult to achieve. This is particularly true when we consider the process evolution problem, for which it does not seem that a common view of the issue has been established yet. This paper aims at proposing a conceptual framework to describe and assess flexible and evolving software processes. It is based on the assumption that a software process is composed of two main components: a software production process to carry out software production activities, and a software meta-process to improve and evolve the whole software process. 
Abstract-found: 1
Intro-found: 1
Reference: [ABD + 89] <author> Malcolm Atkinson, Francois Ban~cilhon, David DeWitt, Klaus Dittrich, David Maier, and Stanley Zdonik. </author> <title> The Object-Oriented Database System Manifesto. </title> <booktitle> Proc. from DOOD'89, </booktitle> <address> Kyoto, Japan, </address> <month> Dec. </month> <year> 1989, </year> <pages> 40-57. </pages>
Reference-contexts: It should not act as a mere check-list, e.g. does system X offer formal "meta-process tools" or "enacting template models". Rather, it should provide a systematic way to understand, assess and compare process support systems. We can compare it with the Object-Oriented Database System manifesto <ref> [ABD + 89] </ref>. Section 1 in the paper points at some related work. Much underlying technology can be taken and adapted from general software engineering, including dynamic instrumentation and binding facilities.
Reference: [BCN90] <author> Hugh R. Beyer, Kathy Chapman, and Chris Nolan. </author> <title> The ATIS reference model. </title> <type> Technical Report ZK02-3N30, </type> <institution> Digital Equipment Corp., 110 Spirit Brook Rd., Nashua, </institution> <address> NH 03062, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: Object-oriented entity-relationship modeling is often used to describe software items and their relationships, while software activities are often expressed either by production rules (triggers), task networks, process programs, or hybrids. Tools are often described by activity "envelopes" <ref> [BCN90] </ref>, with operation signatures to express formal i/o parameters and other constraints. Since we want to model both the meta-process and the software production process, the process modeling language must offer reflective features, i.e. it must be possible to create models that are able to modify their own structure.
Reference: [BFG93] <author> Sergio Bandinelli, Alfonso Fuggetta, and Sandro Grigolli. </author> <title> Process Modeling in the Large with SLANG. </title> <editor> In Leon Osterweil (ed.): </editor> <booktitle> Proc. from 2nd Int'l Conference on Software Process (ICSP'2), </booktitle> <address> March 1993, Berlin. </address> <publisher> IEEE Press (forthcoming), </publisher> <year> 1993. </year>
Reference-contexts: Let us consider the three process support systems the three authors are involved in. In SLANG <ref> [BFG93] </ref>, there is one Process Engine tool, which creates the enactable and enacting variations (in an intertwined way), starting from the template variation of the software process model.
Reference: [B + 87] <author> Jay Banerjee et al. </author> <title> Semantics and implementation of schema evolution in objectoriented databases. </title> <booktitle> In ACM SIGMOD'87, </booktitle> <pages> pages 311-322, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Schema evolution has been discussed extensively in the database literature <ref> [B + 87] </ref>. It has a fundamental impact on persistent data, structured according to a given schema.
Reference: [BL79] <author> L.A. Belady and M. M. Lehman. </author> <title> Characteristics of large systems. </title> <editor> In Peter Wegner, editor, </editor> <booktitle> Research directions in Software Technology. </booktitle> <publisher> MIT Press, </publisher> <year> 1979. </year>
Reference-contexts: This fact further increases the complexity of the resulting software process, and puts hard demands on management. Finally, software processes may last for long periods of time, and are thus likely to undergo many changes during their lifetime in order to cope with new requirements <ref> [BL79] </ref>. Examples of such changes are the substitution of (part of) the technologies used to produce software applications, or the modification of the development strategy and procedures.
Reference: [C + 90] <editor> Reidar Conradi et al. </editor> <booktitle> Design of the Kernel EPOS Software Engineering Environment, 17 pages. In Proceedings of the First International Conference on System Development Environments and Factories. </booktitle> <publisher> Pitman Publishing, </publisher> <year> 1990. </year>
Reference-contexts: Let us consider the three process support systems the three authors are involved in. In SLANG [BFG93], there is one Process Engine tool, which creates the enactable and enacting variations (in an intertwined way), starting from the template variation of the software process model. In EPOS <ref> [C + 90] </ref>, there is a Planner tool which creates the enactable variation, and a second Execution Manager tool that creates and operates on (executes) enacting variations (these two tools work intertwined).
Reference: [CJM + 92] <author> Reidar Conradi, M. Letizia Jaccheri, Cristina Mazzi, Amund Aarsten, and Ngoc Minh Nguyen. </author> <title> Design, use, and implementation of SPELL, a language for software process modeling and evolution. </title> <editor> In J.-C. Derniame (ed.): </editor> <booktitle> Proc. from EWSPT'92, </booktitle> <month> Sept. </month> <pages> 7-8, </pages> <address> Trondheim, Norway, </address> <publisher> Springer Verlag LNCS 635, </publisher> <pages> pages 167177, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: This raises the classical issues of change and consistency control, change propagation etc. Traditionally, CM needs PM to control activities related to updating, change propagation, auditing, re-building etc. Conversely, the process elements themselves are (or should be) under CM control, with corresponding "meta-activities" see next section and <ref> [CJM + 92] </ref>. 3 Software Process Evolution: the Meta-process In the previous section, a software process has been defined as the composition of a software production process, its software meta-process 3 and the corresponding software process support.
Reference: [CFFS92] <author> Reidar Conradi, Christer Fernstrom, Alfonso Fuggetta, and Bob Snowdon. </author> <title> Towards a Reference Framework for Fundamental (Software) Process Concepts. </title> <editor> In J.-C. Derniame (ed.): </editor> <booktitle> Proc. from EWSPT'92, </booktitle> <month> Sept. </month> <pages> 7-8, </pages> <address> Trondheim, Norway, </address> <publisher> Springer Verlag LNCS 635, </publisher> <pages> pages 3-17, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: These two factors are strongly interrelated: advances in the technology enable creation of new products, services and activities, or modification of old ones, which in their turn produce new needs, feedbacks, and requirements to software technology providers. Secondly, software processes are human-oriented <ref> [CFFS92] </ref>, and the interactions among humans and between humans and the tools that support their activities are characterized by high variability and unpredictability. This fact further increases the complexity of the resulting software process, and puts hard demands on management. <p> The aim is to facilitate communication and assessment of emerging software process technologies, especially with respect to software process evolution (see below). It can also be used to exploit commonalities with related disciplines or research areas. Similar efforts have been done in the recent past (see [DNR91], [FH92], <ref> [CFFS92] </ref>, and [Lon93]), but further work is still needed.
Reference: [Der92] <editor> JeanClaude Derniame, editor. </editor> <booktitle> Proc. Second European Workshop on Software Process Technology (EWSPT'92), </booktitle> <address> Trondheim (Norway), 7-8 September 1992. </address> <publisher> LNCS 635, Springer Verlag, </publisher> <pages> 253 pp. </pages>
Reference: [DNR91] <author> Mark Dowson, Brian Nejmeh, and William Riddle. </author> <title> Fundamental Software Process Concepts. </title> <booktitle> In [FCA91], </booktitle> <pages> pages 15-37, </pages> <year> 1991. </year>
Reference-contexts: The aim is to facilitate communication and assessment of emerging software process technologies, especially with respect to software process evolution (see below). It can also be used to exploit commonalities with related disciplines or research areas. Similar efforts have been done in the recent past (see <ref> [DNR91] </ref>, [FH92], [CFFS92], and [Lon93]), but further work is still needed.
Reference: [Est92] <author> Jacky Estublier. </author> <title> In discussing dynamic typing in the Adele versioned software engineering database. </title> <booktitle> At EWSPT2, </booktitle> <address> Trondheim, </address> <month> Sept. </month> <year> 1992. </year>
Reference: [FER93] <author> Christer Fernstrom. </author> <title> Process WEAVER: Adding Process Support to UNIX. </title> <editor> In Leon Osterweil (ed.): </editor> <booktitle> Proc. from 2nd Int'l Conference on Software Process (ICSP'2), </booktitle> <address> March 1993, Berlin. </address> <publisher> IEEE Press (forthcoming), </publisher> <year> 1993. </year> <month> 17 </month>
Reference-contexts: In EPOS [C + 90], there is a Planner tool which creates the enactable variation, and a second Execution Manager tool that creates and operates on (executes) enacting variations (these two tools work intertwined). In Process WEAVER <ref> [FER93] </ref>, there is a process instantiation tool which copies a template, provides it with enactment parameters and links it with an interpretor to form the enactable variation. An enacting variation is created by a process starter tool and is then simply managed as a UNIX process.
Reference: [FH92] <author> Peter H. Feiler and Watts Humphrey. </author> <title> Software Process Development and Enact-ment: Definitions, </title> <month> January </month> <year> 1992, </year> <pages> 12 pages. </pages> <note> (Second version). </note>
Reference-contexts: The aim is to facilitate communication and assessment of emerging software process technologies, especially with respect to software process evolution (see below). It can also be used to exploit commonalities with related disciplines or research areas. Similar efforts have been done in the recent past (see [DNR91], <ref> [FH92] </ref>, [CFFS92], and [Lon93]), but further work is still needed.
Reference: [FCA91] <author> Alfonso Fuggetta, Reidar Conradi and Vincenzo Ambriola. </author> <booktitle> Proceedings of the EWSP 91-First European Workshop on Software Process Modeling, Milano, 1991. AICA, Italian National Computer Science Society, </booktitle> <address> 272 p. </address>
Reference: [HL91] <author> Keith Hales and Mandy Lavery. </author> <title> Workflow Management Software: the Business Opportunity. </title> <publisher> OVUM Ltd., </publisher> <year> 1991. </year>
Reference-contexts: Within the area of information systems and office automation, for example, these are carried out under the common heading of workflow support <ref> [HL91] </ref>. So far, there has been little cross <br>- fertilization between the areas.
Reference: [Hum88] <author> Watts S. Humphrey. </author> <title> Characterizing the Software Process: A Maturity Framework. </title> <journal> IEEE Software, </journal> <pages> pages 73-79, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Especially in the domain of process evolution will this activity entangle new methods and techniques, both technical and managerial. * Process assessment: Here it seems that the emerging process capability method <ref> [Hum88] </ref> will have its appli <p>- cation. We must regretfully conclude this section by saying that there is very little (new) method work on systematic support for process evolution, both in the production process and meta-process.
Reference: [IEE91a] <editor> IEEE Computer Society. </editor> <booktitle> Proceedings of the First International Conference on Software Process (ICSP'1), </booktitle> <year> 1991. </year>
Reference-contexts: A well-know initiative in this area is DARPA's Software Engineering Insti <br>- tute, created at Carnegie Mellon University in Pittsburgh in 1983 [SEI91]. * A new research area has grown up, supported by scientific events that facilitate the 1 exchange and discussion of results, problems and early experiences ([Der92] <ref> [IEE91a] </ref> [IEE91b]). * Outside the area of software production, similar efforts emerge. Within the area of information systems and office automation, for example, these are carried out under the common heading of workflow support [HL91]. So far, there has been little cross <br>- fertilization between the areas.
Reference: [IEE91b] <editor> IEEE Computer Society. </editor> <booktitle> Proceedings of the Seventh International Workshop on Software Process, </booktitle> <year> 1991. </year>
Reference-contexts: A well-know initiative in this area is DARPA's Software Engineering Insti <br>- tute, created at Carnegie Mellon University in Pittsburgh in 1983 [SEI91]. * A new research area has grown up, supported by scientific events that facilitate the 1 exchange and discussion of results, problems and early experiences ([Der92] [IEE91a] <ref> [IEE91b] </ref>). * Outside the area of software production, similar efforts emerge. Within the area of information systems and office automation, for example, these are carried out under the common heading of workflow support [HL91]. So far, there has been little cross <br>- fertilization between the areas.
Reference: [Lon93] <author> Jacques Lonchamp. </author> <title> A structured conceptual and terminological framework for soft-ware process engineering. </title> <editor> In Leon Osterweil (ed.): </editor> <booktitle> Proc. from 2nd Int'l Conference on Software Process (ICSP'2), </booktitle> <address> March 1993, Berlin. </address> <publisher> IEEE Press (forthcoming, </publisher> <address> 15 p.), </address> <year> 1993. </year>
Reference-contexts: It can also be used to exploit commonalities with related disciplines or research areas. Similar efforts have been done in the recent past (see [DNR91], [FH92], [CFFS92], and <ref> [Lon93] </ref>), but further work is still needed.
Reference: [Mad91] <author> Nazim H. Madhavji. </author> <title> The process cycle. </title> <journal> Software Engineering Journal, </journal> <volume> 6(5):234242, </volume> <month> September </month> <year> 1991. </year>
Reference-contexts: A large repertoire of technologies is available, both for process and meta-process modeling and instrumentation, but a complete method base is missing. One significant example, however, of a method encompassing both the production process and the meta-process, is the PRISM model of change <ref> [Mad91] </ref>.
Reference: [MN88] <editor> Patty Maes and Daniele Nardi, editors. </editor> <title> Meta-Level Architectures and Reflection. </title> <publisher> North Holland, </publisher> <year> 1988. </year>
Reference-contexts: This is necessary to make it possible to dynamically reason upon, manipulate, and interpret a model ("code"), e.g. represented by "reified" classes and meta-classes <ref> [MN88] </ref>. This is needed if we want to describe the software process as a single, integrated model.
Reference: [Ros77] <author> D. T. Ross and K. E. Schuman. </author> <title> Structured Analysis for Requirements Definition. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-3(1), </volume> <pages> pages 16-34. </pages> <month> January </month> <year> 1977. </year>
Reference-contexts: Due to their research-oriented nature, it should be expected that technology provision will be prototype-oriented with evolutionary introduction of new features. * Process requirement analysis: Generally, we believe that conventional methods for analysing information systems (like SADT <ref> [Ros77] </ref>, semantic modeling, object-oriented analysis) can be used for certain aspects.
Reference: [SEI91] <author> SEI, </author> <title> Software Engineering Institute. Capability Maturity Model for Software. </title> <type> CMU/SEI Technical Report, </type> <institution> No. 91-TR-24, </institution> <month> August </month> <year> 1991. </year> <month> epos/papers/pm-v9-metaprocess-tse92.tex November 1, </month> <year> 1995 </year> <month> 18 </month>
Reference-contexts: Cooperations between academia and industry have also been established. A well-know initiative in this area is DARPA's Software Engineering Insti <br>- tute, created at Carnegie Mellon University in Pittsburgh in 1983 <ref> [SEI91] </ref>. * A new research area has grown up, supported by scientific events that facilitate the 1 exchange and discussion of results, problems and early experiences ([Der92] [IEE91a] [IEE91b]). * Outside the area of software production, similar efforts emerge.
References-found: 23

