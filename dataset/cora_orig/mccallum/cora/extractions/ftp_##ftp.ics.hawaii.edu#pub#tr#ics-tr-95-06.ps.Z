URL: ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-95-06.ps.Z
Refering-URL: ftp://ftp.ics.hawaii.edu/pub/tr/INDEX.html
Root-URL: 
Title: Building Software Review Systems Using CSRS  
Author: Danu Tjahjono 
Address: U.S.A.  
Affiliation: Department of Information and Computer Sciences University of Hawaii,  
Abstract: The importance of Software Review or Formal Technical Review (FTR) and its benefits have been well documented. However, there are many variations of the method in practice, especially those related to the group process. This paper discusses a new approach to how organizations can build their own review systems that are most suitable to them. Our basic approach is to use CSRS modeling languages to characterize the review method descriptively. The language descriptions are then compiled to generate the corresponding review systems. CSRS modeling languages are developed based on FTR framework which models both variations in the group process and review strategies exhibited by current FTR methods. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Frank Ackerman, Lynne S. Buchwald, and Frank H. Lewski. </author> <title> Software inspections: An effective verification process. </title> <journal> IEEE Software, </journal> <pages> pages 31-36, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: For example, many FTR practices advocate the active participation of the producer during group meeting (i.e., have the producer play the role of presenter) for self-debugging mechanism, others discourage the producer's participation to prevent them from brainwashing the reviewers into making the same erroneous assumptions about the product being reviewed <ref> [15, 1] </ref>. Many FTR practices advocate the use of synchronous face-to-face interaction mode to promote group synergy, others discourage this mode to prevent meeting digression [16, 14]. Specific to FTR, different researchers suggest different review techniques (e.g., checklist [5, 7] or selective test cases [1], etc). <p> Many FTR practices advocate the use of synchronous face-to-face interaction mode to promote group synergy, others discourage this mode to prevent meeting digression [16, 14]. Specific to FTR, different researchers suggest different review techniques (e.g., checklist [5, 7] or selective test cases <ref> [1] </ref>, etc). Furthermore, the same review method is often implemented differently by different review systems. For example, both ICICLE [3] and Scrutiny [6] implement Fagan's inspection, and yet their review processes are different. As a result, the users of these systems are no longer practicing the same method.
Reference: [2] <author> V.R. Basili and R. W. Selby. </author> <title> Comparing the effectiveness of software testing strategies. </title> <type> Technical Report TR-1501, </type> <institution> University of Maryland at College Park, Department of Computer Science, </institution> <year> 1985. </year>
Reference-contexts: This dimension describes a specific technique or strategy that the participants use to accomplish the objective of a given phase. For example, the use of checklist during individual examination activity, or paraphrasing during group examination activity [5], or stepwise abstraction technique during individual examination <ref> [2] </ref>. With this framework, a review process can now be described in terms of phases, where each phase has a specific objective, interaction mode and tech nique. Using this approach, we are able to characterize and classify most major current review methods [18].
Reference: [3] <author> L. Brothers, V. Sembugamoorthy, and M. Muller. ICICLE: </author> <title> Groupware for code inspection. </title> <booktitle> In Proceedings of the 1990 ACM Conference on Computer Supported Cooperative Work, </booktitle> <pages> pages 169-181, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Specific to FTR, different researchers suggest different review techniques (e.g., checklist [5, 7] or selective test cases [1], etc). Furthermore, the same review method is often implemented differently by different review systems. For example, both ICICLE <ref> [3] </ref> and Scrutiny [6] implement Fagan's inspection, and yet their review processes are different. As a result, the users of these systems are no longer practicing the same method. To address these problems, we developed a framework that characterizes a FTR process. <p> We also provide electronic voting supports to record the degree of consensus among group members in EGSM. We expect to complete the study at the end of Spring 1995. Other Related Work While there are many computer supported review systems (e.g., ICICLE <ref> [3] </ref>, Scrutiny [6], InspeQ [12], CAIS [14]), we know of no other review system that can support wide varieties of review methods such as CSRS. Although the supports for collaboration in CSRS bear many resemblances with computer supported conferencing/meetings [16], CSRS is primarily intended to support software quality assurance activities.
Reference: [4] <author> Jeff Conklin and Michael L. Begeman. gIBIS: </author> <title> A hypertext tool for exploratory policy discussion. </title> <booktitle> In Proceedings of the 1988 ACM Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 140-152, </pages> <address> Portland, Ore-gon, </address> <year> 1988. </year>
Reference-contexts: Nodes and links are typed, that is, different review artifacts and their relationships can be represented by different node and link types. A set of computational supports can also be provided for different artifact types. In general, the data model supports the IBIS's style of issues exploration and deliberation <ref> [4] </ref>. One may also define a set of attributes to node instances (with or without specific node types), such as node names, creation-date, creator, etc. A node can also have state.
Reference: [5] <author> Michael E. Fagan. </author> <title> Design and code inspections to reduce errors in program development. </title> <journal> IBM System Journal, </journal> <volume> 15(3) </volume> <pages> 182-211, </pages> <year> 1976. </year>
Reference-contexts: Furthermore, we provide automatic metrics collection that allows the organization to evaluate their review methods and improve them over time. Research Problems Although there is a well published literature on how to effectively conduct FTR <ref> [5] </ref>, in practice there are many variations in performing it. For example, some researchers prefer to include no or little group process in their review practices (i.e., primarily based on the collection of individual efforts)[19]. <p> Many FTR practices advocate the use of synchronous face-to-face interaction mode to promote group synergy, others discourage this mode to prevent meeting digression [16, 14]. Specific to FTR, different researchers suggest different review techniques (e.g., checklist <ref> [5, 7] </ref> or selective test cases [1], etc). Furthermore, the same review method is often implemented differently by different review systems. For example, both ICICLE [3] and Scrutiny [6] implement Fagan's inspection, and yet their review processes are different. <p> For example, the meeting phase in Fagan's inspection <ref> [5] </ref> has the objective of examination, while the meeting phase in Humphrey's inspection [7] has the objective of collection. In practice, a review phase can include more than one objective (e.g., the preparation phase in Humphrey's inspection has the objectives of both comprehension and examination). (2) Interaction Mode. <p> This dimension describes a specific technique or strategy that the participants use to accomplish the objective of a given phase. For example, the use of checklist during individual examination activity, or paraphrasing during group examination activity <ref> [5] </ref>, or stepwise abstraction technique during individual examination [2]. With this framework, a review process can now be described in terms of phases, where each phase has a specific objective, interaction mode and tech nique. <p> Similarly, one can define different commentary types, such as, issue nodes to record defects in the source, action nodes to record proposal in resolving the issue, consolidated-issue nodes to consolidate similar issue nodes, etc. Checklist nodes contain verification aids. In manual review practices, such as Fagan's method <ref> [5] </ref>, the reviewers are often required to consult this checklist when examining source nodes. CSRS language system allows checklist items to be defined for a specific source node, and/or a specific participant role. This checklist can also be stated as required or optional.
Reference: [6] <author> John W. Gintell, John Arnold, Michael Houde, Jacek Kruszelnicki, Roland McKenney, and Gerard Memmi. Scrutiny: </author> <title> A collaborative inspection and review system. </title> <booktitle> In Proceedings of the Fourth European Software Engineering Conference, </booktitle> <address> Garwisch-Partenkirchen, Germany, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Specific to FTR, different researchers suggest different review techniques (e.g., checklist [5, 7] or selective test cases [1], etc). Furthermore, the same review method is often implemented differently by different review systems. For example, both ICICLE [3] and Scrutiny <ref> [6] </ref> implement Fagan's inspection, and yet their review processes are different. As a result, the users of these systems are no longer practicing the same method. To address these problems, we developed a framework that characterizes a FTR process. <p> We also provide electronic voting supports to record the degree of consensus among group members in EGSM. We expect to complete the study at the end of Spring 1995. Other Related Work While there are many computer supported review systems (e.g., ICICLE [3], Scrutiny <ref> [6] </ref>, InspeQ [12], CAIS [14]), we know of no other review system that can support wide varieties of review methods such as CSRS. Although the supports for collaboration in CSRS bear many resemblances with computer supported conferencing/meetings [16], CSRS is primarily intended to support software quality assurance activities.
Reference: [7] <author> Watts S. Humphrey. </author> <title> Managing the Software Process. </title> <publisher> Addison Wesley Publishing Company Inc., </publisher> <year> 1990. </year>
Reference-contexts: Many FTR practices advocate the use of synchronous face-to-face interaction mode to promote group synergy, others discourage this mode to prevent meeting digression [16, 14]. Specific to FTR, different researchers suggest different review techniques (e.g., checklist <ref> [5, 7] </ref> or selective test cases [1], etc). Furthermore, the same review method is often implemented differently by different review systems. For example, both ICICLE [3] and Scrutiny [6] implement Fagan's inspection, and yet their review processes are different. <p> For example, the meeting phase in Fagan's inspection [5] has the objective of examination, while the meeting phase in Humphrey's inspection <ref> [7] </ref> has the objective of collection. In practice, a review phase can include more than one objective (e.g., the preparation phase in Humphrey's inspection has the objectives of both comprehension and examination). (2) Interaction Mode. This dimension describes the nature of group collaboration.
Reference: [8] <author> Philip M. Johnson. </author> <title> Supporting exploratory CSCW with the EGRET framework. </title> <booktitle> In Proceedings of the 1992 Conference on Computer Supported Cooperative Work, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: This feature is used to implement synchronous meeting mode. The clients are implemented on top of Egret, a generic hypertext system that provides session management to the server as well as typing mechanism <ref> [8, 9] </ref>. The next layer is CSRS engine that provides internal operations of the system, and the language subsystem that provides enactable review methods. One may also add special client running as a background process, called Agent, that performs specific tasks by listening to specific events from the server.
Reference: [9] <author> Philip M. Johnson. </author> <title> Experiences with EGRET: An exploratory group work environment. </title> <journal> Collaborative Computing, </journal> <volume> 1(1) </volume> <pages> 87-107, </pages> <year> 1994. </year>
Reference-contexts: This feature is used to implement synchronous meeting mode. The clients are implemented on top of Egret, a generic hypertext system that provides session management to the server as well as typing mechanism <ref> [8, 9] </ref>. The next layer is CSRS engine that provides internal operations of the system, and the language subsystem that provides enactable review methods. One may also add special client running as a background process, called Agent, that performs specific tasks by listening to specific events from the server.
Reference: [10] <author> Philip M. Johnson. </author> <title> An instrumented approach to improving software quality through formal technical review. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: This feature allows the process work flow to be initiated. It can guide the participants to what they have to do when they first start the phase. review process of FTArm <ref> [11, 10] </ref>. The method defines 6 review phases: Orientation, Private, Public, Consolidation, Meeting, and Conclusion. The Private phase defines Reviewer and Producer roles, that is, only participants with these roles can login to Private phase. <p> We felt that we needed to add a private review phase before proceeding to the public review phase. As a result of this experience, we decided to implement the final Csdl-Method which is similar to the FTArm review method <ref> [11, 10] </ref>. This method not only addresses all our concerns above, but also has rich data and process models. Unlike in the earlier FTArm version, the new Csdl-Method provides computational supports to all review phases.
Reference: [11] <author> Philip M. Johnson and Danu Tjahjono. </author> <title> Improving software quality through computer supported collaborative review. </title> <booktitle> In Proceedings of the Third European Conference on Computer Supported Cooperative Work, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: This feature allows the process work flow to be initiated. It can guide the participants to what they have to do when they first start the phase. review process of FTArm <ref> [11, 10] </ref>. The method defines 6 review phases: Orientation, Private, Public, Consolidation, Meeting, and Conclusion. The Private phase defines Reviewer and Producer roles, that is, only participants with these roles can login to Private phase. <p> The system architecture is shown in Figure 4 Experiences with CSRS and Current Status Our first prototype of CSRS (version 1) was implemented in 1992. It implements an asynchronous review method <ref> [11] </ref>. The experience we gained from this system was generally positive. However, it made us realize the need for generalizing CSRS to implement other review methods. This led to the development of CSRS version 3 that support generic modeling capability as discussed above. <p> We felt that we needed to add a private review phase before proceeding to the public review phase. As a result of this experience, we decided to implement the final Csdl-Method which is similar to the FTArm review method <ref> [11, 10] </ref>. This method not only addresses all our concerns above, but also has rich data and process models. Unlike in the earlier FTArm version, the new Csdl-Method provides computational supports to all review phases.
Reference: [12] <author> John C. Knight and E. Ann Myers. </author> <title> An improved inspection technique. </title> <journal> Communications of the ACM, </journal> <volume> 11(11) </volume> <pages> 51-61, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: We also provide electronic voting supports to record the degree of consensus among group members in EGSM. We expect to complete the study at the end of Spring 1995. Other Related Work While there are many computer supported review systems (e.g., ICICLE [3], Scrutiny [6], InspeQ <ref> [12] </ref>, CAIS [14]), we know of no other review system that can support wide varieties of review methods such as CSRS. Although the supports for collaboration in CSRS bear many resemblances with computer supported conferencing/meetings [16], CSRS is primarily intended to support software quality assurance activities.
Reference: [13] <author> Vahid Mashayekhi, Janet Drake, Wei-Tek Tsai, and John Riedl. </author> <title> Distributed, collaborative software inspection. </title> <journal> IEEE Software, </journal> <volume> 10(5), </volume> <month> September </month> <year> 1993. </year>
Reference: [14] <author> Vahid Mashayekhi, Chris Feuller, and John Riedl. </author> <title> CAIS: Collaborative asynchronous inspection of software. </title> <booktitle> Proceedings of the Second ACM SIG-SOFT Symposium on Foundations of Software Engineering, </booktitle> <volume> 19(5) </volume> <pages> 21-34, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Many FTR practices advocate the use of synchronous face-to-face interaction mode to promote group synergy, others discourage this mode to prevent meeting digression <ref> [16, 14] </ref>. Specific to FTR, different researchers suggest different review techniques (e.g., checklist [5, 7] or selective test cases [1], etc). Furthermore, the same review method is often implemented differently by different review systems. <p> We also provide electronic voting supports to record the degree of consensus among group members in EGSM. We expect to complete the study at the end of Spring 1995. Other Related Work While there are many computer supported review systems (e.g., ICICLE [3], Scrutiny [6], InspeQ [12], CAIS <ref> [14] </ref>), we know of no other review system that can support wide varieties of review methods such as CSRS. Although the supports for collaboration in CSRS bear many resemblances with computer supported conferencing/meetings [16], CSRS is primarily intended to support software quality assurance activities.
Reference: [15] <author> Glenford J. Myers. </author> <title> The Art of Software Testing. </title> <publisher> John Wiley and Sons, IBM Systems Research Institute, </publisher> <year> 1979. </year>
Reference-contexts: For example, many FTR practices advocate the active participation of the producer during group meeting (i.e., have the producer play the role of presenter) for self-debugging mechanism, others discourage the producer's participation to prevent them from brainwashing the reviewers into making the same erroneous assumptions about the product being reviewed <ref> [15, 1] </ref>. Many FTR practices advocate the use of synchronous face-to-face interaction mode to promote group synergy, others discourage this mode to prevent meeting digression [16, 14]. Specific to FTR, different researchers suggest different review techniques (e.g., checklist [5, 7] or selective test cases [1], etc).
Reference: [16] <author> J. F. Nunamaker, Alan R. Dennis, Joseph S. Valacich, Douglas R. Vogel, and Joey F. George. </author> <title> Electronic meeting systems to support group work. </title> <journal> Communication of the ACM, </journal> <volume> 34(7) </volume> <pages> 42-61, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Many FTR practices advocate the use of synchronous face-to-face interaction mode to promote group synergy, others discourage this mode to prevent meeting digression <ref> [16, 14] </ref>. Specific to FTR, different researchers suggest different review techniques (e.g., checklist [5, 7] or selective test cases [1], etc). Furthermore, the same review method is often implemented differently by different review systems. <p> Although the supports for collaboration in CSRS bear many resemblances with computer supported conferencing/meetings <ref> [16] </ref>, CSRS is primarily intended to support software quality assurance activities. The design philosophy of CSRS version 3 is somewhat similar to GroupKit [17], however, instead of providing toolkits for building conferencing applications, CSRS provides a toolkit for building software review systems.
Reference: [17] <author> Mark Roseman and Saul Greenberg. Groupkit: </author> <title> A groupware toolkit for building real-time conferencing applications. </title> <booktitle> In Proceedings of the 1992 Conference on Computer Supported Cooperative Work, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Although the supports for collaboration in CSRS bear many resemblances with computer supported conferencing/meetings [16], CSRS is primarily intended to support software quality assurance activities. The design philosophy of CSRS version 3 is somewhat similar to GroupKit <ref> [17] </ref>, however, instead of providing toolkits for building conferencing applications, CSRS provides a toolkit for building software review systems. Conclusions We have described CSRS (version 3), a computer assisted review that provides generic modeling languages to implement many variations of review methods.
Reference: [18] <author> Danu Tjahjono. </author> <title> Evaluating the cost-effectiveness of formal technical review factors. </title> <type> Ph.D. Dissertation Proposal. </type> <institution> CSDL-TR-94-07, University of Hawaii, Department of Information and Computer Sciences, </institution> <year> 1994. </year>
Reference-contexts: With this framework, a review process can now be described in terms of phases, where each phase has a specific objective, interaction mode and tech nique. Using this approach, we are able to characterize and classify most major current review methods <ref> [18] </ref>. CSRS (Collaborative Software Review System) CSRS version 3 is a review system that implements this framework. As such, it can model and run various review methods. The basic approach is to provide generic modeling languages to implement the framework, specifically, the data and the process modeling languages.
Reference: [19] <author> Lawrence G. Votta. </author> <booktitle> Does every inspection need a meeting? In Proceedings of the ACM SIGSOFT 1993 Symposium on Foundations of Software Engineering, </booktitle> <month> December </month> <year> 1993. </year>
References-found: 19

