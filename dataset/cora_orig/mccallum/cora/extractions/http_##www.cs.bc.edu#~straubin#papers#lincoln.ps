URL: http://www.cs.bc.edu/~straubin/papers/lincoln.ps
Refering-URL: http://www.cs.bc.edu/techreps.html
Root-URL: http://www.cs.bc.edu
Email: e-mail:straubin@cs.bc.edu  
Phone: Tel.: (617)-552-3977  
Title: When Can One Finite Monoid Simulate Another?  
Author: Howard Straubing 
Address: Boston College Chestnut Hill, MA 02167  
Affiliation: Computer Science Department  
Abstract-found: 0
Intro-found: 1
Reference: <institution> References </institution>
Reference: 1. <author> M. Ajtai, </author> " <title> 1 1 formulae on finite structures", </title> <note> Annals of Pure and Applied Logic 24 (1983) 1-48. </note>
Reference-contexts: One of the most important achievements of computational complexity theory is the following result, due to Furst, Saxe and Sipser [11] and, independently, to Ajtai <ref> [1] </ref>. Theorem 10. Let q &gt; 1: M OD q =2 AC 0 : This implies, by a relatively simple reduction, that multiplication cannot be performed by polynomial-size constant-depth circuit families. (See [11].) The connection to finite monoids is given by the following theorem, due to Barrington and Therien [7].
Reference: 2. <author> E. Allender, </author> <title> "A note on the power of threshold circuits", </title> <booktitle> Proc. 30th IEEE FOCS (1989) 580-584. </booktitle>
Reference-contexts: Their interpretation in terms of circuits is due to Allender <ref> [2] </ref> and Allender and Hertrampf [3]. The semigroup-theoretic interpretation that we give here has not been published before. First, let us look briefly at the question of c log k n-programs over aperiodic monoids.
Reference: 3. <author> E. Allender and U. Hertrampf, </author> <title> "Depth reduction for circuits of unbounded fan-in", </title> <note> Information and Computation 112 (1994) 217-238. </note>
Reference-contexts: Their interpretation in terms of circuits is due to Allender [2] and Allender and Hertrampf <ref> [3] </ref>. The semigroup-theoretic interpretation that we give here has not been published before. First, let us look briefly at the question of c log k n-programs over aperiodic monoids. <p> inputs as fair coins which we flip at the start of the computation; the probability that the circuit makes an error in computing g is at most *: We also say that the circuit computes g with probability at least 1 *: The following sequence of lemmas is adapted from <ref> [3] </ref>. Lemma 21.
Reference: 4. <author> D. </author> <title> Mix Barrington, "Bounded-Width Polynomial-Size Branching Programs Recognize Exactly Those Languages in N C 1 ", J. </title> <institution> Comp. Syst. Sci. </institution> <month> 38 </month> <year> (1989) </year> <month> 150-164. </month>
Reference-contexts: ; : : : ; m n ) is (m 1 m n ): Since is injective, this shows G (r + 1)-simulates M; completing the proof of Theorem 5.2 Theorem 5, and, especially, its application to boolean circuits, which we give in the next section, is due to Barrington <ref> [4] </ref>, who rediscovered the principle of the Maurer-Rhodes theorem. <p> This is the content of the following theorem, due to Barrington <ref> [4] </ref>. Theorem 12.
Reference: 5. <author> D. Mix Barrington and H. Straubing, </author> <title> "Superlinear Lower Bounds for Bounded-Width Branching Programs", </title> <institution> J. Comp. Syst. Sci. </institution> <month> 50 </month> <year> (1995) </year> <month> 374-381. </month>
Reference-contexts: It follows that for all t p 1; (f0; 1g t ) = G p ; and thus, by the theorem, G p divides a direct product of copies of N; which implies the result. 2 The main theorems of this section were adapted from Barrington and Straub-ing <ref> [5] </ref>. 4 k-Simulation We may think of the program maps of a 1-program as being a sequence of instructions. Each instruction has access to one letter of the input string, and emits a monoid element according to the value of the letter that was read.
Reference: 6. <author> D. Mix Barrington, H. Straubing, and D. Therien, </author> <title> "Nonuniform Automata over Groups", </title> <note> Information and Computation 89 (1990) 109-132. </note>
Reference-contexts: Parts (a)-(c) follow from results in circuit complexity|we shall say something about their proofs in the next section. Part (d) is, in essence, due to Maciel, Peladeau and Therien [13], and, independently, to Straubing [20]. Part (e) follows from results of Barrington, Straubing and Therien <ref> [6] </ref>. Theorem 9.
Reference: 7. <author> D. Mix Barrington and D. Therien, </author> <title> "Finite Monoids and the Fine Structure of N C 1 ", JACM 35 (1988) 941-952. </title>
Reference-contexts: Theorem 10. Let q &gt; 1: M OD q =2 AC 0 : This implies, by a relatively simple reduction, that multiplication cannot be performed by polynomial-size constant-depth circuit families. (See [11].) The connection to finite monoids is given by the following theorem, due to Barrington and Therien <ref> [7] </ref>. Theorem 11. Let L f0; 1g fl : L 2 AC 0 if and only if L is recognized by a k-program over a finite aperiodic monoid. Proof. <p> Now let us indicate the connections to algebra. The following theorems can be considered modular analogues of Theorem 11. Their proofs, which we omit, are similar. (See Barrington and Therien <ref> [7] </ref> and Straubing [18].) Theorem 17. Let q &gt; 2; L f0; 1g fl : L 2 CC (q) if and only if L is k-recognized by a solvable group whose cardinality divides a power of q: Theorem 18.
Reference: 8. <author> P. Beame, S. Cook, and J. </author> <title> Hoover, "Log-Depth Circuits for Division and Related Problems" SIAM J. </title> <note> Computing 15 (1986) 994-1003. </note>
Reference-contexts: bounded by a polynomial in n: With N C 1 circuit families we can perform binary multiplication (if we allow multiple outputs), determine if the majority of the bits in the input are on, and even perform binary division. (See Chandra, Stockmeyer and Vishkin [9], and Beame, Cooke and Hoover <ref> [8] </ref>.) As it turns out, N C 1 is exactly the class of k-recognizable languages. This is the content of the following theorem, due to Barrington [4]. Theorem 12.
Reference: 9. <author> A. Chandra, L. Stockmeyer, and U. Vishkin, </author> <note> "Constant-Depth Reducibility", SIAM J. Computing 13 (1984) 423-439. </note>
Reference-contexts: of such a circuit is necessarily bounded by a polynomial in n: With N C 1 circuit families we can perform binary multiplication (if we allow multiple outputs), determine if the majority of the bits in the input are on, and even perform binary division. (See Chandra, Stockmeyer and Vishkin <ref> [9] </ref>, and Beame, Cooke and Hoover [8].) As it turns out, N C 1 is exactly the class of k-recognizable languages. This is the content of the following theorem, due to Barrington [4]. Theorem 12.
Reference: 10. <author> Samuel Eilenberg, </author> <title> Automata, Languages and Machines, vol. B, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: As is very well known, a monoid N recognizes a language L if and only if M (L); the syntactic monoid of L; divides N: (See, for example, Pin [15] or Eilenberg <ref> [10] </ref>.) When we use a monoid N to compute in this fashion, we are treating the elements of N as the states of a finite automaton whose transition function is given by the multiplication in N: In particular, a language is recognized by a finite monoid if and only if the
Reference: 11. <author> M. Furst, J. Saxe, and M. Sipser, </author> <title> "Parity, Circuits, and the Polynomial Time Hierarchy", </title> <journal> J. </journal> <note> Math Systems Theory 17 (1984) 13-27. </note>
Reference-contexts: One of the most important achievements of computational complexity theory is the following result, due to Furst, Saxe and Sipser <ref> [11] </ref> and, independently, to Ajtai [1]. Theorem 10. Let q &gt; 1: M OD q =2 AC 0 : This implies, by a relatively simple reduction, that multiplication cannot be performed by polynomial-size constant-depth circuit families. (See [11].) The connection to finite monoids is given by the following theorem, due to <p> computational complexity theory is the following result, due to Furst, Saxe and Sipser <ref> [11] </ref> and, independently, to Ajtai [1]. Theorem 10. Let q &gt; 1: M OD q =2 AC 0 : This implies, by a relatively simple reduction, that multiplication cannot be performed by polynomial-size constant-depth circuit families. (See [11].) The connection to finite monoids is given by the following theorem, due to Barrington and Therien [7]. Theorem 11. Let L f0; 1g fl : L 2 AC 0 if and only if L is recognized by a k-program over a finite aperiodic monoid. Proof.
Reference: 12. <author> J. Hastad, </author> <title> "Almost Optimal Lower Bounds for Small-Depth Circuits", </title> <booktitle> Proc. 18th ACM STOC (1986) 6-20. </booktitle>
Reference-contexts: Now results of Hastad <ref> [12] </ref> and Yao [22] extend Theorem 10 to the case of circuit families of this size; they prove that any constant-depth circuit family of AN D nodes and OR nodes that recognizes M OD q must have size exponential in n: Thus we conclude in this case as well that M
Reference: 13. <author> A. Maciel, P. Peladeau and D. Therien, </author> <title> "Programs over Semigroups of Dot-depth One", </title> <type> preprint, </type> <year> 1996. </year>
Reference-contexts: Parts (a)-(c) follow from results in circuit complexity|we shall say something about their proofs in the next section. Part (d) is, in essence, due to Maciel, Peladeau and Therien <ref> [13] </ref>, and, independently, to Straubing [20]. Part (e) follows from results of Barrington, Straubing and Therien [6]. Theorem 9.
Reference: 14. <author> W. Maurer and J. Rhodes, </author> <title> "A Property of Finite Simple Non-Abelian Groups", </title> <journal> Proc. Amer. Math. Soc. </journal> <month> 16 </month> <year> (1965) </year> <month> 552-554. </month>
Reference-contexts: Let G be a finite simple non-abelian group, and let n &gt; 0: Then every function from G n into G is realized by a polynomial over G: For the proof, see Maurer and Rhodes <ref> [14] </ref> or Straubing [19]. We now prove Theorem 5.
Reference: 15. <author> J. E. Pin, </author> <title> Varieties of Formal Languages, </title> <publisher> Plenum, </publisher> <address> London, </address> <year> 1986. </year>
Reference-contexts: As is very well known, a monoid N recognizes a language L if and only if M (L); the syntactic monoid of L; divides N: (See, for example, Pin <ref> [15] </ref> or Eilenberg [10].) When we use a monoid N to compute in this fashion, we are treating the elements of N as the states of a finite automaton whose transition function is given by the multiplication in N: In particular, a language is recognized by a finite monoid if and
Reference: 16. <author> M. P. Schutzenberger, </author> <title> "On Finite Monoids Having Only Trivial Subgroups", </title> <note> Information and Control 8 (1965) 190-194. </note>
Reference-contexts: thus produce a new language L 0 over f0; 1g: We first claim that if L is a regular language recognized, in the sense of Section 1, by a finite aperiodic monoid M; then L 0 2 AC 0 : To do this, we apply the classic theorem of Schutzenberger <ref> [16] </ref>, which characterizes the regular aperiodic languages: L is obtained from the language A fl by repeated application of boolean operations and the concatenation operation (L 1 ; L 2 ) 7! L 1 aL 2 ; where a 2 A: Observe that a 1 a n 2 L 1 aL
Reference: 17. <author> R. Smolensky, </author> <title> "Algebraic Methods in the Theory of Lower Bounds for Boolean Circuit Complexity", </title> <booktitle> Proc. 19th ACM STOC (1987) 77-82. </booktitle>
Reference-contexts: They are due to Smolen-sky <ref> [17] </ref>. Theorem 13. If p is prime and k 1; then AN D =2 CC (p k ): Theorem 14.
Reference: 18. <author> H. Straubing, </author> <title> "Constant-depth Periodic Circuits", </title> <journal> International J. </journal> <note> Algebra and Computation 1 (1991) 49-88. </note>
Reference-contexts: Now let us indicate the connections to algebra. The following theorems can be considered modular analogues of Theorem 11. Their proofs, which we omit, are similar. (See Barrington and Therien [7] and Straubing <ref> [18] </ref>.) Theorem 17. Let q &gt; 2; L f0; 1g fl : L 2 CC (q) if and only if L is k-recognized by a solvable group whose cardinality divides a power of q: Theorem 18.
Reference: 19. <author> H. Straubing, </author> <title> Finite Automata, Formal Languages, and Circuit Complexity, </title> <publisher> Birkhauser, </publisher> <address> Boston, </address> <year> 1994. </year> <title> 20. "Languages Defined with Modular Counting Quantifiers", </title> <booktitle> Proc. 15th STACS, Lecture Notes in Computer Science 1373, </booktitle> <publisher> Springer, </publisher> <address> Berlin (1998) 332-343. </address>
Reference-contexts: Let G be a finite simple non-abelian group, and let n &gt; 0: Then every function from G n into G is realized by a polynomial over G: For the proof, see Maurer and Rhodes [14] or Straubing <ref> [19] </ref>. We now prove Theorem 5.
Reference: 21. <author> S. Toda, </author> <note> "PP is as hard as the polynomial-time hierarchy", SIAM J. Computing 20 (1991), 865-877. </note>
Reference-contexts: we define an f (n)-program over a monoid M exactly as we did in the case when f is constant: The program maps for inputs of length n are indexed by the f (n)-tuples over f1; : : : ; ng: The results we describe originate in work of Toda <ref> [21] </ref> on the polynomial-time hierarchy. Their interpretation in terms of circuits is due to Allender [2] and Allender and Hertrampf [3]. The semigroup-theoretic interpretation that we give here has not been published before. First, let us look briefly at the question of c log k n-programs over aperiodic monoids.
Reference: 22. <author> A. Yao, </author> <title> "Separating the Polynomial Time Hierarchy by Oracles", </title> <booktitle> Proc. 26th IEEE FOCS (1985) 1-10. </booktitle>
Reference-contexts: Now results of Hastad [12] and Yao <ref> [22] </ref> extend Theorem 10 to the case of circuit families of this size; they prove that any constant-depth circuit family of AN D nodes and OR nodes that recognizes M OD q must have size exponential in n: Thus we conclude in this case as well that M must itself be
References-found: 22

