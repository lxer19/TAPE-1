URL: ftp://ftp.cs.umass.edu/pub/ccs/spring/robot_rtas96.ps
Refering-URL: http://www-ccs.cs.umass.edu/recpub-rts/index.html
Root-URL: 
Title: A Robotic Assembly Application on the Spring Real-Time System  
Author: Carlton Bickford, Marie S. Teo, Gary Wallace, John A. Stankovic, Krithi Ramamritham 
Address: Amherst MA 01003-4610  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: The Spring real-time system and environment provides methods for program representation and corresponding run-time system support that allow programs to meet the predictability demands of complex real-time applications. The primary objective of the work described in this paper is to present the experiences gained and the lessons learned from porting a real-world real-time application to make it predictable and flexible. The exercise has also provided a test case which helps to answer questions about the completeness and ease of use of software development tools that have been developed to provide for flexibility while achieving real-time guarantees. This test case is derived from an existing real-time application in industry a robotic work-cell that is currently in use for the assembly of circuit boards. From our experience with this reengineering exercise we believe that, a user must possess a good understanding of the following: (1) the general properties of the target hardware for effective process and resource layout, and (2) the shared resource usage and interprocess communication and more generally, the statements that cause processes to suspend for efficient run-time representation of the tasks. Tools that help the user obtain this understanding and perform detailed timing analysis are essential. Although the algorithms and tools used in the reimplementation were developed in the context of the Spring real-time environment, we believe that the lessons learned from this experiment will be useful not only to potential users of Spring, but also to real-time practitioners at large. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Adept Technology Inc., </institution> <address> San Jose, CA. </address> <note> V+ Reference Guide, </note> <year> 1988. </year>
Reference-contexts: They are rigidly mounted on a fixture which mounts to the robot wrist. Camera 3 is mounted within the robot workspace looking upward, and is not used for the DVG scheme. 2.3. The V+ Control and Programming System Adept's operating system is V+ <ref> [1] </ref>, formerly known as VAL-II [7]. VAL, the original robot programming system, was developed in 1975 by Unimation. V+ is a multitasking operating system as well as a high level interpretive programming language. For any robotic application, V+ may run two types of user processes.
Reference: [2] <author> J. W. S. Liu et al. PERTS: </author> <title> A prototyping environment for real-time systems. </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pages 184-188, </pages> <year> 1993. </year>
Reference-contexts: The particular features of the tools that deal with (i) platform specification and (ii) analysis of blocking, concurrency, synchronization, IPC and schedulability would be useful for all real-time systems. These features, at the level of detail provided in Spring, are not found in other current tools <ref> [2] </ref>. On the other hand, this has by no means been an exhaustive test case. There are many features of the Spring system that were not used, but a single application rarely makes use of all services provided by a system. 7.
Reference: [3] <author> E. Nahum, K. Ramamritham, and J. Stankovic. </author> <title> Real-time in-terprocess communication in the Spring kernel. Spring Project Documentation, </title> <month> May </month> <year> 1992. </year>
Reference-contexts: While this is clearly of a smaller scale than the large complex real-time systems of the future that Spring research is geared toward, it has helped stress the capabilities of Spring's software development support tools. It makes extensive use of the Spring mechanisms for shared memory and IPC primitives <ref> [3] </ref>, and thoroughly exercises the use of the SDL to describe process behavior. Some key lessons learned from our experience with this reimplementation include: * Separating the specification of process and resource layout information from program code helps in taming the complexity of software development. <p> Furthermore, the scheduler will insert a gap equal to communication delay after the completion of T 1, which represents the minimum amount of time that must elapse before T 2 0 may begin. The value for communication delay is provided to the scheduler by the real-time network service <ref> [3] </ref>. The application makes substantial use of IPC, as can be seen from the following example of the synchronous communication that must take place among the processes in the process group place pg: 1.
Reference: [4] <author> D. Niehaus. </author> <title> Program representation and translation for predictable real-time systems. </title> <booktitle> Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 53-63, </pages> <year> 1991. </year>
Reference-contexts: The Spring system enforces these precedence requirements, and also avoids unpredictable blocking, by decomposing the process group into the run-time task representation discussed in <ref> [4] </ref>. The Spring system achieves this mapping automatically, eliminating the need for manual translation and scheduling by hand as was necessary with the cyclic scheduler in the original V+ implementation.
Reference: [5] <author> D. Niehaus, J. Stankovic, and K. Ramamritham. </author> <title> A real-time description language. </title> <booktitle> Proceedings of the Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 104-115, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: To meet these demands, the Spring system makes several tools available to the real-time programmer. The Spring-C language makes a few significant changes to the syntax of ANSI C to ensure program predictability. The Spring System Description Language (SDL) <ref> [5] </ref> augments Spring-C code with a grammar that is used to describe the resource requirements, timing constraints, and importance levels for each process. <p> In this way, the Spring system provides algorithmic support for shared memory resources. The scheduler need not be made aware of a shared data structure that is not used in exclusive mode by any process. However, as noted in <ref> [5] </ref>, it is useful to describe the data structure as a resource anyway. If at some later point in the software development exclusive access is needed, all references throughout the code will already be properly enclosed in with statements.
Reference: [6] <author> K. Ramamritham, J. Stankovic, and P. Shiah. </author> <title> Efficient scheduling algorithms for real-time multiprocessor systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(2) </volume> <pages> 184-194, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Since the three process groups represent the primary purpose for which the workcell was designed, it seems reasonable to designate their type as critical. The online guarantee routine <ref> [6] </ref> is invoked dynamically when the event containing the process groups first arrives. Once this set of processes is guaranteed, they remain guaranteed as long as they remain in the system, even as new tasks arrive. <p> Further, the executables contain all the informa tion needed to predictably execute the application. 2. Guarantees: Looking back on the Spring application described in section 3 it may be noted that most processes and process groups are designated critical. The online guarantee algorithm <ref> [6] </ref> dynamically creates a feasible schedule for the processes when the event specifying them first arrives. In this test case the scheduler was able to produce a feasible schedule. These critical processes remain guaranteed as long as the workcell operates.
Reference: [7] <author> B. Shimano, G. Clifford, C. Spalding, and P. Smith. Val-II: </author> <title> A robot programming system incorporating real-time and supervisory control. </title> <booktitle> Proceedingsof SME Robots 8, </booktitle> <month> June </month> <year> 1984. </year>
Reference-contexts: They are rigidly mounted on a fixture which mounts to the robot wrist. Camera 3 is mounted within the robot workspace looking upward, and is not used for the DVG scheme. 2.3. The V+ Control and Programming System Adept's operating system is V+ [1], formerly known as VAL-II <ref> [7] </ref>. VAL, the original robot programming system, was developed in 1975 by Unimation. V+ is a multitasking operating system as well as a high level interpretive programming language. For any robotic application, V+ may run two types of user processes. <p> The execution time of the trajectory generator depends on two factors; the type of motion specified (joint-interpolated, straight-line, etc.) <ref> [7] </ref> and the CPU type. With the 68000 processor, the trajectory generator task could take from 7 ms up to 11 ms. If it does not exceed the time slice then user task 0, the robot control process can execute.
Reference: [8] <author> J. Stankovic and K. Ramamritham. </author> <title> The Spring kernel: A new paradigm for real-time systems. </title> <journal> IEEE Software, </journal> <volume> 8(3) </volume> <pages> 62-72, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: 1. Introduction The Spring real-time system <ref> [8] </ref> and environment provides methods for program representation and corresponding run-time system support that allow programs to meet the predictability demands of a complex real-time application.
References-found: 8

