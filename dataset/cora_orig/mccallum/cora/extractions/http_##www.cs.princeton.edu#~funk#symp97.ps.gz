URL: http://www.cs.princeton.edu/~funk/symp97.ps.gz
Refering-URL: http://www.cs.princeton.edu/~funk/
Root-URL: http://www.cs.princeton.edu
Title: Consistent Solid and Boundary Representations from Arbitrary Polygonal Data  
Author: T. M. Murali Thomas A. Funkhouser 
Affiliation: Brown University  Bell Laboratories  
Abstract: Consistent representations of the boundary and interior of three-dimensional solid objects are required by applications ranging from interactive visualization to tnite element analysis. However, most commonly available models of solid objects contain errors and inconsistencies. We describe an algorithm that automatically constructs consistent representations of the solid objects modeled by an arbitrary set of polygons. The key feature of our algorithm is that it trst partitions space into a set of polyhedral regions and then determines which regions are solid based on region adjacency relationships. From the solid polyhedral regions, we are able to output consistent boundary and solid representations in a variety of tle formats. Unlike previous approaches, our solid-based approach is eective even when the input polygons intersect, overlap, are wrongly-oriented, have T-junctions, or are unconnected. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Daniel R. Baum, Stephen Mann, Kevin P. Smith, and James M. Winget. </author> <title> Making radiosity usable: Automatic preprocessing and meshing techniques for the generation of accurate radiosity solutions. </title> <booktitle> In Proc. SIGGRAPH '91, volume 25 of Comput. Graph., </booktitle> <pages> pages 5160, </pages> <address> New York, </address> <year> 1991. </year> <note> ACM SIG-GRAPH. </note>
Reference-contexts: Such algorithms require a correct representation of the boundary of the obstacles so that they can eectively construct the free space. Similarly, algorithms for lighting simulation process meshes constructed on the boundaries of the objects being lit or analysed <ref> [1] </ref>. If the boundaries have cracks, the mesh is malformed, causing errors and artifacts like spurious shadows in the result. Bad meshes can also produce errors in tnite element analysis. <p> Some boundary-based methods assume that either all the input polygons are consistently oriented or that the orientation of a polygon can be determined from the order of the vertices on its boundary <ref> [1, 3] </ref>. Such an assumption is often invalid since many datasets contain inconsistently oriented polygons. Other algorithms require (a lot of) user intervention [5, 15], are inherently two-dimensional [14, 16] or are limited to removing parts of zero-volume (like internal walls) from CAD models [2]. <p> However, the most common detciency of many of the previous techniques is that they use scene-relative tolerances to tll over cracks and generate connectivity information about the model <ref> [1, 4, 24] </ref>. Determining the right tolerance for a given model is a dicult task, probably requiring input from the user. Moreover, such approaches do not work well when the size of some error in the input is larger than the smallest feature in the model. <p> All previous approaches known to the authors fail for this simple example. Boundary-based approaches that traverse the surface of the object [15] fail in the areas where polygons are unconnected (along the handle). Proximity-based approaches <ref> [1, 4, 24] </ref> that merge features within some tolerance of each other do not work as no suitable tolerance can be chosen for the entire model because the size of the largest error (a crack between polygons on the handle) is larger than the size of the smallest feature (a bevel
Reference: [2] <author> Jan Helge Bhn. </author> <title> Removing zero-volume parts from CAD models for layered manufacturing. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 15(6):2734, </volume> <year> 1995. </year>
Reference-contexts: Such an assumption is often invalid since many datasets contain inconsistently oriented polygons. Other algorithms require (a lot of) user intervention [5, 15], are inherently two-dimensional [14, 16] or are limited to removing parts of zero-volume (like internal walls) from CAD models <ref> [2] </ref>. Bhn and Wozny [3] tll cracks or holes by adding polygons; their method can potentially add a lot of polygons to the model.
Reference: [3] <author> Jan Helge Bhn and Michael J. Wozny. </author> <title> A topology-based approach for shell closure. </title> <editor> In P. R. Wilson, M. J. Wozny, and M. J. Pratt, editors, </editor> <title> Geometric Modeling for Product Realization, pages 297319. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1993. </year>
Reference-contexts: Some boundary-based methods assume that either all the input polygons are consistently oriented or that the orientation of a polygon can be determined from the order of the vertices on its boundary <ref> [1, 3] </ref>. Such an assumption is often invalid since many datasets contain inconsistently oriented polygons. Other algorithms require (a lot of) user intervention [5, 15], are inherently two-dimensional [14, 16] or are limited to removing parts of zero-volume (like internal walls) from CAD models [2]. <p> Such an assumption is often invalid since many datasets contain inconsistently oriented polygons. Other algorithms require (a lot of) user intervention [5, 15], are inherently two-dimensional [14, 16] or are limited to removing parts of zero-volume (like internal walls) from CAD models [2]. Bhn and Wozny <ref> [3] </ref> tll cracks or holes by adding polygons; their method can potentially add a lot of polygons to the model.
Reference: [4] <author> Georey Butlin and Clive Stops. </author> <title> CAD data repair. </title> <booktitle> In Proceedings of the 5th International Meshing Roundtable, </booktitle> <month> October </month> <year> 1996. </year> <note> See also http:// www.fegs.co.uk/CADfix.html. </note>
Reference-contexts: However, the most common detciency of many of the previous techniques is that they use scene-relative tolerances to tll over cracks and generate connectivity information about the model <ref> [1, 4, 24] </ref>. Determining the right tolerance for a given model is a dicult task, probably requiring input from the user. Moreover, such approaches do not work well when the size of some error in the input is larger than the smallest feature in the model. <p> All previous approaches known to the authors fail for this simple example. Boundary-based approaches that traverse the surface of the object [15] fail in the areas where polygons are unconnected (along the handle). Proximity-based approaches <ref> [1, 4, 24] </ref> that merge features within some tolerance of each other do not work as no suitable tolerance can be chosen for the entire model because the size of the largest error (a crack between polygons on the handle) is larger than the size of the smallest feature (a bevel
Reference: [5] <author> Carl Erikson. </author> <title> Error correction of a large architectural model: the Henderson County Courthouse. </title> <type> Technical Report TR95-013, </type> <institution> Dept. of Computer Science, University of North Carolina at Chapel Hill, </institution> <year> 1995. </year>
Reference-contexts: Such an assumption is often invalid since many datasets contain inconsistently oriented polygons. Other algorithms require (a lot of) user intervention <ref> [5, 15] </ref>, are inherently two-dimensional [14, 16] or are limited to removing parts of zero-volume (like internal walls) from CAD models [2]. Bhn and Wozny [3] tll cracks or holes by adding polygons; their method can potentially add a lot of polygons to the model.
Reference: [6] <author> J. D. Foley, A. van Dam, S. K. Feiner, and J. F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Correct representations of three-dimensional objects are useful in a number of applications. For instance, back-face culling, a technique used to render complex models quickly <ref> [6] </ref>, requires that the polygons in the model be consistently and correctly oriented. More sophisticated rendering algorithms perform visibility fl Address: Department of Computer Science, Box 90129, Duke University, Durham, NC 277080129. Email: tmax@cs.duke.edu.
Reference: [7] <author> S. Fortune and C. J. Van Wyk. </author> <title> Ecient exact arithmetic for computational geometry. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 163172, </pages> <year> 1993. </year>
Reference-contexts: In Section 6, we discuss techniques that we plan to implement to overcome these limitations. The tnal section is a brief conclusion. 2 Previous Work In the computational geometry and solid modeling communities, there has been a lot of work on the related problem of robust geometric computing <ref> [7, 12, 13, 23, 25, 26, 29, 31] </ref>. These techniques are not applicable to our problem since they attempt to avoid errors caused by numerical imprecision and cannot clean-up already incorrect data.
Reference: [8] <author> S. J. Fortune, D. M. Gay, B. W. Kernighan, O. Landron, R. A. Valenzuela, and M. H. Wright. </author> <title> WISE design of indoor wireless systems: practical computation and optimization. </title> <journal> In IEEE Computational Science and Engineering, </journal> <volume> volume 2, </volume> <pages> pages 5868, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: Finally, systems that design and optimize wireless communication systems for a closed environment like a building require descriptions of the boundaries of the obstacles in the building <ref> [8, 14] </ref>. Unfortunately, most commonly available models of solid objects, whether created by hand or by using automatic tools, contain geometric and topological aws.
Reference: [9] <author> H. Fuchs, Z. M. Kedem, and B. Naylor. </author> <title> On visible surface generation by a priori tree structures. Comput. Graph., </title> <booktitle> 14(3):124133, 1980. Proc. </booktitle> <address> SIG-GRAPH '80. </address>
Reference-contexts: Note that any partition of R 3 (e.g., a tetrahedral decomposition) will satisfy our purposes, as long as the input polygons lie in the faces of the decomposition. In our current implementation, the cells correspond to the leaves of a Binary Space Partition (BSP) <ref> [9, 22] </ref>. To construct the BSP, we specify a list of splitting planes with which we recursively partition R 3 . Each plane in the list contains one of the polygons in the input; we create only one plane for a set of coplanar polygons.
Reference: [10] <author> S. Gottschalk, M. C. Lin, and D. Manocha. OBB-tree: </author> <title> A hierarchical structure for rapid interference detection. </title> <editor> In Holly Rushmeier, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '96 Proceedings), </booktitle> <volume> volume 30, </volume> <pages> pages 171180, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: These techniques are not applicable to our problem since they attempt to avoid errors caused by numerical imprecision and cannot clean-up already incorrect data. It has been noted in the literature that there are currently no robust techniques to solve the solid reconstruction problem <ref> [10, 17] </ref>. Previous approaches can be divided into two categories: boundary-based approaches and solid-based approaches. Boundary-based techniques determine how the input polygons mesh together to form the boundaries of the objects modeled by them.
Reference: [11] <author> Martin Held, James T. Klosowski, and Joseph S. B. Mitchell. </author> <title> Evaluation of collision detection methods for virtual reality f ly-throughs. </title> <booktitle> In Proc. 7th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 205210, </pages> <year> 1995. </year>
Reference-contexts: Email: funk@bell-labs.com culling by processing the interiors of the solid objects in the model [19, 20, 27]. In the case of interactive collision-detection, some algorithms trst process free space, i.e., the complement of the union of all the obstacles in the environment <ref> [11] </ref>. Such algorithms require a correct representation of the boundary of the obstacles so that they can eectively construct the free space. Similarly, algorithms for lighting simulation process meshes constructed on the boundaries of the objects being lit or analysed [1].
Reference: [12] <author> C. Homann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Mor-gan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction We detne a set of polygons in R 3 to be consistent if the union of the polygons is a closed 2-manifold (see Ho-mann's book <ref> [12] </ref> for a detnition) in which each polygon is oriented with its normal pointing away from the interior of the volume enclosed by the manifold. <p> In Section 6, we discuss techniques that we plan to implement to overcome these limitations. The tnal section is a brief conclusion. 2 Previous Work In the computational geometry and solid modeling communities, there has been a lot of work on the related problem of robust geometric computing <ref> [7, 12, 13, 23, 25, 26, 29, 31] </ref>. These techniques are not applicable to our problem since they attempt to avoid errors caused by numerical imprecision and cannot clean-up already incorrect data.
Reference: [13] <author> C. M. Homann, J. E. Hopcroft, and M. S. Kara-sick. </author> <title> Towards implementing robust geometric computations. </title> <booktitle> In Proc. 4th Annu. ACM Sympos. Com-put. Geom., </booktitle> <pages> pages 106117, </pages> <year> 1988. </year>
Reference-contexts: In Section 6, we discuss techniques that we plan to implement to overcome these limitations. The tnal section is a brief conclusion. 2 Previous Work In the computational geometry and solid modeling communities, there has been a lot of work on the related problem of robust geometric computing <ref> [7, 12, 13, 23, 25, 26, 29, 31] </ref>. These techniques are not applicable to our problem since they attempt to avoid errors caused by numerical imprecision and cannot clean-up already incorrect data.
Reference: [14] <author> Brian W. Kernighan and Christopher J. Van Wyk. </author> <title> Extracting geometrical information from architectural drawings. </title> <booktitle> In Proceedings of the Workshop on Applied Computational Geometry, </booktitle> <pages> pages 8287, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Finally, systems that design and optimize wireless communication systems for a closed environment like a building require descriptions of the boundaries of the obstacles in the building <ref> [8, 14] </ref>. Unfortunately, most commonly available models of solid objects, whether created by hand or by using automatic tools, contain geometric and topological aws. <p> Such an assumption is often invalid since many datasets contain inconsistently oriented polygons. Other algorithms require (a lot of) user intervention [5, 15], are inherently two-dimensional <ref> [14, 16] </ref> or are limited to removing parts of zero-volume (like internal walls) from CAD models [2]. Bhn and Wozny [3] tll cracks or holes by adding polygons; their method can potentially add a lot of polygons to the model.
Reference: [15] <author> Delnaz Khorramabadi. </author> <title> A walk through the planned CS building. </title> <type> Technical Report UCB/CSD 91/652, </type> <institution> Computer Science Dept., University of California at Berkeley, </institution> <year> 1991. </year>
Reference-contexts: Such an assumption is often invalid since many datasets contain inconsistently oriented polygons. Other algorithms require (a lot of) user intervention <ref> [5, 15] </ref>, are inherently two-dimensional [14, 16] or are limited to removing parts of zero-volume (like internal walls) from CAD models [2]. Bhn and Wozny [3] tll cracks or holes by adding polygons; their method can potentially add a lot of polygons to the model. <p> All previous approaches known to the authors fail for this simple example. Boundary-based approaches that traverse the surface of the object <ref> [15] </ref> fail in the areas where polygons are unconnected (along the handle).
Reference: [16] <author> Robert Laurini and Franoise Milleret-Raort. </author> <title> Topological reorganization of inconsistent geographical databases: a step towards their certitca-tion. </title> <journal> Computer and Graphics, </journal> <volume> 18(6):803813, </volume> <year> 1994. </year>
Reference-contexts: Such an assumption is often invalid since many datasets contain inconsistently oriented polygons. Other algorithms require (a lot of) user intervention [5, 15], are inherently two-dimensional <ref> [14, 16] </ref> or are limited to removing parts of zero-volume (like internal walls) from CAD models [2]. Bhn and Wozny [3] tll cracks or holes by adding polygons; their method can potentially add a lot of polygons to the model.
Reference: [17] <author> Ernst Mcke. </author> <title> Comments on the Computational Geometry Impact Task Force Report. </title> <note> At http://www.cs.duke.edu/fljeffe/compgeom/ files/mucke.html, </note> <month> June </month> <year> 1996. </year>
Reference-contexts: These techniques are not applicable to our problem since they attempt to avoid errors caused by numerical imprecision and cannot clean-up already incorrect data. It has been noted in the literature that there are currently no robust techniques to solve the solid reconstruction problem <ref> [10, 17] </ref>. Previous approaches can be divided into two categories: boundary-based approaches and solid-based approaches. Boundary-based techniques determine how the input polygons mesh together to form the boundaries of the objects modeled by them.
Reference: [18] <author> Bruce F. Naylor. SCULPT: </author> <title> an interactive solid modeling tool. </title> <booktitle> In Proc. Graphics Interface '90, </booktitle> <pages> pages 138148, </pages> <year> 1990. </year>
Reference-contexts: Bad meshes can also produce errors in tnite element analysis. Further, basic CAD/CAM operations like computing the mass or volume of an object, solid modeling techniques such as Constructive Solid Geometry that perform set operations on solid objects <ref> [18, 21, 28] </ref>, and rapid prototyp-ing [24], which is used to manufacture objects from CAD designs, need models with continuous and closed boundaries, with no cracks or improper intersections.
Reference: [19] <author> Bruce F. Naylor. </author> <title> Interactive solid geometry via partitioning trees. </title> <booktitle> In Proc. Graphics Interface '92, </booktitle> <pages> pages 1118, </pages> <year> 1992. </year>
Reference-contexts: Email: tmax@cs.duke.edu. This work was done when the author was visiting Bell Laboratories. y Bell Laboratories, 700 Mountain Avenue, 2A-202, Mur-ray Hill, NJ 07974. Email: funk@bell-labs.com culling by processing the interiors of the solid objects in the model <ref> [19, 20, 27] </ref>. In the case of interactive collision-detection, some algorithms trst process free space, i.e., the complement of the union of all the obstacles in the environment [11]. Such algorithms require a correct representation of the boundary of the obstacles so that they can eectively construct the free space.
Reference: [20] <author> Bruce F. Naylor. </author> <title> Partitioning tree image representation and generation from 3D geometric models. </title> <booktitle> In Proc. Graphics Interface '92, </booktitle> <pages> pages 201212, </pages> <year> 1992. </year>
Reference-contexts: Email: tmax@cs.duke.edu. This work was done when the author was visiting Bell Laboratories. y Bell Laboratories, 700 Mountain Avenue, 2A-202, Mur-ray Hill, NJ 07974. Email: funk@bell-labs.com culling by processing the interiors of the solid objects in the model <ref> [19, 20, 27] </ref>. In the case of interactive collision-detection, some algorithms trst process free space, i.e., the complement of the union of all the obstacles in the environment [11]. Such algorithms require a correct representation of the boundary of the obstacles so that they can eectively construct the free space.
Reference: [21] <author> Bruce F. Naylor, John Amanatides, and William C. Thibault. </author> <title> Merging BSP trees yields polyhedral set operations. </title> <booktitle> In Proc. SIGGRAPH '90, volume 24 of Comput. Graph., </booktitle> <pages> pages 115124, </pages> <address> New York, </address> <year> 1990. </year> <note> ACM SIGGRAPH. </note>
Reference-contexts: Bad meshes can also produce errors in tnite element analysis. Further, basic CAD/CAM operations like computing the mass or volume of an object, solid modeling techniques such as Constructive Solid Geometry that perform set operations on solid objects <ref> [18, 21, 28] </ref>, and rapid prototyp-ing [24], which is used to manufacture objects from CAD designs, need models with continuous and closed boundaries, with no cracks or improper intersections.
Reference: [22] <author> R. A. Schumacker, R. Brand, M. Gilliland, and W. Sharp. </author> <title> Study for applying computer-generated images to visual simulation. </title> <type> Technical Report AFHRLTR6914, U.S. </type> <institution> Air Force Human Resources Laboratory, </institution> <year> 1969. </year>
Reference-contexts: Note that any partition of R 3 (e.g., a tetrahedral decomposition) will satisfy our purposes, as long as the input polygons lie in the faces of the decomposition. In our current implementation, the cells correspond to the leaves of a Binary Space Partition (BSP) <ref> [9, 22] </ref>. To construct the BSP, we specify a list of splitting planes with which we recursively partition R 3 . Each plane in the list contains one of the polygons in the input; we create only one plane for a set of coplanar polygons.
Reference: [23] <author> Mark Segal. </author> <title> Using tolerances to guarantee valid polyhedral modeling results. </title> <journal> Computer Graphics, </journal> <volume> 24(4):105114, </volume> <month> August </month> <year> 1990. </year>
Reference-contexts: In Section 6, we discuss techniques that we plan to implement to overcome these limitations. The tnal section is a brief conclusion. 2 Previous Work In the computational geometry and solid modeling communities, there has been a lot of work on the related problem of robust geometric computing <ref> [7, 12, 13, 23, 25, 26, 29, 31] </ref>. These techniques are not applicable to our problem since they attempt to avoid errors caused by numerical imprecision and cannot clean-up already incorrect data.
Reference: [24] <author> Xuejun Sheng and Ingo R. Meier. </author> <title> Generating topological structures for surface models. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 15(6):3541, </volume> <year> 1995. </year>
Reference-contexts: Bad meshes can also produce errors in tnite element analysis. Further, basic CAD/CAM operations like computing the mass or volume of an object, solid modeling techniques such as Constructive Solid Geometry that perform set operations on solid objects [18, 21, 28], and rapid prototyp-ing <ref> [24] </ref>, which is used to manufacture objects from CAD designs, need models with continuous and closed boundaries, with no cracks or improper intersections. <p> However, the most common detciency of many of the previous techniques is that they use scene-relative tolerances to tll over cracks and generate connectivity information about the model <ref> [1, 4, 24] </ref>. Determining the right tolerance for a given model is a dicult task, probably requiring input from the user. Moreover, such approaches do not work well when the size of some error in the input is larger than the smallest feature in the model. <p> All previous approaches known to the authors fail for this simple example. Boundary-based approaches that traverse the surface of the object [15] fail in the areas where polygons are unconnected (along the handle). Proximity-based approaches <ref> [1, 4, 24] </ref> that merge features within some tolerance of each other do not work as no suitable tolerance can be chosen for the entire model because the size of the largest error (a crack between polygons on the handle) is larger than the size of the smallest feature (a bevel
Reference: [25] <author> Jonathan R. Shewchuk. </author> <title> Robust adaptive oating-point geometric predicates. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 141150, </pages> <year> 1996. </year>
Reference-contexts: In Section 6, we discuss techniques that we plan to implement to overcome these limitations. The tnal section is a brief conclusion. 2 Previous Work In the computational geometry and solid modeling communities, there has been a lot of work on the related problem of robust geometric computing <ref> [7, 12, 13, 23, 25, 26, 29, 31] </ref>. These techniques are not applicable to our problem since they attempt to avoid errors caused by numerical imprecision and cannot clean-up already incorrect data.
Reference: [26] <author> K. Sugihara and M. Iri. </author> <title> A solid modelling system free from topological inconsistency. </title> <journal> Journal of Information Processing, </journal> <volume> 12(4):380393, </volume> <year> 1989. </year>
Reference-contexts: In Section 6, we discuss techniques that we plan to implement to overcome these limitations. The tnal section is a brief conclusion. 2 Previous Work In the computational geometry and solid modeling communities, there has been a lot of work on the related problem of robust geometric computing <ref> [7, 12, 13, 23, 25, 26, 29, 31] </ref>. These techniques are not applicable to our problem since they attempt to avoid errors caused by numerical imprecision and cannot clean-up already incorrect data.
Reference: [27] <author> Seth Jared Teller. </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: Email: tmax@cs.duke.edu. This work was done when the author was visiting Bell Laboratories. y Bell Laboratories, 700 Mountain Avenue, 2A-202, Mur-ray Hill, NJ 07974. Email: funk@bell-labs.com culling by processing the interiors of the solid objects in the model <ref> [19, 20, 27] </ref>. In the case of interactive collision-detection, some algorithms trst process free space, i.e., the complement of the union of all the obstacles in the environment [11]. Such algorithms require a correct representation of the boundary of the obstacles so that they can eectively construct the free space. <p> Solid-based algorithms partition R 3 into regions and determine which regions are solid. Thibault and Nay-lor [28] classify a region as solid exactly when there is at least one input polygon lying on the region's boundary whose normal is directed away from the interior of the region, while Teller <ref> [27] </ref> declares a region to be solid only if a majority of the polygons lying on the region's boundary have such normals. Both techniques assume that the orientations of the input polygons are correct. As we have pointed out earlier, this assumption is unwarranted for many datasets. <p> Finally, solid-based approaches <ref> [27, 28] </ref> that decide whether each cell is solid or not based on the orientations of the input polygons along the cell's boundaries fail because the input has many wrongly-oriented polygons.
Reference: [28] <author> William C. Thibault and Bruce F. Naylor. </author> <title> Set operations on polyhedra using binary space partitioning trees. </title> <booktitle> In Proc. SIGGRAPH '87, volume 21 of Comput. Graph., </booktitle> <pages> pages 153162, </pages> <address> New York, </address> <year> 1987. </year> <note> ACM SIGGRAPH. </note>
Reference-contexts: Bad meshes can also produce errors in tnite element analysis. Further, basic CAD/CAM operations like computing the mass or volume of an object, solid modeling techniques such as Constructive Solid Geometry that perform set operations on solid objects <ref> [18, 21, 28] </ref>, and rapid prototyp-ing [24], which is used to manufacture objects from CAD designs, need models with continuous and closed boundaries, with no cracks or improper intersections. <p> In this case, no suitable tolerance can be chosen that both tlls the cracks and preserves small features. Solid-based algorithms partition R 3 into regions and determine which regions are solid. Thibault and Nay-lor <ref> [28] </ref> classify a region as solid exactly when there is at least one input polygon lying on the region's boundary whose normal is directed away from the interior of the region, while Teller [27] declares a region to be solid only if a majority of the polygons lying on the region's <p> Finally, solid-based approaches <ref> [27, 28] </ref> that decide whether each cell is solid or not based on the orientations of the input polygons along the cell's boundaries fail because the input has many wrongly-oriented polygons.
Reference: [29] <author> C. Yap. </author> <title> Towards exact geometric computation. </title> <journal> Comput. Geom. Theory Appl., </journal> <note> 1996. to appear. </note>
Reference-contexts: In Section 6, we discuss techniques that we plan to implement to overcome these limitations. The tnal section is a brief conclusion. 2 Previous Work In the computational geometry and solid modeling communities, there has been a lot of work on the related problem of robust geometric computing <ref> [7, 12, 13, 23, 25, 26, 29, 31] </ref>. These techniques are not applicable to our problem since they attempt to avoid errors caused by numerical imprecision and cannot clean-up already incorrect data.
Reference: [30] <author> David M. Young. </author> <title> Iterative solution of large linear systems. </title> <publisher> Academic Press, </publisher> <address> New York, NY, USA, </address> <year> 1971. </year>
Reference-contexts: In such cases, we take advantage of the fact that each leaf in the BSP has a small number of neighbors. Therefore, M is sparse and we can use an iterative procedure to solve the linear system eciently <ref> [30] </ref>. We would like to point out that it is not dicult to show that the elements of x have values between 1 and 1. In our implementation, we use Gauss-Seidel iterations. Each iteration takes time proportional to the number of links in the adjacency graph.
Reference: [31] <author> J. Yu. </author> <title> Exact Arithmetic Solid Modeling. </title> <type> PhD thesis, </type> <institution> Purdue University, CS Dept., West Lafayette, IN 47907, USA, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: In Section 6, we discuss techniques that we plan to implement to overcome these limitations. The tnal section is a brief conclusion. 2 Previous Work In the computational geometry and solid modeling communities, there has been a lot of work on the related problem of robust geometric computing <ref> [7, 12, 13, 23, 25, 26, 29, 31] </ref>. These techniques are not applicable to our problem since they attempt to avoid errors caused by numerical imprecision and cannot clean-up already incorrect data.
References-found: 31

