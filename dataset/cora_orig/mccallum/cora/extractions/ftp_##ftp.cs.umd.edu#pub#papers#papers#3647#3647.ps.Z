URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3647/3647.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: fsandeep,nick,skelleyg@cs.umd.edu, baras@isr.umd.edu  
Title: A case for in-kernel data streaming over the file subsystem  
Author: Sandeep Gupta John S. Baras Stephen Kelley Nick Roussopoulos 
Date: May 30, 1996  
Address: College Park, MD 20742  
Affiliation: Department of Computer Science  Institute of Systems Research  Institute of Advanced Computer Studies  Institute of Advanced Computer Studies and Department of Computer Science University of Maryland,  
Abstract: This paper maeks a case for a new implementation of in-kernel data streaming in Unix. In particular, we show we can use it to improve the throughput during an important activity: file transfer. The performance improvements are not limited to the aggregate throughput of the system, and we see that it makes lesser demands on the system. This note describes the performance measurements of our implementation of in-kernel data streaming in Unix for large file transfers, and presents a comparison with standard user driven transfers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter Druschel, Mark B. Abbott, Michael Pagels, and Larry L. Peterson. </author> <title> Network Sub-system Design: A Case for an Integrated Data Path. </title> <journal> IEEE Network, </journal> <month> July </month> <year> 1993. </year> <title> y It is missing the code to close the file after the transfer is complete, for the receive transfers to be correctly reflected in the filesystem. This is not a technical problem. </title> <type> 10 </type>
Reference-contexts: This was found to be true too. Consequently this technique should be very useful for popular applications that use file servers viz., ftp, www servers, and distributed databases. A general discussion on in-kernel streaming appears in <ref> [1] </ref>. An earlier implementation [2] shows an alternative way of splicing for Unix. Data streaming through the kernel can be done in several ways. System V streams [6] modules can be used for the same concept.
Reference: [2] <author> Kevin Fall and Joseph Pasquale. </author> <title> Exploiting In-kernel Data Paths to Improve I/O Throughput and CPU Availability. </title> <booktitle> In Winter Conference, </booktitle> <pages> pages 327-333. </pages> <publisher> USENIX, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: This was found to be true too. Consequently this technique should be very useful for popular applications that use file servers viz., ftp, www servers, and distributed databases. A general discussion on in-kernel streaming appears in [1]. An earlier implementation <ref> [2] </ref> shows an alternative way of splicing for Unix. Data streaming through the kernel can be done in several ways. System V streams [6] modules can be used for the same concept. <p> Our implementation has potential for a more general OS service and is extremely compact. On the other hand, in it's current version we consider it early to evaluate it for video data where <ref> [2] </ref> is well tested [3], [5]. Most of this note describes the performance measurements of our implementation of in-kernel data streaming in Unix for large file transfers. Before we could compare the this technique to standard user driven transfers, we needed some meaningful comparison.
Reference: [3] <author> Kevin Fall and Joseph Pasquale. </author> <title> Improving Continuous-media Playback Performance with In-kernel Data Paths. </title> <booktitle> In Multimedia Conference. IEEE, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: Our implementation has potential for a more general OS service and is extremely compact. On the other hand, in it's current version we consider it early to evaluate it for video data where [2] is well tested <ref> [3] </ref>, [5]. Most of this note describes the performance measurements of our implementation of in-kernel data streaming in Unix for large file transfers. Before we could compare the this technique to standard user driven transfers, we needed some meaningful comparison. In the next section we describe the measurement environment.
Reference: [4] <editor> Le*er, et al. </editor> <title> The Design and Implementation of the 4.3 BSD UNIX Operating System. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: An earlier implementation [2] shows an alternative way of splicing for Unix. Data streaming through the kernel can be done in several ways. System V streams [6] modules can be used for the same concept. Our implementation uses the file subsystem abstraction <ref> [4] </ref>, and in contrast to these differs in the applicability and at the user interface. Our implementation has potential for a more general OS service and is extremely compact.
Reference: [5] <author> Joseph Pasquale. </author> <title> I/O System Design for Intensive Multimedia I/O. </title> <booktitle> In Workshop on Workstation Operating Systems, </booktitle> <address> Key Biscayne, FL, 1992. </address> <publisher> IEEE. </publisher>
Reference-contexts: Our implementation has potential for a more general OS service and is extremely compact. On the other hand, in it's current version we consider it early to evaluate it for video data where [2] is well tested [3], <ref> [5] </ref>. Most of this note describes the performance measurements of our implementation of in-kernel data streaming in Unix for large file transfers. Before we could compare the this technique to standard user driven transfers, we needed some meaningful comparison. In the next section we describe the measurement environment.
Reference: [6] <author> Dennis M. Ritchie. </author> <title> A Stream Input-Output System. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 1897-1910, </pages> <year> 1984. </year>
Reference-contexts: A general discussion on in-kernel streaming appears in [1]. An earlier implementation [2] shows an alternative way of splicing for Unix. Data streaming through the kernel can be done in several ways. System V streams <ref> [6] </ref> modules can be used for the same concept. Our implementation uses the file subsystem abstraction [4], and in contrast to these differs in the applicability and at the user interface. Our implementation has potential for a more general OS service and is extremely compact.
References-found: 6

