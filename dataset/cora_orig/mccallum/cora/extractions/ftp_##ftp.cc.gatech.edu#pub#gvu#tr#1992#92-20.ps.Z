URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1992/92-20.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1992/
Root-URL: 
Email: E-mail: stasko@cc.gatech.edu  
Title: Three-Dimensional Computation Visualization  
Author: John T. Stasko 
Keyword: information visualization, 3D computer graphics, program visualization, algorithm information, software understanding  
Address: Atlanta, GA 30332-0280  
Affiliation: Graphics, Visualization, and Usability Center College of Computing Georgia Institute of Technology  
Pubnum: Technical Report GIT-GVU-92-20  
Abstract: Systems supporting the visualization and animation of algorithms, programs, and computations have focused primarily on two-dimensional graphics to date. In this paper we identify the need for three-dimensional graphics in these types of displays, and we describe how 3D imagery best can be used for visualizing computations. We also introduce an animation toolkit that supports simplified development of 3D computation visualizations. A few examples of computation visualizations created with the toolkit are described and included. Our methodology, although specifically applied to computation visualization, is general-purpose and can be used to build a variety of 3D information visualizations and animations. 
Abstract-found: 1
Intro-found: 1
Reference: [Bro87] <author> Frederick P. Brooks. </author> <title> No silver bullet, </title> <journal> Essence and accidents of software engineering. Computer, </journal> <volume> 20(4) </volume> <pages> 10-19, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: Why are 3D graphics desirable for visualizing computations? Briefly, 3D graphics 1) match the 3D data some programs manipulate and 2) provide an extra dimension to encode more information about programs manipulating non-3D data. Frederick Brooks, in his No Silver Bullet paper, gave the following view <ref> [Bro87] </ref>: ...As soon as we attempt to diagram software structure, we find it to constitute not one, but several, general directed graphs superimposed one upon another. The several graphs may represent the flow of control, the flow of data, patterns of dependency, time sequence, name-space relationships.
Reference: [Bro88] <author> Marc H. Brown. </author> <title> Perspectives on algorithm animation. </title> <booktitle> In Proceedings of the ACM SIGCHI '88 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 33-38, </pages> <address> Washington D.C., </address> <month> May </month> <year> 1988. </year>
Reference-contexts: Computation visualizations provide graphical depictions of typically inanimate processes and entities. If a visualization is designed well, viewers will gain an understanding of the inherent process it presents in a way not possible using traditional program understanding methods such as tracing and debugging. The terms algorithm animation <ref> [Bro88] </ref>, program visualization [Mye90], and software visualization [PSB92] all have been used to describe systems seeking to aid program understanding. Our view of the scope of these terms is shown in Figure 1. Algorithm animation (visualization) is the most specific category, focusing on abstractions of an algorithm and its operations.
Reference: [CRM91] <author> Stuart K. Card, George G. Robertson, and Jock Mackinlay. </author> <title> The Information Visualizer, an information workspace. </title> <booktitle> In Proceedings of the ACM SIGCHI '91 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 181-188, </pages> <address> New Or-leans, LA, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: We also introduce a 3D animation methodology and package that is particularly well-suited for visualizing software and that does not require a background in 3D graphics to build animations with it. Although our techniques and our support package could be used to build many different types of information visualizations <ref> [CRM91] </ref>, the focus of this paper is on computation visualization and computation animation. Computation visualization 1 is the use of computer graphics to explain, illustrate, and show how computer hardware and software function. Computation visualizations provide graphical depictions of typically inanimate processes and entities. <p> Three-dimensional graphics have begun to appear in certain information displays, primarily those of data. For example, the Information Visualizer from Xerox Parc <ref> [CRM91, RMC91] </ref> is a system that uses three-dimensional imagery to present structured information such as computer directories and project plans. The system's designers noted that the three-dimensional displays help shift the viewing process from being a cognitive task to being a perception task.
Reference: [Lie89] <author> Henry Lieberman. </author> <title> A three-dimensional representation for program execution. </title> <booktitle> In Proceedings of the 1989 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 111-116, </pages> <address> Rome, Italy, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: Rather, it supports the development of application-specific computation views. One other style of system presents a particular visualization style for all program automatically. Lieberman has presented an innovative 3D program display system, primarily showing Lisp code, that uses color and depth to show recursion and history <ref> [Lie89] </ref>. The Cognitive Coprocessor architecture [RCM89] supports 3D information and user interface displays which could be used to visualize computations. This system gives users access to predefined, highly tailored views.
Reference: [Mye90] <author> Brad A. Myers. </author> <title> Taxonomies of visual programming and program visualization. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(1) </volume> <pages> 97-123, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: If a visualization is designed well, viewers will gain an understanding of the inherent process it presents in a way not possible using traditional program understanding methods such as tracing and debugging. The terms algorithm animation [Bro88], program visualization <ref> [Mye90] </ref>, and software visualization [PSB92] all have been used to describe systems seeking to aid program understanding. Our view of the scope of these terms is shown in Figure 1. Algorithm animation (visualization) is the most specific category, focusing on abstractions of an algorithm and its operations.
Reference: [PSB92] <author> Blaine A. Price, Ian S. Small, and Ronald M. Baecker. </author> <title> A taxonomy of software visualization. </title> <booktitle> In Proceedings of the 25th Hawaii International Conference on System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 597-606, </pages> <address> Kauai, HI, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: If a visualization is designed well, viewers will gain an understanding of the inherent process it presents in a way not possible using traditional program understanding methods such as tracing and debugging. The terms algorithm animation [Bro88], program visualization [Mye90], and software visualization <ref> [PSB92] </ref> all have been used to describe systems seeking to aid program understanding. Our view of the scope of these terms is shown in Figure 1. Algorithm animation (visualization) is the most specific category, focusing on abstractions of an algorithm and its operations.
Reference: [RCM89] <author> George G. Robertson, Stuart K. Card, and Jock Mackinlay. </author> <title> The Cognitive Coprocessor architecture for intercative user interfaces. </title> <booktitle> In Proceedings of the ACM SIGGRAPH '89 Symposium on User Interface Software and Technology, </booktitle> <pages> pages 10-18, </pages> <address> Williamsburg, VA, </address> <month> November </month> <year> 1989. </year>
Reference-contexts: One other style of system presents a particular visualization style for all program automatically. Lieberman has presented an innovative 3D program display system, primarily showing Lisp code, that uses color and depth to show recursion and history [Lie89]. The Cognitive Coprocessor architecture <ref> [RCM89] </ref> supports 3D information and user interface displays which could be used to visualize computations. This system gives users access to predefined, highly tailored views. Our work differs in that our primary purpose is to allow external programmers to develop animations on their own using the system.
Reference: [RMC91] <author> George G. Robertson, Jock Mackinlay, and Stuart K. Card. </author> <title> Cone trees: Animated 3D visualizations of hierarchical information. </title> <booktitle> In Proceedings of the ACM SIGCHI '91 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 189-194, </pages> <address> New Orleans, LA, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Three-dimensional graphics have begun to appear in certain information displays, primarily those of data. For example, the Information Visualizer from Xerox Parc <ref> [CRM91, RMC91] </ref> is a system that uses three-dimensional imagery to present structured information such as computer directories and project plans. The system's designers noted that the three-dimensional displays help shift the viewing process from being a cognitive task to being a perception task.
Reference: [Spe90] <author> Ian Spence. </author> <title> Visual psychophysics of simple graphical elements. </title> <journal> Journal of Experimental Psychology: Human Perception and Performance, </journal> <volume> 16(4) </volume> <pages> 683-692, </pages> <year> 1990. </year>
Reference-contexts: Others disagree and believe that 3D imagery can provide important cognitive cues for the human visual system. Spence found that people can process information from 3D displays such as charts more quickly and just as accurately as from two-dimensional displays <ref> [Spe90] </ref>. He speculated that the attractiveness of the 3D displays may be an important influence in this result. Nonetheless, the capability of 3D computation display is one whose time has come. Hardware capabilities are advancing at rates to make this type of display practical in the near future.
Reference: [Sta90] <author> John T. Stasko. </author> <title> The Path-Transition Paradigm: A practical methodology for adding animation to program interfaces. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(3) </volume> <pages> 213-236, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: In computation visualizations, most objects' actions or motions occur with respect to other objects. The animation methodology we have developed is a combination of a simple path-based method we created for 2D algorithm animation <ref> [Sta90] </ref> and the more sophisticated frame-based animation clock methods of high-end 3D graphics systems. Programmers design views using objects from AnimObject, Location, and Action classes. 7 The AnimObject class provides a simple object modeling capability.
Reference: [Tuf83] <author> E. Tufte. </author> <title> The Visual Display of Quantitative Information. </title> <publisher> Graphics Press, </publisher> <address> Cheshire, CT, </address> <year> 1983. </year> <month> 11 </month>
Reference-contexts: Category 2 promises to involve innovative new views of some tried and true algorithms and programs. But it is debatable whether there is utility in category 1. Tufte believes that when two dimensions are sufficient to portray information, adding a third dimension can be detrimental to the view <ref> [Tuf83] </ref>. Others disagree and believe that 3D imagery can provide important cognitive cues for the human visual system. Spence found that people can process information from 3D displays such as charts more quickly and just as accurately as from two-dimensional displays [Spe90].
Reference: [vD91] <author> Andries van Dam. </author> <title> Escaping Flatland. Plenary Address, </title> <booktitle> UIST '91, </booktitle> <month> November </month> <year> 1991. </year> <title> Hilton Head, SC. 12 each array element. the planes to the left detail a history of the exchanges performed. </title> <type> 13 14 </type>
Reference-contexts: The specific types of displays referenced, however, were 2D views such as flowcharts. Andy van Dam, in his keynote speech at the 1991 UIST conference, implored researchers to "escape flatland" and explore how 3D graphics can be used in user interfaces and information displays <ref> [vD91] </ref>. Three-dimensional graphics have begun to appear in certain information displays, primarily those of data. For example, the Information Visualizer from Xerox Parc [CRM91, RMC91] is a system that uses three-dimensional imagery to present structured information such as computer directories and project plans.
References-found: 12

