URL: http://cs-www.bu.edu/faculty/best/res/papers/rtss91.ps
Refering-URL: http://cs-www.bu.edu/faculty/best/res/Home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Specification and Verification of Real-time Embedded Systems using Time-constrained Reactive Automata  
Author: Azer Bestavros 
Address: Boston, MA 02215  
Affiliation: Department of Computer Science Boston University  
Date: 244-253, Dec 1991.  
Note: In Proceedingsof RTSS'91: The 12th IEEE Real-time Systems Symposium, SanAntonio, TX, pp.  
Abstract: The vital role that real-time embedded systems are playing and will continue to play in our world, coupled with their increasingly complex and critical nature, demand a rigorous and systematic treatment that recognizes their unique requirements. The Time-constrained Reactive Automaton (TRA) is a formal model of computation that admits these requirements. Among its salient features is a fundamental notion of space and time that restricts the expressiveness of the model in a way that allows the specification of only reactive, spontaneous, and causal computations. Using the TRA formalism, there is no conceptual distinction between a system and a property; both are specified as formal objects. This reduces the verification process to that of establishing correspondences namely preservation and implementation relationships between such objects. In this paper, we present the TRA model and briefly overview our experience in using it in the specification and verification of real-time embedded systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23 </volume> <pages> 123-154, </pages> <year> 1984. </year>
Reference-contexts: However, the absence of a unified suitable formal framework that addresses the afforementioned issues severely limited the usefulness of these studies [14]. Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based <ref> [26, 10, 1, 16] </ref>, Petri-net-based [27, 24, 11, 17], state-based [12, 32, 18, 2, 5], and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems. <p> 0 = init 2 . *(init) = Z, (cmd) = fUp; Downg, and (cnt) = Z. *fi = fGo; Waitg. *fl = f (; init (); ); (Go; cmd (c); Wait); (; cnt (i); Go)g, where 2 fi, c 2 (cmd), and i 2 (cnt). * = f (init; cnt; <ref> [0; 1] </ref>; ); (init; cmd; [0; 1]; ); (cnt; cnt; [0; 1]; ); (cnt; cmd; [0; 1]; fWaitg)g. It can be easily shown that both the counter C and the installation Y preserve the property P. <p> *(init) = Z, (cmd) = fUp; Downg, and (cnt) = Z. *fi = fGo; Waitg. *fl = f (; init (); ); (Go; cmd (c); Wait); (; cnt (i); Go)g, where 2 fi, c 2 (cmd), and i 2 (cnt). * = f (init; cnt; <ref> [0; 1] </ref>; ); (init; cmd; [0; 1]; ); (cnt; cnt; [0; 1]; ); (cnt; cmd; [0; 1]; fWaitg)g. It can be easily shown that both the counter C and the installation Y preserve the property P. <p> fUp; Downg, and (cnt) = Z. *fi = fGo; Waitg. *fl = f (; init (); ); (Go; cmd (c); Wait); (; cnt (i); Go)g, where 2 fi, c 2 (cmd), and i 2 (cnt). * = f (init; cnt; <ref> [0; 1] </ref>; ); (init; cmd; [0; 1]; ); (cnt; cnt; [0; 1]; ); (cnt; cmd; [0; 1]; fWaitg)g. It can be easily shown that both the counter C and the installation Y preserve the property P. From Lemma-2, it follows that the closed system resulting from embedding C in Y, namely the composition Y fi C, implements P. <p> Z. *fi = fGo; Waitg. *fl = f (; init (); ); (Go; cmd (c); Wait); (; cnt (i); Go)g, where 2 fi, c 2 (cmd), and i 2 (cnt). * = f (init; cnt; <ref> [0; 1] </ref>; ); (init; cmd; [0; 1]; ); (cnt; cnt; [0; 1]; ); (cnt; cmd; [0; 1]; fWaitg)g. It can be easily shown that both the counter C and the installation Y preserve the property P. From Lemma-2, it follows that the closed system resulting from embedding C in Y, namely the composition Y fi C, implements P.
Reference: [2] <author> Rajeev Alur, Costas Courcoubetis, and David Dill. </author> <title> Model-checking for real-time systems. </title> <booktitle> In Proceedings of the 5th annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> Philadelphia, Pensylvania, June 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based [27, 24, 11, 17], state-based <ref> [12, 32, 18, 2, 5] </ref>, and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems. Issues of spontaneity, causality, spacial locality, and reactivity are often disregarded, thus making real-time computing research physically unrealistic. <p> respect to real time, but have to be implemented relying on perceived time. 1 Actually both spontaneity and causality are directly related to the past and future light cones of an event in space-time [15]. 2.2 Basic definitions We adopt a continuous model of time similar to that used in <ref> [2, 19] </ref>. We represent any point in time by a nonnegative real t 2 &lt;. Time intervals are defined by specifying their end-points which are drawn from the set of nonnegative rationals Q &lt;. A time interval is viewed as a traditional set over nonnegative real numbers.
Reference: [3] <author> J. Baeten and J. Bergstra. </author> <title> Real time process algebra. </title> <journal> Formal Aspects of Computing, </journal> <volume> 3(2) </volume> <pages> 142-188, </pages> <year> 1991. </year>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based [27, 24, 11, 17], state-based [12, 32, 18, 2, 5], and process-algebra-based <ref> [28, 13, 3] </ref>. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems. Issues of spontaneity, causality, spacial locality, and reactivity are often disregarded, thus making real-time computing research physically unrealistic.
Reference: [4] <author> Azer Bestavros. </author> <title> A new environment for developing real-time embedded systems. </title> <institution> Internal Report Department of Computer Science, Harvard University, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: In particular, we used it to specify and verify asynchronous circuits <ref> [4] </ref> and to specify, analyze and simulate behaviors of autonomous creatures [6, 7]. To close up the gap between formality and practicality, the development cycle of embedded applications has to be supported in its entirety. This requires that systems implementation and not only specifica tion, validation and verification be addressed.
Reference: [5] <author> Azer Bestavros. </author> <title> The IOTA: A model for real-time parallel computation. </title> <booktitle> In Proceedings of TAU'90: The 1990 ACM International Workshop on Timing issues in the Specification and Synthesis of Digital Systems, </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based [27, 24, 11, 17], state-based <ref> [12, 32, 18, 2, 5] </ref>, and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems. Issues of spontaneity, causality, spacial locality, and reactivity are often disregarded, thus making real-time computing research physically unrealistic. <p> In this paper, we briefly overview the TRA model and its use in the specification and verification of real-time embedded systems. 2 The TRA Model The TRA model has evolved from our earlier work in <ref> [5] </ref> extending Lynch's IOA model [21, 20] to suit embedded and time-constrained computation. 2.1 Novelties The TRA model differs from others in that it does not allow the specification of systems that are not reactive. <p> This led to the abandoning of the idea of partitioning a system into components in our earlier model proposed in <ref> [5] </ref>. Lynch and Vaandrager [22] followed suit in their recent modification of the model proposed in [32]. In the TRA model we use system components to represent what can be termed as spacial locality. <p> Also, the relationships between the behaviors and spacial properties of the composed TRA and those of its constituent TRAs are established. In particular, we prove that the sets of proper, spontaneous, and causal TRAs are closed under composition. The TRA composition operation is more general than those reported in <ref> [21, 32, 5] </ref> in that it allows the specification of both parallel and sequential composition.
Reference: [6] <author> Azer Bestavros. </author> <title> TRA-based real-time executable specification using CLEOPATRA. </title> <booktitle> In Proceedings of the 10th Annual Rochester Forth Conference on Embedded Systems, </booktitle> <address> Rochester, NY, </address> <month> June </month> <year> 1990. </year> <month> (revised May </month> <year> 1991). </year>
Reference-contexts: In particular, we used it to specify and verify asynchronous circuits [4] and to specify, analyze and simulate behaviors of autonomous creatures <ref> [6, 7] </ref>. To close up the gap between formality and practicality, the development cycle of embedded applications has to be supported in its entirety. This requires that systems implementation and not only specifica tion, validation and verification be addressed.
Reference: [7] <author> Azer Bestavros. </author> <title> Planning for embeddedsystems: A real-time prospective. </title> <booktitle> In Proceedings of AIRTC-91: The 3rd IFAC Workshop on Artificial Intelligence in Real Time Control, Napa/Sonoma Region, </booktitle> <address> CA, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: In that respect, the TRA model proved to be instrumental in the specification, verification, and simulation of asynchronous circuit designs, reactive control systems [9], and behavioral planning <ref> [7] </ref>. <p> In particular, we used it to specify and verify asynchronous circuits [4] and to specify, analyze and simulate behaviors of autonomous creatures <ref> [6, 7] </ref>. To close up the gap between formality and practicality, the development cycle of embedded applications has to be supported in its entirety. This requires that systems implementation and not only specifica tion, validation and verification be addressed.
Reference: [8] <author> Azer Bestavros. </author> <title> Time-constrained Reactive Automata: A novel development methodology for embedded real-time systems. </title> <type> PhD thesis, </type> <institution> Harvard University, Division of Applied Sciences (Department of Computer Science), Cambridge, Massachusetts, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems. Issues of spontaneity, causality, spacial locality, and reactivity are often disregarded, thus making real-time computing research physically unrealistic. In <ref> [8] </ref>, we proposed the Time-constrained Reactive Automata (TRA) model as a real-time computing formalism that recognizes the physical aspects of embedded systems. In that respect, the TRA model proved to be instrumental in the specification, verification, and simulation of asynchronous circuit designs, reactive control systems [9], and behavioral planning [7]. <p> We extend our notion of conflict to channels as follows. Two channels 1 and 2 conflict if at least one action from ( 1 ) and one action from ( 2 ) conflict. The formal definitions for "enables", "disables", and "affects" were given in <ref> [8] </ref>. Obviously, each one of these three relationships depicts one form of computational dependency that emerges due to sharing information about state. For two local actions to conflict, their respective channels must be under the control of a single component of the TRA. <p> Five conditions namely, le gality, spontaneity, safety, causality, and consistency - have to be met for such a succession to occur. These conditions are formally defined in <ref> [8] </ref>. The legality condition insures that the computational step that changes the state of the TRA from to 0 as a result of action 0 is defined. The spontaneity condition allows the occurence of simultaneous events only if they are independent; time has to ellapse for dependencies to be manifested. <p> In this section we examine such an operation, namely composition. Other operations (for example hiding and renaming) were presented in <ref> [8] </ref>. The composition of a countable collection of compatible TRAs, fA i : i 2 Ig, is a new TRA A = A 0 fi A 1 fi : : : fi A i fi : : : = i2I A i . <p> A computational step of the composed TRA is necessarily a step of one of its 3 Without loss of generality, we assume that TRA to be A 0 . components. Similarily the time-constrained causal re-lationships of the composed TRA are exactly those of the component TRAs. In <ref> [8] </ref>, the formal construction of the sextuple representation of a composition is given. Also, the relationships between the behaviors and spacial properties of the composed TRA and those of its constituent TRAs are established. <p> Once the property P is violated, A is under no obligation to behave in any specific way. That is, the TRA A behaves according to the property P until the environment, or possibly another TRA composed with A, violates that property. In <ref> [8] </ref>, this notion of property preservation is formally defined by imposing restrictions on the set of behaviors in behs (A) based on the set of behaviors in behs (P). The following Lemma establishes that property preservation is closed under composition.
Reference: [9] <author> Azer Bestavros, James Clark, and Nicola Ferrier. </author> <title> Management of sensori-motor activity in mobile robots. </title> <booktitle> In Proceedings of the 1990 IEEE International Conference on Robotics & Automation, </booktitle> <address> Cincinati, Ohio, May 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: In [8], we proposed the Time-constrained Reactive Automata (TRA) model as a real-time computing formalism that recognizes the physical aspects of embedded systems. In that respect, the TRA model proved to be instrumental in the specification, verification, and simulation of asynchronous circuit designs, reactive control systems <ref> [9] </ref>, and behavioral planning [7]. <p> We are currently developing a compiler that would make of CLEOPATRA a real-time programming language. The testbed for our methodology is a robotic experiment, which involves the coordination of motor requests to perform manipulative tasks using directed-vision feedback. An initial report on that experiment can be found in <ref> [9] </ref>. 5 Conclusion Previous studies in modeling real-time computing have focussed on adding the notion of time to formal modeling techniques of traditional systems without regard to the physical realities of the modeled systems.
Reference: [10] <author> Gregor Bochmann. </author> <title> Hardware specification with temporal logic: An example. </title> <journal> IEEE transactions on Computers, </journal> <volume> C-31(3), </volume> <month> March </month> <year> 1982. </year>
Reference-contexts: However, the absence of a unified suitable formal framework that addresses the afforementioned issues severely limited the usefulness of these studies [14]. Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based <ref> [26, 10, 1, 16] </ref>, Petri-net-based [27, 24, 11, 17], state-based [12, 32, 18, 2, 5], and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems.
Reference: [11] <author> J. E. Coolahan and N. Roussopoulos. </author> <title> Timing requirements for time-driven systems using augmented petri nets. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-9:603-616, </volume> <month> September </month> <year> 1983. </year>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based <ref> [27, 24, 11, 17] </ref>, state-based [12, 32, 18, 2, 5], and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems.
Reference: [12] <author> B. Dasarathy. </author> <title> Timing constraints of real-time systems: Control for expressing them, Method for validating them. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 11(1), </volume> <month> January </month> <year> 1985. </year>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based [27, 24, 11, 17], state-based <ref> [12, 32, 18, 2, 5] </ref>, and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems. Issues of spontaneity, causality, spacial locality, and reactivity are often disregarded, thus making real-time computing research physically unrealistic.
Reference: [13] <author> R. Gerber, I. Lee, and A. Zwarico. </author> <title> A complete axiomatization of real-time processes. </title> <type> CIS, </type> <institution> University of Pennsylvania Submitted for publication, </institution> <month> February </month> <year> 1989. </year>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based [27, 24, 11, 17], state-based [12, 32, 18, 2, 5], and process-algebra-based <ref> [28, 13, 3] </ref>. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems. Issues of spontaneity, causality, spacial locality, and reactivity are often disregarded, thus making real-time computing research physically unrealistic.
Reference: [14] <author> Asis Goswami and Mathai Joseph. </author> <title> What's "real" about real-time systems? Research Report 123, </title> <institution> Department of Computer Science, University of Warwick, </institution> <month> April </month> <year> 1988. </year>
Reference-contexts: However, the absence of a unified suitable formal framework that addresses the afforementioned issues severely limited the usefulness of these studies <ref> [14] </ref>. Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based [27, 24, 11, 17], state-based [12, 32, 18, 2, 5], and process-algebra-based [28, 13, 3].
Reference: [15] <author> Stephen W. Hawking. </author> <title> A brief history of Time: From the Big Bang to Black Holes. </title> <publisher> Bantam Books, </publisher> <month> April </month> <year> 1988. </year>
Reference-contexts: and perceived time is important when dealing with embedded applications where specifications are usually given with respect to real time, but have to be implemented relying on perceived time. 1 Actually both spontaneity and causality are directly related to the past and future light cones of an event in space-time <ref> [15] </ref>. 2.2 Basic definitions We adopt a continuous model of time similar to that used in [2, 19]. We represent any point in time by a nonnegative real t 2 &lt;. Time intervals are defined by specifying their end-points which are drawn from the set of nonnegative rationals Q &lt;. <p> This intuition is inspired from physical systems, where events are characterized and distinguishable by their time-space coordinates <ref> [15] </ref>. 2.5 TRA Executions and Behaviors In standard automata theory, there is no distinction between choosing a transition and firing it; both of them occur instantaneously. In the TRA model, a distinction is made whereby choosing (scheduling) a transition and executing (commiting) that transition are not necessarily instantaneous activities.
Reference: [16] <author> Farnam Jahanian and Aloysius Mok. </author> <title> Safety analysis of timing properties in real-time systems. </title> <journal> IEEE Transaction on Software Engineering, </journal> <volume> 12(9) </volume> <pages> 890-904, </pages> <year> 1986. </year>
Reference-contexts: However, the absence of a unified suitable formal framework that addresses the afforementioned issues severely limited the usefulness of these studies [14]. Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based <ref> [26, 10, 1, 16] </ref>, Petri-net-based [27, 24, 11, 17], state-based [12, 32, 18, 2, 5], and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems.
Reference: [17] <author> Nancy Leveson and Janice Stolzy. </author> <title> Safety analysis using Petri Nets. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(3) </volume> <pages> 386-97, </pages> <month> March </month> <year> 1987. </year>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based <ref> [27, 24, 11, 17] </ref>, state-based [12, 32, 18, 2, 5], and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems.
Reference: [18] <author> Harry Lewis. </author> <title> Finite-state analysis of asynchronous circuits with bounded temporal uncertainty. </title> <type> Technical Report TR-15-89, </type> <institution> Department of computer science, Harvard University, </institution> <address> Cambridge, MA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based [27, 24, 11, 17], state-based <ref> [12, 32, 18, 2, 5] </ref>, and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems. Issues of spontaneity, causality, spacial locality, and reactivity are often disregarded, thus making real-time computing research physically unrealistic.
Reference: [19] <author> Harry Lewis. </author> <title> A logic of concrete time intervals. </title> <booktitle> In Proceedings of the 5th annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> Philadelphia, PA, June 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: respect to real time, but have to be implemented relying on perceived time. 1 Actually both spontaneity and causality are directly related to the past and future light cones of an event in space-time [15]. 2.2 Basic definitions We adopt a continuous model of time similar to that used in <ref> [2, 19] </ref>. We represent any point in time by a nonnegative real t 2 &lt;. Time intervals are defined by specifying their end-points which are drawn from the set of nonnegative rationals Q &lt;. A time interval is viewed as a traditional set over nonnegative real numbers.
Reference: [20] <author> Nancy Lynch and Kenneth Goldman. </author> <title> 6.852 distributed algo rithms lecture notes: The I/O Automata. </title> <type> Technical report, </type> <institution> Laboratory of Computer Science, MIT, </institution> <address> Cambridge, MA, </address> <month> Fall </month> <year> 1988. </year>
Reference-contexts: In this paper, we briefly overview the TRA model and its use in the specification and verification of real-time embedded systems. 2 The TRA Model The TRA model has evolved from our earlier work in [5] extending Lynch's IOA model <ref> [21, 20] </ref> to suit embedded and time-constrained computation. 2.1 Novelties The TRA model differs from others in that it does not allow the specification of systems that are not reactive. A system is reactive if it cannot block the occurence of events not under its control. <p> Figure-5 illustrates that correspondence. Our approach in establishing a mapping between a specification and its implementation is similar to the possibilities mappings proposed in <ref> [21, 20] </ref> and the prophecy mappings proposed in [25], except that it is complicated here by the need to preserve the timing constraints of the specification TRA. The following lemma establishes the required sufficient conditions.
Reference: [21] <author> Nancy Lynch and Mark Tuttle. </author> <title> An introduction to In put/Output Automata. </title> <type> Technical Report MIT/LCS/TM-373, </type> <institution> MIT, Cambridge, Massachusetts, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: In this paper, we briefly overview the TRA model and its use in the specification and verification of real-time embedded systems. 2 The TRA Model The TRA model has evolved from our earlier work in [5] extending Lynch's IOA model <ref> [21, 20] </ref> to suit embedded and time-constrained computation. 2.1 Novelties The TRA model differs from others in that it does not allow the specification of systems that are not reactive. A system is reactive if it cannot block the occurence of events not under its control. <p> A system is reactive if it cannot block the occurence of events not under its control. A sufficient condition for reactiveness is the input enabling property proposed in <ref> [21] </ref>. The TRA model is input enabled. It distinguishes clearly between environment-controlled actions, which cannot be restricted or constrained, and locally-controlled actions, which can be scheduled and disabled. Communication is asynchronous and non-blocking. An important aspect of the TRA model is its notion of space in relation to time. <p> For the remainder of this paper, it will be assumed that any TRA is proper unless otherwise stated. The notion of system components we are presenting here is novel and entirely different from that used in untimed models to express fairness <ref> [21] </ref> by requiring that, in an infinite execution, each of the system's components gets infinitely many chances to perform its locally-controlled actions. In timed systems, the major concern is safe and not necessarily fair executions [29]. <p> Since statuses and internal events are invisible from outside a TRA, we will often be interested only in external events. We follow an approach similar to that adopted in <ref> [21] </ref> by defining fi to be a behavior of a TRA A, if it consists of all the external events appearing in some execution e of A. We denote the set of all the possible behaviors of a TRA A by behs (A). <p> Also, the relationships between the behaviors and spacial properties of the composed TRA and those of its constituent TRAs are established. In particular, we prove that the sets of proper, spontaneous, and causal TRAs are closed under composition. The TRA composition operation is more general than those reported in <ref> [21, 32, 5] </ref> in that it allows the specification of both parallel and sequential composition. <p> Obviously, in these restricted environments, the aforementioned safety condition can be indeed certified. A useful notion for discussing the aforementioned restrictions is that of a TRA preserving a property. This notion was introduced in <ref> [21] </ref> to study fair behaviors of discrete event systems using the IOA model. In this section we generalize this notion to suit the TRA model. A property P defines a possibly infinite set of sequences over a given alphabet (or signature). <p> Figure-5 illustrates that correspondence. Our approach in establishing a mapping between a specification and its implementation is similar to the possibilities mappings proposed in <ref> [21, 20] </ref> and the prophecy mappings proposed in [25], except that it is complicated here by the need to preserve the timing constraints of the specification TRA. The following lemma establishes the required sufficient conditions.
Reference: [22] <author> Nancy Lynch and Frits Vaandrager. </author> <title> Forward and backward simulations for timing-based systems. Unpublished notes, </title> <institution> Massachusetts Institute of Technology Laboratory for Computer Science, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: This led to the abandoning of the idea of partitioning a system into components in our earlier model proposed in [5]. Lynch and Vaandrager <ref> [22] </ref> followed suit in their recent modification of the model proposed in [32]. In the TRA model we use system components to represent what can be termed as spacial locality. <p> They are "distinct" in that they may be separated in time. As a matter of fact, a scheduled transition does not necessarily have to be committed; it can be abandoned due to unforeseable conditions. The distinction between the two activities 2 Such executions were called admissible in <ref> [22] </ref> is also pronounced in the way the TRA model differentiates between input and local events. Input events are uncontrollable; they are not scheduled. Local events are. The state of a TRA at an arbitrary point in time is not sufficient to construct its future behavior.
Reference: [23] <author> Damian Lyons and Michael Arbib. </author> <title> A formal model of computation for sensory-based robotics. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 5(3) </volume> <pages> 280-293, </pages> <year> 1989. </year>
Reference-contexts: Through appropriate composition, our model is capable of representing all of the composition operations in <ref> [23] </ref>. 3 TRA-based Verification Verification is the process of establishing the correctness of a system by proving that it preserves certain desired properties.
Reference: [24] <author> P. M. Merlin and D. J. </author> <title> Faber. Recoverability of communication protocols: Implications of a theoretical study. </title> <journal> IEEE Transactions on Communication, </journal> <volume> COM-24:1036-1043, </volume> <month> September </month> <year> 1976. </year>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based <ref> [27, 24, 11, 17] </ref>, state-based [12, 32, 18, 2, 5], and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems.
Reference: [25] <author> Michael Merritt. </author> <title> Completness theorems for automata, </title> <month> May </month> <year> 1989. </year> <note> In REX Workshop. </note>
Reference-contexts: Figure-5 illustrates that correspondence. Our approach in establishing a mapping between a specification and its implementation is similar to the possibilities mappings proposed in [21, 20] and the prophecy mappings proposed in <ref> [25] </ref>, except that it is complicated here by the need to preserve the timing constraints of the specification TRA. The following lemma establishes the required sufficient conditions.
Reference: [26] <author> Amir Pnueli. </author> <title> The temporal logic of programs. </title> <booktitle> In Proc-cedings of the IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <month> November </month> <year> 1977. </year>
Reference-contexts: However, the absence of a unified suitable formal framework that addresses the afforementioned issues severely limited the usefulness of these studies [14]. Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based <ref> [26, 10, 1, 16] </ref>, Petri-net-based [27, 24, 11, 17], state-based [12, 32, 18, 2, 5], and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems.
Reference: [27] <author> C. Ramchandani. </author> <title> Analysis of asynchronous concurrent systems by timed Petri nets. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <address> Cambridge, MA, </address> <year> 1974. </year> <note> Project MAC Report MAC-TR-120. </note>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based <ref> [27, 24, 11, 17] </ref>, state-based [12, 32, 18, 2, 5], and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems.
Reference: [28] <author> G. M. Reed and A. W. Roscoe. </author> <title> A timed model for Ccom-municating Sequential Processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 58 </volume> <pages> 249-261, </pages> <year> 1988. </year>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based [27, 24, 11, 17], state-based [12, 32, 18, 2, 5], and process-algebra-based <ref> [28, 13, 3] </ref>. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems. Issues of spontaneity, causality, spacial locality, and reactivity are often disregarded, thus making real-time computing research physically unrealistic.
Reference: [29] <author> Fred Schneider. </author> <title> Critical (of) issues in real-time systems: A position paper. </title> <type> Technical Report 88-914, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, NY, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: In timed systems, the major concern is safe and not necessarily fair executions <ref> [29] </ref>. Even if required, fairness can be enforced by treating it as a safety property; liveness properties can be handled in infinite execution by requiring time to grow unboundedly. 2 .
Reference: [30] <author> Ramavarapu Sreenivas. </author> <title> Towards a system theory for inter connected Condition/Event systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: In particular, if an output occurs simultaneously with (say) an input transition, the same output could have been produced without the simultaneous input transition <ref> [30] </ref>. Simultaneity is, thus, a mere coincidence; the output event could have occured spontaneously even if the input transition was delayed. The TRA model enforces spontaneity by requiring that simultaneously occuring events be independent; time has to necessarily advance to observe dependencies.
Reference: [31] <author> John Stankovic and Krithi Ramamritham, </author> <title> editors. Hard Real-Time Systems. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: This led to a body of research on real-time computing, which encompasses issues of specification techniques, analysis and validation, formal verification, programming languages, development tools, scheduling, and operating systems <ref> [31] </ref>. However, the absence of a unified suitable formal framework that addresses the afforementioned issues severely limited the usefulness of these studies [14].
Reference: [32] <author> Mark Tuttle, Michael Meritt, and Francesmary Modugno. </author> <title> Time constrained automata. </title> <address> MIT/LCS, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: Previous studies in modeling real-time systems have focussed on adding the notion of time to the formal modeling techniques of traditional systems, namely logic-based [26, 10, 1, 16], Petri-net-based [27, 24, 11, 17], state-based <ref> [12, 32, 18, 2, 5] </ref>, and process-algebra-based [28, 13, 3]. In all of these studies very little emphasis, if any, was put on the physical nature of the modeled systems. Issues of spontaneity, causality, spacial locality, and reactivity are often disregarded, thus making real-time computing research physically unrealistic. <p> This led to the abandoning of the idea of partitioning a system into components in our earlier model proposed in [5]. Lynch and Vaandrager [22] followed suit in their recent modification of the model proposed in <ref> [32] </ref>. In the TRA model we use system components to represent what can be termed as spacial locality. <p> Also, the relationships between the behaviors and spacial properties of the composed TRA and those of its constituent TRAs are established. In particular, we prove that the sets of proper, spontaneous, and causal TRAs are closed under composition. The TRA composition operation is more general than those reported in <ref> [21, 32, 5] </ref> in that it allows the specification of both parallel and sequential composition.
Reference: [33] <author> Niklaus Wirth. </author> <title> Toward a discipline of real-time program ming. </title> <journal> Communications of the ACM, </journal> <volume> 20(8), </volume> <month> August </month> <year> 1977. </year>
Reference-contexts: The sustained demands of the external environments in which such systems operate pose relatively rigid and urgent requirements on their performance. These requirements are usually stated as constraints on the real-time behavior of these systems. Wirth <ref> [33] </ref> singled out this processing-time dependency as the one aspect that differentiates embedded systems from other sequential and parallel systems. This led to a body of research on real-time computing, which encompasses issues of specification techniques, analysis and validation, formal verification, programming languages, development tools, scheduling, and operating systems [31].
Reference: [34] <author> Pamela Zave. </author> <title> An operational approach to requirements specification for embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 8(3), </volume> <month> May </month> <year> 1982. </year>
Reference-contexts: A in . 2. A i preserves P, for all i 2 I. 4 Defining a property by specifying it as a TRA has been termed in <ref> [34] </ref> as the functional specification approach, as opposed to the conventional black-box approach. A special case of particular interest occurs when the composition in Lemma-2 is closed. A TRA is closed if it has no input channels except the start channel.
References-found: 34

