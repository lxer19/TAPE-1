URL: http://www.cs.toronto.edu/~csc2532h/metatheory.ps.Z
Refering-URL: http://www.cs.toronto.edu/~csc2532h/
Root-URL: http://www.cs.toronto.edu
Email: pirri@assi.dis.uniroma1.it  reiter@ai.toronto.edu  
Title: Some Contributions to the Metatheory of the Situation Calculus  
Author: Fiora Pirri Ray Reiter 
Date: February 19, 1998  
Address: Via Salaria 113, 00198 Roma, Italy  Toronto, Canada M5S 1A4  
Affiliation: Dipartimento di Informatica e Sistemistica Universita degli Studi di Roma "La Sapienza"  Department of Computer Science University of Toronto  
Abstract: We focus on a rich axiomatization for actions in the situation calculus that includes, among other features, a solution to the frame problem for deterministic actions. Our work is foundational in nature, directed at simplifying the entailment problem for these axioms. Specifically, we make four contributions to the metatheory of situation calculus axiomatizations of dynamical systems: 1. We prove that the above-mentioned axiomatization for actions has a relative sat-isfiability property; the full axiomatization is satisfiable iff a small subset of it 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Bertossi, M. Arenas, and C. Ferretti. SCDBR: </author> <title> An automated reasoner for specifications of database updates. </title> <journal> Journal of Intelligent Information Systems, </journal> <note> 1997. To appear. </note>
Reference-contexts: But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. <ref> [12, 4, 11, 26, 25, 1, 9, 10] </ref>). In parallel with these developments of its applications, there have emerged axiomatizations for the situation calculus, and explorations of some of their metamathematical and computational properties (e.g. [24, 15]).
Reference: [2] <author> H.B. Enderton. </author> <title> A Mathematical Introduction to Logic. </title> <publisher> Academic Press, </publisher> <year> 1972. </year>
Reference-contexts: Because all functions of L sitcalc other than S 0 and do takes values of sort action [ object, and because S adj and S have the same action and object domains, this specification is well defined. Remark 2 o is a homomorphism (Enderton <ref> [2] </ref>) from S adj onto S pr for the reduced language L sitcalc without the predicate symbol &lt;. In other words, o preserves all relations between S adj and S pr , except for &lt;, and it preserves all functions. <p> Proof: By the homomorphism theorem for first order logic (Enderton <ref> [2] </ref>).
Reference: [3] <author> M. Gelfond, V. Lifschitz, and A. Rabinov. </author> <title> What are the limitations of the situation calculus? In Working Notes, </title> <booktitle> AAAI Spring Symposium Series on the Logical Formalization of Commonsense Reasoning, </booktitle> <pages> pages 59-69, </pages> <year> 1991. </year>
Reference-contexts: It is included in the standard material of every introductory course on AI, and it is the language of choice for investigations of various technical problems that arise in theorizing about actions and their effects (e.g. [13], <ref> [3] </ref>, [8]). But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. [12, 4, 11, 26, 25, 1, 9, 10]).
Reference: [4] <author> G. De Giacomo, Y. Lesperance, and H.J. Levesque. </author> <title> Reasoning about concurrent execution, prioritized interrupts, </title> <booktitle> and exogenous actions in the situation calculus. In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1221-1226, </pages> <address> Nagoya, Japan, </address> <year> 1997. </year>
Reference-contexts: But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. <ref> [12, 4, 11, 26, 25, 1, 9, 10] </ref>). In parallel with these developments of its applications, there have emerged axiomatizations for the situation calculus, and explorations of some of their metamathematical and computational properties (e.g. [24, 15]). <p> It would be natural to try to obtain similar results for other classes of problems. One such example that is also of some theoretical and practical interest concerns CONGOLOG <ref> [4] </ref>, a very rich extension of GOLOG that supports concurrent execution with prioritized interrupts and exogenous actions. Is there a -elimination theorem for this programming language?
Reference: [5] <author> R. Goldblatt. </author> <title> Logics of Time and Computation. CSLI Lecture Notes No. 7. Center for the Study of Language and Information, </title> <address> Stanford Univers ity, Stanford, CA, 2nd edition, </address> <year> 1987. </year>
Reference-contexts: Except for procedures, the above macro approach to defining the semantics of GOLOG draws considerably from dynamic logic <ref> [5] </ref>. In effect, it reifies as situations in the object language of the situation calculus, the possible worlds with which the semantics of dynamic logic is defined. The macro definition for GOLOG procedures corresponds to the more usual Scott-Strachey least fixed-point definition in standard programming language semantics [28].
Reference: [6] <author> C.C. Green. </author> <title> Theorem proving by resolution as a basis for question-answering systems. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <pages> pages 183-205. </pages> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: For example, Green's <ref> [6] </ref> classical formulation of planning in AI is as a deduction problem: To obtain a plan to achieve a goal G, establish that D j= (9s)G (s). Any binding for s obtained as a side effect of a proof is a plan for G.
Reference: [7] <author> A. R. Haas. </author> <title> The case for domain-specific frame axioms. </title> <editor> In F. M. Brown, editor, </editor> <booktitle> The frame problem in artificial intelligence. Proceedings of the 1987 workshop, </booktitle> <pages> pages 343-348, </pages> <address> Los Altos, California, 1987. </address> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA. </address>
Reference-contexts: OE f in the successor state axioms for functional fluents guarantees the Markov property: The value of a functional fluent in a successor situation is determined entirely by properties of the current situation, and not by any other situation. 6 Following earlier ideas of Pednault [19], and Haas and Schubert <ref> [7, 27] </ref>, Reiter [23] shows how to solve the frame problem for deterministic actions. 4 The resulting solution yields axioms with exactly the syntactic form of successor state axioms, which is why in this paper we focus on these.
Reference: [8] <author> S. Hanks and D. McDermott. </author> <title> Default reasoning, nonmonotonic logics, and the frame problem. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI'86), </booktitle> <pages> pages 328-333, </pages> <year> 1986. </year>
Reference-contexts: It is included in the standard material of every introductory course on AI, and it is the language of choice for investigations of various technical problems that arise in theorizing about actions and their effects (e.g. [13], [3], <ref> [8] </ref>). But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. [12, 4, 11, 26, 25, 1, 9, 10]).
Reference: [9] <author> M. Jenkin, Y. Lesperance, H.J. Levesque, F. Lin, J. Lloyd, D. Marcu, R. Reiter, R.B. Scherl, and K. Tam. </author> <title> A logical approach to portable high-level robot programming. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1996. </year>
Reference-contexts: But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. <ref> [12, 4, 11, 26, 25, 1, 9, 10] </ref>). In parallel with these developments of its applications, there have emerged axiomatizations for the situation calculus, and explorations of some of their metamathematical and computational properties (e.g. [24, 15]).
Reference: [10] <author> Y. Lesperance, H.J. Levesque, and R. Reiter. </author> <title> A situation calculus approach to modeling and programming agents. </title> <editor> In A. Rao and M. Wooldridge, editors, </editor> <title> Foundations and Theories of Rational Agency, </title> <note> 1997. In press. </note>
Reference-contexts: But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. <ref> [12, 4, 11, 26, 25, 1, 9, 10] </ref>). In parallel with these developments of its applications, there have emerged axiomatizations for the situation calculus, and explorations of some of their metamathematical and computational properties (e.g. [24, 15]).
Reference: [11] <author> H.J. Levesque. </author> <booktitle> What is planning in the presence of sensing? In Proceedings of the National Conference on Artificial Intelligence (AAAI'96), </booktitle> <pages> pages 1139-1146, </pages> <year> 1996. </year>
Reference-contexts: But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. <ref> [12, 4, 11, 26, 25, 1, 9, 10] </ref>). In parallel with these developments of its applications, there have emerged axiomatizations for the situation calculus, and explorations of some of their metamathematical and computational properties (e.g. [24, 15]).
Reference: [12] <author> H.J. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. Scherl. GOLOG: </author> <title> a logic programming language for dynamic domains. </title> <journal> J. of Logic Programming, Special Issue on Actions, </journal> <volume> 31(1-3):59-83, </volume> <year> 1997. </year>
Reference-contexts: But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. <ref> [12, 4, 11, 26, 25, 1, 9, 10] </ref>). In parallel with these developments of its applications, there have emerged axiomatizations for the situation calculus, and explorations of some of their metamathematical and computational properties (e.g. [24, 15]). <p> These include an induction axiom, whose presence complicates human and automated reasoning in the situation calculus. We characterize various classes of sentences whose proofs do not require induction, and in some cases, some of the other foundational axioms. 4. We prove that the logic programming language GOLOG <ref> [12] </ref> never requires any of the foundational axioms for the evaluation of programs. 2 Formal Preliminaries 2.1 The Language of the Situation Calculus The language L sitcalc that we adopt in this paper is a second order language with equality. <p> By Corollary 5.1 M pr satisfies : . By Corollary 5.2, M adj satisfies : . By Lemma 5.4, M adj is a model of D, contradiction. 6 -Elimination for GOLOG GOLOG <ref> [12] </ref> is a situation calculus-based logic programming language for implementing simulators and controllers for dynamical systems using a repertoire of user specified primitive actions. It provides the usual kinds of imperative programming language control structures as well as two flavors of nondeterministic choice: 1. <p> Suppose ffi is a primitive action term ff. Then Do (ffi; s; s 0 ) = P oss (ff [s]; s) ^ s 0 = do (ff [s]; s): This case is covered by Lemma 5.1. 11 In <ref> [12, 22] </ref>, an implementation for a GOLOG interpreter is given, written in Prolog, but because it relies on Prolog's negation-as-failure mechanism, this implementation is suitable only when the background basic action theory provides complete information about its initial database.
Reference: [13] <author> V. Lifschitz. </author> <title> Toward a metatheory of action. </title> <editor> In J. Allen, R. Fikes, and E. Sandewall, editors, </editor> <booktitle> Proceedings of the Second International Conference on Principles of Knowledge Representation and Reasoning (KR'91), </booktitle> <pages> pages 376-386, </pages> <address> Los Altos, CA, 1991. </address> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA. </address>
Reference-contexts: It is included in the standard material of every introductory course on AI, and it is the language of choice for investigations of various technical problems that arise in theorizing about actions and their effects (e.g. <ref> [13] </ref>, [3], [8]). But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. [12, 4, 11, 26, 25, 1, 9, 10]).
Reference: [14] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> J. of Logic and Computation, special issue on actions and processes, </journal> <volume> 4 </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: The primary intuition about situations that we wish to capture axiomatically is that they are finite sequences of actions. We want also to be able to say that a certain sequence of actions is a subsequence of another. By modifying earlier proposals of Reiter [25], Lin and Reiter <ref> [14] </ref> and Pinto [21], we adopt the following four foundational axioms for the situation calculus. 1 do (a 1 ; s 1 ) = do (a 2 ; s 2 ) oe a 1 = a 2 ^ s 1 = s 2 ; (1) Axiom (1) is a unique names <p> It says that the conditions defining f 's value in the next situation do (a; s), namely OE f , actually define a value for f , and that this value is unique. 4 This solution does not take ramification constraints into account, but see <ref> [14, 17, 20] </ref> for possible ways to do this, while preserving the successor state axiom approach. 7 3 Relative Satisfiability of Basic Action Theories We begin with a result that we shall need later, but that is of independent interest for the metatheory of the situation calculus.
Reference: [15] <author> F. Lin and R. Reiter. </author> <title> How to progress a database. </title> <journal> Artificial Intelligence, </journal> <volume> 92 </volume> <pages> 131-167, </pages> <year> 1997. </year>
Reference-contexts: In parallel with these developments of its applications, there have emerged axiomatizations for the situation calculus, and explorations of some of their metamathematical and computational properties (e.g. <ref> [24, 15] </ref>). This paper continues these explorations, focusing on a rich axiomatization for actions in the situation calculus that includes, among other features, a solution to the frame problem for deterministic actions. Our work is foundational in nature, directed at simplifying the entailment problem for these axioms.
Reference: [16] <author> J. McCarthy. </author> <title> Situations, actions and causal laws. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <year> 1963. </year> <note> Reprinted in Semantic Information Processing (M. </note> <editor> Minsky ed.), </editor> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1968, </year> <pages> pp. 410-417. </pages>
Reference: [17] <author> Sheila A. McIlraith. </author> <title> Towards a Formal Account of Diagnostic Problem Solving. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, Toronto, </institution> <address> Ontario, Canada, </address> <year> 1997. </year>
Reference-contexts: It says that the conditions defining f 's value in the next situation do (a; s), namely OE f , actually define a value for f , and that this value is unique. 4 This solution does not take ramification constraints into account, but see <ref> [14, 17, 20] </ref> for possible ways to do this, while preserving the successor state axiom approach. 7 3 Relative Satisfiability of Basic Action Theories We begin with a result that we shall need later, but that is of independent interest for the metatheory of the situation calculus.
Reference: [18] <author> E.P.D. Pednault. </author> <title> Toward a Mathematical Theory of Plan Synthesis. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, Stanford University, </institution> <year> 1986. </year>
Reference-contexts: Therefore, intuitively, the final result of regressing W should be a formula whose only situation term is S 0 . This is precisely the notion of goal regression in artificial intelligence planning procedures, although there, functional fluents are not normally considered (but see Pednault <ref> [18] </ref> for an exception). That the regression operator is well defined is by no means obvious; the following theorem confirms that it is, and also that regressing W produces an equivalent formula about the initial situation S 0 only. these is to be used.
Reference: [19] <author> E.P.D. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <editor> In R.J. Brachman, H. Levesque, and R. Reiter, editors, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 324-332. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1989. </year>
Reference-contexts: relational fluents, the uniformity of OE f in the successor state axioms for functional fluents guarantees the Markov property: The value of a functional fluent in a successor situation is determined entirely by properties of the current situation, and not by any other situation. 6 Following earlier ideas of Pednault <ref> [19] </ref>, and Haas and Schubert [7, 27], Reiter [23] shows how to solve the frame problem for deterministic actions. 4 The resulting solution yields axioms with exactly the syntactic form of successor state axioms, which is why in this paper we focus on these. <p> Then this term mentions a functional fluent term of the form f ( ~ t; do (ff; oe)) with the property that S 0 is the only situation term (if any) mentioned by ~ t; ff. Following Pednault <ref> [19] </ref>, we now define the regression operator. 6 Definition 4.2 The Regression Operator. The regression operator R when applied to a regressable formula W of L sitcalc is determined relative to a basic theory of actions of L sitcalc that serves as a background axiomatization.
Reference: [20] <author> J.A. Pinto. </author> <title> Temporal Reasoning in the Situation Calculus. </title> <type> PhD thesis, </type> <institution> University of Toronto, Department of Computer Science, </institution> <year> 1994. </year>
Reference-contexts: It says that the conditions defining f 's value in the next situation do (a; s), namely OE f , actually define a value for f , and that this value is unique. 4 This solution does not take ramification constraints into account, but see <ref> [14, 17, 20] </ref> for possible ways to do this, while preserving the successor state axiom approach. 7 3 Relative Satisfiability of Basic Action Theories We begin with a result that we shall need later, but that is of independent interest for the metatheory of the situation calculus.
Reference: [21] <author> Javier Pinto. </author> <title> Occurrences and Narratives as Constraints in the Branching Structure of the Situation Calculus. </title> <note> Submitted to the Journal of Logic and Computation URL = ftp://lyrcc.ing.puc.cl/pub/jpinto/jlc.ps.gz. </note>
Reference-contexts: We want also to be able to say that a certain sequence of actions is a subsequence of another. By modifying earlier proposals of Reiter [25], Lin and Reiter [14] and Pinto <ref> [21] </ref>, we adopt the following four foundational axioms for the situation calculus. 1 do (a 1 ; s 1 ) = do (a 2 ; s 2 ) oe a 1 = a 2 ^ s 1 = s 2 ; (1) Axiom (1) is a unique names axiom for situations;
Reference: [22] <author> R. Reiter. </author> <title> Knowledge in Action: Logical Foundations for Describing and Implementing Dynamical Systems. </title> <note> In preparation. Draft available at http://www.cs.toronto.edu/~cogrobo/. </note>
Reference-contexts: It is easy to construct examples of successor state axioms that lead to regressed formulas whose lengths are exponential in the number of actions. Fortunately, for a wide class of successor state axioms, one can prove good complexity results linear in the number of actions for regression <ref> [22] </ref>, but pursuing such questions here would take us too far afield. 5 -Reduction For the purposes of automating deduction in the situation calculus, the foundational axioms are problematic, especially the induction axiom. <p> Suppose ffi is a primitive action term ff. Then Do (ffi; s; s 0 ) = P oss (ff [s]; s) ^ s 0 = do (ff [s]; s): This case is covered by Lemma 5.1. 11 In <ref> [12, 22] </ref>, an implementation for a GOLOG interpreter is given, written in Prolog, but because it relies on Prolog's negation-as-failure mechanism, this implementation is suitable only when the background basic action theory provides complete information about its initial database.
Reference: [23] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: a; s); (5) where F (x 1 ; : : : ; x n ; a; s) is a formula uniform in s, all of whose free variables are among a; s; x 1 ; : : : ; x n : An example of such an axiom, taken from <ref> [23] </ref>, is: broken (x; do (a; s)) j (9r)fa = drop (r; x) ^ f ragile (x; s)g _ (9b)fa = explode (b) ^ nexto (b; x; s)g _ broken (x; s) ^ :(9r)a = repair (r; x): This says that x will be broken in the successor situation do (a; <p> the successor state axioms for functional fluents guarantees the Markov property: The value of a functional fluent in a successor situation is determined entirely by properties of the current situation, and not by any other situation. 6 Following earlier ideas of Pednault [19], and Haas and Schubert [7, 27], Reiter <ref> [23] </ref> shows how to solve the frame problem for deterministic actions. 4 The resulting solution yields axioms with exactly the syntactic form of successor state axioms, which is why in this paper we focus on these.
Reference: [24] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: In parallel with these developments of its applications, there have emerged axiomatizations for the situation calculus, and explorations of some of their metamathematical and computational properties (e.g. <ref> [24, 15] </ref>). This paper continues these explorations, focusing on a rich axiomatization for actions in the situation calculus that includes, among other features, a solution to the frame problem for deterministic actions. Our work is foundational in nature, directed at simplifying the entailment problem for these axioms. <p> The proper way to understand a situation is as a history, namely, a sequence of actions; two situations are equal iff they denote identical histories. The second axiom (2) is second order induction on situations. The importance of induction for the situation calculus is described by Reiter <ref> [24] </ref>. There are two more axioms: :s &lt; S 0 ; (3) Here s v s 0 is an abbreviation for s &lt; s 0 _ s = s 0 . The relation &lt; provides an ordering relation on situations.
Reference: [25] <author> R. Reiter. </author> <title> On specifying database updates. </title> <journal> Journal of Logic Programming, </journal> <volume> 25 </volume> <pages> 25-91, </pages> <year> 1995. </year>
Reference-contexts: But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. <ref> [12, 4, 11, 26, 25, 1, 9, 10] </ref>). In parallel with these developments of its applications, there have emerged axiomatizations for the situation calculus, and explorations of some of their metamathematical and computational properties (e.g. [24, 15]). <p> The primary intuition about situations that we wish to capture axiomatically is that they are finite sequences of actions. We want also to be able to say that a certain sequence of actions is a subsequence of another. By modifying earlier proposals of Reiter <ref> [25] </ref>, Lin and Reiter [14] and Pinto [21], we adopt the following four foundational axioms for the situation calculus. 1 do (a 1 ; s 1 ) = do (a 2 ; s 2 ) oe a 1 = a 2 ^ s 1 = s 2 ; (1) Axiom (1) <p> A is an n-ary action function symbol, and A (x 1 ; ; x n ; s) is a formula that is uniform in s and whose free variables are among x 1 ; ; x n ; s: 3 These foundational axioms are simpler than those presented by Reiter <ref> [25] </ref> and others.
Reference: [26] <author> R. Reiter. </author> <title> Natural actions, concurrency and continuous time in the situation calculus. In L.C. </title> <editor> Aiello, J. Doyle, and S.C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR'96), </booktitle> <pages> pages 2-13. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: But only recently has it been taken seriously as a foundation for practical work in planning, control, simulation, database updates, agent programming and robotics (e.g. <ref> [12, 4, 11, 26, 25, 1, 9, 10] </ref>). In parallel with these developments of its applications, there have emerged axiomatizations for the situation calculus, and explorations of some of their metamathematical and computational properties (e.g. [24, 15]).
Reference: [27] <author> L.K. Schubert. </author> <title> Monotonic solution of the frame problem in the situation calculus: an efficient method for worlds with fully specified actions. In H.E. </title> <editor> Kyberg, R.P. Loui, and G.N. Carlson, editors, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: OE f in the successor state axioms for functional fluents guarantees the Markov property: The value of a functional fluent in a successor situation is determined entirely by properties of the current situation, and not by any other situation. 6 Following earlier ideas of Pednault [19], and Haas and Schubert <ref> [7, 27] </ref>, Reiter [23] shows how to solve the frame problem for deterministic actions. 4 The resulting solution yields axioms with exactly the syntactic form of successor state axioms, which is why in this paper we focus on these.
Reference: [28] <author> J.E. Stoy. </author> <title> Denotational Semantics. </title> <publisher> MIT Press, </publisher> <year> 1977. </year> <month> 36 </month>
Reference-contexts: In effect, it reifies as situations in the object language of the situation calculus, the possible worlds with which the semantics of dynamic logic is defined. The macro definition for GOLOG procedures corresponds to the more usual Scott-Strachey least fixed-point definition in standard programming language semantics <ref> [28] </ref>.
Reference: [29] <author> R. Waldinger. </author> <title> Achieving several goals simultaneously. </title> <editor> In E. Elcock and D. Michie, editors, </editor> <booktitle> Machine Intelligence 8, </booktitle> <pages> pages 94-136. </pages> <publisher> Ellis Horwood, Edinburgh, </publisher> <address> Scotland, </address> <year> 1977. </year> <month> 37 </month>
Reference-contexts: This completes the construction of M 's interpretation for P oss and fluents. By the the nature of this construction, M satisfies all the action precondition and successor state axioms of D. 4 Regression Regression <ref> [29] </ref> is a central computational mechanism that arises again and again in artificial intelligence applications, forming the basis for many planning procedures and for automated reasoning in the situation calculus. Typically, regression is used for addressing the so-called projection problem.
References-found: 29

