URL: http://www.isi.edu/~marcu/papers/chanberry95.ps
Refering-URL: http://www.isi.edu/~marcu/papers.html
Root-URL: http://www.isi.edu
Email: -lesperan,hector,,marcu,reiter,scherl-@cs.toronto.edu  
Title: A paratre dans les Actes des Troisiemes Journees Francophones sur l'Intelligence Artificielle Distribuee et les
Author: Yves Lesperance, Hector J. Levesque, Fangzhen Lin, Daniel Marcu, Raymond Reiter et Richard B. Scherl 
Date: Resume  
Address: Toronto, ON, M5S 1A4 Canada  
Affiliation: Department of Computer Science University of Toronto  
Abstract: Cette communication presente une approche a la programmation haut-niveau d'agents basee sur une theorie logique de l'action hautement developpee. L'usager fournit une specification des actions primitives des agents (preconditions et effets) de meme que des aspects pertinents de leur environnement dans un formalisme logique. Il peut ensuite specifier des comportements pour les agents dans un langage de programmation ou l'on peut faire reference aux conditions en vigueur dans l'environnement. Lorsqu'une implantation des actions primitives est fournie, l'execution des programmes dans un environnement reel est possible; autrement on peut quand meme faire une execution simulee. L'interpreteur maintient automatiquement un modele du monde pour chacun des agents. La theorie sur laquelle l'approche est basee inclus une solution au probleme de frame, permet aux agents d'avoir une connaissance incomplete du monde, et traite les actions de perception. Ce fondement theorique permet aussi la verification des programmes. L'approche est presentee a l'aide d'un exemple d'application en cours de developpement un systeme multi-agent d'aide a l'organisation de reunions. Les travaux en cours sur l'implantation et les nombreux problemes theoriques qui demeurent sont aussi decrits.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Philip R. Cohen et Hector J. Levesque. </author> <title> Communicative actions for artificial agents. </title> <booktitle> Soumis a la First International Conference on Multiagent Systems (ICMAS'95), </booktitle> <address> Stanford, CA, </address> <month> juin </month> <year> 1995. </year>
Reference-contexts: Un choix populaire est le langage de communication KQML [2] et les outils associes. Toutefois selon Cohen et Levesque <ref> [1] </ref>, la definition de KQML souffre de nombreuses lacunes, en particulier l'absence de semantique formelle. Comme un de nos objectifs est de demontrer l'utilite de CONGOLOG pour divers types de taches, nous choisissons ici de definir nos propres outils de communications simples.
Reference: [2] <institution> ARPA Knowledge Sharing Initiative External Interfaces Working Group. </institution> <note> Specification of the KQML agent-communication language. Working Paper, juin 1993. </note>
Reference-contexts: Il semble aussi qu'il y ait moins d'emphase sur l'obtention d'une specification formelle complete du systeme. 4 Communication en CONGOLOG Les applications multi-agents necessitent generalement des outils pour la communication entre agents. Un choix populaire est le langage de communication KQML <ref> [2] </ref> et les outils associes. Toutefois selon Cohen et Levesque [1], la definition de KQML souffre de nombreuses lacunes, en particulier l'absence de semantique formelle.
Reference: [3] <author> Robert Goldblatt. </author> <title> Logics of Time and Computation. CSLI Lecture Notes No. 7. Center for the Study of Language and Information, </title> <institution> Stanford University, Stanford, </institution> <address> CA, 2eme. edition, </address> <year> 1987. </year>
Reference-contexts: Dans [7], nous presentons une version plus complexe qui solutionne ce probleme. Cette formalisation s'inspire du traitement standard des actions concurrentes en logique dynamique <ref> [3] </ref>. Les conditionnelles et les boucles peuvent etre definis en termes des expressions precedentes de la facon suivante: if then ffi 1 else ffi 2 endIf def 5 while do ffi endWhile def Les procedures et la recursion peuvent aussi etre traitees.
Reference: [4] <author> Andrew R. Haas. </author> <title> The case for domain-specific frame axioms. Dans F.M. Brown, </title> <booktitle> editeur, The Frame Problem in Artificial Intelligence: Proceedings of the 1987 Workshop, </booktitle> <pages> pages 343-348, </pages> <publisher> Lawrence, KA, </publisher> <address> avril 1987. </address> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference-contexts: Notre approche incorpore un traitement du probleme de frame du a Reiter [15] (inspire de travaux anterieurs de Pednault [14], Schubert [18] et Haas <ref> [4] </ref>). L'idee de base est de reunir les axiomes d'effets pertinents a un fluent donne et de supposer que ceux-ci specifient toutes les facons dont le fluent pourrait changer de valeur.
Reference: [5] <author> Yves Lesperance, Hector J. Levesque, F. Lin, Daniel Marcu, Raymond Reiter et Richard B. Scherl. </author> <title> A logical approach to high-level robot programming a progress report. Dans Benjamin Kuipers, editeur, Control of the Physical World by Intelligent Agents, </title> <booktitle> Papers from the 1994 AAAI Fall Symposium, </booktitle> <pages> pages 109-119, </pages> <address> New Orleans, LA, </address> <month> novembre </month> <year> 1994. </year>
Reference-contexts: Il est relativement simple de donner une definition inductive de Do (ffi; s; s 0 ) lorsque ffi ne contient pas d'actions concurrentes, ce que nous faisons dans <ref> [5] </ref>; toutefois cette approche simple ne se generalise pas aux actions concurrentes. Ici, nous developperons une approche differente qui traite les actions concurrentes par entrelace-ment. <p> La plus avancee concerne une application en robotique, la livraison de courrier dans un environnement simple <ref> [5] </ref>. Le controleur de haut niveau du robot programme en GOLOG est interface a un logiciel robotique accomplissant les taches de base. Le systeme fonctionne presentement en mode simulation; des experiences avec un veritable robot sont projetees. 10 Deux versions de l'interpreteur CONGOLOG sont aussi en cours d'implantation.
Reference: [6] <author> Yves Lesperance, Hector J. Levesque, Fangzhen Lin et Richard B. Scherl. </author> <title> Ability and knowing how in the situation calculus. </title> <booktitle> Soumis a IJCAI-95, </booktitle> <year> 1995. </year> <month> 11 </month>
Reference-contexts: Une telle specification faciliterait l'evaluation de differentes implantations. Notre formalisation de la notion de t capacite d'un agent a executer un programme <ref> [6] </ref>, qui traite les preconditions de connaissances des actions, represente un pas important dans cette direction. 7 Implantation et exp erimentation Un interpreteur GOLOG prototype a ete implantes en PROLOG et des experiences impliquant divers types d'applications sont en cours. <p> Il serait certainement utile d'avoir un veritable modele des engagements entre agents, avec un mecanisme d'implantation adequat. Un traitement d'etats mentaux tels que les intentions, les buts, les desirs, les intentions conjointes, et de notions comme la capacite pourrait aussi etre utile (voir <ref> [6] </ref> pour un traitement de la capacite dans notre formalisme).
Reference: [7] <author> Hector J. Levesque. </author> <title> Concurrency in the situation calculus. En preparation, </title> <year> 1995. </year>
Reference-contexts: Dans <ref> [7] </ref>, nous presentons une version plus complexe qui solutionne ce probleme. Cette formalisation s'inspire du traitement standard des actions concurrentes en logique dynamique [3].
Reference: [8] <author> Fangzhen Lin et Raymond Reiter. </author> <title> How to progress a database (and why) I. logical foundations. </title> <editor> Dans Jon Doyle, Erik Sandewall et Pietro Torasso, editeurs, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fourth International Conference, </booktitle> <pages> pages 425-436, </pages> <address> Bonn, Allemagne, 1994. </address> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference-contexts: Un probleme associe a la methode de regression est que son cout augmente a mesure que l'on s'eloigne de la situation initiale. Il est clair qu'en general, on doit effectuer une mise a jour des connaissances des agents avec l'evolution du systeme. Cependant, ainsi que Lin et Reiter <ref> [8, 9] </ref> l'ont montre, la progression d'une base de connaissances (BC) n'est pas toujours representable en logique du premier ordre.
Reference: [9] <author> Fangzhen Lin et Raymond Reiter. </author> <title> How to progress a database II: The STRIPS connection. Rapport technique, </title> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1995. </year> <note> A paratre. </note>
Reference-contexts: Un probleme associe a la methode de regression est que son cout augmente a mesure que l'on s'eloigne de la situation initiale. Il est clair qu'en general, on doit effectuer une mise a jour des connaissances des agents avec l'evolution du systeme. Cependant, ainsi que Lin et Reiter <ref> [8, 9] </ref> l'ont montre, la progression d'une base de connaissances (BC) n'est pas toujours representable en logique du premier ordre.
Reference: [10] <author> Fangzhen Lin et Raymond Reiter. </author> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation, </journal> <volume> 4(5) </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: Dans les domaines multi-agents, le probleme est plus complexe car 1 La presente discussion ignore les problemes de ramification et de qualification; un traitement compatible avec notre approche est propose par Lin et Reiter <ref> [10] </ref>. 3 un agent n'est pas necessairement au courant des actions des autres agents (actions exogenes). Pour l'application d'organisation de reunions, l'axiome d'etat successeur qui suit est suffisant.
Reference: [11] <author> D. Marcu, Y. Lesperance, H. Levesque, F. Lin, R. Reiter et R. Scherl. </author> <title> Distributed software agents and communication in the situation calculus. </title> <booktitle> Soumis au Workshop on Intelligent Computer Communication, </booktitle> <address> Cluj-Napoca, Roumanie, </address> <month> juin </month> <year> 1995. </year>
Reference-contexts: Une version monolithique supporte l'execution concurrente d'agents sur un seul processeur. L'autre version sup-porte l'execution veritablement distribuee d'agents, la communication entre agents etant implantee au moyen d'outils TCP/IP <ref> [11] </ref>. L'application d'organisation de reunions est en cours d'implantation. 8 Conclusion Nous croyons que le manque de robustesse des systemes intelligents presentement disponibles tient en bonne partie a l'absence de specification adequate de la tache a accomplir. En consequence, nous tentons de developper des outils ayant une base theorique solide.
Reference: [12] <author> John McCarthy et Patrick Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> Dans B. Meltzer et D. Michie, editeurs, </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 4, </volume> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, Edinburgh, </publisher> <address> UK, </address> <year> 1979. </year>
Reference-contexts: Nous terminons en resumant les caracteristiques importantes de notre approche et en discutant les problemes qui restent a regler. 2 Une th eorie de l'action Notre approche est basee sur une version generalisee du calcul situationnel <ref> [12] </ref>, un dialecte du calcul des predicats qui permet de representer un monde en evolution. Le monde est concu comme se trouvant dans un certain etat (ou situation). Cet etat ne peut changer que sous l'effet d'une action accomplie par un agent. <p> Il est normalement necessaire de leur adjoindre des axiomes de frame specifiant les proprietes qui demeurent inchangees sous l'effet de l'action. Le notoire probleme de frame <ref> [12] </ref> tient au fait que le nombre de ces axiomes est de l'ordre du produit du nombre d'actions et du nombre de fluents. Notre approche incorpore un traitement du probleme de frame du a Reiter [15] (inspire de travaux anterieurs de Pednault [14], Schubert [18] et Haas [4]).
Reference: [13] <author> Robert C. Moore. </author> <title> A formal theory of knowledge and action. </title> <editor> Dans J. R. Hobbs et Robert C. Moore, editeurs, </editor> <booktitle> Formal Theories of the Common Sense World, </booktitle> <pages> pages 319-358. </pages> <publisher> Ablex Publishing, </publisher> <address> Norwood, NJ, </address> <year> 1985. </year>
Reference-contexts: La connaissance est representee en adap-tant le modele des monde possibles au calcul situationnel (a la facon de Moore <ref> [13] </ref>). K (agt; s 0 ; s) represente le fait que dans l'etat s, l'agent agt croit que l'etat du monde pourrait etre s 0 . Know (agt; ; s) est une abreviation de la formule 8s 0 (K (agt; s 0 ; s) (s 0 )).
Reference: [14] <author> E. P. D. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. Dans R.J. </title> <editor> Brachman, H.J. Levesque et R. Reiter, editeurs, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 324-332, </pages> <address> Toronto, </address> <booktitle> ON, mai 1989. </booktitle> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference-contexts: Le notoire probleme de frame [12] tient au fait que le nombre de ces axiomes est de l'ordre du produit du nombre d'actions et du nombre de fluents. Notre approche incorpore un traitement du probleme de frame du a Reiter [15] (inspire de travaux anterieurs de Pednault <ref> [14] </ref>, Schubert [18] et Haas [4]). L'idee de base est de reunir les axiomes d'effets pertinents a un fluent donne et de supposer que ceux-ci specifient toutes les facons dont le fluent pourrait changer de valeur.
Reference: [15] <author> Raymond Reiter. </author> <title> The frame problem in the situation calculus: A simple solution (sometimes) and a completeness result for goal regression. Dans Vladimir Lifschitz, </title> <booktitle> editeur, Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: Le notoire probleme de frame [12] tient au fait que le nombre de ces axiomes est de l'ordre du produit du nombre d'actions et du nombre de fluents. Notre approche incorpore un traitement du probleme de frame du a Reiter <ref> [15] </ref> (inspire de travaux anterieurs de Pednault [14], Schubert [18] et Haas [4]). L'idee de base est de reunir les axiomes d'effets pertinents a un fluent donne et de supposer que ceux-ci specifient toutes les facons dont le fluent pourrait changer de valeur. <p> Dans nos travaux anterieurs, nous avons identifie diverses techniques interessantes pour effectuer ce raisonnement. Dans <ref> [15, 17] </ref>, nous proposons une methode pour etablir si une proposition donne (requete) est vraie apres une sequence d'actions.
Reference: [16] <editor> D. Riecken (editeur). </editor> <booktitle> Communications of the ACM 37 (7), numero special sur les agents intelligents, </booktitle> <month> juillet </month> <year> 1994. </year>
Reference-contexts: 1 Introduction La notion d'agent informatique est en vogue en ce moment (voir <ref> [16] </ref> pour une collection d'articles recents). Ce genre d'agent semble etre une bonne facon de livrer des services aux usagers de facon conviviale sur les systemes informatiques en reseau.
Reference: [17] <author> Richard B. Scherl et Hector J. Levesque. </author> <title> The frame problem and knowledge-producing actions. </title> <booktitle> Dans Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 689-695, </pages> <address> Washington, DC, juillet 1993. </address> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: Ce traitement evite la proliferation du nombre d'axiomes car il ne necessite qu'un axiome d'etat successeur par fluent et un axiome de preconditions par action. 1 Scherl et Levesque <ref> [17] </ref> ont generalise ce traitement aux actions de perception. Ces actions ont des effets sur l'etat mental de l'agent et non sur le monde exterieur. <p> Dans nos travaux anterieurs, nous avons identifie diverses techniques interessantes pour effectuer ce raisonnement. Dans <ref> [15, 17] </ref>, nous proposons une methode pour etablir si une proposition donne (requete) est vraie apres une sequence d'actions.
Reference: [18] <author> L.K. Schubert. </author> <title> Monotonic solution to the frame problem in the situation calculus: An efficient method for worlds with fully specified actions. Dans H.E. </title> <editor> Kyberg, R.P. Loui et G.N. Carlson, editeurs, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Press, </publisher> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: Le notoire probleme de frame [12] tient au fait que le nombre de ces axiomes est de l'ordre du produit du nombre d'actions et du nombre de fluents. Notre approche incorpore un traitement du probleme de frame du a Reiter [15] (inspire de travaux anterieurs de Pednault [14], Schubert <ref> [18] </ref> et Haas [4]). L'idee de base est de reunir les axiomes d'effets pertinents a un fluent donne et de supposer que ceux-ci specifient toutes les facons dont le fluent pourrait changer de valeur.
Reference: [19] <author> Yoav Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <year> 1993. </year> <month> 12 </month>
Reference-contexts: On peut voir la programmation orientee agent <ref> [19] </ref> comme une generalisation de la program-mation orientee objet. Mais la notion d'agent est beaucoup plus complexe que celle d'objet. Consequemment, il est essentiel de baser des outils pour la modelisation et la conception d'agents sur des fondements theoriques solides. <p> Par exemple, le plan while 9b SURTABLE (b) do b ENLEVE (b) laisse aux soins de l'interpreteur CONGOLOG de trouver une sequence d'actions legales qui permet de debarrasser la table. Nos travaux se rapprochent de ceux de Shoham et son equipe sur le langage de programmation AGENT-0 <ref> [19] </ref>. Mais il n'est pas facile de faire une comparaison systematique car les differences entre CONGOLOG et AGENT-0 sont nombreuses.
References-found: 19

