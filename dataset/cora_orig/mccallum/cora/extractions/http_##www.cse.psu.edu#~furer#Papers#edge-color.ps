URL: http://www.cse.psu.edu/~furer/Papers/edge-color.ps
Refering-URL: http://www.cse.psu.edu/~furer/Papers/bib.html
Root-URL: http://www.cse.psu.edu
Title: Parallel Edge Coloring Approximation  
Author: Martin Furer Balaji Raghavachari 
Abstract: Let G be a graph with n vertices and m edges and let its maximum degree be . It is shown that a valid edge coloring of G using at most 2 1 colors can be computed in O(log n log ) time using O(m + n) processors on a CREW PRAM. Based on this, for any constant c &gt; 1, a valid edge coloring for G using at most max(dce; + 1) colors can be computed in O(log 2 n) time, using O(m + n) processors. Employing different techniques, we show that it is possible to compute a 2 coloring in O(log fl n) time, with O(m + n) processors. Also, a maximal matching of G can be computed in O(log 2 n log ) time using O(m + n) processors on a CREW PRAM. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. G. Akl. </author> <title> The design and analysis of parallel algorithms. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1989. </year>
Reference-contexts: The steps which are not mentioned can be performed using classical algorithms like prefix sum, list ranking, etc. (see e.g. <ref> [1, 13] </ref>). In Step 1, the edges of G can be colored using the symmetry breaking techniques of Cole and Vishkin [4], which has been simplified by Goldberg, Plotkin and Shannon [7]. Their algorithms run in O (log fl n) time using n processors on a CREW PRAM.
Reference: [2] <author> B. Awerbuch, A. Israeli, and Y. Shiloach. </author> <title> Finding Euler circuits in logarithmic parallel time. </title> <booktitle> In Advances in Computing Research 4: Parallel and Distributed Algorithms, </booktitle> <editor> Preparata, F. P., ed., </editor> <publisher> JAI Press, </publisher> <address> Greenwich, CT, </address> <pages> pages 69-78, </pages> <year> 1987. </year>
Reference-contexts: In the maximal matching algorithm given in [12], an Eulerian cycle is used to split the graph. But the best algorithm currently known for computing an Eulerian cycle requires fi (log 2 n) time on a CREW PRAM when using O (m + n) processors <ref> [2] </ref>. However, computing Eulerian cycles is not necessary to partition a graph in the required way. We use the following ideas to "handle" odd length cycles. Each odd length cycle nominates arbitrarily one of its incident vertices as a special vertex.
Reference: [3] <author> R. Cole and J. Hopcroft. </author> <title> On edge coloring bipartite graphs. </title> <journal> SIAM J. Comput., </journal> <volume> 11 </volume> <pages> 540-546, </pages> <year> 1982. </year>
Reference-contexts: In the case of bipartite graphs, it can be shown that O 0 (G) = . Efficient algorithms for finding such a coloring have been given by Gabow and Kariv [6] and Cole and Hopcroft <ref> [3] </ref>. So far efficient parallel algorithms for solving the above problem have not been discovered except for restricted classes of graphs.
Reference: [4] <author> R. Cole and U. Vishkin. </author> <title> Deterministic coin tossing with applications to optimal parallel list ranking. </title> <journal> Information and Control, </journal> <volume> 70 </volume> <pages> 32-53, </pages> <year> 1986. </year> <month> 7 </month>
Reference-contexts: The steps which are not mentioned can be performed using classical algorithms like prefix sum, list ranking, etc. (see e.g. [1, 13]). In Step 1, the edges of G can be colored using the symmetry breaking techniques of Cole and Vishkin <ref> [4] </ref>, which has been simplified by Goldberg, Plotkin and Shannon [7]. Their algorithms run in O (log fl n) time using n processors on a CREW PRAM. In Steps 3 and 6 of the algorithm, we need to count the length of each cycle.
Reference: [5] <author> M. Furer and B. Raghavachari. </author> <title> An efficient NC algorithm for finding Hamiltonian cycles in dense directed graphs. </title> <journal> J. Algorithms, </journal> <volume> 18 </volume> <pages> 203-220, </pages> <year> 1995. </year>
Reference-contexts: Such an algorithm would be useful in other parallel algorithms which use edge coloring as a subroutine. Our technique was used to save a factor of O (log 2 n) from the running time of computing Hamiltonian cycles in a special class of dense directed graphs <ref> [5] </ref>. The following is a summary of the results in this paper. We first show how to color the edges of a graph using at most 2 1 colors in O (log n log ) time.
Reference: [6] <author> H. N. Gabow and O. Kariv. </author> <title> Algorithms for edge coloring bipartite graphs and multigraphs. </title> <journal> SIAM J. Comput., </journal> <volume> 11 </volume> <pages> 117-129, </pages> <year> 1982. </year>
Reference-contexts: In the case of bipartite graphs, it can be shown that O 0 (G) = . Efficient algorithms for finding such a coloring have been given by Gabow and Kariv <ref> [6] </ref> and Cole and Hopcroft [3]. So far efficient parallel algorithms for solving the above problem have not been discovered except for restricted classes of graphs.
Reference: [7] <author> A. V. Goldberg, A. Plotkin, and G. E. Shannon. </author> <title> Parallel symmetry breaking in sparse graphs. </title> <journal> SIAM J. Disc. Math., </journal> <volume> 1 </volume> <pages> 434-446, </pages> <year> 1988. </year>
Reference-contexts: We are seeking an efficient algorithm for this problem which uses O (m + n) processors. In the special case when is bounded by a constant, the algorithm of Goldberg, Plotkin and Shannon <ref> [7] </ref> solves the problem in O (log fl n) time using O (n) processors. We use ideas from the algorithm of Lev, Pippenger and Valiant [17] for edge coloring bipartite graphs and Israeli and Shiloach's algorithm [12] for computing maximal matchings. Our algorithm works as follows. <p> In Step 1, the edges of G can be colored using the symmetry breaking techniques of Cole and Vishkin [4], which has been simplified by Goldberg, Plotkin and Shannon <ref> [7] </ref>. Their algorithms run in O (log fl n) time using n processors on a CREW PRAM. In Steps 3 and 6 of the algorithm, we need to count the length of each cycle. <p> Since the degree splits roughly equally at each level, the depth of recursion is O (log ). When the degree becomes at most two, the edges of the graph can be colored in O (log fl n) time <ref> [7] </ref>. <p> The vertices on each of these paths and cycles resolve the color conflicts as follows. Color the vertices of each path or cycle using three colors in O (log fl n) time using the algorithm of Goldberg, Plotkin and Shannon <ref> [7] </ref>. The vertex coloring partitions the vertices of each path or cycle into three independent sets. The conflicts in each path or cycle are resolved by these vertices in three steps (corresponding to the three colors).
Reference: [8] <author> T. Gonzalez and S. Sahni. </author> <title> Open shop scheduling to minimize finish time. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 23 </volume> <pages> 665-679, </pages> <year> 1976. </year>
Reference-contexts: But Holyer [10] has shown that deciding whether the chromatic index is is NP-complete. Therefore except in special cases like bipartite graphs and planar graphs of large degree, a + 1 coloring is generally accepted as practically optimal. The edge coloring problem appears in many places (see for example <ref> [8, 9, 16, 17] </ref>) and is an interesting graph-theoretic problem. The inductive proof given by Vizing leads to a sequential algorithm which produces a + 1 coloring of G in O (mn) time. In the case of bipartite graphs, it can be shown that O 0 (G) = .
Reference: [9] <author> C. C. </author> <title> Gotlieb. </title> <booktitle> The Construction of class-teacher time-tables. In Proc. IFIP Congress 62, </booktitle> <address> Munich, </address> <publisher> North-Holland, </publisher> <pages> pages 73-77, </pages> <year> 1963. </year>
Reference-contexts: But Holyer [10] has shown that deciding whether the chromatic index is is NP-complete. Therefore except in special cases like bipartite graphs and planar graphs of large degree, a + 1 coloring is generally accepted as practically optimal. The edge coloring problem appears in many places (see for example <ref> [8, 9, 16, 17] </ref>) and is an interesting graph-theoretic problem. The inductive proof given by Vizing leads to a sequential algorithm which produces a + 1 coloring of G in O (mn) time. In the case of bipartite graphs, it can be shown that O 0 (G) = .
Reference: [10] <author> I. Holyer. </author> <title> The NP-completeness of edge-coloring. </title> <journal> SIAM J. Comput., </journal> <volume> 10 </volume> <pages> 718-720, </pages> <year> 1981. </year>
Reference-contexts: It is obvious that O 0 (G) , the degree of G. Vizing [22] has shown in a remarkable theorem that O 0 (G) + 1. Therefore O 0 (G) is either or + 1. But Holyer <ref> [10] </ref> has shown that deciding whether the chromatic index is is NP-complete. Therefore except in special cases like bipartite graphs and planar graphs of large degree, a + 1 coloring is generally accepted as practically optimal.
Reference: [11] <author> A. Israeli and A. Itai. </author> <title> A fast and simple randomized parallel algorithm for maximal matching. </title> <journal> Inf. Proc. Lett., </journal> <volume> 22 </volume> <pages> 77-80, </pages> <year> 1986. </year>
Reference-contexts: If randomization is allowed, even more efficient solutions are possible. Israeli and Itai <ref> [11] </ref> demonstrate a randomized parallel algorithm for maximal matching, which runs in O (log n) time with O (jEj) processors on a CRCW PRAM.
Reference: [12] <author> A. Israeli and Y. Shiloach. </author> <title> An improved parallel algorithm for maximal matching. </title> <journal> Inf. Proc. Lett., </journal> <volume> 22 </volume> <pages> 57-60, </pages> <year> 1986. </year>
Reference-contexts: We also demonstrate that a maximal matching of G can be computed in O (log 2 n log ) time. This improves the running time of the best deterministic algorithm for maximal matchings given by Israeli and Shiloach <ref> [12] </ref>, which runs in O (log 3 n log ) time on a CREW PRAM. All our algorithms use O (m + n) processors. 2 Algorithm for 2 1 coloring We start with the simple case of coloring the edges of a given graph with 2 1 colors. <p> We use ideas from the algorithm of Lev, Pippenger and Valiant [17] for edge coloring bipartite graphs and Israeli and Shiloach's algorithm <ref> [12] </ref> for computing maximal matchings. Our algorithm works as follows. We repeatedly "split" the graph into two graphs of smaller degree. The edge set E is divided into two parts such that the degree of the subgraph induced by each part is roughly half the degree of G. <p> The edges with color 0 form one of the subgraphs and the edges with color 1 form the other. In the maximal matching algorithm given in <ref> [12] </ref>, an Eulerian cycle is used to split the graph. But the best algorithm currently known for computing an Eulerian cycle requires fi (log 2 n) time on a CREW PRAM when using O (m + n) processors [2]. <p> The maximal matching problem is in NC as a consequence of Luby's parallel algorithm for the Maximal Independent Set problem [19]. But a significantly more efficient algorithm was given by Israeli and Shiloach <ref> [12] </ref>. <p> If randomization is allowed, even more efficient solutions are possible. Israeli and Itai [11] demonstrate a randomized parallel algorithm for maximal matching, which runs in O (log n) time with O (jEj) processors on a CRCW PRAM. In the maximal matching algorithm of <ref> [12] </ref>, one of the basic steps used is the algorithm Degree-split, which splits the edges of a graph of degree into two graphs of degree d=2e. This is achieved by using an Eulerian circuit of an augmented graph.
Reference: [13] <author> J. Jaja. </author> <title> Parallel algorithms. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1992. </year>
Reference-contexts: The steps which are not mentioned can be performed using classical algorithms like prefix sum, list ranking, etc. (see e.g. <ref> [1, 13] </ref>). In Step 1, the edges of G can be colored using the symmetry breaking techniques of Cole and Vishkin [4], which has been simplified by Goldberg, Plotkin and Shannon [7]. Their algorithms run in O (log fl n) time using n processors on a CREW PRAM.
Reference: [14] <author> H. J. Karloff and D. B. Shmoys. </author> <title> Efficient parallel algorithms for edge coloring problems. </title> <journal> J. Algorithms, </journal> <volume> 8 </volume> <pages> 39-52, </pages> <year> 1987. </year>
Reference-contexts: Lev, Pippenger and Valiant [17] have demonstrated a parallel algorithm to compute a -coloring for bipartite graphs in O (log 2 n log ) time using O (m + n) processors on the EREW PRAM. Karloff and Shmoys <ref> [14] </ref> showed that when is bounded by a polylog in n, a + 1 edge coloring of G can be computed in NC, which is the class of problems that can be solved in polylogarithmic time using a polynomial number of processors. <p> These graphs are colored with d + 1 colors using the procedure of Karloff and Shmoys <ref> [14] </ref>. Also the recoloring in Step 10 of the algorithm is not performed. Let N () be the number of colors used by this algorithm on a graph of degree . Then we get the following recurrence. <p> At the bottom of recursion, we need to color graphs of constant degree d with d + 1 colors. This takes O (log 2 n) time using O (m + n) processors <ref> [14] </ref>. 4 A super fast coloring algorithm In this section, we show that a 2 coloring can be computed in O (log fl n) time on a PRAM.
Reference: [15] <author> R. M. Karp, E. Upfal, and A. Wigderson. </author> <title> Constructing a maximum matching is in random NC. </title> <journal> Combinatorica, </journal> <volume> 6 </volume> <pages> 35-48, </pages> <year> 1986. </year>
Reference-contexts: The labels of the edges now correspond to a valid 2 coloring. 5 Application to maximal matching The edge coloring problem is a generalization of graph matching. The maximum matching problem has been widely studied and is known to be in RNC <ref> [15, 21] </ref>. This problem has not been shown to be in deterministic NC so far. In many circumstances, it may be possible to use a "large enough" matching in the place of a maximum matching.
Reference: [16] <author> E. L. Lawler and J. Labetoulle. </author> <title> On preemptive scheduling of unrelated parallel processors by linear programming. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 25 </volume> <pages> 612-619, </pages> <year> 1978. </year>
Reference-contexts: But Holyer [10] has shown that deciding whether the chromatic index is is NP-complete. Therefore except in special cases like bipartite graphs and planar graphs of large degree, a + 1 coloring is generally accepted as practically optimal. The edge coloring problem appears in many places (see for example <ref> [8, 9, 16, 17] </ref>) and is an interesting graph-theoretic problem. The inductive proof given by Vizing leads to a sequential algorithm which produces a + 1 coloring of G in O (mn) time. In the case of bipartite graphs, it can be shown that O 0 (G) = .
Reference: [17] <author> G. F. Lev, N. Pippenger, and L. G. Valiant. </author> <title> A fast parallel algorithm for routing in permutation networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30:93-100, </volume> <year> 1981. </year>
Reference-contexts: But Holyer [10] has shown that deciding whether the chromatic index is is NP-complete. Therefore except in special cases like bipartite graphs and planar graphs of large degree, a + 1 coloring is generally accepted as practically optimal. The edge coloring problem appears in many places (see for example <ref> [8, 9, 16, 17] </ref>) and is an interesting graph-theoretic problem. The inductive proof given by Vizing leads to a sequential algorithm which produces a + 1 coloring of G in O (mn) time. In the case of bipartite graphs, it can be shown that O 0 (G) = . <p> Efficient algorithms for finding such a coloring have been given by Gabow and Kariv [6] and Cole and Hopcroft [3]. So far efficient parallel algorithms for solving the above problem have not been discovered except for restricted classes of graphs. Lev, Pippenger and Valiant <ref> [17] </ref> have demonstrated a parallel algorithm to compute a -coloring for bipartite graphs in O (log 2 n log ) time using O (m + n) processors on the EREW PRAM. <p> In the special case when is bounded by a constant, the algorithm of Goldberg, Plotkin and Shannon [7] solves the problem in O (log fl n) time using O (n) processors. We use ideas from the algorithm of Lev, Pippenger and Valiant <ref> [17] </ref> for edge coloring bipartite graphs and Israeli and Shiloach's algorithm [12] for computing maximal matchings. Our algorithm works as follows. We repeatedly "split" the graph into two graphs of smaller degree.
Reference: [18] <author> N. Linial. </author> <title> Locality in distributed graph algorithms. </title> <journal> SIAM J. Comput., </journal> <volume> 21 </volume> <pages> 193-201, </pages> <year> 1992. </year>
Reference-contexts: For graphs of constant degree, their algorithm can be implemented to run in O (log 2 n) time with O (n) processors. Linial <ref> [18] </ref> has devised an algorithm for computing a 2 coloring in O (log fl n) time. We present a simpler algorithm for this task. In this paper we look at parallel approximation algorithms for this problem. <p> Such an algorithm would take fi (log ) phases to reach the base case and hence does not lead to an O (log fl n) time algorithm. Linial <ref> [18] </ref> has shown that there is an algorithm for computing a 2 coloring in O (log fl n) time. The algorithm works as follows. We use 2 colors and we treat each color as an ordered pair, with each entry being in the range 1 to .
Reference: [19] <author> M. Luby. </author> <title> A simple parallel algorithm for the maximal independent set problem. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 1036-1053, </pages> <year> 1986. </year>
Reference-contexts: A maximal matching serves this purpose, as any maximal matching has at least half the size of a maximum matching. The maximal matching problem is in NC as a consequence of Luby's parallel algorithm for the Maximal Independent Set problem <ref> [19] </ref>. But a significantly more efficient algorithm was given by Israeli and Shiloach [12].
Reference: [20] <author> M. Luby. </author> <title> Removing randomness in parallel computation without a processor Penalty. </title> <journal> J. Comput. System Sci., </journal> <volume> 47 </volume> <pages> 250-286, </pages> <year> 1993. </year>
Reference-contexts: Also there is a natural correspondence between the vertex colorings of H and the edge colorings of G. Hence the edges of G can be colored with 2 1 in NC using the vertex coloring algorithm of Luby <ref> [20] </ref> on the line graph of G. This algorithm runs in O (log 3 n log log n) time, but may use a quadratic number of processors (as the line graph of G may be quadratic in the size of G).
Reference: [21] <author> K. Mulmuley, U. V. Vazirani, and V. V. Vazirani. </author> <title> Matching is as easy as matrix inversion. </title> <journal> Combinatorica, </journal> <volume> 7 </volume> <pages> 105-113, </pages> <year> 1987. </year>
Reference-contexts: The labels of the edges now correspond to a valid 2 coloring. 5 Application to maximal matching The edge coloring problem is a generalization of graph matching. The maximum matching problem has been widely studied and is known to be in RNC <ref> [15, 21] </ref>. This problem has not been shown to be in deterministic NC so far. In many circumstances, it may be possible to use a "large enough" matching in the place of a maximum matching.
Reference: [22] <author> V. G. Vizing. </author> <title> On an estimate of the chromatic class of a P-graph (Russian). </title> <journal> Diskret. Analiz., </journal> <volume> 3 </volume> <pages> 25-30, </pages> <year> 1964. </year>
Reference-contexts: The smallest k for which such a coloring is possible is known as the chromatic index O 0 (G) of G. It is obvious that O 0 (G) , the degree of G. Vizing <ref> [22] </ref> has shown in a remarkable theorem that O 0 (G) + 1. Therefore O 0 (G) is either or + 1. But Holyer [10] has shown that deciding whether the chromatic index is is NP-complete.
References-found: 22

