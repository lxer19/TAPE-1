URL: ftp://ftp.cs.brown.edu/pub/techreports/92/cs92-34.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-92-34.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S.W. Bent, D.D. Sleator, and R.E. Tarjan, </author> <title> "Biased Search Trees," </title> <journal> SIAM J. Computing 14 (1985), </journal> <pages> 545-568. </pages>
Reference-contexts: We also keep the value invariant that the tail t of every solid path stores the actual value of width (t ). In order to achieve the logarithmic time per dynamic operation, we use biased search trees <ref> [1] </ref> to represent the path-trees. Each leaf of a biased search tree T is assigned a weight.
Reference: [2] <author> P. Bertolazzi, R.F. Cohen, G. Di Battista, R. Tamassia, and I.G. Tollis, </author> <title> "How to Draw a Series-Parallel Digraph," </title> <booktitle> Proc. </booktitle> <month> SWAT </month> <year> (1992). </year>
Reference-contexts: Quadratic-Area: The drawing has O (n 2 ) area. 17 (c) parallel composition (general case); (d) parallel composition with the "right-pushed" transitive edge. It is important to note that in order to get polynomial area the embedding cannot be completely preserved. Namely, it is shown in <ref> [2] </ref> that there exists a class of embedded series-parallel digraphs for which any upward straight-line drawing that preserves the embedding requires exponential area under any resolution rule. -drawings of series-parallel digraphs are introduced in [2] and satisfy the above static drawing predicate. <p> Namely, it is shown in <ref> [2] </ref> that there exists a class of embedded series-parallel digraphs for which any upward straight-line drawing that preserves the embedding requires exponential area under any resolution rule. -drawings of series-parallel digraphs are introduced in [2] and satisfy the above static drawing predicate. In -drawings the embedding is modified so that all the transitive edges are embedded on one side, say, the right side. We call such embedding right-pushed. <p> In a parallel composition, the subdrawings are placed one to the right of the other and are deformed in order to identify the poles, guaranteeing that their edges do not cross. The algorithm is outlined below. More details can be found in <ref> [2] </ref>. * Modify the embedding of G into a right-pushed embedding. 18 * If G consists of a single edge, it is drawn as a vertical segment of height 2, with bounding triangle having width 1 (see Fig. 3.a). * If G is the series composition of G 0 and G <p> Notice that in both series and parallel compositions the height of () is equal to the sum of the heights of ( 0 ) and ( 00 ). Hence, the height of () is exactly 2m, and the area of the drawing is m 2 . Lemma 4 <ref> [2] </ref> Given an n-node series-parallel digraph G, the -drawing of G satisfies the static drawing predicate P S , and can be constructed in O (n) time. 3.2 Dynamic Environment For a node of SPQ-tree T , we define () the bounding triangle to be the triangle enclosing the drawing of
Reference: [3] <author> P. Bertolazzi and G. Di Battista, </author> <title> "On Upward Drawing Testing of Triconnected Digraphs," </title> <booktitle> Proc. ACM Symp. on Computational Geometry (1991). </booktitle>
Reference-contexts: The static algorithm of [41] is based on network flow techniques for which no dynamic methods are known. * Devise dynamic algorithms to test whether a digraph admits an upward planar drawing. Static algorithms that perform this test are known only for triconnected digraphs <ref> [3] </ref> and for single-source digraphs [25]. Semidynamic planarity testing can be done with O (log n) query and insertion time [8].
Reference: [4] <author> N. Chiba, T. Nishizeki, S. Abe, and T. Ozawa, </author> <title> "A Linear Algorithm for Embedding Planar Graphs Using PQ-Trees," </title> <editor> J. </editor> <booktitle> of Computer and System Sciences 30 (1985), </booktitle> <pages> 54-76. </pages>
Reference: [5] <author> R.F. Cohen and R. Tamassia, </author> <title> "Dynamic Expression Trees and their Applications," </title> <booktitle> Proc. ACM-SIAM Symp. on Discrete Algorithms (1991), </booktitle> <pages> 52-61. </pages>
Reference-contexts: The restructuring of the SPQ-tree caused by InsertEdge and DeleteEdge is more complex. It is known <ref> [5] </ref> that if G is a series-parallel digraph with SPQ-tree T , and v 0 and v 00 be two vertices of G.
Reference: [6] <author> G. Di Battista, W.-P. Liu, and I. </author> <title> Rival, "Bipartite Graphs, Upward Drawings, </title> <booktitle> and Planarity," Information Processing Letters 36 (1990), </booktitle> <pages> 317-322. </pages>
Reference: [7] <author> G. Di Battista and R. Tamassia, </author> <title> "Algorithms for Plane Representations of Acyclic Digraphs," </title> <booktitle> Theoretical Computer Science 61 (1988), </booktitle> <pages> 175-198. </pages>
Reference: [8] <author> G. Di Battista and R. Tamassia, </author> <title> "Incremental Planarity Testing," </title> <booktitle> Proc. 30th IEEE Symp. on Foundations of Computer Science (1989), </booktitle> <pages> 436-441. </pages>
Reference-contexts: As shown in <ref> [8] </ref>, this repertory of operation is complete; i.e., any n-vertex biconnected planar graph can be assembled by means of O (n) operations of the repertory. <p> This can be done using the techniques of [42]. We can extend Theorem 5 to support the insertion of an edge between two vertices that are not on the same face of the current embedding, using the techniques of <ref> [8] </ref>. In this case the embedding has to be modified in order to preserve planarity, and the time complexity of operation InsertEdge is amortized. <p> Static algorithms that perform this test are known only for triconnected digraphs [3] and for single-source digraphs [25]. Semidynamic planarity testing can be done with O (log n) query and insertion time <ref> [8] </ref>. Recently, a fully dynamic planarity testing technique with O (n 2=3 ) query and update time has been discovered [20]. * Dynamize drawing methods for general graphs that are based on physical models of the layout process, such as the "spring" algorithm [13,26].
Reference: [9] <author> G. Di Battista, R. Tamassia, and I.G. Tollis, </author> <title> "Area Requirement and Symmetry Display in Drawing Graphs," </title> <booktitle> Proc. ACM Symp. on Computational Geometry (1989), </booktitle> <pages> 51-60. </pages>
Reference-contexts: Isomorphic: Isomorphic components have drawings that are congruent up to a translation. Symmetric: Symmetric components have drawings that are congruent up to a translation and a reflection. Quadratic-Area: The drawing has O (n 2 ) area. We dynamize the polyline drawing method of <ref> [9] </ref>, which has the important property of displaying symmetries and isomorphisms of subgraphs. Note that we do not consider straight-line drawings because they may require exponential area [9]. 4.1.1 Dynamic Environment We consider a fully dynamic environment for the maintenance of upward drawings on a collection of embedded planar st-digraphs. <p> Quadratic-Area: The drawing has O (n 2 ) area. We dynamize the polyline drawing method of <ref> [9] </ref>, which has the important property of displaying symmetries and isomorphisms of subgraphs. Note that we do not consider straight-line drawings because they may require exponential area [9]. 4.1.1 Dynamic Environment We consider a fully dynamic environment for the maintenance of upward drawings on a collection of embedded planar st-digraphs.
Reference: [10] <author> G. Di Battista, R. Tamassia, and I.G. Tollis, </author> <title> "Area Requirement and Symmetry Display of Planar Upward Drawings," </title> <booktitle> Discrete & Computational Geometry 7 (1992), </booktitle> <pages> 381-401. </pages>
Reference: [11] <author> D. Dolev, F.T. Leighton, and H. Trickey, </author> <title> "Planar Embedding of Planar Graphs," </title> <booktitle> in Advances in Computing Research, </booktitle> <volume> vol. 2, </volume> <editor> F.P. Preparata, ed., </editor> <publisher> JAI Press Inc., </publisher> <address> Greenwich, CT, </address> <year> 1984, </year> <pages> 147-161. </pages>
Reference-contexts: Two typical resolution rules are integer coordinates for the vertices, or a minimum distance ffi between any two vertices. When a resolution rule is given, it is meaningful to consider the problem of finding drawings with minimum area. Planar 1 drawings require (n 2 ) area in the worst-case <ref> [11] </ref>. Further results on the area of planar drawings appear in [2,10,19,36]. 1.2 Model Here we describe a framework for dynamic graph drawing algorithms.
Reference: [12] <author> P. Duchet, Y. Hamidoune, M. Las Vergnas, and H. Meyniel, </author> <title> "Representing a Planar Graph by Vertical Lines Joining Different Levels," </title> <booktitle> Discrete Mathematics 46 (1983), </booktitle> <pages> 319-321. </pages>
Reference: [13] <author> P. Eades, </author> <title> "A Heuristic for Graph Drawing," </title> <booktitle> Congressus Numerantium 42 (1984), </booktitle> <pages> 149-160. </pages>
Reference: [14] <author> P. Eades and X. Lin, </author> <title> "How to Draw Directed Graphs," </title> <booktitle> Proc. IEEE Workshop on Visual Languages (VL'89) (1989), </booktitle> <pages> 13-17. </pages>
Reference: [15] <author> P. Eades and R. Tamassia, </author> <title> "Algorithms for Automatic Graph Drawing: An Annotated Bibliography," </title> <institution> Dept. of Computer Science, Brown Univ., </institution> <type> Technical Report CS-89-09, </type> <year> 1989. </year>
Reference-contexts: 1 Introduction Drawing graphs is an important problem that combines flavors of computational geometry and graph theory. Applications can be found in a variety of areas including circuit layout, network management, software engineering, and graphics. For a survey on graph drawing, see <ref> [15] </ref>. While this area has recently received increasing attention (see, e.g., [3,10,18,19,25,28, 36]), the study of drawing graphs in a dynamic setting has been an open problem.
Reference: [16] <author> H. Edelsbrunner, L.J. Guibas, and J. Stolfi, </author> <title> "Optimal Point Location in a Monotone Subdivision," </title> <journal> SIAM J. Computing 15 (1986), </journal> <pages> 317-340. </pages>
Reference-contexts: Planar st-digraphs, which include series-parallel digraphs as a special case, were first introduced by Lempel, Even, and Cederbaum [27] in connection with a planarity testing algorithm, and they have subsequently been used in several applications, including planar graph embedding [4,8,42], graph drawing [7,9], and planar point location <ref> [16, 21,32,48] </ref>. A planar st-digraph is a planar acyclic directed graph with exactly one source vertex s and exactly one sink vertex t, which is embedded in the plane such that s and t are on the boundary of the external face.
Reference: [17] <author> D. Eppstein, G.F. Italiano, R. Tamassia, R.E. Tarjan, J. Westbrook, and M. Yung, </author> <title> "Maintenance of a Minimum Spanning Forest in a Dynamic Planar Graph," </title> <booktitle> Proc. First ACM-SIAM Symp. on Discrete Algorithms (1990), </booktitle> <pages> 1-11. </pages>
Reference: [18] <author> M. Formann, T. Hagerup, J. Haralambides, M. Kaufmann, F.T. Leighton, A. Simvonis, E. Welzl, and G. Woeginger, </author> <title> "Drawing Graphs in the Plane with High Resolution," </title> <booktitle> Proc. IEEE Symp. on Foundations of Computer Science (1990), </booktitle> <pages> 86-95. </pages>
Reference: [19] <author> H. de Fraysseix, J. Pach, and R. Pollack, </author> <title> "How to Draw a Planar Graph on a Grid," </title> <booktitle> Combi-natorica 10 (1990), </booktitle> <pages> 41-51. 36 </pages>
Reference: [20] <author> Z. </author> <title> Galil and G.F. Italiano, "Fully Dynamic Planarity Testing," </title> <booktitle> Proc. ACM Symp. on Theory of Computing (1992). </booktitle>
Reference-contexts: Semidynamic planarity testing can be done with O (log n) query and insertion time [8]. Recently, a fully dynamic planarity testing technique with O (n 2=3 ) query and update time has been discovered <ref> [20] </ref>. * Dynamize drawing methods for general graphs that are based on physical models of the layout process, such as the "spring" algorithm [13,26]. Acknowledgement We are grateful to Paola Bertolazzi for helpful discussions and insights. 35
Reference: [21] <author> M.T. Goodrich and R. Tamassia, </author> <title> "Dynamic Trees and Dynamic Point Location," </title> <booktitle> Proc. 23th ACM Symp. on Theory of Computing (1991), </booktitle> <pages> 523-533. </pages>
Reference: [22] <author> L.J. Guibas and R. Sedgewick, </author> <title> "A Dichromatic Framework for Balanced Trees," </title> <booktitle> Proc. 19th IEEE Symp. on Foundations of Computer Science (1978), </booktitle> <pages> 8-21. </pages>
Reference-contexts: This drawing method is extended to general planar st-digraphs by inserting a dummy vertex (a bend) along each transitive edge. We represent sequences L and R by means of balanced binary trees T L and T R (e.g., using red-black trees <ref> [22] </ref>). Each leaf represents a vertex, edge, or face. At each leaf, we keep the following binary value: 1 if the node is associated with a vertex or a transitive edge, and 0 otherwise.
Reference: [23] <author> L.J. Guibas and F.F. Yao, </author> <title> "On Translating a Set of Rectangles," </title> <booktitle> in Advances in Computing Research, </booktitle> <volume> vol. 1, </volume> <editor> F.P. Preparata, ed., </editor> <publisher> JAI Press Inc., </publisher> <address> Greenwich, CT, </address> <year> 1983, </year> <pages> 61-77. </pages>
Reference-contexts: We conclude that our dynamic data structure uses O (n) space and supports each operation in O (log n) time. 4.2 Visibility Drawings The concept of visibility plays a fundamental role in a variety of geometric problems and applications, such as art gallery problems [31], VLSI layout [24,35,51], motion planning <ref> [23] </ref>, and graph drawing [7,45].
Reference: [24] <author> M.Y. Hsueh and D.O. Pederson, </author> <title> "Computer-Aided Layout of LSI Circuit Building-Blocks," </title> <booktitle> Proc. IEEE Int. Symp. on Circuits and Systems (1979), </booktitle> <pages> 474-477. </pages>
Reference: [25] <author> M.D. Hutton and A. Lubiw, </author> <title> "Upward Planar Drawing of Single Source Acyclic Digraphs," </title> <booktitle> Proc. ACM-SIAM Symp. on Discrete Algorithms (1991), </booktitle> <pages> 203-211. </pages>
Reference-contexts: The static algorithm of [41] is based on network flow techniques for which no dynamic methods are known. * Devise dynamic algorithms to test whether a digraph admits an upward planar drawing. Static algorithms that perform this test are known only for triconnected digraphs [3] and for single-source digraphs <ref> [25] </ref>. Semidynamic planarity testing can be done with O (log n) query and insertion time [8].
Reference: [26] <author> T. Kamada, </author> <title> Visualizing Abstract Objects and Relations, </title> <publisher> World Scientific, </publisher> <address> Teaneck, NJ, </address> <year> 1989. </year>
Reference: [27] <author> A. Lempel, S. Even, and I. Cederbaum, </author> <title> "An Algorithm for Planarity Testing of Graphs," in Theory of Graphs, </title> <booktitle> Int. Symposium (Rome, 1966), </booktitle> <publisher> Gordon and Breach, </publisher> <address> New York, </address> <year> 1967, </year> <pages> 215-232. </pages>
Reference-contexts: First, we discuss upward drawings of planar st-digraphs, and next we extend the results to (undirected) biconnected planar graphs. Planar st-digraphs, which include series-parallel digraphs as a special case, were first introduced by Lempel, Even, and Cederbaum <ref> [27] </ref> in connection with a planarity testing algorithm, and they have subsequently been used in several applications, including planar graph embedding [4,8,42], graph drawing [7,9], and planar point location [16, 21,32,48].
Reference: [28] <author> S.M. Malitz and A. Papakostas, </author> <title> "On the Angular Resolution of Planar Graphs," </title> <booktitle> Proc. ACM Symp. on Theory of Computing (1992). </booktitle>
Reference: [29] <author> S. Moen, </author> <title> "Drawing Dynamic Trees," </title> <booktitle> IEEE Software 7 (1990), </booktitle> <pages> 21-28. </pages>
Reference-contexts: For a survey on graph drawing, see [15]. While this area has recently received increasing attention (see, e.g., [3,10,18,19,25,28, 36]), the study of drawing graphs in a dynamic setting has been an open problem. Previous work <ref> [29] </ref> only considers trees and presents a technique that restructures the drawing of a tree in time proportional to its height, and hence linear in the worst case.
Reference: [30] <author> T. Nishizeki and N. Chiba, </author> <title> Planar Graphs: Theory and Algorithms, </title> <booktitle> Annals of Discrete Mathematics 32, </booktitle> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: A planar embedding specifies the circular order of the edges around a vertex in a planar drawing. Hence, different drawings may have the same planar embedding. Note that a planar graph may have an exponential number of planar embeddings (see, e.g. <ref> [30] </ref>). An upward drawing of an acyclic digraph has all the edges flowing from bottom to top. Planar upward drawings are attracting increasing theoretical and practical interest [3,6,7,9,14,25,39,49]. A visibility representation maps vertices to horizontal segments and edges to vertical segments that intersect only the two corresponding vertex segments.
Reference: [31] <author> J. O'Rourke, </author> <title> Art Gallery Theorems and Algorithms, </title> <publisher> Oxford University Press, </publisher> <year> 1987. </year>
Reference-contexts: We conclude that our dynamic data structure uses O (n) space and supports each operation in O (log n) time. 4.2 Visibility Drawings The concept of visibility plays a fundamental role in a variety of geometric problems and applications, such as art gallery problems <ref> [31] </ref>, VLSI layout [24,35,51], motion planning [23], and graph drawing [7,45].
Reference: [32] <author> F.P. Preparata and R. Tamassia, </author> <title> "Fully Dynamic Point Location in a Monotone Subdivision," </title> <journal> SIAM J. Computing 18 (1989), </journal> <pages> 811-830. </pages>
Reference: [33] <author> E. Reingold and J. Tilford, </author> <title> "Tidier Drawing of Trees," </title> <journal> IEEE Trans. on Software Engineering SE-7 (1981), </journal> <pages> 223-228. </pages>
Reference-contexts: Symmetric: Symmetric subtrees have drawings that are congruent up to a translation and a reflection. Quadratic-Area: The drawing has O (n 2 ) area. Reingold and Tilford <ref> [33] </ref> argue that drawings satisfying P S are aesthetically pleasing and show how to construct them in O (n) time. We give a fully dynamic algorithm for constructing such drawings. However, in general the drawings produced by the algorithm of [33] are less wide than those produced by our algorithm. <p> Reingold and Tilford <ref> [33] </ref> argue that drawings satisfying P S are aesthetically pleasing and show how to construct them in O (n) time. We give a fully dynamic algorithm for constructing such drawings. However, in general the drawings produced by the algorithm of [33] are less wide than those produced by our algorithm. Note that finding drawings of minimum width that satisfy the above properties is NP-hard [40].
Reference: [34] <author> P. Rosenstiehl and R.E. Tarjan, </author> <title> "Rectilinear Planar Layouts of Planar Graphs and Bipolar Orientations," </title> <booktitle> Discrete & Computational Geometry 1 (1986), </booktitle> <pages> 343-353. </pages>
Reference: [35] <author> M. Schlag, F. Luccio, P. Maestrini, D.T. Lee, and C.K. Wong, </author> <title> "A Visibility Problem in VLSI Layout Compaction," </title> <booktitle> in Advances in Computing Research, </booktitle> <volume> vol. 2, </volume> <editor> F.P. Preparata, ed., </editor> <publisher> JAI Press Inc., </publisher> <address> Greenwich, CT, </address> <year> 1985, </year> <pages> 259-282. </pages>
Reference: [36] <author> W. Schnyder, </author> <title> "Embedding Planar Graphs on the Grid," </title> <booktitle> Proc. ACM-SIAM Symp. on Discrete Algorithms (1990), </booktitle> <pages> 138-148. </pages>
Reference-contexts: Applications can be found in a variety of areas including circuit layout, network management, software engineering, and graphics. For a survey on graph drawing, see [15]. While this area has recently received increasing attention (see, e.g., <ref> [3,10,18,19,25,28, 36] </ref>), the study of drawing graphs in a dynamic setting has been an open problem. Previous work [29] only considers trees and presents a technique that restructures the drawing of a tree in time proportional to its height, and hence linear in the worst case.
Reference: [37] <author> D.D. Sleator and R.E. Tarjan, </author> <title> "A Data Structure for Dynamic Trees," </title> <editor> J. </editor> <booktitle> Computer Systems Sciences 24 (1983), </booktitle> <pages> 362-381. </pages>
Reference-contexts: Additionally, since the reference point of 2 () is at (0; 0), the transfer vector gives us the actual values of level (-), and reference (). We get path using the following operations, derived from dynamic trees <ref> [37] </ref>: * splice (path ) | This operation assumes that is a solid path ending at 6= . Convert the dashed edge leaving to solid and convert the solid edge (if it exists) entering the parent of to dashed. <p> This operation is the inverse of expose, and also consists of a sequence of splice operations <ref> [37] </ref>.
Reference: [38] <author> D.D. Sleator and R.E. Tarjan, </author> <title> "Self-Adjusting Binary Search Trees," </title> <editor> J. </editor> <booktitle> ACM 32 (1985), </booktitle> <pages> 652-686. </pages>
Reference-contexts: Operations PathFind and TreeFind use the following function which returns the distin guished node of a path: * find (path ; selectionfunction S; value q) | Find node of returned by path selection function S with query argument q. We need the following operation from <ref> [38] </ref> in our implementation of find (; S; q): * splaystep (node ) | For binary tree B with root and node a grandchild of , restructure B such that the relative order of the leaves of B remain fixed, and every node in the subtree rooted at has its depth
Reference: [39] <author> K. Sugiyama, S. Tagawa, and M. </author> <title> Toda, "Methods for Visual Understanding of Hierarchical Systems," </title> <journal> IEEE Trans. on Systems, Man, and Cybernetics SMC-11 (1981), </journal> <pages> 109-125. </pages>
Reference: [40] <author> K.J. Supowit and E.M. Reingold, </author> <title> "The Complexity of Drawing Trees Nicely," </title> <booktitle> Acta Informat-ica 18 (1983), </booktitle> <pages> 377-392. </pages>
Reference-contexts: We give a fully dynamic algorithm for constructing such drawings. However, in general the drawings produced by the algorithm of [33] are less wide than those produced by our algorithm. Note that finding drawings of minimum width that satisfy the above properties is NP-hard <ref> [40] </ref>.
Reference: [41] <author> R. Tamassia, </author> <title> "On Embedding a Graph in the Grid with the Minimum Number of Bends," </title> <journal> SIAM J. Computing 16 (1987), </journal> <pages> 421-444. 37 </pages>
Reference-contexts: The techniques of [19,36] appear difficult to dynamize. 34 * Dynamically maintain planar orthogonal drawings with the minimum number of bends. The static algorithm of <ref> [41] </ref> is based on network flow techniques for which no dynamic methods are known. * Devise dynamic algorithms to test whether a digraph admits an upward planar drawing. Static algorithms that perform this test are known only for triconnected digraphs [3] and for single-source digraphs [25].
Reference: [42] <author> R. Tamassia, </author> <title> "A Dynamic Data Structure for Planar Graph Embedding," </title> <booktitle> Proc. 15th ICALP, LNCS 317 (1988), </booktitle> <pages> 576-590. </pages>
Reference-contexts: Each of these steps can be implemented in O (log n) time. Therefore, operation Locate is performed in O (log n) time. To implement operation Window we keep the data structure of <ref> [42] </ref> to to maintain the planar embedding of G. In particular given a face f of G in an upward embedding of series-parallel digraph G, we can find two lists of edges and vertices that comprise the left and right boundary of f . <p> Note that we do not maintain a dynamic drawing predicate. Data Structure We maintain on-line an orientation of G into a planar st-digraph. This can be done using the techniques of <ref> [42] </ref>. We can extend Theorem 5 to support the insertion of an edge between two vertices that are not on the same face of the current embedding, using the techniques of [8].
Reference: [43] <author> R. Tamassia and F.P. Preparata, </author> <title> "Dynamic Maintenance of Planar Digraphs, with Applications," </title> <booktitle> Algorithmica 5 (1990), </booktitle> <pages> 509-527. </pages>
Reference-contexts: The corresponding modifications of node values can be done in O (log n) time. Also, sequences L and R are updated by means of O (1) split/concatenate operations <ref> [43] </ref>, so that the corresponding updates on T L and T R take O (log n) time. <p> Draw each edge-segment fi (e) at x-coordinate X (left (e)) and between y-coordinates Y (low (e)) and Y (high (e)). Consider the orderings L and R defined in Section 4.2. The restriction of sequence L (or R) to V is a topological ordering <ref> [43] </ref>. Hence, we can use balanced binary trees to dynamically maintain topological orderings X and Y , such that the position of a vertex- or edge-segment can be computed in O (log n) time. 4.3 Biconnected Planar Graphs Finally, we extend our results to (undirected) biconnected planar graphs.
Reference: [44] <author> R. Tamassia and I.G. Tollis, </author> <title> "A Unified Approach to Visibility Representations of Planar Graphs," </title> <booktitle> Discrete & Computational Geometry 1 (1986), </booktitle> <pages> 321-341. </pages>
Reference-contexts: Data Structure We recall that in a planar st-digraph the incoming edges of each vertex appear consecutively around the vertex, and so do the outgoing edges <ref> [44] </ref>. The faces separating the incoming and 32 outgoing edges of vertex v to the left and right of v are called left (v) and right (v), respectively.
Reference: [45] <author> R. Tamassia and I.G. Tollis, </author> <title> "Planar Grid Embedding in Linear Time," </title> <journal> IEEE Trans. on Circuits and Systems CAS-36 (1989), </journal> <pages> 1230-1234. </pages>
Reference: [46] <author> R. Tamassia and I.G. Tollis, </author> <title> "Tessellation Representations of Planar Graphs," </title> <booktitle> Proc. 27th Annual Allerton Conf. </booktitle> <year> (1989), </year> <pages> 48-57. </pages>
Reference: [47] <author> R. Tamassia and I.G. Tollis, </author> <title> "Representations of Graphs on a Cylinder," </title> <note> SIAM J. on Discrete Mathematics 4 (1991), 139-149. </note>
Reference: [48] <author> R. Tamassia and J.S. Vitter, </author> <title> "Parallel Transitive Closure and Point Location in Planar Structures," </title> <journal> SIAM J. Computing 20 (1991), </journal> <pages> 708-725. </pages>
Reference: [49] <author> C. Thomassen, </author> <title> "Planar Acyclic Oriented Graphs," </title> <booktitle> Order 5 (1989), </booktitle> <pages> 349-361. </pages>
Reference: [50] <author> J. Valdes, R.E. Tarjan, and E.L. Lawler, </author> <title> "The Recognition of Series Parallel Digraphs," </title> <journal> SIAM J. on Computing 11 (1982), </journal> <pages> 298-313. </pages>
Reference-contexts: If G has m edges, then T has O (m) nodes. Tree T can be constructed in O (m) time using the recognition algorithm of <ref> [50] </ref>. Let bean S-node with children 1 ; . . . ; k .
Reference: [51] <author> S. Wimer, I. Koren, and I. Cederbaum, "Floorplans, </author> <title> Planar Graphs, and Layouts," </title> <journal> IEEE Trans. on Circuits and Systems 35 (1988), </journal> <pages> 267-278. </pages>
Reference: [52] <author> S.K. Wismath, </author> <title> "Characterizing Bar Line-of-Sight Graphs," </title> <booktitle> Proc. ACM Symp. on Computational Geometry (1985), </booktitle> <pages> 147-152. </pages>
Reference: [53] <author> S.K. Wismath, </author> <title> "Weighted Visibility Graphs of Bars and Related Flow Problems," </title> <booktitle> Algorithms and Data Structures (Proc. WADS'89) (1989), </booktitle> <pages> 325-334. 38 </pages>
References-found: 53

