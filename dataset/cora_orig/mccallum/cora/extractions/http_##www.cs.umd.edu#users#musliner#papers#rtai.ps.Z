URL: http://www.cs.umd.edu/users/musliner/papers/rtai.ps.Z
Refering-URL: http://www.cs.umd.edu/users/musliner/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fmusliner,hendler,agrawalag@cs.umd.edu  durfee@eecs.umich.edu  fjks,cjpaulg@ece.cmu.edu  
Title: The Challenges of Real-Time AI  
Author: David J. Musliner and James A. Hendler and Ashok K. Agrawala Edmund H. Durfee Jay K. Strosnider and C. J. Paul 
Address: College Park, MD 20742  Ann Arbor, MI 48109  Pittsburgh, PA 15213  
Affiliation: Institute for Advanced Computer Studies The University of Maryland  Dept. of EE Computer Science The University of Michigan  Dept. of Elec. Computer Engineering Carnegie Mellon University  
Abstract: U. Maryland Technical Report CS-TR-3290, UMIACS-TR-94-69 June, 1994 An abridged version of this paper was submitted to IEEE Computer. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. E. Agre and D. Chapman, "Pengi: </author> <title> An Implementation of a Theory of Activity," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 268-272. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: However, in order to be applicable to hard real-time domains, existing representations of reaction (e.g., RAPs [26], routines <ref> [1] </ref>, and monitors [63]) must be extended to support predictable, provably-correct behavior. This requires enhanced capabilities to represent both the resource requirements of a reaction [56] and the functional behavior of a reaction [60].
Reference: [2] <author> J. F. Allen, </author> <title> "Maintaining Knowledge about Temporal Intervals," </title> <journal> Communications of the ACM, </journal> <volume> vol. 26, no. 11, </volume> <pages> pp. 832-843, </pages> <year> 1983. </year>
Reference-contexts: In the ICU domain, for example, if administering a particular test and analyzing the resulting data takes several minutes, it may be important for the system to anticipate this delay and implement intermediary treatment actions, pending the results of the test. Current AI research 15 on representations of time <ref> [2, 10, 32, 52, 71] </ref> generally involves complex constraint propagation mechanisms to maintain partial ordering relations between time intervals. In many cases, it may be possible to use simpler, more efficient temporal representations that can still provide the types of worst-case timing information required for real-time guarantees [57].
Reference: [3] <author> A. G. Barto, S. J. Bradtke, and S. P. Singh, </author> <title> "Real-time Learning and Control using Asynchronous Dynamic Programming," </title> <note> submitted to Artificial Intelligence, </note> <year> 1994. </year>
Reference-contexts: In addition, using learning methods to acquire reactions could provide improved reaction speed and coverage. Techniques that have proven useful in this area include compilation of reactive behaviors [64], "chunking" of previous action sequences [45], reinforcement learning [38, 59], and dynamic programming methods <ref> [3] </ref>. Such learning techniques allow a system to take necessary actions (e.g., increasing respirator rate) in emergencies (e.g., a decrease in blood pressure), if the action has been useful in the past.
Reference: [4] <author> M. Boddy and T. Dean, </author> <title> "Solving Time-Dependent Planning Problems," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 979-984, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: In addition, the process of composing larger systems from several incremental algorithms ("deliberation scheduling") is a growing area of research <ref> [4, 61] </ref>, closely related to scheduling research in the real-time systems community. Modifications to basic incremental methods may also lead to variants such as "dynamic expected runtime" tasks, which would occasionally re-evaluate their own expected runtimes and notify the real-time support system.
Reference: [5] <author> R. A. Brooks, </author> <title> "A Robust Layered Control System for a Mobile Robot," </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> vol. RA-2, no. 1, </volume> <pages> pp. 14-22, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Approximation techniques and multiple problem-solving methods [14, 46] may be used to provide additional flexibility within time bounds. * Purely reactive AI architectures like the subsumption architecture <ref> [5] </ref> and REX/Gapps [39], in which all of the reactive elements are assumed to run in real-time.
Reference: [6] <author> B. Chandrasekaran, R. Bhatnagar, and D. D. Sharma, </author> <title> "Real-Time Disturbance Control," </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, no. 8, </volume> <pages> pp. 33-47, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: A related technique that may improve real-time performance is to cache solutions for anticipated problems| that is, essentially creating a case memory based on reasoning about hypothetical situations, rather than on past practice <ref> [6] </ref>. This approach may include both compiling problem solutions and pre-prioritizing behavioral tradeoff decisions that may arise in the future. <p> understand how deadlines arise due to commitments between agents [68], how different types of relationships between the tasks at different agents influence the severity and flexibility of time commitments [12, 13], how commitments and goals can be revised, relaxed, and reassigned as unexpected events change what can be done when <ref> [6, 21, 23] </ref>, and how abstraction can be used to generate the right degree of commitment under various circumstances [24]. 5 Summary Extending previous work [22, 56], we have identified and described three fundamental approaches to developing real-time AI systems.
Reference: [7] <author> P. R. Cohen, M. L. Greenberg, D. M. Hart, and A. E. Howe, </author> <title> "Trial by Fire: Understanding the Design Requirements for Agents in Complex Environments," </title> <journal> AI Magazine, </journal> <volume> vol. 10, no. 3, </volume> <pages> pp. 33-48, </pages> <month> Fall </month> <year> 1989. </year>
Reference-contexts: This type of performance has been initially investigated by Cohen et al. <ref> [7, 33] </ref> using "envelopes" describing projected plan execution. Other techniques expected to be of use include extending planning systems to handle processes using quantitative [11, 62] and qualitative representations [15, 19], and modifying Bayesian techniques to cope with change over time.
Reference: [8] <author> T. Dean and M. Boddy, </author> <title> "An Analysis of Time-Dependent Planning," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 49-54, </pages> <year> 1988. </year>
Reference-contexts: Reactivity can be seen as the ultimate simplification or removal of AI search from planning tasks, and the variance of the tasks is removed with the search, making real-time guarantees feasible. * Any-time algorithms and deliberation-scheduling systems <ref> [8] </ref>, in which all AI tasks are cast as incremental methods that can be interrupted before any deadline, yielding a result that may have reduced precision, confidence, accuracy, etc. 2.2 Embedding Real-Time in AI Embedding real-time capabilities into an AI system is an alternative approach, which essentially assumes that the overall <p> Incremental improvement mechanisms allow an embedded-AI system to meet deadlines by simply interrupting the incremental algorithm when a deadline arrives. This approach, variously known as "any-time algorithms" <ref> [8] </ref>, "imprecise computations" [47], "best-so-far methods" [70], and "increasing reward for increasing service" (IRIS) tasks [16], has gained even more proponents than names.
Reference: [9] <author> T. Dean, L. P. Kaelbling, J. Kirman, and A. Nicholson, </author> <title> "Planning With Deadlines in Stochastic Domains," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 574-579, </pages> <year> 1993. </year> <note> 6 To appear as a University of Michigan technical report. 18 </note>
Reference-contexts: Incremental and Approximate Problem-solving Most current AI planning and problem-solving systems attempt to generate a complete and correct solution to a problem. In resource-bounded situations, it may be more effective to quickly generate an approximately correct solution. Incremental constraint-satisfaction techniques, iterative-deepening-style search strategies [41], dynamic programming <ref> [9] </ref>, transformational planning [53], and approximate reasoning methods [14, 46] are currently being explored as ways to generate incremental and improving solutions.
Reference: [10] <author> T. L. Dean, </author> <title> "Intractability and Time-Dependent Planning," </title> <booktitle> in Proceedings of the 1986 Work--shop on Reasoning about Actions & Plans, </booktitle> <pages> pp. 245-266. </pages> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <year> 1987. </year>
Reference-contexts: In the ICU domain, for example, if administering a particular test and analyzing the resulting data takes several minutes, it may be important for the system to anticipate this delay and implement intermediary treatment actions, pending the results of the test. Current AI research 15 on representations of time <ref> [2, 10, 32, 52, 71] </ref> generally involves complex constraint propagation mechanisms to maintain partial ordering relations between time intervals. In many cases, it may be possible to use simpler, more efficient temporal representations that can still provide the types of worst-case timing information required for real-time guarantees [57].
Reference: [11] <author> T. L. Dean and M. P. Wellman, </author> <title> Planning and Control, </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1991. </year>
Reference-contexts: This type of performance has been initially investigated by Cohen et al. [7, 33] using "envelopes" describing projected plan execution. Other techniques expected to be of use include extending planning systems to handle processes using quantitative <ref> [11, 62] </ref> and qualitative representations [15, 19], and modifying Bayesian techniques to cope with change over time. Concurrent Planning and Execution In the cooperative approach to real-time AI, the ability to concurrently plan and execute actions is crucial to successful performance [56, 65].
Reference: [12] <author> K. S. Decker and V. R. Lesser, </author> <title> "Quantitative Modeling of Complex Environments," </title> <booktitle> Int'l J. of Intelligent Systems in Accounting, Finance, and Management, </booktitle> <volume> vol. 2, no. 4, </volume> , <month> December </month> <year> 1993. </year>
Reference-contexts: It is important to understand how deadlines arise due to commitments between agents [68], how different types of relationships between the tasks at different agents influence the severity and flexibility of time commitments <ref> [12, 13] </ref>, how commitments and goals can be revised, relaxed, and reassigned as unexpected events change what can be done when [6, 21, 23], and how abstraction can be used to generate the right degree of commitment under various circumstances [24]. 5 Summary Extending previous work [22, 56], we have identified
Reference: [13] <author> K. S. Decker and V. R. Lesser, </author> <title> "Designing a Family of Coordination Algorithms," </title> <type> Technical Report 94-14, </type> <institution> University of Massachusetts, Department of Computer Science, </institution> <year> 1994. </year>
Reference-contexts: It is important to understand how deadlines arise due to commitments between agents [68], how different types of relationships between the tasks at different agents influence the severity and flexibility of time commitments <ref> [12, 13] </ref>, how commitments and goals can be revised, relaxed, and reassigned as unexpected events change what can be done when [6, 21, 23], and how abstraction can be used to generate the right degree of commitment under various circumstances [24]. 5 Summary Extending previous work [22, 56], we have identified
Reference: [14] <author> K. S. Decker, V. R. Lesser, and R. C. Whitehair, </author> <title> "Extending a Blackboard Architecture for Approximate Processing," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 2, no. 1/2, </volume> <pages> pp. 47-79, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Systems that address the conflict and are able to use the embedded-AI approach include: * Deliberative AI architectures such as PRS [30, 37], in which the AI search mechanisms may be bounded so that the overall response-time of the system can be predicted. Approximation techniques and multiple problem-solving methods <ref> [14, 46] </ref> may be used to provide additional flexibility within time bounds. * Purely reactive AI architectures like the subsumption architecture [5] and REX/Gapps [39], in which all of the reactive elements are assumed to run in real-time. <p> In resource-bounded situations, it may be more effective to quickly generate an approximately correct solution. Incremental constraint-satisfaction techniques, iterative-deepening-style search strategies [41], dynamic programming [9], transformational planning [53], and approximate reasoning methods <ref> [14, 46] </ref> are currently being explored as ways to generate incremental and improving solutions.
Reference: [15] <author> G. F. DeJong, </author> <title> "Learning to Plan in Continuous Domains," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 65, no. 1, </volume> , <month> January </month> <year> 1994. </year>
Reference-contexts: This type of performance has been initially investigated by Cohen et al. [7, 33] using "envelopes" describing projected plan execution. Other techniques expected to be of use include extending planning systems to handle processes using quantitative [11, 62] and qualitative representations <ref> [15, 19] </ref>, and modifying Bayesian techniques to cope with change over time. Concurrent Planning and Execution In the cooperative approach to real-time AI, the ability to concurrently plan and execute actions is crucial to successful performance [56, 65].
Reference: [16] <author> J. K. Dey, J. F. Kurose, and D. Towsley, </author> <title> "Efficient On-line Processor Scheduling for a Class of IRIS (Increasing Reward with Increasing Service) Real-Time Tasks," </title> <journal> Performance Evaluation Review, </journal> <volume> vol. 21, no. 1, </volume> , <month> June </month> <year> 1993. </year>
Reference-contexts: Incremental improvement mechanisms allow an embedded-AI system to meet deadlines by simply interrupting the incremental algorithm when a deadline arrives. This approach, variously known as "any-time algorithms" [8], "imprecise computations" [47], "best-so-far methods" [70], and "increasing reward for increasing service" (IRIS) tasks <ref> [16] </ref>, has gained even more proponents than names.
Reference: [17] <author> R. Dodhiawala, N. S. Sridharan, P. Raulefs, and C. Pickering, </author> <title> "Real-Time AI Systems: A Definition and An Architecture," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 256-261, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: In Hero-Soar [44], distinguished real-time productions bypass the normal deliberative operator selection phase; instead, the action of a real-time production is executed as soon as the production is matched. * Interruptible blackboard-style systems like PRS [30, 37] and RT-1 <ref> [17] </ref>.
Reference: [18] <author> R. B. Doorenbos, </author> <title> "Matching 100,000 Learned Rules," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 290-296, </pages> <year> 1993. </year>
Reference-contexts: This model essentially assumes that the system has sufficient resources to guarantee that every real-time reaction will meet its deadline, and that intelligence is primarily 5 But see <ref> [18] </ref> for recent results indicating that, in some cases, such pattern matching may be scalable. 8 * Scheduler Feedback. * Scheduling Iterative Tasks. * Communication. * Scenario Swapping (Mode Switching). * Real-time Task Languages. * Non-real-time Tasks. * Enhanced Task Specifications. useful for mediating amongst these sometimes-contradictory reactions (e.g., when one
Reference: [19] <author> B. Drabble, "EXCALIBUR: </author> <title> A Program for Planning and Reasoning with Processes," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 62, no. 1, </volume> , <month> July </month> <year> 1993. </year>
Reference-contexts: This type of performance has been initially investigated by Cohen et al. [7, 33] using "envelopes" describing projected plan execution. Other techniques expected to be of use include extending planning systems to handle processes using quantitative [11, 62] and qualitative representations <ref> [15, 19] </ref>, and modifying Bayesian techniques to cope with change over time. Concurrent Planning and Execution In the cooperative approach to real-time AI, the ability to concurrently plan and execute actions is crucial to successful performance [56, 65].
Reference: [20] <author> D. Draper, S. Hanks, and D. Weld, </author> <title> "Probabilistic Planning with Information Gathering and Contingent Execution," </title> <type> Technical Report 93-12-04, </type> <institution> University of Washington, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Utility-based modeling Given the dynamic and uncertain nature of real world domains (particularly as viewed through sensor readings), an intelligent control system must often make decisions based on incomplete information. To achieve optimal behavior according to some metric, the system might reason about probabilities and expected utilities <ref> [20, 25, 36, 72] </ref>. However, traditional decision theory often requires more information than is available in realistic domains. In these situations, a more qualitative model of uncertainty and decision-making is needed, including the ability to represent the growth of uncertainty as time passes.
Reference: [21] <author> E. H. Durfee and V. R. Lesser, </author> <title> "Incremental Planning to Control a Time-Constrained, Blackboard-Based Problem Solver," </title> <journal> IEEE Trans. Aerospace and Electronic Systems, </journal> <volume> vol. 24, no. 5, </volume> <pages> pp. 647-662, </pages> <year> 1988. </year>
Reference-contexts: understand how deadlines arise due to commitments between agents [68], how different types of relationships between the tasks at different agents influence the severity and flexibility of time commitments [12, 13], how commitments and goals can be revised, relaxed, and reassigned as unexpected events change what can be done when <ref> [6, 21, 23] </ref>, and how abstraction can be used to generate the right degree of commitment under various circumstances [24]. 5 Summary Extending previous work [22, 56], we have identified and described three fundamental approaches to developing real-time AI systems.
Reference: [22] <author> E. H. Durfee, </author> <title> "A Cooperative Approach to Planning for Real-Time Control," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 277-283, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Thus the ICU domain captures the need for both intelligent, symbolic, deliberative AI techniques, and the need for guaranteed real-time reactions. 2 Categorizing Approaches to Real-Time AI There are three principal ways that real-time systems and AI techniques can be combined into a single system <ref> [22, 56] </ref>: by embedding AI into a real-time system, by embedding real-time reactions into an AI system, and by coupling AI and real-time subsystems as parallel, cooperating components. Figure 1 illustrates these three system organizations. <p> flexibility of time commitments [12, 13], how commitments and goals can be revised, relaxed, and reassigned as unexpected events change what can be done when [6, 21, 23], and how abstraction can be used to generate the right degree of commitment under various circumstances [24]. 5 Summary Extending previous work <ref> [22, 56] </ref>, we have identified and described three fundamental approaches to developing real-time AI systems. This paper improves upon the previous classification by distinguishing the various approaches according to their performance goals, in addition to their architectural organization of real-time and AI methods.
Reference: [23] <author> E. H. Durfee and V. R. Lesser, </author> <title> "Partial Global Planning: A Coordination Framework for Distributed Hypothesis Formation," </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 21, no. 5, </volume> <pages> pp. 1167-1183, </pages> <year> 1991. </year>
Reference-contexts: understand how deadlines arise due to commitments between agents [68], how different types of relationships between the tasks at different agents influence the severity and flexibility of time commitments [12, 13], how commitments and goals can be revised, relaxed, and reassigned as unexpected events change what can be done when <ref> [6, 21, 23] </ref>, and how abstraction can be used to generate the right degree of commitment under various circumstances [24]. 5 Summary Extending previous work [22, 56], we have identified and described three fundamental approaches to developing real-time AI systems.
Reference: [24] <author> E. H. Durfee and T. A. Montgomery, </author> <title> "Coordination as Distributed Search in a Hierarchical Behavior Space," </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 21, no. 6, </volume> <pages> pp. 1363-1378, </pages> <year> 1991. </year>
Reference-contexts: different agents influence the severity and flexibility of time commitments [12, 13], how commitments and goals can be revised, relaxed, and reassigned as unexpected events change what can be done when [6, 21, 23], and how abstraction can be used to generate the right degree of commitment under various circumstances <ref> [24] </ref>. 5 Summary Extending previous work [22, 56], we have identified and described three fundamental approaches to developing real-time AI systems. This paper improves upon the previous classification by distinguishing the various approaches according to their performance goals, in addition to their architectural organization of real-time and AI methods.
Reference: [25] <author> O. Etzione, </author> <title> "Embedding Decision-Analytic Control in a Learning Architecture," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 49, </volume> <pages> pp. 129-159, </pages> <year> 1991. </year>
Reference-contexts: Utility-based modeling Given the dynamic and uncertain nature of real world domains (particularly as viewed through sensor readings), an intelligent control system must often make decisions based on incomplete information. To achieve optimal behavior according to some metric, the system might reason about probabilities and expected utilities <ref> [20, 25, 36, 72] </ref>. However, traditional decision theory often requires more information than is available in realistic domains. In these situations, a more qualitative model of uncertainty and decision-making is needed, including the ability to represent the growth of uncertainty as time passes.
Reference: [26] <author> R. J. Firby, </author> <title> "An Investigation into Reactive Planning in Complex Domains," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 202-206, </pages> <year> 1987. </year>
Reference-contexts: However, in order to be applicable to hard real-time domains, existing representations of reaction (e.g., RAPs <ref> [26] </ref>, routines [1], and monitors [63]) must be extended to support predictable, provably-correct behavior. This requires enhanced capabilities to represent both the resource requirements of a reaction [56] and the functional behavior of a reaction [60].
Reference: [27] <author> A. Garvey and V. Lesser, </author> <title> "Design-to-time Real-Time Scheduling," </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 23, no. 6, </volume> <pages> pp. 1491-1502, </pages> <year> 1993. </year>
Reference-contexts: Using this update information, an intelligent real-time control system could modify its task schedules and adjust its behavior to account for its current progress and expected future work. Customized Problem-solving A slightly different approach, under investigation by Garvey & Lesser <ref> [27] </ref>, is to postulate a finite set of alternative computation methods for solving each particular problem a system might face.
Reference: [28] <author> A. Garvey and V. Lesser, </author> <title> "A Survey of Research in Deliberative Real-Time Artificial Intelligence," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 6, no. 3, </volume> , <month> May </month> <year> 1994. </year>
Reference-contexts: This subfield is still being defined by the common interests of researchers from both real-time and AI systems. As a result, the precise goals for various real-time AI systems are still in flux <ref> [28, 31, 43] </ref>. This paper describes an organizing conceptual structure for current real-time AI research, clarifying the different meanings this term has acquired for various researchers. Having identified the various goals of real-time AI research, we then specify some of the necessary steps towards reaching those goals.
Reference: [29] <author> E. Gat, M. G. Slack, D. P. Miller, and R. J. Firby, </author> <title> "Path Planning and Execution Monitoring for a Planetary Rover," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pp. 20-25, </pages> <year> 1990. </year>
Reference-contexts: This system must operate continuously and autonomously in an uncertain and incompletely-specified environment. The system must detect and react in real-time to unpredictable but dangerous situations such as navigation route blockages and non-geometric terrain hazards (e.g., sand-pits or other potential traps that cannot be detected by sensors directly <ref> [29] </ref>). These situations require a broad range of adaptability and reasoning processes (e.g., route planning) that are beyond the abilities of conventional real-time systems.
Reference: [30] <author> M. P. Georgeff and F. F. Ingrand, </author> <title> "Decision-Making in an Embedded Reasoning System," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 972-978, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Systems that address the conflict and are able to use the embedded-AI approach include: * Deliberative AI architectures such as PRS <ref> [30, 37] </ref>, in which the AI search mechanisms may be bounded so that the overall response-time of the system can be predicted. <p> In Hero-Soar [44], distinguished real-time productions bypass the normal deliberative operator selection phase; instead, the action of a real-time production is executed as soon as the production is matched. * Interruptible blackboard-style systems like PRS <ref> [30, 37] </ref> and RT-1 [17].
Reference: [31] <author> J. R. Greenwood and J. P. Marsh, </author> <title> "Real-Time AI: Software Architecture Issues," </title> <type> Technical report, </type> <institution> Advanced Decision Systems, </institution> <month> May </month> <year> 1987. </year>
Reference-contexts: This subfield is still being defined by the common interests of researchers from both real-time and AI systems. As a result, the precise goals for various real-time AI systems are still in flux <ref> [28, 31, 43] </ref>. This paper describes an organizing conceptual structure for current real-time AI research, clarifying the different meanings this term has acquired for various researchers. Having identified the various goals of real-time AI research, we then specify some of the necessary steps towards reaching those goals. <p> Real-time computing is not about building "fast" systems; it is about building systems that are predictably "fast enough" to act on their environments in well-specified ways <ref> [31, 43, 66, 69] </ref>. This understanding of what it means to be "real-time" is dramatically different from the casual, non-technical use of the term which has become common in many fields.
Reference: [32] <author> S. Hanks, </author> <title> "Practical Temporal Projection," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: In the ICU domain, for example, if administering a particular test and analyzing the resulting data takes several minutes, it may be important for the system to anticipate this delay and implement intermediary treatment actions, pending the results of the test. Current AI research 15 on representations of time <ref> [2, 10, 32, 52, 71] </ref> generally involves complex constraint propagation mechanisms to maintain partial ordering relations between time intervals. In many cases, it may be possible to use simpler, more efficient temporal representations that can still provide the types of worst-case timing information required for real-time guarantees [57].
Reference: [33] <author> D. M. Hart, S. D. Anderson, and P. R. Cohen, </author> <title> "Envelopes as a Vehicle for Improving the Efficiency of Plan Execution," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 71-76, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: This type of performance has been initially investigated by Cohen et al. <ref> [7, 33] </ref> using "envelopes" describing projected plan execution. Other techniques expected to be of use include extending planning systems to handle processes using quantitative [11, 62] and qualitative representations [15, 19], and modifying Bayesian techniques to cope with change over time.
Reference: [34] <author> B. Hayes-Roth, </author> <title> "An Architecture for Adaptive Intelligent Systems," </title> <note> accepted for publication in Artificial Intelligence, Special Issue on Agents and Interactivity, </note> <year> 1994. </year>
Reference-contexts: In the followings subsections, we provide additional details on the three main approaches to real-time AI, describing their overall performance goals and the 3 These examples are based on the Guardian real-time AI project <ref> [34] </ref> under the direction of Dr. Barbara Hayes-Roth at Stanford University. 5 difficulties to be addressed. Note that these categories are somewhat artificial, in that many implemented systems combine aspects from more than one approach.
Reference: [35] <author> J. Hendler and A. Agrawala, </author> <title> "Mission Critical Planning: </title> <booktitle> AI on the MARUTI Real-Time Operating System," in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 77-84, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Cooperative real-time AI systems span a wide range of designs, varying greatly in the complexity of the processing available on the respective AI and real-time subsystems, and in the precise relationship between these subsystems. At one extreme is a modified subsumption-based model such as DR/MARUTI <ref> [35] </ref> where a number of real-time reflexive behaviors execute concurrently, while higher-level AI processes adjust parameters that affect how the reflexive behaviors combine into outward action.
Reference: [36] <author> A. Howe and P. Cohen, </author> <title> "Failure Recovery: A Model and Experiments.," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 801-808, </pages> <year> 1991. </year>
Reference-contexts: Utility-based modeling Given the dynamic and uncertain nature of real world domains (particularly as viewed through sensor readings), an intelligent control system must often make decisions based on incomplete information. To achieve optimal behavior according to some metric, the system might reason about probabilities and expected utilities <ref> [20, 25, 36, 72] </ref>. However, traditional decision theory often requires more information than is available in realistic domains. In these situations, a more qualitative model of uncertainty and decision-making is needed, including the ability to represent the growth of uncertainty as time passes.
Reference: [37] <author> F. F. Ingrand and M. P. Georgeff, </author> <title> "Managing Deliberation and Reasoning in Real-Time AI Systems," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 284-291, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Systems that address the conflict and are able to use the embedded-AI approach include: * Deliberative AI architectures such as PRS <ref> [30, 37] </ref>, in which the AI search mechanisms may be bounded so that the overall response-time of the system can be predicted. <p> In Hero-Soar [44], distinguished real-time productions bypass the normal deliberative operator selection phase; instead, the action of a real-time production is executed as soon as the production is matched. * Interruptible blackboard-style systems like PRS <ref> [30, 37] </ref> and RT-1 [17].
Reference: [38] <author> L. P. Kaelbling, </author> <title> Learning in Embedded Systems, </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: In addition, using learning methods to acquire reactions could provide improved reaction speed and coverage. Techniques that have proven useful in this area include compilation of reactive behaviors [64], "chunking" of previous action sequences [45], reinforcement learning <ref> [38, 59] </ref>, and dynamic programming methods [3]. Such learning techniques allow a system to take necessary actions (e.g., increasing respirator rate) in emergencies (e.g., a decrease in blood pressure), if the action has been useful in the past.
Reference: [39] <author> L. P. Kaelbling and S. J. Rosenschein, </author> <title> "Action and Planning in Embedded Agents," </title> <booktitle> in Robotics and Autonomous Systems 6, </booktitle> <pages> pp. 35-48, </pages> <year> 1990. </year>
Reference-contexts: Approximation techniques and multiple problem-solving methods [14, 46] may be used to provide additional flexibility within time bounds. * Purely reactive AI architectures like the subsumption architecture [5] and REX/Gapps <ref> [39] </ref>, in which all of the reactive elements are assumed to run in real-time. <p> In many types of real-time AI systems, intelligently adapting to dynamic environments requires the ability to create and use reactive plans that can immediately make necessary changes while a planner begins to determine longer-term actions. For planners that build reactive plans, significant areas of research include reaction planning mechanisms <ref> [39, 53, 56, 65] </ref> and formalisms which can support the proofs of guaranteed behavior that are necessary in hard real-time domains [40, 49, 50]. The inherent parallelism of reactive control systems is a particularly challenging aspect for AI planners, which have largely focused on sequential plan execution.
Reference: [40] <author> R. C. Kohout, D. J. Musliner, and J. A. Hendler, </author> <title> "Grounding Dynamic Reaction on the Maruti Operating System," </title> <type> Technical Report CS-TR-3231, </type> <institution> University of Maryland Department of Computer Science, </institution> <month> April </month> <year> 1994. </year> <month> 20 </month>
Reference-contexts: This type of language may form a bridge between the knowledge and action representations common in AI planning systems and the more traditional systems-programming languages that real-time systems researchers have developed <ref> [40] </ref>. In the ICU domain, such a language would have to be capable of describing patient monitoring and treatment tasks, along with their projected effects on a patient (for planning) and their resource requirements (for scheduling). <p> For planners that build reactive plans, significant areas of research include reaction planning mechanisms [39, 53, 56, 65] and formalisms which can support the proofs of guaranteed behavior that are necessary in hard real-time domains <ref> [40, 49, 50] </ref>. The inherent parallelism of reactive control systems is a particularly challenging aspect for AI planners, which have largely focused on sequential plan execution. In addition, using learning methods to acquire reactions could provide improved reaction speed and coverage.
Reference: [41] <author> R. E. Korf, </author> <title> "Depth-Limited Search for Real-Time Problem-Solving," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 2, no. 1/2, </volume> <pages> pp. 7-24, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: These techniques include search-space pruning (removing portions of the space known to not contain a solution), search ordering (adjusting the order in which the search space is explored), and scoping (limiting the lookahead used to select operators). Other researchers are focusing on improved search algorithms such as RTA* <ref> [41] </ref>. If these techniques can be successfully applied to a particular domain's AI search problems, then the embedded-AI approach can provide real-time problem solving for the domain. <p> Incremental and Approximate Problem-solving Most current AI planning and problem-solving systems attempt to generate a complete and correct solution to a problem. In resource-bounded situations, it may be more effective to quickly generate an approximately correct solution. Incremental constraint-satisfaction techniques, iterative-deepening-style search strategies <ref> [41] </ref>, dynamic programming [9], transformational planning [53], and approximate reasoning methods [14, 46] are currently being explored as ways to generate incremental and improving solutions.
Reference: [42] <author> T.-W. Kuo and A. K. Mok, </author> <title> "Load Adjustment in Adaptive Real-Time Systems," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 160-170, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: However, the discrete set of alternative methods used in DTT may be much more feasible to accurately characterize than the generalized incremental computations needed for deliberation scheduling. Research in the real-time systems community on "version selection" [51] and "load adjustment" <ref> [42] </ref> is closely related to DTT. Precomputing AI systems currently solve problems from scratch or use memory-based techniques to solve current problems based on past experience.
Reference: [43] <author> T. J. Laffey, P. A. Cox, J. L. Schmidt, S. M. Kao, and J. Y. </author> <title> Read, "Real-Time Knowledge-Based Systems," </title> <journal> AI Magazine, </journal> <volume> vol. 9, no. 1, </volume> <pages> pp. 27-45, </pages> <year> 1988. </year>
Reference-contexts: This subfield is still being defined by the common interests of researchers from both real-time and AI systems. As a result, the precise goals for various real-time AI systems are still in flux <ref> [28, 31, 43] </ref>. This paper describes an organizing conceptual structure for current real-time AI research, clarifying the different meanings this term has acquired for various researchers. Having identified the various goals of real-time AI research, we then specify some of the necessary steps towards reaching those goals. <p> Real-time computing is not about building "fast" systems; it is about building systems that are predictably "fast enough" to act on their environments in well-specified ways <ref> [31, 43, 66, 69] </ref>. This understanding of what it means to be "real-time" is dramatically different from the casual, non-technical use of the term which has become common in many fields. <p> The new generation of AI systems are being called upon to provide decision-support capabilities that reduce the cognitive burden in these situations. Early efforts to build real-time AI systems focused largely on ad hoc speedups for existing AI methods, yielding systems that are only coincidently real-time <ref> [43] </ref>. That is, these systems have been tested and shown to operate quickly enough to meet domain deadlines for the test scenarios, and are thus considered guaranteed real-time.
Reference: [44] <author> J. E. Laird and P. S. Rosenbloom, </author> <title> "Integrating Execution, Planning, and Learning in Soar for External Environments," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <month> July </month> <year> 1990. </year>
Reference-contexts: Implemented embedded-real-time systems have used several methods to achieve this behavior, including: * Modified production systems such as Soar [45]. In Hero-Soar <ref> [44] </ref>, distinguished real-time productions bypass the normal deliberative operator selection phase; instead, the action of a real-time production is executed as soon as the production is matched. * Interruptible blackboard-style systems like PRS [30, 37] and RT-1 [17].
Reference: [45] <author> J. E. Laird, A. Newell, and P. S. Rosenbloom, </author> <title> "SOAR: An Architecture for General Intelligence," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 33, </volume> <pages> pp. 1-64, </pages> <year> 1987. </year>
Reference-contexts: These systems are designed to operate in domains where they can rely mainly on deliberative processing for the intelligent selection of actions, occasionally overridden or preempted by real-time reflexes. Implemented embedded-real-time systems have used several methods to achieve this behavior, including: * Modified production systems such as Soar <ref> [45] </ref>. In Hero-Soar [44], distinguished real-time productions bypass the normal deliberative operator selection phase; instead, the action of a real-time production is executed as soon as the production is matched. * Interruptible blackboard-style systems like PRS [30, 37] and RT-1 [17]. <p> Furthermore, some systems using this approach can add to their repertoire of reflexive actions based on inference or on experience (e.g., Soar's chunking <ref> [45] </ref>). The trouble with this approach is that the pattern-matching activity performed by the AI system against all of the possible cognitive and reflexive actions might be hard to bound 5 . <p> In addition, using learning methods to acquire reactions could provide improved reaction speed and coverage. Techniques that have proven useful in this area include compilation of reactive behaviors [64], "chunking" of previous action sequences <ref> [45] </ref>, reinforcement learning [38, 59], and dynamic programming methods [3]. Such learning techniques allow a system to take necessary actions (e.g., increasing respirator rate) in emergencies (e.g., a decrease in blood pressure), if the action has been useful in the past.
Reference: [46] <author> V. R. Lesser, J. Pavlin, and E. Durfee, </author> <title> "Approximate Processing in Real-Time Problem Solving," </title> <journal> AI Magazine, </journal> <volume> vol. 9, no. 1, </volume> <pages> pp. 49-61, </pages> <year> 1988. </year>
Reference-contexts: Systems that address the conflict and are able to use the embedded-AI approach include: * Deliberative AI architectures such as PRS [30, 37], in which the AI search mechanisms may be bounded so that the overall response-time of the system can be predicted. Approximation techniques and multiple problem-solving methods <ref> [14, 46] </ref> may be used to provide additional flexibility within time bounds. * Purely reactive AI architectures like the subsumption architecture [5] and REX/Gapps [39], in which all of the reactive elements are assumed to run in real-time. <p> In resource-bounded situations, it may be more effective to quickly generate an approximately correct solution. Incremental constraint-satisfaction techniques, iterative-deepening-style search strategies [41], dynamic programming [9], transformational planning [53], and approximate reasoning methods <ref> [14, 46] </ref> are currently being explored as ways to generate incremental and improving solutions.
Reference: [47] <author> J. W.-S. Liu, K.-J. Lin, and S. Natarajan, </author> <title> "Scheduling Real-Time, Periodic Jobs Using Imprecise Results," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 252-260, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: Scheduling Iterative Tasks Scheduling techniques that can utilize task performance profiles and integrate real-time and non-real-time tasks in a fair way are also of interest. The real-time systems counterpart to the any-time algorithm method, known as imprecise computation <ref> [47] </ref>, has led to several advances in such scheduling technologies. Additional work will be required, however, to improve our ability to build performance profiles automatically and to enhance schedulers to manage tasks that are characterized by more complex representations such as conditional performance profiles [73] or quality functions. <p> Incremental improvement mechanisms allow an embedded-AI system to meet deadlines by simply interrupting the incremental algorithm when a deadline arrives. This approach, variously known as "any-time algorithms" [8], "imprecise computations" <ref> [47] </ref>, "best-so-far methods" [70], and "increasing reward for increasing service" (IRIS) tasks [16], has gained even more proponents than names.
Reference: [48] <author> D. M. Lyons, A. J. Hendriks, and S. Mehta, </author> <title> "Achieving Robustness by Casting Planning as Adaptation of a Reactive System," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pp. 198-203, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Techniques useful in enabling this sort of behavior include the use of iterative planning models (which can rapidly identify promising steps towards goals) <ref> [48, 53] </ref> and decision-theoretic control techniques (which can identify the most important steps to take). Multi-agent Reasoning and Commitment In many cases, deadlines and time constraints stem from commitments between agents.
Reference: [49] <author> D. M. Lyons, </author> <title> "A Process-Based Approach to Task Plan Representation," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pp. 2142-2147, </pages> <year> 1990. </year>
Reference-contexts: Providing both rigorous execution timing control and useful semantic flexibility will be a significant challenge. The work by Lyons et al. on the RS representation <ref> [49, 50] </ref> exemplifies a programming language model that combines aspects of real-time temporal specifications with AI-like planning models. Enhanced Task Specifications Because the computational tasks in a real-time AI system may be generated automatically, the planning system may be able to provide detailed information about those tasks to the scheduler. <p> For planners that build reactive plans, significant areas of research include reaction planning mechanisms [39, 53, 56, 65] and formalisms which can support the proofs of guaranteed behavior that are necessary in hard real-time domains <ref> [40, 49, 50] </ref>. The inherent parallelism of reactive control systems is a particularly challenging aspect for AI planners, which have largely focused on sequential plan execution. In addition, using learning methods to acquire reactions could provide improved reaction speed and coverage.
Reference: [50] <author> D. M. Lyons, S. Mehta, and P. S. Gopinath, </author> <title> "Robust Representation and Execution of Robot Plans," </title> <booktitle> in Proc. IEEE EUROMICRO Workshop on Real-Time, </booktitle> <pages> pp. 34-41, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Providing both rigorous execution timing control and useful semantic flexibility will be a significant challenge. The work by Lyons et al. on the RS representation <ref> [49, 50] </ref> exemplifies a programming language model that combines aspects of real-time temporal specifications with AI-like planning models. Enhanced Task Specifications Because the computational tasks in a real-time AI system may be generated automatically, the planning system may be able to provide detailed information about those tasks to the scheduler. <p> For planners that build reactive plans, significant areas of research include reaction planning mechanisms [39, 53, 56, 65] and formalisms which can support the proofs of guaranteed behavior that are necessary in hard real-time domains <ref> [40, 49, 50] </ref>. The inherent parallelism of reactive control systems is a particularly challenging aspect for AI planners, which have largely focused on sequential plan execution. In addition, using learning methods to acquire reactions could provide improved reaction speed and coverage.
Reference: [51] <author> N. Malcolm and W. Zhao, </author> <title> "Version Selection Schemes for Hard Real-Time Communications," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 12-21, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: However, the discrete set of alternative methods used in DTT may be much more feasible to accurately characterize than the generalized incremental computations needed for deliberation scheduling. Research in the real-time systems community on "version selection" <ref> [51] </ref> and "load adjustment" [42] is closely related to DTT. Precomputing AI systems currently solve problems from scratch or use memory-based techniques to solve current problems based on past experience.
Reference: [52] <author> D. McDermott, </author> <title> "A Temporal Logic For Reasoning About Processes and Plans," </title> <journal> Cognitive Science, </journal> <volume> vol. 6, </volume> <pages> pp. 101-155, </pages> <year> 1982. </year>
Reference-contexts: In the ICU domain, for example, if administering a particular test and analyzing the resulting data takes several minutes, it may be important for the system to anticipate this delay and implement intermediary treatment actions, pending the results of the test. Current AI research 15 on representations of time <ref> [2, 10, 32, 52, 71] </ref> generally involves complex constraint propagation mechanisms to maintain partial ordering relations between time intervals. In many cases, it may be possible to use simpler, more efficient temporal representations that can still provide the types of worst-case timing information required for real-time guarantees [57].
Reference: [53] <author> D. McDermott, </author> <title> "Transformational Planning of Reactive Behavior," </title> <type> Technical Report 941, </type> <institution> Yale University Department of Computer Science, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Incremental and Approximate Problem-solving Most current AI planning and problem-solving systems attempt to generate a complete and correct solution to a problem. In resource-bounded situations, it may be more effective to quickly generate an approximately correct solution. Incremental constraint-satisfaction techniques, iterative-deepening-style search strategies [41], dynamic programming [9], transformational planning <ref> [53] </ref>, and approximate reasoning methods [14, 46] are currently being explored as ways to generate incremental and improving solutions. <p> In many types of real-time AI systems, intelligently adapting to dynamic environments requires the ability to create and use reactive plans that can immediately make necessary changes while a planner begins to determine longer-term actions. For planners that build reactive plans, significant areas of research include reaction planning mechanisms <ref> [39, 53, 56, 65] </ref> and formalisms which can support the proofs of guaranteed behavior that are necessary in hard real-time domains [40, 49, 50]. The inherent parallelism of reactive control systems is a particularly challenging aspect for AI planners, which have largely focused on sequential plan execution. <p> Techniques useful in enabling this sort of behavior include the use of iterative planning models (which can rapidly identify promising steps towards goals) <ref> [48, 53] </ref> and decision-theoretic control techniques (which can identify the most important steps to take). Multi-agent Reasoning and Commitment In many cases, deadlines and time constraints stem from commitments between agents.
Reference: [54] <author> D. P. Miller, </author> <title> Planning by Search Through Simulations, </title> <type> PhD thesis, </type> <institution> Yale University, </institution> <year> 1985. </year>
Reference-contexts: Research on this type of advanced scheduling system could involve extending the view of scheduling as a search process that can generate explicit feedback, and/or integrating scheduling mechanisms with more traditional AI planning technologies (e.g., Miller's work on planning by search through simulations <ref> [54] </ref>). Search is a particularly apt metaphor for complex multiprocessor scheduling tasks, so applying the AI community's experience with search methods may yield significant advances in this area.
Reference: [55] <author> D. J. Musliner, </author> <title> "Scheduling Automatically-Generated Real-Time Monitoring Tasks," </title> <journal> submitted to Intelligent Systems Engineering: The International Journal of AI in Engineering, </journal> <year> 1994. </year>
Reference-contexts: Or, the scheduler may be given timing information about a task other than just its worst-case execution time and required period (e.g., a probability distribution of arrival times for an event-driven task, or a maximum allowable invocation separation <ref> [55] </ref>). Advances in scheduling techniques that can take full advantage of this additional information should be able to schedule more tasks than simpler existing methods.
Reference: [56] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "CIRCA: A Cooperative Intelligent Real-Time Control Architecture," </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 23, no. 6, </volume> <pages> pp. 1561-1574, </pages> <year> 1993. </year>
Reference-contexts: The agent itself is subject to "bounded rationality" [67], because its data processors have limited speed and memory. The agent is also subject to "bounded reactivity" <ref> [56] </ref>, because its sensors and actuators are limited in their range, field of view, torque, accuracy, etc. Thus the agent has only a restricted capacity to sense its environment, process the sensed data, and use that information to affect its environment. <p> Thus the ICU domain captures the need for both intelligent, symbolic, deliberative AI techniques, and the need for guaranteed real-time reactions. 2 Categorizing Approaches to Real-Time AI There are three principal ways that real-time systems and AI techniques can be combined into a single system <ref> [22, 56] </ref>: by embedding AI into a real-time system, by embedding real-time reactions into an AI system, and by coupling AI and real-time subsystems as parallel, cooperating components. Figure 1 illustrates these three system organizations. <p> However, as noted in Section 1.1, trying to scheduling the superset of all tasks required in all modes of behavior can lead to very inefficient or infeasible system designs. Thus, at the other extreme of coroutining, real-time AI systems such as CIRCA <ref> [56, 57] </ref> have an AI component that reasons about which real-time behaviors need to be carried out at any given time, and designs a real-time control plan appropriately. <p> Such tradeoff techniques could make effective use of feedback information that an enhanced "cooperative" scheduler could provide. In the ICU domain, for example, the scheduler of a cooperative real-time AI system like CIRCA <ref> [56, 57] </ref> might indicate that a particular heart-monitoring task is the most severe constraint making a particular schedule infeasible. Using that feedback information, the system's planner might decide to decrease the required frequency of the monitoring task (and thus ease the scheduling constraints), if the patient is currently stable. <p> However, in order to be applicable to hard real-time domains, existing representations of reaction (e.g., RAPs [26], routines [1], and monitors [63]) must be extended to support predictable, provably-correct behavior. This requires enhanced capabilities to represent both the resource requirements of a reaction <ref> [56] </ref> and the functional behavior of a reaction [60]. In many types of real-time AI systems, intelligently adapting to dynamic environments requires the ability to create and use reactive plans that can immediately make necessary changes while a planner begins to determine longer-term actions. <p> In many types of real-time AI systems, intelligently adapting to dynamic environments requires the ability to create and use reactive plans that can immediately make necessary changes while a planner begins to determine longer-term actions. For planners that build reactive plans, significant areas of research include reaction planning mechanisms <ref> [39, 53, 56, 65] </ref> and formalisms which can support the proofs of guaranteed behavior that are necessary in hard real-time domains [40, 49, 50]. The inherent parallelism of reactive control systems is a particularly challenging aspect for AI planners, which have largely focused on sequential plan execution. <p> Concurrent Planning and Execution In the cooperative approach to real-time AI, the ability to concurrently plan and execute actions is crucial to successful performance <ref> [56, 65] </ref>. It is particularly useful to be able to begin executing plans before they can be completely fleshed out. <p> flexibility of time commitments [12, 13], how commitments and goals can be revised, relaxed, and reassigned as unexpected events change what can be done when [6, 21, 23], and how abstraction can be used to generate the right degree of commitment under various circumstances [24]. 5 Summary Extending previous work <ref> [22, 56] </ref>, we have identified and described three fundamental approaches to developing real-time AI systems. This paper improves upon the previous classification by distinguishing the various approaches according to their performance goals, in addition to their architectural organization of real-time and AI methods.
Reference: [57] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "World Modeling for the Dynamic Construction of Real-Time Control Plans," </title> <note> to appear in Artificial Intelligence, 1994. 21 </note>
Reference-contexts: However, as noted in Section 1.1, trying to scheduling the superset of all tasks required in all modes of behavior can lead to very inefficient or infeasible system designs. Thus, at the other extreme of coroutining, real-time AI systems such as CIRCA <ref> [56, 57] </ref> have an AI component that reasons about which real-time behaviors need to be carried out at any given time, and designs a real-time control plan appropriately. <p> Such tradeoff techniques could make effective use of feedback information that an enhanced "cooperative" scheduler could provide. In the ICU domain, for example, the scheduler of a cooperative real-time AI system like CIRCA <ref> [56, 57] </ref> might indicate that a particular heart-monitoring task is the most severe constraint making a particular schedule infeasible. Using that feedback information, the system's planner might decide to decrease the required frequency of the monitoring task (and thus ease the scheduling constraints), if the patient is currently stable. <p> In many cases, it may be possible to use simpler, more efficient temporal representations that can still provide the types of worst-case timing information required for real-time guarantees <ref> [57] </ref>. Representation and Prediction of Processes In a medical diagnostic knowledge-based system, the inputs used in making the diagnosis are typically symptoms observed at a particular time.
Reference: [58] <author> C. J. Paul, A. Acharya, B. Black, and J. K. Strosnider, </author> <title> "Reducing Problem-Solving Variance to Improve Predictability," </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, no. 8, </volume> <pages> pp. 81-93, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: The fundamental problem with this approach is that AI tasks are generally ill-suited to real-time scheduling mechanisms, which rely on allocating the worst-case execution time for all tasks. AI tasks such as planning and search-based problem-solving often have unknown or extremely large worst-case execution times <ref> [58] </ref>. While conventional real-time tasks often have small execution time variations due to data dependency, many AI tasks have additional variations due to search and backtracking.
Reference: [59] <author> A. Ram and J. C. Santamara, </author> <title> "Multistrategy Learning in Reactive Control Systems for Autonomous Robotic Navigation," </title> <journal> Informatica, </journal> <volume> vol. 17, no. 4, </volume> <pages> pp. 347-369, </pages> <year> 1993. </year>
Reference-contexts: In addition, using learning methods to acquire reactions could provide improved reaction speed and coverage. Techniques that have proven useful in this area include compilation of reactive behaviors [64], "chunking" of previous action sequences [45], reinforcement learning <ref> [38, 59] </ref>, and dynamic programming methods [3]. Such learning techniques allow a system to take necessary actions (e.g., increasing respirator rate) in emergencies (e.g., a decrease in blood pressure), if the action has been useful in the past.
Reference: [60] <author> S. J. Rosenschein and L. P. Kaelbling, </author> <title> "The Synthesis of Digital Machines with Provable Epistemic Properties," </title> <booktitle> in Proc. Conf. Theoretical Aspects of Reasoning About Knowledge, </booktitle> <pages> pp. 83-98, </pages> <year> 1986. </year>
Reference-contexts: This requires enhanced capabilities to represent both the resource requirements of a reaction [56] and the functional behavior of a reaction <ref> [60] </ref>. In many types of real-time AI systems, intelligently adapting to dynamic environments requires the ability to create and use reactive plans that can immediately make necessary changes while a planner begins to determine longer-term actions.
Reference: [61] <author> S. J. Russell and S. Zilberstein, </author> <title> "Composing Real-Time Systems," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 212-217, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: In addition, the process of composing larger systems from several incremental algorithms ("deliberation scheduling") is a growing area of research <ref> [4, 61] </ref>, closely related to scheduling research in the real-time systems community. Modifications to basic incremental methods may also lead to variants such as "dynamic expected runtime" tasks, which would occasionally re-evaluate their own expected runtimes and notify the real-time support system.
Reference: [62] <author> R. M. Salter, </author> <title> "Planning in a Continuous Domain| An Introduction," </title> <journal> Robotica, </journal> <volume> vol. 1, </volume> <pages> pp. 85-93, </pages> <year> 1983. </year>
Reference-contexts: This type of performance has been initially investigated by Cohen et al. [7, 33] using "envelopes" describing projected plan execution. Other techniques expected to be of use include extending planning systems to handle processes using quantitative <ref> [11, 62] </ref> and qualitative representations [15, 19], and modifying Bayesian techniques to cope with change over time. Concurrent Planning and Execution In the cooperative approach to real-time AI, the ability to concurrently plan and execute actions is crucial to successful performance [56, 65].
Reference: [63] <author> J. C. Sanborn and J. A. Hendler, </author> <title> "A Model of Reaction for Planning in Dynamic Environments," </title> <journal> Int'l Journal for Artificial Intelligence in Engineering, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 95-102, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: However, in order to be applicable to hard real-time domains, existing representations of reaction (e.g., RAPs [26], routines [1], and monitors <ref> [63] </ref>) must be extended to support predictable, provably-correct behavior. This requires enhanced capabilities to represent both the resource requirements of a reaction [56] and the functional behavior of a reaction [60].
Reference: [64] <author> M. Schoppers, </author> <title> "Universal Plans for Reactive Robots in Unpredictable Environments," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 1039-1046, </pages> <year> 1987. </year>
Reference-contexts: In addition, using learning methods to acquire reactions could provide improved reaction speed and coverage. Techniques that have proven useful in this area include compilation of reactive behaviors <ref> [64] </ref>, "chunking" of previous action sequences [45], reinforcement learning [38, 59], and dynamic programming methods [3]. Such learning techniques allow a system to take necessary actions (e.g., increasing respirator rate) in emergencies (e.g., a decrease in blood pressure), if the action has been useful in the past.
Reference: [65] <author> M. Schoppers, </author> <title> "A Software Architecture for Hard Real-Time Execution of Automatically Synthesized Plans or Control Laws," </title> <booktitle> in Proc. AIAA/NASA Conf. on Intelligent Robots in Field, Factory, Service, and Space, </booktitle> <pages> pp. 768-775, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: In many types of real-time AI systems, intelligently adapting to dynamic environments requires the ability to create and use reactive plans that can immediately make necessary changes while a planner begins to determine longer-term actions. For planners that build reactive plans, significant areas of research include reaction planning mechanisms <ref> [39, 53, 56, 65] </ref> and formalisms which can support the proofs of guaranteed behavior that are necessary in hard real-time domains [40, 49, 50]. The inherent parallelism of reactive control systems is a particularly challenging aspect for AI planners, which have largely focused on sequential plan execution. <p> Concurrent Planning and Execution In the cooperative approach to real-time AI, the ability to concurrently plan and execute actions is crucial to successful performance <ref> [56, 65] </ref>. It is particularly useful to be able to begin executing plans before they can be completely fleshed out.
Reference: [66] <author> K. G. Shin and P. Ramanathan, </author> <title> "Real-Time Computing: A New Discipline of Computer Science and Engineering," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 82, no. 1, </volume> <pages> pp. 6-24, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Real-time computing is not about building "fast" systems; it is about building systems that are predictably "fast enough" to act on their environments in well-specified ways <ref> [31, 43, 66, 69] </ref>. This understanding of what it means to be "real-time" is dramatically different from the casual, non-technical use of the term which has become common in many fields.
Reference: [67] <author> H. A. Simon, </author> <title> Models of Bounded Rationality, </title> <publisher> MIT Press, </publisher> <year> 1982. </year>
Reference-contexts: The agent itself is subject to "bounded rationality" <ref> [67] </ref>, because its data processors have limited speed and memory. The agent is also subject to "bounded reactivity" [56], because its sensors and actuators are limited in their range, field of view, torque, accuracy, etc.
Reference: [68] <author> R. Smith, </author> <title> "The Contract Net Protocol: High-level Communication and Control in a Distributed Problem Solver," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 29, </volume> , <year> 1980. </year>
Reference-contexts: While in some domains an agent will have little flexibility over the deadlines placed on a supporting knowledge-based system (e.g., the ICU patient), in other cases deadlines can be much 16 more negotiable. It is important to understand how deadlines arise due to commitments between agents <ref> [68] </ref>, how different types of relationships between the tasks at different agents influence the severity and flexibility of time commitments [12, 13], how commitments and goals can be revised, relaxed, and reassigned as unexpected events change what can be done when [6, 21, 23], and how abstraction can be used to
Reference: [69] <author> J. A. Stankovic, </author> <title> "Misconceptions about Real-Time Computing: A Serious Problem for Next-Generation Systems," </title> <journal> IEEE Computer, </journal> <volume> vol. 21, no. 10, </volume> <pages> pp. 10-19, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Real-time computing is not about building "fast" systems; it is about building systems that are predictably "fast enough" to act on their environments in well-specified ways <ref> [31, 43, 66, 69] </ref>. This understanding of what it means to be "real-time" is dramatically different from the casual, non-technical use of the term which has become common in many fields. <p> However, complex behavior interactions and domain variations beyond the set of tested scenarios may still lead to failure, because there is no rigorous proof that these systems will meet deadlines or provide logically adequate responses in time. As Stankovic <ref> [69] </ref> points out, this type of performance is not suited to mission-critical real 3 time systems 2 . Instead, the rigorous design techniques developed by real-time systems researchers must be used to guarantee that a system will meet domain deadlines, even in worst-case scenarios.
Reference: [70] <author> J. K. Strosnider and C. J. Paul, </author> <title> "A Structured View of Real-Time Problem Solving," </title> <note> accepted for publication in AI Magazine, </note> <year> 1994. </year>
Reference-contexts: Reduction of Search Variance Strosnider & Paul <ref> [70] </ref> have identified several techniques by which the variance inherent in search-based AI problem solving can be reduced, thus making problem-solving methods amenable to worst-case scheduling. <p> Incremental improvement mechanisms allow an embedded-AI system to meet deadlines by simply interrupting the incremental algorithm when a deadline arrives. This approach, variously known as "any-time algorithms" [8], "imprecise computations" [47], "best-so-far methods" <ref> [70] </ref>, and "increasing reward for increasing service" (IRIS) tasks [16], has gained even more proponents than names.
Reference: [71] <author> S. Vere, </author> <title> "Temporal Scope of Assertions and Window Cutoff," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 1055-1059, </pages> <year> 1985. </year>
Reference-contexts: In the ICU domain, for example, if administering a particular test and analyzing the resulting data takes several minutes, it may be important for the system to anticipate this delay and implement intermediary treatment actions, pending the results of the test. Current AI research 15 on representations of time <ref> [2, 10, 32, 52, 71] </ref> generally involves complex constraint propagation mechanisms to maintain partial ordering relations between time intervals. In many cases, it may be possible to use simpler, more efficient temporal representations that can still provide the types of worst-case timing information required for real-time guarantees [57].
Reference: [72] <author> M. P. Wellman, </author> <title> "The STRIPS Assumption for Planning with Uncertainty," </title> <booktitle> in Proc. AAAI Spring Symp. on Planning in Uncertain, Unpredictable, or Changing Environments, </booktitle> <year> 1990. </year>
Reference-contexts: Utility-based modeling Given the dynamic and uncertain nature of real world domains (particularly as viewed through sensor readings), an intelligent control system must often make decisions based on incomplete information. To achieve optimal behavior according to some metric, the system might reason about probabilities and expected utilities <ref> [20, 25, 36, 72] </ref>. However, traditional decision theory often requires more information than is available in realistic domains. In these situations, a more qualitative model of uncertainty and decision-making is needed, including the ability to represent the growth of uncertainty as time passes.
Reference: [73] <author> S. Zilberstein and S. J. Russell, </author> <title> "Constructing Utility-Driven Real-Time Systems Using Anytime Algorithms," </title> <booktitle> in Proc. IEEE Workshop on Imprecise and Approximate Computation, </booktitle> <pages> pp. 6-10, </pages> <month> December </month> <year> 1992. </year> <month> 22 </month>
Reference-contexts: Additional work will be required, however, to improve our ability to build performance profiles automatically and to enhance schedulers to manage tasks that are characterized by more complex representations such as conditional performance profiles <ref> [73] </ref> or quality functions.
References-found: 73

