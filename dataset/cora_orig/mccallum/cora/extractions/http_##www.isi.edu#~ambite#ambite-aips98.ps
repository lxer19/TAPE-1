URL: http://www.isi.edu/~ambite/ambite-aips98.ps
Refering-URL: http://www.isi.edu/~ambite/
Root-URL: 
Email: fambite, knoblockg@isi.edu  
Title: Flexible and Scalable Query Planning in Distributed and Heterogeneous Environments  
Author: Jose Luis Ambite Craig A. Knoblock 
Address: 4676 Admiralty Way, Marina del Rey, CA 90292, USA  
Affiliation: Information Sciences Institute and Department of Computer Science University of Southern California  
Abstract: We present the application of the Planning by Rewriting (PbR) framework to query planning in distributed and heterogeneous environments. PbR is a new paradigm for efficient high-quality planning that exploits plan rewriting rules and efficient local search techniques to transform an easy-to-generate, but possibly suboptimal, initial plan into a high-quality plan. The resulting planner is scalable, flexible, has anytime behavior, and, applied to query planning, yields a novel combination of traditional query optimization with heterogeneous information source selection. Query planners are the core component of mediator systems, which are becoming increasingly important in a world of interconnected information, and constitute excellent testbeds for planning technology. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ambite, J. L., and Knoblock, C. A. </author> <year> 1997. </year> <title> Planning by rewriting: Efficiently generating high-quality plans. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Third, finding any valid plan is not enough, plan quality is also critical. Finally, mediators need to incorporate traditional techniques for query planning in databases and extend them with new capabilities, such as replanning after failures and information gathering actions. The Planning by Rewriting <ref> (Ambite & Knoblock 1997) </ref> paradigm is designed to address planning efficiency and plan quality, while providing the benefits of domain-independence. Its characteristics make it especially well-suited for query planning. First, PbR fl Copyright c fl1998, American Association for Artificial Intelligence (www.aaai.org). <p> the general Planning-by-Rewriting framework. (define (operator join) :parameters (?query ?jconds ?query-a ?query-b) :precondition (:and (available local ?query-a) (available local ?query-b) (join-query ?query ?jconds ?query-a ?query-b)) :effect (available local ?query)) (available output (sims-retrieve (?ap_name) (:and (airport ?aport) (country-name ?aport "Tunisia") (port-name ?aport ?ap_name)))) Review of Planning by Rewriting Planning by Rewriting <ref> (Ambite & Knoblock 1997) </ref> follows the iterative improvement style of many optimiza tion algorithms. The framework works in two phases: 1. Efficiently generate an initial solution plan. 2. <p> Figures 5, 7, and 8 in the next section are examples of plan rewriting rules in the query planning domain. The following is a list of the main issues in Planning by Rewriting. A detailed description of the general Planning by Rewriting paradigm is given in <ref> (Ambite & Knoblock 1997) </ref>. The next section discusses these issues in the context of query planning. * Efficient generation of an initial solution plan. In many domains obtaining a possibly suboptimal ini tial plan is easy. * Definition and application of the plan rewriting rules. <p> Most significantly it is a generalization of plan merging (Foulser, Li, & Yang 1992) and it follows on iterative repair ideas such as those in (Minton 1992) and (Zweben, Daun, & Deale 1994). A more detailed discussion appears in <ref> (Ambite & Knoblock 1997) </ref>. Finally, PbR can be understood as an instantiation of the local search idea, which has a long tradition in combinatorial optimization (Papadimitriou & Stei-glitz 1982).
Reference: <author> Ambite, J. L.; Knoblock, C. A.; Muslea, I.; and Philpot, A. </author> <year> 1998. </year> <title> Compiling source descriptions for efficient and flexible information integration. </title> <note> Submitted. </note>
Reference-contexts: A set of maximal axioms is precompiled when the domain model is defined. The set of relevant axioms for a given user query can be efficiently computed by instantiating these maximal axioms at run time. A detailed explanation of this process lies outside the scope of this paper, see <ref> (Ambite et al. 1998) </ref>. For the purposes of this paper we will consider these axioms as given. Our system automatically derives query-specific plan rewriting rules from these integration axioms in order to explore the alternative ways of obtaining each class of information in a user query.
Reference: <author> Arens, Y.; Knoblock, C. A.; and Shen, W.-M. </author> <year> 1996. </year> <title> Query reformulation for dynamic information integration. </title> <journal> Journal of Intelligent Information Systems, Special Issue on Intelligent Information Integration </journal> 6(2/3):99-130. 
Reference: <author> Ashish, N.; Knoblock, C. A.; and Levy, A. </author> <year> 1997. </year> <title> Information gathering plans with sensing actions. </title> <booktitle> In Proceedings of the Fourth European Conference on Planning. </booktitle>
Reference-contexts: Interleaving planning and execution is necessary in order to deal effectively with unexpected situations in the environment such as database or network failures. It also enables the planner to perform dynamic query optimization in which plans depend on run-time conditions, and to insert information gathering actions <ref> (Ashish, Knoblock, & Levy 1997) </ref>. We plan to explore a variety of search techniques for query planning, for example, variable depth rewriting. In variable depth search a sequence of rewritings is applied atomically. This allows the planner to overcome initial cost increases that eventually would lead to strong cost reductions.
Reference: <author> Chu, W. W., and Hurley, P. </author> <year> 1982. </year> <title> Optimal query processing for distributed database systems. </title> <journal> IEEE Transactions on Computers 31(9) </journal> <pages> 835-850. </pages>
Reference-contexts: The research on query optimization most relevant to our approach lies in three areas. The first area is distributed query optimization. An algorithm for distributed query optimization based on query tree transformation is presented in <ref> (Chu & Hurley 1982) </ref>. Our relational algebra plan rewriting rules are similar to their transformations, but our system accepts arbitrary specification of rules as opposed to a hand-coded algorithm. The second area is declarative and extensible query optimizers.
Reference: <author> Erol, K.; Nau, D.; and Hendler, J. </author> <year> 1994. </year> <title> UMCP: A sound and complete planning procedure for hierarchical task-network planning. </title> <booktitle> In Proceedings of the Second International Conference on Artificial Intelligence Planning Systems, </booktitle> <pages> 249-254. </pages>
Reference: <author> Foulser, D. E.; Li, M.; and Yang, Q. </author> <year> 1992. </year> <title> Theory and algorithms for plan merging. </title> <journal> Artificial Intelligence 57(2-3):143-182. </journal>
Reference-contexts: The framework of Planning by Rewriting is related to several pieces of previous work in AI planning. Most significantly it is a generalization of plan merging <ref> (Foulser, Li, & Yang 1992) </ref> and it follows on iterative repair ideas such as those in (Minton 1992) and (Zweben, Daun, & Deale 1994). A more detailed discussion appears in (Ambite & Knoblock 1997).
Reference: <author> Graefe, G., and DeWitt, D. J. </author> <year> 1987. </year> <title> The EXODUS optimizer generator. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data. </booktitle>
Reference-contexts: They handle full SQL queries on centralized databases, but they do not deal with semantic heterogeneity. Our rules currently do not cover the aggregation operators of SQL, although we could incorporate rewrites similar to those in (Yan & Larson 1995). Another influential work in query optimization is Exodus <ref> (Graefe & DeWitt 1987) </ref>. Exodus is a query optimizer generator that compiles a query optimizer out of a given set of operators, transformation rules and the code for the methods that implement each operator. Although Exodus strives for extensibility, its operator definition language is more restricted than ours.
Reference: <author> Graefe, G.; Cole, R. L.; Davison, D. L.; McKenna, W. J.; and Wolniewicz, R. H. </author> <year> 1994. </year> <title> Extensible query optimization and parallel execution in volcano. </title> <editor> In J. C. Freytag, G. Vossen and D. Maier., ed., </editor> <title> Query Processing for Advanced Database Applications. </title> <address> San Francisco, California: </address> <publisher> Morgan Kaufmann. </publisher> <pages> 305-381. </pages>
Reference-contexts: Although Exodus strives for extensibility, its operator definition language is more restricted than ours. Also it has a fixed search strategy (a form of hill climbing). Exodus focuses more in implementation methods for relational operators and it operates on centralized databases. Volcano <ref> (Graefe et al. 1994) </ref>, a successor of Exodus, provides a general implementation of data processing operations based on iterators, but does not offer more generality on algebraic query optimization.
Reference: <author> Graefe, G. </author> <year> 1993. </year> <title> Query evaluation techniques for large databases. </title> <journal> ACM Computing Surveys 25(2) </journal> <pages> 73-170. </pages>
Reference-contexts: Related Work In the database literature, query optimization has been extensively studied (Jarke & Koch 1984). Query op-timizers attempt to both find the most efficient algebraic form of a query and to choose specific methods to implement each data processing operation <ref> (Graefe 1993) </ref>. For example, a join can be performed by a variety of algorithms, such as nested loops, merge scan, hash join, etc.
Reference: <author> Ioannidis, Y., and Kang, Y. C. </author> <year> 1990. </year> <title> Randomized algorithms for optimizing large join queries. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> 312-321. </pages>
Reference: <author> Jarke, M., and Koch, J. </author> <year> 1984. </year> <title> Query optimization in database systems. </title> <journal> ACM Computing Surveys 16(2) </journal> <pages> 111-152. </pages>
Reference-contexts: Thus we know that the cost of the optimal plan is constant. optimal cost regardless of the increasing complexity of the search space and the very high cost of many initial plans. Related Work In the database literature, query optimization has been extensively studied <ref> (Jarke & Koch 1984) </ref>. Query op-timizers attempt to both find the most efficient algebraic form of a query and to choose specific methods to implement each data processing operation (Graefe 1993).
Reference: <author> Knoblock, C. A., and Ambite, J. L. </author> <year> 1997. </year> <title> Agents for information gathering. </title> <editor> In Bradshaw, J., ed., </editor> <booktitle> Software Agents. </booktitle> <address> Menlo Park, CA: </address> <publisher> AAAI/MIT Press. </publisher>
Reference-contexts: Third, finding any valid plan is not enough, plan quality is also critical. Finally, mediators need to incorporate traditional techniques for query planning in databases and extend them with new capabilities, such as replanning after failures and information gathering actions. The Planning by Rewriting <ref> (Ambite & Knoblock 1997) </ref> paradigm is designed to address planning efficiency and plan quality, while providing the benefits of domain-independence. Its characteristics make it especially well-suited for query planning. First, PbR fl Copyright c fl1998, American Association for Artificial Intelligence (www.aaai.org). <p> the general Planning-by-Rewriting framework. (define (operator join) :parameters (?query ?jconds ?query-a ?query-b) :precondition (:and (available local ?query-a) (available local ?query-b) (join-query ?query ?jconds ?query-a ?query-b)) :effect (available local ?query)) (available output (sims-retrieve (?ap_name) (:and (airport ?aport) (country-name ?aport "Tunisia") (port-name ?aport ?ap_name)))) Review of Planning by Rewriting Planning by Rewriting <ref> (Ambite & Knoblock 1997) </ref> follows the iterative improvement style of many optimiza tion algorithms. The framework works in two phases: 1. Efficiently generate an initial solution plan. 2. <p> Figures 5, 7, and 8 in the next section are examples of plan rewriting rules in the query planning domain. The following is a list of the main issues in Planning by Rewriting. A detailed description of the general Planning by Rewriting paradigm is given in <ref> (Ambite & Knoblock 1997) </ref>. The next section discusses these issues in the context of query planning. * Efficient generation of an initial solution plan. In many domains obtaining a possibly suboptimal ini tial plan is easy. * Definition and application of the plan rewriting rules. <p> Most significantly it is a generalization of plan merging (Foulser, Li, & Yang 1992) and it follows on iterative repair ideas such as those in (Minton 1992) and (Zweben, Daun, & Deale 1994). A more detailed discussion appears in <ref> (Ambite & Knoblock 1997) </ref>. Finally, PbR can be understood as an instantiation of the local search idea, which has a long tradition in combinatorial optimization (Papadimitriou & Stei-glitz 1982). <p> Interleaving planning and execution is necessary in order to deal effectively with unexpected situations in the environment such as database or network failures. It also enables the planner to perform dynamic query optimization in which plans depend on run-time conditions, and to insert information gathering actions <ref> (Ashish, Knoblock, & Levy 1997) </ref>. We plan to explore a variety of search techniques for query planning, for example, variable depth rewriting. In variable depth search a sequence of rewritings is applied atomically. This allows the planner to overcome initial cost increases that eventually would lead to strong cost reductions.
Reference: <author> Knoblock, C. A. </author> <year> 1995. </year> <title> Planning, executing, </title> <booktitle> sensing, and replanning for information gathering. In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: We expect that PbR would be able to provide more general interleaving of planning and execution <ref> (Knoblock 1995) </ref>. The third area of work is on efficient search algorithms for query planners (Swami 1989; Ioannidis & Kang 1990).
Reference: <author> Knoblock, C. A. </author> <year> 1996. </year> <title> Building a planner for information gathering: A report from the trenches. </title> <booktitle> In Proceedings of the Third International Conference on Artificial Intelligence Planning Systems. </booktitle>
Reference-contexts: Selecting the sources, translating between global domain terms and source terms, and ordering the operations is the task of the query planner. 1 The specification of the operators for distributed query processing and the encoding of information goals is presented in <ref> (Knoblock 1996) </ref>. A sample operator, join, is shown in Figure 1. The join operator takes two subqueries, that are available locally at the mediator and combines them using some conditions to produce the joined query. Other operators include retrieve, selection, assignment, and union. <p> The Join-Swap rule in the PbR syntax is shown in Figure 7. This rule specifies that two consecutive joins operators can be reordered and allows the planner to explore the space of join trees. In our query planning domain <ref> (Knoblock 1996) </ref> queries are expressed as complex terms. The PbR rules use the interpreted predicates in the constraints field to manipulate such query expressions. For example, the join-swappable predicate checks if the two join operators have queries that can be exchanged. <p> Despite the practical importance of query planning, there has been little work in the planning literature. Occam (Kwok & Weld 1996) is a planner for information gathering that focuses on the source selection problem. Our work combines both source selection and traditional query optimization. Sage <ref> (Knoblock 1996) </ref> considers plan quality and supports interleaving of planning and execution. PbR does not currently interleave planning and execution, but it is as general as Sage with better scaling properties as shown in the results section.
Reference: <author> Kwok, C. T., and Weld, D. S. </author> <year> 1996. </year> <title> Planning to gather information. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Despite the practical importance of query planning, there has been little work in the planning literature. Occam <ref> (Kwok & Weld 1996) </ref> is a planner for information gathering that focuses on the source selection problem. Our work combines both source selection and traditional query optimization. Sage (Knoblock 1996) considers plan quality and supports interleaving of planning and execution.
Reference: <author> Levy, A. Y.; Rajaraman, A.; and Ordille, J. J. </author> <year> 1996. </year> <title> Query-answering algorithms for information agents. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence. </booktitle>
Reference: <author> MacGregor, R. </author> <year> 1988. </year> <title> A deductive pattern matcher. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: The user interacts directly with the SIMS mediator expressing queries against the domain model, without knowledge about the schemas or locations of the sources. The global model and the user queries are specified in the Loom description logic <ref> (MacGregor 1988) </ref>, which is the knowledge representation subsystem of the SIMS mediator.
Reference: <author> Minton, S. </author> <year> 1992. </year> <title> Minimizing conflicts: A heuristic repair method for constraint-satisfaction and scheduling problems. </title> <journal> Artificial Intelligence 58(1-3):161-205. </journal>
Reference-contexts: The framework of Planning by Rewriting is related to several pieces of previous work in AI planning. Most significantly it is a generalization of plan merging (Foulser, Li, & Yang 1992) and it follows on iterative repair ideas such as those in <ref> (Minton 1992) </ref> and (Zweben, Daun, & Deale 1994). A more detailed discussion appears in (Ambite & Knoblock 1997). Finally, PbR can be understood as an instantiation of the local search idea, which has a long tradition in combinatorial optimization (Papadimitriou & Stei-glitz 1982).
Reference: <author> Papadimitriou, C. H., and Steiglitz, K. </author> <year> 1982. </year> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall. </publisher>
Reference-contexts: A more detailed discussion appears in (Ambite & Knoblock 1997). Finally, PbR can be understood as an instantiation of the local search idea, which has a long tradition in combinatorial optimization <ref> (Papadimitriou & Stei-glitz 1982) </ref>.
Reference: <author> Penberthy, J. S., and Weld, D. S. </author> <year> 1992. </year> <title> UCPOP: A sound, complete, partial order planner for ADL. </title> <booktitle> In Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 189-197. </pages>
Reference-contexts: In Planning by Rewriting a plan is represented by a graph notation in the spirit of partial-order causal-link planners such as UCPOP <ref> (Penberthy & Weld 1992) </ref>. The nodes are domain actions. The edges specify a temporal ordering relation among nodes, imposed by causal links and ordering constraints. A plan rewriting rule, akin to term and graph rewriting rules, specifies the replacement under certain conditions of a partial plan by another partial plan.
Reference: <author> Pirahesh, H.; Hellerstein, J. M.; and Hasan, W. </author> <year> 1992. </year> <title> Extensible/rule based query rewrite optimization in starburst. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data. </booktitle>
Reference-contexts: Our relational algebra plan rewriting rules are similar to their transformations, but our system accepts arbitrary specification of rules as opposed to a hand-coded algorithm. The second area is declarative and extensible query optimizers. An extensible query optimizer based on query rewriting was implemented for the Startbust system <ref> (Pirahesh, Hellerstein, & Hasan 1992) </ref>. They also define declarative rules to manipulates graphs, but they rely heavily in procedural attachments to implement the preconditions and effects of rules. They handle full SQL queries on centralized databases, but they do not deal with semantic heterogeneity.
Reference: <author> Swami, A. N. </author> <year> 1989. </year> <title> Optimization of large join queries: Combining heuristic and combinatorial techniques. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> 367-376. </pages>
Reference: <author> Tate, A. </author> <year> 1977. </year> <title> Generating project networks. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 888-893. </pages>
Reference: <author> Yan, W. P., and Larson, P.-A. </author> <year> 1995. </year> <title> Eager aggregation and lazy aggregation. </title> <editor> In McLeod, D.; Sacks-Davis, R.; and Schek, H., eds., </editor> <booktitle> Proceedings of 21th International Conference on Very Large Data Bases. </booktitle>
Reference-contexts: They handle full SQL queries on centralized databases, but they do not deal with semantic heterogeneity. Our rules currently do not cover the aggregation operators of SQL, although we could incorporate rewrites similar to those in <ref> (Yan & Larson 1995) </ref>. Another influential work in query optimization is Exodus (Graefe & DeWitt 1987). Exodus is a query optimizer generator that compiles a query optimizer out of a given set of operators, transformation rules and the code for the methods that implement each operator.
Reference: <author> Zweben, M.; Daun, B.; and Deale, M. </author> <year> 1994. </year> <title> Scheduling and rescheduling with iterative repair. In Intelligent Scheduling. </title> <address> San Mateo, CA: </address> <publisher> Morgan Kaufman. </publisher> <pages> 241-255. </pages>
Reference-contexts: The framework of Planning by Rewriting is related to several pieces of previous work in AI planning. Most significantly it is a generalization of plan merging (Foulser, Li, & Yang 1992) and it follows on iterative repair ideas such as those in (Minton 1992) and <ref> (Zweben, Daun, & Deale 1994) </ref>. A more detailed discussion appears in (Ambite & Knoblock 1997). Finally, PbR can be understood as an instantiation of the local search idea, which has a long tradition in combinatorial optimization (Papadimitriou & Stei-glitz 1982).
References-found: 26

