URL: ftp://ftp.cs.bham.ac.uk/pub/authors/W.B.Langdon/papers/WBL.ecj.price.125.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Evolution of Genetic Programming Populations  
Author: W. B. Langdon 
Keyword: population variety, diversity, genetic programming, Price's theorem, Fisher's theorem.  
Address: Gower Street, London WC1E 6BT, UK  1397  
Affiliation: Genetic Programming Group, Dept. of Computer Science, University College, London,  
Email: Email: W.Langdon@cs.ucl.ac.uk  
Phone: Tel: +44 (0) 171 380 7214, Fax: +44 (0) 171 387  
Web: www: http://www.cs.ucl.ac.uk/staff/W.Langdon/  
Abstract: We investigate in detail what happens as genetic programming (GP) populations evolve. Since we shall use the populations which showed GP can evolve stack data structures as examples, we start in Section 1 by briefly describing the stack experiment [ Langdon, 1995 ] . In Section 2 we show Price's Covariance and Selection Theorem can be applied to Genetic Algorithms (GAs) and GP to predict changes in gene frequencies. We follow the proof of the theorem with experimental justification using the GP runs from the stack problem. Section 3 briefly describes Fisher's Fundamental Theorem of Natural Selection and shows in its normal interpretation it does not apply to practical GAs. An analysis of the stack populations, in Section 4, explains that the difficulty of the stack problem is due to the presence of "deceptive" high scoring partial solutions in the population. These cause a negative correlation between necessary primitives and fitness. As Price's Theorem predicts, the frequency of necessary primitives falls, eventually leading to their extinction and so to the impossibility of finding solutions like those that are evolved in successful runs. Section 5 investigates the evolution of variety in GP populations. Detailed measurements of the evolution of variety in stack populations reveal loss of diversity causing crossover to produce offspring which are copies of their parents. Section 6 concludes with measurements that show in the stack population crossover readily produces improvements in performance initially but later no improvements at all are made by crossover. Section 7 discusses the importance of these results to GP in general. 
Abstract-found: 1
Intro-found: 1
Reference: [ Altenberg, 1994 ] <author> Lee Altenberg. </author> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, </booktitle> <pages> pages 47-74. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: In particular it applies to genetic algorithms (GAs) <ref> [ Altenberg, 1994 ] </ref> . <p> Therefore restrictions on program size may on average reduce the number of such functions in the next generation compared to the number predicted by considering only fitness (i.e. by Price's Theorem). <ref> [ Altenberg, 1994, page 47 ] </ref> argues Price's theorem can be applied to genetic programming and we shall show experimental evidence for it based on genes composed of a single GP primitive. 2.5 Application of Price's Theorem to the GP Stack Problem In this section we experimentally test Price's Theorem by
Reference: [ Altenberg, 1995 ] <author> Lee Altenberg. </author> <title> The Schema Theorem and Price's Theorem. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 23-49, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Indeed <ref> [ Altenberg, 1995 ] </ref> shows Holland's schema theorem [ Holland, 1973; Holland, 1992 ] can be derived from Price's Theorem. This and other analysis, leads [ Altenberg, 1995, page 43 ] to conclude "the Schema Theorem has no implications for how well a GA is performing". <p> Indeed [ Altenberg, 1995 ] shows Holland's schema theorem [ Holland, 1973; Holland, 1992 ] can be derived from Price's Theorem. This and other analysis, leads <ref> [ Altenberg, 1995, page 43 ] </ref> to conclude "the Schema Theorem has no implications for how well a GA is performing". While the proof in [ Price, 1970 ] assumes discrete generations the result "can be applied to species with overlapping, inter-breeding generations".
Reference: [ Andre, 1996 ] <author> David Andre. </author> <type> Personal communication, </type> <month> 15 Jul </month> <year> 1996. </year>
Reference-contexts: An alternative point typing allows crossover to move genetic material between trees). Branch typing means there are effectively 5 fi 12 = 60 primitives in the stack problem. <ref> [ Andre, 1996 ] </ref> also reports GP runs with similar numbers of primitives where one or more functions either evolved out of the population (i.e. became extinct) or became rare and suggests it was a factor in the decision to use mutation (albeit at a low rate).
Reference: [ Angeline and Pollack, 1993 ] <author> Peter J. Angeline and Jordan B. Pollack. </author> <title> Competitive environments evolve better solutions for complex tasks. </title> <booktitle> In Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 264-270, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Angeline and Pollack, 1994 ] <author> P. J. Angeline and J. B. Pollack. </author> <title> Coevolving high-level representations. </title> <editor> In C. G. Langton, editor, </editor> <booktitle> Artificial Life III, volume XVII of SFI Studies in the Sciences of Complexity, </booktitle> <pages> pages 55-71. </pages> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [ Angeline, 1993 ] <author> Peter John Angeline. </author> <title> Evolutionary Algorithms and Emergent Intelligence. </title> <type> PhD thesis, </type> <institution> Ohio State University, </institution> <year> 1993. </year>
Reference-contexts: Typically this serves only to increase the convergence of the population. An number of attempts to "scale up" GP have been made based upon imposing functional abstraction on individuals in the population <ref> [ Koza, 1994; Angeline, 1993; Rosca, 1995 ] </ref> . These have had a degree of success.
Reference: [ Angeline, 1994 ] <author> Peter John Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 4, </booktitle> <pages> pages 75-98. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year> <month> 43 </month>
Reference-contexts: There are a number of techniques which automatically change the representation. The following three techniques co-evolve the representation as the population itself evolves; The Genetic Library Builder (GLiB) <ref> [ Angeline, 1994 ] </ref> , Automatically Defined Functions (ADFs) [ Koza, 1994 ] and Adaptive Representations [ Rosca, 1995 ] . [ Koza, 1994, page 619 ] argues ADFs and other representations provide a different lens with which to view the solution space and that ADFs may help solve a problem
Reference: [ Angeline, 1996 ] <author> Peter J. Angeline. </author> <title> An investigation into the sensitivity of genetic pro-gramming to the frequency of leaf selection during subtree crossover. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 21-29, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: choice of crossover points in favour of internal nodes (e.g. in these GP experiments internal points in program trees are deliberately chosen 30% of the time, the other 70% are randomly chosen through the whole tree. [ Koza, 1992, page 114 ] weights internal nodes to external nodes 9:1, while <ref> [ Angeline, 1996, page 27 ] </ref> argues "that no one constant value for leaf frequency is optimal for every problem"). This reduces the proportion of crossover fragments which contain only a single terminal. Once again the genetic operators ignore the meaning of nodes within the tree.
Reference: [ Carroll, 1871 ] <author> Lewis Carroll. </author> <title> Through the Looking-Glass, and What Alice Found There. </title> <publisher> Macmillan, </publisher> <pages> 1871. </pages>
Reference-contexts: A dynamic fitness function would aim to continually stretch the population, keeping a carrot dangling in front of it. (This is also known as the "Red Queen" <ref> [ Carroll, 1871 ] </ref> approach where the population must continually improve itself).
Reference: [ Collins, 1992 ] <author> Robert J. Collins. </author> <title> Studies in Artificial Evolution. </title> <type> PhD thesis, </type> <institution> UCLA, Artificial Life Laboratory, Department of Computer Science, University of California, </institution> <address> Los Angeles, LA CA 90024, USA, </address> <year> 1992. </year>
Reference: [ Ewens, 1989 ] <author> W. J. Ewens. </author> <title> An interpretation and proof of the fundamental theorem of natural selection. </title> <journal> Theoretical Population Biology, </journal> <volume> 36(2) </volume> <pages> 167-180, </pages> <year> 1989. </year>
Reference-contexts: which might be beneficial). [ Price, 1972 ] makes the point that Fisher's publications on his fundamental theorem of natural selection "contains the most confusing published scientific writing I know of" [page 134] leading to "forty years of bewilderment about what he meant" [page 132]. [ Price, 1972 ] and <ref> [ Ewens, 1989; Ewens, 1992b; Ewens, 1992a ] </ref> argue that the usual interpretation of Fisher's theorem is incorrect and his "fitness" should be considered as just the component of fitness which varies linearly with gene frequency.
Reference: [ Ewens, 1992a ] <author> W. J. Ewens. </author> <title> Addendum to "The fundamental theorem of natural selection in Ewens' sense (case of many loci)" by Catilloux and Lessard. </title> <journal> Theoretical Population Biology, </journal> <volume> 48(3) </volume> <pages> 316-317, </pages> <year> 1992. </year>
Reference-contexts: which might be beneficial). [ Price, 1972 ] makes the point that Fisher's publications on his fundamental theorem of natural selection "contains the most confusing published scientific writing I know of" [page 134] leading to "forty years of bewilderment about what he meant" [page 132]. [ Price, 1972 ] and <ref> [ Ewens, 1989; Ewens, 1992b; Ewens, 1992a ] </ref> argue that the usual interpretation of Fisher's theorem is incorrect and his "fitness" should be considered as just the component of fitness which varies linearly with gene frequency.
Reference: [ Ewens, 1992b ] <author> W. J. Ewens. </author> <title> An optimizing principle of natural selection in evolutionary population genetics. </title> <journal> Theoretical Population Biology, </journal> <volume> 42(3) </volume> <pages> 333-346, </pages> <year> 1992. </year>
Reference-contexts: which might be beneficial). [ Price, 1972 ] makes the point that Fisher's publications on his fundamental theorem of natural selection "contains the most confusing published scientific writing I know of" [page 134] leading to "forty years of bewilderment about what he meant" [page 132]. [ Price, 1972 ] and <ref> [ Ewens, 1989; Ewens, 1992b; Ewens, 1992a ] </ref> argue that the usual interpretation of Fisher's theorem is incorrect and his "fitness" should be considered as just the component of fitness which varies linearly with gene frequency.
Reference: [ Fisher, 1958 ] <author> Ronald A. Fisher. </author> <title> The Genetical Theory of Natural Selection. </title> <publisher> Dover, </publisher> <year> 1958. </year> <note> Revision of first edition published 1930, OUP. </note>
Reference-contexts: Data collected every generation equivalent. 15 3 Fisher's Fundamental Theorem of Natural Selection Fisher's fundamental theorem of natural selection states "The rate of increase in fitness of any organism at any time is equal to its genetic variance in fitness at that time" <ref> [ Fisher, 1958, page 37 ] </ref> . "Under the usual interpretation the theorem is believed to say that the rate of increase in the mean fitness of a population is equal to the population's additive variance for fitness".
Reference: [ Francone et al., 1996 ] <author> Frank D. Francone, Peter Nordin, and Wolfgang Banzhaf. </author> <title> Bench-marking the generalization capabilities of A compiling genetic programming system using sparse data sets. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 72-80, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Frank, 1995 ] <author> S. A. Frank. </author> <title> George Price's contributions to evolutionary genetics. </title> <journal> Journal of Theoretical Biology, </journal> <volume> 175 </volume> <pages> 373-388, </pages> <year> 1995. </year>
Reference-contexts: Since the variance can never be negative "natural selection causes a continual increase in mean fitness of a population. This interpretation of the theorem is only true when the population mates randomly and there is no dominance or epistasis" <ref> [ Frank, 1995, page 382 ] </ref> .
Reference: [ Goldberg, 1989 ] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search Optimization and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The impact of deceptive partial solutions within the population might be reduced by partitioning the population into "demes" [ Stender, 1993; Collins, 1992; Tackett, 1994; Koza and Andre, 1995; Juille and Pollack, 1995 ] , using fitness niches to ensure diverse solutions are retained <ref> [ Goldberg, 1989 ] </ref> or perhaps using co-evolution to reward solutions to parts of the test case which most of the population is unable to solve. Mutation could also be used to increase population diversity but a high mutation rate might be required to escape from a deceptive local optimum.
Reference: [ Handley, 1994 ] <author> S. Handley. </author> <title> On the use of a directed acyclic graph to represent a population of computer programs. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on 44 Computational Intelligence, </booktitle> <pages> pages 154-159, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: may take advantage of this by reducing the space taken to store the population in memory [ Keijzer, 1996 ] and on disk (by using file compression) Where side-effects are controlled, retaining information on the evaluation of common subtrees within the population can also considerably reduce program execution time, c.f. <ref> [ Handley, 1994 ] </ref> ). Existing GP systems could be modified to: 39 1. Increase variety by disabling the production of clones by the reproduction operator, e.g. by setting p r to zero. 2. Detect when an offspring is identical to one of its parents.
Reference: [ Hillis, 1992 ] <author> W. Daniel Hillis. </author> <title> Co-evolving parasites improve simulated evolution as an optimization procedure. </title> <editor> In Christopher G. Langton, Charles Taylor, J. Doyne Farmer, and Steen Rasmussen, editors, </editor> <booktitle> Artificial Life II, volume X of Sante Fe Institute Studies in the Sciences of Complexity. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Co-evolution can provide an automatic means of dynamically changing the fitness function [ Siegel, 1994 ] . There is increasing interest in using co-evolution [ Sen, 1996; Reynolds, 1994; Ryan, 1995 ] and improved performance has been claimed <ref> [ Hillis, 1992 ] </ref> . However a more dynamic framework makes analysis of population behaviour harder. In GP runs the concentration of primitives and variety within the population should be monitored (both can be done with little overhead).
Reference: [ Holland, 1973 ] <author> John H. Holland. </author> <title> Genetic algorithms and the optimal allocation of trials. </title> <journal> SIAM Journal on Computation, </journal> <volume> 2 </volume> <pages> 88-105, </pages> <year> 1973. </year>
Reference-contexts: Indeed [ Altenberg, 1995 ] shows Holland's schema theorem <ref> [ Holland, 1973; Holland, 1992 ] </ref> can be derived from Price's Theorem. This and other analysis, leads [ Altenberg, 1995, page 43 ] to conclude "the Schema Theorem has no implications for how well a GA is performing".
Reference: [ Holland, 1992 ] <author> John H. Holland. </author> <title> Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, </title> <booktitle> Control and Artificial Intelligence. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year> <note> First Published by University of Michigan Press 1975. </note>
Reference-contexts: Cov = Covariance 2.1 Proof of Price's Theorem In this section we follow the proof of Price's Theorem given in [ Price, 1970 ] (which assumes sexual reproduction) and show it applies to Genetic Algorithms (GAs) <ref> [ Holland, 1992 ] </ref> in general and to genetic programming (GP) [ Koza, 1992 ] in particular. In the next section (2.2), we extend the proof to cover asexual reproduction. This more general proof also applies to Genetic Algorithms, including GAs with asexual reproduction (i.e. copying and mutation). <p> Indeed [ Altenberg, 1995 ] shows Holland's schema theorem <ref> [ Holland, 1973; Holland, 1992 ] </ref> can be derived from Price's Theorem. This and other analysis, leads [ Altenberg, 1995, page 43 ] to conclude "the Schema Theorem has no implications for how well a GA is performing".
Reference: [ Iba et al., 1994a ] <author> H. Iba, T. Sato, and H. de Garis. </author> <title> System identification approach to genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 401-406, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: It appears to be common practice for GP to "run out of steam" so after 20-30 generations no further improvement in the best fitness value in the population occurs or improvement occurs at a very low rate. Accordingly few GP runs are continued beyond generation 50. ( <ref> [ Iba et al., 1994a ] </ref> 's STROGANOFF system provides a counter example with runs of 400 generations).
Reference: [ Iba et al., 1994b ] <author> Hitoshi Iba, Hugo de Garis, and Taisuke Sato. </author> <title> Genetic programming with local hill-climbing. </title> <editor> In Yuval Davidor, Hans-Paul Schwefel, and Reinhard Manner, editors, </editor> <booktitle> Parallel Problem Solving from Nature III, </booktitle> <pages> pages 334-343, </pages> <address> Jerusalem, 9-14 Oc-tober 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This would increase the degree of randomness in the search but might introduce a beneficial element of "hill climbing", see [ O'Reilly and Oppacher, 1996 ] and <ref> [ Iba et al., 1994b ] </ref> ). While other GPs may not suffer from lack of variety, convergence of some sort is required if the GP is not to be random search.
Reference: [ Jannink, 1994 ] <editor> Jan Jannink. Cracking and co-evolving randomizers. In Kenneth E. Kin-near, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 20, </booktitle> <pages> pages 425-443. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Juille and Pollack, 1995 ] <author> Hugues Juille and Jordan B. Pollack. </author> <title> Parallel genetic programming and fine-grained SIMD architecture. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 31-37, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference: [ Keijzer, 1996 ] <author> Maarten Keijzer. </author> <title> Efficiently representing populations in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 13, </booktitle> <pages> pages 259-278. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year> <month> 45 </month>
Reference-contexts: The opposite does not hold when it is high. (Other definitions include fitness based population entropy [ Rosca and Ballard, 1996, Section 9.5 ] and using the ratio of sum of the sizes of every program in the population to the number of distinct subtrees within the population <ref> [ Keijzer, 1996 ] </ref> ). 24 In this section we consider the variety of GP populations using the 60 runs on the stack problem as examples. Firstly (Section 5.1) we show how the number of unique individuals evolves. Simple but general models of the evolution of variety were devised. <p> Thus low variety reinforces itself. In one run (23) variety collapses to near zero but in most cases it eventually hovers near 60% of the population size. This is low compared to reports of 80% to 95% in [ Koza, 1992, pages 159, 609 and 614 ] and <ref> [ Keijzer, 1996 ] </ref> . 5.1 Lost of Variety in Stack Populations Measurements show variety starts in the initial population at its maximum value with every member of the population being different. This is despite the fact there is no uniqueness check to guarantee this. <p> While other GPs may not suffer from lack of variety, convergence of some sort is required if the GP is not to be random search. For example <ref> [ Keijzer, 1996 ] </ref> shows convergence in terms of subtrees with GP populations reusing subtrees in many individuals. (GP may take advantage of this by reducing the space taken to store the population in memory [ Keijzer, 1996 ] and on disk (by using file compression) Where side-effects are controlled, retaining <p> For example <ref> [ Keijzer, 1996 ] </ref> shows convergence in terms of subtrees with GP populations reusing subtrees in many individuals. (GP may take advantage of this by reducing the space taken to store the population in memory [ Keijzer, 1996 ] and on disk (by using file compression) Where side-effects are controlled, retaining information on the evaluation of common subtrees within the population can also considerably reduce program execution time, c.f. [ Handley, 1994 ] ). Existing GP systems could be modified to: 39 1. <p> Similarly if the number of unique individuals in the population falls below 90% 42 this should also be investigated. <ref> [ Keijzer, 1996 ] </ref> provides a means to measure the concen-tration of groups of primitives (sub trees) but the implementation is not straightforward for most existing GP systems and the interpretation of the results is more complex. Acknowledgments W. B.
Reference: [ Kinnear, Jr., 1994 ] <author> Kenneth E. Kinnear, Jr. </author> <title> A perspective on the work in this book. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 1, </booktitle> <pages> pages 3-19. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Any partial solutions are likely to require all of them and so none will become extinct. This is contrary to established GP wisdom <ref> [ Kinnear, Jr., 1994, page 12 ] </ref> , however recently (at the fall 1995 AAAI GP symposium) Koza advocated the use of small function sets containing only five functions (+; ; fi; ffi and a conditional branch). 5 Lost of Variety We define variety as the number of unique individuals within
Reference: [ Koza and Andre, 1995 ] <author> John R. Koza and David Andre. </author> <title> Parallel genetic programming on a network of transputers. </title> <type> Technical Report CS-TR-95-1542, </type> <institution> Stanford University, Department of Computer Science, </institution> <month> January </month> <year> 1995. </year>
Reference: [ Koza, 1991 ] <author> John R. Koza. </author> <title> Genetic evolution and co-evolution of computer programs. </title> <editor> In Christopher Taylor Charles Langton, J. Doyne Farmer, and Steen Rasmussen, editors, </editor> <booktitle> Artificial Life II, volume X of SFI Studies in the Sciences of Complexity, </booktitle> <pages> pages 603-629. </pages> <publisher> Addison-Wesley, </publisher> <address> Redwood City, CA, USA, </address> <year> 1991. </year>
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: When crossing over, one type of tree is selected (at random, with equal probability, i.e. 1/5). This tree in the offspring is created by crossover between the trees in each parent of the chosen type in the normal GP way <ref> [ Koza, 1992 ] </ref> (see Figure 2). <p> Firstly this ensures a solution is possible, i.e. a program which solves the problem can be written using only these primitives. (The need for the available primitives to be powerful enough so that a solution to the problem can be express using them is called the sufficiency requirement <ref> [ Koza, 1992, page 86 ] </ref> ). Secondly as some constructs are useful to human programmers it was expected that corresponding primitives might be useful to the GP. <p> Cov = Covariance 2.1 Proof of Price's Theorem In this section we follow the proof of Price's Theorem given in [ Price, 1970 ] (which assumes sexual reproduction) and show it applies to Genetic Algorithms (GAs) [ Holland, 1992 ] in general and to genetic programming (GP) <ref> [ Koza, 1992 ] </ref> in particular. In the next section (2.2), we extend the proof to cover asexual reproduction. This more general proof also applies to Genetic Algorithms, including GAs with asexual reproduction (i.e. copying and mutation). Firstly we define the additional symbols we shall use. <p> terminal (e.g. max) may be treated differently. 9 It is common to bias the choice of crossover points in favour of internal nodes (e.g. in these GP experiments internal points in program trees are deliberately chosen 30% of the time, the other 70% are randomly chosen through the whole tree. <ref> [ Koza, 1992, page 114 ] </ref> weights internal nodes to external nodes 9:1, while [ Angeline, 1996, page 27 ] argues "that no one constant value for leaf frequency is optimal for every problem"). This reduces the proportion of crossover fragments which contain only a single terminal. <p> For example if a population contains three individuals A, B and C but A and B are identical (but different from C) then the variety of the population is 2 (A and B counting as one unique 23 individual). ( <ref> [ Koza, 1992, page 93 ] </ref> defines variety as a ratio of the number of unique individuals to population size). <p> Thus low variety reinforces itself. In one run (23) variety collapses to near zero but in most cases it eventually hovers near 60% of the population size. This is low compared to reports of 80% to 95% in <ref> [ Koza, 1992, pages 159, 609 and 614 ] </ref> and [ Keijzer, 1996 ] . 5.1 Lost of Variety in Stack Populations Measurements show variety starts in the initial population at its maximum value with every member of the population being different. <p> Thus both changes 1. and 2.b) should be tried. The use of p r = 0:1 stems from the decision to use parameters as similar to <ref> [ Koza, 1992 ] </ref> as possible. It is also the supplied default value with GP-QUICK [ Singleton, 1994 ] . However the use of reproduction is not universal, for example the CGPS [ Nordin, 1994; Nordin and Banzhaf, 1995; Francone et al., 1996 ] does not implement it. <p> As far as is known, GP systems do not currently detect that crossover has produced a child which is identical to one of its parents for the purposes of either reducing run time (2.a) or increasing variety (2.b). <ref> [ Koza, 1992, page 93 ] </ref> ensures every member of the initial population is unique but allows duplicates in subsequent generations.
Reference: [ Koza, 1994 ] <author> John R. Koza. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge Massachusetts, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Crossing like trees with like trees is similar to the crossover operator with "branch typing" used by Koza in most of his experiments involving ADFs in <ref> [ Koza, 1994 ] </ref> . In the case of reproduction, the only action on the chosen tree is also to copy it, in other words each new individual is created by copying all trees of the parent program. <p> In the stack problem each terminal and function can appear in each of the five trees but crossover acts only between like trees so each tree is genetically isolated from each other. (This is known as branch typing and is commonly used with ADFs <ref> [ Koza, 1994, page 86 ] </ref> . An alternative point typing allows crossover to move genetic material between trees). <p> Typically this serves only to increase the convergence of the population. An number of attempts to "scale up" GP have been made based upon imposing functional abstraction on individuals in the population <ref> [ Koza, 1994; Angeline, 1993; Rosca, 1995 ] </ref> . These have had a degree of success. <p> There are a number of techniques which automatically change the representation. The following three techniques co-evolve the representation as the population itself evolves; The Genetic Library Builder (GLiB) [ Angeline, 1994 ] , Automatically Defined Functions (ADFs) <ref> [ Koza, 1994 ] </ref> and Adaptive Representations [ Rosca, 1995 ] . [ Koza, 1994, page 619 ] argues ADFs and other representations provide a different lens with which to view the solution space and that ADFs may help solve a problem by providing a better lens. <p> There are a number of techniques which automatically change the representation. The following three techniques co-evolve the representation as the population itself evolves; The Genetic Library Builder (GLiB) [ Angeline, 1994 ] , Automatically Defined Functions (ADFs) [ Koza, 1994 ] and Adaptive Representations [ Rosca, 1995 ] . <ref> [ Koza, 1994, page 619 ] </ref> argues ADFs and other representations provide a different lens with which to view the solution space and that ADFs may help solve a problem by providing a better lens. The fitness function may be readily changed by hand.
Reference: [ Langdon, 1995 ] <author> W. B. Langdon. </author> <title> Evolving data structures using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 295-302, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 1 Architecture of Stack Individuals Before going into the details of the evolution of variety in the stack populations, this section re-caps the basic multi-tree architecture used in <ref> [ Langdon, 1995 ] </ref> to evolve a single program which implements five actions required of a stack data structure, initialise (makenull), read top of the stack, pop the top of the stack and return its value, push an integer onto the stack and and test to see if the stack is <p> While the proof in [ Price, 1970 ] assumes discrete generations the result "can be applied to species with overlapping, inter-breeding generations". Thus the theorem can be applied to steady state GAs [ Syswerda, 1989; Syswerda, 1991 ] such as used in <ref> [ Langdon, 1995 ] </ref> . For the theorem to hold the genetic operations (crossover and mutation in GA terms) must be independent of the gene. That is on average there must be no relationship between them and the gene. <p> for it based on genes composed of a single GP primitive. 2.5 Application of Price's Theorem to the GP Stack Problem In this section we experimentally test Price's Theorem by comparing its predictions with what actually happened using GP populations from the 60 runs of the stack problem described in <ref> [ Langdon, 1995 ] </ref> . Firstly we consider the change in numbers of a single primitive and then we examine the change in frequency versus fitness for all primitives in a typical and in a successful run. <p> For example when using roulette wheel selection the expected number of children is directly proportional to the parent's fitness. When using tournament selection (as in <ref> [ Langdon, 1995 ] </ref> ) the expected number of children is determined by the parent's rank within the population and the tournament size. The remainder of this section uses the expected number of offspring as predicted by the parents fitness ranking within the current population in place of z. <p> Ewens both give proofs 16 for this interpretation of Fisher's theorem but conclude that it is "mathematically correct but less important than he thought it to be" [ Price, 1972, page 140 ] . 4 Evolution of Stack Problem Populations In this section we return to the stack problem of <ref> [ Langdon, 1995 ] </ref> and investigate why most runs failed to find a solution. <p> Where it is felt certain characters will be required in the problem's solution the initial population and crossover can be controlled in order to ensure individuals within the population have these properties ( <ref> [ Langdon, 1995 ] </ref> and [ Langdon, 1996b ] have described ways in which this can be implemented). An alternative approach is to avoid specialist high level primitives (particularly where they interlock, so one requires another) and use only a small number of general purpose primitives. <p> These extinctions are seen as the main reason why many runs of the stack problem (described in <ref> [ Langdon, 1995 ] </ref> ) failed. In Section 5 it was shown that the loss of these primitives was accompanied by a general loss in variety. <p> There are many techniques that can be 41 used to ensure population diversity remains high (and so the search is defocused) such as splitting the population into demes, fitness niches and mutation, some of which were used in <ref> [ Langdon, 1995; Langdon, 1996b; Langdon, 1996a ] </ref> . Techniques based on biased mate selection to preserve diversity are discussed in [ Ryan, 1994 ] . Defocusing the search means the search is more random and will take longer, if indeed it succeeds.
Reference: [ Langdon, 1996a ] <author> W. B. Langdon. </author> <title> Scheduling maintenance of electrical power transmission networks using genetic programming. </title> <editor> In John Koza, editor, </editor> <booktitle> Late Breaking Papers at the GP-96 Conference, </booktitle> <pages> pages 107-116, </pages> <address> Stanford, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference-contexts: There are many techniques that can be 41 used to ensure population diversity remains high (and so the search is defocused) such as splitting the population into demes, fitness niches and mutation, some of which were used in <ref> [ Langdon, 1995; Langdon, 1996b; Langdon, 1996a ] </ref> . Techniques based on biased mate selection to preserve diversity are discussed in [ Ryan, 1994 ] . Defocusing the search means the search is more random and will take longer, if indeed it succeeds.
Reference: [ Langdon, 1996b ] <author> William B. Langdon. </author> <title> Data structures and genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 20, </booktitle> <pages> pages 395-414. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Thus trapping the population at the partial solution. This highlights the importance of the fitness function throughout the whole of the GP run. I.e. it must guide the evolution of the population toward the solution in the initial population, as well as later, when recognisable partial solutions have evolved. <ref> [ Langdon, 1996b ] </ref> described a similar loss of primitives in the list problem and discussed potential solutions such as mutation, demes and fitness niches to allow multiple diverse partial solutions within the population and potentially slow down the impact of fitness selection on the population. <p> Where it is felt certain characters will be required in the problem's solution the initial population and crossover can be controlled in order to ensure individuals within the population have these properties ( [ Langdon, 1995 ] and <ref> [ Langdon, 1996b ] </ref> have described ways in which this can be implemented). An alternative approach is to avoid specialist high level primitives (particularly where they interlock, so one requires another) and use only a small number of general purpose primitives. <p> There are many techniques that can be 41 used to ensure population diversity remains high (and so the search is defocused) such as splitting the population into demes, fitness niches and mutation, some of which were used in <ref> [ Langdon, 1995; Langdon, 1996b; Langdon, 1996a ] </ref> . Techniques based on biased mate selection to preserve diversity are discussed in [ Ryan, 1994 ] . Defocusing the search means the search is more random and will take longer, if indeed it succeeds.
Reference: [ Montana, 1995 ] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230, </pages> <year> 1995. </year>
Reference-contexts: While strongly typed GP can reduce the size of the search space <ref> [ Montana, 1995 ] </ref> , it may also transform it so that it is easier to search. There are a number of techniques which automatically change the representation.
Reference: [ Nordin and Banzhaf, 1995 ] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Evolving turing-complete programs for a register machine with self-modifying code. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 318-325, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 46 </pages>
Reference: [ Nordin, 1994 ] <author> Peter Nordin. </author> <title> A compiling genetic programming system that directly ma-nipulates the machine code. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 14, </booktitle> <pages> pages 311-331. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ O'Reilly and Oppacher, 1996 ] <author> Una-May O'Reilly and Franz Oppacher. </author> <title> A comparative analysis of GP. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 2, </booktitle> <pages> pages 23-44. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Mutation could also be used to increase population diversity but a high mutation rate might be required to escape from a deceptive local optimum. This would increase the degree of randomness in the search but might introduce a beneficial element of "hill climbing", see <ref> [ O'Reilly and Oppacher, 1996 ] </ref> and [ Iba et al., 1994b ] ). While other GPs may not suffer from lack of variety, convergence of some sort is required if the GP is not to be random search.
Reference: [ Park and Miller, 1988 ] <author> Stephen K. Park and Keith W. Miller. </author> <title> Random number generators: Good ones are hard to find. </title> <journal> Communications of the ACM, </journal> <volume> 32(10) </volume> <pages> 1192-1201, </pages> <month> Oct </month> <year> 1988. </year>
Reference-contexts: The 60 runs of the stack problem use identical parameters and differ only in the initial seed used by the <ref> [ Park and Miller, 1988 ] </ref> pseudo random number generator. For convenience individual runs are numbered (1) to (60).
Reference: [ Price, 1970 ] <author> George R. Price. </author> <title> Selection and covariance. </title> <journal> Nature, </journal> <volume> 227, August 1 </volume> <pages> 520-521, </pages> <year> 1970. </year>
Reference-contexts: It behaves like write in that it returns the original value of aux rather than the new one. 2 Price's Selection and Covariance Theorem Price's Covariance and Selection Theorem <ref> [ Price, 1970 ] </ref> from population genetics relates the change in frequency of a gene in a population from one generation to the next, to the covariance of the gene's frequency in the original population with the number of offspring produced by individuals in that population (see Equation 1). <p> for any linear combination of genes at any number of loci, holds for any sort of dominance or epistasis (non-linear interaction between genes), for sexual or asexual 4 reproduction, for random or non-random mating, for diploid, haploid or polyploid species, and even for imaginary species with more than two sexes" <ref> [ Price, 1970 ] </ref> . In particular it applies to genetic algorithms (GAs) [ Altenberg, 1994 ] . <p> Cov = Covariance 2.1 Proof of Price's Theorem In this section we follow the proof of Price's Theorem given in <ref> [ Price, 1970 ] </ref> (which assumes sexual reproduction) and show it applies to Genetic Algorithms (GAs) [ Holland, 1992 ] in general and to genetic programming (GP) [ Koza, 1992 ] in particular. In the next section (2.2), we extend the proof to cover asexual reproduction. <p> re production is dependent upon fitness and in general dependent on the presence of specific genes but selection of crossover points is random and so independent of genes (Section 2.4 discusses this further for GPs). 2.2 Proof of Price's Theorem with Asexual Reproduction The proof of Price's theorem given in <ref> [ Price, 1970 ] </ref> (reproduced above) assumes sexual reproduction. For it to be applied to GAs and GP it needs to be extended to cover asexual reproduction (i.e. copying and mutation). <p> This and other analysis, leads [ Altenberg, 1995, page 43 ] to conclude "the Schema Theorem has no implications for how well a GA is performing". While the proof in <ref> [ Price, 1970 ] </ref> assumes discrete generations the result "can be applied to species with overlapping, inter-breeding generations". Thus the theorem can be applied to steady state GAs [ Syswerda, 1989; Syswerda, 1991 ] such as used in [ Langdon, 1995 ] .
Reference: [ Price, 1972 ] <author> George R. Price. </author> <title> Fisher's `fundamental theorem' made clear. </title> <journal> Annals of Human Genetics, </journal> <volume> 36 </volume> <pages> 129-140, </pages> <year> 1972. </year>
Reference-contexts: A high fitness variance may indicate a high degree of variation in the population, which might be beneficial). <ref> [ Price, 1972 ] </ref> makes the point that Fisher's publications on his fundamental theorem of natural selection "contains the most confusing published scientific writing I know of" [page 134] leading to "forty years of bewilderment about what he meant" [page 132]. [ Price, 1972 ] and [ Ewens, 1989; Ewens, 1992b; <p> of variation in the population, which might be beneficial). <ref> [ Price, 1972 ] </ref> makes the point that Fisher's publications on his fundamental theorem of natural selection "contains the most confusing published scientific writing I know of" [page 134] leading to "forty years of bewilderment about what he meant" [page 132]. [ Price, 1972 ] and [ Ewens, 1989; Ewens, 1992b; Ewens, 1992a ] argue that the usual interpretation of Fisher's theorem is incorrect and his "fitness" should be considered as just the component of fitness which varies linearly with gene frequency. <p> All other effects, such as "dominance, epistasis, population pressure, climate, and interactions with other species he regarded as a matter of the environment" <ref> [ Price, 1972, page 130 ] </ref> . <p> Price and Ewens both give proofs 16 for this interpretation of Fisher's theorem but conclude that it is "mathematically correct but less important than he thought it to be" <ref> [ Price, 1972, page 140 ] </ref> . 4 Evolution of Stack Problem Populations In this section we return to the stack problem of [ Langdon, 1995 ] and investigate why most runs failed to find a solution.
Reference: [ Reynolds, 1994 ] <author> Craig W. Reynolds. </author> <title> Competition, coevolution and the game of tag. </title> <editor> In Rodney A. Brooks and Pattie Maes, editors, </editor> <booktitle> Proceedings of the Fourth International Workshop on the Synthesis and Simulation of Living Systems, </booktitle> <pages> pages 59-69, </pages> <publisher> MIT, </publisher> <address> Cam-bridge, MA, USA, 6-8 July 1994. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Co-evolution can provide an automatic means of dynamically changing the fitness function [ Siegel, 1994 ] . There is increasing interest in using co-evolution <ref> [ Sen, 1996; Reynolds, 1994; Ryan, 1995 ] </ref> and improved performance has been claimed [ Hillis, 1992 ] . However a more dynamic framework makes analysis of population behaviour harder.
Reference: [ Rocsa, 1996 ] <author> Justinain Rocsa. </author> <title> GP population variety. GP electronic mailing list, </title> <month> 21 Jun </month> <year> 1996. </year>
Reference-contexts: That is genetically diverse individuals may behave similarly, or even identically. As <ref> [ Rocsa, 1996 ] </ref> points out, in the absence of side effects, diverse programs with identical behaviour can be readily constructed if the function set contains functions that are associative or commutative by simple reordering of function arguments. * Even if programs behave differently, in general or when evaluating the given
Reference: [ Rosca and Ballard, 1996 ] <author> Justinian P. Rosca and Dana H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9, </booktitle> <pages> pages 177-202. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: That is if the variety is low then any other measures of genetic, phenotypic or fitness diversity must also be low. The opposite does not hold when it is high. (Other definitions include fitness based population entropy <ref> [ Rosca and Ballard, 1996, Section 9.5 ] </ref> and using the ratio of sum of the sizes of every program in the population to the number of distinct subtrees within the population [ Keijzer, 1996 ] ). 24 In this section we consider the variety of GP populations using the 60
Reference: [ Rosca, 1995 ] <author> Justinian P. Rosca. </author> <title> Genetic programming exploratory power and the discovery of functions. </title> <editor> In John Robert McDonnell, Robert G. Reynolds, and David B. Fogel, editors, </editor> <booktitle> Evolutionary Programming IV Proceedings of the Fourth Annual Conference on Evolutionary Programming, </booktitle> <pages> pages 719-736, </pages> <address> San Diego, CA, USA, 1-3 March 1995. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Typically this serves only to increase the convergence of the population. An number of attempts to "scale up" GP have been made based upon imposing functional abstraction on individuals in the population <ref> [ Koza, 1994; Angeline, 1993; Rosca, 1995 ] </ref> . These have had a degree of success. <p> There are a number of techniques which automatically change the representation. The following three techniques co-evolve the representation as the population itself evolves; The Genetic Library Builder (GLiB) [ Angeline, 1994 ] , Automatically Defined Functions (ADFs) [ Koza, 1994 ] and Adaptive Representations <ref> [ Rosca, 1995 ] </ref> . [ Koza, 1994, page 619 ] argues ADFs and other representations provide a different lens with which to view the solution space and that ADFs may help solve a problem by providing a better lens. The fitness function may be readily changed by hand.
Reference: [ Ryan, 1994 ] <editor> Conor Ryan. Pygmies and civil servants. In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 11, </booktitle> <pages> pages 243-263. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year> <month> 47 </month>
Reference-contexts: Techniques based on biased mate selection to preserve diversity are discussed in <ref> [ Ryan, 1994 ] </ref> . Defocusing the search means the search is more random and will take longer, if indeed it succeeds.
Reference: [ Ryan, 1995 ] <author> Conor Ryan. GPRobots and GPTeams competition, </author> <title> co-evolution and co-operation in genetic programming. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 86-93, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: Co-evolution can provide an automatic means of dynamically changing the fitness function [ Siegel, 1994 ] . There is increasing interest in using co-evolution <ref> [ Sen, 1996; Reynolds, 1994; Ryan, 1995 ] </ref> and improved performance has been claimed [ Hillis, 1992 ] . However a more dynamic framework makes analysis of population behaviour harder.
Reference: [ Sen, 1996 ] <author> Sandip Sen. </author> <title> Adaptation, coevolution and learning in multiagent systems. Technical Report SS-96-01, </title> <publisher> AAAI Press, Stanford, </publisher> <address> CA, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Co-evolution can provide an automatic means of dynamically changing the fitness function [ Siegel, 1994 ] . There is increasing interest in using co-evolution <ref> [ Sen, 1996; Reynolds, 1994; Ryan, 1995 ] </ref> and improved performance has been claimed [ Hillis, 1992 ] . However a more dynamic framework makes analysis of population behaviour harder.
Reference: [ Siegel, 1994 ] <author> Eric V. Siegel. </author> <title> Competitively evolving decision trees against fixed training cases for natural language processing. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 19, </booktitle> <pages> pages 409-423. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Co-evolution can provide an automatic means of dynamically changing the fitness function <ref> [ Siegel, 1994 ] </ref> . There is increasing interest in using co-evolution [ Sen, 1996; Reynolds, 1994; Ryan, 1995 ] and improved performance has been claimed [ Hillis, 1992 ] . However a more dynamic framework makes analysis of population behaviour harder.
Reference: [ Singleton, 1994 ] <author> Andy Singleton. </author> <title> Genetic programming with C++. </title> <journal> BYTE, </journal> <pages> pages 171-176, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Thus both changes 1. and 2.b) should be tried. The use of p r = 0:1 stems from the decision to use parameters as similar to [ Koza, 1992 ] as possible. It is also the supplied default value with GP-QUICK <ref> [ Singleton, 1994 ] </ref> . However the use of reproduction is not universal, for example the CGPS [ Nordin, 1994; Nordin and Banzhaf, 1995; Francone et al., 1996 ] does not implement it.
Reference: [ Stender, 1993 ] <editor> Joachim Stender, editor. </editor> <booktitle> Parallel Genetic Algorithms: Theory and Applications. </booktitle> <publisher> IOS press, </publisher> <year> 1993. </year>
Reference: [ Syswerda, 1989 ] <author> Gilbert Syswerda. </author> <title> Uniform crossover in genetic algorithms. </title> <editor> In J. David Schaffer, editor, </editor> <booktitle> Proceedings of the third international confernece on Genetic Algorithms, </booktitle> <pages> pages 2-9, </pages> <address> 10 Moulton Street, Cambridge, MA 02238, USA, Jun 1989. </address> <publisher> Morgan Kauf-mann, </publisher> <address> San Mateo, California. </address>
Reference-contexts: While the proof in [ Price, 1970 ] assumes discrete generations the result "can be applied to species with overlapping, inter-breeding generations". Thus the theorem can be applied to steady state GAs <ref> [ Syswerda, 1989; Syswerda, 1991 ] </ref> such as used in [ Langdon, 1995 ] . For the theorem to hold the genetic operations (crossover and mutation in GA terms) must be independent of the gene. That is on average there must be no relationship between them and the gene.
Reference: [ Syswerda, 1991 ] <author> Gilbert Syswerda. </author> <title> A study of reproduction in generational and steady state genetic algorithms. </title> <editor> In Gregory J. E. Rawlings, editor, </editor> <booktitle> Foundations of genetic algorithms, </booktitle> <pages> pages 94-101. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1991. </year>
Reference-contexts: While the proof in [ Price, 1970 ] assumes discrete generations the result "can be applied to species with overlapping, inter-breeding generations". Thus the theorem can be applied to steady state GAs <ref> [ Syswerda, 1989; Syswerda, 1991 ] </ref> such as used in [ Langdon, 1995 ] . For the theorem to hold the genetic operations (crossover and mutation in GA terms) must be independent of the gene. That is on average there must be no relationship between them and the gene.
Reference: [ Tackett, 1994 ] <author> Walter Alden Tackett. </author> <title> Recombination, Selection, and the Genetic Construction of Computer Programs. </title> <type> PhD thesis, </type> <institution> University of Southern California, Department of Electrical Engineering Systems, </institution> <year> 1994. </year>
Reference: [ Tackett, 1995 ] <author> Walter Alden Tackett. </author> <title> Greedy recombination and genetic search on the space of computer programs. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 271-297, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This interpretation of the theorem is only true when the population mates randomly and there is no dominance or epistasis" [ Frank, 1995, page 382 ] . An example of this usage is given in <ref> [ Tackett, 1995, page 289 ] </ref> which claims "According to Fisher's fundamental theory of natural selection the ability of a population to increase in fitness is proportional to the variance in fitness of the population members." We would certainly expect epistasis (non-linear interaction between genes) to occur in most GAs and <p> We conclude that under the usual interpretation Fisher's theorem does not normally apply to GAs. This is important because this interpretation of Fisher's theorem has been used as an argument in favour of GA selection schemes which produce a high variance in population fitness <ref> [ Tackett, 1995, pages 272 and 290 ] </ref> . (There may be other reasons for preferring these selection methods.
Reference: [ Teller, 1994 ] <author> Astro Teller. </author> <title> The evolution of mental models. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 9, </booktitle> <pages> pages 199-219. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year> <month> 48 </month>
Reference-contexts: has the value 10). * indexed memory functions read and write. * primitives to help maintain a stack pointer; aux, inc aux, dec aux and write Aux. 1.2 Indexed Memory 63 integer memory cells (numbered 31 : : : 31) were available. 1.3 Register In addition to the indexed memory <ref> [ Teller, 1994 ] </ref> a single auxiliary variable "aux" was provided which, like each addressable memory cell, is capable of storing a single 32-bit signed integer.
References-found: 56

