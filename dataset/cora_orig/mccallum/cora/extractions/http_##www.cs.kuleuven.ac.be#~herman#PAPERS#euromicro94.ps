URL: http://www.cs.kuleuven.ac.be/~herman/PAPERS/euromicro94.ps
Refering-URL: http://www.cs.kuleuven.ac.be/~henk/DPS/publications.html
Root-URL: 
Email: herman,pv@cs.kuleuven.ac.be  
Title: Persistence in Open Distributed Systems The COMET Approach system applies object-oriented technology to tackle the
Author: Herman Moons, Pierre Verbaeten 
Note: The COMET  
Address: Leuven, Belgium  
Affiliation: Dept. of Computer Science Katholieke Universiteit Leuven  
Abstract: Open Distributed Processing (ODP) has gained considerable attention in the past few years, as a result of user demand for large-scale cooperative computing. A typical characteristic of ODP environments is the presence of many users, with various needs requiring a wide range of different solutions. The challenge is to develop a uniform framework, that captures all these differences, yet presents a simple programming model to the user. This paper illustrates the COMET approach, by demonstrating how persistence support can be incorporated, through specialization of the basic programming model. The same approach can be applied to other problem areas, e.g. for the realization of replicated and atomic objects. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> European Computer Manufacturers Association, </author> <title> Support Environment for Open Distributed Processing (SE-ODP), </title> <note> ECMA TR/49 (January, </note> <year> 1990). </year>
Reference: [2] <author> Malcolm Atkinson, Ken Chisholm, and Paul Cockshott, </author> <title> ``PS-algol: an Algol with a Persistent Heap'' ACM Sigplan Notices, </title> <note> Vol.17 (7) , pp. </note> <month> 24-31 (July, </month> <year> 1982). </year>
Reference-contexts: The persistence support, based on typed memory, has been specifically designed for use in a heterogeneous environment, and requires no changes to existing language compilers. The literature discusses many other approaches for obtaining object persistence. In PS-Algol <ref> [2, 8] </ref>, SOS [12] and GemStone [4], existing programming languages are extended, thus allowing an almost seemless addition of persistence. An alternative approach is taken in Arjuna [13] and Choices [5], where persistence is provided at the programmer level in a semi-transparent way, by using the inheritance mechanisms of C++.
Reference: [3] <author> A. Birell and B. Nelson, </author> <title> ``Implementing Remote Procedure Calls'' ACM Transactions on Computer Systems, </title> <type> Vol.2 (1) , pp. </type> <month> 39-59 (February, </month> <year> 1984). </year>
Reference: [4] <author> Robert Bretl, David Maier, Allen Otis, Jason Penney, Bruce Schuchardt, Jacob Stein, E. Harold Williams, and Monty Williams, </author> <title> ``The GemStone Data Management System'' pp. 283-308 in Object-Oriented Concepts, Databases, and Applications, </title> <editor> ed. Won Kim and Frederick H. Lochovsky, </editor> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts (1989). </address>
Reference-contexts: The persistence support, based on typed memory, has been specifically designed for use in a heterogeneous environment, and requires no changes to existing language compilers. The literature discusses many other approaches for obtaining object persistence. In PS-Algol [2, 8], SOS [12] and GemStone <ref> [4] </ref>, existing programming languages are extended, thus allowing an almost seemless addition of persistence. An alternative approach is taken in Arjuna [13] and Choices [5], where persistence is provided at the programmer level in a semi-transparent way, by using the inheritance mechanisms of C++.
Reference: [5] <author> Roy H. Campbell and Peter W. Madany, </author> <title> Considerations of Persistence and Security in Choices, an ObjectOriented Operating System, </title> <type> Technical Report UIUCDCS-R-91-1670, </type> <institution> TTR91-27, University of Illinois at Urbana-Champaign, Dept. of Computer Science (March, </institution> <year> 1991). </year>
Reference-contexts: The literature discusses many other approaches for obtaining object persistence. In PS-Algol [2, 8], SOS [12] and GemStone [4], existing programming languages are extended, thus allowing an almost seemless addition of persistence. An alternative approach is taken in Arjuna [13] and Choices <ref> [5] </ref>, where persistence is provided at the programmer level in a semi-transparent way, by using the inheritance mechanisms of C++. COMET's persistence support is most similar to the persistent heap of PS-Algol. This language also tags the persistent data with run-time type information.
Reference: [6] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, Revision 1.1, </title> <note> OMG Document 91.12.1 (December 1991). </note>
Reference-contexts: Such an approach effectively shields us from the relatively low speed of the disks that ultimately contain the data, while still being resilient to node crashes. 6. Related Work Overall, the COMET system has similar goals as those expressed in the CORBA <ref> [6] </ref> and Comandos [7] projects. The main difference is COMET's explicit support for a heterogeneous user community. In particular, COMET distinguishes itself through its use of a uniform programming model, that can be specialized by means of inheritance to extend its functionality.
Reference: [7] <author> C. Horn and A. Donnelly, </author> <title> Architectural Aspects of the Comandos Platform, </title> <type> Research Report, </type> <institution> Distributed Systems Group, Dept. of Computer Science, Trinity College Dublin (February, </institution> <year> 1989). </year>
Reference-contexts: Such an approach effectively shields us from the relatively low speed of the disks that ultimately contain the data, while still being resilient to node crashes. 6. Related Work Overall, the COMET system has similar goals as those expressed in the CORBA [6] and Comandos <ref> [7] </ref> projects. The main difference is COMET's explicit support for a heterogeneous user community. In particular, COMET distinguishes itself through its use of a uniform programming model, that can be specialized by means of inheritance to extend its functionality.
Reference: [8] <author> K. G. Kulkarni and M. P. Atkinson, </author> <title> ``Implementing an Extended Functional Data Model Using PS-Algol'' Software, </title> <journal> Practice and Experience, </journal> <note> Vol.17 (3) , pp. </note> <month> 171-185 (March </month> <year> 1987). </year>
Reference-contexts: The persistence support, based on typed memory, has been specifically designed for use in a heterogeneous environment, and requires no changes to existing language compilers. The literature discusses many other approaches for obtaining object persistence. In PS-Algol <ref> [2, 8] </ref>, SOS [12] and GemStone [4], existing programming languages are extended, thus allowing an almost seemless addition of persistence. An alternative approach is taken in Arjuna [13] and Choices [5], where persistence is provided at the programmer level in a semi-transparent way, by using the inheritance mechanisms of C++.
Reference: [9] <author> B. Liskov and L. Shrira, </author> <title> ``Promises: Linguistic Support for Efficient Asynchronous Procedure Calls in Distributed Systems'' pp. </title> <booktitle> 260-267 in Proceedings of the SIGPLAN '88 Conference on Programming Language Design and Implementation (June, </booktitle> <year> 1988). </year>
Reference: [10] <author> Herman Moons and Pierre Verbaeten, </author> <title> ``Persistency Support for Mobile Objects in the COMET Heterogeneous Environment'' pp. </title> <booktitle> 38-48 in Proceedings of the 2nd International Workshop on Object Orientation in Operating Systems, </booktitle> <address> Dourdan, France (September 24-25, </address> <year> 1992). </year>
Reference: [11] <author> Herman Moons and Pierre Verbaeten, </author> <title> ``Object Invocation in the COMET Open Distributed System: the Dialogue Model'' pp. </title> <booktitle> 435-442 in Proceedings of the Euromicro Workshop on Parallel and Distributed Processing, </booktitle> <address> Gran Canaria (January 27-29, </address> <year> 1993). </year>
Reference: [12] <author> M. Shapiro, Y. Gourhant, S. Habert, L. Mosseri, M. Ruffin, and C. Valot, </author> <title> SOS: an Object-Oriented Operating System - Assesment and Perspectives, </title> <note> Research Report (December 1989). </note>
Reference-contexts: The persistence support, based on typed memory, has been specifically designed for use in a heterogeneous environment, and requires no changes to existing language compilers. The literature discusses many other approaches for obtaining object persistence. In PS-Algol [2, 8], SOS <ref> [12] </ref> and GemStone [4], existing programming languages are extended, thus allowing an almost seemless addition of persistence. An alternative approach is taken in Arjuna [13] and Choices [5], where persistence is provided at the programmer level in a semi-transparent way, by using the inheritance mechanisms of C++.
Reference: [13] <author> S.K. Shrivastava, G.N. Dixon, and G.D. Parrington, </author> <title> ``An Overview of the Arjuna Distributed Programming System'' IEEE Software (January, </title> <year> 1991). </year>
Reference-contexts: The literature discusses many other approaches for obtaining object persistence. In PS-Algol [2, 8], SOS [12] and GemStone [4], existing programming languages are extended, thus allowing an almost seemless addition of persistence. An alternative approach is taken in Arjuna <ref> [13] </ref> and Choices [5], where persistence is provided at the programmer level in a semi-transparent way, by using the inheritance mechanisms of C++. COMET's persistence support is most similar to the persistent heap of PS-Algol. This language also tags the persistent data with run-time type information.
Reference: [14] <author> International Organization for Standardization, </author> <title> Information Processing Systems Open Systems Interconnection Specification of Abstract Systax Notation One (ASN.1), </title> <note> ISO/OSI 8824 (1987). </note>
Reference: [15] <author> Edward F. Walker, Richard Floyd, and Paul Neves, </author> <title> ``Asynchronous Remote Operation Execution in Distributed Systems'' pp. </title> <booktitle> 253-259 in Proceedings 10th International Conference on Distributed Computing Systems, </booktitle> <address> Paris, France (May 28 - June 1, </address> <year> 1990). </year>
References-found: 15

