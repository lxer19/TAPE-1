URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-96-14.ps
Refering-URL: http://www.eecs.umich.edu/~rundenst/group/papers.html
Root-URL: http://www.cs.umich.edu
Email: jning@eecs.umich.edu  ywh@eecs.umich.edu  rundenst@eecs.umich.edu  
Title: Hierarchical Optimization of Optimal Path Finding for Transportation Applications  
Author: Ning Jing Yun-Wu Huang Elke A. Rundensteiner 
Address: Michigan  Michigan  
Affiliation: Changsha Institute of Technology  University of  University of  
Abstract: Efficient path query processing is a key requirement for advanced database applications including GIS (Geographic Information Systems) and ITS (Intelligent Transportation Systems). We study the problem in the context of automobile navigation systems where a large number of path requests can be submitted over the transportation network within a short period of time. To guarantee efficient re-sponsefor path queries, we employ a path view materialization strategy for precomputing the best paths. We tackle the following three issues: (1) memory-resident solutions quickly exceed current computer storage capacity for networks of thousands of nodes, (2) disk-based solutions have been found inefficient to meet the stringent performance requirements, and (3) path views become too costly to update for large graphs. We propose the HEP V (Hierarchical Encoded Path View) approach that addresses these problems while guaranteeing the optimality of path retrieval. Our experimental results reveal that HEP V is more efficient than previously known path finding approaches. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, S. Dar and H. V. Jagadish, </author> <title> Direct Transitive Closure Algorithms: Design and Performance Evaluation, </title> <journal> ACM TODS, </journal> <volume> Vol. 15, No. 3, </volume> <month> Sep. </month> <year> 1990, </year> <pages> pp. 427 - 458. </pages>
Reference-contexts: retrieval of the complete path is less critical especially as it may still be adjusted according to changing conditions during the travel period. 1.2 Path Query Optimization: Related Work While much research has been conducted by both the theory and database communities on path finding, many suggested transitive closure algorithms <ref> [1, 3, 12] </ref> do not effectively handle path computation on large graphs in real-time application domains such as ITS (Intelligent Transportation Systems) systems. With new computer architectures and networks, the traditional algorithms were adapted to parallel and distributed transitive closure algorithms [7, 8].
Reference: [2] <author> R. Agrawal and H. V. Jagadish, </author> <title> Materialization and Incremental Update of Path Information, </title> <booktitle> Proc. of the 5th Int. Conf. on Data Engineering, </booktitle> <year> 1989, </year> <pages> pp. 374 - 383. </pages>
Reference-contexts: With new computer architectures and networks, the traditional algorithms were adapted to parallel and distributed transitive closure algorithms [7, 8]. As an alternative approach, <ref> [2] </ref> precompute all-pair shortest paths and store them in an encoded path view structure. Queries can be efficiently answered by performing simple lookups on the precomputed path view. This approach is a trade-off between computing paths from scratch and precomputing all paths. <p> Although this fully materialized path view is very efficient for path retrieval, it requires an unrealistically large amount of storage space. We thus utilize the encoded path view structure <ref> [2, 9] </ref>, a partially materialized path view which stores the same path information using less storage space, and with only a linear increase in path retrieval time. <p> The flat A fl has the least efficient path retrieval time of more than 9 seconds because it calculates directly on the oversized graph. 7 Conclusion In this paper, we proposed a hierarchical graph model that supports efficient optimal path retrieval. By extending the encoded path view <ref> [2, 9] </ref> to the hierarchical graph model, we achieve an excellent compromise between the complete computation of paths on-demand versus precomputing all paths. We conduct experiments for our hierarchical path view approach HEP V using synthetic graphs and real maps.
Reference: [3] <author> R. Agrawal and H. V. Jagadish, </author> <title> Hybrid Transitive Closure Algorithms, </title> <booktitle> Proc. of the 16th VLDB Conf., </booktitle> <year> 1990, </year> <pages> pp. 326 - 334. </pages>
Reference-contexts: retrieval of the complete path is less critical especially as it may still be adjusted according to changing conditions during the travel period. 1.2 Path Query Optimization: Related Work While much research has been conducted by both the theory and database communities on path finding, many suggested transitive closure algorithms <ref> [1, 3, 12] </ref> do not effectively handle path computation on large graphs in real-time application domains such as ITS (Intelligent Transportation Systems) systems. With new computer architectures and networks, the traditional algorithms were adapted to parallel and distributed transitive closure algorithms [7, 8].
Reference: [4] <author> T. Cormen, C. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: From the definition of transitive closure, if &lt; N i ; N j &gt;2 CLOSU RE (G), then there exists a path P ij in G. 2.2 Encoded Path View Structure: F EP V To find the shortest paths, we could apply one of the shortest path algorithms <ref> [4] </ref> to calculate this path on-the-fly. However, the high complexity for this computation prevents their use in real-time applications such as ITS. An alternative solution is to precompute all-pair shortest paths (i.e., materialized path view). <p> f N , L f L, and 1 The computational complexity of all-pair Dijkstra algorithm is O (n 2 log (n) + en) = O (n 2 log (n) + dn 2 ), with n the number of nodes, e the number of links, and d the average out degree <ref> [4] </ref>. The ITS networks are sparse graphs with low out degree, hence the complexity is O (n 2 log (n)). 2 The space requirement is O (n 2 ) if every node is reachable from every other node.
Reference: [5] <author> E. W. Dijkstra, </author> <title> A Note on Two Problems in Connection with Graph Theory, </title> <journal> Numerische Mathematik, </journal> <volume> Vol. 1, </volume> <year> 1959, </year> <pages> pp. 269 - 271. </pages>
Reference: [6] <author> M. J. Egenhofer, </author> <title> What's Special about Spatial? Database Requirements for Vehicle Navigation in Geographic Space, </title> <booktitle> Proc. of the 1993 ACM SIGMOD Conf., </booktitle> <year> 1993, </year> <pages> pp. 398 - 402. </pages>
Reference-contexts: 1 Introduction 1.1 Motivation and Goals The capability of computing path queries is an essential feature for advanced database applications such as geographical information systems <ref> [6] </ref> and computer networks. Our goal is to explore solutions for path finding in general with particular focus on addressing the problems inherent to navigation systems applications [6, 9, 10, 16]. <p> Our goal is to explore solutions for path finding in general with particular focus on addressing the problems inherent to navigation systems applications <ref> [6, 9, 10, 16] </ref>. This raises the following four issues: First, we are concerned with providing answers to path queries issued by a potentially large number of concurrent requests (e.g., during peak rush hour periods).
Reference: [7] <author> M. A. W. Hustma, Peter M. G. Apers, and S. Ceri, </author> <title> Distributed Transitive Closure Computations: The Disconnection Set Approach, </title> <booktitle> Proc. of the 16th VLDB Conf., </booktitle> <year> 1990, </year> <pages> pp. 335 - 346. </pages>
Reference-contexts: With new computer architectures and networks, the traditional algorithms were adapted to parallel and distributed transitive closure algorithms <ref> [7, 8] </ref>. As an alternative approach, [2] precompute all-pair shortest paths and store them in an encoded path view structure. Queries can be efficiently answered by performing simple lookups on the precomputed path view. This approach is a trade-off between computing paths from scratch and precomputing all paths.
Reference: [8] <author> M. A. W. Hustma, F. Cacace, and S. Ceri, </author> <title> Parallel Hierarchical Evaluation of Transitive Closure Queries, </title> <booktitle> Proc. of the 1st Int. Conf. on Parallel and Distributed Information Systems, </booktitle> <year> 1990, </year> <pages> pp. 130 - 137. </pages>
Reference-contexts: With new computer architectures and networks, the traditional algorithms were adapted to parallel and distributed transitive closure algorithms <ref> [7, 8] </ref>. As an alternative approach, [2] precompute all-pair shortest paths and store them in an encoded path view structure. Queries can be efficiently answered by performing simple lookups on the precomputed path view. This approach is a trade-off between computing paths from scratch and precomputing all paths. <p> The hierarchical abstraction has been proposed by some researchers to overcome this problem. <ref> [8] </ref> for example divided a relation into fragments and introduced the notion of high-speed fragment. Unfortunately, the formation of high-speed fragments are very sensitive to the update of the underlying base relation. Therefore the authors recommended this approach only for rather stable base relations.
Reference: [9] <author> Y. W. Huang, N. Jing, and E. A. Run-densteiner, </author> <title> A Semi-Materialized View Approach for Route Maintenance in IVHS, </title> <booktitle> Proc. of the 2nd ACM Workshop on Geographic Information Systems, </booktitle> <year> 1994, </year> <pages> pp. 144 - 151. </pages>
Reference-contexts: Our goal is to explore solutions for path finding in general with particular focus on addressing the problems inherent to navigation systems applications <ref> [6, 9, 10, 16] </ref>. This raises the following four issues: First, we are concerned with providing answers to path queries issued by a potentially large number of concurrent requests (e.g., during peak rush hour periods). <p> Queries can be efficiently answered by performing simple lookups on the precomputed path view. This approach is a trade-off between computing paths from scratch and precomputing all paths. While this approach has been proven to be promising for relatively small map data sets, we determined <ref> [9] </ref> that it exceeds the memory capacity of typical computer systems for large graphs (e.g., graphs of 3,600 nodes or larger) and the performance of computing the path view deteriorates quickly (e.g., it takes 4 minutes for a graph with 3,600 nodes on a Sun SPARC-20.). <p> Although this fully materialized path view is very efficient for path retrieval, it requires an unrealistically large amount of storage space. We thus utilize the encoded path view structure <ref> [2, 9] </ref>, a partially materialized path view which stores the same path information using less storage space, and with only a linear increase in path retrieval time. <p> We use EN CODE (G) to denote the path encoding process for 270 graph G. A complete discussion of the materialized path view approach can be found in <ref> [9] </ref>. 2.3 Path Retrieval Over F EP V To retrieve the shortest path from F EP V , we start from the table associated with the source node, identifying the needed tuple by searching the table using the destination node as the key. <p> All other fragments are un-affected. For the flat graph, the whole graph is typically affected even if only few links are changed <ref> [9] </ref>. For a hierarchical grid graph of 3,600 nodes and 16 fragments, the encoding time of one fragment is around 1 second, whereas the encoding time of the super-graph is more than 22 seconds. <p> The flat A fl has the least efficient path retrieval time of more than 9 seconds because it calculates directly on the oversized graph. 7 Conclusion In this paper, we proposed a hierarchical graph model that supports efficient optimal path retrieval. By extending the encoded path view <ref> [2, 9] </ref> to the hierarchical graph model, we achieve an excellent compromise between the complete computation of paths on-demand versus precomputing all paths. We conduct experiments for our hierarchical path view approach HEP V using synthetic graphs and real maps.
Reference: [10] <author> Y. W. Huang, N. Jing, and E. A. Rundensteiner, </author> <title> Hierarchical Path Views: A Model Based on Fragmentation and Transportation Road Types, </title> <booktitle> Proc. of the 3rd ACM Workshop on Geographic Information Systems, </booktitle> <year> 1995, </year> <pages> pp. 93 - 100. </pages>
Reference-contexts: Our goal is to explore solutions for path finding in general with particular focus on addressing the problems inherent to navigation systems applications <ref> [6, 9, 10, 16] </ref>. This raises the following four issues: First, we are concerned with providing answers to path queries issued by a potentially large number of concurrent requests (e.g., during peak rush hour periods). <p> Unfortunately, the formation of high-speed fragments are very sensitive to the update of the underlying base relation. Therefore the authors recommended this approach only for rather stable base relations. In <ref> [10] </ref>, we have presented a hierarchical graph model which classi 269 fies links according to road types and pushes up high speed roads such as highways to the next higher level of hierarchy. However, the paths retrieved from such hierarchical graphs are not guaranteed to be optimal. <p> As a comparison, we have implemented A fl algorithm [16], because it has been quite influential to the research of the shortest path problems due to its good performance. In addition, we have also implemented the hierarchical A fl algorithm <ref> [10] </ref>. The hierarchical A fl algorithm is a three step A fl search: First, starting from the fragment to which the source node belongs to find a path that leads to a border node.
Reference: [11] <author> Y. W. Huang, N. Jing, and E. A. Rundensteiner, </author> <title> Effective Graph Clustering for Path Queries in Digital Map Databases, </title> <booktitle> Proc. of the 5th Int. Conf. on Information and Knowledge Management, </booktitle> <year> 1996. </year>
Reference-contexts: For any border node pair of the changed fragment (line 3), we need to find its new minimum shortest path weight (line 5 In [13] we discuss the issues of graph partitioning and propose a link-sorting partition algorithm which we used in the experiments in this paper. <ref> [11] </ref> studies the graph clustering techniques which could also be used for partitioning.
Reference: [12] <author> Y. Ioannidis, R. Ramakrishnan, and L. Winger, </author> <title> Transitive Closure Algorithms Based on Graph Traversal, </title> <journal> ACM TODS, </journal> <volume> Vol. 18, No. 3, </volume> <month> Sep. </month> <year> 1993, </year> <pages> pp. 512 - 576. </pages>
Reference-contexts: retrieval of the complete path is less critical especially as it may still be adjusted according to changing conditions during the travel period. 1.2 Path Query Optimization: Related Work While much research has been conducted by both the theory and database communities on path finding, many suggested transitive closure algorithms <ref> [1, 3, 12] </ref> do not effectively handle path computation on large graphs in real-time application domains such as ITS (Intelligent Transportation Systems) systems. With new computer architectures and networks, the traditional algorithms were adapted to parallel and distributed transitive closure algorithms [7, 8].
Reference: [13] <author> N. Jing, Y. W. Huang, and E. A. Rundensteiner, </author> <title> Hierarchical Encoded Path View Approach and Its Evaluation, ITS Research Center of Excellence, </title> <institution> University of Michigan, UMTRI-88499, </institution> <year> 1995. </year>
Reference-contexts: As discussed in the previous section, the computational complexity of the path algorithm largely depends on the number of nodes in the graph, thus savings are expected. 3 The hierarchical graph has been extended to multi-levels <ref> [13] </ref>. <p> Theorem 3 indicates how the shortest path weight over the hierarchical graph can be computed if source and destination nodes are in different fragments. In this case, the shortest 4 We omit the proofs here due to space limitation. Instead, complete proofs are given in <ref> [13] </ref>. path weight is the minimum among all possible cross-level shortest paths described above. Based on the optimality theorems, we develop the optimal path retrieval algorithm which is depicted in Figure 4. <p> We present the HEP V update algorithm in Figure 6. For any border node pair of the changed fragment (line 3), we need to find its new minimum shortest path weight (line 5 In <ref> [13] </ref> we discuss the issues of graph partitioning and propose a link-sorting partition algorithm which we used in the experiments in this paper. [11] studies the graph clustering techniques which could also be used for partitioning.
Reference: [14] <author> S. Jung, S. Pramanik, </author> <title> HiTi Graph Model of Topological Road Maps in Navigation Systems, </title> <booktitle> Proc. of the 12th Int. Conf. on Data Engineering, </booktitle> <year> 1996, </year> <pages> pp. 76 - 84. </pages>
Reference-contexts: However, the paths retrieved from such hierarchical graphs are not guaranteed to be optimal. Similarly, [16] proposed a hierarchical A fl algorithm for road navigation systems, which while more efficient than flat A fl does not guarantee optimality either. <ref> [14] </ref> proposed another hierarchical multi-graph model by dividing graph into subgraphs and pushing up the precomputed paths as well as links between the boundary nodes. The paper did not discuss how the optimality can be achieved.
Reference: [15] <institution> Loral Federal Systems, IVHS Architecture Phase One Final Report, Sponsored by Federal Highway Administration, DTFH61-93-C-00211, </institution> <year> 1994. </year>
Reference-contexts: Third, our solution must provide response at a near real-time level of performance (i.e., within seconds). Fourth, based on the requirements of instruction-based navigation systems <ref> [15] </ref>, we are interested in efficiently determining the next link for the desired path rather than necessarily retrieving the complete path all at once.
Reference: [16] <author> S. Shekar, A. Kohli, and M. Coyle, </author> <title> Path Computation Algorithms for Advanced Traveler Information Systems, </title> <booktitle> Proc. of the 9th Int. Conf. on Data Engineering, </booktitle> <year> 1993, </year> <pages> pp. 31 - 39. 276 </pages>
Reference-contexts: Our goal is to explore solutions for path finding in general with particular focus on addressing the problems inherent to navigation systems applications <ref> [6, 9, 10, 16] </ref>. This raises the following four issues: First, we are concerned with providing answers to path queries issued by a potentially large number of concurrent requests (e.g., during peak rush hour periods). <p> In [10], we have presented a hierarchical graph model which classi 269 fies links according to road types and pushes up high speed roads such as highways to the next higher level of hierarchy. However, the paths retrieved from such hierarchical graphs are not guaranteed to be optimal. Similarly, <ref> [16] </ref> proposed a hierarchical A fl algorithm for road navigation systems, which while more efficient than flat A fl does not guarantee optimality either. [14] proposed another hierarchical multi-graph model by dividing graph into subgraphs and pushing up the precomputed paths as well as links between the boundary nodes. <p> However, the price of these benefits is an increase of the cost for path retrieval. As a comparison, we have implemented A fl algorithm <ref> [16] </ref>, because it has been quite influential to the research of the shortest path problems due to its good performance. In addition, we have also implemented the hierarchical A fl algorithm [10].
References-found: 16

