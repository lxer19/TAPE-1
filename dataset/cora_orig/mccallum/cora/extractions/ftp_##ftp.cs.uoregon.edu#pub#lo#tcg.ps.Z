URL: ftp://ftp.cs.uoregon.edu/pub/lo/tcg.ps.Z
Refering-URL: http://www.cs.uoregon.edu/research/DistributedComputing/archive.html
Root-URL: http://www.cs.uoregon.edu
Email: email: lo@cs.uoregon.edu  
Title: Temporal Communication Graphs: Lamport's Process-Time Graphs Augmented for the Purpose of Mapping and Scheduling  
Author: Virginia M. Lo 
Address: 97403-1202  
Affiliation: Dept. of Computer Science University of Oregon Eugene, Oregon  Oregon Advanced Computing Institute  
Date: 4, Dec. 1992.  
Note: Appears in the Journal of Paralleland Distributed Computing, Vol. 16, Number  This research was sponsored by NSF MIP91-08528, NSF CCR-8808532, and the  
Abstract: The temporal communication graph (TCG) is a graph theoretic model of parallel computation that we have developed for the mapping of parallel computations to message-passing parallel architectures. The TCG can be viewed as an augmented version of Lamport's process-time graphs. It integrates the two dominant models currently in use in the areas of mapping and scheduling: the static task graph and the DAG. In addition, the TCG provides the capability to identify logically synchronous phases of communication and computation, and to describe the temporal behavior of a parallel algorithm in terms of these phases. This paper defines the TCG, introduces a language for describing TCGs, illustrates its use for mapping and scheduling, and discusses a wide range of potential uses for the TCG in the area of parallel programming environments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Berman and B. Stramm. Prep-p: </author> <title> Evolution and overview. </title> <type> Technical Report CS89-158, </type> <institution> University of California at San Diego, </institution> <year> 1989. </year>
Reference-contexts: A wealth of research has been conducted over the past 15 years utilizing this basic model including [2], <ref> [1] </ref>, [11] to name just a few. Much of this research utilizes algorithms that are closely tied to the use of the static task graph model and which cannot be adapted to the DAG model.
Reference: [2] <author> S. H. Bokhari. </author> <title> Assignment Problems in Parallel and Distributed Computing. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1987. </year>
Reference-contexts: A wealth of research has been conducted over the past 15 years utilizing this basic model including <ref> [2] </ref>, [1], [11] to name just a few. Much of this research utilizes algorithms that are closely tied to the use of the static task graph model and which cannot be adapted to the DAG model.
Reference: [3] <author> J.C. Browne. </author> <title> Framework for fomulation and analysis of parallel computation structures. </title> <journal> Parallel Computing, </journal> <volume> 3 </volume> <pages> 1-9, </pages> <year> 1986. </year>
Reference-contexts: The DAG has been used for the scheduling problem in which tasks are assigned to a processor and to a time slot. Researchers who have developed DAG-based algorithms include <ref> [3] </ref>, [12] and many more. These include the many list scheduling algorithms, critical path algorithms, and techniques such as linear clustering. The DAG model fails to capture the spatial topology of the computation when it is defined as a set of communicating parallel processes.
Reference: [4] <author> H. El-Rewini and T.G. Lewis. </author> <title> Scheduling parallel program tasks onto arbitrary target machines. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9 </volume> <pages> 138-153, </pages> <year> 1990. </year> <month> 14 </month>
Reference-contexts: The specific algorithms utilized here are the OREGAMI [9] algorithms for contraction, placement, and routing which do not utilize regularity. Case (ii) shows the application of the Mapping Heuristic (MH), an algorithm developed by <ref> [4] </ref> for the DAG-model. In case (iii), we use OREGAMI algorithms which take advantage of the regular structure of the divide and conquer algorithm as defined by LaRCS and the TCG.
Reference: [5] <author> W. G. Griswold, G. A. Harrison, D. Notkin, and L. Snyder. </author> <title> Port ensembles: a communication ab-straction for nonshared memory parallel programming. </title> <type> Technical report, </type> <institution> University of Washington, </institution> <year> 1989. </year>
Reference-contexts: TCG as an abstraction for parallel programming: We note that the TCG model of parallel computation fits the XYZ abstraction used in the ORCA project <ref> [5] </ref> and that it is possible that the LaRCS code definition of the TCG can be embedded in languages such as ORCA.
Reference: [6] <author> A. A. Hough and J. E. Cuny. </author> <title> Perspective views: A technique for enhancing parallel program visualization. </title> <booktitle> In Proceedings IEEE 1990 International Conference on Parallel Processing, </booktitle> <pages> pages II:124-132, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: This approach is utilized in Hough and Cuny's work with the Belvedere 11 12 pattern-oriented debugger <ref> [6] </ref>. In their system, user-defined abstract events are viewed through one or more "perspectives," thereby facilitating the debugging of the parallel program through visualization and pattern matching techniques. We note that the LaRCS comphase corresponds precisely to one of the abstract events monitored by their system (logical communication events).
Reference: [7] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: Note that the TCG as we have described it up to this point is identical to Lamport's process-time diagrams <ref> [7] </ref>. We augment Lamport's model with weights associated with the nodes and edges, used to represent computation and communication costs, respectively. In addition, a mapping function 1 on subgraphs of the TCG is used to identify computation or communication phases: sets of logically synchronous compute events or communication events, respectively.
Reference: [8] <author> V. M. Lo. </author> <title> Temporal communication graphs: Lamport's process-time graphs augmented for the purpose of mapping and scheduling. </title> <type> Technical Report CIS-TR-92-05, </type> <institution> University of Oregon Dept. of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: Figure 1 shows the static-TCG and the TCG-DAG for a parallel algorithm for the n-body problem which was designed for the Cosmic Cube. A formal graph theoretic definition of the TCG can be found in <ref> [8] </ref>. We note that many practical parallel algorithms involve one or more phases of computation and communication. Communication phases are often characterized by regularity in the communication topology, such as a mesh or tree topology.
Reference: [9] <author> V. M. Lo, S. Rajopadhye, S. Gupta, D. Keldsen, M. A. Mohamed, and J. Telle. OREGAMI: </author> <title> Tools for mapping parallel algorithms to parallel architectures. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 20(3), </volume> <month> June </month> <year> 1991. </year>
Reference-contexts: For example, Figure 5 shows the use of the TCG model for a parallel algorithm for divide-and-conquer computations in three different cases. In case (i) mapping algorithms developed for the static task graph model are applied to the static-TCG. The specific algorithms utilized here are the OREGAMI <ref> [9] </ref> algorithms for contraction, placement, and routing which do not utilize regularity. Case (ii) shows the application of the Mapping Heuristic (MH), an algorithm developed by [4] for the DAG-model.
Reference: [10] <author> V. M. Lo, S. Rajopadhye, M. A. Mohamed, S. Gupta, B. Nitzberg, J. A. Telle, and X. X. Zhong. LaRCS: </author> <title> A language for describing parallel computations for the purpose of mapping. </title> <type> Technical Report CIS-TR-90-16, </type> <institution> University of Oregon Dept. of Computer Science, </institution> <year> 1990. </year> <note> To appear IEEE Transaction on Parallel and Distributed Systems. </note>
Reference-contexts: A phase occurrence is an instantiation of a specific phase type within the TCG-DAG. 1 Not to be confused with the notion of synchronous message-passing in which sender and receiver must be ready to communicate before message-passing can occur. 2 3 3 LaRCS: a language for describing TCGs LaRCS <ref> [10] </ref> is a graph description language we have developed which describes the TCG in an efficient and intuitive notation. LaRCS' orientation towards the representation of regular parallel computations enables it to efficiently describe families of computation graphs. <p> Finally, the MH algorithm's greedy approach yielded unbalanced loads and possibly high communication overhead, resulting in overall longer completion time. Additional examples of the use of the TCG for mapping and scheduling are described in <ref> [10] </ref>. 5 The use of the TCG in Parallel Programming Environments We believe that the TCG model has the potential to serve as a unifying abstraction throughout the domains encompassed by parallel programming environments including program development, mapping and scheduling, debugging, and performance analysis.
Reference: [11] <author> P. Sadayappan, F. Ercal, and J. Ramanujam. </author> <title> Clustering partitioning approaches to mapping parallel programs onto a hypercube. </title> <journal> Parallel Computing, </journal> <volume> 13 </volume> <pages> 1-16, </pages> <year> 1990. </year>
Reference-contexts: A wealth of research has been conducted over the past 15 years utilizing this basic model including [2], [1], <ref> [11] </ref> to name just a few. Much of this research utilizes algorithms that are closely tied to the use of the static task graph model and which cannot be adapted to the DAG model.
Reference: [12] <author> V. Sakar. </author> <title> Partitioning and scheduling parallel programs for execution on multiprocessors. </title> <type> Technical report, Ph.d. Thesis, </type> <institution> Dept. of Computer Science, Stanford University, </institution> <year> 1987. </year>
Reference-contexts: The DAG has been used for the scheduling problem in which tasks are assigned to a processor and to a time slot. Researchers who have developed DAG-based algorithms include [3], <ref> [12] </ref> and many more. These include the many list scheduling algorithms, critical path algorithms, and techniques such as linear clustering. The DAG model fails to capture the spatial topology of the computation when it is defined as a set of communicating parallel processes.
Reference: [13] <author> H. S. Stone. </author> <title> Multiprocessor scheduling with the aid of network flow algorithms. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-3(1):85-93, </volume> <month> January </month> <year> 1977. </year> <month> 15 </month>
Reference-contexts: These phases are defined and explained more fully below. The TCG can be seen as an unrolling over time of Stone's static task graph <ref> [13] </ref> to form the Lamport process-time graph. Each node of the static task graph which represents one process, p i , is unrolled into a linear chain of nodes representing the compute, send, and receive events occurring during p i 's lifetime.
References-found: 13

