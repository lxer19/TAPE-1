URL: ftp://ftp.ai.mit.edu/pub/users/las/aaai-fss-94.ps.Z
Refering-URL: http://www.ai.mit.edu/people/las/papers/
Root-URL: 
Email: fianklasg@ai:mit:edu  
Title: Life after planning and reaction  
Author: Ian Horswill and Lynn Andrea Stein 
Address: Room 733  Cambridge, MA 02139  
Affiliation: Artificial Intelligence Laboratory,  Massachusetts Institute of Technology  
Abstract: Recent action selection architectures rely on planning, reaction, or both, ignoring the much wider spectrum actually available. This paper recasts the action selection problem in terms of projection, com mitment, and abstraction.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Philip Agre and Ian Horswill. </author> <title> Cultural support for improvisation. </title> <booktitle> In Tenth National Conference on Artificial Intelligence, </booktitle> <address> Cambridge, MA, </address> <year> 1992. </year> <booktitle> American Assoiciation for Artificial Intelligence, </booktitle> <publisher> MIT Press. </publisher> <pages> 10 </pages>
Reference-contexts: Finally, there are examples of system that use reactive systems for both high level and low level operations. The Polly robot (Horswill [ 10 ][ 9 ] ) is a running example of the reactive/reactive architecture for grid following discussed in section 4.2. Agre and Horswill's Toast system <ref> [ 1 ] </ref> handles subgoaling and coordination of multiple goals in a purely reactive system by storing the "planner state" out in the world.
Reference: [2] <author> Philip E. Agre. </author> <title> The dynamic structure of everyday life. </title> <type> Technical Re--port 1085, </type> <institution> Massachusetts Institute of Technology Artificial Intelligence Laboratory, </institution> <month> October </month> <year> 1988. </year>
Reference-contexts: The extreme case of the caching approach is to store the cached projection in the form of reactive "hardware" which has direct access to the sensors and effectors. Agre's Life system <ref> [ 2 ] </ref> used a conventional rule-based system to 9 direct action in a simulated blocks world, but cached the results of the rule firings in a truth maintenance system. The system ran very fast in familiar situations, but could handle "novel" situations by slowing down.
Reference: [3] <author> Philip E. Agre and David Chapman. Pengi: </author> <title> An implementation of a theory of activity. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> pages 268-272, </pages> <year> 1987. </year>
Reference-contexts: The system ran very fast in familiar situations, but could handle "novel" situations by slowing down. Agre and Chapman's Pengi system <ref> [ 3 ] </ref> was effectively Life with the rule-based system removed and the TMS network compiled by a programmer. Nilsson's Teleo-reactive programming system [ 17 ] also incrementally compiles to something similar to combinatorial logic, but provides the programmer with a full lisp-like language for specifying programs.
Reference: [4] <author> Jonathan H. Connell. </author> <title> Extending the navigation metaphor to other domains. </title> <editor> In Marc Slack and Erann Gat, editors, </editor> <booktitle> Working notes of the AAAI Fall Symposium on Applications of Artificial Intelligence to Real-World Autonomous Mobile Robots, </booktitle> <pages> pages 29-35, </pages> <address> Cambridge, Mas-sachusetts, </address> <year> 1992. </year> <journal> American Association for Artificial Intelligence. </journal>
Reference: [5] <editor> Irenaus Eibl-Eibesfeldt. </editor> <booktitle> Human Ethology. </booktitle> <address> Aldine de Gruyer, New York, </address> <year> 1989. </year>
Reference-contexts: Indeed, in biological systems, such commitment with 1 Of course, the clock ticks might be measured in hours... 4 out projection is common and know as a fixed action pattern <ref> [ 5 ] </ref>[ 16 ] . 2 Even within robotics, certain control|especially of industrial assembly, etc.|may have a similar form. 4 Abstraction and pro jection/commitment are orthogonal It is also easy to assume that projection and commitment are required for "high level", "abstract" operations, while reactivity is required for "low level",
Reference: [6] <author> Richard Fikes, Peter Hart, and Nils Nilsson. </author> <title> Learning and executing generalized robot plans. </title> <editor> In Bonnie Lynn Webber and Nils J. Nilsson, editors, </editor> <booktitle> Readings in Artificial Intelligence, </booktitle> <pages> pages 231-249. </pages> <publisher> Morgan Kauf-man, </publisher> <address> Los Altos, CA, </address> <year> 1981. </year>
Reference-contexts: Many systems "cache" on-line deliberation into large-scale chunks that can be used in the future. Thus on-line projection is reused as off-line projection. The earliest example of this was the MACROPs system used on Shakey the robot (see Fikes, Hart and Nilsson <ref> [ 6 ] </ref> ), which used a form of explanation-based generalization to generalize and store plans for future use. Sussman's HACKER also maintained a libraries of plans (programs), potential bugs, patches to gradually improve its performance over time.
Reference: [7] <author> Erann Gat. </author> <title> Integrating planning and reacting in a heterogeneous asynchronous architecture for controlling real-world mobile robots. </title> <booktitle> In Proceedings, AAAI-92, </booktitle> <year> 1992. </year>
Reference-contexts: This fixed action pattern|the beak pushing|continues even if the egg is removed [ 16 ] . 5 * high level control is performed by a conventional planner. There are of course many variations. For examples, see <ref> [ 7 ] </ref>[ 4 ][ 12 ] . 4.1 Mobile robot hallway navigation: (projection, followed by reaction) For example, the mobile robot community (the authors included) have been increasingly wed to hierarchical models of navigation in which low level navigation is performed by reactive path following and collision avoidance, while high
Reference: [8] <editor> Kristian J. Hammond. Chef. In Christopher K. Riesbeck and Roger C. Schank, editors, </editor> <booktitle> Inside Case-Based Reasoning, chapter 6, </booktitle> <pages> pages 165-212. </pages> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1989. </year>
Reference-contexts: Sussman's HACKER also maintained a libraries of plans (programs), potential bugs, patches to gradually improve its performance over time. SOAR (Laird, Newell, and Rosenbloom [ 13 ] ) uses chunking of old reasoning as a general model of learning and performance improvement. Hammond's CHEF system <ref> [ 8 ] </ref> , which uses an extensive database of previous cases to do as little new planning as possible. The extreme case of the caching approach is to store the cached projection in the form of reactive "hardware" which has direct access to the sensors and effectors.
Reference: [9] <author> Ian Horswill. Polly: </author> <title> A vision-based artificial agent. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 824-829. </pages> <publisher> AAAI, MIT Press, </publisher> <year> 1993. </year>
Reference: [10] <author> Ian Horswill. </author> <title> Specialization of perceptual processes. </title> <type> PhD thesis, </type> <institution> Mas-sachusetts Institute of Technology, </institution> <address> Cambridge, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Finally, there are examples of system that use reactive systems for both high level and low level operations. The Polly robot (Horswill <ref> [ 10 ] </ref>[ 9 ] ) is a running example of the reactive/reactive architecture for grid following discussed in section 4.2. Agre and Horswill's Toast system [ 1 ] handles subgoaling and coordination of multiple goals in a purely reactive system by storing the "planner state" out in the world.
Reference: [11] <author> Leslie P. Kaelbling. </author> <title> Goals as parallel program spcifications. </title> <booktitle> In Proceedings, AAAI-88, </booktitle> <pages> pages 60-65, </pages> <address> St. Paul, MN, </address> <year> 1988. </year> <month> 11 </month>
Reference-contexts: The most extreme case of this is Schoppers' universal planner [ 18 ] , which exhaustively searches the space of possible situations so as to generate a situation!action table that can drive a reactive system. Kael-bling's GAPPS system <ref> [ 11 ] </ref> compiles abstract goal specifications directly into sequential circuit descriptions. Stein's MetaToto system [ 19 ] performs additional off-line projection to the Toto system by explicitly simulating its own reactive control system in a metric model of the environment provided by an operator.
Reference: [12] <author> Benjamin J. Kuipers and Yung-Tai Byun. </author> <title> A robust, qualitative ap-proach to a spatial learning mobile robot. </title> <booktitle> In SPIE Advances in Intelligent Robotics Systems, </booktitle> <month> November </month> <year> 1988. </year>
Reference-contexts: For example, the mobile robot community (the authors included) have been increasingly wed to hierarchical models of navigation in which low level navigation is performed by reactive path following and collision avoidance, while high level, goal directed navigation is performed by search of a topological representation of space (see e.g. <ref> [ 12 ] </ref>[ 15 ] ). In short, high level projection, followed by low level reaction. In most familiar environments, this is a pretty good architecture. However, it is not difficult to construct other environments which call for qualitatively different methods.
Reference: [13] <author> John E. Laird, Allen Newell, and Paul S. Rosenbloom. </author> <title> Soar: An architecture for general intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1) </volume> <pages> 1-64, </pages> <year> 1987. </year>
Reference-contexts: Sussman's HACKER also maintained a libraries of plans (programs), potential bugs, patches to gradually improve its performance over time. SOAR (Laird, Newell, and Rosenbloom <ref> [ 13 ] </ref> ) uses chunking of old reasoning as a general model of learning and performance improvement. Hammond's CHEF system [ 8 ] , which uses an extensive database of previous cases to do as little new planning as possible.
Reference: [14] <editor> Pattie Maes. </editor> <title> How to do the right thing. </title> <type> AI Memo 1180, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: There is a long history of interesting intermediate points which perform varying degrees of projection and commitment without simply nailing STRIPS onto a subsumption program. The spreading-activation based systems of Mataric's Toto robot [ 15 ] and Maes's behavior networks <ref> [ 14 ] </ref> are both examples of what amount to classical planners which have been transformed into reactive systems by constantly rerunning the graph search (c.f. section 3).
Reference: [15] <editor> Maja Mataric. </editor> <title> A distributed model for mobile robot environment-learning and navigation. </title> <type> Technical Report 1228, </type> <institution> Massachusetts Institute of Technology, Artificial Intelligence Lab, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: There is a long history of interesting intermediate points which perform varying degrees of projection and commitment without simply nailing STRIPS onto a subsumption program. The spreading-activation based systems of Mataric's Toto robot <ref> [ 15 ] </ref> and Maes's behavior networks [ 14 ] are both examples of what amount to classical planners which have been transformed into reactive systems by constantly rerunning the graph search (c.f. section 3).
Reference: [16] <author> David McFarland. </author> <title> Animal Behavior: Psychobiology, Ethology, and Evolution. </title> <publisher> The Benjamin/Cummings Publishign Company, Inc., </publisher> <address> Menlo Park, California, </address> <year> 1985. </year>
Reference-contexts: This fixed action pattern|the beak pushing|continues even if the egg is removed <ref> [ 16 ] </ref> . 5 * high level control is performed by a conventional planner. There are of course many variations.
Reference: [17] <author> Nils J. Nilsson. </author> <title> Teleo-reactive programs for agent control. </title> <journal> Journal of Artificial Intelligence Research, </journal> <year> 1994. </year>
Reference-contexts: The system ran very fast in familiar situations, but could handle "novel" situations by slowing down. Agre and Chapman's Pengi system [ 3 ] was effectively Life with the rule-based system removed and the TMS network compiled by a programmer. Nilsson's Teleo-reactive programming system <ref> [ 17 ] </ref> also incrementally compiles to something similar to combinatorial logic, but provides the programmer with a full lisp-like language for specifying programs. Finally, there are examples of system that use reactive systems for both high level and low level operations.
Reference: [18] <author> M. J. Schoppers. </author> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In Proceedings 10th IJCAI, </booktitle> <pages> pages 1039-1046, </pages> <year> 1987. </year>
Reference-contexts: In such cases, we can think of the reactive system as utilizing projection that was performed "off-line" by the deliberative system. The most extreme case of this is Schoppers' universal planner <ref> [ 18 ] </ref> , which exhaustively searches the space of possible situations so as to generate a situation!action table that can drive a reactive system. Kael-bling's GAPPS system [ 11 ] compiles abstract goal specifications directly into sequential circuit descriptions.
Reference: [19] <author> Lynn Andrea Stein. </author> <title> Imagination and situated cognition. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <note> to appear. 12 </note>
Reference-contexts: Kael-bling's GAPPS system [ 11 ] compiles abstract goal specifications directly into sequential circuit descriptions. Stein's MetaToto system <ref> [ 19 ] </ref> performs additional off-line projection to the Toto system by explicitly simulating its own reactive control system in a metric model of the environment provided by an operator. Many systems "cache" on-line deliberation into large-scale chunks that can be used in the future.
References-found: 19

