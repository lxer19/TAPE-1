URL: http://www-sal.cs.uiuc.edu/~kamin/pubs/ipl.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~kamin/pubs/index.html
Root-URL: http://www.cs.uiuc.edu
Title: Head-strictness is not a monotonic abstract property  
Author: Samuel Kamin 
Keyword: strictness analysis, abstract interpretation  
Date: October 23, 1992  
Address: Urbana, IL 61801  
Affiliation: Computer Science Dept. University of Illinois at Urbana-Champaign  
Abstract: A property P of a language is said to be definable by abstract interpretation if there is a monotonic map abs from the domain of standard semantics to an abstract domain A of finite height, and a partition of the abstract domain into two parts A P and A non-P , such that any value has property P if and only if abs maps it to an element of A P . Head-strictness is a property of functions over lists which asserts, roughly speaking, that whenever the function looks at some prefix of a list, it looks every element in that prefix. We prove that head-strictness is not definable by abstract interpretation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abramsky, </author> <title> "Abstract interpretation, logical relations, and Kan extensions," </title> <editor> J. </editor> <booktitle> Logic and Computation 1(1), </booktitle> <month> July </month> <year> 1990, </year> <pages> 5-40. </pages>
Reference-contexts: Theorem 2 Head-strictness in a head-strict context is not definable by abstract interpretation. Section 2 contains the proofs of theorems 1 and 2, section 3 explains why our definition of head-strictness is slightly different from that in [11], and section 4 discusses "undefinability by BHA-style analysis" <ref> [1, 4] </ref>. 2 Head-strictness is not definable H is an example of a projection, that is, an idempotent function below the identity in the function space ordering. In [11], strictness properties of functions on lists are formulated using projections; head-strictness and head-strictness in a head-strict context are examples. <p> We were justified in doing this because the inexpressible ff ) wh fi (namely, those that include non-strict functions) are undefinable by abstract interpretation. 4 BHA-style analysis One formulation of strictness analysis that is widely followed is the one presented in <ref> [1, 4] </ref>. There, the Scott-closed subsets of D | the relevant property of these subsets is that they are downward-closed | play a leading role. In particular, BHA-style analyses can only characterize properties that are downward-closed, such as strictness. <p> Our result is stronger than undefinability via BHA-style analysis, since it precludes analysis by any method whatsoever. Finally, we note that recently Hunt [8], building on <ref> [1] </ref>, has presented a non-monotonic abstract interpretation for head-strictness, basing his safety proof on logical relations. 1 I thank Marc Neuberger for this observation. REFERENCES 6 Acknowledgements A number of people suggested improvements to an earlier version of this paper.
Reference: [2] <editor> S. Abramsky, C.L. Hankin (eds.), </editor> <title> Abstract Interpretation of Declarative Languages, </title> <publisher> Ellis Hor-wood, </publisher> <year> 1987, </year>
Reference-contexts: 1 Introduction Given a programming language L with standard semantics [[]] D : L ! D, an abstract interpretation <ref> [2, 6] </ref> of L is a semantics [[]] A : L ! A, together with a function abs : D ! A.
Reference: [3] <author> G. Burn, </author> <title> "A relationship between abstract interpretation and projection analysis (extended abstract)," </title> <booktitle> 17th POPL, </booktitle> <year> 1990, </year> <pages> 151-156. </pages>
Reference-contexts: Given this definition, non-definability of property P can be proven by producing an infinite sequence of elements of D that alternate between P and non-P. Head-strictness <ref> [3, 11] </ref> is a property of functions of lists that has for some time been thought not to be definable by abstract interpretation. What it says, intuitively, is that if the function examines any prefix of its argument, it evaluates all the elements of that prefix. <p> Thus, I ) wh ff is undefinable for any such ff. 1 This includes tail strictness (I ) wh T ) [11] and simple head-strictness (I ) wh H B ) <ref> [3] </ref>, although their strict versions (I ) T and I ) H B ) are definable [3]. In summary: we required strictness in our definition to avoid having to lift D, even though not all ff ) wh fi are expressible using ). <p> Thus, I ) wh ff is undefinable for any such ff. 1 This includes tail strictness (I ) wh T ) [11] and simple head-strictness (I ) wh H B ) <ref> [3] </ref>, although their strict versions (I ) T and I ) H B ) are definable [3]. In summary: we required strictness in our definition to avoid having to lift D, even though not all ff ) wh fi are expressible using ).
Reference: [4] <author> G. Burn, C.L. Hankin, S. Abramsky, </author> <title> "Strictness analysis of higher-order functions," </title> <booktitle> Science of Computer Programming 7, </booktitle> <month> Nov. </month> <year> 1986, </year> <pages> 249-278. </pages>
Reference-contexts: Despite this, the property may be considered to be subject to analysis by abstract interpretation. Strictness of functions (the property that f ? = ?) is an example of such a property <ref> [4, 5, 7] </ref>. Under what circumstances, then, can we assert that a property is not analyzable by abstract interpretation? If there are no constraints on A or abs, we can never say it. However, two constraints are commonly placed on them: 1. A is a domain of finite height. <p> Theorem 2 Head-strictness in a head-strict context is not definable by abstract interpretation. Section 2 contains the proofs of theorems 1 and 2, section 3 explains why our definition of head-strictness is slightly different from that in [11], and section 4 discusses "undefinability by BHA-style analysis" <ref> [1, 4] </ref>. 2 Head-strictness is not definable H is an example of a projection, that is, an idempotent function below the identity in the function space ordering. In [11], strictness properties of functions on lists are formulated using projections; head-strictness and head-strictness in a head-strict context are examples. <p> Many projections used in strictness analysis are smash projections <ref> [4] </ref>, which means they map every element either to ? or to itself. Such projections lead to properties having a simple structure: Fact 1 If ff and fi are smash projections, then ff ) fi is downward closed. <p> We were justified in doing this because the inexpressible ff ) wh fi (namely, those that include non-strict functions) are undefinable by abstract interpretation. 4 BHA-style analysis One formulation of strictness analysis that is widely followed is the one presented in <ref> [1, 4] </ref>. There, the Scott-closed subsets of D | the relevant property of these subsets is that they are downward-closed | play a leading role. In particular, BHA-style analyses can only characterize properties that are downward-closed, such as strictness.
Reference: [5] <author> C. Clack, S.L. Peyton Jones, </author> <title> "Strictness analysis | a practical approach," </title> <booktitle> Conf. on Functional Programming Languages and Computer Architecture, 1985, </booktitle> <volume> LNCS 201, </volume> <pages> 35-49. </pages>
Reference-contexts: Despite this, the property may be considered to be subject to analysis by abstract interpretation. Strictness of functions (the property that f ? = ?) is an example of such a property <ref> [4, 5, 7] </ref>. Under what circumstances, then, can we assert that a property is not analyzable by abstract interpretation? If there are no constraints on A or abs, we can never say it. However, two constraints are commonly placed on them: 1. A is a domain of finite height.
Reference: [6] <author> P. Cousot, R. Cousot, </author> <title> "Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixed points," </title> <booktitle> 4th POPL, </booktitle> <year> 1977, </year> <pages> 238-252. </pages>
Reference-contexts: 1 Introduction Given a programming language L with standard semantics [[]] D : L ! D, an abstract interpretation <ref> [2, 6] </ref> of L is a semantics [[]] A : L ! A, together with a function abs : D ! A.
Reference: [7] <author> P. Hudak, J. Young, </author> <title> "Higher-order strictness analysis in untyped lambda calculus," </title> <booktitle> 13th POPL, </booktitle> <year> 1986, </year> <pages> 97-109. </pages>
Reference-contexts: Despite this, the property may be considered to be subject to analysis by abstract interpretation. Strictness of functions (the property that f ? = ?) is an example of such a property <ref> [4, 5, 7] </ref>. Under what circumstances, then, can we assert that a property is not analyzable by abstract interpretation? If there are no constraints on A or abs, we can never say it. However, two constraints are commonly placed on them: 1. A is a domain of finite height.
Reference: [8] <author> S. Hunt, </author> <title> "PERs generalize projections for strictness analysis," </title> <booktitle> Glasgow Workshop on Functional Programming, Ullapool, in Workshops in Computing, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Our result is stronger than undefinability via BHA-style analysis, since it precludes analysis by any method whatsoever. Finally, we note that recently Hunt <ref> [8] </ref>, building on [1], has presented a non-monotonic abstract interpretation for head-strictness, basing his safety proof on logical relations. 1 I thank Marc Neuberger for this observation. REFERENCES 6 Acknowledgements A number of people suggested improvements to an earlier version of this paper.
Reference: [9] <editor> S. L. Peyton Jones, </editor> <booktitle> The Implementation of Functional Programming Languages, Prentice-Hall International, </booktitle> <address> New York, </address> <year> 1987. </year>
Reference: [10] <author> P. Wadler, </author> <title> "Strictness analysis on non-flat domains," </title> <booktitle> Chapter 12 in [2], </booktitle> <pages> 266-275. </pages>
Reference: [11] <author> P. Wadler, R.J.M. Hughes, </author> <title> "Projections for strictness analysis," </title> <booktitle> Conf. on Functional Programming Languages and Computer Arch., 1987, </booktitle> <volume> LNCS 274, </volume> <pages> 385-407. </pages>
Reference-contexts: Given this definition, non-definability of property P can be proven by producing an infinite sequence of elements of D that alternate between P and non-P. Head-strictness <ref> [3, 11] </ref> is a property of functions of lists that has for some time been thought not to be definable by abstract interpretation. What it says, intuitively, is that if the function examines any prefix of its argument, it evaluates all the elements of that prefix. <p> Theorem 2 Head-strictness in a head-strict context is not definable by abstract interpretation. Section 2 contains the proofs of theorems 1 and 2, section 3 explains why our definition of head-strictness is slightly different from that in <ref> [11] </ref>, and section 4 discusses "undefinability by BHA-style analysis" [1, 4]. 2 Head-strictness is not definable H is an example of a projection, that is, an idempotent function below the identity in the function space ordering. In [11], strictness properties of functions on lists are formulated using projections; head-strictness and head-strictness <p> 3 explains why our definition of head-strictness is slightly different from that in <ref> [11] </ref>, and section 4 discusses "undefinability by BHA-style analysis" [1, 4]. 2 Head-strictness is not definable H is an example of a projection, that is, an idempotent function below the identity in the function space ordering. In [11], strictness properties of functions on lists are formulated using projections; head-strictness and head-strictness in a head-strict context are examples. Definition 4 [11] Given projections ff and fi and function f , we say f has property ff ) fi, or write f : ff ) fi, if f is strict <p> In <ref> [11] </ref>, strictness properties of functions on lists are formulated using projections; head-strictness and head-strictness in a head-strict context are examples. Definition 4 [11] Given projections ff and fi and function f , we say f has property ff ) fi, or write f : ff ) fi, if f is strict and ff ffi f = ff ffi f ffi fi. (By abuse of notation, we also write ff ) fi to denote <p> It follows that for all i, f 2i is head-strict in a head-strict context and f 2i+1 is not. 3 ABOUT OUR DEFINITION OF ff ) fi 5 3 About our definition of ff ) fi In <ref> [11] </ref>, the definition of ff ) fi does not require strictness: Definition 5 f : ff ) wh fi if ff ffi f = ff ffi f ffi fi. <p> By lifting D and defining new projections, the strictness requirement can be expressed. (For example, I ) H is equivalent to STR ) wh H 0 in <ref> [11] </ref>.) We added the strictness requirement just to avoid the lifting operation, but this leaves open the question of definability of I ) wh H, i.e. head-strictness without strictness. In fact, it is undefinable, but so are many other properties that are definable when strictness is required. <p> It is also easy to show that the sequence &lt; f i &gt; i0 is increasing and that all f i are computable. Thus, I ) wh ff is undefinable for any such ff. 1 This includes tail strictness (I ) wh T ) <ref> [11] </ref> and simple head-strictness (I ) wh H B ) [3], although their strict versions (I ) T and I ) H B ) are definable [3].
References-found: 11

