URL: http://www.cs.wustl.edu/~pmh/sive95.ps.gz
Refering-URL: http://www.cs.wustl.edu/~pmh/research.html
Root-URL: http://www.cs.wustl.edu
Title: From the Workshop on Simulation and Interaction in Virtual Environments, July 1995 Real-Time Collision Detection
Author: Philip M. Hubbard 
Affiliation: Program of Computer Graphics Cornell University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. Baraff. </author> <title> Fast contact force computation for nonpenetrating rigid bodies. </title> <booktitle> In Proceedings of SIGGRAPH '94, published as Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 23-34, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Are there situations in which this policy is appropriate? Alternatively, could groups of nearby objects be treated as a single object at low levels of refinement? Time-critical collision response is a natural companion to this work. Recent work by Baraff <ref> [1] </ref> on fast computation of contact forces increases the accuracy that is available at real-time rates in virtual environments, but guaranteeing interactive performance will still require trading accuracy for speed in some situations. The right approach to take here is an interesting problem.
Reference: [2] <author> L. Bergman, H. Fuchs, E. Grant, and S. Spach. </author> <title> Image rendering by adaptive refinement. </title> <booktitle> In Proceedings of SIG-GRAPH '86, published as Computer Graphics, </booktitle> <volume> 20(4) </volume> <pages> 29-37, </pages> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: This general idea draws inspiration from pioneering work on adaptive rendering by Bergman et al. <ref> [2] </ref>. Time-critical computing has become the common term for this idea, and examples of it appear in the rendering algorithms for static walk-throughs by Funkhouser and Sequin [5] and Ma-ciel and Shirley [14], the IRIS Performer applica fl 580 Frank H. T.
Reference: [3] <author> F. P. Brooks, Jr. </author> <title> Grasping reality through illusion| interactive graphics serving science. </title> <booktitle> In Proceedings of CHI '88, </booktitle> <pages> pages 1-11, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Success depends on many factors, but the most important is real-time, interactive performance. People expect the world to respond directly to their actions, so a synthetic world must exhibit low latency ("lag") and high, nearly-constant frame rates <ref> [3] </ref>. The "content" of a virtual environment is also important. Objects must exhibit believable appearances and behaviors, mimicing the real world except when there is a specific reason to deviate. "Solidness" is a central characteristic of real objects, so collision detection and response are important for making objects behave realistically.
Reference: [4] <author> T. Duff. </author> <title> Interval arithmetic and recursive subdivision for implicit functions and constructive solid geometry. </title> <booktitle> In Proceedings of SIGGRAPH '92, published as Computer Graphics, </booktitle> <volume> 26(2) </volume> <pages> 131-138, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: A human figure walking at 5 miles per hour, for example, travels 8.8 inches per frame, given 10 frames per second; collision detection is thus inaccurate to within a buffer of 8.8 inches around the figure, which is significant on the scale of the figure. Techniques like interval analysis <ref> [4, 21] </ref> that subdivide the time between frames can reduce this inaccuracy, but the extra work usually prohibits real-time performance. Given temporal inaccuracy, the time an algorithm spends seeking full spatial accuracy may be wasted.
Reference: [5] <author> T. A. Funkhouser and C. H. Sequin. </author> <title> Adaptive display algorithm for interactive frame rates during visualization of complex virtual environments. </title> <booktitle> In Proceedings of SIG-GRAPH '93, published as Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 247-254, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: This general idea draws inspiration from pioneering work on adaptive rendering by Bergman et al. [2]. Time-critical computing has become the common term for this idea, and examples of it appear in the rendering algorithms for static walk-throughs by Funkhouser and Sequin <ref> [5] </ref> and Ma-ciel and Shirley [14], the IRIS Performer applica fl 580 Frank H. T.
Reference: [6] <author> A. Garcia-Alonso, N. Serrano, and J. Flaquer. </author> <title> Solving the collision detection problem. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 14(3) </volume> <pages> 36-43, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Recent "traditional" (non-time-critical) detection algorithms by Garcia-Alonso et al. <ref> [6] </ref>, Ponamgi et al. [17] and Smith et al. [20] do provide real-time performance for some challenging test cases. Nevertheless, there are several arguments that a time-critical detection algorithm is the most promising way to meet the current and future needs of virtual environments. <p> To put the accuracy of a time-critical algorithm in perspective, note that few traditional algorithms actually provide full accuracy. Most traditional algorithms|including the three fastest from the literature <ref> [6, 17, 20] </ref>, mentioned above|allow temporal inaccuracy by detecting collisions only once per frame. This temporal inaccuracy creates spatial inaccuracy equal to the distance an object travels between frames.
Reference: [7] <author> J. A. Goldak, X. Yu, A. Knight, and L. Dong. </author> <title> Constructing discrete medial axis of 3-D objects. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(3) </volume> <pages> 327-339, </pages> <year> 1991. </year>
Reference-contexts: The first step is building the medial-axis surface itself. This problem is still an active topic for research, but I have obtained satisfactory results from an extension to the algorithm of Goldak et al. <ref> [7] </ref>. This algorithm distributes points over the surface of the object and builds a Voronoi diagram for the points. The corners of the Voronoi cells define the centers of spheres which closely fit the object.
Reference: [8] <author> J. Goldsmith and J. Salmon. </author> <title> Automatic creation of object hierarchies for ray tracing. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 7(5) </volume> <pages> 14-20, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Regular, octree-like subdivision|as described by Liu et al. [13], Rolhf and Helman [19] and my previous work [11]|is straightforward to implement but does not create tight approximations in many cases. Goldsmith and Salmon <ref> [8] </ref> describe a more sophisticated approach that builds hierarchies for ray tracing, but it optimizes for the different requirements of ray intersections with scenes of multiple, disjoint objects. Another approach is "brute force" optimization by simulated annealing [18]. This approach starts with a regular subdivision and applies many random perturbations.
Reference: [9] <author> J. P. Granieri, J. Crabtree, and N. I. Badler. </author> <title> Production and playback of human figure motion for 3D virtual environments. </title> <booktitle> In Proceedings of the IEEE Virtual Reality Annual International Symposium, </booktitle> <pages> pages 127-135, </pages> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: T. Rhodes Hall, Cornell University, Ithaca, NY 14853-3801; pmh@graphics.cornell.edu. tion framework of Rolhf and Helman [19], and the human-figure animation of Granieri et al. <ref> [9] </ref>. 2 Why Time-Critical Collision Detection? The idea of trading accuracy for speed in collision detection may seem controversial. Recent "traditional" (non-time-critical) detection algorithms by Garcia-Alonso et al. [6], Ponamgi et al. [17] and Smith et al. [20] do provide real-time performance for some challenging test cases.
Reference: [10] <author> L. J. Hettinger and G. E. Riccio. </author> <title> Visually induced motion sickness in virtual environments. </title> <journal> Presence, </journal> <volume> 1(3) </volume> <pages> 306-310, </pages> <month> Summer </month> <year> 1992. </year>
Reference-contexts: Even noticeable changes in post-collision motion will often be preferable to the alternative of more accurate motion at non-real-time rates, due to the problems linked to the latter: Hettinger and Ric-cio <ref> [10] </ref> report that high latency seems to correlate with "simulator sickness," and Pausch et al. [16] cite studies indicating that latency decreases operator performance in vehicle simulators.
Reference: [11] <author> P. M. Hubbard. </author> <title> Interactive collision detection. </title> <booktitle> In Proceedings of the 1993 IEEE Symposium on Research Frontiers in Virtual Reality, </booktitle> <pages> pages 24-31, </pages> <month> Oct. </month> <year> 1993. </year>
Reference: [12] <author> P. M. Hubbard. </author> <title> Collision Detection for Interactive Graphics Applications. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Brown University, </institution> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Note that for situations in which accuracy is more important than speed, a time-critical detection algorithm can accommodate this need; tests described elsewhere <ref> [12] </ref> confirm that accuracy does, in fact, increase with processing time. To put the accuracy of a time-critical algorithm in perspective, note that few traditional algorithms actually provide full accuracy. <p> Another approach is "brute force" optimization by simulated annealing [18]. This approach starts with a regular subdivision and applies many random perturbations. In theory, a large number of perturbations will increase the tightness of a hierarchy; in my empirical tests <ref> [12] </ref>, however, run times were prohibitively long and the results were unreliable. A more successful approach for polyhedral objects uses the medial-axis surface or skeleton of the object. The key is that the symmetries of an object around its skeleton suggest ways to place spheres for a tight approximation. <p> Finally, another postprocess measures an upper bound on the distance from each sphere to the object, allowing the detection algorithm to efficiently report its accuracy at run-time. Complete details appear elsewhere <ref> [12] </ref>. This approach is related to the work of Badler and O'Rourke [15]. <p> My current implementation does not use progressive refinement when finding the pairs of colliding roots (it uses a technique called space-time bounds, described elsewhere <ref> [12] </ref>). Supporting progressive refinement here is challenging, because doing so might require ignoring all collisions involving some objects.
Reference: [13] <author> Y. Liu, J. Noborio, and S. Arimoto. </author> <title> Hierarchical sphere model (HSM) and its application for checking an interference between moving robots. </title> <booktitle> In Proceedings of the IEEE International Workshop on Intelligent Robots and Systems, </booktitle> <pages> pages 801-806, </pages> <year> 1988. </year>
Reference-contexts: Each level of the hierarchy must not only prune the parts of the next level that could be visited, but each level must also form as tight an approximation to the object as possible in case detection stops at that level. Regular, octree-like subdivision|as described by Liu et al. <ref> [13] </ref>, Rolhf and Helman [19] and my previous work [11]|is straightforward to implement but does not create tight approximations in many cases.
Reference: [14] <author> P. W. C. Maciel and P. Shirley. </author> <title> Visual navigation of large environments using textured clusters. </title> <booktitle> In Proceedings of the 1995 Symposium on Interactive 3D Graphics (Monterey, California), </booktitle> <pages> pages 95-102, </pages> <year> 1995. </year>
Reference-contexts: This general idea draws inspiration from pioneering work on adaptive rendering by Bergman et al. [2]. Time-critical computing has become the common term for this idea, and examples of it appear in the rendering algorithms for static walk-throughs by Funkhouser and Sequin [5] and Ma-ciel and Shirley <ref> [14] </ref>, the IRIS Performer applica fl 580 Frank H. T.
Reference: [15] <author> J. O'Rourke and N. Badler. </author> <title> Decomposition of three-dimensional objects into spheres. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> PAMI-1(3):295-305, </volume> <month> July </month> <year> 1979. </year>
Reference-contexts: Finally, another postprocess measures an upper bound on the distance from each sphere to the object, allowing the detection algorithm to efficiently report its accuracy at run-time. Complete details appear elsewhere [12]. This approach is related to the work of Badler and O'Rourke <ref> [15] </ref>. Their work does not address the issues of optimizing tightness, producing multiple levels of detail or balancing speed and accuracy, but they do provide early evidence that spheres are a valuable tool for approximating shapes. 3.2 Results Building sphere hierarchies from medial-axis surfaces works well in my empirical tests.
Reference: [16] <author> R. Pausch, T. Crea, and M. Conway. </author> <title> A literature survey for virtual environments: Military flight simulator visual systems and simulator sickness. </title> <journal> Presence, </journal> <volume> 1(3) </volume> <pages> 344-363, </pages> <month> Summer </month> <year> 1992. </year>
Reference-contexts: Even noticeable changes in post-collision motion will often be preferable to the alternative of more accurate motion at non-real-time rates, due to the problems linked to the latter: Hettinger and Ric-cio [10] report that high latency seems to correlate with "simulator sickness," and Pausch et al. <ref> [16] </ref> cite studies indicating that latency decreases operator performance in vehicle simulators. Note that for situations in which accuracy is more important than speed, a time-critical detection algorithm can accommodate this need; tests described elsewhere [12] confirm that accuracy does, in fact, increase with processing time.
Reference: [17] <author> M. K. Ponamgi, D. Manocha, and M. C. Lin. </author> <title> Incremental algorithms for collision detection between solid models. </title> <booktitle> In Proceedings of the Third ACM Symposium on Solid Modeling and Applications, </booktitle> <pages> pages 293-304, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Recent "traditional" (non-time-critical) detection algorithms by Garcia-Alonso et al. [6], Ponamgi et al. <ref> [17] </ref> and Smith et al. [20] do provide real-time performance for some challenging test cases. Nevertheless, there are several arguments that a time-critical detection algorithm is the most promising way to meet the current and future needs of virtual environments. <p> To put the accuracy of a time-critical algorithm in perspective, note that few traditional algorithms actually provide full accuracy. Most traditional algorithms|including the three fastest from the literature <ref> [6, 17, 20] </ref>, mentioned above|allow temporal inaccuracy by detecting collisions only once per frame. This temporal inaccuracy creates spatial inaccuracy equal to the distance an object travels between frames.
Reference: [18] <author> W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B. P. Flannery. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, 2nd edition, </address> <year> 1992. </year>
Reference-contexts: Goldsmith and Salmon [8] describe a more sophisticated approach that builds hierarchies for ray tracing, but it optimizes for the different requirements of ray intersections with scenes of multiple, disjoint objects. Another approach is "brute force" optimization by simulated annealing <ref> [18] </ref>. This approach starts with a regular subdivision and applies many random perturbations. In theory, a large number of perturbations will increase the tightness of a hierarchy; in my empirical tests [12], however, run times were prohibitively long and the results were unreliable.
Reference: [19] <author> J. Rohlf and J. Helman. IRIS performer: </author> <title> A high performance multiprocessing toolkit for real-time 3d graphics. </title> <booktitle> In Proceedings of SIGGRAPH '94, published as Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 381-394, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: T. Rhodes Hall, Cornell University, Ithaca, NY 14853-3801; pmh@graphics.cornell.edu. tion framework of Rolhf and Helman <ref> [19] </ref>, and the human-figure animation of Granieri et al. [9]. 2 Why Time-Critical Collision Detection? The idea of trading accuracy for speed in collision detection may seem controversial. <p> Regular, octree-like subdivision|as described by Liu et al. [13], Rolhf and Helman <ref> [19] </ref> and my previous work [11]|is straightforward to implement but does not create tight approximations in many cases. Goldsmith and Salmon [8] describe a more sophisticated approach that builds hierarchies for ray tracing, but it optimizes for the different requirements of ray intersections with scenes of multiple, disjoint objects.
Reference: [20] <author> A. Smith, Y. Kitamura, H. Takemura, and F. Kishino. </author> <title> A simple and efficient method for accurate collision detection among deformable objects in arbitrary motion. </title> <booktitle> In Proceedings of the IEEE Virtual Reality Annual International Symposium, </booktitle> <pages> pages 136-145, </pages> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: Recent "traditional" (non-time-critical) detection algorithms by Garcia-Alonso et al. [6], Ponamgi et al. [17] and Smith et al. <ref> [20] </ref> do provide real-time performance for some challenging test cases. Nevertheless, there are several arguments that a time-critical detection algorithm is the most promising way to meet the current and future needs of virtual environments. <p> To put the accuracy of a time-critical algorithm in perspective, note that few traditional algorithms actually provide full accuracy. Most traditional algorithms|including the three fastest from the literature <ref> [6, 17, 20] </ref>, mentioned above|allow temporal inaccuracy by detecting collisions only once per frame. This temporal inaccuracy creates spatial inaccuracy equal to the distance an object travels between frames.
Reference: [21] <author> J. M. Snyder, A. R. Woodbury, K. Fleischer, B. Currin, and A. H. Barr. </author> <title> Interval methods for multi-point collisions between time-dependent curved surfaces. </title> <booktitle> In Proceedings of SIGGRAPH '93, published as Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 321-334, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: A human figure walking at 5 miles per hour, for example, travels 8.8 inches per frame, given 10 frames per second; collision detection is thus inaccurate to within a buffer of 8.8 inches around the figure, which is significant on the scale of the figure. Techniques like interval analysis <ref> [4, 21] </ref> that subdivide the time between frames can reduce this inaccuracy, but the extra work usually prohibits real-time performance. Given temporal inaccuracy, the time an algorithm spends seeking full spatial accuracy may be wasted.
Reference: [22] <author> W. C. Thibault and B. F. Naylor. </author> <title> Set operations on polyhedra using binary space partitioning trees. </title> <booktitle> In Proceedings of SIGGRAPH '87, published as Computer Graphics, </booktitle> <volume> 21(4) </volume> <pages> 153-162, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: For comparison, I repeated the same test calling a traditional detection algorithm. The algorithm used binary space partitioning (BSP) trees <ref> [22] </ref> on pairs of objects whose bounding spheres collided. The BSP trees were built in a preprocessing phase, using an optimizing heuristic that minimizes the number of faces that straddle each partitioning plane.
References-found: 22

