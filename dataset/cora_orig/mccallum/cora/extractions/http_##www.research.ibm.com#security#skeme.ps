URL: http://www.research.ibm.com/security/skeme.ps
Refering-URL: http://www.cs.arizona.edu/xkernel/www/ipsec/ipsec.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email:hugo@watson.ibm.  
Title: SKEME: A Versatile Secure Key Exchange Mechanism for Internet  
Author: Hugo Krawczyk 
Address: PO Box 704, Yorktown Heights, New York 10598.  
Affiliation: IBM T.J. Watson Research Center,  
Date: November 30, 1995  
Note: Copyright c 1996 IEEE. See full copyright notice below.  com. Paper available via http://www.research.ibm.com/security/skeme.ps  
Abstract: A secure and versatile key exchange protocol for key management over Internet is presented. SKEME constitutes a compact protocol that supports a variety of realistic scenarios and security models over Internet. It provides clear tradeoffs between security and performance as required by the different scenarios without incurring in unnecessary system complexity. The protocol supports key exchange based on public key, key distribution centers, or manual installation, and provides for fast and secure key refreshment. In addition, SKEME selectively provides perfect forward secrecy, allows for replaceability and negotiation of the underlying cryptographic fl Copyright c fl 1996 Institute of Electrical and Electronics Engineers. Reprinted from The Proceedings of the 1996 Symposium on Network and Distributed Systems Security. This material is posted here with permission of the IEEE. Internal or personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution must be obtained from the IEEE by sending a blank email message to info.pub.permission@ieee.org. By choosing to view this document, you agree to all provisions of the copyright laws protecting it. primitives, and addresses privacy issues as anonymity and repudiatability.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Atkinson, </author> <title> "Security Architecture for the Internet Protocol", </title> <address> RFC1825, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: This protocol is intended to provide key management for the IP-layer security protocols developed by the same working group (see <ref> [1] </ref>), but also to provide a key management solution for other security applications over Internet.
Reference: [2] <author> R. Atkinson, "IP Authentication Header", RFC1826, </author> <month> August </month> <year> 1995. </year>
Reference-contexts: Our answer is no. PFS relates to secrecy of information. In some applications, however, authenticity rather than secrecy is the goal. As an example, the Authentication Header standard developed by the IETF <ref> [2] </ref> is intended to provide for authentication of IP packets and headers but not for confidentiality. A server that provides with non-confidential but authenticated information can use this authentication mechanism, but can dispense of secrecy, let alone PFS.
Reference: [3] <author> A. Aziz, </author> <title> "Simple Key-Management for Internet Protocols (SKIP)," Internet Draft draft-ietf-ipsec-aziz-skip-02.txt, </title> <month> September </month> <year> 1995, </year> <title> work in progress. </title>
Reference-contexts: It provides PFS as part of the basic SKEME protocol based on public key, and for cases where the parties perform key exchange based on long-term shared keys (like a manually installed master key, a SKIP key derived from long-lived public keys <ref> [3] </ref>, and more). Furthermore, SKEME can provide PFS for the case of parties that share a common key via a key distribution center (KDC). In this case, SKEME would derive a session key for the parties via a Diffie-Hellman exchange, while the KDC-provided key would be used for authentication only. <p> Notice that this phase is independent of SHARE. 5 An alternative to this public key-based SHARE phase is to use long term Diffie-Hellman public keys as described in <ref> [10, 3] </ref>. In this case, the public key of a party is of the form g s mod p, and s is the secret key. <p> The main drawback of such a key K 0 is that it remains unchanged as long as the parties do not change their public keys. For details on the use of Diffie-Hellman public keys to establish a shared-key see <ref> [3] </ref>. 12 EXCH: A ! B: g x mod p The above exponents g x , g y can be computed off-line by each party prior to the execution of the protocol. <p> Finally, we stress that SKEME can be readily used in conjunction with the SKIP protocol <ref> [3] </ref> (which has also been proposed in the context of the IPSEC working group). The latter uses long-term Diffie-Hellman public keys to derive long-term shared keys between parties.
Reference: [4] <author> M. Bellare and P. Rogaway, </author> <title> "Entity Authentication and Key Distribution," </title> <booktitle> Advances in Cryptology, - CRYPTO'93, Lecture Notes in Computer Science Vol. </booktitle> <volume> 773, </volume> <editor> D. Stinson ed, </editor> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 232-249. </pages> <note> (Full version available from the authors or from http:// www-cse.ucsd.edu/users/mihir.) </note>
Reference-contexts: In general, SKEME builds as much as possible, even for its public key based modes, on the existing solid design and analysis work developed for key exchange over the shared-key model (cf. <ref> [19, 8, 4] </ref>). Security analysis: A detailed and formal security analysis of SKEME is beyond the scope of this paper which is intended to describe the protocol design and its rationale. <p> However, for completeness, we include an informal outline of a proof of security for all four modes of the protocol. We base this outline on previous formal work developed for proving the security of key exchange mechanisms in the shared-key model <ref> [4] </ref>. See Section 5. (We believe that the fact that the security of SKEME can be related to that of protocols in the shred-key model is another advantage of SKEME. <p> These nonces are typically implemented as pseudorandom bit strings of length 64-128. The resultant phases EXCH and AUTH follow the known techniques from the shared-key model originated with [19], and further developed and analyzed in subsequent works (especially, <ref> [8, 4] </ref>). EXCH: A ! B: nonce A B ! A: nonce B The AUTH phase is modified accordingly to replace g x and g y , with nonce A and nonce B , respectively, as the F K 0 arguments. <p> In this mode the SHARE phase is omitted, and the EXCH and AUTH phases are run as in Section 3.3.1, namely, by exchanging nonces rather than Diffie-Hellman exponents. (The resultant fast re-key protocol follows the authentication and key exchange techniques of <ref> [8, 4] </ref> based on symmetric key cryptography only.) Computation of the session key: Computation of SK is identical to that of Section 3.3.1, namely, SK = F K 0 (arg), where arg = F K 0 (nonce B ; nonce A ; id A ; id B ) is the value <p> In this way we 20 achieve true algorithm independence.) We need to argue for the security of the four modes of SKEME. The fast re-key mode (section 3.3.3) follows the well-understood and analyzed protocols in <ref> [8, 4] </ref>. In particular, the paper by Bellare and Rogaway [4] (see AKEP2 protocol in that paper), contains a rigorous proof of security directly applicable to this mode of SKEME. <p> In this way we 20 achieve true algorithm independence.) We need to argue for the security of the four modes of SKEME. The fast re-key mode (section 3.3.3) follows the well-understood and analyzed protocols in [8, 4]. In particular, the paper by Bellare and Rogaway <ref> [4] </ref> (see AKEP2 protocol in that paper), contains a rigorous proof of security directly applicable to this mode of SKEME. It follows that this mode is secure (for secrecy and authenticity) as long as the underlying cryptographic primitives are secure in the sense defined in section 3.1. <p> It follows that this mode is secure (for secrecy and authenticity) as long as the underlying cryptographic primitives are secure in the sense defined in section 3.1. We argue that the analysis in <ref> [4] </ref> can be adapted to prove the mode of SKEME (section 3.3.2) in which the parties share a key K 0 prior to the protocol and use this key to authenticate the Diffie-Hellman exchange. This protocol can be "mapped" to the protocols analyzed in [4] by considering the Diffie-Hellman exponents (g <p> We argue that the analysis in <ref> [4] </ref> can be adapted to prove the mode of SKEME (section 3.3.2) in which the parties share a key K 0 prior to the protocol and use this key to authenticate the Diffie-Hellman exchange. This protocol can be "mapped" to the protocols analyzed in [4] by considering the Diffie-Hellman exponents (g x and g y ) as the nonces in the protocol. <p> If instead of generating the session key SK by H (g xy ) we would do it by applying the pseudorandom function F K 0 to g xy , then the extension of the analysis of <ref> [4] </ref> is straightforward. (A suggestion along these lines was first made in [5].) There is no problem to modify our description of the protocol to use F K 0 as above.
Reference: [5] <author> M. Bellare, and P. Rogaway, </author> <title> "Distributing keys with perfect forward secrecy", </title> <type> manuscript, </type> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: If instead of generating the session key SK by H (g xy ) we would do it by applying the pseudorandom function F K 0 to g xy , then the extension of the analysis of [4] is straightforward. (A suggestion along these lines was first made in <ref> [5] </ref>.) There is no problem to modify our description of the protocol to use F K 0 as above.
Reference: [6] <author> M. Bellare, and P. Rogaway, </author> <title> "Optimal Asymmetric Encryption How to encrypt with RSA", </title> <booktitle> Advances in Cryptology - EUROCRYPT'94 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 950, </volume> <editor> A. De Santis ed, </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In particular, it is assumed that encryption is randomized in the sense that the same message encrypted twice would lead to different encryptions. When using RSA this may be achieved by padding information with random salt before encryption, or more securely, by using the encoding scheme proposed in <ref> [6] </ref>. We use PKE A (info) to denote the (public key) encryption of info under the public key of party A. SKEME uses the Diffie-Hellman key exchange algorithm 4 [10].
Reference: [7] <author> M. Bellovin, and M. Merritt, </author> <title> "Encrypted key exchange: Password-based protocols secure against dictionary attacks", </title> <booktitle> Proc. IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <address> Oakland, </address> <month> May </month> <year> 1992, </year> <pages> pp. 72-84. 23 </pages>
Reference-contexts: can be derived from F SK (des-cbc-id) where des-cbc-id stands for a unique 8 As a preventive measure against partners to communication that use too short exponents (a fact that is hard to detect) SKEME could use a key derived from the SHARE phase to encrypt the Diffie-Hellman exchange (cf. <ref> [7] </ref>). 9 We stress that in contrast to some other protocols (e.g., [11, 17]) there is no security or functional reason in SKEME to prove possession of the session key by the parties during the protocol.
Reference: [8] <author> R. Bird, I. Gopal, A. Herzberg, P. Janson, S. Kutten, R. Molva, and M. Yung. </author> <title> "Systematic design of a family of attack-resistant authentication protocols," </title> <journal> IEEE Journal on Selected Areas in Communications (special issue on Secure Communications), </journal> <volume> 11(5) </volume> <pages> 679-693, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: In general, SKEME builds as much as possible, even for its public key based modes, on the existing solid design and analysis work developed for key exchange over the shared-key model (cf. <ref> [19, 8, 4] </ref>). Security analysis: A detailed and formal security analysis of SKEME is beyond the scope of this paper which is intended to describe the protocol design and its rationale. <p> These nonces are typically implemented as pseudorandom bit strings of length 64-128. The resultant phases EXCH and AUTH follow the known techniques from the shared-key model originated with [19], and further developed and analyzed in subsequent works (especially, <ref> [8, 4] </ref>). EXCH: A ! B: nonce A B ! A: nonce B The AUTH phase is modified accordingly to replace g x and g y , with nonce A and nonce B , respectively, as the F K 0 arguments. <p> In this mode the SHARE phase is omitted, and the EXCH and AUTH phases are run as in Section 3.3.1, namely, by exchanging nonces rather than Diffie-Hellman exponents. (The resultant fast re-key protocol follows the authentication and key exchange techniques of <ref> [8, 4] </ref> based on symmetric key cryptography only.) Computation of the session key: Computation of SK is identical to that of Section 3.3.1, namely, SK = F K 0 (arg), where arg = F K 0 (nonce B ; nonce A ; id A ; id B ) is the value <p> In this way we 20 achieve true algorithm independence.) We need to argue for the security of the four modes of SKEME. The fast re-key mode (section 3.3.3) follows the well-understood and analyzed protocols in <ref> [8, 4] </ref>. In particular, the paper by Bellare and Rogaway [4] (see AKEP2 protocol in that paper), contains a rigorous proof of security directly applicable to this mode of SKEME.
Reference: [9] <author> P. Cheng, J. Garay, A. Herzberg, and H. Krawczyk, </author> <title> "Design and implementation of modular key management protocol and IP Secure Tunnel on AIX", </title> <booktitle> In Proc. 5th USENIX UNIX Security Syposium, </booktitle> <address> Salt Lake City, </address> <note> Also available from ftp site software.watson.ibm.com: /pub/ security/mkmp-ipst-usenix.ps. </note>
Reference-contexts: Our work was mainly motivated by the activities carried through the IPSEC working group in the IETF, but we also note the suitability of our approach to the framework defined by IEEE 802.10 [15]. SKEME evolved as an extension of MKMP (modular key management protocol) <ref> [9] </ref> where a modular approach to key management is suggested and a specific module for key refreshment based on a shared key between the parties is presented. <p> Acknowledgment I thank Pau-Chen Cheng, Juan Garay, and Amir Herzberg, for many fruitful discussions on IP security and key management. The work presented in this paper is a follow-up to our joint work on the MKMP protocol <ref> [9] </ref>. I am particularly indebted to Pau-Chen for his ongoing implementation of SKEME. I also thank Shai Halevi, Paul van Oorschot, and David Wagner, for their excellent comments on earlier versions of this paper (though, of course, I carry full responsibility for all the paper's faults).
Reference: [10] <author> W. Diffie, and M. Hellman, </author> <title> "New Directions in Cryptography", </title> <journal> IEEE Trans. Info. Theory IT-22, </journal> <volume> No. 6, </volume> <pages> pp. 644-654. </pages>
Reference-contexts: Photuris is designed to exchange a key between two parties using public key and the Diffie-Hellman key exchange <ref> [10] </ref>; it also addresses issues like anonymity and denial-of-service attacks. <p> We use PKE A (info) to denote the (public key) encryption of info under the public key of party A. SKEME uses the Diffie-Hellman key exchange algorithm 4 <ref> [10] </ref>. For simplicity of notation, we will denote the Diffie-Hellman exponents by g x mod p and g y mod p which corresponds to the standard Diffie-Hellman modulo a prime number p and generator g. However, there is no assumption in the protocol related to this special form. <p> Notice that this phase is independent of SHARE. 5 An alternative to this public key-based SHARE phase is to use long term Diffie-Hellman public keys as described in <ref> [10, 3] </ref>. In this case, the public key of a party is of the form g s mod p, and s is the secret key.
Reference: [11] <author> W. Diffie, P. C. van Oorshot, and M. J. Wiener, </author> <title> "Authentication and Authenticated Key Exchanges", Designs, Codes and Cryptography, </title> <publisher> V. 2, Kluwer Academic Publishers, </publisher> <year> 1992, </year> <pages> pp. 107-125. </pages>
Reference-contexts: The currently proposed mechanism for key exchange in this working group is the Photuris protocol designed by Phil Karn [17] which is similar to the STS key exchange protocol of Diffie, van Oorschot, and Wiener <ref> [11] </ref>. Photuris is designed to exchange a key between two parties using public key and the Diffie-Hellman key exchange [10]; it also addresses issues like anonymity and denial-of-service attacks. <p> The latter has the great advantage of minimizing the negative effects of the eventual exposure of long-lived keying material (e.g., the exposure of the private keys of the 2 parties or a long-lived master key). This property of the Diffie-Hellman protocol is referred to as perfect forward secrecy (PFS) <ref> [11, 14] </ref>. However, SKEME does not limit itself to the combination of public key and Diffie-Hellman. It addresses additional needs like, e.g., key exchange based on a previously shared key between the parties. <p> A basic technical observation behind the design of SKEME is that in most common implementations (e.g., RSA), the performance cost of public key signatures is similar to that of public key encryption. Therefore, SKEME deviates from the approach of performing a Diffie-Hellman exchange authenticated via digital signatures (e.g., <ref> [11, 16, 17] </ref>). Instead, the protocol first goes through a share phase in which the parties share a key by mutually encrypting half-keys based on the public key of each other, and then uses this key to authenticate the Diffie-Hellman exchange (against man-in-the-middle attacks). <p> Perfect Forward Secrecy. Perfect forward secrecy (denoted PFS) is a central notion pertaining key exchange protocols. It refers to the property that "disclosure of long-term secret keying material does not compromise the secrecy of exchanged keys from earlier runs." <ref> [11] </ref>. This property has a central role in our protocol and it is extensively discussed in Section 2.3.1. Key separation. Different cryptographic functions should use different and cryptographically independent keys (namely, the exposure of one key should not compromise the other). <p> A key exchange mechanism that protects short-lived keys from compromise even in case of the exposure of long-lived keys, is said to provide perfect forward secrecy (PFS) <ref> [11, 14] </ref>. If, for example, all session keys exchanged by a party, A, are encrypted under A's public key, then an attacker that breaks the private key of A would also learn all past, and even future, session keys of A. <p> We consider the provision of selective PFS as one of the important differentiating properties of SKEME relative to other proposed key exchange mechanisms, e.g., <ref> [11, 17] </ref>. 2.3.2 Privacy and the use of signatures A natural approach to the design of a key exchange protocol based on public keys is to use digital signatures for authentication of the key exchange. <p> Many protocols do that, e.g., <ref> [11, 16, 17] </ref>. 2 In principle, any public key system can be used to achieve such an exchange, including RSA. <p> In particular, to provide support for the different security scenarios and to allow flexible tradeoffs between security and performance, while maintaining system complexity as simple as possible. In this section we briefly summarize those features whose combination differentiates SKEME from other proposed protocols (most notably, the STS/Photuris protocols <ref> [11, 17] </ref>). See Sections 2 and 3 for more details on these features. Public key-based key exchange. Provides key exchange based on public keys, with and without PFS. In the first case, an eavesdropper does not learn the exchanged key even if it knows both private keys of the parties. <p> unique 8 As a preventive measure against partners to communication that use too short exponents (a fact that is hard to detect) SKEME could use a key derived from the SHARE phase to encrypt the Diffie-Hellman exchange (cf. [7]). 9 We stress that in contrast to some other protocols (e.g., <ref> [11, 17] </ref>) there is no security or functional reason in SKEME to prove possession of the session key by the parties during the protocol. This possession is (implicitly) guaranteed by a successful (i.e., errorless) completion of the protocol. 19 identifier for this algorithm. <p> Both protocols provide as their basis an authenticated Diffie-Hellman exchange based on public key. Photuris does it by first performing a Diffie-Hellman exchange and then authenticating it through the use of digital signatures (similarly to the STS protocol of <ref> [11] </ref>). SKEME uses public key encryption to exchange a one-time key and then uses shared-key techniques to authenticate the Diffie-Hellman exchange. An important advantage of the SKEME approach is that it allows for selective performance of the (expensive) Diffie-Hellman operations.
Reference: [12] <author> O. Goldreich, S. Goldwasser and S. Micali, </author> <title> "How to construct random functions," </title> <journal> Journal of the ACM, </journal> <volume> Vol. 33, No. 4, </volume> <pages> 210-217, </pages> <year> (1986). </year>
Reference-contexts: SKEME requires the use of pseudorandom functions, which are collections of keyed functions (like DES or keyed-MD5) with the property that their output (including individual bits of it) cannot be predicted by an adversary that does not possess the key to the function. These functions (formalized in <ref> [12] </ref>) extend the notion of pseudorandom generators, and can be seen as providing "random access" to a long pseudorandom string.
Reference: [13] <author> Goldwasser, S., and S. Micali, </author> <title> "Probabilistic Encryption", </title> <journal> JCSS, </journal> <volume> Vol. 28, No. 2, </volume> <year> 1984, </year> <pages> pp. 270-299. </pages>
Reference-contexts: The assumption on the security of the encryption is that it hides all partial information on the encrypted data (formally, we will assume semantic security of the encryption function <ref> [13] </ref>). In particular, it is assumed that encryption is randomized in the sense that the same message encrypted twice would lead to different encryptions. When using RSA this may be achieved by padding information with random salt before encryption, or more securely, by using the encoding scheme proposed in [6].
Reference: [14] <author> C.G. Gunther, </author> <title> "An identity-based key-exchange protocol", </title> <booktitle> Advances in Cryptology - EURO-CRYPT'89, Lecture Notes in Computer Science Vol. </booktitle> <volume> 434, </volume> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 29-37. </pages>
Reference-contexts: The latter has the great advantage of minimizing the negative effects of the eventual exposure of long-lived keying material (e.g., the exposure of the private keys of the 2 parties or a long-lived master key). This property of the Diffie-Hellman protocol is referred to as perfect forward secrecy (PFS) <ref> [11, 14] </ref>. However, SKEME does not limit itself to the combination of public key and Diffie-Hellman. It addresses additional needs like, e.g., key exchange based on a previously shared key between the parties. <p> A key exchange mechanism that protects short-lived keys from compromise even in case of the exposure of long-lived keys, is said to provide perfect forward secrecy (PFS) <ref> [11, 14] </ref>. If, for example, all session keys exchanged by a party, A, are encrypted under A's public key, then an attacker that breaks the private key of A would also learn all past, and even future, session keys of A.
Reference: [15] <author> IEEE 802.10c, </author> <title> "Interoperable LAN/MAN Security | Clause 3: Key Management Protocol", </title> <type> draft, </type> <month> March </month> <year> 1995. </year>
Reference-contexts: Our work was mainly motivated by the activities carried through the IPSEC working group in the IETF, but we also note the suitability of our approach to the framework defined by IEEE 802.10 <ref> [15] </ref>. SKEME evolved as an extension of MKMP (modular key management protocol) [9] where a modular approach to key management is suggested and a specific module for key refreshment based on a shared key between the parties is presented. <p> The main motivation for the present work has been the ongoing effort in the Internet community to standarize key management mechanisms to support secure IP (Internet Protocol). However, this work has applicability to many other environments as well, e.g., the framework of IEEE security protocols <ref> [15] </ref>. The protocol has many similarities, and some important differences, with Photuris [17], which is being developed through the IPSEC working group of the IETF for the above purpose. Both protocols provide as their basis an authenticated Diffie-Hellman exchange based on public key.
Reference: [16] <editor> ISO/IEC IS 9798-3, </editor> <title> "Entity authentication mechanisms | Part 3: Entity authentication using asymmetric techniques", </title> <year> 1993. </year>
Reference-contexts: A basic technical observation behind the design of SKEME is that in most common implementations (e.g., RSA), the performance cost of public key signatures is similar to that of public key encryption. Therefore, SKEME deviates from the approach of performing a Diffie-Hellman exchange authenticated via digital signatures (e.g., <ref> [11, 16, 17] </ref>). Instead, the protocol first goes through a share phase in which the parties share a key by mutually encrypting half-keys based on the public key of each other, and then uses this key to authenticate the Diffie-Hellman exchange (against man-in-the-middle attacks). <p> Many protocols do that, e.g., <ref> [11, 16, 17] </ref>. 2 In principle, any public key system can be used to achieve such an exchange, including RSA.
Reference: [17] <author> P. Karn, and W. A. Simpson, </author> <title> "The Photuris Session Key Management Protocol", Internet Draft draft-ietf-ipsec-photuris-03.txt, </title> <month> September </month> <year> 1995. </year>
Reference-contexts: The currently proposed mechanism for key exchange in this working group is the Photuris protocol designed by Phil Karn <ref> [17] </ref> which is similar to the STS key exchange protocol of Diffie, van Oorschot, and Wiener [11]. Photuris is designed to exchange a key between two parties using public key and the Diffie-Hellman key exchange [10]; it also addresses issues like anonymity and denial-of-service attacks. <p> A basic technical observation behind the design of SKEME is that in most common implementations (e.g., RSA), the performance cost of public key signatures is similar to that of public key encryption. Therefore, SKEME deviates from the approach of performing a Diffie-Hellman exchange authenticated via digital signatures (e.g., <ref> [11, 16, 17] </ref>). Instead, the protocol first goes through a share phase in which the parties share a key by mutually encrypting half-keys based on the public key of each other, and then uses this key to authenticate the Diffie-Hellman exchange (against man-in-the-middle attacks). <p> the communicating identities (beyond what is strictly necessary, e.g., IP addresses); it addresses further privacy issues by avoiding the use of digital signatures and then allowing for "repudiation of communication" (see Section 2.3.2); and it also provides certain defenses against denial of service attacks (by adopting the "cookies" technique of <ref> [17] </ref>). Related work: Besides the works cited above, the literature contains many references to protocols and standards on key management in general and key exchange mechanisms in particular. <p> In the case of protocols involving public key operations, the opportunity for such attacks is increased due to the high performance cost of these operations. In our protocol we adopt a simple "cookies" technique introduced by Phil Karn in his Photuris protocol <ref> [17] </ref> in order to make it more difficult for an adversary to accomplish such an attack. Performance. Key exchange operations may strongly vary on their computation requirements depending on the trust model and level of security required (compare an MD5 operation vs. an RSA signature). <p> We consider the provision of selective PFS as one of the important differentiating properties of SKEME relative to other proposed key exchange mechanisms, e.g., <ref> [11, 17] </ref>. 2.3.2 Privacy and the use of signatures A natural approach to the design of a key exchange protocol based on public keys is to use digital signatures for authentication of the key exchange. <p> Many protocols do that, e.g., <ref> [11, 16, 17] </ref>. 2 In principle, any public key system can be used to achieve such an exchange, including RSA. <p> Moreover, in order to force B to decrypt the adversary does not need to perform any expensive operation. This problem is addressed in the Photuris protocol <ref> [17] </ref> via a technique called cookies. The same technique can be used in our case, it requires the performance of a COOKIES phase before the SHARE phase. Its incorporation to our protocol is straightforward and the details are omitted here. (We refer to [17] for further motivation and description of this <p> problem is addressed in the Photuris protocol <ref> [17] </ref> via a technique called cookies. The same technique can be used in our case, it requires the performance of a COOKIES phase before the SHARE phase. Its incorporation to our protocol is straightforward and the details are omitted here. (We refer to [17] for further motivation and description of this technique). 3.3 Modes of the Protocol As said earlier, the distinguishing feature of SKEME is its capability to provide the different tradeoffs between performance and security as required by the different security scenarios in Internet. <p> However, we stress here that no security design is complete without a sound treatment of fault tolerance and error handling issues. We will further address these aspects when reporting on our implementation work. Many of the implementation details, however, are common or similar to the Photuris protocol <ref> [17] </ref> where some of them are already dealt with. 4 Summary of Main Features SKEME is designed to achieve the requirements listed and discussed in Section 2. <p> In particular, to provide support for the different security scenarios and to allow flexible tradeoffs between security and performance, while maintaining system complexity as simple as possible. In this section we briefly summarize those features whose combination differentiates SKEME from other proposed protocols (most notably, the STS/Photuris protocols <ref> [11, 17] </ref>). See Sections 2 and 3 for more details on these features. Public key-based key exchange. Provides key exchange based on public keys, with and without PFS. In the first case, an eavesdropper does not learn the exchanged key even if it knows both private keys of the parties. <p> unique 8 As a preventive measure against partners to communication that use too short exponents (a fact that is hard to detect) SKEME could use a key derived from the SHARE phase to encrypt the Diffie-Hellman exchange (cf. [7]). 9 We stress that in contrast to some other protocols (e.g., <ref> [11, 17] </ref>) there is no security or functional reason in SKEME to prove possession of the session key by the parties during the protocol. This possession is (implicitly) guaranteed by a successful (i.e., errorless) completion of the protocol. 19 identifier for this algorithm. <p> Notice that authentication is carried in SKEME via MAC or pseudorandom functions, and then it provides no useful proof of communication to third parties. Denial of service attacks. Potential clogging attacks are alleviated through the cookies technique of <ref> [17] </ref>. Use of symmetric encryption. There is no requirement for use of symmetric encryption inside the protocol. <p> This assumes that these public exponents are unique per exchange. This is indeed very desirable since the perfect forward secrecy property of the Diffie-Hellman exchange calls for the destruction of the secret exponent, say x, immediately after the Diffie-Hellman key is computed. However, it has been suggested (e.g., <ref> [17] </ref>) that a party could reuse the same secret and public exponent for different exchanges during a relatively short period of time (say, few minutes). The reason for such reuse is to amortize the cost of computing the exponentiation g x mod p over several exchanges. <p> However, this work has applicability to many other environments as well, e.g., the framework of IEEE security protocols [15]. The protocol has many similarities, and some important differences, with Photuris <ref> [17] </ref>, which is being developed through the IPSEC working group of the IETF for the above purpose. Both protocols provide as their basis an authenticated Diffie-Hellman exchange based on public key.
Reference: [18] <editor> A.J. Menezes, P.C. van Oorschot, S. Vanstone, </editor> <booktitle> Handbook of Applied Cryptography, </booktitle> <publisher> CRC Press (Boca Raton, </publisher> <address> Florida), </address> <note> to appear 1996. </note>
Reference-contexts: We refer the reader to the survey by Rueppel and van Oorschot [21] on key exchange mechanisms, as well as to the forthcoming book by Menezes, van Oorschot, and Vanstone (chapter 12) <ref> [18] </ref>. Our work was mainly motivated by the activities carried through the IPSEC working group in the IETF, but we also note the suitability of our approach to the framework defined by IEEE 802.10 [15].
Reference: [19] <author> R.M. Needham, and M.D. Schroeder, </author> <title> "Using encryption for authentication in large networks of computers", </title> <journal> Comm. of the ACM, </journal> <volume> 21, </volume> <year> 1978, </year> <pages> pp. 993-999. </pages>
Reference-contexts: In general, SKEME builds as much as possible, even for its public key based modes, on the existing solid design and analysis work developed for key exchange over the shared-key model (cf. <ref> [19, 8, 4] </ref>). Security analysis: A detailed and formal security analysis of SKEME is beyond the scope of this paper which is intended to describe the protocol design and its rationale. <p> The advantage of the public key model is that it has minimal third party trust requirements and, fundamentally, is the most scalable model for Internet. Key Distribution Centers. A well established and extensively used trust model is that of a key distribution center (KDC) <ref> [19] </ref>. This is the model popularized by the Kerberos protocol [20]. <p> These are (unstructured) random numbers freshly generated by the parties and sent instead of the Diffie-Hellman exponents. These nonces are typically implemented as pseudorandom bit strings of length 64-128. The resultant phases EXCH and AUTH follow the known techniques from the shared-key model originated with <ref> [19] </ref>, and further developed and analyzed in subsequent works (especially, [8, 4]).
Reference: [20] <author> B. C. Neuman and T. Ts'o. </author> <title> "Kerberos: An Authentication Service for Computer Networks", </title> <journal> IEEE Communications, </journal> <volume> 32(9) </volume> <pages> 33-38. </pages> <month> Sept. </month> <year> 1994. </year> <note> http://nii.isi.edu/publications/ kerberos-neuman-tso.html. </note>
Reference-contexts: This supports many important and realistic scenarios which include manual key installation and other forms of shared master keys. Furthermore, it accommodates key exchange in the Key Distribution Center model (also known as the Kerberos model <ref> [20] </ref>), where the parties share a key via a commonly-trusted center. By using this key to authenticate a Diffie-Hellman exchange, rather than using it directly as a session key, SKEME achieves a significant security improvement by reducing the trust required in the KDC. <p> Key Distribution Centers. A well established and extensively used trust model is that of a key distribution center (KDC) [19]. This is the model popularized by the Kerberos protocol <ref> [20] </ref>.
Reference: [21] <author> R.A. Rueppel, and P.C. van Oorschot, </author> <title> "Modern key agreement techniques", </title> <journal> Computer Communications, </journal> <volume> 17, </volume> <year> 1994, </year> <pages> pp. 458-465. </pages>
Reference-contexts: Related work: Besides the works cited above, the literature contains many references to protocols and standards on key management in general and key exchange mechanisms in particular. We refer the reader to the survey by Rueppel and van Oorschot <ref> [21] </ref> on key exchange mechanisms, as well as to the forthcoming book by Menezes, van Oorschot, and Vanstone (chapter 12) [18]. <p> key operations are limited to encryption/decryption, while all authentication of information by the parties is done through symmetric key techniques which provide complete repudiatability of the authenticated information, as well as avoids the need to encrypt the authentication. (For alternative public key-based exchange protocols that do not use signatures see <ref> [21] </ref>.) 3 The SKEME Protocol In this section we present the SKEME protocol with its basic phases and messages. The description is at a high-level and omits some of the details in order to concentrate on the basic security structure of the protocol and the functionality it provides.
Reference: [22] <author> P. Zimmermann, </author> <title> PGP User's Guide. </title> <address> Boulder, Colo. </address> <year> 1994. </year> <month> 24 </month>
Reference-contexts: The trust on this authenticity will be based, in general, on the existence of some form of certification mechanism that can range from a global Certification Authority to local and distributed trust as in the PGP model <ref> [22] </ref> (manual distribution of public-keys is also possible). The advantage of the public key model is that it has minimal third party trust requirements and, fundamentally, is the most scalable model for Internet. Key Distribution Centers.
References-found: 22

