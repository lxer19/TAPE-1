URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1996/96-25.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1996/
Root-URL: 
Email: fdfj,staskog@cc.gatech.edu  
Title: The Information Mural: Increasing Information Bandwidth in Visualizations  
Author: Dean F. Jerding and John T. Stasko 
Keyword: information visualization, software visualization, data visualization  
Address: Atlanta, GA 30332-0280  
Affiliation: Graphics, Visualization, and Usability Center College of Computing Georgia Institute of Technology  
Abstract: Technical Report GIT-GVU-96-25 October 1996 Abstract Information visualizations must allow users to browse information spaces and focus quickly on items of interest. Being able to see some representation of the entire information space provides an initial gestalt overview and gives context to support browsing and search tasks. However, the limited number of pixels on the screen constrain the information bandwidth and make it difficult to completely display large information spaces. The Information Mural is a two-dimensional, reduced representation of an entire information space that fits entirely within a display window or screen. The mural creates a miniature version of the information space using visual attributes such as grayscale shading, intensity, color, and pixel size, along with anti-aliased compression techniques. Information Murals can be used as stand-alone visualizations or in global navigational views. We have built several prototypes to demonstrate the use of Information Murals in visualization applications; subject matter for these views includes computer software, scientific data, text documents, and geographic information. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. V. Beard and J. Q. W. </author> <title> II. Navigational techniques to improve the display of large two-dimensional spaces. </title> <journal> Behaviour and Information Technology, </journal> <volume> 9(6) </volume> <pages> 451-466, </pages> <year> 1990. </year>
Reference: [2] <author> S. K. Card, G. G. Robertson, and J. Mackinlay. </author> <title> The Information Visualizer, an information workspace. </title> <booktitle> In Proceedings of the ACM SIGCHI '91 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 181-188, </pages> <address> New Orleans, LA, </address> <month> May </month> <year> 1991. </year>
Reference: [3] <author> R. </author> <title> Chimera. Value Bars: An information visualization and navigation tool for multiattribute listings (demo summary). </title> <booktitle> In Proceedings of the ACM SIGCHI '92 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 293-294, </pages> <year> 1992. </year>
Reference-contexts: Chimera's Value Bars have a similar problem when trying to display attributes of lists with more members than there are rows of pixels in the display <ref> [3] </ref>. Information Murals can also be used to visualize the distribution of keywords in a set of documents retrieved from a search. Fig. 15a-c show the distribution of keywords in three papers after a search for visualization (yellow), object-oriented (green), and OO (cyan) was performed.
Reference: [4] <author> S. G. Eick, J. L. Steffen, and E. E. S. Jr. </author> <title> SeeSoft|A tool for visualizing line oriented software statistics. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(11) </volume> <pages> 957-968, </pages> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: The Information Mural technique computes information density automatically, making the display of a population density map on a computer screen almost trivial (Fig. 13). The data was obtained from the Tiger Mapping Service U.S. Places File, created from the Census file STF-1A. 3.3.2 Text Documents While SeeSoft <ref> [4] </ref> from AT&T's Bell Laboratories introduced a revolutionary miniature representation for text documents, it did have a limit. One row of pixels (or part of a row in later versions) is required for every line in the file.
Reference: [5] <author> G. W. Furnas. </author> <title> Generalized fisheye views. </title> <booktitle> In Proceedings of the ACM SIGCHI '86 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 16-23, </pages> <address> Boston, MA, </address> <month> Apr. </month> <year> 1986. </year>
Reference: [6] <author> M. A. Hearst. TileBars: </author> <title> Visualization of term distribution in full text information access. </title> <booktitle> In Proceedings of ACM SIGCHI '95 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 59-66, </pages> <address> Denver, CO, </address> <year> 1995. </year>
Reference-contexts: This information would aid a user in determining document relevance, in addition to a simple numerical ranking. The TileBar visualization technique uses grayscale tile images which correspond to a thematic breakdown of a document to visually display relevance information to a keyword search <ref> [6] </ref>. This technique is more complicated and can require more space than just visually depicting the location of the keywords using an Information Mural.
Reference: [7] <author> M. T. Heath and J. A. Etheridge. </author> <title> Visualizing the performance of parallel programs. </title> <journal> IEEE Software, </journal> <volume> 8(5) </volume> <pages> 29-39, </pages> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: The space-time view of the PVM kernel integer sort benchmark shown using ParaGraph <ref> [7] </ref>, a parallel program visualization system, is included as Fig. 6. When the entire run is compressed into the view, messages blur together and make overall patterns less clear.
Reference: [8] <author> W. C. Hill, J. D. Hollan, D. Wroblewski, and T. McCandless. Edit wear and read wear. </author> <booktitle> In Proceedings of the Conference on Human Factors in Computing Systems (CHI), </booktitle> <pages> pages 3-9, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: The Edit Wear and Read Wear technique colored lines in a scrollbar to represent the reading and writing history of lines in a text file <ref> [8] </ref>. It is not clear how attributes of lines in large files would be displayed, as one attribute could occlude another. The Information Mural technique would help an application such as this display attributes for files which have more lines than there are rows of pixels in the scrollbar.
Reference: [9] <author> D. F. Jerding and J. T. Stasko. </author> <title> Using visualization to foster object-oriented program understanding. </title> <type> Technical Report GIT-GVU-94-33, </type> <institution> Georgia Institute of Technology, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: The following discussion also mentions related visualization work which could take advantage of the extra information bandwidth provided by Information Murals. 3.1 Software Visualization The Information Mural technique originated in our software visualization research into visualization of object-oriented (OO) program executions <ref> [9, 10] </ref>.
Reference: [10] <author> D. F. Jerding and J. T. Stasko. </author> <title> The Information Mural: A technique for displaying and navigating large information spaces. </title> <booktitle> In Proceedings of the IEEE Visualization `95 Symposium on Information Visualization, </booktitle> <pages> pages 43-50, </pages> <address> Atlanta, GA, </address> <month> October </month> <year> 1995. </year>
Reference-contexts: The following discussion also mentions related visualization work which could take advantage of the extra information bandwidth provided by Information Murals. 3.1 Software Visualization The Information Mural technique originated in our software visualization research into visualization of object-oriented (OO) program executions <ref> [9, 10] </ref>. <p> One of the views from our prototype OO program visualization suite is called the Execution Mural (Fig. 2). This view is used to examine message traces from object-oriented programs <ref> [10] </ref>. The upper portion of the view is the focus area where a subset of the messages can be examined in detail.
Reference: [11] <author> D. F. Jerding and J. T. Stasko. </author> <title> Using Information Murals in visualization applications. </title> <booktitle> In Proceedings of the 1995 Symposium on User Interface Software and Technology (Demonstration), </booktitle> <pages> pages 73-74, </pages> <address> Pittsburgh, PA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: Below are some snapshots from visualization applications we have built using Information Murals. These applications contain many different forms of information, from software to data to text documents, some of which were mentioned in <ref> [11] </ref>. The following discussion also mentions related visualization work which could take advantage of the extra information bandwidth provided by Information Murals. 3.1 Software Visualization The Information Mural technique originated in our software visualization research into visualization of object-oriented (OO) program executions [9, 10].
Reference: [12] <author> D. F. Jerding, J. T. Stasko, and T. Ball. </author> <title> Visualizing message patterns in object-oriented program executions. </title> <type> Technical Report GIT-GVU-96-15, </type> <institution> Georgia Institute of Technology, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Murals are currently being used in a suite of views to support program understanding during design recovery, validation, and reengineering tasks <ref> [12] </ref>. 3.1.1 Object-Oriented Message Traces Imagine an event trace diagram for object-oriented message sequences turned on its side, such that classes are assigned rows on the vertical axis and a message from one class to another is drawn as a vertical line connecting the source and destination classes. <p> In fact, being able to construct and observe global views of various message traces gave us insight into the existence of message patterns and sub-patterns in object-oriented programs. It was this observation which motivated the work described in <ref> [12] </ref> where we treat repeated sequences of messages as higher-level abstractions that correspond to design-level scenarios or language-level idioms.
Reference: [13] <author> B. Johnson and B. Shneiderman. </author> <title> Tree-maps: A space filling approach to the visualization of hierarchical information structures. </title> <booktitle> In Proceedings of the IEEE Visualization '91, </booktitle> <pages> pages 284-291, </pages> <address> San Diego, CA, </address> <month> Oct. </month> <year> 1991. </year>
Reference: [14] <author> D. A. Keim, H.-P. Kriegel, and M. Ankerst. </author> <title> Recursive Pattern: A technique fo visualizing very large amounts of data. </title> <booktitle> In Proceedings of IEEE Visualization '95 Conference, </booktitle> <pages> pages 279-286, </pages> <address> Atlanta, GA, </address> <month> October </month> <year> 1995. </year> <month> 18 </month>
Reference: [15] <author> D. Kimelman and B. Rosenburg. Strata-Various: </author> <title> Multi-layer visualization of dynamics in software system behavior. </title> <booktitle> In Proceedings of the IEEE Visualization '94 Conference, </booktitle> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: A recording strip view is used to portray instance activation over time. The Information Mural technique could be utilized to increase the amount of historical information that can be displayed. As another example, the PV program visualization system provides concurrent, coordinated, and multi-layered views of program behavior <ref> [15] </ref>. The time-oriented system and process state information views use pixel-level color strips which extend over time to present state history. These views scroll to the right as the program executes, and can be zoomed in to decrease the scale of the strips.
Reference: [16] <author> J. Lamping and R. Rao. </author> <title> Laying out and visualizing large trees using a hyperbolic space. </title> <booktitle> In Proceedings of the 1994 ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 13-14, </pages> <address> Marina del Rey, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: For example, the HotWired visual debugger for C++ and Smalltalk provides both object views and a scripting language to create simple program visualizations <ref> [16] </ref>. A recording strip view is used to portray instance activation over time. The Information Mural technique could be utilized to increase the amount of historical information that can be displayed. As another example, the PV program visualization system provides concurrent, coordinated, and multi-layered views of program behavior [15].
Reference: [17] <author> J. Mackinlay, G. G. Robertson, and S. K. Card. </author> <title> The Perspective Wall: Detail and context smoothely integrated. </title> <booktitle> In Proceedings of the ACM SIGCHI '91 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 173-180, </pages> <address> New Orleans, LA, </address> <month> May </month> <year> 1991. </year>
Reference: [18] <author> C. Plaisant, D. Carr, and B. Shneiderman. </author> <title> Image-browser taxonomy and guidelines for designers. </title> <journal> IEEE Software, </journal> <volume> 12(2) </volume> <pages> 21-32, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: The design of a particular information visualization is very much dependent on the task (s) it is intended to support. Plaisant, Carr, and Shneiderman have categorized different types of tasks, including image generation, open-ended exploration, diagnostic, navigation, and monitoring <ref> [18] </ref>. For many of these applications, a global view of the information is important as a navigational aid or as an analysis tool. Global views are used to provide context for more detailed views, to help formulate a search, identify patterns, or make a gestalt overview.
Reference: [19] <author> B. A. Price, R. M. Baecker, and I. S. </author> <title> Small. A principled taxonomy of software visualization. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 4(3) </volume> <pages> 211-266, </pages> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Other alternatives are to display an average of the data values, or only a subset of the data. 1 * Time-oriented visualizations often span many computer screens if laid out completely. These types of views are particularly prevalent in software visualization <ref> [19] </ref> and monitoring appli cations. * Visualizations which contain miniature representations of information are forced to make tradeoffs in deciding what visual attributes of the information can be included at small scales. * A text file or document usually does not fit entirely on the screen, because its vertical dimension far
Reference: [20] <author> R. Rao and S. K. Card. </author> <title> The Table Lens: Merging graphical and symbolic representations in an interactive focus+context visualization for tabluar information. </title> <booktitle> In Proceedings of the ACM SIGCHI '94 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 318-322, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Fig. 3 shows the same Pattern Matrix view at two different sizes. An information visualization which could take advantage of Information Murals in a similar way 7 (a) Same diagram drawn by just over-plotting (without the mural technique). is the Table Lens <ref> [20] </ref>. The Table Lens applies fish-eye viewing techniques to table-oriented data like a spreadsheet. By combining symbolic and graphical representations, the Table Lens can show various rows, columns, or cells at different levels of focus.
Reference: [21] <author> S. P. Reiss. </author> <title> PECAN: Program development systems that support multiple views. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(3):276-85, </volume> <month> March </month> <year> 1985. </year>
Reference: [22] <author> S. P. Reiss. </author> <title> A framework for abstract 3D visualization. </title> <booktitle> In Proceedings of the 1993 IEEE Symposium on Visual Languages, </booktitle> <pages> pages 108-115, </pages> <address> Bergen, Norway, </address> <month> Aug. </month> <year> 1993. </year>
Reference: [23] <author> G. G. Robertson and J. D. Mackinlay. </author> <title> The Document Lens. </title> <booktitle> In Proceedings of the 1993 ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 101-108, </pages> <address> Atlanta, GA, </address> <month> Nov. </month> <year> 1993. </year>
Reference: [24] <author> M. Sarkar and M. H. Brown. </author> <title> Graphical fisheye views of graphs. </title> <booktitle> In Proceedings of ACM SIGCHI '92 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 83-91, </pages> <month> May </month> <year> 1992. </year>
Reference: [25] <author> R. Spence and M. Apperley. </author> <title> Data base navigation: an office environment for the professional. </title> <journal> Behaviour and Information Technology, </journal> <volume> 1(1) </volume> <pages> 43-54, </pages> <year> 1982. </year>
Reference: [26] <author> J. T. Stasko and E. Kraemer. </author> <title> A methodology for building application-specific visualizations of parallel programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 258-264, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Now imagine that you can see an event trace diagram of an entire program execution, which might contain hundreds of thousands of messages. Fig. 1a shows a grayscale, aliased Information Mural of a message trace from a bubble sort algorithm animation built using the Polka toolkit <ref> [26] </ref>, containing around 20 classes on the vertical axis and over 90,000 messages on the horizontal. Drawing this image in a window 500 pixels wide results in a horizontal information compression ratio of over 180:1.
Reference: [27] <author> M. C. Stone, K. Fishkin, and E. A. Bier. </author> <title> The movable filter as a user interface tool. </title> <booktitle> In Proceedings of the ACM SIGCHI '94 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 306-312, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1992. </year>
Reference: [28] <author> B. Topol, J. T. Stasko, and V. S. Sunderam. </author> <title> Monitoring and visualization in cluster environments. </title> <type> Technical Report GIT-GVU-96-10, </type> <institution> Georgia Institute of Technology, </institution> <month> March </month> <year> 1996. </year> <month> 19 </month>
Reference-contexts: The aliased mural of Fig. 4a shows the kernel integer sort benchmark executing on 16 PVM processors, generated using the PVaniM system built at Georgia Tech <ref> [28] </ref>. Each processor is assigned a row on the vertical axis, and a message is drawn as a line from one processor to another at the appropriate time coordinates. This particular view uses wall clock timestamps.
References-found: 28

