URL: http://www.cs.ubc.ca/spider/cebly/Papers/lpsp.ps
Refering-URL: http://www.cs.ubc.ca/spider/cebly/papers.html
Root-URL: 
Email: brafman@cs.bgu.ac.il  hoos@informatik.tu-darmstadt.de  cebly@cs.ubc.ca  
Title: LPSP: A Linear Plan-level Stochastic Planner  
Author: Ronen I. Brafman Holger H. Hoos Craig Boutilier 
Address: Beer Sheva, Israel 84105  D-62483 Darmstadt, Germany  Vancouver, BC V6T 1Z4, Canada  
Affiliation: Department of Math and CS Ben-Gurion University  Department of Computer Science Darmstadt University of Technology  Department of Computer Science University of British Columbia  
Abstract: We describe LPSP, a domain-independent planning algorithm that searches the space of linear plans using stochastic local search techniques. Because linear plans, rather than propositional assignments, comprise the states of LPSP's search space, we can incorporate into its search various operators that are suitable for manipulating plans, such as plan-step reordering based on action dependencies, and limited forward/backward search. This, in turn, leads to a flexible planning algorithm that outperforms the SATPLAN planner on difficult blocks world problems. 
Abstract-found: 1
Intro-found: 1
Reference: [BF95] <author> A. Blum and M. L. Furst. </author> <title> Fast planning through planning graph analysis. </title> <booktitle> In Proc. Fourteenth International Joint Conference on AI, </booktitle> <year> 1995. </year>
Reference-contexts: 1 Introduction The last several years have witnessed the emergence of a number of novel classical planning algorithms, including Ginsberg's approximate planning [Gin96], Blum and Furst's GRAPHPLAN <ref> [BF95] </ref>, Kautz and Selman's SAT-PLAN [KS96] constraint-based planning [JP96] and refinement planning [KKY95]. <p> We describe the algorithm assuming that plans of a fixed length n are being searched. We deal with arbitrary plans using techniques similar to those described in <ref> [BF95, KS96] </ref>. Its basic structure is as follows. Repeat until a solution has been found or a maximum number of iterations have been tried 1. Initialize current plan P 2. <p> The dismal performance of LPSP on the logistics domain may suggest dim prospects for LPSP. But we believe that the use of more sophisticated plan representations and search spaces, especially those based on non-linear plans, constraint-based planning representations, and those that allow concurrent action such as GRAPHPLAN <ref> [BF95] </ref>, offer great promise. Indeed, the success of SATPLAN using a state-based encoding bodes well for the extension of LPSP in that fashion.
Reference: [Cha87] <author> D. Chapman. </author> <title> Planning for Conjunctive Goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: While considerable research has been directed in the last decade toward the development of least-commitment planners that search in plan spacewith a notable lineage defined by TWEAK <ref> [Cha87] </ref>, SNLP [MR91] and UCPOP [PW92]these new algorithms employ ideas that differ, sometimes considerably, from those underlying more classic work in generative planning.
Reference: [ENS95] <author> K. Erol, D. Nau, and V. Subrahmanian. </author> <title> Complexity, decidability, and undecidability results for domain independent planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76(1-2):76-88, </volume> <year> 1995. </year>
Reference-contexts: The complexity of this planning problem depends on the language used for describing I; G and A <ref> [ENS95] </ref>. We adopt the popular STRIPS language for representing actions [FN71].
Reference: [FN71] <author> R. Fikes and N. Nilsson. </author> <title> Strips: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2(3-4):189-208, </volume> <year> 1971. </year>
Reference-contexts: The complexity of this planning problem depends on the language used for describing I; G and A [ENS95]. We adopt the popular STRIPS language for representing actions <ref> [FN71] </ref>. <p> Such a greedy replacement step is reminiscent of the means-ends analysis underlying GPS [NS63] and the STRIPS planning algorithm <ref> [FN71] </ref>. In GPS, for instance, steps are added to a plan in order to reduce the difference between current plan steps.
Reference: [Gin96] <author> M. Ginsberg. </author> <title> A new algorithm for generative planning. </title> <booktitle> In Proc. of the 5th Intl. Conf. on Principles of Knowledge Representation. </booktitle> <year> 1996. </year>
Reference-contexts: 1 Introduction The last several years have witnessed the emergence of a number of novel classical planning algorithms, including Ginsberg's approximate planning <ref> [Gin96] </ref>, Blum and Furst's GRAPHPLAN [BF95], Kautz and Selman's SAT-PLAN [KS96] constraint-based planning [JP96] and refinement planning [KKY95].
Reference: [JP96] <author> D. Joslin and M. E. Pollack. </author> <title> Is `early commitment in plan generation ever a good idea? In Proc. </title> <booktitle> of the 13th National Conf. on AI (AAAI '96), </booktitle> <pages> pages 1188-1193, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction The last several years have witnessed the emergence of a number of novel classical planning algorithms, including Ginsberg's approximate planning [Gin96], Blum and Furst's GRAPHPLAN [BF95], Kautz and Selman's SAT-PLAN [KS96] constraint-based planning <ref> [JP96] </ref> and refinement planning [KKY95].
Reference: [KKY95] <author> S. Kambhampati, C. Knoblock, and Q. Yang. </author> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial-order planning. </title> <journal> Artificial Intelligence, </journal> <volume> 88(1-2):253-315, </volume> <year> 1995. </year>
Reference-contexts: 1 Introduction The last several years have witnessed the emergence of a number of novel classical planning algorithms, including Ginsberg's approximate planning [Gin96], Blum and Furst's GRAPHPLAN [BF95], Kautz and Selman's SAT-PLAN [KS96] constraint-based planning [JP96] and refinement planning <ref> [KKY95] </ref>.
Reference: [KMS96] <author> H. Kautz, D. McAllester and B. Selman. </author> <title> Encoding plans in propositional logic. </title> <booktitle> In KR'96, </booktitle> <pages> 374-384, </pages> <year> 1996. </year>
Reference-contexts: During this ongoing quest, we have come to appreciate the error in the illusory view that SATPLAN is devoid of such insights. For example, if one examines the detailed interactions of linear encodings of a planning problem <ref> [KMS96] </ref> with the Walksat search mechanism [SKC94], we can see that SATPLAN has a bias toward (implicitly) extending valid (or near valid) actions sequences. <p> The SAT-PLAN results for the logistics domain were obtained using a state-based encoding that allows one to consider the concurrent execution of non-interacting actions. In contrast, the blocks world results were obtained using a linear encoding (see <ref> [KMS96] </ref> on this distinction). As such, the SATPLAN results should be viewed as those of two different planners. The length of the optimal (linear) plans in the logistics domain are at least 47 steps, putting them beyond the reach of LPSP.
Reference: [KS96] <author> H. Kautz and B. Selman. </author> <title> Pushing the envelope: Planning, propositional logic, and stochastic search. </title> <booktitle> In Proc. of the 13th National Conference on AI (AAAI '96), </booktitle> <pages> pages 1194-1201, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction The last several years have witnessed the emergence of a number of novel classical planning algorithms, including Ginsberg's approximate planning [Gin96], Blum and Furst's GRAPHPLAN [BF95], Kautz and Selman's SAT-PLAN <ref> [KS96] </ref> constraint-based planning [JP96] and refinement planning [KKY95]. <p> The LPSP algorithm (linear, plan-space, stochastic planner) thus requires search operators that are substantially more expensive computationally than those of SATPLAN, yet it is able to finds solutions to very large problems in a very small number of steps. For instance, on the large blocks world problems discussed in <ref> [KS96] </ref>, 3 LPSP is able to find the optimal solution between 2 to 10 times faster than SATPLAN using roughly 100 steps. This research is part of a more extensive research program aimed at understanding stochastic planning and stochastic local search. <p> We describe the algorithm assuming that plans of a fixed length n are being searched. We deal with arbitrary plans using techniques similar to those described in <ref> [BF95, KS96] </ref>. Its basic structure is as follows. Repeat until a solution has been found or a maximum number of iterations have been tried 1. Initialize current plan P 2. <p> Experiments were performed on a Sun Ultra 2 workstation with a 200MHz processor and 256 MB RAM. We compared LPSP and SATPLAN on the large blocks world problem instances that are described in <ref> [KS96] </ref>, where SATPLAN using stochastic local search (Walksat) and a linear problem encoding was shown to outperform both GRAPHPLAN and alternate versions of SATPLAN itself. <p> Because local search steps in LPSP and SATPLAN/Walksat are difficult to compare, we compared the planners using CPU times. 11 For both LPSP and Walksat we ran 100 tries on each problem instance. As in <ref> [KS96] </ref>, the run-times for SATPLAN do not include the time required for transforming the planning problem into a propositional theory and for decoding the solution from SAT into the planning domain. The results appear in Table 1. The parameters used to obtain these results are shown in Table 2. <p> Note that this form of paralleliza-tion is very easy to implement because there is almost no interdependence between the parallel processes. We also performed some experiments on the logistics domain detailed in <ref> [KS96] </ref>. Here, SATPLAN substantially outperforms LPSP. In fact, LPSP is currently unable to solve problems that SATPLAN disposes of in roughly two seconds. The difference can be explained by considering the representation used by SATPLAN for these problems.
Reference: [MR91] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. of the 9th National Conf. on AI (AAAI '91), </booktitle> <pages> pages 634-639, </pages> <year> 1991. </year>
Reference-contexts: While considerable research has been directed in the last decade toward the development of least-commitment planners that search in plan spacewith a notable lineage defined by TWEAK [Cha87], SNLP <ref> [MR91] </ref> and UCPOP [PW92]these new algorithms employ ideas that differ, sometimes considerably, from those underlying more classic work in generative planning. SATPLAN, in particular, is a very different form of planner, seemingly relying on almost none of the intuitions used to develop state-space or plan-space planners in the past. <p> A valid plan is a solution (w.r.t. I, G) if the application of each action results in the some state in G. Following <ref> [MR91] </ref>, we introduce two artificial actions: an action a 0 that must be executed first in any valid plan, whose effect is to produce the initial state I; and action a 1 that must occur last in any valid plan, and whose preconditions are the goal conditions.
Reference: [NS63] <author> A. Newell and H. A. Simon. </author> <title> GPS, a program that simulates human thought. </title> <editor> In E. Feigenbaum and J. Feldman, editors, </editor> <booktitle> Computers and Thought. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1963. </year>
Reference-contexts: Such a greedy replacement step is reminiscent of the means-ends analysis underlying GPS <ref> [NS63] </ref> and the STRIPS planning algorithm [FN71]. In GPS, for instance, steps are added to a plan in order to reduce the difference between current plan steps.
Reference: [PW92] <author> J. S. Penberthy and D. S. Weld. Ucpop: </author> <title> A sound, complete, partial order planner for adl. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proc. Third Intl. Conf. (KR '92), </booktitle> <year> 1992. </year>
Reference: [SKC94] <author> B. Selman, H. Kautz, and B. Cohen. </author> <title> Noise Strategies for Improving Local Search. </title> <booktitle> In AAAI'94, </booktitle> <pages> 337-343, </pages> <publisher> MIT press, </publisher> <year> 1994. </year>
Reference-contexts: During this ongoing quest, we have come to appreciate the error in the illusory view that SATPLAN is devoid of such insights. For example, if one examines the detailed interactions of linear encodings of a planning problem [KMS96] with the Walksat search mechanism <ref> [SKC94] </ref>, we can see that SATPLAN has a bias toward (implicitly) extending valid (or near valid) actions sequences. <p> This general scheme can be found in many stochastic local search algorithms, such as GSAT [SLM92] or Walksat <ref> [SKC94] </ref> A plan is initialized at the beginning of a search try using bi-directional search. If the plan length is n, we choose the last n=2 actions by performing regression from the goal state. If multiple actions can be applied, one is chosen randomly.
Reference: [SLM92] <author> B. Selman, H. Levesque, and D. Mitchell. </author> <title> A New Method for Solving Hard Satisfiability Problems. </title> <booktitle> In AAAI'92, </booktitle> <pages> 440-446, </pages> <publisher> MIT press, </publisher> <year> 1992. </year>
Reference-contexts: This general scheme can be found in many stochastic local search algorithms, such as GSAT <ref> [SLM92] </ref> or Walksat [SKC94] A plan is initialized at the beginning of a search try using bi-directional search. If the plan length is n, we choose the last n=2 actions by performing regression from the goal state. If multiple actions can be applied, one is chosen randomly.
Reference: [Wel94] <author> D. S. Weld. </author> <title> An introduction to least commitment planning. </title> <journal> AI Magazine, </journal> <volume> Winter </volume> 1994 27-61, 1994. 
Reference-contexts: The action can be 4 We assume a basic familiarity with these ideas. For a well written introduction, see <ref> [Wel94] </ref>.
References-found: 15

