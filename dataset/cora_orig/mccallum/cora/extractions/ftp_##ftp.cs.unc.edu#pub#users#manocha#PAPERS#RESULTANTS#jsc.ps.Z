URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/RESULTANTS/jsc.ps.Z
Refering-URL: http://www.cs.unc.edu/~dm/resultants.html
Root-URL: http://www.cs.unc.edu
Email: manocha@cs.unc.edu  jfc@cs.berkeley.edu  
Author: JOHN F. CANNY 
Address: Sitterson Hall  Chapel Hill, NC 27599  Berkeley, CA 94720  
Affiliation: Department of Computer Science,  University of North Carolina  Computer Science Division University of California  
Date: (1993) 15, 99-122  (Received 02 June 1991)  
Note: J. Symbolic Computation  Supported in part by IBM Graduate Fellowship, David and Lucile Packard Fellowship and National Science Foundation Presidential Young Investigator Award (#IRI-8958577) Supported in part by David and Lucile Packard Fellowship and National Science Foundation Pres idential Young Investigator Award (#IRI-8958577) 0747-7171/90/000000 00 $03.00/0 c 1994 Academic Press Limited  
Abstract: MultiPolynomial Resultant Algorithms Computational methods for manipulating sets of polynomial equations are becoming of greater importance due to the use of polynomial equations in various applications. In some cases we need to eliminate variables from a given system of polynomial equations to obtain a "symbolically smaller" system, while in others we desire to compute the numerical solutions of non-linear polynomial equations. Recently, the techniques of Gr-obner bases and polynomial continuation have received much attention as algorithmic methods for these symbolic and numeric applications. When it comes to practice, these methods are slow and not effective for a variety of reasons. In this paper we present efficient techniques for computing multipolynomial resultant algorithms and show their effectiveness for manipulating system of polynomial equations. In particular, we present efficient algorithms for computing the resultant of a system of polynomial equations (whose coefficients may be symbolic variables). The algorithm can also be used for interpolating polynomials from their values and expanding symbolic determinants. Furthermore, it is possible to come up with tight bounds on the running time and storage requirements of the algorithm. Finally, we use the symbolic elimination algorithm to compute the real or complex solutions of non-linear polynomial equations. It reduces the problem to finding roots of univariate polynomials. We also discuss the implementation of these algorithms and discuss their performance on some applications. 
Abstract-found: 1
Intro-found: 1
Reference: <author> S. S. </author> <title> Abhyankar (1976). Historical ramblings in algebraic geometry and related algebra. </title> <journal> American Mathematical Monthly, </journal> <volume> 83 </volume> <pages> 409-448. </pages>
Reference: <author> C. Bajaj, T. Garrity, and J. </author> <title> Warren (1988). On the applications of multi-equational resultants. </title> <type> Technical Report CSD-TR-826, </type> <institution> Department of Computer Science, Purdue University. </institution>
Reference-contexts: It has been applied for implicitizing rational parametric surfaces for geometric modeling applications. To implicitize rational parametric bicubic patches, y Other authors have used the term multiequational resultants <ref> (Bajaj et. al., 1988) </ref> MultiPolynomial Resultants 101 the algorithm takes about 10 5 seconds on a Symbolics 3650, which would be considered impractical for geometric modeling applications. On the same example Ritt-Wu's algorithm takes about 28; 000 seconds on a Sun-3 (Gao and Chou, 1990). <p> As a result they are slow for systems with high Bezout bound. Furthermore, they are restricted to dense polynomial systems. Multipolynomial resultant algorithms provide the most efficient methods (as far as asymptotic complexity is concerned) for solving a system of polynomial equations or eliminating variables <ref> (Bajaj et. al., 1988) </ref>. Their main advantage lies in the fact that the resultant can always be expressed in terms of matrices and determinants.
Reference: <author> M. Ben-or and P. </author> <title> Tiwari (1988). A deterministic algorithm for sparse multivariate polynomial interpolation. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 301-309. </pages>
Reference: <author> D. N. </author> <month> Bernshtein </month> <year> (1975). </year> <title> The number of roots of a system of equations. </title> <journal> Funktsional'nyi Analiz i Ego Prilozheniya, </journal> <volume> 9(3) </volume> <month> 1-4. </month> <title> MultiPolynomial Resultants 121 B. Buchberger (1985). Gr-obner bases: An algorithmic method in ideal theory. In N.K. Bose, editor, </title> <booktitle> Multidimensional Systems Theory, </booktitle> <pages> pages 184-232. </pages> <address> D. </address> <publisher> Reidel Publishing Co. </publisher>
Reference: <author> B. </author> <title> Buchberger (1989). Applications of groebner bases in non-linear computational geometry. </title> <editor> In D. Kapur and J. Mundy, editors, </editor> <booktitle> Geometric Reasoning, </booktitle> <pages> pages 415-447. </pages> <publisher> MIT Press. </publisher>
Reference: <author> J. Canny and I. </author> <title> Emiris (1993). An efficient algorithm for the sparse mixed resultant. </title> <note> In Proceedings of AAECC. To appear. </note>
Reference: <author> J. Canny, E. Kaltofen, and Y. </author> <month> Laksman </month> <year> (1989). </year> <title> Solving system of nonlinear polynomial equations faster. </title> <booktitle> In Proceedings of International Symposium on Symbolic and Algebraic Computation. </booktitle>
Reference-contexts: However, Macaulay's formulation results in sparse matrices and an efficient utilizing the structure of those matrices has been presented in <ref> (Canny, Kaltofen and Laksman, 1989) </ref>. As far as solving Vandermonde systems is concerned, simple algorithms of time complexity O (q 2 ) and O (q) space requirements are known (Zippel, 1990).
Reference: <author> J.F. </author> <title> Canny (1988). The Complexity of Robot Motion Planning. ACM Doctoral Dissertation Award. </title> <publisher> MIT Press. </publisher>
Reference-contexts: If all the polynomials have the same degrees, an improved formulation is given in (Macaulay, 1921). Many a time both determinants evaluate to zero. To compute the resultant we need to perturb the equations and use limiting arguments. This corresponds to computing the characteristic polynomials of both the determinants <ref> (Canny, 1988) </ref>. The ratio of the two characteristic polynomials is termed the Generalized Characteristic Polynomial, and the resultant corresponds to its constant term (Canny, 1990). <p> D is singular: As a result matrix M is singular, too. The resultant of the given system is computed using perturbation techniques <ref> (Canny, 1988) </ref>. In particular, it corresponds exactly to the constant term of the ratio of characteristic polynomials of M and D.
Reference: <author> J.F. </author> <title> Canny (1990). Generalized characteristic polynomials. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 9 </volume> <pages> 241-250. </pages>
Reference-contexts: To compute the resultant we need to perturb the equations and use limiting arguments. This corresponds to computing the characteristic polynomials of both the determinants (Canny, 1988). The ratio of the two characteristic polynomials is termed the Generalized Characteristic Polynomial, and the resultant corresponds to its constant term <ref> (Canny, 1990) </ref>. If the constant term is zero, its lowest degree term contains important information and can be used for computing the proper components in the presence of excess components. This formulation has advantages for both numeric and symbolic applications.
Reference: <author> A.L. </author> <title> Dixon (1908). The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236. </pages>
Reference-contexts: + (s 1) 3 + 3s z = 3 (s (s 2 5s + 5)t 3 + (s 3 + 6s 2 9s + 1)t 2 (2s 3 + 3s 2 6s + 1)t + s (s 1)): We use the Dixon formulation of computing the resultant of bicubic formulation <ref> (Dixon, 1908) </ref> and the resultant corresponds to the determinant of 18 fi 18 matrix, and each entry of the matrix is a linear function of x; y; z; w.
Reference: <author> X.S. Gao and S.C. </author> <title> Chou (1990). Implicitization of rational parametric equations. </title> <type> Technical report, </type> <institution> Department of Computer Science TR-90-34, University of Texas at Austin. </institution>
Reference-contexts: The second approach for variable elimination has been developed by Wu Wen-Tsun (Wu, 1984) using an idea proposed by Ritt (Ritt, 1950). This approach is based on Ritt's characteristic set construction and successfully applied to automated geometry theorem proving by Wu. It is referred as the Ritt-Wu's algorithm <ref> (Gao and Chou, 1990) </ref>. One of the main difficulties in using Gr-obner bases or Ritt-Wu's algorithm is that the method may be slow for even small problems. <p> On the same example Ritt-Wu's algorithm takes about 28; 000 seconds on a Sun-3 <ref> (Gao and Chou, 1990) </ref>. Many other examples of symbolic elimination using Gr-obner bases are highlighted in (Kalkbrener, 1991) and the running times presented are too slow for geometric applications. As a result, no efficient algorithms or implementations are known for symbolic elimination of variables from a system of polynomial equations.
Reference: <author> I.M. Gelfand, M.M. Kapranov, and A.V. </author> <month> Zelevinsky </month> <year> (1990). </year> <title> Discriminants of polynomials in several variables and triangulations of newton polytopes. </title> <journal> Algebra i analiz, </journal> <volume> 2 </volume> <pages> 1-62. </pages>
Reference: <author> C.M. </author> <title> Hoffmann (1990a). A dimensionality paradigm for surface interrogations. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 517-532. </pages>
Reference: <author> C.M. </author> <title> Hoffmann (1990b). Algebraic and numeric techniques for offsets and blends. </title> <editor> In W. Dahmen, M. Gasca, and C. Micchelli, editors, </editor> <booktitle> Computations of Curves and Surfaces, </booktitle> <pages> pages 499-528. </pages> <publisher> Kluwer Academic Publishers. </publisher> <editor> Jean-Pierre Jouanolou (1991). Le Formalisme du Resultant, </editor> <booktitle> volume 90 of Advances in Mathematics. </booktitle>
Reference-contexts: The second algorithm evolved from a basis conversion method and is considered to be more efficient than the first one. Moreover, the second algorithm had been considered to be the fastest elimination method for geometric applications, among all methods implemented till that time <ref> (Hoffmann, 1990b) </ref>. It has been applied for implicitizing rational parametric surfaces for geometric modeling applications. <p> We also describe an efficient implementation of the algorithm using modular methods and present its performance for different applications. In particular, the algorithm takes about 575 and 138 seconds on a Sun-4 and IBM RS/6000, respectively, to implicitize the bicubic patch mentioned in <ref> (Hoffmann, 1990b) </ref>. In general, it is possible to obtain tight bounds on the running time of the algorithm and the storage requirements are a linear function of input and output polynomial sizes and a quadratic function of the order of the matrix corresponding to the resultant formulation. <p> Some experiments with the implementations of Gr-obner bases and resultants in Mac-syma 414.62 on a Symbolics lisp machine (with 16MB main memory and 120MB virtual memory) are described in <ref> (Hoffmann, 1990b) </ref>. For many cases of bicubic surfaces (whose highest monomial is of the form s 3 t 3 ), these systems are unable to implicitize such surfaces and fail due to insufficient virtual memory. <p> Only a new algorithm for basis conversion is able to implicitize such surfaces, however it takes about 10 5 seconds, which would be considered impractical for most applications <ref> (Hoffmann, 1990b) </ref>. Lets consider the bicubic parametrization given in (Hoffmann, 1990b). <p> Only a new algorithm for basis conversion is able to implicitize such surfaces, however it takes about 10 5 seconds, which would be considered impractical for most applications <ref> (Hoffmann, 1990b) </ref>. Lets consider the bicubic parametrization given in (Hoffmann, 1990b).
Reference: <author> M. </author> <title> Kalkbrener (1991). Three Contributions to Elimination Theory. </title> <type> PhD thesis, </type> <institution> Johannes Kepler Uni-versitat, Linz, Austria. </institution>
Reference-contexts: On the same example Ritt-Wu's algorithm takes about 28; 000 seconds on a Sun-3 (Gao and Chou, 1990). Many other examples of symbolic elimination using Gr-obner bases are highlighted in <ref> (Kalkbrener, 1991) </ref> and the running times presented are too slow for geometric applications. As a result, no efficient algorithms or implementations are known for symbolic elimination of variables from a system of polynomial equations.
Reference: <author> E. Kaltofen and Y.N. </author> <title> Lakshman (1988). Improved sparse multivariate polynomial interpolation algor-tihms. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 358, </volume> <pages> pages 467-474. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: As far as solving Vandermonde systems is concerned, simple algorithms of time complexity O (q 2 ) and O (q) space requirements are known (Zippel, 1990). In <ref> (Kaltofen and Laksman, 1988) </ref> MultiPolynomial Resultants 105 an improved algorithm of time complexity O (M (q)log (q)) is presented, where M (q) is the time complexity of multiplying two univariate polynomials of degree q. <p> Furthermore, this approach becomes unattractive when the determinant of the matrix is a sparse polynomial. An alternative is to use sparse interpolation algorithms. A sparse deterministic interpolation algorithm for such problems has been described in (Ben-or and Tiwari, 1988). Its time and space complexity have been improved in <ref> (Kaltofen and Laksman, 1988) </ref>. 3.1.1. Sparse Interpolation Ben-Or and Tiwari's needs an upper bound T q on the number of non-zero monomials in F (x 1 ; . . . ; x n ) (Ben-or and Tiwari, 1988). <p> Later on we use this probability bound for the choice of finite fields used for modular computation. The running time of the algorithm is O (ndq 2 + m 3 ndq). This has been improved using better algorithms for Vandermonde interpolation <ref> (Kaltofen and Laksman, 1988) </ref>. A deterministic version of this algorithm of complexity O (ndq 2 T + m 3 ndqT ) is given in (Zippel, 1990) as well. T is an upper bound on the number of non-zero terms in the polynomial.
Reference: <author> D. Kapur and Y.N. </author> <month> Laksman </month> <year> (1992). </year> <title> Elimination methods: An introduction. </title> <editor> In D. Kapur B. Donald and J. Mundy, editors, </editor> <booktitle> Symbolic and Numerical Computation for Artificial Intelligence. </booktitle> <publisher> Academic Press. </publisher>
Reference: <author> D. </author> <title> Knuth (1981). The Art of Computer Programming: Seminumerical Algorithms. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Since the resultant can always be expressed as a ratio of determinants (or a single determinant), it is possible to use Hadamard's bound for determinants to compute a bound on the coefficients of the resultant <ref> (Knuth, 1981) </ref>. In practice, we found such bounds rather loose and use a randomized version of chinese remainder algorithm to compute the actual bignums. <p> Canny Thus, the coefficients of various G i 's satisfy the relation c i;1 = c i mod p 1 c i;k = c i mod p k ; These c i;j 's are used for computing the bignum, r i;k using chinese remainder theorem, and satisfying the relations <ref> (Knuth, 1981) </ref> r i;k mod p j = c i;j ; j = 1; k While using chinese remainder theorem it is assumed that r i;k are integers lying in the range ( p 1 p 2 ...p k 2 ; p 1 p 2 ...p k 2 ).
Reference: <author> R. </author> <title> Loos (1983). Computing rational zeros of integral polynomials by p-adic expansion. </title> <journal> SIAM Journal on Computing, </journal> <volume> 7 </volume> <pages> 286-293. </pages>
Reference: <author> F.S. </author> <title> Macaulay (1902). On some formula in elimination. </title> <booktitle> Proceedings of London Mathematical Society, </booktitle> <pages> pages 3-27, </pages> <month> May </month> <year> 1902. </year>
Reference-contexts: In this case, the resultant can always be expressed as determinant of a matrix. However, a single determinant formulation may not exist for any arbitrary n and the most general formulation of resultant (to the best of our knowledge) expresses it as a ratio of two determinants <ref> (Macaulay, 1902) </ref>. If all the polynomials have the same degrees, an improved formulation is given in (Macaulay, 1921). Many a time both determinants evaluate to zero. To compute the resultant we need to perturb the equations and use limiting arguments. <p> y; z; w) = xw 5x 2 yw + 2xy 2y 2 + 8xz 10yz 13z 2 Let us use the additional equation F 4 (x; y; z; w) = u 0 w + u 1 x + u 2 y + u 3 z: We use the Macaulay's formulation <ref> (Macaulay, 1902) </ref> to compute the resultant of F 0 which expresses it as a ratio of two determinants, R (u 0 ; u 1 ; u 2 ; u 3 ) = Determinant (M )=Determinant (D), where M = MultiPolynomial Resultants 119 2 6 6 6 6 6 6 6 6
Reference: <author> F.S. </author> <title> Macaulay (1921). Note on the resultant of a number of polynomials of the same degree. </title> <booktitle> Proceedings of London Mathematical Society, </booktitle> <pages> pages 14-21, </pages> <month> June </month> <year> 1921. </year>
Reference-contexts: However, a single determinant formulation may not exist for any arbitrary n and the most general formulation of resultant (to the best of our knowledge) expresses it as a ratio of two determinants (Macaulay, 1902). If all the polynomials have the same degrees, an improved formulation is given in <ref> (Macaulay, 1921) </ref>. Many a time both determinants evaluate to zero. To compute the resultant we need to perturb the equations and use limiting arguments. This corresponds to computing the characteristic polynomials of both the determinants (Canny, 1988).
Reference: <author> F.S. </author> <title> Macaulay (1964). The Algebraic Theory of Modular Systems. </title> <publisher> Stechert-Hafner Service Agency, </publisher> <address> New York. </address>
Reference: <author> D. </author> <title> Manocha (1992). Algebraic and Numeric Techniques for Modeling and Robotics. </title> <type> PhD thesis, </type> <institution> Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley. </institution>
Reference-contexts: This problem arises in symbolic and numeric techniques used to manipulate sets of polynomial equations. Many applications in computer algebra, robotics, geometric and solid modeling use sets of polynomial equations for object representation (as a semi-algebraic set) and for defining constraints (as an algebraic set) <ref> (Manocha, 1992) </ref>. The main operations in these applications can be classified into two types: simultaneous elimination of one or more variables from a given set of polynomial equations to obtain a "symbolically smaller" system and computing the numeric solutions of a system of polynomial equations. <p> This is very useful due to the fact that many polynomial systems encountered in geometric modeling, robotics and vision application are rather sparse <ref> (Manocha, 1992) </ref>. Resultant formulations of sparse polynomial systems, expressed in terms of matrices and determinants, have appeared in (Canny and Emiris, 1993; Sturmfel and Zelevinsky, 1992). 3.
Reference: <author> D. Manocha and J.F. </author> <title> Canny (1991). A new approach for surface intersection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 491-516. </pages> <note> Special issue on Solid Modeling. </note>
Reference: <author> D. Manocha and J.F. </author> <title> Canny (1992a). Algorithms for implicitizingrational parametric surfaces. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 9 </volume> <pages> 25-50. </pages>
Reference-contexts: However, standard computer algebra systems (available on most workstations) are not able to evaluate such determinants in a reasonable amount of time and space <ref> (Manocha and Canny, 1992a) </ref>. Mostly they run for a long period of time and crash because of their memory limitations. <p> Z (s; t); W (s; t)); we formulate the parametric equations wX (s; t) xW (s; t) = 0 wZ (s; t) zW (s; t) = 0 and the problem of implicitization corresponds to computing the resultant of the above equations, by considering them as polynomials in s and t <ref> (Manocha and Canny, 1992a) </ref>. Some experiments with the implementations of Gr-obner bases and resultants in Mac-syma 414.62 on a Symbolics lisp machine (with 16MB main memory and 120MB virtual memory) are described in (Hoffmann, 1990b).
Reference: <author> D. Manocha and J.F. </author> <title> Canny (1992b). Multipolynomial resultant algorithms and linear algebra. </title> <booktitle> In Proceedings of International Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 158-167. </pages>
Reference-contexts: The algorithm is numeric in nature and no intermediate symbolic expressions are generated. As a result, the storage requirements of the algorithm are functions of input and output polynomials and matrices corresponding to resultant formulations. In <ref> (Manocha and Canny, 1992b) </ref>, the linear algebra formulation of resultants has been utilized along with matrix computations and multivariate interpolation.
Reference: <author> D. Manocha and J. </author> <title> Demmel (1992). Algorithms for intersecting parametric and algebraic curves. </title> <booktitle> In Graphics Interface '92, </booktitle> <pages> pages 232-241. </pages>
Reference-contexts: This problem arises in symbolic and numeric techniques used to manipulate sets of polynomial equations. Many applications in computer algebra, robotics, geometric and solid modeling use sets of polynomial equations for object representation (as a semi-algebraic set) and for defining constraints (as an algebraic set) <ref> (Manocha, 1992) </ref>. The main operations in these applications can be classified into two types: simultaneous elimination of one or more variables from a given set of polynomial equations to obtain a "symbolically smaller" system and computing the numeric solutions of a system of polynomial equations. <p> This is very useful due to the fact that many polynomial systems encountered in geometric modeling, robotics and vision application are rather sparse <ref> (Manocha, 1992) </ref>. Resultant formulations of sparse polynomial systems, expressed in terms of matrices and determinants, have appeared in (Canny and Emiris, 1993; Sturmfel and Zelevinsky, 1992). 3.
Reference: <author> E. Mayr and A. </author> <title> Meyer (1982). The compleixty of the word problem in commutative semigroups and polynomial ideals. </title> <booktitle> Advances in Mathematics, </booktitle> <volume> 46 </volume> <pages> 305-329. </pages>
Reference-contexts: One of the main difficulties in using Gr-obner bases or Ritt-Wu's algorithm is that the method may be slow for even small problems. In the worst case, the running time of Gr-obner bases computation can be doubly exponential in the number of variables <ref> (Mayr and Meyer, 1982) </ref>. Even in special cases where this doubly exponential behavior is not observed, deriving tight upper bounds on the method's running time is difficult. This behavior is also observed in practice.
Reference: <author> A.P. </author> <title> Morgan (1987). Solving Polynomial Systems Using Continuation for Scientific and Engineering Problems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey. </address>
Reference: <author> F. </author> <title> Morley (1925). The eliminant of a net of curves. </title> <journal> American Journal of Mathematics, </journal> <volume> 47 </volume> <pages> 91-97. </pages>
Reference: <author> F. Morley and A.B. </author> <month> Coble </month> <year> (1927). </year> <title> New results in elimination. </title> <journal> American Journal of Mathematics, </journal> <volume> 49 </volume> <pages> 463-488. </pages>
Reference: <author> J.F. </author> <month> Ritt </month> <year> (1950). </year> <title> Differential Algebra. </title> <publisher> AMS Colloquium Publications. </publisher>
Reference-contexts: The second approach for variable elimination has been developed by Wu Wen-Tsun (Wu, 1984) using an idea proposed by Ritt <ref> (Ritt, 1950) </ref>. This approach is based on Ritt's characteristic set construction and successfully applied to automated geometry theorem proving by Wu. It is referred as the Ritt-Wu's algorithm (Gao and Chou, 1990).
Reference: <author> G. </author> <title> Salmon (1885). Lessons Introductory to the Modern Higher Algebra. G.E. </title> <publisher> Stechert & Co., </publisher> <address> New York. </address>
Reference: <author> B. </author> <title> Sturmfels (1991). Sparse elimination theory. </title> <editor> In D. Eisenbud and L. Robbiano, editors, </editor> <title> Computational Algebraic Geometry and Commutative Algebra. </title> <publisher> Cambridge University Press. </publisher>
Reference: <author> B. Sturmfels and A. </author> <month> Zelevinsky </month> <year> (1992). </year> <title> Multigraded resultants of sylvester type. </title> <journal> Journal of Algebra. </journal>
Reference: <author> B.L. </author> <title> Van Der Waerden (1950). Modern Algebra (third edition). </title> <editor> F. </editor> <publisher> Ungar Publishing Co., </publisher> <address> New York. 122 D. </address> <note> Manocha and J. </note> <author> F. Canny C. </author> <title> Wampler and A.P. Morgan (1991). Solving the 6r inverse position problem using a generic-case solution methodology. </title> <journal> Mechanisms and Machine Theory, </journal> <volume> 26(1) </volume> <pages> 91-106. </pages>
Reference: <author> H.S. </author> <title> White (1909). Bezout's theory of resultants and its influence on geometry. </title> <journal> Bulletin of the American Mathematical Society, </journal> <volume> 112 </volume> <pages> 59-68. </pages>
Reference: <author> W. </author> <title> Wu (1984). On the decision problem and the mechanization of theorem proving in elementary geometry. </title> <journal> Scientia Sinica, </journal> <volume> 21 </volume> <pages> 150-172. </pages> <note> Also in Bledsoe and Loveland, </note> <editor> eds. </editor> <title> Theorem Proving: After 25 years, </title> <journal> Contemporary Mathematics, </journal> <volume> 29, </volume> <pages> 213-234. </pages>
Reference-contexts: Its applications include ideal membership testing and performing algebraic operations like union, intersection on ideals in addition to eliminating a set of variables or computing the numerical solutions of a system of polynomial equations. The second approach for variable elimination has been developed by Wu Wen-Tsun <ref> (Wu, 1984) </ref> using an idea proposed by Ritt (Ritt, 1950). This approach is based on Ritt's characteristic set construction and successfully applied to automated geometry theorem proving by Wu. It is referred as the Ritt-Wu's algorithm (Gao and Chou, 1990).
Reference: <author> R. </author> <title> Zippel (1990). Interpolating polynomials from their values. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 9 </volume> <pages> 375-403. </pages>
Reference-contexts: However, Macaulay's formulation results in sparse matrices and an efficient utilizing the structure of those matrices has been presented in (Canny, Kaltofen and Laksman, 1989). As far as solving Vandermonde systems is concerned, simple algorithms of time complexity O (q 2 ) and O (q) space requirements are known <ref> (Zippel, 1990) </ref>. In (Kaltofen and Laksman, 1988) MultiPolynomial Resultants 105 an improved algorithm of time complexity O (M (q)log (q)) is presented, where M (q) is the time complexity of multiplying two univariate polynomials of degree q. <p> Probabilistic Interpolation Zippel presents a probabilistic algorithm for interpolation which does not expect any information about the number of non-zero terms of the polynomial being interpolated 106 D. Manocha and J. F. Canny <ref> (Zippel, 1990) </ref>. It only expects a bound on the degree of each variable in any monomial. Such a bound is easy to compute in our case from the matrix entries. <p> As a result its performance is output sensitive and depends on the actual number of terms in the polynomial. We present a brief outline of the algorithm below. It has been explained in detail in <ref> (Zippel, 1990) </ref>. Choose n random numbers r 1 ; . . . ; r n from the coefficient field used for defining the polynomial coefficients. The algorithm proceeds inductively and introduces a variable at each stage. At the kth stage, we have a polynomial in k variables. <p> Let us assume that r i 's are chosen uniformly randomly from a set of size S, than the probability that this algorithm gives a wrong answer is less than nd 2 q 2 ; (3:3) where d = max (d 1 ; . . . ; d n ) <ref> (Zippel, 1990) </ref>. Later on we use this probability bound for the choice of finite fields used for modular computation. The running time of the algorithm is O (ndq 2 + m 3 ndq). This has been improved using better algorithms for Vandermonde interpolation (Kaltofen and Laksman, 1988). <p> The running time of the algorithm is O (ndq 2 + m 3 ndq). This has been improved using better algorithms for Vandermonde interpolation (Kaltofen and Laksman, 1988). A deterministic version of this algorithm of complexity O (ndq 2 T + m 3 ndqT ) is given in <ref> (Zippel, 1990) </ref> as well. T is an upper bound on the number of non-zero terms in the polynomial. In the worst case, T corresponds to q 1 or q 2 . However, due to simplicity and time complexity of the algorithm, we use the probabilistic version for our implementation.
References-found: 39

