URL: http://www.isi.edu/~pedro/PUBLICATIONS/dynamic.ps.Z
Refering-URL: http://www.isi.edu/~pedro/PUBLICATIONS/SIAM95c.html
Root-URL: http://www.isi.edu
Title: Parallel Algorithms for Dynamically Partitioning Unstructured Grids  
Author: Pedro Diniz Steve Plimpton Bruce Hendrickson Robert Leland 
Abstract: Grid partitioning is the method of choice for decomposing a wide variety of computational problems into naturally parallel pieces. In problems where computational load on the grid or the grid itself changes as the simulation progresses, the ability to repartition dynamically and in parallel is attractive for achieving higher performance. We describe three algorithms suitable for parallel dynamic load-balancing which attempt to partition unstructured grids so that computational load is balanced and communication is minimized. The execution time of the algorithms and the quality of the partitions they generate are compared to results from serial partitioners for two large grids. The integration of the algorithms into a parallel particle simulation is also briefly discussed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. J. Bartel and S. J .Plimpton, </author> <title> DSMC Simulation of Rarefied Gas Dynamics on a Large Hypercube Supercomputer, </title> <booktitle> in Proc. AIAA 27th Thermophysics Conference, </booktitle> <pages> AIAA 92-2860. </pages>
Reference-contexts: processor, it is two orders of magnitude slower than parallel Inertial and 10 to 50 times slower than ICFM and IIFM respectively, running on a large parallel machine. 4 Application We tested the parallel load-balancing algorithms in a parallel particle code used at Sandia for simulating very low-density fluid flows <ref> [1] </ref>. Because continuum approaches such as the Navier Stokes equations break down in this regime, the code uses Direct Simulation Monte 6 Diniz et al. Carlo (DSMC) techniques [2] to represent the fluid as a collection of particles. Grids are used in the DSMC computation to locate nearby collision partners.
Reference: [2] <author> G. A. Bird, </author> <title> Molecular Gas Dynamics, </title> <publisher> Clarendon Press, </publisher> <address> Oxford (1976). </address>
Reference-contexts: Because continuum approaches such as the Navier Stokes equations break down in this regime, the code uses Direct Simulation Monte 6 Diniz et al. Carlo (DSMC) techniques <ref> [2] </ref> to represent the fluid as a collection of particles. Grids are used in the DSMC computation to locate nearby collision partners. The natural parallelism is to have each processor own a subset of grid cells and the particles in those cells.
Reference: [3] <author> C. M. Fiduccia and R. M. Mattheyses, </author> <title> A linear time heuristic for improving network partitions, </title> <booktitle> in Proc. 19th IEEE Design Automation Conference, IEEE, </booktitle> <year> 1982, </year> <pages> pp. 175-181. </pages>
Reference-contexts: It is described in Section 2.1. The second component is a parallel variant of a local greedy heuristic due to Fiduccia and Mattheyses (FM) <ref> [3] </ref> which is closely related to the the well-known method of Kernighan and Lin [5]. This algorithm greedily improves an existing partition by moving grid points between sets.
Reference: [4] <author> S. Hammond, </author> <title> Mapping unstructured grid computations to massively parallel computers, </title> <type> PhD thesis, </type> <institution> Rensselaer Polytechnic Institute, Dept. of Computer Science, </institution> <address> Troy, NY, </address> <year> 1992. </year>
Reference-contexts: This greedy strategy proceeds until no further improvement is possible. Unfortunately, FM is inherently sequential and in a formal sense has been proven difficult to parallelize [10]. Our approach differs from that in standard serial implementations. We build on an idea described by Hammond <ref> [4] </ref> and apply FM in a pairwise fashion; that is, two processors perform FM on the subpieces of the partition they own. When only two processors are involved, FM can be quite efficient. In our approach many different pairs of processors work simultaneously following each Inertial bisection.
Reference: [5] <author> B. Kernighan and S. Lin, </author> <title> An efficient heuristic procedure for partitioning graphs, </title> <journal> Bell System Technical Journal, </journal> <volume> 29 (1970), </volume> <pages> pp. 291-307. </pages>
Reference-contexts: It is described in Section 2.1. The second component is a parallel variant of a local greedy heuristic due to Fiduccia and Mattheyses (FM) [3] which is closely related to the the well-known method of Kernighan and Lin <ref> [5] </ref>. This algorithm greedily improves an existing partition by moving grid points between sets. The motivation for using FM is that in sequential algorithms it has been observed that combining the inertial method with FM usually generates high quality partitions very quickly [7].
Reference: [6] <author> R. Leland and B. Hendrickson, </author> <title> A multilevel algorithm for partitioning graphs, </title> <type> Technical Report SAND93-1301, </type> <institution> Sandia National Laboratories, </institution> <address> Albuquerque, NM 87115, </address> <month> October </month> <year> 1993. </year> <title> [7] ,An empirical study of static load balancing algorithms, </title> <booktitle> in Proc. Scalable High Performance Computing Conf., </booktitle> <address> Knoxville, TN, </address> <month> June, </month> <year> 1994. </year> <note> [8] , Chaco user's guide Version 1.0 Technical Report SAND93-2339, </note> <institution> Sandia National Laboratories, </institution> <address> Albuquerque, NM 87115, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Two of the serial algorithms used were Inertial and Inertial coupled with FM (Inertial+FM) which are similar to their parallel counterparts; the third serial method used was a more sophisticated Multilevel method <ref> [6] </ref>. The parallel algorithms were run on an nCUBE 2 hypercube and on an Intel Paragon located at Sandia National Labs. The Chaco runs were performed on an SGI Onyx with a 125 MHz clock.
Reference: [9] <author> B. Nour-Omid, A. Raefsky, and G. Lyzenga, </author> <title> Solving finite element equations on concurrent computers, in Parallel computations and their impact on mechanics, </title> <editor> A. K. Noor, ed., </editor> <publisher> American Soc. Mech. </publisher> <address> Eng., New York, </address> <year> 1986, </year> <pages> pp. 209-227. </pages>
Reference-contexts: Furthermore, since the partitioning is now embedded in the parallel simulation it must be kept economical relative to the total computation. The parallel partitioning algorithms we describe in this paper are constructed from parallel implementations of two commonly used serial partitioners. The first component is the Inertial method <ref> [9] </ref> which is fast and straightforwardly parallel, but typically produces fl This work was supported by the Applied Mathematical Sciences program, U.S. DOE, Office of Energy Research, and was performed at Sandia National Labs, operated for the U.S. DOE under contract No. <p> This problem is known to be NP hard, so we are forced to rely on heuristics. All of our heuristics rely on a recursive bisection approach. 2.1 Parallel Inertial The Inertial method <ref> [9] </ref> employs a physical analogy in which the grid cells are treated as point masses and the grid is cut with a plane orthogonal to the principal inertial axis (the axis about which there is a minimal moment of inertia) of the mass distribution.
Reference: [10] <author> J. Savage and M. Wloka, </author> <title> Parallelism in graph partitioning, </title> <journal> J. Par. Dist. Comput., </journal> <volume> 13 (1991), </volume> <pages> pp. 257-272. </pages>
Reference-contexts: The motivation for using FM is that in sequential algorithms it has been observed that combining the inertial method with FM usually generates high quality partitions very quickly [7]. Unfortunately, a true parallel implementation of FM is known to be P-complete <ref> [10] </ref>, which means a parallel implementation is difficult in a theoretical sense. Hence we use a more convenient but weaker variant which we describe in Section 2.2 Our parallel partitioners combine the inertial algorithm with the FM heuristic improvement in two ways. <p> Partition weights can be balanced by always moving vertices from the "lightest" to the "heaviest" partition. This greedy strategy proceeds until no further improvement is possible. Unfortunately, FM is inherently sequential and in a formal sense has been proven difficult to parallelize <ref> [10] </ref>. Our approach differs from that in standard serial implementations. We build on an idea described by Hammond [4] and apply FM in a pairwise fashion; that is, two processors perform FM on the subpieces of the partition they own.
References-found: 8

