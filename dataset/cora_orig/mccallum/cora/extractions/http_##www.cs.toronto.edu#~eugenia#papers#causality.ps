URL: http://www.cs.toronto.edu/~eugenia/papers/causality.ps
Refering-URL: http://www.cs.toronto.edu/~eugenia/publications.html
Root-URL: http://www.cs.toronto.edu
Email: eugenia@cs.toronto.edu  
Title: Causality via Inductive Definitions  
Author: Eugenia Ternovskaia 
Address: 10 King's College Road, Toronto, M5S 3G4, Canada  
Affiliation: Department of Computer Science, University of Toronto  
Abstract: We propose to treat causal laws as rules of inductive definitions. In the context of formal theories of action, this view of causality leads us to a solution to the frame problem. We obtain essentially the same form of successor state axioms as described in (Reiter 1991) by defining fluents inductively. The same idea of using inductive rules to represent causal laws leads us to a solution to the ramification problem. The inductive solution to the frame and ramification problems provides a justification of logic programming implementation of situation calculus theories. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aczel, P. </author> <year> 1977. </year> <title> An introduction to inductive definitions. </title> <editor> In Barwise, J., ed., </editor> <booktitle> Handbook of Mathematical Logic, </booktitle> <pages> 739-782. </pages> <publisher> Elsevier. </publisher>
Reference: <author> Apt, K. R. </author> <year> 1990. </year> <title> Logic programming. </title> <booktitle> In Handbook of theoretical Computer Science, </booktitle> <volume> volume 92. </volume> <publisher> Elsevier. </publisher> <pages> 493-574. </pages>
Reference-contexts: An operator induced by an inductive definition is a total mapping : P ow (U ) 7! P ow (U ); such that (Z) = fc 2 U j 9P Z : c That is, is a mapping taking sets to sets. A logic program 2 <ref> (Apt 1990) </ref> can be understood as a positive inductive definition (Cousot & Cousot 1992). Let P be a logic program containing at least one constant, H P be its Herbrand universe and ground (P ) be the set of all ground instances over H P of clauses in P .
Reference: <author> Cousot, P., and Cousot, R. </author> <year> 1992. </year> <title> Inductive definitions, semantics and abstract interpretation. </title> <booktitle> In Conference Record of the 19 th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Programming Languages, </booktitle> <pages> 83-94. </pages> <address> New York, U.S.A.: </address> <publisher> ACM Press. </publisher>
Reference-contexts: A logic program 2 (Apt 1990) can be understood as a positive inductive definition <ref> (Cousot & Cousot 1992) </ref>. Let P be a logic program containing at least one constant, H P be its Herbrand universe and ground (P ) be the set of all ground instances over H P of clauses in P .
Reference: <author> Elkan, C. </author> <year> 1992. </year> <title> Reasoning about actions in first order logic. </title> <booktitle> In Proc. of the Conference of the Canadian Society for Computational Studies of Intelligence. </booktitle>
Reference-contexts: Reiter's solution to the frame problem (Reiter 1991) relies on a causal completion assumption and amounts to almost the same form of successor state axioms as obtained in our paper. Elkan <ref> (Elkan 1992) </ref> specifies indirect effects of actions by providing a complete description of how the truth value of a particular fluent might be caused (i.e., become true), or canceled (i.e., become false). Fixed point constructions have appeared in (Thielscher 1996; McCain & Turner 1997).
Reference: <author> Gelfond, M., and Lifschitz, V. </author> <year> 1991. </year> <title> Classical negation in logic programs and disjunctive databases. </title> <booktitle> New Generation Computing 9 </booktitle> <pages> 365-385. </pages>
Reference-contexts: Moreover, our inductive constructions often amount to a first order representation. Let Z be a set. We will write Z (~x) to mean ~x 2 Z. 2 The same can be said about logic programs with classical negation <ref> (Gelfond & Lifschitz 1991) </ref>. Definition 1 Formula (Z; ~x) defines operator (Z) if for each Z U n , (Z) = f~x : (Z; ~x)g: Inductive definitions are closely related to fixed point properties, i.e., properties defined as solutions of recursive equations.
Reference: <author> Giunchiglia, E. </author> <year> 1996. </year> <title> Determining ramifications in the situation calculus. </title> <booktitle> In Proc. of KR 96, </booktitle> <pages> 76-86. </pages>
Reference: <author> Hehner, E. </author> <year> 1993. </year> <title> A practical theory of programming. </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The language of the situation calculus is a many-sorted language with sorts for actions, objects and situations. The constant S 0 is used to denote the initial situation, the empty history. It is analogous to the 3 The terms construction and induction are from <ref> (Hehner 1993) </ref>. number 0 in Peano arithmetic. Binary function symbol do (a; s) denotes the successor situation obtained from situation s by performing action a. Other relations such as fluents, i.e., properties of the world, are defined inductively with respect to the structure of our language (see, e.g. (Moschovakis 1974)).
Reference: <author> Leivant, D. </author> <year> 1994. </year> <title> Higher order logic. In D.M. </title> <editor> Gab-bay, C. H., and Robinson, J., eds., </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 2, </volume> <pages> 229-321. </pages> <publisher> Elsevier. </publisher>
Reference: <author> Lifschitz, V. </author> <year> 1997. </year> <title> On the logic of causal explanation. </title>
Reference-contexts: We start from the simultaneous induction principle and obtain a conjunction 6 This proof is an adaptation of a proof of a similar lemma from <ref> (Lifschitz 1997) </ref>. of induction principles for each fluent. (8P 1 ; :::; P n ; ~x): fff (P 1 ) ^ ::: ^ ff (P n ) j (8P 1 ; :::; P n ; ~x): fff (P 1 ) ^ ::: ^ ff (P n ) oe fi (P 1 <p> This solution is independently justified by a circumscription policy in (McIlraith 1997a). Taking into account the connection between logic programs and inductive definitions, one can expect a close connection between our solutions. Lifschitz <ref> (Lifschitz 1997) </ref> has proposed an approach to representing causal dependencies in second order logic. He describes a process of literal completion that translates sets of causal rules (McCain & Turner 1997) into equivalent sets of sentences of classical logic.
Reference: <author> J. </author> <note> of Artificial Intelligence. To appear. </note>
Reference: <author> Lin, F. </author> <year> 1995. </year> <title> Embracing causality in specifying the indirect effects of actions. </title> <booktitle> In Proc. of IJCAI 95, </booktitle> <pages> 1985-1991. </pages>
Reference-contexts: These notations are similar to the notations for fl-formulas from the previous section. Consider a struc-5 Essentially the same example was considered by Fangzhen Lin <ref> (Lin 1995) </ref> and other authors. ture for the language of the situation calculus. We con-struct sets F + and F as above, but the set of rules now includes causal laws specifying indirect effects of actions in addition to ones describing direct effects. <p> Elkan (Elkan 1992) specifies indirect effects of actions by providing a complete description of how the truth value of a particular fluent might be caused (i.e., become true), or canceled (i.e., become false). Fixed point constructions have appeared in (Thielscher 1996; McCain & Turner 1997). Lin <ref> (Lin 1995) </ref> have argued that domain constraints are not strong enough and an explicit notion of causality is necessary. He represents the fact that a fluent is caused to hold or caused not to hold by a predicate. Then he applies circumscription to minimize this predicate.
Reference: <author> McCain, N., and Turner, H. </author> <year> 1995. </year> <title> A causal theory of ramifications and qualifications. </title> <booktitle> In Proc. of IJCAI 95, </booktitle> <pages> 1978-1984. </pages>
Reference: <author> McCain, N., and Turner, H. </author> <year> 1997. </year> <title> Causal theories of action and change. </title> <booktitle> In Proc. of AAAI 97, </booktitle> <pages> 460-465. </pages>
Reference-contexts: Taking into account the connection between logic programs and inductive definitions, one can expect a close connection between our solutions. Lifschitz (Lifschitz 1997) has proposed an approach to representing causal dependencies in second order logic. He describes a process of literal completion that translates sets of causal rules <ref> (McCain & Turner 1997) </ref> into equivalent sets of sentences of classical logic. This work is similar to ours in the way causality is treated, however the representation problems of the situation cal culus are not discussed.
Reference: <author> McIlraith, S. </author> <year> 1997a. </year> <title> A closed-form solution to the ramification problem (sometimes). </title> <booktitle> In IJCAI 97 workshop on Nonmonotonic Reasoning, Action and Change. </booktitle>
Reference-contexts: She interprets the implication connective as causal or definitional, in the logic programming sense. Then she describes an automatic procedure of compiling successor state axioms from a set of effect axioms and a set of ramification axioms. This solution is independently justified by a circumscription policy in <ref> (McIlraith 1997a) </ref>. Taking into account the connection between logic programs and inductive definitions, one can expect a close connection between our solutions. Lifschitz (Lifschitz 1997) has proposed an approach to representing causal dependencies in second order logic.
Reference: <author> McIlraith, S. </author> <year> 1997b. </year> <title> Representing actions and state constraints in model-based diagnosis. </title> <booktitle> In Proc. of AAAI 97, </booktitle> <pages> 43-49. </pages>
Reference-contexts: McIlraith <ref> (McIlraith 1997b) </ref> describes a solution to the ramification problem referring to the notion of stratified logic program. <p> The resulting succes sor state axioms are those called intermediate successor state axioms <ref> (McIlraith 1997b) </ref>. To obtain final successor state axioms, v fl F fl (~x; do (a; s)) is replaced with R [v fl F fl (~x; do (a; s))], where R is the regression operator (Waldinger 1977; Reiter 1998).
Reference: <author> Moschovakis, Y. </author> <year> 1974. </year> <title> Elementary Induction on Abstract Structures. </title>
Reference-contexts: Binary function symbol do (a; s) denotes the successor situation obtained from situation s by performing action a. Other relations such as fluents, i.e., properties of the world, are defined inductively with respect to the structure of our language (see, e.g. <ref> (Moschovakis 1974) </ref>). Let us consider a natural axiomatization of the properties of situations. Unlike natural numbers, situations compose a tree 4 . The set of situations is constructed starting from the constant S 0 by iterative applications of function do (a; s). <p> This type of definition is called simultaneous induction <ref> (Moschovakis 1974) </ref>. Notice that this definition assumes it is possible that for a particular fluent (or a negated fluent, respectively) there is no information about whether the fluent holds or not in the initial situation. This feature of situation calculus theories provides an opportunity for dealing with incomplete information.
Reference: <author> Reiter, R. </author> <year> 1991. </year> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Lifschitz, V., ed., </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy. </booktitle> <address> San Diego, CA: </address> <publisher> Academic Press. </publisher> <pages> 359-380. </pages>
Reference-contexts: As the representation language, we use the situation calculus, a many-sorted language for specifying change. Its foundational axioms are similar to the axioms of Peano arithmetic with the difference that the successor function is parameterized with performed actions. R. Reiter demonstrates <ref> (Reiter 1991) </ref> that under a natural condition on a situation calculus theory, general effect axioms together with explanation closure axioms, are logically equivalent to successor state axioms. <p> F (~x; do (a; s)) j F (~x; a; s) _ F (~x; s) ^ :fl (8) Formula fl + F (~x; a; s) (respectively, fl F (~x; a; s)) denotes a first order formula specifying the conditions under which fluent F is true (respectively, false) in the successor situation <ref> (Reiter 1991) </ref>. The only free variables of these formulas are those among ~x, a, s. <p> As always for an inductive definition, we need a closure condition: The rules above characterize all the conditions under which action a can cause F to become true (respectively, false) in the successor situation. This closure condition is in fact the same as the Causal Completeness Assumption <ref> (Reiter 1991) </ref> which is necessary to solve the frame problem. <p> The inductive view on causality provides a systematic method of representing situation calculus theories as logic programs. Many of the intuitions behind our solution to the frame and ramification problems have also appeared in earlier work. Reiter's solution to the frame problem <ref> (Reiter 1991) </ref> relies on a causal completion assumption and amounts to almost the same form of successor state axioms as obtained in our paper.
Reference: <author> Reiter, R. </author> <year> 1993. </year> <title> Proving properties of states in the situation calculus. </title> <editor> J. </editor> <booktitle> of Artificial Intelligence 64 </booktitle> <pages> 337-351. </pages>
Reference-contexts: The induction principle above becomes the standard induction principle on situations <ref> (Reiter 1993) </ref>: 8P:[P (S 0 ) ^ (8s 0 ; a):P (s 0 ) oe P (do (a; s 0 ))] oe 8s:P (s)]: 4 In general, we do not impose any restriction on the cardinality of the domain of actions A.
Reference: <author> Reiter, R. </author> <year> 1998. </year> <title> Knowledge in Action: Logical Foundations for Describing and Implementing Dynamic Systems. </title> <note> To appear. </note>
Reference: <author> Thielscher, M. </author> <year> 1995. </year> <title> Computing ramifications by postprocessing. </title> <booktitle> In Proc. of AAAI 95, </booktitle> <pages> 1994-2000. </pages>
Reference: <author> Thielscher, M. </author> <year> 1996. </year> <title> Ramification and causality. </title> <type> Technical Report TR-96-003, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA 94704-1198. </address>
Reference-contexts: These effects are usually associated with domain constraints, sentences that rule out illegal states of the world. However it has been observed that not all of the consequences derived from domain constraints correspond to our intuition. Consider a simple example from <ref> (Thielscher 1996) </ref> 5 . Suppose a light is on if and only if two switches are on. This can be expressed by the domain constraint (8s): on (sw 1 ; s) ^ on (sw 2 ; s) j light (s), where sw 1 and sw 2 are constants. <p> We propose to encode the causal laws describing indirect effects of action as rules of an inductive definition, exactly like we have done for causal laws describing direct effects of actions. Before doing that, a step from domain constraints to causal rules has to be made. Thielscher <ref> (Thielscher 1996) </ref> describes an automatic procedure for converting domain constraints and meta-logical information about influence dependencies between fluents to a set of causal rules. Let be a set of fluents. A binary relation I fi is called influence information. First, domain constraints are transformed into conjunctive normal form.
Reference: <author> Waldinger, R. </author> <year> 1977. </year> <title> Achieving several goals simultaneously. </title> <editor> In Elcock, E., and Michie, D., eds., </editor> <booktitle> Machine Intellegence 8. </booktitle> <address> Edinburg, Scotland: </address> <publisher> Ellis Horwood. </publisher>
References-found: 22

