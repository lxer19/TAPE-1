URL: http://www.cs.uni-bonn.de/~idea/CPT/tr_techdoc.ps.gz
Refering-URL: http://www.cs.uni-bonn.de/~idea/CPT/publications.html
Root-URL: http://cs.uni-bonn.de
Email: E-Mail: fulrike,tlg@informatik.uni-bonn.de  
Title: Implementing Chimera on Top of an Active Relational Database System  
Author: Ulrike Griefahn Thomas Lemke 
Note: This report has been issued to the ESPRIT III project IDEA as working paper IDEA.WP.22.O.005.  
Date: July 9, 1996  
Address: Romerstr. 164 D-53117 Bonn; Germany  
Affiliation: Universitat Bonn Institut fur Informatik III  
Abstract: Chimera is the name of a new data model as well as the name of the corresponding database sublanguage. The model is an object-oriented one based on a rather standard view of the key notions such as object, value, class, type, inheritance, and overriding. Chimera does not only support operations and integrity constraints, but in addition provides deductive and active rules as modeling features for advanced applications. This document provides the technical documentation for the Chimera Prototyping Tool (CPT), an experimental implementation of the Chimera data model and language. It describes the way CPT implements the object-oriented Chimera data model and language on top of the active, deductive, and relational database system Phoenix. 
Abstract-found: 1
Intro-found: 1
Reference: [CF96] <author> Stefano Ceri and Piero Fraternali, </author> <title> editors. Designing Database Applications with Objects and Rules | The IDEA Methodology. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year> <note> to appear. </note>
Reference: [CM93] <author> Stefano Ceri and Rainer Manthey. </author> <title> Consolidated specification of Chimera (CL and CM). </title> <type> Technical Report IDEA.DE.2P.006.01, </type> <institution> Po-litecnico di Milano, Milan, Italy, </institution> <month> November </month> <year> 1993. </year> <title> ESPRIT project P6333 (IDEA). </title>
Reference-contexts: In Section 4.1 we explain how individual Chimera commands are compiled into Phoenix statements. Section 4.2 illustrates how Chimera chains connecting individual Chimera commands are translated. Finally, Section 4.3 points out the essential differences between procedural expressions as defined in <ref> [CM93] </ref> and those that have been implemented in our interpreter. In this section we use the following schema as a running example. Note that the class hierarchy corresponds to the one illustrated in Figure 2. <p> Of course, o remains an instance of c 1 due to subclassing <ref> [CM93] </ref>. In Phoenix, the specialization of an object is performed by first deleting the fact originally representing the object and afterwards inserting the fact describing the object with respect to its new home class. <p> The result of performing this command is that object o is removed from class c 1 , while it remains a member of the superclass c 2 ; therefore, all attributes special 60 to c 1 are dropped <ref> [CM93] </ref>. Actually, c 2 becomes the new most specific class of the object o. <p> When these variables assume OID values, the target list cannot refer to them directly, since OIDs must not be printed. Instead the target list must include the projection of the corresponding objects on suitable attributes or attribute components; these projections should not reference object-valued attributes <ref> [CM93] </ref>. These projections are realized by means of path expressions which have to be evaluated as well. <p> next_oid (Oid); insert (ext_student (Oid,"hugo",1111)); register_chimera_event (create (person),Oid); register_chimera_event (create (student),Oid); delete (ext_student (Oid,Name,Matno)); insert (ext_person (Oid,Name)); register_chimera_event (generalize (student,person),Oid) where the first four procedure calls result from the translation of the create command and the remaining ones from the compilation of the object general ization. 24 Note that in <ref> [CM93] </ref> the symbol "%" instead of "|" is applied for pipelines. 69 Sequences of procedure calls are constructed by means of the sequence con-nector which is denoted by ",". The individual commands of a sequence are executed in a set-oriented fashion | corresponding to the set-oriented view of formulas. <p> For a detailed description of the active rule semantics of both systems the reader may refer to <ref> [CM93] </ref> and [Gri95]. Since Chimera provides targeted as well as untargeted triggers, the translation process has to take care of both concepts. <p> Section 5.6.2 explains how Chimera events are handled in Phoenix. Section 5.6.3 describes the translation process. Section 5.6.4 briefly enumerates the differences between the implemented triggers and their specification in the Chimera document <ref> [CM93] </ref>. In this section we use the following targeted trigger as a running example. <p> A trigger may be targeted to a specific class, when its triggering events are restricted to queries and updates over this class <ref> [CM93] </ref>. The syntax of targeted triggers is simplified since the target class is known from the context and thus can be omitted from the event specifications and event formulas. As in all other targeted concepts, the variable Self may be applied implicitly ranging over all instances of the target class. <p> In accordance with the Chimera specification, we do not consider the other update primitives of Chimera such as create_tmp, make_persistent, specialize, generalize, add, and drop for net effect computation (cf. <ref> [CM93, p. 61] </ref>). The predicate '$chimera_holds' refers to '$chimera_occurred' in order to restrict computation to those events not yet consumed by the trigger.
Reference: [CM94] <author> Stefano Ceri and Rainer Manthey. </author> <title> Chimera: A model and language for active DOOD systems. </title> <booktitle> In Proceedings of the 2nd East-West Database Workshop, Klagenfurt, Austria, Workshops in Computing Series, </booktitle> <pages> pages 3-16. </pages> <publisher> Springer, </publisher> <month> September </month> <year> 1994. </year>
Reference: [DG94] <author> Susanne Deiters and Ulrike Griefahn. </author> <title> Propagation Rule Compiler: Tool specification. </title> <type> Technical Report IDEA.DE.22.O.001, </type> <institution> University of Bonn, Germany, </institution> <month> November </month> <year> 1994. </year> <title> ESPRIT project P6333 (IDEA). </title>
Reference: [ECL93] <author> ECRC, </author> <title> Munchen. ECL i PS e User Manual, </title> <year> 1993. </year>
Reference: [GLM96] <author> Ulrike Griefahn, Thomas Lemke, and Rainer Manthey. </author> <title> Chimera Pro-totyping Tool: User manual. </title> <type> Technical Report IDEA.DE.22.O.006, </type> <institution> University of Bonn, Germany, </institution> <month> November </month> <year> 1996. </year> <title> ESPRIT project P6333 (IDEA). </title>
Reference: [GM95] <author> Ulrike Griefahn and Rainer Manthey. </author> <title> Propagation Rule Compiler: Tool description. </title> <type> Technical Report IDEA.DE.22.O.003, </type> <institution> University of Bonn, Germany, </institution> <month> November </month> <year> 1995. </year> <title> ESPRIT project P6333 (IDEA). </title> <type> 97 </type>
Reference: [GR96a] <author> Ulrike Griefahn and Thomas Rath. </author> <title> Propagation Rule Compiler: </title> <type> Technical documentation. Technical Report IDEA.DE.22.O.005, </type> <institution> University of Bonn, Germany, </institution> <month> November </month> <year> 1996. </year> <title> ESPRIT project P6333 (IDEA). </title>
Reference: [GR96b] <author> Ulrike Griefahn and Thomas Rath. </author> <title> Propagation Rule Compiler: User manual. </title> <type> Technical Report IDEA.WP.22.O.004, </type> <institution> University of Bonn, Germany, </institution> <month> November </month> <year> 1996. </year> <title> ESPRIT project P6333 (IDEA). </title>
Reference: [Gri95] <author> Ulrike Griefahn. </author> <title> First specification of Phoenix, an active database programming language. </title> <type> Technical Report IAI-TR-95-4, </type> <institution> University of Bonn, Germany, </institution> <year> 1995. </year>
Reference-contexts: For a detailed description of the active rule semantics of both systems the reader may refer to [CM93] and <ref> [Gri95] </ref>. Since Chimera provides targeted as well as untargeted triggers, the translation process has to take care of both concepts. In Section 5.6.1 we therefore explain how targeted triggers are transformed into untargeted ones such that the following compilation steps can be equally performed for both kinds of triggers.
Reference: [Lem94] <author> Thomas Lemke. </author> <title> The Schema Evolution Assistant: Tool specification. </title> <type> Technical Report IDEA.DE.22.O.002, </type> <institution> University of Bonn, Germany, </institution> <month> November </month> <year> 1994. </year> <title> ESPRIT project P6333 (IDEA). </title>
Reference: [LM95] <author> Thomas Lemke and Rainer Manthey. </author> <title> The Schema Evolution Assistant: Tool description. </title> <type> Technical Report IDEA.DE.22.O.004, </type> <institution> University of Bonn, Germany, </institution> <month> November </month> <year> 1995. </year> <title> ESPRIT project P6333 (IDEA). </title>
Reference: [Ous94] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year> <month> 98 </month>
References-found: 13

