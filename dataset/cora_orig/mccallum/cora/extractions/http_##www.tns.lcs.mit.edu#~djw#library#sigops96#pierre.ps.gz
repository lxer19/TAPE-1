URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/pierre.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/index.html
Root-URL: 
Email: Guillaume.Pierre@inria.fr  Mesaac.Makpangou@inria.fr  
Title: A Flexible Hybrid Concurrency Control Model for Collaborative Applications in Large Scale Settings  
Author: Guillaume Pierre Mesaac Makpangou 
Address: SOR BP 105 78153 Le Chesnay Cedex France  
Affiliation: INRIA Projet  
Abstract: Large-scale collaborative applications are difficult to build because of their high concurrency control needs and the heterogeneity of the underlying architecture. Due to these difficulties, only a few large-scale applications have been developed, such as Usenet or irc. To facilitate the realisation of such applications, we propose a more precise definition of the application's needs, in order to provide a good "quality" of cooperation when it is needed, and cheaper cooperation when it is acceptable. The model of LaSCoW (Large Scale Collaborative Work) allows the applications to be partitioned into separate consistency domains, each domain implementing its own collaboration policy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Beaudouin-Lafont, M., and Karsenty, A. </author> <title> Transparency and awareness in a real-time groupware system. </title> <booktitle> In Proceedings of the ACM Symposium on User Interface Software and Technology UIST'92 (Nov. </booktitle> <year> 1992). </year> <month> ftp://ftp.cs.unc.edu/pub/users/jeffay/papers/CSCW-92.ps.Z. </month>
Reference-contexts: These are in fact complete applications: collaborative editors, chatting applications, etc. They are in general specific programs, each of which solves a particular problem (e.g. GroupDesign <ref> [1] </ref>, Alliance [4]). Toolkits have also been proposed recently. They provide essentially some basic features to allow programmers to build exactly the system that suits their needs. For example, Bayou [11] lets programmers insert application-specific code into the provided generic optimistic concurrency control.
Reference: [2] <author> Bentley, R., Horstmann, T., Sikkel, K., and Trevor, J. </author> <title> Supporting collaborative information sharing with the World-Wide Web : the BSCW shared workspace system. </title> <booktitle> In Proceedings of the 4th international WWW conference (1995). </booktitle> <address> http://orgwis.gmd.de/~bscw/papers/boston-95/BOSTON.ps. </address>
Reference-contexts: Some projects aim at building CSCW (Computer Supported Collaborative Work) applications on top of the Web but its communication model limits the possibilities of such systems: the systems using CGI scripts are necessarily centralised on the server. These extensions are most often shared workspaces <ref> [2] </ref> or annotation systems, neither of which provides concurrency control. Applets might be an interesting basic feature for large-scale collaborative editing because they enable code migration and client-side computing.
Reference: [3] <author> Chankhunthod, A., Danzig, P. B., Neerdaelsand, C., Schwartz, M. F., and Worrell, K. J. </author> <title> A hierarchical internet object cache. </title> <type> Tech. Rep. 95-611, </type> <institution> Computer Science Department, University of Southern California, </institution> <month> Mar. </month> <year> 1995. </year> <month> ftp://ftp.cs.colorado.edu/pub/cs/techreports/schwartz/HarvestCache.ps.Z. </month>
Reference-contexts: We will only address the first two aspects in this section. 4.1 Large-scale cooperative applications Most existing large-scale collaborative applications (e.g. Usenet [6], irc [9], Web caches <ref> [3] </ref>) avoid the con-currency control problem by trading increased efficiency against a reduced level of consistency management. Such a trade is made possible because of the nature of these applications.
Reference: [4] <author> Decouchant, D., Quint, V., and Salcedo, M. R. </author> <title> Structured cooperative editing and group awareness. </title> <booktitle> In Proceedings of the HCI International'95, 6th International Conference on Human-Computer Interaction (July 1995). </booktitle> <address> ftp://ftp.imag.fr/pub/OPERA/doc/HCI95 alliance.ps.gz. </address>
Reference-contexts: These are in fact complete applications: collaborative editors, chatting applications, etc. They are in general specific programs, each of which solves a particular problem (e.g. GroupDesign [1], Alliance <ref> [4] </ref>). Toolkits have also been proposed recently. They provide essentially some basic features to allow programmers to build exactly the system that suits their needs. For example, Bayou [11] lets programmers insert application-specific code into the provided generic optimistic concurrency control.
Reference: [5] <author> El Abbadi, A., and Toueg, S. </author> <title> The group paradigm for concurrency control protocols. </title> <journal> IEEE transactions on knowledge and data engineering 1, </journal> <month> 3 (Sept. </month> <year> 1989), </year> <pages> 376-386. </pages>
Reference-contexts: As far as we know, the only work which has already tried to run several replication protocols at the same time are only intended to provide fault-tolerance via embedded transactions <ref> [5] </ref>. The approach is to decompose a transaction providing one-copy serialisability into a group of one-copy serialisability sub-transactions. LaSCoW's model extends this paradigm to all kinds of consistency criteria and to non-transactional computation models. Adaptive systems are able to react to environmental modifications in order to optimise their behavior.
Reference: [6] <author> Kantor, B., and Lapsley, P. </author> <title> Network News Transfer Protocol: a proposed standard for the stream-based transmission on news. </title> <type> RFC 977, </type> <month> Feb. </month> <year> 1986. </year> <month> ftp://ftp.inria.fr/rfc/rfc9xx/rfc977.Z. </month>
Reference-contexts: We will only address the first two aspects in this section. 4.1 Large-scale cooperative applications Most existing large-scale collaborative applications (e.g. Usenet <ref> [6] </ref>, irc [9], Web caches [3]) avoid the con-currency control problem by trading increased efficiency against a reduced level of consistency management. Such a trade is made possible because of the nature of these applications.
Reference: [7] <author> Knister, M. J., and Prakash, A. </author> <title> DistEdit : a distributed toolkit for supporting multiple group editors. </title> <booktitle> In Proceedings of the CSCW conference (Oct. </booktitle> <year> 1990), </year> <pages> pp. 343-355. </pages>
Reference-contexts: GroupDesign [1], Alliance [4]). Toolkits have also been proposed recently. They provide essentially some basic features to allow programmers to build exactly the system that suits their needs. For example, Bayou [11] lets programmers insert application-specific code into the provided generic optimistic concurrency control. DistEdit <ref> [7] </ref> allows any text editor to be ported into CSCW by defining generic text editing primitives. These systems and toolkits provide only one concurrency control policy. This choice limits each of them to a few specific well-suited uses.
Reference: [8] <author> Le Sergent, T., and Matthews, D. C. J. </author> <title> Adaptive selection of protocols for strict coherency in distributed shared memory. </title> <type> Tech. Rep. </type> <institution> ECS-LFCS-94-306, LFCS, University of Edinburgh, </institution> <month> Sept. </month> <year> 1994. </year> <note> http://www.dcs.ed.ac.uk/publications/lfcsreps/EXPORT/94/ECS-LFCS-94-306/index.html. </note>
Reference-contexts: An alternative answer is for LaSCoW to monitor the application behavior and to react essentially to the changes on the quality of service of the underlying environment. It seems reasonable that each domain leader be responsible for using simple rules like those described in <ref> [8] </ref> in order to choose the optimal protocol inside its domain. But a global view of the situation is indispensable for being able to take overall decisions. We are considering making each domain leader responsible for all of the hierarchy dependent on it. <p> LaSCoW's model extends this paradigm to all kinds of consistency criteria and to non-transactional computation models. Adaptive systems are able to react to environmental modifications in order to optimise their behavior. The only adaptive replication model we know is <ref> [8] </ref>. The originality of this work is that during the execution with any concurrency protocol, the system is able to compute the cost that other protocols would introduce if they were used instead of the current one.
Reference: [9] <author> Oikarinen, J., and Reed, D. </author> <title> Internet Relay Chat Protocol. </title> <type> RFC 1459, </type> <month> May </month> <year> 1993. </year> <month> ftp://ftp.inria.fr/rfc/rfc14xx/rfc1459.Z. </month>
Reference-contexts: We will only address the first two aspects in this section. 4.1 Large-scale cooperative applications Most existing large-scale collaborative applications (e.g. Usenet [6], irc <ref> [9] </ref>, Web caches [3]) avoid the con-currency control problem by trading increased efficiency against a reduced level of consistency management. Such a trade is made possible because of the nature of these applications.
Reference: [10] <author> Roseman, M., and Greenberg, S. </author> <title> GroupKit : a groupware toolkit for building real-time conferencing applications. </title> <booktitle> In Proceedings of the CSCW conference (Nov. </booktitle> <year> 1992), </year> <pages> pp. 43-50. </pages> <address> http://www.cpsc.ucalgary.ca/projects/grouplab/papers/gk cscw92.ps. </address>
Reference-contexts: DistEdit [7] allows any text editor to be ported into CSCW by defining generic text editing primitives. These systems and toolkits provide only one concurrency control policy. This choice limits each of them to a few specific well-suited uses. Some projects such as GroupKit <ref> [10] </ref> address this limitation by providing a library of consistency protocols among which programmers can choose the one most suited. This run-time choice make these systems much more flexible.
Reference: [11] <author> Terry, D. B., Theimer, M. M., Petersen, K., Demers, A. J., Spreitzer, M. J., and Hauser, C. H. </author> <title> Managing update conflicts in Bayou, a weakly connected replicated storage system. </title> <booktitle> In Proceedings of the 15th ACM symposium on Operating Systems Principles (Dec. </booktitle> <year> 1995). </year> <note> http://www.parc.xerox.com/csl/projects/bayou/pubs/sosp-95/BayouConflictsSOSPPreprint.ps.gz. </note>
Reference-contexts: They are in general specific programs, each of which solves a particular problem (e.g. GroupDesign [1], Alliance [4]). Toolkits have also been proposed recently. They provide essentially some basic features to allow programmers to build exactly the system that suits their needs. For example, Bayou <ref> [11] </ref> lets programmers insert application-specific code into the provided generic optimistic concurrency control. DistEdit [7] allows any text editor to be ported into CSCW by defining generic text editing primitives. These systems and toolkits provide only one concurrency control policy.
Reference: [12] <author> Walther, M. </author> <title> Supporting development of synchronous collaboration tools on the web with GroCo. </title> <booktitle> In Proceedings of the CSCW and the Web ERCIM workshop (Jan. </booktitle> <year> 1996). </year> <note> http://www11.informatik.tu-muenchen.de/~walther/groco/gmdabstract.html. </note>
Reference-contexts: These extensions are most often shared workspaces [2] or annotation systems, neither of which provides concurrency control. Applets might be an interesting basic feature for large-scale collaborative editing because they enable code migration and client-side computing. Some interesting projects have experimented with this on top of the HotJava browser <ref> [12] </ref>, but they are only experimental applications and could not handle a realistically complex collaborative application.
References-found: 12

