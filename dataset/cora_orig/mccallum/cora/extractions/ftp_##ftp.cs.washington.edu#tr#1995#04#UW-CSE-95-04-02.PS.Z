URL: ftp://ftp.cs.washington.edu/tr/1995/04/UW-CSE-95-04-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Abstract-found: 0
Intro-found: 1
Reference: [Ble89] <author> G. E. Blelloch. </author> <title> Scans as primitive parallel operations. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(11) </volume> <pages> 1526-1538, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: A scan is parallel prefix operator; it successively applies an operator to elements of a parallel array creating a partial result for each element <ref> [Ble89] </ref>. For example, a scan addition operator stores the sum of the first i elements in the ith array location. Scans provide a useful mechanism for computing global sums, maximums and counts of the elements of a parallel array.
Reference: [BP90] <author> E. S. Biagioni and J. F. Prins. </author> <title> Scan directed load balancing for highly parallel mesh-connected parallel computers. </title> <booktitle> In Unstructured Scientific Computation on Scalable Multiprocessors, </booktitle> <pages> pages 371-95, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Another key component of a load balancing algorithm is a redistribution algorithm which efficiently balances the workload. Biagioni and Prins <ref> [BP90] </ref> describe a data-parallel redistribution algorithm for grid-based computations which preserves the spatial locality of the workload it balances. Nicol [Nic92] describes a data-parallel redistribution algorithm which minimizes the volume of data transferred to achieve an optimal balance.
Reference: [Nic92] <author> D. M. Nicol. </author> <title> Communication efficient global load balancing. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference, </booktitle> <pages> pages 292-299, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Another key component of a load balancing algorithm is a redistribution algorithm which efficiently balances the workload. Biagioni and Prins [BP90] describe a data-parallel redistribution algorithm for grid-based computations which preserves the spatial locality of the workload it balances. Nicol <ref> [Nic92] </ref> describes a data-parallel redistribution algorithm which minimizes the volume of data transferred to achieve an optimal balance. These efforts are of interest because they describe data-parallel algorithms for redistributing load.
Reference: [NJ90] <author> D. M. Nicol and P. F. Reynolds Jr. </author> <title> Optimal dynamic remapping of data parallel computations. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(2) </volume> <pages> 206-219, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: One disadvantage of this scheme is that the computation of the schedule adds to execution time of the grid calculation. Nicol and Reynolds <ref> [NJ90] </ref> describe a load 2 balancing algorithm which is targeted for data-parallel applications with uncertain behavior, such as, the addition of work during execution and uncertain program completion time.
Reference: [NT89] <author> D. M. Nicol and J. C. Townsend. </author> <title> Accurate modeling of parallel scientific computation. </title> <booktitle> In Proceedings of the 1989 SIGMETRICS Conference, </booktitle> <pages> pages 165-170, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Other researchers have studied the problem of deciding when to balance with different workloads and problem types. Nicol and Townsend <ref> [NT89] </ref> describe a performance model for parallel computations which assigns processors different partitions of an irregular grid. The model utilizes performance measurements of portions of the parallel computation and knowledge about how the grid structure will change over time to calculate an optimal schedule of grid repartitionings.
Reference: [OHA93] <author> F. A. Ortega, C. D. Hansen, and J. P. Ahrens. </author> <title> Fast data parallel polygon rendering. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 709-718, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: This completes the description of the load balancing algorithm. 3 Application to a Polygon Renderer The load balancing algorithm has been added to a data-parallel polygon renderer <ref> [OHA93] </ref>. The goal of a polygon renderer is to generate an image from a three-dimensional polygon model. A lighting model is used to approximate how light is reflected from the polygon model to an image which represents the user's viewpoint.
Reference: [WPG91] <author> M. C. Wikstrom, G. M. Prabhu, and J. L. Gustafson. </author> <title> Myths of load balancing. </title> <booktitle> In Parallel Computing '91, </booktitle> <pages> pages 531-549, </pages> <year> 1991. </year> <month> 17 </month>
Reference-contexts: This result depends only on never underestimating the costs of load balancing. Wikstrom et al. <ref> [WPG91] </ref> use a computational model and experimental results to present evidence that using a load balancing algorithm does not always improve a program's performance.
References-found: 7

