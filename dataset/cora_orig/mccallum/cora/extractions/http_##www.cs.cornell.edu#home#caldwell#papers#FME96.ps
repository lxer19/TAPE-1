URL: http://www.cs.cornell.edu/home/caldwell/papers/FME96.ps
Refering-URL: http://www.cs.cornell.edu/home/caldwell/papers.html
Root-URL: 
Title: Formal Methods Technology Transfer: A View from NASA  
Author: James L. Caldwell 
Date: 26 February 1996  
Address: Hampton, Virginia 23681  
Affiliation: Flight Electronics Technology Division NASA Langley Research Center  
Abstract: Since 1988 NASA Langley Research Center has supported a formal methods research group. From its inception, a primary goal of the program has been the transfer of formal methods technology into aerospace industries focusing on applications in commercial air transport. The overall program has been described elsewhere. An up-to-date and extensive account of the program can be found at the NASA Langley Formal Methods Home Page on the World-Wide Web 1 . In this paper I remark on the technology transfer strategy and its evolution.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> William R. Bevier and William D. Young. </author> <title> Machine checked proofs of the design and implementation of a fault-tolerant circuit. </title> <type> NASA Contractor Report 182099, </type> <month> November </month> <year> 1990. </year>
Reference-contexts: In the first years of the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI [55, 50, 59]; Nqthm, the Boyer Moore prover, at CLI <ref> [1, 2, 45, 44, 68] </ref>; and Clio and the Penelope Ada verification system at ORA [61, 4, 63, 30, 62]. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [2] <author> William R. Bevier and William D. Young. </author> <title> The proof of correctness of a fault-tolerant circuit design. </title> <booktitle> In Second IFIP Conference on Dependable Computing For Critical Applications, </booktitle> <pages> pages 107-114, </pages> <address> Tucson, Arizona, </address> <month> February </month> <year> 1991. </year>
Reference-contexts: In the first years of the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI [55, 50, 59]; Nqthm, the Boyer Moore prover, at CLI <ref> [1, 2, 45, 44, 68] </ref>; and Clio and the Penelope Ada verification system at ORA [61, 4, 63, 30, 62]. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [3] <author> Mark Bickford. </author> <title> A formal semantics for a subset of VHDL and its use in analysis of the ftpp scoreboard circuit. </title> <type> NASA Contractor Report 191577, </type> <month> April </month> <year> 1994. </year>
Reference-contexts: Within Boe-ing, Fura at Boeing Defense went on to apply the methodology to a proprietary memory/bus interface device [27] developed for use in Boeing's Fault-tolerant Embedded Processor (FTEP). ORA continued work with Draper on the FTPP, applying a prototype of their VHDL verification system <ref> [3] </ref> to the VHDL designs of the Scoreboard circuit of the FTPP. The ORA VHDL tool was developed under other government funding but, like SRI's PVS system, the design of the tool was driven by the results of applied verifications funded under the Langley program.
Reference: [4] <author> Mark Bickford and Mandayam Srivas. </author> <title> Verification of the FtCayuga fault-tolerant microprocessor system (Volume 2: Formal specification and correctness theorems). </title> <type> NASA Contractor Report 187574, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI [55, 50, 59]; Nqthm, the Boyer Moore prover, at CLI [1, 2, 45, 44, 68]; and Clio and the Penelope Ada verification system at ORA <ref> [61, 4, 63, 30, 62] </ref>. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [5] <author> Bishop Brock and Warren A. Hunt, Jr. </author> <title> Report on the formal specification and partial verification of the VIPER microprocessor. </title> <type> NASA Contractor Report 187540, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: Butler and Sjogren had performed a study of the RSRE hardware verification methodology in SRI's EHDM prover [12]. The first work performed by CLI was an evaluation of the overall RSRE methodology <ref> [5] </ref>. The first tasks undertaken toward the development of a basis of formally verified fault-tolerant algorithms were a continuation of earlier work initiated in 3 the SIFT project [28]. SIFT had been developed at SRI under Langley spon-sorship.
Reference: [6] <author> Ricky W. Butler. </author> <title> NASA Langley's research program in formal methods. </title> <booktitle> In 6th Annual Conference on Computer Assurance (COMPASS 91), </booktitle> <address> Gaithers-burg, MD, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: Our ultimate goal was to transfer the methods into the hands of engineers in industry. The overall program has been described in some detail elsewhere; both from the programmatic point of view of NASA Langley <ref> [7, 6] </ref>, and from the perspective of SRI researchers who have been partners in the effort from the beginning [46]. An up-to-date account of the program can be found at the NASA Lan-gley Formal Methods Home Page on the World-Wide Web.
Reference: [7] <author> Ricky W. Butler, James L. Caldwell, Victor A. Carreno, C. Michael Hol-loway, Paul S. Miner, and Ben L. Di Vito. </author> <title> NASA Langley's research and technology transfer program in formal methods. </title> <booktitle> In Tenth Annual Conference on Computer Assurance (COMPASS 95), </booktitle> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Our ultimate goal was to transfer the methods into the hands of engineers in industry. The overall program has been described in some detail elsewhere; both from the programmatic point of view of NASA Langley <ref> [7, 6] </ref>, and from the perspective of SRI researchers who have been partners in the effort from the beginning [46]. An up-to-date account of the program can be found at the NASA Lan-gley Formal Methods Home Page on the World-Wide Web.
Reference: [8] <author> Ricky W. Butler, James L. Caldwell, and Ben L. Di Vito. </author> <title> Design strategy for a formally verified reliable computing platform. </title> <booktitle> In 6th Annual Conference on Computer Assurance (COMPASS 91), </booktitle> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL. During that time we were primarily occupied with the design and verification (in EHDM) of a fault-tolerant architecture designed to withstand transient faults <ref> [23, 8, 22, 21, 20, 41] </ref>. Generalizing our models, Rushby at SRI verified transient recovery for an abstract architecture [48, 49]. Through Langley support, researchers at Boeing worked with Carl Levitt's group at the University of California at Davis. The Davis group worked in the HOL system.
Reference: [9] <author> Ricky W. Butler and Ben L. Di Vito. </author> <title> Formal design and verification of a reliable computing platform for real-time control (Phase 2 results). </title> <type> NASA Technical Memorandum 104196, </type> <month> January </month> <year> 1992. </year>
Reference-contexts: Portions of the Space Shuttle flight control requirements and change requests have formalized and analyzed [25, 18, 24, 17, 19]. At Langley, NASA researchers continued work on refining the fault-tolerant architecture developed earlier by specifying lower levels of the hierarchy and formally proving they are implementations via refinement mappings <ref> [9, 10] </ref>. Miner continued work on extending the SRI clock-synchronization results and implementing a circuit in silicon [40, 43]. Models of the IEEE floating point standards were formalized in HOL and PVS [14, 42, 15].
Reference: [10] <author> Ricky W. Butler, Ben L. Di Vito, and C. Michael Holloway. </author> <title> Formal design and verification of a reliable computing platform for real-time control (Phase 3 results). </title> <type> NASA Technical Memorandum 109140, </type> <month> August </month> <year> 1994. </year> <month> 10 </month>
Reference-contexts: Portions of the Space Shuttle flight control requirements and change requests have formalized and analyzed [25, 18, 24, 17, 19]. At Langley, NASA researchers continued work on refining the fault-tolerant architecture developed earlier by specifying lower levels of the hierarchy and formally proving they are implementations via refinement mappings <ref> [9, 10] </ref>. Miner continued work on extending the SRI clock-synchronization results and implementing a circuit in silicon [40, 43]. Models of the IEEE floating point standards were formalized in HOL and PVS [14, 42, 15].
Reference: [11] <author> Ricky W. Butler and George B. Finelli. </author> <title> The infeasibility of quantifying the reliability of life-critical real-time software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(1) </volume> <pages> 3-12, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: The strict reliability requirements and the subtlety and complexity of the interactions between the distributed components rule out testing as the primary means of assurance. Indeed, for software, testing can not establish reliability to these levels <ref> [11] </ref>. Based on this argument, the most intellectually defensible method to achieve the high levels of reliability (but not to quantify them) seemed to rest with logical and deductive methods: formal methods.
Reference: [12] <author> Ricky W. Butler and Jon A. Sjogren. </author> <title> Hardware proofs using EHDM and the RSRE verification methodology. </title> <type> NASA Technical Memorandum 100669, </type> <month> December </month> <year> 1988. </year>
Reference-contexts: Butler and Sjogren had performed a study of the RSRE hardware verification methodology in SRI's EHDM prover <ref> [12] </ref>. The first work performed by CLI was an evaluation of the overall RSRE methodology [5]. The first tasks undertaken toward the development of a basis of formally verified fault-tolerant algorithms were a continuation of earlier work initiated in 3 the SIFT project [28].
Reference: [13] <author> Ricky W. Butler, (ed.). </author> <booktitle> NASA formal methods workshop 1990. NASA Conference Publication 10052, </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: Under partial sponsorship of this project Windley developed his HOL theory of generic interpreters and formalized a method for composing verified devices into systems [65, 66, 67]. During this early period the Langley formal methods group sponsored two workshops. The first was held in August 1990 <ref> [13] </ref>. It served two purposes: to build cooperation and communication between geographically isolated members of the formal methods team; and to give them an overview of the state-of-the-practice in digital flight control by a series of talks from industry.
Reference: [14] <author> Victor A. Carre~no. </author> <title> Interpretation of IEEE-854 floating-point standard and definition in the HOL system. </title> <month> September </month> <year> 1995. </year>
Reference-contexts: Miner continued work on extending the SRI clock-synchronization results and implementing a circuit in silicon [40, 43]. Models of the IEEE floating point standards were formalized in HOL and PVS <ref> [14, 42, 15] </ref>. A third workshop was held in May of 1995 reporting on work completed to date [31]. 7 3.4 New projects New projects starting in 1996 include the development of a formal model for time, space, and I/O partitioning intended for application to integrated avionics computing systems.
Reference: [15] <author> Victor A. Carre~no and Paul S. Miner. </author> <title> Specification of the IEEE-854 floating-point standard in HOL and PVS. To be presented at the 1995 International Workshop on Higher Order Logic Theorem Proving and its Applications, </title> <address> September 11-14, Aspen Grove, Utah, USA, </address> <note> as a track B paper and included in supplemental proceedings, </note> <year> 1995. </year>
Reference-contexts: Miner continued work on extending the SRI clock-synchronization results and implementing a circuit in silicon [40, 43]. Models of the IEEE floating point standards were formalized in HOL and PVS <ref> [14, 42, 15] </ref>. A third workshop was held in May of 1995 reporting on work completed to date [31]. 7 3.4 New projects New projects starting in 1996 include the development of a formal model for time, space, and I/O partitioning intended for application to integrated avionics computing systems.
Reference: [16] <institution> Computer Resource Management Inc. </institution> <note> In Digital Systems Validation Handbook volume III, number DOT/FAA/CT-88/10. FAA. </note>
Reference-contexts: Under FAA sponsorship through the Langley program, Rushby of SRI wrote an extended report on the application of formal methods to validation of digital systems [51]. This huge document was condensed into a chapter on formal methods [54] for the FAA Digital Systems Validation Handbook <ref> [16] </ref>. Also, in 1992, a team was formed to study applications and transfer of formal methods into NASA space programs. The team consists of researchers and practitioners from Langley, Johnson Space Center, the Jet Propulsion Lab, Loral Space Information Systems, SRI, and VGYAN.
Reference: [17] <author> Judith Crow and Ben L. Di Vito. </author> <title> Formalizing space shuttle software requirements. </title> <booktitle> In Workshop on Formal Methods in Software Practice (FMSP '96), </booktitle> <pages> pages 40-48, </pages> <address> San Diego, California, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: The team consists of researchers and practitioners from Langley, Johnson Space Center, the Jet Propulsion Lab, Loral Space Information Systems, SRI, and VGYAN. Portions of the Space Shuttle flight control requirements and change requests have formalized and analyzed <ref> [25, 18, 24, 17, 19] </ref>. At Langley, NASA researchers continued work on refining the fault-tolerant architecture developed earlier by specifying lower levels of the hierarchy and formally proving they are implementations via refinement mappings [9, 10]. <p> The advantage of formal specification has been observed in nearly all of our projects and agrees with experiences gained elsewhere. It should be remarked that specifications in PVS can be type-checked 3 and they usually are. The transition from reading to writing formal specifications can be difficult <ref> [17] </ref>; but there is no reason to believe this obstacle can not be overcome through training. Langley researchers recently gave a PVS training session for Loral requirements engineers that was well received. Miller reports [64] the Collins engineers had no difficulties in learning the PVS language.
Reference: [18] <author> Judy Crow. </author> <title> Finite-State Analysis of Space Shuttle Contingency Guidance Requirements. </title> <type> Technical Report SRI-CSL-95-17, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> December </month> <year> 1995. </year> <note> Also forthcoming as a NASA Contractor Report for Task NAS1-20334. </note>
Reference-contexts: The team consists of researchers and practitioners from Langley, Johnson Space Center, the Jet Propulsion Lab, Loral Space Information Systems, SRI, and VGYAN. Portions of the Space Shuttle flight control requirements and change requests have formalized and analyzed <ref> [25, 18, 24, 17, 19] </ref>. At Langley, NASA researchers continued work on refining the fault-tolerant architecture developed earlier by specifying lower levels of the hierarchy and formally proving they are implementations via refinement mappings [9, 10].
Reference: [19] <author> Ben L. Di Vito. </author> <title> Formalizing new navigation requirements for nasa's space shuttle. </title> <booktitle> In Formal Methods Europe (FME '96), </booktitle> <address> Oxford, England, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: The team consists of researchers and practitioners from Langley, Johnson Space Center, the Jet Propulsion Lab, Loral Space Information Systems, SRI, and VGYAN. Portions of the Space Shuttle flight control requirements and change requests have formalized and analyzed <ref> [25, 18, 24, 17, 19] </ref>. At Langley, NASA researchers continued work on refining the fault-tolerant architecture developed earlier by specifying lower levels of the hierarchy and formally proving they are implementations via refinement mappings [9, 10].
Reference: [20] <author> Ben L. Di Vito and Ricky W. Butler. </author> <title> Provable transient recovery for frame-based, fault-tolerant computing systems. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <address> Phoenix, Az, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL. During that time we were primarily occupied with the design and verification (in EHDM) of a fault-tolerant architecture designed to withstand transient faults <ref> [23, 8, 22, 21, 20, 41] </ref>. Generalizing our models, Rushby at SRI verified transient recovery for an abstract architecture [48, 49]. Through Langley support, researchers at Boeing worked with Carl Levitt's group at the University of California at Davis. The Davis group worked in the HOL system.
Reference: [21] <author> Ben L. Di Vito and Ricky W. Butler. </author> <title> Formal techniques for synchronized fault-tolerant systems. In Dependable Computing for Critical Applications 3, </title> <booktitle> Dependable Computing and Fault-Tolerant Systems, </booktitle> <pages> pages 279-306. </pages> <publisher> Springer Verlag, </publisher> <address> Wien New York, </address> <year> 1993. </year> <note> Also presented at 3rd IFIP Working Conference on Dependable Computing for Critical Applications, </note> <institution> Mondello, Sicily, Italy, </institution> <month> Sept. </month> <pages> 14-16, </pages> <year> 1992. </year> <month> 11 </month>
Reference-contexts: Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL. During that time we were primarily occupied with the design and verification (in EHDM) of a fault-tolerant architecture designed to withstand transient faults <ref> [23, 8, 22, 21, 20, 41] </ref>. Generalizing our models, Rushby at SRI verified transient recovery for an abstract architecture [48, 49]. Through Langley support, researchers at Boeing worked with Carl Levitt's group at the University of California at Davis. The Davis group worked in the HOL system.
Reference: [22] <author> Ben L. Di Vito, Ricky W. Butler, and James L. Caldwell. </author> <title> High level design proof of a reliable computing platform. In Dependable Computing for Critical Applications 2, </title> <booktitle> Dependable Computing and Fault-Tolerant Systems, </booktitle> <pages> pages 279-306. </pages> <publisher> Springer Verlag, </publisher> <address> Wien New York, </address> <year> 1992. </year>
Reference-contexts: Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL. During that time we were primarily occupied with the design and verification (in EHDM) of a fault-tolerant architecture designed to withstand transient faults <ref> [23, 8, 22, 21, 20, 41] </ref>. Generalizing our models, Rushby at SRI verified transient recovery for an abstract architecture [48, 49]. Through Langley support, researchers at Boeing worked with Carl Levitt's group at the University of California at Davis. The Davis group worked in the HOL system.
Reference: [23] <author> Ben L. Di Vito, Ricky W. Butler, and James L. Caldwell, </author> <title> II. Formal design and verification of a reliable computing platform for real-time control (Phase 1 results). </title> <type> NASA Technical Memorandum 102716, </type> <month> October </month> <year> 1990. </year>
Reference-contexts: Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL. During that time we were primarily occupied with the design and verification (in EHDM) of a fault-tolerant architecture designed to withstand transient faults <ref> [23, 8, 22, 21, 20, 41] </ref>. Generalizing our models, Rushby at SRI verified transient recovery for an abstract architecture [48, 49]. Through Langley support, researchers at Boeing worked with Carl Levitt's group at the University of California at Davis. The Davis group worked in the HOL system.
Reference: [24] <author> Ben L. Di Vito and Larry Roberts. </author> <title> Using Formal Methods to Assist in the Requirements Analysis of the Space Shuttle GPS Change Request. </title> <type> Contractor report, </type> <institution> NASA Langley Research Center, Hampton, VA, </institution> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: The team consists of researchers and practitioners from Langley, Johnson Space Center, the Jet Propulsion Lab, Loral Space Information Systems, SRI, and VGYAN. Portions of the Space Shuttle flight control requirements and change requests have formalized and analyzed <ref> [25, 18, 24, 17, 19] </ref>. At Langley, NASA researchers continued work on refining the fault-tolerant architecture developed earlier by specifying lower levels of the hierarchy and formally proving they are implementations via refinement mappings [9, 10].
Reference: [25] <author> John Kelly et. al. </author> <title> Formal Methods Demonstration Project for Space Applications Phase I Case Study: Space Shuttle Orbit DAP Jet Select. </title> <institution> Multi-Center NASA Team from Jet Propulsion Laboratory, Johnson Space Center, and Langley Research Center, </institution> <month> December </month> <year> 1993. </year> <title> NASA Code Q Final Report (Unnumbered). </title>
Reference-contexts: The team consists of researchers and practitioners from Langley, Johnson Space Center, the Jet Propulsion Lab, Loral Space Information Systems, SRI, and VGYAN. Portions of the Space Shuttle flight control requirements and change requests have formalized and analyzed <ref> [25, 18, 24, 17, 19] </ref>. At Langley, NASA researchers continued work on refining the fault-tolerant architecture developed earlier by specifying lower levels of the hierarchy and formally proving they are implementations via refinement mappings [9, 10].
Reference: [26] <author> FAA. </author> <title> System Design and Analysis. Advisory Circular AC 25.1309-1A, </title> <type> U.S. </type> <institution> Department of Transportation, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: The design and validation of digital flight controls pose challenging problems. To obtain FAA certification, systems must be built to ultra-reliable standards, a level of reliability quantified as an error rate of less than 10 10 per hour <ref> [26] </ref>. Individual hardware devices, including power supplies, can not be built to these levels of reliability, a fact that generates the requirement for fault-tolerant 1 http://atb-www.larc.nasa.gov/fm.html 1 designs based on redundant electrically isolated systems.
Reference: [27] <author> David A. Fura, Phillip J. Windley, and Gerald C. Cohen. </author> <title> Formal design specification of a processor interface unit. </title> <type> NASA Contractor Report 189698, </type> <month> November </month> <year> 1992. </year>
Reference-contexts: Boeing and Davis researchers collaborated to verify a set of hardware devices, including a microprocessor, a floating-point coprocessor based on a scaled down Intel 8087, a direct memory access (DMA) controller modeled on a scaled down Intel 8237A, and a set of memory-management units <ref> [47, 35, 56, 58, 57, 27] </ref>. Under partial sponsorship of this project Windley developed his HOL theory of generic interpreters and formalized a method for composing verified devices into systems [65, 66, 67]. During this early period the Langley formal methods group sponsored two workshops. <p> Using the techniques developed earlier, the U.C. Davis and Boeing group verified a microprocessor realizing the VIPER instruction set [36]. Within Boe-ing, Fura at Boeing Defense went on to apply the methodology to a proprietary memory/bus interface device <ref> [27] </ref> developed for use in Boeing's Fault-tolerant Embedded Processor (FTEP). ORA continued work with Draper on the FTPP, applying a prototype of their VHDL verification system [3] to the VHDL designs of the Scoreboard circuit of the FTPP.
Reference: [28] <editor> Jack Goldberg et al. </editor> <title> Development and analysis of the software implemented fault-tolerance (SIFT) computer. </title> <type> NASA Contractor Report 172146, </type> <year> 1984. </year>
Reference-contexts: The first work performed by CLI was an evaluation of the overall RSRE methodology [5]. The first tasks undertaken toward the development of a basis of formally verified fault-tolerant algorithms were a continuation of earlier work initiated in 3 the SIFT project <ref> [28] </ref>. SIFT had been developed at SRI under Langley spon-sorship. The SIFT fault-tolerant architecture was based on exact-match voting of results by synchronized replicated processors.
Reference: [29] <author> Li Gong, Patrick Lincoln, and John Rushby. </author> <title> Byzantine agreement with authentication: Observations and applications in tolerating hybrid and link faults. In Dependable Computing for Critical Applications (DCCA-5), </title> <address> Champaign, IL, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: This work lead to numerous publications as SRI modified and reverified previously verified algorithms under the new fault-model <ref> [37, 29, 38, 53, 52] </ref>. Aside from the development of the new algorithms, which was important work in its own right, this work has significance for formal methods because SRI was able to effectively reuse the artifacts of their earlier verifications.
Reference: [30] <author> David Guaspari. </author> <title> Formally specifying the logic of an automatic guidance controller. </title> <booktitle> In Ada-Europe Conference, </booktitle> <address> Athens, Greece, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI [55, 50, 59]; Nqthm, the Boyer Moore prover, at CLI [1, 2, 45, 44, 68]; and Clio and the Penelope Ada verification system at ORA <ref> [61, 4, 63, 30, 62] </ref>. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [31] <author> C. Michael Holloway. </author> <booktitle> Third NASA formal methods workshop 1995. NASA Conference Publication 10176, </booktitle> <year> 1995. </year>
Reference-contexts: Miner continued work on extending the SRI clock-synchronization results and implementing a circuit in silicon [40, 43]. Models of the IEEE floating point standards were formalized in HOL and PVS [14, 42, 15]. A third workshop was held in May of 1995 reporting on work completed to date <ref> [31] </ref>. 7 3.4 New projects New projects starting in 1996 include the development of a formal model for time, space, and I/O partitioning intended for application to integrated avionics computing systems.
Reference: [32] <author> Doug Hoover and Zewei Chen. Tbell: </author> <title> A mathematical tool for analyzing decision tables. </title> <type> NASA Contractor Report 195027, </type> <month> November </month> <year> 1994. </year> <note> Note: Tbell is now known as TableWise. </note>
Reference-contexts: They have been working to incorporate formal methods in the software development process at Honeywell. They started by constructing a formal model of a navigation system. More recently, the collaboration has resulted in the development of TableWise <ref> [32] </ref>, a tool based on a generalized BDD model used to analyze decision tables. Honeywell has applied it to the analysis of tables used in auto-pilot applications. The project continues into 1996 with ORA considering marketing a tool based on the prototype built for Honeywell.
Reference: [33] <author> Sally C. Johnson, C. Michael Holloway, and Ricky W. Butler. </author> <booktitle> Second NASA formal methods workshop 1992. NASA Conference Publication 10110, </booktitle> <month> November </month> <year> 1992. </year> <month> 12 </month>
Reference-contexts: The second workshop, held in August 1992, focused on presenting the body of results just cited to the aerospace community <ref> [33] </ref>. 3.2 Toward a model for technology transfer. The Boeing and Draper projects initiated in the first period represented our first efforts to actually transfer formal methods into external organizations. These projects formed a basis of comparison for future efforts.
Reference: [34] <author> Cliff B. Jones. </author> <title> Systematic Software Development using VDM. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <address> Hemel Hempstead, UK, 2nd edition, </address> <year> 1992. </year>
Reference-contexts: In this paper we concentrate on aspects of technology transfer and discuss the evolution of the strategy. 2 The NASA Approach to Formal Methods Historically, the NASA program has concentrated on the most rigorous application of the methods: machine checked proofs. Unlike some well-known European efforts <ref> [34, 60] </ref> where formal specification is emphasized |often without correctness proofs or with pencil and paper proofs but not ones checked by machine| the Langley program has concentrated on proofs of correctness checked by machine.
Reference: [35] <author> Sara Kalvala, Myla Archer, and Karl Levitt. </author> <title> A methodology for integrating hardware design and verification. </title> <booktitle> In ACM International Workshop on Formal Methods in VLSI Design, </booktitle> <address> Miami, FL, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: Boeing and Davis researchers collaborated to verify a set of hardware devices, including a microprocessor, a floating-point coprocessor based on a scaled down Intel 8087, a direct memory access (DMA) controller modeled on a scaled down Intel 8237A, and a set of memory-management units <ref> [47, 35, 56, 58, 57, 27] </ref>. Under partial sponsorship of this project Windley developed his HOL theory of generic interpreters and formalized a method for composing verified devices into systems [65, 66, 67]. During this early period the Langley formal methods group sponsored two workshops.
Reference: [36] <author> Karl Levitt and et. al. </author> <title> Formal verification of a microcoded VIPER microprocessor using HOL. </title> <type> NASA Contractor Report 4489, </type> <month> February </month> <year> 1993. </year>
Reference-contexts: The Draper and Boeing projects continued and a number of new projects and partnerships were initiated which were based on the emerging technology transfer model. Using the techniques developed earlier, the U.C. Davis and Boeing group verified a microprocessor realizing the VIPER instruction set <ref> [36] </ref>. Within Boe-ing, Fura at Boeing Defense went on to apply the methodology to a proprietary memory/bus interface device [27] developed for use in Boeing's Fault-tolerant Embedded Processor (FTEP).
Reference: [37] <author> Patrick Lincoln and John Rushby. </author> <title> A formally verified algorithm for inter-actice consistency under a hybrid fault model. </title> <type> NASA Contractor Report 4527, </type> <month> July </month> <year> 1993. </year>
Reference-contexts: This work lead to numerous publications as SRI modified and reverified previously verified algorithms under the new fault-model <ref> [37, 29, 38, 53, 52] </ref>. Aside from the development of the new algorithms, which was important work in its own right, this work has significance for formal methods because SRI was able to effectively reuse the artifacts of their earlier verifications.
Reference: [38] <author> Patrick Lincoln and John Rushby. </author> <title> Formal verification of an interactive consistency algorithm for the draper ftp architecture under a hybrid fault model. </title> <booktitle> In 1994 Computer Assurance (COMPASS) Conference, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: This work lead to numerous publications as SRI modified and reverified previously verified algorithms under the new fault-model <ref> [37, 29, 38, 53, 52] </ref>. Aside from the development of the new algorithms, which was important work in its own right, this work has significance for formal methods because SRI was able to effectively reuse the artifacts of their earlier verifications.
Reference: [39] <author> Steve Miller and Mandayam Srivas. </author> <title> Formal verification of the AAMP5 microprocessor: A case study in the industrial use of formal methods. </title> <booktitle> In WIFT'95 Workshop on Industrial-strength Formal Specification Techniques, </booktitle> <pages> pages 30-43, </pages> <address> Boca Raton, Florida USA, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: The collaboration between Srivas, now at SRI, and Miller of Collins resulted in the specification and a partial verification of the micro-code of the AAMP5 microprocessor <ref> [64, 39] </ref>. Butler and Miner at Langley constructed a PVS library for a bit-vector type in support of the effort. The most significant results from the effort were the discovery of two errors seeded by Collins engineers and of two other previously unknown errors [64].
Reference: [40] <author> Paul S. Miner. </author> <title> An extension to schneider's general paradigm for fault-tolerant clock synchronization. </title> <type> NASA Technical Memorandum 107634, </type> <institution> Langley Research Center, Hampton, VA, </institution> <year> 1992. </year>
Reference-contexts: At Langley, NASA researchers continued work on refining the fault-tolerant architecture developed earlier by specifying lower levels of the hierarchy and formally proving they are implementations via refinement mappings [9, 10]. Miner continued work on extending the SRI clock-synchronization results and implementing a circuit in silicon <ref> [40, 43] </ref>. Models of the IEEE floating point standards were formalized in HOL and PVS [14, 42, 15].
Reference: [41] <author> Paul S. Miner. </author> <title> Verification of fault-tolerant clock synchronization systems. </title> <type> NASA Technical Paper 3349, </type> <month> November </month> <year> 1993. </year>
Reference-contexts: Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL. During that time we were primarily occupied with the design and verification (in EHDM) of a fault-tolerant architecture designed to withstand transient faults <ref> [23, 8, 22, 21, 20, 41] </ref>. Generalizing our models, Rushby at SRI verified transient recovery for an abstract architecture [48, 49]. Through Langley support, researchers at Boeing worked with Carl Levitt's group at the University of California at Davis. The Davis group worked in the HOL system.
Reference: [42] <author> Paul S. Miner. </author> <title> Defining the IEEE-854 floating-point standard in PVS. </title> <type> NASA Technical Memorandum 110167, </type> <institution> NASA, Langley Research Center, Hampton, VA, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Miner continued work on extending the SRI clock-synchronization results and implementing a circuit in silicon [40, 43]. Models of the IEEE floating point standards were formalized in HOL and PVS <ref> [14, 42, 15] </ref>. A third workshop was held in May of 1995 reporting on work completed to date [31]. 7 3.4 New projects New projects starting in 1996 include the development of a formal model for time, space, and I/O partitioning intended for application to integrated avionics computing systems.
Reference: [43] <author> Paul S. Miner, Peter A. Padilla, and Wilfredo Torres. </author> <title> A provably correct design of a fault-tolerant clock synchronization circuit. </title> <booktitle> In 11th Digital Avionics Systems Conference, </booktitle> <pages> pages 341-346, </pages> <address> Seattle, WA, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: At Langley, NASA researchers continued work on refining the fault-tolerant architecture developed earlier by specifying lower levels of the hierarchy and formally proving they are implementations via refinement mappings [9, 10]. Miner continued work on extending the SRI clock-synchronization results and implementing a circuit in silicon <ref> [40, 43] </ref>. Models of the IEEE floating point standards were formalized in HOL and PVS [14, 42, 15].
Reference: [44] <author> J Strother Moore. </author> <title> A formal model of asynchronous communication and its use in mechanically verifying a biphase mark protocol. </title> <type> NASA Contractor Report 4433, </type> <month> June </month> <year> 1992. </year>
Reference-contexts: In the first years of the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI [55, 50, 59]; Nqthm, the Boyer Moore prover, at CLI <ref> [1, 2, 45, 44, 68] </ref>; and Clio and the Penelope Ada verification system at ORA [61, 4, 63, 30, 62]. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [45] <author> J Strother Moore. </author> <title> Mechanically verified hardware implementing an 8-bit parallel io byzantine agreement processor. </title> <type> NASA Contractor Report 189588, </type> <month> April </month> <year> 1992. </year> <month> 13 </month>
Reference-contexts: In the first years of the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI [55, 50, 59]; Nqthm, the Boyer Moore prover, at CLI <ref> [1, 2, 45, 44, 68] </ref>; and Clio and the Penelope Ada verification system at ORA [61, 4, 63, 30, 62]. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [46] <author> Sam Owre, John Rushby, , Natarajan Shankar, and Friedrich von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of pvs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: The overall program has been described in some detail elsewhere; both from the programmatic point of view of NASA Langley [7, 6], and from the perspective of SRI researchers who have been partners in the effort from the beginning <ref> [46] </ref>. An up-to-date account of the program can be found at the NASA Lan-gley Formal Methods Home Page on the World-Wide Web. <p> By concentrating attention on results instead of tools we believe we have had more impact than we might have had otherwise. In fact, SRI has attributed the experience gained under our program with a significant influence on the design of their PVS system <ref> [46] </ref>. 3 Evolution of a Technology Transfer Model Our strategy for technology transfer has evolved as the program has matured. We can divide the program into two periods.
Reference: [47] <author> Jing Pan and Karl Levitt. </author> <title> Towards a formal specification of the IEEE floating-point standard with application to the verification of floating-point coprocessors. </title> <booktitle> In 24th Asilomar Conference on Signals, Systems & Computers, Monterrey, </booktitle> <address> CA., </address> <month> November </month> <year> 1990. </year>
Reference-contexts: Boeing and Davis researchers collaborated to verify a set of hardware devices, including a microprocessor, a floating-point coprocessor based on a scaled down Intel 8087, a direct memory access (DMA) controller modeled on a scaled down Intel 8237A, and a set of memory-management units <ref> [47, 35, 56, 58, 57, 27] </ref>. Under partial sponsorship of this project Windley developed his HOL theory of generic interpreters and formalized a method for composing verified devices into systems [65, 66, 67]. During this early period the Langley formal methods group sponsored two workshops.
Reference: [48] <author> John Rushby. </author> <title> Formal specification and verification of a fault-masking and transient-recovery model for digital flight-control systems. </title> <type> NASA Contractor Report 4384, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: During that time we were primarily occupied with the design and verification (in EHDM) of a fault-tolerant architecture designed to withstand transient faults [23, 8, 22, 21, 20, 41]. Generalizing our models, Rushby at SRI verified transient recovery for an abstract architecture <ref> [48, 49] </ref>. Through Langley support, researchers at Boeing worked with Carl Levitt's group at the University of California at Davis. The Davis group worked in the HOL system.
Reference: [49] <author> John Rushby. </author> <title> Formal specification and verification of a fault-masking and transient-recovery model for digital flight-control systems. In Second International Symposium on Formal Techniques in Real Time and Fault Tolerant Systems, </title> <booktitle> volume 571 of Lecture Notes in Computer Science, </booktitle> <pages> pages 237-258. </pages> <publisher> Springer Verlag, </publisher> <address> Nijmegen, The Netherlands, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: During that time we were primarily occupied with the design and verification (in EHDM) of a fault-tolerant architecture designed to withstand transient faults [23, 8, 22, 21, 20, 41]. Generalizing our models, Rushby at SRI verified transient recovery for an abstract architecture <ref> [48, 49] </ref>. Through Langley support, researchers at Boeing worked with Carl Levitt's group at the University of California at Davis. The Davis group worked in the HOL system.
Reference: [50] <author> John Rushby. </author> <title> Formal verification of an oral messages algorithm for interactive consistency. </title> <type> NASA Contractor Report 189704, </type> <month> October </month> <year> 1992. </year>
Reference-contexts: As such, they are often the ones engineers have most difficulty convincing themselves they've got right. In the first years of the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI <ref> [55, 50, 59] </ref>; Nqthm, the Boyer Moore prover, at CLI [1, 2, 45, 44, 68]; and Clio and the Penelope Ada verification system at ORA [61, 4, 63, 30, 62]. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [51] <author> John Rushby. </author> <title> Formal methods and digital systems validation for airborne systems. </title> <type> NASA Contractor Report 4551, </type> <month> December </month> <year> 1993. </year>
Reference-contexts: Under FAA sponsorship through the Langley program, Rushby of SRI wrote an extended report on the application of formal methods to validation of digital systems <ref> [51] </ref>. This huge document was condensed into a chapter on formal methods [54] for the FAA Digital Systems Validation Handbook [16]. Also, in 1992, a team was formed to study applications and transfer of formal methods into NASA space programs.
Reference: [52] <author> John Rushby. </author> <title> A formally verified algorithm clock sychronization under a hybrid fault model. </title> <booktitle> In ACM Principles of Distributed Computing '94, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: This work lead to numerous publications as SRI modified and reverified previously verified algorithms under the new fault-model <ref> [37, 29, 38, 53, 52] </ref>. Aside from the development of the new algorithms, which was important work in its own right, this work has significance for formal methods because SRI was able to effectively reuse the artifacts of their earlier verifications.
Reference: [53] <author> John Rushby. </author> <title> Improvements in the formally verified analysis of the interactive convergence clock synchronization algorithm and its extension to a hybrid fault model. </title> <type> NASA Contractor Report 194970, </type> <year> 1994. </year>
Reference-contexts: This work lead to numerous publications as SRI modified and reverified previously verified algorithms under the new fault-model <ref> [37, 29, 38, 53, 52] </ref>. Aside from the development of the new algorithms, which was important work in its own right, this work has significance for formal methods because SRI was able to effectively reuse the artifacts of their earlier verifications.
Reference: [54] <author> John Rushby. </author> <title> Formal methods and their role in digital systems validation for airborne systems. </title> <type> NASA Contractor Report 4673, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: Under FAA sponsorship through the Langley program, Rushby of SRI wrote an extended report on the application of formal methods to validation of digital systems [51]. This huge document was condensed into a chapter on formal methods <ref> [54] </ref> for the FAA Digital Systems Validation Handbook [16]. Also, in 1992, a team was formed to study applications and transfer of formal methods into NASA space programs.
Reference: [55] <author> John Rushby and Friedrich von Henke. </author> <title> Formal verification of a fault-tolerant clock synchronization algorithm. </title> <type> NASA Contractor Report 4239, </type> <month> June </month> <year> 1989. </year>
Reference-contexts: As such, they are often the ones engineers have most difficulty convincing themselves they've got right. In the first years of the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI <ref> [55, 50, 59] </ref>; Nqthm, the Boyer Moore prover, at CLI [1, 2, 45, 44, 68]; and Clio and the Penelope Ada verification system at ORA [61, 4, 63, 30, 62]. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [56] <author> Thomas Schubert and Karl Levitt. </author> <title> Verification of memory management units. </title> <booktitle> In Second IFIP Conference on Dependable Computing For Critical Applications, </booktitle> <pages> pages 115-123, </pages> <address> Tucson, Arizona, </address> <month> February </month> <year> 1991. </year>
Reference-contexts: Boeing and Davis researchers collaborated to verify a set of hardware devices, including a microprocessor, a floating-point coprocessor based on a scaled down Intel 8087, a direct memory access (DMA) controller modeled on a scaled down Intel 8237A, and a set of memory-management units <ref> [47, 35, 56, 58, 57, 27] </ref>. Under partial sponsorship of this project Windley developed his HOL theory of generic interpreters and formalized a method for composing verified devices into systems [65, 66, 67]. During this early period the Langley formal methods group sponsored two workshops.
Reference: [57] <author> Thomas Schubert, Karl Levitt, and Gerald C. Cohen. </author> <title> Towards composition of verified hardware devices. </title> <type> NASA Contractor Report 187504, </type> <month> November </month> <year> 1991. </year>
Reference-contexts: Boeing and Davis researchers collaborated to verify a set of hardware devices, including a microprocessor, a floating-point coprocessor based on a scaled down Intel 8087, a direct memory access (DMA) controller modeled on a scaled down Intel 8237A, and a set of memory-management units <ref> [47, 35, 56, 58, 57, 27] </ref>. Under partial sponsorship of this project Windley developed his HOL theory of generic interpreters and formalized a method for composing verified devices into systems [65, 66, 67]. During this early period the Langley formal methods group sponsored two workshops.
Reference: [58] <author> Thomas Schubert, Karl Levitt, and Gerald C. Cohen. </author> <title> Formal verification of a set of memory management units. </title> <type> NASA Contractor Report 189566, </type> <year> 1992. </year>
Reference-contexts: Boeing and Davis researchers collaborated to verify a set of hardware devices, including a microprocessor, a floating-point coprocessor based on a scaled down Intel 8087, a direct memory access (DMA) controller modeled on a scaled down Intel 8237A, and a set of memory-management units <ref> [47, 35, 56, 58, 57, 27] </ref>. Under partial sponsorship of this project Windley developed his HOL theory of generic interpreters and formalized a method for composing verified devices into systems [65, 66, 67]. During this early period the Langley formal methods group sponsored two workshops.
Reference: [59] <author> Natarajan Shankar. </author> <title> Mechanical verification of a schematic Byzantine clock synchronization algorithm. </title> <type> NASA Contractor Report 4386, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: As such, they are often the ones engineers have most difficulty convincing themselves they've got right. In the first years of the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI <ref> [55, 50, 59] </ref>; Nqthm, the Boyer Moore prover, at CLI [1, 2, 45, 44, 68]; and Clio and the Penelope Ada verification system at ORA [61, 4, 63, 30, 62]. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [60] <author> J.M. Spivey, </author> <title> editor. The Z Notation: A Reference Manual. </title> <publisher> Prentice Hall International Series in Computer Science. Prentice Hall, </publisher> <address> Hemel Hempstead, UK, </address> <year> 1989. </year>
Reference-contexts: In this paper we concentrate on aspects of technology transfer and discuss the evolution of the strategy. 2 The NASA Approach to Formal Methods Historically, the NASA program has concentrated on the most rigorous application of the methods: machine checked proofs. Unlike some well-known European efforts <ref> [34, 60] </ref> where formal specification is emphasized |often without correctness proofs or with pencil and paper proofs but not ones checked by machine| the Langley program has concentrated on proofs of correctness checked by machine.
Reference: [61] <author> Mandayam Srivas and Mark Bickford. </author> <title> Verification of the FtCayuga fault-tolerant microprocessor system (Volume 1: A case study in theorem prover-based verification). </title> <type> NASA Contractor Report 4381, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI [55, 50, 59]; Nqthm, the Boyer Moore prover, at CLI [1, 2, 45, 44, 68]; and Clio and the Penelope Ada verification system at ORA <ref> [61, 4, 63, 30, 62] </ref>. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [62] <author> Mandayam Srivas and Mark Bickford. </author> <title> Moving formal methods into practice: Verifying the FTPP scoreboard: Phase 1 results. </title> <type> NASA Contractor Report 189607, </type> <month> May </month> <year> 1992. </year>
Reference-contexts: the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI [55, 50, 59]; Nqthm, the Boyer Moore prover, at CLI [1, 2, 45, 44, 68]; and Clio and the Penelope Ada verification system at ORA <ref> [61, 4, 63, 30, 62] </ref>. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [63] <author> Mandayam Srivas and Mark Bickford. </author> <title> Verification of a fault-tolerant property of a multiprocessor system. In Theorem Provers in Circuit Design: Theory, Practice and Experience, </title> <address> Nijmegen, The Netherlands, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI [55, 50, 59]; Nqthm, the Boyer Moore prover, at CLI [1, 2, 45, 44, 68]; and Clio and the Penelope Ada verification system at ORA <ref> [61, 4, 63, 30, 62] </ref>. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
Reference: [64] <author> Mandayam Srivas and Steve Miller. </author> <title> Formal verification of an avionics microprocessor. </title> <type> NASA Contractor Report 4682, </type> <month> July </month> <year> 1995. </year>
Reference-contexts: The collaboration between Srivas, now at SRI, and Miller of Collins resulted in the specification and a partial verification of the micro-code of the AAMP5 microprocessor <ref> [64, 39] </ref>. Butler and Miner at Langley constructed a PVS library for a bit-vector type in support of the effort. The most significant results from the effort were the discovery of two errors seeded by Collins engineers and of two other previously unknown errors [64]. <p> Butler and Miner at Langley constructed a PVS library for a bit-vector type in support of the effort. The most significant results from the effort were the discovery of two errors seeded by Collins engineers and of two other previously unknown errors <ref> [64] </ref>. The newly discovered errors were corrected before the first round of fabrication. The success of the collaboration has lead to a follow-on project to verify a new member of the AAMP microprocessor family. <p> Also, formal specifications have helped find many discrepancies and errors. The two non-seeded bugs found in the AAMP5 project were discovered during the specification phase <ref> [64] </ref>. The advantage of formal specification has been observed in nearly all of our projects and agrees with experiences gained elsewhere. It should be remarked that specifications in PVS can be type-checked 3 and they usually are. <p> The transition from reading to writing formal specifications can be difficult [17]; but there is no reason to believe this obstacle can not be overcome through training. Langley researchers recently gave a PVS training session for Loral requirements engineers that was well received. Miller reports <ref> [64] </ref> the Collins engineers had no difficulties in learning the PVS language. Formal proofs seem to pose another level of challenge; however, at Collins, engineers are using the PVS prover. In fact, Miller is quite optimistic and reported the Collins engineers had few difficulties learning to use the prover [64]. <p> reports <ref> [64] </ref> the Collins engineers had no difficulties in learning the PVS language. Formal proofs seem to pose another level of challenge; however, at Collins, engineers are using the PVS prover. In fact, Miller is quite optimistic and reported the Collins engineers had few difficulties learning to use the prover [64]. Typically, they have relied on powerful strategies developed for their particular application and they have applied them by modifying proofs previously developed at SRI.
Reference: [65] <author> Phillip J. Windley. </author> <title> Abstract hardware. </title> <booktitle> In ACM International Workshop on Formal Methods in VLSI Design, </booktitle> <address> Miami, FL, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: Under partial sponsorship of this project Windley developed his HOL theory of generic interpreters and formalized a method for composing verified devices into systems <ref> [65, 66, 67] </ref>. During this early period the Langley formal methods group sponsored two workshops. The first was held in August 1990 [13].
Reference: [66] <author> Phillip J. Windley, Karl Levitt, and Gerald C. Cohen. </author> <title> Formal proof of the AVM-1 microprocessor using the concept of generic interpreters. </title> <type> NASA Contractor Report 187491, </type> <month> March </month> <year> 1991. </year>
Reference-contexts: Under partial sponsorship of this project Windley developed his HOL theory of generic interpreters and formalized a method for composing verified devices into systems <ref> [65, 66, 67] </ref>. During this early period the Langley formal methods group sponsored two workshops. The first was held in August 1990 [13].
Reference: [67] <author> Phillip J. Windley, Karl Levitt, and Gerald C. Cohen. </author> <title> The formal verification of generic interpreters. </title> <type> NASA Contractor Report 4403, </type> <month> October </month> <year> 1991. </year>
Reference-contexts: Under partial sponsorship of this project Windley developed his HOL theory of generic interpreters and formalized a method for composing verified devices into systems <ref> [65, 66, 67] </ref>. During this early period the Langley formal methods group sponsored two workshops. The first was held in August 1990 [13].
Reference: [68] <author> William D. Young. </author> <title> Verifying the interactive convergence clock synchronization algorithm using the boyer-moore theorem prover. </title> <type> NASA Contractor Report 189649, </type> <month> April </month> <year> 1992. </year> <month> 15 </month>
Reference-contexts: In the first years of the program, formal specifications and verifications for these building blocks were undertaken and completed in the following systems: EHDM and later in PVS at SRI [55, 50, 59]; Nqthm, the Boyer Moore prover, at CLI <ref> [1, 2, 45, 44, 68] </ref>; and Clio and the Penelope Ada verification system at ORA [61, 4, 63, 30, 62]. Concurrently we gained experience at Langley using a number of the prover systems including EHDM, Nqthm, and HOL.
References-found: 68

