URL: http://simon.cs.vt.edu/~isenhour/thesis/sieve.ps
Refering-URL: http://simon.cs.vt.edu/sieve/
Root-URL: http://www.cs.vt.edu
Title: Sieve: A Java-Based Framework for Collaborative Component Composition  
Author: Philip L. Isenhour Marc Abrams Dennis Kafura Philip L. Isenhour 
Degree: Thesis submitted to the Faculty of the  in partial fulfillment of the requirements for the degree of Master of Science in Computer Science Clifford A. Shaffer, Chairman  
Keyword: Computer-Supported Cooperative Work, Java  
Note: Copyright 1998,  
Address: Virginia  
Date: February 11, 1998  
Affiliation: Virginia Polytechnic Institute and State University  Blacksburg,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. Abram and L. A. Treinish. </author> <title> An Extended Data-Flow Architecture for Data Analysis and Visualization. </title> <booktitle> In IEEE Visualization '95, </booktitle> <pages> pages 263-270. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1995. </year>
Reference-contexts: As such, it has at least some similarity to a wide range of existing visualization tools. 2.3.1 Modular Visualization Environments Modular visualization environments (MVEs) such as AVS [39], Data Explorer <ref> [1] </ref>, and apE [9] present the user with a set of modules representing sources of data, data manipulation processes, and image generation tools. These modules can then be linked to specify the flow of data to create a "program" for producing a visualization.
Reference: [2] <author> E. Alard and G. Bernard. </author> <title> Preemptive Process Migration in Networks of UNIX Workstations. </title> <booktitle> In Proceedings of the 7th International Symposium on Computer and Information Sciences, </booktitle> <pages> pages 129-140, </pages> <year> 1992. </year>
Reference-contexts: State information can be uploaded from an existing client and downloaded to the late-joiner. 3. Process migration techniques can be used to copy an existing client to a late-joiner. These techniques typically suspend an executing process and take a snapshot of the state and be havior <ref> [2] </ref>. The snapshot can then be restarted at a later time or on a different machine. Each of these approaches has distinct advantages and disadvantages. Event replay is relatively straightforward, but the event history may become impractically large for long sessions.
Reference: [3] <author> Niam Alper and Chuck Stein. </author> <title> Geospatial metadata querying and visualization on the www using Java (tm) applets. </title> <booktitle> In Proceedings of Visualization '96, </booktitle> <pages> pages 77-84. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: Applets for generating and delivering visualizations over the Web were among the first tools written in Java, and numerous packages are available that allow software developers to generate charts and graphs within Java applets and applications. For example, Alper, et al. <ref> [3] </ref> describe an applet that allows exploration of geospatial datasets. Data are retrieved from a remote server and the visual output is produced locally by the applet. Visual Numerics' suite of JWAVE applets communicate with a server that generates visualizations remotely [40].
Reference: [4] <author> K. Arnold and J. Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1996. </year>
Reference-contexts: Instead of working together to produce a static abstraction of a design in words or sketches, colleagues can collaboratively manipulate functional building-blocks to explore possible solutions. The World Wide Web and Sun Microsystems' Java programming language <ref> [4] </ref> provide an ideal foundation for constructing collaborative systems. The popularity of the Web has greatly increased the availability of high-bandwidth networking, making real-time collaboration feasible. In addition to network bandwidth, collaborators must also have compatible software. <p> Since Sieve began primarily as a visualization environment, we also examine related visualization systems. Finally, we give a brief overview of a set of object-oriented design patterns that are used in Sieve's design. 2.1 Java and JavaBeans Sun's Java programming language <ref> [4] </ref> is an object-oriented language with syntax similar to that of C++. Java is platform neutral, in that it can be compiled into bytecodes that can then be interpreted by "virtual machines" on many different platforms and operating systems.
Reference: [5] <author> James Begole, Craig A. Struble, and Clifford A. Shaffer. </author> <title> Leveraging Java Applets: Toward Collaboration Transparency in Java. </title> <journal> IEEE Internet Computing, </journal> <volume> 1(2) </volume> <pages> 57-64, </pages> <month> March-April </month> <year> 1997. </year>
Reference-contexts: At one end are centralized architectures, where the shared application is maintained in one physical location and the application display is distributed; at the other are replicated architectures, where the shared application is copied to each collaborator and change notification events (e.g., user input events) are distributed <ref> [5] </ref>. Replicated architectures generally require less network bandwidth, because only events are distributed instead of graphical display information. We have chosen to implement Sieve's collaboration support using a replicated architecture, partly because Internet users may be separated by relatively long network lags on low bandwidth connections.
Reference: [6] <author> James `Bo' Begole, Craig A. Struble, Clifford A. Shaffer, and Randall B. Smith. </author> <title> Transparent Sharing of Java Applets: A Replicated Approach. </title> <booktitle> In 1997 Conference on User Interface Software and Technology (UIST'97), </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: Collaboration transparency systems make existing single-user applications collaborative by using shared windowing mechanisms to provide multiple users with simultaneous access [21]. Java Applets Made Multi-user (JAMM) <ref> [6] </ref> provides shared windowing functionality for Java applets. Microsoft's NetMeeting allows collaborative use of many Windows-based applications [23]. Hewlett Packard's SharedX product provides similar functionality for UNIX machines running X-Windows [17].
Reference: [7] <author> CoVis: </author> <title> Learning Through Collaborative Visualization. </title> <address> URL: http://www.covis.nwu.edu/. </address>
Reference-contexts: This approach gives users on low-end machines access to powerful software through the Web, but limits the degree of interaction. In particular, direct-manipulation interfaces cannot be built using HTML forms. Similar systems even attempt to support collaborative analysis of visualizations. The CoVis project <ref> [7] </ref>, for example, has developed tools to support scientific visualization "in a collaborative context" for use primarily in K-12 science education. These tools allow visualizations to be accessed over the web by students communicating with teleconferencing software, but the visualizations themselves are not manipulated collaboratively.
Reference: [8] <author> T. Crowley, E. Baker, H. Forsdick, P. Milazzo, and R. Tomlinson. MMConf: </author> <title> An infrastructure for building shared applications. </title> <booktitle> In Proceedings of the Conference on Computer Supported Cooperative Work (CSCW '90), </booktitle> <address> Los Angeles, California, 1990. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Collaboration aware systems are constructed with the explicit intention of being used collabora-tively. The chief drawback of these systems is the extra effort required to design for collaboration. Chapter 2. Related Work 6 Although numerous toolkits for constructing these applications have been developed (for example, <ref> [8] </ref>, [18] and [13]), the overhead of learning and using these toolkits may be too great a hindrance to the development of large numbers of components for different problem domains. Sieve's approach to collaboration support lies somewhere between these two extremes.
Reference: [9] <author> D. Scott Dyer. </author> <title> A dataflow toolkit for visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(4) </volume> <pages> 60-69, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: As such, it has at least some similarity to a wide range of existing visualization tools. 2.3.1 Modular Visualization Environments Modular visualization environments (MVEs) such as AVS [39], Data Explorer [1], and apE <ref> [9] </ref> present the user with a set of modules representing sources of data, data manipulation processes, and image generation tools. These modules can then be linked to specify the flow of data to create a "program" for producing a visualization.
Reference: [10] <author> Colin Fidge. </author> <title> Timestamps in message-passing systems that preserve the partial ordering. </title> <journal> Aus-tralian Computer Science Communications, </journal> <volume> 10(1), </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: Since Sieve needs to be able to treat arbitrary objects as "black boxes," it cannot assume or require that components will behave this way. Another possible solution would make use of global clocks (e.g., Lamport's logical clocks [20] or vector clocks <ref> [10] </ref>) to detect potential conflicts. If a session received a message that was generated concurrently with a message that it had recently sent, the server's persistent record of the session could be consulted to determine if the new message should be discarded or not.
Reference: [11] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: These applets represent a potentially valuable source of module implementations for Java-based visualization environments. 2.4 Design Patterns Object-oriented design patterns are descriptions of high-level solutions to common design problems <ref> [11] </ref>. They provide general descriptions of compositions of communicating objects. These general compositions can be customized to solve specific problems. The terminology of design patterns appears throughout our design descriptions. A few of the patterns documented by Gamma et al. are particularly common in our work. <p> For example, listeners may be registered with Java window objects. When the window is hidden, exposed, or minimized, all registered listener objects are notified. Numerous other patterns have been documented (see <ref> [11] </ref> and [26]), but those listed above are among the most prevalent, both in the design of the system described in this thesis and in standard Java libraries. Chapter 3 A Sampling of Sieve-Based Applications Sieve has been designed to support a wide range of collaborative design activities. <p> Classes and interactions between classes are illustrated using the notation of the Unified Modeling Language (UML) [27]. A brief overview of the subset of UML used in this chapter is given in Appendix A. Where applicable, we also use the design pattern terminology of Gamma, et al. <ref> [11] </ref> to describe compositions of objects. The patterns that we use most commonly are described in Section 2.4. 5.1 The Workbench Class The Workbench class implements a Sieve application's workspace. <p> The isObsoletedBy method will return true if the specified EditEvent is a PropertyEditEvent and the property names are equal. The EditEvent is an example of the Command design pattern <ref> [11] </ref>. It encapsulates an operation such that another object can apply the operation without knowing exactly what it does. To apply the change represented by an EditEvent to another object, it is only necessary to ensure that the object passed to the applyChange method is of the appropriate type. <p> Conversely, the way in which a given type of component is created can be changed by registering a new Tool implementation for it. The ToolFactory class is an example of both the Singleton and Abstract Factory design patterns <ref> [11] </ref>. Tool implementations may be considered instances of the Builder creational design pattern, as they separate the construction of potentially complex objects from the representation of those objects. <p> The state data for each of these links would simply contain enough information to determine which terminals of the source and destination components are connected. This solution is an example of the Memento design pattern <ref> [11] </ref>. It preserves encapsulation while still allowing external objects to obtain a representation of the object's internal state. The state representation is opaque to the external object. It may store the state object, but cannot manipulate it in any way. <p> The Message class is an example of the Command design pattern <ref> [11] </ref>. It encapsulates an operation on the Workbench in such a way that the receiver of a Message object does not need to know anything about the operation. The receiver simply needs to have a WorkbenchController object Chapter 6. <p> Finally, the shutdown method will handle the details of cleanly logging out of a Sieve session. Chapter 6. Collaboration Support 68 The CollaborationSupport class is an example of the Facade design pattern <ref> [11] </ref>. It provides a simple interface to a complex subsystem, providing the functionality that most client applets or applications are likely to need. <p> Method removeNodes removes either a connection between two nodes or the component to which the two nodes are attached. Method findLoops solves the matrix and informs each component of the current at each of its nodes. The solver object is an example of the Singleton design pattern <ref> [11] </ref>. A single instance of this class exists, created on demand when the first circuit component is added. At that time, a Work-benchListener object is registered with the workbench.
Reference: [12] <author> S. Greenberg, M. Roseman, D. Webster, and R. Bohnet. </author> <title> Issues and experiences designing and implementing two group drawing tools. </title> <booktitle> In Proceedings of Hawaii International Conference on System Sciences, </booktitle> <volume> 4, </volume> <pages> pages 138-150. </pages> <publisher> IEEE Press, </publisher> <year> 1992. </year>
Reference-contexts: Early examples include a study of the GroupSketch and GroupDraw systems by Greenberg, et al. <ref> [12] </ref> Analysis of the fundamental ways in which groups use shared drawing spaces (computer-supported or traditional) has been conducted by Tang [38].
Reference: [13] <institution> GroupKit Home Page. </institution> <note> URL: http://www.cpsc.ucalgary.ca/projects/grouplab/groupkit/. 93 Chapter 8. Conclusions 94 </note>
Reference-contexts: Collaboration aware systems are constructed with the explicit intention of being used collabora-tively. The chief drawback of these systems is the extra effort required to design for collaboration. Chapter 2. Related Work 6 Although numerous toolkits for constructing these applications have been developed (for example, [8], [18] and <ref> [13] </ref>), the overhead of learning and using these toolkits may be too great a hindrance to the development of large numbers of components for different problem domains. Sieve's approach to collaboration support lies somewhere between these two extremes.
Reference: [14] <institution> Introduction to the General Social Survey. </institution> <address> URL: http://www.icpsr.umich.edu/GSS/about /gss/gssintro.htm, </address> <year> 1996. </year>
Reference-contexts: The design of the dataflow components is described in greater detail in Section 7.1. subset of the 1993 General Social Survey (GSS) <ref> [14] </ref> data by selecting only those responses from people who worked 40 or more hours per week, counting the occurrences of values for the "Number of Children" and "Highest Year of School Completed" variables, and then generating bar charts.
Reference: [15] <author> C. Gutwin, S. Greenberg, and M. Roseman. </author> <title> A Usability Study of Awareness Widgets in a Shared Workspace Groupware System. </title> <booktitle> In Computer-Supported Cooperative Work, </booktitle> <pages> pages 258-67. </pages> <publisher> ACM Press, </publisher> <year> 1996. </year>
Reference-contexts: A Sampling of Sieve-Based Applications 11 Workspace awareness (continuous knowledge of remote participants' interactions and locations <ref> [15] </ref>) is provided through two interface elements: telepointers and a multi-user overview of the workspace. A telepointer represents a remote user's mouse pointer position and thus provides location awareness. Collaborators can also use telepointers to gesture at items on the workspace to augment communication. <p> A telepointer represents a remote user's mouse pointer position and thus provides location awareness. Collaborators can also use telepointers to gesture at items on the workspace to augment communication. To provide additional workspace awareness information, Sieve uses a multi-user overview, or radar view <ref> [15] </ref>, of the workspace. The radar view displays a rectangle for each user, representing that user's viewport into the workspace and providing additional location information. Remote users' mouse positions are also indicated on the radar view.
Reference: [16] <author> B. Henderson-Sellers. </author> <title> OPEN Relationships | Compositions and Containments. </title> <journal> Journal of Object-Oriented Programming, </journal> <pages> pages 51-55, </pages> <month> November/December </month> <year> 1997. </year>
Reference-contexts: Although many forms of object relations may be categorized as aggregation (see <ref> [16] </ref> for an overview of types of object aggregations), we are primarily interested in containment. In particular, we would like to support linking and configuration of visual components contained within other visual components. Consider, for example, the block-and-plane simulation component shown in Figure 4.4.
Reference: [17] <author> Hewlett Packard: </author> <title> HP's World Class X Server Features- SharedX. </title> <address> URL: http://www.hp.- com/xwindow/viaFrames/features/sharedx.html. </address>
Reference-contexts: Java Applets Made Multi-user (JAMM) [6] provides shared windowing functionality for Java applets. Microsoft's NetMeeting allows collaborative use of many Windows-based applications [23]. Hewlett Packard's SharedX product provides similar functionality for UNIX machines running X-Windows <ref> [17] </ref>. Lauwers and Lantz discuss the shortcomings of SharedX and similar windowing systems with respect to use for application sharing [22]. Collaboration aware systems are constructed with the explicit intention of being used collabora-tively. The chief drawback of these systems is the extra effort required to design for collaboration.
Reference: [18] <author> Ralph D. Hill. </author> <title> Languages for the construction of multi-user multi-media synchronous (MUMMS) applications, </title> <year> 1992. </year>
Reference-contexts: Collaboration aware systems are constructed with the explicit intention of being used collabora-tively. The chief drawback of these systems is the extra effort required to design for collaboration. Chapter 2. Related Work 6 Although numerous toolkits for constructing these applications have been developed (for example, [8], <ref> [18] </ref> and [13]), the overhead of learning and using these toolkits may be too great a hindrance to the development of large numbers of components for different problem domains. Sieve's approach to collaboration support lies somewhere between these two extremes.
Reference: [19] <author> G. E. Krasner and S. T. Pope. </author> <title> A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk-80. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: This goal is quite similar to that of the Model/View/Controller (MVC) framework <ref> [19] </ref> for building user interfaces in Smalltalk. In this framework, the Model is the application's invisible representation of an interesting entity. The View is that entity's screen representation, and the Controller defines the response to user input.
Reference: [20] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: Since Sieve needs to be able to treat arbitrary objects as "black boxes," it cannot assume or require that components will behave this way. Another possible solution would make use of global clocks (e.g., Lamport's logical clocks <ref> [20] </ref> or vector clocks [10]) to detect potential conflicts. If a session received a message that was generated concurrently with a message that it had recently sent, the server's persistent record of the session could be consulted to determine if the new message should be discarded or not.
Reference: [21] <author> J. Chris Lauwers, Thomas A. Joseph, Keith A. Lantz, and Allyn L. Romanow. </author> <title> Replicated architectures for shared window systems: A critique. </title> <booktitle> In OIS90, Computer Mediated Work Environments, </booktitle> <pages> pages 249-260. </pages> <year> 1990. </year>
Reference-contexts: Collaboration transparency systems make existing single-user applications collaborative by using shared windowing mechanisms to provide multiple users with simultaneous access <ref> [21] </ref>. Java Applets Made Multi-user (JAMM) [6] provides shared windowing functionality for Java applets. Microsoft's NetMeeting allows collaborative use of many Windows-based applications [23]. Hewlett Packard's SharedX product provides similar functionality for UNIX machines running X-Windows [17].
Reference: [22] <author> J. Chris Lauwers and Keith A. Lantz. </author> <title> Collaboration awareness in support of collaboration transparency: Requirements for the next generation of shared window systems. </title> <booktitle> In Proceedings of ACM CHI'90 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 303-311, </pages> <year> 1990. </year>
Reference-contexts: Microsoft's NetMeeting allows collaborative use of many Windows-based applications [23]. Hewlett Packard's SharedX product provides similar functionality for UNIX machines running X-Windows [17]. Lauwers and Lantz discuss the shortcomings of SharedX and similar windowing systems with respect to use for application sharing <ref> [22] </ref>. Collaboration aware systems are constructed with the explicit intention of being used collabora-tively. The chief drawback of these systems is the extra effort required to design for collaboration. Chapter 2. <p> In this case, the most recent user to enter the workspace should see the same workspace state as the other users. In both cases, it is necessary to transfer the state of the shared workspace from the server to a new client upon connection. Lauwers and Lantz <ref> [22] </ref> describe three approaches for implementing state transfer in collaborative software: 1. A history of the events that led to the current state can be replayed to the late-joiner. 2. State information can be uploaded from an existing client and downloaded to the late-joiner. 3.
Reference: [23] <institution> Microsoft NetMeeting. </institution> <note> URL: http://www.microsoft.com/products/prodref/113 ov.htm. </note>
Reference-contexts: Collaboration transparency systems make existing single-user applications collaborative by using shared windowing mechanisms to provide multiple users with simultaneous access [21]. Java Applets Made Multi-user (JAMM) [6] provides shared windowing functionality for Java applets. Microsoft's NetMeeting allows collaborative use of many Windows-based applications <ref> [23] </ref>. Hewlett Packard's SharedX product provides similar functionality for UNIX machines running X-Windows [17]. Lauwers and Lantz discuss the shortcomings of SharedX and similar windowing systems with respect to use for application sharing [22]. Collaboration aware systems are constructed with the explicit intention of being used collabora-tively.
Reference: [24] <institution> Penumbra Software Super Mojo. </institution> <note> URL: http://www.penumbrasoftware.com. </note>
Reference-contexts: In the months since the first JavaBeans implementation was released by Sun, numerous other vendors have released JavaBeans-compliant builder tools. IBM, Borland, and Symantec have adapted existing products to take advantage of the JavaBeans standard, and new tools such as Penumbra Software's SuperMojo <ref> [24] </ref> have been developed specifically to support JavaBeans. The most obvious way in which Sieve differs from other JavaBeans-based builder tools is its integrated support for synchronous collaboration.
Reference: [25] <author> Constantinos Phanouriou and Marc Abrams. </author> <title> Transforming command-line driven systems to web applications. </title> <booktitle> In Proceedings of the Sixth International World Wide Web Conference, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: Visual Numerics' suite of JWAVE applets communicate with a server that generates visualizations remotely [40]. In this case a Java applet is used to drive the remote (non-Java) software and display the resulting image. Javamatic <ref> [25] </ref> generalizes the idea of providing Java-based interfaces for software running on remote servers. It supports automatic generation of applets that provide user interfaces to arbitrary Chapter 2. Related Work 8 command-line driven legacy applications.
Reference: [26] <author> Wolfgang Pree. </author> <title> Design Patterns for Object-Oriented Software Development. </title> <publisher> Addison Wesley, </publisher> <address> Wokingham, </address> <year> 1995. </year>
Reference-contexts: For example, listeners may be registered with Java window objects. When the window is hidden, exposed, or minimized, all registered listener objects are notified. Numerous other patterns have been documented (see [11] and <ref> [26] </ref>), but those listed above are among the most prevalent, both in the design of the system described in this thesis and in standard Java libraries. Chapter 3 A Sampling of Sieve-Based Applications Sieve has been designed to support a wide range of collaborative design activities.
Reference: [27] <institution> Rational Software Corporation UML Resource Center. </institution> <note> URL: http://www.rational.com/uml/. </note>
Reference-contexts: We rely on two standard notations to help describe the design of the Sieve framework, and later to describe the design of specific application components. Classes and interactions between classes are illustrated using the notation of the Unified Modeling Language (UML) <ref> [27] </ref>. A brief overview of the subset of UML used in this chapter is given in Appendix A. Where applicable, we also use the design pattern terminology of Gamma, et al. [11] to describe compositions of objects.
Reference: [28] <author> Randall B. Smith, Mario Wolczko, and David Ungar. </author> <title> From Kansas to Oz: Collaborative debugging when a shared world breaks. </title> <journal> Communications of the ACM, </journal> <volume> 40(4) </volume> <pages> 72-78, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: Shared text areas may be used for posting notes and labels, and simple drawing tools are provided. Gesturing is supported through telepointers. In addition to these actions, Sieve provides the opportunity for new kinds of action: composition and editing of active components. 2.2.3 Kansas Kansas <ref> [28] </ref> is a collaborative system that pioneered the concept of the collaborative workspace. It provides a large, flat surface that may be inhabited by multiple users. <p> Where these errors can be detected by Sieve code, it may be possible to simply remove the offending component and continue. A more interesting approach would allow expert users to explore the problem and perhaps re-load a revised version of the broken component. (Kansas <ref> [28] </ref> provides this type of functionality.) 8.3.2 Extensions to Sieve Collaborative Functionality Sieve's implementation currently assumes that all sessions have access to the same class definition files. For example, we currently attempt to load all classes via the virtual machine's default class-loader.
Reference: [29] <author> M. Stefik, D. G. Bobrow, G. Foster, S. Lanning, and D. Tatar. </author> <title> WYSIWIS Revised: Early Experiences with Multiuser Interfaces. </title> <journal> In ACM Transactions on Office Information Systems, </journal> <pages> pages 147-167. </pages> <publisher> ACM Press, </publisher> <month> April </month> <year> 1987. </year> <note> Chapter 8. Conclusions 95 </note>
Reference-contexts: Sieve supports flexible collaboration within the workspace and provides real-time information about participants' actions and locations. A range of collaboration styles are supported by providing location-relaxed WYSIWIS (What You See Is What I See) <ref> [29] </ref>, where collaborators may view and manipulate the same or different parts of the shared data simultaneously.
Reference: [30] <institution> Java Shared Data API. </institution> <note> URL: http://java.sun.com/people/richb/jsda, 1996. </note>
Reference-contexts: Collaboration Support 55 6.2 The Java Shared Data API Messaging between collaborating Sieve workspaces is provided by the Java Shared Data API (JSDA) from Sun <ref> [30] </ref>, an experimental class library designed to support collaborative applications. JSDA allows collaboration-aware Java objects to send data to some or all of the participants within a communications session. JSDA provides an abstraction of a communications session, to which client objects in different Java virtual machines may be attached.
Reference: [31] <editor> JavaBeans (tm). </editor> <address> URL: http://splash.javasoft.com/ beans/beans.100A.pdf, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: The latter simplifies interactions among Java objects on separate machines. Standard libraries also include support for building platform-independent user interfaces, streams-based access to both local and remote files, and serialization of objects for storage or transmission. Sun's JavaBeans <ref> [31] </ref> component architecture is a set of APIs intended to support the creation of Java components that can be composed together into applications by end users.
Reference: [32] <institution> HotJava (TM) HTML Component. </institution> <note> URL: http://java.sun.com/products/hotjava/bean/, 1997. </note>
Reference-contexts: Therefore, we generally do not address the design of these objects in detail. It may be useful for the reader to consider that under this decomposition, Sieve is somewhat analogous to Sun's HotJava bean <ref> [32] </ref>. This bean provides only the basic functionality for rendering HTML and similar data.
Reference: [33] <author> InfoBus Specification. </author> <note> URL: http://java.sun.com/beans/infobus/ibspec.html, 1997. </note>
Reference-contexts: Sieve Application Design 81 implemented as flows of objects in and out of JavaSpaces. Although still in the early phases of design only draft specifications are currently available this system may prove useful as infrastructure for dataflow between remote sources, possibly directed from a Sieve-based application. InfoBus <ref> [33] </ref> is a system for dynamic data exchange between JavaBeans. It is being developed by Lotus, and is currently in an early beta release. It provides an abstraction of a bus, to which components may connect in order to exchange information in a structured way.
Reference: [34] <author> Java AWT: </author> <title> Delegation Event Model. </title> <address> URL: http://java.sun.com/products/jdk/1.1/docs /guide/awt/designspec/events.html, </address> <year> 1997. </year>
Reference-contexts: Listeners are typically "attached" to sources by invoking add and remove methods, e.g. addMouse-Listener and removeMouseListener. In most cases, an arbitrary number of listeners may be attached to a source object. A more detailed explanation of the delegation event model may be found in <ref> [34] </ref>. The Workbench supports registration of listeners implementing three different interfaces: Work-benchListener, ToolListener, and SelectionListener. These listeners will be notified when interesting events occur within the Workbench or within a component on the Workbench.
Reference: [35] <editor> JavaBeans Activation Framework (JAF). </editor> <address> URL: http://www.javasoft.com/beans/glasgow /jaf.html, </address> <year> 1997. </year>
Reference-contexts: A developer can write a component whose sub-components may be individually edited or linked, but doing so requires considerable effort. Future versions of the JavaBeans architecture will likely have improved support for describing aggregate components. An early draft of the "Glasgow" specification <ref> [35] </ref> (JavaSoft's description of near-future JavaBeans enhancements) included a proposal for an "Object Aggregation/Delegation Model For Java and JavaBeans." Under this design, any object could implement a standard Aggregate interface and present a set of interfaces that it supported.
Reference: [36] <author> JavaSpace Specification. </author> <note> URL: http://chatsubo.javasoft.com/javaspaces/js-spec/index.html, 1997. </note>
Reference-contexts: JavaSpaces and InfoBus Two emerging technologies - JavaSpaces and InfoBus promise functionality that is at least similar to that of our TableView-based dataflow architecture. In this section we briefly review the differences and potential interactions between these systems and our dataflow components. Sun's forthcoming JavaSpace <ref> [36] </ref> system will provide a mechanism for distributed data persistence and exchange. It is intended to provide a generic mechanism for storing, querying, and retrieving typed groups of objects, or "entries" in JavaSpace terminology.
Reference: [37] <author> Swing: </author> <title> The Preliminary Specification. </title> <note> URL: http://java.sun.com/products/jfc/swingdoc-current/doc/index.html, 1997. </note>
Reference-contexts: As such, it can be easily adapted to similar interfaces used by third-party systems. The Swing TableModel The TableModel interface (shown in Figure 7.8) was introduced in recent versions of Sun's Swing interface toolkit <ref> [37] </ref>. This interface provides a description of behavior similar to that of the Table-View interface. TableModel is designed to provide data for spreadsheet-like widgets and similar table-based interface elements.
Reference: [38] <author> J. C. Tang. </author> <title> Findings from observational studies of collaborative work. </title> <journal> In International Journal of Man Machine Studies, </journal> <volume> volume 34, </volume> <pages> pages 143-160. </pages> <note> special edition, </note> <year> 1991. </year>
Reference-contexts: Early examples include a study of the GroupSketch and GroupDraw systems by Greenberg, et al. [12] Analysis of the fundamental ways in which groups use shared drawing spaces (computer-supported or traditional) has been conducted by Tang <ref> [38] </ref>. Tang's work identifies both the basic functions of a shared drawing space (storing information, expressing ideas, and mediating interaction) as well as the basic actions of users of such a space (listing, drawing, and gesturing). We have implemented components that support these basic actions on the Sieve workspace.
Reference: [39] <author> Craig Upson, Thomas A. Faulhaber, Jr., David Kamins, David Laidlaw, David Schlegel, Jef-frey Vroom, Robert Gurwitz, and Andries van Dam. </author> <title> The Application Visualization System: a Computational Environment for Scientific Visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(4) </volume> <pages> 30-42, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: As such, it has at least some similarity to a wide range of existing visualization tools. 2.3.1 Modular Visualization Environments Modular visualization environments (MVEs) such as AVS <ref> [39] </ref>, Data Explorer [1], and apE [9] present the user with a set of modules representing sources of data, data manipulation processes, and image generation tools. These modules can then be linked to specify the flow of data to create a "program" for producing a visualization. <p> Our goal was to produce a Java-based collaborative modular visualization environment (MVE), with functionality similar to existing MVEs such as AVS <ref> [39] </ref>. BeanBox provided an attractive starting point, since it supported the idea of a workspace onto which arbitrary objects could be placed and manipulated. The modifications that we made to the BeanBox introduced support for dataflow connections, added collaboration support, and altered the way that components were displayed and edited. <p> We conclude by describing the implementations of the core Sieve components that allow objects conforming to our dataflow API to be used collaboratively on the Sieve workspace. 7.1.1 Dataflow Network Structure The concept of generating visualizations by constructing networks of filters was originated by modular visualization environments such as AVS <ref> [39] </ref>. With these tools, a user can specify a series of operations to be performed on a dataset by connecting icons representing data sources, filtering operations, and visualizations. This network of sources, filters, and visualizations is then executed to produce output.
Reference: [40] <institution> Visual Numerics JWAVE. </institution> <note> URL: http://www.vni.com. </note>
Reference-contexts: For example, Alper, et al. [3] describe an applet that allows exploration of geospatial datasets. Data are retrieved from a remote server and the visual output is produced locally by the applet. Visual Numerics' suite of JWAVE applets communicate with a server that generates visualizations remotely <ref> [40] </ref>. In this case a Java applet is used to drive the remote (non-Java) software and display the resulting image. Javamatic [25] generalizes the idea of providing Java-based interfaces for software running on remote servers. It supports automatic generation of applets that provide user interfaces to arbitrary Chapter 2.
Reference: [41] <author> Jason D. Wood, Ken W. Brodlie, and Helen Wright. </author> <title> Visualization over the world wide web and its application to environmental data. </title> <booktitle> In Proceedings of Visualization '96, </booktitle> <pages> pages 81-86. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: This potential is being realized in a number of forms. Systems have been developed that provide an HTML forms interface to drive visualization software on a remote server. For example, Wood et al. describe such a system for visualizing environmental data through a web browser <ref> [41] </ref>. This approach gives users on low-end machines access to powerful software through the Web, but limits the degree of interaction. In particular, direct-manipulation interfaces cannot be built using HTML forms. Similar systems even attempt to support collaborative analysis of visualizations.
References-found: 41

