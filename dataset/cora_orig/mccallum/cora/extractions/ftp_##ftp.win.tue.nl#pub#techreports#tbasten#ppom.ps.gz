URL: ftp://ftp.win.tue.nl/pub/techreports/tbasten/ppom.ps.gz
Refering-URL: http://wwwis.win.tue.nl/~tbasten/publications.html
Root-URL: http://www.win.tue.nl
Title: PARSING PARTIALLY ORDERED MULTISETS  
Author: TWAN BASTEN Communicated by D. P. Bovet 
Keyword: partial orders partially ordered multisets pomset languages pomset grammars LR parsing PLR parsing concurrency theory  
Address: PO Box 513, NL-5600 MB, Eindhoven, The Netherlands  
Affiliation: Department of Mathematics and Computing Science, Eindhoven University of Technology,  
Note: International Journal of Foundations of Computer Science c World Scientific Publishing Company  
Email: email: tbasten@win.tue.nl  
Date: Received 2 November 1995 Revised 30 October 1996  
Abstract: A partially ordered multiset or pomset is a generalization of a string in which the total order has been relaxed to a partial order. Strings are often used as a model for sequential computation; pomsets are a natural model for parallel and distributed computation. By viewing pomsets as a generalization of strings, the question is raised whether concepts from language theory can be generalized to pomsets. An important area in the theory of languages is parsing theory. This paper develops the fundamentals of a parsing theory for pomsets, called PLR parsing. It is based on the LR-parsing technique, which is the most powerful deterministic parsing technique in language theory. The basic algorithm in the class of PLR parsing algorithms, the PLR(0) algorithm is explained in detail. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A.V. Aho, R. Sethi, and J.D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools (Addison-Wesley, </booktitle> <address> Reading, Massachusetts, </address> <year> 1988). </year>
Reference-contexts: The second operator is concurrent composition. Two pomsets are joined without adding any order constraints. An example of these two operators is shown in Figure 1. Definition 2.3. (Sequential and concurrent composition) Let M 0 = [V 0 ; 0 ; 0 ; 0 ] and M 1 = <ref> [V 1 ; 1 ; 1 ; 1 ] </ref> be pomsets. Without loss of generality, it is assumed that V 0 and V 1 are disjoint.
Reference: 2. <author> T. Basten. </author> <title> Hierarchical Event-Based Behavioral Abstraction in Interactive Distributed Debugging: A Theoretical Approach. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, Dept. of Math. and Comp. Sci., </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: So algorithms for recognizing pomsets can be used to recognize occurrences of behavioral patterns in a distributed computation. The automata-theoretic approach to recognizing behavioral patterns has already been investigated in some detail. 7 Unfortunately, the resulting formalism is fairly complex and suffers from some serious drawbacks (see Ref. <ref> [2, Section 4.0] </ref> for more details). Surprisingly, parsing techniques have not yet been investigated. Hence, this paper introduces a parsing technique for pomsets. This technique is not meant to be a ready-made solution to the problem of detecting behavioral patterns in distributed computations. <p> It is an extension to and a generalization of language theory. It remains for future work to apply this technique to the analysis of distributed programs. Some of the issues that still need to be addressed can be found in Ref. <ref> [2, Section 4.5] </ref>. In the remainder, some small examples are given to illustrate the use of the concepts of this paper in analyzing causality in distributed computations. <p> Without loss of generality, it is assumed that V 0 and V 1 are disjoint. Pomset M 2 = <ref> [V 2 ; 2 ; 2 ; 2 ] </ref> is the sequential composition of M 0 and M 1 , denoted M 0 ; M 1 , if and only if V 2 = V 0 [ V 1 , 2 = 0 [ 1 , 2 = 0 [ 1 <p> Therefore, in this section, LR (0) parsing is generalized to PLR (0) parsing which is the simplest form of PLR parsing. In Section 4.1, the process described in the previous section is formalized for simple context-free pomset languages and in case no lookahead symbols are used. In Ref. <ref> [2, Appendix B] </ref>, it is shown that the PLR (0) algorithm correctly decides whether an input belongs to some simple context-free pomset language. An outline of this proof is given in Appendix A. Section 4.2 investigates some grammar constructs for which the PLR (0) algorithm cannot always make a decision. <p> The complete proof is fairly elaborate and can be found in Ref. <ref> [2, Appendix B] </ref>. As already mentioned, an outline of the proof is given in Appendix A. Theorem 4.10. Let G be an SCFPG and let M be a pomset such that G is PLR (0) for M . Let us return to the example developed throughout this paper. Example 4.11. <p> One possibility is to include lookahead information per item; another possibility is to add lookahead information to each of the strings in the right-hand side of an item. The first possibility is studied in Ref. <ref> [2, Section 4.4] </ref>. An algorithm using a single looka-head symbol is proposed. It is a very straightforward combination of PLR (0) and LR (1) parsing. However, it should be noted that correctness of the algorithm remains to be shown. The algorithm solves some of the problems identified in this subsection.
Reference: 3. <author> C.N. Fischer and R.J. LeBlanc, Jr. </author> <title> Crafting a Compiler (The Benjamin/Cummings Publishing Company, </title> <address> Menlo Park, California, </address> <year> 1988). </year>
Reference: 4. <author> J.L. Gischer. </author> <title> Partial Orders and the Axiomatic Theory of Shu*e. </title> <type> Ph.D. Thesis, Technical Report STAN-CS-84-1033, </type> <institution> Stanford University, Dept. of Comp. Sci., Stanford, California, </institution> <year> 1984. </year>
Reference: 5. <author> J.L. Gischer. </author> <title> The Equational Theory of Pomsets. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 61(2,3):199-224, </address> <month> Nov. </month> <year> 1988. </year>
Reference: 6. <author> J. Grabowski. </author> <title> On Partial Languages. </title> <journal> Fundamenta Informaticae, </journal> <volume> 4(2) </volume> <pages> 427-498, </pages> <year> 1981. </year>
Reference-contexts: It can be used to prove the following theorem. The proof is fairly elaborate and is, therefore, omitted. It can be found in Refs. [4,5]. A similar result is proven in Ref. <ref> [6] </ref>. Theorem 2.6. A finite pomset is series-parallel if and only if it is N-free. Theorem 2.6 implies that a regular pomset language can only contain pomsets that are N-free. 5 Example 2.7.
Reference: 7. <author> W. Hseush and G.E. Kaiser. </author> <title> Moddeling Concurrency in Parallel Debugging. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 25(3) </volume> <pages> 11-20, </pages> <month> Mar. </month> <year> 1990. </year> <booktitle> Proceedings of the 2nd ACM/SIGPLAN Symposium on Principles & Practice of Parallel Programming, </booktitle> <address> Seattle, Washington, </address> <month> Mar. </month> <year> 1990. </year>
Reference: 8. <author> A. Kaldewaij. </author> <title> Programming: </title> <booktitle> The Derivation of Algorithms (Prentice-Hall, </booktitle> <address> New York, </address> <year> 1990). </year>
Reference: 9. <author> D.E. Knuth. </author> <title> On the Translation of Languages from Left to Right. </title> <journal> Information and Control, </journal> <volume> 8(6) </volume> <pages> 607-639, </pages> <year> 1965. </year>
Reference: 10. <author> L. Lamport. </author> <title> Time, Clocks and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <year> 1978. </year>
Reference: 11. <author> H.R. Lewis and C.H. Papadimitriou. </author> <booktitle> Elements of the Theory of Computation (Prentice-Hall, </booktitle> <address> Englewood Cliffs, New Jersey, </address> <year> 1981). </year>
Reference-contexts: Thus, theoretical issues are separated from details that are only important in the context of some application. The theory of strings and their languages has been investigated in great detail (see Ref. <ref> [11] </ref> among others). An important area of research has been the identification of meaningful classes of languages, such as regular and context free languages, 1 ways to describe these classes of languages, such as regular expressions and gram-mars, and recognizers for these languages, such as automata and parsers.
Reference: 12. <author> V.R. Pratt. </author> <booktitle> On the Composition of Processes. In Conference Record of the 9th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 213-223, </pages> <address> Albuquerque, New Mexico, </address> <month> Jan. </month> <year> 1982. </year>
Reference: 13. <author> V.R. Pratt. </author> <title> Modeling Concurrency with Partial Orders. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 15(1) </volume> <pages> 33-71, </pages> <month> Feb. </month> <year> 1986. </year>
Reference: 14. <author> R. Schwarz and F. Mattern. </author> <title> Detecting Causal Relationships in Distributed Computations: In Search of the Holy Grail. </title> <journal> Distributed Computing, </journal> <volume> 7(3) </volume> <pages> 149-174, </pages> <year> 1994. </year>
Reference: 15. <author> J. Winkowski. </author> <title> An Algebraic Characterization of the Behaviour of Non-sequential Systems. </title> <journal> Information Processing Letters, </journal> <volume> 6(4) </volume> <pages> 105-109, </pages> <year> 1977. </year>
Reference: 16. <author> J. Winkowski. </author> <title> An Algebraic Approach to Concurrency. </title> <editor> In J. Becvar, editor, </editor> <booktitle> Mathematical Foundations of Computer Science 1979, Proceedings, volume 74 of Lecture Notes in Computer Science, </booktitle> <pages> pages 523-532, </pages> <address> Olomouc, Czechoslovakia, Sept. 1979. </address> <publisher> (Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1979). </year> <month> 26 </month>
References-found: 16

