URL: http://www.cs.ucsb.edu/~schauser/papers/96-superweb.ps
Refering-URL: http://www.cs.ucsb.edu/~schauser/papers/
Root-URL: http://www.cs.ucsb.edu
Email: fberto,ibel,schauser,chrissg@cs.ucsb.edu  
Title: SuperWeb: Research Issues in Java-Based Global Computing  
Author: Albert D. Alexandrov, Maximilian Ibel, Klaus E. Schauser, and Chris J. Scheiman 
Keyword: Global computing, Internet, Java, supercomputing, secure computing, electronic commerce, encrypted computing  
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California, Santa Barbara  
Abstract: The Internet, in particular the World-Wide-Web, continues to expand at an amazing pace. We propose a new infrastructure, SuperWeb, to harness global resources, such as CPU cycles or disk storage, and make them available to every user on the Internet. SuperWeb has the potential for solving parallel supercomputing applications involving thousands of cooperating components on the Internet. However, we anticipate that initial implementations will be used inside large organizations with large heterogeneous Intranets. Our approach is based on recent advances in Internet connectivity and the implementation of safe distributed computing realized by languages such as Java. Our SuperWeb prototype consists of brokers, clients, and hosts. Hosts register a fraction of their computing resources (CPU time, memory, bandwidth, disk space) with resource brokers. Clients submit tasks that need to be executed. The broker maps client computations onto the registered hosts. We examine an economic model for trading computing resources, and discuss several technical challenges associated with such a global computing environment. 
Abstract-found: 1
Intro-found: 1
Reference: [AFK89] <author> M. Abadi, J. Feigenbaum, and J. Kilian. </author> <title> On Hiding Information from an Oracle. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 39, </volume> <year> 1989. </year>
Reference-contexts: This involves the realization of a comparison between two encrypted numbers and other primitives. We would also like to identify the amount of leaked information. Abadi et al. <ref> [AFK89] </ref> showed that it is unlikely hard problems can be encrypted without leaking at least some properties of the input data. 5.3 Real-Life Examples So far, the examples given covered only basic operations like summations, multiplications or (discrete) logarithms.
Reference: [ALN87] <author> N. Ahituv, Y. Lapid, and S. Neumann. </author> <title> Processing Encrypted Data. </title> <journal> Communications of the ACM, </journal> <volume> 30(9), </volume> <year> 1987. </year>
Reference-contexts: However, other, more complicated problems can be encrypted and decrypted with very small overhead. Feigenbaum gives an example for the hard problem of finding a discrete logarithm [Fei85]. A more detailed treatise for addition and multiplication of integers is given by Ahituv et al. <ref> [ALN87] </ref> and Yu and Yu [YY91]. The encryption presented by Yu and Yu [YY91] is linear and thus allows for easy repeated addition and multiplication of encrypted integers. The algorithm is based on a time-reversal diffusion process. The algorithms in [ALN87] is based on linear homomorphic functions. <p> and multiplication of integers is given by Ahituv et al. <ref> [ALN87] </ref> and Yu and Yu [YY91]. The encryption presented by Yu and Yu [YY91] is linear and thus allows for easy repeated addition and multiplication of encrypted integers. The algorithm is based on a time-reversal diffusion process. The algorithms in [ALN87] is based on linear homomorphic functions. Unfortunately, no proper security analysis is provided for any of those algorithms. Furthermore, it is not clear how one can devise a scheme for larger calculations that do not require frequent interaction between the client and the host.
Reference: [BBB96] <author> J. E. Baldeschwieler, R. D. Blumofe, and E. A. Brewer. </author> <title> ATLAS: An Infrastructure for Global Computing. </title> <booktitle> In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: These include ATLAS <ref> [BBB96] </ref>, Charlotte [BKKW96], and ParaWeb [BSST96]. All three projects are designed explicitly to run parallel applications and provide a specific programming model. None of the three include an economic model or way of providing incentives for participation.
Reference: [BJK + 95] <author> R. D. Blumofe, C. F. Joerg, B. C. Kuszmaul, C. E. Leiserson, K. H. Randall, and Y. Zhou. Cilk: </author> <title> An Efficient Multithreaded Runtime System. </title> <booktitle> In Proceedings of the 5th Symposium on Principles and Practice of Parallel Programming, </booktitle> <year> 1995. </year>
Reference-contexts: All three projects are designed explicitly to run parallel applications and provide a specific programming model. None of the three include an economic model or way of providing incentives for participation. ATLAS provides a global computing model based on Java and on the Cilk programming model <ref> [BJK + 95] </ref> which is restricted to tree-based computations. ATLAS ensures scalability using a hierarchy of managers (their equivalent of SuperWeb brokers). The current implementation uses native libraries which may raise some portability problems. Charlotte provides distributed shared memory and uses a fork-join model for parallel programming.
Reference: [BKKW96] <author> A. Baratloo, M. Karaul, Z. Kedem, and P. Wyckoff. </author> <title> Charlotte: Metacomputing on the Web. </title> <booktitle> In In Proceedings of the 9th Conference on Parallel and Distributed Computing Systems, </booktitle> <year> 1996. </year>
Reference-contexts: These include ATLAS [BBB96], Charlotte <ref> [BKKW96] </ref>, and ParaWeb [BSST96]. All three projects are designed explicitly to run parallel applications and provide a specific programming model. None of the three include an economic model or way of providing incentives for participation.
Reference: [BSST96] <author> T. Brecht, H. Sandhu, M. Shan, and J. Talbot. ParaWeb: </author> <title> Towards World-Wide Supercomputing. </title> <booktitle> In In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: These include ATLAS [BBB96], Charlotte [BKKW96], and ParaWeb <ref> [BSST96] </ref>. All three projects are designed explicitly to run parallel applications and provide a specific programming model. None of the three include an economic model or way of providing incentives for participation.
Reference: [CCI + 97] <author> P. Cappello, B. Christiansen, M. F. Ionescu, M. O. Neary, K. E. Schauser, and D. Wu. Javelin: </author> <title> Internet-Based Computing Using Java. </title> <type> Technical report, </type> <institution> University of California, Santa Barbara, </institution> <year> 1997. </year>
Reference-contexts: If these specializations are employed throughout a program, it will be hard, if not impossible to run it on other input or reverse-engineer it. 6 Measurements In this section we cite and briefly discuss performance numbers from a second prototype implementation of SuperWeb, called Javelin <ref> [CCI + 97] </ref>. For a more detailed presentation of the design issues, the performance results and the application used the reader is referred to [CCI + 97]. <p> other input or reverse-engineer it. 6 Measurements In this section we cite and briefly discuss performance numbers from a second prototype implementation of SuperWeb, called Javelin <ref> [CCI + 97] </ref>. For a more detailed presentation of the design issues, the performance results and the application used the reader is referred to [CCI + 97]. The experiments were conducted on a heterogeneous network of computers consisting of a 64-node Meiko CS-2, Sun UltraSparcs, and Pentium PCs connected by an SCI and 10 Mbit Ethernet networks. The tests were done with the Mersenne prime application.
Reference: [CD95] <author> H. Casanova and J. Dongarra. Netsolve: </author> <title> A Network Server for Solving Computational Science Problems. </title> <type> Technical Report CS-95-313, </type> <institution> University of Tennesee, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: Service requests: Instead of just providing requests for hosts, the broker could provide requests for particular services, such as "Run Fast Fourier Transform on this input", or "produce a graph of this data using Excel 4.0". (There already exist projects of this nature <ref> [CD95, NEO] </ref>.) This notion could also be embraced by sites serving the network computers mentioned above. 3 Economic Model The SuperWeb architecture makes computational resources a freely tradeable commodity that can be captured by a microeconomic model of supply and demand.
Reference: [CDL + 96] <author> K. M. Chandy, B. Dimitrov, H. Le, J. Mandleson, M. Richardson, A. Rifkin, P. A. G. Sivilotti, W. Tanaka, and L. Weisman. </author> <title> A World-Wide Distributed System Using Java and the Internet. </title> <booktitle> In In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. <ref> [CDL + 96] </ref> and Fox et al. [FF96] and studied in [Sar96].
Reference: [Com96] <editor> Electric Communities. </editor> <booktitle> The E programming language, </booktitle> <year> 1996. </year> <note> http://www.communities.com/e/epl.html. </note>
Reference-contexts: Other languages support: Currently we support only Java for client tasks. We can extend the implementation to allow arbitrary executables and languages. Also, we might make use of other mobile languages, like the "E" programming language <ref> [Com96] </ref> or the limbo language from the inferno operating system [LT], which promise better security features or faster execution. Verifying results: One important concern is the integrity of the result returned from an anonymous host to the client. <p> HotJava allows the user to select the strictness of the policy while Netscape prohibits all local file accesses and allows network connections only to the server from which the applet was downloaded. The "E" programming language <ref> [Com96] </ref>, which basically is a spiced-up version of Java, provides for a more general and flexible framework to define the capabilities of downloaded code. <p> Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too. Other languages worth considering, besides Java, include the "E" programming language <ref> [Com96] </ref> which is very similar to but offers a more flexible security framework than Java, and the Limbo programming language in the Inferno operating system [LT], which allows, among other features, for easier and more efficient just-in-time compilation.
Reference: [Fei85] <author> J. Feigenbaum. </author> <title> Encrypting Problem Instances | Or, ..., Can You Take Advantage of Someone Without Having to Trust Him? In Proceedings of the CRYPTO'85 Conference, </title> <type> 85. </type>
Reference-contexts: Indeed, Feigenbaum <ref> [Fei85] </ref> showed that there are many problems that are encryptable, i.e., allow for an encryption scheme sketched above. The main problems encountered are making the encryption/decryption process on the client side com-putationally inexpensive with respect to the actual computation, and to make malicious decryption on the host side computationally infeasible. <p> However, other, more complicated problems can be encrypted and decrypted with very small overhead. Feigenbaum gives an example for the hard problem of finding a discrete logarithm <ref> [Fei85] </ref>. A more detailed treatise for addition and multiplication of integers is given by Ahituv et al. [ALN87] and Yu and Yu [YY91]. The encryption presented by Yu and Yu [YY91] is linear and thus allows for easy repeated addition and multiplication of encrypted integers.
Reference: [Fer] <author> A. Ferrari. </author> <title> JPVM The Java Parallel Virtual Machine. </title> <address> http://www.cs.virginia.edu/~ajf2j/jpvm.html. </address>
Reference-contexts: Thus, they are limited in size and have a high administrative overhead. Although more recent systems, such as JPVM <ref> [Fer] </ref> and Java-MPI [Tay], overcome the heterogeneity of today's networks, they are not intended to execute on anonymous machines.
Reference: [FF96] <author> G. Fox and W. Furmanski. </author> <title> Towards Web/Java based High Performance Distributed Computing An Evolving Virtual Machine. </title> <booktitle> In In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. [CDL + 96] and Fox et al. <ref> [FF96] </ref> and studied in [Sar96].
Reference: [FJa] <institution> Free Java compilers. </institution> <address> http://webhackers.cygnus.com/ webhackers/projects/java.html. </address>
Reference-contexts: Recently, a large variety of Java performance boosters have become available <ref> [FJa] </ref>. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [GK92] <author> D. Gelernter and D. Kaminsky. </author> <title> Supercomputing out of Recycled Garbage: Preliminary Experience with Piranha. </title> <booktitle> In Proceedings of the Sixth ACM International Conference on Supercomputing, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: ParaWeb's Java Parallel Runtime System is implemented by modifying the Java interpreter to provide global shared memory and allow transparent instantia-tions of threads on remote machines. Earlier network computing approaches, such as Network of Workstations (NOW), PVM [Sun90], MPI [MPI94], Linda [WL88], CORBA [YD96], Piranha <ref> [GK92] </ref>, and Legion [GWF + 94] can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures used in the computation.
Reference: [GM95] <author> J. Gosling and H. McGilton. </author> <title> The Java Language Environment A Whitepaper. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: Ideally, the combined resources of millions of hosts on the Internet could be harnessed to form a powerful global computing infrastructure. Recent advances made in Internet connectivity, and the implementation of safe distributed computing embodied in languages such as Java <ref> [GM95] </ref> make this a promising and realizable goal. Architecture. We propose a design of a global computing infrastructure called SuperWeb. In our model there are three kinds of participants: brokers, clients and hosts. Brokers coordinate the supply and demand for computing resources. <p> With this approach, the client compiles its task to the machine independent language and then sends it to the host. The host executes the task either by interpreting it, or by compiling and then running it. Java <ref> [GM95] </ref> employs this approach. It defines both a high-level programming language for writing programs and a machine-independent virtual machine language, Java bytecode. Although it provides additional compatibility and security guarantees, it is not necessary to invent a new high-level language in order to ensure portability.
Reference: [Gut] <author> Y. S. Gutfreund. </author> <note> The WWWinda Orchestrator. http://info.gte.com/ftp/circus/Orchestrator/. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or have already been provided by other research groups (for example [SC96], [Ros] and <ref> [Gut] </ref>). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [GWF + 94] <author> A. S. Grimshaw, W. A. Wulf, J. C. French, A. C. Weaver, and P. F. Reynolds, Jr. </author> <title> A Synopsis of the Legion Project. </title> <type> Technical Report CS-94-20, </type> <institution> Department of Computer Science, University of Virginia, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: ParaWeb's Java Parallel Runtime System is implemented by modifying the Java interpreter to provide global shared memory and allow transparent instantia-tions of threads on remote machines. Earlier network computing approaches, such as Network of Workstations (NOW), PVM [Sun90], MPI [MPI94], Linda [WL88], CORBA [YD96], Piranha [GK92], and Legion <ref> [GWF + 94] </ref> can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures used in the computation.
Reference: [GWTB96] <author> I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications | Confining the Wily Hacker. </title> <booktitle> In Proceedings of the 1996 USENIX Security Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: Before running a piece of machine code, it is instrumented by placing safety checks in front of every potentially dangerous instruction. Later, at run time, if a safety check determines that the executable is about to access a prohibited resource, the perpetrating instruction is aborted. Other variations of SFI <ref> [GWTB96] </ref> do not modify the executable at all, but instead use operating system specific mechanisms to intercept and screen dangerous system calls. The methods discussed so far provide security for the host, using user-level methods that do not rely on mechanisms provided by the operating system. <p> The secure execution of arbitrary binaries has been recently addressed by at least two techniques. First, software-based fault isolation techniques [Sof95] guard against insecure system calls of programs by patching their binaries. Second, secure remote helper applications <ref> [GWTB96] </ref> use operating system tracing facilities to limit the use of resources that could violate system integrity. 8 Conclusion In this paper, we have proposed a global computing architecture.
Reference: [HOR] <institution> HORB - Hirano's Object Request Broker. </institution> <note> http://ring.etl.go.jp/openlab/horb/. </note>
Reference-contexts: This was a rudimentary implementation based on HORB <ref> [HOR] </ref>. It had poor performance and none of the enhancements discussed later. Nevertheless, it is a good practical illustration of how SuperWeb can be implemented. In the prototype, hosts register their CPU by visiting a broker web page.
Reference: [LT] <author> Inc. </author> <title> Lucent Technologies. inferno. </title> <address> http://inferno.bell-labs.com/inferno/. </address>
Reference-contexts: Other languages support: Currently we support only Java for client tasks. We can extend the implementation to allow arbitrary executables and languages. Also, we might make use of other mobile languages, like the "E" programming language [Com96] or the limbo language from the inferno operating system <ref> [LT] </ref>, which promise better security features or faster execution. Verifying results: One important concern is the integrity of the result returned from an anonymous host to the client. The broker could assist the client in verifying that the output from client computations is correct and can be trusted. <p> Other languages worth considering, besides Java, include the "E" programming language [Com96] which is very similar to but offers a more flexible security framework than Java, and the Limbo programming language in the Inferno operating system <ref> [LT] </ref>, which allows, among other features, for easier and more efficient just-in-time compilation. The secure execution of arbitrary binaries has been recently addressed by at least two techniques. First, software-based fault isolation techniques [Sof95] guard against insecure system calls of programs by patching their binaries.
Reference: [Man95] <author> M. S. Manasse. </author> <title> The Millicent Protocols for Electronic Commerce. </title> <booktitle> In First USENIX Workshop on Electronic Commerce, </booktitle> <address> New York, NY, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Mariposa is a WAN distributed database management system that bases its query and storage optimization on a microeconomic model. Mariposa's model includes brokers, advertising and bidding for requests. SuperWeb's model will most likely be based on currency-based trading. A micro-currency as described in <ref> [Tan95, Man95] </ref> might be used as the cost of a short computation is very small. A currency-based SuperWeb economy strikingly resembles the economy of the electric utility industry.
Reference: [MPI94] <author> MPI: </author> <title> A Message-Passing Interface Standard. </title> <journal> The International Journal of Supercomputer Applications and High Performance Computing, </journal> <volume> 8(3), </volume> <year> 1994. </year>
Reference-contexts: ParaWeb's Java Parallel Runtime System is implemented by modifying the Java interpreter to provide global shared memory and allow transparent instantia-tions of threads on remote machines. Earlier network computing approaches, such as Network of Workstations (NOW), PVM [Sun90], MPI <ref> [MPI94] </ref>, Linda [WL88], CORBA [YD96], Piranha [GK92], and Legion [GWF + 94] can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures used in
Reference: [NEO] <institution> The NEOS Server. </institution> <note> http://www.mcs.anl.gov/home/otc/Server/. </note>
Reference-contexts: Service requests: Instead of just providing requests for hosts, the broker could provide requests for particular services, such as "Run Fast Fourier Transform on this input", or "produce a graph of this data using Excel 4.0". (There already exist projects of this nature <ref> [CD95, NEO] </ref>.) This notion could also be embraced by sites serving the network computers mentioned above. 3 Economic Model The SuperWeb architecture makes computational resources a freely tradeable commodity that can be captured by a microeconomic model of supply and demand.
Reference: [Ros] <author> D. Rossi. </author> <note> Jada. http://www.cs.unibo.it/~rossi/jada/. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or have already been provided by other research groups (for example [SC96], <ref> [Ros] </ref> and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sar96] <author> L. F. G. Sarmenta. </author> <title> Volunteer Computing. Draft Preliminary Concept Paper and Project Proposal, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. [CDL + 96] and Fox et al. [FF96] and studied in <ref> [Sar96] </ref>. Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or have already been provided by other research groups (for example [SC96], [Ros] and [Gut]).
Reference: [SC96] <author> P. A. G. Sivilotti and K. M. Chandy. </author> <title> Reliable Synchronization Primitives for Java Threads. </title> <type> Technical Report CS-TR-96-11, </type> <institution> California Institute of Technology, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or have already been provided by other research groups (for example <ref> [SC96] </ref>, [Ros] and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [SDK + 94] <author> M. Stonebraker, R. Devine, M. Kornacker, W. Litwin, A. Pfeffer, A. Sah, and C. Staelin. </author> <title> An economic paradigm for query processing and data migration in Mariposa. </title> <booktitle> In Proceedings of the Third International Conference on Parallel and Distributed Information Systems, </booktitle> <address> Austin, TX, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: The contract also specifies what the host will receive in exchange for its services and what is the penalty for the host in case it fails to complete the task properly. A similar approach has been suggested by the Mariposa project and is discussed in detail in <ref> [SDK + 94] </ref>. Mariposa is a WAN distributed database management system that bases its query and storage optimization on a microeconomic model. Mariposa's model includes brokers, advertising and bidding for requests. SuperWeb's model will most likely be based on currency-based trading.
Reference: [Sof95] <institution> Colusa Software. </institution> <note> Omniware Technical Overview. http://www.colusa.com, 1995. </note>
Reference-contexts: The underlying key technology in SuperWeb is the safe execution of an untrusted piece of code sent over the Internet by an untrusted third party. For example, the Netscape Web browser can safely run arbitrary Java code 1 while software fault isolation <ref> [Sof95] </ref> allows for safe execution of untrusted binaries. Economic model. The SuperWeb design makes computing resources freely exchangeable commodities which can be captured by a microeconomic model based on supply and demand. In this model, the brokers implement an accounting mechanism for billing and crediting users. <p> Java [GM95] employs this approach. It defines both a high-level programming language for writing programs and a machine-independent virtual machine language, Java bytecode. Although it provides additional compatibility and security guarantees, it is not necessary to invent a new high-level language in order to ensure portability. For example, Omniware <ref> [Sof95] </ref> only defines a machine-independent task shipping language and any high-level language can be compiled to it. Another feasible solution is to submit tasks as machine-specific binaries. This offers high execution speed, but limits the choice of hosts on which the task can run in a heterogeneous environment. <p> This perception is due to high interpretation overhead present in current Java implementations which results in a 5-50 times slowdown compared to compiled C code. Fortunately this is not a fundamental problem with portable code, but rather a shortcoming of current implementations. For example, in the Omniware <ref> [Sof95] </ref> system the portable code is compiled to machine code at the host before execution. As a result Omniware tasks run within 9.3% of native machine code. <p> Ensuring protection for the host for compiled code or plain binary executables is more complicated since there is no controlling entity that can check every instruction for safety. The recently developed technique of Software Fault Isolation (SFI) <ref> [Sof95] </ref> inserts the protection checks in the machine code itself. SFI allows the safe execution of arbitrary untrusted binaries. Before running a piece of machine code, it is instrumented by placing safety checks in front of every potentially dangerous instruction. <p> The secure execution of arbitrary binaries has been recently addressed by at least two techniques. First, software-based fault isolation techniques <ref> [Sof95] </ref> guard against insecure system calls of programs by patching their binaries. Second, secure remote helper applications [GWTB96] use operating system tracing facilities to limit the use of resources that could violate system integrity. 8 Conclusion In this paper, we have proposed a global computing architecture.
Reference: [Sun90] <author> V. S. Sunderam. </author> <title> PVM: A Framework for Parallel Distributed Computing. </title> <type> Technical Report ORNL/TM-11375, </type> <institution> Dept. of Math and Computer Science, Emory University, </institution> <address> Atlanta, GA, USA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: ParaWeb's Java Parallel Runtime System is implemented by modifying the Java interpreter to provide global shared memory and allow transparent instantia-tions of threads on remote machines. Earlier network computing approaches, such as Network of Workstations (NOW), PVM <ref> [Sun90] </ref>, MPI [MPI94], Linda [WL88], CORBA [YD96], Piranha [GK92], and Legion [GWF + 94] can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures
Reference: [Sun96a] <author> Sun Microsystems, Inc. </author> <title> Java Object Serialization Specification, </title> <month> May </month> <year> 1996. </year> <note> Revision 0.9. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization <ref> [Sun96a] </ref>, or have already been provided by other research groups (for example [SC96], [Ros] and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sun96b] <author> Sun Microsystems, Inc. </author> <title> Java Remote Method Invocation Specification, </title> <month> May </month> <year> 1996. </year> <note> Revision 0.9. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) <ref> [Sun96b] </ref> and Object Serialization [Sun96a], or have already been provided by other research groups (for example [SC96], [Ros] and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Tan95] <author> L. Tang. </author> <title> A Set of Protocols for Micropayments in Distributed Systems. </title> <booktitle> In First USENIX Workshop on Electronic Commerce, </booktitle> <address> New York, NY, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Mariposa is a WAN distributed database management system that bases its query and storage optimization on a microeconomic model. Mariposa's model includes brokers, advertising and bidding for requests. SuperWeb's model will most likely be based on currency-based trading. A micro-currency as described in <ref> [Tan95, Man95] </ref> might be used as the cost of a short computation is very small. A currency-based SuperWeb economy strikingly resembles the economy of the electric utility industry.
Reference: [Tay] <author> S. Taylor. </author> <title> Prototype Java-MPI Package. http://cisr.anu.edu.au/~sam/java/ java mpi prototype.html. </title>
Reference-contexts: Thus, they are limited in size and have a high administrative overhead. Although more recent systems, such as JPVM [Fer] and Java-MPI <ref> [Tay] </ref>, overcome the heterogeneity of today's networks, they are not intended to execute on anonymous machines.
Reference: [WL88] <author> R. A. Whiteside and J. S. Leichter. </author> <title> Using Linda for Supercomputing on a Local Area Network. </title> <type> Technical Report YALEU/DCS/TR-638, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, Connecticut, </address> <year> 1988. </year>
Reference-contexts: ParaWeb's Java Parallel Runtime System is implemented by modifying the Java interpreter to provide global shared memory and allow transparent instantia-tions of threads on remote machines. Earlier network computing approaches, such as Network of Workstations (NOW), PVM [Sun90], MPI [MPI94], Linda <ref> [WL88] </ref>, CORBA [YD96], Piranha [GK92], and Legion [GWF + 94] can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures used in the computation.
Reference: [YCW92] <author> K. Q. Yan, Y. H. Chin, and S. C. Wang. </author> <title> Optimal agreement protocol in malicious faulty processors and faulty links. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 4(3), </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: This at least doubles the amount of work done by the computation, but gives a reasonable guarantee that the results are correct. Some work in the area of fault-tolerance with malicious failures can be found in <ref> [YCW92] </ref>. A related concern is fault-tolerance caused by non-malicious failures: clients or hosts crash or lose connectivity, networks go down, etc. This related issue is also important, though easier to handle, and covered sufficiently in the literature. 4.5 Communication speed For many parallel applications the communication network is a bottleneck.
Reference: [YD96] <author> Z. Yang and K. Duddy. </author> <title> CORBA: A Platform for Distributed Object Computing. </title> <journal> OSR, </journal> <volume> 30(2), </volume> <month> April </month> <year> 1996. </year>
Reference-contexts: ParaWeb's Java Parallel Runtime System is implemented by modifying the Java interpreter to provide global shared memory and allow transparent instantia-tions of threads on remote machines. Earlier network computing approaches, such as Network of Workstations (NOW), PVM [Sun90], MPI [MPI94], Linda [WL88], CORBA <ref> [YD96] </ref>, Piranha [GK92], and Legion [GWF + 94] can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures used in the computation.
Reference: [YY91] <author> K. W. Yu and T. L. Yu. </author> <title> Superimposing Encrypted Data. </title> <journal> Communications of the ACM, </journal> <volume> 34(2), </volume> <year> 1991. </year>
Reference-contexts: However, other, more complicated problems can be encrypted and decrypted with very small overhead. Feigenbaum gives an example for the hard problem of finding a discrete logarithm [Fei85]. A more detailed treatise for addition and multiplication of integers is given by Ahituv et al. [ALN87] and Yu and Yu <ref> [YY91] </ref>. The encryption presented by Yu and Yu [YY91] is linear and thus allows for easy repeated addition and multiplication of encrypted integers. The algorithm is based on a time-reversal diffusion process. The algorithms in [ALN87] is based on linear homomorphic functions. <p> Feigenbaum gives an example for the hard problem of finding a discrete logarithm [Fei85]. A more detailed treatise for addition and multiplication of integers is given by Ahituv et al. [ALN87] and Yu and Yu <ref> [YY91] </ref>. The encryption presented by Yu and Yu [YY91] is linear and thus allows for easy repeated addition and multiplication of encrypted integers. The algorithm is based on a time-reversal diffusion process. The algorithms in [ALN87] is based on linear homomorphic functions. Unfortunately, no proper security analysis is provided for any of those algorithms.
References-found: 38

