URL: ftp://gaia.cs.umass.edu/pub/Dey93:Efficient.ps.gz
Refering-URL: http://www-net.cs.umass.edu/papers/papers.html
Root-URL: 
Title: Efficient On-Line Processor Scheduling for a Class of IRIS (Increasing Reward with Increasing Service) Real-Time Tasks  
Author: Jayanta K. Dey James F. Kurose Don Towsley C.M. Krishna Mahesh Girkar 
Keyword: real-time, on-line, scheduling, reward fun ctions.  
Address: Amherst, MA 01003  
Affiliation: University of Massachusetts  Department of Electrical and Computer Engineering.  
Abstract: In this paper we consider the problem of on-line sche duling of real-time tasks which receive a "reward" that depends on the amount of service received. In our mo del, tasks have associated deadlines at which they must depart the system. The task computations are such that the longer they are able to execute before their de adline, the greater the value of their computations, i.e., the tasks have the property that they receive increasing reward with increasing service (IRIS). We focus on the problem of scheduling IRIS tasks in a system in which tasks arrive randomly over time, with the goal of ma ximizing the average reward accrued per task and per unit time. We describe and evaluate a two-level policy for this system. A top-level algorithm executes each time a task arrives and determines the amount of ser vice to allocate to each task in the absence of future arrivals. A lower-level algorithm, an earliest deadline first (EDF) policy in our case, is responsible for the ac tual selection of tasks to execute. This two-level policy is evaluated through a combination of analysis and si mulation. We observe that it provides nearly optimal performance when the variance in the interarrival times and/or laxities is low and that the performance is more sensitive to changes in the arrival process than the de adline distribution. fl The work reported in this paper was supported by ONR grant N00014-87-K-0796 and by NSF grant CCR-9119922. The authors can be contacted at [dey,kurose,towsley,girkar]@cs.umass.edu and krishna@ecs.umass.edu. y Department of Computer Science. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Boddy, M., and Dean, T. </author> <title> Solving time dependent planning problems. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Ar tificial Intelligence (IJCAI-89) (Detroit, </booktitle> <address> Mi, </address> <month> Aug. </month> <year> 1989), </year> <booktitle> IJCAI-89, </booktitle> <pages> pp. 979-984. </pages>
Reference-contexts: These real-time tasks are characterized by the fact that the longer they are able to compute (before their dead line), the higher is the "quality" of their computation. Tasks exhibiting such behavior have been referred to in the literature as "anytime algorithms" <ref> [1, 3] </ref>, "real-time approximate processing algorithms" [4], or "segmented algorithms" [12]. <p> A reward function, f (), is associated with every task, which specifies the value of the computation as a function of the amount of time it has been able to execute before its deadline. As in <ref> [1, 3] </ref>, we assume that the reward function of a task is an arbitrary nondecreasing concave function of its exe cution time, reflecting the decreasing marginal reward as a task receives more service.
Reference: [2] <author> Chong, E. K., and Zhao, W. </author> <title> Performance eva luation of scheduling algorithms for imprecise com puter systems. </title> <journal> Journal of Systems and Software 15, </journal> <month> 3 (July </month> <year> 1991), </year> <pages> 261-277. </pages>
Reference-contexts: The scheduling policy switches from primary versions of tasks to alternate versions when the total number of tasks in the system exceeds a threshold. Kim and Towsley [8] study this model in the context of real-time message transmissions, while <ref> [2] </ref> and [20] analyze two-version scheduling disciplines for this model in uniprocessor and multiprocessor systems respectively. The evaluation of our proposed scheduling policy is performed through simulation. In addition, analy tic upper bounds on the performance of any schedu ling algorithm in an IRIS framework are presented.
Reference: [3] <author> Dean, T., and Boddy, M. </author> <title> An analysis of time dependent planning. </title> <booktitle> In Proceedings of the Seventh National on Artificial Intelligence (AAAI-88) (De troit, </booktitle> <address> Mi, </address> <month> Aug. </month> <year> 1988), </year> <pages> AAAI-88, pp. 49-54. </pages>
Reference-contexts: These real-time tasks are characterized by the fact that the longer they are able to compute (before their dead line), the higher is the "quality" of their computation. Tasks exhibiting such behavior have been referred to in the literature as "anytime algorithms" <ref> [1, 3] </ref>, "real-time approximate processing algorithms" [4], or "segmented algorithms" [12]. <p> A reward function, f (), is associated with every task, which specifies the value of the computation as a function of the amount of time it has been able to execute before its deadline. As in <ref> [1, 3] </ref>, we assume that the reward function of a task is an arbitrary nondecreasing concave function of its exe cution time, reflecting the decreasing marginal reward as a task receives more service. <p> Recently, Shih and Liu [17] developed on-line scheduling algorithms to minimize total error for such tasks. This model of tasks is equivalent to the IRIS model with tasks having identical linear reward functions. In the context of time-dependent path planning <ref> [3] </ref>, Dean and Boddy consider a finite set of tasks with known arrival times and deadlines, but the laxities of tasks are multiples of a fixed time slice. The task computations exhibit diminishing marginal returns with execution time. This is a discrete-time version of the IRIS task model.
Reference: [4] <author> Decker, K., V.R., L., and R.C., W. </author> <title> Extending a blackboard architecture for approximate proces sing. </title> <booktitle> The Journal of Real-Time Systems 2 (1990), </booktitle> <pages> 47-79. </pages>
Reference-contexts: These real-time tasks are characterized by the fact that the longer they are able to compute (before their dead line), the higher is the "quality" of their computation. Tasks exhibiting such behavior have been referred to in the literature as "anytime algorithms" [1, 3], "real-time approximate processing algorithms" <ref> [4] </ref>, or "segmented algorithms" [12]. Examples include tasks that receive, enhance and transmit audio data or video-image frames, tasks for tracking and control, e.g., autonomous vehicle motion planning [6], tasks for heuristic search [9], tasks for database query processing [7, 19], and tasks com puting traditional iterative-refinement numerical algo rithms.
Reference: [5] <author> Dey, J. K., Kurose, J., and Towsley, D. </author> <title> On line processor scheduling for a class of IRIS (In creasing Reward with Increasing Service) real-time tasks. </title> <type> Tech. Rep. 93-09, </type> <institution> Department of Compu ter Science, University of Massachusetts, Amherst, </institution> <month> Jan </month> <year> 1993. </year>
Reference-contexts: The reward functions are assumed to be continuous and g 1 is assumed to be a function in the rest of this paper. Algorithms to solve versions of this problem when the reward functions are piecewise-linear, i.e., g 1 is not a function, are described in <ref> [5] </ref>. A schedule determines the amount of service to be given to each task during each interval. We assume that the CPU never idles so long as there are tasks present in the system.
Reference: [6] <editor> Hayes-Roth, B. </editor> <booktitle> Architectural foundations for real-time performance in intelligent agents. The Journal of Real-Time Systems 2 (1990), </booktitle> <pages> 99-125. </pages>
Reference-contexts: Tasks exhibiting such behavior have been referred to in the literature as "anytime algorithms" [1, 3], "real-time approximate processing algorithms" [4], or "segmented algorithms" [12]. Examples include tasks that receive, enhance and transmit audio data or video-image frames, tasks for tracking and control, e.g., autonomous vehicle motion planning <ref> [6] </ref>, tasks for heuristic search [9], tasks for database query processing [7, 19], and tasks com puting traditional iterative-refinement numerical algo rithms. Given this new model of real-time computation, a new performance metric is required to evaluate the qua lity of computation for a task.
Reference: [7] <author> Hou, W., Ozsoyoglu, G., and B.K., T. </author> <title> Pro cessing aggregate relational queries with hard time constraints. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on the Management of Data (June 1989), ACM. </booktitle>
Reference-contexts: Examples include tasks that receive, enhance and transmit audio data or video-image frames, tasks for tracking and control, e.g., autonomous vehicle motion planning [6], tasks for heuristic search [9], tasks for database query processing <ref> [7, 19] </ref>, and tasks com puting traditional iterative-refinement numerical algo rithms. Given this new model of real-time computation, a new performance metric is required to evaluate the qua lity of computation for a task.
Reference: [8] <author> Kim, B., and Towsley, D. </author> <title> Dynamic flow control protocols for packet-switching multiplexers serving real-time multipacket messages. </title> <journal> IEEE Transac tions on Communications, </journal> <month> COM-34 4 (Apr. </month> <year> 1986), </year> <pages> 348-356. </pages>
Reference-contexts: The scheduling policy switches from primary versions of tasks to alternate versions when the total number of tasks in the system exceeds a threshold. Kim and Towsley <ref> [8] </ref> study this model in the context of real-time message transmissions, while [2] and [20] analyze two-version scheduling disciplines for this model in uniprocessor and multiprocessor systems respectively. The evaluation of our proposed scheduling policy is performed through simulation.
Reference: [9] <author> Korf, R. E. </author> <title> Depth-limited search for real-time problem solving. </title> <booktitle> The Journal of Real-Time Sy stems 2 (1990), </booktitle> <pages> 7-24. </pages>
Reference-contexts: Examples include tasks that receive, enhance and transmit audio data or video-image frames, tasks for tracking and control, e.g., autonomous vehicle motion planning [6], tasks for heuristic search <ref> [9] </ref>, tasks for database query processing [7, 19], and tasks com puting traditional iterative-refinement numerical algo rithms. Given this new model of real-time computation, a new performance metric is required to evaluate the qua lity of computation for a task.
Reference: [10] <author> Kurose, J., Krishna, C., and Girkar, M. </author> <title> On scheduling real-time tasks with increased-value with-increased-execution-time characteristics. </title> <type> Un published Report, </type> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Note that the target service allocation may change at each arrival. We have chosen the EDF algorithm as the lower-level policy in our implementation. Numerous alternatives were considered in a previous study <ref> [10, 11] </ref>.
Reference: [11] <author> Kurose, J., Towsley, D., and Krishna, C. </author> <title> Design and analysis of processor scheduling policies for real-time systems. </title> <booktitle> In Foundations in Real-Time Computing, </booktitle> <editor> A. v. Tilborg, Ed. </editor> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991, </year> <journal> ch. </journal> <volume> 3, </volume> <pages> pp. 63-89. </pages>
Reference-contexts: Note that the target service allocation may change at each arrival. We have chosen the EDF algorithm as the lower-level policy in our implementation. Numerous alternatives were considered in a previous study <ref> [10, 11] </ref>.
Reference: [12] <author> Liu, J. </author> <title> Timing constraints and algorithms. </title> <booktitle> In Report on the Embedded AI Languages Workshop (Nov. 1988), </booktitle> <publisher> University of Michigan, </publisher> <pages> pp. 9-11. </pages>
Reference-contexts: Tasks exhibiting such behavior have been referred to in the literature as "anytime algorithms" [1, 3], "real-time approximate processing algorithms" [4], or "segmented algorithms" <ref> [12] </ref>. Examples include tasks that receive, enhance and transmit audio data or video-image frames, tasks for tracking and control, e.g., autonomous vehicle motion planning [6], tasks for heuristic search [9], tasks for database query processing [7, 19], and tasks com puting traditional iterative-refinement numerical algo rithms.
Reference: [13] <author> Liu, J. W., Lin, K.-J., Shih, W.-K., Yu, A. C. s., Chung, J.-Y. C., and Zhao, W. </author> <title> Algorithms for scheduling imprecise computations. </title> <booktitle> IEEE Com puter 24, </booktitle> <month> 5 (May </month> <year> 1991), </year> <pages> 58-68. </pages>
Reference-contexts: Past work in this area has dealt with systems in which tasks incur an error which is a linear decreasing function of the amount of service it receives before its deadline. For a finite collection of tasks whose arrival times and deadlines are known a priori, Shih et al <ref> [13, 18] </ref> developed off-line algorithms to minimize the total error incurred. Recently, Shih and Liu [17] developed on-line scheduling algorithms to minimize total error for such tasks. This model of tasks is equivalent to the IRIS model with tasks having identical linear reward functions. <p> We observe that performance is more sensitive to changes in the arrival process than to changes in the deadline distribution. Finally, the static optimization problem considered at the top-level and its associated solutions may be of independent interest as it generalizes earlier work <ref> [13, 18, 17] </ref> in this area, by allowing nonlinear reward functions. The remainder of this paper is organized as follows. Section 2 describes the task model, and presents up per bounds on performance.
Reference: [14] <author> Luenberger, D. </author> <title> Linear and Nonlinear Program ming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading Massachusetts, </address> <year> 1984. </year>
Reference-contexts: Several properties for this problem have been discussed in [15]. Problem P is solved in Appendix A using the me thod of Langrange multipliers <ref> [14] </ref>. Several properties of any optimal solution to P are also derived in Appendix A.
Reference: [15] <author> Mjelde, K. M. </author> <title> Methods of the Allocation of Li mited Resources. </title> <publisher> John Wiley and Sons, </publisher> <year> 1983. </year>
Reference-contexts: This is a special case of a general resource allocation problem, where the returns from an activity is a con cave function of resources allocated to it <ref> [15] </ref>, and the objective is to obtain an allocation of resources to ac tivities such that the objective function is maximized. Several properties for this problem have been discussed in [15]. Problem P is solved in Appendix A using the me thod of Langrange multipliers [14]. <p> general resource allocation problem, where the returns from an activity is a con cave function of resources allocated to it <ref> [15] </ref>, and the objective is to obtain an allocation of resources to ac tivities such that the objective function is maximized. Several properties for this problem have been discussed in [15]. Problem P is solved in Appendix A using the me thod of Langrange multipliers [14]. Several properties of any optimal solution to P are also derived in Appendix A.
Reference: [16] <author> Ross, S. </author> <title> Stochastic Processes. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: We have, E [R ] = E [f (A )]; where we use Jensen's inequality <ref> [16] </ref>. In general, E [A ] min (1=; E [t ]): Since f is nondecreasing, this yields the following bound fl f (E [t ]); E [t ] &lt; 1=; f (1=); otherwise: (2) If the arrival process is Poisson, we can derive an exact expression for E [A ].
Reference: [17] <author> Shih, W. K., and Liu, J. </author> <title> On-line scheduling of imprecise computations to minimize error. </title> <booktitle> In IEEE Real-Time Systems Symposium (Los Alamitos, </booktitle> <address> CA, </address> <month> Dec. </month> <year> 1992), </year> <note> IEEE. </note>
Reference-contexts: For a finite collection of tasks whose arrival times and deadlines are known a priori, Shih et al [13, 18] developed off-line algorithms to minimize the total error incurred. Recently, Shih and Liu <ref> [17] </ref> developed on-line scheduling algorithms to minimize total error for such tasks. This model of tasks is equivalent to the IRIS model with tasks having identical linear reward functions. <p> We observe that performance is more sensitive to changes in the arrival process than to changes in the deadline distribution. Finally, the static optimization problem considered at the top-level and its associated solutions may be of independent interest as it generalizes earlier work <ref> [13, 18, 17] </ref> in this area, by allowing nonlinear reward functions. The remainder of this paper is organized as follows. Section 2 describes the task model, and presents up per bounds on performance.
Reference: [18] <author> Shih, W. K., Liu, J., and J.Y., C. </author> <title> Algorithms for scheduling imprecise computations with timing constraints. </title> <journal> SIAM Journal on Computing 20, </journal> <month> 3 (June </month> <year> 1991), </year> <pages> 537-552. </pages>
Reference-contexts: Past work in this area has dealt with systems in which tasks incur an error which is a linear decreasing function of the amount of service it receives before its deadline. For a finite collection of tasks whose arrival times and deadlines are known a priori, Shih et al <ref> [13, 18] </ref> developed off-line algorithms to minimize the total error incurred. Recently, Shih and Liu [17] developed on-line scheduling algorithms to minimize total error for such tasks. This model of tasks is equivalent to the IRIS model with tasks having identical linear reward functions. <p> We observe that performance is more sensitive to changes in the arrival process than to changes in the deadline distribution. Finally, the static optimization problem considered at the top-level and its associated solutions may be of independent interest as it generalizes earlier work <ref> [13, 18, 17] </ref> in this area, by allowing nonlinear reward functions. The remainder of this paper is organized as follows. Section 2 describes the task model, and presents up per bounds on performance.
Reference: [19] <author> Smith, K., and Liu, J. </author> <title> Monotonically improving approximate answers to relational algebra queries. </title> <booktitle> In Proceedings of Compsac (Sept. </booktitle> <year> 1989). </year>
Reference-contexts: Examples include tasks that receive, enhance and transmit audio data or video-image frames, tasks for tracking and control, e.g., autonomous vehicle motion planning [6], tasks for heuristic search [9], tasks for database query processing <ref> [7, 19] </ref>, and tasks com puting traditional iterative-refinement numerical algo rithms. Given this new model of real-time computation, a new performance metric is required to evaluate the qua lity of computation for a task.
Reference: [20] <author> Zhao, W., Vrbsky, S., and Liu, J. </author> <title> Performance of scheduling algorithms for multi-server imprecise systems. </title> <booktitle> In Proceedings of the 5th International Conference on Parallel and Distributed Computing and Systems (Oct. </booktitle> <year> 1992). </year>
Reference-contexts: The scheduling policy switches from primary versions of tasks to alternate versions when the total number of tasks in the system exceeds a threshold. Kim and Towsley [8] study this model in the context of real-time message transmissions, while [2] and <ref> [20] </ref> analyze two-version scheduling disciplines for this model in uniprocessor and multiprocessor systems respectively. The evaluation of our proposed scheduling policy is performed through simulation. In addition, analy tic upper bounds on the performance of any schedu ling algorithm in an IRIS framework are presented.
References-found: 20

