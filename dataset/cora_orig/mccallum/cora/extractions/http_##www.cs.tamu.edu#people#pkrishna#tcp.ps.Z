URL: http://www.cs.tamu.edu/people/pkrishna/tcp.ps.Z
Refering-URL: http://www.cs.tamu.edu/people/pkrishna/publications.html
Root-URL: http://www.cs.tamu.edu
Email: E-mail: fbbakshi,pkrishna,vaidya,pradhang@cs.tamu.edu  
Phone: Phone: (409) 862-3411  
Title: Improving Performance of TCP over Wireless Networks  incorporate wireless link characteristics.  
Author: Bikram S. Bakshi P. Krishna N. H. Vaidya D. K. Pradhan 
Note: Experiments are performed using the Network Simulator (NS) from Lawrence Berkeley Labs. The simulator has been extended to  
Date: May 1, 1996  
Address: College Station, TX 77843-3112  
Affiliation: Department of Computer Science Texas A&M University  
Pubnum: Technical Report TR-96-014  
Abstract: Transmission Control Protocol (TCP) assumes a relatively reliable underlying network where most packet losses are due to congestion. In a wireless network, however, packet losses will occur more often due to unreliable wireless links than due to congestion. When using TCP over wireless links, each packet loss on the wireless link results in congestion control measures being invoked at the source. This causes severe performance degradation. In this paper, we study the effect of (a) burst errors on wireless links, (b) packet size variation on the wired network, (c) local error recovery by the base station, and (d) explicit feedback by the base station, on the performance of TCP over wireless networks. It is shown that the performance of TCP is sensitive to the packet size, and that significant performance improvements are obtained if a `good' packet size is used. While local recovery by the base station using link-level retransmissions is found to improve performance, timeouts can still occur at the source, causing redundant packet retransmissions from the source. We propose an "explicit feedback" mechanism to prevent these timeouts during local recovery. Results indicate significant performance improvements when explicit feedback from the base station is used. A major advantage of our approaches over existing proposals is that, no state maintenance is required at any intermediate host. fl This research is supported, in part, by the Texas Advanced Technology Program under grants C-009741-052 and C-999903-029. y This report supersedes TR-95-049 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Karn and C. Partridge, </author> <title> "Estimating round-trip times in reliable transport protocols," </title> <booktitle> Proc. SIGCOMM, </booktitle> <month> Aug., </month> <year> 1987. </year> <month> 18 </month>
Reference-contexts: In addition to the above measures, the timeout value is doubled upon each consecutive packet loss. Only upon receipt of an acknowledgement for a "non-retransmitted packet" is the timeout value recomputed <ref> [1] </ref>. While wired links offer a virtually error free transmission medium, errors on wireless links tend to be frequent and bursty, and are highly sensitive to direction of propagation, multipath fading, and general interference. As stated earlier, TCP assumes that each packet loss is solely 2 due to congestion.
Reference: [2] <author> V. Jacobson, </author> <title> "Congestion Avoidance and Control," </title> <booktitle> Proc. SIGCOMM, </booktitle> <pages> pp. 314-329, </pages> <month> Aug., </month> <year> 1988. </year>
Reference-contexts: Over the years, the internet community has incorporated new schemes into the TCP suite to make these protocols more robust to congestion. Details of schemes for congestion control and avoidance in TCP can be found in <ref> [2] </ref>. Here, we will give a brief overview of the general ideas behind these schemes, as this explanation proves useful in understanding the problems typical to a wireless network. <p> Therefore, a TCP source (SRC) is embedded in the fixed host, and a TCP sink (SNK) is embedded in the mobile host. 3.3 TCP Parameters We use Tahoe TCP which incorporates slow start, congestion avoidance and fast-retransmit algorithms <ref> [2, 13] </ref>. Unless otherwise specified, the window size is set to 4 Kbytes. We run experiments for different packet sizes ranging from 128 bytes to 1536 bytes. The header size is set to 40 bytes.
Reference: [3] <author> A. DeSimone, M.C. Chuah, </author> <title> and O.C. Yue, "Throughput Performance of Transport-Layer Protocols over Wireless LANs," </title> <booktitle> Proc. Globecom, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: This is evident in the bad period of 10-14 sec, where a timeout for packet 27 occurs at the source at 13.75 sec. The problem of redundant retransmissions (from the TCP source as well as the base station) 9 was also pointed out in <ref> [3] </ref>. The authors in [3] suggested that error recovery employed at the link layer could potentially interfere with TCP's timeout mechanism. This leads to competing or redundant retransmissions. In our example, redundant retransmissions occur for packet 27. <p> This is evident in the bad period of 10-14 sec, where a timeout for packet 27 occurs at the source at 13.75 sec. The problem of redundant retransmissions (from the TCP source as well as the base station) 9 was also pointed out in <ref> [3] </ref>. The authors in [3] suggested that error recovery employed at the link layer could potentially interfere with TCP's timeout mechanism. This leads to competing or redundant retransmissions. In our example, redundant retransmissions occur for packet 27.
Reference: [4] <author> R. Caceres and L. Iftode, </author> <title> "Improving the Performance of Reliable Transport Protocols in Mobile Computing Environments," </title> <journal> IEEE JSAC Special Issue on Mobile Computing Networks, </journal> <year> 1994. </year>
Reference-contexts: Results and conclusions follow in Section 5 and Section 6 respectively. 2 Summary of Previous Approaches Caceres and Iftode were among the first to investigate the impact of mobility on the performance of TCP <ref> [4] </ref>. The authors employ the fast retransmit procedure to recover quickly from packet losses during handoffs. This work, however, does not address the issue of packet losses due to lossy wireless links.
Reference: [5] <author> W. </author> <title> Stevens, </title> <journal> TCP/IP Illustrated, </journal> <volume> Volume 1, </volume> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: TCP's reaction to losses is based on this very observation. Losses are detected either by timeouts at the source or by multiple duplicate acknowledgements (dupacks) from the receiver (referred to as the fast-retransmit policy <ref> [5] </ref>). Upon loss of a packet, TCP reacts by setting ssthresh to half the value of cwnd, subsequently decreasing cwnd to one, and entering the slow-start phase.
Reference: [6] <author> R. Yavatkar and N. Bhagwat, </author> <title> "Improving End-to-End Performance of TCP over Mobile Internetworks," </title> <booktitle> Proc. of Workshop on Mobile Computing Systems and Applications, </booktitle> <month> Dec., </month> <year> 1994. </year>
Reference-contexts: The authors employ the fast retransmit procedure to recover quickly from packet losses during handoffs. This work, however, does not address the issue of packet losses due to lossy wireless links. The split-connection approach <ref> [6, 7] </ref> suggests that a TCP connection between a mobile host and a fixed host should be split into two separate connections one between the mobile host and the base station over the wireless medium, and another between the base station and the fixed host over the wired medium.
Reference: [7] <author> A.Bakre and B.R. Badrinath, "I-TCP: </author> <title> Indirect TCP for Mobile Hosts," </title> <address> ICDCS, </address> <month> Oct., </month> <year> 1994. </year>
Reference-contexts: The authors employ the fast retransmit procedure to recover quickly from packet losses during handoffs. This work, however, does not address the issue of packet losses due to lossy wireless links. The split-connection approach <ref> [6, 7] </ref> suggests that a TCP connection between a mobile host and a fixed host should be split into two separate connections one between the mobile host and the base station over the wireless medium, and another between the base station and the fixed host over the wired medium.
Reference: [8] <author> Tim Alanko et al, </author> <title> "Measured Performance of Data Transmission Over Cellular Telephone Networks." </title> <type> Technical report TR C-1994-53, </type> <institution> University of Helsinki. </institution>
Reference: [9] <author> P. Bhagwat et. al., </author> <title> "Enhancing Throughput over Wireless LANs Using Channel State Dependent Packet Scheduling," </title> <booktitle> INFOCOM, </booktitle> <year> 1995. </year>
Reference-contexts: Moreover, both snoop and the split-connection approaches do not perform well in the presence of bursty losses on the wireless links. Several link level Channel State Dependent Packet (CSDP) scheduling policies are proposed in <ref> [9] </ref>. The performance of multiple TCP connections over a wireless LAN is investigated. It 4 is observed that under FIFO packet scheduling at the base station, the head of line packet, if encountering burst losses, could block the transmission of other packets. <p> The source now initiates congestion control measures and retransmits the lost packets, causing degradation of goodput as well as throughput. base station. (The basic setup of Figure 2 is modified to employ local link-level retransmissions from the base station.) The link-level protocol used is similar to to the protocol in <ref> [9] </ref>. This involves aggressive retransmission with packet discards. If the base station does not receive an acknowledgement following a packet transmission, it retransmits the lost packet after a random retransmission backoff. A maximum of RT max successive retransmissions are allowed before a packet is discarded. <p> This problem will not arise if TCP implementations use a very coarse timer. Current TCP implementations have a coarse timer granularity (of the order of 300-500 millisecond). Other approaches that employ local recovery <ref> [9, 11] </ref> assume a coarse timer, which is why they do not notice this problem of redundant retransmissions during local recovery. Recent proposals advocate the use of finer granularity timers, as this increases the sensitivity of the source TCP to congestion on the network [23]. <p> This improves goodput and throughput of the connection. Note, that the improvements will be more pronounced in high BER wireless links. * TCP using EBSN does not require state maintenance at any intermediate host. * Effectiveness of some of the proposed approaches <ref> [9, 11] </ref> depend on the granularity of the TCP timer. A TCP timer with finer granularity will result in a larger number of timeouts during local recovery. This will cause significant degradation in throughput and goodput.
Reference: [10] <author> A.Bakre and B.R. Badrinath, </author> <title> "Handoff and System Support for Indirect TCP/IP," </title> <booktitle> Proc. Second Usenix Symp. on Mobile and Location-Independent Computing, </booktitle> <month> April, </month> <year> 1995. </year>
Reference: [11] <author> H. Balakrishnan, S. Seshan, E. Amir, R. H. Katz, </author> <title> "Improving TCP/IP Performance over Wireless Networks," </title> <booktitle> Proc. 1st ACM Conf. on Mobile Computing and Networking, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: This is because, acknowledgments can arrive at the source even before the packet actually reaches the intended destination. Secondly, this approach requires a lot of state maintenance at the base station. Balakrishnan et.al. incorporate a transport layer aware agent (snoop agent) at the base station in <ref> [11] </ref>. The snoop agent caches the TCP packets destined for the mobile host and performs local retransmissions after losses are detected by duplicate acknowledgments (dupacks) and timeouts. <p> This problem will not arise if TCP implementations use a very coarse timer. Current TCP implementations have a coarse timer granularity (of the order of 300-500 millisecond). Other approaches that employ local recovery <ref> [9, 11] </ref> assume a coarse timer, which is why they do not notice this problem of redundant retransmissions during local recovery. Recent proposals advocate the use of finer granularity timers, as this increases the sensitivity of the source TCP to congestion on the network [23]. <p> This improves goodput and throughput of the connection. Note, that the improvements will be more pronounced in high BER wireless links. * TCP using EBSN does not require state maintenance at any intermediate host. * Effectiveness of some of the proposed approaches <ref> [9, 11] </ref> depend on the granularity of the TCP timer. A TCP timer with finer granularity will result in a larger number of timeouts during local recovery. This will cause significant degradation in throughput and goodput.
Reference: [12] <institution> Cellular Digital Packet Data System Specification: Release 1.0, CDPD Forum Inc., </institution> <year> 1993. </year>
Reference-contexts: Nonetheless, these losses trigger congestion control measures at the source and severely degrade performance. In addition, for wide-area wireless networks, the packet size over wireless links is typically much smaller than the packet size over the wired network. For example, the packet size over wireless links for CDPD Networks <ref> [12] </ref> is only 128 bytes. As a result, each packet on the wired network gets fragmented when transmitted over the wireless link. Loss of a fragment over the wireless link will initiate error recovery and congestion control mechanisms at the source, causing noticeable performance degradation. <p> Typically, the MTU on a wide-area wireless network is kept small. This reduces the probability of packets getting corrupted during transmission over the wireless medium. For example, the MTU in CDPD networks is 128 bytes <ref> [12] </ref>. However, packets on the wired network larger than the wireless MTU get fragmented into multiple MTUs before transmission over the wireless link. Fragmentation of packets on a heterogeneous network appears to have many advantages as pointed out in [15]. <p> If the base station does not receive an acknowledgement following a packet transmission, it retransmits the lost packet after a random retransmission backoff. A maximum of RT max successive retransmissions are allowed before a packet is discarded. We set RT max to 13 <ref> [12] </ref>. It can be noticed that in most bad periods, local recovery at the base station prevents packet losses on the wireless link. For example, between 24-28 sec, no packets need to be retransmitted from the source.
Reference: [13] <author> Sally Floyd, Steve McCanne, </author> <title> "Network Simulator." LBNL public domain software. </title> <note> Available via ftp from ftp.ee.lbl.gov. </note>
Reference-contexts: The main limitation of this approach is that the performance improvement achievable depends mostly on the accuracy of the channel state predictor. The problem of source timeouts exists in this approach too. 3 Simulation Environment We use the Network Simulator (NS) <ref> [13] </ref> from Lawrence Berkeley Labs with extensions incorporated to simulate wireless links, to evaluate the performance of our proposed schemes. NS is an extensible simulation engine built using C++ and Tcl/Tk that can simulate various flavors of TCP available today for wired networks. <p> Therefore, a TCP source (SRC) is embedded in the fixed host, and a TCP sink (SNK) is embedded in the mobile host. 3.3 TCP Parameters We use Tahoe TCP which incorporates slow start, congestion avoidance and fast-retransmit algorithms <ref> [2, 13] </ref>. Unless otherwise specified, the window size is set to 4 Kbytes. We run experiments for different packet sizes ranging from 128 bytes to 1536 bytes. The header size is set to 40 bytes.
Reference: [14] <author> R Braden, </author> <title> "Requirements for Internet Hosts Communication Layers", </title> <type> RFC 1122, </type> <month> October </month> <year> 1989. </year>
Reference: [15] <author> C. A. Kent, J. C. Mogul, </author> <title> "Fragmentation considered harmful," </title> <booktitle> SIGCOMM 1988. </booktitle>
Reference-contexts: For example, the MTU in CDPD networks is 128 bytes [12]. However, packets on the wired network larger than the wireless MTU get fragmented into multiple MTUs before transmission over the wireless link. Fragmentation of packets on a heterogeneous network appears to have many advantages as pointed out in <ref> [15] </ref>. The end hosts are relieved from worrying about the size of their data-segments even though the intermediate links may have largely different MTU sizes. <p> While fragmentation may appear to be an attractive solution to the wide discrepancy in internetwork MTU sizes, the authors in <ref> [15] </ref> recommend it be avoided. It is pointed out that dropping or corruption of a single such fragment will result in the whole packet being dropped. The source would then have to retransmit the entire packet causing more fragments to litter the network and compound congestion problems.
Reference: [16] <author> Authors of this paper, </author> <title> "Performance of TCP over Wireless Networks," </title> <type> Tech Report # TR-95-049, </type> <month> December, </month> <year> 1995. </year>
Reference: [17] <author> Authors of this paper, </author> <title> "Seamless Communication over Mobile Wireless Networks," </title> <type> Tech Report # TR-96-25, </type> <month> April, </month> <year> 1996. </year>
Reference-contexts: Loss of a fragment over the wireless link will initiate error recovery and congestion control mechanisms at the source, causing noticeable performance degradation. In this study, we do not consider handoffs. In a separate study <ref> [17] </ref>, we have proposed schemes to improve the performance of TCP in the presence of handoffs. In this study, we are only interested in the performance of TCP (for bulk data transfer) in the presence of losses in wireless networks.
Reference: [18] <author> Authors of this paper, </author> <title> "Explicit Feedback in Wireless Networks," </title> <note> Tech Report in preparation. 19 </note>
Reference-contexts: In this paper, we have assumed that the wired network is not congested. We are separately studying the impact of congestion in the wired network on the effectiveness of EBSN <ref> [18] </ref>. This involves looking into issues related to the interaction between ECN and EBSN. We are also investigating schemes to make a source timer more robust to larger delays on the wireless link without using explicit feedback mechanisms.
Reference: [19] <author> A. Conta and S. Deering, </author> <title> "Internet Control Message Protocol (ICMPv6) for the Internet Protocol Version 6 (IPv6)," </title> <type> RFC 1885, </type> <month> December, </month> <year> 1995. </year>
Reference: [20] <author> J. Postel, </author> <title> "Internet Control Message Protocol," </title> <type> RFC 792, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: ECN in the form of ICMP source quenches <ref> [20] </ref>, is a host's means of informing the source of congestion in the network.
Reference: [21] <author> J. Mogul and S. Deering, </author> <note> "Path MTU Discovery," RFC 1191, </note> <month> November, </month> <year> 1990. </year>
Reference-contexts: The above argument has important ramifications for efficient operation of TCP over wide-area wireless networks. While throughput of TCP is sensitive to the error characteristics of the link, we show that the packet size on the wired network also affects results. Note that, if Path MTU Discovery (PMTU) <ref> [21] </ref> is used to decide the size of the data packet to be used for a TCP connection, the packet size chosen will be equal to the smallest MTU among all links along the 7 route for the connection.
Reference: [22] <author> J. Postel, </author> <title> "The TCP Maximum Segment Size and Related Topics," </title> <type> RFC 879, </type> <month> November, </month> <year> 1983. </year>
Reference-contexts: In this case, it will be the MTU on the wireless link. If neither the MSS option, nor PMTU are used during TCP connection establishment, the source assumes the default IP datagram size of 576 bytes <ref> [22] </ref> as the packet size. We performed experiments for different packet sizes under different error conditions over the wireless link. Our results indicate that for most error conditions, the optimal packet size differs from the MTU on the wireless link as well as the default IP datagram size.
Reference: [23] <author> Sally Floyd, </author> <title> "TCP and Explicit Congestion Notification," </title> <journal> ACM Computer Communication Review, V.24, </journal> <volume> No. 5, </volume> <month> October </month> <year> 1994. </year>
Reference-contexts: Recent proposals advocate the use of finer granularity timers, as this increases the sensitivity of the source TCP to congestion on the network <ref> [23] </ref>. In line with this trend, we use a timer granularity of 100 milliseconds for our experiments. Explicit feedback from the base station can completely eliminate the possibility of timeouts occurring at the source, while the wireless link is in a bad state. <p> As can be seen, there are no timeouts at the source, and therefore, the source does not invoke congestion control measures during any bad period. In the next section, we explore the possibility of using existing feedback mechanisms, like Explicit Congestion Notification ECN <ref> [23] </ref> for improving TCP performance over wireless links. 10 4.2.2 Can ECN work for us ? The use of explicit feedback for congestion control in the internet has already been shown to work well. <p> This reduces the number of timeouts, and in a large number of cases prevents timeouts from occurring at all. The effect of clock granularity on performance is now greatly reduced, thus improving the robustness of the network <ref> [23] </ref>. Disadvantage: * The main disadvantage of EBSN is that it requires modification to TCP code at the source. Note, however, the changes involved are minimal as shown in the Appendix.
References-found: 23

