URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1991/1991-08.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (Email: gerard@cs.ruu.nl)  
Title: Network Orientation  
Author: Gerard Tel 
Keyword: Lower bounds on the message complexity of orientation and algorithms achieving  
Note: these bounds are given.  
Address: P.O. Box 80.089, 3508 TB Utrecht, The Netherlands  
Affiliation: Department of Computer Science, University of Utrecht,  
Abstract: This paper analyses how the symmetry of a processor network influences the existence of a solution for the network orientation problem. The orientation of cliques, hypercubes and tori is the problem of assigning labels to each link of each processor, in such a way that a sense of direction is given to the network. In this paper the problem of network orientation for these two topologies is studied under the assumption that the network contains a single leader, under the assumption that the processors possess unique identities, and under the assumption that the network is anonymous. The distinction between these three models is considered fundamental in distributed computing. It is shown that orientations can be computed by deterministic algorithms only when either a leader or unique identities are available. Orientations can be computed for anonymous networks by randomized algorithms, but only when the number of processors is known. When the number of processors is not known, even randomized algorithms cannot compute orientations for anonymous processor networks. 
Abstract-found: 1
Intro-found: 1
Reference: [Ang80] <author> Angluin, D. </author> <title> Local and global properties in networks of processors. </title> <booktitle> In Symp. on Theory of Computing (1980), </booktitle> <pages> pp. 82-93. </pages>
Reference-contexts: It was shown by An-gluin <ref> [Ang80] </ref> that anonymous networks can deterministically compute strictly less functions than leader networks. It was later shown by Itai and Rodeh [IR81] that anonymous networks can simulate leader networks with a randomized algorithm when the number of processors is known. <p> Anonymous networks are weaker than leader and named networks in terms of the computations that they can perform. Leader and named networks can simulate anonymous networks (namely, by making the leader algorithm equal to the non-leader algorithm, or by not using the name, respectively). On the other hand, Angluin <ref> [Ang80] </ref> has shown that no deterministic algorithms exists to elect a leader in anonymous networks. With arguments similar to hers it will be shown that no deterministic algorithms for orienting anonymous networks exist.
Reference: [Awe85] <author> Awerbuch, B. </author> <title> Complexity of network synchronization. </title> <editor> J. </editor> <booktitle> ACM 32 (1985), </booktitle> <pages> 804-823. </pages>
Reference-contexts: The Power of Synchronism. Stronger synchronism assumptions do not increase the class of functions computable by reliable networks. This statement follows from the existence of so-called "synchronizer" algorithms, implementing fully synchronous networks on networks satisfying a weaker assumption. Awerbuch <ref> [Awe85] </ref> proposed a synchronizer for fully asynchronous networks, and his "ff-synchronizer" can be used even for anonymous (but reliable) networks. A more efficient algorithm (in terms of messages exchanged by the synchronizer) was presented by Korach et al. [KTZ88] for Asynchronous Bounded Delay Networks. The Efficiency of Synchronism.
Reference: [BB89] <author> Beame, P. W., and Bodlaender, H. L. </author> <title> Distributed computing on transitive networks: The torus. </title> <booktitle> In Symp. on Theoretical Aspects of Computer Science (1989), </booktitle> <editor> B. Monien and R. Cori (Eds.), </editor> <volume> vol. </volume> <booktitle> 349 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 294-303. </pages>
Reference-contexts: For oriented cliques an algorithm using O (N ) messages exists; see Loui et al. [LMW86]. Kranakis and Krizanc's algorithm for computing boolean functions on hypercubes [KK91] assumes that an orientation of the hypercube is available. Similarly, Beame and Bodlaender's algorithm for computing boolean functions on torus networks <ref> [BB89] </ref> assumes that an orientation of the torus is available. For both network topologies it is not known, whether the same complexity (for computing arbitrary boolean functions) is achievable in unoriented networks. It is known though [KK91] that the collection of computable functions is larger for oriented networks.
Reference: [BN89] <author> Bouabdallah, A., and Naimi, M. </author> <title> Parallel assignment to distinct identities in an arbitrary network. </title> <booktitle> In Third Annual Parallel Processing Symposium (1989), </booktitle> <publisher> H. Jelinek (Ed.). </publisher>
Reference-contexts: A similar algorithm, which sends echo's also in the second phase and therefore has a message complexity of 2E + 2 (N 1) was given by Bouabdallah and Naimi <ref> [BN89] </ref>.
Reference: [BT90] <author> Bodlaender, H. L., and Tel, G. </author> <title> Bit-optimal election on synchronous rings. </title> <journal> Inf. Proc. Lett. </journal> <volume> 36 (1990), </volume> <pages> 53-56. </pages>
Reference-contexts: Vitanyi [Vit85] has demonstrated that on an Archimedean ring O (N ) messages suffice to elect a leader. The implicit constant hidden in the big-Oh notation depends on the ratio between the various upper and lower bounds on the relative speeds of components. Bodlaender and Tel <ref> [BT90] </ref> have shown, that on a synchronous ring O (N ) messages suffice, each message can be of O (1) bits, and this is regardless of whether the processors know N or not. <p> This can be done by "coding M in time", namely, sending a start message 37 and M time units later a stop message. The receiver obtains M by measuring the time between the receipt of the two messages; see, e.g., <ref> [BT90] </ref>. Fault-Tolerance and Synchronism. Stronger synchronism assumptions are able to tolerate larger classes of faults in unreliable networks.
Reference: [CR79] <author> Chang, E. J.-H., and Roberts, R. </author> <title> An improved algorithm for decentralized extrema finding in circular arrangements of processes. Commun. </title> <booktitle> ACM 22 (1979), </booktitle> <pages> 281-283. </pages>
Reference-contexts: Furthermore, in several particular cases it has been observed that the average case complexity of the resulting algorithm is much better than its worst case complexity. Chang 10 and Roberts <ref> [CR79] </ref> proposed an election algorithm where extinction is applied to an algorithm in which the leader sends a message on a ring of processors and receives it back after N steps.
Reference: [CS92] <author> Cidon, I., and Shavitt, Y. </author> <title> Message terminate algorithms for anonymous rings of unknown size. </title> <booktitle> In 6th Int. Workshop on Distributed Algorithms (Haifa, </booktitle> <year> 1992), </year> <editor> A. Segall and S. Zaks (Eds.), </editor> <volume> vol. </volume> <booktitle> 647 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 264-276. </pages>
Reference-contexts: The orientation problem for tori was also studied by Syrotiuk et al. [SCP93]; see the end of Subsec. 2.4. (In this paper only undirected tori are considered.) There has been considerable interest in the problem of orienting a ring network <ref> [IJ93, SP87, CS92] </ref>. 1.2 Network Symmetry A fundamental notion in the study of distributed algorithms is the issue of the required symmetry of a solution.
Reference: [DS80] <author> Dijkstra, E. W., and Scholten, C. S. </author> <title> Termination detection for diffusing computations. </title> <journal> Inf. Proc. Lett. </journal> <volume> 11, 1 (1980), </volume> <pages> 1-4. </pages>
Reference-contexts: The design of termination detection algorithms has received a lot of attention during the past decade. There do exist termination detection algorithms for leader networks (Dijkstra and Scholten <ref> [DS80] </ref>) and named networks (Tan and Van Leeuwen [TL86]). The existence of a termination detection algorithm for anonymous networks of known size follows from the results in this paper or [Tel94, Sec. 8.3.4]. Corollary 7.5 implies that no termination detection algorithm exists for anonymous networks of unknown size. Acknowledgements.
Reference: [FLP85] <author> Fischer, M. J., Lynch, N. A., and Paterson, M. S. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <editor> J. </editor> <booktitle> ACM 32 (1985), </booktitle> <pages> 374-382. </pages>
Reference-contexts: A result of Moran and Wolfstahl [MW87] indicates that no deterministic orientation algorithm exists that is resilient to a crash of a single processor. This leaves open, whether randomized solutions could tolerate processor crashes or even Byzantine faults. The results of Fischer, Lynch, and Peterson <ref> [FLP85] </ref> indicate, that deterministic algorithms can coordinate non-trivial decisions in the presence of initially dead processors. <p> The receiver obtains M by measuring the time between the receipt of the two messages; see, e.g., [BT90]. Fault-Tolerance and Synchronism. Stronger synchronism assumptions are able to tolerate larger classes of faults in unreliable networks. In a landmark paper, Fischer et al. <ref> [FLP85] </ref> have shown that no non-trivial agreement can be deterministically reached between processors in an asynchronous network in the possible presence of a single crash fault.
Reference: [GHS83] <author> Gallager, R. G., Humblet, P. A., and Spira, P. M. </author> <title> A distributed algorithm for minimum weight spanning trees. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 5 (1983), </volume> <pages> 67-77. </pages>
Reference-contexts: The problem of electing a leader (in a named network) has received considerable attention during the last decade, and more efficient solutions than the one described here are known. The Spanning Tree algorithm proposed by Gallager, Humblet, and Spira <ref> [GHS83] </ref> can be used to elect a leader using O (N log N +E) messages, which implies the following, stronger result. <p> Algorithm 3: Assigning names in a leader network (leader). Extinction. To apply an algorithm for a leader network to a named network it is not necessary to pass through a separate election phase as described in Algorithm 2 or <ref> [GHS83] </ref>. It is possible to combine the election with an algorithm for a leader network by applying the extinction principle to this algorithm directly. <p> Theorem 5.2 There exists a deterministic algorithm to compute a consistent prelabeling on a named torus, which exchanges 16N messages. Computing an Orientation. An orientation can be computed by an algorithm based on the Spanning Tree algorithm by Gallager, Humblet, and Spira <ref> [GHS83] </ref>. A brief description of this algorithm follows. During the execution of the algorithm the network is partitioned into fragments, each with a fragment name. Initially, each fragment consists of a single node, and the name of the fragment is the name of the node. <p> Processor u sends a h direq i message via the two links perpendicular to link (u; v). A processor which receives both a h ditwo; ll i and a h direq i message, replies to 2 In <ref> [GHS83] </ref> it occurs that a new name is chosen for a new fragment, but the algorithm can easily be modified so as to use an existing name for the new fragment. 28 ff ff ff ff ff ? 6 6 direq direq ditwoditwo dians dione Fragment F Fragment G the h
Reference: [IJ93] <author> Israeli, A., and Jalfon, M. </author> <title> Uniform self-stabilizing ring orientation. </title> <booktitle> Information and Computation 104, 2 (1993), </booktitle> <pages> 175-196. </pages>
Reference-contexts: The orientation problem for tori was also studied by Syrotiuk et al. [SCP93]; see the end of Subsec. 2.4. (In this paper only undirected tori are considered.) There has been considerable interest in the problem of orienting a ring network <ref> [IJ93, SP87, CS92] </ref>. 1.2 Network Symmetry A fundamental notion in the study of distributed algorithms is the issue of the required symmetry of a solution.
Reference: [IR81] <author> Itai, A., and Rodeh, M. </author> <title> Symmetry breaking in distributive networks. </title> <booktitle> In Symp. on Theory of Computing (1981), </booktitle> <pages> pp. 150-158. </pages>
Reference-contexts: It was shown by An-gluin [Ang80] that anonymous networks can deterministically compute strictly less functions than leader networks. It was later shown by Itai and Rodeh <ref> [IR81] </ref> that anonymous networks can simulate leader networks with a randomized algorithm when the number of processors is known. Also, when the number of processors is not known, anonymous networks can randomizedly compute strictly less function than leader networks. <p> This implies that a leader can be elected in anonymous cliques and hypercubes, because the size of those networks N can be computed from the degree of a node. The algorithm will be presented in Subsection 2.2.2. It was shown by Itai and Rodeh <ref> [IR81] </ref> that there exists no randomized election algorithm (for rings) when the number of nodes is unknown 1 . With an argument similar to theirs it will be shown (see Subsection 5.3) that there exists no randomized algorithm to orient anonymous tori of unknown size. <p> The main result of this subsection is to prove that no such algorithm exists when the size of the torus is not known. The proof relies on techniques similar to those used by Itai and Rodeh <ref> [IR81] </ref> to establish that no (randomized) algorithm exists to compute the size of a anonymous ring network. An execution leading to a correct result on a (small) torus is finite, and hence it has a positive probability of being "accidently simulated" by a fragment of a larger torus. <p> It has turned out, that message terminating algorithms are often simpler to design and verify, because aspects related to process termination can be ignored. The Power of Termination. Itai and Rodeh <ref> [IR81] </ref> have shown that in anonymous networks message terminating algorithms are able to compute a larger class of fuctions that processor terminating algorithms. An illustration of this result is found by considering the following problem.
Reference: [KG85] <author> Korfhage, W., and Gafni, E. </author> <title> Orienting a unidirectional torus network. </title> <type> Manuscript, </type> <year> 1985. </year>
Reference-contexts: Peterson [Pet85] has presented an efficient election algorithm for oriented tori, and claimed that this algorithm can be adapted to work on unoriented tori, thus avoiding the question of computing an orientation. Korfhage and Gafni <ref> [KG85] </ref> have presented an algorithm to orient directed tori.
Reference: [KK91] <author> Kranakis, E., and Krizanc, D. </author> <title> Distributed computing on anonymous hypercube networks. </title> <booktitle> In 3rd IEEE Symp. on Parallel and Distributed Processing (Dallas, </booktitle> <year> 1991), </year> <pages> pp. 722-729. </pages>
Reference-contexts: For oriented cliques an algorithm using O (N ) messages exists; see Loui et al. [LMW86]. Kranakis and Krizanc's algorithm for computing boolean functions on hypercubes <ref> [KK91] </ref> assumes that an orientation of the hypercube is available. Similarly, Beame and Bodlaender's algorithm for computing boolean functions on torus networks [BB89] assumes that an orientation of the torus is available. <p> Similarly, Beame and Bodlaender's algorithm for computing boolean functions on torus networks [BB89] assumes that an orientation of the torus is available. For both network topologies it is not known, whether the same complexity (for computing arbitrary boolean functions) is achievable in unoriented networks. It is known though <ref> [KK91] </ref> that the collection of computable functions is larger for oriented networks. Surprisingly, although the importance of orientations is well known, only few papers have addressed the question how orientations can be computed in networks where no orientation is available.
Reference: [KK92] <author> Kranakis, E., and Krizanc, D. </author> <title> Distributed computing on Cayley networks. </title> <booktitle> In 4th IEEE Symp. on Parallel and Distributed Processing (Arlington, </booktitle> <address> TX, </address> <year> 1992). </year>
Reference-contexts: The problem can similarly be defined for other network topologies, such as shu*es, cube connected cycles, or multi dimensional grids. Orientations can easily be defined for these specific topologies, as was done for cliques, hypercubes, and tori. Kranakis and Krizanc <ref> [KK92] </ref> define Cayley networks as follows. Let G be a (finite) group generated by fg 1 ; : : : ; g k g.
Reference: [KMZ84] <author> Korach, E., Moran, S., and Zaks, S. </author> <title> Tight upper and lower bounds for some distributed algorithms for a complete network of processors. </title> <booktitle> In Symp. on Principles of Distributed Computing (1984), </booktitle> <pages> pp. 199-207. </pages>
Reference-contexts: For example, an (N log N ) lower bound was proved (see Korach et al. <ref> [KMZ84] </ref>) on the message complexity of electing a leader in an unoriented clique of N processors. For oriented cliques an algorithm using O (N ) messages exists; see Loui et al. [LMW86].
Reference: [KTZ88] <author> Korach, E., Tel, G., and Zaks, S. </author> <title> Optimal synchronization of ABD networks. </title> <booktitle> In CONCURRENCY '88 (Hamburg, </booktitle> <year> 1988), </year> <editor> F. H. Vogt (Ed.), </editor> <volume> vol. </volume> <booktitle> 335 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 353-367. </pages>
Reference-contexts: to the processors; see Vitanyi [Vit85]. * Asynchronous Bounded Delay Networks: Processing time within a processor is assumed to be neglictible, an upper bound is known on the message delay, and processors have clocks that run at the same speed (barring a very small drift); see, e.g., Korach et al. <ref> [KTZ88] </ref>. * Fully Synchronous Networks: Processors execute their local algorithm in discrete rounds, and a message sent in round i is received before the receiver executes round i + 1. <p> Awerbuch [Awe85] proposed a synchronizer for fully asynchronous networks, and his "ff-synchronizer" can be used even for anonymous (but reliable) networks. A more efficient algorithm (in terms of messages exchanged by the synchronizer) was presented by Korach et al. <ref> [KTZ88] </ref> for Asynchronous Bounded Delay Networks. The Efficiency of Synchronism. Stronger synchronism assumptions allow more efficient algorithms. This statement can be illustrated by some results on the complexity of electing a leader on a named ring network.
Reference: [LMW86] <author> Loui, M. C., Matsushita, T. A., and West, D. B. </author> <title> Election in a complete network with a sense of direction. </title> <journal> Inf. Proc. Lett. </journal> <month> 22 </month> <year> (1986), </year> <month> 185-187. </month> <title> Addendum: </title> <journal> Inf. Proc. Lett. </journal> <volume> 28:327, </volume> <year> 1988. </year> <month> 41 </month>
Reference-contexts: For example, an (N log N ) lower bound was proved (see Korach et al. [KMZ84]) on the message complexity of electing a leader in an unoriented clique of N processors. For oriented cliques an algorithm using O (N ) messages exists; see Loui et al. <ref> [LMW86] </ref>. Kranakis and Krizanc's algorithm for computing boolean functions on hypercubes [KK91] assumes that an orientation of the hypercube is available. Similarly, Beame and Bodlaender's algorithm for computing boolean functions on torus networks [BB89] assumes that an orientation of the torus is available.
Reference: [LSP82] <author> Lamport, L., Shostak, R., and Pease, M. </author> <title> The Byzantine generals problem. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 4 (1982), </volume> <pages> 382-401. </pages>
Reference-contexts: In a landmark paper, Fischer et al. [FLP85] have shown that no non-trivial agreement can be deterministically reached between processors in an asynchronous network in the possible presence of a single crash fault. On the other hand, Lamport et al. <ref> [LSP82] </ref> have shown that in a synchronous system agreement can be reached even in the presence of (up to almost N=3) Byzantine faults. These results show that no deterministic synchronizer algorithm exists for fully asynchronous systems where processor crashes may occur.
Reference: [MA89] <author> Matias, Y., and Afek, Y. </author> <title> Simple and efficient election algorithms for anonymous networks. </title> <booktitle> In 3rd Int. Workshop on Distributed Algorithms (Nice, </booktitle> <year> 1989), </year> <editor> J.-C. Bermond and M. Raynal (Eds.), </editor> <volume> vol. </volume> <booktitle> 392 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 183-194. </pages>
Reference-contexts: Open Question 2.7 What conditions must be satisfied by algorithm LNA to guarantee that the average case complexity of algorithm NNA equals log N times the complexity of algorithm LNA? 2.2.2 Randomized Algorithms for Anonymous Networks In this subsection an algorithm (based on an algorithm by Matias and Afek <ref> [MA89] </ref>) is presented to elect a leader in an anonymous network of which the number of processors is known to each processor. The algorithm operates in phases, each of which is very similar to the election algorithm for named networks.
Reference: [Mat89] <author> Mattern, F. </author> <title> Verteilte Basisalgoritmen, </title> <booktitle> vol. 226 of Informatik Fachberichte. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, 1989 (285 p.). </address>
Reference-contexts: They proved that the worst case complexity of their algorithm is O (N 2 ), and that the average case complexity is O (N log N ). Mattern <ref> [Mat89] </ref> has shown that the average case complexity of Algorithm 2 is O (E log N ). These results suggest the following (open) question.
Reference: [MW87] <author> Moran, S., and Wolfstahl, Y. </author> <title> Extended impossibility results for asynchronous complete networks. </title> <journal> Inf. Proc. Lett. </journal> <volume> 26 (1987), </volume> <pages> 145-151. </pages>
Reference-contexts: A result of Moran and Wolfstahl <ref> [MW87] </ref> indicates that no deterministic orientation algorithm exists that is resilient to a crash of a single processor. This leaves open, whether randomized solutions could tolerate processor crashes or even Byzantine faults.
Reference: [Pet85] <author> Peterson, G. L. </author> <title> Efficient algorithms for elections in meshes and complete networks. </title> <type> Tech. Rep. TR 140, </type> <institution> Dept. of Computer Science, Univ. of Rochester, Rochester, </institution> <address> NY 14627, </address> <year> 1985. </year>
Reference-contexts: It is known though [KK91] that the collection of computable functions is larger for oriented networks. Surprisingly, although the importance of orientations is well known, only few papers have addressed the question how orientations can be computed in networks where no orientation is available. Peterson <ref> [Pet85] </ref> has presented an efficient election algorithm for oriented tori, and claimed that this algorithm can be adapted to work on unoriented tori, thus avoiding the question of computing an orientation. Korfhage and Gafni [KG85] have presented an algorithm to orient directed tori.
Reference: [PKR84] <author> Pachl, J., Korach, E., and Rotem, D. </author> <title> Lower bounds for distributed maximum finding algorithms. </title> <editor> J. </editor> <booktitle> ACM 31 (1984), </booktitle> <pages> 905-918. </pages>
Reference-contexts: The Efficiency of Synchronism. Stronger synchronism assumptions allow more efficient algorithms. This statement can be illustrated by some results on the complexity of electing a leader on a named ring network. It was shown (by various authors, e.g., Pachl et al. <ref> [PKR84] </ref>) that on an asynchronous ring at least (N log N ) messages must be exchanged. Vitanyi [Vit85] has demonstrated that on an Archimedean ring O (N ) messages suffice to elect a leader.
Reference: [RSB90] <author> Ramanathan, P., Shin, K. G., and Butler, R. W. </author> <title> Fault-tolerant clock synchronization in distributed systems. </title> <booktitle> IEEE Computer (1990), </booktitle> <pages> 33-42. </pages>
Reference-contexts: The implementation of fault-tolerant systems usually relies on the availability of clocks and an upper bound on message delays (the Asynchronous Bounded Delay assumption). The fault-tolerant synchronization of clocks (see Ramanathan et al. <ref> [RSB90] </ref> for an overview article) is an important step in the implementation of a fully synchronous network. 7.2 Other Topologies In this paper the orientation problem was studied for cliques, hypercubes and tori.
Reference: [San84] <author> Santoro, N. </author> <title> Sense of direction, topological awareness, and communication complexity. </title> <journal> ACM SIGACT News 16 (1984), </journal> <pages> 50-56. </pages>
Reference-contexts: includes brief discussions of some of the most challenging problems in distributed computing, including fault-tolerance, synchronism, and termination detection. fl The work of the author was supported by the ESPRIT Basic Research Action No. 7141 (project ALCOM II: Algorithms and Complexity). 1 1.1 Computing Orientations It was demonstrated by Santoro <ref> [San84] </ref> that the availability of an orientation decreases the message complexity of important computations in networks of several topologies. (A formal definition of orientations is deferred to Subsection 2.1).
Reference: [SCP93] <author> Syrotiuk, V. R., Colbourn, C. J., and Pachl, J. </author> <title> Wang tilings and distributed orientation on anonymous torus networks. </title> <booktitle> In 7th Int. Workshop on Distributed Algorithms (Lausanne, </booktitle> <year> 1993), </year> <editor> A. Schiper (Ed.), </editor> <volume> vol. </volume> <booktitle> 725 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Korfhage and Gafni [KG85] have presented an algorithm to orient directed tori. The orientation problem for tori was also studied by Syrotiuk et al. <ref> [SCP93] </ref>; see the end of Subsec. 2.4. (In this paper only undirected tori are considered.) There has been considerable interest in the problem of orienting a ring network [IJ93, SP87, CS92]. 1.2 Network Symmetry A fundamental notion in the study of distributed algorithms is the issue of the required symmetry of <p> Labeling L does not satisfy this property as observed above. fl The problem of deterministically orienting anonymous tori was addressed from a different point of view by Syrotiuk et al. <ref> [SCP93] </ref>. Syrotiuk et al. studied the question of restricting the permissible initial permutations such that a deterministic solution becomes possible. 3 The Orientation of Cliques In this section algorithms for the orientation of cliques will be given.
Reference: [SP87] <author> Syrotiuk, V., and Pachl, J. </author> <title> A distributed ring orientation problem. </title> <booktitle> In 2nd Int. Workshop on Distributed Algorithms (Amsterdam, </booktitle> <year> 1987), </year> <editor> J. van Leeuwen (Ed.), </editor> <volume> vol. </volume> <booktitle> 312 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 332-336. </pages>
Reference-contexts: The orientation problem for tori was also studied by Syrotiuk et al. [SCP93]; see the end of Subsec. 2.4. (In this paper only undirected tori are considered.) There has been considerable interest in the problem of orienting a ring network <ref> [IJ93, SP87, CS92] </ref>. 1.2 Network Symmetry A fundamental notion in the study of distributed algorithms is the issue of the required symmetry of a solution.
Reference: [Tel94] <author> Tel, G. </author> <title> Introduction to Distributed Algorithms. </title> <publisher> Cambridge University Press, </publisher> <address> Cam-bridge, U.K., </address> <year> 1994. </year>
Reference-contexts: The initiator terminates after receipt of a message (either an echo or a flooding message) from all of its neighbors. When this happens, all processors have confirmed the receipt of the initiator's identity (as proved, for example, in <ref> [Tel94, Sec. 6.2.3] </ref>). <p> The name n of the initiator is transmitted in a h name; n i message. The algorithm for leader election (Algorithm 2) is obtained from the Echo algorithm through the application of a mechanism called extinction (cf. <ref> [Tel94, Sec. 7.3.1] </ref>); see also below. To elect a leader, each processor initiates the flooding of its own identity using the Echo algorithm. However, processor v processes h name; n i messages only if n name v . <p> There do exist termination detection algorithms for leader networks (Dijkstra and Scholten [DS80]) and named networks (Tan and Van Leeuwen [TL86]). The existence of a termination detection algorithm for anonymous networks of known size follows from the results in this paper or <ref> [Tel94, Sec. 8.3.4] </ref>. Corollary 7.5 implies that no termination detection algorithm exists for anonymous networks of unknown size. Acknowledgements. The members of the Utrecht Distributed Algorithms Group are acknowledged for their stimulating discussions of the subject.
Reference: [TL86] <author> Tan, R. B., and Leeuwen, J. van. </author> <title> General symmetric distributed termination detection. </title> <type> Tech. Rep. </type> <institution> RUU-CS-86-2, Dept. of Computer Science, Univ. of Utrecht, </institution> <address> The Netherlands, </address> <year> 1986. </year>
Reference-contexts: The design of termination detection algorithms has received a lot of attention during the past decade. There do exist termination detection algorithms for leader networks (Dijkstra and Scholten [DS80]) and named networks (Tan and Van Leeuwen <ref> [TL86] </ref>). The existence of a termination detection algorithm for anonymous networks of known size follows from the results in this paper or [Tel94, Sec. 8.3.4]. Corollary 7.5 implies that no termination detection algorithm exists for anonymous networks of unknown size. Acknowledgements.
Reference: [Vit85] <author> Vit anyi, P. M. B. </author> <title> Time-driven algorithms for distributed control. </title> <type> Tech. Rep. </type> <institution> CS-R8510, Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, </address> <year> 1985. </year> <month> 42 </month>
Reference-contexts: The following four models can be distinguished. * Fully Asynchronous Networks: The model that is considered in this paper. * Archimedean Networks: Bounds on the relative speeds of components do exist; they can be very rough, however, and need not be known to the processors; see Vitanyi <ref> [Vit85] </ref>. * Asynchronous Bounded Delay Networks: Processing time within a processor is assumed to be neglictible, an upper bound is known on the message delay, and processors have clocks that run at the same speed (barring a very small drift); see, e.g., Korach et al. [KTZ88]. * Fully Synchronous Networks: Processors <p> This statement can be illustrated by some results on the complexity of electing a leader on a named ring network. It was shown (by various authors, e.g., Pachl et al. [PKR84]) that on an asynchronous ring at least (N log N ) messages must be exchanged. Vitanyi <ref> [Vit85] </ref> has demonstrated that on an Archimedean ring O (N ) messages suffice to elect a leader. The implicit constant hidden in the big-Oh notation depends on the ratio between the various upper and lower bounds on the relative speeds of components.
References-found: 31

