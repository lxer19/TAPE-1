URL: ftp://ftp.cs.umd.edu/pub/papers/papers/2820/2820.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Parallel R-trees  
Author: Ibrahim Kamel and Christos Faloutsos 
Note: Also, a member of UMIACS. This research was sponsored partially by the National Science Foundation under the grants IRI-8719458 and IRI-8958546, by a Department of Commerce Joint Statistical Agreement JSA-91-9, by a donation from EMPRESS Software Inc. and by a donation from  
Address: College Park, MD 20742  
Affiliation: Department of CS University of Maryland  Thinking Machines Inc..  
Abstract: We consider the problem of exploiting parallelism to accelerate the performance of spatial access methods and specifically, R-trees [11]. Our goal is to design a server for spatial data, so that to maximize the throughput of range queries. This can be achieved by (a) maximizing parallelism for large range queries, and (b) by engaging as few disks as possible on point queries [22]. We propose a simple hardware architecture consisting of one processor with several disks attached to it. On this architecture, we propose to distribute the nodes of a traditional R-tree, with cross-disk pointers (`Multiplexed' R-tree). The R-tree code is identical to the one for a single-disk R-tree, with the only addition that we have to decide which disk a newly created R-tree node should be stored in. We propose and examine several criteria to choose a disk for a new node. The most successful one, termed `proximity index' or PI, estimates the similarity of the new node with the other R-tree nodes already on a disk, and chooses the disk with the lowest similarity. Experimental results show that our scheme consistently outperforms all the other heuristics for node-to-disk assignments, achieving up to 55% gains over the Round Robin one. Experiments also indicate that the multiplexed R-tree with PI heuristic gives better response time than the disk-stripping (="Super-node") approach, and imposes lighter load on the I/O sub-system. The speed up of our method is close to linear speed up, increasing with the size of the queries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Walid G. Aref and Hanan Samet. </author> <title> Optimization strategies for spatial query processing. </title> <booktitle> Proc. of VLDB (Very Large Data Bases), </booktitle> <pages> pages 81-90, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Section 6 gives the conclusions and directions for future research. 2 Survey Several spatial access methods have been proposed. A recent survey can be found in [21]. These classification includes methods that transform rectangles into points in a higher dimensionality space [12], methods that use linear quadtrees [8] <ref> [1] </ref> or, equivalently, the z-ordering [17] or other space filling curves [6] [13], and finally, methods based on trees (k-d-trees [4], k-d-B-trees [19], hB-trees [16], cell-trees [9] e.t.c.) One of the most characteristic approaches in the last class is the the R-tree [11].
Reference: [2] <author> D. Ballard and C. Brown. </author> <title> Computer Vision. </title> <publisher> Prentice Hall, </publisher> <year> 1982. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography [26], Computer-Aided Design (CAD) [18], [10], computer vision and robotics <ref> [2] </ref>, traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [25], temporal databases, where time can be considered as one more dimension [15], scientific databases, with spatial-temporal data, etc.
Reference: [3] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The r*-tree: an efficient and robust access method for points and rectangles. </title> <booktitle> ACM SIGMOD, </booktitle> <pages> pages 322-331, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Extensions, variations and improvements to the original R-tree structure include the packed R-trees [20], the R + -tree [23] and the R fl -tree <ref> [3] </ref>. There is also much work on how to organize traditional file structures on multi-disk or multi-processor machines. For the B-tree, Pramanic and Kim proposed PNB-tree [24] which uses a `super-node' (`super-page') scheme on synchronized disks.
Reference: [4] <author> J.L. Bentley. </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> CACM, </journal> <volume> 18(9) </volume> <pages> 509-517, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: A recent survey can be found in [21]. These classification includes methods that transform rectangles into points in a higher dimensionality space [12], methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [17] or other space filling curves [6] [13], and finally, methods based on trees (k-d-trees <ref> [4] </ref>, k-d-B-trees [19], hB-trees [16], cell-trees [9] e.t.c.) One of the most characteristic approaches in the last class is the the R-tree [11]. Due to space limitations, Fanout=3 Dotted rectangles indicate queries we omit a detailed description of the method.
Reference: [5] <author> D. DeWitt, R.H. Gerber, G. Graefe, </author> <title> M.L. Heytens, K.B. </title> <editor> Kumar, and M. </editor> <title> Muralikrishna. Gamma a high performance dataflow database machine. </title> <booktitle> In Proc. 12th International Conference on VLDB, </booktitle> <pages> pages 228-237, </pages> <address> Kyoto, Japan, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: We do not consider multi-processor architectures, because multiple CPUs will probably be an over-kill, increasing the dollar cost and the complexity of the system without relieving the I/O bottleneck. Moreover, a multi-processor loosely-coupled architecture, like GAMMA <ref> [5] </ref>, will have communication costs, which are non-existing in the proposed single-processor architecture. In addition, our architecture is simple: it requires only widely available off-the-shelf components, without the need for synchronized disks, multiple CPU's, or specialized operating system. On this architecture, we will distribute the nodes of a traditional R-tree.
Reference: [6] <author> C. Faloutsos and S. Roseman. </author> <title> Fractals for secondary key retrieval. </title> <booktitle> Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 247-252, </pages> <month> March </month> <year> 1989. </year> <note> also available as UMIACS-TR-89-47 and CS-TR-2242. </note>
Reference-contexts: A recent survey can be found in [21]. These classification includes methods that transform rectangles into points in a higher dimensionality space [12], methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [17] or other space filling curves <ref> [6] </ref> [13], and finally, methods based on trees (k-d-trees [4], k-d-B-trees [19], hB-trees [16], cell-trees [9] e.t.c.) One of the most characteristic approaches in the last class is the the R-tree [11]. Due to space limitations, Fanout=3 Dotted rectangles indicate queries we omit a detailed description of the method.
Reference: [7] <author> H. Garcia-Molina and K. Salem. </author> <title> The impact of disk stripping on reliability. </title> <journal> IEEE Database Engineering, </journal> <volume> 11(1) </volume> <pages> 26-39, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: To retrieve a node from the R-tree we read in parallel all d pages that constitute this node. In other words, we `stripe' the super-node on the d disks, using page-stripping <ref> [7] </ref>. Almost identical performance will be obtained with bit-or byte-level stripping. This scheme can work both with synchronized or unsynchronized disks.
Reference: [8] <author> I. </author> <title> Gargantini. An effective way to represent quadtrees. </title> <journal> Comm. of ACM (CACM), </journal> <volume> 25(12) </volume> <pages> 905-910, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: Section 6 gives the conclusions and directions for future research. 2 Survey Several spatial access methods have been proposed. A recent survey can be found in [21]. These classification includes methods that transform rectangles into points in a higher dimensionality space [12], methods that use linear quadtrees <ref> [8] </ref> [1] or, equivalently, the z-ordering [17] or other space filling curves [6] [13], and finally, methods based on trees (k-d-trees [4], k-d-B-trees [19], hB-trees [16], cell-trees [9] e.t.c.) One of the most characteristic approaches in the last class is the the R-tree [11].
Reference: [9] <author> O. Gunther. </author> <title> The cell tree: an index for geometric data. </title> <note> Memorandum No. </note> <institution> UCB/ERL M86/89, Univ. of Cali-fornia, Berkeley, </institution> <month> December </month> <year> 1986. </year>
Reference-contexts: These classification includes methods that transform rectangles into points in a higher dimensionality space [12], methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [17] or other space filling curves [6] [13], and finally, methods based on trees (k-d-trees [4], k-d-B-trees [19], hB-trees [16], cell-trees <ref> [9] </ref> e.t.c.) One of the most characteristic approaches in the last class is the the R-tree [11]. Due to space limitations, Fanout=3 Dotted rectangles indicate queries we omit a detailed description of the method. Figure 1 illustrates data rectangles (in black), organized in an R-tree with fanout 3.
Reference: [10] <author> A. Guttman. </author> <title> New Features for Relational Database Systems to Support CAD Applications. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <month> June </month> <year> 1984. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography [26], Computer-Aided Design (CAD) [18], <ref> [10] </ref>, computer vision and robotics [2], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [25], temporal databases, where time can be considered as one more dimension [15], scientific databases, with spatial-temporal data, etc.
Reference: [11] <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 47-57, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: space [12], methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [17] or other space filling curves [6] [13], and finally, methods based on trees (k-d-trees [4], k-d-B-trees [19], hB-trees [16], cell-trees [9] e.t.c.) One of the most characteristic approaches in the last class is the the R-tree <ref> [11] </ref>. Due to space limitations, Fanout=3 Dotted rectangles indicate queries we omit a detailed description of the method. Figure 1 illustrates data rectangles (in black), organized in an R-tree with fanout 3. Figure 2 shows the file structure for the same R-tree, where nodes correspond to disk pages. <p> We used both the linear and the quadratic splitting algorithm of Guttman <ref> [11] </ref>. The quadratic algorithm resulted in better R-trees, i.e., with smaller father nodes. The exponential algorithm was very slow and it was not used. Unless otherwise stated, all the results we present are based on R-trees that used the quadratic split algorithm.
Reference: [12] <author> K. Hinrichs and J. Nievergelt. </author> <title> The grid file: a data structure to support proximity queries on spatial objects. </title> <booktitle> Proc. of the WG'83 (Intern. Workshop on Graph Theoretic Concepts in Computer Science), </booktitle> <pages> pages 100-113, </pages> <year> 1983. </year>
Reference-contexts: Section 5 presents experimental results and observations. Section 6 gives the conclusions and directions for future research. 2 Survey Several spatial access methods have been proposed. A recent survey can be found in [21]. These classification includes methods that transform rectangles into points in a higher dimensionality space <ref> [12] </ref>, methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [17] or other space filling curves [6] [13], and finally, methods based on trees (k-d-trees [4], k-d-B-trees [19], hB-trees [16], cell-trees [9] e.t.c.) One of the most characteristic approaches in the last class is the the R-tree [11]. <p> Consider two line segments R and S where R=(r start , r end ) and S=(s start , s end ). If we represent each segment X as the point (x start , x end ), the segments R and S are transformed to 2-dimensional points <ref> [12] </ref> as shown in Figure 7. In the same Figure, the area within the dashed lines is a measure of the number of all the possible query segments, ie, queries whose size is 1 and who intersect the unit segment.
Reference: [13] <author> H.V. Jagadish. </author> <title> Linear clustering of objects with multiple attributes. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <pages> pages 332-342, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: A recent survey can be found in [21]. These classification includes methods that transform rectangles into points in a higher dimensionality space [12], methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [17] or other space filling curves [6] <ref> [13] </ref>, and finally, methods based on trees (k-d-trees [4], k-d-B-trees [19], hB-trees [16], cell-trees [9] e.t.c.) One of the most characteristic approaches in the last class is the the R-tree [11]. Due to space limitations, Fanout=3 Dotted rectangles indicate queries we omit a detailed description of the method.
Reference: [14] <author> Ibrahim Kamel and Christos Faloutsos. </author> <title> Parallel r-trees. </title> <booktitle> Proc. of ACM SIGMOD Conf., </booktitle> <pages> pages 195-204, </pages> <month> June </month> <year> 1992. </year> <note> Also available as Tech. Report UMIACS TR 92-1, CS-TR-2820. </note>
Reference-contexts: Then: s = R 1 (q)=R d (q) We examined exclusively the multiplexed R-tree method, with the PI heuristic, since it seems to offer the best performance. Due to space limitations, we report here the conclusions only; the details are in a technical report <ref> [14] </ref>. The major result was that the speed up is high, eg. 84% of the linear speedup, for cover quotient c=2, page size P =4 and for query side size q s =0.25.
Reference: [15] <author> Curtis P. Kolovson and Michael Stonebraker. </author> <title> Segment indexes: Dynamic indexing techniques for multidimensional interval data. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 138-147, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: in many applications, including: Cartography [26], Computer-Aided Design (CAD) [18], [10], computer vision and robotics [2], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [25], temporal databases, where time can be considered as one more dimension <ref> [15] </ref>, scientific databases, with spatial-temporal data, etc. In the above applications, one of the most typical queries is the range query: Given a rectangle, retrieve all the elements that intersect it.
Reference: [16] <author> David B. Lomet and Betty Salzberg. </author> <title> The hb-tree: a multiattribute indexing method with good guaranteed performance. </title> <journal> ACM TODS, </journal> <volume> 15(4) </volume> <pages> 625-658, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: These classification includes methods that transform rectangles into points in a higher dimensionality space [12], methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [17] or other space filling curves [6] [13], and finally, methods based on trees (k-d-trees [4], k-d-B-trees [19], hB-trees <ref> [16] </ref>, cell-trees [9] e.t.c.) One of the most characteristic approaches in the last class is the the R-tree [11]. Due to space limitations, Fanout=3 Dotted rectangles indicate queries we omit a detailed description of the method. Figure 1 illustrates data rectangles (in black), organized in an R-tree with fanout 3.
Reference: [17] <author> J. Orenstein. </author> <title> Spatial query processing in an object-oriented database system. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 326-336, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: A recent survey can be found in [21]. These classification includes methods that transform rectangles into points in a higher dimensionality space [12], methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering <ref> [17] </ref> or other space filling curves [6] [13], and finally, methods based on trees (k-d-trees [4], k-d-B-trees [19], hB-trees [16], cell-trees [9] e.t.c.) One of the most characteristic approaches in the last class is the the R-tree [11].
Reference: [18] <author> J. K. Ousterhout, G. T. Hamachi, R. N. Mayo, W. S. Scott, and G. S. Taylor. </author> <title> Magic: a vlsi layout system. </title> <booktitle> In 21st Design Automation Conference, </booktitle> <pages> pages 152 - 159, </pages> <address> Alburquerque, NM, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography [26], Computer-Aided Design (CAD) <ref> [18] </ref>, [10], computer vision and robotics [2], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [25], temporal databases, where time can be considered as one more dimension [15], scientific databases, with spatial-temporal data, etc.
Reference: [19] <author> J.T. Robinson. </author> <title> The k-d-b-tree: a search structure for large multidimensional dynamic indexes. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 10-18, </pages> <year> 1981. </year>
Reference-contexts: These classification includes methods that transform rectangles into points in a higher dimensionality space [12], methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [17] or other space filling curves [6] [13], and finally, methods based on trees (k-d-trees [4], k-d-B-trees <ref> [19] </ref>, hB-trees [16], cell-trees [9] e.t.c.) One of the most characteristic approaches in the last class is the the R-tree [11]. Due to space limitations, Fanout=3 Dotted rectangles indicate queries we omit a detailed description of the method.
Reference: [20] <author> N. Roussopoulos and D. Leifker. </author> <title> Direct spatial search on pictorial databases using packed r-trees. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <month> May </month> <year> 1985. </year>
Reference-contexts: In the rest of this paper, the term `node' and the term `page' will be used interchangeably, except when discussing about the super-nodes method, subsection 3.2. Extensions, variations and improvements to the original R-tree structure include the packed R-trees <ref> [20] </ref>, the R + -tree [23] and the R fl -tree [3]. There is also much work on how to organize traditional file structures on multi-disk or multi-processor machines. For the B-tree, Pramanic and Kim proposed PNB-tree [24] which uses a `super-node' (`super-page') scheme on synchronized disks.
Reference: [21] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: It also introduces the `proximity' measure and derives the formulas for it. Section 5 presents experimental results and observations. Section 6 gives the conclusions and directions for future research. 2 Survey Several spatial access methods have been proposed. A recent survey can be found in <ref> [21] </ref>.
Reference: [22] <author> Bernhard Seeger and Per-Ake Larson. </author> <title> Multi-disk b-trees. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 138-147, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: There is also much work on how to organize traditional file structures on multi-disk or multi-processor machines. For the B-tree, Pramanic and Kim proposed PNB-tree [24] which uses a `super-node' (`super-page') scheme on synchronized disks. Seeger and Larson <ref> [22] </ref> proposed an algorithm to distribute the nodes of the B-tree on different disks. Their algorithm takes into account not only the response time of the individual query but also, the throughput of the system. Parallelization of the R-trees is an unexplored topic, to the best of the authors' knowledge.
Reference: [23] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The r+ tree: a dynamic index for multi-dimensional objects. </title> <booktitle> In Proc. 13th International Conference on VLDB, </booktitle> <pages> pages 507-518, </pages> <address> England,, </address> <month> September </month> <year> 1987. </year> <note> also available as SRC-TR-87-32, UMIACS-TR-87-3, CS-TR-1795. </note>
Reference-contexts: In the rest of this paper, the term `node' and the term `page' will be used interchangeably, except when discussing about the super-nodes method, subsection 3.2. Extensions, variations and improvements to the original R-tree structure include the packed R-trees [20], the R + -tree <ref> [23] </ref> and the R fl -tree [3]. There is also much work on how to organize traditional file structures on multi-disk or multi-processor machines. For the B-tree, Pramanic and Kim proposed PNB-tree [24] which uses a `super-node' (`super-page') scheme on synchronized disks.
Reference: [24] <author> S.Pramanik and M.H. Kim. </author> <title> Parallel processing of large node b-trees. </title> <journal> Trans on Computers, </journal> <volume> 39(9) </volume> <pages> 1208-1212, 90. </pages>
Reference-contexts: There is also much work on how to organize traditional file structures on multi-disk or multi-processor machines. For the B-tree, Pramanic and Kim proposed PNB-tree <ref> [24] </ref> which uses a `super-node' (`super-page') scheme on synchronized disks. Seeger and Larson [22] proposed an algorithm to distribute the nodes of the B-tree on different disks. Their algorithm takes into account not only the response time of the individual query but also, the throughput of the system.
Reference: [25] <author> M. Stonebraker, T. Sellis, and E. Hanson. </author> <title> Rule indexing implementations in database systems. </title> <booktitle> In Proceedings of the First International Conference on Expert Database Systems, </booktitle> <address> Charleston, SC, </address> <month> April </month> <year> 1986. </year>
Reference-contexts: Spatial data arise in many applications, including: Cartography [26], Computer-Aided Design (CAD) [18], [10], computer vision and robotics [2], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems <ref> [25] </ref>, temporal databases, where time can be considered as one more dimension [15], scientific databases, with spatial-temporal data, etc. In the above applications, one of the most typical queries is the range query: Given a rectangle, retrieve all the elements that intersect it.
Reference: [26] <author> M. White. N-Trees: </author> <title> Large Ordered Indexes for MultiDimensional Space. Application Mathematics Research Staff, Statistical Research Division, </title> <type> U.S. </type> <institution> Bureau of the Census, </institution> <month> December </month> <year> 1981. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography <ref> [26] </ref>, Computer-Aided Design (CAD) [18], [10], computer vision and robotics [2], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [25], temporal databases, where time can be considered as one more dimension [15], scientific databases, with spatial-temporal data,
References-found: 26

