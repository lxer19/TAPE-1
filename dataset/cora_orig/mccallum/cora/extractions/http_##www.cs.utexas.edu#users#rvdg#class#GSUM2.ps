URL: http://www.cs.utexas.edu/users/rvdg/class/GSUM2.ps
Refering-URL: http://www.cs.utexas.edu/users/rvdg/class/materials.html
Root-URL: 
Title: Global Combine Algorithms for 2-D Meshes With Wormhole Routing  
Author: M. Barnett R. Littlefield D. G. Payne R. van de Geijn 
Abstract: The problem of performing a global combine (summation) operation on distributed memory computers using a two-dimensional mesh interconnect with wormhole routing is considered. We present algorithms that are asymptotically optimal for short vectors (O(log(p)) for p processing nodes) and for long vectors (O(n) for n data elements per node), as well as hybrid algorithms that are superior for intermediate n. The algorithms are analyzed using detailed performance models that include the effects of link conflicts and other characteristics of the underlying communication system. The models are validated using experimental data from the Intel Touchstone DELTA computer. We show that no one algorithm is optimal for all vector lengths; rather, each of the presented algorithms is superior under some circumstances.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Bailey, J. Barton, T. Lasinski, and H. Simon, </author> <title> The NAS Parallel Benchmarks, </title> <type> Report RNR-01-002, </type> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: The global combine is also useful as a component of other general purpose algorithms, including both dense and sparse linear algebra. It occurs in algorithms as simple as distributed matrix-vector multiply and as complex as reducing a matrix to condensed form [5] and conjugate gradient methods <ref> [1] </ref>. Global combine is communication intensive, and must be properly implemented in order to be efficient. It is important not only to provide a highly optimized library routine, but also to expose the techniques used to implement the combine, since frequently a customization must be performed to suit the application.
Reference: [2] <author> M. Barnett, D.G. Payne, and R. van de Geijn. </author> <title> Optimal broadcasting in mesh-connected architectures. </title> <institution> Computer Science report TR-91-38, Univ. of Texas, </institution> <year> 1991. </year>
Reference-contexts: Network conflicts are avoided by transferring data over short distances when many nodes are active and longer distances when fewer nodes are active <ref> [2] </ref>. The fanin stage of this algorithm has d = log (p) steps. View each node's index number in binary. Initially, all nodes are active.
Reference: [3] <author> M. Barnett, R. Littlefield, D.G. Payne, and R. van de Geijn. </author> <title> Efficient Communication Primitives on Mesh Architectures with Hardware Routing, </title> <booktitle> Sixth SIAM Conf. on Par. Proc. for Sci. Comp., </booktitle> <address> Norfolk, Virginia, March 22-24, </address> <year> 1993. </year>
Reference-contexts: We have previously summarized some of the early stages of this work in conference proceedings <ref> [3, 4] </ref>. 2 System Model and Notation Our target system is assumed to be a 2-D (r rows by c columns) mesh comprising p = rc processing nodes, each having communication links to only its horizontal and vertical neighbors. The nodes are numbered 0 to p 1 in row-major order.
Reference: [4] <author> M. Barnett, R. Littlefield, D.G. Payne, and R. van de Geijn, </author> <title> Global Combine on Mesh Architectures with Wormhole Routing, </title> <booktitle> to appear in the proceedings of the 7th International Parallel Processing Symposium, </booktitle> <address> Newport Beach, CA, </address> <month> April 13-16, </month> <year> 1993. </year>
Reference-contexts: We have previously summarized some of the early stages of this work in conference proceedings <ref> [3, 4] </ref>. 2 System Model and Notation Our target system is assumed to be a 2-D (r rows by c columns) mesh comprising p = rc processing nodes, each having communication links to only its horizontal and vertical neighbors. The nodes are numbered 0 to p 1 in row-major order.
Reference: [5] <author> J. Dongarra and R. van de Geijn, </author> <title> Reduction to Condensed Form on Distributed Memory Architectures, </title> <journal> Parallel Computing, </journal> <volume> 18, </volume> <pages> pp. 973-982, </pages> <year> 1992. </year>
Reference-contexts: The global combine is also useful as a component of other general purpose algorithms, including both dense and sparse linear algebra. It occurs in algorithms as simple as distributed matrix-vector multiply and as complex as reducing a matrix to condensed form <ref> [5] </ref> and conjugate gradient methods [1]. Global combine is communication intensive, and must be properly implemented in order to be efficient.
Reference: [6] <author> M. Feyereisen and R. A. Kendall, </author> <title> An efficient implementation of the Direct-SCF Algorithm on Parallel Computer Architectures, </title> <journal> Theoretica Chimica Acta, </journal> <note> in press. </note>
Reference-contexts: The replicated storage technique is simple and effective in many application domains, such as electronic structure and molecular dynamics methods in computational chemistry <ref> [6, 10] </ref>. The global combine is also useful as a component of other general purpose algorithms, including both dense and sparse linear algebra. It occurs in algorithms as simple as distributed matrix-vector multiply and as complex as reducing a matrix to condensed form [5] and conjugate gradient methods [1].
Reference: [7] <author> C.-T. Ho and S. L. Johnsson, </author> <title> Distributed Routing Algorithms for Broadcasting and Personalized Communication in Hypercubes, </title> <booktitle> In Proceedings of the 1986 International Conference on Parallel Processing, </booktitle> <pages> pages 640-648, </pages> <publisher> IEEE, </publisher> <year> 1986. </year>
Reference-contexts: This results in conflict-free communications, which makes algorithms for the hypercube relatively simple to implement and analyze (though not necessarily to construct). The state of the art for performing the global combine on hyper-cubes is described in <ref> [7, 11, 12] </ref>. As we show in this paper, global communications on a mesh are more complicated: one must balance the use of long-distance connections, which minimize startup costs, against the use of local connections, which minimize network conflicts.
Reference: [8] <author> S.L. Lillevik, </author> <title> The Touchstone 30 Gigaflop DELTA Prototype. </title> <booktitle> In Sixth Distributed Memory Computing Conference Proceedings, </booktitle> <pages> pages 671-677. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year> <month> 18 </month>
Reference-contexts: We further compare those results with the performance model predictions presented in that section. The Intel Touchstone DELTA computer system is a prototype 2-D mesh multicomputer that incorporates a 16fi32 mesh of i860/XR processing nodes with a wormhole routing interconnection network <ref> [8] </ref>. Its communication characteristics are described in [9]. (The notation used in [9] is different from that used here.
Reference: [9] <author> R. Littlefield. </author> <title> Characterizing and Tuning Communications Performance on the Touchstone DELTA and iPSC/860. </title> <booktitle> In Proceedings of the 1992 Intel User's Group Meeting, </booktitle> <address> Dallas, TX, </address> <month> October 4-7. </month>
Reference-contexts: For example, with this approach it is easy to model the effects of using different communication protocols at various steps of the algorithm, an enhancement that can make a significant improvement on some machines <ref> [9] </ref>. <p> We further compare those results with the performance model predictions presented in that section. The Intel Touchstone DELTA computer system is a prototype 2-D mesh multicomputer that incorporates a 16fi32 mesh of i860/XR processing nodes with a wormhole routing interconnection network [8]. Its communication characteristics are described in <ref> [9] </ref>. (The notation used in [9] is different from that used here. Our ff 1way and fi 1way are equivalent to what is described in [9] as a "loopback test"; our ff xchg and fi xchg are equivalent to a 2-processor "shift"; and our ff shft and fi shft are equivalent <p> The Intel Touchstone DELTA computer system is a prototype 2-D mesh multicomputer that incorporates a 16fi32 mesh of i860/XR processing nodes with a wormhole routing interconnection network [8]. Its communication characteristics are described in <ref> [9] </ref>. (The notation used in [9] is different from that used here. Our ff 1way and fi 1way are equivalent to what is described in [9] as a "loopback test"; our ff xchg and fi xchg are equivalent to a 2-processor "shift"; and our ff shft and fi shft are equivalent to a "shift" longer than <p> Its communication characteristics are described in <ref> [9] </ref>. (The notation used in [9] is different from that used here. Our ff 1way and fi 1way are equivalent to what is described in [9] as a "loopback test"; our ff xchg and fi xchg are equivalent to a 2-processor "shift"; and our ff shft and fi shft are equivalent to a "shift" longer than 2 processors.) Some of the DELTA's characteristics are particularly important to understand our experimental results. <p> This observation, while not illustrated in the current paper, is further justification for the appearance of fi xchg and fi shft as separate parameters.) * Two operating system kernels are available on the DELTA <ref> [9] </ref>. In order to illustrate the performance of the basic DELTA technology, we used the "fast" kernel. Under the more robust production kernel, most timings would approximately double. As shown in Figure 5, the first two characteristics have some effect on the relative performance of the various global combine algorithms.
Reference: [10] <author> W. Smith, </author> <title> Molecular dynamics on hypercube parallel computers, </title> <journal> Computer Physics Communications 62 (1991) 229-248. </journal>
Reference-contexts: The replicated storage technique is simple and effective in many application domains, such as electronic structure and molecular dynamics methods in computational chemistry <ref> [6, 10] </ref>. The global combine is also useful as a component of other general purpose algorithms, including both dense and sparse linear algebra. It occurs in algorithms as simple as distributed matrix-vector multiply and as complex as reducing a matrix to condensed form [5] and conjugate gradient methods [1].
Reference: [11] <author> R.A. van de Geijn. </author> <title> Efficient global combine operations. </title> <booktitle> In Sixth Distributed Memory Computing Conference Proceedings, </booktitle> <pages> pages 291-294. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: This results in conflict-free communications, which makes algorithms for the hypercube relatively simple to implement and analyze (though not necessarily to construct). The state of the art for performing the global combine on hyper-cubes is described in <ref> [7, 11, 12] </ref>. As we show in this paper, global communications on a mesh are more complicated: one must balance the use of long-distance connections, which minimize startup costs, against the use of local connections, which minimize network conflicts. <p> The resulting cost for the hybrid is the same as recursive halving and bidirectional exchange at the respective extremes, and lower for intermediate n. On hypercubes, a formula for the optimal k has been derived <ref> [11, 12] </ref>. On the mesh, the many relationships between parameter values complicates the analytic determination of k. However, the optimal k for a specific n can easily be determined numerically due to the small number of possible values to be considered.
Reference: [12] <author> R.A. van de Geijn, </author> <title> On Global Combine Operations, </title> <note> to appear in Journal of Parallel and Distributed Computing. 19 </note>
Reference-contexts: This results in conflict-free communications, which makes algorithms for the hypercube relatively simple to implement and analyze (though not necessarily to construct). The state of the art for performing the global combine on hyper-cubes is described in <ref> [7, 11, 12] </ref>. As we show in this paper, global communications on a mesh are more complicated: one must balance the use of long-distance connections, which minimize startup costs, against the use of local connections, which minimize network conflicts. <p> The resulting cost for the hybrid is the same as recursive halving and bidirectional exchange at the respective extremes, and lower for intermediate n. On hypercubes, a formula for the optimal k has been derived <ref> [11, 12] </ref>. On the mesh, the many relationships between parameter values complicates the analytic determination of k. However, the optimal k for a specific n can easily be determined numerically due to the small number of possible values to be considered.
References-found: 12

