URL: http://www.cs.brown.edu/cgc/papers/gt-nmcfa-97.ps.gz
Refering-URL: http://www.cs.brown.edu/people/rt/papers/recent-papers/recent-papers.html
Root-URL: http://www.cs.brown.edu
Email: fag,rtg@cs.brown.edu  
Title: A New Minimum Cost Flow Algorithm with Applications to Graph Drawing subquadratic algorithm for bend
Author: Ashim Garg and Roberto Tamassia 
Note: log n). This is the first  for this problem was O(n 2 log n) [19].  
Address: Providence, RI 02912-1910, USA  
Affiliation: Department of Computer Science Brown University  
Abstract: Let N be a single-source single-sink flow network with n nodes, m arcs, and positive arc costs. We present a pseudo-polynomial algorithm that computes a maximum flow of minimum cost for N in time O( 3=4 m log n), where is the cost of the flow. This improves upon previously known methods for networks where the minimum cost of the flow is small. We also show an application of our flow algorithm to a well-known graph drawing problem. Namely, we show how to compute a planar orthogonal drawing with the minimum number of bends for an n-vertex embedded planar graph in time O(n 7=4 p p
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R.K. Ahuja, T.L. Magnanti, and J.B. Orlin. </author> <title> Network Flows: Theory, Algorithms, and Applications. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Minimum cost flow is a fundamental problem in network optimization, and a large body of literature exists on theoretical and practical methods for solving it <ref> [1] </ref>. While sophisticated polynomial and strongly-polynomial algorithms for minimum cost flow have been recently devised [1], their complexity is (nm log n), where n and m denote the number of nodes and arcs, respectively, of the flow network, and they may perform worse than some of the simpler pseudo-polynomial algorithms when <p> 1 Introduction Minimum cost flow is a fundamental problem in network optimization, and a large body of literature exists on theoretical and practical methods for solving it <ref> [1] </ref>. While sophisticated polynomial and strongly-polynomial algorithms for minimum cost flow have been recently devised [1], their complexity is (nm log n), where n and m denote the number of nodes and arcs, respectively, of the flow network, and they may perform worse than some of the simpler pseudo-polynomial algorithms when the magnitude and/or cost of the flow are small. <p> A simple argument based on induction over the length of the subpath from s to v of p shows that c (v; p; g) = c (v). ut 2.2 Three Basic Flow Algorithms Research in the area of network flows has a rich tradition (see <ref> [1] </ref> for an extensive survey). A number of algorithms have been proposed for finding maximum flows and minimum cost flows in flow networks. In this section, we review three well-known basic flow algorithms, which we call AugPath, BlockFlow and PrimDua, respectively. <p> Algorithm PrimDua (short for primal-dual) was developed first by Ford and Fulkerson [9, 10]. This algorithm computes f in a sequence of stages, where each stage computes a maximum flow in the admissible network of N with respect to the flow already pushed in it. See <ref> [1, 9, 10] </ref> for details. <p> Lemma 4 follows directly from the discussion on the primal-dual algorithm in <ref> [1] </ref>. Lemma 4. For each stage i of Algorithm PrimDua, c i+1 c i + 1. The following corollary is immediate. Corollary 5.
Reference: 2. <author> T. Biedl and G. Kant. </author> <title> A better heuristic for orthogonal graph drawings. </title> <booktitle> In Proc. 2nd Annu. European Sympos. Algorithms (ESA '94), volume 855 of Lecture Notes in Computer Science, </booktitle> <pages> pages 24-35. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: 3. <author> G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. </author> <title> Algorithms for drawing graphs: an annotated bibliography. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 4 </volume> <pages> 235-282, </pages> <year> 1994. </year>
Reference-contexts: The previous best bound for this problem was O (n 2 log n) [19]. Improving the time complexity of bend minimization was mentioned as one of the major open problems of graph drawing in a standard bibliographic survey of the field <ref> [3] </ref>. 2 Preliminaries In this section, we review some basic concepts and definitions related to network flows. We also give a brief description of Algorithms AugPath, BlockFlow and PrimDua, which embody three well-known techniques for computing flows in flow networks.
Reference: 4. <author> G. Di Battista, A. Garg, G. Liotta, R. Tamassia, E. Tassinari, and F. Vargiu. </author> <title> An experimental comparison of three graph drawing algorithms. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 306-315, </pages> <year> 1995. </year>
Reference: 5. <author> G. Di Battista, A. Giammarco, G. Santucci, and R. Tamassia. </author> <title> The architecture of Diagram Server. </title> <booktitle> In Proc. IEEE Workshop on Visual Languages (VL'90), </booktitle> <pages> pages 60-65, </pages> <year> 1990. </year>
Reference-contexts: An important quality measure for orthogonal drawings is the total number of bends along the edges. Bend minimization is the core of a practical drawing technique <ref> [5] </ref> for general graphs, called Giotto, which performs a preliminary planarization followed by bend-minimization. Giotto has has been widely used in software and data visualization systems [5, 7]. <p> Bend minimization is the core of a practical drawing technique [5] for general graphs, called Giotto, which performs a preliminary planarization followed by bend-minimization. Giotto has has been widely used in software and data visualization systems <ref> [5, 7] </ref>. A sample drawing is shown in general-purpose orthogonal drawing algorithms, which use 11,582 graphs derived from "real-life" software engineering and database applications, show that Giotto outperforms all other known orthogonal drawing algorithms in quality measures such as area, number of bends, and aspect-ratio.
Reference: 6. <author> G. Di Battista, G. Liotta, and F. Vargiu. </author> <title> Spirality of orthogonal representations and optimal drawings of series-parallel graphs and 3-planar graphs. </title> <booktitle> In Proc. Workshop Algorithms Data Struct., volume 709 of Lecture Notes in Computer Science, </booktitle> <pages> pages 151-162. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: 7. <author> G. Di Battista, G. Liotta, and F. Vargiu. </author> <title> Diagram Server. </title> <journal> J. Visual Lang. Com-put., </journal> <volume> 6(3) </volume> <pages> 275-298, </pages> <year> 1995. </year> <title> (special issue on Graph Visualization, edited by I. </title> <editor> F. Cruz and P. </editor> <publisher> Eades). </publisher>
Reference-contexts: Bend minimization is the core of a practical drawing technique [5] for general graphs, called Giotto, which performs a preliminary planarization followed by bend-minimization. Giotto has has been widely used in software and data visualization systems <ref> [5, 7] </ref>. A sample drawing is shown in general-purpose orthogonal drawing algorithms, which use 11,582 graphs derived from "real-life" software engineering and database applications, show that Giotto outperforms all other known orthogonal drawing algorithms in quality measures such as area, number of bends, and aspect-ratio.
Reference: 8. <author> S. Even and G. Granot. </author> <title> Grid layouts of block diagrams | bounding the number of bends in each connection. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 64-75. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: 9. <author> L.R. Ford and D.R. Fulkerson. </author> <title> A primal-dual algorithm for the capacitated hitch-cock problem. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 4 </volume> <pages> 47-54, </pages> <year> 1957. </year>
Reference-contexts: Each of these maximum flows can be computed using any algorithm for computing maximum flows. Algorithm PrimDua (short for primal-dual) was developed first by Ford and Fulkerson <ref> [9, 10] </ref>. This algorithm computes f in a sequence of stages, where each stage computes a maximum flow in the admissible network of N with respect to the flow already pushed in it. See [1, 9, 10] for details. <p> Algorithm PrimDua (short for primal-dual) was developed first by Ford and Fulkerson [9, 10]. This algorithm computes f in a sequence of stages, where each stage computes a maximum flow in the admissible network of N with respect to the flow already pushed in it. See <ref> [1, 9, 10] </ref> for details.
Reference: 10. <author> L.R. Ford and D.R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: In this section, we review three well-known basic flow algorithms, which we call AugPath, BlockFlow and PrimDua, respectively. Algorithm AugPath (see Figure 2) is the classic method developed by Ford and Fulkerson <ref> [10] </ref> that finds a maximum flow in a single-source single-sink flow network by successively pushing flow through augmenting paths. Lemma 2 [10]. Let N be a single-source single-sink flow network with n nodes and m arcs. <p> Algorithm AugPath (see Figure 2) is the classic method developed by Ford and Fulkerson <ref> [10] </ref> that finds a maximum flow in a single-source single-sink flow network by successively pushing flow through augmenting paths. Lemma 2 [10]. Let N be a single-source single-sink flow network with n nodes and m arcs. Algorithm AugPath computes a maximum flow for N in time O ( m), where is the maximum flow magnitude. a single-source single-sink flow network N . <p> Each of these maximum flows can be computed using any algorithm for computing maximum flows. Algorithm PrimDua (short for primal-dual) was developed first by Ford and Fulkerson <ref> [9, 10] </ref>. This algorithm computes f in a sequence of stages, where each stage computes a maximum flow in the admissible network of N with respect to the flow already pushed in it. See [1, 9, 10] for details. <p> Algorithm PrimDua (short for primal-dual) was developed first by Ford and Fulkerson [9, 10]. This algorithm computes f in a sequence of stages, where each stage computes a maximum flow in the admissible network of N with respect to the flow already pushed in it. See <ref> [1, 9, 10] </ref> for details.
Reference: 11. <author> U. Fomeier and M. Kaufmann. </author> <title> On bend-minimum orthogonal upward drawing of directed planar graphs. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 52-63. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: 12. <author> A. Garg and R. Tamassia. </author> <title> On the computational complexity of upward and rectilinear planarity testing. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 286-297. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: 13. <author> G. Kant. </author> <title> Drawing planar graphs using the canonical ordering. </title> <journal> Algorithmica, </journal> <volume> 16 </volume> <pages> 4-32, </pages> <year> 1996. </year> <note> (special issue on Graph Drawing, </note> <author> edited by G. Di Battista and R. </author> <month> Tamas-sia). </month>
Reference: 14. <author> Y. Liu, P. Marchioro, R. Petreschi, and B. Simeone. </author> <title> Theoretical results on at most 1-bend embeddability of graphs. </title> <type> Technical report, </type> <institution> Dipartimento di Statistica, Univ. di Roma "La Sapienza", </institution> <year> 1990. </year>
Reference: 15. <author> K. Mehlhorn. </author> <title> Graph Algorithms and NP-Completeness, volume 2 of Data Structures and Algorithms. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1984. </year>
Reference-contexts: We also give a brief description of Algorithms AugPath, BlockFlow and PrimDua, which embody three well-known techniques for computing flows in flow networks. The notation followed is generally the one of <ref> [15] </ref>. 2.1 Definitions A flow network N is a directed graph such that N has two disjoint non-empty sets of distinguished nodes, called its sources and sinks, and each arc e of N has a cost c (e) and a capacity u (e) associated with it, where c (e) is an <p> Each phase of Algorithm BlockFlow computes a blocking flow in the shallowest layered network of N with respect to the flow already computed. See <ref> [15] </ref> for further details about this algorithm. <p> Algorithm BlockFlow. Lemma 3 <ref> [15] </ref> (chapter IV, Section 9). The following properties hold for each phase i of Algorithm BlockFlow: 1. The magnitude of flow in N is increased by at least one, i.e., jF i j jF i1 j+1. 2.
Reference: 16. <author> A. Papakostas and I. G. Tollis. </author> <title> Improved algorithms and bounds for orthogonal drawings. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 40-51. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: 17. <author> D.D. Sleator. </author> <title> An O(nm log n) Algorithm for Maximum Network Flow. </title> <type> PhD thesis, </type> <institution> Dept. Comput. Sci., Stanford Univ., Palo Alto, California, </institution> <year> 1980. </year>
Reference: 18. <author> J. A. Storer. </author> <title> On minimal node-cost planar embeddings. </title> <journal> Networks, </journal> <volume> 14 </volume> <pages> 181-212, </pages> <year> 1984. </year>
Reference: 19. <author> R. Tamassia. </author> <title> On embedding a graph in the grid with the minimum number of bends. </title> <journal> SIAM J. Comput., </journal> <volume> 16(3) </volume> <pages> 421-444, </pages> <year> 1987. </year>
Reference-contexts: This is the first subquadratic algorithm for bend minimization. The previous best bound for this problem was O (n 2 log n) <ref> [19] </ref>. Improving the time complexity of bend minimization was mentioned as one of the major open problems of graph drawing in a standard bibliographic survey of the field [3]. 2 Preliminaries In this section, we review some basic concepts and definitions related to network flows. <p> However, the bottleneck in the running time of Giotto is the execution of the bend minimization step. Let G be an embedded planar graph with maximum degree 4. As shown in <ref> [19] </ref>, a drawing of G with the minimum number of bends can be computed by an algorithm consisting of the following two main phases: 1. computation of an orthogonal shape for G, where only the bends and the angles of the orthogonal drawing are defined; 2. assignment of integer lengths to <p> The best previous time bound for bend minimization is O (n 2 log n) <ref> [19] </ref>, which is achieved with standard flow-augmentation techniques. Our new minimum cost flow method yields a faster bend minimization algorithm: Theorem 11. Let G be an embedded planar graph with n vertices and maximum vertex degree 4.
Reference: 20. <author> R. Tamassia and I. G. Tollis. </author> <title> Planar grid embedding in linear time. </title> <journal> IEEE Trans. Circuits Syst., </journal> <volume> CAS-36(9):1230-1234, </volume> <year> 1989. </year>
Reference-contexts: Network N 0 has O (n) nodes and arcs. Also, since the minimum number of bends for G is O (n) (see, e.g., <ref> [20] </ref>), the minimum cost of the flow in N 0 is O (n).
Reference: 21. <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms, </title> <booktitle> volume 44 of CBMS-NSF Regional Conference Series in Applied Mathematics. Society for Industrial Applied Mathematics, </booktitle> <year> 1983. </year>
Reference: 22. <author> L. Valiant. </author> <title> Universality considerations in VLSI circuits. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-30(2):135-140, </volume> <year> 1981. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
References-found: 22

