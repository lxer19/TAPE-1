URL: http://www.cs.tamu.edu/faculty/rabi/321/deb/paper.ps
Refering-URL: http://www.cs.tamu.edu/faculty/rabi/321/deb/
Root-URL: http://www.cs.tamu.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P.-J. Chuang and N.-F. Tzeng, </author> <title> "An Efficient Submesh Allocation Strategy for Mesh Computer Systems", </title> <booktitle> Proc. 11th Int'l Conf. on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1991, </year> <pages> pp. 256-262. </pages>
Reference-contexts: The submesh allocator then tries to find a free submesh (if available) to be assigned to that job. A number of submesh allocation schemes have been proposed in the literature <ref> [1, 2, 3, 4, 6, 12] </ref>. Comparison of the various allocation algorithms indicate that a `good' allocation scheme can improve the average waiting delay by 20 to 50% [12]. <p> Efficient job scheduling principles were shown to improve the performance in hypercube systems while the various subcube 3 allocation algorithms exhibited similar performance [8, 10, 11, 16, 17]. However, for meshes, efficient submesh allocation algorithms exhibit improvement in performance <ref> [1, 2, 6, 12] </ref>. Hence, an efficient scheduling policy may be used together with an efficient allocation strategy to ensure a lower average waiting time for jobs, a lower standard deviation in the waiting delays and a higher throughput of the system. <p> Thus, it is applicable to any general-purpose mesh system supporting a multi-user environment. This paper deals with the issue of dynamic scheduling only. Although a lot of research has been devoted to submesh allocation in meshes <ref> [3, 4, 1, 6, 12, 13, 2] </ref>, the issue of dynamic job scheduling in meshes has been neglected. All the existing approaches assume a FCFS scheduling discipline. The FCFS scheduling discipline suffers from the drawback that it is blocking in nature. <p> For example, if we use any of the bit-mapping allocation strategy such as the ones proposed in <ref> [1, 6, 2] </ref>, we have to maintain a bit map indicating whether a processor has been reserved or not in addition to the bit map indicating whether a processor has been allocated to a task or not.
Reference: [2] <author> Y. Zhu, </author> <title> "Efficient Processor Allocation Strategies for Mesh-Connected Parallel Computers", </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 16, </volume> <month> Dec. </month> <year> 1992, </year> <pages> pp. 328-337. </pages>
Reference-contexts: The submesh allocator then tries to find a free submesh (if available) to be assigned to that job. A number of submesh allocation schemes have been proposed in the literature <ref> [1, 2, 3, 4, 6, 12] </ref>. Comparison of the various allocation algorithms indicate that a `good' allocation scheme can improve the average waiting delay by 20 to 50% [12]. <p> Efficient job scheduling principles were shown to improve the performance in hypercube systems while the various subcube 3 allocation algorithms exhibited similar performance [8, 10, 11, 16, 17]. However, for meshes, efficient submesh allocation algorithms exhibit improvement in performance <ref> [1, 2, 6, 12] </ref>. Hence, an efficient scheduling policy may be used together with an efficient allocation strategy to ensure a lower average waiting time for jobs, a lower standard deviation in the waiting delays and a higher throughput of the system. <p> Thus, it is applicable to any general-purpose mesh system supporting a multi-user environment. This paper deals with the issue of dynamic scheduling only. Although a lot of research has been devoted to submesh allocation in meshes <ref> [3, 4, 1, 6, 12, 13, 2] </ref>, the issue of dynamic job scheduling in meshes has been neglected. All the existing approaches assume a FCFS scheduling discipline. The FCFS scheduling discipline suffers from the drawback that it is blocking in nature. <p> The reservation list consists of all the submeshes reserved for individual tasks. For example, in Fig. 1, the reservation list will be <ref> [f&lt; 0; 0 &gt;; &lt; 2; 6 &gt;g] </ref>. <p> For example, if we use any of the bit-mapping allocation strategy such as the ones proposed in <ref> [1, 6, 2] </ref>, we have to maintain a bit map indicating whether a processor has been reserved or not in addition to the bit map indicating whether a processor has been allocated to a task or not.
Reference: [3] <author> K. Li and K. H. Cheng, </author> <title> "A Two Dimensional Buddy System for Dynamic Resource Allocation in </title>
Reference-contexts: The submesh allocator then tries to find a free submesh (if available) to be assigned to that job. A number of submesh allocation schemes have been proposed in the literature <ref> [1, 2, 3, 4, 6, 12] </ref>. Comparison of the various allocation algorithms indicate that a `good' allocation scheme can improve the average waiting delay by 20 to 50% [12]. <p> Thus, it is applicable to any general-purpose mesh system supporting a multi-user environment. This paper deals with the issue of dynamic scheduling only. Although a lot of research has been devoted to submesh allocation in meshes <ref> [3, 4, 1, 6, 12, 13, 2] </ref>, the issue of dynamic job scheduling in meshes has been neglected. All the existing approaches assume a FCFS scheduling discipline. The FCFS scheduling discipline suffers from the drawback that it is blocking in nature.
References-found: 3

