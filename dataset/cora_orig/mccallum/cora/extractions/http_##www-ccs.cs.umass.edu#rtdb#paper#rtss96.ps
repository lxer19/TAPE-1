URL: http://www-ccs.cs.umass.edu/rtdb/paper/rtss96.ps
Refering-URL: http://www-ccs.cs.umass.edu/rtdb/publications.html
Root-URL: 
Email: towsley-@cs.umass.edu  
Title: Scheduling Transactions with Temporal Constraints: Exploiting Data Semantics  
Author: Ming Xiong, Rajendran Sivasankaran, John A. Stankovic, Krithi Ramamritham Don Towsley -xiong, sivasank, stankovic, krithi, 
Address: Amherst MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: In this paper, issues involved in the design of a real-time database which maintains data temporal consistency are discussed. The concept of data-deadline is introduced and time cognizant non-waiting transaction scheduling policies are proposed. Informally, data-deadline can be viewed as the deadline that a transaction implicitly gets due to the temporal constraints of the data accessed by the transaction. Further, two time cognizant forced wait policies which improve performance significantly by forcing a transaction to delay further execution until a new version of sensor data becomes available are proposed. A way to exploit temporal data similarity to improve performance is also proposed. Finally, these policies are evaluated through detailed simulation experiments. The simulation results show that taking advantage of temporal data semantics in transaction scheduling can significantly improve the performance of user transactions in real-time database systems. In particular, it is demonstrated that under the forced wait policy, the performance can be improved significantly. Further improvements result by exploiting data similarity. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Abbott and H. Garcia-Molina, </author> <title> Scheduling Real-Time Transactions: A Performance Evaluation, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 17, No. 3, </volume> <pages> pp. 513-560, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Examples of such applications include autopilot systems, robot navigation, and program stock trading [18]. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref>. The main contributions in this paper are * The development of notions of data-deadline and forced wait for scheduling transactions that access temporal data. <p> Section 5 discusses the results of the experimental study and section 6 summarizes and concludes the study. 2. Related Work Over the past few years real-time databases have become important areas of research. Experimental studies reported <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12].
Reference: [2] <author> B. Adelberg, H. Garcia-Molina and B. Kao, </author> <title> Applying Update Streams in a Soft Real-Time Database System, </title> <booktitle> Proceedings of the 1995 ACM SIGMOD, </booktitle> <pages> pp. 245 - 256, </pages> <year> 1995. </year>
Reference: [3] <author> M. J. Carey, R. Jauhari and M. Livny, </author> <title> On Transaction Boundaries in Active Databases: A Performance Perspective, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 3, No. 3, </volume> <pages> pp. 320-336, </pages> <month> September </month> <year> 1991. </year>
Reference: [4] <author> U. Dayal et. al., </author> <title> The HIPAC Project: Combining Active Databases and Timing Constraints, </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 17, No. 1, </volume> <pages> pp. 51-70, </pages> <month> March </month> <year> 1988. </year>
Reference: [5] <author> J.R. Haritsa, M.J. Carey and M. Livny, </author> <title> On Being Optimistic about Real-Time Constraints, </title> <booktitle> Proc. of 9th SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <month> April, </month> <year> 1990. </year>
Reference-contexts: Examples of such applications include autopilot systems, robot navigation, and program stock trading [18]. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref>. The main contributions in this paper are * The development of notions of data-deadline and forced wait for scheduling transactions that access temporal data. <p> Section 5 discusses the results of the experimental study and section 6 summarizes and concludes the study. 2. Related Work Over the past few years real-time databases have become important areas of research. Experimental studies reported <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12].
Reference: [6] <author> J.R. Haritsa, M.J. Carey and M. Livny, </author> <title> Earliest Deadline Scheduling for Real-Time Database Systems, </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pp. 232-242, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Examples of such applications include autopilot systems, robot navigation, and program stock trading [18]. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref>. The main contributions in this paper are * The development of notions of data-deadline and forced wait for scheduling transactions that access temporal data. <p> Section 5 discusses the results of the experimental study and section 6 summarizes and concludes the study. 2. Related Work Over the past few years real-time databases have become important areas of research. Experimental studies reported <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12].
Reference: [7] <author> J.R. Haritsa, M.J. Carey and M. Livny, </author> <title> Data Access Scheduling in Firm Real-Time Database Systems, </title> <journal> The Journal of Real-Time Systems, </journal> <volume> Vol. 4, No. 3, </volume> <pages> pp. 203-241, </pages> <year> 1992. </year>
Reference-contexts: Examples of such applications include autopilot systems, robot navigation, and program stock trading [18]. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref>. The main contributions in this paper are * The development of notions of data-deadline and forced wait for scheduling transactions that access temporal data. <p> Section 5 discusses the results of the experimental study and section 6 summarizes and concludes the study. 2. Related Work Over the past few years real-time databases have become important areas of research. Experimental studies reported <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12].
Reference: [8] <author> J. Huang, J.A. Stankovic, D. Towsley and K. Ra-mamritham, </author> <title> Experimental Evaluation of Real-Time Transaction Processing, </title> <booktitle> Real-Time Systems Symposium, </booktitle> <pages> pp. 144-153, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Examples of such applications include autopilot systems, robot navigation, and program stock trading [18]. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref>. The main contributions in this paper are * The development of notions of data-deadline and forced wait for scheduling transactions that access temporal data. <p> Section 5 discusses the results of the experimental study and section 6 summarizes and concludes the study. 2. Related Work Over the past few years real-time databases have become important areas of research. Experimental studies reported <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12].
Reference: [9] <author> J. Huang, J.A. Stankovic, K. Ramamritham and D. Towsley, </author> <title> Experimental Evaluation of Real-Time Optimistic Concurrency Control Schemes, </title> <booktitle> Proceedings of the 17th Conference on Very Large Databases, </booktitle> <pages> pp. 35-46, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Examples of such applications include autopilot systems, robot navigation, and program stock trading [18]. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref>. The main contributions in this paper are * The development of notions of data-deadline and forced wait for scheduling transactions that access temporal data. <p> Section 5 discusses the results of the experimental study and section 6 summarizes and concludes the study. 2. Related Work Over the past few years real-time databases have become important areas of research. Experimental studies reported <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12].
Reference: [10] <author> J. Huang, J.A. Stankovic, K. Ramamritham, D. Towsley and B. Purimetla, </author> <title> On Using Priority Inheritance in Real-Time Databases, </title> <journal> Special Issue of Real-Time Systems Journal, </journal> <volume> Vol. 4. No. 3, </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: Examples of such applications include autopilot systems, robot navigation, and program stock trading [18]. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref>. The main contributions in this paper are * The development of notions of data-deadline and forced wait for scheduling transactions that access temporal data. <p> Section 5 discusses the results of the experimental study and section 6 summarizes and concludes the study. 2. Related Work Over the past few years real-time databases have become important areas of research. Experimental studies reported <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12].
Reference: [11] <author> T. Kuo and A. K. Mok, </author> <title> SSP: a Semantics-Based Protocol for Real-Time Data Access, </title> <booktitle> IEEE 14th Real-Time Systems Symposium , December 1993. </booktitle>
Reference-contexts: Experimental studies reported [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in <ref> [20, 11, 12] </ref>. Such systems introduce the need to maintain data temporal consistency in addition to logical consistency. The performance of several concurrency control algorithms for maintaining temporal consistency are studied in [20]. <p> At higher loads, earliest deadline first outperforms rate-monotonic when maintaining temporal consistency. They also observed that optimistic concurrency control is generally worse at maintaining temporal consistency of data than lock based concurrency control, even though the former allows more transactions to meet their deadlines. In <ref> [11] </ref>, a class of real-time data access protocols called SSP (Similarity Stack Protocols) is proposed. The correctness of SSP is based on the concept of similarity which allows different but sufficiently timely data to be used in a computation without adversely affecting the outcome. <p> In this case, versions of a data object that are only slightly different are indistinguishable by transactions reading the data. This is the basic concept of data similarity that has been explored in detail in <ref> [11, 12] </ref>. Similarity is based on the idea that, past versions of data that is not current but close to the current version can be used in processing if it does not adversely affect the outcome. This can be used to improve performance. <p> This can be used to improve performance. Two versions of a data object are similar if a transaction which reads the data object considers them as similar. As pointed out in <ref> [11, 12] </ref>, similarity is a binary relation on the domain of a data object. It is reflexive and symmetric, but not necessarily transitive. In our paper, the assumption is that it is not transitive.
Reference: [12] <author> T. Kuo and A. K. Mok, </author> <title> Real-Time Data Semantics and Similarity-Based Concurrency Control, </title> <journal> submitted to IEEE Transactions on Knowledge and Data Engineering, </journal> <year> 1995. </year>
Reference-contexts: Experimental studies reported [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in <ref> [20, 11, 12] </ref>. Such systems introduce the need to maintain data temporal consistency in addition to logical consistency. The performance of several concurrency control algorithms for maintaining temporal consistency are studied in [20]. <p> The correctness of SSP is based on the concept of similarity which allows different but sufficiently timely data to be used in a computation without adversely affecting the outcome. SSP schedules are deadlock free, subject to limited blocking and do not use locks. In <ref> [12] </ref>, weaker consistency requirements based on the similarity notion are proposed to provide more flexibility in concurrency control for data-intensive real-time applications. <p> In this case, versions of a data object that are only slightly different are indistinguishable by transactions reading the data. This is the basic concept of data similarity that has been explored in detail in <ref> [11, 12] </ref>. Similarity is based on the idea that, past versions of data that is not current but close to the current version can be used in processing if it does not adversely affect the outcome. This can be used to improve performance. <p> This can be used to improve performance. Two versions of a data object are similar if a transaction which reads the data object considers them as similar. As pointed out in <ref> [11, 12] </ref>, similarity is a binary relation on the domain of a data object. It is reflexive and symmetric, but not necessarily transitive. In our paper, the assumption is that it is not transitive.
Reference: [13] <author> Y. Lin and S.H. Son, </author> <title> Concurrency Control in Real-Time Databases by Dynamic Adjustment of Serialization Order, </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pp. 104-112, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Examples of such applications include autopilot systems, robot navigation, and program stock trading [18]. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref>. The main contributions in this paper are * The development of notions of data-deadline and forced wait for scheduling transactions that access temporal data. <p> Section 5 discusses the results of the experimental study and section 6 summarizes and concludes the study. 2. Related Work Over the past few years real-time databases have become important areas of research. Experimental studies reported <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12].
Reference: [14] <author> M. Livny, </author> <note> DeNet Users Guide, version 1.5, </note> <institution> Dept. Comp. Science, Univ. of Wisconsin, Madison, WI 1990. </institution>
Reference-contexts: Another metric, Data-Deadline Abort Ratio (DDAR), is defined as: DDAR = T otal N o: of datadeadline aborts T otal N o: of T ransactions A simulator, called RADEx [19], was developed to perform our experiments. It was implemented using the DeNet Simulation Language <ref> [14] </ref>. In the experiments, 90% confidence intervals have been obtained whose widths are less than 10% of the point estimate for the Missed Deadline Percentage (MDP). 5.1. Baseline Parameters In this section, the workload model is described.
Reference: [15] <author> E. McKenzie and R. Snodgrass, </author> <title> Evaluation of Relational Algebras Incorporating the Time Dimension in Databases, </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 23, No. 4, </volume> <pages> pp. 501-543, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Associated with the state is a temporal validity interval. An object whose state does not become invalid with the passage of time is a non-temporal object. Thus, there is no temporal validity interval associated with non-temporal objects. Two approaches to modeling temporal data have been proposed in the literature <ref> [15] </ref> : attribute versioning and object versioning. In attribute versioning, a validity interval is associated with each attribute of an object, whereas in object versioning, a validity interval is associated with the aggregate object. Here, object versioning which maintains multiple versions of each objectis used.
Reference: [16] <author> H. Pang, M.J. Carey and M. Livny, </author> <title> Multiclass Query Scheduling in Real-Time Database Systems, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 7, No. 4, </volume> <month> August </month> <year> 1995. </year>
Reference-contexts: Examples of such applications include autopilot systems, robot navigation, and program stock trading [18]. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref>. The main contributions in this paper are * The development of notions of data-deadline and forced wait for scheduling transactions that access temporal data. <p> Section 5 discusses the results of the experimental study and section 6 summarizes and concludes the study. 2. Related Work Over the past few years real-time databases have become important areas of research. Experimental studies reported <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12].
Reference: [17] <author> B. Purimetla, R. M. Sivasankaran, J.Stankovic and K. Ramamritham, </author> <title> Network Services Databases A Distributed Active Real-Time Database (DARTDB) Applications, </title> <booktitle> IEEE Workshop on Parallel and Distributed Real-time Systems, </booktitle> <month> April </month> <year> 1993. </year>
Reference: [18] <author> K. Ramamritham, </author> <title> Real-Time Databases, </title> <booktitle> Distributed and Parallel Databases 1(1993), </booktitle> <pages> pp. 199-226, </pages> <year> 1993. </year>
Reference-contexts: However, many real-world applications involve not only transactions with time constraints, but also data with time constraints. Such data, typically obtained from sensors, become inaccurate with the passage of time. Examples of such applications include autopilot systems, robot navigation, and program stock trading <ref> [18] </ref>. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines [1, 5, 6, 7, 8, 9, 10, 13, 16, 19].
Reference: [19] <author> R.M. Sivasankaran, J.A. Stankovic, D. Towsley, B. Purimetla and K. Ramamritham, </author> <title> Priority Assignment in Real-Time Active Databases, </title> <booktitle> The International Journal on Very Large Data Bases, </booktitle> <volume> Vol. 5, No. 1, </volume> <month> January </month> <year> 1996. </year>
Reference-contexts: Examples of such applications include autopilot systems, robot navigation, and program stock trading [18]. While considerable work has been done on real-time databases, fl This work was supported, in part, by the National Science Foundation grant IRI-9114197. most of it assumes that only transactions have deadlines <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref>. The main contributions in this paper are * The development of notions of data-deadline and forced wait for scheduling transactions that access temporal data. <p> Section 5 discusses the results of the experimental study and section 6 summarizes and concludes the study. 2. Related Work Over the past few years real-time databases have become important areas of research. Experimental studies reported <ref> [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12]. <p> This policy assumes that finishing a transaction after its deadline expires does not impart any value to the system. Another metric, Data-Deadline Abort Ratio (DDAR), is defined as: DDAR = T otal N o: of datadeadline aborts T otal N o: of T ransactions A simulator, called RADEx <ref> [19] </ref>, was developed to perform our experiments. It was implemented using the DeNet Simulation Language [14]. In the experiments, 90% confidence intervals have been obtained whose widths are less than 10% of the point estimate for the Missed Deadline Percentage (MDP). 5.1. <p> The parameter load used in our experiments is very similar to the one in <ref> [19] </ref>. In order to define load the arrival rates and service rates of UT and ST transactions are specified.
Reference: [20] <author> X. Song and J. W. S. Liu, </author> <title> Maintaining Temporal Consistency: Pessimistic vs. Optimistic Concurrency Control, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 7, No. 5, </volume> <pages> pp. 786-796, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Experimental studies reported [1, 5, 6, 7, 8, 9, 10, 13, 16, 19] are very comprehensive and cover most aspects of real-time transaction processing, but have not considered time constraints associated with data. Database systems in which time validity intervals are associated with the data are discussed in <ref> [20, 11, 12] </ref>. Such systems introduce the need to maintain data temporal consistency in addition to logical consistency. The performance of several concurrency control algorithms for maintaining temporal consistency are studied in [20]. <p> Database systems in which time validity intervals are associated with the data are discussed in [20, 11, 12]. Such systems introduce the need to maintain data temporal consistency in addition to logical consistency. The performance of several concurrency control algorithms for maintaining temporal consistency are studied in <ref> [20] </ref>. In the model introduced in [20], a real-time system consists of periodic tasks which are either read-only, write-only or update (read-write) transactions. Data objects are temporally inconsistent when their ages or dispersions [20] are greater than the absolute or relative thresholds allowed by the application. <p> Such systems introduce the need to maintain data temporal consistency in addition to logical consistency. The performance of several concurrency control algorithms for maintaining temporal consistency are studied in <ref> [20] </ref>. In the model introduced in [20], a real-time system consists of periodic tasks which are either read-only, write-only or update (read-write) transactions. Data objects are temporally inconsistent when their ages or dispersions [20] are greater than the absolute or relative thresholds allowed by the application. <p> The performance of several concurrency control algorithms for maintaining temporal consistency are studied in <ref> [20] </ref>. In the model introduced in [20], a real-time system consists of periodic tasks which are either read-only, write-only or update (read-write) transactions. Data objects are temporally inconsistent when their ages or dispersions [20] are greater than the absolute or relative thresholds allowed by the application. Two-phase locking and optimistic concurrency control algorithms, as well as rate-monotonic and earliest deadline first scheduling algorithms are studied in [20]. <p> Data objects are temporally inconsistent when their ages or dispersions <ref> [20] </ref> are greater than the absolute or relative thresholds allowed by the application. Two-phase locking and optimistic concurrency control algorithms, as well as rate-monotonic and earliest deadline first scheduling algorithms are studied in [20]. These studies show that the performances of the rate-monotonic and earliest deadline first algorithms are close when the load is low. At higher loads, earliest deadline first outperforms rate-monotonic when maintaining temporal consistency. <p> Otherwise, decisions based on the data in the database may be wrong, and potentially disastrous. For example, not only must the data read by transactions be fresh, but also be temporally correlated. This leads to the notion of tem-poral consistency which consists of two components <ref> [20] </ref>: absolute consistency and relative consistency.
Reference: [21] <author> M. Xiong, J. Stankovic, K. Ramamritham, D. Towsley and R. M. Sivasankaran, </author> <title> Maintaining Temporal Consistency: Issues and Algorithms, </title> <booktitle> The First International Workshop on Real-Time Databases, </booktitle> <month> March, </month> <year> 1996. </year> <title> (P sim = 0:5) (P sim = 1:0) 1:0) </title>
References-found: 21

