URL: http://www.cs.wisc.edu/~zhao/ICDE98.ps
Refering-URL: http://www.cs.wisc.edu/~zhao/zhao.html
Root-URL: 
Email: zhao@cs.wisc.edu  karthik@cs.wisc.edu  kristint@cs.wisc.edu  naughton@cs.wisc.edu  
Title: Array-Based Evaluation of Multi-Dimensional Queries in Object-Relational Database Systems  
Author: Yihong Zhao Karthikeyan Ramasamy Kristin Tufte Jeffrey F. Naughton 
Date: June 2, 1997  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  Computer Sciences Department University of Wisconsin-Madison  Computer Sciences Department University of Wisconsin-Madison  Computer Sciences Department University of Wisconsin-Madison  
Abstract: Since multi-dimensional arrays are a natural data structure for supporting multi-dimensional queries, and object-relational database systems support multi-dimensional array ADTs, it is natural to ask if a multi-dimensional array-based ADT can be used to improve O/R DBMS performance on multi-dimensional queries. As an initial step toward answering this question, we have implemented a multi-dimensional array in the Paradise Object-Relational DBMS. In this paper we describe the implementation of this compressed-array ADT, and explore its performance for queries including star-join consolidations and selections. We show that in many cases the array ADT can provide significantly higher performance than can be obtained by applying techniques such as bitmap indices and star-join algorithms to relational tables.
Abstract-found: 1
Intro-found: 1
Reference: [Fin] <author> Richard Finkelstein. </author> <title> Understanding the Need for On-Line Analytical Servers, Richard Finkelstein, President, Performance Computing, </title> <publisher> Inc. </publisher> <address> "http://www.arborsoft.com/papers/finkTOC.html" </address>
Reference: [CDFHM94] <author> M. Carey, D. DeWitt, M. Franklin, N. Hall, M. McAuliffe, J. Naughton, D. Schuh, M. Solomon, C. Tan, O. Tsatalos, S. White and M. Zwilling. </author> <title> "Shoring up Persistent Applications," </title> <booktitle> Proc. of the 1994 SIGMOD Conference, </booktitle> <month> May, </month> <year> 1994. </year>
Reference-contexts: Storing large arrays on disk in row-major or column-major order may not be efficient because cells that are logically adjacent in the array can be far apart on disk. Tiling, on the other hand, breaks an n-dimensional array into n-dimensional tiles and stores each tile as a SHORE <ref> [CDFHM94] </ref> large object. (The SHORE storage manager is the storage repository 5 used by Paradise.) In [SS94], the authors found that tiling improves access times for an n-dimensional array.
Reference: [Codd93] <author> E.F. Codd, </author> <title> S.B. Codd, and C.T. Salley. Providing OLAP (On-line Analytical Processing) to User-Analysts: An IT Mandate, </title> <type> White Paper, </type> <institution> E.F. Codd and Associates. </institution> <note> "http://www.arborsoft.com/papers/coddTOC.html" </note>
Reference: [DKLPY94] <author> D. J. DeWitt, N. Kabra, J. Luo, J.M. Patel, and J. Yu. </author> <title> "Client-Server Paradise". </title> <booktitle> In Proceedings of the 20th VLDB Conference, </booktitle> <address> Santiago, Chile, </address> <year> 1994 </year>
Reference-contexts: extended to support the storage and manipulation of multi-dimensional arrays, why not use these arrays as a storage structure for multi-dimensional data sets, and use specialized processing algorithms on these arrays to answer multi-dimensional queries? To begin to answer this question, we have implemented multi-dimensional arrays 1 in the Paradise <ref> [DKLPY94] </ref> object-relational database system, and tested their effectiveness for multi-dimensional query workloads. In previous work [ZDN97], we investigated the performance of multi-dimensional arrays for the specialized OLAP "compute the cube" function as well as bulk loading the array ADT from a relational table. <p> Figure 2 shows a small 2-D OLAP Array ADT object in detail. The OLAP Array ADT is built on top of the Paradise multi-dimensional array type. The Paradise multidimensional array uses tiling (also called chunking) to make array access more efficient <ref> [DKLPY94] </ref>. Storing large arrays on disk in row-major or column-major order may not be efficient because cells that are logically adjacent in the array can be far apart on disk.
Reference: [Kenan] <author> Kenan Technologies. </author> <title> Guide to OLAP Terminology, Kenan System, </title> <address> Cambridge, MA. "http://www.kenan.com/acumate/olaptrms.html" </address>
Reference: [OR95] <institution> Nigel Pendse and Richard Creeth The OLAP Report Succeeding with On-Line Analytical Processing, Business Intelligence, </institution> <year> 1995. </year>
Reference-contexts: 1 Introduction Multi-dimensional data analysis has been around for at least twenty years <ref> [OR95] </ref>, but has recently taken the spotlight in the context of OLAP (On-Line Analytical Processing) systems. A fundamental demand of OLAP systems is extremely fast response times for multi-dimensional queries.
Reference: [OQ97] <author> Patrick O'Neil and Dallan Quass. </author> <title> "Improved Query Performance with Variant Indexes." </title> <booktitle> Proc. of the 1997 SIGMOD Conference, </booktitle> <month> May, </month> <year> 1997. </year>
Reference-contexts: These techniques can indeed greatly improve relational performance for multi-dimensional queries when compared with more traditional alternatives such as pipelined left-deep hash joins for consolidation queries [Su96] or B-tree indexes for star select-joins <ref> [OQ97] </ref>. <p> For details of these tests please see [RQZN]. Bitmap Indexes are becoming widely used in relational systems [SybaseIQ, Redbrick, Informix] to speed up the evaluation of consolidation queries with selection <ref> [OQ97] </ref>. We have implemented bitmap indices in Paradise. We have also implemented a specialized file structure optimized for tables with small, fixed-size records. We call this structure a "fact file" for obvious reasons.
Reference: [Su96] <author> Prakash Sundaresan. </author> <title> "Data Warehousing Features in Informix OnLine XPS." </title> <booktitle> Presentation at the Fourth International PDIS Conference, </booktitle> <pages> December 18-20, </pages> <address> 1996, Miami Beach, Florida. </address>
Reference-contexts: These techniques can indeed greatly improve relational performance for multi-dimensional queries when compared with more traditional alternatives such as pipelined left-deep hash joins for consolidation queries <ref> [Su96] </ref> or B-tree indexes for star select-joins [OQ97].
Reference: [Ki95] <author> Ralph Kimball. </author> <title> "Data Warehousing Toolkit." </title> <publisher> John Wiley & Sons, </publisher> <year> 1995. </year>
Reference-contexts: These techniques can indeed greatly improve relational performance for multi-dimensional queries when compared with more traditional alternatives such as pipelined left-deep hash joins for consolidation queries [Su96] or B-tree indexes for star select-joins [OQ97]. However, the recent emergence of object-relational database systems <ref> [Ki95, St96] </ref> has opened the door to another potential approach to solving the OLAP query performance problem: since object-relational database systems can be extended to support the storage and manipulation of multi-dimensional arrays, why not use these arrays as a storage structure for multi-dimensional data sets, and use specialized processing algorithms <p> The standard way of representing such a data set in the relational model is to use a star schema <ref> [Ki95] </ref> (or its slightly more complex variant, the snowflake schema).
Reference: [RQZN] <author> Karthikeyan Ramasamy, Qi Jin, Yihong Zhao, and Jeffrey F. Naughton. </author> <title> "Bit-Map Indices: Implementation Issues and Performance Results." </title> <note> Working paper. </note>
Reference-contexts: Here we present only bitmap indexing, since our tests showed that it dominated the other techniques over the full range of queries tested in this paper. For details of these tests please see <ref> [RQZN] </ref>. Bitmap Indexes are becoming widely used in relational systems [SybaseIQ, Redbrick, Informix] to speed up the evaluation of consolidation queries with selection [OQ97]. We have implemented bitmap indices in Paradise. We have also implemented a specialized file structure optimized for tables with small, fixed-size records. <p> The fact file provides a interface that takes a bitmap and retrieves the tuples corresponding to non-zero bit positions. For more details on the design, implementation and performance of bitmap indices and fact file refer to <ref> [RQZN] </ref>. Note that it was possible to implement a fact file complete with concurrency control, recovery, and SQL query 11 processing in a reasonable amount of time because the SHORE storage manager used by Paradise is C++ from the bottom up.
Reference: [Informix] <author> Informix Corporation. </author> <title> INFORMIX Online Extented Parallel Server: A New Generation of Decision Support Indexing. </title> <type> White Paper, </type> <institution> Informix Corporation. </institution>
Reference-contexts: Here we present only bitmap indexing, since our tests showed that it dominated the other techniques over the full range of queries tested in this paper. For details of these tests please see [RQZN]. Bitmap Indexes are becoming widely used in relational systems <ref> [SybaseIQ, Redbrick, Informix] </ref> to speed up the evaluation of consolidation queries with selection [OQ97]. We have implemented bitmap indices in Paradise. We have also implemented a specialized file structure optimized for tables with small, fixed-size records. We call this structure a "fact file" for obvious reasons.
Reference: [Redbrick] <institution> Red Brick Systems. Star Schemas and STARjoin Technology. </institution> <note> White Paper, Red Brick Systems. "http://www.redbrick.com/rbs/whpapers.html" </note>
Reference-contexts: Here we present only bitmap indexing, since our tests showed that it dominated the other techniques over the full range of queries tested in this paper. For details of these tests please see [RQZN]. Bitmap Indexes are becoming widely used in relational systems <ref> [SybaseIQ, Redbrick, Informix] </ref> to speed up the evaluation of consolidation queries with selection [OQ97]. We have implemented bitmap indices in Paradise. We have also implemented a specialized file structure optimized for tables with small, fixed-size records. We call this structure a "fact file" for obvious reasons.
Reference: [SybaseIQ] <author> Sybase Inc. </author> <title> Sybase IQ Optimizing Interactive Performance for the Data Warehouse. </title> <type> White Paper, </type> <institution> Sybase Inc. </institution> <note> "http://www.sybase.com/products/dataware/iqwpaper.html" </note>
Reference-contexts: Here we present only bitmap indexing, since our tests showed that it dominated the other techniques over the full range of queries tested in this paper. For details of these tests please see [RQZN]. Bitmap Indexes are becoming widely used in relational systems <ref> [SybaseIQ, Redbrick, Informix] </ref> to speed up the evaluation of consolidation queries with selection [OQ97]. We have implemented bitmap indices in Paradise. We have also implemented a specialized file structure optimized for tables with small, fixed-size records. We call this structure a "fact file" for obvious reasons.
Reference: [SAT95] <author> M.J.Salyor, M.G.Achaya, and R.G.Trenkamp. </author> <title> True Relational OLAP: The Future of Decision Support, </title> <journal> Database Journal, </journal> <note> Dec 1995, p.38. "http://www.strategy.com/tro dbj.html" </note>
Reference: [St96] <author> Michael Stonebraker. </author> <title> "Object-Relational Database Systems The Next Wave." </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1996. </year>
Reference-contexts: These techniques can indeed greatly improve relational performance for multi-dimensional queries when compared with more traditional alternatives such as pipelined left-deep hash joins for consolidation queries [Su96] or B-tree indexes for star select-joins [OQ97]. However, the recent emergence of object-relational database systems <ref> [Ki95, St96] </ref> has opened the door to another potential approach to solving the OLAP query performance problem: since object-relational database systems can be extended to support the storage and manipulation of multi-dimensional arrays, why not use these arrays as a storage structure for multi-dimensional data sets, and use specialized processing algorithms
Reference: [SS94] <author> Sunita Sarawagi, Michael Stonebraker, </author> <title> "Efficient Organization of Large Multi-Dimensional Arrays". </title> <booktitle> In Proceedings of the Eleventh International Conference on Data Engineering. </booktitle> <address> Houston, TX, </address> <month> February </month> <year> 1994 </year>
Reference-contexts: Tiling, on the other hand, breaks an n-dimensional array into n-dimensional tiles and stores each tile as a SHORE [CDFHM94] large object. (The SHORE storage manager is the storage repository 5 used by Paradise.) In <ref> [SS94] </ref>, the authors found that tiling improves access times for an n-dimensional array. The Paradise multi-dimensional array also implements compression on a tile by tile basis using the LZW algorithm [Wel84] to further improve performance.
Reference: [Wel84] <author> T.A. </author> <title> Welch "A Technique for High-Performance Data Compression". </title> <journal> IEEE Computer, </journal> <volume> 17(6), </volume> <year> 1984. </year> <month> 18 </month>
Reference-contexts: The Paradise multi-dimensional array also implements compression on a tile by tile basis using the LZW algorithm <ref> [Wel84] </ref> to further improve performance. As we discuss in the next subsection, the OLAP Array ADT does not use LZW compression, and uses instead a compression method that is specific to arrays. The OLAP Array ADT, like the relational fact table, relies on SHORE for database support.
Reference: [Ki95] <author> Won Kim. </author> <title> "Modern Database Systems: The Object Model, Interoperability, and Beyond." </title> <publisher> ACM Press and Addison-Wesley 1995 </publisher>
Reference-contexts: These techniques can indeed greatly improve relational performance for multi-dimensional queries when compared with more traditional alternatives such as pipelined left-deep hash joins for consolidation queries [Su96] or B-tree indexes for star select-joins [OQ97]. However, the recent emergence of object-relational database systems <ref> [Ki95, St96] </ref> has opened the door to another potential approach to solving the OLAP query performance problem: since object-relational database systems can be extended to support the storage and manipulation of multi-dimensional arrays, why not use these arrays as a storage structure for multi-dimensional data sets, and use specialized processing algorithms <p> The standard way of representing such a data set in the relational model is to use a star schema <ref> [Ki95] </ref> (or its slightly more complex variant, the snowflake schema).
Reference: [ZDN97] <author> Yihong Zhao, Prasad M Deshpande, Jeffrey F. Naughton. </author> <title> "An Array-Based Algorithm for Simultaneous Multi-Dimensional Aggregates." </title> <booktitle> Proc. of the 1997 SIGMOD Conference, </booktitle> <month> May, </month> <year> 1997. </year> <month> 19 </month>
Reference-contexts: In previous work <ref> [ZDN97] </ref>, we investigated the performance of multi-dimensional arrays for the specialized OLAP "compute the cube" function as well as bulk loading the array ADT from a relational table.
References-found: 19

