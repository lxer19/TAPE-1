URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP140-F95/L1995-09-21.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP140-F1995/lectures.html
Root-URL: http://www.cs.unc.edu
Title: COMP 140: Introduction to Translator Systems Syntactic Analysis (Lecture 3 of 6)  1 Top down parsing  
Author: Siddhartha Chatterjee F (E) j id 
Keyword: void F(void) if (LPAREN lookahead_token) match(LPAREN); E(); match(RPAREN); else if (ID lookahead_token) match(ID); else error();  
Affiliation: E E T j T  
Date: 21 September 1995  
Abstract: Now that we have become familiar with grammars, let us turn to the problem of recognizing whether a given sentence s belongs to the language defined by a grammar G. Today, we will study top-down parsing, which is an attempt to find a leftmost derivation of the sentence in the grammar. Equivalent, one may think of it as an attempt to construct a parse tree for the sentence starting from the root and creating the nodes in preorder. Insisting on a leftmost derivation fixes the nonterminal that we expand at each step. However, we may still have multiple productions to choose from in replacing that nonterminal. If we choose the wrong production, we will be unable to make progress at some point of the parsing process (like we saw in parsing id + id fl id at the end of last class). We must then backtrack, returning to rescan past tokens and undoing the tree construction we have performed. This is unacceptable from a performance standpoint. Our goal is to parse the sentence in O(n) time, where n is the number of tokens in the sentence. Recursive descent parsing is a top-down method in which we execute a set of (mutually) recursive procedures to parse the input. It could still be a backtracking process. Predictive parsing is a special case of recursive descent parsing in which we can pick the right alternative by looking at the current nonterminal and the next symbol. Observe the analogy with the use of lookahead in lexical analysis. Today we will consider a simplified version of the unambiguous expression grammar from last class. When we are trying to replace an instance of F , we can look at the next token and decide which production to use. If the next token is LPAREN, we use the first production; if it is id, we use the second. Thus, we could write the following procedure in pseudo ANSI C to recognize an instance of F . 
Abstract-found: 1
Intro-found: 1
References-found: 0

