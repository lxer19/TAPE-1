URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR92240.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Title: Automatic Differentiation Applied to Unsaturated Flow ADOL-C Case Study colors suffice for computing the nonlinear
Author: by George Corliss, Andreas Griewank, Thomas Robey, and Steve Wright 
Note: Three  The  
Abstract: We have experimented with many variants of the code dual.c for two-dimensional unsaturated flow in a porous medium. The goal has been to speed up the evaluation of derivatives required for a Newton iteration. We have primarily investigated the use of ADOL-C, a C++ tool for automatic differentiation and have come to the following conclusions: * The use of ADOL-C for automatic differentiation does not speed up the code. The best result we have achieved for automatic differentiation takes twice as long as the original centered difference approximation. * We can realize big savings in the linear equation solver. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Griewank, </author> <title> On solving nonlinear equations with simple singularities or nearly singular solutions, </title> <journal> SIAM Review, </journal> <volume> 27/4 (1985), </volume> <pages> 537-563. </pages>
Reference-contexts: However, the rapid changes in 9 conductivities can cause poor conditioning of the Jacobian or possibly rank deficiency. One can handle rank deficiency by adding some constraints to uniquely define a solution. Alternatively, one should take into account the suggestions of Griewank <ref> [1] </ref> on the behavior of Newton's method and its variation for singular systems. Two different situations must be distinguished. In the first case, there is (locally) a smooth solution manifold of dimension p, and the rank of the Jacobian drops by exactly p at the solutions.
Reference: [2] <author> A. Griewank, </author> <title> On automatic differentiation, in Mathematical Programming: Recent Developments and Applications, </title> <editor> M. Iri and K. Tanabe, eds., </editor> <publisher> Kluwer Academic Publishers, </publisher> <year> 1989, </year> <pages> pp. 83-108. </pages>
Reference-contexts: ADOL-C supports both the forward and the reverse modes (see <ref> [2] </ref>) of automatic differentiation. It is not clear which method should be preferred for computing the square Jacobian required for this problem. 4 Exploitation of Structure It is well known that J has a very regular sparse structure arising from the underlying discretization grid (see Figure 1). <p> unsigned short Tape_Tag = 1; int Keep = 0; int degree = 1; double **Indep_X = new double*[dim]; double **Depend_Y = new double*[dim]; adouble ad_xv [dim]; adouble ad_r [dim]; int adual (adouble *, adouble *); for (j = 0; j &lt; dim; j ++) - Indep_X [j] = new double <ref> [2] </ref>; Depend_Y [j] = new double [2]; - /* Compute right hand side vector f */ f=(double *) calloc (dim,sizeof (double)); if (f==NULL) return (-1); trace_on (Tape_Tag, Keep); for (i = 0; i &lt; dim; i ++) - ad_xv [i] = x [i]; else - ad_xv [i] &lt;<= x [i]; // <p> Keep = 0; int degree = 1; double **Indep_X = new double*[dim]; double **Depend_Y = new double*[dim]; adouble ad_xv [dim]; adouble ad_r [dim]; int adual (adouble *, adouble *); for (j = 0; j &lt; dim; j ++) - Indep_X [j] = new double <ref> [2] </ref>; Depend_Y [j] = new double [2]; - /* Compute right hand side vector f */ f=(double *) calloc (dim,sizeof (double)); if (f==NULL) return (-1); trace_on (Tape_Tag, Keep); for (i = 0; i &lt; dim; i ++) - ad_xv [i] = x [i]; else - ad_xv [i] &lt;<= x [i]; // Nominate ADOL-C independent variables - k

References-found: 2

