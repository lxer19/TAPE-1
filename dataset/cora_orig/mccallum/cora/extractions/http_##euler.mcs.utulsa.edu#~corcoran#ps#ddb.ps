URL: http://euler.mcs.utulsa.edu/~corcoran/ps/ddb.ps
Refering-URL: http://euler.mcs.utulsa.edu/~corcoran/pubs.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A GENETIC ALGORITHM FOR FRAGMENT ALLOCATION IN A DISTRIBUTED DATABASE SYSTEM  
Author: Arthur L. Corcoran John Hale 
Keyword: Genetic Algorithms, Distributed Databases.  
Address: Tulsa  
Affiliation: The University of  
Abstract: In this paper we explore the distributed database allocation problem, which is intractable. We also discuss genetic algorithms and how they have been used successfully to solve combinatorial problems. Our experimental results show the GA to be far superior to the greedy heuristic in obtaining optimal and near optimal fragment placements for the allocation problem with various data sets.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. A. Bell. </author> <title> Difficult data placement problems. </title> <journal> Computer J., </journal> <volume> 27(4), </volume> <year> 1992. </year>
Reference-contexts: Also, in this paper we ignore exhaustive methods such as branch and bound due to their inability to solve large combinatorial problems. For a more detailed treatment of databases and distributed databases, the reader is referred to works by Bell <ref> [1] </ref>, Bell and Grimson [2], Ceri et al. [3], Chang and Shielke [4], Elmasri and Navathe [6], and Ozsu and Valduriez [10]. 3 Genetic Algorithms A genetic algorithm (GA) is an adaptive search technique based on the principles and mechanisms of natural selection and `survival of the fittest' from natural evolution.
Reference: [2] <author> D. A. Bell and J. </author> <title> Grimson. Distributed Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, California, </address> <year> 1992. </year>
Reference-contexts: Also, in this paper we ignore exhaustive methods such as branch and bound due to their inability to solve large combinatorial problems. For a more detailed treatment of databases and distributed databases, the reader is referred to works by Bell [1], Bell and Grimson <ref> [2] </ref>, Ceri et al. [3], Chang and Shielke [4], Elmasri and Navathe [6], and Ozsu and Valduriez [10]. 3 Genetic Algorithms A genetic algorithm (GA) is an adaptive search technique based on the principles and mechanisms of natural selection and `survival of the fittest' from natural evolution.
Reference: [3] <author> S. Ceri, G. Martella, and G. Pelagatti. </author> <title> Optimal file allocation for a distributed databasee on a network of minicomputers. </title> <booktitle> In Proc. ICOD 1 Conf., </booktitle> <address> Aberdeen, Scotland, </address> <year> 1980. </year>
Reference-contexts: Also, in this paper we ignore exhaustive methods such as branch and bound due to their inability to solve large combinatorial problems. For a more detailed treatment of databases and distributed databases, the reader is referred to works by Bell [1], Bell and Grimson [2], Ceri et al. <ref> [3] </ref>, Chang and Shielke [4], Elmasri and Navathe [6], and Ozsu and Valduriez [10]. 3 Genetic Algorithms A genetic algorithm (GA) is an adaptive search technique based on the principles and mechanisms of natural selection and `survival of the fittest' from natural evolution.
Reference: [4] <author> C. C. Chang and Shielke. </author> <title> On the complexity of the file allocation problem. </title> <booktitle> In Conf. on Foundations of Data Organi-sation, </booktitle> <address> Kyoto, Japan, </address> <year> 1985. </year>
Reference-contexts: For a more detailed treatment of databases and distributed databases, the reader is referred to works by Bell [1], Bell and Grimson [2], Ceri et al. [3], Chang and Shielke <ref> [4] </ref>, Elmasri and Navathe [6], and Ozsu and Valduriez [10]. 3 Genetic Algorithms A genetic algorithm (GA) is an adaptive search technique based on the principles and mechanisms of natural selection and `survival of the fittest' from natural evolution.
Reference: [5] <author> A. L. Corcoran and R. L. Wainwright. LibGA: </author> <title> A user-friendly workbench for order-based genetic algorithm research. </title> <editor> In E. Deaton, K. M. George, H. Berghel, and G. Hedrick, editors, </editor> <booktitle> Proceedings of the 1993 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <pages> pages 111-118, </pages> <address> New York, 1993. </address> <publisher> ACM Press. </publisher>
Reference-contexts: At that time the offspring replace the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population. 4 Experimental Results We developed a genetic algorithm for the distributed database problem using LibGA <ref> [5] </ref>. The problem was encoded so that each gene in the chromosome corresponds to a fragment. An integer representation was used in which the allele values correspond to site locations. For example, an allele value of 5 in gene 7 would indicate the placement of fragment 7 at site 5.
Reference: [6] <author> R. Elmasri and S. B. Navathe. </author> <title> Fundamentals of Database Systems. </title> <address> Benjamin/Cummings, Redwood City, California, </address> <year> 1989. </year>
Reference-contexts: For a more detailed treatment of databases and distributed databases, the reader is referred to works by Bell [1], Bell and Grimson [2], Ceri et al. [3], Chang and Shielke [4], Elmasri and Navathe <ref> [6] </ref>, and Ozsu and Valduriez [10]. 3 Genetic Algorithms A genetic algorithm (GA) is an adaptive search technique based on the principles and mechanisms of natural selection and `survival of the fittest' from natural evolution. GAs grew out of Holland's [9] study of adaptation in artificial and natural systems.
Reference: [7] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: By restricting the use of the requirements matrix and having zero transmission cost, the distributed database allocation problem can be transformed to the bin packing problem, which is known to be NP-complete <ref> [7] </ref>. The DDB allocation problem is considerably more difficult than bin packing, so it is clearly also NP-complete. Consequently, unless an efficient algorithm has been found to solve intractable problems and it is proven that P = NP, then we must turn to heuristic methods to obtain approximate solutions.
Reference: [8] <author> D. E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1989. </year>
Reference-contexts: Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' <ref> [8, 9] </ref> or a `steady-state' [12] genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population.
Reference: [9] <author> J. H. Holland. </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> The University of Michigan Press, </publisher> <address> Ann Arbor, Michi-gan, </address> <year> 1975. </year>
Reference-contexts: GAs grew out of Holland's <ref> [9] </ref> study of adaptation in artificial and natural systems. By simulating natural evolution, in this way, a GA can effectively search the problem domain and easily solve complex problems. Furthermore, by emulating biological selection and reproduction techniques, a GA can perform the search in a general, representation-independent manner. <p> Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' <ref> [8, 9] </ref> or a `steady-state' [12] genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population.
Reference: [10] <author> M. T. Ozsu and P. Valduriez. </author> <title> Principles of Distributed Database Systems. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: For a more detailed treatment of databases and distributed databases, the reader is referred to works by Bell [1], Bell and Grimson [2], Ceri et al. [3], Chang and Shielke [4], Elmasri and Navathe [6], and Ozsu and Valduriez <ref> [10] </ref>. 3 Genetic Algorithms A genetic algorithm (GA) is an adaptive search technique based on the principles and mechanisms of natural selection and `survival of the fittest' from natural evolution. GAs grew out of Holland's [9] study of adaptation in artificial and natural systems.
Reference: [11] <author> J. T. Richardson, M. R. Palmer, G. E. Liepens, and M. Hilliard. </author> <title> Some guidelines for genetic algorithms with penalty functions. </title> <editor> In J. D. Schaffer, editor, </editor> <booktitle> Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <address> Arlington, Virginia, 1989. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The penalty depended on the number of sites, m. For each fragment placement which violated a constraint, the objective function added a penalty of 500m to the fitness. Such a mild penalty balances the preservation of beneficial genetic material with the selection pressure of feasibility <ref> [11] </ref>. The genetic algorithm was tested with several different parameters. We used two different population models: generational and steady-state. We also used three different crossover operators: simple (one point), uniform, and asexual. Note, asexual crossover is simply a swap of two randomly selected genes.
Reference: [12] <author> D. Whitley and J. Kauth. </author> <title> GENITOR: A different genetic algorithm. </title> <booktitle> In Proceedings of the Rocky Mountain Conference on Artificial Intelligence, </booktitle> <pages> pages 118-130, </pages> <address> Denver, Colorado, </address> <year> 1988. </year>
Reference-contexts: Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' [8, 9] or a `steady-state' <ref> [12] </ref> genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population.
References-found: 12

