URL: http://www.uni-paderborn.de/fachbereich/AG/agmadh/Scripts/GENERAL/Interactive/Babai-ECM94.ps.gz
Refering-URL: http://www.uni-paderborn.de/fachbereich/AG/agmadh/WWW/english/scripts.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: 60637-1504  
Title: Transparent Proofs and Limits to Approximation A good proof is one which makes us wiser.
Author: Laszlo Babai and Yu. I. Manin 
Note: Informally, a formal proof is transparent (or holographic) if it can  
Address: Budapest, Hungary H-1088  Chicago, Chicago, IL  
Affiliation: Eotvos University,  The University of  
Abstract: We survey a major collective accomplishment of the theoretical computer science community on efficiently verifiable proofs. Recent work by a large group of researchers has shown that this seemingly paradoxical concept can be formalized and is feasible in a remarkably strong sense; every formal proof in ZF, say, can be rewritten in transparent format (proving the same theorem in a different proof system) without increasing the length of the proof by too much. This result in turn has surprising implications for the intractability of approximate solutions of a wide range of discrete optimization problems, extending the pessimistic predictions of the P-NP theory to approximate solvability. We discuss the main results on transparent proofs and their implications to discrete optimization. We give an account of several links between the two subjects as well as a table of known limits to approximating the solution to over two dozen optimization problems. We review the conceptual foundations, including the elements of complexity theory and interactive proofs, the immediate precursors of transparent proofs. fl Partially supported by NSF Grant CCR-9014562 0 This paper will appear in the Proc. First Europ. Congr. Math., Birkhauser, 1994 
Abstract-found: 1
Intro-found: 1
Reference: [Al] <author> Alon, N.: </author> <title> Eigenvalues and expanders. </title> <booktitle> Combinatorica 6 (1986), </booktitle> <pages> 83-96. </pages>
Reference: [AlM] <author> Alon, N., Milman, V. D.: </author> <title> 1 , isoperimetric inequalities for graphs, </title> <editor> and superconcentrators. J. Combinat. </editor> <booktitle> Theory - B 38 (1985), </booktitle> <pages> 73-88. </pages>
Reference-contexts: The last word so far has come in simultaneous and nearly identical work by Mar-gulis [Mar2] and Lubotzky, Phillips, Sarnak [LPS], greatly improving the isoperimetric ratio. Their bound is obtained through an eigenvalue estimate (linked to isoperimetry by <ref> [AlM] </ref>), which rests on the theory of arithmetic and algebraic groups, including results on the Ramanujan conjecture on the number of representations of integers by certain quadratic forms. Finally we sketch the pseudorandom sequences of [CoW] and [ImZ].
Reference: [AmK] <author> Amaldi, E., Kann, V.: </author> <title> The complexity and approximability of finding maximum feasible subsystems of linear relations. </title> <type> Manuscript, </type> <institution> Royal Inst. Techn., Stockholm, </institution> <year> 1993. </year> <month> 54 </month>
Reference-contexts: one can show that 38 the problem is MAX-SNP-hard and therefore has an absolute limit of ap--proximability (unless P = NP); and then one uses an amplification trick to demonstrate inapproximability within n c for some constant c &gt; 0 where n is the length of the input (Amaldi, Kann <ref> [AmK] </ref>). 4.5 Applications of few-prover single-round protocols One-round, few-prover interactive proof systems provide particularly powerful tools for inapproximability results. Set-cover emerged as a master problem here with a number of derivatives, but it is not the only link. <p> log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Shortest-vector 1 2 log 0:5" n NP QP MIP 2;1 [ABSS] Max-eq-sat n c NP = P M2S <ref> [AmK] </ref> Min-eq-unsat 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Quadratic-prog 2 log c n NP QP MIP 2;1 [BeR],[FeL] See explanation on p. 41.
Reference: [ApH] <author> Appel, K., Haken, W.: </author> <title> Every planar map is four-colorable. </title> <journal> Bull. A.M.S. </journal> <volume> 82 (1976), </volume> <pages> 711-712. </pages>
Reference-contexts: They constitute parts of proofs of genuine mathematical interest, such as the 4-Color Theorem <ref> [ApH] </ref> and the nonexistence of projective planes of order 10 [LTS].
Reference: [ArS] <author> Arora, S., Safra, S.: </author> <title> Probabilistic checking of proofs. </title> <booktitle> In: Proc. 33rd FOCS, IEEE 1992, </booktitle> <pages> pp. 2-13. </pages>
Reference-contexts: This result was the culmination of a sequence of highly technical developments (1991-92) on the MIP = NEXP theorem [BFL] by Babai, Fortnow, Levin, Szegedy [BFLS], Feige, Goldwasser, Lovasz, Safra, Szegedy [FGLSS], Arora, Safra <ref> [ArS] </ref>, Arora, Lund, Motwani, Sudan, Szegedy [ALMSS]). The best current constant (36 queries) appears in Bellare, Goldwasser, Lund, Russell [BGLR]. Meanwhile, in a more practical line of work, combinatorial optimizers were trying to see what could be salvaged from the NP-completeness disaster. <p> Further links between the two subjects followed in rapid succession. In the [ALMSS] paper (which borrows heavily from <ref> [ArS] </ref>), it seems 9 that all the diverging threads of the theory enumerated above have come to a synthesis. <p> As observed in [FGLSS], one can reduce r to O (log N ) by a simple trick (pairwise independent sampling, cf. Section 3.3.1). This reduction has important implications; see Section 5.6. Theorem 2.3 (Transparent proofs with bounded spot-checks [ALMSS], <ref> [ArS] </ref> 11 ) Any polynomial time verifiable proof system A can be reduced at a polynomially bounded cost ` = N O (1) to an equivalent proof system A 0 admitting randomized polynomial time verification with the following cost parameters: r = O (log N ) random bits used, q = <p> The two vertices belonging to an edge are called adjacent; adjacent vertices are neighbors. The number of neighbors of a vertex is its degree. G is k-valent if each of its vertices has degree 3. 11 This result appears in [ALMSS]; its proof builds heavily on <ref> [ArS] </ref>, its immediate precursor. It seems fair to attribute the theorem to the combination of these papers. 14 A walk of length k is a sequence of vertices x 0 ; : : : ; x k such that x i1 and x i are adjacent. <p> The variable n is the length of the input string x (the theorem-candidate). We write PCP (s (n)) for PCP (s (n); s (n)). The distinct roles played by the parameters q and r, to be demonstrated in Section 4, was recognized in [FGLSS]. The PCP-notation was introduced in <ref> [ArS] </ref>. The letters stand for Probabilistically Checkable Proofs. It is easy to see that NP = PCP (0; n O (1) ) and coRP = PCP (n O (1) ; 0). <p> The next step was to scale this theorem down from exponential to polynomial time. The result: NP PCP ((log n) O (1) ) [BFLS]. A series of im provements ([FGLSS],<ref> [ArS] </ref>) led to the definitive result: Theorem 3.10 ([ALMSS]) NP = PCP (log n; 1): It is implicit in [ALMSS], [ArS] (and explicit in [BFLS]) that an input string plus its NP-witness of membership can be transformed in polynomial time 29 into a transparent membership-proof. To indicate the connection to "proof systems", we deduce Theorem 2.3 from this result. (Actually, the two are equivalent.) Proof of Theorem 2.3. <p> The mathematics behind this algorithmic result is summarized in the following result which evolved from results of [GLRSW], [RuS], <ref> [ArS] </ref>, [ALMSS] (cf. [Su1, Thm. 3.7]). By lines in F m we mean affine lines, i.e. sets of the form = (ff; fi) := fff + tfi : t 2 F g, where ff; fi 2 F m , fi 6= 0. <p> These include low-degree encoding as required for the sum check; as well as the requisite low-degree test. A modest refinement of these ideas yielded the transparent proofs of [BFLS] and [FGLSS] (Phase One). Phase Two began with <ref> [ArS] </ref> and was rapidly followed by [ALMSS], completing Phase Two.
Reference: [ABI] <author> Alon, N., Babai, L., Itai, A.: </author> <title> A fast and simple randomized parallel algorithm for the maximal independent set problem. </title> <editor> J. </editor> <booktitle> of Algorithms 7 (1986), </booktitle> <pages> 567-583. </pages>
Reference-contexts: There are only n 2 choices for the seed, so we can try all the sequences and pick the best one in polynomial time. This was an instance of complete derandomization. fl Generalizations to higher degrees of independence also exist (Joffe [Jof], cf. <ref> [ABI] </ref>, [CGHFRS]). A similar argument with triplewise independence finds a truth-value assigment that satisfies 7m=8 of a given set of m 3-clauses.
Reference: [ABSS] <author> Arora, S., Babai, L., Stern, J., Sweedyk, Z.: </author> <title> The hardness of approximate optima in lattices, codes, and systems of linear equations. </title> <booktitle> In:Proc. 34th FOCS, 17 IEEE 1993. </booktitle>
Reference-contexts: This result has a separate set of applications of its own to discrete opti 30 mization (Lund, Yannakakis [LuY2], Arora, Babai, Stern, Sweedyk <ref> [ABSS] </ref>). These applications are conditioned on the hypothesis NP 6 QP. For applications more aesthetically conditioned on NP 6= P, it is paramount to reduce the length of the transparent proof to polynomial and the number of random bits to logarithmic. <p> It is an immediate consequence that Set-cover is NP-hard to approximate within any constant factor, but this fact alone does not suffice for some important reductions. As an example we describe the reduction to Nearest-codeword <ref> [ABSS] </ref>. Let S = fS 1 ; : : : ; S m g be a family of subsets of the universe U with the properties described in Theorem 4.7. Set n = jU j. Let N be an integer 39 Ck. <p> MIP 2;1 [LuY1] any C NP = P MIP 4;1 [BGLR] Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 <ref> [ABSS] </ref> any C NP = P SC [ABSS] Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Shortest-vector 1 2 log 0:5" n NP QP MIP 2;1 [ABSS] Max-eq-sat n c NP = P M2S [AmK] Min-eq-unsat 2 log 0:5" n NP QP <p> P MIP 4;1 [BGLR] Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 <ref> [ABSS] </ref> any C NP = P SC [ABSS] Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Shortest-vector 1 2 log 0:5" n NP QP MIP 2;1 [ABSS] Max-eq-sat n c NP = P M2S [AmK] Min-eq-unsat 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = <p> SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 <ref> [ABSS] </ref> any C NP = P SC [ABSS] Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Shortest-vector 1 2 log 0:5" n NP QP MIP 2;1 [ABSS] Max-eq-sat n c NP = P M2S [AmK] Min-eq-unsat 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Quadratic-prog 2 log c n NP QP <p> SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 <ref> [ABSS] </ref> any C NP = P SC [ABSS] Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Shortest-vector 1 2 log 0:5" n NP QP MIP 2;1 [ABSS] Max-eq-sat n c NP = P M2S [AmK] Min-eq-unsat 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Quadratic-prog 2 log c n NP QP MIP 2;1 [BeR],[FeL] See explanation on p. <p> C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 <ref> [ABSS] </ref> any C NP = P SC [ABSS] Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Shortest-vector 1 2 log 0:5" n NP QP MIP 2;1 [ABSS] Max-eq-sat n c NP = P M2S [AmK] Min-eq-unsat 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Quadratic-prog 2 log c n NP QP MIP 2;1 [BeR],[FeL] See explanation on p. 41. <p> NP = P SC <ref> [ABSS] </ref> Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Shortest-vector 1 2 log 0:5" n NP QP MIP 2;1 [ABSS] Max-eq-sat n c NP = P M2S [AmK] Min-eq-unsat 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Quadratic-prog 2 log c n NP QP MIP 2;1 [BeR],[FeL] See explanation on p. 41. <p> log 0:5" n NP QP MIP 2;1 <ref> [ABSS] </ref> any C NP = P SC [ABSS] Shortest-vector 1 2 log 0:5" n NP QP MIP 2;1 [ABSS] Max-eq-sat n c NP = P M2S [AmK] Min-eq-unsat 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Quadratic-prog 2 log c n NP QP MIP 2;1 [BeR],[FeL] See explanation on p. 41.
Reference: [AHU] <author> Aho, A. V., Hopcroft, J. E., Ullman, J. D.: </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA 1974. </address>
Reference-contexts: For further background in the theory of computing we refer to the classic book of Garey and Johnson [GaJ] which offers much more than is suggested by its title. Random access machines (RAM's) are treated e.g. in <ref> [AHU] </ref>. Since graph theoretic concepts play a 2 More precisely, N should refer to the combined lengths of the proof-candidate and the theorem-candidate. <p> The term "efficient" refers variably to polynomial time and to nearly linear time. For polynomial time computations, the Turing machine model is still appropriate, but for nearly linear time, we should use a Random Access Machine (RAM) (cf. <ref> [AHU] </ref>). A RAM can verify a ZF proof in nearly linear time 7 . A function f : Z + ! Z + is called nearly linear if f (n) n (log n) C for some constant C and all sufficiently large n.
Reference: [AKS1] <author> Ajtai, M., Komlos, J., Szemeredi, E.: </author> <title> Sorting in c log n parallel steps. </title> <booktitle> Combinatorica 3 (1983), </booktitle> <pages> 1-19. </pages>
Reference-contexts: Derandomiza-tion efforts were led by G. A. Margulis (1973) who gave the first explicit construction of highly connected yet sparse networks called "expanders", invoking an impressive mathematical arsenal. First used for algorithm design in a paper by Ajtai, Komlos, Szemeredi (1983) on asymptotically optimal parallel sorting networks <ref> [AKS1] </ref>, explicit expanders turned out to be quite generic derandomization tools (Cohen, Wigderson (1989), Impagliazzo, Zuckerman (1989); cf. Section 3.3.2). At the same time, complexity assumptions led to a startling transformation of cryptography.
Reference: [AKS2] <author> Ajtai, M., Komlos, J., Szemeredi, E.: </author> <title> Deterministic simulation in LOGSPACE. </title> <booktitle> In: Proc. 19th STOC, ACM 1987, </booktitle> <pages> pp. 132-140. </pages>
Reference-contexts: Finally we sketch the pseudorandom sequences of [CoW] and [ImZ]. The idea, originating from <ref> [AKS2] </ref>, is to take a random walk on an explicit expander with 2 r vertices and constant degree, say d = 7. The starting vertex v 0 is picked uniformly at random.
Reference: [ALMSS] <author> Arora, S., Lund, C., Motwani, R., Sudan, M., Szegedy, M.: </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In:Proc. 33rd FOCS, IEEE 1992, </booktitle> <pages> pp. 14-23. </pages>
Reference-contexts: This result was the culmination of a sequence of highly technical developments (1991-92) on the MIP = NEXP theorem [BFL] by Babai, Fortnow, Levin, Szegedy [BFLS], Feige, Goldwasser, Lovasz, Safra, Szegedy [FGLSS], Arora, Safra [ArS], Arora, Lund, Motwani, Sudan, Szegedy <ref> [ALMSS] </ref>). The best current constant (36 queries) appears in Bellare, Goldwasser, Lund, Russell [BGLR]. Meanwhile, in a more practical line of work, combinatorial optimizers were trying to see what could be salvaged from the NP-completeness disaster. <p> Neither Condon's "max word problem", nor the clique problem belong to MAX-SNP (unless P = NP), so these seemed like isolated cases until <ref> [ALMSS] </ref> established a link between transparent proofs and MAX-SNP, proving that good approximations to this large class of problems cannot be found, unless P = NP. Further links between the two subjects followed in rapid succession. In the [ALMSS] paper (which borrows heavily from [ArS]), it seems 9 that all the <p> MAX-SNP (unless P = NP), so these seemed like isolated cases until <ref> [ALMSS] </ref> established a link between transparent proofs and MAX-SNP, proving that good approximations to this large class of problems cannot be found, unless P = NP. Further links between the two subjects followed in rapid succession. In the [ALMSS] paper (which borrows heavily from [ArS]), it seems 9 that all the diverging threads of the theory enumerated above have come to a synthesis. <p> As observed in [FGLSS], one can reduce r to O (log N ) by a simple trick (pairwise independent sampling, cf. Section 3.3.1). This reduction has important implications; see Section 5.6. Theorem 2.3 (Transparent proofs with bounded spot-checks <ref> [ALMSS] </ref>, [ArS] 11 ) Any polynomial time verifiable proof system A can be reduced at a polynomially bounded cost ` = N O (1) to an equivalent proof system A 0 admitting randomized polynomial time verification with the following cost parameters: r = O (log N ) random bits used, q <p> The proof of Theorem 2.3 is quite intricate and builds on an arsenal of recent techniques. A detailed proof, including proofs of most results used, can be found in a single volume in Madhu Sudan's thesis [Su1]. The forthcoming journal version of <ref> [ALMSS] </ref> (available from the authors) also contains most details. <p> The two vertices belonging to an edge are called adjacent; adjacent vertices are neighbors. The number of neighbors of a vertex is its degree. G is k-valent if each of its vertices has degree 3. 11 This result appears in <ref> [ALMSS] </ref>; its proof builds heavily on [ArS], its immediate precursor. <p> The next step was to scale this theorem down from exponential to polynomial time. The result: NP PCP ((log n) O (1) ) [BFLS]. A series of im provements ([FGLSS],[ArS]) led to the definitive result: Theorem 3.10 (<ref> [ALMSS] </ref>) NP = PCP (log n; 1): It is implicit in [ALMSS], [ArS] (and explicit in [BFLS]) that an input string plus its NP-witness of membership can be transformed in polynomial time 29 into a transparent membership-proof. To indicate the connection to "proof systems", we deduce Theorem 2.3 from this result. (Actually, the two are equivalent.) Proof of Theorem 2.3. <p> Combined with stronger results on transparent proofs ([ArS], <ref> [ALMSS] </ref>) and the "random bit recycling" technique of [CoW], [ImZ], the [FGLSS] reduction led to the following definitive conclusion. <p> In other words, a PTAS exists. However, the Longest-path problem is MAX-SNP-hard. Putting this all together, it follows that the longest path cannot be approximated in polynomial time within any constant, unless P = NP <ref> [ALMSS] </ref>, [KMR]. A similar but even more powerful self-amplification holds for the Max-eq-sat problem. The input is a system of linear equations with rational coefficients; the question is the maximum number of simultaneously satisfiable equations. <p> MIP 4;1 refers to Theorem 3.11, characterizing NP in terms of MIP 4;1 . The last column gives a pointer to the literature. 41 Problem Not approx unless Reduced Reference within from MAX-CLIQUE (CLQ) n c NP = P PCP [FGLSS] <ref> [ALMSS] </ref> Chromatic-number n c NP = P CLQ [LuY1] Max-planar-subgr n c NP = P CLQ [LuY2] Max-bipartite-subgr n c NP = P CLQ [LuY2] Max- fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P <p> 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P CLQ [Zu2] Max-set-packing n c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P CLQ [Zu2] Constr-max-job-seq n c NP = P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P PCP <ref> [ALMSS] </ref> Vertex-cover (5) 1 + c NP = P M3S [PaY1] Max-cut 1 + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c NP = P M3S [PaY2] Steiner-tree 1 + c NP = P M3S [BeP] Shortest-supstring 1 + c NP = P M3S [BJLTY] Longest-path 2 log <p> Total-degree tests are the winners in terms of the number of queries. Query-efficient total degree tests are required for the proof of Theorem 2.3. The known total-degree tests require H = F (in particular, the field must be finite). Theorem 5.3 ([ArS], [RuS], <ref> [ALMSS] </ref>) Let ffi &gt; 0. For the total-degree code P total (d; m; F ) (m; F ) over a prime field of order jF j Cd 2 there exists a threshold-ffi total-degree test which makes O (d=ffi) queries. <p> The mathematics behind this algorithmic result is summarized in the following result which evolved from results of [GLRSW], [RuS], [ArS], <ref> [ALMSS] </ref> (cf. [Su1, Thm. 3.7]). By lines in F m we mean affine lines, i.e. sets of the form = (ff; fi) := fff + tfi : t 2 F g, where ff; fi 2 F m , fi 6= 0. <p> These include low-degree encoding as required for the sum check; as well as the requisite low-degree test. A modest refinement of these ideas yielded the transparent proofs of [BFLS] and [FGLSS] (Phase One). Phase Two began with [ArS] and was rapidly followed by <ref> [ALMSS] </ref>, completing Phase Two. <p> The selection of two random lines (or two independent random items from any collection of objects) requires only a logarithmic number of random bits. 50 5.7 Constant number of queries We do not have room to indicate the wealth of ideas leading to constant query transparent proofs <ref> [ALMSS] </ref>. But some of the chief ingredients have already been described; most notably the ultra-efficient total-degree test of Theorem 5.3. Here we give a very rough outline of the overall strategy. <p> The length of the sublemmas is (log log n) O (1) . Clearly, only a constant number of sublemmas need to be checked. Continuing in this fashion, one could reduce the number of queries to arbitrary many times iterated logarithm, but all this is still not a constant. However, <ref> [ALMSS] </ref> introduce a shortcut here. They construct a separate P 7! P fl transformation yielding transparent proofs P fl of exponential length, yet verifiable by a constant number of queries! Now the proof of each sublemma is transformed into a P fl -transparent proof.
Reference: [AMS] <author> Cipra, Barry: </author> <title> New computer insights from "transparent" proofs. In: </title> <journal> What's Happening in the Mathematical Sciences, </journal> <volume> Vol. 1, </volume> <publisher> A.M.S. </publisher> <year> 1993, </year> <pages> 7-11. </pages>
Reference: [ASE] <author> Alon, N., Spencer, J. H., Erd-os, P.: </author> <title> The probabilistic method, </title> <publisher> Wiley, </publisher> <year> 1992. </year>
Reference: [Ba1] <author> Babai, L.: </author> <title> Trading group theory for randomness, </title> <booktitle> Proc. 17th STOC, 18 ACM 1985, </booktitle> <pages> pp. 421-429. </pages>
Reference-contexts: While I made every effort to be fair, I have to apologize to those colleagues whose work may not receive its proper share of credit here. Partly motivated by cryptographic considerations, the notion of interactive proofs, introduced in 1985 (Goldwasser, Micali, Rackoff [GMR], and Babai <ref> [Ba1] </ref>) extended the notion of efficient verifiability by combining the notion of short proofs with randomization and interaction between the Prover and the Verifier. <p> For an introduction to the subject, embedded in a fable about Merlin and King Arthur, see [Ba2]. 3.4.1 Single prover In an interactive proof [GMR], <ref> [Ba1] </ref>, [BaM], a super-intelligent Prover P tries to convince a moderately intelligent, skeptical Verifier that x 2 L (regardless of the truth of this statement). (In the fable, Merlin is the Prover and Arthur the Verifier.) P is an (arbitrarily complex) function (mapping strings to strings); V is a randomizing polynomial-time
Reference: [Ba2] <author> Babai, L.: </author> <title> E-mail and the unexpected power of interaction. </title> <booktitle> In: Proc. 5th IEEE Symp. on Structure in Complexity Theory, Barcelona 1990, </booktitle> <pages> pp. 30-44. </pages>
Reference-contexts: The class NP formalizes the notion of efficient verifiability: a short for 6 Read the informal parts of <ref> [Ba2] </ref> to get a sense of the excitement that surrounded this discovery. 8 mal proof, or a correct tiling of the chessboard, can be verified efficiently. <p> For an introduction to the subject, embedded in a fable about Merlin and King Arthur, see <ref> [Ba2] </ref>. 3.4.1 Single prover In an interactive proof [GMR], [Ba1], [BaM], a super-intelligent Prover P tries to convince a moderately intelligent, skeptical Verifier that x 2 L (regardless of the truth of this statement). (In the fable, Merlin is the Prover and Arthur the Verifier.) P is an (arbitrarily complex) function
Reference: [Ba3] <author> Babai, L.: </author> <title> Transparent (holographic) proofs. </title> <booktitle> In: Proc. 10th Ann. Symp. on Theoret. Aspects of Comp. Sci. (STACS'93), Wurzburg (Germany) 1993, Springer Lect. Notes in Comp. Sci. 665 (1993), </booktitle> <pages> 525-534. </pages>
Reference-contexts: Rentschler, an editor of this volume, for his infinite patience, constant encouragement, and his energetic efforts to make this paper more readable. His and the anonymous referees' criticisms helped a great deal to improve the presentation. A short preliminary version of this paper appeared in <ref> [Ba3] </ref>. Added in proof. Major progress has been reported shortly after completion of this writing (Nov. 1993). As a result, several of the problems stated above are now out of date. Polishchuk and Spielman [PoS] announced a result which combines short transparent proofs with constant-query verifiability.
Reference: [Bar] <author> Barwise, J.: </author> <title> Mathematical proofs of computer system correctness. </title> <journal> Notices of the A.M.S. </journal> <month> 36/7 (Sep. </month> <year> 1989), </year> <pages> 844-851. </pages>
Reference-contexts: They constitute parts of proofs of genuine mathematical interest, such as the 4-Color Theorem [ApH] and the nonexistence of projective planes of order 10 [LTS]. More significantly, they occur as proofs of assertions that computer programs work according to their formal specifications <ref> [Bar] </ref>, [BrH], [Coh], [Mac]. (Whether those formal specifications adequately describe human intentions is of course another matter.) Although the correctness of a program cannot be verified in general (even the simplest questions regarding the performance of a program are undecidable), it may now be possible to verify each instance of computation
Reference: [BaF] <author> Babai, L., Friedl, K.: </author> <title> On slightly superlinear transparent proofs. </title> <institution> Univ. Chicago Tech. </institution> <note> Report CS-93-13 (1993). </note>
Reference-contexts: Algorithm Maximum-degree-test (f; d; ffi) Set s = m ln 2 maxf4 (d + 1); 1=ffig. Select s lines from fl uniformly at random. If any of them is wrong, reject. Else, accept. The proof of correctness of this algorithm is non-trivial. The result appears in <ref> [BaF] </ref>, [FHS]. The proof follows the ideas of [FGLSS, Lemma 10] and is based on a combinatorial isoperimetric inequality for the m-dimensional grid [BaS]. Total-degree tests are the winners in terms of the number of queries. Query-efficient total degree tests are required for the proof of Theorem 2.3. <p> Note that the Verifier in this result will not read even the theorem-candidate; the parameter q now bounds the total number of queries, inlcuding the queries to the (encoded) theorem-candidate. Details of this upgrade are given in [BFLS] and <ref> [BaF] </ref>.
Reference: [BaM] <author> Babai, L., Moran, S.: </author> <title> Arthur-Merlin games: a randomized proof system, and a hierarchy of complexity classes, </title> <journal> J. Computer and Sys. Sci. </journal> <volume> 36 (1988), </volume> <pages> 254-276. </pages>
Reference-contexts: For an introduction to the subject, embedded in a fable about Merlin and King Arthur, see [Ba2]. 3.4.1 Single prover In an interactive proof [GMR], [Ba1], <ref> [BaM] </ref>, a super-intelligent Prover P tries to convince a moderately intelligent, skeptical Verifier that x 2 L (regardless of the truth of this statement). (In the fable, Merlin is the Prover and Arthur the Verifier.) P is an (arbitrarily complex) function (mapping strings to strings); V is a randomizing polynomial-time Turing
Reference: [BaS] <author> Babai, L., Szegedy, M.: </author> <title> Local expansion of symmetrical graphs. </title> <booktitle> Combinatorics, Probability and Computing 1, </booktitle> <pages> 1-11. </pages>
Reference-contexts: If any of them is wrong, reject. Else, accept. The proof of correctness of this algorithm is non-trivial. The result appears in [BaF], [FHS]. The proof follows the ideas of [FGLSS, Lemma 10] and is based on a combinatorial isoperimetric inequality for the m-dimensional grid <ref> [BaS] </ref>. Total-degree tests are the winners in terms of the number of queries. Query-efficient total degree tests are required for the proof of Theorem 2.3. The known total-degree tests require H = F (in particular, the field must be finite). Theorem 5.3 ([ArS], [RuS], [ALMSS]) Let ffi &gt; 0.
Reference: [Bel] <author> Bellare, M.: </author> <title> Interactive proofs and approximation: reductions from two provers in one round. </title> <booktitle> In: Proc. 2nd Israel Symp. on Theory and Computing Sys. ISTCS'93, Natanya, Israel 1993, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1993, </year> <pages> pp. 266-274. </pages> <booktitle> 17 FOCS = Annual IEEE Symposium on Foundations of Computer Science 18 STOC = Annual ACM Symposium on Theory of Computing 55 </booktitle>
Reference: [Ber] <author> Berlekamp, E. R.: </author> <title> Factoring polynomials over large finite fields. </title> <journal> Math. of Computation, </journal> <volume> 24 (1970), </volume> <pages> 713-735. </pages>
Reference-contexts: The class of languages L recognized by polynomial time Las Vegas algorithms is denoted by ZPP. It should be clear that ZPP = RP " coRP: Berlekamp's celebrated algorithm for factoring polynomials over finite fields is of the Las Vegas variety <ref> [Ber] </ref>. Berlekamp uses randomization to discover divisors of a polynomial, eventually reaching the irreducible factors with large probability. Then the factors are certified by a deterministic irreducibility test.
Reference: [BeF] <author> Beaver, D., Feigenbaum J.: </author> <title> Hiding instances in multioracle queries. </title> <booktitle> In: Proc. 7th Symp. on Theoretical Aspects of Comp. </booktitle> <publisher> Sci. , Springer LNCS 415 (1990), </publisher> <pages> pp. 37-48. </pages>
Reference-contexts: As noticed by Beaver, Feigenbaum <ref> [BeF] </ref> and Lipton [Lip], self-correction is a feature typically displayed by polynomials (self-correction is done by interpolation from random samples). This led to a link with classical error-correcting codes (cf. Sudan [Su1]).
Reference: [BeP] <author> Bern, M., Plassman, P.: </author> <title> The Steiner problem with edge length 1 and 2. </title> <journal> Inf. Proc. Letters, </journal> <volume> 32 (1989), </volume> <pages> 171-176. </pages>
Reference-contexts: If in addition belongs to MAX-SNP then is MAX-SNP-complete. Following the proof of the NP-completeness of 3sat, one can show that Max-3sat is MAX-SNP-complete. Via L-reductions from Max-3sat one can prove that all MAX-SNP problems mentioned so far are in fact MAX-SNP-complete, and many more are MAX-SNP-hard [PaY1], [BJLTY], <ref> [BeP] </ref>. The latter include the Shortest-superstring and the Metric-traveling-salesman problems. <p> P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P PCP [ALMSS] Vertex-cover (5) 1 + c NP = P M3S [PaY1] Max-cut 1 + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c NP = P M3S [PaY2] Steiner-tree 1 + c NP = P M3S <ref> [BeP] </ref> Shortest-supstring 1 + c NP = P M3S [BJLTY] Longest-path 2 log 1" n NP QP M3S [KMR] any C NP = P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 [LuY1] any C NP = P MIP 4;1 [BGLR] Dominating-set c log n NP QP SC
Reference: [BeR] <author> Bellare, M., Rogaway, P.: </author> <title> The complexity of approximating a nonlinear program. In: Complexity in Numerical Optimization, </title> <editor> P. Pardalos, ed., </editor> <publisher> World Scientific, </publisher> <address> Singapore 1993. </address>
Reference-contexts: The class of languages L recognized by polynomial time Las Vegas algorithms is denoted by ZPP. It should be clear that ZPP = RP " coRP: Berlekamp's celebrated algorithm for factoring polynomials over finite fields is of the Las Vegas variety <ref> [Ber] </ref>. Berlekamp uses randomization to discover divisors of a polynomial, eventually reaching the irreducible factors with large probability. Then the factors are certified by a deterministic irreducibility test.
Reference: [BeS] <author> Berman P, Schnitger, G.: </author> <title> On the complexity of approximating the independent set problem. </title> <booktitle> Information and Computation 96 (1992), </booktitle> <pages> 77-94. </pages>
Reference: [BeW] <author> Berlekamp, E. R., Welch, L.: </author> <title> Error correction of algebraic block codes, </title> <type> US Patent Number 4,633,470 (filed: </type> <year> 1986) </year>
Reference: [Bl] <author> Blum, M.: </author> <title> Program checking. </title> <booktitle> In: Proc. FST&TCS, </booktitle> <publisher> Springer L.N.C.S. </publisher> <pages> 560, pp. 1-9. </pages>
Reference: [BlK] <author> Blum, M., Kannan, S.: </author> <title> Designing Programs that Check Their Work. </title> <booktitle> In: Proc. 21st STOC, ACM 1989, </booktitle> <pages> pp. 86-97. </pages>
Reference-contexts: A separate line of work, directly related to interactive proofs, introduced the concept of "self-testing" and "self-correcting" programs (Blum, Kannan, Luby, Rubinfeld ([Bl], <ref> [BlK] </ref>, [BLR]). "Self-testing" means that a program claimed to compute a certain function f can itself be used either to verify an instance of the computation or to reject the program. "Self-correction" assumes we have a program which works correctly on a large fraction of the input space; we then use
Reference: [BlM] <author> Blum, M., Micali, S.: </author> <title> How to generate cryptographically strong sequences of pseudo random bits. </title> <journal> SIAM J. Comp. </journal> <volume> 13 (1984), </volume> <pages> 850-864. </pages> <note> (Preliminary version in: 23rd FOCS, </note> <year> 1982, </year> <pages> pp. 112-117.) </pages>
Reference: [BoH] <author> Boppana, R. B., Haldorsson, M. M.: </author> <title> Approximating maximum independent sets by excluding subgraphs. </title> <booktitle> In: Proc. 2nd Scandinavian Workshop on Algorithmic Theory, </booktitle> <publisher> Springer, LNCS 447 (1990), </publisher> <pages> pp. 13-25. </pages>
Reference: [BoM] <author> Bondy, J.A., Murty, U.S.R.: </author> <title> Graph Theory with Applications, </title> <publisher> North-Holland, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: few volumes of Bourbaki), furthermore, they should include general axiom schemes of mathematics (say, ZF), the axioms and inference rules of logic, parsing procedures to implement logic, etc. 4 role in several parts of this survey (esp. in Section 4), browsing through the introductory paragraphs of the relevant chapters of <ref> [BoM] </ref> may be helpful. 1.1 Cost of reliability reduced Long formal proofs occur as machine-generated proofs or proofs generated by machine + human interaction. They constitute parts of proofs of genuine mathematical interest, such as the 4-Color Theorem [ApH] and the nonexistence of projective planes of order 10 [LTS]. <p> The subgraph H = (W; F ) spans the subset S V if S W . If H spans V then H is a spanning subgraph. Note that G has a spanning tree exactly if G is connected. For further concepts of graph theory we refer to <ref> [BoM] </ref> and [GaJ]. 3.1.2 Languages. Polynomial and quasipolynomial time We fix a finite set , called the alphabet (jj 2). Usually, = f0; 1g. All finite strings (words) composed of elements of constitute the countable set fl . The length of a string x 2 fl is denoted by jxj.
Reference: [BrH] <author> Brock, B., Hunt, W.A. Jr.: </author> <title> Report on the formal specification and partial verification of the VIPER microprocessor. Computational Logic, </title> <publisher> Inc., </publisher> <address> Austin, Texas, </address> <month> Jan </month> <year> 1990 </year> <month> (Tech. </month> <journal> Rep. </journal> <volume> no. </volume> <pages> 46). </pages>
Reference-contexts: They constitute parts of proofs of genuine mathematical interest, such as the 4-Color Theorem [ApH] and the nonexistence of projective planes of order 10 [LTS]. More significantly, they occur as proofs of assertions that computer programs work according to their formal specifications [Bar], <ref> [BrH] </ref>, [Coh], [Mac]. (Whether those formal specifications adequately describe human intentions is of course another matter.) Although the correctness of a program cannot be verified in general (even the simplest questions regarding the performance of a program are undecidable), it may now be possible to verify each instance of computation by
Reference: [BFL] <author> Babai, L., Fortnow, L., Lund, C.: </author> <title> Nondeterministic exponential time has two-prover interactive protocols. </title> <note> Computational Complexity 1 (1991) 3-40. </note>
Reference-contexts: Meanwhile, a further extension, multi-prover interactive proofs were invented (Ben-Or, Goldwasser, Kilian, Wigderson [BGKW]). In this model, the final result, "MIP = NEXP", asserts that with two infinitely powerful, securely separated provers, one can verify in polynomial time any theorem admitting an exponentially long formal proof (Babai, Fortnow, Lund <ref> [BFL] </ref>). <p> This result was the culmination of a sequence of highly technical developments (1991-92) on the MIP = NEXP theorem <ref> [BFL] </ref> by Babai, Fortnow, Levin, Szegedy [BFLS], Feige, Goldwasser, Lovasz, Safra, Szegedy [FGLSS], Arora, Safra [ArS], Arora, Lund, Motwani, Sudan, Szegedy [ALMSS]). The best current constant (36 queries) appears in Bellare, Goldwasser, Lund, Russell [BGLR]. <p> the random walk as the strings i (of length r each) to be fed successively to our randomizing machine M (c is a suitable constant). fl 3.4 Interactive proofs The theory of transparent proofs is rooted in the theory of interactive proofs; especially in recent developments regarding "multi-prover interactive proofs" <ref> [BFL] </ref> (Section 3.4.3). <p> is accepted by V for every , hence x 2 L. fl In particular, we have PCP (log n; n O (1) ) = NP: (4) The "affidavit" model of MIP shows that MIP = PCP (n O (1) ). (It then follows from Prop. 3.9 that MIP NEXP.) The <ref> [BFL] </ref> result can now be restated as NEXP = PCP (n O (1) ). The next step was to scale this theorem down from exponential to polynomial time. The result: NP PCP ((log n) O (1) ) [BFLS]. <p> Corresponding to the two kinds of polynomial codes, we have maximum-degree testers and total-degree testers. The first low-degree test was a maximum-degree test <ref> [BFL] </ref>. We describe a variant of that test with an improved analysis. It is critical for the application to Theorem 2.2 that the smallest allowable domain size jHj is linear in the degree d. Theorem 5.2 Let ffi &gt; 0. <p> Here it is crucial that the Phase One verifier needed O (log n) random bits only; this guarantees that the number of random strings to consider is n O (1) . The proof of the MIP = NEXP theorem <ref> [BFL] </ref> contains the first versions of most of the main components of transparent proofs. These include low-degree encoding as required for the sum check; as well as the requisite low-degree test. A modest refinement of these ideas yielded the transparent proofs of [BFLS] and [FGLSS] (Phase One). <p> This is achieved by the maximum-degree-test of Theorem 5.2. If we wish to use the convenience of finite fields, the "sum of squares" trick does not work. Section 7.2 of <ref> [BFL] </ref> indicates three methods of reducing the simultaneous vanishing problem to the vanishing of certain sums. 5.6 Using pairwise independence to characterize NP We indicate how the techniques described so far yield the first PCP-characterization of NP, turning the inclusion (4) of Section 3.5 into equality: NP = PCP (log n;
Reference: [BFLS] <author> Babai, L., Fortnow, L., Levin, L.A., Szegedy, M.: </author> <title> Checking computations in polylogarithmic time. </title> <booktitle> In: Proc. 23rd STOC, ACM 1991, </booktitle> <pages> pp. 21-31. </pages>
Reference-contexts: Correct proofs will always be accepted 1 We use the informal terms "transparent proofs" and "holographic proofs" as synonyms. Both terms were coined by L. Levin. The first one was first used (in a technical sense) in <ref> [BFLS] </ref>. The second term alludes to a remarkable property of holograms: even a small fragment of a hologram still encodes, if somewhat fuzzily, the entire 3D picture. <p> This result was the culmination of a sequence of highly technical developments (1991-92) on the MIP = NEXP theorem [BFL] by Babai, Fortnow, Levin, Szegedy <ref> [BFLS] </ref>, Feige, Goldwasser, Lovasz, Safra, Szegedy [FGLSS], Arora, Safra [ArS], Arora, Lund, Motwani, Sudan, Szegedy [ALMSS]). The best current constant (36 queries) appears in Bellare, Goldwasser, Lund, Russell [BGLR]. <p> Actually, the Kolmogorov-Uspenski thesis is stronger in that it operates with the cleaner model of pointer machines and asserts linear time simulations of any machine model on pointer-machines (cf. <ref> [BFLS] </ref>). <p> The "cost of reducing a proof system A to an equivalent proof system A 0 " refers to the complexity of constructing the A 0 -proof P 0 from (T; P ), as a function of N := jT j + jP j. Theorem 2.2 (Slightly superlinear transparent proofs <ref> [BFLS] </ref>) Given " &gt; 0, any nearly linear time verifiable proof system A can be reduced at a slightly superlinear cost ` = O (N 1+" ) to an equivalent proof system A 0 admitting randomized polynomial time verification with polylogarithmic cost parameters r; q s where s = (log N <p> It was subsequently observed that this result can be scaled down, replacing n by log n, to yield transparent proofs of quasipolynomial length for membership in NP languages <ref> [BFLS] </ref>, [FGLSS]. With a little extra effort, the length went down to polynomial [BFLS]. (Warning: scaling down is not automatic: one cannot "scale down" the length of the input (theorem-candidate).) 26 3.4.4 Few provers, single round In a different direction, a major step was to reduce the MIP protocols to a <p> It was subsequently observed that this result can be scaled down, replacing n by log n, to yield transparent proofs of quasipolynomial length for membership in NP languages <ref> [BFLS] </ref>, [FGLSS]. With a little extra effort, the length went down to polynomial [BFLS]. (Warning: scaling down is not automatic: one cannot "scale down" the length of the input (theorem-candidate).) 26 3.4.4 Few provers, single round In a different direction, a major step was to reduce the MIP protocols to a single round: the Verifier rolls the dice, computes all questions and sends them <p> The next step was to scale this theorem down from exponential to polynomial time. The result: NP PCP ((log n) O (1) ) <ref> [BFLS] </ref>. A series of im provements ([FGLSS],[ArS]) led to the definitive result: Theorem 3.10 ([ALMSS]) NP = PCP (log n; 1): It is implicit in [ALMSS], [ArS] (and explicit in [BFLS]) that an input string plus its NP-witness of membership can be transformed in polynomial time 29 into a transparent membership-proof. <p> The result: NP PCP ((log n) O (1) ) <ref> [BFLS] </ref>. A series of im provements ([FGLSS],[ArS]) led to the definitive result: Theorem 3.10 ([ALMSS]) NP = PCP (log n; 1): It is implicit in [ALMSS], [ArS] (and explicit in [BFLS]) that an input string plus its NP-witness of membership can be transformed in polynomial time 29 into a transparent membership-proof. To indicate the connection to "proof systems", we deduce Theorem 2.3 from this result. (Actually, the two are equivalent.) Proof of Theorem 2.3. <p> These include low-degree encoding as required for the sum check; as well as the requisite low-degree test. A modest refinement of these ideas yielded the transparent proofs of <ref> [BFLS] </ref> and [FGLSS] (Phase One). Phase Two began with [ArS] and was rapidly followed by [ALMSS], completing Phase Two. <p> Note that the Verifier in this result will not read even the theorem-candidate; the parameter q now bounds the total number of queries, inlcuding the queries to the (encoded) theorem-candidate. Details of this upgrade are given in <ref> [BFLS] </ref> and [BaF].
Reference: [BGKW] <author> Ben-Or, M., Goldwasser, S., Kilian, J., Wigderson, A.: </author> <title> Multi-prover interactive proofs: How to remove the intractability assumptions. </title> <booktitle> In: Proc. 20th STOC, ACM 1988, </booktitle> <pages> pp. 113-131. </pages>
Reference-contexts: Meanwhile, a further extension, multi-prover interactive proofs were invented (Ben-Or, Goldwasser, Kilian, Wigderson <ref> [BGKW] </ref>). In this model, the final result, "MIP = NEXP", asserts that with two infinitely powerful, securely separated provers, one can verify in polynomial time any theorem admitting an exponentially long formal proof (Babai, Fortnow, Lund [BFL]). <p> of witnesses. (How many 100-page proofs does Riemann's hypothesis have?) We thus proved the result that all #P-functions admit interactive proofs [LFKN], the immediate precursor of the IP = PSPACE theorem [Sh]. 3.4.3 Multi-prover interactive proofs A variant of the notion of interactive proofs, involving several provers, was introduced in <ref> [BGKW] </ref>. The Verifier simultaneously queries the provers much in the way a police detective would interrogate suspects sharing a common alibi. The provers (the suspects) are completely isolated and cannot eavesdrop on the communication between the Verifier and the other provers. <p> The class of languages admitting polynomial time "multi-prover interactive proofs" of membership is denoted by MIP. It turns out that any (polynomial) number of provers can be replaced by only two provers: MIP = MIP 2 <ref> [BGKW] </ref>; or by a single exponentially long string which we shall refer to as an "affidavit" (unalterable written statement) (Fortnow, Rompel, Sipser [FRS]). In the latter model, the Verifier will make a polynomial number of spot-checks to the affidavit. An affidavit therefore constitutes a transparent proof of membership.
Reference: [BGLR] <author> Bellare, M., Goldwasser, S., Lund, C., Russell, A.: </author> <title> Efficient Probabilistically Checkable Proofs: Applications to Approximation. </title> <booktitle> In: Proc 25th STOC, ACM 1993, </booktitle> <pages> pp. 294-304. </pages>
Reference-contexts: The best current constant (36 queries) appears in Bellare, Goldwasser, Lund, Russell <ref> [BGLR] </ref>. Meanwhile, in a more practical line of work, combinatorial optimizers were trying to see what could be salvaged from the NP-completeness disaster. <p> These applications are conditioned on the hypothesis NP 6 QP. For applications more aesthetically conditioned on NP 6= P, it is paramount to reduce the length of the transparent proof to polynomial and the number of random bits to logarithmic. This has been achieved by <ref> [BGLR] </ref> at the cost of going back to 4 provers. Theorem 3.11 ([BGLR]) For any constant " &gt; 0, NP = MIP 4;1 (log n; (log log n) O (1) ; "): In addition to a host of applications to discrete optimization, this result is the basis of the proofs of <p> 0, NP = MIP 4;1 (log n; (log log n) O (1) ; "): In addition to a host of applications to discrete optimization, this result is the basis of the proofs of effective constants such as the bound 36 on the number of spot-checks required for a transparent proof <ref> [BGLR] </ref>. 4 Intractability of approximate optimization In this section we discuss four separate links between interactive/transparent proofs and the hardness of approximate optimization. We begin with a definition of the degree of approximation. Let f; h be functions assigning positive real values to strings. <p> A trick invented by Zuckerman [Zu1] allows one to bypass this difficulty at the cost of slightly strengthening the assumption NP 6= P to NP 6= ZPP (NP-complete problems cannot be solved by polynomial time Las Vegas algorithms, cf. Section 3.2). <ref> [BGLR] </ref> and [Zu1] show that the clique inapproximability result holds with c = 1=30 under this assumption. The link between transparent proofs and clique approximation is provided by the following result. <p> Theorem 4.3 ([ALMSS]) Max-3sat does not admit a PTAS, unless P = NP. In other words, there exists a constant c &gt; 0 such that Max-3sat cannot be approximated within 1 + c in polynomial time unless P = NP. The best constant currently known is c = 1=112 <ref> [BGLR] </ref>. The proof of Theorem 4.3 again follows from Theorem 3.10 through a fairly simple reduction. 15 A truth-assigment satisfying at least 7=8 of the clauses can be found efficiently, using a "greedy" strategy [Jo1]. Cf. also Sec. 3.3.1. <p> Let k be the number of bits spot-checked by the Verifier of a PCP (log n; 1)- type transparent membership proof for an NP-complete language. (By <ref> [BGLR] </ref> we may take k = 36.) The basic idea, going back to Cook [Coo], is to represent the Verifier's computation by a Boolean formula. Let L 2 NP = PCP (log n; 1) and suppose we want to decide membership of the string x in L. <p> Both the [FeL] construction with two provers and polylog random bits, and the <ref> [BGLR] </ref> construction with four provers and logarithmic number of random bits exhibit the feature of having a "Master Prover"; the other prover (s) only corroborate the Master's response. <p> More precisely, given the random string and the response by the Master Prover to the Verifier's question generated from , there is at most one acceptable answer from the other prover (s). Most reductions rely on this functional dependence. The hard-to-approximate cases of Set-cover [LuY1], <ref> [BGLR] </ref> also display a specific, very useful additional feature, which we state next. Theorem 4.7 ([BGLR],[LuY1]) Let L fl be an NP-language. <p> Therefore it is no easier to approximate the optimum than to answer any NP-question. fl Notably, this reduction does not work with more than two provers; 4 provers are good for quartic programming. For other problems like Set-cover, 2 vs. 4 provers make only a marginal difference <ref> [BGLR] </ref>. 4.6 Inapproximability table of results In this section, we give a partial list of recent results on the inapprox-imability status of optimization problems. The table contains only results that depend on transparent proof / MIP theory. <p> 1 + c NP = P M3S [BeP] Shortest-supstring 1 + c NP = P M3S [BJLTY] Longest-path 2 log 1" n NP QP M3S [KMR] any C NP = P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 [LuY1] any C NP = P MIP 4;1 <ref> [BGLR] </ref> Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Nearest-vector 2 log <p> M3S [BJLTY] Longest-path 2 log 1" n NP QP M3S [KMR] any C NP = P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 [LuY1] any C NP = P MIP 4;1 <ref> [BGLR] </ref> Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Shortest-vector <p> P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 [LuY1] any C NP = P MIP 4;1 <ref> [BGLR] </ref> Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Shortest-vector 1 2 log 0:5" n NP QP MIP 2;1 [ABSS] Max-eq-sat n c NP = <p> A host of other improvements follows, including a further reduction of the number of queries needed to verify transparent proofs (the expected number of queries is 24, down from 30 of <ref> [BGLR] </ref>).
Reference: [BJLTY] <author> Blum, A., Jiang, T., Li, M., Tromp. J., Yannakakis, M.: </author> <title> Linear approximation of shortest superstrings. </title> <booktitle> In: Proc. 23rd STOC, ACM 1991, </booktitle> <pages> pp. 328-336. </pages>
Reference-contexts: If in addition belongs to MAX-SNP then is MAX-SNP-complete. Following the proof of the NP-completeness of 3sat, one can show that Max-3sat is MAX-SNP-complete. Via L-reductions from Max-3sat one can prove that all MAX-SNP problems mentioned so far are in fact MAX-SNP-complete, and many more are MAX-SNP-hard [PaY1], <ref> [BJLTY] </ref>, [BeP]. The latter include the Shortest-superstring and the Metric-traveling-salesman problems. <p> = P PCP [ALMSS] Vertex-cover (5) 1 + c NP = P M3S [PaY1] Max-cut 1 + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c NP = P M3S [PaY2] Steiner-tree 1 + c NP = P M3S [BeP] Shortest-supstring 1 + c NP = P M3S <ref> [BJLTY] </ref> Longest-path 2 log 1" n NP QP M3S [KMR] any C NP = P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 [LuY1] any C NP = P MIP 4;1 [BGLR] Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover
Reference: [BLR] <author> Blum, M., Luby, M., Rubinfeld, R.: </author> <title> Self-testing/correcting with Applications to Numerical Problems. </title> <booktitle> In: Proc. 22nd STOC, ACM 1990, </booktitle> <pages> pp. 73-83. 56 </pages>
Reference-contexts: A separate line of work, directly related to interactive proofs, introduced the concept of "self-testing" and "self-correcting" programs (Blum, Kannan, Luby, Rubinfeld ([Bl], [BlK], <ref> [BLR] </ref>). "Self-testing" means that a program claimed to compute a certain function f can itself be used either to verify an instance of the computation or to reject the program. "Self-correction" assumes we have a program which works correctly on a large fraction of the input space; we then use this
Reference: [Coh] <author> Cohn, A.: </author> <title> The notion of proof in hardware verification. </title> <editor> J. Aut. </editor> <booktitle> Reasoning 5 (1989), </booktitle> <pages> 127-139. </pages>
Reference-contexts: They constitute parts of proofs of genuine mathematical interest, such as the 4-Color Theorem [ApH] and the nonexistence of projective planes of order 10 [LTS]. More significantly, they occur as proofs of assertions that computer programs work according to their formal specifications [Bar], [BrH], <ref> [Coh] </ref>, [Mac]. (Whether those formal specifications adequately describe human intentions is of course another matter.) Although the correctness of a program cannot be verified in general (even the simplest questions regarding the performance of a program are undecidable), it may now be possible to verify each instance of computation by the
Reference: [Con] <author> Condon, A.: </author> <title> The complexity of the max word problem and the power of one-way interactive proof systems. </title> <journal> Comput. </journal> <note> Complexity 3 (1993), 292-305. Prelim. version in Proc. 8th Symp. Theoret. Aspects of Comp. Sci., Springer L.N.C.S., </note> <year> 1991, </year> <pages> pp. 456-465. </pages>
Reference-contexts: A large number of complete problems for this class have been found, and all of these optima are either equally hard or equally easy to approximate. "Equally easy" is now out of question. Anne Condon <ref> [Con] </ref> was the first to demonstrate how interactive proofs can be used to prove the hardness of approximation to an NP-complete optimization problem, thereby forging a surprising link and establishing the first instance of what soon turned out to be a far reaching and profound connection. <p> This connection was first established by Anne Condon <ref> [Con] </ref>. She defines a class of single prover interactive proofs with additional constraints on the verifier. First, the verifier has logarithmic memory only; 31 second, it has one-way access to the "proof" (cannot ask the prover to repeat its previous statements).
Reference: [Coo] <author> Cook, S. A.: </author> <title> The complexity of theorem proving procedures. </title> <booktitle> Proc. 3rd ACM Symp. on Theory of Computing (1971), </booktitle> <pages> pp. 151-158. </pages>
Reference-contexts: The definition above does include proof systems which do not fit a narrow definition of a "deductive system" and are therefore not customarily studied in Logics (but have been considered to be natural objects of study in the Theory of Computing for decades, cf. <ref> [Coo] </ref>). Here is a simple example. Let A (T; P ) hold if T is a positive integer and P is a nontrivial divisor of T . Clearly, the theorems in this system will be the composite numbers 10 . <p> Let k be the number of bits spot-checked by the Verifier of a PCP (log n; 1)- type transparent membership proof for an NP-complete language. (By [BGLR] we may take k = 36.) The basic idea, going back to Cook <ref> [Coo] </ref>, is to represent the Verifier's computation by a Boolean formula. Let L 2 NP = PCP (log n; 1) and suppose we want to decide membership of the string x in L. If x 2 L, this fact has a transparent proof P with parameters (log n; 1).
Reference: [CoW] <author> Cohen, A., Wigderson, A.: Dispersers, </author> <title> deterministic amplification, and weak random sources. </title> <booktitle> In: Proc. 30th FOCS, IEEE 1989, </booktitle> <pages> pp. 14-19. </pages>
Reference-contexts: Surprising generic savings can be achieved over this estimate. We include this result here partly because it is an ingredient of the strong inapproxima-bility result for maximum clique (Theorem 4.1). The depth of the underlying mathematics adds to the appeal of the method. Theorem 3.5 (Recycling random bits, <ref> [CoW] </ref>, [ImZ]) From a seed of O (r + t) fully independent random bits, one can generate a string of O (rt) pseudorandom bits which when used in O (t) repetitions of an "-error Monte Carlo algorithm (one segment of length r in each round), reduce the error probability to " <p> Their bound is obtained through an eigenvalue estimate (linked to isoperimetry by [AlM]), which rests on the theory of arithmetic and algebraic groups, including results on the Ramanujan conjecture on the number of representations of integers by certain quadratic forms. Finally we sketch the pseudorandom sequences of <ref> [CoW] </ref> and [ImZ]. The idea, originating from [AKS2], is to take a random walk on an explicit expander with 2 r vertices and constant degree, say d = 7. The starting vertex v 0 is picked uniformly at random. <p> Combined with stronger results on transparent proofs ([ArS], [ALMSS]) and the "random bit recycling" technique of <ref> [CoW] </ref>, [ImZ], the [FGLSS] reduction led to the following definitive conclusion. <p> This would seem to require r = C 0 log 2 n random bits, and Theorem 4.2 would yield quasipolynomial algorithms for NP. However, by the result of <ref> [CoW] </ref>, [ImZ] stated in Section 3.3.2, r (n) = O (log n) random bits still suffice.
Reference: [CFLS] <author> Condon, A., Feigenbaum, J., Lund, C., Shor, P.: </author> <title> Probabilistically Checkable Debate Systems and Approximation Algorithms for PSPACE-Hard Functions. </title> <booktitle> In: Proc. 25th STOC, ACM 1993, </booktitle> <pages> pp. 305-314. </pages>
Reference: [CGHFRS] <author> Chor, B., Goldreich, O., Hastad, J., Friedman, J., Rudich, S., Smolen-sky, R.: </author> <title> t-resilient functions. </title> <booktitle> In: Proc. 26th FOCS, IEEE 1985, </booktitle> <pages> pp. 396-407. </pages>
Reference-contexts: There are only n 2 choices for the seed, so we can try all the sequences and pick the best one in polynomial time. This was an instance of complete derandomization. fl Generalizations to higher degrees of independence also exist (Joffe [Jof], cf. [ABI], <ref> [CGHFRS] </ref>). A similar argument with triplewise independence finds a truth-value assigment that satisfies 7m=8 of a given set of m 3-clauses.
Reference: [CLR] <author> Cormen, T. H., Leiserson, C. E., Rivest, R. L.: </author> <title> Introduction to Algorithms, </title> <publisher> MIT Press - McGraw Hill, </publisher> <year> 1990. </year>
Reference-contexts: Suppose we have a device which on input T , produces a string E (T ) which is a codeword in an error-correcting code capable of correcting say 10% error. Note that networks with very simple, highly parallel structure (essentially butterfly networks for Fast Fourier Transform, <ref> [CLR, Sec. 32.3] </ref>) achieve this in logarithmic time with a nearly linear number of processors; jE (T )j = O (jT j); and T can be easily recovered from E (T ) (e.g., T may be required to be an initial segment of T ).
Reference: [DI] <author> Gonick, Larry: </author> <title> Proof Positive? Discover Magazine, </title> <institution> "Science classics" section, </institution> <month> August </month> <year> 1992, </year> <pages> pp. 26-27. </pages>
Reference-contexts: This opens the theoretical possibility of a considerable reduction of the cost of reliability of computation. This, admittedly remote, possibility of practical implications has been advertised in the popular science press ([NYT], [SIAM], [SCI], [NS], <ref> [DI] </ref>). 1.2 Prehistory in a nutshell The formalization of the notion of effective computability (in a finite number of steps) by K. Godel, A. Turing, A. Church, A. A. Markov, E. Post, S.
Reference: [Ed] <author> Edmonds, J.: </author> <title> Path, trees, and flowers. </title> <journal> Canadian J. of Math. </journal> <volume> 17 (1965), </volume> <pages> 449-467. </pages>
Reference-contexts: The combinatorial explosion, rendering exhaustive search infeasible, came into focus only much later. A theory of efficient computability emerged in the early sixties, with the notion of polynomial time computation 4 , as a theoretical benchmark of efficiency, crystallizing in combinatorial optimization theory, especially in Edmonds's work <ref> [Ed] </ref>, as well as in the Soviet school of "mathematical cybernetics" (cf. [Tr]). By no means should one interpret a "polynomial time algorithm" as a necessarily efficient one in a practical sense.
Reference: [Fa] <author> Fagin, R.: </author> <title> Generalized first-order spectra and polynomial-time recognizable sets. </title> <editor> In: R. M. Karp, ed.: </editor> <title> Complexity in Computer Computations, </title> <editor> A. M. S., Providence R. I., </editor> <year> 1974, </year> <pages> pp. 43-73. </pages>
Reference-contexts: The class MAX-SNP was introduced by Papadimitriou and Yannakakis [PaY1]. Their definition is motivated by Fagin's syntactic definition of NP in terms of restricted second-order logic <ref> [Fa] </ref>: NP consists of all predicates on structures G which can be expressed in the form (9S)(G; S) where S is a structure (and thus 9S is a second-order quantifier) and is first order.
Reference: [FeK] <author> Feige, U., Kilian, J.: </author> <title> Two prover protocols low error at affordable rates. </title> <note> In: Proc. 26th STOC, ACM 1994, to appear. </note>
Reference-contexts: This result goes a long way toward Problem 6.1, although it doesn't quite solve it. Polishchuk and Spielman base this result on their complete solution of Problem 6.2 [PoS]. Feige and Kilian announced powerful new results on two-prover one-round protocols <ref> [FeK] </ref>. Their result eliminates Problem 6.3; in fact, they reduce the answer size to constant. This is more than enough to show, via the [FeL]-reduction, that unless P = NP, it is impossible to approximate quadratic programming in polynomial time within any constant factor.
Reference: [FeL] <author> Feige, U., Lovasz, L.: </author> <title> Two-prover one-round proof systems: their power and their problems. </title> <booktitle> In: Proc. 24th STOC, ACM 1992, </booktitle> <pages> pp. 733-744. </pages>
Reference-contexts: Parallel repetition works in the single prover case.) 27 Nevertheless, the positive answer to the original question is now known. A single round with exponentially small margin of error was achieved with 4 provers by Lapidot and Shamir [LaS] and subsequently with just two provers by Feige and Lovasz <ref> [FeL] </ref>. Denoting by MIP k;1 the class of languages accepted with exponentially small margin of error by k-prover, one-round interactive proof systems, we have: Theorem 3.7 ([FeL]) MIP 2;1 = NEXP: The reader should note that this is quite an astounding result. <p> Both the <ref> [FeL] </ref> construction with two provers and polylog random bits, and the [BGLR] construction with four provers and logarithmic number of random bits exhibit the feature of having a "Master Prover"; the other prover (s) only corroborate the Master's response. <p> On the other hand, one can show that in case (ii), the Hamming distance of v to W is Ck. This shows that approximating the minimum Hamming distance within any constant is NP-hard. fl We close this section with an outline of the reduction of MIP 2;1 to Quadratic-programming <ref> [FeL] </ref>. The Verifier's strategy can be described by a matrix A (known to the provers), the provers' strategies by a pair of (0; 1)-vectors x; y. The rows correspond to question-answer pairs for the first prover, the columns for the second.
Reference: [Fo1] <author> Fortnow, L.: </author> <title> Complexity-theoretic aspects of interactive proof systems. </title> <editor> Ph. D. </editor> <booktitle> Thesis, </booktitle> <address> M.I.T./LCS TR-447, </address> <year> 1989. </year>
Reference-contexts: Why not do all rounds in parallel? Unfortunately, if played in parallel, the provers could prevent the probabilities of acceptance from being multiplied <ref> [Fo1] </ref> (cf. the journal version of [FRS]). It is an open question whether or not the t-fold parallel repetition will still reduce the probability of acceptance exponentially (as a function of t).
Reference: [Fo2] <author> Fortnow, L.: </author> <title> private communication, </title> <year> 1992 </year>
Reference: [Fr] <author> Friedl, K.: </author> <title> private communication, </title> <year> 1993 </year>
Reference: [FGLSS] <author> Feige, U., Goldwasser, S., Lovasz, L., Safra, S., Szegedy, M.: </author> <title> Approximating clique is almost NP-complete. </title> <booktitle> In: Proc. 32nd FOCS, IEEE 1991, </booktitle> <pages> pp. 2-12. </pages>
Reference-contexts: This result was the culmination of a sequence of highly technical developments (1991-92) on the MIP = NEXP theorem [BFL] by Babai, Fortnow, Levin, Szegedy [BFLS], Feige, Goldwasser, Lovasz, Safra, Szegedy <ref> [FGLSS] </ref>, Arora, Safra [ArS], Arora, Lund, Motwani, Sudan, Szegedy [ALMSS]). The best current constant (36 queries) appears in Bellare, Goldwasser, Lund, Russell [BGLR]. Meanwhile, in a more practical line of work, combinatorial optimizers were trying to see what could be salvaged from the NP-completeness disaster. <p> Within eight months of Condon's regrettably overlooked paper, <ref> [FGLSS] </ref> discovered a link between multi-prover interactive proofs and the hardness of approximating the size of the largest clique in a graph. <p> As observed in <ref> [FGLSS] </ref>, one can reduce r to O (log N ) by a simple trick (pairwise independent sampling, cf. Section 3.3.1). This reduction has important implications; see Section 5.6. <p> It was subsequently observed that this result can be scaled down, replacing n by log n, to yield transparent proofs of quasipolynomial length for membership in NP languages [BFLS], <ref> [FGLSS] </ref>. <p> The variable n is the length of the input string x (the theorem-candidate). We write PCP (s (n)) for PCP (s (n); s (n)). The distinct roles played by the parameters q and r, to be demonstrated in Section 4, was recognized in <ref> [FGLSS] </ref>. The PCP-notation was introduced in [ArS]. The letters stand for Probabilistically Checkable Proofs. It is easy to see that NP = PCP (0; n O (1) ) and coRP = PCP (n O (1) ; 0). <p> value of !(G) hopeless, it did not explain why even attempts at estimating !(G) failed badly ([BoH] find approximations within -= log 2 The explanation came with the simple yet striking discovery of a link between the MIP = NEXP result and the complexity of approximating the maximum clique size <ref> [FGLSS] </ref>. Combined with stronger results on transparent proofs ([ArS], [ALMSS]) and the "random bit recycling" technique of [CoW], [ImZ], the [FGLSS] reduction led to the following definitive conclusion. <p> -= log 2 The explanation came with the simple yet striking discovery of a link between the MIP = NEXP result and the complexity of approximating the maximum clique size <ref> [FGLSS] </ref>. Combined with stronger results on transparent proofs ([ArS], [ALMSS]) and the "random bit recycling" technique of [CoW], [ImZ], the [FGLSS] reduction led to the following definitive conclusion. <p> MIP 4;1 refers to Theorem 3.11, characterizing NP in terms of MIP 4;1 . The last column gives a pointer to the literature. 41 Problem Not approx unless Reduced Reference within from MAX-CLIQUE (CLQ) n c NP = P PCP <ref> [FGLSS] </ref> [ALMSS] Chromatic-number n c NP = P CLQ [LuY1] Max-planar-subgr n c NP = P CLQ [LuY2] Max-bipartite-subgr n c NP = P CLQ [LuY2] Max- fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = <p> Select s lines from fl uniformly at random. If any of them is wrong, reject. Else, accept. The proof of correctness of this algorithm is non-trivial. The result appears in [BaF], [FHS]. The proof follows the ideas of <ref> [FGLSS, Lemma 10] </ref> and is based on a combinatorial isoperimetric inequality for the m-dimensional grid [BaS]. Total-degree tests are the winners in terms of the number of queries. Query-efficient total degree tests are required for the proof of Theorem 2.3. <p> These include low-degree encoding as required for the sum check; as well as the requisite low-degree test. A modest refinement of these ideas yielded the transparent proofs of [BFLS] and <ref> [FGLSS] </ref> (Phase One). Phase Two began with [ArS] and was rapidly followed by [ALMSS], completing Phase Two.
Reference: [FHS] <author> Friedl, K., Hatsagi, Zs., Shen', A.: </author> <title> Low-degree tests. </title> <booktitle> In: Proc. 5th Symp. on Discrete Algorithms, </booktitle> <address> SIAM-ACM, </address> <year> 1994, </year> <pages> pp. 57-64. </pages>
Reference-contexts: Algorithm Maximum-degree-test (f; d; ffi) Set s = m ln 2 maxf4 (d + 1); 1=ffig. Select s lines from fl uniformly at random. If any of them is wrong, reject. Else, accept. The proof of correctness of this algorithm is non-trivial. The result appears in [BaF], <ref> [FHS] </ref>. The proof follows the ideas of [FGLSS, Lemma 10] and is based on a combinatorial isoperimetric inequality for the m-dimensional grid [BaS]. Total-degree tests are the winners in terms of the number of queries. Query-efficient total degree tests are required for the proof of Theorem 2.3.
Reference: [FRS] <author> Fortnow, L., Rompel, J., Sipser, M.: </author> <title> On the power of multi-prover interactive protocols. </title> <booktitle> In: Proc. 3rd Structure in Complexity Theory Conf., IEEE 1988, </booktitle> <pages> pp. 156-161. </pages> <note> Journal version: Theoretical Computer Science, to appear. </note>
Reference-contexts: It turns out that any (polynomial) number of provers can be replaced by only two provers: MIP = MIP 2 [BGKW]; or by a single exponentially long string which we shall refer to as an "affidavit" (unalterable written statement) (Fortnow, Rompel, Sipser <ref> [FRS] </ref>). In the latter model, the Verifier will make a polynomial number of spot-checks to the affidavit. An affidavit therefore constitutes a transparent proof of membership. <p> Then, upon receipt of the answers, the Verifier decides whether or not to accept. It is easy to achieve this with polynomially many provers, but we wish to retain the advantage of having few provers only. Here is a natural idea how to accomplish this with just two provers <ref> [FRS] </ref>. Let us take a language L 2 MIP; then membership in L has (exponentially long) transparent proofs (the "affidavits") which one can check by a polynomial (q = n c ) number of queries. Let us ask the Provers to generate this affidavit (mentally). <p> Why not do all rounds in parallel? Unfortunately, if played in parallel, the provers could prevent the probabilities of acceptance from being multiplied [Fo1] (cf. the journal version of <ref> [FRS] </ref>). It is an open question whether or not the t-fold parallel repetition will still reduce the probability of acceptance exponentially (as a function of t).
Reference: [GaG] <author> Gabber, O., Galil, Z.: </author> <title> Explicit construction of linear sized superconcentra-tors. </title> <journal> J. Comp. Sys. Sci. </journal> <volume> 22 (1981), </volume> <pages> 407-420. </pages>
Reference-contexts: The first explicit construction was given by G. A. Margulis, using representation theory of Lie groups [Mar1]. A simplified and improved version, requiring "only" (commutative) Fourier analysis, was given in <ref> [GaG] </ref>. The last word so far has come in simultaneous and nearly identical work by Mar-gulis [Mar2] and Lubotzky, Phillips, Sarnak [LPS], greatly improving the isoperimetric ratio.
Reference: [GaJ] <author> Garey, M. R., Johnson, D. S.: </author> <title> Computers and Intractability, A Guide to the Theory of NP-Completeness, </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year> <month> 57 </month>
Reference-contexts: For the most part, only an informal concept of algorithms and computation is required for the reading. For further background in the theory of computing we refer to the classic book of Garey and Johnson <ref> [GaJ] </ref> which offers much more than is suggested by its title. Random access machines (RAM's) are treated e.g. in [AHU]. Since graph theoretic concepts play a 2 More precisely, N should refer to the combined lengths of the proof-candidate and the theorem-candidate. <p> For an introduction to complexity classes and especially to the class NP, we refer the reader to the classic book by Garey and Johnson <ref> [GaJ] </ref>. 3.1 Fundamentals 3.1.1 Graphs A graph G = (V; E) consists of a set V of vertices and a set E of unordered pairs of vertices called edges. The two vertices belonging to an edge are called adjacent; adjacent vertices are neighbors. <p> The subgraph H = (W; F ) spans the subset S V if S W . If H spans V then H is a spanning subgraph. Note that G has a spanning tree exactly if G is connected. For further concepts of graph theory we refer to [BoM] and <ref> [GaJ] </ref>. 3.1.2 Languages. Polynomial and quasipolynomial time We fix a finite set , called the alphabet (jj 2). Usually, = f0; 1g. All finite strings (words) composed of elements of constitute the countable set fl . The length of a string x 2 fl is denoted by jxj. <p> Perhaps the most obviously discouraging one is Shortproof (does Riemann's hypothesis have a proof that fits on 100 pages?). <ref> [GaJ] </ref> lists hundreds of further examples. A language L fl is said to belong to the class coNP if its complement fl nL belongs to NP. <p> PSPACE is a huge class, which includes NP, coNP, the decision problems reducible to #P, and much more. Strategies of combinatorial games (tell the winning move) are the typical complete problems in PSPACE (cf. <ref> [GaJ] </ref>). Note, however, that even the P 6= PSPACE conjecture is open. 3.4.2 Sum-check: a powerful interactive proof Recall that many languages in coNP are not expected to have polynomial length membership proofs. (In particular, none of the languages whose complements are NP-complete. <p> With connections ranging from commutative algebra [LiL] to integer programming [Schr] and multivariate statistics [VRy], the maximum clique size !(G) is one of the fundamental parameters of the graph G. It has been known for 20 years that determining !(G) is NP-hard (Karp [Kar], cf. <ref> [GaJ] </ref>). <p> Since L was any language from NP, it follows that P = NP. fl In order to move from Max-k-sat to Max-3sat, we apply a further reduction similar to the final step of the NP-completeness proof of 3-sat (cf. <ref> [GaJ] </ref>). 4.4 Polynomial-time approximation schemes and the class MAX-SNP The inapproximability of Max-3sat in turn propagates to the large class of "MAX-SNP-hard" optimization problems. The class MAX-SNP was introduced by Papadimitriou and Yannakakis [PaY1]. <p> The table contains only results that depend on transparent proof / MIP theory. We should emphasize that nontrivial inapproximability results existed before the advent of transparent proofs. Some of the early theory is surveyed in <ref> [GaJ] </ref>. More recently, very powerful results were obtained by 40 M. Yannakakis [Yan1] via direct reduction from 3sat. <p> This is accomplished by the standard NP-completeness proofs 48 ([Coo], [Le], <ref> [GaJ] </ref>) via the language L A 2 NP defined in the proof of Theo--rem 2.3 from Theorem 3.10 in Section 3.5.
Reference: [GeS] <author> Gemmell, P., Sudan, M.: </author> <title> Highly resilient correctors for polynomials. Info. </title> <booktitle> Proc. Letters 43 (1992), </booktitle> <pages> 169-174. </pages>
Reference: [GoM] <author> Goldwasser, S., Micali, S.: </author> <title> Probabilistic encryption. </title> <journal> J. Comput. Sys. Sci. </journal> <volume> 28 (1984), </volume> <pages> 270-299. </pages> <note> (Preliminary version in: 14th STOC, </note> <year> 1982, </year> <pages> pp. 365-377.) </pages>
Reference: [GrL] <author> Gruber, P. M., Lekkerkerker, C. G.: </author> <title> Geometry of Numbers, </title> <publisher> North Holland, </publisher> <address> Amsterdam-New York, </address> <year> 1987. </year>
Reference: [GLRSW] <author> Gemmell, P., Lipton, R., Rubinfeld, R., Sudan, M., Wigderson, A.: </author> <title> Self-testing/correcting for polynomials and for approximate functions. </title> <booktitle> In: Proc. 23rd STOC, ACM 1991 pp. </booktitle> <pages> 32-42. </pages>
Reference-contexts: The mathematics behind this algorithmic result is summarized in the following result which evolved from results of <ref> [GLRSW] </ref>, [RuS], [ArS], [ALMSS] (cf. [Su1, Thm. 3.7]). By lines in F m we mean affine lines, i.e. sets of the form = (ff; fi) := fff + tfi : t 2 F g, where ff; fi 2 F m , fi 6= 0.
Reference: [GLS] <author> Grotschel, M., Lovasz. L., Schriver, A.: </author> <title> Geometric methods in combinatorial optimization. </title> <editor> In: Prog. in Comb. Opt., W. Pulleyblank, ed., </editor> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference: [GMR] <author> Goldwasser, S., Micali, S., Rackoff, C.: </author> <title> The knowledge complexity of interactive proof-systems. </title> <journal> SIAM J. Comp. </journal> <month> 18 </month> <year> (1989), </year> <month> 186-208. </month> <title> (Preliminary version in: </title> <booktitle> Proc. 17th STOC, ACM 1985, </booktitle> <pages> pp. 291-304.) </pages>
Reference-contexts: While I made every effort to be fair, I have to apologize to those colleagues whose work may not receive its proper share of credit here. Partly motivated by cryptographic considerations, the notion of interactive proofs, introduced in 1985 (Goldwasser, Micali, Rackoff <ref> [GMR] </ref>, and Babai [Ba1]) extended the notion of efficient verifiability by combining the notion of short proofs with randomization and interaction between the Prover and the Verifier. <p> For an introduction to the subject, embedded in a fable about Merlin and King Arthur, see [Ba2]. 3.4.1 Single prover In an interactive proof <ref> [GMR] </ref>, [Ba1], [BaM], a super-intelligent Prover P tries to convince a moderately intelligent, skeptical Verifier that x 2 L (regardless of the truth of this statement). (In the fable, Merlin is the Prover and Arthur the Verifier.) P is an (arbitrarily complex) function (mapping strings to strings); V is a randomizing
Reference: [HC] <author> Hughes, G.E., Cresswell, M.J.: </author> <title> An Introduction to Modal Logic. </title> <publisher> Methuen & Co, Ltd., </publisher> <address> London, </address> <year> 1968. </year>
Reference-contexts: The definition is broad enough: it encompasses the formal proof systems believed to model the formalized versions of proofs of the working mathematician and computer scientist. Formal proofs are usually viewed as chains of deductions according to a small set of formal rules, from a set of axioms ([Man], <ref> [HC] </ref>). Formal first order proofs in usual axiom systems such as ZF or Peano-arithmetic (cf. [Man]) are clearly polynomial time verifiable. Our convention, however, is not restricted to such systems.
Reference: [ImZ] <author> Impagliazzo, R., Zuckerman, D., </author> <title> How to recycle random bits. </title> <booktitle> In: Proc. 30th FOCS, IEEE 1989, </booktitle> <pages> pp. 248-253. </pages>
Reference-contexts: Surprising generic savings can be achieved over this estimate. We include this result here partly because it is an ingredient of the strong inapproxima-bility result for maximum clique (Theorem 4.1). The depth of the underlying mathematics adds to the appeal of the method. Theorem 3.5 (Recycling random bits, [CoW], <ref> [ImZ] </ref>) From a seed of O (r + t) fully independent random bits, one can generate a string of O (rt) pseudorandom bits which when used in O (t) repetitions of an "-error Monte Carlo algorithm (one segment of length r in each round), reduce the error probability to " t <p> Their bound is obtained through an eigenvalue estimate (linked to isoperimetry by [AlM]), which rests on the theory of arithmetic and algebraic groups, including results on the Ramanujan conjecture on the number of representations of integers by certain quadratic forms. Finally we sketch the pseudorandom sequences of [CoW] and <ref> [ImZ] </ref>. The idea, originating from [AKS2], is to take a random walk on an explicit expander with 2 r vertices and constant degree, say d = 7. The starting vertex v 0 is picked uniformly at random. <p> Combined with stronger results on transparent proofs ([ArS], [ALMSS]) and the "random bit recycling" technique of [CoW], <ref> [ImZ] </ref>, the [FGLSS] reduction led to the following definitive conclusion. <p> This would seem to require r = C 0 log 2 n random bits, and Theorem 4.2 would yield quasipolynomial algorithms for NP. However, by the result of [CoW], <ref> [ImZ] </ref> stated in Section 3.3.2, r (n) = O (log n) random bits still suffice.
Reference: [Jo1] <author> Johnson, D. S.: </author> <title> Approximation algorithms for combinatorial problems. </title> <journal> J. Computer and Systems Sci. </journal> <volume> 9 (1974), </volume> <pages> 256-278. </pages>
Reference-contexts: The best constant currently known is c = 1=112 [BGLR]. The proof of Theorem 4.3 again follows from Theorem 3.10 through a fairly simple reduction. 15 A truth-assigment satisfying at least 7=8 of the clauses can be found efficiently, using a "greedy" strategy <ref> [Jo1] </ref>. Cf. also Sec. 3.3.1.
Reference: [Jo2] <author> Johnson, D. S.: </author> <title> The NP-Completeness Column: An Ongoing Guide. </title> <editor> J. </editor> <booktitle> of Algorithms 13 (1992), </booktitle> <pages> 502-524. </pages>
Reference-contexts: We include a crash-course on the requisite complexity theory and provide pointers to the literature. D. S. Johnson's survey <ref> [Jo2] </ref> of the same subject gives a different angle and includes additional references. For the most part, only an informal concept of algorithms and computation is required for the reading.
Reference: [Jof] <author> Joffe, A.: </author> <title> On a set of almost deterministic k-independent random variables. </title> <journal> Annals of Prob. </journal> <volume> 2 (1974), </volume> <pages> 161-162. </pages>
Reference-contexts: There are only n 2 choices for the seed, so we can try all the sequences and pick the best one in polynomial time. This was an instance of complete derandomization. fl Generalizations to higher degrees of independence also exist (Joffe <ref> [Jof] </ref>, cf. [ABI], [CGHFRS]). A similar argument with triplewise independence finds a truth-value assigment that satisfies 7m=8 of a given set of m 3-clauses.
Reference: [Kan] <author> Kann, Viggo: </author> <title> On the approximability of NP-complete optimization problems. </title> <type> Ph.D. Thesis. </type> <institution> Royal Institute of Technology, Stockholm, Sweden. </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: Combining this with Theorem 4.3 we obtain: Corollary 4.6 ([ALMSS]) If an optimization problem is MAX-SNP-hard then does not admit a PTAS, unless P = NP. The class of known MAX-SNP-hard problems is large and growing. The dissertation of Viggo Kann <ref> [Kan] </ref> contains a Garey&Johnson-style enumeration of the known problems in this class.
Reference: [Kar] <author> Karp, R. M.: </author> <title> Reducibility among combinatorial problems. </title> <editor> In: R. E. Miller and J. W. Thatcher (eds.), </editor> <title> Complexity in Computer Computations, </title> <publisher> Plenum Press, </publisher> <address> New York 1972, </address> <pages> pp. 85-103. </pages>
Reference-contexts: With connections ranging from commutative algebra [LiL] to integer programming [Schr] and multivariate statistics [VRy], the maximum clique size !(G) is one of the fundamental parameters of the graph G. It has been known for 20 years that determining !(G) is NP-hard (Karp <ref> [Kar] </ref>, cf. [GaJ]).
Reference: [Ko] <author> Kolmogorov, A. N.: </author> <title> O poniatii algoritma (On the concept of an algorithm. </title> <note> Uspekhi Mat. Nauk 8(4) (1953), 175-176 (in Russian). </note>
Reference: [KoU] <author> Kolmogorov, A. N., Uspenski, V. A.: </author> <title> On the definition of an algorithm. </title> <journal> Uspekhi Mat. Nauk, 13(4) (1958), 3-28 (Russian); AMS Transl. 2nd ser. </journal> <volume> 29 (1963), </volume> <pages> 217-245. </pages>
Reference-contexts: We need a model of computation based on randomized queries. We need two modifications to the model: we have to accommodate random choice; and allow random access 8 to a database. (We shall use the term 7 More generally, the Kolmogorov-Uspenski thesis ([Ko], <ref> [KoU] </ref>) asserts that the RAM is the strongest model within nearly linear time, i. e. every conceivable deterministic sequential model of computation, including proof verification in reasonable formal proof systems, can be simulated in nearly linear time on a RAM.
Reference: [KoV] <author> Kolaitis, P., Vardi, M.: </author> <title> The decision problem for the probabilities of higher-order properties. </title> <booktitle> In: Proc. 19th STOC, ACM 1987, </booktitle> <pages> pp. 425-435. </pages>
Reference-contexts: A subclass of NP, called SNP ("strict" NP), consists of those structures where in the above expression can be taken to have the form (G; S) = 36 (8x) (x; G; S) where is quantifier free (Kolaitis, Vardi <ref> [KoV] </ref>). The maxi-mization problems arise by replacing the 8x statement by asking to maximize the number of those x which satisfy .
Reference: [Kr] <author> Kranakis, E.: </author> <title> Primality and Cryptography, </title> <publisher> Teubner, Stuttgart, Wiley, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: Moreover, all these problems are at least as hard as some formidable algorithmic problems of number theory to which Fermat and Gauss would have loved to have an efficient solution (factoring integers, discrete logarithm, cf. <ref> [Kr] </ref>). Therefore, none of these is expected to be solvable in polynomial time. This is the P 6= NP conjecture 5 , which transformed the theory of computing in the past twenty years. We review the formal definition of NP in Section 3.1.3. <p> Subsequent papers by Goldwasser, Micali (1982/84) and Yao (1982 1 ) signaled the new era in cryptographic protocol design. These developments shed an entirely new light on pseudorandom number generators, making polynomial time unpredictability the central concept (Blum, Micali 1982/84, Yao 1982 2 ). We refer to the books <ref> [Kr] </ref> and [We] for an exposition of "new cryptography", a field that had decisive conceptual influence on the subject of this survey. More about the history of the P vs. NP question can be found in M.
Reference: [KLS] <author> Khanna, S., Linial, N., Safra, S.: </author> <title> On the hardness of approximating the chromatic number. </title> <booktitle> In: Proc. 2nd Israel Symp. on Theory and Computing Sys. ISTCS'93, Natanya, Israel 1993, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1993, </year> <pages> pp. 250-260. </pages>
Reference-contexts: force of Theorem 4.1. fl Using a clever reduction from the clique problem, Lund and Yannakakis [LuY1] show that Theorem 4.1 remains valid with another fundamental parameter of the graph, the chromatic number in place of the clique number. 34 A simplified reduction and generalizations appear in Khanna, Linial, Safra <ref> [KLS] </ref>. Other interesting consequences can be found in [LuY2]. Zuckerman [Zu2] presents a list of 21 optimization problems which are not approximable within n c unless P = NP (where n is the input size). Some of these are listed in Section 4.6.
Reference: [KMR] <author> Karger, D., Motwani, R., Ramkumar, G. D. S.: </author> <title> On approximating the 58 longest path in a graph. </title> <type> Manuscript, </type> <year> 1992, </year> <note> to appear in: Proc. WADS'93 (Workshop on Discr. Algorithms and Structures, Montreal, 1993), Springer Lect. Notes in Comp. Sci. </note>
Reference-contexts: In other words, a PTAS exists. However, the Longest-path problem is MAX-SNP-hard. Putting this all together, it follows that the longest path cannot be approximated in polynomial time within any constant, unless P = NP [ALMSS], <ref> [KMR] </ref>. A similar but even more powerful self-amplification holds for the Max-eq-sat problem. The input is a system of linear equations with rational coefficients; the question is the maximum number of simultaneously satisfiable equations. <p> NP = P M3S [PaY1] Max-cut 1 + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c NP = P M3S [PaY2] Steiner-tree 1 + c NP = P M3S [BeP] Shortest-supstring 1 + c NP = P M3S [BJLTY] Longest-path 2 log 1" n NP QP M3S <ref> [KMR] </ref> any C NP = P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 [LuY1] any C NP = P MIP 4;1 [BGLR] Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C <p> + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c NP = P M3S [PaY2] Steiner-tree 1 + c NP = P M3S [BeP] Shortest-supstring 1 + c NP = P M3S [BJLTY] Longest-path 2 log 1" n NP QP M3S <ref> [KMR] </ref> any C NP = P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 [LuY1] any C NP = P MIP 4;1 [BGLR] Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2
Reference: [La] <author> Lancaster, H. O.: </author> <title> Pairwise statistical independence. </title> <journal> Ann. Math. Stat. </journal> <volume> 36 (1965), </volume> <pages> 1313-1317. </pages>
Reference: [LaS] <author> Lapidot, D., Shamir, A.: </author> <title> Fully Parallelized Multi Prover Protocols for N EXP T IM E. </title> <booktitle> In: Proc. 32nd FOCS, IEEE 1991, </booktitle> <pages> pp. 13-18. </pages>
Reference-contexts: Parallel repetition works in the single prover case.) 27 Nevertheless, the positive answer to the original question is now known. A single round with exponentially small margin of error was achieved with 4 provers by Lapidot and Shamir <ref> [LaS] </ref> and subsequently with just two provers by Feige and Lovasz [FeL].
Reference: [Le] <author> Levin, L.: </author> <title> Universal'nye perebornye zadachi (Universal search problems: in Russian). </title> <journal> Problemy Peredachi Informatsii 9:3 (1972), </journal> <pages> pp. 265-266. </pages> <note> A correct English translation appears in [Tr] </note>
Reference-contexts: A language L is NP-complete 12 if 12 Levin <ref> [Le] </ref> defined NP-completeness via a stronger notion of reduction: he postulated 17 L 2 NP and K L holds for all languages K 2 NP. If L is an NP-complete language then the statement L 62 P is equivalent to the P 6= NP conjecture. <p> This is accomplished by the standard NP-completeness proofs 48 ([Coo], <ref> [Le] </ref>, [GaJ]) via the language L A 2 NP defined in the proof of Theo--rem 2.3 from Theorem 3.10 in Section 3.5.
Reference: [Lip] <author> Lipton, R. J.: </author> <title> New directions in testing. </title> <editor> In: J. Feigenbaum, M. Merritt, eds.: </editor> <title> Distributed Computing and Cryptography, </title> <journal> DIMACS Ser. in Discr. Math. and Theor. Comp. Sci. </journal> <volume> Vol. 2, </volume> <editor> A. M. S. </editor> <year> 1991, </year> <pages> pp. 191-202. </pages>
Reference-contexts: As noticed by Beaver, Feigenbaum [BeF] and Lipton <ref> [Lip] </ref>, self-correction is a feature typically displayed by polynomials (self-correction is done by interpolation from random samples). This led to a link with classical error-correcting codes (cf. Sudan [Su1]). The recognition [Lip] that self-correction in particular applies to the permanent of an nfin matrix, a notoriously hard-to-compute polynomial [Va], motivated the <p> As noticed by Beaver, Feigenbaum [BeF] and Lipton <ref> [Lip] </ref>, self-correction is a feature typically displayed by polynomials (self-correction is done by interpolation from random samples). This led to a link with classical error-correcting codes (cf. Sudan [Su1]). The recognition [Lip] that self-correction in particular applies to the permanent of an nfin matrix, a notoriously hard-to-compute polynomial [Va], motivated the new ideas eventually leading to the IP = PSPACE theorem.
Reference: [LiL] <author> Li, S-Y. R., Li, W-C. W., </author> <title> Independence numbers of graphs and generators of ideals. </title> <booktitle> Combinatorica 1 (1981), </booktitle> <pages> 55-61. </pages>
Reference-contexts: The result gives the simplest known link between the two areas. 4.2 Maximum clique Recall that a clique of a graph is a set of pairwise adjacent vertices. With connections ranging from commutative algebra <ref> [LiL] </ref> to integer programming [Schr] and multivariate statistics [VRy], the maximum clique size !(G) is one of the fundamental parameters of the graph G. It has been known for 20 years that determining !(G) is NP-hard (Karp [Kar], cf. [GaJ]).
Reference: [LuY1] <author> Lund, C., Yannakakis, M.: </author> <title> On the hardness of approximating minimization problems. </title> <booktitle> In: Proc. 25th STOC, ACM 1993, </booktitle> <pages> pp. 286-293. </pages>
Reference-contexts: However, by the result of [CoW], [ImZ] stated in Section 3.3.2, r (n) = O (log n) random bits still suffice. Therefore Theorem 4.2 implies the full force of Theorem 4.1. fl Using a clever reduction from the clique problem, Lund and Yannakakis <ref> [LuY1] </ref> show that Theorem 4.1 remains valid with another fundamental parameter of the graph, the chromatic number in place of the clique number. 34 A simplified reduction and generalizations appear in Khanna, Linial, Safra [KLS]. Other interesting consequences can be found in [LuY2]. <p> More precisely, given the random string and the response by the Master Prover to the Verifier's question generated from , there is at most one acceptable answer from the other prover (s). Most reductions rely on this functional dependence. The hard-to-approximate cases of Set-cover <ref> [LuY1] </ref>, [BGLR] also display a specific, very useful additional feature, which we state next. Theorem 4.7 ([BGLR],[LuY1]) Let L fl be an NP-language. <p> MIP 4;1 refers to Theorem 3.11, characterizing NP in terms of MIP 4;1 . The last column gives a pointer to the literature. 41 Problem Not approx unless Reduced Reference within from MAX-CLIQUE (CLQ) n c NP = P PCP [FGLSS] [ALMSS] Chromatic-number n c NP = P CLQ <ref> [LuY1] </ref> Max-planar-subgr n c NP = P CLQ [LuY2] Max-bipartite-subgr n c NP = P CLQ [LuY2] Max- fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P CLQ [Zu2] Max-set-packing n c NP = P <p> + c NP = P M3S [PaY2] Steiner-tree 1 + c NP = P M3S [BeP] Shortest-supstring 1 + c NP = P M3S [BJLTY] Longest-path 2 log 1" n NP QP M3S [KMR] any C NP = P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 <ref> [LuY1] </ref> any C NP = P MIP 4;1 [BGLR] Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C <p> Shortest-supstring 1 + c NP = P M3S [BJLTY] Longest-path 2 log 1" n NP QP M3S [KMR] any C NP = P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 <ref> [LuY1] </ref> any C NP = P MIP 4;1 [BGLR] Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any <p> QP M3S [KMR] any C NP = P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 <ref> [LuY1] </ref> any C NP = P MIP 4;1 [BGLR] Dominating-set c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Min-size-cover c log n NP QP SC [LuY1] any C NP = P SC [BGLR] Nearest-codeword 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Nearest-vector 2 log 0:5" n NP QP MIP 2;1 [ABSS] any C NP = P SC [ABSS] Shortest-vector 1 2 log 0:5" n NP QP MIP
Reference: [LuY2] <author> Lund, C., Yannakakis, M.: </author> <title> The approximation of maximum subgraph problems. </title> <booktitle> In: Proc. ICALP'93 (Internat. Conf. on Algorithms, Languages, and Programming), </booktitle> <year> 1993, </year> <pages> pp. 40-51. </pages>
Reference-contexts: This result has a separate set of applications of its own to discrete opti 30 mization (Lund, Yannakakis <ref> [LuY2] </ref>, Arora, Babai, Stern, Sweedyk [ABSS]). These applications are conditioned on the hypothesis NP 6 QP. For applications more aesthetically conditioned on NP 6= P, it is paramount to reduce the length of the transparent proof to polynomial and the number of random bits to logarithmic. <p> Other interesting consequences can be found in <ref> [LuY2] </ref>. Zuckerman [Zu2] presents a list of 21 optimization problems which are not approximable within n c unless P = NP (where n is the input size). Some of these are listed in Section 4.6. The proofs go via a string of reductions starting from Max-clique. <p> This is the "node deletion problem" for connected planar graphs. The complementary problem of estimating the size of the largest induced connected planar subgraph is equally hard (announced in <ref> [LuY2] </ref>). This result again does not depend on transparent proofs. A glance at the table shows that none of the inapproximability results deduced from transparent proofs has as yet yielded a gap anywhere near Yannakakis's (a factor of -1" ). <p> The strength of the transparent proof approach seems to be in its breadth. The power of the combination of the two methodologies is demonstrated in <ref> [LuY2] </ref>. Explanation of the Table. The definition of each problem is given after the table. QP stands for quasi-polynomial time, i. e. time exp ((log n) O (1) ). The first column of the table contains the name of the problem. <p> The last column gives a pointer to the literature. 41 Problem Not approx unless Reduced Reference within from MAX-CLIQUE (CLQ) n c NP = P PCP [FGLSS] [ALMSS] Chromatic-number n c NP = P CLQ [LuY1] Max-planar-subgr n c NP = P CLQ <ref> [LuY2] </ref> Max-bipartite-subgr n c NP = P CLQ [LuY2] Max- fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P CLQ [Zu2] Max-set-packing n c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P <p> last column gives a pointer to the literature. 41 Problem Not approx unless Reduced Reference within from MAX-CLIQUE (CLQ) n c NP = P PCP [FGLSS] [ALMSS] Chromatic-number n c NP = P CLQ [LuY1] Max-planar-subgr n c NP = P CLQ <ref> [LuY2] </ref> Max-bipartite-subgr n c NP = P CLQ [LuY2] Max- fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P CLQ [Zu2] Max-set-packing n c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P CLQ [Zu2] Constr-max-job-seq n c NP = P <p> Not approx unless Reduced Reference within from MAX-CLIQUE (CLQ) n c NP = P PCP [FGLSS] [ALMSS] Chromatic-number n c NP = P CLQ [LuY1] Max-planar-subgr n c NP = P CLQ <ref> [LuY2] </ref> Max-bipartite-subgr n c NP = P CLQ [LuY2] Max- fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P CLQ [Zu2] Max-set-packing n c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P CLQ [Zu2] Constr-max-job-seq n c NP = P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P <p> c NP = P PCP [FGLSS] [ALMSS] Chromatic-number n c NP = P CLQ [LuY1] Max-planar-subgr n c NP = P CLQ <ref> [LuY2] </ref> Max-bipartite-subgr n c NP = P CLQ [LuY2] Max- fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P CLQ [Zu2] Max-set-packing n c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P CLQ [Zu2] Constr-max-job-seq n c NP = P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P PCP [ALMSS] Vertex-cover (5) 1 + c NP = P
Reference: [LFKN] <author> Lund, C., Fortnow, L., Karloff, H., Nisan, N.: </author> <title> Algebraic Methods for Interactive Proof Systems. </title> <journal> J. ACM, </journal> <note> 39 (1992), 859-868 (Preliminary version in: Proc. 31th FOCS, IEEE 1990, pp. 2-10). </note>
Reference-contexts: This, initially seemingly small step turned out to be a huge leap, developed in a breathtaking sequence of e-mail exchanges 6 at the end of 1989 (Lund, Fortnow, Karloff, Nisan <ref> [LFKN] </ref>, and Shamir [Sh]). <p> The class of these languages is denoted by IP. Clearly IP NP. The gap in this inclusion turned out to be surprisingly large; IP = PSPACE <ref> [LFKN] </ref>, [Sh]. PSPACE is a huge class, which includes NP, coNP, the decision problems reducible to #P, and much more. Strategies of combinatorial games (tell the winning move) are the typical complete problems in PSPACE (cf. [GaJ]). <p> This statement is equivalent to the NP 6= coNP conjecture.) Thus the result "IP coNP" came as a surprise <ref> [LFKN] </ref>. We illustrate the power of interactive proofs on a simple example which proves this inclusion. The "LFKN protocol" (adapted from [LFKN]) will also provide a key ingredients of transparent proof verification. Here we give an interactive proof that a graph is not 3-colorable (a coNP-complete predicate). <p> This statement is equivalent to the NP 6= coNP conjecture.) Thus the result "IP coNP" came as a surprise <ref> [LFKN] </ref>. We illustrate the power of interactive proofs on a simple example which proves this inclusion. The "LFKN protocol" (adapted from [LFKN]) will also provide a key ingredients of transparent proof verification. Here we give an interactive proof that a graph is not 3-colorable (a coNP-complete predicate). <p> f in #P will take an input x to the NP-definition (1) (Sec. 3.1.3) and rather than asking the existence of a witness, it asks the number f (x) of witnesses. (How many 100-page proofs does Riemann's hypothesis have?) We thus proved the result that all #P-functions admit interactive proofs <ref> [LFKN] </ref>, the immediate precursor of the IP = PSPACE theorem [Sh]. 3.4.3 Multi-prover interactive proofs A variant of the notion of interactive proofs, involving several provers, was introduced in [BGKW]. The Verifier simultaneously queries the provers much in the way a police detective would interrogate suspects sharing a common alibi.
Reference: [LLL] <author> Lenstra, A. K., Lenstra, H. W., Lovasz, L.: </author> <title> Factoring polynomials with rational coefficients. </title> <journal> Math. Ann. </journal> <volume> 261 (1982), </volume> <pages> 513-534. </pages>
Reference: [LPS] <author> Lubotzky, A., Phillips, R., Sarnak, P.: </author> <title> Ramanujan graphs. </title> <booktitle> Combinatorica 8 (1988), </booktitle> <pages> 261-277. </pages>
Reference-contexts: A. Margulis, using representation theory of Lie groups [Mar1]. A simplified and improved version, requiring "only" (commutative) Fourier analysis, was given in [GaG]. The last word so far has come in simultaneous and nearly identical work by Mar-gulis [Mar2] and Lubotzky, Phillips, Sarnak <ref> [LPS] </ref>, greatly improving the isoperimetric ratio. Their bound is obtained through an eigenvalue estimate (linked to isoperimetry by [AlM]), which rests on the theory of arithmetic and algebraic groups, including results on the Ramanujan conjecture on the number of representations of integers by certain quadratic forms.
Reference: [LTS] <author> Lam, C.W.H., Thiel, L.H., Swiercz, S.: </author> <title> The non-existence of finite projective planes of order 10. </title> <journal> Canad. J. Math. </journal> <volume> XVI (1989), </volume> <pages> 1117-1123. </pages>
Reference-contexts: They constitute parts of proofs of genuine mathematical interest, such as the 4-Color Theorem [ApH] and the nonexistence of projective planes of order 10 <ref> [LTS] </ref>.
Reference: [Mac] <author> MacKenzie, D.: </author> <title> Computers, formal proofs, and the law courts. </title> <journal> Notices of the A.M.S. </journal> <volume> 39/9 (1992), </volume> <pages> 1066-1069. </pages>
Reference-contexts: They constitute parts of proofs of genuine mathematical interest, such as the 4-Color Theorem [ApH] and the nonexistence of projective planes of order 10 [LTS]. More significantly, they occur as proofs of assertions that computer programs work according to their formal specifications [Bar], [BrH], [Coh], <ref> [Mac] </ref>. (Whether those formal specifications adequately describe human intentions is of course another matter.) Although the correctness of a program cannot be verified in general (even the simplest questions regarding the performance of a program are undecidable), it may now be possible to verify each instance of computation by the program. <p> Thus, mathematical proofs (in practice) must provide enough information to enable the reader to verify the validity of the theorem, but need not supply all details. Replacing the mathematically trained but unimaginative reader by a polynomial time bounded Turing machine, we arrive at 9 MacKenzie <ref> [Mac] </ref> notes that "formalist, constructive, and modal logics, as well as many particular specialized logics, have all been used in proofs of computer system correctness." 10 A simple system of unconventional deductions in which the theorems are the prime numbers, is given by Pratt [Pr]. 12 our definition of proof systems.
Reference: [Man] <author> Manin, Yu. I.: </author> <title> A Course in Mathematical Logic, </title> <publisher> Springer Verlag, </publisher> <address> GTM 53, </address> <year> 1977. </year>
Reference-contexts: Formal proofs are usually viewed as chains of deductions according to a small set of formal rules, from a set of axioms (<ref> [Man] </ref>, [HC]). Formal first order proofs in usual axiom systems such as ZF or Peano-arithmetic (cf. [Man]) are clearly polynomial time verifiable. Our convention, however, is not restricted to such systems. In particular, it does not take sides in the Hilbert-Brouwer dispute (formalism vs. intuitionism): proofs in any reasonable deductive system 9 are verifiable in polynomial time.
Reference: [Mar1] <author> Margulis, G. A.: </author> <title> Explicit construction of expanders. Probl. </title> <note> Peredachi In-formatsii 9/4 (1973), 71-80 (in Russian) </note>
Reference-contexts: Such a randomized construction, however, could not be used to save on random bits; what one needs there is an explicit construction. The first explicit construction was given by G. A. Margulis, using representation theory of Lie groups <ref> [Mar1] </ref>. A simplified and improved version, requiring "only" (commutative) Fourier analysis, was given in [GaG]. The last word so far has come in simultaneous and nearly identical work by Mar-gulis [Mar2] and Lubotzky, Phillips, Sarnak [LPS], greatly improving the isoperimetric ratio.
Reference: [Mar2] <author> Margulis, G. A.: </author> <title> Explicit group-theoretical constructions of combinatorial schemes and their application to the design of expanders and concentrators. Problemy Peredachi Informatsii (Problems of Information Transmission) 24/1 (1988), 51-60 (in Russian), </title> <journal> English translation pp. </journal> <pages> 39-46. </pages>
Reference-contexts: The first explicit construction was given by G. A. Margulis, using representation theory of Lie groups [Mar1]. A simplified and improved version, requiring "only" (commutative) Fourier analysis, was given in [GaG]. The last word so far has come in simultaneous and nearly identical work by Mar-gulis <ref> [Mar2] </ref> and Lubotzky, Phillips, Sarnak [LPS], greatly improving the isoperimetric ratio.
Reference: [MaS] <author> MacWilliams, F.J., Sloane, N.J.A.: </author> <title> The Theory of Error-Correcting Codes, </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1977. </year>
Reference-contexts: We refer to these types of subspaces as "maximum-degree codes" and "total-degree codes", resp. Together, they constitute the class of "polynomial codes". These codes are related to the classical Reed-Muller codes (cf. <ref> [MaS] </ref>). Clearly P total (d; m; H ) P max (d; m; H) P total (dm; m; H ). The minimum distance of these codes can be estimated by the Schwartz-Zippel lemma (Lemma 3.2). Let P denote one of these codes.
Reference: [MAA1] <author> Babai, L.: </author> <title> Transparent Proofs, </title> <note> FOCUS (MAA Newsletter) 12/3 (June 1992), pp. 1-2. </note>
Reference: [MAA2] <author> Babai, L.: </author> <title> Combinatorial optimization is hard. </title> <note> FOCUS (MAA Newslet 59 ter) 12/4 (Sep. </note> <year> 1992), </year> <pages> pp. 3/6/18. </pages>
Reference: [NaN] <author> Naor, J., Naor, M.: </author> <title> Small-bias probability spaces: efficient constructions and applications. </title> <journal> SIAM J. Computing 22 (1993), </journal> <pages> 838-856. </pages>
Reference-contexts: A similar argument with triplewise independence finds a truth-value assigment that satisfies 7m=8 of a given set of m 3-clauses. A notion of k-wise near-independence, a particularly useful derandomization tool, was introduced in <ref> [NaN] </ref>. 3.3.2 Isoperimetry, expanders, recycling random bits Suppose we have a randomized algorithm A with one-sided error " on input x. We can reduce the error probability bound to " t by repeating A t times, using independent random bits.
Reference: [NS] <author> Sangalli, Arturo: </author> <title> The easy way to check hard maths. </title> <journal> New Scientist, </journal> <month> 8 May </month> <year> 1993, </year> <pages> pp. 24-28. </pages>
Reference-contexts: This opens the theoretical possibility of a considerable reduction of the cost of reliability of computation. This, admittedly remote, possibility of practical implications has been advertised in the popular science press ([NYT], [SIAM], [SCI], <ref> [NS] </ref>, [DI]). 1.2 Prehistory in a nutshell The formalization of the notion of effective computability (in a finite number of steps) by K. Godel, A. Turing, A. Church, A. A. Markov, E. Post, S.
Reference: [NYT] <author> Kolata, </author> <title> Gina: New Short Cut Found for Long Math Proofs. </title> <address> The New York Times, </address> <month> April 7, </month> <year> 1992, </year> <title> Science Times section, </title> <editor> p. </editor> <publisher> B5. </publisher>
Reference: [PaY1] <author> Papadimitriou, C., Yannakakis, M.: </author> <title> Optimization, approximation, and complexity classes. </title> <journal> J. Computer and Systems Sci. </journal> <volume> 43 (1991), </volume> <pages> 425-440. </pages> <note> (Preliminary version in: Proc. 20th STOC, ACM 1988, pp. 510-513.) </note>
Reference-contexts: The class MAX-SNP was introduced by Papadimitriou and Yannakakis <ref> [PaY1] </ref>. <p> The expression is max jf (x; y) 2 E : (x 2 S & y 62 S)gj: Other problems in MAX-SNP include Max-3sat, Max-2sat, Independent-set (B) (maximum independent set of vertices in a graph where all vertices have degree B) <ref> [PaY1] </ref>. [PaY1] define a reduction concept called "L-reductions" (L stands for "linear") between optimization (maximization or minimization) problems which preserves approximations within a constant factor. With some abuse of notation, a minimization problem is defined to belong to MAX-SNP if it is L-reducible to a maximization problem in MAX-SNP. <p> The expression is max jf (x; y) 2 E : (x 2 S & y 62 S)gj: Other problems in MAX-SNP include Max-3sat, Max-2sat, Independent-set (B) (maximum independent set of vertices in a graph where all vertices have degree B) <ref> [PaY1] </ref>. [PaY1] define a reduction concept called "L-reductions" (L stands for "linear") between optimization (maximization or minimization) problems which preserves approximations within a constant factor. With some abuse of notation, a minimization problem is defined to belong to MAX-SNP if it is L-reducible to a maximization problem in MAX-SNP. <p> If in addition belongs to MAX-SNP then is MAX-SNP-complete. Following the proof of the NP-completeness of 3sat, one can show that Max-3sat is MAX-SNP-complete. Via L-reductions from Max-3sat one can prove that all MAX-SNP problems mentioned so far are in fact MAX-SNP-complete, and many more are MAX-SNP-hard <ref> [PaY1] </ref>, [BJLTY], [BeP]. The latter include the Shortest-superstring and the Metric-traveling-salesman problems. <p> n c NP = P CLQ [Zu2] Max-set-packing n c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P CLQ [Zu2] Constr-max-job-seq n c NP = P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P PCP [ALMSS] Vertex-cover (5) 1 + c NP = P M3S <ref> [PaY1] </ref> Max-cut 1 + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c NP = P M3S [PaY2] Steiner-tree 1 + c NP = P M3S [BeP] Shortest-supstring 1 + c NP = P M3S [BJLTY] Longest-path 2 log 1" n NP QP M3S [KMR] any C NP = <p> c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P CLQ [Zu2] Constr-max-job-seq n c NP = P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P PCP [ALMSS] Vertex-cover (5) 1 + c NP = P M3S <ref> [PaY1] </ref> Max-cut 1 + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c NP = P M3S [PaY2] Steiner-tree 1 + c NP = P M3S [BeP] Shortest-supstring 1 + c NP = P M3S [BJLTY] Longest-path 2 log 1" n NP QP M3S [KMR] any C NP = P M3S [KMR] SET-COVER (SC) c log n NP
Reference: [PaY2] <author> Papadimitriou, C., Yannakakis, M.: </author> <title> The traveling salesman problem with distances one and two. </title> <journal> Math. of Operations Research, </journal> <volume> 18 (1993), </volume> <pages> 1-11. </pages>
Reference-contexts: = P CLQ [Zu2] Constr-max-job-seq n c NP = P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P PCP [ALMSS] Vertex-cover (5) 1 + c NP = P M3S [PaY1] Max-cut 1 + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c NP = P M3S <ref> [PaY2] </ref> Steiner-tree 1 + c NP = P M3S [BeP] Shortest-supstring 1 + c NP = P M3S [BJLTY] Longest-path 2 log 1" n NP QP M3S [KMR] any C NP = P M3S [KMR] SET-COVER (SC) c log n NP QP MIP 2;1 [LuY1] any C NP = P MIP
Reference: [PhS] <author> Phillips, S., Safra, S.: </author> <title> P CP and tighter bounds for approximating MAX-SNP. </title> <type> Manuscript, </type> <institution> Stanford University, </institution> <month> April </month> <year> 1992. </year>
Reference: [PoS] <author> Polishchuk, A., Spielman, D.: </author> <title> Nearly-linear holographic proofs. </title> <note> In: Proc. 26th STOC, ACM 1994, to appear. </note>
Reference-contexts: A short preliminary version of this paper appeared in [Ba3]. Added in proof. Major progress has been reported shortly after completion of this writing (Nov. 1993). As a result, several of the problems stated above are now out of date. Polishchuk and Spielman <ref> [PoS] </ref> announced a result which combines short transparent proofs with constant-query verifiability. From formal proofs of length N , they construct transparent proofs of length N 1+" , checkable by (1=") const queries, considerably improving the [BFLS]-tradeoff (Theorem 2.2) and subsuming both main results stated in Section 2.3. <p> This result goes a long way toward Problem 6.1, although it doesn't quite solve it. Polishchuk and Spielman base this result on their complete solution of Problem 6.2 <ref> [PoS] </ref>. Feige and Kilian announced powerful new results on two-prover one-round protocols [FeK]. Their result eliminates Problem 6.3; in fact, they reduce the answer size to constant.
Reference: [Pr] <author> Pratt, V.: </author> <title> Every prime has a succinct certificate. </title> <journal> SIAM J. Computing 4 (1975), </journal> <pages> 214-220. </pages>
Reference-contexts: machine, we arrive at 9 MacKenzie [Mac] notes that "formalist, constructive, and modal logics, as well as many particular specialized logics, have all been used in proofs of computer system correctness." 10 A simple system of unconventional deductions in which the theorems are the prime numbers, is given by Pratt <ref> [Pr] </ref>. 12 our definition of proof systems. 3. The definition can still be interpreted as referring to deductive systems (in a broader sense). <p> No NP-complete language belongs to coNP unless NP = coNP. We remark that while Comp and Fact trivially belong to NP, they also happen to belong to coNP: primality and therefore prime factorization can be certified <ref> [Pr] </ref>. 3.2 Randomized algorithms: Monte Carlo and Las Vegas The term "Monte Carlo algorithm" is used as a synonym for "randomized algorithm", an algorithm executed by a randomizing machine. In addition to its input string x, a randomizing machine has access to a string of random bits.
Reference: [PPST] <author> Paul, W. J., Pippenger, N., Szemeredi, E., Trotter, W. T.: </author> <title> On determinism versus nondeterminism and related problems. </title> <booktitle> In: Proc. 24th FOCS, IEEE 1983, </booktitle> <pages> pp. 429-438. </pages>
Reference: [Ru] <author> Rubinfeld, R.: </author> <title> A Mathematical Theory of Self-Checking, Self-Testing and Self-Correcting Programs. </title> <type> Ph.D. Thesis, </type> <institution> Computer Science Dept., U.C. </institution> <month> Berke-ley </month> <year> (1990) </year>
Reference: [RuS] <author> Rubinfeld, R., Sudan, M.: </author> <title> Testing polynomial functions efficiently and over rational domains. </title> <booktitle> In:Proc. 3rd Symp. on Discrete Algorithms, ACM-SIAM 1992, </booktitle> <pages> pp. 23-32. </pages>
Reference-contexts: Total-degree tests are the winners in terms of the number of queries. Query-efficient total degree tests are required for the proof of Theorem 2.3. The known total-degree tests require H = F (in particular, the field must be finite). Theorem 5.3 ([ArS], <ref> [RuS] </ref>, [ALMSS]) Let ffi &gt; 0. For the total-degree code P total (d; m; F ) (m; F ) over a prime field of order jF j Cd 2 there exists a threshold-ffi total-degree test which makes O (d=ffi) queries. <p> The mathematics behind this algorithmic result is summarized in the following result which evolved from results of [GLRSW], <ref> [RuS] </ref>, [ArS], [ALMSS] (cf. [Su1, Thm. 3.7]). By lines in F m we mean affine lines, i.e. sets of the form = (ff; fi) := fff + tfi : t 2 F g, where ff; fi 2 F m , fi 6= 0.
Reference: [RSA] <author> Rivest, R. L., Shamir, A., Adleman, L.: </author> <title> A method for obtaining digital signatures and public key cryptosystems. </title> <booktitle> Comm. ACM 21 (1978), </booktitle> <pages> 120-126. </pages>
Reference: [Schr] <author> Schrijver, A.: </author> <title> Theory of Linear and Integer Programming, </title> <publisher> Wiley 1986. </publisher>
Reference-contexts: The result gives the simplest known link between the two areas. 4.2 Maximum clique Recall that a clique of a graph is a set of pairwise adjacent vertices. With connections ranging from commutative algebra [LiL] to integer programming <ref> [Schr] </ref> and multivariate statistics [VRy], the maximum clique size !(G) is one of the fundamental parameters of the graph G. It has been known for 20 years that determining !(G) is NP-hard (Karp [Kar], cf. [GaJ]).
Reference: [Schw] <author> Schwartz, J. T.: </author> <title> Fast probabilistic algorithms for verification of polynomial identities. </title> <editor> J. </editor> <booktitle> ACM 27 (1980), </booktitle> <pages> 701-717. </pages>
Reference: [Sh] <author> Shamir, A.: IP=PSPACE. J. </author> <note> ACM, 39 (1992), 869-877. (Preliminary version in: Proc. 31th IEEE FOCS (1990), pp. 11-15.) </note>
Reference-contexts: This, initially seemingly small step turned out to be a huge leap, developed in a breathtaking sequence of e-mail exchanges 6 at the end of 1989 (Lund, Fortnow, Karloff, Nisan [LFKN], and Shamir <ref> [Sh] </ref>). <p> The class of these languages is denoted by IP. Clearly IP NP. The gap in this inclusion turned out to be surprisingly large; IP = PSPACE [LFKN], <ref> [Sh] </ref>. PSPACE is a huge class, which includes NP, coNP, the decision problems reducible to #P, and much more. Strategies of combinatorial games (tell the winning move) are the typical complete problems in PSPACE (cf. [GaJ]). <p> NP-definition (1) (Sec. 3.1.3) and rather than asking the existence of a witness, it asks the number f (x) of witnesses. (How many 100-page proofs does Riemann's hypothesis have?) We thus proved the result that all #P-functions admit interactive proofs [LFKN], the immediate precursor of the IP = PSPACE theorem <ref> [Sh] </ref>. 3.4.3 Multi-prover interactive proofs A variant of the notion of interactive proofs, involving several provers, was introduced in [BGKW]. The Verifier simultaneously queries the provers much in the way a police detective would interrogate suspects sharing a common alibi.
Reference: [Si] <author> Sipser, M.: </author> <title> The history and status of the P versus NP question. </title> <booktitle> In: Proc. 24th STOC, ACM 1992, </booktitle> <pages> pp. 603-618. </pages>
Reference-contexts: We refer to the books [Kr] and [We] for an exposition of "new cryptography", a field that had decisive conceptual influence on the subject of this survey. More about the history of the P vs. NP question can be found in M. Sipser's survey <ref> [Si] </ref> which also reproduces Godel's letter in full. 1.3 Brief history, credits In this section we briefly mention the developments contributing directly to the main results surveyed. Given the large number of authors and the 5 Godel may not have agreed.
Reference: [SoS] <author> Solovay, R., Strassen, V.: </author> <title> A fast Monte-Carlo test for primality. </title> <journal> SIAM J. Comput., </journal> <volume> 6 (1977), </volume> <pages> 84-85. </pages>
Reference-contexts: It is Levin's notion of NP-completeness which we shall refer to in the construction of transparent proofs (Sec. 5.3). 18 We illustrate this concept on the primality test of Solovay and Strassen <ref> [SoS] </ref>, a Monte Carlo algorithm which puts Comp into RP. Algorithm Compositeness-test [SoS] Let x 3 be an n-digit positive odd integer. Pick an integer uniformly at random from the interval 1 x 1. If g.c.d.(x; ) 6= 1, accept. <p> It is Levin's notion of NP-completeness which we shall refer to in the construction of transparent proofs (Sec. 5.3). 18 We illustrate this concept on the primality test of Solovay and Strassen <ref> [SoS] </ref>, a Monte Carlo algorithm which puts Comp into RP. Algorithm Compositeness-test [SoS] Let x 3 be an n-digit positive odd integer. Pick an integer uniformly at random from the interval 1 x 1. If g.c.d.(x; ) 6= 1, accept. Otherwise compute the Jacobi symbol (=x) (this computation is almost identical to computing the g.c.d.). <p> If g.c.d.(x; ) 6= 1, accept. Otherwise compute the Jacobi symbol (=x) (this computation is almost identical to computing the g.c.d.). If (x1)=2 6 (=x) (mod x) then accept. Else reject. Clearly, no will cause a prime number to be accepted. On the other hand, <ref> [SoS] </ref> prove that for composite x, those values of which are relatively prime to x and satisfy (x1)=2 (=x) (mod x) form a proper subgroup of the multiplicative group Z fi x . It follows that at least half of the choices of lead to acceptance.
Reference: [Su1] <author> Sudan, Madhu: </author> <title> Efficient checking of polynomials and proofs and the hardness of approximation problems. </title> <type> Ph.D. Thesis. </type> <institution> U.C. Berkeley. </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: As noticed by Beaver, Feigenbaum [BeF] and Lipton [Lip], self-correction is a feature typically displayed by polynomials (self-correction is done by interpolation from random samples). This led to a link with classical error-correcting codes (cf. Sudan <ref> [Su1] </ref>). The recognition [Lip] that self-correction in particular applies to the permanent of an nfin matrix, a notoriously hard-to-compute polynomial [Va], motivated the new ideas eventually leading to the IP = PSPACE theorem. <p> The proof of Theorem 2.3 is quite intricate and builds on an arsenal of recent techniques. A detailed proof, including proofs of most results used, can be found in a single volume in Madhu Sudan's thesis <ref> [Su1] </ref>. The forthcoming journal version of [ALMSS] (available from the authors) also contains most details. <p> The mathematics behind this algorithmic result is summarized in the following result which evolved from results of [GLRSW], [RuS], [ArS], [ALMSS] (cf. <ref> [Su1, Thm. 3.7] </ref>). By lines in F m we mean affine lines, i.e. sets of the form = (ff; fi) := fff + tfi : t 2 F g, where ff; fi 2 F m , fi 6= 0.
Reference: [Su2] <author> Sudan, M.: </author> <title> private communication, </title> <year> 1993. </year>
Reference: [SCI] <author> Peterson, Ivars: </author> <title> Holographic proofs: keeping computers and mathematicians honest. </title> <journal> Science News, </journal> <volume> vol. 141 (1992), </volume> <pages> 382-383. </pages>
Reference-contexts: This opens the theoretical possibility of a considerable reduction of the cost of reliability of computation. This, admittedly remote, possibility of practical implications has been advertised in the popular science press ([NYT], [SIAM], <ref> [SCI] </ref>, [NS], [DI]). 1.2 Prehistory in a nutshell The formalization of the notion of effective computability (in a finite number of steps) by K. Godel, A. Turing, A. Church, A. A. Markov, E. Post, S.
Reference: [SIAM] <author> Cipra, Barry A.: </author> <title> Theoretical Computer Scientists Develop Transparent 60 Proof Technique. </title> <journal> SIAM News, </journal> <volume> vol. 25, No. 3, </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: This opens the theoretical possibility of a considerable reduction of the cost of reliability of computation. This, admittedly remote, possibility of practical implications has been advertised in the popular science press ([NYT], <ref> [SIAM] </ref>, [SCI], [NS], [DI]). 1.2 Prehistory in a nutshell The formalization of the notion of effective computability (in a finite number of steps) by K. Godel, A. Turing, A. Church, A. A. Markov, E. Post, S.
Reference: [Tak] <author> Takeuti, G.: </author> <title> Proof Theory. </title> <publisher> North-Holland, </publisher> <year> 1975. </year>
Reference: [Tar] <author> Tardos, G.: </author> <title> Three-prover proof system for NP. </title> <booktitle> In: Proc. 9th Structure in Complexity Theory Conf., </booktitle> <address> IEEE 1994, </address> <note> to appear. </note>
Reference: [Tr] <author> Trakhtenbrot, B. A.: </author> <title> A survey of Russian approaches to Perebor (brute-force search) algorithms. </title> <journal> Annals of the History of Computing, </journal> <volume> 6 (1984), </volume> <pages> 384-400. </pages>
Reference-contexts: A theory of efficient computability emerged in the early sixties, with the notion of polynomial time computation 4 , as a theoretical benchmark of efficiency, crystallizing in combinatorial optimization theory, especially in Edmonds's work [Ed], as well as in the Soviet school of "mathematical cybernetics" (cf. <ref> [Tr] </ref>). By no means should one interpret a "polynomial time algorithm" as a necessarily efficient one in a practical sense.
Reference: [Va] <author> Valiant, L. G.: </author> <title> The complexity of computing the permanent. </title> <journal> Theor. Comp. Sci. </journal> <volume> 8 (1979), </volume> <pages> 189-201. </pages> <editor> [vEB] van Emde Boas, P.: </editor> <title> Another NP-complete problem and the complexity of computing short vectors in a lattice. </title> <type> Rep. 81-04, </type> <institution> Math. Inst. Univ. </institution> <address> Amsterdam, </address> <year> 1981. </year>
Reference-contexts: This led to a link with classical error-correcting codes (cf. Sudan [Su1]). The recognition [Lip] that self-correction in particular applies to the permanent of an nfin matrix, a notoriously hard-to-compute polynomial <ref> [Va] </ref>, motivated the new ideas eventually leading to the IP = PSPACE theorem. <p> This problem is complete for the class #P of counting functions associated with definitions of NP languages <ref> [Va] </ref>.
Reference: [VRy] <author> Van Ryzin, J., ed.: </author> <title> Classification and clustering, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: The result gives the simplest known link between the two areas. 4.2 Maximum clique Recall that a clique of a graph is a set of pairwise adjacent vertices. With connections ranging from commutative algebra [LiL] to integer programming [Schr] and multivariate statistics <ref> [VRy] </ref>, the maximum clique size !(G) is one of the fundamental parameters of the graph G. It has been known for 20 years that determining !(G) is NP-hard (Karp [Kar], cf. [GaJ]).
Reference: [We] <author> Welsh, D.: </author> <title> Codes and Cryptography, </title> <publisher> Clarendon Press, Oxford, </publisher> <year> 1988. </year>
Reference-contexts: These developments shed an entirely new light on pseudorandom number generators, making polynomial time unpredictability the central concept (Blum, Micali 1982/84, Yao 1982 2 ). We refer to the books [Kr] and <ref> [We] </ref> for an exposition of "new cryptography", a field that had decisive conceptual influence on the subject of this survey. More about the history of the P vs. NP question can be found in M.
Reference: [Yan1] <author> Yannakakis, M.: </author> <title> The effect of a connectivity requirement on the complexity of maximum subgraph problems. </title> <editor> J. </editor> <booktitle> ACM 26 (1979), </booktitle> <pages> 618-630. </pages>
Reference-contexts: The table contains only results that depend on transparent proof / MIP theory. We should emphasize that nontrivial inapproximability results existed before the advent of transparent proofs. Some of the early theory is surveyed in [GaJ]. More recently, very powerful results were obtained by 40 M. Yannakakis <ref> [Yan1] </ref> via direct reduction from 3sat. Here is one example: Theorem 4.8 ([Yan1]) For every " &gt; 0, no polynomial-time algorithm can approximate within a factor of -1" the minimum number of vertices of a graph G whose deletion results in a connected planar graph.
Reference: [Yan2] <author> Yannakakis, M.: </author> <title> On the approximation of maximum satisfiability. </title> <booktitle> In: Proc. 3rd Symp. on Discrete Algorithms, ACM-SIAM 1992, </booktitle> <pages> pp. 1-9. </pages>
Reference-contexts: Cf. also Sec. 3.3.1. If, as is more customary, we define a Max-3sat instance as a list of clauses with at most (rather than exactly) 3 literals per clause, the best known approximation rate is 4/3 <ref> [Yan2] </ref>. 35 We illustrate the idea on Max-k-sat (k literals per clause), for some k.
Reference: [Yao1] <author> Yao, A. C-C.: </author> <title> Protocols for secure computations. </title> <booktitle> In: Proc. 23rd FOCS, IEEE 1982, </booktitle> <pages> pp. 160-164. </pages>
Reference: [Yao2] <author> Yao, A. C-C.: </author> <title> Theory and applications of trapdoor functions. </title> <booktitle> In: Proc. 23rd FOCS, IEEE 1982, </booktitle> <pages> pp. 80-91. </pages>
Reference: [Zi] <author> Zippel, R. E.: </author> <title> Probabilistic algorithms for sparse polynomials. </title> <booktitle> In: Proc. EU-ROSAM 79, Lect. Notes in Comp. Sci. 72, Springer 1979, </booktitle> <pages> pp. 216-226. </pages>
Reference-contexts: T. Schwartz and R. E. Zippel. Lemma 3.2 ([Schw], <ref> [Zi] </ref>) Let f (x 1 ; : : : ; x m ) be a nonzero polynomial of (total) degree d over the field F . Let H F be a finite subset, h = jH j. Pick ff 2 H m uniformly at random.
Reference: [Zu1] <author> Zuckerman, D.: </author> <title> Simulating BPP using a general weak random source. </title> <booktitle> In: Proc. 32nd FOCS, IEEE 1991, </booktitle> <pages> pp. 79-89. </pages>
Reference-contexts: The difficulty of evaluating it is related to the 32 question of the expansion rate of the graphs used for pseudorandom ampli-fication as indicated in Section 3.3.2. A trick invented by Zuckerman <ref> [Zu1] </ref> allows one to bypass this difficulty at the cost of slightly strengthening the assumption NP 6= P to NP 6= ZPP (NP-complete problems cannot be solved by polynomial time Las Vegas algorithms, cf. Section 3.2). [BGLR] and [Zu1] show that the clique inapproximability result holds with c = 1=30 under <p> A trick invented by Zuckerman <ref> [Zu1] </ref> allows one to bypass this difficulty at the cost of slightly strengthening the assumption NP 6= P to NP 6= ZPP (NP-complete problems cannot be solved by polynomial time Las Vegas algorithms, cf. Section 3.2). [BGLR] and [Zu1] show that the clique inapproximability result holds with c = 1=30 under this assumption. The link between transparent proofs and clique approximation is provided by the following result.
Reference: [Zu2] <author> Zuckerman, D.: </author> <title> NP-complete problems have a version that's hard to approximate. </title> <booktitle> In: Proc. 8th Structure in Complexity Theory Conf., IEEE 1993, </booktitle> <pages> pp. 305-312. </pages>
Reference-contexts: Other interesting consequences can be found in [LuY2]. Zuckerman <ref> [Zu2] </ref> presents a list of 21 optimization problems which are not approximable within n c unless P = NP (where n is the input size). Some of these are listed in Section 4.6. The proofs go via a string of reductions starting from Max-clique. <p> n c NP = P CLQ [LuY1] Max-planar-subgr n c NP = P CLQ [LuY2] Max-bipartite-subgr n c NP = P CLQ [LuY2] Max- fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P CLQ <ref> [Zu2] </ref> Max-set-packing n c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P CLQ [Zu2] Constr-max-job-seq n c NP = P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P PCP [ALMSS] Vertex-cover (5) 1 + c NP = P M3S [PaY1] Max-cut 1 + c NP = <p> n c NP = P CLQ [LuY2] Max-bipartite-subgr n c NP = P CLQ [LuY2] Max- fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P CLQ <ref> [Zu2] </ref> Max-set-packing n c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P CLQ [Zu2] Constr-max-job-seq n c NP = P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P PCP [ALMSS] Vertex-cover (5) 1 + c NP = P M3S [PaY1] Max-cut 1 + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c <p> n c NP = P CLQ [LuY2] Max- fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P CLQ <ref> [Zu2] </ref> Max-set-packing n c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P CLQ [Zu2] Constr-max-job-seq n c NP = P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P PCP [ALMSS] Vertex-cover (5) 1 + c NP = P M3S [PaY1] Max-cut 1 + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c NP = P M3S [PaY2] Steiner-tree 1 + <p> fl -subgr n c NP = P CLQ [LuY2] Max--subgr 2 log c n NP QP MIP 2;1 [LuY2] Max-0-1-ip n c NP = P CLQ <ref> [Zu2] </ref> Max-set-packing n c NP = P CLQ [Zu2] Constr-max-hamilton n c NP = P CLQ [Zu2] Constr-max-job-seq n c NP = P CLQ [Zu2] MAX-3SAT (M3S) 1 + c NP = P PCP [ALMSS] Vertex-cover (5) 1 + c NP = P M3S [PaY1] Max-cut 1 + c NP = P M3S [PaY1] Metric-tsp (1,2) 1 + c NP = P M3S [PaY2] Steiner-tree 1 + c NP = P M3S [BeP] Shortest-supstring 1
References-found: 130

