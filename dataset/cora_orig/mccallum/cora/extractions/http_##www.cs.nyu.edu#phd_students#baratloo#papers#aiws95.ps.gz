URL: http://www.cs.nyu.edu/phd_students/baratloo/papers/aiws95.ps.gz
Refering-URL: http://www.cs.nyu.edu/phd_students/baratloo/html/publications.html
Root-URL: http://www.cs.nyu.edu
Email: baratloo@cs.nyu.edu.  partha@cs.asu.edu.  kedem@cs.nyu.edu.  dkrakovs@cs.nyu.edu.  
Title: CALYPSO Goes to Wall Street: A Case Study a software system for writing parallel programs,
Phone: 1995. 1  (212) 998-3350,  (602) 965-5583,  (212) 998-3101,  10285-1100, (212) 526-6731,  
Author: Arash Baratloo Partha Dasgupta Zvi M. Kedem Dmitri Krakovsky Lehman Brothers 
Affiliation: New York University Arizona State University  Department of Computer Science, Courant Institute of Mathematical Sciences,  Department of Computer Science, Arizona State University, Tempe,  Department of Computer Science, Courant Institute of Mathematical Sciences,  Center,  
Address: Street,  New York University New York University&  New York University, 251 Mercer St., New York, NY 10012-1185,  AZ 85287-5406,  New York University, 251 Mercer St., New York, NY 10012-1185,  New York, NY  
Note: Appeared in the 3rd International Conference on Artificial Intelligence Applications on Wall  CALYPSO is  -Lehman Brothers Inc., 3 World Financial  
Abstract: Many computationally intensive problems are parallel in nature. This means that at least theoretically, parallel solutions can be developed for these problems. A wide range of problems from the fields of scientific computation, databases and financial analysis fall into this category. So why is parallelism so rarely used? It is not the case that parallel processing platforms are economically infeasible: the economic advantages of adapting a network of workstations as a parallel platform are well established. It is the extra cost of developing parallel programs that has made this infeasible. In this document we briefly introduce CALYPSO and describe a case study. We start from a sequential program for the calculation of Option-Adjusted-Spread of the corporate bond index, and analyze (a) the effort required to parallelize the program, (b) the performance gained, and (c) the behavior of the system in a network where workstations can arbitrarily slowdown or crash at any time. The measured overhead of a CALYPSO program running on six workstations in presence of slowdowns and fail ures ranged from 7.9% to 16.3%. We finally conclude that parallel applications can be a cost effective solution to coarse-grain computationally intensive problems that exist in many financial applications. fl This research was partially supported by National Science Foundation under grant numbers CCR-94-11590, and CCR-95-05519.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Arash Baratloo, Partha Dasgupta, Mehmet Karaul, Zvi M. Kedem, and Fabian Monrose. </author> <title> CALYPSO 0.9 Manual. </title> <address> New York University, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: That is all: the fact that this program is running on multiple workstations with dynamic behavior is hidden from the user. All the user experiences is a speedup whenever there are idle workstations anywhere in the network. For a complete description of CALYPSO see <ref> [4, 2, 1] </ref>. 2.1 Language CSL extends the standard C++ with the following keywords: shared, parbegin, parend, and routine. CALYPSO views the virtual address space of each process as partitioned into two disjoint areas: shared and private.
Reference: [2] <author> Arash Baratloo, Partha Dasgupta, and Zvi M. Ke-dem. CALYPSO: </author> <title> A novel software system for fault-tolerant parallel processing on distributed platforms. </title> <type> Manuscript, </type> <month> February </month> <year> 1995. </year>
Reference-contexts: That is all: the fact that this program is running on multiple workstations with dynamic behavior is hidden from the user. All the user experiences is a speedup whenever there are idle workstations anywhere in the network. For a complete description of CALYPSO see <ref> [4, 2, 1] </ref>. 2.1 Language CSL extends the standard C++ with the following keywords: shared, parbegin, parend, and routine. CALYPSO views the virtual address space of each process as partitioned into two disjoint areas: shared and private.
Reference: [3] <author> Fischer Black, Emmanuel Derman, and William Toy. </author> <title> One-factor model of interest rates and its application to treasury bond options. </title> <journal> Financial Analysts Journal, </journal> <pages> pages 33-39, </pages> <month> January-February </month> <year> 1990. </year>
Reference-contexts: We also demonstrate that a remarkable performance improvement can be achieved without incurring much of the additional hardware or programming overhead. To calculate the OAS we utilized a binomial tree option pricing model as described by Black, Derman, and Toy <ref> [3] </ref>. Despite the fact that some of the simplifications have been made, we believe that the computational complexity of the problem has not been reduced significantly, especially from the viewpoint of the model's application to the index calculations.
Reference: [4] <author> P. Dasgupta, Z. M. Kedem, and M. O. Rabin. </author> <title> Parallel processing on networks of workstations: A fault-tolerant, high performance approach. </title> <booktitle> Proceedings of the 15th Intl. Conf on Distributed Computing Systems, to appear, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: In section 5 we report experimental results by parallelizing and measuring the performance of such application. We conclude by summarizing our findings. 2 Overview of CALYPSO Simplicity is fundamental to CALYPSO. This work has its roots in several years of theoretical and systems research. For the complete history see <ref> [4] </ref>. Here we briefly describe the CALYPSO Source Language (CSL) used to express parallelism, then proceed to discuss its features which are transparent to the user, and in many instances to the programmer. CSL extends the standard C++ with only four keywords. <p> That is all: the fact that this program is running on multiple workstations with dynamic behavior is hidden from the user. All the user experiences is a speedup whenever there are idle workstations anywhere in the network. For a complete description of CALYPSO see <ref> [4, 2, 1] </ref>. 2.1 Language CSL extends the standard C++ with the following keywords: shared, parbegin, parend, and routine. CALYPSO views the virtual address space of each process as partitioned into two disjoint areas: shared and private.
Reference: [5] <author> David Gelernter and David Kaminsky. </author> <title> Supercomputing out of recycled garbage: Preliminary experience with Piranha. </title> <booktitle> Sixth ACM International Conference on Supercomputing, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: Networks of workstations are a common commodity: they already exists, have been paid for, and are oper ational in many institutions. 2. Their aggregate computational power rivals many supercomputers. Furthermore, their cost/performance ratio makes them an attractive alternative to relatively expensive hardware. 3. As many studies have shown <ref> [5, 6] </ref>, on average workstations are utilized 15% of the time. Thus, the hidden unutilized computing power that has already been paid for is phenomenal.
Reference: [6] <author> D.A. Nichols. </author> <title> Using idle workstations in a shared computing environment. </title> <journal> ACM Operating Systems Review, </journal> <volume> 21(5), </volume> <year> 1987. </year>
Reference-contexts: Networks of workstations are a common commodity: they already exists, have been paid for, and are oper ational in many institutions. 2. Their aggregate computational power rivals many supercomputers. Furthermore, their cost/performance ratio makes them an attractive alternative to relatively expensive hardware. 3. As many studies have shown <ref> [5, 6] </ref>, on average workstations are utilized 15% of the time. Thus, the hidden unutilized computing power that has already been paid for is phenomenal.
Reference: [7] <author> V.S. Sunderam. </author> <title> PVM: A framework for parallel distributed computing. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <year> 1990. </year>
Reference-contexts: It is generally accepted that message passing systems provide the best performance at the expense of programmability: they frequently require extensive changes to a sequential program, and they are also hard to debug. In spite of such drawbacks, PVM <ref> [7] </ref>, for instance, is one of the most popular parallel programming systems for distributed hardware. This demonstrates the acute need for providing such facilities. * Load balancing is a critical issue in the performance of any parallel application.

References-found: 7

