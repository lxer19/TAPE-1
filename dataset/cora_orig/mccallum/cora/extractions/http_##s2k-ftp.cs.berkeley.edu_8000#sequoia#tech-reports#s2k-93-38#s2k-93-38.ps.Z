URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-93-38/s2k-93-38.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-93-38/
Root-URL: http://www.cs.berkeley.edu
Title: Extending a Graphical Query Language to Support Updates, Foreign Systems, and Transactions  
Author: Jolly Chen, Alexander Aiken, Nobuko Nathan, Caroline Paxson, Michael Stonebraker, Jiang Wu 
Abstract: In [STON93] we proposed a new user interface paradigm called Tioga for interacting with database management systems. Tioga simplifies the task of building database applications and is geared especially towards the needs of scientific users. We borrow t he "boxes and arrows" visual programming notation of scientific visualization systems and allow users to graphically construct applications by using database procedures as building blocks. This paper extends the Tioga paradigm to a general database programming environment. In particular, we address three shortcomings of graphical query languages. First, we define a mechanism for allowing general programs---not just database procedures---as building blocks. This extension allows better handling of general data entry and data visualization needs and provides an interface to foreign systems. Second, we permit database updates. Third, we define a transaction semantics for graphical query languages. Unlike traditional transactions, Tioga transactions contain a directed graph of queries instead of a linear sequence of queries. We explore concurrency c ontrol techniques to promote both intra-transaction and inter-transaction parallelism. Finally, we present query processing strategies for graphical queries with general building blocks, updates, and transactions. We show h ow to efficiently execute a Tioga application by decomposing the application into components that are individually optimized. 
Abstract-found: 1
Intro-found: 1
Reference: [BERN80] <author> Bernstein, P.A., Shipman, D.W, and Rothnie, J.B., </author> <title> "Concurrency Control in a System for Distributed Databases (SDD-1)," </title> <address> ACM-TODS, </address> <month> March </month> <year> 1980. </year>
Reference-contexts: In general, these edges do not define a total ordering, so concurrent execution of ingredients is possible within a subtransaction. When accessing shared data, concurrently executing ingredients may conict. To detect conicts, we require ingredients to predeclare their read and write sets <ref> [BERN80] </ref>. Using these predeclara-tions, we resolve conicts by adding ordering edges to our subtransaction graph. Ordering edges are added between ingredients with conicts unless they are already constrained in their execution order.
Reference: [BERN89] <author> Bernstein, </author> <title> P.A., </title> <editor> et al., </editor> <booktitle> "Future Directions in DBMS research," SIGMOD Record, </booktitle> <month> March </month> <year> 1989. </year>
Reference-contexts: 1. INTRODUCTION The design of user interfaces for database systems is an area in need of more attention <ref> [BERN89, STON93b] </ref>. Existing database user interfaces are unfriendly and difficult for nonexperts to use. Most database interfaces take the form of textual programming languages or forms-based interfaces oriented towards business applications. In [STON93], we presented Tioga, a new paradigm for user interaction with a DBMS.
Reference: [BERN90] <author> Bernstein, </author> <title> P.A., </title> <editor> et al., </editor> <title> "Implementing Recoverable Requests Using Queues," </title> <booktitle> Proc. 1990 ACM-SIGMOD Conference, </booktitle> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Because the hand is asynchronous, it may produce data at a higher rate than that which can be processed by downstream ingredients. Speed-matching buffers can be kept in virtual memory or managed in the database as persistent queues <ref> [BERN90] </ref>. Input buffers are allocated for any ingredient with multiple inputs if that ingredient is downstream from multiple hands. Since hands are asynchronous, all the inputs for the ingredient may not be ready at the same time. The ingredient cannot execute until all inputs have arrived.
Reference: [DOZI92] <author> Dozier, J., </author> <title> "How Sequoia 2000 Addresses Issues in Data and Information Systems for Global Change," </title> <type> Sequoia 2000 Technical Report 92/14, </type> <institution> University of California, Berkeley, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: Most database interfaces take the form of textual programming languages or forms-based interfaces oriented towards business applications. In [STON93], we presented Tioga, a new paradigm for user interaction with a DBMS. Tioga is motivated by the needs of scientific DBMS users in the SEQUOIA 2000 project <ref> [DOZI92, STON92, STON93a] </ref>. Tioga has a "boxes and arrows" programming model in which user-defined database procedures are depicted as boxes and edges between boxes represent ow of data. This paradigm allows nonexperts to build visual programs called recipes by interactively connecting boxes together using a graphical user interface.
Reference: [LUCA92] <author> Lucas, B. et al., </author> <title> "An Architecture for a Scientific Visualization System," </title> <booktitle> Proc. 1992 IEEE Visualization Conference, </booktitle> <address> Boston, MA, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: In Section 4, we discuss the query processing implications of our new constructs. Lastly, we define the role of transactions in the Tioga environment in Section 5. 2. THE ORIGINAL TIOGA PROGRAMMING MODEL Existing scientific programming systems like AVS [UPSO89], Khoros [RASU92], and Data Explorer <ref> [LUCA92] </ref> allow users to create visual programs by connecting modules, written in a conventional programming language, through an easy-to-use graphical user interface. The Tioga system preserves and generalizes the boxes and arrows user interface from commercial packages. Tioga supports the definition, manipulation and execution of boxes and arrows diagrams.
Reference: [RASU92] <author> Rasure, J. and Young, M., </author> <title> "An Open Environment for Image Processing Software Development," </title> <booktitle> Proceedings of 1992 SPIE Symposium on Electronic Image Processing, </booktitle> <month> February </month> <year> 1992. </year>
Reference-contexts: In Section 4, we discuss the query processing implications of our new constructs. Lastly, we define the role of transactions in the Tioga environment in Section 5. 2. THE ORIGINAL TIOGA PROGRAMMING MODEL Existing scientific programming systems like AVS [UPSO89], Khoros <ref> [RASU92] </ref>, and Data Explorer [LUCA92] allow users to create visual programs by connecting modules, written in a conventional programming language, through an easy-to-use graphical user interface. The Tioga system preserves and generalizes the boxes and arrows user interface from commercial packages.
Reference: [STON75] <author> Stonebraker, M., </author> <title> "Implementation of Integrity Constraints and Views by Query Modification," </title> <booktitle> Proc. 1975 ACM-SIGMOD Conference, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1975. </year>
Reference-contexts: Any two connected ingredients can be combined as follows. Two POSTQUEL ingredients can be combined into a single one by assuming that the second query is a command defined on the view that is materialized by the first ingredient. Standard query modification, as discussed in <ref> [STON75] </ref>, correctly combines the ingredients. If the second ingredient is a C function, then the ingredients can be combined by adding the C function to the target list of the POSTQUEL ingredient.
Reference: [STON91] <author> Stonebraker, M. and Kemnitz, G., </author> <title> "The POSTGRES Next-Generation Database Management System," </title> <journal> Communications of the ACM, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: To accurately achieve the as if semantics, we must not only re-execute those ingredients but re-execute them with respect to time t 0 . Fortunately, POSTGRES already supports exactly this functionality because it can handle time travel queries with its no-overwrite storage manager <ref> [STON91] </ref>. With POSTGRES's time travel capability, we are able to execute queries with respect to a time in the past. Therefore, on run-time parameter changes, we simply re-execute those ingredients as historical queries. For browser structures that are executed using lazy evaluation, run-time parameter changes are easy to handle.
Reference: [STON92] <author> Stonebraker, M. and Dozier, J., </author> <title> "SEQUOIA 2000: Large Capacity Object Servers to Support Global Change Research," </title> <type> SEQUOIA 2000 Technical Report 91/1, </type> <institution> Electronics Research Lab, University of California, Berkeley, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Most database interfaces take the form of textual programming languages or forms-based interfaces oriented towards business applications. In [STON93], we presented Tioga, a new paradigm for user interaction with a DBMS. Tioga is motivated by the needs of scientific DBMS users in the SEQUOIA 2000 project <ref> [DOZI92, STON92, STON93a] </ref>. Tioga has a "boxes and arrows" programming model in which user-defined database procedures are depicted as boxes and edges between boxes represent ow of data. This paradigm allows nonexperts to build visual programs called recipes by interactively connecting boxes together using a graphical user interface.
Reference: [STON93] <author> Stonebraker, M., et al., </author> <title> "Tioga: Providing Data Management for Scientific Visualization Applications," </title> <booktitle> Proc. 1993 VLDB Conference, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: 1. INTRODUCTION The design of user interfaces for database systems is an area in need of more attention [BERN89, STON93b]. Existing database user interfaces are unfriendly and difficult for nonexperts to use. Most database interfaces take the form of textual programming languages or forms-based interfaces oriented towards business applications. In <ref> [STON93] </ref>, we presented Tioga, a new paradigm for user interaction with a DBMS. Tioga is motivated by the needs of scientific DBMS users in the SEQUOIA 2000 project [DOZI92, STON92, STON93a]. <p> Finally, our extensions also require new recipe execution strategies. We present a recipe execution strategy based on dividing a recipe into pieces and choosing an eager or lazy evaluation strategy for each piece. Section 2 of this paper briey reviews our previous proposal from <ref> [STON93] </ref>. Section 3 extends this model with new constructs to handle data entry and interfacing to foreign systems. In Section 4, we discuss the query processing implications of our new constructs. Lastly, we define the role of transactions in the Tioga environment in Section 5. 2. <p> Therefore, an ingredient can be a sequence of queries or it can encapsulate arbitrary transformations of inputs to outputs. Browsers are rendering modules that interact with the screen and run as application programs. They adhere to a client-server communication protocol described in <ref> [STON93] </ref>. Our protocol supports a joystick-oriented browsing style through multi-dimensional space. Our original Tioga prototype includes a graphical recipe editor and a recipe execution engine. The editor allows interactive construction, modification, storage and retrieval o f recipes. The executor schedules the actual executions of the ingredients. <p> Once a constraint region is given by the browser, no further requests can be made for data in that region. Lastly, a browser can have arbitrary behavior and request records with arbitrary locations. The original browser protocol described in <ref> [STON93] </ref> specified that browsers could request data objects that were located within arbitrary multi-dimensional polyhedrons. This behavior is an example of arbitrary browser behavior. Finally, we also associate behaviors with Tioga ingredients. <p> Every functional ingredient in Tioga is a candidate for a function cache. There is no benefit from caching the outputs of non-functional ingredients. In <ref> [STON93] </ref>, we discussed techniques for coalescing any two ingredients into a single ingredient. This tactic results in a query plan for the coalesced ingredient that is more efficient than the combination of the individual plans for the two ingredients. <p> However, the cost of coalescing is that the opportunity to buffer between the two ingredients disappears. If a run time parameter to the second ingredient changes, then the entire combined ingredient must be recomputed, whereas without coalescing, only the second ingredient needs recomputation. In <ref> [STON93] </ref>, there is a lengthy discussion of the optimization problem surrounding coalescing and buffering. The extended Tioga model discussed here does not compromise this analysis. When an ingredient is downstream from multiple hands, then there is a substantial efficiency tax to coalescing the ingredient along both upstream links.
Reference: [STON93a] <author> Stonebraker, M., et al., </author> <title> "The Sequoia 2000 Architecture and Implementation Strategy," </title> <type> Sequoia 2000 Technical Report 93/23, </type> <institution> University of California, Berkeley, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Most database interfaces take the form of textual programming languages or forms-based interfaces oriented towards business applications. In [STON93], we presented Tioga, a new paradigm for user interaction with a DBMS. Tioga is motivated by the needs of scientific DBMS users in the SEQUOIA 2000 project <ref> [DOZI92, STON92, STON93a] </ref>. Tioga has a "boxes and arrows" programming model in which user-defined database procedures are depicted as boxes and edges between boxes represent ow of data. This paradigm allows nonexperts to build visual programs called recipes by interactively connecting boxes together using a graphical user interface.
Reference: [STON93b] <author> Stonebraker, M., et al., </author> <title> "DBMS Research at a Crossroads: The Vienna Update," </title> <booktitle> Proc. 19th VLDB Conference, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: 1. INTRODUCTION The design of user interfaces for database systems is an area in need of more attention <ref> [BERN89, STON93b] </ref>. Existing database user interfaces are unfriendly and difficult for nonexperts to use. Most database interfaces take the form of textual programming languages or forms-based interfaces oriented towards business applications. In [STON93], we presented Tioga, a new paradigm for user interaction with a DBMS.
Reference: [UPSO89] <author> Upson, C., et al., </author> <title> "The Application Visualization System," </title> <journal> IEEE Computer Graphics and Applications, </journal> <month> July </month> <year> 1989. </year> <month> 14 </month>
Reference-contexts: In Section 4, we discuss the query processing implications of our new constructs. Lastly, we define the role of transactions in the Tioga environment in Section 5. 2. THE ORIGINAL TIOGA PROGRAMMING MODEL Existing scientific programming systems like AVS <ref> [UPSO89] </ref>, Khoros [RASU92], and Data Explorer [LUCA92] allow users to create visual programs by connecting modules, written in a conventional programming language, through an easy-to-use graphical user interface. The Tioga system preserves and generalizes the boxes and arrows user interface from commercial packages.
References-found: 13

