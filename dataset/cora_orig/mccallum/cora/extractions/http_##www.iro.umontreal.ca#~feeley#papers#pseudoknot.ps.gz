URL: http://www.iro.umontreal.ca/~feeley/papers/pseudoknot.ps.gz
Refering-URL: http://www.iro.umontreal.ca/~feeley/
Root-URL: http://www.iro.umontreal.ca
Title: Benchmarking Implementations of Functional Languages with "Pseudoknot", a Float-Intensive Benchmark  
Author: Pieter H. Hartel Marc Feeley Martin Alt Lennart Augustsson Peter Baumann Marcel Beemster Emmanuel Chailloux Christine H. Flood Wolfgang Grieskamp John H. G. van Groningen Kevin Hammond Bogumi l Hausman Melody Y. Ivory Richard E. Jones Jasper Kamperman Peter Lee Xavier Leroy Rafael D. Lins Sandra Loosemore Niklas Rojemo Manuel Serrano Jean-Pierre Talpin Jon Thackray Stephen Thomas Pum Walters Pierre Weis Peter Wentworth 
Keyword: point intensive application  
Date: 1 (1): 1-000, January 1993  
Note: J. Functional Programming  c 1993 Cambridge University Press 1  taken from molecular biology. The principal aspects studied are compile time and  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: <author> M. Alt, C. Fecht, C. Ferdinand, and R. Wilhelm. </author> <title> The Trafola-S subsystem. </title> <editor> In B. Hoffmann and B. Krieg-Bruckner, editors, </editor> <title> Program development by specification and transformation, </title> <publisher> LNCS 680, </publisher> <pages> pages 539-576. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <month> May </month> <year> 1993. </year>
Reference: <author> A. W. Appel. </author> <title> Compiling with Continuations. </title> <publisher> Cambridge Univ. Press, </publisher> <address> Cambridge, England, </address> <year> 1992. </year>
Reference: <author> J. Armstrong, M. Williams, and R. Virding. </author> <title> Concurrent programming in Erlang. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1993. </year>
Reference: <author> L. Augustsson. </author> <title> HBC user's manual. Programming Methodology Group Distributed with the HBC compiler, </title> <institution> Depart. of Comp. Sci, Chalmers, S-412 96 Goteborg, Sweden, </institution> <year> 1993. </year>
Reference: <author> L. Augustsson and T. Johnsson. </author> <title> The Chalmers Lazy-ML compiler. </title> <journal> The computer journal, </journal> <volume> 32(2) </volume> <pages> 127-141, </pages> <month> Apr </month> <year> 1989. </year>
Reference: <author> L. Augustsson and T. Johnsson. </author> <title> Lazy ML user's manual. Programming methodology group report, </title> <institution> Dept. of Comp. Sci, Chalmers Univ. of Technology, Goteborg, Sweden, </institution> <year> 1990. </year>
Reference: <author> M. Beemster. </author> <title> The lazy functional intermediate language Stoffel. </title> <type> Technical report CS-92-16, </type> <institution> Dept. of Comp. Sys, Univ. of Amsterdam, </institution> <month> Dec </month> <year> 1992. </year>
Reference: <author> M. Beemster. </author> <title> Optimizing transformations for a lazy functional language. </title> <editor> In W.-J. Withagen, editor, </editor> <booktitle> 7th Computer systems, </booktitle> <pages> pages 17-40, </pages> <address> Eindhoven, The Netherlands, </address> <month> Nov </month> <year> 1993. </year> <institution> Eindhoven Univ. of Technology. </institution>
Reference: <author> J. A. Bergstra, J. Heering, and P. Klint. </author> <title> Algebraic Specification,. </title> <publisher> The ACM Press in co-operation with Addison-Wesley, ACM Press Frontier Series, </publisher> <year> 1989. </year>
Reference-contexts: A further three functional languages were designed for a specific purpose: Epic is a language for equational programming, which was primarily created to support the algebraic specification language ASF+SDF <ref> (Bergstra et al., 1989) </ref>; Trafola is an eager language that was designed as a transformation language in a compiler construction project; and Opal is an eager language that combines concepts from algebraic specification and functional programming in a uniform framework.
Reference: <author> D. C. Cann. </author> <title> The optimizing SISAL compiler: </title> <note> version 12.0. Manual UCRL-MA-110080, </note> <institution> Lawrence Livermore National Laboratory, Livermore, California, </institution> <month> Apr </month> <year> 1992. </year>
Reference: <author> D. C. Cann. </author> <title> Retire FORTRAN? a debate rekindled. </title> <journal> CACM, </journal> <volume> 35(8) </volume> <pages> 81-89, </pages> <month> Aug </month> <year> 1992. </year> <title> Pseudoknot benchmark 25 E. Chailloux. An efficient way of compiling ML to C. </title> <editor> In P. Lee, editor, </editor> <booktitle> ACM SIGPLAN Workshop on ML and its Applications, </booktitle> <pages> pages 37-51, </pages> <address> San Francisco, California, </address> <month> Jun </month> <year> 1992. </year> <institution> School of Comp. Sci, Carnegie Mellon Univ., Pittsburg, Pennsylvania, </institution> <note> Technical report CMU-CS-93-105. </note>
Reference: <author> K. Didrich, A. Fett, C. Gerke, W. Grieskamp, and P. Pepper. OPAL: </author> <title> Design and implementation of an algebraic programming language. </title> <editor> In J. Gutknecht, editor, </editor> <booktitle> Programming Languages and System Architectures, </booktitle> <volume> LNCS 782, </volume> <pages> pages 228-244, </pages> <address> Zurich, Switzerland, Mar 1994. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference: <author> A. Diwan, D. Tarditi, and E. Moss. </author> <title> Memory subsystem performance of programs with copying garbage collection. </title> <booktitle> In 21st Principles of programming languages, </booktitle> <pages> pages 1-14, </pages> <address> Portland, Oregon, </address> <month> Jan </month> <year> 1994. </year> <booktitle> ACM, </booktitle> <address> New York. </address>
Reference-contexts: On the DECstation 5000 it runs at 55% of the speed of C, whereas on the SPARC it runs at only 36% of the speed of C. We suspect that this is mainly due to memory effects. Previous studies <ref> (Diwan et al., 1994) </ref> have shown that the intensive heap allocation which is characteristic of the SML/NJ implementation interacts badly with memory subsystems that use a write-no-allocate cache policy, as is the case of the SPARC; in contrast, the use of a write-allocate policy coupled with what amounts to sub-block placement
Reference: <author> M. Feeley and J. S. Miller. </author> <title> A parallel virtual machine for efficient Scheme compilation. </title> <booktitle> In Lisp and functional programming, </booktitle> <pages> pages 119-130, </pages> <address> Nice, France, </address> <month> Jul </month> <year> 1990. </year> <booktitle> ACM, </booktitle> <address> New York. </address>
Reference: <author> M. Feeley, M. Turcotte, and G. Lapalme. </author> <title> Using Multilisp for solving constraint satisfaction problems: an application to nucleic acid 3D structure determination. </title> <journal> Lisp and symbolic computation, </journal> 7(2/3):231-246, 1994. 
Reference-contexts: 1 Introduction At the Dagstuhl Workshop on Applications of Functional Programming in the Real World in May 1994 (Giegerich and Hughes, 1994), several interesting applications of functional languages were presented. One of these applications, the Pseudoknot problem <ref> (Feeley et al., 1994) </ref> had been written in several languages, including C, Scheme (Rees and Clinger, 1991), Multilisp (Halstead Jr, 1985) and Miranday (Turner, 1985). A number of workshop participants decided to test their compiler technology using this particular program. <p> Where alternatives were available, we have chosen single-precision, since this should yield better performance. 4 Application The Pseudoknot program is derived from a `real-world' molecular biology application <ref> (Feeley et al., 1994) </ref>. In the following sections the program is described briefly from the point of view of its functional structure and its main operational characteristics. The level of detail provided should be sufficient to understand the later sections that describe the optimisations and performance analyses of the program. <p> This data is used to align nucleotides with one another and to compute the absolute position of atoms in the molecule. The program used in the present benchmarking effort is slightly different from the original <ref> (Feeley et al., 1994) </ref>. The latter only computed the number of solutions found during the search. However, in practice, it is the location of each atom in the solutions that is of real interest to a biologist, since the solutions typically need to be screened manually by visualising them consecutively.
Reference: <author> R. Giegerich and R. J. M. Hughes. </author> <title> Functional programming in the real world. </title> <type> Dagstuhl seminar report 89, </type> <institution> IBFI GmbH, </institution> <address> Schloss Dagstuhl, D-66687 Wadern, Germany, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 Introduction At the Dagstuhl Workshop on Applications of Functional Programming in the Real World in May 1994 <ref> (Giegerich and Hughes, 1994) </ref>, several interesting applications of functional languages were presented. One of these applications, the Pseudoknot problem (Feeley et al., 1994) had been written in several languages, including C, Scheme (Rees and Clinger, 1991), Multilisp (Halstead Jr, 1985) and Miranday (Turner, 1985).
Reference: <author> A. J. Gill and S. L. Peyton Jones. </author> <title> Cheap deforestation in practice: An optimiser for Haskell. </title> <booktitle> In Proc. IFIP, </booktitle> <volume> Vol. 1, </volume> <pages> pages 581-586, </pages> <address> Hamburg, Germany, </address> <month> Aug </month> <year> 1994. </year>
Reference-contexts: When this transformation is applied to the Haskell source, the total execution time is reduced to 1.8 seconds user time (still on machine 16). An automatic generalised version of this hand optimisation, the foldr/build transformation <ref> (Gill and Peyton Jones, 1994) </ref>, has now been incorporated into the Glasgow Haskell compiler.
Reference: <author> K. Gopinath and J. L. Hennesy. </author> <title> Copy elimination in functional languages. </title> <booktitle> In 16th Principles of programming languages, </booktitle> <pages> pages 303-314, </pages> <address> Austin, Texas, </address> <month> Jan </month> <year> 1989. </year> <booktitle> ACM, </booktitle> <address> New York. </address> <institution> The Yale Haskell Group. </institution> <note> The Yale Haskell Users Manual (version Y2.3b). </note> <institution> Dept. of Comp. Sci, Yale Univ. (Distributed with the Yale Haskell compiler), </institution> <month> Jul </month> <year> 1994. </year>
Reference-contexts: The Sisal compiler includes special optimisations (preallocation (Ranelletti, 1987) and copy elimination <ref> (Gopinath and Hennesy, 1989) </ref>) that make safe destructive updates of data structures possible. In order to exploit this, the Sisal version of the Pseudoknot program was written so as to expose the single threaded use of some important data structures.
Reference: <author> R. H. Halstead Jr. </author> <title> Multilisp: A language for concurrent symbolic computation. </title> <journal> ACM transactions on programming languages and systems, </journal> <volume> 7(4) </volume> <pages> 501-538, </pages> <month> Oct </month> <year> 1985. </year> <title> Harlequin. MLWorks draft documentation. </title> <publisher> Harlequin Ltd, </publisher> <address> Cambridge, England, </address> <year> 1994. </year>
Reference-contexts: One of these applications, the Pseudoknot problem (Feeley et al., 1994) had been written in several languages, including C, Scheme (Rees and Clinger, 1991), Multilisp <ref> (Halstead Jr, 1985) </ref> and Miranday (Turner, 1985). A number of workshop participants decided to test their compiler technology using this particular program. The first point of comparison is the speed of compilation and the speed of the compiled program.
Reference: <author> P. H. Hartel, H. W. Glaser, and J. M. Wild. </author> <title> Compilation of functional languages using flow graph analysis. </title> <journal> Software|practice and experience, </journal> <volume> 24(2) </volume> <pages> 127-173, </pages> <month> Feb </month> <year> 1994. </year>
Reference: <author> P. H. Hartel and K. G. Langendoen. </author> <title> Benchmarking implementations of lazy functional languages. </title> <booktitle> In 6th Functional programming languages and computer architecture, </booktitle> <pages> pages 341-349, </pages> <address> Copenhagen, Denmark, </address> <month> Jun </month> <year> 1993. </year> <booktitle> ACM, </booktitle> <address> New York. </address>
Reference: <author> B. Hausman. </author> <title> Turbo erlang: Approaching the speed of C. </title> <editor> In E. Tick and G. Succi, editors, </editor> <booktitle> Implementations of Logic Programming Systems, </booktitle> <pages> pages 119-135. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston/Dordrecht/London, </address> <month> Mar </month> <year> 1994. </year>
Reference: <editor> P. Hudak, S. L. Peyton Jones, and P. L. Wadler (editors). </editor> <title> Report on the programming language Haskell a non-strict purely functional language, version 1.2. </title> <journal> ACM SIGPLAN notices, </journal> <volume> 27(5):R1-R162, </volume> <month> May </month> <year> 1992. </year>
Reference: <author> M. P. Jones. </author> <title> The implementation of the Gofer functional programming system. </title> <institution> Research Report YALEU/DCS/RR-1030, Dept. of Comp. Sci, Yale Univ., </institution> <address> New haven, Connecticut, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: When this transformation is applied to the Haskell source, the total execution time is reduced to 1.8 seconds user time (still on machine 16). An automatic generalised version of this hand optimisation, the foldr/build transformation <ref> (Gill and Peyton Jones, 1994) </ref>, has now been incorporated into the Glasgow Haskell compiler.
Reference: <author> B. W. Kernighan and D. W. Ritchie. </author> <title> The C programming language - ANSI C. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <note> second edition edition, </note> <year> 1988. </year>
Reference: <author> X. Leroy. </author> <title> Unboxed objects and polymorphic typing. </title> <booktitle> In 19th Principles of Programming Languages, </booktitle> <pages> pages 177-188, </pages> <address> Albuquerque, New Mexico, </address> <month> Jan </month> <year> 1992. </year> <booktitle> ACM, </booktitle> <address> New York. </address>
Reference-contexts: Our experience with each of these techniques will now be described in some detail, as it provides useful insight into the properties of this relatively new technology. The Caml Gallium compiler employs a representation analysis <ref> (Leroy, 1992) </ref>, which automatically exploits an unboxed representation for double-precision floating-point numbers when these are used monomorphically. Since the Pseudoknot benchmark does not use polymorphism, all floating-point numbers are unboxed. This is the main reason why the Gallium compiler generates faster code than most of the other compilers.
Reference: <author> X. Leroy. </author> <title> The Caml Light system, </title> <note> release 0.61. Software and documentation distributed by anonymous FTP on ftp.inria.fr, </note> <year> 1993. </year>
Reference: <author> R. D. Lins. </author> <title> Categorical Multi-Combinators. </title> <editor> In G. Kahn, editor, </editor> <booktitle> 3rd Functional programming languages and computer architecture, </booktitle> <volume> LNCS 274, </volume> <pages> pages 60-79, </pages> <address> Portland, Oregon, Sep 1987. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference-contexts: Two of the functional languages are intended to be used only as intermediate languages, and thus lack certain features of fully fledged programming languages, such as pattern matching. These languages are CMC, a Miranda based language intended for research on the categorical abstract machine <ref> (Lins, 1987) </ref>; and Stoffel, an intermediate language designed to study code generation for high level languages on fine-grained parallel processors. The Stoffel and CMC compilers have been included because these compilers offer interesting implementation platforms, not because of the programming language they implement.
Reference: <author> R. D. Lins and B. O. Lira. CMC: </author> <title> A novel way of implementing functional languages. </title> <journal> J. Programming Languages, </journal> <volume> 1(1) </volume> <pages> 19-39, </pages> <month> Mar </month> <year> 1993. </year>
Reference: <author> R. A. MacLachlan. </author> <title> CMU common Lisp user's manual. </title> <type> Technical report CMU-CS-92-161, </type> <institution> School of Comp. Sci, Carnegie Mellon Univ., </institution> <month> Jul </month> <year> 1992. </year>
Reference: <author> J. R. McGraw, S. K. Skedzielewski, S. Allan, R. Oldehoeft, J. R. W. Glauert, C. Kirkham, B. Noyce, and R. Thomas. </author> <title> Sisal: Streams and iteration in a single assignment language. Language reference manual version 1.2 M-146, </title> <type> Rev. 1, </type> <institution> Lawrence Livermore National Laboratory, Livermore, California, </institution> <month> Mar </month> <year> 1985. </year>
Reference: <author> R. Milner, M. Tofte, and R. Harper. </author> <title> The definition of Standard ML. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1990. </year>
Reference: <author> R. S. Nikhil. </author> <note> ID version 90.1 reference manual. Computation Structures Group Memo 284-2, </note> <institution> Laboratory for Comp. Sci, MIT, Cambridge Massachusetts, </institution> <month> Jul </month> <year> 1991. </year>
Reference: <author> S. L. Peyton Jones, C. V. Hall, K. Hammond, W. D. Partain, and P. L. Wadler. </author> <title> The Glasgow Haskell compiler: a technical overview. </title> <booktitle> In Proc. Joint Framework for Information Technology (JFIT) Technical Conference, </booktitle> <pages> pages 249-257, </pages> <address> Keele, England, </address> <month> Mar </month> <year> 1993. </year> <month> DTI/SERC. </month>
Reference: <author> S. L. Peyton Jones and J. Launchbury. </author> <title> Unboxed values as first class citizens in a non-strict functional language. </title>
Reference: <editor> In R. J. M. Hughes, editor, </editor> <booktitle> 5th Functional programming languages and computer architecture, </booktitle> <volume> LNCS 523, </volume> <pages> pages 636-666, </pages> <address> Cambridge, Massachusetts, Sep 1991. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference-contexts: 1 Introduction At the Dagstuhl Workshop on Applications of Functional Programming in the Real World in May 1994 (Giegerich and Hughes, 1994), several interesting applications of functional languages were presented. One of these applications, the Pseudoknot problem (Feeley et al., 1994) had been written in several languages, including C, Scheme <ref> (Rees and Clinger, 1991) </ref>, Multilisp (Halstead Jr, 1985) and Miranday (Turner, 1985). A number of workshop participants decided to test their compiler technology using this particular program. The first point of comparison is the speed of compilation and the speed of the compiled program.
Reference: <author> M. J. Plasmeijer and M. C. J. D. van Eekelen. </author> <title> Concurrent Clean version 1.0 Language Reference Manual, </title> <type> draft version. </type> <institution> Dept. of Comp. Sci, Univ. of Nijmegen, </institution> <address> The Netherlands, </address> <month> Jun </month> <year> 1994. </year> <type> 26 Hartel, </type> <institution> Feeley et al. </institution>
Reference: <author> J. E. Ranelletti. </author> <title> Graph transformation algorithms for array memory memory optimization in applicative languages. </title> <type> PhD thesis, </type> <institution> Comp. Sci. Dept, Univ. of California at Davis, California, </institution> <month> Nov </month> <year> 1987. </year>
Reference-contexts: The Sisal compiler includes special optimisations (preallocation <ref> (Ranelletti, 1987) </ref> and copy elimination (Gopinath and Hennesy, 1989)) that make safe destructive updates of data structures possible. In order to exploit this, the Sisal version of the Pseudoknot program was written so as to expose the single threaded use of some important data structures.
Reference: <author> J. A. Rees and W. Clinger. </author> <title> Revised 4 Report on the Algorithmic Language Scheme. </title> <publisher> MIT, </publisher> <address> Cambridge, Mas-sachusetts, </address> <month> Nov </month> <year> 1991. </year>
Reference-contexts: 1 Introduction At the Dagstuhl Workshop on Applications of Functional Programming in the Real World in May 1994 (Giegerich and Hughes, 1994), several interesting applications of functional languages were presented. One of these applications, the Pseudoknot problem (Feeley et al., 1994) had been written in several languages, including C, Scheme <ref> (Rees and Clinger, 1991) </ref>, Multilisp (Halstead Jr, 1985) and Miranday (Turner, 1985). A number of workshop participants decided to test their compiler technology using this particular program. The first point of comparison is the speed of compilation and the speed of the compiled program.
Reference: <author> N. Rojemo. </author> <title> Highlights from nhc a space-efficient Haskell compiler. </title> <booktitle> In 6th Functional programming languages and computer architecture, </booktitle> <pages> pages 282-292, </pages> <address> La Jolla, California, </address> <month> Jun </month> <year> 1995. </year> <booktitle> ACM, </booktitle> <address> New York. </address>
Reference: <author> W. Schulte and W. Grieskamp. </author> <title> Generating efficient portable code for a strict applicative language. </title> <editor> In J. Dar-lington and R. Dietrich, editors, </editor> <booktitle> Phoenix Seminar and Workshop on Declarative Programming, </booktitle> <pages> pages 239-252, </pages> <address> Sasbachwalden, West Germany, Nov 1991. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference: <author> M. Serrano. </author> <title> Bigloo user's manual. </title> <type> Technical report 0169, </type> <institution> INRIA-Rocquencourt, France, </institution> <month> Dec </month> <year> 1994. </year>
Reference: <author> M. Serrano and P. Weis. </author> <title> 1 + 1 = 1: an optimizing Caml compiler. </title> <booktitle> In ACM-SIGPLAN Workshop on ML and its applications, </booktitle> <pages> pages 101-111. </pages> <note> Research report 2265, </note> <institution> INRIA Rocquencourt, France, </institution> <month> Jun </month> <year> 1994. </year>
Reference: <author> Z. Shao. </author> <title> Compiling Standard ML for Efficient Execution on Modern Machines. </title> <type> PhD thesis, </type> <institution> Princeton Univ, Princeton, </institution> <address> New Jersey, </address> <month> Nov </month> <year> 1994. </year>
Reference-contexts: Since the Pseudoknot benchmark does not use polymorphism, all floating-point numbers are unboxed. This is the main reason why the Gallium compiler generates faster code than most of the other compilers. The latest version of the SML/NJ compiler (version 1.07) also supports automatic unboxing through a representation analysis <ref> (Shao, 1994) </ref>. However, unlike Caml Gallium, it does not directly exploit special load and store instructions to transfer floating-point numbers to and from the FPU. Changing this should improve the overall execution time for this compiler.
Reference: <author> S. Smetsers, E. G. J. M. H. Nocker, J. van Groningen, and M. J. Plasmeijer. </author> <title> Generating efficient code for lazy functional languages. </title> <editor> In R. J. M. Hughes, editor, </editor> <booktitle> 5th Functional programming languages and computer architecture, </booktitle> <volume> LNCS 523, </volume> <pages> pages 592-617, </pages> <address> Cambridge, Massachusetts, Sep 1991. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference: <author> G. L. Steele Jr. </author> <title> Common Lisp the Language. </title> <publisher> Digital Press, </publisher> <address> Bedford, </address> <note> second edition, </note> <year> 1990. </year>
Reference: <author> S. Thomas. </author> <title> The Pragmatics of Closure Reduction. </title> <type> PhD thesis, </type> <institution> University of Kent at Canterbury, Canterbury, UK, </institution> <year> 1993. </year>
Reference-contexts: For LML the Chalmers LML native code compiler is used, as well as a modified version that translates into a low-level intermediate form based on FLIC. After extensive optimisations <ref> (Thomas, 1993) </ref> this LML (OP-TIM) back-end generates native code.
Reference: <author> S. Thomas. </author> <title> The OP-TIM abetter PG-TIM. </title> <type> Technical report NOTTCS-TR-95-7, </type> <institution> Dept. of Comp. Sci., Univ. of Nottingham, </institution> <address> England, </address> <year> 1995. </year>
Reference: <author> S. Thompson. </author> <title> Laws in Miranda. </title> <booktitle> In Lisp and functional programming, </booktitle> <pages> pages 1-12, </pages> <address> Cambridge, Massachusetts, Aug 1986. </address> <publisher> ACM, </publisher> <address> New York. </address>
Reference-contexts: This is possible because Epic, unlike many functional languages, does not distinguish constructor symbols from defined function symbols. Consequently, laws (in the sense of Miranda: <ref> (Thompson, 1986) </ref>; in Epic all functions are defined by laws) can be introduced, which map specific patterns such as x 1 fl x 2 + x 3 fl x 4 , to semantically equivalent, but more efficient patterns which use a newly introduced function (i.e., inprod2 (x 1 ; x 2
Reference: <author> B. Thomsen, L. Leth, S. Prasad, T.-S. Kuo, A. Kramer, F. Knabe, and A. Giacalone. </author> <title> Facile antigua release - programming guide. </title> <type> Technical report ECRC-93-20, </type> <institution> European Computer-Industry Research Centre, Munich, </institution> <note> Germany (The reference manual and license agreement are available by anonymous ftp from ftp.ecrc.de.), </note> <year> 1993. </year>
Reference: <author> D. A. Turner. Miranda: </author> <title> A non-strict functional language with polymorphic types. </title> <editor> In J.-P. Jouannaud, editor, </editor> <booktitle> 2nd Functional programming languages and computer architecture, </booktitle> <volume> LNCS 201, </volume> <pages> pages 1-16, </pages> <address> Nancy, France, Sep 1985. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference-contexts: One of these applications, the Pseudoknot problem (Feeley et al., 1994) had been written in several languages, including C, Scheme (Rees and Clinger, 1991), Multilisp (Halstead Jr, 1985) and Miranday <ref> (Turner, 1985) </ref>. A number of workshop participants decided to test their compiler technology using this particular program. The first point of comparison is the speed of compilation and the speed of the compiled program.
Reference: <author> D. A. Turner. </author> <title> Miranda system manual. </title> <institution> Research Software Ltd, </institution> <address> 23 St Augustines Road, Canterbury, Kent CT1 1XP, England, </address> <month> Apr </month> <year> 1990. </year>
Reference: <author> P. L. Wadler. </author> <title> Deforestation: transforming programs to eliminate trees. </title> <journal> Theoretical Computer Science, </journal> <volume> 73(2) </volume> <pages> 231-248, </pages> <year> 1990. </year>
Reference-contexts: Merging the three nested function calls that collectively produce the maximum value of a function applied to a list of arguments allows the compiler to determine that the current maximum value can always be held in a register (an extreme form of deforestation <ref> (Wadler, 1990) </ref>). When this transformation is applied to the Haskell source, the total execution time is reduced to 1.8 seconds user time (still on machine 16).
Reference: <author> H. R. Walters and J. F. Th. Kamperman. </author> <title> Epic: Implementing language processors by equational programs. </title> <note> Technical report in preparation, </note> <institution> Centrum voor Wiskunde en Informatica, </institution> <address> Amsterdam, The Netherlands, </address> <year> 1995. </year>
Reference: <author> P. Weis and X. Leroy. </author> <title> Le langage Caml. </title> <publisher> Inter Editions, </publisher> <year> 1993. </year>
Reference: <author> E. P. Wentworth. </author> <title> Code generation for a lazy functional language. </title> <type> Technical report 91/19, </type> <institution> Dept. of Comp. Sci, Rhodes Univ., </institution> <month> Dec </month> <year> 1991. </year>
Reference: <author> E. P. Wentworth. </author> <title> RUFL reference manual. </title> <type> Technical report 92/1, </type> <institution> Dept. of Comp. Sci, Rhodes Univ., </institution> <month> Jan </month> <year> 1992. </year>
References-found: 57

