URL: file://ftp.cis.upenn.edu/pub/libby/aaaiss94.ps.Z
Refering-URL: http://www.cis.upenn.edu/~hms/publications.html
Root-URL: 
Email: flibby@linc badler@centralg.cis.upenn.edu  
Title: How Animated Agents Perform Tasks: Connecting Planning and Manipulation Through Object-Specific Reasoning for Human Modeling
Author: Libby Levison Norman I. Badler 
Keyword: Object Manipulation, Motion Planning, Animation, Tools  
Address: Philadelphia, PA 19104-6389  
Affiliation: Center  Department of Computer and Information Science University of Pennsylvania,  
Abstract: Creating animations of a human figure performing a task requires that the agent interact with objects in the environment in a realistic way. Agent-object interaction is not completely specified from a task description alone. In this paper we sketch an architecture for the Object-Specific Reasoner (OSR), an intermediate planning module which tailors high-level plans to the specifics of the agent and objects. As plans are elaborated, the OSR generates a sequence of motion directives which are ultimately executed by a simulator. Descriptions of failures can be used to identify possible tools for the agent to use. An Object-Specific Reasoner is necessary in a system which allows an agent, equipped with a set of action behaviors, to interact in a semi autonomous fashion with the world. 
Abstract-found: 1
Intro-found: 1
Reference: [All84] <author> James F. Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23 </volume> <pages> 123-154, </pages> <year> 1984. </year>
Reference-contexts: Each step is sensitive to the type of its object: expanding an action outline implies interpreting each of its steps in terms of the object. The process continues until sets of OSR-motions have been substituted for all action outlines. Action outlines may specify temporal ordering constraints on the motions <ref> [All84] </ref>. The third stage (Object Instantiator) binds parameters of the OSR-motions based on information about the specific object instance. This is also the stage at which OSR-motion specific parameters (such as grasp-site, grip-type or approach-vector) must be supplied.
Reference: [BB93] <author> Welton Becket and Norman I. Badler. </author> <title> Integrated behavioral agent architecture. </title> <booktitle> Conference on Computer Generated Forces and Behavior Representation, </booktitle> <year> 1993. </year>
Reference-contexts: Finally, agent and object motion simulation, and perceptual requests about the current state of the world will be handled through the Behavioral Simulator <ref> [BB93] </ref>. The Behavioral Simulator is, in essence, an operating-system, as it manages both agent and control resources, thus allowing for simultaneous motions. The language is similar to McDermott's RPL [McD90], with an emphasis on managing a behavioral mechanism [Bec94].
Reference: [Bec94] <author> Welton Becket. </author> <title> The Jack LISP API. </title> <type> Technical Report MC-CIS-94-01, </type> <institution> University of Pennsylvania, </institution> <year> 1994. </year>
Reference-contexts: The Behavioral Simulator is, in essence, an operating-system, as it manages both agent and control resources, thus allowing for simultaneous motions. The language is similar to McDermott's RPL [McD90], with an emphasis on managing a behavioral mechanism <ref> [Bec94] </ref>. ItPlanS, Search Plans and the OSR are integrated into the SodaJack system [GLM94].
Reference: [BPW93] <author> Norman I. Badler, Cary B. Phillips, and Bonnie L. Webber. </author> <title> Simulating Humans: Computer Graphics Animation and Control. </title> <publisher> Oxford University Press, </publisher> <year> 1993. </year>
Reference-contexts: We are building the Object Specific Reasoner (OSR), which is implemented in the SodaJack system, which itself is part of the AnimNL Project (Animation from Natural Language Instructions) at the University of Pennsylvania <ref> [BPW93, WBD + 93] </ref>. The goal of the AnimNL project is to generate realistic animations of human figures carrying out tasks specified through natural-language instructions. <p> The language is similar to McDermott's RPL [McD90], with an emphasis on managing a behavioral mechanism [Bec94]. ItPlanS, Search Plans and the OSR are integrated into the SodaJack system [GLM94]. Built on the Jack TM software platform <ref> [BPW93] </ref>, SodaJack is named 3 We use `hand' through out this discussion, as the animated figure we work with has two hands. y Jack is a registered trademark of the University of Pennsylvania. 3 after its first domain, a soda fountain in an ice cream shop.
Reference: [Bro86] <author> Rodney Brooks. </author> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-2(1), </volume> <year> 1986. </year>
Reference-contexts: Assume that object names are uniquely identified with an object in the animation scene. 2 these task-actions basic or primitive, they are not necessarily primitive in terms of the motions which must be performed.) Below the OSR, a simulator manages motor-control issues for agents and objects. This reactive <ref> [KR90, Bro86] </ref> module provides situational knowledge to the OSR (and the high-level planner) and relieves the OSR and the high-level planner of details of motion planning and motor control.
Reference: [EBJ89] <author> Jeffery Esakov, Norman I. Badler, and M. Jung. </author> <title> An investigation of language input and performance timing for task animation. </title> <booktitle> In Graphics Interface '89, </booktitle> <pages> pages 86-93, </pages> <address> San Mateo, CA, June 1989. </address> <publisher> Morgan-Kaufmann. </publisher>
Reference-contexts: Durations are calculated from a temporal database which contains both rules to generate times for parameterized motions (such as a reach) <ref> [EBJ89] </ref> and fixed values for other motions. When the temporal information is added, task-action refinement is finished, and the motion directives can be sent to Jack for animation.
Reference: [Fir87] <author> R. James Firby. </author> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> pages 202-206, </pages> <year> 1987. </year> <month> 13 </month>
Reference-contexts: We have found few other systems developing general methods to build plans to manipulate objects: the issue is avoided either by selecting domains and tasks where manipulation is not crucial <ref> [VB90, LR90, McD93, Fir87, ZJ91] </ref>, or by concentrating on general manipulation strategies (e.g., the "peg in hole" problem) when the task is generically specified ([IJLZ88, LPMT84]). The OSR performs mid-level planning, tailoring high-level, "cognitive" plans to the specific agents and objects of the particular task-actions.
Reference: [Gei92] <author> Christopher W. </author> <title> Geib. Intentions in means-end planning. </title> <type> Technical Report MC-CIS-92-73, </type> <institution> University of Pennsylvania, </institution> <year> 1992. </year>
Reference-contexts: The OSR takes a task-action, with the object references fully resolved, and generates a set of motion directives to send to the simulator. The modules sketched above are implemented by: the Intentional Planning System (ItPlanS) <ref> [Gei92] </ref> decomposes high-level plans into task-actions, and object reference resolution and object locating is performed by Search Plans [Moo93]. Finally, agent and object motion simulation, and perceptual requests about the current state of the world will be handled through the Behavioral Simulator [BB93].
Reference: [GLM94] <author> Christopher Geib, Libby Levison, and Michael B. Moore. Sodajack: </author> <title> an architecture for agents that search for and manipulate objects, </title> <note> Submitted to AAAI, </note> <year> 1994. </year>
Reference-contexts: The language is similar to McDermott's RPL [McD90], with an emphasis on managing a behavioral mechanism [Bec94]. ItPlanS, Search Plans and the OSR are integrated into the SodaJack system <ref> [GLM94] </ref>.
Reference: [Ham86] <author> Kristian Hammond. Chef. </author> <booktitle> In Proceedings of the 5 th National Conference on Artificial Intelligence, </booktitle> <year> 1986. </year>
Reference-contexts: Adding agent-specific knowledge, and selecting agent-specific behaviors, allows the OSR to tailor a general task-action to the specific context and check its feasibility. The number of possible variations of task-actions that an agent might be asked to perform makes a strictly case-based approach (such as <ref> [Ham86] </ref>, which enumerates all possible cases) impractical.
Reference: [IJLZ88] <author> Thea Iberall, Joe Jackson, Liz Labbe, and Ralph Zampano. </author> <title> Knowledge-based prehension: Capturing human dexterity. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 82-87, </pages> <year> 1988. </year>
Reference-contexts: This is also the stage at which OSR-motion specific parameters (such as grasp-site, grip-type or approach-vector) must be supplied. Currently a knowledge base is used to determine from the OSR-motion, the object type and the intention of the task-action these additional parameters. This is similar to approaches taken by <ref> [IJLZ88, TBK87, RG91] </ref>. The fourth stage (Feasibility Checker) involves checking dependencies between the agent resources and object attributes. Each OSR-motion includes a predicate which specifies those pairs of resources and attributes to check.
Reference: [KR90] <author> Leslie Pack Kaelbling and Stanley J. Rosenschein. </author> <title> Action and planning in embedded agents. </title> <booktitle> Robotics and Autonomous Systems, </booktitle> <volume> 6 </volume> <pages> 35-48, </pages> <year> 1990. </year>
Reference-contexts: Assume that object names are uniquely identified with an object in the animation scene. 2 these task-actions basic or primitive, they are not necessarily primitive in terms of the motions which must be performed.) Below the OSR, a simulator manages motor-control issues for agents and objects. This reactive <ref> [KR90, Bro86] </ref> module provides situational knowledge to the OSR (and the high-level planner) and relieves the OSR and the high-level planner of details of motion planning and motor control.
Reference: [LPMT84] <author> Tomas Lozano-Perez, Matthew. T. Mason, and Russell H. Taylor. </author> <title> Automatic synthesis of fine-motion strategies for robots. </title> <editor> In Michael Brady and Richard Paul, editors, </editor> <booktitle> Robotics Research, </booktitle> <pages> pages 65-95. </pages> <publisher> MIT Press, </publisher> <year> 1984. </year>
Reference: [LR90] <author> John Laird and Paul Rosenbloom. </author> <title> Integrating execution, planning and learning in SOAR for external environments. </title> <booktitle> In Proceedings of the 8 th National Conference on Artificial Intelligence, </booktitle> <pages> pages 1022-1029, </pages> <year> 1990. </year>
Reference-contexts: We have found few other systems developing general methods to build plans to manipulate objects: the issue is avoided either by selecting domains and tasks where manipulation is not crucial <ref> [VB90, LR90, McD93, Fir87, ZJ91] </ref>, or by concentrating on general manipulation strategies (e.g., the "peg in hole" problem) when the task is generically specified ([IJLZ88, LPMT84]). The OSR performs mid-level planning, tailoring high-level, "cognitive" plans to the specific agents and objects of the particular task-actions.
Reference: [McD90] <author> Drew McDermott. </author> <title> Planning reactive behavior: A progress report. </title> <booktitle> In ARPA workshop, </booktitle> <pages> pages 450-4588, </pages> <year> 1990. </year>
Reference-contexts: The Behavioral Simulator is, in essence, an operating-system, as it manages both agent and control resources, thus allowing for simultaneous motions. The language is similar to McDermott's RPL <ref> [McD90] </ref>, with an emphasis on managing a behavioral mechanism [Bec94]. ItPlanS, Search Plans and the OSR are integrated into the SodaJack system [GLM94].
Reference: [McD93] <author> Drew McDermott. </author> <title> Transformational planning of reactive behavior. </title> <type> Technical Report RR-941, </type> <institution> Yale University, </institution> <year> 1993. </year>
Reference-contexts: We have found few other systems developing general methods to build plans to manipulate objects: the issue is avoided either by selecting domains and tasks where manipulation is not crucial <ref> [VB90, LR90, McD93, Fir87, ZJ91] </ref>, or by concentrating on general manipulation strategies (e.g., the "peg in hole" problem) when the task is generically specified ([IJLZ88, LPMT84]). The OSR performs mid-level planning, tailoring high-level, "cognitive" plans to the specific agents and objects of the particular task-actions.
Reference: [Moo93] <author> Michael B. Moore. </author> <title> Search plans. </title> <type> Technical Report MS-CIS-93-56, </type> <institution> University of Pennsylvania, </institution> <year> 1993. </year>
Reference-contexts: The modules sketched above are implemented by: the Intentional Planning System (ItPlanS) [Gei92] decomposes high-level plans into task-actions, and object reference resolution and object locating is performed by Search Plans <ref> [Moo93] </ref>. Finally, agent and object motion simulation, and perceptual requests about the current state of the world will be handled through the Behavioral Simulator [BB93]. The Behavioral Simulator is, in essence, an operating-system, as it manages both agent and control resources, thus allowing for simultaneous motions.
Reference: [RG91] <author> Hans Rijpkema and Michael Girard. </author> <title> Computer animation of knowledge-based human grasping. </title> <booktitle> In ACM: Computer Graphics, </booktitle> <pages> pages 339-348, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: This is also the stage at which OSR-motion specific parameters (such as grasp-site, grip-type or approach-vector) must be supplied. Currently a knowledge base is used to determine from the OSR-motion, the object type and the intention of the task-action these additional parameters. This is similar to approaches taken by <ref> [IJLZ88, TBK87, RG91] </ref>. The fourth stage (Feasibility Checker) involves checking dependencies between the agent resources and object attributes. Each OSR-motion includes a predicate which specifies those pairs of resources and attributes to check.
Reference: [SA77] <author> Roger Schank and Robert Abelson. </author> <title> Scripts, Plans, Goals and Understanding. </title> <publisher> Lawrence Erlbaum, </publisher> <address> Hillsdale, N.J., </address> <year> 1977. </year> <month> 14 </month>
Reference-contexts: This knowl-edge is stored in two knowledge bases: type information is stored in a symbolic knowledge base; token knowledge is stored in the graphics database. Action Outline: The action outline is an underspecified description of the motions to be performed; they are scripts <ref> [SA77] </ref>, but at a lower, behavior level.
Reference: [TBK87] <author> Rajko Tomovic, George A. Bekey, and Walter J. Karplus. </author> <title> A strategy for grasp synthesis with multi-fingered robot hands. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 83-89, </pages> <year> 1987. </year>
Reference-contexts: This is also the stage at which OSR-motion specific parameters (such as grasp-site, grip-type or approach-vector) must be supplied. Currently a knowledge base is used to determine from the OSR-motion, the object type and the intention of the task-action these additional parameters. This is similar to approaches taken by <ref> [IJLZ88, TBK87, RG91] </ref>. The fourth stage (Feasibility Checker) involves checking dependencies between the agent resources and object attributes. Each OSR-motion includes a predicate which specifies those pairs of resources and attributes to check.
Reference: [VB90] <author> Steven Vere and Timothy Bickmore. </author> <title> A basic agent. </title> <journal> Computational Intelligence, </journal> <volume> 6 </volume> <pages> 41-60, </pages> <year> 1990. </year>
Reference-contexts: We have found few other systems developing general methods to build plans to manipulate objects: the issue is avoided either by selecting domains and tasks where manipulation is not crucial <ref> [VB90, LR90, McD93, Fir87, ZJ91] </ref>, or by concentrating on general manipulation strategies (e.g., the "peg in hole" problem) when the task is generically specified ([IJLZ88, LPMT84]). The OSR performs mid-level planning, tailoring high-level, "cognitive" plans to the specific agents and objects of the particular task-actions.
Reference: [WBD + 93] <author> B. Webber, N. Badler, B. Di Eugenio, C. Geib, L. Levison, and M. Moore. </author> <title> Instructions, Intentions and Expectations. </title> <type> Technical Report MS-CIS-93-61, </type> <institution> University of Pennsylvania, </institution> <year> 1993. </year> <note> To appear 1994: Artificial Intelligence Journal, Special Issue on Computational Theories of Interaction and Agency. </note>
Reference-contexts: We are building the Object Specific Reasoner (OSR), which is implemented in the SodaJack system, which itself is part of the AnimNL Project (Animation from Natural Language Instructions) at the University of Pennsylvania <ref> [BPW93, WBD + 93] </ref>. The goal of the AnimNL project is to generate realistic animations of human figures carrying out tasks specified through natural-language instructions. <p> The term mediated comes from the fact that the tool mediates between the agent and the object <ref> [WBD + 93] </ref>.
Reference: [ZJ91] <author> David Zeltzer and Michael B. Johnson. </author> <title> Motor Planning: an Architecture for Specifying and Controlling the Behavior of Virtual Actors. </title> <journal> Journal of Visualization and Computer Animation, </journal> <volume> 2 </volume> <pages> 74-80, </pages> <year> 1991. </year> <month> 15 </month>
Reference-contexts: We have found few other systems developing general methods to build plans to manipulate objects: the issue is avoided either by selecting domains and tasks where manipulation is not crucial <ref> [VB90, LR90, McD93, Fir87, ZJ91] </ref>, or by concentrating on general manipulation strategies (e.g., the "peg in hole" problem) when the task is generically specified ([IJLZ88, LPMT84]). The OSR performs mid-level planning, tailoring high-level, "cognitive" plans to the specific agents and objects of the particular task-actions.
References-found: 23

