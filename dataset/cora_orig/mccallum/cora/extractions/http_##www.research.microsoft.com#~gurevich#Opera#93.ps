URL: http://www.research.microsoft.com/~gurevich/Opera/93.ps
Refering-URL: http://www.research.microsoft.com/~gurevich/annotated.html
Root-URL: http://www.research.microsoft.com
Title: On the reduction theory for average case complexity 1  
Author: Andreas Blass and Yuri Gurevich 
Abstract: This is an attempt to simplify and justify the notions of deterministic and randomized reductions, an attempt to derive these notions from (more or less) first principles. 
Abstract-found: 1
Intro-found: 1
Reference: [BCGL] <author> Shai Ben-David, Benny Chor, Oded Goldreich and Michael Luby, </author> <title> "On the Theory of Average Case Complexity", </title> <booktitle> Symposium on Theory of Computing, ACM, </booktitle> <year> 1989, </year> <pages> 204-216. </pages>
Reference-contexts: However, no randomized decision problem with a flat domain is complete unless deterministic exponential time equals nondeterministic exponential time [Gu1]. To overcome this difficulty, Levin suggested more general randomizing reduction. Versions of randomizing reduction were defined and successfully used in [VL] and <ref> [BCGL] </ref>. A simple version of randomizing reduction was defined in greater detail and proved transitive in [Gu1]. That version was too simple however, and in the second part of the paper (Section 5-6) we attempt to justify a more general version of randomizing reductions. Remark. <p> The probability P D (x) of an element x is of course the probability P D [fxg] of the set (or event ) fxg. The notion of polynomiality on average is due to Levin [Le]; it is motivated and discussed in <ref> [Jo, Gu1, BCGL, Gu2] </ref>. We have generalized this definition slightly by allowing 1 as a possible value of the function T in question. <p> If f deterministically reduces 1 to 2 and 2 is AP-time decidable then 1 is AP-time decidable. Proof. By Theorem 3.1, f satisfies the property (R2). QED Deterministic reductions were used to establish the completeness (for an appropriate class of RDPs) of some natural randomized decision problems <ref> [Le, Gu1, BCGL, Gu2] </ref>. 5. Randomizing domain reductions According to Section 3, a deterministic reduction of a domain A to a domain B is an AP-time computable almost total function f from A to B such that B dominates A with respect to f . <p> Viewing t and T as random functions, we have t = T ffi f . By Theorem 5.1, t (x) is AP. QED 11 6. Randomizing reductions of problems It turns out to be useful to weaken the correctness property of (randomizing) reductions of decision and search problems <ref> [VL, BCGL, IL] </ref>. Here is one possible definition of reductions of RDPs. Definition. Let 1 , 2 be randomized decision problems with domains A, B and characteristic functions 1 , 2 respectively. <p> Given an instance x of , repeat the a-correct procedure k times and output the majority answer (in the case of a tie, output any answer). QED Remark. The situation is even better for search problems, where one needs only one successful attempt <ref> [VL, BCGL, IL] </ref>. The inequality a &gt; 1=2 can be replaced by an inequality a &gt; 0 in the case of search problems. Theorem 6.1. If f reduces an RDP 1 to an RDP 2 and 2 is RAP-time decidable then 1 is RAP-time decidable. Proof. <p> In other words, such a repetition is a version of Turing (or truth-table) reduction, not a many-one reduction. For simplicity, we spoke about constant correctness guarantees. This restriction can and should be relaxed <ref> [VL, BCGL, IL] </ref>. We hope to address elsewhere the issues arising from this. Some randomized decision and search problems complete for RNP with respect to partially correct reductions can be found in [VL, BCGL]. Partially correct reductions play an important role in [IL]. Appendix. <p> For simplicity, we spoke about constant correctness guarantees. This restriction can and should be relaxed [VL, BCGL, IL]. We hope to address elsewhere the issues arising from this. Some randomized decision and search problems complete for RNP with respect to partially correct reductions can be found in <ref> [VL, BCGL] </ref>. Partially correct reductions play an important role in [IL]. Appendix. On deterministic domain reductions Return to the motivation of deterministic domain reductions in the beginning of Section 3. The fact that functions T were allowed to have the value 1 simplified the situation somewhat.
Reference: [Gu1] <author> Yuri Gurevich, </author> <title> "Average Case Complexity", </title> <journal> J. </journal> <note> Computer and System Sciences (a special issue on FOCS'87) to appear. </note>
Reference-contexts: In the first part of this paper (Sections 2-4), we attempt to derive a simpler version of it from (more or less) first principles. Even though that original notion of reduction, deterministic in nature, was sufficient to establish the completeness of a number of natural problems <ref> [Le, Gu1, Gu2] </ref>, it turned out to be too restrictive. Many randomized decision problems of interest are flat in the following technical sense: There exists " &gt; 0 such that the probability of any instance of sufficiently large size n is bounded from above by 2 n " . <p> However, no randomized decision problem with a flat domain is complete unless deterministic exponential time equals nondeterministic exponential time <ref> [Gu1] </ref>. To overcome this difficulty, Levin suggested more general randomizing reduction. Versions of randomizing reduction were defined and successfully used in [VL] and [BCGL]. A simple version of randomizing reduction was defined in greater detail and proved transitive in [Gu1]. <p> domain is complete unless deterministic exponential time equals nondeterministic exponential time <ref> [Gu1] </ref>. To overcome this difficulty, Levin suggested more general randomizing reduction. Versions of randomizing reduction were defined and successfully used in [VL] and [BCGL]. A simple version of randomizing reduction was defined in greater detail and proved transitive in [Gu1]. That version was too simple however, and in the second part of the paper (Section 5-6) we attempt to justify a more general version of randomizing reductions. Remark. The randomizing reductions of Section 5 can be further generalized. <p> The probability P D (x) of an element x is of course the probability P D [fxg] of the set (or event ) fxg. The notion of polynomiality on average is due to Levin [Le]; it is motivated and discussed in <ref> [Jo, Gu1, BCGL, Gu2] </ref>. We have generalized this definition slightly by allowing 1 as a possible value of the function T in question. <p> This property is desirable and consistent with the spirit of the asymptotic approach. Many complexity experts prefer to deal with instances of a fixed size. Can the definition of AP be reformulated in such terms? For a wide range of domains, the answer is yes; see <ref> [Gu1] </ref> in this connection. Definition. A partial function on a domain D is AP-time (or AP-time computable) if it is computable in time polynomial on average with respect to D. The following lemma justifies the use of more convenient size functions: Lemma 2.1. <p> Some comments related to this issue can be found in <ref> [Gu1] </ref> and [Gu2]. Definition. A domain D is uniform if elements of the same size have the same probability and P D [fx : jxj = ng] is proportional to n 1 (log n) 2 for n &gt; 1. Definition. <p> Then B dominates A, symbolically A B, if there exists an AP function g on A such that P A (x) g (x) P B (x) for all x in U . This concept was discussed in <ref> [Gu1] </ref> under the name "weak domination"; the term "domination" was restricted in [Le, Gu1] to the case when g is polynomially bounded. Notice that A B if and only if the ratio P A (x)=P B (x) is AP with respect to A. <p> Then B dominates A, symbolically A B, if there exists an AP function g on A such that P A (x) g (x) P B (x) for all x in U . This concept was discussed in [Gu1] under the name "weak domination"; the term "domination" was restricted in <ref> [Le, Gu1] </ref> to the case when g is polynomially bounded. Notice that A B if and only if the ratio P A (x)=P B (x) is AP with respect to A. It is supposed that 0=0 = 0 which is consistent with our previous convention 0 1 = 0. Example. <p> Remark. (D4) is an older definition of domination with respect to a given function; see <ref> [Gu1] </ref>. Proof. Without loss of generality, we may suppose that A coincides with its subdo-main A + comprising elements of A of positive probability. Then f is a total function. <p> To prove that (D1) implies (D2), set g (y) = [f 1 (y)]=-(y): To prove that (D2) implies (D3), notice that if (D2) holds then g ffi f witnesses that A 0 dominates A. It is obvious that (D3) implies (D4). The implication (D4) ! (R2) is proved in <ref> [Gu1] </ref> in the special case when all values of T are finite. We reduce the general case to the special case. Suppose (D4) and let 00 be an appropriate witness. Let T be an AP function on B and S (x) = T (f x). <p> Hence (D1) holds. QED 6 Remark. The proof of the implication (R2) ! (D1) does not use the fact that jf xj B is AP with respect to A. This hypothesis is used in the part of the proof of (D2) ! (R2) cited from <ref> [Gu1] </ref>. Now we are ready to define the notion of (deterministic) domain reduction. Definition. An almost total function f from a domain A to a domain B deterministically reduces A to B if it has the following two properties: Efficiency: f is AP-time with respect to A. <p> Theorem 3.2. If f deterministically reduces a domain A to a domain B and g deterministically reduces B to a domain C then g ffi f deterministically reduces A to C. Thus the deterministic reducibility relation is transitive. In essence, Theorem 3.2 is not new <ref> [Gu1] </ref>, but Theorem 3.1 allows us to give a simpler proof. Proof. To prove that C dominates A with respect to g ffi f , use Theorem 3.1. It remains to check that g ffi f is AP-time computable with respect to A. <p> If f deterministically reduces 1 to 2 and 2 is AP-time decidable then 1 is AP-time decidable. Proof. By Theorem 3.1, f satisfies the property (R2). QED Deterministic reductions were used to establish the completeness (for an appropriate class of RDPs) of some natural randomized decision problems <ref> [Le, Gu1, BCGL, Gu2] </ref>. 5. Randomizing domain reductions According to Section 3, a deterministic reduction of a domain A to a domain B is an AP-time computable almost total function f from A to B such that B dominates A with respect to f .
Reference: [Gu2] <author> Yuri Gurevich, </author> <title> "Matrix Decomposition Problem is Complete for the Average Case", </title> <booktitle> Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1990, </year> <pages> 802-811. </pages>
Reference-contexts: In the first part of this paper (Sections 2-4), we attempt to derive a simpler version of it from (more or less) first principles. Even though that original notion of reduction, deterministic in nature, was sufficient to establish the completeness of a number of natural problems <ref> [Le, Gu1, Gu2] </ref>, it turned out to be too restrictive. Many randomized decision problems of interest are flat in the following technical sense: There exists " &gt; 0 such that the probability of any instance of sufficiently large size n is bounded from above by 2 n " . <p> Remark. The randomizing reductions of Section 5 can be further generalized. Our goal is not the most general notion of reduction, but rather a simpler notion of reduc tion sufficient for most applications. 2. The notion of a domain Definition <ref> [Gu2] </ref>. A domain D is a nonempty set U D (the universe of D) of strings in some finite alphabet with a size function jxj (or jxj D ) and a probability distribution P D such that there are only finitely many elements of positive probability of any given size. <p> The probability P D (x) of an element x is of course the probability P D [fxg] of the set (or event ) fxg. The notion of polynomiality on average is due to Levin [Le]; it is motivated and discussed in <ref> [Jo, Gu1, BCGL, Gu2] </ref>. We have generalized this definition slightly by allowing 1 as a possible value of the function T in question. <p> Some comments related to this issue can be found in [Gu1] and <ref> [Gu2] </ref>. Definition. A domain D is uniform if elements of the same size have the same probability and P D [fx : jxj = ng] is proportional to n 1 (log n) 2 for n &gt; 1. Definition. <p> If f deterministically reduces 1 to 2 and 2 is AP-time decidable then 1 is AP-time decidable. Proof. By Theorem 3.1, f satisfies the property (R2). QED Deterministic reductions were used to establish the completeness (for an appropriate class of RDPs) of some natural randomized decision problems <ref> [Le, Gu1, BCGL, Gu2] </ref>. 5. Randomizing domain reductions According to Section 3, a deterministic reduction of a domain A to a domain B is an AP-time computable almost total function f from A to B such that B dominates A with respect to f .
Reference: [GJ] <author> Michael R. Garey and David S. Johnson, </author> <title> "Computers and Intractability: A Guide to the Theory of NP-Completeness", </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: But this is not all. In order to discuss e.g. polynomial time algorithms, we need that instances have sizes. Ordinarily, the size of a string is its length <ref> [GJ] </ref>, but this isn't always convenient. For example, if objects of interest are graphs then one may prefer to define the size of the encoding string as the number of vertices in the graph rather than the length of the encoding string. Definition.
Reference: [IL] <author> Russel Impagliazzo and Leonid A. Levin, </author> <title> "No Better Ways to Generate Hard NP Instances than Picking Uniformly at Random", </title> <booktitle> Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1990, </year> <pages> 812-821. </pages>
Reference-contexts: Viewing t and T as random functions, we have t = T ffi f . By Theorem 5.1, t (x) is AP. QED 11 6. Randomizing reductions of problems It turns out to be useful to weaken the correctness property of (randomizing) reductions of decision and search problems <ref> [VL, BCGL, IL] </ref>. Here is one possible definition of reductions of RDPs. Definition. Let 1 , 2 be randomized decision problems with domains A, B and characteristic functions 1 , 2 respectively. <p> Given an instance x of , repeat the a-correct procedure k times and output the majority answer (in the case of a tie, output any answer). QED Remark. The situation is even better for search problems, where one needs only one successful attempt <ref> [VL, BCGL, IL] </ref>. The inequality a &gt; 1=2 can be replaced by an inequality a &gt; 0 in the case of search problems. Theorem 6.1. If f reduces an RDP 1 to an RDP 2 and 2 is RAP-time decidable then 1 is RAP-time decidable. Proof. <p> In other words, such a repetition is a version of Turing (or truth-table) reduction, not a many-one reduction. For simplicity, we spoke about constant correctness guarantees. This restriction can and should be relaxed <ref> [VL, BCGL, IL] </ref>. We hope to address elsewhere the issues arising from this. Some randomized decision and search problems complete for RNP with respect to partially correct reductions can be found in [VL, BCGL]. Partially correct reductions play an important role in [IL]. Appendix. <p> This restriction can and should be relaxed [VL, BCGL, IL]. We hope to address elsewhere the issues arising from this. Some randomized decision and search problems complete for RNP with respect to partially correct reductions can be found in [VL, BCGL]. Partially correct reductions play an important role in <ref> [IL] </ref>. Appendix. On deterministic domain reductions Return to the motivation of deterministic domain reductions in the beginning of Section 3. The fact that functions T were allowed to have the value 1 simplified the situation somewhat. It enabled us to derive (R0) from (R2).
Reference: [Le] <author> Leonid A. Levin, </author> <title> "Average Case Complete Problems", </title> <journal> SIAM Journal of Computing, </journal> <year> 1986. </year>
Reference-contexts: In the first part of this paper (Sections 2-4), we attempt to derive a simpler version of it from (more or less) first principles. Even though that original notion of reduction, deterministic in nature, was sufficient to establish the completeness of a number of natural problems <ref> [Le, Gu1, Gu2] </ref>, it turned out to be too restrictive. Many randomized decision problems of interest are flat in the following technical sense: There exists " &gt; 0 such that the probability of any instance of sufficiently large size n is bounded from above by 2 n " . <p> The probability P D (x) of an element x is of course the probability P D [fxg] of the set (or event ) fxg. The notion of polynomiality on average is due to Levin <ref> [Le] </ref>; it is motivated and discussed in [Jo, Gu1, BCGL, Gu2]. We have generalized this definition slightly by allowing 1 as a possible value of the function T in question. <p> Then B dominates A, symbolically A B, if there exists an AP function g on A such that P A (x) g (x) P B (x) for all x in U . This concept was discussed in [Gu1] under the name "weak domination"; the term "domination" was restricted in <ref> [Le, Gu1] </ref> to the case when g is polynomially bounded. Notice that A B if and only if the ratio P A (x)=P B (x) is AP with respect to A. It is supposed that 0=0 = 0 which is consistent with our previous convention 0 1 = 0. Example. <p> It is easy to check that the two domains dominate each other. This would not be true if the default probability of n were n 2 as in <ref> [Le] </ref>. Lemma 3.1 [Gu 1, Section 1]. Let A and B be two domains with the same universe U such that A B. For every function T from U to R + , if T is AP with respect to B then it is AP with respect to A. Definition. <p> If f deterministically reduces 1 to 2 and 2 is AP-time decidable then 1 is AP-time decidable. Proof. By Theorem 3.1, f satisfies the property (R2). QED Deterministic reductions were used to establish the completeness (for an appropriate class of RDPs) of some natural randomized decision problems <ref> [Le, Gu1, BCGL, Gu2] </ref>. 5. Randomizing domain reductions According to Section 3, a deterministic reduction of a domain A to a domain B is an AP-time computable almost total function f from A to B such that B dominates A with respect to f .
Reference: [VL] <author> Ramarathnam Venkatesan and Leonid Levin, </author> " <title> Random Instances of a Graph Coloring Problem are Hard", </title> <booktitle> Symposium on Theory of Computing, ACM, </booktitle> <year> 1988, </year> <pages> 217-222. </pages>
Reference-contexts: However, no randomized decision problem with a flat domain is complete unless deterministic exponential time equals nondeterministic exponential time [Gu1]. To overcome this difficulty, Levin suggested more general randomizing reduction. Versions of randomizing reduction were defined and successfully used in <ref> [VL] </ref> and [BCGL]. A simple version of randomizing reduction was defined in greater detail and proved transitive in [Gu1]. That version was too simple however, and in the second part of the paper (Section 5-6) we attempt to justify a more general version of randomizing reductions. Remark. <p> Viewing t and T as random functions, we have t = T ffi f . By Theorem 5.1, t (x) is AP. QED 11 6. Randomizing reductions of problems It turns out to be useful to weaken the correctness property of (randomizing) reductions of decision and search problems <ref> [VL, BCGL, IL] </ref>. Here is one possible definition of reductions of RDPs. Definition. Let 1 , 2 be randomized decision problems with domains A, B and characteristic functions 1 , 2 respectively. <p> Given an instance x of , repeat the a-correct procedure k times and output the majority answer (in the case of a tie, output any answer). QED Remark. The situation is even better for search problems, where one needs only one successful attempt <ref> [VL, BCGL, IL] </ref>. The inequality a &gt; 1=2 can be replaced by an inequality a &gt; 0 in the case of search problems. Theorem 6.1. If f reduces an RDP 1 to an RDP 2 and 2 is RAP-time decidable then 1 is RAP-time decidable. Proof. <p> In other words, such a repetition is a version of Turing (or truth-table) reduction, not a many-one reduction. For simplicity, we spoke about constant correctness guarantees. This restriction can and should be relaxed <ref> [VL, BCGL, IL] </ref>. We hope to address elsewhere the issues arising from this. Some randomized decision and search problems complete for RNP with respect to partially correct reductions can be found in [VL, BCGL]. Partially correct reductions play an important role in [IL]. Appendix. <p> For simplicity, we spoke about constant correctness guarantees. This restriction can and should be relaxed [VL, BCGL, IL]. We hope to address elsewhere the issues arising from this. Some randomized decision and search problems complete for RNP with respect to partially correct reductions can be found in <ref> [VL, BCGL] </ref>. Partially correct reductions play an important role in [IL]. Appendix. On deterministic domain reductions Return to the motivation of deterministic domain reductions in the beginning of Section 3. The fact that functions T were allowed to have the value 1 simplified the situation somewhat.
References-found: 7

