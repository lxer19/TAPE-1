URL: http://www.eecs.berkeley.edu/~tah/Publications/the_expressive_power_of_clocks.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/the_expressive_power_of_clocks.html
Root-URL: 
Email: (tahjpkpkjhoward)@cs.cornell.edu  
Title: The Expressive Power of Clocks  
Author: Thomas A. Henzinger Peter W. Kopke Howard Wong-Toi 
Address: Ithaca, NY 14853  
Affiliation: Computer Science Department Cornell University,  
Abstract: We investigate the expressive power of timing restrictions on labeled transition systems. In particular, we show how constraints on clock variables together with a uniform liveness condition | the divergence of time | can express Buchi, Muller, Streett, Rabin, and weak and strong fairness conditions on a given labeled transition system. We then consider the effect, on both timed and time-abstract expressiveness, of varying the following parameters: time domain (discrete or dense), number of clocks, number of states, and size of constants used in timing restrictions.
Abstract-found: 1
Intro-found: 1
Reference: [ACH94] <author> R. Alur, C. Courcoubetis, and T.A. Henzinger. </author> <title> The observational power of clocks. </title> <editor> In B. Jonsson and J. Parrow, editors, </editor> <booktitle> CONCUR 94: Concurrency Theory, Lecture Notes in Computer Science 836, </booktitle> <pages> pages 162-177. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: On the other hand, for any fixed number of states, increasing the number of clocks does increase expressive power. Two-way timed automata are studied in [AH92a]. An infinite hierarchy of timed expressiveness is obtained, based upon the number of alternations. Clock hierarchies of a different nature are studied in <ref> [ACH94] </ref>.
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction We study the expressive power of labeled transition systems with clocks, so-called timed safety automata [HNSY94]. Timed safety automata are timed automata <ref> [AD94] </ref> without acceptance conditions; their liveness is imposed uniformly as a progress condition on time. Timed safety automata have been used extensively for the specification and verification of real-time systems [AH93b, DOY94, HNSY94, HK94]. <p> Timed expressiveness. The timed language of a timed safety automaton is limit-closed [HNSY94], and therefore the timed expressiveness of timed safety automata is strictly less than that of timed automata <ref> [AD94] </ref>. In dense time, for any natural number k, there are timed languages that are accepted by a timed safety automaton with k + 1 clocks, but not by any timed safety automaton with k clocks. We thus obtain an infinite hierarchy of dense-time languages. <p> Third, in either time domain, the class of untimed languages accepted by timed safety automata is the class of !-regular languages. This is because every timed safety automaton A = (S; A; !; S 0 ) has a finite bisimulation <ref> [AD94] </ref>. Let h be the largest constant appearing in the clock constraints of T . Define an equivalence relation h on the set V C T of clock valuations by - h iff for every clock constraint ' containing no constant greater than h, -(') = ('). <p> Every divergent execution of (A; T ) corresponds naturally to a run of Reg (A; T ) T satisfying B, and vice versa. The region automaton is the main tool for the analysis of timed safety automata <ref> [AD94] </ref>.
Reference: [AH92a] <author> R. Alur and T.A. Henzinger. </author> <title> Back to the future: towards a theory of timed regular languages. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 177-186. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: In contrast with dense time, however, a single discrete-time clock suffices to accept any limit-closed timed !-regular language. On the other hand, for any fixed number of states, increasing the number of clocks does increase expressive power. Two-way timed automata are studied in <ref> [AH92a] </ref>. An infinite hierarchy of timed expressiveness is obtained, based upon the number of alternations. Clock hierarchies of a different nature are studied in [ACH94].
Reference: [AH92b] <author> R. Alur and T.A. Henzinger. </author> <title> Logics and models of real time: a survey. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 74-106. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: We thus obtain an infinite hierarchy of dense-time languages. In discrete time, the timed languages that are accepted by timed safety automata are precisely the limit-closed timed !-regular languages <ref> [AH92b, AH93a] </ref>. In contrast with dense time, however, a single discrete-time clock suffices to accept any limit-closed timed !-regular language. On the other hand, for any fixed number of states, increasing the number of clocks does increase expressive power. Two-way timed automata are studied in [AH92a]. <p> Second, in the discrete time domain, the set of timed languages accepted by timed safety automata is the class of limit-closed timed !-regular languages <ref> [AH92b, AH93a] </ref>. Third, in either time domain, the class of untimed languages accepted by timed safety automata is the class of !-regular languages. This is because every timed safety automaton A = (S; A; !; S 0 ) has a finite bisimulation [AD94].
Reference: [AH93a] <author> R. Alur and T.A. Henzinger. </author> <title> Real-time logics: complexity and expressiveness. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 35-77, </pages> <year> 1993. </year>
Reference-contexts: We thus obtain an infinite hierarchy of dense-time languages. In discrete time, the timed languages that are accepted by timed safety automata are precisely the limit-closed timed !-regular languages <ref> [AH92b, AH93a] </ref>. In contrast with dense time, however, a single discrete-time clock suffices to accept any limit-closed timed !-regular language. On the other hand, for any fixed number of states, increasing the number of clocks does increase expressive power. Two-way timed automata are studied in [AH92a]. <p> Second, in the discrete time domain, the set of timed languages accepted by timed safety automata is the class of limit-closed timed !-regular languages <ref> [AH92b, AH93a] </ref>. Third, in either time domain, the class of untimed languages accepted by timed safety automata is the class of !-regular languages. This is because every timed safety automaton A = (S; A; !; S 0 ) has a finite bisimulation [AD94].
Reference: [AH93b] <author> R. Alur and T.A. Henzinger. </author> <title> Real-time system = discrete system + clock variables. </title> <editor> In T. Rus, editor, </editor> <booktitle> Proceedings of the First AMAST Workshop on Real-time Systems, </booktitle> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: Timed safety automata are timed automata [AD94] without acceptance conditions; their liveness is imposed uniformly as a progress condition on time. Timed safety automata have been used extensively for the specification and verification of real-time systems <ref> [AH93b, DOY94, HNSY94, HK94] </ref>. It has been argued that with the explicit consideration of time, acceptance conditions are no longer useful abstractions to enforce liveness [Hen92], and this paper corroborates that belief.
Reference: [DOY94] <author> C. Daws, A. Olivero, and S. Yovine. </author> <title> Verifying ET-LOTOS programs with KRONOS. </title> <booktitle> In Proceedings of FORTE '94, </booktitle> <year> 1994. </year>
Reference-contexts: Timed safety automata are timed automata [AD94] without acceptance conditions; their liveness is imposed uniformly as a progress condition on time. Timed safety automata have been used extensively for the specification and verification of real-time systems <ref> [AH93b, DOY94, HNSY94, HK94] </ref>. It has been argued that with the explicit consideration of time, acceptance conditions are no longer useful abstractions to enforce liveness [Hen92], and this paper corroborates that belief.
Reference: [Hen92] <author> T.A. Henzinger. </author> <title> Sooner is safer than later. </title> <journal> Information Processing Letters, </journal> <volume> 43 </volume> <pages> 135-141, </pages> <year> 1992. </year>
Reference-contexts: Timed safety automata have been used extensively for the specification and verification of real-time systems [AH93b, DOY94, HNSY94, HK94]. It has been argued that with the explicit consideration of time, acceptance conditions are no longer useful abstractions to enforce liveness <ref> [Hen92] </ref>, and this paper corroborates that belief. We look at both the time-abstract expressive power (Section 3) and the timed expressive power (Section 4) of timed safety automata.
Reference: [HK94] <author> T.A. Henzinger and P.W. Kopke. </author> <title> Verification methods for the divergent runs of clock systems. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 351-372. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Timed safety automata are timed automata [AD94] without acceptance conditions; their liveness is imposed uniformly as a progress condition on time. Timed safety automata have been used extensively for the specification and verification of real-time systems <ref> [AH93b, DOY94, HNSY94, HK94] </ref>. It has been argued that with the explicit consideration of time, acceptance conditions are no longer useful abstractions to enforce liveness [Hen92], and this paper corroborates that belief.
Reference: [HMP92] <author> T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> What good are digital clocks? In W. </title> <editor> Kuich, editor, </editor> <booktitle> ICALP 92: Automata, Languages, and Programming, Lecture Notes in Computer Science 623, </booktitle> <pages> pages 545-558. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Some previous expressiveness results. First, if the timing condition T is closed, then the choice of time domain is irrelevant, because then [[A; T ]] N = [[A; T ]] R 0 <ref> [HMP92] </ref>. Second, in the discrete time domain, the set of timed languages accepted by timed safety automata is the class of limit-closed timed !-regular languages [AH92b, AH93a]. Third, in either time domain, the class of untimed languages accepted by timed safety automata is the class of !-regular languages.
Reference: [HNSY94] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction We study the expressive power of labeled transition systems with clocks, so-called timed safety automata <ref> [HNSY94] </ref>. Timed safety automata are timed automata [AD94] without acceptance conditions; their liveness is imposed uniformly as a progress condition on time. Timed safety automata have been used extensively for the specification and verification of real-time systems [AH93b, DOY94, HNSY94, HK94]. <p> Timed safety automata are timed automata [AD94] without acceptance conditions; their liveness is imposed uniformly as a progress condition on time. Timed safety automata have been used extensively for the specification and verification of real-time systems <ref> [AH93b, DOY94, HNSY94, HK94] </ref>. It has been argued that with the explicit consideration of time, acceptance conditions are no longer useful abstractions to enforce liveness [Hen92], and this paper corroborates that belief. <p> The same is not true for discrete time, where, surprisingly, for any fixed state-transition structure, two clocks are as expressive as any number of clocks. Timed expressiveness. The timed language of a timed safety automaton is limit-closed <ref> [HNSY94] </ref>, and therefore the timed expressiveness of timed safety automata is strictly less than that of timed automata [AD94]. <p> The timing condition T is closed if every clock constraint of every clock command (s; a; t) is closed. If A is a finite automaton, then the pair (A; T ) is called a timed safety automaton <ref> [HNSY94] </ref>. A T-timing is an infinite sequence ffi 2 T ! of time delays such that the sum i0 ffi i diverges. A T-timed word is a pair (a; ffi) where a 2 A ! is an infinite word and ffi is a T-timing.
Reference: [Tho90] <author> W. Thomas. </author> <title> Automata on infinite objects. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 133-191. </pages> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <year> 1990. </year> <month> 19 </month>
Reference-contexts: The Buchi (Muller; Rabin; Streett) languages of finite automata are the !-regular languages <ref> [Tho90] </ref>. Fairness conditions. The labeled transition system A is event-recording if for each state s 2 S there is a label a s 2 A such that t a ! s implies a = a s .
References-found: 12

