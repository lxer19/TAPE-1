URL: http://www.cs.virginia.edu/~nr/pubs/solver.ps
Refering-URL: http://www.cs.virginia.edu/~nr/
Root-URL: http://www.cs.virginia.edu
Title: A Simple Solver for Linear Equations Containing Nonlinear Operators  
Author: Norman Ramsey 
Date: November 8, 1996  
Address: 445 South St, Morristown, NJ 07960, USA  
Affiliation: Bell Communications Research  
Abstract: This paper presents a simple equation solver. The solver finds solutions for sets of linear equations extended with several nonlinear operators, including integer division and modulus, sign extension, and bit slicing. The solver uses a new technique called balancing, which can eliminate some nonlinear operators from a set of equations before applying Gaussian elimination. The solver's principal advantages are its simplicity and its ability to handle some nonlinear operators, including nonlinear functions of more than one variable. The solver is part of an application generator that provides encoding and decoding of machine instructions based on equational specifications. The solver is presented not as pseudo code but as a literate program, which guarantees that the code shown in the paper is the same code that is actually used. Using real code exposes more detail than using pseudocode, but literate-programming techniques help manage the detail. The detail should benefit readers who want to implement their own solvers based on the techniques presented here. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Borning, Alan. </author> <year> 1981 </year> <month> (October). </month> <title> The programming language aspects of ThingLab, a constraint-oriented simulation laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387. </pages> <note> 25 Derman, </note> <author> Emanuel and Christopher Van Wyk. </author> <year> 1984 </year> <month> (December). </month> <title> A simple equation solver and its application to financial modelling. </title> <journal> Software|Practice & Experience, </journal> 14(12):1169-1181. 
Reference: <author> Griswold, Ralph E. and Madge T. Griswold. </author> <year> 1990. </year> <title> The Icon Programming Language. Second edition. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall. </publisher> <editor> Guttag, John V. and James J. Horning, editors. </editor> <year> 1993. </year> <title> Larch: Languages and Tools for Formal Specification. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Icon The solver shown in this paper is written in the Icon programming language <ref> (Griswold and Griswold 1990) </ref>.
Reference: <author> With Stephen J. Garland, Kevin D. Jones, Andres Modet, </author> <note> and Jeannette M. </note>
Reference: <institution> Wing. </institution>
Reference: <author> Hoffman, Cristoph M. and Michel J. O'Donnell. </author> <year> 1982 </year> <month> (January). </month> <title> Programming with equations. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(1) </volume> <pages> 83-112. </pages>
Reference: <author> Knuth, Donald E. </author> <year> 1984. </year> <title> Literate programming. </title> <journal> The Computer Journal, </journal> <volume> 27(2) </volume> <pages> 97-111. </pages> . <year> 1986a. </year> <title> Computers & Typesetting. Volume D, METAFONT: The Program. </title> <publisher> Addison-Wesley. </publisher> . <address> 1986b. The Metafontbook. Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: The concepts and code are illustrated with example equations and balances taken from machine descriptions. A Literate Program This paper not only describes an implementation of a balancing equation solver, it is the implementation. The noweb system (Ramsey 1994) for literate programming <ref> (Knuth 1984) </ref> extracts this paper and a working implementation from a single source. This source contains the prose of the article interleaved with named "code chunks." The code chunks are written in the order best suited to describing the solver, not the order dictated by a compiler.
Reference: <author> Ladd, David A. and J. Christopher Ramming. </author> <year> 1994 </year> <month> (October). </month> <title> Two application languages in software production. </title> <booktitle> In Proceedings of the USENIX Symposium on Very High Level Languages, </booktitle> <pages> pages 169-177, </pages> <address> Santa Fe, NM. </address>
Reference: <author> Papadimitriou, Christos H. and Kenneth Steiglitz. </author> <year> 1982. </year> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Balancing is not the only way to handle bit slicing, sign extension, division, and modulus. The last part of this paper shows how to rewrite "mostly linear" equations involving these operators as integer linear programs. Although integer linear programming is an NP-complete problem <ref> (Papadimitriou and Steiglitz 1982) </ref>, there are powerful, practical methods for solving some classes of integer linear 2 programs (Pugh 1992). These methods are complex; substantial effort is needed to implement them, and sometimes even to reuse existing implementations.
Reference: <author> Pugh, William. </author> <year> 1992 </year> <month> (August). </month> <title> A practical algorithm for exact array dependence analysis. </title> <journal> Communications of the ACM, </journal> <volume> 35(8) </volume> <pages> 102-114. </pages>
Reference-contexts: The last part of this paper shows how to rewrite "mostly linear" equations involving these operators as integer linear programs. Although integer linear programming is an NP-complete problem (Papadimitriou and Steiglitz 1982), there are powerful, practical methods for solving some classes of integer linear 2 programs <ref> (Pugh 1992) </ref>. These methods are complex; substantial effort is needed to implement them, and sometimes even to reuse existing implementations.
Reference: <author> Ramsey, Norman and Mary F. Fernandez. </author> <year> 1994 </year> <month> (October). </month> <title> New Jersey Machine-Code Toolkit architecture specifications. </title> <type> Technical Report TR-470-94, </type> <institution> Department of Computer Science, Princeton University. </institution> . <year> 1995 </year> <month> (January). </month> <title> The New Jersey machine-code toolkit. </title> <booktitle> In Proceedings of the 1995 USENIX Technical Conference, </booktitle> <pages> pages 289-302, </pages> <address> New Orleans, LA. 26 Ramsey, Norman. </address> <year> 1994 </year> <month> (September). </month> <title> Literate programming simplified. </title> <journal> IEEE Software, </journal> <volume> 11(5) </volume> <pages> 97-105. </pages>
Reference-contexts: The concepts and code are illustrated with example equations and balances taken from machine descriptions. A Literate Program This paper not only describes an implementation of a balancing equation solver, it is the implementation. The noweb system <ref> (Ramsey 1994) </ref> for literate programming (Knuth 1984) extracts this paper and a working implementation from a single source. <p> details of Icon that are needed to understand the solver are explained as they are encountered. 4 EQUATIONS WITH NONLINEAR OPERATORS To illustrate the techniques involved in balancing nonlinear operators, I have taken equations and operators from the description of the MIPS R3000 architecture in the New Jersey Machine-Code Toolkit <ref> (Ramsey and Fernandez 1994) </ref>. The nonlinear operators used to describe machine code include widening (sign extension), narrowing, bit slicing, and integer division and modulus. The first three operate on a two's-complement representation of integers.
Reference: <author> Sutherland, Ivan. </author> <year> 1963. </year> <title> Sketchpad: A Man-Machine Graphical Communication System. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <address> Cambridge, Mass. </address>
Reference: <author> Van Wyk, Christopher J. </author> <year> 1992 </year> <month> (June). </month> <title> Arithmetic equality constraints as C++ statements. </title> <journal> Software|Practice & Experience, </journal> <volume> 22(6) </volume> <pages> 467-494. 27 </pages>
References-found: 12

