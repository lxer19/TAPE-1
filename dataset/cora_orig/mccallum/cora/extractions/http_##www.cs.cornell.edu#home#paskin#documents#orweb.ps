URL: http://www.cs.cornell.edu/home/paskin/documents/orweb.ps
Refering-URL: 
Root-URL: 
Email: paskin@cs.cornell.edu  praveen@cs.cornell.edu  
Title: Object-Relational Databases on the WWW: Design and Implementation  
Author: Mark Paskin Praveen Seshadri 
Date: 100  
Note: Submission Number:  
Affiliation: Cornell University  Cornell University  
Abstract: Novel design issues arise when building an object-relational database application in a Web-based environment. The database server's support for extensible and complex data types leads to challenges that do not ordinarily arise in simple DBMS/WWW interfaces. We describe how these challenges have been addressed in the Predator OR-DBMS. Specifically, we consider 
Abstract-found: 1
Intro-found: 1
Reference: [AMM96] <author> G.O. Arocena, A.O. Mendelzon, and G.A. Mihaila. </author> <title> Applications of a Web Query Language. </title> <booktitle> In Sixth International World-Wide-Web Conference, </booktitle> <year> 1996. </year> <month> 22 </month>
Reference-contexts: In the database field, there has been recent work dealing with the connection between databases and the Web. This falls into two broad categories: supporting Web data within a database (the area of semi-structured databases) [Sem97], and using database query languages to perform Web search or management (eg. WebSQL <ref> [AMM96] </ref>). Our work is orthogonal to these areas of research. 7.2 Current Directions This paper discusses design and implementation issues that arise in OR-DBMS/Web interaction. Specifically, we consider the impact of type extensibility, large objects and expensive methods. We are currently expanding our study of efficient mechanisms to perform callbacks.
Reference: [Cha96] <author> Don Chamberlin. </author> <title> Using the New DB2. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year>
Reference-contexts: Such a module is commonly called a datablade [Inf96], extender <ref> [Cha96] </ref>, or cartridge [Ora97]. The 17 18 module provides code that tells the server how to store, retrieve and manipulate objects of the new type.
Reference: [CK97] <author> Michael J. Carey and Donald Kossman. </author> <title> On Saying 'Enough Already' in SQL. </title> <booktitle> In Proceedings of ACM SIGMOD '97 International Conference on Management of Data, </booktitle> <address> Tucson, AZ, </address> <pages> pages 219-230, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: This approach is motivated by the principle that the initial response time for queries should be very small. This principle has led to current interest in optimizing queries to produce the first small subset of answer tuples quickly <ref> [CK97] </ref>. In such schemes, the query processing (or result transfer) is suspended until the user explicitly requests more tuples. We characterize this as horizontal suspension of query processing.
Reference: [FC94] <author> M.J. Franklin and M. Carey. </author> <title> Client-Server Caching Revisited. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1994. </year> <editor> Editors: Ozsu, Valduriez, </editor> <publisher> Dayal. </publisher>
Reference-contexts: Predator has primarily been used for research into efficient techniques for the support of complex data types [SLR97]. It has a client-server architecture; clients are expected to acquire queries, ship them to the server, and display the returned results. Such an architecture has been called query-shipping <ref> [FC94] </ref>, and is becoming increasingly important in today's environment of "thin" clients and "fat" servers. Recently, we have started building large-scale applications using Predator. A demonstration of some applications was presented at SIGMOD 97 [SP97]. More recently, a web-based conference management system for this conference was built on Predator. <p> Specifically, we consider the impact of type extensibility, large objects and expensive methods. We are currently expanding our study of efficient mechanisms to perform callbacks. In the process, we intend to use the extensive existing work on client-server caching <ref> [FC94] </ref>. We also hope to pay further emphasis to the issue of security, which we have not addressed in this paper. We are also beginning to extend the database query processing engine with components written in Java.
Reference: [FJK96] <author> M.J. Franklin, B. Jonsson, and D. Kossmann. </author> <title> Performance Tradeoffs for Client-Server Query Processing. </title> <booktitle> In Proceedings of ACM SIGMOD '96 International Conference on Management of Data, </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: We are also beginning to extend the database query processing engine with components written in Java. This will allow components of the query execution plan to migrate from the server to the client. This would be the ideal environment to implement some recent research results on client-side query processing <ref> [FJK96] </ref>. We have also started studying the effect of suspended computation in query processing; the presence of expensive functions does not necessarily mean that they will ever be executed. In a companion paper [GSvE97], we study the dual problem: mechanisms for secure database server extensibility in a Web environment.
Reference: [GSvE97] <author> Mike Godfrey, Praveen Seshadri, and Thorsten von Eicken. </author> <title> Secure and Portable Database Extensibility. </title> <note> Submitted to SIGMOD 98, </note> <year> 1997. </year>
Reference-contexts: This would be the ideal environment to implement some recent research results on client-side query processing [FJK96]. We have also started studying the effect of suspended computation in query processing; the presence of expensive functions does not necessarily mean that they will ever be executed. In a companion paper <ref> [GSvE97] </ref>, we study the dual problem: mechanisms for secure database server extensibility in a Web environment. Our goal is a comprehensive understanding of the design and implementation issues involved in building object-relational database applications on the Web.
Reference: [HCF97] <author> G. Hamilton, R. Cattell, and M. Fisher. </author> <title> JDBC Database Access with Java. </title> <publisher> Addison Wesley, </publisher> <year> 1997. </year>
Reference-contexts: The work reported in this paper is the result of this emphasis on application development. Specifically, client libraries have been written in C++ and Java. The interfaces provided by these libraries correspond roughly in functionality to the ODBC [Mic97] and JDBC <ref> [HCF97] </ref> standard interfaces. 1.2 Experimental Setup Instead of having a single performance evaluation section, we present performance experiments at appropriate places in the paper. In all experiments, the database server ran on a Sparc 20 with 64 MB of memory, running Solaris 2.6. <p> After establishing the connection, the client applet acquires inputs from the user, sends them to the server, reads the results and displays them. Java has powerful display mechanisms, leading to rich user interfaces. Standards like JDBC <ref> [HCF97] </ref> enable the development of such client applets with a standard interface to talk to the database server. <p> Most commercial Web/RDBMS connectivity products are based on multi-level architectures with server-side extensions or middleware (eg. WebLogic's Kona [Web97], Symantec's dbAnywhere [Sym97]). The JDBC standard <ref> [HCF97] </ref> allows developers to build Java applets or applications that interact directly with database servers. MSqlJava [Msq97] is an early example of a JDBC-based two-level Web/RDBMS architecture. <p> In this section we describe how the JCL provides client-side type extensibility. 6.1 Structure of the JCL The JCL of Predator is a collection of Java classes that facilitate the development of client applications and applets. In this regard, it is similar to a JDBC <ref> [HCF97] </ref> driver for Predator , although some of the current interfaces differ slightly from JDBC. Like JDBC, common use of the JCL focuses on interaction with a Connection object, which acts as a protocol manager for a single connection to a Predator server. <p> Most of this work deals with simple relational data, and the research issues center around the minimization of invocation overhead at the HTTP server. All the large relational database vendors sell products that facilitate Web/DB connectivity using a multi-level architecture. The JDBC protocol <ref> [HCF97] </ref> establishes an important step towards two-level Java-based architectures. While the data type and callback management features of the Predator JCL are characteristic of object-relational databases, the JDBC protocol ignores such issues since it deals with access to purely relational databases with fixed type systems.
Reference: [HHW97] <author> Joseph M. Hellerstein, Peter J. Haas, and Helen J. Wang. </author> <title> Online Aggregation. </title> <booktitle> In Proceedings of ACM SIGMOD '97 International Conference on Management of Data, </booktitle> <address> Tucson, AZ, </address> <pages> pages 171-182, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: We describe some simple prefetching and caching techniques in Section 4 and evaluate their performance. Vertical suspension techniques are, necessarily, orthogonal to horizontal suspension techniques; they can be used in combination to achieve improved performance. A related technology is "online" query processing <ref> [HHW97] </ref> which aims to provide initial rough results quickly and gradually increase their accuracy over time (this is usually applied to aggregate computations). 3.1 Effect of Vertical Suspension To demonstrate the effect of vertical suspension of delivery and computation on initial query times, we chose a query similar to the second
Reference: [HM96] <author> S.P. Hadjiefthymiades and D.I. Martakos. </author> <title> Improving the performance of CGI compliant database gateways. </title> <booktitle> In Sixth International World-Wide-Web Conference, </booktitle> <year> 1996. </year>
Reference-contexts: The result of the client request is formatted by the proxy into HTML and returned to the client's browser. CGI scripts incur a process creation and connection establishment overhead which can become significant when there are several small database accesses <ref> [HM96] </ref>. This is the case in Web-based transactional systems. Further, since HTTP is a stateless protocol, it is difficult to maintain connection (or transactional) state across multiple invocations of CGI scripts. * CGI & Middleware: This approach combines CGI scripts with an extra "middleware" layer. <p> The applications built on Predator fall into both of these categories: 1. Three-level CGI scripts with HTML forms: Despite the fact that studies have shown that CGI-based applications can scale poorly in the presence of highly concurrent and cheap accesses <ref> [HM96] </ref>, this architecture is the most commonly used in current Web-based applications. Since connection establishment in Predator is relatively inexpensive compared to query processing, we chose not to use a middleware layer. 2. <p> Such additional information can include transfer parameters, resolution requests, etc. 21 7 Conclusion 7.1 Related Work There has been much recent work that discusses the interface between databases and Web browsers <ref> [HM96] </ref>. Most of this work deals with simple relational data, and the research issues center around the minimization of invocation overhead at the HTTP server. All the large relational database vendors sell products that facilitate Web/DB connectivity using a multi-level architecture.
Reference: [Inf96] <author> Informix Software, Inc. </author> <title> Informix and Illustra Merge to Form Universal Server. </title> <type> Informix White Paper, </type> <note> http://www.informix.com/informix/corpinfo/zines/whitpprs/illustra/ifxillus.htm, February 1996. </note>
Reference-contexts: Such a module is commonly called a datablade <ref> [Inf96] </ref>, extender [Cha96], or cartridge [Ora97]. The 17 18 module provides code that tells the server how to store, retrieve and manipulate objects of the new type.
Reference: [Mic97] <institution> Microsoft ODBC Web Page. </institution> <note> http://www.windows.com/data/odbc/, 1997. </note>
Reference-contexts: The work reported in this paper is the result of this emphasis on application development. Specifically, client libraries have been written in C++ and Java. The interfaces provided by these libraries correspond roughly in functionality to the ODBC <ref> [Mic97] </ref> and JDBC [HCF97] standard interfaces. 1.2 Experimental Setup Instead of having a single performance evaluation section, we present performance experiments at appropriate places in the paper. In all experiments, the database server ran on a Sparc 20 with 64 MB of memory, running Solaris 2.6.
Reference: [Mim97] <institution> Multi-Purpose Internet Mail Extensions. </institution> <note> http://www.internic.net, 1997. Internet RFCs 1522 and 1523. </note>
Reference-contexts: How do these issues relate to the choice between Java and non-Java languages for building client applications? Many common data types like image, audio, and video correspond to MIME-types <ref> [Mim97] </ref> that can be displayed by most browsers. However, for ADTs that do not readily map to MIME-types (like AVHRR satellite raster images), a custom display mechanism is needed. If the client is built in Java, it is possible to provide Java code to display the new data type.
Reference: [Msq97] <institution> MSQLJava Home Page. </institution> <note> http://www.minmet.uq.oz.au/msqljava, 1997. </note>
Reference-contexts: Most commercial Web/RDBMS connectivity products are based on multi-level architectures with server-side extensions or middleware (eg. WebLogic's Kona [Web97], Symantec's dbAnywhere [Sym97]). The JDBC standard [HCF97] allows developers to build Java applets or applications that interact directly with database servers. MSqlJava <ref> [Msq97] </ref> is an early example of a JDBC-based two-level Web/RDBMS architecture.
Reference: [Ora97] <author> Oracle Corporation. </author> <title> Introducing Oracle Universal Server. http://www.oracle.com/products/oracle7/Oracle Universal Server/, </title> <month> February </month> <year> 1997. </year>
Reference-contexts: Such a module is commonly called a datablade [Inf96], extender [Cha96], or cartridge <ref> [Ora97] </ref>. The 17 18 module provides code that tells the server how to store, retrieve and manipulate objects of the new type.
Reference: [Pre97] <institution> PREDATOR: Project Home Page. </institution> <note> http://www.cs.cornell.edu/Info/Projects/PREDATOR/, 1997. </note>
Reference-contexts: This common code is called the Java Client Library (JCL), and consists of 67 classes and about 4000 lines of code (details are presented in <ref> [Pre97] </ref>). In this section we describe how the JCL provides client-side type extensibility. 6.1 Structure of the JCL The JCL of Predator is a collection of Java classes that facilitate the development of client applications and applets.
Reference: [Pro97] <institution> Progressive Networks. </institution> <note> The RealVideo System. http://www.realvideo.com/, June 1997. </note>
Reference-contexts: One variant is to use a streaming protocol to "play" the object to the client. Objects that use streaming protocols like RealAudio <ref> [Pro97] </ref> usually have specialized Web servers that implement the server end of the protocol. We have designed interfaces in Predator so that a streaming protocol can be plugged into the database server.
Reference: [Sem97] <institution> Workshop on Management of Semistructured Data. </institution> <note> http://www.research.att.com/ suciu/workshop-announcement.html, 1997. Held in conjunction with SIGMOD 97. </note>
Reference-contexts: In the database field, there has been recent work dealing with the connection between databases and the Web. This falls into two broad categories: supporting Web data within a database (the area of semi-structured databases) <ref> [Sem97] </ref>, and using database query languages to perform Web search or management (eg. WebSQL [AMM96]). Our work is orthogonal to these areas of research. 7.2 Current Directions This paper discusses design and implementation issues that arise in OR-DBMS/Web interaction.
Reference: [SLR97] <author> Praveen Seshadri, Miron Livny, and Raghu Ramakrishnan. </author> <title> The Case for Enhanced Abstract Data Types. </title> <booktitle> In Proceedings of the Twenty Third International Conference on Very Large Databases (VLDB), </booktitle> <address> Athens, Greece, </address> <month> August </month> <year> 1997. </year> <month> 23 </month>
Reference-contexts: It is a highly-functional system, capable of supporting multiple concurrent transactions and database applications involving gigabytes of data. Predator has primarily been used for research into efficient techniques for the support of complex data types <ref> [SLR97] </ref>. It has a client-server architecture; clients are expected to acquire queries, ship them to the server, and display the returned results. Such an architecture has been called query-shipping [FC94], and is becoming increasingly important in today's environment of "thin" clients and "fat" servers.
Reference: [SP97] <author> Praveen Seshadri and Mark Paskin. </author> <title> Predator: An OR-DBMS with Enhanced Data Types, </title> <booktitle> 1997. Demonstration at SIGMOD 97. </booktitle>
Reference-contexts: Such an architecture has been called query-shipping [FC94], and is becoming increasingly important in today's environment of "thin" clients and "fat" servers. Recently, we have started building large-scale applications using Predator. A demonstration of some applications was presented at SIGMOD 97 <ref> [SP97] </ref>. More recently, a web-based conference management system for this conference was built on Predator. The work reported in this paper is the result of this emphasis on application development. Specifically, client libraries have been written in C++ and Java.
Reference: [Sym97] <institution> Symantec's dbANYWHERE Architecture versus Traditional Connectivity. </institution> <note> http://www.symantec.com/dba/wp evalnda.html, 1997. White Paper. </note>
Reference-contexts: Most commercial Web/RDBMS connectivity products are based on multi-level architectures with server-side extensions or middleware (eg. WebLogic's Kona [Web97], Symantec's dbAnywhere <ref> [Sym97] </ref>). The JDBC standard [HCF97] allows developers to build Java applets or applications that interact directly with database servers. MSqlJava [Msq97] is an early example of a JDBC-based two-level Web/RDBMS architecture.
Reference: [Web97] <author> WebLogic jdbcKona Drivers. </author> <note> http://www.weblogic.com/, 1997. 24 </note>
Reference-contexts: Most commercial Web/RDBMS connectivity products are based on multi-level architectures with server-side extensions or middleware (eg. WebLogic's Kona <ref> [Web97] </ref>, Symantec's dbAnywhere [Sym97]). The JDBC standard [HCF97] allows developers to build Java applets or applications that interact directly with database servers. MSqlJava [Msq97] is an early example of a JDBC-based two-level Web/RDBMS architecture.
References-found: 21

