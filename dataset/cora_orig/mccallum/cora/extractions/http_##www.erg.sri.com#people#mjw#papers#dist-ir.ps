URL: http://www.erg.sri.com/people/mjw/papers/dist-ir.ps
Refering-URL: http://www.erg.sri.com/people/mjw/
Root-URL: 
Email: fmjwjmarieg@erg.sri.com  
Title: Controlling Communication in Distributed Planning Using Irrelevance Reasoning overloading the communication links between planners, especially
Author: Michael Wolverton Marie desJardins 
Note: In Proceedings of the Fifteenth National Conference on Artificial Intelligence (AAAI-98). The Problem Copyright c fl1998, American Association for Artificial Intelligence (www.aaai.org). All rights reserved. By  can lead to extensive replanning when the subplans are  
Address: 333 Ravenswood Ave Menlo Park, CA 94025  
Affiliation: SRI International  
Abstract: Efficient and effective distributed planning requires careful control over how much information the planning agents broadcast to one another. Sending too little information could result in incorrect plans, while sending too much information could overtax the distributed planning system's resources (bandwidth and computational power). Ideally, distributed planning systems would have an efficient technique for filtering a large amount of irrelevant information from the message stream while retaining all the relevant messages. This paper describes an approach to controlling information distribution among planning agents using irrelevance reasoning (Levy & Sagiv 1993). In this approach, each planning agent maintains a data structure encoding the planning effects that could potentially be relevant to each of the other agents, and uses this structure to decide which of the planning effects that it generates will be sent to other agents. We describe an implementation of this approach within a distributed version of the SIPE-2 planner. Our experiments with this implementation show two important benefits of the approach: first, a noticeable speedup of the distributed planners; second|and, we argue, more importantly|a substantial reduction in message traffic. Real-world plans in modern organizations are often developed by committee, with multiple planners who are each responsible for a particular part of the plan or a specific activity within the planning process, and who cooperate to combine their results into a final integrated plan. There is a growing need for technology that supports this decentralized planning activity by providing the functionality of AI planning systems in a distributed environment. In this model, multiple planning agents are distributed across different processes and locations, perhaps each supporting a user in a mixed-initiative planning session. They cooperate to develop a single integrated plan for a joint planning problem. Each agent is assigned a collection of subgoals from the high-level goal to work on. To plan effectively, the agents must communicate with one another during the planning process. This means that a given agent must send messages to some or all of the other agents about the current state of its subplan development: what conditions are being made true or false in its current partial plan, what resources are being used, what constraints have been generated, and so forth. This communication is necessary so that the planning agents can detect and avoid potential conflicts and potential duplications of work early in the process, instead of having to replan major portions of the joint plan if the conflicts are discovered at the end of the process when the completed subplans are merged. This need for communication introduces a new problem: what exactly should the agents send to one another? More specifically, how does a planning agent, A, determine whether a given planning decision it has made is important to the problem solving of another agent, B? It cannot answer this last question precisely without actually solving B's subplan, so it must rely on a heuristic answer to a slightly different question: is the planning decision likely to be important to B's planning? The consequences for having either an overly permissive or an overly strict answer to that question are serious. If the heuristic allows too many messages to be sent|for example, by broadcasting every planning decision made by every agent to every other agent|it can quickly overburden the resources of the distributed planning system in several ways: 
Abstract-found: 1
Intro-found: 1
Reference: <author> Corkill, D. D. </author> <year> 1979. </year> <title> Hierarchical planning in a distributed environment. </title> <editor> In IJCAI-79. desJardins, M., and Wolverton, M. J. </editor> <year> 1998. </year> <title> Coordinating planning activity and information flow in a distributed planning system. </title> <editor> In desJardins, M., ed., </editor> <booktitle> AAAI Fall Symposium on Distributed Continual Planning. </booktitle> <publisher> AAAI Press Technical Report (forthcoming). </publisher>
Reference: <author> Gmytrasiewicz, P. J.; Durfee, E. H.; and Wehe, D. K. </author> <year> 1991. </year> <title> The utility of communication in coordinating intelligent agents. </title> <booktitle> In AAAI-91, </booktitle> <pages> 166-172. </pages>
Reference-contexts: However, the decision-theoretic approach, which is also used in <ref> (Gmytrasiewicz, Durfee, & Wehe 1991) </ref>, represents an interesting extension that could be layered on top of Distributed SIPE's irrelevance computation to incorporate additional decision-making factors in deciding whether and when to communicate information between planning agents.
Reference: <author> Huber, M. J., and Hadley, T. </author> <year> 1997. </year> <title> Multiple roles, multiple teams, dynamic environment: </title> <booktitle> Autonomous Netrek agents. In Autonomous Agents '97. </booktitle>
Reference: <author> Lansky, A. L., and Getoor, L. C. </author> <year> 1995. </year> <title> Scope and abstraction: Two criteria for localized planning. </title> <booktitle> In IJCAI-95. </booktitle>
Reference: <author> Lansky, A. L. </author> <year> 1994. </year> <title> Located planning with diverse plan construction methods. </title> <type> Technical Report FIA-TR-9405, </type> <institution> NASA Ames Research Center. </institution>
Reference: <author> Levesque, H. J.; Cohen, P. R.; and Nunes, J. </author> <year> 1990. </year> <title> On acting together. </title> <booktitle> In AAAI-90. </booktitle>
Reference-contexts: STEAM (Tambe 1997) is a distributed agent architecture that builds on joint intentions theory <ref> (Levesque, Cohen, & Nunes 1990) </ref> to enable coordinating agents to maintain a coherent view of the team's goals and plans. STEAM uses team operators to represent shared goals and to identify achieved, unachievable, or irrelevant goals; these in turn determine which information is potentially relevant to other agents.
Reference: <author> Levy, A. Y., and Sagiv, Y. </author> <year> 1993. </year> <title> Exploiting irrelevance reasoning to guide problem solving. </title> <note> In IJCAI-93. </note>
Reference: <author> Levy, A. Y. </author> <year> 1993. </year> <title> Irrelevance Reasoning in Knowledge Based Systems. </title> <type> Ph.D. Dissertation, </type> <institution> Computer Science Department, Stanford University. </institution>
Reference: <author> Pollack, M. E. </author> <year> 1996. </year> <title> Planning in dynamic environments: The "DIPART" system. </title> <editor> In Tate, A., ed., </editor> <title> Advanced Planning Technology: Technology Achievements of the ARPA/Rome Laboratory Planning Initiative. </title> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Corkill's implementation does interplanner constraint management at a very fine grain, and communicates all constraints that are possibly related to another planner without doing any relevance filtering, so the system entails heavy message traffic between the planners. DIPART <ref> (Pollack 1996) </ref> is a distributed, real-time planning system that focuses on issues arising in higher-level control of distributed planning (such as the load balancing of tasks). Communication among agents is primarily at this higher, task-based, level, with some support for incrementally merging subplans.
Reference: <author> Tambe, M. </author> <year> 1997. </year> <title> Agent architectures for flexible, practical teamwork. </title> <booktitle> In AAAI-97. </booktitle>
Reference-contexts: Sending Planning Total JMCAP 459 15237 15696 994 231 13631 14856 Transportation 406 877 1283 18 175 646 839 Table 2: Effect on Planning Time (in miliseconds) for automatically controlling message passing between distributed planning agents. STEAM <ref> (Tambe 1997) </ref> is a distributed agent architecture that builds on joint intentions theory (Levesque, Cohen, & Nunes 1990) to enable coordinating agents to maintain a coherent view of the team's goals and plans.
Reference: <author> Wilkins, D. E. </author> <year> 1988. </year> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kauf-mann. </publisher>
References-found: 11

