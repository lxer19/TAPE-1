URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1995/TR23.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: fkellogg,spirog@cis.ohio-state.edu.  
Title: Efficient Extraction of Imperative Computation in Constraint Logic Programs  
Author: Christopher J. Bailey-Kellogg Spiro Michaylov 
Address: 2015 Neil Avenue, Columbus, OH 43210-1277, U.S.A.,  
Affiliation: Department of Computer and Information Science, The Ohio State University, 395 Dreese Laboratory,  
Pubnum: Technical Report OSU-CISRC-5/95-TR23  
Abstract: In most Constraint Logic Programming (CLP) languages, procedures can be transformed to improve the efficiency of constraint solving for a particular set of calling patterns. In particular, it is often possible to take advantage of groundness information to replace a considerable amount of constraint solving with ground imperative computation. We present an efficient algorithm for identifying the specializations of a procedure that allow such optimization. This algorithm generates efficiently a concise representation of information flow in a procedure. This representation can be used to produce a set of calling patterns for which specialization is likely to be fruitful, together with the suitably transformed procedure for each specialization.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alan Borning. </author> <title> The programming language aspects of ThingLab, a constraint oriented simulation laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 252-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: Furthermore, chains of ground computation can result in significant performance improvement even if considerable non-ground computation is needed. Thus, we emphasize being able to optimize ground chains even when some of the variables are involved in complex non-ground constraints. Our work is also related to that of Borning <ref> [1] </ref> and Steele [20], which dealt with solving constraint networks by finding paths of ground propagation. In the work of Borning, these paths were precomputed as plans before the actual ground values were known. The impact of being able to perform such optimizations is considerable.
Reference: [2] <institution> European Computer Industry Research Centre. ECL i PS e users manual. Munich, Germany, </institution> <year> 1993. </year>
Reference-contexts: However, in most of them constraints can be solved easily and efficiently if they have a certain structure and appear in an order that allows ground values to be propagated through them. This is certainly true of CLP (R) [10], Prolog III [3], CHIP [6], ECL i PS e <ref> [2] </ref> and many others. In this paper we consider how to analyze and transform CLP programs to extract such imperative computation where it is available. Typical programs require different rearrangements to expose imperative computation for different query patterns, and some important query patterns do not permit such optimization at all.
Reference: [3] <author> Alain Colmerauer. </author> <title> An introduction to PROLOG-III. </title> <journal> Communications of the ACM, </journal> <volume> 33(7) </volume> <pages> 69-90, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: However, in most of them constraints can be solved easily and efficiently if they have a certain structure and appear in an order that allows ground values to be propagated through them. This is certainly true of CLP (R) [10], Prolog III <ref> [3] </ref>, CHIP [6], ECL i PS e [2] and many others. In this paper we consider how to analyze and transform CLP programs to extract such imperative computation where it is available.
Reference: [4] <author> M. J. Garca de la Banda and M. Hermenegildo. </author> <title> A practical approach to the global analysis of constraint logic programs. </title> <type> Technical Report UPM/DIA/CLIP/PRINCE-1/92.1.1, </type> <institution> Facultad de Informatica, Universidad Politecnica de Madrid, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: This technique is widely known as multiple specialization. Global analysis techniques for Constraint Logic Programming have been discussed by Dumortier et al [7], Garca de la Banda and Hermenegildo <ref> [4] </ref>, Jtrgensen [11], Marriott and Stndergaard [14], and others.
Reference: [5] <author> M. J. Garca de la Banda, M. Hermenegildo, and K. Marriott. </author> <title> Independence in constraint logic programs. </title> <type> Technical Report UPM/DIA/CLIP/PRINCE-1/92.2.1, </type> <institution> Facultad de Informatica, Universidad Politecnica de Madrid, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Based on such analysis, considerable work has been done on actual optimizing compilation of CLP languages, by Garca de la Banda et al <ref> [5] </ref>, Jtrgensen et al [12], Michaylov and Pippin [17, 18], MacDonald et al [13], Marriott and Stuckey [15], and others.
Reference: [6] <author> M. Dincbas, P. van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Berthier. </author> <title> The Constraint Logic Programming Language CHIP. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems FGCS-88, </booktitle> <pages> pages 693-702, </pages> <address> Tokyo, Japan, </address> <month> December </month> <year> 1988. </year> <month> 19 </month>
Reference-contexts: However, in most of them constraints can be solved easily and efficiently if they have a certain structure and appear in an order that allows ground values to be propagated through them. This is certainly true of CLP (R) [10], Prolog III [3], CHIP <ref> [6] </ref>, ECL i PS e [2] and many others. In this paper we consider how to analyze and transform CLP programs to extract such imperative computation where it is available.
Reference: [7] <author> Veroniek Dumortier, Gerda Janssens, and Maurice Bruynooghe. </author> <title> Detection of free variables in the presence of numeric constraints by means of abstract interpretation. </title> <type> Technical Report CW 145, </type> <institution> Derpartment of Computer Science, Katholieke Universiteit Leuven, Celestijnenlaan 200A - B-3001 Leuven, Belgium, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Hence we wish to generate separate code for each query class allowing significant optimization, in addition to code for the most general case. This technique is widely known as multiple specialization. Global analysis techniques for Constraint Logic Programming have been discussed by Dumortier et al <ref> [7] </ref>, Garca de la Banda and Hermenegildo [4], Jtrgensen [11], Marriott and Stndergaard [14], and others.
Reference: [8] <author> Joxan Jaffar and Jean-Louis Lassez. </author> <title> Constraint logic programming. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Principles of Programming Languages (POPL), </booktitle> <address> Munich, Germany, </address> <pages> pages 111-119. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Many Constraint Logic Programming (CLP) <ref> [8] </ref> languages incorporate complex and potentially expensive constraint solving as a basic operational step. However, in most of them constraints can be solved easily and efficiently if they have a certain structure and appear in an order that allows ground values to be propagated through them.
Reference: [9] <author> Joxan Jaffar and Michael J. Maher. </author> <title> Constraint logic programming: A survey. </title> <journal> Journal of Logic Programming, </journal> <volume> 19-20:503-581, </volume> <month> May-June </month> <year> 1994. </year>
Reference-contexts: Similar concerns apply to reordering of constraints executed using floating point arithmetic. 3 Preliminaries This section describes the preliminary ideas on which the analysis algorithms build. Familiarity with the basic concepts of Constraint Logic Programming is assumed seethe survey by Jaffar and Maher <ref> [9] </ref> for further information. The preliminary ideas include descriptions of program components and mode information.
Reference: [10] <author> Joxan Jaffar, Spiro Michaylov, Peter J. Stuckey, and Roland H. C. Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages and Systems (TOPLAS), </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: However, in most of them constraints can be solved easily and efficiently if they have a certain structure and appear in an order that allows ground values to be propagated through them. This is certainly true of CLP (R) <ref> [10] </ref>, Prolog III [3], CHIP [6], ECL i PS e [2] and many others. In this paper we consider how to analyze and transform CLP programs to extract such imperative computation where it is available. <p> Intertwined with term definitions are definitions for a number of useful functions and sets. 6 3.1 Programs While the techniques presented in this paper are applicable to a variety of constraint logic programming languages, for practical purposes the discussion is centered on CLP (R) <ref> [10] </ref>. In particular, the analysis uses a subset of CLP (R) defining rules as sequences of goals constraining arithmetic variables.
Reference: [11] <author> Niels Jtrgensen. </author> <title> Abstract Interpretation of Constraint Logic Programs. </title> <type> PhD thesis, </type> <institution> Roskilde University Center, Denmark, </institution> <year> 1992. </year>
Reference-contexts: This technique is widely known as multiple specialization. Global analysis techniques for Constraint Logic Programming have been discussed by Dumortier et al [7], Garca de la Banda and Hermenegildo [4], Jtrgensen <ref> [11] </ref>, Marriott and Stndergaard [14], and others. Based on such analysis, considerable work has been done on actual optimizing compilation of CLP languages, by Garca de la Banda et al [5], Jtrgensen et al [12], Michaylov and Pippin [17, 18], MacDonald et al [13], Marriott and Stuckey [15], and others.
Reference: [12] <author> Niels Jtrgensen, Kim Marriott, and Spiro Michaylov. </author> <title> Some global compile-time optimizations for CLP(R). </title> <editor> In Vijay Saraswat and Kazunori Ueda, editors, </editor> <booktitle> Logic Programming: Proceedings of the 1991 International Symposium, </booktitle> <pages> pages 420-434, </pages> <address> San Diego, CA, October 1991. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Based on such analysis, considerable work has been done on actual optimizing compilation of CLP languages, by Garca de la Banda et al [5], Jtrgensen et al <ref> [12] </ref>, Michaylov and Pippin [17, 18], MacDonald et al [13], Marriott and Stuckey [15], and others.
Reference: [13] <author> Andrew D. Macdonald, Peter J. Stuckey, and Roland H. C. Yap. </author> <title> Redundancy of variables in CLP(R). </title> <booktitle> In Logic Programming: Proceedings of the 1993 International Symposium, </booktitle> <pages> pages 75-93, </pages> <address> Vancouver, October 1993. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Based on such analysis, considerable work has been done on actual optimizing compilation of CLP languages, by Garca de la Banda et al [5], Jtrgensen et al [12], Michaylov and Pippin [17, 18], MacDonald et al <ref> [13] </ref>, Marriott and Stuckey [15], and others.
Reference: [14] <author> Kim Marriott and Harald Stndergaard. </author> <title> Analysis of constraint logic programs. </title> <editor> In Saumya Debray and Manuel Hermenegildo, editors, </editor> <booktitle> Proc. of the 1990 North American Conference on Logic Programming, </booktitle> <pages> pages 521-540, </pages> <address> Austin, TX, 1990. </address> <publisher> MIT Press. </publisher>
Reference-contexts: This technique is widely known as multiple specialization. Global analysis techniques for Constraint Logic Programming have been discussed by Dumortier et al [7], Garca de la Banda and Hermenegildo [4], Jtrgensen [11], Marriott and Stndergaard <ref> [14] </ref>, and others. Based on such analysis, considerable work has been done on actual optimizing compilation of CLP languages, by Garca de la Banda et al [5], Jtrgensen et al [12], Michaylov and Pippin [17, 18], MacDonald et al [13], Marriott and Stuckey [15], and others.
Reference: [15] <author> Kimbal G. Marriott and Peter J. Stuckey. </author> <title> The 3 R's of optimizing constraint logic programs: Refinement, removal and reordering. </title> <booktitle> In Proc. ACM SIGPLAN Symposium on Principles of Programming Languages (POPL), </booktitle> <address> Charleston, NC, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Based on such analysis, considerable work has been done on actual optimizing compilation of CLP languages, by Garca de la Banda et al [5], Jtrgensen et al [12], Michaylov and Pippin [17, 18], MacDonald et al [13], Marriott and Stuckey <ref> [15] </ref>, and others.
Reference: [16] <author> C. S. Mellish. </author> <title> Some global optimizations for a prolog compiler. </title> <journal> Journal of Logic Programming, </journal> <volume> 2 </volume> <pages> 43-66, </pages> <year> 1985. </year>
Reference-contexts: The work described here is much simpler in spirit and narrower in scope than most recent work on CLP optimizing compilation. In concentrating on chains of ground computation, it is closer to the work of Reddy [19] and Mellish <ref> [16] </ref> on mode inference for Prolog. However, our emphasis is different, requiring different techniques. In many cases CLP programs have a large number of simple constraints, so our approach is centered around networks of constraints in rules.
Reference: [17] <author> Spiro Michaylov. </author> <title> Repeated redundant inequalities in constraint logic programming. </title> <booktitle> In First International Conference on Constraints in Computational Logics, </booktitle> <address> Munich, </address> <month> September </month> <year> 1994. </year> <note> Also appears as Technical Report OSU-CISRC-6/94-TR31, </note> <institution> Department of Computer and Information Science, The Ohio State University. </institution>
Reference-contexts: Based on such analysis, considerable work has been done on actual optimizing compilation of CLP languages, by Garca de la Banda et al [5], Jtrgensen et al [12], Michaylov and Pippin <ref> [17, 18] </ref>, MacDonald et al [13], Marriott and Stuckey [15], and others.
Reference: [18] <author> Spiro Michaylov and Bill Pippin. </author> <title> Optimizing compilation of linear arithmetic in a class of constraint logic programs. </title> <booktitle> In International Logic Programming Symposium, </booktitle> <address> Ithaca, NY, </address> <month> November </month> <year> 1994. </year> <note> Also appears as Technical Report OSU-CISRC-8/94-TR44, </note> <institution> Department of Computer and Information Science, The Ohio State University. </institution>
Reference-contexts: Based on such analysis, considerable work has been done on actual optimizing compilation of CLP languages, by Garca de la Banda et al [5], Jtrgensen et al [12], Michaylov and Pippin <ref> [17, 18] </ref>, MacDonald et al [13], Marriott and Stuckey [15], and others.
Reference: [19] <author> Uday S. Reddy. </author> <title> Transformation of logic programs into fucntional programs. </title> <booktitle> In Proc. International Symposium on Logic Programming, </booktitle> <pages> pages 187-196, </pages> <address> Atlantic City, </address> <month> February </month> <year> 1984. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: The work described here is much simpler in spirit and narrower in scope than most recent work on CLP optimizing compilation. In concentrating on chains of ground computation, it is closer to the work of Reddy <ref> [19] </ref> and Mellish [16] on mode inference for Prolog. However, our emphasis is different, requiring different techniques. In many cases CLP programs have a large number of simple constraints, so our approach is centered around networks of constraints in rules.
Reference: [20] <author> G. L. Steele. </author> <title> The Definition and Implementation of a Computer Programming Language Based on Constraints. </title> <type> PhD thesis, </type> <institution> Dept. of Electrical Engineering and Computer Science, M.I.T., </institution> <month> August </month> <year> 1980. </year> <note> Available as technical report MIT-AI TR 595. </note>
Reference-contexts: Thus, we emphasize being able to optimize ground chains even when some of the variables are involved in complex non-ground constraints. Our work is also related to that of Borning [1] and Steele <ref> [20] </ref>, which dealt with solving constraint networks by finding paths of ground propagation. In the work of Borning, these paths were precomputed as plans before the actual ground values were known. The impact of being able to perform such optimizations is considerable.
Reference: [21] <author> William H. Winsborough. </author> <title> Multiple specialization using minimal-function graph semantics. </title> <journal> Journal of Logic Programming, </journal> <volume> 13(2-3):259-290, </volume> <month> July </month> <year> 1992. </year> <month> 20 </month>
Reference-contexts: Multiple specialization is described in detail by Winsborough <ref> [21] </ref>, who proposes powerful and general techniques to achieve it. fl This research is supported in part by the National Science Foundation Grant #CCR-9308631. mortgage (P, T, I, R, B) :- T &gt; 1, T1 = T - 1, P1 = P * I - R, mortgage (P1, T1, I, R,
References-found: 21

