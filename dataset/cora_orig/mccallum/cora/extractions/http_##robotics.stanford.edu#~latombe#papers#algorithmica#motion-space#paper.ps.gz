URL: http://robotics.stanford.edu/~latombe/papers/algorithmica/motion-space/paper.ps.gz
Refering-URL: http://robotics.stanford.edu/~latombe/projects/
Root-URL: http://www.cs.stanford.edu
Email: rwilson@kodak.com.  
Title: A General Framework for Assembly Planning: The Motion Space Approach  
Author: Dan Halperin Jean-Claude Latombe Randall H. Wilson Eastman Kodak Company 
Keyword: Key Words. Assembly planning, Assembly sequencing, Motion space, Non-directional blocking graph, Manufacturing.  
Address: Albuquerque, NM 87112-1881, USA.  
Note: Eastman Kodak Company,  
Affiliation: Tel Aviv University  Stanford University  
Abstract: Assembly planning is the problem of finding a sequence of motions to assemble a product from its parts. We present a general framework for finding assembly motions based on the concept of motion space. Assembly motions are parameterized such that each point in motion space represents a mating motion that is independent of the moving part set. For each motion we derive blocking relations that explicitly state which parts collide with other parts; each subassembly (rigid subset of parts) that does not collide with the rest of the assembly can easily be derived from the blocking relations. Motion space is partitioned into an arrangement of cells such that the blocking relations are fixed within each cell. We apply the approach to assembly motions of several useful types, including one-step translations, multi-step translations, and infinitesimal rigid motions. Several efficiency improvements are described, as well as methods to include additional assembly constraints into the framework. The resulting algorithms have been implemented and tested extensively on complex assemblies. We conclude by describing some remaining open problems. fl Department of Computer Science, Tel Aviv University, Tel Aviv 69978, Israel. halperin@math.tau.ac.il. Work on this paper by D. Halperin has been supported in part by an Alon Fellowship, by ESPRIT IV LTR Project No. 21957 (CGAL), by the USA-Israel Binational Science Foundation, by The Israel Science Foundation founded by the Israel Academy of Sciences and Humanities, and by the Hermann Minkowski - Minerva Center for Geometry at Tel Aviv University. y Department of Computer Science, Stanford University, Stanford, CA 94305, USA. latombe@cs.stanford.edu. Work on this paper by J.C. Latombe has been supported by Army MURI grant DAAH04-96-1-007. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Agarwal, M. de Berg, D. Halperin, and M. Sharir. </author> <title> Efficient generation of k-directional assembly sequences. </title> <booktitle> In Proc. 7th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 122-131, </pages> <year> 1996. </year>
Reference-contexts: If we are allowed to move the parts along k different directions (still one part at a time and each move is a single translation to infinity) then a more elaborate algorithm needs to be used <ref> [1] </ref> which runs in O (kN 4=3+" ) time. The latter algorithm has been also extended to deal with rotational motions along a small fixed set of axes, and with a slightly higher running time. For details see [1]. <p> translation to infinity) then a more elaborate algorithm needs to be used <ref> [1] </ref> which runs in O (kN 4=3+" ) time. The latter algorithm has been also extended to deal with rotational motions along a small fixed set of axes, and with a slightly higher running time. For details see [1]. The motion space approach that we present below is primarily concerned with determining one or several (or all) assembly sequences of a type, if these exist. More involved questions arise when one attempts to optimize certain cost measures of an assembly sequence. <p> In most cases @P ij and the boundary of P ij are identical; in some cases, however, @P ij is a superset of P ij 's boundary [30]. The sets @P ij for all i; j 2 <ref> [1; n] </ref>; i 6= j decompose the motion space into an arrangement of cells such that the dbg of A remains fixed over each cell. The arcs of the dbg on any cell c in this arrangement correspond exactly to the M-regions that contain c.
Reference: [2] <author> E. M. Arkin, R. Connelly, and J. S. B. . Mitchell. </author> <title> On monotone paths among obstacles, with applications to planning assemblies. </title> <booktitle> In Proc. 5th ACM Symp. on Computational Geometry, </booktitle> <pages> pages 334-343, </pages> <year> 1989. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [42]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [26]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 7, 20, 22, 29, 46] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Some were quite general and hence limited to assemblies with small part count [3]. The ndbg was introduced to avoid this combinatorial trap [39, 43]. Arkin, Connelly, and Mitchell <ref> [2] </ref> use the concept of a monotone path among obstacles to derive a polynomial-time algorithm for partitioning an assembly of polygons in the plane with a one-step translation.
Reference: [3] <author> D. F. Baldwin, T. E. Abell, M.-C. M. Lui, T. L. De Fazio, and D. E. Whitney. </author> <title> An integrated computer aid for generating and evaluating assembly sequences for mechanical products. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 7(1) </volume> <pages> 78-94, </pages> <year> 1991. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [42]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [26]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 7, 20, 22, 29, 46] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Moreover, when all parts are rigid, there is a bijection between assembly and disassembly sequences, as far as geometric constraints are concerned. (This bijection would also be broken when physics, e.g., gravity, and motion control uncertainty are taken into account.) In many planners (e.g. <ref> [3, 22] </ref>), the procedure partition is based on generate-and-test: given S, enumerate all candidate partitions fS 1 ; S 2 g of S, until a path p is found that separates S 2 from S 1 . <p> Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [7, 20]. Some were quite general and hence limited to assemblies with small part count <ref> [3] </ref>. The ndbg was introduced to avoid this combinatorial trap [39, 43]. Arkin, Connelly, and Mitchell [2] use the concept of a monotone path among obstacles to derive a polynomial-time algorithm for partitioning an assembly of polygons in the plane with a one-step translation.
Reference: [4] <author> M. de Berg. </author> <title> Ray Shooting, Depth Orders and Hidden Surface Removal, </title> <booktitle> volume 703 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1993. </year>
Reference-contexts: Such a sequence, when one exists, defines a depth order of the parts in the assembly along the direction d. Depth orders were extensively studied, mainly in relation to computer graphics <ref> [4] </ref>. A depth order for an assembly of polyhedral parts with a total of N vertices can be computed in O (N 4=3+" ), for any " &gt; 0 [6].
Reference: [5] <author> M. de Berg, L. J. Guibas, and D. Halperin. </author> <title> Vertical decompositions for triangles in 3-space. </title> <journal> Discrete Comput. Geom., </journal> <volume> 15 </volume> <pages> 35-61, </pages> <year> 1996. </year>
Reference-contexts: We construct the boundary surfaces for every M-region P ij and thus obtain the family S. The next step is to construct the arrangement induced by S. For a three-dimensional motion space, this can be done by a fairly simple algorithm <ref> [5] </ref> whose output enables us to traverse the arrangement cell by adjacent cell.
Reference: [6] <author> M. de Berg, M. Overmars, and O. Schwarzkopf. </author> <title> Computing and verifying depth orders. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23 </volume> <pages> 437-446, </pages> <year> 1994. </year>
Reference-contexts: Depth orders were extensively studied, mainly in relation to computer graphics [4]. A depth order for an assembly of polyhedral parts with a total of N vertices can be computed in O (N 4=3+" ), for any " &gt; 0 <ref> [6] </ref>. If we are allowed to move the parts along k different directions (still one part at a time and each move is a single translation to infinity) then a more elaborate algorithm needs to be used [1] which runs in O (kN 4=3+" ) time.
Reference: [7] <author> A. Delchambre and P. Gaspart. KBAP: </author> <title> An industrial prototype of knowledge-based assembly planner. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 2404-2409, </pages> <year> 1992. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [42]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [26]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 7, 20, 22, 29, 46] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Some reduced time complexity by only allowing partitioning operations in which one subassembly is a single part [20, 29, 45]. Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step <ref> [7, 20] </ref>. Some were quite general and hence limited to assemblies with small part count [3]. The ndbg was introduced to avoid this combinatorial trap [39, 43].
Reference: [8] <author> B. R. Donald. </author> <title> The complexity of planar compliant motion planning under uncertainty. </title> <journal> Algorithmica, </journal> <volume> 5 </volume> <pages> 353-382, </pages> <year> 1990. </year>
Reference-contexts: The representation of a motion planning problem in a motion space is not completely new. In motion planning with uncertainty in control and sensing, the notion of a non-directional preimage is also based on a decomposition of a motion space <ref> [8, 31] </ref>. The part-orienting technique proposed in [11] makes use of a similar decomposition. 3 The Motion Space Approach A widespread representation tool used in robot motion planning [30, 33] is configuration space.
Reference: [9] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry. </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Since a singleton in the above arrangement arises whenever five hyperplanes intersect, the arrangement contains O (k 5 ) regions. It is constructed in O (k 5 ) time <ref> [9, 10] </ref>. Constructing a dbg in any region is done in time O (k).
Reference: [10] <author> H. Edelsbrunner, R. Seidel, and M. Sharir. </author> <title> On the zone theorem for hyperplane arrangements. </title> <journal> SIAM J. Comput., </journal> <volume> 22(2) </volume> <pages> 418-429, </pages> <year> 1993. </year>
Reference-contexts: Since a singleton in the above arrangement arises whenever five hyperplanes intersect, the arrangement contains O (k 5 ) regions. It is constructed in O (k 5 ) time <ref> [9, 10] </ref>. Constructing a dbg in any region is done in time O (k).
Reference: [11] <author> K. Y. Goldberg. </author> <title> Orienting polygonal parts without sensors. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 201-225, </pages> <year> 1993. </year>
Reference-contexts: The representation of a motion planning problem in a motion space is not completely new. In motion planning with uncertainty in control and sensing, the notion of a non-directional preimage is also based on a decomposition of a motion space [8, 31]. The part-orienting technique proposed in <ref> [11] </ref> makes use of a similar decomposition. 3 The Motion Space Approach A widespread representation tool used in robot motion planning [30, 33] is configuration space.
Reference: [12] <author> M. Goldwasser. </author> <title> An implementation for maintaining arrangements of polygons. </title> <booktitle> In Proc. 11th Annual ACM Sympos. Comput. Geom., </booktitle> <pages> pages C32-C33, </pages> <year> 1995. </year> <month> 30 </month>
Reference-contexts: One of the distinguishing features of STAAT is an efficient implementation of the decomposition of S 2 induced by infinitesimal translations in 3-D <ref> [12] </ref>. The observation regarding maximally covered cells (see Section 6.2) has been exploited in an implementation of an algorithm for polyhedral assembly partitioning under infinitesimal rigid motions (translation and rotation) [16]. This implementation uses efficient linear programming to access the maximally covered cells.
Reference: [13] <author> M. Goldwasser, J.C. Latombe, and R. Motwani. </author> <title> Complexity Measures for Assembly Sequences. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pages 1581-1587, </pages> <year> 1996. </year>
Reference-contexts: More involved questions arise when one attempts to optimize certain cost measures of an assembly sequence. Recently it has been shown that several variants of cost measure optimization in assembly planning are hard, even in their approximate versions <ref> [13, 15] </ref>. We cite here one hardness result from [14], for a problem that at first glance seems very simple. We are give n pairwise interior-disjoint unit disks in the plane. <p> The goal is to minimize the number of the disks removed before the key disk can be removed. It is shown that obtaining a 2 log 1fl n -approximation to this problem is hard for any fl &gt; 0. We refer the reader to <ref> [13, 14, 15] </ref> for full technical details on this and other hardness 6 results in this area. The representation of a motion planning problem in a motion space is not completely new.
Reference: [14] <author> M. Goldwasser and R. Motwani. </author> <title> Intractability of Assembly Sequencing: Unit Disks in the Plane. </title> <booktitle> Proc. 5th Int. Workshop on Algorithms and Data Structures (WADS'97), Lecture Notes in Computer Science 1272, </booktitle> <publisher> Springer, </publisher> <address> New York, NY, </address> <pages> pages 307-320, </pages> <year> 1997. </year>
Reference-contexts: More involved questions arise when one attempts to optimize certain cost measures of an assembly sequence. Recently it has been shown that several variants of cost measure optimization in assembly planning are hard, even in their approximate versions [13, 15]. We cite here one hardness result from <ref> [14] </ref>, for a problem that at first glance seems very simple. We are give n pairwise interior-disjoint unit disks in the plane. One disk is marked as the key disk that we need to access, and we are allowed to remove disks in one-step translational motions. <p> The goal is to minimize the number of the disks removed before the key disk can be removed. It is shown that obtaining a 2 log 1fl n -approximation to this problem is hard for any fl &gt; 0. We refer the reader to <ref> [13, 14, 15] </ref> for full technical details on this and other hardness 6 results in this area. The representation of a motion planning problem in a motion space is not completely new.
Reference: [15] <author> M. Goldwasser. </author> <title> Complexity Measures for Assembly Sequencing. </title> <type> Ph.D. thesis, </type> <institution> Computer Science Dept., Stanford Univ,. Stanford, </institution> <address> CA, </address> <year> 1997. </year>
Reference-contexts: More involved questions arise when one attempts to optimize certain cost measures of an assembly sequence. Recently it has been shown that several variants of cost measure optimization in assembly planning are hard, even in their approximate versions <ref> [13, 15] </ref>. We cite here one hardness result from [14], for a problem that at first glance seems very simple. We are give n pairwise interior-disjoint unit disks in the plane. <p> The goal is to minimize the number of the disks removed before the key disk can be removed. It is shown that obtaining a 2 log 1fl n -approximation to this problem is hard for any fl &gt; 0. We refer the reader to <ref> [13, 14, 15] </ref> for full technical details on this and other hardness 6 results in this area. The representation of a motion planning problem in a motion space is not completely new.
Reference: [16] <author> L. J. Guibas, D. Halperin, H. Hirukawa, J. C. Latombe, and R. H. Wilson. </author> <title> A simple and efficient procedure for polyhedral assembly partitioning under infinitesimal motions. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pages 2553-2560, </pages> <year> 1995. </year> <note> To appear in Int. J. of Computational Geometry and Applications. </note>
Reference-contexts: We first exemplify the idea for infinitesimal translations in 3-D, and then discuss it in the context of infinitesimal translations and rotations. Full details of this approach as well as experimental results can be found in <ref> [16] </ref>. Let A be an assembly of polyhedral parts P 1 ; : : :; P n , and let (A) denote the ndbg of A for infinitesimal translations. We represent the motion space as the unit sphere S 2 in &lt; 3 . <p> For the rest of this section, and to keep our notations compatible with those in <ref> [16] </ref>, we define Q ij as the complement of P ij in M-space. Hence, Q ij is the set of all directions such that an infinitesimal translation of P i is possible without overlap with P j . <p> We call the face f 0 a maximally covered cell. Informally, a cell is maximally covered if it is covered by (or contained in) more Q-regions than any of its immediate neighbors. Being maximally covered implies that the set of dbg arcs of the cell is locally minimal. In <ref> [16] </ref> we show that it suffices to test the dbgs of maximally covered cells for strong connectivity in order to solve the partitioning problem. Note that if some Q-regions touch one another without overlapping, the maximally covered cell may not be two-dimensional. <p> The discussion of maximally covered cells so far applies to any ndbg. Although we do not know how to exploit it in arbitrary ndbgs, we have been able to make good use of it for ndbgs induced by infinitesimal motions. We have shown the following result in <ref> [16] </ref>: Given an assembly A of n polyhedral parts, the ndbg (A) of the assembly for infinitesimal motions, where any direction of motion is defined by d parameters, has at most O (K d ) maximally covered cells, where K is the number of ordered pairs of parts in contact in <p> The observation regarding maximally covered cells (see Section 6.2) has been exploited in an implementation of an algorithm for polyhedral assembly partitioning under infinitesimal rigid motions (translation and rotation) <ref> [16] </ref>. This implementation uses efficient linear programming to access the maximally covered cells. The program has been successfully run on elaborate examples, and experimental results are reported in [16]. The strong ndbg presented in Section 7 to deal with toleranced parts was implemented in an assembly planner described in [32]. <p> Section 6.2) has been exploited in an implementation of an algorithm for polyhedral assembly partitioning under infinitesimal rigid motions (translation and rotation) <ref> [16] </ref>. This implementation uses efficient linear programming to access the maximally covered cells. The program has been successfully run on elaborate examples, and experimental results are reported in [16]. The strong ndbg presented in Section 7 to deal with toleranced parts was implemented in an assembly planner described in [32]. This planner is written in C++. It was tested on several polygonal assemblies of small size.
Reference: [17] <author> L. J. Guibas and F. F. Yao. </author> <title> On translating a set of rectangles. </title> <booktitle> Proc. 12th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 154-160, </pages> <year> 1980. </year>
Reference-contexts: If general motions are accepted, there exists a monotone two-handed sequence for (b). A monotone three-handed sequence with translations only is also possible. one that requires two hands only. It has been shown in <ref> [17] </ref> that every assembly of convex polygons in the plane admits a two-handed assembly sequence of translations; but, in the worst-case, s hands are necessary and sufficient for assemblies of s star-shaped polygons/polyhedra [34]. In the rest of this paper, we will only consider two-handed assembly sequences.
Reference: [18] <author> D. Halperin and R. H. Wilson. </author> <title> Assembly partitioning along simple paths: the case of multiple translations. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pages 1585-1592, </pages> <year> 1995. </year> <note> To appear in Advanced Robotics. </note>
Reference-contexts: The resulting ndbg is a refinement of the ndbg that would have been computed if we had only computed the boundaries of the M-regions. In <ref> [18] </ref> we give a detailed account of how to compute the family S. Here we briefly demonstrate how to construct the surfaces induced by the first translation for a pair of polygonal parts P i and P j ; see Figure 7. <p> This way we obtain the contribution of the first translation to the boundary surfaces of P ij . The description of the surfaces induced by the second translation is more involved (we refer the reader to <ref> [18] </ref> for the details). We obtain these surfaces by first fixing a direction and analyzing the boundary curve for . Then we let vary and define the required surface as the union of boundary curves for all possible values. <p> The next step is to construct the arrangement induced by S. For a three-dimensional motion space, this can be done by a fairly simple algorithm [5] whose output enables us to traverse the arrangement cell by adjacent cell. In <ref> [18] </ref> we extend this approach to handle paths consisting of two or more translations in the plane. 17 6 Improved Efficiency This section describes two improvements to the efficiency of the motion space approach that apply in certain cases.
Reference: [19] <author> H. Hirukawa, T. Matsui, and K. Takase. </author> <title> Automatic determination of possible velocity and applicable force of frictionless objects in contact from a geometric model. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 10(3) </volume> <pages> 309-322, </pages> <year> 1994. </year>
Reference-contexts: The set of motions dX allowed by this contact is the intersection of all the closed half-spaces n F j J V k dX 0 computed for the vertices V k of the convex hull of the intersection of F i and F j <ref> [19, 44] </ref>. For example, in Figure 4, the vertices V k are circled.
Reference: [20] <author> R. L. Hoffman. </author> <title> Automated assembly in a CSG domain. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 210-215, </pages> <year> 1989. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [42]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [26]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 7, 20, 22, 29, 46] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Several effective planners were nevertheless built along this principle. Some reduced time complexity by only allowing partitioning operations in which one subassembly is a single part <ref> [20, 29, 45] </ref>. Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [7, 20]. Some were quite general and hence limited to assemblies with small part count [3]. <p> Some reduced time complexity by only allowing partitioning operations in which one subassembly is a single part [20, 29, 45]. Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step <ref> [7, 20] </ref>. Some were quite general and hence limited to assemblies with small part count [3]. The ndbg was introduced to avoid this combinatorial trap [39, 43].
Reference: [21] <author> L. S. Homem de Mello. </author> <title> Task Sequence Planning for Robotic Assembly. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon Univ., </institution> <year> 1989. </year>
Reference-contexts: Most often p is a simple path (e.g., a translation) that is inferred from contacts between parts <ref> [21, 46] </ref>. But even with the cutset approach the number of candidate partitions is exponential in the number of parts in S, while the number of feasible partitions is usually much smaller. Several effective planners were nevertheless built along this principle.
Reference: [22] <author> L. S. Homem de Mello and A. C. Sanderson. </author> <title> A correct and complete algorithm for the generation of mechanical assembly sequences. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 7(2) </volume> <pages> 228-240, </pages> <year> 1991. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [42]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [26]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 7, 20, 22, 29, 46] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Moreover, when all parts are rigid, there is a bijection between assembly and disassembly sequences, as far as geometric constraints are concerned. (This bijection would also be broken when physics, e.g., gravity, and motion control uncertainty are taken into account.) In many planners (e.g. <ref> [3, 22] </ref>), the procedure partition is based on generate-and-test: given S, enumerate all candidate partitions fS 1 ; S 2 g of S, until a path p is found that separates S 2 from S 1 . <p> This was supplemented by dbgs for additional directions of motion identified from feature-based part contacts, such as cylinder-cylinder and threaded contacts. The resulting one-step translations were then checked for collisions. GRASP explicitly compared ndbg-based partitioning against the cutset approach <ref> [22] </ref> for assemblies of up to 42 parts. The ndbg was somewhat faster in most tests; however, one assembly constituted a worst case for the cutset approach, which not surprisingly took a very long time to partition that assembly.
Reference: [23] <author> R. E. Jones and R. H. Wilson. </author> <title> A survey of constraints in assembly planning. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 1525-32, </pages> <year> 1996. </year>
Reference-contexts: However, assembly plans must satisfy many other constraints regarding considerations as diverse as stability, tool use, assembly line layout, supplier relationships, testing requirements, and so on <ref> [23] </ref>. Blocking constraints alone often reduce the number of feasible operations generated by the ndbg to a small number that can be tested against these additional constraints. However, in some cases a very large number of assembly operations are geometrically feasible but only a few satisfy the additional constraints. <p> two subassemblies S 1 and S 2 , neither of which is a single part, and generating the two fixtures that stabilize S 1 and S 2 is still an open problem. 8.4 Other Constraints The above constraints constitute only a sampling of the constraints commonly imposed on assembly plans <ref> [23] </ref>. In [25] we describe an approach to interactive assembly planning that provides a library of 19 additional constraint types that users can impose on assembly sequences. Of these, six are integrated into the ndbg approach to 25 avoid the inefficiencies of generate-and-test.
Reference: [24] <author> R. E. Jones and R. H. Wilson. </author> <title> An interactive assembly planning system. </title> <booktitle> In Video Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <year> 1997. </year> <month> 31 </month>
Reference-contexts: This planner is written in C++. It was tested on several polygonal assemblies of small size. Experiments with this planner show that tolerances can have profound impact on the set of feasible assembly sequences. The Archimedes computer-aided assembly planning system <ref> [24, 25] </ref> was designed to bring ndbg-based assembly sequence generation to practical use.
Reference: [25] <author> R. E. Jones, R. H. Wilson, and T. L. Calton. </author> <title> Constraint-based interactive assembly planning. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 913-20, </pages> <year> 1997. </year>
Reference-contexts: In <ref> [25] </ref> we describe an approach to interactive assembly planning that provides a library of 19 additional constraint types that users can impose on assembly sequences. Of these, six are integrated into the ndbg approach to 25 avoid the inefficiencies of generate-and-test. <p> This planner is written in C++. It was tested on several polygonal assemblies of small size. Experiments with this planner show that tolerances can have profound impact on the set of feasible assembly sequences. The Archimedes computer-aided assembly planning system <ref> [24, 25] </ref> was designed to bring ndbg-based assembly sequence generation to practical use.
Reference: [26] <author> L. E. Kavraki and M. N. Kolountzakis. </author> <title> Partitioning a planar assembly into two connected parts is NP-complete. </title> <journal> Information Processing Letters, </journal> <volume> 55(3) </volume> <pages> 159-165, </pages> <year> 1995. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [42]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations <ref> [26] </ref>. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning [2, 3, 7, 20, 22, 29, 46]. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state.
Reference: [27] <author> L. E. Kavraki, P. Svestka, J.C. Latombe, and M. Overmars. </author> <title> Probabilistic roadmaps for path planning in high-dimensional configuration spaces. </title> <journal> IEEE Tr. on Robotics and Automation, </journal> <volume> 12(4) </volume> <pages> 566-580, </pages> <year> 1996. </year>
Reference-contexts: But the number of dimensions of this space grows linearly with the number of parts in A. Though randomized path planning techniques could possibly be used in such a high-dimensional space <ref> [27] </ref>, they would not allow systematic exploration of the set of feasible assembly sequences for given families of partitioning motions. In contrast, the number of dimensions of M-space is independent of the number of parts in A. But it grows with the complexity of the allowable motions.
Reference: [28] <author> S. Khanna, R. Motwani, and R. H. Wilson. </author> <title> On certificates and lookahead in dynamic graph problems. </title> <booktitle> In Proc. 7th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 222-231, </pages> <year> 1996. </year>
Reference-contexts: Khanna et al <ref> [28] </ref> derive a more efficient algorithm to test all the dbgs for strong connectivity that is applicable in cases where the number of arcs in a blocking graph can be (n 2 ), such as in one-step translation ndbgs. <p> Preprocess the common subgraph G 0 n E for the phase by computing its transitive closure and storing the result in a subgraph H restricted to active nodes. Khanna et al <ref> [28] </ref> prove that G i is strongly connected if and only if both G 0 [ E and H i = H [ (G i " E) are strongly connected. The graph H i has at most 2K nodes, so testing its strong connectivity requires O (K 2 ) time. <p> This leads to a recursive approach with further improved running time. Using fast matrix multiplication to compute transitive 4 We will also use the notation G i somewhat loosely to mean the set of arcs of graph G i . 18 closure, <ref> [28] </ref> achieve an amortized cost of O (T (n)=n) or O (n 1:376 ) per graph tested. 6.2 Maximally Covered Cells Let (A) be an ndbg for an assembly A.
Reference: [29] <author> H. Ko and K. Lee. </author> <title> Automatic assembling procedure generation from mating conditions. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 19(1) </volume> <pages> 3-10, </pages> <year> 1987. </year>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [42]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [26]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 7, 20, 22, 29, 46] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Several effective planners were nevertheless built along this principle. Some reduced time complexity by only allowing partitioning operations in which one subassembly is a single part <ref> [20, 29, 45] </ref>. Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [7, 20]. Some were quite general and hence limited to assemblies with small part count [3].
Reference: [30] <author> J. C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer, </publisher> <year> 1991. </year>
Reference-contexts: The part-orienting technique proposed in [11] makes use of a similar decomposition. 3 The Motion Space Approach A widespread representation tool used in robot motion planning <ref> [30, 33] </ref> is configuration space. The configuration space of a given robot is the space of parametric representations of the robot configurations: every point in the configuration space defines a unique placement of the robot in the physical space. <p> In most cases @P ij and the boundary of P ij are identical; in some cases, however, @P ij is a superset of P ij 's boundary <ref> [30] </ref>. The sets @P ij for all i; j 2 [1; n]; i 6= j decompose the motion space into an arrangement of cells such that the dbg of A remains fixed over each cell. <p> Assembly planning can be seen as the problem of computing coordinated paths for the parts composing an assembly A. By treating each part as an independent moving object, this problem corresponds to generating a path in the composite configuration space of the parts <ref> [30] </ref>. But the number of dimensions of this space grows linearly with the number of parts in A. <p> If we allowed P i to be tightly inserted into P j , we would have to be more careful, since the set of positions where P i touches P j would then be a superset of the boundary of P j P i <ref> [30] </ref>. In the general case where P i and P j are non-convex polygons with q i and q j edges, respectively, the computation of P ij can easily be done in total time O (q i q j ).
Reference: [31] <author> A. Lazanas and J. C. Latombe. </author> <title> Landmark-based robot navigation. </title> <journal> Algorith-mica, </journal> <volume> 13 </volume> <pages> 472-501, </pages> <year> 1995. </year>
Reference-contexts: The representation of a motion planning problem in a motion space is not completely new. In motion planning with uncertainty in control and sensing, the notion of a non-directional preimage is also based on a decomposition of a motion space <ref> [8, 31] </ref>. The part-orienting technique proposed in [11] makes use of a similar decomposition. 3 The Motion Space Approach A widespread representation tool used in robot motion planning [30, 33] is configuration space.
Reference: [32] <author> J. C. Latombe, R. H. Wilson, and F. Cazals. </author> <title> Assembly sequencing with toler-anced parts. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 29(2) </volume> <pages> 159-174, </pages> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: Any partitioning of A that can be computed from this ndbg is guaranteed to be feasible for any geometry of the parts in A. The main novel issue here is the computation of P ij . In <ref> [32] </ref> we describe an algorithm that performs this computation in time O (r ij (q i q j + log r ij )), where q i and 21 q j are the number of edges of P i and P j , respectively, and r ij is the length of the <p> The algorithm generalizes to polyhedral assemblies; in that case, the ndbg is computed in time O ((nr) 2 q 4 log (nq)). In <ref> [32] </ref> we named the above ndbg the strong ndbg of A. <p> If no partitioning can be derived from the weak ndbg, then it is guaranteed that no assembly sequence exists whatever the geometry of the parts. The algorithm proposed to compute the weak ndbg takes time O (n 2 r (q 9 + log r)). The algorithms given in <ref> [32] </ref> assume a relatively simple tolerancing language. In particular, it allows no tolerancing on the orientation of an edge of a polygonal part or a face of a polyhedral part. <p> This implementation uses efficient linear programming to access the maximally covered cells. The program has been successfully run on elaborate examples, and experimental results are reported in [16]. The strong ndbg presented in Section 7 to deal with toleranced parts was implemented in an assembly planner described in <ref> [32] </ref>. This planner is written in C++. It was tested on several polygonal assemblies of small size. Experiments with this planner show that tolerances can have profound impact on the set of feasible assembly sequences.
Reference: [33] <author> T. Lozano-Perez. </author> <title> Spatial planning: A configuration space approach. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(2):108-120, </volume> <year> 1983. </year>
Reference-contexts: The part-orienting technique proposed in [11] makes use of a similar decomposition. 3 The Motion Space Approach A widespread representation tool used in robot motion planning <ref> [30, 33] </ref> is configuration space. The configuration space of a given robot is the space of parametric representations of the robot configurations: every point in the configuration space defines a unique placement of the robot in the physical space.
Reference: [34] <author> B. K. Natarajan. </author> <title> On planning assemblies. </title> <booktitle> In Proc. 4th ACM Symp. on Computational Geometry, </booktitle> <pages> pages 299-308, </pages> <year> 1988. </year>
Reference-contexts: It has been shown in [17] that every assembly of convex polygons in the plane admits a two-handed assembly sequence of translations; but, in the worst-case, s hands are necessary and sufficient for assemblies of s star-shaped polygons/polyhedra <ref> [34] </ref>. In the rest of this paper, we will only consider two-handed assembly sequences. With the above definitions, an assembly sequence only generates subassemblies of the final assembly. Such a sequence is said to be monotone [45]. <p> When arbitrary sequences are allowed, assembly sequencing is PSPACE-hard, even when the bodies are polygons, each with a constant number of vertices <ref> [34] </ref>. When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [42]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [26].
Reference: [35] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Its convex hull is constructed in fi (v i v j log v i v j ) time <ref> [35] </ref> and has O (v i + v j ) vertices. Indeed, all the intersection vertices of F i " F j lie on edges of F i and F j , but each particular edge can contribute at most two vertices of the convex hull. <p> They calculate the M-region for a pair of parts by triangulating the faces of both polyhedra, computing the M-region for every pair of triangles, and taking their union. They use a standard line sweep <ref> [35] </ref> to construct the 2-D arrangement of regions and corresponding blocking graphs. The implementation was tested on hand-generated and random examples. Romney et al [36] reimplement and refine the methods of [39] and apply them to determine various measures of assembly complexity.
Reference: [36] <author> B. Romney, C. Godard, M. Goldwassser, and G. Ramkumar. </author> <title> An efficient system for geometric assembly sequence generation and evaluation. </title> <booktitle> In Proc. ASME Intl. Computers in Engineering Conf., </booktitle> <pages> pages 699-712, </pages> <year> 1995. </year>
Reference-contexts: They use a standard line sweep [35] to construct the 2-D arrangement of regions and corresponding blocking graphs. The implementation was tested on hand-generated and random examples. Romney et al <ref> [36] </ref> reimplement and refine the methods of [39] and apply them to determine various measures of assembly complexity. They pay particular attention to issues affecting average-case performance. <p> One very interesting application of assembly planning is computing physical measures of the "complexity" of an assembly. Assembly complexity measures include the number of hands, subassemblies, and different paths required to assemble a product, as well as other measures. We give methods to compute some complexity measures in <ref> [36, 43] </ref>. As mentioned in Section 2.2 there are several hardness proofs on computing complexity measures. However, in general the problem of efficient computation of many cost measures is open. Finally, one of the most valuable application areas of assembly planning is providing early design-for-assembly feedback on product designs.
Reference: [37] <author> B. Romney. </author> <title> On the Concurrent Design of Assembly Sequences and Fixtures. </title> <type> Ph.D. thesis, </type> <institution> Electrical Engineering Dept., Stanford Univ., Stanford, </institution> <address> CA, </address> <year> 1997. </year>
Reference-contexts: An adaptation of the ndbg to deal with fixturing has been proposed in <ref> [37] </ref>. The method in [37] models a fixture as a collection of frictionless points called fixels (for "fixture elements"). Each assembly operation in a computed assembly sequence consists of adding a single part to the subassembly built so far (initially, only the fixture). <p> An adaptation of the ndbg to deal with fixturing has been proposed in <ref> [37] </ref>. The method in [37] models a fixture as a collection of frictionless points called fixels (for "fixture elements"). Each assembly operation in a computed assembly sequence consists of adding a single part to the subassembly built so far (initially, only the fixture). <p> For every sequence eventually computed by the algorithm, the remaining set of fixels may still be redundant and can be simplified in a postprocessing step. This algorithm runs well and efficiently in practice <ref> [37] </ref>. <p> The method of Subsection 8.3 which concurrently plans an assembly sequence and generates a fixture that stabilizes all intermediate subassemblies is implemented in a system called Atlas 3 written in C. It has been successfully tested on many planar assemblies having 5 to 11 parts <ref> [37] </ref>. 10 Conclusion We have presented a general framework for assembly planning that consists of partitioning the space of possible separating paths into an arrangement of cells such that the part blocking constraints are fixed within each cell.
Reference: [38] <author> A. Schweikard and R. H. Wilson. </author> <title> Assembly sequences for polyhedra. </title> <journal> Algorith-mica, </journal> <volume> 13(6) </volume> <pages> 539-552, </pages> <year> 1995. </year> <month> 32 </month>
Reference-contexts: The ndbg was somewhat faster in most tests; however, one assembly constituted a worst case for the cutset approach, which not surprisingly took a very long time to partition that assembly. Wilson and Schweikard <ref> [38] </ref> describe experiments with an extended 3-D translational ndbg for assemblies of polyhedral parts. They calculate the M-region for a pair of parts by triangulating the faces of both polyhedra, computing the M-region for every pair of triangles, and taking their union.
Reference: [39] <author> R. H. Wilson. </author> <title> On Geometric Assembly Planning. </title> <type> PhD thesis, </type> <institution> Stanford Univ., </institution> <month> March </month> <year> 1992. </year> <note> Stanford Technical Report STAN-CS-92-1416. </note>
Reference-contexts: Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [7, 20]. Some were quite general and hence limited to assemblies with small part count [3]. The ndbg was introduced to avoid this combinatorial trap <ref> [39, 43] </ref>. Arkin, Connelly, and Mitchell [2] use the concept of a monotone path among obstacles to derive a polynomial-time algorithm for partitioning an assembly of polygons in the plane with a one-step translation. <p> If G (p) is not strongly connected, then one strong component must have no outgoing arcs, and is therefore removable along p. A straightforward computation on the strong components of G (p) yields all possible partitions of A for path p if desired <ref> [39] </ref>. <p> Thus, once a dbg has been computed, all other dbgs can be 10 computed in total time O (n 2 ) by scanning the sequence of cells in S 1 and, for each cell, modifying the dbg constructed for the previous cell <ref> [39] </ref>. The complete ndbg takes time O (n 2 (log n + q 2 )) to compute. Computing the strong components of a dbg of A takes time O (n 2 ). <p> The arrangement on S 2 is formed by O (v 2 ) arcs, hence has size O (v 4 ) and is computed in time O (v 4 ). The total ndbg (including the dbgs) is also constructed in time O (v 4 ) <ref> [39] </ref>. Each dbg has O (n 2 ) arcs, so that finding its strong components takes time O (n 2 ). Hence, partition has complexity O (n 2 v 4 ). 4.3 Infinitesimal Motions in 3-D The direction of a one-step motion is given by a unit vector in 6-D. <p> If it is, then we are done. If A n S is not connected, then it consists of a number of connected components C i . Choose any connected component C 1 of A n S. We prove in <ref> [39] </ref> that the partitioning (A n C 1 ; C 1 ) is feasible in G and that both C 1 and A n C 1 are connected. Furthermore, [39] shows how to generate all removable subassemblies under the connected subassembly constraint. <p> Choose any connected component C 1 of A n S. We prove in <ref> [39] </ref> that the partitioning (A n C 1 ; C 1 ) is feasible in G and that both C 1 and A n C 1 are connected. Furthermore, [39] shows how to generate all removable subassemblies under the connected subassembly constraint. <p> Some of these were part of experimental assembly planning systems, while others were stand-alone implementations. In this section we give brief descriptions and pointers to those implementations and corresponding experiments. The ndbg was initially implemented in the assembly planner GRASP, described in <ref> [39, 43] </ref>. GRASP implemented an infinitesimal translation ndbg in 3-D for polyhedral parts, including the connected subassemblies extension of Subsection 8.1. Its implementation was simple but inefficient. <p> They use a standard line sweep [35] to construct the 2-D arrangement of regions and corresponding blocking graphs. The implementation was tested on hand-generated and random examples. Romney et al [36] reimplement and refine the methods of <ref> [39] </ref> and apply them to determine various measures of assembly complexity. They pay particular attention to issues affecting average-case performance. Their program, STAAT, explicitly constructs an ndbg for infinitesimal translations on the unit sphere, resulting in a much smaller set of translation directions to analyze than GRASP analyzes.
Reference: [40] <author> R. H. Wilson. </author> <title> A framework for geometric reasoning about tools in assembly. </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 1837-44, </pages> <year> 1996. </year>
Reference-contexts: Then applying the standard partitioning algorithm to the modified (S) will generate exactly those partitionings (S 1 ; S 2 ) such that the tools required to mate S 1 with S 2 are feasible. We give more detail on these methods in <ref> [40, 41] </ref>, including feasibility predicates F (S) for geometric access of a variety of mechanical assembly tools and methods to amortize the cost of computing the predicates over many invocations in assembly planning.
Reference: [41] <author> R. H. Wilson. </author> <title> Geometric reasoning about assembly tools. </title> <type> Technical Report SAND95-2423, </type> <institution> Sandia National Labs, </institution> <year> 1996. </year> <note> Submitted to Artificial Intelligence. </note>
Reference-contexts: Let a post-tool be an assembly tool that is applied after the corresponding parts are mated; the great majority of common assembly tools are post-tools <ref> [41] </ref>. Examples of post-tools include welders, screwdrivers, wrenches, and most inspection and measurement operations. The ndbg framework can be extended in a simple way to ensure post-tool access. We assume that a feasibility predicate F (S) determines whether a given post-tool can be applied in subassembly S. <p> Then applying the standard partitioning algorithm to the modified (S) will generate exactly those partitionings (S 1 ; S 2 ) such that the tools required to mate S 1 with S 2 are feasible. We give more detail on these methods in <ref> [40, 41] </ref>, including feasibility predicates F (S) for geometric access of a variety of mechanical assembly tools and methods to amortize the cost of computing the predicates over many invocations in assembly planning.
Reference: [42] <author> R. H. Wilson, L. Kavraki, T. Lozano-Perez, and J. C. Latombe. </author> <title> Two-handed assembly sequencing. </title> <journal> Intl. J. of Robotics Research, </journal> <volume> 14(4) </volume> <pages> 335-350, </pages> <year> 1995. </year>
Reference-contexts: When arbitrary sequences are allowed, assembly sequencing is PSPACE-hard, even when the bodies are polygons, each with a constant number of vertices [34]. When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete <ref> [42] </ref>. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [26]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning [2, 3, 7, 20, 22, 29, 46].
Reference: [43] <author> R. H. Wilson and J. C. Latombe. </author> <title> Geometric reasoning about mechanical assembly. </title> <journal> Artificial Intelligence, </journal> <volume> 71(2) </volume> <pages> 371-396, </pages> <year> 1994. </year>
Reference-contexts: Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [7, 20]. Some were quite general and hence limited to assemblies with small part count [3]. The ndbg was introduced to avoid this combinatorial trap <ref> [39, 43] </ref>. Arkin, Connelly, and Mitchell [2] use the concept of a monotone path among obstacles to derive a polynomial-time algorithm for partitioning an assembly of polygons in the plane with a one-step translation. <p> Some of these were part of experimental assembly planning systems, while others were stand-alone implementations. In this section we give brief descriptions and pointers to those implementations and corresponding experiments. The ndbg was initially implemented in the assembly planner GRASP, described in <ref> [39, 43] </ref>. GRASP implemented an infinitesimal translation ndbg in 3-D for polyhedral parts, including the connected subassemblies extension of Subsection 8.1. Its implementation was simple but inefficient. <p> One very interesting application of assembly planning is computing physical measures of the "complexity" of an assembly. Assembly complexity measures include the number of hands, subassemblies, and different paths required to assemble a product, as well as other measures. We give methods to compute some complexity measures in <ref> [36, 43] </ref>. As mentioned in Section 2.2 there are several hardness proofs on computing complexity measures. However, in general the problem of efficient computation of many cost measures is open. Finally, one of the most valuable application areas of assembly planning is providing early design-for-assembly feedback on product designs.
Reference: [44] <author> R. H. Wilson and T. Matsui. </author> <title> Partitioning an assembly for infinitesimal motions in translation and rotation. </title> <booktitle> In Proc. Intl. Conf. on Intelligent Robots and Systems, </booktitle> <pages> pages 1311-1318, </pages> <year> 1992. </year>
Reference-contexts: The set of motions dX allowed by this contact is the intersection of all the closed half-spaces n F j J V k dX 0 computed for the vertices V k of the convex hull of the intersection of F i and F j <ref> [19, 44] </ref>. For example, in Figure 4, the vertices V k are circled. <p> For infinitesimal motions in 3-D, the dimension of the motion space is 5. The 20 maximally covered cells approach leads to significant savings over the best previously known algorithm <ref> [44] </ref> to solve this partitioning problem. In addition, the algorithm is based on linear programming techniques and hence simpler to implement robustly than the arrangement computations required by most ndbgs.
Reference: [45] <author> J. D. Wolter. </author> <title> On the Automatic Generation of Plans for Mechanical Assembly. </title> <type> PhD thesis, </type> <institution> Univ. of Michigan, </institution> <year> 1988. </year>
Reference-contexts: In the rest of this paper, we will only consider two-handed assembly sequences. With the above definitions, an assembly sequence only generates subassemblies of the final assembly. Such a sequence is said to be monotone <ref> [45] </ref>. A more general assembly sequence is one in which some operation brings a body to an intermediate placement (relative to other bodies), before another operation transfers it to its final placement. See Figure 1. Such a sequence is called non-monotone. <p> Several effective planners were nevertheless built along this principle. Some reduced time complexity by only allowing partitioning operations in which one subassembly is a single part <ref> [20, 29, 45] </ref>. Others incorporated heuristics, for example, to drastically reduce the number of separating motions considered by the planner at each partitioning step [7, 20]. Some were quite general and hence limited to assemblies with small part count [3].
Reference: [46] <author> T. C. Woo and D. Dutta. </author> <title> Automatic disassembly and total ordering in three dimensions. </title> <journal> J. of Engineering for Industry, </journal> <volume> 113(2) </volume> <pages> 207-213, </pages> <year> 1991. </year> <month> 33 </month>
Reference-contexts: When only two-handed monotone sequences are permitted, deciding if an assembly can be partitioned into two subassemblies by an arbitrary motion is NP-complete [42]. The problem remains NP-complete when motions are restricted to multi-step translations and other variations [26]. The assembly-by-disassembly strategy prevails throughout the literature on assembly planning <ref> [2, 3, 7, 20, 22, 29, 46] </ref>. It is motivated by the observation that a product in its assembled state exhibits far more constraints on its components than in its disassembled state. These constraints drastically reduce the range of assembly motions which a planner must consider. <p> Most often p is a simple path (e.g., a translation) that is inferred from contacts between parts <ref> [21, 46] </ref>. But even with the cutset approach the number of candidate partitions is exponential in the number of parts in S, while the number of feasible partitions is usually much smaller. Several effective planners were nevertheless built along this principle.
References-found: 46

