URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/96-014.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Email: fkumar,manocha,garrett,ling@cs.unc.edu  
Title: Hierarchical Back-Face Culling  
Author: Subodh Kumar Dinesh Manocha Bill Garrett Ming Lin 
Keyword: CR Categories and Subject Descriptors: I.3.3 [Computer Graphics]: Picture/Image Generation Display algorithms; I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling, Rendering.  
Address: Chapel Hill NC 27599 USA  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: We present a sub-linear algorithm for computing and culling back-facing polygons that yields a significant performance improvement in the interactive rendering of large polygonal models. The algorithm partitions a polygonal model it into hierarchical clusters based on the normals and positions of the polygons. It does not explicitly compute all the back-facing polygons but rather decides, in expected constant time, whether an entire cluster is back-facing. As a pre-processing step, the algorithm partitions the space into regions with respect to each cluster. During rendering, it exploits frame-to-frame coherence to track the view-point. The algorithm has been applied to a number of models and its performance is a function of number of clusters, the depth of the hierarchies, and the characteristics of the graphics system. In practice, we are able to cull 30 55% of the polygons in about 5 10% of the total CPU time per frame on an SGI Indigo2 Extreme for models composed of tens of thousands of polygons. It improves the overall frame rate by 30 70% as compared to hardware back-face culling. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Airey, J. Rohlf, and F. Brooks. </author> <title> Towards image realism with interactive update rates in complex virtual building environments. </title> <booktitle> In Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 41-50, </pages> <year> 1990. </year> <month> 17 </month>
Reference-contexts: Obscuration Culling: These techniques are used on scenes with high depth complexity and are based on hidden-surface removal methods and occlusion culling [6]. These include techniques based on partitioning the model into cells and portals and computing the partial visibility set (PVS) of polygons from each cell <ref> [1, 19, 20] </ref>. They have been successfully applied to architectural models and used to speed-up global visibility algorithms for illumination computation. A hierarchical Z-buffer algorithm combining spatial and temporal coherence with hierarchical structures has been presented in [9].
Reference: [2] <author> B. Barber, D. Dobkin, and H. Huhdanpaa. </author> <title> The quickhull algorithm for convex hull. </title> <type> Technical Report GCG53, </type> <institution> The Geometry Center, MN, </institution> <year> 1993. </year>
Reference-contexts: Convex Hull: The convex hull of a set of points is the smallest convex set containing those points. A number of algorithms are known in the literature to compute the algorithms in 2-D and 3-D [12]. In our application, we use the Quickhull algorithm for computing convex hulls <ref> [2] </ref>. Its robust implementation is available as part of the Qhull public domain package. Linear Programming: Geometrically, linear programming amounts to the following: given a set H of half-spaces and a vector W, compute a vertex v, in the common intersection of 5 half-spaces, that minimizes v W.
Reference: [3] <author> M. Bern, D. Dobkin, D. Eppstein, and R. Grossman. </author> <title> Visibility with a moving point of view. </title> <journal> Algorithmica, </journal> <volume> 11 </volume> <pages> 360-78, </pages> <year> 1994. </year>
Reference-contexts: A number of algorithms have been proposed based on spatial partitioning, hierarchical representations, Z-buffer, list-priority, scan-line, area-subdivision and polygon clusters [6, 17]. It is still an active area of research in computational geometry, where many theoretically efficient algorithms have been proposed <ref> [3] </ref>. For models composed of tens of thousands of polygons, only Z-buffer approaches are able to give interactive performance on current graphics systems. Many non-interactive applications use binary space-partitioning (BSP) trees [7] to improve the rendering time of large static environments.
Reference: [4] <author> J.H. Clark. </author> <title> Hierarchical geometric models for visible surface algorithms. </title> <journal> Communications of the ACM, </journal> 19(10) 547-554, 1976. 
Reference-contexts: To handle such large data-sets, three kind of visibility approaches have been used along with Z-buffer: View-Frustum Culling: The technique of view-frustum culling uses spatial data structures like oct-trees and hierarchical traversals of such structures to cull out portions of the model not lying in the current view volume <ref> [4, 6] </ref>. Obscuration Culling: These techniques are used on scenes with high depth complexity and are based on hidden-surface removal methods and occlusion culling [6].
Reference: [5] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Fast detection of polyhedral intersection. </title> <booktitle> In Proc. 9th Internat. Colloq. Automata Lang. Program., volume 140 of Lecture Notes in Computer Science, </booktitle> <pages> pages 154-165. </pages> <publisher> Springer-Verlag, </publisher> <year> 1982. </year>
Reference-contexts: As a result, any point location query can take time proportional to the number of bounding planes, which is O (m); m being the number of polygons in the cluster. In computational geometry literature, algorithms with logarithmic asymptotic complexity are known for point location in convex sets <ref> [5] </ref>. However, their space requirements and constant factors are rather high. In this section, we present a simple algorithm to decompose BackRegion, F rontRegion and MixedRegion into Query cells. Each Query cell is a convex regions bounded by three planes.
Reference: [6] <author> J. Foley, A. Van Dam, J. Hughes, and S. </author> <title> Feiner. </title> <booktitle> Computer Graphics: Principles and Practice. </booktitle> <publisher> Addison Wesley, </publisher> <address> Reading, Mass., </address> <year> 1990. </year>
Reference-contexts: If the polygons are not part of a polyhedron or if the polyhedra have missing or clipped faces, back-facing polygons can be treated specially. If culling is not desired, the simplest approach is to flip the normal and treat the polygon as front-facing <ref> [6] </ref>. The simplest algorithms for back-face culling are based on computing the dot product of the polygon normal with a vector from the view-point to any point on the polygon. The complexity of these standard algorithms is linear in the number of polygons. <p> In the early days of image synthesis a central geometric problem was visible surface computation. A number of algorithms have been proposed based on spatial partitioning, hierarchical representations, Z-buffer, list-priority, scan-line, area-subdivision and polygon clusters <ref> [6, 17] </ref>. It is still an active area of research in computational geometry, where many theoretically efficient algorithms have been proposed [3]. For models composed of tens of thousands of polygons, only Z-buffer approaches are able to give interactive performance on current graphics systems. <p> To handle such large data-sets, three kind of visibility approaches have been used along with Z-buffer: View-Frustum Culling: The technique of view-frustum culling uses spatial data structures like oct-trees and hierarchical traversals of such structures to cull out portions of the model not lying in the current view volume <ref> [4, 6] </ref>. Obscuration Culling: These techniques are used on scenes with high depth complexity and are based on hidden-surface removal methods and occlusion culling [6]. <p> Obscuration Culling: These techniques are used on scenes with high depth complexity and are based on hidden-surface removal methods and occlusion culling <ref> [6] </ref>. These include techniques based on partitioning the model into cells and portals and computing the partial visibility set (PVS) of polygons from each cell [1, 19, 20]. They have been successfully applied to architectural models and used to speed-up global visibility algorithms for illumination computation.
Reference: [7] <author> H. Fuchs, Z. Kedem, and B. Naylor. </author> <title> On visible surface generation by a priori tree structures. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <volume> volume 14, </volume> <pages> pages 124-133, </pages> <year> 1980. </year>
Reference-contexts: For models composed of tens of thousands of polygons, only Z-buffer approaches are able to give interactive performance on current graphics systems. Many non-interactive applications use binary space-partitioning (BSP) trees <ref> [7] </ref> to improve the rendering time of large static environments. There is also significant amount of literature on the use of polygon clusters in visibility computations. Schumaker had earlier proposed them in [14] and Newell had used them as well [11].
Reference: [8] <author> Z. Gigus, J. Canny, and R. Seidel. </author> <title> Efficiently computing and representing aspect graphs of polyhedral objects. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 13(6) </volume> <pages> 542-551, </pages> <year> 1991. </year>
Reference-contexts: The fastest known algorithms currently used for computing a complete description of the interocclusion due to a polyhedral object with n vertices can take up to O (n 6 log n) time <ref> [8] </ref>. 3 Definitions and Algorithm Overview For a polygon, P i , in R 3 , let the equation of the plane containing P i be a i x + b i y + c i z = d i .
Reference: [9] <author> N. Greene, M. Kass, and G. Miller. </author> <title> Hierarchical z-buffer visibility. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 231-238, </pages> <year> 1993. </year>
Reference-contexts: They have been successfully applied to architectural models and used to speed-up global visibility algorithms for illumination computation. A hierarchical Z-buffer algorithm combining spatial and temporal coherence with hierarchical structures has been presented in <ref> [9] </ref>. It cleverly exploits different types of coherence and can achieve several orders of magnitudes of acceleration compared with traditional techniques. Back-face Culling: Back-face culling is a particular form of occlusion culling used on solid models that can be easily combined with other visibility culling methods.
Reference: [10] <author> S. Kumar, D. Manocha, and A. Lastra. </author> <title> Interactive display of large scale nurbs models. </title> <booktitle> In Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pages 51-58, </pages> <year> 1995. </year>
Reference-contexts: Back-face Culling: Back-face culling is a particular form of occlusion culling used on solid models that can be easily combined with other visibility culling methods. It has recently been extended to spline patches by computing a bound on the normals and Gauss map of a patch <ref> [10, 16] </ref>. The current implementations, however, take time linear in the number of polygons. Some techniques have been proposed to speed it up. Tanimoto [18] proposed a graph-theoretic approach that incrementally computes the silhouettes of a convex polytope using frame-to-frame coherence.
Reference: [11] <author> M. Newell, R. Newell, and T. Sancha. </author> <title> A new solution to the hidden surface problem. </title> <booktitle> Proc. ACM Ann. Conf., </booktitle> <pages> pages 443-448, </pages> <year> 1972. </year>
Reference-contexts: Many non-interactive applications use binary space-partitioning (BSP) trees [7] to improve the rendering time of large static environments. There is also significant amount of literature on the use of polygon clusters in visibility computations. Schumaker had earlier proposed them in [14] and Newell had used them as well <ref> [11] </ref>. The BSP tree algorithm is also based on the fact that environments can be viewed as being composed of clusters. Finally, coherence has been a key characterization of most visibility algorithms.
Reference: [12] <author> F.P. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: We review them here. More details are given in <ref> [12] </ref>. Convex Hull: The convex hull of a set of points is the smallest convex set containing those points. A number of algorithms are known in the literature to compute the algorithms in 2-D and 3-D [12]. In our application, we use the Quickhull algorithm for computing convex hulls [2]. <p> We review them here. More details are given in <ref> [12] </ref>. Convex Hull: The convex hull of a set of points is the smallest convex set containing those points. A number of algorithms are known in the literature to compute the algorithms in 2-D and 3-D [12]. In our application, we use the Quickhull algorithm for computing convex hulls [2]. Its robust implementation is available as part of the Qhull public domain package. <p> If this common intersection is null or unbounded, no such vertex exists. To solve a linear programming problem, we use the randomized algorithm presented in [15]. A public domain implementation of this algorithm is available. Duality: Duality is powerful concept and used in a number of geometric algorithms <ref> [12] </ref>.
Reference: [13] <author> S. Rubin and T. Whitted. </author> <title> A 3-dimensional representation for fast rendering of complex scenes. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 110-116, </pages> <year> 1980. </year>
Reference: [14] <author> R. Schumacker, B. Brand, M. Gilliland, and W. Sharp. </author> <title> Study for applying computer-generated images to visual generation. </title> <type> Technical report, </type> <institution> AFHRL-TR-69-74, US Air Force Human Resources Lab, </institution> <year> 1969. </year>
Reference-contexts: Many non-interactive applications use binary space-partitioning (BSP) trees [7] to improve the rendering time of large static environments. There is also significant amount of literature on the use of polygon clusters in visibility computations. Schumaker had earlier proposed them in <ref> [14] </ref> and Newell had used them as well [11]. The BSP tree algorithm is also based on the fact that environments can be viewed as being composed of clusters. Finally, coherence has been a key characterization of most visibility algorithms.
Reference: [15] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, California, </address> <year> 1990. </year>
Reference-contexts: If this common intersection is null or unbounded, no such vertex exists. To solve a linear programming problem, we use the randomized algorithm presented in <ref> [15] </ref>. A public domain implementation of this algorithm is available. Duality: Duality is powerful concept and used in a number of geometric algorithms [12].
Reference: [16] <author> L.A. Shirman and S.S. Abi-Ezzi. </author> <title> The cone of normals technique for fast processing of curved patches. </title> <booktitle> In EUROGRAPHICS, </booktitle> <pages> pages 261-272, </pages> <year> 1993. </year>
Reference-contexts: Back-face Culling: Back-face culling is a particular form of occlusion culling used on solid models that can be easily combined with other visibility culling methods. It has recently been extended to spline patches by computing a bound on the normals and Gauss map of a patch <ref> [10, 16] </ref>. The current implementations, however, take time linear in the number of polygons. Some techniques have been proposed to speed it up. Tanimoto [18] proposed a graph-theoretic approach that incrementally computes the silhouettes of a convex polytope using frame-to-frame coherence.
Reference: [17] <author> I. Sutherland, R. Sproull, and R. Schumaker. </author> <title> A characterization of ten hidden-surface algorithms. </title> <journal> Computing Surveys, </journal> <volume> 6(1) </volume> <pages> 1-55, </pages> <year> 1974. </year> <month> 18 </month>
Reference-contexts: In the early days of image synthesis a central geometric problem was visible surface computation. A number of algorithms have been proposed based on spatial partitioning, hierarchical representations, Z-buffer, list-priority, scan-line, area-subdivision and polygon clusters <ref> [6, 17] </ref>. It is still an active area of research in computational geometry, where many theoretically efficient algorithms have been proposed [3]. For models composed of tens of thousands of polygons, only Z-buffer approaches are able to give interactive performance on current graphics systems. <p> Finally, coherence has been a key characterization of most visibility algorithms. In the classic paper, Sutherland et. al. had shown how visibility algorithms can take advantage of coherence and more than eight different kind of coherence were identified <ref> [17] </ref>. Rendering an extremely complex geometric database composed of millions of polygons has always been a challenge for visibility computations.
Reference: [18] <author> S.L. Tanimoto. </author> <title> A graph-theoretic real-time visible surface editing technique. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 223-228, </pages> <year> 1977. </year>
Reference-contexts: It has recently been extended to spline patches by computing a bound on the normals and Gauss map of a patch [10, 16]. The current implementations, however, take time linear in the number of polygons. Some techniques have been proposed to speed it up. Tanimoto <ref> [18] </ref> proposed a graph-theoretic approach that incrementally computes the silhouettes of a convex polytope using frame-to-frame coherence. It is difficult to extend it to general non-convex polytope models, though. The silhouettes of such models can have multiple components and the number of components vary from different view-point.
Reference: [19] <author> S. Teller and P. Hanrahan. </author> <title> Global visibility algorithms for illumination computations. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 239-246, </pages> <year> 1993. </year>
Reference-contexts: Obscuration Culling: These techniques are used on scenes with high depth complexity and are based on hidden-surface removal methods and occlusion culling [6]. These include techniques based on partitioning the model into cells and portals and computing the partial visibility set (PVS) of polygons from each cell <ref> [1, 19, 20] </ref>. They have been successfully applied to architectural models and used to speed-up global visibility algorithms for illumination computation. A hierarchical Z-buffer algorithm combining spatial and temporal coherence with hierarchical structures has been presented in [9].
Reference: [20] <author> S. J. Teller. </author> <title> Visibility Computations in Densely Occluded Polyheral Environments. </title> <type> PhD thesis, </type> <institution> CS Division, UC Berkeley, </institution> <year> 1992. </year> <month> 19 </month>
Reference-contexts: Obscuration Culling: These techniques are used on scenes with high depth complexity and are based on hidden-surface removal methods and occlusion culling [6]. These include techniques based on partitioning the model into cells and portals and computing the partial visibility set (PVS) of polygons from each cell <ref> [1, 19, 20] </ref>. They have been successfully applied to architectural models and used to speed-up global visibility algorithms for illumination computation. A hierarchical Z-buffer algorithm combining spatial and temporal coherence with hierarchical structures has been presented in [9].
References-found: 20

