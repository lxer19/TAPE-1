URL: http://www.cs.bc.edu/~straubin/papers/modular2.ps
Refering-URL: http://www.cs.bc.edu/techreps.html
Root-URL: http://www.cs.bc.edu
Email: e-mail:straubin@cs.bc.edu  
Phone: Tel.: (617)-552-3977  
Title: Languages Defined With Modular Counting Quantifiers  
Author: Howard Straubing 
Address: Boston College Chestnut Hill, MA 02167  
Affiliation: Computer Science Department  
Abstract: We prove that a regular language defined by a boolean combination of generalized 1 -sentences built using modular counting quantifiers can be defined by a boolean combination of 1 -sentences in which only regular numerical predicates appear. The same statement, with " 1 " replaced by "first-order" is equivalent to the conjecture that the non-uniform circuit complexity class ACC is strictly contained in N C 1 : The argument introduces some new techniques, based on a combination of semigroup theory and Ramsey theory, which may shed some light on the general case. A preliminary version of this paper appeared in the Proceedings of the 1998 STACS conference. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: 1. <author> M. Ajtai, </author> " <title> 1 1 formulae on finite structures", </title> <note> Annals of Pure and Applied Logic 24 (1983) 1-48. </note>
Reference-contexts: We can even determine whether the number of 1's in the input is at least log n. (This last fact is far from obvious|see Fagin, et. al. [9].) Furst, Saxe and Sipser [10] and, independently, Ajtai <ref> [1] </ref> showed that if k &gt; 1 then the regular language M OD k = fa 1 a n 2 f0; 1g fl : i=1 is not in AC 0 : It follows from this that one cannot perform binary multiplication in AC 0 ; or determine whether the majority of <p> The important connection to semigroup theory is discussed in the next subsection. 1.4 Connections to algebra We remarked above that if we had a direct proof of the equality FO " Reg = FO [Reg] then we could prove the circuit lower bounds of <ref> [1] </ref> and [10] directly. This is because we can give a precise characterization of the languages in FO [Reg] in terms of semigroup-theoretic invariants of regular languages.
Reference: 2. <author> D. Mix Barrington, K. Compton, H. Straubing, and D. Therien, </author> <title> "Regular Languages in NC 1 ", J. </title> <institution> Comp. Syst. Sci. </institution> <month> 44 </month> <year> (1992) </year> <month> 478-499. </month>
Reference-contexts: As M OD q is a regular language, it is natural to pose the question of which regular languages are first-order definable. The answer is given by a result of Barrington, Compton, Straubing and Therien <ref> [2] </ref>: Let us say that a numerical predicate is regular if and only if it is equivalent to a first-order formula over the atoms x &lt; y x j i (mod q): For example, the 0-ary numerical predicate length j 0 (mod 2) is equivalent to 9x8y (y x ^ x <p> The regular numerical predicates form the largest class of numerical predicates such that every sentence which uses only the numerical predicates of this class defines a regular language. It is proved in <ref> [2] </ref> that a regular language is first-order definable (and hence in AC 0 ) if and only if it is defined by a first-order sentence in which only regular numerical predicates are used. There is a particularly compelling notation in which to express this result. <p> Similarly, we can precisely characterize the classes Mod (s,q)[Reg] in semigroup-theoretic terms, and thus we possess an effective means for determining whether a given regular language belongs to any of these classes. (See Barrington, Compton, Straubing and Therien <ref> [2] </ref> and Straubing [22]).
Reference: 3. <author> D. </author> <title> Mix Barrington, "Bounded-Width Polynomial-Size Branching Programs Recognize Exactly Those Languages in N C 1 ", J. </title> <institution> Comp. Syst. Sci. </institution> <month> 38 </month> <year> (1989) </year> <month> 150-164. </month>
Reference-contexts: In particular, we can show that M OD p =2 MOD (s; q)[Reg] if p is a prime that does not divide q; and that AN D =2 MOD (0; q)[Reg]: The use of finite semigroups in circuit complexity originates in the work of Barrington <ref> [3] </ref> and Barrington and Therien [6], who introduced a model of computation called a program over a finite monoid. For purposes of the present paper we will give a somewhat different definition of these programs, due to Peladeau, Straubing and Therien [18] and indicate their connection with the Barrington-Therien model.
Reference: 4. <author> D. Mix Barrington, H. Straubing, and D. Therien, </author> <title> "Nonuniform Automata over Groups", </title> <note> Information and Computation 89 (1990) 109-132. </note>
Reference-contexts: There are some results for Conjectures 1 and 2 for circuits with M OD m gates on the input level, and a M OD p gate at the outputs, where p is prime. (See Barrington, Therien and Straubing <ref> [4] </ref>, Barrington and Straubing [5], Krause and Pudlak [15], Grolmusz and Tardos [12].) 1.2 Connections with logic For a full account of the results cited in this subsection and the next one, see Straubing [22]. <p> A theorem very close to the s = 0 case of Theorem 6 appears in <ref> [4] </ref>, using an argument that has some points in common with the proof we give here. Our proof relies on a combination of semigroup theory and Ramsey-style combina torics. <p> But the syntactic morphism of 1 fl maps f0; 1g onto U 1 ; a contradiction. As we shall see in the next subsection, the foregoing theorem is equivalent to a result of Barrington, Straubing and Therien <ref> [4] </ref> on the power of BT-programs over finite nilpotent groups. Observe, by the way, that if s &gt; 0; then we can define 1 fl by the sentence 9 (0;s;p) xQ 0 x: Theorem 13. Let q be prime. <p> Much the same argument shows that 1 fl cannot be recognized by a family of BT-programs (regardless of size) over a finite nilpotent group, a result due to Barrington, Straubing and Therien <ref> [4] </ref>. We can further generalize the congruences ff (m) r and ff r to allow subword counting modulo (s; p): We define the congruences ff (s;p) r accordingly.
Reference: 5. <author> D. Mix Barrington and H. Straubing, </author> <title> "Superlinear Lower Bounds for Bounded--width Branching Programs",J. </title> <institution> Comp. Syst. Sci. </institution> <month> 50 </month> <year> (1995) </year> <month> 374-381. </month>
Reference-contexts: There are some results for Conjectures 1 and 2 for circuits with M OD m gates on the input level, and a M OD p gate at the outputs, where p is prime. (See Barrington, Therien and Straubing [4], Barrington and Straubing <ref> [5] </ref>, Krause and Pudlak [15], Grolmusz and Tardos [12].) 1.2 Connections with logic For a full account of the results cited in this subsection and the next one, see Straubing [22].
Reference: 6. <author> D. Mix Barrington and D. Therien, </author> <title> "Finite Monoids and the Fine Structure of N C 1 ", JACM 35 (1988) 941-952. </title>
Reference-contexts: In particular, we can show that M OD p =2 MOD (s; q)[Reg] if p is a prime that does not divide q; and that AN D =2 MOD (0; q)[Reg]: The use of finite semigroups in circuit complexity originates in the work of Barrington [3] and Barrington and Therien <ref> [6] </ref>, who introduced a model of computation called a program over a finite monoid. For purposes of the present paper we will give a somewhat different definition of these programs, due to Peladeau, Straubing and Therien [18] and indicate their connection with the Barrington-Therien model.
Reference: 7. <author> J. R. Buchi, </author> <title> "Weak Second-order Arithmetic and Finite Automata", </title> <journal> Zeit. Math. Logik. Grund. Math. </journal> <month> 6 </month> <year> (1960) </year> <month> 66-92. </month>
Reference: 8. <author> S. Eilenberg, </author> <title> Automata, </title> <journal> Languages and Machines, </journal> <volume> vol. </volume> <publisher> B,Academic Press, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: Let w 2 A fl ; and v = a 1 a k ; with each a i 2 A: We say v is a subword of w if (This somewhat unusual terminology is from Eilenberg <ref> [8] </ref>. <p> Lemma 9, L is recognized by a family of k-programs over a finite commutative monoid M that satisfies an identity of the form (s + p) x = s x: Let us recall here the definition of the syntactic monoid of L; denoted M (L): (See Pin [19] or Eilenberg <ref> [8] </ref>.) Two words w 1 and w 2 in A fl are said to be congruent with respect to L if and only if for all u; v 2 A fl ; uw 1 v 2 L if and only if uw 2 v 2 L: It is easy to see <p> We refer the reader to any textbook on group theory. Here we shall need the following characterization of nilpotent groups, due to Therien [24], building on work of Eilenberg <ref> [8] </ref> on p-groups.
Reference: 9. <author> R. Fagin, M. Klawe, N. Pippenger, and L. Stockmeyer, "Bounded-depth, </author> <title> Polynomial-size Circuits for Symmetric Functions",Theoret. </title> <journal> Comput. </journal> <note> Sci 36 (1985) 239-250. </note>
Reference-contexts: We can even determine whether the number of 1's in the input is at least log n. (This last fact is far from obvious|see Fagin, et. al. <ref> [9] </ref>.) Furst, Saxe and Sipser [10] and, independently, Ajtai [1] showed that if k &gt; 1 then the regular language M OD k = fa 1 a n 2 f0; 1g fl : i=1 is not in AC 0 : It follows from this that one cannot perform binary multiplication in
Reference: 10. <author> M. Furst, J. Saxe, and M. Sipser, </author> <title> "Parity, Circuits, and the Polynomial Time Hierarchy", </title> <journal> J. </journal> <note> Math Systems Theory 17 (1984) 13-27. </note>
Reference-contexts: We can even determine whether the number of 1's in the input is at least log n. (This last fact is far from obvious|see Fagin, et. al. [9].) Furst, Saxe and Sipser <ref> [10] </ref> and, independently, Ajtai [1] showed that if k &gt; 1 then the regular language M OD k = fa 1 a n 2 f0; 1g fl : i=1 is not in AC 0 : It follows from this that one cannot perform binary multiplication in AC 0 ; or determine <p> k; then M OD p =2 ACC (k): Conjecture 3 implies, among other things, that we cannot determine in ACC whther the majority of the bits in an input string are equal to 1. (If we could, then we could do this in ACC (k) for some particular k; but <ref> [10] </ref> shows that we can recognize any M OD p by a constant-depth circuit built from AN D; OR; and M AJORIT Y gates, and thus we would have M OD p 2 ACC (k) for all p; contradicting Conjecture 3.) All these conjectures are known to hold when k is <p> The important connection to semigroup theory is discussed in the next subsection. 1.4 Connections to algebra We remarked above that if we had a direct proof of the equality FO " Reg = FO [Reg] then we could prove the circuit lower bounds of [1] and <ref> [10] </ref> directly. This is because we can give a precise characterization of the languages in FO [Reg] in terms of semigroup-theoretic invariants of regular languages.
Reference: 11. <author> R. Graham, B. Rothschild, J. Spencer, </author> <title> Ramsey Theory, </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: maps from A z into M is no more than fl (r) = jM j jAj r+1 ; and so the number of posible colors is bounded above by ffi (r) = fl (r) 2jAj r : 2.5 Step 3: Application of Ramsey's Theorem Let us recall Ramsey's Theorem (see <ref> [11] </ref>): Let m; k; c &gt; 0; with k m: Then there exists n = n (m; k; c) such that if all the k-element subsets of f1; : : : ; ng are colored from a set of c colors, then there exists an m-element subset T of f1; :
Reference: 12. <author> V. Grolmusz and G. Tardos, </author> <title> "Lower Bounds for (MOD p-MOD m) Circuits", </title> <booktitle> Proc. 39th IEEE FOCS, </booktitle> <year> 1998. </year>
Reference-contexts: There are some results for Conjectures 1 and 2 for circuits with M OD m gates on the input level, and a M OD p gate at the outputs, where p is prime. (See Barrington, Therien and Straubing [4], Barrington and Straubing [5], Krause and Pudlak [15], Grolmusz and Tardos <ref> [12] </ref>.) 1.2 Connections with logic For a full account of the results cited in this subsection and the next one, see Straubing [22].
Reference: 13. <author> Y. Gurevich and H. Lewis, </author> <title> "A Logic for Constant-Depth Circuits", </title> <journal> Information and Control, </journal> <month> 61 </month> <year> (1984) </year> <month> 65-74. </month>
Reference-contexts: The sentence 9x ((x + x = length) ^ 8y (y x $ Q a y)) defines the nonregular language fa n b n : n &gt; 0g: Immerman [14] and Gurevich and Lewis <ref> [13] </ref> showed that if A = f0; 1g; then the class of languages defined by first-order sentences is precisely the circuit complexity class AC 0 introduced in 1.1. We can give similar logical characterizations of CC 0 (q) and ACC (q) by in-troducing a new kind of quantifier.
Reference: 14. <author> N. Immerman, </author> <title> "Languages That Capture Complexity Classes", </title> <note> SIAM J. Computing 16 (1987) 760-778. </note>
Reference-contexts: The sentence 9x ((x + x = length) ^ 8y (y x $ Q a y)) defines the nonregular language fa n b n : n &gt; 0g: Immerman <ref> [14] </ref> and Gurevich and Lewis [13] showed that if A = f0; 1g; then the class of languages defined by first-order sentences is precisely the circuit complexity class AC 0 introduced in 1.1.
Reference: 15. <author> M. Krause and P. Pudlak, </author> <title> "On the Computational Power of Depth 2 Circuits with Threshold and Modular Gates", </title> <booktitle> Proc. 26th ACM STOC, </booktitle> <year> 1994. </year>
Reference-contexts: There are some results for Conjectures 1 and 2 for circuits with M OD m gates on the input level, and a M OD p gate at the outputs, where p is prime. (See Barrington, Therien and Straubing [4], Barrington and Straubing [5], Krause and Pudlak <ref> [15] </ref>, Grolmusz and Tardos [12].) 1.2 Connections with logic For a full account of the results cited in this subsection and the next one, see Straubing [22].
Reference: 16. <author> R. McNaughton and S. Papert, </author> <title> Counter-Free Automata, </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1971. </year>
Reference: 17. <author> A. Maciel, P. Peladeau and D. Therien, </author> <title> "Programs over Semigroups of Dot-depth One", </title> <note> preprint (1996). </note>
Reference-contexts: Theorem 6. For all s 0; p &gt; 0; B 1 " Reg = B 1 [Reg]: For the case of (1; 1)-quantification, this answers the question raised above about the boolean combinations of ordinary 1 -sentences; this case was proved independently by Maciel, Peladeau and Therien <ref> [17] </ref> using quite different techniques. A theorem very close to the s = 0 case of Theorem 6 appears in [4], using an argument that has some points in common with the proof we give here. Our proof relies on a combination of semigroup theory and Ramsey-style combina torics. <p> number of final letters equal to a is always 0 or 1.) This gives the required sentence, and completes the proof of Theorem 6. 4 Consequences of the Main Theorem 4.1 Elementary results on expressibility An immediate consequence of our main theorem is the result of Maciel, Peladeau and Therien <ref> [17] </ref>, for ordinary 1 -sentences: Theorem 11. If a regular language L is defined by a boolean combination of 1 -sentences, then it is defined by a boolean combination of 1 -sentences that use only regular numerical predicates. Proof. <p> Our definition of program varieties differs from the definition of p-varieties given by Peladeau, Straubing and Therien [18]. Their definition is in terms of polynomial-size BT-programs rather than k-programs. Maciel, Peladeau and Therien <ref> [17] </ref> prove that the pseudovariety of dot-depth one semigroups forms a p-variety, which in fact implies our theorem above. 4.3 Nilpotent Groups We can define finite nilpotent groups either in terms of the lower and upper central series, or as direct products of p-groups.
Reference: 18. <author> P. Peladeau, H. Straubing and D. Therien, </author> <title> "Finite Semigroup Varieties Defined by Programs", </title> <institution> Theor. Comp. Sci. </institution> <month> 180 </month> <year> (1997) </year> <month> 325-339. </month>
Reference-contexts: For purposes of the present paper we will give a somewhat different definition of these programs, due to Peladeau, Straubing and Therien <ref> [18] </ref> and indicate their connection with the Barrington-Therien model. <p> any polynomial-length family of BT-programs over M can be simulated by a family of k-programs over M; for some k: Conversely, any family of k-programs over M can be simulated by a polynomial-length family of BT-programs over M 0 , where M 0 is strucutrally very close to M: (See <ref> [18] </ref>.) This enables us to reformulate the algebraic characterizations of circuit complexity classes in terms of the k-program model. We state these in the next theorem, without proof, as they are not required for the proof of Theorem 6. <p> We have proved that OE factors through A fl M =ff r ; and hence M is J -trivial. Our definition of program varieties differs from the definition of p-varieties given by Peladeau, Straubing and Therien <ref> [18] </ref>. Their definition is in terms of polynomial-size BT-programs rather than k-programs.
Reference: 19. <author> J. E. Pin, </author> <title> Varieties of Formal Languages, </title> <publisher> Plenum, </publisher> <address> London, </address> <year> 1986. </year>
Reference-contexts: (s; p): By Lemma 9, L is recognized by a family of k-programs over a finite commutative monoid M that satisfies an identity of the form (s + p) x = s x: Let us recall here the definition of the syntactic monoid of L; denoted M (L): (See Pin <ref> [19] </ref> or Eilenberg [8].) Two words w 1 and w 2 in A fl are said to be congruent with respect to L if and only if for all u; v 2 A fl ; uw 1 v 2 L if and only if uw 2 v 2 L: It is
Reference: 20. <author> I. Simon, </author> <title> "Piecewise Testable Events" in Proc. </title> <booktitle> 2nd GI Conference, Lecture Notes in Computer Science 33 (1975) 214-222. </booktitle>
Reference-contexts: The following theorem, due to I. Simon <ref> [20] </ref>, says, in effect, that every J -trivial monoid is obtained in this way. Theorem 14. Let M be a finite J -trivial monoid, and let OE : A fl ! M be a homomnorphism.
Reference: 21. <author> R. Smolensky, </author> <title> "Algebraic Methods in the Theory of Lower Bounds for Boolean Circuit Complexity", </title> <booktitle> Proc. 19th ACM STOC (1987) 77-82. </booktitle>
Reference-contexts: The proof of Conjecture 3 in the prime-power case is due to Smolen-sky <ref> [21] </ref>. Smolensky's methods do not work when k has two distinct prime factors, and almost nothing is known about the status of the three conjectures in this case.
Reference: 22. <author> H. Straubing, </author> <title> Finite Automata, Formal Languages, and Circuit Complexity, </title> <publisher> Birkhauser, </publisher> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: M OD p gate at the outputs, where p is prime. (See Barrington, Therien and Straubing [4], Barrington and Straubing [5], Krause and Pudlak [15], Grolmusz and Tardos [12].) 1.2 Connections with logic For a full account of the results cited in this subsection and the next one, see Straubing <ref> [22] </ref>. We will use formulas of first-order logic to define properties of strings over a finite alphabet A: The variables in these formulas denote positions in the string (that is, integers in the range between 1 and the length of the string, inclusive). <p> Thus, we could just as well say that ACC (q) consists of all languages defined by sentences using only ordinary existential quantifiers and generalized quantifiers of the form 9 (i;0;q) , which is in fact the form in which this theorem is stated in <ref> [22] </ref>. Furthermore, this argument shows that it suffices to work with the quantifiers 9 (i;0;q) and 9 (i;1;q) , as all the others can be expressed in terms of these two. <p> Indeed, if we denote by 1 the family of languages defined by 1 - sentences, and by 1 [Reg] the family of languages defined by 1 -sentences that use only regular numerical predicates, then 1 " Reg = 1 [Reg]: The rather simple proof (see <ref> [22] </ref>) directly transforms a 1 -sentence for L into an equivalent sentence which, if L is regular, contains only regular numerical predicates. The analogous identity is true, by complementation, for 1 -sentences, but to extend this even to general boolean combinations of 1 -sentences is already a very difficult problem. <p> Similarly, we can precisely characterize the classes Mod (s,q)[Reg] in semigroup-theoretic terms, and thus we possess an effective means for determining whether a given regular language belongs to any of these classes. (See Barrington, Compton, Straubing and Therien [2] and Straubing <ref> [22] </ref>). <p> Let U 1 denote the monoid f0; 1g with the usual multiplication. By Theorem VII.4.2 of <ref> [22] </ref>, the image of f0; 1g + under the syntactic morphism of the language does not contain a copy of U 1 . But the syntactic morphism of 1 fl maps f0; 1g onto U 1 ; a contradiction. <p> p not divisible by q: The syntactic morphism of M OD q maps 0 to the identity and 1 to the generator of the cyclic group of order q; and thus maps the set of strings of length q onto the group of order q: But by Theorem VII.4.1 of <ref> [22] </ref>, any group in (f0; 1g q ) has cardinality dividing a product of the moduli occurring in a defining sentence, a contradiction. 4.2 J -trivial monoids Let M be a finite monoid, and let x 2 M: The two-sided ideal of M generated by x is the set fmxm 0
Reference: 23. <author> H. Straubing, D. Therien, and W. Thomas, </author> <title> "Regular Languages Defined with Generalized Quantifiers",Information and Computation 118 (1995) 289-301. </title>
Reference: 24. <author> D. Therien, </author> <title> "Classification of finite monoids: the language approach", </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <month> 14 </month> <year> (1981) </year> <month> 195-208. </month>
Reference-contexts: We refer the reader to any textbook on group theory. Here we shall need the following characterization of nilpotent groups, due to Therien <ref> [24] </ref>, building on work of Eilenberg [8] on p-groups. <p> But solvable monoids are built from commutative monoids: Indeed, every solvable monoid divides an iterated wreath product of commutative monoids. One can also capture the solvable monoids in terms of congruences: Therien <ref> [24] </ref> con structs a sequence of congruences ff (s;p) r (k); k &gt; 0; with ff (s;p) (s;p) r ; such that every solvable monoid divides the quotient of A fl by some ff (s;p) every solvable group divides the quotient of A fl by some ff (0;p) possible to approach
References-found: 25

