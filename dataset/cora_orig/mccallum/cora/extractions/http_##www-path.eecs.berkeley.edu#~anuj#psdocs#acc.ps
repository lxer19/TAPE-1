URL: http://www-path.eecs.berkeley.edu/~anuj/psdocs/acc.ps
Refering-URL: http://www-path.eecs.berkeley.edu/~anuj/papers/papers.html
Root-URL: 
Title: Verification of Hybrid Systems using Abstractions  
Author: Anuj Puri and Pravin Varaiya 
Address: Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Science, University of California,  
Abstract: A hybrid system models both discrete event and continuous dynamics. We present a modeling formalism and a verification methodology for hybrid systems. The verification methodology is based on abstracting the continuous dynamics in the hybrid system by simpler continuous dynamics. We present two methods for doing this: in the first method, a differential inclusion is replaced with a simpler differential inclusion; in the second method, we look at the timing information that is relevant to the verification problem, and construct an abstraction of the hybrid system with a timed automaton. We illustrate our methodology by applying it to the train-gate-controller example.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R.Alur, C.Courcoubetis, T.A. Henzinger and P.-H. Ho, </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems,Hybrid Systems, </title> <publisher> LNCS 736, Springer-Verlag. </publisher>
Reference-contexts: In this paper, we present a modeling formalism and a verification methodology for hybrid systems. For a survey of other work on hybrid systems, see [5]. A hybrid system consists of coordinating components. Each component is modeled by a hybrid automaton <ref> [1, 6] </ref>. Our methodology for verification is based on a conservative abstraction of the dynamics of a hybrid automaton with simpler dynamics. We provide two methods for doing this. With the first method, a differential equation is abstracted by a differential inclusion. <p> Define to be the set of all initialization relations. An enabling condition is ffi R n . The set of all such conditions is . 2.2 Hybrid Automata A hybrid automaton consists of a finite set of control locations <ref> [1, 6] </ref>. At each location, the continuous state evolves according to some inclusion. The edges between control locations are labeled with enabling conditions. A jump can be made from one control location to another provided the enabling condition is satisfied. <p> The relationship between the differential inclusion and the clock is then made by a mapping. Example: Consider the differential equation _x = (1x) 2 in the gate automaton, whose solution is x (t) = (x (0) 1)e t 2 + 1. Suppose x (0) 2 X 0 = <ref> [1; 10] </ref>. Then (X 0 ; t) = [1; 9e t 2 + 1]. Define the set-valued map h where h (t) = (X 0 ; t). <p> Example: Consider the differential equation _x = (1x) 2 in the gate automaton, whose solution is x (t) = (x (0) 1)e t 2 + 1. Suppose x (0) 2 X 0 = [1; 10]. Then (X 0 ; t) = <ref> [1; 9e t 2 + 1] </ref>. Define the set-valued map h where h (t) = (X 0 ; t). If we think of "t" as a clock recording time, then h (t) provides a bound on the region in which x (t) lies, provided x (0) 2 X 0 . <p> The abstracted automaton is shown in figure 9. It has control locations LOW and HIGH, and a clock T . The initial sets associated with LOW and HIGH are X 0 (LOW ) = <ref> [1; 10] </ref> and X 0 (HIGH) = [1; 10]. This assumption will be checked later on. There is a map from the states of the abstracted hybrid automaton to the original hybrid automaton. <p> The abstracted automaton is shown in figure 9. It has control locations LOW and HIGH, and a clock T . The initial sets associated with LOW and HIGH are X 0 (LOW ) = <ref> [1; 10] </ref> and X 0 (HIGH) = [1; 10]. This assumption will be checked later on. There is a map from the states of the abstracted hybrid automaton to the original hybrid automaton. <p> In control location LOW , the abstracted automaton simulates the original automaton when it is in control location LOW ER, and initial condition x (0) 2 <ref> [1; 10] </ref>. An enabling condition ffi in the hybrid automaton depends on the states of the hybrid automaton. We replace it with h 1 (ffi) so that it depends on the states of the abstracted hybrid automaton. The invariance conditions are similarly replaced.
Reference: 2. <author> R. Alur and D. Dill, </author> <title> Automata for modeling real-time systems, </title> <booktitle> Proc. 17th ICALP, </booktitle> <publisher> LNCS 443, Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Therefore, if we show H A satisfies the specification, then clearly H does as well. For an application of this approach to an Automated Vehicle Highway System, see [8]. 3.2 Abstracting with Timed Automata A timed automaton <ref> [2] </ref> is a hybrid automaton in which all the continuous variables are clocks. A clock x moves with rate "1" (i.e., _x = 1). On a transition, the clock may get reset to "0". To conservatively abstract a differential inclusion, we look at its evolution.
Reference: 3. <author> R.Alur, A.Itai, R.Kurshan and M.Yannakakis, </author> <title> Timing Verification by Successive Approximation, </title> <booktitle> Proc. 4th Workshop Computer-Aided Verification, Lecture Notes in Computer Science 663, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: If this is not the case, then our assumption about the initial sets is correct. When the assumptions are correct and h (R [H A ]) S, then the system satisfies the specification. We used the timed verification tools <ref> [3, 6] </ref> to show that the specification is satisfied in the train-gate-controller example. That is, the gate is down when the train is at the gate. We note that the abstractions that are created depend on the property to be proved. A different specification may require a different abstraction.
Reference: 4. <author> P.Kopke, T. Henzinger, A. Puri and P. Varaiya, </author> <title> What's Decidable About Hybrid Automata, </title> <month> STOCS </month> <year> 1995. </year>
Reference-contexts: If we show that the abstracted hybrid automaton satisfies the specification, then clearly, so does the original hybrid automaton since R [H] h (R [H A ]) S. The inclusion of hybrid automaton in figure 7 is a rectangular inclusion [7], and using the method in <ref> [4] </ref>, it can be translated into a timed automaton. The continuous variables in the abstracted hybrid automaton are clocks. Hence, the abstracted hybrid automaton is a timed automaton for which it is possible to construct the reach set R [H A ], and therefore h (R [H A ]).
Reference: 5. <editor> R.L. Grossman et al., eds., </editor> <title> Hybrid Systems, </title> <publisher> LNCS 736, Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: In this paper, we present a modeling formalism and a verification methodology for hybrid systems. For a survey of other work on hybrid systems, see <ref> [5] </ref>. A hybrid system consists of coordinating components. Each component is modeled by a hybrid automaton [1, 6]. Our methodology for verification is based on a conservative abstraction of the dynamics of a hybrid automaton with simpler dynamics. We provide two methods for doing this.
Reference: 6. <author> X.Nicollin, A. Olivero, J. Sifakis, and S.Yovine, </author> <title> An Approach to the Description and Analysis of Hybrid Systems, Hybrid Systems, </title> <publisher> LNCS 736, Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: In this paper, we present a modeling formalism and a verification methodology for hybrid systems. For a survey of other work on hybrid systems, see [5]. A hybrid system consists of coordinating components. Each component is modeled by a hybrid automaton <ref> [1, 6] </ref>. Our methodology for verification is based on a conservative abstraction of the dynamics of a hybrid automaton with simpler dynamics. We provide two methods for doing this. With the first method, a differential equation is abstracted by a differential inclusion. <p> Define to be the set of all initialization relations. An enabling condition is ffi R n . The set of all such conditions is . 2.2 Hybrid Automata A hybrid automaton consists of a finite set of control locations <ref> [1, 6] </ref>. At each location, the continuous state evolves according to some inclusion. The edges between control locations are labeled with enabling conditions. A jump can be made from one control location to another provided the enabling condition is satisfied. <p> If this is not the case, then our assumption about the initial sets is correct. When the assumptions are correct and h (R [H A ]) S, then the system satisfies the specification. We used the timed verification tools <ref> [3, 6] </ref> to show that the specification is satisfied in the train-gate-controller example. That is, the gate is down when the train is at the gate. We note that the abstractions that are created depend on the property to be proved. A different specification may require a different abstraction.
Reference: 7. <author> A. Puri and P. Varaiya, </author> <title> Decidability of Hybrid Systems with Rectangular Differ--ential Inclusions, Computer-Aided Verification 1994, </title> <publisher> LNCS 818, Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The interval I i = [T i ; T 0 i ] where T 0 = 0 and T i+1 = T 0 i . For example <ref> [0; 7] </ref>[7; 7][7; 7][7; 10:3] : : : is a valid interval sequence in which time progresses during the interval [0; 7], there are three instantaneous transitions at time 7 and time again progresses during [7; 10:3], etc. 2.4 Reach Set We next extend definition 2.2 and definition 2.3 to sets <p> The interval I i = [T i ; T 0 i ] where T 0 = 0 and T i+1 = T 0 i . For example <ref> [0; 7] </ref>[7; 7][7; 7][7; 10:3] : : : is a valid interval sequence in which time progresses during the interval [0; 7], there are three instantaneous transitions at time 7 and time again progresses during [7; 10:3], etc. 2.4 Reach Set We next extend definition 2.2 and definition 2.3 to sets of states. <p> For example [0; 7][7; 7][7; 7]<ref> [7; 10:3] </ref> : : : is a valid interval sequence in which time progresses during the interval [0; 7], there are three instantaneous transitions at time 7 and time again progresses during [7; 10:3], etc. 2.4 Reach Set We next extend definition 2.2 and definition 2.3 to sets of states. <p> If we show that the abstracted hybrid automaton satisfies the specification, then clearly, so does the original hybrid automaton since R [H] h (R [H A ]) S. The inclusion of hybrid automaton in figure 7 is a rectangular inclusion <ref> [7] </ref>, and using the method in [4], it can be translated into a timed automaton. The continuous variables in the abstracted hybrid automaton are clocks.
Reference: 8. <author> A. Puri and P. Varaiya, </author> <title> Driving Safely in Smart Cars, </title> <booktitle> American Control Conference 1995. </booktitle>
Reference-contexts: Therefore, if we show H A satisfies the specification, then clearly H does as well. For an application of this approach to an Automated Vehicle Highway System, see <ref> [8] </ref>. 3.2 Abstracting with Timed Automata A timed automaton [2] is a hybrid automaton in which all the continuous variables are clocks. A clock x moves with rate "1" (i.e., _x = 1). On a transition, the clock may get reset to "0".
Reference: 9. <author> A. Puri, V. Borkar, and P. Varaiya, </author> <title> *-Approximation of Differential Inclusions, </title> <type> Draft. </type>
Reference-contexts: The differential inclusion may be difficult to analyze. For this reason, we abstract it with something simpler, for example _x 2 g (x) where f (x) g (x). The inclusion _x 2 g (x) may be simpler; for example, it may be a piecewise constant inclusion <ref> [9] </ref>. Example: The train _y 2 f (y) is abstracted with the simple inclusion _y 2 [v min ; v max ] where v min is the minimum speed at which the train travels, and v max is the maximum speed.
Reference: 10. <author> P.Varaiya. </author> <title> Smart Cars on Smart Roads: Problems of Control. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 38(2) </volume> <pages> 195-207, </pages> <month> February </month> <year> 1993. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: 1 Introduction Traditional control theory and system theory have been successfully used in design of a large class of systems. But in the design of large, complex distributed systems such as Air-Traffic Control Systems, Automated Factories, and Intelligent Vehicle Highway Systems <ref> [10] </ref> etc., issues such as communication, coordination, planning and logic also have a prominent role to play. Systems which combine discrete event dynamics to model the coordination and the logical behavior, and continuous time dynamics for modeling the continuous behavior are called hybrid systems. <p> The relationship between the differential inclusion and the clock is then made by a mapping. Example: Consider the differential equation _x = (1x) 2 in the gate automaton, whose solution is x (t) = (x (0) 1)e t 2 + 1. Suppose x (0) 2 X 0 = <ref> [1; 10] </ref>. Then (X 0 ; t) = [1; 9e t 2 + 1]. Define the set-valued map h where h (t) = (X 0 ; t). <p> The abstracted automaton is shown in figure 9. It has control locations LOW and HIGH, and a clock T . The initial sets associated with LOW and HIGH are X 0 (LOW ) = <ref> [1; 10] </ref> and X 0 (HIGH) = [1; 10]. This assumption will be checked later on. There is a map from the states of the abstracted hybrid automaton to the original hybrid automaton. <p> The abstracted automaton is shown in figure 9. It has control locations LOW and HIGH, and a clock T . The initial sets associated with LOW and HIGH are X 0 (LOW ) = <ref> [1; 10] </ref> and X 0 (HIGH) = [1; 10]. This assumption will be checked later on. There is a map from the states of the abstracted hybrid automaton to the original hybrid automaton. <p> This assumption will be checked later on. There is a map from the states of the abstracted hybrid automaton to the original hybrid automaton. The map is a set valued map given by h (T; HIGH) = RAISE fi <ref> [10 9e t 2 ; 10] </ref> 2 + 1] Essentially, the map bounds the trajectories at time t in location l when x (0) 2 X 0 (l). <p> More properly, we say the abstracted automaton simulates the original hybrid automaton. This terminology is justified by the following interpretation of the mapping h. In control location HIGH, the abstracted automaton simulates the original automaton when it is in control location RAISE and initial condition x (0) 2 <ref> [0; 10] </ref>. For every trajectory = (RAISE; ) with (0) 2 [0; 10], there is a trajectory = (U P; T ) with T (0) = 0 in the abstracted automaton such that (t) 2 h ( (t)). <p> This terminology is justified by the following interpretation of the mapping h. In control location HIGH, the abstracted automaton simulates the original automaton when it is in control location RAISE and initial condition x (0) 2 <ref> [0; 10] </ref>. For every trajectory = (RAISE; ) with (0) 2 [0; 10], there is a trajectory = (U P; T ) with T (0) = 0 in the abstracted automaton such that (t) 2 h ( (t)). <p> In control location LOW , the abstracted automaton simulates the original automaton when it is in control location LOW ER, and initial condition x (0) 2 <ref> [1; 10] </ref>. An enabling condition ffi in the hybrid automaton depends on the states of the hybrid automaton. We replace it with h 1 (ffi) so that it depends on the states of the abstracted hybrid automaton. The invariance conditions are similarly replaced.
References-found: 10

