URL: http://www.cl.cam.ac.uk/Research/HVG/Clam.HOL/iterative-dialogues.ps.gz
Refering-URL: http://www.cl.cam.ac.uk/Research/HVG/Clam.HOL/intro.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Iterative Dialogues and Automated Proof  
Author: Konrad Slind Richard Boulton 
Date: May 1998  
Address: New Museums Site, Pembroke St. 80 South Bridge Cambridge CB2 3QG, England Edinburgh EH1 1HN, Scotland  
Affiliation: Computer Laboratory Dept. of Artificial Intelligence University of Cambridge University of Edinburgh  
Abstract: In previous work [3], we have built a proof system that joins an interactive tactic-based theorem prover for a classical logic [12] with a fully automatic proof planner for a constructive logic [8]. This combined system significantly improves the automation of the interactive prover, but is unsatisfactory for several reasons. To overcome these drawbacks, we propose a general scheme whereby the combined system can pass through multiple rounds of interaction in searching for a proof. This scheme has been implemented and offers an important increase in the power and usability of the combined system.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Armando and S. Ranise. </author> <title> From integrated reasoning specialists to "plug-and-play" reasoning components. </title> <booktitle> In Proceedings of the Fourth International Conference on Artificial Intelligence And Symbolic Computation (AISC'98), </booktitle> <address> Plattsburgh, NY, USA, </address> <month> September </month> <year> 1998. </year>
Reference-contexts: However, it remains to be seen whether such cooperation is effective in our combined system. More recently, Armando and Ranise <ref> [1] </ref> have studied the Boyer-Moore linear arithmetic procedure, specifying its logical services as an open mechanized reasoning system (OMRS) [10]. There seem to be close connections between OMRS and our work more generally. It would, for example, be interesting to try to specify our interface in the OMRS framework.
Reference: [2] <author> C. Benzmuller, L. Cheikhrouhou, D. Fehrer, A. Fiedler, X. Huang, M. Ker-ber, M. Kohlhase, K. Konrad, E. Melis, A. Meier, W. Schaarschmidt, J. Siekmann, and V. Sorge. </author> <title> mega: Towards a mathematical assistant. </title> <booktitle> In McCune [13], </booktitle> <pages> pages 252-255. </pages>
Reference-contexts: In contrast to PVS and the Boyer-Moore system, our combination system is loosely integrated: since our two systems do not share an address space, or the same machine, or even a file system, this strategy is almost forced on us. The mega system <ref> [2] </ref> is intended to provide theorem proving support for mathematics. It includes a proof planner together with various other theorem proving components and proof presentation tools.
Reference: [3] <author> R. Boulton, K. Slind, A. Bundy, and M. Gordon. </author> <title> An interface between CLAM and HOL. </title> <booktitle> In Proceedings of the 11th International Conference on Theorem Proving in Higher Order Logics (TPHOLs'98), Canberra, Australia, September/October 1998. Lecture Notes in Computer Science, </booktitle> <publisher> Springer. </publisher>
Reference-contexts: CL a M is a proof planner, implemented in Prolog, for a constructive type theory. Its main area of application is in finding proofs by mathematical induction but it has been used for other kinds of proof as well. Boulton et al <ref> [3] </ref> have described an interface between CL a M and HOL90, a Standard ML implementation of the HOL interactive theorem prover [12]. The HOL system is an LCF-style [11] tactic-based theorem prover for a classical higher-order logic. <p> A detailed description of the combined system can be found in <ref> [3] </ref>. 2.1 Drawbacks The single-shot approach provides a tool which considerably increases the automation of HOL on inductive proofs. <p> For a brief discussion of tactics see <ref> [3] </ref>; more thorough treatments can be found in [11, 12]. * The returned goal list will be empty when a non-contingent plan has been found. 3.2.2 The Client Side If the server failed to find a plan, the client will likewise fail.
Reference: [4] <author> R. J. Boulton. </author> <title> Combining decision procedures in the HOL system. </title> <editor> In E. T. Schubert, P. J. Windley, and J. Alves-Foss, editors, </editor> <booktitle> Proceedings of the 8th International Workshop on Higher Order Logic Theorem Proving and Its Applications, volume 971 of Lecture Notes in Computer Science, </booktitle> <pages> pages 75-89, </pages> <address> Aspen Grove, UT, USA, </address> <month> September </month> <year> 1995. </year> <note> Springer-Verlag. </note>
Reference-contexts: HOL may choose to return these conjectures to the user as new subgoals, but more likely it will attempt to prove them automatically, e.g., using its implementation of Nelson-Oppen co-operating decision procedures <ref> [4] </ref>, and then re-invoke CL a M, stating whether it proved, refuted, or failed to prove each conjecture. CL a M then attempts to advance the proof using the new information. We believe this to be the first time two mechanized reasoning systems have been combined in this way.
Reference: [5] <author> R. J. Boulton. Syn: </author> <title> A single language for specifying abstract syntax trees, lexical analysis, parsing and pretty-printing. </title> <type> Technical Report 390, </type> <institution> University of Cambridge Computer Laboratory, </institution> <address> New Museums Site, Pembroke Street, Cambridge CB2 3QG, UK, </address> <month> March </month> <year> 1996. </year> <month> 13 </month>
Reference-contexts: Another significant point is that the bulk of the translation to and from CL a M has been automatically generated by Boulton's ML-Syn tool <ref> [5] </ref> from a single high-level source document.
Reference: [6] <author> R. S. Boyer and J S. Moore. </author> <title> Integrating decision procedures into heuris-tic theorem provers: A case study of linear arithmetic. </title> <editor> In J. E. Hayes, D. Michie, and J. Richards, editors, </editor> <booktitle> Machine Intelligence 11, chapter 5, </booktitle> <pages> pages 83-124. </pages> <publisher> Oxford University Press, </publisher> <year> 1988. </year>
Reference-contexts: to find a plan: 8p q n: n p+q = n p fl n q The HOL tactic corresponding to the plan can be found in the appendix. 5 Related Work The work described in this paper is related to Boyer and Moore's integration of a linear arithmetic decision procedure <ref> [6] </ref> into their prover Nqthm. Our work concerns more general interactions but the specific instantiation described here (which uses HOL's decision procedures) is closely related to their work. <p> These first results are quite encouraging, since they achieve a smooth and nearly effortless integration of an inductive prover with a linear arithmetic package. Of course, an integration of two such components is not new, and 12 certainly not as tight as a hand-crafted one <ref> [6] </ref>, but we feel that the compar-ative ease of assembling the combined system speaks highly for our approach. Moreover, the user naturally has a place in the scheme of things; if desired, the user can easily single step the protocol by tactic invocations in HOL.
Reference: [7] <author> A. Bundy. </author> <title> A science of reasoning. </title> <editor> In J.-L. Lassez and G. Plotkin, editors, </editor> <booktitle> Computational Logic: Essays in Honor of Alan Robinson, </booktitle> <pages> pages 178-198. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction Proof planning <ref> [7] </ref> uses artificial intelligence planning techniques to discover proofs of theorems in mathematics and logic. CL a M is a proof planner, implemented in Prolog, for a constructive type theory.
Reference: [8] <author> A. Bundy, F. van Harmelen, C. Horn, and A. Smaill. </author> <title> The OYSTER-CLAM system. </title> <editor> In M. E. Stickel, editor, </editor> <booktitle> Proceedings of the 10th International Conference on Automated Deduction, volume 449 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 647-648, </pages> <address> Kaiserslautern, FRG, July 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference: [9] <author> A. P. Felty and D. J. Howe. </author> <title> Hybrid interactive theorem proving using Nuprl and HOL. </title> <booktitle> In McCune [13], </booktitle> <pages> pages 351-365. </pages>
Reference-contexts: Most of these components appear to have been designed to be part of mega rather than being existing systems, but there has been some work on integrating provers such as Otter, TPS, constraint solvers, and also computer algebra systems. Other related work is that of Felty and Howe <ref> [9] </ref> on using HOL theories and definitional packages within a Nuprl proof development.
Reference: [10] <author> F. Giunchiglia, P. Pecchiari, and C. Talcott. </author> <title> Reasoning theories | towards an architecture for open mechanized reasoning systems. </title> <editor> In F. Baader and K. U. Schulz, editors, </editor> <booktitle> Proceedings of the First International Workshop on Frontiers of Combining Systems (FroCoS'96), volume 3 of Applied Logic Series, </booktitle> <pages> pages 157-174, </pages> <address> Munich, Germany, March 1996. </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: However, it remains to be seen whether such cooperation is effective in our combined system. More recently, Armando and Ranise [1] have studied the Boyer-Moore linear arithmetic procedure, specifying its logical services as an open mechanized reasoning system (OMRS) <ref> [10] </ref>. There seem to be close connections between OMRS and our work more generally. It would, for example, be interesting to try to specify our interface in the OMRS framework.
Reference: [11] <author> M. J. Gordon, A. J. Milner, and C. P. Wadsworth. </author> <title> Edinburgh LCF: A Mechanised Logic of Computation, </title> <booktitle> volume 78 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: Boulton et al [3] have described an interface between CL a M and HOL90, a Standard ML implementation of the HOL interactive theorem prover [12]. The HOL system is an LCF-style <ref> [11] </ref> tactic-based theorem prover for a classical higher-order logic. <p> For a brief discussion of tactics see [3]; more thorough treatments can be found in <ref> [11, 12] </ref>. * The returned goal list will be empty when a non-contingent plan has been found. 3.2.2 The Client Side If the server failed to find a plan, the client will likewise fail. Otherwise, the client, on receipt of (P; L), attempts to prove each lemma in L.
Reference: [12] <author> M. J. C. Gordon and T. F. Melham, </author> <title> editors. Introduction to HOL: A theorem proving environment for higher order logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: Its main area of application is in finding proofs by mathematical induction but it has been used for other kinds of proof as well. Boulton et al [3] have described an interface between CL a M and HOL90, a Standard ML implementation of the HOL interactive theorem prover <ref> [12] </ref>. The HOL system is an LCF-style [11] tactic-based theorem prover for a classical higher-order logic. <p> For a brief discussion of tactics see [3]; more thorough treatments can be found in <ref> [11, 12] </ref>. * The returned goal list will be empty when a non-contingent plan has been found. 3.2.2 The Client Side If the server failed to find a plan, the client will likewise fail. Otherwise, the client, on receipt of (P; L), attempts to prove each lemma in L.
Reference: [13] <editor> W. McCune, editor. </editor> <booktitle> Proceedings of the 14th International Conference on Automated Deduction (CADE-14), volume 1249 of Lecture Notes in Artificial Intelligence, Townsville, </booktitle> <address> North Queensland, Australia, July 1997. </address> <publisher> Springer. </publisher>
Reference: [14] <author> N. Shankar PVS: </author> <title> Combining Specification, Proof Checking, and Model Checking. </title> <booktitle> Presented at Formal Methods in Computer Aided Design (FM-CAD'96), </booktitle> <address> Palo Alto, CA, </address> <month> November </month> <year> 1996. </year> <note> Springer LNCS 1166 pp. 257-264. </note>
Reference-contexts: There seem to be close connections between OMRS and our work more generally. It would, for example, be interesting to try to specify our interface in the OMRS framework. PVS <ref> [14] </ref> is an interactive proof system augmented with various tightly-integrated decision procedures, for example BDD-based propositional simplification and model checking, equality, and linear arithmetic.
References-found: 14

