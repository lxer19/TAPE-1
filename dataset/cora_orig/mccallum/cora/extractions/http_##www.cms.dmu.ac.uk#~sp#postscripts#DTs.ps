URL: http://www.cms.dmu.ac.uk/~sp/postscripts/DTs.ps
Refering-URL: http://www.cms.dmu.ac.uk:80/~sp/
Root-URL: 
Email: email: sp/zedan]@dmu.ac.uk  
Title: A Complete set of Design Transformations turn into a small book by the time it
Author: Sagar Pidaparthi, Paul Luker, Hussein Zedan 
Address: UK,  
Affiliation: School of Computing Sciences, DeMontfort University, Leicester,  
Note: will be provided in this document. Should  
Abstract: Migration from procedural architecture to object oriented architecture is possible through design transformations. This paper initially provides a conceptual foundation for migration from procedural to object oriented software architecture for legacy software. Firstly, it relies upon a view of software life cycle, in which all software development is considered to be evolutionary activity with reengineering/restructuring as an important process applied repeatedly on the artefacts of development at various stages in this evolution. Secondly, it introduces a novel approach of viewing a procedural program from an object oriented perspective in which there is a single god class which has a large number of global variables & methods, supported by several user defined classes which have no behaviour but data definitions. This view, coupled with repeated restructuring, enables a seamless migration of behaviour from the god class to other classes using design transformation methods. This paper distinguishes between the processes of translation and transformation and states that these two are orthogonal to each other, thus enabling us to concentrate on behaviour preserving design transformations to migrate from one design to another, leaving the language issues to be handled by translators. Having established the need for behaviour preserving design transformations, we provide a template for specifying design transformations. The main contribution of this paper is in the proposal of a template for the communication of design transformations. An example design transformation is presented which demonstrates the usefulness the template proposed in this paper. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Booch, G.,(1991), </author> <title> Object Oriented Design with Applications, </title> <publisher> The Benjamin/Cummings Publishing Company. </publisher>
Reference-contexts: 1. Introduction Software Design and development is evolutionary in its nature, which starts from its very first phases. Structured methodologies of the 70s and 80s advocated linear design processes which were unrealistic in their approach. It is now accepted that software design and development requires cyclic or iterative approaches. Booch <ref> [1] </ref> proposes a life cycle in which there are two kinds of processes for software design, one of which is the macro design process and the second being the micro design process. Each phase in the macro design process has a complete iteration of a micro design processes. <p> Usually there is one component which is called the system, which represents the system to be developed. Components in a software system are: classes, procedures, functions, types, variables. Design can be developed using design languages, which can be graphical like OMT [5], UML [6], or Booch <ref> [1] </ref> notation or by using languages like Language for Object Oriented Modelling (LOOM)[7], alternatively they can be specified using formal languages like COLD-K [2,3,4] as in the Meteor Project.
Reference: 2. <author> Feijs, L. </author> <title> (1993) Formalisation of Design Methods, Ellis Horwood Series in Computers and their Applications. </title>
Reference: 3. <author> Feijs, L. And Jonkers, H.B.M. </author> <title> (1989) METEOR and beyond: industrialising formal methods, </title> <editor> In: K.H. Bennet (ED.) </editor> <booktitle> Software Engineering Environments: Research and Practice, </booktitle> <publisher> Ellis Horwood Limited, </publisher> <pages> pp. </pages> <month> 255-274.. </month>
Reference-contexts: Should turn into a small book by the time it is complete. transformations, whereas Meteor [2,3,4] project works on design transformation using formal languages and provides formal proofs for behavioural equivalence in design transformation. However, it is important to note that the design transformations discussed by Feijs <ref> [3] </ref>, are at a very high level of abstraction and are not suitable for our purpose of migration from procedural to object oriented programs.
Reference: 4. <author> Bergstra, J.A., Heering, J., Klint,, </author> <title> P (1990) Module Algebra, </title> <journal> JACM Vol. </journal> <volume> 37 No 2 pp. </volume> <pages> 335-372. </pages>
Reference: 5. <author> Rumbaugh, J.,Blaha, M., Premerlani, W., Eddy, F., Lorensen, W., </author> <title> (1991)Object Oriented Modelling and design, </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Usually there is one component which is called the system, which represents the system to be developed. Components in a software system are: classes, procedures, functions, types, variables. Design can be developed using design languages, which can be graphical like OMT <ref> [5] </ref>, UML [6], or Booch [1] notation or by using languages like Language for Object Oriented Modelling (LOOM)[7], alternatively they can be specified using formal languages like COLD-K [2,3,4] as in the Meteor Project.
Reference: 6. <institution> UML </institution>
Reference-contexts: Usually there is one component which is called the system, which represents the system to be developed. Components in a software system are: classes, procedures, functions, types, variables. Design can be developed using design languages, which can be graphical like OMT [5], UML <ref> [6] </ref>, or Booch [1] notation or by using languages like Language for Object Oriented Modelling (LOOM)[7], alternatively they can be specified using formal languages like COLD-K [2,3,4] as in the Meteor Project.
Reference: 7. <institution> LOOM </institution>
Reference: 8. <author> Choi, S.C. and Scacchi, W., </author> <year> (1990), </year> <title> Extracting and Restructuring the design of large systems, </title> <journal> IEEE Software. </journal>
Reference: 9. <author> Chen, Y.F., Nishimoto, M.Y., Ramamoorthy, </author> <title> C.V.,(1990) The C Information Abstraction System, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 16, No. </volume> <pages> 3. </pages>
Reference: 10. <author> Pidaparthi, S., </author> <title> (1994) Forward and Reverse Engineering CASE Tool Supporting Multiple Views for Software Development". </title> <institution> Internal Report for De Montfort University, Leicester, U.K. </institution>
Reference: 11. <author> Pidaparthi, S., Cysewski, </author> <title> G.,(1996) Migration to Object Oriented System Structure Using Design Transformation Methods, </title> <booktitle> Proceedings of The Fifth International Conference Information Systems Development - ISD96.pp 555-571. </booktitle>
References-found: 11

