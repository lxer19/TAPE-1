URL: http://www.cs.cornell.edu/Info/People/chandra/podc97/papers/halevi.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/chandra/podc97/newProgram.html
Root-URL: 
Title: Maintaining Authenticated Communication in the Presence of Break-ins  
Author: Ran Canetti Shai Halevi Amir Herzberg 
Affiliation: IBM T.J. Watson Research Center  MIT, Lab for Computer Science  IBM Haifa Research Lab Tel Aviv Annex  
Abstract: We study the problem of maintaining authenticated communication over untrusted communication channels, in a scenario where the communicating parties may be occasionally and repeatedly broken into for limited periods of time. Once a party is broken into, its cryptographic keys are exposed and perhaps modified. We describe a mechanism that allows a party whose security has been compromised to regain its ability to communicate in an authenticated way. The contribution of this paper is twofold. First we present a mathematical model for analyzing this scenario, and exhibit various properties and parameters of this model. Next we describe a practically-appealing protocol which enables parties to maintain authenticated communication in the presence of such a powerful adversary. For this protocol we use a variation of the proactive distributed signature schemes which were recently described by Herzberg et al. Although these schemes are designed for a model where authenticated communication and broadcast primitives are available, we show how they can be modified to work in our model, where no such primitives are available a-priori. We also present a new proactive distributed signature scheme with improved round and communication complexities. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mihir Bellare and Phil Rogaway. </author> <title> Entity authentication and key distribution. </title> <booktitle> Proceedings of CRYPTO`93, </booktitle> <pages> pages 232-249, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: See details within. Related definitions. The problem which we consider in this work is related to the problem of entity and session authentication <ref> [1, 4, 2] </ref>. The main differences are that in these works, nodes are identified by virtue of knowing some cryptographic keys which remain unknown to the adversary throughout. This is clearly impossible in our model.
Reference: [2] <author> Mihir Bellare and Phil Rogaway. </author> <title> Provably secure session key distribution the three node case. </title> <booktitle> in proceedings of STOC'95, </booktitle> <pages> pages 57-66. </pages>
Reference-contexts: See details within. Related definitions. The problem which we consider in this work is related to the problem of entity and session authentication <ref> [1, 4, 2] </ref>. The main differences are that in these works, nodes are identified by virtue of knowing some cryptographic keys which remain unknown to the adversary throughout. This is clearly impossible in our model.
Reference: [3] <author> E. Berlekamp and L. </author> <title> Welch Error Correction of Algebraic Block Codes. </title> <type> US Patent Number 4,633,470. </type>
Reference-contexts: Combining the signature parts. Upon receiving all the signature-parts, the verifier first finds the majority value for u. Then it takes the vector of w i 's (some of which may be corrupted), and applies to it the Berlekamp-Welch decoding procedure <ref> [3] </ref>. This procedure is guaranteed to compute the coefficients of the polynomial W () as long as no more than (n t)=2 of the w i 's are corrupted. After finding W (), the verifier computes w W (0) (mod p 1).
Reference: [4] <author> R. Bird, I. Gopal, A. Herzberg, P. Janson, S. Kutten, R. Molva, and M. Yung. </author> <title> Systematic design of a family of attack-resistant authentication protocols. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 11(5) </volume> <pages> 679-693, </pages> <month> June </month> <year> 1993. </year> <note> Special issue on Secure Communications. (Preliminary version in Crypto 91.) </note>
Reference-contexts: See details within. Related definitions. The problem which we consider in this work is related to the problem of entity and session authentication <ref> [1, 4, 2] </ref>. The main differences are that in these works, nodes are identified by virtue of knowing some cryptographic keys which remain unknown to the adversary throughout. This is clearly impossible in our model.
Reference: [5] <author> M. Ben-Or, S. Goldwasser and A. Wigderson. </author> <title> Completeness Theorems for Non-Cryptographic Fault-Tolerant Distributed Computation. </title> <booktitle> proceedings of 20th STOC, </booktitle> <pages> pp. 1-10, </pages> <year> 1988. </year>
Reference-contexts: In other schemes (e.g., [18, 17, 16]) the correctness of each individual signature-part is verified before inclusion in the global computation. Instead, in the scheme below we make use of error-correcting codes to correct erroneous or missing signature parts. (This technique draws from <ref> [5] </ref>.) That is, correct signature parts form a codeword, so each node can use error correction algorithms to correct the bad signature-parts (as long as there aren't too many of them), before combining all them into a valid signature. El-Gamal Signatures.
Reference: [6] <author> R. Canetti and A. Herzberg. </author> <title> Maintaining security in the presence of transient faults. </title> <booktitle> In Proceedings of CRYPTO'94. </booktitle>
Reference-contexts: Therefore, we must put some limitations on the power of the adversary in order to make a solution possible; the quality of a solution will be measured by the strongest adversary it can withstand, where the power of an adversary is measured as follows: Following the proactive approach in <ref> [21, 6, 17] </ref> we introduce periodical, short refreshment phases, during which the nodes jointly try to refresh their keys and regain security. Let a time unit denote the time between two consecutive refreshment phases.
Reference: [7] <author> D. Dolev and H. R. </author> <title> Strong, Authenticated Algorithms for Byzantine Agreement. </title> <journal> SIAM J. of Computing, </journal> <volume> 12(4), </volume> <pages> pp. 656-666, </pages> <year> 1983 </year>
Reference-contexts: All these schemes, however, require authenticated broadcast channels, whereas in our model the channels are unauthenticated. We therefore extend the above works by describing how these schemes can be implemented over unauthenticated channels. For this purpose we use standard Byzantine Agreement tools designed for authenticated networks <ref> [22, 19, 20, 7, 11] </ref>, as well as some additional simple protocols. In our scenario these tools guarantee a somewhat weaker variant of broadcast; this variant will suffice for our needs. <p> To implement these broadcast channels we use tools for Byzantine agreement. Starting from [22, 19], there has been a large body of work regarding Byzantine agreement in various models. Some of these works, such as <ref> [7] </ref> and [11], are particularly useful to us. <p> For this we can use standard Byzantine agreement protocols from the literature. If our goal is to withstand b n1 2 c broken nodes, then we can use the protocol of Dolev and Strong <ref> [7] </ref>, which works in a model where digital signatures are available. In our model, the parties must use DISPERSE to send each message in the protocol.
Reference: [8] <author> S. Even, O. Goldreich and S. Micali. </author> <title> On-line/off-line digital signatures. </title> <journal> In Journal of Cryptology, </journal> <volume> vol. 9, No. 1, </volume> <year> 1996, </year> <pages> Pages 35-67. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Roughly speaking, our protocol ensures the existence of a large enough `clique' of nodes, among which there exists a virtual authenticated broadcast channel. We also describe, in Section 7, another proactive signature scheme, which has some nice on-line/off-line tradeoff (cf. <ref> [8] </ref>). This enables us to carry the bulk of the communication off-line, and to send only few messages during the refreshment phases. 1.5 Discussion Scalability issues. <p> is that almost all the work can be done off-line (i.e., independently of the message to be signed), where the on-line part (i.e., the part which depends on the message) is minimal, and in particular non-interactive. (Offline vs. on-line work was first studied in the context of signature schemes in <ref> [8] </ref>.) In our construction from Section 5, the off-line part of the signing process on a new personal verification key can be conveniently carried out at any time during the previous time period, prior to the current refreshment phase.
Reference: [9] <author> T. El-Gamal. </author> <title> A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms. </title> <journal> In IEEE Trans. Information Theory, </journal> <volume> vol. 31, </volume> <year> 1985, </year> <pages> pp. 469-472 </pages>
Reference-contexts: On the down side, this scheme is only t-secure for t = b n1 3 c, as opposed to t = b n1 2 c in some of the other schemes. 7.1 Overview The scheme which we present here is based on a variant of El-Gamal signatures <ref> [9] </ref>. Herzberg et al. describe in [16] a transformation which can be applied to any El-Gamal based distributed signature scheme (DS) in order to achieve a PDS scheme which is secure in model with broadcast channel. Thus, below we only describe the distributed protocol itself, without the proactive part.
Reference: [10] <author> P. Feldman. </author> <title> A practical scheme for non-interactive verifiable secret sharing. </title> <booktitle> In proceedings of 28th FOCS, IEEE, </booktitle> <year> 1987. </year>
Reference-contexts: The verifier then applies an error-correction procedure to the w i 's to weed-out the bad parts and combines everything into one valid signature. Sharing k and x. To share k; x the nodes use Feldman's tout-of-n Verifiable-Secret-Sharing procedure <ref> [10] </ref>.
Reference: [11] <author> P. Feldman and S. Micali. </author> <title> Optimal Algorithms for Byzantine Agreement. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 148-161, </pages> <year> 1988. </year>
Reference-contexts: All these schemes, however, require authenticated broadcast channels, whereas in our model the channels are unauthenticated. We therefore extend the above works by describing how these schemes can be implemented over unauthenticated channels. For this purpose we use standard Byzantine Agreement tools designed for authenticated networks <ref> [22, 19, 20, 7, 11] </ref>, as well as some additional simple protocols. In our scenario these tools guarantee a somewhat weaker variant of broadcast; this variant will suffice for our needs. <p> To implement these broadcast channels we use tools for Byzantine agreement. Starting from [22, 19], there has been a large body of work regarding Byzantine agreement in various models. Some of these works, such as [7] and <ref> [11] </ref>, are particularly useful to us. Yet, our model holds some additional complications, which force us to modify these protocols, and use some additional tools. 4.1 Achieving Connectivity We start with a simple protocol which guarantees that the adversary must disrupt many links to prevent messages from being delivered. <p> Alternatively, if we can assume an authentication clique of size b 2n1 3 c broken nodes, we can use the protocol of Feldman and Micali <ref> [11] </ref>, which runs in constant expected number of rounds. In any case, if we have a large enough authentication clique, then by using these protocols we guarantee that all the nodes in the clique agree on the same value.
Reference: [12] <author> Y. Frankel, P. Gemmell, P. Mackenzie and M. Yung, </author> <title> Proactive RSA. </title> <booktitle> In Proceedings of CRYPTO'97. </booktitle>
Reference-contexts: In the second part (Sections 4 through 6) we describe a protocol for solving this problem and analyze its properties. The main tool in this protocol are proactive signatures schemes (e.g., <ref> [18, 16, 13, 12, 14] </ref>). In particular, we show how proactive signatures can be done even when the links are not authenticated. <p> The adversary cannot obtain any pair (m; ), where is a valid signature on m with respect to the fixed verification key, unless at least one node which is not broken participates in the signature protocol SIG on the message m. Several proactive distributed signature schemes were proposed recently <ref> [18, 16, 13, 12, 14] </ref>. In particular, the [14] scheme is t-secure for t = b n1 2 c. <p> We remark that PDS schemes can be constructed, using standard general secure multiparty protocols, from any existentially unforgeable signature scheme. Schemes that are far more efficient exist based on the El-Gamal, DSS, and RSA signature schemes <ref> [18, 16, 13, 12, 14] </ref>. Proof (sketch): Let be any application protocol for n nodes, and let (Gen, Sig, Ver, Ref) be a PDS scheme which is t-secure in a communication model with authenticated broadcast channels (for some t b n1 2 c).
Reference: [13] <author> R. Gennaro, S. Jarecki, H. Krawczyk and T. Rabin. </author> <title> Robust Threshold DSS Signatures. </title> <booktitle> in Proceedings of EUROCRYPT 96. </booktitle>
Reference-contexts: In the second part (Sections 4 through 6) we describe a protocol for solving this problem and analyze its properties. The main tool in this protocol are proactive signatures schemes (e.g., <ref> [18, 16, 13, 12, 14] </ref>). In particular, we show how proactive signatures can be done even when the links are not authenticated. <p> Realizing Proactive Signatures over Untrusted Links. For our construction we use proactive signature schemes, such as the ones described in <ref> [18, 16, 13, 14] </ref>. All these schemes, however, require authenticated broadcast channels, whereas in our model the channels are unauthenticated. We therefore extend the above works by describing how these schemes can be implemented over unauthenticated channels. <p> That is, Ver v (m; Sig ~s (m)) = 1. Furthermore, any adversary of the considered class should be unable to generate a new message m 0 and a signature x such that Ver v (m 0 ; x) = 1. See <ref> [13, Def. 1 and 2] </ref> and [16, Def. 3.1] for more complete definitions. 3 Intuitively, a node is t-disconnected if there are at least t links that it cannot use in order to regain security during the refreshment phase. 4 The security parameter determines the size of the cryptographickeys that are <p> The adversary cannot obtain any pair (m; ), where is a valid signature on m with respect to the fixed verification key, unless at least one node which is not broken participates in the signature protocol SIG on the message m. Several proactive distributed signature schemes were proposed recently <ref> [18, 16, 13, 12, 14] </ref>. In particular, the [14] scheme is t-secure for t = b n1 2 c. <p> We remark that PDS schemes can be constructed, using standard general secure multiparty protocols, from any existentially unforgeable signature scheme. Schemes that are far more efficient exist based on the El-Gamal, DSS, and RSA signature schemes <ref> [18, 16, 13, 12, 14] </ref>. Proof (sketch): Let be any application protocol for n nodes, and let (Gen, Sig, Ver, Ref) be a PDS scheme which is t-secure in a communication model with authenticated broadcast channels (for some t b n1 2 c).
Reference: [14] <author> R. Gennaro, T. Rabin and M. Rabin, </author> <title> VSS and Secure Multi-party Computations Made Simple, </title> <type> manuscript. </type>
Reference-contexts: In the second part (Sections 4 through 6) we describe a protocol for solving this problem and analyze its properties. The main tool in this protocol are proactive signatures schemes (e.g., <ref> [18, 16, 13, 12, 14] </ref>). In particular, we show how proactive signatures can be done even when the links are not authenticated. <p> Realizing Proactive Signatures over Untrusted Links. For our construction we use proactive signature schemes, such as the ones described in <ref> [18, 16, 13, 14] </ref>. All these schemes, however, require authenticated broadcast channels, whereas in our model the channels are unauthenticated. We therefore extend the above works by describing how these schemes can be implemented over unauthenticated channels. <p> The adversary cannot obtain any pair (m; ), where is a valid signature on m with respect to the fixed verification key, unless at least one node which is not broken participates in the signature protocol SIG on the message m. Several proactive distributed signature schemes were proposed recently <ref> [18, 16, 13, 12, 14] </ref>. In particular, the [14] scheme is t-secure for t = b n1 2 c. <p> Several proactive distributed signature schemes were proposed recently [18, 16, 13, 12, 14]. In particular, the <ref> [14] </ref> scheme is t-secure for t = b n1 2 c. <p> We remark that PDS schemes can be constructed, using standard general secure multiparty protocols, from any existentially unforgeable signature scheme. Schemes that are far more efficient exist based on the El-Gamal, DSS, and RSA signature schemes <ref> [18, 16, 13, 12, 14] </ref>. Proof (sketch): Let be any application protocol for n nodes, and let (Gen, Sig, Ver, Ref) be a PDS scheme which is t-secure in a communication model with authenticated broadcast channels (for some t b n1 2 c).
Reference: [15] <author> S. Goldwasser, S. Micali, and R. Rivest. </author> <title> A digital signature scheme secure against adaptive chosen-message attacks. </title> <journal> SIAM J. Computing, </journal> <volume> 17(2) </volume> <pages> 281-308, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: In addition, we use a `standard' (non-distributed) signature scheme (Gen 0 ; Sig 0 ; Ver 0 ) which is secure against existential forgery in the sense of of <ref> [15] </ref>. <p> Also let (Gen 0 ; Sig 0 ; Ver 0 ) be a standard (non-distributed) signature scheme which is existentially unforgeable in the sense of <ref> [15] </ref>. Then the compiler fl cert above using these two signature schemes, is (t; t)-secure (in the sense of Definition 5) for the same value oft. We remark that PDS schemes can be constructed, using standard general secure multiparty protocols, from any existentially unforgeable signature scheme.
Reference: [16] <author> A. Herzberg, M. Jakobson, S. Jarecki, H. Krawczyk and M. Yung. </author> <title> Proactive public key and signature systems. </title> <booktitle> Proceedings of 4th ACM Conference on Computer & Communications Security, to appear. </booktitle>
Reference-contexts: In the second part (Sections 4 through 6) we describe a protocol for solving this problem and analyze its properties. The main tool in this protocol are proactive signatures schemes (e.g., <ref> [18, 16, 13, 12, 14] </ref>). In particular, we show how proactive signatures can be done even when the links are not authenticated. <p> Realizing Proactive Signatures over Untrusted Links. For our construction we use proactive signature schemes, such as the ones described in <ref> [18, 16, 13, 14] </ref>. All these schemes, however, require authenticated broadcast channels, whereas in our model the channels are unauthenticated. We therefore extend the above works by describing how these schemes can be implemented over unauthenticated channels. <p> That is, Ver v (m; Sig ~s (m)) = 1. Furthermore, any adversary of the considered class should be unable to generate a new message m 0 and a signature x such that Ver v (m 0 ; x) = 1. See [13, Def. 1 and 2] and <ref> [16, Def. 3.1] </ref> for more complete definitions. 3 Intuitively, a node is t-disconnected if there are at least t links that it cannot use in order to regain security during the refreshment phase. 4 The security parameter determines the size of the cryptographickeys that are used by the compiler fl. <p> We stress, however, that the global verification key must remain unchanged throughout. For a more formal definition of proactive distributed signature protocols, see <ref> [16, Def. 3.3] </ref>. <p> The adversary cannot obtain any pair (m; ), where is a valid signature on m with respect to the fixed verification key, unless at least one node which is not broken participates in the signature protocol SIG on the message m. Several proactive distributed signature schemes were proposed recently <ref> [18, 16, 13, 12, 14] </ref>. In particular, the [14] scheme is t-secure for t = b n1 2 c. <p> We remark that PDS schemes can be constructed, using standard general secure multiparty protocols, from any existentially unforgeable signature scheme. Schemes that are far more efficient exist based on the El-Gamal, DSS, and RSA signature schemes <ref> [18, 16, 13, 12, 14] </ref>. Proof (sketch): Let be any application protocol for n nodes, and let (Gen, Sig, Ver, Ref) be a PDS scheme which is t-secure in a communication model with authenticated broadcast channels (for some t b n1 2 c). <p> Herzberg et al. describe in <ref> [16] </ref> a transformation which can be applied to any El-Gamal based distributed signature scheme (DS) in order to achieve a PDS scheme which is secure in model with broadcast channel. Thus, below we only describe the distributed protocol itself, without the proactive part. <p> The main difference between this signature scheme and previous ones is in the way we combine the signature parts into a valid signature, and in particular with the way we handle the signature-parts of faulty nodes (which may be corrupted). In other schemes (e.g., <ref> [18, 17, 16] </ref>) the correctness of each individual signature-part is verified before inclusion in the global computation.
Reference: [17] <author> A. Herzberg, S. Jarecki, H. Krawczyk and M. Yung. </author> <title> Proactive Secret Sharing or: How to Cope with Perpetual Leakage. </title> <booktitle> In Proceedings of CRYPTO`95. </booktitle>
Reference-contexts: Therefore, we must put some limitations on the power of the adversary in order to make a solution possible; the quality of a solution will be measured by the strongest adversary it can withstand, where the power of an adversary is measured as follows: Following the proactive approach in <ref> [21, 6, 17] </ref> we introduce periodical, short refreshment phases, during which the nodes jointly try to refresh their keys and regain security. Let a time unit denote the time between two consecutive refreshment phases. <p> The main difference between this signature scheme and previous ones is in the way we combine the signature parts into a valid signature, and in particular with the way we handle the signature-parts of faulty nodes (which may be corrupted). In other schemes (e.g., <ref> [18, 17, 16] </ref>) the correctness of each individual signature-part is verified before inclusion in the global computation.
Reference: [18] <author> S. Jarecki. </author> <title> Proactive Secret Sharing and Public Key Cryp-tosystems. </title> <type> M.Eng. thesis, </type> <institution> MIT, </institution> <year> 1996 </year>
Reference-contexts: In the second part (Sections 4 through 6) we describe a protocol for solving this problem and analyze its properties. The main tool in this protocol are proactive signatures schemes (e.g., <ref> [18, 16, 13, 12, 14] </ref>). In particular, we show how proactive signatures can be done even when the links are not authenticated. <p> Realizing Proactive Signatures over Untrusted Links. For our construction we use proactive signature schemes, such as the ones described in <ref> [18, 16, 13, 14] </ref>. All these schemes, however, require authenticated broadcast channels, whereas in our model the channels are unauthenticated. We therefore extend the above works by describing how these schemes can be implemented over unauthenticated channels. <p> The adversary cannot obtain any pair (m; ), where is a valid signature on m with respect to the fixed verification key, unless at least one node which is not broken participates in the signature protocol SIG on the message m. Several proactive distributed signature schemes were proposed recently <ref> [18, 16, 13, 12, 14] </ref>. In particular, the [14] scheme is t-secure for t = b n1 2 c. <p> We remark that PDS schemes can be constructed, using standard general secure multiparty protocols, from any existentially unforgeable signature scheme. Schemes that are far more efficient exist based on the El-Gamal, DSS, and RSA signature schemes <ref> [18, 16, 13, 12, 14] </ref>. Proof (sketch): Let be any application protocol for n nodes, and let (Gen, Sig, Ver, Ref) be a PDS scheme which is t-secure in a communication model with authenticated broadcast channels (for some t b n1 2 c). <p> The main difference between this signature scheme and previous ones is in the way we combine the signature parts into a valid signature, and in particular with the way we handle the signature-parts of faulty nodes (which may be corrupted). In other schemes (e.g., <ref> [18, 17, 16] </ref>) the correctness of each individual signature-part is verified before inclusion in the global computation.
Reference: [19] <author> L. Lamport, R. Shostak and M. Pease. </author> <title> The Byzantine generals problems. </title> <journal> ACM Trans. on programming languages and systems, </journal> <volume> 4(3), </volume> <pages> pp. 382-401, </pages> <year> 1982. </year>
Reference-contexts: All these schemes, however, require authenticated broadcast channels, whereas in our model the channels are unauthenticated. We therefore extend the above works by describing how these schemes can be implemented over unauthenticated channels. For this purpose we use standard Byzantine Agreement tools designed for authenticated networks <ref> [22, 19, 20, 7, 11] </ref>, as well as some additional simple protocols. In our scenario these tools guarantee a somewhat weaker variant of broadcast; this variant will suffice for our needs. <p> This is used in Section 5 to modify PDS schemes which are designed for networks with broadcast channels into ones which can work in our model of unauthenticated links. To implement these broadcast channels we use tools for Byzantine agreement. Starting from <ref> [22, 19] </ref>, there has been a large body of work regarding Byzantine agreement in various models. Some of these works, such as [7] and [11], are particularly useful to us.
Reference: [20] <author> N. Lynch. </author> <title> Distributed Algorithms. </title> <publisher> Morgan Kaufmann Publishers Inc. </publisher> <year> 1996. </year>
Reference-contexts: All these schemes, however, require authenticated broadcast channels, whereas in our model the channels are unauthenticated. We therefore extend the above works by describing how these schemes can be implemented over unauthenticated channels. For this purpose we use standard Byzantine Agreement tools designed for authenticated networks <ref> [22, 19, 20, 7, 11] </ref>, as well as some additional simple protocols. In our scenario these tools guarantee a somewhat weaker variant of broadcast; this variant will suffice for our needs.
Reference: [21] <author> R. Ostrovsky and M. Yung. </author> <title> How to withstand mobile virus attacks. </title> <booktitle> In Proceedings of the 10 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Montreal, Quebec, Canada, </address> <pages> pages 51-59, </pages> <year> 1991. </year>
Reference-contexts: Therefore, we must put some limitations on the power of the adversary in order to make a solution possible; the quality of a solution will be measured by the strongest adversary it can withstand, where the power of an adversary is measured as follows: Following the proactive approach in <ref> [21, 6, 17] </ref> we introduce periodical, short refreshment phases, during which the nodes jointly try to refresh their keys and regain security. Let a time unit denote the time between two consecutive refreshment phases.
Reference: [22] <author> M. Pease, R. Shostak and L. Lamport. </author> <title> Reaching agreements in the precence of faults. </title> <journal> In Journal of the ACM, </journal> <volume> 27(2), </volume> <pages> pp. 228-234, </pages> <year> 1980 </year>
Reference-contexts: All these schemes, however, require authenticated broadcast channels, whereas in our model the channels are unauthenticated. We therefore extend the above works by describing how these schemes can be implemented over unauthenticated channels. For this purpose we use standard Byzantine Agreement tools designed for authenticated networks <ref> [22, 19, 20, 7, 11] </ref>, as well as some additional simple protocols. In our scenario these tools guarantee a somewhat weaker variant of broadcast; this variant will suffice for our needs. <p> This is used in Section 5 to modify PDS schemes which are designed for networks with broadcast channels into ones which can work in our model of unauthenticated links. To implement these broadcast channels we use tools for Byzantine agreement. Starting from <ref> [22, 19] </ref>, there has been a large body of work regarding Byzantine agreement in various models. Some of these works, such as [7] and [11], are particularly useful to us.
References-found: 22

