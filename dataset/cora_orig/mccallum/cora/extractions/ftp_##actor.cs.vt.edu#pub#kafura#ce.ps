URL: ftp://actor.cs.vt.edu/pub/kafura/ce.ps
Refering-URL: http://www.cs.vt.edu/~kafura/
Root-URL: http://www.cs.vt.edu
Title: Specification of Multi-Object Coordination Schemes Using Coordinating Environments  
Author: Manibrata Mukherji Smith Hall Dennis Kafura 
Keyword: concurrency, concurrency control, multi-object coordination, synchronization, language mechanisms for coordination.  
Address: 19716, USA.  562 McBryde Hall  VA 24061, USA.  
Affiliation: Department of Computer and Information Sciences  University of Delaware Newark, DE  Department of Computer Science  Virginia Tech Blacksburg,  
Email: Email mukherji@cis.udel.edu, kafura@cs.vt.edu  
Phone: Tel 302-831-8235, 540-231-5568  
Date: November 10, 1995  
Abstract: A coordination model, termed Coordinating Environments, is proposed. The model enables the design of non-intrusive coordinators that impose collaborative behavior on a set of autonomous objects. Itself a first-class object, a coordinator is defined separately from, and achieves its effects without overt intrusion into, the coordinated objects. The two properties of separation and non-intrusion are present in different degrees in the existing coordination mechanisms. The Coordinating Environments model is described and contrasted with the existing proposals. In addition to achieving improved separation and non-intrusion over existing models, it is argued that the Coordinating Environments model is more explicit about its coordinating actions, is more modular because it respects the objects' encapsulation, and encourages a style of programming leading to better reuse. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agha and C. J. Callsen. Actorspace: </author> <title> An Open Distributed Programming Paradigm. </title> <booktitle> In Proceedings of the ACM Symposium on Principles and Practice of Parallel Programming, SIGPLAN Notices v 28:7, </booktitle> <pages> pages 23 - 32. </pages>
Reference-contexts: The group coordinator assumes the responsibilities of operation scheduling and state propagation thereby decoupling components and making them more reusable. Group coordinators are used in ActorSpaces <ref> [1] </ref>, Composite Multimedia Objects [2], Interface Groups [3], Arapis' Roles [4], and Subsystems [5]. Group coordinators suffer from two shortcomings. First, a group coordinator forces clients of the group to interact with itself instead of with the components of the group.
Reference: [2] <author> S. Gibbs. </author> <title> Composite Multimedia and Active Objects. </title> <booktitle> In OOPSLA'91 Conference Proceedings, </booktitle> <pages> pages 97-112. </pages>
Reference-contexts: The group coordinator assumes the responsibilities of operation scheduling and state propagation thereby decoupling components and making them more reusable. Group coordinators are used in ActorSpaces [1], Composite Multimedia Objects <ref> [2] </ref>, Interface Groups [3], Arapis' Roles [4], and Subsystems [5]. Group coordinators suffer from two shortcomings. First, a group coordinator forces clients of the group to interact with itself instead of with the components of the group.
Reference: [3] <author> M. H. Olsen, E. Oskiewicz, J. P. Warne. </author> <title> A Model for Interface Groups. </title> <booktitle> In Proceedings IEEE 10th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 98-107, </pages> <year> 1991. </year>
Reference-contexts: The group coordinator assumes the responsibilities of operation scheduling and state propagation thereby decoupling components and making them more reusable. Group coordinators are used in ActorSpaces [1], Composite Multimedia Objects [2], Interface Groups <ref> [3] </ref>, Arapis' Roles [4], and Subsystems [5]. Group coordinators suffer from two shortcomings. First, a group coordinator forces clients of the group to interact with itself instead of with the components of the group.
Reference: [4] <author> C. Arapis. </author> <title> Specifying Object Interactions. </title> <editor> In D. Tsichritzis, editor, </editor> <title> Object Composition. </title> <institution> University of Geneva, </institution> <year> 1991. </year>
Reference-contexts: The group coordinator assumes the responsibilities of operation scheduling and state propagation thereby decoupling components and making them more reusable. Group coordinators are used in ActorSpaces [1], Composite Multimedia Objects [2], Interface Groups [3], Arapis' Roles <ref> [4] </ref>, and Subsystems [5]. Group coordinators suffer from two shortcomings. First, a group coordinator forces clients of the group to interact with itself instead of with the components of the group.
Reference: [5] <author> R. Wirfs-Brock, B. Wilkerson, and L. Wiener. </author> <title> Designing Object-Oriented Software. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: The group coordinator assumes the responsibilities of operation scheduling and state propagation thereby decoupling components and making them more reusable. Group coordinators are used in ActorSpaces [1], Composite Multimedia Objects [2], Interface Groups [3], Arapis' Roles [4], and Subsystems <ref> [5] </ref>. Group coordinators suffer from two shortcomings. First, a group coordinator forces clients of the group to interact with itself instead of with the components of the group.
Reference: [6] <author> D. C. Luckham et al. </author> <title> Partial Orderings of Event Sets and Their Application to Prototyping Concurrent, Timed Systems. </title> <journal> Journal of Systems Software. </journal> <volume> Vol. 21, </volume> <month> June </month> <year> 1993, </year> <pages> pages 253-265. </pages>
Reference-contexts: Thus, any object-oriented programming language may be used to realize this form of coordination by defining objects that are aware of each other and include the necessary communications for operation scheduling and state propagation. Some proposals that use the decentralized paradigm are Rapide <ref> [6] </ref>, ABCL [7], Contracts [8] [9], and LO [10]. In object-based systems, explicit communication for the purpose of coordination leads to the following three problems. First, coordination is an issue at the time of designing the participating objects, thereby complicating their design.
Reference: [7] <author> A. Yonezawa, </author> <title> editor. ABCL | an object-oriented concurrent system. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Thus, any object-oriented programming language may be used to realize this form of coordination by defining objects that are aware of each other and include the necessary communications for operation scheduling and state propagation. Some proposals that use the decentralized paradigm are Rapide [6], ABCL <ref> [7] </ref>, Contracts [8] [9], and LO [10]. In object-based systems, explicit communication for the purpose of coordination leads to the following three problems. First, coordination is an issue at the time of designing the participating objects, thereby complicating their design.
Reference: [8] <author> A. R. Helm, I. M. Holland, and D. Gangopadhyay. </author> <title> Contracts: Specifying Behavioral Compositions in Object-Oriented Systems. In OOPSLA'90, </title> <journal> in Special Issue of SIGPLAN Notices, </journal> <pages> pages 169-180, </pages> <address> Ottawa, </address> <year> 1990. </year> <note> ACM Press. Joint conference ECOOP/OOPSLA. </note>
Reference-contexts: Thus, any object-oriented programming language may be used to realize this form of coordination by defining objects that are aware of each other and include the necessary communications for operation scheduling and state propagation. Some proposals that use the decentralized paradigm are Rapide [6], ABCL [7], Contracts <ref> [8] </ref> [9], and LO [10]. In object-based systems, explicit communication for the purpose of coordination leads to the following three problems. First, coordination is an issue at the time of designing the participating objects, thereby complicating their design.
Reference: [9] <author> I. M. Holland. </author> <title> Specifying Reusable Components Using Contracts. </title> <editor> In O. Lehrmann Madsen, editor, </editor> <booktitle> Proceedings ECOOP'92, </booktitle> <volume> LNCS 615, </volume> <pages> pages 287-308, </pages> <address> Utrecht, The Netherlands, July, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Thus, any object-oriented programming language may be used to realize this form of coordination by defining objects that are aware of each other and include the necessary communications for operation scheduling and state propagation. Some proposals that use the decentralized paradigm are Rapide [6], ABCL [7], Contracts [8] <ref> [9] </ref>, and LO [10]. In object-based systems, explicit communication for the purpose of coordination leads to the following three problems. First, coordination is an issue at the time of designing the participating objects, thereby complicating their design.
Reference: [10] <author> M. Bourgois, J-M Andreoli, and R. Pareschi. </author> <title> Concurrency and Communication: Choices in Implementing the Coordination Language LO. </title> <booktitle> Proceedings of the ECOOP'93 Workshop on Object-Based Distributed Programming, </booktitle> <editor> R. Guerraoui, O. Nierstrasz, and M. Rivelli editors, </editor> <volume> LNCS 791, </volume> <pages> pages 73-92, </pages> <address> Kaiserslautern, Germany, July 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Some proposals that use the decentralized paradigm are Rapide [6], ABCL [7], Contracts [8] [9], and LO <ref> [10] </ref>. In object-based systems, explicit communication for the purpose of coordination leads to the following three problems. First, coordination is an issue at the time of designing the participating objects, thereby complicating their design.
Reference: [11] <author> S. Frolund and G. Agha. </author> <title> A Language Framework for Multi-Object Coordination. </title> <editor> In O. Nierstrasz, editor, </editor> <booktitle> Proceedings ECOOP'93, </booktitle> <volume> LNCS 707, </volume> <pages> pages 346-359, </pages> <address> Germany, July, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Thus, group coordinators in these models can achieve a better separation of concerns by concentrating solely on coordination issues. Two models in the hybrid category, which are similar to the model proposed in this paper, are Synchronizers <ref> [11] </ref>, and Abstract Communication Types (ACT) [12]. Although successful in handling group coordination issues, both synchronizers and ACT leave scope for improvement. Specific issues, which, if addressed, will yield a better hybrid coordination model, are discussed below. <p> The specific aspects of the synchronizer model that can be improved to yield a better coordination model are as follows. First, better separation can be achieved. A synchronizer replicates instance variables of components. For example, the vending machine synchronizer (VMS) in <ref> [11] </ref> declares local variables that mirror the values of the inserted amount accumulated by the coin acceptor and the price of items in individual slots. Such replication hinders the separation of concerns that may be achieved by allowing components to manage their local data. Second, message handling can be simplified. <p> A detailed design of the classes to implement CE objects and the event objects (using which a CE object observes events) have also been provided [13]. The CEs model is an improvement over two other similar hybrid coordination models, namely, synchronizers <ref> [11] </ref> and ACT [12]. Compared to synchronizers, the CEs model achieves a better separation of concerns by preventing the replication and the management of component data in group coordinators. Compared to the ACT model, it is easier to reuse coordination specifications using inheritance in the CEs model.
Reference: [12] <editor> M. Aksit et al. </editor> <title> Abstracting Object Interactions Using Composition Filters. </title> <booktitle> Proceedings of the ECOOP'93 Workshop on Object-Based Distributed Programming, </booktitle> <editor> R. Guerraoui, O. Nierstrasz, and M. Rivelli editors, </editor> <volume> LNCS 791, </volume> <pages> pages 152-184, </pages> <address> Kaiserslautern, Germany, July 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Thus, group coordinators in these models can achieve a better separation of concerns by concentrating solely on coordination issues. Two models in the hybrid category, which are similar to the model proposed in this paper, are Synchronizers [11], and Abstract Communication Types (ACT) <ref> [12] </ref>. Although successful in handling group coordination issues, both synchronizers and ACT leave scope for improvement. Specific issues, which, if addressed, will yield a better hybrid coordination model, are discussed below. <p> A detailed design of the classes to implement CE objects and the event objects (using which a CE object observes events) have also been provided [13]. The CEs model is an improvement over two other similar hybrid coordination models, namely, synchronizers [11] and ACT <ref> [12] </ref>. Compared to synchronizers, the CEs model achieves a better separation of concerns by preventing the replication and the management of component data in group coordinators. Compared to the ACT model, it is easier to reuse coordination specifications using inheritance in the CEs model.
Reference: [13] <author> M. Mukherji. </author> <title> Specification of Multi-Object Coordination Schemes Using Coordinating Environments. </title> <type> Ph.D. dissertation, </type> <institution> Department of Computer Science, Virginia Tech, </institution> <month> July </month> <year> 1995. </year> <month> 38 </month>
Reference-contexts: For example, the disables operation of a synchronizer has priority over the updates operation when both are applicable. But, depending on the context, an updates operation may or may not be applicable after the execution of the disables operation (See Chapter 6 in <ref> [13] </ref>). Fourth, better encapsulation can be achieved. A synchronizer reads the argument list of a request message. For example, in the VMS, the amount inserted into the coin acceptor is read from the argument list of the insert message. <p> A concrete CE class maps the coordination pattern defined by the abstract CE class into concrete coordination solutions. Using the design method, two representative coordination problems have been solved : the coordination between a pair of buttons in a button-panel and a multicomponent vending machine. In other work <ref> [13] </ref> the method has been successfully applied to the coordination of a multi-car elevator system and a ripple-carry adder. <p> A detailed design of the classes to implement CE objects and the event objects (using which a CE object observes events) have also been provided <ref> [13] </ref>. The CEs model is an improvement over two other similar hybrid coordination models, namely, synchronizers [11] and ACT [12]. Compared to synchronizers, the CEs model achieves a better separation of concerns by preventing the replication and the management of component data in group coordinators. <p> The feasibility of hierarchical composition of CE objects must be studied. The horizontal composition of CE objects has been illustrated by the ripple-carry adder coordination problem in <ref> [13] </ref>. In the solution to that problem, a CE object facilitates the horizontal composition of two other CE objects by coordinating two components, one from each of the groups coordinated by the latter CE objects. <p> Yet the current method cannot terminate until the object decides whether to process the message. This circular waiting leads to deadlock. The coordination problems solved in <ref> [13] </ref> did not require objects to send messages to themselves. The need for such a capability must be ascertained and possible extensions to the object model must be investigated. Second, type checking of arguments supplied in request messages must be realized in order to provide a type-safe programming environment.
References-found: 13

