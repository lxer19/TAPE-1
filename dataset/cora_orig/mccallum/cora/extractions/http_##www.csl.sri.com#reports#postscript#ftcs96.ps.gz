URL: http://www.csl.sri.com/reports/postscript/ftcs96.ps.gz
Refering-URL: http://www.csl.sri.com/reports/postscript/
Root-URL: 
Title: Reconfiguration and Transient Recovery in State Machine Architectures From Fault Tolerant  
Author: John Rushby 
Address: Menlo Park CA 94025 USA  
Affiliation: Computer Science Laboratory SRI International  
Date: June 1996.  
Note: Computing Symposium 26, pp. 6-15 Sendai, Japan,  
Abstract: We consider an architecture for ultra-dependable operation based on synchronized state machine replication, extended to provide transient recovery and reconfiguration in the presence of arbitrary faults. The architecture allows processors suspected of being faulty to be placed on "probation." Processors in this status cannot disrupt other processors, but those that are nonfaulty or recovering from transient faults are able to remain synchronized with the other processors and with each other, can participate in interactively consistent exchange of data (i.e., Byzan-tine agreement), and can restore damaged state data by loading majority-voted copies from other processors. The processors that are not on probation are able to coordinate membership of their group and to take processors on and off probation. These properties are achieved even if all the processors on probation and some of the others exhibit Byzantine faults, provided a majority of all processors are nonfaulty. Key elements of the architecture are modified treatments for the problems of interactive consistency, clock synchronization, and group membership. Classical algorithms for these problems that tolerate t Byzantine faults among n processors are extended to tolerate t + p faults among n + p processors, partitioned into n "core members" and p "probationers," provided no more than t faults occur among the core members. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Richard W. Buskens and Ronald P. Bianchini, Jr. </author> <title> Distributed on-line diagnosis in the presence of arbitrary faults. </title> <booktitle> In Fault Tolerant Computing Symposium 23 [10], </booktitle> <pages> pages 470-479. </pages>
Reference-contexts: Several authors develop several sophisticated diagnosis algorithms of this type <ref> [1, 26, 27] </ref>; the accuracy of some of these has been formally verified by Lincoln [16]. This approach can be inaccurate in the presence of transient faults, however.
Reference: [2] <editor> Marc Chereque, David Powell, Philippe Reynier, Jean-Luc Richier, and Jacques Voiron. </editor> <title> Active replication in Delta-4. </title> <booktitle> In Fault Tolerant Computing Symposium 22, </booktitle> <pages> pages 28-37, </pages> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year> <journal> IEEE Computer Society. </journal> <volume> 9 </volume>
Reference-contexts: There are n 3 Schneider's tutorial [22] describes the state machine approach in its client-server form. Here, we use the original SIFT form (which is suited to control applications) where both clients and servers are combined into a single replicated application. Other systems that use active replication include Delta-4 <ref> [2] </ref>, FTP [13], and Mars [12]. replicated major components, generally called channels, that are electrically and physically isolated from each other so that their failures will, to the extent possible, be independent. Each channel has a processor, some memory, and access to sensors and actuators.
Reference: [3] <author> Flaviu Cristian. </author> <title> Agreeing who is present and who is absent in a synchronous distributed system. </title> <booktitle> In Fault Tolerant Computing Symposium 18, </booktitle> <pages> pages 206-211, </pages> <address> Tokyo, Japan, June 1988. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: This is an instance of the group membership problem for synchronous systems first introduced by Cristian <ref> [3] </ref>. The present instance is simpler than the general problem because all nonfaulty channels are performing the same computations in lockstep. Thus, all that is necessary is for each channel to run an identical, deterministic, selection algorithm on the interactively consistent syndrome information that was distributed in the diagnosis phase.
Reference: [4] <author> Judith Crow and John Rushby. </author> <title> Model-based reconfiguration: Toward an integration with diagnosis. </title> <booktitle> In Proceedings, </booktitle> <volume> AAAI-91 (Volume 2), </volume> <pages> pages 836-841, </pages> <address> Ana-heim, CA, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Lincoln describes a diagnosis algorithm called UD that favors completeness over accuracy [16]. We have argued previously that diagnosis should not be considered separately from reconfiguration <ref> [4] </ref>: it is not abstract accuracy or completeness of diagnosis that is important, but its contribution to successful reconfiguration.
Reference: [5] <author> Ben L. Di Vito, Ricky W. Butler, and James L. Cald-well. </author> <title> High level design proof of a reliable computing platform. </title> <editor> In J. F. Meyer and R. D. Schlichting, editors, </editor> <title> Dependable Computing for Critical Applications|2, </title> <booktitle> volume 6 of Dependable Computing and Fault-Tolerant Systems, </booktitle> <pages> pages 279-306. </pages> <publisher> Springer-Verlag, </publisher> <address> Vienna, Austria, </address> <month> February </month> <year> 1991. </year>
Reference-contexts: By adjusting the voting pattern to the dataflow structure of the application, recovery can be guaranteed in a fixed number of frames <ref> [5] </ref>. 2.3 Residual Weaknesses State machine replication, augmented to provide transient recovery in the manner just described, is an attractively simple architecture that provides robust fault tolerance against transient Byzantine faults that arrive (but do not necessarily clear) sequentially.
Reference: [6] <author> D. Dolev and H. R. </author> <title> Strong. Authenticated algorithms for Byzantine agreement. </title> <journal> SIAM Journal on Computing, </journal> <volume> 12(4) </volume> <pages> 656-666, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: An important parameter to all algorithms for interactive consistency is the number of rounds of information exchange that they perform; no r-round algorithm can withstand more than r simultane 2 ous Byzantine faults <ref> [6, 7] </ref>. Resource constraints on communication usually restrict the number of rounds to some small fixed number|generally one. 3. Exact-match majority voting of actuator outputs masks faults in execution of the main computational tasks. <p> clock synchronization and interactive consistency if some of their failure modes are "not too bad." Hybrid fault models and their associated algorithms consider both Byzantine and less serious kinds of failures occurring in combination [17, 21, 24] while authenticated algorithms use digital signatures to constrain the behavior of faulty channels <ref> [6, 15] </ref>.
Reference: [7] <author> M. Fischer and N. Lynch. </author> <title> A lower bound for the time to assure interactive consistency. </title> <journal> Information Processing Letters, </journal> <volume> 14 </volume> <pages> 183-186, </pages> <year> 1982. </year>
Reference-contexts: An important parameter to all algorithms for interactive consistency is the number of rounds of information exchange that they perform; no r-round algorithm can withstand more than r simultane 2 ous Byzantine faults <ref> [6, 7] </ref>. Resource constraints on communication usually restrict the number of rounds to some small fixed number|generally one. 3. Exact-match majority voting of actuator outputs masks faults in execution of the main computational tasks. <p> These approaches (which can be used in combination [8]) increase the total number of faults that can be tolerated in clock synchronization and interactive consistency, but Byzantine failures can never exceed the number of rounds in interactive consistency <ref> [7] </ref>, nor one third of the channels in clock synchronization [9]. 2.2 Transient Recovery As noted, transient faults are many times more common than permanent faults. When a channel whose 4 A channel fails when it manifests incorrect behavior at some external interface.
Reference: [8] <author> Li Gong, Patrick Lincoln, and John Rushby. </author> <title> Byzan-tine agreement with authentication: Observations and applications in tolerating hybrid and link faults. </title> <booktitle> In Dependable Computing for Critical Applications|5, </booktitle> <pages> pages 79-90, </pages> <address> Champaign, IL, </address> <month> September </month> <year> 1995. </year> <note> IFIP WG 10.4, preliminary proceedings. </note>
Reference-contexts: These approaches (which can be used in combination <ref> [8] </ref>) increase the total number of faults that can be tolerated in clock synchronization and interactive consistency, but Byzantine failures can never exceed the number of rounds in interactive consistency [7], nor one third of the channels in clock synchronization [9]. 2.2 Transient Recovery As noted, transient faults are many times <p> Oral Message algorithms for interactive consistency require nothing; authenticated algorithms can require a significant quantity of data to maintain crypto-synch and to foil spoofing attacks <ref> [8] </ref>, which militates against their use in combination with transient recovery. 3 the pattern through which portions of state data are replaced by majority voted copies [20]. <p> This can probably be done less often than every frame, thereby minimizing its cost. 4.2.2 Other Interactive Consistency Algorithms. Interactive consistency algorithms derived from OM, such as OMH for the hybrid fault model [17], and ZA for the authenticated case <ref> [8] </ref>, can be extended in exactly the same way as OM, since they are also based on majority voting (albeit in modified form).
Reference: [9] <author> J. Y. Halpern, B. B. Simons, H. R. Strong, and D. Dolev. </author> <title> Fault-tolerant clock synchronization. </title> <booktitle> In Third ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 89-102, </pages> <address> Vancouver, B.C., Canada, </address> <month> August </month> <year> 1984. </year> <institution> Association for Computing Machinery. </institution>
Reference-contexts: Synchronization between nonfaulty channels must be achieved in the presence of disruption caused by faulty channels. The number of faulty channels that can be tolerated depends on the algorithm and fault model employed, but under the weakest assumptions it is fewer than one-third <ref> [9, 14] </ref>. 2. Interactive consistency ensures that all nonfaulty channels start their computations with identical sets of sensor readings. <p> These approaches (which can be used in combination [8]) increase the total number of faults that can be tolerated in clock synchronization and interactive consistency, but Byzantine failures can never exceed the number of rounds in interactive consistency [7], nor one third of the channels in clock synchronization <ref> [9] </ref>. 2.2 Transient Recovery As noted, transient faults are many times more common than permanent faults. When a channel whose 4 A channel fails when it manifests incorrect behavior at some external interface.
Reference: [10] <institution> Fault Tolerant Computing Symposium 23, Toulouse, </institution> <address> France, June 1993. </address> <publisher> IEEE Computer Society. </publisher>
Reference: [11] <author> R. M. Kieckhafer, C. J. Walter, A. M. Finn, and P. M. Thambidurai. </author> <title> The MAFT architecture for distributed fault tolerance. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(4) </volume> <pages> 398-405, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Section 6. 2 State Machine Replication with Transient Recovery Our focus is fault tolerance through active replication of components that may exhibit Byzantine (i.e., uncontrolled or arbitrary) failures, using what is sometimes called the state machine approach [22], in the form introduced by SIFT [28] and subsequently refined by MAFT <ref> [11] </ref>. 3 A frame-synchronous architecture based on state machine replication operates as follows. There are n 3 Schneider's tutorial [22] describes the state machine approach in its client-server form. <p> The MAFT architecture <ref> [11, 25] </ref> took a similar overall approach to that proposed here, with its "operating set" being similar to our "core," but without our extended treatment for interactive consistency.
Reference: [12] <author> Hermann Kopetz et al. </author> <title> Distributed fault-tolerant real-time systems: The Mars approach. </title> <journal> IEEE Micro, </journal> <volume> 9(1) </volume> <pages> 25-40, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: Here, we use the original SIFT form (which is suited to control applications) where both clients and servers are combined into a single replicated application. Other systems that use active replication include Delta-4 [2], FTP [13], and Mars <ref> [12] </ref>. replicated major components, generally called channels, that are electrically and physically isolated from each other so that their failures will, to the extent possible, be independent. Each channel has a processor, some memory, and access to sensors and actuators.
Reference: [13] <author> Jaynarayan H. Lala and Richard E. Harper. </author> <title> Architectural principles for safety-critical real-time applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 82(1) </volume> <pages> 25-40, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Here, we use the original SIFT form (which is suited to control applications) where both clients and servers are combined into a single replicated application. Other systems that use active replication include Delta-4 [2], FTP <ref> [13] </ref>, and Mars [12]. replicated major components, generally called channels, that are electrically and physically isolated from each other so that their failures will, to the extent possible, be independent. Each channel has a processor, some memory, and access to sensors and actuators.
Reference: [14] <author> L. Lamport and P. M. Melliar-Smith. </author> <title> Synchronizing clocks in the presence of faults. </title> <journal> Journal of the ACM, </journal> <volume> 32(1) </volume> <pages> 52-78, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: Synchronization between nonfaulty channels must be achieved in the presence of disruption caused by faulty channels. The number of faulty channels that can be tolerated depends on the algorithm and fault model employed, but under the weakest assumptions it is fewer than one-third <ref> [9, 14] </ref>. 2. Interactive consistency ensures that all nonfaulty channels start their computations with identical sets of sensor readings. <p> The idea is that the core members synchronize among themselves using an algorithm such as interactive convergence <ref> [14] </ref>, ignoring inputs from probationers (in the case of interactive convergence, this essentially means treating their clock differences as if they are zero).
Reference: [15] <author> Leslie Lamport, Robert Shostak, and Marshall Pease. </author> <title> The Byzantine Generals problem. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(3) </volume> <pages> 382-401, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: clock synchronization and interactive consistency if some of their failure modes are "not too bad." Hybrid fault models and their associated algorithms consider both Byzantine and less serious kinds of failures occurring in combination [17, 21, 24] while authenticated algorithms use digital signatures to constrain the behavior of faulty channels <ref> [6, 15] </ref>. <p> Interactive consistency is the symmetric version of Byzantine Agreement: in the latter problem, there is a distinguished processor called the transmitter (it is called the "Commanding General" in the metaphor of the Byzantine Generals <ref> [15] </ref>) and the goal is to distribute its private value to all the other processors 7 The need to maintain an overall majority of nonfaulty channels limits the number of faults to b n1 2 c. (which are called receivers) in a manner that ensures Agreement and Validity. <p> The r-round algorithm OM (r) can solve the problem under these assumptions, provided r t and n &gt; 3r <ref> [15] </ref>. The algorithm is described recursively; the base case is OM (0). 1. The transmitter sends its value to every receiver. 2. Each receiver uses the value obtained from the transmitter, or some arbitrary, but fixed, value if nothing is received. <p> It is not clear whether algorithms such as the classical Signed Messages algorithm SM <ref> [15] </ref> that do not use majority voting can be extended in a similar manner. 5 Clock Synchronization, Diagnosis, and Group Membership In this section, we briefly describe issues in these additional elements of the architecture. 5.1 Clock Synchronization Unlike interactive consistency, where it can be necessary for probationers to participate fully
Reference: [16] <author> Patrick Lincoln. </author> <title> Formally verified algorithms for diagnosis of manifest, symmetric, link, and Byzantine faults. </title> <type> Technical Report SRI-CSL-95-14, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Several authors develop several sophisticated diagnosis algorithms of this type [1, 26, 27]; the accuracy of some of these has been formally verified by Lincoln <ref> [16] </ref>. This approach can be inaccurate in the presence of transient faults, however. For example, in the scenario just given, a and b may be transiently faulty in the (different) frames when they accuse x of sending an incorrect value. <p> Lincoln describes a diagnosis algorithm called UD that favors completeness over accuracy <ref> [16] </ref>. We have argued previously that diagnosis should not be considered separately from reconfiguration [4]: it is not abstract accuracy or completeness of diagnosis that is important, but its contribution to successful reconfiguration.
Reference: [17] <author> Patrick Lincoln and John Rushby. </author> <title> A formally verified algorithm for interactive consistency under a hybrid fault model. </title> <booktitle> In Fault Tolerant Computing Symposium 23 [10], </booktitle> <pages> pages 402-411. </pages>
Reference-contexts: It is possible to tolerate more faulty channels in clock synchronization and interactive consistency if some of their failure modes are "not too bad." Hybrid fault models and their associated algorithms consider both Byzantine and less serious kinds of failures occurring in combination <ref> [17, 21, 24] </ref> while authenticated algorithms use digital signatures to constrain the behavior of faulty channels [6, 15]. <p> This can probably be done less often than every frame, thereby minimizing its cost. 4.2.2 Other Interactive Consistency Algorithms. Interactive consistency algorithms derived from OM, such as OMH for the hybrid fault model <ref> [17] </ref>, and ZA for the authenticated case [8], can be extended in exactly the same way as OM, since they are also based on majority voting (albeit in modified form).
Reference: [18] <author> M. Pease, R. Shostak, and L. Lamport. </author> <title> Reaching agreement in the presence of faults. </title> <journal> Journal of the ACM, </journal> <volume> 27(2) </volume> <pages> 228-234, </pages> <month> April </month> <year> 1980. </year>
Reference-contexts: We then describe the extended problem and modified algorithms. 4.1 Classical Interactive Consistency In the classical problem of Interactive Consistency <ref> [18] </ref>, there are n processors, of which some number t may be faulty.
Reference: [19] <author> Stefan Poledna. </author> <title> Replica determinism in distributed real-time systems: A brief survey. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6 </volume> <pages> 289-316, </pages> <year> 1994. </year>
Reference-contexts: There are three key elements to this architecture; collectively they ensure and exploit replica determinism <ref> [19] </ref>. 1. Clock synchronization ensures that all nonfaulty channels can coordinate their actions and communications using a common notion of time. Synchronization between nonfaulty channels must be achieved in the presence of disruption caused by faulty channels.
Reference: [20] <author> John Rushby. </author> <title> A fault-masking and transient-recovery model for digital flight-control systems. </title> <editor> In Jan Vytopil, editor, </editor> <booktitle> Formal Techniques in Real-Time and Fault-Tolerant Systems, Kluwer International Series in Engineering and Computer Science, chapter 5, </booktitle> <pages> pages 109-136. </pages> <year> 1993. </year>
Reference-contexts: Provided that enough channels remain nonfaulty at all times, and provided state data are not contaminated faster than they are repaired, this approach provides self-stabilizing recovery from transient faults in the main computational tasks <ref> [20] </ref>. <p> Message algorithms for interactive consistency require nothing; authenticated algorithms can require a significant quantity of data to maintain crypto-synch and to foil spoofing attacks [8], which militates against their use in combination with transient recovery. 3 the pattern through which portions of state data are replaced by majority voted copies <ref> [20] </ref>.
Reference: [21] <author> John Rushby. </author> <title> A formally verified algorithm for clock synchronization under a hybrid fault model. </title> <booktitle> In Thirteenth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 304-313, </pages> <address> Los Angeles, CA, </address> <month> August </month> <year> 1994. </year> <institution> Association for Computing Machinery. </institution>
Reference-contexts: It is possible to tolerate more faulty channels in clock synchronization and interactive consistency if some of their failure modes are "not too bad." Hybrid fault models and their associated algorithms consider both Byzantine and less serious kinds of failures occurring in combination <ref> [17, 21, 24] </ref> while authenticated algorithms use digital signatures to constrain the behavior of faulty channels [6, 15].
Reference: [22] <author> Fred B. Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: The other algorithms required are outlined in Section 5 and conclusions presented in Section 6. 2 State Machine Replication with Transient Recovery Our focus is fault tolerance through active replication of components that may exhibit Byzantine (i.e., uncontrolled or arbitrary) failures, using what is sometimes called the state machine approach <ref> [22] </ref>, in the form introduced by SIFT [28] and subsequently refined by MAFT [11]. 3 A frame-synchronous architecture based on state machine replication operates as follows. There are n 3 Schneider's tutorial [22] describes the state machine approach in its client-server form. <p> that may exhibit Byzantine (i.e., uncontrolled or arbitrary) failures, using what is sometimes called the state machine approach <ref> [22] </ref>, in the form introduced by SIFT [28] and subsequently refined by MAFT [11]. 3 A frame-synchronous architecture based on state machine replication operates as follows. There are n 3 Schneider's tutorial [22] describes the state machine approach in its client-server form. Here, we use the original SIFT form (which is suited to control applications) where both clients and servers are combined into a single replicated application.
Reference: [23] <author> Kang C. Shin and P. Ramanathan. </author> <title> Diagnosis of processors with Byzantine faults in a distributed computing system. </title> <booktitle> In Fault Tolerant Computing Symposium 17, </booktitle> <pages> pages 55-60, </pages> <address> Pittsburgh, PA, </address> <month> July </month> <year> 1987. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Unfortunately, it is provably impossible to achieve both accurate (no nonfaulty components are identified as faulty) and complete (all faulty components are identified) diagnosis in the presence of Byzantine faults <ref> [23] </ref>. Another disadvantage of simple reconfiguration is that it provides poor treatment for transient faults| which experience shows to be far more common than permanent faults. A transiently faulty component is one that malfunctions for a while and then spontaneously recovers.
Reference: [24] <author> Philip Thambidurai and You-Keun Park. </author> <title> Interactive consistency with multiple failure modes. </title> <booktitle> In 7th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 93-100, </pages> <address> Columbus, OH, Oct. 1988. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: It is possible to tolerate more faulty channels in clock synchronization and interactive consistency if some of their failure modes are "not too bad." Hybrid fault models and their associated algorithms consider both Byzantine and less serious kinds of failures occurring in combination <ref> [17, 21, 24] </ref> while authenticated algorithms use digital signatures to constrain the behavior of faulty channels [6, 15].
Reference: [25] <author> P. Thambidurai, A. M. Finn, R. M. Kieckhafer, and C. J. Walter. </author> <title> Clock synchronization in MAFT. </title> <booktitle> In Fault Tolerant Computing Symposium 19, </booktitle> <pages> pages 142-149, </pages> <address> Chicago, IL, June 1989. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: The MAFT architecture <ref> [11, 25] </ref> took a similar overall approach to that proposed here, with its "operating set" being similar to our "core," but without our extended treatment for interactive consistency.
Reference: [26] <author> C. J. Walter, N. Suri, and M. M. Hugue. </author> <title> Continual online diagnosis of hybrid faults. </title> <editor> In F. Cristian, G. Le Lann, and T. Lunt, editors, </editor> <title> Dependable Computing for Critical Applications|4, </title> <booktitle> volume 9 of Dependable Computing and Fault-Tolerant Systems, </booktitle> <pages> pages 233-249. </pages> <publisher> Springer-Verlag, </publisher> <address> Vienna, Austria, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Several authors develop several sophisticated diagnosis algorithms of this type <ref> [1, 26, 27] </ref>; the accuracy of some of these has been formally verified by Lincoln [16]. This approach can be inaccurate in the presence of transient faults, however.
Reference: [27] <author> Chris J. Walter. </author> <title> Identifying the cause of detected errors. </title> <booktitle> In Fault Tolerant Computing Symposium 20, </booktitle> <pages> pages 48-55, </pages> <institution> Newcastle upon Tyne, </institution> <address> UK, June 1990. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Several authors develop several sophisticated diagnosis algorithms of this type <ref> [1, 26, 27] </ref>; the accuracy of some of these has been formally verified by Lincoln [16]. This approach can be inaccurate in the presence of transient faults, however.
Reference: [28] <editor> John H. Wensley et al. SIFT: </editor> <title> Design and analysis of a fault-tolerant computer for aircraft control. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 66(10) </volume> <pages> 1240-1255, </pages> <month> October </month> <year> 1978. </year> <month> 10 </month>
Reference-contexts: Section 5 and conclusions presented in Section 6. 2 State Machine Replication with Transient Recovery Our focus is fault tolerance through active replication of components that may exhibit Byzantine (i.e., uncontrolled or arbitrary) failures, using what is sometimes called the state machine approach [22], in the form introduced by SIFT <ref> [28] </ref> and subsequently refined by MAFT [11]. 3 A frame-synchronous architecture based on state machine replication operates as follows. There are n 3 Schneider's tutorial [22] describes the state machine approach in its client-server form. <p> Therefore exact-match majority voting will mask the outputs of failed channels, provided that fewer than half the channels are faulty <ref> [28] </ref>. 4 2.1 Multiple-Fault Tolerance Notice the different number of faulty channels tolerated by the different elements of this architecture: fewer than a third for clock synchronization and interactive consistency, and fewer than a half for the computational tasks.
References-found: 28

