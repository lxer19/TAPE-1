URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-91-22.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Empirical Evaluation of Multilevel Logic Minimization Tools For a Lookup Table-based Field-Programmable Gate Array Technology  
Author: Martine Schlag, Pak K. Chan and Jackson Kong 
Address: Santa Cruz, California 95064, U.S.A.  
Affiliation: Computer Engineering University of California, Santa Cruz  
Abstract: We examine empirically the performance of multi-level logic minimization tools for a lookup table-based Field-Programmable Gate Array (FPGA) technology. The experiments are conducted by using the university tools misII for combinational logic minimization and mustang for state assignment, and the industrial tools xnfmap for technology mapping and apr for automatic placement and routing. We measure the quality of the multi-level logic minimization tools by the number of routed configurable logic blocks (CLBs) in the FPGA realization. We report three results: a) there is a linear relationship between the number of literals and the number of routed CLBs, and b) in all 34 MCNC-89 benchmark finite state machines, one-hot state assignment resulted in substantially less CLBs than any other state encoding methods available in mustang, c) we present a delay model to provide routing delay prediction based on fanout, and apply the model to estimate the delays of the FPGA implementation of logic expressions prior to technology mapping, place and route. These results are useful for prototyping a design in FPGAs, and then transferring the design to a different technology (e.g., CMOS standard cell). It provides valuable information on the difference in performance of a design realized in different technologies.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> XILINX: </author> <title> The Programmable Gate Array Data Book. 2100 Logic Drive, </title> <address> San Jose, CA 95124, </address> <year> 1991. </year>
Reference-contexts: But little is known about the performance of multi-level logic minimization tools with respect to FPGAs. So to answer this question, we examine empirically the performance of multi-level logic minimization tools for a lookup table-based FPGA realization <ref> [1] </ref>. The experiments are conducted by using misII2.0 for combinational logic minimization and mustang for state assignment. The vendor's supplied program xnfmap is used for technology mapping, and apr is used for automatic placement and routing 1 . <p> With realization times measured in hours, systems incorporating up to thousands of gates on a single FPGA can be designed, programmed and evaluated within a few weeks <ref> [1] </ref>. The basic building block which provides the logic functionality in the XC3000 series FPGA architecture is shown in Fig. 2. This is a Configurable Logic Block (CLB), which has a maximum of 5 logic inputs. Each CLB has a programmable combinational logic section and two flip-flops. <p> One concerns the constituents of delay in a routed design. The second concerns the structures of a design before and after technology mapping onto a FPGA. 6.1 Delay components in an FPGA Delays in FPGA-based design are layout sensitive. The sources of delay in a Xilinx FPGA <ref> [1] </ref> are: 1. Configurable Logic Block delay: this is the delay due to the combinational logic, setup time, and flip-flops in a CLB. 2. I/O Block delay: this is the delay due to the I/O buffers and pads. 3. Interconnect delay: there are three types: a) Direct lines.
Reference: [2] <author> C. Ebeling and Z. Wu, "WireLisp: </author> <title> Combining graphics and procedures in a circuit specification language," </title> <booktitle> in IEEE International Conference on Computer-Aided Design ICCAD-89, </booktitle> <address> (Santa Clara, CA), </address> <pages> pp. 322-325, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> 5-9 November </month> <year> 1989. </year>
Reference-contexts: The outputs of the combinational logic section can go directly to x and y or through flip-flops FF1 and FF2. 3 A system for rapid prototyping using FPGAs As depicted in Fig. 1, our design environment is based on wireC which uses xdp as the front end for schematic entry <ref> [2] </ref>. We have configured wireC to handle eqn format file generated by misII [3]. We built a parts library for wireC which outputs Xilinx Netlist 1 Xnfopt, which was developed by Exemplar Logic, Inc., has been frequently misidentified as the Xilinx mapper in the literature.
Reference: [3] <author> R. K. Brayton, R. Rudell, A. Sangiovanni-Vincentelli, and A. R. Wang, </author> <title> "MIS: A Multiple-Level Logic Optimization System," </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. CAD-6, </volume> <pages> pp. 1062-1081, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: We have configured wireC to handle eqn format file generated by misII <ref> [3] </ref>. We built a parts library for wireC which outputs Xilinx Netlist 1 Xnfopt, which was developed by Exemplar Logic, Inc., has been frequently misidentified as the Xilinx mapper in the literature. <p> Because one of the goals of research in multi-level logic minimization is the development of technology independent minimization algorithms, literal count in logic expressions has been used as an indicator of the quality of their algorithms <ref> [5, 3, 6] </ref>. Both intuition [3] and empirical studies [7] support the use of this measure. In particular, the experiments reported in [7] were conducted with respect to standard cell technology. We study the performance of misII with respect to FPGA technology to further strengthen the argument. <p> Because one of the goals of research in multi-level logic minimization is the development of technology independent minimization algorithms, literal count in logic expressions has been used as an indicator of the quality of their algorithms [5, 3, 6]. Both intuition <ref> [3] </ref> and empirical studies [7] support the use of this measure. In particular, the experiments reported in [7] were conducted with respect to standard cell technology. We study the performance of misII with respect to FPGA technology to further strengthen the argument. We use two benchmark suites.
Reference: [4] <institution> ALDEC, 3525 Old Conejo Rd., </institution> <address> Suite 111, Newbury Park, CA 91320, </address> <note> Susie Simulator: User's Guide, </note> <year> 1989. </year>
Reference-contexts: The XNF files are then mapped by the vendor's xnfmap technology mapper to generate LCA files. We use the vendor's apr program to place and route the LCA netlist to generate the final design. The design can be simulated by susie <ref> [4] </ref> at the functional level before placement and routing, and at the timing level afterwards. 4 Relationship between the number of literals and number of CLBS We study the performance of two technology independent minimization tools: misII and mustang for the FPGA technology.
Reference: [5] <author> D. Bostick, G. D. Hachtel, M. R. Lightner, P. Moceyunas, C. R. Morrison, and D. Ravenscroft, </author> <title> "The Boulder optimal logic design system," </title> <booktitle> in IEEE International Conference on Computer-Aided Design ICCAD-87, </booktitle> <address> (Santa Clara, CA), </address> <pages> pp. 62-65, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> 9-12 November </month> <year> 1987. </year>
Reference-contexts: Because one of the goals of research in multi-level logic minimization is the development of technology independent minimization algorithms, literal count in logic expressions has been used as an indicator of the quality of their algorithms <ref> [5, 3, 6] </ref>. Both intuition [3] and empirical studies [7] support the use of this measure. In particular, the experiments reported in [7] were conducted with respect to standard cell technology. We study the performance of misII with respect to FPGA technology to further strengthen the argument.
Reference: [6] <author> K. Bartlett, W. Cohen, A. D. Geus, and G. Hachtel, </author> <title> "Synthesis and Optimization of Multilevel Logic under Timing Constraints," </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. CAD-5, </volume> <pages> pp. 582-595, </pages> <month> Oct. </month> <year> 1986. </year>
Reference-contexts: Because one of the goals of research in multi-level logic minimization is the development of technology independent minimization algorithms, literal count in logic expressions has been used as an indicator of the quality of their algorithms <ref> [5, 3, 6] </ref>. Both intuition [3] and empirical studies [7] support the use of this measure. In particular, the experiments reported in [7] were conducted with respect to standard cell technology. We study the performance of misII with respect to FPGA technology to further strengthen the argument.
Reference: [7] <author> M. Lightner and W. Wolf, </author> <title> "Experiments in Logic Optimization," </title> <booktitle> in IEEE International Conference on Computer-Aided Design ICCAD-88, </booktitle> <address> (Santa Clara, CA), </address> <pages> pp. 286-289, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> 7-10 November </month> <year> 1988. </year>
Reference-contexts: Because one of the goals of research in multi-level logic minimization is the development of technology independent minimization algorithms, literal count in logic expressions has been used as an indicator of the quality of their algorithms [5, 3, 6]. Both intuition [3] and empirical studies <ref> [7] </ref> support the use of this measure. In particular, the experiments reported in [7] were conducted with respect to standard cell technology. We study the performance of misII with respect to FPGA technology to further strengthen the argument. We use two benchmark suites. <p> Both intuition [3] and empirical studies <ref> [7] </ref> support the use of this measure. In particular, the experiments reported in [7] were conducted with respect to standard cell technology. We study the performance of misII with respect to FPGA technology to further strengthen the argument. We use two benchmark suites. The first suite of circuits come from the MCNC-89 finite state machine benchmarks [8].
Reference: [8] <author> R. Lisanke, </author> <title> Logic Synthesis and Optimization Benchmarks, User Guide, </title> <type> Version 2.0. </type> <institution> Microelectronics Center of North Carolina, </institution> <address> MCNC P.O. Box 12889, Research Triangle Park, NC 27709, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: In particular, the experiments reported in [7] were conducted with respect to standard cell technology. We study the performance of misII with respect to FPGA technology to further strengthen the argument. We use two benchmark suites. The first suite of circuits come from the MCNC-89 finite state machine benchmarks <ref> [8] </ref>. Our experiments are conducted by using mustang for state assignment, and misII for logic expression minimization using the algebraic standard script once. Infeasible expressions (with the number of fanins greater than 5) are repetitively splitted. <p> We pose the following question. What is the best strategy, measured in terms of the number of CLBs and speed, among the options provided by the state assignment program mustang [15]? 5.1 State encoding for minimizing CLBs The finite state machines are from the MCNC-89 benchmarks <ref> [8] </ref>. The experiment is conducted using mustang for state assignment, and misII for logic expression minimization applying the standard script once. The logic expressions are translated to XNF format and technology mapped by xnfmap to produce LCA files.
Reference: [9] <author> R. J. Francis, J. Rose, and Z. Vranesic, "Chortle-crf: </author> <title> Fast technology mapping for lookup table-based FPGAs," </title> <booktitle> in ACM IEEE 28 th Design Automation Conference Proceedings, </booktitle> <address> (San Francisco, California), </address> <pages> pp. 227-233, </pages> <month> June </month> <year> 1991. </year> <month> 8 </month>
Reference-contexts: The second suite of circuits come from the MCNC-89 combinational logic benchmarks. Only those circuits that can be implemented with the XC3000 series FPGAs are included. The circuits are mapped using three different lookup table-based technology mappers: Chortle-crf <ref> [9] </ref>, xnfmap and rmap [10]. Fig. 4 shows an empirical relationship between the number of literals and the number of (routed) CLBs. Again, it shows the ratio of literals to CLBs is roughly 5:1, with no essential difference among different technology mappers. <p> This requires some understanding of the interaction between misII and the mapper xnfmap. Notice that we are actually measuring the performance of misII in relationship to a single technology mapper xnfmap 2 . Other mappers for FPGAs exist <ref> [9, 11, 12, 13, 14] </ref>, 2 Xnfmap is a complete mapper, it does mapping of both combinational and sequential logic. Mappers such as mispga and chortle are limited to mapping of combinational logic. 3 but they are limited to combinational circuits.
Reference: [10] <author> M. Schlag, J. Kong, and P. K. Chan, </author> <title> "Routability-driven technology mapping for lookup table-based FPGAs," </title> <type> Tech. Rep. </type> <institution> UCSC-CRL-92-06, Board of Studies in Computer Engineering, University of California at Santa Cruz, </institution> <address> Santa Cruz, CA 95064, </address> <month> Feb. </month> <year> 1992. </year> <note> To appear in ICCD'92. </note>
Reference-contexts: The second suite of circuits come from the MCNC-89 combinational logic benchmarks. Only those circuits that can be implemented with the XC3000 series FPGAs are included. The circuits are mapped using three different lookup table-based technology mappers: Chortle-crf [9], xnfmap and rmap <ref> [10] </ref>. Fig. 4 shows an empirical relationship between the number of literals and the number of (routed) CLBs. Again, it shows the ratio of literals to CLBs is roughly 5:1, with no essential difference among different technology mappers.
Reference: [11] <author> R. Murgai, Y. Nishizaki, N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> "Logic synthesis for programmable gate arrays," </title> <booktitle> in ACM IEEE 27 th Design Automation Conference Proceedings, </booktitle> <address> (Orlando, Florida), </address> <pages> pp. 620-625, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This requires some understanding of the interaction between misII and the mapper xnfmap. Notice that we are actually measuring the performance of misII in relationship to a single technology mapper xnfmap 2 . Other mappers for FPGAs exist <ref> [9, 11, 12, 13, 14] </ref>, 2 Xnfmap is a complete mapper, it does mapping of both combinational and sequential logic. Mappers such as mispga and chortle are limited to mapping of combinational logic. 3 but they are limited to combinational circuits.
Reference: [12] <author> R. Murgai, N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> "Improved logic synthesis algorithms for table look up architectures," </title> <booktitle> in IEEE International Conference on Computer-Aided Design ICCAD-91, </booktitle> <address> (Santa Clara, California), </address> <pages> pp. 564-567, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: This requires some understanding of the interaction between misII and the mapper xnfmap. Notice that we are actually measuring the performance of misII in relationship to a single technology mapper xnfmap 2 . Other mappers for FPGAs exist <ref> [9, 11, 12, 13, 14] </ref>, 2 Xnfmap is a complete mapper, it does mapping of both combinational and sequential logic. Mappers such as mispga and chortle are limited to mapping of combinational logic. 3 but they are limited to combinational circuits.
Reference: [13] <author> R. J. Francis, J. Rose, and K. Chung, "Chortle: </author> <title> A technology mapping program for lookup table-based field programmable gate arrays," </title> <booktitle> in ACM IEEE 27 th Design Automation Conference Proceedings, </booktitle> <address> (Orlando, Florida), </address> <pages> pp. 613-619, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This requires some understanding of the interaction between misII and the mapper xnfmap. Notice that we are actually measuring the performance of misII in relationship to a single technology mapper xnfmap 2 . Other mappers for FPGAs exist <ref> [9, 11, 12, 13, 14] </ref>, 2 Xnfmap is a complete mapper, it does mapping of both combinational and sequential logic. Mappers such as mispga and chortle are limited to mapping of combinational logic. 3 but they are limited to combinational circuits.
Reference: [14] <author> K. Karplus, "Xmap: </author> <title> a technology mapper for table-lookup field programmable gate arrays," </title> <booktitle> in ACM IEEE 28 th Design Automation Conference Proceedings, </booktitle> <address> (San Fran-cisco, California), </address> <pages> pp. 240-243, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: This requires some understanding of the interaction between misII and the mapper xnfmap. Notice that we are actually measuring the performance of misII in relationship to a single technology mapper xnfmap 2 . Other mappers for FPGAs exist <ref> [9, 11, 12, 13, 14] </ref>, 2 Xnfmap is a complete mapper, it does mapping of both combinational and sequential logic. Mappers such as mispga and chortle are limited to mapping of combinational logic. 3 but they are limited to combinational circuits.
Reference: [15] <author> S. Devadas, H.-K. Ma, A. R. Newton, and A. Sangiovanni-Vincentelli, "MUSTANG: </author> <title> State assignment of finite state machines targeting multilevel logic implementations," </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. CAD-7, </volume> <pages> pp. 1290-1299, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: Research in multi-level logic minimization employs literal count in the combinational part of the FSM as the indicator of the quality of a state assignment algorithm <ref> [15, 16] </ref>. For that matter, it is not widely reported that one-hot encoding provides small literal counts. Perhaps it was dismissed because the number of flip-flops employed in the one-hot encoding scheme is the number of states. <p> The naive one-hot encoding after all may be the winner over elaborate minimum-length encoding schemes developed [18] 3 . We pose the following question. What is the best strategy, measured in terms of the number of CLBs and speed, among the options provided by the state assignment program mustang <ref> [15] </ref>? 5.1 State encoding for minimizing CLBs The finite state machines are from the MCNC-89 benchmarks [8]. The experiment is conducted using mustang for state assignment, and misII for logic expression minimization applying the standard script once.
Reference: [16] <author> M. Bolotski, D. Camporese, and R. Barman, </author> <title> "State Assignment for Multi-Level Logic using Dynamic Literal Estimation," </title> <booktitle> in IEEE International Conference on Computer-Aided Design ICCAD-89, </booktitle> <address> (Santa Clara, CA), </address> <pages> pp. 220-223, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> 6-9 November </month> <year> 1989. </year>
Reference-contexts: Research in multi-level logic minimization employs literal count in the combinational part of the FSM as the indicator of the quality of a state assignment algorithm <ref> [15, 16] </ref>. For that matter, it is not widely reported that one-hot encoding provides small literal counts. Perhaps it was dismissed because the number of flip-flops employed in the one-hot encoding scheme is the number of states.
Reference: [17] <author> S. H. Unger, </author> <title> The Essence of Logic Circuits. </title> <address> Englewood Cliffs, New Jersey: </address> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: Moreover, because the transitions in one-hot encoding are all two-step, it leads to circuits slower than could be built employing a single-transition-time assignment <ref> [17, p.177] </ref>. However, in the FPGA technology, flip-flops are essentially free in XC3000 series, as each CLB has one or two programmable flip-flops. The naive one-hot encoding after all may be the winner over elaborate minimum-length encoding schemes developed [18] 3 . We pose the following question.
Reference: [18] <author> S. K. Knapp, </author> <title> "Accelerate FPGA macros with one-hot approach," </title> <booktitle> Electronic Design, </booktitle> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: However, in the FPGA technology, flip-flops are essentially free in XC3000 series, as each CLB has one or two programmable flip-flops. The naive one-hot encoding after all may be the winner over elaborate minimum-length encoding schemes developed <ref> [18] </ref> 3 . We pose the following question. What is the best strategy, measured in terms of the number of CLBs and speed, among the options provided by the state assignment program mustang [15]? 5.1 State encoding for minimizing CLBs The finite state machines are from the MCNC-89 benchmarks [8]. <p> However, the literal counts for one-hot encoding using the short standard script are comparable to other encoding methods using the long optimization script. 3 Our experiments were conducted in Aug 1990, without prior knowledge of <ref> [18] </ref>. 5 5.2 State encoding and delay It is informative to know the speed of the finite state machines under different methods of encoding. Table 3 shows the speed reported by the design editor xact of FSMs encoded with different strategies.
Reference: [19] <author> D. E. Wallace and M. S. </author> <title> Chandrasekhar, "High-Level Delay Estimation for Technology-Independent Logic Equations," </title> <booktitle> in IEEE International Conference on Computer-Aided Design ICCAD-90, </booktitle> <address> (Santa Clara, CA), </address> <pages> pp. 188-191, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: We ask: can we estimate the delay of a routed design simply from the logic expressions, prior to technology mapping, placement and routing? This concept arose from the work of <ref> [19] </ref> on delay estimation from technology independent logic equations. There are two aspects to this question. One concerns the constituents of delay in a routed design.
Reference: [20] <author> X. Du, G. Hachtel, B. Lin, and A. R. </author> <title> Newton, "MUSE: A multilevel symbolic encoding algorithm for state assignment," </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. CAD-10, </volume> <pages> pp. 28-38, </pages> <month> January </month> <year> 1991. </year> <month> 9 </month>
Reference-contexts: One-hot encoded FSMs tend to be more routable and outperform some of their single-transition-time 7 assignment counterparts by substantial margins, both in speed and the number of CLBs. Finally, we note that as there have been advances in algorithms for state assignment <ref> [20] </ref>, it would be interesting to study the feasibility of MUSE for FPGA technology. 7.1 Acknowledgements The authors are grateful for the comments of the referees. Martine Schlag was supported in part by the National Science Foundation Presidential Young Investigator Grant No. MIP-8896276.
References-found: 20

