URL: http://compgeom.cs.uiuc.edu/~jeffe/pubs/relativex.ps.gz
Refering-URL: http://compgeom.cs.uiuc.edu/~jeffe/pubs/relative.html
Root-URL: http://www.cs.uiuc.edu
Title: On the Relative Complexities of Some Geometric Problems (Extended Abstract)  
Author: Jeff Erickson 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P. Agarwal and J. Matousek. </author> <type> Personal communication, </type> <note> reported in [3], </note> <year> 1991. </year>
Reference-contexts: Nearest Foreign Neighbors in IR 3 : Given a set colored points in IR 3 , find for each point the closest point with a different color. Best known upper bound: O (n 4=3 log 4=3 n) <ref> [1] </ref> 5 6 Jeff Erickson Theorem 15 (Yao [28]). Nearest foreign neighbors is almost harder than Euclidean minimum spanning tree. Proof: We can construct the minimum spanning tree using the following algorithm, originally published by Bor _uvka in 1926 [27]. We start with a forest of n one-vertex trees.
Reference: [2] <author> P. K. Agarwal, B. Aronov, M. Sharir, and S. Suri. </author> <title> Selecting distances in the plane. </title> <journal> Algorithmica, </journal> <volume> 9 </volume> <pages> 495-514, </pages> <year> 1993. </year>
Reference-contexts: Proof: The binary search algorithm described in the proof of Theorem 6 can also be used to solve the distance ranking problem. To select the kth smallest distance, we can perform a parametric search over the space of interpoint distances, using a distance ranking algorithm as an oracle <ref> [2] </ref>. 2 Theorem 8. Distance ranking is harder than unit distance detection in the algebraic decision tree model.
Reference: [3] <author> P. K. Agarwal, H. Edelsbrunner, O. Schwarzkopf, and E. Welzl. </author> <title> Euclidean minimum spanning trees and bichromatic closest pairs. </title> <journal> Discrete Comput. Geom., </journal> <volume> 6 </volume> <pages> 407-422, </pages> <year> 1991. </year>
Reference-contexts: Points Outside Intersecting Unit Balls in IR 3 : Given a set of points and a set of unit balls in IR 3 , such that every ball contains the origin, is any point contained in any ball? Best known upper bound: O (n 4=3 log 4=3 n) <ref> [3] </ref> This computational problem is closely related to the following open combinatorial problem: What is the worst-case combinatorial complexity of the union of n intersecting unit balls in IR 3 ? The best known bounds are only O (n 2 ) and (n). <p> Bichromatic Closest Pair in IR 3 : Given a set of red and blue points in IR 3 , find the closest red-blue pair. Best known upper bound: O (n 4=3 log 4=3 n) <ref> [3] </ref> Theorem 13. Bichromatic closest pair is harder than unit spherical range checking, and unit spherical range checking is almost harder than bichromatic closest pair. <p> Euclidean Minimum Spanning Tree in IR 3 : Given a set of points in IR 3 , con struct its Euclidean minimum spanning tree. Best known upper bound: O (n 4=3 log 4=3 n) <ref> [3] </ref> Theorem 14. Euclidean minimum spanning tree is harder than bichromatic closest pair, and bichromatic closest pair is probably harder than Euclidean minimum spanning tree. Proof: The first half of the theorem is obvious. <p> Euclidean minimum spanning tree is harder than bichromatic closest pair, and bichromatic closest pair is probably harder than Euclidean minimum spanning tree. Proof: The first half of the theorem is obvious. The second half follows from a complicated reduction described by Agarwal et al. <ref> [3, Theorem 5] </ref> 2 Problem P. Nearest Foreign Neighbors in IR 3 : Given a set colored points in IR 3 , find for each point the closest point with a different color.
Reference: [4] <author> M. Ben-Or. </author> <title> Lower bounds for algebraic computation trees. </title> <booktitle> In Proc. 15th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 80-86, </pages> <year> 1983. </year>
Reference-contexts: This lower bound follows from results of Steele and Yao in the algebraic decision tree model [25] and Ben-Or in the algebraic computation tree model <ref> [4] </ref>. <p> We develop our relative complexity results in the algebraic decision tree model of computation [25]. Most of our results hold in more general models of computation such as algebraic computation trees <ref> [4] </ref> or the real RAM [24], but a few results rely on specific properties of the algebraic decision tree model. Specifically, some of our reductions introduce formal infinitesimals into the input before passing it to the 1 subroutine. See, for example, the proof of Theorem 4.
Reference: [5] <author> M. de Berg, M. Overmars, and O. Schwarzkopf. </author> <title> Computing and verifying depth orders. </title> <booktitle> In Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 138-145, </pages> <year> 1992. </year>
Reference-contexts: Problem C. Segment Depth Order Verification: Given a sequence of non-intersecting line segments, is any segment below a segment fol lowing it in the sequence? Best known upper bound: O (n 4=3+" ) <ref> [5] </ref> Theorem 2. Segment depth order verification is harder than Hopcroft's problem. Proof: Suppose we are given a set fp 1 ; : : :; p n g of points and a set fl 1 ; : : : ; l n g of lines. <p> Segment Cyclic Overlap: Given a set of non-intersecting line segments in IR 3 , does any subset overlap cyclically? Best known upper bound: O (n 4=3+" ) <ref> [5] </ref> Theorem 3 (De Berg et al. [5]). Segment depth order verification is harder than segment cyclic overlap. <p> Segment Cyclic Overlap: Given a set of non-intersecting line segments in IR 3 , does any subset overlap cyclically? Best known upper bound: O (n 4=3+" ) <ref> [5] </ref> Theorem 3 (De Berg et al. [5]). Segment depth order verification is harder than segment cyclic overlap. Proof: The segment cyclic overlap problem can be decided by applying any O (n log n) sorting algorithm to the segments, and checking to see if the resulting sequence is actually sorted. 2 Theorem 4.
Reference: [6] <author> S. Bloch, J. Buss, and J. Goldsmith. </author> <title> How hard are n 2 -hard problems? SIGACT News, </title> <booktitle> 25(2) </booktitle> <pages> 83-85, </pages> <year> 1994. </year>
Reference-contexts: are at least as hard as the following simple base problem: Given n numbers, do any three sum to zero? All of these problems seem to require (n 2 ) time to solve; thus, some earlier papers describe them with the more suggestive but misleading term "n 2 -hard". (See <ref> [6] </ref>.) The present classification of "n 4=3 -hard" problems is not so clean. Many of our reductions introduce extra logarithmic factors.
Reference: [7] <author> B. Chazelle. </author> <title> Lower bounds on the complexity of polytope range searching. </title> <journal> J. Amer. Math. Soc., </journal> <volume> 2 </volume> <pages> 637-666, </pages> <year> 1989. </year>
Reference-contexts: Email: jeffe@cs.berkeley.edu are inappropriate in more general settings. Chazelle <ref> [8, 7] </ref> has proven a number of lower bounds for online and o*ine range counting problems in the Fred-man/Yao semigroup arithmetic model [16]. While this model works quite well for studying this sort of counting problem, it is not at all applicable to decision or optimization problems.
Reference: [8] <author> B. Chazelle. </author> <title> Lower bounds for off-line range searching. </title> <booktitle> In Proc. 27th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: Email: jeffe@cs.berkeley.edu are inappropriate in more general settings. Chazelle <ref> [8, 7] </ref> has proven a number of lower bounds for online and o*ine range counting problems in the Fred-man/Yao semigroup arithmetic model [16]. While this model works quite well for studying this sort of counting problem, it is not at all applicable to decision or optimization problems.
Reference: [9] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Diameter, width, closest line pair and parametric searching. </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 </volume> <pages> 183-196, </pages> <year> 1993. </year>
Reference-contexts: Polyhedral Terrain Intersection: Given two polyhedral terrains in IR 3 , do they in tersect? Best known upper bound: O (n 4=3 log O (1) n) <ref> [10, 9, 19] </ref> Problem J. Line Towering: Given a set of red and blue lines in IR 3 , are all the red lines above all the blue lines? Best known upper bound: O (n 4=3 log O (1) n) [9, 19] Theorem 9. <p> Line Towering: Given a set of red and blue lines in IR 3 , are all the red lines above all the blue lines? Best known upper bound: O (n 4=3 log O (1) n) <ref> [9, 19] </ref> Theorem 9. Line towering is almost harder than polyhedral terrain intersection. Proof: Chazelle et al. [10] show that the smallest vertical distance between two polyhedral terrains of total complexity n can be reduced to several instances of line towering, with total complexity O (n log 2 n). <p> Line Cyclic Overlap: Given a set of non-intersecting lines in IR 3 , do any three lines overlap cyclically? Best known upper bound: O (n 4=3 log O (1) n) <ref> [11, 9, 19] </ref> This problem is clearly a special case of segment cyclic overlap (Problem D). Theorem 10 (Chazelle et al. [11]). <p> Farthest Line Pair: Given a set of lines in IR 3 , find the pair of lines separated by the largest vertical distance. Best known upper bound: O (n 4=3 log O (1) n) <ref> [23, 9, 19] </ref> Theorem 11 (Pellegrini [23]). Line towering is almost harder than farthest line pair. Proof: The farthest line pair problem can be solved as follows. Split the set of lines into two classes, and recursively find the farthest line pair within each class. <p> To find the farthest pair between the two subsets, perform a parametric search, using a line towering algorithm as an oracle. See [23] for further details. 2 Theorem 12 (Chazelle et al. <ref> [9] </ref>). Halfspace range checking in IR 5 is probably harder than line towering. Proof: Consider the special case of consistently oriented sets of lines, in which the projections of the blue lines onto the xy-plane all have higher slope than the projections of the red lines.
Reference: [10] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Algorithms for bichromatic line segment problems and polyhedral terrains. </title> <journal> Algorithmica, </journal> <volume> 11 </volume> <pages> 116-132, </pages> <year> 1994. </year>
Reference-contexts: Problem B. Ray Shooting over a Polyhedral Terrain: Given a polyhedral terrain and a set of rays in IR 3 , does any ray hit the terrain? Best known upper bound: O (n 4=3+" ) <ref> [10] </ref> Theorem 1. Ray shooting over a polyhedral terrain is harder than Hopcroft's problem. Proof: Given a set of points and lines, we construct a polyhedral terrain and a set of rays as follows. Construct an arbitrary triangulation of the points. <p> Polyhedral Terrain Intersection: Given two polyhedral terrains in IR 3 , do they in tersect? Best known upper bound: O (n 4=3 log O (1) n) <ref> [10, 9, 19] </ref> Problem J. Line Towering: Given a set of red and blue lines in IR 3 , are all the red lines above all the blue lines? Best known upper bound: O (n 4=3 log O (1) n) [9, 19] Theorem 9. <p> Line towering is almost harder than polyhedral terrain intersection. Proof: Chazelle et al. <ref> [10] </ref> show that the smallest vertical distance between two polyhedral terrains of total complexity n can be reduced to several instances of line towering, with total complexity O (n log 2 n). Their algorithm can also be used to decide if two terrains intersect.
Reference: [11] <author> B. Chazelle, H. Edelsbrunner, L. J. Guibas, R. Pollack, R. Seidel, M. Sharir, and J. Snoeyink. </author> <title> Counting and cutting cycles of lines and rods in space. </title> <booktitle> In Proc. 31st Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 242-251, </pages> <year> 1990. </year>
Reference-contexts: Line Cyclic Overlap: Given a set of non-intersecting lines in IR 3 , do any three lines overlap cyclically? Best known upper bound: O (n 4=3 log O (1) n) <ref> [11, 9, 19] </ref> This problem is clearly a special case of segment cyclic overlap (Problem D). Theorem 10 (Chazelle et al. [11]). <p> Theorem 10 (Chazelle et al. <ref> [11] </ref>).
Reference: [12] <author> K. L. Clarkson and P. W. Shor. </author> <title> Applications of random sampling in computational geometry, II. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 387-421, </pages> <year> 1989. </year>
Reference-contexts: If the complexity of the union is always linear, then Problem M can be solved in O (n log n) expected time using random sampling techniques <ref> [12] </ref>. If we allow balls of different sizes, or do not require a common intersection, the union can have complexity (n 2 ). The intersection of unit balls, on the other hand, always has complexity O (n). Problem M is a special case of several other harder range checking algorithms.
Reference: [13] <author> R. Cole. </author> <title> Slowing down sorting networks to obtain faster sorting algorithms. </title> <journal> J. ACM, </journal> <volume> 34 </volume> <pages> 200-208, </pages> <year> 1987. </year>
Reference-contexts: If T 2 (n) = O (T 1 (n) log c n) for some constant c, we say that 1 is almost harder than 2 . Typically, this means that 2 is solved by a binary search or parametric search <ref> [13, 22] </ref>, using an algorithm for 1 as an oracle, although more complicated reductions are also possible. Finally, we say that 1 is probably harder than 2 if the following conditions are met. 1. 1 is almost harder than 2 . 2.
Reference: [14] <author> J. Erickson. </author> <title> Lower bounds for linear satisfiability problems. </title> <booktitle> In Proc. 6th Annu. ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 388-395, </pages> <year> 1995. </year>
Reference-contexts: In the full paper, we show that any algorithm that solves a problem over the reals also solves the same problem over any real closed field. For a similar argument, see <ref> [14] </ref>. The second problem is that an algebraic decision tree cannot really introduce infinitesimals into the input, since the model only allows query polynomials with real coefficients. Thus, we must show that the infinitesimals can be simulated as follows.
Reference: [15] <author> J. Erickson. </author> <title> New lower bounds for Hopcroft's problem. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom,, </institution> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: While this model works quite well for studying this sort of counting problem, it is not at all applicable to decision or optimization problems. Similarly, Erickson <ref> [15] </ref> has proven (n 4=3 ) lower bounds for a number of problems, including Hopcroft's problem (Problem A) and unit distance detection (Problem F), in what he calls the partitioning algorithm model. This model is specifically tailored towards a specific class of incidence-detection problems. <p> Unit Distance Detection: Given a set of points in the plane, is any pair of points at unit distance? Best known upper bound: O (n 4=3 log 2+" n) [18]. Erickson's lower bound for the unit distance problem follows immediately from his lower bound proof for Hopcroft's problem <ref> [15] </ref>. Nevertheless, we are unable to show that detecting unit distances is harder, or easier, than detecting point-line incidences, nor are we able to show that both are harder than some third sim pler problem.
Reference: [16] <author> M. L. Fredman. </author> <title> Lower bounds on the complexity of some optimal data structures. </title> <journal> SIAM J. Comput., </journal> <volume> 10 </volume> <pages> 1-10, </pages> <year> 1981. </year>
Reference-contexts: Email: jeffe@cs.berkeley.edu are inappropriate in more general settings. Chazelle [8, 7] has proven a number of lower bounds for online and o*ine range counting problems in the Fred-man/Yao semigroup arithmetic model <ref> [16] </ref>. While this model works quite well for studying this sort of counting problem, it is not at all applicable to decision or optimization problems.
Reference: [17] <author> A. Gajentaan and M. Overmars. </author> <title> On a class of O(n 2 ) problems in computational geometry. </title> <journal> Comput. Geom. Theory Appl., </journal> <note> to appear. Appeared previously as: n 2 -hard problems in computational geometry. Report RUU-CS-93-15, </note> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <address> Utrecht, Netherlands, </address> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: Conversely, any better lower bounds for the easier problem would immediately apply to the harder problem as well. This paper is similar in spirit to the earlier work of Gajentaan and Overmars <ref> [17] </ref>.
Reference: [18] <author> M. J. Katz and M. Sharir. </author> <title> An expander-based approach to geometric optimization. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 198-207, </pages> <year> 1993. </year>
Reference-contexts: Unit Distance Detection: Given a set of points in the plane, is any pair of points at unit distance? Best known upper bound: O (n 4=3 log 2+" n) <ref> [18] </ref>. Erickson's lower bound for the unit distance problem follows immediately from his lower bound proof for Hopcroft's problem [15]. <p> Problem G. Distance Selection: Given a set of points in the plane and an integer k, what is the kth smallest interpoint distance? Best known upper bound: O (n 4=3 log 3+" n) <ref> [18] </ref> Theorem 6. Distance selection is almost harder than unit distance detection. Proof: We can detect unit distances with a binary search over the n possible values for k, using a distance selection algorithm at each step in the search. 2 Problem H. <p> Distance Ranking: Given a set of points in the plane how many pairs of points are closer than unit distance apart? Best known upper bound: O (n 4=3 log 3+" n) <ref> [18] </ref> Theorem 7. Distance selection is almost harder than distance ranking. Distance ranking is almost harder than distance selection. Proof: The binary search algorithm described in the proof of Theorem 6 can also be used to solve the distance ranking problem.
Reference: [19] <author> J. Matousek and O. Schwarzkopf. </author> <title> On ray shooting in convex polytopes. </title> <journal> Discrete Comput. Geom., </journal> <volume> 10(2) </volume> <pages> 215-232, </pages> <year> 1993. </year>
Reference-contexts: See Problem E. Halfspace Range Checking in IR 5 : Given a set of points and hyperplanes in IR 5 , is every point above every hyperplane? Best known upper bound: O (n 4=3 log O (1) n) <ref> [19] </ref> Theorem 5. Halfspace range checking in IR 5 is harder than Hopcroft's problem. <p> Polyhedral Terrain Intersection: Given two polyhedral terrains in IR 3 , do they in tersect? Best known upper bound: O (n 4=3 log O (1) n) <ref> [10, 9, 19] </ref> Problem J. Line Towering: Given a set of red and blue lines in IR 3 , are all the red lines above all the blue lines? Best known upper bound: O (n 4=3 log O (1) n) [9, 19] Theorem 9. <p> Line Towering: Given a set of red and blue lines in IR 3 , are all the red lines above all the blue lines? Best known upper bound: O (n 4=3 log O (1) n) <ref> [9, 19] </ref> Theorem 9. Line towering is almost harder than polyhedral terrain intersection. Proof: Chazelle et al. [10] show that the smallest vertical distance between two polyhedral terrains of total complexity n can be reduced to several instances of line towering, with total complexity O (n log 2 n). <p> Line Cyclic Overlap: Given a set of non-intersecting lines in IR 3 , do any three lines overlap cyclically? Best known upper bound: O (n 4=3 log O (1) n) <ref> [11, 9, 19] </ref> This problem is clearly a special case of segment cyclic overlap (Problem D). Theorem 10 (Chazelle et al. [11]). <p> Farthest Line Pair: Given a set of lines in IR 3 , find the pair of lines separated by the largest vertical distance. Best known upper bound: O (n 4=3 log O (1) n) <ref> [23, 9, 19] </ref> Theorem 11 (Pellegrini [23]). Line towering is almost harder than farthest line pair. Proof: The farthest line pair problem can be solved as follows. Split the set of lines into two classes, and recursively find the farthest line pair within each class. <p> Farthest Foreign Pair in IR 4 : Given a set of red and blue points in IR 4 , find the farthest red-blue pair. Best known upper bound: O (n 4=3 log O (1) n) <ref> [19] </ref> Theorem 16. Farthest foreign pair is harder than unit anti-spherical range checking, and unit anti-spherical range checking is almost harder than farthest foreign pair.
Reference: [20] <author> J. Matousek. </author> <title> Linear optimization queries. </title> <journal> J. Algorithms, </journal> <volume> 14 </volume> <pages> 432-448, </pages> <year> 1993. </year> <title> The results combined with results of O. </title> <note> Schwarzkopf also appear in Proc. 8th ACM Sympos. Comput. Geom., </note> <year> 1992, </year> <pages> pages 16-25. </pages>
Reference-contexts: Problem R. Extreme Points: Given a set of points in IR 4 , is any point a convex combination of other points? Equivalently, is every point a vertex of the set's convex hull? Best known upper bound: O (n 4=3+" ) <ref> [20] </ref> easier than both Hopcroft's problem and unit distance detection? Can we better relate the complexities of the problems in Section 5? Is there a single problem that is easier than all the problems we have considered? Ultimately, of course, we would like a proof that all these problems require (n
Reference: [21] <author> J. Matousek. </author> <title> Range searching with efficient hierarchical cuttings. </title> <journal> Discrete Comput. Geom., </journal> <volume> 10(2) </volume> <pages> 157-182, </pages> <year> 1993. </year>
Reference-contexts: Problem A. Hopcroft's Problem: Given a set of points and lines in the plane, does any point lie on any line? Best known upper bound: O (n 4=3 2 O (log fl n) ) <ref> [21] </ref> Hopcroft's problem is a special case of a large number of other more general problems, including the following. * Detecting, counting, or enumerating incidences between a set of "point-like" geometric objects (points, line segments, circles, triangles, etc.) and a set of "line-like" geometric objects (lines, line seg ments, rays, circles,
Reference: [22] <author> N. Megiddo. </author> <title> Applying parallel computation algorithms in the design of serial algorithms. </title> <journal> J. ACM, </journal> <volume> 30 </volume> <pages> 852-865, </pages> <year> 1983. </year>
Reference-contexts: If T 2 (n) = O (T 1 (n) log c n) for some constant c, we say that 1 is almost harder than 2 . Typically, this means that 2 is solved by a binary search or parametric search <ref> [13, 22] </ref>, using an algorithm for 1 as an oracle, although more complicated reductions are also possible. Finally, we say that 1 is probably harder than 2 if the following conditions are met. 1. 1 is almost harder than 2 . 2.
Reference: [23] <author> M. Pellegrini. </author> <title> Incidence and nearest-neighbor problems for lines in 3-space. </title> <booktitle> In Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 130-137, </pages> <year> 1992. </year>
Reference-contexts: Farthest Line Pair: Given a set of lines in IR 3 , find the pair of lines separated by the largest vertical distance. Best known upper bound: O (n 4=3 log O (1) n) <ref> [23, 9, 19] </ref> Theorem 11 (Pellegrini [23]). Line towering is almost harder than farthest line pair. Proof: The farthest line pair problem can be solved as follows. Split the set of lines into two classes, and recursively find the farthest line pair within each class. <p> Farthest Line Pair: Given a set of lines in IR 3 , find the pair of lines separated by the largest vertical distance. Best known upper bound: O (n 4=3 log O (1) n) [23, 9, 19] Theorem 11 (Pellegrini <ref> [23] </ref>). Line towering is almost harder than farthest line pair. Proof: The farthest line pair problem can be solved as follows. Split the set of lines into two classes, and recursively find the farthest line pair within each class. <p> Split the set of lines into two classes, and recursively find the farthest line pair within each class. To find the farthest pair between the two subsets, perform a parametric search, using a line towering algorithm as an oracle. See <ref> [23] </ref> for further details. 2 Theorem 12 (Chazelle et al. [9]). Halfspace range checking in IR 5 is probably harder than line towering.
Reference: [24] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: an Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: We develop our relative complexity results in the algebraic decision tree model of computation [25]. Most of our results hold in more general models of computation such as algebraic computation trees [4] or the real RAM <ref> [24] </ref>, but a few results rely on specific properties of the algebraic decision tree model. Specifically, some of our reductions introduce formal infinitesimals into the input before passing it to the 1 subroutine. See, for example, the proof of Theorem 4.
Reference: [25] <author> J. M. Steele and A. C. Yao. </author> <title> Lower bounds for algebraic decision trees. </title> <journal> J. Algorithms, </journal> <volume> 3 </volume> <pages> 1-8, </pages> <year> 1982. </year>
Reference-contexts: This lower bound follows from results of Steele and Yao in the algebraic decision tree model <ref> [25] </ref> and Ben-Or in the algebraic computation tree model [4]. <p> We develop our relative complexity results in the algebraic decision tree model of computation <ref> [25] </ref>. Most of our results hold in more general models of computation such as algebraic computation trees [4] or the real RAM [24], but a few results rely on specific properties of the algebraic decision tree model.
Reference: [26] <author> J. Stolfi. </author> <title> Oriented Projective Geometry: A Framework for Geometric Computations. </title> <publisher> Academic Press, </publisher> <year> 1991. </year>
Reference-contexts: Proof: Consider the special case of consistently oriented sets of lines, in which the projections of the blue lines onto the xy-plane all have higher slope than the projections of the red lines. In this case, using Plucker coordinates <ref> [26] </ref>, we can express each red line as a point in IR 5 and each blue line as a hyperplane in IR 5 , so that relative orientation is preserved. The general problem can be solved using the following divide-and-conquer approach.
Reference: [27] <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms, </title> <booktitle> volume 44 of CBMS-NSF Regional Conference Series in Applied Mathematics. Society for Industrial Applied Mathematics, </booktitle> <year> 1983. </year>
Reference-contexts: Best known upper bound: O (n 4=3 log 4=3 n) [1] 5 6 Jeff Erickson Theorem 15 (Yao [28]). Nearest foreign neighbors is almost harder than Euclidean minimum spanning tree. Proof: We can construct the minimum spanning tree using the following algorithm, originally published by Bor _uvka in 1926 <ref> [27] </ref>. We start with a forest of n one-vertex trees. In each phase of the algorithm, we find the minimum weight edge leaving each tree, and add it to the evolving forest. After O (log n) phases, the forest contains only the minimum spanning tree.
Reference: [28] <author> A. C. Yao. </author> <title> On constructing minimumspanning trees in k-dimensional spaces and related problems. </title> <journal> SIAM J. Comput., </journal> <volume> 11 </volume> <pages> 721-736, </pages> <year> 1982. </year> <month> 6 </month>
Reference-contexts: Nearest Foreign Neighbors in IR 3 : Given a set colored points in IR 3 , find for each point the closest point with a different color. Best known upper bound: O (n 4=3 log 4=3 n) [1] 5 6 Jeff Erickson Theorem 15 (Yao <ref> [28] </ref>). Nearest foreign neighbors is almost harder than Euclidean minimum spanning tree. Proof: We can construct the minimum spanning tree using the following algorithm, originally published by Bor _uvka in 1926 [27]. We start with a forest of n one-vertex trees.
References-found: 28

