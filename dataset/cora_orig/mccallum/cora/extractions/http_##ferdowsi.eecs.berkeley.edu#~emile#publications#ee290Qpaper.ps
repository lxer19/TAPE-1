URL: http://ferdowsi.eecs.berkeley.edu/~emile/publications/ee290Qpaper.ps
Refering-URL: http://ferdowsi.eecs.berkeley.edu/~emile/pub.html
Root-URL: http://www.cs.berkeley.edu
Title: Inter-Session Quality of Service: Network Synchronization of Parallel Streams  
Author: Emile Sahouria 
Date: May 7, 1996  
Abstract: Two realizations of a quality of service guarantee have been given significant attention: the maximum delay of a packet in a lossless network, and the probability of packet loss by buffer overflow in a statistically multiplexed network. A third potential quality of service guarantee which has received less attention is the synchronization of different sessions in a virtual circuit network. In the context of a single node network with a fixed scheduler to impose single-session QOS guarantees, it is shown that the buffer management policy can trade off packet loss with inter-session delay jitter in a desirable manner. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Israel Cidon, Leonidas Georgiadis, Roch Guerin, and Asad Kamisy, </author> <year> (1995). </year> <title> Optimal Buffer Sharing. </title> <journal> IEEE Journal on Selected Areas in Communications. </journal> <volume> vol. 13, no. 7, </volume> <month> September </month> <year> 1995, </year> <pages> pp. 1229-1239. </pages>
Reference-contexts: Otherwise, the incoming packet is dropped. These elementary policy building blocks can be combined in obvious ways. Most recently, Cidon et al. <ref> [1] </ref> proved that for two streams with poisson arrival rates and equal exponential service rates, the best throughtput could be obtained using a complete sharing, POT policy. Again, the results only considered throughtput and not quantities concerning related sessions. <p> The successful buffer management policies apparently trade loss in the low-priority stream for reduction in the skew variance. Several other buffer policies were also tried. These included * Full sharing with push-out. * Symmetric push-out threshold, as discussed in Cidon <ref> [1] </ref>. * Partial sharing with symmetric push-out.
Reference: [2] <author> Sherry X. Wei, Edward J. Coyle, and Man-Tung T. Hsiao, </author> <year> (1991). </year> <title> An Optimal Buffer Management Policy for High-Performance Packet Switching. </title> <booktitle> IEEE GLOBECOM 1991, </booktitle> <pages> pp. 924-928. </pages>
Reference: [3] <author> F. Kamoun and L. Kleinrock, </author> <year> (1980). </year> <title> Analysis of Shared Finite Storage in a Computer Node Environment Under General Traffic Conditions. </title> <journal> IEEE Trans. Commun. COM-28, </journal> <volume> 7, </volume> <month> July </month> <year> 1980, </year> <pages> pp. 992-1003. </pages>
Reference: [4] <author> A.F. Dagiuklas and M. Ghanbari, </author> <year> (1993). </year> <title> Priority Mechanisms in ATM Switches Carrying Two Layer Video Data. </title> <journal> Electronics Letters, </journal> <volume> vol 29, no. 3, </volume> <pages> pp. 273-274. </pages>
Reference-contexts: Simulation results will show the effectiveness of the skew reduction technique. 2 A skew metric What is the best metric for synchronization between sessions? Several have been suggested in the literature: worst case, mean, and standard deviation of packet jitter between sessions <ref> [4] </ref>, [5], [6]. Decisive factors in the selection of this metric include the receiver characteristics (buffer and match vs. variable playback point, for instance) and the effect on the application using the transmitted data. Most receiving applications can be generally classified as either packet preserving or time preserving. <p> An approximation to this metric that is independent of any particular M AS is the width of the skew p.d.f., which may itself be approximated by the skew variance. This metric has been used in the literature <ref> [4] </ref>, and it will be used as the primary metric here. The notion of a maximum acceptable skew also points out the fact that skew reduction, whether done inside or outside the network, can introduce loss into one or both of the streams being synchronized. <p> Further, by treating the streams differently, by only allowing one stream to push out packets or by only allowing partial sharing, the burden of packet loss to avoid skew could be shifted to one stream in the synchronization set. The most relevant research, conducted by Dagiuklas and Ghanbari <ref> [4] </ref>, [5], demonstrated the effects of different buffer policies on skew via simulation. Their research showed that, for the purposes of reducing skew, complete partitioning is the worst policy, partial sharing is better, and partial sharing with asymmetric push-out is the "best". <p> In each simulation, the GPS weight ratio of the high and low priority members of the synchronization set was 2 : 1, while the ratio of long-term averages was 5 : 4. The results, summarized for two buffering policies in figures 3 and 4, confirm the findings of <ref> [4] </ref>. The successful buffer management policies apparently trade loss in the low-priority stream for reduction in the skew variance. Several other buffer policies were also tried. These included * Full sharing with push-out. * Symmetric push-out threshold, as discussed in Cidon [1]. * Partial sharing with symmetric push-out.
Reference: [5] <author> A.F. Dagiuklas and M. Ghanbari, </author> <year> (1994). </year> <title> Effect of Vido Synchronizatin in an ATM Multiplexer. </title> <journal> Electronics Letters, </journal> <volume> vol 30, no. 9, </volume> <pages> pp. 683-685 </pages>
Reference-contexts: Simulation results will show the effectiveness of the skew reduction technique. 2 A skew metric What is the best metric for synchronization between sessions? Several have been suggested in the literature: worst case, mean, and standard deviation of packet jitter between sessions [4], <ref> [5] </ref>, [6]. Decisive factors in the selection of this metric include the receiver characteristics (buffer and match vs. variable playback point, for instance) and the effect on the application using the transmitted data. Most receiving applications can be generally classified as either packet preserving or time preserving. <p> Further, by treating the streams differently, by only allowing one stream to push out packets or by only allowing partial sharing, the burden of packet loss to avoid skew could be shifted to one stream in the synchronization set. The most relevant research, conducted by Dagiuklas and Ghanbari [4], <ref> [5] </ref>, demonstrated the effects of different buffer policies on skew via simulation. Their research showed that, for the purposes of reducing skew, complete partitioning is the worst policy, partial sharing is better, and partial sharing with asymmetric push-out is the "best".
Reference: [6] <author> N. Shivakumar, C. J. Sreenan, B. Narendran, and P. Agrawal, </author> <year> (1995). </year> <title> The Concord Algorithm for Synchronization of Networked Multimedia Streams. </title> <booktitle> IEEE Multimedia 8 </booktitle>
Reference-contexts: Multilayer video transport, in which several information streams corresponding to the same compressed video sequence are transmitted, and the separation of voice and video in a teleconference are two such applications. Synchronization is conventionally done outside of the network, by buffers at the receiving application (eg., <ref> [6] </ref>). Several advantages accrue, however, by attempting to maintain the synchronization within the network. As a first step in this direction, a metric for skew will be developed that best represents the problem. <p> Simulation results will show the effectiveness of the skew reduction technique. 2 A skew metric What is the best metric for synchronization between sessions? Several have been suggested in the literature: worst case, mean, and standard deviation of packet jitter between sessions [4], [5], <ref> [6] </ref>. Decisive factors in the selection of this metric include the receiver characteristics (buffer and match vs. variable playback point, for instance) and the effect on the application using the transmitted data. Most receiving applications can be generally classified as either packet preserving or time preserving. <p> The packet dropping is implemented by an appropriately chosen buffer management. Finding this buffer management policy will be the focus of much of the rest of this discussion. Packet dropping is just what conventional synchronization methods do outside the network <ref> [6] </ref>, but doing it inside the network has benefits: * Network bandwidth and buffer space are freed from serving a packet that would likely be dropped at the receiver anyway because of the skew it would cause. * The complexity and buffer requirements of the receiver are somewhat reduced.
References-found: 6

