URL: http://www.cs.unm.edu/~kapur/abstracts/lics.92.ps.gz
Refering-URL: http://www.cs.unm.edu/~kapur/abstracts/lics.92.html
Root-URL: http://www.cs.unm.edu
Title: DOUBLE-EXPONENTIAL COMPLEXITY OF COMPUTING A COMPLETE SET OF AC-UNIFIERS (Preliminary Report)  
Author: Deepak Kapur and Paliath Narendran 
Address: Albany, NY 12222  
Affiliation: Institute of Programming and Logics Department of Computer Science State University of New York at Albany  
Abstract: A new algorithm for computing a complete set of unifiers for two terms involving associative-commutative function symbols is presented. The algorithm is based on a non-deterministic algorithm given by the authors in 1986 to show the NP-completeness of associative-commutative unifiability. The algorithm is easy to understand, its termination can be easily established. More importantly, its complexity can be easily analyzed and is shown to be doubly exponential in the size of the input terms. The analysis also shows that there is a double-exponential upper bound on the size of a complete set of unifiers of two input terms. Since there is a family of simple associative-commutative unification problems which have complete sets of unifiers whose size is doubly exponential, the algorithm is optimal in its order of complexity in this sense. This is the first associative-commutative unification algorithm whose complexity has been completely analyzed. The approach can also be used to show a single exponential complexity for computing a complete set of unifiers for terms involving associative-commutative function symbols which also have the identity. Furthermore, for unification in the presence of associative-commutative-idempotent operators we get a doubly exponential bound. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Benanav, D., Kapur, D., and Narendran, P. </author> <year> (1985). </year> <title> Complexity of matching problems. </title> <booktitle> In: Proc. of the first international conference on Rewriting Techniques and Applications (RTA-85), </booktitle> <address> Dijon, France, </address> <note> LNCS 202, Springer Verlag. A revised version appeared in J. of Symbolic Computation 3 (1987) 203-216. </note>
Reference: <author> Boudet, A., Contejean, E., and Devie, H. </author> <year> (1990). </year> <title> A new AC unification algorithm with an algorithm for solving systems of diophantine equations. </title> <booktitle> Proc. 5th Annual IEEE Symp. on Logic in Computer Science, Philadelphia, </booktitle> <pages> 289-299. </pages>
Reference-contexts: Instead of checking for the existence of a solution, we must generate a complete set of solutions. This can be done using a modified version of algorithms for solving simultaneous linear diophantine equations discussed in the literature or particularly, a modified version of the algorithm given by <ref> (Boudet et al, 1990) </ref> with a crucial difference: there are constraints imposed because of the occur-check. We now give the deterministic algorithm. <p> Such a complete basis can be obtained using an algorithm for solving a system of simultaneous linear diophantine equations such as in (Gathen and Sievek-ing, 1978; Schrijver, 1986) or in <ref> (Boudet et al, 1990) </ref>. Not every solution to these equations, however, would lead to a unifier for the original terms.
Reference: <author> Burckert, H.-J., Herold, A., Kapur, D., Siekmann, J.H., Stickel, M., Tepp, M., and Zhang, H. </author> <year> (1988). </year> <title> Opening the AC-unification race. </title> <journal> J. of Automated Reasoning, </journal> <volume> 4, </volume> <pages> 465-474. </pages>
Reference-contexts: Nothing is known about the complexity of any of these algorithms. (Some partial analysis is done in Boudet et al (1990).) It is however likely to be worse than exponential in the size of the input since there are simple terms which can have hundreds of thousands most general unifiers <ref> (Burckert et al, 1988) </ref>. It was generally believed that the complexity of checking ac-unifiability is quite high perhaps even non-primitive-recursive or super-exponential.
Reference: <author> Domenjoud, E. </author> <year> (1989). </year> <title> Number of Minimal Unifiers of the Equation ffx 1 + + ffx p = AC fiy 1 + + fiy q . Unpublished report, </title> <address> CRIN, Nancy, France. </address>
Reference-contexts: Furthermore, the number of unifiers in a complete set is bounded by a number that is doubly exponential in the size of the input terms. This bound is tight because of the following connection observed by Domenjoud between the partitioning problem and a simple ac unification problem. Theorem <ref> (Domenjoud, 1989) </ref>: The number of minimal unifiers of the equation ffx 1 + + ffx p = ac fiy 1 + + fiy q is doubly exponential in ffp + fiq.
Reference: <author> Fages, F. </author> <year> (1984). </year> <title> Associative-commutative unification. </title> <booktitle> In: Proceedings of 7th Conference on Automated Deduction (CADE-7), </booktitle> <address> Napa Valley, California, </address> <note> LNCS 170, Springer Verlag. A revised version appeared in J. of Symbolic Computation 3(3) June 1987. </note>
Reference: <author> Fortenbacher, A. </author> <year> (1985). </year> <title> An algebraic approach to unification under associativity and commutativity. </title> <booktitle> In: Proc. of the first international conference on Rewriting Techniques and Applications (RTA-85), </booktitle> <address> Dijon, France, </address> <note> LNCS 202, Springer Verlag. A revised version appeared in J. of Symbolic Computation 3, </note> <month> June </month> <year> 1987. </year>
Reference: <author> Gathen, Joachim von zur, and Sieveking, M. </author> <year> (1978). </year> <title> A Bound on Solutions of Linear Integer Equalities and Inequalities. </title> <booktitle> Proc. of the American Mathematical Society 72(1) 155-158. </booktitle>
Reference: <author> Herold, A. and Siekmann, J. </author> <year> (1985). </year> <title> Unification in abelian semigroups. </title> <note> Memo SEKI-85-III-KL, Universi-taet Kaiserslautern. A revised version appeared in J. of Automated Reasoning, 3, 3, </note> <year> 1987. </year>
Reference: <author> Huet, G. </author> <year> (1978). </year> <title> An algorithm to generate the basis of solutions of homogeneous linear Diophantine equations. </title> <journal> Information Processing Letters, </journal> <volume> 7(3), </volume> <pages> 144-147. </pages>
Reference: <author> Kapur, D. and Narendran, P. </author> <year> (1986a). </year> <title> NP-completeness of the set unification and matching problems. </title> <booktitle> In: Proceedings of 8th Conference on Automated Deduction (CADE-8), </booktitle> <address> Oxford, U.K., </address> <publisher> LNCS 230, Springer Verlag. </publisher>
Reference: <author> Kapur, D., and Narendran, P. </author> <year> (1986b). </year> <title> Complexity of Unification Problems with Associative-Commutative Operators, </title> <type> Unpublished Manuscript, </type> <institution> G.E. R&D Center, </institution> <month> December </month> <year> 1986. </year> <note> A revised version to appear in J. Automated Reasoning. </note>
Reference-contexts: In this paper, we design a deterministic algorithm for computing a complete set of ac-unifiers; the algorithm is based on the non-deterministic algorithm presented in our earlier paper <ref> (Kapur and Narendran, 1986b) </ref>. The key ideas of the algorithm are: 1. <p> In the example, x and y occur directly under + and x also occurs directly under g. The key steps in the nondeterministic algorithm presented in <ref> (Kapur and Narendran, 1986b) </ref> were the following: (a) Choice of equivalence classes of admissible sub-terms that get unified. (See the footnote on the next page.) (b) Choice of the outermost function symbol in the substitution for a variable. (c) Decomposition into systems of word equations, solving the word equations, performing occur <p> Sketch of Proof: Without loss of generality, consider a ground unifier. Now, as in the case of ac-unifiability in <ref> (Kapur and Narendran, 1986b) </ref>, t can be shown that the constraints this unifier imposes on the admissible subterms (e.g., which subterms get unified) the outermost function symbols etc. correspond to one of the paths in the decision tree. 2 The completeness of the algorithm follows from the completeness of the algorithm <p> A nondeterministic algorithm for aci-unifiability was given in <ref> (Kapur and Narendran, 1986b) </ref>. The basic paradigm used there was mostly the same as that used for ac-unifiability.
Reference: <author> Kapur, D. and Narendran, P. </author> <year> (1987). </year> <title> Matching, unification, and complexity. </title> <journal> SIGSAM Bulletin, </journal> <month> Octo-ber </month> <year> 1987. </year>
Reference: <author> Kapur, D. and Zhang, H. </author> <year> (1991). </year> <title> A case study of the completion procedure: proving ring commuta tivity problems. </title> <booktitle> In: Computational Logic: Essays in Honor of Alan Robinson, </booktitle> <editor> (Lassez and Plotkin, eds.), </editor> <publisher> MIT Press, </publisher> <pages> 360-394. </pages>
Reference-contexts: AC-unification has been used in theorem provers such as RRL to prove nontrivial mathematical problems, for instance, see <ref> (Kapur and Zhang, 1991) </ref>. AC-unification is also an interesting problem because of the long history in trying to understand the problem. To the best of our knowledge, the first algorithms for ac-unification were by Livesey and Siek-mann (1976) and Stickel (1975, 1981).
Reference: <author> Kirchner, C. </author> <year> (1990). </year> <title> From unification in a combination of equational theories to a new AC-unification algorithm. </title> <editor> In: CREAS (Nivat and Ait-Kaci, eds.), </editor> <publisher> Academic Press. </publisher>
Reference-contexts: It should be noted that the benefit of simultaneously solving a system of diophantine equations over solving the equations sequentially was pointed out in <ref> (Kirchner, 1990) </ref>. However, his algorithm exploited simultaneous equations arising from the same ac-function symbol, whereas we show how several ac-symbols can be handled simultaneously by separating the unification problem into different independent sub-problems. There are many improvements possible to prune the decision tree.
Reference: <author> Livesey, M., and Siekmann, J. </author> <year> (1976). </year> <title> Unification in sets and multisets. </title> <institution> Memo SEKI-76-11, Universitaet Karlsruhe, Germany. </institution>
Reference: <author> Martelli A., and Montanari, U. </author> <year> (1982). </year> <title> An efficient unification algorithm. </title> <journal> TOPLAS, </journal> <volume> 4(2). </volume>
Reference: <author> Papadimitriou, C.H. </author> <year> (1981). </year> <title> On the Complexity of Integer Programming. </title> <journal> J. of Assoc. of Comp. Mach. </journal> <volume> 28, </volume> <pages> 765-768. </pages>
Reference: <institution> Paterson, M.S., and Wegman, M.N. </institution> <year> (1978). </year> <title> Linear unification. </title> <journal> J. of Computer and System Sciences 16, </journal> <pages> 158-167. </pages>
Reference-contexts: Note that the graph G that is built using the equivalence relation is basically a refinement of the graph of the flattened tree representations where additional edges corresponding to the equivalence have been added. This is similar to the occur check in the standard unification problem as in <ref> (Paterson and Weg-man, 1978) </ref>. 2.4 Proof of Correctness A proof of correctness of the algorithm follows from the following two lemmas: Lemma 1: Every unifier in a complete set of unifiers generated at a leaf node is also a unifier of the original input terms.
Reference: <author> Schrijver, A. </author> <year> (1986). </year> <title> Theory of Linear and Integer Programming. </title> <publisher> John Wiley and Sons. </publisher>
Reference: <author> Stickel, M.E. </author> <year> (1975). </year> <title> A complete unification algorithm for associative-commutative functions. </title> <booktitle> 4th International Joint Conf. on Artificial Intelligence, </booktitle> <address> Tbilisi, USSR. </address>
Reference: <author> Stickel, M.E. </author> <year> (1981). </year> <title> A unification algorithm for associative-commutative functions. </title> <journal> J. of Assoc. of Comp. Mach. </journal> <volume> 28, </volume> <pages> 423-434. </pages>
Reference-contexts: Of these Stickel's recursive algorithm is more general and was also shown to be complete. However, due to its com-plicated nature, termination of this algorithm could be shown only for a simple (restricted) subcase in <ref> (Stickel, 1981) </ref>. Livesey and Siekmann's algorithm dealt only with terms involving a single ac function symbol having variables and constants as arguments. This algorithm was subsequently extended to general terms by Herold and Siekmann (1985).
References-found: 21

