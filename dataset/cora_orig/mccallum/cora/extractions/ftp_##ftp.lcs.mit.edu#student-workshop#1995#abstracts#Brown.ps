URL: ftp://ftp.lcs.mit.edu/student-workshop/1995/abstracts/Brown.ps
Refering-URL: http://www.cag.lcs.mit.edu/student95/proceedings.html
Root-URL: 
Email: jhbrown@ai.mit.edu  
Title: Feedback-Directed Specialization of C (M.Eng. Thesis Abstract) Overview and Justification studying automating specialization on the
Author: Jeremy Brown time-consuming.) 
Note: In my M.Eng. thesis, I am  
Date: May 12, 1995  
Address: 545 Technology Square, Cambridge, MA 02139  
Affiliation: MIT AI Lab  
Abstract: ion is a powerful tool for managing program complexity. Well-abstracted source code is far more comprehensible, maintainable, and reusable than less abstract, specialized code. In addition, because a single general routine may be called from several places within a program, a well-abstracted program is usually smaller than a more specialized one. Unfortunately, with traditional compiler technology, executables produced from hand-specialized source code generally run faster than executables produced from abstract source code; as a result, programmers frequently sacrifice abstraction's long-term virtues to the short-term goal of execution-speed. Previously, automated, dynamic response to program usage has been most visible in dynamic code generation [EP93] (DCG) systems. Executables using DCG wait until runtime to generate critical portions of code; such code has the advantage of being precisely tailored to the operating conditions actually in effect. There are two drawbacks to DCG, however: first, particular portions of code may be generated with great frequency because of characteristic user behavior; second, exacerbating this inefficiency, aggressive optimization takes too much time to perform at runtime on dynamically generated code. The result is that critical code may be generated in nearly every run of a program, but will never fully optimized. By specializing on frequently-occuring conditions, FDS avoids the first problem, albeit at the cost of having to fall back on less-specialized routines when unexpected runtime conditions occur; by recompiling outside of runtime, FDS avoids the second problem as well. In contrast to the automated, dynamic approach taken by DCG- and FDS-based systems, the traditional method of cutting down the runtime costs of abstraction has been to specialize source code by hand. In this method, the programmer uses profiling tools to examine the behavior of a program run on test data. Profiling results are used to guide hand-optimization of the source, which is then recompiled. The advantage of this approach is that a human can change a program in arbitrarily complex and intelligent ways; optimizations may be as severe as a complete change of algorithm. Unfortunately, any hand-specializations based on profiling runs on test data may actually worsen program performance if the test data fails to accurately model end-users' data. In addition, overly specializing source code turns it into spaghetti code messy source code which is hard to comprehend, maintain, or reuse. In short, when performing hand-specialization, a programmer must balance the need for executable speed against the need for future maintenance of the source code. FDS avoids all of these problems by responding automatically to actual usage conditions. Acknowledgments: This work is conducted under the direction of Principal Research Scientist Thomas Knight Jr. This research is supported by the Advanced Research Projects Agency of the Department of Defense under Rome Labs contract number F30602-94-C-0252. This material is based upon work supported under a National Science Foundation Graduate Fellowship. Any opinions, findings, conclusions or recommendations expressed in this publication are those of the author and do not necessarily reflect the views of the National Science Foundation. 
Abstract-found: 1
Intro-found: 1
Reference: [EP93] <author> Dawson R. Engler and Todd A. Proebsting. </author> <title> DCG: An Efficient Retargetable Dynamic Code Generation System. contact: </title> <address> todd@cs.arizonda.edu, engler@lcs.mit.edu, </address> <month> November </month> <year> 1993. </year>
Reference: [Sta93] <author> Richard Stallman. </author> <title> Using and Porting GNU CC. Free Software Foundation, </title> <publisher> Inc., </publisher> <address> 675 Massachusetts Avenue, Cam-bridge, MA 02139, </address> <month> October </month> <year> 1993. </year>
Reference: [WFW + ] <author> Robert P. Wilson, Robert S. French, Christopher S. Wilson, Saman Amarasinghe, Jennifer Anderson, Steve Tjiang, Shih-Wei Liao, Chau-Wen Tseng, Mary Hall, Monica Lam, , and John Hennessy. </author> <title> An Overview of the SUIF Compiler System. Anonymous FTP suif.stanford.edu:/pub/suif/suif-overview.ps. 1 In the future I'd like to get rid of the need for any programmer annotation of the original source, but that's a post-thesis problem. 2 All specializations in my system are semantics preserving the general case is always preserved where necessary to maintain full semantic equivalence with the original program. </title> <type> 2 </type>
References-found: 3

