URL: http://www.cs.uoregon.edu/~fickas/icse-workshop/axel.ps
Refering-URL: http://www.cs.uoregon.edu/~fickas/icse-workshop/
Root-URL: http://www.cs.uoregon.edu
Email: -avl, eletier, chp-@info.ucl.ac.be  
Title: Leaving Inconsistency  
Author: Axel van Lamsweerde, Emmanuel Letier and Christophe Ponsard 
Date: May 17, 1997  
Note: Position paper for the ICSE97 workshop on Living with Inconsistency,  
Address: B-1348 Louvain-la-Neuve (Belgium)  
Affiliation: Universit catholique de Louvain, Dpartement dIngnierie Informatique  
Abstract-found: 0
Intro-found: 1
Reference: [Cug96] <author> G. Cugola, E. Di Nitto, A. Fuggetta and C. Ghezzi, </author> <title> A Framework for Formalizing Inconsistencies and Deviations in Human-Centered Systems, </title> <journal> ACM Transactions on Software Engineering and Methodology Vol. </journal> <volume> 5 No. 3, </volume> <month> July </month> <year> 1996, </year> <pages> 191-230. </pages>
Reference-contexts: The source of such inconsistencies may be overideal requirements [Lam95], unanticipated obstacles to the goals specified [Pot95], or assumptions about the environment that are no longer valid [Fic95]. Dynamic inconsistencies are somewhat similar to deviations between a running process and its process model <ref> [Cug96] </ref>. 2. Divergent Requirements On the static inconsistency side, we are investigating a technique for detecting divergence among assertions expressed within different viewpoints; the objective is to derive weakest boundary conditions that make the assertions inconsistent in the logical theory capturing the domain of interest [Lam96].
Reference: [Dar93] <author> A. Dardenne, A. van Lamsweerde and S. Fickas, </author> <title> Goal-directed requirements acquisition, </title> <booktitle> Science of Computer Programming, </booktitle> <volume> Vol. 20, </volume> <year> 1993), </year> <pages> pp. 3-50. </pages>
Reference-contexts: Sometimes they may even be desirable, for instance, to allow further elicitation of requirements descriptions being acquired from multiple stakeholders. Our interest is in managing various types of inconsistency in the requirements lifecycle - more specifically, when the requirements are elaborated according to a goal-driven approach <ref> [Dar93] </ref>, [Lam95], [Dar96]. Inconsistency management requires specific means for (i) representing descriptions that can be inconsistent; (ii) preventing undesirable inconsistencies or reducing their risk of occurrence; (iii) detecting the occurrence of inevitable inconsistencies and recovering from them. The different types of inconsistency we have considered so far are the following.
Reference: [Dar96] <author> R. Darimont and A. van Lamsweerde, </author> <title> Formal Refinement Patterns for Goal-Driven Requirements Elaboration, </title> <booktitle> Proc. FSE4 - Fourth ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <address> San Francisco, </address> <month> October </month> <year> 1996. </year> <title> [Fea97]M. Feather, FLEA: Formal Language for Expressing Assumptions --Language Description, </title> <type> Internal Report, </type> <month> March </month> <year> 1997. </year>
Reference-contexts: Sometimes they may even be desirable, for instance, to allow further elicitation of requirements descriptions being acquired from multiple stakeholders. Our interest is in managing various types of inconsistency in the requirements lifecycle - more specifically, when the requirements are elaborated according to a goal-driven approach [Dar93], [Lam95], <ref> [Dar96] </ref>. Inconsistency management requires specific means for (i) representing descriptions that can be inconsistent; (ii) preventing undesirable inconsistencies or reducing their risk of occurrence; (iii) detecting the occurrence of inevitable inconsistencies and recovering from them. The different types of inconsistency we have considered so far are the following.
Reference: [Fic92] <author> S. Fickas and R. Helm, </author> <title> "Knowledge Representation and Reasoning in the Design of Composite Systems", </title> <journal> IEEE Trans. on Software Engineering, </journal> <month> June </month> <year> 1992, </year> <pages> 470-482. </pages>
Reference-contexts: Making use of domain-independent heuristics (like instance confusion [Pot95] or wrong agent beliefs). Once an obstacle is identified, its feasibility is determined by identifying agents that can be assigned to the obstacle together with some achievable obstruction scenario (much in the spirit of CRITTER <ref> [Fic92] </ref>).
Reference: [Fic95] <author> S. Fickas and M. Feather, </author> <title> Requirements Monitoring in Dynamic Environments, </title> <booktitle> Proc. RE95 - 2nd International Symposium on Requirements Engineering, </booktitle> <address> York, </address> <publisher> IEEE, </publisher> <year> 1995. </year>
Reference-contexts: Dynamic inconsistencies between requirements specifications and the actual run-time behav iour of the system implementing those requirements. The source of such inconsistencies may be overideal requirements [Lam95], unanticipated obstacles to the goals specified [Pot95], or assumptions about the environment that are no longer valid <ref> [Fic95] </ref>. Dynamic inconsistencies are somewhat similar to deviations between a running process and its process model [Cug96]. 2. <p> Alterna 4 tively, one may sometimes wish to take a more liberal view and handle such deviations at run-time. The general idea is to equip the system implementing the requirements with a monitor that observes and reports on violations of soft goals and/or assumptions <ref> [Fic95] </ref>. We are currently working on a monitoring scheme that can be sketched as follows. At specification time, the temporal logic assertions that capture soft goals and assumptions are transformed into assertions in the event-based FLEA language [Fea97], from which a corresponding monitor can be generated.
Reference: [Lam95] <author> A. van Lamsweerde, R. Darimont and P. Massonet, </author> <title> Goal-Directed Elaboration of Requirements for a Meeting Scheduler: Problems and Lessons Learned, </title> <booktitle> Proc. RE95 - 2nd International Symposium on Requirements Engineering, </booktitle> <address> York, </address> <publisher> IEEE, </publisher> <year> 1995. </year>
Reference-contexts: Sometimes they may even be desirable, for instance, to allow further elicitation of requirements descriptions being acquired from multiple stakeholders. Our interest is in managing various types of inconsistency in the requirements lifecycle - more specifically, when the requirements are elaborated according to a goal-driven approach [Dar93], <ref> [Lam95] </ref>, [Dar96]. Inconsistency management requires specific means for (i) representing descriptions that can be inconsistent; (ii) preventing undesirable inconsistencies or reducing their risk of occurrence; (iii) detecting the occurrence of inevitable inconsistencies and recovering from them. The different types of inconsistency we have considered so far are the following. <p> Dynamic inconsistencies between requirements specifications and the actual run-time behav iour of the system implementing those requirements. The source of such inconsistencies may be overideal requirements <ref> [Lam95] </ref>, unanticipated obstacles to the goals specified [Pot95], or assumptions about the environment that are no longer valid [Fic95]. Dynamic inconsistencies are somewhat similar to deviations between a running process and its process model [Cug96]. 2. <p> The general monitoring scheme above is currently being prototyped on the meeting scheduler system <ref> [Lam95] </ref>. Our expectation is that the generation of FLEA assumptions and of monitored/control parameters from KAOS assertions can be automated using the attribute grammar mechanism available in the KAOS/GRAIL environment. The use of assumption patterns and categories might also be of some help here.
Reference: [Lam96] <author> A. van Lamsweerde, </author> <title> Divergent Views in Goal-Driven Requirements Engineering, </title> <booktitle> Proc. View-points96 - ACM SIGSOFT Workshop on Viewpoints in Software Development, </booktitle> <month> October </month> <year> 1996. </year> <month> 5 </month>
Reference-contexts: Static inconsistencies between descriptions from different viewpoints of stakeholders involved in the requirements engineering process. These include violations of syntactic rules linking different sets of notations [Nus93]; structure clashes among objects expressed in a same notation; and divergence between assertions that may potentially lead to logical incon sistency <ref> [Lam96] </ref>. Dynamic inconsistencies between requirements specifications and the actual run-time behav iour of the system implementing those requirements. The source of such inconsistencies may be overideal requirements [Lam95], unanticipated obstacles to the goals specified [Pot95], or assumptions about the environment that are no longer valid [Fic95]. <p> Divergent Requirements On the static inconsistency side, we are investigating a technique for detecting divergence among assertions expressed within different viewpoints; the objective is to derive weakest boundary conditions that make the assertions inconsistent in the logical theory capturing the domain of interest <ref> [Lam96] </ref>. To give a real-world example, consider the electronic reviewing process for a scientific journal, with the following two security goals: (i) maintain reviewers anonymity; (ii) maintain review integrity. One can show that these goals are not logically inconsistent.
Reference: [Lev95] <author> N.G. Leveson, </author> <title> Safeware - System Safety and Computers, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Refining global obstacles until single feasible agent assignments are reached; this technique somewhat amounts to fault tree analysis <ref> [Lev95] </ref>. Making use of obstacle patterns and categories that correspond to the KAOS patterns and categories e.g., starvation obstacles to satisfaction goals; misinformation or forget obsta cles to information goals; etc. Making use of domain-independent heuristics (like instance confusion [Pot95] or wrong agent beliefs).
Reference: [Nus93] <author> B. Nuseibeh, J. Kramer and A. Finkelstein, </author> <title> "A Framework for Expressing the Relationships Between Multiple Views in Requirements Specifications", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 20 No. 10, </volume> <month> October </month> <year> 1994, </year> <pages> 760-773. </pages>
Reference-contexts: The different types of inconsistency we have considered so far are the following. Static inconsistencies between descriptions from different viewpoints of stakeholders involved in the requirements engineering process. These include violations of syntactic rules linking different sets of notations <ref> [Nus93] </ref>; structure clashes among objects expressed in a same notation; and divergence between assertions that may potentially lead to logical incon sistency [Lam96]. Dynamic inconsistencies between requirements specifications and the actual run-time behav iour of the system implementing those requirements.
Reference: [Pot95] <author> C. Potts, </author> <title> Using Schematic Scenarios to Understand User Needs, </title> <booktitle> Proc. ACM Symp. on Designing Inter active Systems: Processes, Practices and Techniques, </booktitle> <year> 1995. </year>
Reference-contexts: Dynamic inconsistencies between requirements specifications and the actual run-time behav iour of the system implementing those requirements. The source of such inconsistencies may be overideal requirements [Lam95], unanticipated obstacles to the goals specified <ref> [Pot95] </ref>, or assumptions about the environment that are no longer valid [Fic95]. Dynamic inconsistencies are somewhat similar to deviations between a running process and its process model [Cug96]. 2. <p> Making use of obstacle patterns and categories that correspond to the KAOS patterns and categories e.g., starvation obstacles to satisfaction goals; misinformation or forget obsta cles to information goals; etc. Making use of domain-independent heuristics (like instance confusion <ref> [Pot95] </ref> or wrong agent beliefs). Once an obstacle is identified, its feasibility is determined by identifying agents that can be assigned to the obstacle together with some achievable obstruction scenario (much in the spirit of CRITTER [Fic92]).
Reference: [Wal77] <author> R. Waldinger, </author> <title> Achieving Several Goals Simultaneously, </title> <booktitle> in Machine Intelligence, </booktitle> <volume> Vol. 8, </volume> <editor> E. Elcock and D. Michie (Eds.), </editor> <publisher> Ellis Horwood, </publisher> <year> 1977. </year>
Reference-contexts: Weakest boundary conditions can be obtained using a technique somewhat similar to goal 2 regression in AI planning <ref> [Wal77] </ref>. The principle is to start from the negation of one of the breakable assertions and perform some backward chaining through the domain theory augmented with the other breakable assertion.
References-found: 11

