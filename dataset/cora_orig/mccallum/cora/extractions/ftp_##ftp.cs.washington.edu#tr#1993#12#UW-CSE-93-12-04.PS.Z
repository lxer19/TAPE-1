URL: ftp://ftp.cs.washington.edu/tr/1993/12/UW-CSE-93-12-04.PS.Z
Refering-URL: http://www.cs.washington.edu/homes/hanks/Projects/prob-planning.html
Root-URL: 
Title: Probabilistic Planning with Information Gathering and Contingent Execution  
Author: Denise Draper, Steve Hanks, Dan Weld 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Technical Report 93-12-04 December 19, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [ Allen et al., 1990 ] <editor> J. Allen, J. Hendler, and A. Tate, editors. </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1990. </year>
Reference: [ Etzioni et al., 1992 ] <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: A plan representation and generation algorithm that supports contingent planning. Step execution can depend on reports generated by prior information-producing actions. The c-buridan plan representation generalizes traditional conditional plan representations ( [ Warren, 1976 ] , [ Peot and Smith, 1992 ] , <ref> [ Etzioni et al., 1992 ] </ref> ) in that it allows conditional branches to be "merged" (see Section 3.6). This paper describes the implemented c-buridan system by developing the widget-shipping example introduced earlier in this section. <p> We want to retain the definition of actions as mappings from mutually exclusive triggers into sets of effects, but we also want to distinguish between the effects the action has on the world and the effects it has on the agent's state of information <ref> [ Etzioni et al., 1992 ] </ref> . Executing inspect does not change the probability that BL is true, but it does provide the agent with information about whether BL is true or not. <p> reasoning about plans using more expressive representation languages: [ Hanks, 1993 ] explores the problem of assessing a plan's quality, but using a probabilistic framework that allows reasoning about sets and quantities. [ Golden et al., 1994 ] is an effort to incorporate a richer sensing model, based on uwl <ref> [ Etzioni et al., 1992 ] </ref> , into the ucpop partial-order planner. Its inference rules allow effective reasoning about locally complete information, enabling the planner to satisfy universally quantified goals under incomplete information, and to eliminate redundant sensing operations. <p> Formal properties We need to complete proofs that the (nondeterministic) c-buridan algorithm is sound and complete. We can use the formal framework developed to prove these properties for non-contingent buridan, but need to extend the plan semantics to account for information 25 gathering actions and branches. Previous work <ref> [ Etzioni et al., 1992 ] </ref> contains a compatible semantics for contingent plans, but uses a non-probabilistic language. We also need to explore the relationship between our algorithm and algorithms from the decision sciences like value iteration [ Howard, 1960 ] and other dynamic programming approaches [ Raiffa, 1968 ] .
Reference: [ Golden et al., 1994 ] <author> K. Golden, O. Etzioni, and D. Weld. </author> <title> xii: Planning for Universal Quantification and Incomplete Information. </title> <type> Technical report, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Related work is concerned with building and reasoning about plans using more expressive representation languages: [ Hanks, 1993 ] explores the problem of assessing a plan's quality, but using a probabilistic framework that allows reasoning about sets and quantities. <ref> [ Golden et al., 1994 ] </ref> is an effort to incorporate a richer sensing model, based on uwl [ Etzioni et al., 1992 ] , into the ucpop partial-order planner.
Reference: [ Haddawy and Hanks, 1993 ] <author> Peter Haddawy and Steve Hanks. </author> <title> Utility Models for Goal-Directed Decision-Theoretic Planners. </title> <type> Technical Report 93-06-04, </type> <institution> Univ. of Washington, Dept. of Computer Science and Engineering, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: values: a value or utility model associates a value with a plan, then an information-producing action can be evaluated in terms of the value it contributes to a plan. [ Matheson, 1990 ] demonstrates how to evaluate plans in this way, but does not provide an algorithm for generating plans. <ref> [ Haddawy and Hanks, 1993 ] </ref> point out that planning to maximize the probability of goal success corresponds to planning to maximize expected value only for a particular extremely restricted class of utility models. c-buridan must therefore be extended to generate plans according to a criterion of expected-utility maximization, at which <p> We intend to apply the framework for utility models developed in <ref> [ Haddawy and Hanks, 1993 ] </ref> to this planner, but doing so first requires extensions to the representation language as noted above. Formal properties We need to complete proofs that the (nondeterministic) c-buridan algorithm is sound and complete.
Reference: [ Hanks, 1993 ] <author> Steve Hanks. </author> <title> Modeling a Dynamic and Uncertain World II: Action Representation and Plan Evaluation. </title> <type> Technical report, </type> <institution> Univ. of Washington, Dept. of Computer Science and Engineering, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: More expressive languages c-buridan's utility is limited by its propositional representation language. Related work is concerned with building and reasoning about plans using more expressive representation languages: <ref> [ Hanks, 1993 ] </ref> explores the problem of assessing a plan's quality, but using a probabilistic framework that allows reasoning about sets and quantities. [ Golden et al., 1994 ] is an effort to incorporate a richer sensing model, based on uwl [ Etzioni et al., 1992 ] , into the
Reference: [ Howard, 1960 ] <author> Ronald A. Howard. </author> <title> Dynamic Programming and Markov Processes. </title> <publisher> MIT Press, </publisher> <year> 1960. </year>
Reference-contexts: Previous work [ Etzioni et al., 1992 ] contains a compatible semantics for contingent plans, but uses a non-probabilistic language. We also need to explore the relationship between our algorithm and algorithms from the decision sciences like value iteration <ref> [ Howard, 1960 ] </ref> and other dynamic programming approaches [ Raiffa, 1968 ] .
Reference: [ Kushmerick et al., To appear ] <author> N. Kushmerick, S. Hanks, and D. Weld. </author> <title> An Algorithm for Probabilistic Planning. </title> <journal> Artificial Intelligence, </journal> <note> To appear. </note>
Reference-contexts: This paper presents a representation and algorithm for probabilistic planning with information-producing actions and contingent execution. We extend the buridan <ref> [ Kushmerick et al., To appear ] </ref> probabilistic action representation to allow actions with both informational and causal effects, and combine it with a framework for building contingent plans that builds on the cnlp algorithm [ Peot and Smith, 1992 ] . <p> Much of this representation is identical to the buridan planner, and the reader is referred to <ref> [ Kushmerick et al., To appear ] </ref> for more detail. 2.1 Propositions We begin by defining a set of domain propositions, each of which describes a particular aspect of the world. <p> fg) g The changes resulting from a set of effects E is defined by a function result (E; s) in the manner of a strips add and delete list: negate all the propositions that appear negated in Ethen remove negations from all propositions that appear in E without negation (see <ref> [ Kushmerick et al., To appear ] </ref> for the full definition). An action induces a change from a state s to a probability distribution over states, which we define in terms of the probabilities that its consequences will occur. <p> The initial step codes the initial probability distribution, and the goal step has a single consequence with the goal state as its trigger. Figure 4 shows initial and goal actions for the example. 3.2 Plans Following buridan <ref> [ Kushmerick et al., To appear ] </ref> , the planner manipulates a data structure called a plan, consisting of a set of steps, ordering constraints over the steps, and a set of causal links. <p> The algorithm computes the probability distribution over states generated by each action in the sequence, finally summing the probabilities of all final states in which the goal is true. This simple version of plan assessment is often quite inefficient; we include it here only to keep the presentation simple. <ref> [ Kushmerick et al., To appear ] </ref> discusses four different plan-assessment algorithms and compares their performance. <p> Two additional threat-resolution mechanisms, confrontation and branching, have no analogue in classical planning, however. Confrontation was introduced in the buridan probabilistic planner and is adopted without change from that system <ref> [ Kushmerick et al., To appear ] </ref> . The idea behind confrontation is that a plan can be sufficiently likely to work even if some action in the plan makes a goal or subgoal false, as long as the falsifying consequence of that action is sufficiently unlikely to occur. <p> We do not consider influence diagrams a solution to the planning problem in and of themselves, however| they do not address the problem of generating plans from action schemas and problem descriptions. 5.2 Probabilistic planning Our work extends the buridan planner <ref> [ Kushmerick et al., To appear ] </ref> : we added to buridan the idea of information-producing steps and step contexts, as well as the threat-resolution technique of branching (which is due to cnlp, see below), and the algorithms for context propagation. See [ Kushmerick et al., To appear ] for a <p> Probabilistic planning Our work extends the buridan planner <ref> [ Kushmerick et al., To appear ] </ref> : we added to buridan the idea of information-producing steps and step contexts, as well as the threat-resolution technique of branching (which is due to cnlp, see below), and the algorithms for context propagation. See [ Kushmerick et al., To appear ] for a discussion of related probabilistic planning algorithms. 23 5.3 Conditional planning Our approach to contingent planning borrows much from the cnlp algorithm of [ Peot and Smith, 1992 ] .
Reference: [ Matheson, 1990 ] <author> James E. Matheson. </author> <title> Using Influence Diagrams to Value Information and Control. </title> <editor> In R. M. Oliver and J. Q. Smith, editors, </editor> <title> Influence Diagrams, </title> <booktitle> Belief Nets and Decision Analysis, </booktitle> <pages> pages 25-48. </pages> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Graphical structures like influence diagrams can be used to solve sequential decision-making problems, including those that allow information-gathering steps <ref> [ Matheson, 1990 ] </ref> . <p> It is more common to analyze both plans and information-producing actions within plans in terms of their utilities or values: a value or utility model associates a value with a plan, then an information-producing action can be evaluated in terms of the value it contributes to a plan. <ref> [ Matheson, 1990 ] </ref> demonstrates how to evaluate plans in this way, but does not provide an algorithm for generating plans. [ Haddawy and Hanks, 1993 ] point out that planning to maximize the probability of goal success corresponds to planning to maximize expected value only for a particular extremely restricted
Reference: [ Pearl, 1988 ] <author> J. Pearl. </author> <title> Probablistic Reasoning in Intelligent Systems. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: We can characterize the inspect action more precisely using these conditional probabilities that appear in the action's consequences: P [bad j BL] = 0:9 P [ok j BL] = 0:1 fi fl fi fl which is a standard probabilistic representation of an uncertain evidence source (see, e.g., <ref> [ Pearl, 1988, Chapter 2 ] </ref> ). The probabilities of domain propositions conditioned on sensor reports is handled using Bayes rule in the standard way.
Reference: [ Peot and Smith, 1992 ] <author> M. Peot and D. Smith. </author> <title> Conditional Nonlinear Planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 189-197, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: We extend the buridan [ Kushmerick et al., To appear ] probabilistic action representation to allow actions with both informational and causal effects, and combine it with a framework for building contingent plans that builds on the cnlp algorithm <ref> [ Peot and Smith, 1992 ] </ref> . <p> A plan representation and generation algorithm that supports contingent planning. Step execution can depend on reports generated by prior information-producing actions. The c-buridan plan representation generalizes traditional conditional plan representations ( [ Warren, 1976 ] , <ref> [ Peot and Smith, 1992 ] </ref> , [ Etzioni et al., 1992 ] ) in that it allows conditional branches to be "merged" (see Section 3.6). This paper describes the implemented c-buridan system by developing the widget-shipping example introduced earlier in this section. <p> The observation label corresponds to the sensor's report: when the action is executed the agent will be informed of the observation label of the consequence that was actually realized in the world. There is an important distinction between our representation and the approach employed by other sensing representations (e.g. <ref> [ Peot and Smith, 1992 ] </ref> ), which assert the results of a information gathering act just as if the information-gathering act had made the result true. <p> context (S i ) ^ context (S j ) ^ context (S t ) unsatisfiable. 3.4.1 Threat resolution by branching We call this new threat-resolution strategy "branching" because we will introduce contingency branches into the plan that prevent the threat from materializing. 5 Branches are a new element in 5 <ref> [ Peot and Smith, 1992 ] </ref> refers to this approach as "conditioning." We adopt an alternative term because of a possible confusion with the use of the term in probabilistic reasoning, e.g. "conditioning on new evidence." 16 a plan's structure, analogous to causal links. <p> See [ Kushmerick et al., To appear ] for a discussion of related probabilistic planning algorithms. 23 5.3 Conditional planning Our approach to contingent planning borrows much from the cnlp algorithm of <ref> [ Peot and Smith, 1992 ] </ref> .
Reference: [ Raiffa, 1968 ] <author> Howard Raiffa. </author> <title> Decision Analysis: Introductory Lectures on Choices Under Uncertainty. </title> <publisher> Addison-Wesley, </publisher> <year> 1968. </year>
Reference-contexts: Previous work [ Etzioni et al., 1992 ] contains a compatible semantics for contingent plans, but uses a non-probabilistic language. We also need to explore the relationship between our algorithm and algorithms from the decision sciences like value iteration [ Howard, 1960 ] and other dynamic programming approaches <ref> [ Raiffa, 1968 ] </ref> .
Reference: [ Warren, 1976 ] <author> D. Warren. </author> <title> Generating Conditional Plans and Programs. </title> <booktitle> In Proceedings of AISB Summer Conference, </booktitle> <pages> pages 344-354, </pages> <institution> University of Edinburgh, </institution> <year> 1976. </year> <month> 26 </month>
Reference-contexts: A plan representation and generation algorithm that supports contingent planning. Step execution can depend on reports generated by prior information-producing actions. The c-buridan plan representation generalizes traditional conditional plan representations ( <ref> [ Warren, 1976 ] </ref> , [ Peot and Smith, 1992 ] , [ Etzioni et al., 1992 ] ) in that it allows conditional branches to be "merged" (see Section 3.6). This paper describes the implemented c-buridan system by developing the widget-shipping example introduced earlier in this section. <p> Other conditional planners, e.g. cnlp and Warplan-C <ref> [ Warren, 1976 ] </ref> generate a new plan branch each time a conditional is inserted in the plan, and do not allow the branches to contain common steps.
Reference: [ Winkler, 1972 ] <author> Robert L. Winkler. </author> <title> Introduction to Bayesian Inference and Decision. </title> <publisher> Holt, Rine--hart, and Winston, </publisher> <year> 1972. </year> <month> 27 </month>
Reference-contexts: work in decision analysis as well as previous probabilistic planners and AI work on (deterministic) conditional planning. 5.1.1 Decision analysis The concept of planning to gather information (and assessing the value of that information) is a common topic in the Decision Analysis literature, particularly the work on sequential decision making <ref> [ Winkler, 1972 ] </ref> . Our approach uses the same Bayesian framework, but the emphasis is different in that we take our task to be one of building a good plan automatically from schematic action descriptions and an input problem.
References-found: 13

