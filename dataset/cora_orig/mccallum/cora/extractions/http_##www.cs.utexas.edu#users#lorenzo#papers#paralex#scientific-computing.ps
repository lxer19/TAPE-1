URL: http://www.cs.utexas.edu/users/lorenzo/papers/paralex/scientific-computing.ps
Refering-URL: http://www.cs.utexas.edu/users/lorenzo/publications.html
Root-URL: 
Abstract: CM Parallel Scientific Computing in Distributed Systems: The Paralex Approach Lorenzo Alvisi Alessandro Amoroso Ozalp Babao glu Alberto Baronio Renzo Davoli Luigi Alberto Giachini Technical Report UBLCS-92-2 February 1992 Laboratory for Computer Science University of Bologna Piazza di Porta S. Donato, 5 40127 Bologna (Italy) 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. B. Ackerman. </author> <title> Data Flow Languages. </title> <booktitle> IEEE Computer, </booktitle> <month> February </month> <year> 1982, </year> <pages> pp. 15-22. </pages>
Reference-contexts: It is, however, possible to run the compiler and the executor manually so that existing Paralex programs can be compiled and executed from machines with no graphics support. The programming paradigm supported by Paralex is a restricted form of data flow <ref> [1] </ref>. A Paralex program is composed of nodes and links. Nodes correspond to computations and the links indicate the flow of (typed) data.
Reference: [2] <author> R. Anand, D. Lea and D. W. Forslund. </author> <title> Using nigen++. </title> <type> Technical Report, </type> <institution> School of Computer and Information Science, Syracuse University, </institution> <month> January </month> <year> 1991. </year> <note> UBLCS-92-2 9 REFERENCES </note>
Reference-contexts: There are numerous other projects that have been experimenting with different abstractions to provide on top of such a system. For the most part, systems such as Linda [15], Amber [12], nigen++ <ref> [2] </ref>, AERO [3] and PVM [6] exist as library functions callable by applications and cannot be considered programming environments. On the other hand, systems such as apE [13], CODE [10], FrameWorks [18] and HeNCE [7] include a graphical notation for parallel computations but no support for fault tolerance.
Reference: [3] <author> D. P. Anderson. </author> <title> The AERO Programmer's Manual. </title> <type> Technical Report, </type> <institution> CS Division, EECS Department, University of California, Berkeley, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: There are numerous other projects that have been experimenting with different abstractions to provide on top of such a system. For the most part, systems such as Linda [15], Amber [12], nigen++ [2], AERO <ref> [3] </ref> and PVM [6] exist as library functions callable by applications and cannot be considered programming environments. On the other hand, systems such as apE [13], CODE [10], FrameWorks [18] and HeNCE [7] include a graphical notation for parallel computations but no support for fault tolerance.
Reference: [4] <author> O. Babao glu, L. Alvisi, A. Amoroso and R. Davoli. </author> <title> Mapping Parallel Computations onto Distributed Systems in Paralex. </title> <booktitle> In Proc. IEEE CompEuro '91, </booktitle> <address> Bologna, Italy, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Details of how Paralex computation graphs are mapped onto the hosts of a distributed system and dynamic control of the remote execution can be found in <ref> [4] </ref>. 3 The Synthetic Aperture Radar Problem An important problem in remote sensing is the reconstruction of surface contours despite visual obstructions.
Reference: [5] <author> R. G. Babb. </author> <title> Parallel Processing with Large-Grain Data Flow Techniques. </title> <booktitle> IEEE Computer, </booktitle> <month> July </month> <year> 1984, </year> <pages> pp. 55-61. </pages>
Reference-contexts: Unlike classical data flow, the nodes of a Paralex program carry out significant computations. This so-called coarse-grain data flow model <ref> [5] </ref> is a consequence of the underlying distributed system architecture where we seek to keep the communication overhead via a high-latency, low-bandwidth network to reasonable levels.
Reference: [6] <author> A. Beguelin, J. J. Dongarra , G. A. Geist, R. Manchek and V. S. Sunderam. </author> <title> A Users' Guide to PVM Parallel Virtual Machine. </title> <type> Technical Report ORNL/TM-11826, </type> <institution> Oak Ridge National Laboratory, </institution> <month> July, </month> <year> 1991. </year>
Reference-contexts: There are numerous other projects that have been experimenting with different abstractions to provide on top of such a system. For the most part, systems such as Linda [15], Amber [12], nigen++ [2], AERO [3] and PVM <ref> [6] </ref> exist as library functions callable by applications and cannot be considered programming environments. On the other hand, systems such as apE [13], CODE [10], FrameWorks [18] and HeNCE [7] include a graphical notation for parallel computations but no support for fault tolerance.
Reference: [7] <author> A. Beguelin, J. J. Dongarra , G. A. Geist, R. Manchek and V. S. Sunderam. </author> <title> Graphical Development Tools for Network-Based Concurrent Supercomputing. </title> <booktitle> In Proc. Supercomputing '91, </booktitle> <address> Albuquerque, New Mexico, </address> <month> November 18-22, </month> <year> 1991. </year>
Reference-contexts: For the most part, systems such as Linda [15], Amber [12], nigen++ [2], AERO [3] and PVM [6] exist as library functions callable by applications and cannot be considered programming environments. On the other hand, systems such as apE [13], CODE [10], FrameWorks [18] and HeNCE <ref> [7] </ref> include a graphical notation for parallel computations but no support for fault tolerance. In this paper, we illustrate the utility of the Paralex approach by considering a signal processing application of significant practical interest. The next section gives an overview of Paralex.
Reference: [8] <author> K. Birman and K. Marzullo. </author> <title> ISIS and the META Project. </title> <journal> Sun Technology, </journal> <volume> vol. 2, no. </volume> <month> 3 (Summer </month> <year> 1989), </year> <pages> pp. 90-104. </pages>
Reference: [9] <author> K. Birman, R. Cooper, T. Joseph, K. Marzullo, M. Makpangou, K. Kane, F. Schmuck and M. Wood. </author> <title> The ISIS System Manual, </title> <type> Version 2.1. </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, New York, </address> <month> September </month> <year> 1990. </year>
Reference: [10] <author> J. C. Browne, M. Azam and S. Sobek. </author> <title> CODE: A Unified Approach to Parallel Programming. </title> <journal> IEEE Software, </journal> <month> July </month> <year> 1989, </year> <pages> pp. 10-18. </pages>
Reference-contexts: For the most part, systems such as Linda [15], Amber [12], nigen++ [2], AERO [3] and PVM [6] exist as library functions callable by applications and cannot be considered programming environments. On the other hand, systems such as apE [13], CODE <ref> [10] </ref>, FrameWorks [18] and HeNCE [7] include a graphical notation for parallel computations but no support for fault tolerance. In this paper, we illustrate the utility of the Paralex approach by considering a signal processing application of significant practical interest. The next section gives an overview of Paralex.
Reference: [11] <author> J. W. Cooley and J. W. Tukey. </author> <title> An Algorithm for the Machine Calculation of Complex Fourier Series. </title> <journal> Mathematics of Computation, </journal> <volume> vol. 19, </volume> <year> 1965. </year>
Reference-contexts: The only exception to this is the final normalization step that requires a global minimum and maximum to be computed over the entire matrix. We have implemented the SAR algorithm in Paralex using a standard sequential realization of the Fast Fourier Transform (FFT) <ref> [11] </ref> code as the basic building block. The resulting computation graph for the 8-way parallel version is shown in Figure 1. For our experiments, the input radar signal matrix is an N fiN square where N is a power of two.
Reference: [12] <author> J. S. Chase, F. G. Amador, E. D. Lazowska, H. M. Levy and R. J. Littlefield. </author> <title> The Amber System: Parallel Programming on a Network of Multiprocessors. </title> <booktitle> In Proc. ACM Symposium on Operating Systems Principles, </booktitle> <address> Litchfield Park, Arizona, </address> <month> December </month> <year> 1989, </year> <pages> pp. 147-158. </pages>
Reference-contexts: The idea of viewing a collection of workstations on a network as a parallel multiprocessor is a popular one. There are numerous other projects that have been experimenting with different abstractions to provide on top of such a system. For the most part, systems such as Linda [15], Amber <ref> [12] </ref>, nigen++ [2], AERO [3] and PVM [6] exist as library functions callable by applications and cannot be considered programming environments. On the other hand, systems such as apE [13], CODE [10], FrameWorks [18] and HeNCE [7] include a graphical notation for parallel computations but no support for fault tolerance.
Reference: [13] <author> D. S. Dyer. </author> <title> A Dataflow Toolkit for Visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <month> July </month> <year> 1990, </year> <pages> pp. 60-69. </pages>
Reference-contexts: For the most part, systems such as Linda [15], Amber [12], nigen++ [2], AERO [3] and PVM [6] exist as library functions callable by applications and cannot be considered programming environments. On the other hand, systems such as apE <ref> [13] </ref>, CODE [10], FrameWorks [18] and HeNCE [7] include a graphical notation for parallel computations but no support for fault tolerance. In this paper, we illustrate the utility of the Paralex approach by considering a signal processing application of significant practical interest. The next section gives an overview of Paralex.
Reference: [14] <author> G. Franceschetti, A. Mazzeo, N. Mazzocca, V. Pascazio and G. Schirinzi. </author> <title> An Efficient SAR Parallel Processor. </title> <journal> IEEE Transaction on Aerospace and Electronic Systems, </journal> <volume> Vol. 27, No. 2, </volume> <month> March </month> <year> 1991, </year> <pages> pp. 343-353. </pages>
Reference-contexts: Inferring the contours of the terrain despite cloud cover, speed fluctuations, etc. requires complex processing of the resulting data. Reconstructing these images in real-time can only be accomplished using expensive, dedicated signal processing hardware <ref> [14] </ref>. We have picked the SAR application as a test of effective parallel scientific computing in distributed systems. While it is dangerous to make generalizations based on a single application, we feel that SAR represents a large application domain.
Reference: [15] <author> D. Gelernter, N. Carriero, S. Chandran and S. Chang. </author> <title> Parallel Programming in Linda. </title> <booktitle> In Proc. Int. Conf. Parallel Processing, </booktitle> <address> St. Charles, Illinois, </address> <month> August </month> <year> 1985, </year> <pages> pp. 255-263. </pages>
Reference-contexts: The idea of viewing a collection of workstations on a network as a parallel multiprocessor is a popular one. There are numerous other projects that have been experimenting with different abstractions to provide on top of such a system. For the most part, systems such as Linda <ref> [15] </ref>, Amber [12], nigen++ [2], AERO [3] and PVM [6] exist as library functions callable by applications and cannot be considered programming environments.
Reference: [16] <author> D. Massonnet and F. Adragna. </author> <title> Synthetic Aperture Radar: New Processing Concepts. </title> <booktitle> In . Proc. 10th Annual International Geoscience and Remote Sensing Symposium, </booktitle> <address> Washington, D.C., </address> <month> May </month> <year> 1990, </year> <pages> pp. 1323-1326. </pages>
Reference-contexts: One such problem is Synthetic Aperture Radar (SAR) <ref> [16] </ref> where an aircraft or spacecraft flying at a constant altitude bounces radar signals along the strip of terrain below and records the reflections. Inferring the contours of the terrain despite cloud cover, speed fluctuations, etc. requires complex processing of the resulting data.
Reference: [17] <author> M. D. Schroeder, A. D. Birrell, M. Burrows, H. Murray, R. M. Needham, T. L. Rodeheffer, E. H. Satterthwaite and C. P. Thacker. Autonet: </author> <title> a High-speed, Self-configuring Local Area Network Using Point-to-point Links. </title> <type> Technical Report 59, </type> <institution> DEC Systems Research Center, Palo Alto, California, </institution> <month> April </month> <year> 1990. </year> <note> To appear in IEEE Journal on Selected Areas of Communications, </note> <month> October </month> <year> 1991. </year>
Reference-contexts: It is not unusual to find sites with dozens, if not hundreds, of general-purpose workstations and a collection of specialized servers. Given the current power of individual workstations and the increasing availability of high-speed local area interconnects such as FDDI and Autonet <ref> [17] </ref>, the differences between multiprocessor parallel computers and distributed systems are diminishing. Thus, it is tempting to try to harness the massive parallelism available in these systems for single, compute-intensive applications. There are, however, several obstacles that remain before networks of workstations can become a poor man's supercomputer.
Reference: [18] <author> A. Singh, J. Schaeffer and M. Green. </author> <title> A Template-Based Approach to the Generation of Distributed Applications Using a Network of Workstations. </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 2, no. 1, </volume> <month> January </month> <year> 1991, </year> <pages> pp. 52-67. </pages> <address> UBLCS-92-2 10 </address>
Reference-contexts: For the most part, systems such as Linda [15], Amber [12], nigen++ [2], AERO [3] and PVM [6] exist as library functions callable by applications and cannot be considered programming environments. On the other hand, systems such as apE [13], CODE [10], FrameWorks <ref> [18] </ref> and HeNCE [7] include a graphical notation for parallel computations but no support for fault tolerance. In this paper, we illustrate the utility of the Paralex approach by considering a signal processing application of significant practical interest. The next section gives an overview of Paralex.
References-found: 18

