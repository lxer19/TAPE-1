URL: ftp://ftp.cs.washington.edu/pub/constraints/papers/constraint-hierarchies-lisp-symb-comp.ps.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/theory/hierarchies-92.html
Root-URL: 
Email: (borning@cs.washington.edu)  (bnfb@csr.uvic.ca)  (molly@cs.washington.edu)  
Title: Constraint Hierarchies  
Author: ALAN BORNING BJORN FREEMAN-BENSON MOLLY WILSON 
Address: Seattle, Washington 98195  Box 3055, Victoria, B.C. V8W 3P6 CANADA  Seattle, Washington 98195  
Affiliation: Department of Computer Science and Engineering, FR-35, University of Washington,  University of Victoria, Department of Computer Science,  Department of Computer Science and Engineering, FR-35, University of Washington,  
Date: 5, 223-270, 1992  
Note: LISP AND SYMBOLIC COMPUTATION: An International Journal,  c 1992 Kluwer Academic Publishers Manufactured in The Netherlands  
Abstract: Constraints allow programmers and users to state declaratively a relation that should be maintained, rather than requiring them to write procedures to maintain the relation themselves. They are thus useful in such applications as programming languages, user interface toolkits, and simulation packages. In many situations, it is desirable to be able to state both required and preferential constraints. The required constraints must hold. Since the other constraints are merely preferences, the system should try to satisfy them if possible, but no error condition arises if it cannot. A constraint hierarchy consists of a set of constraints, each labeled as either required or preferred at some strength. An arbitrary number of different strengths is allowed. In the discussion of a theory of constraint hierarchies, we present alternate ways of selecting among competing possible solutions, and prove a number of propositions about the relations among these alternatives. We then outline algorithms for satisfying constraint hierarchies, and ways in which we have used constraint hierarchies in a number of programming languages and systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Barth, Paul. </author> <title> An Object-Oriented Approach to Graphical Interfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5, </volume> <month> 2 (April </month> <year> 1986) </year> <month> 142-172. </month>
Reference-contexts: Reference [9] discusses the design of a syntax-based program editor using constraints. References [10] and [17] describe using constraint hierarchies to define the inter- and intra-window relations in a window system. Other user interface toolkits that use constraints include GROW <ref> [1] </ref>, MEL [34], GITS [60], the FilterBrowser user interface construction tool [16], and the Cactus statistics exploration environment [52]. 6..4 General-Purpose Programming Languages A number of researchers have investigated general-purpose languages that use constraints, in addition to those mentioned in Section 5..
Reference: 2. <author> Bohringer, Karl-Friedrich. </author> <title> Using Constraints to Achieve Stability in Automatic Graph Layout Algorithms. </title> <booktitle> In CHI'90 Conference Proceedings, ACM SIGCHI, </booktitle> <address> Seattle, Washington (April 1990) 43-52. </address>
Reference-contexts: Both representations were editable, and the results were reflected in both windows simultaneously. Other constraint-based geometric layout systems include IDEAL [79, 80], Magritte [33], COOL [43], Converge [73] for 3-d geometric modeling, and <ref> [2] </ref> for laying out cyclic graphs. All of the interactive geometric layout systems had to deal in some way with the problem of default constraints.
Reference: 3. <author> Borning, Alan. </author> <title> The Programming Language Aspects of ThingLab, </title>
Reference-contexts: The perturbation model has often been used in constraint-based applications such as the interactive graphics systems Sketchpad [75], ThingLab I <ref> [3] </ref>, Magritte [33], and Juno [58], and user interface construction systems such as Garnet [57, 56]. We can also view the ubiquitous spreadsheet as using the perturbation model: formulas are constraints relating the permissible values in cells. Before a user action, cells have values that satisfy the constraints (formulas). <p> All three Orange algorithms have been implemented in Smalltalk and Common Lisp. However, none of these implementations supports partially ordered hierarchies or read-only and write-only annotations. 4..3 Other Algorithms Although not designed for solving constraint hierarchies, many other constraint solving techniques are available, including augmented term rewriting [46], relaxation <ref> [3, 44, 75] </ref>, and searching for a solution over a finite domain. Augmented term rewriting is an equation rewriting technique borrowed from functional programming languages, with added support for objects and multi-directional constraints. <p> II, HCLP (R) (a language that integrates constraint hierarchies with logic programming), and Kaleido CONSTRAINT HIERARCHIES 249 scope (a hybrid constraint-imperative programming language); we also list a number of systems built by other researchers that have applied this theory as well. 5..1 Systems for Building Simulations and User Interfaces ThingLab <ref> [3] </ref> was a constraint-based laboratory that allowed a user to construct simulations of such things as electrical circuits, mechanical linkages, demonstrations of geometric theorems, and graphical calculators using interactive direct-manipulation techniques. ThingLab used two kinds of local propagation, as well as relaxation, to solve constraints.
References-found: 3

