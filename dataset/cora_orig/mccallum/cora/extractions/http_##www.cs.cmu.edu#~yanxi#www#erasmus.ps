URL: http://www.cs.cmu.edu/~yanxi/www/erasmus.ps
Refering-URL: http://www.cs.cmu.edu/~yanxi/www/talks.html
Root-URL: http://www.cs.cmu.edu
Email: email: yanxi@dimacs.rutgers.edu  liu@cs.umass.edu  
Title: A Summary for an ERASMUS Intensive Course on Symmetry Groups and  
Author: Yanxi Liu 
Note: currently  
Address: Piscataway, NJ 08855-1179  Amherst, MA 01003 USA  
Affiliation: DIMACS Center University of Rutgers  Computer Science Department University of Massachusetts  
Date: (April 19 May 3, 1994) (May 3 May 22, 1995)  
Pubnum: Robotics  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> H. Alt, K. Mehlhorn, H. Wagener, and E. Welzl. </author> <title> Congruence, similarity, and symmetries of geometric objects. </title> <journal> Discrete and Computational Geometry, </journal> <volume> 3(3) </volume> <pages> 237-256, </pages> <year> 1988. </year>
Reference-contexts: No proved result for the general case exists yet. * How will this work be related to the approximate symmetries <ref> [1, 4, 5] </ref> instead of exact symmetries? 68 2.4.3 Homework 6. Create an assembly example and show how KA3 solves it. Describe input and output of KA3. Extra credit: 1. Given an algebraic surface (in polynomial form), how do you find the symmetry group of it? 2.
Reference: [2] <author> C.M. Brown. PADL2: </author> <title> A technical summary. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 2(2) </volume> <pages> 69-84, </pages> <month> March </month> <year> 1982. </year> <month> 71 </month>
Reference-contexts: The current version of the algorithm has been implemented on SPARK workstations using programming language POP11 5 , and has been applied to computing symmetry groups of the boundary models from the solid modeller PADL2 <ref> [2] </ref> in an assembly planning system called KA3 [9, 10, 11, 12]. G plane denotes the symmetry group of a unoriented planar surface while for an oriented plane the poles on the `equator' should disappear. <p> KA3 reasons about how parts with multiple contacting features fit together, generating assembly task specifications by taking advantage of the symmetries existing between contacting surfaces of assembled parts. Given a set of parts to be assembled using solid modelling system PADL2 <ref> [2] </ref> and a set of high-level instructions such as part A fits part B, KA3 infers the possible sets of mating features and produces a set of proposed assembly configurations (PACs) (step one [9]). <p> found: b1 : all_insertors--&gt; [[1 3] [1 4] [3] [4]] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b2 : all_insertors--&gt; [[1 3] [1 4] [3] [4]] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b3 : all_insertors--&gt; [[1 2] [1 3] <ref> [2] </ref> [3]] all_multi_insertors--&gt; [[1 3 2]] comp1 : [1 3 2] The compound features that have the highest degree are matched first.
Reference: [3] <author> M.P. </author> <title> Do Carmo. Differential Geometry of Curves and Surfaces. </title> <publisher> Prentice Hall, </publisher> <address> New Jersey, </address> <year> 1976. </year>
Reference-contexts: For each s 2 S if s is a non-singular point of surface S (p.78 <ref> [3] </ref>) then v 2 S 2 is one of the two normals of the tangent plane at point s such that (s; v) 2 ; if s is a singular point of S (e.g. at the apex of a cone) then, for all v, where v 2 S 2 is the <p> The process starts from the body that has the smallest number of surfaces. From bodies b1; b2 and b3, the same type of compound features multi insertor are found: b1 : all_insertors--&gt; [[1 3] [1 4] <ref> [3] </ref> [4]] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b2 : all_insertors--&gt; [[1 3] [1 4] [3] [4]] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b3 : all_insertors--&gt; [[1 2] [1 3] [2] [3]] all_multi_insertors--&gt; [[1 3 2]] comp1 : [1 <p> From bodies b1; b2 and b3, the same type of compound features multi insertor are found: b1 : all_insertors--&gt; [[1 3] [1 4] <ref> [3] </ref> [4]] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b2 : all_insertors--&gt; [[1 3] [1 4] [3] [4]] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b3 : all_insertors--&gt; [[1 2] [1 3] [2] [3]] all_multi_insertors--&gt; [[1 3 2]] comp1 : [1 3 2] The compound features that have the highest degree are matched first. <p> b1 : all_insertors--&gt; [[1 3] [1 4] <ref> [3] </ref> [4]] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b2 : all_insertors--&gt; [[1 3] [1 4] [3] [4]] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b3 : all_insertors--&gt; [[1 2] [1 3] [2] [3]] all_multi_insertors--&gt; [[1 3 2]] comp1 : [1 3 2] The compound features that have the highest degree are matched first.
Reference: [4] <author> S. Iwanowski. </author> <title> Testing approximate symmetry with prescirbed orbits. </title> <type> Technical Report B-89-12, </type> <institution> Freie University, </institution> <address> Berlin, Germany, </address> <year> 1989. </year>
Reference-contexts: The process starts from the body that has the smallest number of surfaces. From bodies b1; b2 and b3, the same type of compound features multi insertor are found: b1 : all_insertors--&gt; [[1 3] [1 4] [3] <ref> [4] </ref>] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b2 : all_insertors--&gt; [[1 3] [1 4] [3] [4]] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b3 : all_insertors--&gt; [[1 2] [1 3] [2] [3]] all_multi_insertors--&gt; [[1 3 2]] comp1 : [1 3 <p> From bodies b1; b2 and b3, the same type of compound features multi insertor are found: b1 : all_insertors--&gt; [[1 3] [1 4] [3] <ref> [4] </ref>] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b2 : all_insertors--&gt; [[1 3] [1 4] [3] [4]] all_multi_insertors--&gt; [[1 3 4] [1 4 3]] comp1 : [1 3 4] b3 : all_insertors--&gt; [[1 2] [1 3] [2] [3]] all_multi_insertors--&gt; [[1 3 2]] comp1 : [1 3 2] The compound features that have the highest degree are matched first. <p> No proved result for the general case exists yet. * How will this work be related to the approximate symmetries <ref> [1, 4, 5] </ref> instead of exact symmetries? 68 2.4.3 Homework 6. Create an assembly example and show how KA3 solves it. Describe input and output of KA3. Extra credit: 1. Given an algebraic surface (in polynomial form), how do you find the symmetry group of it? 2.
Reference: [5] <author> S. Iwanowski. </author> <title> Testing approximate symmetry in the plane is NP-hard. </title> <journal> Theoretical Computer Science, </journal> <volume> 80 </volume> <pages> 227-262, </pages> <year> 1991. </year>
Reference-contexts: No proved result for the general case exists yet. * How will this work be related to the approximate symmetries <ref> [1, 4, 5] </ref> instead of exact symmetries? 68 2.4.3 Homework 6. Create an assembly example and show how KA3 solves it. Describe input and output of KA3. Extra credit: 1. Given an algebraic surface (in polynomial form), how do you find the symmetry group of it? 2.
Reference: [6] <author> Y. Liu. </author> <title> Symmetry Groups in Robotic Assembly Planning. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <address> Amherst, MA., </address> <month> September </month> <year> 1990. </year>
Reference-contexts: for a surface f (x; y; z) = 0, find 8g 2 E + such that g fl f = f = 0. * Given a set of n algebraic surfaces and their respective symmetry groups, what is the exact algorithm to find the symmetry group for the whole set? <ref> [6, 7, 8] </ref> have only proved results for subcases, i.e. n distinct surfaces, a pair of 1 cong or 2 cong surfaces.
Reference: [7] <author> Y. Liu. </author> <title> On symmetry groups for oriented surfaces. </title> <type> DIMACS Technical Report, </type> <institution> Rutgers University, 93-86:1-20, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: for a surface f (x; y; z) = 0, find 8g 2 E + such that g fl f = f = 0. * Given a set of n algebraic surfaces and their respective symmetry groups, what is the exact algorithm to find the symmetry group for the whole set? <ref> [6, 7, 8] </ref> have only proved results for subcases, i.e. n distinct surfaces, a pair of 1 cong or 2 cong surfaces.
Reference: [8] <author> Y. Liu and R. Popplestone. </author> <title> A Group Theoretical Formalization of Surface Contact. </title> <journal> International Journal of Robotics Research, </journal> <volume> 13(2):148 - 161, </volume> <month> April </month> <year> 1994. </year>
Reference-contexts: It is argued in <ref> [8] </ref> that "the treatment of primitive features as sets (planar surfaces being the only special case) is sufficient as far as their symmetries are concerned. <p> for a surface f (x; y; z) = 0, find 8g 2 E + such that g fl f = f = 0. * Given a set of n algebraic surfaces and their respective symmetry groups, what is the exact algorithm to find the symmetry group for the whole set? <ref> [6, 7, 8] </ref> have only proved results for subcases, i.e. n distinct surfaces, a pair of 1 cong or 2 cong surfaces.
Reference: [9] <author> Y. Liu and R.J. Popplestone. </author> <title> Assembly planning from solid models. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <address> Washing-ton, DC, 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The current version of the algorithm has been implemented on SPARK workstations using programming language POP11 5 , and has been applied to computing symmetry groups of the boundary models from the solid modeller PADL2 [2] in an assembly planning system called KA3 <ref> [9, 10, 11, 12] </ref>. G plane denotes the symmetry group of a unoriented planar surface while for an oriented plane the poles on the `equator' should disappear. <p> The Kinematic Assembly planning system KA3 <ref> [9, 10, 11] </ref> deals with the kinematic and spatial constraints 6 primarily. KA3 reasons about how parts with multiple contacting features fit together, generating assembly task specifications by taking advantage of the symmetries existing between contacting surfaces of assembled parts. <p> Given a set of parts to be assembled using solid modelling system PADL2 [2] and a set of high-level instructions such as part A fits part B, KA3 infers the possible sets of mating features and produces a set of proposed assembly configurations (PACs) (step one <ref> [9] </ref>). For each PAC, the relative locations of assembly parts are calculated and the spatial constrains are checked using constraint satisfaction network (step two [10]). Then a set of feasible assembly configurations (FACs) are determined.
Reference: [10] <author> Y. Liu and R.J. Popplestone. </author> <title> Symmetry constraint inference in assembly planning. </title> <booktitle> In Eighth National Conference on Artificial Intelligence, </booktitle> <address> Boston, Mass., </address> <month> July/August </month> <year> 1990. </year>
Reference-contexts: The current version of the algorithm has been implemented on SPARK workstations using programming language POP11 5 , and has been applied to computing symmetry groups of the boundary models from the solid modeller PADL2 [2] in an assembly planning system called KA3 <ref> [9, 10, 11, 12] </ref>. G plane denotes the symmetry group of a unoriented planar surface while for an oriented plane the poles on the `equator' should disappear. <p> The Kinematic Assembly planning system KA3 <ref> [9, 10, 11] </ref> deals with the kinematic and spatial constraints 6 primarily. KA3 reasons about how parts with multiple contacting features fit together, generating assembly task specifications by taking advantage of the symmetries existing between contacting surfaces of assembled parts. <p> For each PAC, the relative locations of assembly parts are calculated and the spatial constrains are checked using constraint satisfaction network (step two <ref> [10] </ref>). Then a set of feasible assembly configurations (FACs) are determined. For each FAC, KA3 performs a disassembly motion analysis, yielding a lattice of contact states containing all the partially-ordered assembly-motion sets (POAMS) (step three [11]).
Reference: [11] <author> Y. Liu and R.J. Popplestone. </author> <title> Symmetry groups in analysis of assembly kinematics. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <address> Washington, DC, May 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The current version of the algorithm has been implemented on SPARK workstations using programming language POP11 5 , and has been applied to computing symmetry groups of the boundary models from the solid modeller PADL2 [2] in an assembly planning system called KA3 <ref> [9, 10, 11, 12] </ref>. G plane denotes the symmetry group of a unoriented planar surface while for an oriented plane the poles on the `equator' should disappear. <p> The Kinematic Assembly planning system KA3 <ref> [9, 10, 11] </ref> deals with the kinematic and spatial constraints 6 primarily. KA3 reasons about how parts with multiple contacting features fit together, generating assembly task specifications by taking advantage of the symmetries existing between contacting surfaces of assembled parts. <p> Then a set of feasible assembly configurations (FACs) are determined. For each FAC, KA3 performs a disassembly motion analysis, yielding a lattice of contact states containing all the partially-ordered assembly-motion sets (POAMS) (step three <ref> [11] </ref>). Each POAMS is represented as a directed graph, with contact states as nodes and translational motions as arcs. Every path in a POAMS from free space to the goal configuration constitutes a candidate sequence of assembly motions.
Reference: [12] <author> Y. Liu and R.J. Popplestone. </author> <title> From symmetry groups to stiffness matrices. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <address> Washington, DC, May 1992. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The current version of the algorithm has been implemented on SPARK workstations using programming language POP11 5 , and has been applied to computing symmetry groups of the boundary models from the solid modeller PADL2 [2] in an assembly planning system called KA3 <ref> [9, 10, 11, 12] </ref>. G plane denotes the symmetry group of a unoriented planar surface while for an oriented plane the poles on the `equator' should disappear.
Reference: [13] <author> Herbert S. Wilf. </author> <title> Algorithms and Complixity. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Engle-wood Cliffs, New Jersey 07632, </address> <year> 1986. </year> <pages> page 142. 72 </pages>
Reference-contexts: The current implemented version has asymptotic time complexity O (n 2 ) + O (logM ) where n is the number of poles, and O (logM ) is the order of magnitude for computing the greatest common divisor for numbers a; b with M = M ax (a; b) <ref> [13] </ref>. The only case where n can be arbitrarily large is when both groups are dihedral groups. However this case can be taken care of by using generator and relation representations for the poles of dihedral groups.
References-found: 13

