URL: ftp://ftp.cse.ucsc.edu/pub/reinas/papers/dvr-proj.ps.gz
Refering-URL: http://www.cse.ucsc.edu/~ksk/pubs.html
Root-URL: http://www.cse.ucsc.edu
Title: Projection-based Data Level Comparisons of Direct Volume Rendering Algorithms  
Author: Kwansik Kim and Alex Pang 
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  
Date: July 18, 1997  
Pubnum: UCSC-CRL-97-16  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jim Blinn. </author> <title> Light reflection functions for simulations of clouds and dusty surfaces. </title> <booktitle> In Computer Graphics, </booktitle> <pages> pages 21-29, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: 1 Introduction Direct volume rendering (DVR) is one of the most popular methods for visualizing 3D scalar data sets. It generates images directly from the data values without creating intermediate geometric representations. The basic idea behind DVR is the simulation of light interaction with matter <ref> [1, 2, 3] </ref>. DVR is also a view-dependent approach requiring recalculation each time the view point is changed. Because of the view-dependent nature and the calculations involved with reasonably sized 3D data sets, DVR is a relatively expensive approach.
Reference: [2] <author> J. T. Kajiya and B. Von Herzen. </author> <title> Ray tracing volume densities. </title> <booktitle> In Proceedings of SIG-GRAPH, </booktitle> <pages> pages 165-174, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: 1 Introduction Direct volume rendering (DVR) is one of the most popular methods for visualizing 3D scalar data sets. It generates images directly from the data values without creating intermediate geometric representations. The basic idea behind DVR is the simulation of light interaction with matter <ref> [1, 2, 3] </ref>. DVR is also a view-dependent approach requiring recalculation each time the view point is changed. Because of the view-dependent nature and the calculations involved with reasonably sized 3D data sets, DVR is a relatively expensive approach.
Reference: [3] <author> Marc Levoy. </author> <title> Display of surfaces from volume data. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 8(5) </volume> <pages> 29-37, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Direct volume rendering (DVR) is one of the most popular methods for visualizing 3D scalar data sets. It generates images directly from the data values without creating intermediate geometric representations. The basic idea behind DVR is the simulation of light interaction with matter <ref> [1, 2, 3] </ref>. DVR is also a view-dependent approach requiring recalculation each time the view point is changed. Because of the view-dependent nature and the calculations involved with reasonably sized 3D data sets, DVR is a relatively expensive approach.
Reference: [4] <author> Peter L. Williams and Samuel P. Uselton. </author> <title> Foundations for measuring volume rendering quality. </title> <type> Technical Report NAS-96-021, </type> <institution> NASA Numerical Aerospace Simulation, </institution> <year> 1996. </year>
Reference-contexts: Finally, if the differences are very small, image level comparisons are not as effective. One should also be aware of the limitations of summary statistics derived from images. It is possible to produce cases where the summary statistics are the same, but the images are obviously different <ref> [4] </ref>. 3 Data Level Comparison The name data level comparison was inspired by the work of Trapp and Pagendarm [5] where they used it in computational fluid dynamics (CFD) applications. <p> In particular, in addition to the rigorous specification of key DVR parameters such as viewing parameters, optical models, transfer functions, etc. recommended by Williams and Uselton <ref> [4] </ref>, we also want a systematic way of comparing algorithms as diverse as projection-based, ray-based, texture-based, transform space, etc. Our approach is divided into three steps: 5. Projection Based Metrics 3 1. Identify a common basis for comparison.
Reference: [5] <author> Jens Trapp and Hans-Georg Pagendarm. </author> <title> Data level comparative visualization in aircraft design. </title> <booktitle> In Proceedings of Visualization 96, </booktitle> <pages> pages 393-396. </pages> <publisher> IEEE, </publisher> <year> 1996. </year>
Reference-contexts: It is possible to produce cases where the summary statistics are the same, but the images are obviously different [4]. 3 Data Level Comparison The name data level comparison was inspired by the work of Trapp and Pagendarm <ref> [5] </ref> where they used it in computational fluid dynamics (CFD) applications. Data level methods incorporate intermediate and auxiliary information available during the rendering process and use these information to generate a data level comparison image.
Reference: [6] <author> Alex Pang and Adam Freeman. </author> <title> Methods for comparing 3D surface attributes. </title> <booktitle> In SPIE Vol. 2656 Visual Data Exploration and Analysis III, </booktitle> <pages> pages 58-64. SPIE, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: It does not preclude the use of of traditional methods such as side-by-side presentations for showing the results of the data level comparison. In addition, since the comparative infor mation are usually being collected in 3D, other methods such as those presented in <ref> [6] </ref> may also be used. 4 Bases for Comparing Direct Volume Rendering Algorithms Because of the varying strategies in which different DVR algorithms generate their images and because we want to utilize intermediate 3D rendering information, it is necessary to find a common bases for comparing DVR algorithms.
Reference: [7] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> A coherent projection approach for direct volume rendering. </title> <booktitle> In Proceedings of SIGGRAPH 91, </booktitle> <pages> pages 275-284, </pages> <year> 1991. </year>
Reference-contexts: Our approach is divided into three steps: 5. Projection Based Metrics 3 1. Identify a common basis for comparison. In this paper, we use cell projection method <ref> [7] </ref> as our base algorithm. Specifically, ray-based algorithms are transformed and represented as projection-based algorithms. We see the process as being invertible. That is, if a ray-based algorithm can be represented using a projection-based approach, then a projection-based algorithm can be represented as a ray-based approach. <p> Projection-based methods are well explained in previous works <ref> [10, 7] </ref>. Here, we give a brief description of the essential steps. Assuming regularly gridded data being projected using parallel projection, Figure 4.1 shows a schematic of how a single volumetric cell is projected onto the screen. Each data cell is a cube defined by 8 data points. <p> Individual polygons are then simply sent through the geometry engine. Rendering an entire volume consists of projecting individual cells onto the screen in back-to-front or front-to-back order <ref> [7] </ref>. 4.2 Simulating Other Methods In order to simulate other DVR algorithms, we use the standard scanline algorithm instead of hardware assisted polygon rendering.
Reference: [8] <author> Tom Malzbender. </author> <title> Fourier volume rendering. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 12(3) </volume> <pages> 233-250, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: It should be noted that cell projection does not exhaustively represent all existing and future DVR algorithms for example, it is very difficult to represent Fourier volume rendering <ref> [8] </ref> using cell projection. 2. Derive comparison metrics from the common base. While mapping other algorithms to the common base is not possible or feasible for all DVR algorithms and requires intimate knowledge of both algorithms, the process allows us to derive data level comparison metrics using the common base.
Reference: [9] <author> K. Kim and A. Pang. </author> <title> Ray-based data level comparison of direct volume rendering algorithms. </title> <type> Technical Report UCSC-CRL-97-15, </type> <institution> University of California, Santa Cruz, </institution> <year> 1997. </year> <note> http://www.cse.ucsc.edu/research/slvg/dvr.html. </note>
Reference-contexts: While mapping other algorithms to the common base is not possible or feasible for all DVR algorithms and requires intimate knowledge of both algorithms, the process allows us to derive data level comparison metrics using the common base. For example, an earlier work <ref> [9] </ref> that used ray tracing as the base algorithm, we derived a variety of ray-based metrics such as number of samples along the ray, penetration depth of the ray when the accumulated opacity reached a specified threshold, similarity measures of different ray samples, etc. 3. Evaluation. <p> Specifically, there is a reciprocity between ray-based and projection-based DVR algorithms. We then presented two new data level comparison metrics that highlight different aspects of the volume data and the DVR algorithms. These complements the ray-based metrics that we have developed earlier <ref> [9] </ref>. These metrics, used individually and in combinations, provide additional information beyond how two different DVR images are different they seek to provide clues as to why two DVR images may be different.
Reference: [10] <author> P. Shirley and A. Tuchman. </author> <title> A polygonal approximation to direct scalar volume rendering. </title> <booktitle> In 1990 Workshop on Volume Visualization, </booktitle> <pages> pages 63-70, </pages> <address> San Diego, CA, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Projection-based methods are well explained in previous works <ref> [10, 7] </ref>. Here, we give a brief description of the essential steps. Assuming regularly gridded data being projected using parallel projection, Figure 4.1 shows a schematic of how a single volumetric cell is projected onto the screen. Each data cell is a cube defined by 8 data points.
Reference: [11] <author> Allen Van Gelder and Kwansik Kim. </author> <title> Direct volume rendering with shading via 3D textures. </title> <booktitle> In ACM/IEEE Symposium on Volume Visualization, </booktitle> <pages> pages 22-30, </pages> <address> San Fran-cisco, CA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Using a software scanline algorithm also allows us to compare variations of color and data interpolation, and different ray sampling patterns. For example, if we use regular ray sampling and trilinear interpolation of colors within a cell, we are simulating volume texture technique <ref> [11] </ref>. On the other hand, if we resample data values at the front and back locations for each point on a scanline and integrate colors computed from the transfer function with the resampled data values, we are simulating ray casting with sampling at the cell faces.
References-found: 11

