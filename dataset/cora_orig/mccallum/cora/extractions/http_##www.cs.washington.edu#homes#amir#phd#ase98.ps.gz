URL: http://www.cs.washington.edu/homes/amir/phd/ase98.ps.gz
Refering-URL: http://www.cs.washington.edu/homes/amir/CodeWeb/
Root-URL: http://www.cs.washington.edu
Email: famir,notking@cs.washington.edu  
Title: Illustrating Object-Oriented Library Reuse by Example: A Tool-Based Approach  
Author: Amir Michail and David Notkin 
Web: http://www.cs.washington.edu/homes/amir/CodeWeb  
Address: Box 352350 Seattle, WA 98195-2350, USA  
Affiliation: Dept. of Computer Science and Engineering University of Washington,  
Abstract: In this paper, we present a tool-based approach that examines how example programs reuse a particular library. Our approach can facilitate reuse by: (1) guiding the developer towards important library classes of general utility; (2) guiding the developer towards library classes particularly useful for a specific application domain; and (3) providing access to the relevant source code in each example for further inspection. Our approach is supported by CodeWeb, a reuse tool we have built for C++ and Java libraries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Chen, R. Hennicker, and M. Jarke. </author> <title> On the Retrieval of Reusable Software Components. </title> <booktitle> In 2nd International Workshop on Software Reusability), </booktitle> <pages> pages 99108. </pages> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference-contexts: Perhaps the most well-known approaches are those concerned with finding a suitable component (such as a function or class) in a library that fits a particular need. Such work includes tools that use free-text indexing [2], facets [5], signature matching [7], and formal specifications <ref> [1] </ref>. While our approach is not query-based, browsing reuse boundary intersections for example programs would show important classes and relationships between them in the library even if the developer does not know exactly what kinds of classes to look for.
Reference: [2] <author> W. B. Frakes and B. A. Nejmeh. </author> <title> Software Reuse through Information Retrieval. </title> <booktitle> In 20th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 530535. </pages> <publisher> IEEE, </publisher> <year> 1987. </year>
Reference-contexts: Perhaps the most well-known approaches are those concerned with finding a suitable component (such as a function or class) in a library that fits a particular need. Such work includes tools that use free-text indexing <ref> [2] </ref>, facets [5], signature matching [7], and formal specifications [1]. While our approach is not query-based, browsing reuse boundary intersections for example programs would show important classes and relationships between them in the library even if the developer does not know exactly what kinds of classes to look for.
Reference: [3] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Section 2 presents the technique. Section 3 discusses the tool, CodeWeb, and shows how it can be used to help reuse object-oriented libraries by example. Section 4 discusses related work. Section 5 summarizes our approach. 2. Technique We make use of class diagrams <ref> [3] </ref>, which show classes and relationships between them (such as inheritance). <p> In what follows, we elaborate on step (2), which identifies the reuse boundary. This involves looking at inheritance and composition reuse as well as member function overriding. 2.1. Inheritance and Composition Reuse The two most common techniques for reuse in object-oriented systems are class inheritance and composition <ref> [3, p. 18] </ref>. These are the primary kinds of reuse represented by the reuse boundary.
Reference: [4] <author> D. Gangopadhyay and S. Mitra. </author> <title> Understanding Frameworks by Exploration of Exemplars. </title> <booktitle> In 7th International Workshop on Computer-Aided Software Engineering, </booktitle> <pages> pages 9099. </pages> <publisher> IEEE, </publisher> <month> July </month> <year> 1995. </year>
Reference-contexts: As far as we know, the work most closely related with our own is that on exemplars <ref> [4] </ref>. An exemplar is an executable visual model consisting of one or more instances of at least one concrete class for each abstract class in a library. In contrast to our approach, an exemplar is not intended to be representative of any particular application.
Reference: [5] <author> R. Prieto-Diaz and P. Freeman. </author> <title> Classifying Software for Reusability. </title> <journal> IEEE Software, </journal> <volume> 4(1):616, </volume> <year> 1987. </year>
Reference-contexts: Perhaps the most well-known approaches are those concerned with finding a suitable component (such as a function or class) in a library that fits a particular need. Such work includes tools that use free-text indexing [2], facets <ref> [5] </ref>, signature matching [7], and formal specifications [1]. While our approach is not query-based, browsing reuse boundary intersections for example programs would show important classes and relationships between them in the library even if the developer does not know exactly what kinds of classes to look for.
Reference: [6] <author> S. Sparks, K. Benner, and C. Faris. </author> <title> Managing Object-Oriented Framework Reuse. </title> <booktitle> Computer, </booktitle> <address> 29(9):5261, </address> <year> 1996. </year>
Reference-contexts: This often means having individuals attend a one-week course at the vendor 1 To simplify the presentation, we use the term library to mean any large software component, including libraries, frameworks, applications, etc. site or training large groups at the project site. <ref> [6, p. 54] </ref> A crucial aspect of these techniques is that example programs are used throughout to illustrate how to reuse the library. Indeed, most libraries come with many example programs to get the developer started. Moreover, the selection of the examples is important. <p> Sparks, Benner and Faris say the following about demonstration code: Demonstration code that is provided by the framework builder. . . tends to demonstrate the uses of all the features of the framework, rather than concentrating on how the framework is to be used in an application context. <ref> [6, p. 60] </ref> In this paper, we present a tool-based approach that allows a user to browse code that demonstrates particular library features. This is done by running the tool on the library and several example applications that make use of such features.
Reference: [7] <author> A. M. Zaremski and J. M. Wing. </author> <title> Signature Matching: A Tool for Using Software Libraries. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 4(2):146170, </volume> <year> 1995. </year>
Reference-contexts: Perhaps the most well-known approaches are those concerned with finding a suitable component (such as a function or class) in a library that fits a particular need. Such work includes tools that use free-text indexing [2], facets [5], signature matching <ref> [7] </ref>, and formal specifications [1]. While our approach is not query-based, browsing reuse boundary intersections for example programs would show important classes and relationships between them in the library even if the developer does not know exactly what kinds of classes to look for.
References-found: 7

