URL: http://www.cs.dartmouth.edu/~agent/papers/tcl96.ps.Z
Refering-URL: http://www.cnri.reston.va.us/home/koe/bib/mobile-abs.bib.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: robert.s.gray@dartmouth.edu  
Title: Agent Tcl: A flexible and secure mobile-agent system  
Author: Robert S. Gray 
Address: Hanover, New Hampshire 03755  
Affiliation: Department of Computer Science Dartmouth College  
Web: URL http://www.cs.dartmouth.edu/~agent/papers/tcl96.ps.Z  
Note: Appeared in Proceedings of Fourth Annual Usenix Tcl/Tk Workshop, pp. 9-23, 1996. Available at  
Abstract: An information agent manages all or a portion of a user's information space. The electronic resources in this space are often distributed across a network and can contain tremendous quantities of data. Mobile agents provide efficient access to such resources and are a powerful tool for implementing information agents. A mobile agent is an autonomous program that can migrate from machine to machine in a heterogeneous network. By migrating to the location of a resource, the agent can access the resource efficiently even if network conditions are poor or the resource has a low-level interface. Telescript is the best-known mobile-agent system. Telescript, however, requires the programmer to learn and work with a complex object-oriented language and a complex security model. Agent Tcl, on the other hand, is a simple, flexible, and secure system that is based on the Tcl scripting language and the Safe Tcl extension. In this paper we describe the architecture of Agent Tcl and its current implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [BR] <author> N. S. Borenstein and M. Rose. </author> <title> Safe Tcl. </title> <note> Available at ftp://ftp.fv.com/ pub/code/other/safe-tcl.tar.Z. </note>
Reference-contexts: Incoming agents are authenticated using Pretty Good Privacy (PGP) [KPS95]; resource manager agents assign access restrictions based on this authentication; and Safe Tcl enforces these restrictions as the agent executes <ref> [BR] </ref>. Here we discuss the selection of Tcl as the main agent language and the details of the base system. We discuss security in the next section. 3.1 Tcl Tcl is a high-level scripting language that was developed in 1987 and has enjoyed enormous popularity [Wel95]. <p> All of these problems have been considered in the mobile-agent literature [LO95, CGH + 95, TV96] although only the first two have seen significant implementation work. These same two problems are addressed in the current implementation of Agent Tcl using PGP [KPS95] and Safe Tcl <ref> [BR] </ref>. First we present the current implementation and then potential solutions for the remaining two security problems. 4.1 Authentication Authentication in Agent Tcl is based on PGP (Pretty Good Privacy) which is in widespread use despite controversies over export restrictions and patents [KPS95]. <p> For builtin resources, security is maintained using Safe Tcl and a set of resource manager agents. Safe Tcl is a Tcl extension that is designed to allow the safe execution of untrusted Tcl scripts <ref> [BR] </ref>. Safe Tcl provides two interpreters. One interpreter is a "trusted" interpreter that has access to the standard Tcl/Tk commands. The other interpreter is an "untrusted" interpreter from which all dangerous commands have been removed. The untrusted script executes in the untrusted interpreter.
Reference: [CBC96] <author> Kurt Cohen, Aditya Bhasin, and George Cybenko. </author> <title> Pattern recognition of 3D CAD objects: Towards an electronic yel-low pages of mechanical parts. </title> <journal> International Journal of Intelligent Engineering Systems, </journal> <note> 1996. To appear. </note>
Reference-contexts: Agent Tcl has also been used to retrieve three-dimensional drawings of mechanical parts from distributed CAD databases <ref> [CBC96] </ref>, to track purchase orders [CGN96], and in several information-retrieval applications at external sites. 6 Future directions The first area of future work is to finish the proposed architecture. We must add the hierarchical names-pace, the nonvolatile store, and multiple languages and transport mechanisms.
Reference: [CGH + 95] <author> David Chess, Benjamin Grosof, Colin Harrison, David Levine, Colin Parris, and Gene Tsudik. </author> <title> Itinerant agents for mobile computing. </title> <type> Technical Report RC 20010, </type> <institution> IBM T. J. Watson Research Center, </institution> <month> March </month> <year> 1995. </year> <note> Revised October 17, </note> <year> 1995. </year>
Reference-contexts: An agent and its children should eventually be unable to obtain any resources anywhere and terminated. All of these problems have been considered in the mobile-agent literature <ref> [LO95, CGH + 95, TV96] </ref> although only the first two have seen significant implementation work. These same two problems are addressed in the current implementation of Agent Tcl using PGP [KPS95] and Safe Tcl [BR]. <p> This approach requires the servers to have a high degree of trust in each other, so we will eventually adopt the Itinerant Agent solution <ref> [CGH + 95] </ref>, in which as much of the agent as possible is encrypted with the owner's private key on creation and remains encrypted throughout the agent's lifetime. The identity of the agent's owner is included in the migration message. <p> Each place might have its own security policy while the machine has an overall security policy. Second, we must protect an agent from malicious machines. Here we are exploring the suggestions from <ref> [CGH + 95] </ref> in which an agent is divided into components and each component is encrypted and signed separately for all or part of the journey.
Reference: [CGN96] <author> Ting Cai, Peter A. Gloor, and Saurab Nog. DartFlow: </author> <title> A workflow management system on the web using transportable agents. </title> <type> Technical Report PCS-TR96-283, </type> <institution> Deptartment of Computer Science, Dartmouth College, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Existing Agent Tcl agents that fall into this category are a workflow agent that carries an electronic form from user to user <ref> [CGN96] </ref> and a medical agent that retrieves distributed medical records based on certain criteria [Wu95]. The workflow agent must migrate sequentially since the users need to fill out the sections of the form in order. <p> Agent Tcl has also been used to retrieve three-dimensional drawings of mechanical parts from distributed CAD databases [CBC96], to track purchase orders <ref> [CGN96] </ref>, and in several information-retrieval applications at external sites. 6 Future directions The first area of future work is to finish the proposed architecture. We must add the hierarchical names-pace, the nonvolatile store, and multiple languages and transport mechanisms. We are specifically interested in Java, Lisp, electronic mail and HTTP.
Reference: [Coe94] <author> Michael D. Coen. SodaBot: </author> <title> A software agent environment and construction system. </title> <editor> In Yannis Labrou and Tim Finin, editors, </editor> <booktitle> Proceedings of the CIKM Workshop on Intelligent Information Agents, Third International Conference on Information and Knowledge Management (CIKM 94), </booktitle> <address> Gaithersburg, Maryland, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Mobile agents move the programmer away from the rigid client-server model to the more flexible peer-peer model in which programs communicate as peers and act as either clients or servers depending on their current needs <ref> [Coe94] </ref>. Finally, anecdotal evidence suggests that mobile agents are easier to understand than many other distributed-computing paradigms. Existing applications for mobile agents include electronic commerce, active documents and mail, information retrieval, workflow and process management, and network management [Whi94, Ous95]. <p> The advantages and potential applications of mobile agents have led to a flurry of recent implementation work. Notable systems include Tele-script from General Magic, Inc. [Whi94], Tacoma from the University of Cornell [JvRS95], SodaBot from MIT <ref> [Coe94] </ref> and ARA from the University of Kaiserslautern [Pei96]. These systems suffer from a range of weaknesses. Telescript provides a complex, object-oriented language and a complex security model in which the programmer must carefully identify and disallow dangerous actions.
Reference: [Gra95] <author> Robert S. Gray. </author> <title> Agent Tcl: A transportable agent system. </title> <editor> In James May-field and Tim Finin, editors, </editor> <booktitle> Proceedings of the CIKM Workshop on Intelligent Information Agents, Fourth International Conference on Information and Knowledge Management (CIKM 95), </booktitle> <address> Balti-more, Maryland, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: In other words, an agent can suspend its execution at any point, transport its code fl Supported by AFOSR contract F49620-93-1-0266 and ONR contract N00014-95-1-1204. A small section of this paper appeared in <ref> [Gra95] </ref>. and state to another machine, and resume execution on the new machine. By migrating to the location of an electronic resource, an agent can access the resource locally and can eliminate the network transfer of all intermediate data. <p> ARA strikes a balance between the Telescript and Tacoma extremes by providing multiple languages, a framework for incorporating additional languages, and low-level communication mechanisms. ARA, however, has not been released and does not address security issues. Agent Tcl is a mobile-agent system that is under development at Dartmouth College <ref> [Gra95] </ref>. Agent Tcl, like ARA, attempts to strike a balance among existing systems. Agent Tcl uses the flexible scripting language Tcl as its main language but provides a framework for incorporating additional languages.
Reference: [Har95] <author> Kenneth E. Harker. TIAS: </author> <title> A Transportable Intelligent Agent System. </title> <type> Technical Report PCS-TR95-258, </type> <institution> Department of Computer Science, Dartmouth College, </institution> <year> 1995. </year>
Reference-contexts: The architecture of Agent Tcl is shown in Figure 1. The architecture builds on the server model of Telescript [Whi94], the multiple languages of ARA [Pei96], and the transport mechanisms of two predecessor systems at Dartmouth <ref> [Har95, KK94] </ref>. The architecture has four levels. The lowest level is an API for the available transport mechanisms. The second level is a server that runs at each network site. The server performs the following tasks: * Status.
Reference: [JvRS95] <author> Dag Johansen, Robbert van Renesse, and Fred B. Scheidner. </author> <title> Operating system support for mobile agents. </title> <booktitle> In Proceedings of the 5th IEEE Workshop on Hot Topics in Operating Systems, </booktitle> <year> 1995. </year>
Reference-contexts: The advantages and potential applications of mobile agents have led to a flurry of recent implementation work. Notable systems include Tele-script from General Magic, Inc. [Whi94], Tacoma from the University of Cornell <ref> [JvRS95] </ref>, SodaBot from MIT [Coe94] and ARA from the University of Kaiserslautern [Pei96]. These systems suffer from a range of weaknesses. Telescript provides a complex, object-oriented language and a complex security model in which the programmer must carefully identify and disallow dangerous actions. <p> The advantages of Tcl are strong and the disadvantages are either easily overcome or do not affect most agents. Thus Tcl was chosen as the main language for the Agent Tcl system. The same advantages have led to the use of Tcl in other mobile-agent systems such as Tacoma <ref> [JvRS95] </ref> and ARA [Pei96]. 3.2 Agent Tcl The current implementation of Agent Tcl has two components. The first component is the server that runs at each network site. <p> The agent jump command is not strictly necessary since we could continually resubmit a Tcl procedure that was parameterized according to the current status of the task; the procedure would use the parameters to determine what it needed to do on the current machine <ref> [JvRS95] </ref>. Such an approach, however, requires that the programmer explicitly collect the necessary state information. In the "who" agent, this state information is nothing more than an index into the machine list, but more and more state information is required as the agent becomes more complex.
Reference: [KK94] <author> Keith Kotay and David Kotz. </author> <title> Transportable agents. </title> <editor> In Yannis Labrou and Tim Finin, editors, </editor> <booktitle> Proceedings of the CIKM Workshop on Intelligent Information Agents, Third International Conference on Information and Knowledge Management (CIKM 94), </booktitle> <address> Gaithersburg, Maryland, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The architecture of Agent Tcl is shown in Figure 1. The architecture builds on the server model of Telescript [Whi94], the multiple languages of ARA [Pei96], and the transport mechanisms of two predecessor systems at Dartmouth <ref> [Har95, KK94] </ref>. The architecture has four levels. The lowest level is an API for the available transport mechanisms. The second level is a server that runs at each network site. The server performs the following tasks: * Status.
Reference: [KPS95] <author> Charlie Kaufman, Radia Perlman, and Mike Speciner. </author> <title> Network Security: Private Communication in a Public World. </title> <publisher> Prentice-Hall, </publisher> <address> New Jersey, </address> <year> 1995. </year>
Reference-contexts: It does provide migration, message passing and direct connections, and has sufficient security mechanisms to protect a machine from a malicious agent and to protect agents from each other. Incoming agents are authenticated using Pretty Good Privacy (PGP) <ref> [KPS95] </ref>; resource manager agents assign access restrictions based on this authentication; and Safe Tcl enforces these restrictions as the agent executes [BR]. Here we discuss the selection of Tcl as the main agent language and the details of the base system. <p> All of these problems have been considered in the mobile-agent literature [LO95, CGH + 95, TV96] although only the first two have seen significant implementation work. These same two problems are addressed in the current implementation of Agent Tcl using PGP <ref> [KPS95] </ref> and Safe Tcl [BR]. First we present the current implementation and then potential solutions for the remaining two security problems. 4.1 Authentication Authentication in Agent Tcl is based on PGP (Pretty Good Privacy) which is in widespread use despite controversies over export restrictions and patents [KPS95]. <p> Agent Tcl using PGP <ref> [KPS95] </ref> and Safe Tcl [BR]. First we present the current implementation and then potential solutions for the remaining two security problems. 4.1 Authentication Authentication in Agent Tcl is based on PGP (Pretty Good Privacy) which is in widespread use despite controversies over export restrictions and patents [KPS95]. PGP encrypts a file or mail message using the IDEA private-key algorithm and a randomly chosen private key, encrypts the private key using the RSA public-key algorithm and the recipient's public key, and then sends the encrypted key and file to the recipient.
Reference: [LO95] <author> Jacob Y. Levy and John K. Ouster-hout. </author> <title> Safe Tcl toolkit for electronic meeting places. </title> <booktitle> In Proceedings of the First USENIX Workshop on Electronic Commerce, </booktitle> <pages> pages 133-135, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: An agent and its children should eventually be unable to obtain any resources anywhere and terminated. All of these problems have been considered in the mobile-agent literature <ref> [LO95, CGH + 95, TV96] </ref> although only the first two have seen significant implementation work. These same two problems are addressed in the current implementation of Agent Tcl using PGP [KPS95] and Safe Tcl [BR]. <p> This trusted command either severely restricts the functionality of the original command or examines the command arguments and the identity of the script's owner to determine if the command should be allowed. Agent Tcl uses the generalization of Safe Tcl that appears in the Tcl 7.5 core <ref> [LO95] </ref>. Agent Tcl creates a trusted and untrusted interpreter for each incoming agent. The agent executes in the untrusted interpreter. All dangerous commands have been removed from the untrusted interpreter and replaced with links to secure versions in the trusted interpreter.
Reference: [NCK96] <author> Saurab Nog, Sumit Chawla, and David Kotz. </author> <title> An RPC mechanism for transportable agents. </title> <type> Technical Report PCS-TR96-280, </type> <institution> Deptartment of Computer Science, Dartmouth College, </institution> <year> 1996. </year>
Reference-contexts: The protocol works even if both agents use agent meet. The agent with the lower IP address and integer identifier selects the port and the other agent connects to that port. A flexible RPC mechanism has been built on top of the direct connection mechanism <ref> [NCK96] </ref>. The server will take on more of the responsibility for establishing a direct connection as additional transport mechanisms are added. Agent Tcl also includes a (slightly) modified version of Tk 4.1 so that an agent can present a graphical interface and interact with the user of its current machine.
Reference: [Ous95] <author> John K. Ousterhout. </author> <title> Scripts and agents: The new software high ground. </title> <booktitle> Invited Talk at 1995 Winter USENIX Conference, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: Finally, anecdotal evidence suggests that mobile agents are easier to understand than many other distributed-computing paradigms. Existing applications for mobile agents include electronic commerce, active documents and mail, information retrieval, workflow and process management, and network management <ref> [Whi94, Ous95] </ref>. Potential applications include most distributed applications, particularly those that must run on disconnected platforms or that must invoke multiple operations at each remote site [Whi94, Ous95]. The advantages and potential applications of mobile agents have led to a flurry of recent implementation work. <p> Existing applications for mobile agents include electronic commerce, active documents and mail, information retrieval, workflow and process management, and network management <ref> [Whi94, Ous95] </ref>. Potential applications include most distributed applications, particularly those that must run on disconnected platforms or that must invoke multiple operations at each remote site [Whi94, Ous95]. The advantages and potential applications of mobile agents have led to a flurry of recent implementation work. Notable systems include Tele-script from General Magic, Inc. [Whi94], Tacoma from the University of Cornell [JvRS95], SodaBot from MIT [Coe94] and ARA from the University of Kaiserslautern [Pei96].
Reference: [Pei96] <author> Holger Peine. </author> <title> The ARA project. </title> <note> WWW page http://www.uni-kl.edu/ AG-Nehmer/Ara, </note> <institution> Distributed Systems Group, Department of Computer Science, University of Kaiserlautern, </institution> <year> 1996. </year>
Reference-contexts: The advantages and potential applications of mobile agents have led to a flurry of recent implementation work. Notable systems include Tele-script from General Magic, Inc. [Whi94], Tacoma from the University of Cornell [JvRS95], SodaBot from MIT [Coe94] and ARA from the University of Kaiserslautern <ref> [Pei96] </ref>. These systems suffer from a range of weaknesses. Telescript provides a complex, object-oriented language and a complex security model in which the programmer must carefully identify and disallow dangerous actions. Tacoma and SodaBot provide high-level scripting languages (Tcl and SodaBotL respectively) that are much easier to learn and use. <p> The architecture of Agent Tcl is shown in Figure 1. The architecture builds on the server model of Telescript [Whi94], the multiple languages of ARA <ref> [Pei96] </ref>, and the transport mechanisms of two predecessor systems at Dartmouth [Har95, KK94]. The architecture has four levels. The lowest level is an API for the available transport mechanisms. The second level is a server that runs at each network site. The server performs the following tasks: * Status. <p> The explicit stack is simpler and more flexible than the ARA solution, in which the C runtime stack must be captured in a portable way and the Tcl interpreter on the destination machine must contain the same set of C functions <ref> [Pei96] </ref>. On the other hand, the explicit stack is less efficient. Our modified Tcl core runs Tcl programs approximately 20 percent slower than the standard Tcl core, whereas ARA's modified Tcl core imposes little additional overhead. <p> Thus Tcl was chosen as the main language for the Agent Tcl system. The same advantages have led to the use of Tcl in other mobile-agent systems such as Tacoma [JvRS95] and ARA <ref> [Pei96] </ref>. 3.2 Agent Tcl The current implementation of Agent Tcl has two components. The first component is the server that runs at each network site. <p> The agent jump command is convenient since it automatically captures this state. The agent jump command does impose a moderate execution overhead on the Tcl interpreter; this overhead can be made much smaller, however, and can even be reduced to near zero with the ARA solution <ref> [Pei96] </ref>. Another example is our "alert" agent that monitors a specified set of remote resources and notifies its owner of any change in resource status.
Reference: [Sah94] <author> Adam Sah. </author> <title> TC: An efficient implementation of the Tcl language. </title> <type> Master's thesis, </type> <institution> University of California at Berkeley, </institution> <month> May </month> <year> 1994. </year> <note> Available as technical report UCB-CSD-94-812. </note>
Reference-contexts: A mobile Tcl agent is usually short even if it performs a complex task, and is usually more than efficient enough when compared to resource and network latencies. In addition, several groups are working on structured-programming extensions to Tcl and on faster Tcl interpreters <ref> [Sah94] </ref>. Tcl is not suitable for every mobile-agent application, however, such as performing search operations against large, distributed collections of numerical data. For this reason, Agent Tcl includes a framework for incorporating additional languages. We are using this framework to add support for the new Java language [Sun94].
Reference: [Sun94] <institution> The Java language: A white paper. Sun Microsystems White Paper, Sun Mi-crosystems, </institution> <year> 1994. </year>
Reference-contexts: Tcl is not suitable for every mobile-agent application, however, such as performing search operations against large, distributed collections of numerical data. For this reason, Agent Tcl includes a framework for incorporating additional languages. We are using this framework to add support for the new Java language <ref> [Sun94] </ref>. Java is much more structured than Tcl and has the potential to run at near-native speed through "just-in-time" compilation. We expect, however, that Tcl will continue to be the main agent language and that Java will be used only for speed-critical agents (or portions of agents).
Reference: [TV96] <author> Joseph Tardo and Luis Valente. </author> <title> Mobile agent security and Telescript. </title> <booktitle> In Proceedings of the 41th International Conference of the IEEE Computer Society (Comp-Con '96), </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: An agent and its children should eventually be unable to obtain any resources anywhere and terminated. All of these problems have been considered in the mobile-agent literature <ref> [LO95, CGH + 95, TV96] </ref> although only the first two have seen significant implementation work. These same two problems are addressed in the current implementation of Agent Tcl using PGP [KPS95] and Safe Tcl [BR]. <p> As in Telescript, we digitally sign using the server's private key since the owner's private key is unavailable once the agent leaves its home machine <ref> [TV96] </ref>.
Reference: [Way95] <author> Peter Wayner. </author> <title> Agents Unleashed: A public domain look at agent technology. AP Professional, </title> <address> Chestnut Hill, Mas-sachusetts, </address> <year> 1995. </year>
Reference-contexts: This structure is much less efficient than tightly integrating PGP with the rest of the system, but is simpler and more flexible, especially since it becomes trivial to create an Agent Tcl distribution that does not include PGP or that uses different encryption software <ref> [Way95] </ref>. When an agent registers with a server using the agent begin command, the registration request is digitally signed used the owner's private key, encrypted using the server's public key, and sent to the server. <p> The agent must spend currency in order to access resources and must divide its own currency among its children. The agent and its children will eventually run out of currency and terminate. Such currency schemes already exist in the context of electronic commerce <ref> [Way95] </ref>. 5 Applications the agent commands. The agent's task is to determine which users are logged onto a set of machines. The agent uses agent submit to create a child agent.
Reference: [Wel95] <author> Brent B. Welch. </author> <title> Practical Programming in Tcl and Tk. </title> <publisher> Prentice-Hall, </publisher> <address> New Jersey, </address> <year> 1995. </year>
Reference-contexts: Here we discuss the selection of Tcl as the main agent language and the details of the base system. We discuss security in the next section. 3.1 Tcl Tcl is a high-level scripting language that was developed in 1987 and has enjoyed enormous popularity <ref> [Wel95] </ref>. Tcl has several advantages as a mobile-agent language. Tcl is easy to learn and use due to its elegant simplicity and an imperative style that is immediately familiar to any programmer. Tcl is interpreted so it is highly portable and easier to make secure.
Reference: [Whi94] <author> James E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic White Paper, General Magic, </title> <publisher> Inc., </publisher> <year> 1994. </year>
Reference-contexts: Mobile agents also ease the development, testing and deployment of distributed applications since they hide the communication channels but not the location of the computation <ref> [Whi94] </ref>, they eliminate the need to detect and handle network failure except during migration, and they can dynamically distribute and redistribute themselves throughout the network. <p> Finally, anecdotal evidence suggests that mobile agents are easier to understand than many other distributed-computing paradigms. Existing applications for mobile agents include electronic commerce, active documents and mail, information retrieval, workflow and process management, and network management <ref> [Whi94, Ous95] </ref>. Potential applications include most distributed applications, particularly those that must run on disconnected platforms or that must invoke multiple operations at each remote site [Whi94, Ous95]. The advantages and potential applications of mobile agents have led to a flurry of recent implementation work. <p> Existing applications for mobile agents include electronic commerce, active documents and mail, information retrieval, workflow and process management, and network management <ref> [Whi94, Ous95] </ref>. Potential applications include most distributed applications, particularly those that must run on disconnected platforms or that must invoke multiple operations at each remote site [Whi94, Ous95]. The advantages and potential applications of mobile agents have led to a flurry of recent implementation work. Notable systems include Tele-script from General Magic, Inc. [Whi94], Tacoma from the University of Cornell [JvRS95], SodaBot from MIT [Coe94] and ARA from the University of Kaiserslautern [Pei96]. <p> The advantages and potential applications of mobile agents have led to a flurry of recent implementation work. Notable systems include Tele-script from General Magic, Inc. <ref> [Whi94] </ref>, Tacoma from the University of Cornell [JvRS95], SodaBot from MIT [Coe94] and ARA from the University of Kaiserslautern [Pei96]. These systems suffer from a range of weaknesses. Telescript provides a complex, object-oriented language and a complex security model in which the programmer must carefully identify and disallow dangerous actions. <p> The architecture of Agent Tcl is shown in Figure 1. The architecture builds on the server model of Telescript <ref> [Whi94] </ref>, the multiple languages of ARA [Pei96], and the transport mechanisms of two predecessor systems at Dartmouth [Har95, KK94]. The architecture has four levels. The lowest level is an API for the available transport mechanisms. The second level is a server that runs at each network site. <p> First, we plan to add a hierarchical system of resource managers. This will become particularly important as we move towards the Telescript model in which there are multiple virtual places per machine <ref> [Whi94] </ref>. Each place might have its own security policy while the machine has an overall security policy. Second, we must protect an agent from malicious machines.
Reference: [Wu95] <author> Yunxin Wu. </author> <title> Advanced algorithms of information organization and retrieval. </title> <type> Master's thesis, </type> <institution> Thayer School of Engineering, Dartmouth College, </institution> <year> 1995. </year>
Reference-contexts: Existing Agent Tcl agents that fall into this category are a workflow agent that carries an electronic form from user to user [CGN96] and a medical agent that retrieves distributed medical records based on certain criteria <ref> [Wu95] </ref>. The workflow agent must migrate sequentially since the users need to fill out the sections of the form in order.
References-found: 21

