URL: http://www.cs.wustl.edu/~suri/psdir/leap-tech.ps
Refering-URL: http://www.cs.wustl.edu/~suri/fairqueue.html
Root-URL: 
Email: fsuri,varghese,girishg@cs.wustl.edu  
Title: Leap Forward Virtual Clock: A New Fair Queuing Scheme with Guaranteed Delays and Throughput Fairness  
Author: Subhash Suri George Varghese Girish Chandranmenon 
Date: June 24, 1996  
Address: Campus Box 1045 One Brookings Drive St. Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Abstract: We describe an efficient fair queuing scheme, Leap Forward Virtual Clock, that provides end-to-end delay bounds similar to PGPS, along with throughput fairness. Our scheme can be implemented with a worst-case time O(log log N ) per packet (inclusive of sorting costs), which improves upon all previously known schemes that guarantee delay and throughput fairness similar to PGPS. Interestingly, both the classical virtual clock and the Self-Clocked Fair Queuing schemes can be thought of as special cases of our scheme, by setting the leap forward parameter appropriately. We use Zhang's virtual clock as a point of departure. We modify the original virtual clock scheme, which does not give throughput fairness, using two simple ideas: a quarantine mechanism that temporarily takes oversubscribed flows o*ine, and a leap forward mechanism that advances the server clock forward when all flows are oversubscribed. These two mechanisms keep the server clock from lagging too far behind the packet tags. We prove that our scheme guarantees a fair share of the available bandwidth to each of the backlogged users, while precisely matching the delay bounds of PGPS schemes. In fact, by the worst-case fairness measure, our scheme is comparable to Worst-case Weighted Fair Queuing|the burstiness shown by PGPS does not occur in our scheme. In order to improve computational efficiency, we introduce a "coarsened" version of our scheme in which all tags assume values from a set of O(N ) integers. We then use "approximate sorting" and a finite-universe priority queue to achieve O(log log N ) processing time per packet. We can show that the coarsening of tags increases the delay bound by a very small additive constant. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bennett and H. </author> <title> Zhang Worst-case Fair Weighted Fair Queuing. </title> <booktitle> Proc. INFOCOM, </booktitle> <year> 1995. </year>
Reference-contexts: Previously it was known that while VC has good delay bound [7, 16], it fails to provide good throughput fairness [9, 14]. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. By contrast, all the previous schemes <ref> [14, 1] </ref> with good delay and throughput bounds have been based on modifications of WFQ. 2 Scheme Delay Bound Fairness Worst-case Fairness Efficiency GPS 0 Fair Excellent Impractical PGPS Small Fair Poor O (N ) SCFQ Large Fair Poor O (log N ) Virtual Clock Small Unfair Poor O (log N <p> This violates the throughput fairness condition for flow 1. Virtual clock can also give short-term throughput unfairness when the rates of flows can vary widely, as shown by the following example <ref> [1] </ref>. Example 2: Consider ten flows f 1 ; : : : ; f 10 such that r 1 = 1 and r 2 : : : r 10 = 0:1. Assume that at time 0, all flows have a large number of 1 bit packets to send. <p> In summary, while f 1 does receive a fair share of the bandwidth on average, it can be locked out for a period equal to N packet service times, where N is the number of flows, causing "burstiness" in the service of a flow. 6 Somewhat surprisingly, Bennett and Zhang <ref> [1] </ref> show that even PGPS exhibits this form of bursty behavior. A better service discipline would allow packets of the low rate flows to be interleaved with those of the high rate flows during the initial period, thus avoiding the lockout periods for both the high and low rate flows. <p> There are two commonly used fairness measures: the first, proposed by Golestani [9], is a gross measure, while the second, introduced recently by Bennett and Zhang <ref> [1] </ref>, is a more refined measure. Bennett-Zhang call their measure worst-case fairness index (WFI), and show that while PGPS is fair by Golestani's measure, it falls short of the ideal GPS by the worst-case fairness index. WFI more closely measures short-term bursty behavior. <p> The normalized worst-case fair index (WFI) is defined as C = max r f C f : Bennett and Zhang <ref> [1] </ref> have shown that Worst-case Weighted Fair Queuing has an optimal WFI equal to t = M=B. We will show that the WFI of our scheme is nearly the same. <p> Forward: WFI t + max 2 (t + ) B This completes the proof. 2 In practice, r f =B should be quite small, and if we set the coarsening parameter to roughly t , the WFI of Leap Forward approaches t , which is the optimal value of WFI <ref> [1] </ref>. 6 Implementation and Data Structures The only nontrivial data structure needed for implementing the Leap Forward Virtual Clock is a priority queue. There are several well-known priority queue data structures that achieve O (log N ) time per operation for insert, delete, and findmin. <p> Then, rounding up all the tags to multiples of M=B dramatically reduces the underlying key space of the priority queue, while possibly increasing the delay by at most M=B. We further reduce the key space to a set of O (N ) integers, in the range <ref> [1; cN ] </ref> for a fixed constant c, by using a tag-separation property of our algorithm and modular arithmetic to recycle tags. <p> LFVC does not produce this burstiness: it sends packets of all flows in a more uniform way as shown in the figure. (Unfortunately, we still do not have a WFQ simulation. This counterexample is described well in detail in <ref> [1] </ref>) 29 7.2.2 Quantitative Features Flow Reserved arrival Delay (seconds) rate 4 rate DRR SCFQ VC LFVC 0 0.5 0.498 0.00143 0.00112 0.000213 0.000213 2 0.0625 0.62 0.00242 0.00526 0.00186 0.00203 4 0.078125 0.076 0.00307 0.00404 0.000881 0.000861 6 0.078125 0.076 0.00371 0.00335 0.00217 0.00229 Table 3: Average delay experienced by <p> These conditions lead to new insight into the fair queuing problem, and allow algorithm designers to balance the delay and throughput requirements in appropriate ways to suit their taste and needs. Our technique of maintaining a throughput invariant is quite different from the one used by Bennett and Zhang <ref> [1] </ref>, although both lead to low WFI. Our analysis of the delay at a single server is based on an extremely intuitive Backlog Lemma; our analysis seems much simpler than previous delay analyses of Virtual Clock schemes. <p> If we never leap forward, we get virtual clock; we always leap forward to the tag of the current packet in service, we get Self-Clocked. We also improve on Frame Based Queuing [14] and Worst-case Weighted Fair Queuing <ref> [1] </ref> by providing O (log log N ) computation instead of O (log N ). While our coarsening ideas may be applicable to these schemes, 31 a careful proof is required of the effect of coarsening on these schemes. In this paper, we have focused on work-conserving service disciplines.
Reference: [2] <author> J. Bennett and H. </author> <title> Zhang Hierarchical Packet Fair Queuing Algorithms. </title> <note> To appear in Proc. SIGCOMM '96. </note>
Reference-contexts: Other more efficient fair queuing schemes, such as Deficit Round Robin [13] or Self-Clocked Fair Queuing [9] have significantly larger delay bounds. Very recently, two new algorithms have been proposed that match the service guarantees of WFQ <ref> [2, 14] </ref>, and whose computational overhead is O (log N ) time per packet. While algorithms requiring O (log N ) time per packet are a great improvement over the O (N ) time schemes, even this computational overhead may be too severe for routers that run at Gigabit speeds. <p> A vanilla implementation of our algorithm has exactly the same delay bounds as PGPS but it needs only O (log N ) time per packet, thus matching the results of Stiliadis-Varma [14] and Bennett-Zhang <ref> [2] </ref>. The rest of the paper is organized as follows. In Section 2, we formulate two key conditions, Delay Condition and Throughput Condition, which are necessary and sufficient to guarantee PGPS-like delay and throughput performance for virtual clock based schemes. <p> f sent g (t 1 ; t 2 ) r g fi fi 3 ( f + g ) + 2t + 4 This completes the proof of the theorem. 2 5.2 Worst Case Fairness Index of Leap Forward The following measure of throughput fairness, due to Bennett and Zhang <ref> [2] </ref> provides a more refined measure of short term throughput unfairness than the Golestani measure described above. We start by introducing some notation. The delay D (p) of a packet p is the real time that elapses between the arrival time of p and the time p is completely transmitted. <p> Our immediate goal is to use the Leap Forward discipline as a component in a Hierarchical Fair Queuing system. This would allow the link bandwidth to be partitioned into multiple classes (representing different organizations), which can be further subdivided into users. Bennett and Zhang <ref> [2] </ref> show that providing a low WFI is critical in a hierarchical fair queuing system. As such our leap forward mechanism should be useful. We also plan to work on our coarsening ideas to achieve further simplifications and improved time bounds for fair queuing.
Reference: [3] <author> R. </author> <title> Brown Calendar Queues: a fast O(1) Priority Queue Implementation for the Simulation Event Set Problem. </title> <journal> Communications of the ACM, </journal> <volume> Vol 31,10, </volume> <month> October </month> <year> 1988. </year>
Reference-contexts: Some papers also cite calendar queues <ref> [3] </ref> as a data structure for maintaining tag in O (1) time. This is also a misperception: while calendar queues have good average case bounds for insertion and retrieval, the worst-case time bound is fi (N ), which is no better than WFQ.
Reference: [4] <author> T. Cormen, C. Leiserson, and R. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: This is also a misperception: while calendar queues have good average case bounds for insertion and retrieval, the worst-case time bound is fi (N ), which is no better than WFQ. Similarly, other data structures such as Binomial queues or Fibonacci heaps <ref> [4] </ref> also have the (log N ) overhead for either the insertion or deletion of tag. Since each packet is enqueued and dequeued at least once, the cost of processing a packet is dominated by the more expensive operation.
Reference: [5] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <booktitle> Proc. Sigcomm '89, </booktitle> <volume> 19(4) </volume> <pages> 1-12, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Unfortunately, the scheme is computationally impractical, and therefore a tremendous amount of effort has been spent in the past few years trying to realize a practical variant of GPS. One such proposal was made by Demers et al. <ref> [5] </ref>, called Weighted Fair Queuing. The delay and throughput bounds of this scheme similar to GPS; however, the computational overhead is fi (N ) per packet, which can be excessive as N is the number of flows sharing the link.
Reference: [6] <author> P. van Emde Boas, R. Kaas, and E. Zijlstra. </author> <title> Design and implementation of an efficient priority queue. </title> <journal> Math. Syst. Theory, </journal> <volume> 10 </volume> <pages> 99-127, </pages> <year> 1977. </year>
Reference-contexts: With these ideas in place, we can then use "approximate sorting" and a finite-universe priority queue of van Emde Boas <ref> [6] </ref> to achieve O (log log N ) processing time per packet. Our technique probably applies to other clock-based fair queuing schemes as well; however, working out the details requires careful proofs of the coarsened equivalents of such algorithms. <p> We quote the following result from van Emde Boas <ref> [6] </ref>; Mehlhorn's book [10] contains an eminently readable account of this data structure. Lemma 6.2 (van Emde Boas) Let U = f0; 1; 2; : : :; Lg, and let X U be a subset.
Reference: [7] <author> N. Figuera and J. Pasquale. Leave-in-time: </author> <title> A new service discipline for real-time communication in a packet-switching data network. </title> <booktitle> Proc. Sigcomm '95, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: Our paper also shows that the Virtual Clock scheme of Zhang [17] can be modified to achieve delay and throughput properties comparable to WFQ. Previously it was known that while VC has good delay bound <ref> [7, 16] </ref>, it fails to provide good throughput fairness [9, 14]. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. <p> The packets are then serviced in non-decreasing order of their current tags. It is not obvious that such a scheme can meet all tag deadlines, though it has been shown to be the case <ref> [7, 16] </ref>. In our investigations, we 3 have isolated two distinct fundamental conditions that underlie delay and throughput guarantees. A virtual clock-based scheme needs to balance these two conditions in order to meet delay and throughput bounds. <p> While non-work-conserving disciplines in general do not lead to better latency bounds, they can be useful for bounding jitter, which is useful in some applications. We believe that our ideas can be generalized to these settings using the idea of delay regulators <ref> [7] </ref>. Our quarantine data structure L closely resembles a delay regulator. Our work on fair-queuing is continuing. Our immediate goal is to use the Leap Forward discipline as a component in a Hierarchical Fair Queuing system.
Reference: [8] <author> P. Goyal, S. S. Lam, and H. M. Vin. </author> <title> Determining End-to-End Delay Bounds in Heterogeneous Networks. </title> <booktitle> In Proceedings of Workshop on Network and OS Support forAudio-Video, </booktitle> <pages> pages 287-298, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Packets in a flow pass through a sequence of servers (or routers) along their path to the destination. We will later use the general framework of guaranteed rate clock (GRC) fair-queuing algorithms introduced by Goyal et al. <ref> [8] </ref>, to establish PGPS-like bounds on the end-to-end delay in a multi-hop system. With this framework, it suffices to establish the delay bound at a single server, and therefore we concentrate on a server S, with output rate B bits per second. <p> If one can show that each packet is transmitted no later than its tag value, then the GRC framework of Goyal et al. <ref> [8] </ref> can be used to show a good end-to-end delay bound. We distill a fundamental invariant, called Backlog Inequality, that is essential to ensuring that a packet is serviced by its tag. <p> We will use this in the next subsection to prove end-to-end delay bounds. 4.2 End-to-End Delay Bounds for Leap Forward Goyal et al. <ref> [8] </ref> have recently synthesized an elegant and general strategy for proving delay bounds in the style of Parekh and Gallager [11, 12]. <p> Then, the end-to-end delay of a packet p n f , denoted by d n f , is given by the following: d n f + (K 1) max ` f + i=1 17 Proof. The theorem follows immediately from Lemma 4.7 and the result of Goyal et al. <ref> [8] </ref>. 2 Note that Leap Forward has fi = + t , and if we eliminate tag coarsening (set = 0), our result is identical to the standard delay bound of the classical virtual clock and PGPS. <p> The parameter is fairly flexible, and can be used to derive tradeoffs between this additional delay and savings in computational overhead of maintaining priority among tag values|the finer the tags, the greater the overhead. Goyal et al. <ref> [8] </ref> also show how to obtain probabilistic bounds on the end-to-end delay when the burstiness of a flow is bounded with a stochastic process, such as the exponentially bounded burstiness. The same results also apply to our scheduling algorithms.
Reference: [9] <author> S. J. Golestani. </author> <title> A Self-Clocked Fair Queueing Scheme for High Speed Applications. </title> <booktitle> In Proceedings of IEEE INFOCOM '94, </booktitle> <pages> pages 636-646, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Other more efficient fair queuing schemes, such as Deficit Round Robin [13] or Self-Clocked Fair Queuing <ref> [9] </ref> have significantly larger delay bounds. Very recently, two new algorithms have been proposed that match the service guarantees of WFQ [2, 14], and whose computational overhead is O (log N ) time per packet. <p> Some researchers suggest using special-purpose hardware at routers to overcome the fi (log N ) sorting bottleneck <ref> [9, 14] </ref>. Special-purpose hardware, however, can be costly. More significantly, as the service discipline algorithms and protocols are likely to evolve with time, a software implementation will permit easier and cheaper upgrades than one done in hardware. <p> Our paper also shows that the Virtual Clock scheme of Zhang [17] can be modified to achieve delay and throughput properties comparable to WFQ. Previously it was known that while VC has good delay bound [7, 16], it fails to provide good throughput fairness <ref> [9, 14] </ref>. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. <p> In next section, we address the throughput fairness of our algorithm. 5 Throughput Fairness of Leap Forward Informally speaking, a scheme is fair if each backlogged flow receives its fair share of the available server bandwidth. There are two commonly used fairness measures: the first, proposed by Golestani <ref> [9] </ref>, is a gross measure, while the second, introduced recently by Bennett and Zhang [1], is a more refined measure. Bennett-Zhang call their measure worst-case fairness index (WFI), and show that while PGPS is fair by Golestani's measure, it falls short of the ideal GPS by the worst-case fairness index. <p> In particular, F should be a constant, independent of the length of the time interval <ref> [9] </ref>. It is known that in the case of the classical virtual clock, F ! 1 in the worst-case.
Reference: [10] <author> K. Mehlhorn. </author> <title> Sorting and Searching, Volume 1 of Data Structures and Algorithms. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1984. </year>
Reference-contexts: We quote the following result from van Emde Boas [6]; Mehlhorn's book <ref> [10] </ref> contains an eminently readable account of this data structure. Lemma 6.2 (van Emde Boas) Let U = f0; 1; 2; : : :; Lg, and let X U be a subset.
Reference: [11] <author> A. K. Parekh and R. G. Gallager. </author> <title> A Generalized Processor Sharing Approach to Flow Control: The Single Node Case. </title> <booktitle> In Proc. of IEEE INFOCOM, </booktitle> <pages> pp. 915-924, </pages> <year> 1992. </year>
Reference-contexts: We will use this in the next subsection to prove end-to-end delay bounds. 4.2 End-to-End Delay Bounds for Leap Forward Goyal et al. [8] have recently synthesized an elegant and general strategy for proving delay bounds in the style of Parekh and Gallager <ref> [11, 12] </ref>. Their formulation applies to a large class of algorithms, which they call Guaranteed Rate scheduling. 2 We show that Leap Forward schemes also belong to the GR class, and so we can use this framework to derive end-to-end delay bounds.
Reference: [12] <author> A. K. Parekh and R. G. Gallager. </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks: The Multiple Node Case. </title> <booktitle> In Proc. of IEEE INFOCOM, </booktitle> <pages> pp. 521-530, </pages> <year> 1993. </year>
Reference-contexts: We will use this in the next subsection to prove end-to-end delay bounds. 4.2 End-to-End Delay Bounds for Leap Forward Goyal et al. [8] have recently synthesized an elegant and general strategy for proving delay bounds in the style of Parekh and Gallager <ref> [11, 12] </ref>. Their formulation applies to a large class of algorithms, which they call Guaranteed Rate scheduling. 2 We show that Leap Forward schemes also belong to the GR class, and so we can use this framework to derive end-to-end delay bounds.
Reference: [13] <author> M. Shreedhar and G. Varghese. </author> <title> Efficient Fair Queueing Using Deficit Round Robin. </title> <booktitle> In Proc. of SIGCOMM, </booktitle> <pages> pp. 231-242, </pages> <year> 1995. </year>
Reference-contexts: The delay and throughput bounds of this scheme similar to GPS; however, the computational overhead is fi (N ) per packet, which can be excessive as N is the number of flows sharing the link. Other more efficient fair queuing schemes, such as Deficit Round Robin <ref> [13] </ref> or Self-Clocked Fair Queuing [9] have significantly larger delay bounds. Very recently, two new algorithms have been proposed that match the service guarantees of WFQ [2, 14], and whose computational overhead is O (log N ) time per packet.
Reference: [14] <author> D. Stiliadis and A. Varma. </author> <title> Latency-Rate Servers: A General Model for Analysis of Traffic Scheduling Algorithms. </title> <type> Technical Report UCSC-CRL-95-38, </type> <institution> Dept. of Computer Engineering and Information Sciences, UC Santa Cruz, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Other more efficient fair queuing schemes, such as Deficit Round Robin [13] or Self-Clocked Fair Queuing [9] have significantly larger delay bounds. Very recently, two new algorithms have been proposed that match the service guarantees of WFQ <ref> [2, 14] </ref>, and whose computational overhead is O (log N ) time per packet. While algorithms requiring O (log N ) time per packet are a great improvement over the O (N ) time schemes, even this computational overhead may be too severe for routers that run at Gigabit speeds. <p> Some researchers suggest using special-purpose hardware at routers to overcome the fi (log N ) sorting bottleneck <ref> [9, 14] </ref>. Special-purpose hardware, however, can be costly. More significantly, as the service discipline algorithms and protocols are likely to evolve with time, a software implementation will permit easier and cheaper upgrades than one done in hardware. <p> Our paper also shows that the Virtual Clock scheme of Zhang [17] can be modified to achieve delay and throughput properties comparable to WFQ. Previously it was known that while VC has good delay bound [7, 16], it fails to provide good throughput fairness <ref> [9, 14] </ref>. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. <p> Previously it was known that while VC has good delay bound [7, 16], it fails to provide good throughput fairness [9, 14]. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. By contrast, all the previous schemes <ref> [14, 1] </ref> with good delay and throughput bounds have been based on modifications of WFQ. 2 Scheme Delay Bound Fairness Worst-case Fairness Efficiency GPS 0 Fair Excellent Impractical PGPS Small Fair Poor O (N ) SCFQ Large Fair Poor O (log N ) Virtual Clock Small Unfair Poor O (log N <p> Instead, we summarize the salient features of previous algorithms in Table 1, and compare them to the Leap Forward Virtual Clock scheme. (It appears possible to modify the Frame Based Fair Queuing scheme to achieve a good worst-case fairness index; however, the scheme described in <ref> [14] </ref> has a high WFI.) Our Leap Forward Virtual Clock scheme provides end-to-end delay bounds almost identical to that of PGPS fair queuing, along with throughput fairness and worst-case fairness, and yet can be implemented with a worst-case time O (log log N ) per packet; the computational overhead of our <p> A vanilla implementation of our algorithm has exactly the same delay bounds as PGPS but it needs only O (log N ) time per packet, thus matching the results of Stiliadis-Varma <ref> [14] </ref> and Bennett-Zhang [2]. The rest of the paper is organized as follows. In Section 2, we formulate two key conditions, Delay Condition and Throughput Condition, which are necessary and sufficient to guarantee PGPS-like delay and throughput performance for virtual clock based schemes. <p> In essence, the problem is caused by a large deviation between the server clock and a flow tag. This can happen when some flows send packets in bursts while others remain idle, as illustrated by the following example <ref> [14] </ref>. (See Section 7 for details of an actual simulation.) Example 1: Consider a server with rate 1 byte/sec and two flows, each with a guaranteed rate of 1=2 byte/sec. <p> Leap Forward Virtual Clock goes well beyond Virtual Clock by adding two non-trivial modifications: a quarantine mechanism for temporarily holding oversubscribed flows, and a leap forward mechanism for avoiding deadlock when all flows are oversubscribed. The 4 The rate allocations in this experiment are borrowed from <ref> [14] </ref>; but the flows here send data at a constant bit rate as opposed to an on-off model used in their experiments. 30 resulting scheme provides throughput fairness, even in a worst-case sense, without compromising delay bounds. <p> If we never leap forward, we get virtual clock; we always leap forward to the tag of the current packet in service, we get Self-Clocked. We also improve on Frame Based Queuing <ref> [14] </ref> and Worst-case Weighted Fair Queuing [1] by providing O (log log N ) computation instead of O (log N ). While our coarsening ideas may be applicable to these schemes, 31 a careful proof is required of the effect of coarsening on these schemes.
Reference: [15] <author> S. Suri, G. Varghese and G. Chandranmenon. </author> <title> Leap Forward Virtual Clock: A New Fair Queuing Scheme with Guaranteed Delays and Throughput Fairness. </title> <type> Technical Report, </type> <institution> Dept. of Computer Science, Washington University, Saint Louis, </institution> <year> 1996. </year> <title> Use the WWW link: </title> <note> www.cs.wustl.edu/~suri/leapforward.ps to access the report. </note>
Reference-contexts: Due to our use of rounded tags, we only require that this Inequality hold for times t that are whole multiples of the parameter . The following lemma collects some useful invariants on flow tags; the proof of this lemma can be found in the technical report <ref> [15] </ref>. 11 Lemma 4.1 (Tag invariants) Consider a flow f , and its current tag t f .
Reference: [16] <author> G. G. Xie and S. S. Lam. </author> <title> Delay Guarantee of a Virtual Clock Server. </title> <type> Techincal Report TR-94-24, </type> <institution> Dept. of Computer Sciences UT-Austin, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: Our paper also shows that the Virtual Clock scheme of Zhang [17] can be modified to achieve delay and throughput properties comparable to WFQ. Previously it was known that while VC has good delay bound <ref> [7, 16] </ref>, it fails to provide good throughput fairness [9, 14]. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. <p> The packets are then serviced in non-decreasing order of their current tags. It is not obvious that such a scheme can meet all tag deadlines, though it has been shown to be the case <ref> [7, 16] </ref>. In our investigations, we 3 have isolated two distinct fundamental conditions that underlie delay and throughput guarantees. A virtual clock-based scheme needs to balance these two conditions in order to meet delay and throughput bounds.
Reference: [17] <author> Lixia Zhang. </author> <title> Virtual Clock: A New Traffic Control Algorithm for Packet-Switched Networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(2), </volume> <month> May </month> <year> 1991. </year> <month> 33 </month>
Reference-contexts: Leap Forward Virtual Clock appears to be the first service discipline that achieves near-ideal delay and throughput bounds but has a computational overhead smaller than O (log N ). Our paper also shows that the Virtual Clock scheme of Zhang <ref> [17] </ref> can be modified to achieve delay and throughput properties comparable to WFQ. Previously it was known that while VC has good delay bound [7, 16], it fails to provide good throughput fairness [9, 14]. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. <p> t to denote the time to transmit a largest packet at the server rate; thus, t = M B . (This quantity is the smallest delay one can guarantee in any system where preemption is not allowed.) 2.1 Delay Bound for the Virtual Clock Scheme The classical virtual clock scheme <ref> [17] </ref> assigns a tag to each arriving packet using Eq. (1), and then services the packets in the non-decreasing order of tags.
References-found: 17

