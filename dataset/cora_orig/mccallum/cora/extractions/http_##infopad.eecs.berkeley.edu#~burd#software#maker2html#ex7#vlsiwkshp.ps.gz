URL: http://infopad.eecs.berkeley.edu/~burd/software/maker2html/ex7/vlsiwkshp.ps.gz
Refering-URL: http://infopad.eecs.berkeley.edu/~burd/software/maker2html/ex7/
Root-URL: http://www.cs.berkeley.edu
Title: SYSTEM-LEVEL DESIGN GUIDANCE USING ALGORITHM PROPERTIES  
Author: Lisa Guerra, Miodrag Potkonjak Jan Rabaey 
Address: Berkeley, California, USA  Princeton, New Jersey, USA  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California  C&C Research Laboratories, NEC,  
Abstract: This paper introduces an approach which provides quantitative information used to aid in making system-level design decisions such as algorithmic or architectural selection. The method is based on the idea of identifying and using the size and structural properties of algorithms, which affect design performance. These pr op-erties provide insight in the matching of an algorithm and a particular implementation platform and a link between algorithms and ar chitectures. An in-depth study of thr ee properties concurrency, temporality, and regularity - is presented in the context of ASIC area estimation. The underlying intuition behind them and quantitative def ini-tions are given. In addition, illustrations of their utility as estimators of implementation performance are shown using both examples and empirical studies. 
Abstract-found: 1
Intro-found: 1
Reference: [Amd64] <author> G.Amdahl, G.Blaauw, F.Brooks, </author> <title> Architecture of the IBM System/360, </title> <journal> IBM Journal of R&D,Vol. 8,No. </journal> <volume> 2,pp. </volume> <pages> 87-101, </pages> <year> 1964. </year>
Reference-contexts: First, an overview of the approach is given, followed by a case study demonstrating the use of properties for ASIC area estimation. 2. RELATED RESEARCH Several previous works deal with analyzing properties on a set of applications to provide design guidance for general purpose architectures. For example, Amdhals law <ref> [Amd64] </ref> indicates the amount of speedup attainable on an algorithm by using a parallel architecture. Locality and the 90/10 rule of thumb, convey the qualitative property of typical programs that 90% of execution time is typically spent on 10% of the instructions [Knu71].
Reference: [Jam87] <author> L. Jamieson, </author> <title> Characterizing Parallel Algorithms, in The Characteristics of parallel algorithms, </title> <editor> L. Jamieson, D. Gannon, R. Douglass (eds.), </editor> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1987. </year>
Reference-contexts: In the VLSI DSP domain, the qualitative observation that many signal processing algorithms are regular, has motivated the development of systolic and wavefront arrays [Kun88]. The use of algorithm properties has also been proposed in the parallel computing research. Jamieson <ref> [Jam87] </ref> proposed a characterization for parallel algorithms to be mapped onto parallel architectures. In addition, Papaefstathiou [Pap93], described a framework for parallel software performance prediction based on algorithm characterizations. In hardwaresoftware codesign research, use of several metrics for guiding partitioning has also been proposed (e.g. [Tho93]).
Reference: [Knu71] <author> D. Knuth, </author> <title> An Empirical study of FOR TRAN programs, </title> <journal> Software Practice & Experience, </journal> <volume> Vol. 1, No. 2, </volume> <pages> pp. 105-133, </pages> <year> 1971. </year>
Reference-contexts: For example, Amdhals law [Amd64] indicates the amount of speedup attainable on an algorithm by using a parallel architecture. Locality and the 90/10 rule of thumb, convey the qualitative property of typical programs that 90% of execution time is typically spent on 10% of the instructions <ref> [Knu71] </ref>. In the VLSI DSP domain, the qualitative observation that many signal processing algorithms are regular, has motivated the development of systolic and wavefront arrays [Kun88]. The use of algorithm properties has also been proposed in the parallel computing research.
Reference: [Kun88] <author> S.Y. Kung, </author> <title> VLSI Array Processors, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: In the VLSI DSP domain, the qualitative observation that many signal processing algorithms are regular, has motivated the development of systolic and wavefront arrays <ref> [Kun88] </ref>. The use of algorithm properties has also been proposed in the parallel computing research. Jamieson [Jam87] proposed a characterization for parallel algorithms to be mapped onto parallel architectures. In addition, Papaefstathiou [Pap93], described a framework for parallel software performance prediction based on algorithm characterizations.
Reference: [Kur87] <author> F. Kurdahi, A. Parker, </author> <title> REAL: A Program for REgister ALlocation, </title> <booktitle> Proc. 24th DAC, </booktitle> <pages> pp. 210-215, </pages> <year> 1987. </year>
Reference-contexts: The f irst step involves estimating the variable lifetimes. The operator execution times determine the lifetimes of the variables, but are not known until scheduling is performed (at which point the left edge algorithm <ref> [Kur87] </ref> could be used to determine the number of registers). At this level, however, a heuristic measure is defined instead, which approximates the expected lifetime distributions of the variables in the f low graph.
Reference: [Li90] <author> M. Li, P. Vitanyi, </author> <title> Kolmogorov Complexity and its Applications, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <editor> Jan van Leeuwen (ed.), </editor> <booktitle> pp. </booktitle> <pages> 187-254, </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Motivated by the underlying ideas in descriptive complexity of strings (Kol-mogorov complexity) <ref> [Li90] </ref>, a measure of graph complexity has been developed. Given an encoding scheme (language by which to describe the graph and a measure of the length of a program), the complexity of a graph is defined as the length of the shortest program which can represent the graph.
Reference: [Lid94] <author> D. Lidsky, J. Rabaey, </author> <title> Low Power Design of Memory Intensive Functions Case Study: Vector Quantization, </title> <booktitle> in VLSI Signal Processing, VII, </booktitle> <publisher> IEEE Press, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: 1. INTRODUCTION Common system-level design decisions include the choice of algorithms for a given functional specification, the partitioning and optimization of those algorithms, and the selection of architectures. Case studies indicate that these choices often improve performance by an order of magnitude or more <ref> [Pot93, Lid94] </ref>. When doing system-level design, it is thus important to be able to analyze the possibilities and tradeoffs of high level decisions, before investing a lot of ef fort in exploration at lower levels.
Reference: [Not91] <author> S. </author> <title> Note, </title> <editor> et al., Cathedral-III: </editor> <title> Architecture-Driven High-Level Synthesis for High Throughput DSP Applications, </title> <booktitle> Proc. 28th DAC, </booktitle> <pages> pp. 597-602, </pages> <year> 1991. </year>
Reference-contexts: This section will concentrate on the introduction and description of the regularity property measure. The inuence of regularity on physical layout characteristics has been observed by several high level synthesis groups <ref> [Not91, Rao92] </ref>. Regularity has only been treated qualitatively until now, and the exploration of its potential is in an early phase.We define regularity using the following simple formula: (3) The size component is the number of operations and data transfers executed in the computation.
Reference: [Pap93] <author> E. Papaefstathiou, D. Kerbyson, G. Nudd, </author> <title> A Layered Approach to the Characterization of Parallel Systems for Performance Prediction, Performance Evaluation of Parallel Systems Workshop, Coventry, </title> <booktitle> UK, </booktitle> <pages> pp. 26-34, </pages> <year> 1993. </year>
Reference-contexts: The use of algorithm properties has also been proposed in the parallel computing research. Jamieson [Jam87] proposed a characterization for parallel algorithms to be mapped onto parallel architectures. In addition, Papaefstathiou <ref> [Pap93] </ref>, described a framework for parallel software performance prediction based on algorithm characterizations. In hardwaresoftware codesign research, use of several metrics for guiding partitioning has also been proposed (e.g. [Tho93]). In this work, a comprehensive and or ganized treatment of structural properties is presented.
Reference: [Pau89] <author> P. Paulin, J. Knight, </author> <title> ForceDirected Scheduling for the Behavioral Synthesis of ASIC s, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 8, No. 6, </volume> <pages> pp. 661-679, </pages> <year> 1989. </year>
Reference-contexts: Paulin first proposed and used information from such graphs in force directed scheduling <ref> [Pau89] </ref>. As the exact times in which each operation will be executed is not known until after scheduling, it is necessary to determine the probability that the operation will be executed in a particular time step. One solution [Pau89] is to assume that it is equally likely that an operation, x, <p> first proposed and used information from such graphs in force directed scheduling <ref> [Pau89] </ref>. As the exact times in which each operation will be executed is not known until after scheduling, it is necessary to determine the probability that the operation will be executed in a particular time step. One solution [Pau89] is to assume that it is equally likely that an operation, x, be executed in any of the time slots between its assoon-as-possible (ASAP x ) and as-late-as-possible (ALAP x ) times.
Reference: [Pot93] <author> M. Potkonjak, J. Rabaey, </author> <title> Exploring the DSP Algorithm Design Space using HYPER, in VLSI Signal Processing, VI, </title> <editor> L. Eggermont et al., (eds.), </editor> <publisher> IEEE Press, </publisher> <address> New York, </address> <pages> pp. 123-131, </pages> <year> 1993. </year>
Reference-contexts: 1. INTRODUCTION Common system-level design decisions include the choice of algorithms for a given functional specification, the partitioning and optimization of those algorithms, and the selection of architectures. Case studies indicate that these choices often improve performance by an order of magnitude or more <ref> [Pot93, Lid94] </ref>. When doing system-level design, it is thus important to be able to analyze the possibilities and tradeoffs of high level decisions, before investing a lot of ef fort in exploration at lower levels.
Reference: [Rab91] <author> J. Rabaey, C. Chu, P. Hoang, M. Potkonjak, </author> <title> Fast Prototyping of Data Path Intensive Architectures, </title> <journal> IEEE Design & Test Magazine, </journal> <volume> Vol. 8, No. 2, </volume> <pages> pp. 40-51, </pages> <year> 1991. </year>
Reference-contexts: An empirical study was conducted to detect the trends between actual numbers of units in implementation, and the measures. For each of 140 examples, the measures were computed, then the number of units was determined using the HYPER <ref> [Rab91] </ref> synthesis system. The scatter plot of Figure 4 shows the strong correlation that exists between the max height and the actual number of units. For each design, the sums of the maximum heights for each hardware class was used.
Reference: [Rao92] <author> D. Rao, F. Kurdahi, </author> <title> Partitioning by Regularity Extraction, </title> <booktitle> Proc. 29th DAC, </booktitle> <pages> pp. 235-238, </pages> <year> 1992. </year>
Reference-contexts: This section will concentrate on the introduction and description of the regularity property measure. The inuence of regularity on physical layout characteristics has been observed by several high level synthesis groups <ref> [Not91, Rao92] </ref>. Regularity has only been treated qualitatively until now, and the exploration of its potential is in an early phase.We define regularity using the following simple formula: (3) The size component is the number of operations and data transfers executed in the computation.
Reference: [Tho93] <author> D. Thomas, J. Adams, H. Schmitt, </author> <title> A Model and Methodology for Hardware-Software Code-sign, </title> <journal> IEEE Design & Test of Computers, </journal> <volume> Vol. 10, No. 3, </volume> <pages> pp. 6-15, </pages> <year> 1993. </year>
Reference-contexts: Jamieson [Jam87] proposed a characterization for parallel algorithms to be mapped onto parallel architectures. In addition, Papaefstathiou [Pap93], described a framework for parallel software performance prediction based on algorithm characterizations. In hardwaresoftware codesign research, use of several metrics for guiding partitioning has also been proposed (e.g. <ref> [Tho93] </ref>). In this work, a comprehensive and or ganized treatment of structural properties is presented. The properties form the basis of a unif ied methodology for system-level design guidance. Previous works have dealt primarily with homogeneous resources (e.g. ALUs), while here a heterogeneous mix of resources is supported.
References-found: 14

