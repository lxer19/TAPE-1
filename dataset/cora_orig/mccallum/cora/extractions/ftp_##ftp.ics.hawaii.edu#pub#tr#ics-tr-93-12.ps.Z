URL: ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-93-12.ps.Z
Refering-URL: ftp://ftp.ics.hawaii.edu/pub/tr/INDEX.html
Root-URL: 
Email: email:Chin@Hawaii.Edu  
Phone: phone: (808) 956-8162 fax: (808) 956-3548  
Title: PAU: Parsing And Understanding with Uniform Syntactic, Semantic, and Idiomatic Representations  
Author: David N. Chin 
Keyword: parsing, natural language, understanding, idioms, unification grammars, knowl edge representation  
Address: 2565 The Mall Honolulu, HI 96822  
Affiliation: Department of Information and Computer Sciences University of Hawaii at Manoa  
Abstract: PAU is an all-paths chart-based unification parser that uses the same uniform representation for regular syntax, irregular syntax such as idioms, and semantics. PAU's representation has very little redundancy, simplifying the task of adding new semantics and syntax to PAU's knowledge base. PAU uses relations between the syntax and semantics to avoid the proliferation of rules found in semantic grammars. By encoding semantics at the same level of representation as syntax, PAU is able to use semantic constraints early in the parse to eliminate semantically anomalous syntactic interpretations. Examples are given to show how PAU can handle the many eccentricities of different idioms using the same mechanisms as are used to handle regular syntax and semantics. These include the ability of some idioms, but not other idioms of the same syntactic form to undergo passivization, particle movement, action nominalization, indirect object movement, modification by adjectives, gerundive nominalization, prepositional phrase preposing, and topicalization. PAU's representation is bi-directional and is also used by a companion generator. PAU is designed to be efficient, runs in real time on typical workstations, and is is being used in a number of natural language systems. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ait-Kaci H., Boyer, R., Lincoln, P., and Nasr, R. </author> <year> 1989. </year> <title> Efficient impplemntation of lattice operations. </title> <booktitle> In ACM Transactions on Programming Languages and Systems 11(1), </booktitle> <pages> pp. 115-146. </pages>
Reference: <author> Akmajian, A. </author> <year> 1984. </year> <title> Sentence types and the form-function fit. </title> <booktitle> Natural Language and Linguistic Theory 2, </booktitle> <pages> pp. 1-23. </pages>
Reference: <author> Allen, J. </author> <year> 1987. </year> <title> Natural Language Understanding, </title> <address> Benjamin/Cummings, Menlo Park, CA. </address>
Reference-contexts: If a referent is found for a constituent, then its stack entry is moved to the top of the stack and the meaning of the constituent is modified to be the meaning of the returned referent. This reference disambiguation algorithm is similar to that described in <ref> (Allen, 1987) </ref> with the addition of graph unification of semantics. If a better disambiguation algorithm is needed for an application, then it can be interleaved with PAU's processing very easily. 9 Basic Idiom Handling PAU handles relatively frozen idioms like kick the bucket in a fashion similar to PHRAN.
Reference: <author> Brown, J. S. and Burton, R. R. </author> <year> 1975. </year> <title> Multiple representations of knowledge for tutorial reasoning. In Representation and Understanding, </title> <editor> Edited by D. G. Bobrow and A. Collins. </editor> <publisher> Academic Press, </publisher> <address> New York, NY. </address>
Reference-contexts: In such cases, the more specific idiomatic interpretation is preferred. 7 Integrating Syntax and Semantics Parsing strategies that combine or interleave syntax and semantics are capable of using semantic information early on to eliminate syntactic parses that are semantically anomalous. However, combining syntax and semantics into semantic grammars <ref> (Brown and Burton, 1975) </ref> presents the problem of huge numbers of categories leading to needless repetition of grammar rules that are required to capture syntactic generalities for the many semantic categories.
Reference: <author> Chafe, W. L. </author> <year> 1968. </year> <title> Idiomaticity as an anomaly in the Chomskyan paradigm. </title> <booktitle> Foundations of Language 4, </booktitle> <pages> pp. 109-127. </pages>
Reference: <author> Chin, D. N., Takeda, K., and Miyamoto, I. </author> <year> 1991. </year> <title> MERA: A flexible graphical software description meta--language. </title> <type> Technical Report, </type> <institution> Dept. of Information and Computer Sciences, University of Hawaii. </institution>
Reference-contexts: Meanings of syntactic components are composed by specifying Unify relations between the syntactic component and the part (s) of the semantic network that should unify with the meaning of the constituent. Both the semantic network and the syntax rule are represented in the MERA semantic network representation language <ref> (Chin et al., 1991) </ref>, which provides a user-centered graphical editor and an object base to support manipulation of MERA graphs. 5 represents the left hand side of the rule, and the relations labeled Pca (pattern component A) and Pcb point from NP-pat to the first component and second component of the
Reference: <author> Chin, D. N. </author> <year> 1990. </year> <title> Natural language dialogs for knowledge acquisition. </title> <booktitle> In AI and Cognitive Science '90, </booktitle> <editor> Edited by M. F. McTear and N. Creaney. </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference-contexts: Due to space limitations, the generator will not be discussed in this paper. Finally, computational efficiency is an important consideration, because PAU is designed for use in real world applications. Currently PAU is being used in the MOANA (MOdel Acquisition by NAtural language) 2 system <ref> (Chin, 1990) </ref>, the MC (Maintenance Consultant) system, and the LEI (Locality and Elevation Interpreter) 3 system. <p> PAU is currently being used in a number of different applications. It serves as the parsing component of two NLP applications in the software engineering domain. MOANA (MOdel Acquisition by NAtural language) <ref> (Chin, 1990) </ref> is a natural language dialog system that interviews users to acquire their requirements for new software systems.
Reference: <author> Fain, J., Carbonell, J. G., Hayes, P. J., and Minton, S. N. </author> <year> 1985. </year> <title> MULTIPAR: a robust entity-oriented parser. </title> <booktitle> Proceedings of the 7th Cognitive Science Society Conference, </booktitle> <pages> pp. 110-119. </pages>
Reference: <author> Fass, D. and Wilks, Y. </author> <year> 1983. </year> <title> Preference semantics, ill-formedness and metaphor. </title> <journal> American Journal of Computational Linguistics 9(3-4), </journal> <pages> pp. 178-187. </pages>
Reference: <author> Fillmore, C. J., Kay, P., and O'Conner, M. C. </author> <year> 1988. </year> <title> Regularity and idiomaticity in grammatical constructions: the case of let alone. </title> <booktitle> Language 64, </booktitle> <pages> pp. 501-538. </pages>
Reference: <author> Fraser, B. </author> <year> 1970. </year> <title> Idioms within a transformational grammar. </title> <booktitle> Foundations of Language 6, </booktitle> <pages> pp. 22-42. </pages>
Reference-contexts: For example, the idiom, turn the heat on, in sentence [1] has a meaning that is not a sum of the parts. Also, like all other idioms <ref> (Fraser, 1970) </ref>, this idiom fails under topicalization as shown in [2]. [1] My dad turned the heat on, when he asked us who dented his car. [2] *What my dad turned on was the heat, when he asked us who dented his car. 2 Moana is also the Hawaiian word for
Reference: <author> Funk, C. E. </author> <year> 1948. </year> <title> A hog on ice and other curious expressions. </title> <publisher> Harper & Row, </publisher> <address> New York, NY. </address>
Reference: <author> Jacobs, P. S. </author> <year> 1985. </year> <title> A knowledge-based approach to language production. </title> <type> Doctoral dissertation, </type> <institution> University of California, Berkeley. </institution> <note> Also available as Technical Report No. UCB/CSD 86/254, </note> <institution> Computer Science Division, University of California, Berkeley, </institution> <address> CA. </address>
Reference-contexts: In practice, there are rarely cases where the wrong correspondences are chosen, although much more experience in using GUF is needed before this problem can be dismissed so easily. GUF is similar in spirit to the ACE representation used by the KING NL generator <ref> (Jacobs, 1985) </ref>. Both formalisms take advantage of linguistic relations to reduce duplication of information.
Reference: <author> Kay, M. </author> <year> 1973. </year> <title> The MIND system. In Natural Language Processing, Edited by R. </title> <publisher> Rustin. Algorithmics Press, </publisher> <address> New York, NY, </address> <pages> pp. 155-188. </pages>
Reference-contexts: Such cycles cannot be encoded in standard unification formalisms and their users must modify their semantic encodings, often counter-intuitively, to avoid these cycles. 6 Processing in PAU PAU works bottom up from left to right exhausting all paths in parallel during the parse. PAU builds a chart <ref> (Kay, 1973) </ref> data structure to represent the course of the parse. The first component of PAU analyzes the input words for morphology and performs spelling correction. For example, the word eaten would be analyzed as a an instance of the V (verb) category with attributes: word=eaten, root=eat, and form=perfective.
Reference: <author> Lehman, J. F. and Carbonell, J. G. </author> <year> 1989. </year> <title> Learning the user's language: a step towards automated creation of user models. In User Models in Dialog Systems, Edited by A. </title> <editor> Kobsa and W. Wahlster. </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <pages> pp. 163-194. </pages>
Reference: <author> Lytinen, S. L. </author> <year> 1991. </year> <booktitle> Semantics-first natural language processing. Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 111-116. </pages>
Reference-contexts: By avoiding the large number of ad-hoc categories in ACE, it becomes much easier to remember important categories and to modify or extend a grammar encoded in GUF. GUF is also similar to other unification-based formalisms that integrate syntax and semantics, such as the LINK system <ref> (Lytinen, 1991) </ref>. However, all of these systems only allow unification constraints that are directed acyclic graphs (DAGs), whereas GUF allows arbitrary graphs including cycles. Cycles are often needed to encode semantic constraints.
Reference: <author> Makkai, A. </author> <year> 1972. </year> <title> Idiom structure in English. </title> <publisher> Mouton, </publisher> <address> Paris, France. </address>
Reference: <author> Martin, J. H. </author> <year> 1988. </year> <title> A computational theory of metaphor. </title> <type> Doctoral dissertation, </type> <institution> University of California, Berkeley. </institution> <note> Also available as Technical Report No. UCB/CSD 88/465, </note> <institution> Computer Science Division, University of California, Berkeley, </institution> <address> CA. </address>
Reference: <author> Shieber, S. M. </author> <year> 1986. </year> <title> An introduction to unification-based approaches to grammar. Center for the Study of Language and Information, </title> <publisher> Stanford, </publisher> <address> CA. </address>
Reference-contexts: Likewise, the Inherit relation from Det to NP-pat indicates that the new NP should get its det feature from the value of the word feature of Det. Unification of syntax and semantics in GUF differs somewhat from other unification formalisms <ref> (c.f. Shieber, 1986) </ref>. In GUF, unification is a three step process involving unification of categories, unification of attributes, and unification of relations.
Reference: <author> Strassler, J. </author> <year> 1982. </year> <title> Idioms in English: a pragmatic analysis. </title> <institution> Narr, Tubingen, Germany. </institution>
Reference: <author> Stock, O. </author> <year> 1989. </year> <title> Parsing with flexibility, dynamic strategies, and idioms in mind. </title> <journal> Computational Linguistics, </journal> <volume> 15(1), </volume> <pages> pp. 1-18. </pages>
Reference-contexts: Unfortunately there is no way around this within the PHRAN paradigm of pattern-concept pairs. Another approach to handling idioms is typified by the Wednesday 2 <ref> (Stock, 1989) </ref> parser. It uses the more traditional approach of storing idioms within its lexicon. This approach suffers from a lack of uniformity. Special mechanisms are needed in Wednesday 2 to track the parse of productive idioms.
Reference: <author> Wilensky, R., Arens, Y., and Chin, D. N. </author> <year> 1984. </year> <title> Talking to UNIX in English: an overview of UC. </title> <journal> Communications of the ACM, </journal> <volume> 27(6), </volume> <pages> pp. 574-593. </pages>
Reference-contexts: Indeed many idioms undoubtedly start off as motivated metaphors, then become frozen as society forgets the original metaphor. Funk (1948) traces the origins of many common English idioms. 4 Previous Idiom Parsers The PHRAN <ref> (Wilensky et al., 1984) </ref> parser and understander was designed specifically to handle idioms well. PHRAN was able to encode idioms using the same pattern-concept pairs that it used to encode regular syntax. The pattern specified the constituents and word order of a phrasal unit and the concept specified the meaning.
Reference: <author> Winograd, T. </author> <year> 1972. </year> <title> Understanding natural language. </title> <publisher> Academic Press, </publisher> <address> New York, NY. </address> <month> 21 </month>
Reference-contexts: Using transformations (such as the rewrite rules used in PHRAN) leads to other problems, such as the need to limit the applicability of transformations, especially in the case of idioms. Interleaving syntax and semantics <ref> (e.g. Winograd, 1972) </ref> avoids the problems of semantic categories by keeping syntactic and semantic processing separate and calling the semantic analyzer to prune syntactic possibilities upon completion of a syntactic constituent such as NP, PP, or embedded S.
References-found: 23

