URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR97736-S.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Title: A General Resource Reservation Framework for Scientific Computing  
Author: Ravi Ramamoorthi, Adam Rifkin, Boris Dimitrov, and K. Mani Chandy 
Affiliation: California Institute of Technology  
Abstract: We describe three contributions for distributed resource allocation in scientific applications. First, we present an abstract model in which different resources are represented as tokens of different colors; processes acquire resources by acquiring these tokens. Second, we present distributed scheduling algorithms that allow multiple resource managers to determine custom policies to control allocation of the tokens representing their particular resources. These algorithms allow multiple resource managers, each with its own resource management policy, to collaborate in providing resources for the whole system. Third, we present an implementation of a distributed resource scheduling algorithm framework using our abstract model. This implementation uses Infospheres, which are Internet communication packages written in Java, and shows the benefits of distributing the task of resource allocation to multiple resource managers.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> C. Catlett and L. </author> <title> Smarr. Metacomputing. </title> <journal> Comm. of the ACM, </journal> <volume> 35 </volume> <pages> 44-52, </pages> <year> 1992. </year>
Reference-contexts: All three resources are essential to the experiment so the scientist needs to synchronously lock and use all three distributed resources for the same time period to complete the computing task. The distributed heterogeneous resources together form a networked virtual supercomputer or metacomputer <ref> [1] </ref>. The scientist also wants resources to be scheduled automatically as a service of the appropriate software, with or without the inclusion of specific supplemental information such as the times the user is available to perform the experiment.
Reference: 2. <author> K.M. Chandy, J. Kiniry, A. Rifkin, and D. Zimmerman. </author> <title> A framework for structured distributed object computing. </title> <booktitle> Parallel Computing, </booktitle> <year> 1997. </year> <note> Submitted. </note>
Reference-contexts: In addition, negotiation protocols might need to leverage the notion of resources as economic currency, perhaps using electronic commerce protocols. This paper presents a general framework for heterogeneous resource reservation. Within this framework, we present a simple Java implementation using Infospheres <ref> [2] </ref>.
Reference: 3. <author> K.M. Chandy, J. Kiniry, A. Rifkin, and D. Zimmerman. </author> <title> Webs of archived distributed computations for collaboration. </title> <journal> Journal of Supercomputing, </journal> <volume> 11(1), </volume> <year> 1997. </year>
Reference-contexts: 1 Introduction A user often needs access to several distributed heterogeneous resources. For instance, a scientist may conduct a distributed experiment <ref> [3] </ref> requiring a supercomputer, a visualization unit, and a special high quality printer all in different locations. All three resources are essential to the experiment so the scientist needs to synchronously lock and use all three distributed resources for the same time period to complete the computing task.
Reference: 4. <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Though this paper addresses resources used in meta-computing, our research deals with resources in many distributed applications. A convenient abstraction for such applications represents each indivisible resource by an indivisible token of some color <ref> [4] </ref>; different types of resources have different colors. For instance, a node of an IBM SP2 can be represented as a token of the IBM SP color. Likewise, a room in a hotel can be represented by a token of the hotel color. Our model deals with time explicitly. <p> One approach to resource reservation is to try to lock all of the resources the application wants. If an application is unable to lock a resource, it enters a queue waiting for it based on the priority of a logical local clock timestamp <ref> [4] </ref>. If an application with lower priority has the resource but is not yet using it, that application must relinquish the resource (or token), deferring to the higher-priority application. This method is robust and fairly scalable, but can be inefficient.
Reference: 5. <author> K.M. Chandy and A. Rifkin. </author> <title> Systematic composition of objects in distributed internet applications: </title> <booktitle> Processes and sessions. Proceedings of the Thirtieth Hawaii International Conf. on System Sciences, </booktitle> <pages> pages 395-404, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: The resource managers or servers can also send agents to clients to request back the slots that the clients hold. We implement reservations atomically using a two-phase commit protocol [7]. The action starting with resource-request initiation and ending with resource-reservation commitment corresponds to an Infosphere session <ref> [5] </ref>. Reserving Resources. Our paradigm for resource reservation, using client requests and brokering agents, provides a test bed on which effective algorithms can be developed for specific tasks; see Figure 3.
Reference: 6. <author> I. Foster and C. Kesselman. Globus: </author> <title> A metacomputing infrastructure toolkit. </title> <journal> International Journal of Supercomputer Applications, </journal> <year> 1997. </year>
Reference-contexts: The scientist also wants resources to be scheduled automatically as a service of the appropriate software, with or without the inclusion of specific supplemental information such as the times the user is available to perform the experiment. Traditional metacomputing resource allocation <ref> [6, 9] </ref> uses a central authority for scheduling, usually for efficiency. <p> By contrast, consider the computational needs of users requiring resources managed by different groups in different places. Scheduling is more complicated because it is impractical for individual sites to "know" global information that would help them to do more efficient scheduling <ref> [6] </ref>. The owner of a set of resources may have resource management policies that are different from those of owners of other resource sets.
Reference: 7. <author> J. Gray and A. Reuter. </author> <title> Transaction Processing. </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: For efficiency, groups of nearby agents can coordinate to avoid excessive message-passing to clients, who may be geographically distant. The resource managers or servers can also send agents to clients to request back the slots that the clients hold. We implement reservations atomically using a two-phase commit protocol <ref> [7] </ref>. The action starting with resource-request initiation and ending with resource-reservation commitment corresponds to an Infosphere session [5]. Reserving Resources. Our paradigm for resource reservation, using client requests and brokering agents, provides a test bed on which effective algorithms can be developed for specific tasks; see Figure 3.
Reference: 8. <author> D.A. Lifka, M.W. Henderson, and K. Rayl. </author> <title> Users guide to the argonne sp scheduling system. </title> <type> Technical Report ANL/MCS-TM-201, </type> <institution> Argonne, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Traditional metacomputing resource allocation [6, 9] uses a central authority for scheduling, usually for efficiency. For example, the IBM SP2 uses a scheduling algorithm <ref> [8] </ref> that reduces the wait time of jobs requiring only a few nodes, if these can be scheduled without delaying more computationally intensive jobs. ? This work was supported in part under the Caltech Infospheres Project, by the Air Force Office of Scientific Research under grant AFOSR F49620-94-1-0244, by the CISE
Reference: 9. <author> M. Litzkow, M. Livney, and M. </author> <title> Mutka. Condor ahunter of idle workstations. </title> <booktitle> In 8 th International Conf. on Distributed Computing Systems, </booktitle> <pages> pages 104-111, </pages> <year> 1988. </year>
Reference-contexts: The scientist also wants resources to be scheduled automatically as a service of the appropriate software, with or without the inclusion of specific supplemental information such as the times the user is available to perform the experiment. Traditional metacomputing resource allocation <ref> [6, 9] </ref> uses a central authority for scheduling, usually for efficiency.
Reference: 10. <author> P. Maes. </author> <title> Agents that reduce work. </title> <journal> Comm. of the ACM, </journal> <volume> 37(7) </volume> <pages> 31-40, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Although the general framework is too complex to implement directly in some applications, for any particular application a suitable subset can be implemented. Like ambassadors to foreign countries, the client system can send a small set of instructions in Java as agents <ref> [10] </ref> to any resource manager to request computing time. Several efficiency improvements make agent communication attractive. Agents can include user preferences for efficient filtering of available times at the server end.
References-found: 10

