URL: ftp://ftp.research.microsoft.com/pub/debull/sept95-letfinal.ps
Refering-URL: http://www.research.microsoft.com/research/db/debull/issues-list.htm
Root-URL: http://www.research.microsoft.com
Title: Special Issue on Database Query Processing An Overview of Cost-based Optimization of Queries with Aggregates.
Author: .Surajit Chaudhuri and Kyuseok Shim Histogram-Based Ozcan, Sena Nural, Pinar Koksal, Mehmet Altinel, and Asuman Dogac Michael Stillger and Johann-Christoph Freytag 
Note: Bulletin of the Technical Committee on Data Engineering September, 1995 Vol. 18 No. 3 IEEE Computer Society Letters Letter from the Editor-in-Chief. .David Lomet 1 Letter from the Special Issue Editor. .Goetz Graefe 2  Fatma  Conference and Journal Notices 1996 International Conference on Data Engineering back cover  
Abstract: Yannis Ioannidis and Viswanath Poosala 10 The Cascades Framework for Query Optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Goetz Graefe 19 A Region Based Query Optimizer Through Cascades Query Optimizer Framework . . . . . . . . . . . . . . . . . . 
Abstract-found: 1
Intro-found: 1
Reference: [CS94] <author> S. Chaudhuri and K. Shim. </author> <title> Including group-by in query optimization. </title> <booktitle> In Proceedings of the 20th International VLDB Conference, </booktitle> <address> Santiago, Chile, </address> <month> Sept </month> <year> 1994. </year>
Reference-contexts: Thus, even if Figure 1 (b) was locally better than Figure 1 (a), it may perform suboptimally because increased width may lead to higher cost globally. 3.1 Greedy Conservative Heuristic We proposed greedy conservative heuristic as a technique to optimize single block SQL with group-by <ref> [CS94] </ref> by exploiting the transformations in Figure 1. The design principles of greedy conservative heuristic were to ensure that: (1) the quality of the plan produced is no worse than the execution plan produced by a traditional optimizer and (2) there is no significant overhead in optimization. <p> Condition (2)). Our experiments with the implementation (an extension of [SAC + 79]) indicate a significant increase (sometimes an order of magnitude) in the quality of the plans for a very modest increase in the optimization overhead <ref> [CS94] </ref>. Our results are particularly encouraging in view of the fact that we took a conservative cost model that discourages early evaluation of group-by operators. <p> However, the evolving querying models for decision-support systems (e.g., OLAP interfaces) will spur further development in this area. To Probe Further Invariant grouping for a single block query was studied independently by us in <ref> [CS94] </ref> and in [YL94]. Our paper also introduced simple coalescing and generalized coalescing. Later, additional transformations (including pull-up) on group-by were reported in [YL95, GHQ95, CS96]. The problem of optimization using the transformations was addressed by us in [CS94] for single block SQL queries and in [CS96] for multi block SQL <p> grouping for a single block query was studied independently by us in <ref> [CS94] </ref> and in [YL94]. Our paper also introduced simple coalescing and generalized coalescing. Later, additional transformations (including pull-up) on group-by were reported in [YL95, GHQ95, CS96]. The problem of optimization using the transformations was addressed by us in [CS94] for single block SQL queries and in [CS96] for multi block SQL queries. A comprehensive treatment of the transformations as well as the optimization algorithms discussed in this article is forthcoming in [CS95].
Reference: [CS95] <author> S. Chaudhuri and K. Shim. </author> <title> Complex queries: A unified approach. </title> <type> Technical report, </type> <institution> Hewlett-Packard Laboratories, Palo Alto, </institution> <note> In preparation to submit for publication 1995. </note>
Reference-contexts: The problem of optimization using the transformations was addressed by us in [CS94] for single block SQL queries and in [CS96] for multi block SQL queries. A comprehensive treatment of the transformations as well as the optimization algorithms discussed in this article is forthcoming in <ref> [CS95] </ref>.
Reference: [CS96] <author> S. Chaudhuri and K. Shim. </author> <title> Query optimization with aggregate views. </title> <booktitle> In Proceedings of the 5th International Conference on Extending Database Technology, </booktitle> <address> Avignon, France, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Furthermore, the projection list of the join node J2 includes aggregating columns. The transformation is applicable only if the join predicate in plan P1 do not involve any aggregation column of G1. The formal statement of the transformation appears in <ref> [CS96] </ref>. The paper by Dayal [Day87] briefly touches on the idea of using keys for pull-up. Ganski-Wong [GW87] implicitly used a restricted form of pull-up for the specific class of Join-Aggregate queries that they optimized. These are special instances of the pull-up transformations defined above. <p> These are special instances of the pull-up transformations defined above. Optimization Algorithm The class of queries Q for which we consider the optimization algorithm has the canonical form shown in Figure 3 (See <ref> [CS96] </ref> for details): * Every aggregate view V i consists of a select-project-join expression with a Group By clause and possibly a Having clause. <p> Additional reordering among relations in V i and V j is enabled by a preprocessing step. The details of such an algorithm is in <ref> [CS96] </ref>. Relationship to Correlated Nested Queries We note that the Join-Aggregate class of nested queries is closely related to that of optimizing queries containing views with aggregates. This follows from the past work in flattening nested queries, pioneered by Kim [Kim82]. <p> To Probe Further Invariant grouping for a single block query was studied independently by us in [CS94] and in [YL94]. Our paper also introduced simple coalescing and generalized coalescing. Later, additional transformations (including pull-up) on group-by were reported in <ref> [YL95, GHQ95, CS96] </ref>. The problem of optimization using the transformations was addressed by us in [CS94] for single block SQL queries and in [CS96] for multi block SQL queries. A comprehensive treatment of the transformations as well as the optimization algorithms discussed in this article is forthcoming in [CS95]. <p> Our paper also introduced simple coalescing and generalized coalescing. Later, additional transformations (including pull-up) on group-by were reported in [YL95, GHQ95, CS96]. The problem of optimization using the transformations was addressed by us in [CS94] for single block SQL queries and in <ref> [CS96] </ref> for multi block SQL queries. A comprehensive treatment of the transformations as well as the optimization algorithms discussed in this article is forthcoming in [CS95].
Reference: [Day87] <author> U. Dayal. </author> <title> Of nests and trees: A unified approach to processing queries that contain nested subqueries, aggregates, and quantifiers. </title> <booktitle> In Proceedings of the 13th International VLDB Conference, </booktitle> <address> Brighton, </address> <month> August </month> <year> 1987. </year>
Reference-contexts: Furthermore, the projection list of the join node J2 includes aggregating columns. The transformation is applicable only if the join predicate in plan P1 do not involve any aggregation column of G1. The formal statement of the transformation appears in [CS96]. The paper by Dayal <ref> [Day87] </ref> briefly touches on the idea of using keys for pull-up. Ganski-Wong [GW87] implicitly used a restricted form of pull-up for the specific class of Join-Aggregate queries that they optimized. These are special instances of the pull-up transformations defined above.
Reference: [GHQ95] <author> A. Gupta, V. Harinarayan, and D. Quass. </author> <title> Aggregate-query processing in data warehousing environments. </title> <booktitle> In Proceedings of the 21st International VLDB Conference, </booktitle> <address> Zurich, </address> <month> Sept </month> <year> 1995. </year>
Reference-contexts: To Probe Further Invariant grouping for a single block query was studied independently by us in [CS94] and in [YL94]. Our paper also introduced simple coalescing and generalized coalescing. Later, additional transformations (including pull-up) on group-by were reported in <ref> [YL95, GHQ95, CS96] </ref>. The problem of optimization using the transformations was addressed by us in [CS94] for single block SQL queries and in [CS96] for multi block SQL queries. A comprehensive treatment of the transformations as well as the optimization algorithms discussed in this article is forthcoming in [CS95].
Reference: [GW87] <author> Richard A. Ganski and Harry K. T. Wong. </author> <title> Optimization of nested SQL queries revisited. </title> <booktitle> In Proc. of the 1987 ACM-SIGMOD Conference on the Management of Data, </booktitle> <address> San Francisco, CA, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: The transformation is applicable only if the join predicate in plan P1 do not involve any aggregation column of G1. The formal statement of the transformation appears in [CS96]. The paper by Dayal [Day87] briefly touches on the idea of using keys for pull-up. Ganski-Wong <ref> [GW87] </ref> implicitly used a restricted form of pull-up for the specific class of Join-Aggregate queries that they optimized. These are special instances of the pull-up transformations defined above. <p> Therefore, the result of optimizing queries containing views with aggregates can be used for optimizing queries with correlated nested subqueries. We can also show that alternative flattening schemes for nested subqueries such as that due to Ganski <ref> [GW87] </ref> are special cases of as execution alternatives due to optimization of aggregate views. The differences between the transformations due to Kim and Ganski are highlighted by Figure 4 and can be seen as arising due to two extreme placements of the group-by operators. <p> This article has pointed to some of the recent devel 1 Note that for correctness, such transformations require outerjoin in the general case <ref> [GW87, Mur92] </ref>. 8 opments in this area. However, the evolving querying models for decision-support systems (e.g., OLAP interfaces) will spur further development in this area. To Probe Further Invariant grouping for a single block query was studied independently by us in [CS94] and in [YL94].
Reference: [Kim82] <author> W. Kim. </author> <title> On optimizing an SQL-Like nested query. </title> <journal> ACM TODS, </journal> <month> Sept </month> <year> 1982. </year>
Reference-contexts: The details of such an algorithm is in [CS96]. Relationship to Correlated Nested Queries We note that the Join-Aggregate class of nested queries is closely related to that of optimizing queries containing views with aggregates. This follows from the past work in flattening nested queries, pioneered by Kim <ref> [Kim82] </ref>. For example, the result of Kim's transformation is a query that is a join 1 of base tables and one or more aggregate views, i.e., views containing aggregates. Therefore, the result of optimizing queries containing views with aggregates can be used for optimizing queries with correlated nested subqueries.
Reference: [Mur92] <author> M. Muralikrishna. </author> <title> Improved unnesting algorithms for join aggregate SQL queries. </title> <booktitle> In Proceedings of the 18th International VLDB Conference, </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: This article has pointed to some of the recent devel 1 Note that for correctness, such transformations require outerjoin in the general case <ref> [GW87, Mur92] </ref>. 8 opments in this area. However, the evolving querying models for decision-support systems (e.g., OLAP interfaces) will spur further development in this area. To Probe Further Invariant grouping for a single block query was studied independently by us in [CS94] and in [YL94].
Reference: [SAC + 79] <author> P. G. Selinger, M. M. Astrahan, D. D. Chamberlin, R. A. Lorie, and T. G. Price. </author> <title> Access path selection in a relational database management system. </title> <booktitle> In Proceedings of the ACM SIGMOD International Symposium on Management of Data, </booktitle> <address> Boston, MA, </address> <month> June </month> <year> 1979. </year>
Reference-contexts: operation G on a relation R results in a relation not just with fewer tuples than in R, but also with differences in the physical properties: (a) Application of a group-by operator may change the width of the intermediate relation. (b) Application of a group-by operator interacts with interesting orders <ref> [SAC + 79] </ref>. The most difficult problem in handling the optimization problem in the presence of group-by arises from the fact that the transformations can introduce additional group-by operators. <p> To enforce such a property, a plan such as G (R) 1 S is considered only when the width of the intermediate obtained by G (R) does not increase (i.e. Condition (2)). Our experiments with the implementation (an extension of <ref> [SAC + 79] </ref>) indicate a significant increase (sometimes an order of magnitude) in the quality of the plans for a very modest increase in the optimization overhead [CS94].
Reference: [YL94] <author> W. P. Yan and P. A. Larson. </author> <title> Performing group-by before join. </title> <booktitle> In Proceedings of International Conference on Data Engineering, </booktitle> <address> Houston, </address> <month> Feb </month> <year> 1994. </year>
Reference-contexts: However, the evolving querying models for decision-support systems (e.g., OLAP interfaces) will spur further development in this area. To Probe Further Invariant grouping for a single block query was studied independently by us in [CS94] and in <ref> [YL94] </ref>. Our paper also introduced simple coalescing and generalized coalescing. Later, additional transformations (including pull-up) on group-by were reported in [YL95, GHQ95, CS96]. The problem of optimization using the transformations was addressed by us in [CS94] for single block SQL queries and in [CS96] for multi block SQL queries.

Reference: [Chr84] <author> S. Christodoulakis. </author> <title> Implications of certain assumptions in database performance evaluation. </title> <journal> ACM TODS, </journal> <volume> 9(2) </volume> <pages> 163-186, </pages> <month> June </month> <year> 1984. </year>
Reference: [dB78] <author> C. de Boor. </author> <title> A Practical Guide to Splines. </title> <publisher> Springer Verlag, </publisher> <address> New York, NY, </address> <year> 1978. </year>
Reference: [IC91] <author> Y. Ioannidis and S. Christodoulakis. </author> <title> On the propagation of errors in the size of join results. </title> <booktitle> In Proc. of the 1991 ACM-SIGMOD Conference on the Management of Data, </booktitle> <pages> pages 268-277, </pages> <address> Denver, CO, </address> <month> May </month> <year> 1991. </year>
Reference: [IC93] <author> Y. Ioannidis and S. Christodoulakis. </author> <title> Optimal histograms for limiting worst-case error propagation in the size of join results. </title> <journal> ACM TODS, </journal> <volume> 18(4) </volume> <pages> 709-748, </pages> <month> December </month> <year> 1993. </year>
Reference: [Ioa93] <author> Y. Ioannidis. </author> <title> Universality of serial histograms. </title> <booktitle> In Proc. 19th Int. VLDB Conference, </booktitle> <pages> pages 256-267, </pages> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference: [IP95] <author> Y. Ioannidis and V. Poosala. </author> <title> Balancing histogram optimality and practicality for query result size estimation. </title> <booktitle> In Proc. of the 1995 ACM-SIGMOD Conference on the Management of Data, </booktitle> <pages> pages 233-244, </pages> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year>
Reference: [JC85] <author> R. Jain and I. Chlamtac. </author> <title> The p 2 algorithm for dynamic calculation of quantiles and histograms without sorting observations. </title> <journal> Communications of the ACM, </journal> <volume> 28(10) </volume> <pages> 1076-1085, </pages> <month> October </month> <year> 1985. </year>
Reference: [Koo80] <author> R. P. Kooi. </author> <title> The optimization of queries in relational databases. </title> <type> PhD thesis, </type> <institution> Case Western Reserve University, </institution> <month> Sept </month> <year> 1980. </year>
Reference: [MD88] <author> M. Muralikrishna and D. J. DeWitt. </author> <title> Equi-depth histograms for estimating selectivity factors for multi-dimensional queries. </title> <booktitle> In Proc. of the 1988 ACM-SIGMOD Conference on the Management of Data, </booktitle> <pages> pages 28-36, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year>
Reference: [NHS84] <author> J. Nievergelt, H. Hinterberger, and K. C. Sevcik. </author> <title> The grid file: An adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <month> March </month> <year> 1984. </year>
Reference: [PSC84] <author> G. Piatetsky-Shapiro and C. Connell. </author> <title> Accurate estimation of the number of tuples satisfying a condition. </title> <booktitle> In Proc. 1984 ACM-SIGMOD Conference on the Management of Data, </booktitle> <pages> pages 256-276, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year>
Reference: [SAC + 79] <author> P. G. Selinger, M. M. Astrahan, D. D. Chamberlin, R. A. Lorie, and T. G. Price. </author> <title> Access path selection in a relational database management system. </title> <booktitle> In Proceedings of the ACM SIGMOD Int. Symposium on Management of Data, </booktitle> <pages> pages 23-34, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1979. </year>
Reference-contexts: operation G on a relation R results in a relation not just with fewer tuples than in R, but also with differences in the physical properties: (a) Application of a group-by operator may change the width of the intermediate relation. (b) Application of a group-by operator interacts with interesting orders <ref> [SAC + 79] </ref>. The most difficult problem in handling the optimization problem in the presence of group-by arises from the fact that the transformations can introduce additional group-by operators. <p> To enforce such a property, a plan such as G (R) 1 S is considered only when the width of the intermediate obtained by G (R) does not increase (i.e. Condition (2)). Our experiments with the implementation (an extension of <ref> [SAC + 79] </ref>) indicate a significant increase (sometimes an order of magnitude) in the quality of the plans for a very modest increase in the optimization overhead [CS94].

Reference: [BMG93] <author> J. A. Blakeley, W. J. McKenna, and G. Graefe, </author> <title> Experiences Building the Open OODB Query Optimizer, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Washington, DC, </address> <month> May </month> <year> 1993, </year> <month> 287. </month>
Reference: [GrD87] <author> G. Graefe and D. J. DeWitt, </author> <title> The EXODUS Optimizer Generator, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Francisco, CA, </address> <month> May </month> <year> 1987, </year> <month> 160. </month>
Reference: [Gra93] <author> G. Graefe, </author> <title> Query Evaluation Techniques for Large Databases, </title> <journal> ACM Computing Surveys 25, </journal> <month> 2 (June </month> <year> 1993), </year> <pages> 73-170. </pages>
Reference: [GrM93] <author> G. Graefe and W. J. McKenna, </author> <title> The Volcano Optimizer Generator: Extensibility and Efficient Search, </title> <booktitle> Proc. IEEE Int'l. Conf. on Data Eng., </booktitle> <address> Vienna, Austria, </address> <month> April </month> <year> 1993, </year> <month> 209. </month>
Reference: [Loh88] <author> G. M. Lohman, </author> <title> Grammar-Like Functional Rules for Representing Query Optimization Alternatives, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Chicago, IL, </address> <month> June </month> <year> 1988, </year> <month> 18. </month>
Reference: [MDZ93] <author> G. Mitchell, U. Dayal, and S. B. Zdonik, </author> <title> Control of an Extensible Query Optimizer: A Planning-Based Approach, </title> <booktitle> Proc. Int'l. Conf. on Very Large Data Bases, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993, </year> <month> 517. </month>
Reference: [SAC79] <author> P. G. Selinger, M. M. Astrahan, D. D. Chamberlin, R. A. Lorie, and T. G. Price, </author> <title> Access Path Selection in a Relational Database Management System, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Boston, MA, </address> <month> May-June </month> <year> 1979, </year> <month> 23. </month>
Reference: [WoG93] <author> R. H. Wolniewicz and G. Graefe, </author> <title> Algebraic Optimization of Computations over Scientific Databases, </title> <booktitle> Proc. Int'l Conf. on Very Large Data Bases, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993, </year> <pages> 13. 29 </pages>
References-found: 30

