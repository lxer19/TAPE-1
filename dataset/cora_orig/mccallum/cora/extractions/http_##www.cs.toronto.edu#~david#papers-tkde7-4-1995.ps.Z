URL: http://www.cs.toronto.edu/~david/papers-tkde7-4-1995.ps.Z
Refering-URL: http://www.cs.toronto.edu/~david/papers.html
Root-URL: 
Title: Implementing Temporal Integrity Constraints Using an Active DBMS  
Author: Jan Chomicki and David Toman 
Keyword: Temporal databases, integrity constraints, dynamic constraints, constraint checking.  
Date: 4, AUGUST 1995 1  
Note: IEEE TRANSACTIONS ON KNOWLEDGE AND DATA ENGINEERING, VOL. 7, NO.  
Abstract: The paper proposes a general architecture for implementing temporal integrity constraints by compiling them into a set of active DBMS rules. The modularity of the design allows easy adaptation to different environments. Both differences in the specification languages and in the target rule systems can be easily accommodated. The advantages of this architecture are demonstrated on a particular temporal constraint compiler. This compiler allows automatic translation of integrity constraints formulated in Past Temporal Logic into rules of an active DBMS (in the current version of the compiler two active DBMS are supported: Starburst and INGRES). During the compilation the set of constraints is checked for the safe evaluation property. The result is a set of SQL statements that includes all the necessary rules needed for enforcing the original constraints. The rules are optimized to reduce the space overhead introduced by the integrity checking mechanism. There is no need for an additional runtime constraint monitor. When the rules are activated, all updates to the database that violate any of the constraints are automatically rejected (i.e., the corresponding transaction is aborted). In addition to straightforward implementation, this approach offers a clean separation of application programs and the integrity checking code. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Chomicki. </author> <title> History-less Checking of Dynamic Integrity Constraints. </title> <booktitle> IEEE International Conference on Data Engineering, </booktitle> <address> Phoenix AZ, </address> <month> February </month> <year> 1992. </year>
Reference: [2] <author> J. Chomicki. </author> <title> Real-Time Integrity Constraints. </title> <booktitle> In Proc. Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: The modifications are usually confined to a single module of the compiler. Other Query Languages. We can introduce other constructs in the constraint specification language to capture bigger class of temporal constraints (for example real-time constraints <ref> [2] </ref>), repeated activities (periodic sets), etc. New Optimization Techniques. So far we have considered only space-saving optimization techniques. We can introduce optimizations that speed up the evaluation of the given constraints (note that space saving techniques also help towards efficient execution because we deal with smaller amounts of data).
Reference: [3] <author> J. Chomicki. </author> <title> Efficient Checking of Temporal Integrity Constraints Using Bounded History Encoding. </title> <journal> ACM Transactions on Database Systems, </journal> <note> to appear. </note>
Reference: [4] <author> A. Van Gelder and R. W. Topor. </author> <title> Safety and Translation of Relational Calculus Queries. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(2) </volume> <pages> 235-278, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: This is done in two steps: first the formula is converted to Relational Algebra Normal Form and then to SQL. The conversion of FOL formulas to Relational Algebra is based on the ideas presented in <ref> [4] </ref>. All the definitions were carefully converted to functions that take advantage of the structure of the formulas they are working on. This reduces the number of passes needed to traverse the input formula to two and leads to a more efficient (bottom-up) execution. <p> Anomaly Detection Definition 12: Let X = fx 1 ; x 2 ; : : :g be the set of variable names, G = fg; c; fg the set of distinct tags (g stands for GEN, c for CON, and f for not GEN and not CON using terminology from <ref> [4] </ref>), and L the set of (finite disjunctions of) atoms (base relations). <p> A (FOL) formula F is called allowed if the second condition is replaced by (x; g; ) 2 F V (A) for all subformulas 9x:A of F . The evaluable property is the key for distinguishing formulas that can be safely converted (see <ref> [4] </ref> for a more detailed discussion). Conversion of formulas which do not meet this criterion may lead to Join Anomalies and unsafe reformulations of the original formula, and all such formulas must be rejected. <p> We perform a transformation to obtain an equivalent allowed formula. The transformation was described in <ref> [4] </ref> and is defined as follows: 9x:A ! 9x:(A ^ 9 fl x:(_G)) _ R where G is the third component of the (x; c; G) element in F V (A)|this is finite disjunction of atoms such that (x; g; G) 2 F V (_G), 9 fl x (_G) denotes the <p> Thus we need to be careful not to introduce constructs not expressible in SQL. Especially all the formulas have to be recursion-free and to have safe reformulations <ref> [4] </ref>. A. Magic Set Transformation The main idea of this transformation is based on the following observation: the auxiliary relations r ff are used only in finitely many known contexts (all of which can be easily determined by traversing the original formula).
Reference: [5] <author> International Organization for Standardization (ISO). </author> <title> Database Language SQL. </title> <note> Document ISO/IEC 9075:1992. (Also ANSI X3.135-1992). </note>
Reference-contexts: The presented version produces standard SQL (i.e., accepted by most commercial DBMS's); the Starburst variant of the system can take advantage of the extensions to SQL present in the system. The SQL/92 standard <ref> [5] </ref> contains these extensions but unfortunately most available DBMS (like INGRES) do not. A. First Order Logic to Relational Algebra Normal Form The whole conversion consists of two phases: first the FOL formula is checked for safe evaluation property (Join Anomaly Detection) and simultaneously simplified to a normal form (ENF).
Reference: [6] <author> J. Widom, R. J. Cochrane, and B. G. Lindsay. </author> <title> Implementing Set-oriented Production Rules as an Extension to Starburst. </title> <booktitle> In Proc. International Conference on VLDB, </booktitle> <year> 1991. </year>
Reference-contexts: The evaluation order of the rules is controlled with the precedes and follows clauses. Only the then part of the rule is mandatory. Moreover, for all tables, specified in the when clause the system provides appropriate transition tables inserted, deleted, old-updated, and new-updated <ref> [6] </ref>. as r n1 r n (new-updated (r) [ inserted (r)) [ (old-updated (r) [ deleted (r)) Example 8: Now we can finish the example 6.
Reference: [7] <author> S. Ceri, J. Widom. </author> <title> Deriving Production Rules for Constraint Maintenance. </title> <booktitle> In Proc. International Conference on VLDB, </booktitle> <year> 1990. </year>
Reference: [8] <author> D. M. Gabbay, I. Hodkinson, and M. Reynolds. </author> <title> Temporal Logic. </title> <journal> Mathematical Foundations and Computational Aspects. </journal> <volume> Vol. 1. </volume> <publisher> Oxford Logic Guides, Oxford University Press, </publisher> <year> 1994. </year>
Reference: [9] <editor> H. Gallaire, J. Minker, and J. Nicolas. </editor> <title> Logic and Databases: a Deductive Approach. </title> <journal> ACM Computing Surveys, </journal> <volume> 16(2) </volume> <pages> 153-185, </pages> <month> June </month> <year> 1984. </year>
Reference: [10] <author> M. Gertz, U. W. Lipeck. </author> <title> Deriving Integrity Maintaining Triggers from Transition Graphs. </title> <booktitle> In International Conference on Data Engineering, </booktitle> <year> 1993. </year>
Reference: [11] <author> J. A. Blakeley, P. A. Larson, and F. W. Tompa. </author> <title> Efficiently Updating Materialized Views. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <address> pp.61-71, Washington D.C., </address> <month> June </month> <year> 1986. </year>
Reference-contexts: The transformation to RANF is not unique and optimization of this transformation may help to reduce the size of the final formula (but note that we can't avoid the exponential explosion in general). 2. We can optimize the process of rematerialization of the auxiliary relations as shown in <ref> [11] </ref>, [12]. This pass can be easily added to the existing system. 3. The partial ordering of the rematerialization of the auxiliary relations is linearized during the compilation. Some linearization may yield better magic optimization than other ones.
Reference: [12] <author> A. Gupta, I. S. Mumick, and V. S. Subrahmanian. </author> <title> Maintaining views incrementally. </title> <booktitle> In Proc. ACM SIGMOD pp.157-167, </booktitle> <address> Washington D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: The transformation to RANF is not unique and optimization of this transformation may help to reduce the size of the final formula (but note that we can't avoid the exponential explosion in general). 2. We can optimize the process of rematerialization of the auxiliary relations as shown in [11], <ref> [12] </ref>. This pass can be easily added to the existing system. 3. The partial ordering of the rematerialization of the auxiliary relations is linearized during the compilation. Some linearization may yield better magic optimization than other ones.
Reference: [13] <author> A. P. Sistla and O. Wolfson. </author> <title> Temporal Triggers in Active Databases. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <note> 1995 (to appear). </note>
Reference: [14] <author> R. Stonebraker, A. Jhingran, J. Goh, and S. Potamianos. </author> <title> On Rules, Procedures, Caching, and Views in Data Base Systems. </title> <booktitle> In ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1990. </year>
Reference: [15] <author> Z. Manna and A. Pnueli. </author> <title> The temporal logic of reactive and concurrent systems. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [16] <author> I. S. Mumick. </author> <title> Query Optimization in Deductive and Relational Databases. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1991. </year>
Reference-contexts: We explore two methods of limiting the amount of data stored in auxiliary relations: Context-based optimization. We can limit the number of tuples stored in an auxiliary relation by the analysis of the context (s) the relation is used in. This technique is similar to the Magic Set transformation <ref> [16] </ref>, [17], [18]. However in the context of temporal formulas we need to be more careful than in the time less case. The information passed sideways must agree with the flow of time because we can't predict the future.
Reference: [17] <author> I. S. Mumick, S. J. Finkelstein, H. Pirahesh, and R. Ramakrish-nan. </author> <title> Magic Conditions. </title> <booktitle> In Proc. ACM Symposium on Principles of Database Systems, </booktitle> <address> pp.314-330, Nashville, Tennessee, </address> <year> 1990. </year>
Reference-contexts: We can limit the number of tuples stored in an auxiliary relation by the analysis of the context (s) the relation is used in. This technique is similar to the Magic Set transformation [16], <ref> [17] </ref>, [18]. However in the context of temporal formulas we need to be more careful than in the time less case. The information passed sideways must agree with the flow of time because we can't predict the future. <p> But we can show how to exploit the definitions of the auxiliary relations to create restricting conditions in a similar fashion. Also we use a different mechanism for computing the sideways information passing strategy (SIPS) than <ref> [17] </ref> 7 I.e., relations defined by a formula from other relations. 12 IEEE TRANSACTIONS ON KNOWLEDGE AND DATA ENGINEERING, VOL. 7, NO. 4, AUGUST 1995 where the strategy is based on adornments of literals (atoms). <p> A successful conversion to SQL also requires that the magic transformation produces a set of non-recursive view definitions (this can be proved using the techniques presented in <ref> [17] </ref>). The magic conditions m r ff (for each ' r ff ) are used just before the auxiliary relations are rematerialized to restrict their contents. B. Algebraic Transformations The Magic Set transformation reduces the amount of data stored in auxiliary relations.
Reference: [18] <author> F. Bancilhon, D. Maier, Y. Sagiv, J. Ullman. </author> <title> Magic sets and other strange ways to implement logic Programs. </title> <booktitle> In Proc. ACM Symposium on Principles of Database Systems, </booktitle> <year> 1986. </year>
Reference-contexts: We can limit the number of tuples stored in an auxiliary relation by the analysis of the context (s) the relation is used in. This technique is similar to the Magic Set transformation [16], [17], <ref> [18] </ref>. However in the context of temporal formulas we need to be more careful than in the time less case. The information passed sideways must agree with the flow of time because we can't predict the future. <p> This technique is very general: it is applicable to all auxiliary relations 7 in an application (i.e., it is not limited to auxiliary relations introduced by the TL2FOL conversion). Note that the classical application of the Magic Set transformation to a set of Horn rules <ref> [18] </ref> works in a completely different setting: the magic sets are used to pass (partial) information about the intended outcome of the bottom-up evaluation of the rules.
Reference: [19] <author> D. Toman and J. Chomicki. </author> <title> Implementing Temporal Integrity Constraints Using an Active DBMS. </title> <booktitle> In Proc. RIDE'94 Active Database Systems, </booktitle> <address> Houston, pp.87-95, </address> <year> 1994. </year>
Reference-contexts: Thanks also go to Inderpal Singh Mumick for discussions and for sending us his Ph.D. thesis. This research was partially supported by NSF grant IRI-9110581. An early version of some of the results in this paper appeared in <ref> [19] </ref>. INGRES is a trademark of the Ingres Corporation.

References-found: 19

