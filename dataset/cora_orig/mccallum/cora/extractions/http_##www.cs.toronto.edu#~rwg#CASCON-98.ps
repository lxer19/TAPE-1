URL: http://www.cs.toronto.edu/~rwg/CASCON-98.ps
Refering-URL: http://www.cs.toronto.edu/~rwg/CASCON-98.html
Root-URL: http://www.cs.toronto.edu
Title: Code Migration Through Transformations: An Experience Report  
Author: Kontogiannis, K. Martin, J. Wong, K. Gregory, R. Muller, H. and Mylopoulos, J. 
Affiliation: University of Waterloo 1 Dept. of Electrical Eng. University of Victoria 2 Dept. of Computer Science University of Toronto 3 Dept. of Computer Science  
Abstract: One approach to dealing with spiraling maintenance costs, manpower shortages and frequent breakdowns for legacy code is to "migrate" the code into a new platform and/or programming language. The objective of this paper is to explore the feasibility of semi-automating such a migration process in the presence of performance and other constraints for the migrant code. In particular, the paper reports on an experiment involving a medium-size software system written in PL/IX. Several modules of the system were migrated to C++, first by hand and then through a semiautomatic tool. After discovering that the migrant code was performing up to 50% slower than the original, a second migration effort was conducted which improved the performance of the migrant code substantially. The paper reports on the transformation techniques used by the transformation process and the effectiveness of the prototype tools that were developed. In addition, the paper presents preliminary results on the evaluation of the experiment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Baker S. B, </author> <title> "Parameterized Pattern Matching: Algorithms and Applications", </title> <journal> Journal Computer and System Sciences, </journal> <year> 1994. </year>
Reference: [2] <author> Ballance, R., Graham, S., Van De Van-ter, M., </author> <title> "The Pan Language-Based Editing System", </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <month> Jan. </month> <year> 1992, </year> <note> Vol. 1, No.1, pp.95-127. </note>
Reference: [3] <author> Borras, P., Clement, D., Despeyroux, Th., Khan, J., Lang, G., Pasual, V., </author> <title> "CENTAUR: The System", </title> <booktitle> Proceedings of the SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <address> Boston, Mass, </address> <year> 1988. </year> <title> [4] van den Brand, </title> <editor> M., Sellink, A., Verhoef, C., </editor> <title> "Generation of Components for Software Renovation Factories from Context-free Grammars", </title> <booktitle> Proceedings Working Conference on Reverse Engineering, WCRE'97, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> October </month> <year> 1997. </year>
Reference: [5] <author> Brodie, M., Stonebraker, M., </author> <title> "Migrating Legacy Systems", </title> <publisher> Morgan Kaufman Publishers, </publisher> <year> 1995. </year>
Reference-contexts: These non-functional requirements introduce a risk factor into the migration process, since they can usually only be evaluated after the migration is complete. Another constraint often adopted in order to reduce the risk of migration projects is that the process must be incremental <ref> [5] </ref>, i.e., can be conducted so that certain components of the legacy system are selected and migrated, resulting in an operational system. Such an incremental process ensures that migration can proceed in a piecemeal fashion, thereby lowering the risk of overall failure, cost and time overruns, and the like.
Reference: [6] <author> Chen, Y., Nishimoto, M., Ramamoorthy, C., </author> <title> "The C Information Abstraction System.", </title> <journal> IEEE Transactions on Software Engineering, vol.16, </journal> <volume> No.3, </volume> <year> 1990, </year> <month> pp.32 5-334. </month>
Reference: [7] <institution> Consortium for Software Engineering Research: </institution> <note> http://www.cser.ca </note>
Reference-contexts: Overlays were 4 handled as C/C++ unions. The type con-version table can be modified with ease during the migration process and can be tailored to particular requirements for a specific migration project. A detailed discussion on the issues involved for data type transformations can be found in <ref> [7] </ref>.
Reference: [8] <author> Feldman, S., Gay, D., Maimone, M., Schryer, N., </author> <title> "A Fortran to C Converter", </title> <type> AT&T Technical Report No. 149, </type> <year> 1993. </year>
Reference-contexts: In [10] a tool that is used to transform Pascal programs to C, while in <ref> [8] </ref> a Fortran-77 to C and C++ converter is proposed. Both migration tools are based on parse trees that are generated from source code, are consequently transformed and then fed to a compiler of the target language. <p> Therefore our margins of performance improvement are limited compared to the ones that could be obtained in SmallTalk to C conversion. In <ref> [8] </ref> and [10] the authors report that the performance of the converted code using the f2c and p2c utilities respectively, is the same as the performance of the original code, indicating thus a performance ratio of 1.0.
Reference: [9] <author> Finnigan, P. </author> <title> et.al "The Software Bookshelf", </title> <journal> IBM Systems Journal, vol.36, </journal> <volume> No.4, </volume> <year> 1997. </year>
Reference-contexts: The process of selecting which components of the legacy system to migrate begins with program understanding and re-documentation techniques which lead to a detailed analysis of the legacy system in terms of its major components, files, subsystems, and corresponding interfaces <ref> [9] </ref>. Each subsystem is thoroughly analyzed in terms of its control and data flow properties, its interface with the rest of the system, and the major algorithms and data structures used.
Reference: [10] <author> Gillespie, D., </author> <title> "A Pascal To C Converter", The HP-UX Porting and Archive Center, </title> <note> http://hpux.u-aizu.ac.jp/hppd/hpux/ Languages/p2c-1.20/readme.html 12 </note>
Reference-contexts: Finally, section 8 presents an overall evaluation of the experiment and section 9 offers conclusions and describes directions for further research. 2 Related Work A number of research teams have addressed the issue of source code migration. In <ref> [10] </ref> a tool that is used to transform Pascal programs to C, while in [8] a Fortran-77 to C and C++ converter is proposed. <p> Therefore our margins of performance improvement are limited compared to the ones that could be obtained in SmallTalk to C conversion. In [8] and <ref> [10] </ref> the authors report that the performance of the converted code using the f2c and p2c utilities respectively, is the same as the performance of the original code, indicating thus a performance ratio of 1.0.
Reference: [11] <author> Johnson, H., </author> <title> "Substring Matching for Clone Detection and Change Tracking", </title> <booktitle> International Conference on Software Maintenance 1994, </booktitle> <address> Victoria BC, </address> <month> 21-23 September, </month> <year> 1994, </year> <month> pp.120-126. </month>
Reference: [12] <author> Ladd, D., Ramming, J., </author> <title> "A fl : a Language for Implementing Language Processors", </title> <journal> IEEE Transactions on Software Engineering, vol.21, </journal> <volume> no.11, </volume> <month> Nov. </month> <year> 1995, </year> <month> pp.894-901. </month>
Reference: [13] <author> Paul, S., Prakash, A., </author> <title> "A Framework for Source Code Search Using Program Patterns", </title> <journal> IEEE Transactions on Software Engineering, June 1994, </journal> <volume> Vol. 20, No.6, </volume> <pages> pp. 463-475. </pages>
Reference: [14] <author> Reps, T., Teitelbaum, T., </author> <title> "The Synthesizer Generator", </title> <booktitle> In Proc. of the SIG-SOFT/SIGPLAN Symposium on Practical Software Development Environments, </booktitle> <address> Pittsburgh PA, </address> <year> 1984, </year> <month> pp.42-48. </month>
Reference: [15] <institution> Sigma Research Inc. </institution> : <note> http://www.sigma-research.com/for2win </note>
Reference-contexts: A semi-conservative, real-time garbage 2 collection mechanism is also provided in this environment. On the commercial front, a Fortran to Fortran-Windows converter has been developed by <ref> [15] </ref> and allows for HP UX, Sun, VAX, and IBM Fortran. to be converted to Fortran that can run on Windows/98/NT environments. Similarly, a number of translators for Ada 83 to Ada 95, CMS-2 to Ada, Jovial to Ada, Fortran to Ada have been developed by Xinotech [17].
Reference: [16] <author> Steffen, J., </author> <title> "Interactive examination of a C program with Csope", </title> <booktitle> Proceedings USENIX Assoc., Winter Conference, </booktitle> <month> Jan. </month> <year> 1985. </year>
Reference: [17] <author> Xinotech Inc. </author> <note> http://www.xinotech.com </note>
Reference-contexts: Similarly, a number of translators for Ada 83 to Ada 95, CMS-2 to Ada, Jovial to Ada, Fortran to Ada have been developed by Xinotech <ref> [17] </ref>. In many respects, the translation problem of code from one programming language to another can be thought as a problem of as mapping syntactic and semantic patterns of the source language to patterns in the target language.
Reference: [18] <author> Yasumatsu, K., Doi, N., "Spice: </author> <title> A System for Translating SmallTalk Programs Into a C Environment" IEEE Transactions on Software Engineering, </title> <journal> vol. </journal> <volume> 21. no.11, </volume> <month> November </month> <year> 1995. </year> <month> 13 </month>
Reference-contexts: Both migration tools are based on parse trees that are generated from source code, are consequently transformed and then fed to a compiler of the target language. In <ref> [18] </ref> a system for translating Smalltalk programs into C is presented which creates runtime replacement classes that implement the same functionality as Smalltalk classes in the source code. A semi-conservative, real-time garbage 2 collection mechanism is also provided in this environment. <p> ([6]), CSCOPE ([16]), the Pan system ([2]), the CENTAUR system ([3]), the Cor-nell Synthesizer Generator ([14]) and, A fl ([12]). 3 The Transformation Process In order to perform software transformations, it is useful to represent source code at a higher level of abstraction than, say, text or even parse trees <ref> [18] </ref>. Like many other research efforts, we have chosen to represent the source code in the form of Abstract Syntax Trees (AST) which has been emitted from a custom-built PL/IX parser and linker. <p> This can be explained by the added C++ libraries to handle and simulate the behavior of several PL/IX language-specific constructs. The comparison of the PL/IX to C converter discussed in this paper, with the other tools found in the literature is summarized in the following points. In <ref> [18] </ref> the authors present a higher performance ratio (that is the performance of the old system divided by the performance of the new system) for the migrant code (ratio = 1.22) than the performance ratio we could obtain on our initial experiments (ratio = 1.02).
References-found: 17

