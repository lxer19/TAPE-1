URL: ftp://ftp.cs.utexas.edu/pub/techreports/tr95-17.ps
Refering-URL: http://www.cs.utexas.edu/users/vl/students.html
Root-URL: http://www.cs.utexas.edu
Title: by  
Author: G. Neelakantan Kartha 
Date: 1995  
Note: Copyright  
Abstract-found: 0
Intro-found: 1
Reference: [ Allen, 1984 ] <author> James Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23 </volume> <pages> 123-154, </pages> <year> 1984. </year>
Reference: [ Apt and Bezem, 1990 ] <author> Krzysztof Apt and Marc Bezem. </author> <title> Acyclic programs. </title> <editor> In David Warren and Peter Szeredi, editors, </editor> <booktitle> Logic Programming: Proc. of the Seventh Int'l Conf., </booktitle> <pages> pages 617-633, </pages> <year> 1990. </year>
Reference: [ Baker, 1991 ] <author> Andrew Baker. </author> <title> Nonmonotonic reasoning in the framework of situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 49 </volume> <pages> 5-23, </pages> <year> 1991. </year>
Reference-contexts: The following two examples are not in the class of temporal projection problems. We may wish to use some facts about the current situation to derive conclusions about the past. The following example from <ref> [ Baker, 1991 ] </ref> illustrates this. Example 4. Condition 1 of Example 1 is replaced by 1. Fred is not alive after performing the sequence of actions shoot,wait. Conclusion: The gun is loaded in the initial situation. <p> The method of chronological minimization and the logic of persistence proposed by Kautz [1986] both fail to handle Example 4 from Section 2.4.2 correctlyboth conclude incorrectly that the gun was unloaded initially and that Fred died during the waiting <ref> [ Baker, 1991 ] </ref> . Many methods proposed in the literature have trouble dealing with the indirect effects of actions. <p> Theorem 3.2 Let D be any finite, consistent domain and let R (D) be defined as before. For any value proposition ff, R (D) j= R (ff) () D entails ff. 3.5 Translation into Baker's Approach 3.5.1 Review of Baker's Approach Baker's approach to reasoning about action <ref> [ Baker, 1991 ] </ref> makes it possible to write axioms for the direct effects of actions and the domain constraints in the situation calculus and obtain the effect of appropriate frame axioms by circumscription. We will first illustrate Baker's approach with an example and point out its salient features. <p> Instead of focusing on individual examples, our work yields three classes of successful formalizations. Finally, the technically most difficult resultthe soundness and completeness of the formalization based on Baker's approachshows how to apply the methods of <ref> [ Baker, 1991 ] </ref> in a general setting. When we try to apply the method of this chapter to other formalizations of reasoning about action, we may expect two kinds of outcomes. One is that we see that there is a simple translation from A that is sound and complete. <p> In particular, all the value propositions of D are true in M . 2 Theorem 4.5 follows from Lemmas 4.7 and 4.8. 2 60 Chapter 5 Two Counterexamples 5.1 Introduction In this chapter, we describe two limitations of the method of <ref> [ Baker, 1991 ] </ref> that were uncovered while investigating its applicability to nondeterministic actions: in the presence of such actions, neither does Baker's method allow us to draw some intuitively plausible conclusions nor does it generate the appropriate existence of situations axiom. <p> For the formal definition of the syntax and semantics of nested abnormality theories, the reader is referred to the Appendix. 6.3 Translating from AR into NATs In this section, we show how to transform a domain description in AR into a nested abnormality theory. We use some ideas from <ref> [ Baker, 1991 ] </ref> in the translation. Note however that there are several differences from the formalization in [ Baker, 1991 ] for instance, the statement of the existence of situations principle is simplified here. <p> We use some ideas from <ref> [ Baker, 1991 ] </ref> in the translation. Note however that there are several differences from the formalization in [ Baker, 1991 ] for instance, the statement of the existence of situations principle is simplified here. <p> Recognizing the role of this principle was a major contribution of <ref> [ Baker, 1991 ] </ref> . Constraints represent exceptions to this default. For instance, the constraint H olds (Walking; s) H olds (Alive; s) (6.3) shows that there is no situation in which Walking is true and Alive is false. <p> Similarly, in the nested abnormality theory fiD, the translations of the value propositions form a separate group of axioms that is not placed in the range of any circumscriptions. The use of nested abnormality theories, instead of conjunctions of circumscriptions as in <ref> [ Baker, 1991 ] </ref> and [ Lifschitz, 1991 ] , leads to a simpler and more natural presentation of Baker's method. <p> The following NAT formalizes an extended version of the Yale shooting prob 113 lem from <ref> [ Baker, 1991 ] </ref> . <p> Note that if z includes function constants, SCAN cannot be applied . For instance, since Baker's circumscriptive approach <ref> [ Baker, 1991 ] </ref> involves varying the Result function, it cannot be used directly with SCAN. 117 An implementation of SCAN has been developed by Engel and Ohlbach 2 . We can apply this system for computing the circumscriptions for Examples 1, 2 and 3.
Reference: [ Baral and Gelfond, 1993 ] <author> Chitta Baral and Michael Gelfond. </author> <title> Representing concurrent actions in extended logic programming. </title> <booktitle> In Proc. of IJCAI-93, </booktitle> <pages> pages 866-871, </pages> <year> 1993. </year>
Reference: [ Bidoit and Froidevaux, 1988 ] <author> Nicole Bidoit and Christine Froidevaux. </author> <title> Negation by default and nonstratifiable logic programs. </title> <type> Technical Report 437, </type> <institution> Universite Paris XI, </institution> <year> 1988. </year>
Reference-contexts: A recent survey of autoepistemic logic can be found in [ Konolige, 1993 ] . 11 2.5.4 Logic Programming Nonmonotonicity in logic programs arises from the use of the negation as failure operator not. A close connection between default theories and logic programs has been observed <ref> [ Bidoit and Froidevaux, 1988 ] </ref> .
Reference: [ Bledsoe and Feng, 1993 ] <author> Woodrow Bledsoe and Guohui Feng. </author> <title> Set-Var. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 11 </volume> <pages> 293-314, </pages> <year> 1993. </year>
Reference: [ Boyer and Moore, 1988 ] <author> Robert Boyer and Strother Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: For example, the logic programming interpreter XOLDT [ Chen and Warren, 1992 ] is put to such use in [ Lifschitz et al., 1993 ] , the abductive procedure SLD-NFA in [ Denecker and De Schreye, 1993 ] , and the theorem prover of <ref> [ Boyer and Moore, 1988 ] </ref> in [ Subramanian, 1993 ] . In [ Thielscher, 1994a ] , the language A is related to the ideas of [ Sandewall, 1992 ] . In many ways, the expressive possibilities of A are limited.
Reference: [ Brewka and Hertzberg, 1993 ] <author> Gerhard Brewka and Joachim Hertzberg. </author> <title> How to do things with worlds-on formalizing actions and plans. </title> <journal> Journal of Logic and Computation, </journal> <volume> 3(5) </volume> <pages> 517-532, </pages> <year> 1993. </year>
Reference-contexts: Because of this, they get unintuitive conclusions when description of the starting world is incomplete. Winslett [1988] suggests modifying the Ginsberg and Smith approach to use possible models. However, even this approach has recently been criticized <ref> [ Brewka and Hertzberg, 1993 ] </ref> . Sandewall's filter preferential entailment [ Sandewall, 1989 ] modifies chronological minimization by changing the definition of preferred models. Also, of his preferred models, he considers only those which satisfy the observation axioms, i.e. those axioms specifying which fluents hold at specific times.
Reference: [ Chen and Warren, 1992 ] <author> Weidong Chen and David S. Warren. </author> <title> A goal-oriented approach to computing well-founded semantics. </title> <editor> In Krzysztof Apt, editor, </editor> <booktitle> Proc. Joint Int'l Conf. and Symp. on Logic Programming, </booktitle> <pages> pages 589-603, </pages> <year> 1992. </year>
Reference-contexts: If a theorem prover, or a query evaluation procedure, is available for the target language of such a translation, then it becomes possible to use the translation for the automation of reasoning about action. For example, the logic programming interpreter XOLDT <ref> [ Chen and Warren, 1992 ] </ref> is put to such use in [ Lifschitz et al., 1993 ] , the abductive procedure SLD-NFA in [ Denecker and De Schreye, 1993 ] , and the theorem prover of [ Boyer and Moore, 1988 ] in [ Subramanian, 1993 ] .
Reference: [ Crawford and Etherington, 1992 ] <author> James Crawford and David Etherington. </author> <title> Formalizing reasoning about change: A qualitative reasoning approach. </title> <booktitle> In Proc. AAAI-92, </booktitle> <pages> pages 577-583, </pages> <year> 1992. </year>
Reference-contexts: Such a method of excluding the observations from the minimization was proposed by Sandewall [1989] in the context of chronological minimization [1988] and by Crawford and Etherington <ref> [ Crawford and Etherington, 1992 ] </ref> in the context of avoiding interference between minimizations solving the frame and the qualification problems. Let us now see how we can apply this idea to the examples.
Reference: [ Davis, 1991 ] <author> Ernest Davis. </author> <title> Representations of Commonsense Knowledge. </title> <publisher> Morgan Kauf--mann, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference: [ Denecker and De Schreye, 1993 ] <author> Mark Denecker and Danny De Schreye. </author> <title> Representing incomplete knowledge in abductive logic programming. </title> <editor> In Dale Miller, editor, </editor> <booktitle> Logic Programming: Proceedings of the 1993 Int'l Symposium, </booktitle> <pages> pages 147-163, </pages> <year> 1993. </year>
Reference-contexts: The three translations discussed in this chapter were first reported in [ Kartha, 1993 ] . Translations from A into abductive logic programming in can be found in [ Dung, 1993 ] and <ref> [ Denecker and De Schreye, 1993 ] </ref> , and into equational logic programming in [ Thielscher, 1994b ] . <p> For example, the logic programming interpreter XOLDT [ Chen and Warren, 1992 ] is put to such use in [ Lifschitz et al., 1993 ] , the abductive procedure SLD-NFA in <ref> [ Denecker and De Schreye, 1993 ] </ref> , and the theorem prover of [ Boyer and Moore, 1988 ] in [ Subramanian, 1993 ] . In [ Thielscher, 1994a ] , the language A is related to the ideas of [ Sandewall, 1992 ] . <p> Also, all actions are assumed to have determinisitic effects. Such expressive limitations of A have led researchers to enhance it in various ways. Dung [1993] proposed a relational version of A, in which fluents and actions may have arguments. In <ref> [ Denecker and De Schreye, 1993 ] </ref> and [ Thielscher, 1994b ] , dialects of A are outlined in which one can describe actions with nondeterministic effects. Baral and Gelfond [1993] extend A by an operator for the concurrent execution of a set of actions.
Reference: [ Dijkstra and Scholten, 1990 ] <author> E. W. Dijkstra and C. Scholten. </author> <title> Predicate Calculus and Program Semantics. </title> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: The symbol denotes subset (not necessarily proper) and denotes proper subset. The expression `iff' stands for `if and only if'. The end of a proof will be denoted by 2. In some cases, proofs are presented in the calculational style of <ref> [ Dijkstra and Scholten, 1990 ] </ref> and [ Gries and Schneider, 1993 ] . 16 Chapter 3 Translations from A 3.1 Introduction In this chapter, we consider three translations from A, a simple declarative language for representing actions that was introduced in [ Gelfond and Lifschitz, 1993 ] and prove the
Reference: [ Dung, 1993 ] <author> Phan Minh Dung. </author> <title> Representing actions in logic programming and its applications in database updates. </title> <booktitle> In Logic Programming: Proceedings of the Tenth Int'l Conf. on Logic Programming, </booktitle> <pages> pages 222-238, </pages> <year> 1993. </year>
Reference-contexts: The three translations discussed in this chapter were first reported in [ Kartha, 1993 ] . Translations from A into abductive logic programming in can be found in <ref> [ Dung, 1993 ] </ref> and [ Denecker and De Schreye, 1993 ] , and into equational logic programming in [ Thielscher, 1994b ] .
Reference: [ Elkan, 1992 ] <author> Charles Elkan. </author> <title> Reasoning about action in first-order logic. </title> <booktitle> In Proceedings of the Ninth Biennial Conference of the Canadian Society for Computational Studies of Intelligence (CSCSI'92), </booktitle> <address> Vancouver, Canada. </address> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: [ Etherington et al., 1985 ] <author> David Etherington, Robert Mercer, and Raymond Reiter. </author> <title> On the adequacy of predicate circumscription for closed world reasoning. </title> <journal> Computational Intelligence, </journal> <volume> 1 </volume> <pages> 11-15, </pages> <year> 1985. </year>
Reference-contexts: Model-theoretically, this means that we focus attention on those models where the extent of the circumscribed predicate is minimal. (The reader who is interested in a precise definition of circumscription and the minimal models is referred to the Appendix.) 10 In <ref> [ Etherington et al., 1985 ] </ref> , Etherington, Mercer and Reiter pointed out the inabil-ity of predicate circumscription to derive new positive ground instances of any predicate. Formula circumscription, introduced in [ McCarthy, 1986 ] does not suffer from this limitation.
Reference: [ Etherington, 1987 ] <author> David Etherington. </author> <title> A semantics for default logic. </title> <booktitle> In Proc. IJCAI-87, </booktitle> <pages> pages 495-498, </pages> <year> 1987. </year>
Reference-contexts: Reiter then defines the notion of extensions, which are (informally) meant to capture the theories sanctioned by these defaults. One of the omissions of Reiter's paper was a semantics for default logic. In <ref> [ Etherington, 1987 ] </ref> , Etherington attempts to remedy this omission. An alternative semantics, similar to Etherington's, was given by Guerreiro and Casanova [1990]. A close connection between default logic and autoepistemic logic was established in [ Kono-lige, 1988 ] .
Reference: [ Evans, 1989 ] <author> Chris Evans. </author> <title> Negation-as-failure as an approach to the Hanks and McDer-mott problem. </title> <booktitle> In Proc. of the Second Int'l Symp. on Artificial Intelligence, </booktitle> <year> 1989. </year>
Reference: [ Fikes and Nilsson, 1971 ] <author> Richard Fikes and Nils Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2(3-4):189-208, </volume> <year> 1971. </year>
Reference: [ Finger, 1986 ] <author> Jeffrey Finger. </author> <title> Exploiting constraints in design synthesis. </title> <type> PhD thesis, </type> <institution> Stan-ford University, </institution> <year> 1986. </year>
Reference-contexts: 2.4 Problems in Reasoning About Actions 2.4.1 The Frame, Qualification and Ramification Problems In this section, we briefly discuss three important problems that arise in reasoning about actions: the frame problem [ McCarthy and Hayes, 1969 ] , the qualification problem [ Mc-Carthy, 1977 ] , and the ramification problem <ref> [ Finger, 1986 ] </ref> . We will use the example introduced in Section 2.3.1 to illustrate the frame problem. Suppose that we are also given that the car was in the garage initially.
Reference: [ Gabbay and Ohlbach, 1992 ] <author> Dov Gabbay and Hans J. Ohlbach. </author> <title> Quantifier elimination in second-order predicate logic. </title> <editor> In Bernhard Nebel, Charles Rich, and William Swartout, editors, </editor> <booktitle> Proc. of the Third Int'l Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <year> 1992. </year>
Reference-contexts: Formula circumscription, introduced in [ McCarthy, 1986 ] does not suffer from this limitation. The main technical idea here was to vary other predicates and functions, in addition to the predicate being minimized. The SCAN algorithm <ref> [ Gabbay and Ohlbach, 1992 ] </ref> and the SET-VAR method of Bledsoe and Feng [1993] can be used for computing circumscriptions. <p> One of the two methods for computing circumscriptions employed here is a generalization of predicate completion [ Lifschitz, 1993a ] and the other is based on the SCAN algorithm <ref> [ Gabbay and Ohlbach, 1992 ] </ref> . We will formalize the examples using NATs. The formalization is essentially the same as that given in Section 8.2. <p> We see that syntactic methods of computing circumscriptions can be employed to generate the necessary frame axioms. Similar syntactic methods can be employed for computing the the effect of the cir cumscriptions in Examples 2 and 3. 8.3.2 SCAN SCAN <ref> [ Gabbay and Ohlbach, 1992 ] </ref> is an algorithm for eliminating second-order quantifiers over predicate variables P 1 ; : : : ; P n in formulae of the form 9P 1 : : : P n , where is a first-order formula.
Reference: [ Gelfond and Lifschitz, 1991 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. New Generation Computing, </title> <address> 9(3,4):365-385, </address> <year> 1991. </year>
Reference: [ Gelfond and Lifschitz, 1993 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Representing ac-tion and change by logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 17 </volume> <pages> 301-322, </pages> <year> 1993. </year>
Reference-contexts: Conclusion: The gun is loaded in the initial situation. Note that there are methods that can solve temporal projection problems, but which give incorrect results with problems such as the above. Another possibility is reasoning about alternate futures (counterfactual reasoning). This is illustrated by the following example from <ref> [ Gelfond and Lifschitz, 1993 ] </ref> . Example 5. This is the same as Example 4, except that now we want to draw a different conclusion. <p> proofs are presented in the calculational style of [ Dijkstra and Scholten, 1990 ] and [ Gries and Schneider, 1993 ] . 16 Chapter 3 Translations from A 3.1 Introduction In this chapter, we consider three translations from A, a simple declarative language for representing actions that was introduced in <ref> [ Gelfond and Lifschitz, 1993 ] </ref> and prove the soundness and completeness of the translations. We first review the syntax and semantics of A in Section 3.2. <p> Sections 3.3, 3.4 and 3.5 present reviews of the approaches of Pednault [1989], Reiter [1991] and Baker [1991] and give sound and complete translations from A based on these approaches. 3.2 The Language A In this section, we describe the language A introduced in <ref> [ Gelfond and Lifschitz, 1993 ] </ref> . The reader who is interested in more examples and motivation is referred to that paper. Consider two disjoint nonempty sets of symbols, called fluent names and action names. A fluent expression is a fluent name possibly preceded by :. <p> = A ^ affected F;A (s))] (3.24) where affected F;A (s) = (precond + F;A (s) ^ :H olds (F; s)) _ (precond F;A (s) ^ H olds (F; s)): (3.25) Note that this lemma characterizes Ab completely. 29 3.6 Related Work on A The language A is introduced in <ref> [ Gelfond and Lifschitz, 1993 ] </ref> and a new method for representing actions in logic programming is specified as a translation from a subset of A into a logic programming language, and the translation is proved to be sound relative to the semantics of A. <p> An example of the second kind of outcome, the translation from A into the language of logic programs presented in <ref> [ Gelfond and Lifschitz, 1993 ] </ref> is incomplete. Turner [1994] exhibits a sound and complete translation from A into the language of disjunctive logic programs. As noted before, the expressive possibilities of the language A are limited. <p> The syntax of the new action language is described in Section 4.2. Examples illustrating the use of the language are provided in Section 4.3, and its semantics is defined in Section 4.4. In Section 4.5, we study the properties of AR . In Section 4.6, the language A from <ref> [ Gelfond and Lifschitz, 1993 ] </ref> is embedded into AR . 4.2 Syntax of AR 4.2.1 Formulae and Propositions To be precise, AR , like A, is not a single language, but rather a family of languages. <p> A similar fact about the language A is stated in [ Lifschitz, 1993c ] as Proposition 3. 4.6 Relation to A We claimed in Section 4.3 that the language A from <ref> [ Gelfond and Lifschitz, 1993 ] </ref> can be viewed as a subset of AR . Now this assertion can be given a precise meaning.
Reference: [ Gelfond et al., 1991a ] <author> Michael Gelfond, Vladimir Lifschitz, Halina Przymusi nska, and Miroslaw Truszczy nski. </author> <title> Disjunctive defaults. </title> <editor> In James Allen, Richard Fikes, and Erik Sandewall, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proc. of the Second Int'l Conf., </booktitle> <pages> pages 230-237, </pages> <year> 1991. </year>
Reference-contexts: An alternative semantics, similar to Etherington's, was given by Guerreiro and Casanova [1990]. A close connection between default logic and autoepistemic logic was established in [ Kono-lige, 1988 ] . A generalization of the notion of a default is that of a disjunctive default, introduced in <ref> [ Gelfond et al., 1991a ] </ref> .
Reference: [ Gelfond et al., 1991b ] <author> Michael Gelfond, Vladimir Lifschitz, and Arkady Rabinov. </author> <title> What are the limitations of the situation calculus? In Robert Boyer, editor, Automated Reasoning: </title> <booktitle> Essays in Honor of Woody Bledsoe. </booktitle> <publisher> Kluwer Academic, </publisher> <address> Dordrecht, </address> <year> 1991. </year>
Reference-contexts: It is thus worthwhile to study these these difficulties in the context of situation calculus before moving to richer temporal formalisms. 5 * A closer study <ref> [ Gelfond et al., 1991b ] </ref> reveals that many of the criticisms raised against the situation calculus are not justifiedthere the authors show how to formalize actions with time durations, actions with delayed effects, simple forms of concurrent actions etc. within the framework of the situation calculus.
Reference: [ Gelfond, 1989 ] <author> Michael Gelfond. </author> <title> Autoepistemic logic and formalization of commonsense reasoning. </title> <editor> In Michael Reinfrank, Johan de Kleer, Matthew Ginsberg, and Erik Sande-wall, editors, </editor> <booktitle> Non-Monotonic Reasoning: 2nd International Workshop (Lecture Notes in Artificial Intelligence 346), </booktitle> <pages> pages 176-186. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference: [ Ginsberg and Smith, 1988a ] <author> Matthew L. Ginsberg and David E. Smith. </author> <title> Reasoning about action I: a possible worlds approach. </title> <journal> Artificial Intelligence, </journal> <volume> 35(2) </volume> <pages> 165-195, </pages> <year> 1988. </year>
Reference: [ Ginsberg and Smith, 1988b ] <author> Matthew L. Ginsberg and David E. Smith. </author> <title> Reasoning about action II: the qualification problem. </title> <journal> Artificial Intelligence, </journal> <volume> 35(3) </volume> <pages> 311-342, </pages> <year> 1988. </year>
Reference-contexts: There, other enhancements for representing concurrent actions and continuous change are also proposed. The systematic study of reasoning about actions needs to be extended to handle these additional expressive capabilities. 9.2.2 Qualification and Ramification Constraints As pointed out by <ref> [ Ginsberg and Smith, 1988b ] </ref> and [ Lin and Reiter, 1994 ] , formulae which are syntactically indistinguishable from domain constraints (that are responsible for the indirect effect of actions) can also be used to express indirect restrictions on the performability of an action.
Reference: [ Giunchiglia and Lifschitz, 1995 ] <author> Enrico Giunchiglia and Vladimir Lifschitz. </author> <title> Dependent fluents. </title> <type> Manuscript, </type> <year> 1995. </year>
Reference-contexts: How to prevent such overly strong applications of the commonsense law of inertia is another topic that deserves further study. The notion of dependent fluents <ref> [ Giunchiglia and Lifschitz, 1995 ] </ref> is a step in this direction. 9.3 Final Words The basic approach in this thesis has been to propose a syntax and semantics for action languages and to view different approaches to reasoning about action as translations from such languages.
Reference: [ Giunchiglia et al., 1995 ] <author> Enrico Giunchiglia, G. Neelakantan Kartha, and Vladimir Lifs-chitz. </author> <title> Actions with indirect effects. </title> <type> Manuscript, </type> <year> 1995. </year>
Reference-contexts: We will now examine two additional properties of domains in AR. The proofs of these properties can be found in <ref> [ Giunchiglia et al., 1995 ] </ref> . 7.4.1 Elimination of Nonpropositional Fluents Let D be a domain description, and let S be a subset of fluents in the language of D such that every fluent in S has finitely many values.
Reference: [ Green, 1969 ] <author> C Green. </author> <title> Applications of theorem proving to problem solving. </title> <booktitle> In Proc. of IJCAI-69, </booktitle> <pages> pages 219-239, </pages> <year> 1969. </year>
Reference-contexts: Turner [1994] represents actions in extended disjunctive logic programs. 2.6.3 Approaches Based on Autoepistemic Logic Gelfond [1989] shows how autoepistemic logic can be used to formalize reasoning about actions. 2.6.4 Other Approaches One of the first programs to reason about action is described in Cordell Green's work <ref> [ Green, 1969 ] </ref> . This program used the situation calculus and resolution to do planning. The STRIPS language of Fikes and Nilsson [1971] was another early attempt to formalize descriptions of actions.
Reference: [ Gries and Schneider, 1993 ] <author> David Gries and Fred B. Schneider. </author> <title> A Logical Approach to Discrete Math. </title> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: The symbol denotes subset (not necessarily proper) and denotes proper subset. The expression `iff' stands for `if and only if'. The end of a proof will be denoted by 2. In some cases, proofs are presented in the calculational style of [ Dijkstra and Scholten, 1990 ] and <ref> [ Gries and Schneider, 1993 ] </ref> . 16 Chapter 3 Translations from A 3.1 Introduction In this chapter, we consider three translations from A, a simple declarative language for representing actions that was introduced in [ Gelfond and Lifschitz, 1993 ] and prove the soundness and completeness of the translations.
Reference: [ Guerreiro and Casanova, 1990 ] <author> Ramiro Guerreiro and Marco Casanova. </author> <title> An alternative semantics for default logic. </title> <booktitle> Preprint, The Third International Workshop on Nonmonotonic Reasoning, </booktitle> <address> South Lake Tahoe, </address> <year> 1990. </year>
Reference: [ Hanks and McDermott, 1987 ] <author> Steve Hanks and Drew McDermott. </author> <title> Nonmonotonic logic and temporal projection. </title> <journal> Artificial Intelligence, </journal> <volume> 33(3) </volume> <pages> 379-412, </pages> <year> 1987. </year> <month> 149 </month>
Reference-contexts: It is easy to see that (2.4) follows from T 2 , as desired. Though this idea (essentially due to McCarthy) is simple and attractive, it does not always yield the expected results, as illustrated by the the Yale Shooting Problem <ref> [ Hanks and McDermott, 1987 ] </ref> (Example 1 from Section 2.4.2). The problem is that if we formalize this problem using the circumscriptive approach explained above, in addition to the intended model, there is another model where the extent of Ab is minimal. <p> The major change suggested by Baker is to employ a new circumscription policy: to minimize Ab while varying Result and S 0 (as opposed to varying H olds, as is done in <ref> [ Hanks and McDermott, 1987 ] </ref> ). For this to work correctly, Baker includes an existence of situations axiom, which says that corresponding to each set of fluents, there is a situation in which exactly these fluents hold. <p> For instance, domain constraints can be represented in AR . Let us consider an example to illustrate this important expressive capability of AR . The Yale Shooting domain <ref> [ Hanks and McDermott, 1987 ] </ref> can be encoded in A as follows: initially :Loaded; initially Alive; Load causes Loaded; Shoot causes :Alive if Loaded; Shoot causes :Loaded: (4.1) Recall that in A, any combination of fluent values represents a possible state of the system.
Reference: [ Kartha and Lifschitz, 1994 ] <author> G. Neelakantan Kartha and Vladimir Lifschitz. </author> <title> Actions with indirect effects. </title> <editor> In Jon Doyle, Erik Sandewall, and Piero Torasso, editors, </editor> <booktitle> Proc. of the Fourth Int'l Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 341-350, </pages> <year> 1994. </year>
Reference-contexts: The language AR is a subset of the language AR 0 introduced in <ref> [ Kartha and Lifschitz, 1994 ] </ref> the latter has one additional kind of propositions called release propositions. Syntactically, they are of the form A releases F if P; (4.9) where A is an action, F a fluent which belongs to the frame, and P a formula. <p> 1 ^ :F 2 : 103 The following is a model of D 0 : is defined only on * and A and it is defined on these as follows: (*) = ; However, this is not a model of D. 7.5 Discussion It is interesting to compare release propositions <ref> [ Kartha and Lifschitz, 1994 ] </ref> with indeterminate effect propositions. Note that though release propositions and indeterminate effect propositions are syntactically similar, the semantics given to them in AR 0 and AR differ.
Reference: [ Kartha and Lifschitz, 1995 ] <author> G. Neelakantan Kartha and Vladimir Lifschitz. </author> <title> A simple formalization of actions using circumscription. </title> <booktitle> In Proc. of IJCAI-95, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: Frame axioms of a similar and easy to comprehend form were generated for the other fluents also. In Example 3, SCAN was used to generate the frame axioms in a similar way. 8.4 Discussion The translation to NATS in Section 8.2 is based on the formalization presented in <ref> [ Kartha and Lifschitz, 1995 ] </ref> . As noted before, the idea behind this formalization is closest to that of Winslett [1988]. The main difference is that Winslett's formalization is in terms of theory update, whereas this formalization includes the full expressive power of the situation calculus.
Reference: [ Kartha, 1993 ] <author> G. Neelakantan Kartha. </author> <title> Soundness and completeness theorems for three formalizations of action. </title> <booktitle> In Proc. of IJCAI-93, </booktitle> <pages> pages 724-729, </pages> <year> 1993. </year>
Reference-contexts: The three translations discussed in this chapter were first reported in <ref> [ Kartha, 1993 ] </ref> . Translations from A into abductive logic programming in can be found in [ Dung, 1993 ] and [ Denecker and De Schreye, 1993 ] , and into equational logic programming in [ Thielscher, 1994b ] .
Reference: [ Kartha, 1994 ] <author> G. Neelakantan Kartha. </author> <title> Two counterexamples related to Baker's approach to the frame problem. </title> <journal> Artificial Intelligence, </journal> <volume> 69 </volume> <pages> 379-391, </pages> <year> 1994. </year>
Reference-contexts: In the next chapter, we present a quick review of NATs and then present a sound and complete translation from AR into NATs. The two counterexamples were first reported in <ref> [ Kartha, 1994 ] </ref> . 5.6 Proofs 5.6.1 Proof of Theorem 5.1 We need to show that M as defined in Section 5.2 is a model of CIRC (D 1 ; Ab; Result; S 0 ). Assume that M is not a minimal model with respect to Ab;Result;S 0 .
Reference: [ Kautz, 1986 ] <author> Henry Kautz. </author> <title> The logic of persistence. </title> <booktitle> In Proc. of AAAI-86, </booktitle> <pages> pages 401-405, </pages> <year> 1986. </year>
Reference: [ Konolige, 1988 ] <author> Kurt Konolige. </author> <title> On the relation between default and autoepistemic logic. </title> <journal> Artificial Intelligence, </journal> <volume> 35 </volume> <pages> 343-382, </pages> <year> 1988. </year>
Reference-contexts: In [ Shvarts, 1990 ] , it was noticed that if we take the McDermott's nonmono-tonic logic and base it on the modal logic Weak S5 instead of S5, we get precisely Moore's autoepistemic logic. A close connection between autoepistemic logic and default logic was established in <ref> [ Konolige, 1988 ] </ref> . A recent survey of autoepistemic logic can be found in [ Konolige, 1993 ] . 11 2.5.4 Logic Programming Nonmonotonicity in logic programs arises from the use of the negation as failure operator not.
Reference: [ Konolige, 1993 ] <author> Kurt Konolige. </author> <title> Autoepistemic logic. In D.M. </title> <editor> Gabbay, C.J. Hogger, and J.A. Robinson, editors, </editor> <booktitle> The Handbook of Logic in AI and Logic Programming, </booktitle> <volume> volume 3, </volume> <pages> pages 217-295. </pages> <publisher> Oxford University Press, </publisher> <year> 1993. </year>
Reference-contexts: A close connection between autoepistemic logic and default logic was established in [ Konolige, 1988 ] . A recent survey of autoepistemic logic can be found in <ref> [ Konolige, 1993 ] </ref> . 11 2.5.4 Logic Programming Nonmonotonicity in logic programs arises from the use of the negation as failure operator not. A close connection between default theories and logic programs has been observed [ Bidoit and Froidevaux, 1988 ] .
Reference: [ Kowalski and Sadri, 1994 ] <author> Robert Kowalski and Fariba Sadri. </author> <title> The situation calculus and event calculus compared. </title> <editor> In Maurice Bruynooghe, editor, </editor> <booktitle> Proc. of ILPS-94, </booktitle> <pages> pages 539-553, </pages> <year> 1994. </year>
Reference: [ Kowalski and Sergot, 1986 ] <author> Robert Kowalski and Marek Sergot. </author> <title> A logic-based calculus of events. </title> <journal> New Generation Computing, </journal> <volume> 4 </volume> <pages> 67-95, </pages> <year> 1986. </year>
Reference: [ Lifschitz et al., 1993 ] <author> Vladimir Lifschitz, Norman McCain, and Hudson Turner. </author> <title> Automated reasoning about action: A logic programming approach. </title> <editor> In Dale Miller, editor, </editor> <booktitle> Proc. of ILPS-93, </booktitle> <pages> page 641, </pages> <year> 1993. </year>
Reference-contexts: For example, the logic programming interpreter XOLDT [ Chen and Warren, 1992 ] is put to such use in <ref> [ Lifschitz et al., 1993 ] </ref> , the abductive procedure SLD-NFA in [ Denecker and De Schreye, 1993 ] , and the theorem prover of [ Boyer and Moore, 1988 ] in [ Subramanian, 1993 ] .
Reference: [ Lifschitz, 1987a ] <author> Vladimir Lifschitz. </author> <title> Formal theories of action. </title> <editor> In Frank M. Brown, editor, </editor> <booktitle> The Frame Problem in Artificial Intelligence, Proc. of the 1987 Workshop, </booktitle> <pages> pages 35-58, </pages> <year> 1987. </year>
Reference-contexts: Many methods proposed in the literature have trouble dealing with the indirect effects of actions. For instance, to get the intended conclusion in Example 3 from Section 2.4.2, the method of causal minimization <ref> [ Lifschitz, 1987a ] </ref> requires an axiom that specifies the effect of shooting on walking. Baker [1991] proposed a circumscriptive approach that could handle many of the 13 above problems correctly.
Reference: [ Lifschitz, 1987b ] <author> Vladimir Lifschitz. </author> <title> On the semantics of STRIPS. </title> <editor> In Michael Georgeff and Amy Lansky, editors, </editor> <booktitle> Reasoning about Actions and Plans, </booktitle> <pages> pages 1-9. </pages> <publisher> Morgan Kauf-mann, </publisher> <address> San Mateo, CA, </address> <year> 1987. </year> <month> 150 </month>
Reference: [ Lifschitz, 1989 ] <author> Vladimir Lifschitz. </author> <title> Benchmark problems for formal non-monotonic rea-soning, version 2.00. </title> <editor> In Michael Reinfrank, Johan de Kleer, Matthew Ginsberg, and Erik Sandewall, editors, </editor> <booktitle> Non-Monotonic Reasoning: 2nd International Workshop (Lecture Notes in Artificial Intelligence 346), </booktitle> <pages> pages 202-219. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: A domain description, or simply domain, is a set of propositions (not necessarily finite). Example 1. The Blocks World domain D 1 , motivated by problem D4 from <ref> [ Lifschitz, 1989 ] </ref> , is defined as follows. The fluent names are Ontable and Inhand; the action names are Putdown, Pickup, Lower and Wait.
Reference: [ Lifschitz, 1990 ] <author> Vladimir Lifschitz. </author> <title> Frames in the space of situations. </title> <journal> Artificial Intelligence, </journal> <volume> 46 </volume> <pages> 365-376, </pages> <year> 1990. </year>
Reference-contexts: In the first model, the action of inserting the card cannot be executed. Example 2: Nonframe Fluents. There are two switches and a light; the light is on only when the switches are both on or both off <ref> [ Lifschitz, 1990 ] </ref> . This system can be described using three propositional fluents Switch1, Switch2 and Light; only the first two belong to the frame. There are two action names, Toggle1 and Toggle2.
Reference: [ Lifschitz, 1991 ] <author> Vladimir Lifschitz. </author> <title> Towards a metatheory of action. </title> <editor> In James Allen, Richard Fikes, and Erik Sandewall, editors, </editor> <booktitle> Proc. of the Second Int'l Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 376-386, </pages> <year> 1991. </year>
Reference-contexts: Since we will have occasion later to discuss in detail the advan-tages and disadvantages of Baker's method, we will postpone discussion of this method. Using Baker's ideas, Lifschitz [1991] proves a theorem which is applicable to a whole class of domains involving situations and actions. As noted in <ref> [ Lifschitz, 1991 ] </ref> , the theorem suffers from some limitations. For instance, the assumptions of the theorem make it impossible to have initial conditions in the axiom set. Also, the effect of each action is assumed to make fluents true, never false. <p> Similarly, in the nested abnormality theory fiD, the translations of the value propositions form a separate group of axioms that is not placed in the range of any circumscriptions. The use of nested abnormality theories, instead of conjunctions of circumscriptions as in [ Baker, 1991 ] and <ref> [ Lifschitz, 1991 ] </ref> , leads to a simpler and more natural presentation of Baker's method.
Reference: [ Lifschitz, 1993a ] <author> Vladimir Lifschitz. </author> <title> Circumscription. In D.M. </title> <editor> Gabbay, C.J. Hogger, and J.A. Robinson, editors, </editor> <booktitle> The Handbook of Logic in AI and Logic Programming, </booktitle> <volume> volume 3, </volume> <pages> pages 297-352. </pages> <publisher> Oxford University Press, </publisher> <year> 1993. </year>
Reference-contexts: The SCAN algorithm [ Gabbay and Ohlbach, 1992 ] and the SET-VAR method of Bledsoe and Feng [1993] can be used for computing circumscriptions. A recent survey of circumscription can be found in <ref> [ Lifschitz, 1993a ] </ref> . 2.5.2 Default Logic Reiter's default logic [ Reiter, 1980 ] augments a first order theory with a set of default rules. <p> We present examples to illustrate that in many cases, we will be able to eliminate all their second order quantifiers using existing techniques for computing circumscriptions. One of the two methods for computing circumscriptions employed here is a generalization of predicate completion <ref> [ Lifschitz, 1993a ] </ref> and the other is based on the SCAN algorithm [ Gabbay and Ohlbach, 1992 ] . We will formalize the examples using NATs. The formalization is essentially the same as that given in Section 8.2. <p> s) _ G R (a; s) _ H R (a; s); :F R (a; s) _ :H R (a; s); g: Here UNA stands for the uniqueness names axioms for aspects. 8.3.1 Completion Formalizing actions using nested abnormality theories has the important advantage that the syntactic methods for computing circumscriptions <ref> [ Lifschitz, 1993a ] </ref> can be applied. In particular, it is possible in many cases to compute the effects of ramifications using such syntactic methods. We now illustrate this with an example. <p> The terminology and presentation follows <ref> [ Lifschitz, 1993a ] </ref> . The reader is referred there for motivating examples and proofs of the theorems. In each of the propositions below, the number in parantheses identifies the section where the proposition can be found in [ Lifschitz, 1993a ] . Our first task is to define circumscription. <p> The terminology and presentation follows <ref> [ Lifschitz, 1993a ] </ref> . The reader is referred there for motivating examples and proofs of the theorems. In each of the propositions below, the number in parantheses identifies the section where the proposition can be found in [ Lifschitz, 1993a ] . Our first task is to define circumscription. For any predicate symbols P; Q of the same arity, let P = Q stand for 8x (P (x) Q (x)) and P Q stand for 8x (P (x) Q (x)).
Reference: [ Lifschitz, 1993b ] <author> Vladimir Lifschitz. </author> <title> A language for describing actions. </title> <booktitle> In Working Papers of the Second Symposium on Logical Formalizations of Commonsense Reasoning, </booktitle> <pages> pages 103-113, </pages> <year> 1993. </year>
Reference-contexts: Baral and Gelfond [1993] extend A by an operator for the concurrent execution of a set of actions. The dialect of A defined in <ref> [ Lifschitz, 1993b ] </ref> provides symbols for time intervals. 3.7 Discussion The first two translations we provide use first order methods for reasoning about action, whereas the third one uses the nonmonotonic formalism of circumscription.
Reference: [ Lifschitz, 1993c ] <author> Vladimir Lifschitz. </author> <title> Restricted monotonicity. </title> <booktitle> In Proc. of the Eleventh National Conference of Artificial Intelligence, </booktitle> <pages> pages 432-437, </pages> <year> 1993. </year>
Reference-contexts: The challenge here is to have a formalization for handling the frame problem which will give the intuitively expected result. Another case of temporal projection is when the initial situation is not completely specified. The following example, based on a similar example due to Fangzhen Lin (reported in <ref> [ Lifschitz, 1993c ] </ref> ), belongs to this class of problems. 8 Example 2. Same as Example 1, except that condition 1 is missing from the problem de-scription. That is, it is not known whether or not the gun is loaded in the initial situation. <p> This is what one would intuitively expect, because an additional value proposition in a domain description expresses merely an additional assumption about the trajectory under consideration. 51 The observation made above is a restricted monotonicity property in the sense of <ref> [ Lifschitz, 1993c ] </ref> . Propositions of all four types play the role of postulates, and value propositions play the role of sentences, assertions and parameters. A similar fact about the language A is stated in [ Lifschitz, 1993c ] as Proposition 3. 4.6 Relation to A We claimed in Section <p> 51 The observation made above is a restricted monotonicity property in the sense of <ref> [ Lifschitz, 1993c ] </ref> . Propositions of all four types play the role of postulates, and value propositions play the role of sentences, assertions and parameters. A similar fact about the language A is stated in [ Lifschitz, 1993c ] as Proposition 3. 4.6 Relation to A We claimed in Section 4.3 that the language A from [ Gelfond and Lifschitz, 1993 ] can be viewed as a subset of AR . Now this assertion can be given a precise meaning.
Reference: [ Lifschitz, 1995 ] <author> Vladimir Lifschitz. </author> <title> Nested abnormality theories. </title> <journal> Artificial Intelligence, </journal> <note> 1995. To appear. </note>
Reference-contexts: The framework of nested abnormality theories (NATs) <ref> [ Lifschitz, 1995 ] </ref> , by limiting the applicability of various circumscriptions to subsets of the theory under consideration, allows this kind of flexibility. In the next chapter, we present a quick review of NATs and then present a sound and complete translation from AR into NATs. <p> As noted in the previous chapter, we need to be able to exclude certain parts of the theory from the scope of the circumscription operator. We will use the formalism of nested abnormality theories <ref> [ Lifschitz, 1995 ] </ref> (NATs) for this purpose. <p> In Section 6.2, we briefly discuss the formalism of nested abnormality theories and in in Section 6.3, we present a sound and complete translation from AR to nested abnormality theories. 6.2 Nested Abnormality Theories The formalism of nested abnormality theories is introduced in <ref> [ Lifschitz, 1995 ] </ref> . Its use is demonstrated there by recasting several familiar applications of circumscription in its frameworkinheritance hierarchies, the domain closure assumption, and the causal minimization approach to the frame problem. <p> Both E and do not contain P or Z. If entails the two sentences A (P; Z) E P; then it entails the sentence CIRC (A (P; Z); P ; Z) A (P; Z) ^ P = E: A.2 Nested Abnormality Theories The following definitions are reproduced from <ref> [ Lifschitz, 1995 ] </ref> . Consider a language L of classical logic which may have variables of several sorts and higher-order variables. We assume that L does not include Ab among its symbols.
Reference: [ Lin and Reiter, 1994 ] <author> Fangzhen Lin and Raymond Reiter. </author> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation, Special Issue on Actions and Processes, </journal> <volume> 4(5) </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: Combining the ideas of [ Winslett, 1988 ] with the situation calculus is achieved by the use of NATs. Another closely related direction of research is described in [ Lin and Shoham, 1991 ] and <ref> [ Lin and Reiter, 1994 ] </ref> . Central to the formalization presented there is a minimality condition formulated in terms of models. <p> There, other enhancements for representing concurrent actions and continuous change are also proposed. The systematic study of reasoning about actions needs to be extended to handle these additional expressive capabilities. 9.2.2 Qualification and Ramification Constraints As pointed out by [ Ginsberg and Smith, 1988b ] and <ref> [ Lin and Reiter, 1994 ] </ref> , formulae which are syntactically indistinguishable from domain constraints (that are responsible for the indirect effect of actions) can also be used to express indirect restrictions on the performability of an action. <p> Can we not employ a standard (say first order) language, define a semantics for it that corresponds to our intuitions and carry out the study of actions within such a framework? This is the approach taken by Sandewall [1992], Lin, Shoham and Reiter <ref> [ Lin and Shoham, 1991; Lin and Reiter, 1994 ] </ref> . The answer to this question is twofold. Firstly, the syntax of action languages corresponds more closely to how we describe action domains and hence it is easier to encode various action domains using action languages.
Reference: [ Lin and Shoham, 1991 ] <author> Fangzhen Lin and Yoav Shoham. </author> <title> Provably correct theories of action. </title> <booktitle> In Proc. of the Ninth National Conference of Artificial Intelligence, </booktitle> <pages> pages 349-354, </pages> <year> 1991. </year>
Reference-contexts: Combining the ideas of [ Winslett, 1988 ] with the situation calculus is achieved by the use of NATs. Another closely related direction of research is described in <ref> [ Lin and Shoham, 1991 ] </ref> and [ Lin and Reiter, 1994 ] . Central to the formalization presented there is a minimality condition formulated in terms of models. <p> Can we not employ a standard (say first order) language, define a semantics for it that corresponds to our intuitions and carry out the study of actions within such a framework? This is the approach taken by Sandewall [1992], Lin, Shoham and Reiter <ref> [ Lin and Shoham, 1991; Lin and Reiter, 1994 ] </ref> . The answer to this question is twofold. Firstly, the syntax of action languages corresponds more closely to how we describe action domains and hence it is easier to encode various action domains using action languages.
Reference: [ Lin, 1995 ] <author> Fangzhen Lin. </author> <title> Embracing causality in theories of action. </title> <type> Manuscript, </type> <year> 1995. </year>
Reference: [ McCain and Turner, 1995 ] <author> Norman McCain and Hudson Turner. </author> <title> A causal theory of ramifications and qualifications. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Extending Theories of Action, </booktitle> <pages> pages 130-135, </pages> <year> 1995. </year>
Reference: [ McCarthy and Hayes, 1969 ] <author> John McCarthy and Patrick Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 4, </volume> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, Edinburgh, </publisher> <year> 1969. </year>
Reference-contexts: Kowalski and Sadri [1994] compare the situation calculus and the event calculus. 2.4 Problems in Reasoning About Actions 2.4.1 The Frame, Qualification and Ramification Problems In this section, we briefly discuss three important problems that arise in reasoning about actions: the frame problem <ref> [ McCarthy and Hayes, 1969 ] </ref> , the qualification problem [ Mc-Carthy, 1977 ] , and the ramification problem [ Finger, 1986 ] . We will use the example introduced in Section 2.3.1 to illustrate the frame problem.
Reference: [ McCarthy, 1977 ] <editor> John McCarthy. </editor> <booktitle> Epistemological problems of artificial intelligence. In Proc. of IJCAI-77, </booktitle> <pages> pages 1038-1044, </pages> <year> 1977. </year>
Reference-contexts: A consequence relation ` is is said to be nonmonotonic if it is not monotonic. The main nonmonotonic formalisms that have been proposed are circumscription <ref> [ McCarthy, 1977; McCarthy, 1980 ] </ref> , default logic [ Reiter, 1980 ] , nonmonotonic logic [ McDermott and Doyle, 1980 ] and autoepistemic logic [ Moore, 1985 ] . <p> How these formalisms can be applied to reasoning about action will be discussed in Section 2.6. 2.5.1 Circumscription In [ McCarthy, 1980 ] , McCarthy introduced the notion of predicate circumscription, which generalized domain circumscription introduced in his earlier paper <ref> [ McCarthy, 1977 ] </ref> . Intuitively, circumscribing a predicate in a sentence means assuming that its extent is as small as possible.
Reference: [ McCarthy, 1980 ] <author> John McCarthy. </author> <title> Circumscriptiona form of non-monotonic reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1-2):27-39, </volume> <year> 1980. </year>
Reference-contexts: A consequence relation ` is is said to be nonmonotonic if it is not monotonic. The main nonmonotonic formalisms that have been proposed are circumscription <ref> [ McCarthy, 1977; McCarthy, 1980 ] </ref> , default logic [ Reiter, 1980 ] , nonmonotonic logic [ McDermott and Doyle, 1980 ] and autoepistemic logic [ Moore, 1985 ] . <p> We now turn to a brief examination of each of these nonmonotonic formalisms. How these formalisms can be applied to reasoning about action will be discussed in Section 2.6. 2.5.1 Circumscription In <ref> [ McCarthy, 1980 ] </ref> , McCarthy introduced the notion of predicate circumscription, which generalized domain circumscription introduced in his earlier paper [ McCarthy, 1977 ] . Intuitively, circumscribing a predicate in a sentence means assuming that its extent is as small as possible.
Reference: [ McCarthy, 1986 ] <author> John McCarthy. </author> <title> Applications of circumscription to formalizing common sense knowledge. </title> <journal> Artificial Intelligence, </journal> <volume> 28(1) </volume> <pages> 89-116, </pages> <year> 1986. </year>
Reference-contexts: Formula circumscription, introduced in <ref> [ McCarthy, 1986 ] </ref> does not suffer from this limitation. The main technical idea here was to vary other predicates and functions, in addition to the predicate being minimized. <p> : : : ; A n that may contain the abnormality predicate Ab, and by a list of predicate and/or function constants 1 C 1 ; : : : ; C m that are described by the axioms and thus are allowed to vary in the process of circumscribing Ab <ref> [ McCarthy, 1986 ] </ref> . 1 Object constants are viewed as function constants of arity 0. 71 Such theories may be represented in the following syntactic form: C 1 ; : : : ; C m : A 1 ; : : : ; A n : (6.1) The expression (6.1) <p> m allowed to vary; we denote this circumscription by CIRC [A 1 ^ : : : ^ A n ; Ab; C 1 ; : : : ; C m ]: (6.2) Unfortunately, this is not general enough for the purpose of representing defaults, and prioritized circumscription is proposed in <ref> [ McCarthy, 1986 ] </ref> as a more general representation tool. In nested abnormality theories, we generalize (6.1) in a different way: each A i in (6.1) is allowed to be a block of form (6.1), so that axioms become nested. <p> As in <ref> [ McCarthy, 1986 ] </ref> , aspects will be used to distinguish between different kinds of abnormality. Consider a finite domain description D. <p> In this case, the domain constraint is said to be a qualification constraint, because it gives conditions under which an action can be performed. Another example of a qualification constraint is the one in the missionaries and cannibals puzzle <ref> [ McCarthy, 1986 ] </ref> : the number of missionaries on each side of the river is at least the number of cannibals on the same side. In general, we will have to represent both ramification and qualification constraints and reason with them.
Reference: [ McDermott and Doyle, 1980 ] <author> Drew McDermott and Jon Doyle. </author> <title> Nonmonotonic logic I. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1-2):41-72, </volume> <year> 1980. </year>
Reference-contexts: A consequence relation ` is is said to be nonmonotonic if it is not monotonic. The main nonmonotonic formalisms that have been proposed are circumscription [ McCarthy, 1977; McCarthy, 1980 ] , default logic [ Reiter, 1980 ] , nonmonotonic logic <ref> [ McDermott and Doyle, 1980 ] </ref> and autoepistemic logic [ Moore, 1985 ] . Logic programming, which was proposed around 1974, can also be viewed as a nonmonotonic formalism, though the close connection of logic programming to other nonmonotonic formalisms became clear only in the latter half of the 1980's.
Reference: [ McDermott, 1982a ] <author> Drew McDermott. </author> <title> Nonmonotonic logic II: Nonmonotonic modal theories. </title> <journal> Journal of the ACM, </journal> <volume> 29(1) </volume> <pages> 33-57, </pages> <year> 1982. </year>
Reference-contexts: But the formulation in this paper proved to have have many technical problems: for instance M p was not inconsistent with :p, where p is a proposition. In <ref> [ McDermott, 1982a ] </ref> , McDermott proposed defining a non-monotonic logic based on a modal logic, instead of first order logic. But it was found that when the modal logic is S5, his nonmonotonic logic reduces to monotonic S5.
Reference: [ McDermott, 1982b ] <author> Drew McDermott. </author> <title> A temporal logic for reasoning about processes and plans. </title> <journal> Cognitive Science, </journal> <volume> 6 </volume> <pages> 101-155, </pages> <year> 1982. </year>
Reference: [ Miller and Shanahan, 1994 ] <author> Rob Miller and Murray Shanahan. </author> <title> Narratives in the situation calculus. </title> <journal> Journal of Logic and Computation, Special Issue on Actions and Processes, </journal> <volume> 4(5) </volume> <pages> 511-530, </pages> <year> 1994. </year>
Reference: [ Moore, 1984 ] <author> Robert Moore. </author> <title> Possible-world semantics for autoepistemic logic. </title> <booktitle> In Non-Monotonic Reasoning Workshop, </booktitle> <pages> pages 344-354, </pages> <year> 1984. </year>
Reference-contexts: But it was found that when the modal logic is S5, his nonmonotonic logic reduces to monotonic S5. Moore [1985] proposed autoepistemic logic as a way out of some of the difficulties of McDermott's logic and and in <ref> [ Moore, 1984 ] </ref> gave a satisfactory semantics for it based on Kripke models. In [ Shvarts, 1990 ] , it was noticed that if we take the McDermott's nonmono-tonic logic and base it on the modal logic Weak S5 instead of S5, we get precisely Moore's autoepistemic logic.
Reference: [ Moore, 1985 ] <author> Robert Moore. </author> <title> Semantical considerations on nonmonotonic logic. </title> <journal> Artificial Intelligence, </journal> <volume> 25(1) </volume> <pages> 75-94, </pages> <year> 1985. </year>
Reference-contexts: The main nonmonotonic formalisms that have been proposed are circumscription [ McCarthy, 1977; McCarthy, 1980 ] , default logic [ Reiter, 1980 ] , nonmonotonic logic [ McDermott and Doyle, 1980 ] and autoepistemic logic <ref> [ Moore, 1985 ] </ref> . Logic programming, which was proposed around 1974, can also be viewed as a nonmonotonic formalism, though the close connection of logic programming to other nonmonotonic formalisms became clear only in the latter half of the 1980's.
Reference: [ Morris, 1988 ] <author> Paul Morris. </author> <title> The anomalous extension problem in default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 35(3) </volume> <pages> 383-399, </pages> <year> 1988. </year>
Reference: [ Myers and Smith, 1988 ] <author> Karen Myers and David Smith. </author> <title> The persistence of derived information. </title> <booktitle> In Proc. AAAI-88, </booktitle> <pages> pages 496-500, </pages> <year> 1988. </year>
Reference-contexts: This needs to be investigated further. 141 9.2.3 Dealing with Unwanted Persistence of Fluents Though we usually want the values of fluents to persist, there are situations where we do not want this to happen. The following example <ref> [ Myers and Smith, 1988 ] </ref> illustrates this. Example 2. If an object is on the table, it is baby-proof. Initially, Block A is on the table. Picking up an object causes it to be not on the table.
Reference: [ Pednault, 1989 ] <author> Edwin Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <editor> In Ronald Brachman, Hector Levesque, and Raymond Reiter, editors, </editor> <booktitle> Proc. of the First Int'l Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 324-332, </pages> <year> 1989. </year>
Reference-contexts: fOntableg; if Inhand 2 , ; otherwise, (Wait; ) = : It is easy to see, for instance, that initially Inhand; Ontable after Lower;Wait; :Inhand after Lower;Wait;Putdown; is entailed by D 1 . 3.3 Translation into Pednault's Scheme 3.3.1 Review of Pednault's Scheme In this section, we review Pednault's scheme <ref> [ Pednault, 1989 ] </ref> for generating the frame axioms. We will conform for the most part to the notation introduced in [ Reiter, 1991 ] .
Reference: [ Pinto and Reiter, 1993 ] <author> Javier A. Pinto and Raymond Reiter. </author> <title> Temporal reasoning in logic programming: A case for the situation calculus. </title> <booktitle> In Proc. ICLP-93, </booktitle> <pages> pages 203-221, </pages> <year> 1993. </year>
Reference: [ Pinto, 1994 ] <author> Javier A. Pinto. </author> <title> Temporal reasoning in the situation calculus. </title> <publisher> Ph. </publisher> <address> D. </address> <note> thesis, University of Toronto (available as Technical Report KRR-TR-94-1), 1994. 152 </note>
Reference-contexts: In addition, there has been a renewed interest in extending the situation calculus to make it more expressive. For instance, Reiter [1993] studies the use of induction in the situation calculus to prove properties of states. Pinto's thesis <ref> [ Pinto, 1994 ] </ref> considers a number of ways of extending the situation calculus, including adding a time line to it. Miller and Shanahan [1994] consider how to represent narratives in the situation calculus. <p> We have presented evidence that this approach to formalizing actions leads, in some cases, to the circumscriptions that can be evaluated using the predicate completion method or the SCAN algorithm. One of these examples (Example 3) involves a ternary state constraint in the sense of Section 3.1 of <ref> [ Pinto, 1994 ] </ref> and thus is not amenable to the methods developed there for the generation of successor state axioms in the case when all constraints are binary. <p> Conclusion : Mary will either catch the first bus or take a cab. To represent this example, we need to enhance the situation calculus by adding a time line to the situation calculus, as is done in <ref> [ Pinto, 1994 ] </ref> . There, other enhancements for representing concurrent actions and continuous change are also proposed.
Reference: [ Poole, 1993 ] <author> David Poole. </author> <title> Default logic. In D.M. </title> <editor> Gabbay, C.J. Hogger, and J.A. Robinson, editors, </editor> <booktitle> The Handbook of Logic in AI and Logic Programming, </booktitle> <volume> volume 3, </volume> <pages> pages 189-215. </pages> <publisher> Oxford University Press, </publisher> <year> 1993. </year>
Reference-contexts: A generalization of the notion of a default is that of a disjunctive default, introduced in [ Gelfond et al., 1991a ] . A recent survey of default logic can be found in <ref> [ Poole, 1993 ] </ref> . 2.5.3 Nonmonotonic Logic and Autoepistemic Logic The nonmonotonic logic proposed by McDermott and Doyle in [1980] augmented first-order logic with a modal operator M , whose informal interpretation was consistent.
Reference: [ Reiter, 1980 ] <author> Raymond Reiter. </author> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1-2):81-132, </volume> <year> 1980. </year>
Reference-contexts: A consequence relation ` is is said to be nonmonotonic if it is not monotonic. The main nonmonotonic formalisms that have been proposed are circumscription [ McCarthy, 1977; McCarthy, 1980 ] , default logic <ref> [ Reiter, 1980 ] </ref> , nonmonotonic logic [ McDermott and Doyle, 1980 ] and autoepistemic logic [ Moore, 1985 ] . <p> The SCAN algorithm [ Gabbay and Ohlbach, 1992 ] and the SET-VAR method of Bledsoe and Feng [1993] can be used for computing circumscriptions. A recent survey of circumscription can be found in [ Lifschitz, 1993a ] . 2.5.2 Default Logic Reiter's default logic <ref> [ Reiter, 1980 ] </ref> augments a first order theory with a set of default rules.
Reference: [ Reiter, 1991 ] <author> Raymond Reiter. </author> <title> The frame problem in the situation calculus: A simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <year> 1991. </year>
Reference-contexts: We will conform for the most part to the notation introduced in <ref> [ Reiter, 1991 ] </ref> .
Reference: [ Reiter, 1993 ] <author> Raymond Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64(2) </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference: [ Sandewall, 1989 ] <author> Erik Sandewall. </author> <title> Filter preferential entailment for the logic of action in almost continuous worlds. </title> <booktitle> In Proc. of IJCAI-89, </booktitle> <pages> pages 894-899, </pages> <year> 1989. </year>
Reference-contexts: Because of this, they get unintuitive conclusions when description of the starting world is incomplete. Winslett [1988] suggests modifying the Ginsberg and Smith approach to use possible models. However, even this approach has recently been criticized [ Brewka and Hertzberg, 1993 ] . Sandewall's filter preferential entailment <ref> [ Sandewall, 1989 ] </ref> modifies chronological minimization by changing the definition of preferred models. Also, of his preferred models, he considers only those which satisfy the observation axioms, i.e. those axioms specifying which fluents hold at specific times.
Reference: [ Sandewall, 1992 ] <author> Erik Sandewall. </author> <title> Features and fluents. </title> <type> Technical Report LiTH-IDA-R-92-30, </type> <institution> Linkoping University, Sweden, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: In [ Thielscher, 1994a ] , the language A is related to the ideas of <ref> [ Sandewall, 1992 ] </ref> . In many ways, the expressive possibilities of A are limited. For instance, in A, all the fluents are assumed to be independent. Thus we cannot have, for instance, two fluent Alive and Dead, which are negations of each other. <p> By adding the value proposition initially Orientation is 0 (7.6) to the domain description, we would reduce the number of models to one. Example 2. The Russian Turkey Shoot <ref> [ Sandewall, 1992 ] </ref> is the enhancement of the original shooting story in which there is an additional action of spinning the gun's bullet chamber.
Reference: [ Schubert, 1990 ] <author> L.K. Schubert. </author> <title> Monotonic solution of the frame problem in the situation calculus: an efficient method for worlds with fully specified actions. </title> <editor> In H.E Kyberg, R.P Loui, and G.N Carlson, editors, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Press, </publisher> <address> Boston, Mass., </address> <year> 1990. </year>
Reference: [ Shoham, 1987 ] <author> Yoav Shoham. </author> <title> Reasoning about change. </title> <publisher> MIT Press, </publisher> <address> Boston, MA, </address> <year> 1987. </year>
Reference: [ Shoham, 1988 ] <author> Yoav Shoham. </author> <title> Chronological ignorance: experiments in nonmonotonic temporal reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 36 </volume> <pages> 279-331, </pages> <year> 1988. </year>
Reference: [ Shvarts, 1990 ] <author> Grigori Shvarts. </author> <title> Autoepistemic modal logics. </title> <editor> In Rohit Parikh, editor, </editor> <booktitle> Theoretical Aspects of Reasoning about Knowledge: Proc. of the Third Conf., </booktitle> <pages> pages 97-110, </pages> <year> 1990. </year>
Reference-contexts: Moore [1985] proposed autoepistemic logic as a way out of some of the difficulties of McDermott's logic and and in [ Moore, 1984 ] gave a satisfactory semantics for it based on Kripke models. In <ref> [ Shvarts, 1990 ] </ref> , it was noticed that if we take the McDermott's nonmono-tonic logic and base it on the modal logic Weak S5 instead of S5, we get precisely Moore's autoepistemic logic.
Reference: [ Siklossy and Roach, 1975 ] <author> L. Siklossy and J. Roach. </author> <title> Model verification and improvement using DISPROVER. </title> <journal> Artificial Intelligence, </journal> <volume> 6 </volume> <pages> 41-52, </pages> <year> 1975. </year>
Reference-contexts: Though computationally efficient, the STRIPS system suffers from the disadvantage that seemingly minor modifications in standard examples can cause STRIPS to produce incorrect results <ref> [ Siklossy and Roach, 1975 ] </ref> . Also, STRIPS failed to handle the ramification problem since the indirect effects of actions had to be directly encoded in the ADD and DELETE lists. A formal account of the STRIPS language was given by Lifschitz [1987b].
Reference: [ Subramanian, 1993 ] <author> Sakthi Subramanian. </author> <title> A Mechanized Framework for Specifying Problem Domains and Verifying Plans. </title> <type> PhD thesis, </type> <institution> University of Texas, Austin, Department of Computer Science, </institution> <year> 1993. </year> <month> 153 </month>
Reference-contexts: example, the logic programming interpreter XOLDT [ Chen and Warren, 1992 ] is put to such use in [ Lifschitz et al., 1993 ] , the abductive procedure SLD-NFA in [ Denecker and De Schreye, 1993 ] , and the theorem prover of [ Boyer and Moore, 1988 ] in <ref> [ Subramanian, 1993 ] </ref> . In [ Thielscher, 1994a ] , the language A is related to the ideas of [ Sandewall, 1992 ] . In many ways, the expressive possibilities of A are limited. For instance, in A, all the fluents are assumed to be independent.
Reference: [ Thielscher, 1994a ] <author> Michael Thielscher. </author> <title> An Analysis of Systematic Approaches to Reason--ing about Actions and Change. </title> <editor> In P. Jorrand, editor, </editor> <booktitle> International Conference on Artificial Intelligence: Methodology, Systems, Applications (AIMSA ), Sofia, </booktitle> <address> Bulgaria, 1994. </address> <publisher> World Scientific Publishing Co. Singapore. </publisher>
Reference-contexts: In <ref> [ Thielscher, 1994a ] </ref> , the language A is related to the ideas of [ Sandewall, 1992 ] . In many ways, the expressive possibilities of A are limited. For instance, in A, all the fluents are assumed to be independent.
Reference: [ Thielscher, 1994b ] <author> Michael Thielscher. </author> <title> Representing actions in equational logic programming. </title> <editor> In Pascal Van Hentenryck, editor, </editor> <booktitle> Proc. ICLP-94, </booktitle> <pages> pages 207-224, </pages> <year> 1994. </year>
Reference-contexts: The three translations discussed in this chapter were first reported in [ Kartha, 1993 ] . Translations from A into abductive logic programming in can be found in [ Dung, 1993 ] and [ Denecker and De Schreye, 1993 ] , and into equational logic programming in <ref> [ Thielscher, 1994b ] </ref> . If a theorem prover, or a query evaluation procedure, is available for the target language of such a translation, then it becomes possible to use the translation for the automation of reasoning about action. <p> Also, all actions are assumed to have determinisitic effects. Such expressive limitations of A have led researchers to enhance it in various ways. Dung [1993] proposed a relational version of A, in which fluents and actions may have arguments. In [ Denecker and De Schreye, 1993 ] and <ref> [ Thielscher, 1994b ] </ref> , dialects of A are outlined in which one can describe actions with nondeterministic effects. Baral and Gelfond [1993] extend A by an operator for the concurrent execution of a set of actions.
Reference: [ Turner, 1994 ] <author> Hudson Turner. </author> <title> Signed logic programs. </title> <editor> In Maurice Bruynooghe, editor, </editor> <booktitle> Proc. of ILPS-94, </booktitle> <pages> pages 61-75. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Winslett, 1988 ] <author> Marianne Winslett. </author> <title> Reasoning about action using a possible models approach. </title> <booktitle> In Proc. of AAAI-88, </booktitle> <pages> pages 89-93, </pages> <year> 1988. </year>
Reference-contexts: The result of performing an action in a world leads to a world hat satisfies the effects of the action and that is nearest to the starting world. However, as pointed out by <ref> [ Winslett, 1988 ] </ref> , Ginsberg and Smith's approach suffers from a number of problems that stem from syntactic character of the definition of a worldfor instance fp; qg is a different world from fp ^ qg, according to Ginsberg and Smith. <p> In other words, we wish to reason in a local fashion, without considering the history. The new fluents achieve this by removing the dependence of the Result function. In other words, in the range of the circumscription, we accept the local theory update view, as in Winslett's work <ref> [ Winslett, 1988 ] </ref> . The simplification achieved here in comparison with the formalization presented in Chapter 6 is that the existence of situations principle is not needed any more. <p> As noted before, the idea behind this formalization is closest to that of Winslett [1988]. The main difference is that Winslett's formalization is in terms of theory update, whereas this formalization includes the full expressive power of the situation calculus. Combining the ideas of <ref> [ Winslett, 1988 ] </ref> with the situation calculus is achieved by the use of NATs. Another closely related direction of research is described in [ Lin and Shoham, 1991 ] and [ Lin and Reiter, 1994 ] .
Reference: [ Zhang and Foo, 1995 ] <author> Yan Zhang and Norman Foo. DNC: </author> <title> Representing nondeterminism and causality in reasoning about action. </title> <type> Manuscript, </type> <year> 1995. </year> <month> 154 </month>
References-found: 89

