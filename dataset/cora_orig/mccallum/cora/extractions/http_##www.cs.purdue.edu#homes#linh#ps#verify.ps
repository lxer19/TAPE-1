URL: http://www.cs.purdue.edu/homes/linh/ps/verify.ps
Refering-URL: http://www.cs.purdue.edu/homes/linh/pubs.htm
Root-URL: http://www.cs.purdue.edu
Title: Parallel program synthesis in generate-and-test approach  
Author: Hong Lin, Robert Lynch, Dan C. Marinescu 
Date: May 29, 1998  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: A program construction method based on Gamma language is proposed: the problem to be solved is specified by first-order predicate logic and a semantic verification program is constructed directly from the specification. Methods for improving efficiency of the program are also studied. The method differs from the one proposed by Manna and Waldinger, where a program is extract from the proof of the existence of an object meeting the given specification. On another hand, it also differs from the classical one used for deriving Gamma programs of Ban^atre and Le Metayer, which consists in decomposing the specification into an invariant and a termination condition. Key words: Program synthesis, Very high-level languages, Parallelism and concurrency, Formal speci fication, First-order logic
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Lowry M R. </author> <title> McCartney R D, Automating software design, </title> <publisher> AAAI Press, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction There are many approaches to program construction being proposed and deeply studied <ref> [1, 2] </ref>. These approaches are aiming at formalisms developing correct programs. It needs high skills to master each of these approaches.
Reference: [2] <author> Xu J, et.al. </author> <title> Automating software design, </title> <publisher> Tsinghua University Press and Guangxi Sci & Tech Press, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction There are many approaches to program construction being proposed and deeply studied <ref> [1, 2] </ref>. These approaches are aiming at formalisms developing correct programs. It needs high skills to master each of these approaches.
Reference: [3] <author> Manna Z, Waldinger R. </author> <title> Fundamentals of deductive program synthesis. </title> <journal> IEEE Trans. on Software Engineering, Aug.1992, </journal> <volume> 18(8): </volume> <pages> 674-704. </pages>
Reference-contexts: The formers describe properties of the programs; and the latters describe behaviors of the programs. High-level synthesis methods aim at starting with the formers. This is also the goal of this paper. In general, we shall be dealing with specifications of the form <ref> [3] </ref> f (a) ( f ind z such that Q [a; z] where Q [a; z] is a sentence of the background theory. Function f should be synthesized in a procedure of theorem proving. <p> Although most cases can satisfy these requirements, and in some cases these requirements can be weakened, these requirements, any way, will restrict the application range of this method. Another problem is that skills are needed in inferences for improving efficiency. Compared to the deductive-tableau method <ref> [3] </ref>, where a proof in syntax of the first-order logic is required to be constructed in an intelligent strategy [13], the method presented in this paper constructs a program from the process of semantically proving the specification.
Reference: [4] <author> Wang M, Lin H, Chen Y. </author> <title> Synthesizing Gamma program from first-order specification. </title> <booktitle> Proc. the Second Chinese World Congress on Intelligent Control and Intelligent Automation (CWC ICIA'97), Xian, </booktitle> <address> China, </address> <month> June 23-27, </month> <year> 1997: </year> <pages> 1224-1229. </pages>
Reference-contexts: It needs high skills to master each of these approaches. Although it seems excessive to demand this problem being completely solved, the necessity to solve it cannot be overemphasized if we want to reach a practical automating software design system. In <ref> [4] </ref>, a method for constructing programs from first-order specifications is proposed. The method constructs a semantic verification program for a specification. Few syntactic derivation is needed in constructing the program. A method for improving efficiency is presented in [5].
Reference: [5] <author> Cai J, Paige R. </author> <title> Program derivation by fixed point computation. </title> <booktitle> Science of Computer Programming, 1989, </booktitle> <volume> 11(3): </volume> <pages> 197-261. </pages>
Reference-contexts: In [4], a method for constructing programs from first-order specifications is proposed. The method constructs a semantic verification program for a specification. Few syntactic derivation is needed in constructing the program. A method for improving efficiency is presented in <ref> [5] </ref>. Related works include RAPTS system based on the SETL language and derivation techniques based on "generate-and-test" algorithms [6, 7, 8, 9]. In these techniques, parallelism, however, is not so emphasized, The Gamma formalism is presented to allow the systematic derivation of programs without artificial sequentiality.
Reference: [6] <author> Paige R, Henglein F. </author> <title> Mechanical translation of set theoretic problem specifications into efficient RAM code a case study. </title> <journal> Journal of Symbolic Computation, 1987, </journal> <volume> 4(2): </volume> <pages> 207-232. </pages>
Reference-contexts: The method constructs a semantic verification program for a specification. Few syntactic derivation is needed in constructing the program. A method for improving efficiency is presented in [5]. Related works include RAPTS system based on the SETL language and derivation techniques based on "generate-and-test" algorithms <ref> [6, 7, 8, 9] </ref>. In these techniques, parallelism, however, is not so emphasized, The Gamma formalism is presented to allow the systematic derivation of programs without artificial sequentiality. The classical method for Gamma program derivation proposed by J.-P. Ban^atre and D.
Reference: [7] <author> Smith D R, Lowry M R. </author> <title> Algorithm theories and design tactics. </title> <booktitle> Science of Computer Programming, 1990, </booktitle> <volume> 14: </volume> <pages> 305-321. </pages>
Reference-contexts: The method constructs a semantic verification program for a specification. Few syntactic derivation is needed in constructing the program. A method for improving efficiency is presented in [5]. Related works include RAPTS system based on the SETL language and derivation techniques based on "generate-and-test" algorithms <ref> [6, 7, 8, 9] </ref>. In these techniques, parallelism, however, is not so emphasized, The Gamma formalism is presented to allow the systematic derivation of programs without artificial sequentiality. The classical method for Gamma program derivation proposed by J.-P. Ban^atre and D.
Reference: [8] <author> Smith D R. KIDS: </author> <title> a semi-automatic program development system. </title> <journal> IEEE Trans. on Software Engineering, 1990, </journal> <volume> 16(9): </volume> <pages> 1024-1043. </pages>
Reference-contexts: The method constructs a semantic verification program for a specification. Few syntactic derivation is needed in constructing the program. A method for improving efficiency is presented in [5]. Related works include RAPTS system based on the SETL language and derivation techniques based on "generate-and-test" algorithms <ref> [6, 7, 8, 9] </ref>. In these techniques, parallelism, however, is not so emphasized, The Gamma formalism is presented to allow the systematic derivation of programs without artificial sequentiality. The classical method for Gamma program derivation proposed by J.-P. Ban^atre and D.
Reference: [9] <author> Lin H, </author> <title> Synthesizing loop structure in JOOADL formalism, Computer Application and Software, </title> <note> to appear. </note>
Reference-contexts: The method constructs a semantic verification program for a specification. Few syntactic derivation is needed in constructing the program. A method for improving efficiency is presented in [5]. Related works include RAPTS system based on the SETL language and derivation techniques based on "generate-and-test" algorithms <ref> [6, 7, 8, 9] </ref>. In these techniques, parallelism, however, is not so emphasized, The Gamma formalism is presented to allow the systematic derivation of programs without artificial sequentiality. The classical method for Gamma program derivation proposed by J.-P. Ban^atre and D.
Reference: [10] <author> Ban^atre J-P, Le Metayer D. </author> <title> The Gamma model and its discipline of programming. </title> <booktitle> Science of Computer Programming, 1990, </booktitle> <volume> 15: </volume> <pages> 55-77. </pages>
Reference-contexts: In these techniques, parallelism, however, is not so emphasized, The Gamma formalism is presented to allow the systematic derivation of programs without artificial sequentiality. The classical method for Gamma program derivation proposed by J.-P. Ban^atre and D. Le Metayer <ref> [10, 11] </ref> is to decompose the specification into an invariant and a termination condition. However, the program is designed under the guidance of the invariant and the variant rather than derived out directly from the specification. And much skill is need in figuring out the invariant and variant. <p> In this paper, we use Gamma because its basic data structure, multiset, provides a convenient mechnism to describe a dynamically changing tuple set for the program to evaluate. Gamma is proposed for systematic derivation of correct programs <ref> [10] </ref>. The existing method for the derivation follows a common practice which consists in splitting the property into two parts: the invariant which holds during the whole computation, and the variant which is required to hold only at the end of the computation.
Reference: [11] <author> Mussat L. </author> <title> Parallel programming with bags. </title> <booktitle> Proc. Workshop on Research Directions in High-Level Parallel Programming Languages, Mont-Saint Michel, 1991, </booktitle> <publisher> Springer-Verlag, LNCS 574: </publisher> <pages> 219-230. </pages>
Reference-contexts: In these techniques, parallelism, however, is not so emphasized, The Gamma formalism is presented to allow the systematic derivation of programs without artificial sequentiality. The classical method for Gamma program derivation proposed by J.-P. Ban^atre and D. Le Metayer <ref> [10, 11] </ref> is to decompose the specification into an invariant and a termination condition. However, the program is designed under the guidance of the invariant and the variant rather than derived out directly from the specification. And much skill is need in figuring out the invariant and variant.
Reference: [12] <author> Le Metayer D. </author> <title> Higher-order multiset processing. </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, 1994, </booktitle> <volume> 18: </volume> <pages> 179-200. </pages>
Reference-contexts: Parallelism is emphasized in program construction by using Gamma language. Efficiency issues can be dealt with in a totally separated phase and framework of the program need not be changed in reforming the program. In this paper, we adopt a syntax of Gamma unified to that for higher-order Gamma <ref> [12] </ref>, whose programs are expressed as conf igurations. In Section 2, we introduce logical specifications and transformations in specification level. In Section 3, we describe the method of constructing verification programs from specifications.
Reference: [13] <author> Traugott J. </author> <title> Deductive synthesis of sorting programs. </title> <journal> Journal of Symbolic Computation, 1989, </journal> <volume> 7: </volume> <pages> 533-572. </pages>
Reference-contexts: Another problem is that skills are needed in inferences for improving efficiency. Compared to the deductive-tableau method [3], where a proof in syntax of the first-order logic is required to be constructed in an intelligent strategy <ref> [13] </ref>, the method presented in this paper constructs a program from the process of semantically proving the specification. The process follows a general routine and does not need much efforts in constructing the proof. Although intelligence is required in improving the efficiency of the program, it is not inevitable.
Reference: [14] <author> Chandy K M, Misra J. </author> <title> Parallel Program Design: A Foundation, </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year> <month> 11 </month>
Reference-contexts: So issues of correctness and of efficiency are separated and can be dealt with in two different stages. To use the method of constructing verification program from a specification, any programming language can be a qualified candidate as the operational specification language. When abstractness and parallelism are concerned, Unity <ref> [14] </ref> and Gamma (or other high-level languages) are proper choices. In this paper, we use Gamma because its basic data structure, multiset, provides a convenient mechnism to describe a dynamically changing tuple set for the program to evaluate. Gamma is proposed for systematic derivation of correct programs [10].
References-found: 14

