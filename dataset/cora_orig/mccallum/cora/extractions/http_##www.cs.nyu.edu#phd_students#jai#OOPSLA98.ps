URL: http://www.cs.nyu.edu/phd_students/jai/OOPSLA98.ps
Refering-URL: http://www.cs.nyu.edu/phd_students/jai/index.html
Root-URL: http://www.cs.nyu.edu
Email: jai@cs.nyu.edu  
Title: A Lightweight Dynamic OOP Framework for Automatic Application Location, Installation and Upgrade Automatic installing, upgrading
Author: Benchiao Jai 
Note: document, even if the applications are not installed.  
Address: New York University  
Affiliation: Computer Science Department,  
Abstract: One task computer users have to perform but which has very little productivity is the installation and upgrade of applications. In this paper we describe an objectoriented application framework LIDO (Lightweight Dynamic OOP) which has these unique features: Automatic location of the applications necessary for a 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Box, D. </author> <title> Say Goodbye to Macro Envy with Active Scripting. Microsoft Interactive Developer (February 1998), </title> <note> Microsoft Press. Also available at http:// www.microsoft.com/mind/0297/activescripting.htm. </note>
Reference-contexts: This changes the configuration of the factory dynamically without the need of recompilation. LIDO Scripts A piece of script is associated with each LIDO object. LIDO has a native script engine but it also allows scripts to be written in other ActiveScript-compliant <ref> [1] </ref> tools. LIDO Browser The LIDO browser contains three parts: the implementation of the base class LIDOObject, the object factory and the library loader. The factory is in charge of creating and managing objects. The library loader is in charge of locating, loading, installing and upgrading the applications.
Reference: 2. <author> Gamma, E., et al. </author> <title> Design Patterns: Elements of Reusable ObjectOriented Software, </title> <publisher> Chapter 3 . Addison-Wesley, </publisher> <address> Reading Massachusetts, </address> <year> 1994. </year>
Reference-contexts: LIDO Objects A LIDO object differs from other objects by always carrying a pair of tags indicating its class and the location to find its code, namely the class identifier and the library locator. The class identifier is a string which can be passed to the object factory <ref> [2] </ref> in the browser for creating the object. The library locator is a string encoding a Uniform Resource Locator (URL) for the location of the application library which handles the object. LIDO Documents A LIDO document is the persistent representation of an object.
Reference: 3. <author> OMG. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <note> V2.2 . Available at ftp://ftp.omg.org/pub/docs/formal/98-02-01.pdf. </note>
Reference-contexts: Approach Objectoriented programming beyond one single program requires some mechanism for communications with external objects. Many ORB architectures have been developed for this purpose <ref> [3, 4] </ref>. However, for smallscale applications, these tools seem to be too complicated for developers to overcome the initial learning curve. Thus, powerful OOP tools are not often popular. The dominance of market has very little to do with technical merit, but very much to do with compatibility. <p> The same techniques can be applied to Java class loader to automate the installation and upgrade of Java applications. RELATED WORK The functionality of LIDO is orthogonal to other systems. One can think of LIDO as an interface in COM [4] or CORBA <ref> [3] </ref> and add it to other systems as an enhancement. Netscapes Plug-in Finder only points users to an information page without actually installing the plug-ins.
Reference: 4. <author> Sessions, R. COM and DCOM: </author> <title> Microsoft's Vision for Distributed Objects. </title> <publisher> John Wiley & Sons, </publisher> <address> NY, NY, </address> <year> 1997. </year>
Reference-contexts: Approach Objectoriented programming beyond one single program requires some mechanism for communications with external objects. Many ORB architectures have been developed for this purpose <ref> [3, 4] </ref>. However, for smallscale applications, these tools seem to be too complicated for developers to overcome the initial learning curve. Thus, powerful OOP tools are not often popular. The dominance of market has very little to do with technical merit, but very much to do with compatibility. <p> The same techniques can be applied to Java class loader to automate the installation and upgrade of Java applications. RELATED WORK The functionality of LIDO is orthogonal to other systems. One can think of LIDO as an interface in COM <ref> [4] </ref> or CORBA [3] and add it to other systems as an enhancement. Netscapes Plug-in Finder only points users to an information page without actually installing the plug-ins.
References-found: 4

