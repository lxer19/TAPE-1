URL: ftp://ftp.cs.man.ac.uk/pub/IPG/bgrssw94.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/publications.html
Root-URL: http://www.cs.man.ac.uk
Email: brian@cs.man.ac.uk  rfb, ras@kid01pml.icl.co.uk  Greenwood@ecs.soton.ac.uk  
Title: PADM: Towards a Total Process Modelling System  
Author: I. Robertson, J. Sa, B.C. Warboys, U. K. ir, jsa, A. Fin-klestein, J. Kramer and B. Nuseibeh, R.F. Bruynooghe, R. A. Snowdon, R. M. Greenwood, U. K. M. 
Address: Se  Staffordshire ST7 1TL U. K.  
Note: M13 9PL,  To be published in: Software Process Modelling and Technology, edited by  ries, Research Studies Press.  SO9 5NH  
Affiliation: Department Computer Science, Univertsty of Manchester Manchester  Advanced Software Development  ProcessWise Portfolio Centre, ICL, Kidsgrove,  Declarative Systems Laboratory, Department of Electronocs and Computer Science, University of Southampton, Southampton  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> H. Barringer, R. Kuiper, and A. Pnueli. </author> <title> Now you may compose temporal logic specifications. </title> <booktitle> In Proceedings of the 16th A.C.M. Symposium on Theory of Computing, </booktitle> <year> 1984. </year>
Reference-contexts: BM provides a framework so that specifications are written in a systematic way. A temporal logic semantics <ref> [1] </ref> is given for each specification construct. This formal foundation makes it possible to reason about BM specifications mathematically. The previous case studies of BM were concerned with using BM as a specification method to produce formal representations of processes.
Reference: [2] <author> R.F. Bruynoghe, J.M. Parker, and J.S. </author> <title> Rowles. PSS:A system for Process Enactment. </title> <booktitle> In Proceedings of the first International Conference on the Software Process, Manufacturing Complex Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: This emphasis implies that we are concerned with the production of a Process Analysis and Design Methodology (PADM) [27] and its mapping to rich enactment environments. The work currently utilises the ICL product, marketed as ProcessWise Integrator (PW Int) 1 3PADM: Towards a Total Process Modelling System <ref> [2] </ref>, as the enactment system. It has a number of important properties not the least being that it supports dynamic change and that it is industrially robust. <p> The Business Modellers Workbench offers a tool to model and to simulate process behaviour; the Integrator is a process modelling, integration and enactment system; and the Guide describes a particular methodology designed to exploit the features of these technologies. The particular technology of immediate interest is ProcessWise Integrator <ref> [2] </ref>. This system takes the role/activity/interaction notion of defining the mechanism for causing transformation events and provides for their enactment in the same context. It provides a framework within which tools can be effectively co-ordinated to service a process representation of an information systems development methodology.
Reference: [3] <author> R. Conradi, C. Fernstrm, A. Fuggetta, and R.A. Snowdon. </author> <title> Towards a Reference Framework for Process Concepts. </title> <booktitle> In Proceedings EWSPT92, volume 635 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The focus is clearly on the process itself which was described clearly and concisely in narrative form as a list of activities provided with inputs, outputs, purpose, and responsibility. This statement of requirements corresponds to Feiler and Humphreys [6] Process Definition level of abstraction, and to Conradi et als <ref> [3] </ref> PM2/PM3 meta-process level. The work of obtaining the BM specification, and of developing the enactable model, is described with reference to this meta-process. <p> Curtis [4] confirms the four perspectives widely accepted as being needed to describe a process: organisational, functional, behav-ioural, and informational, but it is not an easy matter to obtain clean abstractions of these perspectives with the tools currently at our disposal. Conradi et al <ref> [3] </ref> take a rather more pragmatic approach and recognise at least five sub-models:- (1) Activity model. This is the executable model. (2) User model. Describing the service provided to the process participants by the system, and the corresponding obligations placed on them. (3) Organisation model. <p> The data structure and relationships. (5) Tool model. Description of tool architecture. This latter model was considered more appropriate as a framework in which to describe the different facets of the subject process. The models needed were not exactly as postulated in <ref> [3] </ref>: the nature of the process is such that there was no need for a tool model, and, because of the focus on enactment, there was a distinct need for a model of the work infrastructure or environment appropriate for participants; this was called the Environment model. 4.3.2 Methods and Tools <p> model, and, because of the focus on enactment, there was a distinct need for a model of the work infrastructure or environment appropriate for participants; this was called the Environment model. 4.3.2 Methods and Tools The work described herein does not fall neatly into the phases of the PM1-5 meta-model <ref> [3] </ref>, as the focus of the ISPW-6 example is on the implementation of a model already fairly well-defined in narrative form, with adequate information to begin the PM3 Customisation phase.
Reference: [4] <author> B. Curtis, M.I. Kellner, and J. </author> <title> Over. Process Modeling. </title> <journal> Communications of ACM, </journal> <volume> 35(9), </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: The operation pattern for TU Let Case Study 18 TU1:= codefrMC;packfrMUTP;doingTU The pattern is reqfrSAT; TU1; (packbackfailtoMUTP;packcodetoMC; TU1) * ; packbackoktoMUTP;succtoMP;endTUtoMP;fin 4.3 Implementing ISPW-6 in PML 4.3.1 Overview of model architecture A number of writers confirm the difficulty of representing process activity in a meaningful and concise manner. Curtis <ref> [4] </ref> confirms the four perspectives widely accepted as being needed to describe a process: organisational, functional, behav-ioural, and informational, but it is not an easy matter to obtain clean abstractions of these perspectives with the tools currently at our disposal.
Reference: [5] <author> A. Dearle and A.L. Brown. </author> <title> Safe Browsing in a Strongly Typed Persistent Environment. </title> <journal> The Computer Journal, </journal> <volume> 31(6):540544, </volume> <year> 1988. </year>
Reference-contexts: The benefits accruing from the use of PS-algol are considerable. As well as persistence, the PS-algol system provides an interface to its compiler which can be called from within a PS-algol program and which, on successful compilation, returns an executable procedure value <ref> [5] </ref>. We use this interface to provide a similar capability in PML. Long running processes have to be closed down and restarted to allow for operations like machine maintenance. The PCM must also be resilient to machine fail 1.
Reference: [6] <author> P.H. Feiler and W.S. Humphrey. </author> <title> Software Process Development And Enactment: Concepts And Definitions. </title> <booktitle> In Proceedings of the Second International Conference on the Software Process. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: The focus is clearly on the process itself which was described clearly and concisely in narrative form as a list of activities provided with inputs, outputs, purpose, and responsibility. This statement of requirements corresponds to Feiler and Humphreys <ref> [6] </ref> Process Definition level of abstraction, and to Conradi et als [3] PM2/PM3 meta-process level. The work of obtaining the BM specification, and of developing the enactable model, is described with reference to this meta-process. <p> ISPW-6 example is modelled as a composed object containing all the agent objects and the step objects. 4.1.3 Agent Object An agent object may be engaged in three kinds of activities: it may deliver artifacts to some steps; (The term artifact is used in accordance with the definitions given in <ref> [6] </ref> and [13]. Artifacts mean both input and output data for steps); it may receive artifacts from some steps; it will perform some steps. <p> All of them are dynamic <ref> [6] </ref>. The first comprises the Application Models 1 and 2, loaded into the basic PW Int persistent store containing initially an instance of class Base role.
Reference: [7] <author> Sol J. Greenspan. </author> <title> Requirements Modelling; A Knowledge Representation Approach to Software Requirements Definition. </title> <type> Technical Report CSRG-155, </type> <institution> Computer Systems Research Group, University of Toronto, </institution> <month> March </month> <year> 1984. </year>
Reference-contexts: The process programming language PML is central to ProcessWise Integrator. It has evolved from the IPSE 2.5 Process Modelling Language [17][18], and still retains many of its former characteristics. Despite its origins in the concepts of knowledge representation <ref> [7] </ref> [15], practical experience has shown PML to be more amenable to imperative rather than declarative descriptions of processes. In developing the IPSE 2.5 system into PW Int, new language features to facilitate the imperative style of representation have been introduced.
Reference: [8] <author> P. Henderson. </author> <title> Object-Oriented Specification and Design with C++. </title> <booktitle> International References 42 Series in Software Engineering. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1993. </year>
Reference-contexts: During this work we also developed a tool which allowed us to execute the BM specifications. The behaviour of objects is described in BM using operation patterns. A BM Stepper tool was developed using the modelling language Enact <ref> [8] </ref>. The stepper allowed a user to transcribe an operation pattern and then step through alternative sequences of operations. This ability to interact with the BM specification proved very valuable. <p> How do we communicate those decisions? One answer is for everyone to read BM uently. The method we adopted was to develop a stepper for the BM subset used in this problem. (This stepper was developed in the object-oriented executable specification language Enact <ref> [8] </ref>. Our BM description then became an executable specification). One of the problems of the English textual description and the BM spec is that they are static. It is difficult to understand the dynamic behaviour of the system which they imply.
Reference: [9] <author> A.W. Holt, H.R. Ramsey, and J.D. Grimes. </author> <title> Coordination System Technology as the Basis for a Programming Environment. </title> <journal> Electrical Communication, </journal> <volume> 57(4), </volume> <year> 1983. </year>
Reference-contexts: example assumes a green field implementation, i.e. there is no need to take into account current work practice and cultural inuence. 19PADM: Towards a Total Process Modelling System Certain of the representation methods advocated by PADM were also used in this study: the first using the role-interaction paradigm of process <ref> [9] </ref> to identify user roles (i.e. sociological roles within the organisation, commonly aligned to job descriptions), to map tasks or activities to these roles, and to identify at a coarse grained level discrete states and associated events of the process. The resulting diagrams are known as RADs [15].
Reference: [10] <institution> IPSE 2.5 Project Evaluation Report. IPSE 2.5 Project Document 060/00200, </institution> <year> 1989. </year>
Reference: [11] <author> P. Kawalek. </author> <title> The Process Modelling Cookbook: Version One. </title> <type> Technical report, </type> <institution> Support Technology Focus Project, British Telecommunications, </institution> <year> 1991. </year>
Reference-contexts: We then outline both the BM specification and the PML implementation of the ISPW-6 process, followed by their validations. Finally we conclude with some remarks on future work and conclusions. 2. BM BM is an important component of PADM. PADM is built on the earlier Process Modelling Cookbook <ref> [11] </ref>. It is partly theoretically based, drawing on work in the fields of Socio-Technical Design, Soft Systems Methodology, and Organisation 1. ProcessWise Integrator was formerly known as Process Support System (PSS).
Reference: [12] <author> M. Kellner, P. Feiler, A. Finkelstein, T. Katayama, L. Osterweil, M. Penedo, and H.D.Rombach. </author> <title> ISPW-6 Software Process Example. </title> <booktitle> In Proceedings of the First International Conference on Software Process, </booktitle> <address> Washington, 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: It also supports a generic approach to Process Modelling and enactment thus making it a suitable vehicle for the general study of the mapping of models to rich enactment environments. Using the example process developed at the 6th International Software Process Workshop (hereinafter referred to as ISPW-6 <ref> [12] </ref>) to illustrate our approach, we show how an enactment system was developed to support the ISPW-6 process. <p> supply operation for each step to which the agent delivers artifact identify the receive operations one receive operation for each step from which artifacts are received identify the step interface operations one step interface operation for each step the agent performs define the operation pattern for the agent object In <ref> [12] </ref>, the overall constraint for each agent is not explicitly given. 4.
Reference: [13] <author> J. Lonchamp. </author> <title> A Structured Conceptual and Terminological Framework for Software Process Engineering. </title> <booktitle> In Proceedings of the Second International Conference on Software Process. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: is modelled as a composed object containing all the agent objects and the step objects. 4.1.3 Agent Object An agent object may be engaged in three kinds of activities: it may deliver artifacts to some steps; (The term artifact is used in accordance with the definitions given in [6] and <ref> [13] </ref>. Artifacts mean both input and output data for steps); it may receive artifacts from some steps; it will perform some steps.
Reference: [14] <author> L.J. Osterweil. </author> <title> Software Processes are Software too. </title> <booktitle> In Proceedings of the 9th International Conference on Software Engineering, </booktitle> <address> Monterey, </address> <year> 1987. </year>
Reference-contexts: This representation is in the Process Management Language (PML). 3.2 The Process Programming Language (PML) The similarities between process programming and conventional software programming have already been remarked upon <ref> [14] </ref>. The process programming language PML is central to ProcessWise Integrator. It has evolved from the IPSE 2.5 Process Modelling Language [17][18], and still retains many of its former characteristics.
Reference: [15] <author> M.A. Ould and C. Roberts. </author> <title> Defining Formal Models of the Software Development Process. In Pearl Brereton, editor, Software Engineering Environments. </title> <publisher> Ellis Horwood, </publisher> <year> 1987. </year>
Reference-contexts: The process programming language PML is central to ProcessWise Integrator. It has evolved from the IPSE 2.5 Process Modelling Language [17][18], and still retains many of its former characteristics. Despite its origins in the concepts of knowledge representation [7] <ref> [15] </ref>, practical experience has shown PML to be more amenable to imperative rather than declarative descriptions of processes. In developing the IPSE 2.5 system into PW Int, new language features to facilitate the imperative style of representation have been introduced. <p> The resulting diagrams are known as RADs <ref> [15] </ref>. The second was the use of the activity diagram (AD) to map activities independently of roles 1 . There is another type of diagram in PADM known as dependency (DD) diagram which provides a high level abstraction of the essence of complex processes.
Reference: [16] <institution> PS-Algol Reference Manual. PPRR-12-88, University of Glasgow and University of St Andrews, </institution> <year> 1988. </year>
Reference-contexts: Standard communication protocols are used to connect the servers to the PCM. Figure 2 is a diagrammatic representation of the choices of PCM and server environments that are available. The PCM is coded mainly in PS-algol <ref> [16] </ref>, though lower-level languages are used to handle inter-machine communications. The benefits accruing from the use of PS-algol are considerable.
Reference: [17] <author> C. Roberts. </author> <title> Describing and Acting Process Models with PML. </title> <booktitle> In Proceedings of 4th International Software Process Workshop, </booktitle> <address> Moretonhampstead, </address> <year> 1988. </year>
Reference: [18] <author> C. Roberts and A. Jones. </author> <title> Dynamics of Process Models in PML. </title> <booktitle> In Proceedings of 5th International Software Process Workshop, </booktitle> <address> Kennebunkport, </address> <year> 1989. </year>
Reference: [19] <author> J. Sa and B.C. Warboys. </author> <title> Specifying Concurrent Object-based Systems using Combined Specification Notations. </title> <type> Technical Report UMCS-91-9-2, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Using the example process developed at the 6th International Software Process Workshop (hereinafter referred to as ISPW-6 [12]) to illustrate our approach, we show how an enactment system was developed to support the ISPW-6 process. The two principal technologies used to develop the model:- The Base Model (BM) <ref> [19] </ref> Specification Method The ProcessWise Integrator (PW Int) and its Process Management Language (PML) are outlined together with a brief history of the development of the PW Int from its research predecessor the IPSE 2.5 Project [23][10]. <p> ProcessWise Integrator was formerly known as Process Support System (PSS). BM 4 Theory, as well as Process Modelling, and partly based on action research through the case studies in which IPG has been involved. 2.1 Introduction BM <ref> [19] </ref> was developed at the IPG as a specification method for modelling processes. BM provides a framework so that specifications are written in a systematic way. A temporal logic semantics [1] is given for each specification construct. This formal foundation makes it possible to reason about BM specifications mathematically. <p> A brief overview of the underlying model is described below. A detailed definition is given in <ref> [19] </ref>. The behaviour of a component is defined as the set of all the possible execution sequences of the component. An execution sequence of a component is a sequential combination of its operation sequences. An operation sequence is a sequence of events.
Reference: [20] <author> J. Sa and B.C. Warboys. </author> <title> Integrating a Formal Specification Method with PML: A Case Study. </title> <booktitle> In Proceedings EWSPT92, volume 635 of Lecture Notes in Computer Science, </booktitle> <pages> pages 106123. </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: This formal foundation makes it possible to reason about BM specifications mathematically. The previous case studies of BM were concerned with using BM as a specification method to produce formal representations of processes. Such an example can be found in <ref> [20] </ref> in which a BM specification is defined to describe the co-ordination of work amongst a number of system designers working on the design of a large mainframe computer. Those case studies have shown that BM is useful in providing an abstract and yet precise description of a process.
Reference: [21] <author> J. Sa and B.C. Warboys. </author> <title> A Formal Description of the ISPW-6 Software Process Example. </title> <type> Technical Report UMCS-93-6-1, </type> <institution> Department of Computer Science, University of Manchester, </institution> <year> 1993. </year>
Reference-contexts: The receive and step operations take some parameters and update 15PADM: Towards a Total Process Modelling System the relevant variables. The details of the operation specifications are not included in this chapter. A full BM specification of the ISPW-6 example can be found in <ref> [21] </ref>. 4.1.8 The Meta-Process Component: Obtaining a BM Specification The following is a guideline for modelling a software process using BM. 1. Identify the agent objects 2. Identify the step objects 3.
Reference: [22] <author> B. Singh. </author> <title> Interconnected Roles (IR): A Coordination Model. </title> <type> Technical Report CT-084-92, </type> <institution> MCC, </institution> <year> 1992. </year>
Reference-contexts: It clearly indicates that as the process spans only a single group of users, the PM is responsible for controlling both the working of the process and the evolution of the process. The other significant concern in the organisation, the mapping of role sets <ref> [22] </ref> of group responsibilities, such as the Design Review team, to the organisation structure, was not addressed. Delegation issues were not present in the process example. 4.3.7 The Product Model As product is not the primary concern in this study, this model is trivial. <p> It is not yet possible to adequately represent the mapping of roles in organisa-tions between groups and individuals. Singh <ref> [22] </ref> has recently made progress and uses the term role sets to represent group responsibility however they are difficult to manipulate and do not yet adequately cope with the dynamics of responsibility transfer, delegation and subsumption. 5.2.6 Knowledge of state Difficulty was found in communicating to the participants knowledge of current
Reference: [23] <author> R.A. Snowdon. </author> <title> An Introduction to the IPSE 2.5 Project. </title> <journal> ICL Technical Journal, </journal> <volume> 6(3):467478, </volume> <year> 1989. </year>
Reference: [24] <author> R.E. Strom and S. Yemini. </author> <title> NIL: An Integrated Language and System for Distributed 43PADM: Towards a Total Process Modelling System Programming. </title> <booktitle> ACM SIGPLAN Symposium on Language Issues in Software Systems, </booktitle> <year> 1983. </year>
Reference-contexts: The data properties are defined in the resources category, and these data values are owned solely by that role. One role can only communicate with another by sending it a message. Using roles as data encapsulators both simplifies the programmers task and makes it less error-prone <ref> [24] </ref>. The body of a role is also divided into named action properties, each guarded by a when expression. These properties describe the behaviour of the role. The execution of these properties is controlled by an intra-role scheduler (see Section 3.7 ).
Reference: [25] <author> B.C. Warboys. </author> <title> VME nodal architecture: a model for the realisation of a distributed system concept. </title> <journal> ICL Technical Journal, </journal> <volume> 4(3), </volume> <year> 1985. </year>
Reference-contexts: The implemented process was enacted using ProcessWise Integrator 1.1, the Process Control Manager component sited sometimes in Unix on a SUN server, at other times in ICL VME <ref> [25] </ref> on an Estriel mainframe located at Manchester. The user interfaces ran on SUN workstations or PCs, usually at Manchester but not infrequently at Southampton, Bristol, and Durham using the X400 protocol on the JANET network.
Reference: [26] <author> B.C. Warboys. </author> <title> The IPSE 2.5 Project: Process Modelling as a basis for a support environment. </title> <booktitle> In Proceedings of the First International Conference on Software Development, Environments, and Factories, </booktitle> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: This implies the existence of another orthogonal process: not concerned with the day-to-day activities or performance, but the performance of the process as a whole. A process component has been written in PML called the Process Model for Management Support <ref> [26] </ref>. It provides a context for delegating objectives, planning, implementing, monitoring and re-planning process models and will be incorporated into the implementation in future. A well-known feature of PW Int is the ability to make change on the y.
Reference: [27] <author> P. White. </author> <title> Report on the Process Analysis and Design Methodology. </title> <type> Technical Report 142, </type> <institution> IOPT, </institution> <year> 1993. </year>
Reference-contexts: This emphasis implies that we are concerned with the production of a Process Analysis and Design Methodology (PADM) <ref> [27] </ref> and its mapping to rich enactment environments. The work currently utilises the ICL product, marketed as ProcessWise Integrator (PW Int) 1 3PADM: Towards a Total Process Modelling System [2], as the enactment system. <p> PADM (Process Analysis and Design Methodology <ref> [27] </ref>) provides a coherent strategy and techniques for much of the area of PM1 through to PM4, and indeed outside of this framework, identifying the need for a baseline model, stressing that once a target process (or even processes) has or have been identified, the implementation route will of necessity be <p> There is no reference in the PM1 stage of the meta-process to establishing the what is process as a basis for planning the transition to the what ought to be process, but, as White mentions <ref> [27] </ref>, in the real world this transition may well be the biggest problem to be dealt with. This issue is very pertinent when considering the impacts of context and skill. <p> This is investigating the means to control the evolution of systems within the context of a system architecture definition and architectural process. 6.3 Methodology The work bearing fruit in PADM <ref> [27] </ref> will continue in a proposed SERC funded project Process Engineering Framework of which the Methodology component will complement and extend earlier work under the IOPT project. Of particular interest will be the development of process theory, process engineering practice and techniques.
References-found: 27

