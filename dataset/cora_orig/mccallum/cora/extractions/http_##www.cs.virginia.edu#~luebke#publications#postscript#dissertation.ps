URL: http://www.cs.virginia.edu/~luebke/publications/postscript/dissertation.ps
Refering-URL: http://www.cs.virginia.edu/~luebke/simplification.html
Root-URL: http://www.cs.virginia.edu
Title: View-Dependent Simplification of Arbitrary Polygonal Environments  
Author: By David P. Luebke P. Brooks, Jr. Reader: Professor Greg Turk, 
Degree: A dissertation submitted to the faculty of the  in partial fulfillment of the requirements for the degree of Doctor of Philosophy in the  Approved by: Advisor: Professor  Reader: Professor Anselmo Lastra  
Note: Frederick  
Date: 1998  
Address: Chapel Hill  Chapel Hill  Chapel Hill  Chapel Hill  
Affiliation: University of North Carolina at  Department of Computer Science  University of North Carolina at  University of North Carolina at  Georgia Institute of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [Airey 90] <author> Airey, John. </author> <title> Increasing Update Rates in the Building Walkthrough System with Automatic ModelSpace Subdivision and Potentially Visible Set Calculations. </title> <type> Ph.D. thesis, </type> <note> UNC-CH CS Department TR #90-027 (July 1990). </note>
Reference-contexts: The visibility processing approaches described by John Airey and Seth Teller are excellent examples, using the structure of architectural models to divide the world into cells that are mostly mutually invisible <ref> [Airey 90, Teller 91] </ref>. Ned Greene, Hansong Zhang, and others have tackled the more difficult problem of general polygonal environments [Greene 93, Zhang 97].
Reference: [Aliaga 97] <author> Aliaga, Daniel. </author> <title> SGI Performance Tips (Talk). </title> <note> For more information see: http://www.cs.unc.edu/~aliaga/IR.html. </note>
Reference-contexts: Experiments on an SGI Onyx with InfiniteReality graphics, for example, indicate that Gouraud-shaded depth-buffered unlit triangles render two to three times faster in a display list than in a tightly optimized immediate mode display loop <ref> [Aliaga 97] </ref>. For these reasons view-dependent techniques seem unlikely to completely supplant view-independent techniques in the near future. 8.2.4. Geometry Compression A field closely related to polygonal simplification is geometry compression. <p> Better Use of Resources Display Lists HDS requires immediate-mode graphics, but todays high-end graphics hardware runs three to five times faster using display lists <ref> [Aliaga 97] </ref>. The motivation to use that hardware better is clear, but how to do so is not obvious. For example, a bit of thought suggests that many triangles in HDS have a long life span.
Reference: [Clark 76] <author> Clark, James. </author> <title> Hierarchical Geometric Models for Visible Surface Algorithms, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 19, No 10, </volume> <pages> pp 547-554. </pages>
Reference-contexts: As early as 1976 James Clark described the benefits of representing objects within a scene at several resolutions, and flight simulators have long used hand-crafted multi-resolution models of airplanes to guarantee a constant frame rate <ref> [Clark 76, Cosman 81] </ref>. With the mainstream debut of 3-D CAD and workstation-based computer graphics, recent years have seen a flurry of research into generating such multi-resolution representations of objects automatically by simplifying the polygonal geometry of the object.
Reference: [Cohen 96] <author> Cohen, Jon, A. Varshney, D. Manocha, G. Turk, H. Weber, P. Agarwal, F. Brooks, W. Wright. </author> <title> Simplification Envelopes, </title> <journal> Computer Graphics, </journal> <volume> Vol. 30 (SIGGRAPH 96). </volume>
Reference-contexts: By generating a simpler triangulation of the surface without intersecting the simplification envelopes, the authors guarantee a simplification that preserves global topology and varies from the original surface by no more than e <ref> [Cohen 96] </ref>. Simplification envelopes could be used to construct the vertex tree in HDS by applying successively larger values of e, and at each stage clustering those vertices that do not cause the mesh to intersect the envelopes.
Reference: [Cohen 98] <author> Cohen, Jon, and D. Manocha. </author> <title> Appearance Preserving Simplification, </title> <journal> Computer Graphics, </journal> <volume> Vol. 32 (SIGGRAPH 98). </volume>
Reference-contexts: Many other possible factors for vertex-tree construction come to mind. Garlands quadric error metrics, for example, provide a nice method of tracking and minimizing geometric distortion caused by vertex merging [Garland 97]. [Hoppe 96] allows material attributes such as color to influence the creation of the vertex hierarchy; <ref> [Cohen 98] </ref> presents a careful algorithm for appearance-preserving simplification that regulates not only geometric fidelity but color and shading information. 100 9.2.2. Better Use of Resources Display Lists HDS requires immediate-mode graphics, but todays high-end graphics hardware runs three to five times faster using display lists [Aliaga 97].
Reference: [Cosman 81] <author> Cosman, M., and R. Schumacker. </author> <title> System Strategies to Optimize CIG Image Content. </title> <booktitle> Proceedings Image II Conference (Scotsdale, </booktitle> <address> Arizona), </address> <year> 1981. </year>
Reference-contexts: Which LOD is drawn depends on the objects distance. 1.3. Motivation For a New Approach This LOD-based approach to polygonal simplification has been in use since the flight simulator systems of the 1970s <ref> [Cosman 81] </ref>. Levels of detail were originally created by 5 hand, but in the 1990s there began to appear in the literature a flurry of algorithms for automatically generating LODs from a detailed original object. The field of polygonal simplification, surveyed in Chapter 2, now appears to be approaching maturity. <p> As early as 1976 James Clark described the benefits of representing objects within a scene at several resolutions, and flight simulators have long used hand-crafted multi-resolution models of airplanes to guarantee a constant frame rate <ref> [Clark 76, Cosman 81] </ref>. With the mainstream debut of 3-D CAD and workstation-based computer graphics, recent years have seen a flurry of research into generating such multi-resolution representations of objects automatically by simplifying the polygonal geometry of the object.
Reference: [Deering 95] <author> Deering, Michael. </author> <title> Geometry Compression, </title> <journal> Computer Graphics, </journal> <volume> Vol. 29 (SIGGRAPH 95). </volume>
Reference-contexts: Deering introduced the first geometry compression algorithm for general 3-D polygonal models. His approach applies quantization and lossy compression to attributes such as the position, normal, and color of vertices, achieving compression rates of 6:1 to 10:1 <ref> [Deering 95] </ref>. Taubin and Rossignac extend this idea by compressing the topological connectivity of polygons in the mesh. Decomposing the triangulated model into a tree of linear triangle strips allows significant compression of connectivity information, down to an average of only two bits per triangle [Taubin 96].
Reference: [Eck 95] <author> Eck, Matthias, T. DeRose, T. Duchamp, H. Hoppe, M. Lounsbery, W. Stuetzle. </author> <title> Multiresolution Analysis of Arbitrary Meshes, </title> <journal> Computer Graphics, </journal> <volume> Vol. 29 (SIGGRAPH 95). </volume>
Reference: [Erikson 96] <author> Erikson, Carl. </author> <title> Polygonal Simplification: An Overview. </title> <note> UNC-CH CS Department TR #96-016 (July 1996). </note>
Reference-contexts: Such algorithms do not close holes in the mesh, and they therefore preserve the genus of the simplified surface. Global topology refers to the connectivity of the entire surface. A simplification algorithm preserves global topology if it preserves local topology and does not create self-intersections within the simplified object <ref> [Erikson 96] </ref>. A self-intersection, as the name implies, occurs when two nonadjacent faces intersect each other. Many real-world CAD models contain objects that violate manifold local topology, global topology, or both.
Reference: [Garland 94] <author> Garland, Michael, and P. Heckbert. </author> <title> Multiresolution Modeling for Fast Rendering. </title> <booktitle> Proceedings of Graphics Interface 94 (1994). </booktitle>
Reference-contexts: As a starting point for such a metric, they suggest the sum of the squared distances in RGB color space between corresponding pixels. <ref> [Garland 94] </ref>. 8.2.3. View-dependence Recent months have seen the publication of view-dependent algorithms from at least three research efforts working independently [Hoppe 97, Luebke 97, Xia 96]. View-dependence appears to be an idea whose time has come. The algorithms possess some definite advantages over their traditional view-independent counterparts.
Reference: [Greene 93] <author> Greene, Ned, M. Kass, G. Miller. </author> <title> Hierarchical Z-Buffer Visibility, </title> <journal> Computer Graphics, </journal> <volume> Vol. 29 (SIGGRAPH 93). </volume> <pages> 104 </pages>
Reference-contexts: Ned Greene, Hansong Zhang, and others have tackled the more difficult problem of general polygonal environments <ref> [Greene 93, Zhang 97] </ref>. Simplifying the polygonal geometry of small or distant portions of the model to reduce the rendering cost without a significant loss in the visual content of the scene. Such methods are known collectively as polygonal simplification algorithms.
Reference: [He 95] <author> Taosong He, L. Hong, A. Kaufman, A. Varshney, and S. Wang. </author> <title> Voxel-Based Object Simplification. </title> <booktitle> Proceedings Visualization 95, </booktitle> <publisher> IEEE Computer Society Press (Atlanta, </publisher> <address> GA), </address> <year> 1995, </year> <pages> pp. 296-303. </pages>
Reference: [Hoppe 92] <author> Hoppe, Hughes, T. DeRose, T. DuChamp, J. McDonald, W. Stuetzle. </author> <title> Surface Reconstruction from Unorganized Points, </title> <journal> Computer Graphics, </journal> <volume> Vol. 26 (SIGGRAPH 92). </volume>
Reference-contexts: Hoppe, DeRose, Duchamp, McDonald, and Stuetzle Mesh Optimization (1993) This paper describes a complex sampling approach, which evolved out of the authors work on surface reconstruction of laserscanned datasets <ref> [Hoppe 92] </ref>. Surface reconstruction is the problem of creating a three-dimensional mesh from a collection of sample points. Mesh optimization, as the name suggests, treats simplification as an optimization problem.
Reference: [Hoppe 93] <author> Hoppe, Hughes. </author> <title> Mesh Optimization, </title> <journal> Computer Graphics, </journal> <volume> Vol. 27 (SIGGRAPH 93). </volume>
Reference: [Hoppe 96] <author> Hoppe, Hughes. </author> <title> Progressive Meshes, </title> <journal> Computer Graphics, </journal> <volume> Vol. 30 (SIGGRAPH 96). </volume>
Reference-contexts: Second, a recursive subdivision of the base model may not be able to capture the exact geometry of the original model, especially around sharp corners and creases in the mesh <ref> [Hoppe 96] </ref>. 16 Decimation techniques iteratively remove vertices or faces from the mesh, retriangulating the resulting hole after each step. This process continues until it reaches a userspecified degree of simplification. <p> Finally, a local retriangulation is applied to improve the aspect ratio of the resulting triangles. Among the contributions of this paper was the introduction of a method to interpolate smoothly between different levels of detail, a process which Hughes Hoppe calls geomorphing <ref> [Hoppe 96] </ref>. 2.2.4. Hoppe, DeRose, Duchamp, McDonald, and Stuetzle Mesh Optimization (1993) This paper describes a complex sampling approach, which evolved out of the authors work on surface reconstruction of laserscanned datasets [Hoppe 92]. Surface reconstruction is the problem of creating a three-dimensional mesh from a collection of sample points. <p> The fidelity of the resulting simplifications is quite high for smooth organic forms, but the algorithm is fundamentally a low-pass filtering approach and has difficulty capturing sharp features in the original model unless the features happen to fall along a division in the base mesh <ref> [Hoppe 96] </ref>. 2.2.6. He, Hong, Kaufman, Varshney, and Wang Voxel-Based Object Simplification (1995) Topology-preserving algorithms must retain the genus of the original object, which often limits their ability to perform drastic simplification. <p> Unfortunately, it is not clear how to extend simplification envelopes to allow merging between different objects, or to allow drastic topology-discarding collapse operations at high levels of the tree. Hoppe describes an optimization approach that creates a series of edge collapses for the Progressive Meshes representation <ref> [Hoppe 96] </ref>. The stream of edge collapse records in a progressive mesh contains an implicit hierarchy that maps directly to the HDS vertex tree. Each edge collapse corresponds to a node in HDS with two children and one or two subtris. <p> HDS evolved conceptually from the spatial binning approach of [Rossignac 92], clustering arbitrarily many vertices at once to a single representative vertex. Progressive meshes grew out of the authors early work on mesh optimization, and rely instead on the edge collapse operation <ref> [Hoppe 96] </ref>. An edge collapse merges exactly two vertices, which must share an edge in the mesh. As a result, the vertex hierarchy in a progressive mesh will always be binary, whereas the HDS vertex tree may in principle be nary 9 . <p> All four surface simplification papers in the SIGGRAPH 97 conference, for example, present algorithms based on merging vertices [Hoppe 97, Luebke 97, Garland 97, Popovic 97]. The simplicity and robust nature of vertex merging no doubt play a large part in this trend. Earlier work such as <ref> [Hoppe 96] </ref> and [Ronfard 96] has probably played a part as well by demonstrating that high-quality simplification is possible with an algorithm based entirely on edge collapses. <p> These algorithms transmit a coarse version of the data first, followed by a stream of refinements, which the receiving process uses to reconstruct the original. The progressive mesh representation is by design well suited for progressive transmission of polygonal models <ref> [Hoppe 96] </ref>. If the mass-market debut of 3-D graphics occurs on the scale of the WWW, polygonal simplification algorithms may well be measured by their ability to support compression and progressive transmission. CHAPTER 9 SUMMARY AND FUTURE WORK 9.1. <p> Many other possible factors for vertex-tree construction come to mind. Garlands quadric error metrics, for example, provide a nice method of tracking and minimizing geometric distortion caused by vertex merging [Garland 97]. <ref> [Hoppe 96] </ref> allows material attributes such as color to influence the creation of the vertex hierarchy; [Cohen 98] presents a careful algorithm for appearance-preserving simplification that regulates not only geometric fidelity but color and shading information. 100 9.2.2.
Reference: [Hoppe 97] <author> Hoppe, Hughes. </author> <title> View-Dependent Refinement of Progressive Meshes, </title> <journal> Computer Graphics, </journal> <volume> Vol. 31 (SIGGRAPH 97). </volume>
Reference-contexts: HDS is presented for comparison. This section discusses a few recently published papers of particular importance. Both [Xia 96] and <ref> [Hoppe 97] </ref> independently demonstrate view-dependent polygonal simplification schemes; [Popovic 97] describes a progressive representation that simplifies the topology as well as the geometry of polygonal models; [Garland 97] describes a traditional LOD algorithm of extraordinary speed and accuracy. <p> Clever streamlining of the math involved makes the screenspace projection of the deviation space surprisingly efficient. Hoppe reports that evaluating all three criteria, which share several subexpressions, takes only 230 CPU cycles on average <ref> [Hoppe 97] </ref>. The most obvious difference between HDS and view-dependent refinement of progressive meshes is probably their underlying mechanism of merging vertices. HDS evolved conceptually from the spatial binning approach of [Rossignac 92], clustering arbitrarily many vertices at once to a single representative vertex. <p> Most of these have already described in the context of HDS and view-dependent progressive mesh refinement. One novel criterion is the use of local illumination information to add detail around regions such as specular highlights and shadow boundaries. The chief differences between their approach and that of <ref> [Hoppe 97] </ref> seem to be the method of constructing the vertex hierarchy (which Xia and Varshney call the merge tree) and the constraints imposed upon the runtime refinement of that hierarchy. In general, the simplifications given by [Hoppe 97] seem to achieve higher fidelity for a given triangle count. <p> The chief differences between their approach and that of <ref> [Hoppe 97] </ref> seem to be the method of constructing the vertex hierarchy (which Xia and Varshney call the merge tree) and the constraints imposed upon the runtime refinement of that hierarchy. In general, the simplifications given by [Hoppe 97] seem to achieve higher fidelity for a given triangle count. <p> Mechanism The field appears to be converging on vertex merging as the underlying mechanism for polygon reduction. All four surface simplification papers in the SIGGRAPH 97 conference, for example, present algorithms based on merging vertices <ref> [Hoppe 97, Luebke 97, Garland 97, Popovic 97] </ref>. The simplicity and robust nature of vertex merging no doubt play a large part in this trend. <p> As a starting point for such a metric, they suggest the sum of the squared distances in RGB color space between corresponding pixels. [Garland 94]. 8.2.3. View-dependence Recent months have seen the publication of view-dependent algorithms from at least three research efforts working independently <ref> [Hoppe 97, Luebke 97, Xia 96] </ref>. View-dependence appears to be an idea whose time has come. The algorithms possess some definite advantages over their traditional view-independent counterparts. View-dependent methods are more general, making fewer implicit assumptions regarding object size. Under traditional LOD, physically large objects must be subdivided. <p> View-dependent techniques do not have this problem, since a single object can be rendered at multiple levels of detail. Moreover, view 96 dependent methods offer the possibility of more sophisticated simplification criteria such as silhouette preservation, preservation of specular highlights [Xia 96], and aggressive simplification of backfacing regions <ref> [Hoppe 97] </ref>. View-independent algorithms can address none of these criteria. However, view-dependent algorithms also suffer some significant drawbacks. To begin with, they inherently involve more runtime computation than view-independent approaches. When the CPU rather than the graphics subsystem is the limiting factor in rendering performance, view-dependent approaches become less attractive.
Reference: [Lorenson 87] <author> Lorenson, William, and H. Cline. </author> <title> Marching Cubes: A High Resolution 3D Surface Construction Algorithm, </title> <journal> Computer Graphics, </journal> <volume> Vol. 21 (SIGGRAPH 87). </volume>
Reference-contexts: Schroeders decimation scheme is designed to operate on the output of the Marching Cubes algorithm for extracting isosurfaces from volumetric data <ref> [Lorenson 87] </ref>, and is still commonly used for this purpose. Marching Cubes output is often heavily overtessellated, with coplanar regions divided into many more polygons than necessary, and Schroeders algorithm excels at removing this redundant geometry. The algorithm operates by making multiple passes over all the vertices in the model. <p> Next the algorithm applies a low-pass filter and resamples the volume. The result is another volumetric representation of the object with lower resolution. Sampling theory guarantees that small, high-frequency features will be eliminated in the low-pass filtered volume. The Marching Cubes algorithm <ref> [Lorenson 87] </ref> is applied to this volume to generate a simplified polygonal model. Since Marching Cubes can create redundant geometry, a standard topology-preserving algorithm is required as a postprocess. Unfortunately, high-frequency details such as sharp edges and squared-off corners seem to contribute greatly to the perception of shape.
Reference: [Lorenson 95] <author> Lorensen, W., </author> <title> "Marching Through the Visible Man," </title> <booktitle> in Proceedings of Visualization '95, </booktitle> <publisher> IEEE Press, </publisher> <month> October </month> <year> 1995. </year>
Reference-contexts: Torp is another maritime CAD model, representing the torpedo room of the same dataset with approximately 699,000 triangles. The Electric Boat Division of General Dynamics Corporation provided both submarine models. Bone6 is a 1.1-million triangle medical model created from an isosurface of the Visible Man volumetric dataset <ref> [Lorenson 95] </ref>. Finally, Powerplant_3M is a 3-million triangle subset of a coal-fired powerplant model, and Powerplant_4M is a 4-million triangle subset of the same model. The entire powerplant dataset, provided courtesy of ABB Engineering, comprises over 13,000,000 triangles in all its original detail.
Reference: [Luebke 97] <author> Luebke, David, and C. Erikson. </author> <title> View-Dependent Simplification of Arbitrary Polygonal Environments, </title> <journal> Computer Graphics, </journal> <volume> Vol. 31 (SIGGRAPH 97). </volume>
Reference-contexts: Mechanism The field appears to be converging on vertex merging as the underlying mechanism for polygon reduction. All four surface simplification papers in the SIGGRAPH 97 conference, for example, present algorithms based on merging vertices <ref> [Hoppe 97, Luebke 97, Garland 97, Popovic 97] </ref>. The simplicity and robust nature of vertex merging no doubt play a large part in this trend. <p> As a starting point for such a metric, they suggest the sum of the squared distances in RGB color space between corresponding pixels. [Garland 94]. 8.2.3. View-dependence Recent months have seen the publication of view-dependent algorithms from at least three research efforts working independently <ref> [Hoppe 97, Luebke 97, Xia 96] </ref>. View-dependence appears to be an idea whose time has come. The algorithms possess some definite advantages over their traditional view-independent counterparts. View-dependent methods are more general, making fewer implicit assumptions regarding object size. Under traditional LOD, physically large objects must be subdivided.
Reference: [Low 97] <author> Low, Kok-Lim, and T.S. Tan. </author> <title> Model Simplification Using Vertex Clustering. </title> <booktitle> In 1997 Symposium on Interactive 3D Graphics (1995), ACM SIGGRAPH, </booktitle> <pages> pp. 75-82. </pages>
Reference: [Popovic 97] <author> Popovic, Jovan, and H. Hoppe. </author> <title> Progressive Simplicial Complexes, </title> <journal> Computer Graphics, </journal> <volume> Vol. 31 (SIGGRAPH 97). </volume>
Reference-contexts: HDS is presented for comparison. This section discusses a few recently published papers of particular importance. Both [Xia 96] and [Hoppe 97] independently demonstrate view-dependent polygonal simplification schemes; <ref> [Popovic 97] </ref> describes a progressive representation that simplifies the topology as well as the geometry of polygonal models; [Garland 97] describes a traditional LOD algorithm of extraordinary speed and accuracy. <p> Mechanism The field appears to be converging on vertex merging as the underlying mechanism for polygon reduction. All four surface simplification papers in the SIGGRAPH 97 conference, for example, present algorithms based on merging vertices <ref> [Hoppe 97, Luebke 97, Garland 97, Popovic 97] </ref>. The simplicity and robust nature of vertex merging no doubt play a large part in this trend.
Reference: [Ronfard 96] <author> Ronfard, Rmi, and J. Rossignac. </author> <title> Full-range Approximation of Triangulated Polyhedra, </title> <journal> Computer Graphics Forum, </journal> <volume> Vol. 15 (Eurographics 96). </volume>
Reference-contexts: The simplicity and robust nature of vertex merging no doubt play a large part in this trend. Earlier work such as [Hoppe 96] and <ref> [Ronfard 96] </ref> has probably played a part as well by demonstrating that high-quality simplification is possible with an algorithm based entirely on edge collapses.
Reference: [Rossignac 92] <author> Rossignac, Jarek, and P. Borrel. </author> <title> Multi-Resolution 3D Approximations for Rendering Complex Scenes, pp. 455-465 in Geometric Modeling in Computer Graphics, </title> <publisher> Springer-Verlag, </publisher> <editor> Eds. B. Falcidieno and T.L. Kunii, </editor> <address> Genova, Italy, 6/28/93-7/2/93. </address> <note> Also published as IBM Research Report RC17697 (77951) 2/19/92. </note>
Reference-contexts: This limitation is perhaps best illustrated anecdotally, with two examples. 7 1.3.2. Drastic Simplification: the Problem with Large Objects IBMs 3-D Interaction Accelerator, or 3DIX for short, is an excellent product that uses the Rossignac-Borrel algorithm <ref> [Rossignac 92] </ref> to enable interactive flythroughs of complex 3-D models. Like other traditional systems, 3DIX generates exactly one sequence of LODs for every object in the model. <p> Simplest: Spatial Subdivision One of the simplest techniques is to classify the vertices of the model with a hierarchical space-partitioning structure. Recall the spatial binning approach introduced by Rossignac and Borrel, which clustered vertices according to a uniform grid <ref> [Rossignac 92] </ref>. The first 55 versions of HDS used a straightforward extension of the Rossignac-Borrel algorithm to construct the vertex tree, clustering vertices in a top-down fashion with an octree. In this method vertices are first ranked by importance using local criteria such as edge length and curvature. <p> Hoppe reports that evaluating all three criteria, which share several subexpressions, takes only 230 CPU cycles on average [Hoppe 97]. The most obvious difference between HDS and view-dependent refinement of progressive meshes is probably their underlying mechanism of merging vertices. HDS evolved conceptually from the spatial binning approach of <ref> [Rossignac 92] </ref>, clustering arbitrarily many vertices at once to a single representative vertex. Progressive meshes grew out of the authors early work on mesh optimization, and rely instead on the edge collapse operation [Hoppe 96]. An edge collapse merges exactly two vertices, which must share an edge in the mesh.
Reference: [Schroeder 92] <author> Schroeder, William, J. Zarge and W. Lorenson, </author> <title> Decimation of Triangle Meshes, </title> <journal> Computer Graphics, </journal> <volume> Vol. 26 (SIGGRAPH 92). </volume>
Reference-contexts: This constraint limits the simplification possible, however, since objects of high genus cannot be simplified below a certain number of polygons without closing holes in the model. Moreover, a topology-preserving approach requires a mesh with valid topology to begin with. Some algorithms, such as <ref> [Schroeder 92] </ref>, are topology-tolerant: they ignore regions in the mesh with invalid local topology, leaving those regions unsimplified. Other algorithms faced with such regions may simply crash. Topology-modifying algorithms do not necessarily preserve local or global topology.
Reference: [Shirman 93] <author> Shirman, L., and Abi-Ezzi, S. </author> <title> "The Cone of Normals Technique for Fast Processing of Curved Patches", </title> <journal> Computer Graphics Forum (Proc. </journal> <volume> Eurographics '93) Vol. 12, No 3, </volume> <year> (1993), </year> <pages> p.p. 261-272. 105 </pages>
Reference-contexts: A conservative but efficient silhouette test can be plugged into the HDS framework by adding two fields to the Node structure: coneNormal is a vector and coneAngle is a floating-point scalar. These fields together specify a cone of normals <ref> [Shirman 93] </ref> for the node, which bounds all the normals of all the triangles supported by the node. At run time a viewing cone is created that originates from the viewer position and tightly encloses the bounding sphere of the node (Figure 11).
Reference: [Taubin 96] <author> Taubin, Gabriel, and J. Rossignac. </author> <title> Geometric Compression through Topological Surgery, </title> <note> IBM Research Technical Report RC-20340 (1996). </note>
Reference-contexts: Taubin and Rossignac extend this idea by compressing the topological connectivity of polygons in the mesh. Decomposing the triangulated model into a tree of linear triangle strips allows significant compression of connectivity information, down to an average of only two bits per triangle <ref> [Taubin 96] </ref>. The Taubin-Rossignac algorithm has since been incorporated into a proposal for the next-generation binary format of VRML, the Virtual Reality Modeling Language, and the authors of the proposal report compression ratios of 50:1 or more for large VRML models [Taubin 97]. 97 8.2.5.
Reference: [Taubin 97] <author> Taubin, Gabriel (Chair). </author> <title> VRML Compressed Binary Format Working Group Home Page. </title> <note> For more information see: http://www.vrml.org/WorkingGroups/vrml-cbf/cbfwg.html. </note>
Reference-contexts: The Taubin-Rossignac algorithm has since been incorporated into a proposal for the next-generation binary format of VRML, the Virtual Reality Modeling Language, and the authors of the proposal report compression ratios of 50:1 or more for large VRML models <ref> [Taubin 97] </ref>. 97 8.2.5. Progressive Transmission As the bandwidth and processing power available to home users increase, 3-D graphics seem likely to undergo a mass-market debut similar to that which has recently shaken the Internet.
Reference: [Teller 91] <author> Teller, Seth, and C. Sequin. </author> <title> Visibility Preprocessing for Interactive Walkthroughs, </title> <journal> Computer Graphics, </journal> <volume> Vol. 25 (SIGGRAPH 91). </volume>
Reference-contexts: The visibility processing approaches described by John Airey and Seth Teller are excellent examples, using the structure of architectural models to divide the world into cells that are mostly mutually invisible <ref> [Airey 90, Teller 91] </ref>. Ned Greene, Hansong Zhang, and others have tackled the more difficult problem of general polygonal environments [Greene 93, Zhang 97].
Reference: [Turk 92] <author> Turk, Greg. </author> <title> Retiling Polygonal Surfaces, </title> <journal> Computer Graphics, </journal> <volume> Vol. 26 (SIGGRAPH 92). </volume>
Reference: [Xia 96] <author> Xia, Julie, and A. Varshney. </author> <title> Dynamic View-Dependent Simplification for Polygonal Models, Visualization 96. </title>
Reference-contexts: Silhouette Preservation Silhouettes and contours are particularly important visual cues for object recognition. Detecting nodes along object silhouettes and allocating more detail to those regions can therefore disproportionately increase the perceived quality of a simplification <ref> [Xia 96] </ref>. A conservative but efficient silhouette test can be plugged into the HDS framework by adding two fields to the Node structure: coneNormal is a vector and coneAngle is a floating-point scalar. <p> HDS is presented for comparison. This section discusses a few recently published papers of particular importance. Both <ref> [Xia 96] </ref> and [Hoppe 97] independently demonstrate view-dependent polygonal simplification schemes; [Popovic 97] describes a progressive representation that simplifies the topology as well as the geometry of polygonal models; [Garland 97] describes a traditional LOD algorithm of extraordinary speed and accuracy. <p> As a starting point for such a metric, they suggest the sum of the squared distances in RGB color space between corresponding pixels. [Garland 94]. 8.2.3. View-dependence Recent months have seen the publication of view-dependent algorithms from at least three research efforts working independently <ref> [Hoppe 97, Luebke 97, Xia 96] </ref>. View-dependence appears to be an idea whose time has come. The algorithms possess some definite advantages over their traditional view-independent counterparts. View-dependent methods are more general, making fewer implicit assumptions regarding object size. Under traditional LOD, physically large objects must be subdivided. <p> View-dependent techniques do not have this problem, since a single object can be rendered at multiple levels of detail. Moreover, view 96 dependent methods offer the possibility of more sophisticated simplification criteria such as silhouette preservation, preservation of specular highlights <ref> [Xia 96] </ref>, and aggressive simplification of backfacing regions [Hoppe 97]. View-independent algorithms can address none of these criteria. However, view-dependent algorithms also suffer some significant drawbacks. To begin with, they inherently involve more runtime computation than view-independent approaches.

References-found: 30

