URL: http://www.cs.umd.edu/users/melo/ADELE/csm94.ps
Refering-URL: http://www.cs.umd.edu/users/melo/papers/csm94.html
Root-URL: 
Email: e-mail: belkhatir@imag.fr  e-mail: melo@umiacs.umd.edu  
Title: Evolving Software Processes by Tailoring the Behavior of Software Objects  
Author: Noureddine Belkhatir Walcelio L. Melo 
Date: September 1994.  
Note: Published in the Proc. of the IEEE Int'l Conf. on Software Maintenance.  
Address: 38041 Grenoble France  College Park, MD, 20742 USA  Victoria, Canada,  
Affiliation: LGI  University of Maryland UMIACS,  
Abstract: Software process evolution corresponds to the act of improving the existing prescriptive software process models in a controlled and supported way. As software processes change constantly, it is therefore necessary to support one or more methods for assisting environment administrators in improving models. Changes are made in order to adapt software process models to new requirements, correct inconsistencies encountered in the course of execution, and modify, add or remove certain constraints. This article shows how software process evolution is supported in the Tempo. Tempo is a process-oriented software engineering environment where software processes are formally described in an object-oriented process schema. In Tempo, a process schema is comprised of descriptions of software agents, software products and software processes. A new approach is presented which supports the dynamic evolution of software process descriptions. In this approach, software process change is the result of tailoring the behavior of software objects manipulated during software process en-action. Keywords: Software process evolution, process-centered software engineering environments, object with roles, object-oriented approach, event-condition-action rules, active database. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arbaoui and F. Oquendo. </author> <title> Peace : goal-oriented approach and nonmonotonic logic-based formalism for supporting process modeling enaction and evolution. </title> <editor> In A. Finkelstein, J. Kramer, and B. Nuseibeh, editors, </editor> <title> Software Process Modelling and Technology. </title> <publisher> Research Studies Press, </publisher> <year> 1994. </year>
Reference-contexts: Melmac [8] provides modification points. If a modification point is associated with a software process step, for instance PS, during process enactment, but before PS execution, Melmac could use the procedure described in such a modification point to accomplish the required process change. Peace <ref> [1] </ref> provides meta-plans which are responsible for describing procedures to be followed for modifying a software process model when an exception arises during process enaction.
Reference: [2] <author> N. S. Barghouti and G. E. Kaiser. </author> <title> Scaling-up rule-based development environments. </title> <journal> Int'l Journal on Software Engineering & Knowledge Engineering, </journal> <volume> 2(1) </volume> <pages> 59-78, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: In Marvel [9] the process description can evolve due to changes to the pre- and post-conditions which encapsulate rules. Marvel ensures the consistency of rules in relation to the execution mechanism and in relation to the descriptions contained in its data schema <ref> [2] </ref>. In contrast to AP5, process description evolution is static; processes must be stopped in order to permit changes to their descriptions. Once it has been modified, the new description is compiled and validated. <p> Backward chaining is not implicitly supported by Adele/Tempo, i.e, rules are not interpreted in order to achieve a user-defined goal. Due to these two characteristics, TECA rules are, unfortunately, added to and removed from the process schema without consistency verification, unlike other rule-based system, such as Marvel <ref> [2] </ref>, where the pool of rules is supposed consistent. 5.3 The role concept and process evo lution Tempo process programming language is heavily based on the role concept.
Reference: [3] <author> N. </author> <month> Belkhatir. </month> <institution> Nomade : un noyau d'environnement pour la programma-tion globale. These de doctorat, INPG, Grenoble, France, </institution> <year> 1988. </year>
Reference-contexts: believe that Prism's change model could be implemented using Tempo, once the two main environmental facilities provided by Prism, i.e. dependency structure and change structure [10], could be realized using the Tempo's resource manager of (i.e., the Adele database [4]) and the Tempo's activity manager (i.e. the Nomade trigger mechanism <ref> [3] </ref>). In AP5 [13] software process model evolution is provided using trigger modification commands, the addition of new rules and the removal of existing ones. As AP5 was built using LISP, an environment administrator can change the process model without stopping software process execution. <p> Adele 2 [4] is a commercial product which is the result of the union of two long term projects in the framework of the Laboratoire de Genie Informatique de Grenoble. Adele 2 integrates the results produced by the Adele 1 and Nomade projects <ref> [3] </ref>. Adele 1 [3] was a version management system hard-coded with a configuration builder. Nomade was a prototype of an active software engineering database. This database was driven by an object-oriented data model. <p> Adele 2 [4] is a commercial product which is the result of the union of two long term projects in the framework of the Laboratoire de Genie Informatique de Grenoble. Adele 2 integrates the results produced by the Adele 1 and Nomade projects <ref> [3] </ref>. Adele 1 [3] was a version management system hard-coded with a configuration builder. Nomade was a prototype of an active software engineering database. This database was driven by an object-oriented data model. The active part of this database was supported by a trigger mechanism, which was driven by event-condition-action rules.
Reference: [4] <author> N. Belkhatir, J. Estublier, and W. L. Melo. </author> <title> Adele 2: a support to large software development process. </title> <editor> In M. Dowson, editor, </editor> <booktitle> Proc. of the First Int'l Conf. on the Software Process, </booktitle> <pages> pages 159-170, </pages> <address> Redondo Beach, CA, </address> <month> October 21-22 </month> <year> 1991. </year> <note> IEEE CS Press. </note>
Reference-contexts: In fact, we believe that Prism's change model could be implemented using Tempo, once the two main environmental facilities provided by Prism, i.e. dependency structure and change structure [10], could be realized using the Tempo's resource manager of (i.e., the Adele database <ref> [4] </ref>) and the Tempo's activity manager (i.e. the Nomade trigger mechanism [3]). In AP5 [13] software process model evolution is provided using trigger modification commands, the addition of new rules and the removal of existing ones. <p> The Tempo's resource manages uses Adele database as a persistent object base for storing objects and activities, and for tracing the project's progress <ref> [4] </ref>. It supports an entity-relationship data model which is extended with object-oriented concepts like inheritance, methods and encapsulation. Simple and composite objects with attributes and relation ships can be described and managed. * An activity manager which is responsible for the control integration in our platform. <p> This component represents the conceptual component responsible for process integration in the Tempo architecture. Adele 2 plays the role of resource manager and activity manager in the current version of Tempo [7]. Adele 2 <ref> [4] </ref> is a commercial product which is the result of the union of two long term projects in the framework of the Laboratoire de Genie Informatique de Grenoble. Adele 2 integrates the results produced by the Adele 1 and Nomade projects [3].
Reference: [5] <author> N. Belkhatir, J. Estublier, and W. L. Melo. </author> <title> User modeling and control in the Adele system. </title> <booktitle> In Proc. of the 4th Int'l Conf. on Computing and Information, </booktitle> <pages> pages 334-337, </pages> <address> Toronto, Ontario, Canada, May 28-30 1992. </address> <publisher> IEEE CS Press. </publisher>
Reference-contexts: These commands can be only used by privileged users <ref> [5] </ref>). 5.2 Updating Temporal-event condition-action rules Adele/Tempo provides pre-defined commands to incrementally change rules, events and methods defined in the process schema [12]. These commands can be only used by authorized users [5]. <p> These commands can be only used by privileged users <ref> [5] </ref>). 5.2 Updating Temporal-event condition-action rules Adele/Tempo provides pre-defined commands to incrementally change rules, events and methods defined in the process schema [12]. These commands can be only used by authorized users [5]. The body of methods already defined in the process schema can be modified without triggering modification of the enacting software processes occurrences. Constraints can be relaxed by changing the event clause of the Temporal-event-condition-action rules (TECA rules).
Reference: [6] <author> N. Belkhatir, J. Estublier, and W. L. Melo. </author> <title> Software process model and work space control in the Adele/Tempo system. </title> <editor> In L. Osterweil, editor, </editor> <booktitle> Proc. of the 2nd Int'l Conf. on the Software Process, </booktitle> <pages> pages 2-11, </pages> <address> Berlin, Germany, </address> <month> February </month> <year> 1993. </year> <note> IEEE CS Press. </note>
Reference-contexts: Readers familiar with the Tempo <ref> [6, 7, 12] </ref> can skip this section. 4.1 Product modeling Software products are described using the Adele data model and supported by the Adele database. The Adele data model is based on the entity-association model and integrates object-oriented concepts.
Reference: [7] <author> N. Belkhatir and W. L. Melo. </author> <title> Supporting software maintenace processes in Tempo. </title> <booktitle> In Proc. of the Conf. on Software Maintenance, </booktitle> <pages> pages 21-30, </pages> <address> Montreal, Canada, </address> <month> September </month> <year> 1993. </year> <note> IEEE CS Press. </note>
Reference-contexts: This activity manager is driven by temporal-event-condition-action rules (TECA) and supported by the Adele's trigger mechanism. We enhanced Adele's trigger mechanism with the ability to ma nipulate temporal expressions <ref> [7, 12] </ref>. 2 * A process manager which offers the concepts of process and role. Process execution is supported by work environments (WE) wherein software activities are performed. The process manager, based on the activity manager, manages communication and synchronization between teams, and between agents involved in the same project. <p> The process manager, based on the activity manager, manages communication and synchronization between teams, and between agents involved in the same project. It also controls the consistency of complex objects used simultaneously in different work environments by different agents <ref> [7] </ref>. This component represents the conceptual component responsible for process integration in the Tempo architecture. Adele 2 plays the role of resource manager and activity manager in the current version of Tempo [7]. <p> It also controls the consistency of complex objects used simultaneously in different work environments by different agents <ref> [7] </ref>. This component represents the conceptual component responsible for process integration in the Tempo architecture. Adele 2 plays the role of resource manager and activity manager in the current version of Tempo [7]. Adele 2 [4] is a commercial product which is the result of the union of two long term projects in the framework of the Laboratoire de Genie Informatique de Grenoble. Adele 2 integrates the results produced by the Adele 1 and Nomade projects [3]. <p> Readers familiar with the Tempo <ref> [6, 7, 12] </ref> can skip this section. 4.1 Product modeling Software products are described using the Adele data model and supported by the Adele database. The Adele data model is based on the entity-association model and integrates object-oriented concepts.
Reference: [8] <author> W. Deiters and V. Gruhn. </author> <title> Systematic development of formal software process models. </title> <booktitle> In Proc. of the 2nd European Software Engineering Conf., </booktitle> <institution> Univ. of Warwick, Conventry, UK, </institution> <month> September </month> <year> 1989. </year>
Reference-contexts: Once it has been modified, the new description is compiled and validated. After these stages, the processes can continue execution, in a new context which takes account of the modification. Melmac <ref> [8] </ref> provides modification points. If a modification point is associated with a software process step, for instance PS, during process enactment, but before PS execution, Melmac could use the procedure described in such a modification point to accomplish the required process change.
Reference: [9] <author> G. E. Kaiser and I. Z. Ben-Shaul. </author> <title> Process evolution in the Marvel environment. </title> <note> In Schafer [14]. </note>
Reference-contexts: As described in [12], Tempo also provides built-in commands making it possible to add incrementally new trigger rules to data and process schema. We discuss how Tempo provides this kind of evolution in the next section. In Marvel <ref> [9] </ref> the process description can evolve due to changes to the pre- and post-conditions which encapsulate rules. Marvel ensures the consistency of rules in relation to the execution mechanism and in relation to the descriptions contained in its data schema [2].
Reference: [10] <author> N. H. Madhavji. </author> <title> Environment evolution: The Prism model of changes. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(5) </volume> <pages> 380-392, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: In fact, we believe that Prism's change model could be implemented using Tempo, once the two main environmental facilities provided by Prism, i.e. dependency structure and change structure <ref> [10] </ref>, could be realized using the Tempo's resource manager of (i.e., the Adele database [4]) and the Tempo's activity manager (i.e. the Nomade trigger mechanism [3]). In AP5 [13] software process model evolution is provided using trigger modification commands, the addition of new rules and the removal of existing ones.
Reference: [11] <author> N. H. Madhavji and W. Schafer. </author> <title> Prism | methodology and process-oriented environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(12) </volume> <pages> 1270-1283, </pages> <month> december </month> <year> 1991. </year>
Reference-contexts: Recently data schema evolution mechanisms, such as those found in object-oriented database management systems, have been adapted to undertake object description evolution. However, so far, little software engineering research work has concentrated on supporting software process evolution. In Prism <ref> [11] </ref> a process is managed using a change life cycle model, comprising three phases: simulation, initialization and operation. Process evolution is supported by providing a kind of spiral model.
Reference: [12] <author> W. L. </author> <type> Melo. </type> <institution> Tempo: Un environnement de developpement Logiciel Centre Procedes de Fabrication. These de Doctorat, Universite Joseph Fourier (Grenoble I), Laboratoire de Genie Infor-matique, Grenoble, </institution> <address> France, 22 de Octobre 1993. </address>
Reference-contexts: As AP5 was built using LISP, an environment administrator can change the process model without stopping software process execution. Management of consistency between modifications and the currently executing processes is delegated to those responsible for the modifications. As described in <ref> [12] </ref>, Tempo also provides built-in commands making it possible to add incrementally new trigger rules to data and process schema. We discuss how Tempo provides this kind of evolution in the next section. <p> This activity manager is driven by temporal-event-condition-action rules (TECA) and supported by the Adele's trigger mechanism. We enhanced Adele's trigger mechanism with the ability to ma nipulate temporal expressions <ref> [7, 12] </ref>. 2 * A process manager which offers the concepts of process and role. Process execution is supported by work environments (WE) wherein software activities are performed. The process manager, based on the activity manager, manages communication and synchronization between teams, and between agents involved in the same project. <p> Nomade incorporated the version management system of Adele 1 for dealing with the evolution of software artifacts in versions. Adele 1's configuration manager was also included in the nucleus of No-made. Tempo <ref> [12] </ref> is the successor of Nomade. Tempo is able to deal with user defined software process models, multi-points of view of software artifacts, temporal events, long-time duration activities, and it provides support for communication of software activities. <p> Readers familiar with the Tempo <ref> [6, 7, 12] </ref> can skip this section. 4.1 Product modeling Software products are described using the Adele data model and supported by the Adele database. The Adele data model is based on the entity-association model and integrates object-oriented concepts. <p> in different software processes. 5 Process evolution support in Adele/Tempo 5.1 Adding process types to a process schema The Tempo process language is based on the object-oriented approach where process types, data types and connection types are defined in a process schema and "instantiated" as objects in the Adele database <ref> [12] </ref>. The consistency of the process schema is assured by standard multiple inheritance rules. <p> The Snapshot B shows an example of an invalid process schema change, because adding process T4 would change the inheritance graph of the already instantiated process types. (Tempo provides pre-defined commands making it possible to build up a process schema incrementally <ref> [12] </ref>. These commands can be only used by privileged users [5]). 5.2 Updating Temporal-event condition-action rules Adele/Tempo provides pre-defined commands to incrementally change rules, events and methods defined in the process schema [12]. These commands can be only used by authorized users [5]. <p> already instantiated process types. (Tempo provides pre-defined commands making it possible to build up a process schema incrementally <ref> [12] </ref>. These commands can be only used by privileged users [5]). 5.2 Updating Temporal-event condition-action rules Adele/Tempo provides pre-defined commands to incrementally change rules, events and methods defined in the process schema [12]. These commands can be only used by authorized users [5]. The body of methods already defined in the process schema can be modified without triggering modification of the enacting software processes occurrences. Constraints can be relaxed by changing the event clause of the Temporal-event-condition-action rules (TECA rules).
Reference: [13] <author> K. Narayanaswamy. </author> <title> Enactment in a process-centered softwre engineering environment. </title> <note> In Schafer [14]. </note>
Reference-contexts: In AP5 <ref> [13] </ref> software process model evolution is provided using trigger modification commands, the addition of new rules and the removal of existing ones. As AP5 was built using LISP, an environment administrator can change the process model without stopping software process execution.
Reference: [14] <author> W. Schafer, </author> <title> editor. </title> <booktitle> Proc. of the 8th Int'l Software Process Workshop, </booktitle> <address> Germany, 1993. </address> <publisher> IEEE CS Press. </publisher>
Reference: [15] <author> I. Thomas. </author> <title> Version and configuration management on a software enginnering database. </title> <booktitle> ACM 10 Software Engineering Notes, </booktitle> <volume> 14(7) </volume> <pages> 23-25, </pages> <month> Novem--ber </month> <year> 1989. </year> <month> 11 </month>
Reference-contexts: For the rest of this paper, we will take evolution of process programs to mean tailoring or customizing the behavior of a POSE in order to adapt its functioning to new needs or new situations. Unlike previous generations of software engineering systems, such as Pact <ref> [15] </ref>, where the way the software processes must be performed is hard-wired in the system by the tool constructor, evolving software process programs are the core of a POSE.
References-found: 15

