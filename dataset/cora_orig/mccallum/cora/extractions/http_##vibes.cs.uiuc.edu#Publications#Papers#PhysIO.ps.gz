URL: http://vibes.cs.uiuc.edu/Publications/Papers/PhysIO.ps.gz
Refering-URL: http://vibes.cs.uiuc.edu/Publications/publications.htm
Root-URL: http://www.cs.uiuc.edu
Title: A Comparison of Logical and Physical Parallel I/O Patterns  
Author: Huseyin Simitci Daniel A. Reed 
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract: Although there are several extant studies of parallel scientific application request patterns, there is little experimental data on the correlation of physical input/output patterns with application input/output stimuli. To understand these correlations, we have instrumented the SCSI device drivers of the Intel Paragon OSF/1 operating system to record key physical input/output activities and have correlated this data with the input/output patterns of scientific applications captured via the Pablo analysis toolkit. Our analysis shows that disk hardware features profoundly affect the distribution of request delays and that current parallel file systems respond to parallel application input/output patterns in non-scalable ways. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Baker, M. G. </author> <title> Measurements of a Distributed File System. </title> <booktitle> Proceedings of the Thirteenth Symposium on Operating System Principles 25, </booktitle> <address> 5 (Oct. </address> <year> 1991), </year> <pages> 198-212. </pages> <institution> Association for Computing Machinery. </institution>
Reference-contexts: They observed that parallel input/output patterns were more complex than expected, with small requests quite common. Complementary studies of physical input/output patterns have focused on modeling and simulation of single disks [19] and analysis of disk workloads in UNIX systems <ref> [18, 1] </ref>. This work showed that without higher level file system optimizations, the benefits from even the best disk scheduling algorithms were limited [20]. Our work differs from these earlier studies by examining the correlations among parallel application input/output requests, parallel file system policies, and physical disk request streams.
Reference: [2] <author> Crandall, P., Aydt, R. A., Chien, A. A., and Reed, D. A. </author> <title> Input/Output Characterization of Scalable Parallel Applications. </title> <booktitle> In Proceedings of Supercomputing 1995 (1996), </booktitle> <pages> pp. </pages> <publisher> CD-ROM. </publisher>
Reference-contexts: 1 Introduction Input/output for scalable parallel systems continues to be the major performance bottleneck for many large-scale scientific applications <ref> [2, 14] </ref>. <p> Moreover, most current parallel file systems were constructed as extensions of workstation file systems and optimized for large, sequential data transfers. Recent experimental studies <ref> [14, 2, 22, 23, 16] </ref> have shown that parallel applications have much more complex access patterns, with greater spatial and temporal variability, than first suspected. <p> To understand the implications of application request patterns for parallel file systems and the efficacy of parallel disk configurations, we have augmented the Pablo performance analysis environment's support for application input/output tracing <ref> [2] </ref> with SCSI device driver instrumentation on the Intel Paragon XP/S. <p> To minimize potential input/output perturbations due to performance data extraction, the Pablo toolkit supports both real-time reduction of input/output performance data and capture of detailed event traces. These two options trade computation perturbation for input/output perturbation. Extensive use of the Pablo toolkit for application input/output characterization <ref> [2, 21, 16] </ref> has shown that the instrumentation overhead is negligible for most application codes. 3.3 Physical I/O Instrumentation Device drivers define the interface between file system services and input/output devices, isolating the idiosyncrasies of specific devices be 3 Parameter 64 Disks 16 Disks 12 RAIDs Stripe group 64 16 12 <p> These span a broad range of disciplines and have been 7 the subject of several application characteriza-tion studies <ref> [2, 21, 16] </ref>. As an initial basis for integrated analysis of application and physical input/output analysis, we selected one code (MESSKIT) from the SIO suite. This code has been the subject of earlier application analysis [2] and is representative of the input/output patterns observed in parallel scientific applications. <p> As an initial basis for integrated analysis of application and physical input/output analysis, we selected one code (MESSKIT) from the SIO suite. This code has been the subject of earlier application analysis <ref> [2] </ref> and is representative of the input/output patterns observed in parallel scientific applications. As such, it provides a baseline for comparison of logical and physical input/output patterns. <p> Though the benchmarks and MESSKIT chemistry application we studied on the Intel Paragon XP/S are but a few samples from a large space of possible input/output patterns, earlier application characterization studies <ref> [2, 22, 23, 16, 14] </ref> suggest that our selections are representative of current practice. Although a wider range of experiments is desirable, the level of instrumentation and experiments we conducted required access to the operating system code and single user time to load experimental operating system kernels.
Reference: [3] <author> Forin, A., Golub, D., and Bershad, B. </author> <title> An I/O System for Mach 3.0. </title> <booktitle> In Proceedings of the USENIX Mach Symposium (Nov. 1991), USENIX, </booktitle> <pages> pp. 163-176. </pages>
Reference-contexts: To generate these histograms, we have modified the SCSI disk driver read/write routines <ref> [3] </ref> to timestamp each request on arrival, transmission to or receipt from the device, and departure.
Reference: [4] <author> Gibson, G. A., Vitter, J. S., and Wilkes, J. </author> <title> Strategic Directions in Computing Research: Working Group on Storage I/O Issues in Large-Scale Computing. </title> <journal> ACM Computing Surveys 28, </journal> <month> 4 (Dec. </month> <year> 1996). </year>
Reference-contexts: Because parallel file systems mediate application input/output stimuli and physical input/output responses, developing appropriate designs for scalable parallel input/output systems requires a detailed characterization of the input/output behavior at multiple system levels <ref> [4] </ref>. To correlate parallel application input/output stimuli with disk system responses, we augmented our portable application input/output instrumentation infrastructure [16] with disk device driver instrumentation. Built atop the Pablo performance analysis toolkit, the former can capture both statistical summaries and timestamped traces of application input/output patterns.
Reference: [5] <institution> High Performance Computational Chemistry Group, Pacific Northwest National Laboratory. </institution> <month> NWChem, </month> <title> A Computational Chemistry Package for Parallel Computers, Version 1.1. </title> <address> Richland, Washington, 99352, USA, </address> <year> 1995. </year>
Reference-contexts: We then describe our logical (application) and physical (disk) input/output characterization methodology in x3. As a baseline for analysis of input/output behavior in large scientific applications, x4 summarizes logical and physical input/output characteristics for a set of simple benchmarks. This is followed in x5 by a description of MESSKIT <ref> [5] </ref>, a large, multi-phase quantum chemistry code with demanding input/output requirements that are representative of current parallel scientific applications. In x6-x7 we analyze the logical and physical input/output patterns for MESSKIT when executed on three different hardware configurations. <p> This code has been the subject of earlier application analysis [2] and is representative of the input/output patterns observed in parallel scientific applications. As such, it provides a baseline for comparison of logical and physical input/output patterns. MESSKIT is a FORTRAN implementation of the Hartree-Fock self-consistent field method <ref> [5] </ref> that computes the electron density around a molecule by considering each electron in the molecule in the collective field of the others. The implementation uses basis sets derived from the atoms and the relative geometry of the atomic centers.
Reference: [6] <author> Jensen, D. W., and Reed, D. A. </author> <title> File Archive Activity in a Supercomputing Environment. </title> <booktitle> In Proceedings of the 1993 ACM International Conference on Supercomputing (July 1993). </booktitle>
Reference-contexts: Notable examples include Lawrie and Randell's study [8] of automatic file migration algorithms, Stritter's analysis [25] of file lifetime distributions, Smith's study [24] of mainframe file access behavior, and Reed and Jensen's study <ref> [6] </ref> of file archive accesses. More recently, Miller and Katz [10] captured detailed traces of application file accesses from a suite of Cray applications, identifying compulsory, checkpoint, and staging input/output. Pasquale and Polyzos [11, 12] followed with two additional studies of vector workloads, concluding that most input/output had regular behavior.
Reference: [7] <author> Kotz, D., and Nieuwejaar, N. </author> <title> Dynamic File-Access Characteristics of a Production Parallel Scientific Workload. </title> <booktitle> In Proceedings of Supercomputing '94 (November 1994). </booktitle>
Reference-contexts: Pasquale and Polyzos [11, 12] followed with two additional studies of vector workloads, concluding that most input/output had regular behavior. In the parallel domain, Kotz et al <ref> [14, 7] </ref>, used library instrumentation to study input/output patterns on the Intel iPSC/860 and the Thinking Machines CM-5. They observed that parallel input/output patterns were more complex than expected, with small requests quite common.
Reference: [8] <author> Lawrie, D. H., Randal, J. M., and Barton, R. R. </author> <title> Experiments with Automatic File Migration. </title> <booktitle> IEEE Computer (July 1982), </booktitle> <pages> 45-55. </pages>
Reference-contexts: Finally, x8-x9 summarize our findings and outline directions for future work. 2 Related Work Though our understanding of input/output parallelism is still evolving, there is a long history of file access characterization for mainframes and vector supercomputers. Notable examples include Lawrie and Randell's study <ref> [8] </ref> of automatic file migration algorithms, Stritter's analysis [25] of file lifetime distributions, Smith's study [24] of mainframe file access behavior, and Reed and Jensen's study [6] of file archive accesses.
Reference: [9] <author> Madhyastha, T., and Reed, D. A. </author> <title> Intelligent, Adaptive File System Policy Selection. </title> <booktitle> In Proceedings of Frontiers'96 (1996). </booktitle>
Reference-contexts: For example, we observed that the combination of PFS policies and data distributions across disks eliminated almost all access locality present in the application pattern. Automatic access pattern classification <ref> [9] </ref>, coupled with performance-directed adaptive control for policy selection [17], could dynamically tailor policies to access patterns. Fourth, despite the temptation to sacrifice input/output systems for additional processors or primary memory, high-performance parallel systems can realize their potential only when balanced. <p> Simply put, no single file policy or data distribution is optimal for all application access patterns. Based on this analysis, we are exploring three approaches to input/output optimization: qualitative access pattern classification based on trained neural networks and hidden Markov models <ref> [9] </ref>, flexible policy selection using fuzzy logic techniques [17], and adaptive storage formats based on redundant representations. 5 Clearly, for some application domains this is not the case. 14 Acknowledgments We thank Evgenia Smirni, Christopher Elford, Tara Madhyastha and Ruth Aydt for their insights on parallel input/output and instrumentation.
Reference: [10] <author> Miller, E. L., and Katz, R. H. </author> <title> Input/Output Behavior of Supercomputer Applications. </title> <booktitle> In Proceedings of Supercomputing '91 (November 1991), </booktitle> <pages> pp. 567-576. </pages>
Reference-contexts: Notable examples include Lawrie and Randell's study [8] of automatic file migration algorithms, Stritter's analysis [25] of file lifetime distributions, Smith's study [24] of mainframe file access behavior, and Reed and Jensen's study [6] of file archive accesses. More recently, Miller and Katz <ref> [10] </ref> captured detailed traces of application file accesses from a suite of Cray applications, identifying compulsory, checkpoint, and staging input/output. Pasquale and Polyzos [11, 12] followed with two additional studies of vector workloads, concluding that most input/output had regular behavior.
Reference: [11] <author> Pasquale, B. K., </author> <title> and Polyzos, </title> <publisher> G. </publisher>
Reference-contexts: More recently, Miller and Katz [10] captured detailed traces of application file accesses from a suite of Cray applications, identifying compulsory, checkpoint, and staging input/output. Pasquale and Polyzos <ref> [11, 12] </ref> followed with two additional studies of vector workloads, concluding that most input/output had regular behavior. In the parallel domain, Kotz et al [14, 7], used library instrumentation to study input/output patterns on the Intel iPSC/860 and the Thinking Machines CM-5.
References-found: 11

