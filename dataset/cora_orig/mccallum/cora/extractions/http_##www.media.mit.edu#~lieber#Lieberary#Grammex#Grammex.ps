URL: http://www.media.mit.edu/~lieber/Lieberary/Grammex/Grammex.ps
Refering-URL: http://www.media.mit.edu/~lieber/Lieberary/Grammex/Grammex-Intro.html
Root-URL: http://www.media.mit.edu
Email: lieber@media.mit.edu  nardi@apple.com, dave.wright@apple.com  
Phone: +1 617 253 0315  +1 408 974 8708, +1 408 974 6018  
Title: Grammex: Defining Grammars by Example of the text editing facilities available across all computer applications.
Author: Henry Lieberman Bonnie A. Nardi, David Wright 
Note: Parsers are also beginning to be deployed as an integral part  finds phone numbers, email addresses  such as email addresses,  
Address: Cambridge, MA 02139 USA  1 Infinite Loop Cupertino, CA 95014 USA  
Affiliation: Media Laboratory Massachusetts Institute of Technology  Apple Computer, Advanced Technology Group  
Abstract: Parsers are powerful tools for computer understanding of text, whether the language is a natural language or a formal language. To make the computational power of these tools fully available to an end user, a parser should be user-extensible. Until now, a user who wished to control a parser was forced to write or edit a grammar, a text file containing rules. Editing grammars is often difficult and error-prone for end users since the effect of writing specific rules, and interaction between rules, can often be unclear. Grammex ["Grammars by Example"] is the first direct manipulation interface designed to allow ordinary users to define grammars interactively. Instead of writing a grammar in an abstract rule language, the user presents concrete examples of text that he or she would like the parser to recognize. The user describes the text by selecting substrings, and choosing possible interpretations of the text from popup menus of suggestions heuristically computed by Grammex. Grammex compiles grammar rules that can be used as the input to a traditional parser. PARSERS AND GRAMMARS The recent advent of the WorldWide Web has sparked renewed interest in text parsing technology. Much valuable information exists on the Web and in our desktop interfaces, but in an unstructured form. A tremendous opportunity exists to take advantage of the computer's ability to recognize structure, even if that recognition is only partial [1]. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Cowie, J. and W. Lehnert, </author> <title> Information Extraction, </title> <journal> Communications of the ACM, </journal> <volume> 39(1), </volume> <month> January </month> <year> 1996. </year>
Reference-contexts: Much valuable information exists on the Web and in our desktop interfaces, but in an unstructured form. A tremendous opportunity exists to take advantage of the computer's ability to recognize structure, even if that recognition is only partial <ref> [1] </ref>. Parsers are also beginning to be deployed as an integral part of the text editing facilities available across all computer applications. Examples are Apple Data Detectors [9] and the Intel Selection Recognition Agent [10].
Reference: 2. <author> Cypher, A., ed., </author> <title> Watch What I Do: Programming by Demonstration, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1993. </year>
Reference-contexts: Tourmaline [7] induced stylistic patterns of text formatting [e.g. fonts, sizes] rather than grammar rules, from examples. Grammex's approach is strongly related to a similar approach for generating procedures in a programming language, called programming by example or programming by demonstration <ref> [2] </ref>. In programming by example, the user demonstrates a sequence of operations in an interactive interface, and the system records these steps and the objects they were performed on. Machine learning techniques are used to generalize the program so that it works on examples analogous to the ones originally presented.
Reference: 3. <author> Lieberman, H., Tinker: </author> <title> A Programming by Demonstration System for Beginning Programmers, </title> <booktitle> in [2]. </booktitle>
Reference-contexts: There is also an overview window, containing an editable list of the examples and rules defined so far. The overall structure of the interface was inspired by the author's Tinker programming by example system <ref> [3] </ref>. An example: Defining a grammar for email ad dre sse s We start defining the pattern for EMail-Address by beginning with a new example that we would like to teach the system to handle.
Reference: 4. <author> Maulsby, David, Ian H. Witten. </author> <title> Learning to describe data in actions, </title> <booktitle> in Proc. Programming by Demonstration Workshop, Twelfth International Conference on Machine Learning, </booktitle> <pages> pp. 6573. </pages> <address> Tahoe City CA. </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Cima [below] represents a step in this direction. RELATED WORK To our knowledge, Grammex is the first direct-manipulation interface to address the question of interactive definition and editing of grammars for end users. The closest work to this is David Maulsby's Cima <ref> [4, 5] </ref>, whose goal was also to generate grammatical patterns from presentation of concrete textual examples. Maulsby's work concentrated on developing a more sophisticated inference procedure for determining which features of the text are relevant.
Reference: 5. <author> Maulsby, David, </author> <title> Instructible Agents, </title> <type> Ph.D. Thesis, </type> <institution> University of Calgary, Canada, </institution> <year> 1994. </year>
Reference-contexts: Cima [below] represents a step in this direction. RELATED WORK To our knowledge, Grammex is the first direct-manipulation interface to address the question of interactive definition and editing of grammars for end users. The closest work to this is David Maulsby's Cima <ref> [4, 5] </ref>, whose goal was also to generate grammatical patterns from presentation of concrete textual examples. Maulsby's work concentrated on developing a more sophisticated inference procedure for determining which features of the text are relevant.
Reference: 6. <author> Mitchell, Tom, </author> <title> Machine Learning, </title> <publisher> McGraw-Hill, </publisher> <month> March </month> <year> 1997. </year>
Reference-contexts: Email grammar, Categories view In either view, double clicking on an entry results in editing that entry. Future work: Using grammar induction to speed up the definition process Automatic induction of grammar rules from examples has been a wellstudied topic in machine learning [see <ref> [6] </ref> for a survey and techniques]. Natural language researchers study the topic to try to come to an understanding of how children learn the grammar of English by only hearing examples of adult speech, and only occasionally hearing negative examples or receiving explicit instruction in grammar.
Reference: 7. <author> Myers, B. Tourmaline: </author> <title> Text Formatting by Demonstration, </title> <booktitle> in [2]. </booktitle>
Reference-contexts: However, the proposed user interface for Cima consisted of simply presenting a sequence of examples, and did not allow the interactive generalizing and specializing of parts of the rules and substrings as does Grammex. Cima's inference techniques could also profitably be applied within Grammex's user interface framework. Tourmaline <ref> [7] </ref> induced stylistic patterns of text formatting [e.g. fonts, sizes] rather than grammar rules, from examples. Grammex's approach is strongly related to a similar approach for generating procedures in a programming language, called programming by example or programming by demonstration [2].
Reference: 8. <author> Nardi, B. </author> <title> A Small Matter of Programming Perspectives on End User Computing. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1993. </year>
Reference-contexts: We also expect that many text patterns will be programmed by "gardeners", users who have above-average interest and skill in using applications, but are still not full-time computer experts or necessarily even have programming skills. Gardeners often serve as informal consultants for a local group of users <ref> [8] </ref>. Writing conventional grammars as text is difficult for end users Grammars are the traditional means of expressing a pattern in a stream of text to be identified by a parser.
Reference: 9. <author> Nardi, B., J. Miller, and D. Wright, </author> <title> Collaborative, Programmable Intelligent Agents, </title> <journal> Communications of the ACM, </journal> <note> to appear, </note> <year> 1998. </year>
Reference-contexts: A tremendous opportunity exists to take advantage of the computer's ability to recognize structure, even if that recognition is only partial [1]. Parsers are also beginning to be deployed as an integral part of the text editing facilities available across all computer applications. Examples are Apple Data Detectors <ref> [9] </ref> and the Intel Selection Recognition Agent [10]. Apple Data Detectors finds phone numbers, email addresses and URLs in free text These facilities allow automatic recognition of simple, commonly occurring text patterns such as email addresses, URLs, or date formats.
Reference: 10. <author> Pandit, M. and Kalbag, S. </author> <title> The selection recognition agent: Instant access to relevant information and operations. </title> <booktitle> Proceedings of Intelligent User Interfaces '97. (1997). </booktitle> <publisher> ACM Press, </publisher> <address> New York. </address>
Reference-contexts: Parsers are also beginning to be deployed as an integral part of the text editing facilities available across all computer applications. Examples are Apple Data Detectors [9] and the Intel Selection Recognition Agent <ref> [10] </ref>. Apple Data Detectors finds phone numbers, email addresses and URLs in free text These facilities allow automatic recognition of simple, commonly occurring text patterns such as email addresses, URLs, or date formats.
References-found: 10

