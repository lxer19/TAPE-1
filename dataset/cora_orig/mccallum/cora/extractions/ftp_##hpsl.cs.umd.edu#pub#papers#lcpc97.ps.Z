URL: ftp://hpsl.cs.umd.edu/pub/papers/lcpc97.ps.Z
Refering-URL: http://www.cs.umd.edu/projects/hpsl/papers.brandnew/LocalResources/tech-10-23.htm
Root-URL: 
Title: Identifying DEF/USE Information of Statements that Construct and Traverse Dynamic Recursive Data Structures  
Author: Yuan-Shin Hwang and Joel Saltz 
Address: College Park, MD 20742  
Affiliation: Department of Computer Science, University of Maryland,  
Abstract: Pointer analysis is essential for optimizing and paralleliz-ing compilers. It examines pointer assignment statements and estimates pointer-induced aliases among pointer variables or possible shapes of dynamic recursive data structures. However, previously proposed techniques perform pointer analysis without the knowledge of traversal patterns of dynamic recursive data structures to be constructed. This paper presents an algorithm to identify the traversal patterns of recursive data structures and propagate this information back to those statements that define the data structures. This approach recognizes the DEF/USE relationships between the statements that define and traverse dynamic recursive data structures. The outcome of this technique will be useful for pointer analysis and parallelization. Algorithms to perform pointer analysis and dependence test using the knowledge of traversal patterns will also be presented.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Barnes and P. Hut. </author> <title> A hierarchical O(NlogN) force-calculation algorithm. </title> <booktitle> Nature, </booktitle> <pages> pages 446-449, </pages> <month> December </month> <year> 1976. </year>
Reference-contexts: Although the bipartite graph is cyclic, the traversal patterns (on lists of E and H nodes) are not. Another example is leaf-connected tree created by the Barnes-Hut N-Body solver <ref> [1] </ref>, as depicted in Figure 1 (b). The structures connected by traversing links are a list and a tree, respectively. Figure 1 (c) shows the cyclic structures used to represent sparse matrixes, which are frequently used in programs that simulate interactions among entities.
Reference: 2. <author> David R. Chase, Mark Wegman, and F. Kenneth Zadeck. </author> <title> Analysis of pointers and structures. </title> <journal> SIGPLAN Notices, </journal> <volume> 25(6) </volume> <pages> 296-310, </pages> <month> June </month> <year> 1990. </year> <booktitle> Proceedings of the ACM SIGPLAN '90 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: The characteristic of these pointer analysis approaches is that they estimate the possible locations referenced by each pointer. Shape analysis is another form of pointer analysis. It differs from previous methods by estimating the possible shapes of recursive data structures accessible from pointers <ref> [2, 7, 15, 16] </ref>. The shape information can be exploited to parallelize or optimize programs by providing compilers more insights into the properties of data structures used by programs. <p> .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis [3, 5, 6, 9, 17], side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis <ref> [2, 7, 15, 16] </ref>. Another interesting field is pointer analysis on objected-oriented programs [12, 14]. The distinction of this work from others is that it performs pointer analysis and dependence test with the knowledge of traversal patterns by utilizing the DEF/USE information of pointer statements.
Reference: 3. <author> Jong-Deok Choi, Michael Burke, and Paul Carini. </author> <title> Efficient flow-sensitive inter-procedural computation of pointer-induced aliases and side effects. </title> <booktitle> In Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 232-245, </pages> <address> Charleston, South Carolina, </address> <month> Jan-uary </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Pointer analysis is essential for optimizing and parallelizing compilers that support languages with pointers like C and Fortran 90. There has been a considerable number of techniques being proposed in this field. Researchers have developed algorithms to detect pointer-induced aliases <ref> [3, 5, 6, 9, 17] </ref>, analyze side effects [3, 10], and identify conflicts/interferences among statements by static analysis [8, 11]. The results of these analysis procedures can be supplied to compilers for optimizations and parallelization on programs with dynamic recursive data structures. <p> 1 Introduction Pointer analysis is essential for optimizing and parallelizing compilers that support languages with pointers like C and Fortran 90. There has been a considerable number of techniques being proposed in this field. Researchers have developed algorithms to detect pointer-induced aliases [3, 5, 6, 9, 17], analyze side effects <ref> [3, 10] </ref>, and identify conflicts/interferences among statements by static analysis [8, 11]. The results of these analysis procedures can be supplied to compilers for optimizations and parallelization on programs with dynamic recursive data structures. <p> However, if the statement S24 is replaced by S24 ptr 2 .result += prv 1 .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis <ref> [3, 5, 6, 9, 17] </ref>, side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis [2, 7, 15, 16]. Another interesting field is pointer analysis on objected-oriented programs [12, 14]. <p> However, if the statement S24 is replaced by S24 ptr 2 .result += prv 1 .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis [3, 5, 6, 9, 17], side effect analysis <ref> [3, 10] </ref>, conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis [2, 7, 15, 16]. Another interesting field is pointer analysis on objected-oriented programs [12, 14].
Reference: 4. <author> Ron Cytron, Jeanne Ferrante, Barry K. Rosen, Mark N. Wegman, and F. Kenneth Zadeck. </author> <title> Efficiently computing static single assignment form and the control dependence graph. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(4) </volume> <pages> 451-490, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Section 4 outlines the approaches to use the DEF/USE information to perform pointer analysis and dependence test. Summary is presented in Section 6. 2 Program Representation Programs will be transformed into an SSA (Static Single Assignment) intermediate representation <ref> [4] </ref>.
Reference: 5. <author> Alain Deutsch. </author> <title> Interprocedural May-Alias analysis for pointers: Beyond k-limiting. </title> <journal> SIGPLAN Notices, </journal> <volume> 29(6) </volume> <pages> 230-241, </pages> <month> June </month> <year> 1994. </year> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: 1 Introduction Pointer analysis is essential for optimizing and parallelizing compilers that support languages with pointers like C and Fortran 90. There has been a considerable number of techniques being proposed in this field. Researchers have developed algorithms to detect pointer-induced aliases <ref> [3, 5, 6, 9, 17] </ref>, analyze side effects [3, 10], and identify conflicts/interferences among statements by static analysis [8, 11]. The results of these analysis procedures can be supplied to compilers for optimizations and parallelization on programs with dynamic recursive data structures. <p> However, if the statement S24 is replaced by S24 ptr 2 .result += prv 1 .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis <ref> [3, 5, 6, 9, 17] </ref>, side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis [2, 7, 15, 16]. Another interesting field is pointer analysis on objected-oriented programs [12, 14]. <p> The distinction of this work from others is that it performs pointer analysis and dependence test with the knowledge of traversal patterns by utilizing the DEF/USE information of pointer statements. Symbolic path expressions have been proposed by other researchers <ref> [11, 5] </ref>. Larus and Hilfinger used path expressions to specify nodes in alias graphs [11], whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures [5]. <p> Symbolic path expressions have been proposed by other researchers [11, 5]. Larus and Hilfinger used path expressions to specify nodes in alias graphs [11], whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures <ref> [5] </ref>. In contrast, path expressions are used in this paper to specify traversal patterns. 6 Summary This paper presents an approach to identify the traversal patterns on dynamic recursive data structures and propagates this information to the statements that construct the structures.
Reference: 6. <author> Maryam Emami, Rakesh Ghiya, and Laurie J. Hendren. </author> <title> Context-sensitive inter-procedural Points-to analysis in the presence of function pointers. </title> <journal> SIGPLAN Notices, </journal> <volume> 29(6) </volume> <pages> 242-256, </pages> <month> June </month> <year> 1994. </year> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: 1 Introduction Pointer analysis is essential for optimizing and parallelizing compilers that support languages with pointers like C and Fortran 90. There has been a considerable number of techniques being proposed in this field. Researchers have developed algorithms to detect pointer-induced aliases <ref> [3, 5, 6, 9, 17] </ref>, analyze side effects [3, 10], and identify conflicts/interferences among statements by static analysis [8, 11]. The results of these analysis procedures can be supplied to compilers for optimizations and parallelization on programs with dynamic recursive data structures. <p> However, if the statement S24 is replaced by S24 ptr 2 .result += prv 1 .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis <ref> [3, 5, 6, 9, 17] </ref>, side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis [2, 7, 15, 16]. Another interesting field is pointer analysis on objected-oriented programs [12, 14].
Reference: 7. <author> Rakesh Ghiya and Laurie J. Hendren. </author> <title> Is it a tree, a DAG, or a cyclic graph? A shape analysis for heap-directed pointers in C. </title> <booktitle> In Conference Record of POPL '96: 23nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 1-15, </pages> <address> St. Petersburg Beach, Florida, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: The characteristic of these pointer analysis approaches is that they estimate the possible locations referenced by each pointer. Shape analysis is another form of pointer analysis. It differs from previous methods by estimating the possible shapes of recursive data structures accessible from pointers <ref> [2, 7, 15, 16] </ref>. The shape information can be exploited to parallelize or optimize programs by providing compilers more insights into the properties of data structures used by programs. <p> However, there are cases that even precise shape estimation does not provide useful information for parallelization or optimizations, especially programs with cyclically linked data structures <ref> [7] </ref>. The main reason is because these proposed shape analysis techniques are performed ? This work was sponsored in part by NSF (ASC-9213821 and CDA9401151). without taking account of traversal patterns on recursive data structures by pro-grams. They might gather information that is inappropriate for parallelization and desired optimizations. <p> .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis [3, 5, 6, 9, 17], side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis <ref> [2, 7, 15, 16] </ref>. Another interesting field is pointer analysis on objected-oriented programs [12, 14]. The distinction of this work from others is that it performs pointer analysis and dependence test with the knowledge of traversal patterns by utilizing the DEF/USE information of pointer statements.
Reference: 8. <author> Laurie J. Hendren and Alexandru Nicolau. </author> <title> Parallelizing programs with recursive data structures. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 35-47, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: There has been a considerable number of techniques being proposed in this field. Researchers have developed algorithms to detect pointer-induced aliases [3, 5, 6, 9, 17], analyze side effects [3, 10], and identify conflicts/interferences among statements by static analysis <ref> [8, 11] </ref>. The results of these analysis procedures can be supplied to compilers for optimizations and parallelization on programs with dynamic recursive data structures. The characteristic of these pointer analysis approaches is that they estimate the possible locations referenced by each pointer. Shape analysis is another form of pointer analysis. <p> 2 .result += prv 1 .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis [3, 5, 6, 9, 17], side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures <ref> [8, 11] </ref>, and shape analy-sis [2, 7, 15, 16]. Another interesting field is pointer analysis on objected-oriented programs [12, 14]. The distinction of this work from others is that it performs pointer analysis and dependence test with the knowledge of traversal patterns by utilizing the DEF/USE information of pointer statements.
Reference: 9. <author> William Landi and Barbara G. Ryder. </author> <title> A safe approximate algorithm for interpro-cedural pointer aliasing. </title> <journal> SIGPLAN Notices, </journal> <volume> 27(7) </volume> <pages> 235-248, </pages> <month> July </month> <year> 1992. </year> <booktitle> Proceedings of the ACM SIGPLAN '92 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: 1 Introduction Pointer analysis is essential for optimizing and parallelizing compilers that support languages with pointers like C and Fortran 90. There has been a considerable number of techniques being proposed in this field. Researchers have developed algorithms to detect pointer-induced aliases <ref> [3, 5, 6, 9, 17] </ref>, analyze side effects [3, 10], and identify conflicts/interferences among statements by static analysis [8, 11]. The results of these analysis procedures can be supplied to compilers for optimizations and parallelization on programs with dynamic recursive data structures. <p> However, there are cases that even precise shape estimation does not provide useful information for parallelization or optimizations, especially programs with cyclically linked data structures [7]. The main reason is because these proposed shape analysis techniques are performed ? This work was sponsored in part by NSF <ref> (ASC-9213821 and CDA9401151) </ref>. without taking account of traversal patterns on recursive data structures by pro-grams. They might gather information that is inappropriate for parallelization and desired optimizations. Although many programs create data structures which are cyclic overall, they usually follow linear structures to reference all nodes on the data structures. <p> However, if the statement S24 is replaced by S24 ptr 2 .result += prv 1 .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis <ref> [3, 5, 6, 9, 17] </ref>, side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis [2, 7, 15, 16]. Another interesting field is pointer analysis on objected-oriented programs [12, 14].
Reference: 10. <author> William Landi, Barbara G. Ryder, and Sean Zhang. </author> <title> Interprocedural side effect analysis with pointer aliasing. </title> <journal> SIGPLAN Notices, </journal> <volume> 28(6) </volume> <pages> 56-67, </pages> <month> June </month> <year> 1993. </year> <booktitle> Proceedings of the ACM SIGPLAN '93 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: 1 Introduction Pointer analysis is essential for optimizing and parallelizing compilers that support languages with pointers like C and Fortran 90. There has been a considerable number of techniques being proposed in this field. Researchers have developed algorithms to detect pointer-induced aliases [3, 5, 6, 9, 17], analyze side effects <ref> [3, 10] </ref>, and identify conflicts/interferences among statements by static analysis [8, 11]. The results of these analysis procedures can be supplied to compilers for optimizations and parallelization on programs with dynamic recursive data structures. <p> However, if the statement S24 is replaced by S24 ptr 2 .result += prv 1 .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis [3, 5, 6, 9, 17], side effect analysis <ref> [3, 10] </ref>, conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis [2, 7, 15, 16]. Another interesting field is pointer analysis on objected-oriented programs [12, 14].
Reference: 11. <author> James R. Larus and Paul N. Hilfinger. </author> <title> Detecting conflicts between structure accesses. </title> <journal> SIGPLAN Notices, </journal> <volume> 23(7) </volume> <pages> 21-34, </pages> <month> July </month> <year> 1988. </year> <booktitle> Proceedings of the ACM SIG-PLAN '88 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: There has been a considerable number of techniques being proposed in this field. Researchers have developed algorithms to detect pointer-induced aliases [3, 5, 6, 9, 17], analyze side effects [3, 10], and identify conflicts/interferences among statements by static analysis <ref> [8, 11] </ref>. The results of these analysis procedures can be supplied to compilers for optimizations and parallelization on programs with dynamic recursive data structures. The characteristic of these pointer analysis approaches is that they estimate the possible locations referenced by each pointer. Shape analysis is another form of pointer analysis. <p> 2 .result += prv 1 .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis [3, 5, 6, 9, 17], side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures <ref> [8, 11] </ref>, and shape analy-sis [2, 7, 15, 16]. Another interesting field is pointer analysis on objected-oriented programs [12, 14]. The distinction of this work from others is that it performs pointer analysis and dependence test with the knowledge of traversal patterns by utilizing the DEF/USE information of pointer statements. <p> The distinction of this work from others is that it performs pointer analysis and dependence test with the knowledge of traversal patterns by utilizing the DEF/USE information of pointer statements. Symbolic path expressions have been proposed by other researchers <ref> [11, 5] </ref>. Larus and Hilfinger used path expressions to specify nodes in alias graphs [11], whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures [5]. <p> Symbolic path expressions have been proposed by other researchers [11, 5]. Larus and Hilfinger used path expressions to specify nodes in alias graphs <ref> [11] </ref>, whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures [5].
Reference: 12. <author> Jenq Kuen Lee, Dan Ho, and Yue-Chee Chuang. </author> <title> Data distribution analysis and optimization for pointer-based distributed programs. </title> <booktitle> In Proceedings of the 26th International Conference on Parallel Processing (ICPP), </booktitle> <address> Bloomingdale, IL, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: Another interesting field is pointer analysis on objected-oriented programs <ref> [12, 14] </ref>. The distinction of this work from others is that it performs pointer analysis and dependence test with the knowledge of traversal patterns by utilizing the DEF/USE information of pointer statements. Symbolic path expressions have been proposed by other researchers [11, 5].
Reference: 13. <author> N.K. Madsen. </author> <title> Divergence preserving discrete surface integral methods for maxwel l's curl equations using non-orthogonal grids. </title> <type> Technical Report 92.04, </type> <institution> RIACS, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: However, there are cases that even precise shape estimation does not provide useful information for parallelization or optimizations, especially programs with cyclically linked data structures [7]. The main reason is because these proposed shape analysis techniques are performed ? This work was sponsored in part by NSF <ref> (ASC-9213821 and CDA9401151) </ref>. without taking account of traversal patterns on recursive data structures by pro-grams. They might gather information that is inappropriate for parallelization and desired optimizations. Although many programs create data structures which are cyclic overall, they usually follow linear structures to reference all nodes on the data structures. <p> Complex Graphs with Acyclic Traversal Patterns One example is the bipartite graph shown in Figure 1 (a) constructed by the program EM3D <ref> [13] </ref>, which models the propagation of electromagnetic waves. It updates the values of E nodes (electric field) by a weighted sum of neighboring H nodes (magnetic field), and then H nodes are similarly updated using the E nodes.
Reference: 14. <author> Pedro C. Diniz Martin C. Rinard. </author> <title> Commutativity analysis: A new analysis framework for parallelizing compilers. </title> <journal> SIGPLAN Notices, </journal> <volume> 31(5) </volume> <pages> 54-67, </pages> <month> May </month> <year> 1996. </year> <booktitle> Proceedings of the ACM SIGPLAN '96 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: Another interesting field is pointer analysis on objected-oriented programs <ref> [12, 14] </ref>. The distinction of this work from others is that it performs pointer analysis and dependence test with the knowledge of traversal patterns by utilizing the DEF/USE information of pointer statements. Symbolic path expressions have been proposed by other researchers [11, 5].
Reference: 15. <author> J. Plevyak, A. Chien, and V. Karamcheti. </author> <title> Analysis of dynamic structures for efficient parallel execution. </title> <booktitle> In Proceedings of the 6th International Workshop on Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 37-56, </pages> <address> Portland, Oregon, </address> <month> August </month> <year> 1993. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 768, </volume> <publisher> Springer Verlag. </publisher>
Reference-contexts: The characteristic of these pointer analysis approaches is that they estimate the possible locations referenced by each pointer. Shape analysis is another form of pointer analysis. It differs from previous methods by estimating the possible shapes of recursive data structures accessible from pointers <ref> [2, 7, 15, 16] </ref>. The shape information can be exploited to parallelize or optimize programs by providing compilers more insights into the properties of data structures used by programs. <p> .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis [3, 5, 6, 9, 17], side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis <ref> [2, 7, 15, 16] </ref>. Another interesting field is pointer analysis on objected-oriented programs [12, 14]. The distinction of this work from others is that it performs pointer analysis and dependence test with the knowledge of traversal patterns by utilizing the DEF/USE information of pointer statements.
Reference: 16. <author> Mooly Sagiv, Thomas Reps, and Reinhard Wilhelm. </author> <title> Solving shape-analysis problems in languages with destructive updating. </title> <booktitle> In Conference Record of POPL '96: 23nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 16-31, </pages> <address> St. Petersburg Beach, Florida, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: The characteristic of these pointer analysis approaches is that they estimate the possible locations referenced by each pointer. Shape analysis is another form of pointer analysis. It differs from previous methods by estimating the possible shapes of recursive data structures accessible from pointers <ref> [2, 7, 15, 16] </ref>. The shape information can be exploited to parallelize or optimize programs by providing compilers more insights into the properties of data structures used by programs. <p> Alias information can be inferred by the path expressions and shape infor mation. This section outlines a simple algorithm that will estimate the possible shapes of dynamic recursive data structures that are constructed by programs without destructive updating, such as list reverse <ref> [16] </ref>. This algorithm performs forward analysis on CFG starting from ENTRY node. It keeps track of connections that are constructed by the link defining statements. This algorithm first categorizes link defining statements based on the following observation. <p> .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis [3, 5, 6, 9, 17], side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis <ref> [2, 7, 15, 16] </ref>. Another interesting field is pointer analysis on objected-oriented programs [12, 14]. The distinction of this work from others is that it performs pointer analysis and dependence test with the knowledge of traversal patterns by utilizing the DEF/USE information of pointer statements.
Reference: 17. <author> Robert P. Wilson and Monica S. Lam. </author> <title> Efficient context-sensitive pointer analysis for C programs. </title> <journal> SIGPLAN Notices, </journal> <volume> 30(6) </volume> <pages> 1-12, </pages> <month> June </month> <year> 1995. </year> <title> Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation. This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: 1 Introduction Pointer analysis is essential for optimizing and parallelizing compilers that support languages with pointers like C and Fortran 90. There has been a considerable number of techniques being proposed in this field. Researchers have developed algorithms to detect pointer-induced aliases <ref> [3, 5, 6, 9, 17] </ref>, analyze side effects [3, 10], and identify conflicts/interferences among statements by static analysis [8, 11]. The results of these analysis procedures can be supplied to compilers for optimizations and parallelization on programs with dynamic recursive data structures. <p> However, if the statement S24 is replaced by S24 ptr 2 .result += prv 1 .result then iterations of the loop will have to be executed sequentially. 5 Related Work Various pointer analysis techniques have been proposed, such as alias analysis <ref> [3, 5, 6, 9, 17] </ref>, side effect analysis [3, 10], conflict/interference analysis for programs with dynamic pointer-linked data structures [8, 11], and shape analy-sis [2, 7, 15, 16]. Another interesting field is pointer analysis on objected-oriented programs [12, 14].
References-found: 17

