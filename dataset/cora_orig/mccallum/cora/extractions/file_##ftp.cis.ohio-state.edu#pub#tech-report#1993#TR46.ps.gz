URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1993/TR46.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: Closure Properties and Witness Reduction  
Author: Sanjay Gupta 
Note: 1 This work was supported in part by NSF under Grant No. CCR-8909071.  
Address: Columbus, Ohio 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Beigel, J. Gill, and U. Hertramph. </author> <title> Counting classes: Thresholds, parity, </title> <booktitle> mods, and fewness. In Proceedings of the 7th Annual Symposium on Theoretical Aspects of Computer Science, volume 415 of Lecture Notes in Computer Science, </booktitle> <pages> pages 49-57. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: The above process also yields that PH BP Mod k P for any prime number k, using the fact that Mod k P is closed under Turing reductions and composition, for any prime number k <ref> [1] </ref>. In the above example, note that P served two purposes. Firstly, it allowed amplification of probability due to its closure under Turing reductions and secondly, it allowed the final composition of witness functions to collapse the two levels into one. <p> Let us understand what this definition means. Consider the standard lexicographic order of strings, *; 0; 1; 00; 01; : : :. An oracle A corresponds to a real number x A 2 <ref> [0; 1] </ref> as follows: the ith decimal place of x A has a 1 iff the ith string in this enumeration belongs to A. <p> We view a finite string w as a prefix of the oracle set A, if w is a prefix of the corresponding real number x A . Thus a set of oracles can be viewed as a subset of the closed interval <ref> [0; 1] </ref>. Hence, the definition says that the measure of oracles A such that L lies in the class K relative to A is 1. <p> Note that f (x) = 0 iff all the computation paths of M reject. The following proposition summarizes the well-known properties of SpanP. Proposition 4.18 1. SpanP #P. 2. <ref> [4, 1] </ref> SpanP is closed under addition and multiplication. 3. [12] f 2 SpanP iff there exists a polynomial p and a set A 2 NP such that, for all x, f (x) = kfy j jyj = p (jxj) and hx; yi 2 Agk. Proof. 29 1. <p> Thus, f 2 #P. Let g 2 Z#P be witnessed by NTM M . Then, the pair of NTMs (M; M 1 ) witness that g 2 Q#P, where NTM M 1 has exactly one accepting path (and no rejecting paths) on all inputs. 2. P #P <ref> [1] </ref> P Z#P [1] P Q#P [1] follows directly from part 1. We show that P Q#P [1] P #P [1] by encoding 4 queries into one. Let L 2 P Q#P [1] be accepted by TM M which queries a function g 2 Q#P witnessed by NTMs (M n ; <p> Let g 2 Z#P be witnessed by NTM M . Then, the pair of NTMs (M; M 1 ) witness that g 2 Q#P, where NTM M 1 has exactly one accepting path (and no rejecting paths) on all inputs. 2. P #P <ref> [1] </ref> P Z#P [1] P Q#P [1] follows directly from part 1. We show that P Q#P [1] P #P [1] by encoding 4 queries into one. Let L 2 P Q#P [1] be accepted by TM M which queries a function g 2 Q#P witnessed by NTMs (M n ; M d ), <p> Let g 2 Z#P be witnessed by NTM M . Then, the pair of NTMs (M; M 1 ) witness that g 2 Q#P, where NTM M 1 has exactly one accepting path (and no rejecting paths) on all inputs. 2. P #P <ref> [1] </ref> P Z#P [1] P Q#P [1] follows directly from part 1. We show that P Q#P [1] P #P [1] by encoding 4 queries into one. Let L 2 P Q#P [1] be accepted by TM M which queries a function g 2 Q#P witnessed by NTMs (M n ; M d ), each time-bounded by <p> P #P <ref> [1] </ref> P Z#P [1] P Q#P [1] follows directly from part 1. We show that P Q#P [1] P #P [1] by encoding 4 queries into one. Let L 2 P Q#P [1] be accepted by TM M which queries a function g 2 Q#P witnessed by NTMs (M n ; M d ), each time-bounded by a polynomial p. <p> P #P <ref> [1] </ref> P Z#P [1] P Q#P [1] follows directly from part 1. We show that P Q#P [1] P #P [1] by encoding 4 queries into one. Let L 2 P Q#P [1] be accepted by TM M which queries a function g 2 Q#P witnessed by NTMs (M n ; M d ), each time-bounded by a polynomial p. <p> P #P <ref> [1] </ref> P Z#P [1] P Q#P [1] follows directly from part 1. We show that P Q#P [1] P #P [1] by encoding 4 queries into one. Let L 2 P Q#P [1] be accepted by TM M which queries a function g 2 Q#P witnessed by NTMs (M n ; M d ), each time-bounded by a polynomial p. <p> Clearly, M fl accepts L. Note that a polynomial number of parallel queries can be encoded into one query, as above, giving P #P <ref> [1] </ref> = P k#P . 2 Finally, our proofs will use the following proposition. Proposition 5.6 1. C = P = ZC = P = QC = P. 3. QUP = C = P " co-C = P. 4. Let L 2 ZC = P = QC = P.
Reference: [2] <author> R. Beigel, N. Reingold, and D. Spielman. </author> <title> PP is closed under intersection. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-9, </pages> <year> 1991. </year>
Reference-contexts: Out (M; x) denotes 11 the set of all output strings of M on x. Note that AR functions were used extensively to show closure properties for PP <ref> [2, 6, 7] </ref>. We review the definitions of complexity classes that we will discuss in this paper. Definition 2.2 1.
Reference: [3] <author> C. H. Bennett and J. Gill. </author> <title> Relative to a random oracle A, P A 6= NP A 6= Co-NP A with probability 1. </title> <journal> SIAM J. Comput., </journal> <volume> 10(1) </volume> <pages> 96-113, </pages> <month> February </month> <year> 1981. </year>
Reference-contexts: Proposition 4.9 d BP UP Pseudo (UP) Almost (UP). Proof. d BP UP Pseudo (UP) follows directly from the definition. We show that Pseudo (UP) Almost (UP). The idea of the proof is essentially that of Bennet and Gill <ref> [3] </ref>, where they show that BPP A = P A , for a random oracle A, with probability one. The probabilistic computation of Pseudo (UP) is simulated by queries to the random oracle. It is important to keep in mind that the random oracle is fixed before the computation begins.
Reference: [4] <author> J. Cai, T. Gundermann, J. Hartmanis, L. Hemachandra, V. Sewelson, K. Wagner, and G. Wechsung. </author> <title> The boolean hierarchy ii: </title> <journal> Applications. SIAM J. Comput., </journal> <volume> 18(1) </volume> <pages> 95-111, </pages> <year> 1989. </year>
Reference-contexts: Note that f (x) = 0 iff all the computation paths of M reject. The following proposition summarizes the well-known properties of SpanP. Proposition 4.18 1. SpanP #P. 2. <ref> [4, 1] </ref> SpanP is closed under addition and multiplication. 3. [12] f 2 SpanP iff there exists a polynomial p and a set A 2 NP such that, for all x, f (x) = kfy j jyj = p (jxj) and hx; yi 2 Agk. Proof. 29 1.
Reference: [5] <author> S. Fenner, L. Fortnow, and S. Kurtz. </author> <title> Gap-definable counting classes. </title> <booktitle> In Proceedings of 6th Structure in Complexity Theory Conference, </booktitle> <pages> pages 30-42. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Obviously, Z#P is closed under subtraction. However, consider the question of whether Z#P is also closed under proper subtraction. In Section 5, we prove 1 Z#P is same as GapP <ref> [5] </ref>. 1 that Z#P is closed under proper subtraction iff Z#P is closed under integer division iff Z#P is closed under every other function in Z#P iff CH collapses to ZUP 2 iff CP = ZUP. Thus, we show that proper subtraction and integer division remain hard for Z#P. <p> By varying the predicate associated with this function, various complexity classes can be characterized. For example, for the class NP, the witness function is the number of accepting paths and the predicate is `greater than 2 ZUP is same as SPP <ref> [5] </ref>. 2 or equal to 1'; that is, the acceptance criterion is `at least one accepting computation'. Intuitively, witness reduction means that a witness function is somehow `simplified'. For example, again consider the class NP. <p> However, this may not always yield a new class; ZNP is actually same as co-C = P. In fact, 3 This class is same as GapP <ref> [5] </ref>. 4 This class is same as SPP [5] and XP [12]. 36 the counting hierarchy CH can be viewed as ZNP ZNP . Thus, CH is same as PH under the new domain of interpretation. The following proposition compares the basic closure properties of #P, Z#P and Q#P. <p> However, this may not always yield a new class; ZNP is actually same as co-C = P. In fact, 3 This class is same as GapP <ref> [5] </ref>. 4 This class is same as SPP [5] and XP [12]. 36 the counting hierarchy CH can be viewed as ZNP ZNP . Thus, CH is same as PH under the new domain of interpretation. The following proposition compares the basic closure properties of #P, Z#P and Q#P.
Reference: [6] <author> L. Fortnow and N. Reingold. </author> <title> PP is closed under truth-table reductions. </title> <booktitle> In Proceedings of 6th Structure in Complexity Theory Conference, </booktitle> <pages> pages 13-15. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Out (M; x) denotes 11 the set of all output strings of M on x. Note that AR functions were used extensively to show closure properties for PP <ref> [2, 6, 7] </ref>. We review the definitions of complexity classes that we will discuss in this paper. Definition 2.2 1.
Reference: [7] <author> S. Gupta. </author> <title> A note on the counting hierarchy. </title> <type> Technical Report OSU-CISRC-8/90-TR24, </type> <institution> The Ohio State University, Col, OH, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: Out (M; x) denotes 11 the set of all output strings of M on x. Note that AR functions were used extensively to show closure properties for PP <ref> [2, 6, 7] </ref>. We review the definitions of complexity classes that we will discuss in this paper. Definition 2.2 1.
Reference: [8] <author> S. Gupta. </author> <title> On isolating odd number of elements and its applications in complexity theory. </title> <type> Technical Report OSU-CISRC-6/93-TR24, </type> <institution> The Ohio State University, Col, OH, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: This corresponds to the class parity P denoted by P. Given a string x 2 L, using Valiant and Vazirani's [22] reduction, or the construction given in <ref> [8] </ref>, it is possible to construct a polynomial number of machines so that one of them satisfies the new predicate under the new witness function, with a high probability.
Reference: [9] <author> J. Kobler, U. Schoning, and J. Toran. </author> <title> On counting and approximation. </title> <journal> Acta Infor-matica, </journal> <volume> 26 </volume> <pages> 363-379, </pages> <year> 1989. </year>
Reference-contexts: Finally, instead of just #P, it is possible to apply the same ideas to any function class DF . In fact, Ogiwara and Hemachandra have obtained similar results for other function classes like OptP, SpanP, and MidP <ref> [10, 9, 19] </ref>. The following definition [12] formalizes the above mentioned concepts. Definition 2.9 1. Let DF be a class of functions. Let i 1 and let f : N i 7! N . <p> Our results should be contrasted with the results of Ogiwara and Hemachandra [12] for SpanP. Recall that Out (M; x) denotes the set of output strings of a Turing transducer M on input x. Definition 4.17 <ref> [9] </ref> A function f : fl 7! N is in SpanP iff there exists a polynomial time bounded nondeterministic Turing transducer M such that, for all x, f (x) = kOut (M; x)k. Note that f (x) = 0 iff all the computation paths of M reject.
Reference: [10] <author> M. Krentel. </author> <title> The complexity of optimization problems. </title> <journal> J. Computer Systems Sci., </journal> <volume> 36 </volume> <pages> 490-509, </pages> <year> 1988. </year>
Reference-contexts: Finally, instead of just #P, it is possible to apply the same ideas to any function class DF . In fact, Ogiwara and Hemachandra have obtained similar results for other function classes like OptP, SpanP, and MidP <ref> [10, 9, 19] </ref>. The following definition [12] formalizes the above mentioned concepts. Definition 2.9 1. Let DF be a class of functions. Let i 1 and let f : N i 7! N . <p> Recall that Out (M; x) denotes the set of outputs of the transducer M on input x. Definition 4.23 <ref> [10] </ref> A function f : fl 7! N is in OptP iff there exists a polynomial time bounded nondeterministic transducer M such that for all x, f (x) = max (Out (M; x)). Clearly, PF OptP. Krentel [10] gave the following characterization for the graph of an OptP function. <p> Definition 4.23 <ref> [10] </ref> A function f : fl 7! N is in OptP iff there exists a polynomial time bounded nondeterministic transducer M such that for all x, f (x) = max (Out (M; x)). Clearly, PF OptP. Krentel [10] gave the following characterization for the graph of an OptP function. Proposition 4.24 For any function f 2 OptP, the set fhx; yi j y = f (x)g is in P NP . We now state our results for OptP.
Reference: [11] <author> N. Nisan and A. Wigderson. </author> <title> Hardness vs. randomness. </title> <booktitle> In Proc. 28th Annual IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 2-11, </pages> <year> 1988. </year>
Reference-contexts: These results should be compared with our results in Section 4, where the theme random witness reduction is used. Here, Almost (K), given any class K, is the class first defined by Nisan and Wigderson <ref> [11] </ref> using random oracles. * #P is randomly closed under #P iff C = P Pseudo (UP), where d BPUP Pseudo (UP) Almost (UP). * SpanP is randomly closed under SpanP iff C = P d BP NP = Almost (NP). * OptP is randomly closed under OptP iff 8P d <p> C = d BP UP d BP C = UP d BP C = P. 4. 8 d BP coUP d BP 8 co-UP d BP 8 P. Next, we define the class Almost (K), given any class K. This was first defined by Nisan and Wigderson <ref> [11] </ref>. Definition 4.7 L 2 Almost (K) iff (fA j L 2 K A g) = 1, where K A denotes class K relative to oracle set A. Let us understand what this definition means. Consider the standard lexicographic order of strings, *; 0; 1; 00; 01; : : :.
Reference: [12] <author> M. Ogiwara and L.A. Hemachandra. </author> <title> A complexity theory for feasible closure properties. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 46(3) </volume> <pages> 295-325, </pages> <year> 1993. </year> <note> An earlier version appeared as: </note> <author> M. Ogiwara and L.A. Hemachandra, </author> <title> A Complexity Theory for Feasible Closure Properties, </title> <booktitle> in: Proceedings of 6th Annual Structure in Complexity Theory Conference, </booktitle> <year> 1991. </year>
Reference-contexts: A natural question is: Is the same true for subtraction and division? This question was investigated by Ogiwara and Hemachandra <ref> [12] </ref>. Note that the range of all #P functions is the set of natural numbers. Hence, we cannot talk about closure of #P under general subtraction or division. <p> Hard functions for various function classes The theme of witness reduction has also appeared in the recent work of Ogiwara and Hemachandra <ref> [12] </ref>. They introduced the idea of a function being hard for a class of functions. For example, Ogiwara and Hemachandra showed that #P is closed under composition with division, subtraction, and certain other functions if and only if #P is 8 closed under composition with all #P functions. <p> However, it is possible to prove the following results, which are stated in a slightly different way in <ref> [12] </ref>. * #P is closed under #P iff C = P UP. * SpanP is closed under SpanP iff C = P NP. * OptP is closed under OptP iff 8P NP. * RMidP is closed under RMidP iff C = P NP. <p> CP C = P. * Z#P is randomly closed under Z#P iff C = P Pseudo (ZUP). * Q#P is randomly closed under Q#P iff CP d BP C = P. 10 This paper is organized as follows: In Section 3 we describe the underlying structure of the proofs in <ref> [12] </ref> and in this paper. In Section 4 we introduce and formalize the notion of randomly hard functions. We study what sort of collapses are produced by random witness reduction and show that division, subtraction, and span are randomly hard functions for #P. <p> In fact, we can go a step further and talk about closure of #P under a class of functions CF . This would, of course, imply that for each f 2 CF , #P is closed under f . As shown in <ref> [12] </ref> #P is closed under subtraction if and only if it is closed under PF. Thus, closure of #P under one function, namely subtraction, implies closure under every other function in PF. <p> Finally, instead of just #P, it is possible to apply the same ideas to any function class DF . In fact, Ogiwara and Hemachandra have obtained similar results for other function classes like OptP, SpanP, and MidP [10, 9, 19]. The following definition <ref> [12] </ref> formalizes the above mentioned concepts. Definition 2.9 1. Let DF be a class of functions. Let i 1 and let f : N i 7! N . <p> Let DF and CF be classes of functions. Let f 2 CF . Then, f is CF -hard for DF iff [DF is closed under f ) DF is closed under CF ]. The following are parts of the main theorem proved in Ogiwara and Hemachandra <ref> [12] </ref>. Theorem 2.10 (Witness Reduction Implies Collapsing) C = P UP ) CH = PH = UP. Theorem 2.11 (Closure iff Witness Reduction) C = P UP , #P is closed under #P. <p> Corollary 2.13 (To Theorem 2.12)#P is closed under #P , #P is closed under PF. We have reproduced only parts of the original theorem from Ogiwara and Hemachan-dra to avoid cluttering the theme of the paper. For example, Ogiwara and Hemachandra <ref> [12] </ref> have also shown that weak plurality and strong plurality are #P-hard. <p> All our main results look similar to the above theorems, the theme running through all the results being witness reduction. 3 Structure of the Proofs In this section we describe the underlying structure shared by the proofs for various function classes studied in <ref> [12] </ref> and in this paper. These include the function classes #P, SpanP, OptP, Z#P, and Q#P. Let DF be one of these function classes. DF will have two special language classes, say A and B, associated with it. <p> In random witness reduction, machines only accept with arbitrarily high probability. We provide full details for the proofs for randomly hard functions for #P in Section 4. In subsequent sections, we provide the details only if the proofs are substantially different. 4 Random Witness Reduction Ogiwara and Hemachandra <ref> [12] </ref> have shown that #P is closed under #P iff #P is closed under subtraction iff PH = CH = UP. Hence, #P is not very likely to be closed under subtraction. Thus, it is natural to ask the question, "Is #P closed under subtraction with a high probability?". <p> C PH d BP CP: PH in the above proposition refers to any finite number of 9 and 8 quantifiers over P. 24 4.1 Random Witness Reduction in #P We now state our results for random witness reduction, which are analogous to witness reduction results of Ogiwara and Hemachandra <ref> [12] </ref>. Theorem 4.13 (Random Witness Reduction Implies Collapsing) C = P Pseudo (UP) ) CH = PH = Pseudo (UP): Theorem 4.14 (Random Witness Reduction iff Random Closure) C = P Pseudo (UP) , #P is randomly closed under #P. <p> Thus, L 2 Pseudo (UP). 2 4.2 Random Witness Reduction in SpanP In this section we apply random witness reduction to the class of functions measuring the number of distinct outputs of a nondeterministic machine. Our results should be contrasted with the results of Ogiwara and Hemachandra <ref> [12] </ref> for SpanP. Recall that Out (M; x) denotes the set of output strings of a Turing transducer M on input x. <p> Note that f (x) = 0 iff all the computation paths of M reject. The following proposition summarizes the well-known properties of SpanP. Proposition 4.18 1. SpanP #P. 2. [4, 1] SpanP is closed under addition and multiplication. 3. <ref> [12] </ref> f 2 SpanP iff there exists a polynomial p and a set A 2 NP such that, for all x, f (x) = kfy j jyj = p (jxj) and hx; yi 2 Agk. Proof. 29 1. <p> However, this may not always yield a new class; ZNP is actually same as co-C = P. In fact, 3 This class is same as GapP [5]. 4 This class is same as SPP [5] and XP <ref> [12] </ref>. 36 the counting hierarchy CH can be viewed as ZNP ZNP . Thus, CH is same as PH under the new domain of interpretation. The following proposition compares the basic closure properties of #P, Z#P and Q#P.
Reference: [13] <author> C. Papadimitriou and S. Zachos. </author> <title> Two remarks on the power of counting. </title> <booktitle> In Proc. 6th GI Conference on Theoretical Computer Science, </booktitle> <pages> pages 269-276. </pages> <booktitle> Lecture Notes in Computer Science vol. </booktitle> <volume> 145, </volume> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: Using the fact that P is closed under Turing reductions <ref> [13] </ref>, all of these machines can be merged into one machine with the acceptance criteria `odd number of accepting computations', giving NP BP P or 9P BP P. Thus, NP admits P witness reduction with a high probability.
Reference: [14] <author> K. Regan. </author> <title> Enumeration problems. </title> <year> 1982. </year>
Reference-contexts: Thus, CH is same as PH under the new domain of interpretation. The following proposition compares the basic closure properties of #P, Z#P and Q#P. Proposition 5.4 1. <ref> [14] </ref> #P is closed under addition and multiplication (on N). 2. Z#P is closed under addition, multiplication, and subtraction (on Z). 3. Q#P is closed under addition, multiplication, subtraction, and division (by a non zero Q#P function)(on Q). Proof. 1.
Reference: [15] <author> K. Regan and J.S. Royer. </author> <title> A simpler proof of PH BP[P]. </title> <year> 1990. </year>
Reference-contexts: Proof. 1. Obvious from the definitions. 2. The proof follows directly from the second amplification lemma [16]. 3. The proof is essentially same as that of the operator interchange lemma <ref> [15] </ref>. Let M and A be as in the statement of the theorem. Let the length of all the queries made by M be bounded by a polynomial p (n) 0, for all n.
Reference: [16] <author> U. Schoning. </author> <title> Probabilistic complexity classes and lowness. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 480 </volume> <pages> 238-250, </pages> <year> 1989. </year> <month> 51 </month>
Reference-contexts: Now consider a two level tree corresponding to 9 8P. Each of the level 2 trees corresponding to 8P acceptance criteria can be replaced by trees corresponding to BPP acceptance criteria. Also, due to the second amplification lemma <ref> [16] </ref>, one random guess is sufficient for each of the level 2 trees. Thus, with high probability, 9 8P is simplified to 9P. <p> The operator d BP is essentially same as the standard BP operator (for example, see <ref> [16] </ref>), except that it has "free amplification" built into it. The following proposition summarizes the basic properties of d BP. Proposition 4.3 For all classes C and D, 19 1. d BP co-C = cod BP C. 2. C D implies d BP C d BP D. 3. <p> Proof. 1. Obvious from the definitions. 2. The proof follows directly from the second amplification lemma <ref> [16] </ref>. 3. The proof is essentially same as that of the operator interchange lemma [15]. Let M and A be as in the statement of the theorem. Let the length of all the queries made by M be bounded by a polynomial p (n) 0, for all n.
Reference: [17] <author> J. Simon. </author> <title> On Some Central Problems in Computational Complexity. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1975. </year> <note> Available as Cornell Department of Computer Science Technical Report, TR 75-224. </note>
Reference-contexts: Here, CH is interpreted as a class of languages. 4. <ref> [17] </ref> L is in C = P iff there exists a nondeterministic polynomial-time Turing machine M and a polynomial p such that for every x 2 fl , (a) Acc (M; x) + Rej (M; x) = 2 p (jxj)+1 . (c) x 62 L iff 0 &lt; Acc (M; x)
Reference: [18] <author> S. </author> <title> Toda. PP is as hard as the polynomial-time hierarchy. </title> <journal> SIAM J. Comput., </journal> <volume> 20 </volume> <pages> 514-519, </pages> <year> 1989. </year> <note> An earlier version appeared as: </note> <editor> S. Toda, </editor> <booktitle> On the computational power of PP and P , in: Proceedings of 30th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1989. </year>
Reference-contexts: Thus, NP admits P witness reduction with a high probability. PH BP P as an application of witness reduction The complicated form of witness reduction in NP BP P was subsequently used by Toda <ref> [18] </ref> to collapse PH in BP P. To see how this works, using the witness function `number of rejecting paths', the number of witnesses for non-membership in 8P can be reduced from many to one, with a high probability. This yields 8P BP P.
Reference: [19] <author> S. </author> <title> Toda. The complexity of finding medians. </title> <booktitle> In Proceedings of 31st IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 778-787, </pages> <year> 1990. </year>
Reference-contexts: Finally, instead of just #P, it is possible to apply the same ideas to any function class DF . In fact, Ogiwara and Hemachandra have obtained similar results for other function classes like OptP, SpanP, and MidP <ref> [10, 9, 19] </ref>. The following definition [12] formalizes the above mentioned concepts. Definition 2.9 1. Let DF be a class of functions. Let i 1 and let f : N i 7! N .
Reference: [20] <author> S. Toda and M. Ogiwara. </author> <title> Counting classes are at least as hard as the the polynomial-time hierarchy. </title> <journal> SIAM J. Comput., </journal> <volume> 21 </volume> <pages> 316-328, </pages> <year> 1992. </year> <title> An earlier version appeared in: </title> <booktitle> Proceedings of 6th Structure in Complexity Theory Conference, </booktitle> <publisher> (IEEE Computer Society Press) 2-12. </publisher>
Reference-contexts: Containment of PH in various counting classes, with a high probability Using the witness reduction provided by Valiant and Vazirani's theorem, Toda and Ogiwara <ref> [20] </ref> have shown that any finite number of existential and universal quantifiers can be collapsed into various counting classes, with a high probability. This yields, C PH d BP C, for various counting classes C. <p> Before we state our results, we need several concepts. The following definition was first introduced by Toda and Ogiwara in <ref> [20] </ref>. <p> Proposition 4.11 1. C Pseudo (UP) d BP CP. 2. C = Pseudo (UP) d BP C = P. 3. 9 Pseudo (UP) d BP 9 P. 4. 8 co-Pseudo (UP) d BP 8 P. Finally, our proofs will use the following well-known results <ref> [20] </ref>. Proposition 4.12 1.
Reference: [21] <author> J. Toran. </author> <title> An oracle characterization of the counting hierarchy. </title> <booktitle> In Proceedings of 3rd Structure in Complexity Theory Conference, </booktitle> <pages> pages 213-223. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: Oracle characterization of the counting hierarchy The collapsing of two levels into one by changing witness functions was extensively used in the proofs of <ref> [21] </ref>, to obtain the oracle characterization of the counting hierarchy, such as, P P PP = C CP. Hard functions for various function classes The theme of witness reduction has also appeared in the recent work of Ogiwara and Hemachandra [12]. <p> It should be clear from the context which interpretation we are referring to. The following results are well-known. Proposition 2.7 1. 9 K [ 8 K C K, for any class K. 2. <ref> [21] </ref> For any class K 2 CH, (a) C = K C K. (c) C = C K = C = C = K. k k P. <p> Lemma 5.11 CP = C = P iff C = P is closed under complement. Proof. The left to right implication is obvious as CP = PP is closed under complement. To see the other implication, note that 9 CP = 9 C = P <ref> [21] </ref>. Now, under our hypothesis that C = P is closed under complement, we have C = P CP 9CP = 9C = P = 9co-C = P = co-C = P = C = P. 2 Combining this with Proposition 5.6 we have the following corollary.
Reference: [22] <author> L. Valiant and V. Vazirani. </author> <title> NP is as easy as detecting unique solutions. </title> <journal> Theoretical Computer Science, </journal> <volume> 47 </volume> <pages> 85-93, </pages> <year> 1986. </year>
Reference-contexts: This corresponds to the class parity P denoted by P. Given a string x 2 L, using Valiant and Vazirani's <ref> [22] </ref> reduction, or the construction given in [8], it is possible to construct a polynomial number of machines so that one of them satisfies the new predicate under the new witness function, with a high probability.
Reference: [23] <author> L. G. Valiant. </author> <title> The complexity of computing the permanent. </title> <journal> Theoretical Computer Science, </journal> <volume> 8 </volume> <pages> 189-201, </pages> <year> 1979. </year> <type> 52 Figure Legends 53 </type>
Reference-contexts: In general, it is easy to add and multiply the number of solutions of instances of problems in NP. Equivalently, it is easy to prove that the class #P <ref> [23] </ref> is closed under addition and multiplication; that is, given f 1 and f 2 in #P, there exists a g 1 and g 2 in #P such that for all x, g 1 (x) = f 1 (x)+f 2 (x) and g 2 (x) = f 1 (x)flf 2 (x).
References-found: 23

