URL: http://www.cs.duke.edu/~pankaj/papers/terr-short.ps.gz
Refering-URL: http://www.cs.duke.edu/CGC/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Approximating Shortest Paths on a Nonconvex Polyhedron  
Author: Kasturi R. Varadarajan Pankaj K. Agarwal 
Date: July 18, 1997  
Abstract: We present an approximation algorithm that, given a simple, possibly nonconvex polyhedron P with n vertices in R 3 , and two points s and t on its surface @P , constructs a path on @P between s and t whose length is at most 7(1 + "), where is the length of the shortest path between s and t on @P , and " &gt; 0 is an arbitararily small positive constant. The algorithm runs in O(n 5=3 log 5=3 n) time. We also present a slightly faster algorithm that runs in O(n 8=5 log 8=5 n) time and returns a path whose length is at most 15(1 + "). fl Work on this paper has been supported by National Science Foundation Grant CCR-93-01259, by an Army Research Office MURI grant DAAH04-96-1-0013, by a Sloan fellowship, by an NYI award, by matching funds from Xerox Corporation, and by a grant from the U.S.-Israeli Binational Science Foundation. y Department of Computer Science, Box 90129, Duke University, krv@cs.duke.edu z Department of Computer Science, Box 90129, Duke University, pankaj@cs.duke.edu 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, S. Har-Peled, M. Sharir, and K. R. Varadarajan, </author> <title> Approximating shortest paths on a convex polytope in three dimensions, </title> <note> submitted to J. ACM , 1996. </note>
Reference-contexts: Recently, Hershberger and Suri [19] presented a simple algorithm that computes a 2-approximate path on a convex polyhedron in O (n) time. 1 Agarwal et al. <ref> [1] </ref> presented an algorithm that computes a (1 + ")-approximate path on a convex polyhedron in O (n log 1=" + 1=" 3 ) time, for any given " &gt; 0. However, both these algorithms heavily exploit the convexity of the polyhedron and do not extend to nonconvex polyhedra. <p> However, both these algorithms heavily exploit the convexity of the polyhedron and do not extend to nonconvex polyhedra. It was posed as an open problem by Agarwal et al. <ref> [1] </ref> to find a subquadratic-time algorithm for computing an approximate path between two points on a nonconvex polyhedron.
Reference: [2] <author> A. Aho, J. Hopcroft, and J. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference: [3] <author> V. Akman, </author> <title> Unobstructed Shortest Paths in Polyhedral Environments, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 251, </volume> <publisher> Springer Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface <ref> [3, 8, 12, 13, 14, 15, 20, 28, 26, 32] </ref>. Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. <p> Mitchell et al. [26] improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well. Chen and Han [8] gave another algorithm with an improved running time of O (n 2 ). Although several heuristics have been proposed (see <ref> [3, 12, 13, 15, 20, 28] </ref>, for example), it is a long-standing and intriguing open problem whether a subquadratic algorithm can be developed even for computing an approximate shortest path.
Reference: [4] <author> S. Arya, D. M. Mount, and M. Smid, </author> <title> Randomized and deterministic algorithms for geometric spanners of all diameter, </title> <booktitle> Proc. 35th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <month> 703-712, </month> <year> 1994. </year>
Reference-contexts: Subsequently, we modify this algorithm so that it also returns an approximate shortest path. 4.1 Approximating the shortest path distance In order to describe the algorithm, we need to define a fi-approximator, which is similar to the well-studied notion of a spanner (see <ref> [4, 30] </ref>) with Steiner points. Definition 4.1 Let P 0 be a polyhedral patch, and S be a set of points on P 0 .
Reference: [5] <author> Ta. Asano, Te. Asano, L. Guibas, J. Hershberger, and H. Imai, </author> <title> Visibility of disjoint polygons, </title> <journal> Algorith-mica, </journal> <volume> 1 </volume> <pages> 49-63, </pages> <year> 1986. </year> <month> 10 </month>
Reference: [6] <author> C. Bajaj, </author> <title> The algebraic complexity of shortest paths in polyhedral spaces, </title> <booktitle> Proc. 23rd Allerton Conf. Commun. Control Comput., </booktitle> <pages> 510-517, </pages> <year> 1985. </year>
Reference: [7] <author> J. Canny and J. H. Reif, </author> <title> New lower bound techniques for robot motion planning problems, </title> <booktitle> Proc. 28th Annu. IEEE Symp. </booktitle> <institution> Found. Comput. Sci., </institution> <month> 49-60, </month> <year> 1987. </year>
Reference: [8] <author> J. Chen and Y. Han, </author> <title> Shortest paths on a polyhedron, </title> <booktitle> Proc. 6th Annu. ACM Symp. </booktitle> <institution> Comput. Geom., </institution> <year> 1990. </year>
Reference-contexts: Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface <ref> [3, 8, 12, 13, 14, 15, 20, 28, 26, 32] </ref>. Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. <p> Mitchell et al. [26] improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well. Chen and Han <ref> [8] </ref> gave another algorithm with an improved running time of O (n 2 ).
Reference: [9] <author> J. Choi, J. Sellen, and C. H. Yap, </author> <title> Approximate Euclidean shortest path in 3-space, </title> <booktitle> Proc. 10th Annu. ACM Symp. Comput. Geom., </booktitle> <pages> 41-48, </pages> <year> 1994. </year>
Reference-contexts: For the three-dimensional Euclidean shortest-path problem, where we are given a set of polyhedral obstacles and we want to compute the shortest collision-free path between two given points, there are some approximation algorithms due to Papadimitrou [27], Clarkson [10], and Choi et al. <ref> [9] </ref>. All these algorithms compute a (1 + ")-approximate path, but their running times are superquadratic in n. Recently, Lanthier et al. [21] have considered the problem of computing the weighted shortest path problem on polyhedral surfaces.
Reference: [10] <author> K. L. Clarkson, </author> <title> Approximation algorithms for shortest path motion planning, </title> <booktitle> Proc. 19th Annu. ACM Symp. Theory Comput., </booktitle> <pages> 56-65, </pages> <year> 1987. </year>
Reference-contexts: For the three-dimensional Euclidean shortest-path problem, where we are given a set of polyhedral obstacles and we want to compute the shortest collision-free path between two given points, there are some approximation algorithms due to Papadimitrou [27], Clarkson <ref> [10] </ref>, and Choi et al. [9]. All these algorithms compute a (1 + ")-approximate path, but their running times are superquadratic in n. Recently, Lanthier et al. [21] have considered the problem of computing the weighted shortest path problem on polyhedral surfaces. <p> To analyze Step 3, we consider the buffer faces and patches separately. For each buffer face P 0 i , 1 i k 1 , we compute a ffi-approximator G i using Clarkson's algorithm <ref> [10] </ref>; it computes a graph G i = (V B i [ M i ; E i ), with jE i j = O ((n i + m i )=ffi), in O ((n i + m i ) log (n i + m i )) time.
Reference: [11] <author> T. H. Cormen, C. E. Leiserson, R. L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: We compute the graph G = (N; E), where N = S i ), and E = i E i . Using Dijkstra's algorithm <ref> [11] </ref>, we compute the shortest path G between s and t in G, and return its length j G j as our estimate of . Theorem 4.2 The above algorithm computes, in O (n 5=3 log 5=3 n) time, a quantity between and 7 (1 + ").
Reference: [12] <author> X. Doug, </author> <title> Finding a Geodesic Path on a 3D Triangulated Surface, </title> <type> MS Thesis, </type> <institution> Missisipi State University, </institution> <year> 1995. </year>
Reference-contexts: Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface <ref> [3, 8, 12, 13, 14, 15, 20, 28, 26, 32] </ref>. Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. <p> Mitchell et al. [26] improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well. Chen and Han [8] gave another algorithm with an improved running time of O (n 2 ). Although several heuristics have been proposed (see <ref> [3, 12, 13, 15, 20, 28] </ref>, for example), it is a long-standing and intriguing open problem whether a subquadratic algorithm can be developed even for computing an approximate shortest path.
Reference: [13] <author> R. Franklin and V. Akman, </author> <title> Shortest paths between source and goal points located on/around a convex polyhedron, </title> <booktitle> Proc. 22nd Allerton Conf. </booktitle> <institution> Commun. Control Comput., </institution> <year> 1984. </year>
Reference-contexts: Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface <ref> [3, 8, 12, 13, 14, 15, 20, 28, 26, 32] </ref>. Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. <p> Mitchell et al. [26] improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well. Chen and Han [8] gave another algorithm with an improved running time of O (n 2 ). Although several heuristics have been proposed (see <ref> [3, 12, 13, 15, 20, 28] </ref>, for example), it is a long-standing and intriguing open problem whether a subquadratic algorithm can be developed even for computing an approximate shortest path.
Reference: [14] <author> R. Franklin and V. Akman, </author> <title> Shortest paths in 3-space, Voronoi diagrams with barriers, and related complexity and algebraic issues, </title> <booktitle> Proc. NATO Advanced Study Institute on Fundamental Algorithms for Computer Graphics, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> 895-917, </pages> <year> 1985. </year>
Reference-contexts: Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface <ref> [3, 8, 12, 13, 14, 15, 20, 28, 26, 32] </ref>. Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line.
Reference: [15] <author> R. Franklin, V. Akman, and C. Verrilli, </author> <title> Voronoi diagrams with barriers and on polyhedra for minimal path planning, </title> <journal> Visual Comput, </journal> <volume> 1 </volume> <pages> 133-150, </pages> <year> 1985. </year>
Reference-contexts: Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface <ref> [3, 8, 12, 13, 14, 15, 20, 28, 26, 32] </ref>. Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. <p> Mitchell et al. [26] improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well. Chen and Han [8] gave another algorithm with an improved running time of O (n 2 ). Although several heuristics have been proposed (see <ref> [3, 12, 13, 15, 20, 28] </ref>, for example), it is a long-standing and intriguing open problem whether a subquadratic algorithm can be developed even for computing an approximate shortest path.
Reference: [16] <author> G. N. Frederickson, </author> <title> Fast algorithms for shortest paths in planar graphs, with applications, </title> <journal> SIAM J. Comput., </journal> <volume> vol. 16, no. 6, </volume> <pages> pp. 1004-1022, </pages> <year> 1987. </year>
Reference-contexts: Moreover, since each face of P is a triangle, each node of G P has degree at most three. 3 Our algorithm exploits a scheme for partitioning any planar graph G = (V; E) that was devel-oped by Frederickson <ref> [16] </ref>. Let (V 1 ; V 2 ; : : : ; V k ) be a covering of the node set of V , that is, V i V and i V i = V . We refer to each V i as a region.
Reference: [17] <author> S. Har-Peled, </author> <title> Constructing approximate shortest path maps in three dimensions, </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: Using a scheme based on a recent result of Har-Peled <ref> [17] </ref> for constructing approximate shortest path maps on a polyhedron from a single source, we can compute a graph that 7 (1 + ")-approximates any path between u; v 2 V B [ M that passes through a vertex of P 0 .
Reference: [18] <author> J. Hershberger and S. Suri, </author> <title> Efficient computations of Euclidean shortest paths in the plane, </title> <booktitle> Proc. 34th Annu. IEEE Symp. </booktitle> <institution> Found. Comput. Sci., </institution> <month> 508-517, </month> <year> 1993. </year>
Reference: [19] <author> J. Hershberger and S. Suri, </author> <title> Practical methods for approximating shortest paths on a convex polytope in R 3 , Proc. </title> <booktitle> 6th Annu. ACM-SIAM Symp. Discrete Algo., </booktitle> <pages> 447-456, </pages> <year> 1995. </year>
Reference-contexts: Although several heuristics have been proposed (see [3, 12, 13, 15, 20, 28], for example), it is a long-standing and intriguing open problem whether a subquadratic algorithm can be developed even for computing an approximate shortest path. Recently, Hershberger and Suri <ref> [19] </ref> presented a simple algorithm that computes a 2-approximate path on a convex polyhedron in O (n) time. 1 Agarwal et al. [1] presented an algorithm that computes a (1 + ")-approximate path on a convex polyhedron in O (n log 1=" + 1=" 3 ) time, for any given "
Reference: [20] <author> K. Kant and S. Zucker, </author> <title> Toward efficient planning: The path-veolcity decomposition, </title> <journal> Int. J. Robotics Research, </journal> <volume> 5 </volume> <pages> 72-89, </pages> <year> 1986. </year>
Reference-contexts: Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface <ref> [3, 8, 12, 13, 14, 15, 20, 28, 26, 32] </ref>. Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. <p> Mitchell et al. [26] improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well. Chen and Han [8] gave another algorithm with an improved running time of O (n 2 ). Although several heuristics have been proposed (see <ref> [3, 12, 13, 15, 20, 28] </ref>, for example), it is a long-standing and intriguing open problem whether a subquadratic algorithm can be developed even for computing an approximate shortest path.
Reference: [21] <author> M. Lanthier, A. Maheshwari, and J. Sack, </author> <title> Approximating weighted shortest paths on polyhedral surfaces, </title> <note> to appear in Proc. 13th Annu. ACM Symp. Comput. Geom., </note> <year> 1997. </year>
Reference-contexts: All these algorithms compute a (1 + ")-approximate path, but their running times are superquadratic in n. Recently, Lanthier et al. <ref> [21] </ref> have considered the problem of computing the weighted shortest path problem on polyhedral surfaces. In this problem, each face of the given polyhedron has a weight associated with it, and the cost of traversing a face is the distance travelled on the face times the weight of the face.
Reference: [22] <author> R. J. Lipton and R. E. Tarjan, </author> <title> A separator theorem for planar graphs, </title> <journal> SIAM J. Appl. Math., </journal> <volume> 36 (1979), </volume> <pages> pp. 177-189. </pages>
Reference-contexts: There are two nontrivial steps in the algorithm | how to choose points on the boundary edges and how to construct the graphs G i 's. By using a scheme based on the planar separator theorem <ref> [22] </ref> to partition @P into patches, we ensure that there are only O ( p r) boundary edges per patch, which allows us to put only a small number of points on the boundary of each patch P 0 i . <p> Based on the separator theorem of Lipton and Tarjan <ref> [22] </ref>, Frederickson showed that r-partitions exist and can be constructed in O (jV j log jV j) time. An r-partition of G P induces a subdivision of the polyhedral surface @P , which we describe below.
Reference: [23] <author> T. Lozano-Perez and M. A. Wesley, </author> <title> An algorithm for planning collision-free paths among polyhedral obstacles, </title> <journal> Commun. ACM, </journal> <volume> 22 </volume> <pages> 560-570, </pages> <year> 1979. </year>
Reference: [24] <author> D. M. Mount, </author> <title> Voronoi diagrams on the surface of a polyhedron, </title> <type> Tech. Rep. 1496, </type> <institution> University of Mary-land, </institution> <year> 1985. </year> <month> 11 </month>
Reference-contexts: V 1 (e) is just the restriciton to e of the standard (geodesic) Voronoi diagram (on terrains) that is discussed in Mount's paper <ref> [24] </ref>. As a consequence of his algorithm, we have the following lemma. Lemma 6.1 We can compute the partition V 1 (e), for each boundary edge e 2 B, in a total of O (r 2 log r) time. <p> Let Q denote this collection. An edge site is regarded as open, that is, without its endpoints. In allowing boundary edges to be sites of the Voronoi diagram, we depart from the work of Mount <ref> [24] </ref>, which allows only point sites. As we shall see, allowing edge-sites is a useful idea in constructing fi-approximators.
Reference: [25] <author> J. S. B. Mitchell, </author> <title> Shortest paths among obstacles in the plane, </title> <booktitle> Proc. 9th Annu. ACM Symp. Comput. Geom., </booktitle> <pages> 308-317, </pages> <year> 1993. </year>
Reference: [26] <author> J. S. B. Mitchell, D. Mount, and C. H. Papadimitrou, </author> <title> The discrete geodesic problem, </title> <journal> SIAM J. Comput., </journal> <volume> 16 </volume> <pages> 647-668, </pages> <year> 1987. </year>
Reference-contexts: Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface <ref> [3, 8, 12, 13, 14, 15, 20, 28, 26, 32] </ref>. Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. <p> Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. Mitchell et al. <ref> [26] </ref> improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well. Chen and Han [8] gave another algorithm with an improved running time of O (n 2 ). <p> We denote by d (p; q) the Euclidean distance between points p and q in R 3 . We review some relevant properties of shortest paths on polyhedra. A detailed analysis can be found in <ref> [26, 32] </ref>. Unfolding. Two faces f and f 0 of P are said to be edge adjacent if they share a common edge. <p> We can easily compute these distances in O (r 3 log r) time, by invoking algorithm of Mitchell et al. <ref> [26] </ref> for each vertex of P 0 . 2. We compute the Voronoi partition V 1 (e) for each boundary edge e 2 B. <p> If (o; x) is a path from o 2 e to x, and its length j (o; x)j equals d P 0 (e; x), we say that (o; x) is the shortest path from the boundary edge e to x. By suitably modifying the algorithm by Mitchell et al. <ref> [26] </ref>, we can compute shortest paths from a single boundary edge of P 0 to every vertex of P 0 in O (r 2 log r) time. Algorithm 15-approximator is identical to 13-approximator, except that we replace step 1 by the following procedure.
Reference: [27] <author> C. H. Papadimitrou, </author> <title> An algorithm for shortest-path motion in three dimensions, </title> <journal> Inform. Process. Letters, </journal> <volume> 20 </volume> <pages> 259-263, </pages> <year> 1985. </year>
Reference-contexts: For the three-dimensional Euclidean shortest-path problem, where we are given a set of polyhedral obstacles and we want to compute the shortest collision-free path between two given points, there are some approximation algorithms due to Papadimitrou <ref> [27] </ref>, Clarkson [10], and Choi et al. [9]. All these algorithms compute a (1 + ")-approximate path, but their running times are superquadratic in n. Recently, Lanthier et al. [21] have considered the problem of computing the weighted shortest path problem on polyhedral surfaces.
Reference: [28] <author> B. Porter, S. Mohamad, T. Crossley, </author> <title> Genetic computation of geodesic on three-dimensional curved surfaces, </title> <booktitle> Proc. 1st Intl. IEE/IEEE Conf. on Genetic Algorithms in Engineering System: Innovations and Applications, </booktitle> <year> 1995. </year>
Reference-contexts: Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface <ref> [3, 8, 12, 13, 14, 15, 20, 28, 26, 32] </ref>. Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. <p> Mitchell et al. [26] improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well. Chen and Han [8] gave another algorithm with an improved running time of O (n 2 ). Although several heuristics have been proposed (see <ref> [3, 12, 13, 15, 20, 28] </ref>, for example), it is a long-standing and intriguing open problem whether a subquadratic algorithm can be developed even for computing an approximate shortest path.
Reference: [29] <author> J. Reif and J. Storer, </author> <title> Shortest paths in Euclidean space with polyhedral obstacles, </title> <journal> J. ACM, </journal> <volume> 41 </volume> <pages> 1013-1019, </pages> <year> 1994. </year>
Reference: [30] <author> J. S. Salowe, </author> <title> Constructing multidimensional spanner graphs, </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 1(2) </volume> <pages> 99-107, </pages> <year> 1991. </year>
Reference-contexts: Subsequently, we modify this algorithm so that it also returns an approximate shortest path. 4.1 Approximating the shortest path distance In order to describe the algorithm, we need to define a fi-approximator, which is similar to the well-studied notion of a spanner (see <ref> [4, 30] </ref>) with Steiner points. Definition 4.1 Let P 0 be a polyhedral patch, and S be a set of points on P 0 .
Reference: [31] <author> M. Sharir, </author> <title> On shortest paths amidst convex polyhedra, </title> <journal> SIAM J. Comput., </journal> <volume> 16 </volume> <pages> 561-572, </pages> <year> 1987. </year>
Reference: [32] <author> M. Sharir and A. Schorr, </author> <title> On shortest paths in polyhedral spaces, </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 193-215, </pages> <year> 1986. </year>
Reference-contexts: Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface <ref> [3, 8, 12, 13, 14, 15, 20, 28, 26, 32] </ref>. Sharir and Schorr [32] gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. <p> Previous results. Motived by these applications, many researchers have studied the problem of computing a shortest path on a polyhedral surface [3, 8, 12, 13, 14, 15, 20, 28, 26, 32]. Sharir and Schorr <ref> [32] </ref> gave an O (n 3 log n) algorithm for the case of a convex polyhedron, exploiting the property that a shortest path on a polyhedron "unfolds" into a straight line. <p> We denote by d (p; q) the Euclidean distance between points p and q in R 3 . We review some relevant properties of shortest paths on polyhedra. A detailed analysis can be found in <ref> [26, 32] </ref>. Unfolding. Two faces f and f 0 of P are said to be edge adjacent if they share a common edge.
Reference: [33] <author> E. Welzl, </author> <title> Constructing the visibility graph of n line segments in O(n 2 ) time, </title> <journal> Inform. Process. Letters, </journal> <volume> 20 </volume> <pages> 167-171, </pages> <year> 1985. </year> <title> f 2 f 3 e 2 f 3 f 1 f 3 </title>
References-found: 33

