URL: ftp://ftp.cs.umd.edu/pub/faculty/mount/451/451lects.ps.gz
Refering-URL: http://www.cs.umd.edu/users/mount/451/
Root-URL: http://www.cs.umd.edu
Title: Read: Course syllabus and Chapter 1 in on how to design good algorithms, and how
Author: Dave Mount CLR (Cormen, Leiserson, and Rivest). 
Address: College Park.  
Affiliation: of Computer Algorithms, at the University of Maryland,  
Date: Fall 1998  Sep 1, 1998)  
Note: Lecture Notes CMSC 451 CMSC 451: Design and Analysis of Computer Algorithms 1  Lecture 1: Course Introduction (Tuesday,  The focus of this course is  These lecture notes were prepared by David Mount for the course CMSC 451, Design and Analysis  Permission to use, copy, modify, and distribute these notes for educational purposes and without fee is hereby granted, provided that this copyright notice appear in all copies.  
Abstract: What is an algorithm? Our text defines an algorithm to be any well-defined computational procedure that takes some values as input and produces some values as output. Like a cooking recipe, an algorithm provides a step-by-step method for solving a computational problem. Unlike programs, algorithms are not dependent on a particular programming language, machine, system, or compiler. They are mathematical entities, which can be thought of as running on some sort of idealized computer with an infinite random access memory and an unlimited word size. Algorithm design is all about the mathematical theory behind the design of good programs. Why study algorithm design? Programming is a very complex task. There are a number of aspects of programming that make it so complex. The first is that most programming projects are very large, requiring the coordinated efforts of many people. (This is the topic a course like CMSC 435 in software engineering.) The next is that many programming projects involve storing and accessing large quantities of data efficiently. (This is the topic of courses on data structures and databases like CMSC 420 and 424.) The last is that many programming projects involve solving complex computational problems, for which simplistic or naive solutions may not be efficient enough. The complex problems may involve numerical data (the subject of courses on numerical analysis, like CMSC 466), but often they involve discrete data. This is where the topic of algorithm design and analysis is important. Although the algorithms discussed in this course will often represent only a tiny fraction of the code that is generated in a large software system, this small fraction may be very important for the success of the overall project. An unfortunately common approach to this problem is to first design an inefficient algorithm and data structure to solve the problem, and then take this poor design and attempt to fine-tune its performance. The problem is that if the underlying design is bad, then often no amount of fine-tuning is going to make a substantial difference. Course Overview: This course will consist of four major sections. The first will be a review of the mathematical tools necessary for the analysis of algorithms and sorting. These are mainly the topic of CMSC 251, and so we will breeze through them pretty quickly in the first couple of weeks. They include asymptotics, summations, recurrences. The next major focus (for about one third of the semester) will be on graph algorithms. This will include discussion of breadth-first and depth-first search and their application in various problems related to connectivity in graphs. Next we will discuss minimum spanning trees, and then shortest paths. Finally we will discuss network flows and matching. The final third of the semester will involve discussion of NP-completeness, the study of a set of problems for which no efficient algorithm is known. We 
Abstract-found: 1
Intro-found: 1
References-found: 0

