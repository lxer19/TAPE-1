URL: http://www.cs.virginia.edu/~mjl4x/papers/pdpta.ps
Refering-URL: http://www.cs.virginia.edu/~mjl4x/vitae.html
Root-URL: http://www.cs.virginia.edu
Title: Enabling Flexibility in the Legion Run-Time Library  
Author: Charles L. Viles, Michael J. Lewis, Adam J. Ferrari Anh Nguyen-Tuong, Andrew S. Grimshaw 
Keyword: configurable protocol stack, events, implicit parameters  
Web: http://legion.virginia.edu  
Address: Charlottesville, VA, U.S.A.  
Affiliation: Department of Computer Science University of Virginia  
Abstract: This paper describes the design and implementation of the Legion run-time library (LRTL), focusing specifically on facilities that enable extensibility and configurability. These facilities include management of heterogeneous communication, an event-based mechanism for inter-component communication, and automated memory management. The paper provides several examples that illustrate the inherent flexibility of the LRTL implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. S. Grimshaw and Wm. A. Wulf. </author> <title> The Legion Vision of a Worldwide Virtual Computer. </title> <journal> Communications of the ACM, </journal> <volume> 40(1) </volume> <pages> 39-45, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction The widespread deployment of gigabit networks will effectively shrink the distance between computing resources and will enable wide area distributed-object computing systems that will consist of many heterogeneous, distributed, unreliable resources. Legion <ref> [1, 2] </ref> will be one such system. Without significant software support, users will not be able to manage the complexity of this environment. Meta-systems software [3]|software that resides "above" physical resources and operating systems and "below" users and applications programs|is needed.
Reference: [2] <author> M. J. Lewis and A. S. Grimshaw. </author> <title> The Core Legion Object Model. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <pages> pages 551-561, </pages> <address> Syracuse, NY, </address> <year> 1996. </year>
Reference-contexts: 1 Introduction The widespread deployment of gigabit networks will effectively shrink the distance between computing resources and will enable wide area distributed-object computing systems that will consist of many heterogeneous, distributed, unreliable resources. Legion <ref> [1, 2] </ref> will be one such system. Without significant software support, users will not be able to manage the complexity of this environment. Meta-systems software [3]|software that resides "above" physical resources and operating systems and "below" users and applications programs|is needed.
Reference: [3] <author> A. S. Grimshaw, J. B. Weissman, E. A. West, and E. Loyot. Metasystems: </author> <title> An Approach Combining Parallel Processing And Heterogeneous Distributed Computing Systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 21(3) </volume> <pages> 257-270, </pages> <year> 1994. </year>
Reference: [4] <author> A. J. Ferrari, M. J. Lewis, C. L. Viles, A. Nguyen-Tuong, and A. S. Grimshaw. </author> <title> Implementation of the Legion Library. </title> <type> Technical Report CS-96-16, </type> <institution> Deparment of Computer Science, University of Virginia, </institution> <year> 1996. </year>
Reference-contexts: We conclude with related work and a brief summary. In the interest of brevity, we have omitted many details, especially in our description of LRTL itself. For a more complete exposition of LRTL, please see <ref> [4] </ref>. 2 System description Before discussing the the flexibility and extensibility features of LRTL, we must put it in context with the overall Legion system.
Reference: [5] <author> A. S. Grimshaw, J. B. Weissman, and W. T. Strayer. </author> <title> Portable Run-Time Support for Dynamic Object-Oriented Parallel Processing. </title> <journal> ACM Transactions on Computer Systems,, </journal> <volume> 14(2), </volume> <year> 1996. </year>
Reference-contexts: In addition to a user defined interface, all Legion objects support a set of object-mandatory methods that help implement basic Legion mechanisms such as object persistence, migration, and security. Methods on Legion objects are executed using a macro dataflow model <ref> [5] </ref>. This model requires that any method invocation sent to an object include (in addition to its parameters) a description of where the results produced by the method should be forwarded. <p> A program graph is a data-flow graph whose nodes represent method invocations on Legion objects, and whose arcs represent data dependencies between the method invocations. This computation model is exactly the one described in <ref> [5] </ref>, so we omit a detailed descrip tion. Figure 2 shows a simple user program and the resultant data dependencies expressed as a program graph.
Reference: [6] <author> A. S. Grimshaw. </author> <title> Easy-to-use Object-Oriented Parallel Programming with Mentat. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 39-51, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Finally, binding agents resolve LOIDs to object addresses. Legion provides a variety of programming interfaces on several different levels. Some programmers will use Legion by writing programs in high level parallel languages such as Men-tat <ref> [6] </ref>. The programs will then be transformed automatically by Legion-targeting compilers into Legion object implementations.
Reference: [7] <author> G. A. Geist, A. Beguelin, J. Dongarra, W. Jian, R. Manchek, and V. Sunderam. </author> <title> PVM: Parallel Virtual Machine, A User's Guide and Tutorial for Networked Parallel Computing. </title> <publisher> The MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Still other programmers will write PVM <ref> [7] </ref> code and link it with a Legion PVM library, which will rely on Legion objects for its implementation.
Reference: [8] <author> H. Zhou and G. A. Geist. </author> <title> Receiver Makes Right Data Conversion in PVM. </title> <booktitle> In Proceedings of the 14th International Conference on Computers and Communications, </booktitle> <pages> pages 458-464, </pages> <address> Phoenix, AZ, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: LRTL currently supports three different equivalence classes of architectures, "Alpha," "Sparc," and "x86." For efficiency reasons, Legion assumes a "receiver makes right" <ref> [8] </ref> data conversion policy; the sender of a message (i.e. the original creator of an lbuffer) packs the message in its own native format, and the receiver is responsible for converting the data to the format appropriate for the architecture on which it resides.
Reference: [9] <author> T. von Eicken, D. E. Culler, S. C. Goldstein, and K. E. Schauser. </author> <title> Active Messages: A Mechanism for Integrated Communication and Computation. </title> <booktitle> In Proceedings of the International Symposium on Computer Architecture, </booktitle> <pages> pages 256-266, </pages> <year> 1992. </year>
Reference-contexts: The locational informa tion needed to drive this geographical display might be specified by the communicating objects themselves or by some other entity that has knowledge of LOID to object address mappings. logging and visualization information. 4.4 Active messages The active messages programming model <ref> [9] </ref> is a message passing scheme that is intended to integrate communication and computation in order to increase the compute/communicate overlap, thereby masking the latency of message passing and increasing performance. The basic idea behind active messages is simple.
Reference: [10] <author> R. H. Campbell and A. N. Habermann. </author> <title> The Specification of Process Synchronization by Path Expressions. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 16 </volume> <pages> 89-102, </pages> <year> 1973. </year>
Reference-contexts: A more general approach to customizing the concurrency control requirements of operations on an object can be designed based on path expressions <ref> [10] </ref>. Path expressions permit the programmer to specify (1) sequencing constraints among operations; (2) selection (mutual exclusion) between operations; and (3) allowable concur-rency between operations. These concurrency control primitives let programmers maintain the sequential consistency of their programs and at the same time indicate potential con-currency to a run-time environment.
Reference: [11] <author> P. Pardyak and B. N. Bershad. </author> <title> Dynamic Binding for an Extensible System. </title> <booktitle> In Second USENIX Symposium on Operating System Design and Implementation, </booktitle> <year> 1996. </year>
Reference-contexts: For example, events are well understood and have been used for a variety of purposes, from graphical user interfaces such as X Windows, to the construction of operating system kernels such as SPIN <ref> [11] </ref>. The versatility of an event-based abstraction resides in its ability to decouple communication between various components of a system both temporally and spatially. This feature is essential to LRTL, which is required to support a variety user requirements.
Reference: [12] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-Kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> January </month> <year> 1991. </year>
Reference-contexts: This feature is essential to LRTL, which is required to support a variety user requirements. A diverse set of dynamically configurable user and system components must interoperate- the event paradigm serves as the "glue" that binds these components together. The design of LRTL was influenced by the x-Kernel project <ref> [12] </ref>, which demonstrated the importance of unifying inter-layer communication within a single framework. While the emphasis was on building network protocols, the lessons are very much applicable to our goal of supporting diverse functionality in LRTL.
Reference: [13] <author> N. T. Bhatti and R. D. Schlichting. </author> <title> A System For Constructing Configurable High-Level Protocols. </title> <booktitle> In SIGCOMM '95 Symposium on Communications Architectures and Protocols, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: While the emphasis was on building network protocols, the lessons are very much applicable to our goal of supporting diverse functionality in LRTL. The x-Kernel does not use an event-based abstraction for inter-layer communication though recent extensions <ref> [13] </ref> have added an event-based model for composing components within a layer. The result is a two-tiered framework wherein communication between components is no longer unified. While the SPIN and x-Kernel projects seek to provide flexibility and extensibility at the kernel level, LRTL operates entirely in user space.
Reference: [14] <author> G. A. Geist, J. A. Kohl, and P. M. Papadopou-los. </author> <title> CUMULVS: Providing Fault-Tolerance, Visualization and Steering of Parallel Applications. </title> <note> International Journal of Supercomputing Applications to appear. </note>
Reference-contexts: Except for low-level components in the transport layer, LRTL does not contain operating system specific code, and hence is portable to many operating systems and hardware architectures. Message logging is an important aspect of distributed and parallel systems <ref> [14, 15] </ref>.
Reference: [15] <author> B. Topol, J. T. Stasko, and V. S. Sunderam. </author> <title> Monitoring and Visualization in Cluster Environments. </title> <type> Technical Report GIT-CC-96-10, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: Except for low-level components in the transport layer, LRTL does not contain operating system specific code, and hence is portable to many operating systems and hardware architectures. Message logging is an important aspect of distributed and parallel systems <ref> [14, 15] </ref>.
Reference: [16] <author> G. A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. S. Sunderam. </author> <title> PVM (Parallel Virtual Machine): A Users' Guide and Tutorial for Network Parallel Computing. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Message logging is an important aspect of distributed and parallel systems [14, 15]. While this feature has typically been hard coded into system interfaces (e.g. as in the PVM message logger facility <ref> [16] </ref>), Legion program graphs and implicit parameters provide a flexible and generic way of specifying information propagation between objects for the purpose of message logging, program visualization, and other meta-applications. 6 Summary LRTL, in conjunction with the Legion core system objects and class system, provides a flexible and extensible foundation for
References-found: 16

