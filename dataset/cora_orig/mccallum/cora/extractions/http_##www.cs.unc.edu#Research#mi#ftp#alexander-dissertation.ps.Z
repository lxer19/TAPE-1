URL: http://www.cs.unc.edu/Research/mi/ftp/alexander-dissertation.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/mi/mi-people/alexander.html
Root-URL: http://www.cs.unc.edu
Title: PROVING FIRST-ORDER EQUALITY THEOREMS WITH HYPER-LINKING  
Author: by Geoffrey David Alexander 
Degree: A dissertation submitted to the faculty of the  in partial fulfillment of the requirements for the degree of Doctor of Philosophy in the  Approved by: Advisor Reader Reader  
Date: 1995  
Address: Chapel Hill  Chapel Hill,  
Affiliation: University of North Carolina at  Department of Computer Science.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Geoffrey D. Alexander and David A. Plaisted. </author> <title> Proving equality theorems with hyper-linking. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Automated Deduction, volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 706-710, </pages> <address> Saratoga Springs, New York, </address> <month> 15-18 June </month> <year> 1992. </year> <note> Springer-Verlag. System abstract. </note>
Reference: [2] <author> Peter B. Andrews. </author> <title> Theorem proving via general matings. </title> <journal> J. ACM, </journal> <volume> 28(2) </volume> <pages> 193-214, </pages> <month> April </month> <year> 1981. </year>
Reference-contexts: Proof : Proved in Andrews <ref> [2] </ref> and Gallier [37]. 2.8 Methods for Handling Equality Based on Theorem 2.10, the obvious solution to the theorem proving problem for formulas with equality is to simply use the equality axioms.
Reference: [3] <author> J. Avenhaus and K. Madlener. </author> <title> Term rewriting and equational reasoning. </title> <editor> In Ranan B. Banerji, editor, </editor> <booktitle> Formal Techniques in Artificial Intelligence: A Sourcebook, volume 6 of Studies in Computer Science and Artificial Intelligence, </booktitle> <pages> pages 1-43. </pages> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [4] <author> Leo Bachmair, Nachum Dershowitz, and Jieh Hsiang. </author> <title> Orderings for equational proofs. </title> <booktitle> In Proceedings of the Symposium on Logic in Computer Science, </booktitle> <pages> pages 346-357, </pages> <address> Cam-bridge, Massachusetts, </address> <month> 16-18 June </month> <year> 1986. </year>
Reference: [5] <author> Leo Bachmair, Nachum Dershowitz, and David A. Plaisted. </author> <title> Completion without failure. </title> <editor> In Hassan Ait-Kaci and Maurice Nivat, editors, </editor> <title> Resolution of Equations in Algebraic Structures 2: </title> <booktitle> Rewriting Techniques, </booktitle> <pages> pages 1-30. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: For those readers requiring further information, we suggest Boolos and Jeffrey [11], Ebbinghaus, Flum, and Thomas [32], and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting [35], Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted <ref> [5] </ref>, Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee [62] and Lee and Plaisted [63] for hyper-linking. <p> Bachmair, Dershowitz, 10 For an example of where Knuth-Bendix completion fails to find an existing equivalent canonical term rewriting system, we refer the reader to Section 7 of Bachmair, Dershowitz, and Plaisted <ref> [5] </ref>. 40 and Plaisted [5] developed unfailing completion, an extension to Knuth-Bendix completion, to address this problem. <p> Bachmair, Dershowitz, 10 For an example of where Knuth-Bendix completion fails to find an existing equivalent canonical term rewriting system, we refer the reader to Section 7 of Bachmair, Dershowitz, and Plaisted <ref> [5] </ref>. 40 and Plaisted [5] developed unfailing completion, an extension to Knuth-Bendix completion, to address this problem. <p> In presenting unfailing completion, we follow the notation of Bachmair, Dershowitz, and Plaisted <ref> [5] </ref>, which presents unfailing completion as an extension to the Knuth-Bendix completion inference rules. Note that unfailing completion can also be described in terms of sequences of ordered rewriting systems rather than sequences of completion pairs. <p> Proof : Directly from the Soundness of the Unfailing Completion Inference Rules (Theorem 2.40). As with the deduce inference rule of Knuth-Bendix completion, the major question for unfailing completion is how to control application of the deduce 2 inference rule. Bachmair, Dershowitz, and Plaisted <ref> [5] </ref> showed, in manner similar to that of Knuth and Bendix, that application of the deduce 2 inference rule can be restricted to extended critical pairs , which represent selected "overlaps" of equations. <p> Proof : Proved in Bachmair, Dershowitz, and Plaisted <ref> [5] </ref>. Corollary 2.43 fl Let (E 0 ; R 0 ); (E 1 ; R 1 ); : : : be a fair unfailing completion sequence and &gt; the termination ordering of (E 0 ; R 0 ); (E 1 ; R 1 ); : : : . <p> Proof : Proved in Bachmair, Dershowitz, and Plaisted <ref> [5] </ref>. 2.8.7 Specialized Unification Another technique for addressing the term rewriting limitation of unorderable equations is specialized unification. Specialized unification is similar to unification.
Reference: [6] <author> Leo Bachmair, Harold Ganzinger, Christopher Lynch, and Wayne Snyder. </author> <title> Basic paramodulation and superposition. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Automated Deduction, volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 462-476, </pages> <address> Saratoga Springs, New York, 15-18 June 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference: [7] <author> Leo Bachmair and David A. Plaisted. </author> <title> Termination orderings for associative-commutative rewriting systems. </title> <journal> J. Symbolic Computation, </journal> <volume> 1 </volume> <pages> 329-349, </pages> <year> 1985. </year>
Reference: [8] <editor> Jon Barwise, editor. </editor> <booktitle> Handbook of Mathematical Logic, volume 90 of Studies of Logic and the Foundations of Mathematics. </booktitle> <publisher> North-Holland Publishing Company, </publisher> <address> Amsterdam, </address> <year> 1977. </year>
Reference: [9] <author> George Birkhoff. </author> <title> On the structure of abstract algebras. </title> <booktitle> Proceedings of the Cambridge Philosophical Society, </booktitle> <volume> 31 </volume> <pages> 433-454, </pages> <year> 1935. </year>
Reference-contexts: We refer to this as equational rewriting. Equational rewriting provides a method for deriving logical consequences of sets of equations as shown by Birkhoff <ref> [9] </ref>. Definition 2.87 Let E be a set of equations and s and t terms. <p> Theorem 2.23 (Birkhoff 's Theorem) Let E be a set of equations. Then for all terms s and t, s = E t iff s $ fl Proof : Proved in Birkhoff <ref> [9] </ref>. Term rewriting also provides a method for deriving logical consequences of sets of equations. Definition 2.92 Let R be a term rewriting system. The set of equations of R, denoted by R = is f f s = t g : s ! t 2 R g.
Reference: [10] <author> W. W. Bledsoe and D. W. Loveland, </author> <title> editors. Automated Theorem Proving: After 25 Years, </title> <booktitle> volume 29 of Contemporary Mathematics. </booktitle> <publisher> American Mathematical Society, </publisher> <address> Providence, Rhode Island, </address> <year> 1984. </year>
Reference: [11] <author> George S. Boolos and Richard C. Jeffrey. </author> <title> Computability and Logic, Third Edition. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1989. </year>
Reference-contexts: While this chapter serves as a reference to aid in the reading of the following chapters, it is not intended as a tutorial. For those readers requiring further information, we suggest Boolos and Jeffrey <ref> [11] </ref>, Ebbinghaus, Flum, and Thomas [32], and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting [35], Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee [62] <p> For such a treatment, we refer the reader to Boolos and Jeffrey <ref> [11] </ref>. 16 Note that the replacement axiom is defined for the equality symbol, as well as for other predicate symbols. The replacement axiom for equality is 8w 8x 8y 8z (w = y ^ x = z) ! (w = x ! y = z).
Reference: [12] <author> Alexandre Boudet. </author> <title> Unification in a combination of equational theories: an efficient algorithm. </title> <editor> In M. E. Stickel, editor, </editor> <booktitle> Proceedings of the 10th International Conference on Automated Deduction, volume 449 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 292-307, </pages> <address> Kaiserslautern, West Germany, 24-27 July 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference: [13] <author> Alexandre Boudet. </author> <title> Unification in order-sorted algebras with overloading. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Automated Deduction, volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 193-207, </pages> <address> Saratoga Springs, New York, 15-18 June 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference: [14] <author> D. Brand. </author> <title> Proving theorems with the modification method. </title> <journal> SIAM J. Comput., </journal> <volume> 4(4) </volume> <pages> 412-430, </pages> <month> December </month> <year> 1975. </year>
Reference-contexts: When combining paramod-ulation with resolution proof procedures, one usually includes the functionally reflexive axiom, f (x 1 ; : : : ; x n ) = f (x 1 ; : : : ; x n ), for each function symbol f (except for individual 23 constants). Brand <ref> [14] </ref> showed that the functionally reflexive axioms are unnecessary when paramodulation is used with unrestricted resolution. However, the functionally reflexive axioms are required for many of the restrictions placed on resolution. While paramodulation works well with resolution proof procedures, it is not well suited for hyper-linking. <p> This is not in line with the instance-based nature of hyper-linking, which does not combine literals from differing clauses. Further discussion on paramodulation can be found in Loveland [66] and Chang and Lee [17]. 2.8.2 Brand's E-Modification Brand <ref> [14] </ref> developed an alternative to paramodulation based on "pulling out" non-variable terms from function and predicate arguments. For example, consider the set of clauses f f p (a) g; f p (b) g; f a = b g g which is E-unsatisfiable. <p> Then I is a normal model of S iff I is a model of E-mod (S) [ f f x = x g; f x 6= y; x 6= z; y = z g g. Proof : See Brand <ref> [14] </ref>. Corollary 2.21 Let S be a set of clauses. Then S is E-unsatisfiable iff E-mod (S) [ f f x = x g; f x 6= y; x 6= z; y = z g g is unsatisfiable. Proof : Directly from Theorem 2.20.
Reference: [15] <editor> Alan Bundy. </editor> <booktitle> The Computer Modelling of Mathematical Reasoning. </booktitle> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1983. </year>
Reference: [16] <author> Ritu Chadha. </author> <title> Applications of Unskolemization. </title> <type> PhD Dissertation, </type> <institution> University of North Carolina at Chapel Hill, </institution> <year> 1991. </year> <note> Available from the Department of Computer Science as technical report TR91-027. </note>
Reference: [17] <author> Chin-Liang Chang and Richard Char-Tung Lee. </author> <title> Symbolic and Mechanical Theorem Proving. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1973. </year>
Reference-contexts: While this chapter serves as a reference to aid in the reading of the following chapters, it is not intended as a tutorial. For those readers requiring further information, we suggest Boolos and Jeffrey [11], Ebbinghaus, Flum, and Thomas [32], and Mendelson [71] for mathematical logic, Chang and Lee <ref> [17] </ref>, Fitting [35], Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee [62] and Lee and Plaisted [63] for hyper-linking. <p> However, Skolemization does preserve satisfiability. Thus, clause form is better suited for use in refutation proof procedures as they attempt to show the unsatisfiability of a set of closed formulas. Skolemization is discussed further in Chang and Lee <ref> [17] </ref> and Loveland [66]. Clocksin and Mellish [20] give a Prolog implementation of Skolemization. 2.5 Equality We consider equality as a binary predicate, normally denoted by the infix operator =. We represent the meaning of equality via selected closed formulas, referred to as the equality axioms 3 . <p> Definition 2.70 Let C 1 and C 2 be clauses. We say C 1 subsumes C 2 if some subset of C 2 is an instance of C 1 . Unification is discussed further in Chang and Lee <ref> [17] </ref>, Fitting [35], Lloyd [64], and Loveland [66]. 2.7 The Skolem-Herbrand-Godel Theorem Refutation proof procedures work by showing that there exists no interpretation which satisfies a set of closed formulas. This, in general, is difficult to show since the domain of an arbitrary interpretation can be any arbitrary set. <p> This is not in line with the instance-based nature of hyper-linking, which does not combine literals from differing clauses. Further discussion on paramodulation can be found in Loveland [66] and Chang and Lee <ref> [17] </ref>. 2.8.2 Brand's E-Modification Brand [14] developed an alternative to paramodulation based on "pulling out" non-variable terms from function and predicate arguments. For example, consider the set of clauses f f p (a) g; f p (b) g; f a = b g g which is E-unsatisfiable.
Reference: [18] <author> Heng Chu. </author> <title> Semantically Guided First-Order Theorem Proving with Hyper-Linking. </title> <type> PhD Dissertation, </type> <institution> University of North Carolina at Chapel Hill, </institution> <year> 1994. </year> <note> Available from the Department of Computer Science as technical report TR94-051. </note>
Reference-contexts: However, predicate replacement has one major limitation in that it requires substantial knowledge of the input clauses in order to identify the appropriate replacement rules. In many cases, the necessary replacement rules are not intuitive or natural and are difficult to identify. Chu <ref> [18] </ref>, in his development and implementation of semantic hyper-linking, defined two types of replacement rules, natural replacement rules and minimal replacement rules , which he generated automatically. Definition 2.167 Let R be a replacement rule.
Reference: [19] <author> Heng Chu and David A. Plaisted. </author> <title> Semantically guided first-order theorem proving using hyper-linking. </title> <editor> In Alan Bundy, editor, </editor> <booktitle> Proceedings of the 12th International Conference on Automated Deduction, volume 814 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 192-206, </pages> <address> Nancy, France, 26 June -1 July 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference: [20] <author> William F. Clocksin and Christopher S. Mellish. </author> <title> Programming in Prolog, Second Edition. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1984. </year>
Reference-contexts: However, Skolemization does preserve satisfiability. Thus, clause form is better suited for use in refutation proof procedures as they attempt to show the unsatisfiability of a set of closed formulas. Skolemization is discussed further in Chang and Lee [17] and Loveland [66]. Clocksin and Mellish <ref> [20] </ref> give a Prolog implementation of Skolemization. 2.5 Equality We consider equality as a binary predicate, normally denoted by the infix operator =. We represent the meaning of equality via selected closed formulas, referred to as the equality axioms 3 . Definition 2.43 Let L be a first-order language.
Reference: [21] <author> Paul M. Cohn. </author> <title> Universal Algebra, </title> <booktitle> volume 6 of Mathematics and Its Applications. </booktitle> <address> D. </address> <publisher> Reidel Publishing, Dordrecht, Holland, </publisher> <year> 1981. </year>
Reference: [22] <author> Hubert Comon. </author> <title> Solving inequations in term algebras. </title> <booktitle> In Proceedings of the Fifth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 62-69, </pages> <address> Philadelphia, Pennsylvania, </address> <month> 4-7 June </month> <year> 1990. </year> <month> 169 </month>
Reference: [23] <author> Stephen A. Cook. </author> <title> The complexity of theorem-proving procedures. </title> <booktitle> In Proceedings of the Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 151-158, </pages> <address> Shaker Heights, Ohio, </address> <month> 3-5 May </month> <year> 1971. </year>
Reference: [24] <author> Martin Davis and Hilary Putnam. </author> <title> A computing procedure for quantification theory. </title> <journal> J. ACM, </journal> <volume> 7 </volume> <pages> 201-205, </pages> <year> 1960. </year>
Reference-contexts: If C does contain such a literal, M [ f Gr (L) g is a ground model of S [ f C g. In this case, Gr (L) is added to M . Otherwise, CLIN-2 uses a propositional satisfiability test based on the method of Davis and Putnam <ref> [24] </ref> to find a ground model for S [ f C g. Results of running CLIN and CLIN-2 on Version 1.1.3 of the TPTP Problem Library of Sutcliffe and Suttner [93,94] are presented in Tables B.1 and B.2. <p> Both CLIN and CLIN-2 use a variant of the Davis-Putnam propositional unsatisfiability test <ref> [24] </ref>. CLIN implements two refinements to the unsatisfiability test, which when added to CLIN-2 should improve the efficiency of its unsatisfiability test: * CLIN tests if the clause set is trivially satisfiable 26 after each case analysis step.
Reference: [25] <author> Nachum Dershowitz. </author> <title> Orderings for term-rewriting systems. </title> <journal> Theoretical Comput. Sci., </journal> <volume> 17 </volume> <pages> 279-301, </pages> <year> 1982. </year>
Reference-contexts: Then all quasi-simplification orderings on T have well-founded strict parts. Proof : Proved in Dershowitz <ref> [25] </ref>. Theorem 2.31 Let be a quasi-simplification ordering with strict part &gt;. If &gt; has the full invariance property, then &gt; is a termination ordering. Proof : Proved in Plaisted [82]. There are many different partial and quasi-orderings used to show termination of term rewriting systems. <p> Proof : Proved in Plaisted [82]. There are many different partial and quasi-orderings used to show termination of term rewriting systems. Some examples are the Knuth-Bendix orderings [58], the polynomial order-ings of Lankford [60,61], and the recursive path orderings (see Dershowitz <ref> [25] </ref> or Plaisted [82]). As an example, we present the lexicographic path ordering of Kamin and Levy [55] as a quasi-ordering 8 . The lexicographic path ordering is defined in terms of a quasi-precedence ordering on function symbols and the lexicographic extension of a quasi-ordering.
Reference: [26] <author> Nachum Dershowitz. </author> <title> Computing with rewrite systems. </title> <journal> Information and Control, </journal> <volume> 65 </volume> <pages> 122-157, </pages> <year> 1985. </year>
Reference: [27] <author> Nachum Dershowitz. </author> <title> Termination of rewriting. </title> <journal> J. Symbolic Computation, </journal> <volume> 3 </volume> <pages> 69-116, </pages> <year> 1987. </year>
Reference-contexts: Theorem 2.32 All lexicographic path orderings are quasi-simplification orderings. Proof : Proved in Kamin and Levy [55]. Also stated without proof in Dershowitz <ref> [27] </ref>. Theorem 2.33 The strict part of all lexicographic path orderings have the full invariance property. Proof : By induction on the definition of the lexicographic path ordering. Further discussion on the termination of term rewriting systems can be found in Dershowitz [27], Dershowitz and Jouannaud [29], and Plaisted [82]. 34 <p> Also stated without proof in Dershowitz <ref> [27] </ref>. Theorem 2.33 The strict part of all lexicographic path orderings have the full invariance property. Proof : By induction on the definition of the lexicographic path ordering. Further discussion on the termination of term rewriting systems can be found in Dershowitz [27], Dershowitz and Jouannaud [29], and Plaisted [82]. 34 2.8.5 Ordered Rewriting There are some equations, such as commutativity (x fl y = y fl x), which cannot be ordered under any termination ordering. This limits the effectiveness of term rewriting.
Reference: [28] <author> Nachum Dershowitz. </author> <title> Completion and its applications. </title> <editor> In Hassan Ait-Kaci and Mau-rice Nivat, editors, </editor> <title> Resolution of Equations in Algebraic Structures 2: </title> <booktitle> Rewriting Techniques, </booktitle> <pages> pages 31-85. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: We present Knuth-Bendix completion as a set of inference rules, following somewhat the notation of Dershowitz <ref> [28] </ref>. We begin by giving general definitions for completion sequence and completion procedure. 36 Definition 2.132 Let E be a set of equations and R a term rewriting system. We say the pair (E; R) is a completion pair.
Reference: [29] <author> Nachum Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewriting systems. </title> <editor> In Jan van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 243-320. </pages> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: For those readers requiring further information, we suggest Boolos and Jeffrey [11], Ebbinghaus, Flum, and Thomas [32], and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting [35], Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud <ref> [29] </ref>, Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee [62] and Lee and Plaisted [63] for hyper-linking. <p> Proof : Proved in Plaisted [82]. Definition 2.99 Let R be a term rewriting system. We say R is canonical if R is reduced, terminating, and confluent. We say R is ground canonical if R is reduced, terminating, and ground confluent. Dershowitz and Jouannaud <ref> [29] </ref> and Plaisted [82] present nice surveys on term rewriting. 2.8.4 Termination of Term Rewriting Systems When using term rewriting within a proof procedure, it is useful to know that the term rewriting system is terminating, as this ensures that the proof procedure never loops rewriting a single term. <p> Theorem 2.33 The strict part of all lexicographic path orderings have the full invariance property. Proof : By induction on the definition of the lexicographic path ordering. Further discussion on the termination of term rewriting systems can be found in Dershowitz [27], Dershowitz and Jouannaud <ref> [29] </ref>, and Plaisted [82]. 34 2.8.5 Ordered Rewriting There are some equations, such as commutativity (x fl y = y fl x), which cannot be ordered under any termination ordering. This limits the effectiveness of term rewriting.
Reference: [30] <author> Daniel J. Dougherty and Patricia Johann. </author> <title> An improved general E-unification method. </title> <editor> In M. E. Stickel, editor, </editor> <booktitle> Proceedings of the 10th International Conference on Automated Deduction, volume 449 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 261-275, </pages> <address> Kaiserslautern, West Germany, 24-27 July 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference: [31] <author> David A. Duffy. </author> <title> Principles of Automated Theorem Proving. </title> <publisher> John Wiley and Sons, </publisher> <address> Chichester, England, </address> <year> 1991. </year>
Reference: [32] <author> Heinz-Dieter Ebbinghaus, Jorg Flum, and Wolfgang Thomas. </author> <title> Mathematical Logic, Second Edition. Undergraduate Texts in Mathematics. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1994. </year> <note> Translated from Einfuhrung in die mathematische Logik, published by Wis-senschaftliche Buchgesellschaft, </note> <institution> Darmstadt, by Ann S. Ferebee. </institution>
Reference-contexts: While this chapter serves as a reference to aid in the reading of the following chapters, it is not intended as a tutorial. For those readers requiring further information, we suggest Boolos and Jeffrey [11], Ebbinghaus, Flum, and Thomas <ref> [32] </ref>, and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting [35], Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee [62] and Lee and Plaisted [63] <p> If P is sound, then P is consistent. Proof : Directly from the definitions of soundness and consistency. Theorem 2.5 (Godel's Completeness Theorem) There exists a sound and logically complete proof procedure. Proof : First proved by Godel [41]. Also proved in Ebbinghaus, Flum, and Thomas <ref> [32] </ref>, Gallier [37], and Mendelson [71]. The use of inference rules is common in describing proof procedures. Definition 2.32 Let S be a set. An n-place inference rule R on S is a mapping f : X ! S where X S n .
Reference: [33] <author> Yu. L. Ershov and E. A. Palyutin. </author> <title> Mathematical Logic. </title> <publisher> Mir Publishers, </publisher> <address> Moscow, </address> <year> 1984. </year>
Reference: [34] <author> Francois Fages. </author> <title> Associative-commutative unification. </title> <editor> In R. E. Shostak, editor, </editor> <booktitle> Proceedings of the 7th International Conference on Automated Deduction, volume 170 of Lecture Notes in Computer Science, </booktitle> <pages> pages 194-208, </pages> <address> Napa, California, 14-16 May 1984. </address> <publisher> Springer-Verlag. </publisher>
Reference: [35] <author> Melvin Fitting. </author> <title> First-Order Logic and Automated Theorem Proving. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: For those readers requiring further information, we suggest Boolos and Jeffrey [11], Ebbinghaus, Flum, and Thomas [32], and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting <ref> [35] </ref>, Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee [62] and Lee and Plaisted [63] for hyper-linking. <p> The equality axioms capture the properties of equality. Theorem 2.10 Let S be a set of closed formulas and F a closed formula. Then S j= = F iff S [ Eq (S) j= F . Proof : Proved in Fitting <ref> [35] </ref>. Two other axioms, symmetry and transitivity, can be used in place of the replacement axioms for equality. Definition 2.55 The symmetry axiom is the closed formula 8x 8y x = y ! y = x. <p> Theorem 2.14 (Unification Theorem) Let S be a finite set of terms or literals. There exists an algorithm which returns a most general unifier of S if S is unifiable or reports that S is not unifiable otherwise. Proof : Proved in Fitting <ref> [35] </ref>, Gallier [37], and Loveland [66]. A unifiable set of terms or literals has a unique most general unifier up to the naming of variables. Theorem 2.15 Let S be a unifiable set of terms or literals and and oe most general unifiers of S. <p> Theorem 2.15 Let S be a unifiable set of terms or literals and and oe most general unifiers of S. Then E Eoe for all E in S. Proof : Proved in Fitting <ref> [35] </ref>, Gallier [37], and Loveland [66]. Definition 2.68 Let L 1 and L 2 be literals. We say L 1 and L 2 link if either L 1 and L 2 or L 1 and L 2 unify. Definition 2.69 Let L 1 and L 2 be literals. <p> Definition 2.70 Let C 1 and C 2 be clauses. We say C 1 subsumes C 2 if some subset of C 2 is an instance of C 1 . Unification is discussed further in Chang and Lee [17], Fitting <ref> [35] </ref>, Lloyd [64], and Loveland [66]. 2.7 The Skolem-Herbrand-Godel Theorem Refutation proof procedures work by showing that there exists no interpretation which satisfies a set of closed formulas. This, in general, is difficult to show since the domain of an arbitrary interpretation can be any arbitrary set. <p> Theorem 2.16 A set of clauses is unsatisfiable iff it has no Herbrand model. Proof : Proved in Gallier [37]. Also, stated in Fitting <ref> [35] </ref> with proof left as an exercise. Theorem 2.17 fl (Skolem-Herbrand-Godel Theorem) A set S of clauses is unsatisfiable iff there exists an unsatisfiable finite subset of ground instances of S. Proof : Proved in Gallier [37] and Loveland [66].
Reference: [36] <author> Albrecht Fortenbacher. </author> <title> An algebraic approach to unification under associativity and commutativity. </title> <editor> In Jean-Pierre Jouannaud, editor, </editor> <booktitle> Proceedings of the 1st International Conference on Rewriting Techniques and Applications, volume 202 of Lecture Notes in Computer Science, </booktitle> <pages> pages 381-397, </pages> <address> Dijon, France, 20-22 May 1985. </address> <publisher> Springer-Verlag. </publisher> <pages> 170 </pages>
Reference: [37] <author> Jean H. Gallier. </author> <title> Logic for Computer Science: Foundations of Automatic Theorem Proving. </title> <publisher> Harper and Row, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: For those readers requiring further information, we suggest Boolos and Jeffrey [11], Ebbinghaus, Flum, and Thomas [32], and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting [35], Gallier <ref> [37] </ref>, and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee [62] and Lee and Plaisted [63] for hyper-linking. <p> If P is sound, then P is consistent. Proof : Directly from the definitions of soundness and consistency. Theorem 2.5 (Godel's Completeness Theorem) There exists a sound and logically complete proof procedure. Proof : First proved by Godel [41]. Also proved in Ebbinghaus, Flum, and Thomas [32], Gallier <ref> [37] </ref>, and Mendelson [71]. The use of inference rules is common in describing proof procedures. Definition 2.32 Let S be a set. An n-place inference rule R on S is a mapping f : X ! S where X S n . <p> Theorem 2.14 (Unification Theorem) Let S be a finite set of terms or literals. There exists an algorithm which returns a most general unifier of S if S is unifiable or reports that S is not unifiable otherwise. Proof : Proved in Fitting [35], Gallier <ref> [37] </ref>, and Loveland [66]. A unifiable set of terms or literals has a unique most general unifier up to the naming of variables. Theorem 2.15 Let S be a unifiable set of terms or literals and and oe most general unifiers of S. <p> Theorem 2.15 Let S be a unifiable set of terms or literals and and oe most general unifiers of S. Then E Eoe for all E in S. Proof : Proved in Fitting [35], Gallier <ref> [37] </ref>, and Loveland [66]. Definition 2.68 Let L 1 and L 2 be literals. We say L 1 and L 2 link if either L 1 and L 2 or L 1 and L 2 unify. Definition 2.69 Let L 1 and L 2 be literals. <p> Theorem 2.16 A set of clauses is unsatisfiable iff it has no Herbrand model. Proof : Proved in Gallier <ref> [37] </ref>. Also, stated in Fitting [35] with proof left as an exercise. Theorem 2.17 fl (Skolem-Herbrand-Godel Theorem) A set S of clauses is unsatisfiable iff there exists an unsatisfiable finite subset of ground instances of S. Proof : Proved in Gallier [37] and Loveland [66]. <p> Proof : Proved in Gallier <ref> [37] </ref>. Also, stated in Fitting [35] with proof left as an exercise. Theorem 2.17 fl (Skolem-Herbrand-Godel Theorem) A set S of clauses is unsatisfiable iff there exists an unsatisfiable finite subset of ground instances of S. Proof : Proved in Gallier [37] and Loveland [66]. The Skolem-Herbrand-Godel theorem extends to equality. 5 The Skolem-Herbrand-Godel theorem is sometimes incorrectly referred to as Herbrand's theorem in the literature. One should note that Herbrand's theorem deals with provability, a proof-theoretic concept, while the Skolem-Herbrand-Godel theorem deals with unsatisfiability, a semantic concept. <p> One should note that Herbrand's theorem deals with provability, a proof-theoretic concept, while the Skolem-Herbrand-Godel theorem deals with unsatisfiability, a semantic concept. For further discussion on the difference between Herbrand's theorem and the Skolem-Herbrand-Godel theorem, we refer the reader to Gallier <ref> [37] </ref> and Herbrand [46]. 22 Theorem 2.18 fl (Skolem-Herbrand-Godel Theorem for Equality) A set S of clauses is E-unsatisfiable iff there exists an E-unsatisfiable finite subset of ground instances of S. Proof : Proved in Andrews [2] and Gallier [37]. 2.8 Methods for Handling Equality Based on Theorem 2.10, the obvious <p> theorem and the Skolem-Herbrand-Godel theorem, we refer the reader to Gallier <ref> [37] </ref> and Herbrand [46]. 22 Theorem 2.18 fl (Skolem-Herbrand-Godel Theorem for Equality) A set S of clauses is E-unsatisfiable iff there exists an E-unsatisfiable finite subset of ground instances of S. Proof : Proved in Andrews [2] and Gallier [37]. 2.8 Methods for Handling Equality Based on Theorem 2.10, the obvious solution to the theorem proving problem for formulas with equality is to simply use the equality axioms.
Reference: [38] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference: [39] <author> P. C. Gilmore. </author> <title> A proof method for quantification theory: Its justification and realization. </title> <journal> IBM J. Res. Dev., </journal> <volume> 4(1) </volume> <pages> 28-35, </pages> <month> January </month> <year> 1960. </year>
Reference-contexts: The main issue with instance-based proof procedures is which ground instances should be generated. One way of generating ground instances is to simply enumerate them. This approach was used by Gilmore <ref> [39] </ref>. The problem with this approach is the exponential number of ground instances required to prove most theorems. In order for an instance-based proof procedure to efficiently prove most theorems, it must restrict the ground instances generated.
Reference: [40] <author> Kurt Godel. </author> <title> Uber die Vollstandigkeit des Logikkalkuls. </title> <type> Doctoral Dissertation, </type> <institution> University of Vienna, </institution> <year> 1929. </year> <booktitle> English translation in Godel[43, </booktitle> <pages> pages 60-101]. </pages>
Reference: [41] <author> Kurt Godel. </author> <title> Die Vollstandigkeit der Axiome des logischen Funktionenkalkuls. </title> <journal> Monat-shefte fur Mathematik und Physik, </journal> <volume> 37 </volume> <pages> 349-360, </pages> <year> 1930. </year> <booktitle> English translation in Godel[43, </booktitle> <pages> pages 103-123]. </pages>
Reference-contexts: Theorem 2.4 Let P be a proof procedure. If P is sound, then P is consistent. Proof : Directly from the definitions of soundness and consistency. Theorem 2.5 (Godel's Completeness Theorem) There exists a sound and logically complete proof procedure. Proof : First proved by Godel <ref> [41] </ref>. Also proved in Ebbinghaus, Flum, and Thomas [32], Gallier [37], and Mendelson [71]. The use of inference rules is common in describing proof procedures. Definition 2.32 Let S be a set.
Reference: [42] <author> Kurt Godel. </author> <title> Uber formal unentscheidbare Satze der Principia mathematica und ver-wandter Systeme I. </title> <journal> Monatshefte fur Mathematik und Physik, </journal> <volume> 38 </volume> <pages> 173-198, </pages> <year> 1931. </year> <booktitle> English translation in Godel[43, </booktitle> <pages> pages 145-195]. </pages>
Reference: [43] <author> Kurt Godel. </author> <title> Kurt Godel: Collected Works, volume I. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1986. </year> <note> Edited by Solomon Feferman. </note>
Reference: [44] <editor> David Gries. </editor> <booktitle> The Science of Programming. </booktitle> <address> Spring-Verlag, New York, </address> <year> 1981. </year>
Reference: [45] <author> Jacques Herbrand. </author> <title> Recherches sur la theorie de la demonstration. </title> <type> Thesis, </type> <institution> University of Paris, </institution> <year> 1930. </year> <note> English translation in Herbrand[46]. </note>
Reference-contexts: This, in general, is difficult to show since the domain of an arbitrary interpretation can be any arbitrary set. However, if each formula in the set of closed formulas is a clause, the proof procedure need only examine ground instances of the 21 clauses, as shown by Herbrand <ref> [45] </ref>. We refer to the set of ground terms as the Herbrand universe and interpretations based on the Herbrand universe as Herbrand interpretations.
Reference: [46] <author> Jacques Herbrand. Jacques Herbrand: </author> <title> Logical Writings. </title> <publisher> Harvard University Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1971. </year> <title> Edited by Warren D. </title> <type> Goldfarb. </type>
Reference-contexts: One should note that Herbrand's theorem deals with provability, a proof-theoretic concept, while the Skolem-Herbrand-Godel theorem deals with unsatisfiability, a semantic concept. For further discussion on the difference between Herbrand's theorem and the Skolem-Herbrand-Godel theorem, we refer the reader to Gallier [37] and Herbrand <ref> [46] </ref>. 22 Theorem 2.18 fl (Skolem-Herbrand-Godel Theorem for Equality) A set S of clauses is E-unsatisfiable iff there exists an E-unsatisfiable finite subset of ground instances of S.
Reference: [47] <author> David Hilbert and Wilhelm Ackermann. </author> <booktitle> Principles of Mathematical Logic. </booktitle> <publisher> Chelsea Publishing Company, </publisher> <address> New York, </address> <year> 1950. </year> <note> English translation of the second German edition of Grundzuge der Theoretischen Logik published in 1938. Translation is by Lewis H. </note> <author> Hammond, George G. Leckie, and F. Steinhardt. </author> <title> Edited and with notes by Robert E. </title> <type> Luce. </type>
Reference: [48] <author> Jieh Hsiang. </author> <title> Topics in Automated Theorem Proving and Program Generation. </title> <type> PhD Dissertation, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1983. </year> <note> Available from University Microfilms International, </note> <institution> Ann Arbor, Michigan. </institution>
Reference: [49] <author> Jieh Hsiang and Jalel Mzali. </author> <title> SbREVE User's Guide, </title> <month> July </month> <year> 1988. </year>
Reference: [50] <author> Jieh Hsiang and Michael Rusinowitch. </author> <title> On word problems in equational theories. </title> <editor> In Thomas Ottmann, editor, </editor> <booktitle> Proceedings of the 14th International Colloquium on Automata, Languages and Programming, volume 267 of Lecture Notes in Computer Science, </booktitle> <pages> pages 54-71, </pages> <address> Karlsruhe, Federal Republic of Germany, 13-17 July 1987. </address> <publisher> Springer-Verlag. </publisher>
Reference: [51] <author> G. Huet. </author> <title> A complete proof of correctness of the Knuth and Bendix completion algorithm. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 23(1) </volume> <pages> 11-21, </pages> <month> August </month> <year> 1981. </year> <month> 171 </month>
Reference-contexts: We say C is fair if C generates only fair or failing Knuth-Bendix completion sequences. Theorem 2.39 (Correctness of Knuth-Bendix Completion) All fair Knuth-Bendix completion procedures are correct. Proof : Proved in Huet <ref> [51] </ref>. Knuth-Bendix completion suffers from two major problems. Firstly, Knuth-Bendix completion requires that a termination ordering be specified. For a given set of equations, Knuth-Bendix completion may fail for some termination orderings while succeeding for others. Finding an appropriate termination ordering can be quite difficult in some cases.
Reference: [52] <author> IBM Corporation, </author> <title> North York, Ontario. C Set ++ for AIX/6000: Collection Class Library Reference, </title> <address> SC09-1602-00, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: CLIN uses a special representation for the literals within a clause which allows it to take advantage of Prolog's efficient unification without the occurs check 22 . CLIN-2 represents terms and literals as trees with arguments contained in an IBM C Set ++ ISequence <ref> [52, Chapter 24] </ref> 23 . Each argument in the ISequence is an IBM C Set ++ IMgPtr [52, Chapter 36] 24 to terms for efficient data sharing. Clauses, set of clauses, and sets of partial hyper-links are represented as IBM C Set ++ ISortedSets [52, Chapter 29] 25 . <p> CLIN-2 represents terms and literals as trees with arguments contained in an IBM C Set ++ ISequence [52, Chapter 24] 23 . Each argument in the ISequence is an IBM C Set ++ IMgPtr <ref> [52, Chapter 36] </ref> 24 to terms for efficient data sharing. Clauses, set of clauses, and sets of partial hyper-links are represented as IBM C Set ++ ISortedSets [52, Chapter 29] 25 . Both processed and unprocessed partial hyper-links are maintained in the same set. <p> Each argument in the ISequence is an IBM C Set ++ IMgPtr [52, Chapter 36] 24 to terms for efficient data sharing. Clauses, set of clauses, and sets of partial hyper-links are represented as IBM C Set ++ ISortedSets <ref> [52, Chapter 29] </ref> 25 . Both processed and unprocessed partial hyper-links are maintained in the same set.
Reference: [53] <author> Jean-Pierre Jouannaud and Mitsuhiro Okada. </author> <title> Satisfiability of systems of ordinal notations with the subterm property is decidable. </title> <editor> In J. Leech Albert, B. Monien, and Rodriguez M. Artalejo, editors, </editor> <booktitle> Proceedings of the 18th International Colloquium on Automata, Languages, and Programming, volume 510 of Lecture Notes in Computer Science, </booktitle> <pages> pages 455-468, </pages> <address> Madrid, Spain, 8-12 July 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference: [54] <author> Donald Kalish, Richard Montague, and Gary Mar. </author> <title> Logic: Techniques of Formal Reasoning, Second Edition. </title> <publisher> Harcourt Brace Jovanovich, Publishers, </publisher> <address> San Diego, </address> <year> 1980. </year>
Reference-contexts: These systems can be grouped into a number of broad classes. In fact, two classes, natural deduction systems and axiom systems (or Hilbert systems), are often used as a formal foundation for first-order logic. For example, Kalish, Montague, and Mar <ref> [54] </ref> use a natural deduction system to define first-order logic, while Mendelson [71] uses an axiom system to formally describe first-order logic. Another class of systems, Herbrand systems, are widely used as a basis for automated theorem provers (proof procedures which are run on computers).
Reference: [55] <author> S. Kamin and J.-J. Levy. </author> <title> Two generalizations of the recursive path orderings. Unpublished notes, </title> <institution> Department of Computer Science, University of Illinois, Urbana, Illinois, </institution> <year> 1980. </year>
Reference-contexts: Some examples are the Knuth-Bendix orderings [58], the polynomial order-ings of Lankford [60,61], and the recursive path orderings (see Dershowitz [25] or Plaisted [82]). As an example, we present the lexicographic path ordering of Kamin and Levy <ref> [55] </ref> as a quasi-ordering 8 . The lexicographic path ordering is defined in terms of a quasi-precedence ordering on function symbols and the lexicographic extension of a quasi-ordering. Definition 2.120 Let F be a set of function symbols. We say a quasi-ordering on F is a quasi-precedence ordering. <p> Theorem 2.32 All lexicographic path orderings are quasi-simplification orderings. Proof : Proved in Kamin and Levy <ref> [55] </ref>. Also stated without proof in Dershowitz [27]. Theorem 2.33 The strict part of all lexicographic path orderings have the full invariance property. Proof : By induction on the definition of the lexicographic path ordering.
Reference: [56] <author> Deepak Kapur and Hantao Zhang. </author> <title> Proving equivalence of different axiomizations of free groups. </title> <journal> J. Automated Reasoning, </journal> <volume> 4 </volume> <pages> 331-352, </pages> <year> 1988. </year>
Reference: [57] <author> Deepak Kapur and Hantao Zhang. RRL: </author> <title> Rewrite Rule Laboratory User's Manual, </title> <month> May </month> <year> 1989. </year>
Reference: [58] <author> Donald E. Knuth and Peter B. Bendix. </author> <title> Simple word problems in universal algebras. </title> <editor> In John Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebras, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergamon Press, Oxford, </publisher> <year> 1970. </year>
Reference-contexts: readers requiring further information, we suggest Boolos and Jeffrey [11], Ebbinghaus, Flum, and Thomas [32], and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting [35], Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix <ref> [58] </ref>, and Plaisted [82] for term rewriting, and Lee [62] and Lee and Plaisted [63] for hyper-linking. <p> If &gt; has the full invariance property, then &gt; is a termination ordering. Proof : Proved in Plaisted [82]. There are many different partial and quasi-orderings used to show termination of term rewriting systems. Some examples are the Knuth-Bendix orderings <ref> [58] </ref>, the polynomial order-ings of Lankford [60,61], and the recursive path orderings (see Dershowitz [25] or Plaisted [82]). As an example, we present the lexicographic path ordering of Kamin and Levy [55] as a quasi-ordering 8 . <p> Thus, given a set of equations, it would very useful to find an equivalent canonical term rewriting system, if one exists. Knuth and Bendix <ref> [58] </ref> developed a procedure, known as Knuth-Bendix completion, which, given a finite set of equations and a termination ordering, attempts to find an equivalent canonical term rewriting system ordered by the termination ordering. We present Knuth-Bendix completion as a set of inference rules, following somewhat the notation of Dershowitz [28]. <p> However, the deduce inference rule can be applied in infinitely many ways. This raises the question on how does one control application of the deduce inference rule. Knuth and Bendix <ref> [58] </ref> showed that application of the deduce inference rule can be restricted to critical pairs, which represent selected "overlaps" of the left hand sides of rewrite rules. <p> Also, predicate replacement rules simulating properties of the equational system could be used. We have implemented automatic detection for group theory as described below. Knuth and Bendix <ref> [58] </ref> give the following ten rule canonical term rewriting system for groups: e x ! x (x y) z ! x (y z) x e ! x x 1 1 x x 1 ! e (x y) 1 ! y 1 x 1 Major properties of groups which prove useful in
Reference: [59] <author> Robert Kowalski. </author> <title> A proof procedure using connection graphs. </title> <journal> J. ACM, </journal> <volume> 22(4) </volume> <pages> 572-595, </pages> <month> October </month> <year> 1975. </year>
Reference: [60] <author> D. Lankford. </author> <title> Canonical algebraic simplification of computational logic. </title> <type> Technical Report Technical Report Memo ATP-25, </type> <institution> Automatic Theorem Proving Project, University of Texas, Austin, Texas, </institution> <year> 1975. </year>
Reference: [61] <author> D. Lankford. </author> <title> On proving term rewriting systems are noetherian. </title> <type> Technical Report Technical Report Memo MTP-3, </type> <institution> Mathematics Department, Louisiana Tech University, Ruston, Louisiana, </institution> <year> 1979. </year>
Reference: [62] <author> Shie-Jue Lee. </author> <title> CLIN: An Automated Reasoning System Using Clause Linking. </title> <type> PhD Dissertation, </type> <institution> University of North Carolina at Chapel Hill, </institution> <year> 1990. </year> <note> Available from the Department of Computer Science as technical report TR90-029. </note>
Reference-contexts: Introduction Lee and Plaisted [63] have recently developed a new instance based theorem proving strategy called hyper-linking. Lee <ref> [62] </ref> showed that the hyper-linking strategy competes well with the much studied resolution theorem proving strategy. Part of Lee's work included the development of round-by-round hyper-linking, which he implemented in the automated theorem prover CLIN. However, Lee's implementation did not include special methods for proving theorems involving equality. <p> [11], Ebbinghaus, Flum, and Thomas [32], and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting [35], Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee <ref> [62] </ref> and Lee and Plaisted [63] for hyper-linking. To aid the reader, we have identified with an asterisk ( fl ) those theorems which are directly referenced in later chapters. 2.1 First-Order Syntax We begin by defining an alphabet for first-order logic. <p> Such proof procedures are known as hyper-link proof procedures. Lee and Plaisted [62,63] showed that if the hyper-link operation is applied appropriately the resulting hyper-link proof procedure is sound and logically complete. We now define the hyper-link operation. 12 For a precise definition of closer, see Lee <ref> [62] </ref>. 44 Definition 2.153 Let S be a set of clauses and C = f L 1 ; : : : ; L n g a clause in S. <p> Then there exists an S n in S 0 ; S 1 ; : : : ; such that S n is propositionally unsatisfiable. Proof : Proved in Lee <ref> [62] </ref>. Lee and Plaisted [62,63] used the hyper-link operation to develop the following hyper-link proof procedure: 1. Set S 0 to the Skolemization of S and F . 2. Set i to 0. 3. Determine if S i is propositionally unsatisfiable. <p> A recursive algorithm for generating the set of hyper-link instances of a clause set is presented in Figure 2.3. Lee <ref> [62] </ref> used the round-by-round hyper-link proof procedure as the basis for his automated theorem prover CLIN. Lee and Plaisted [62,63] developed a number of refinements to the round-by-round hyperlink proof procedure. <p> By embedded unit literal deletion, all of the linked literals are deleted, resulting in a unit instance. While UR resolution is not, in general, complete by itself, it is complete for sets of Horn clauses. Lee <ref> [62] </ref> showed that when combined with the backward, forward, or user supported hyper-link operation or with small proof checking (described in a following section), UR resolution can be used to prove some moderately difficult theorems. 2.9.5 Ground Unit Generation Lee and Plaisted [62,63] developed an inference rule, which they referred to <p> However, it is possible to generalize the unit subsumption inference rule, although Lee <ref> [62] </ref> did not implement this generalization in CLIN. <p> In particular, this means that when using the hyper-link operation with embedded unit literal deletion on sets of Horn clauses, one can delete instances of clauses. Lee <ref> [62] </ref> referred to the deletion of clauses as instance deletion. 2.9.7 Small Proof Checking For most theorems, the round-by-round hyper-link proof procedure suffers, as do most breadth-first proof procedures, from an extremely fast growing search space. <p> By embedded unit literal deletion, the instance of this hyper-link is the empty clause. Thus, any clause set having a small proof is unsatisfiable. Lee and Plaisted [62,63] extended the definition of a small proof by allowing electrons to 13 Our analysis differs from that of Lee <ref> [62] </ref> in that Lee made the simplifying assumption that a clause contributes new hyper-link instances to the clause set only in the hyper-link round immediately after it is added to the clauses set. <p> They also showed that, when unit literal deletion is applied, only unit clauses or non-unit clauses containing no ground literals need be considered as sources for electrons in small proofs. Lee <ref> [62] </ref> implemented small proof checking in CLIN by adding a check for small proofs after the propositional unsatisfiability test. When searching for complicated small proofs, he used iterative deepening on the small proof size. <p> If R is ordered by a replacement ordering, then R is terminating. Proof : Proved in Lee <ref> [62] </ref>. Lee [62] used the predicate replacement operation to prove many difficult theorems in set theory and temporal logic, thus illustrating its potential power. However, predicate replacement has one major limitation in that it requires substantial knowledge of the input clauses in order to identify the appropriate replacement rules. <p> If R is ordered by a replacement ordering, then R is terminating. Proof : Proved in Lee <ref> [62] </ref>. Lee [62] used the predicate replacement operation to prove many difficult theorems in set theory and temporal logic, thus illustrating its potential power. However, predicate replacement has one major limitation in that it requires substantial knowledge of the input clauses in order to identify the appropriate replacement rules. <p> One should also note the the sliding priority technique is fairly general in that different measures can be used for clause and work sizes. Lee <ref> [62] </ref> implemented sliding priority in CLIN. The initial work bound is set automatically, based on the input clause set. When a proof is not found for a particular work bound, the work bound is doubled and the round-by-round hyper-link proof procedure is run again. <p> In some cases, a clause with a large number of literals can clutter the hyper-link search space with many unnecessary hyper-link instances. Lee <ref> [62] </ref> presented clause splitting as a method for reducing the number of literals in a clause. Clause splitting works by splitting a clause with a large number literals into two clauses, each having fewer literals than the original. <p> CLIN-2 only checks if the initial clause set is trivially satisfiable. * In the case analysis of a literal L, L is first assumed to be true . If the clause set is shown to be propositionally unsatisfiable, L is then assumed to be false. Lee <ref> [62] </ref> implemented in CLIN a refinement which he called right cutoff , where if in the true case L is not used in showing that the clause set is propositionally unsatisfiable, the false case is not performed. The propositionally unsatisfiability test in CLIN-2 does not include right cutoff.
Reference: [63] <author> Shie-Jue Lee and David A. Plaisted. </author> <title> Eliminating duplication with the hyper-linking strategy. </title> <journal> J. Automated Reasoning, </journal> <volume> 9 </volume> <pages> 25-42, </pages> <year> 1992. </year>
Reference-contexts: Introduction Lee and Plaisted <ref> [63] </ref> have recently developed a new instance based theorem proving strategy called hyper-linking. Lee [62] showed that the hyper-linking strategy competes well with the much studied resolution theorem proving strategy. Part of Lee's work included the development of round-by-round hyper-linking, which he implemented in the automated theorem prover CLIN. <p> [32], and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting [35], Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee [62] and Lee and Plaisted <ref> [63] </ref> for hyper-linking. To aid the reader, we have identified with an asterisk ( fl ) those theorems which are directly referenced in later chapters. 2.1 First-Order Syntax We begin by defining an alphabet for first-order logic. <p> The hyper-link operation differs from the commonly used resolution inference rule, developed by Robinson [88], in that it does not combine instances of literals from different clauses to form new clauses. In fact, Lee and Plaisted <ref> [63] </ref> claim that it is this difference which distinguishes hyper-linking from other commonly used automated theorem proving methods.
Reference: [64] <author> J. W. Lloyd. </author> <title> Foundations of Logic Programming, Second, Extended Edition. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1987. </year>
Reference-contexts: Definition 2.70 Let C 1 and C 2 be clauses. We say C 1 subsumes C 2 if some subset of C 2 is an instance of C 1 . Unification is discussed further in Chang and Lee [17], Fitting [35], Lloyd <ref> [64] </ref>, and Loveland [66]. 2.7 The Skolem-Herbrand-Godel Theorem Refutation proof procedures work by showing that there exists no interpretation which satisfies a set of closed formulas. This, in general, is difficult to show since the domain of an arbitrary interpretation can be any arbitrary set.
Reference: [65] <author> Jacques Loeckx and Kurt Sieber. </author> <title> The Foundations of Program Verification, Second Edition. </title> <publisher> John Wiley & Sons and B. G. Teubner, </publisher> <address> Chichester, </address> <year> 1987. </year> <month> 172 </month>
Reference: [66] <author> Donald W. Loveland. </author> <title> Automated Theorem Proving: A Logical Basis, </title> <booktitle> volume 6 of Fundamental Studies in Computer Science. </booktitle> <publisher> North-Holland Publishing, </publisher> <address> Amsterdam, </address> <year> 1978. </year>
Reference-contexts: For those readers requiring further information, we suggest Boolos and Jeffrey [11], Ebbinghaus, Flum, and Thomas [32], and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting [35], Gallier [37], and Loveland <ref> [66] </ref> for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee [62] and Lee and Plaisted [63] for hyper-linking. <p> for converting any closed formula F into a finite set S of closed formulas in clause form such that S is satisfiable iff F is satisfiable. 2 Clause form is also referred to as Skolem standard form or Skolem conjunctive form in the literature. 15 Proof : Proved in Loveland <ref> [66] </ref>. Since Skolemization replaces the variables of existential quantifiers with Skolem functions (for example the closed formula 9x p (x) is converted into the clause f p (a) g), it does not necessarily preserve validity. However, Skolemization does preserve satisfiability. <p> However, Skolemization does preserve satisfiability. Thus, clause form is better suited for use in refutation proof procedures as they attempt to show the unsatisfiability of a set of closed formulas. Skolemization is discussed further in Chang and Lee [17] and Loveland <ref> [66] </ref>. Clocksin and Mellish [20] give a Prolog implementation of Skolemization. 2.5 Equality We consider equality as a binary predicate, normally denoted by the infix operator =. We represent the meaning of equality via selected closed formulas, referred to as the equality axioms 3 . <p> Theorem 2.12 Let E be a term, literal, or clause, , oe, and j substitutions, and " the identity substitution. Then, (a) " = " = . (c) = oe iff t = toe for all terms t. (d) (oe)j = (oej). Proof : Proved in Loveland <ref> [66] </ref>. Definition 2.64 Let E and F be terms, literals, or clauses. We say E and F are variants, denoted by E F , if there exist substitutions and oe such that E is F and F is Eoe. <p> Theorem 2.14 (Unification Theorem) Let S be a finite set of terms or literals. There exists an algorithm which returns a most general unifier of S if S is unifiable or reports that S is not unifiable otherwise. Proof : Proved in Fitting [35], Gallier [37], and Loveland <ref> [66] </ref>. A unifiable set of terms or literals has a unique most general unifier up to the naming of variables. Theorem 2.15 Let S be a unifiable set of terms or literals and and oe most general unifiers of S. Then E Eoe for all E in S. <p> Theorem 2.15 Let S be a unifiable set of terms or literals and and oe most general unifiers of S. Then E Eoe for all E in S. Proof : Proved in Fitting [35], Gallier [37], and Loveland <ref> [66] </ref>. Definition 2.68 Let L 1 and L 2 be literals. We say L 1 and L 2 link if either L 1 and L 2 or L 1 and L 2 unify. Definition 2.69 Let L 1 and L 2 be literals. <p> Definition 2.70 Let C 1 and C 2 be clauses. We say C 1 subsumes C 2 if some subset of C 2 is an instance of C 1 . Unification is discussed further in Chang and Lee [17], Fitting [35], Lloyd [64], and Loveland <ref> [66] </ref>. 2.7 The Skolem-Herbrand-Godel Theorem Refutation proof procedures work by showing that there exists no interpretation which satisfies a set of closed formulas. This, in general, is difficult to show since the domain of an arbitrary interpretation can be any arbitrary set. <p> Proof : Proved in Gallier [37]. Also, stated in Fitting [35] with proof left as an exercise. Theorem 2.17 fl (Skolem-Herbrand-Godel Theorem) A set S of clauses is unsatisfiable iff there exists an unsatisfiable finite subset of ground instances of S. Proof : Proved in Gallier [37] and Loveland <ref> [66] </ref>. The Skolem-Herbrand-Godel theorem extends to equality. 5 The Skolem-Herbrand-Godel theorem is sometimes incorrectly referred to as Herbrand's theorem in the literature. One should note that Herbrand's theorem deals with provability, a proof-theoretic concept, while the Skolem-Herbrand-Godel theorem deals with unsatisfiability, a semantic concept. <p> The reason is that paramodulation combines literals from two clauses leading to an exponential explosion in the number of clauses generated. This is not in line with the instance-based nature of hyper-linking, which does not combine literals from differing clauses. Further discussion on paramodulation can be found in Loveland <ref> [66] </ref> and Chang and Lee [17]. 2.8.2 Brand's E-Modification Brand [14] developed an alternative to paramodulation based on "pulling out" non-variable terms from function and predicate arguments.
Reference: [67] <author> E. L. Lusk and R. A. Overbeek. </author> <title> Reasoning about equality. </title> <journal> J. Automated Reasoning, </journal> <volume> 1 </volume> <pages> 209-228, </pages> <year> 1985. </year>
Reference-contexts: round required? yes round = round + 1 no new session required? yes session = session + 1 no output satisfiable 73 tautology deletion unit simplification ground unit generation automated group detection predicate replacement done start any clauses generated? no equation orienting clause rewriting 74 3.4 Results Lusk and Overbeek <ref> [67] </ref> present the following six benchmark equality theorems, which are ordered in terms of increasing difficulty: Problem 1: In a group, if x 2 = e for all x in the group, then the group is Abelian (for all x and y, xy = yx).
Reference: [68] <author> Ursula Martin and Tobias Nipkow. </author> <title> Ordered rewriting and confluence. </title> <editor> In M. E. Stickel, editor, </editor> <booktitle> Proceedings of the 10th International Conference on Automated Deduction, volume 449 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 366-380, </pages> <address> Kaiserslautern, West Germany, 24-27 July 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference: [69] <author> John D. McCharen, Ross A. Overbeek, and Lawrence A. Wos. </author> <title> Problems and experiments for and with automated theorem-proving programs. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-25(8):773-782, </volume> <month> August </month> <year> 1976. </year>
Reference: [70] <author> William W. McCune. </author> <title> OTTER 3.0 Reference Manual and Guide. </title> <institution> Argonne National Laboratory, Argonne, Illinois, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: However, Lee's implementation did not include special methods for proving theorems involving equality. For this reason, CLIN does not compete well on equality theorems with automated theorem provers having specialized equality support, such as McCune's OTTER <ref> [70] </ref>. For hyper-linking to become a viable general-purpose theorem proving strategy, it must be shown that the hyper-linking strategy can efficiently prove equality theorems. <p> Problem 6: In a ring, if x 3 = x for all x in the ring, then xy = yx for all x and y in the ring. We have run both our extended CLIN and OTTER 3.0.2, a resolution based theorem prover developed and implemented by McCune <ref> [70] </ref>, on all six theorems. Some results are given in Table 3.1 where the times are CPU seconds on a DECsystem 5500 with 32MB of memory. OTTER 3.0.2 was run with the "knuth bendix" flag set.
Reference: [71] <author> Elliott Mendelson. </author> <title> Introduction to Mathematical Logic, Third Edition. </title> <publisher> Wadsworth and Brooks, </publisher> <address> Monterey, California, </address> <year> 1987. </year>
Reference-contexts: While this chapter serves as a reference to aid in the reading of the following chapters, it is not intended as a tutorial. For those readers requiring further information, we suggest Boolos and Jeffrey [11], Ebbinghaus, Flum, and Thomas [32], and Mendelson <ref> [71] </ref> for mathematical logic, Chang and Lee [17], Fitting [35], Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted [82] for term rewriting, and Lee [62] and Lee and Plaisted [63] for hyper-linking. <p> One should take special notice that an alphabet can contain at most a countably infinite number of constants and variables. The definition of an alphabet given above is, by no means, the definitive definition. There are various other definitions. For example, Mendelson <ref> [71] </ref> defines an alphabet with and ! as the only connectives and 8 as the only quantifier. He defines the connectives ^, _, and j and the quantifier 9 informally in terms of , !, and 8. We now define a first-order language defined by an alphabet. <p> In fact, two classes, natural deduction systems and axiom systems (or Hilbert systems), are often used as a formal foundation for first-order logic. For example, Kalish, Montague, and Mar [54] use a natural deduction system to define first-order logic, while Mendelson <ref> [71] </ref> uses an axiom system to formally describe first-order logic. Another class of systems, Herbrand systems, are widely used as a basis for automated theorem provers (proof procedures which are run on computers). <p> Proof : Directly from the definitions of soundness and consistency. Theorem 2.5 (Godel's Completeness Theorem) There exists a sound and logically complete proof procedure. Proof : First proved by Godel [41]. Also proved in Ebbinghaus, Flum, and Thomas [32], Gallier [37], and Mendelson <ref> [71] </ref>. The use of inference rules is common in describing proof procedures. Definition 2.32 Let S be a set. An n-place inference rule R on S is a mapping f : X ! S where X S n .
Reference: [72] <author> Ernest Nagel and James R. Newman. </author> <title> Godel's Proof. </title> <publisher> New York University Press, </publisher> <year> 1958. </year>
Reference: [73] <author> Paliath Narendran and Friedrich Otto. </author> <title> Some results on equational unification. </title> <editor> In M. E. Stickel, editor, </editor> <booktitle> Proceedings of the 10th International Conference on Automated Deduction, volume 449 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 276-291, </pages> <address> Kaiser-slautern, West Germany, 24-27 July 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference: [74] <author> Robert Nieuwenhuis and Albert Rubio. </author> <title> Theorem proving with ordering constrained clauses. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Automated Deduction, volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 477-491, </pages> <address> Saratoga Springs, New York, 15-18 June 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference: [75] <author> E. Paul. </author> <title> On solving the equality problem in theories defined by Horn clauses. </title> <journal> Theoretical Comput. Sci., </journal> <volume> 44 </volume> <pages> 127-153, </pages> <year> 1986. </year>
Reference: [76] <author> Gerald E. Peterson. </author> <title> Complete sets of reductions with constraints. </title> <editor> In M. E. Stickel, editor, </editor> <booktitle> Proceedings of the 10th International Conference on Automated Deduction, volume 449 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 381-395, </pages> <address> Kaiserslautern, West Germany, 24-27 July 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference: [77] <author> Gerald E. Peterson and Mark E. Stickel. </author> <title> Complete sets of reductions for some equational theories. </title> <journal> J. ACM, </journal> <volume> 28(2) </volume> <pages> 233-264, </pages> <month> April </month> <year> 1981. </year>
Reference: [78] <author> David A. Plaisted. </author> <title> An efficient relevance criterion for mechanical theorem proving. </title> <booktitle> In Proceedings of the 1st Annual National Conference on Artificial Intelligence, </booktitle> <pages> pages 79-83, </pages> <institution> Stanford University, </institution> <month> 18-21 August </month> <year> 1980. </year>
Reference: [79] <author> David A. Plaisted. </author> <title> Semantic confluence tests and completion methods. </title> <journal> Information and Control, </journal> <volume> 65 </volume> <pages> 122-157, </pages> <year> 1985. </year> <month> 173 </month>
Reference: [80] <author> David A. Plaisted. </author> <title> Non-Horn clause logic programming without contrapositives. </title> <journal> J. Au--tomated Reasoning, </journal> <volume> 4 </volume> <pages> 287-325, </pages> <year> 1988. </year>
Reference: [81] <author> David A. Plaisted. </author> <title> Mechanical theorem proving. </title> <editor> In Ranan B. Banerji, editor, </editor> <booktitle> Formal Techniques in Artificial Intelligence: A Sourcebook, volume 6 of Studies in Computer Science and Artificial Intelligence, </booktitle> <pages> pages 269-320. </pages> <publisher> Elsevier Science Publishers, </publisher> <address> Ams-terdam, </address> <year> 1990. </year>
Reference: [82] <author> David A. Plaisted. </author> <title> Equational reasoning and term rewriting systems. </title> <editor> In Dov M. Gabbay, C. J. Hogger, and J. A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming. </booktitle> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: information, we suggest Boolos and Jeffrey [11], Ebbinghaus, Flum, and Thomas [32], and Mendelson [71] for mathematical logic, Chang and Lee [17], Fitting [35], Gallier [37], and Loveland [66] for automated theorem proving, Bachmair, Dershowitz, and Plaisted [5], Dershowitz [25,26,27,28], Dershowitz and Jouannaud [29], Knuth and Bendix [58], and Plaisted <ref> [82] </ref> for term rewriting, and Lee [62] and Lee and Plaisted [63] for hyper-linking. To aid the reader, we have identified with an asterisk ( fl ) those theorems which are directly referenced in later chapters. 2.1 First-Order Syntax We begin by defining an alphabet for first-order logic. <p> We say ! has the Church-Rosser property if for all terms s and t, s $ fl t iff s # ! t. 29 Theorem 2.26 Let R be a binary relation on terms. Then R has the Church-Rosser property iff R is confluent. Proof : Proved in Plaisted <ref> [82] </ref>. Definition 2.98 Let R be a binary relation on terms. We say R is terminating if there is no infinite sequence s 1 R s 2 R ; otherwise, we say R is non-terminating. Theorem 2.27 (Newman's Lemma) Let R be a binary relation on terms. <p> Theorem 2.27 (Newman's Lemma) Let R be a binary relation on terms. Then R is confluent iff R is locally confluent and terminating. Proof : Proved in Plaisted <ref> [82] </ref>. Definition 2.99 Let R be a term rewriting system. We say R is canonical if R is reduced, terminating, and confluent. We say R is ground canonical if R is reduced, terminating, and ground confluent. Dershowitz and Jouannaud [29] and Plaisted [82] present nice surveys on term rewriting. 2.8.4 Termination <p> Proof : Proved in Plaisted <ref> [82] </ref>. Definition 2.99 Let R be a term rewriting system. We say R is canonical if R is reduced, terminating, and confluent. We say R is ground canonical if R is reduced, terminating, and ground confluent. Dershowitz and Jouannaud [29] and Plaisted [82] present nice surveys on term rewriting. 2.8.4 Termination of Term Rewriting Systems When using term rewriting within a proof procedure, it is useful to know that the term rewriting system is terminating, as this ensures that the proof procedure never loops rewriting a single term. <p> Definition 2.109 Let &gt; be a partial ordering. We say &gt; is a reduction ordering if &gt; is well-founded, has the full invariance property, and has the replacement property. Theorem 2.28 All reduction orderings are termination orderings. Proof : Proved in Plaisted <ref> [82] </ref>. Another class of orderings useful in showing termination of term rewriting systems are the simplification orderings. Definition 2.110 Let &gt; be a partial ordering on terms. <p> Definition 2.110 Let &gt; be a partial ordering on terms. We say &gt; has the subterm property 7 if for all terms s and proper subterms t of s, s &gt; t. 6 Our definition of termination ordering differs from that of Plaisted <ref> [82] </ref>. We use reduction ordering to refer to Plaisted's termination ordering. 7 In the literature the subterm property, simplification ordering, and quasi-simplification ordering are sometimes defined on terms containing function symbols with varying arity, as well as on terms containing function symbols with fixed arity. <p> We say &gt; is a simplification ordering if &gt; has the replacement and subterm properties. Theorem 2.29 All simplification orderings are well-founded. Proof : Proved in Plaisted <ref> [82] </ref>. It is sometimes easier to show termination of a term rewriting system using quasi-orderings rather than partial orderings. Definition 2.112 Let be a binary relation on a set S. We say is a quasi-ordering if is reflexive and transitive. We use s 6 t to denote not s t. <p> Then all quasi-simplification orderings on T have well-founded strict parts. Proof : Proved in Dershowitz [25]. Theorem 2.31 Let be a quasi-simplification ordering with strict part &gt;. If &gt; has the full invariance property, then &gt; is a termination ordering. Proof : Proved in Plaisted <ref> [82] </ref>. There are many different partial and quasi-orderings used to show termination of term rewriting systems. Some examples are the Knuth-Bendix orderings [58], the polynomial order-ings of Lankford [60,61], and the recursive path orderings (see Dershowitz [25] or Plaisted [82]). <p> Proof : Proved in Plaisted <ref> [82] </ref>. There are many different partial and quasi-orderings used to show termination of term rewriting systems. Some examples are the Knuth-Bendix orderings [58], the polynomial order-ings of Lankford [60,61], and the recursive path orderings (see Dershowitz [25] or Plaisted [82]). As an example, we present the lexicographic path ordering of Kamin and Levy [55] as a quasi-ordering 8 . The lexicographic path ordering is defined in terms of a quasi-precedence ordering on function symbols and the lexicographic extension of a quasi-ordering. <p> For such a definition, we refer the reader to Plaisted <ref> [82] </ref>. 33 Definition 2.122 Let be a quasi-precedence ordering with strict part &gt; and equivalence part =. The quasi-ordering lpo with strict part &gt; lpo and equivalence part = lpo defined by the following inference rules is the lexicographic path ordering based on . <p> Theorem 2.33 The strict part of all lexicographic path orderings have the full invariance property. Proof : By induction on the definition of the lexicographic path ordering. Further discussion on the termination of term rewriting systems can be found in Dershowitz [27], Dershowitz and Jouannaud [29], and Plaisted <ref> [82] </ref>. 34 2.8.5 Ordered Rewriting There are some equations, such as commutativity (x fl y = y fl x), which cannot be ordered under any termination ordering. This limits the effectiveness of term rewriting. <p> Theorem 2.38 (Critical Pair Theorem) Let R be a terminating term rewriting system. Then R is confluent iff for all critical pairs (s; t) in CP (R), some arbitrarily chosen R-normal forms of s and t are identical. Proof : Proved in Plaisted <ref> [82] </ref>. Definition 2.145 Let (E 0 ; R 0 ); (E 1 ; R 1 ); : : : be a Knuth-Bendix completion sequence.
Reference: [83] <author> David A. Plaisted. </author> <title> The use of semantics in instance-based proof procedures. Unpublished notes, </title> <institution> Department of Computer Science, University of North Carolina at Chapel Hill, Chapel Hill, North Carolina, </institution> <year> 1994. </year>
Reference: [84] <author> David A. Plaisted, Geoffrey D. Alexander, Heng Chu, and Shie-Jue Lee. </author> <title> Conditional term rewriting and first-order theorem proving. </title> <booktitle> In Proceedings of the Third International Workshop on Conditional Term-Rewriting Systems, Pont-a-Mousson, </booktitle> <month> 8-10 July </month> <year> 1992. </year> <type> Invited talk. </type>
Reference: [85] <author> David A. Plaisted and Steve Greenbaum. </author> <title> A structure-preserving clause form translation. </title> <journal> J. Symbolic Computation, </journal> <volume> 2 </volume> <pages> 293-304, </pages> <year> 1986. </year>
Reference-contexts: One intuitive approach for reducing the search space is to expand predicate definitions within clauses. However, early work by Plaisted and Greenbaum <ref> [85] </ref> and Plaisted and Potter [87] showed that simple replacement of a clause C by a clause C 0 in which one or more predicate definitions are expanded could, in some cases, make a proof much harder to find.
Reference: [86] <author> David A. Plaisted and Shie-Jue Lee. </author> <title> Inference by clause linking. </title> <type> Technical Report TR90-022, </type> <institution> Department of Computer Science, University of North Carolina at Chapel Hill, </institution> <month> May </month> <year> 1990. </year>
Reference: [87] <author> David A. Plaisted and Richard Potter. </author> <title> Term rewriting: Some experimental results. </title> <journal> J. Symbolic Computation, </journal> <volume> 11 </volume> <pages> 149-180, </pages> <year> 1991. </year>
Reference-contexts: One intuitive approach for reducing the search space is to expand predicate definitions within clauses. However, early work by Plaisted and Greenbaum [85] and Plaisted and Potter <ref> [87] </ref> showed that simple replacement of a clause C by a clause C 0 in which one or more predicate definitions are expanded could, in some cases, make a proof much harder to find.
Reference: [88] <author> J. A. Robinson. </author> <title> A machine-oriented logic based on the resolution method. </title> <journal> J. ACM, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <month> January </month> <year> 1965. </year>
Reference-contexts: The hyper-link operation differs from the commonly used resolution inference rule, developed by Robinson <ref> [88] </ref>, in that it does not combine instances of literals from different clauses to form new clauses. In fact, Lee and Plaisted [63] claim that it is this difference which distinguishes hyper-linking from other commonly used automated theorem proving methods.
Reference: [89] <author> Jorg H. Siekmann. </author> <title> Universal unification. </title> <editor> In R. E. Shostak, editor, </editor> <booktitle> Proceedings of the 7th International Conference on Automated Deduction, volume 170 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-42, </pages> <address> Napa, California, 14-16 May 1984. </address> <publisher> Springer-Verlag. </publisher>
Reference: [90] <author> Jorg H. Siekmann. </author> <title> An introduction to unification theory. </title> <editor> In Ranan B. Banerji, editor, </editor> <booktitle> Formal Techniques in Artificial Intelligence: A Sourcebook, volume 6 of Studies in Computer Science and Artificial Intelligence, </booktitle> <pages> pages 369-424. </pages> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [91] <author> Mark E. Stickel. </author> <title> A unification algorithm for associative-commutative functions. </title> <journal> J. ACM, </journal> <volume> 28(2) </volume> <pages> 423-434, </pages> <month> April </month> <year> 1981. </year>
Reference-contexts: However if f is commutative, the substitution f x 7! b; y 7! a g makes f (x; a) and f (y; b) equal. Specialized unification algorithms have been developed for a 43 number of equational theories. In particular, much study has been done on associative--commutative unification. Stickel <ref> [91] </ref> presents one such associative-commutative unification algorithm. Siekmann [89,90] presents a good survey on special specialized unification. 2.9 Hyper-Linking The Skolem-Herbrand-Godel theorem provides an attractive way to solve the theorem proving problem via instance-based proof procedures. The main issue with instance-based proof procedures is which ground instances should be generated.
Reference: [92] <author> Abram Aronovich Stolyar. </author> <title> Introduction to Elementary Mathematical Logic. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1970. </year> <note> English translation of Elementarnoye vvedeniye v matematicheskuyu logiku published in 1965. Translation is by Scripta tech-nica, Inc. Edited by Elliott Mendelson. 174 </note>
Reference: [93] <author> Geoff Sutcliffe, Christian B. Suttner, and Theodor Yemenis. </author> <title> The TPTP problem library. </title> <editor> In Alan Bundy, editor, </editor> <booktitle> Proceedings of the 12th International Conference on Automated Deduction, volume 814 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 252-266, </pages> <address> Nancy, France, 26 June -1 July 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference: [94] <author> Christian B. Suttner and Geoff Sutcliffe. </author> <title> The TPTP problem library (TPTP v1.1.1). </title> <type> Technical Report AR-94-03, </type> <institution> Institut fur Informatik, Technische Universitat Munchen, Munich, Germany, </institution> <month> 7 July </month> <year> 1994. </year> <note> Also available as technical report 93/11, </note> <institution> Department of Computer Science, James Cook University, </institution> <address> Townsville, Australia. </address>
Reference: [95] <author> A. M. </author> <title> Turing. On computable numbers, with an application to the Entscheidungsprob-lem. </title> <journal> Proceedings of the London Mathematical Society, </journal> <volume> 2(42) </volume> <pages> 230-265, </pages> <month> 12 November </month> <year> 1936. </year>
Reference: [96] <author> Allen Van Gelder and Yumi K. Tsuji. </author> <title> Satisfiability testing with more reasoning and less guessing. </title> <editor> In D. S. Johnson and M. Trick, editors, </editor> <title> Cliques, Coloring, and Satisfiability: Second DIMACS Implementation Challenge, </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1995. </year>
Reference: [97] <author> L. Wos, R. Overbeek, E. Lusk, and J. Boyle. </author> <title> Automated Reasoning: Introduction and Applications. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1984. </year>
Reference-contexts: Proof : Directly from the definition of unit literal deletion. 2.9.4 UR Resolution Lee and Plaisted [62,63] noted that the unit resulting (UR) resolution strategy (see Wos, Overbeek, Lusk, and Boyle <ref> [97] </ref>) was consistent with the hyper-linking philosophy of not combining instances of literals to form new clauses. They also noted that the UR strategy could be simulated by restricting the hyper-link operation in a manner similar to that of the support strategies.
Reference: [98] <author> Lawrence Wos, George A. Robinson, and Daniel F. Carson. </author> <title> Efficiency and completeness of the set of support strategy in theorem proving. </title> <journal> J. ACM, </journal> <volume> 12(4) </volume> <pages> 536-541, </pages> <month> October </month> <year> 1965. </year>
References-found: 98

