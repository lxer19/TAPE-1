URL: http://www.cs.utexas.edu/users/yau/papers/hpcs97.ps
Refering-URL: http://www.cs.utexas.edu/users/yau/research.html
Root-URL: 
Email: fyau,lamg@cs.utexas.edu  
Title: End System Support for Networking with Quality of Service Guarantees  
Author: David K.Y. Yau and Simon S. Lam 
Address: Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: In part due to the emergence of continuous media applications having real-time constraints, networking with quality of service (QoS) guarantees has become an increasingly important goal. Towards this goal, we present an end system architecture with the following major components: (1) adaptive rate-controlled (ARC) scheduling for time shared resources in an end system, such as CPU and network interface, (2) a migrating socket framework for user level protocols that minimizes hidden scheduling in protocol processing, and (3) based on "exclusive" packet receiver information exported by migrating sockets, a constant overhead packet demultiplexing mechanism suitable for wide-area internetwork communication (active demultiplexing). We have an implementation of our architecture in Solaris 2.5. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chris Maeda and Brian N. Bershad. </author> <title> Protocol service decomposition for high-performance networking. </title> <booktitle> In Proc. 14th SOSP, </booktitle> <pages> pages 244-255, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: The process may then react to the signals in an application specific manner. Rate negotiation is highly desirable for CM applications having medium to long term changes in actual rate. 3 Migrating Sockets For protocol processing, our architecture adopts a user level implementation model (such as proposed in <ref> [1] </ref>) supported by the framework of migrating sockets [5]. Migrating sockets takes its name because the state and management right of a socket (accessing a network endpoint) in the framework can migrate between an application process and a network server process.
Reference: [2] <author> D.M. Ritchie. </author> <title> A stream input-output system. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 1897-1910, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: From a quality of service perspective, migrating sockets works well with ARC scheduling by minimizing "hidden" scheduling. Hidden scheduling occurs when protocol processing occurs in interrupt context or in a system thread of control not belonging to an application process. To illustrate, consider protocol implementation using streams <ref> [2] </ref>. In streams, network send and receive can take place in service routines run by "background" system threads, over which applications have no scheduling control.
Reference: [3] <author> David K.Y. Yau and Simon S. Lam. </author> <title> Adaptive rate-controlled scheduling for multimedia applications. </title> <booktitle> In Proc. ACM Multimedia, </booktitle> <address> Cambridge, MA, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: NCR-9506048, a grant from AT&T Foundation, and an IBM graduate fellowship awarded to David Yau for the 1996-97 academic year. 1 2 ARC Scheduling We propose a family of adaptive rate-controlled (ARC) CPU schedulers for intergrated scheduling of CM and various other applications <ref> [3] </ref>. ARC schedulers have the following properties: (1) reserved rate can be negotiated, (2) QoS guarantees are conditional upon process behavior, and (3) firewall protection between processes is provided. Figure 1 shows the ARC scheduling framework in a general purpose computing environment. <p> The rate can then be viewed as a guaranteed fraction of CPU time that the process will be allocated over time intervals determined by p. Subject to the admission control criterion that the total reserved rate in a system should not exceed one, the ARC scheduler in <ref> [3] </ref> provides the following progress guarantee: a "punctual" process with rate r and period p is guaranteed at least krp CPU time over time interval kp, for k = 1; 2; : : :. <p> The CPU requirements of the video application can be specified with r = x=33:3 and p = 33:3 fi 1000 in our reservation model. Besides CM applications, the rate-based model is natural even for applications that are not "real-time" and not inherently periodic <ref> [3] </ref>. 1 Or, more specifically, a thread of control within the process. 2 2.2 Rate-controlled on-line scheduler One goal in ARC scheduling is to provide progress guarantees such that the guarantee to a process is independent of the behavior of other processes in the system. <p> Hence, an algorithm with the firewall property should be used for on-line CPU scheduling in our system. The scheduler having this property in <ref> [3] </ref> schedules processes in increasing order of RC values of processes. The RC value of a process encodes the expected finishing time of previous computation performed by the process.
Reference: [4] <author> David K.Y. Yau and Simon S. Lam. </author> <title> An architecture towards efficient OS support for distributed multimedia. </title> <booktitle> In Proc. IS&T/SPIE Multimedia Computing and Networking, </booktitle> <pages> pages 424-435, </pages> <address> San Jose, CA, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: This allows us to run a large base of Unix multimedia applications (such as the mbone suite of teleconferencing tools) with minimal modifications in our system. For efficiency, migrating sockets runs as the protocol processing component in an OS architecture we have previously designed and prototyped <ref> [4] </ref>. The OS architecture is shown in Figure 3. User processes in our architecture send packets by appending send requests to a send control queue. Conversely, a network device driver informs user processes of packets received by appending receive notifications to a receive control queue.
Reference: [5] <author> David K.Y. Yau and Simon S. Lam. </author> <title> Migrating sockets for networking with quality of service guarantees. </title> <type> Technical report, </type> <institution> The University of Texas at Austin, Austin, TX, </institution> <month> January </month> <year> 1997. </year> <note> A version has been submitted for publication. 5 </note>
Reference-contexts: Rate negotiation is highly desirable for CM applications having medium to long term changes in actual rate. 3 Migrating Sockets For protocol processing, our architecture adopts a user level implementation model (such as proposed in [1]) supported by the framework of migrating sockets <ref> [5] </ref>. Migrating sockets takes its name because the state and management right of a socket (accessing a network endpoint) in the framework can migrate between an application process and a network server process. <p> While highly flexible, the cost of using packet filters can increase with the number of network endpoints in a system. Since predictable performance is an important goal in our architecture, we additionally support a constant overhead packet demultiplexing mechanism known as active demultiplexing <ref> [5] </ref>. The basic idea is that, under certain conditions, an OS handle identifying a receive process can be included in packets destined for that process. A receive end system can then make use of the OS handle to deliver packets directly to the receive process, without any searching. <p> Nonces have the property that each newly generated one should have a fresh value. They can, for example, guard against obsolete OS handles advertized for exclusive packet receivers that are no longer cached. Experimental results show that active demultiplexing has very low overhead and is highly effective <ref> [5] </ref>. 5 Conclusion We presented an end system architecture for networking with QoS guarantees. In addition, the architecture has other advantages, namely efficiency, flexibility and backward compatibilty with existing systems. We plan to use the architecture in developing communication protocols for evolving network infrastructure and application requirements.
References-found: 5

