URL: http://ic-www.arc.nasa.gov/ic/projects/mba/papers/ijcai97.ps
Refering-URL: http://ic-www.arc.nasa.gov/ic/projects/mba/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: williams@ptolemy.arc.nasa.gov  E-mail: nayak@ptolemy.arc.nasa.gov  
Title: A Reactive Planner for a Model-based Executive an idealized schematic of the main engine subsystem
Author: Brian C. Williams P. Pandurang Nayak 
Keyword: situations. Significant parts of this hybrid executive  Example: autonomous spacecraft  
Date: 1997).  
Address: MS 269-2  Moffett Field, CA 94035 USA  MS 269-2 Moffett Field, CA 94035 USA  
Affiliation: Computational Sciences Division  NASA Ames Research Center,  Recom Technologies NASA Ames Research Center,  
Note: Appears in Proceedings of IJCAI-97  will be demonstrated in late 1998 on NASA's Deep Space One autonomous spacecraft (Pell et al.  First consider the underlying task. Figure 1 shows  In  
Abstract: A new generation of reactive, model-based executives are emerging that make extensive use of component-based declarative models to analyze anomalous situations and generate novel sequences for the internal control of complex autonomous systems. Burton, a generative, model-based planner offers a core element that bridges the gap between current and target states within the reactive loop. Burton is a sound, complete, reactive planner that generates a single control action of a valid plan in average case constant time, and compensates for anomalies at every step. Burton will not generate irreversible, potentially damaging sequences, except to effect repairs. We present model compilation, causal analysis, and online policy construction methods that are key to Burton's performance. Conventional wisdom has largely pushed deductive reasoning out of the reactive control loop for nearly a decade. However, recent search for the surprisingly elusive, hard satisfiability problem foretells a healthy return to deductive methods(Williams & Nayak 1996b; Kautz & Selman 1996) based on RISC-like search engines. This paper pushes this perspective down to reactive time scales, reporting on a model-based planner, called Burton, that is at the core of a model-based executive's reactive control loop. By solving the NP hard component of deductive problems at compile time, Burton exploits the expressiveness of NP hard methods, without assuming the risk of falling off the elusive cliff. Burton's parent model-based executive is particularly well suited to controlling the complex internal behaviors of large scale autonomous systems, we call immobile robots (Williams & Nayak 1996a). What distinguishes this executive is its ability to sense and control hidden state variables indirectly, and the use of component models to identify these novel interaction paths. A marriage between this model-based executive and a classical, method-based executive provides a hybrid with an expressive scripting language and an extensive capability to generate novel responses to anomalous The paper begins with an example from the spacecraft domain, and then introduces our concurrent transition system modeling formalism. Next we introduce model-based execution as identifying a current state (mode identification), generating an optimal target state (mode reconfiguration), and generating a control action to move towards the target (model-based reactive planning). The rest of the paper presents the Burton model-based reactive planner through a series of domain restrictions, model compilation, policy construction and online planning algorithms. Valves are controlled by valve drivers. Commands to the driver are sent via a control unit (VDECU). The driver and VDECU can be on or off, and recoverably or permanently failed. A recoverably failed component can be repaired by resetting it. A valve's state changes as a result of a command only if the corresponding driver and VDECU are on and healthy. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Firby, R. </author> <year> 1987. </year> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Procs. of AAAI-87, </booktitle> <pages> 202-206. </pages>
Reference: <author> Friedrich, G., and Nejdl, W. </author> <year> 1992. </year> <title> Choosing observations and actions in model-based diagnosis/repair systems. </title> <booktitle> In Procs. of KR-92, </booktitle> <pages> 489-498. </pages>
Reference: <author> Kautz, H., and Selman, B. </author> <year> 1996. </year> <title> Pushing the envelope: Planning, propositional logic, and stochastic search. </title> <booktitle> In Procs. of AAAI-96, </booktitle> <pages> 1194-1201. </pages>
Reference: <author> Korf, R. </author> <year> 1987. </year> <title> Planning as search: A quantitative approach. </title> <booktitle> Artificial Intelligence 33(1) </booktitle> <pages> 65-88. </pages>
Reference: <author> Muscettola, N. </author> <year> 1994. </year> <title> HSTS: Integrating planning and scheduling. </title> <editor> In Fox, M., and Zweben, M., eds., </editor> <title> Intelligent Scheduling. </title> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Pell, B.; Bernard, D.; Chien, S.; Gat, E.; Muscettola, N.; Nayak, P.; Wagner, M.; and Williams, B. </author> <year> 1997. </year> <title> An autonomous spacecraft agent prototype. </title> <booktitle> In Procs. of the First Int. Conf. on Autonomous Agents. </booktitle>
Reference: <author> Simmons, R. </author> <year> 1994. </year> <title> Structured control for autonomous robots. </title> <journal> IEEE Trans. on Robotics and Automation 10(1). </journal>
Reference: <author> Sun, Y., and Weld, D. </author> <year> 1993. </year> <title> A framework for model-based repair. </title> <booktitle> In Procs. of AAAI-93, </booktitle> <pages> 182-187. </pages>
Reference: <author> Weld, D. </author> <year> 1994. </year> <title> An introduction to least commitment planning. </title> <journal> AI Magazine 15(4) </journal> <pages> 27-61. </pages>
Reference-contexts: Burton avoids runtime search, requires no algorithms for threat detection, and expends no effort determining future actions or planning for subgoals that are not supported by the first action. Traditional planners need such mechanisms to avoid destructive actions and deadend plans <ref> (Weld 1994) </ref>. Burton accomplishes this speedup by exploiting the requirement, stated earlier, that all actions except repairs be reversible, and by exploiting certain topological properties of component connectivity that frequently occur in designed systems. <p> The main difference is that these systems include a STRIPS (rather than model-based) planning component with utility-theoretic measures for selecting amongst alternate plans. Their computational complexity make them inapplicable for on-board reactive execution. Burton differs from traditional STRIPS planners <ref> (Weld 1994) </ref> in that plan operators (transitions) are generated by a compilation process from an underlying causal model of the system that includes both within and across state constraints ( and the t , respectively).
Reference: <author> Williams, B., and Nayak, P. </author> <year> 1996a. </year> <title> Immobile robots: AI in the new millennium. </title> <journal> AI Magazine 17(3) </journal> <pages> 16-35. </pages>
Reference: <author> Williams, B., and Nayak, P. </author> <year> 1996b. </year> <title> A model-based approach to reactive self-configuring systems. </title> <booktitle> In Procs. of AAAI-96, </booktitle> <pages> 971-978. </pages>
Reference-contexts: For example, we use an abductive best-first search <ref> (Williams & Nayak 1996b) </ref> to generate implicants from a spacecraft model consisting of over 12; 000 clauses in about 40 seconds on a Sparc 20. We compute these implicants at compile-time, thus avoiding the risk of falling over the computational cliff at run-time, while preserving expressivity in the modeling language.
References-found: 11

