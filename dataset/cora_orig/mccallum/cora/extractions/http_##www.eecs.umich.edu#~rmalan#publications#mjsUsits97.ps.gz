URL: http://www.eecs.umich.edu/~rmalan/publications/mjsUsits97.ps.gz
Refering-URL: http://www.cs.washington.edu/education/courses/590s/w98/index.html
Root-URL: 
Email: frmalan,farnamg@eecs.umich.edu sushila@umich.edu  
Title: A Push-based Distribution Substrate for Internet Applications  
Author: G. Robert Malan, Farnam Jahanian Sushila Subramanian 
Address: 1301 Beal Ave. 550 East University Ave Ann Arbor, Michigan 48109-2122 Ann Arbor, Michigan 48109-1092  
Affiliation: Department of EECS School of Information University of Michigan University of Michigan  
Note: Salamander:  This work is supported by the National Science Foundation under the cooperative agreement IRI-92-16848 and a generous gift from the Intel Corporation.  
Abstract: This paper appears in the Proceedings of the USENIX Symposium on Internet Technologies and Systems 1997. Abstract The Salamander distribution system is a wide-area network data dissemination substrate that has been used daily for over a year by several group-ware and webcasting Internet applications. Specifically, Salamander is designed to support push-based applications and provides a variety of delivery semantics. These semantics range from basic data delivery, used by the Internet Performance Measurement and Analysis (IPMA) project, to collaborative group communication used by the Upper Atmospheric Research Collaboratory (UARC) project. The Salamander substrate is designed to accommodate the large variation in Internet connectivity and client resources through the use of application-specific plug-in modules. These modules provide a means for placing application code throughout the distribution network, thereby allowing the application to respond to network and processor resource constraints near their bottlenecks. The delivery substrate can be tailored by an application for use with a heterogeneous set of clients. For example the IPMA and UARC projects send and receive data from: Java applets and applications; Perl, C and C++ applications; and Unix and Windows 95/NT clients. This paper illustrates the architecture and design of the Salamander system driven by the needs of its set of current applications. The main architectural features described include: the data distribution mechanism, persistent data queries, negotiated push-technology, resource announcement and discovery, and support for Application-level Quality of Service policies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anand Balachandran, Andrew T. Campbell, and Michael E. Kounavis. </author> <title> Active filters: Delivering scaled media to mobile devices. </title> <booktitle> In Proceedings of the Seventh International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: In [6], Fox et.al. provide a general proxy architecture for dynamic distillation of data at the server. The use of hierarchically encoded data distributed over several multicast groups is discussed in [12] for the delivery of different qualities of audio and video data. Balachandran et.al target mobile computing in <ref> [1] </ref> and argue for adding active filters at base stations. Active network proponents [15] argue that Internet routers should be enabled to run arbitrary application-level code to assist in protocol processing.
Reference: [2] <author> David D. Clark and David L. Tennenhouse. </author> <title> Architectural considerations for a new generation of protocols. </title> <booktitle> In Proceedings of ACM SIG-COMM '90, </booktitle> <month> September </month> <year> 1990. </year>
Reference-contexts: The basic idea in anonymous push is that publishers package opaque data objects, or Application Data Units as termed in <ref> [2] </ref>, with text-based attribute lists. These attributes can then be used by Salamander to "lookup" destinations for the object. Subscribers place persistent queries to the Salamander substrate using lists of attribute expressions that can be used to match both current and future objects published to the Salamander space. <p> Groups can stay anonymous where the suppliers have no knowledge of the receivers, or they can become more explicit where the suppliers keep a tally of their receivers. A persistent disk-based cache of data objects, in conjunction with the use of application level framing <ref> [2] </ref>, can be used to provide high-level delivery semantics. This includes: FIFO, causal, ordered atomic, etc [7]. 4 Salamander Interfaces There are two interfaces to the Salamander substrate: the application programmer interface (API) and the administration interface. The API has several layers and implementations, depending on the developer's needs.
Reference: [3] <author> C. R. Clauer et al. </author> <title> A new project to sup port scientific collaboration electronically. </title> <journal> EOS Transactions on American Geophysical Union, </journal> <volume> 75, </volume> <month> June </month> <year> 1994. </year>
Reference: [4] <author> Flaviu Cristian. </author> <title> Probabilistic clock synchro nization. </title> <journal> Distributed Computing, </journal> <volume> 3 </volume> <pages> 146-158, </pages> <year> 1989. </year>
Reference-contexts: Since the analysis of data in these experiments relies on this distributed timestamp information, a method for synchronizing the clocks on an experiment's hosts was applied. To compensate for the difference in the clocks, a probabilistic clock synchronization technique, similar to the protocols developed by Cristian <ref> [4] </ref> was used. scalability experiment. evaluate the scalability of a single Salamander server in terms of both number of concurrent receivers and size of the data payload. Three payload sizes were used: 0, 1 Kbyte, and 10 Kbytes.
Reference: [5] <author> H. Eriksson. Mbone: </author> <title> The multicast backbone. </title> <journal> Communications of the ACM, </journal> <volume> 37(8), </volume> <year> 1994. </year>
Reference-contexts: Extending netnews, the SIFT tool [18] has been used to redistribute netnews articles based on text-based user profiles. At a lower level the combination of native IP multicast support and specific Mbone <ref> [5] </ref> routers provides a mechanism for the push of IP datagrams throughout portions of the Internet. Multicast datagrams are pushed based on a single attribute, namely the IP multicast group address. Recently, many commercial push-based companies have started: BackWeb, IFusion, InCommon, Intermind, Marimba, NETdelivery, PointCast, and Wayfarer. <p> Applet development has progressed for over a year and a half on the UARC project, and Web browsers are the de facto subscriber platform. In the absence of multicast support in Java 1.0.2, and the lack of universal Mbone <ref> [5] </ref> connectivity, the decision was made to create our own distribution topology using Salamander servers in place of existing Mbone infrastructure.
Reference: [6] <author> Armando Fox, Steven D. Gribble, Eric A. Brewer, and Elan Amir. </author> <title> Adapting to network and client variability via on-demand dynamic distillation. </title> <booktitle> In Proceedings of the Seventh International Conference on Architectural Support for Programming Languates and Operating Systems, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Previous work has addressed the variability in client resources. Client resources are addressed in the Odyssey [13] system by sending different versions of the same object from the server depending on the client's resources. In <ref> [6] </ref>, Fox et.al. provide a general proxy architecture for dynamic distillation of data at the server. The use of hierarchically encoded data distributed over several multicast groups is discussed in [12] for the delivery of different qualities of audio and video data.
Reference: [7] <author> Vassos Hadzilacos and Sam Toueg. </author> <title> Distributed Systems, </title> <booktitle> chapter 5, </booktitle> <pages> pages 293-318. </pages> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1993. </year>
Reference-contexts: A persistent disk-based cache of data objects, in conjunction with the use of application level framing [2], can be used to provide high-level delivery semantics. This includes: FIFO, causal, ordered atomic, etc <ref> [7] </ref>. 4 Salamander Interfaces There are two interfaces to the Salamander substrate: the application programmer interface (API) and the administration interface. The API has several layers and implementations, depending on the developer's needs.
Reference: [8] <institution> Internet Performance Measurement and Analysis (IPMA) project homepage. </institution> <note> http://nic.merit.edu/ipma/. </note>
Reference-contexts: Figure 1 shows several different data feeds displayed during a real-time campaign. UARC campaign. The second project that uses Salamander is the Internet Performance Measurement and Analysis (IPMA) project <ref> [8] </ref>, a joint effort of the University of Michigan and Merit Network. The IPMA project collects a variety of network and interdomain performance and routing statistics at Internet Exchange Points (IXPs), internal ISP backbones, and campus LAN/WAN borders. <p> These tasks include: acting as the data collection mechanism for the NetNow probes at the Internet Exchange Points, and as the webcasting delivery mechanism from a central server tree to a collection of Java applets available from its website <ref> [8] </ref>. The UARC project has gone through several week-long campaigns using Salamander as the data distribution substrate that connects the remote instrument sites to the scientists' Java applets. During these campaigns over sixty scientists have had multiple connections receiving many different types of data.
Reference: [9] <author> B. Kantor and P. Lapsley. </author> <title> Network news trans fer protocol (nntp). </title> <type> RFC 977, </type> <month> February </month> <year> 1986. </year>
Reference-contexts: Although the terminology is relatively new, Push technologies have been around for many years. The seminal push technology is electronic mail . Email has been pushed from publisher to subscribers for decades through mailing lists. Moreover, USENET news <ref> [9] </ref> has been used to push data objects (arti-cles) based on text attributes (group names). Extending netnews, the SIFT tool [18] has been used to redistribute netnews articles based on text-based user profiles.
Reference: [10] <author> G. Robert Malan and Farnam Jahanian. </author> <title> An application-level quality of service architecture for internet collaboratories. </title> <booktitle> In Proceedings of the IEEE RTSS Workshop on Resource Allocation Problems in Multimedia Systems, </booktitle> <month> Decem-ber </month> <year> 1996. </year>
Reference-contexts: In this way, clients can maintain membership information within their groups. 3.2 Application-Level Quality of Ser vice The Salamander architecture provides application-level Quality of Service policies to deliver data to clients as best fits their connectivity and processing resources <ref> [10] </ref>. These policies can rely on either best effort service or utilize network-level QoS guarantees [19] if available.
Reference: [11] <author> G. Robert Malan, Farnam Jahanian, and Pe ter Knoop. </author> <title> Comparison of two middleware data dissemination services in a wide-area distributed system. </title> <booktitle> In Proceedings of the 17th IEEE International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: The Salamander data distribution substrate provides the systems support needed for two of these applications: groupware and webcasting. Participants in these wide-area distributed applications vary in their hardware resources, software support and quality of connectivity <ref> [11] </ref>. In an environment such as the Internet they are connected by network links with highly variable bandwidth, latency, and loss characteristics. In fact, the explosive growth of the Internet and the proliferation of intelligent devices is widening an already large gap between these members.
Reference: [12] <author> S. McCanne, V. Jacobson, and M. Vetterli. </author> <title> Receiver-driven layered multicast. </title> <booktitle> In Proceedings of ACM SIGCOMM '96, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: In [6], Fox et.al. provide a general proxy architecture for dynamic distillation of data at the server. The use of hierarchically encoded data distributed over several multicast groups is discussed in <ref> [12] </ref> for the delivery of different qualities of audio and video data. Balachandran et.al target mobile computing in [1] and argue for adding active filters at base stations. Active network proponents [15] argue that Internet routers should be enabled to run arbitrary application-level code to assist in protocol processing.
Reference: [13] <author> Brian D. Noble, Morgan Price, and M. Satya narayanan. </author> <title> A programming interface for application-aware adaptation in mobile computing. </title> <journal> Computing Systems, </journal> <volume> 8(4), </volume> <year> 1995. </year>
Reference-contexts: Our solution was to put plug-in modules in the distribution tree that could convert the data in-transit to a more manageable format. Previous work has addressed the variability in client resources. Client resources are addressed in the Odyssey <ref> [13] </ref> system by sending different versions of the same object from the server depending on the client's resources. In [6], Fox et.al. provide a general proxy architecture for dynamic distillation of data at the server.
Reference: [14] <author> Abdullah Uz Tansel, James Clifford, Shashi Gadia, Sushil Jajodia, Arie Segev, and Richard Snodgrass. </author> <title> Temporal Databases, Theory, Design, and Implementation. </title> <publisher> Ben-jamin/Cummings Publisher Company, </publisher> <year> 1993. </year>
Reference-contexts: This database supports Salamander's needs by: storing a virtual channel's data as a sequence of write-once updates that are primarily based on time; and satisfying requests for data based on temporal ranges within the update stream. A temporal database <ref> [14] </ref> generally views a single data record as an ordered sequence of temporally bounded updates. In the Salamander database these records correspond to virtual channels. An administrator can determine which sets of virtual channels will be archived by the system.
Reference: [15] <author> D. L. Tennenhouse and D. J. Wetherall. </author> <title> To wards an active network architecture. </title> <journal> Computer Computer Review, </journal> <volume> 26(2), </volume> <month> April </month> <year> 1996. </year>
Reference-contexts: The use of hierarchically encoded data distributed over several multicast groups is discussed in [12] for the delivery of different qualities of audio and video data. Balachandran et.al target mobile computing in [1] and argue for adding active filters at base stations. Active network proponents <ref> [15] </ref> argue that Internet routers should be enabled to run arbitrary application-level code to assist in protocol processing.
Reference: [16] <author> Treno Web Page. </author> <note> http://www.psc.edu/networking/treno info.html. </note>
Reference-contexts: During the execution of these tests the available bandwidth between the server and the laboratories was approximately 400 Kbytes per second. This bandwidth was measured both informally using FTP latency and rigorously with the treno tool <ref> [16] </ref>. This explains the steep rise in the 10 Kbyte payloads between 40 and 50 receivers, that corresponds to 400 Kbytes and 500 Kbytes per second respectively.
Reference: [17] <institution> Upper Atmospheric Research Collab oratory (UARC) project homepage. </institution> <note> http://www.si.umich.edu/UARC/. </note>
Reference: [18] <author> Tak W. Yan and Hector Garcia-Molina. </author> <title> SIFT a tool for wide-area information dissemination. </title> <booktitle> In Proceedings of USENIX 1995 Technical Conference, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: The seminal push technology is electronic mail . Email has been pushed from publisher to subscribers for decades through mailing lists. Moreover, USENET news [9] has been used to push data objects (arti-cles) based on text attributes (group names). Extending netnews, the SIFT tool <ref> [18] </ref> has been used to redistribute netnews articles based on text-based user profiles. At a lower level the combination of native IP multicast support and specific Mbone [5] routers provides a mechanism for the push of IP datagrams throughout portions of the Internet.
Reference: [19] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zappala. RSVP: </author> <title> A new resource reservation protocol. </title> <journal> IEEE Network, </journal> <month> September </month> <year> 1993. </year>
Reference-contexts: These policies can rely on either best effort service or utilize network-level QoS guarantees <ref> [19] </ref> if available. Application specific policies are used to allocate the available bandwidth between a client's subscribed flows, providing a client with an effective throughput based on semantic thresholds that only the application and user can specify.
References-found: 19

