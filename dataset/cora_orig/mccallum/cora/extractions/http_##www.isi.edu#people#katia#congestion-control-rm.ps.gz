URL: http://www.isi.edu/people/katia/congestion-control-rm.ps.gz
Refering-URL: http://www.isi.edu/people/katia/
Root-URL: http://www.isi.edu
Email: email: dante@usc.edu email: katia@isi.edu  
Title: A Multicast Congestion Control Mechanism for Reliable Multicast  
Author: Dante DeLucia Katia Obraczka 
Address: 3011 Malibu Canyon Road 4676 Admiralty Way Suite 1001 Malibu CA 90265 Marina Del Rey, CA 90292  
Affiliation: Hughes Research Laboratories USC Information Sciences Institute  
Abstract: This paper evaluates a congestion control mechanism for reliable multicast applications that uses a small dynamic set of group members, or representatives, to provide timely and accurate feedback on behalf of congested subtrees of a multicast distribution tree. Our algorithm does not need to compute round-trip time (RTT) from all receivers to the source, nor does it require knowledge of group membership or network topology. Through simulations, we evaluate our algorithm with and without TCP cross traffic. This study demonstrates that while our algorithm makes use of bandwidth when available, it responds to congestion in a timely fashion thereby limiting data drops. When competing for bandwidth with TCP traffic, our algorithm gracefully relinquishes bandwidth. While not as aggressive as TCP, it does grab a reasonable portion of the bandwidth yet keeps the overall multicast packet loss low. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.S. Ahn, P.B. Danzig, Z. Liu, and L. Yan. </author> <title> Evaluation of tcp vegas: Emulation and experiment. </title> <booktitle> 1995 ACM SIGCOMM Conference, </booktitle> <pages> pages 185-195, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: After the slow start phase, TCP opens the window linearly, and closes it multiplicatively. Both the Tahoe and Reno distribution of BSD UNIX [12] incorporate Jacobson's slow-start algorithm. Another variant of TCP called TCP Vegas [3] implements a sender-side congestion avoidance algorithm. In <ref> [1] </ref>, Ahn et al. confirm that Vegas' congestion avoidance scheme yields higher throughput and keeps less data in the network than Reno. By computing the difference between best and current RTT, a Vegas sender measures the amount of data queued in the network and adjusts its transmission window accordingly.
Reference: [2] <author> J.C. Bolot, T. Turletti, and I. Wakeman. </author> <title> Scalable feedback control for multicast video distribution in the internet. </title> <booktitle> Proc. of the Conference on Communications Architectures, Protocols, and Applications, ACM SIGCOMM 1994, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: The Deterministic Timeouts for Reliable Multicast (DTRM) [10] algorithm also uses RTT between receivers and the sender to compute the receivers' suppression timeouts such that only one receiver in a multicast subtree, the representative receiver, responds to losses. The feedback control mechanism proposed in <ref> [2] </ref> does not fall into either the structure-based or the timer-based categories. In this approach to feedback control, which is used by the IVS videoconferencing tool [20] and is layered atop of RTP [19], video sources use probabilistic polling to select a set of receivers that should provide feedback. <p> To date, most of our investigations have been in networks with 300 millisecond GRTTs. We would like to investigate long delay terrestrial networks as well as satellite networks. Multicast group size estimation can greatly enhance the effectiveness of the suppression algorithm. Techniques for doing this have been developed elsewhere <ref> [2, 17] </ref> and need to be investigated in this context. Currently, in very large groups, CI feedback from unrepresented subtrees can still cause transient implosion if losses occur high in the multicast tree. Estimating group size can significantly reduce the potential for feedback implosion.
Reference: [3] <author> L.S. Brakmo, S.W. O'Malley, and L.L. Peterson. </author> <title> TCP Vegas: New techniques for congestion detection and avoidance. </title> <booktitle> 1994 ACM SIGCOMM Conference, </booktitle> <pages> pages 24-35, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Congestion Metric When the source receives a representative feedback message, it examines the message to determine if congestion exists in the network. We use a delay-based congestion metric which was inspired by TCP Vegas' congestion avoidance mechanism <ref> [3] </ref>. The delay-based metric measures the amount of data queued in the network. <p> On the other hand, if it is set to a large number, congestion can lead to packet drops. We currently set ff and fi to 1 and 3 packets respectively based on the TCP Vegas experiments reported in <ref> [3] </ref>. Rate Adjustment We loosely borrow the concept of inertia from physics and perform rate adjustment based on an acceleration. The source adjusts the transmission rate at data packet transmission time based on the current value of the acceleration. <p> After the slow start phase, TCP opens the window linearly, and closes it multiplicatively. Both the Tahoe and Reno distribution of BSD UNIX [12] incorporate Jacobson's slow-start algorithm. Another variant of TCP called TCP Vegas <ref> [3] </ref> implements a sender-side congestion avoidance algorithm. In [1], Ahn et al. confirm that Vegas' congestion avoidance scheme yields higher throughput and keeps less data in the network than Reno.
Reference: [4] <author> K. Calvert and E. Zegura. </author> <title> Georgia tech internetwork topology models. </title> <address> http://www.cc.gatech.edu/fac/Ellen.Zegura/graphs.html. </address>
Reference-contexts: These are reasonably large networks given the resources available. We discuss the topologies used as well as the other simulation parameters below. 4.1.1 Topologies We used Georgia Institute of Technology's Internetwork Topology Models (GT-ITM) <ref> [24, 4] </ref> tool to generate random transit-stub topologies for our simulations. GT-ITM generates hierarchical, or transit-stub topologies as an approximation of an internetwork. The transit-stub topologies consist of a top-level transit network (nodes 0 to 3) and second-level stub topologies (nodes 4 to 99) as shown in Figure 2 [23].
Reference: [5] <author> P. B. Danzig. </author> <title> Optimally Selecting the Parameters of Adaptive Backoff Algorithms for Computer Networks and Multiprocessors. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: However, this solution does not take advantage of available bandwidth and does not adapt to changing network conditions. Reliable multicast protocols also face the feedback implosion problem <ref> [5] </ref>, which becomes critical as multicast group size increases. Several existing reliable multicast transport protocols use probabilistic suppression to limit the amount of feedback received at the source [9, 14, 18]. SRM, for example, performs probabilistic suppression based on the round-trip time (RTT) measured between receivers and the source. <p> Each layer is sent to a different multicast address. Receivers choose their receiving rate by joining/leaving the appropriate multicast groups. The more layers receivers subscribe, the faster they receive the data. 5.2 Feedback Control Multicast transport protocols suffer from the feedback implosion problem <ref> [5] </ref>, specially when losses occur higher up in the multicast tree in larger groups over lossy networks. In this section we focus on proposed solutions to the feedback implosion problem in the context of reliable multicast transport protocols.
Reference: [6] <author> Dante DeLucia and Katia Obraczka. </author> <title> Multicast feedback suppression using representatives. </title> <booktitle> Proc. of the IEEE Infocom'97, </booktitle> <address> Kobe, Japan, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: Based on the feedback from representatives, the source adjusts the current transmission rate. As new congestion appears in the tree, new representatives are selected and old ones dropped from the representative set. Previous work reported preliminary simulation results of the proposed algorithm's feedback control mechanism <ref> [6] </ref>. In this paper we evaluate the proposed congestion control algorithm as a whole using a packet-level network simulator. In the following section, we describe our model. Section 3 presents the algorithm in detail. Our evaluation methodology and results are described in Section 4. <p> CC and CI wait and suppression intervals as well as other simulation parameters are discussed in Section 4.1. The tradeoffs between various choices of wait and suppression intervals were studied in <ref> [6] </ref>. 3.1.4 GRTT Measurement The goal of keeping track of GRTT is to have a rough estimate of the current largest RTT in the group. Our solution is, at the source, keep a table of the largest RTTs noted on any packet received.
Reference: [7] <author> K. Fall and S. Floyd. </author> <title> Simulation-based comparisons of tahoe, reno, and sack tcp. </title> <journal> ACM Computer Communications Review, </journal> <month> July </month> <year> 1996. </year>
Reference-contexts: Details of the rate adjustment can be found in Section A.1 4 Evaluation We evaluated the performance of our congestion control algorithm using the NS [15] network simulator. NS has already been used in performance studies of TCP <ref> [7] </ref> and multicast protocols [16]. By using NS rather we are able to test interactions between our protocol and several TCP variants and gateway queuing strategies, such as drop-tail and RED [8], that have been implemented in NS.
Reference: [8] <author> S. Floyd and V. Jacobson. </author> <title> Random early detection gateways for congestion avoidance. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(4) </volume> <pages> 397-413, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: NS has already been used in performance studies of TCP [7] and multicast protocols [16]. By using NS rather we are able to test interactions between our protocol and several TCP variants and gateway queuing strategies, such as drop-tail and RED <ref> [8] </ref>, that have been implemented in NS. For the purposes of this study, we limited our investigations to TCP Tahoe, and drop tail gateways. 4.1 Experiments We conducted experiments on topologies of up to 100 nodes. These are reasonably large networks given the resources available.
Reference: [9] <author> S. Floyd, V. Jacobson, S. McCanne, C.G. Liu, and L. Zhang. </author> <title> A reliable multicast framework for light-weight sessions and application-level framing. </title> <booktitle> 1995 ACM Sigcomm Conference, </booktitle> <pages> pages 342-356, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Reliable multicast protocols also face the feedback implosion problem [5], which becomes critical as multicast group size increases. Several existing reliable multicast transport protocols use probabilistic suppression to limit the amount of feedback received at the source <ref> [9, 14, 18] </ref>. SRM, for example, performs probabilistic suppression based on the round-trip time (RTT) measured between receivers and the source. The proposed multicast congestion control mechanism does not rely on RTT computation between all receivers and the source. <p> Structure-based approaches, such as [11], rely on a designated site (either a dedicated server in the case of [11] or a pre-assigned group member) to process and filter feedback information. Timer-based solutions rely on probabilistic feedback suppression to avoid implosion at the source. Receivers in the SRM protocol <ref> [9] </ref>, which was designed to support the distributed whiteboard application, delay their retransmission requests for a random interval, uniformly distributed between the current time and the one-way trip time to the source.
Reference: [10] <author> M. Grossglauser. </author> <title> Optimal deterministic timeouts for reliable scalable multicast. </title> <booktitle> Proc. of the IEEE Info-com'96, </booktitle> <address> San Francisco, CA, </address> <pages> pages 1425-1432, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: In this section we focus on proposed solutions to the feedback implosion problem in the context of reliable multicast transport protocols. In <ref> [10] </ref>, solutions to the feedback implosion problem are classified as structure-based or timer-based. Structure-based approaches, such as [11], rely on a designated site (either a dedicated server in the case of [11] or a pre-assigned group member) to process and filter feedback information. <p> The goal is that group members closer to the source send their feedback sooner suppressing feedback from farther away members. A site uses periodic session messages to measure its distance (based on the resulting RTT) to the other group members. The Deterministic Timeouts for Reliable Multicast (DTRM) <ref> [10] </ref> algorithm also uses RTT between receivers and the sender to compute the receivers' suppression timeouts such that only one receiver in a multicast subtree, the representative receiver, responds to losses. The feedback control mechanism proposed in [2] does not fall into either the structure-based or the timer-based categories.
Reference: [11] <author> H.W. Holbrook, S.K. Singhal, and D.R. Cheriton. </author> <title> Log-based receiver-reliable multicast for distributed interactive simulation. </title> <booktitle> 1995 ACM Sigcomm Conference, </booktitle> <pages> pages 328-341, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: In this section we focus on proposed solutions to the feedback implosion problem in the context of reliable multicast transport protocols. In [10], solutions to the feedback implosion problem are classified as structure-based or timer-based. Structure-based approaches, such as <ref> [11] </ref>, rely on a designated site (either a dedicated server in the case of [11] or a pre-assigned group member) to process and filter feedback information. Timer-based solutions rely on probabilistic feedback suppression to avoid implosion at the source. <p> In [10], solutions to the feedback implosion problem are classified as structure-based or timer-based. Structure-based approaches, such as <ref> [11] </ref>, rely on a designated site (either a dedicated server in the case of [11] or a pre-assigned group member) to process and filter feedback information. Timer-based solutions rely on probabilistic feedback suppression to avoid implosion at the source.
Reference: [12] <author> V. Jacobson. </author> <title> Berkeley tcp evolution from 4.3-tahoe to 4.3-reno. </title> <institution> Proceedings of the British Columbia Internet Engineering Task Force, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: TCP uses data loss as sign of congestion and shuts the window down to 1 packet after a loss. After the slow start phase, TCP opens the window linearly, and closes it multiplicatively. Both the Tahoe and Reno distribution of BSD UNIX <ref> [12] </ref> incorporate Jacobson's slow-start algorithm. Another variant of TCP called TCP Vegas [3] implements a sender-side congestion avoidance algorithm. In [1], Ahn et al. confirm that Vegas' congestion avoidance scheme yields higher throughput and keeps less data in the network than Reno.
Reference: [13] <author> Van Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> ACM SIGCOMM 88, </booktitle> <pages> pages 273-288, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction The Internet relies on applications performing congestion control to react to network congestion and avoid congestion collapse. Most applications in use on the Internet employ TCP's congestion control algorithms <ref> [13] </ref>. The increasing popularity of group communication applications such as multi-party teleconferencing tools and information dissemination services motivated the development of several multicast transport protocols layered on top of IP multicast for efficient multipoint data distribution. <p> Currently, most applications in use on the Internet use TCP's congestion control mechanisms. TCP is the underlying transport protocol in HTTP, FTP, TELNET, and other application protocols requiring reliable delivery. In <ref> [13] </ref>, Jacobson describes his congestion control algorithm for TCP. During slow start, TCP opens the transmission window exponentially as the source receives acknowledgments from the receivers until a packet loss occurs. TCP uses data loss as sign of congestion and shuts the window down to 1 packet after a loss.
Reference: [14] <author> J. Macker and W. Dang. </author> <title> The multicast dissemination protocol (mdp) framework. </title> <type> Internet Draft, </type> <institution> Internet Engineering Task Force, draft-macker-mdp-framework-00.txt, </institution> <month> November </month> <year> 1996. </year> <month> 15 </month>
Reference-contexts: Reliable multicast protocols also face the feedback implosion problem [5], which becomes critical as multicast group size increases. Several existing reliable multicast transport protocols use probabilistic suppression to limit the amount of feedback received at the source <ref> [9, 14, 18] </ref>. SRM, for example, performs probabilistic suppression based on the round-trip time (RTT) measured between receivers and the source. The proposed multicast congestion control mechanism does not rely on RTT computation between all receivers and the source. <p> Self-adjusting schemes based on previous history may prove to be effective. We will integrate our congestion control algorithm into an existing reliable multicast protocol. Originally, the plan was to use an existing bulk-data transfer protocol such as the Multicast Dissemination Protocol (MDP) <ref> [14] </ref>. But since it has already been implemented in NS, we may use SRM as our target reliable multicast protocol.
Reference: [15] <author> S. McCanne. </author> <title> ns - LBNL network simulator. </title> <note> Available from http://www-nrg.ee.lbl.gov/ns/. </note>
Reference-contexts: This methods allows us to make adjustments on a packet by packet basis, without having to keep a complicated history of packets received. Details of the rate adjustment can be found in Section A.1 4 Evaluation We evaluated the performance of our congestion control algorithm using the NS <ref> [15] </ref> network simulator. NS has already been used in performance studies of TCP [7] and multicast protocols [16].
Reference: [16] <author> S. McCanne and V. Jacobson. </author> <title> Receiver-driven layered multicast. </title> <booktitle> 1996 ACM Sigcomm Conference, </booktitle> <pages> pages 117-130, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Details of the rate adjustment can be found in Section A.1 4 Evaluation We evaluated the performance of our congestion control algorithm using the NS [15] network simulator. NS has already been used in performance studies of TCP [7] and multicast protocols <ref> [16] </ref>. By using NS rather we are able to test interactions between our protocol and several TCP variants and gateway queuing strategies, such as drop-tail and RED [8], that have been implemented in NS. <p> Providing congestion control mechanisms is critical in enabling reliable multicast transport protocols to be deployed on the Internet. However, only a few existing multicast transport protocols implement congestion control. Layered Multicast <ref> [16] </ref> addresses the congestion problem in the context of video stream multicast transmission, an example application that can tolerate data loss. Streams are decomposed into several layers. Encoding is done such that the composition of layers leads to higher quality video.
Reference: [17] <author> R. Morris. </author> <title> Bulk multicast transport protocol. </title> <booktitle> Proc. of the IEEE Infocom'97, </booktitle> <address> Kobe, Japan, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: To date, most of our investigations have been in networks with 300 millisecond GRTTs. We would like to investigate long delay terrestrial networks as well as satellite networks. Multicast group size estimation can greatly enhance the effectiveness of the suppression algorithm. Techniques for doing this have been developed elsewhere <ref> [2, 17] </ref> and need to be investigated in this context. Currently, in very large groups, CI feedback from unrepresented subtrees can still cause transient implosion if losses occur high in the multicast tree. Estimating group size can significantly reduce the potential for feedback implosion.
Reference: [18] <author> B. Sabata, M.J. Brown, and B.A. Denny. </author> <title> Transport protocol for reliable multicast: </title> <booktitle> TRM. Proceedings of the IASTED International Conference on Networks, </booktitle> <pages> pages 143-145, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Reliable multicast protocols also face the feedback implosion problem [5], which becomes critical as multicast group size increases. Several existing reliable multicast transport protocols use probabilistic suppression to limit the amount of feedback received at the source <ref> [9, 14, 18] </ref>. SRM, for example, performs probabilistic suppression based on the round-trip time (RTT) measured between receivers and the source. The proposed multicast congestion control mechanism does not rely on RTT computation between all receivers and the source.
Reference: [19] <author> H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson. RTP: </author> <title> A transport protocol for real-time applications. Internet Request for Comments RFC 1889, </title> <month> January </month> <year> 1996. </year>
Reference-contexts: The feedback control mechanism proposed in [2] does not fall into either the structure-based or the timer-based categories. In this approach to feedback control, which is used by the IVS videoconferencing tool [20] and is layered atop of RTP <ref> [19] </ref>, video sources use probabilistic polling to select a set of receivers that should provide feedback. Our approach to feedback control does not require RTT computation between receivers and the source. It relies on representatives to suppress feedback from other receivers.
Reference: [20] <author> T. Turletti. </author> <title> H.261 software codec for video conferencing over the internet. </title> <note> INRIA Research Report 1834, </note> <month> January </month> <year> 1993. </year>
Reference-contexts: The feedback control mechanism proposed in [2] does not fall into either the structure-based or the timer-based categories. In this approach to feedback control, which is used by the IVS videoconferencing tool <ref> [20] </ref> and is layered atop of RTP [19], video sources use probabilistic polling to select a set of receivers that should provide feedback. Our approach to feedback control does not require RTT computation between receivers and the source. It relies on representatives to suppress feedback from other receivers.
Reference: [21] <author> L. Vicisano and J. Crowcroft. </author> <title> One to many reliable bulk-data transfer in the mbone. </title> <booktitle> Proceedings of the HIPPARCH'97, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: TCP Background Traf fic Receiver Density # Reps 0.25 0.5 0.75 3 0.0605/2993 0.0606/2691 0.0590/2612 5 0.0576/2649 0.0460/2171 0.0505/2159 7 0.0416/2585 0.0465/1888 0.0404/2048 (e) Two Multicast Sessions and Random TCP Background Traffic AverageDropRatio=T hroughput (bytes=sec) T CP Drops=F eedbackRatio 13 The congestion control mechanism for bulk-data transfer applications presented in <ref> [21] </ref> uses forward error correction (FEC) techniques to stripe the data into multiple, cumulative, redundant layers. Each layer is sent to a different multicast address. Receivers choose their receiving rate by joining/leaving the appropriate multicast groups.
Reference: [22] <author> M. Yajnik, J. Kurose, and D. Towsley. </author> <title> Packet loss correlation in the mbone multicast network. </title> <booktitle> IEEE Global Internet Conference, </booktitle> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: Another reason to use transit-stub topologies is that they allow us to model loss patterns that have been observed in real multicast environments. 6 For example, the study presented in <ref> [22] </ref> shows that most MBONE losses occur near the leaves of the network and not on the backbone. We approximate this behavior by restricting the bandwidth on the stub-to-stub and stub-to-transit network links. We refer to second-level nodes as stub nodes.
Reference: [23] <author> D. Zapalla. </author> <title> Transit stub topology diagram. </title> <address> http://netweb.usc.edu/daniel/research/sims/. </address>
Reference-contexts: GT-ITM generates hierarchical, or transit-stub topologies as an approximation of an internetwork. The transit-stub topologies consist of a top-level transit network (nodes 0 to 3) and second-level stub topologies (nodes 4 to 99) as shown in Figure 2 <ref> [23] </ref>. Another reason to use transit-stub topologies is that they allow us to model loss patterns that have been observed in real multicast environments. 6 For example, the study presented in [22] shows that most MBONE losses occur near the leaves of the network and not on the backbone.
Reference: [24] <author> E. Zegura, K. Calvert, and S. Bhallacharjee. </author> <title> How to model an internetwork. </title> <booktitle> Proc. of the IEEE Infocom'96, </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: These are reasonably large networks given the resources available. We discuss the topologies used as well as the other simulation parameters below. 4.1.1 Topologies We used Georgia Institute of Technology's Internetwork Topology Models (GT-ITM) <ref> [24, 4] </ref> tool to generate random transit-stub topologies for our simulations. GT-ITM generates hierarchical, or transit-stub topologies as an approximation of an internetwork. The transit-stub topologies consist of a top-level transit network (nodes 0 to 3) and second-level stub topologies (nodes 4 to 99) as shown in Figure 2 [23].
References-found: 24

