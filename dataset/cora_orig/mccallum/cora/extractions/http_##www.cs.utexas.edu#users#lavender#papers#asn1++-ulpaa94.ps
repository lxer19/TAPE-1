URL: http://www.cs.utexas.edu/users/lavender/papers/asn1++-ulpaa94.ps
Refering-URL: http://www.cs.utexas.edu/users/lavender/papers/index.html
Root-URL: http://www.cs.utexas.edu
Title: Programming with ASN.1 using Polymorphic Types and Type Specialization  
Author: R. G. Lavender, a D. G. Kafura b and R. W. Mullins by a ISODE Consortium 
Keyword: Keyword Codes: C.2.2; D.1.5; D.2.2 Keywords: Network Protocols; Object-Oriented Programming; Tools and Techniques  
Address: Square, Richmond TW9 1DT England  562 McBryde Hall, Virginia Tech, Blacksburg, Virginia 24061 USA  
Affiliation: The Dome, The  b Department of Computer Science  
Abstract: A set of object-oriented abstractions is described that permits direct programming with ASN.1 specified types. The design and implementation also supports the flexible use of different encoding rules. The implementation is in C++ and makes use of class templates for representing polymorphic types, class inheritance for type specialization, and typedefs for defining ASN.1 types as instances of class templates. Encoding/decoding performance data is provided as evidence that this work is suitable for serious application development. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> American National Standards Institute. </author> <title> Z39.50 Information Retrieval Service Definitions and Protocol Specification for Library Applications, </title> <month> July </month> <year> 1992. </year>
Reference-contexts: C++. 3 An ASN.1 module is represented here using the proposed ISO/ANSI C++ namespace construct, which is not yet implemented by most commercial C++ language processors. 2 PasswordLookup DEFINITIONS ::= BEGIN similar to an entry in &lt;pwd.h&gt; Passwd ::= [APPLICATION 1] IMPLICIT SEQUENCE f 5 name [0] IMPLICIT UserName, passwd <ref> [1] </ref> IMPLICIT IA5String OPTIONAL, uid [2] IMPLICIT UserID, gid [3] IMPLICIT GroupID, quota [4] IMPLICIT INTEGER DEFAULT 0, 10 comment [5] IMPLICIT IA5String OPTIONAL, gecos [6] IMPLICIT IA5String OPTIONAL, dir [7] IMPLICIT IA5String OPTIONAL, shell [8] IMPLICIT IA5String OPTIONAL g 15 UserName ::= [APPLICATION 2] IMPLICIT GraphicString UserID ::= [APPLICATION 3] <p> In particular, this work has great applicability in those applications that define presentation services directly over a transport service; for example, the Internet Simple Network Management Protocol (SNMP) [3], the ANSI Z39.50 information retrieval protocol <ref> [1] </ref> used in implementations of the Wide Area Information Service (WAIS) [4], and lightweight client protocols for accessing directories or message stores. ACKNOWLEDGEMENTS We appreciate the assistance of Rajesh Khera, who participated in an early implementation of the ASN.1 class hierarchy.
Reference: 2. <author> M. L. Branstetter, J. A. Guse, and D. M. Nessett. </author> <title> ELROS | an embedded language for remote operations service. </title> <booktitle> In 1992 IFIP International Working Conference on Upper Layer Protocols, Architectures and Applications (ULPAA'92), </booktitle> <pages> pages 33-47. </pages> <address> Elsevier/North-Holland, </address> <year> 1992. </year> <month> 15 </month>
Reference-contexts: is represented here using the proposed ISO/ANSI C++ namespace construct, which is not yet implemented by most commercial C++ language processors. 2 PasswordLookup DEFINITIONS ::= BEGIN similar to an entry in &lt;pwd.h&gt; Passwd ::= [APPLICATION 1] IMPLICIT SEQUENCE f 5 name [0] IMPLICIT UserName, passwd [1] IMPLICIT IA5String OPTIONAL, uid <ref> [2] </ref> IMPLICIT UserID, gid [3] IMPLICIT GroupID, quota [4] IMPLICIT INTEGER DEFAULT 0, 10 comment [5] IMPLICIT IA5String OPTIONAL, gecos [6] IMPLICIT IA5String OPTIONAL, dir [7] IMPLICIT IA5String OPTIONAL, shell [8] IMPLICIT IA5String OPTIONAL g 15 UserName ::= [APPLICATION 2] IMPLICIT GraphicString UserID ::= [APPLICATION 3] IMPLICIT INTEGER GroupID ::= [APPLICATION <p> This object-oriented protocol development framework is called OOSI (ooo-zi ). Similar research-oriented upper layer protocol development environments that we are familiar with include ELROS <ref> [2] </ref>, OTSO [11], DAS [14], and ISODE [15]. OOSI was influenced by ISODE, but is engineered for maximum flexibility and performance. OOSI is similar to OTSO in that both utilize object-oriented features, such as inheritance, to structure protocol layers.
Reference: 3. <author> J. Case, M. Fedor, M. Schoffstall, and C. Davin. </author> <title> Simple Network Management Proto--col (SNMP). Internet Protocol Specification RFC 1157, Network Information Center, </title> <booktitle> SRI International, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: the proposed ISO/ANSI C++ namespace construct, which is not yet implemented by most commercial C++ language processors. 2 PasswordLookup DEFINITIONS ::= BEGIN similar to an entry in &lt;pwd.h&gt; Passwd ::= [APPLICATION 1] IMPLICIT SEQUENCE f 5 name [0] IMPLICIT UserName, passwd [1] IMPLICIT IA5String OPTIONAL, uid [2] IMPLICIT UserID, gid <ref> [3] </ref> IMPLICIT GroupID, quota [4] IMPLICIT INTEGER DEFAULT 0, 10 comment [5] IMPLICIT IA5String OPTIONAL, gecos [6] IMPLICIT IA5String OPTIONAL, dir [7] IMPLICIT IA5String OPTIONAL, shell [8] IMPLICIT IA5String OPTIONAL g 15 UserName ::= [APPLICATION 2] IMPLICIT GraphicString UserID ::= [APPLICATION 3] IMPLICIT INTEGER GroupID ::= [APPLICATION 4] IMPLICIT INTEGER 20 <p> It is our hope that the work described here will prove useful in the development of real applications. In particular, this work has great applicability in those applications that define presentation services directly over a transport service; for example, the Internet Simple Network Management Protocol (SNMP) <ref> [3] </ref>, the ANSI Z39.50 information retrieval protocol [1] used in implementations of the Wide Area Information Service (WAIS) [4], and lightweight client protocols for accessing directories or message stores. ACKNOWLEDGEMENTS We appreciate the assistance of Rajesh Khera, who participated in an early implementation of the ASN.1 class hierarchy.
Reference: 4. <author> Franklin Davis, Brewster Kahle, Harry Morris, Jim Salem, and Tracy Shen. </author> <title> WAIS interface protocol prototype functional specification. </title> <type> Technical Report version 1.5, </type> <institution> Thinking Machines Corporation, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: namespace construct, which is not yet implemented by most commercial C++ language processors. 2 PasswordLookup DEFINITIONS ::= BEGIN similar to an entry in &lt;pwd.h&gt; Passwd ::= [APPLICATION 1] IMPLICIT SEQUENCE f 5 name [0] IMPLICIT UserName, passwd [1] IMPLICIT IA5String OPTIONAL, uid [2] IMPLICIT UserID, gid [3] IMPLICIT GroupID, quota <ref> [4] </ref> IMPLICIT INTEGER DEFAULT 0, 10 comment [5] IMPLICIT IA5String OPTIONAL, gecos [6] IMPLICIT IA5String OPTIONAL, dir [7] IMPLICIT IA5String OPTIONAL, shell [8] IMPLICIT IA5String OPTIONAL g 15 UserName ::= [APPLICATION 2] IMPLICIT GraphicString UserID ::= [APPLICATION 3] IMPLICIT INTEGER GroupID ::= [APPLICATION 4] IMPLICIT INTEGER 20 =* automatically generated * <p> In particular, this work has great applicability in those applications that define presentation services directly over a transport service; for example, the Internet Simple Network Management Protocol (SNMP) [3], the ANSI Z39.50 information retrieval protocol [1] used in implementations of the Wide Area Information Service (WAIS) <ref> [4] </ref>, and lightweight client protocols for accessing directories or message stores. ACKNOWLEDGEMENTS We appreciate the assistance of Rajesh Khera, who participated in an early implementation of the ASN.1 class hierarchy. Wendy Long implemented CATY using the ASN.1 grammar from the ISODE pepsy tool [15].
Reference: 5. <author> Christian Huitema and Ghislain Chave. </author> <title> Measuring the performance of an ASN.1 compiler. </title> <booktitle> In 1992 IFIP International Working Conference on Upper Layer Protocols, Architectures and Applications (ULPAA'92), </booktitle> <pages> pages 99-112. </pages> <address> Elsevier/North-Holland, </address> <year> 1992. </year>
Reference-contexts: by most commercial C++ language processors. 2 PasswordLookup DEFINITIONS ::= BEGIN similar to an entry in &lt;pwd.h&gt; Passwd ::= [APPLICATION 1] IMPLICIT SEQUENCE f 5 name [0] IMPLICIT UserName, passwd [1] IMPLICIT IA5String OPTIONAL, uid [2] IMPLICIT UserID, gid [3] IMPLICIT GroupID, quota [4] IMPLICIT INTEGER DEFAULT 0, 10 comment <ref> [5] </ref> IMPLICIT IA5String OPTIONAL, gecos [6] IMPLICIT IA5String OPTIONAL, dir [7] IMPLICIT IA5String OPTIONAL, shell [8] IMPLICIT IA5String OPTIONAL g 15 UserName ::= [APPLICATION 2] IMPLICIT GraphicString UserID ::= [APPLICATION 3] IMPLICIT INTEGER GroupID ::= [APPLICATION 4] IMPLICIT INTEGER 20 =* automatically generated * C++ * by CATY version 1.0 *= <p> We have already identified an inefficiency related to tag checking that is being corrected, which we expect will improve the decoding performance for all types. Our plan is to perform a more comprehensive performance analysis of different PE&lt;T&gt; encoding forms using Huitema's proposed ASN.1 benchmark <ref> [5] </ref>. 5. SUMMARY The translation of ASN.1 into C++ is but one aspect of an object-oriented protocol framework using polymorphic type structures and inheritance.
Reference: 6. <author> Christian Huitema and Assem Doghri. </author> <title> Defining faster transfer syntaxes for the OSI presentation protocol. </title> <journal> ACM Computer Communication Review, </journal> <volume> 19(5) </volume> <pages> 44-55, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: processors. 2 PasswordLookup DEFINITIONS ::= BEGIN similar to an entry in &lt;pwd.h&gt; Passwd ::= [APPLICATION 1] IMPLICIT SEQUENCE f 5 name [0] IMPLICIT UserName, passwd [1] IMPLICIT IA5String OPTIONAL, uid [2] IMPLICIT UserID, gid [3] IMPLICIT GroupID, quota [4] IMPLICIT INTEGER DEFAULT 0, 10 comment [5] IMPLICIT IA5String OPTIONAL, gecos <ref> [6] </ref> IMPLICIT IA5String OPTIONAL, dir [7] IMPLICIT IA5String OPTIONAL, shell [8] IMPLICIT IA5String OPTIONAL g 15 UserName ::= [APPLICATION 2] IMPLICIT GraphicString UserID ::= [APPLICATION 3] IMPLICIT INTEGER GroupID ::= [APPLICATION 4] IMPLICIT INTEGER 20 =* automatically generated * C++ * by CATY version 1.0 *= #include "UNIV.h" namespace PasswordLookup f <p> Unlike some commercial implementations of the OSI presentation layer, a presentation layer built using a parameterized type mechanism can support a variety of encoding rules, such as the BER, the packed encoding rules (PER), Huitema's fast encodings <ref> [6] </ref>, XDR [12] (provided that the ASN.1 types are restricted to a sensible subset), or some customized set of encoding rules (e.g., for encryption).
Reference: 7. <author> Christian Huitema and Assem Doghri. </author> <title> A high speed approach for the OSI presentation protocol. </title> <editor> In H. Rudin and R. Williamson, editors, </editor> <booktitle> Protocols for High-Speed Networks, </booktitle> <pages> pages 277-287. </pages> <address> Elsevier/North-Holland, </address> <year> 1989. </year>
Reference-contexts: BEGIN similar to an entry in &lt;pwd.h&gt; Passwd ::= [APPLICATION 1] IMPLICIT SEQUENCE f 5 name [0] IMPLICIT UserName, passwd [1] IMPLICIT IA5String OPTIONAL, uid [2] IMPLICIT UserID, gid [3] IMPLICIT GroupID, quota [4] IMPLICIT INTEGER DEFAULT 0, 10 comment [5] IMPLICIT IA5String OPTIONAL, gecos [6] IMPLICIT IA5String OPTIONAL, dir <ref> [7] </ref> IMPLICIT IA5String OPTIONAL, shell [8] IMPLICIT IA5String OPTIONAL g 15 UserName ::= [APPLICATION 2] IMPLICIT GraphicString UserID ::= [APPLICATION 3] IMPLICIT INTEGER GroupID ::= [APPLICATION 4] IMPLICIT INTEGER 20 =* automatically generated * C++ * by CATY version 1.0 *= #include "UNIV.h" namespace PasswordLookup f 5 using namespace Universal; ==
Reference: 8. <author> International Organization for Standardization. </author> <title> Information Processing | Open Systems Interconnection | Specification of Abstract Syntax Notation One (ASN.1), </title> <note> 1987. ISO 8824 (CCITT X.208). </note>
Reference-contexts: 1. INTRODUCTION Programming OSI applications requires that both user data and application protocols be specified in ASN.1 <ref> [8] </ref>. Current OSI programming practice relies on tools for generating language specific constructs that represent the ASN.1 types that define application data and protocols. <p> in &lt;pwd.h&gt; Passwd ::= [APPLICATION 1] IMPLICIT SEQUENCE f 5 name [0] IMPLICIT UserName, passwd [1] IMPLICIT IA5String OPTIONAL, uid [2] IMPLICIT UserID, gid [3] IMPLICIT GroupID, quota [4] IMPLICIT INTEGER DEFAULT 0, 10 comment [5] IMPLICIT IA5String OPTIONAL, gecos [6] IMPLICIT IA5String OPTIONAL, dir [7] IMPLICIT IA5String OPTIONAL, shell <ref> [8] </ref> IMPLICIT IA5String OPTIONAL g 15 UserName ::= [APPLICATION 2] IMPLICIT GraphicString UserID ::= [APPLICATION 3] IMPLICIT INTEGER GroupID ::= [APPLICATION 4] IMPLICIT INTEGER 20 =* automatically generated * C++ * by CATY version 1.0 *= #include "UNIV.h" namespace PasswordLookup f 5 using namespace Universal; == universal types (i.e., INTEGER, IA5String,
Reference: 9. <author> International Organization for Standardization. </author> <title> Information Processing | Open Systems Interconnection | Specification of Basic Encoding Rules for Abstract Syntax Notation One, </title> <note> 1987. ISO 8825 (CCITT X.209). </note>
Reference-contexts: The typical model for using ASN.1 types in an application is to automatically generate corresponding high-level language data structures representing the specification, and operations for encoding and decoding each data structure using a suitable transfer syntax, such as the Basic Encoding Rules (BER) <ref> [9] </ref>. The automatic translation from an ASN.1 specification to equivalent data structures in a target language, such as C, often requires that the programmer understand the mapping of names from the ASN.1 specification to the language specific data structures.
Reference: 10. <author> International Organization for Standardization. </author> <title> Information Processing | Open Systems Interconnection | Basic Reference Model, 1987. </title> <type> ISO 7498. </type>
Reference-contexts: SUMMARY The translation of ASN.1 into C++ is but one aspect of an object-oriented protocol framework using polymorphic type structures and inheritance. This framework is the result of an experiment at objectifying the structure of the upper layers of the ISO Reference Model <ref> [10] </ref>, specifically focused on providing a flexible communication infrastructure for concurrent object-oriented applications in a multi-protocol environment. The goal of this framework is to create an extensible and efficient set of abstractions that facilitate the instantiatiation of multiple and diverse sets of communication services within an application [17].
Reference: 11. <author> Juha Koivisto and Juhani Malka. </author> <title> OTSO|an object-oriented approach to distributed computation. </title> <booktitle> In USENIX C++ Conference Proceedings, </booktitle> <pages> pages 163-177, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: This object-oriented protocol development framework is called OOSI (ooo-zi ). Similar research-oriented upper layer protocol development environments that we are familiar with include ELROS [2], OTSO <ref> [11] </ref>, DAS [14], and ISODE [15]. OOSI was influenced by ISODE, but is engineered for maximum flexibility and performance. OOSI is similar to OTSO in that both utilize object-oriented features, such as inheritance, to structure protocol layers.
Reference: 12. <author> Sun Microsystems. XDR: </author> <title> External data representation standard. Internet Protocol Specification RFC 1014, Network Information Center, </title> <booktitle> SRI International, </booktitle> <month> June </month> <year> 1987. </year>
Reference-contexts: Our framework is explicitly architected to encompass the current standardized encoding rules, as well as customized and de facto encoding rules; for example, the lightweight encoding rules proposed by Huitema and Doghri [6,7] and, with modest limitations, XDR <ref> [12] </ref>. <p> Unlike some commercial implementations of the OSI presentation layer, a presentation layer built using a parameterized type mechanism can support a variety of encoding rules, such as the BER, the packed encoding rules (PER), Huitema's fast encodings [6], XDR <ref> [12] </ref> (provided that the ASN.1 types are restricted to a sensible subset), or some customized set of encoding rules (e.g., for encryption).
Reference: 13. <author> Robert W. Mullins. </author> <title> Separating representations and translation of shared data. M.S. </title> <type> project report, </type> <institution> Virginia Polytechnic Institute and State University, Department of Computer Science, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: The numbers represent the time in seconds required to encode/decode 50,000 constructs. The SEQUENCE and CHOICE consist of an INTEGER and an OCTET STRING. A complete description of the performance study and an analysis of the results is presented in <ref> [13] </ref>. The data demonstrates that the C++ implementation has very competitive performance and that the flexibility obtained by separating the ASN.1 representation from the encoding/decoding rules embodied in a PE&lt;T&gt; object does not adversely affect the performance. We are encouraged by these results.
Reference: 14. <author> Gerald Neufeld. </author> <title> Distributed Application Support Package User Manual. </title> <institution> University of British Columbia. </institution> <note> Draft. </note>
Reference-contexts: This object-oriented protocol development framework is called OOSI (ooo-zi ). Similar research-oriented upper layer protocol development environments that we are familiar with include ELROS [2], OTSO [11], DAS <ref> [14] </ref>, and ISODE [15]. OOSI was influenced by ISODE, but is engineered for maximum flexibility and performance. OOSI is similar to OTSO in that both utilize object-oriented features, such as inheritance, to structure protocol layers.
Reference: 15. <author> Marshall T. Rose. </author> <title> The ISO Development Environment User's Manual, Volumes 1-5. </title> <booktitle> Performance Systems International, </booktitle> <month> July </month> <year> 1991. </year> <note> Version 7.0. </note>
Reference-contexts: For example, we are investigating the definition of a PE&lt;ISODE&gt; type that would allow us to encode/decode the ASN.1 objects into/from the intermediate representation required by the ISODE presentation layer <ref> [15] </ref>, which will facilitate building C++ applications using ISODE. The C++ types generated from the ASN.1 PasswordLookup example presented previously in Figure 1 are encoded and decoded into presentation elements that are defined by a particular set of encoding rules. <p> This object-oriented protocol development framework is called OOSI (ooo-zi ). Similar research-oriented upper layer protocol development environments that we are familiar with include ELROS [2], OTSO [11], DAS [14], and ISODE <ref> [15] </ref>. OOSI was influenced by ISODE, but is engineered for maximum flexibility and performance. OOSI is similar to OTSO in that both utilize object-oriented features, such as inheritance, to structure protocol layers. <p> ACKNOWLEDGEMENTS We appreciate the assistance of Rajesh Khera, who participated in an early implementation of the ASN.1 class hierarchy. Wendy Long implemented CATY using the ASN.1 grammar from the ISODE pepsy tool <ref> [15] </ref>. The book by Steedman [16] was helpful in clarifying certain aspects of ASN.1 and the BER encodings.
Reference: 16. <author> Douglas Steedman. </author> <title> Abstract Syntax Notation One (ASN.1): The Tutorial and Reference. </title> <booktitle> Technology Appraisals, </booktitle> <year> 1990. </year>
Reference-contexts: ACKNOWLEDGEMENTS We appreciate the assistance of Rajesh Khera, who participated in an early implementation of the ASN.1 class hierarchy. Wendy Long implemented CATY using the ASN.1 grammar from the ISODE pepsy tool [15]. The book by Steedman <ref> [16] </ref> was helpful in clarifying certain aspects of ASN.1 and the BER encodings.
Reference: 17. <author> Christian Tschudin. </author> <title> Flexible protocol stacks. </title> <booktitle> In SIGCOMM'91 Conference Proceedings, </booktitle> <pages> pages 197-205, </pages> <month> September </month> <year> 1991. </year> <month> 16 </month>
Reference-contexts: The goal of this framework is to create an extensible and efficient set of abstractions that facilitate the instantiatiation of multiple and diverse sets of communication services within an application <ref> [17] </ref>. This object-oriented protocol development framework is called OOSI (ooo-zi ). Similar research-oriented upper layer protocol development environments that we are familiar with include ELROS [2], OTSO [11], DAS [14], and ISODE [15]. OOSI was influenced by ISODE, but is engineered for maximum flexibility and performance.
References-found: 17

