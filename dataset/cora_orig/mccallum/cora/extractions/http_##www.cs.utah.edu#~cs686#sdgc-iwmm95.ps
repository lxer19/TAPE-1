URL: http://www.cs.utah.edu/~cs686/sdgc-iwmm95.ps
Refering-URL: http://www.cs.utah.edu/~cs686/
Root-URL: 
Email: e-mail: David.Plainfosse@ilog.fr  e-mail: Marc.Shapiro@inria.fr  
Phone: 2  
Title: A Survey of Distributed Garbage Collection Techniques  
Author: David Plainfosse and Marc Shapiro 
Address: ILOG, 2 av Gallieni, B.P. 85, 94253 Gentilly Cedex, France  SOR, B.P. 105, 78153 Le Chesnay Cedex, France  
Affiliation: 1  INRIA, Projet  
Abstract: We present the spectrum of distributed garbage collection techniques. We first describe those reference counting-based techniques and compare them, in particular with respect to resilience to message failures. Reference counting-based techniques are acyclic since they are unable to collect cyclic data structures. We then describe a number of hybrid schemes improving over distributed reference counting algorithms in order to collect cyclic garbage. We then describe tracing-based techniques derived from uniprocessor tracing-based techniques. Finally, we discuss the pros and cons of each technique.
Abstract-found: 1
Intro-found: 1
Reference: [Ali, 1984] <author> K. A. Mohammed Ali. </author> <title> Object-Oriented Storage Management and Garbage Collection in Distributed Processing Systems. </title> <type> PhD thesis, </type> <institution> Royal Institute of Technology, Dept. of Computer Systems, Stockholm, Sweden, </institution> <year> 1984. </year>
Reference-contexts: mented failure duplic. loss late Reference Counting [Bevan, 1987] * [Dickman, 1991] ffi * * * [Piquer, 1991] * * * * [Goldberg, 1989] * Reference Listing [Shapiro et al., 1990] * * * * * * * [Birrell et al., 1993] * * * ffi * * * Tracing <ref> [Ali, 1984] </ref> * [Hughes, 1985] * * [Ladin and Liskov, 1992] * * [Lang et al., 1992] ffi * ffi * [Juul and Jul, 1992] * * ffi : the characteristic is not intrinsically achieved by the distributed GC * : the characteristic is intrinsically achieved by the distributed GC. 7
Reference: [Bakker et al., 1987] <editor> W. Jacobus Bakker, L. Nijman, and Philip C. Treleaven, editors. </editor> <booktitle> Parallel Architectures and Languages Europe, number 258, 259 in Lecture Notes in Computer Science, </booktitle> <address> Eindhoven, The Netherlands, June 1987. </address> <publisher> Springer-Verlag. </publisher>
Reference: [Bevan, 1987] <author> David I. Bevan. </author> <title> Distributed Garbage Collection Using Reference Counting. </title> <editor> In Bakker et al. </editor> <year> [1987], </year> <pages> pages 117-187. </pages>
Reference-contexts: black stub remote reference A C B Tracing within a group composed of spaces A and B. 34 Table 1: Taxonomy of some popular distributed GC techniques. main distributed GC characteristics Distributed GC cyclic floating large imple- space message failure Techniques garbage scale mented failure duplic. loss late Reference Counting <ref> [Bevan, 1987] </ref> * [Dickman, 1991] ffi * * * [Piquer, 1991] * * * * [Goldberg, 1989] * Reference Listing [Shapiro et al., 1990] * * * * * * * [Birrell et al., 1993] * * * ffi * * * Tracing [Ali, 1984] * [Hughes, 1985] * * [Ladin
Reference: [Birrell et al., 1993] <author> A. Birrell, D. Evers, G. Nelson, S. Owicki, and T. Wobber. </author> <title> Distributed garbage collection for network objects. </title> <type> Technical Report 116, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Distributed GC cyclic floating large imple- space message failure Techniques garbage scale mented failure duplic. loss late Reference Counting [Bevan, 1987] * [Dickman, 1991] ffi * * * [Piquer, 1991] * * * * [Goldberg, 1989] * Reference Listing [Shapiro et al., 1990] * * * * * * * <ref> [Birrell et al., 1993] </ref> * * * ffi * * * Tracing [Ali, 1984] * [Hughes, 1985] * * [Ladin and Liskov, 1992] * * [Lang et al., 1992] ffi * ffi * [Juul and Jul, 1992] * * ffi : the characteristic is not intrinsically achieved by the distributed GC
Reference: [Birrell et al., 1994] <author> A. Birrell, G. Nelson, S. Owicki, and T. Wobber. </author> <title> Network objects. </title> <type> Technical Report 115, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: entry items that are not in the live list. 1 In absence of migration weak locators are exact in that they always refers to the current location of the object. 16 4.2 Garbage Collector for Network Objects Birrell et al. [1993] describe a reference listing technique for reclaim Network Objects <ref> [Birrell et al., 1994] </ref>. Network Objects are fined-grained, non-mobile objects, which can be referenced from a remote space. References to Network Objects are created as a side-effect of marshalling references in remote invocations. Reference duplication to a Network Object shortcuts at once any potential indirect reference.
Reference: [Bishop, 1977] <author> Peter B. Bishop. </author> <title> Computer Systems with a Very Large Address Space and Garbage Collection. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology Laboratory for Computer Science, </institution> <month> May </month> <year> 1977. </year> <note> Technical report MIT/LCS/TR-178. </note>
Reference: [Cardelli et al., 1988] <author> L. Cardelli, J. Donahue, L. Glassman, M. Jordan, B. Kalsow, and G. Nelson. </author> <type> Modula-3 report. Technical report, </type> <institution> Digital Systems Research Center and Olivetti Research Center, </institution> <address> Palo Alto, CA, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction Many programming languages <ref> [Weis, 1990, Cardelli et al., 1988] </ref> provide garbage collection to automatically deallocate inaccessible objects. Garbage collection is extremely useful, as it simplifies the programming model, therefore freeing valuable programmer time, while avoiding bugs and memory leaks which are notoriously hard to track and repair.
Reference: [Corporaal et al., 1990] <author> H. Corporaal, T. Veldman, and A. J. van de Goor. </author> <title> An Efficient, Reference Weightbased Garbage Collection Method for Distributed Systems. </title> <booktitle> In Proceedings of the PARBASE-90 Conference, </booktitle> <pages> pages 463 - 465. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference: [Dickman, 1991] <author> Peter Dickman. </author> <title> Distributed Object Management in a Non-Small Graph of Autonomous Networks With Few Failures. </title> <type> PhD thesis, </type> <institution> University of Cambridge, </institution> <address> United Kingdom, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: reference A C B Tracing within a group composed of spaces A and B. 34 Table 1: Taxonomy of some popular distributed GC techniques. main distributed GC characteristics Distributed GC cyclic floating large imple- space message failure Techniques garbage scale mented failure duplic. loss late Reference Counting [Bevan, 1987] * <ref> [Dickman, 1991] </ref> ffi * * * [Piquer, 1991] * * * * [Goldberg, 1989] * Reference Listing [Shapiro et al., 1990] * * * * * * * [Birrell et al., 1993] * * * ffi * * * Tracing [Ali, 1984] * [Hughes, 1985] * * [Ladin and Liskov, 1992]
Reference: [Dickman, 1992] <author> Peter Dickman. </author> <title> Optimising Weighted Reference Counts for Scalable Fault-Tolerant Distributed Object-Support Systems. </title> <note> Submitted for HICSS 26, </note> <month> June </month> <year> 1992. </year>
Reference: [Ferreira and Shapiro, 1994] <author> Paulo Ferreira and Marc Shapiro. </author> <title> Garbage collection and DSM consistency. </title> <booktitle> In Proc. of the First Symposium on Operating Systems Design and Implementation (OSDI), </booktitle> <pages> pages 229-241. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1994. </year> <month> 37 </month>
Reference-contexts: In our model, spaces cannot directly access object through virtual memory address due to protection mechanisms. Such model raises new issues which are not addressed in this survey (see <ref> [Ferreira and Shapiro, 1994] </ref> for a novel GC algorithm dedicated to distributed shared memory). 2 Spaces interact with each other by message passing using potentially unre-liable communication channels. Consequently, messages may fail due to: loss, duplication, delayed or out of order delivery.
Reference: [Fowler, 1986] <author> Robert Joseph Fowler. </author> <title> The complexity of using forwarding ad-dresses for decentralized object finding. </title> <booktitle> In Proc. 5th Annual ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pages 108-120, </pages> <address> Alberta, Canada, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: It is designed for a classi 15 cal distributed system composed of spaces, i.e., with no shared memory, partial failures, and unreliable and costly messages. SSP Chains are an efficient and fault-tolerant variant of forwarders <ref> [Fowler, 1986] </ref>, meaning that a reference is implemented by a chain of point-to-point links (rather than by a global identifier). A remote reference is represented as a chain of exit item-entry item pairs (SSPs).
Reference: [Goldberg, 1989] <author> Benjamin Goldberg. </author> <title> Generational reference counting: A reduced-communication distributed storage reclamation scheme. </title> <booktitle> In Proceedings of the 1989 SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 313-320, </pages> <address> Portland, Oregon, </address> <month> June </month> <year> 1989. </year> <note> ACM Press. Published as SIGPLAN Notices 24(7), </note> <month> July </month> <year> 1989. </year>
Reference-contexts: and B. 34 Table 1: Taxonomy of some popular distributed GC techniques. main distributed GC characteristics Distributed GC cyclic floating large imple- space message failure Techniques garbage scale mented failure duplic. loss late Reference Counting [Bevan, 1987] * [Dickman, 1991] ffi * * * [Piquer, 1991] * * * * <ref> [Goldberg, 1989] </ref> * Reference Listing [Shapiro et al., 1990] * * * * * * * [Birrell et al., 1993] * * * ffi * * * Tracing [Ali, 1984] * [Hughes, 1985] * * [Ladin and Liskov, 1992] * * [Lang et al., 1992] ffi * ffi * [Juul and
Reference: [Hughes, 1985] <author> John Hughes. </author> <title> A distributed garbage collection algorithm. </title> <editor> In Jean-Pierre Jouannaud, editor, </editor> <booktitle> ACM Conference on Functional Programming Languages and Computer Architecture, number 201 in Lecture Notes in Computer Science, </booktitle> <pages> pages 256-272, </pages> <address> Nancy, France, </address> <note> Software Practice and Experience 1985. Springer-Verlag. </note>
Reference-contexts: Garbage collection has recently become of increasing interest in distributed systems <ref> [Lang et al., 1992, Hughes, 1985] </ref>. The motivations for such a service fl Published in: International Workshop on Memory Management, Kinross, Scotland (UK), September 1995. 1 are numerous. <p> loss late Reference Counting [Bevan, 1987] * [Dickman, 1991] ffi * * * [Piquer, 1991] * * * * [Goldberg, 1989] * Reference Listing [Shapiro et al., 1990] * * * * * * * [Birrell et al., 1993] * * * ffi * * * Tracing [Ali, 1984] * <ref> [Hughes, 1985] </ref> * * [Ladin and Liskov, 1992] * * [Lang et al., 1992] ffi * ffi * [Juul and Jul, 1992] * * ffi : the characteristic is not intrinsically achieved by the distributed GC * : the characteristic is intrinsically achieved by the distributed GC. 7 Conclusion Reference counting
Reference: [Juul and Jul, 1992] <author> Niels Christian Juul and Eric Jul. </author> <title> Comprehensive and robust garbage collection in a distributed system. </title> <editor> In Yves Bekkers and Jacques Cohen, editors, </editor> <booktitle> International Workshop on Memory Management, number 637 in Lecture Notes in Computer Science, </booktitle> <address> St. Malo, France, </address> <month> September </month> <year> 1992. </year> <note> Springer-Verlag. </note>
Reference-contexts: * [Goldberg, 1989] * Reference Listing [Shapiro et al., 1990] * * * * * * * [Birrell et al., 1993] * * * ffi * * * Tracing [Ali, 1984] * [Hughes, 1985] * * [Ladin and Liskov, 1992] * * [Lang et al., 1992] ffi * ffi * <ref> [Juul and Jul, 1992] </ref> * * ffi : the characteristic is not intrinsically achieved by the distributed GC * : the characteristic is intrinsically achieved by the distributed GC. 7 Conclusion Reference counting associates with each public object a count of the number of references to it.
Reference: [Kernighan and Ritchie, 1978] <author> Brian Kernighan and Dennis Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood-Cliffs, N.J., </address> <year> 1978. </year>
Reference-contexts: Garbage collection is extremely useful, as it simplifies the programming model, therefore freeing valuable programmer time, while avoiding bugs and memory leaks which are notoriously hard to track and repair. As any C <ref> [Kernighan and Ritchie, 1978] </ref> or C++ [Strous-trup, 1991] programmer can witness, the manual management of a dynamic heap is complex and error-prone.
Reference: [Ladin and Liskov, 1992] <author> Rivka Ladin and Barbara Liskov. </author> <title> Garbage collection of a distributed heap. </title> <booktitle> In Principles of Distributed Computing, </booktitle> <pages> pages 708-715, </pages> <year> 1992. </year>
Reference-contexts: [Bevan, 1987] * [Dickman, 1991] ffi * * * [Piquer, 1991] * * * * [Goldberg, 1989] * Reference Listing [Shapiro et al., 1990] * * * * * * * [Birrell et al., 1993] * * * ffi * * * Tracing [Ali, 1984] * [Hughes, 1985] * * <ref> [Ladin and Liskov, 1992] </ref> * * [Lang et al., 1992] ffi * ffi * [Juul and Jul, 1992] * * ffi : the characteristic is not intrinsically achieved by the distributed GC * : the characteristic is intrinsically achieved by the distributed GC. 7 Conclusion Reference counting associates with each public
Reference: [Lamport, 1978] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference: [Lang et al., 1992] <author> Bernard Lang, Christian Queinnec, and Jose Piquer. </author> <title> Garbage collecting the world. </title> <booktitle> In Conference Record of the Nineteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 39-50, </pages> <address> Albuquerque, New Mexico (USA), </address> <month> January </month> <year> 1992. </year> <note> ACM Press. </note>
Reference-contexts: Garbage collection has recently become of increasing interest in distributed systems <ref> [Lang et al., 1992, Hughes, 1985] </ref>. The motivations for such a service fl Published in: International Workshop on Memory Management, Kinross, Scotland (UK), September 1995. 1 are numerous. <p> A standard solution is to fight inconsistency by using strong protocols such a global barrier to synchronise with a barrier the end of all the local mark 27 phases <ref> [Lang et al., 1992] </ref>. <p> * * * [Piquer, 1991] * * * * [Goldberg, 1989] * Reference Listing [Shapiro et al., 1990] * * * * * * * [Birrell et al., 1993] * * * ffi * * * Tracing [Ali, 1984] * [Hughes, 1985] * * [Ladin and Liskov, 1992] * * <ref> [Lang et al., 1992] </ref> ffi * ffi * [Juul and Jul, 1992] * * ffi : the characteristic is not intrinsically achieved by the distributed GC * : the characteristic is intrinsically achieved by the distributed GC. 7 Conclusion Reference counting associates with each public object a count of the number
Reference: [Lins and Jones, 1991] <author> Rafael D. Lins and Richard E. Jones. </author> <title> Cyclic weighted reference counting. </title> <type> Technical Report 95, </type> <institution> University of Kent, Canterbury, </institution> <address> United Kingdom, </address> <month> December </month> <year> 1991. </year>
Reference: [Lins, 1990] <author> Rafael D. Lins. </author> <title> Cyclic reference counting with lazy mark-scan. </title> <type> Technical Report 75, </type> <institution> University of Kent, Canterbury, </institution> <address> United Kingdom, </address> <month> June </month> <year> 1990. </year> <note> To appear in Information Processing Letters. </note>
Reference-contexts: Furthermore, the distributed tracing is poorly concurrent with mutator activity. If the frequency of pointer deletion is high enough, the mutator may be suspended most of the time by the cyclic collector. These shortcomings were later corrected in part <ref> [Lins, 1990] </ref> by queueing suspected objects and batching tracing on several subgraphs. Second, concurrent tracing of overlapping subgraphs necessitates either some form of locking or extra data fields to manage a counter per tracing.
Reference: [Liskov and Ladin, 1986] <author> Barbara Liskov and Rivka Ladin. </author> <title> Highly-available distributed services and fault- tolerant distributed garbage collection. </title> <booktitle> In Fifth 38 ACM Symposium on the Principles of Distributed Computing, </booktitle> <pages> pages 29-39, </pages> <year> 1986. </year>
Reference: [Piquer, 1991] <author> Jose M. Piquer. </author> <title> Indirect reference-counting, a distributed garbage collection algorithm. </title> <editor> In Eddy Odijik, M. Rem, and Jean-Claude Sayr, editors, </editor> <booktitle> Parallel Architectures and Languages Europe, number 365, 366 in Lecture Notes in Computer Science, </booktitle> <pages> pages 150-165, </pages> <address> Eindhoven, the Netherlands, June 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: a group composed of spaces A and B. 34 Table 1: Taxonomy of some popular distributed GC techniques. main distributed GC characteristics Distributed GC cyclic floating large imple- space message failure Techniques garbage scale mented failure duplic. loss late Reference Counting [Bevan, 1987] * [Dickman, 1991] ffi * * * <ref> [Piquer, 1991] </ref> * * * * [Goldberg, 1989] * Reference Listing [Shapiro et al., 1990] * * * * * * * [Birrell et al., 1993] * * * ffi * * * Tracing [Ali, 1984] * [Hughes, 1985] * * [Ladin and Liskov, 1992] * * [Lang et al., 1992]
Reference: [Plainfosse, 1994] <author> David Plainfosse. </author> <title> Distributed Garbage Collection and Reference Management in the Soul Object Support System. </title> <type> PhD thesis, </type> <institution> Universite Paris-6, Pierre-et-Marie-Curie, Paris (France), </institution> <month> June </month> <year> 1994. </year> <note> Available from INRIA as TU-281, ISBN-2-7261-0849-0. </note>
Reference-contexts: The former policy assumes that entry items and exit items lists will be recovered, e.g. because they are backed up on stable storage. The latter policy assumes that a crashed space will not recover. 4.1 Stub-Scion Pair Chains SSP Chains <ref> [Shapiro et al., 1992, Plainfosse, 1994] </ref> combine distributed collection with a reference mechanism to locate remote objects. It is designed for a classi 15 cal distributed system composed of spaces, i.e., with no shared memory, partial failures, and unreliable and costly messages.
Reference: [Rudalics, 1990] <author> Martin Rudalics. </author> <title> Correctness of distributed garbage collection algorithms. </title> <type> Technical Report 90-40.0, </type> <institution> Johannes Kepler Universitat, Linz Aus-tria, </institution> <year> 1990. </year>
Reference: [Shapiro et al., 1990] <author> Marc Shapiro, Olivier Gruber, and David Plainfosse. </author> <title> A garbage detection protocol for a realistic distributed object-support system. </title> <institution> Rapport de Recherche 1320, inria, rocquencourt, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: Taxonomy of some popular distributed GC techniques. main distributed GC characteristics Distributed GC cyclic floating large imple- space message failure Techniques garbage scale mented failure duplic. loss late Reference Counting [Bevan, 1987] * [Dickman, 1991] ffi * * * [Piquer, 1991] * * * * [Goldberg, 1989] * Reference Listing <ref> [Shapiro et al., 1990] </ref> * * * * * * * [Birrell et al., 1993] * * * ffi * * * Tracing [Ali, 1984] * [Hughes, 1985] * * [Ladin and Liskov, 1992] * * [Lang et al., 1992] ffi * ffi * [Juul and Jul, 1992] * * ffi
Reference: [Shapiro et al., 1992] <author> Marc Shapiro, Peter Dickman, and David Plainfosse. </author> <title> Robust, distributed references and acyclic garbage collection. </title> <booktitle> In Symp. on Principles of Distributed Computing, </booktitle> <address> Vancouver (Canada), </address> <month> August </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: The motivations for such a service fl Published in: International Workshop on Memory Management, Kinross, Scotland (UK), September 1995. 1 are numerous. First, transparency: just as modern distributed systems support transparent, uniform placement and invocation of both local and remote objects <ref> [Shapiro et al., 1992] </ref>, so should they also support transparent object management, including reclamation. Second, storage management is a complex task, not to be handled by users. <p> The former policy assumes that entry items and exit items lists will be recovered, e.g. because they are backed up on stable storage. The latter policy assumes that a crashed space will not recover. 4.1 Stub-Scion Pair Chains SSP Chains <ref> [Shapiro et al., 1992, Plainfosse, 1994] </ref> combine distributed collection with a reference mechanism to locate remote objects. It is designed for a classi 15 cal distributed system composed of spaces, i.e., with no shared memory, partial failures, and unreliable and costly messages.
Reference: [Stroustrup, 1991] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1991. </year>
Reference: [Vestal, 1987] <author> S. C. Vestal. </author> <title> Garbage Collection: An Exercise in Distributed, Fault-Tolerant Programming. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <address> Seattle, Wash-ington, </address> <month> January </month> <year> 1987. </year>
Reference: [Watson and Watson, 1987] <author> P. Watson and I. Watson. </author> <title> An Efficient Garbage Collection Scheme for Parallel Computer Architecture. </title> <editor> In Bakker et al. </editor> <year> [1987], </year> <pages> pages 432 - 443. </pages>
Reference: [Weis, 1990] <author> P. Weis. </author> <title> The CAML Reference manual, Version 2.6.1. </title> <type> Technical Report 121, </type> <institution> INRIA-Rocquencourt, </institution> <year> 1990. </year> <month> 39 </month>
Reference-contexts: 1 Introduction Many programming languages <ref> [Weis, 1990, Cardelli et al., 1988] </ref> provide garbage collection to automatically deallocate inaccessible objects. Garbage collection is extremely useful, as it simplifies the programming model, therefore freeing valuable programmer time, while avoiding bugs and memory leaks which are notoriously hard to track and repair.
References-found: 31

