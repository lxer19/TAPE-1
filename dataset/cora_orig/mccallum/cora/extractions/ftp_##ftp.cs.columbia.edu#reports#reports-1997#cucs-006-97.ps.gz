URL: ftp://ftp.cs.columbia.edu/reports/reports-1997/cucs-006-97.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1997.html
Root-URL: http://www.cs.columbia.edu
Title: Federating Process-Centered Environments: the Oz Experience  
Author: Israel Z. Ben-Shaul Gail E. Kaiser Z. Ben-Shaul and Gail E. Kaiser 
Keyword: Collaborative work, Distributed system, Enterprise-wide environment, Geographical distribution, Internet, Process interoperability, Software process, Workflow management  
Note: c fl1997, Israel  
Address: City, Haifa 32000 New York, NY 10027 ISRAEL UNITED STATES  
Affiliation: Technion-Israel Institute of Technology Columbia University Department of Electrical Engineering Department of Computer Science Technion  
Pubnum: CUCS-006-97  
Email: issy@ee.technion.ac.il kaiser@cs.columbia.edu  
Phone: +972-4-8294680 212-939-7081  
Date: March 10, 1997  
Abstract: We describe two models for federating process-centered environments (PCEs): homogeneous federation among distinct instances of the same environment framework enacting the same or different process models, and heterogeneous federation among diverse process enactment systems. We identify the requirements and consider possible architectures for each model, although we concentrate primarily on the homogeneous case. The bulk of the paper presents our choice of architecture, and corresponding infrastructure, for homogeneous federation among Marvel environment instances as realized in the Oz system. We briefly consider how a single Marvel environment, or an Oz federation of Marvel environments, might be integrated into a heterogeneous federation based on ProcessWall's facilities for interoperating PCEs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Alonso, D. Agrawal, A. El Abbadi, C. Mohan, R. Gunthor, and Mohan U. Kamath. Exotica/FMQM: </author> <title> A persistent message-based architecture for distributed workflow management. </title> <booktitle> In IFIP WG 8.1 Workgroup Conference on Information Systems Development for Decentralized Organizations, </booktitle> <address> Trondheim, Norway, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: Here the process itself is distributed across multiple nodes, where each node is responsible for the execution of its subprocess as well as corresponding tasks. Control flow and synchronization between the process segments is specified locally inside the nodes. Several transactional workflow systems, such as Exotica <ref> [1] </ref> and Meteor [32], operate in a fully distributed manner | by expressing the workflow implicitly in a network of task managers (which invoke the actual tools) that interact only with their predecessors and successors in the workflow routing. Several issues influence the choice of single-site PCE architecture.
Reference: [2] <author> John E. Arnold and Steven S. Popovich. </author> <title> Integrating, customizing and extending environments with a message-based architecture. </title> <type> Technical Report CUCS-008-95, </type> <institution> Columbia University, Department of Computer Science, </institution> <month> September </month> <year> 1994. </year> <note> The research described in this report was conducted at Bull HN Information Systems, </note> <institution> Inc. ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-008-95.ps.Z. </institution>
Reference-contexts: conceptually homogeneous infrastructure component mentioned above into a given PCE, and the mechanism for doing so is necessarily ad hoc (i.e., PCE-specific). 15 2.6 Heterogeneous Federation Architectures There are three main categories: * Ad hoc: A handcrafted federation consisting of a very small number of distinct PCEs, e.g., Bull's ACME <ref> [2] </ref> integration of ConversationBuilder [40] and Marvel 3.x. While one might be able to find a special-purpose Foundation component in this or similar examples, we are concerned in this paper with general federation.
Reference: [3] <author> Sergio Bandinelli and Alfonso Fuggetta. </author> <title> Computational reflection in software process modeling: the SLANG approach. </title> <booktitle> In 15th International Conference on Software Engineering, </booktitle> <pages> pages 144-154, </pages> <address> Baltimore MD, May 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Several issues influence the choice of single-site PCE architecture. A major factor is the level of data integration employed by the PCE for product artifacts. PCEs with extensive data integration facilities (e.g., SPADE <ref> [3] </ref>, EPOS [16]) might choose a centralized control architecture to minimize communication between the data and process managers when disseminating tasks | unless the data management is itself distributed, and/or the data itself is physically distributed, in which case a distributed control architecture may be employed.
Reference: [4] <author> Naser S. Barghouti. </author> <title> Supporting cooperation in the marvel process-centered SDE. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 21-31, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/sde92.ps.Z. </month>
Reference-contexts: The explicitness of the process in PCEs makes it possible to employ semantics-based transaction management <ref> [4, 29] </ref>. Multi-site tasks may modify data from multiple sites, and thus require some kind of global transactional support, such as two-phase commit that interfaces with local transaction managers.
Reference: [5] <author> Daniel J. Barrett, Lori A. Clarke, Peri L. Tarr, and Alexander E. Wise. </author> <title> A framework for event-based software integration. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 5(4) </volume> <pages> 378-421, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: The degree of independence afforded each team determines the point within the subrange. The heterogeneous version of this intermediate range consists of multi-SDEs, that is, interacting but distinct SDEs with the glue consisting of a shared standard event notification scheme <ref> [5] </ref> or other control facilities in addition to a common data interchange format. 1 Finally, the far extreme is a geographically distributed SDE that does not distinguish among teams | all the users are treated as members of one very large team sharing everything.
Reference: [6] <author> Israel Ben-Shaul and Gail E. Kaiser. </author> <title> A Paradigm for Decentralized Process Modeling. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: constructors. 16 3 The Oz Homogeneous PCE Federation Oz is the only fully implemented homogeneous PCE federation that we know of. 2 Oz originally (versions 1.1.1 and earlier) followed the direct peer-to-peer architectural model, where the majority of the Foundation functionality was built into the process engine (as elaborated in <ref> [6] </ref>). Oz was later reimplemented (versions 1.2 and later), using a new process engine as moderated peer-to-peer | with the Foundation moderator separated out into a component invoked via generic "callbacks" from the process engine. We are primarily concerned with the later form of Oz in this paper. <p> This requirement implies a bottom-up approach, which in turn suggests a peer-based architectural style. However, we have constructed both bottom-up (e.g., see <ref> [6] </ref>, Appendix A) and top-down (e.g., see [38]) global processes for Oz. Second, Oz was developed (among other reasons) to interconnect instances of the Marvel framework. <p> The server context-switches among multiple clients, and includes the process engine, object management, and transaction management. Oz is essentially the same as Marvel, except that an Oz environment may consist of several servers, each with its own distinct process model, data schema, objectbase and tools <ref> [6] </ref>. Clients are always connected to one "local" server, and may also open and close connections to "remote" servers on demand. A server and its "local" clients constitute a SubEnv. The external view of the multi-site peer-to-peer Oz architecture is shown in Figure 6.
Reference: [7] <author> Israel Z. Ben-Shaul and George T. Heineman. </author> <title> A 3-level atomicity model for decentralized workflow management system. </title> <editor> In Carlo Montangero, editor, </editor> <booktitle> 5th European Workshop on Software Process Technology, volume 1149 of Lecture Notes in Computer Science, </booktitle> <pages> pages 61-64, </pages> <address> Nancy, France, </address> <month> October </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference-contexts: Multi-site tasks may modify data from multiple sites, and thus require some kind of global transactional support, such as two-phase commit that interfaces with local transaction managers. Investigation of this topic is beyond the scope of this paper, see <ref> [7, 26] </ref>. 2.3 Homogeneous Federation Architectures We identify five categories of architectures within the homogeneous (light grey) area of the "tightness of coupling" spectrum of Figure 1.
Reference: [8] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A configuration process for a distributed software development environment. </title> <booktitle> In 2nd International Workshop on Configurable Distributed Systems, </booktitle> <pages> pages 123-134, </pages> <address> Pittsburgh PA, </address> <month> March </month> <year> 1994. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-022-93.ps.Z. </month>
Reference-contexts: The strict decentralization, even in the definition of the federated process (using Treaties), avoids the need for a global process state (except for the special configuration process, described in <ref> [8] </ref>), and further supports our choice of a peer-to-peer architecture according to the issues discussed in Section 2.4. Finally, Summits do not require a global process controller, but do require functional extensions to local process engines to allow them to become Summit coordinators. Again, the peer-to-peer architecture is favored.
Reference: [9] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the Oz environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <pages> pages 179-188, </pages> <address> Sorrento, Italy, May 1994. </address> <publisher> IEEE Computer Society Press. ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-024-93.ps.Z. </publisher>
Reference-contexts: One approach to homogeneous PCE federation, where every team runs a component of the same multi-site PCE but enacts a different process, is taken by our Oz PCE <ref> [9] </ref>. Oz was devised to scale up our earlier Marvel PCE [36] to multi-process, multi-team, geographically dispersed software engineering projects.
Reference: [10] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> An interoperability model for process-centered software engineering environments and its implementation in Oz. </title> <type> Technical Report CUCS-034-95, </type> <institution> Columbia University Department of Computer Science, </institution> <month> December </month> <year> 1995. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-034-95.ps.Z. </month>
Reference-contexts: In other words, we assume that multi-site tasks are themselves modeled in either top-down or bottom-up fashion as parts of a global process, with conceptually its own state and purpose. However, multi-site process modeling and enactment is the subject of another paper <ref> [10] </ref>; here we are concerned with structure and organization of components, i.e., architecture, that supports multi-site processes. * As far as purely local work is concerned, i.e., work involving the local process operating only on local data, a SubEnv should operate autonomously and independently, and provide the same capabilities as would <p> is of course also necessary for SubEnvs to determine or negotiate what services each can expect from other (perhaps anonymous) SubEnvs in terms of process control, tool execution, and data and other resources, and how to coordinate exploitation of those services, but again that is the subject of another paper <ref> [10] </ref>. * Since processes in general, and federated processes in particular, are enacted for long durations, they require facilities for persistent process state. <p> We do not consider here which of the two paradigms is more appropriate for various applications (see <ref> [10] </ref> for such a discussion), but rather which architecture best supports each of the paradigms | particularly the bottom-up paradigm, since one of our major goals was to link pre-existing single-site Marvel processes. In order to support top-down global processes, the federation must support maintenance of global process state. <p> Thus, Summits alternate between execution of shared, global, and multi-site tasks, to execution of private, local and single-site tasks, and effectively enact multi-site processes with minimal interpro-cess dependencies beyond the explicitly defined shared subprocesses. Full details of Summits and Treaties are given in <ref> [10] </ref>. Treaties and Summits impose several requirements on the design of Oz's federated architecture. First, the tight process-level integration of an imported subprocess into the local process implies a strong coupling of the Foundation with the local PCE. <p> Integration of imported Treaties into the local process for non-rule process paradigms is more complicated, but possible, as discussed in <ref> [10] </ref> and not addressed here. 3.2 Oz Architecture The internal architecture of Oz is shown in Figure 7.
Reference: [11] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> Integrating groupware activities into workflow management systems. </title> <booktitle> In 7th Israeli Conference on Computer Systems and Software Engineering, </booktitle> <pages> pages 140-149, </pages> <address> Her-zliya, Israel, June 1996. </address> <publisher> IEEE Computer Society Press. ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-002-95.ps.Z. </publisher>
Reference-contexts: Oz version 1.1.1 included process modeling and enactment facilities, which could be revived, to delegate a rule activity to a specific user, or to one or all members of a user group <ref> [11] </ref>. Later versions of Oz can delegate an entire rule or (rest of a) rule chain to a specific user or any group member via "guidance chaining", a form of forward chaining where the next rule in the chain is placed in an agenda rather than immediately enacted [69].
Reference: [12] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-012-92.ps.Z. </month>
Reference-contexts: Centralized process control and decentralized tool execution: A process server maintains the state of the process, controls its enactment, and synchronizes access to shared resources, but the tools themselves execute at process clients. Marvel 3.x <ref> [12] </ref>, ProcessWEAVER [19], and Mentor fit this mold, albeit in different ways. Marvel 3.x relies on fixed user clients to fork tools, whereas ProcessWEAVER spawns user "work contexts" as needed by the process. <p> Marvel employs a client/server architecture <ref> [12] </ref>. Clients provide the user interface and execute tasks, usually by invoking external tools. The server context-switches among multiple clients, and includes the process engine, object management, and transaction management.
Reference: [13] <author> Barry Boehm, </author> <title> editor. </title> <booktitle> 10th International Software Process Workshop: Process Support of Software Product Lines, </booktitle> <address> Ventron, France, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: We are concerned in this paper with the subclass of SDEs known as process-centered environments (PCEs) <ref> [60, 13] </ref>. In general, a PCE is a generic environment framework, or kernel, intended to be parameterized by a process model that defines the software development process for a specific instance of the environment.
Reference: [14] <author> Gregory Alan Bolcer and Richard N. Taylor. Endeavors: </author> <title> A process system integration infrastructure. </title> <editor> In Wilhelm Schafer, editor, </editor> <booktitle> 4th International Conference on the Software Process: Software Process - Improvement and Practice, </booktitle> <pages> pages 76-89, </pages> <address> Brighton, UK, </address> <month> December </month> <year> 1996. </year> <month> 30 </month>
Reference-contexts: Decentralized process control and centralized tool execution. Control is distributed among multiple process servers, where the tool execution function is supported by a single component. This model supports separate process engines for each user | as in Endeavors <ref> [14] </ref> or Merlin [61] | while sharing special computational or database resources used in tool invocation. One can easily imagine multiple workflows accessing the same tool management resource, particularly if only the tool broker is centralized, directing actual tool invocation to distributed hosts as in WebMake [48]. 4.
Reference: [15] <author> Jiansan Chen, Omran A. Bukhres, and Ahmed K. Elmagarmid. </author> <title> IPL: A multidatabaase transaction specification language. </title> <booktitle> In 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 439-448, </pages> <address> Pittsburgh PA, May 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Further, homogeneous federations assume compatible transaction management (concurrency control and failure recovery), generally supporting a two-phase commit protocol for distributed transactions, which may not be straightforward in the heterogeneous case. This issue has been addressed extensively in the database community, e.g., <ref> [15] </ref>, and is also not discussed further here. * Finally, there should be some means for configuring a federation.
Reference: [16] <author> Reidar Conradi, Espen Osjord, Per H. Westby, and Chunnian Liu. </author> <title> Initial software process management in EPOS. </title> <journal> Software Engineering Journal, </journal> <volume> 6(5) </volume> <pages> 275-284, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Several issues influence the choice of single-site PCE architecture. A major factor is the level of data integration employed by the PCE for product artifacts. PCEs with extensive data integration facilities (e.g., SPADE [3], EPOS <ref> [16] </ref>) might choose a centralized control architecture to minimize communication between the data and process managers when disseminating tasks | unless the data management is itself distributed, and/or the data itself is physically distributed, in which case a distributed control architecture may be employed.
Reference: [17] <author> Michael Cusumano and Richard W. Selby. </author> <title> Microsoft Secrets: How the World's Most Powerful Software Company Creates Technology, Shapes Markets, and Manages People. </title> <publisher> The Free Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: That is, a site is whereever a team does its work. Consider, for example, several teams each responsible for a separate set of "features", all intended to be included in an upcoming Microsoft product release <ref> [17] </ref>. Imagine some of these teams have been subcontracted from various independent software houses located outside Microsoft's main development lab, perhaps even outside the United States. Although Microsoft documents recommend vendor processes, it seems unlikely that these teams would follow identical software engineering practices, use exactly the same tools, etc.
Reference: [18] <author> Stephen E. Dossick and Gail E. Kaiser. </author> <title> WWW access to legacy client/server applications. </title> <booktitle> In 5th International World Wide Web Conference, </booktitle> <pages> pages 931-940, </pages> <address> Paris, France, </address> <month> May </month> <year> 1996. </year> <title> Elsevier Science B.V. </title> <journal> Special issue of Computer Networks and ISDN Systems, The International Journal of Computer and Telecommunications Networking, </journal> <pages> 28(7-11), </pages> <month> May </month> <year> 1996. </year> <note> http://www.psl.cs.columbia.edu/papers/CUCS-003-96.html. </note>
Reference-contexts: It is simple to construct a special Oz client that receives the same message from the server identifying tool script and arguments but does something different than the typical user client; in fact, we have already introduced numerous such clients (see <ref> [66, 18, 70, 46] </ref>). Then, to implement points 1 and 2, the new client would be inserted into the multi-PCE architecture between the Oz server and the central Foundation. This client would convert the activity information provided into the Foundation's task representation and forward it to the centralized Foundation.
Reference: [19] <author> Christer Fernstrom. </author> <title> PROCESS WEAVER: Adding process support to UNIX. </title> <booktitle> In 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Centralized process control and decentralized tool execution: A process server maintains the state of the process, controls its enactment, and synchronizes access to shared resources, but the tools themselves execute at process clients. Marvel 3.x [12], ProcessWEAVER <ref> [19] </ref>, and Mentor fit this mold, albeit in different ways. Marvel 3.x relies on fixed user clients to fork tools, whereas ProcessWEAVER spawns user "work contexts" as needed by the process.
Reference: [20] <author> David Garlan and Ehsan Ilias. </author> <title> Low-cost, adaptable tool integration policies for integrated environments. </title> <editor> In Richard N. Taylor, editor, </editor> <booktitle> 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 1-10, </pages> <address> Irvine CA, </address> <month> December </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: This could be augmented with limited process support, as in Forest <ref> [20] </ref> and Provence [43], to transform notification messages into requests to perform various tasks triggered by process enactment in the Foundation. * When process enactment at one SubEnv involves access to data "owned" by one or more other SubEnvs, the Foundation must provide mechanisms for transferring product artifacts and requisite process
Reference: [21] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dow-son, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. ftp://ftp.psl.cs.columbia.edu/pub/psl/icsp91.ps.Z. </publisher>
Reference-contexts: it would appear in a user menu or agenda; typed parameters and bindings of local variables from the project objectbase; a condition or prerequisite that must be satisfied before initiating the activity to be performed during the task; the tool script with in, inout and out arguments for the activity <ref> [21] </ref>; and a set of effects, one of which asserts the actual results or consequences of completing the activity (some activities have more than one possible result).
Reference: [22] <author> Barbara Hayes-Roth. </author> <title> A blackboard architecture for control. </title> <journal> Artificial Intelligence Journal, </journal> <volume> 26 </volume> <pages> 251-321, </pages> <year> 1985. </year>
Reference-contexts: An intelligent scheduler might then be attached to ProcessWall to direct such posted tasks to particular sites, as described in [52], or alternatively ProcessWall might be treated as a "blackboard" (using artificial intelligence terminology <ref> [22] </ref>) from which the schedulers of the individual PCEs participating in the federation select those tasks they are suited to perform. Any sharing of software product artifacts, as opposed to process state, is implicit in the data information included with posted tasks.
Reference: [23] <author> Dennis Heimbigner. </author> <title> Proscription versus Prescription in process-centered environments. </title> <editor> In Takuya Katayama, editor, </editor> <booktitle> 6th International Software Process Workshop: Support for the Software Process, </booktitle> <pages> pages 99-102, </pages> <address> Hakodate, Japan, October 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Another characteristic that impacts the choice of local PCE architecture is whether the process modeling paradigm employed by the PCE is reactive or proactive (termed proscription vs. prescription by Heimbigner in <ref> [23] </ref>).
Reference: [24] <author> Dennis Heimbigner. </author> <title> The ProcessWall: A process state server approach to process programming. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 159-168, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: One approach to heterogeneous PCE federation, where two or more distinct process systems are bound together into a multi-PCE, is taken by Heimbigner's ProcessWall <ref> [24] </ref>. Note that ProcessWall is the external glue supporting such binding, not itself a PCE.
Reference: [25] <author> George T. Heineman. </author> <title> Automatic translation of process modeling formalisms. </title> <booktitle> In 1994 Centre for Advanced Studies Conference (CASCON), </booktitle> <pages> pages 110-120, </pages> <address> Toronto ON, Canada, </address> <month> November </month> <year> 1994. </year> <institution> IBM Canada Ltd. Laboratory. ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-036-93.ps.Z. </institution>
Reference-contexts: So difficulties arise only when pending tasks posted through the Foundation involve non-Oz SubEnvs. Fortuitously, we have already shown fairly straightforward mappings from most of the major PCE paradigms, including Petri nets [55], task graphs <ref> [25] </ref>, and grammars [39], into Oz rules, and reverse mappings are not inconceivable. And as previously noted in Section 1, Mentor supports translation from one notation into another, as does the process interchange format standardization effort.
Reference: [26] <author> George T. Heineman. </author> <title> A Transaction Manager Component for Cooperative Transaction Models. </title> <type> PhD thesis, </type> <institution> Columbia University Department of Computer Science, </institution> <month> June </month> <year> 1996. </year> <note> CUCS-010-96. ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-010-96.ps.gz. </note>
Reference-contexts: Multi-site tasks may modify data from multiple sites, and thus require some kind of global transactional support, such as two-phase commit that interfaces with local transaction managers. Investigation of this topic is beyond the scope of this paper, see <ref> [7, 26] </ref>. 2.3 Homogeneous Federation Architectures We identify five categories of architectures within the homogeneous (light grey) area of the "tightness of coupling" spectrum of Figure 1. <p> Oz's transaction manager was 4 Such code has been separated out in the later OzWeb. 23 developed separately and has been used independent from the rest of Oz. Further details are outside the scope of this paper, see <ref> [26] </ref>. Data Manager This component includes an in-memory object manager that provides uniform object-based access to data from any system component. Objects can be looked up in one of three ways: by structural navigation, by class membership, and by their object-identifier (OID).
Reference: [27] <author> George T. Heineman and Gail E. Kaiser. </author> <title> Integrating a transaction manager component with Process-WEAVER. </title> <type> Technical Report CUCS-012-94, </type> <institution> Columbia University Department of Computer Science, </institution> <month> May </month> <year> 1994. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-012-94.ps.Z. </month>
Reference-contexts: Thus an alternative is that only the Foundation is aware of the various SubEnvs, and picks up their results through some non-intrusive manner, such as understanding file formats of what the PCE considers internal process state information (as done, for example, in <ref> [27, 55] </ref>). This alternative model operates more in the vein of a broadcast message server, such as Field [59], where the only purpose of the Foundation is to forward notification messages that a particular SubEnv has already performed a particular task.
Reference: [28] <author> George T. Heineman and Gail E. Kaiser. </author> <title> An architecture for integrating concurrency control into environment frameworks. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 305-313, </pages> <address> Seattle WA, April 1995. </address> <publisher> ACM Press. ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-021-94.ps.Z. </publisher>
Reference-contexts: We do not consider the distinction between "external" vs. intrinsic code further in this paper, that is the subject of other papers ( [34] and <ref> [28] </ref>, respectively). Process Manager The process manager is the main component of the server. Its frontend subcomponent is the scheduler, which receives requests for service from three entities that correspond to the previously mentioned interconnections, namely local clients, remote clients, and remote servers.
Reference: [29] <author> George T. Heineman and Gail E. Kaiser. </author> <title> The CORD approach to extensible concurrency control. </title> <booktitle> In Thirteenth International Conference on Data Engineering, </booktitle> <address> Birmingham, UK, </address> <month> April </month> <year> 1997. </year> <note> In press. </note> <institution> Available as Columbia University Department of Computer Science CUCS-024-95 and Worcester Polytechnic Institute WPI-CS-TR-96-1. ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-024-95.ps.gz. </institution> <month> 31 </month>
Reference-contexts: The explicitness of the process in PCEs makes it possible to employ semantics-based transaction management <ref> [4, 29] </ref>. Multi-site tasks may modify data from multiple sites, and thus require some kind of global transactional support, such as two-phase commit that interfaces with local transaction managers.
Reference: [30] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chain-ing in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/expert92.ps.Z. </month>
Reference-contexts: This is relatively easy to do with rules, the basis of Oz's process modeling formalism, since process enactment follows automatically determined forward and backward rule chains based on matching a predicate in one rule's condition to an assertion in another rule's effect <ref> [30] </ref>. It does not matter to the rule network construction algorithm whether the rules are included in the local process model or added later via a multi-site Treaty.
Reference: [31] <author> Watts Humphrey and Marc I. Kellner. </author> <title> Software process modeling: </title> <booktitle> Principles of entity process models. In 11th Internation Conference on Software Engineering, </booktitle> <pages> pages 331-342, </pages> <address> Pittsburgh PA, May 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Thus there is no true federation in the sense addressed by this paper. However, some kind of translation facilities are needed as part of any heterogeneous federation: Mentor transforms the heterogeneous process modeling formalisms into StateMate charts <ref> [31] </ref>, but in the case of ProcessWall only process state is translated (or the participating PCEs might be implemented to use a common task format).
Reference: [32] <author> W. Jin, L. Ness, M. Rusinkiewicz, and A. Sheth. </author> <title> Concurrency control and recovery of multi-database work flows in telecommunication applications. </title> <booktitle> In ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 456-459, </pages> <address> Washington DC, </address> <month> May </month> <year> 1993. </year> <journal> Special issue of SIGMOD Record, </journal> <volume> 22:2, </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: Here the process itself is distributed across multiple nodes, where each node is responsible for the execution of its subprocess as well as corresponding tasks. Control flow and synchronization between the process segments is specified locally inside the nodes. Several transactional workflow systems, such as Exotica [1] and Meteor <ref> [32] </ref>, operate in a fully distributed manner | by expressing the workflow implicitly in a network of task managers (which invoke the actual tools) that interact only with their predecessors and successors in the workflow routing. Several issues influence the choice of single-site PCE architecture.
Reference: [33] <author> Gail E. Kaiser, Naser S. Barghouti, and Michael H. Sokolsky. </author> <title> Experience with process modeling in the marvel software development environment kernel. </title> <editor> In Bruce Shriver, editor, </editor> <booktitle> 23rd Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 131-140, </pages> <address> Kona HI, </address> <month> January </month> <year> 1990. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-446-89.ps.gz. </month>
Reference-contexts: Centralized process control and centralized tool execution. This is the simplest case, where both control and execution are carried out by the same component. An all-in-one single-user PCE such as Marvel 2.x <ref> [33] </ref> and some compiled process programs, e.g., written in APPL/A [68], would fit into this class. Even a client/server system might fall into this category if the client supported only the user interface and all process enactment was performed in the server.
Reference: [34] <author> Gail E. Kaiser, Israel Z. Ben-Shaul, Steven S. Popovich, and Stephen E. Dossick. </author> <title> A metalinguistic approach to process enactment extensibility. </title> <editor> In Wilhelm Schafer, editor, </editor> <booktitle> 4th International Conference on the Software Process: Improvement and Practice, </booktitle> <pages> pages 90-101, </pages> <address> Brighton, UK, </address> <month> December </month> <year> 1996. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-016-96.ps.gz. </month>
Reference-contexts: Later on, Oz's native process engine adapted from Marvel was replaced with the Amber process server [54], which provides an API (and "callback" interface), and hardwires neither centralized-process control nor decentralized-tool-execution. Amber itself was not modified at all to produce Oz multi-site functionality, as discussed in <ref> [34] </ref>. 3.1 Marvel and Oz Overview Everything described here about Marvel is also true for Oz unless stated otherwise. Marvel [37] provides a rule-based process modeling language in which a rule generally corresponds to a process step, or task. <p> We do not consider the distinction between "external" vs. intrinsic code further in this paper, that is the subject of other papers ( <ref> [34] </ref> and [28], respectively). Process Manager The process manager is the main component of the server. Its frontend subcomponent is the scheduler, which receives requests for service from three entities that correspond to the previously mentioned interconnections, namely local clients, remote clients, and remote servers. <p> The newer variants of Oz introduce a protocol for transferring instantiated rules between client and server to support delegation to and selection from user and group agendas ("to do" lists) <ref> [34] </ref>. Rules with and without already satisfied conditions may appear in an agenda. These facilities might be combined and extended, again through a translating client interposed between Oz and the Foundation, to support all four points.
Reference: [35] <author> Gail E. Kaiser, Stephen E. Dossick, Wenyu Jiang, and Jack Jingshuang Yang. </author> <title> An architecture for WWW-based hypercode environments. </title> <booktitle> In 1997 International Conference on Software Engineering: Pulling Together, </booktitle> <address> Boston MA, </address> <month> May </month> <year> 1997. </year> <note> In press. </note> <institution> Available as Columbia University Department of Computer Science, CUCS-037-96, </institution> <month> August </month> <year> 1997, </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-037-96.ps.gz. </month>
Reference-contexts: Systems Lab used a multi-site Oz environment to support all our day-to-day software development for about two years, since April 1995, although as of this writing we are transitioning to the OzWeb extension of Oz, which operates over the World Wide Web and supports a hypercode representation of product artifacts <ref> [35] </ref>. 17 chaining to automatically enact other rules whose conditions have become satisfied.
Reference: [36] <author> Gail E. Kaiser and Peter H. Feiler. </author> <title> An architecture for intelligent assistance in software development. </title> <booktitle> In 9th International Conference on Software Engineering, </booktitle> <pages> pages 180-188, </pages> <address> Monterey CA, March 1987. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: One approach to homogeneous PCE federation, where every team runs a component of the same multi-site PCE but enacts a different process, is taken by our Oz PCE [9]. Oz was devised to scale up our earlier Marvel PCE <ref> [36] </ref> to multi-process, multi-team, geographically dispersed software engineering projects. Oz introduces an International Alliance metaphor whereby each team autonomously devises its own local process (supported by a local Oz component that is essentially an extended instance of Marvel), analogous to how each country has its own local customs and laws.
Reference: [37] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <volume> 5(3) </volume> <pages> 40-49, </pages> <month> May </month> <year> 1988. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-401-88.tar.Z. </month>
Reference-contexts: Amber itself was not modified at all to produce Oz multi-site functionality, as discussed in [34]. 3.1 Marvel and Oz Overview Everything described here about Marvel is also true for Oz unless stated otherwise. Marvel <ref> [37] </ref> provides a rule-based process modeling language in which a rule generally corresponds to a process step, or task.
Reference: [38] <author> Gail E. Kaiser, George T. Heineman, Peter D. Skopp, and Jack J. Yang. </author> <title> Incremental process support for code reengineering: An update (Experience Report). </title> <type> Technical Report CUCS-007-96, </type> <institution> Columbia University Department of Computer Science, </institution> <month> February </month> <year> 1996. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-007-96.ps.Z. </month>
Reference-contexts: nothing prevents multiple sites from running on the same LAN, that is, a multi-site PCE or multi-PCE might operate entirely within a single organization or group and each "team" could conceivably consist of only one user (as in the Oz EmeraldCity environment we use to support our own software development <ref> [38] </ref>). <p> This requirement implies a bottom-up approach, which in turn suggests a peer-based architectural style. However, we have constructed both bottom-up (e.g., see [6], Appendix A) and top-down (e.g., see <ref> [38] </ref>) global processes for Oz. Second, Oz was developed (among other reasons) to interconnect instances of the Marvel framework.
Reference: [39] <author> Gail E. Kaiser, Steven S. Popovich, and Israel Z. Ben-Shaul. </author> <title> A bi-level language for software process modeling. </title> <editor> In Walter F. Tichy, editor, </editor> <booktitle> Configuration Management, number 2 in Trends in Software, chapter 2, </booktitle> <pages> pages 39-72. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1994. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-016-92.ps.Z. </month>
Reference-contexts: So difficulties arise only when pending tasks posted through the Foundation involve non-Oz SubEnvs. Fortuitously, we have already shown fairly straightforward mappings from most of the major PCE paradigms, including Petri nets [55], task graphs [25], and grammars <ref> [39] </ref>, into Oz rules, and reverse mappings are not inconceivable. And as previously noted in Section 1, Mentor supports translation from one notation into another, as does the process interchange format standardization effort.
Reference: [40] <author> Simon M. Kaplan, William J. Tolone, Alan M. Carroll, Douglas P. Bogia, and Celsina Bignoli. </author> <title> Supporting collaborative software development with ConversationBuilder. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 11-20, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: mentioned above into a given PCE, and the mechanism for doing so is necessarily ad hoc (i.e., PCE-specific). 15 2.6 Heterogeneous Federation Architectures There are three main categories: * Ad hoc: A handcrafted federation consisting of a very small number of distinct PCEs, e.g., Bull's ACME [2] integration of ConversationBuilder <ref> [40] </ref> and Marvel 3.x. While one might be able to find a special-purpose Foundation component in this or similar examples, we are concerned in this paper with general federation.
Reference: [41] <author> Henry F. Korth. </author> <title> Extending the scope of relational languages. </title> <journal> IEEE Software, </journal> <volume> 3(1) </volume> <pages> 19-28, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: These two requirements are somewhat similar to control and execution autonomy, respectively, in multi-database transaction management <ref> [41] </ref>. The local site autonomy prized in the Oz approach to bottom-up process modeling has also been argued as necessary for top-down modeling: "A participant on a lower level [of the hierarchy] does not want his/her management to know how a task is performed" [62].
Reference: [42] <author> Henry F. Korth. </author> <title> The double life of the transaction abstraction: Fundamental principles and evolving system concepts. </title> <editor> In Umeshwar Dayal, Peter M. D. Gray, and Shojiro Nishio, editors, </editor> <booktitle> 21st International Conference on Very Large Data Bases, </booktitle> <pages> pages 2-6, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year> <type> Invited paper. </type>
Reference-contexts: cached, permanently copied, or migrated between sites. * Another data-related requirement involves support for sophisticated and flexible concurrency control and failure recovery mechanisms due to the long duration of tasks and task segments, interactive control by users, and human-oriented collaboration among tasks and task segments while they are in progress <ref> [42] </ref>. The explicitness of the process in PCEs makes it possible to employ semantics-based transaction management [4, 29]. Multi-site tasks may modify data from multiple sites, and thus require some kind of global transactional support, such as two-phase commit that interfaces with local transaction managers.
Reference: [43] <author> Balachander Krishnamurthy and Naser S. Barghouti. Provence: </author> <title> A process visualization and enactment environment. </title> <editor> In Ian Sommerville and Manfred Paul, editors, </editor> <booktitle> 4th European Conference on Software Engineering, volume 717 of Lecture Notes in Computer Science, </booktitle> <pages> pages 151-160. </pages> <publisher> Springer-Verlag, </publisher> <address> Garmisch-Partenkirchen, Germany, </address> <month> September </month> <year> 1993. </year> <month> 32 </month>
Reference-contexts: This could be augmented with limited process support, as in Forest [20] and Provence <ref> [43] </ref>, to transform notification messages into requests to perform various tasks triggered by process enactment in the Foundation. * When process enactment at one SubEnv involves access to data "owned" by one or more other SubEnvs, the Foundation must provide mechanisms for transferring product artifacts and requisite process state among SubEnvs.
Reference: [44] <institution> Programming Systems Lab. </institution> <note> Darkover Manual, July 1996. ftp://ftp.psl.cs.columbia.edu/pub/psl/oz.1.2.manuals/IV.Darkover API/. </note>
Reference-contexts: A SubEnv is considered active if exactly one server is executing "on the environment", meaning that it has loaded the SubEnv's process, and the SubEnv's objectbase (containing persistent product data and process state) is under the control of the server's data management subsystem (described in <ref> [44] </ref>).
Reference: [45] <author> Jintae Lee, Gregg Yost, </author> <title> and the PIF Working Group. The PIF process interchange format and framework, </title> <month> December </month> <year> 1994. </year> <note> http://www-sloan.mit.edu/ccs/pifmain.html. </note>
Reference-contexts: In any case, heterogeneous federation based on Mentor would probably be quite similar to the ProcessWall model. 4 Process interchange formats <ref> [47, 45] </ref> support translation of a logically single process model into the different representations of distinct process systems, but do not provide any means for collaboration and interoperability during the process enactment by those systems. Thus there is no true federation in the sense addressed by this paper.
Reference: [46] <author> Wenke Lee, Gail E. Kaiser, Paul D. Clayton, and Eric H. Sherman. OzCare: </author> <title> A workflow automation system for care plans. </title> <editor> In James J. Cimino, editor, </editor> <booktitle> 1996 American Medical In-formatics Association Annual Fall Symposium, </booktitle> <pages> pages 577-581, </pages> <address> Washington DC, </address> <month> October </month> <year> 1996. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-012-96.ps.Z. </month>
Reference-contexts: It is simple to construct a special Oz client that receives the same message from the server identifying tool script and arguments but does something different than the typical user client; in fact, we have already introduced numerous such clients (see <ref> [66, 18, 70, 46] </ref>). Then, to implement points 1 and 2, the new client would be inserted into the multi-PCE architecture between the Oz server and the central Foundation. This client would convert the activity information provided into the Foundation's task representation and forward it to the centralized Foundation.
Reference: [47] <institution> Workflow Management Coalition Members. Coalition overview, </institution> <month> September </month> <year> 1995. </year> <note> http://www.aiai.ed.ac.uk/WfMC/overview.html. </note>
Reference-contexts: distribution; and we do not consider completely homogeneous approaches, where even the processes must be identical, or completely heterogeneous approaches, where it is impossible to introduce any sort of run-time integration, and the only possible integration is at definition-time, through a process definition exchange format, e.g., as promoted by WfMC <ref> [47] </ref>. A federated PCE for cross-organization projects should permit each team to specify its own local process model, along with the desired collaboration with other teams through shared subprocesses, tool sets, data subschemas, data instances, etc. <p> In any case, heterogeneous federation based on Mentor would probably be quite similar to the ProcessWall model. 4 Process interchange formats <ref> [47, 45] </ref> support translation of a logically single process model into the different representations of distinct process systems, but do not provide any means for collaboration and interoperability during the process enactment by those systems. Thus there is no true federation in the sense addressed by this paper.
Reference: [48] <author> Michael Baentsch, Georg Molter and Peter Sturm. WebMake: </author> <title> Integrating distributed software development in a structure-enhanced Web. </title> <booktitle> In 3rd International World-Wide Web Conference, </booktitle> <address> Darmstadt, Germany, </address> <month> April </month> <year> 1995. </year> <note> Elsevier Science B.V. http://www.igd.fhg.de/www/www95/proceedings/papers/- 51/WebMake/WebMake.html. </note>
Reference-contexts: One can easily imagine multiple workflows accessing the same tool management resource, particularly if only the tool broker is centralized, directing actual tool invocation to distributed hosts as in WebMake <ref> [48] </ref>. 4. Decentralized process control and decentralized tool execution. Here the process itself is distributed across multiple nodes, where each node is responsible for the execution of its subprocess as well as corresponding tasks. Control flow and synchronization between the process segments is specified locally inside the nodes.
Reference: [49] <editor> Erich Neuhold and Michael Stonebraker (editors). </editor> <booktitle> Future directions in DBMS research. SIGMOD Record, </booktitle> <volume> 18(1) </volume> <pages> 17-26, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: However, the general case requires substantial translation capabilities regarding data formats, and predicates and operations over those formats. The "universal data model" problem is a well-known unresolved, probably unresolvable issue in database research <ref> [49] </ref>.
Reference: [50] <institution> Object Management Group. </institution> <note> http://www.omg.org/. </note>
Reference-contexts: A homogeneous federation can assume a standard data repository, although perhaps with differing local schemas, whereas heterogeneous federations also incur the problems of incompatible data formats; this is basically a distributed computing issue attacked by OMG <ref> [50] </ref> and others through CORBA and similar layers, and not addressed further in this paper. Further, homogeneous federations assume compatible transaction management (concurrency control and failure recovery), generally supporting a two-phase commit protocol for distributed transactions, which may not be straightforward in the heterogeneous case.
Reference: [51] <editor> The common object request broker: </editor> <title> Architecture specification revision 2.0. </title> <type> Technical Report ptc/96-08-04, </type> <institution> Object Management Group, </institution> <month> July </month> <year> 1996. </year> <note> http://www.omg.org/corba/corbiiop.htm. </note>
Reference-contexts: This might be constructed directly on top of TCP/IP sockets, or employ some higher level mechanism such as RPC or CORBA <ref> [51] </ref>.
Reference: [52] <author> Leon J. Osterweil. </author> <title> Presentation at Software Process Architectures Workshop, </title> <month> March </month> <year> 1995. </year>
Reference-contexts: An intelligent scheduler might then be attached to ProcessWall to direct such posted tasks to particular sites, as described in <ref> [52] </ref>, or alternatively ProcessWall might be treated as a "blackboard" (using artificial intelligence terminology [22]) from which the schedulers of the individual PCEs participating in the federation select those tasks they are suited to perform.
Reference: [53] <author> Burkhard Peuschel and Stefan Wolf. </author> <title> Architectural support for distributed process centered software development environments. </title> <editor> In Wilhelm Schafer, editor, </editor> <booktitle> 8th International Software Process Workshop: State of the Practice in Process Technology, </booktitle> <pages> pages 126-128, </pages> <address> Wadern, Germany, </address> <month> March </month> <year> 1993. </year> <note> Position paper. </note>
Reference-contexts: Note these are not the same classes suggested by Peuschel and Wolf <ref> [53] </ref> and we follow a different classification scheme: Peuschel and Wolf were concerned with the relationship between the process engine and the data repository, whereas we consider process control vs. tool (or task) execution. 1. Centralized process control and centralized tool execution. <p> PCEs with no data integration facilities might be fully distributed in an easier manner. Note, however, that full distribution of process enactment is not incompatible with sharing a centralized data repository; see <ref> [53] </ref>. Another characteristic that impacts the choice of local PCE architecture is whether the process modeling paradigm employed by the PCE is reactive or proactive (termed proscription vs. prescription by Heimbigner in [23]).
Reference: [54] <author> Steven S. Popovich. </author> <title> An Architecture for Extensible Workflow Process Servers. </title> <type> PhD thesis, </type> <institution> Columbia University Department of Computer Science, </institution> <month> January </month> <year> 1997. </year> <note> CUCS-014-96. ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-014-96.ps.gz. </note>
Reference-contexts: Since Marvel's client/server architecture corresponds to the centralized-process-control, decentralized-tool-execution local architecture, and Marvel's process engine provided no API and the source code was handy, it was natural to adopt a direct peer-to-peer approach. Later on, Oz's native process engine adapted from Marvel was replaced with the Amber process server <ref> [54] </ref>, which provides an API (and "callback" interface), and hardwires neither centralized-process control nor decentralized-tool-execution. Amber itself was not modified at all to produce Oz multi-site functionality, as discussed in [34]. 3.1 Marvel and Oz Overview Everything described here about Marvel is also true for Oz unless stated otherwise.
Reference: [55] <author> Steven S. Popovich and Gail E. Kaiser. </author> <title> Integrating an existing environment with a rule-based process server. </title> <type> Technical Report CUCS-004-95, </type> <institution> Columbia University Department of Computer Science, </institution> <month> August </month> <year> 1995. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-004-95.ps.Z. </month>
Reference-contexts: Thus an alternative is that only the Foundation is aware of the various SubEnvs, and picks up their results through some non-intrusive manner, such as understanding file formats of what the PCE considers internal process state information (as done, for example, in <ref> [27, 55] </ref>). This alternative model operates more in the vein of a broadcast message server, such as Field [59], where the only purpose of the Foundation is to forward notification messages that a particular SubEnv has already performed a particular task. <p> So difficulties arise only when pending tasks posted through the Foundation involve non-Oz SubEnvs. Fortuitously, we have already shown fairly straightforward mappings from most of the major PCE paradigms, including Petri nets <ref> [55] </ref>, task graphs [25], and grammars [39], into Oz rules, and reverse mappings are not inconceivable. And as previously noted in Section 1, Mentor supports translation from one notation into another, as does the process interchange format standardization effort.
Reference: [56] <institution> Programming Systems Laboratory. Oz 1.2 Manual Set, </institution> <month> July </month> <year> 1996. </year> <institution> Columbia University Department of Computer Science. ftp.psl.cs.columbia.edu/pub/psl/oz.1.2.manuals. </institution>
Reference-contexts: All of these tailorings are stored in environment-specific files; see <ref> [56] </ref> for details. The conceptually "external" code is hardwired into Oz's data manager 4 , reasonably independent and invoked through a callback interface in the case of the process manager, and completely independent and dynamically loaded for the transaction manager.
Reference: [57] <author> Calton Pu. </author> <title> Superdatabases for composition of heterogeneous databases. </title> <editor> In Amar Gupta, editor, </editor> <booktitle> Integration of Information Systems: Bridging Heterogeneous Databases, </booktitle> <pages> pages 150-157. </pages> <publisher> IEEE Press, </publisher> <year> 1989. </year> <booktitle> Also appeared in 4th International Conference on Data Engineering, </booktitle> <address> Los Angeles CA, </address> <year> 1988. </year>
Reference-contexts: Top-down refers to a process broken down through multiple levels of granularity each corresponding to subsequently smaller organization units, as in the enterprise-level to campus-level to department-level to group-level of the Corporation metaphor [65]; this is analogous to a global transaction in federated databases <ref> [57] </ref>.
Reference: [58] <editor> Sudha Ram, editor. </editor> <booktitle> Special Issue on Heterogeneous Distributed Database Systems, volume 24:12 of Computer. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1991. </year>
Reference-contexts: The database community has also delineated an intermediate range, often termed "federated databases" <ref> [64, 58] </ref>.
Reference: [59] <author> Steven P. Reiss. </author> <title> THE FIELD PROGRAMMING ENVIRONMENT: A Friendly Integrated Environment for Learning and Development. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: This alternative model operates more in the vein of a broadcast message server, such as Field <ref> [59] </ref>, where the only purpose of the Foundation is to forward notification messages that a particular SubEnv has already performed a particular task.
Reference: [60] <author> Wilhelm Schafer, </author> <title> editor. </title> <booktitle> 4th International Conference on the Software Process, </booktitle> <address> Brighton, UK, December 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: We are concerned in this paper with the subclass of SDEs known as process-centered environments (PCEs) <ref> [60, 13] </ref>. In general, a PCE is a generic environment framework, or kernel, intended to be parameterized by a process model that defines the software development process for a specific instance of the environment.
Reference: [61] <author> Wilhelm Schafer, Burkhard Peuschel, and Stefan Wolf. </author> <title> A knowledge-based software development environment supporting cooperative work. </title> <journal> International Journal on Software Engineering & Knowledge Engineering, </journal> <volume> 2(1) </volume> <pages> 79-106, </pages> <month> March </month> <year> 1992. </year> <month> 33 </month>
Reference-contexts: Decentralized process control and centralized tool execution. Control is distributed among multiple process servers, where the tool execution function is supported by a single component. This model supports separate process engines for each user | as in Endeavors [14] or Merlin <ref> [61] </ref> | while sharing special computational or database resources used in tool invocation. One can easily imagine multiple workflows accessing the same tool management resource, particularly if only the tool broker is centralized, directing actual tool invocation to distributed hosts as in WebMake [48]. 4.
Reference: [62] <author> Friedemann Schwenkreis. </author> <title> Workflow for the German Federal Government. </title> <booktitle> In NSF Workshop on Work--flow and Process Automation in Information Systems: State-of-the-Art and Future Directions, </booktitle> <pages> pages 64-68, </pages> <address> Athens GA, </address> <month> May </month> <year> 1996. </year> <note> Position paper. </note>
Reference-contexts: The local site autonomy prized in the Oz approach to bottom-up process modeling has also been argued as necessary for top-down modeling: "A participant on a lower level [of the hierarchy] does not want his/her management to know how a task is performed" <ref> [62] </ref>. <p> assume that SubEnvs have some means to inform the Foundation of pending tasks that they are unable or unwilling to do themselves: The Foundation could itself impose all tasks, perhaps through a special process modeling and enactment system intended to act as a "global hand" supporting some form of "superworkflow" <ref> [62] </ref>, analogous to multi-part transactions submitted to heterogeneous multi-databases. In principle, it might be plausible for a SubEnv to perform work on behalf of a federation without ever noticing that the heterogeneous federation exists (which would not normally be the case for homogeneous federations). <p> The application of event subscription to workflow management system interoperability is suggested in <ref> [62] </ref>. 4.
Reference: [63] <author> Amit Sheth, Dimitrios Georgakopoulos, Stef M.M. Joosten, Marek Rusinkiewicz, Walt Scacchi, Jack Wileden, and Alexander Wolf. </author> <title> Report from the NSF workshop on workflow and process automation in information systems. </title> <type> Technical Report UGA-CS-TR-96-003, </type> <institution> University of Georgia Department of Computer Science, </institution> <month> October </month> <year> 1996. </year> <note> http://lsdis.cs.uga.edu/activities/NSF-workflow/final-report-cover.html/test.html. </note>
Reference-contexts: Note Mentor is a workflow management system intended for business applications, not a PCE oriented towards software engineering; whether there is any fundamental difference between workflow and process is a matter of some debate <ref> [63] </ref>, but we blur the distinction in this paper.
Reference: [64] <author> Amit P. Sheth and James A. Larson. </author> <title> Federated database systems for managing distributed, heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 183-236, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The database community has also delineated an intermediate range, often termed "federated databases" <ref> [64, 58] </ref>.
Reference: [65] <author> Izhar Shy, Richard Taylor, and Leon Osterweil. </author> <title> A metaphor and a conceptual framework for software development environments. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 77-97, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. </note>
Reference-contexts: Top-down refers to a process broken down through multiple levels of granularity each corresponding to subsequently smaller organization units, as in the enterprise-level to campus-level to department-level to group-level of the Corporation metaphor <ref> [65] </ref>; this is analogous to a global transaction in federated databases [57].
Reference: [66] <author> Peter D. Skopp. </author> <title> Low bandwidth operation in a multi-user software development environment. </title> <type> Master's thesis, </type> <institution> Columbia University Department of Computer Science, </institution> <month> December </month> <year> 1995. </year> <note> CUCS-035-95. ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-035-95.ps.Z. </note>
Reference-contexts: Oz local sites are somewhere in between, with one server per site (i.e., per team), generally employing user clients as in Marvel 3.x but also supporting "proxy clients" that run tools 6 on behalf of one or more users under various circumstances, as explained in <ref> [70, 66] </ref>. Mentor is similar to Oz in that user clients can connect to multiple process servers in the federation. 3. Decentralized process control and centralized tool execution. Control is distributed among multiple process servers, where the tool execution function is supported by a single component. <p> It is simple to construct a special Oz client that receives the same message from the server identifying tool script and arguments but does something different than the typical user client; in fact, we have already introduced numerous such clients (see <ref> [66, 18, 70, 46] </ref>). Then, to implement points 1 and 2, the new client would be inserted into the multi-PCE architecture between the Oz server and the central Foundation. This client would convert the activity information provided into the Foundation's task representation and forward it to the centralized Foundation. <p> Thus Oz user clients could not continue to assume a shared network file system for accessing objectbase file attributes and communication bandwidth may become a concern, issues already addressed to a limited extent for our Oz "low bandwidth clients" in <ref> [66] </ref>. Acknowledgments We would like to thank Steve Dossick, George Heineman, Wenyu Jiang, Wenke Lee, Steve Linde, Steve Popovich, Peter Skopp, Jack Jingshuang Yang and Sonny Xi Ye for their various work on Oz, Amber and the replacement of Oz's native process engine by Amber.
Reference: [67] <author> Peter D. Skopp and Gail E. Kaiser. </author> <title> Disconnected operation in a multi-user software development environment. </title> <editor> In Bharat Bhargava, editor, </editor> <booktitle> IEEE Workshop on Advances in Parallel and Distributed Systems, </booktitle> <pages> pages 146-151, </pages> <address> Princeton NJ, </address> <month> October </month> <year> 1993. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-026-93.ps.Z. </month>
Reference-contexts: is automatically started up on demand by the Connection Server, as will be explained shortly). 3 An extension of this model, in which clients can be disconnected from their server and continue to operate independently to enact a process segment until reconnection, has been investigated separately to support mobile computing <ref> [67] </ref>. 21 22 3.2.1 The Environment Server The server consists of three major components: process, transaction and data managers, each of which can be separately tailored by a combination of two facilities: declarative definitions loaded from a file and "external" code modules.
Reference: [68] <author> Stanley M. Sutton, Jr., Dennis Heimbigner, and Leon J. Osterweil. APPL/A: </author> <title> A language for software process programming. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 4(3) </volume> <pages> 221-286, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Centralized process control and centralized tool execution. This is the simplest case, where both control and execution are carried out by the same component. An all-in-one single-user PCE such as Marvel 2.x [33] and some compiled process programs, e.g., written in APPL/A <ref> [68] </ref>, would fit into this class. Even a client/server system might fall into this category if the client supported only the user interface and all process enactment was performed in the server.
Reference: [69] <author> Andrew Z. Tong, Gail E. Kaiser, and Steven S. Popovich. </author> <title> A flexible rule-chaining engine for process-based software engineering. </title> <booktitle> In 9th Knowledge-Based Software Engineering Conference, </booktitle> <pages> pages 79-88, </pages> <address> Monterey CA, September 1994. </address> <publisher> IEEE Computer Society Press. ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-005-94.ps.Z. </publisher>
Reference-contexts: Later versions of Oz can delegate an entire rule or (rest of a) rule chain to a specific user or any group member via "guidance chaining", a form of forward chaining where the next rule in the chain is placed in an agenda rather than immediately enacted <ref> [69] </ref>. How another PCE might designate a user to perform tasks originally instantiated by Oz is of course open-ended. 28 5 Contributions and Future Directions The main contributions of this work are: * The elaboration of requirements and architectures for homogeneous and heterogeneous federations of process-centered environments.
Reference: [70] <author> Giuseppe Valetto and Gail E. Kaiser. </author> <title> Enveloping sophisticated tools into process-centered environments. </title> <journal> Journal of Automated Software Engineering, </journal> <volume> 3 </volume> <pages> 309-345, </pages> <year> 1996. </year> <month> ftp://ftp.psl.cs.columbia.edu/pub/psl/CUCS-022-95.ps.gz. </month>
Reference-contexts: Oz local sites are somewhere in between, with one server per site (i.e., per team), generally employing user clients as in Marvel 3.x but also supporting "proxy clients" that run tools 6 on behalf of one or more users under various circumstances, as explained in <ref> [70, 66] </ref>. Mentor is similar to Oz in that user clients can connect to multiple process servers in the federation. 3. Decentralized process control and centralized tool execution. Control is distributed among multiple process servers, where the tool execution function is supported by a single component. <p> It is simple to construct a special Oz client that receives the same message from the server identifying tool script and arguments but does something different than the typical user client; in fact, we have already introduced numerous such clients (see <ref> [66, 18, 70, 46] </ref>). Then, to implement points 1 and 2, the new client would be inserted into the multi-PCE architecture between the Oz server and the central Foundation. This client would convert the activity information provided into the Foundation's task representation and forward it to the centralized Foundation.
Reference: [71] <author> Kurt Wallnau, Fred Long, and Anthony Earl. </author> <title> Toward a distributed, mediated architecture for workflow management. </title> <booktitle> In NSF Workshop on Workflow and Process Automation in Information Systems: State-of-the-Art and Future Directions, </booktitle> <pages> pages 74-84, </pages> <address> Athens GA, </address> <month> May </month> <year> 1996. </year> <note> Position paper. </note>
Reference-contexts: Instead, a new moderator component is attached to the SubEnv as a whole and communicates with each of the other local components as well as with its peer moderators. However, a direct-peer-to-peer architecture is not inconceivable for decentralized SubEnvs; see <ref> [71] </ref>. To summarize, the above categories represent different degrees of (de)centralization of the Foundation, ranging from a logically and physically centralized architecture, to several forms of logically and physically decentralized architectures with variations in the coupling between and within SubEnvs. <p> Both the homogeneous and heterogeneous federation architectures we present are in line with a proposed distributed workflow reference model <ref> [71] </ref>. * The design and realization of a specific homogeneous federation architecture for Oz. * A presentation of the issues that must be addressed to integrate Oz into a heterogeneous federation based on the ProcessWall process state/task server (or Mentor worklist/history manager) approach.
Reference: [72] <author> Jeanine Weissenfels, Dirk Wodtke, Gerhard Weikum, and Angelika Kotz-Dittrich. </author> <title> The Mentor architecture for enterprise-wide workflow management. </title> <booktitle> In NSF Workshop on Workflow and Process Automation in Information Systems: State-of-the-Art and Future Directions, </booktitle> <pages> pages 69-73, </pages> <address> Athens GA, </address> <month> May </month> <year> 1996. </year> <note> Position paper. 34 </note>
Reference-contexts: Any sharing of software product artifacts, as opposed to process state, is implicit in the data information included with posted tasks. As in Oz, each site might autonomously devise its own process model. Mentor <ref> [72] </ref> is similar to ProcessWall but divides the process state/task server into two components: a worklist manager acting as a pure task server and a history manager corresponding to a pure state server; data sharing is factored out as in ProcessWall.
References-found: 72

