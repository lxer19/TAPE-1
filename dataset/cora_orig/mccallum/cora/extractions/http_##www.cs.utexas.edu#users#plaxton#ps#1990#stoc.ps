URL: http://www.cs.utexas.edu/users/plaxton/ps/1990/stoc.ps
Refering-URL: http://www.cs.utexas.edu/users/plaxton/html/abc.html
Root-URL: 
Title: Deterministic Sorting in Nearly Logarithmic Time on the Hypercube and Related Computers  
Author: Robert Cypher C. Greg Plaxton 
Note: O(log 2 n) time.  
Address: 650 Harry Rd. 545 Technology Square San Jose, CA 95120 Cambridge, MA 02139  
Affiliation: IBM Almaden Research Center MIT Lab for Computer Science  
Abstract: This paper presents a deterministic sorting algorithm, called Sharesort, that sorts n records on an n processor hypercube, shu*e-exchange or cube-connected cycles in O(log n(log log n) 2 ) time in the worst case. The algorithm requires only a constant amount of storage at each processor. The fastest previous deterministic algorithm for this problem was bitonic sort [3], which runs in 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> Sorting in c log n parallel steps. </title> <journal> Combinatorica, </journal> <volume> 3 </volume> <pages> 1-19, </pages> <year> 1983. </year>
Reference-contexts: More recently, Leighton [6] exhibited a bounded-degree, O (log n) time sorting network based on the O (log n) depth sorting circuit of Ajtai, Komlos and Szemeredi <ref> [1] </ref>. However, no efficient emulation of Leighton's sorting network is known for the hypercube, and it has been shown that such an emulation requires (log 2 n) time on the SE or CCC [5].
Reference: [2] <author> A. D. Aleksandrov, A. N. Kolmogorov, and M. A. Lavrent'ev. </author> <title> Mathematics: Its Content, Methods and Meaning. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1963. </year>
Reference-contexts: For each record x in S, let Level (x) denote the level of the processor in which x was originally located. Let p be the smallest prime between 2 c and 2 c+1 . Note that p is guaranteed to exist <ref> [2] </ref>. Calculate p by comparing each integer between 2 c and 2 c+1 with all smaller positive integers and testing for divisibility. Implementation: broadcast, divide, prefix operations. Running time: O (a). 3. For i = 0 to d, do the following.
Reference: [3] <author> K. E. Batcher. </author> <title> Sorting networks and their applications. </title> <booktitle> In Proceedings of the AFIPS Spring Joint Computer Conference, </booktitle> <volume> vol. 32, </volume> <pages> pages 307-314, </pages> <year> 1968. </year>
Reference-contexts: 1 Introduction Given n records distributed uniformly over the n processors of some fixed interconnection network, the sorting problem is to route the record with the ith largest associated key to processor i, 0 i &lt; n. One of the earliest parallel sorting algorithms is Batcher's bitonic sort <ref> [3] </ref>, which runs in O (log 2 n) time on the hypercube, shu*e-exchange (SE) [14] and cube-connected cycles (CCC) [11]. More recently, Leighton [6] exhibited a bounded-degree, O (log n) time sorting network based on the O (log n) depth sorting circuit of Ajtai, Komlos and Szemeredi [1].
Reference: [4] <author> R. E. Cypher. </author> <title> Efficient Communication in Massively Parallel Computers. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Washington, </institution> <address> Seattle, WA, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: However, it has been shown that this complication can be managed in time proportional to the running time of the SE implementation <ref> [4] </ref>. The following technical lemma will be useful in analyzing the running times of several subroutines. Lemma 2.1 Let a, b and * be constants where a 0, b &gt; 0 and 0 &lt; * 1=2.
Reference: [5] <author> R. E. Cypher. </author> <title> Theoretical aspects of VLSI pin limitations. </title> <journal> SIAM J. Comput., </journal> <volume> 22 </volume> <pages> 58-63, </pages> <year> 1993. </year> <month> 10 </month>
Reference-contexts: However, no efficient emulation of Leighton's sorting network is known for the hypercube, and it has been shown that such an emulation requires (log 2 n) time on the SE or CCC <ref> [5] </ref>. Hence, for these networks, the problem of closing the gap between the trivial (log n) lower bound and the O (log 2 n) upper bound remained open.
Reference: [6] <author> F. T. Leighton. </author> <title> Tight bounds on the complexity of parallel sorting. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-34:344-354, </volume> <year> 1985. </year>
Reference-contexts: One of the earliest parallel sorting algorithms is Batcher's bitonic sort [3], which runs in O (log 2 n) time on the hypercube, shu*e-exchange (SE) [14] and cube-connected cycles (CCC) [11]. More recently, Leighton <ref> [6] </ref> exhibited a bounded-degree, O (log n) time sorting network based on the O (log n) depth sorting circuit of Ajtai, Komlos and Szemeredi [1].
Reference: [7] <author> D. Nassimi and S. Sahni. </author> <title> Data broadcasting in SIMD computers. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30:101-107, </volume> <year> 1981. </year>
Reference-contexts: Each record has associated with it a destination address in the range 0 through n 1, with the restriction that the destination addresses form a monotonically increasing sequence. The monotonic routing algorithm sends each of the m records to its destination address within the array <ref> [7] </ref>. <p> Bit-Permute-Complement (BPC) routing performs a permutation of n records where the destination addresses are calculated by permuting and complementing the bits of the source addresses [8]. Broadcasting copies a record from one processor to all n processors <ref> [7] </ref>. Bitonic merging is the basic operation underlying Batcher's bitonic sort. Given two sorted lists, each of length at most n, this operation merges them into a single sorted list. A BPC route must be used to reverse one of the two lists before the merge can be performed.
Reference: [8] <author> D. Nassimi and S. Sahni. </author> <title> A self routing Benes network and parallel permutation algorithms. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30:332-340, </volume> <year> 1981. </year>
Reference-contexts: Bit-Permute-Complement (BPC) routing performs a permutation of n records where the destination addresses are calculated by permuting and complementing the bits of the source addresses <ref> [8] </ref>. Broadcasting copies a record from one processor to all n processors [7]. Bitonic merging is the basic operation underlying Batcher's bitonic sort. Given two sorted lists, each of length at most n, this operation merges them into a single sorted list.
Reference: [9] <author> D. Nassimi and S. Sahni. </author> <title> Parallel algorithms to set up the Benes permutation network. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31:148-154, </volume> <year> 1982. </year>
Reference-contexts: Consider the performance obtained by applying known methods to this problem. Bitonic sort gives a solution with T p = 0 and T r = O (log 2 n). Using Nassimi and Sahni's parallel algorithm to set up the Benes permutation network <ref> [9] </ref> yields a solution with T p = O (log 3 n) and T r = O (log n).
Reference: [10] <author> D. Nassimi and S. Sahni. </author> <title> Parallel permutation and sorting algorithms and a new generalized connection network. </title> <journal> JACM, </journal> <volume> 29 </volume> <pages> 642-667, </pages> <year> 1982. </year>
Reference-contexts: The cost of these monotonic routes is O (d 0 ). Sparse enumeration sort is a useful sorting technique for the case when the number of records to be sorted, n, is much smaller than the number of processors available, p <ref> [10] </ref>. Sparse enumeration sort runs in O (log n log p= log (p=n)) time. 2.4 Time Analysis When implementing Sharesort on a hypercube computer, the running time can be calculated by simply adding together the running times of the subroutines from which it is composed.
Reference: [11] <author> F. P. Preparata and J. Vuillemin. </author> <title> The cube-connected cycles: A versatile network for parallel computation. </title> <journal> Communications of the ACM, </journal> <volume> 24 </volume> <pages> 300-309, </pages> <year> 1981. </year>
Reference-contexts: One of the earliest parallel sorting algorithms is Batcher's bitonic sort [3], which runs in O (log 2 n) time on the hypercube, shu*e-exchange (SE) [14] and cube-connected cycles (CCC) <ref> [11] </ref>. More recently, Leighton [6] exhibited a bounded-degree, O (log n) time sorting network based on the O (log n) depth sorting circuit of Ajtai, Komlos and Szemeredi [1].
Reference: [12] <author> J. H. Reif and L. G. Valiant. </author> <title> A logarithmic time sort for linear size networks. </title> <journal> JACM, </journal> <volume> 34 </volume> <pages> 60-76, </pages> <year> 1987. </year>
Reference-contexts: Hence, for these networks, the problem of closing the gap between the trivial (log n) lower bound and the O (log 2 n) upper bound remained open. A noteworthy breakthrough was provided by the randomized Flashsort algorithm of Reif and Valiant <ref> [12] </ref>, which sorts every possible input per fl Supported in part by an NSF graduate fellowship y Supported by an NSERC postdoctoral fellowship, and DARPA contracts N00014-87-K-825 and N00014-89-J-1988. mutation with high probability in O (log n) time on a CCC.
Reference: [13] <author> J. T. Schwartz. </author> <title> Ultracomputers. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 2 </volume> <pages> 484-521, </pages> <year> 1980. </year>
Reference-contexts: and an array A = A 0 ; A 1 ; : : : ; A n1 , and return the n values ff (A 0 ; ff (A 1 ; ff (A 2 ; : : :; ff (A i1 ; A i )))) where 0 i &lt; n <ref> [13] </ref>. One special type of prefix operation is the segmented prefix operation in which the input array A is divided into groups of adjacent elements and a prefix operation is applied in parallel within each of the groups.
Reference: [14] <author> H. S. Stone. </author> <title> Parallel processing with the perfect shu*e. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-20:153-161, </volume> <year> 1971. </year>
Reference-contexts: One of the earliest parallel sorting algorithms is Batcher's bitonic sort [3], which runs in O (log 2 n) time on the hypercube, shu*e-exchange (SE) <ref> [14] </ref> and cube-connected cycles (CCC) [11]. More recently, Leighton [6] exhibited a bounded-degree, O (log n) time sorting network based on the O (log n) depth sorting circuit of Ajtai, Komlos and Szemeredi [1].
Reference: [15] <author> E. Upfal. </author> <title> An O(log N ) deterministic packet-routing scheme. </title> <journal> JACM, </journal> <volume> 39 </volume> <pages> 55-70, </pages> <year> 1992. </year> <month> 11 </month>
Reference-contexts: An O (log n log log n) time, O (1) storage sorting algorithm for sorting n= log n records on an n processor multibutterfly computer, as defined by Up fal <ref> [15] </ref>.
References-found: 15

