URL: http://www.cs.jhu.edu/~dmehra/Modeling/report.ps
Refering-URL: http://www.cs.jhu.edu/~dmehra/graphics.html
Root-URL: http://www.cs.jhu.edu
Title: Brain Cortical Surface Editor  
Author: by Mehra Divya V 
Date: 1998  
Affiliation: Department of Computer Science The Johns Hopkins University  
Abstract-found: 0
Intro-found: 1
Reference: [CVMea] <author> J Cohen, A Varshney, D Manocha, and et al. </author> <title> Simplification envelopes. </title> <booktitle> Proceedings of SIGGRAPH 96, </booktitle> <pages> pages 119-128. </pages>
Reference-contexts: So the envelopes are computed beforehand and fed as input to the modeler. Envelope computation has, therefore, also been developed as stand-alone application in this project. In the next section the algorithm for envelope computation is presented. Ideas from <ref> [CVMea] </ref> are used. Section 3.2 discusses self- intersection detection as a special case of envelope computation. Important results of this test on the meshes computed using the GVF method [XP98] by Dr.
Reference: [WND97] <author> M Woo, J Neider, and T Davis. </author> <title> OpenGL Programming Guide Second Edition. </title> <publisher> Addison Wesley Developers Press, </publisher> <year> 1997. </year>
Reference-contexts: I designed and implemented this "cortical surface editor" as my summer research in the Image Analysis and Communications Laboratory. The modeler was implemented in C using OpenGL <ref> [WND97] </ref> on a Silicon Graphics Indigo2 workstation with 288 MB Memory. 1.1 Ob jectives The cortical surface editor was required to support the following functionalities: * Creating and displaying the sagittal, coronal and axial views of the brain. <p> For this, we use the concept of selection and picking in OpenGL <ref> [WND97] </ref>.
Reference: [XP98] <author> C Xu and J Prince. Snakes, </author> <title> shapes and gradient vector flow. </title> <journal> IEEE Transactions on Image Processing, </journal> <pages> pages 359-369, </pages> <month> March </month> <year> 1998. </year> <month> 29 </month>
Reference-contexts: The big advantage of these methods is the wealth of information that can be obtained in a "non-invasive" manner that is without performing any surgical procedures on the patient. As part of their brain imaging research, Dr. Prince's group has devised a "gradient vector flow" method <ref> [XP98] </ref> to obtain a mesh representation of the brain surface from MRI data. It was needed to verify the efficacy of this technique. <p> This volume data is obtained by Magnetic Resonance Imaging (MRI) of the brain. In fact, the mesh T was computed from this MRI data by a "gradient vector flow" method <ref> [XP98] </ref>. We organize this volume data along each of X, Y and Z directions, as a preprocessing step. Then the slice corresponding to any plane parallel to the X, Y or the Z axis can be displayed quickly. The corresponding contour is drawn over this slice. <p> In the next section the algorithm for envelope computation is presented. Ideas from [CVMea] are used. Section 3.2 discusses self- intersection detection as a special case of envelope computation. Important results of this test on the meshes computed using the GVF method <ref> [XP98] </ref> by Dr. Prince's group are presented. 3.1 The Algorithm Given a non self-intersecting triangular mesh, we are required to compute the upper and lower envelopes of the mesh subject to the constraint that these envelopes do not self-intersect. <p> I ran the self-intersection test on the brain mesh shown in the Chapter 2. This mesh was computed using the GVF method in <ref> [XP98] </ref>. There were self-intersections detected! In figure 3.1, the regions where the self-intersections were detected are shown (using IBM data-explorer). Figure 3.2 shows a magnified view of the region marked in Figure 3.1. These results will help the Prince group to review the method/code used to create the meshes.
References-found: 3

