URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/94-16.ps.Z
Refering-URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/README.html
Root-URL: 
Email: cai@cs.buffalo.edu  
Title: Computing Jordan Normal Forms Exactly for Commuting Matrices in Polynomial Time  
Author: Jin-yi Cai 
Address: Buffalo, NY 14260  
Affiliation: Department of Computer Science SUNY at Buffalo  
Abstract: We prove that the Jordan Normal Form of a rational matrix can be computed exactly in polynomial time. We obtain the transformation matrix and its inverse exactly, and we show how to apply the basis transformation to any commuting matrices.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Ar, and J. Cai, </author> <title> Reliable Benchmarks Using Numerical Instability, </title> <booktitle> in the Proceedings of SIAM-ACM Annual Symposium on Discrete Algorithms, (SODA), </booktitle> <year> 1994. </year>
Reference-contexts: The second motivation is concerned with the design and analysis of uncheatable benchmarks for numerical algorithms, especially matrix multiplication <ref> [3, 1] </ref>. Our problem is the following. <p> Several concrete schemes were proposed for different benchmarks: speed of the processor, memory capacity, sorting, etc. They are "uncheatable", if certain complexity theory assumptions are true based on the hardness of factoring and discrete logarithm. In <ref> [1] </ref>, a novel idea was presented, which uses numerical instability as an alternative basis for designing uncheatable benchmarks. An uncheatable benchmark was designed for matrix multiplication based on numerical instability associated with computing the JNF. <p> On the other hand, even though we show that the JNF can be computed in polynomial time, the speed is still far from competitive with numerical computing, such as Q-R iteration, and therefore, our uncheatable benchmark in <ref> [1] </ref> appears to be secure. 2 Computing a basis change for the Jordan form In this section, we show how to compute a basis change in polynomial time, such that the matrix A will have its Jordan normal form, J A = T 1 AT .
Reference: [2] <author> M. Beaudry, </author> <title> Membership testing in commutative transformation semigroups, </title> <journal> Information and Computation, </journal> <volume> Vol 79 (1988), </volume> <pages> 84-93. </pages>
Reference: [3] <author> J. Cai, R. J. Lipton, R. Sedgewick and A. Yao, </author> <title> Towards Uncheatable Benchmarks, </title> <booktitle> In the Proceedings of The Structure in Complexity Theory Conference, </booktitle> <year> (1993) </year> <month> 2-11. </month>
Reference-contexts: The second motivation is concerned with the design and analysis of uncheatable benchmarks for numerical algorithms, especially matrix multiplication <ref> [3, 1] </ref>. Our problem is the following. <p> We hope that the techniques developed here can be generalized to solve this general case. Our second motivation for this work is a more practical one. In <ref> [3] </ref>, this author and others have initiated a study of uncheatable benchmarks. Benchmarks have been used to test everything from the speed of a processor, to the access time, capacity, and bandwidth of a memory system. <p> In <ref> [3] </ref> we proposed a framework based on modern cryptography and complexity theory, in which we can address questions such as how one can make benchmarks resistant to tampering and hence more trustworthy. Several concrete schemes were proposed for different benchmarks: speed of the processor, memory capacity, sorting, etc.
Reference: [4] <author> J. Cai, Richard J. Lipton, and Yechezkel Zalcstein, </author> <title> The Complexity of the A B C Problem Resolved, </title> <type> manuscript. </type>
Reference-contexts: 1 Introduction There are two motivations for this work on computing the Jordan Normal Form of a rational matrix exactly. The first is related to the resolution of the complexity of the A B C problem <ref> [4] </ref>, and its application to the complexity problem in finitely generated commutative linear groups and semigroups in general. The second motivation is concerned with the design and analysis of uncheatable benchmarks for numerical algorithms, especially matrix multiplication [3, 1]. Our problem is the following. <p> In <ref> [4] </ref>, the complexity of the A B C problem was resolved. It was shown that the A B C problem can also be solved in polynomial time. In solving this problem, we made extensive use of the computability of the JNF of a rational matrices in polynomial time. <p> Then clearly, we must have X = Y , a contradiction. In fact this failure of simultaneous Jordanization is one of the main difficulties in the A B C problem <ref> [4] </ref>. We will settle for the more modest goal of putting one of the matrices in JNF, while computing the transformed forms of the other commuting matrices exactly. 9 3.2 Computing T 1 BT Now we show how to get T 1 BT .
Reference: [5] <author> G. E. Collins, </author> <title> Subresultants and reduced polynomial remainder sequences, </title> <journal> J. ACM, </journal> <volume> 14, 1 (1967). </volume> <pages> 128-142. </pages>
Reference-contexts: There are quite some subtleties involved in the Euclidean algorithm, as well as linear equation solving, in P-time. We need to ensure that no coefficient gets too large, For that one has to repeatedly reduce the coefficients. See <ref> [5, 7, 6] </ref>. It is known from the work of Collins and Kannan that generalized gcd as well as linear space computations such as null space rank, basis, dimension over Q can all be computed in P-time in terms of bit complexity.
Reference: [6] <author> D.E. Knuth, </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> vol 2, </volume> <publisher> Addison-Wesley, </publisher> <address> 2nd Edition, </address> <year> 1981. </year>
Reference-contexts: There are quite some subtleties involved in the Euclidean algorithm, as well as linear equation solving, in P-time. We need to ensure that no coefficient gets too large, For that one has to repeatedly reduce the coefficients. See <ref> [5, 7, 6] </ref>. It is known from the work of Collins and Kannan that generalized gcd as well as linear space computations such as null space rank, basis, dimension over Q can all be computed in P-time in terms of bit complexity.
Reference: [7] <author> R. Kannan, </author> <title> The size of numbers in the analysis of certain algorithms, </title> <publisher> PH. </publisher> <address> D. </address> <institution> Dissertation, Operations Research Dept., Cornell University, </institution> <address> Ithaca, NY. </address> <year> 1980. </year>
Reference-contexts: There are quite some subtleties involved in the Euclidean algorithm, as well as linear equation solving, in P-time. We need to ensure that no coefficient gets too large, For that one has to repeatedly reduce the coefficients. See <ref> [5, 7, 6] </ref>. It is known from the work of Collins and Kannan that generalized gcd as well as linear space computations such as null space rank, basis, dimension over Q can all be computed in P-time in terms of bit complexity.
Reference: [8] <author> R. Kannan and R. Lipton, </author> <title> The orbit problem is decidable, </title> <booktitle> STOC 1980, </booktitle> <month> 252-261. </month> <title> See also "Polynomial-time algorithms for the orbit problem", </title> <journal> JACM, </journal> <volume> Vol 33, No. 4, </volume> <year> 1986, </year> <pages> 808-821. </pages>
Reference-contexts: Of course, as we will see later, the complexity of the Galois group itself will enter the picture. Our first motivation is concerned with commutative linear groups and semigroups. In 1980, Kannan and Lipton <ref> [8] </ref> solved the following orbit problem, by giving a polynomial time algorithm to it: Given two commuting matrices A and B over the rational numbers, does there exist a nonnegative integer i, such that A i = B? The following generalized orbit problem, is known as the A B C problem: <p> following generalized orbit problem, is known as the A B C problem: Given commuting matrices A, B and C over the rational numbers, does there exist nonnegative integers i and j, such that A i B j = C? A host of other problems are reducible to the orbit problem <ref> [8] </ref>. In [4], the complexity of the A B C problem was resolved. It was shown that the A B C problem can also be solved in polynomial time. In solving this problem, we made extensive use of the computability of the JNF of a rational matrices in polynomial time.
Reference: [9] <author> R. Kannan, A. K. Lenstra, L. Lovasz, </author> <title> "Polynomial factorization and non-randomness of bits of algebraic numbers and certain transcendental numbers", </title> <journal> Math. of Comp., </journal> <volume> Vol. 50, No. 181, </volume> <month> Jan. </month> <year> 1988, </year> <pages> 235-250. </pages>
Reference-contexts: See [5, 7, 6]. It is known from the work of Collins and Kannan that generalized gcd as well as linear space computations such as null space rank, basis, dimension over Q can all be computed in P-time in terms of bit complexity. A generalization by Kannan, Lenstra, Lovasz <ref> [9] </ref> also lets us carry out these computations in P-time over an algebraic extension field Q () of bounded degree, where is a root of an irreducible polynomial a d x d + + a 0 .
Reference: [10] <author> A. K. Lenstra, H. W. Lenstra, L. Lovasz, </author> <title> Factoring polynomials with rational coefficients, </title> <journal> Math. Ann. </journal> <volume> 261 </volume> <pages> 515-534, </pages> <year> 1982. </year>
Reference-contexts: In the following we will rely on the results cited above whenever we assert certain algebraic computation is in P-time. Now we apply the L 3 -algorithm <ref> [10] </ref> and get a factorization of A as a product of powers of irreducible polynomials A = f e 1 1 f k , where each f i is irreducible over Q [x] and each e i 1. Let V = Q n be the n-dimensional space over Q .
Reference: [11] <author> L. Lovasz, </author> <title> An Algorithmic Theory of Numbers, Graphs and Convexity, CBMS 50, </title> <publisher> SIAM, </publisher> <year> 1986. </year>
Reference-contexts: Note that, given such data, an arbitrarily good rational approximation can be easily computed, say, by Newton's iteration. This is the approach taken by Lovasz in <ref> [11] </ref>, and it is consistent with Turing's notion of a computable real number [15]. In fact, in terms of computational complexity, the fact that quintic equations may not have radical expressions for their roots is largely irrelevant; it simply rules out one mode of expression.
Reference: [12] <author> S. Landau, </author> <type> personal communications. </type>
Reference: [13] <author> K. A. Mihailova, </author> <title> The occurrence problem for a direct product of groups, </title> <journal> Doklady Akads. Nauk (USSR), </journal> <volume> 119 (1958), </volume> <pages> 1103-1105. </pages>
Reference: [14] <author> M. Paterson, </author> <title> Unsolvability in 3 by 3 matrices, </title> <journal> J. of Math. and Physics, </journal> <volume> Vol 49 (1970), </volume> <pages> 105-107. </pages>
Reference: [15] <author> A. M. </author> <title> Turing, On computable real numbers, with an application to the Entscheidung problems, </title> <journal> Proc. London Math. Soc., </journal> <volume> 42, </volume> <pages> 230-265. 15 </pages>
Reference-contexts: Note that, given such data, an arbitrarily good rational approximation can be easily computed, say, by Newton's iteration. This is the approach taken by Lovasz in [11], and it is consistent with Turing's notion of a computable real number <ref> [15] </ref>. In fact, in terms of computational complexity, the fact that quintic equations may not have radical expressions for their roots is largely irrelevant; it simply rules out one mode of expression. Of course, as we will see later, the complexity of the Galois group itself will enter the picture.
References-found: 15

