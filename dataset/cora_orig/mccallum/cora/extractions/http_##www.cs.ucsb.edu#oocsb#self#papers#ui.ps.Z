URL: http://www.cs.ucsb.edu/oocsb/self/papers/ui.ps.Z
Refering-URL: http://www.cs.ucsb.edu/oocsb/self/papers/experiencing-self-objects.html
Root-URL: http://www.cs.ucsb.edu
Email: (bay@self.stanford.edu)  (ungar@self.stanford.edu)  
Title: Experiencing SELF Objects: An Object-Based Artificial Reality  
Author: BAY-WEI CHANG DAVID UNGAR 
Address: 94305  
Affiliation: Computer Systems Laboratory, Stanford University, Stanford, California  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> Chambers, C., and Ungar, D. </author> <title> Customization: Optimizing Compiler Technology for SELF, a Dynamically-Typed Object-Oriented Programming Language. </title> <booktitle> In Proceedings of the SIGPLAN 89 Conference on Programming Language Design and Implementation. Published as SIGPLAN Notices, </booktitle> <volume> 24, </volume> <month> 7 </month> <year> (1989) </year> <month> 146-160. </month>
Reference-contexts: SELF is a dynamically-typed, prototype-based, object-oriented language. This paper describes the approach we have taken with the design of the user interface for SELF. Detailed description of the language and implementation can be found in <ref> [1, 2, 6, 11] </ref>. Our prototype user interface for SELF provides browsing and inspecting of SELF objects by combining an object-based model with an artificial reality. Emphasizing the problem-domain objects rather than views of those objects discards a layer of indirection found in conventional window-based user interfaces.
Reference: 2. <author> Chambers, C., Ungar, D., and Lee, E. </author> <title> An Efficient Implementation of SELF, a Dynamically-Typed Object-Oriented Language Based on Prototypes. </title> <booktitle> In OOPSLA 89 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 24, </volume> <month> 10 </month> <year> (1989) </year> <month> 49-70. </month> <note> Also to be published in Lisp and Symbolic Computation, 4, 3 (1991). </note>
Reference-contexts: SELF is a dynamically-typed, prototype-based, object-oriented language. This paper describes the approach we have taken with the design of the user interface for SELF. Detailed description of the language and implementation can be found in <ref> [1, 2, 6, 11] </ref>. Our prototype user interface for SELF provides browsing and inspecting of SELF objects by combining an object-based model with an artificial reality. Emphasizing the problem-domain objects rather than views of those objects discards a layer of indirection found in conventional window-based user interfaces.
Reference: 3. <author> Goldberg, A. </author> <title> Smalltalk-80: The Interactive Programming Environment. </title> <address> Ad-dison-Wesley, Reading, MA (1984). </address> <note> 136 CHANG AND UNGAR </note>
Reference-contexts: EXPERIENCING SELF OBJECTS 131 4 Object-based interfaces Conventional interfaces treat problem-domain objects as objects hidden within the system, accessible only via the tools of the user interface. These tools provide views of the problem-domain objects, each tool showing some aspect of objects in the system. Examples are the Smalltalk-80 <ref> [3] </ref> and Trellis [7] environments. Small-talk-80 uses different tools for different activities: browsers show classes and the methods defined in classes, inspectors show the instance variables of objects. This style of user interface can be called tool-based or activity-based [4].
Reference: 4. <author> Hedin, G., and Magnusson, B. </author> <title> The Mjlner Environment: Direct Interaction with Abstractions. </title> <booktitle> In ECOOP 88 Proceedings. Published as Lecture Notes in Computer Science #322, </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, NY (1988) 41-54. </address>
Reference-contexts: Examples are the Smalltalk-80 [3] and Trellis [7] environments. Small-talk-80 uses different tools for different activities: browsers show classes and the methods defined in classes, inspectors show the instance variables of objects. This style of user interface can be called tool-based or activity-based <ref> [4] </ref>. The activity-based model emphasizes the manipulation of user interface tools to provide views of problem-domain objects. In contrast, the object-based model treats problem-domain objects as the objects to be manipulated in the user interface. <p> The object-based model in the Finder applies only to icons. 132 CHANG AND UNGAR The Mjlner environment <ref> [4] </ref> also adopts an object-based model, in which elements of programs are represented by hierarchical windows. The hierarchical windows in Mjlner are well-matched with the block structure of the languages it is designed to support, clearly expressing containment relations.
Reference: 5. <author> Henderson, A. D., and Card, S. K. Rooms: </author> <title> The use of multiple virtual work-spaces to reduce space contention in a window-based graphical user interface. </title> <journal> In ACM Transactions on Graphics, </journal> <volume> 5, </volume> <month> 3 </month> <year> (1986) </year> <month> 211-243. </month>
Reference-contexts: Activating a pose object at a later time instructs all objects that were part of the pose to move to their former locations and all other objects to get out of the way, effectively reconstructing the layout that was captured earlier. Unlike rooms <ref> [5] </ref>, the user does not move to recapture a certain layout; the objects in the world do. Also unlike rooms, objects maintain their identity and are never found in two places at once.
Reference: 6. <author> Lee, E. </author> <title> Object Storage and Inheritance for SELF, a Prototype-Based Object-Oriented Programming Language. </title> <type> Engineers thesis, </type> <institution> Stanford University (1988). </institution>
Reference-contexts: SELF is a dynamically-typed, prototype-based, object-oriented language. This paper describes the approach we have taken with the design of the user interface for SELF. Detailed description of the language and implementation can be found in <ref> [1, 2, 6, 11] </ref>. Our prototype user interface for SELF provides browsing and inspecting of SELF objects by combining an object-based model with an artificial reality. Emphasizing the problem-domain objects rather than views of those objects discards a layer of indirection found in conventional window-based user interfaces.
Reference: 7. <author> OBrien, P. D., Halbert, D. C., and Kilian, M. F. </author> <title> The Trellis Programming Environment. </title> <booktitle> In OOPSLA 87 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 24, </volume> <month> 12 </month> <year> (1987) </year> <month> 91-102. </month>
Reference-contexts: These tools provide views of the problem-domain objects, each tool showing some aspect of objects in the system. Examples are the Smalltalk-80 [3] and Trellis <ref> [7] </ref> environments. Small-talk-80 uses different tools for different activities: browsers show classes and the methods defined in classes, inspectors show the instance variables of objects. This style of user interface can be called tool-based or activity-based [4].
Reference: 8. <author> Smith, D. C., Irby, C., Kimball, R., Verplank, W., and Harslem, E. </author> <title> Designing the Star User Interface. </title> <journal> In Byte, </journal> <volume> 7, </volume> <month> 4 </month> <year> (1982) </year> <month> 242-282. </month>
Reference-contexts: Behavior inconsistent with the language semantics will inevitably confuse the programmer; conversely, a careful design supporting the language model can make the interface a powerful tool in aiding the programmer in understanding and working in the language. Examples of object-based interfaces include the Star interface <ref> [8] </ref> and the Macintosh Finder [12]. The Macintosh Finder represents directories as folders. Opening a folder yields a window, which may contain folders as well as icons representing files.
Reference: 9. <author> Smith, R. B. </author> <title> The Alternate Reality Kit: An Animated Environment for Creating Interactive Simulations. </title> <booktitle> In Proceedings of 1986 IEEE Computer Society Workshop on Visual Languages (1986) 99-106. </booktitle>
Reference-contexts: Objects in an artificial reality behave according to the laws of that artificial world. When those laws are similar to the physical world, the user is able to use his intuition to understand an objects behavior. In ARK <ref> [9, 10] </ref>, for example, objects have mass and velocity, and obey such physical laws as gravity and inertia. 2 30 frames per second for medium-sized objects on a GX-equipped Sun Sparcstation-1. EXPERIENCING SELF OBJECTS 129 Tossing an ARK object causes it to continue moving in its original direction indefinitely.
Reference: 10. <author> Smith, R. B. </author> <title> Experiences with the Alternate Reality Kit: An Example of the Tension Between Literalism and Magic. </title> <booktitle> In Proceedings of the CHI+GI 87 Conference (1987) 61-67. </booktitle>
Reference-contexts: Objects in an artificial reality behave according to the laws of that artificial world. When those laws are similar to the physical world, the user is able to use his intuition to understand an objects behavior. In ARK <ref> [9, 10] </ref>, for example, objects have mass and velocity, and obey such physical laws as gravity and inertia. 2 30 frames per second for medium-sized objects on a GX-equipped Sun Sparcstation-1. EXPERIENCING SELF OBJECTS 129 Tossing an ARK object causes it to continue moving in its original direction indefinitely.
Reference: 11. <author> Ungar, D., and Smith, R. B. </author> <title> SELF: The Power of Simplicity. </title> <booktitle> In OOPSLA 87 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 22, </volume> <month> 12 </month> <year> (1987) </year> <month> 227-241. </month> <note> Also to be published in Lisp and Symbolic Computation, 4, 3 (1991). </note>
Reference-contexts: SELF is a dynamically-typed, prototype-based, object-oriented language. This paper describes the approach we have taken with the design of the user interface for SELF. Detailed description of the language and implementation can be found in <ref> [1, 2, 6, 11] </ref>. Our prototype user interface for SELF provides browsing and inspecting of SELF objects by combining an object-based model with an artificial reality. Emphasizing the problem-domain objects rather than views of those objects discards a layer of indirection found in conventional window-based user interfaces.
Reference: 12. <author> Williams, G. </author> <title> The Apple Macintosh Computer. </title> <journal> In Byte, </journal> <volume> 9, </volume> <month> 2 </month> <year> (1984) </year> <month> 30-54. </month>
Reference-contexts: Examples of object-based interfaces include the Star interface [8] and the Macintosh Finder <ref> [12] </ref>. The Macintosh Finder represents directories as folders. Opening a folder yields a window, which may contain folders as well as icons representing files. Folders and file icons are directly manipulatable in the interface; they may be moved about in the window, or moved to another folder.
References-found: 12

