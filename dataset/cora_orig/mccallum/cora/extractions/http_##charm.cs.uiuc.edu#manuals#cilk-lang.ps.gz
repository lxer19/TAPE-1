URL: http://charm.cs.uiuc.edu/manuals/cilk-lang.ps.gz
Refering-URL: http://charm.cs.uiuc.edu/manuals/
Root-URL: http://www.cs.uiuc.edu
Date: July 10, 1995  
Note: Cilk 2.0 Reference Manual  1 Cilk is trademark of the Massachusetts Institute of Technology. The Cilk project has been partially supported by ARPA contracts N00014-94-1-0985 and N00014-92-J-1310. Computer time on the CM5 was provided by the Scout project under ARPA contract MDA972-92-J-1032.  
Abstract-found: 0
Intro-found: 1
Reference: [BB94] <author> Eric A. Brewer and Robert D. Blumofe. Strata: </author> <title> A multi-layer communications library. </title> <type> Technical report, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> January </month> <year> 1994. </year> <note> To appear. Available from ftp.lcs.mit.edu via anonymous ftp, in directory /pub/supertech/strata. </note>
Reference: [BJK + 95] <author> Robert D. Blumofe, Christopher F. Joerg, Bradley C. Kuszmaul, Charles E. Leis-erson, Keith H. Randall, and Yuli Zhou. Cilk: </author> <title> An efficient multithreaded runtime system. </title> <booktitle> In Proceedings of the Fifth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP) '95, </booktitle> <address> Santa Barbara, California, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: These results led to the development of a performance model that accurately predicts the efficiency of a Cilk program using two simple parameters: work and critical path <ref> [BJK + 95, BL94] </ref>. The first implementation of Cilk was a direct descendent of PCM/Threaded-C, a C-based package that provided continuation-passing-style threads on the CM-5 and used work-stealing as a general scheduling policy to improve the load balance and locality of the computation [HZJ94a, HZJ94b]. <p> Cilk's work-stealing scheduler executes a fully strict computation on p processors in time O (T 1 =p + T 1 ), which is optimal. In practice the constant factor has been measured very close to 1 <ref> [BJK + 95] </ref>. Thus, for programs with plenty of parallelism (T 1 =T 1 p), the Cilk scheduler provides linear or nearly linear speedup. From an implementation perspective, we all know that the sequential execution (i.e., depth-first schedule) of the dag is both space efficient and has good locality.
Reference: [BL93] <author> Robert D. Blumofe and Charles E. Leiserson. </author> <title> Space-efficient scheduling of mul-tithreaded computations. </title> <booktitle> In Proceedings of the Twenty-Fifth Annual ACM Symposium on the Theory of Computing (STOC '93), </booktitle> <pages> pages 362-371, </pages> <address> San Diego, California, </address> <month> May </month> <year> 1993. </year>
Reference: [BL94] <author> Robert D. Blumofe and Charles E. Leiserson. </author> <title> Scheduling multithreaded computations by work-stealing. </title> <booktitle> In Proceedings of the 35th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 356-368, </pages> <address> Santa Fe, New Mexico, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: These results led to the development of a performance model that accurately predicts the efficiency of a Cilk program using two simple parameters: work and critical path <ref> [BJK + 95, BL94] </ref>. The first implementation of Cilk was a direct descendent of PCM/Threaded-C, a C-based package that provided continuation-passing-style threads on the CM-5 and used work-stealing as a general scheduling policy to improve the load balance and locality of the computation [HZJ94a, HZJ94b]. <p> It can be shown that for general dags, no good scheduling policy exists, in the sense that a dag can be constructed for which any schedule providing linear speedup requires more than linear expansion of space <ref> [BL94] </ref>. The problem can be solved by restricting the class of dags to those generated by strict computations, where a spawned procedure only sends values to its own ancestors in the spawning tree.
Reference: [Blu92] <author> Robert D. Blumofe. </author> <title> Managing storage for multithreaded computations. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, </institution> <month> September </month> <year> 1992. </year> <note> Also available as MIT Laboratory for Computer Science Technical Report MIT/LCS/TR-552. </note>
Reference: [BP94] <author> Robert D. Blumofe and David S. Park. </author> <title> Scheduling large-scale parallel computations on networks of workstations. </title> <booktitle> In Proceedings of the Third International Symposium on High-Performance Distributed Computing (HPDC '94), </booktitle> <pages> pages 96-105, </pages> <address> San Francisco, California, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: mechanism will enable Cilk procedures to perform various kinds of speculative computation which in the current Cilk release can only be achieved by explicit continuation-passing (threads). 7 Another project that will soon come to fruition is Cilk-NOW, a portable system for scheduling Cilk programs on a network of idle workstations <ref> [BP94] </ref>. Cilk-NOW is dynamic, fault-tolerant, and adaptive. Workstations can enter and leave the parallel computation at any time without disruption, and a Cilk job's share of the available workstations changes dynamically with the job's changing level of parallelism.
Reference: [HZJ94a] <author> Michael Halbherr, Yuli Zhou, and Chris F. Joerg. </author> <title> MIMD-style parallel programming based on continuation-passing threads. Computation Structures Group Memo 355, </title> <institution> Massachusetts Institute of Technology, Laboratory for Computer Science, 545 Technology Square, </institution> <address> Cambridge, MA 02139, </address> <month> April </month> <year> 1994. </year> <note> A shorter version will appear in Proc. of 2nd Int. Workshop on Massive Parallelism: Hardware, Software and Applications. Capri, </note> <institution> Italy, </institution> <month> Oct. </month> <year> 1994. </year> <month> 90 </month>
Reference-contexts: The first implementation of Cilk was a direct descendent of PCM/Threaded-C, a C-based package that provided continuation-passing-style threads on the CM-5 and used work-stealing as a general scheduling policy to improve the load balance and locality of the computation <ref> [HZJ94a, HZJ94b] </ref>. The latest release, Cilk 2.0, shows significant improvements. The language is now fully typechecked, supports all of ANSI C in its C-language subset, and offers a simpler syntax for writing multithreaded procedures.
Reference: [HZJ94b] <author> Michael Halbherr, Yuli Zhou, and Chris F. Joerg. </author> <title> MIMD-style parallel program-ming based on continuation-passing threads. </title> <booktitle> In Proc. of 2nd Int. Workshop on Massive Parallelism: Hardware, Software and Applications., </booktitle> <address> Capri, Italy, </address> <month> October </month> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: The first implementation of Cilk was a direct descendent of PCM/Threaded-C, a C-based package that provided continuation-passing-style threads on the CM-5 and used work-stealing as a general scheduling policy to improve the load balance and locality of the computation <ref> [HZJ94a, HZJ94b] </ref>. The latest release, Cilk 2.0, shows significant improvements. The language is now fully typechecked, supports all of ANSI C in its C-language subset, and offers a simpler syntax for writing multithreaded procedures.
Reference: [JK94] <author> Christopher F. Joerg and Bradley C. Kuszmaul. </author> <title> Massively parallel chess. </title> <booktitle> In Third DIMACS Parallel Implementation Challenge Workshop, </booktitle> <institution> Rutgers University, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: A key principle in the Cilk development methodology is that the runtime mechanisms and language features are closely tied to the development of practical applications. To date, major applications developed in Cilk include graphics rendering, protein folding [PJGT], backtracking search, and the *Socrates chess program <ref> [JK94] </ref>, which won 3rd place in the 1994 ACM ICCC (International Computer Chess Championship), and recently won 2nd place in the 1995 ICCC. 1.3 The Cilk Model of Multithreaded Computation A Cilk program consists of a collection of "procedures," where each procedure is broken down into multiple "threads." For example, here
Reference: [Kus94] <author> Bradley C. Kuszmaul. </author> <title> Synchronized MIMD Computing. </title> <type> PhD thesis, </type> <institution> Mas-sachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1994. </year>
Reference: [LAD + 92] <author> Charles E. Leiserson, Zahi S. Abuhamdeh, David C. Douglas, Carl R. Feynman, Mahesh N. Ganmukhi, Jeffrey V. Hill, W. Daniel Hillis, Bradley C. Kuszmaul, Margaret A. St. Pierre, David S. Wells, Monica C. Wong, Shaw-Wen Yang, and Robert Zak. </author> <title> The network architecture of the Connection Machine CM-5. </title> <booktitle> In Symposium on Parallel Algorithms and Architectures (SPAA '92), </booktitle> <pages> pages 272-285, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference: [Mil95] <author> Robert C. Miller. </author> <title> A type-checking preprocessor for Cilk 2, a multithreaded C language. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1995. </year>
Reference: [PJGT] <author> Vijay S. Pande, Chris Joerg, Alexander Yu. Grosberg, and Toyoichi Tanaka. </author> <title> Enumeration of the hamiltonian walks on a cubic sublattice. </title> <note> To appear in Journal of Physics A. 91 </note>
Reference-contexts: A key principle in the Cilk development methodology is that the runtime mechanisms and language features are closely tied to the development of practical applications. To date, major applications developed in Cilk include graphics rendering, protein folding <ref> [PJGT] </ref>, backtracking search, and the *Socrates chess program [JK94], which won 3rd place in the 1994 ACM ICCC (International Computer Chess Championship), and recently won 2nd place in the 1995 ICCC. 1.3 The Cilk Model of Multithreaded Computation A Cilk program consists of a collection of "procedures," where each procedure is
References-found: 13

