URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/modck/pub/www/cv/RR-943-I.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/modck/pub/www/cv/RR-943-I.html
Root-URL: 
Title: qualitative finite subset of VHDL and its semantics  
Author: David Deharbe Dominique Borrione 
Address: BP 53 38041 GRENOBLE Cedex 9 France  
Affiliation: ARTEMIS Institut IMAG  
Note: A  Resume  
Abstract: RESEARCH REPORT Abstract This report gives operational semantics for a subset of VHDL in terms of abstract machines. Restrictions to the VHDL source code are the finiteness of data types, and the absence of quantitative timing informations. The abstract machine of a design unit is built by composition of the abstract machines for its embedded processes and blocks. The kernel process in our model is distributed among the composed machines. One transition of the final abstract machine models a VHDL delta cycle. This model can be used for symbolic model checking and finite state machine equivalence checking. Ce rapport presente une semantique d'un sous-ensemble de VHDL vers une famille de machine abstraites. Le sous-ensemble de VHDL considere est limite aux types de donnees finis, et n'autorise pas d'informations temporelles quanti-tatives. La machine abstraite construite comme semantique d'une unite de simulation VHDL est composee a partir des machines abstraites de ses processus et blocs internes. Le noyau de simulation est, dans notre modele, distribue parmi les machines internes. Une transition de la machine abstraite totale modelise un cycle de simulation VHDL. Sur cette semantique, les techniques classiques de verification de modeles et de verification d'equivalence de machines d'etats finis sont applicables. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Catherine Bayol, Bernard Soulas, Fulvio Corno, Paolo Prinetto, and Dominique Borrione. </author> <title> A process algebra interpretation of a verification oriented overlanguage of VHDL. </title> <booktitle> In EURODAC with EUROVHDL'94, </booktitle> <pages> pages 506-511, </pages> <address> Grenoble, France, </address> <month> Sep. </month> <year> 1994. </year> <title> ACM/IEEE, </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Olcoz, in [11], manages to give semantics for almost the whole language in terms of Petri nets. Many other formalisations have been recently proposed, using very different approaches to capture efficiently and correctly the semantics of VHDL: evolving algebras [2], stream and stream-processing functions [7], process algebra <ref> [1] </ref>, proof theory [3], etc. A general remark arises: one has to trade off the amount of VHDL covered and the practical usefulness of the semantics. <p> FSM M = hI; S; O; s 0 ; N S; N Oi is said to be deterministic if the following conditions are satisfied : - 8i 1 ; : : : ; i ni 2 I; 8s 1 ; : : : ; s ns 2 S; 8k 2 <ref> [1; ns ] </ref>9!v 2 S k : N S (i 1 ; : : : ; i ni ; s 1 ; s ns ; v) ; 2.2 Abstract Machine Definition 2.2.1 (Abstract Machine) An abstract machine A is defined by a couple hM; s ci, where: - M is a
Reference: [2] <author> Egon B orger, Uwe Gl asser, and Wolfgang M uller. </author> <title> Formal Semantics for VHDL, </title> <booktitle> chapter Formal Definition of an Abstract VHDL'93 by EA-Machines, </booktitle> <pages> pages 64-90. </pages> <publisher> Kluwer Academic Publishers. To be published. </publisher>
Reference-contexts: Davis, in [4], gives another denotational semantics of VHDL. Olcoz, in [11], manages to give semantics for almost the whole language in terms of Petri nets. Many other formalisations have been recently proposed, using very different approaches to capture efficiently and correctly the semantics of VHDL: evolving algebras <ref> [2] </ref>, stream and stream-processing functions [7], process algebra [1], proof theory [3], etc. A general remark arises: one has to trade off the amount of VHDL covered and the practical usefulness of the semantics.
Reference: [3] <author> Peter Breuer, Luis S. Sanchez, and Carlos Delgado Kloos. </author> <title> Proof theory and a validation condition generator for VHDL. </title> <booktitle> In EURO-DAC with EUROVHDL '94, </booktitle> <pages> pages 512-517, </pages> <address> Grenoble, France, </address> <month> Sep. </month> <year> 1994. </year> <title> ACM/IEEE, </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Many other formalisations have been recently proposed, using very different approaches to capture efficiently and correctly the semantics of VHDL: evolving algebras [2], stream and stream-processing functions [7], process algebra [1], proof theory <ref> [3] </ref>, etc. A general remark arises: one has to trade off the amount of VHDL covered and the practical usefulness of the semantics.
Reference: [4] <author> K.C. Davis. </author> <title> A Denotational Definition of the VHDL Simulation Kernel. </title> <booktitle> In 11 th International Symposium on Computer Hardware Description Languages and their Applications, </booktitle> <pages> pages 509-521, </pages> <address> Ottawa, Canada, </address> <year> 1993. </year>
Reference-contexts: Salem and Borrione, in [13, 12] present a functional semantics of the timing constructs, and a denotational semantics of a so-called synchronous subset. Levy et al., in [10], express the semantics in terms of state deltas. Davis, in <ref> [4] </ref>, gives another denotational semantics of VHDL. Olcoz, in [11], manages to give semantics for almost the whole language in terms of Petri nets.
Reference: [5] <author> A. Debreil and D. Jaillet. </author> <title> Synchronous description in VHDL for formal proof and resulting guidelines proposed by BULL. </title> <type> Advanced report, </type> <institution> BULL Produits Systemes Departement Developpement Assiste, Les Clayes-sous-Bois-France, </institution> <month> July </month> <year> 1992. </year> <note> BULL/92.0001 rev.A. </note>
Reference-contexts: It is our intention to investigate how this model can be used to study the obtention of stability conditions based on the stability of inputs in order to verify sequential circuits synchronized by one or more clocks. We have the intuition that a previous finite state machine model <ref> [5] </ref> which assumed strict restrictions on signals assigned under the condition of a clock pulse could be derived as a special case of the abstract machine model presented here.
Reference: [6] <editor> C. Delgado Kloos and P. Breuer, editors. </editor> <title> Formal Semantics for VHDL. </title> <publisher> Kluwer Academic Publishers. To be published. </publisher>
Reference: [7] <author> Max Fuchs and M. Mendler. </author> <title> Formal Semantics for VHDL, chapter Functional Semantics for Delta-Delay VHDL Based on Focus, </title> <address> pages 9-38. </address> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year> <note> To be published. </note>
Reference-contexts: Olcoz, in [11], manages to give semantics for almost the whole language in terms of Petri nets. Many other formalisations have been recently proposed, using very different approaches to capture efficiently and correctly the semantics of VHDL: evolving algebras [2], stream and stream-processing functions <ref> [7] </ref>, process algebra [1], proof theory [3], etc. A general remark arises: one has to trade off the amount of VHDL covered and the practical usefulness of the semantics.
Reference: [8] <author> IEEE. </author> <title> IEEE Standard VHDL Language Reference Manual, </title> <booktitle> 1988. </booktitle> <address> Std 1076-1987. </address>
Reference-contexts: Introduction Giving a formal definition of the semantics of VHDL is of highest importance for synthesis as well as for formal verification. VHDL semantics are defined in natural language in terms of a simulation engine <ref> [8, 9] </ref>. For this first reason, it is difficult to ensure that formal semantics match the informal official definition. Nevertheless, various approaches have been proposed in the past years. The first efforts to give formal semantics to VHDL appeared in the early 90's.
Reference: [9] <author> IEEE. </author> <title> IEEE Standard VHDL Language Reference Manual, </title> <booktitle> 1993. </booktitle> <address> Std 1076-1993. </address>
Reference-contexts: Introduction Giving a formal definition of the semantics of VHDL is of highest importance for synthesis as well as for formal verification. VHDL semantics are defined in natural language in terms of a simulation engine <ref> [8, 9] </ref>. For this first reason, it is difficult to ensure that formal semantics match the informal official definition. Nevertheless, various approaches have been proposed in the past years. The first efforts to give formal semantics to VHDL appeared in the early 90's.
Reference: [10] <author> Beth Levy, I. Filippenko, L. Markus, and T. Menas. </author> <title> Using the State Delta Verification System for Hardware Description. </title> <editor> In V. Stravidou, T.F. Melham, and R.T. Boute, editors, </editor> <booktitle> Theorem Provers in Circuit Design, </booktitle> <pages> 33 34 BIBLIOGRAPHY pages 337-360, </pages> <address> Nijmegen, Netherlands, June 1992. </address> <publisher> IFIP A-10, North Hol-land. </publisher>
Reference-contexts: Van Tassel, in [14, 15], applies to a purely boolean-valued subset of VHDL, towards the HOL proof assistant. Salem and Borrione, in [13, 12] present a functional semantics of the timing constructs, and a denotational semantics of a so-called synchronous subset. Levy et al., in <ref> [10] </ref>, express the semantics in terms of state deltas. Davis, in [4], gives another denotational semantics of VHDL. Olcoz, in [11], manages to give semantics for almost the whole language in terms of Petri nets.
Reference: [11] <author> Serafin Olcoz and J.M. Colon. </author> <title> A Petri net approach for the analysis of VHDL descriptions. </title> <editor> In G.J. Milne and L. Pierre, editors, </editor> <title> Correct Hardware Design and Verification Methods, </title> <booktitle> volume 683 of Lecture Notes in Computer Science, </booktitle> <pages> pages 15-26, </pages> <address> Arles, France, </address> <month> May </month> <year> 1993. </year> <booktitle> ESPRIT WG 6018 and IFIP WG 10.2, </booktitle> <publisher> Springer Verlag. </publisher>
Reference-contexts: Salem and Borrione, in [13, 12] present a functional semantics of the timing constructs, and a denotational semantics of a so-called synchronous subset. Levy et al., in [10], express the semantics in terms of state deltas. Davis, in [4], gives another denotational semantics of VHDL. Olcoz, in <ref> [11] </ref>, manages to give semantics for almost the whole language in terms of Petri nets. Many other formalisations have been recently proposed, using very different approaches to capture efficiently and correctly the semantics of VHDL: evolving algebras [2], stream and stream-processing functions [7], process algebra [1], proof theory [3], etc.
Reference: [12] <author> Ashraf Salem. </author> <title> Verification formelle des circuits digitaux decrits en VHDL. </title> <type> PhD thesis, </type> <institution> Universite Joseph Fourier, Grenoble, France, </institution> <month> Oct. </month> <year> 1992. </year> <institution> Lab. IMAG-ARTEMIS. </institution>
Reference-contexts: Nevertheless, various approaches have been proposed in the past years. The first efforts to give formal semantics to VHDL appeared in the early 90's. Van Tassel, in [14, 15], applies to a purely boolean-valued subset of VHDL, towards the HOL proof assistant. Salem and Borrione, in <ref> [13, 12] </ref> present a functional semantics of the timing constructs, and a denotational semantics of a so-called synchronous subset. Levy et al., in [10], express the semantics in terms of state deltas. Davis, in [4], gives another denotational semantics of VHDL.
Reference: [13] <author> Ashraf Salem and Dominique Borrione. </author> <title> VHDL for simulation, synthesis, and formal proofs of hardware, chapter Formal semantics for VHDL timing constructs. </title> <booktitle> Kluwer international series in engineering and computer science. </booktitle> <publisher> Kluwer Academic Publishers, j. </publisher> <address> mermet edition, </address> <year> 1992. </year> <note> ISBN: 0 7923-9253-1. </note>
Reference-contexts: Nevertheless, various approaches have been proposed in the past years. The first efforts to give formal semantics to VHDL appeared in the early 90's. Van Tassel, in [14, 15], applies to a purely boolean-valued subset of VHDL, towards the HOL proof assistant. Salem and Borrione, in <ref> [13, 12] </ref> present a functional semantics of the timing constructs, and a denotational semantics of a so-called synchronous subset. Levy et al., in [10], express the semantics in terms of state deltas. Davis, in [4], gives another denotational semantics of VHDL.
Reference: [14] <author> John Van Tassel. </author> <title> The semantics of VHDL with VAL and HOL: Towards practical verification tools. </title> <type> Technical Report 196, </type> <institution> University of Cambridge, </institution> <address> Cambridge, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: For this first reason, it is difficult to ensure that formal semantics match the informal official definition. Nevertheless, various approaches have been proposed in the past years. The first efforts to give formal semantics to VHDL appeared in the early 90's. Van Tassel, in <ref> [14, 15] </ref>, applies to a purely boolean-valued subset of VHDL, towards the HOL proof assistant. Salem and Borrione, in [13, 12] present a functional semantics of the timing constructs, and a denotational semantics of a so-called synchronous subset.
Reference: [15] <author> John Van Tassel. </author> <title> A formalisation of the VHDL simulation cycle. </title> <type> Technical Report 249, </type> <institution> University of Cambridge, </institution> <address> Cambridge, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: For this first reason, it is difficult to ensure that formal semantics match the informal official definition. Nevertheless, various approaches have been proposed in the past years. The first efforts to give formal semantics to VHDL appeared in the early 90's. Van Tassel, in <ref> [14, 15] </ref>, applies to a purely boolean-valued subset of VHDL, towards the HOL proof assistant. Salem and Borrione, in [13, 12] present a functional semantics of the timing constructs, and a denotational semantics of a so-called synchronous subset.
References-found: 15

