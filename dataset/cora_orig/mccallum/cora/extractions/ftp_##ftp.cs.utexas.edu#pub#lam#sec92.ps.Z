URL: ftp://ftp.cs.utexas.edu/pub/lam/sec92.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/lam/NRL/network_security.html
Root-URL: 
Title: Authorization in Distributed Systems: A Formal Approach  
Author: Thomas Y.C. Woo Simon S. Lam 
Address: Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: In most systems, authorization is specified using some low-level system-specific mechanisms, e.g. protection bits, capabilities and access control lists. We argue that authorization is an independent semantic concept that must be separated from implementation mechanisms and given a precise semantics. We propose a logical approach to representing and evaluating authorization. Specifically, we introduce a language for specifying policy bases. A policy base encodes a set of authorization requirements and is given a precise semantics based upon a formal notion of authorization policy. The semantics is computable, thus providing a basis for authorization evaluation. We also introduce two composition operators for policy bases, which are appropriate for modeling distributed systems with multiple administrative domains. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> IEEE Symposium on Research in Security and Privacy, Oakland, California, </institution> <month> April 18-21 </month> <year> 1988. </year>
Reference: [2] <author> M. Abadi, M. Burrows, B.W. Lampson, and G. Plotkin. </author> <title> A calculus for access control in distributed systems. </title> <type> Technical Report 70, </type> <institution> Systems Research Center, Digital Equipment Corporation, </institution> <month> February </month> <year> 1991. </year> <note> An abbreviated version appeared in Advances in Cryptology | CRYPTO '91, pages 1-23, </note> <institution> Santa Barbara, California, </institution> <month> August 11-15 </month> <year> 1991. </year>
Reference-contexts: These references are concerned with modeling abstract security properties of a system as a whole, which includes authorization as a key component. The papers by Abadi, et al. <ref> [2] </ref> and Lunt [19] are similar in spirit to ours, in that their focus is on understanding the semantics of authorization. Concrete models such as those proposed in [6, 12, 18] address the same general concerns as ours, but for application-specific domains.
Reference: [3] <author> K.R. Apt, H.A. Blair, and A. Walker. </author> <title> Towards a theory of declarative knowlege. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Database and Logic Programming, </booktitle> <pages> pages 89-148. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1988. </year>
Reference-contexts: This idea can indeed be generalized and a notion of stratification can be defined on the set 10 of distinguished atoms, so that a stratified base always possesses a unique extension. We omit the details here and refer the readers to <ref> [3, 8, 23] </ref>. The semantics of bases can also be given by first "factoring out" the effects of assignments and group relations. We formalize this below. Let B be a base, I an assignment and G a group relation.
Reference: [4] <author> D.E. Bell and L.J. LaPadula. </author> <title> Secure computer system: Unified exposition and Mul-tics interpretation. </title> <type> Technical Report ESD-TR-75-306, </type> <institution> Mitre Corporation, </institution> <month> March </month> <year> 1976. </year>
Reference-contexts: In Section 6, we introduce our language for specifying policy bases and describe its syntax and semantics as well as some guidelines for its usage. In Section 7, we provide some examples of policy bases, including the Bell-LaPadula model <ref> [4] </ref> and some inheritance rules. In Section 8, we examine two notions of composition for policy bases. In Section 9, we outline an implementation of our model. <p> The first example is the Bell-LaPadula model (BLP) <ref> [4] </ref>. We present a straightforward formulation of the basic BLP model in the policy base notation and also an enhancement with need-to-know restrictions. The second example shows how to formalize inheritance properties (as illustrated by examples in Section 2). <p> Given a complete description of the group relation, the above policy base uniquely defines a strongly sound and strongly complete authorization policy that satisfies the simple and ?-security properties <ref> [4] </ref>. However, this basic model suffers from two drawbacks. First, the group relation must be completely defined in order to give a strongly complete authorization policy. Second, although positive authorizations that are granted do satisfy the simple and ?-security property, they violate the principle of minimal privileges [25].
Reference: [5] <author> D.E. Denning. </author> <title> Cryptography and Data Security. </title> <publisher> Addison-Wesley, </publisher> <year> 1982. </year>
Reference-contexts: The authority of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow <ref> [5, 11, 16] </ref>.) Conceptually, the rights of subjects to access objects can be stored in an access matrix [14, 15], with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 2.) Practical implementations of an access matrix usually take advantage of <p> entries indicating various access rights. (See examples in Section 2.) Practical implementations of an access matrix usually take advantage of the sparseness of the matrix, and are based upon capabilities (access rights stored by row), access control lists (access rights stored by columns), or some hybrid combination of these approaches <ref> [5, 7] </ref>. Distributed systems and the prevalent client-server style of computing give rise to new problems in the specification of authorization requirements. For examples: * New kinds of attributes need to be considered.
Reference: [6] <author> D.E. Denning, T.F. Lunt, R.R. Schell, M. Heckman, and W.R. Shockley. </author> <title> The SeaV-iew formal security policy model. </title> <type> Technical Report A003, </type> <institution> Computer Science Laboratory, SRI International, </institution> <year> 1987. </year>
Reference-contexts: The papers by Abadi, et al. [2] and Lunt [19] are similar in spirit to ours, in that their focus is on understanding the semantics of authorization. Concrete models such as those proposed in <ref> [6, 12, 18] </ref> address the same general concerns as ours, but for application-specific domains. Lastly, our composition operators are designed for authorization requirements, and are different from the one in [20] which is designed for a particular notion of security. The balance of this paper is organized as follows.
Reference: [7] <author> M. Gasser. </author> <title> Building a Secure Computer System. </title> <publisher> Van Nostrand Reinhold Company, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: entries indicating various access rights. (See examples in Section 2.) Practical implementations of an access matrix usually take advantage of the sparseness of the matrix, and are based upon capabilities (access rights stored by row), access control lists (access rights stored by columns), or some hybrid combination of these approaches <ref> [5, 7] </ref>. Distributed systems and the prevalent client-server style of computing give rise to new problems in the specification of authorization requirements. For examples: * New kinds of attributes need to be considered. <p> Thus, it is important that such intentional incomplete ness be allowed by the language semantics. Note that this strictly generalizes the idea of a reference monitor <ref> [7] </ref>, where no incompleteness is allowed. Third, authorization may be inconsistent. That is, it is possible for an authorization request to be both granted and denied.
Reference: [8] <author> M. Gelfond and V. Lifschitz. </author> <title> The stable model semantics for logic programming. </title> <editor> In R. Kowalski and K. Bowen, editors, </editor> <booktitle> Logic Programming: Proceedings of the Fifth International Conference, </booktitle> <pages> pages 1070-1080. </pages> <publisher> The MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: This idea can indeed be generalized and a notion of stratification can be defined on the set 10 of distinguished atoms, so that a stratified base always possesses a unique extension. We omit the details here and refer the readers to <ref> [3, 8, 23] </ref>. The semantics of bases can also be given by first "factoring out" the effects of assignments and group relations. We formalize this below. Let B be a base, I an assignment and G a group relation. <p> Extended logic programs are a strict su-perset of general logic programs, because literals rather than just atoms are allowed in the program clauses. For extended logic programs, we have developed a paraconsistent semantics (expressed in terms of models) using ideas from stable model construction <ref> [8] </ref>. Our semantics is an extension to the one proposed in [9], and is similarly computable via reduction to general logic programs. Details can be found in [26].
Reference: [9] <author> M. Gelfond and V. Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. New Generation Computing, </title> <address> 9(3,4):365-385, </address> <year> 1991. </year>
Reference-contexts: In this subsection, we present a simple semantics-preserving translation of a base B into an extended logic program B , thus reducing the computation of E I;G (B) to the computation of B <ref> [9] </ref>. We first introduce the concept of an extended logic program. An extended program clause is a statement of the form: L L 1 ; : : :; L n ; not L n+1 ; : : :; not L m where L and L i 's are literals. <p> For extended logic programs, we have developed a paraconsistent semantics (expressed in terms of models) using ideas from stable model construction [8]. Our semantics is an extension to the one proposed in <ref> [9] </ref>, and is similarly computable via reduction to general logic programs. Details can be found in [26].
Reference: [10] <author> J. Glasgow, G. MacEwen, and P. Panan-gaden. </author> <title> A logic for reasoning about security. </title> <booktitle> In Proceedings of The Computer Security Foundations Workshop III, </booktitle> <pages> pages 2-13, </pages> <address> Franconia, New Hampshire, </address> <month> June 12-14 </month> <year> 1990. </year>
Reference-contexts: We also introduce two composition operators for policy bases, which are appropriate for modeling distributed systems with multiple administrative domains. In relating our research to previous work, we observe that our concerns are orthogonal to those of others in security modeling <ref> [11, 10, 21, 22] </ref>. These references are concerned with modeling abstract security properties of a system as a whole, which includes authorization as a key component.
Reference: [11] <author> J.A. Goguen and J. Meseguer. </author> <title> Security policies and security models. </title> <booktitle> In Proceedings of 3rd IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 11-20, </pages> <address> Oakland, California, </address> <month> April 26-28 </month> <year> 1982. </year>
Reference-contexts: The authority of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow <ref> [5, 11, 16] </ref>.) Conceptually, the rights of subjects to access objects can be stored in an access matrix [14, 15], with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 2.) Practical implementations of an access matrix usually take advantage of <p> We also introduce two composition operators for policy bases, which are appropriate for modeling distributed systems with multiple administrative domains. In relating our research to previous work, we observe that our concerns are orthogonal to those of others in security modeling <ref> [11, 10, 21, 22] </ref>. These references are concerned with modeling abstract security properties of a system as a whole, which includes authorization as a key component.
Reference: [12] <author> P.P. Griffiths and B.W. Wade. </author> <title> An authorization mechanism for a relational database system. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(3) </volume> <pages> 242-255, </pages> <year> 1976. </year> <month> 16 </month>
Reference-contexts: The papers by Abadi, et al. [2] and Lunt [19] are similar in spirit to ours, in that their focus is on understanding the semantics of authorization. Concrete models such as those proposed in <ref> [6, 12, 18] </ref> address the same general concerns as ours, but for application-specific domains. Lastly, our composition operators are designed for authorization requirements, and are different from the one in [20] which is designed for a particular notion of security. The balance of this paper is organized as follows.
Reference: [13] <author> S. Kramer. </author> <title> On incorporating access control lists into the Unix operating system. </title> <booktitle> In Proceedings of Usenix Unix Security Workshop, </booktitle> <pages> pages 38-48, </pages> <address> Portland, Oregon, </address> <month> August 29-30 </month> <year> 1988. </year>
Reference-contexts: In this paper, we propose a new foundation for representing and evaluating authorization. Our contributions are as follows. We first identify three types of structural properties inherent in 2 See for example <ref> [13] </ref> and the POSIX Security Draft Standard P1003.6 which discuss how to supplement Unix protection bits with access control lists. 2 authorization requirements. We argue that such structural properties can be effectively exploited to reduce the complexity of representing and evaluating authorization in large-scale distributed systems.
Reference: [14] <author> B.W. Lampson. </author> <title> Dynamic protection structures. </title> <booktitle> In Proceedings of AFIPS Fall Joint Computer Conference, </booktitle> <volume> volume 35, </volume> <pages> pages 27-38, </pages> <address> Las Vegas, Nevada, </address> <month> November 18-20 </month> <year> 1969. </year>
Reference-contexts: authority of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow [5, 11, 16].) Conceptually, the rights of subjects to access objects can be stored in an access matrix <ref> [14, 15] </ref>, with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 2.) Practical implementations of an access matrix usually take advantage of the sparseness of the matrix, and are based upon capabilities (access rights stored by row), access control lists
Reference: [15] <author> B.W. Lampson. </author> <title> Protection. </title> <booktitle> In Proceedings of 5th Princeton Symposium on Information Sciences and Systems, </booktitle> <pages> pages 437-443, </pages> <institution> Princeton University, </institution> <month> March </month> <year> 1971. </year> <journal> Reprinted in ACM Operating Systems Review, </journal> <volume> 8(1) </volume> <pages> 18-24, </pages> <month> January </month> <year> 1974. </year>
Reference-contexts: authority of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow [5, 11, 16].) Conceptually, the rights of subjects to access objects can be stored in an access matrix <ref> [14, 15] </ref>, with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 2.) Practical implementations of an access matrix usually take advantage of the sparseness of the matrix, and are based upon capabilities (access rights stored by row), access control lists
Reference: [16] <author> B.W. Lampson. </author> <title> A note on the confinement problem. </title> <journal> Communications of the ACM, </journal> <volume> 16(10) </volume> <pages> 613-615, </pages> <month> October </month> <year> 1973. </year>
Reference-contexts: The authority of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow <ref> [5, 11, 16] </ref>.) Conceptually, the rights of subjects to access objects can be stored in an access matrix [14, 15], with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 2.) Practical implementations of an access matrix usually take advantage of
Reference: [17] <author> C.E. Landwehr. </author> <title> Formal models for computer security. </title> <journal> ACM Computing Surveys, </journal> <volume> 13(3) </volume> <pages> 247-278, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: Existing models of authorization have not been designed to address these problems <ref> [17] </ref>. Furthermore, existing approaches are unsatisfactory in the following respect: authorization requirements can only be specified using some low-level system-specific mechanisms. For example, in Unix, accesses to the file system are specified by protection bits associated with each file, and authorization is determined by how these protection bits are set.
Reference: [18] <author> C.E. Landwehr, C.L. Heitmeyer, and J. McLean. </author> <title> A security model for military message systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 198-222, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: The papers by Abadi, et al. [2] and Lunt [19] are similar in spirit to ours, in that their focus is on understanding the semantics of authorization. Concrete models such as those proposed in <ref> [6, 12, 18] </ref> address the same general concerns as ours, but for application-specific domains. Lastly, our composition operators are designed for authorization requirements, and are different from the one in [20] which is designed for a particular notion of security. The balance of this paper is organized as follows.
Reference: [19] <author> T.F. Lunt. </author> <title> Access control policies: Some unanswered questions. </title> <journal> Computer & Security, </journal> <volume> 8(1) </volume> <pages> 43-54, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: These references are concerned with modeling abstract security properties of a system as a whole, which includes authorization as a key component. The papers by Abadi, et al. [2] and Lunt <ref> [19] </ref> are similar in spirit to ours, in that their focus is on understanding the semantics of authorization. Concrete models such as those proposed in [6, 12, 18] address the same general concerns as ours, but for application-specific domains.
Reference: [20] <author> D. McCullough. </author> <title> Noninterference and the composability of security properties. </title> <booktitle> In Proceedings of 9th IEEE Symposium on Research in Security and Privacy [1], </booktitle> <pages> pages 177-186. </pages>
Reference-contexts: Concrete models such as those proposed in [6, 12, 18] address the same general concerns as ours, but for application-specific domains. Lastly, our composition operators are designed for authorization requirements, and are different from the one in <ref> [20] </ref> which is designed for a particular notion of security. The balance of this paper is organized as follows. In the next section, we identify three types of structural properties in authorization requirements. In Section 3, we discuss the requirements of a language for representing authorization.
Reference: [21] <author> J. McLean. </author> <title> The algebra of security. </title> <booktitle> In Proceedings of 9th IEEE Symposium on Research in Security and Privacy [1], </booktitle> <pages> pages 2-7. </pages>
Reference-contexts: We also introduce two composition operators for policy bases, which are appropriate for modeling distributed systems with multiple administrative domains. In relating our research to previous work, we observe that our concerns are orthogonal to those of others in security modeling <ref> [11, 10, 21, 22] </ref>. These references are concerned with modeling abstract security properties of a system as a whole, which includes authorization as a key component.
Reference: [22] <author> J. McLean. </author> <title> The specification and modeling of computer security. </title> <journal> Computer, </journal> <volume> 23(1) </volume> <pages> 9-16, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: We also introduce two composition operators for policy bases, which are appropriate for modeling distributed systems with multiple administrative domains. In relating our research to previous work, we observe that our concerns are orthogonal to those of others in security modeling <ref> [11, 10, 21, 22] </ref>. These references are concerned with modeling abstract security properties of a system as a whole, which includes authorization as a key component.
Reference: [23] <author> T. Przymusinski. </author> <title> On the declarative and procedural semantics of logic programs. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 5(2) </volume> <pages> 167-205, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: This idea can indeed be generalized and a notion of stratification can be defined on the set 10 of distinguished atoms, so that a stratified base always possesses a unique extension. We omit the details here and refer the readers to <ref> [3, 8, 23] </ref>. The semantics of bases can also be given by first "factoring out" the effects of assignments and group relations. We formalize this below. Let B be a base, I an assignment and G a group relation.
Reference: [24] <author> R. Reiter. </author> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1-2):81-132, </volume> <month> April </month> <year> 1980. </year>
Reference-contexts: The language is essentially a many-sorted first-order language with a rule construct. The rule construct is similar to the default construct in default logic <ref> [24] </ref>; however, we provide it with a different semantics. The rule construct is useful for stating structural properties of authorization requirements. From some domain-specific considerations, we impose several restrictions on the kind of first-order formulas allowed.
Reference: [25] <author> J.H. Saltzer and M.D. Schroeder. </author> <title> The protection of information in computer systems. </title> <booktitle> Proceedings of IEEE, </booktitle> <volume> 63(9) </volume> <pages> 1278-1308, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: However, this basic model suffers from two drawbacks. First, the group relation must be completely defined in order to give a strongly complete authorization policy. Second, although positive authorizations that are granted do satisfy the simple and ?-security property, they violate the principle of minimal privileges <ref> [25] </ref>. We remedy this by adding need-to-know restrictions and denials by default.
Reference: [26] <author> Thomas Y.C. Woo and Simon S. Lam. </author> <title> Authorization in distributed systems: A new approach. </title> <type> Technical report, </type> <institution> Department of Computer Sciences, The University of Texas at Austin, </institution> <year> 1992. </year> <note> In preparation. 17 </note>
Reference-contexts: Theorem 1 Let B be a base, I an assignment and G a group relation. Let be a set of literals. Then is an extension of B under I and G iff is an extension of [I; G](B). Proof Omitted; see <ref> [26] </ref>. 2 6.3 Computation of E I;G (B) For our semantics, authorization evaluation reduces to the computation of E I;G (B). <p> For extended logic programs, we have developed a paraconsistent semantics (expressed in terms of models) using ideas from stable model construction [8]. Our semantics is an extension to the one proposed in [9], and is similarly computable via reduction to general logic programs. Details can be found in <ref> [26] </ref>. The essence of our approach is to translate a base into an extended logic program as follows: Let B be a base and let d f : f 0 g be a rule in B. <p> We denote by B the extended program obtained by applying the above translation to each rule in B. Theorem 2 Let B be a pure base and a set of literals. Then is an extension of B iff is a model of B . Proof Omitted; see <ref> [26] </ref>. 2 Corollary Let B be a base, I an assignment and G a group relation. Let be a set of literals. Then is an extension of B under I and G iff is a model of [I;G](B) . Proof Omitted; see [26]. 2 11 6.4 Semantics for Open Policy Base <p> Proof Omitted; see <ref> [26] </ref>. 2 Corollary Let B be a base, I an assignment and G a group relation. Let be a set of literals. Then is an extension of B under I and G iff is a model of [I;G](B) . Proof Omitted; see [26]. 2 11 6.4 Semantics for Open Policy Base Let B be an open base. We view each open rule in B as standing for all its ground instances. <p> Let B 0 2 be the resulting base. Then B 1 v B 2 = B 1 [ B 0 2 Because of space limitation, we relegate a study of the properties of these two types of com position to another paper <ref> [26] </ref>. 9 Implementation Our model can be implemented as follows in a distributed system. Each policy base is stored and managed by a node in the system. We call such a node a policy server. These policy servers are organized in a hierarchical manner.
References-found: 26

