URL: http://www.cs.columbia.edu/~mauricio/papers/ijcai93.ps
Refering-URL: http://www.cs.columbia.edu/~mauricio/
Root-URL: 
Title: Parallel Programming of Rule-based Systems in PARULEL  
Author: Mauricio A. Hernandez Salvatore J. Stolfo 
Date: July 21, 1993  
Address: New York, NY 10027  
Affiliation: Department of Computer Science Columbia University  
Abstract: Although the problem of increasing the speed of rule-based programs by parallel processing has been studied for a long while, so far the level of parallelism achieved under various parallel processing schemes fails to meet expectations of high performance gains. In the past we have argued that without changing the inherently sequential execution semantics of typical AI rule-based languages, parallel speedup is severely limited. In a previous report, we proposed a new rule language, called PARULEL, that is based upon set-oriented execution semantics intended to increase performance under parallel execution. In order to effectively deal with run-time execution conflicts, we provide a meta-level of control in PARULEL by way of meta redaction rules. This report details a number of simulation studies comparing programs originally implemented in OPS5 and then rewritten in PARULEL. Various measurements made and reported here demonstrate that the execution semantics and conflict resolution mechanism of PARULEL effectively boost parallelism while controlling conflicting rule executions at run-time. The studies also uncover a number of desiderata to be incorporated within the meta redaction rule mechanism of the language. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. L. Forgy. </author> <title> OPS5 User's Manual. </title> <type> Technical Report CMU-CS-81-135, </type> <institution> Carnegie Mellon University, </institution> <month> July </month> <year> 1981. </year>
Reference-contexts: Section 3 of this paper explores the use of PARULEL's parallel execution semantics in three popular rule-based benchmarks to establish the validity of this claim. The syntax of PARULEL's rules is the same as the syntax of OPS5's rules <ref> [1] </ref>. Meta-rules are written in the same style. The LHS of a meta-rule is a list of patterns that are matched against rule instances. The names of the object-level rules take the part of OPS5's class names.
Reference: [2] <author> T. Ishida. </author> <title> Parallel Rule Firing in Production Systems. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(1), </volume> <month> March </month> <year> 1991. </year>
Reference-contexts: Again, as expected, in all cases the number of cycles needed by the OPS5 version are greater than the number of cycles needed by the PARULEL version. Toru Ishida recently reported <ref> [2] </ref> some results on the performance of Waltz on a simulated multiple-rule firing system. His strategy was to divide the rules into rulesets each with possibly different conflict-set strategies. He defined a DON'T-CARE strategy under which rules are fired in parallel.
Reference: [3] <author> S. Kuo and D. Moldovan. </author> <title> Implementation of Multiple Rule Firing Production Systems on Hypercube. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 13(4) </volume> <pages> 383-394, </pages> <year> 1991. </year>
Reference-contexts: As 6 in Waltz, this average as well as the average number of RHS actions per cycle is more dependent on the shape of the input figure than on the size of the input. In another recent work, Kuo and Moldovan <ref> [3] </ref> reported that their system could speedup (in terms of cycles) Toru-Waltz by a factor of 3.18. Averaging the number of cycles reported in tables 4 and 5 we found that our implementation of Toru-Waltz averaged a speed up of 11.2 over the serial implementation.
Reference: [4] <author> P. Norvig. </author> <title> Paradigms of Artificial Intelligence: Case Studies in Common Lisp. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference-contexts: The vertexes of the object can also be classified by their shapes into L, ARROW, FORK, or T vertexes. The labeling of lines and their shape restrict the possible number of labels the lines forming a vertex can have. The reader is referred to <ref> [4] </ref> for a more complete description of the algorithm. The OPS5 version uses as input a list of lines describing the figure. The following steps are executed: 1.
Reference: [5] <author> A. Pasik. </author> <title> A Methodology for Programming Production Systems and its Implications on Parallelism (Ph.D. </title> <type> Thesis). Technical report, </type> <institution> Department of Computer Science, Columbia University, </institution> <year> 1989. </year>
Reference-contexts: The number of cycles needed to run the PARULEL version is consistently lower than the number of cycles needed to run the OPS5 version. In his thesis, Pasik <ref> [5] </ref> found that running Waltz, using as input a figure of size 15, in a multiple-rule firing system, the number of inference cycles went down from 59 cycles in the sequential version to 20 in the later version.
Reference: [6] <author> D. Rosenthal. </author> <title> Adding Meta Rules to OPS5: A Proposed Extension. </title> <journal> SIGPLAN Notices, </journal> <month> October </month> <year> 1985. </year>
Reference-contexts: Matching and firing meta-rules raises the same issues related to the matching and firing of rules. A fast match algorithm can be used to match the meta-rules. Output from the match network used to match the rules can be used as input to the match network for matching meta-rules <ref> [6] </ref>. Also, some synchronization must be done by the underlying rule-interpreter if meta-rules are to be 7 fired in parallel since, for example, two meta-rule in-stances may want to remove the same rule instance from the conflict set, thus creating a "meta-synchronization" problem.

References-found: 6

