URL: http://www.cs.utexas.edu/users/cpg/RTS/papers/ics92.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/cpg/RTS/abs.html
Root-URL: 
Title: Deriving Response-Time Bounds for Equational Rule-Based Programs  
Author: Rwo-Hsi Wang Aloysius K. Mok 
Address: Austin, TX 78712, USA  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: The response time of a rule-based program is defined as the maximum number of rule firings before a fixed point of the program is reached from a start state. In this paper, we present several principles which make use of two relations, potential-trigger and suppression, for deriving tight response-time bounds. While the computation of these two relations is costly in general, we show how they can be efficiently approximated by refining the necessary/sufficient conditions for these relations to be satisfied. A response-time analyzer based on the theories in this paper has been implemented to analyze programs whose potential-trigger relations are acyclic. We demonstrate the analysis process with an example program which has infinite state space. Our analyzer takes only seconds to derive a tight bound on the example program's response time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Browne, J. C., Cheng, A. M. K. and Mok, A. K., </author> <title> "Computer-Aided Design of Real-Time Rule-Based Decision Systems," </title> <note> to appear in IEEE Transactions on Software Engineering. </note>
Reference: [2] <author> Cheng, Albert M. K., "EQL: </author> <title> A Rule-Based Language for Programming Real-Time Decision Systems," </title> <type> technical report, </type> <institution> Dept. of Computer Sciences, Univ. of Texas at Austin, </institution> <month> March </month> <year> 1989. </year>
Reference-contexts: An analysis example is presented in Section 5, followed by concluding remarks and future research topics in Section 6. The source code of the analyzed program is given in the Appendix for reference. 2 The EQL language EQL is a rule-based programming language designed for developing real-time decision systems <ref> [2] </ref>.
Reference: [3] <author> Garey, M. R. and Johnson, D. S., </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: Unfortunately, this is a difficult problem. The NP-complete clique cover problem (also known as PARTITION INTO CLIQUES in <ref> [3] </ref>), can be reduced to this problem by assigning unit weight bound to each vertex and replacing each edge with two opposite, directed edges, given a problem instance.
Reference: [4] <author> Knuth, D. E., </author> <booktitle> The Art of Computer Programming: </booktitle> <volume> Vol. 1, </volume> <booktitle> Fundamental Algorithms, 2nd Ed., </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1973. </year>
Reference-contexts: From the previous lemma we know the sum reported in step 5 is a response-time bound. As for the time complexity, each of steps 1 and 5 takes O (jV j) time. Step 2 can be done in O (jV j + jEj) time. (See <ref> [4] </ref>, for example.) Each vertex is picked once in step 3 and for each vertex its every outgoing edge is traversed once. Thus steps 3 and 4 take O (jV j + jEj) time.
Reference: [5] <author> Mok, Aloysius K., </author> <title> "Formal Analysis of Real-Time Equational Rule-Based Systems," </title> <booktitle> Proceedings of the 10th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1989. </year>
Reference-contexts: 1 Introduction In recent years, there has been increasing interest in the use of rule-based programs in time-critical applications. In these applications, the rule-based program is often used to monitor the environment and must compute an output in response to significant changes that are observed in the environment. In <ref> [5] </ref>, the concept of a response time is defined for the equational rule-based program (EQL) by the number of rule-firings before the program reaches a fixed point (a program state where all the program variables attain stable values). <p> While the strategy in <ref> [5] </ref> is efficient in determining the existence of response-time bounds, much work is still needed for deriving tight bounds. In this paper, we present several principles for deriving tight response-time bounds. These principles make use of relations defined on the rules of a program, namely, the potential-trigger and suppression relations.
Reference: [6] <author> Paul, C. J., Acharya, A., Black, B. and Strosnider, J. K., </author> <title> "Reducing Problem-Solving Variance to Im prove Predictability," </title> <journal> CACM, </journal> <month> August </month> <year> 1991. </year>
Reference-contexts: To demonstrate the utility of this analyzer, we present as an example the analysis of a real-time rule-based program, the CAS (Collision Avoidance System). The CAS application was presented in <ref> [6] </ref> and was originally written in CROPS5. Carried on board of an airplane, CAS listens to the transponder signals from other planes. This information is used by CAS to compute various useful information for generating appropriate advice to the pilot so as to avoid possible collision with nearby planes.
Reference: [7] <author> Tsou, Duu-chung, </author> <title> "Translating the Collision Avoid ance System Program into MRL," </title> <type> technical report, </type> <institution> Dept. of Computer Sciences, Univ. of Texas at Austin, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: Streams are then scheduled to run their second phase according to their assigned priority. To facilitate our analysis, the CROPS5 rules were first translated into MRL 1 rules <ref> [7] </ref>, and then expanded into EQL rules. The 7-rule EQL program corresponding to a stream in phase one is given in Appendix A.
Reference: [8] <author> Wang, Rwo-Hsi, </author> <title> A Customizable Fixed-Point Con vergence Analyzer for Real-Time Rule-Based Sys tems, </title> <type> Master's thesis, </type> <institution> Dept. of Computer Sciences, Univ. of Texas at Austin, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: These conditions themselves can be efficiently approximated. Most of them have been implemented earlier for our another analysis tool <ref> [8] </ref>. 5 Analysis of a collision avoid ance system Based on the bound derivation principles and the approximation conditions presented in this paper we have implemented Response-Time Analyzer for EQL programs.
References-found: 8

