URL: http://www.isi.edu/~gts/paps/ast99.ps.gz
Refering-URL: http://www.isi.edu/~gts/pubs.html
Root-URL: http://www.isi.edu
Email: gat@zurich.ibm.com  sti@zurich.ibm.com  gts@isi.edu  
Title: New Multi-party Authentication Services and Key Agreement Protocols  
Author: Giuseppe Ateniese yz Michael Steiner Gene Tsudik 
Keyword: Key establishment/agreement protocols, Authentication, Decision Diffie-Hellman problem, Dynamic group setting.  
Date: February 5, 1999  
Address: CH-8803 Ruschlikon, Switzerland  CH-8803 Ruschlikon, Switzerland  Marina del Rey, CA 90292  
Affiliation: IBM Research Division, Zurich Research Laboratory  IBM Research Division, Zurich Research Laboratory  USC Information Sciences Institute  
Abstract: Many modern computing environments involve dynamic peer groups. Distributed simulation, multi-user games, conferencing applications and replicated servers are just a few examples. Given the openness of today's networks, communication among peers (group members) must be secure and, at the same time, efficient. This paper studies the problem of authenticated key agreement in dynamic peer groups with the emphasis on efficient and provably secure key authentication, key confirmation and integrity. It begins by considering 2-party authenticated key agreement and extends the results to Group Diffie-Hellman key agreement. In the process, some new security properties (unique to groups) are encountered and discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir and J. Stanton. </author> <title> The Spread Wide Area Group Communication System. </title> <type> Technical Report CNDS 98-4. </type>
Reference-contexts: compromise keys of other sessions, or 2) an active adversary to impersonate one of the protocol parties. (See [8, 7], for details.) The following notation is used throughout the paper: n number of protocol parties (group members) i; j indices of group members M i i-th group member; i 2 <ref> [1; n] </ref> G unique subgroup of ZZ fl p of order q with p; q prime q order of the algebraic group ff exponentiation base; generator 2 in group G x i long-term secret key of M i r i random (secret) exponent 2 ZZ q generated by M i S <p> Round i (0 &lt; i &lt; n): 1) M i selects random r i 2 R ZZ fl q . r 1 r i r j jj 2 <ref> [1; i] </ref>g; ff r 1 r i Round n: 1) M n selects random r n 2 R ZZ fl q . r 1 r n We begin with a brief overview of GDH.2 in Figure 2. <p> We assume that M n shares (or is able to share) with each M i a distinct secret K in . For example, we can set K in = F (ff x i x n modp) with i 2 <ref> [1; n 1] </ref>. Where x i is a secret long term exponent selected by every M i (1 x i q 1) and ff x i mod p is the corresponding long-term public key of M i . <p> Protocol GDH.2-MA: Let M n+1 be the member to be added and M n the group controller 6 . Round 1: 1) M n selects random br n 2 R ZZ fl q br n r i ji 2 <ref> [1; n] </ref>g; ff br n r 1 r n Round 2: 1) M n+1 selects random r n+1 2 R ZZ fl q . br n r i ji 2 [1; n + 1]g Upon receipt of above, every M i computes the new key as usual and stores last flow <p> Round 1: 1) M n selects random br n 2 R ZZ fl q br n r i ji 2 [1; n]g; ff br n r 1 r n Round 2: 1) M n+1 selects random r n+1 2 R ZZ fl q . br n r i ji 2 <ref> [1; n + 1] </ref>g Upon receipt of above, every M i computes the new key as usual and stores last flow for future AKA protocol runs. <p> This information is incrementally updated for an AKA protocol run and re-distributed to the new incarnation of the group. Protocol A-GDH.2-MA: Round 1: 1) M n selects random br n 2 R ZZ fl q . br n r i K in ji 2 <ref> [1; n] </ref>g; ff br n r 1 r n Round 2: 1) M n+1 selects random r n+1 2 R ZZ fl q . br n r i K in K in+1 ji 2 [1; n + 1]g; Upon receipt of above, every M i computes the new key as ff <p> br n 2 R ZZ fl q . br n r i K in ji 2 [1; n]g; ff br n r 1 r n Round 2: 1) M n+1 selects random r n+1 2 R ZZ fl q . br n r i K in K in+1 ji 2 <ref> [1; n + 1] </ref>g; Upon receipt of above, every M i computes the new key as ff ( br n r i K in K in+1 )K 1 in+1 r i = ff br n r 1 r n+1 = S n+1 . and stores last flow for future AKA protocol <p> Moreover, the benefits of BA over the simple key confirmation method sketched in Section 7 are unclear. 17 Finally, we are integrating CLQ API with a reliable group communication layer: SPREAD <ref> [1] </ref>. Developed at Johns Hopkins University, SPREAD supports process group communication. It essentially provided a multicast communication layer that facilitates the development of fault-tolerant distributed applications in both LANs and WANs.
Reference: [2] <author> R. Anderson and S. Vaudenay. </author> <title> Minding your p's and q's. </title> <booktitle> In Advances in Cryptology - Asiacrypt'96, </booktitle> <year> 1996. </year>
Reference-contexts: Most DL-based schemes have been designed using a prime order subgroup. One of the advantages of working in such a group is that all the elements (except the unity element) are generators of the subgroup itself. Moreover, using subgroup of prime order seems to be a prudent habit <ref> [2] </ref>; it also results in increased efficiency. When operating in subgroups it is important to take into account the attacks outlined in [2, 18]. <p> Moreover, using subgroup of prime order seems to be a prudent habit [2]; it also results in increased efficiency. When operating in subgroups it is important to take into account the attacks outlined in <ref> [2, 18] </ref>. To prevent masquerading or leaking of (even partial) information of the secret values, each party has to verify that the purportedly random values it receives are in fact elements of the subgroup. 3 Note that p, q and ff are public and common to all users.
Reference: [3] <author> G. Ateniese, D. Hasse, and G. Tsudik. </author> <title> CLQ API: A Group Key Management API. </title> <note> Preprint 1999. </note>
Reference-contexts: Initial clients for the toolkit may include voice conferencing over IP, replicated Web servers and collaborative (multi-user) simulations. As first tier of this process, we have developed a group key management API called CLQ API <ref> [3] </ref>. CLQ API implements the functions necessary to compute a group key in a distributed fashion. As it performs no communication on its own, CLQ API requires a group communication layer in order to provide reliable and sequenced message delivery.
Reference: [4] <author> C. Becker and U. Wille. </author> <title> Communication complexity of group key distribution. </title> <booktitle> In ACM Conference on Computer and Communication Security, </booktitle> <month> November </month> <year> 1998. </year>
Reference-contexts: Several concrete protocols were demonstrated that fit the requirements of DPGs. Moreover, these protocols are shown to be optimal with respect to certain measures of protocol complexity <ref> [24, 4] </ref>. In this section we extend the GDH protocols to provide implicit key authentication.
Reference: [5] <author> M. Bellare, R. Canetti, and H. Krawczyk. </author> <title> A modular approach to the design and analysis of authentication and key exchange protocols. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <year> 1998. </year>
Reference: [6] <author> M. Bellare and P. Rogaway. </author> <title> Entity authentication and key distribution. </title> <booktitle> In Advances in Cryptology - CRYPTO, </booktitle> <year> 1993. </year>
Reference: [7] <author> M. Burmester. </author> <title> On the risk of opening distributed keys. </title> <booktitle> In Advances in Cryptology - CRYPTO, </booktitle> <year> 1994. </year>
Reference-contexts: result in the compromise of past session keys. 4 Definition 4.8 A protocol is said to be vulnerable to known-key attack if compromise of session keys allows: 1) a passive adversary to compromise keys of other sessions, or 2) an active adversary to impersonate one of the protocol parties. (See <ref> [8, 7] </ref>, for details.) The following notation is used throughout the paper: n number of protocol parties (group members) i; j indices of group members M i i-th group member; i 2 [1; n] G unique subgroup of ZZ fl p of order q with p; q prime q order of <p> Their definition in a group setting remains to be worked out.) Also, as noted in <ref> [7] </ref>, a simple cure for known-key attacks is by setting S n = h (S n (M i )) where h () is an appropriate collision-resistant hash function such as SHA [17]. 5 This assumption is what makes active known-key attacks very unlikely in practice. 9 6.2 Complete (Strong) Group Key
Reference: [8] <author> M. Burmester and Y. Desmedt. </author> <title> Towards practical proven secure authenticated key distribution. </title> <booktitle> In ACM Conference on Computer and Communication Security, </booktitle> <year> 1993. </year>
Reference-contexts: result in the compromise of past session keys. 4 Definition 4.8 A protocol is said to be vulnerable to known-key attack if compromise of session keys allows: 1) a passive adversary to compromise keys of other sessions, or 2) an active adversary to impersonate one of the protocol parties. (See <ref> [8, 7] </ref>, for details.) The following notation is used throughout the paper: n number of protocol parties (group members) i; j indices of group members M i i-th group member; i 2 [1; n] G unique subgroup of ZZ fl p of order q with p; q prime q order of
Reference: [9] <author> M. Burmester and Y. Desmedt. </author> <title> A secure and efficient conference key distribution system. </title> <booktitle> In Advances in Cryptology - EUROCRYPT, </booktitle> <year> 1994. </year>
Reference-contexts: The party M t simply waits v t1 from M t1 and then computes S = v x t t1 . One notable recent result is due to Burmester and Desmedt <ref> [9] </ref>. They construct a very efficient protocol (BD) which executes in only three rounds: 1. Each M i generates its random exponent x i and broadcasts z i = ff x i . 2.
Reference: [10] <author> M. Burmester and Y. Desmedt. </author> <title> Efficient and secure conference key distribution. </title> <booktitle> In Cambridge Workshop on Security Protocols, volume 1189 of Lecture Notes in Computer Science, </booktitle> <pages> pages 119-129. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany, </address> <month> April </month> <year> 1996. </year>
Reference: [11] <author> R. Canetti. </author> <title> Studies in secure multiparty computation and applications. </title> <type> PhD Thesis, </type> <institution> Dept. of Computer Science and Applied Mathematics, Weizmann Institute of Science, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Therefore, we claim that BA alone is not enough to build a robust GKA protocol. 8 On the other hand, GKA has similarities with secure multiparty computation (SMPC, e.g <ref> [11, 12] </ref>). In fact, GKA can be viewed as a special case of SMPC. However, we note that general SMPC techniques typically yield highly inefficient protocols. 9 Current Status This paper presented new definitions and protocols geared for the dynamic peer group (DPG) settings.
Reference: [12] <editor> D. Chaum, C. Crepeau, and I. Damgaard. </editor> <title> Multiparty unconditional secure protocols. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <year> 1988. </year>
Reference-contexts: Therefore, we claim that BA alone is not enough to build a robust GKA protocol. 8 On the other hand, GKA has similarities with secure multiparty computation (SMPC, e.g <ref> [11, 12] </ref>). In fact, GKA can be viewed as a special case of SMPC. However, we note that general SMPC techniques typically yield highly inefficient protocols. 9 Current Status This paper presented new definitions and protocols geared for the dynamic peer group (DPG) settings.
Reference: [13] <author> W. Diffie and M. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-22(6):644-654, </volume> <month> November </month> <year> 1976. </year>
Reference-contexts: The specific security requirements and needs of dynamic peer groups in particular, key management are still considered as open research challenges [22]. Recently, several key agreement protocols geared for DPGs were proposed in [24]. They were obtained by extending the well-known Diffie-Hellman key exchange method <ref> [13] </ref> to groups of n parties. These protocols perform what we refer as initial key agreement (IKA) within a group. Once a group is formed and the initial key is agreed upon, group members may leave (or be excluded) and new members may join. <p> Later on, we will suppose that the adversary C operates on this type of elements. 5 Authenticated 2-party Key Agreement In this section we develop an extension to the Diffie-Hellman (DH) <ref> [13] </ref> key agreement method that provides key authentication.
Reference: [14] <author> A. Fiat and M. Naor. </author> <booktitle> Broadcast Encryption In Advances in Cryptology - CRYPTO, </booktitle> <year> 1993. </year> <month> 18 </month>
Reference-contexts: None of them provide any key authentication services and all are resistant only against passive attacks. Moreover, it is unclear how to add authentication services to these schemes. One mathematically elegant proposal was proposed by Fiat et al. in <ref> [14] </ref>. A trusted center T selects a RSA-like modulus n = pq and a secret element ff 2 ZZ fl n of large multiplicative order (such that it is hard to compute discrete logarithms). <p> Drawbacks of this protocol are that 1) it requires a trusted third party (T ) and, 2) as shown in <ref> [14] </ref>, two or more parties can collude and recover the secret ff. Another interesting scheme was presented in [23].
Reference: [15] <author> N. Koblitz. </author> <title> A Course in Number Theory and Cryptography. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany, Berlin, </address> <year> 1987. </year>
Reference-contexts: Given a and p, finding the inverse of a 2 ZZ fl p requires only O (log 2 p) bit operations (using the extended Euclidean algorithm). Similarly, the multiplication of a and b modulo p requires O (log 2 p) bit operations. (See <ref> [15] </ref>, [21] for a complete treatment of modular operations.) Protocols: Communication Costs: GDH.2 A-GDH.2 A.GDH.2* SA-GDH.2 rounds n n n n broadcasts 1 1 1 1 total msgs n n n n total bandwidth (n 2 + n)=2 1 (n 2 + n)=2 1 n 2 n 2 msgs sent per
Reference: [16] <institution> NIST Computer Systems Laboratory. </institution> <note> Digital signature standard (draft). FIPS PUB 186, </note> <month> May </month> <year> 1994. </year>
Reference-contexts: One approach is to use the NIST method for selecting DSA primes as described in the FIPS 186 document <ref> [16] </ref>. In this context, the ability of an active adversary C to modify or inject messages is quite "limited". <p> This would allow any group member to use DSA <ref> [16] </ref> (or any El Gamal family) signatures to authenticate itself (as a group member) to both insiders and outsiders. The same group public key can be viewed as long-term group Diffie-Hellman exponent and outsiders (including other groups) can establish shared keys with the entire group in a trivial manner.
Reference: [17] <institution> NIST Computer Systems Laboratory. </institution> <note> Secure hash standard (draft). FIPS PUB 180-1, </note> <month> May </month> <year> 1994. </year>
Reference-contexts: Their definition in a group setting remains to be worked out.) Also, as noted in [7], a simple cure for known-key attacks is by setting S n = h (S n (M i )) where h () is an appropriate collision-resistant hash function such as SHA <ref> [17] </ref>. 5 This assumption is what makes active known-key attacks very unlikely in practice. 9 6.2 Complete (Strong) Group Key Authentication The above protocol (A-GDH.2) achieves implicit key authentication in a relatively weak form since the key is not directly authenticated between an arbitrary M i and M j (i 6=
Reference: [18] <author> C. Hoon Lim and P. Joong Lee. </author> <title> A key recovery attack on discrete log-based schemes using a prime order subgroup. </title> <booktitle> In Advances in Cryptology - CRYPTO, </booktitle> <year> 1997. </year>
Reference-contexts: Moreover, using subgroup of prime order seems to be a prudent habit [2]; it also results in increased efficiency. When operating in subgroups it is important to take into account the attacks outlined in <ref> [2, 18] </ref>. To prevent masquerading or leaking of (even partial) information of the secret values, each party has to verify that the purportedly random values it receives are in fact elements of the subgroup. 3 Note that p, q and ff are public and common to all users. <p> Although this seems to be sufficient, the security of this method needs further study <ref> [18] </ref>. 5 Before turning to the actual protocol, it is important to emphasize that there exist secure protocols for authenticated DH-based key agreement.
Reference: [19] <author> N. Lynch. </author> <title> Distributed algorithms. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco 1996. </address>
Reference: [20] <author> T. Matsumoto, Y. Takashima, and H. Imai. </author> <title> On seeking smart public-key-distribution systems. </title> <journal> Transactions of the IECE, </journal> <volume> E69, </volume> <year> 1986. </year>
Reference-contexts: However, some are not contributory (such as El Gamal), some require more messages or assume a priori access to certified long-term keys, while others do not offer PFS or are vulnerable to so-called known-key attacks. (For example, some of the protocols in the MTI protocol family <ref> [20] </ref>.) An additional goal is to come up with a protocol that is easily extendible from 2- to n-party key agreement. Yet another, perhaps superficial, issue has to do with minimizing the security dependencies of a protocol.
Reference: [21] <author> A. Menezes, P. van Oorschot, and S. Vanstone. </author> <title> Handbook of applied cryptography. CRC Press series on discrete mathematics and its applications. </title> <publisher> CRC Press, </publisher> <year> 1996. </year> <note> ISBN 0-8493-8523-7. </note>
Reference-contexts: And, as always, ironclad security must be achievable with the lowest possible cost. We now present some definitions for the above and other terminology used in this paper. (Some of these are adapted from Menezes et al. <ref> [21] </ref>) Definition 4.1 A key agreement protocol is a key establishment technique whereby a shared secret key is derived by two or more specified parties as a function of information contributed by, or associated with, each of these, such that no party can predetermine the resulting value. <p> Definition 4.2 A key agreement protocol is contributory if each party equally contributes to the key and guarantees its freshness. For example, according to this definition, the basic two-party Diffie-Hellman protocol is contributory. On the other hand, the ElGamal one-pass <ref> [21] </ref> protocol is not contributory as only one of the parties contributes a fresh exponent. Definition 4.3 Let R be an n-party key agreement protocol, M be the set of protocol parties and let S n be a secret key jointly generated as a result of R. <p> Given a and p, finding the inverse of a 2 ZZ fl p requires only O (log 2 p) bit operations (using the extended Euclidean algorithm). Similarly, the multiplication of a and b modulo p requires O (log 2 p) bit operations. (See [15], <ref> [21] </ref> for a complete treatment of modular operations.) Protocols: Communication Costs: GDH.2 A-GDH.2 A.GDH.2* SA-GDH.2 rounds n n n n broadcasts 1 1 1 1 total msgs n n n n total bandwidth (n 2 + n)=2 1 (n 2 + n)=2 1 n 2 n 2 msgs sent per M <p> n 1 total inverses n 1 n multiplications for M i 1 1 2n 2 multiplications for M n n 1 n 1 2n 2 total multiplications 2n 2 2n 2 2n 2 2n 7 New Services in Group Setting As mentioned in the introduction, key confirmation (Def. 4.4 and <ref> [21] </ref>) is an important feature in key agreement protocols. Its purpose is to convince one or more parties that its peer (or a group of peers) is in possession of the key.
Reference: [22] <author> J. Smith and F. Weingarten. </author> <title> Research challenges for the next generation internet, </title> <month> May </month> <year> 1997. </year> <note> Report from the Workshop on Research Directions for NGI. </note>
Reference-contexts: The specific security requirements and needs of dynamic peer groups in particular, key management are still considered as open research challenges <ref> [22] </ref>. Recently, several key agreement protocols geared for DPGs were proposed in [24]. They were obtained by extending the well-known Diffie-Hellman key exchange method [13] to groups of n parties. These protocols perform what we refer as initial key agreement (IKA) within a group.
Reference: [23] <author> D. Steer, L. Strawczynski, W. Diffie, and M. Wiener. </author> <title> A secure audio teleconference system. </title> <booktitle> In Advances in Cryptology - CRYPTO, </booktitle> <year> 1988. </year>
Reference-contexts: Drawbacks of this protocol are that 1) it requires a trusted third party (T ) and, 2) as shown in [14], two or more parties can collude and recover the secret ff. Another interesting scheme was presented in <ref> [23] </ref>. Given a g 2 Zp fl with p prime, each party M i computes and broadcasts y i = g x i mod p, where x i is a randomly chosen secret.
Reference: [24] <author> M. Steiner, G. Tsudik, and M. Waidner. </author> <title> Diffie-Hellman key distribution extended to groups. </title> <booktitle> In ACM Conference on Computer and Communication Security, </booktitle> <pages> pages 31-37, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: The specific security requirements and needs of dynamic peer groups in particular, key management are still considered as open research challenges [22]. Recently, several key agreement protocols geared for DPGs were proposed in <ref> [24] </ref>. They were obtained by extending the well-known Diffie-Hellman key exchange method [13] to groups of n parties. These protocols perform what we refer as initial key agreement (IKA) within a group. <p> AKA protocols, also based on Diffie-Hellman extensions, have been developed in [25]. Both IKA and AKA protocols have been shown secure against passive adversaries. (The security is based on the polynomial indistinguishability of a Diffie-Hellman key from an arbitrary random value.) This paper leverages the results of <ref> [24, 25] </ref> to develop practical and secure authenticated key agreement protocols for DPGs. Also considered are other relevant security features such as key confirmation, key integrity and entity authentication. <p> A nice feature of the A-DH protocol is that it does not require a priori knowledge of the long-term public keys of the parties involved. In fact, certificates can be piggy-backed onto existing protocol messages. This is a consequence of the protocol's "asymmetry". 6 Authenticated Group Key Agreement In <ref> [24] </ref>, a class of generic n-party DH protocols is defined. The security of the entire protocol class is shown secure against passive adversaries based on the intractability of the Diffie-Hellman Decision (DDH) problem. Several concrete protocols were demonstrated that fit the requirements of DPGs. <p> Several concrete protocols were demonstrated that fit the requirements of DPGs. Moreover, these protocols are shown to be optimal with respect to certain measures of protocol complexity <ref> [24, 4] </ref>. In this section we extend the GDH protocols to provide implicit key authentication. <p> use of the A-DH protocol discussed in section 5. 4 For example, if this problem were easy, the attacker C could get ff K from the values ff r 2 , ff r 2 K . 7 6.1 Authenticated GDH.2 protocol Two practical protocols: GDH.2 and GDH.3 are defined in <ref> [24] </ref>. (Another protocol, GDH.1, is used for demonstration purposes only.) The GDH.2 protocol is minimal in terms of the total number of protocol messages. GDH.3, on the other hand, aims to minimize computation costs. <p> Proof: Suppose that all long-term keys fK in j i 2 [1; n [ g are compromised. Then, our adversary is able to compute a subset of V = fff (S) j S ae fr 1 ; : : : ; r n gg. But, as shown in <ref> [24] </ref>, given V , it is intractable to find information on the group key S n = ff r 1 ;:::r n , if the DDH problem in prime-order subgroup is hard. Resistance to known-key attacks. <p> The following two tables summarize, respectively, the communication and computation overhead of the following: * GDH.2 plain group key agreement <ref> [24] </ref>. * A-GDH.2 authenticated group key agreement as specified in Section 6.1. <p> We are developing a prototype implementation of the protocols described above. This includes both GDH.2-based and GDH.3-based protocols. (GDH.3 is a key agreement model aimed at minimizing computations by group members <ref> [24] </ref>; protocols presented above are easily grafted onto GDH.3.) One of our central goals is to develop a general-purpose toolkit for key agreement and related security services in DPGs. Initial clients for the toolkit may include voice conferencing over IP, replicated Web servers and collaborative (multi-user) simulations.
Reference: [25] <author> M. Steiner, G. Tsudik, and M. Waidner. </author> <title> CLIQUES: A new approach to group key agreement. </title> <booktitle> In IEEE International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1998. </year> <month> 19 </month>
Reference-contexts: The operations supported by these protocols are collectively called auxiliary key agreement (AKA). AKA protocols, also based on Diffie-Hellman extensions, have been developed in <ref> [25] </ref>. Both IKA and AKA protocols have been shown secure against passive adversaries. (The security is based on the polynomial indistinguishability of a Diffie-Hellman key from an arbitrary random value.) This paper leverages the results of [24, 25] to develop practical and secure authenticated key agreement protocols for DPGs. <p> AKA protocols, also based on Diffie-Hellman extensions, have been developed in [25]. Both IKA and AKA protocols have been shown secure against passive adversaries. (The security is based on the polynomial indistinguishability of a Diffie-Hellman key from an arbitrary random value.) This paper leverages the results of <ref> [24, 25] </ref> to develop practical and secure authenticated key agreement protocols for DPGs. Also considered are other relevant security features such as key confirmation, key integrity and entity authentication. <p> The paper concludes with the discussion of other group security services that are contingent upon authenticated key agreement. 2 Key Establishment Protocols and Related Work Key establishment protocols can be roughly classified in two categories: key agreement protocols <ref> [25] </ref> and (centralized) key distribution protocols based on some form of a trusted third party (TTP). <p> Specifically, it requires each M i to broadcast to the rest of the group and to receive t 1 messages in a single round. Moreover, the system has to handle t simultaneous broadcasts (in one round). As mentioned in Section 1, Steiner et al. <ref> [25] </ref> introduced a class of protocols, called generic Group Diffie-Hellman (GDH) key agreement. This entire class has been proven resistant against passive attacks. In brief, 3 [25] shows that if a 2-party DH key is indistinguishable from a random value then a t-party DH key is also indistinguishable from a random <p> Moreover, the system has to handle t simultaneous broadcasts (in one round). As mentioned in Section 1, Steiner et al. <ref> [25] </ref> introduced a class of protocols, called generic Group Diffie-Hellman (GDH) key agreement. This entire class has been proven resistant against passive attacks. In brief, 3 [25] shows that if a 2-party DH key is indistinguishable from a random value then a t-party DH key is also indistinguishable from a random value. <p> It seems clear that the first approach is expensive, unscalable and utterly unsuitable for environments with frequent membership changes. In <ref> [25] </ref> we showed how the underlying non-authenticated Group Diffie-Hellman key agreement protocols can be extended to achieve very efficient and flexible dynamic operation, i.e. adding/deleting a single member, fusion/fission of sub-groups and re-keying. <p> The extension from unauthenticated to authenticated AKA protocols can be performed in the same straightforward manner also for all other AKA protocol described in <ref> [25] </ref> and will be omitted in the sequel. 7.3 Other Security Services The primary motivation for obtaining a group key (in any manner; whether centralized or contributory) is the ability to communicate securely and efficiently once a key is established.
References-found: 25

