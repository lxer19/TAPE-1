URL: http://www.cs.unc.edu/~prins/docs/TR91-041.ps
Refering-URL: http://www.cs.unc.edu/~prins/algs.html
Root-URL: http://www.cs.unc.edu
Title: Efficient Bitonic Sorting of Large Arrays on the MasPar MP-1  
Author: Jan F. Prins 
Keyword: SIMD computing, parallel sorting, Bitonic sort, virtualization, domain decomposition, addressing autonomy, MasPar MP-1.  
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science University of North Carolina  
Pubnum: TR91 041  
Abstract: The problem of sorting a collection of values on a mesh-connected distributed-memory SIMD computer using variants of Batcher's Bitonic sort algorithm is considered for the case where the number of values exceeds the number of processors in the machine. In this setting the number of comparisons can be reduced asymptotically if the processors have addressing autonomy (locally indirect addressing), and communication costs can be reduced by careful placement of the data values. We report on the implementation of several related adaptations of Bitonic sort on a MasPar MP-1. 
Abstract-found: 1
Intro-found: 1
Reference: [Bat68] <author> K.E. Batcher, </author> <title> "Sorting networks and their applications," </title> <booktitle> in Spring Joint Computer Conf., AFIPS Proc., </booktitle> <address> vol.32, </address> <year> 1968, </year> <month> pp.307-314. </month>
Reference-contexts: 1. Introduction Many parallel sorting algorithms have been developed to sort P values on a distributed-memory SIMD machine with P processors connected in an `` P `` P mesh. The most widely known of these algorithms are adaptations of Batcher's Bitonic sort <ref> [Bat68] </ref> or closely related algorithms such as odd-even merge [Bat68] to the mesh [Kum83, Nas79, Tho77]. All of these approaches perform O (log 2 P) parallel comparisons and make these comparisons using the mesh interconnections in a way that yields communication costs proportional to O ( `` P). <p> The most widely known of these algorithms are adaptations of Batcher's Bitonic sort <ref> [Bat68] </ref> or closely related algorithms such as odd-even merge [Bat68] to the mesh [Kum83, Nas79, Tho77]. All of these approaches perform O (log 2 P) parallel comparisons and make these comparisons using the mesh interconnections in a way that yields communication costs proportional to O ( `` P). <p> The Varying Hypercube virtualization was implemented with two intitial embeddings (FLA and XNET). The following remarks are based on the implementations described above. initial sort For the initial onetime intraprocessor sort in sequence virtualization we used a merge-exchange sort [Dij87] <ref> [Bat68] </ref>, which is an O (n log 2 n) sort. Although it is possible to write an asymptotically better merge sort as suggested in the previous section, the constants are worse for achievable values of N/P with the current per-processor memory size.
Reference: [Bat81] <author> K.E. Batcher, </author> <title> "Design of a Massively Parallel Processor", </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-29(9), </volume> <year> 1981, </year> <month> p836-840. </month>
Reference-contexts: In the conclusions section we briefly compare the performance of our Bitonic sort implementations with implementations of these algorithms. The target of this work is the MasPar MP-1, a mesh-connected SIMD computer. The MP-1 evolved from the MPP <ref> [Bat81] </ref> and Blitzen [Ble88] but includes some additional features. The aspects of this machine that are important for our purposes are: integrated controller The parallel portion of the machine consists of a fully-programmable controller and an array of processing elements.
Reference: [Ble88] <author> D.W. Blevins, E.W. Davis, R.A. Heaton, J. Reif, "BLITZEN: </author> <title> A highly integrated massively parallel machine", </title> <booktitle> Proc. Frontiers88, IEEE 1988. </booktitle> <pages> 16 </pages>
Reference-contexts: In the conclusions section we briefly compare the performance of our Bitonic sort implementations with implementations of these algorithms. The target of this work is the MasPar MP-1, a mesh-connected SIMD computer. The MP-1 evolved from the MPP [Bat81] and Blitzen <ref> [Ble88] </ref> but includes some additional features. The aspects of this machine that are important for our purposes are: integrated controller The parallel portion of the machine consists of a fully-programmable controller and an array of processing elements.
Reference: [BL+91] <author> G.E. Blelloch, C.E. Leiserson, B.M. Maggs, C.G. Plaxton, S.J. Smith, and M. </author> <title> Zagha; A Comparison of Sorting Algorithms for the Connection Machine CM-2; 3rd Annual ACM Symposium on Parallel Algorithms and Architectures, </title> <address> July 21-24, 1991, Hilton Head, SC. </address>
Reference-contexts: As can be seen in Figure 7, this implementation achieves nearly the same performance as the xnet embedding. The vbsort implementation of bitonic sort is fast and the most usable sort we have developed on MasPar MP-1 machines to date. We also undertook implementation of radix and samplesort <ref> [BL+91] </ref>.
Reference: [Bau78] <author> G. Baudet and D. Stevenson, </author> <title> "Optimal sorting algorithms for parallel computers", </title> <journal> IEEE Trans. Comput., vol.C-27, no.1, </journal> <volume> pp.84-87, </volume> <month> Jan. </month> <year> 1978. </year>
Reference-contexts: Thus, sequence virtualization performs O P P compare operations which is an asymptotic improvement over (1) for large values of N compared to P , and achieves optimal speedup with respect to the sequential algorithm.when P is less than (log N / log log N) 2 <ref> [Bau78] </ref>.
Reference: [Dij87] <author> E.W. Dijkstra, </author> <title> "A heuristic explanation of Batcher's Baffler", </title> <editor> EWD953 U. </editor> <address> Texas Austin. </address>
Reference-contexts: The Varying Hypercube virtualization was implemented with two intitial embeddings (FLA and XNET). The following remarks are based on the implementations described above. initial sort For the initial onetime intraprocessor sort in sequence virtualization we used a merge-exchange sort <ref> [Dij87] </ref> [Bat68], which is an O (n log 2 n) sort. Although it is possible to write an asymptotically better merge sort as suggested in the previous section, the constants are worse for achievable values of N/P with the current per-processor memory size.
Reference: [Fla82] <author> P.M. Flanders, </author> <title> "A unified approach to a class of data movements on an array processor", </title> <journal> IEEE Trans. Comput., vol.C-31, </journal> <volume> no.9, </volume> <month> Sep. </month> <year> 1982. </year>
Reference-contexts: The xnet embedding uses these connections on a square mesh [Law90]. Its stride function is given by C xn (i) = 1directionNE,ifi=1 1directionSE,ifi=2 1directionE,ifi=3 2 ((i-2)/2) directionNE,ifieven 2 ((i-3)/2) directionSE,ifiodd and results in lower communication cost than either of the other embeddings. Finally, as pointed out in <ref> [Fla82] </ref>, it is not necessary that the embedding be fixed throughout the course of the algorithm.
Reference: [Kum83] <author> M. Kumar and D.S. Hirschberg, </author> <title> "An efficient implementation of Batcher's odd-even merge algorithm and its application in parallel sorting schemes," </title> <journal> IEEE Trans. Comput., </journal> <volume> vol.C-32, </volume> <month> Mar. </month> <year> 1983. </year>
Reference-contexts: The most widely known of these algorithms are adaptations of Batcher's Bitonic sort [Bat68] or closely related algorithms such as odd-even merge [Bat68] to the mesh <ref> [Kum83, Nas79, Tho77] </ref>. All of these approaches perform O (log 2 P) parallel comparisons and make these comparisons using the mesh interconnections in a way that yields communication costs proportional to O ( `` P).
Reference: [Knu&3] <author> D.E. Knuth, </author> <title> "The Art of Computer Programming, vol-3 Searching and Sorting" Addison-Wesley, </title> <year> 1973. </year>
Reference: [Kun88] <author> M. </author> <title> Kunde Routing and sorting on mesh connected arrays", in VLSI Algorithms and Arch., </title> <editor> J.H. Reif, ed. </editor> , <publisher> LNCS 319, Springer-Verlag 1988. </publisher>
Reference-contexts: There are, however, other sorting algorithms that might be considered. A number of algorithms have been developed specifically to reduce the communication cost toward the lower bound of 4 `` P communication steps on a mesh without wraparound or diagonal connections <ref> [Pla89, Sch89, Kun88] </ref>. Other algorithms reduce the number of comparisons when NP to achieve optimal speedup with respect to the optimal sequential algorithm.
Reference: [Law90] <author> P. A. Lawrence, </author> <type> personal communication. </type>
Reference-contexts: Thus far we have treated the MP-1 only as a mesh-connected machine, and have ignored diagonal connections and the torus topology. The xnet embedding uses these connections on a square mesh <ref> [Law90] </ref>. Its stride function is given by C xn (i) = 1directionNE,ifi=1 1directionSE,ifi=2 1directionE,ifi=3 2 ((i-2)/2) directionNE,ifieven 2 ((i-3)/2) directionSE,ifiodd and results in lower communication cost than either of the other embeddings.
Reference: [Mas90] <author> MasPar Computer Corporation, </author> <title> "MasPar Parallel Application Language (MPL) Reference Manual", 2nd beta edition, </title> <booktitle> Doc #9302-0000-0690, </booktitle> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: The instruction stream specifies operations for the processing elements in the array as well as operations for an integrated 32-bit general-purpose scalar processor. The scalar processor permits algorithms with complex sequential control to be executed without interaction with the host processor. The MPL programming language <ref> [Mas90] </ref> is a data-parallel extension of C that is used to program the parallel portion exclusively, and is a language roughly at the level of *Lisp for the Connection Machine. nearest-neighbor and global communication Processors are arranged on a 2-D torus, with each processor connected directly to its eight nearest neighbors.
Reference: [Nas79] <author> D. Nassimi and S. Sahni, </author> <title> "Bitonic sort on a mesh-connected parallel computer," </title> <journal> IEEE Trans. Comput., vol.C-27, no.1, </journal> <volume> pp.2-7, </volume> <month> Jan. </month> <year> 1979. </year>
Reference-contexts: The most widely known of these algorithms are adaptations of Batcher's Bitonic sort [Bat68] or closely related algorithms such as odd-even merge [Bat68] to the mesh <ref> [Kum83, Nas79, Tho77] </ref>. All of these approaches perform O (log 2 P) parallel comparisons and make these comparisons using the mesh interconnections in a way that yields communication costs proportional to O ( `` P).
Reference: [Sch79] <author> I.D. Scherson and S. Sen, </author> <title> "Parallel sorting in two-dimensional VLSI models of computation," </title> <journal> IEEE Trans. Comput., vol.38, no.2, </journal> <volume> pp.238-249, </volume> <month> Feb. </month> <year> 1989. </year>
Reference: [Sto71] <author> H.S. Stone, </author> <title> "Parallel processing with the perfect shuffle," </title> <journal> IEEE Trans. Comput., </journal> <volume> vol C-20, pp.153-161, </volume> <year> Feb.1971. </year>
Reference: [Tho77] <author> C.D.Thompson and H.T.Kung, </author> <title> "Sorting on a mesh-connected parallel computer," </title> <journal> CACM, vol.20, </journal> <volume> pp.263-271, </volume> <month> Apr. </month> <year> 1977. </year>
Reference-contexts: The most widely known of these algorithms are adaptations of Batcher's Bitonic sort [Bat68] or closely related algorithms such as odd-even merge [Bat68] to the mesh <ref> [Kum83, Nas79, Tho77] </ref>. All of these approaches perform O (log 2 P) parallel comparisons and make these comparisons using the mesh interconnections in a way that yields communication costs proportional to O ( `` P).
References-found: 16

