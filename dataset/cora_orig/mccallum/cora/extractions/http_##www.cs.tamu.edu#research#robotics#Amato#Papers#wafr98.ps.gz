URL: http://www.cs.tamu.edu/research/robotics/Amato/Papers/wafr98.ps.gz
Refering-URL: http://www.cs.tamu.edu/faculty/amato/dsmft/publications.html
Root-URL: http://www.cs.tamu.edu
Title: OBPRM: An Obstacle-Based PRM for 3D Workspaces  
Author: Nancy M. Amato, O. Burchan Bayazit, Lucia K. Dale, Christopher Jones, Daniel Vallejo, 
Address: College Station, TX, USA  College Station, TX, USA  College Station, TX, USA  College Station, TX, USA  College Station, TX, USA  
Affiliation: Texas A&M University,  Texas A&M University,  Texas A&M University,  Texas A&M University,  Texas A&M University,  
Abstract: Recently, a new class of randomized path planning methods, known as Probabilistic Roadmap Methods (prms) have shown great potential for solving complicated high-dimensional problems. prms use randomization (usually during preprocessing) to construct a graph of representative paths in C-space (a roadmap) whose vertices correspond to collision-free configurations of the robot and in which two vertices are connected by an edge if a path between the two corresponding configurations can be found by a local planning method. This work describes and evaluates various node generation and connection strategies for one such prm, the obstacle-based probabilistic roadmap method (obprm), in cluttered 3-dimensional Workspaces. Various node generation strategies are evaluated in terms of their ability to produce nodes in difficult regions of C-space; our results include recommendations for selecting appropriate node generation strategies for different types of objects, and a default strategy for use when objects cannot be classified easily. We also propose and analyze a multi-stage strategy for connecting the roadmap nodes; the use of different local planners at different stages is shown to enhance the connectivity of the resulting roadmap significantly. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. M. Ahuactzin and K. Gupta. </author> <title> A motion planning based approach for inverse kinematics of redundant robots: The kinematic roadmap. </title> <booktitle> In Proc. IEEE In-ternat. Conf. Robot. Autom., </booktitle> <pages> pages 3609-3614, </pages> <year> 1997. </year>
Reference-contexts: Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., <ref> [1, 3, 10, 15, 17, 19, 20] </ref>). These methods, known as probabilistic roadmap methods (prms), use randomization (usually during preprocessing) to construct a graph in C-space (a roadmap [18]). Roadmap nodes correspond to collision-free configurations of the robot.
Reference: [2] <author> N. M. Amato, O. B. Bayazit, L. K. Dale, C. V. Jones, and D. Vallejo. </author> <title> Choosing good distance metrics and local planners for probabilistic roadmap methods. </title> <booktitle> In Proc. IEEE Internat. Conf. </booktitle> <institution> Robot. Autom., </institution> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: Distance metrics are used to determine which pairs of nodes one should try to connect. The local planners and distance metrics used in obprm are based on recommendations from <ref> [2] </ref>. The distance metric we use is scaled Euclidean distance in C-space (the scale places more or less weight on the position coordinates). The local planners currently implemented in obprm are the common straight-line in C-space, three versions of a (parameterized) planner proposed in [2] called rotate-at-s (0 s 1), and <p> obprm are based on recommendations from <ref> [2] </ref>. The distance metric we use is scaled Euclidean distance in C-space (the scale places more or less weight on the position coordinates). The local planners currently implemented in obprm are the common straight-line in C-space, three versions of a (parameterized) planner proposed in [2] called rotate-at-s (0 s 1), and some A fl -like methods (see, e.g., [7, 8, 12, 13, 22]). <p> Overviews of the strategies applied in each stage are described below. Within each stage, there are still several choices to be made, such as, for example, which local planner (s) and distance metric (s) to use. Based on the findings in <ref> [2] </ref>, the current implementation of N. Amato, O. Bayazit, L. Dale, C. Jones, D. Vallejo obprm uses a scaled Euclidean distance metric and employs multiple local planners (see Section 2).
Reference: [3] <author> N. M. Amato and Y. Wu. </author> <title> A randomized roadmap method for path and manipulation planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 113-120, </pages> <address> Minneapolis, MN, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., <ref> [1, 3, 10, 15, 17, 19, 20] </ref>). These methods, known as probabilistic roadmap methods (prms), use randomization (usually during preprocessing) to construct a graph in C-space (a roadmap [18]). Roadmap nodes correspond to collision-free configurations of the robot. <p> Query Processing 1. Connect start/goal to roadmap 2. Find path in roadmap between connection nodes prms have been shown to perform well in practice. In particular, after the roadmap is constructed during preprocessing, many difficult planning queries can be answered in fractions of seconds <ref> [3, 17] </ref>. Although prms N. Amato, O. Bayazit, L. Dale, C. Jones, D. Vallejo are particularly suitable when multiple queries will be answered in the same static environment, the general prm strategy can be used to solve single queries by only constructing `useful' portions of the roadmap [10, 20]. <p> Indeed, even though most prms greatly limit the number of connections at tempted (say, to ten for each node), they still typically spend more than 95% of their preprocessing time in the connection phase <ref> [3, 17] </ref>. The general strategy of prms is to first make as many of the `easy' and `cheap' connections as possible, and then to use more sophisticated techniques to improve the roadmap's quality. <p> by some distance metric) using the common straight-line in C-space local planner, and then attempts to enhance the roadmap by sampling more nodes in identified `difficult' regions and/or by using more sophisticated local planners such as RPP [4]. 1.1 Our Results In this paper we consider an obstacle-based prm (obprm) <ref> [3, 23] </ref> which samples points on or near C-obstacle surfaces. Even though the prototype implementation of obprm for planar articulated robots employed only the simplest node generation and connection strategies, it established that obprm was a promising method for planning in cluttered environments. <p> Although significantly more expensive than the other planners, the A fl -like methods can sometimes make connections the others can not by `feeling' their way along in tight places. 3 Node Generation in OBPRM The prototype version of obprm <ref> [3, 23] </ref> for a many-dof articulated robot in a 2-dimensional Workspace used a simple strategy to generate nodes on contact surfaces. Briefly, for each obstacle X: Prototype NodeGeneration 1. c in := colliding robot cfg with C-obstacle X 2.
Reference: [4] <author> J. Barraquand and J.-C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <journal> Internat. J. Robot. Res., </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: For this reason, attention has focussed on randomized or probabilistic motion planning methods. Notable among these are randomized potential field methods (e.g., RPP <ref> [4] </ref>), which work very well when the configuration space (C-space) is relatively uncluttered, but unfortunately there also exist simple situations in which they are not successful [5, 15]. Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., [1, 3, 10, 15, 17, 19, 20]). <p> to connect each node to the k (a parameter) closest nodes (as determined by some distance metric) using the common straight-line in C-space local planner, and then attempts to enhance the roadmap by sampling more nodes in identified `difficult' regions and/or by using more sophisticated local planners such as RPP <ref> [4] </ref>. 1.1 Our Results In this paper we consider an obstacle-based prm (obprm) [3, 23] which samples points on or near C-obstacle surfaces.
Reference: [5] <author> D. J. Challou, M. Gini, and V. Kumar. </author> <title> Parallel search algorithms for robot motion planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <volume> volume 2, </volume> <pages> pages 46-51, </pages> <year> 1993. </year>
Reference-contexts: For this reason, attention has focussed on randomized or probabilistic motion planning methods. Notable among these are randomized potential field methods (e.g., RPP [4]), which work very well when the configuration space (C-space) is relatively uncluttered, but unfortunately there also exist simple situations in which they are not successful <ref> [5, 15] </ref>. Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., [1, 3, 10, 15, 17, 19, 20]). These methods, known as probabilistic roadmap methods (prms), use randomization (usually during preprocessing) to construct a graph in C-space (a roadmap [18]).
Reference: [6] <author> H. Chang and T. Y. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 1012-1019, </pages> <year> 1995. </year>
Reference-contexts: Here, we describe several more sophisticated strategies for the node generation and connection phases, and provide an evaluation of a more mature implementation of the method for cluttered 3-dimensional Workspaces, typical, e.g., of mechanical designs <ref> [6] </ref>. The moving objects (robots) are rigid, non-articulated objects yielding six-dimensional C-spaces. Although we concentrate on obprm, we believe the techniques proposed here will be useful for prms in general, and for other motion planning approaches as well.
Reference: [7] <author> P. C. Chen and Y. K. Hwang. SANDROS: </author> <title> A motion planner with performance proportional to task difficulty. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 2346-2353, </pages> <year> 1992. </year>
Reference-contexts: The local planners currently implemented in obprm are the common straight-line in C-space, three versions of a (parameterized) planner proposed in [2] called rotate-at-s (0 s 1), and some A fl -like methods (see, e.g., <ref> [7, 8, 12, 13, 22] </ref>). The suggested order to apply these planners was: first straight-line and rotate-at- 1 2 (the most successful planners), next rotate-at-0 and rotate-at-1, and finally, the more expensive A fl - like planners, which try to fill in gaps left by the faster planners. rotate-at-s.
Reference: [8] <author> B. Glavina. </author> <title> Solving findpath by combination of directed and randomized search. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 1718-1723, </pages> <year> 1990. </year>
Reference-contexts: The local planners currently implemented in obprm are the common straight-line in C-space, three versions of a (parameterized) planner proposed in [2] called rotate-at-s (0 s 1), and some A fl -like methods (see, e.g., <ref> [7, 8, 12, 13, 22] </ref>). The suggested order to apply these planners was: first straight-line and rotate-at- 1 2 (the most successful planners), next rotate-at-0 and rotate-at-1, and finally, the more expensive A fl - like planners, which try to fill in gaps left by the faster planners. rotate-at-s.
Reference: [9] <author> T. Horsch, F. Schwarz, and H. Tolle. </author> <title> Motion planning for many degrees of freedom random reflections at c-space obstacles. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 3318-3323, </pages> <year> 1994. </year>
Reference-contexts: To obtain improved roadmaps in crowded situations, some prms use information about the environment to guide node generation. Examples include executing random reflections at C-obstacle surfaces <ref> [9] </ref>, and a technique called geometric node adding [20] for generating configurations of non-articulated robots near Workspace obstacle boundaries. Connection. After the collision-free roadmap candidate nodes are generated, they must be connected to form the roadmap.
Reference: [10] <author> D. Hsu, J-C. Latombe, and R. Motwani. </author> <title> Path planning in expansive configuration spaces. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 2719-2726, </pages> <year> 1997. </year>
Reference-contexts: Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., <ref> [1, 3, 10, 15, 17, 19, 20] </ref>). These methods, known as probabilistic roadmap methods (prms), use randomization (usually during preprocessing) to construct a graph in C-space (a roadmap [18]). Roadmap nodes correspond to collision-free configurations of the robot. <p> Although prms N. Amato, O. Bayazit, L. Dale, C. Jones, D. Vallejo are particularly suitable when multiple queries will be answered in the same static environment, the general prm strategy can be used to solve single queries by only constructing `useful' portions of the roadmap <ref> [10, 20] </ref>. Node Generation. Node generation strategies are the methods used to select collision-free robot configurations to be used as nodes in the roadmap. A good node generation strategy will produce nodes that can be connected to form a roadmap that is representative of the connectivity and complexity of C-free. <p> We seek empirical evidence due to the randomized nature of prms, which makes them difficult to analyze. Recently, a number of attempts have been made to theoretically explain the success of prms (see, e.g., <ref> [10, 14, 16] </ref>). However, these studies generally make simplifying assumptions regarding the nature of the C-space and/or the prm components (e.g., local planner), and therefore unfortunately cannot be applied to obprm. 2 Preliminaries The moving objects (robots) considered in this paper are rigid objects in three-space. <p> The motivation is to `grow' the connected components so that it will be easier to make connections between them. This stage is similar to the `enhancement' methods used in prms <ref> [17, 10] </ref>. OBPRM: An Obstacle-Based PRM for 3D Workspaces Currently, two different stage 3 strategies are implemented in obprm. They may be used either independently, or in series. Stage 3-fp: Expanding failed paths.
Reference: [11] <author> Y. Hwang and N. Ahuja. </author> <title> Gross motion planning - a survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 219-291, </pages> <year> 1992. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computationally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [11, 18] </ref>. Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) will require time that is exponential in the number of dof of the robot [21].
Reference: [12] <author> Y. K. Hwang and N. Ahuja. </author> <title> A potential field approach to path planning. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 8(1) </volume> <pages> 23-32, </pages> <year> 1992. </year>
Reference-contexts: The local planners currently implemented in obprm are the common straight-line in C-space, three versions of a (parameterized) planner proposed in [2] called rotate-at-s (0 s 1), and some A fl -like methods (see, e.g., <ref> [7, 8, 12, 13, 22] </ref>). The suggested order to apply these planners was: first straight-line and rotate-at- 1 2 (the most successful planners), next rotate-at-0 and rotate-at-1, and finally, the more expensive A fl - like planners, which try to fill in gaps left by the faster planners. rotate-at-s.
Reference: [13] <author> Y. K. Hwang and P. C. Chen. </author> <title> A heuristic and complete planner for the classical mover's problem. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 729-736, </pages> <year> 1995. </year>
Reference-contexts: The local planners currently implemented in obprm are the common straight-line in C-space, three versions of a (parameterized) planner proposed in [2] called rotate-at-s (0 s 1), and some A fl -like methods (see, e.g., <ref> [7, 8, 12, 13, 22] </ref>). The suggested order to apply these planners was: first straight-line and rotate-at- 1 2 (the most successful planners), next rotate-at-0 and rotate-at-1, and finally, the more expensive A fl - like planners, which try to fill in gaps left by the faster planners. rotate-at-s.
Reference: [14] <author> L. Kavraki, M. Kolountzakis, and J.-C. Latombe. </author> <title> Analysis of probabilistic roadmaps for path planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <volume> volume 4, </volume> <pages> pages 3020-3025, </pages> <year> 1996. </year>
Reference-contexts: We seek empirical evidence due to the randomized nature of prms, which makes them difficult to analyze. Recently, a number of attempts have been made to theoretically explain the success of prms (see, e.g., <ref> [10, 14, 16] </ref>). However, these studies generally make simplifying assumptions regarding the nature of the C-space and/or the prm components (e.g., local planner), and therefore unfortunately cannot be applied to obprm. 2 Preliminaries The moving objects (robots) considered in this paper are rigid objects in three-space.
Reference: [15] <author> L. Kavraki and J. C. Latombe. </author> <title> Randomized preprocessing of configuration space for fast path planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 2138-2145, </pages> <year> 1994. </year>
Reference-contexts: For this reason, attention has focussed on randomized or probabilistic motion planning methods. Notable among these are randomized potential field methods (e.g., RPP [4]), which work very well when the configuration space (C-space) is relatively uncluttered, but unfortunately there also exist simple situations in which they are not successful <ref> [5, 15] </ref>. Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., [1, 3, 10, 15, 17, 19, 20]). These methods, known as probabilistic roadmap methods (prms), use randomization (usually during preprocessing) to construct a graph in C-space (a roadmap [18]). <p> Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., <ref> [1, 3, 10, 15, 17, 19, 20] </ref>). These methods, known as probabilistic roadmap methods (prms), use randomization (usually during preprocessing) to construct a graph in C-space (a roadmap [18]). Roadmap nodes correspond to collision-free configurations of the robot. <p> Ideally, the roadmap should contain nodes in every C-space crevice and corridor. However, guaranteeing this requires the costly computation of the constraint surfaces | which is what randomized methods seek to avoid. The first prms <ref> [15, 17] </ref> use uniform sampling in C-space to generate roadmap candidate nodes (collision-free configurations are retained); roadmaps are enhanced by further sampling in `difficult' regions. These methods perform well for general many-dof robots. <p> The general strategy of prms is to first make as many of the `easy' and `cheap' connections as possible, and then to use more sophisticated techniques to improve the roadmap's quality. For example, the prm of <ref> [15, 17] </ref> first tries to connect each node to the k (a parameter) closest nodes (as determined by some distance metric) using the common straight-line in C-space local planner, and then attempts to enhance the roadmap by sampling more nodes in identified `difficult' regions and/or by using more sophisticated local planners
Reference: [16] <author> L. Kavraki, J. C. Latombe, R. Motwani, and P. Ragha-van. </author> <title> Randomized query preprocessing in robot path planning. </title> <booktitle> In Proc. ACM Symp. Theory of Computing, </booktitle> <pages> pages 353-362, </pages> <year> 1995. </year>
Reference-contexts: We seek empirical evidence due to the randomized nature of prms, which makes them difficult to analyze. Recently, a number of attempts have been made to theoretically explain the success of prms (see, e.g., <ref> [10, 14, 16] </ref>). However, these studies generally make simplifying assumptions regarding the nature of the C-space and/or the prm components (e.g., local planner), and therefore unfortunately cannot be applied to obprm. 2 Preliminaries The moving objects (robots) considered in this paper are rigid objects in three-space.
Reference: [17] <author> L. Kavraki, P. Svestka, J. C. Latombe, and M. Over-mars. </author> <title> Probabilistic roadmaps for path planning in high-dimensional configuration spaces. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 12(4) </volume> <pages> 566-580, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., <ref> [1, 3, 10, 15, 17, 19, 20] </ref>). These methods, known as probabilistic roadmap methods (prms), use randomization (usually during preprocessing) to construct a graph in C-space (a roadmap [18]). Roadmap nodes correspond to collision-free configurations of the robot. <p> Query Processing 1. Connect start/goal to roadmap 2. Find path in roadmap between connection nodes prms have been shown to perform well in practice. In particular, after the roadmap is constructed during preprocessing, many difficult planning queries can be answered in fractions of seconds <ref> [3, 17] </ref>. Although prms N. Amato, O. Bayazit, L. Dale, C. Jones, D. Vallejo are particularly suitable when multiple queries will be answered in the same static environment, the general prm strategy can be used to solve single queries by only constructing `useful' portions of the roadmap [10, 20]. <p> Ideally, the roadmap should contain nodes in every C-space crevice and corridor. However, guaranteeing this requires the costly computation of the constraint surfaces | which is what randomized methods seek to avoid. The first prms <ref> [15, 17] </ref> use uniform sampling in C-space to generate roadmap candidate nodes (collision-free configurations are retained); roadmaps are enhanced by further sampling in `difficult' regions. These methods perform well for general many-dof robots. <p> Indeed, even though most prms greatly limit the number of connections at tempted (say, to ten for each node), they still typically spend more than 95% of their preprocessing time in the connection phase <ref> [3, 17] </ref>. The general strategy of prms is to first make as many of the `easy' and `cheap' connections as possible, and then to use more sophisticated techniques to improve the roadmap's quality. <p> The general strategy of prms is to first make as many of the `easy' and `cheap' connections as possible, and then to use more sophisticated techniques to improve the roadmap's quality. For example, the prm of <ref> [15, 17] </ref> first tries to connect each node to the k (a parameter) closest nodes (as determined by some distance metric) using the common straight-line in C-space local planner, and then attempts to enhance the roadmap by sampling more nodes in identified `difficult' regions and/or by using more sophisticated local planners <p> We refer to s as the number of shells generated for the object (as they will hopefully encase the object). 4 Roadmap Connection in OBPRM The first prms attempt connections between each node and the k (e.g., 10) closest nodes to it (as determined by some distance metric) <ref> [17] </ref>. This is a natural approach to take since initially there is little to differentiate one configuration from another. <p> The motivation is to `grow' the connected components so that it will be easier to make connections between them. This stage is similar to the `enhancement' methods used in prms <ref> [17, 10] </ref>. OBPRM: An Obstacle-Based PRM for 3D Workspaces Currently, two different stage 3 strategies are implemented in obprm. They may be used either independently, or in series. Stage 3-fp: Expanding failed paths.
Reference: [18] <author> J. C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computationally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [11, 18] </ref>. Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) will require time that is exponential in the number of dof of the robot [21]. <p> Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., [1, 3, 10, 15, 17, 19, 20]). These methods, known as probabilistic roadmap methods (prms), use randomization (usually during preprocessing) to construct a graph in C-space (a roadmap <ref> [18] </ref>). Roadmap nodes correspond to collision-free configurations of the robot. Two nodes are connected by an edge if a path between the two corresponding configurations can be found by a local planning method.
Reference: [19] <author> M. Overmars. </author> <title> A random approach to path planning. </title> <type> Technical Report RUU-CS-92-32, </type> <institution> Computer Science, Utrecht University, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., <ref> [1, 3, 10, 15, 17, 19, 20] </ref>). These methods, known as probabilistic roadmap methods (prms), use randomization (usually during preprocessing) to construct a graph in C-space (a roadmap [18]). Roadmap nodes correspond to collision-free configurations of the robot.
Reference: [20] <author> M. Overmars and P. Svestka. </author> <title> A probabilistic learning approach to motion planning. </title> <booktitle> In Proc. Workshop on Algorithmic Foundations of Robotics, </booktitle> <pages> pages 19-37, </pages> <year> 1994. </year>
Reference-contexts: Recently, a new class of randomized motion planning methods has gained much attention (see, e.g., <ref> [1, 3, 10, 15, 17, 19, 20] </ref>). These methods, known as probabilistic roadmap methods (prms), use randomization (usually during preprocessing) to construct a graph in C-space (a roadmap [18]). Roadmap nodes correspond to collision-free configurations of the robot. <p> Although prms N. Amato, O. Bayazit, L. Dale, C. Jones, D. Vallejo are particularly suitable when multiple queries will be answered in the same static environment, the general prm strategy can be used to solve single queries by only constructing `useful' portions of the roadmap <ref> [10, 20] </ref>. Node Generation. Node generation strategies are the methods used to select collision-free robot configurations to be used as nodes in the roadmap. A good node generation strategy will produce nodes that can be connected to form a roadmap that is representative of the connectivity and complexity of C-free. <p> To obtain improved roadmaps in crowded situations, some prms use information about the environment to guide node generation. Examples include executing random reflections at C-obstacle surfaces [9], and a technique called geometric node adding <ref> [20] </ref> for generating configurations of non-articulated robots near Workspace obstacle boundaries. Connection. After the collision-free roadmap candidate nodes are generated, they must be connected to form the roadmap.
Reference: [21] <author> J. Reif. </author> <title> Complexity of the piano mover's problem and generalizations. </title> <booktitle> In Proc. IEEE Symp. Foundations of Computer Science, </booktitle> <pages> pages 421-427, </pages> <year> 1979. </year>
Reference-contexts: Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) will require time that is exponential in the number of dof of the robot <ref> [21] </ref>. For this reason, attention has focussed on randomized or probabilistic motion planning methods.
Reference: [22] <author> P. Watterberg, P. Xavier, and Y. Hwang. </author> <title> Path planning for everyday robotics with sandros. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 1170-1175, </pages> <year> 1997. </year>
Reference-contexts: The local planners currently implemented in obprm are the common straight-line in C-space, three versions of a (parameterized) planner proposed in [2] called rotate-at-s (0 s 1), and some A fl -like methods (see, e.g., <ref> [7, 8, 12, 13, 22] </ref>). The suggested order to apply these planners was: first straight-line and rotate-at- 1 2 (the most successful planners), next rotate-at-0 and rotate-at-1, and finally, the more expensive A fl - like planners, which try to fill in gaps left by the faster planners. rotate-at-s.
Reference: [23] <author> Y. Wu. </author> <title> An obstacle-based probabilistic roadmap method for path planning. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, Texas A&M University, </institution> <year> 1996. </year> <note> OBPRM: An Obstacle-Based PRM for 3D Workspaces </note>
Reference-contexts: by some distance metric) using the common straight-line in C-space local planner, and then attempts to enhance the roadmap by sampling more nodes in identified `difficult' regions and/or by using more sophisticated local planners such as RPP [4]. 1.1 Our Results In this paper we consider an obstacle-based prm (obprm) <ref> [3, 23] </ref> which samples points on or near C-obstacle surfaces. Even though the prototype implementation of obprm for planar articulated robots employed only the simplest node generation and connection strategies, it established that obprm was a promising method for planning in cluttered environments. <p> Although significantly more expensive than the other planners, the A fl -like methods can sometimes make connections the others can not by `feeling' their way along in tight places. 3 Node Generation in OBPRM The prototype version of obprm <ref> [3, 23] </ref> for a many-dof articulated robot in a 2-dimensional Workspace used a simple strategy to generate nodes on contact surfaces. Briefly, for each obstacle X: Prototype NodeGeneration 1. c in := colliding robot cfg with C-obstacle X 2.
References-found: 23

