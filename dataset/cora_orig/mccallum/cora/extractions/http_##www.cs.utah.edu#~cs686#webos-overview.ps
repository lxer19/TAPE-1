URL: http://www.cs.utah.edu/~cs686/webos-overview.ps
Refering-URL: http://www.cs.utah.edu/~cs686/
Root-URL: 
Title: WebOS: Operating System Services for Wide Area Applications  
Author: Amin Vahdat Eshwar Belani Paul Eastham Chad Yoshikawa Thomas Anderson David Culler Michael Dahlin 
Abstract: In this paper, we argue for the power of providing a common set of OS services to wide area applications, including mechanisms for resource discovery, persistent storage, remote process execution, resource management, authentication, and security. On a single machine, application developers can rely on the local operating system to provide these abstractions. In the wide area, however, application developers are forced to build these abstractions themselves or to do without. This ad-hoc approach often results in individual programmers implementing non-optimal solutions, wasting both programmer effort and system resources. To address these problems, WebOS provides basic operating systems services needed to build applications that are geographically distributed, highly available, incrementally scalable, and dynamically reconfiguring. Experience with a number of applications developed under WebOS indicates that it simplifies system development and improves resource utilization. In particular, we use WebOS to implement Rent-A-Server to provide dynamic replication of overloaded services across the wide area in response to client demands. 
Abstract-found: 1
Intro-found: 1
Reference: [Alexandrov et al. 1997] <author> A. D. Alexandrov, M. Ibel, K. E. Schauser, and C. J. Scheiman. Ufo: </author> <title> A Personal Global File System Based on User-Level Extensions to the Operating System. </title> <booktitle> In Proceedings of the 1997 USENIX Technical Conference, </booktitle> <address> Ana-heim, CA, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: Our work draws upon a large body of previous work in file systems exporting a global namespace, including AFS [Howard et al. 1988], Alex [Cate 1992], Coda [Kistler & Satyanarayanan 1992], Bayou [Terry et al. 1995], WebNFS [Sun Microsystems 1996], and UFO <ref> [Alexandrov et al. 1997] </ref>. The main differentiating point between WebFS and these earlier works is backward compatibility with the HTTP name space and a security model appropriate for wide area access.
Reference: [Anderson et al. 1995] <author> T. E. Anderson, M. D. Dahlin, J. M. Neefe, D. A. Patterson, D. S. Roselli, and R. Y. Wang. </author> <title> Serverless Network File Systems. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 109126, </pages> <month> De-cember </month> <year> 1995. </year>
Reference-contexts: We plan to explore tradeoffs associated with maintaining directories of peer cache contents <ref> [Anderson et al. 1995, Feeley et al. 1995] </ref>, hints [Sarkar & Hartman 1996], or using simple IP mul-ticasts or broadcasts. WebOS simplifies the implementation of the cooperative cache in a number of ways. First, Smart Clients are used to determine the appropriate proxy cache to contact.
Reference: [Baldeschwieler et al. 1996] <author> E. Baldeschwieler, R. Blumofe, and E. Brewer. </author> <title> Atlas: An Infrastructure for Global Computing. </title> <booktitle> In Proc. of the Seventh ACM SIGOPS European Workshop: Systems Support for Worldwide Applcations, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Beginning with the WebOS framework, our prototype of Rent-A-Server was operational in less than one week. 9 Related Work A number of recent efforts exploit computational resources available on the Internet for wide area parallel programming, including Wax [Stout 1994], Legion [Grimshaw et al. 1995], Atlas <ref> [Baldeschwieler et al. 1996] </ref>, Globus [Foster & Kesselman 1996], and NetSolve [Casanova & Dongarra 1996]. WebOS shares a need for similar underlying technology with these systems (such as the need for a global name space and file system).
Reference: [Belani et al. 1998] <author> E. Belani, A. Vahdat, T. Anderson, and M. Dahlin. </author> <title> The CRISIS Wide Area Security Architecture. </title> <booktitle> In Proceedings of the USENIX Security Symposium, </booktitle> <address> San Antonio, Texas, </address> <month> Jan-uary </month> <year> 1998. </year>
Reference-contexts: The goal of our implementation is to make issues of security as transparent as possible for common operations while still allowing for arbitrary levels of security for programs that require it. CRISIS, the security system of WebOS, is described in another publication <ref> [Belani et al. 1998] </ref>; we present an overview of CRISIS here.
Reference: [Berners-Lee 1995] <author> T. Berners-Lee. </author> <title> Hypertext Transfer Protocol HTTP/1.0, October 1995. HTTP Working Group Internet Draft. </title>
Reference-contexts: Load balancing across the wide area is achieved by instructing users to access a particular mirror site based on their location. To distribute load across servers, techniques such as HTTP redirect <ref> [Berners-Lee 1995] </ref> or DNS Aliasing [Brisco 1995, Katz et al. 1994] can be used to send user requests to individual machines. With HTTP redirect, a front end machine redirects the client to resend the request to an available worker machine.
Reference: [Birrell et al. 1986] <author> A. Birrell, B. Lampson, R. Needham, and M.Schroeder. </author> <title> Global authentication without global trust. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1986. </year>
Reference-contexts: To address this issue, we assume that representative CA's for each administrative domain are arranged hierarchically, with individual CA's determining which parents, siblings, or children are trusted (and to what extent). The manner in which the hierarchy is traversed is based on the theory presented in <ref> [Birrell et al. 1986] </ref>. In this model, trust extends only as far as needed. To establish secure communication within a domain, only the local CA for the domain need be contacted.
Reference: [Brewer 1997] <author> E. Brewer. </author> <type> Personal Communication, </type> <month> March </month> <year> 1997. </year>
Reference-contexts: One argument against this approach is that service providers will not trust geographically distributed compute servers. However, many popular Internet services already are statically configured to run at third party sites to pro-rate the cost of a fault tolerant, high bandwidth Internet connection over multiple service providers <ref> [Brewer 1997] </ref>; we are merely arguing that with the right support, these arrangements can be made dynamically and managed automatically. In addition to demonstrating the synergy of a common framework for wide area distributed applications, we make a number of specific contributions.
Reference: [Brisco 1995] <author> T. Brisco. </author> <title> DNS Support for Load Balancing, </title> <month> April </month> <year> 1995. </year> <title> Network Working Group RFC 1794. </title>
Reference-contexts: Load balancing across the wide area is achieved by instructing users to access a particular mirror site based on their location. To distribute load across servers, techniques such as HTTP redirect [Berners-Lee 1995] or DNS Aliasing <ref> [Brisco 1995, Katz et al. 1994] </ref> can be used to send user requests to individual machines. With HTTP redirect, a front end machine redirects the client to resend the request to an available worker machine.
Reference: [Casanova & Dongarra 1996] <author> H. Casanova and J. Dongarra. NetSolve: </author> <title> A Network Server for Solving Computational Science Problems. </title> <booktitle> In Proceedings of Supercomputing '96, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: of Rent-A-Server was operational in less than one week. 9 Related Work A number of recent efforts exploit computational resources available on the Internet for wide area parallel programming, including Wax [Stout 1994], Legion [Grimshaw et al. 1995], Atlas [Baldeschwieler et al. 1996], Globus [Foster & Kesselman 1996], and NetSolve <ref> [Casanova & Dongarra 1996] </ref>. WebOS shares a need for similar underlying technology with these systems (such as the need for a global name space and file system).
Reference: [Cate 1992] <author> V. Cate. </author> <title> Alex a Global Filesystem. </title> <booktitle> In Proceedings of the 1992 USENIX File System Workshop, </booktitle> <pages> pp. 112, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Our work draws upon a large body of previous work in file systems exporting a global namespace, including AFS [Howard et al. 1988], Alex <ref> [Cate 1992] </ref>, Coda [Kistler & Satyanarayanan 1992], Bayou [Terry et al. 1995], WebNFS [Sun Microsystems 1996], and UFO [Alexandrov et al. 1997]. The main differentiating point between WebFS and these earlier works is backward compatibility with the HTTP name space and a security model appropriate for wide area access.
Reference: [Chankhunthod et al. 1996] <author> A. Chankhunthod, P. Danzig, C. Neerdaels, M. Schwartz, and K. Worrell. </author> <title> A Hierarchical Internet Object Cache. </title> <booktitle> In Proceedings of the 1996 USENIX Technical Conference, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: Existing proposals for hierarchical caching of the Web suffer from an inability to dramatically grow the cache size and processing power at each level of the hierarchy <ref> [Chankhunthod et al. 1996] </ref>. With cooperative caching among peer servers, the aggregate capacity grows dramatically with the distance from the client. <p> We plan to build on the work done in Coda and Bayou to address issues of replication and fault tolerance in the wide area. Harvest <ref> [Chankhunthod et al. 1996] </ref>, Squid [Squ 1996], and other Web caching efforts have focused on methods of extending the client cache across the Internet to caching proxies. Caching proxies in general are limited by a number of ways.
Reference: [Cheriton 1988] <author> D. R. Cheriton. </author> <title> The V Distributed System. </title> <journal> In Communications of the ACM, pp. </journal> <volume> 314 333, </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: Further, proxies are logical extensions of the client making it difficult for service providers to track such things as hit counts. Rent-A-Server addresses the limitations of proxy caching mechanisms by allowing full replication of overloaded services at locations determined by client access patterns. The V kernel <ref> [Cheriton 1988] </ref> uses multicast for client communication to multiple members of a server group for load balancing and fault tolerance. This mechanism is related to our use of Smart Clients for extending service functionality onto the client. However, Smart Clients allow service-specific naming and load balancing algorithms.
Reference: [Con 1989] <author> Consultation Committee, </author> <title> International Telephone and Telegraph, International Telecommunications Union. The DirectoryAuthentication Framework, 1989. CCITT Recommendation X.509. </title>
Reference-contexts: CRISIS is based on public key cryptography; thus a certificate's author need not be aware of the certificate's destination when it is created. Any principal with access to the certificate can determine the statement's author. Our certificates use the X.509 <ref> [Con 1989] </ref> standard format. CRISIS employs two basic types of certificates. Identity Certificates associate a public key with a principal for a certain period of time. An identity certificate can also specify a number of a principal's properties, such as name or organization.
Reference: [Crispo & Lomas 1996] <author> B. Crispo and M. Lomas. </author> <title> A Certification Scheme for Electronic Commerce. </title> <booktitle> In Security Protocols International Workshop, </booktitle> <pages> pp. </pages> <address> 1932, Cambridge UK, </address> <month> April </month> <year> 1996. </year> <note> Springer-Verlag LNCS series vol. 1189. </note>
Reference: [Dahlin et al. 1994] <author> M. Dahlin, R. Wang, T. Anderson, and D. Patterson. </author> <title> Cooperative Caching: Using Remote Client Memory to Improve File System Performance. </title> <booktitle> In Proceedings of the 1st USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pp. 267280, </pages> <month> Novem-ber 1417 </month> <year> 1994. </year>
Reference-contexts: Resource allocation within the virtual machine allows external users to take advantage of the aggregate computing resources, while ensuring system developers have the requisite priority. 7.3 Wide Area Cooperative Cache We are using WebOS to build a geographically distributed Web cooperative cache <ref> [Dahlin et al. 1994] </ref> to both validate our design and to provide an immediate benefit to the Internet by doing more intelligent caching of Web content.
Reference: [Deering 1991] <author> S. E. Deering. </author> <title> Multicast Routing in a Data-gram Internetwork. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: These properties are set and accessed through the UNIX ioctl system call. Currently, WebFS implements the last writer wins [Howard et al. 1988] cache consistency protocol to support traditional file access as well as an IP multicast-based <ref> [Deering 1991] </ref> update/invalidate protocol for widely-shared, frequently updated data files. Once IP multicast becomes widely deployed, its use will increase the efficiency of popular Internet push applications [Poi 1996]. We believe that providing IP multicast support at the file system interface will simplify the development of these applications.
Reference: [Dias et al. 1996] <author> D. Dias, W. Kish, R. Mukherjee, and R. Tewari. </author> <title> A Scalable and Highly Available Web Server. </title> <booktitle> In Proceedings of COMPCON, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The Director is responsible for picking a service provider likely to provide best service to the user. The decision is made in a service-specific manner. In this case, the nearest mirror site is chosen. while other servers remain relatively idle <ref> [Dias et al. 1996] </ref>. 3.2 Smart Clients In WebOS, we address the shortcomings of existing solutions for resource discovery through Smart Clients [Yoshikawa et al. 1997]. Smart Clients enable extensions of server functionality to be dynamically loaded onto the client machine.
Reference: [Dig 1995] <institution> Digital Equipment Corporation. Alta Vista, </institution> <year> 1995. </year> <note> http://www.altavista. digital.com/. </note>
Reference-contexts: For more information, please see http://now.cs.berkeley.edu/WebOS. y Computer Science Division, University of California, Berkeley z Department of Computer Science and Engineering, University of Washington, Seattle x Computer Science Department, University of Texas, Austin manner. For example, many popular services, such as Digital's Alta Vista <ref> [Dig 1995] </ref> or Netscape's download page [Net 1994], are geographically replicated to improve bandwidth, reduce latency, and improve availabilityno single connection onto the Internet can support tens of millions of users. <p> Our discussion focuses on resource discovery in the context of HTTP service accessed through URL's. However, our techniques extend to other domains in a straightforward manner. 3.1 Current Approaches To address increasing demand, some popular services such as the Alta Vista search engine <ref> [Dig 1995] </ref> or the Netscape download page [Net 1994] are geographically distributed by being replicated manually by the service provider. Load balancing across the wide area is achieved by instructing users to access a particular mirror site based on their location.
Reference: [Feeley et al. 1995] <author> M. M. Feeley, W. E. Morgan, F. H. Pighin, A. R. Karlin, H. M. Levy, and C. A. Thekkath. </author> <title> Implementing Global Memory Management in a Workstation Cluster. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: We plan to explore tradeoffs associated with maintaining directories of peer cache contents <ref> [Anderson et al. 1995, Feeley et al. 1995] </ref>, hints [Sarkar & Hartman 1996], or using simple IP mul-ticasts or broadcasts. WebOS simplifies the implementation of the cooperative cache in a number of ways. First, Smart Clients are used to determine the appropriate proxy cache to contact.
Reference: [Foster & Kesselman 1996] <author> I. Foster and C. Kesselman. Globus: </author> <title> A Metacomputing Infrastructure Toolkit. </title> <booktitle> In Proc. Workshop on Environments and Tools, </booktitle> <year> 1996. </year>
Reference-contexts: with the WebOS framework, our prototype of Rent-A-Server was operational in less than one week. 9 Related Work A number of recent efforts exploit computational resources available on the Internet for wide area parallel programming, including Wax [Stout 1994], Legion [Grimshaw et al. 1995], Atlas [Baldeschwieler et al. 1996], Globus <ref> [Foster & Kesselman 1996] </ref>, and NetSolve [Casanova & Dongarra 1996]. WebOS shares a need for similar underlying technology with these systems (such as the need for a global name space and file system).
Reference: [Fox et al. 1997] <author> A. Fox, S. Gribble, Y. Chawathe, and E. Brewer. </author> <title> Cluster-Based Scalable Network Services. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating Systems Principles, </booktitle> <address> Saintt-Malo, France, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: Information such as the state of the client's Internet connection (modem, wireless, T1, etc.) or the size of the client display (PDA, laptop, workstation monitor) can be used to negotiate for different versions of the same object (postscript, PDF, text) based on available viewers, bandwidth, and screen size <ref> [Fox et al. 1997] </ref>. To investigate the relative advantages of Smart Clients and Proxies, we are in the process of modifying the Apache web server to include Smart Proxy functionality. 4 Persistent Storage Today, many distributed applications share state and transfer control using the network communication abstraction.
Reference: [Freier et al. 1996] <author> A. Freier, P. Karlton, and P. Kocher. </author> <title> Secure Socket Layer. Netscape, </title> <month> March </month> <year> 1996. </year>
Reference-contexts: As an explicit design choice, we leverage as much functionality as possible from existing low level services. For example, for compatibility with existing applications, we adopt IP addresses and URL's for the global namespace, TCP to provide reliable communication, and SSL <ref> [Freier et al. 1996] </ref> for link level security. 3 Resource Discovery In this section, we discuss how WebOS clients locate representatives of geographically distributed and dynamically reconfiguring services, while providing load balancing and end-to-end high availability. Our approach consists of a number of components.
Reference: [Goldberg et al. 1996] <author> I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications. </title> <booktitle> In Proceedings of the Sixth USENIX Security Symposium, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: To maintain local system integrity and to ensure that running processes do not interfere with one another, the resource manager creates a virtual machine for process execution. We use Janus <ref> [Goldberg et al. 1996] </ref> to create such a virtual machine. Processes in the virtual machine execute with limited privileges, preventing them from interfering with the operation of processes in other virtual machines.
Reference: [Gong 1997] <author> L. Gong. </author> <title> Java Security: Present and Near Future. </title> <journal> IEEE Micro, </journal> <volume> 17(3):1419, </volume> <month> May/June </month> <year> 1997. </year>
Reference-contexts: First, deployment can be difficult since clients must choose applets that display potentially dangerous behavior. For example, the applet must be able to make network connections to arbitrary network hosts, an operation that users must explicitly allow in current browser security models <ref> [Gong 1997, Wallach et al. 1997] </ref>. Another limitation is that unless clients are frequently interacting with a service, their notion of load is likely to become quickly out-dated.
Reference: [Gosling & McGilton 1995] <author> J. Gosling and H. McGilton. </author> <title> The Java(tm) Language Environment: </title>
Reference-contexts: Smart Clients enable extensions of server functionality to be dynamically loaded onto the client machine. Java's <ref> [Gosling & McGilton 1995] </ref> portability and availability in all major Internet browsers allow us to distribute these extensions as Java applets. We believe that performing naming, load balancing, and fail-over from the perspective of the client has a number of fundamental advantages over server-side implementations.
References-found: 25

