URL: ftp://ftp.eecs.umich.edu/people/durfee/gdn93-md.ps.Z
Refering-URL: http://ai.eecs.umich.edu/diag/CADS.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: monty@caen.engin.umich.edu, durfee@caen.engin.umich.edu  
Title: Search Reduction in Hierarchical Distributed Problem Solving  
Author: Thomas A. Montgomery and Edmund H. Durfee 
Keyword: Key Words: Abstraction, Coordination, Distributed Artificial Intelligence, Multi-Agent Systems, Planning, Search  
Note: This research has been sponsored, in part, by the National Science Foundation under grants IRI-9015423 and IRI-9010645, by the University of Michigan Rackham Graduate School, and by a Bell Northern Research Postgraduate Award.  
Address: Ann Arbor, MI 48109  
Affiliation: Dept. of Electrical Engineering and Computer Science University of Michigan  
Abstract: Knoblock and Korf have determined that abstraction can reduce search at a single agent from exponential to linear complexity [ Knoblock, 1991; Korf, 1987 ] . We extend their results by showing how concurrent problem solving among multiple agents using abstraction can further reduce search to logarithmic complexity. We empirically validate our formal analysis by showing that it correctly predicts performance for the Towers of Hanoi problem (which meets all of the assumptions of the analysis). Furthermore, a powerful form of abstraction for large multi-agent systems is to group agents into teams, and teams of agents into larger teams, to form an organizational pyramid. We apply our analysis to such an organization of agents, and demonstrate the results in a delivery task domain. Our predictions about abstraction's benefits can also be met in this more realistic domain, even though assumptions made in our analysis are violated. Our analytical results thus hold the promise for explaining in general terms many experimental observations made in specific distributed AI systems, and we demonstrate this ability with examples from prior research. 
Abstract-found: 1
Intro-found: 1
Reference: [ Amdahl, 1967 ] <author> Amdahl, Gene M. </author> <year> 1967. </year> <title> Validity of the single processor approach to achieving large scale computing capabilities. </title> <booktitle> In AFIPS Conference Proceedings. </booktitle> <pages> 483-485. </pages>
Reference-contexts: Given a continuous stream of problems and an 2 The difficulty of achieving a factor of p speedup with p agents has long been recognized. Amdahl's law <ref> [ Amdahl, 1967 ] </ref> presents this from the perspective of a serial bottleneck. Holding the problem size constant, no matter how many additional processors are used, a computational task cannot be performed any faster than its serial portion.
Reference: [ Bacchus and Yang, 1991 ] <author> Bacchus, Fahiem and Yang, </author> <title> Qiang 1991. The downward refinement property. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence. </booktitle> <pages> 286-292. </pages>
Reference-contexts: There is only backtracking within a subproblem. This requires that a problem can be decomposed such that there is no backtracking across abstraction levels or across subproblems within an abstraction level. [In other words, the downward refinement property <ref> [ Bacchus and Yang, 1991 ] </ref> must hold.] In addition, our extensions to the analysis require that: 1. There are at least as many agents as there are bottom (most detailed) level subproblems (i.e. there are n k or, equivalently k l1 agents).
Reference: [ Bacchus and Yang, 1992 ] <author> Bacchus, Fahiem and Yang, </author> <title> Qiang 1992. The expected value of hierarchical problem solving. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence. </booktitle> <pages> 369-374. </pages>
Reference-contexts: In many more realistic problem domains, however, the number of levels of abstraction may be fixed. For example, our work in the delivery task has only a single level of abstraction (agents grouped into teams). Here we draw on others' results <ref> [ Bacchus and Yang, 1992 ] </ref> to illustrate the effect on our analysis of having a fixed number of abstraction levels. <p> Promising areas include automating the creation and evaluation of hierarchies [ Knoblock et al., 1991 ] , and determining the expected value of a hierarchy based on the probability of being able to refine the abstractions <ref> [ Bacchus and Yang, 1992 ] </ref> .
Reference: [ Corkill and Lesser, 1983 ] <author> Corkill, Daniel D. and Lesser, Victor R. </author> <year> 1983. </year> <title> The use of meta-level control for coordination in a distributed problem solving network. </title> <booktitle> In Proceedings of the Eighth International Joint Conference on Artificial Intelligence, </booktitle> <institution> Karlsruhe, Federal Republic of Ger-many. </institution> <note> 748-756. (Also appeared in Computer Architectures for Artificial Intelligence Applications, </note> <editor> Benjamin W. Wah and G.-J. Li, editors, </editor> <publisher> IEEE Computer Society Press, </publisher> <pages> pages 507-515, </pages> <year> 1986). </year>
Reference-contexts: When we relax the assumptions even further, the use of abstraction becomes a hindrance by incurring useless overhead. The analysis also allows us to get a handle on the utilization we can expect, and we relate this back to domains such as the DVMT <ref> [ Corkill and Lesser, 1983; Durfee et al., 1987 ] </ref> . In DAI (and in organization theory), the intuition is that solving problems cooperatively can significantly decrease problem-solving complexity in many, but not all, situations. <p> + (k 1)n (l 1) = (k 1)(n 1)(log k n 1) Of course this pipeline can be filled top-down or bottom-up | top-down processing can be viewed as a contracting/subcontracting process [ Davis and Smith, 1983 ] , while bottom-up 6 processing can be viewed as data-driven hypothesis generation <ref> [ Corkill and Lesser, 1983 ] </ref> . In the case that processing proceeds bottom-up, the fraction of available processing power unused while filling the hierarchy is just one minus the quantity in Expression 7. <p> This analysis can help to analytically explain some of the empirical results previously reported in the literature. In Corkill and Lesser's Distributed Vehicle Monitoring Testbed (DVMT) <ref> [ Corkill and Lesser, 1983 ] </ref> , hypotheses are generated bottom-up, so it takes some time before the agents integrating high-level hypotheses have data to work on. <p> This helps explain, for instance, why p processors could not achieve a factor of p improvement in the DVMT <ref> [ Corkill and Lesser, 1983; Durfee et al., 1987 ] </ref> . The analysis can also be applied to systems using the contract net protocol [ Davis and Smith, 1983 ] .
Reference: [ Davis and Smith, 1983 ] <author> Davis, Randall and Smith, Reid G. </author> <year> 1983. </year> <title> Negotiation as a metaphor for distributed problem solving. </title> <journal> Artificial Intelligence 63-109. </journal>
Reference-contexts: The process of distributing subproblems does not increase the time complexity. In general, determining which agents should work on which subproblems is a non-trivial problem. In the DAI literature this has been referred to as the connection problem <ref> [ Davis and Smith, 1983 ] </ref> , while in operating systems it can be seen as a variant of load-balancing. <p> wasted while waiting for processing to propagate from the top agent down to the leaves as: k n + (k 1)n (l 1) = (k 1)(n 1)(log k n 1) Of course this pipeline can be filled top-down or bottom-up | top-down processing can be viewed as a contracting/subcontracting process <ref> [ Davis and Smith, 1983 ] </ref> , while bottom-up 6 processing can be viewed as data-driven hypothesis generation [ Corkill and Lesser, 1983 ] . <p> This helps explain, for instance, why p processors could not achieve a factor of p improvement in the DVMT [ Corkill and Lesser, 1983; Durfee et al., 1987 ] . The analysis can also be applied to systems using the contract net protocol <ref> [ Davis and Smith, 1983 ] </ref> . If contracting is performed as a functional decomposition such that a manager sends all subproblems down to subordinates, then n1 k1 agents are required, and full utilization can be achieved after the hierarchy fills.
Reference: [ Durfee and Montgomery, 1990 ] <author> Durfee, Edmund H. and Montgomery, Thomas A. </author> <year> 1990. </year> <title> A hierarchical protocol for coordinating multiagent behaviors. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence. </booktitle> <pages> 86-93. </pages>
Reference-contexts: The search complexity f (n) would describe the complexity of searching for non-conflicting behaviors (i.e. negotiating), and n would relate to the number of agents involved. For example, elsewhere [ Montgomery and Durfee, 1992 ] we analyzed our hierarchical communication protocol <ref> [ Durfee and Montgomery, 1990 ] </ref> and found it to have O (n 3 ) complexity where n is the number of agents. 3 Grouping agents into teams (a single-level hierarchy) has the potential to reduce such an O (n 3 ) protocol to O (n 2 ) (by Expression 1),
Reference: [ Durfee and Montgomery, 1991 ] <author> Durfee, Edmund H. and Montgomery, Thomas A. </author> <year> 1991. </year> <title> Coordination as distributed search in a hierarchical behavior space. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 21(6). (Special Issue on Distributed AI). </journal>
Reference-contexts: 1 Introduction Problem solving performed by an individual AI system can be characterized as search through a problem space, and, not surprisingly, distributed problem solving (performed by multiple artificially intelligent agents) can be characterized as a distributed search <ref> [ Durfee and Montgomery, 1991 ] </ref> . Therefore, when attempting to improve performance in a distributed problem solving system, it is natural to see how recent results in single agent search can be applied to such multi-agent systems. <p> Hierarchical distributed problem solving then combines the features of hierarchical and distributed problem solving | multiple, distributed agents solving a problem by searching through a hierarchy of problem spaces <ref> [ Durfee and Montgomery, 1991; Parunak, 1992 ] </ref> . 2.1 Single-Level Abstraction Hierarchy Knoblock showed that a single level of abstraction can reduce an exponential search O (b n ) to O ( nb n ). <p> We have also shown how abstraction can be applied to both task-level and meta-level problem solving through our experiments in the Towers of Hanoi and delivery task problem domains. Perhaps more importantly, however, the perspective used in this paper of viewing coordination as a distributed search <ref> [ Durfee and Montgomery, 1991 ] </ref> sheds light on some of the fundamental problems of DAI. In particular, DAI is often concerned with achieving coherence and coordination among a set of distributed agents.
Reference: [ Durfee et al., 1987 ] <author> Durfee, Edmund H.; Lesser, Victor R.; and Corkill, Daniel D. </author> <year> 1987. </year> <title> Coherent cooperation among communicating problem solvers. </title> <journal> IEEE Transactions on Computers C-36(11):1275-1291. </journal> <note> (Also published in Readings in Distributed Artificial Intelligence, </note> <editor> Alan H. Bond and Les Gasser, editors, </editor> <address> pages 268-284, </address> <publisher> Morgan Kaufmann, 1988.). </publisher>
Reference-contexts: When we relax the assumptions even further, the use of abstraction becomes a hindrance by incurring useless overhead. The analysis also allows us to get a handle on the utilization we can expect, and we relate this back to domains such as the DVMT <ref> [ Corkill and Lesser, 1983; Durfee et al., 1987 ] </ref> . In DAI (and in organization theory), the intuition is that solving problems cooperatively can significantly decrease problem-solving complexity in many, but not all, situations. <p> Predicting the optimal performance of a system of agents is an important step in evaluating alternative approaches to coordination, and our analysis can be used to make such predictions. For example, in <ref> [ Durfee et al., 1987 ] </ref> DVMT researchers calculated the optimal improvement in processing time due to multiple agents by hand simulating the shortest data path through the hierarchy. <p> This helps explain, for instance, why p processors could not achieve a factor of p improvement in the DVMT <ref> [ Corkill and Lesser, 1983; Durfee et al., 1987 ] </ref> . The analysis can also be applied to systems using the contract net protocol [ Davis and Smith, 1983 ] .
Reference: [ Gustafson, 1988 ] <author> Gustafson, John L. </author> <year> 1988. </year> <title> Reevaluating amdahl's law. </title> <journal> Communications of the ACM 31(5) </journal> <pages> 532-533. </pages>
Reference-contexts: Amdahl's law [ Amdahl, 1967 ] presents this from the perspective of a serial bottleneck. Holding the problem size constant, no matter how many additional processors are used, a computational task cannot be performed any faster than its serial portion. More recently, however, the perspective taken by Gustafson <ref> [ Gustafson, 1988 ] </ref> shows that by varying the problem size with the number of agents, a scaled speedup can be achieved that approaches p for p agents.
Reference: [ Knoblock et al., 1991 ] <author> Knoblock, Craig A.; Tenenberg, Josh D.; and Yang, </author> <title> Qiang 1991. Characterizing abstraction hierarchies for planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: We intend to continue this line of research by seeing what further insights on 11 distributed problem solving can be gained. Promising areas include automating the creation and evaluation of hierarchies <ref> [ Knoblock et al., 1991 ] </ref> , and determining the expected value of a hierarchy based on the probability of being able to refine the abstractions [ Bacchus and Yang, 1992 ] .
Reference: [ Knoblock, 1991 ] <author> Knoblock, Craig A. </author> <year> 1991. </year> <title> Search reduction in hierarchical problem solving. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence. </booktitle> <pages> 12 </pages>
Reference-contexts: Therefore, when attempting to improve performance in a distributed problem solving system, it is natural to see how recent results in single agent search can be applied to such multi-agent systems. Recent results by Knoblock and Korf <ref> [ Knoblock, 1991; Korf, 1987 ] </ref> show that abstraction can reduce search from exponential to linear complexity by dividing a large problem into a number of smaller problems. <p> Therefore, concurrent processing can potentially reduce an exponential search problem not just to linear complexity, but to logarithmic. 2.3 Assumptions of the Analysis Our analysis is based on the following assumptions (as taken verbatim from <ref> [ Knoblock, 1991 ] </ref> with our comments in brackets []): 3 1. The number of abstraction levels is log k of the solution length. Thus, the number of abstraction levels must increase with the size of the problems. 2.
Reference: [ Korf, 1987 ] <author> Korf, Richard E. </author> <year> 1987. </year> <title> Planning as search: A qualitative approach. </title> <booktitle> Artificial Intelli--gence 33(1) </booktitle> <pages> 65-88. </pages>
Reference-contexts: Therefore, when attempting to improve performance in a distributed problem solving system, it is natural to see how recent results in single agent search can be applied to such multi-agent systems. Recent results by Knoblock and Korf <ref> [ Knoblock, 1991; Korf, 1987 ] </ref> show that abstraction can reduce search from exponential to linear complexity by dividing a large problem into a number of smaller problems.
Reference: [ Montgomery and Durfee, 1990 ] <author> Montgomery, Thomas A. and Durfee, Edmund H. </author> <year> 1990. </year> <title> Using MICE to study intelligent dynamic coordination. </title> <booktitle> In Proceedings of the Second Computer Society International Conference on Tools for Artificial Intelligence. </booktitle> <pages> 438-444. </pages>
Reference-contexts: For the distributed (multi-agent) version, we simulated concurrent execution of the subproblems by implementing the agents in MICE <ref> [ Montgomery and Durfee, 1990 ] </ref> , charging real time for agent reasoning, and allowing any number of messages to be sent by different agents at one time. Figure 1 presents the elapsed time to solve problems of various sizes 1 for: (x) A single agent without abstraction.
Reference: [ Montgomery and Durfee, 1992 ] <author> Montgomery, Thomas A. and Durfee, Edmund H. </author> <year> 1992. </year> <title> Search reduction in hierarchical distributed problem solving. </title> <booktitle> In Proceedings of the 1992 Distributed AI Workshop, </booktitle> <address> Glen Arbor, Michigan. </address>
Reference-contexts: The search complexity f (n) would describe the complexity of searching for non-conflicting behaviors (i.e. negotiating), and n would relate to the number of agents involved. For example, elsewhere <ref> [ Montgomery and Durfee, 1992 ] </ref> we analyzed our hierarchical communication protocol [ Durfee and Montgomery, 1990 ] and found it to have O (n 3 ) complexity where n is the number of agents. 3 Grouping agents into teams (a single-level hierarchy) has the potential to reduce such an O
Reference: [ Newell and Simon, 1972 ] <author> Newell, A. and Simon, H. A. </author> <year> 1972. </year> <title> Human Problem Solving. </title> <publisher> Prentice Hall. </publisher>
Reference-contexts: Eventually, however, as the number of agents is increased, the combinatorics of the negotiation process overwhelms the individuals and the teams show an advantage again. 5 Conclusion Abstraction has long been recognized as capable of improving the efficiency of search <ref> [ Newell and Simon, 1972; Sacerdoti, 1974; Stefik, 1981 ] </ref> ; and recently, detailed complexity analyses of this ability have been presented [ Bacchus and Yang, 1992; Knoblock, 1991; Knoblock et al., 1991; Korf, 1987 ] .
Reference: [ Parunak, 1992 ] <author> Parunak, H. </author> <title> Van Dyke 1992. How to describe behavior space. </title> <booktitle> In Proceedings of the 1992 Distributed AI Workshop, </booktitle> <address> Glen Arbor, </address> <publisher> Michigan. </publisher> <pages> 303-316. </pages>
Reference-contexts: Hierarchical distributed problem solving then combines the features of hierarchical and distributed problem solving | multiple, distributed agents solving a problem by searching through a hierarchy of problem spaces <ref> [ Durfee and Montgomery, 1991; Parunak, 1992 ] </ref> . 2.1 Single-Level Abstraction Hierarchy Knoblock showed that a single level of abstraction can reduce an exponential search O (b n ) to O ( nb n ).
Reference: [ Sacerdoti, 1974 ] <author> Sacerdoti, Earl D. </author> <year> 1974. </year> <title> Planning in a hierarchy of abstraction spaces. </title> <booktitle> Artificial Intelligence 5 </booktitle> <pages> 115-135. </pages>
Reference-contexts: Eventually, however, as the number of agents is increased, the combinatorics of the negotiation process overwhelms the individuals and the teams show an advantage again. 5 Conclusion Abstraction has long been recognized as capable of improving the efficiency of search <ref> [ Newell and Simon, 1972; Sacerdoti, 1974; Stefik, 1981 ] </ref> ; and recently, detailed complexity analyses of this ability have been presented [ Bacchus and Yang, 1992; Knoblock, 1991; Knoblock et al., 1991; Korf, 1987 ] .
Reference: [ Stefik, 1981 ] <author> Stefik, </author> <title> Mark 1981. Planning with constraints (MOLGEN: </title> <booktitle> Part 1). Artificial Intelligence 16 </booktitle> <pages> 111-140. 13 </pages>
Reference-contexts: Eventually, however, as the number of agents is increased, the combinatorics of the negotiation process overwhelms the individuals and the teams show an advantage again. 5 Conclusion Abstraction has long been recognized as capable of improving the efficiency of search <ref> [ Newell and Simon, 1972; Sacerdoti, 1974; Stefik, 1981 ] </ref> ; and recently, detailed complexity analyses of this ability have been presented [ Bacchus and Yang, 1992; Knoblock, 1991; Knoblock et al., 1991; Korf, 1987 ] .
References-found: 18

