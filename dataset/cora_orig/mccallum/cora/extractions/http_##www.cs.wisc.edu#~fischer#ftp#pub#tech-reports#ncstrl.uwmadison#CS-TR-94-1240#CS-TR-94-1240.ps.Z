URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-94-1240/CS-TR-94-1240.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-94-1240/
Root-URL: http://www.cs.wisc.edu
Title: The Paradyn Parallel Performance Tools and PVM runs on the Thinking Machine CM-5, Sun workstations,
Author: Barton P. Miller Jeffrey K. Hollingsworth Mark D. Callaghan 
Note: Paradyn currently  
Abstract: Paradyn is a performance tool for large-scale parallel applications. By using dynamic instrumentation and automating the search for bottlenecks, it can measure long running applications on production-sized data sets. Paradyn has recently been ported to measure native PVM applications. Programmers run their unmodified PVM application programs with Paradyn. Paradyn automatically inserts and modifies instrumentation during the execution of the application, systematically searching for the causes of performance problems. In most cases, Paradyn can isolate major causes of performance problems, and the part of the program that is responsible the problem. This paper presents an overview of Paradyn, describes the new facility in PVM that supports Paradyn, and reports experience with PVM applications.
Abstract-found: 1
Intro-found: 1
Reference: <author> 10 Miller, Hollingsworth, Callaghan Fig. </author> <title> 6. A Sample Performance Visualization. The graph displays synchronization waiting time and CPU utilization over time. Both metrics are shown for the process spmdf1g on the host poona. </title>
Reference: [1] <institution> Cray Research Inc, </institution> <note> UNICOS File Formats and Special Files Reference Manual, SR-2014 5.0 ed. </note>
Reference-contexts: Usually, this information can be made available to user processes by reading kernel data structures. Also, several machines provide hardware based counters that are a source of useful performance information. For example, the Power2 [6], Cray Y-MP <ref> [1] </ref>, and Sequent Symmetry [5] systems provide detailed counters of cache utilization, floating point operations, and bus contention. We can combine external information with direct instrumentation to get precise information to relate the external events back to specific parts of the program.
Reference: [2] <author> J. Dongarra, G. A. Geist, R. Manchek, and V. S. Sunderam, </author> <title> Integrated PVM framework supports heterogeneous network computing, </title> <booktitle> Computers in Physics, 7 (1993), </booktitle> <pages> pp. 166-74. </pages>
Reference-contexts: This paper presents an overview of Paradyn, describes the new facility in PVM that supports Paradyn, and reports experience with PVM applications. The initial implementation of the Paradyn Performance Tools was for a Thinking Machines CM-5. We have ported the Paradyn tools to a network of workstations running PVM <ref> [2] </ref>. To do this we took advantage of the new features of PVM 3.3 that permit external tools to easily integrate with PVM.
Reference: [3] <author> J. K. Hollingsworth, J. Cargille, and B. P. Miller, </author> <title> Dynamic Program Instrumentation for Scalable Performance Tools, </title> <booktitle> in Proceedings of the 1994 Scaleable Highe Performance Computing Conference, </booktitle> <address> Knoxville, TN, </address> <month> May </month> <year> 1994, </year> <pages> pp. 841-850. </pages>
Reference-contexts: Two common approaches are event tracing and statistical sampling. Both of these techniques have limitations in either the volume of data they gather or granularity of data collected. Paradyn takes a new approach to data collection, called dynamic instrumentation <ref> [3] </ref> that defers instrumenting the program until it is in execution. This approach permits dynamic insertion and alteration of the instrumentation during program execution. We also describe a new data collection model that permits efficient, yet detailed measurements of a program's performance.
Reference: [4] <author> J. K. Hollingsworth and B. P. Miller, </author> <title> Dynamic Control of Performance Monitoring on Large Scale Parallel Systems, </title> <booktitle> in Proceedings of the 7th ACM International Conference on Supercomputing, </booktitle> <address> Tokyo, </address> <month> July </month> <year> 1993, </year> <pages> pp. 185-194. </pages>
Reference-contexts: However, in practice a small amount of information is often sufficient to reveal the key bottlenecks. Performance debuggers exist to help programmers find the gems of understanding among the large space of available performance data. In this section we review the W 3 Search Model <ref> [4] </ref>, a system that provides a structured way for programmers to quickly and precisely isolate a performance problem without having to examine a large amount of extraneous information.
Reference: [5] <author> S. S. Thakkar, </author> <title> Performance of Parallel Applications on a Shared-Memory Multiprocessor System, in Performance Instrumentation and Visualization, </title> <editor> M. Simmons and R. Koskela, eds., </editor> <publisher> Addison-Wesley, </publisher> <year> 1990, </year> <pages> pp. 233-256. </pages>
Reference-contexts: Usually, this information can be made available to user processes by reading kernel data structures. Also, several machines provide hardware based counters that are a source of useful performance information. For example, the Power2 [6], Cray Y-MP [1], and Sequent Symmetry <ref> [5] </ref> systems provide detailed counters of cache utilization, floating point operations, and bus contention. We can combine external information with direct instrumentation to get precise information to relate the external events back to specific parts of the program.
Reference: [6] <author> E. H. Welbon, C. C. Chen-Nui, D. J. Shippy, and D. A. Hicks, </author> <title> The POWER2 Performance Monitor, </title> <journal> IBM Journal of Research and Development (submitted for publication), </journal> <year> (1994). </year>
Reference-contexts: Usually, this information can be made available to user processes by reading kernel data structures. Also, several machines provide hardware based counters that are a source of useful performance information. For example, the Power2 <ref> [6] </ref>, Cray Y-MP [1], and Sequent Symmetry [5] systems provide detailed counters of cache utilization, floating point operations, and bus contention. We can combine external information with direct instrumentation to get precise information to relate the external events back to specific parts of the program.
References-found: 7

