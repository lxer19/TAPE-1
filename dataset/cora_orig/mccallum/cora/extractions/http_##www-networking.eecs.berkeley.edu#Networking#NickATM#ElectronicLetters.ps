URL: http://www-networking.eecs.berkeley.edu/Networking/NickATM/ElectronicLetters.ps
Refering-URL: http://www-networking.eecs.berkeley.edu/~wlr/
Root-URL: 
Title: Scheduling Cells in an Input-Queued Switch algorithms exhibit asymptotically 100% utilisation under high load; SLIP-IRRM
Author: Nick McKeown Pravin Varaiya Jean Walrand 
Address: Berkeley, CA 94720 USA  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California at Berkeley  
Date: December 9th, 1993  March 10, 1994  
Note: Published in Electronics Letters,  Both  
Abstract: We present two algorithms, IRRM and SLIP-IRRM, for scheduling cells in an input-queued cell switch. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Karol, M., Hluchyj, M., and Morgan, S. </author> <title> "Input Versus Output Queueing on a Space Division Switch," </title> <journal> IEEE Trans. Comm, </journal> <volume> 35(12) pp.1347-1356 </volume>
Reference-contexts: 1 Introduction The major problem with input-queued switches is head-of-line blocking which can limit the maximum throughput asymptotically to 58% <ref> [1] </ref>. Previous algorithms have improved upon the 58% utilisation [2, 3, 4, 5, 6] using non-FIFO input queues and state-dependent scheduling. In each case, if the traffic is not uniformly distributed over outputs, or if the arrival process is not Bernoulli then the asymptotic utilisation decreases from its maximum.
Reference: [2] <author> Obara, H. </author> <title> "An Efficient Contention Resolution Algorithm for Input Queueing ATM Switches," </title> <journal> Intl. Jour. of Digital & Analog Cabled Systems, </journal> <volume> vol. 2, no. 4, </volume> <month> Oct-Dec </month> <year> 1989, </year> <pages> pp. 261-267. </pages>
Reference-contexts: 1 Introduction The major problem with input-queued switches is head-of-line blocking which can limit the maximum throughput asymptotically to 58% [1]. Previous algorithms have improved upon the 58% utilisation <ref> [2, 3, 4, 5, 6] </ref> using non-FIFO input queues and state-dependent scheduling. In each case, if the traffic is not uniformly distributed over outputs, or if the arrival process is not Bernoulli then the asymptotic utilisation decreases from its maximum.
Reference: [3] <author> Obara, H. </author> <title> "Optimum Architecture For Input Queueing ATM Switches," Elect. Letters, 28th March 1991, </title> <publisher> pp.555-557 </publisher>
Reference-contexts: 1 Introduction The major problem with input-queued switches is head-of-line blocking which can limit the maximum throughput asymptotically to 58% [1]. Previous algorithms have improved upon the 58% utilisation <ref> [2, 3, 4, 5, 6] </ref> using non-FIFO input queues and state-dependent scheduling. In each case, if the traffic is not uniformly distributed over outputs, or if the arrival process is not Bernoulli then the asymptotic utilisation decreases from its maximum.
Reference: [4] <author> Obara, H., Okamoto, S., and Hamazumi, Y. </author> <title> "Input and Output Queueing ATM Switch Architecture with Spatial and Temporal Slot Reservation Control" Elect. Letters, </title> <booktitle> 2nd Jan 1992, </booktitle> <address> pp.22-24 </address>
Reference-contexts: 1 Introduction The major problem with input-queued switches is head-of-line blocking which can limit the maximum throughput asymptotically to 58% [1]. Previous algorithms have improved upon the 58% utilisation <ref> [2, 3, 4, 5, 6] </ref> using non-FIFO input queues and state-dependent scheduling. In each case, if the traffic is not uniformly distributed over outputs, or if the arrival process is not Bernoulli then the asymptotic utilisation decreases from its maximum.
Reference: [5] <author> Karol, M., Eng, K., Obara, H. </author> <title> "Improving the Performance of Input-Queued ATM Packet Switches," </title> <type> INFOCOM '92, </type> <institution> pp.110-115 </institution>
Reference-contexts: 1 Introduction The major problem with input-queued switches is head-of-line blocking which can limit the maximum throughput asymptotically to 58% [1]. Previous algorithms have improved upon the 58% utilisation <ref> [2, 3, 4, 5, 6] </ref> using non-FIFO input queues and state-dependent scheduling. In each case, if the traffic is not uniformly distributed over outputs, or if the arrival process is not Bernoulli then the asymptotic utilisation decreases from its maximum.
Reference: [6] <author> Anderson, T., Owicki, S., Saxe, J., and Thacker, C. </author> <title> "High Speed Switch Scheduling for Local Area Networks," </title> <booktitle> Proc. Fifth International Conference on Architectural Support for Programming Languages and Operating Systems Oct 1992, </booktitle> <pages> pp. 98-110. 4 </pages>
Reference-contexts: 1 Introduction The major problem with input-queued switches is head-of-line blocking which can limit the maximum throughput asymptotically to 58% [1]. Previous algorithms have improved upon the 58% utilisation <ref> [2, 3, 4, 5, 6] </ref> using non-FIFO input queues and state-dependent scheduling. In each case, if the traffic is not uniformly distributed over outputs, or if the arrival process is not Bernoulli then the asymptotic utilisation decreases from its maximum. <p> In each case, if the traffic is not uniformly distributed over outputs, or if the arrival process is not Bernoulli then the asymptotic utilisation decreases from its maximum. In particular, Parallel Iterative Matching (PIM) <ref> [6] </ref> will tend towards 100% utilisation if a sufficiently large number of iterations are used. The proposed scheduling algorithm called Iterative Round Robin Matching (IRRM) is a simplified version of PIM [6]. The maximum achievable utilisation of IRRM is always asymptotic to 100% in just two iterations. <p> In particular, Parallel Iterative Matching (PIM) <ref> [6] </ref> will tend towards 100% utilisation if a sufficiently large number of iterations are used. The proposed scheduling algorithm called Iterative Round Robin Matching (IRRM) is a simplified version of PIM [6]. The maximum achievable utilisation of IRRM is always asymptotic to 100% in just two iterations.
References-found: 6

