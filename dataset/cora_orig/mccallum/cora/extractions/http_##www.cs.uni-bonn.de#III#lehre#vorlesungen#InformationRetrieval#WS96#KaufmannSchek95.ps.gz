URL: http://www.cs.uni-bonn.de/III/lehre/vorlesungen/InformationRetrieval/WS96/KaufmannSchek95.ps.gz
Refering-URL: http://www.cs.uni-bonn.de/III/lehre/vorlesungen/InformationRetrieval/WS96/
Root-URL: http://cs.uni-bonn.de
Email: fkaufmann, schekg@inf.ethz.ch  
Title: Text Search Using Database Systems Revisited Some Experiments  
Author: Helmut Kaufmann and Hans-Jorg Schek 
Address: Science|Databases  
Affiliation: Swiss Federal Institute of Technology (ETH Zurich) Department of Computer  
Abstract: With the increasing availability of information in electronic form, the integration of textual data into database systems is becoming more and more important. Motivated by recent technology development, we describe how a preprocessor for simple text retrieval can be realised on top of a relational database system. This approach shows a surprisingly good performance compared to a commercially available information retrieval system and compared to another relational preprocessor product for text search. 
Abstract-found: 1
Intro-found: 1
Reference: [Bil82] <author> H. Biller. </author> <title> On the architecture of a system integrating data base management and information retrieval. </title> <editor> In G. Goos and H. Hartmanis, editors, </editor> <booktitle> Research and Development in Information Retrieval, volume 146 of Lecture Notes in Computer Science, </booktitle> <pages> pages 80-97. </pages> <publisher> Springer, </publisher> <month> May </month> <year> 1982. </year>
Reference-contexts: Principle differences between both are described in [Rij81]. Specifically, discussions of data model issues are given in, for example, [SP82, DKA + 86]; architectural issues in <ref> [Bil82, Sch84, LDE + 85, LKD + 88, Fuh89] </ref>. Prototype systems built on top of relational systems are described in [Mac79, SSL + 83]. Our own early experience was gained by a prototype system [Pol80] built on top of IBM's SQL/DS by using the reference string indexing method [Sch77].
Reference: [DKA + 86] <author> P. Dadam, K. Kuspert, F. Andersen, H. Blanken, R. Erbe, J. Gunauer, V. Lum, P. Pistor, and G. Walch. </author> <title> A DBMS prototype to support extended NF 2 relations: An integrated view on flat tables and hierarchies. </title> <booktitle> In Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1986. </year>
Reference-contexts: Principle differences between both are described in [Rij81]. Specifically, discussions of data model issues are given in, for example, <ref> [SP82, DKA + 86] </ref>; architectural issues in [Bil82, Sch84, LDE + 85, LKD + 88, Fuh89]. Prototype systems built on top of relational systems are described in [Mac79, SSL + 83].
Reference: [Fuh89] <author> N. Fuhr. </author> <title> Models for retrieval with probabilistic indexing. </title> <booktitle> Information Processing & Management, </booktitle> <volume> 25(1) </volume> <pages> 55-72, </pages> <year> 1989. </year>
Reference-contexts: Principle differences between both are described in [Rij81]. Specifically, discussions of data model issues are given in, for example, [SP82, DKA + 86]; architectural issues in <ref> [Bil82, Sch84, LDE + 85, LKD + 88, Fuh89] </ref>. Prototype systems built on top of relational systems are described in [Mac79, SSL + 83]. Our own early experience was gained by a prototype system [Pol80] built on top of IBM's SQL/DS by using the reference string indexing method [Sch77].
Reference: [HFRYL92] <author> D. Harman, E. Fox, R.Baeza-Yates, and W. Lee. </author> <title> Inverted files. </title> <editor> In W. B. Frakes and R. Baeza-Yates, editors, </editor> <booktitle> Information Retrieval (Data Structures and Algorithms), chapter 3, </booktitle> <pages> pages 28-43. </pages> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: In the current study, we only address boolean retrieval. 2.1 Indexing Documents using Inverted Lists Today, inverted lists are the de facto standard for word-based indexing of full text documents <ref> [Knu73, HFRYL92] </ref>, which support fast search for individual words in textual documents.
Reference: [HKS93] <author> R. Huppin, H. Kaufmann, and H.-J. Schek. </author> <title> MUSE|Ein Musikarchiv fur die SRG. </title> <type> MUSE project report, </type> <institution> ETH Zurich, Inst. for Information Systems|Database Research Group, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Below, we briefly introduce these systems and describe their support for text retrieval. 3.1 BASISPlus We chose BASISPlus [Inf90] as a our reference system on the information retrieval side as it was used in a former project <ref> [HKS93] </ref> and hence available and familiar to us. BASISPlus is a hybrid information retrieval and database system with a relational data model and set-valued attributes. BASISPlus allows index structures on standard data types (integer, date, : : : ) as well as on single words of texts. <p> AND Content LIKE '%:descriptor n %' 4 PHONO+: A Music Information System To evaluate the three approaches (BASISPlus, SQL*TR, SQL*InvList), we performed benchmarks based on an existing application, PHONO+, the information system of the Swiss Broadcasting Corporation (SRG 5 ) used for the compilation of radio transmissions <ref> [HKS93] </ref>. <p> Queries that are typical for a database system, i.e. Oracle. 2. Queries that are typical for an information retrieval system, i.e. BASISPlus. In an earlier report, we investigated the former query set <ref> [HKS93] </ref>. In this study, we focused on the latter as we were especially interested in whether relational database systems can be used for primitive information retrieval operations.
Reference: [Inf90] <institution> Information Dimension Inc., 655 Metro Place South, Dublin, Ohio 43017-1396. BASISPlus Database Administration Guide, </institution> <month> June </month> <year> 1990. </year> <note> Release L. </note>
Reference-contexts: The contribution of this paper is the presentation of some carefully measured experiments and observations that we made. It shows that our simple preprocessor solution on top of Oracle outperforms a specialised IRS (BASIS-Plus <ref> [Inf90] </ref>), especially in the case where many parallel searchers have to be supported. We also show that it is necessary to introduce a simple query op-timisation by comparing our own preprocessor solution with the commercially available product SQL*TextRetrieval [SQL92]. The test data are taken from a real application. <p> Below, we briefly introduce these systems and describe their support for text retrieval. 3.1 BASISPlus We chose BASISPlus <ref> [Inf90] </ref> as a our reference system on the information retrieval side as it was used in a former project [HKS93] and hence available and familiar to us. BASISPlus is a hybrid information retrieval and database system with a relational data model and set-valued attributes.
Reference: [Knu73] <author> D. E. Knuth. </author> <booktitle> The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1973. </year>
Reference-contexts: In the current study, we only address boolean retrieval. 2.1 Indexing Documents using Inverted Lists Today, inverted lists are the de facto standard for word-based indexing of full text documents <ref> [Knu73, HFRYL92] </ref>, which support fast search for individual words in textual documents.
Reference: [LDE + 85] <author> V. Lum, P. Dadam, R. Erbe, J. Gunauer, P. Pistor, G. Walch, H. Werner, and J. Woodfill. </author> <title> Design of an integrated DBMS to support advanced applications. </title> <booktitle> In International Conference on Foundations of Data Organization, </booktitle> <address> Kyoto, </address> <year> 1985. </year>
Reference-contexts: Principle differences between both are described in [Rij81]. Specifically, discussions of data model issues are given in, for example, [SP82, DKA + 86]; architectural issues in <ref> [Bil82, Sch84, LDE + 85, LKD + 88, Fuh89] </ref>. Prototype systems built on top of relational systems are described in [Mac79, SSL + 83]. Our own early experience was gained by a prototype system [Pol80] built on top of IBM's SQL/DS by using the reference string indexing method [Sch77].
Reference: [LKD + 88] <author> V. Linnemann, K. Kuspert, P. Dadam, P. Pistor, R. Erbe, A. Kemper, N. Sudkamp, G. Walch, and M. Wallrath. </author> <title> Design and implementation of extensible database management system supporting user defined data types and furnctions. </title> <booktitle> In Proceedings International Conference on Very Large Databases, </booktitle> <address> Los Angeles, California, </address> <year> 1988. </year>
Reference-contexts: Principle differences between both are described in [Rij81]. Specifically, discussions of data model issues are given in, for example, [SP82, DKA + 86]; architectural issues in <ref> [Bil82, Sch84, LDE + 85, LKD + 88, Fuh89] </ref>. Prototype systems built on top of relational systems are described in [Mac79, SSL + 83]. Our own early experience was gained by a prototype system [Pol80] built on top of IBM's SQL/DS by using the reference string indexing method [Sch77].
Reference: [Mac79] <author> I.A. Macleod. </author> <title> SEQUEL as a language for document retrieval. </title> <journal> Journal of the American Society for Information Science, </journal> <volume> 30(5) </volume> <pages> 243-249, </pages> <month> September </month> <year> 1979. </year>
Reference-contexts: Principle differences between both are described in [Rij81]. Specifically, discussions of data model issues are given in, for example, [SP82, DKA + 86]; architectural issues in [Bil82, Sch84, LDE + 85, LKD + 88, Fuh89]. Prototype systems built on top of relational systems are described in <ref> [Mac79, SSL + 83] </ref>. Our own early experience was gained by a prototype system [Pol80] built on top of IBM's SQL/DS by using the reference string indexing method [Sch77].
Reference: [Ora92] <author> Oracle Corporation, </author> <title> 500 Oracle Parkway, </title> <address> Redwood City, CA 94065. </address> <note> PL/SQL User's Guide and References (Version 2.0), </note> <month> December </month> <year> 1992. </year>
Reference-contexts: SQL*InvertedList Note, that this algorithm cannot be processed using one SQL-Statement because of its iterative nature. It can be executed either on the server side using PL/SQL <ref> [Ora92] </ref> or as an embedded SQL program on the client side. Measurements (with embedded SQL) using this method with MAX = 50 showed performance benefits for both I/O and response times (less tuples have to be fetched for execution of the LIKE part) for all cases with previously poor performance.
Reference: [Ora94] <author> Oracle TextServer. White Paper A17283, Oracle Corporation, </author> <month> March </month> <year> 1994. </year> <title> Servers to Manage Very Large Document Databases. </title>
Reference-contexts: Direct access to the hitlist table followed by an array fetch of the qualifying tuples is not supported by SQL*TR. Oracle plans to extend its activities in the field of text management by releasing a new product, SQL*TextServer <ref> [Ora94] </ref>, in the near future. SQL*TextServer will make use of the Application Programmers Interface, which allows a tighter coupling of the text retrieval component with the server and therefore will increase retrieval efficiency.
Reference: [Pol80] <author> R. Poloczek. </author> <title> SQL Text Retrieval in SQL/DS. </title> <type> Confidential technical report, </type> <institution> IBM Scientific Center, </institution> <address> Heidelberg, </address> <year> 1980. </year>
Reference-contexts: Prototype systems built on top of relational systems are described in [Mac79, SSL + 83]. Our own early experience was gained by a prototype system <ref> [Pol80] </ref> built on top of IBM's SQL/DS by using the reference string indexing method [Sch77]. Although these early attempts showed some promise, the consensus was more or less that relational systems were not really suitable for text retrieval. <p> Such terms should be stored in user-defined relations as proposed with SQL*InvList. On the other hand, SQL*InvList does not show good results for unselective terms: their posting lists should be stored in bitlists. From these observations, a hybrid approach as implemented in <ref> [Pol80] </ref> could be taken and relations as well as bitlists could be used. The results presented for SQL*InvList could give the impression that this approach can be used for any kind of text problem. We think this is not the case.
Reference: [Rij81] <editor> C.J. van Rijsbergen. </editor> <booktitle> Information Retrieval. Butterworth, </booktitle> <year> 1981. </year>
Reference-contexts: 1 Introduction and Motivation In the late seventies and early eighties a considerable amount of research was devoted to the comparison of database systems (DBS) and information retrieval systems (IRS) and to a synthesis of these. Principle differences between both are described in <ref> [Rij81] </ref>. Specifically, discussions of data model issues are given in, for example, [SP82, DKA + 86]; architectural issues in [Bil82, Sch84, LDE + 85, LKD + 88, Fuh89]. Prototype systems built on top of relational systems are described in [Mac79, SSL + 83].
Reference: [Sal75] <author> G. Salton. </author> <title> Dynamic Information and Library Processing. </title> <publisher> Prentice Hall, </publisher> <year> 1975. </year>
Reference-contexts: The individual identifiers are called postings. The cardinality of a posting list is called the descriptor's document frequency. Documents can be retrieved using a boolean retrieval method or a non-boolean <ref> [Sal75] </ref>. While the former delivers a set of matching documents, the latter delivers an ordered ranking of documents, from which some prefix must be selected as the query's final result.
Reference: [Sch77] <author> H.-J. Schek. </author> <title> The reference string access method and partial match retrieval. </title> <type> Technical Report TR 77.12.008, </type> <institution> IBM Germany, Heidelberg Scientific Center, </institution> <month> December </month> <year> 1977. </year>
Reference-contexts: Prototype systems built on top of relational systems are described in [Mac79, SSL + 83]. Our own early experience was gained by a prototype system [Pol80] built on top of IBM's SQL/DS by using the reference string indexing method <ref> [Sch77] </ref>. Although these early attempts showed some promise, the consensus was more or less that relational systems were not really suitable for text retrieval.
Reference: [Sch84] <author> H.-J. Schek. </author> <title> Nested Transactions in a Combined IR-DBMS Architecture. </title> <editor> In C.J. van Rijsbergen, editor, </editor> <booktitle> Proceeding of the 3rd BCS/ACM Symposium on Research and Development in Information Retrieval, The British Computer Society Workshop Series, </booktitle> <pages> pages 55-70, </pages> <address> Cambridge, July 1984. </address> <publisher> British Computer Society, Cambridge University Press. </publisher>
Reference-contexts: Principle differences between both are described in [Rij81]. Specifically, discussions of data model issues are given in, for example, [SP82, DKA + 86]; architectural issues in <ref> [Bil82, Sch84, LDE + 85, LKD + 88, Fuh89] </ref>. Prototype systems built on top of relational systems are described in [Mac79, SSL + 83]. Our own early experience was gained by a prototype system [Pol80] built on top of IBM's SQL/DS by using the reference string indexing method [Sch77].
Reference: [SP82] <author> H.-J. Schek and P. Pistor. </author> <title> Data structures for an integrated database management and information retrieval system. </title> <booktitle> In Proceedings International Conference on Very Large Databases, </booktitle> <pages> pages 197-207, </pages> <address> Mexico, </address> <year> 1982. </year>
Reference-contexts: Principle differences between both are described in [Rij81]. Specifically, discussions of data model issues are given in, for example, <ref> [SP82, DKA + 86] </ref>; architectural issues in [Bil82, Sch84, LDE + 85, LKD + 88, Fuh89]. Prototype systems built on top of relational systems are described in [Mac79, SSL + 83].
Reference: [SPSW90] <author> H.-J. Schek, H.-B. Paul, M.H. Scholl, and G. Weikum. </author> <title> The DASDBS project: Objectives, experiences and future prospects. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 25-43, </pages> <month> March </month> <year> 1990. </year> <note> Special Issue on Database Prototype Systems. </note>
Reference-contexts: Although these early attempts showed some promise, the consensus was more or less that relational systems were not really suitable for text retrieval. Many groups started to build new next generation database systems, e.g. <ref> [SR86, SW86, SPSW90] </ref>, rather than putting a document management and search preprocessor on top of existing database systems.
Reference: [SQL92] <author> SQL*TextRetrieval. </author> <type> Technical overview, </type> <institution> Oracle Corporation, </institution> <year> 1992. </year> <note> Version 2. </note>
Reference-contexts: We also show that it is necessary to introduce a simple query op-timisation by comparing our own preprocessor solution with the commercially available product SQL*TextRetrieval <ref> [SQL92] </ref>. The test data are taken from a real application. Although we restricted ourselves to a single application, we think that the observations gained there point out that the existing widely-held opinion that it is inappropriate to support an IRS on a DBS should not be taken for granted. <p> However, we also implemented our own preprocessor and this could have been done equally well on other relational systems. SQL*TextRetrieval A preprocessor called SQL*TextRetrieval (SQL*TR) to manage textual data in Oracle was introduced by Oracle itself some years ago <ref> [SQL92] </ref>. Unlike "Standard Oracle", SQL*TR allows not only the storage of texts, but also their word-based indexing using inverted lists with a bitlist representation as described in Sec. 2.2.
Reference: [SR86] <author> M.R. Stonebraker and L.A. Rowe. </author> <title> The design of POSTGRES. </title> <booktitle> In Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 340-355, </pages> <address> Washing-ton, D.C., </address> <month> May </month> <year> 1986. </year> <note> ACM. </note>
Reference-contexts: Although these early attempts showed some promise, the consensus was more or less that relational systems were not really suitable for text retrieval. Many groups started to build new next generation database systems, e.g. <ref> [SR86, SW86, SPSW90] </ref>, rather than putting a document management and search preprocessor on top of existing database systems.
Reference: [SSL + 83] <author> M. Stonebraker, H. Stettner, N. Lynn, J. Kalash, and A. Guttmann. </author> <title> Document processing in a relational database system. </title> <journal> ACM Transactions on Office Informations Systems, </journal> <volume> 1(2) </volume> <pages> 143-158, </pages> <month> April </month> <year> 1983. </year>
Reference-contexts: Principle differences between both are described in [Rij81]. Specifically, discussions of data model issues are given in, for example, [SP82, DKA + 86]; architectural issues in [Bil82, Sch84, LDE + 85, LKD + 88, Fuh89]. Prototype systems built on top of relational systems are described in <ref> [Mac79, SSL + 83] </ref>. Our own early experience was gained by a prototype system [Pol80] built on top of IBM's SQL/DS by using the reference string indexing method [Sch77].
Reference: [SW86] <author> H.-J. Schek and G. Weikum. DASDBS: </author> <title> Concepts and architecture of a database system for advanced applications. </title> <type> Technical Report DVSI-1986-T1, </type> <institution> TU Darmstadt, </institution> <year> 1986. </year> <note> German Version in: </note> <institution> Informatik Forschung und Entwicklung, </institution> <year> 1987. </year>
Reference-contexts: Although these early attempts showed some promise, the consensus was more or less that relational systems were not really suitable for text retrieval. Many groups started to build new next generation database systems, e.g. <ref> [SR86, SW86, SPSW90] </ref>, rather than putting a document management and search preprocessor on top of existing database systems.
Reference: [Zip49] <author> G.K. Zipf. </author> <title> Human Behaviour and the Principle of Least Effort. </title> <publisher> Addison-Wesley Press, </publisher> <year> 1949. </year>
Reference-contexts: This physical storage structure has basically two disadvantages: Firstly, most commercially available database systems do not offer support for variable length clusters. Determining an ideal but fixed cluster size is not possible due to the Zipfian distribution <ref> [Zip49] </ref> of the descriptors: A lot of descriptors only occur once or twice, others very often. Hence, a big cluster size results in a waste of space in the case of infrequent descriptors, whereas, a small cluster size results in a distribution of frequent descriptors over many pages.
References-found: 24

